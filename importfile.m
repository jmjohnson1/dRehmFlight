function [roll_imu, pitch_imu, yaw_imu, alpha1, beta1, roll_des, pitch_des, yaw_des, throttle_des, roll_pid, pitch_pid, yaw_pid, radio_ch1, radio_ch2, radio_ch3, radio_ch4, radio_ch5, radio_ch6, radio_ch7, radio_ch8, radio_ch9, radio_ch10, radio_ch11, radio_ch12, radio_ch13, GyroX, GyroY, GyroZ, AccX, AccY, AccZ, s1_command, s2_command, s3_command, s4_command, kp_roll, ki_roll, kd_roll, kp_pitch, ki_pitch, kd_pitch, kp_yaw, ki_yaw, kd_yaw, failsafeTriggered, kp_alphaRoll, ki_alphaRoll, kd_alphaRoll, kp_betaPitch, ki_betaPitch, kd_betaPitch, ripIMU_roll, ripIMU_pitch, ripRoll_des, ripPitch_des, error_alphaRoll, integral_alphaRoll, derivative_alphaRoll, error_betaPitch, integral_betaPitch, derivative_betaPitch] = importfile1(filename, dataLines)
%IMPORTFILE1 Import data from a text file
%  [ROLL_IMU, PITCH_IMU, YAW_IMU, ALPHA1, BETA1, ROLL_DES, PITCH_DES,
%  YAW_DES, THROTTLE_DES, ROLL_PID, PITCH_PID, YAW_PID, RADIO_CH1,
%  RADIO_CH2, RADIO_CH3, RADIO_CH4, RADIO_CH5, RADIO_CH6, RADIO_CH7,
%  RADIO_CH8, RADIO_CH9, RADIO_CH10, RADIO_CH11, RADIO_CH12, RADIO_CH13,
%  GYROX, GYROY, GYROZ, ACCX, ACCY, ACCZ, S1_COMMAND, S2_COMMAND,
%  S3_COMMAND, S4_COMMAND, KP_ROLL, KI_ROLL, KD_ROLL, KP_PITCH,
%  KI_PITCH, KD_PITCH, KP_YAW, KI_YAW, KD_YAW, FAILSAFETRIGGERED,
%  KP_ALPHAROLL, KI_ALPHAROLL, KD_ALPHAROLL, KP_BETAPITCH, KI_BETAPITCH,
%  KD_BETAPITCH, RIPIMU_ROLL, RIPIMU_PITCH, RIPROLL_DES, RIPPITCH_DES,
%  ERROR_ALPHAROLL, INTEGRAL_ALPHAROLL, DERIVATIVE_ALPHAROLL,
%  ERROR_BETAPITCH, INTEGRAL_BETAPITCH, DERIVATIVE_BETAPITCH] =
%  IMPORTFILE1(FILENAME) reads data from text file FILENAME for the
%  default selection.  Returns the data as column vectors.
%
%  [ROLL_IMU, PITCH_IMU, YAW_IMU, ALPHA1, BETA1, ROLL_DES, PITCH_DES,
%  YAW_DES, THROTTLE_DES, ROLL_PID, PITCH_PID, YAW_PID, RADIO_CH1,
%  RADIO_CH2, RADIO_CH3, RADIO_CH4, RADIO_CH5, RADIO_CH6, RADIO_CH7,
%  RADIO_CH8, RADIO_CH9, RADIO_CH10, RADIO_CH11, RADIO_CH12, RADIO_CH13,
%  GYROX, GYROY, GYROZ, ACCX, ACCY, ACCZ, S1_COMMAND, S2_COMMAND,
%  S3_COMMAND, S4_COMMAND, KP_ROLL, KI_ROLL, KD_ROLL, KP_PITCH,
%  KI_PITCH, KD_PITCH, KP_YAW, KI_YAW, KD_YAW, FAILSAFETRIGGERED,
%  KP_ALPHAROLL, KI_ALPHAROLL, KD_ALPHAROLL, KP_BETAPITCH, KI_BETAPITCH,
%  KD_BETAPITCH, RIPIMU_ROLL, RIPIMU_PITCH, RIPROLL_DES, RIPPITCH_DES,
%  ERROR_ALPHAROLL, INTEGRAL_ALPHAROLL, DERIVATIVE_ALPHAROLL,
%  ERROR_BETAPITCH, INTEGRAL_BETAPITCH, DERIVATIVE_BETAPITCH] =
%  IMPORTFILE1(FILE, DATALINES) reads data for the specified row
%  interval(s) of text file FILENAME. Specify DATALINES as a positive
%  scalar integer or a N-by-2 array of positive scalar integers for
%  dis-contiguous row intervals.
%
%  Example:
%  [roll_imu, pitch_imu, yaw_imu, alpha1, beta1, roll_des, pitch_des, yaw_des, throttle_des, roll_pid, pitch_pid, yaw_pid, radio_ch1, radio_ch2, radio_ch3, radio_ch4, radio_ch5, radio_ch6, radio_ch7, radio_ch8, radio_ch9, radio_ch10, radio_ch11, radio_ch12, radio_ch13, GyroX, GyroY, GyroZ, AccX, AccY, AccZ, s1_command, s2_command, s3_command, s4_command, kp_roll, ki_roll, kd_roll, kp_pitch, ki_pitch, kd_pitch, kp_yaw, ki_yaw, kd_yaw, failsafeTriggered, kp_alphaRoll, ki_alphaRoll, kd_alphaRoll, kp_betaPitch, ki_betaPitch, kd_betaPitch, ripIMU_roll, ripIMU_pitch, ripRoll_des, ripPitch_des, error_alphaRoll, integral_alphaRoll, derivative_alphaRoll, error_betaPitch, integral_betaPitch, derivative_betaPitch] = importfile1("/Volumes/NO NAME/flight_data2.csv", [2, Inf]);
%
%  See also READTABLE.
%
% Auto-generated by MATLAB on 08-Aug-2023 12:26:28

%% Input handling

% If dataLines is not specified, define defaults
if nargin < 2
    dataLines = [2, Inf];
end

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 61);

% Specify range and delimiter
opts.DataLines = dataLines;
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["roll_imu", "pitch_imu", "yaw_imu", "alpha1", "beta1", "roll_des", "pitch_des", "yaw_des", "throttle_des", "roll_pid", "pitch_pid", "yaw_pid", "radio_ch1", "radio_ch2", "radio_ch3", "radio_ch4", "radio_ch5", "radio_ch6", "radio_ch7", "radio_ch8", "radio_ch9", "radio_ch10", "radio_ch11", "radio_ch12", "radio_ch13", "GyroX", "GyroY", "GyroZ", "AccX", "AccY", "AccZ", "s1_command", "s2_command", "s3_command", "s4_command", "kp_roll", "ki_roll", "kd_roll", "kp_pitch", "ki_pitch", "kd_pitch", "kp_yaw", "ki_yaw", "kd_yaw", "failsafeTriggered", "kp_alphaRoll", "ki_alphaRoll", "kd_alphaRoll", "kp_betaPitch", "ki_betaPitch", "kd_betaPitch", "ripIMU_roll", "ripIMU_pitch", "ripRoll_des", "ripPitch_des", "error_alphaRoll", "integral_alphaRoll", "derivative_alphaRoll", "error_betaPitch", "integral_betaPitch", "derivative_betaPitch"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
tbl = readtable(filename, opts);

%% Convert to output type
roll_imu = tbl.roll_imu;
pitch_imu = tbl.pitch_imu;
yaw_imu = tbl.yaw_imu;
alpha1 = tbl.alpha1;
beta1 = tbl.beta1;
roll_des = tbl.roll_des;
pitch_des = tbl.pitch_des;
yaw_des = tbl.yaw_des;
throttle_des = tbl.throttle_des;
roll_pid = tbl.roll_pid;
pitch_pid = tbl.pitch_pid;
yaw_pid = tbl.yaw_pid;
radio_ch1 = tbl.radio_ch1;
radio_ch2 = tbl.radio_ch2;
radio_ch3 = tbl.radio_ch3;
radio_ch4 = tbl.radio_ch4;
radio_ch5 = tbl.radio_ch5;
radio_ch6 = tbl.radio_ch6;
radio_ch7 = tbl.radio_ch7;
radio_ch8 = tbl.radio_ch8;
radio_ch9 = tbl.radio_ch9;
radio_ch10 = tbl.radio_ch10;
radio_ch11 = tbl.radio_ch11;
radio_ch12 = tbl.radio_ch12;
radio_ch13 = tbl.radio_ch13;
GyroX = tbl.GyroX;
GyroY = tbl.GyroY;
GyroZ = tbl.GyroZ;
AccX = tbl.AccX;
AccY = tbl.AccY;
AccZ = tbl.AccZ;
s1_command = tbl.s1_command;
s2_command = tbl.s2_command;
s3_command = tbl.s3_command;
s4_command = tbl.s4_command;
kp_roll = tbl.kp_roll;
ki_roll = tbl.ki_roll;
kd_roll = tbl.kd_roll;
kp_pitch = tbl.kp_pitch;
ki_pitch = tbl.ki_pitch;
kd_pitch = tbl.kd_pitch;
kp_yaw = tbl.kp_yaw;
ki_yaw = tbl.ki_yaw;
kd_yaw = tbl.kd_yaw;
failsafeTriggered = tbl.failsafeTriggered;
kp_alphaRoll = tbl.kp_alphaRoll;
ki_alphaRoll = tbl.ki_alphaRoll;
kd_alphaRoll = tbl.kd_alphaRoll;
kp_betaPitch = tbl.kp_betaPitch;
ki_betaPitch = tbl.ki_betaPitch;
kd_betaPitch = tbl.kd_betaPitch;
ripIMU_roll = tbl.ripIMU_roll;
ripIMU_pitch = tbl.ripIMU_pitch;
ripRoll_des = tbl.ripRoll_des;
ripPitch_des = tbl.ripPitch_des;
error_alphaRoll = tbl.error_alphaRoll;
integral_alphaRoll = tbl.integral_alphaRoll;
derivative_alphaRoll = tbl.derivative_alphaRoll;
error_betaPitch = tbl.error_betaPitch;
integral_betaPitch = tbl.integral_betaPitch;
derivative_betaPitch = tbl.derivative_betaPitch;
end