
/home/james/Documents/dRehmFlight/Versions/dRehmFlight_rip/build/dRehmFlight_rip.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001400:	b580      	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001402:	f000 fa5d 	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <ResetHandler2+0x1e0>)
60001408:	2208      	movs	r2, #8
6000140a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000140e:	4a75      	ldr	r2, [pc, #468]	; (600015e4 <ResetHandler2+0x1e4>)
60001410:	4b75      	ldr	r3, [pc, #468]	; (600015e8 <ResetHandler2+0x1e8>)
60001412:	429a      	cmp	r2, r3
60001414:	d00f      	beq.n	60001436 <ResetHandler2+0x36>
	while (dest < dest_end) {
60001416:	4b75      	ldr	r3, [pc, #468]	; (600015ec <ResetHandler2+0x1ec>)
60001418:	429a      	cmp	r2, r3
6000141a:	d20c      	bcs.n	60001436 <ResetHandler2+0x36>
6000141c:	1e58      	subs	r0, r3, #1
6000141e:	1a80      	subs	r0, r0, r2
60001420:	f020 0003 	bic.w	r0, r0, #3
60001424:	3004      	adds	r0, #4
60001426:	4b70      	ldr	r3, [pc, #448]	; (600015e8 <ResetHandler2+0x1e8>)
60001428:	4418      	add	r0, r3
		*dest++ = *src++;
6000142a:	f853 1b04 	ldr.w	r1, [r3], #4
6000142e:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
60001432:	4283      	cmp	r3, r0
60001434:	d1f9      	bne.n	6000142a <ResetHandler2+0x2a>
	if (dest == src) return;
60001436:	4a6e      	ldr	r2, [pc, #440]	; (600015f0 <ResetHandler2+0x1f0>)
60001438:	4b6e      	ldr	r3, [pc, #440]	; (600015f4 <ResetHandler2+0x1f4>)
6000143a:	429a      	cmp	r2, r3
6000143c:	d010      	beq.n	60001460 <ResetHandler2+0x60>
	while (dest < dest_end) {
6000143e:	4b6e      	ldr	r3, [pc, #440]	; (600015f8 <ResetHandler2+0x1f8>)
60001440:	429a      	cmp	r2, r3
60001442:	d20d      	bcs.n	60001460 <ResetHandler2+0x60>
60001444:	4a6a      	ldr	r2, [pc, #424]	; (600015f0 <ResetHandler2+0x1f0>)
60001446:	486d      	ldr	r0, [pc, #436]	; (600015fc <ResetHandler2+0x1fc>)
60001448:	1a80      	subs	r0, r0, r2
6000144a:	f020 0003 	bic.w	r0, r0, #3
6000144e:	3004      	adds	r0, #4
60001450:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <ResetHandler2+0x1f4>)
60001452:	4418      	add	r0, r3
		*dest++ = *src++;
60001454:	f853 1b04 	ldr.w	r1, [r3], #4
60001458:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
6000145c:	4283      	cmp	r3, r0
6000145e:	d1f9      	bne.n	60001454 <ResetHandler2+0x54>
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001460:	4a67      	ldr	r2, [pc, #412]	; (60001600 <ResetHandler2+0x200>)
60001462:	4b68      	ldr	r3, [pc, #416]	; (60001604 <ResetHandler2+0x204>)
60001464:	429a      	cmp	r2, r3
60001466:	d20b      	bcs.n	60001480 <ResetHandler2+0x80>
60001468:	4b65      	ldr	r3, [pc, #404]	; (60001600 <ResetHandler2+0x200>)
6000146a:	4a67      	ldr	r2, [pc, #412]	; (60001608 <ResetHandler2+0x208>)
6000146c:	1ad2      	subs	r2, r2, r3
6000146e:	f022 0203 	bic.w	r2, r2, #3
60001472:	3204      	adds	r2, #4
60001474:	441a      	add	r2, r3
		*dest++ = 0;
60001476:	2100      	movs	r1, #0
60001478:	f843 1b04 	str.w	r1, [r3], #4
	while (dest < dest_end) {
6000147c:	4293      	cmp	r3, r2
6000147e:	d1fb      	bne.n	60001478 <ResetHandler2+0x78>
	SCB_CPACR = 0x00F00000;
60001480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001484:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
60001488:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	2300      	movs	r3, #0
6000148e:	495f      	ldr	r1, [pc, #380]	; (6000160c <ResetHandler2+0x20c>)
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler2+0x210>)
60001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
60001496:	3301      	adds	r3, #1
60001498:	2bb0      	cmp	r3, #176	; 0xb0
6000149a:	d1fa      	bne.n	60001492 <ResetHandler2+0x92>
6000149c:	4b5d      	ldr	r3, [pc, #372]	; (60001614 <ResetHandler2+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149e:	2180      	movs	r1, #128	; 0x80
600014a0:	4a5d      	ldr	r2, [pc, #372]	; (60001618 <ResetHandler2+0x218>)
600014a2:	f803 1b01 	strb.w	r1, [r3], #1
600014a6:	4293      	cmp	r3, r2
600014a8:	d1fb      	bne.n	600014a2 <ResetHandler2+0xa2>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014aa:	4e58      	ldr	r6, [pc, #352]	; (6000160c <ResetHandler2+0x20c>)
600014ac:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014b0:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b4:	4d4a      	ldr	r5, [pc, #296]	; (600015e0 <ResetHandler2+0x1e0>)
600014b6:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014ba:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000164c <ResetHandler2+0x24c>
600014c2:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014c6:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ca:	f8df 9184 	ldr.w	r9, [pc, #388]	; 60001650 <ResetHandler2+0x250>
600014ce:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014da:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	4f4f      	ldr	r7, [pc, #316]	; (6000161c <ResetHandler2+0x21c>)
600014e0:	69fb      	ldr	r3, [r7, #28]
600014e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ea:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f6:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	4b49      	ldr	r3, [pc, #292]	; (60001620 <ResetHandler2+0x220>)
600014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014fe:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001500:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001502:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001504:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001506:	f000 f9e0 	bl	600018ca <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
6000150a:	4b46      	ldr	r3, [pc, #280]	; (60001624 <ResetHandler2+0x224>)
6000150c:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150e:	4b46      	ldr	r3, [pc, #280]	; (60001628 <ResetHandler2+0x228>)
60001510:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	2363      	movs	r3, #99	; 0x63
60001514:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
60001516:	2600      	movs	r6, #0
60001518:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151a:	2303      	movs	r3, #3
6000151c:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151e:	4b43      	ldr	r3, [pc, #268]	; (6000162c <ResetHandler2+0x22c>)
60001520:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001524:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
60001528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000152c:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001530:	4b3f      	ldr	r3, [pc, #252]	; (60001630 <ResetHandler2+0x230>)
60001532:	681a      	ldr	r2, [r3, #0]
60001534:	f042 0201 	orr.w	r2, r2, #1
60001538:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153a:	685a      	ldr	r2, [r3, #4]
6000153c:	4b3d      	ldr	r3, [pc, #244]	; (60001634 <ResetHandler2+0x234>)
6000153e:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001540:	f000 fb86 	bl	60001c50 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001544:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001548:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154c:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001550:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001554:	4838      	ldr	r0, [pc, #224]	; (60001638 <ResetHandler2+0x238>)
60001556:	f000 fcfb 	bl	60001f50 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
6000155c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001560:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	4b36      	ldr	r3, [pc, #216]	; (6000163c <ResetHandler2+0x23c>)
60001564:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
60001566:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000156a:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001572:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001576:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
6000157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
6000157c:	f013 0f01 	tst.w	r3, #1
60001580:	d109      	bne.n	60001596 <ResetHandler2+0x196>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001582:	4b2f      	ldr	r3, [pc, #188]	; (60001640 <ResetHandler2+0x240>)
60001584:	4a2f      	ldr	r2, [pc, #188]	; (60001644 <ResetHandler2+0x244>)
60001586:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001588:	f642 6215 	movw	r2, #11797	; 0x2e15
6000158c:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000158e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001590:	f042 0201 	orr.w	r2, r2, #1
60001594:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001596:	4a2a      	ldr	r2, [pc, #168]	; (60001640 <ResetHandler2+0x240>)
60001598:	6893      	ldr	r3, [r2, #8]
6000159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000159e:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015a0:	f000 fa0c 	bl	600019bc <configure_external_ram>
	analog_init();
600015a4:	f000 f932 	bl	6000180c <analog_init>
	pwm_init();
600015a8:	f000 fcd6 	bl	60001f58 <__pwm_init_veneer>
	tempmon_init();
600015ac:	f000 fb80 	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
600015b0:	f000 f987 	bl	600018c2 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b4:	4a24      	ldr	r2, [pc, #144]	; (60001648 <ResetHandler2+0x248>)
600015b6:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	2b13      	cmp	r3, #19
600015ba:	d9fc      	bls.n	600015b6 <ResetHandler2+0x1b6>
	usb_init();
600015bc:	f000 fc1c 	bl	60001df8 <usb_init>
600015c0:	4a21      	ldr	r2, [pc, #132]	; (60001648 <ResetHandler2+0x248>)
600015c2:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015c8:	d3fb      	bcc.n	600015c2 <ResetHandler2+0x1c2>
	startup_debug_reset();
600015ca:	f000 f97c 	bl	600018c6 <startup_debug_reset>
	startup_late_hook();
600015ce:	f000 f979 	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015d2:	f000 fcd5 	bl	60001f80 <____libc_init_array_veneer>
	main();
600015d6:	f000 fcc3 	bl	60001f60 <__main_veneer>
	while (1) asm("WFI");
600015da:	bf30      	wfi
600015dc:	e7fd      	b.n	600015da <ResetHandler2+0x1da>
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00000000 	.word	0x00000000
600015e8:	600021a8 	.word	0x600021a8
600015ec:	00015868 	.word	0x00015868
600015f0:	20000000 	.word	0x20000000
600015f4:	60017a14 	.word	0x60017a14
600015f8:	20003ec0 	.word	0x20003ec0
600015fc:	20003ebf 	.word	0x20003ebf
60001600:	20003ec0 	.word	0x20003ec0
60001604:	20005340 	.word	0x20005340
60001608:	2000533f 	.word	0x2000533f
6000160c:	20003c00 	.word	0x20003c00
60001610:	0000d97d 	.word	0x0000d97d
60001614:	e000e400 	.word	0xe000e400
60001618:	e000e4a0 	.word	0xe000e4a0
6000161c:	400fc000 	.word	0x400fc000
60001620:	400ac000 	.word	0x400ac000
60001624:	0000bba5 	.word	0x0000bba5
60001628:	0000bbad 	.word	0x0000bbad
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	200052b8 	.word	0x200052b8
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	200052bc 	.word	0x200052bc
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001654:	4b07      	ldr	r3, [pc, #28]	; (60001674 <ResetHandler+0x20>)
60001656:	4a08      	ldr	r2, [pc, #32]	; (60001678 <ResetHandler+0x24>)
60001658:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000165a:	4a08      	ldr	r2, [pc, #32]	; (6000167c <ResetHandler+0x28>)
6000165c:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165e:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
60001662:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001664:	4b06      	ldr	r3, [pc, #24]	; (60001680 <ResetHandler+0x2c>)
60001666:	469d      	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
60001668:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000166c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001670:	f7ff fec6 	bl	60001400 <ResetHandler2>
60001674:	400ac000 	.word	0x400ac000
60001678:	aaaaaabf 	.word	0xaaaaaabf
6000167c:	00200007 	.word	0x00200007
60001680:	20068000 	.word	0x20068000

60001684 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
60001684:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	4a0f      	ldr	r2, [pc, #60]	; (600016c4 <TwoWire::configSDApin(unsigned char)+0x40>)
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000168e:	7a1b      	ldrb	r3, [r3, #8]
60001690:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001694:	689b      	ldr	r3, [r3, #8]
60001696:	4c0c      	ldr	r4, [pc, #48]	; (600016c8 <TwoWire::configSDApin(unsigned char)+0x44>)
60001698:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000169a:	6943      	ldr	r3, [r0, #20]
6000169c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016a0:	f893 c008 	ldrb.w	ip, [r3, #8]
600016a4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016a8:	6852      	ldr	r2, [r2, #4]
600016aa:	68db      	ldr	r3, [r3, #12]
600016ac:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ae:	6943      	ldr	r3, [r0, #20]
600016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016b4:	690b      	ldr	r3, [r1, #16]
600016b6:	b10b      	cbz	r3, 600016bc <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016b8:	694a      	ldr	r2, [r1, #20]
600016ba:	601a      	str	r2, [r3, #0]
	}
}
600016bc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016c0:	4770      	bx	lr
600016c2:	bf00      	nop
600016c4:	20002828 	.word	0x20002828
600016c8:	0001f861 	.word	0x0001f861

600016cc <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016cc:	b538      	push	{r3, r4, r5, lr}
600016ce:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016d0:	6943      	ldr	r3, [r0, #20]
600016d2:	7e02      	ldrb	r2, [r0, #24]
600016d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016d8:	7a10      	ldrb	r0, [r2, #8]
600016da:	4288      	cmp	r0, r1
600016dc:	d009      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016de:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016e0:	2aff      	cmp	r2, #255	; 0xff
600016e2:	d006      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016e4:	4291      	cmp	r1, r2
600016e6:	d007      	beq.n	600016f8 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016e8:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
600016ea:	2aff      	cmp	r2, #255	; 0xff
600016ec:	d001      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016ee:	428a      	cmp	r2, r1
600016f0:	d000      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x28>
}
600016f2:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016f4:	2501      	movs	r5, #1
600016f6:	e000      	b.n	600016fa <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
600016f8:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016fa:	681a      	ldr	r2, [r3, #0]
600016fc:	6812      	ldr	r2, [r2, #0]
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	421a      	tst	r2, r3
60001702:	d101      	bne.n	60001708 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001704:	7625      	strb	r5, [r4, #24]
60001706:	e7f4      	b.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001708:	4b05      	ldr	r3, [pc, #20]	; (60001720 <TwoWire::setSDA(unsigned char)+0x54>)
6000170a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000170e:	685b      	ldr	r3, [r3, #4]
60001710:	2205      	movs	r2, #5
60001712:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001714:	4629      	mov	r1, r5
60001716:	4620      	mov	r0, r4
60001718:	f7ff ffb4 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
6000171c:	e7f2      	b.n	60001704 <TwoWire::setSDA(unsigned char)+0x38>
6000171e:	bf00      	nop
60001720:	20002828 	.word	0x20002828

60001724 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001724:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001726:	4a0f      	ldr	r2, [pc, #60]	; (60001764 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
60001732:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001736:	689b      	ldr	r3, [r3, #8]
60001738:	4c0b      	ldr	r4, [pc, #44]	; (60001768 <TwoWire::configSCLpin(unsigned char)+0x44>)
6000173a:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000173c:	6943      	ldr	r3, [r0, #20]
6000173e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
60001742:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001746:	eb02 120c 	add.w	r2, r2, ip, lsl #4
6000174a:	6852      	ldr	r2, [r2, #4]
6000174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000174e:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001750:	6943      	ldr	r3, [r0, #20]
60001752:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001758:	b10b      	cbz	r3, 6000175e <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000175a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
6000175c:	601a      	str	r2, [r3, #0]
	}
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001762:	4770      	bx	lr
60001764:	20002828 	.word	0x20002828
60001768:	0001f861 	.word	0x0001f861

6000176c <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000176c:	b538      	push	{r3, r4, r5, lr}
6000176e:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001770:	6943      	ldr	r3, [r0, #20]
60001772:	7e42      	ldrb	r2, [r0, #25]
60001774:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001778:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
6000177c:	4288      	cmp	r0, r1
6000177e:	d00b      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001780:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001784:	2aff      	cmp	r2, #255	; 0xff
60001786:	d007      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001788:	4291      	cmp	r1, r2
6000178a:	d008      	beq.n	6000179e <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
60001790:	2aff      	cmp	r2, #255	; 0xff
60001792:	d001      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001794:	428a      	cmp	r2, r1
60001796:	d000      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x2e>
}
60001798:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000179a:	2501      	movs	r5, #1
6000179c:	e000      	b.n	600017a0 <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
6000179e:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a0:	681a      	ldr	r2, [r3, #0]
600017a2:	6812      	ldr	r2, [r2, #0]
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	421a      	tst	r2, r3
600017a8:	d101      	bne.n	600017ae <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017aa:	7665      	strb	r5, [r4, #25]
600017ac:	e7f4      	b.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	4b05      	ldr	r3, [pc, #20]	; (600017c4 <TwoWire::setSCL(unsigned char)+0x58>)
600017b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	2205      	movs	r2, #5
600017b8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017ba:	4629      	mov	r1, r5
600017bc:	4620      	mov	r0, r4
600017be:	f7ff ffb1 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
600017c2:	e7f2      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x3e>
600017c4:	20002828 	.word	0x20002828

600017c8 <TwoWire::begin()>:
{
600017c8:	b510      	push	{r4, lr}
600017ca:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	4a0d      	ldr	r2, [pc, #52]	; (60001804 <TwoWire::begin()+0x3c>)
600017ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
600017d0:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600017d8:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6941      	ldr	r1, [r0, #20]
600017dc:	680a      	ldr	r2, [r1, #0]
600017de:	6813      	ldr	r3, [r2, #0]
600017e0:	6849      	ldr	r1, [r1, #4]
600017e2:	430b      	orrs	r3, r1
600017e4:	6013      	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017e6:	6903      	ldr	r3, [r0, #16]
600017e8:	2202      	movs	r2, #2
600017ea:	611a      	str	r2, [r3, #16]
	setClock(100000);
600017ec:	4906      	ldr	r1, [pc, #24]	; (60001808 <TwoWire::begin()+0x40>)
600017ee:	f000 fbab 	bl	60001f48 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017f2:	7e21      	ldrb	r1, [r4, #24]
600017f4:	4620      	mov	r0, r4
600017f6:	f7ff ff45 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017fa:	7e61      	ldrb	r1, [r4, #25]
600017fc:	4620      	mov	r0, r4
600017fe:	f7ff ff91 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
}
60001802:	bd10      	pop	{r4, pc}
60001804:	400fc000 	.word	0x400fc000
60001808:	000186a0 	.word	0x000186a0

6000180c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000180c:	4b11      	ldr	r3, [pc, #68]	; (60001854 <analog_init+0x48>)
6000180e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001810:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001814:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001818:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000181c:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000181e:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
60001822:	f240 6237 	movw	r2, #1591	; 0x637
60001826:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001828:	22a0      	movs	r2, #160	; 0xa0
6000182a:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000182c:	461a      	mov	r2, r3
6000182e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001830:	f013 0f80 	tst.w	r3, #128	; 0x80
60001834:	d1fb      	bne.n	6000182e <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001836:	4b08      	ldr	r3, [pc, #32]	; (60001858 <analog_init+0x4c>)
60001838:	f240 6237 	movw	r2, #1591	; 0x637
6000183c:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000183e:	22a0      	movs	r2, #160	; 0xa0
60001840:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001842:	461a      	mov	r2, r3
60001844:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001846:	f013 0f80 	tst.w	r3, #128	; 0x80
6000184a:	d1fb      	bne.n	60001844 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
6000184c:	4b03      	ldr	r3, [pc, #12]	; (6000185c <analog_init+0x50>)
6000184e:	2200      	movs	r2, #0
60001850:	701a      	strb	r2, [r3, #0]
}
60001852:	4770      	bx	lr
60001854:	400fc000 	.word	0x400fc000
60001858:	400c8000 	.word	0x400c8000
6000185c:	200052fd 	.word	0x200052fd

60001860 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001860:	4b09      	ldr	r3, [pc, #36]	; (60001888 <flexspi2_command+0x28>)
60001862:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001866:	0400      	lsls	r0, r0, #16
60001868:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
6000186c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001870:	2201      	movs	r2, #1
60001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001876:	461a      	mov	r2, r3
60001878:	6953      	ldr	r3, [r2, #20]
6000187a:	f013 0f01 	tst.w	r3, #1
6000187e:	d0fb      	beq.n	60001878 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001880:	4b01      	ldr	r3, [pc, #4]	; (60001888 <flexspi2_command+0x28>)
60001882:	2201      	movs	r2, #1
60001884:	615a      	str	r2, [r3, #20]
}
60001886:	4770      	bx	lr
60001888:	402a4000 	.word	0x402a4000

6000188c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000188c:	4b0a      	ldr	r3, [pc, #40]	; (600018b8 <flexspi2_psram_id+0x2c>)
6000188e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001892:	4a0a      	ldr	r2, [pc, #40]	; (600018bc <flexspi2_psram_id+0x30>)
60001894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001898:	2201      	movs	r2, #1
6000189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000189e:	461a      	mov	r2, r3
600018a0:	6953      	ldr	r3, [r2, #20]
600018a2:	f013 0f01 	tst.w	r3, #1
600018a6:	d0fb      	beq.n	600018a0 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
600018a8:	4b03      	ldr	r3, [pc, #12]	; (600018b8 <flexspi2_psram_id+0x2c>)
600018aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600018ae:	2221      	movs	r2, #33	; 0x21
600018b0:	615a      	str	r2, [r3, #20]
}
600018b2:	b280      	uxth	r0, r0
600018b4:	4770      	bx	lr
600018b6:	bf00      	nop
600018b8:	402a4000 	.word	0x402a4000
600018bc:	00030004 	.word	0x00030004

600018c0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018c0:	4770      	bx	lr

600018c2 <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
600018c2:	4770      	bx	lr

600018c4 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	4770      	bx	lr

600018c6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018c6:	bf00      	nop
600018c8:	4770      	bx	lr

600018ca <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018ce:	2100      	movs	r1, #0
600018d0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	2210      	movs	r2, #16
600018d6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018da:	4a28      	ldr	r2, [pc, #160]	; (6000197c <configure_cache+0xb2>)
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018e0:	2211      	movs	r2, #17
600018e2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018e6:	4a26      	ldr	r2, [pc, #152]	; (60001980 <configure_cache+0xb6>)
600018e8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018ec:	2212      	movs	r2, #18
600018ee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018f2:	4a24      	ldr	r2, [pc, #144]	; (60001984 <configure_cache+0xba>)
600018f4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018f8:	4a23      	ldr	r2, [pc, #140]	; (60001988 <configure_cache+0xbe>)
600018fa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018fe:	4a23      	ldr	r2, [pc, #140]	; (6000198c <configure_cache+0xc2>)
60001900:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001904:	4a22      	ldr	r2, [pc, #136]	; (60001990 <configure_cache+0xc6>)
60001906:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000190a:	4a22      	ldr	r2, [pc, #136]	; (60001994 <configure_cache+0xca>)
6000190c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001910:	4a21      	ldr	r2, [pc, #132]	; (60001998 <configure_cache+0xce>)
60001912:	f042 0215 	orr.w	r2, r2, #21
60001916:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000191a:	4a20      	ldr	r2, [pc, #128]	; (6000199c <configure_cache+0xd2>)
6000191c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001920:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
60001924:	320d      	adds	r2, #13
60001926:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000192a:	4a1d      	ldr	r2, [pc, #116]	; (600019a0 <configure_cache+0xd6>)
6000192c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001930:	4a1c      	ldr	r2, [pc, #112]	; (600019a4 <configure_cache+0xda>)
60001932:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001936:	4a1c      	ldr	r2, [pc, #112]	; (600019a8 <configure_cache+0xde>)
60001938:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000193c:	4a1b      	ldr	r2, [pc, #108]	; (600019ac <configure_cache+0xe2>)
6000193e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001942:	4a1b      	ldr	r2, [pc, #108]	; (600019b0 <configure_cache+0xe6>)
60001944:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001948:	4a1a      	ldr	r2, [pc, #104]	; (600019b4 <configure_cache+0xea>)
6000194a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000194e:	4a1a      	ldr	r2, [pc, #104]	; (600019b8 <configure_cache+0xee>)
60001950:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001954:	2201      	movs	r2, #1
60001956:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000195a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000195e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001962:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000196e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60001972:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001976:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000197a:	4770      	bx	lr
6000197c:	1000003f 	.word	0x1000003f
60001980:	03080025 	.word	0x03080025
60001984:	00100009 	.word	0x00100009
60001988:	00200013 	.word	0x00200013
6000198c:	07020021 	.word	0x07020021
60001990:	20000014 	.word	0x20000014
60001994:	13080025 	.word	0x13080025
60001998:	20005340 	.word	0x20005340
6000199c:	10000009 	.word	0x10000009
600019a0:	130b0027 	.word	0x130b0027
600019a4:	40000017 	.word	0x40000017
600019a8:	13100033 	.word	0x13100033
600019ac:	60000018 	.word	0x60000018
600019b0:	070b002f 	.word	0x070b002f
600019b4:	70000019 	.word	0x70000019
600019b8:	130b002f 	.word	0x130b002f

600019bc <configure_external_ram>:
{
600019bc:	b510      	push	{r4, lr}
600019be:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019c0:	4b8c      	ldr	r3, [pc, #560]	; (60001bf4 <configure_external_ram+0x238>)
600019c2:	4a8d      	ldr	r2, [pc, #564]	; (60001bf8 <configure_external_ram+0x23c>)
600019c4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019c8:	498c      	ldr	r1, [pc, #560]	; (60001bfc <configure_external_ram+0x240>)
600019ca:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600019d2:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
600019d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019da:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
600019de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019ea:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019ee:	2218      	movs	r2, #24
600019f0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019f2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019f4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019f6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019f8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
60001a0a:	2201      	movs	r2, #1
60001a0c:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a10:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a14:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a18:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a1c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a20:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a24:	4b76      	ldr	r3, [pc, #472]	; (60001c00 <configure_external_ram+0x244>)
60001a26:	699a      	ldr	r2, [r3, #24]
60001a28:	4976      	ldr	r1, [pc, #472]	; (60001c04 <configure_external_ram+0x248>)
60001a2a:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a2c:	4a76      	ldr	r2, [pc, #472]	; (60001c08 <configure_external_ram+0x24c>)
60001a2e:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a30:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
60001a36:	f042 020c 	orr.w	r2, r2, #12
60001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a3e:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
60001a42:	681a      	ldr	r2, [r3, #0]
60001a44:	f042 0202 	orr.w	r2, r2, #2
60001a48:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a4a:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a4c:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
60001a50:	f021 0173 	bic.w	r1, r1, #115	; 0x73
60001a54:	0409      	lsls	r1, r1, #16
60001a56:	0c09      	lsrs	r1, r1, #16
60001a58:	4a6c      	ldr	r2, [pc, #432]	; (60001c0c <configure_external_ram+0x250>)
60001a5a:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a5c:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60001a62:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a64:	496a      	ldr	r1, [pc, #424]	; (60001c10 <configure_external_ram+0x254>)
60001a66:	6888      	ldr	r0, [r1, #8]
60001a68:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60001a6c:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60001a70:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a76:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a78:	68da      	ldr	r2, [r3, #12]
60001a7a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60001a7e:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a80:	6a1a      	ldr	r2, [r3, #32]
60001a82:	4c64      	ldr	r4, [pc, #400]	; (60001c14 <configure_external_ram+0x258>)
60001a84:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a86:	4864      	ldr	r0, [pc, #400]	; (60001c18 <configure_external_ram+0x25c>)
60001a88:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8a:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8c:	6a1a      	ldr	r2, [r3, #32]
60001a8e:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a90:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a92:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a94:	4a61      	ldr	r2, [pc, #388]	; (60001c1c <configure_external_ram+0x260>)
60001a96:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a9a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60001a9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001aa2:	f042 0201 	orr.w	r2, r2, #1
60001aa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aaa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60001aae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001ab2:	f042 0201 	orr.w	r2, r2, #1
60001ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001aba:	2200      	movs	r2, #0
60001abc:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
60001ac2:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ac4:	4956      	ldr	r1, [pc, #344]	; (60001c20 <configure_external_ram+0x264>)
60001ac6:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ac8:	f240 6205 	movw	r2, #1541	; 0x605
60001acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001ad0:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001ad8:	681a      	ldr	r2, [r3, #0]
60001ada:	f022 0202 	bic.w	r2, r2, #2
60001ade:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ae0:	4a50      	ldr	r2, [pc, #320]	; (60001c24 <configure_external_ram+0x268>)
60001ae2:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ae4:	2202      	movs	r2, #2
60001ae6:	61da      	str	r2, [r3, #28]
60001ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001aec:	2100      	movs	r1, #0
60001aee:	4a4e      	ldr	r2, [pc, #312]	; (60001c28 <configure_external_ram+0x26c>)
60001af0:	f843 1b04 	str.w	r1, [r3], #4
60001af4:	4293      	cmp	r3, r2
60001af6:	d1fb      	bne.n	60001af0 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001af8:	4a4c      	ldr	r2, [pc, #304]	; (60001c2c <configure_external_ram+0x270>)
60001afa:	6813      	ldr	r3, [r2, #0]
60001afc:	f043 0301 	orr.w	r3, r3, #1
60001b00:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b02:	6813      	ldr	r3, [r2, #0]
60001b04:	f013 0f01 	tst.w	r3, #1
60001b08:	d1fb      	bne.n	60001b02 <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	4b48      	ldr	r3, [pc, #288]	; (60001c2c <configure_external_ram+0x270>)
60001b0c:	4a45      	ldr	r2, [pc, #276]	; (60001c24 <configure_external_ram+0x268>)
60001b0e:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
60001b12:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b14:	f240 62f5 	movw	r2, #1781	; 0x6f5
60001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b1c:	f240 4266 	movw	r2, #1126	; 0x466
60001b20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b24:	f240 4299 	movw	r2, #1177	; 0x499
60001b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b2c:	4a40      	ldr	r2, [pc, #256]	; (60001c30 <configure_external_ram+0x274>)
60001b2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b32:	f242 4201 	movw	r2, #9217	; 0x2401
60001b36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b3a:	f240 4235 	movw	r2, #1077	; 0x435
60001b3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b42:	4a3c      	ldr	r2, [pc, #240]	; (60001c34 <configure_external_ram+0x278>)
60001b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b48:	4a3b      	ldr	r2, [pc, #236]	; (60001c38 <configure_external_ram+0x27c>)
60001b4a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b4e:	4a3b      	ldr	r2, [pc, #236]	; (60001c3c <configure_external_ram+0x280>)
60001b50:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b54:	f242 2201 	movw	r2, #8705	; 0x2201
60001b58:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b5c:	2100      	movs	r1, #0
60001b5e:	4608      	mov	r0, r1
60001b60:	f7ff fe7e 	bl	60001860 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b64:	2100      	movs	r1, #0
60001b66:	2001      	movs	r0, #1
60001b68:	f7ff fe7a 	bl	60001860 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b6c:	2100      	movs	r1, #0
60001b6e:	4620      	mov	r0, r4
60001b70:	f7ff fe76 	bl	60001860 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b74:	2000      	movs	r0, #0
60001b76:	f7ff fe89 	bl	6000188c <flexspi2_psram_id>
60001b7a:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001b7e:	4298      	cmp	r0, r3
60001b80:	d007      	beq.n	60001b92 <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b82:	4b2f      	ldr	r3, [pc, #188]	; (60001c40 <configure_external_ram+0x284>)
60001b84:	2200      	movs	r2, #0
60001b86:	601a      	str	r2, [r3, #0]
60001b88:	605a      	str	r2, [r3, #4]
60001b8a:	609a      	str	r2, [r3, #8]
60001b8c:	60da      	str	r2, [r3, #12]
}
60001b8e:	b002      	add	sp, #8
60001b90:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
60001b92:	2100      	movs	r1, #0
60001b94:	2004      	movs	r0, #4
60001b96:	f7ff fe63 	bl	60001860 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b9a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001b9e:	2000      	movs	r0, #0
60001ba0:	f7ff fe5e 	bl	60001860 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001ba8:	2001      	movs	r0, #1
60001baa:	f7ff fe59 	bl	60001860 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001bae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bb2:	4620      	mov	r0, r4
60001bb4:	f7ff fe54 	bl	60001860 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60001bbc:	f7ff fe66 	bl	6000188c <flexspi2_psram_id>
60001bc0:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001bc4:	4298      	cmp	r0, r3
60001bc6:	d00e      	beq.n	60001be6 <configure_external_ram+0x22a>
60001bc8:	2008      	movs	r0, #8
			external_psram_size = 16;
60001bca:	4b1e      	ldr	r3, [pc, #120]	; (60001c44 <configure_external_ram+0x288>)
60001bcc:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60001bce:	491e      	ldr	r1, [pc, #120]	; (60001c48 <configure_external_ram+0x28c>)
60001bd0:	4a1e      	ldr	r2, [pc, #120]	; (60001c4c <configure_external_ram+0x290>)
60001bd2:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd4:	2300      	movs	r3, #0
60001bd6:	9300      	str	r3, [sp, #0]
60001bd8:	2301      	movs	r3, #1
60001bda:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60001bde:	4818      	ldr	r0, [pc, #96]	; (60001c40 <configure_external_ram+0x284>)
60001be0:	f000 f9c6 	bl	60001f70 <__sm_set_pool_veneer>
60001be4:	e7d3      	b.n	60001b8e <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
60001be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bea:	2004      	movs	r0, #4
60001bec:	f7ff fe38 	bl	60001860 <flexspi2_command>
			external_psram_size = 16;
60001bf0:	2010      	movs	r0, #16
60001bf2:	e7ea      	b.n	60001bca <configure_external_ram+0x20e>
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	400fc000 	.word	0x400fc000
60001c04:	1ffffcff 	.word	0x1ffffcff
60001c08:	a0000300 	.word	0xa0000300
60001c0c:	ffff0012 	.word	0xffff0012
60001c10:	402a8000 	.word	0x402a8000
60001c14:	7cf0ff00 	.word	0x7cf0ff00
60001c18:	80000040 	.word	0x80000040
60001c1c:	830f00ff 	.word	0x830f00ff
60001c20:	00020063 	.word	0x00020063
60001c24:	5af05af0 	.word	0x5af05af0
60001c28:	402a4300 	.word	0x402a4300
60001c2c:	402a4000 	.word	0x402a4000
60001c30:	3018049f 	.word	0x3018049f
60001c34:	0a1806eb 	.word	0x0a1806eb
60001c38:	26013206 	.word	0x26013206
60001c3c:	0a180638 	.word	0x0a180638
60001c40:	20004ffc 	.word	0x20004ffc
60001c44:	20005300 	.word	0x20005300
60001c48:	70000000 	.word	0x70000000
60001c4c:	70000000 	.word	0x70000000

60001c50 <usb_pll_start>:
{
60001c50:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c52:	4a16      	ldr	r2, [pc, #88]	; (60001cac <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c54:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	f243 0042 	movw	r0, #12354	; 0x3042
60001c6a:	e002      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c6e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c70:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c74:	f013 0f02 	tst.w	r3, #2
60001c78:	d1f8      	bne.n	60001c6c <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c7e:	d00c      	beq.n	60001c9a <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c84:	d00b      	beq.n	60001c9e <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c86:	2b00      	cmp	r3, #0
60001c88:	daf3      	bge.n	60001c72 <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c8e:	d108      	bne.n	60001ca2 <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
60001c94:	d007      	beq.n	60001ca6 <usb_pll_start+0x56>
}
60001c96:	bcf0      	pop	{r4, r5, r6, r7}
60001c98:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c9a:	6155      	str	r5, [r2, #20]
			continue;
60001c9c:	e7e9      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	6156      	str	r6, [r2, #20]
			continue;
60001ca0:	e7e7      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ca2:	6191      	str	r1, [r2, #24]
			continue;
60001ca4:	e7e5      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca6:	6157      	str	r7, [r2, #20]
			continue;
60001ca8:	e7e3      	b.n	60001c72 <usb_pll_start+0x22>
60001caa:	bf00      	nop
60001cac:	400d8000 	.word	0x400d8000

60001cb0 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cb0:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb2:	4b45      	ldr	r3, [pc, #276]	; (60001dc8 <tempmon_init+0x118>)
60001cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001cb8:	f022 0201 	bic.w	r2, r2, #1
60001cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc0:	2203      	movs	r2, #3
60001cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc6:	4a41      	ldr	r2, [pc, #260]	; (60001dcc <tempmon_init+0x11c>)
60001cc8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ccc:	b2d1      	uxtb	r1, r2
60001cce:	4c40      	ldr	r4, [pc, #256]	; (60001dd0 <tempmon_init+0x120>)
60001cd0:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd2:	f3c2 200b 	ubfx	r0, r2, #8, #12
60001cd6:	4d3f      	ldr	r5, [pc, #252]	; (60001dd4 <tempmon_init+0x124>)
60001cd8:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cda:	ee07 1a90 	vmov	s15, r1
60001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
60001ce2:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
60001ce6:	ee37 6a64 	vsub.f32	s12, s14, s9
60001cea:	493b      	ldr	r1, [pc, #236]	; (60001dd8 <tempmon_init+0x128>)
60001cec:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cf0:	ee07 0a90 	vmov	s15, r0
60001cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf8:	0d12      	lsrs	r2, r2, #20
60001cfa:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d02:	ee77 7ae6 	vsub.f32	s15, s15, s13
60001d06:	4835      	ldr	r0, [pc, #212]	; (60001ddc <tempmon_init+0x12c>)
60001d08:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 60001de0 <tempmon_init+0x130>
60001d14:	ee37 7a65 	vsub.f32	s14, s14, s11
60001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
60001d1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
60001d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
60001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d28:	ee17 ca90 	vmov	ip, s15
60001d2c:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
60001d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	ed95 6a00 	vldr	s12, [r5]
60001d38:	eeb8 6a46 	vcvt.f32.u32	s12, s12
60001d3c:	edd4 7a00 	vldr	s15, [r4]
60001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d44:	ed90 5a00 	vldr	s10, [r0]
60001d48:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	eddf 6a24 	vldr	s13, [pc, #144]	; 60001de4 <tempmon_init+0x134>
60001d54:	ee77 6ae6 	vsub.f32	s13, s15, s13
60001d58:	ee66 6a85 	vmul.f32	s13, s13, s10
60001d5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
60001d60:	ee37 7a06 	vadd.f32	s14, s14, s12
60001d64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	4a1f      	ldr	r2, [pc, #124]	; (60001de8 <tempmon_init+0x138>)
60001d6a:	ee17 0a10 	vmov	r0, s14
60001d6e:	ea02 4200 	and.w	r2, r2, r0, lsl #16
60001d72:	430a      	orrs	r2, r1
60001d74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d78:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
60001d80:	ee27 7a85 	vmul.f32	s14, s15, s10
60001d84:	eec7 7a25 	vdiv.f32	s15, s14, s11
60001d88:	ee77 7a86 	vadd.f32	s15, s15, s12
60001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60001d90:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d94:	f3c2 020b 	ubfx	r2, r2, #0, #12
60001d98:	430a      	orrs	r2, r1
60001d9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001da2:	f042 0202 	orr.w	r2, r2, #2
60001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001daa:	4b10      	ldr	r3, [pc, #64]	; (60001dec <tempmon_init+0x13c>)
60001dac:	2200      	movs	r2, #0
60001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001db2:	4b0f      	ldr	r3, [pc, #60]	; (60001df0 <tempmon_init+0x140>)
60001db4:	4a0f      	ldr	r2, [pc, #60]	; (60001df4 <tempmon_init+0x144>)
60001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dbe:	2201      	movs	r2, #1
60001dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dc4:	bc30      	pop	{r4, r5}
60001dc6:	4770      	bx	lr
60001dc8:	400d8100 	.word	0x400d8100
60001dcc:	401f4400 	.word	0x401f4400
60001dd0:	20005120 	.word	0x20005120
60001dd4:	2000511c 	.word	0x2000511c
60001dd8:	20005124 	.word	0x20005124
60001ddc:	20005128 	.word	0x20005128
60001de0:	42aa0000 	.word	0x42aa0000
60001de4:	42b40000 	.word	0x42b40000
60001de8:	0fff0000 	.word	0x0fff0000
60001dec:	e000e400 	.word	0xe000e400
60001df0:	20003c00 	.word	0x20003c00
60001df4:	0000db5b 	.word	0x0000db5b

60001df8 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001df8:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001dfa:	4b32      	ldr	r3, [pc, #200]	; (60001ec4 <usb_init+0xcc>)
60001dfc:	f640 7261 	movw	r2, #3937	; 0xf61
60001e00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001e04:	f000 f8b8 	bl	60001f78 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e08:	4a2f      	ldr	r2, [pc, #188]	; (60001ec8 <usb_init+0xd0>)
60001e0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e0e:	f043 0303 	orr.w	r3, r3, #3
60001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e16:	4b2d      	ldr	r3, [pc, #180]	; (60001ecc <usb_init+0xd4>)
60001e18:	f240 4204 	movw	r2, #1028	; 0x404
60001e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e20:	4b2b      	ldr	r3, [pc, #172]	; (60001ed0 <usb_init+0xd8>)
60001e22:	681a      	ldr	r2, [r3, #0]
60001e24:	4b2b      	ldr	r3, [pc, #172]	; (60001ed4 <usb_init+0xdc>)
60001e26:	421a      	tst	r2, r3
60001e28:	d105      	bne.n	60001e36 <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e2a:	4b28      	ldr	r3, [pc, #160]	; (60001ecc <usb_init+0xd4>)
60001e2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
60001e30:	f013 0f03 	tst.w	r3, #3
60001e34:	d01c      	beq.n	60001e70 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e36:	4b26      	ldr	r3, [pc, #152]	; (60001ed0 <usb_init+0xd8>)
60001e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e3c:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e3e:	4a23      	ldr	r2, [pc, #140]	; (60001ecc <usb_init+0xd4>)
60001e40:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e44:	f043 0302 	orr.w	r3, r3, #2
60001e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e4c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e50:	f013 0f02 	tst.w	r3, #2
60001e54:	d1fa      	bne.n	60001e4c <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001e5e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e62:	4b1b      	ldr	r3, [pc, #108]	; (60001ed0 <usb_init+0xd8>)
60001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e68:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e6a:	2019      	movs	r0, #25
60001e6c:	f000 f87c 	bl	60001f68 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e70:	4b17      	ldr	r3, [pc, #92]	; (60001ed0 <usb_init+0xd8>)
60001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
60001e76:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60001e78:	2100      	movs	r1, #0
60001e7a:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e7c:	4c13      	ldr	r4, [pc, #76]	; (60001ecc <usb_init+0xd4>)
60001e7e:	230a      	movs	r3, #10
60001e80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e84:	4d14      	ldr	r5, [pc, #80]	; (60001ed8 <usb_init+0xe0>)
60001e86:	f44f 7220 	mov.w	r2, #640	; 0x280
60001e8a:	4628      	mov	r0, r5
60001e8c:	f000 f87c 	bl	60001f88 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e90:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
60001e94:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60001e9a:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ea0:	f240 1343 	movw	r3, #323	; 0x143
60001ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60001ea8:	4b0c      	ldr	r3, [pc, #48]	; (60001edc <usb_init+0xe4>)
60001eaa:	4a0d      	ldr	r2, [pc, #52]	; (60001ee0 <usb_init+0xe8>)
60001eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ebc:	2301      	movs	r3, #1
60001ebe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ec2:	bd38      	pop	{r3, r4, r5, pc}
60001ec4:	400d8000 	.word	0x400d8000
60001ec8:	400fc000 	.word	0x400fc000
60001ecc:	402e0000 	.word	0x402e0000
60001ed0:	400d9000 	.word	0x400d9000
60001ed4:	001e1c00 	.word	0x001e1c00
60001ed8:	20000000 	.word	0x20000000
60001edc:	20003c00 	.word	0x20003c00
60001ee0:	0000de55 	.word	0x0000de55

60001ee4 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ee4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ee6:	4b0f      	ldr	r3, [pc, #60]	; (60001f24 <_reboot_Teensyduino_+0x40>)
60001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001eea:	f013 0f02 	tst.w	r3, #2
60001eee:	d100      	bne.n	60001ef2 <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001ef0:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ef2:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ef4:	4b0c      	ldr	r3, [pc, #48]	; (60001f28 <_reboot_Teensyduino_+0x44>)
60001ef6:	2200      	movs	r2, #0
60001ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001efc:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60001f00:	4a0a      	ldr	r2, [pc, #40]	; (60001f2c <_reboot_Teensyduino_+0x48>)
60001f02:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f04:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
60001f08:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
60001f0c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f0e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001f12:	4807      	ldr	r0, [pc, #28]	; (60001f30 <_reboot_Teensyduino_+0x4c>)
60001f14:	4b07      	ldr	r3, [pc, #28]	; (60001f34 <_reboot_Teensyduino_+0x50>)
60001f16:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
60001f1c:	69db      	ldr	r3, [r3, #28]
60001f1e:	689b      	ldr	r3, [r3, #8]
60001f20:	4798      	blx	r3
60001f22:	e7e6      	b.n	60001ef2 <_reboot_Teensyduino_+0xe>
60001f24:	401f4400 	.word	0x401f4400
60001f28:	402e0000 	.word	0x402e0000
60001f2c:	00200003 	.word	0x00200003
60001f30:	20208000 	.word	0x20208000
60001f34:	eb120000 	.word	0xeb120000

60001f38 <_init>:
60001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f3a:	bf00      	nop
60001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f3e:	bc08      	pop	{r3}
60001f40:	469e      	mov	lr, r3
60001f42:	4770      	bx	lr
60001f44:	0000      	movs	r0, r0
	...

60001f48 <___ZN7TwoWire8setClockEm_veneer>:
60001f48:	f85f f000 	ldr.w	pc, [pc]	; 60001f4c <___ZN7TwoWire8setClockEm_veneer+0x4>
60001f4c:	00004429 	.word	0x00004429

60001f50 <__set_arm_clock_veneer>:
60001f50:	f85f f000 	ldr.w	pc, [pc]	; 60001f54 <__set_arm_clock_veneer+0x4>
60001f54:	0000cb09 	.word	0x0000cb09

60001f58 <__pwm_init_veneer>:
60001f58:	f85f f000 	ldr.w	pc, [pc]	; 60001f5c <__pwm_init_veneer+0x4>
60001f5c:	0000d8d1 	.word	0x0000d8d1

60001f60 <__main_veneer>:
60001f60:	f85f f000 	ldr.w	pc, [pc]	; 60001f64 <__main_veneer+0x4>
60001f64:	0000cf11 	.word	0x0000cf11

60001f68 <__delay_veneer>:
60001f68:	f85f f000 	ldr.w	pc, [pc]	; 60001f6c <__delay_veneer+0x4>
60001f6c:	0000cdf9 	.word	0x0000cdf9

60001f70 <__sm_set_pool_veneer>:
60001f70:	f85f f000 	ldr.w	pc, [pc]	; 60001f74 <__sm_set_pool_veneer+0x4>
60001f74:	0000ed5d 	.word	0x0000ed5d

60001f78 <__usb_init_serialnumber_veneer>:
60001f78:	f85f f000 	ldr.w	pc, [pc]	; 60001f7c <__usb_init_serialnumber_veneer+0x4>
60001f7c:	0000e41d 	.word	0x0000e41d

60001f80 <____libc_init_array_veneer>:
60001f80:	f85f f000 	ldr.w	pc, [pc]	; 60001f84 <____libc_init_array_veneer+0x4>
60001f84:	000118e9 	.word	0x000118e9

60001f88 <__memset_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <__memset_veneer+0x4>
60001f8c:	0001182d 	.word	0x0001182d

60001f90 <__frame_dummy_init_array_entry>:
60001f90:	00000045 0000016d 00003111 000044c9     E...m....1...D..
60001fa0:	00004a0d 0000521d 0000c25d              .J...R..]...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
#endif
}

uint8_t PWMServo::attached()
{
	if (pin >= NUM_DIGITAL_PINS) return 0;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	return (attachedpins[pin >> 5] & (1 << (pin & 31))) ? 1 : 0;
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
      36:	4770      	bx	lr
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	20003ec0 	.word	0x20003ec0
      3c:	20003ec0 	.word	0x20003ec0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    }
  }
  return readStop();
 fail:
  return false;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	f3af 8000 	nop.w
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
  return false;
      60:	20005064 	.word	0x20005064
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( target == nullptr) return true;
      64:	6001c800 	.word	0x6001c800

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6c:	6900      	ldr	r0, [r0, #16]
      6e:	b120      	cbz	r0, 7a <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
      70:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
      72:	6803      	ldr	r3, [r0, #0]
      74:	68db      	ldr	r3, [r3, #12]
      76:	4798      	blx	r3
	}
      78:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
      7a:	2000      	movs	r0, #0
	}
      7c:	4770      	bx	lr

0000007e <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      7e:	6900      	ldr	r0, [r0, #16]
      80:	b120      	cbz	r0, 8c <File::available()+0xe>
	int available() {
      82:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
      84:	6803      	ldr	r3, [r0, #0]
      86:	691b      	ldr	r3, [r3, #16]
      88:	4798      	blx	r3
	}
      8a:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
      8c:	2000      	movs	r0, #0
	}
      8e:	4770      	bx	lr

00000090 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      90:	6900      	ldr	r0, [r0, #16]
      92:	b120      	cbz	r0, 9e <File::peek()+0xe>
	int peek() {
      94:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
      96:	6803      	ldr	r3, [r0, #0]
      98:	695b      	ldr	r3, [r3, #20]
      9a:	4798      	blx	r3
	}
      9c:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
      9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      a2:	4770      	bx	lr

000000a4 <File::flush()>:
	void flush() {
		if (f) f->flush();
      a4:	6900      	ldr	r0, [r0, #16]
      a6:	b120      	cbz	r0, b2 <File::flush()+0xe>
	void flush() {
      a8:	b508      	push	{r3, lr}
		if (f) f->flush();
      aa:	6803      	ldr	r3, [r0, #0]
      ac:	699b      	ldr	r3, [r3, #24]
      ae:	4798      	blx	r3
	}
      b0:	bd08      	pop	{r3, pc}
      b2:	4770      	bx	lr

000000b4 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
      b4:	6900      	ldr	r0, [r0, #16]
      b6:	b168      	cbz	r0, d4 <File::read()+0x20>
	int read() {
      b8:	b500      	push	{lr}
      ba:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
      bc:	6803      	ldr	r3, [r0, #0]
      be:	689b      	ldr	r3, [r3, #8]
      c0:	2201      	movs	r2, #1
      c2:	f10d 0107 	add.w	r1, sp, #7
      c6:	4798      	blx	r3
      c8:	b138      	cbz	r0, da <File::read()+0x26>
		return b;
      ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
      ce:	b003      	add	sp, #12
      d0:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
      d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      d8:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
      da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      de:	e7f6      	b.n	ce <File::read()+0x1a>

000000e0 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      e0:	b500      	push	{lr}
      e2:	b083      	sub	sp, #12
      e4:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      e8:	6900      	ldr	r0, [r0, #16]
      ea:	b140      	cbz	r0, fe <File::write(unsigned char)+0x1e>
      ec:	6803      	ldr	r3, [r0, #0]
      ee:	68db      	ldr	r3, [r3, #12]
      f0:	2201      	movs	r2, #1
      f2:	f10d 0107 	add.w	r1, sp, #7
      f6:	4798      	blx	r3
	}
      f8:	b003      	add	sp, #12
      fa:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
      fe:	2000      	movs	r0, #0
     100:	e7fa      	b.n	f8 <File::write(unsigned char)+0x18>
	...

00000104 <File::~File()>:
	virtual ~File() {
     104:	b510      	push	{r4, lr}
     106:	4604      	mov	r4, r0
     108:	4b0b      	ldr	r3, [pc, #44]	; (138 <File::~File()+0x34>)
     10a:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     10c:	6903      	ldr	r3, [r0, #16]
     10e:	b163      	cbz	r3, 12a <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     110:	685a      	ldr	r2, [r3, #4]
     112:	3a01      	subs	r2, #1
     114:	605a      	str	r2, [r3, #4]
     116:	b942      	cbnz	r2, 12a <File::~File()+0x26>
			f->close();
     118:	6900      	ldr	r0, [r0, #16]
     11a:	6803      	ldr	r3, [r0, #0]
     11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     11e:	4798      	blx	r3
			delete f;
     120:	6920      	ldr	r0, [r4, #16]
     122:	b110      	cbz	r0, 12a <File::~File()+0x26>
     124:	6803      	ldr	r3, [r0, #0]
     126:	685b      	ldr	r3, [r3, #4]
     128:	4798      	blx	r3
	}
     12a:	2114      	movs	r1, #20
     12c:	4620      	mov	r0, r4
     12e:	f00c ff95 	bl	d05c <operator delete(void*, unsigned int)>
     132:	4620      	mov	r0, r4
     134:	bd10      	pop	{r4, pc}
     136:	bf00      	nop
     138:	20002384 	.word	0x20002384

0000013c <File::~File()>:
	virtual ~File() {
     13c:	b510      	push	{r4, lr}
     13e:	4604      	mov	r4, r0
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <File::~File()+0x2c>)
     142:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     144:	6903      	ldr	r3, [r0, #16]
     146:	b163      	cbz	r3, 162 <File::~File()+0x26>
		if (--(f->refcount) == 0) {
     148:	685a      	ldr	r2, [r3, #4]
     14a:	3a01      	subs	r2, #1
     14c:	605a      	str	r2, [r3, #4]
     14e:	b942      	cbnz	r2, 162 <File::~File()+0x26>
			f->close();
     150:	6900      	ldr	r0, [r0, #16]
     152:	6803      	ldr	r3, [r0, #0]
     154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     156:	4798      	blx	r3
			delete f;
     158:	6920      	ldr	r0, [r4, #16]
     15a:	b110      	cbz	r0, 162 <File::~File()+0x26>
     15c:	6803      	ldr	r3, [r0, #0]
     15e:	685b      	ldr	r3, [r3, #4]
     160:	4798      	blx	r3
	}
     162:	4620      	mov	r0, r4
     164:	bd10      	pop	{r4, pc}
     166:	bf00      	nop
     168:	20002384 	.word	0x20002384

0000016c <_GLOBAL__sub_I_dt>:
bool doneWithSetup = 0;
int servoLoopCounter = 0;

// Number of loops before a sustained large change in values are accepted
int radioChCutoffTimeout = 10;
bool failureFlag = 0;
     16c:	b570      	push	{r4, r5, r6, lr}
String filePrefix = "flight_data";
     16e:	4e13      	ldr	r6, [pc, #76]	; (1bc <_GLOBAL__sub_I_dt+0x50>)
     170:	4913      	ldr	r1, [pc, #76]	; (1c0 <_GLOBAL__sub_I_dt+0x54>)
     172:	4630      	mov	r0, r6
     174:	f00c fb95 	bl	c8a2 <String::String(char const*)>
     178:	4c12      	ldr	r4, [pc, #72]	; (1c4 <_GLOBAL__sub_I_dt+0x58>)
     17a:	4d13      	ldr	r5, [pc, #76]	; (1c8 <_GLOBAL__sub_I_dt+0x5c>)
     17c:	4622      	mov	r2, r4
     17e:	4629      	mov	r1, r5
     180:	4630      	mov	r0, r6
     182:	f010 fd23 	bl	10bcc <__aeabi_atexit>
String fileExtension = ".csv";
     186:	4e11      	ldr	r6, [pc, #68]	; (1cc <_GLOBAL__sub_I_dt+0x60>)
     188:	4911      	ldr	r1, [pc, #68]	; (1d0 <_GLOBAL__sub_I_dt+0x64>)
     18a:	4630      	mov	r0, r6
     18c:	f00c fb89 	bl	c8a2 <String::String(char const*)>
     190:	4622      	mov	r2, r4
     192:	4629      	mov	r1, r5
     194:	4630      	mov	r0, r6
     196:	f010 fd19 	bl	10bcc <__aeabi_atexit>
String fileName;
     19a:	4e0e      	ldr	r6, [pc, #56]	; (1d4 <_GLOBAL__sub_I_dt+0x68>)
     19c:	2100      	movs	r1, #0
     19e:	4630      	mov	r0, r6
     1a0:	f00c fb7f 	bl	c8a2 <String::String(char const*)>
     1a4:	4622      	mov	r2, r4
     1a6:	4629      	mov	r1, r5
     1a8:	4630      	mov	r0, r6
     1aa:	f010 fd0f 	bl	10bcc <__aeabi_atexit>
File dataFile;
     1ae:	4622      	mov	r2, r4
     1b0:	4909      	ldr	r1, [pc, #36]	; (1d8 <_GLOBAL__sub_I_dt+0x6c>)
     1b2:	480a      	ldr	r0, [pc, #40]	; (1dc <_GLOBAL__sub_I_dt+0x70>)
     1b4:	f010 fd0a 	bl	10bcc <__aeabi_atexit>
bool failureFlag = 0;
     1b8:	bd70      	pop	{r4, r5, r6, pc}
     1ba:	bf00      	nop
     1bc:	2000502c 	.word	0x2000502c
     1c0:	20001d78 	.word	0x20001d78
     1c4:	20003344 	.word	0x20003344
     1c8:	0000c811 	.word	0x0000c811
     1cc:	2000500c 	.word	0x2000500c
     1d0:	20001d84 	.word	0x20001d84
     1d4:	2000501c 	.word	0x2000501c
     1d8:	0000013d 	.word	0x0000013d
     1dc:	20003944 	.word	0x20003944

000001e0 <Print::flush()>:
	virtual void flush()				{ }
     1e0:	4770      	bx	lr

000001e2 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     1e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
     1e4:	b113      	cbz	r3, 1ec <SDFile::position()+0xa>
     1e6:	6958      	ldr	r0, [r3, #20]
     1e8:	2100      	movs	r1, #0
     1ea:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     1ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
     1ee:	b113      	cbz	r3, 1f6 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     1f0:	6818      	ldr	r0, [r3, #0]
     1f2:	6859      	ldr	r1, [r3, #4]
     1f4:	4770      	bx	lr
     1f6:	2000      	movs	r0, #0
     1f8:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     1fa:	4770      	bx	lr

000001fc <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     1fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
     1fe:	b113      	cbz	r3, 206 <SDFile::size()+0xa>
     200:	69d8      	ldr	r0, [r3, #28]
     202:	2100      	movs	r1, #0
     204:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     206:	6d43      	ldr	r3, [r0, #84]	; 0x54
     208:	b113      	cbz	r3, 210 <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     20a:	6918      	ldr	r0, [r3, #16]
     20c:	6959      	ldr	r1, [r3, #20]
     20e:	4770      	bx	lr
     210:	2000      	movs	r0, #0
     212:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     214:	4770      	bx	lr

00000216 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     216:	6d03      	ldr	r3, [r0, #80]	; 0x50
     218:	b10b      	cbz	r3, 21e <SDFile::isOpen()+0x8>
     21a:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     21c:	4770      	bx	lr
     21e:	6d40      	ldr	r0, [r0, #84]	; 0x54
     220:	3800      	subs	r0, #0
     222:	bf18      	it	ne
     224:	2001      	movne	r0, #1
     226:	4770      	bx	lr

00000228 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     228:	6c83      	ldr	r3, [r0, #72]	; 0x48
     22a:	b153      	cbz	r3, 242 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     22c:	781a      	ldrb	r2, [r3, #0]
     22e:	f012 0f08 	tst.w	r2, #8
     232:	d020      	beq.n	276 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     234:	69d8      	ldr	r0, [r3, #28]
     236:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     238:	1ac0      	subs	r0, r0, r3
     23a:	bf48      	it	mi
     23c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     240:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     242:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     244:	b1cb      	cbz	r3, 27a <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     246:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     24a:	f012 0f08 	tst.w	r2, #8
     24e:	d016      	beq.n	27e <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     250:	b410      	push	{r4}
     252:	691a      	ldr	r2, [r3, #16]
     254:	6959      	ldr	r1, [r3, #20]
     256:	6818      	ldr	r0, [r3, #0]
     258:	685c      	ldr	r4, [r3, #4]
     25a:	1a13      	subs	r3, r2, r0
     25c:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     260:	4618      	mov	r0, r3
     262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     266:	f172 0200 	sbcs.w	r2, r2, #0
     26a:	d301      	bcc.n	270 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     26c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    return BaseFile::available();
  }
     270:	f85d 4b04 	ldr.w	r4, [sp], #4
     274:	4770      	bx	lr
     276:	2000      	movs	r0, #0
     278:	4770      	bx	lr
     27a:	2000      	movs	r0, #0
    return BaseFile::available();
     27c:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     27e:	2300      	movs	r3, #0
     280:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     282:	4618      	mov	r0, r3
     284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     288:	f172 0200 	sbcs.w	r2, r2, #0
     28c:	bf28      	it	cs
     28e:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     292:	4770      	bx	lr

00000294 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     294:	798a      	ldrb	r2, [r1, #6]
     296:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     29a:	f013 0f80 	tst.w	r3, #128	; 0x80
     29e:	d120      	bne.n	2e2 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a2:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     2a4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     2a8:	794b      	ldrb	r3, [r1, #5]
     2aa:	3301      	adds	r3, #1
     2ac:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     2ae:	790d      	ldrb	r5, [r1, #4]
     2b0:	788e      	ldrb	r6, [r1, #2]
     2b2:	784f      	ldrb	r7, [r1, #1]
     2b4:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     2b6:	6d04      	ldr	r4, [r0, #80]	; 0x50
     2b8:	b14c      	cbz	r4, 2ce <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     2ba:	9103      	str	r1, [sp, #12]
     2bc:	9702      	str	r7, [sp, #8]
     2be:	9601      	str	r6, [sp, #4]
     2c0:	9500      	str	r5, [sp, #0]
     2c2:	2102      	movs	r1, #2
     2c4:	4620      	mov	r0, r4
     2c6:	f007 fe51 	bl	7f6c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     2ca:	b005      	add	sp, #20
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     2ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
     2d0:	b148      	cbz	r0, 2e6 <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     2d2:	9103      	str	r1, [sp, #12]
     2d4:	9702      	str	r7, [sp, #8]
     2d6:	9601      	str	r6, [sp, #4]
     2d8:	9500      	str	r5, [sp, #0]
     2da:	2102      	movs	r1, #2
     2dc:	f005 ff6b 	bl	61b6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     2e0:	e7f3      	b.n	2ca <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     2e2:	2000      	movs	r0, #0
	}
     2e4:	4770      	bx	lr
           m_xFile ?
     2e6:	2000      	movs	r0, #0
     2e8:	e7ef      	b.n	2ca <SDFile::setCreateTime(DateTimeFields const&)+0x36>

000002ea <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     2ea:	b510      	push	{r4, lr}
     2ec:	b082      	sub	sp, #8
     2ee:	4603      	mov	r3, r0
     2f0:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     2f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
     2f4:	b310      	cbz	r0, 33c <SDFile::getModifyTime(DateTimeFields&)+0x52>
     2f6:	aa01      	add	r2, sp, #4
     2f8:	f10d 0106 	add.w	r1, sp, #6
     2fc:	f007 fc10 	bl	7b20 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     300:	b1d0      	cbz	r0, 338 <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     302:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     306:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     30a:	ea53 0102 	orrs.w	r1, r3, r2
     30e:	d01f      	beq.n	350 <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     310:	f002 011f 	and.w	r1, r2, #31
     314:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     316:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     318:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     31c:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     31e:	0ad2      	lsrs	r2, r2, #11
     320:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     322:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     326:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     328:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     32c:	3a01      	subs	r2, #1
     32e:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     330:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     332:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     336:	71a3      	strb	r3, [r4, #6]
	}
     338:	b002      	add	sp, #8
     33a:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     33c:	6d58      	ldr	r0, [r3, #84]	; 0x54
     33e:	b128      	cbz	r0, 34c <SDFile::getModifyTime(DateTimeFields&)+0x62>
     340:	aa01      	add	r2, sp, #4
     342:	f10d 0106 	add.w	r1, sp, #6
     346:	f004 ffdf 	bl	5308 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     34a:	e7d9      	b.n	300 <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     34c:	2000      	movs	r0, #0
     34e:	e7f3      	b.n	338 <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     350:	2000      	movs	r0, #0
     352:	e7f1      	b.n	338 <SDFile::getModifyTime(DateTimeFields&)+0x4e>

00000354 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     354:	b510      	push	{r4, lr}
     356:	b082      	sub	sp, #8
     358:	4603      	mov	r3, r0
     35a:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     35c:	6d00      	ldr	r0, [r0, #80]	; 0x50
     35e:	b310      	cbz	r0, 3a6 <SDFile::getCreateTime(DateTimeFields&)+0x52>
     360:	aa01      	add	r2, sp, #4
     362:	f10d 0106 	add.w	r1, sp, #6
     366:	f007 fbcb 	bl	7b00 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     36a:	b1d0      	cbz	r0, 3a2 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     36c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     370:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     374:	ea53 0102 	orrs.w	r1, r3, r2
     378:	d01f      	beq.n	3ba <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     37a:	f002 011f 	and.w	r1, r2, #31
     37e:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     380:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     382:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     386:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     388:	0ad2      	lsrs	r2, r2, #11
     38a:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     38c:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     390:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     392:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     396:	3a01      	subs	r2, #1
     398:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     39a:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     39c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     3a0:	71a3      	strb	r3, [r4, #6]
	}
     3a2:	b002      	add	sp, #8
     3a4:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     3a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
     3a8:	b128      	cbz	r0, 3b6 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     3aa:	aa01      	add	r2, sp, #4
     3ac:	f10d 0106 	add.w	r1, sp, #6
     3b0:	f004 ff98 	bl	52e4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     3b4:	e7d9      	b.n	36a <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     3b6:	2000      	movs	r0, #0
     3b8:	e7f3      	b.n	3a2 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3ba:	2000      	movs	r0, #0
     3bc:	e7f1      	b.n	3a2 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

000003be <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     3be:	b510      	push	{r4, lr}
     3c0:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     3c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
     3c4:	b120      	cbz	r0, 3d0 <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     3c6:	7803      	ldrb	r3, [r0, #0]
     3c8:	f013 0f70 	tst.w	r3, #112	; 0x70
     3cc:	d10e      	bne.n	3ec <SDFile::rewindDirectory()+0x2e>
	}
     3ce:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     3d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
     3d2:	2b00      	cmp	r3, #0
     3d4:	d0fb      	beq.n	3ce <SDFile::rewindDirectory()+0x10>
     3d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     3da:	f013 0f50 	tst.w	r3, #80	; 0x50
     3de:	d0f6      	beq.n	3ce <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     3e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     3e2:	2200      	movs	r2, #0
     3e4:	2300      	movs	r3, #0
     3e6:	f005 f8ea 	bl	55be <ExFatFile::seekSet(unsigned long long)>
     3ea:	e7f0      	b.n	3ce <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     3ec:	2100      	movs	r1, #0
     3ee:	f007 f94f 	bl	7690 <FatFile::seekSet(unsigned long)>
     3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
     3f4:	2800      	cmp	r0, #0
     3f6:	d0ea      	beq.n	3ce <SDFile::rewindDirectory()+0x10>
     3f8:	e7f3      	b.n	3e2 <SDFile::rewindDirectory()+0x24>

000003fa <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     3fa:	b508      	push	{r3, lr}
     3fc:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     3fe:	6c80      	ldr	r0, [r0, #72]	; 0x48
     400:	b110      	cbz	r0, 408 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     402:	f007 f90f 	bl	7624 <FatFile::peek()>
  }
     406:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     408:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     40a:	b110      	cbz	r0, 412 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     40c:	f005 f8c1 	bl	5592 <ExFatFile::peek()>
     410:	e7f9      	b.n	406 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     416:	e7f6      	b.n	406 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

00000418 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     418:	b500      	push	{lr}
     41a:	b083      	sub	sp, #12
     41c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     41e:	6c80      	ldr	r0, [r0, #72]	; 0x48
     420:	b158      	cbz	r0, 43a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     422:	2201      	movs	r2, #1
     424:	f10d 0107 	add.w	r1, sp, #7
     428:	f007 f827 	bl	747a <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     42c:	2801      	cmp	r0, #1
     42e:	d10f      	bne.n	450 <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     430:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     434:	b003      	add	sp, #12
     436:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     43a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     43c:	b128      	cbz	r0, 44a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     43e:	2201      	movs	r2, #1
     440:	f10d 0107 	add.w	r1, sp, #7
     444:	f004 ffda 	bl	53fc <ExFatFile::read(void*, unsigned int)>
     448:	e7f0      	b.n	42c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     44a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     44e:	e7f1      	b.n	434 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     454:	e7ee      	b.n	434 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000456 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     456:	b508      	push	{r3, lr}
     458:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     45a:	6c80      	ldr	r0, [r0, #72]	; 0x48
     45c:	b110      	cbz	r0, 464 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     45e:	f007 fa65 	bl	792c <FatFile::sync()>
  }
     462:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     464:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     466:	2800      	cmp	r0, #0
     468:	d0fb      	beq.n	462 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     46a:	f005 fd1d 	bl	5ea8 <ExFatFile::sync()>
     46e:	e7f8      	b.n	462 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

00000470 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     470:	b500      	push	{lr}
     472:	b083      	sub	sp, #12
     474:	4603      	mov	r3, r0
     476:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     47a:	6c80      	ldr	r0, [r0, #72]	; 0x48
     47c:	b138      	cbz	r0, 48e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     47e:	2201      	movs	r2, #1
     480:	f10d 0107 	add.w	r1, sp, #7
     484:	f007 fe2a 	bl	80dc <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     488:	b003      	add	sp, #12
     48a:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     48e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     490:	b128      	cbz	r0, 49e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     492:	2201      	movs	r2, #1
     494:	f10d 0107 	add.w	r1, sp, #7
     498:	f005 ffba 	bl	6410 <ExFatFile::write(void const*, unsigned int)>
     49c:	e7f4      	b.n	488 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     49e:	2000      	movs	r0, #0
    return BaseFile::write(b);
     4a0:	e7f2      	b.n	488 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
	...

000004a4 <SDFile::name()>:
	virtual const char * name() {
     4a4:	b510      	push	{r4, lr}
     4a6:	4604      	mov	r4, r0
		if (!filename) {
     4a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
     4aa:	b10b      	cbz	r3, 4b0 <SDFile::name()+0xc>
	}
     4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
     4ae:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     4b0:	f44f 7080 	mov.w	r0, #256	; 0x100
     4b4:	f010 fe2e 	bl	11114 <malloc>
     4b8:	4601      	mov	r1, r0
     4ba:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     4bc:	b180      	cbz	r0, 4e0 <SDFile::name()+0x3c>
    *name = 0;
     4be:	2300      	movs	r3, #0
     4c0:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     4c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
     4c4:	b120      	cbz	r0, 4d0 <SDFile::name()+0x2c>
     4c6:	f44f 7280 	mov.w	r2, #256	; 0x100
     4ca:	f008 ff1d 	bl	9308 <FatFile::getName(char*, unsigned int)>
     4ce:	e7ed      	b.n	4ac <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     4d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
     4d2:	2800      	cmp	r0, #0
     4d4:	d0ea      	beq.n	4ac <SDFile::name()+0x8>
    return getName8(name, size);
     4d6:	f44f 7280 	mov.w	r2, #256	; 0x100
     4da:	f006 fc39 	bl	6d50 <ExFatFile::getName8(char*, unsigned int)>
     4de:	e7e5      	b.n	4ac <SDFile::name()+0x8>
				filename = &zeroterm;
     4e0:	4b01      	ldr	r3, [pc, #4]	; (4e8 <SDFile::name()+0x44>)
     4e2:	65a3      	str	r3, [r4, #88]	; 0x58
     4e4:	e7e2      	b.n	4ac <SDFile::name()+0x8>
     4e6:	bf00      	nop
     4e8:	200052fb 	.word	0x200052fb

000004ec <SDFile::close()>:
	virtual void close() {
     4ec:	b510      	push	{r4, lr}
     4ee:	4604      	mov	r4, r0
		if (filename) {
     4f0:	6d80      	ldr	r0, [r0, #88]	; 0x58
     4f2:	b118      	cbz	r0, 4fc <SDFile::close()+0x10>
			free(filename);
     4f4:	f010 fe16 	bl	11124 <free>
			filename = nullptr;
     4f8:	2300      	movs	r3, #0
     4fa:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     4fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
     4fe:	b123      	cbz	r3, 50a <SDFile::close()+0x1e>
			sdfatfile.close();
     500:	f104 0018 	add.w	r0, r4, #24
     504:	f009 fa1a 	bl	993c <FsBaseFile::close()>
	}
     508:	bd10      	pop	{r4, pc}
     50a:	6d63      	ldr	r3, [r4, #84]	; 0x54
     50c:	2b00      	cmp	r3, #0
     50e:	d1f7      	bne.n	500 <SDFile::close()+0x14>
     510:	e7fa      	b.n	508 <SDFile::close()+0x1c>

00000512 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     512:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     514:	6d04      	ldr	r4, [r0, #80]	; 0x50
     516:	b194      	cbz	r4, 53e <SDFile::truncate(unsigned long long)+0x2c>
     518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     51c:	4291      	cmp	r1, r2
     51e:	f04f 0100 	mov.w	r1, #0
     522:	4199      	sbcs	r1, r3
     524:	d201      	bcs.n	52a <SDFile::truncate(unsigned long long)+0x18>
     526:	2000      	movs	r0, #0
	}
     528:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     52a:	4611      	mov	r1, r2
     52c:	4620      	mov	r0, r4
     52e:	f007 f8af 	bl	7690 <FatFile::seekSet(unsigned long)>
     532:	2800      	cmp	r0, #0
     534:	d0f8      	beq.n	528 <SDFile::truncate(unsigned long long)+0x16>
     536:	4620      	mov	r0, r4
     538:	f007 fd96 	bl	8068 <FatFile::truncate()>
     53c:	e7f4      	b.n	528 <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     53e:	6d44      	ldr	r4, [r0, #84]	; 0x54
     540:	b144      	cbz	r4, 554 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     542:	4620      	mov	r0, r4
     544:	f005 f83b 	bl	55be <ExFatFile::seekSet(unsigned long long)>
     548:	2800      	cmp	r0, #0
     54a:	d0ed      	beq.n	528 <SDFile::truncate(unsigned long long)+0x16>
     54c:	4620      	mov	r0, r4
     54e:	f005 feec 	bl	632a <ExFatFile::truncate()>
     552:	e7e9      	b.n	528 <SDFile::truncate(unsigned long long)+0x16>
     554:	2000      	movs	r0, #0
     556:	e7e7      	b.n	528 <SDFile::truncate(unsigned long long)+0x16>

00000558 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	b094      	sub	sp, #80	; 0x50
     55c:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
     55e:	2200      	movs	r2, #0
     560:	9201      	str	r2, [sp, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     566:	9302      	str	r3, [sp, #8]
     568:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     56c:	9212      	str	r2, [sp, #72]	; 0x48
     56e:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     570:	4b1f      	ldr	r3, [pc, #124]	; (5f0 <SDFile::openNextFile(unsigned char)+0x98>)
     572:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     574:	3118      	adds	r1, #24
     576:	a804      	add	r0, sp, #16
     578:	f009 fa2e 	bl	99d8 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     57c:	9b12      	ldr	r3, [sp, #72]	; 0x48
     57e:	2b00      	cmp	r3, #0
     580:	d02a      	beq.n	5d8 <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     582:	205c      	movs	r0, #92	; 0x5c
     584:	f00c fd66 	bl	d054 <operator new(unsigned int)>
     588:	4604      	mov	r4, r0
class FileImpl {
     58a:	2600      	movs	r6, #0
     58c:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     58e:	4b19      	ldr	r3, [pc, #100]	; (5f4 <SDFile::openNextFile(unsigned char)+0x9c>)
     590:	6003      	str	r3, [r0, #0]
class Print
     592:	9b01      	ldr	r3, [sp, #4]
     594:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     596:	4b18      	ldr	r3, [pc, #96]	; (5f8 <SDFile::openNextFile(unsigned char)+0xa0>)
     598:	6083      	str	r3, [r0, #8]
     59a:	9b02      	ldr	r3, [sp, #8]
     59c:	6103      	str	r3, [r0, #16]
     59e:	f89d 300c 	ldrb.w	r3, [sp, #12]
     5a2:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     5a4:	a904      	add	r1, sp, #16
     5a6:	3018      	adds	r0, #24
     5a8:	f009 f987 	bl	98ba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5ac:	4b10      	ldr	r3, [pc, #64]	; (5f0 <SDFile::openNextFile(unsigned char)+0x98>)
     5ae:	60a3      	str	r3, [r4, #8]
     5b0:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     5b2:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     5b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     5b8:	60ab      	str	r3, [r5, #8]
     5ba:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     5bc:	4b0f      	ldr	r3, [pc, #60]	; (5fc <SDFile::openNextFile(unsigned char)+0xa4>)
     5be:	602b      	str	r3, [r5, #0]
		f = file;
     5c0:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     5c2:	6863      	ldr	r3, [r4, #4]
     5c4:	3301      	adds	r3, #1
     5c6:	6063      	str	r3, [r4, #4]
     5c8:	4b0d      	ldr	r3, [pc, #52]	; (600 <SDFile::openNextFile(unsigned char)+0xa8>)
     5ca:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     5cc:	a804      	add	r0, sp, #16
     5ce:	f009 f9b5 	bl	993c <FsBaseFile::close()>
	}
     5d2:	4628      	mov	r0, r5
     5d4:	b014      	add	sp, #80	; 0x50
     5d6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     5d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     5da:	2b00      	cmp	r3, #0
     5dc:	d1d1      	bne.n	582 <SDFile::openNextFile(unsigned char)+0x2a>
     5de:	606b      	str	r3, [r5, #4]
     5e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     5e4:	60aa      	str	r2, [r5, #8]
     5e6:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     5e8:	4a04      	ldr	r2, [pc, #16]	; (5fc <SDFile::openNextFile(unsigned char)+0xa4>)
     5ea:	602a      	str	r2, [r5, #0]
     5ec:	612b      	str	r3, [r5, #16]
     5ee:	e7eb      	b.n	5c8 <SDFile::openNextFile(unsigned char)+0x70>
     5f0:	200023b0 	.word	0x200023b0
     5f4:	200023d4 	.word	0x200023d4
     5f8:	20002430 	.word	0x20002430
     5fc:	20002384 	.word	0x20002384
     600:	200022a4 	.word	0x200022a4

00000604 <SDFile::peek()>:
	virtual int peek() {
     604:	b508      	push	{r3, lr}
     606:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     608:	6d00      	ldr	r0, [r0, #80]	; 0x50
     60a:	b110      	cbz	r0, 612 <SDFile::peek()+0xe>
     60c:	f007 f80a 	bl	7624 <FatFile::peek()>
	}
     610:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     612:	6d58      	ldr	r0, [r3, #84]	; 0x54
     614:	b110      	cbz	r0, 61c <SDFile::peek()+0x18>
     616:	f004 ffbc 	bl	5592 <ExFatFile::peek()>
     61a:	e7f9      	b.n	610 <SDFile::peek()+0xc>
     61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     620:	e7f6      	b.n	610 <SDFile::peek()+0xc>

00000622 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     622:	6d03      	ldr	r3, [r0, #80]	; 0x50
     624:	b133      	cbz	r3, 634 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     626:	781b      	ldrb	r3, [r3, #0]
     628:	f013 0f70 	tst.w	r3, #112	; 0x70
     62c:	bf14      	ite	ne
     62e:	2001      	movne	r0, #1
     630:	2000      	moveq	r0, #0
     632:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     634:	6d43      	ldr	r3, [r0, #84]	; 0x54
     636:	b13b      	cbz	r3, 648 <SDFile::isDirectory()+0x26>
     638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     63c:	f013 0f50 	tst.w	r3, #80	; 0x50
     640:	bf14      	ite	ne
     642:	2001      	movne	r0, #1
     644:	2000      	moveq	r0, #0
     646:	4770      	bx	lr
     648:	2000      	movs	r0, #0
	}
     64a:	4770      	bx	lr

0000064c <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     64c:	b508      	push	{r3, lr}
     64e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     650:	6d00      	ldr	r0, [r0, #80]	; 0x50
     652:	b110      	cbz	r0, 65a <SDFile::read(void*, unsigned int)+0xe>
     654:	f006 ff11 	bl	747a <FatFile::read(void*, unsigned int)>
	}
     658:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     65a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     65c:	b110      	cbz	r0, 664 <SDFile::read(void*, unsigned int)+0x18>
     65e:	f004 fecd 	bl	53fc <ExFatFile::read(void*, unsigned int)>
     662:	e7f9      	b.n	658 <SDFile::read(void*, unsigned int)+0xc>
     664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     668:	e7f6      	b.n	658 <SDFile::read(void*, unsigned int)+0xc>

0000066a <SDFile::flush()>:
	virtual void flush() {
     66a:	b508      	push	{r3, lr}
     66c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     66e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     670:	b110      	cbz	r0, 678 <SDFile::flush()+0xe>
     672:	f007 f95b 	bl	792c <FatFile::sync()>
	}
     676:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     678:	6d58      	ldr	r0, [r3, #84]	; 0x54
     67a:	2800      	cmp	r0, #0
     67c:	d0fb      	beq.n	676 <SDFile::flush()+0xc>
     67e:	f005 fc13 	bl	5ea8 <ExFatFile::sync()>
     682:	e7f8      	b.n	676 <SDFile::flush()+0xc>

00000684 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     684:	b510      	push	{r4, lr}
     686:	4604      	mov	r4, r0
     688:	4b0c      	ldr	r3, [pc, #48]	; (6bc <SDFile::~SDFile()+0x38>)
     68a:	6003      	str	r3, [r0, #0]
		if (filename) {
     68c:	6d80      	ldr	r0, [r0, #88]	; 0x58
     68e:	b118      	cbz	r0, 698 <SDFile::~SDFile()+0x14>
			free(filename);
     690:	f010 fd48 	bl	11124 <free>
			filename = nullptr;
     694:	2300      	movs	r3, #0
     696:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     698:	6d23      	ldr	r3, [r4, #80]	; 0x50
     69a:	b15b      	cbz	r3, 6b4 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     69c:	f104 0018 	add.w	r0, r4, #24
     6a0:	f009 f94c 	bl	993c <FsBaseFile::close()>
     6a4:	4b06      	ldr	r3, [pc, #24]	; (6c0 <SDFile::~SDFile()+0x3c>)
     6a6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     6a8:	f104 0018 	add.w	r0, r4, #24
     6ac:	f009 f946 	bl	993c <FsBaseFile::close()>
	}
     6b0:	4620      	mov	r0, r4
     6b2:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     6b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     6b6:	2b00      	cmp	r3, #0
     6b8:	d1f0      	bne.n	69c <SDFile::~SDFile()+0x18>
     6ba:	e7f3      	b.n	6a4 <SDFile::~SDFile()+0x20>
     6bc:	200023d4 	.word	0x200023d4
     6c0:	200022a4 	.word	0x200022a4

000006c4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     6c4:	b510      	push	{r4, lr}
     6c6:	4604      	mov	r4, r0
     6c8:	4b0e      	ldr	r3, [pc, #56]	; (704 <SDFile::~SDFile()+0x40>)
     6ca:	6003      	str	r3, [r0, #0]
		if (filename) {
     6cc:	6d80      	ldr	r0, [r0, #88]	; 0x58
     6ce:	b118      	cbz	r0, 6d8 <SDFile::~SDFile()+0x14>
			free(filename);
     6d0:	f010 fd28 	bl	11124 <free>
			filename = nullptr;
     6d4:	2300      	movs	r3, #0
     6d6:	65a3      	str	r3, [r4, #88]	; 0x58
     6d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     6da:	b17b      	cbz	r3, 6fc <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     6dc:	f104 0018 	add.w	r0, r4, #24
     6e0:	f009 f92c 	bl	993c <FsBaseFile::close()>
     6e4:	4b08      	ldr	r3, [pc, #32]	; (708 <SDFile::~SDFile()+0x44>)
     6e6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     6e8:	f104 0018 	add.w	r0, r4, #24
     6ec:	f009 f926 	bl	993c <FsBaseFile::close()>
	}
     6f0:	215c      	movs	r1, #92	; 0x5c
     6f2:	4620      	mov	r0, r4
     6f4:	f00c fcb2 	bl	d05c <operator delete(void*, unsigned int)>
     6f8:	4620      	mov	r0, r4
     6fa:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     6fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
     6fe:	2b00      	cmp	r3, #0
     700:	d1ec      	bne.n	6dc <SDFile::~SDFile()+0x18>
     702:	e7ef      	b.n	6e4 <SDFile::~SDFile()+0x20>
     704:	200023d4 	.word	0x200023d4
     708:	200022a4 	.word	0x200022a4

0000070c <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     70c:	b508      	push	{r3, lr}
     70e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     710:	6d00      	ldr	r0, [r0, #80]	; 0x50
     712:	b110      	cbz	r0, 71a <SDFile::write(void const*, unsigned int)+0xe>
     714:	f007 fce2 	bl	80dc <FatFile::write(void const*, unsigned int)>
	}
     718:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     71a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     71c:	b110      	cbz	r0, 724 <SDFile::write(void const*, unsigned int)+0x18>
     71e:	f005 fe77 	bl	6410 <ExFatFile::write(void const*, unsigned int)>
     722:	e7f9      	b.n	718 <SDFile::write(void const*, unsigned int)+0xc>
     724:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     726:	e7f7      	b.n	718 <SDFile::write(void const*, unsigned int)+0xc>

00000728 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     728:	b508      	push	{r3, lr}
     72a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     72c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     72e:	b110      	cbz	r0, 736 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     730:	f007 fcd4 	bl	80dc <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     734:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     736:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     738:	b110      	cbz	r0, 740 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     73a:	f005 fe69 	bl	6410 <ExFatFile::write(void const*, unsigned int)>
     73e:	e7f9      	b.n	734 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     740:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     742:	e7f7      	b.n	734 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000744 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     744:	798a      	ldrb	r2, [r1, #6]
     746:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     74a:	f013 0f80 	tst.w	r3, #128	; 0x80
     74e:	d120      	bne.n	792 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     750:	b5f0      	push	{r4, r5, r6, r7, lr}
     752:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     754:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     758:	794b      	ldrb	r3, [r1, #5]
     75a:	3301      	adds	r3, #1
     75c:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     75e:	790d      	ldrb	r5, [r1, #4]
     760:	788e      	ldrb	r6, [r1, #2]
     762:	784f      	ldrb	r7, [r1, #1]
     764:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     766:	6d04      	ldr	r4, [r0, #80]	; 0x50
     768:	b14c      	cbz	r4, 77e <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     76a:	9103      	str	r1, [sp, #12]
     76c:	9702      	str	r7, [sp, #8]
     76e:	9601      	str	r6, [sp, #4]
     770:	9500      	str	r5, [sp, #0]
     772:	2104      	movs	r1, #4
     774:	4620      	mov	r0, r4
     776:	f007 fbf9 	bl	7f6c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     77a:	b005      	add	sp, #20
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     77e:	6d40      	ldr	r0, [r0, #84]	; 0x54
     780:	b148      	cbz	r0, 796 <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     782:	9103      	str	r1, [sp, #12]
     784:	9702      	str	r7, [sp, #8]
     786:	9601      	str	r6, [sp, #4]
     788:	9500      	str	r5, [sp, #0]
     78a:	2104      	movs	r1, #4
     78c:	f005 fd13 	bl	61b6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     790:	e7f3      	b.n	77a <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     792:	2000      	movs	r0, #0
	}
     794:	4770      	bx	lr
           m_xFile ?
     796:	2000      	movs	r0, #0
     798:	e7ef      	b.n	77a <SDFile::setModifyTime(DateTimeFields const&)+0x36>

0000079a <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     79a:	6d03      	ldr	r3, [r0, #80]	; 0x50
     79c:	b153      	cbz	r3, 7b4 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     79e:	781a      	ldrb	r2, [r3, #0]
     7a0:	f012 0f08 	tst.w	r2, #8
     7a4:	d020      	beq.n	7e8 <SDFile::available()+0x4e>
     7a6:	69d8      	ldr	r0, [r3, #28]
     7a8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7aa:	1ac0      	subs	r0, r0, r3
     7ac:	bf48      	it	mi
     7ae:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     7b2:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     7b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
     7b6:	b1cb      	cbz	r3, 7ec <SDFile::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     7b8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     7bc:	f012 0f08 	tst.w	r2, #8
     7c0:	d016      	beq.n	7f0 <SDFile::available()+0x56>
	virtual int available() {
     7c2:	b410      	push	{r4}
     7c4:	691a      	ldr	r2, [r3, #16]
     7c6:	6959      	ldr	r1, [r3, #20]
     7c8:	6818      	ldr	r0, [r3, #0]
     7ca:	685c      	ldr	r4, [r3, #4]
     7cc:	1a13      	subs	r3, r2, r0
     7ce:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     7d2:	4618      	mov	r0, r3
     7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     7d8:	f172 0200 	sbcs.w	r2, r2, #0
     7dc:	d301      	bcc.n	7e2 <SDFile::available()+0x48>
     7de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}
     7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
     7e6:	4770      	bx	lr
     7e8:	2000      	movs	r0, #0
     7ea:	4770      	bx	lr
     7ec:	2000      	movs	r0, #0
		return sdfatfile.available();
     7ee:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     7f0:	2300      	movs	r3, #0
     7f2:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     7f4:	4618      	mov	r0, r3
     7f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     7fa:	f172 0200 	sbcs.w	r2, r2, #0
     7fe:	bf28      	it	cs
     800:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     804:	4770      	bx	lr

00000806 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     806:	b510      	push	{r4, lr}
     808:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     80a:	b12c      	cbz	r4, 818 <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     80c:	2c01      	cmp	r4, #1
     80e:	d019      	beq.n	844 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     810:	2c02      	cmp	r4, #2
     812:	d034      	beq.n	87e <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     814:	2000      	movs	r0, #0
	}
     816:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     818:	6d04      	ldr	r4, [r0, #80]	; 0x50
     81a:	b16c      	cbz	r4, 838 <SDFile::seek(unsigned long long, int)+0x32>
     81c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     820:	4291      	cmp	r1, r2
     822:	f04f 0100 	mov.w	r1, #0
     826:	4199      	sbcs	r1, r3
     828:	d201      	bcs.n	82e <SDFile::seek(unsigned long long, int)+0x28>
     82a:	2000      	movs	r0, #0
     82c:	e7f3      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
     82e:	4611      	mov	r1, r2
     830:	4620      	mov	r0, r4
     832:	f006 ff2d 	bl	7690 <FatFile::seekSet(unsigned long)>
     836:	e7ee      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     838:	6d40      	ldr	r0, [r0, #84]	; 0x54
     83a:	2800      	cmp	r0, #0
     83c:	d03c      	beq.n	8b8 <SDFile::seek(unsigned long long, int)+0xb2>
     83e:	f004 febe 	bl	55be <ExFatFile::seekSet(unsigned long long)>
     842:	e7e8      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     844:	6d04      	ldr	r4, [r0, #80]	; 0x50
     846:	b164      	cbz	r4, 862 <SDFile::seek(unsigned long long, int)+0x5c>
     848:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     84a:	1889      	adds	r1, r1, r2
     84c:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     854:	428a      	cmp	r2, r1
     856:	f04f 0200 	mov.w	r2, #0
     85a:	419a      	sbcs	r2, r3
     85c:	d20b      	bcs.n	876 <SDFile::seek(unsigned long long, int)+0x70>
     85e:	2000      	movs	r0, #0
     860:	e7d9      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     862:	6d40      	ldr	r0, [r0, #84]	; 0x54
     864:	b350      	cbz	r0, 8bc <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     866:	6801      	ldr	r1, [r0, #0]
     868:	6844      	ldr	r4, [r0, #4]
     86a:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     86c:	eb43 0304 	adc.w	r3, r3, r4
     870:	f004 fea5 	bl	55be <ExFatFile::seekSet(unsigned long long)>
     874:	e7cf      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     876:	4620      	mov	r0, r4
     878:	f006 ff0a 	bl	7690 <FatFile::seekSet(unsigned long)>
     87c:	e7cb      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     87e:	6d04      	ldr	r4, [r0, #80]	; 0x50
     880:	b164      	cbz	r4, 89c <SDFile::seek(unsigned long long, int)+0x96>
     882:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     884:	1889      	adds	r1, r1, r2
     886:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     88a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     88e:	428a      	cmp	r2, r1
     890:	f04f 0200 	mov.w	r2, #0
     894:	419a      	sbcs	r2, r3
     896:	d20b      	bcs.n	8b0 <SDFile::seek(unsigned long long, int)+0xaa>
     898:	2000      	movs	r0, #0
     89a:	e7bc      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     89c:	6d40      	ldr	r0, [r0, #84]	; 0x54
     89e:	b178      	cbz	r0, 8c0 <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
     8a0:	6901      	ldr	r1, [r0, #16]
     8a2:	6944      	ldr	r4, [r0, #20]
     8a4:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     8a6:	eb43 0304 	adc.w	r3, r3, r4
     8aa:	f004 fe88 	bl	55be <ExFatFile::seekSet(unsigned long long)>
     8ae:	e7b2      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     8b0:	4620      	mov	r0, r4
     8b2:	f006 feed 	bl	7690 <FatFile::seekSet(unsigned long)>
     8b6:	e7ae      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     8b8:	2000      	movs	r0, #0
     8ba:	e7ac      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
     8bc:	2000      	movs	r0, #0
     8be:	e7aa      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
     8c0:	2000      	movs	r0, #0
     8c2:	e7a8      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>

000008c4 <controlMixer()>:
  //m4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
  //m5_command_scaled = 0;
  //m6_command_scaled = 0;

  //0.5 is centered servo, 0.0 is zero throttle if connecting to ESC for conventional PWM, 1.0 is max throttle
  s1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     8c4:	4b19      	ldr	r3, [pc, #100]	; (92c <controlMixer()+0x68>)
     8c6:	edd3 6a00 	vldr	s13, [r3]
     8ca:	4b19      	ldr	r3, [pc, #100]	; (930 <controlMixer()+0x6c>)
     8cc:	ed93 5a00 	vldr	s10, [r3]
     8d0:	ee36 7ac5 	vsub.f32	s14, s13, s10
     8d4:	4b17      	ldr	r3, [pc, #92]	; (934 <controlMixer()+0x70>)
     8d6:	edd3 7a00 	vldr	s15, [r3]
     8da:	4b17      	ldr	r3, [pc, #92]	; (938 <controlMixer()+0x74>)
     8dc:	ed93 6a00 	vldr	s12, [r3]
     8e0:	ee77 5a27 	vadd.f32	s11, s14, s15
     8e4:	ee75 5a86 	vadd.f32	s11, s11, s12
     8e8:	4b14      	ldr	r3, [pc, #80]	; (93c <controlMixer()+0x78>)
     8ea:	edc3 5a00 	vstr	s11, [r3]
  s2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     8ee:	ee37 7a67 	vsub.f32	s14, s14, s15
     8f2:	ee37 7a46 	vsub.f32	s14, s14, s12
     8f6:	4b12      	ldr	r3, [pc, #72]	; (940 <controlMixer()+0x7c>)
     8f8:	ed83 7a00 	vstr	s14, [r3]
  s3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     8fc:	ee36 7a85 	vadd.f32	s14, s13, s10
     900:	ee77 6a67 	vsub.f32	s13, s14, s15
     904:	ee76 6a86 	vadd.f32	s13, s13, s12
     908:	4b0e      	ldr	r3, [pc, #56]	; (944 <controlMixer()+0x80>)
     90a:	edc3 6a00 	vstr	s13, [r3]
  s4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     90e:	ee77 7a87 	vadd.f32	s15, s15, s14
     912:	ee77 7ac6 	vsub.f32	s15, s15, s12
     916:	4b0c      	ldr	r3, [pc, #48]	; (948 <controlMixer()+0x84>)
     918:	edc3 7a00 	vstr	s15, [r3]
  s5_command_scaled = 0;
     91c:	2300      	movs	r3, #0
     91e:	4a0b      	ldr	r2, [pc, #44]	; (94c <controlMixer()+0x88>)
     920:	6013      	str	r3, [r2, #0]
  s6_command_scaled = 0;
     922:	4a0b      	ldr	r2, [pc, #44]	; (950 <controlMixer()+0x8c>)
     924:	6013      	str	r3, [r2, #0]
  s7_command_scaled = 0;
     926:	4a0b      	ldr	r2, [pc, #44]	; (954 <controlMixer()+0x90>)
     928:	6013      	str	r3, [r2, #0]
}
     92a:	4770      	bx	lr
     92c:	200052c4 	.word	0x200052c4
     930:	20005080 	.word	0x20005080
     934:	200050a8 	.word	0x200050a8
     938:	200052e0 	.word	0x200052e0
     93c:	200050e8 	.word	0x200050e8
     940:	200050f0 	.word	0x200050f0
     944:	200050f8 	.word	0x200050f8
     948:	20005100 	.word	0x20005100
     94c:	20005108 	.word	0x20005108
     950:	20005110 	.word	0x20005110
     954:	20005118 	.word	0x20005118

00000958 <IMUinit()>:

void IMUinit() {
     958:	b510      	push	{r4, lr}
  //DESCRIPTION: Initialize IMU
  /*
   * Don't worry about how this works.
   */
  #if defined USE_MPU6050_I2C
    Wire.begin();
     95a:	4c17      	ldr	r4, [pc, #92]	; (9b8 <IMUinit()+0x60>)
     95c:	4620      	mov	r0, r4
     95e:	f014 ff73 	bl	15848 <___ZN7TwoWire5beginEv_veneer>
    Wire.setClock(1000000); //Note this is 2.5 times the spec sheet 400 kHz max...
     962:	4916      	ldr	r1, [pc, #88]	; (9bc <IMUinit()+0x64>)
     964:	4620      	mov	r0, r4
     966:	f003 fd5f 	bl	4428 <TwoWire::setClock(unsigned long)>
    
    mpu6050.initialize();
     96a:	4c15      	ldr	r4, [pc, #84]	; (9c0 <IMUinit()+0x68>)
     96c:	4620      	mov	r0, r4
     96e:	f003 f8af 	bl	3ad0 <MPU6050::initialize()>
    
    if (mpu6050.testConnection() == false) {
     972:	4620      	mov	r0, r4
     974:	f003 f8d2 	bl	3b1c <MPU6050::testConnection()>
     978:	b998      	cbnz	r0, 9a2 <IMUinit()+0x4a>
							  return write((const uint8_t *)str, strlen(str)); }
     97a:	4c12      	ldr	r4, [pc, #72]	; (9c4 <IMUinit()+0x6c>)
     97c:	6823      	ldr	r3, [r4, #0]
     97e:	685b      	ldr	r3, [r3, #4]
     980:	2223      	movs	r2, #35	; 0x23
     982:	4911      	ldr	r1, [pc, #68]	; (9c8 <IMUinit()+0x70>)
     984:	4620      	mov	r0, r4
     986:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     988:	4620      	mov	r0, r4
     98a:	f00b fcdc 	bl	c346 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     98e:	6823      	ldr	r3, [r4, #0]
     990:	685b      	ldr	r3, [r3, #4]
     992:	2229      	movs	r2, #41	; 0x29
     994:	490d      	ldr	r1, [pc, #52]	; (9cc <IMUinit()+0x74>)
     996:	4620      	mov	r0, r4
     998:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     99a:	4620      	mov	r0, r4
     99c:	f00b fcd3 	bl	c346 <Print::println()>
      Serial.println("MPU6050 initialization unsuccessful");
      Serial.println("Check MPU6050 wiring or try cycling power");
      while(1) {}
     9a0:	e7fe      	b.n	9a0 <IMUinit()+0x48>
    }

    //From the reset state all registers should be 0x00, so we should be at
    //max sample rate with digital low pass filter(s) off.  All we need to
    //do is set the desired fullscale ranges
    mpu6050.setFullScaleGyroRange(GYRO_SCALE);
     9a2:	4c07      	ldr	r4, [pc, #28]	; (9c0 <IMUinit()+0x68>)
     9a4:	2100      	movs	r1, #0
     9a6:	4620      	mov	r0, r4
     9a8:	f003 f830 	bl	3a0c <MPU6050::setFullScaleGyroRange(unsigned char)>
    mpu6050.setFullScaleAccelRange(ACCEL_SCALE);
     9ac:	2100      	movs	r1, #0
     9ae:	4620      	mov	r0, r4
     9b0:	f003 f838 	bl	3a24 <MPU6050::setFullScaleAccelRange(unsigned char)>
    mpu9250.setMagCalX(MagErrorX, MagScaleX);
    mpu9250.setMagCalY(MagErrorY, MagScaleY);
    mpu9250.setMagCalZ(MagErrorZ, MagScaleZ);
    mpu9250.setSrd(0); //sets gyro and accel read to 1khz, magnetometer read to 100hz
  #endif
}
     9b4:	bd10      	pop	{r4, pc}
     9b6:	bf00      	nop
     9b8:	20004700 	.word	0x20004700
     9bc:	000f4240 	.word	0x000f4240
     9c0:	20005054 	.word	0x20005054
     9c4:	200032c8 	.word	0x200032c8
     9c8:	20001e20 	.word	0x20001e20
     9cc:	20001e44 	.word	0x20001e44

000009d0 <getIMUdata()>:

void getIMUdata() {
     9d0:	b500      	push	{lr}
     9d2:	b089      	sub	sp, #36	; 0x24
   * the constant errors found in calculate_IMU_error() on startup are subtracted from the accelerometer and gyro readings.
   */
  int16_t AcX,AcY,AcZ,GyX,GyY,GyZ,MgX,MgY,MgZ;

  #if defined USE_MPU6050_I2C
    mpu6050.getMotion6(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ);
     9d4:	ab05      	add	r3, sp, #20
     9d6:	9302      	str	r3, [sp, #8]
     9d8:	f10d 0316 	add.w	r3, sp, #22
     9dc:	9301      	str	r3, [sp, #4]
     9de:	ab06      	add	r3, sp, #24
     9e0:	9300      	str	r3, [sp, #0]
     9e2:	f10d 031a 	add.w	r3, sp, #26
     9e6:	aa07      	add	r2, sp, #28
     9e8:	f10d 011e 	add.w	r1, sp, #30
     9ec:	48a2      	ldr	r0, [pc, #648]	; (c78 <getIMUdata()+0x2a8>)
     9ee:	f003 f825 	bl	3a3c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>
    mpu9250.getMotion9(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ, &MgX, &MgY, &MgZ);
  #endif

 //Accelerometer
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
  AccY = AcY / ACCEL_SCALE_FACTOR;
     9f2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
     9f6:	ee03 3a10 	vmov	s6, r3
     9fa:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
     9fe:	ed9f 2b9a 	vldr	d2, [pc, #616]	; c68 <getIMUdata()+0x298>
     a02:	ee23 3b02 	vmul.f64	d3, d3, d2
     a06:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  AccX = AccX - AccErrorX;
  AccY = AccY - AccErrorY;
     a0a:	4b9c      	ldr	r3, [pc, #624]	; (c7c <getIMUdata()+0x2ac>)
     a0c:	edd3 7a00 	vldr	s15, [r3]
     a10:	ee33 3a67 	vsub.f32	s6, s6, s15
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
     a14:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
     a18:	ee06 3a10 	vmov	s12, r3
     a1c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     a20:	ee26 6b02 	vmul.f64	d6, d6, d2
     a24:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  AccZ = AccZ - AccErrorZ;
     a28:	4b95      	ldr	r3, [pc, #596]	; (c80 <getIMUdata()+0x2b0>)
     a2a:	edd3 7a00 	vldr	s15, [r3]
     a2e:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter accelerometer data
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a32:	4b94      	ldr	r3, [pc, #592]	; (c84 <getIMUdata()+0x2b4>)
     a34:	edd3 6a00 	vldr	s13, [r3]
     a38:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     a3c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     a40:	ee35 4b44 	vsub.f64	d4, d5, d4
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
     a44:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     a48:	ee07 3a10 	vmov	s14, r3
     a4c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a50:	ee27 7b02 	vmul.f64	d7, d7, d2
     a54:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  AccX = AccX - AccErrorX;
     a58:	4b8b      	ldr	r3, [pc, #556]	; (c88 <getIMUdata()+0x2b8>)
     a5a:	edd3 7a00 	vldr	s15, [r3]
     a5e:	ee37 7a67 	vsub.f32	s14, s14, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a62:	ee27 7a26 	vmul.f32	s14, s14, s13
     a66:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     a6a:	4988      	ldr	r1, [pc, #544]	; (c8c <getIMUdata()+0x2bc>)
     a6c:	ed91 2a00 	vldr	s4, [r1]
     a70:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a74:	ee02 7b04 	vmla.f64	d7, d2, d4
     a78:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     a7c:	4b84      	ldr	r3, [pc, #528]	; (c90 <getIMUdata()+0x2c0>)
     a7e:	ed83 7a00 	vstr	s14, [r3]
  AccY = (1.0 - B_accel)*AccY_prev + B_accel*AccY;
     a82:	4a84      	ldr	r2, [pc, #528]	; (c94 <getIMUdata()+0x2c4>)
     a84:	ed92 2a00 	vldr	s4, [r2]
     a88:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a8c:	ee23 3a26 	vmul.f32	s6, s6, s13
     a90:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     a94:	ee02 3b04 	vmla.f64	d3, d2, d4
     a98:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     a9c:	4b7e      	ldr	r3, [pc, #504]	; (c98 <getIMUdata()+0x2c8>)
     a9e:	ed83 3a00 	vstr	s6, [r3]
  AccZ = (1.0 - B_accel)*AccZ_prev + B_accel*AccZ;
     aa2:	4b7e      	ldr	r3, [pc, #504]	; (c9c <getIMUdata()+0x2cc>)
     aa4:	ed93 2a00 	vldr	s4, [r3]
     aa8:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     aac:	ee26 6a26 	vmul.f32	s12, s12, s13
     ab0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     ab4:	ee02 6b04 	vmla.f64	d6, d2, d4
     ab8:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     abc:	4878      	ldr	r0, [pc, #480]	; (ca0 <getIMUdata()+0x2d0>)
     abe:	ed80 6a00 	vstr	s12, [r0]
  AccX_prev = AccX;
     ac2:	ed81 7a00 	vstr	s14, [r1]
  AccY_prev = AccY;
     ac6:	ed82 3a00 	vstr	s6, [r2]
  AccZ_prev = AccZ;
     aca:	ed83 6a00 	vstr	s12, [r3]

  //Gyro
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
  GyroY = GyY / GYRO_SCALE_FACTOR;
     ace:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
     ad2:	ee07 3a10 	vmov	s14, r3
     ad6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     ada:	ed9f 2b65 	vldr	d2, [pc, #404]	; c70 <getIMUdata()+0x2a0>
     ade:	ee87 3b02 	vdiv.f64	d3, d7, d2
     ae2:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  GyroX = GyroX - GyroErrorX;
  GyroY = GyroY - GyroErrorY;
     ae6:	4b6f      	ldr	r3, [pc, #444]	; (ca4 <getIMUdata()+0x2d4>)
     ae8:	edd3 7a00 	vldr	s15, [r3]
     aec:	ee33 3a67 	vsub.f32	s6, s6, s15
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
     af0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
     af4:	ee07 3a10 	vmov	s14, r3
     af8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     afc:	ee87 6b02 	vdiv.f64	d6, d7, d2
     b00:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  GyroZ = GyroZ - GyroErrorZ;
     b04:	4b68      	ldr	r3, [pc, #416]	; (ca8 <getIMUdata()+0x2d8>)
     b06:	edd3 7a00 	vldr	s15, [r3]
     b0a:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter gyro data
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     b0e:	4b67      	ldr	r3, [pc, #412]	; (cac <getIMUdata()+0x2dc>)
     b10:	edd3 6a00 	vldr	s13, [r3]
     b14:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     b18:	ee35 4b44 	vsub.f64	d4, d5, d4
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
     b1c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     b20:	ee01 3a10 	vmov	s2, r3
     b24:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
     b28:	ee81 7b02 	vdiv.f64	d7, d1, d2
     b2c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  GyroX = GyroX - GyroErrorX;
     b30:	4b5f      	ldr	r3, [pc, #380]	; (cb0 <getIMUdata()+0x2e0>)
     b32:	edd3 7a00 	vldr	s15, [r3]
     b36:	ee37 7a67 	vsub.f32	s14, s14, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     b3a:	ee27 7a26 	vmul.f32	s14, s14, s13
     b3e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     b42:	495c      	ldr	r1, [pc, #368]	; (cb4 <getIMUdata()+0x2e4>)
     b44:	ed91 2a00 	vldr	s4, [r1]
     b48:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b4c:	ee02 7b04 	vmla.f64	d7, d2, d4
     b50:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     b54:	4b58      	ldr	r3, [pc, #352]	; (cb8 <getIMUdata()+0x2e8>)
     b56:	ed83 7a00 	vstr	s14, [r3]
  GyroY = (1.0 - B_gyro)*GyroY_prev + B_gyro*GyroY;
     b5a:	4a58      	ldr	r2, [pc, #352]	; (cbc <getIMUdata()+0x2ec>)
     b5c:	ed92 2a00 	vldr	s4, [r2]
     b60:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b64:	ee23 3a26 	vmul.f32	s6, s6, s13
     b68:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     b6c:	ee02 3b04 	vmla.f64	d3, d2, d4
     b70:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     b74:	4b52      	ldr	r3, [pc, #328]	; (cc0 <getIMUdata()+0x2f0>)
     b76:	ed83 3a00 	vstr	s6, [r3]
  GyroZ = (1.0 - B_gyro)*GyroZ_prev + B_gyro*GyroZ;
     b7a:	4b52      	ldr	r3, [pc, #328]	; (cc4 <getIMUdata()+0x2f4>)
     b7c:	ed93 2a00 	vldr	s4, [r3]
     b80:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b84:	ee26 6a26 	vmul.f32	s12, s12, s13
     b88:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     b8c:	ee02 6b04 	vmla.f64	d6, d2, d4
     b90:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     b94:	484c      	ldr	r0, [pc, #304]	; (cc8 <getIMUdata()+0x2f8>)
     b96:	ed80 6a00 	vstr	s12, [r0]
  GyroX_prev = GyroX;
     b9a:	ed81 7a00 	vstr	s14, [r1]
  GyroY_prev = GyroY;
     b9e:	ed82 3a00 	vstr	s6, [r2]
  GyroZ_prev = GyroZ;
     ba2:	ed83 6a00 	vstr	s12, [r3]

  //Magnetometer
  MagX = MgX/6.0; //uT
  MagY = MgY/6.0;
     ba6:	ed9f 7a49 	vldr	s14, [pc, #292]	; ccc <getIMUdata()+0x2fc>
  MagZ = MgZ/6.0;
  //Correct the outputs with the calculated error values
  MagX = (MagX - MagErrorX)*MagScaleX;
  MagY = (MagY - MagErrorY)*MagScaleY;
     baa:	4b49      	ldr	r3, [pc, #292]	; (cd0 <getIMUdata()+0x300>)
     bac:	ed93 6a00 	vldr	s12, [r3]
     bb0:	ee37 6a46 	vsub.f32	s12, s14, s12
     bb4:	4b47      	ldr	r3, [pc, #284]	; (cd4 <getIMUdata()+0x304>)
     bb6:	edd3 7a00 	vldr	s15, [r3]
     bba:	ee26 6a27 	vmul.f32	s12, s12, s15
  MagZ = (MagZ - MagErrorZ)*MagScaleZ;
     bbe:	4b46      	ldr	r3, [pc, #280]	; (cd8 <getIMUdata()+0x308>)
     bc0:	ed93 4a00 	vldr	s8, [r3]
     bc4:	ee37 4a44 	vsub.f32	s8, s14, s8
     bc8:	4b44      	ldr	r3, [pc, #272]	; (cdc <getIMUdata()+0x30c>)
     bca:	edd3 7a00 	vldr	s15, [r3]
     bce:	ee24 4a27 	vmul.f32	s8, s8, s15
  //LP filter magnetometer data
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     bd2:	4b43      	ldr	r3, [pc, #268]	; (ce0 <getIMUdata()+0x310>)
     bd4:	edd3 4a00 	vldr	s9, [r3]
     bd8:	eeb7 3ae4 	vcvt.f64.f32	d3, s9
     bdc:	ee35 5b43 	vsub.f64	d5, d5, d3
  MagX = (MagX - MagErrorX)*MagScaleX;
     be0:	4b40      	ldr	r3, [pc, #256]	; (ce4 <getIMUdata()+0x314>)
     be2:	edd3 7a00 	vldr	s15, [r3]
     be6:	ee37 7a67 	vsub.f32	s14, s14, s15
     bea:	4b3f      	ldr	r3, [pc, #252]	; (ce8 <getIMUdata()+0x318>)
     bec:	edd3 7a00 	vldr	s15, [r3]
     bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     bf4:	ee27 7a24 	vmul.f32	s14, s14, s9
     bf8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     bfc:	493b      	ldr	r1, [pc, #236]	; (cec <getIMUdata()+0x31c>)
     bfe:	ed91 3a00 	vldr	s6, [r1]
     c02:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     c06:	ee03 7b05 	vmla.f64	d7, d3, d5
     c0a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     c0e:	4b38      	ldr	r3, [pc, #224]	; (cf0 <getIMUdata()+0x320>)
     c10:	ed83 7a00 	vstr	s14, [r3]
  MagY = (1.0 - B_mag)*MagY_prev + B_mag*MagY;
     c14:	4a37      	ldr	r2, [pc, #220]	; (cf4 <getIMUdata()+0x324>)
     c16:	ed92 3a00 	vldr	s6, [r2]
     c1a:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     c1e:	ee26 6a24 	vmul.f32	s12, s12, s9
     c22:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     c26:	ee03 6b05 	vmla.f64	d6, d3, d5
     c2a:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     c2e:	4b32      	ldr	r3, [pc, #200]	; (cf8 <getIMUdata()+0x328>)
     c30:	ed83 6a00 	vstr	s12, [r3]
  MagZ = (1.0 - B_mag)*MagZ_prev + B_mag*MagZ;
     c34:	4b31      	ldr	r3, [pc, #196]	; (cfc <getIMUdata()+0x32c>)
     c36:	ed93 3a00 	vldr	s6, [r3]
     c3a:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     c3e:	ee24 4a24 	vmul.f32	s8, s8, s9
     c42:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     c46:	ee03 4b05 	vmla.f64	d4, d3, d5
     c4a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     c4e:	482c      	ldr	r0, [pc, #176]	; (d00 <getIMUdata()+0x330>)
     c50:	ed80 4a00 	vstr	s8, [r0]
  MagX_prev = MagX;
     c54:	ed81 7a00 	vstr	s14, [r1]
  MagY_prev = MagY;
     c58:	ed82 6a00 	vstr	s12, [r2]
  MagZ_prev = MagZ;
     c5c:	ed83 4a00 	vstr	s8, [r3]
}
     c60:	b009      	add	sp, #36	; 0x24
     c62:	f85d fb04 	ldr.w	pc, [sp], #4
     c66:	bf00      	nop
     c68:	00000000 	.word	0x00000000
     c6c:	3f100000 	.word	0x3f100000
     c70:	00000000 	.word	0x00000000
     c74:	40606000 	.word	0x40606000
     c78:	20005054 	.word	0x20005054
     c7c:	2000326c 	.word	0x2000326c
     c80:	20003270 	.word	0x20003270
     c84:	20003274 	.word	0x20003274
     c88:	20003268 	.word	0x20003268
     c8c:	2000408c 	.word	0x2000408c
     c90:	20004088 	.word	0x20004088
     c94:	20004094 	.word	0x20004094
     c98:	20004090 	.word	0x20004090
     c9c:	2000409c 	.word	0x2000409c
     ca0:	20004098 	.word	0x20004098
     ca4:	20003290 	.word	0x20003290
     ca8:	20003294 	.word	0x20003294
     cac:	20003278 	.word	0x20003278
     cb0:	2000328c 	.word	0x2000328c
     cb4:	200040a4 	.word	0x200040a4
     cb8:	200040a0 	.word	0x200040a0
     cbc:	200040ac 	.word	0x200040ac
     cc0:	200040a8 	.word	0x200040a8
     cc4:	200040b4 	.word	0x200040b4
     cc8:	200040b0 	.word	0x200040b0
     ccc:	00000000 	.word	0x00000000
     cd0:	200040bc 	.word	0x200040bc
     cd4:	200032c0 	.word	0x200032c0
     cd8:	200040c0 	.word	0x200040c0
     cdc:	200032c4 	.word	0x200032c4
     ce0:	20003280 	.word	0x20003280
     ce4:	200040b8 	.word	0x200040b8
     ce8:	200032bc 	.word	0x200032bc
     cec:	200040c8 	.word	0x200040c8
     cf0:	200040c4 	.word	0x200040c4
     cf4:	200040d0 	.word	0x200040d0
     cf8:	200040cc 	.word	0x200040cc
     cfc:	200040d8 	.word	0x200040d8
     d00:	200040d4 	.word	0x200040d4
     d04:	00000000 	.word	0x00000000

00000d08 <setDesStateSerial(int)>:
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
}

void setDesStateSerial(int controlledAxis) {
     d08:	b538      	push	{r3, r4, r5, lr}
     d0a:	ed2d 8b02 	vpush	{d8}
     d0e:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     d10:	f00d fdba 	bl	e888 <usb_serial_available>
	//DESCRIPTION: Sets the desired pitch and roll angles based on user input over USB
	if (Serial.available()) {
     d14:	bb50      	cbnz	r0, d6c <setDesStateSerial(int)+0x64>
		}
	}
	
	float desiredAngle = 0;

	if (useSineWave) {
     d16:	4b24      	ldr	r3, [pc, #144]	; (da8 <setDesStateSerial(int)+0xa0>)
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	b3ab      	cbz	r3, d88 <setDesStateSerial(int)+0x80>
		sineFrequency = static_cast<float>(serialInputValue);
     d1c:	4b23      	ldr	r3, [pc, #140]	; (dac <setDesStateSerial(int)+0xa4>)
     d1e:	ed93 7a00 	vldr	s14, [r3]
     d22:	4b23      	ldr	r3, [pc, #140]	; (db0 <setDesStateSerial(int)+0xa8>)
     d24:	ed83 7a00 	vstr	s14, [r3]
		desiredAngle = 10*sin(2*PI*sineFrequency*sineTime);    // Set the output to be a sin wave between -5 and 5 degrees
     d28:	4d22      	ldr	r5, [pc, #136]	; (db4 <setDesStateSerial(int)+0xac>)
     d2a:	ed95 8a00 	vldr	s16, [r5]
     d2e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     d32:	ed9f 6b1b 	vldr	d6, [pc, #108]	; da0 <setDesStateSerial(int)+0x98>
     d36:	ee27 7b06 	vmul.f64	d7, d7, d6
     d3a:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     d3e:	ee27 0b00 	vmul.f64	d0, d7, d0
     d42:	f00e fd61 	bl	f808 <sin>
     d46:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     d4a:	ee20 0b07 	vmul.f64	d0, d0, d7
     d4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		sineTime = sineTime + 1/2000.0f;
     d52:	eddf 7a19 	vldr	s15, [pc, #100]	; db8 <setDesStateSerial(int)+0xb0>
     d56:	ee78 7a27 	vadd.f32	s15, s16, s15
     d5a:	edc5 7a00 	vstr	s15, [r5]
	}
	else {
		desiredAngle = static_cast<float>(serialInputValue);
	}

	switch (controlledAxis) {
     d5e:	2c01      	cmp	r4, #1
     d60:	d016      	beq.n	d90 <setDesStateSerial(int)+0x88>
     d62:	2c02      	cmp	r4, #2
     d64:	d018      	beq.n	d98 <setDesStateSerial(int)+0x90>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     d66:	ecbd 8b02 	vpop	{d8}
     d6a:	bd38      	pop	{r3, r4, r5, pc}
		serialInputValue = Serial.parseFloat();
     d6c:	4813      	ldr	r0, [pc, #76]	; (dbc <setDesStateSerial(int)+0xb4>)
     d6e:	f00b fc89 	bl	c684 <Stream::parseFloat()>
     d72:	4b0e      	ldr	r3, [pc, #56]	; (dac <setDesStateSerial(int)+0xa4>)
     d74:	ed83 0a00 	vstr	s0, [r3]
		while (Serial.available() !=0) {
     d78:	e001      	b.n	d7e <setDesStateSerial(int)+0x76>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     d7a:	f00d fdc3 	bl	e904 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
     d7e:	f00d fd83 	bl	e888 <usb_serial_available>
     d82:	2800      	cmp	r0, #0
     d84:	d1f9      	bne.n	d7a <setDesStateSerial(int)+0x72>
     d86:	e7c6      	b.n	d16 <setDesStateSerial(int)+0xe>
		desiredAngle = static_cast<float>(serialInputValue);
     d88:	4b08      	ldr	r3, [pc, #32]	; (dac <setDesStateSerial(int)+0xa4>)
     d8a:	ed93 0a00 	vldr	s0, [r3]
     d8e:	e7e6      	b.n	d5e <setDesStateSerial(int)+0x56>
			roll_des = desiredAngle;
     d90:	4b0b      	ldr	r3, [pc, #44]	; (dc0 <setDesStateSerial(int)+0xb8>)
     d92:	ed83 0a00 	vstr	s0, [r3]
			break;
     d96:	e7e6      	b.n	d66 <setDesStateSerial(int)+0x5e>
			pitch_des = desiredAngle;
     d98:	4b0a      	ldr	r3, [pc, #40]	; (dc4 <setDesStateSerial(int)+0xbc>)
     d9a:	ed83 0a00 	vstr	s0, [r3]
}
     d9e:	e7e2      	b.n	d66 <setDesStateSerial(int)+0x5e>
     da0:	54442d18 	.word	0x54442d18
     da4:	401921fb 	.word	0x401921fb
     da8:	20003a1a 	.word	0x20003a1a
     dac:	2000528c 	.word	0x2000528c
     db0:	200052b0 	.word	0x200052b0
     db4:	200052b4 	.word	0x200052b4
     db8:	3a03126f 	.word	0x3a03126f
     dbc:	200032c8 	.word	0x200032c8
     dc0:	200050ac 	.word	0x200050ac
     dc4:	20005084 	.word	0x20005084

00000dc8 <performSineSweep(int)>:

void performSineSweep(int controlledAxis) {
     dc8:	b510      	push	{r4, lr}
     dca:	ed2d 8b06 	vpush	{d8-d10}
     dce:	4604      	mov	r4, r0
	//DESCRIPTION: Performs a sine sweep from minFreq (Hz) to maxFreq (Hz) over sweepTime (seconds)
	float desiredAngle = 0;
  float amp = 10; 		// Sine wave amplitude in degrees
	desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     dd0:	4b2d      	ldr	r3, [pc, #180]	; (e88 <performSineSweep(int)+0xc0>)
     dd2:	edd3 aa00 	vldr	s21, [r3]
     dd6:	4b2d      	ldr	r3, [pc, #180]	; (e8c <performSineSweep(int)+0xc4>)
     dd8:	edd3 8a00 	vldr	s17, [r3]
     ddc:	4b2c      	ldr	r3, [pc, #176]	; (e90 <performSineSweep(int)+0xc8>)
     dde:	ed93 aa00 	vldr	s20, [r3]
     de2:	4b2c      	ldr	r3, [pc, #176]	; (e94 <performSineSweep(int)+0xcc>)
     de4:	ed93 8a00 	vldr	s16, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     de8:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
     dec:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
     df0:	eeb0 0b49 	vmov.f64	d0, d9
     df4:	f00e f810 	bl	ee18 <pow>
	if (sineTime > sweepTime) {
     df8:	eeb4 aac8 	vcmpe.f32	s20, s16
     dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e00:	d42f      	bmi.n	e62 <performSineSweep(int)+0x9a>
     e02:	eeb0 5b40 	vmov.f64	d5, d0
     e06:	eeb7 7aca 	vcvt.f64.f32	d7, s20
	desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     e0a:	ee3a 6ae8 	vsub.f32	s12, s21, s17
     e0e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     e12:	ed9f 4b19 	vldr	d4, [pc, #100]	; e78 <performSineSweep(int)+0xb0>
     e16:	ee26 6b04 	vmul.f64	d6, d6, d4
     e1a:	ee27 7b07 	vmul.f64	d7, d7, d7
     e1e:	ee86 4b07 	vdiv.f64	d4, d6, d7
     e22:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
     e26:	ed9f 6b16 	vldr	d6, [pc, #88]	; e80 <performSineSweep(int)+0xb8>
     e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
     e2e:	ee27 0b09 	vmul.f64	d0, d7, d9
     e32:	ee04 0b05 	vmla.f64	d0, d4, d5
     e36:	f00e fce7 	bl	f808 <sin>
     e3a:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     e3e:	ee20 0b07 	vmul.f64	d0, d0, d7
     e42:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		desiredAngle = 0;
	}
	sineTime = sineTime + 1/2000.0f;
     e46:	eddf 7a14 	vldr	s15, [pc, #80]	; e98 <performSineSweep(int)+0xd0>
     e4a:	ee38 8a27 	vadd.f32	s16, s16, s15
     e4e:	4b11      	ldr	r3, [pc, #68]	; (e94 <performSineSweep(int)+0xcc>)
     e50:	ed83 8a00 	vstr	s16, [r3]

	switch (controlledAxis) {
     e54:	2c01      	cmp	r4, #1
     e56:	d007      	beq.n	e68 <performSineSweep(int)+0xa0>
     e58:	2c02      	cmp	r4, #2
     e5a:	d009      	beq.n	e70 <performSineSweep(int)+0xa8>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     e5c:	ecbd 8b06 	vpop	{d8-d10}
     e60:	bd10      	pop	{r4, pc}
		desiredAngle = 0;
     e62:	ed9f 0a0e 	vldr	s0, [pc, #56]	; e9c <performSineSweep(int)+0xd4>
     e66:	e7ee      	b.n	e46 <performSineSweep(int)+0x7e>
			roll_des = desiredAngle;
     e68:	4b0d      	ldr	r3, [pc, #52]	; (ea0 <performSineSweep(int)+0xd8>)
     e6a:	ed83 0a00 	vstr	s0, [r3]
			break;
     e6e:	e7f5      	b.n	e5c <performSineSweep(int)+0x94>
			pitch_des = desiredAngle;
     e70:	4b0c      	ldr	r3, [pc, #48]	; (ea4 <performSineSweep(int)+0xdc>)
     e72:	ed83 0a00 	vstr	s0, [r3]
}
     e76:	e7f1      	b.n	e5c <performSineSweep(int)+0x94>
     e78:	54442d18 	.word	0x54442d18
     e7c:	400921fb 	.word	0x400921fb
     e80:	54442d18 	.word	0x54442d18
     e84:	401921fb 	.word	0x401921fb
     e88:	20003990 	.word	0x20003990
     e8c:	200039dc 	.word	0x200039dc
     e90:	200039fc 	.word	0x200039fc
     e94:	200052b4 	.word	0x200052b4
     e98:	3a03126f 	.word	0x3a03126f
     e9c:	00000000 	.word	0x00000000
     ea0:	200050ac 	.word	0x200050ac
     ea4:	20005084 	.word	0x20005084

00000ea8 <rollStep()>:

void rollStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     ea8:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <rollStep()+0x2c>)
     eaa:	681b      	ldr	r3, [r3, #0]
     eac:	f240 42e1 	movw	r2, #1249	; 0x4e1
     eb0:	4293      	cmp	r3, r2
     eb2:	dd0c      	ble.n	ece <rollStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     eb4:	f240 62d6 	movw	r2, #1750	; 0x6d6
     eb8:	4293      	cmp	r3, r2
     eba:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     ebe:	ed9f 7a06 	vldr	s14, [pc, #24]	; ed8 <rollStep()+0x30>
     ec2:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	roll_des = desiredAngle;
     ec6:	4b05      	ldr	r3, [pc, #20]	; (edc <rollStep()+0x34>)
     ec8:	edc3 7a00 	vstr	s15, [r3]
}
     ecc:	4770      	bx	lr
		desiredAngle = 15.0f;
     ece:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     ed2:	e7f8      	b.n	ec6 <rollStep()+0x1e>
     ed4:	20004f54 	.word	0x20004f54
     ed8:	00000000 	.word	0x00000000
     edc:	200050ac 	.word	0x200050ac

00000ee0 <pitchStep()>:
void pitchStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     ee0:	4b0a      	ldr	r3, [pc, #40]	; (f0c <pitchStep()+0x2c>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	f240 42e1 	movw	r2, #1249	; 0x4e1
     ee8:	4293      	cmp	r3, r2
     eea:	dd0c      	ble.n	f06 <pitchStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     eec:	f240 62d6 	movw	r2, #1750	; 0x6d6
     ef0:	4293      	cmp	r3, r2
     ef2:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     ef6:	ed9f 7a06 	vldr	s14, [pc, #24]	; f10 <pitchStep()+0x30>
     efa:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	pitch_des = desiredAngle;
     efe:	4b05      	ldr	r3, [pc, #20]	; (f14 <pitchStep()+0x34>)
     f00:	edc3 7a00 	vstr	s15, [r3]
}
     f04:	4770      	bx	lr
		desiredAngle = 15.0f;
     f06:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     f0a:	e7f8      	b.n	efe <pitchStep()+0x1e>
     f0c:	20004f54 	.word	0x20004f54
     f10:	00000000 	.word	0x00000000
     f14:	20005084 	.word	0x20005084

00000f18 <getDesState()>:
   * RC pwm commands and scaling them to be within our limits defined in setup. thro_des stays within 0 to 1 range.
   * roll_des and pitch_des are scaled to be within max roll/pitch amount in either degrees (angle mode) or degrees/sec
   * (rate mode). yaw_des is scaled to be within max yaw in degrees/sec. Also creates roll_passthru, pitch_passthru, and
   * yaw_passthru variables, to be used in commanding motors/servos with direct unstabilized commands in controlMixer().
   */
  thro_des = (channel_1_pwm - 1000.0)/1000.0; //Between 0 and 1
     f18:	4baf      	ldr	r3, [pc, #700]	; (11d8 <getDesState()+0x2c0>)
     f1a:	ed93 7a00 	vldr	s14, [r3]
     f1e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f22:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 11b8 <getDesState()+0x2a0>
     f26:	ee37 7b45 	vsub.f64	d7, d7, d5
     f2a:	ee87 6b05 	vdiv.f64	d6, d7, d5
     f2e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  roll_des = (channel_2_pwm - 1500.0)/500.0; //Between -1 and 1
     f32:	4baa      	ldr	r3, [pc, #680]	; (11dc <getDesState()+0x2c4>)
     f34:	ed93 5a00 	vldr	s10, [r3]
     f38:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f3c:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 11c0 <getDesState()+0x2a8>
     f40:	ee35 5b43 	vsub.f64	d5, d5, d3
     f44:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 11c8 <getDesState()+0x2b0>
     f48:	ee85 7b04 	vdiv.f64	d7, d5, d4
     f4c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pitch_des = (channel_3_pwm - 1500.0)/500.0; //Between -1 and 1
     f50:	4ba3      	ldr	r3, [pc, #652]	; (11e0 <getDesState()+0x2c8>)
     f52:	ed93 5a00 	vldr	s10, [r3]
     f56:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f5a:	ee35 5b43 	vsub.f64	d5, d5, d3
     f5e:	ee85 1b04 	vdiv.f64	d1, d5, d4
     f62:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
  yaw_des = (channel_4_pwm - 1500.0)/500.0; //Between -1 and 1
     f66:	4b9f      	ldr	r3, [pc, #636]	; (11e4 <getDesState()+0x2cc>)
     f68:	ed93 5a00 	vldr	s10, [r3]
     f6c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f70:	ee35 5b43 	vsub.f64	d5, d5, d3
     f74:	ee85 2b04 	vdiv.f64	d2, d5, d4
     f78:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  roll_passthru = roll_des/2.0; //Between -0.5 and 0.5
     f7c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
     f80:	ee27 5a03 	vmul.f32	s10, s14, s6
  pitch_passthru = pitch_des/2.0; //Between -0.5 and 0.5
     f84:	ee61 1a03 	vmul.f32	s3, s2, s6
  yaw_passthru = yaw_des/2.0; //Between -0.5 and 0.5
     f88:	ee22 3a03 	vmul.f32	s6, s4, s6

  //Constrain within normalized bounds
  thro_des = constrain(thro_des, 0.0, 1.0); //Between 0 and 1
     f8c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
     f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f94:	d40c      	bmi.n	fb0 <getDesState()+0x98>
     f96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     f9a:	eeb4 6ae7 	vcmpe.f32	s12, s15
     f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fa2:	dd02      	ble.n	faa <getDesState()+0x92>
     fa4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     fa8:	e004      	b.n	fb4 <getDesState()+0x9c>
     faa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     fae:	e001      	b.n	fb4 <getDesState()+0x9c>
     fb0:	ed9f 6b87 	vldr	d6, [pc, #540]	; 11d0 <getDesState()+0x2b8>
     fb4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     fb8:	4b8b      	ldr	r3, [pc, #556]	; (11e8 <getDesState()+0x2d0>)
     fba:	ed83 6a00 	vstr	s12, [r3]
  roll_des = constrain(roll_des, -1.0, 1.0)*maxRoll; //Between -maxRoll and +maxRoll
     fbe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
     fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
     fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fca:	d40c      	bmi.n	fe6 <getDesState()+0xce>
     fcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
     fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fd8:	dd02      	ble.n	fe0 <getDesState()+0xc8>
     fda:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
     fde:	e004      	b.n	fea <getDesState()+0xd2>
     fe0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     fe4:	e001      	b.n	fea <getDesState()+0xd2>
     fe6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
     fea:	4b80      	ldr	r3, [pc, #512]	; (11ec <getDesState()+0x2d4>)
     fec:	ed93 4a00 	vldr	s8, [r3]
     ff0:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     ff4:	ee24 4b07 	vmul.f64	d4, d4, d7
     ff8:	eef7 3bc4 	vcvt.f32.f64	s7, d4
     ffc:	4b7c      	ldr	r3, [pc, #496]	; (11f0 <getDesState()+0x2d8>)
     ffe:	edc3 3a00 	vstr	s7, [r3]
  pitch_des = constrain(pitch_des, -1.0, 1.0)*maxPitch; //Between -maxPitch and +maxPitch
    1002:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1006:	eeb4 1ae7 	vcmpe.f32	s2, s15
    100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    100e:	d40c      	bmi.n	102a <getDesState()+0x112>
    1010:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1014:	eeb4 1ae7 	vcmpe.f32	s2, s15
    1018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    101c:	dd02      	ble.n	1024 <getDesState()+0x10c>
    101e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    1022:	e004      	b.n	102e <getDesState()+0x116>
    1024:	eeb7 7ac1 	vcvt.f64.f32	d7, s2
    1028:	e001      	b.n	102e <getDesState()+0x116>
    102a:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    102e:	4b71      	ldr	r3, [pc, #452]	; (11f4 <getDesState()+0x2dc>)
    1030:	ed93 4a00 	vldr	s8, [r3]
    1034:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1038:	ee24 4b07 	vmul.f64	d4, d4, d7
    103c:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1040:	4b6d      	ldr	r3, [pc, #436]	; (11f8 <getDesState()+0x2e0>)
    1042:	ed83 4a00 	vstr	s8, [r3]
  yaw_des = constrain(yaw_des, -1.0, 1.0)*maxYaw; //Between -maxYaw and +maxYaw
    1046:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    104a:	eeb4 2ae7 	vcmpe.f32	s4, s15
    104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1052:	d40c      	bmi.n	106e <getDesState()+0x156>
    1054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1058:	eeb4 2ae7 	vcmpe.f32	s4, s15
    105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1060:	dd02      	ble.n	1068 <getDesState()+0x150>
    1062:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    1066:	e004      	b.n	1072 <getDesState()+0x15a>
    1068:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    106c:	e001      	b.n	1072 <getDesState()+0x15a>
    106e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    1072:	4b62      	ldr	r3, [pc, #392]	; (11fc <getDesState()+0x2e4>)
    1074:	ed93 7a00 	vldr	s14, [r3]
    1078:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    107c:	ee27 7b02 	vmul.f64	d7, d7, d2
    1080:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1084:	4b5e      	ldr	r3, [pc, #376]	; (1200 <getDesState()+0x2e8>)
    1086:	ed83 7a00 	vstr	s14, [r3]
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    108a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    108e:	eeb4 5ae7 	vcmpe.f32	s10, s15
    1092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1096:	d409      	bmi.n	10ac <getDesState()+0x194>
    1098:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    109c:	eeb4 5ae7 	vcmpe.f32	s10, s15
    10a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10a4:	dc1a      	bgt.n	10dc <getDesState()+0x1c4>
    10a6:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    10aa:	e001      	b.n	10b0 <getDesState()+0x198>
    10ac:	eebe 5b00 	vmov.f64	d5, #224	; 0xbf000000 -0.5
    10b0:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    10b4:	4b53      	ldr	r3, [pc, #332]	; (1204 <getDesState()+0x2ec>)
    10b6:	ed83 5a00 	vstr	s10, [r3]
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10ba:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    10be:	eef4 1ae7 	vcmpe.f32	s3, s15
    10c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10c6:	d40c      	bmi.n	10e2 <getDesState()+0x1ca>
    10c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    10cc:	eef4 1ae7 	vcmpe.f32	s3, s15
    10d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10d4:	dc1d      	bgt.n	1112 <getDesState()+0x1fa>
    10d6:	eeb7 6ae1 	vcvt.f64.f32	d6, s3
    10da:	e004      	b.n	10e6 <getDesState()+0x1ce>
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    10dc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    10e0:	e7e6      	b.n	10b0 <getDesState()+0x198>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10e2:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    10e6:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    10ea:	4b47      	ldr	r3, [pc, #284]	; (1208 <getDesState()+0x2f0>)
    10ec:	ed83 6a00 	vstr	s12, [r3]
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    10f0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    10f4:	eeb4 3ae7 	vcmpe.f32	s6, s15
    10f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10fc:	d40c      	bmi.n	1118 <getDesState()+0x200>
    10fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1102:	eeb4 3ae7 	vcmpe.f32	s6, s15
    1106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    110a:	dc1d      	bgt.n	1148 <getDesState()+0x230>
    110c:	eeb7 7ac3 	vcvt.f64.f32	d7, s6
    1110:	e004      	b.n	111c <getDesState()+0x204>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    1112:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1116:	e7e6      	b.n	10e6 <getDesState()+0x1ce>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1118:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    111c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1120:	4b3a      	ldr	r3, [pc, #232]	; (120c <getDesState()+0x2f4>)
    1122:	ed83 7a00 	vstr	s14, [r3]

	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    1126:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    112a:	eef4 3ae7 	vcmpe.f32	s7, s15
    112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1132:	d40f      	bmi.n	1154 <getDesState()+0x23c>
    1134:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1138:	eef4 3ae7 	vcmpe.f32	s7, s15
    113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1140:	dd05      	ble.n	114e <getDesState()+0x236>
    1142:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1146:	e007      	b.n	1158 <getDesState()+0x240>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1148:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    114c:	e7e6      	b.n	111c <getDesState()+0x204>
	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    114e:	eeb7 6ae3 	vcvt.f64.f32	d6, s7
    1152:	e001      	b.n	1158 <getDesState()+0x240>
    1154:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
    1158:	4b2d      	ldr	r3, [pc, #180]	; (1210 <getDesState()+0x2f8>)
    115a:	ed93 7a00 	vldr	s14, [r3]
    115e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1162:	ee27 7b06 	vmul.f64	d7, d7, d6
    1166:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    116a:	4b2a      	ldr	r3, [pc, #168]	; (1214 <getDesState()+0x2fc>)
    116c:	ed83 7a00 	vstr	s14, [r3]
	betaPitch_des = constrain(pitch_des, -1.0, 1.0)*maxBetaPitch;
    1170:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1174:	eeb4 4ae7 	vcmpe.f32	s8, s15
    1178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    117c:	d40c      	bmi.n	1198 <getDesState()+0x280>
    117e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1182:	eeb4 4ae7 	vcmpe.f32	s8, s15
    1186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    118a:	dd02      	ble.n	1192 <getDesState()+0x27a>
    118c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    1190:	e004      	b.n	119c <getDesState()+0x284>
    1192:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1196:	e001      	b.n	119c <getDesState()+0x284>
    1198:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    119c:	4b1e      	ldr	r3, [pc, #120]	; (1218 <getDesState()+0x300>)
    119e:	ed93 7a00 	vldr	s14, [r3]
    11a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    11a6:	ee27 7b04 	vmul.f64	d7, d7, d4
    11aa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    11ae:	4b1b      	ldr	r3, [pc, #108]	; (121c <getDesState()+0x304>)
    11b0:	ed83 7a00 	vstr	s14, [r3]
}
    11b4:	4770      	bx	lr
    11b6:	bf00      	nop
    11b8:	00000000 	.word	0x00000000
    11bc:	408f4000 	.word	0x408f4000
    11c0:	00000000 	.word	0x00000000
    11c4:	40977000 	.word	0x40977000
    11c8:	00000000 	.word	0x00000000
    11cc:	407f4000 	.word	0x407f4000
	...
    11d8:	20004f14 	.word	0x20004f14
    11dc:	20004f20 	.word	0x20004f20
    11e0:	20004f2c 	.word	0x20004f2c
    11e4:	20004f38 	.word	0x20004f38
    11e8:	200052c4 	.word	0x200052c4
    11ec:	20003998 	.word	0x20003998
    11f0:	200050ac 	.word	0x200050ac
    11f4:	20003994 	.word	0x20003994
    11f8:	20005084 	.word	0x20005084
    11fc:	2000399c 	.word	0x2000399c
    1200:	200052e4 	.word	0x200052e4
    1204:	200050b0 	.word	0x200050b0
    1208:	20005088 	.word	0x20005088
    120c:	200052e8 	.word	0x200052e8
    1210:	20003984 	.word	0x20003984
    1214:	20004ed4 	.word	0x20004ed4
    1218:	20003988 	.word	0x20003988
    121c:	20004ee8 	.word	0x20004ee8

00001220 <scaleCommands()>:

void scaleCommands() {
    1220:	b4f0      	push	{r4, r5, r6, r7}
  //m5_command_PWM = constrain(m5_command_PWM, 125, 250);
  //m6_command_PWM = constrain(m6_command_PWM, 125, 250);

  //Scaled to 0-180 for servo library
  s1_command_PWM = s1_command_scaled*180;
  s2_command_PWM = s2_command_scaled*180;
    1222:	4b3a      	ldr	r3, [pc, #232]	; (130c <scaleCommands()+0xec>)
    1224:	edd3 7a00 	vldr	s15, [r3]
    1228:	ed9f 7a39 	vldr	s14, [pc, #228]	; 1310 <scaleCommands()+0xf0>
    122c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1234:	ee17 5a90 	vmov	r5, s15
  s3_command_PWM = s3_command_scaled*180;
    1238:	4b36      	ldr	r3, [pc, #216]	; (1314 <scaleCommands()+0xf4>)
    123a:	edd3 7a00 	vldr	s15, [r3]
    123e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1246:	ee17 4a90 	vmov	r4, s15
  s4_command_PWM = s4_command_scaled*180;
    124a:	4b33      	ldr	r3, [pc, #204]	; (1318 <scaleCommands()+0xf8>)
    124c:	edd3 7a00 	vldr	s15, [r3]
    1250:	ee67 7a87 	vmul.f32	s15, s15, s14
    1254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1258:	ee17 0a90 	vmov	r0, s15
  s5_command_PWM = s5_command_scaled*180;
    125c:	4b2f      	ldr	r3, [pc, #188]	; (131c <scaleCommands()+0xfc>)
    125e:	edd3 7a00 	vldr	s15, [r3]
    1262:	ee67 7a87 	vmul.f32	s15, s15, s14
    1266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    126a:	ee17 1a90 	vmov	r1, s15
  s6_command_PWM = s6_command_scaled*180;
    126e:	4b2c      	ldr	r3, [pc, #176]	; (1320 <scaleCommands()+0x100>)
    1270:	edd3 7a00 	vldr	s15, [r3]
    1274:	ee67 7a87 	vmul.f32	s15, s15, s14
    1278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    127c:	ee17 2a90 	vmov	r2, s15
  s7_command_PWM = s7_command_scaled*180;
    1280:	4b28      	ldr	r3, [pc, #160]	; (1324 <scaleCommands()+0x104>)
    1282:	edd3 7a00 	vldr	s15, [r3]
    1286:	ee67 7a87 	vmul.f32	s15, s15, s14
    128a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    128e:	ee17 3a90 	vmov	r3, s15
  s1_command_PWM = s1_command_scaled*180;
    1292:	4e25      	ldr	r6, [pc, #148]	; (1328 <scaleCommands()+0x108>)
    1294:	edd6 7a00 	vldr	s15, [r6]
    1298:	ee67 7a87 	vmul.f32	s15, s15, s14
    129c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12a0:	ee17 6a90 	vmov	r6, s15
  //Constrain commands to servos within servo library bounds
  s1_command_PWM = constrain(s1_command_PWM, 0, 180);
    12a4:	2eb4      	cmp	r6, #180	; 0xb4
    12a6:	bfa8      	it	ge
    12a8:	26b4      	movge	r6, #180	; 0xb4
    12aa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    12ae:	4f1f      	ldr	r7, [pc, #124]	; (132c <scaleCommands()+0x10c>)
    12b0:	603e      	str	r6, [r7, #0]
  s2_command_PWM = constrain(s2_command_PWM, 0, 180);
    12b2:	2db4      	cmp	r5, #180	; 0xb4
    12b4:	bfa8      	it	ge
    12b6:	25b4      	movge	r5, #180	; 0xb4
    12b8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    12bc:	4e1c      	ldr	r6, [pc, #112]	; (1330 <scaleCommands()+0x110>)
    12be:	6035      	str	r5, [r6, #0]
  s3_command_PWM = constrain(s3_command_PWM, 0, 180);
    12c0:	2cb4      	cmp	r4, #180	; 0xb4
    12c2:	bfa8      	it	ge
    12c4:	24b4      	movge	r4, #180	; 0xb4
    12c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    12ca:	4d1a      	ldr	r5, [pc, #104]	; (1334 <scaleCommands()+0x114>)
    12cc:	602c      	str	r4, [r5, #0]
  s4_command_PWM = constrain(s4_command_PWM, 0, 180);
    12ce:	28b4      	cmp	r0, #180	; 0xb4
    12d0:	bfa8      	it	ge
    12d2:	20b4      	movge	r0, #180	; 0xb4
    12d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    12d8:	4c17      	ldr	r4, [pc, #92]	; (1338 <scaleCommands()+0x118>)
    12da:	6020      	str	r0, [r4, #0]
  s5_command_PWM = constrain(s5_command_PWM, 0, 180);
    12dc:	29b4      	cmp	r1, #180	; 0xb4
    12de:	bfa8      	it	ge
    12e0:	21b4      	movge	r1, #180	; 0xb4
    12e2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    12e6:	4815      	ldr	r0, [pc, #84]	; (133c <scaleCommands()+0x11c>)
    12e8:	6001      	str	r1, [r0, #0]
  s6_command_PWM = constrain(s6_command_PWM, 0, 180);
    12ea:	2ab4      	cmp	r2, #180	; 0xb4
    12ec:	bfa8      	it	ge
    12ee:	22b4      	movge	r2, #180	; 0xb4
    12f0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    12f4:	4912      	ldr	r1, [pc, #72]	; (1340 <scaleCommands()+0x120>)
    12f6:	600a      	str	r2, [r1, #0]
  s7_command_PWM = constrain(s7_command_PWM, 0, 180);
    12f8:	2bb4      	cmp	r3, #180	; 0xb4
    12fa:	bfa8      	it	ge
    12fc:	23b4      	movge	r3, #180	; 0xb4
    12fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1302:	4a10      	ldr	r2, [pc, #64]	; (1344 <scaleCommands()+0x124>)
    1304:	6013      	str	r3, [r2, #0]
}
    1306:	bcf0      	pop	{r4, r5, r6, r7}
    1308:	4770      	bx	lr
    130a:	bf00      	nop
    130c:	200050f0 	.word	0x200050f0
    1310:	43340000 	.word	0x43340000
    1314:	200050f8 	.word	0x200050f8
    1318:	20005100 	.word	0x20005100
    131c:	20005108 	.word	0x20005108
    1320:	20005110 	.word	0x20005110
    1324:	20005118 	.word	0x20005118
    1328:	200050e8 	.word	0x200050e8
    132c:	200050e4 	.word	0x200050e4
    1330:	200050ec 	.word	0x200050ec
    1334:	200050f4 	.word	0x200050f4
    1338:	200050fc 	.word	0x200050fc
    133c:	20005104 	.word	0x20005104
    1340:	2000510c 	.word	0x2000510c
    1344:	20005114 	.word	0x20005114

00001348 <getCommands()>:

void getCommands() {
    1348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    channel_4_pwm = getRadioPWM(4);
    channel_5_pwm = getRadioPWM(5);
    channel_6_pwm = getRadioPWM(6);
    
  #elif defined USE_SBUS_RX
    if (sbus.read(&sbusChannels[0], &sbusFailSafe, &sbusLostFrame))
    134a:	4bc5      	ldr	r3, [pc, #788]	; (1660 <getCommands()+0x318>)
    134c:	4ac5      	ldr	r2, [pc, #788]	; (1664 <getCommands()+0x31c>)
    134e:	49c6      	ldr	r1, [pc, #792]	; (1668 <getCommands()+0x320>)
    1350:	48c6      	ldr	r0, [pc, #792]	; (166c <getCommands()+0x324>)
    1352:	f002 fc99 	bl	3c88 <SBUS::read(unsigned short*, bool*, bool*)>
    1356:	2800      	cmp	r0, #0
    1358:	f000 80bb 	beq.w	14d2 <getCommands()+0x18a>
    {
      //sBus scaling below is for Taranis-Plus and X4R-SB
      float scale = 0.615;  
      float bias  = 895.0; 
      channel_1_pwm_pre = sbusChannels[0] * scale + bias;
    135c:	4bc2      	ldr	r3, [pc, #776]	; (1668 <getCommands()+0x320>)
    135e:	881a      	ldrh	r2, [r3, #0]
    1360:	ee06 2a90 	vmov	s13, r2
    1364:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1368:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 1670 <getCommands()+0x328>
    136c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1370:	eddf 7ac0 	vldr	s15, [pc, #768]	; 1674 <getCommands()+0x32c>
    1374:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1378:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    137c:	4abe      	ldr	r2, [pc, #760]	; (1678 <getCommands()+0x330>)
    137e:	edc2 6a00 	vstr	s13, [r2]
      channel_2_pwm_pre = sbusChannels[1] * scale + bias;
    1382:	885a      	ldrh	r2, [r3, #2]
    1384:	ee06 2a90 	vmov	s13, r2
    1388:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    138c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1390:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1394:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1398:	4ab8      	ldr	r2, [pc, #736]	; (167c <getCommands()+0x334>)
    139a:	edc2 6a00 	vstr	s13, [r2]
      channel_3_pwm_pre = sbusChannels[2] * scale + bias;
    139e:	889a      	ldrh	r2, [r3, #4]
    13a0:	ee06 2a90 	vmov	s13, r2
    13a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    13a8:	ee66 6a87 	vmul.f32	s13, s13, s14
    13ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
    13b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    13b4:	4ab2      	ldr	r2, [pc, #712]	; (1680 <getCommands()+0x338>)
    13b6:	edc2 6a00 	vstr	s13, [r2]
      channel_4_pwm_pre = sbusChannels[3] * scale + bias;
    13ba:	88da      	ldrh	r2, [r3, #6]
    13bc:	ee06 2a90 	vmov	s13, r2
    13c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    13c4:	ee66 6a87 	vmul.f32	s13, s13, s14
    13c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    13cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    13d0:	4aac      	ldr	r2, [pc, #688]	; (1684 <getCommands()+0x33c>)
    13d2:	edc2 6a00 	vstr	s13, [r2]
      channel_5_pwm = sbusChannels[4] * scale + bias;
    13d6:	891a      	ldrh	r2, [r3, #8]
    13d8:	ee06 2a90 	vmov	s13, r2
    13dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    13e0:	ee66 6a87 	vmul.f32	s13, s13, s14
    13e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    13e8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    13ec:	4aa6      	ldr	r2, [pc, #664]	; (1688 <getCommands()+0x340>)
    13ee:	edc2 6a00 	vstr	s13, [r2]
      channel_6_pwm = sbusChannels[5] * scale + bias; 
    13f2:	895a      	ldrh	r2, [r3, #10]
    13f4:	ee06 2a90 	vmov	s13, r2
    13f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    13fc:	ee66 6a87 	vmul.f32	s13, s13, s14
    1400:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1404:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1408:	4aa0      	ldr	r2, [pc, #640]	; (168c <getCommands()+0x344>)
    140a:	edc2 6a00 	vstr	s13, [r2]
			channel_7_pwm = sbusChannels[6] * scale + bias;
    140e:	899a      	ldrh	r2, [r3, #12]
    1410:	ee06 2a90 	vmov	s13, r2
    1414:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1418:	ee66 6a87 	vmul.f32	s13, s13, s14
    141c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1420:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1424:	4a9a      	ldr	r2, [pc, #616]	; (1690 <getCommands()+0x348>)
    1426:	edc2 6a00 	vstr	s13, [r2]
			channel_8_pwm = sbusChannels[7] * scale + bias;
    142a:	89da      	ldrh	r2, [r3, #14]
    142c:	ee06 2a90 	vmov	s13, r2
    1430:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1434:	ee66 6a87 	vmul.f32	s13, s13, s14
    1438:	ee76 6aa7 	vadd.f32	s13, s13, s15
    143c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1440:	4a94      	ldr	r2, [pc, #592]	; (1694 <getCommands()+0x34c>)
    1442:	edc2 6a00 	vstr	s13, [r2]
			channel_9_pwm = sbusChannels[8] * scale + bias;
    1446:	8a1a      	ldrh	r2, [r3, #16]
    1448:	ee06 2a90 	vmov	s13, r2
    144c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1450:	ee66 6a87 	vmul.f32	s13, s13, s14
    1454:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1458:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    145c:	4a8e      	ldr	r2, [pc, #568]	; (1698 <getCommands()+0x350>)
    145e:	edc2 6a00 	vstr	s13, [r2]
			channel_10_pwm = sbusChannels[9] * scale + bias;
    1462:	8a5a      	ldrh	r2, [r3, #18]
    1464:	ee06 2a90 	vmov	s13, r2
    1468:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    146c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1470:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1474:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1478:	4a88      	ldr	r2, [pc, #544]	; (169c <getCommands()+0x354>)
    147a:	edc2 6a00 	vstr	s13, [r2]
			channel_11_pwm = sbusChannels[10] * scale + bias;
    147e:	8a9a      	ldrh	r2, [r3, #20]
    1480:	ee06 2a90 	vmov	s13, r2
    1484:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1488:	ee66 6a87 	vmul.f32	s13, s13, s14
    148c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1490:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1494:	4a82      	ldr	r2, [pc, #520]	; (16a0 <getCommands()+0x358>)
    1496:	edc2 6a00 	vstr	s13, [r2]
			channel_12_pwm = sbusChannels[11] * scale + bias;
    149a:	8ada      	ldrh	r2, [r3, #22]
    149c:	ee06 2a90 	vmov	s13, r2
    14a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14a4:	ee66 6a87 	vmul.f32	s13, s13, s14
    14a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14ac:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14b0:	4a7c      	ldr	r2, [pc, #496]	; (16a4 <getCommands()+0x35c>)
    14b2:	edc2 6a00 	vstr	s13, [r2]
			channel_13_pwm = sbusChannels[12] * scale + bias;
    14b6:	8b1b      	ldrh	r3, [r3, #24]
    14b8:	ee06 3a90 	vmov	s13, r3
    14bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14c0:	ee26 7a87 	vmul.f32	s14, s13, s14
    14c4:	ee77 7a27 	vadd.f32	s15, s14, s15
    14c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    14cc:	4b76      	ldr	r3, [pc, #472]	; (16a8 <getCommands()+0x360>)
    14ce:	edc3 7a00 	vstr	s15, [r3]
    }
  #endif
  
  //Low-pass the critical commands and update previous values
  float b = 0.7; //Lower=slower, higher=noiser
  channel_1_pwm_pre = (1.0 - b)*channel_1_pwm_prev + b*channel_1_pwm_pre;
    14d2:	4b76      	ldr	r3, [pc, #472]	; (16ac <getCommands()+0x364>)
    14d4:	681d      	ldr	r5, [r3, #0]
    14d6:	4b68      	ldr	r3, [pc, #416]	; (1678 <getCommands()+0x330>)
    14d8:	edd3 7a00 	vldr	s15, [r3]
    14dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    14e0:	eddf 5a73 	vldr	s11, [pc, #460]	; 16b0 <getCommands()+0x368>
    14e4:	ee27 7a25 	vmul.f32	s14, s14, s11
    14e8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    14ec:	ee06 5a90 	vmov	s13, r5
    14f0:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    14f4:	ed9f 6b58 	vldr	d6, [pc, #352]	; 1658 <getCommands()+0x310>
    14f8:	ee04 7b06 	vmla.f64	d7, d4, d6
    14fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1500:	ee17 0a90 	vmov	r0, s15
    1504:	edc3 7a00 	vstr	s15, [r3]
  channel_2_pwm_pre = (1.0 - b)*channel_2_pwm_prev + b*channel_2_pwm_pre;
    1508:	4b6a      	ldr	r3, [pc, #424]	; (16b4 <getCommands()+0x36c>)
    150a:	f8d3 c000 	ldr.w	ip, [r3]
    150e:	4b5b      	ldr	r3, [pc, #364]	; (167c <getCommands()+0x334>)
    1510:	edd3 7a00 	vldr	s15, [r3]
    1514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1518:	ee27 7a25 	vmul.f32	s14, s14, s11
    151c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1520:	ee05 ca10 	vmov	s10, ip
    1524:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    1528:	ee04 7b06 	vmla.f64	d7, d4, d6
    152c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1530:	ee17 1a90 	vmov	r1, s15
    1534:	edc3 7a00 	vstr	s15, [r3]
  channel_3_pwm_pre = (1.0 - b)*channel_3_pwm_prev + b*channel_3_pwm_pre;
    1538:	4b5f      	ldr	r3, [pc, #380]	; (16b8 <getCommands()+0x370>)
    153a:	681f      	ldr	r7, [r3, #0]
    153c:	4b50      	ldr	r3, [pc, #320]	; (1680 <getCommands()+0x338>)
    153e:	edd3 7a00 	vldr	s15, [r3]
    1542:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1546:	ee27 7a25 	vmul.f32	s14, s14, s11
    154a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    154e:	ee05 7a10 	vmov	s10, r7
    1552:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    1556:	ee04 7b06 	vmla.f64	d7, d4, d6
    155a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    155e:	ee17 2a90 	vmov	r2, s15
    1562:	edc3 7a00 	vstr	s15, [r3]
  channel_4_pwm_pre = (1.0 - b)*channel_4_pwm_prev + b*channel_4_pwm_pre;
    1566:	4b55      	ldr	r3, [pc, #340]	; (16bc <getCommands()+0x374>)
    1568:	681e      	ldr	r6, [r3, #0]
    156a:	4c46      	ldr	r4, [pc, #280]	; (1684 <getCommands()+0x33c>)
    156c:	edd4 7a00 	vldr	s15, [r4]
    1570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1574:	ee27 7a25 	vmul.f32	s14, s14, s11
    1578:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    157c:	ee05 6a90 	vmov	s11, r6
    1580:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    1584:	ee05 7b06 	vmla.f64	d7, d5, d6
    1588:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    158c:	ee17 3a90 	vmov	r3, s15
    1590:	edc4 7a00 	vstr	s15, [r4]

	// Additional cutoff to deal with occasional spikes in recieved radio commands
	d_ch1 = channel_1_pwm_pre - channel_1_pwm_prev;
    1594:	1b44      	subs	r4, r0, r5
    1596:	f8df e158 	ldr.w	lr, [pc, #344]	; 16f0 <getCommands()+0x3a8>
    159a:	f8ce 4000 	str.w	r4, [lr]
	d_ch2 = channel_2_pwm_pre - channel_2_pwm_prev;
    159e:	eba1 010c 	sub.w	r1, r1, ip
    15a2:	f8df c138 	ldr.w	ip, [pc, #312]	; 16dc <getCommands()+0x394>
    15a6:	f8cc 1000 	str.w	r1, [ip]
	d_ch3 = channel_3_pwm_pre - channel_3_pwm_prev;
    15aa:	1bd2      	subs	r2, r2, r7
    15ac:	4944      	ldr	r1, [pc, #272]	; (16c0 <getCommands()+0x378>)
    15ae:	600a      	str	r2, [r1, #0]
	d_ch4 = channel_4_pwm_pre - channel_4_pwm_prev;
    15b0:	1b9b      	subs	r3, r3, r6
    15b2:	4a44      	ldr	r2, [pc, #272]	; (16c4 <getCommands()+0x37c>)
    15b4:	6013      	str	r3, [r2, #0]
	
	if (abs(d_ch1) > cutoff_val && ch1_CutCounter < maxCutCounter && doneWithSetup) {
    15b6:	2c00      	cmp	r4, #0
    15b8:	bfb8      	it	lt
    15ba:	4264      	neglt	r4, r4
    15bc:	4b42      	ldr	r3, [pc, #264]	; (16c8 <getCommands()+0x380>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	42a3      	cmp	r3, r4
    15c2:	da0a      	bge.n	15da <getCommands()+0x292>
    15c4:	4b41      	ldr	r3, [pc, #260]	; (16cc <getCommands()+0x384>)
    15c6:	681a      	ldr	r2, [r3, #0]
    15c8:	4b41      	ldr	r3, [pc, #260]	; (16d0 <getCommands()+0x388>)
    15ca:	681b      	ldr	r3, [r3, #0]
    15cc:	429a      	cmp	r2, r3
    15ce:	da04      	bge.n	15da <getCommands()+0x292>
    15d0:	4b40      	ldr	r3, [pc, #256]	; (16d4 <getCommands()+0x38c>)
    15d2:	781b      	ldrb	r3, [r3, #0]
    15d4:	2b00      	cmp	r3, #0
    15d6:	f040 80b5 	bne.w	1744 <getCommands()+0x3fc>
		channel_1_pwm = channel_1_pwm_prev;
		Serial.println(F("Radio command spike detected (CH1)"));
		ch1_CutCounter++;
	} else {
		channel_1_pwm = channel_1_pwm_pre;
    15da:	4b3f      	ldr	r3, [pc, #252]	; (16d8 <getCommands()+0x390>)
    15dc:	6018      	str	r0, [r3, #0]
    15de:	2300      	movs	r3, #0
		ch1_CutCounter++;
    15e0:	4a3a      	ldr	r2, [pc, #232]	; (16cc <getCommands()+0x384>)
    15e2:	6013      	str	r3, [r2, #0]
		ch1_CutCounter = 0;
	}
	if (abs(d_ch2) > cutoff_val && ch2_CutCounter < maxCutCounter && doneWithSetup) {
    15e4:	4b3d      	ldr	r3, [pc, #244]	; (16dc <getCommands()+0x394>)
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	2b00      	cmp	r3, #0
    15ea:	bfb8      	it	lt
    15ec:	425b      	neglt	r3, r3
    15ee:	4a36      	ldr	r2, [pc, #216]	; (16c8 <getCommands()+0x380>)
    15f0:	6812      	ldr	r2, [r2, #0]
    15f2:	429a      	cmp	r2, r3
    15f4:	da0a      	bge.n	160c <getCommands()+0x2c4>
    15f6:	4b3a      	ldr	r3, [pc, #232]	; (16e0 <getCommands()+0x398>)
    15f8:	681a      	ldr	r2, [r3, #0]
    15fa:	4b35      	ldr	r3, [pc, #212]	; (16d0 <getCommands()+0x388>)
    15fc:	681b      	ldr	r3, [r3, #0]
    15fe:	429a      	cmp	r2, r3
    1600:	da04      	bge.n	160c <getCommands()+0x2c4>
    1602:	4b34      	ldr	r3, [pc, #208]	; (16d4 <getCommands()+0x38c>)
    1604:	781b      	ldrb	r3, [r3, #0]
    1606:	2b00      	cmp	r3, #0
    1608:	f040 80ac 	bne.w	1764 <getCommands()+0x41c>
		channel_2_pwm = channel_2_pwm_prev;
		Serial.println(F("Radio command spike detected (CH2)"));
		ch2_CutCounter++;
	} else {
		channel_2_pwm = channel_2_pwm_pre;
    160c:	4b1b      	ldr	r3, [pc, #108]	; (167c <getCommands()+0x334>)
    160e:	681a      	ldr	r2, [r3, #0]
    1610:	4b34      	ldr	r3, [pc, #208]	; (16e4 <getCommands()+0x39c>)
    1612:	601a      	str	r2, [r3, #0]
    1614:	2300      	movs	r3, #0
		ch2_CutCounter++;
    1616:	4a32      	ldr	r2, [pc, #200]	; (16e0 <getCommands()+0x398>)
    1618:	6013      	str	r3, [r2, #0]
		ch2_CutCounter = 0;
	}
	if (abs(d_ch3) > cutoff_val && ch3_CutCounter < maxCutCounter && doneWithSetup) {
    161a:	4b29      	ldr	r3, [pc, #164]	; (16c0 <getCommands()+0x378>)
    161c:	681b      	ldr	r3, [r3, #0]
    161e:	2b00      	cmp	r3, #0
    1620:	bfb8      	it	lt
    1622:	425b      	neglt	r3, r3
    1624:	4a28      	ldr	r2, [pc, #160]	; (16c8 <getCommands()+0x380>)
    1626:	6812      	ldr	r2, [r2, #0]
    1628:	429a      	cmp	r2, r3
    162a:	da0a      	bge.n	1642 <getCommands()+0x2fa>
    162c:	4b2e      	ldr	r3, [pc, #184]	; (16e8 <getCommands()+0x3a0>)
    162e:	681a      	ldr	r2, [r3, #0]
    1630:	4b27      	ldr	r3, [pc, #156]	; (16d0 <getCommands()+0x388>)
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	429a      	cmp	r2, r3
    1636:	da04      	bge.n	1642 <getCommands()+0x2fa>
    1638:	4b26      	ldr	r3, [pc, #152]	; (16d4 <getCommands()+0x38c>)
    163a:	781b      	ldrb	r3, [r3, #0]
    163c:	2b00      	cmp	r3, #0
    163e:	f040 80a3 	bne.w	1788 <getCommands()+0x440>
		channel_3_pwm = channel_3_pwm_prev;
		Serial.println(F("Radio command spike detected (CH3)"));
		ch3_CutCounter++;
	} else {
		channel_3_pwm = channel_3_pwm_pre;
    1642:	4b0f      	ldr	r3, [pc, #60]	; (1680 <getCommands()+0x338>)
    1644:	681a      	ldr	r2, [r3, #0]
    1646:	4b29      	ldr	r3, [pc, #164]	; (16ec <getCommands()+0x3a4>)
    1648:	601a      	str	r2, [r3, #0]
    164a:	2300      	movs	r3, #0
		ch3_CutCounter++;
    164c:	4a26      	ldr	r2, [pc, #152]	; (16e8 <getCommands()+0x3a0>)
    164e:	6013      	str	r3, [r2, #0]
		ch3_CutCounter = 0;
	}
	if (abs(d_ch4) > cutoff_val && ch4_CutCounter < maxCutCounter && doneWithSetup) {
    1650:	4b1c      	ldr	r3, [pc, #112]	; (16c4 <getCommands()+0x37c>)
    1652:	681b      	ldr	r3, [r3, #0]
    1654:	2b00      	cmp	r3, #0
    1656:	e04d      	b.n	16f4 <getCommands()+0x3ac>
    1658:	40000000 	.word	0x40000000
    165c:	3fd33333 	.word	0x3fd33333
    1660:	20005306 	.word	0x20005306
    1664:	20005305 	.word	0x20005305
    1668:	20005268 	.word	0x20005268
    166c:	2000512c 	.word	0x2000512c
    1670:	3f1d70a4 	.word	0x3f1d70a4
    1674:	445fc000 	.word	0x445fc000
    1678:	20004f18 	.word	0x20004f18
    167c:	20004f24 	.word	0x20004f24
    1680:	20004f30 	.word	0x20004f30
    1684:	20004f3c 	.word	0x20004f3c
    1688:	20004f44 	.word	0x20004f44
    168c:	20004f48 	.word	0x20004f48
    1690:	20004f4c 	.word	0x20004f4c
    1694:	20004f50 	.word	0x20004f50
    1698:	20004f54 	.word	0x20004f54
    169c:	20004f04 	.word	0x20004f04
    16a0:	20004f08 	.word	0x20004f08
    16a4:	20004f0c 	.word	0x20004f0c
    16a8:	20004f10 	.word	0x20004f10
    16ac:	20004f1c 	.word	0x20004f1c
    16b0:	3f333333 	.word	0x3f333333
    16b4:	20004f28 	.word	0x20004f28
    16b8:	20004f34 	.word	0x20004f34
    16bc:	20004f40 	.word	0x20004f40
    16c0:	20004fd0 	.word	0x20004fd0
    16c4:	20004fd4 	.word	0x20004fd4
    16c8:	2000392c 	.word	0x2000392c
    16cc:	20004ef4 	.word	0x20004ef4
    16d0:	2000398c 	.word	0x2000398c
    16d4:	200052ff 	.word	0x200052ff
    16d8:	20004f14 	.word	0x20004f14
    16dc:	20004fcc 	.word	0x20004fcc
    16e0:	20004ef8 	.word	0x20004ef8
    16e4:	20004f20 	.word	0x20004f20
    16e8:	20004efc 	.word	0x20004efc
    16ec:	20004f2c 	.word	0x20004f2c
    16f0:	20004fc8 	.word	0x20004fc8
    16f4:	bfb8      	it	lt
    16f6:	425b      	neglt	r3, r3
    16f8:	4a35      	ldr	r2, [pc, #212]	; (17d0 <getCommands()+0x488>)
    16fa:	6812      	ldr	r2, [r2, #0]
    16fc:	429a      	cmp	r2, r3
    16fe:	da09      	bge.n	1714 <getCommands()+0x3cc>
    1700:	4b34      	ldr	r3, [pc, #208]	; (17d4 <getCommands()+0x48c>)
    1702:	681a      	ldr	r2, [r3, #0]
    1704:	4b34      	ldr	r3, [pc, #208]	; (17d8 <getCommands()+0x490>)
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	429a      	cmp	r2, r3
    170a:	da03      	bge.n	1714 <getCommands()+0x3cc>
    170c:	4b33      	ldr	r3, [pc, #204]	; (17dc <getCommands()+0x494>)
    170e:	781b      	ldrb	r3, [r3, #0]
    1710:	2b00      	cmp	r3, #0
    1712:	d14b      	bne.n	17ac <getCommands()+0x464>
		channel_4_pwm = channel_4_pwm_prev;
		Serial.println(F("Radio command spike detected (CH4)"));
		ch4_CutCounter++;
	} else {
		channel_4_pwm = channel_4_pwm_pre;
    1714:	4b32      	ldr	r3, [pc, #200]	; (17e0 <getCommands()+0x498>)
    1716:	681a      	ldr	r2, [r3, #0]
    1718:	4b32      	ldr	r3, [pc, #200]	; (17e4 <getCommands()+0x49c>)
    171a:	601a      	str	r2, [r3, #0]
    171c:	2300      	movs	r3, #0
		ch4_CutCounter++;
    171e:	4a2d      	ldr	r2, [pc, #180]	; (17d4 <getCommands()+0x48c>)
    1720:	6013      	str	r3, [r2, #0]
		ch4_CutCounter = 0;
	}

	// Update prev values
  channel_1_pwm_prev = channel_1_pwm;
    1722:	4b31      	ldr	r3, [pc, #196]	; (17e8 <getCommands()+0x4a0>)
    1724:	681a      	ldr	r2, [r3, #0]
    1726:	4b31      	ldr	r3, [pc, #196]	; (17ec <getCommands()+0x4a4>)
    1728:	601a      	str	r2, [r3, #0]
  channel_2_pwm_prev = channel_2_pwm;
    172a:	4b31      	ldr	r3, [pc, #196]	; (17f0 <getCommands()+0x4a8>)
    172c:	681a      	ldr	r2, [r3, #0]
    172e:	4b31      	ldr	r3, [pc, #196]	; (17f4 <getCommands()+0x4ac>)
    1730:	601a      	str	r2, [r3, #0]
  channel_3_pwm_prev = channel_3_pwm;
    1732:	4b31      	ldr	r3, [pc, #196]	; (17f8 <getCommands()+0x4b0>)
    1734:	681a      	ldr	r2, [r3, #0]
    1736:	4b31      	ldr	r3, [pc, #196]	; (17fc <getCommands()+0x4b4>)
    1738:	601a      	str	r2, [r3, #0]
  channel_4_pwm_prev = channel_4_pwm;
    173a:	4b2a      	ldr	r3, [pc, #168]	; (17e4 <getCommands()+0x49c>)
    173c:	681a      	ldr	r2, [r3, #0]
    173e:	4b30      	ldr	r3, [pc, #192]	; (1800 <getCommands()+0x4b8>)
    1740:	601a      	str	r2, [r3, #0]
}
    1742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		channel_1_pwm = channel_1_pwm_prev;
    1744:	4b28      	ldr	r3, [pc, #160]	; (17e8 <getCommands()+0x4a0>)
    1746:	601d      	str	r5, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1748:	4c2e      	ldr	r4, [pc, #184]	; (1804 <getCommands()+0x4bc>)
    174a:	6823      	ldr	r3, [r4, #0]
    174c:	685b      	ldr	r3, [r3, #4]
    174e:	2222      	movs	r2, #34	; 0x22
    1750:	492d      	ldr	r1, [pc, #180]	; (1808 <getCommands()+0x4c0>)
    1752:	4620      	mov	r0, r4
    1754:	4798      	blx	r3
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1756:	4620      	mov	r0, r4
    1758:	f00a fdf5 	bl	c346 <Print::println()>
		ch1_CutCounter++;
    175c:	4b2b      	ldr	r3, [pc, #172]	; (180c <getCommands()+0x4c4>)
    175e:	681b      	ldr	r3, [r3, #0]
    1760:	3301      	adds	r3, #1
    1762:	e73d      	b.n	15e0 <getCommands()+0x298>
		channel_2_pwm = channel_2_pwm_prev;
    1764:	4b23      	ldr	r3, [pc, #140]	; (17f4 <getCommands()+0x4ac>)
    1766:	681a      	ldr	r2, [r3, #0]
    1768:	4b21      	ldr	r3, [pc, #132]	; (17f0 <getCommands()+0x4a8>)
    176a:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    176c:	4c25      	ldr	r4, [pc, #148]	; (1804 <getCommands()+0x4bc>)
    176e:	6823      	ldr	r3, [r4, #0]
    1770:	685b      	ldr	r3, [r3, #4]
    1772:	2222      	movs	r2, #34	; 0x22
    1774:	4926      	ldr	r1, [pc, #152]	; (1810 <getCommands()+0x4c8>)
    1776:	4620      	mov	r0, r4
    1778:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    177a:	4620      	mov	r0, r4
    177c:	f00a fde3 	bl	c346 <Print::println()>
		ch2_CutCounter++;
    1780:	4b24      	ldr	r3, [pc, #144]	; (1814 <getCommands()+0x4cc>)
    1782:	681b      	ldr	r3, [r3, #0]
    1784:	3301      	adds	r3, #1
    1786:	e746      	b.n	1616 <getCommands()+0x2ce>
		channel_3_pwm = channel_3_pwm_prev;
    1788:	4b1c      	ldr	r3, [pc, #112]	; (17fc <getCommands()+0x4b4>)
    178a:	681a      	ldr	r2, [r3, #0]
    178c:	4b1a      	ldr	r3, [pc, #104]	; (17f8 <getCommands()+0x4b0>)
    178e:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1790:	4c1c      	ldr	r4, [pc, #112]	; (1804 <getCommands()+0x4bc>)
    1792:	6823      	ldr	r3, [r4, #0]
    1794:	685b      	ldr	r3, [r3, #4]
    1796:	2222      	movs	r2, #34	; 0x22
    1798:	491f      	ldr	r1, [pc, #124]	; (1818 <getCommands()+0x4d0>)
    179a:	4620      	mov	r0, r4
    179c:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    179e:	4620      	mov	r0, r4
    17a0:	f00a fdd1 	bl	c346 <Print::println()>
		ch3_CutCounter++;
    17a4:	4b1d      	ldr	r3, [pc, #116]	; (181c <getCommands()+0x4d4>)
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	3301      	adds	r3, #1
    17aa:	e74f      	b.n	164c <getCommands()+0x304>
		channel_4_pwm = channel_4_pwm_prev;
    17ac:	4b14      	ldr	r3, [pc, #80]	; (1800 <getCommands()+0x4b8>)
    17ae:	681a      	ldr	r2, [r3, #0]
    17b0:	4b0c      	ldr	r3, [pc, #48]	; (17e4 <getCommands()+0x49c>)
    17b2:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    17b4:	4c13      	ldr	r4, [pc, #76]	; (1804 <getCommands()+0x4bc>)
    17b6:	6823      	ldr	r3, [r4, #0]
    17b8:	685b      	ldr	r3, [r3, #4]
    17ba:	2222      	movs	r2, #34	; 0x22
    17bc:	4918      	ldr	r1, [pc, #96]	; (1820 <getCommands()+0x4d8>)
    17be:	4620      	mov	r0, r4
    17c0:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    17c2:	4620      	mov	r0, r4
    17c4:	f00a fdbf 	bl	c346 <Print::println()>
		ch4_CutCounter++;
    17c8:	4b02      	ldr	r3, [pc, #8]	; (17d4 <getCommands()+0x48c>)
    17ca:	681b      	ldr	r3, [r3, #0]
    17cc:	3301      	adds	r3, #1
    17ce:	e7a6      	b.n	171e <getCommands()+0x3d6>
    17d0:	2000392c 	.word	0x2000392c
    17d4:	20004f00 	.word	0x20004f00
    17d8:	2000398c 	.word	0x2000398c
    17dc:	200052ff 	.word	0x200052ff
    17e0:	20004f3c 	.word	0x20004f3c
    17e4:	20004f38 	.word	0x20004f38
    17e8:	20004f14 	.word	0x20004f14
    17ec:	20004f1c 	.word	0x20004f1c
    17f0:	20004f20 	.word	0x20004f20
    17f4:	20004f28 	.word	0x20004f28
    17f8:	20004f2c 	.word	0x20004f2c
    17fc:	20004f34 	.word	0x20004f34
    1800:	20004f40 	.word	0x20004f40
    1804:	200032c8 	.word	0x200032c8
    1808:	20001d8c 	.word	0x20001d8c
    180c:	20004ef4 	.word	0x20004ef4
    1810:	20001db0 	.word	0x20001db0
    1814:	20004ef8 	.word	0x20004ef8
    1818:	20001dd4 	.word	0x20001dd4
    181c:	20004efc 	.word	0x20004efc
    1820:	20001df8 	.word	0x20001df8

00001824 <failSafe()>:
  int check2 = 0;
  int check3 = 0;
  int check4 = 0;
  int check5 = 0;
  int check6 = 0;
	failureFlag = 0;
    1824:	4b28      	ldr	r3, [pc, #160]	; (18c8 <failSafe()+0xa4>)
    1826:	2200      	movs	r2, #0
    1828:	701a      	strb	r2, [r3, #0]

  //Triggers for failure criteria
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
  if (channel_2_pwm > maxVal || channel_2_pwm < minVal) check2 = 1;
    182a:	4b28      	ldr	r3, [pc, #160]	; (18cc <failSafe()+0xa8>)
    182c:	681a      	ldr	r2, [r3, #0]
    182e:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
    1832:	4b27      	ldr	r3, [pc, #156]	; (18d0 <failSafe()+0xac>)
    1834:	681b      	ldr	r3, [r3, #0]
    1836:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    183a:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    183e:	bf94      	ite	ls
    1840:	2300      	movls	r3, #0
    1842:	2301      	movhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;

  //If any failures, set to default failsafe values
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1844:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1848:	bf88      	it	hi
    184a:	3301      	addhi	r3, #1
  if (channel_3_pwm > maxVal || channel_3_pwm < minVal) check3 = 1;
    184c:	4a21      	ldr	r2, [pc, #132]	; (18d4 <failSafe()+0xb0>)
    184e:	6812      	ldr	r2, [r2, #0]
    1850:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1854:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1858:	bf88      	it	hi
    185a:	3301      	addhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
    185c:	4a1e      	ldr	r2, [pc, #120]	; (18d8 <failSafe()+0xb4>)
    185e:	6812      	ldr	r2, [r2, #0]
    1860:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1864:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1868:	bf88      	it	hi
    186a:	3301      	addhi	r3, #1
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
    186c:	4a1b      	ldr	r2, [pc, #108]	; (18dc <failSafe()+0xb8>)
    186e:	6812      	ldr	r2, [r2, #0]
    1870:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1874:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1878:	bf88      	it	hi
    187a:	3301      	addhi	r3, #1
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;
    187c:	4a18      	ldr	r2, [pc, #96]	; (18e0 <failSafe()+0xbc>)
    187e:	6812      	ldr	r2, [r2, #0]
    1880:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1884:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1888:	bf88      	it	hi
    188a:	3301      	addhi	r3, #1
    188c:	b1d3      	cbz	r3, 18c4 <failSafe()+0xa0>
    channel_1_pwm = channel_1_fs;
    188e:	4b15      	ldr	r3, [pc, #84]	; (18e4 <failSafe()+0xc0>)
    1890:	681a      	ldr	r2, [r3, #0]
    1892:	4b0f      	ldr	r3, [pc, #60]	; (18d0 <failSafe()+0xac>)
    1894:	601a      	str	r2, [r3, #0]
    channel_2_pwm = channel_2_fs;
    1896:	4b14      	ldr	r3, [pc, #80]	; (18e8 <failSafe()+0xc4>)
    1898:	681a      	ldr	r2, [r3, #0]
    189a:	4b0c      	ldr	r3, [pc, #48]	; (18cc <failSafe()+0xa8>)
    189c:	601a      	str	r2, [r3, #0]
    channel_3_pwm = channel_3_fs;
    189e:	4b13      	ldr	r3, [pc, #76]	; (18ec <failSafe()+0xc8>)
    18a0:	681a      	ldr	r2, [r3, #0]
    18a2:	4b0c      	ldr	r3, [pc, #48]	; (18d4 <failSafe()+0xb0>)
    18a4:	601a      	str	r2, [r3, #0]
    channel_4_pwm = channel_4_fs;
    18a6:	4b12      	ldr	r3, [pc, #72]	; (18f0 <failSafe()+0xcc>)
    18a8:	681a      	ldr	r2, [r3, #0]
    18aa:	4b0b      	ldr	r3, [pc, #44]	; (18d8 <failSafe()+0xb4>)
    18ac:	601a      	str	r2, [r3, #0]
    channel_5_pwm = channel_5_fs;
    18ae:	4b11      	ldr	r3, [pc, #68]	; (18f4 <failSafe()+0xd0>)
    18b0:	681a      	ldr	r2, [r3, #0]
    18b2:	4b0a      	ldr	r3, [pc, #40]	; (18dc <failSafe()+0xb8>)
    18b4:	601a      	str	r2, [r3, #0]
    channel_6_pwm = channel_6_fs;
    18b6:	4b10      	ldr	r3, [pc, #64]	; (18f8 <failSafe()+0xd4>)
    18b8:	681a      	ldr	r2, [r3, #0]
    18ba:	4b09      	ldr	r3, [pc, #36]	; (18e0 <failSafe()+0xbc>)
    18bc:	601a      	str	r2, [r3, #0]
		failureFlag = 1;
    18be:	4b02      	ldr	r3, [pc, #8]	; (18c8 <failSafe()+0xa4>)
    18c0:	2201      	movs	r2, #1
    18c2:	701a      	strb	r2, [r3, #0]
  }
}
    18c4:	4770      	bx	lr
    18c6:	bf00      	nop
    18c8:	20005301 	.word	0x20005301
    18cc:	20004f20 	.word	0x20004f20
    18d0:	20004f14 	.word	0x20004f14
    18d4:	20004f2c 	.word	0x20004f2c
    18d8:	20004f38 	.word	0x20004f38
    18dc:	20004f44 	.word	0x20004f44
    18e0:	20004f48 	.word	0x20004f48
    18e4:	20003908 	.word	0x20003908
    18e8:	2000390c 	.word	0x2000390c
    18ec:	20003910 	.word	0x20003910
    18f0:	20003914 	.word	0x20003914
    18f4:	20003918 	.word	0x20003918
    18f8:	2000391c 	.word	0x2000391c

000018fc <throttleCut()>:
   * Monitors the state of radio command channel_5_pwm and directly sets the mx_command_PWM values to minimum (120 is
   * minimum for oneshot125 protocol, 0 is minimum for standard PWM servo library used) if channel 5 is high. This is the last function 
   * called before commandMotors() is called so that the last thing checked is if the user is giving permission to command
   * the motors to anything other than minimum value. Safety first. 
   */
  if (channel_5_pwm > 1500) {
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <throttleCut()+0x2c>)
    18fe:	681a      	ldr	r2, [r3, #0]
    1900:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1904:	429a      	cmp	r2, r3
    1906:	dd0e      	ble.n	1926 <throttleCut()+0x2a>
    // m4_command_PWM = 120;
    // m5_command_PWM = 120;
    // m6_command_PWM = 120;
    
    //Uncomment if using servo PWM variables to control motor ESCs
    s1_command_PWM = 0;
    1908:	2300      	movs	r3, #0
    190a:	4a08      	ldr	r2, [pc, #32]	; (192c <throttleCut()+0x30>)
    190c:	6013      	str	r3, [r2, #0]
    s2_command_PWM = 0;
    190e:	4a08      	ldr	r2, [pc, #32]	; (1930 <throttleCut()+0x34>)
    1910:	6013      	str	r3, [r2, #0]
    s3_command_PWM = 0;
    1912:	4a08      	ldr	r2, [pc, #32]	; (1934 <throttleCut()+0x38>)
    1914:	6013      	str	r3, [r2, #0]
    s4_command_PWM = 0;
    1916:	4a08      	ldr	r2, [pc, #32]	; (1938 <throttleCut()+0x3c>)
    1918:	6013      	str	r3, [r2, #0]
    s5_command_PWM = 0;
    191a:	4a08      	ldr	r2, [pc, #32]	; (193c <throttleCut()+0x40>)
    191c:	6013      	str	r3, [r2, #0]
    s6_command_PWM = 0;
    191e:	4a08      	ldr	r2, [pc, #32]	; (1940 <throttleCut()+0x44>)
    1920:	6013      	str	r3, [r2, #0]
    s7_command_PWM = 0;
    1922:	4a08      	ldr	r2, [pc, #32]	; (1944 <throttleCut()+0x48>)
    1924:	6013      	str	r3, [r2, #0]
  }
}
    1926:	4770      	bx	lr
    1928:	20004f44 	.word	0x20004f44
    192c:	200050e4 	.word	0x200050e4
    1930:	200050ec 	.word	0x200050ec
    1934:	200050f4 	.word	0x200050f4
    1938:	200050fc 	.word	0x200050fc
    193c:	20005104 	.word	0x20005104
    1940:	2000510c 	.word	0x2000510c
    1944:	20005114 	.word	0x20005114

00001948 <loopRate(int)>:
  #endif
  Serial.println("Error: MPU9250 not selected. Cannot calibrate non-existent magnetometer.");
  while(1); //Halt code so it won't enter main loop until this function commented out
}

void loopRate(int freq) {
    1948:	b510      	push	{r4, lr}
    194a:	ed2d 8b02 	vpush	{d8}
    194e:	ee06 0a10 	vmov	s12, r0
   * background cause the loop rate to fluctuate. This function basically just waits at the end of every loop iteration until 
   * the correct time has passed since the start of the current loop for the desired loop rate in Hz. 2kHz is a good rate to 
   * be at because the loop nominally will run between 2.8kHz - 4.2kHz. This lets us have a little room to add extra computations
   * and remain above 2kHz, without needing to retune all of our filtering parameters.
   */
  float invFreq = 1.0/freq*1000000.0;
    1952:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1956:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    195a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    195e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 19a8 <loopRate(int)+0x60>
    1962:	ee27 7b06 	vmul.f64	d7, d7, d6
    1966:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  unsigned long checker = micros();
    196a:	f00b fa1b 	bl	cda4 <micros>
  
  //Sit in loop until appropriate time has passed
  while (invFreq > (checker - current_time)) {
    196e:	4b10      	ldr	r3, [pc, #64]	; (19b0 <loopRate(int)+0x68>)
    1970:	681b      	ldr	r3, [r3, #0]
    1972:	1ac0      	subs	r0, r0, r3
    1974:	ee07 0a90 	vmov	s15, r0
    1978:	eef8 7a67 	vcvt.f32.u32	s15, s15
    197c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1984:	dd0d      	ble.n	19a2 <loopRate(int)+0x5a>
    1986:	4c0a      	ldr	r4, [pc, #40]	; (19b0 <loopRate(int)+0x68>)
    checker = micros();
    1988:	f00b fa0c 	bl	cda4 <micros>
  while (invFreq > (checker - current_time)) {
    198c:	6823      	ldr	r3, [r4, #0]
    198e:	1ac0      	subs	r0, r0, r3
    1990:	ee07 0a90 	vmov	s15, r0
    1994:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1998:	eef4 7ac8 	vcmpe.f32	s15, s16
    199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    19a0:	d4f2      	bmi.n	1988 <loopRate(int)+0x40>
  }
}
    19a2:	ecbd 8b02 	vpop	{d8}
    19a6:	bd10      	pop	{r4, pc}
    19a8:	00000000 	.word	0x00000000
    19ac:	412e8480 	.word	0x412e8480
    19b0:	20004f58 	.word	0x20004f58

000019b4 <loopBlink()>:
void loopBlink() {
  //DESCRIPTION: Blink LED on board to indicate main loop is running
  /*
   * It looks cool.
   */
  if (current_time - blink_counter > blink_delay) {
    19b4:	4b11      	ldr	r3, [pc, #68]	; (19fc <loopBlink()+0x48>)
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	4a11      	ldr	r2, [pc, #68]	; (1a00 <loopBlink()+0x4c>)
    19ba:	6812      	ldr	r2, [r2, #0]
    19bc:	1a9b      	subs	r3, r3, r2
    19be:	4a11      	ldr	r2, [pc, #68]	; (1a04 <loopBlink()+0x50>)
    19c0:	6812      	ldr	r2, [r2, #0]
    19c2:	4293      	cmp	r3, r2
    19c4:	d800      	bhi.n	19c8 <loopBlink()+0x14>
    19c6:	4770      	bx	lr
void loopBlink() {
    19c8:	b510      	push	{r4, lr}
    blink_counter = micros();
    19ca:	f00b f9eb 	bl	cda4 <micros>
    19ce:	4b0c      	ldr	r3, [pc, #48]	; (1a00 <loopBlink()+0x4c>)
    19d0:	6018      	str	r0, [r3, #0]
    digitalWrite(13, blinkAlternate); //Pin 13 is built in LED
    19d2:	4c0d      	ldr	r4, [pc, #52]	; (1a08 <loopBlink()+0x54>)
    19d4:	7821      	ldrb	r1, [r4, #0]
    19d6:	200d      	movs	r0, #13
    19d8:	f00b fa24 	bl	ce24 <digitalWrite>
    
    if (blinkAlternate == 1) {
    19dc:	7823      	ldrb	r3, [r4, #0]
    19de:	b12b      	cbz	r3, 19ec <loopBlink()+0x38>
      blinkAlternate = 0;
    19e0:	2200      	movs	r2, #0
    19e2:	7022      	strb	r2, [r4, #0]
      blink_delay = 100000;
    19e4:	4b07      	ldr	r3, [pc, #28]	; (1a04 <loopBlink()+0x50>)
    19e6:	4a09      	ldr	r2, [pc, #36]	; (1a0c <loopBlink()+0x58>)
    19e8:	601a      	str	r2, [r3, #0]
    else if (blinkAlternate == 0) {
      blinkAlternate = 1;
      blink_delay = 2000000;
      }
  }
}
    19ea:	bd10      	pop	{r4, pc}
      blinkAlternate = 1;
    19ec:	4b06      	ldr	r3, [pc, #24]	; (1a08 <loopBlink()+0x54>)
    19ee:	2201      	movs	r2, #1
    19f0:	701a      	strb	r2, [r3, #0]
      blink_delay = 2000000;
    19f2:	4b04      	ldr	r3, [pc, #16]	; (1a04 <loopBlink()+0x50>)
    19f4:	4a06      	ldr	r2, [pc, #24]	; (1a10 <loopBlink()+0x5c>)
    19f6:	601a      	str	r2, [r3, #0]
}
    19f8:	e7f7      	b.n	19ea <loopBlink()+0x36>
    19fa:	bf00      	nop
    19fc:	20004f58 	.word	0x20004f58
    1a00:	20004eec 	.word	0x20004eec
    1a04:	20004ef0 	.word	0x20004ef0
    1a08:	200052fc 	.word	0x200052fc
    1a0c:	000186a0 	.word	0x000186a0
    1a10:	001e8480 	.word	0x001e8480

00001a14 <setupBlink(int, int, int)>:

void setupBlink(int numBlinks,int upTime, int downTime) {
    1a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //DESCRIPTION: Simple function to make LED on board blink as desired
  for (int j = 1; j<= numBlinks; j++) {
    1a18:	1e06      	subs	r6, r0, #0
    1a1a:	dd17      	ble.n	1a4c <setupBlink(int, int, int)+0x38>
    1a1c:	460f      	mov	r7, r1
    1a1e:	4690      	mov	r8, r2
    1a20:	2401      	movs	r4, #1
    digitalWrite(13, LOW);
    1a22:	f04f 0a00 	mov.w	sl, #0
    1a26:	250d      	movs	r5, #13
    delay(downTime);
    digitalWrite(13, HIGH);
    1a28:	46a1      	mov	r9, r4
    digitalWrite(13, LOW);
    1a2a:	4651      	mov	r1, sl
    1a2c:	4628      	mov	r0, r5
    1a2e:	f00b f9f9 	bl	ce24 <digitalWrite>
    delay(downTime);
    1a32:	4640      	mov	r0, r8
    1a34:	f00b f9e0 	bl	cdf8 <delay>
    digitalWrite(13, HIGH);
    1a38:	4649      	mov	r1, r9
    1a3a:	4628      	mov	r0, r5
    1a3c:	f00b f9f2 	bl	ce24 <digitalWrite>
    delay(upTime);
    1a40:	4638      	mov	r0, r7
    1a42:	f00b f9d9 	bl	cdf8 <delay>
  for (int j = 1; j<= numBlinks; j++) {
    1a46:	3401      	adds	r4, #1
    1a48:	42a6      	cmp	r6, r4
    1a4a:	daee      	bge.n	1a2a <setupBlink(int, int, int)+0x16>
  }
}
    1a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001a50 <getJoyAngle()>:
    Serial.print(F("dt = "));
    Serial.println(dt*1000000.0);
  }
}

void getJoyAngle() {
    1a50:	b510      	push	{r4, lr}
	// Read the raw analog values (0 to 1023)
	alphaCounts = analogRead(joyAlphaPin);
    1a52:	2029      	movs	r0, #41	; 0x29
    1a54:	f00b f80a 	bl	ca6c <analogRead>
    1a58:	4c37      	ldr	r4, [pc, #220]	; (1b38 <getJoyAngle()+0xe8>)
    1a5a:	6020      	str	r0, [r4, #0]
	betaCounts = analogRead(joyBetaPin);
    1a5c:	2028      	movs	r0, #40	; 0x28
    1a5e:	f00b f805 	bl	ca6c <analogRead>
    1a62:	4b36      	ldr	r3, [pc, #216]	; (1b3c <getJoyAngle()+0xec>)
    1a64:	6018      	str	r0, [r3, #0]
	// Full range of analog input based on calibration
	float FR_alpha = alphaCounts_max - alphaCounts_min;
    1a66:	4b36      	ldr	r3, [pc, #216]	; (1b40 <getJoyAngle()+0xf0>)
    1a68:	681a      	ldr	r2, [r3, #0]
    1a6a:	4b36      	ldr	r3, [pc, #216]	; (1b44 <getJoyAngle()+0xf4>)
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	1a9b      	subs	r3, r3, r2
    1a70:	ee07 3a90 	vmov	s15, r3
    1a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float FR_beta = betaCounts_max - alphaCounts_min;
    1a78:	4b33      	ldr	r3, [pc, #204]	; (1b48 <getJoyAngle()+0xf8>)
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	1a9b      	subs	r3, r3, r2
    1a7e:	ee07 3a90 	vmov	s15, r3
    1a82:	eeb8 6ae7 	vcvt.f32.s32	s12, s15

	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_min -
    1a86:	edd4 7a00 	vldr	s15, [r4]
    1a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1a8e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    1a92:	ee67 6a25 	vmul.f32	s13, s14, s11
    1a96:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1a9a:	ee06 2a90 	vmov	s13, r2
    1a9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1aa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1aa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    1aaa:	4b28      	ldr	r3, [pc, #160]	; (1b4c <getJoyAngle()+0xfc>)
    1aac:	edd3 7a00 	vldr	s15, [r3]
    1ab0:	4b27      	ldr	r3, [pc, #156]	; (1b50 <getJoyAngle()+0x100>)
    1ab2:	ed93 7a00 	vldr	s14, [r3]
    1ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1aba:	ee66 6aa7 	vmul.f32	s13, s13, s15
		alpha_max) + alphaOffset;
    1abe:	4b25      	ldr	r3, [pc, #148]	; (1b54 <getJoyAngle()+0x104>)
    1ac0:	edd3 7a00 	vldr	s15, [r3]
    1ac4:	ee76 6aa7 	vadd.f32	s13, s13, s15
	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_min -
    1ac8:	4b23      	ldr	r3, [pc, #140]	; (1b58 <getJoyAngle()+0x108>)
    1aca:	edc3 6a00 	vstr	s13, [r3]
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    1ace:	ee07 0a90 	vmov	s15, r0
    1ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1ad6:	ee66 5a25 	vmul.f32	s11, s12, s11
    1ada:	ee77 7ae5 	vsub.f32	s15, s15, s11
    1ade:	4b1f      	ldr	r3, [pc, #124]	; (1b5c <getJoyAngle()+0x10c>)
    1ae0:	ed93 7a00 	vldr	s14, [r3]
    1ae4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1aec:	ee87 7a86 	vdiv.f32	s14, s15, s12
    1af0:	4b1b      	ldr	r3, [pc, #108]	; (1b60 <getJoyAngle()+0x110>)
    1af2:	edd3 7a00 	vldr	s15, [r3]
    1af6:	4b1b      	ldr	r3, [pc, #108]	; (1b64 <getJoyAngle()+0x114>)
    1af8:	ed93 6a00 	vldr	s12, [r3]
    1afc:	ee77 7ac6 	vsub.f32	s15, s15, s12
    1b00:	ee67 7a27 	vmul.f32	s15, s14, s15
		beta_max) + betaOffset;
    1b04:	4b18      	ldr	r3, [pc, #96]	; (1b68 <getJoyAngle()+0x118>)
    1b06:	ed93 7a00 	vldr	s14, [r3]
    1b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    1b0e:	4b17      	ldr	r3, [pc, #92]	; (1b6c <getJoyAngle()+0x11c>)
    1b10:	edc3 7a00 	vstr	s15, [r3]

	// Determine alpha and pitch in the inertial frame
	alphaRoll = alpha + roll_IMU;
    1b14:	4b16      	ldr	r3, [pc, #88]	; (1b70 <getJoyAngle()+0x120>)
    1b16:	ed93 7a00 	vldr	s14, [r3]
    1b1a:	ee37 7a26 	vadd.f32	s14, s14, s13
    1b1e:	4b15      	ldr	r3, [pc, #84]	; (1b74 <getJoyAngle()+0x124>)
    1b20:	ed83 7a00 	vstr	s14, [r3]
	betaPitch = beta + pitch_IMU;
    1b24:	4b14      	ldr	r3, [pc, #80]	; (1b78 <getJoyAngle()+0x128>)
    1b26:	ed93 7a00 	vldr	s14, [r3]
    1b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
    1b2e:	4b13      	ldr	r3, [pc, #76]	; (1b7c <getJoyAngle()+0x12c>)
    1b30:	edc3 7a00 	vstr	s15, [r3]
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	bf00      	nop
    1b38:	20004ec8 	.word	0x20004ec8
    1b3c:	20004edc 	.word	0x20004edc
    1b40:	200038d8 	.word	0x200038d8
    1b44:	200038d4 	.word	0x200038d4
    1b48:	200038e8 	.word	0x200038e8
    1b4c:	200038e0 	.word	0x200038e0
    1b50:	200038dc 	.word	0x200038dc
    1b54:	20004ecc 	.word	0x20004ecc
    1b58:	20004ec4 	.word	0x20004ec4
    1b5c:	200038ec 	.word	0x200038ec
    1b60:	200038f4 	.word	0x200038f4
    1b64:	200038f0 	.word	0x200038f0
    1b68:	20004ee0 	.word	0x20004ee0
    1b6c:	20004ed8 	.word	0x20004ed8
    1b70:	200050a4 	.word	0x200050a4
    1b74:	20004ed0 	.word	0x20004ed0
    1b78:	2000507c 	.word	0x2000507c
    1b7c:	20004ee4 	.word	0x20004ee4

00001b80 <openIris()>:

void openIris() {
    1b80:	b508      	push	{r3, lr}
	iris.write(60);
    1b82:	213c      	movs	r1, #60	; 0x3c
    1b84:	4803      	ldr	r0, [pc, #12]	; (1b94 <openIris()+0x14>)
    1b86:	f002 ffb7 	bl	4af8 <PWMServo::write(int)>
	servoLoopCounter = 0;
    1b8a:	4b03      	ldr	r3, [pc, #12]	; (1b98 <openIris()+0x18>)
    1b8c:	2200      	movs	r2, #0
    1b8e:	601a      	str	r2, [r3, #0]
}
    1b90:	bd08      	pop	{r3, pc}
    1b92:	bf00      	nop
    1b94:	20005050 	.word	0x20005050
    1b98:	200052ac 	.word	0x200052ac

00001b9c <closeIris()>:

void closeIris() {
    1b9c:	b508      	push	{r3, lr}
	if (servoLoopCounter < 500) {
    1b9e:	4b09      	ldr	r3, [pc, #36]	; (1bc4 <closeIris()+0x28>)
    1ba0:	681b      	ldr	r3, [r3, #0]
    1ba2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1ba6:	da08      	bge.n	1bba <closeIris()+0x1e>
		iris.write(140);
    1ba8:	218c      	movs	r1, #140	; 0x8c
    1baa:	4807      	ldr	r0, [pc, #28]	; (1bc8 <closeIris()+0x2c>)
    1bac:	f002 ffa4 	bl	4af8 <PWMServo::write(int)>
		servoLoopCounter++;
    1bb0:	4a04      	ldr	r2, [pc, #16]	; (1bc4 <closeIris()+0x28>)
    1bb2:	6813      	ldr	r3, [r2, #0]
    1bb4:	3301      	adds	r3, #1
    1bb6:	6013      	str	r3, [r2, #0]
	} else {
		iris.write(137); // Open it slightly more to ease strain on the servo
	}
}
    1bb8:	bd08      	pop	{r3, pc}
		iris.write(137); // Open it slightly more to ease strain on the servo
    1bba:	2189      	movs	r1, #137	; 0x89
    1bbc:	4802      	ldr	r0, [pc, #8]	; (1bc8 <closeIris()+0x2c>)
    1bbe:	f002 ff9b 	bl	4af8 <PWMServo::write(int)>
}
    1bc2:	e7f9      	b.n	1bb8 <closeIris()+0x1c>
    1bc4:	200052ac 	.word	0x200052ac
    1bc8:	20005050 	.word	0x20005050

00001bcc <getDataString()>:
		Serial.print(" ");
		Serial.println(beta + pitch_IMU);
	}
}

String getDataString() {
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
    1bd2:	4605      	mov	r5, r0
	String csvDataString;
    1bd4:	2100      	movs	r1, #0
    1bd6:	f00a fe64 	bl	c8a2 <String::String(char const*)>
	csvDataString = String(roll_IMU)
    1bda:	2102      	movs	r1, #2
    1bdc:	4bcc      	ldr	r3, [pc, #816]	; (1f10 <getDataString()+0x344>)
    1bde:	ed93 0a00 	vldr	s0, [r3]
    1be2:	a804      	add	r0, sp, #16
    1be4:	f00a fec6 	bl	c974 <String::String(float, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1be8:	a904      	add	r1, sp, #16
    1bea:	4668      	mov	r0, sp
    1bec:	f00a fe8b 	bl	c906 <String::String(String const&)>
									+ ","
    1bf0:	4cc8      	ldr	r4, [pc, #800]	; (1f14 <getDataString()+0x348>)
    1bf2:	4621      	mov	r1, r4
    1bf4:	4668      	mov	r0, sp
    1bf6:	f00a ff11 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1bfa:	4606      	mov	r6, r0
									+ String(pitch_IMU)
    1bfc:	2102      	movs	r1, #2
    1bfe:	4bc6      	ldr	r3, [pc, #792]	; (1f18 <getDataString()+0x34c>)
    1c00:	ed93 0a00 	vldr	s0, [r3]
    1c04:	a808      	add	r0, sp, #32
    1c06:	f00a feb5 	bl	c974 <String::String(float, unsigned char)>
    1c0a:	a908      	add	r1, sp, #32
    1c0c:	4630      	mov	r0, r6
    1c0e:	f00a fefd 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1c12:	4621      	mov	r1, r4
    1c14:	f00a ff02 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1c18:	4606      	mov	r6, r0
									+ String(yaw_IMU)
    1c1a:	2102      	movs	r1, #2
    1c1c:	4bbf      	ldr	r3, [pc, #764]	; (1f1c <getDataString()+0x350>)
    1c1e:	ed93 0a00 	vldr	s0, [r3]
    1c22:	a80c      	add	r0, sp, #48	; 0x30
    1c24:	f00a fea6 	bl	c974 <String::String(float, unsigned char)>
    1c28:	a90c      	add	r1, sp, #48	; 0x30
    1c2a:	4630      	mov	r0, r6
    1c2c:	f00a feee 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1c30:	4621      	mov	r1, r4
    1c32:	f00a fef3 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1c36:	4606      	mov	r6, r0
									+ String(alpha)
    1c38:	2102      	movs	r1, #2
    1c3a:	4bb9      	ldr	r3, [pc, #740]	; (1f20 <getDataString()+0x354>)
    1c3c:	ed93 0a00 	vldr	s0, [r3]
    1c40:	a810      	add	r0, sp, #64	; 0x40
    1c42:	f00a fe97 	bl	c974 <String::String(float, unsigned char)>
    1c46:	a910      	add	r1, sp, #64	; 0x40
    1c48:	4630      	mov	r0, r6
    1c4a:	f00a fedf 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1c4e:	4621      	mov	r1, r4
    1c50:	f00a fee4 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1c54:	4606      	mov	r6, r0
									+ String(beta)
    1c56:	2102      	movs	r1, #2
    1c58:	4bb2      	ldr	r3, [pc, #712]	; (1f24 <getDataString()+0x358>)
    1c5a:	ed93 0a00 	vldr	s0, [r3]
    1c5e:	a814      	add	r0, sp, #80	; 0x50
    1c60:	f00a fe88 	bl	c974 <String::String(float, unsigned char)>
    1c64:	a914      	add	r1, sp, #80	; 0x50
    1c66:	4630      	mov	r0, r6
    1c68:	f00a fed0 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1c6c:	4621      	mov	r1, r4
    1c6e:	f00a fed5 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1c72:	4606      	mov	r6, r0
									+ String(roll_des)
    1c74:	2102      	movs	r1, #2
    1c76:	4bac      	ldr	r3, [pc, #688]	; (1f28 <getDataString()+0x35c>)
    1c78:	ed93 0a00 	vldr	s0, [r3]
    1c7c:	a818      	add	r0, sp, #96	; 0x60
    1c7e:	f00a fe79 	bl	c974 <String::String(float, unsigned char)>
    1c82:	a918      	add	r1, sp, #96	; 0x60
    1c84:	4630      	mov	r0, r6
    1c86:	f00a fec1 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1c8a:	4621      	mov	r1, r4
    1c8c:	f00a fec6 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1c90:	4606      	mov	r6, r0
									+ String(pitch_des)
    1c92:	2102      	movs	r1, #2
    1c94:	4ba5      	ldr	r3, [pc, #660]	; (1f2c <getDataString()+0x360>)
    1c96:	ed93 0a00 	vldr	s0, [r3]
    1c9a:	a81c      	add	r0, sp, #112	; 0x70
    1c9c:	f00a fe6a 	bl	c974 <String::String(float, unsigned char)>
    1ca0:	a91c      	add	r1, sp, #112	; 0x70
    1ca2:	4630      	mov	r0, r6
    1ca4:	f00a feb2 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ca8:	4621      	mov	r1, r4
    1caa:	f00a feb7 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1cae:	4606      	mov	r6, r0
									+ String(yaw_des)
    1cb0:	2102      	movs	r1, #2
    1cb2:	4b9f      	ldr	r3, [pc, #636]	; (1f30 <getDataString()+0x364>)
    1cb4:	ed93 0a00 	vldr	s0, [r3]
    1cb8:	a820      	add	r0, sp, #128	; 0x80
    1cba:	f00a fe5b 	bl	c974 <String::String(float, unsigned char)>
    1cbe:	a920      	add	r1, sp, #128	; 0x80
    1cc0:	4630      	mov	r0, r6
    1cc2:	f00a fea3 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1cc6:	4621      	mov	r1, r4
    1cc8:	f00a fea8 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1ccc:	4606      	mov	r6, r0
									+ String(thro_des)
    1cce:	2102      	movs	r1, #2
    1cd0:	4b98      	ldr	r3, [pc, #608]	; (1f34 <getDataString()+0x368>)
    1cd2:	ed93 0a00 	vldr	s0, [r3]
    1cd6:	a824      	add	r0, sp, #144	; 0x90
    1cd8:	f00a fe4c 	bl	c974 <String::String(float, unsigned char)>
    1cdc:	a924      	add	r1, sp, #144	; 0x90
    1cde:	4630      	mov	r0, r6
    1ce0:	f00a fe94 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ce4:	4621      	mov	r1, r4
    1ce6:	f00a fe99 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1cea:	4606      	mov	r6, r0
									+ String(roll_PID)
    1cec:	2102      	movs	r1, #2
    1cee:	4b92      	ldr	r3, [pc, #584]	; (1f38 <getDataString()+0x36c>)
    1cf0:	ed93 0a00 	vldr	s0, [r3]
    1cf4:	a828      	add	r0, sp, #160	; 0xa0
    1cf6:	f00a fe3d 	bl	c974 <String::String(float, unsigned char)>
    1cfa:	a928      	add	r1, sp, #160	; 0xa0
    1cfc:	4630      	mov	r0, r6
    1cfe:	f00a fe85 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d02:	4621      	mov	r1, r4
    1d04:	f00a fe8a 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1d08:	4606      	mov	r6, r0
									+ String(pitch_PID)
    1d0a:	2102      	movs	r1, #2
    1d0c:	4b8b      	ldr	r3, [pc, #556]	; (1f3c <getDataString()+0x370>)
    1d0e:	ed93 0a00 	vldr	s0, [r3]
    1d12:	a82c      	add	r0, sp, #176	; 0xb0
    1d14:	f00a fe2e 	bl	c974 <String::String(float, unsigned char)>
    1d18:	a92c      	add	r1, sp, #176	; 0xb0
    1d1a:	4630      	mov	r0, r6
    1d1c:	f00a fe76 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d20:	4621      	mov	r1, r4
    1d22:	f00a fe7b 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1d26:	4606      	mov	r6, r0
									+ String(yaw_PID)
    1d28:	2102      	movs	r1, #2
    1d2a:	4b85      	ldr	r3, [pc, #532]	; (1f40 <getDataString()+0x374>)
    1d2c:	ed93 0a00 	vldr	s0, [r3]
    1d30:	a830      	add	r0, sp, #192	; 0xc0
    1d32:	f00a fe1f 	bl	c974 <String::String(float, unsigned char)>
    1d36:	a930      	add	r1, sp, #192	; 0xc0
    1d38:	4630      	mov	r0, r6
    1d3a:	f00a fe67 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d3e:	4621      	mov	r1, r4
    1d40:	f00a fe6c 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1d44:	4606      	mov	r6, r0
									+ String(channel_1_pwm)
    1d46:	220a      	movs	r2, #10
    1d48:	4b7e      	ldr	r3, [pc, #504]	; (1f44 <getDataString()+0x378>)
    1d4a:	6819      	ldr	r1, [r3, #0]
    1d4c:	a834      	add	r0, sp, #208	; 0xd0
    1d4e:	f00a fdfe 	bl	c94e <String::String(int, unsigned char)>
    1d52:	a934      	add	r1, sp, #208	; 0xd0
    1d54:	4630      	mov	r0, r6
    1d56:	f00a fe59 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d5a:	4621      	mov	r1, r4
    1d5c:	f00a fe5e 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1d60:	4606      	mov	r6, r0
									+ String(channel_2_pwm)
    1d62:	220a      	movs	r2, #10
    1d64:	4b78      	ldr	r3, [pc, #480]	; (1f48 <getDataString()+0x37c>)
    1d66:	6819      	ldr	r1, [r3, #0]
    1d68:	a838      	add	r0, sp, #224	; 0xe0
    1d6a:	f00a fdf0 	bl	c94e <String::String(int, unsigned char)>
    1d6e:	a938      	add	r1, sp, #224	; 0xe0
    1d70:	4630      	mov	r0, r6
    1d72:	f00a fe4b 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d76:	4621      	mov	r1, r4
    1d78:	f00a fe50 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1d7c:	4606      	mov	r6, r0
									+ String(channel_3_pwm)
    1d7e:	220a      	movs	r2, #10
    1d80:	4b72      	ldr	r3, [pc, #456]	; (1f4c <getDataString()+0x380>)
    1d82:	6819      	ldr	r1, [r3, #0]
    1d84:	a83c      	add	r0, sp, #240	; 0xf0
    1d86:	f00a fde2 	bl	c94e <String::String(int, unsigned char)>
    1d8a:	a93c      	add	r1, sp, #240	; 0xf0
    1d8c:	4630      	mov	r0, r6
    1d8e:	f00a fe3d 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d92:	4621      	mov	r1, r4
    1d94:	f00a fe42 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1d98:	4606      	mov	r6, r0
									+ String(channel_4_pwm)
    1d9a:	220a      	movs	r2, #10
    1d9c:	4b6c      	ldr	r3, [pc, #432]	; (1f50 <getDataString()+0x384>)
    1d9e:	6819      	ldr	r1, [r3, #0]
    1da0:	a840      	add	r0, sp, #256	; 0x100
    1da2:	f00a fdd4 	bl	c94e <String::String(int, unsigned char)>
    1da6:	a940      	add	r1, sp, #256	; 0x100
    1da8:	4630      	mov	r0, r6
    1daa:	f00a fe2f 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1dae:	4621      	mov	r1, r4
    1db0:	f00a fe34 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1db4:	4606      	mov	r6, r0
									+ String(channel_5_pwm)
    1db6:	220a      	movs	r2, #10
    1db8:	4b66      	ldr	r3, [pc, #408]	; (1f54 <getDataString()+0x388>)
    1dba:	6819      	ldr	r1, [r3, #0]
    1dbc:	a844      	add	r0, sp, #272	; 0x110
    1dbe:	f00a fdc6 	bl	c94e <String::String(int, unsigned char)>
    1dc2:	a944      	add	r1, sp, #272	; 0x110
    1dc4:	4630      	mov	r0, r6
    1dc6:	f00a fe21 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1dca:	4621      	mov	r1, r4
    1dcc:	f00a fe26 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1dd0:	4606      	mov	r6, r0
									+ String(channel_6_pwm)
    1dd2:	220a      	movs	r2, #10
    1dd4:	4b60      	ldr	r3, [pc, #384]	; (1f58 <getDataString()+0x38c>)
    1dd6:	6819      	ldr	r1, [r3, #0]
    1dd8:	a848      	add	r0, sp, #288	; 0x120
    1dda:	f00a fdb8 	bl	c94e <String::String(int, unsigned char)>
    1dde:	a948      	add	r1, sp, #288	; 0x120
    1de0:	4630      	mov	r0, r6
    1de2:	f00a fe13 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1de6:	4621      	mov	r1, r4
    1de8:	f00a fe18 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1dec:	4606      	mov	r6, r0
									+ String(channel_7_pwm)
    1dee:	220a      	movs	r2, #10
    1df0:	4b5a      	ldr	r3, [pc, #360]	; (1f5c <getDataString()+0x390>)
    1df2:	6819      	ldr	r1, [r3, #0]
    1df4:	a84c      	add	r0, sp, #304	; 0x130
    1df6:	f00a fdaa 	bl	c94e <String::String(int, unsigned char)>
    1dfa:	a94c      	add	r1, sp, #304	; 0x130
    1dfc:	4630      	mov	r0, r6
    1dfe:	f00a fe05 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e02:	4621      	mov	r1, r4
    1e04:	f00a fe0a 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1e08:	4606      	mov	r6, r0
									+ String(channel_8_pwm)
    1e0a:	220a      	movs	r2, #10
    1e0c:	4b54      	ldr	r3, [pc, #336]	; (1f60 <getDataString()+0x394>)
    1e0e:	6819      	ldr	r1, [r3, #0]
    1e10:	a850      	add	r0, sp, #320	; 0x140
    1e12:	f00a fd9c 	bl	c94e <String::String(int, unsigned char)>
    1e16:	a950      	add	r1, sp, #320	; 0x140
    1e18:	4630      	mov	r0, r6
    1e1a:	f00a fdf7 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e1e:	4621      	mov	r1, r4
    1e20:	f00a fdfc 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1e24:	4606      	mov	r6, r0
									+ String(channel_9_pwm)
    1e26:	220a      	movs	r2, #10
    1e28:	4b4e      	ldr	r3, [pc, #312]	; (1f64 <getDataString()+0x398>)
    1e2a:	6819      	ldr	r1, [r3, #0]
    1e2c:	a854      	add	r0, sp, #336	; 0x150
    1e2e:	f00a fd8e 	bl	c94e <String::String(int, unsigned char)>
    1e32:	a954      	add	r1, sp, #336	; 0x150
    1e34:	4630      	mov	r0, r6
    1e36:	f00a fde9 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e3a:	4621      	mov	r1, r4
    1e3c:	f00a fdee 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1e40:	4606      	mov	r6, r0
									+ String(channel_10_pwm)
    1e42:	220a      	movs	r2, #10
    1e44:	4b48      	ldr	r3, [pc, #288]	; (1f68 <getDataString()+0x39c>)
    1e46:	6819      	ldr	r1, [r3, #0]
    1e48:	a858      	add	r0, sp, #352	; 0x160
    1e4a:	f00a fd80 	bl	c94e <String::String(int, unsigned char)>
    1e4e:	a958      	add	r1, sp, #352	; 0x160
    1e50:	4630      	mov	r0, r6
    1e52:	f00a fddb 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e56:	4621      	mov	r1, r4
    1e58:	f00a fde0 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1e5c:	4606      	mov	r6, r0
									+ String(channel_11_pwm)
    1e5e:	220a      	movs	r2, #10
    1e60:	4b42      	ldr	r3, [pc, #264]	; (1f6c <getDataString()+0x3a0>)
    1e62:	6819      	ldr	r1, [r3, #0]
    1e64:	a85c      	add	r0, sp, #368	; 0x170
    1e66:	f00a fd72 	bl	c94e <String::String(int, unsigned char)>
    1e6a:	a95c      	add	r1, sp, #368	; 0x170
    1e6c:	4630      	mov	r0, r6
    1e6e:	f00a fdcd 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e72:	4621      	mov	r1, r4
    1e74:	f00a fdd2 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1e78:	4606      	mov	r6, r0
									+ String(channel_12_pwm)
    1e7a:	220a      	movs	r2, #10
    1e7c:	4b3c      	ldr	r3, [pc, #240]	; (1f70 <getDataString()+0x3a4>)
    1e7e:	6819      	ldr	r1, [r3, #0]
    1e80:	a860      	add	r0, sp, #384	; 0x180
    1e82:	f00a fd64 	bl	c94e <String::String(int, unsigned char)>
    1e86:	a960      	add	r1, sp, #384	; 0x180
    1e88:	4630      	mov	r0, r6
    1e8a:	f00a fdbf 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e8e:	4621      	mov	r1, r4
    1e90:	f00a fdc4 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1e94:	4606      	mov	r6, r0
									+ String(channel_13_pwm)
    1e96:	220a      	movs	r2, #10
    1e98:	4b36      	ldr	r3, [pc, #216]	; (1f74 <getDataString()+0x3a8>)
    1e9a:	6819      	ldr	r1, [r3, #0]
    1e9c:	a864      	add	r0, sp, #400	; 0x190
    1e9e:	f00a fd56 	bl	c94e <String::String(int, unsigned char)>
    1ea2:	a964      	add	r1, sp, #400	; 0x190
    1ea4:	4630      	mov	r0, r6
    1ea6:	f00a fdb1 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1eaa:	4621      	mov	r1, r4
    1eac:	f00a fdb6 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1eb0:	4606      	mov	r6, r0
									+ String(GyroX)
    1eb2:	2102      	movs	r1, #2
    1eb4:	4b30      	ldr	r3, [pc, #192]	; (1f78 <getDataString()+0x3ac>)
    1eb6:	ed93 0a00 	vldr	s0, [r3]
    1eba:	a868      	add	r0, sp, #416	; 0x1a0
    1ebc:	f00a fd5a 	bl	c974 <String::String(float, unsigned char)>
    1ec0:	a968      	add	r1, sp, #416	; 0x1a0
    1ec2:	4630      	mov	r0, r6
    1ec4:	f00a fda2 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ec8:	4621      	mov	r1, r4
    1eca:	f00a fda7 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1ece:	4606      	mov	r6, r0
									+ String(GyroY)
    1ed0:	2102      	movs	r1, #2
    1ed2:	4b2a      	ldr	r3, [pc, #168]	; (1f7c <getDataString()+0x3b0>)
    1ed4:	ed93 0a00 	vldr	s0, [r3]
    1ed8:	a86c      	add	r0, sp, #432	; 0x1b0
    1eda:	f00a fd4b 	bl	c974 <String::String(float, unsigned char)>
    1ede:	a96c      	add	r1, sp, #432	; 0x1b0
    1ee0:	4630      	mov	r0, r6
    1ee2:	f00a fd93 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ee6:	4621      	mov	r1, r4
    1ee8:	f00a fd98 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1eec:	4606      	mov	r6, r0
									+ String(GyroZ)
    1eee:	2102      	movs	r1, #2
    1ef0:	4b23      	ldr	r3, [pc, #140]	; (1f80 <getDataString()+0x3b4>)
    1ef2:	ed93 0a00 	vldr	s0, [r3]
    1ef6:	a870      	add	r0, sp, #448	; 0x1c0
    1ef8:	f00a fd3c 	bl	c974 <String::String(float, unsigned char)>
    1efc:	a970      	add	r1, sp, #448	; 0x1c0
    1efe:	4630      	mov	r0, r6
    1f00:	f00a fd84 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f04:	4621      	mov	r1, r4
    1f06:	f00a fd89 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1f0a:	4606      	mov	r6, r0
									+ String(AccX)
    1f0c:	2102      	movs	r1, #2
    1f0e:	e039      	b.n	1f84 <getDataString()+0x3b8>
    1f10:	200050a4 	.word	0x200050a4
    1f14:	20001e1c 	.word	0x20001e1c
    1f18:	2000507c 	.word	0x2000507c
    1f1c:	200052dc 	.word	0x200052dc
    1f20:	20004ec4 	.word	0x20004ec4
    1f24:	20004ed8 	.word	0x20004ed8
    1f28:	200050ac 	.word	0x200050ac
    1f2c:	20005084 	.word	0x20005084
    1f30:	200052e4 	.word	0x200052e4
    1f34:	200052c4 	.word	0x200052c4
    1f38:	200050a8 	.word	0x200050a8
    1f3c:	20005080 	.word	0x20005080
    1f40:	200052e0 	.word	0x200052e0
    1f44:	20004f14 	.word	0x20004f14
    1f48:	20004f20 	.word	0x20004f20
    1f4c:	20004f2c 	.word	0x20004f2c
    1f50:	20004f38 	.word	0x20004f38
    1f54:	20004f44 	.word	0x20004f44
    1f58:	20004f48 	.word	0x20004f48
    1f5c:	20004f4c 	.word	0x20004f4c
    1f60:	20004f50 	.word	0x20004f50
    1f64:	20004f54 	.word	0x20004f54
    1f68:	20004f04 	.word	0x20004f04
    1f6c:	20004f08 	.word	0x20004f08
    1f70:	20004f0c 	.word	0x20004f0c
    1f74:	20004f10 	.word	0x20004f10
    1f78:	200040a0 	.word	0x200040a0
    1f7c:	200040a8 	.word	0x200040a8
    1f80:	200040b0 	.word	0x200040b0
    1f84:	4bcc      	ldr	r3, [pc, #816]	; (22b8 <getDataString()+0x6ec>)
    1f86:	ed93 0a00 	vldr	s0, [r3]
    1f8a:	a874      	add	r0, sp, #464	; 0x1d0
    1f8c:	f00a fcf2 	bl	c974 <String::String(float, unsigned char)>
    1f90:	a974      	add	r1, sp, #464	; 0x1d0
    1f92:	4630      	mov	r0, r6
    1f94:	f00a fd3a 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f98:	4621      	mov	r1, r4
    1f9a:	f00a fd3f 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1f9e:	4606      	mov	r6, r0
									+ String(AccY)
    1fa0:	2102      	movs	r1, #2
    1fa2:	4bc6      	ldr	r3, [pc, #792]	; (22bc <getDataString()+0x6f0>)
    1fa4:	ed93 0a00 	vldr	s0, [r3]
    1fa8:	a878      	add	r0, sp, #480	; 0x1e0
    1faa:	f00a fce3 	bl	c974 <String::String(float, unsigned char)>
    1fae:	a978      	add	r1, sp, #480	; 0x1e0
    1fb0:	4630      	mov	r0, r6
    1fb2:	f00a fd2b 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fb6:	4621      	mov	r1, r4
    1fb8:	f00a fd30 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1fbc:	4606      	mov	r6, r0
									+ String(AccZ)
    1fbe:	2102      	movs	r1, #2
    1fc0:	4bbf      	ldr	r3, [pc, #764]	; (22c0 <getDataString()+0x6f4>)
    1fc2:	ed93 0a00 	vldr	s0, [r3]
    1fc6:	a87c      	add	r0, sp, #496	; 0x1f0
    1fc8:	f00a fcd4 	bl	c974 <String::String(float, unsigned char)>
    1fcc:	a97c      	add	r1, sp, #496	; 0x1f0
    1fce:	4630      	mov	r0, r6
    1fd0:	f00a fd1c 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fd4:	4621      	mov	r1, r4
    1fd6:	f00a fd21 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1fda:	4606      	mov	r6, r0
									+ String(s1_command_scaled)
    1fdc:	2102      	movs	r1, #2
    1fde:	4bb9      	ldr	r3, [pc, #740]	; (22c4 <getDataString()+0x6f8>)
    1fe0:	ed93 0a00 	vldr	s0, [r3]
    1fe4:	a880      	add	r0, sp, #512	; 0x200
    1fe6:	f00a fcc5 	bl	c974 <String::String(float, unsigned char)>
    1fea:	a980      	add	r1, sp, #512	; 0x200
    1fec:	4630      	mov	r0, r6
    1fee:	f00a fd0d 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ff2:	4621      	mov	r1, r4
    1ff4:	f00a fd12 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    1ff8:	4606      	mov	r6, r0
									+ String(s2_command_scaled)
    1ffa:	2102      	movs	r1, #2
    1ffc:	4bb2      	ldr	r3, [pc, #712]	; (22c8 <getDataString()+0x6fc>)
    1ffe:	ed93 0a00 	vldr	s0, [r3]
    2002:	a884      	add	r0, sp, #528	; 0x210
    2004:	f00a fcb6 	bl	c974 <String::String(float, unsigned char)>
    2008:	a984      	add	r1, sp, #528	; 0x210
    200a:	4630      	mov	r0, r6
    200c:	f00a fcfe 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2010:	4621      	mov	r1, r4
    2012:	f00a fd03 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    2016:	4606      	mov	r6, r0
									+ String(s3_command_scaled)
    2018:	2102      	movs	r1, #2
    201a:	4bac      	ldr	r3, [pc, #688]	; (22cc <getDataString()+0x700>)
    201c:	ed93 0a00 	vldr	s0, [r3]
    2020:	a888      	add	r0, sp, #544	; 0x220
    2022:	f00a fca7 	bl	c974 <String::String(float, unsigned char)>
    2026:	a988      	add	r1, sp, #544	; 0x220
    2028:	4630      	mov	r0, r6
    202a:	f00a fcef 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    202e:	4621      	mov	r1, r4
    2030:	f00a fcf4 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    2034:	4606      	mov	r6, r0
									+ String(s4_command_scaled)
    2036:	2102      	movs	r1, #2
    2038:	4ba5      	ldr	r3, [pc, #660]	; (22d0 <getDataString()+0x704>)
    203a:	ed93 0a00 	vldr	s0, [r3]
    203e:	a88c      	add	r0, sp, #560	; 0x230
    2040:	f00a fc98 	bl	c974 <String::String(float, unsigned char)>
    2044:	a98c      	add	r1, sp, #560	; 0x230
    2046:	4630      	mov	r0, r6
    2048:	f00a fce0 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    204c:	4621      	mov	r1, r4
    204e:	f00a fce5 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    2052:	4606      	mov	r6, r0
									+ String(Kp_roll_angle*pScaleRoll)
    2054:	4b9f      	ldr	r3, [pc, #636]	; (22d4 <getDataString()+0x708>)
    2056:	ed93 0a00 	vldr	s0, [r3]
    205a:	4b9f      	ldr	r3, [pc, #636]	; (22d8 <getDataString()+0x70c>)
    205c:	edd3 7a00 	vldr	s15, [r3]
    2060:	2102      	movs	r1, #2
    2062:	ee20 0a27 	vmul.f32	s0, s0, s15
    2066:	a890      	add	r0, sp, #576	; 0x240
    2068:	f00a fc84 	bl	c974 <String::String(float, unsigned char)>
    206c:	a990      	add	r1, sp, #576	; 0x240
    206e:	4630      	mov	r0, r6
    2070:	f00a fccc 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2074:	4621      	mov	r1, r4
    2076:	f00a fcd1 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    207a:	4606      	mov	r6, r0
									+ String(Ki_roll_angle*iScaleRoll)
    207c:	4b97      	ldr	r3, [pc, #604]	; (22dc <getDataString()+0x710>)
    207e:	ed93 0a00 	vldr	s0, [r3]
    2082:	4b97      	ldr	r3, [pc, #604]	; (22e0 <getDataString()+0x714>)
    2084:	edd3 7a00 	vldr	s15, [r3]
    2088:	2102      	movs	r1, #2
    208a:	ee20 0a27 	vmul.f32	s0, s0, s15
    208e:	a894      	add	r0, sp, #592	; 0x250
    2090:	f00a fc70 	bl	c974 <String::String(float, unsigned char)>
    2094:	a994      	add	r1, sp, #592	; 0x250
    2096:	4630      	mov	r0, r6
    2098:	f00a fcb8 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    209c:	4621      	mov	r1, r4
    209e:	f00a fcbd 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    20a2:	4606      	mov	r6, r0
									+ String(Kd_roll_angle*dScaleRoll)	
    20a4:	4b8f      	ldr	r3, [pc, #572]	; (22e4 <getDataString()+0x718>)
    20a6:	ed93 0a00 	vldr	s0, [r3]
    20aa:	4b8f      	ldr	r3, [pc, #572]	; (22e8 <getDataString()+0x71c>)
    20ac:	edd3 7a00 	vldr	s15, [r3]
    20b0:	2102      	movs	r1, #2
    20b2:	ee20 0a27 	vmul.f32	s0, s0, s15
    20b6:	a898      	add	r0, sp, #608	; 0x260
    20b8:	f00a fc5c 	bl	c974 <String::String(float, unsigned char)>
    20bc:	a998      	add	r1, sp, #608	; 0x260
    20be:	4630      	mov	r0, r6
    20c0:	f00a fca4 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    20c4:	4621      	mov	r1, r4
    20c6:	f00a fca9 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    20ca:	4606      	mov	r6, r0
									+ String(Kp_pitch_angle*pScalePitch)
    20cc:	4b87      	ldr	r3, [pc, #540]	; (22ec <getDataString()+0x720>)
    20ce:	ed93 0a00 	vldr	s0, [r3]
    20d2:	4b87      	ldr	r3, [pc, #540]	; (22f0 <getDataString()+0x724>)
    20d4:	edd3 7a00 	vldr	s15, [r3]
    20d8:	2102      	movs	r1, #2
    20da:	ee20 0a27 	vmul.f32	s0, s0, s15
    20de:	a89c      	add	r0, sp, #624	; 0x270
    20e0:	f00a fc48 	bl	c974 <String::String(float, unsigned char)>
    20e4:	a99c      	add	r1, sp, #624	; 0x270
    20e6:	4630      	mov	r0, r6
    20e8:	f00a fc90 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    20ec:	4621      	mov	r1, r4
    20ee:	f00a fc95 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    20f2:	4606      	mov	r6, r0
									+ String(Ki_pitch_angle*iScalePitch)
    20f4:	4b7f      	ldr	r3, [pc, #508]	; (22f4 <getDataString()+0x728>)
    20f6:	ed93 0a00 	vldr	s0, [r3]
    20fa:	4b7f      	ldr	r3, [pc, #508]	; (22f8 <getDataString()+0x72c>)
    20fc:	edd3 7a00 	vldr	s15, [r3]
    2100:	2102      	movs	r1, #2
    2102:	ee20 0a27 	vmul.f32	s0, s0, s15
    2106:	a8a0      	add	r0, sp, #640	; 0x280
    2108:	f00a fc34 	bl	c974 <String::String(float, unsigned char)>
    210c:	a9a0      	add	r1, sp, #640	; 0x280
    210e:	4630      	mov	r0, r6
    2110:	f00a fc7c 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2114:	4621      	mov	r1, r4
    2116:	f00a fc81 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    211a:	4606      	mov	r6, r0
									+ String(Kd_pitch_angle*dScalePitch)	
    211c:	4b77      	ldr	r3, [pc, #476]	; (22fc <getDataString()+0x730>)
    211e:	ed93 0a00 	vldr	s0, [r3]
    2122:	4b77      	ldr	r3, [pc, #476]	; (2300 <getDataString()+0x734>)
    2124:	edd3 7a00 	vldr	s15, [r3]
    2128:	2102      	movs	r1, #2
    212a:	ee20 0a27 	vmul.f32	s0, s0, s15
    212e:	a8a4      	add	r0, sp, #656	; 0x290
    2130:	f00a fc20 	bl	c974 <String::String(float, unsigned char)>
    2134:	a9a4      	add	r1, sp, #656	; 0x290
    2136:	4630      	mov	r0, r6
    2138:	f00a fc68 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    213c:	4621      	mov	r1, r4
    213e:	f00a fc6d 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    2142:	4606      	mov	r6, r0
									+ String(Kp_yaw*pScaleYaw)
    2144:	4b6f      	ldr	r3, [pc, #444]	; (2304 <getDataString()+0x738>)
    2146:	ed93 0a00 	vldr	s0, [r3]
    214a:	4b6f      	ldr	r3, [pc, #444]	; (2308 <getDataString()+0x73c>)
    214c:	edd3 7a00 	vldr	s15, [r3]
    2150:	2102      	movs	r1, #2
    2152:	ee20 0a27 	vmul.f32	s0, s0, s15
    2156:	a8a8      	add	r0, sp, #672	; 0x2a0
    2158:	f00a fc0c 	bl	c974 <String::String(float, unsigned char)>
    215c:	a9a8      	add	r1, sp, #672	; 0x2a0
    215e:	4630      	mov	r0, r6
    2160:	f00a fc54 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2164:	4621      	mov	r1, r4
    2166:	f00a fc59 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    216a:	4606      	mov	r6, r0
									+ String(Ki_yaw*iScaleYaw)
    216c:	4b67      	ldr	r3, [pc, #412]	; (230c <getDataString()+0x740>)
    216e:	ed93 0a00 	vldr	s0, [r3]
    2172:	4b67      	ldr	r3, [pc, #412]	; (2310 <getDataString()+0x744>)
    2174:	edd3 7a00 	vldr	s15, [r3]
    2178:	2102      	movs	r1, #2
    217a:	ee20 0a27 	vmul.f32	s0, s0, s15
    217e:	a8ac      	add	r0, sp, #688	; 0x2b0
    2180:	f00a fbf8 	bl	c974 <String::String(float, unsigned char)>
    2184:	a9ac      	add	r1, sp, #688	; 0x2b0
    2186:	4630      	mov	r0, r6
    2188:	f00a fc40 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    218c:	4621      	mov	r1, r4
    218e:	f00a fc45 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    2192:	4606      	mov	r6, r0
									+ String(Kd_yaw*dScaleYaw)	
    2194:	4b5f      	ldr	r3, [pc, #380]	; (2314 <getDataString()+0x748>)
    2196:	ed93 0a00 	vldr	s0, [r3]
    219a:	4b5f      	ldr	r3, [pc, #380]	; (2318 <getDataString()+0x74c>)
    219c:	edd3 7a00 	vldr	s15, [r3]
    21a0:	2102      	movs	r1, #2
    21a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    21a6:	a8b0      	add	r0, sp, #704	; 0x2c0
    21a8:	f00a fbe4 	bl	c974 <String::String(float, unsigned char)>
    21ac:	a9b0      	add	r1, sp, #704	; 0x2c0
    21ae:	4630      	mov	r0, r6
    21b0:	f00a fc2c 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
									+ ","
    21b4:	4621      	mov	r1, r4
    21b6:	f00a fc31 	bl	ca1c <operator+(StringSumHelper const&, char const*)>
    21ba:	4604      	mov	r4, r0
									+ String(failureFlag);	
    21bc:	220a      	movs	r2, #10
    21be:	4b57      	ldr	r3, [pc, #348]	; (231c <getDataString()+0x750>)
    21c0:	7819      	ldrb	r1, [r3, #0]
    21c2:	a8b4      	add	r0, sp, #720	; 0x2d0
    21c4:	f00a fbc3 	bl	c94e <String::String(int, unsigned char)>
    21c8:	a9b4      	add	r1, sp, #720	; 0x2d0
    21ca:	4620      	mov	r0, r4
    21cc:	f00a fc1e 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
    21d0:	4601      	mov	r1, r0
    21d2:	4628      	mov	r0, r5
    21d4:	f00a fb8d 	bl	c8f2 <String::operator=(String const&)>
    21d8:	a8b4      	add	r0, sp, #720	; 0x2d0
    21da:	f00a fb19 	bl	c810 <String::~String()>
									+ String(Kd_yaw*dScaleYaw)	
    21de:	a8b0      	add	r0, sp, #704	; 0x2c0
    21e0:	f00a fb16 	bl	c810 <String::~String()>
									+ String(Ki_yaw*iScaleYaw)
    21e4:	a8ac      	add	r0, sp, #688	; 0x2b0
    21e6:	f00a fb13 	bl	c810 <String::~String()>
									+ String(Kp_yaw*pScaleYaw)
    21ea:	a8a8      	add	r0, sp, #672	; 0x2a0
    21ec:	f00a fb10 	bl	c810 <String::~String()>
									+ String(Kd_pitch_angle*dScalePitch)	
    21f0:	a8a4      	add	r0, sp, #656	; 0x290
    21f2:	f00a fb0d 	bl	c810 <String::~String()>
									+ String(Ki_pitch_angle*iScalePitch)
    21f6:	a8a0      	add	r0, sp, #640	; 0x280
    21f8:	f00a fb0a 	bl	c810 <String::~String()>
									+ String(Kp_pitch_angle*pScalePitch)
    21fc:	a89c      	add	r0, sp, #624	; 0x270
    21fe:	f00a fb07 	bl	c810 <String::~String()>
									+ String(Kd_roll_angle*dScaleRoll)	
    2202:	a898      	add	r0, sp, #608	; 0x260
    2204:	f00a fb04 	bl	c810 <String::~String()>
									+ String(Ki_roll_angle*iScaleRoll)
    2208:	a894      	add	r0, sp, #592	; 0x250
    220a:	f00a fb01 	bl	c810 <String::~String()>
									+ String(Kp_roll_angle*pScaleRoll)
    220e:	a890      	add	r0, sp, #576	; 0x240
    2210:	f00a fafe 	bl	c810 <String::~String()>
									+ String(s4_command_scaled)
    2214:	a88c      	add	r0, sp, #560	; 0x230
    2216:	f00a fafb 	bl	c810 <String::~String()>
									+ String(s3_command_scaled)
    221a:	a888      	add	r0, sp, #544	; 0x220
    221c:	f00a faf8 	bl	c810 <String::~String()>
									+ String(s2_command_scaled)
    2220:	a884      	add	r0, sp, #528	; 0x210
    2222:	f00a faf5 	bl	c810 <String::~String()>
									+ String(s1_command_scaled)
    2226:	a880      	add	r0, sp, #512	; 0x200
    2228:	f00a faf2 	bl	c810 <String::~String()>
									+ String(AccZ)
    222c:	a87c      	add	r0, sp, #496	; 0x1f0
    222e:	f00a faef 	bl	c810 <String::~String()>
									+ String(AccY)
    2232:	a878      	add	r0, sp, #480	; 0x1e0
    2234:	f00a faec 	bl	c810 <String::~String()>
									+ String(AccX)
    2238:	a874      	add	r0, sp, #464	; 0x1d0
    223a:	f00a fae9 	bl	c810 <String::~String()>
									+ String(GyroZ)
    223e:	a870      	add	r0, sp, #448	; 0x1c0
    2240:	f00a fae6 	bl	c810 <String::~String()>
									+ String(GyroY)
    2244:	a86c      	add	r0, sp, #432	; 0x1b0
    2246:	f00a fae3 	bl	c810 <String::~String()>
									+ String(GyroX)
    224a:	a868      	add	r0, sp, #416	; 0x1a0
    224c:	f00a fae0 	bl	c810 <String::~String()>
									+ String(channel_13_pwm)
    2250:	a864      	add	r0, sp, #400	; 0x190
    2252:	f00a fadd 	bl	c810 <String::~String()>
									+ String(channel_12_pwm)
    2256:	a860      	add	r0, sp, #384	; 0x180
    2258:	f00a fada 	bl	c810 <String::~String()>
									+ String(channel_11_pwm)
    225c:	a85c      	add	r0, sp, #368	; 0x170
    225e:	f00a fad7 	bl	c810 <String::~String()>
									+ String(channel_10_pwm)
    2262:	a858      	add	r0, sp, #352	; 0x160
    2264:	f00a fad4 	bl	c810 <String::~String()>
									+ String(channel_9_pwm)
    2268:	a854      	add	r0, sp, #336	; 0x150
    226a:	f00a fad1 	bl	c810 <String::~String()>
									+ String(channel_8_pwm)
    226e:	a850      	add	r0, sp, #320	; 0x140
    2270:	f00a face 	bl	c810 <String::~String()>
									+ String(channel_7_pwm)
    2274:	a84c      	add	r0, sp, #304	; 0x130
    2276:	f00a facb 	bl	c810 <String::~String()>
									+ String(channel_6_pwm)
    227a:	a848      	add	r0, sp, #288	; 0x120
    227c:	f00a fac8 	bl	c810 <String::~String()>
									+ String(channel_5_pwm)
    2280:	a844      	add	r0, sp, #272	; 0x110
    2282:	f00a fac5 	bl	c810 <String::~String()>
									+ String(channel_4_pwm)
    2286:	a840      	add	r0, sp, #256	; 0x100
    2288:	f00a fac2 	bl	c810 <String::~String()>
									+ String(channel_3_pwm)
    228c:	a83c      	add	r0, sp, #240	; 0xf0
    228e:	f00a fabf 	bl	c810 <String::~String()>
									+ String(channel_2_pwm)
    2292:	a838      	add	r0, sp, #224	; 0xe0
    2294:	f00a fabc 	bl	c810 <String::~String()>
									+ String(channel_1_pwm)
    2298:	a834      	add	r0, sp, #208	; 0xd0
    229a:	f00a fab9 	bl	c810 <String::~String()>
									+ String(yaw_PID)
    229e:	a830      	add	r0, sp, #192	; 0xc0
    22a0:	f00a fab6 	bl	c810 <String::~String()>
									+ String(pitch_PID)
    22a4:	a82c      	add	r0, sp, #176	; 0xb0
    22a6:	f00a fab3 	bl	c810 <String::~String()>
									+ String(roll_PID)
    22aa:	a828      	add	r0, sp, #160	; 0xa0
    22ac:	f00a fab0 	bl	c810 <String::~String()>
									+ String(thro_des)
    22b0:	a824      	add	r0, sp, #144	; 0x90
    22b2:	f00a faad 	bl	c810 <String::~String()>
    22b6:	e033      	b.n	2320 <getDataString()+0x754>
    22b8:	20004088 	.word	0x20004088
    22bc:	20004090 	.word	0x20004090
    22c0:	20004098 	.word	0x20004098
    22c4:	200050e8 	.word	0x200050e8
    22c8:	200050f0 	.word	0x200050f0
    22cc:	200050f8 	.word	0x200050f8
    22d0:	20005100 	.word	0x20005100
    22d4:	200032b4 	.word	0x200032b4
    22d8:	200039ec 	.word	0x200039ec
    22dc:	200032a8 	.word	0x200032a8
    22e0:	20003978 	.word	0x20003978
    22e4:	2000329c 	.word	0x2000329c
    22e8:	2000393c 	.word	0x2000393c
    22ec:	200032b0 	.word	0x200032b0
    22f0:	200039e8 	.word	0x200039e8
    22f4:	200032a4 	.word	0x200032a4
    22f8:	20003974 	.word	0x20003974
    22fc:	20003298 	.word	0x20003298
    2300:	20003938 	.word	0x20003938
    2304:	200032b8 	.word	0x200032b8
    2308:	200039f0 	.word	0x200039f0
    230c:	200032ac 	.word	0x200032ac
    2310:	2000397c 	.word	0x2000397c
    2314:	200032a0 	.word	0x200032a0
    2318:	20003940 	.word	0x20003940
    231c:	20005301 	.word	0x20005301
									+ String(yaw_des)
    2320:	a820      	add	r0, sp, #128	; 0x80
    2322:	f00a fa75 	bl	c810 <String::~String()>
									+ String(pitch_des)
    2326:	a81c      	add	r0, sp, #112	; 0x70
    2328:	f00a fa72 	bl	c810 <String::~String()>
									+ String(roll_des)
    232c:	a818      	add	r0, sp, #96	; 0x60
    232e:	f00a fa6f 	bl	c810 <String::~String()>
									+ String(beta)
    2332:	a814      	add	r0, sp, #80	; 0x50
    2334:	f00a fa6c 	bl	c810 <String::~String()>
									+ String(alpha)
    2338:	a810      	add	r0, sp, #64	; 0x40
    233a:	f00a fa69 	bl	c810 <String::~String()>
									+ String(yaw_IMU)
    233e:	a80c      	add	r0, sp, #48	; 0x30
    2340:	f00a fa66 	bl	c810 <String::~String()>
									+ String(pitch_IMU)
    2344:	a808      	add	r0, sp, #32
    2346:	f00a fa63 	bl	c810 <String::~String()>
class StringSumHelper : public String
    234a:	4668      	mov	r0, sp
    234c:	f00a fa60 	bl	c810 <String::~String()>
	csvDataString = String(roll_IMU)
    2350:	a804      	add	r0, sp, #16
    2352:	f00a fa5d 	bl	c810 <String::~String()>
	return csvDataString;
}
    2356:	4628      	mov	r0, r5
    2358:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    235c:	bd70      	pop	{r4, r5, r6, pc}
    235e:	bf00      	nop

00002360 <getPScale()>:
	}
}

void getPScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_10_pwm - 1500.0f)/500.0f * 0.8f;
    2360:	4b0d      	ldr	r3, [pc, #52]	; (2398 <getPScale()+0x38>)
    2362:	ed93 7a00 	vldr	s14, [r3]
    2366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    236a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 239c <getPScale()+0x3c>
    236e:	ee37 7a67 	vsub.f32	s14, s14, s15
    2372:	eddf 6a0b 	vldr	s13, [pc, #44]	; 23a0 <getPScale()+0x40>
    2376:	eec7 7a26 	vdiv.f32	s15, s14, s13
    237a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 23a4 <getPScale()+0x44>
    237e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2386:	ee77 7a87 	vadd.f32	s15, s15, s14
	pScaleRoll = scaleVal;
    238a:	4b07      	ldr	r3, [pc, #28]	; (23a8 <getPScale()+0x48>)
    238c:	edc3 7a00 	vstr	s15, [r3]
	pScalePitch = scaleVal;
    2390:	4b06      	ldr	r3, [pc, #24]	; (23ac <getPScale()+0x4c>)
    2392:	edc3 7a00 	vstr	s15, [r3]
}
    2396:	4770      	bx	lr
    2398:	20004f04 	.word	0x20004f04
    239c:	44bb8000 	.word	0x44bb8000
    23a0:	43fa0000 	.word	0x43fa0000
    23a4:	3f4ccccd 	.word	0x3f4ccccd
    23a8:	200039ec 	.word	0x200039ec
    23ac:	200039e8 	.word	0x200039e8

000023b0 <getDScale()>:

void getDScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_12_pwm - 1500.0f)/500.0f * 0.8f;
    23b0:	4b0d      	ldr	r3, [pc, #52]	; (23e8 <getDScale()+0x38>)
    23b2:	ed93 7a00 	vldr	s14, [r3]
    23b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    23ba:	eddf 7a0c 	vldr	s15, [pc, #48]	; 23ec <getDScale()+0x3c>
    23be:	ee37 7a67 	vsub.f32	s14, s14, s15
    23c2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 23f0 <getDScale()+0x40>
    23c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
    23ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 23f4 <getDScale()+0x44>
    23ce:	ee67 7a87 	vmul.f32	s15, s15, s14
    23d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    23d6:	ee77 7a87 	vadd.f32	s15, s15, s14
	dScaleRoll = scaleVal;
    23da:	4b07      	ldr	r3, [pc, #28]	; (23f8 <getDScale()+0x48>)
    23dc:	edc3 7a00 	vstr	s15, [r3]
	dScalePitch = scaleVal;
    23e0:	4b06      	ldr	r3, [pc, #24]	; (23fc <getDScale()+0x4c>)
    23e2:	edc3 7a00 	vstr	s15, [r3]
}
    23e6:	4770      	bx	lr
    23e8:	20004f0c 	.word	0x20004f0c
    23ec:	44bb8000 	.word	0x44bb8000
    23f0:	43fa0000 	.word	0x43fa0000
    23f4:	3f4ccccd 	.word	0x3f4ccccd
    23f8:	2000393c 	.word	0x2000393c
    23fc:	20003938 	.word	0x20003938

00002400 <getIScale()>:

void getIScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_11_pwm - 1500.0f)/500.0f * 0.8f;
    2400:	4b0d      	ldr	r3, [pc, #52]	; (2438 <getIScale()+0x38>)
    2402:	ed93 7a00 	vldr	s14, [r3]
    2406:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    240a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 243c <getIScale()+0x3c>
    240e:	ee37 7a67 	vsub.f32	s14, s14, s15
    2412:	eddf 6a0b 	vldr	s13, [pc, #44]	; 2440 <getIScale()+0x40>
    2416:	eec7 7a26 	vdiv.f32	s15, s14, s13
    241a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2444 <getIScale()+0x44>
    241e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2426:	ee77 7a87 	vadd.f32	s15, s15, s14
	iScaleRoll = scaleVal;
    242a:	4b07      	ldr	r3, [pc, #28]	; (2448 <getIScale()+0x48>)
    242c:	edc3 7a00 	vstr	s15, [r3]
	iScalePitch = scaleVal;
    2430:	4b06      	ldr	r3, [pc, #24]	; (244c <getIScale()+0x4c>)
    2432:	edc3 7a00 	vstr	s15, [r3]
}
    2436:	4770      	bx	lr
    2438:	20004f08 	.word	0x20004f08
    243c:	44bb8000 	.word	0x44bb8000
    2440:	43fa0000 	.word	0x43fa0000
    2444:	3f4ccccd 	.word	0x3f4ccccd
    2448:	20003978 	.word	0x20003978
    244c:	20003974 	.word	0x20003974

00002450 <invSqrt(float)>:
  unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
  float tmp = *(float*)&i;
  float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
  return y;
  */
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    2450:	eeb5 0a40 	vcmp.f32	s0, #0.0
    2454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2458:	d406      	bmi.n	2468 <invSqrt(float)+0x18>
    245a:	eef1 7ac0 	vsqrt.f32	s15, s0
}
    245e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2462:	ee80 0a27 	vdiv.f32	s0, s0, s15
    2466:	4770      	bx	lr
float invSqrt(float x) {
    2468:	b508      	push	{r3, lr}
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    246a:	f00c fcb1 	bl	edd0 <sqrtf>
    246e:	eef0 7a40 	vmov.f32	s15, s0
}
    2472:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    2476:	ee80 0a27 	vdiv.f32	s0, s0, s15
    247a:	bd08      	pop	{r3, pc}
    247c:	0000      	movs	r0, r0
	...

00002480 <Madgwick6DOF(float, float, float, float, float, float, float)>:
void Madgwick6DOF(float gx, float gy, float gz, float ax, float ay, float az, float invSampleFreq) {
    2480:	b508      	push	{r3, lr}
    2482:	ed2d 8b0e 	vpush	{d8-d14}
    2486:	eeb0 ba61 	vmov.f32	s22, s3
    248a:	eef0 8a42 	vmov.f32	s17, s4
    248e:	eeb0 ea62 	vmov.f32	s28, s5
    2492:	eeb0 da43 	vmov.f32	s26, s6
  gx *= 0.0174533f;
    2496:	eddf 7acc 	vldr	s15, [pc, #816]	; 27c8 <Madgwick6DOF(float, float, float, float, float, float, float)+0x348>
    249a:	ee20 0a27 	vmul.f32	s0, s0, s15
  gy *= 0.0174533f;
    249e:	ee60 0aa7 	vmul.f32	s1, s1, s15
  gz *= 0.0174533f;
    24a2:	ee21 1a27 	vmul.f32	s2, s2, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    24a6:	4bc9      	ldr	r3, [pc, #804]	; (27cc <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    24a8:	ed93 ca00 	vldr	s24, [r3]
    24ac:	4bc8      	ldr	r3, [pc, #800]	; (27d0 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    24ae:	edd3 ba00 	vldr	s23, [r3]
    24b2:	4bc8      	ldr	r3, [pc, #800]	; (27d4 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    24b4:	edd3 ca00 	vldr	s25, [r3]
    24b8:	ee2c aa40 	vnmul.f32	s20, s24, s0
    24bc:	ee6b 7aa0 	vmul.f32	s15, s23, s1
    24c0:	ee3a aa67 	vsub.f32	s20, s20, s15
    24c4:	ee6c 7a81 	vmul.f32	s15, s25, s2
    24c8:	ee3a aa67 	vsub.f32	s20, s20, s15
    24cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    24d0:	ee2a aa27 	vmul.f32	s20, s20, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    24d4:	4bc0      	ldr	r3, [pc, #768]	; (27d8 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    24d6:	edd3 da00 	vldr	s27, [r3]
    24da:	ee6d 9a80 	vmul.f32	s19, s27, s0
    24de:	ee2b 7a81 	vmul.f32	s14, s23, s2
    24e2:	ee79 9a87 	vadd.f32	s19, s19, s14
    24e6:	ee2c 7aa0 	vmul.f32	s14, s25, s1
    24ea:	ee79 9ac7 	vsub.f32	s19, s19, s14
    24ee:	ee69 9aa7 	vmul.f32	s19, s19, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    24f2:	ee6d aaa0 	vmul.f32	s21, s27, s1
    24f6:	ee2c 7a01 	vmul.f32	s14, s24, s2
    24fa:	ee7a aac7 	vsub.f32	s21, s21, s14
    24fe:	ee2c 7a80 	vmul.f32	s14, s25, s0
    2502:	ee7a aa87 	vadd.f32	s21, s21, s14
    2506:	ee6a aaa7 	vmul.f32	s21, s21, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    250a:	ee2d 9a81 	vmul.f32	s18, s27, s2
    250e:	ee6c 0a20 	vmul.f32	s1, s24, s1
    2512:	ee39 9a20 	vadd.f32	s18, s18, s1
    2516:	ee2b 0a80 	vmul.f32	s0, s23, s0
    251a:	ee39 9a40 	vsub.f32	s18, s18, s0
    251e:	ee29 9a27 	vmul.f32	s18, s18, s15
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    2522:	eeb5 2a40 	vcmp.f32	s4, #0.0
    2526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    252a:	bf14      	ite	ne
    252c:	2301      	movne	r3, #1
    252e:	2300      	moveq	r3, #0
    2530:	eef5 2a40 	vcmp.f32	s5, #0.0
    2534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2538:	bf18      	it	ne
    253a:	f043 0301 	orrne.w	r3, r3, #1
    253e:	b92b      	cbnz	r3, 254c <Madgwick6DOF(float, float, float, float, float, float, float)+0xcc>
    2540:	eef5 1a40 	vcmp.f32	s3, #0.0
    2544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2548:	f000 80b5 	beq.w	26b6 <Madgwick6DOF(float, float, float, float, float, float, float)+0x236>
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    254c:	ee6b 7a0b 	vmul.f32	s15, s22, s22
    2550:	ee28 7aa8 	vmul.f32	s14, s17, s17
    2554:	ee77 7a87 	vadd.f32	s15, s15, s14
    2558:	ee2e 0a0e 	vmul.f32	s0, s28, s28
    255c:	ee37 0a80 	vadd.f32	s0, s15, s0
    2560:	f7ff ff76 	bl	2450 <invSqrt(float)>
    ax *= recipNorm;
    2564:	ee2b ba00 	vmul.f32	s22, s22, s0
    ay *= recipNorm;
    2568:	ee28 6a80 	vmul.f32	s12, s17, s0
    az *= recipNorm;
    256c:	ee2e 0a00 	vmul.f32	s0, s28, s0
    _2q0 = 2.0f * q0;
    2570:	ee3d 2aad 	vadd.f32	s4, s27, s27
    _2q1 = 2.0f * q1;
    2574:	ee7c 4a0c 	vadd.f32	s9, s24, s24
    _2q2 = 2.0f * q2;
    2578:	ee3b 5aab 	vadd.f32	s10, s23, s23
    _2q3 = 2.0f * q3;
    257c:	ee3c 3aac 	vadd.f32	s6, s25, s25
    _4q0 = 4.0f * q0;
    2580:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    2584:	ee6d 7aa5 	vmul.f32	s15, s27, s11
    _4q1 = 4.0f * q1;
    2588:	ee6c 1a25 	vmul.f32	s3, s24, s11
    _4q2 = 4.0f * q2;
    258c:	ee2b 4aa5 	vmul.f32	s8, s23, s11
    _8q1 = 8.0f * q1;
    2590:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    2594:	ee2c 1a23 	vmul.f32	s2, s24, s7
    _8q2 = 8.0f * q2;
    2598:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    q1q1 = q1 * q1;
    259c:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    q2q2 = q2 * q2;
    25a0:	ee6b 6aab 	vmul.f32	s13, s23, s23
    q3q3 = q3 * q3;
    25a4:	ee6c 2aac 	vmul.f32	s5, s25, s25
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    25a8:	ee67 eaa6 	vmul.f32	s29, s15, s13
    25ac:	ee6b 0a05 	vmul.f32	s1, s22, s10
    25b0:	ee7e eaa0 	vadd.f32	s29, s29, s1
    25b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    25b8:	ee7e eaa7 	vadd.f32	s29, s29, s15
    25bc:	ee66 7a24 	vmul.f32	s15, s12, s9
    25c0:	ee7e eae7 	vsub.f32	s29, s29, s15
    q0q0 = q0 * q0;
    25c4:	ee6d 7aad 	vmul.f32	s15, s27, s27
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    25c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
    25cc:	ee21 eaa2 	vmul.f32	s28, s3, s5
    25d0:	ee6b 0a03 	vmul.f32	s1, s22, s6
    25d4:	ee3e ea60 	vsub.f32	s28, s28, s1
    25d8:	ee6c 0a27 	vmul.f32	s1, s24, s15
    25dc:	ee3e ea20 	vadd.f32	s28, s28, s1
    25e0:	ee66 0a02 	vmul.f32	s1, s12, s4
    25e4:	ee3e ea60 	vsub.f32	s28, s28, s1
    25e8:	ee3e ea61 	vsub.f32	s28, s28, s3
    25ec:	ee61 0a07 	vmul.f32	s1, s2, s14
    25f0:	ee3e ea20 	vadd.f32	s28, s28, s1
    25f4:	ee21 1a26 	vmul.f32	s2, s2, s13
    25f8:	ee3e ea01 	vadd.f32	s28, s28, s2
    25fc:	ee60 1a21 	vmul.f32	s3, s0, s3
    2600:	ee3e ea21 	vadd.f32	s28, s28, s3
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    2604:	ee2b 8aa7 	vmul.f32	s16, s23, s15
    2608:	ee2b 2a02 	vmul.f32	s4, s22, s4
    260c:	ee38 8a02 	vadd.f32	s16, s16, s4
    2610:	ee64 2a22 	vmul.f32	s5, s8, s5
    2614:	ee38 8a22 	vadd.f32	s16, s16, s5
    2618:	ee26 3a03 	vmul.f32	s6, s12, s6
    261c:	ee38 8a43 	vsub.f32	s16, s16, s6
    2620:	ee38 8a44 	vsub.f32	s16, s16, s8
    2624:	ee63 7a87 	vmul.f32	s15, s7, s14
    2628:	ee38 8a27 	vadd.f32	s16, s16, s15
    262c:	ee63 3aa6 	vmul.f32	s7, s7, s13
    2630:	ee38 8a23 	vadd.f32	s16, s16, s7
    2634:	ee20 0a04 	vmul.f32	s0, s0, s8
    2638:	ee38 8a00 	vadd.f32	s16, s16, s0
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    263c:	ee27 7a25 	vmul.f32	s14, s14, s11
    2640:	ee27 7a2c 	vmul.f32	s14, s14, s25
    2644:	ee2b ba24 	vmul.f32	s22, s22, s9
    2648:	ee77 8a4b 	vsub.f32	s17, s14, s22
    264c:	ee66 6aa5 	vmul.f32	s13, s13, s11
    2650:	ee66 6aac 	vmul.f32	s13, s13, s25
    2654:	ee38 7aa6 	vadd.f32	s14, s17, s13
    2658:	ee66 8a05 	vmul.f32	s17, s12, s10
    265c:	ee77 8a68 	vsub.f32	s17, s14, s17
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); //normalise step magnitude
    2660:	ee6e 7aae 	vmul.f32	s15, s29, s29
    2664:	ee2e 7a0e 	vmul.f32	s14, s28, s28
    2668:	ee77 7a87 	vadd.f32	s15, s15, s14
    266c:	ee28 7a08 	vmul.f32	s14, s16, s16
    2670:	ee77 7a87 	vadd.f32	s15, s15, s14
    2674:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2678:	ee37 0a80 	vadd.f32	s0, s15, s0
    267c:	f7ff fee8 	bl	2450 <invSqrt(float)>
    qDot1 -= B_madgwick * s0;
    2680:	4b56      	ldr	r3, [pc, #344]	; (27dc <Madgwick6DOF(float, float, float, float, float, float, float)+0x35c>)
    2682:	edd3 7a00 	vldr	s15, [r3]
    s0 *= recipNorm;
    2686:	ee6e ea80 	vmul.f32	s29, s29, s0
    qDot1 -= B_madgwick * s0;
    268a:	ee6e eaa7 	vmul.f32	s29, s29, s15
    268e:	ee3a aa6e 	vsub.f32	s20, s20, s29
    s1 *= recipNorm;
    2692:	ee2e ea00 	vmul.f32	s28, s28, s0
    qDot2 -= B_madgwick * s1;
    2696:	ee2e ea27 	vmul.f32	s28, s28, s15
    269a:	ee79 9ace 	vsub.f32	s19, s19, s28
    s2 *= recipNorm;
    269e:	ee28 8a00 	vmul.f32	s16, s16, s0
    qDot3 -= B_madgwick * s2;
    26a2:	ee28 8a27 	vmul.f32	s16, s16, s15
    26a6:	ee7a aac8 	vsub.f32	s21, s21, s16
    s3 *= recipNorm;
    26aa:	ee68 8a80 	vmul.f32	s17, s17, s0
    qDot4 -= B_madgwick * s3;
    26ae:	ee68 8aa7 	vmul.f32	s17, s17, s15
    26b2:	ee39 9a68 	vsub.f32	s18, s18, s17
  q0 += qDot1 * invSampleFreq;
    26b6:	ee2a aa0d 	vmul.f32	s20, s20, s26
    26ba:	ee3a aa2d 	vadd.f32	s20, s20, s27
  q1 += qDot2 * invSampleFreq;
    26be:	ee29 8a8d 	vmul.f32	s16, s19, s26
    26c2:	ee38 8a0c 	vadd.f32	s16, s16, s24
  q2 += qDot3 * invSampleFreq;
    26c6:	ee6a aa8d 	vmul.f32	s21, s21, s26
    26ca:	ee7a aaab 	vadd.f32	s21, s21, s23
  q3 += qDot4 * invSampleFreq;
    26ce:	ee69 8a0d 	vmul.f32	s17, s18, s26
    26d2:	ee78 8aac 	vadd.f32	s17, s17, s25
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    26d6:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    26da:	ee28 7a08 	vmul.f32	s14, s16, s16
    26de:	ee77 7a87 	vadd.f32	s15, s15, s14
    26e2:	ee2a 7aaa 	vmul.f32	s14, s21, s21
    26e6:	ee77 7a87 	vadd.f32	s15, s15, s14
    26ea:	ee28 0aa8 	vmul.f32	s0, s17, s17
    26ee:	ee37 0a80 	vadd.f32	s0, s15, s0
    26f2:	f7ff fead 	bl	2450 <invSqrt(float)>
  q0 *= recipNorm;
    26f6:	ee2a aa00 	vmul.f32	s20, s20, s0
    26fa:	4b37      	ldr	r3, [pc, #220]	; (27d8 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    26fc:	ed83 aa00 	vstr	s20, [r3]
  q1 *= recipNorm;
    2700:	ee28 8a00 	vmul.f32	s16, s16, s0
    2704:	4b31      	ldr	r3, [pc, #196]	; (27cc <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2706:	ed83 8a00 	vstr	s16, [r3]
  q2 *= recipNorm;
    270a:	ee6a aa80 	vmul.f32	s21, s21, s0
    270e:	4b30      	ldr	r3, [pc, #192]	; (27d0 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2710:	edc3 aa00 	vstr	s21, [r3]
  q3 *= recipNorm;
    2714:	ee68 8a80 	vmul.f32	s17, s17, s0
    2718:	4b2e      	ldr	r3, [pc, #184]	; (27d4 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    271a:	edc3 8a00 	vstr	s17, [r3]
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
    271e:	ee6a baaa 	vmul.f32	s23, s21, s21
    2722:	ee68 0a08 	vmul.f32	s1, s16, s16
    2726:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    272a:	ee7b 0a60 	vsub.f32	s1, s22, s1
    272e:	ee2a 0a08 	vmul.f32	s0, s20, s16
    2732:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  { return __builtin_atan2f(__y, __x); }
    2736:	ee70 0aeb 	vsub.f32	s1, s1, s23
    273a:	ee30 0a27 	vadd.f32	s0, s0, s15
    273e:	f00c fe55 	bl	f3ec <atan2f>
    2742:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2746:	ed9f 9b1e 	vldr	d9, [pc, #120]	; 27c0 <Madgwick6DOF(float, float, float, float, float, float, float)+0x340>
    274a:	ee20 0b09 	vmul.f64	d0, d0, d9
    274e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2752:	4b23      	ldr	r3, [pc, #140]	; (27e0 <Madgwick6DOF(float, float, float, float, float, float, float)+0x360>)
    2754:	ed83 0a00 	vstr	s0, [r3]
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
    2758:	ee68 7a28 	vmul.f32	s15, s16, s17
    275c:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    2760:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_asinf(__x); }
    2764:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    2768:	ee27 0a80 	vmul.f32	s0, s15, s0
    276c:	f00c fe12 	bl	f394 <asinf>
    2770:	eeb1 7a40 	vneg.f32	s14, s0
    2774:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2778:	ee27 7b09 	vmul.f64	d7, d7, d9
    277c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2780:	4b18      	ldr	r3, [pc, #96]	; (27e4 <Madgwick6DOF(float, float, float, float, float, float, float)+0x364>)
    2782:	ed83 7a00 	vstr	s14, [r3]
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
    2786:	ee3b ba6b 	vsub.f32	s22, s22, s23
    278a:	ee68 0aa8 	vmul.f32	s1, s17, s17
    278e:	ee28 8a2a 	vmul.f32	s16, s16, s21
    2792:	ee2a 0a28 	vmul.f32	s0, s20, s17
  { return __builtin_atan2f(__y, __x); }
    2796:	ee7b 0a60 	vsub.f32	s1, s22, s1
    279a:	ee38 0a00 	vadd.f32	s0, s16, s0
    279e:	f00c fe25 	bl	f3ec <atan2f>
    27a2:	eeb1 0a40 	vneg.f32	s0, s0
    27a6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    27aa:	ee20 0b09 	vmul.f64	d0, d0, d9
    27ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    27b2:	4b0d      	ldr	r3, [pc, #52]	; (27e8 <Madgwick6DOF(float, float, float, float, float, float, float)+0x368>)
    27b4:	ed83 0a00 	vstr	s0, [r3]
}
    27b8:	ecbd 8b0e 	vpop	{d8-d14}
    27bc:	bd08      	pop	{r3, pc}
    27be:	bf00      	nop
    27c0:	1a5d2372 	.word	0x1a5d2372
    27c4:	404ca5dc 	.word	0x404ca5dc
    27c8:	3c8efa39 	.word	0x3c8efa39
    27cc:	20005090 	.word	0x20005090
    27d0:	20005094 	.word	0x20005094
    27d4:	20005098 	.word	0x20005098
    27d8:	200039f8 	.word	0x200039f8
    27dc:	2000327c 	.word	0x2000327c
    27e0:	200050a4 	.word	0x200050a4
    27e4:	2000507c 	.word	0x2000507c
    27e8:	200052dc 	.word	0x200052dc
    27ec:	00000000 	.word	0x00000000

000027f0 <loop>:
void loop() {
    27f0:	b530      	push	{r4, r5, lr}
    27f2:	b09d      	sub	sp, #116	; 0x74
  prev_time = current_time;      
    27f4:	4ca8      	ldr	r4, [pc, #672]	; (2a98 <loop+0x2a8>)
    27f6:	4da9      	ldr	r5, [pc, #676]	; (2a9c <loop+0x2ac>)
    27f8:	682b      	ldr	r3, [r5, #0]
    27fa:	6023      	str	r3, [r4, #0]
  current_time = micros();      
    27fc:	f00a fad2 	bl	cda4 <micros>
    2800:	6028      	str	r0, [r5, #0]
  dt = (current_time - prev_time)/1000000.0;
    2802:	6823      	ldr	r3, [r4, #0]
    2804:	1ac0      	subs	r0, r0, r3
    2806:	ee07 0a90 	vmov	s15, r0
    280a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    280e:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 2a90 <loop+0x2a0>
    2812:	ee87 6b05 	vdiv.f64	d6, d7, d5
    2816:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    281a:	4ba1      	ldr	r3, [pc, #644]	; (2aa0 <loop+0x2b0>)
    281c:	ed83 6a00 	vstr	s12, [r3]
  loopBlink(); //Indicate we are in main loop with short blink every 1.5 seconds
    2820:	f7ff f8c8 	bl	19b4 <loopBlink()>
	if (channel_6_pwm < 1500) {
    2824:	4b9f      	ldr	r3, [pc, #636]	; (2aa4 <loop+0x2b4>)
    2826:	681a      	ldr	r2, [r3, #0]
    2828:	f240 53db 	movw	r3, #1499	; 0x5db
    282c:	429a      	cmp	r2, r3
    282e:	f300 8098 	bgt.w	2962 <loop+0x172>
		irisFlag = 0;
    2832:	4b9d      	ldr	r3, [pc, #628]	; (2aa8 <loop+0x2b8>)
    2834:	2200      	movs	r2, #0
    2836:	701a      	strb	r2, [r3, #0]
		closeIris();
    2838:	f7ff f9b0 	bl	1b9c <closeIris()>
	if (channel_7_pwm > 1750) {
    283c:	4b9b      	ldr	r3, [pc, #620]	; (2aac <loop+0x2bc>)
    283e:	681a      	ldr	r2, [r3, #0]
    2840:	f240 63d6 	movw	r3, #1750	; 0x6d6
    2844:	429a      	cmp	r2, r3
    2846:	f340 8092 	ble.w	296e <loop+0x17e>
		conductSineSweep = 1;
    284a:	4b99      	ldr	r3, [pc, #612]	; (2ab0 <loop+0x2c0>)
    284c:	2201      	movs	r2, #1
    284e:	701a      	strb	r2, [r3, #0]
	if (SD_is_present && current_time - print_counterSD > 10000) {
    2850:	4b98      	ldr	r3, [pc, #608]	; (2ab4 <loop+0x2c4>)
    2852:	781b      	ldrb	r3, [r3, #0]
    2854:	b14b      	cbz	r3, 286a <loop+0x7a>
    2856:	4b91      	ldr	r3, [pc, #580]	; (2a9c <loop+0x2ac>)
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	4a97      	ldr	r2, [pc, #604]	; (2ab8 <loop+0x2c8>)
    285c:	6812      	ldr	r2, [r2, #0]
    285e:	1a9b      	subs	r3, r3, r2
    2860:	f242 7210 	movw	r2, #10000	; 0x2710
    2864:	4293      	cmp	r3, r2
    2866:	f200 8089 	bhi.w	297c <loop+0x18c>
  getIMUdata(); //Pulls raw gyro, accelerometer, and magnetometer data from IMU and LP filters to remove noise
    286a:	f7fe f8b1 	bl	9d0 <getIMUdata()>
  Madgwick(GyroX, -GyroY, -GyroZ, -AccX, AccY, AccZ, MagY, -MagX, MagZ, dt); //Updates roll_IMU, pitch_IMU, and yaw_IMU angle estimates (degrees)
    286e:	4b93      	ldr	r3, [pc, #588]	; (2abc <loop+0x2cc>)
    2870:	edd3 1a00 	vldr	s3, [r3]
    2874:	4b92      	ldr	r3, [pc, #584]	; (2ac0 <loop+0x2d0>)
    2876:	ed93 1a00 	vldr	s2, [r3]
    287a:	4b92      	ldr	r3, [pc, #584]	; (2ac4 <loop+0x2d4>)
    287c:	edd3 0a00 	vldr	s1, [r3]
    Madgwick6DOF(gx, gy, gz, ax, ay, az, invSampleFreq);
    2880:	4b87      	ldr	r3, [pc, #540]	; (2aa0 <loop+0x2b0>)
    2882:	ed93 3a00 	vldr	s6, [r3]
    2886:	4b90      	ldr	r3, [pc, #576]	; (2ac8 <loop+0x2d8>)
    2888:	edd3 2a00 	vldr	s5, [r3]
    288c:	4b8f      	ldr	r3, [pc, #572]	; (2acc <loop+0x2dc>)
    288e:	ed93 2a00 	vldr	s4, [r3]
    2892:	eef1 1a61 	vneg.f32	s3, s3
    2896:	eeb1 1a41 	vneg.f32	s2, s2
    289a:	eef1 0a60 	vneg.f32	s1, s1
    289e:	4b8c      	ldr	r3, [pc, #560]	; (2ad0 <loop+0x2e0>)
    28a0:	ed93 0a00 	vldr	s0, [r3]
    28a4:	f7ff fdec 	bl	2480 <Madgwick6DOF(float, float, float, float, float, float, float)>
  getJoyAngle();
    28a8:	f7ff f8d2 	bl	1a50 <getJoyAngle()>
  getDesState(); //Convert raw commands to normalized values based on saturated control limits
    28ac:	f7fe fb34 	bl	f18 <getDesState()>
	if (useSerialAngleCommands) {
    28b0:	4b88      	ldr	r3, [pc, #544]	; (2ad4 <loop+0x2e4>)
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	2b00      	cmp	r3, #0
    28b6:	f040 80d8 	bne.w	2a6a <loop+0x27a>
	if (conductSineSweep) {
    28ba:	4b7d      	ldr	r3, [pc, #500]	; (2ab0 <loop+0x2c0>)
    28bc:	781b      	ldrb	r3, [r3, #0]
    28be:	2b00      	cmp	r3, #0
    28c0:	f040 80d8 	bne.w	2a74 <loop+0x284>
	if (channel_8_pwm > 1250 && channel_8_pwm < 1750) {
    28c4:	4b84      	ldr	r3, [pc, #528]	; (2ad8 <loop+0x2e8>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	f2a3 43e3 	subw	r3, r3, #1251	; 0x4e3
    28cc:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
    28d0:	f240 80d5 	bls.w	2a7e <loop+0x28e>
	if (channel_8_pwm > 1750) {
    28d4:	4b80      	ldr	r3, [pc, #512]	; (2ad8 <loop+0x2e8>)
    28d6:	681a      	ldr	r2, [r3, #0]
    28d8:	f240 63d6 	movw	r3, #1750	; 0x6d6
    28dc:	429a      	cmp	r2, r3
    28de:	f300 80d1 	bgt.w	2a84 <loop+0x294>
	getPScale();
    28e2:	f7ff fd3d 	bl	2360 <getPScale()>
	getIScale();
    28e6:	f7ff fd8b 	bl	2400 <getIScale()>
	getDScale();
    28ea:	f7ff fd61 	bl	23b0 <getDScale()>
	if (irisFlag) {
    28ee:	4b6e      	ldr	r3, [pc, #440]	; (2aa8 <loop+0x2b8>)
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	2b00      	cmp	r3, #0
    28f4:	f040 80c9 	bne.w	2a8a <loop+0x29a>
	anglePID();
    28f8:	f000 fcee 	bl	32d8 <anglePID()>
  controlMixer(); //Mixes PID outputs to scaled actuator commands -- custom mixing assignments done here
    28fc:	f7fd ffe2 	bl	8c4 <controlMixer()>
  scaleCommands(); //Scales motor commands to 125 to 250 range (oneshot125 protocol) and servo PWM commands to 0 to 180 (for servo library)
    2900:	f7fe fc8e 	bl	1220 <scaleCommands()>
  throttleCut(); //Directly sets motor commands to low based on state of ch5
    2904:	f7fe fffa 	bl	18fc <throttleCut()>
  servo1.write(s1_command_PWM); //Writes PWM value to servo object
    2908:	4b74      	ldr	r3, [pc, #464]	; (2adc <loop+0x2ec>)
    290a:	6819      	ldr	r1, [r3, #0]
    290c:	4874      	ldr	r0, [pc, #464]	; (2ae0 <loop+0x2f0>)
    290e:	f002 f8f3 	bl	4af8 <PWMServo::write(int)>
  servo2.write(s2_command_PWM);
    2912:	4b74      	ldr	r3, [pc, #464]	; (2ae4 <loop+0x2f4>)
    2914:	6819      	ldr	r1, [r3, #0]
    2916:	4874      	ldr	r0, [pc, #464]	; (2ae8 <loop+0x2f8>)
    2918:	f002 f8ee 	bl	4af8 <PWMServo::write(int)>
  servo3.write(s3_command_PWM);
    291c:	4b73      	ldr	r3, [pc, #460]	; (2aec <loop+0x2fc>)
    291e:	6819      	ldr	r1, [r3, #0]
    2920:	4873      	ldr	r0, [pc, #460]	; (2af0 <loop+0x300>)
    2922:	f002 f8e9 	bl	4af8 <PWMServo::write(int)>
  servo4.write(s4_command_PWM);
    2926:	4b73      	ldr	r3, [pc, #460]	; (2af4 <loop+0x304>)
    2928:	6819      	ldr	r1, [r3, #0]
    292a:	4873      	ldr	r0, [pc, #460]	; (2af8 <loop+0x308>)
    292c:	f002 f8e4 	bl	4af8 <PWMServo::write(int)>
  servo5.write(s5_command_PWM);
    2930:	4b72      	ldr	r3, [pc, #456]	; (2afc <loop+0x30c>)
    2932:	6819      	ldr	r1, [r3, #0]
    2934:	4872      	ldr	r0, [pc, #456]	; (2b00 <loop+0x310>)
    2936:	f002 f8df 	bl	4af8 <PWMServo::write(int)>
  servo6.write(s6_command_PWM);
    293a:	4b72      	ldr	r3, [pc, #456]	; (2b04 <loop+0x314>)
    293c:	6819      	ldr	r1, [r3, #0]
    293e:	4872      	ldr	r0, [pc, #456]	; (2b08 <loop+0x318>)
    2940:	f002 f8da 	bl	4af8 <PWMServo::write(int)>
  servo7.write(s7_command_PWM);
    2944:	4b71      	ldr	r3, [pc, #452]	; (2b0c <loop+0x31c>)
    2946:	6819      	ldr	r1, [r3, #0]
    2948:	4871      	ldr	r0, [pc, #452]	; (2b10 <loop+0x320>)
    294a:	f002 f8d5 	bl	4af8 <PWMServo::write(int)>
  getCommands(); //Pulls current available radio commands
    294e:	f7fe fcfb 	bl	1348 <getCommands()>
  failSafe(); //Prevent failures in event of bad receiver connection, defaults to failsafe values assigned in setup
    2952:	f7fe ff67 	bl	1824 <failSafe()>
  loopRate(2000); //Do not exceed 2000Hz, all filter parameters tuned to 2000Hz by default
    2956:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    295a:	f7fe fff5 	bl	1948 <loopRate(int)>
}
    295e:	b01d      	add	sp, #116	; 0x74
    2960:	bd30      	pop	{r4, r5, pc}
		irisFlag = 1;
    2962:	4b51      	ldr	r3, [pc, #324]	; (2aa8 <loop+0x2b8>)
    2964:	2201      	movs	r2, #1
    2966:	701a      	strb	r2, [r3, #0]
		openIris();
    2968:	f7ff f90a 	bl	1b80 <openIris()>
    296c:	e766      	b.n	283c <loop+0x4c>
		conductSineSweep = 0;
    296e:	4b50      	ldr	r3, [pc, #320]	; (2ab0 <loop+0x2c0>)
    2970:	2200      	movs	r2, #0
    2972:	701a      	strb	r2, [r3, #0]
		sineTime = 0;
    2974:	4b67      	ldr	r3, [pc, #412]	; (2b14 <loop+0x324>)
    2976:	2200      	movs	r2, #0
    2978:	601a      	str	r2, [r3, #0]
    297a:	e769      	b.n	2850 <loop+0x60>
    print_counterSD = micros();
    297c:	f00a fa12 	bl	cda4 <micros>
    2980:	4b4d      	ldr	r3, [pc, #308]	; (2ab8 <loop+0x2c8>)
    2982:	6018      	str	r0, [r3, #0]
    String dataString;
    2984:	2100      	movs	r1, #0
    2986:	4668      	mov	r0, sp
    2988:	f009 ff8b 	bl	c8a2 <String::String(char const*)>
    dataString = getDataString();
    298c:	a818      	add	r0, sp, #96	; 0x60
    298e:	f7ff f91d 	bl	1bcc <getDataString()>
    2992:	a918      	add	r1, sp, #96	; 0x60
    2994:	4668      	mov	r0, sp
    2996:	f009 ffc1 	bl	c91c <String::operator=(String&&)>
    299a:	a818      	add	r0, sp, #96	; 0x60
    299c:	f009 ff38 	bl	c810 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    29a0:	4b5d      	ldr	r3, [pc, #372]	; (2b18 <loop+0x328>)
    29a2:	681a      	ldr	r2, [r3, #0]
    29a4:	2a00      	cmp	r2, #0
    29a6:	d04e      	beq.n	2a46 <loop+0x256>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    29a8:	f244 2302 	movw	r3, #16898	; 0x4202
    29ac:	495b      	ldr	r1, [pc, #364]	; (2b1c <loop+0x32c>)
    29ae:	a804      	add	r0, sp, #16
    29b0:	f007 f8ba 	bl	9b28 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    29b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    29b6:	2b00      	cmp	r3, #0
    29b8:	d047      	beq.n	2a4a <loop+0x25a>
		if (file) return File(new SDFile(file));
    29ba:	205c      	movs	r0, #92	; 0x5c
    29bc:	f00a fb4a 	bl	d054 <operator new(unsigned int)>
    29c0:	4604      	mov	r4, r0
class FileImpl {
    29c2:	2500      	movs	r5, #0
    29c4:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    29c6:	4b56      	ldr	r3, [pc, #344]	; (2b20 <loop+0x330>)
    29c8:	6003      	str	r3, [r0, #0]
class Print
    29ca:	9b05      	ldr	r3, [sp, #20]
    29cc:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    29ce:	4b55      	ldr	r3, [pc, #340]	; (2b24 <loop+0x334>)
    29d0:	6083      	str	r3, [r0, #8]
    29d2:	9b06      	ldr	r3, [sp, #24]
    29d4:	6103      	str	r3, [r0, #16]
    29d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
    29da:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    29dc:	a908      	add	r1, sp, #32
    29de:	3018      	adds	r0, #24
    29e0:	f006 ff6b 	bl	98ba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    29e4:	4b50      	ldr	r3, [pc, #320]	; (2b28 <loop+0x338>)
    29e6:	60a3      	str	r3, [r4, #8]
    29e8:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    29ea:	6863      	ldr	r3, [r4, #4]
    29ec:	3301      	adds	r3, #1
    29ee:	6063      	str	r3, [r4, #4]
    29f0:	4b4e      	ldr	r3, [pc, #312]	; (2b2c <loop+0x33c>)
    29f2:	9304      	str	r3, [sp, #16]
  ~FsBaseFile() {close();}
    29f4:	a808      	add	r0, sp, #32
    29f6:	f006 ffa1 	bl	993c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    29fa:	4b4d      	ldr	r3, [pc, #308]	; (2b30 <loop+0x340>)
    29fc:	691b      	ldr	r3, [r3, #16]
    29fe:	2b00      	cmp	r3, #0
    2a00:	f000 80a0 	beq.w	2b44 <loop+0x354>
		if (--(f->refcount) == 0) {
    2a04:	685a      	ldr	r2, [r3, #4]
    2a06:	3a01      	subs	r2, #1
    2a08:	605a      	str	r2, [r3, #4]
    2a0a:	b94a      	cbnz	r2, 2a20 <loop+0x230>
			f->close();
    2a0c:	4d48      	ldr	r5, [pc, #288]	; (2b30 <loop+0x340>)
    2a0e:	6928      	ldr	r0, [r5, #16]
    2a10:	6803      	ldr	r3, [r0, #0]
    2a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2a14:	4798      	blx	r3
			delete f;
    2a16:	6928      	ldr	r0, [r5, #16]
    2a18:	b110      	cbz	r0, 2a20 <loop+0x230>
    2a1a:	6803      	ldr	r3, [r0, #0]
    2a1c:	685b      	ldr	r3, [r3, #4]
    2a1e:	4798      	blx	r3
		f = file.f;
    2a20:	4b43      	ldr	r3, [pc, #268]	; (2b30 <loop+0x340>)
    2a22:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    2a24:	2c00      	cmp	r4, #0
    2a26:	f040 808f 	bne.w	2b48 <loop+0x358>
							  return write((const uint8_t *)str, strlen(str)); }
    2a2a:	4c42      	ldr	r4, [pc, #264]	; (2b34 <loop+0x344>)
    2a2c:	6823      	ldr	r3, [r4, #0]
    2a2e:	685b      	ldr	r3, [r3, #4]
    2a30:	2219      	movs	r2, #25
    2a32:	4941      	ldr	r1, [pc, #260]	; (2b38 <loop+0x348>)
    2a34:	4620      	mov	r0, r4
    2a36:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2a38:	4620      	mov	r0, r4
    2a3a:	f009 fc84 	bl	c346 <Print::println()>
  }
    2a3e:	4668      	mov	r0, sp
    2a40:	f009 fee6 	bl	c810 <String::~String()>
    2a44:	e711      	b.n	286a <loop+0x7a>
    2a46:	4a3d      	ldr	r2, [pc, #244]	; (2b3c <loop+0x34c>)
    2a48:	e7ae      	b.n	29a8 <loop+0x1b8>
  bool isOpen() const {return m_fFile || m_xFile;}
    2a4a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    2a4c:	2c00      	cmp	r4, #0
    2a4e:	d1b4      	bne.n	29ba <loop+0x1ca>
    2a50:	4b36      	ldr	r3, [pc, #216]	; (2b2c <loop+0x33c>)
    2a52:	9304      	str	r3, [sp, #16]
  ~FsBaseFile() {close();}
    2a54:	a808      	add	r0, sp, #32
    2a56:	f006 ff71 	bl	993c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    2a5a:	4b35      	ldr	r3, [pc, #212]	; (2b30 <loop+0x340>)
    2a5c:	691b      	ldr	r3, [r3, #16]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d1d0      	bne.n	2a04 <loop+0x214>
		f = file.f;
    2a62:	4b33      	ldr	r3, [pc, #204]	; (2b30 <loop+0x340>)
    2a64:	2200      	movs	r2, #0
    2a66:	611a      	str	r2, [r3, #16]
		return (f) ? f->isOpen() : false;
    2a68:	e7df      	b.n	2a2a <loop+0x23a>
		setDesStateSerial(axisToRotate);
    2a6a:	4b35      	ldr	r3, [pc, #212]	; (2b40 <loop+0x350>)
    2a6c:	6818      	ldr	r0, [r3, #0]
    2a6e:	f7fe f94b 	bl	d08 <setDesStateSerial(int)>
    2a72:	e722      	b.n	28ba <loop+0xca>
  	performSineSweep(axisToRotate);
    2a74:	4b32      	ldr	r3, [pc, #200]	; (2b40 <loop+0x350>)
    2a76:	6818      	ldr	r0, [r3, #0]
    2a78:	f7fe f9a6 	bl	dc8 <performSineSweep(int)>
    2a7c:	e722      	b.n	28c4 <loop+0xd4>
		rollStep();
    2a7e:	f7fe fa13 	bl	ea8 <rollStep()>
    2a82:	e727      	b.n	28d4 <loop+0xe4>
		pitchStep();
    2a84:	f7fe fa2c 	bl	ee0 <pitchStep()>
    2a88:	e72b      	b.n	28e2 <loop+0xf2>
		ripPID();
    2a8a:	f000 fdb5 	bl	35f8 <ripPID()>
    2a8e:	e733      	b.n	28f8 <loop+0x108>
    2a90:	00000000 	.word	0x00000000
    2a94:	412e8480 	.word	0x412e8480
    2a98:	2000508c 	.word	0x2000508c
    2a9c:	20004f58 	.word	0x20004f58
    2aa0:	20004fd8 	.word	0x20004fd8
    2aa4:	20004f48 	.word	0x20004f48
    2aa8:	20005302 	.word	0x20005302
    2aac:	20004f4c 	.word	0x20004f4c
    2ab0:	200052fe 	.word	0x200052fe
    2ab4:	200052f2 	.word	0x200052f2
    2ab8:	200039f4 	.word	0x200039f4
    2abc:	20004088 	.word	0x20004088
    2ac0:	200040b0 	.word	0x200040b0
    2ac4:	200040a8 	.word	0x200040a8
    2ac8:	20004098 	.word	0x20004098
    2acc:	20004090 	.word	0x20004090
    2ad0:	200040a0 	.word	0x200040a0
    2ad4:	2000530f 	.word	0x2000530f
    2ad8:	20004f50 	.word	0x20004f50
    2adc:	200050e4 	.word	0x200050e4
    2ae0:	20005290 	.word	0x20005290
    2ae4:	200050ec 	.word	0x200050ec
    2ae8:	20005294 	.word	0x20005294
    2aec:	200050f4 	.word	0x200050f4
    2af0:	20005298 	.word	0x20005298
    2af4:	200050fc 	.word	0x200050fc
    2af8:	2000529c 	.word	0x2000529c
    2afc:	20005104 	.word	0x20005104
    2b00:	200052a0 	.word	0x200052a0
    2b04:	2000510c 	.word	0x2000510c
    2b08:	200052a4 	.word	0x200052a4
    2b0c:	20005114 	.word	0x20005114
    2b10:	200052a8 	.word	0x200052a8
    2b14:	200052b4 	.word	0x200052b4
    2b18:	2000501c 	.word	0x2000501c
    2b1c:	200040e0 	.word	0x200040e0
    2b20:	200023d4 	.word	0x200023d4
    2b24:	20002430 	.word	0x20002430
    2b28:	200023b0 	.word	0x200023b0
    2b2c:	200022a4 	.word	0x200022a4
    2b30:	20003944 	.word	0x20003944
    2b34:	200032c8 	.word	0x200032c8
    2b38:	20002bb0 	.word	0x20002bb0
    2b3c:	20003140 	.word	0x20003140
    2b40:	200038e4 	.word	0x200038e4
		f = file.f;
    2b44:	4b14      	ldr	r3, [pc, #80]	; (2b98 <loop+0x3a8>)
    2b46:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    2b48:	6823      	ldr	r3, [r4, #0]
    2b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b4c:	4620      	mov	r0, r4
    2b4e:	4798      	blx	r3
    if (dataFile) {
    2b50:	2800      	cmp	r0, #0
    2b52:	f43f af6a 	beq.w	2a2a <loop+0x23a>
	size_t println(const String &s)			{ return print(s) + println(); }
    2b56:	4c10      	ldr	r4, [pc, #64]	; (2b98 <loop+0x3a8>)
    2b58:	4669      	mov	r1, sp
    2b5a:	4620      	mov	r0, r4
    2b5c:	f009 fbce 	bl	c2fc <Print::print(String const&)>
    2b60:	4620      	mov	r0, r4
    2b62:	f009 fbf0 	bl	c346 <Print::println()>
		if (f) {
    2b66:	6920      	ldr	r0, [r4, #16]
    2b68:	2800      	cmp	r0, #0
    2b6a:	f43f af68 	beq.w	2a3e <loop+0x24e>
			f->close();
    2b6e:	6803      	ldr	r3, [r0, #0]
    2b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b72:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    2b74:	6922      	ldr	r2, [r4, #16]
    2b76:	6853      	ldr	r3, [r2, #4]
    2b78:	3b01      	subs	r3, #1
    2b7a:	6053      	str	r3, [r2, #4]
    2b7c:	b943      	cbnz	r3, 2b90 <loop+0x3a0>
			f->close();
    2b7e:	6920      	ldr	r0, [r4, #16]
    2b80:	6803      	ldr	r3, [r0, #0]
    2b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b84:	4798      	blx	r3
			delete f;
    2b86:	6920      	ldr	r0, [r4, #16]
    2b88:	b110      	cbz	r0, 2b90 <loop+0x3a0>
    2b8a:	6803      	ldr	r3, [r0, #0]
    2b8c:	685b      	ldr	r3, [r3, #4]
    2b8e:	4798      	blx	r3
		}
		f = nullptr;
    2b90:	4b01      	ldr	r3, [pc, #4]	; (2b98 <loop+0x3a8>)
    2b92:	2200      	movs	r2, #0
    2b94:	611a      	str	r2, [r3, #16]
	}
    2b96:	e752      	b.n	2a3e <loop+0x24e>
    2b98:	20003944 	.word	0x20003944

00002b9c <radioSetup()>:
unsigned long channel_1_raw, channel_2_raw, channel_3_raw, channel_4_raw, channel_5_raw, 
							channel_6_raw, channel_7_raw, channel_8_raw, channel_9_raw;
int ppm_counter = 0;
unsigned long time_ms = 0;

void radioSetup() {
    2b9c:	b508      	push	{r3, lr}
    attachInterrupt(digitalPinToInterrupt(ch6Pin), getCh6, CHANGE);
    delay(20);

  //SBUS Recevier 
  #elif defined USE_SBUS_RX
    sbus.begin();
    2b9e:	4802      	ldr	r0, [pc, #8]	; (2ba8 <radioSetup()+0xc>)
    2ba0:	f001 f950 	bl	3e44 <SBUS::begin()>
  #elif defined USE_DSM_RX
    Serial3.begin(115000);
  #else
    #error No RX type defined...
  #endif
}
    2ba4:	bd08      	pop	{r3, pc}
    2ba6:	bf00      	nop
    2ba8:	2000512c 	.word	0x2000512c

00002bac <setup>:
void setup() {
    2bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bae:	b0a5      	sub	sp, #148	; 0x94
		uint32_t millis_begin = systick_millis_count;
    2bb0:	4b97      	ldr	r3, [pc, #604]	; (2e10 <setup+0x264>)
    2bb2:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2bb4:	4c97      	ldr	r4, [pc, #604]	; (2e14 <setup+0x268>)
    2bb6:	4f98      	ldr	r7, [pc, #608]	; (2e18 <setup+0x26c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2bb8:	461d      	mov	r5, r3
		while (!(*this)) {
    2bba:	e004      	b.n	2bc6 <setup+0x1a>
				if (elapsed > 2000) break;
    2bbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2bc0:	d813      	bhi.n	2bea <setup+0x3e>
			yield();
    2bc2:	f00c f80d 	bl	ebe0 <yield>
		yield();
    2bc6:	f00c f80b 	bl	ebe0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2bca:	7823      	ldrb	r3, [r4, #0]
    2bcc:	2b00      	cmp	r3, #0
    2bce:	f000 8236 	beq.w	303e <setup+0x492>
    2bd2:	783b      	ldrb	r3, [r7, #0]
    2bd4:	f013 0f01 	tst.w	r3, #1
    2bd8:	f000 8231 	beq.w	303e <setup+0x492>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2bdc:	682b      	ldr	r3, [r5, #0]
    2bde:	4a8f      	ldr	r2, [pc, #572]	; (2e1c <setup+0x270>)
    2be0:	6812      	ldr	r2, [r2, #0]
    2be2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2be4:	2b0e      	cmp	r3, #14
    2be6:	f240 822a 	bls.w	303e <setup+0x492>
  delay(500);
    2bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2bee:	f00a f903 	bl	cdf8 <delay>
  pinMode(13, OUTPUT); //Pin 13 LED blinker on board, do not modify 
    2bf2:	2101      	movs	r1, #1
    2bf4:	200d      	movs	r0, #13
    2bf6:	f00a f94d 	bl	ce94 <pinMode>
  pinMode(m1Pin, OUTPUT);
    2bfa:	2101      	movs	r1, #1
    2bfc:	2000      	movs	r0, #0
    2bfe:	f00a f949 	bl	ce94 <pinMode>
  pinMode(m2Pin, OUTPUT);
    2c02:	2101      	movs	r1, #1
    2c04:	4608      	mov	r0, r1
    2c06:	f00a f945 	bl	ce94 <pinMode>
  pinMode(m3Pin, OUTPUT);
    2c0a:	2101      	movs	r1, #1
    2c0c:	2002      	movs	r0, #2
    2c0e:	f00a f941 	bl	ce94 <pinMode>
  pinMode(m4Pin, OUTPUT);
    2c12:	2101      	movs	r1, #1
    2c14:	2003      	movs	r0, #3
    2c16:	f00a f93d 	bl	ce94 <pinMode>
  pinMode(m5Pin, OUTPUT);
    2c1a:	2101      	movs	r1, #1
    2c1c:	2004      	movs	r0, #4
    2c1e:	f00a f939 	bl	ce94 <pinMode>
  pinMode(m6Pin, OUTPUT);
    2c22:	2101      	movs	r1, #1
    2c24:	2005      	movs	r0, #5
    2c26:	f00a f935 	bl	ce94 <pinMode>
  servo1.attach(servo1Pin, 1000, 2100); //Pin, min PWM value, max PWM value
    2c2a:	f640 0334 	movw	r3, #2100	; 0x834
    2c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c32:	2106      	movs	r1, #6
    2c34:	487a      	ldr	r0, [pc, #488]	; (2e20 <setup+0x274>)
    2c36:	f001 ff11 	bl	4a5c <PWMServo::attach(int, int, int)>
  servo2.attach(servo2Pin, 1000, 2100);
    2c3a:	f640 0334 	movw	r3, #2100	; 0x834
    2c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c42:	2107      	movs	r1, #7
    2c44:	4877      	ldr	r0, [pc, #476]	; (2e24 <setup+0x278>)
    2c46:	f001 ff09 	bl	4a5c <PWMServo::attach(int, int, int)>
  servo3.attach(servo3Pin, 1000, 2100);
    2c4a:	f640 0334 	movw	r3, #2100	; 0x834
    2c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c52:	210a      	movs	r1, #10
    2c54:	4874      	ldr	r0, [pc, #464]	; (2e28 <setup+0x27c>)
    2c56:	f001 ff01 	bl	4a5c <PWMServo::attach(int, int, int)>
  servo4.attach(servo4Pin, 1000, 2100);
    2c5a:	f640 0334 	movw	r3, #2100	; 0x834
    2c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c62:	2109      	movs	r1, #9
    2c64:	4871      	ldr	r0, [pc, #452]	; (2e2c <setup+0x280>)
    2c66:	f001 fef9 	bl	4a5c <PWMServo::attach(int, int, int)>
  servo5.attach(servo5Pin, 1000, 2100);
    2c6a:	f640 0334 	movw	r3, #2100	; 0x834
    2c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c72:	2108      	movs	r1, #8
    2c74:	486e      	ldr	r0, [pc, #440]	; (2e30 <setup+0x284>)
    2c76:	f001 fef1 	bl	4a5c <PWMServo::attach(int, int, int)>
  servo6.attach(servo6Pin, 1000, 2100);
    2c7a:	f640 0334 	movw	r3, #2100	; 0x834
    2c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c82:	210b      	movs	r1, #11
    2c84:	486b      	ldr	r0, [pc, #428]	; (2e34 <setup+0x288>)
    2c86:	f001 fee9 	bl	4a5c <PWMServo::attach(int, int, int)>
  servo7.attach(servo7Pin, 1000, 2100);
    2c8a:	f640 0334 	movw	r3, #2100	; 0x834
    2c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c92:	210c      	movs	r1, #12
    2c94:	4868      	ldr	r0, [pc, #416]	; (2e38 <setup+0x28c>)
    2c96:	f001 fee1 	bl	4a5c <PWMServo::attach(int, int, int)>
#elif defined(__arm__) && defined(TEENSYDUINO)
    static uint32_t attachedpins[]; // 1 bit per digital pin
#endif
  public:
    PWMServo();
    uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
    2c9a:	f44f 6316 	mov.w	r3, #2400	; 0x960
    2c9e:	f44f 7208 	mov.w	r2, #544	; 0x220
    2ca2:	2118      	movs	r1, #24
    2ca4:	4865      	ldr	r0, [pc, #404]	; (2e3c <setup+0x290>)
    2ca6:	f001 fed9 	bl	4a5c <PWMServo::attach(int, int, int)>
  closeIris();
    2caa:	f7fe ff77 	bl	1b9c <closeIris()>
  delay(1000);
    2cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2cb2:	f00a f8a1 	bl	cdf8 <delay>
	getJoyAngle();
    2cb6:	f7fe fecb 	bl	1a50 <getJoyAngle()>
	alphaOffset = -alpha;
    2cba:	4e61      	ldr	r6, [pc, #388]	; (2e40 <setup+0x294>)
    2cbc:	4b61      	ldr	r3, [pc, #388]	; (2e44 <setup+0x298>)
    2cbe:	edd3 7a00 	vldr	s15, [r3]
    2cc2:	eef1 7a67 	vneg.f32	s15, s15
    2cc6:	edc6 7a00 	vstr	s15, [r6]
	betaOffset = -beta;
    2cca:	4d5f      	ldr	r5, [pc, #380]	; (2e48 <setup+0x29c>)
    2ccc:	4b5f      	ldr	r3, [pc, #380]	; (2e4c <setup+0x2a0>)
    2cce:	edd3 7a00 	vldr	s15, [r3]
    2cd2:	eef1 7a67 	vneg.f32	s15, s15
    2cd6:	edc5 7a00 	vstr	s15, [r5]
							  return write((const uint8_t *)str, strlen(str)); }
    2cda:	4c5d      	ldr	r4, [pc, #372]	; (2e50 <setup+0x2a4>)
    2cdc:	6823      	ldr	r3, [r4, #0]
    2cde:	685b      	ldr	r3, [r3, #4]
    2ce0:	220d      	movs	r2, #13
    2ce2:	495c      	ldr	r1, [pc, #368]	; (2e54 <setup+0x2a8>)
    2ce4:	4620      	mov	r0, r4
    2ce6:	4798      	blx	r3
	Serial.print(alphaOffset);
    2ce8:	ed96 0a00 	vldr	s0, [r6]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2cec:	2102      	movs	r1, #2
    2cee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2cf2:	4620      	mov	r0, r4
    2cf4:	f009 fb88 	bl	c408 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2cf8:	6823      	ldr	r3, [r4, #0]
    2cfa:	685b      	ldr	r3, [r3, #4]
    2cfc:	220c      	movs	r2, #12
    2cfe:	4956      	ldr	r1, [pc, #344]	; (2e58 <setup+0x2ac>)
    2d00:	4620      	mov	r0, r4
    2d02:	4798      	blx	r3
	Serial.print(betaOffset);
    2d04:	ed95 0a00 	vldr	s0, [r5]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2d08:	2102      	movs	r1, #2
    2d0a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2d0e:	4620      	mov	r0, r4
    2d10:	f009 fb7a 	bl	c408 <Print::printFloat(double, unsigned char)>
  digitalWrite(13, HIGH);
    2d14:	2101      	movs	r1, #1
    2d16:	200d      	movs	r0, #13
    2d18:	f00a f884 	bl	ce24 <digitalWrite>
  delay(5);
    2d1c:	2005      	movs	r0, #5
    2d1e:	f00a f86b 	bl	cdf8 <delay>
							  return write((const uint8_t *)str, strlen(str)); }
    2d22:	6823      	ldr	r3, [r4, #0]
    2d24:	685b      	ldr	r3, [r3, #4]
    2d26:	2217      	movs	r2, #23
    2d28:	494c      	ldr	r1, [pc, #304]	; (2e5c <setup+0x2b0>)
    2d2a:	4620      	mov	r0, r4
    2d2c:	4798      	blx	r3
  if (SD.begin(chipSelect)) {
    2d2e:	21fe      	movs	r1, #254	; 0xfe
    2d30:	484b      	ldr	r0, [pc, #300]	; (2e60 <setup+0x2b4>)
    2d32:	f002 f92d 	bl	4f90 <SDClass::begin(unsigned char)>
    2d36:	2800      	cmp	r0, #0
    2d38:	f000 8173 	beq.w	3022 <setup+0x476>
    2d3c:	6823      	ldr	r3, [r4, #0]
    2d3e:	685b      	ldr	r3, [r3, #4]
    2d40:	2211      	movs	r2, #17
    2d42:	4948      	ldr	r1, [pc, #288]	; (2e64 <setup+0x2b8>)
    2d44:	4620      	mov	r0, r4
    2d46:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2d48:	4620      	mov	r0, r4
    2d4a:	f009 fafc 	bl	c346 <Print::println()>
		SD_is_present = 1;
    2d4e:	4b46      	ldr	r3, [pc, #280]	; (2e68 <setup+0x2bc>)
    2d50:	2201      	movs	r2, #1
    2d52:	701a      	strb	r2, [r3, #0]
	StringSumHelper(const String &s) : String(s) {}
    2d54:	4945      	ldr	r1, [pc, #276]	; (2e6c <setup+0x2c0>)
    2d56:	a814      	add	r0, sp, #80	; 0x50
    2d58:	f009 fdd5 	bl	c906 <String::String(String const&)>
		fileName = filePrefix + String(fileIncrement) + fileExtension;
    2d5c:	220a      	movs	r2, #10
    2d5e:	2100      	movs	r1, #0
    2d60:	a818      	add	r0, sp, #96	; 0x60
    2d62:	f009 fdf4 	bl	c94e <String::String(int, unsigned char)>
    2d66:	a918      	add	r1, sp, #96	; 0x60
    2d68:	a814      	add	r0, sp, #80	; 0x50
    2d6a:	f009 fe4f 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
    2d6e:	4940      	ldr	r1, [pc, #256]	; (2e70 <setup+0x2c4>)
    2d70:	f009 fe4c 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
    2d74:	4601      	mov	r1, r0
    2d76:	483f      	ldr	r0, [pc, #252]	; (2e74 <setup+0x2c8>)
    2d78:	f009 fdbb 	bl	c8f2 <String::operator=(String const&)>
    2d7c:	a818      	add	r0, sp, #96	; 0x60
    2d7e:	f009 fd47 	bl	c810 <String::~String()>
class StringSumHelper : public String
    2d82:	a814      	add	r0, sp, #80	; 0x50
    2d84:	f009 fd44 	bl	c810 <String::~String()>
		int fileIncrement = 0;
    2d88:	2400      	movs	r4, #0
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2d8a:	4d3a      	ldr	r5, [pc, #232]	; (2e74 <setup+0x2c8>)
    2d8c:	4f3a      	ldr	r7, [pc, #232]	; (2e78 <setup+0x2cc>)
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    2d8e:	4e34      	ldr	r6, [pc, #208]	; (2e60 <setup+0x2b4>)
		while(SD.exists(fileName.c_str())) {
    2d90:	e02a      	b.n	2de8 <setup+0x23c>
           m_xVol ? m_xVol->exists(path) : false;
    2d92:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
    2d96:	2900      	cmp	r1, #0
    2d98:	d070      	beq.n	2e7c <setup+0x2d0>
  ExFatFile() {}
    2d9a:	2300      	movs	r3, #0
    2d9c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2da0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    2da4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2da8:	4668      	mov	r0, sp
    2daa:	f002 feda 	bl	5b62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2dae:	2800      	cmp	r0, #0
    2db0:	d064      	beq.n	2e7c <setup+0x2d0>
			fileIncrement++;
    2db2:	3401      	adds	r4, #1
	StringSumHelper(const String &s) : String(s) {}
    2db4:	492d      	ldr	r1, [pc, #180]	; (2e6c <setup+0x2c0>)
    2db6:	a81c      	add	r0, sp, #112	; 0x70
    2db8:	f009 fda5 	bl	c906 <String::String(String const&)>
			fileName = filePrefix + String(fileIncrement) + fileExtension;
    2dbc:	220a      	movs	r2, #10
    2dbe:	4621      	mov	r1, r4
    2dc0:	a820      	add	r0, sp, #128	; 0x80
    2dc2:	f009 fdc4 	bl	c94e <String::String(int, unsigned char)>
    2dc6:	a920      	add	r1, sp, #128	; 0x80
    2dc8:	a81c      	add	r0, sp, #112	; 0x70
    2dca:	f009 fe1f 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
    2dce:	4928      	ldr	r1, [pc, #160]	; (2e70 <setup+0x2c4>)
    2dd0:	f009 fe1c 	bl	ca0c <operator+(StringSumHelper const&, String const&)>
    2dd4:	4601      	mov	r1, r0
    2dd6:	4628      	mov	r0, r5
    2dd8:	f009 fd8b 	bl	c8f2 <String::operator=(String const&)>
    2ddc:	a820      	add	r0, sp, #128	; 0x80
    2dde:	f009 fd17 	bl	c810 <String::~String()>
class StringSumHelper : public String
    2de2:	a81c      	add	r0, sp, #112	; 0x70
    2de4:	f009 fd14 	bl	c810 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2de8:	682a      	ldr	r2, [r5, #0]
    2dea:	2a00      	cmp	r2, #0
    2dec:	bf08      	it	eq
    2dee:	463a      	moveq	r2, r7
    return m_fVol ? m_fVol->exists(path) :
    2df0:	f8d6 1484 	ldr.w	r1, [r6, #1156]	; 0x484
    2df4:	2900      	cmp	r1, #0
    2df6:	d0cc      	beq.n	2d92 <setup+0x1e6>
  FatFile() {}
    2df8:	2300      	movs	r3, #0
    2dfa:	f88d 3000 	strb.w	r3, [sp]
    2dfe:	f88d 3001 	strb.w	r3, [sp, #1]
    2e02:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2e06:	4668      	mov	r0, sp
    2e08:	f004 fe4f 	bl	7aaa <FatFile::open(FatVolume*, char const*, int)>
    2e0c:	e7cf      	b.n	2dae <setup+0x202>
    2e0e:	bf00      	nop
    2e10:	200052bc 	.word	0x200052bc
    2e14:	2000530c 	.word	0x2000530c
    2e18:	2000530b 	.word	0x2000530b
    2e1c:	200052d0 	.word	0x200052d0
    2e20:	20005290 	.word	0x20005290
    2e24:	20005294 	.word	0x20005294
    2e28:	20005298 	.word	0x20005298
    2e2c:	2000529c 	.word	0x2000529c
    2e30:	200052a0 	.word	0x200052a0
    2e34:	200052a4 	.word	0x200052a4
    2e38:	200052a8 	.word	0x200052a8
    2e3c:	20005050 	.word	0x20005050
    2e40:	20004ecc 	.word	0x20004ecc
    2e44:	20004ec4 	.word	0x20004ec4
    2e48:	20004ee0 	.word	0x20004ee0
    2e4c:	20004ed8 	.word	0x20004ed8
    2e50:	200032c8 	.word	0x200032c8
    2e54:	20002d60 	.word	0x20002d60
    2e58:	20002d70 	.word	0x20002d70
    2e5c:	20002d80 	.word	0x20002d80
    2e60:	200040dc 	.word	0x200040dc
    2e64:	20002d98 	.word	0x20002d98
    2e68:	200052f2 	.word	0x200052f2
    2e6c:	2000502c 	.word	0x2000502c
    2e70:	2000500c 	.word	0x2000500c
    2e74:	2000501c 	.word	0x2000501c
    2e78:	20003140 	.word	0x20003140
    2e7c:	4b76      	ldr	r3, [pc, #472]	; (3058 <setup+0x4ac>)
    2e7e:	681a      	ldr	r2, [r3, #0]
    2e80:	2a00      	cmp	r2, #0
    2e82:	f000 80c7 	beq.w	3014 <setup+0x468>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2e86:	f244 2302 	movw	r3, #16898	; 0x4202
    2e8a:	4974      	ldr	r1, [pc, #464]	; (305c <setup+0x4b0>)
    2e8c:	4668      	mov	r0, sp
    2e8e:	f006 fe4b 	bl	9b28 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2e94:	2b00      	cmp	r3, #0
    2e96:	f000 80bf 	beq.w	3018 <setup+0x46c>
		if (file) return File(new SDFile(file));
    2e9a:	205c      	movs	r0, #92	; 0x5c
    2e9c:	f00a f8da 	bl	d054 <operator new(unsigned int)>
    2ea0:	4604      	mov	r4, r0
class FileImpl {
    2ea2:	2500      	movs	r5, #0
    2ea4:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2ea6:	4b6e      	ldr	r3, [pc, #440]	; (3060 <setup+0x4b4>)
    2ea8:	6003      	str	r3, [r0, #0]
class Print
    2eaa:	9b01      	ldr	r3, [sp, #4]
    2eac:	60c3      	str	r3, [r0, #12]
    2eae:	4b6d      	ldr	r3, [pc, #436]	; (3064 <setup+0x4b8>)
    2eb0:	6083      	str	r3, [r0, #8]
    2eb2:	9b02      	ldr	r3, [sp, #8]
    2eb4:	6103      	str	r3, [r0, #16]
    2eb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2eba:	7503      	strb	r3, [r0, #20]
    2ebc:	a904      	add	r1, sp, #16
    2ebe:	3018      	adds	r0, #24
    2ec0:	f006 fcfb 	bl	98ba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2ec4:	4b68      	ldr	r3, [pc, #416]	; (3068 <setup+0x4bc>)
    2ec6:	60a3      	str	r3, [r4, #8]
    2ec8:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    2eca:	6863      	ldr	r3, [r4, #4]
    2ecc:	3301      	adds	r3, #1
    2ece:	6063      	str	r3, [r4, #4]
    2ed0:	4b66      	ldr	r3, [pc, #408]	; (306c <setup+0x4c0>)
    2ed2:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    2ed4:	a804      	add	r0, sp, #16
    2ed6:	f006 fd31 	bl	993c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    2eda:	4b65      	ldr	r3, [pc, #404]	; (3070 <setup+0x4c4>)
    2edc:	691b      	ldr	r3, [r3, #16]
    2ede:	b16b      	cbz	r3, 2efc <setup+0x350>
		if (--(f->refcount) == 0) {
    2ee0:	685a      	ldr	r2, [r3, #4]
    2ee2:	3a01      	subs	r2, #1
    2ee4:	605a      	str	r2, [r3, #4]
    2ee6:	b94a      	cbnz	r2, 2efc <setup+0x350>
			f->close();
    2ee8:	4d61      	ldr	r5, [pc, #388]	; (3070 <setup+0x4c4>)
    2eea:	6928      	ldr	r0, [r5, #16]
    2eec:	6803      	ldr	r3, [r0, #0]
    2eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ef0:	4798      	blx	r3
			delete f;
    2ef2:	6928      	ldr	r0, [r5, #16]
    2ef4:	b110      	cbz	r0, 2efc <setup+0x350>
    2ef6:	6803      	ldr	r3, [r0, #0]
    2ef8:	685b      	ldr	r3, [r3, #4]
    2efa:	4798      	blx	r3
		f = file.f;
    2efc:	4d5c      	ldr	r5, [pc, #368]	; (3070 <setup+0x4c4>)
    2efe:	612c      	str	r4, [r5, #16]
			"roll_imu,pitch_imu,yaw_imu,alpha,beta,roll_des,pitch_des,yaw_des,throttle_des,roll_pid,pitch_pid,yaw_pid,radio_ch1,radio_ch2,radio_ch3,radio_ch4,radio_ch5,radio_ch6,radio_ch7,radio_ch8,radio_ch9,radio_ch10,radio_ch11,radio_ch12,radio_ch13,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,s1_command,s2_command,s3_command,s4_command,kp_roll,ki_roll,kd_roll,kp_pitch,ki_pitch,kd_pitch,kp_yaw,ki_yaw,kd_yaw,failsafeTriggered";
    2f00:	495c      	ldr	r1, [pc, #368]	; (3074 <setup+0x4c8>)
    2f02:	4668      	mov	r0, sp
    2f04:	f009 fccd 	bl	c8a2 <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    2f08:	4669      	mov	r1, sp
    2f0a:	4628      	mov	r0, r5
    2f0c:	f009 f9f6 	bl	c2fc <Print::print(String const&)>
    2f10:	4628      	mov	r0, r5
    2f12:	f009 fa18 	bl	c346 <Print::println()>
		if (f) {
    2f16:	6928      	ldr	r0, [r5, #16]
    2f18:	b198      	cbz	r0, 2f42 <setup+0x396>
			f->close();
    2f1a:	6803      	ldr	r3, [r0, #0]
    2f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f1e:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    2f20:	692a      	ldr	r2, [r5, #16]
    2f22:	6853      	ldr	r3, [r2, #4]
    2f24:	3b01      	subs	r3, #1
    2f26:	6053      	str	r3, [r2, #4]
    2f28:	b943      	cbnz	r3, 2f3c <setup+0x390>
			f->close();
    2f2a:	6928      	ldr	r0, [r5, #16]
    2f2c:	6803      	ldr	r3, [r0, #0]
    2f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f30:	4798      	blx	r3
			delete f;
    2f32:	6928      	ldr	r0, [r5, #16]
    2f34:	b110      	cbz	r0, 2f3c <setup+0x390>
    2f36:	6803      	ldr	r3, [r0, #0]
    2f38:	685b      	ldr	r3, [r3, #4]
    2f3a:	4798      	blx	r3
		f = nullptr;
    2f3c:	4b4c      	ldr	r3, [pc, #304]	; (3070 <setup+0x4c4>)
    2f3e:	2200      	movs	r2, #0
    2f40:	611a      	str	r2, [r3, #16]
  }
    2f42:	4668      	mov	r0, sp
    2f44:	f009 fc64 	bl	c810 <String::~String()>
  radioSetup();
    2f48:	f7ff fe28 	bl	2b9c <radioSetup()>
  channel_1_pwm = channel_1_fs;
    2f4c:	4b4a      	ldr	r3, [pc, #296]	; (3078 <setup+0x4cc>)
    2f4e:	681a      	ldr	r2, [r3, #0]
    2f50:	4b4a      	ldr	r3, [pc, #296]	; (307c <setup+0x4d0>)
    2f52:	601a      	str	r2, [r3, #0]
  channel_2_pwm = channel_2_fs;
    2f54:	4b4a      	ldr	r3, [pc, #296]	; (3080 <setup+0x4d4>)
    2f56:	681a      	ldr	r2, [r3, #0]
    2f58:	4b4a      	ldr	r3, [pc, #296]	; (3084 <setup+0x4d8>)
    2f5a:	601a      	str	r2, [r3, #0]
  channel_3_pwm = channel_3_fs;
    2f5c:	4b4a      	ldr	r3, [pc, #296]	; (3088 <setup+0x4dc>)
    2f5e:	681a      	ldr	r2, [r3, #0]
    2f60:	4b4a      	ldr	r3, [pc, #296]	; (308c <setup+0x4e0>)
    2f62:	601a      	str	r2, [r3, #0]
  channel_4_pwm = channel_4_fs;
    2f64:	4b4a      	ldr	r3, [pc, #296]	; (3090 <setup+0x4e4>)
    2f66:	681a      	ldr	r2, [r3, #0]
    2f68:	4b4a      	ldr	r3, [pc, #296]	; (3094 <setup+0x4e8>)
    2f6a:	601a      	str	r2, [r3, #0]
  channel_5_pwm = channel_5_fs;
    2f6c:	4b4a      	ldr	r3, [pc, #296]	; (3098 <setup+0x4ec>)
    2f6e:	681a      	ldr	r2, [r3, #0]
    2f70:	4b4a      	ldr	r3, [pc, #296]	; (309c <setup+0x4f0>)
    2f72:	601a      	str	r2, [r3, #0]
  channel_6_pwm = channel_6_fs;
    2f74:	4b4a      	ldr	r3, [pc, #296]	; (30a0 <setup+0x4f4>)
    2f76:	681a      	ldr	r2, [r3, #0]
    2f78:	4b4a      	ldr	r3, [pc, #296]	; (30a4 <setup+0x4f8>)
    2f7a:	601a      	str	r2, [r3, #0]
	channel_7_pwm = channel_7_fs;
    2f7c:	4b4a      	ldr	r3, [pc, #296]	; (30a8 <setup+0x4fc>)
    2f7e:	681a      	ldr	r2, [r3, #0]
    2f80:	4b4a      	ldr	r3, [pc, #296]	; (30ac <setup+0x500>)
    2f82:	601a      	str	r2, [r3, #0]
	channel_8_pwm = channel_8_fs;
    2f84:	4b4a      	ldr	r3, [pc, #296]	; (30b0 <setup+0x504>)
    2f86:	681a      	ldr	r2, [r3, #0]
    2f88:	4b4a      	ldr	r3, [pc, #296]	; (30b4 <setup+0x508>)
    2f8a:	601a      	str	r2, [r3, #0]
	channel_9_pwm = channel_9_fs;
    2f8c:	4b4a      	ldr	r3, [pc, #296]	; (30b8 <setup+0x50c>)
    2f8e:	681a      	ldr	r2, [r3, #0]
    2f90:	4b4a      	ldr	r3, [pc, #296]	; (30bc <setup+0x510>)
    2f92:	601a      	str	r2, [r3, #0]
	channel_10_pwm = channel_10_fs;
    2f94:	4b4a      	ldr	r3, [pc, #296]	; (30c0 <setup+0x514>)
    2f96:	681a      	ldr	r2, [r3, #0]
    2f98:	4b4a      	ldr	r3, [pc, #296]	; (30c4 <setup+0x518>)
    2f9a:	601a      	str	r2, [r3, #0]
	channel_11_pwm = channel_11_fs;
    2f9c:	4b4a      	ldr	r3, [pc, #296]	; (30c8 <setup+0x51c>)
    2f9e:	681a      	ldr	r2, [r3, #0]
    2fa0:	4b4a      	ldr	r3, [pc, #296]	; (30cc <setup+0x520>)
    2fa2:	601a      	str	r2, [r3, #0]
	channel_12_pwm = channel_12_fs;
    2fa4:	4b4a      	ldr	r3, [pc, #296]	; (30d0 <setup+0x524>)
    2fa6:	681a      	ldr	r2, [r3, #0]
    2fa8:	4b4a      	ldr	r3, [pc, #296]	; (30d4 <setup+0x528>)
    2faa:	601a      	str	r2, [r3, #0]
	channel_13_pwm = channel_13_fs;
    2fac:	4b4a      	ldr	r3, [pc, #296]	; (30d8 <setup+0x52c>)
    2fae:	681a      	ldr	r2, [r3, #0]
    2fb0:	4b4a      	ldr	r3, [pc, #296]	; (30dc <setup+0x530>)
    2fb2:	601a      	str	r2, [r3, #0]
  IMUinit();
    2fb4:	f7fd fcd0 	bl	958 <IMUinit()>
  delay(5);
    2fb8:	2005      	movs	r0, #5
    2fba:	f009 ff1d 	bl	cdf8 <delay>
  servo1.write(0); //Command servo angle from 0-180 degrees (1000 to 2000 PWM)
    2fbe:	2100      	movs	r1, #0
    2fc0:	4847      	ldr	r0, [pc, #284]	; (30e0 <setup+0x534>)
    2fc2:	f001 fd99 	bl	4af8 <PWMServo::write(int)>
  servo2.write(0); //Set these to 90 for servos if you do not want them to briefly max out on startup
    2fc6:	2100      	movs	r1, #0
    2fc8:	4846      	ldr	r0, [pc, #280]	; (30e4 <setup+0x538>)
    2fca:	f001 fd95 	bl	4af8 <PWMServo::write(int)>
  servo3.write(0); //Keep these at 0 if you are using servo outputs for motors
    2fce:	2100      	movs	r1, #0
    2fd0:	4845      	ldr	r0, [pc, #276]	; (30e8 <setup+0x53c>)
    2fd2:	f001 fd91 	bl	4af8 <PWMServo::write(int)>
  servo4.write(0);
    2fd6:	2100      	movs	r1, #0
    2fd8:	4844      	ldr	r0, [pc, #272]	; (30ec <setup+0x540>)
    2fda:	f001 fd8d 	bl	4af8 <PWMServo::write(int)>
  servo5.write(0);
    2fde:	2100      	movs	r1, #0
    2fe0:	4843      	ldr	r0, [pc, #268]	; (30f0 <setup+0x544>)
    2fe2:	f001 fd89 	bl	4af8 <PWMServo::write(int)>
  servo6.write(0);
    2fe6:	2100      	movs	r1, #0
    2fe8:	4842      	ldr	r0, [pc, #264]	; (30f4 <setup+0x548>)
    2fea:	f001 fd85 	bl	4af8 <PWMServo::write(int)>
  servo7.write(0);
    2fee:	2100      	movs	r1, #0
    2ff0:	4841      	ldr	r0, [pc, #260]	; (30f8 <setup+0x54c>)
    2ff2:	f001 fd81 	bl	4af8 <PWMServo::write(int)>
  delay(5);
    2ff6:	2005      	movs	r0, #5
    2ff8:	f009 fefe 	bl	cdf8 <delay>
	initializePID();
    2ffc:	f000 f942 	bl	3284 <initializePID()>
  setupBlink(3,160,70); //numBlinks, upTime (ms), downTime (ms)
    3000:	2246      	movs	r2, #70	; 0x46
    3002:	21a0      	movs	r1, #160	; 0xa0
    3004:	2003      	movs	r0, #3
    3006:	f7fe fd05 	bl	1a14 <setupBlink(int, int, int)>
	doneWithSetup = 1;
    300a:	4b3c      	ldr	r3, [pc, #240]	; (30fc <setup+0x550>)
    300c:	2201      	movs	r2, #1
    300e:	701a      	strb	r2, [r3, #0]
}
    3010:	b025      	add	sp, #148	; 0x94
    3012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3014:	4a3a      	ldr	r2, [pc, #232]	; (3100 <setup+0x554>)
    3016:	e736      	b.n	2e86 <setup+0x2da>
  bool isOpen() const {return m_fFile || m_xFile;}
    3018:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    301a:	2c00      	cmp	r4, #0
    301c:	f47f af3d 	bne.w	2e9a <setup+0x2ee>
    3020:	e756      	b.n	2ed0 <setup+0x324>
							  return write((const uint8_t *)str, strlen(str)); }
    3022:	4c38      	ldr	r4, [pc, #224]	; (3104 <setup+0x558>)
    3024:	6823      	ldr	r3, [r4, #0]
    3026:	685b      	ldr	r3, [r3, #4]
    3028:	221b      	movs	r2, #27
    302a:	4937      	ldr	r1, [pc, #220]	; (3108 <setup+0x55c>)
    302c:	4620      	mov	r0, r4
    302e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    3030:	4620      	mov	r0, r4
    3032:	f009 f988 	bl	c346 <Print::println()>
		SD_is_present = 0;
    3036:	4b35      	ldr	r3, [pc, #212]	; (310c <setup+0x560>)
    3038:	2200      	movs	r2, #0
    303a:	701a      	strb	r2, [r3, #0]
    303c:	e784      	b.n	2f48 <setup+0x39c>
			uint32_t elapsed = systick_millis_count - millis_begin;
    303e:	682b      	ldr	r3, [r5, #0]
    3040:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    3042:	7822      	ldrb	r2, [r4, #0]
    3044:	2a00      	cmp	r2, #0
    3046:	f47f adb9 	bne.w	2bbc <setup+0x10>
				if (elapsed > 750) break;
    304a:	f240 22ee 	movw	r2, #750	; 0x2ee
    304e:	4293      	cmp	r3, r2
    3050:	f67f adb7 	bls.w	2bc2 <setup+0x16>
    3054:	e5c9      	b.n	2bea <setup+0x3e>
    3056:	bf00      	nop
    3058:	2000501c 	.word	0x2000501c
    305c:	200040e0 	.word	0x200040e0
    3060:	200023d4 	.word	0x200023d4
    3064:	20002430 	.word	0x20002430
    3068:	200023b0 	.word	0x200023b0
    306c:	200022a4 	.word	0x200022a4
    3070:	20003944 	.word	0x20003944
    3074:	20002dac 	.word	0x20002dac
    3078:	20003908 	.word	0x20003908
    307c:	20004f14 	.word	0x20004f14
    3080:	2000390c 	.word	0x2000390c
    3084:	20004f20 	.word	0x20004f20
    3088:	20003910 	.word	0x20003910
    308c:	20004f2c 	.word	0x20004f2c
    3090:	20003914 	.word	0x20003914
    3094:	20004f38 	.word	0x20004f38
    3098:	20003918 	.word	0x20003918
    309c:	20004f44 	.word	0x20004f44
    30a0:	2000391c 	.word	0x2000391c
    30a4:	20004f48 	.word	0x20004f48
    30a8:	20003920 	.word	0x20003920
    30ac:	20004f4c 	.word	0x20004f4c
    30b0:	20003924 	.word	0x20003924
    30b4:	20004f50 	.word	0x20004f50
    30b8:	20003928 	.word	0x20003928
    30bc:	20004f54 	.word	0x20004f54
    30c0:	200038f8 	.word	0x200038f8
    30c4:	20004f04 	.word	0x20004f04
    30c8:	200038fc 	.word	0x200038fc
    30cc:	20004f08 	.word	0x20004f08
    30d0:	20003900 	.word	0x20003900
    30d4:	20004f0c 	.word	0x20004f0c
    30d8:	20003904 	.word	0x20003904
    30dc:	20004f10 	.word	0x20004f10
    30e0:	20005290 	.word	0x20005290
    30e4:	20005294 	.word	0x20005294
    30e8:	20005298 	.word	0x20005298
    30ec:	2000529c 	.word	0x2000529c
    30f0:	200052a0 	.word	0x200052a0
    30f4:	200052a4 	.word	0x200052a4
    30f8:	200052a8 	.word	0x200052a8
    30fc:	200052ff 	.word	0x200052ff
    3100:	20003140 	.word	0x20003140
    3104:	200032c8 	.word	0x200032c8
    3108:	20002f44 	.word	0x20002f44
    310c:	200052f2 	.word	0x200052f2

00003110 <_GLOBAL__sub_I_mpu6050>:
    rising_edge_start_6 = micros();
  }
  else if(trigger == 0) {
    channel_6_raw = micros() - rising_edge_start_6;
  }
}
    3110:	b510      	push	{r4, lr}
  MPU6050 mpu6050;
    3112:	2168      	movs	r1, #104	; 0x68
    3114:	4812      	ldr	r0, [pc, #72]	; (3160 <_GLOBAL__sub_I_mpu6050+0x50>)
    3116:	f000 fc77 	bl	3a08 <MPU6050::MPU6050(unsigned char)>
  SBUS sbus(Serial5);
    311a:	4c12      	ldr	r4, [pc, #72]	; (3164 <_GLOBAL__sub_I_mpu6050+0x54>)
    311c:	4912      	ldr	r1, [pc, #72]	; (3168 <_GLOBAL__sub_I_mpu6050+0x58>)
    311e:	4620      	mov	r0, r4
    3120:	f000 fd04 	bl	3b2c <SBUS::SBUS(HardwareSerial&)>
    3124:	4a11      	ldr	r2, [pc, #68]	; (316c <_GLOBAL__sub_I_mpu6050+0x5c>)
    3126:	4912      	ldr	r1, [pc, #72]	; (3170 <_GLOBAL__sub_I_mpu6050+0x60>)
    3128:	4620      	mov	r0, r4
    312a:	f00d fd4f 	bl	10bcc <__aeabi_atexit>
PWMServo iris;
    312e:	4811      	ldr	r0, [pc, #68]	; (3174 <_GLOBAL__sub_I_mpu6050+0x64>)
    3130:	f001 fc90 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo1;
    3134:	4810      	ldr	r0, [pc, #64]	; (3178 <_GLOBAL__sub_I_mpu6050+0x68>)
    3136:	f001 fc8d 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo2;
    313a:	4810      	ldr	r0, [pc, #64]	; (317c <_GLOBAL__sub_I_mpu6050+0x6c>)
    313c:	f001 fc8a 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo3;
    3140:	480f      	ldr	r0, [pc, #60]	; (3180 <_GLOBAL__sub_I_mpu6050+0x70>)
    3142:	f001 fc87 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo4;
    3146:	480f      	ldr	r0, [pc, #60]	; (3184 <_GLOBAL__sub_I_mpu6050+0x74>)
    3148:	f001 fc84 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo5;
    314c:	480e      	ldr	r0, [pc, #56]	; (3188 <_GLOBAL__sub_I_mpu6050+0x78>)
    314e:	f001 fc81 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo6;
    3152:	480e      	ldr	r0, [pc, #56]	; (318c <_GLOBAL__sub_I_mpu6050+0x7c>)
    3154:	f001 fc7e 	bl	4a54 <PWMServo::PWMServo()>
PWMServo servo7;
    3158:	480d      	ldr	r0, [pc, #52]	; (3190 <_GLOBAL__sub_I_mpu6050+0x80>)
    315a:	f001 fc7b 	bl	4a54 <PWMServo::PWMServo()>
    315e:	bd10      	pop	{r4, pc}
    3160:	20005054 	.word	0x20005054
    3164:	2000512c 	.word	0x2000512c
    3168:	200046a0 	.word	0x200046a0
    316c:	20003344 	.word	0x20003344
    3170:	00003b75 	.word	0x00003b75
    3174:	20005050 	.word	0x20005050
    3178:	20005290 	.word	0x20005290
    317c:	20005294 	.word	0x20005294
    3180:	20005298 	.word	0x20005298
    3184:	2000529c 	.word	0x2000529c
    3188:	200052a0 	.word	0x200052a0
    318c:	200052a4 	.word	0x200052a4
    3190:	200052a8 	.word	0x200052a8
    3194:	00000000 	.word	0x00000000

00003198 <biquadFilter_init(biquadFilter_s*, float, float)>:
#include "Arduino.h"
#include "filter.h"
#include <cmath>

void biquadFilter_init(biquadFilter_s *filter, float filterFreq, float sampleFreq){
    3198:	b510      	push	{r4, lr}
    319a:	ed2d 8b02 	vpush	{d8}
    319e:	4604      	mov	r4, r0
	// setup
	const float omega = 2.0f*M_PI*filterFreq/sampleFreq;
    31a0:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    31a4:	ed9f 6b20 	vldr	d6, [pc, #128]	; 3228 <biquadFilter_init(biquadFilter_s*, float, float)+0x90>
    31a8:	ee27 7b06 	vmul.f64	d7, d7, d6
    31ac:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
    31b0:	ee87 8b06 	vdiv.f64	d8, d7, d6
    31b4:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
    31b8:	eeb0 0a48 	vmov.f32	s0, s16
    31bc:	f00c f924 	bl	f408 <sinf>
    31c0:	eef0 8a40 	vmov.f32	s17, s0
  { return __builtin_cosf(__x); }
    31c4:	eeb0 0a48 	vmov.f32	s0, s16
    31c8:	f00c fa22 	bl	f610 <cosf>
	const float sn = sin(omega);
	const float cs = cos(omega);
	const float Q = 1.0f/sqrt(2.0f);
	const float alpha = sn/(2.0f*Q);
    31cc:	eddf 7a18 	vldr	s15, [pc, #96]	; 3230 <biquadFilter_init(biquadFilter_s*, float, float)+0x98>
    31d0:	ee88 6aa7 	vdiv.f32	s12, s17, s15

	// 2nd order butterworth
	filter->b1 = 1 - cs;
    31d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    31d8:	ee37 5ac0 	vsub.f32	s10, s15, s0
	filter->b0 = filter->b1 * 0.5f;
	filter->b2 = filter->b0;
	filter->a1 = -2*cs;
	filter->a2 = 1 - alpha;
	
	const float a0 = 1 + alpha;
    31dc:	ee36 7a27 	vadd.f32	s14, s12, s15
	filter->b0 = filter->b1 * 0.5f;
    31e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    31e4:	ee65 6a26 	vmul.f32	s13, s10, s13


	// Precompute coefficients
	filter->b0 /= a0;
    31e8:	eec6 5a87 	vdiv.f32	s11, s13, s14
    31ec:	edc4 5a00 	vstr	s11, [r4]
	filter->b1 /= a0;
    31f0:	eec5 6a07 	vdiv.f32	s13, s10, s14
    31f4:	edc4 6a01 	vstr	s13, [r4, #4]
	filter->b2 /= a0;
    31f8:	edc4 5a02 	vstr	s11, [r4, #8]
	filter->a1 = -2*cs;
    31fc:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
    3200:	ee20 0a26 	vmul.f32	s0, s0, s13
	filter->a1 /= a0;
    3204:	eec0 6a07 	vdiv.f32	s13, s0, s14
    3208:	edc4 6a03 	vstr	s13, [r4, #12]
	filter->a2 = 1 - alpha;
    320c:	ee77 7ac6 	vsub.f32	s15, s15, s12
	filter->a2 /= a0;
    3210:	eec7 6a87 	vdiv.f32	s13, s15, s14
    3214:	edc4 6a04 	vstr	s13, [r4, #16]

	filter->x1 = filter->x2 = 0;
    3218:	2300      	movs	r3, #0
    321a:	61a3      	str	r3, [r4, #24]
    321c:	6163      	str	r3, [r4, #20]
	filter->y1 = filter->y2 = 0;
    321e:	6223      	str	r3, [r4, #32]
    3220:	61e3      	str	r3, [r4, #28]
}
    3222:	ecbd 8b02 	vpop	{d8}
    3226:	bd10      	pop	{r4, pc}
    3228:	54442d18 	.word	0x54442d18
    322c:	401921fb 	.word	0x401921fb
    3230:	3fb504f3 	.word	0x3fb504f3

00003234 <biquadFilter_apply(biquadFilter_s*, float)>:

float biquadFilter_apply(biquadFilter_s *filter, float input) {
    3234:	eef0 7a40 	vmov.f32	s15, s0
	const float result = filter->b0*input + filter->x1;
    3238:	ed90 0a00 	vldr	s0, [r0]
    323c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3240:	ed90 7a05 	vldr	s14, [r0, #20]
    3244:	ee30 0a07 	vadd.f32	s0, s0, s14

	filter->x1 = filter->b1*input - filter->a1*result + filter->x2;
    3248:	ed90 7a01 	vldr	s14, [r0, #4]
    324c:	ee27 7a87 	vmul.f32	s14, s15, s14
    3250:	edd0 6a03 	vldr	s13, [r0, #12]
    3254:	ee60 6a26 	vmul.f32	s13, s0, s13
    3258:	ee37 7a66 	vsub.f32	s14, s14, s13
    325c:	edd0 6a06 	vldr	s13, [r0, #24]
    3260:	ee37 7a26 	vadd.f32	s14, s14, s13
    3264:	ed80 7a05 	vstr	s14, [r0, #20]
	filter->x2 = filter->b2*input - filter->a2*result;
    3268:	ed90 7a02 	vldr	s14, [r0, #8]
    326c:	ee67 7a87 	vmul.f32	s15, s15, s14
    3270:	ed90 7a04 	vldr	s14, [r0, #16]
    3274:	ee20 7a07 	vmul.f32	s14, s0, s14
    3278:	ee77 7ac7 	vsub.f32	s15, s15, s14
    327c:	edc0 7a06 	vstr	s15, [r0, #24]

	return result;
}
    3280:	4770      	bx	lr
	...

00003284 <initializePID()>:
// Initialize dTerm filter
biquadFilter_s dTermFilter_roll;
biquadFilter_s dTermFilter_pitch;
biquadFilter_s dTermFilter_yaw;

void initializePID() {
    3284:	b508      	push	{r3, lr}
    3286:	ed2d 8b02 	vpush	{d8}
	biquadFilter_init(&dTermFilter_roll, 100.0f, 2000.0f);
    328a:	eddf 8a0e 	vldr	s17, [pc, #56]	; 32c4 <initializePID()+0x40>
    328e:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 32c8 <initializePID()+0x44>
    3292:	eef0 0a68 	vmov.f32	s1, s17
    3296:	eeb0 0a48 	vmov.f32	s0, s16
    329a:	480c      	ldr	r0, [pc, #48]	; (32cc <initializePID()+0x48>)
    329c:	f7ff ff7c 	bl	3198 <biquadFilter_init(biquadFilter_s*, float, float)>
	biquadFilter_init(&dTermFilter_pitch, 100.0f, 2000.0f);
    32a0:	eef0 0a68 	vmov.f32	s1, s17
    32a4:	eeb0 0a48 	vmov.f32	s0, s16
    32a8:	4809      	ldr	r0, [pc, #36]	; (32d0 <initializePID()+0x4c>)
    32aa:	f7ff ff75 	bl	3198 <biquadFilter_init(biquadFilter_s*, float, float)>
	biquadFilter_init(&dTermFilter_yaw, 100.0f, 2000.0f);
    32ae:	eef0 0a68 	vmov.f32	s1, s17
    32b2:	eeb0 0a48 	vmov.f32	s0, s16
    32b6:	4807      	ldr	r0, [pc, #28]	; (32d4 <initializePID()+0x50>)
    32b8:	f7ff ff6e 	bl	3198 <biquadFilter_init(biquadFilter_s*, float, float)>
}
    32bc:	ecbd 8b02 	vpop	{d8}
    32c0:	bd08      	pop	{r3, pc}
    32c2:	bf00      	nop
    32c4:	44fa0000 	.word	0x44fa0000
    32c8:	42c80000 	.word	0x42c80000
    32cc:	20004f80 	.word	0x20004f80
    32d0:	20004f5c 	.word	0x20004f5c
    32d4:	20004fa4 	.word	0x20004fa4

000032d8 <anglePID()>:


void anglePID() {
    32d8:	b510      	push	{r4, lr}
    32da:	ed2d 8b04 	vpush	{d8-d9}

  // --- Roll --- //
  float error_roll = roll_des - roll_IMU;
    32de:	4b9e      	ldr	r3, [pc, #632]	; (3558 <anglePID()+0x280>)
    32e0:	ed93 8a00 	vldr	s16, [r3]
    32e4:	4b9d      	ldr	r3, [pc, #628]	; (355c <anglePID()+0x284>)
    32e6:	edd3 7a00 	vldr	s15, [r3]
    32ea:	ee38 8a67 	vsub.f32	s16, s16, s15
  float integral_roll = integralOld_roll + error_roll*dt;
    32ee:	4b9c      	ldr	r3, [pc, #624]	; (3560 <anglePID()+0x288>)
    32f0:	edd3 7a00 	vldr	s15, [r3]
    32f4:	4b9b      	ldr	r3, [pc, #620]	; (3564 <anglePID()+0x28c>)
    32f6:	ed93 7a00 	vldr	s14, [r3]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    32fa:	4b9b      	ldr	r3, [pc, #620]	; (3568 <anglePID()+0x290>)
    32fc:	681a      	ldr	r2, [r3, #0]
    32fe:	f240 4323 	movw	r3, #1059	; 0x423
    3302:	429a      	cmp	r2, r3
    3304:	f340 8119 	ble.w	353a <anglePID()+0x262>
  float integral_roll = integralOld_roll + error_roll*dt;
    3308:	ee67 7a88 	vmul.f32	s15, s15, s16
    330c:	ee77 7a87 	vadd.f32	s15, s15, s14
    integral_roll = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_roll = constrain(integral_roll, -i_limit, i_limit);
    3310:	4b96      	ldr	r3, [pc, #600]	; (356c <anglePID()+0x294>)
    3312:	ed93 7a00 	vldr	s14, [r3]
    3316:	eef1 8a47 	vneg.f32	s17, s14
    331a:	eef4 7ae8 	vcmpe.f32	s15, s17
    331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3322:	d408      	bmi.n	3336 <anglePID()+0x5e>
    3324:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    332c:	bf54      	ite	pl
    332e:	eef0 8a67 	vmovpl.f32	s17, s15
    3332:	eef0 8a47 	vmovmi.f32	s17, s14
  float derivative_roll = GyroX;
	derivative_roll = biquadFilter_apply(&dTermFilter_roll, derivative_roll);
    3336:	4b8e      	ldr	r3, [pc, #568]	; (3570 <anglePID()+0x298>)
    3338:	ed93 0a00 	vldr	s0, [r3]
    333c:	488d      	ldr	r0, [pc, #564]	; (3574 <anglePID()+0x29c>)
    333e:	f7ff ff79 	bl	3234 <biquadFilter_apply(biquadFilter_s*, float)>
	//Scaled by .01 to bring within -1 to 1 range
  roll_PID = 0.01*(Kp_roll_angle*pScaleRoll*error_roll 
    3342:	4b8d      	ldr	r3, [pc, #564]	; (3578 <anglePID()+0x2a0>)
    3344:	ed93 7a00 	vldr	s14, [r3]
    3348:	4b8c      	ldr	r3, [pc, #560]	; (357c <anglePID()+0x2a4>)
    334a:	edd3 7a00 	vldr	s15, [r3]
    334e:	ee27 7a27 	vmul.f32	s14, s14, s15
    3352:	ee27 7a08 	vmul.f32	s14, s14, s16
							   		+ Ki_roll_angle*iScaleRoll*integral_roll 
    3356:	4b8a      	ldr	r3, [pc, #552]	; (3580 <anglePID()+0x2a8>)
    3358:	edd3 7a00 	vldr	s15, [r3]
    335c:	4b89      	ldr	r3, [pc, #548]	; (3584 <anglePID()+0x2ac>)
    335e:	edd3 6a00 	vldr	s13, [r3]
    3362:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3366:	ee67 7aa8 	vmul.f32	s15, s15, s17
    336a:	ee37 7a27 	vadd.f32	s14, s14, s15
										- Kd_roll_angle*dScaleRoll*derivative_roll); 
    336e:	4b86      	ldr	r3, [pc, #536]	; (3588 <anglePID()+0x2b0>)
    3370:	edd3 7a00 	vldr	s15, [r3]
    3374:	4b85      	ldr	r3, [pc, #532]	; (358c <anglePID()+0x2b4>)
    3376:	edd3 6a00 	vldr	s13, [r3]
    337a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    337e:	ee67 7a80 	vmul.f32	s15, s15, s0
    3382:	ee37 7a67 	vsub.f32	s14, s14, s15
    3386:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  roll_PID = 0.01*(Kp_roll_angle*pScaleRoll*error_roll 
    338a:	ed9f 6b71 	vldr	d6, [pc, #452]	; 3550 <anglePID()+0x278>
    338e:	ee27 7b06 	vmul.f64	d7, d7, d6
    3392:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3396:	4b7e      	ldr	r3, [pc, #504]	; (3590 <anglePID()+0x2b8>)
    3398:	ed83 7a00 	vstr	s14, [r3]

  // --- Pitch --- //
  float error_pitch = pitch_des - pitch_IMU;
    339c:	4b7d      	ldr	r3, [pc, #500]	; (3594 <anglePID()+0x2bc>)
    339e:	ed93 9a00 	vldr	s18, [r3]
    33a2:	4b7d      	ldr	r3, [pc, #500]	; (3598 <anglePID()+0x2c0>)
    33a4:	edd3 7a00 	vldr	s15, [r3]
    33a8:	ee39 9a67 	vsub.f32	s18, s18, s15
  float integral_pitch = integralOld_pitch + error_pitch*dt;
    33ac:	4b6c      	ldr	r3, [pc, #432]	; (3560 <anglePID()+0x288>)
    33ae:	edd3 7a00 	vldr	s15, [r3]
    33b2:	4b7a      	ldr	r3, [pc, #488]	; (359c <anglePID()+0x2c4>)
    33b4:	ed93 7a00 	vldr	s14, [r3]
  if (channel_1_pwm < 1060) {
    33b8:	4b6b      	ldr	r3, [pc, #428]	; (3568 <anglePID()+0x290>)
    33ba:	681a      	ldr	r2, [r3, #0]
    33bc:	f240 4323 	movw	r3, #1059	; 0x423
    33c0:	429a      	cmp	r2, r3
    33c2:	f340 80bd 	ble.w	3540 <anglePID()+0x268>
  float integral_pitch = integralOld_pitch + error_pitch*dt;
    33c6:	ee67 7a89 	vmul.f32	s15, s15, s18
    33ca:	ee77 7a87 	vadd.f32	s15, s15, s14
    integral_pitch = 0;
  }
  integral_pitch = constrain(integral_pitch, -i_limit, i_limit);
    33ce:	4b67      	ldr	r3, [pc, #412]	; (356c <anglePID()+0x294>)
    33d0:	ed93 7a00 	vldr	s14, [r3]
    33d4:	eeb1 8a47 	vneg.f32	s16, s14
    33d8:	eef4 7ac8 	vcmpe.f32	s15, s16
    33dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33e0:	d408      	bmi.n	33f4 <anglePID()+0x11c>
    33e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    33e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33ea:	bf54      	ite	pl
    33ec:	eeb0 8a67 	vmovpl.f32	s16, s15
    33f0:	eeb0 8a47 	vmovmi.f32	s16, s14
  float derivative_pitch = GyroY;
	derivative_pitch = biquadFilter_apply(&dTermFilter_pitch, derivative_pitch);
    33f4:	4b6a      	ldr	r3, [pc, #424]	; (35a0 <anglePID()+0x2c8>)
    33f6:	ed93 0a00 	vldr	s0, [r3]
    33fa:	486a      	ldr	r0, [pc, #424]	; (35a4 <anglePID()+0x2cc>)
    33fc:	f7ff ff1a 	bl	3234 <biquadFilter_apply(biquadFilter_s*, float)>
	pitch_PID = 0.01*(Kp_pitch_angle*pScalePitch*error_pitch 
    3400:	4b69      	ldr	r3, [pc, #420]	; (35a8 <anglePID()+0x2d0>)
    3402:	ed93 7a00 	vldr	s14, [r3]
    3406:	4b69      	ldr	r3, [pc, #420]	; (35ac <anglePID()+0x2d4>)
    3408:	edd3 7a00 	vldr	s15, [r3]
    340c:	ee27 7a27 	vmul.f32	s14, s14, s15
    3410:	ee27 7a09 	vmul.f32	s14, s14, s18
										+ Ki_pitch_angle*iScalePitch*integral_pitch 
    3414:	4b66      	ldr	r3, [pc, #408]	; (35b0 <anglePID()+0x2d8>)
    3416:	edd3 7a00 	vldr	s15, [r3]
    341a:	4b66      	ldr	r3, [pc, #408]	; (35b4 <anglePID()+0x2dc>)
    341c:	edd3 6a00 	vldr	s13, [r3]
    3420:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3424:	ee67 7a88 	vmul.f32	s15, s15, s16
    3428:	ee37 7a27 	vadd.f32	s14, s14, s15
										- Kd_pitch_angle*dScalePitch*derivative_pitch);
    342c:	4b62      	ldr	r3, [pc, #392]	; (35b8 <anglePID()+0x2e0>)
    342e:	edd3 7a00 	vldr	s15, [r3]
    3432:	4b62      	ldr	r3, [pc, #392]	; (35bc <anglePID()+0x2e4>)
    3434:	edd3 6a00 	vldr	s13, [r3]
    3438:	ee67 7aa6 	vmul.f32	s15, s15, s13
    343c:	ee67 7a80 	vmul.f32	s15, s15, s0
    3440:	ee37 7a67 	vsub.f32	s14, s14, s15
    3444:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	pitch_PID = 0.01*(Kp_pitch_angle*pScalePitch*error_pitch 
    3448:	ed9f 6b41 	vldr	d6, [pc, #260]	; 3550 <anglePID()+0x278>
    344c:	ee27 7b06 	vmul.f64	d7, d7, d6
    3450:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3454:	4b5a      	ldr	r3, [pc, #360]	; (35c0 <anglePID()+0x2e8>)
    3456:	ed83 7a00 	vstr	s14, [r3]

  // --- Yaw --- // stablize on rate from GyroZ
  float error_yaw = yaw_des - GyroZ;
    345a:	4b5a      	ldr	r3, [pc, #360]	; (35c4 <anglePID()+0x2ec>)
    345c:	ed93 9a00 	vldr	s18, [r3]
    3460:	4b59      	ldr	r3, [pc, #356]	; (35c8 <anglePID()+0x2f0>)
    3462:	edd3 7a00 	vldr	s15, [r3]
    3466:	ee39 9a67 	vsub.f32	s18, s18, s15
  float integral_yaw = integralOld_yaw + error_yaw*dt;
    346a:	4b3d      	ldr	r3, [pc, #244]	; (3560 <anglePID()+0x288>)
    346c:	ed93 0a00 	vldr	s0, [r3]
    3470:	4b56      	ldr	r3, [pc, #344]	; (35cc <anglePID()+0x2f4>)
    3472:	ed93 7a00 	vldr	s14, [r3]
  if (channel_1_pwm < 1060) {
    3476:	4b3c      	ldr	r3, [pc, #240]	; (3568 <anglePID()+0x290>)
    3478:	681a      	ldr	r2, [r3, #0]
    347a:	f240 4323 	movw	r3, #1059	; 0x423
    347e:	429a      	cmp	r2, r3
    3480:	dd61      	ble.n	3546 <anglePID()+0x26e>
  float integral_yaw = integralOld_yaw + error_yaw*dt;
    3482:	ee60 7a09 	vmul.f32	s15, s0, s18
    3486:	ee77 7a87 	vadd.f32	s15, s15, s14
    integral_yaw = 0;
  }
  integral_yaw = constrain(integral_yaw, -i_limit, i_limit); 
    348a:	4b38      	ldr	r3, [pc, #224]	; (356c <anglePID()+0x294>)
    348c:	ed93 7a00 	vldr	s14, [r3]
    3490:	eef1 9a47 	vneg.f32	s19, s14
    3494:	eef4 7ae9 	vcmpe.f32	s15, s19
    3498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    349c:	d408      	bmi.n	34b0 <anglePID()+0x1d8>
    349e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    34a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34a6:	bf54      	ite	pl
    34a8:	eef0 9a67 	vmovpl.f32	s19, s15
    34ac:	eef0 9a47 	vmovmi.f32	s19, s14
  float derivative_yaw = (error_yaw - errorOld_yaw)/dt; 
    34b0:	4c47      	ldr	r4, [pc, #284]	; (35d0 <anglePID()+0x2f8>)
    34b2:	edd4 7a00 	vldr	s15, [r4]
    34b6:	ee79 7a67 	vsub.f32	s15, s18, s15
	derivative_yaw = biquadFilter_apply(&dTermFilter_yaw, derivative_yaw);
    34ba:	ee87 0a80 	vdiv.f32	s0, s15, s0
    34be:	4845      	ldr	r0, [pc, #276]	; (35d4 <anglePID()+0x2fc>)
    34c0:	f7ff feb8 	bl	3234 <biquadFilter_apply(biquadFilter_s*, float)>
  yaw_PID = 0.01*(Kp_yaw*pScaleYaw*error_yaw 
    34c4:	4b44      	ldr	r3, [pc, #272]	; (35d8 <anglePID()+0x300>)
    34c6:	ed93 7a00 	vldr	s14, [r3]
    34ca:	4b44      	ldr	r3, [pc, #272]	; (35dc <anglePID()+0x304>)
    34cc:	edd3 7a00 	vldr	s15, [r3]
    34d0:	ee27 7a27 	vmul.f32	s14, s14, s15
    34d4:	ee27 7a09 	vmul.f32	s14, s14, s18
									+ Ki_yaw*iScaleYaw*integral_yaw 
    34d8:	4b41      	ldr	r3, [pc, #260]	; (35e0 <anglePID()+0x308>)
    34da:	edd3 7a00 	vldr	s15, [r3]
    34de:	4b41      	ldr	r3, [pc, #260]	; (35e4 <anglePID()+0x30c>)
    34e0:	edd3 6a00 	vldr	s13, [r3]
    34e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    34e8:	ee67 7aa9 	vmul.f32	s15, s15, s19
    34ec:	ee37 7a27 	vadd.f32	s14, s14, s15
									+ Kd_yaw*dScaleYaw*derivative_yaw);
    34f0:	4b3d      	ldr	r3, [pc, #244]	; (35e8 <anglePID()+0x310>)
    34f2:	edd3 7a00 	vldr	s15, [r3]
    34f6:	4b3d      	ldr	r3, [pc, #244]	; (35ec <anglePID()+0x314>)
    34f8:	edd3 6a00 	vldr	s13, [r3]
    34fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3500:	ee67 7a80 	vmul.f32	s15, s15, s0
    3504:	ee37 7a27 	vadd.f32	s14, s14, s15
    3508:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  yaw_PID = 0.01*(Kp_yaw*pScaleYaw*error_yaw 
    350c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 3550 <anglePID()+0x278>
    3510:	ee27 7b06 	vmul.f64	d7, d7, d6
    3514:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3518:	4b35      	ldr	r3, [pc, #212]	; (35f0 <anglePID()+0x318>)
    351a:	ed83 7a00 	vstr	s14, [r3]

  //Update roll variables
  integralOld_roll = integral_roll;
    351e:	4b11      	ldr	r3, [pc, #68]	; (3564 <anglePID()+0x28c>)
    3520:	edc3 8a00 	vstr	s17, [r3]
  //Update pitch variables
  integralOld_pitch = integral_pitch;
    3524:	4b1d      	ldr	r3, [pc, #116]	; (359c <anglePID()+0x2c4>)
    3526:	ed83 8a00 	vstr	s16, [r3]
  //Update yaw variables
  errorOld_yaw = error_yaw;
    352a:	ed84 9a00 	vstr	s18, [r4]
  integralOld_yaw = integral_yaw;
    352e:	4b27      	ldr	r3, [pc, #156]	; (35cc <anglePID()+0x2f4>)
    3530:	edc3 9a00 	vstr	s19, [r3]
}
    3534:	ecbd 8b04 	vpop	{d8-d9}
    3538:	bd10      	pop	{r4, pc}
    integral_roll = 0;
    353a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 35f4 <anglePID()+0x31c>
    353e:	e6e7      	b.n	3310 <anglePID()+0x38>
    integral_pitch = 0;
    3540:	eddf 7a2c 	vldr	s15, [pc, #176]	; 35f4 <anglePID()+0x31c>
    3544:	e743      	b.n	33ce <anglePID()+0xf6>
    integral_yaw = 0;
    3546:	eddf 7a2b 	vldr	s15, [pc, #172]	; 35f4 <anglePID()+0x31c>
    354a:	e79e      	b.n	348a <anglePID()+0x1b2>
    354c:	f3af 8000 	nop.w
    3550:	47ae147b 	.word	0x47ae147b
    3554:	3f847ae1 	.word	0x3f847ae1
    3558:	200050ac 	.word	0x200050ac
    355c:	200050a4 	.word	0x200050a4
    3560:	20004fd8 	.word	0x20004fd8
    3564:	20005048 	.word	0x20005048
    3568:	20004f14 	.word	0x20004f14
    356c:	20003980 	.word	0x20003980
    3570:	200040a0 	.word	0x200040a0
    3574:	20004f80 	.word	0x20004f80
    3578:	200032b4 	.word	0x200032b4
    357c:	200039ec 	.word	0x200039ec
    3580:	200032a8 	.word	0x200032a8
    3584:	20003978 	.word	0x20003978
    3588:	2000329c 	.word	0x2000329c
    358c:	2000393c 	.word	0x2000393c
    3590:	200050a8 	.word	0x200050a8
    3594:	20005084 	.word	0x20005084
    3598:	2000507c 	.word	0x2000507c
    359c:	20005044 	.word	0x20005044
    35a0:	200040a8 	.word	0x200040a8
    35a4:	20004f5c 	.word	0x20004f5c
    35a8:	200032b0 	.word	0x200032b0
    35ac:	200039e8 	.word	0x200039e8
    35b0:	200032a4 	.word	0x200032a4
    35b4:	20003974 	.word	0x20003974
    35b8:	20003298 	.word	0x20003298
    35bc:	20003938 	.word	0x20003938
    35c0:	20005080 	.word	0x20005080
    35c4:	200052e4 	.word	0x200052e4
    35c8:	200040b0 	.word	0x200040b0
    35cc:	2000504c 	.word	0x2000504c
    35d0:	20004ff8 	.word	0x20004ff8
    35d4:	20004fa4 	.word	0x20004fa4
    35d8:	200032b8 	.word	0x200032b8
    35dc:	200039f0 	.word	0x200039f0
    35e0:	200032ac 	.word	0x200032ac
    35e4:	2000397c 	.word	0x2000397c
    35e8:	200032a0 	.word	0x200032a0
    35ec:	20003940 	.word	0x20003940
    35f0:	200052e0 	.word	0x200052e0
    35f4:	00000000 	.word	0x00000000

000035f8 <ripPID()>:

void ripPID() {
  // --- Alpha --- //
  float error_alphaRoll = alphaRoll_des - alphaRoll;
    35f8:	4b56      	ldr	r3, [pc, #344]	; (3754 <ripPID()+0x15c>)
    35fa:	ed93 7a00 	vldr	s14, [r3]
    35fe:	4b56      	ldr	r3, [pc, #344]	; (3758 <ripPID()+0x160>)
    3600:	edd3 7a00 	vldr	s15, [r3]
    3604:	ee37 7a67 	vsub.f32	s14, s14, s15
  float integral_alphaRoll = integralOld_alpha + error_alphaRoll*dt;
    3608:	4b54      	ldr	r3, [pc, #336]	; (375c <ripPID()+0x164>)
    360a:	ed93 5a00 	vldr	s10, [r3]
    360e:	4b54      	ldr	r3, [pc, #336]	; (3760 <ripPID()+0x168>)
    3610:	edd3 7a00 	vldr	s15, [r3]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    3614:	4b53      	ldr	r3, [pc, #332]	; (3764 <ripPID()+0x16c>)
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	f240 4223 	movw	r2, #1059	; 0x423
    361c:	4293      	cmp	r3, r2
    361e:	f340 8090 	ble.w	3742 <ripPID()+0x14a>
  float integral_alphaRoll = integralOld_alpha + error_alphaRoll*dt;
    3622:	ee25 6a07 	vmul.f32	s12, s10, s14
    3626:	ee36 6a27 	vadd.f32	s12, s12, s15
    integral_alphaRoll = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_alphaRoll = constrain(integral_alphaRoll, -i_limit, i_limit);
    362a:	4a4f      	ldr	r2, [pc, #316]	; (3768 <ripPID()+0x170>)
    362c:	edd2 4a00 	vldr	s9, [r2]
    3630:	eef1 5a64 	vneg.f32	s11, s9
    3634:	eeb4 6ae5 	vcmpe.f32	s12, s11
    3638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    363c:	f100 8084 	bmi.w	3748 <ripPID()+0x150>
    3640:	eef4 4a46 	vcmp.f32	s9, s12
    3644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3648:	bf48      	it	mi
    364a:	eeb0 6a64 	vmovmi.f32	s12, s9
  float derivative_alphaRoll = (error_alphaRoll - errorOld_alpha)/dt;

  roll_des = (Kp_alphaRoll*pScaleAlpha*error_alphaRoll 
    364e:	4a47      	ldr	r2, [pc, #284]	; (376c <ripPID()+0x174>)
    3650:	edd2 7a00 	vldr	s15, [r2]
    3654:	4a46      	ldr	r2, [pc, #280]	; (3770 <ripPID()+0x178>)
    3656:	edd2 6a00 	vldr	s13, [r2]
    365a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    365e:	ee67 7a87 	vmul.f32	s15, s15, s14
							+ Ki_alphaRoll*iScaleAlpha*integral_alphaRoll 
    3662:	4a44      	ldr	r2, [pc, #272]	; (3774 <ripPID()+0x17c>)
    3664:	edd2 6a00 	vldr	s13, [r2]
    3668:	4a43      	ldr	r2, [pc, #268]	; (3778 <ripPID()+0x180>)
    366a:	ed92 4a00 	vldr	s8, [r2]
    366e:	ee66 6a84 	vmul.f32	s13, s13, s8
    3672:	ee66 6a86 	vmul.f32	s13, s13, s12
    3676:	ee77 7aa6 	vadd.f32	s15, s15, s13
							- Kd_alphaRoll*dScaleAlpha*derivative_alphaRoll); 
    367a:	4a40      	ldr	r2, [pc, #256]	; (377c <ripPID()+0x184>)
    367c:	edd2 6a00 	vldr	s13, [r2]
    3680:	4a3f      	ldr	r2, [pc, #252]	; (3780 <ripPID()+0x188>)
    3682:	ed92 6a00 	vldr	s12, [r2]
    3686:	ee66 6a86 	vmul.f32	s13, s13, s12
  float derivative_alphaRoll = (error_alphaRoll - errorOld_alpha)/dt;
    368a:	4a3e      	ldr	r2, [pc, #248]	; (3784 <ripPID()+0x18c>)
    368c:	ed92 6a00 	vldr	s12, [r2]
    3690:	ee37 7a46 	vsub.f32	s14, s14, s12
    3694:	ee87 6a05 	vdiv.f32	s12, s14, s10
							- Kd_alphaRoll*dScaleAlpha*derivative_alphaRoll); 
    3698:	ee26 7a86 	vmul.f32	s14, s13, s12
    369c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  roll_des = (Kp_alphaRoll*pScaleAlpha*error_alphaRoll 
    36a0:	4a39      	ldr	r2, [pc, #228]	; (3788 <ripPID()+0x190>)
    36a2:	edc2 7a00 	vstr	s15, [r2]

  // --- Beta --- //
  float error_betaPitch = betaPitch_des - betaPitch;
    36a6:	4a39      	ldr	r2, [pc, #228]	; (378c <ripPID()+0x194>)
    36a8:	ed92 7a00 	vldr	s14, [r2]
    36ac:	4a38      	ldr	r2, [pc, #224]	; (3790 <ripPID()+0x198>)
    36ae:	edd2 7a00 	vldr	s15, [r2]
    36b2:	ee37 7a67 	vsub.f32	s14, s14, s15
  float integral_betaPitch = integralOld_beta + error_betaPitch*dt;
    36b6:	4a37      	ldr	r2, [pc, #220]	; (3794 <ripPID()+0x19c>)
    36b8:	edd2 6a00 	vldr	s13, [r2]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    36bc:	f240 4223 	movw	r2, #1059	; 0x423
    36c0:	4293      	cmp	r3, r2
    36c2:	dd44      	ble.n	374e <ripPID()+0x156>
  float integral_betaPitch = integralOld_beta + error_betaPitch*dt;
    36c4:	ee65 7a07 	vmul.f32	s15, s10, s14
    36c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    integral_betaPitch = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_betaPitch = constrain(integral_betaPitch, -i_limit, i_limit);
    36cc:	eef4 7ae5 	vcmpe.f32	s15, s11
    36d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    36d4:	d408      	bmi.n	36e8 <ripPID()+0xf0>
    36d6:	eef4 4ae7 	vcmpe.f32	s9, s15
    36da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    36de:	bf54      	ite	pl
    36e0:	eef0 5a67 	vmovpl.f32	s11, s15
    36e4:	eef0 5a64 	vmovmi.f32	s11, s9
  float derivative_betaPitch = (error_betaPitch - errorOld_beta)/dt;

  pitch_des = (Kp_betaPitch*pScaleBeta*error_betaPitch 
    36e8:	4b2b      	ldr	r3, [pc, #172]	; (3798 <ripPID()+0x1a0>)
    36ea:	edd3 7a00 	vldr	s15, [r3]
    36ee:	4b2b      	ldr	r3, [pc, #172]	; (379c <ripPID()+0x1a4>)
    36f0:	edd3 6a00 	vldr	s13, [r3]
    36f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    36f8:	ee67 7a87 	vmul.f32	s15, s15, s14
							+ Ki_betaPitch*iScaleBeta*integral_betaPitch 
    36fc:	4b28      	ldr	r3, [pc, #160]	; (37a0 <ripPID()+0x1a8>)
    36fe:	edd3 6a00 	vldr	s13, [r3]
    3702:	4b28      	ldr	r3, [pc, #160]	; (37a4 <ripPID()+0x1ac>)
    3704:	ed93 6a00 	vldr	s12, [r3]
    3708:	ee66 6a86 	vmul.f32	s13, s13, s12
    370c:	ee66 6aa5 	vmul.f32	s13, s13, s11
    3710:	ee77 7aa6 	vadd.f32	s15, s15, s13
							- Kd_betaPitch*dScaleBeta*derivative_betaPitch); 
    3714:	4b24      	ldr	r3, [pc, #144]	; (37a8 <ripPID()+0x1b0>)
    3716:	edd3 6a00 	vldr	s13, [r3]
    371a:	4b24      	ldr	r3, [pc, #144]	; (37ac <ripPID()+0x1b4>)
    371c:	ed93 6a00 	vldr	s12, [r3]
    3720:	ee66 6a86 	vmul.f32	s13, s13, s12
  float derivative_betaPitch = (error_betaPitch - errorOld_beta)/dt;
    3724:	4b22      	ldr	r3, [pc, #136]	; (37b0 <ripPID()+0x1b8>)
    3726:	ed93 6a00 	vldr	s12, [r3]
    372a:	ee37 7a46 	vsub.f32	s14, s14, s12
    372e:	ee87 6a05 	vdiv.f32	s12, s14, s10
							- Kd_betaPitch*dScaleBeta*derivative_betaPitch); 
    3732:	ee26 7a86 	vmul.f32	s14, s13, s12
    3736:	ee77 7ac7 	vsub.f32	s15, s15, s14
  pitch_des = (Kp_betaPitch*pScaleBeta*error_betaPitch 
    373a:	4b1e      	ldr	r3, [pc, #120]	; (37b4 <ripPID()+0x1bc>)
    373c:	edc3 7a00 	vstr	s15, [r3]
}
    3740:	4770      	bx	lr
    integral_alphaRoll = 0;
    3742:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 37b8 <ripPID()+0x1c0>
    3746:	e770      	b.n	362a <ripPID()+0x32>
  integral_alphaRoll = constrain(integral_alphaRoll, -i_limit, i_limit);
    3748:	eeb0 6a65 	vmov.f32	s12, s11
    374c:	e77f      	b.n	364e <ripPID()+0x56>
    integral_betaPitch = 0;
    374e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 37b8 <ripPID()+0x1c0>
    3752:	e7bb      	b.n	36cc <ripPID()+0xd4>
    3754:	20004ed4 	.word	0x20004ed4
    3758:	20004ed0 	.word	0x20004ed0
    375c:	20004fd8 	.word	0x20004fd8
    3760:	2000503c 	.word	0x2000503c
    3764:	20004f14 	.word	0x20004f14
    3768:	20003980 	.word	0x20003980
    376c:	20001d70 	.word	0x20001d70
    3770:	200039e0 	.word	0x200039e0
    3774:	20001d68 	.word	0x20001d68
    3778:	2000396c 	.word	0x2000396c
    377c:	20001d60 	.word	0x20001d60
    3780:	20003930 	.word	0x20003930
    3784:	20004ff0 	.word	0x20004ff0
    3788:	200050ac 	.word	0x200050ac
    378c:	20004ee8 	.word	0x20004ee8
    3790:	20004ee4 	.word	0x20004ee4
    3794:	20005040 	.word	0x20005040
    3798:	20001d74 	.word	0x20001d74
    379c:	200039e4 	.word	0x200039e4
    37a0:	20001d6c 	.word	0x20001d6c
    37a4:	20003970 	.word	0x20003970
    37a8:	20001d64 	.word	0x20001d64
    37ac:	20003934 	.word	0x20003934
    37b0:	20004ff4 	.word	0x20004ff4
    37b4:	20005084 	.word	0x20005084
    37b8:	00000000 	.word	0x00000000

000037bc <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    37bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37c0:	b087      	sub	sp, #28
    37c2:	9002      	str	r0, [sp, #8]
    37c4:	9103      	str	r1, [sp, #12]
    37c6:	461f      	mov	r7, r3
    37c8:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    37cc:	4b3c      	ldr	r3, [pc, #240]	; (38c0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    37ce:	f8d3 9000 	ldr.w	r9, [r3]
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    37d2:	9200      	str	r2, [sp, #0]
    37d4:	2a00      	cmp	r2, #0
    37d6:	d061      	beq.n	389c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe0>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    37d8:	0043      	lsls	r3, r0, #1
    37da:	b2d9      	uxtb	r1, r3
    37dc:	9101      	str	r1, [sp, #4]
    37de:	4613      	mov	r3, r2
    37e0:	2a88      	cmp	r2, #136	; 0x88
    37e2:	bf28      	it	cs
    37e4:	2388      	movcs	r3, #136	; 0x88
    37e6:	9304      	str	r3, [sp, #16]
    37e8:	f04f 0800 	mov.w	r8, #0
    int8_t count = 0;
    37ec:	4644      	mov	r4, r8
    37ee:	4d35      	ldr	r5, [pc, #212]	; (38c4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x108>)
		transmitting = 1;
    37f0:	f04f 0b01 	mov.w	fp, #1
    37f4:	f88d b017 	strb.w	fp, [sp, #23]
    37f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 38c0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>
    37fc:	e022      	b.n	3844 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x88>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    37fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3802:	e006      	b.n	3812 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x56>
    3804:	4299      	cmp	r1, r3
    3806:	d9fa      	bls.n	37fe <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x42>
		return rxBuffer[rxBufferIndex++];
    3808:	3301      	adds	r3, #1
    380a:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
    380e:	442a      	add	r2, r5
    3810:	7e93      	ldrb	r3, [r2, #26]
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    3812:	553b      	strb	r3, [r7, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3814:	3401      	adds	r4, #1
    3816:	b264      	sxtb	r4, r4
		return rxBufferLength - rxBufferIndex;
    3818:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    381c:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3820:	461a      	mov	r2, r3
    3822:	4299      	cmp	r1, r3
    3824:	d007      	beq.n	3836 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    3826:	2e00      	cmp	r6, #0
    3828:	d0ec      	beq.n	3804 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
    382a:	f8da 0000 	ldr.w	r0, [sl]
    382e:	eba0 0009 	sub.w	r0, r0, r9
    3832:	42b0      	cmp	r0, r6
    3834:	d3e6      	bcc.n	3804 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3836:	9b04      	ldr	r3, [sp, #16]
    3838:	4498      	add	r8, r3
    383a:	fa5f f888 	uxtb.w	r8, r8
    383e:	9b00      	ldr	r3, [sp, #0]
    3840:	4543      	cmp	r3, r8
    3842:	d92c      	bls.n	389e <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe2>
		txBuffer[0] = (address << 1);
    3844:	9b01      	ldr	r3, [sp, #4]
    3846:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    384a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    384e:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		txBufferLength = 1;
    3852:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
                Wire.write(regAddr);
    3856:	9903      	ldr	r1, [sp, #12]
    3858:	4628      	mov	r0, r5
    385a:	f000 fb2a 	bl	3eb2 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    385e:	4659      	mov	r1, fp
    3860:	4628      	mov	r0, r5
    3862:	f000 fc53 	bl	410c <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    3866:	9b01      	ldr	r3, [sp, #4]
    3868:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    386c:	f885 b130 	strb.w	fp, [r5, #304]	; 0x130
		txBufferLength = 1;
    3870:	f885 b12f 	strb.w	fp, [r5, #303]	; 0x12f
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3874:	9b00      	ldr	r3, [sp, #0]
    3876:	eba3 0208 	sub.w	r2, r3, r8
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    387a:	2a88      	cmp	r2, #136	; 0x88
    387c:	bfa8      	it	ge
    387e:	2288      	movge	r2, #136	; 0x88
		return requestFrom(address, quantity, (uint8_t)1);
    3880:	465b      	mov	r3, fp
    3882:	b2d2      	uxtb	r2, r2
    3884:	9902      	ldr	r1, [sp, #8]
    3886:	4628      	mov	r0, r5
    3888:	f000 fcbc 	bl	4204 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    388c:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3890:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3894:	461a      	mov	r2, r3
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3896:	4299      	cmp	r1, r3
    3898:	d1c5      	bne.n	3826 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x6a>
    389a:	e7cc      	b.n	3836 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    int8_t count = 0;
    389c:	2400      	movs	r4, #0
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    389e:	b156      	cbz	r6, 38b6 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    38a0:	4b07      	ldr	r3, [pc, #28]	; (38c0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    38a2:	681b      	ldr	r3, [r3, #0]
    38a4:	eba3 0309 	sub.w	r3, r3, r9
    38a8:	42b3      	cmp	r3, r6
    38aa:	d304      	bcc.n	38b6 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    38ac:	9b00      	ldr	r3, [sp, #0]
    38ae:	429c      	cmp	r4, r3
    38b0:	bfb8      	it	lt
    38b2:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    38b6:	4620      	mov	r0, r4
    38b8:	b007      	add	sp, #28
    38ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38be:	bf00      	nop
    38c0:	200052bc 	.word	0x200052bc
    38c4:	20004700 	.word	0x20004700

000038c8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    38c8:	b500      	push	{lr}
    38ca:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
    38cc:	9300      	str	r3, [sp, #0]
    38ce:	4613      	mov	r3, r2
    38d0:	2201      	movs	r2, #1
    38d2:	f7ff ff73 	bl	37bc <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    38d6:	b003      	add	sp, #12
    38d8:	f85d fb04 	ldr.w	pc, [sp], #4

000038dc <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    38dc:	b530      	push	{r4, r5, lr}
    38de:	b083      	sub	sp, #12
    38e0:	4614      	mov	r4, r2
    38e2:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    38e4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    38e8:	f10d 0207 	add.w	r2, sp, #7
    38ec:	f7ff ffec 	bl	38c8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    38f0:	b160      	cbz	r0, 390c <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x30>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    38f2:	1b62      	subs	r2, r4, r5
    38f4:	3201      	adds	r2, #1
    38f6:	2101      	movs	r1, #1
    38f8:	fa01 f305 	lsl.w	r3, r1, r5
    38fc:	3b01      	subs	r3, #1
    38fe:	4093      	lsls	r3, r2
        b &= mask;
    3900:	f89d 1007 	ldrb.w	r1, [sp, #7]
        b >>= (bitStart - length + 1);
    3904:	400b      	ands	r3, r1
    3906:	4113      	asrs	r3, r2
    3908:	9a06      	ldr	r2, [sp, #24]
    390a:	7013      	strb	r3, [r2, #0]
}
    390c:	b003      	add	sp, #12
    390e:	bd30      	pop	{r4, r5, pc}

00003910 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    3910:	b570      	push	{r4, r5, r6, lr}
    3912:	4615      	mov	r5, r2
    3914:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    3916:	4a10      	ldr	r2, [pc, #64]	; (3958 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3918:	0040      	lsls	r0, r0, #1
    391a:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		transmitting = 1;
    391e:	2301      	movs	r3, #1
    3920:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
		txBufferLength = 1;
    3924:	f882 312f 	strb.w	r3, [r2, #303]	; 0x12f
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
	#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    3928:	4610      	mov	r0, r2
    392a:	f000 fac2 	bl	3eb2 <TwoWire::write(unsigned char)>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    392e:	b15d      	cbz	r5, 3948 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x38>
    3930:	1e74      	subs	r4, r6, #1
    3932:	3d01      	subs	r5, #1
    3934:	fa56 f585 	uxtab	r5, r6, r5
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
			#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
			Wire.write((uint8_t) data[i]);
    3938:	4e07      	ldr	r6, [pc, #28]	; (3958 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    393a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    393e:	4630      	mov	r0, r6
    3940:	f000 fab7 	bl	3eb2 <TwoWire::write(unsigned char)>
    for (uint8_t i = 0; i < length; i++) {
    3944:	42ac      	cmp	r4, r5
    3946:	d1f8      	bne.n	393a <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x2a>
		return endTransmission(1);
    3948:	2101      	movs	r1, #1
    394a:	4803      	ldr	r0, [pc, #12]	; (3958 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    394c:	f000 fbde 	bl	410c <TwoWire::endTransmission(unsigned char)>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
    3950:	fab0 f080 	clz	r0, r0
    3954:	0940      	lsrs	r0, r0, #5
    3956:	bd70      	pop	{r4, r5, r6, pc}
    3958:	20004700 	.word	0x20004700

0000395c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    395c:	b500      	push	{lr}
    395e:	b083      	sub	sp, #12
    3960:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
    3964:	f10d 0307 	add.w	r3, sp, #7
    3968:	2201      	movs	r2, #1
    396a:	f7ff ffd1 	bl	3910 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    396e:	b003      	add	sp, #12
    3970:	f85d fb04 	ldr.w	pc, [sp], #4

00003974 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    3974:	b5f0      	push	{r4, r5, r6, r7, lr}
    3976:	b083      	sub	sp, #12
    3978:	4604      	mov	r4, r0
    397a:	460d      	mov	r5, r1
    397c:	4616      	mov	r6, r2
    397e:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
    3980:	4b0c      	ldr	r3, [pc, #48]	; (39b4 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>)
    3982:	881b      	ldrh	r3, [r3, #0]
    3984:	f10d 0207 	add.w	r2, sp, #7
    3988:	f7ff ff9e 	bl	38c8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    398c:	b15f      	cbz	r7, 39a6 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    398e:	2301      	movs	r3, #1
    3990:	40b3      	lsls	r3, r6
    3992:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3996:	431a      	orrs	r2, r3
    3998:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
    399a:	4629      	mov	r1, r5
    399c:	4620      	mov	r0, r4
    399e:	f7ff ffdd 	bl	395c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
}
    39a2:	b003      	add	sp, #12
    39a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    39a6:	2301      	movs	r3, #1
    39a8:	40b3      	lsls	r3, r6
    39aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    39ae:	ea22 0203 	bic.w	r2, r2, r3
    39b2:	e7f2      	b.n	399a <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    39b4:	20003a16 	.word	0x20003a16

000039b8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    39b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ba:	b083      	sub	sp, #12
    39bc:	4605      	mov	r5, r0
    39be:	460e      	mov	r6, r1
    39c0:	4614      	mov	r4, r2
    39c2:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
    39c4:	4b0f      	ldr	r3, [pc, #60]	; (3a04 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>)
    39c6:	881b      	ldrh	r3, [r3, #0]
    39c8:	f10d 0207 	add.w	r2, sp, #7
    39cc:	f7ff ff7c 	bl	38c8 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    39d0:	b910      	cbnz	r0, 39d8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
        return false;
    39d2:	2000      	movs	r0, #0
}
    39d4:	b003      	add	sp, #12
    39d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    39d8:	1be2      	subs	r2, r4, r7
    39da:	3201      	adds	r2, #1
    39dc:	2101      	movs	r1, #1
    39de:	fa01 f307 	lsl.w	r3, r1, r7
    39e2:	3b01      	subs	r3, #1
    39e4:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
    39e6:	f89d 1020 	ldrb.w	r1, [sp, #32]
    39ea:	4091      	lsls	r1, r2
    39ec:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
    39ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    39f2:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
    39f6:	400b      	ands	r3, r1
        return writeByte(devAddr, regAddr, b);
    39f8:	431a      	orrs	r2, r3
    39fa:	4631      	mov	r1, r6
    39fc:	4628      	mov	r0, r5
    39fe:	f7ff ffad 	bl	395c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
    3a02:	e7e7      	b.n	39d4 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    3a04:	20003a16 	.word	0x20003a16

00003a08 <MPU6050::MPU6050(unsigned char)>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
    3a08:	7001      	strb	r1, [r0, #0]
}
    3a0a:	4770      	bx	lr

00003a0c <MPU6050::setFullScaleGyroRange(unsigned char)>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    3a0c:	b500      	push	{lr}
    3a0e:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    3a10:	7800      	ldrb	r0, [r0, #0]
    3a12:	9100      	str	r1, [sp, #0]
    3a14:	2302      	movs	r3, #2
    3a16:	2204      	movs	r2, #4
    3a18:	211b      	movs	r1, #27
    3a1a:	f7ff ffcd 	bl	39b8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3a1e:	b003      	add	sp, #12
    3a20:	f85d fb04 	ldr.w	pc, [sp], #4

00003a24 <MPU6050::setFullScaleAccelRange(unsigned char)>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    3a24:	b500      	push	{lr}
    3a26:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    3a28:	7800      	ldrb	r0, [r0, #0]
    3a2a:	9100      	str	r1, [sp, #0]
    3a2c:	2302      	movs	r3, #2
    3a2e:	2204      	movs	r2, #4
    3a30:	211c      	movs	r1, #28
    3a32:	f7ff ffc1 	bl	39b8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3a36:	b003      	add	sp, #12
    3a38:	f85d fb04 	ldr.w	pc, [sp], #4

00003a3c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    3a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3e:	b083      	sub	sp, #12
    3a40:	4604      	mov	r4, r0
    3a42:	460f      	mov	r7, r1
    3a44:	4616      	mov	r6, r2
    3a46:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
    3a48:	4603      	mov	r3, r0
    3a4a:	f813 0b01 	ldrb.w	r0, [r3], #1
    3a4e:	4a15      	ldr	r2, [pc, #84]	; (3aa4 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)+0x68>)
    3a50:	8812      	ldrh	r2, [r2, #0]
    3a52:	9200      	str	r2, [sp, #0]
    3a54:	220e      	movs	r2, #14
    3a56:	213b      	movs	r1, #59	; 0x3b
    3a58:	f7ff feb0 	bl	37bc <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    3a5c:	7862      	ldrb	r2, [r4, #1]
    3a5e:	78a3      	ldrb	r3, [r4, #2]
    3a60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a64:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    3a66:	78e2      	ldrb	r2, [r4, #3]
    3a68:	7923      	ldrb	r3, [r4, #4]
    3a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a6e:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    3a70:	7962      	ldrb	r2, [r4, #5]
    3a72:	79a3      	ldrb	r3, [r4, #6]
    3a74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a78:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    3a7a:	7a62      	ldrb	r2, [r4, #9]
    3a7c:	7aa3      	ldrb	r3, [r4, #10]
    3a7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a82:	9a08      	ldr	r2, [sp, #32]
    3a84:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    3a86:	7ae2      	ldrb	r2, [r4, #11]
    3a88:	7b23      	ldrb	r3, [r4, #12]
    3a8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3a90:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    3a92:	7b62      	ldrb	r2, [r4, #13]
    3a94:	7ba3      	ldrb	r3, [r4, #14]
    3a96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a9c:	8013      	strh	r3, [r2, #0]
}
    3a9e:	b003      	add	sp, #12
    3aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aa2:	bf00      	nop
    3aa4:	20003a16 	.word	0x20003a16

00003aa8 <MPU6050::setSleepEnabled(bool)>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    3aa8:	b508      	push	{r3, lr}
    3aaa:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    3aac:	2206      	movs	r2, #6
    3aae:	216b      	movs	r1, #107	; 0x6b
    3ab0:	7800      	ldrb	r0, [r0, #0]
    3ab2:	f7ff ff5f 	bl	3974 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3ab6:	bd08      	pop	{r3, pc}

00003ab8 <MPU6050::setClockSource(unsigned char)>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    3ab8:	b500      	push	{lr}
    3aba:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    3abc:	7800      	ldrb	r0, [r0, #0]
    3abe:	9100      	str	r1, [sp, #0]
    3ac0:	2303      	movs	r3, #3
    3ac2:	2202      	movs	r2, #2
    3ac4:	216b      	movs	r1, #107	; 0x6b
    3ac6:	f7ff ff77 	bl	39b8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3aca:	b003      	add	sp, #12
    3acc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ad0 <MPU6050::initialize()>:
void MPU6050::initialize() {
    3ad0:	b510      	push	{r4, lr}
    3ad2:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    3ad4:	2101      	movs	r1, #1
    3ad6:	f7ff ffef 	bl	3ab8 <MPU6050::setClockSource(unsigned char)>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    3ada:	2100      	movs	r1, #0
    3adc:	4620      	mov	r0, r4
    3ade:	f7ff ff95 	bl	3a0c <MPU6050::setFullScaleGyroRange(unsigned char)>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    3ae2:	2100      	movs	r1, #0
    3ae4:	4620      	mov	r0, r4
    3ae6:	f7ff ff9d 	bl	3a24 <MPU6050::setFullScaleAccelRange(unsigned char)>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    3aea:	2100      	movs	r1, #0
    3aec:	4620      	mov	r0, r4
    3aee:	f7ff ffdb 	bl	3aa8 <MPU6050::setSleepEnabled(bool)>
}
    3af2:	bd10      	pop	{r4, pc}

00003af4 <MPU6050::getDeviceID()>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    3af4:	b510      	push	{r4, lr}
    3af6:	b082      	sub	sp, #8
    3af8:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    3afa:	4603      	mov	r3, r0
    3afc:	f813 0b01 	ldrb.w	r0, [r3], #1
    3b00:	4a05      	ldr	r2, [pc, #20]	; (3b18 <MPU6050::getDeviceID()+0x24>)
    3b02:	8812      	ldrh	r2, [r2, #0]
    3b04:	9201      	str	r2, [sp, #4]
    3b06:	9300      	str	r3, [sp, #0]
    3b08:	2306      	movs	r3, #6
    3b0a:	461a      	mov	r2, r3
    3b0c:	2175      	movs	r1, #117	; 0x75
    3b0e:	f7ff fee5 	bl	38dc <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    return buffer[0];
}
    3b12:	7860      	ldrb	r0, [r4, #1]
    3b14:	b002      	add	sp, #8
    3b16:	bd10      	pop	{r4, pc}
    3b18:	20003a16 	.word	0x20003a16

00003b1c <MPU6050::testConnection()>:
bool MPU6050::testConnection() {
    3b1c:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
    3b1e:	f7ff ffe9 	bl	3af4 <MPU6050::getDeviceID()>
}
    3b22:	2834      	cmp	r0, #52	; 0x34
    3b24:	bf14      	ite	ne
    3b26:	2000      	movne	r0, #0
    3b28:	2001      	moveq	r0, #1
    3b2a:	bd08      	pop	{r3, pc}

00003b2c <SBUS::SBUS(HardwareSerial&)>:
	uint8_t PACKET[25];
	volatile int SENDINDEX;
	void sendByte();
#endif
/* SBUS object, input the serial bus */
SBUS::SBUS(HardwareSerial& bus)
    3b2c:	b510      	push	{r4, lr}
    3b2e:	4a10      	ldr	r2, [pc, #64]	; (3b70 <SBUS::SBUS(HardwareSerial&)+0x44>)
    3b30:	6002      	str	r2, [r0, #0]
    3b32:	f04f 0e0f 	mov.w	lr, #15
    3b36:	f880 e004 	strb.w	lr, [r0, #4]
    3b3a:	f04f 0c00 	mov.w	ip, #0
    3b3e:	f880 c005 	strb.w	ip, [r0, #5]
    3b42:	2204      	movs	r2, #4
    3b44:	7182      	strb	r2, [r0, #6]
    3b46:	f880 e007 	strb.w	lr, [r0, #7]
    3b4a:	f641 3458 	movw	r4, #7000	; 0x1b58
    3b4e:	6084      	str	r4, [r0, #8]
    3b50:	f880 c00d 	strb.w	ip, [r0, #13]
    3b54:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    3b58:	2208      	movs	r2, #8
    3b5a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    3b5e:	22ac      	movs	r2, #172	; 0xac
    3b60:	8542      	strh	r2, [r0, #42]	; 0x2a
    3b62:	f240 7213 	movw	r2, #1811	; 0x713
    3b66:	8582      	strh	r2, [r0, #44]	; 0x2c
{
	_bus = &bus;
    3b68:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
    3b6c:	bd10      	pop	{r4, pc}
    3b6e:	bf00      	nop
    3b70:	000186a0 	.word	0x000186a0

00003b74 <SBUS::~SBUS()>:
		}
	}
}

/* destructor, free dynamically allocated memory */
SBUS::~SBUS()
    3b74:	b538      	push	{r3, r4, r5, lr}
    3b76:	4605      	mov	r5, r0
{
	if (_readCoeff) {
    3b78:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    3b7c:	b183      	cbz	r3, 3ba0 <SBUS::~SBUS()+0x2c>
    3b7e:	2400      	movs	r4, #0
    3b80:	e004      	b.n	3b8c <SBUS::~SBUS()+0x18>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_readCoeff[i]) {
				free(_readCoeff[i]);
    3b82:	f00d facf 	bl	11124 <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    3b86:	3404      	adds	r4, #4
    3b88:	2c40      	cmp	r4, #64	; 0x40
    3b8a:	d005      	beq.n	3b98 <SBUS::~SBUS()+0x24>
			if (_readCoeff[i]) {
    3b8c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    3b90:	5918      	ldr	r0, [r3, r4]
    3b92:	2800      	cmp	r0, #0
    3b94:	d1f5      	bne.n	3b82 <SBUS::~SBUS()+0xe>
    3b96:	e7f6      	b.n	3b86 <SBUS::~SBUS()+0x12>
			}
		}
		free(_readCoeff);
    3b98:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    3b9c:	f00d fac2 	bl	11124 <free>
	}
	if (_writeCoeff) {
    3ba0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    3ba4:	b183      	cbz	r3, 3bc8 <SBUS::~SBUS()+0x54>
    3ba6:	2400      	movs	r4, #0
    3ba8:	e004      	b.n	3bb4 <SBUS::~SBUS()+0x40>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_writeCoeff[i]) {
				free(_writeCoeff[i]);
    3baa:	f00d fabb 	bl	11124 <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    3bae:	3404      	adds	r4, #4
    3bb0:	2c40      	cmp	r4, #64	; 0x40
    3bb2:	d005      	beq.n	3bc0 <SBUS::~SBUS()+0x4c>
			if (_writeCoeff[i]) {
    3bb4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    3bb8:	5918      	ldr	r0, [r3, r4]
    3bba:	2800      	cmp	r0, #0
    3bbc:	d1f5      	bne.n	3baa <SBUS::~SBUS()+0x36>
    3bbe:	e7f6      	b.n	3bae <SBUS::~SBUS()+0x3a>
			}
		}
		free(_writeCoeff);
    3bc0:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    3bc4:	f00d faae 	bl	11124 <free>
	}
}
    3bc8:	4628      	mov	r0, r5
    3bca:	bd38      	pop	{r3, r4, r5, pc}

00003bcc <SBUS::parse()>:

/* parse the SBUS data */
bool SBUS::parse()
{
    3bcc:	b570      	push	{r4, r5, r6, lr}
    3bce:	4604      	mov	r4, r0
	// reset the parser state if too much time has passed
	static elapsedMicros _sbusTime = 0;
    3bd0:	4b2b      	ldr	r3, [pc, #172]	; (3c80 <SBUS::parse()+0xb4>)
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	f013 0f01 	tst.w	r3, #1
    3bd8:	d00c      	beq.n	3bf4 <SBUS::parse()+0x28>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    3bda:	f009 f8e3 	bl	cda4 <micros>
    3bde:	4b29      	ldr	r3, [pc, #164]	; (3c84 <SBUS::parse()+0xb8>)
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	1ac0      	subs	r0, r0, r3
	if (_sbusTime > SBUS_TIMEOUT_US) {_parserState = 0;}
    3be4:	68a3      	ldr	r3, [r4, #8]
    3be6:	4283      	cmp	r3, r0
    3be8:	d201      	bcs.n	3bee <SBUS::parse()+0x22>
    3bea:	2300      	movs	r3, #0
    3bec:	7323      	strb	r3, [r4, #12]
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    3bee:	4d25      	ldr	r5, [pc, #148]	; (3c84 <SBUS::parse()+0xb8>)
		_sbusTime = 0;
		_curByte = _bus->read();
		// find the header
		if (_parserState == 0) {
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
					_parserState++;
    3bf0:	2601      	movs	r6, #1
    3bf2:	e011      	b.n	3c18 <SBUS::parse()+0x4c>
	elapsedMicros(unsigned long val) { us = micros() - val; }
    3bf4:	f009 f8d6 	bl	cda4 <micros>
    3bf8:	4b22      	ldr	r3, [pc, #136]	; (3c84 <SBUS::parse()+0xb8>)
    3bfa:	6018      	str	r0, [r3, #0]
	static elapsedMicros _sbusTime = 0;
    3bfc:	4b20      	ldr	r3, [pc, #128]	; (3c80 <SBUS::parse()+0xb4>)
    3bfe:	2201      	movs	r2, #1
    3c00:	601a      	str	r2, [r3, #0]
    3c02:	e7ea      	b.n	3bda <SBUS::parse()+0xe>
				} else {
					_parserState = 0;
				}
		} else {
			// strip off the data
			if ((_parserState-1) < _payloadSize) {
    3c04:	2b18      	cmp	r3, #24
    3c06:	d803      	bhi.n	3c10 <SBUS::parse()+0x44>
				_payload[_parserState-1] = _curByte;
    3c08:	18e2      	adds	r2, r4, r3
    3c0a:	7390      	strb	r0, [r2, #14]
				_parserState++;
    3c0c:	3301      	adds	r3, #1
    3c0e:	7323      	strb	r3, [r4, #12]
			}
			// check the end byte
			if ((_parserState-1) == _payloadSize) {
    3c10:	7b23      	ldrb	r3, [r4, #12]
    3c12:	2b19      	cmp	r3, #25
    3c14:	d022      	beq.n	3c5c <SBUS::parse()+0x90>
					_parserState = 0;
					return false;
				}
			}
		}
		_prevByte = _curByte;
    3c16:	7360      	strb	r0, [r4, #13]
	while (_bus->available() > 0) {
    3c18:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    3c1c:	6803      	ldr	r3, [r0, #0]
    3c1e:	691b      	ldr	r3, [r3, #16]
    3c20:	4798      	blx	r3
    3c22:	2800      	cmp	r0, #0
    3c24:	dd29      	ble.n	3c7a <SBUS::parse()+0xae>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    3c26:	f009 f8bd 	bl	cda4 <micros>
    3c2a:	6028      	str	r0, [r5, #0]
		_curByte = _bus->read();
    3c2c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    3c30:	6803      	ldr	r3, [r0, #0]
    3c32:	695b      	ldr	r3, [r3, #20]
    3c34:	4798      	blx	r3
    3c36:	b2c0      	uxtb	r0, r0
    3c38:	73a0      	strb	r0, [r4, #14]
		if (_parserState == 0) {
    3c3a:	7b23      	ldrb	r3, [r4, #12]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d1e1      	bne.n	3c04 <SBUS::parse()+0x38>
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
    3c40:	7923      	ldrb	r3, [r4, #4]
    3c42:	4283      	cmp	r3, r0
    3c44:	d1e7      	bne.n	3c16 <SBUS::parse()+0x4a>
    3c46:	7b63      	ldrb	r3, [r4, #13]
    3c48:	7962      	ldrb	r2, [r4, #5]
    3c4a:	429a      	cmp	r2, r3
    3c4c:	d004      	beq.n	3c58 <SBUS::parse()+0x8c>
    3c4e:	79e1      	ldrb	r1, [r4, #7]
    3c50:	79a2      	ldrb	r2, [r4, #6]
    3c52:	400b      	ands	r3, r1
    3c54:	429a      	cmp	r2, r3
    3c56:	d1de      	bne.n	3c16 <SBUS::parse()+0x4a>
					_parserState++;
    3c58:	7326      	strb	r6, [r4, #12]
    3c5a:	e7dc      	b.n	3c16 <SBUS::parse()+0x4a>
				if ((_curByte == _sbusFooter) || ((_curByte & _sbus2Mask) == _sbus2Footer)) {
    3c5c:	7963      	ldrb	r3, [r4, #5]
    3c5e:	4283      	cmp	r3, r0
    3c60:	d007      	beq.n	3c72 <SBUS::parse()+0xa6>
    3c62:	79e2      	ldrb	r2, [r4, #7]
    3c64:	79a3      	ldrb	r3, [r4, #6]
    3c66:	4010      	ands	r0, r2
    3c68:	4283      	cmp	r3, r0
    3c6a:	d002      	beq.n	3c72 <SBUS::parse()+0xa6>
					_parserState = 0;
    3c6c:	2000      	movs	r0, #0
    3c6e:	7320      	strb	r0, [r4, #12]
					return false;
    3c70:	e004      	b.n	3c7c <SBUS::parse()+0xb0>
					_parserState = 0;
    3c72:	2300      	movs	r3, #0
    3c74:	7323      	strb	r3, [r4, #12]
					return true;
    3c76:	2001      	movs	r0, #1
    3c78:	e000      	b.n	3c7c <SBUS::parse()+0xb0>
	}
	// return false if a partial packet
	return false;
    3c7a:	2000      	movs	r0, #0
}
    3c7c:	bd70      	pop	{r4, r5, r6, pc}
    3c7e:	bf00      	nop
    3c80:	20004ac0 	.word	0x20004ac0
    3c84:	20004bb0 	.word	0x20004bb0

00003c88 <SBUS::read(unsigned short*, bool*, bool*)>:
{
    3c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c8a:	4604      	mov	r4, r0
    3c8c:	460d      	mov	r5, r1
    3c8e:	4616      	mov	r6, r2
    3c90:	461f      	mov	r7, r3
	if (parse()) {
    3c92:	f7ff ff9b 	bl	3bcc <SBUS::parse()>
    3c96:	4602      	mov	r2, r0
    3c98:	2800      	cmp	r0, #0
    3c9a:	f000 80a5 	beq.w	3de8 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
		if (channels) {
    3c9e:	2d00      	cmp	r5, #0
    3ca0:	f000 808e 	beq.w	3dc0 <SBUS::read(unsigned short*, bool*, bool*)+0x138>
			channels[0]  = (uint16_t) ((_payload[0]    |_payload[1] <<8)                     & 0x07FF);
    3ca4:	7c21      	ldrb	r1, [r4, #16]
    3ca6:	7be3      	ldrb	r3, [r4, #15]
    3ca8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3cb0:	802b      	strh	r3, [r5, #0]
			channels[1]  = (uint16_t) ((_payload[1]>>3 |_payload[2] <<5)                     & 0x07FF);
    3cb2:	7c21      	ldrb	r1, [r4, #16]
    3cb4:	7c63      	ldrb	r3, [r4, #17]
    3cb6:	015b      	lsls	r3, r3, #5
    3cb8:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    3cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3cc0:	806b      	strh	r3, [r5, #2]
			channels[2]  = (uint16_t) ((_payload[2]>>6 |_payload[3] <<2 |_payload[4]<<10)  	 & 0x07FF);
    3cc2:	7ca1      	ldrb	r1, [r4, #18]
    3cc4:	7ce3      	ldrb	r3, [r4, #19]
    3cc6:	029b      	lsls	r3, r3, #10
    3cc8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    3ccc:	7c61      	ldrb	r1, [r4, #17]
    3cce:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    3cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3cd6:	80ab      	strh	r3, [r5, #4]
			channels[3]  = (uint16_t) ((_payload[4]>>1 |_payload[5] <<7)                     & 0x07FF);
    3cd8:	7ce1      	ldrb	r1, [r4, #19]
    3cda:	7d23      	ldrb	r3, [r4, #20]
    3cdc:	01db      	lsls	r3, r3, #7
    3cde:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    3ce2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3ce6:	80eb      	strh	r3, [r5, #6]
			channels[4]  = (uint16_t) ((_payload[5]>>4 |_payload[6] <<4)                     & 0x07FF);
    3ce8:	7d21      	ldrb	r1, [r4, #20]
    3cea:	7d63      	ldrb	r3, [r4, #21]
    3cec:	011b      	lsls	r3, r3, #4
    3cee:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    3cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3cf6:	812b      	strh	r3, [r5, #8]
			channels[5]  = (uint16_t) ((_payload[6]>>7 |_payload[7] <<1 |_payload[8]<<9)   	 & 0x07FF);
    3cf8:	7da1      	ldrb	r1, [r4, #22]
    3cfa:	7de3      	ldrb	r3, [r4, #23]
    3cfc:	025b      	lsls	r3, r3, #9
    3cfe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3d02:	7d61      	ldrb	r1, [r4, #21]
    3d04:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    3d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d0c:	816b      	strh	r3, [r5, #10]
			channels[6]  = (uint16_t) ((_payload[8]>>2 |_payload[9] <<6)                     & 0x07FF);
    3d0e:	7de1      	ldrb	r1, [r4, #23]
    3d10:	7e23      	ldrb	r3, [r4, #24]
    3d12:	019b      	lsls	r3, r3, #6
    3d14:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    3d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d1c:	81ab      	strh	r3, [r5, #12]
			channels[7]  = (uint16_t) ((_payload[9]>>5 |_payload[10]<<3)                     & 0x07FF);
    3d1e:	7e21      	ldrb	r1, [r4, #24]
    3d20:	7e63      	ldrb	r3, [r4, #25]
    3d22:	00db      	lsls	r3, r3, #3
    3d24:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    3d28:	81eb      	strh	r3, [r5, #14]
			channels[8]  = (uint16_t) ((_payload[11]   |_payload[12]<<8)                     & 0x07FF);
    3d2a:	7ee1      	ldrb	r1, [r4, #27]
    3d2c:	7ea3      	ldrb	r3, [r4, #26]
    3d2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d36:	822b      	strh	r3, [r5, #16]
			channels[9]  = (uint16_t) ((_payload[12]>>3|_payload[13]<<5)                     & 0x07FF);
    3d38:	7ee1      	ldrb	r1, [r4, #27]
    3d3a:	7f23      	ldrb	r3, [r4, #28]
    3d3c:	015b      	lsls	r3, r3, #5
    3d3e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    3d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d46:	826b      	strh	r3, [r5, #18]
			channels[10] = (uint16_t) ((_payload[13]>>6|_payload[14]<<2 |_payload[15]<<10) 	 & 0x07FF);
    3d48:	7f61      	ldrb	r1, [r4, #29]
    3d4a:	7fa3      	ldrb	r3, [r4, #30]
    3d4c:	029b      	lsls	r3, r3, #10
    3d4e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    3d52:	7f21      	ldrb	r1, [r4, #28]
    3d54:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    3d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d5c:	82ab      	strh	r3, [r5, #20]
			channels[11] = (uint16_t) ((_payload[15]>>1|_payload[16]<<7)                     & 0x07FF);
    3d5e:	7fa1      	ldrb	r1, [r4, #30]
    3d60:	7fe3      	ldrb	r3, [r4, #31]
    3d62:	01db      	lsls	r3, r3, #7
    3d64:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    3d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d6c:	82eb      	strh	r3, [r5, #22]
			channels[12] = (uint16_t) ((_payload[16]>>4|_payload[17]<<4)                     & 0x07FF);
    3d6e:	7fe1      	ldrb	r1, [r4, #31]
    3d70:	f894 3020 	ldrb.w	r3, [r4, #32]
    3d74:	011b      	lsls	r3, r3, #4
    3d76:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    3d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d7e:	832b      	strh	r3, [r5, #24]
			channels[13] = (uint16_t) ((_payload[17]>>7|_payload[18]<<1 |_payload[19]<<9)  	 & 0x07FF);
    3d80:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    3d84:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    3d88:	025b      	lsls	r3, r3, #9
    3d8a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3d8e:	f894 1020 	ldrb.w	r1, [r4, #32]
    3d92:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    3d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d9a:	836b      	strh	r3, [r5, #26]
			channels[14] = (uint16_t) ((_payload[19]>>2|_payload[20]<<6)                     & 0x07FF);
    3d9c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    3da0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    3da4:	019b      	lsls	r3, r3, #6
    3da6:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    3daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3dae:	83ab      	strh	r3, [r5, #28]
			channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
    3db0:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    3db4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    3db8:	00db      	lsls	r3, r3, #3
    3dba:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    3dbe:	83eb      	strh	r3, [r5, #30]
		if (lostFrame) {
    3dc0:	b147      	cbz	r7, 3dd4 <SBUS::read(unsigned short*, bool*, bool*)+0x14c>
    	if (_payload[22] & _sbusLostFrame) {
    3dc2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    3dc6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    3dca:	4219      	tst	r1, r3
      	*lostFrame = true;
    3dcc:	bf14      	ite	ne
    3dce:	2301      	movne	r3, #1
				*lostFrame = false;
    3dd0:	2300      	moveq	r3, #0
    3dd2:	703b      	strb	r3, [r7, #0]
		if (failsafe) {
    3dd4:	b146      	cbz	r6, 3de8 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
    	if (_payload[22] & _sbusFailSafe) {
    3dd6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    3dda:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    3dde:	4219      	tst	r1, r3
      		*failsafe = true;
    3de0:	bf14      	ite	ne
    3de2:	2301      	movne	r3, #1
      		*failsafe = false;
    3de4:	2300      	moveq	r3, #0
    3de6:	7033      	strb	r3, [r6, #0]
}
    3de8:	4610      	mov	r0, r2
    3dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003dec <SBUS::scaleBias(unsigned char)>:

/* compute scale factor and bias from end points */
void SBUS::scaleBias(uint8_t channel)
{
	_sbusScale[channel] = 2.0f / ((float)_sbusMax[channel] - (float)_sbusMin[channel]);
    3dec:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    3df0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    3df2:	ee07 2a10 	vmov	s14, r2
    3df6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3dfa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    3dfe:	ee07 3a90 	vmov	s15, r3
    3e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3e0a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    3e0e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    3e12:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3e16:	edc0 6a1c 	vstr	s13, [r0, #112]	; 0x70
	_sbusBias[channel] = -1.0f*((float)_sbusMin[channel] + ((float)_sbusMax[channel] - (float)_sbusMin[channel]) / 2.0f) * _sbusScale[channel];
    3e1a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    3e1e:	ee67 7a86 	vmul.f32	s15, s15, s12
    3e22:	ee77 7a87 	vadd.f32	s15, s15, s14
    3e26:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    3e2a:	edc0 7a2c 	vstr	s15, [r0, #176]	; 0xb0
}
    3e2e:	4770      	bx	lr

00003e30 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>:
{
    3e30:	b508      	push	{r3, lr}
	_sbusMin[channel] = min;
    3e32:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
    3e36:	f8ac 202e 	strh.w	r2, [ip, #46]	; 0x2e
	_sbusMax[channel] = max;
    3e3a:	f8ac 304e 	strh.w	r3, [ip, #78]	; 0x4e
	scaleBias(channel);
    3e3e:	f7ff ffd5 	bl	3dec <SBUS::scaleBias(unsigned char)>
}
    3e42:	bd08      	pop	{r3, pc}

00003e44 <SBUS::begin()>:
{
    3e44:	b538      	push	{r3, r4, r5, lr}
    3e46:	4605      	mov	r5, r0
	_parserState = 0;
    3e48:	2400      	movs	r4, #0
    3e4a:	7304      	strb	r4, [r0, #12]
		setEndPoints(i,_defaultMin,_defaultMax);
    3e4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3e4e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    3e50:	b2e1      	uxtb	r1, r4
    3e52:	4628      	mov	r0, r5
    3e54:	f7ff ffec 	bl	3e30 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>
	for (uint8_t i = 0; i < _numChannels; i++) {
    3e58:	3401      	adds	r4, #1
    3e5a:	2c10      	cmp	r4, #16
    3e5c:	d1f6      	bne.n	3e4c <SBUS::begin()+0x8>
		_bus->begin(_sbusBaud,SERIAL_8E2_RXINV_TXINV);
    3e5e:	f44f 729b 	mov.w	r2, #310	; 0x136
    3e62:	6829      	ldr	r1, [r5, #0]
    3e64:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    3e68:	f008 f8b2 	bl	bfd0 <HardwareSerial::begin(unsigned long, unsigned short)>
}
    3e6c:	bd38      	pop	{r3, r4, r5, pc}

00003e6e <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    3e6e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    3e72:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    3e76:	1a10      	subs	r0, r2, r0
    3e78:	4770      	bx	lr

00003e7a <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    3e7a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    3e7e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    3e82:	429a      	cmp	r2, r3
    3e84:	d905      	bls.n	3e92 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    3e86:	1c5a      	adds	r2, r3, #1
    3e88:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    3e8c:	4418      	add	r0, r3
    3e8e:	7e80      	ldrb	r0, [r0, #26]
    3e90:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    3e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    3e96:	4770      	bx	lr

00003e98 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3e98:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    3e9c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d902      	bls.n	3eaa <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    3ea4:	4418      	add	r0, r3
    3ea6:	7e80      	ldrb	r0, [r0, #26]
    3ea8:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    3eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    3eae:	4770      	bx	lr

00003eb0 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    3eb0:	4770      	bx	lr

00003eb2 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    3eb2:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    3eb6:	b17b      	cbz	r3, 3ed8 <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    3eb8:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    3ebc:	2b88      	cmp	r3, #136	; 0x88
    3ebe:	d903      	bls.n	3ec8 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    3ec0:	2301      	movs	r3, #1
    3ec2:	6043      	str	r3, [r0, #4]
			return 0;
    3ec4:	2000      	movs	r0, #0
    3ec6:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    3ec8:	1c5a      	adds	r2, r3, #1
    3eca:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
    3ece:	4418      	add	r0, r3
    3ed0:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    3ed4:	2001      	movs	r0, #1
    3ed6:	4770      	bx	lr
	return 0;
    3ed8:	2000      	movs	r0, #0
}
    3eda:	4770      	bx	lr

00003edc <TwoWire::write(unsigned char const*, unsigned int)>:
{
    3edc:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    3ede:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    3ee2:	b90b      	cbnz	r3, 3ee8 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
    3ee4:	2000      	movs	r0, #0
}
    3ee6:	bd38      	pop	{r3, r4, r5, pc}
    3ee8:	4605      	mov	r5, r0
    3eea:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    3eec:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    3ef0:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    3ef4:	42a2      	cmp	r2, r4
    3ef6:	d202      	bcs.n	3efe <TwoWire::write(unsigned char const*, unsigned int)+0x22>
    3ef8:	2001      	movs	r0, #1
    3efa:	6068      	str	r0, [r5, #4]
			quantity = avail;
    3efc:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    3efe:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    3f02:	4622      	mov	r2, r4
    3f04:	4418      	add	r0, r3
    3f06:	f009 f80b 	bl	cf20 <memcpy>
		txBufferLength += quantity;
    3f0a:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    3f0e:	4423      	add	r3, r4
    3f10:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
    3f14:	4620      	mov	r0, r4
    3f16:	e7e6      	b.n	3ee6 <TwoWire::write(unsigned char const*, unsigned int)+0xa>

00003f18 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    3f18:	b538      	push	{r3, r4, r5, lr}
    3f1a:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    3f1c:	2500      	movs	r5, #0
    3f1e:	6045      	str	r5, [r0, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3f24:	6083      	str	r3, [r0, #8]
    3f26:	7305      	strb	r5, [r0, #12]
		: port(myport), hardware(myhardware) {
    3f28:	4b15      	ldr	r3, [pc, #84]	; (3f80 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    3f2a:	6003      	str	r3, [r0, #0]
    3f2c:	6101      	str	r1, [r0, #16]
    3f2e:	6142      	str	r2, [r0, #20]
    3f30:	7605      	strb	r5, [r0, #24]
    3f32:	7645      	strb	r5, [r0, #25]
    3f34:	2288      	movs	r2, #136	; 0x88
    3f36:	4629      	mov	r1, r5
    3f38:	301a      	adds	r0, #26
    3f3a:	f00d fc77 	bl	1182c <memset>
    3f3e:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    3f42:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    3f46:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    3f4a:	2289      	movs	r2, #137	; 0x89
    3f4c:	4629      	mov	r1, r5
    3f4e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    3f52:	f00d fc6b 	bl	1182c <memset>
    3f56:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    3f5a:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    3f5e:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    3f62:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    3f66:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    3f6a:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    3f6e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    3f72:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    3f76:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	}
    3f7a:	4620      	mov	r0, r4
    3f7c:	bd38      	pop	{r3, r4, r5, pc}
    3f7e:	bf00      	nop
    3f80:	20002484 	.word	0x20002484

00003f84 <TwoWire::force_clock()>:
{
    3f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f88:	b083      	sub	sp, #12
    3f8a:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    3f8c:	6943      	ldr	r3, [r0, #20]
    3f8e:	7e02      	ldrb	r2, [r0, #24]
    3f90:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    3f94:	7a11      	ldrb	r1, [r2, #8]
    3f96:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    3f98:	7e42      	ldrb	r2, [r0, #25]
    3f9a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    3f9e:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    3fa2:	4b47      	ldr	r3, [pc, #284]	; (40c0 <TwoWire::force_clock()+0x13c>)
    3fa4:	ea4f 1e01 	mov.w	lr, r1, lsl #4
    3fa8:	eb03 1201 	add.w	r2, r3, r1, lsl #4
    3fac:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    3fae:	ea4f 1108 	mov.w	r1, r8, lsl #4
    3fb2:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    3fb6:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    3fb8:	6852      	ldr	r2, [r2, #4]
    3fba:	2415      	movs	r4, #21
    3fbc:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
    3fbe:	f853 200e 	ldr.w	r2, [r3, lr]
    3fc2:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    3fc6:	f853 e00e 	ldr.w	lr, [r3, lr]
    3fca:	f8de 2004 	ldr.w	r2, [lr, #4]
    3fce:	4332      	orrs	r2, r6
    3fd0:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    3fd4:	686a      	ldr	r2, [r5, #4]
    3fd6:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    3fd8:	585a      	ldr	r2, [r3, r1]
    3fda:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    3fde:	585a      	ldr	r2, [r3, r1]
    3fe0:	6853      	ldr	r3, [r2, #4]
    3fe2:	4303      	orrs	r3, r0
    3fe4:	6053      	str	r3, [r2, #4]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    3fe6:	4b37      	ldr	r3, [pc, #220]	; (40c4 <TwoWire::force_clock()+0x140>)
    3fe8:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3fea:	4b37      	ldr	r3, [pc, #220]	; (40c8 <TwoWire::force_clock()+0x144>)
    3fec:	681a      	ldr	r2, [r3, #0]
    3fee:	4b37      	ldr	r3, [pc, #220]	; (40cc <TwoWire::force_clock()+0x148>)
    3ff0:	fba3 3202 	umull	r3, r2, r3, r2
    3ff4:	0c92      	lsrs	r2, r2, #18
    3ff6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3ffa:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    3ffc:	4931      	ldr	r1, [pc, #196]	; (40c4 <TwoWire::force_clock()+0x140>)
    3ffe:	684b      	ldr	r3, [r1, #4]
    4000:	1b1b      	subs	r3, r3, r4
    4002:	429a      	cmp	r2, r3
    4004:	d8fb      	bhi.n	3ffe <TwoWire::force_clock()+0x7a>
    4006:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
    4008:	492d      	ldr	r1, [pc, #180]	; (40c0 <TwoWire::force_clock()+0x13c>)
    400a:	9b01      	ldr	r3, [sp, #4]
    400c:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4010:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
    4014:	4b2b      	ldr	r3, [pc, #172]	; (40c4 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4016:	4d2c      	ldr	r5, [pc, #176]	; (40c8 <TwoWire::force_clock()+0x144>)
    4018:	4c2c      	ldr	r4, [pc, #176]	; (40cc <TwoWire::force_clock()+0x148>)
    401a:	e025      	b.n	4068 <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
    401c:	680f      	ldr	r7, [r1, #0]
    401e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4022:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4026:	f8d5 a000 	ldr.w	sl, [r5]
    402a:	fba4 9a0a 	umull	r9, sl, r4, sl
    402e:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4032:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4036:	685f      	ldr	r7, [r3, #4]
    4038:	eba7 090b 	sub.w	r9, r7, fp
    403c:	45ca      	cmp	sl, r9
    403e:	d8fa      	bhi.n	4036 <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
    4040:	680f      	ldr	r7, [r1, #0]
    4042:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4046:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    404a:	f8d5 a000 	ldr.w	sl, [r5]
    404e:	fba4 9a0a 	umull	r9, sl, r4, sl
    4052:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4056:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    405a:	685f      	ldr	r7, [r3, #4]
    405c:	eba7 090b 	sub.w	r9, r7, fp
    4060:	45ca      	cmp	sl, r9
    4062:	d8fa      	bhi.n	405a <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
    4064:	3a01      	subs	r2, #1
    4066:	d00e      	beq.n	4086 <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
    4068:	f8de 7000 	ldr.w	r7, [lr]
    406c:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4070:	ea19 0f06 	tst.w	r9, r6
    4074:	d0d2      	beq.n	401c <TwoWire::force_clock()+0x98>
    4076:	680f      	ldr	r7, [r1, #0]
    4078:	f8d7 9008 	ldr.w	r9, [r7, #8]
    407c:	ea19 0f00 	tst.w	r9, r0
    4080:	d0cc      	beq.n	401c <TwoWire::force_clock()+0x98>
			ret = true;
    4082:	2001      	movs	r0, #1
    4084:	e000      	b.n	4088 <TwoWire::force_clock()+0x104>
	bool ret = false;
    4086:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4088:	4b0d      	ldr	r3, [pc, #52]	; (40c0 <TwoWire::force_clock()+0x13c>)
    408a:	9a01      	ldr	r2, [sp, #4]
    408c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
    4090:	6879      	ldr	r1, [r7, #4]
    4092:	f8dc 2014 	ldr.w	r2, [ip, #20]
    4096:	f89c 4018 	ldrb.w	r4, [ip, #24]
    409a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    409e:	68d2      	ldr	r2, [r2, #12]
    40a0:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    40a2:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    40a6:	685a      	ldr	r2, [r3, #4]
    40a8:	f8dc 3014 	ldr.w	r3, [ip, #20]
    40ac:	f89c 1019 	ldrb.w	r1, [ip, #25]
    40b0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    40b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    40b6:	6013      	str	r3, [r2, #0]
}
    40b8:	b003      	add	sp, #12
    40ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40be:	bf00      	nop
    40c0:	20002828 	.word	0x20002828
    40c4:	e0001000 	.word	0xe0001000
    40c8:	20003288 	.word	0x20003288
    40cc:	431bde83 	.word	0x431bde83

000040d0 <TwoWire::wait_idle()>:
{
    40d0:	b538      	push	{r3, r4, r5, lr}
    40d2:	4605      	mov	r5, r0
	return systick_millis_count;
    40d4:	4b0c      	ldr	r3, [pc, #48]	; (4108 <TwoWire::wait_idle()+0x38>)
    40d6:	681c      	ldr	r4, [r3, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    40d8:	6902      	ldr	r2, [r0, #16]
    40da:	4619      	mov	r1, r3
    40dc:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    40de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    40e2:	d00a      	beq.n	40fa <TwoWire::wait_idle()+0x2a>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    40e4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    40e8:	d107      	bne.n	40fa <TwoWire::wait_idle()+0x2a>
    40ea:	680b      	ldr	r3, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
    40ec:	1b1b      	subs	r3, r3, r4
		if (timeout > 16) {
    40ee:	2b10      	cmp	r3, #16
    40f0:	d9f4      	bls.n	40dc <TwoWire::wait_idle()+0xc>
			if (force_clock()) break;
    40f2:	4628      	mov	r0, r5
    40f4:	f7ff ff46 	bl	3f84 <TwoWire::force_clock()>
    40f8:	b120      	cbz	r0, 4104 <TwoWire::wait_idle()+0x34>
	port->MSR = 0x00007F00; // clear all prior flags
    40fa:	692b      	ldr	r3, [r5, #16]
    40fc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    4100:	615a      	str	r2, [r3, #20]
	return true;
    4102:	2001      	movs	r0, #1
}
    4104:	bd38      	pop	{r3, r4, r5, pc}
    4106:	bf00      	nop
    4108:	200052bc 	.word	0x200052bc

0000410c <TwoWire::endTransmission(unsigned char)>:
{
    410c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    4110:	f890 612f 	ldrb.w	r6, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    4114:	2e00      	cmp	r6, #0
    4116:	d06e      	beq.n	41f6 <TwoWire::endTransmission(unsigned char)+0xea>
    4118:	4605      	mov	r5, r0
    411a:	4689      	mov	r9, r1
	if (!wait_idle()) return 4;
    411c:	f7ff ffd8 	bl	40d0 <TwoWire::wait_idle()>
    4120:	2800      	cmp	r0, #0
    4122:	d06b      	beq.n	41fc <TwoWire::endTransmission(unsigned char)+0xf0>
    4124:	4b36      	ldr	r3, [pc, #216]	; (4200 <TwoWire::endTransmission(unsigned char)+0xf4>)
    4126:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    412a:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    412c:	f44f 7a00 	mov.w	sl, #512	; 0x200
    4130:	461f      	mov	r7, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4132:	e040      	b.n	41b6 <TwoWire::endTransmission(unsigned char)+0xaa>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4134:	692b      	ldr	r3, [r5, #16]
    4136:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4138:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    413c:	f012 0f04 	tst.w	r2, #4
    4140:	d00b      	beq.n	415a <TwoWire::endTransmission(unsigned char)+0x4e>
    4142:	e03a      	b.n	41ba <TwoWire::endTransmission(unsigned char)+0xae>
				} else if (tx_index < tx_len) {
    4144:	42a6      	cmp	r6, r4
    4146:	d912      	bls.n	416e <TwoWire::endTransmission(unsigned char)+0x62>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4148:	692a      	ldr	r2, [r5, #16]
    414a:	1929      	adds	r1, r5, r4
    414c:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    4150:	6611      	str	r1, [r2, #96]	; 0x60
    4152:	3401      	adds	r4, #1
				fifo_used++;
    4154:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    4156:	2b03      	cmp	r3, #3
    4158:	d82f      	bhi.n	41ba <TwoWire::endTransmission(unsigned char)+0xae>
				if (tx_index == 0) {
    415a:	2c00      	cmp	r4, #0
    415c:	d1f2      	bne.n	4144 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    415e:	6929      	ldr	r1, [r5, #16]
    4160:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    4164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4168:	660a      	str	r2, [r1, #96]	; 0x60
					tx_index = 1;
    416a:	2401      	movs	r4, #1
    416c:	e7f2      	b.n	4154 <TwoWire::endTransmission(unsigned char)+0x48>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    416e:	f1b9 0f00 	cmp.w	r9, #0
    4172:	d002      	beq.n	417a <TwoWire::endTransmission(unsigned char)+0x6e>
    4174:	692b      	ldr	r3, [r5, #16]
    4176:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    417a:	3401      	adds	r4, #1
					break;
    417c:	e01d      	b.n	41ba <TwoWire::endTransmission(unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    417e:	690b      	ldr	r3, [r1, #16]
    4180:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4184:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    4186:	2004      	movs	r0, #4
    4188:	e036      	b.n	41f8 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    418a:	690b      	ldr	r3, [r1, #16]
    418c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4190:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    4192:	692b      	ldr	r3, [r5, #16]
    4194:	f44f 7200 	mov.w	r2, #512	; 0x200
    4198:	661a      	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    419a:	2002      	movs	r0, #2
    419c:	e02c      	b.n	41f8 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    419e:	690b      	ldr	r3, [r1, #16]
    41a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    41a4:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    41a6:	692b      	ldr	r3, [r5, #16]
    41a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    41ac:	661a      	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    41ae:	2004      	movs	r0, #4
    41b0:	e022      	b.n	41f8 <TwoWire::endTransmission(unsigned char)+0xec>
		yield();
    41b2:	f00a fd15 	bl	ebe0 <yield>
		if (tx_index <= tx_len) {
    41b6:	42b4      	cmp	r4, r6
    41b8:	d9bc      	bls.n	4134 <TwoWire::endTransmission(unsigned char)+0x28>
		uint32_t status = port->MSR; // pg 2884 & 2891
    41ba:	6929      	ldr	r1, [r5, #16]
    41bc:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    41be:	f413 6f00 	tst.w	r3, #2048	; 0x800
    41c2:	d1dc      	bne.n	417e <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    41c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    41c8:	d1df      	bne.n	418a <TwoWire::endTransmission(unsigned char)+0x7e>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    41ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    41ce:	d1e6      	bne.n	419e <TwoWire::endTransmission(unsigned char)+0x92>
    41d0:	683a      	ldr	r2, [r7, #0]
	operator unsigned long () const { return millis() - ms; }
    41d2:	eba2 0208 	sub.w	r2, r2, r8
    41d6:	2a32      	cmp	r2, #50	; 0x32
    41d8:	d8e1      	bhi.n	419e <TwoWire::endTransmission(unsigned char)+0x92>
		if (tx_index > tx_len) {
    41da:	42b4      	cmp	r4, r6
    41dc:	d9e9      	bls.n	41b2 <TwoWire::endTransmission(unsigned char)+0xa6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    41de:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    41e0:	f012 0f07 	tst.w	r2, #7
    41e4:	d1e5      	bne.n	41b2 <TwoWire::endTransmission(unsigned char)+0xa6>
    41e6:	f413 7f00 	tst.w	r3, #512	; 0x200
    41ea:	d102      	bne.n	41f2 <TwoWire::endTransmission(unsigned char)+0xe6>
    41ec:	f1b9 0f00 	cmp.w	r9, #0
    41f0:	d1df      	bne.n	41b2 <TwoWire::endTransmission(unsigned char)+0xa6>
				return 0;
    41f2:	2000      	movs	r0, #0
    41f4:	e000      	b.n	41f8 <TwoWire::endTransmission(unsigned char)+0xec>
	if (!tx_len) return 4; // no address for transmit
    41f6:	2004      	movs	r0, #4
}
    41f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!wait_idle()) return 4;
    41fc:	2004      	movs	r0, #4
    41fe:	e7fb      	b.n	41f8 <TwoWire::endTransmission(unsigned char)+0xec>
    4200:	200052bc 	.word	0x200052bc

00004204 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4208:	4604      	mov	r4, r0
    420a:	460d      	mov	r5, r1
    420c:	4616      	mov	r6, r2
    420e:	4698      	mov	r8, r3
	if (!wait_idle()) return 4;
    4210:	f7ff ff5e 	bl	40d0 <TwoWire::wait_idle()>
    4214:	2800      	cmp	r0, #0
    4216:	f000 8090 	beq.w	433a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    421a:	0069      	lsls	r1, r5, #1
	if (length < 1) length = 1;
    421c:	2e01      	cmp	r6, #1
    421e:	bf38      	it	cc
    4220:	2601      	movcc	r6, #1
	rxBufferIndex = 0;
    4222:	2500      	movs	r5, #0
    4224:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
	rxBufferLength = 0;
    4228:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    422c:	4b44      	ldr	r3, [pc, #272]	; (4340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    422e:	f8d3 9000 	ldr.w	r9, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4232:	b2c9      	uxtb	r1, r1
    4234:	f240 4701 	movw	r7, #1025	; 0x401
    4238:	430f      	orrs	r7, r1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    423a:	e059      	b.n	42f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    423c:	6923      	ldr	r3, [r4, #16]
    423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4240:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    4244:	f013 0f04 	tst.w	r3, #4
    4248:	d154      	bne.n	42f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    424a:	462b      	mov	r3, r5
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    424c:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4250:	1e70      	subs	r0, r6, #1
    4252:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4256:	4429      	add	r1, r5
    4258:	e010      	b.n	427c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    425a:	2b01      	cmp	r3, #1
    425c:	d006      	beq.n	426c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    425e:	f1b8 0f00 	cmp.w	r8, #0
    4262:	d005      	beq.n	4270 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
    4264:	6922      	ldr	r2, [r4, #16]
    4266:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    426a:	e001      	b.n	4270 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    426c:	6922      	ldr	r2, [r4, #16]
    426e:	6610      	str	r0, [r2, #96]	; 0x60
				tx_state++;
    4270:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
    4272:	1aca      	subs	r2, r1, r3
    4274:	2a03      	cmp	r2, #3
    4276:	d806      	bhi.n	4286 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
    4278:	2b02      	cmp	r3, #2
    427a:	d804      	bhi.n	4286 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
				if (tx_state == 0) {
    427c:	2b00      	cmp	r3, #0
    427e:	d1ec      	bne.n	425a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4280:	6922      	ldr	r2, [r4, #16]
    4282:	6617      	str	r7, [r2, #96]	; 0x60
    4284:	e7f4      	b.n	4270 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				tx_state++;
    4286:	461d      	mov	r5, r3
    4288:	e034      	b.n	42f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    428a:	f8d4 c010 	ldr.w	ip, [r4, #16]
    428e:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
    4292:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4296:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    429a:	d02f      	beq.n	42fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
				rxBuffer[rxBufferLength++] = port->MRDR;
    429c:	f8dc 0070 	ldr.w	r0, [ip, #112]	; 0x70
    42a0:	460b      	mov	r3, r1
    42a2:	3101      	adds	r1, #1
    42a4:	b2c9      	uxtb	r1, r1
    42a6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    42aa:	4423      	add	r3, r4
    42ac:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    42ae:	3a01      	subs	r2, #1
    42b0:	d024      	beq.n	42fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
    42b2:	2987      	cmp	r1, #135	; 0x87
    42b4:	d9f2      	bls.n	429c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x98>
    42b6:	e021      	b.n	42fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    42b8:	690b      	ldr	r3, [r1, #16]
    42ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    42be:	610b      	str	r3, [r1, #16]
			break;
    42c0:	e007      	b.n	42d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    42c2:	690b      	ldr	r3, [r1, #16]
    42c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    42c8:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    42ca:	6923      	ldr	r3, [r4, #16]
    42cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    42d0:	661a      	str	r2, [r3, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    42d2:	6923      	ldr	r3, [r4, #16]
    42d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    42d6:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    42da:	d003      	beq.n	42e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
    42dc:	691a      	ldr	r2, [r3, #16]
    42de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    42e2:	611a      	str	r2, [r3, #16]
	return rxBufferLength;
    42e4:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
    42e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		yield();
    42ec:	f00a fc78 	bl	ebe0 <yield>
		if (tx_state < 3) {
    42f0:	2d02      	cmp	r5, #2
    42f2:	d9a3      	bls.n	423c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
		if (rxBufferLength < sizeof(rxBuffer)) {
    42f4:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    42f8:	2987      	cmp	r1, #135	; 0x87
    42fa:	d9c6      	bls.n	428a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
		uint32_t status = port->MSR; // pg 2884 & 2891
    42fc:	6921      	ldr	r1, [r4, #16]
    42fe:	694a      	ldr	r2, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    4300:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4304:	d1d8      	bne.n	42b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4306:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    430a:	d1da      	bne.n	42c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
    430c:	4b0c      	ldr	r3, [pc, #48]	; (4340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    430e:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
    4310:	eba3 0309 	sub.w	r3, r3, r9
    4314:	2b32      	cmp	r3, #50	; 0x32
    4316:	d8d4      	bhi.n	42c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		if (rxBufferLength >= length && tx_state >= 3) {
    4318:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    431c:	42b3      	cmp	r3, r6
    431e:	d3e5      	bcc.n	42ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4320:	2d02      	cmp	r5, #2
    4322:	d9e3      	bls.n	42ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4324:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4326:	f013 0f07 	tst.w	r3, #7
    432a:	d1df      	bne.n	42ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    432c:	f412 7f00 	tst.w	r2, #512	; 0x200
    4330:	d1cf      	bne.n	42d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
    4332:	f1b8 0f00 	cmp.w	r8, #0
    4336:	d1d9      	bne.n	42ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4338:	e7cb      	b.n	42d2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
	if (!wait_idle()) return 4;
    433a:	2004      	movs	r0, #4
    433c:	e7d4      	b.n	42e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
    433e:	bf00      	nop
    4340:	200052bc 	.word	0x200052bc

00004344 <TwoWire::isr()>:
{
    4344:	b538      	push	{r3, r4, r5, lr}
    4346:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    4348:	6903      	ldr	r3, [r0, #16]
    434a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    434e:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    4352:	d001      	beq.n	4358 <TwoWire::isr()+0x14>
    4354:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    4358:	f015 0f02 	tst.w	r5, #2
    435c:	d012      	beq.n	4384 <TwoWire::isr()+0x40>
		int rx = port->SRDR;
    435e:	6923      	ldr	r3, [r4, #16]
    4360:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    4364:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    4368:	d008      	beq.n	437c <TwoWire::isr()+0x38>
			rxBufferIndex = 0;
    436a:	2300      	movs	r3, #0
    436c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    4370:	1c59      	adds	r1, r3, #1
    4372:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    4376:	4423      	add	r3, r4
    4378:	769a      	strb	r2, [r3, #26]
    437a:	e003      	b.n	4384 <TwoWire::isr()+0x40>
		if (rxBufferLength < BUFFER_LENGTH) {
    437c:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    4380:	2b87      	cmp	r3, #135	; 0x87
    4382:	d9f5      	bls.n	4370 <TwoWire::isr()+0x2c>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    4384:	f015 0f01 	tst.w	r5, #1
    4388:	d01b      	beq.n	43c2 <TwoWire::isr()+0x7e>
		if (!transmitting) {
    438a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    438e:	b94b      	cbnz	r3, 43a4 <TwoWire::isr()+0x60>
			if (user_onRequest != nullptr) {
    4390:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    4394:	b103      	cbz	r3, 4398 <TwoWire::isr()+0x54>
				(*user_onRequest)();
    4396:	4798      	blx	r3
			txBufferIndex = 0;
    4398:	2300      	movs	r3, #0
    439a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    439e:	2301      	movs	r3, #1
    43a0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    43a4:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
    43a8:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    43ac:	429a      	cmp	r2, r3
    43ae:	d91e      	bls.n	43ee <TwoWire::isr()+0xaa>
			port->STDR = txBuffer[txBufferIndex++];
    43b0:	1c5a      	adds	r2, r3, #1
    43b2:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    43b6:	6922      	ldr	r2, [r4, #16]
    43b8:	4423      	add	r3, r4
    43ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    43be:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    43c2:	f415 7f00 	tst.w	r5, #512	; 0x200
    43c6:	d011      	beq.n	43ec <TwoWire::isr()+0xa8>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    43c8:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    43cc:	b118      	cbz	r0, 43d6 <TwoWire::isr()+0x92>
    43ce:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    43d2:	b103      	cbz	r3, 43d6 <TwoWire::isr()+0x92>
			(*user_onReceive)(rxBufferLength);
    43d4:	4798      	blx	r3
		rxBufferIndex = 0;
    43d6:	2300      	movs	r3, #0
    43d8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
    43dc:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
    43e0:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
    43e4:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
    43e8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    43ec:	bd38      	pop	{r3, r4, r5, pc}
			port->STDR = 0;
    43ee:	6923      	ldr	r3, [r4, #16]
    43f0:	2200      	movs	r2, #0
    43f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    43f6:	e7e4      	b.n	43c2 <TwoWire::isr()+0x7e>

000043f8 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    43f8:	b508      	push	{r3, lr}
    43fa:	4802      	ldr	r0, [pc, #8]	; (4404 <lpi2c1_isr()+0xc>)
    43fc:	f7ff ffa2 	bl	4344 <TwoWire::isr()>
    4400:	bd08      	pop	{r3, pc}
    4402:	bf00      	nop
    4404:	20004700 	.word	0x20004700

00004408 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    4408:	b508      	push	{r3, lr}
    440a:	4802      	ldr	r0, [pc, #8]	; (4414 <lpi2c3_isr()+0xc>)
    440c:	f7ff ff9a 	bl	4344 <TwoWire::isr()>
    4410:	bd08      	pop	{r3, pc}
    4412:	bf00      	nop
    4414:	20004840 	.word	0x20004840

00004418 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    4418:	b508      	push	{r3, lr}
    441a:	4802      	ldr	r0, [pc, #8]	; (4424 <lpi2c4_isr()+0xc>)
    441c:	f7ff ff92 	bl	4344 <TwoWire::isr()>
    4420:	bd08      	pop	{r3, pc}
    4422:	bf00      	nop
    4424:	20004980 	.word	0x20004980

00004428 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    4428:	6903      	ldr	r3, [r0, #16]
    442a:	2200      	movs	r2, #0
    442c:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    442e:	4b1d      	ldr	r3, [pc, #116]	; (44a4 <TwoWire::setClock(unsigned long)+0x7c>)
    4430:	4299      	cmp	r1, r3
    4432:	d81a      	bhi.n	446a <TwoWire::setClock(unsigned long)+0x42>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4434:	6903      	ldr	r3, [r0, #16]
    4436:	4a1c      	ldr	r2, [pc, #112]	; (44a8 <TwoWire::setClock(unsigned long)+0x80>)
    4438:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    443a:	6903      	ldr	r3, [r0, #16]
    443c:	2201      	movs	r2, #1
    443e:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    4440:	6903      	ldr	r3, [r0, #16]
    4442:	4a1a      	ldr	r2, [pc, #104]	; (44ac <TwoWire::setClock(unsigned long)+0x84>)
    4444:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4446:	6903      	ldr	r3, [r0, #16]
    4448:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
    444c:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    444e:	6903      	ldr	r3, [r0, #16]
    4450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4452:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4454:	6903      	ldr	r3, [r0, #16]
    4456:	2200      	movs	r2, #0
    4458:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    445a:	6903      	ldr	r3, [r0, #16]
    445c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4460:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    4462:	6903      	ldr	r3, [r0, #16]
    4464:	2201      	movs	r2, #1
    4466:	611a      	str	r2, [r3, #16]
}
    4468:	4770      	bx	lr
	} else if (frequency < 1000000) {
    446a:	4b11      	ldr	r3, [pc, #68]	; (44b0 <TwoWire::setClock(unsigned long)+0x88>)
    446c:	4299      	cmp	r1, r3
    446e:	d80c      	bhi.n	448a <TwoWire::setClock(unsigned long)+0x62>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    4470:	6903      	ldr	r3, [r0, #16]
    4472:	4a10      	ldr	r2, [pc, #64]	; (44b4 <TwoWire::setClock(unsigned long)+0x8c>)
    4474:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4476:	6903      	ldr	r3, [r0, #16]
    4478:	2200      	movs	r2, #0
    447a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    447c:	6903      	ldr	r3, [r0, #16]
    447e:	4a0e      	ldr	r2, [pc, #56]	; (44b8 <TwoWire::setClock(unsigned long)+0x90>)
    4480:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4482:	6903      	ldr	r3, [r0, #16]
    4484:	4a0d      	ldr	r2, [pc, #52]	; (44bc <TwoWire::setClock(unsigned long)+0x94>)
    4486:	62da      	str	r2, [r3, #44]	; 0x2c
    4488:	e7e1      	b.n	444e <TwoWire::setClock(unsigned long)+0x26>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    448a:	6903      	ldr	r3, [r0, #16]
    448c:	4a0c      	ldr	r2, [pc, #48]	; (44c0 <TwoWire::setClock(unsigned long)+0x98>)
    448e:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4490:	6903      	ldr	r3, [r0, #16]
    4492:	2200      	movs	r2, #0
    4494:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    4496:	6903      	ldr	r3, [r0, #16]
    4498:	4a0a      	ldr	r2, [pc, #40]	; (44c4 <TwoWire::setClock(unsigned long)+0x9c>)
    449a:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    449c:	6903      	ldr	r3, [r0, #16]
    449e:	4a07      	ldr	r2, [pc, #28]	; (44bc <TwoWire::setClock(unsigned long)+0x94>)
    44a0:	62da      	str	r2, [r3, #44]	; 0x2c
    44a2:	e7d4      	b.n	444e <TwoWire::setClock(unsigned long)+0x26>
    44a4:	00061a7f 	.word	0x00061a7f
    44a8:	1928373b 	.word	0x1928373b
    44ac:	05050bb8 	.word	0x05050bb8
    44b0:	000f423f 	.word	0x000f423f
    44b4:	0c121a1c 	.word	0x0c121a1c
    44b8:	02020e10 	.word	0x02020e10
    44bc:	00057f00 	.word	0x00057f00
    44c0:	0407090a 	.word	0x0407090a
    44c4:	01010960 	.word	0x01010960

000044c8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    44c8:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    44ca:	4c09      	ldr	r4, [pc, #36]	; (44f0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    44cc:	4622      	mov	r2, r4
    44ce:	4909      	ldr	r1, [pc, #36]	; (44f4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    44d0:	4809      	ldr	r0, [pc, #36]	; (44f8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    44d2:	f7ff fd21 	bl	3f18 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    44d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    44da:	4908      	ldr	r1, [pc, #32]	; (44fc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    44dc:	4808      	ldr	r0, [pc, #32]	; (4500 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    44de:	f7ff fd1b 	bl	3f18 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    44e2:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    44e6:	4907      	ldr	r1, [pc, #28]	; (4504 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    44e8:	4807      	ldr	r0, [pc, #28]	; (4508 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    44ea:	f7ff fd15 	bl	3f18 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    44ee:	bd10      	pop	{r4, pc}
    44f0:	60001fac 	.word	0x60001fac
    44f4:	403f0000 	.word	0x403f0000
    44f8:	20004700 	.word	0x20004700
    44fc:	403f8000 	.word	0x403f8000
    4500:	20004840 	.word	0x20004840
    4504:	403fc000 	.word	0x403fc000
    4508:	20004980 	.word	0x20004980

0000450c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    450c:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    450e:	4b2e      	ldr	r3, [pc, #184]	; (45c8 <_spi_dma_rxISR0()+0xbc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    4510:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4512:	7908      	ldrb	r0, [r1, #4]
    4514:	4a2d      	ldr	r2, [pc, #180]	; (45cc <_spi_dma_rxISR0()+0xc0>)
    4516:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4518:	6c58      	ldr	r0, [r3, #68]	; 0x44
    451a:	7900      	ldrb	r0, [r0, #4]
    451c:	7710      	strb	r0, [r2, #28]
    451e:	7909      	ldrb	r1, [r1, #4]
    4520:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    4522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4524:	2b00      	cmp	r3, #0
    4526:	d03a      	beq.n	459e <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    452c:	d30b      	bcc.n	4546 <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    452e:	4a28      	ldr	r2, [pc, #160]	; (45d0 <_spi_dma_rxISR0()+0xc4>)
    4530:	441a      	add	r2, r3
    4532:	4b25      	ldr	r3, [pc, #148]	; (45c8 <_spi_dma_rxISR0()+0xbc>)
    4534:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4538:	7911      	ldrb	r1, [r2, #4]
    453a:	4a24      	ldr	r2, [pc, #144]	; (45cc <_spi_dma_rxISR0()+0xc0>)
    453c:	76d1      	strb	r1, [r2, #27]
    453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4540:	791b      	ldrb	r3, [r3, #4]
    4542:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4544:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4546:	4a20      	ldr	r2, [pc, #128]	; (45c8 <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4548:	6c52      	ldr	r2, [r2, #68]	; 0x44
    454a:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    454c:	8bd1      	ldrh	r1, [r2, #30]
    454e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4552:	d114      	bne.n	457e <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    4554:	b29b      	uxth	r3, r3
    4556:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4558:	8bd3      	ldrh	r3, [r2, #30]
    455a:	b29b      	uxth	r3, r3
    455c:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    455e:	4b1a      	ldr	r3, [pc, #104]	; (45c8 <_spi_dma_rxISR0()+0xbc>)
    4560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4564:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4566:	8bd9      	ldrh	r1, [r3, #30]
    4568:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    456c:	d10f      	bne.n	458e <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    456e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4572:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4574:	8bda      	ldrh	r2, [r3, #30]
    4576:	b292      	uxth	r2, r2
    4578:	82da      	strh	r2, [r3, #22]
    457a:	2200      	movs	r2, #0
    457c:	e7d9      	b.n	4532 <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    457e:	8bd1      	ldrh	r1, [r2, #30]
    4580:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4584:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4588:	430b      	orrs	r3, r1
    458a:	83d3      	strh	r3, [r2, #30]
    458c:	e7e4      	b.n	4558 <_spi_dma_rxISR0()+0x4c>
    458e:	8bd9      	ldrh	r1, [r3, #30]
    4590:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4594:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4598:	430a      	orrs	r2, r1
    459a:	83da      	strh	r2, [r3, #30]
    459c:	e7ea      	b.n	4574 <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    459e:	4a0a      	ldr	r2, [pc, #40]	; (45c8 <_spi_dma_rxISR0()+0xbc>)
    45a0:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    45a2:	210f      	movs	r1, #15
    45a4:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    45a6:	2100      	movs	r1, #0
    45a8:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    45aa:	f240 3001 	movw	r0, #769	; 0x301
    45ae:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    45b0:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    45b4:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    45b6:	2303      	movs	r3, #3
    45b8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    45bc:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    45be:	6803      	ldr	r3, [r0, #0]
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	460a      	mov	r2, r1
    45c4:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    45c6:	e7bd      	b.n	4544 <_spi_dma_rxISR0()+0x38>
    45c8:	200045b0 	.word	0x200045b0
    45cc:	400e8000 	.word	0x400e8000
    45d0:	ffff8001 	.word	0xffff8001

000045d4 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    45d4:	b508      	push	{r3, lr}
	_dmaRX->clearInterrupt();
    45d6:	4b2e      	ldr	r3, [pc, #184]	; (4690 <_spi_dma_rxISR1()+0xbc>)
		DMA_CINT = channel;
    45d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    45da:	7908      	ldrb	r0, [r1, #4]
    45dc:	4a2d      	ldr	r2, [pc, #180]	; (4694 <_spi_dma_rxISR1()+0xc0>)
    45de:	77d0      	strb	r0, [r2, #31]
		DMA_CDNE = channel;
    45e0:	6c58      	ldr	r0, [r3, #68]	; 0x44
    45e2:	7900      	ldrb	r0, [r0, #4]
    45e4:	7710      	strb	r0, [r2, #28]
    45e6:	7909      	ldrb	r1, [r1, #4]
    45e8:	7711      	strb	r1, [r2, #28]
	if (_dma_count_remaining) {
    45ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45ec:	2b00      	cmp	r3, #0
    45ee:	d03a      	beq.n	4666 <_spi_dma_rxISR1()+0x92>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    45f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    45f4:	d30b      	bcc.n	460e <_spi_dma_rxISR1()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    45f6:	4a28      	ldr	r2, [pc, #160]	; (4698 <_spi_dma_rxISR1()+0xc4>)
    45f8:	441a      	add	r2, r3
    45fa:	4b25      	ldr	r3, [pc, #148]	; (4690 <_spi_dma_rxISR1()+0xbc>)
    45fc:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    45fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4600:	7911      	ldrb	r1, [r2, #4]
    4602:	4a24      	ldr	r2, [pc, #144]	; (4694 <_spi_dma_rxISR1()+0xc0>)
    4604:	76d1      	strb	r1, [r2, #27]
    4606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4608:	791b      	ldrb	r3, [r3, #4]
    460a:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    460c:	bd08      	pop	{r3, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    460e:	4a20      	ldr	r2, [pc, #128]	; (4690 <_spi_dma_rxISR1()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4610:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4612:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4614:	8bd1      	ldrh	r1, [r2, #30]
    4616:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    461a:	d114      	bne.n	4646 <_spi_dma_rxISR1()+0x72>
		tcd->BITER = len & 0x7fff;
    461c:	b29b      	uxth	r3, r3
    461e:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4620:	8bd3      	ldrh	r3, [r2, #30]
    4622:	b29b      	uxth	r3, r3
    4624:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4626:	4b1a      	ldr	r3, [pc, #104]	; (4690 <_spi_dma_rxISR1()+0xbc>)
    4628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    462c:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    462e:	8bd9      	ldrh	r1, [r3, #30]
    4630:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4634:	d10f      	bne.n	4656 <_spi_dma_rxISR1()+0x82>
		tcd->BITER = len & 0x7fff;
    4636:	f3c2 020e 	ubfx	r2, r2, #0, #15
    463a:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    463c:	8bda      	ldrh	r2, [r3, #30]
    463e:	b292      	uxth	r2, r2
    4640:	82da      	strh	r2, [r3, #22]
    4642:	2200      	movs	r2, #0
    4644:	e7d9      	b.n	45fa <_spi_dma_rxISR1()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4646:	8bd1      	ldrh	r1, [r2, #30]
    4648:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4650:	430b      	orrs	r3, r1
    4652:	83d3      	strh	r3, [r2, #30]
    4654:	e7e4      	b.n	4620 <_spi_dma_rxISR1()+0x4c>
    4656:	8bd9      	ldrh	r1, [r3, #30]
    4658:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    465c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4660:	430a      	orrs	r2, r1
    4662:	83da      	strh	r2, [r3, #30]
    4664:	e7ea      	b.n	463c <_spi_dma_rxISR1()+0x68>
    4666:	4a0a      	ldr	r2, [pc, #40]	; (4690 <_spi_dma_rxISR1()+0xbc>)
    4668:	6813      	ldr	r3, [r2, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    466a:	210f      	movs	r1, #15
    466c:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    466e:	2100      	movs	r1, #0
    4670:	61d9      	str	r1, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4672:	f240 3001 	movw	r0, #769	; 0x301
    4676:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4678:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    467c:	6158      	str	r0, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    467e:	2303      	movs	r3, #3
    4680:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4684:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4686:	6803      	ldr	r3, [r0, #0]
    4688:	681b      	ldr	r3, [r3, #0]
    468a:	460a      	mov	r2, r1
    468c:	4798      	blx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    468e:	e7bd      	b.n	460c <_spi_dma_rxISR1()+0x38>
    4690:	20004600 	.word	0x20004600
    4694:	400e8000 	.word	0x400e8000
    4698:	ffff8001 	.word	0xffff8001

0000469c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    469c:	6001      	str	r1, [r0, #0]
    469e:	6042      	str	r2, [r0, #4]
    46a0:	2300      	movs	r3, #0
    46a2:	6083      	str	r3, [r0, #8]
    46a4:	60c3      	str	r3, [r0, #12]
    46a6:	7403      	strb	r3, [r0, #16]
    46a8:	7443      	strb	r3, [r0, #17]
    46aa:	7483      	strb	r3, [r0, #18]
    46ac:	74c3      	strb	r3, [r0, #19]
    46ae:	6143      	str	r3, [r0, #20]
    46b0:	6183      	str	r3, [r0, #24]
    46b2:	61c3      	str	r3, [r0, #28]
    46b4:	6203      	str	r3, [r0, #32]
    46b6:	6243      	str	r3, [r0, #36]	; 0x24
    46b8:	6283      	str	r3, [r0, #40]	; 0x28
    46ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    46bc:	6303      	str	r3, [r0, #48]	; 0x30
    46be:	6343      	str	r3, [r0, #52]	; 0x34
    46c0:	6383      	str	r3, [r0, #56]	; 0x38
    46c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    46c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    46ca:	6403      	str	r3, [r0, #64]	; 0x40
    46cc:	6443      	str	r3, [r0, #68]	; 0x44
    46ce:	6483      	str	r3, [r0, #72]	; 0x48
    46d0:	64c3      	str	r3, [r0, #76]	; 0x4c
	}
    46d2:	4770      	bx	lr

000046d4 <SPIClass::begin()>:
{
    46d4:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    46d6:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    46d8:	680a      	ldr	r2, [r1, #0]
    46da:	6813      	ldr	r3, [r2, #0]
    46dc:	6849      	ldr	r1, [r1, #4]
    46de:	ea23 0301 	bic.w	r3, r3, r1
    46e2:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    46e4:	498f      	ldr	r1, [pc, #572]	; (4924 <SPIClass::begin()+0x250>)
    46e6:	698b      	ldr	r3, [r1, #24]
    46e8:	4a8f      	ldr	r2, [pc, #572]	; (4928 <SPIClass::begin()+0x254>)
    46ea:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    46ec:	4b8f      	ldr	r3, [pc, #572]	; (492c <SPIClass::begin()+0x258>)
    46ee:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    46f0:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    46f2:	4b8f      	ldr	r3, [pc, #572]	; (4930 <SPIClass::begin()+0x25c>)
    46f4:	6842      	ldr	r2, [r0, #4]
    46f6:	7c01      	ldrb	r1, [r0, #16]
    46f8:	440a      	add	r2, r1
    46fa:	7c12      	ldrb	r2, [r2, #16]
    46fc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4700:	6891      	ldr	r1, [r2, #8]
    4702:	22b8      	movs	r2, #184	; 0xb8
    4704:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4706:	6841      	ldr	r1, [r0, #4]
    4708:	7c44      	ldrb	r4, [r0, #17]
    470a:	4421      	add	r1, r4
    470c:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4710:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4714:	6889      	ldr	r1, [r1, #8]
    4716:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    4718:	6841      	ldr	r1, [r0, #4]
    471a:	7c84      	ldrb	r4, [r0, #18]
    471c:	4421      	add	r1, r4
    471e:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    4722:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4726:	6889      	ldr	r1, [r1, #8]
    4728:	600a      	str	r2, [r1, #0]
    472a:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    472c:	6821      	ldr	r1, [r4, #0]
    472e:	680a      	ldr	r2, [r1, #0]
    4730:	6864      	ldr	r4, [r4, #4]
    4732:	4322      	orrs	r2, r4
    4734:	600a      	str	r2, [r1, #0]
    4736:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4738:	7c04      	ldrb	r4, [r0, #16]
    473a:	1911      	adds	r1, r2, r4
    473c:	7c09      	ldrb	r1, [r1, #16]
    473e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4742:	6849      	ldr	r1, [r1, #4]
    4744:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4748:	6952      	ldr	r2, [r2, #20]
    474a:	600a      	str	r2, [r1, #0]
    474c:	6844      	ldr	r4, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    474e:	7c42      	ldrb	r2, [r0, #17]
    4750:	18a1      	adds	r1, r4, r2
    4752:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4756:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    475a:	6849      	ldr	r1, [r1, #4]
    475c:	320a      	adds	r2, #10
    475e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    4762:	600a      	str	r2, [r1, #0]
    4764:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4766:	7c81      	ldrb	r1, [r0, #18]
    4768:	1854      	adds	r4, r2, r1
    476a:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    476e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4772:	685b      	ldr	r3, [r3, #4]
    4774:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4778:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    477a:	601a      	str	r2, [r3, #0]
    477c:	6843      	ldr	r3, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    477e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4780:	7c81      	ldrb	r1, [r0, #18]
    4782:	440b      	add	r3, r1
    4784:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4788:	6013      	str	r3, [r2, #0]
    478a:	6843      	ldr	r3, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    478c:	6a1a      	ldr	r2, [r3, #32]
    478e:	7c01      	ldrb	r1, [r0, #16]
    4790:	440b      	add	r3, r1
    4792:	7f1b      	ldrb	r3, [r3, #28]
    4794:	6013      	str	r3, [r2, #0]
    4796:	6843      	ldr	r3, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    479a:	7c41      	ldrb	r1, [r0, #17]
    479c:	440b      	add	r3, r1
    479e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    47a2:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    47a4:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    47a6:	2202      	movs	r2, #2
    47a8:	611a      	str	r2, [r3, #16]
    47aa:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    47ac:	220f      	movs	r2, #15
    47ae:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    47b0:	7cc3      	ldrb	r3, [r0, #19]
    47b2:	2b00      	cmp	r3, #0
    47b4:	d042      	beq.n	483c <SPIClass::begin()+0x168>
			__disable_irq();
    47b6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    47b8:	7cc3      	ldrb	r3, [r0, #19]
    47ba:	f013 0f01 	tst.w	r3, #1
    47be:	d008      	beq.n	47d2 <SPIClass::begin()+0xfe>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    47c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    47c4:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    47c8:	6941      	ldr	r1, [r0, #20]
    47ca:	400b      	ands	r3, r1
    47cc:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    47ce:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    47d2:	7cc3      	ldrb	r3, [r0, #19]
    47d4:	f013 0f02 	tst.w	r3, #2
    47d8:	d008      	beq.n	47ec <SPIClass::begin()+0x118>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    47da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    47de:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    47e2:	6981      	ldr	r1, [r0, #24]
    47e4:	400b      	ands	r3, r1
    47e6:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    47e8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    47ec:	7cc3      	ldrb	r3, [r0, #19]
    47ee:	f013 0f04 	tst.w	r3, #4
    47f2:	d008      	beq.n	4806 <SPIClass::begin()+0x132>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    47f4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    47f8:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    47fc:	69c1      	ldr	r1, [r0, #28]
    47fe:	400b      	ands	r3, r1
    4800:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    4802:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    4806:	7cc3      	ldrb	r3, [r0, #19]
    4808:	f013 0f08 	tst.w	r3, #8
    480c:	d008      	beq.n	4820 <SPIClass::begin()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    480e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4812:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    4816:	6a01      	ldr	r1, [r0, #32]
    4818:	400b      	ands	r3, r1
    481a:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    481c:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    4820:	7cc3      	ldrb	r3, [r0, #19]
    4822:	f013 0f10 	tst.w	r3, #16
    4826:	d008      	beq.n	483a <SPIClass::begin()+0x166>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    4828:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    482c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    4830:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4832:	400b      	ands	r3, r1
    4834:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4836:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    483a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    483c:	6882      	ldr	r2, [r0, #8]
    483e:	4b3d      	ldr	r3, [pc, #244]	; (4934 <SPIClass::begin()+0x260>)
    4840:	429a      	cmp	r2, r3
    4842:	d029      	beq.n	4898 <SPIClass::begin()+0x1c4>
		    _clock = settings.clock();
    4844:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    4846:	4b37      	ldr	r3, [pc, #220]	; (4924 <SPIClass::begin()+0x250>)
    4848:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    484a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    484e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    4852:	3301      	adds	r3, #1
    4854:	4a38      	ldr	r2, [pc, #224]	; (4938 <SPIClass::begin()+0x264>)
    4856:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    485a:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    485e:	4b37      	ldr	r3, [pc, #220]	; (493c <SPIClass::begin()+0x268>)
    4860:	429a      	cmp	r2, r3
    4862:	d95d      	bls.n	4920 <SPIClass::begin()+0x24c>
			d = _clock ? clkhz/_clock : clkhz;
    4864:	4b36      	ldr	r3, [pc, #216]	; (4940 <SPIClass::begin()+0x26c>)
    4866:	fba3 1302 	umull	r1, r3, r3, r2
    486a:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    486c:	fbb2 f2f3 	udiv	r2, r2, r3
    4870:	4930      	ldr	r1, [pc, #192]	; (4934 <SPIClass::begin()+0x260>)
    4872:	428a      	cmp	r2, r1
    4874:	bf88      	it	hi
    4876:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    4878:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    487c:	d34c      	bcc.n	4918 <SPIClass::begin()+0x244>
    487e:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    4882:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4884:	0859      	lsrs	r1, r3, #1
    4886:	020a      	lsls	r2, r1, #8
    4888:	b292      	uxth	r2, r2
    488a:	0409      	lsls	r1, r1, #16
    488c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4890:	430a      	orrs	r2, r1
    4892:	b2db      	uxtb	r3, r3
    4894:	4313      	orrs	r3, r2
    4896:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4898:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    489a:	2200      	movs	r2, #0
    489c:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    489e:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    48a0:	2203      	movs	r2, #3
    48a2:	625a      	str	r2, [r3, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    48a4:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    48a6:	68c2      	ldr	r2, [r0, #12]
    48a8:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    48aa:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    48ac:	2207      	movs	r2, #7
    48ae:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    48b0:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    48b2:	2201      	movs	r2, #1
    48b4:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    48b6:	7cc3      	ldrb	r3, [r0, #19]
    48b8:	b35b      	cbz	r3, 4912 <SPIClass::begin()+0x23e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    48ba:	f013 0f01 	tst.w	r3, #1
    48be:	d004      	beq.n	48ca <SPIClass::begin()+0x1f6>
    48c0:	6a82      	ldr	r2, [r0, #40]	; 0x28
    48c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    48ca:	7cc3      	ldrb	r3, [r0, #19]
    48cc:	f013 0f02 	tst.w	r3, #2
    48d0:	d004      	beq.n	48dc <SPIClass::begin()+0x208>
    48d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    48d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    48dc:	7cc3      	ldrb	r3, [r0, #19]
    48de:	f013 0f04 	tst.w	r3, #4
    48e2:	d004      	beq.n	48ee <SPIClass::begin()+0x21a>
    48e4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    48e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    48ee:	7cc3      	ldrb	r3, [r0, #19]
    48f0:	f013 0f08 	tst.w	r3, #8
    48f4:	d004      	beq.n	4900 <SPIClass::begin()+0x22c>
    48f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    48f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    4900:	7cc3      	ldrb	r3, [r0, #19]
    4902:	f013 0f10 	tst.w	r3, #16
    4906:	d004      	beq.n	4912 <SPIClass::begin()+0x23e>
    4908:	6b82      	ldr	r2, [r0, #56]	; 0x38
    490a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    490e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    4912:	f85d 4b04 	ldr.w	r4, [sp], #4
    4916:	4770      	bx	lr
			if (d > 2) {
    4918:	2b02      	cmp	r3, #2
    491a:	d8b2      	bhi.n	4882 <SPIClass::begin()+0x1ae>
				div =0;
    491c:	2300      	movs	r3, #0
    491e:	e7b1      	b.n	4884 <SPIClass::begin()+0x1b0>
    4920:	2300      	movs	r3, #0
    4922:	e7af      	b.n	4884 <SPIClass::begin()+0x1b0>
    4924:	400fc000 	.word	0x400fc000
    4928:	e3ffffcf 	.word	0xe3ffffcf
    492c:	08000010 	.word	0x08000010
    4930:	20002828 	.word	0x20002828
    4934:	003d0900 	.word	0x003d0900
    4938:	20002510 	.word	0x20002510
    493c:	003d08ff 	.word	0x003d08ff
    4940:	431bde83 	.word	0x431bde83

00004944 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    4944:	2b00      	cmp	r3, #0
    4946:	d03b      	beq.n	49c0 <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    4948:	b470      	push	{r4, r5, r6}
    494a:	460e      	mov	r6, r1
    494c:	4611      	mov	r1, r2
    494e:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4950:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4952:	f240 2201 	movw	r2, #513	; 0x201
    4956:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    4958:	462c      	mov	r4, r5
    495a:	e016      	b.n	498a <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    495c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    4960:	e019      	b.n	4996 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    4962:	3c01      	subs	r4, #1
    4964:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4966:	695b      	ldr	r3, [r3, #20]
    4968:	f013 0f01 	tst.w	r3, #1
    496c:	d10c      	bne.n	4988 <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    496e:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4972:	f012 0f02 	tst.w	r2, #2
    4976:	d1f5      	bne.n	4964 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    497a:	2900      	cmp	r1, #0
    497c:	d0f1      	beq.n	4962 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    497e:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4980:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    4984:	4611      	mov	r1, r2
    4986:	e7ec      	b.n	4962 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    4988:	b155      	cbz	r5, 49a0 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    498a:	2e00      	cmp	r6, #0
    498c:	d0e6      	beq.n	495c <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    498e:	4633      	mov	r3, r6
    4990:	f813 2b01 	ldrb.w	r2, [r3], #1
    4994:	461e      	mov	r6, r3
    4996:	6803      	ldr	r3, [r0, #0]
    4998:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    499a:	3d01      	subs	r5, #1
    499c:	e7e7      	b.n	496e <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    499e:	3c01      	subs	r4, #1
	while (count_read) {
    49a0:	b164      	cbz	r4, 49bc <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    49a2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    49a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    49a6:	f012 0f02 	tst.w	r2, #2
    49aa:	d1f9      	bne.n	49a0 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    49ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    49ae:	2900      	cmp	r1, #0
    49b0:	d0f5      	beq.n	499e <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    49b2:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    49b4:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    49b8:	4611      	mov	r1, r2
    49ba:	e7f0      	b.n	499e <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    49bc:	bc70      	pop	{r4, r5, r6}
    49be:	4770      	bx	lr
    49c0:	4770      	bx	lr

000049c2 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    49c2:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    49c4:	681a      	ldr	r2, [r3, #0]
    49c6:	6812      	ldr	r2, [r2, #0]
    49c8:	685b      	ldr	r3, [r3, #4]
    49ca:	421a      	tst	r2, r3
    49cc:	d100      	bne.n	49d0 <SPIClass::end()+0xe>
    49ce:	4770      	bx	lr
void SPIClass::end() {
    49d0:	b510      	push	{r4, lr}
    49d2:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    49d4:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    49d6:	2200      	movs	r2, #0
    49d8:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    49da:	6843      	ldr	r3, [r0, #4]
    49dc:	7c02      	ldrb	r2, [r0, #16]
    49de:	4413      	add	r3, r2
    49e0:	2105      	movs	r1, #5
    49e2:	7c18      	ldrb	r0, [r3, #16]
    49e4:	f008 fa56 	bl	ce94 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    49e8:	6863      	ldr	r3, [r4, #4]
    49ea:	7c62      	ldrb	r2, [r4, #17]
    49ec:	4413      	add	r3, r2
    49ee:	2105      	movs	r1, #5
    49f0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    49f4:	f008 fa4e 	bl	ce94 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    49f8:	6863      	ldr	r3, [r4, #4]
    49fa:	7ca2      	ldrb	r2, [r4, #18]
    49fc:	4413      	add	r3, r2
    49fe:	2105      	movs	r1, #5
    4a00:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    4a04:	f008 fa46 	bl	ce94 <pinMode>
}
    4a08:	bd10      	pop	{r4, pc}
	...

00004a0c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    4a0c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    4a0e:	4a08      	ldr	r2, [pc, #32]	; (4a30 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    4a10:	4908      	ldr	r1, [pc, #32]	; (4a34 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    4a12:	4809      	ldr	r0, [pc, #36]	; (4a38 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    4a14:	f7ff fe42 	bl	469c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    4a18:	4a08      	ldr	r2, [pc, #32]	; (4a3c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    4a1a:	4909      	ldr	r1, [pc, #36]	; (4a40 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    4a1c:	4809      	ldr	r0, [pc, #36]	; (4a44 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    4a1e:	f7ff fe3d 	bl	469c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    4a22:	4a09      	ldr	r2, [pc, #36]	; (4a48 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    4a24:	4909      	ldr	r1, [pc, #36]	; (4a4c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    4a26:	480a      	ldr	r0, [pc, #40]	; (4a50 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    4a28:	f7ff fe38 	bl	469c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    4a2c:	bd08      	pop	{r3, pc}
    4a2e:	bf00      	nop
    4a30:	2000222c 	.word	0x2000222c
    4a34:	403a0000 	.word	0x403a0000
    4a38:	200045b0 	.word	0x200045b0
    4a3c:	200021bc 	.word	0x200021bc
    4a40:	4039c000 	.word	0x4039c000
    4a44:	20004600 	.word	0x20004600
    4a48:	2000214c 	.word	0x2000214c
    4a4c:	40394000 	.word	0x40394000
    4a50:	20004650 	.word	0x20004650

00004a54 <PWMServo::PWMServo()>:
PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
    4a54:	22ff      	movs	r2, #255	; 0xff
    4a56:	7002      	strb	r2, [r0, #0]
    4a58:	7042      	strb	r2, [r0, #1]
    4a5a:	4770      	bx	lr

00004a5c <PWMServo::attach(int, int, int)>:
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4a5c:	2936      	cmp	r1, #54	; 0x36
    4a5e:	d840      	bhi.n	4ae2 <PWMServo::attach(int, int, int)+0x86>
{
    4a60:	b570      	push	{r4, r5, r6, lr}
    4a62:	4604      	mov	r4, r0
    4a64:	4616      	mov	r6, r2
    4a66:	461d      	mov	r5, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
    4a68:	290f      	cmp	r1, #15
    4a6a:	dd0b      	ble.n	4a84 <PWMServo::attach(int, int, int)+0x28>
    4a6c:	2912      	cmp	r1, #18
    4a6e:	d009      	beq.n	4a84 <PWMServo::attach(int, int, int)+0x28>
    4a70:	f1a1 0213 	sub.w	r2, r1, #19
    4a74:	2a0a      	cmp	r2, #10
    4a76:	d829      	bhi.n	4acc <PWMServo::attach(int, int, int)+0x70>
    4a78:	f240 6379 	movw	r3, #1657	; 0x679
    4a7c:	40d3      	lsrs	r3, r2
    4a7e:	f013 0f01 	tst.w	r3, #1
    4a82:	d021      	beq.n	4ac8 <PWMServo::attach(int, int, int)+0x6c>
	pin = pinArg;
    4a84:	b2c8      	uxtb	r0, r1
    4a86:	7020      	strb	r0, [r4, #0]
	analogWriteFrequency(pin, 50);
    4a88:	ed9f 0a18 	vldr	s0, [pc, #96]	; 4aec <PWMServo::attach(int, int, int)+0x90>
    4a8c:	f008 fe7c 	bl	d788 <analogWriteFrequency>
	min16 = min >> 4;
    4a90:	1132      	asrs	r2, r6, #4
    4a92:	70a2      	strb	r2, [r4, #2]
	max16 = max >> 4;
    4a94:	112b      	asrs	r3, r5, #4
    4a96:	70e3      	strb	r3, [r4, #3]
	angle = NO_ANGLE;
    4a98:	23ff      	movs	r3, #255	; 0xff
    4a9a:	7063      	strb	r3, [r4, #1]
	digitalWrite(pin, LOW);
    4a9c:	2100      	movs	r1, #0
    4a9e:	7820      	ldrb	r0, [r4, #0]
    4aa0:	f008 f9c0 	bl	ce24 <digitalWrite>
	pinMode(pin, OUTPUT);
    4aa4:	2101      	movs	r1, #1
    4aa6:	7820      	ldrb	r0, [r4, #0]
    4aa8:	f008 f9f4 	bl	ce94 <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
    4aac:	7823      	ldrb	r3, [r4, #0]
    4aae:	0959      	lsrs	r1, r3, #5
    4ab0:	4a0f      	ldr	r2, [pc, #60]	; (4af0 <PWMServo::attach(int, int, int)+0x94>)
    4ab2:	f003 031f 	and.w	r3, r3, #31
    4ab6:	2001      	movs	r0, #1
    4ab8:	fa00 f303 	lsl.w	r3, r0, r3
    4abc:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    4ac0:	4323      	orrs	r3, r4
    4ac2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4ac6:	bd70      	pop	{r4, r5, r6, pc}
	if (!digitalPinHasPWM(pinArg)) return 0;
    4ac8:	2000      	movs	r0, #0
    4aca:	e7fc      	b.n	4ac6 <PWMServo::attach(int, int, int)+0x6a>
    4acc:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
    4ad0:	2a15      	cmp	r2, #21
    4ad2:	d808      	bhi.n	4ae6 <PWMServo::attach(int, int, int)+0x8a>
    4ad4:	4b07      	ldr	r3, [pc, #28]	; (4af4 <PWMServo::attach(int, int, int)+0x98>)
    4ad6:	40d3      	lsrs	r3, r2
    4ad8:	f013 0f01 	tst.w	r3, #1
    4adc:	d1d2      	bne.n	4a84 <PWMServo::attach(int, int, int)+0x28>
    4ade:	2000      	movs	r0, #0
    4ae0:	e7f1      	b.n	4ac6 <PWMServo::attach(int, int, int)+0x6a>
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4ae2:	2000      	movs	r0, #0
}
    4ae4:	4770      	bx	lr
	if (!digitalPinHasPWM(pinArg)) return 0;
    4ae6:	2000      	movs	r0, #0
    4ae8:	e7ed      	b.n	4ac6 <PWMServo::attach(int, int, int)+0x6a>
    4aea:	bf00      	nop
    4aec:	42480000 	.word	0x42480000
    4af0:	20004ba4 	.word	0x20004ba4
    4af4:	00247e19 	.word	0x00247e19

00004af8 <PWMServo::write(int)>:
	if (pin >= NUM_DIGITAL_PINS) return;
    4af8:	7803      	ldrb	r3, [r0, #0]
    4afa:	2b36      	cmp	r3, #54	; 0x36
    4afc:	d900      	bls.n	4b00 <PWMServo::write(int)+0x8>
    4afe:	4770      	bx	lr
{
    4b00:	b570      	push	{r4, r5, r6, lr}
    4b02:	4604      	mov	r4, r0
	if (angleArg < 0) angleArg = 0;
    4b04:	29b4      	cmp	r1, #180	; 0xb4
    4b06:	bfa8      	it	ge
    4b08:	21b4      	movge	r1, #180	; 0xb4
    4b0a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	angle = angleArg;
    4b0e:	7041      	strb	r1, [r0, #1]
	uint32_t us = (((max16 - min16) * 46603 * angle) >> 11) + (min16 << 12); // us*256
    4b10:	7883      	ldrb	r3, [r0, #2]
    4b12:	78c2      	ldrb	r2, [r0, #3]
    4b14:	1ad2      	subs	r2, r2, r3
    4b16:	fb01 f202 	mul.w	r2, r1, r2
    4b1a:	f24b 610b 	movw	r1, #46603	; 0xb60b
    4b1e:	fb01 f202 	mul.w	r2, r1, r2
    4b22:	031d      	lsls	r5, r3, #12
    4b24:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	uint32_t duty = (us * 3355) >> 22;
    4b28:	f640 531b 	movw	r3, #3355	; 0xd1b
    4b2c:	fb03 f505 	mul.w	r5, r3, r5
    4b30:	0dad      	lsrs	r5, r5, #22
	noInterrupts();
    4b32:	b672      	cpsid	i
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    4b34:	200c      	movs	r0, #12
    4b36:	f008 feff 	bl	d938 <analogWriteRes>
    4b3a:	4606      	mov	r6, r0
	analogWrite(pin, duty);
    4b3c:	4629      	mov	r1, r5
    4b3e:	7820      	ldrb	r0, [r4, #0]
    4b40:	f008 fdca 	bl	d6d8 <analogWrite>
    4b44:	4630      	mov	r0, r6
    4b46:	f008 fef7 	bl	d938 <analogWriteRes>
	interrupts();
    4b4a:	b662      	cpsie	i
}
    4b4c:	bd70      	pop	{r4, r5, r6, pc}

00004b4e <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4b4e:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4b52:	b1e3      	cbz	r3, 4b8e <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    4b54:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4b58:	b163      	cbz	r3, 4b74 <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    4b5a:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4b5c:	3801      	subs	r0, #1
    4b5e:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4b60:	7999      	ldrb	r1, [r3, #6]
    4b62:	f44f 7300 	mov.w	r3, #512	; 0x200
    4b66:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    4b68:	b29b      	uxth	r3, r3
    4b6a:	fba3 0100 	umull	r0, r1, r3, r0
    4b6e:	fb03 1102 	mla	r1, r3, r2, r1
    4b72:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    4b74:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    4b78:	b12b      	cbz	r3, 4b86 <SDClass::totalSize()+0x38>
    4b7a:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    4b7e:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    4b80:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    4b84:	e7f1      	b.n	4b6a <SDClass::totalSize()+0x1c>
    4b86:	2000      	movs	r0, #0
    4b88:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4b8a:	4603      	mov	r3, r0
    4b8c:	e7ed      	b.n	4b6a <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4b8e:	2000      	movs	r0, #0
    4b90:	4601      	mov	r1, r0
	}
    4b92:	4770      	bx	lr

00004b94 <SDClass::~SDClass()>:
class SDClass : public FS
    4b94:	4770      	bx	lr
	...

00004b98 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    4b98:	b530      	push	{r4, r5, lr}
    4b9a:	b083      	sub	sp, #12
    4b9c:	4605      	mov	r5, r0
    4b9e:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    4ba0:	f008 fed8 	bl	d954 <rtc_get>
	if (now < 315532800) { // before 1980
    4ba4:	4b1c      	ldr	r3, [pc, #112]	; (4c18 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    4ba6:	4298      	cmp	r0, r3
    4ba8:	d804      	bhi.n	4bb4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    4baa:	2300      	movs	r3, #0
    4bac:	802b      	strh	r3, [r5, #0]
		*time = 0;
    4bae:	8023      	strh	r3, [r4, #0]
}
    4bb0:	b003      	add	sp, #12
    4bb2:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    4bb4:	4669      	mov	r1, sp
    4bb6:	f007 fd6b 	bl	c690 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    4bba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4bbe:	3301      	adds	r3, #1
    4bc0:	b2db      	uxtb	r3, r3
    4bc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    4bc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    4bca:	3a50      	subs	r2, #80	; 0x50
    4bcc:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    4bce:	291f      	cmp	r1, #31
    4bd0:	bf98      	it	ls
    4bd2:	2b0c      	cmpls	r3, #12
    4bd4:	d801      	bhi.n	4bda <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    4bd6:	2a7f      	cmp	r2, #127	; 0x7f
    4bd8:	d910      	bls.n	4bfc <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    4bda:	2100      	movs	r1, #0
    4bdc:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4bde:	f89d 2002 	ldrb.w	r2, [sp, #2]
    4be2:	f89d 3001 	ldrb.w	r3, [sp, #1]
    4be6:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    4bea:	2a17      	cmp	r2, #23
    4bec:	bf98      	it	ls
    4bee:	2b3b      	cmpls	r3, #59	; 0x3b
    4bf0:	d801      	bhi.n	4bf6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    4bf2:	293b      	cmp	r1, #59	; 0x3b
    4bf4:	d908      	bls.n	4c08 <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    4bf6:	2300      	movs	r3, #0
    4bf8:	8023      	strh	r3, [r4, #0]
}
    4bfa:	e7d9      	b.n	4bb0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    4bfc:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    4c00:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    4c04:	b289      	uxth	r1, r1
    4c06:	e7e9      	b.n	4bdc <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    4c08:	015b      	lsls	r3, r3, #5
    4c0a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    4c0e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4c12:	b29b      	uxth	r3, r3
    4c14:	e7f0      	b.n	4bf8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    4c16:	bf00      	nop
    4c18:	12cea5ff 	.word	0x12cea5ff

00004c1c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    4c1c:	b500      	push	{lr}
    4c1e:	b08f      	sub	sp, #60	; 0x3c
    4c20:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    4c22:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4c26:	b161      	cbz	r1, 4c42 <SDClass::exists(char const*)+0x26>
    4c28:	2300      	movs	r3, #0
    4c2a:	f88d 3000 	strb.w	r3, [sp]
    4c2e:	f88d 3001 	strb.w	r3, [sp, #1]
    4c32:	f88d 3002 	strb.w	r3, [sp, #2]
    4c36:	4668      	mov	r0, sp
    4c38:	f002 ff37 	bl	7aaa <FatFile::open(FatVolume*, char const*, int)>
	}
    4c3c:	b00f      	add	sp, #60	; 0x3c
    4c3e:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    4c42:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4c46:	b151      	cbz	r1, 4c5e <SDClass::exists(char const*)+0x42>
    4c48:	2300      	movs	r3, #0
    4c4a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4c4e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4c52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    4c56:	4668      	mov	r0, sp
    4c58:	f000 ff83 	bl	5b62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4c5c:	e7ee      	b.n	4c3c <SDClass::exists(char const*)+0x20>
    4c5e:	2000      	movs	r0, #0
    4c60:	e7ec      	b.n	4c3c <SDClass::exists(char const*)+0x20>

00004c62 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    4c62:	b500      	push	{lr}
    4c64:	b08f      	sub	sp, #60	; 0x3c
    4c66:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    4c68:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4c6c:	b189      	cbz	r1, 4c92 <SDClass::rmdir(char const*)+0x30>
    4c6e:	2300      	movs	r3, #0
    4c70:	f88d 3000 	strb.w	r3, [sp]
    4c74:	f88d 3001 	strb.w	r3, [sp, #1]
    4c78:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4c7c:	4668      	mov	r0, sp
    4c7e:	f002 ff14 	bl	7aaa <FatFile::open(FatVolume*, char const*, int)>
    4c82:	b910      	cbnz	r0, 4c8a <SDClass::rmdir(char const*)+0x28>
	}
    4c84:	b00f      	add	sp, #60	; 0x3c
    4c86:	f85d fb04 	ldr.w	pc, [sp], #4
    4c8a:	4668      	mov	r0, sp
    4c8c:	f002 fd52 	bl	7734 <FatFile::rmdir()>
    4c90:	e7f8      	b.n	4c84 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    4c92:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4c96:	b179      	cbz	r1, 4cb8 <SDClass::rmdir(char const*)+0x56>
    4c98:	2300      	movs	r3, #0
    4c9a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4c9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4ca2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4ca6:	4668      	mov	r0, sp
    4ca8:	f000 ff5b 	bl	5b62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4cac:	2800      	cmp	r0, #0
    4cae:	d0e9      	beq.n	4c84 <SDClass::rmdir(char const*)+0x22>
    4cb0:	4668      	mov	r0, sp
    4cb2:	f001 f83d 	bl	5d30 <ExFatFile::rmdir()>
    4cb6:	e7e5      	b.n	4c84 <SDClass::rmdir(char const*)+0x22>
    4cb8:	2000      	movs	r0, #0
    4cba:	e7e3      	b.n	4c84 <SDClass::rmdir(char const*)+0x22>

00004cbc <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    4cbc:	b500      	push	{lr}
    4cbe:	b08f      	sub	sp, #60	; 0x3c
    4cc0:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    4cc2:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4cc6:	b191      	cbz	r1, 4cee <SDClass::remove(char const*)+0x32>
    4cc8:	2300      	movs	r3, #0
    4cca:	f88d 3000 	strb.w	r3, [sp]
    4cce:	f88d 3001 	strb.w	r3, [sp, #1]
    4cd2:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4cd6:	2301      	movs	r3, #1
    4cd8:	4668      	mov	r0, sp
    4cda:	f002 fee6 	bl	7aaa <FatFile::open(FatVolume*, char const*, int)>
    4cde:	b910      	cbnz	r0, 4ce6 <SDClass::remove(char const*)+0x2a>
	}
    4ce0:	b00f      	add	sp, #60	; 0x3c
    4ce2:	f85d fb04 	ldr.w	pc, [sp], #4
    4ce6:	4668      	mov	r0, sp
    4ce8:	f003 fec4 	bl	8a74 <FatFile::remove()>
    4cec:	e7f8      	b.n	4ce0 <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    4cee:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4cf2:	b181      	cbz	r1, 4d16 <SDClass::remove(char const*)+0x5a>
    4cf4:	2300      	movs	r3, #0
    4cf6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4cfa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4cfe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4d02:	2301      	movs	r3, #1
    4d04:	4668      	mov	r0, sp
    4d06:	f000 ff2c 	bl	5b62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4d0a:	2800      	cmp	r0, #0
    4d0c:	d0e8      	beq.n	4ce0 <SDClass::remove(char const*)+0x24>
    4d0e:	4668      	mov	r0, sp
    4d10:	f000 ffb6 	bl	5c80 <ExFatFile::remove()>
    4d14:	e7e4      	b.n	4ce0 <SDClass::remove(char const*)+0x24>
    4d16:	2000      	movs	r0, #0
    4d18:	e7e2      	b.n	4ce0 <SDClass::remove(char const*)+0x24>

00004d1a <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    4d1a:	b530      	push	{r4, r5, lr}
    4d1c:	b08f      	sub	sp, #60	; 0x3c
    4d1e:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    4d20:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    4d24:	b1b4      	cbz	r4, 4d54 <SDClass::rename(char const*, char const*)+0x3a>
    4d26:	2300      	movs	r3, #0
    4d28:	f88d 3000 	strb.w	r3, [sp]
    4d2c:	f88d 3001 	strb.w	r3, [sp, #1]
    4d30:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4d34:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4d38:	460a      	mov	r2, r1
    4d3a:	4621      	mov	r1, r4
    4d3c:	4668      	mov	r0, sp
    4d3e:	f002 fe4f 	bl	79e0 <FatFile::open(FatFile*, char const*, int)>
    4d42:	b908      	cbnz	r0, 4d48 <SDClass::rename(char const*, char const*)+0x2e>
	}
    4d44:	b00f      	add	sp, #60	; 0x3c
    4d46:	bd30      	pop	{r4, r5, pc}
    4d48:	462a      	mov	r2, r5
    4d4a:	4621      	mov	r1, r4
    4d4c:	4668      	mov	r0, sp
    4d4e:	f003 f80c 	bl	7d6a <FatFile::rename(FatFile*, char const*)>
    4d52:	e7f7      	b.n	4d44 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    4d54:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    4d58:	b1ac      	cbz	r4, 4d86 <SDClass::rename(char const*, char const*)+0x6c>
    4d5a:	2300      	movs	r3, #0
    4d5c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4d60:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4d64:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    4d68:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4d6c:	460a      	mov	r2, r1
    4d6e:	4621      	mov	r1, r4
    4d70:	4668      	mov	r0, sp
    4d72:	f000 fe83 	bl	5a7c <ExFatFile::open(ExFatFile*, char const*, int)>
    4d76:	2800      	cmp	r0, #0
    4d78:	d0e4      	beq.n	4d44 <SDClass::rename(char const*, char const*)+0x2a>
    4d7a:	462a      	mov	r2, r5
    4d7c:	4621      	mov	r1, r4
    4d7e:	4668      	mov	r0, sp
    4d80:	f001 f9bb 	bl	60fa <ExFatFile::rename(ExFatFile*, char const*)>
    4d84:	e7de      	b.n	4d44 <SDClass::rename(char const*, char const*)+0x2a>
    4d86:	2000      	movs	r0, #0
    4d88:	e7dc      	b.n	4d44 <SDClass::rename(char const*, char const*)+0x2a>

00004d8a <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    4d8a:	b500      	push	{lr}
    4d8c:	b08f      	sub	sp, #60	; 0x3c
    4d8e:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    4d90:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4d94:	b179      	cbz	r1, 4db6 <SDClass::mkdir(char const*)+0x2c>
    4d96:	2300      	movs	r3, #0
    4d98:	f88d 3000 	strb.w	r3, [sp]
    4d9c:	f88d 3001 	strb.w	r3, [sp, #1]
    4da0:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    4da4:	2301      	movs	r3, #1
    4da6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4daa:	4668      	mov	r0, sp
    4dac:	f002 ff74 	bl	7c98 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    4db0:	b00f      	add	sp, #60	; 0x3c
    4db2:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    4db6:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4dba:	b169      	cbz	r1, 4dd8 <SDClass::mkdir(char const*)+0x4e>
    4dbc:	2300      	movs	r3, #0
    4dbe:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4dc2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4dc6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    4dca:	2301      	movs	r3, #1
    4dcc:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4dd0:	4668      	mov	r0, sp
    4dd2:	f001 f91c 	bl	600e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    4dd6:	e7eb      	b.n	4db0 <SDClass::mkdir(char const*)+0x26>
    4dd8:	2000      	movs	r0, #0
    4dda:	e7e9      	b.n	4db0 <SDClass::mkdir(char const*)+0x26>

00004ddc <SDClass::open(char const*, unsigned char)>:
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    4ddc:	b570      	push	{r4, r5, r6, lr}
    4dde:	b094      	sub	sp, #80	; 0x50
    4de0:	4605      	mov	r5, r0
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    4de2:	2b01      	cmp	r3, #1
    4de4:	d036      	beq.n	4e54 <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    4de6:	2b02      	cmp	r3, #2
    4de8:	f240 2302 	movw	r3, #514	; 0x202
    4dec:	bf18      	it	ne
    4dee:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    4df0:	3104      	adds	r1, #4
    4df2:	4668      	mov	r0, sp
    4df4:	f004 fe98 	bl	9b28 <FsVolume::open(char const*, int)>
    4df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d02d      	beq.n	4e5a <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    4dfe:	205c      	movs	r0, #92	; 0x5c
    4e00:	f008 f928 	bl	d054 <operator new(unsigned int)>
    4e04:	4604      	mov	r4, r0
class FileImpl {
    4e06:	2600      	movs	r6, #0
    4e08:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    4e0a:	4b1a      	ldr	r3, [pc, #104]	; (4e74 <SDClass::open(char const*, unsigned char)+0x98>)
    4e0c:	6003      	str	r3, [r0, #0]
class Print
    4e0e:	9b01      	ldr	r3, [sp, #4]
    4e10:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    4e12:	4b19      	ldr	r3, [pc, #100]	; (4e78 <SDClass::open(char const*, unsigned char)+0x9c>)
    4e14:	6083      	str	r3, [r0, #8]
    4e16:	9b02      	ldr	r3, [sp, #8]
    4e18:	6103      	str	r3, [r0, #16]
    4e1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4e1e:	7503      	strb	r3, [r0, #20]
    4e20:	a904      	add	r1, sp, #16
    4e22:	3018      	adds	r0, #24
    4e24:	f004 fd49 	bl	98ba <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4e28:	4b14      	ldr	r3, [pc, #80]	; (4e7c <SDClass::open(char const*, unsigned char)+0xa0>)
    4e2a:	60a3      	str	r3, [r4, #8]
    4e2c:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    4e2e:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    4e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4e34:	60ab      	str	r3, [r5, #8]
    4e36:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    4e38:	4b11      	ldr	r3, [pc, #68]	; (4e80 <SDClass::open(char const*, unsigned char)+0xa4>)
    4e3a:	602b      	str	r3, [r5, #0]
		f = file;
    4e3c:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    4e3e:	6863      	ldr	r3, [r4, #4]
    4e40:	3301      	adds	r3, #1
    4e42:	6063      	str	r3, [r4, #4]
    4e44:	4b0f      	ldr	r3, [pc, #60]	; (4e84 <SDClass::open(char const*, unsigned char)+0xa8>)
    4e46:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    4e48:	a804      	add	r0, sp, #16
    4e4a:	f004 fd77 	bl	993c <FsBaseFile::close()>
	}
    4e4e:	4628      	mov	r0, r5
    4e50:	b014      	add	sp, #80	; 0x50
    4e52:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    4e54:	f244 2302 	movw	r3, #16898	; 0x4202
    4e58:	e7ca      	b.n	4df0 <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    4e5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d1ce      	bne.n	4dfe <SDClass::open(char const*, unsigned char)+0x22>
    4e60:	606b      	str	r3, [r5, #4]
    4e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e66:	60aa      	str	r2, [r5, #8]
    4e68:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    4e6a:	4a05      	ldr	r2, [pc, #20]	; (4e80 <SDClass::open(char const*, unsigned char)+0xa4>)
    4e6c:	602a      	str	r2, [r5, #0]
    4e6e:	612b      	str	r3, [r5, #16]
    4e70:	e7e8      	b.n	4e44 <SDClass::open(char const*, unsigned char)+0x68>
    4e72:	bf00      	nop
    4e74:	200023d4 	.word	0x200023d4
    4e78:	20002430 	.word	0x20002430
    4e7c:	200023b0 	.word	0x200023b0
    4e80:	20002384 	.word	0x20002384
    4e84:	200022a4 	.word	0x200022a4

00004e88 <SDClass::usedSize()>:
	uint64_t usedSize() {
    4e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4e8a:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d04d      	beq.n	4f2e <SDClass::usedSize()+0xa6>
    4e92:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    4e94:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4e98:	b1f3      	cbz	r3, 4ed8 <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    4e9a:	69de      	ldr	r6, [r3, #28]
    4e9c:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4e9e:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    4ea2:	2800      	cmp	r0, #0
    4ea4:	d05a      	beq.n	4f5c <SDClass::usedSize()+0xd4>
    4ea6:	6803      	ldr	r3, [r0, #0]
    4ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4eaa:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4eac:	4607      	mov	r7, r0
    4eae:	b140      	cbz	r0, 4ec2 <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4eb0:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4eb4:	2800      	cmp	r0, #0
    4eb6:	d032      	beq.n	4f1e <SDClass::usedSize()+0x96>
    4eb8:	6803      	ldr	r3, [r0, #0]
    4eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ebc:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4ebe:	b1b8      	cbz	r0, 4ef0 <SDClass::usedSize()+0x68>
    4ec0:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    4ec2:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    4ec6:	2800      	cmp	r0, #0
    4ec8:	d14b      	bne.n	4f62 <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4eca:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    4ece:	b388      	cbz	r0, 4f34 <SDClass::usedSize()+0xac>
    4ed0:	f002 f96b 	bl	71aa <ExFatPartition::freeClusterCount()>
    4ed4:	4605      	mov	r5, r0
    4ed6:	e047      	b.n	4f68 <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    4ed8:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    4edc:	2b00      	cmp	r3, #0
    4ede:	d055      	beq.n	4f8c <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    4ee0:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4ee4:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4ee8:	2800      	cmp	r0, #0
    4eea:	d1dc      	bne.n	4ea6 <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4eec:	2700      	movs	r7, #0
    4eee:	e7ec      	b.n	4eca <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    4ef0:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4ef4:	b1a8      	cbz	r0, 4f22 <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    4ef6:	6803      	ldr	r3, [r0, #0]
    4ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4efa:	2101      	movs	r1, #1
    4efc:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4efe:	4607      	mov	r7, r0
    4f00:	2800      	cmp	r0, #0
    4f02:	d1de      	bne.n	4ec2 <SDClass::usedSize()+0x3a>
      return 0;
    4f04:	2500      	movs	r5, #0
    4f06:	e031      	b.n	4f6c <SDClass::usedSize()+0xe4>
    if (m_card) {
    4f08:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4f0c:	b158      	cbz	r0, 4f26 <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    4f0e:	6803      	ldr	r3, [r0, #0]
    4f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4f12:	2100      	movs	r1, #0
    4f14:	4798      	blx	r3
      return 0;
    4f16:	2800      	cmp	r0, #0
    4f18:	bf08      	it	eq
    4f1a:	2500      	moveq	r5, #0
    4f1c:	e026      	b.n	4f6c <SDClass::usedSize()+0xe4>
      return 0;
    4f1e:	2500      	movs	r5, #0
    4f20:	e024      	b.n	4f6c <SDClass::usedSize()+0xe4>
    4f22:	2500      	movs	r5, #0
    4f24:	e022      	b.n	4f6c <SDClass::usedSize()+0xe4>
      return 0;
    4f26:	2500      	movs	r5, #0
    4f28:	e020      	b.n	4f6c <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4f2a:	2300      	movs	r3, #0
    4f2c:	e029      	b.n	4f82 <SDClass::usedSize()+0xfa>
    4f2e:	2000      	movs	r0, #0
    4f30:	4601      	mov	r1, r0
    4f32:	e02a      	b.n	4f8a <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    4f34:	b967      	cbnz	r7, 4f50 <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    4f36:	2300      	movs	r3, #0
    4f38:	4630      	mov	r0, r6
    4f3a:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    4f3c:	e021      	b.n	4f82 <SDClass::usedSize()+0xfa>
    4f3e:	4630      	mov	r0, r6
    4f40:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4f42:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    4f46:	2b00      	cmp	r3, #0
    4f48:	d0ef      	beq.n	4f2a <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    4f4a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    4f4e:	e018      	b.n	4f82 <SDClass::usedSize()+0xfa>
    if (m_card) {
    4f50:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4f54:	2800      	cmp	r0, #0
    4f56:	d0f2      	beq.n	4f3e <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4f58:	2500      	movs	r5, #0
    4f5a:	e7d8      	b.n	4f0e <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    4f5c:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4f60:	2700      	movs	r7, #0
    4f62:	f004 fb9b 	bl	969c <FatPartition::freeClusterCount()>
    4f66:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4f68:	2f00      	cmp	r7, #0
    4f6a:	d1cd      	bne.n	4f08 <SDClass::usedSize()+0x80>
    4f6c:	1b70      	subs	r0, r6, r5
    4f6e:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    4f70:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    4f74:	2b00      	cmp	r3, #0
    4f76:	d0e4      	beq.n	4f42 <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4f78:	7999      	ldrb	r1, [r3, #6]
    4f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
    4f7e:	408b      	lsls	r3, r1
    4f80:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    4f82:	fba3 0100 	umull	r0, r1, r3, r0
    4f86:	fb03 1102 	mla	r1, r3, r2, r1
	}
    4f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    4f8c:	2600      	movs	r6, #0
    4f8e:	e7a9      	b.n	4ee4 <SDClass::usedSize()+0x5c>

00004f90 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    4f90:	b530      	push	{r4, r5, lr}
    4f92:	b085      	sub	sp, #20
    4f94:	4604      	mov	r4, r0
    4f96:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    4f98:	4832      	ldr	r0, [pc, #200]	; (5064 <SDClass::begin(unsigned char)+0xd4>)
    4f9a:	f006 fc49 	bl	b830 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    4f9e:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    4fa2:	2dfe      	cmp	r5, #254	; 0xfe
    4fa4:	d004      	beq.n	4fb0 <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    4fa6:	2d36      	cmp	r5, #54	; 0x36
    4fa8:	d930      	bls.n	500c <SDClass::begin(unsigned char)+0x7c>
	return false;
    4faa:	2000      	movs	r0, #0
}
    4fac:	b005      	add	sp, #20
    4fae:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    4fb0:	23ff      	movs	r3, #255	; 0xff
    4fb2:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    4fb6:	2100      	movs	r1, #0
    4fb8:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    4fbc:	f204 4594 	addw	r5, r4, #1172	; 0x494
    4fc0:	4628      	mov	r0, r5
    4fc2:	f005 ff9d 	bl	af00 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    4fc6:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    4fca:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    4fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4fd0:	4628      	mov	r0, r5
    4fd2:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    4fd4:	b158      	cbz	r0, 4fee <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    4fd6:	2300      	movs	r3, #0
    4fd8:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    4fdc:	232e      	movs	r3, #46	; 0x2e
    4fde:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    4fe2:	2103      	movs	r1, #3
    4fe4:	202e      	movs	r0, #46	; 0x2e
    4fe6:	f007 ff55 	bl	ce94 <pinMode>
		return ret;
    4fea:	2000      	movs	r0, #0
    4fec:	e7de      	b.n	4fac <SDClass::begin(unsigned char)+0x1c>
    4fee:	2301      	movs	r3, #1
    4ff0:	461a      	mov	r2, r3
    4ff2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    4ff6:	1d20      	adds	r0, r4, #4
    4ff8:	f004 fd20 	bl	9a3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    4ffc:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    5000:	232e      	movs	r3, #46	; 0x2e
    5002:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5006:	2800      	cmp	r0, #0
    5008:	d1d0      	bne.n	4fac <SDClass::begin(unsigned char)+0x1c>
    500a:	e7ea      	b.n	4fe2 <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    500c:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    5010:	2300      	movs	r3, #0
    5012:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    5016:	4a14      	ldr	r2, [pc, #80]	; (5068 <SDClass::begin(unsigned char)+0xd8>)
    5018:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    501c:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    5020:	f88d 5004 	strb.w	r5, [sp, #4]
    5024:	f88d 3005 	strb.w	r3, [sp, #5]
    5028:	9202      	str	r2, [sp, #8]
    502a:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    502c:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    5030:	ab04      	add	r3, sp, #16
    5032:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    5036:	4628      	mov	r0, r5
    5038:	f005 f9d4 	bl	a3e4 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    503c:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    5040:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    5044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5046:	4628      	mov	r0, r5
    5048:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    504a:	b118      	cbz	r0, 5054 <SDClass::begin(unsigned char)+0xc4>
    504c:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    504e:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    5052:	e7ab      	b.n	4fac <SDClass::begin(unsigned char)+0x1c>
    5054:	2301      	movs	r3, #1
    5056:	461a      	mov	r2, r3
    5058:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    505c:	1d20      	adds	r0, r4, #4
    505e:	f004 fced 	bl	9a3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5062:	e7f4      	b.n	504e <SDClass::begin(unsigned char)+0xbe>
    5064:	00004b99 	.word	0x00004b99
    5068:	017d7840 	.word	0x017d7840

0000506c <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    506c:	b530      	push	{r4, r5, lr}
    506e:	b085      	sub	sp, #20
    5070:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    5072:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    5076:	2bff      	cmp	r3, #255	; 0xff
    5078:	d01e      	beq.n	50b8 <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    507a:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    507e:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    5082:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    5086:	f88d 3004 	strb.w	r3, [sp, #4]
    508a:	f88d 0005 	strb.w	r0, [sp, #5]
    508e:	9102      	str	r1, [sp, #8]
    5090:	9203      	str	r2, [sp, #12]
    5092:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    5096:	ab04      	add	r3, sp, #16
    5098:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    509c:	4628      	mov	r0, r5
    509e:	f005 f9a1 	bl	a3e4 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    50a2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    50a6:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    50aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50ac:	4628      	mov	r0, r5
    50ae:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    50b0:	b1d8      	cbz	r0, 50ea <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    50b2:	2000      	movs	r0, #0
  }
    50b4:	b005      	add	sp, #20
    50b6:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    50b8:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    50bc:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    50c0:	4628      	mov	r0, r5
    50c2:	f005 ff1d 	bl	af00 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    50c6:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    50ca:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    50ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50d0:	4628      	mov	r0, r5
    50d2:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    50d4:	b108      	cbz	r0, 50da <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    50d6:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    50d8:	e7ec      	b.n	50b4 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    50da:	2301      	movs	r3, #1
    50dc:	461a      	mov	r2, r3
    50de:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    50e2:	4620      	mov	r0, r4
    50e4:	f004 fcaa 	bl	9a3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    50e8:	e7e4      	b.n	50b4 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    50ea:	2301      	movs	r3, #1
    50ec:	461a      	mov	r2, r3
    50ee:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    50f2:	4620      	mov	r0, r4
    50f4:	f004 fca2 	bl	9a3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    50f8:	e7dc      	b.n	50b4 <SdBase<FsVolume, FsFormatter>::restart()+0x48>

000050fa <SDClass::format(int, char, Print&)>:
{
    50fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50fe:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    5100:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    5104:	b39c      	cbz	r4, 516e <SDClass::format(int, char, Print&)+0x74>
    5106:	4605      	mov	r5, r0
    5108:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    510a:	6823      	ldr	r3, [r4, #0]
    510c:	69db      	ldr	r3, [r3, #28]
    510e:	4620      	mov	r0, r4
    5110:	4798      	blx	r3
    5112:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    5114:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    5118:	d804      	bhi.n	5124 <SDClass::format(int, char, Print&)+0x2a>
    511a:	2600      	movs	r6, #0
}
    511c:	4630      	mov	r0, r6
    511e:	b00c      	add	sp, #48	; 0x30
    5120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    5124:	f44f 7000 	mov.w	r0, #512	; 0x200
    5128:	f00b fff4 	bl	11114 <malloc>
	if (!buf) return false; // unable to allocate memory
    512c:	4680      	mov	r8, r0
    512e:	b300      	cbz	r0, 5172 <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    5130:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    5134:	d913      	bls.n	515e <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    5136:	463b      	mov	r3, r7
    5138:	4602      	mov	r2, r0
    513a:	4621      	mov	r1, r4
    513c:	a801      	add	r0, sp, #4
    513e:	f001 fb23 	bl	6788 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    5142:	4606      	mov	r6, r0
	free(buf);
    5144:	4640      	mov	r0, r8
    5146:	f00b ffed 	bl	11124 <free>
	if (ret) {
    514a:	2e00      	cmp	r6, #0
    514c:	d0e6      	beq.n	511c <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    514e:	6823      	ldr	r3, [r4, #0]
    5150:	6a1b      	ldr	r3, [r3, #32]
    5152:	4620      	mov	r0, r4
    5154:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    5156:	1d28      	adds	r0, r5, #4
    5158:	f7ff ff88 	bl	506c <SdBase<FsVolume, FsFormatter>::restart()>
    515c:	e7de      	b.n	511c <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    515e:	463b      	mov	r3, r7
    5160:	4602      	mov	r2, r0
    5162:	4621      	mov	r1, r4
    5164:	a801      	add	r0, sp, #4
    5166:	f003 ff7f 	bl	9068 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    516a:	4606      	mov	r6, r0
    516c:	e7ea      	b.n	5144 <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    516e:	2600      	movs	r6, #0
    5170:	e7d4      	b.n	511c <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    5172:	2600      	movs	r6, #0
    5174:	e7d2      	b.n	511c <SDClass::format(int, char, Print&)+0x22>
	...

00005178 <SDClass::mediaPresent()>:
{
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	b084      	sub	sp, #16
    517c:	4604      	mov	r4, r0
    517e:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    5182:	2e00      	cmp	r6, #0
    5184:	d042      	beq.n	520c <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    5186:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    518a:	b345      	cbz	r5, 51de <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    518c:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    5190:	2bfe      	cmp	r3, #254	; 0xfe
    5192:	d00a      	beq.n	51aa <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5194:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    5198:	2836      	cmp	r0, #54	; 0x36
    519a:	d914      	bls.n	51c6 <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    519c:	6833      	ldr	r3, [r6, #0]
    519e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    51a0:	4669      	mov	r1, sp
    51a2:	4630      	mov	r0, r6
    51a4:	4798      	blx	r3
    51a6:	4605      	mov	r5, r0
    51a8:	e031      	b.n	520e <SDClass::mediaPresent()+0x96>
				s = card->status();
    51aa:	6833      	ldr	r3, [r6, #0]
    51ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    51ae:	4630      	mov	r0, r6
    51b0:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    51b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    51b6:	d0ed      	beq.n	5194 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    51b8:	bb48      	cbnz	r0, 520e <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    51ba:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    51be:	2bfe      	cmp	r3, #254	; 0xfe
    51c0:	d007      	beq.n	51d2 <SDClass::mediaPresent()+0x5a>
				ret = false;
    51c2:	2500      	movs	r5, #0
    51c4:	e023      	b.n	520e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    51c6:	f007 fe53 	bl	ce70 <digitalRead>
    51ca:	1e05      	subs	r5, r0, #0
    51cc:	bf18      	it	ne
    51ce:	2501      	movne	r5, #1
    51d0:	e01d      	b.n	520e <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    51d2:	2103      	movs	r1, #3
    51d4:	202e      	movs	r0, #46	; 0x2e
    51d6:	f007 fe5d 	bl	ce94 <pinMode>
				ret = false;
    51da:	2500      	movs	r5, #0
    51dc:	e017      	b.n	520e <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    51de:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    51e2:	2bfe      	cmp	r3, #254	; 0xfe
    51e4:	d008      	beq.n	51f8 <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    51e6:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    51ea:	2836      	cmp	r0, #54	; 0x36
    51ec:	d90a      	bls.n	5204 <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    51ee:	1d20      	adds	r0, r4, #4
    51f0:	f7ff ff3c 	bl	506c <SdBase<FsVolume, FsFormatter>::restart()>
    51f4:	4605      	mov	r5, r0
    51f6:	e00a      	b.n	520e <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    51f8:	4b07      	ldr	r3, [pc, #28]	; (5218 <SDClass::mediaPresent()+0xa0>)
    51fa:	689b      	ldr	r3, [r3, #8]
			if (ret)
    51fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5200:	d1f5      	bne.n	51ee <SDClass::mediaPresent()+0x76>
    5202:	e004      	b.n	520e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5204:	f007 fe34 	bl	ce70 <digitalRead>
			if (ret)
    5208:	b108      	cbz	r0, 520e <SDClass::mediaPresent()+0x96>
    520a:	e7f0      	b.n	51ee <SDClass::mediaPresent()+0x76>
		ret = false;
    520c:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    520e:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    5212:	4628      	mov	r0, r5
    5214:	b004      	add	sp, #16
    5216:	bd70      	pop	{r4, r5, r6, pc}
    5218:	42008000 	.word	0x42008000

0000521c <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    521c:	b508      	push	{r3, lr}
	SDClass() { }
    521e:	4817      	ldr	r0, [pc, #92]	; (527c <_GLOBAL__sub_I_SD+0x60>)
    5220:	4b17      	ldr	r3, [pc, #92]	; (5280 <_GLOBAL__sub_I_SD+0x64>)
    5222:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    5224:	2300      	movs	r3, #0
    5226:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    522a:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    522e:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5232:	4a14      	ldr	r2, [pc, #80]	; (5284 <_GLOBAL__sub_I_SD+0x68>)
    5234:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    5238:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    523c:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    5240:	4a11      	ldr	r2, [pc, #68]	; (5288 <_GLOBAL__sub_I_SD+0x6c>)
    5242:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5246:	2207      	movs	r2, #7
    5248:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    524c:	2229      	movs	r2, #41	; 0x29
    524e:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    5252:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    5256:	4a0d      	ldr	r2, [pc, #52]	; (528c <_GLOBAL__sub_I_SD+0x70>)
    5258:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    525c:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    5260:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    5264:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    5268:	23ff      	movs	r3, #255	; 0xff
    526a:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    526e:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    5272:	4a07      	ldr	r2, [pc, #28]	; (5290 <_GLOBAL__sub_I_SD+0x74>)
    5274:	4907      	ldr	r1, [pc, #28]	; (5294 <_GLOBAL__sub_I_SD+0x78>)
    5276:	f00b fca9 	bl	10bcc <__aeabi_atexit>
}
    527a:	bd08      	pop	{r3, pc}
    527c:	200040dc 	.word	0x200040dc
    5280:	20002454 	.word	0x20002454
    5284:	200024a8 	.word	0x200024a8
    5288:	003d0900 	.word	0x003d0900
    528c:	200022ec 	.word	0x200022ec
    5290:	20003344 	.word	0x20003344
    5294:	00004b95 	.word	0x00004b95

00005298 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5298:	b530      	push	{r4, r5, lr}
    529a:	b085      	sub	sp, #20
    529c:	4604      	mov	r4, r0
    529e:	468c      	mov	ip, r1
    52a0:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    52a2:	ab01      	add	r3, sp, #4
    52a4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    52a8:	c907      	ldmia	r1, {r0, r1, r2}
    52aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    52ae:	ea4f 124c 	mov.w	r2, ip, lsl #5
    52b2:	4619      	mov	r1, r3
    52b4:	6a20      	ldr	r0, [r4, #32]
    52b6:	f001 fef5 	bl	70a4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    52ba:	2801      	cmp	r0, #1
    52bc:	d106      	bne.n	52cc <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    52be:	462a      	mov	r2, r5
    52c0:	a901      	add	r1, sp, #4
    52c2:	6a20      	ldr	r0, [r4, #32]
    52c4:	f001 fe99 	bl	6ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    52c8:	b005      	add	sp, #20
    52ca:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    52cc:	2000      	movs	r0, #0
    52ce:	e7fb      	b.n	52c8 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

000052d0 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    52d0:	b510      	push	{r4, lr}
    52d2:	4604      	mov	r4, r0
  bool rtn = sync();
    52d4:	f000 fde8 	bl	5ea8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    52d8:	2300      	movs	r3, #0
    52da:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    52de:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    52e2:	bd10      	pop	{r4, pc}

000052e4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    52e4:	b538      	push	{r3, r4, r5, lr}
    52e6:	460d      	mov	r5, r1
    52e8:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    52ea:	2200      	movs	r2, #0
    52ec:	f100 0124 	add.w	r1, r0, #36	; 0x24
    52f0:	6a00      	ldr	r0, [r0, #32]
    52f2:	f001 fe82 	bl	6ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    52f6:	b128      	cbz	r0, 5304 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    52f8:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    52fa:	802a      	strh	r2, [r5, #0]
    52fc:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    52fe:	8023      	strh	r3, [r4, #0]
  return true;
    5300:	2001      	movs	r0, #1

 fail:
  return false;
}
    5302:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5304:	2000      	movs	r0, #0
    5306:	e7fc      	b.n	5302 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

00005308 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5308:	b538      	push	{r3, r4, r5, lr}
    530a:	460d      	mov	r5, r1
    530c:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    530e:	2200      	movs	r2, #0
    5310:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5314:	6a00      	ldr	r0, [r0, #32]
    5316:	f001 fe70 	bl	6ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    531a:	b128      	cbz	r0, 5328 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    531c:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    531e:	802a      	strh	r2, [r5, #0]
    5320:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    5322:	8023      	strh	r3, [r4, #0]
  return true;
    5324:	2001      	movs	r0, #1

 fail:
  return false;
}
    5326:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5328:	2000      	movs	r0, #0
    532a:	e7fc      	b.n	5326 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

0000532c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    532c:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    532e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5332:	b10b      	cbz	r3, 5338 <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5334:	2000      	movs	r0, #0
}
    5336:	bd38      	pop	{r3, r4, r5, pc}
    5338:	4604      	mov	r4, r0
    533a:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    533c:	2238      	movs	r2, #56	; 0x38
    533e:	2100      	movs	r1, #0
    5340:	f00c fa74 	bl	1182c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5344:	2340      	movs	r3, #64	; 0x40
    5346:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    534a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    534c:	2001      	movs	r0, #1
    534e:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    5352:	e7f0      	b.n	5336 <ExFatFile::openRoot(ExFatVolume*)+0xa>

00005354 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5354:	b570      	push	{r4, r5, r6, lr}
    5356:	460d      	mov	r5, r1
    5358:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    535a:	782a      	ldrb	r2, [r5, #0]
    535c:	2a20      	cmp	r2, #32
    535e:	d103      	bne.n	5368 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    5360:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    5364:	2c20      	cmp	r4, #32
    5366:	d0fb      	beq.n	5360 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    5368:	600d      	str	r5, [r1, #0]
  fname->end = path;
    536a:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    536c:	782c      	ldrb	r4, [r5, #0]
    536e:	b384      	cbz	r4, 53d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5370:	2c2f      	cmp	r4, #47	; 0x2f
    5372:	d02e      	beq.n	53d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5374:	f105 0e01 	add.w	lr, r5, #1
    5378:	4e1f      	ldr	r6, [pc, #124]	; (53f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    537a:	e017      	b.n	53ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    537c:	2c1f      	cmp	r4, #31
    537e:	d823      	bhi.n	53c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    5380:	2000      	movs	r0, #0
    5382:	e00b      	b.n	539c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5384:	2c5c      	cmp	r4, #92	; 0x5c
    5386:	d035      	beq.n	53f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    5388:	d903      	bls.n	5392 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    538a:	2c7c      	cmp	r4, #124	; 0x7c
    538c:	d107      	bne.n	539e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    538e:	2000      	movs	r0, #0
    5390:	e004      	b.n	539c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5392:	3c3e      	subs	r4, #62	; 0x3e
    5394:	b2e4      	uxtb	r4, r4
    5396:	2c01      	cmp	r4, #1
    5398:	d801      	bhi.n	539e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    539a:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    539c:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    539e:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    53a0:	782c      	ldrb	r4, [r5, #0]
    53a2:	f10e 0e01 	add.w	lr, lr, #1
    53a6:	b1a4      	cbz	r4, 53d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    53a8:	2c2f      	cmp	r4, #47	; 0x2f
    53aa:	d012      	beq.n	53d2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    53ac:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    53ae:	2c3c      	cmp	r4, #60	; 0x3c
    53b0:	d8e8      	bhi.n	5384 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    53b2:	2c21      	cmp	r4, #33	; 0x21
    53b4:	d9e2      	bls.n	537c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    53b6:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    53ba:	fa5f fc8c 	uxtb.w	ip, ip
    53be:	fa26 fc0c 	lsr.w	ip, r6, ip
    53c2:	f01c 0f01 	tst.w	ip, #1
    53c6:	d113      	bne.n	53f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    53c8:	2c2e      	cmp	r4, #46	; 0x2e
    53ca:	d0e9      	beq.n	53a0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    53cc:	2c20      	cmp	r4, #32
    53ce:	d0e7      	beq.n	53a0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    53d0:	e7e5      	b.n	539e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    53d2:	782a      	ldrb	r2, [r5, #0]
    53d4:	2a2f      	cmp	r2, #47	; 0x2f
    53d6:	d001      	beq.n	53dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    53d8:	2a20      	cmp	r2, #32
    53da:	d105      	bne.n	53e8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    53dc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    53e0:	2c20      	cmp	r4, #32
    53e2:	d0fb      	beq.n	53dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    53e4:	2c2f      	cmp	r4, #47	; 0x2f
    53e6:	d0f9      	beq.n	53dc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    53e8:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    53ea:	f001 fd13 	bl	6e14 <ExFatFile::hashName(ExName_t*)>
    53ee:	e7d5      	b.n	539c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    53f0:	2000      	movs	r0, #0
    53f2:	e7d3      	b.n	539c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    53f4:	2000      	movs	r0, #0
    53f6:	e7d1      	b.n	539c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    53f8:	05002101 	.word	0x05002101

000053fc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    53fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5400:	b083      	sub	sp, #12
    5402:	4604      	mov	r4, r0
    5404:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5406:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    540a:	f013 0f01 	tst.w	r3, #1
    540e:	f000 80b3 	beq.w	5578 <ExFatFile::read(void*, unsigned int)+0x17c>
    5412:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5414:	f013 0f40 	tst.w	r3, #64	; 0x40
    5418:	d104      	bne.n	5424 <ExFatFile::read(void*, unsigned int)+0x28>
    541a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    541e:	f013 0f08 	tst.w	r3, #8
    5422:	d00d      	beq.n	5440 <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    5424:	6822      	ldr	r2, [r4, #0]
    5426:	6863      	ldr	r3, [r4, #4]
    5428:	6921      	ldr	r1, [r4, #16]
    542a:	6960      	ldr	r0, [r4, #20]
    542c:	9d00      	ldr	r5, [sp, #0]
    542e:	18ad      	adds	r5, r5, r2
    5430:	f143 0300 	adc.w	r3, r3, #0
    5434:	42a9      	cmp	r1, r5
    5436:	eb70 0303 	sbcs.w	r3, r0, r3
    543a:	d201      	bcs.n	5440 <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    543c:	1a8b      	subs	r3, r1, r2
    543e:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    5440:	9b00      	ldr	r3, [sp, #0]
    5442:	2b00      	cmp	r3, #0
    5444:	f000 80a3 	beq.w	558e <ExFatFile::read(void*, unsigned int)+0x192>
    5448:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    544a:	f104 0318 	add.w	r3, r4, #24
    544e:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5450:	f240 1bff 	movw	fp, #511	; 0x1ff
    5454:	e036      	b.n	54c4 <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    5456:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    545a:	f013 0f40 	tst.w	r3, #64	; 0x40
    545e:	d003      	beq.n	5468 <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    5460:	69a3      	ldr	r3, [r4, #24]
    5462:	3301      	adds	r3, #1
    5464:	61a3      	str	r3, [r4, #24]
    5466:	e041      	b.n	54ec <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5468:	9a01      	ldr	r2, [sp, #4]
    546a:	69a1      	ldr	r1, [r4, #24]
    546c:	f001 fde2 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5470:	2800      	cmp	r0, #0
    5472:	f2c0 8081 	blt.w	5578 <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    5476:	2800      	cmp	r0, #0
    5478:	d138      	bne.n	54ec <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    547a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    547e:	f013 0f50 	tst.w	r3, #80	; 0x50
    5482:	d079      	beq.n	5578 <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    5484:	9b00      	ldr	r3, [sp, #0]
    5486:	1bd8      	subs	r0, r3, r7
    5488:	e07e      	b.n	5588 <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    548a:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    548e:	42be      	cmp	r6, r7
    5490:	bf28      	it	cs
    5492:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    5494:	2200      	movs	r2, #0
    5496:	4629      	mov	r1, r5
    5498:	f508 7004 	add.w	r0, r8, #528	; 0x210
    549c:	f006 f995 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    54a0:	4601      	mov	r1, r0
    54a2:	2800      	cmp	r0, #0
    54a4:	d068      	beq.n	5578 <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    54a6:	4632      	mov	r2, r6
    54a8:	4449      	add	r1, r9
    54aa:	4650      	mov	r0, sl
    54ac:	f007 fd38 	bl	cf20 <memcpy>
    dst += n;
    54b0:	44b2      	add	sl, r6
    m_curPosition += n;
    54b2:	6823      	ldr	r3, [r4, #0]
    54b4:	6862      	ldr	r2, [r4, #4]
    54b6:	199b      	adds	r3, r3, r6
    54b8:	f142 0200 	adc.w	r2, r2, #0
    54bc:	6023      	str	r3, [r4, #0]
    54be:	6062      	str	r2, [r4, #4]
  while (toRead) {
    54c0:	1bbf      	subs	r7, r7, r6
    54c2:	d0df      	beq.n	5484 <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    54c4:	6823      	ldr	r3, [r4, #0]
    54c6:	6862      	ldr	r2, [r4, #4]
    54c8:	6a20      	ldr	r0, [r4, #32]
    54ca:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    54ce:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    54d0:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    54d4:	b956      	cbnz	r6, 54ec <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    54d6:	4313      	orrs	r3, r2
    54d8:	d1bd      	bne.n	5456 <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    54da:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    54de:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    54e2:	bf14      	ite	ne
    54e4:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    54e8:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    54ea:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    54ec:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    54f0:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    54f4:	0a72      	lsrs	r2, r6, #9
    54f6:	69a5      	ldr	r5, [r4, #24]
    54f8:	3d02      	subs	r5, #2
    54fa:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    54fc:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    5500:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    5504:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5506:	f1b9 0f00 	cmp.w	r9, #0
    550a:	d1be      	bne.n	548a <ExFatFile::read(void*, unsigned int)+0x8e>
    550c:	455f      	cmp	r7, fp
    550e:	d9bc      	bls.n	548a <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5510:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5514:	428d      	cmp	r5, r1
    5516:	d0b8      	beq.n	548a <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5518:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    551c:	d20a      	bcs.n	5534 <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    551e:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5522:	6803      	ldr	r3, [r0, #0]
    5524:	691b      	ldr	r3, [r3, #16]
    5526:	4652      	mov	r2, sl
    5528:	4629      	mov	r1, r5
    552a:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    552c:	b320      	cbz	r0, 5578 <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    552e:	f44f 7600 	mov.w	r6, #512	; 0x200
    5532:	e7bd      	b.n	54b0 <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5534:	f04f 0901 	mov.w	r9, #1
    5538:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    553c:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5540:	0a7b      	lsrs	r3, r7, #9
    5542:	4599      	cmp	r9, r3
    5544:	bf28      	it	cs
    5546:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    5548:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    554c:	428d      	cmp	r5, r1
    554e:	d808      	bhi.n	5562 <ExFatFile::read(void*, unsigned int)+0x166>
    5550:	eb05 0309 	add.w	r3, r5, r9
    5554:	4299      	cmp	r1, r3
    5556:	d204      	bcs.n	5562 <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    5558:	f508 7004 	add.w	r0, r8, #528	; 0x210
    555c:	f006 f90e 	bl	b77c <FsCache::sync()>
    5560:	b150      	cbz	r0, 5578 <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    5562:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5566:	6803      	ldr	r3, [r0, #0]
    5568:	f8d3 8014 	ldr.w	r8, [r3, #20]
    556c:	464b      	mov	r3, r9
    556e:	4652      	mov	r2, sl
    5570:	4629      	mov	r1, r5
    5572:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5574:	2800      	cmp	r0, #0
    5576:	d19b      	bne.n	54b0 <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    5578:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    557c:	f043 0302 	orr.w	r3, r3, #2
    5580:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5588:	b003      	add	sp, #12
    558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    558e:	461f      	mov	r7, r3
    5590:	e778      	b.n	5484 <ExFatFile::read(void*, unsigned int)+0x88>

00005592 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5592:	b5f0      	push	{r4, r5, r6, r7, lr}
    5594:	b083      	sub	sp, #12
    5596:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    5598:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    559c:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    559e:	2201      	movs	r2, #1
    55a0:	f10d 0107 	add.w	r1, sp, #7
    55a4:	f7ff ff2a 	bl	53fc <ExFatFile::read(void*, unsigned int)>
    55a8:	2801      	cmp	r0, #1
    55aa:	bf0c      	ite	eq
    55ac:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    55b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    55b4:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    55b8:	61a5      	str	r5, [r4, #24]
}
    55ba:	b003      	add	sp, #12
    55bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000055be <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    55be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55c2:	4604      	mov	r4, r0
    55c4:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    55c6:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    55ca:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    55ce:	2a00      	cmp	r2, #0
    55d0:	d054      	beq.n	567c <ExFatFile::seekSet(unsigned long long)+0xbe>
    55d2:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    55d4:	6801      	ldr	r1, [r0, #0]
    55d6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    55da:	459c      	cmp	ip, r3
    55dc:	bf08      	it	eq
    55de:	42b1      	cmpeq	r1, r6
    55e0:	d05d      	beq.n	569e <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    55e2:	ea56 0307 	orrs.w	r3, r6, r7
    55e6:	d04e      	beq.n	5686 <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    55e8:	f012 0f08 	tst.w	r2, #8
    55ec:	d004      	beq.n	55f8 <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    55ee:	6900      	ldr	r0, [r0, #16]
    55f0:	6963      	ldr	r3, [r4, #20]
    55f2:	42b0      	cmp	r0, r6
    55f4:	41bb      	sbcs	r3, r7
    55f6:	d341      	bcc.n	567c <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    55f8:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    55fc:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    5600:	3309      	adds	r3, #9
    5602:	b2db      	uxtb	r3, r3
    5604:	1e75      	subs	r5, r6, #1
    5606:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    560a:	f1c3 0920 	rsb	r9, r3, #32
    560e:	f1a3 0020 	sub.w	r0, r3, #32
    5612:	40dd      	lsrs	r5, r3
    5614:	fa0a f909 	lsl.w	r9, sl, r9
    5618:	ea45 0509 	orr.w	r5, r5, r9
    561c:	fa2a f000 	lsr.w	r0, sl, r0
    5620:	4305      	orrs	r5, r0
  if (isContiguous()) {
    5622:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5626:	f010 0f40 	tst.w	r0, #64	; 0x40
    562a:	d132      	bne.n	5692 <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    562c:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    5630:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    5634:	f1c3 0920 	rsb	r9, r3, #32
    5638:	f1a3 0020 	sub.w	r0, r3, #32
    563c:	fa2b f303 	lsr.w	r3, fp, r3
    5640:	fa0a f909 	lsl.w	r9, sl, r9
    5644:	ea43 0309 	orr.w	r3, r3, r9
    5648:	fa2a f000 	lsr.w	r0, sl, r0
    564c:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    564e:	ea51 0c0c 	orrs.w	ip, r1, ip
    5652:	d001      	beq.n	5658 <ExFatFile::seekSet(unsigned long long)+0x9a>
    5654:	429d      	cmp	r5, r3
    5656:	d220      	bcs.n	569a <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5658:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    565c:	bf14      	ite	ne
    565e:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    5662:	69e3      	ldreq	r3, [r4, #28]
    5664:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5666:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    566a:	b175      	cbz	r5, 568a <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    566c:	464a      	mov	r2, r9
    566e:	69a1      	ldr	r1, [r4, #24]
    5670:	6a20      	ldr	r0, [r4, #32]
    5672:	f001 fcdf 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5676:	3d01      	subs	r5, #1
    5678:	2800      	cmp	r0, #0
    567a:	dcf6      	bgt.n	566a <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    567c:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    5680:	2000      	movs	r0, #0
}
    5682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    5686:	2300      	movs	r3, #0
    5688:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    568a:	6026      	str	r6, [r4, #0]
    568c:	6067      	str	r7, [r4, #4]
  return true;
    568e:	2001      	movs	r0, #1
    5690:	e7f7      	b.n	5682 <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    5692:	69e3      	ldr	r3, [r4, #28]
    5694:	442b      	add	r3, r5
    5696:	61a3      	str	r3, [r4, #24]
    goto done;
    5698:	e7f7      	b.n	568a <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    569a:	1aed      	subs	r5, r5, r3
    569c:	e7e3      	b.n	5666 <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    569e:	2001      	movs	r0, #1
    56a0:	e7ef      	b.n	5682 <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

000056a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    56a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a8:	b08f      	sub	sp, #60	; 0x3c
    56aa:	4607      	mov	r7, r0
    56ac:	9302      	str	r3, [sp, #8]
    56ae:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    56b2:	f1bb 0f00 	cmp.w	fp, #0
    56b6:	d10e      	bne.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    56b8:	460d      	mov	r5, r1
    56ba:	4691      	mov	r9, r2
    56bc:	461a      	mov	r2, r3
    56be:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    56c2:	f013 0f50 	tst.w	r3, #80	; 0x50
    56c6:	d006      	beq.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    56c8:	f002 0303 	and.w	r3, r2, #3
    56cc:	2b01      	cmp	r3, #1
    56ce:	d02b      	beq.n	5728 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    56d0:	2b02      	cmp	r3, #2
    56d2:	d02b      	beq.n	572c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    56d4:	b143      	cbz	r3, 56e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    56d6:	2600      	movs	r6, #0
    56d8:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    56dc:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    56e0:	4630      	mov	r0, r6
    56e2:	b00f      	add	sp, #60	; 0x3c
    56e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    56e8:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    56ea:	9a02      	ldr	r2, [sp, #8]
    56ec:	f002 0208 	and.w	r2, r2, #8
    56f0:	4313      	orrs	r3, r2
    56f2:	9303      	str	r3, [sp, #12]
  if (fname) {
    56f4:	f1b9 0f00 	cmp.w	r9, #0
    56f8:	d01a      	beq.n	5730 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    56fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
    56fe:	f103 080e 	add.w	r8, r3, #14
    5702:	4bae      	ldr	r3, [pc, #696]	; (59bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    5704:	fba3 3808 	umull	r3, r8, r3, r8
    5708:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    570c:	f108 0802 	add.w	r8, r8, #2
    5710:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    5714:	2200      	movs	r2, #0
    5716:	2300      	movs	r3, #0
    5718:	4628      	mov	r0, r5
    571a:	f7ff ff50 	bl	55be <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    571e:	465c      	mov	r4, fp
    5720:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5722:	f04f 0a20 	mov.w	sl, #32
    5726:	e00c      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5728:	2302      	movs	r3, #2
    572a:	e7de      	b.n	56ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    572c:	2303      	movs	r3, #3
    572e:	e7dc      	b.n	56ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    5730:	f04f 0803 	mov.w	r8, #3
    5734:	e7f3      	b.n	571e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    5736:	461e      	mov	r6, r3
    5738:	e003      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    573a:	461e      	mov	r6, r3
    573c:	e001      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    573e:	b1cb      	cbz	r3, 5774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    5740:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5742:	4652      	mov	r2, sl
    5744:	a906      	add	r1, sp, #24
    5746:	4628      	mov	r0, r5
    5748:	f7ff fe58 	bl	53fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    574c:	b1a8      	cbz	r0, 577a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    574e:	2820      	cmp	r0, #32
    5750:	d1c1      	bne.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    5752:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5756:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    575a:	2a00      	cmp	r2, #0
    575c:	db20      	blt.n	57a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    575e:	b924      	cbnz	r4, 576a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5760:	682a      	ldr	r2, [r5, #0]
    5762:	3a20      	subs	r2, #32
    5764:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5766:	69aa      	ldr	r2, [r5, #24]
    5768:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    576a:	4544      	cmp	r4, r8
    576c:	d2e7      	bcs.n	573e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    576e:	3401      	adds	r4, #1
    5770:	b2e4      	uxtb	r4, r4
    5772:	e7e4      	b.n	573e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    5774:	f1b9 0f00 	cmp.w	r9, #0
    5778:	d0ad      	beq.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    577a:	9b02      	ldr	r3, [sp, #8]
    577c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5780:	d0a9      	beq.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5782:	9b03      	ldr	r3, [sp, #12]
    5784:	f013 0f02 	tst.w	r3, #2
    5788:	d0a5      	beq.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    578a:	f1b9 0f00 	cmp.w	r9, #0
    578e:	d0a2      	beq.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    5790:	4544      	cmp	r4, r8
    5792:	f080 80cd 	bcs.w	5930 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    5796:	2620      	movs	r6, #32
    5798:	f8dd a004 	ldr.w	sl, [sp, #4]
    579c:	46bb      	mov	fp, r7
    579e:	e0b2      	b.n	5906 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    57a0:	bb3e      	cbnz	r6, 57f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    57a2:	4544      	cmp	r4, r8
    57a4:	bf38      	it	cc
    57a6:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    57a8:	2b85      	cmp	r3, #133	; 0x85
    57aa:	d1ca      	bne.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    57ac:	2238      	movs	r2, #56	; 0x38
    57ae:	2100      	movs	r1, #0
    57b0:	4638      	mov	r0, r7
    57b2:	f00c f83b 	bl	1182c <memset>
      m_setCount = dirFile->setCount;
    57b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    57ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    57be:	f89d 201c 	ldrb.w	r2, [sp, #28]
    57c2:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    57c6:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    57ca:	bf08      	it	eq
    57cc:	f043 0308 	orreq.w	r3, r3, #8
    57d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    57d4:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    57d6:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    57d8:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    57da:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    57dc:	682b      	ldr	r3, [r5, #0]
    57de:	3b20      	subs	r3, #32
    57e0:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    57e2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    57e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    57ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    57ee:	2601      	movs	r6, #1
    57f0:	e7a7      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    57f2:	2bc0      	cmp	r3, #192	; 0xc0
    57f4:	d003      	beq.n	57fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    57f6:	2bc1      	cmp	r3, #193	; 0xc1
    57f8:	d033      	beq.n	5862 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    57fa:	2600      	movs	r6, #0
    57fc:	e7a1      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    57fe:	9a03      	ldr	r2, [sp, #12]
    5800:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5804:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5808:	f013 0f02 	tst.w	r3, #2
    580c:	d003      	beq.n	5816 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    580e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    5812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    5816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    581a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    581e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5820:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    5826:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    582a:	f1b9 0f00 	cmp.w	r9, #0
    582e:	d02e      	beq.n	588e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5830:	f8d9 3000 	ldr.w	r3, [r9]
    5834:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5838:	f04f 0300 	mov.w	r3, #0
    583c:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    5840:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5844:	f8d9 2010 	ldr.w	r2, [r9, #16]
    5848:	429a      	cmp	r2, r3
    584a:	d001      	beq.n	5850 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    584c:	2600      	movs	r6, #0
    584e:	e778      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    5850:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    5854:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5858:	429e      	cmp	r6, r3
    585a:	bf14      	ite	ne
    585c:	2600      	movne	r6, #0
    585e:	2601      	moveq	r6, #1
    5860:	e76f      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    5862:	464a      	mov	r2, r9
    5864:	a906      	add	r1, sp, #24
    5866:	4638      	mov	r0, r7
    5868:	f001 fa4c 	bl	6d04 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    586c:	4603      	mov	r3, r0
    586e:	2800      	cmp	r0, #0
    5870:	f43f af61 	beq.w	5736 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    5874:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    5878:	2a00      	cmp	r2, #0
    587a:	f47f af5e 	bne.w	573a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    587e:	f8d9 1008 	ldr.w	r1, [r9, #8]
    5882:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5886:	4291      	cmp	r1, r2
    5888:	d001      	beq.n	588e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    588a:	461e      	mov	r6, r3
    588c:	e759      	b.n	5742 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    588e:	9b02      	ldr	r3, [sp, #8]
    5890:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5894:	f47f af1f 	bne.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5898:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    589c:	d105      	bne.n	58aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    589e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    58a2:	f013 0f02 	tst.w	r3, #2
    58a6:	f000 80d5 	beq.w	5a54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    58aa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    58ae:	f013 0f11 	tst.w	r3, #17
    58b2:	f47f af10 	bne.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    58b6:	9b02      	ldr	r3, [sp, #8]
    58b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    58bc:	f000 80cf 	beq.w	5a5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    58c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    58c4:	f013 0f02 	tst.w	r3, #2
    58c8:	f43f af05 	beq.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    58cc:	2200      	movs	r2, #0
    58ce:	2300      	movs	r3, #0
    58d0:	4638      	mov	r0, r7
    58d2:	f7ff fe74 	bl	55be <ExFatFile::seekSet(unsigned long long)>
    58d6:	2800      	cmp	r0, #0
    58d8:	f43f aefd 	beq.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    58dc:	4638      	mov	r0, r7
    58de:	f000 fd24 	bl	632a <ExFatFile::truncate()>
    if (!truncate(0)) {
    58e2:	4606      	mov	r6, r0
    58e4:	2800      	cmp	r0, #0
    58e6:	f47f aefb 	bne.w	56e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    58ea:	e6f4      	b.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    58ec:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    58ee:	4628      	mov	r0, r5
    58f0:	f000 fb08 	bl	5f04 <ExFatFile::addDirCluster()>
    58f4:	b908      	cbnz	r0, 58fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    58f6:	465f      	mov	r7, fp
    58f8:	e6ed      	b.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    58fa:	61af      	str	r7, [r5, #24]
      continue;
    58fc:	e001      	b.n	5902 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    58fe:	3401      	adds	r4, #1
    5900:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    5902:	4544      	cmp	r4, r8
    5904:	d211      	bcs.n	592a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    5906:	4632      	mov	r2, r6
    5908:	a906      	add	r1, sp, #24
    590a:	4628      	mov	r0, r5
    590c:	f7ff fd76 	bl	53fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5910:	2800      	cmp	r0, #0
    5912:	d0eb      	beq.n	58ec <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    5914:	2820      	cmp	r0, #32
    5916:	f040 809b 	bne.w	5a50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    591a:	2c00      	cmp	r4, #0
    591c:	d1ef      	bne.n	58fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    591e:	682b      	ldr	r3, [r5, #0]
    5920:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    5924:	69ab      	ldr	r3, [r5, #24]
    5926:	9300      	str	r3, [sp, #0]
    5928:	e7e9      	b.n	58fe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    592a:	f8cd a004 	str.w	sl, [sp, #4]
    592e:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5930:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    5934:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    5938:	2238      	movs	r2, #56	; 0x38
    593a:	2100      	movs	r1, #0
    593c:	4638      	mov	r0, r7
    593e:	f00b ff75 	bl	1182c <memset>
  ExFatVolume* volume() const {return m_vol;}
    5942:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    5944:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    5946:	2308      	movs	r3, #8
    5948:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    594c:	9b00      	ldr	r3, [sp, #0]
    594e:	627b      	str	r3, [r7, #36]	; 0x24
    5950:	9b01      	ldr	r3, [sp, #4]
    5952:	62bb      	str	r3, [r7, #40]	; 0x28
    5954:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    5958:	f8d9 3000 	ldr.w	r3, [r9]
    595c:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5960:	2300      	movs	r3, #0
    5962:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5966:	f1b8 0f00 	cmp.w	r8, #0
    596a:	d06c      	beq.n	5a46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    596c:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    596e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    5972:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    5976:	f8df b048 	ldr.w	fp, [pc, #72]	; 59c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    597a:	e036      	b.n	59ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    597c:	2385      	movs	r3, #133	; 0x85
    597e:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    5980:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5984:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    5988:	f8db 3000 	ldr.w	r3, [fp]
    598c:	b17b      	cbz	r3, 59ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    598e:	f10d 0213 	add.w	r2, sp, #19
    5992:	f10d 0116 	add.w	r1, sp, #22
    5996:	a805      	add	r0, sp, #20
    5998:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    599a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    599e:	8163      	strh	r3, [r4, #10]
    59a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59a4:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    59a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59aa:	7523      	strb	r3, [r4, #20]
    59ac:	e019      	b.n	59e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    59ae:	f245 6321 	movw	r3, #22049	; 0x5621
    59b2:	8163      	strh	r3, [r4, #10]
    59b4:	81e3      	strh	r3, [r4, #14]
    59b6:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    59b8:	e013      	b.n	59e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    59ba:	bf00      	nop
    59bc:	88888889 	.word	0x88888889
    59c0:	20004b64 	.word	0x20004b64
      dirStream->type = EXFAT_TYPE_STREAM;
    59c4:	23c0      	movs	r3, #192	; 0xc0
    59c6:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    59c8:	2301      	movs	r3, #1
    59ca:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    59cc:	9b03      	ldr	r3, [sp, #12]
    59ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
    59d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    59d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    59da:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    59dc:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    59e0:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    59e2:	3601      	adds	r6, #1
    59e4:	b2f3      	uxtb	r3, r6
    59e6:	4598      	cmp	r8, r3
    59e8:	d92d      	bls.n	5a46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    59ea:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    59ec:	2201      	movs	r2, #1
    59ee:	4629      	mov	r1, r5
    59f0:	4638      	mov	r0, r7
    59f2:	f7ff fc51 	bl	5298 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    59f6:	4604      	mov	r4, r0
    59f8:	2800      	cmp	r0, #0
    59fa:	f43f ae6c 	beq.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    59fe:	f990 3000 	ldrsb.w	r3, [r0]
    5a02:	2b00      	cmp	r3, #0
    5a04:	f6ff ae67 	blt.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    5a08:	2220      	movs	r2, #32
    5a0a:	2100      	movs	r1, #0
    5a0c:	f00b ff0e 	bl	1182c <memset>
    if (i == 0) {
    5a10:	2d00      	cmp	r5, #0
    5a12:	d0b3      	beq.n	597c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    5a14:	2d01      	cmp	r5, #1
    5a16:	d0d5      	beq.n	59c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    5a18:	23c1      	movs	r3, #193	; 0xc1
    5a1a:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    5a1c:	4625      	mov	r5, r4
    5a1e:	341e      	adds	r4, #30
    5a20:	e006      	b.n	5a30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    5a22:	4648      	mov	r0, r9
    5a24:	f005 ff10 	bl	b848 <FsName::get16()>
    5a28:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    5a2c:	42ac      	cmp	r4, r5
    5a2e:	d0d8      	beq.n	59e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    5a30:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d1f4      	bne.n	5a22 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5a38:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5a3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    5a40:	429a      	cmp	r2, r3
    5a42:	d1ee      	bne.n	5a22 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5a44:	e7cd      	b.n	59e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    5a46:	4638      	mov	r0, r7
    5a48:	f000 fa2e 	bl	5ea8 <ExFatFile::sync()>
    5a4c:	4606      	mov	r6, r0
    5a4e:	e647      	b.n	56e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5a50:	465f      	mov	r7, fp
    5a52:	e640      	b.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5a54:	9b02      	ldr	r3, [sp, #8]
    5a56:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5a5a:	f47f ae3c 	bne.w	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5a5e:	9b02      	ldr	r3, [sp, #8]
    5a60:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    5a64:	f43f ae3c 	beq.w	56e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5a68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5a6c:	4638      	mov	r0, r7
    5a6e:	f7ff fda6 	bl	55be <ExFatFile::seekSet(unsigned long long)>
    5a72:	4606      	mov	r6, r0
    5a74:	2800      	cmp	r0, #0
    5a76:	f47f ae33 	bne.w	56e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5a7a:	e62c      	b.n	56d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

00005a7c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a80:	b096      	sub	sp, #88	; 0x58
    5a82:	9201      	str	r2, [sp, #4]
    5a84:	461f      	mov	r7, r3
  ExFatFile() {}
    5a86:	2300      	movs	r3, #0
    5a88:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    5a8c:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    5a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    5a94:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5a98:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d159      	bne.n	5b54 <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    5aa0:	4604      	mov	r4, r0
    5aa2:	460d      	mov	r5, r1
    5aa4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5aa8:	f013 0f50 	tst.w	r3, #80	; 0x50
    5aac:	d057      	beq.n	5b5e <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    5aae:	4613      	mov	r3, r2
    5ab0:	7812      	ldrb	r2, [r2, #0]
    5ab2:	2a2f      	cmp	r2, #47	; 0x2f
    5ab4:	d001      	beq.n	5aba <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5ab6:	2600      	movs	r6, #0
    5ab8:	e02c      	b.n	5b14 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    5aba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5abe:	2a2f      	cmp	r2, #47	; 0x2f
    5ac0:	d0fb      	beq.n	5aba <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5ac2:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    5ac4:	b92a      	cbnz	r2, 5ad2 <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    5ac6:	6a29      	ldr	r1, [r5, #32]
    5ac8:	4620      	mov	r0, r4
    5aca:	f7ff fc2f 	bl	532c <ExFatFile::openRoot(ExFatVolume*)>
    5ace:	4603      	mov	r3, r0
    5ad0:	e041      	b.n	5b56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5ad2:	6a29      	ldr	r1, [r5, #32]
    5ad4:	a808      	add	r0, sp, #32
    5ad6:	f7ff fc29 	bl	532c <ExFatFile::openRoot(ExFatVolume*)>
    5ada:	4603      	mov	r3, r0
    5adc:	2800      	cmp	r0, #0
    5ade:	d03a      	beq.n	5b56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    5ae0:	ad08      	add	r5, sp, #32
    5ae2:	e7e8      	b.n	5ab6 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    5ae4:	46ae      	mov	lr, r5
    5ae6:	f8dc 0000 	ldr.w	r0, [ip]
    5aea:	f8dc 1004 	ldr.w	r1, [ip, #4]
    5aee:	f8dc 2008 	ldr.w	r2, [ip, #8]
    5af2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    5af6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5afa:	f10c 0c10 	add.w	ip, ip, #16
    5afe:	4675      	mov	r5, lr
    5b00:	45c4      	cmp	ip, r8
    5b02:	d1ef      	bne.n	5ae4 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    5b04:	f8dc 0000 	ldr.w	r0, [ip]
    5b08:	f8ce 0000 	str.w	r0, [lr]
    close();
    5b0c:	4620      	mov	r0, r4
    5b0e:	f7ff fbdf 	bl	52d0 <ExFatFile::close()>
    dirFile = &tmpDir;
    5b12:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    5b14:	ab01      	add	r3, sp, #4
    5b16:	aa02      	add	r2, sp, #8
    5b18:	9901      	ldr	r1, [sp, #4]
    5b1a:	4620      	mov	r0, r4
    5b1c:	f7ff fc1a 	bl	5354 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5b20:	4603      	mov	r3, r0
    5b22:	b1c0      	cbz	r0, 5b56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    5b24:	9b01      	ldr	r3, [sp, #4]
    5b26:	781b      	ldrb	r3, [r3, #0]
    5b28:	b163      	cbz	r3, 5b44 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5b2a:	4633      	mov	r3, r6
    5b2c:	aa02      	add	r2, sp, #8
    5b2e:	4629      	mov	r1, r5
    5b30:	4620      	mov	r0, r4
    5b32:	f7ff fdb7 	bl	56a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5b36:	4603      	mov	r3, r0
    5b38:	b168      	cbz	r0, 5b56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    5b3a:	46a4      	mov	ip, r4
    5b3c:	ad08      	add	r5, sp, #32
    5b3e:	f104 0830 	add.w	r8, r4, #48	; 0x30
    5b42:	e7cf      	b.n	5ae4 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    5b44:	463b      	mov	r3, r7
    5b46:	aa02      	add	r2, sp, #8
    5b48:	4629      	mov	r1, r5
    5b4a:	4620      	mov	r0, r4
    5b4c:	f7ff fdaa 	bl	56a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5b50:	4603      	mov	r3, r0
    5b52:	e000      	b.n	5b56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    5b54:	2300      	movs	r3, #0
}
    5b56:	4618      	mov	r0, r3
    5b58:	b016      	add	sp, #88	; 0x58
    5b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    5b5e:	2300      	movs	r3, #0
    5b60:	e7f9      	b.n	5b56 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

00005b62 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5b62:	b129      	cbz	r1, 5b70 <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    5b64:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    5b66:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5b6a:	f7ff ff87 	bl	5a7c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5b6e:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    5b70:	2000      	movs	r0, #0
}
    5b72:	4770      	bx	lr

00005b74 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5b74:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5b76:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5b7a:	b97b      	cbnz	r3, 5b9c <ExFatFile::openNext(ExFatFile*, int)+0x28>
    5b7c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5b80:	f013 0f50 	tst.w	r3, #80	; 0x50
    5b84:	d00c      	beq.n	5ba0 <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    5b86:	680b      	ldr	r3, [r1, #0]
    5b88:	f013 0f1f 	tst.w	r3, #31
    5b8c:	d001      	beq.n	5b92 <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    5b8e:	2000      	movs	r0, #0
    5b90:	e005      	b.n	5b9e <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    5b92:	4613      	mov	r3, r2
    5b94:	2200      	movs	r2, #0
    5b96:	f7ff fd85 	bl	56a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5b9a:	e000      	b.n	5b9e <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    5b9c:	2000      	movs	r0, #0
}
    5b9e:	bd08      	pop	{r3, pc}
  return false;
    5ba0:	2000      	movs	r0, #0
    5ba2:	e7fc      	b.n	5b9e <ExFatFile::openNext(ExFatFile*, int)+0x2a>

00005ba4 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    5ba4:	b410      	push	{r4}
    5ba6:	4684      	mov	ip, r0
    5ba8:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5baa:	f89c 4000 	ldrb.w	r4, [ip]
    5bae:	2c85      	cmp	r4, #133	; 0x85
    5bb0:	bf14      	ite	ne
    5bb2:	2400      	movne	r4, #0
    5bb4:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5bb6:	2200      	movs	r2, #0
    5bb8:	e000      	b.n	5bbc <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    5bba:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5bbc:	03c3      	lsls	r3, r0, #15
    5bbe:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    5bc2:	f81c 1002 	ldrb.w	r1, [ip, r2]
    5bc6:	fa11 f383 	uxtah	r3, r1, r3
    5bca:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5bcc:	2a01      	cmp	r2, #1
    5bce:	d101      	bne.n	5bd4 <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    5bd0:	2c00      	cmp	r4, #0
    5bd2:	d1f2      	bne.n	5bba <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    5bd4:	3201      	adds	r2, #1
    5bd6:	2a1f      	cmp	r2, #31
    5bd8:	d9f0      	bls.n	5bbc <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
  }
  return checksum;
}
    5bda:	f85d 4b04 	ldr.w	r4, [sp], #4
    5bde:	4770      	bx	lr

00005be0 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    5be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be2:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5be4:	6a00      	ldr	r0, [r0, #32]
    5be6:	69a1      	ldr	r1, [r4, #24]
    5be8:	b101      	cbz	r1, 5bec <ExFatFile::addCluster()+0xc>
    5bea:	3101      	adds	r1, #1
    5bec:	2201      	movs	r2, #1
    5bee:	f001 f943 	bl	6e78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    5bf2:	4605      	mov	r5, r0
  if (find < 2) {
    5bf4:	2801      	cmp	r0, #1
    5bf6:	d93c      	bls.n	5c72 <ExFatFile::addCluster()+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    5bf8:	2301      	movs	r3, #1
    5bfa:	461a      	mov	r2, r3
    5bfc:	4601      	mov	r1, r0
    5bfe:	6a20      	ldr	r0, [r4, #32]
    5c00:	f001 f993 	bl	6f2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5c04:	4607      	mov	r7, r0
    5c06:	2800      	cmp	r0, #0
    5c08:	d034      	beq.n	5c74 <ExFatFile::addCluster()+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    5c0a:	69a3      	ldr	r3, [r4, #24]
    5c0c:	b1bb      	cbz	r3, 5c3e <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5c0e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    5c12:	f012 0f40 	tst.w	r2, #64	; 0x40
    5c16:	d01a      	beq.n	5c4e <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    5c18:	3301      	adds	r3, #1
    5c1a:	42ab      	cmp	r3, r5
    5c1c:	d015      	beq.n	5c4a <ExFatFile::addCluster()+0x6a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    5c22:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5c26:	69e1      	ldr	r1, [r4, #28]
    5c28:	69a3      	ldr	r3, [r4, #24]
    5c2a:	428b      	cmp	r3, r1
    5c2c:	d90f      	bls.n	5c4e <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    5c2e:	1c4e      	adds	r6, r1, #1
    5c30:	4632      	mov	r2, r6
    5c32:	6a20      	ldr	r0, [r4, #32]
    5c34:	f001 fa5d 	bl	70f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5c38:	b1f0      	cbz	r0, 5c78 <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5c3a:	4631      	mov	r1, r6
    5c3c:	e7f4      	b.n	5c28 <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5c3e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5c46:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    5c4a:	61a5      	str	r5, [r4, #24]
  return true;
    5c4c:	e012      	b.n	5c74 <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    5c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c52:	4629      	mov	r1, r5
    5c54:	6a20      	ldr	r0, [r4, #32]
    5c56:	f001 fa4c 	bl	70f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5c5a:	b178      	cbz	r0, 5c7c <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    5c5c:	69a1      	ldr	r1, [r4, #24]
    5c5e:	2900      	cmp	r1, #0
    5c60:	d0f3      	beq.n	5c4a <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    5c62:	462a      	mov	r2, r5
    5c64:	6a20      	ldr	r0, [r4, #32]
    5c66:	f001 fa44 	bl	70f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5c6a:	2800      	cmp	r0, #0
    5c6c:	d1ed      	bne.n	5c4a <ExFatFile::addCluster()+0x6a>

 fail:
  return false;
    5c6e:	4607      	mov	r7, r0
    5c70:	e000      	b.n	5c74 <ExFatFile::addCluster()+0x94>
    5c72:	2700      	movs	r7, #0
}
    5c74:	4638      	mov	r0, r7
    5c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    5c78:	4607      	mov	r7, r0
    5c7a:	e7fb      	b.n	5c74 <ExFatFile::addCluster()+0x94>
    5c7c:	4607      	mov	r7, r0
    5c7e:	e7f9      	b.n	5c74 <ExFatFile::addCluster()+0x94>

00005c80 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5c80:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    5c84:	f013 0f02 	tst.w	r3, #2
    5c88:	d04e      	beq.n	5d28 <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    5c8a:	b570      	push	{r4, r5, r6, lr}
    5c8c:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    5c8e:	69c1      	ldr	r1, [r0, #28]
    5c90:	b1e9      	cbz	r1, 5cce <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    5c92:	f013 0f40 	tst.w	r3, #64	; 0x40
    5c96:	d041      	beq.n	5d1c <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5c98:	6a00      	ldr	r0, [r0, #32]
    5c9a:	68aa      	ldr	r2, [r5, #8]
    5c9c:	68ec      	ldr	r4, [r5, #12]
    5c9e:	3a01      	subs	r2, #1
    5ca0:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5ca4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    5ca8:	3309      	adds	r3, #9
    5caa:	b2db      	uxtb	r3, r3
    5cac:	f1c3 0c20 	rsb	ip, r3, #32
    5cb0:	f1a3 0620 	sub.w	r6, r3, #32
    5cb4:	40da      	lsrs	r2, r3
    5cb6:	fa04 fc0c 	lsl.w	ip, r4, ip
    5cba:	ea42 020c 	orr.w	r2, r2, ip
    5cbe:	fa24 f606 	lsr.w	r6, r4, r6
    5cc2:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5cc4:	2300      	movs	r3, #0
    5cc6:	3201      	adds	r2, #1
    5cc8:	f001 f92f 	bl	6f2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5ccc:	b378      	cbz	r0, 5d2e <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    5cce:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    5cd0:	2601      	movs	r6, #1
    5cd2:	4632      	mov	r2, r6
    5cd4:	b2e1      	uxtb	r1, r4
    5cd6:	4628      	mov	r0, r5
    5cd8:	f7ff fade 	bl	5298 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5cdc:	b330      	cbz	r0, 5d2c <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    5cde:	7803      	ldrb	r3, [r0, #0]
    5ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ce4:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5ce6:	3401      	adds	r4, #1
    5ce8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    5cec:	b2e3      	uxtb	r3, r4
    5cee:	429a      	cmp	r2, r3
    5cf0:	d2ef      	bcs.n	5cd2 <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    5cf2:	2300      	movs	r3, #0
    5cf4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    5cf8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    5cfc:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5cfe:	4620      	mov	r0, r4
    5d00:	f005 fd3c 	bl	b77c <FsCache::sync()>
    5d04:	b198      	cbz	r0, 5d2e <ExFatFile::remove()+0xae>
    5d06:	f504 7004 	add.w	r0, r4, #528	; 0x210
    5d0a:	f005 fd37 	bl	b77c <FsCache::sync()>
    5d0e:	b170      	cbz	r0, 5d2e <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5d10:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    5d14:	6803      	ldr	r3, [r0, #0]
    5d16:	6a1b      	ldr	r3, [r3, #32]
    5d18:	4798      	blx	r3
    5d1a:	e008      	b.n	5d2e <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    5d1c:	6a00      	ldr	r0, [r0, #32]
    5d1e:	f001 fa08 	bl	7132 <ExFatPartition::freeChain(unsigned long)>
    5d22:	2800      	cmp	r0, #0
    5d24:	d1d3      	bne.n	5cce <ExFatFile::remove()+0x4e>
    5d26:	e002      	b.n	5d2e <ExFatFile::remove()+0xae>

 fail:
  return false;
    5d28:	2000      	movs	r0, #0
}
    5d2a:	4770      	bx	lr
  return false;
    5d2c:	2000      	movs	r0, #0
}
    5d2e:	bd70      	pop	{r4, r5, r6, pc}

00005d30 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    5d30:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5d34:	f013 0f10 	tst.w	r3, #16
    5d38:	d101      	bne.n	5d3e <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    5d3a:	2000      	movs	r0, #0
}
    5d3c:	4770      	bx	lr
bool ExFatFile::rmdir() {
    5d3e:	b530      	push	{r4, r5, lr}
    5d40:	b089      	sub	sp, #36	; 0x24
    5d42:	4604      	mov	r4, r0
    seekSet(0);
    5d44:	2200      	movs	r2, #0
    5d46:	2300      	movs	r3, #0
    5d48:	f7ff fc39 	bl	55be <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    5d4c:	2520      	movs	r5, #32
    5d4e:	462a      	mov	r2, r5
    5d50:	4669      	mov	r1, sp
    5d52:	4620      	mov	r0, r4
    5d54:	f7ff fb52 	bl	53fc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5d58:	b148      	cbz	r0, 5d6e <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    5d5a:	2820      	cmp	r0, #32
    5d5c:	d115      	bne.n	5d8a <ExFatFile::rmdir()+0x5a>
    5d5e:	f89d 2000 	ldrb.w	r2, [sp]
    5d62:	f99d 3000 	ldrsb.w	r3, [sp]
    5d66:	2b00      	cmp	r3, #0
    5d68:	db11      	blt.n	5d8e <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    5d6a:	2a00      	cmp	r2, #0
    5d6c:	d1ef      	bne.n	5d4e <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    5d6e:	2308      	movs	r3, #8
    5d70:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    5d74:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5d78:	f043 0302 	orr.w	r3, r3, #2
    5d7c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    5d80:	4620      	mov	r0, r4
    5d82:	f7ff ff7d 	bl	5c80 <ExFatFile::remove()>
}
    5d86:	b009      	add	sp, #36	; 0x24
    5d88:	bd30      	pop	{r4, r5, pc}
  return false;
    5d8a:	2000      	movs	r0, #0
    5d8c:	e7fb      	b.n	5d86 <ExFatFile::rmdir()+0x56>
    5d8e:	2000      	movs	r0, #0
    5d90:	e7f9      	b.n	5d86 <ExFatFile::rmdir()+0x56>
	...

00005d94 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d98:	b083      	sub	sp, #12
    5d9a:	4604      	mov	r4, r0
    5d9c:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5d9e:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5da0:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5da2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 5ea4 <ExFatFile::syncDir()+0x110>
    5da6:	e02a      	b.n	5dfe <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5da8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5dac:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5db0:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5db2:	f8d9 3000 	ldr.w	r3, [r9]
    5db6:	b183      	cbz	r3, 5dda <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5db8:	f10d 0203 	add.w	r2, sp, #3
    5dbc:	f10d 0106 	add.w	r1, sp, #6
    5dc0:	a801      	add	r0, sp, #4
    5dc2:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    5dc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5dc8:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    5dca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5dce:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    5dd0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5dd4:	81eb      	strh	r3, [r5, #14]
    5dd6:	822a      	strh	r2, [r5, #16]
    5dd8:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    5dda:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    5ddc:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5de0:	f043 0301 	orr.w	r3, r3, #1
    5de4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    5de8:	4639      	mov	r1, r7
    5dea:	4628      	mov	r0, r5
    5dec:	f7ff feda 	bl	5ba4 <exFatDirChecksum(unsigned char const*, unsigned short)>
    5df0:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5df2:	3601      	adds	r6, #1
    5df4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    5df8:	b2f3      	uxtb	r3, r6
    5dfa:	429a      	cmp	r2, r3
    5dfc:	d334      	bcc.n	5e68 <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5dfe:	4642      	mov	r2, r8
    5e00:	b2f1      	uxtb	r1, r6
    5e02:	4620      	mov	r0, r4
    5e04:	f7ff fa48 	bl	5298 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5e08:	4605      	mov	r5, r0
    5e0a:	b130      	cbz	r0, 5e1a <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    5e0c:	7803      	ldrb	r3, [r0, #0]
    5e0e:	2bc0      	cmp	r3, #192	; 0xc0
    5e10:	d00d      	beq.n	5e2e <ExFatFile::syncDir()+0x9a>
    5e12:	2bc1      	cmp	r3, #193	; 0xc1
    5e14:	d0e8      	beq.n	5de8 <ExFatFile::syncDir()+0x54>
    5e16:	2b85      	cmp	r3, #133	; 0x85
    5e18:	d0c6      	beq.n	5da8 <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5e1a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5e1e:	f043 0301 	orr.w	r3, r3, #1
    5e22:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5e26:	2000      	movs	r0, #0
}
    5e28:	b003      	add	sp, #12
    5e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    5e2e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5e32:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5e36:	7843      	ldrb	r3, [r0, #1]
    5e38:	bf14      	ite	ne
    5e3a:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    5e3e:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    5e42:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    5e44:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5e48:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    5e4c:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5e4e:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    5e50:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    5e54:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    5e58:	6a22      	ldr	r2, [r4, #32]
    5e5a:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5e5e:	f043 0301 	orr.w	r3, r3, #1
    5e62:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    5e66:	e7bf      	b.n	5de8 <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5e68:	2201      	movs	r2, #1
    5e6a:	f104 0124 	add.w	r1, r4, #36	; 0x24
    5e6e:	6a20      	ldr	r0, [r4, #32]
    5e70:	f001 f8c3 	bl	6ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5e74:	2800      	cmp	r0, #0
    5e76:	d0d0      	beq.n	5e1a <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5e78:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    5e7a:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5e7c:	4628      	mov	r0, r5
    5e7e:	f005 fc7d 	bl	b77c <FsCache::sync()>
    5e82:	2800      	cmp	r0, #0
    5e84:	d0c9      	beq.n	5e1a <ExFatFile::syncDir()+0x86>
    5e86:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5e8a:	f005 fc77 	bl	b77c <FsCache::sync()>
    5e8e:	2800      	cmp	r0, #0
    5e90:	d0c3      	beq.n	5e1a <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    5e92:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    5e96:	6803      	ldr	r3, [r0, #0]
    5e98:	6a1b      	ldr	r3, [r3, #32]
    5e9a:	4798      	blx	r3
    5e9c:	2800      	cmp	r0, #0
    5e9e:	d1c3      	bne.n	5e28 <ExFatFile::syncDir()+0x94>
    5ea0:	e7bb      	b.n	5e1a <ExFatFile::syncDir()+0x86>
    5ea2:	bf00      	nop
    5ea4:	20004b64 	.word	0x20004b64

00005ea8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    5ea8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5eaa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5eae:	b33b      	cbz	r3, 5f00 <ExFatFile::sync()+0x58>
    5eb0:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5eb2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    5eb6:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    5eba:	2a00      	cmp	r2, #0
    5ebc:	db0c      	blt.n	5ed8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    5ebe:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5ec0:	4628      	mov	r0, r5
    5ec2:	f005 fc5b 	bl	b77c <FsCache::sync()>
    5ec6:	b970      	cbnz	r0, 5ee6 <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    5ec8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5ecc:	f043 0301 	orr.w	r3, r3, #1
    5ed0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5ed4:	2000      	movs	r0, #0
    5ed6:	e014      	b.n	5f02 <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5edc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    5ee0:	f7ff ff58 	bl	5d94 <ExFatFile::syncDir()>
    5ee4:	e00d      	b.n	5f02 <ExFatFile::sync()+0x5a>
    5ee6:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5eea:	f005 fc47 	bl	b77c <FsCache::sync()>
    5eee:	2800      	cmp	r0, #0
    5ef0:	d0ea      	beq.n	5ec8 <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    5ef2:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    5ef6:	6803      	ldr	r3, [r0, #0]
    5ef8:	6a1b      	ldr	r3, [r3, #32]
    5efa:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    5efc:	b908      	cbnz	r0, 5f02 <ExFatFile::sync()+0x5a>
    5efe:	e7e3      	b.n	5ec8 <ExFatFile::sync()+0x20>
    return true;
    5f00:	2001      	movs	r0, #1
}
    5f02:	bd38      	pop	{r3, r4, r5, pc}

00005f04 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    5f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5f08:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5f0a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5f0e:	f013 0f40 	tst.w	r3, #64	; 0x40
    5f12:	d10a      	bne.n	5f2a <ExFatFile::addDirCluster()+0x26>
    5f14:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    5f16:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    5f18:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    5f1c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    5f1e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    5f22:	d306      	bcc.n	5f32 <ExFatFile::addDirCluster()+0x2e>
  return false;
    5f24:	2000      	movs	r0, #0
}
    5f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5f2a:	6a00      	ldr	r0, [r0, #32]
    5f2c:	f001 f9f4 	bl	7318 <ExFatPartition::rootLength()>
    5f30:	e7f1      	b.n	5f16 <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    5f32:	4628      	mov	r0, r5
    5f34:	f7ff fe54 	bl	5be0 <ExFatFile::addCluster()>
    5f38:	2800      	cmp	r0, #0
    5f3a:	d0f4      	beq.n	5f26 <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    5f3c:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    5f3e:	69ae      	ldr	r6, [r5, #24]
    5f40:	3e02      	subs	r6, #2
    5f42:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    5f46:	409e      	lsls	r6, r3
    5f48:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    5f4c:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5f4e:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    5f50:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    5f52:	f44f 7900 	mov.w	r9, #512	; 0x200
    5f56:	46a0      	mov	r8, r4
    5f58:	463a      	mov	r2, r7
    5f5a:	1931      	adds	r1, r6, r4
    5f5c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5f60:	f005 fc33 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5f64:	b360      	cbz	r0, 5fc0 <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    5f66:	464a      	mov	r2, r9
    5f68:	4641      	mov	r1, r8
    5f6a:	f00b fc5f 	bl	1182c <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5f6e:	3401      	adds	r4, #1
    5f70:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5f72:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    5f76:	2301      	movs	r3, #1
    5f78:	4093      	lsls	r3, r2
    5f7a:	429c      	cmp	r4, r3
    5f7c:	d3ec      	bcc.n	5f58 <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    5f7e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    5f82:	f013 0f40 	tst.w	r3, #64	; 0x40
    5f86:	d117      	bne.n	5fb8 <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5f88:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    5f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5f90:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5f94:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    5f98:	68ab      	ldr	r3, [r5, #8]
    5f9a:	68ea      	ldr	r2, [r5, #12]
    5f9c:	185b      	adds	r3, r3, r1
    5f9e:	f142 0200 	adc.w	r2, r2, #0
    5fa2:	60ab      	str	r3, [r5, #8]
    5fa4:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    5fa6:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    5faa:	692b      	ldr	r3, [r5, #16]
    5fac:	696a      	ldr	r2, [r5, #20]
    5fae:	185b      	adds	r3, r3, r1
    5fb0:	f142 0200 	adc.w	r2, r2, #0
    5fb4:	612b      	str	r3, [r5, #16]
    5fb6:	616a      	str	r2, [r5, #20]
  return sync();
    5fb8:	4628      	mov	r0, r5
    5fba:	f7ff ff75 	bl	5ea8 <ExFatFile::sync()>
    5fbe:	e7b2      	b.n	5f26 <ExFatFile::addDirCluster()+0x22>
  return false;
    5fc0:	2000      	movs	r0, #0
    5fc2:	e7b0      	b.n	5f26 <ExFatFile::addDirCluster()+0x22>

00005fc4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    5fc4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5fc8:	f013 0f50 	tst.w	r3, #80	; 0x50
    5fcc:	d101      	bne.n	5fd2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    5fce:	2000      	movs	r0, #0
}
    5fd0:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5fd2:	b510      	push	{r4, lr}
    5fd4:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5fd6:	f640 2302 	movw	r3, #2562	; 0xa02
    5fda:	f7ff fb63 	bl	56a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5fde:	b900      	cbnz	r0, 5fe2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    5fe0:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    5fe2:	2310      	movs	r3, #16
    5fe4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    5fe8:	4620      	mov	r0, r4
    5fea:	f7ff ff8b 	bl	5f04 <ExFatFile::addDirCluster()>
    5fee:	2800      	cmp	r0, #0
    5ff0:	d0f6      	beq.n	5fe0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    5ff2:	69a3      	ldr	r3, [r4, #24]
    5ff4:	61e3      	str	r3, [r4, #28]
    5ff6:	2200      	movs	r2, #0
    5ff8:	2300      	movs	r3, #0
    5ffa:	4620      	mov	r0, r4
    5ffc:	f7ff fadf 	bl	55be <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6000:	23c1      	movs	r3, #193	; 0xc1
    6002:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6006:	4620      	mov	r0, r4
    6008:	f7ff ff4e 	bl	5ea8 <ExFatFile::sync()>
    600c:	e7e8      	b.n	5fe0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

0000600e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    600e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6012:	b096      	sub	sp, #88	; 0x58
    6014:	9201      	str	r2, [sp, #4]
    6016:	461e      	mov	r6, r3
    6018:	2300      	movs	r3, #0
    601a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    601e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6022:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    6026:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    602a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    602e:	2b00      	cmp	r3, #0
    6030:	d15a      	bne.n	60e8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    6032:	4604      	mov	r4, r0
    6034:	460d      	mov	r5, r1
    6036:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    603a:	f013 0f50 	tst.w	r3, #80	; 0x50
    603e:	d058      	beq.n	60f2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    6040:	4613      	mov	r3, r2
    6042:	7812      	ldrb	r2, [r2, #0]
    6044:	2a2f      	cmp	r2, #47	; 0x2f
    6046:	d001      	beq.n	604c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6048:	2700      	movs	r7, #0
    604a:	e029      	b.n	60a0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    604c:	3301      	adds	r3, #1
    604e:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    6050:	781a      	ldrb	r2, [r3, #0]
    6052:	2a2f      	cmp	r2, #47	; 0x2f
    6054:	d0fa      	beq.n	604c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6056:	6a29      	ldr	r1, [r5, #32]
    6058:	a802      	add	r0, sp, #8
    605a:	f7ff f967 	bl	532c <ExFatFile::openRoot(ExFatVolume*)>
    605e:	4603      	mov	r3, r0
    6060:	2800      	cmp	r0, #0
    6062:	d042      	beq.n	60ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    6064:	ad02      	add	r5, sp, #8
    6066:	e7ef      	b.n	6048 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    6068:	46a4      	mov	ip, r4
    606a:	ad02      	add	r5, sp, #8
    606c:	f104 0830 	add.w	r8, r4, #48	; 0x30
    6070:	46ae      	mov	lr, r5
    6072:	f8dc 0000 	ldr.w	r0, [ip]
    6076:	f8dc 1004 	ldr.w	r1, [ip, #4]
    607a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    607e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    6082:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6086:	f10c 0c10 	add.w	ip, ip, #16
    608a:	4675      	mov	r5, lr
    608c:	45c4      	cmp	ip, r8
    608e:	d1ef      	bne.n	6070 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    6090:	f8dc 0000 	ldr.w	r0, [ip]
    6094:	f8ce 0000 	str.w	r0, [lr]
    close();
    6098:	4620      	mov	r0, r4
    609a:	f7ff f919 	bl	52d0 <ExFatFile::close()>
    parent = &tmpDir;
    609e:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    60a0:	ab01      	add	r3, sp, #4
    60a2:	aa10      	add	r2, sp, #64	; 0x40
    60a4:	9901      	ldr	r1, [sp, #4]
    60a6:	4620      	mov	r0, r4
    60a8:	f7ff f954 	bl	5354 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    60ac:	4603      	mov	r3, r0
    60ae:	b1e0      	cbz	r0, 60ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    60b0:	9b01      	ldr	r3, [sp, #4]
    60b2:	781b      	ldrb	r3, [r3, #0]
    60b4:	b18b      	cbz	r3, 60da <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    60b6:	463b      	mov	r3, r7
    60b8:	aa10      	add	r2, sp, #64	; 0x40
    60ba:	4629      	mov	r1, r5
    60bc:	4620      	mov	r0, r4
    60be:	f7ff faf1 	bl	56a4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60c2:	2800      	cmp	r0, #0
    60c4:	d1d0      	bne.n	6068 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    60c6:	b1b6      	cbz	r6, 60f6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    60c8:	aa10      	add	r2, sp, #64	; 0x40
    60ca:	4629      	mov	r1, r5
    60cc:	4620      	mov	r0, r4
    60ce:	f7ff ff79 	bl	5fc4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    60d2:	4603      	mov	r3, r0
    60d4:	2800      	cmp	r0, #0
    60d6:	d1c7      	bne.n	6068 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    60d8:	e007      	b.n	60ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    60da:	aa10      	add	r2, sp, #64	; 0x40
    60dc:	4629      	mov	r1, r5
    60de:	4620      	mov	r0, r4
    60e0:	f7ff ff70 	bl	5fc4 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    60e4:	4603      	mov	r3, r0
    60e6:	e000      	b.n	60ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    60e8:	2300      	movs	r3, #0
}
    60ea:	4618      	mov	r0, r3
    60ec:	b016      	add	sp, #88	; 0x58
    60ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    60f2:	2300      	movs	r3, #0
    60f4:	e7f9      	b.n	60ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    60f6:	4633      	mov	r3, r6
    60f8:	e7f7      	b.n	60ea <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

000060fa <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    60fa:	b570      	push	{r4, r5, r6, lr}
    60fc:	b09c      	sub	sp, #112	; 0x70
    60fe:	2300      	movs	r3, #0
    6100:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6104:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    6108:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    610c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    6110:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6114:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    6118:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    611c:	f013 0f18 	tst.w	r3, #24
    6120:	d047      	beq.n	61b2 <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    6122:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    6124:	6a00      	ldr	r0, [r0, #32]
    6126:	6a0b      	ldr	r3, [r1, #32]
    6128:	4298      	cmp	r0, r3
    612a:	d002      	beq.n	6132 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    612c:	2000      	movs	r0, #0
}
    612e:	b01c      	add	sp, #112	; 0x70
    6130:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6132:	f640 2301 	movw	r3, #2561	; 0xa01
    6136:	a80e      	add	r0, sp, #56	; 0x38
    6138:	f7ff fca0 	bl	5a7c <ExFatFile::open(ExFatFile*, char const*, int)>
    613c:	2800      	cmp	r0, #0
    613e:	d0f6      	beq.n	612e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    6140:	46a4      	mov	ip, r4
    6142:	466d      	mov	r5, sp
    6144:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6148:	46ae      	mov	lr, r5
    614a:	f8dc 0000 	ldr.w	r0, [ip]
    614e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    6152:	f8dc 2008 	ldr.w	r2, [ip, #8]
    6156:	f8dc 300c 	ldr.w	r3, [ip, #12]
    615a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    615e:	f10c 0c10 	add.w	ip, ip, #16
    6162:	4675      	mov	r5, lr
    6164:	45b4      	cmp	ip, r6
    6166:	d1ef      	bne.n	6148 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    6168:	f8dc 0000 	ldr.w	r0, [ip]
    616c:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    6170:	f104 0324 	add.w	r3, r4, #36	; 0x24
    6174:	aa17      	add	r2, sp, #92	; 0x5c
    6176:	ca07      	ldmia	r2, {r0, r1, r2}
    6178:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    617c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    6180:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6184:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6188:	f063 037f 	orn	r3, r3, #127	; 0x7f
    618c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6190:	4620      	mov	r0, r4
    6192:	f7ff fe89 	bl	5ea8 <ExFatFile::sync()>
    6196:	2800      	cmp	r0, #0
    6198:	d0c9      	beq.n	612e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    619a:	2300      	movs	r3, #0
    619c:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    619e:	2302      	movs	r3, #2
    61a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    61a4:	2308      	movs	r3, #8
    61a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    61aa:	4668      	mov	r0, sp
    61ac:	f7ff fd68 	bl	5c80 <ExFatFile::remove()>
    61b0:	e7bd      	b.n	612e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    61b2:	2000      	movs	r0, #0
    61b4:	e7bb      	b.n	612e <ExFatFile::rename(ExFatFile*, char const*)+0x34>

000061b6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    61b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61ba:	b083      	sub	sp, #12
    61bc:	9100      	str	r1, [sp, #0]
    61be:	461e      	mov	r6, r3
    61c0:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    61c4:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    61c8:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    61cc:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    61d0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    61d4:	f013 0f08 	tst.w	r3, #8
    61d8:	f000 809a 	beq.w	6310 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    61dc:	4605      	mov	r5, r0
      || year > 2107
    61de:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    61e2:	b294      	uxth	r4, r2
    61e4:	2c7f      	cmp	r4, #127	; 0x7f
    61e6:	f200 8098 	bhi.w	631a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    61ea:	1e73      	subs	r3, r6, #1
    61ec:	b2db      	uxtb	r3, r3
    61ee:	2b0b      	cmp	r3, #11
    61f0:	f200 8095 	bhi.w	631e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    61f4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    61f8:	b2db      	uxtb	r3, r3
    61fa:	2b1e      	cmp	r3, #30
    61fc:	f200 8091 	bhi.w	6322 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    6200:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    6204:	bf98      	it	ls
    6206:	f1ba 0f17 	cmpls.w	sl, #23
    620a:	bf8c      	ite	hi
    620c:	2701      	movhi	r7, #1
    620e:	2700      	movls	r7, #0
    6210:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    6214:	bf88      	it	hi
    6216:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    621a:	b10f      	cbz	r7, 6220 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    621c:	2700      	movs	r7, #0
    621e:	e078      	b.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    6220:	f7ff fe42 	bl	5ea8 <ExFatFile::sync()>
    6224:	2800      	cmp	r0, #0
    6226:	d07e      	beq.n	6326 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    6228:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    622c:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    6230:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    6232:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6236:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    623a:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    623e:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    6242:	f019 0901 	ands.w	r9, r9, #1
    6246:	bf18      	it	ne
    6248:	f04f 0964 	movne.w	r9, #100	; 0x64
    624c:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    624e:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6250:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    6252:	9b00      	ldr	r3, [sp, #0]
    6254:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6258:	4652      	mov	r2, sl
    625a:	b2f1      	uxtb	r1, r6
    625c:	4628      	mov	r0, r5
    625e:	f7ff f81b 	bl	5298 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6262:	4602      	mov	r2, r0
    6264:	2800      	cmp	r0, #0
    6266:	d054      	beq.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    6268:	7803      	ldrb	r3, [r0, #0]
    626a:	2b85      	cmp	r3, #133	; 0x85
    626c:	d02b      	beq.n	62c6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    626e:	3340      	adds	r3, #64	; 0x40
    6270:	b2db      	uxtb	r3, r3
    6272:	2b01      	cmp	r3, #1
    6274:	d84d      	bhi.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    6276:	9901      	ldr	r1, [sp, #4]
    6278:	4610      	mov	r0, r2
    627a:	f7ff fc93 	bl	5ba4 <exFatDirChecksum(unsigned char const*, unsigned short)>
    627e:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6280:	3601      	adds	r6, #1
    6282:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    6286:	b2f3      	uxtb	r3, r6
    6288:	429a      	cmp	r2, r3
    628a:	d2e5      	bcs.n	6258 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    628c:	2201      	movs	r2, #1
    628e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    6292:	6a28      	ldr	r0, [r5, #32]
    6294:	f000 feb1 	bl	6ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6298:	2800      	cmp	r0, #0
    629a:	d03a      	beq.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    629c:	9a01      	ldr	r2, [sp, #4]
    629e:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    62a0:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    62a2:	4620      	mov	r0, r4
    62a4:	f005 fa6a 	bl	b77c <FsCache::sync()>
    62a8:	4607      	mov	r7, r0
    62aa:	b390      	cbz	r0, 6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    62ac:	f504 7004 	add.w	r0, r4, #528	; 0x210
    62b0:	f005 fa64 	bl	b77c <FsCache::sync()>
    62b4:	4607      	mov	r7, r0
    62b6:	b360      	cbz	r0, 6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    62b8:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    62bc:	6803      	ldr	r3, [r0, #0]
    62be:	6a1b      	ldr	r3, [r3, #32]
    62c0:	4798      	blx	r3
    62c2:	4607      	mov	r7, r0
    62c4:	e025      	b.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    62c6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    62ca:	f003 0337 	and.w	r3, r3, #55	; 0x37
    62ce:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    62d0:	6a29      	ldr	r1, [r5, #32]
    62d2:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    62d6:	f043 0301 	orr.w	r3, r3, #1
    62da:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    62de:	f1b8 0f00 	cmp.w	r8, #0
    62e2:	d002      	beq.n	62ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    62e4:	f8a0 b010 	strh.w	fp, [r0, #16]
    62e8:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    62ea:	9b00      	ldr	r3, [sp, #0]
    62ec:	f013 0f02 	tst.w	r3, #2
    62f0:	d004      	beq.n	62fc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    62f2:	f882 9014 	strb.w	r9, [r2, #20]
    62f6:	f8a2 b008 	strh.w	fp, [r2, #8]
    62fa:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    62fc:	9b00      	ldr	r3, [sp, #0]
    62fe:	f013 0f04 	tst.w	r3, #4
    6302:	d0b8      	beq.n	6276 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    6304:	f882 9015 	strb.w	r9, [r2, #21]
    6308:	f8a2 b00c 	strh.w	fp, [r2, #12]
    630c:	81d4      	strh	r4, [r2, #14]
}
    630e:	e7b2      	b.n	6276 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    6310:	2700      	movs	r7, #0
}
    6312:	4638      	mov	r0, r7
    6314:	b003      	add	sp, #12
    6316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    631a:	2700      	movs	r7, #0
    631c:	e7f9      	b.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    631e:	2700      	movs	r7, #0
    6320:	e7f7      	b.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6322:	2700      	movs	r7, #0
    6324:	e7f5      	b.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6326:	4607      	mov	r7, r0
    6328:	e7f3      	b.n	6312 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

0000632a <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    632a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    632e:	f013 0f02 	tst.w	r3, #2
    6332:	d066      	beq.n	6402 <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    6334:	b530      	push	{r4, r5, lr}
    6336:	b083      	sub	sp, #12
    6338:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    633a:	69c5      	ldr	r5, [r0, #28]
    633c:	2d00      	cmp	r5, #0
    633e:	d062      	beq.n	6406 <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    6340:	f013 0f40 	tst.w	r3, #64	; 0x40
    6344:	d03b      	beq.n	63be <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6346:	6a00      	ldr	r0, [r0, #32]
    6348:	68a2      	ldr	r2, [r4, #8]
    634a:	68e1      	ldr	r1, [r4, #12]
    634c:	3a01      	subs	r2, #1
    634e:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6352:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6356:	3309      	adds	r3, #9
    6358:	b2db      	uxtb	r3, r3
    635a:	f1c3 0e20 	rsb	lr, r3, #32
    635e:	f1a3 0c20 	sub.w	ip, r3, #32
    6362:	40da      	lsrs	r2, r3
    6364:	fa01 fe0e 	lsl.w	lr, r1, lr
    6368:	ea42 020e 	orr.w	r2, r2, lr
    636c:	fa21 fc0c 	lsr.w	ip, r1, ip
    6370:	ea42 020c 	orr.w	r2, r2, ip
    6374:	3201      	adds	r2, #1
    if (m_curCluster) {
    6376:	69a3      	ldr	r3, [r4, #24]
    6378:	b1b3      	cbz	r3, 63a8 <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    637a:	1c59      	adds	r1, r3, #1
    637c:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    637e:	3d01      	subs	r5, #1
    6380:	1aed      	subs	r5, r5, r3
    6382:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6384:	b9a2      	cbnz	r2, 63b0 <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    6386:	e9d4 2300 	ldrd	r2, r3, [r4]
    638a:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    638e:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6392:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6396:	f063 037f 	orn	r3, r3, #127	; 0x7f
    639a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    639e:	4620      	mov	r0, r4
    63a0:	f7ff fd82 	bl	5ea8 <ExFatFile::sync()>

 fail:
  return false;
}
    63a4:	b003      	add	sp, #12
    63a6:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    63a8:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    63aa:	2300      	movs	r3, #0
    63ac:	61e3      	str	r3, [r4, #28]
    63ae:	e7e9      	b.n	6384 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    63b0:	2300      	movs	r3, #0
    63b2:	9901      	ldr	r1, [sp, #4]
    63b4:	f000 fdb9 	bl	6f2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    63b8:	2800      	cmp	r0, #0
    63ba:	d1e4      	bne.n	6386 <ExFatFile::truncate()+0x5c>
    63bc:	e7f2      	b.n	63a4 <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    63be:	6981      	ldr	r1, [r0, #24]
    63c0:	b949      	cbnz	r1, 63d6 <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    63c2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    63c4:	2300      	movs	r3, #0
    63c6:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    63c8:	4629      	mov	r1, r5
    63ca:	6a20      	ldr	r0, [r4, #32]
    63cc:	f000 feb1 	bl	7132 <ExFatPartition::freeChain(unsigned long)>
    63d0:	2800      	cmp	r0, #0
    63d2:	d1d8      	bne.n	6386 <ExFatFile::truncate()+0x5c>
    63d4:	e7e6      	b.n	63a4 <ExFatFile::truncate()+0x7a>
      toFree = 0;
    63d6:	2300      	movs	r3, #0
    63d8:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    63da:	aa01      	add	r2, sp, #4
    63dc:	6a00      	ldr	r0, [r0, #32]
    63de:	f000 fe29 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    63e2:	2800      	cmp	r0, #0
    63e4:	db11      	blt.n	640a <ExFatFile::truncate()+0xe0>
      if (fg) {
    63e6:	b918      	cbnz	r0, 63f0 <ExFatFile::truncate()+0xc6>
    if (toFree) {
    63e8:	9d01      	ldr	r5, [sp, #4]
    63ea:	2d00      	cmp	r5, #0
    63ec:	d0cb      	beq.n	6386 <ExFatFile::truncate()+0x5c>
    63ee:	e7eb      	b.n	63c8 <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    63f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63f4:	69a1      	ldr	r1, [r4, #24]
    63f6:	6a20      	ldr	r0, [r4, #32]
    63f8:	f000 fe7b 	bl	70f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    63fc:	2800      	cmp	r0, #0
    63fe:	d1f3      	bne.n	63e8 <ExFatFile::truncate()+0xbe>
    6400:	e7d0      	b.n	63a4 <ExFatFile::truncate()+0x7a>
  return false;
    6402:	2000      	movs	r0, #0
}
    6404:	4770      	bx	lr
      return true;
    6406:	2001      	movs	r0, #1
    6408:	e7cc      	b.n	63a4 <ExFatFile::truncate()+0x7a>
  return false;
    640a:	2000      	movs	r0, #0
    640c:	e7ca      	b.n	63a4 <ExFatFile::truncate()+0x7a>
	...

00006410 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6414:	b083      	sub	sp, #12
    6416:	4604      	mov	r4, r0
    6418:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    641c:	f013 0f02 	tst.w	r3, #2
    6420:	d014      	beq.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
    6422:	4688      	mov	r8, r1
    6424:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6426:	f013 0f08 	tst.w	r3, #8
    642a:	d109      	bne.n	6440 <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    642c:	f1bb 0f00 	cmp.w	fp, #0
    6430:	f000 80ed 	beq.w	660e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6434:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6436:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    643a:	f04f 0901 	mov.w	r9, #1
    643e:	e085      	b.n	654c <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    6440:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6444:	f7ff f8bb 	bl	55be <ExFatFile::seekSet(unsigned long long)>
    6448:	2800      	cmp	r0, #0
    644a:	d1ef      	bne.n	642c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    644c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6450:	f043 0301 	orr.w	r3, r3, #1
    6454:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6458:	2000      	movs	r0, #0
}
    645a:	b003      	add	sp, #12
    645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6460:	4652      	mov	r2, sl
    6462:	f000 fde7 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6466:	2800      	cmp	r0, #0
    6468:	dbf0      	blt.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    646a:	b938      	cbnz	r0, 647c <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    646c:	4620      	mov	r0, r4
    646e:	f7ff fbb7 	bl	5be0 <ExFatFile::addCluster()>
    6472:	b918      	cbnz	r0, 647c <ExFatFile::write(void const*, unsigned int)+0x6c>
    6474:	e7ea      	b.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    6476:	69e3      	ldr	r3, [r4, #28]
    6478:	b323      	cbz	r3, 64c4 <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    647a:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    647c:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    647e:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6482:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    6486:	69a1      	ldr	r1, [r4, #24]
    6488:	3902      	subs	r1, #2
    648a:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    648c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    6490:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6494:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6496:	b916      	cbnz	r6, 649e <ExFatFile::write(void const*, unsigned int)+0x8e>
    6498:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    649c:	d21a      	bcs.n	64d4 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    649e:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    64a2:	42bd      	cmp	r5, r7
    64a4:	bf28      	it	cs
    64a6:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    64a8:	bb3e      	cbnz	r6, 64fa <ExFatFile::write(void const*, unsigned int)+0xea>
    64aa:	6862      	ldr	r2, [r4, #4]
    64ac:	9200      	str	r2, [sp, #0]
    64ae:	6963      	ldr	r3, [r4, #20]
    64b0:	9301      	str	r3, [sp, #4]
    64b2:	6823      	ldr	r3, [r4, #0]
    64b4:	6922      	ldr	r2, [r4, #16]
    64b6:	4293      	cmp	r3, r2
    64b8:	9a00      	ldr	r2, [sp, #0]
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	419a      	sbcs	r2, r3
    64be:	d375      	bcc.n	65ac <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    64c0:	2205      	movs	r2, #5
    64c2:	e01b      	b.n	64fc <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    64c4:	4620      	mov	r0, r4
    64c6:	f7ff fb8b 	bl	5be0 <ExFatFile::addCluster()>
    64ca:	2800      	cmp	r0, #0
    64cc:	d0be      	beq.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    64ce:	69a3      	ldr	r3, [r4, #24]
    64d0:	61e3      	str	r3, [r4, #28]
    64d2:	e7d3      	b.n	647c <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    64d4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    64d8:	d271      	bcs.n	65be <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    64da:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    64de:	4299      	cmp	r1, r3
    64e0:	f000 808d 	beq.w	65fe <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    64e4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    64e8:	6803      	ldr	r3, [r0, #0]
    64ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    64ec:	4642      	mov	r2, r8
    64ee:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    64f0:	2800      	cmp	r0, #0
    64f2:	d0ab      	beq.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    64f4:	f44f 7500 	mov.w	r5, #512	; 0x200
    64f8:	e010      	b.n	651c <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    64fa:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    64fc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6500:	f005 f963 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6504:	2800      	cmp	r0, #0
    6506:	d0a1      	beq.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    6508:	462a      	mov	r2, r5
    650a:	4641      	mov	r1, r8
    650c:	4430      	add	r0, r6
    650e:	f006 fd07 	bl	cf20 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6512:	6a20      	ldr	r0, [r4, #32]
    6514:	442e      	add	r6, r5
    6516:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    651a:	d049      	beq.n	65b0 <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    651c:	6823      	ldr	r3, [r4, #0]
    651e:	6862      	ldr	r2, [r4, #4]
    6520:	18eb      	adds	r3, r5, r3
    6522:	f142 0200 	adc.w	r2, r2, #0
    6526:	6023      	str	r3, [r4, #0]
    6528:	6062      	str	r2, [r4, #4]
    src += n;
    652a:	44a8      	add	r8, r5
    toWrite -= n;
    652c:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    652e:	6920      	ldr	r0, [r4, #16]
    6530:	6961      	ldr	r1, [r4, #20]
    6532:	4298      	cmp	r0, r3
    6534:	4191      	sbcs	r1, r2
    6536:	d207      	bcs.n	6548 <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6538:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    653c:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6540:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6544:	6123      	str	r3, [r4, #16]
    6546:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    6548:	2f00      	cmp	r7, #0
    654a:	d060      	beq.n	660e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    654c:	6a20      	ldr	r0, [r4, #32]
    654e:	6825      	ldr	r5, [r4, #0]
    6550:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6554:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6556:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    655a:	2d00      	cmp	r5, #0
    655c:	d18e      	bne.n	647c <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    655e:	69a1      	ldr	r1, [r4, #24]
    6560:	2900      	cmp	r1, #0
    6562:	d088      	beq.n	6476 <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    6564:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6568:	f013 0f40 	tst.w	r3, #64	; 0x40
    656c:	f43f af78 	beq.w	6460 <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6570:	68a3      	ldr	r3, [r4, #8]
    6572:	68e2      	ldr	r2, [r4, #12]
    6574:	3b01      	subs	r3, #1
    6576:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    657a:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    657e:	3009      	adds	r0, #9
    6580:	b2c0      	uxtb	r0, r0
    6582:	f1c0 0e20 	rsb	lr, r0, #32
    6586:	f1a0 0c20 	sub.w	ip, r0, #32
    658a:	40c3      	lsrs	r3, r0
    658c:	fa02 fe0e 	lsl.w	lr, r2, lr
    6590:	ea43 030e 	orr.w	r3, r3, lr
    6594:	fa22 fc0c 	lsr.w	ip, r2, ip
    6598:	ea43 030c 	orr.w	r3, r3, ip
    659c:	69e2      	ldr	r2, [r4, #28]
    659e:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    65a0:	4299      	cmp	r1, r3
    65a2:	f4bf af63 	bcs.w	646c <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    65a6:	3101      	adds	r1, #1
    65a8:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    65aa:	e767      	b.n	647c <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    65ac:	464a      	mov	r2, r9
    65ae:	e7a5      	b.n	64fc <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    65b0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    65b4:	f005 f8e2 	bl	b77c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    65b8:	2800      	cmp	r0, #0
    65ba:	d1af      	bne.n	651c <ExFatFile::write(void const*, unsigned int)+0x10c>
    65bc:	e746      	b.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    65be:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    65c2:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    65c6:	0a7a      	lsrs	r2, r7, #9
    65c8:	4293      	cmp	r3, r2
    65ca:	bf28      	it	cs
    65cc:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    65ce:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    65d0:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    65d4:	4291      	cmp	r1, r2
    65d6:	d809      	bhi.n	65ec <ExFatFile::write(void const*, unsigned int)+0x1dc>
    65d8:	18ce      	adds	r6, r1, r3
    65da:	42b2      	cmp	r2, r6
    65dc:	d206      	bcs.n	65ec <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    65de:	2200      	movs	r2, #0
    65e0:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    65e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    65e8:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    65ec:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    65f0:	6802      	ldr	r2, [r0, #0]
    65f2:	6a96      	ldr	r6, [r2, #40]	; 0x28
    65f4:	4642      	mov	r2, r8
    65f6:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    65f8:	2800      	cmp	r0, #0
    65fa:	d18f      	bne.n	651c <ExFatFile::write(void const*, unsigned int)+0x10c>
    65fc:	e726      	b.n	644c <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    65fe:	2300      	movs	r3, #0
    6600:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6608:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    660c:	e76a      	b.n	64e4 <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    660e:	6821      	ldr	r1, [r4, #0]
    6610:	6862      	ldr	r2, [r4, #4]
    6612:	68a0      	ldr	r0, [r4, #8]
    6614:	68e3      	ldr	r3, [r4, #12]
    6616:	4288      	cmp	r0, r1
    6618:	4193      	sbcs	r3, r2
    661a:	d209      	bcs.n	6630 <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    661c:	60a1      	str	r1, [r4, #8]
    661e:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6620:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6624:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6628:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    662c:	4658      	mov	r0, fp
    662e:	e714      	b.n	645a <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    6630:	4b06      	ldr	r3, [pc, #24]	; (664c <ExFatFile::write(void const*, unsigned int)+0x23c>)
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	b13b      	cbz	r3, 6646 <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6636:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    663a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    663e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6642:	4658      	mov	r0, fp
    6644:	e709      	b.n	645a <ExFatFile::write(void const*, unsigned int)+0x4a>
    6646:	4658      	mov	r0, fp
    6648:	e707      	b.n	645a <ExFatFile::write(void const*, unsigned int)+0x4a>
    664a:	bf00      	nop
    664c:	20004b64 	.word	0x20004b64

00006650 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6650:	b161      	cbz	r1, 666c <Print::write(char const*)+0x1c>
    6652:	b538      	push	{r3, r4, r5, lr}
    6654:	4604      	mov	r4, r0
    6656:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    6658:	4608      	mov	r0, r1
    665a:	f00b ff11 	bl	12480 <strlen>
    665e:	4602      	mov	r2, r0
    6660:	6823      	ldr	r3, [r4, #0]
    6662:	685b      	ldr	r3, [r3, #4]
    6664:	4629      	mov	r1, r5
    6666:	4620      	mov	r0, r4
    6668:	4798      	blx	r3
    666a:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    666c:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    666e:	4770      	bx	lr

00006670 <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    6670:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6672:	6883      	ldr	r3, [r0, #8]
    6674:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6678:	b173      	cbz	r3, 6698 <ExFatFormatter::syncUpcase()+0x28>
    667a:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    667c:	2000      	movs	r0, #0
    667e:	690a      	ldr	r2, [r1, #16]
    6680:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    6682:	3301      	adds	r3, #1
    6684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6688:	d3f9      	bcc.n	667e <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    668a:	68c8      	ldr	r0, [r1, #12]
    668c:	6803      	ldr	r3, [r0, #0]
    668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6690:	690a      	ldr	r2, [r1, #16]
    6692:	6809      	ldr	r1, [r1, #0]
    6694:	4798      	blx	r3
}
    6696:	bd08      	pop	{r3, pc}
    return true;
    6698:	2001      	movs	r0, #1
    669a:	e7fc      	b.n	6696 <ExFatFormatter::syncUpcase()+0x26>

0000669c <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    669c:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    669e:	6882      	ldr	r2, [r0, #8]
    66a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    66a4:	6900      	ldr	r0, [r0, #16]
    66a6:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    66a8:	6858      	ldr	r0, [r3, #4]
    66aa:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    66ae:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    66b0:	6899      	ldr	r1, [r3, #8]
    66b2:	3101      	adds	r1, #1
    66b4:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    66b6:	f240 11ff 	movw	r1, #511	; 0x1ff
    66ba:	428a      	cmp	r2, r1
    66bc:	d001      	beq.n	66c2 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    66be:	2001      	movs	r0, #1
}
    66c0:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    66c2:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    66c4:	68d8      	ldr	r0, [r3, #12]
    66c6:	6802      	ldr	r2, [r0, #0]
    66c8:	6a54      	ldr	r4, [r2, #36]	; 0x24
    66ca:	6819      	ldr	r1, [r3, #0]
    66cc:	1c4a      	adds	r2, r1, #1
    66ce:	601a      	str	r2, [r3, #0]
    66d0:	691a      	ldr	r2, [r3, #16]
    66d2:	47a0      	blx	r4
}
    66d4:	bd10      	pop	{r4, pc}

000066d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    66d6:	b538      	push	{r3, r4, r5, lr}
    66d8:	4605      	mov	r5, r0
    66da:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    66dc:	b2c9      	uxtb	r1, r1
    66de:	f7ff ffdd 	bl	669c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    66e2:	b900      	cbnz	r0, 66e6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    66e4:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    66e6:	0a21      	lsrs	r1, r4, #8
    66e8:	4628      	mov	r0, r5
    66ea:	f7ff ffd7 	bl	669c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    66ee:	e7f9      	b.n	66e4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

000066f0 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66f4:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    66f6:	2500      	movs	r5, #0
    66f8:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    66fa:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    66fc:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    66fe:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6702:	e022      	b.n	674a <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    6704:	1c6c      	adds	r4, r5, #1
    6706:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    670a:	d208      	bcs.n	671e <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    670c:	b2a0      	uxth	r0, r4
    670e:	f005 f9b9 	bl	ba84 <toUpcase(unsigned short)>
    6712:	42a0      	cmp	r0, r4
    6714:	d103      	bne.n	671e <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6716:	3401      	adds	r4, #1
    6718:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    671c:	d1f6      	bne.n	670c <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    671e:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    6722:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6726:	d31d      	bcc.n	6764 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6728:	4639      	mov	r1, r7
    672a:	4630      	mov	r0, r6
    672c:	f7ff ffd3 	bl	66d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6730:	4603      	mov	r3, r0
    6732:	b308      	cbz	r0, 6778 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6734:	fa1f f188 	uxth.w	r1, r8
    6738:	4630      	mov	r0, r6
    673a:	f7ff ffcc 	bl	66d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    673e:	4603      	mov	r3, r0
    6740:	b1d0      	cbz	r0, 6778 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6742:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6744:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6748:	d219      	bcs.n	677e <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    674a:	b2a8      	uxth	r0, r5
    674c:	f005 f99a 	bl	ba84 <toUpcase(unsigned short)>
    6750:	4601      	mov	r1, r0
    if (uc != ch) {
    6752:	42a8      	cmp	r0, r5
    6754:	d0d6      	beq.n	6704 <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    6756:	4630      	mov	r0, r6
    6758:	f7ff ffbd 	bl	66d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    675c:	4603      	mov	r3, r0
    675e:	b158      	cbz	r0, 6778 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    6760:	3501      	adds	r5, #1
    6762:	e7ef      	b.n	6744 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    6764:	42a5      	cmp	r5, r4
    6766:	d2ed      	bcs.n	6744 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    6768:	b2a9      	uxth	r1, r5
    676a:	4630      	mov	r0, r6
    676c:	f7ff ffb3 	bl	66d6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6770:	3501      	adds	r5, #1
    6772:	4603      	mov	r3, r0
    6774:	2800      	cmp	r0, #0
    6776:	d1f5      	bne.n	6764 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    6778:	4618      	mov	r0, r3
    677a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    677e:	4630      	mov	r0, r6
    6780:	f7ff ff76 	bl	6670 <ExFatFormatter::syncUpcase()>
    6784:	4603      	mov	r3, r0
    6786:	e7f7      	b.n	6778 <ExFatFormatter::writeUpcase(unsigned long)+0x88>

00006788 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    678c:	b08b      	sub	sp, #44	; 0x2c
    678e:	9002      	str	r0, [sp, #8]
    6790:	460e      	mov	r6, r1
    6792:	4614      	mov	r4, r2
    6794:	4699      	mov	r9, r3
  m_dev = dev;
    6796:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    6798:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    679a:	680b      	ldr	r3, [r1, #0]
    679c:	69db      	ldr	r3, [r3, #28]
    679e:	4608      	mov	r0, r1
    67a0:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    67a2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    67a6:	d369      	bcc.n	687c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    67a8:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    67aa:	2300      	movs	r3, #0
    67ac:	2201      	movs	r2, #1
    67ae:	3301      	adds	r3, #1
    67b0:	b2db      	uxtb	r3, r3
    67b2:	0052      	lsls	r2, r2, #1
    67b4:	bf14      	ite	ne
    67b6:	2501      	movne	r5, #1
    67b8:	2500      	moveq	r5, #0
    67ba:	4297      	cmp	r7, r2
    67bc:	bf94      	ite	ls
    67be:	2500      	movls	r5, #0
    67c0:	f005 0501 	andhi.w	r5, r5, #1
    67c4:	2d00      	cmp	r5, #0
    67c6:	d1f2      	bne.n	67ae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    67c8:	2b1c      	cmp	r3, #28
    67ca:	d963      	bls.n	6894 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    67cc:	f1b3 0b0b 	subs.w	fp, r3, #11
    67d0:	bf48      	it	mi
    67d2:	f10b 0b01 	addmi.w	fp, fp, #1
    67d6:	ea4f 016b 	mov.w	r1, fp, asr #1
    67da:	9101      	str	r1, [sp, #4]
    67dc:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    67e0:	2201      	movs	r2, #1
    67e2:	408a      	lsls	r2, r1
    67e4:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    67e6:	3301      	adds	r3, #1
    67e8:	105b      	asrs	r3, r3, #1
    67ea:	f04f 0a01 	mov.w	sl, #1
    67ee:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    67f2:	ea4f 034a 	mov.w	r3, sl, lsl #1
    67f6:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    67f8:	ea4f 028a 	mov.w	r2, sl, lsl #2
    67fc:	9205      	str	r2, [sp, #20]
    67fe:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    6802:	9901      	ldr	r1, [sp, #4]
    6804:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    6808:	9203      	str	r2, [sp, #12]
    680a:	fa02 f801 	lsl.w	r8, r2, r1
    680e:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6812:	f44f 7200 	mov.w	r2, #512	; 0x200
    6816:	2100      	movs	r1, #0
    6818:	4620      	mov	r0, r4
    681a:	f00b f807 	bl	1182c <memset>
  mbr->part->beginCHS[0] = 1;
    681e:	2301      	movs	r3, #1
    6820:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    6824:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    6828:	2307      	movs	r3, #7
    682a:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    682e:	23fe      	movs	r3, #254	; 0xfe
    6830:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    6834:	23ff      	movs	r3, #255	; 0xff
    6836:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    683a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    683e:	9b00      	ldr	r3, [sp, #0]
    6840:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    6844:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    6848:	f64a 2355 	movw	r3, #43605	; 0xaa55
    684c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    6850:	6833      	ldr	r3, [r6, #0]
    6852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6854:	4622      	mov	r2, r4
    6856:	2100      	movs	r1, #0
    6858:	4630      	mov	r0, r6
    685a:	4798      	blx	r3
    685c:	bb70      	cbnz	r0, 68bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    685e:	f1b9 0f00 	cmp.w	r9, #0
    6862:	d007      	beq.n	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6864:	f8d9 3000 	ldr.w	r3, [r9]
    6868:	685b      	ldr	r3, [r3, #4]
    686a:	220f      	movs	r2, #15
    686c:	49af      	ldr	r1, [pc, #700]	; (6b2c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    686e:	4648      	mov	r0, r9
    6870:	4798      	blx	r3
  return false;
    6872:	2500      	movs	r5, #0
}
    6874:	4628      	mov	r0, r5
    6876:	b00b      	add	sp, #44	; 0x2c
    6878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    687c:	f1b9 0f00 	cmp.w	r9, #0
    6880:	f000 8207 	beq.w	6c92 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    6884:	f8d9 3000 	ldr.w	r3, [r9]
    6888:	685b      	ldr	r3, [r3, #4]
    688a:	2215      	movs	r2, #21
    688c:	49a8      	ldr	r1, [pc, #672]	; (6b30 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    688e:	4648      	mov	r0, r9
    6890:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    6892:	e7e7      	b.n	6864 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6894:	2b1a      	cmp	r3, #26
    6896:	d809      	bhi.n	68ac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6898:	f44f 7380 	mov.w	r3, #256	; 0x100
    689c:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    689e:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    68a2:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    68a6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    68aa:	e7a2      	b.n	67f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    68ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    68b0:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    68b2:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    68b6:	f8cd b004 	str.w	fp, [sp, #4]
    68ba:	e794      	b.n	67e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    68bc:	f44f 7200 	mov.w	r2, #512	; 0x200
    68c0:	2100      	movs	r1, #0
    68c2:	4620      	mov	r0, r4
    68c4:	f00a ffb2 	bl	1182c <memset>
  pbs->jmpInstruction[0] = 0XEB;
    68c8:	23eb      	movs	r3, #235	; 0xeb
    68ca:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    68cc:	2376      	movs	r3, #118	; 0x76
    68ce:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    68d0:	2390      	movs	r3, #144	; 0x90
    68d2:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    68d4:	2345      	movs	r3, #69	; 0x45
    68d6:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    68d8:	2358      	movs	r3, #88	; 0x58
    68da:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    68dc:	2346      	movs	r3, #70	; 0x46
    68de:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    68e0:	2341      	movs	r3, #65	; 0x41
    68e2:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    68e4:	2354      	movs	r3, #84	; 0x54
    68e6:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    68e8:	2320      	movs	r3, #32
    68ea:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    68ec:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    68ee:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    68f0:	9b00      	ldr	r3, [sp, #0]
    68f2:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    68f4:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    68f8:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    68fc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    6900:	65a3      	str	r3, [r4, #88]	; 0x58
    6902:	9a03      	ldr	r2, [sp, #12]
    6904:	65e2      	str	r2, [r4, #92]	; 0x5c
    6906:	2304      	movs	r3, #4
    6908:	6623      	str	r3, [r4, #96]	; 0x60
    690a:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    690c:	f44f 7380 	mov.w	r3, #256	; 0x100
    6910:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    6914:	2309      	movs	r3, #9
    6916:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    691a:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    691e:	2301      	movs	r3, #1
    6920:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    6924:	2380      	movs	r3, #128	; 0x80
    6926:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    692a:	f104 0377 	add.w	r3, r4, #119	; 0x77
    692e:	9407      	str	r4, [sp, #28]
    6930:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    6934:	22f4      	movs	r2, #244	; 0xf4
    6936:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    693a:	428b      	cmp	r3, r1
    693c:	d1fb      	bne.n	6936 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    693e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6942:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6946:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    6948:	461f      	mov	r7, r3
    694a:	e003      	b.n	6954 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    694c:	3301      	adds	r3, #1
    694e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6952:	d009      	beq.n	6968 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    6954:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    6958:	2a01      	cmp	r2, #1
    695a:	d9f7      	bls.n	694c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    695c:	2b70      	cmp	r3, #112	; 0x70
    695e:	d0f5      	beq.n	694c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    6960:	5ce2      	ldrb	r2, [r4, r3]
    6962:	eb02 0777 	add.w	r7, r2, r7, ror #1
    6966:	e7f1      	b.n	694c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    6968:	6833      	ldr	r3, [r6, #0]
    696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    696c:	4622      	mov	r2, r4
    696e:	f8dd 8000 	ldr.w	r8, [sp]
    6972:	4641      	mov	r1, r8
    6974:	4630      	mov	r0, r6
    6976:	4798      	blx	r3
    6978:	2800      	cmp	r0, #0
    697a:	f43f af70 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    697e:	6833      	ldr	r3, [r6, #0]
    6980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6982:	4622      	mov	r2, r4
    6984:	f8cd 8000 	str.w	r8, [sp]
    6988:	4641      	mov	r1, r8
    698a:	310c      	adds	r1, #12
    698c:	4630      	mov	r0, r6
    698e:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6990:	2800      	cmp	r0, #0
    6992:	f43f af64 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    6996:	9900      	ldr	r1, [sp, #0]
    6998:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    699c:	f44f 7200 	mov.w	r2, #512	; 0x200
    69a0:	2100      	movs	r1, #0
    69a2:	4620      	mov	r0, r4
    69a4:	f00a ff42 	bl	1182c <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    69a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
    69ac:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    69b0:	9900      	ldr	r1, [sp, #0]
    69b2:	f101 0309 	add.w	r3, r1, #9
    69b6:	1e62      	subs	r2, r4, #1
    69b8:	9206      	str	r2, [sp, #24]
    69ba:	9a07      	ldr	r2, [sp, #28]
    69bc:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    69c0:	9508      	str	r5, [sp, #32]
    69c2:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    69c4:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    69c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    69ca:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    69ce:	4543      	cmp	r3, r8
    69d0:	d1f9      	bne.n	69c6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    69d2:	6833      	ldr	r3, [r6, #0]
    69d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69d6:	4622      	mov	r2, r4
    69d8:	4659      	mov	r1, fp
    69da:	4630      	mov	r0, r6
    69dc:	4798      	blx	r3
    69de:	2800      	cmp	r0, #0
    69e0:	f000 814f 	beq.w	6c82 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    69e4:	6833      	ldr	r3, [r6, #0]
    69e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    69e8:	4622      	mov	r2, r4
    69ea:	f10b 010c 	add.w	r1, fp, #12
    69ee:	4630      	mov	r0, r6
    69f0:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    69f2:	2800      	cmp	r0, #0
    69f4:	f000 8147 	beq.w	6c86 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    69f8:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    69fc:	42ab      	cmp	r3, r5
    69fe:	d001      	beq.n	6a04 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    6a00:	469b      	mov	fp, r3
    6a02:	e7df      	b.n	69c4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6a04:	9309      	str	r3, [sp, #36]	; 0x24
    6a06:	9d08      	ldr	r5, [sp, #32]
    6a08:	f44f 7200 	mov.w	r2, #512	; 0x200
    6a0c:	2100      	movs	r1, #0
    6a0e:	4620      	mov	r0, r4
    6a10:	f00a ff0c 	bl	1182c <memset>
  for (int j = 0; j < 2; j++) {
    6a14:	f10b 0b03 	add.w	fp, fp, #3
    6a18:	9508      	str	r5, [sp, #32]
    6a1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    6a1c:	9b06      	ldr	r3, [sp, #24]
    6a1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6a22:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6a26:	4598      	cmp	r8, r3
    6a28:	d1f9      	bne.n	6a1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    6a2a:	6833      	ldr	r3, [r6, #0]
    6a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a2e:	4622      	mov	r2, r4
    6a30:	4629      	mov	r1, r5
    6a32:	4630      	mov	r0, r6
    6a34:	4798      	blx	r3
    6a36:	2800      	cmp	r0, #0
    6a38:	f000 8127 	beq.w	6c8a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6a3c:	6833      	ldr	r3, [r6, #0]
    6a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a40:	4622      	mov	r2, r4
    6a42:	f105 010c 	add.w	r1, r5, #12
    6a46:	4630      	mov	r0, r6
    6a48:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6a4a:	2800      	cmp	r0, #0
    6a4c:	f000 811f 	beq.w	6c8e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    6a50:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    6a52:	458b      	cmp	fp, r1
    6a54:	d001      	beq.n	6a5a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    6a56:	460d      	mov	r5, r1
    6a58:	e7e0      	b.n	6a1c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    6a5a:	9509      	str	r5, [sp, #36]	; 0x24
    6a5c:	9d08      	ldr	r5, [sp, #32]
    6a5e:	1f23      	subs	r3, r4, #4
    6a60:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6a64:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    6a68:	429a      	cmp	r2, r3
    6a6a:	d1fb      	bne.n	6a64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    6a6c:	6833      	ldr	r3, [r6, #0]
    6a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a70:	4622      	mov	r2, r4
    6a72:	4630      	mov	r0, r6
    6a74:	4798      	blx	r3
    6a76:	2800      	cmp	r0, #0
    6a78:	f43f aef1 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6a7c:	6833      	ldr	r3, [r6, #0]
    6a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a80:	4622      	mov	r2, r4
    6a82:	9909      	ldr	r1, [sp, #36]	; 0x24
    6a84:	310d      	adds	r1, #13
    6a86:	4630      	mov	r0, r6
    6a88:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6a8a:	2800      	cmp	r0, #0
    6a8c:	f43f aee7 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    6a90:	f1b9 0f00 	cmp.w	r9, #0
    6a94:	d006      	beq.n	6aa4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    6a96:	f8d9 3000 	ldr.w	r3, [r9]
    6a9a:	685b      	ldr	r3, [r3, #4]
    6a9c:	220c      	movs	r2, #12
    6a9e:	4925      	ldr	r1, [pc, #148]	; (6b34 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    6aa0:	4648      	mov	r0, r9
    6aa2:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    6aa4:	9b00      	ldr	r3, [sp, #0]
    6aa6:	4453      	add	r3, sl
    6aa8:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6aaa:	9b03      	ldr	r3, [sp, #12]
    6aac:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6ab0:	f208 2807 	addw	r8, r8, #519	; 0x207
    6ab4:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
    6abc:	2100      	movs	r1, #0
    6abe:	4620      	mov	r0, r4
    6ac0:	f00a feb4 	bl	1182c <memset>
  secBuf[0] = 0XF8;
    6ac4:	4623      	mov	r3, r4
    6ac6:	22f8      	movs	r2, #248	; 0xf8
    6ac8:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    6acc:	22ff      	movs	r2, #255	; 0xff
    6ace:	9907      	ldr	r1, [sp, #28]
    6ad0:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    6ad4:	428b      	cmp	r3, r1
    6ad6:	d1fb      	bne.n	6ad0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    6ad8:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    6adc:	2700      	movs	r7, #0
    6ade:	e00d      	b.n	6afc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    6ae0:	6833      	ldr	r3, [r6, #0]
    6ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ae4:	4622      	mov	r2, r4
    6ae6:	eb0b 0107 	add.w	r1, fp, r7
    6aea:	4630      	mov	r0, r6
    6aec:	4798      	blx	r3
    6aee:	2800      	cmp	r0, #0
    6af0:	f43f aeb5 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6af4:	b19f      	cbz	r7, 6b1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    6af6:	3701      	adds	r7, #1
    6af8:	45ba      	cmp	sl, r7
    6afa:	d91f      	bls.n	6b3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    6afc:	fbb7 f3f8 	udiv	r3, r7, r8
    6b00:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    6b04:	2b00      	cmp	r3, #0
    6b06:	d1eb      	bne.n	6ae0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    6b08:	f1b9 0f00 	cmp.w	r9, #0
    6b0c:	d0e8      	beq.n	6ae0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    6b0e:	f8d9 3000 	ldr.w	r3, [r9]
    6b12:	685b      	ldr	r3, [r3, #4]
    6b14:	2201      	movs	r2, #1
    6b16:	4908      	ldr	r1, [pc, #32]	; (6b38 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    6b18:	4648      	mov	r0, r9
    6b1a:	4798      	blx	r3
    6b1c:	e7e0      	b.n	6ae0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    6b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b22:	2100      	movs	r1, #0
    6b24:	4620      	mov	r0, r4
    6b26:	f00a fe81 	bl	1182c <memset>
    6b2a:	e7e4      	b.n	6af6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    6b2c:	20002128 	.word	0x20002128
    6b30:	200020c8 	.word	0x200020c8
    6b34:	200020e0 	.word	0x200020e0
    6b38:	20002da8 	.word	0x20002da8
  writeMsg(pr, "\r\n");
    6b3c:	f1b9 0f00 	cmp.w	r9, #0
    6b40:	f000 80ad 	beq.w	6c9e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    6b44:	f8d9 3000 	ldr.w	r3, [r9]
    6b48:	685b      	ldr	r3, [r3, #4]
    6b4a:	2202      	movs	r2, #2
    6b4c:	4969      	ldr	r1, [pc, #420]	; (6cf4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    6b4e:	4648      	mov	r0, r9
    6b50:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    6b52:	9f03      	ldr	r7, [sp, #12]
    6b54:	3707      	adds	r7, #7
    6b56:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6b58:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    6b5c:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    6b60:	9b04      	ldr	r3, [sp, #16]
    6b62:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    6b66:	f4ff ae7d 	bcc.w	6864 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b6e:	2100      	movs	r1, #0
    6b70:	4620      	mov	r0, r4
    6b72:	f00a fe5b 	bl	1182c <memset>
  secBuf[0] = 0X7;
    6b76:	2307      	movs	r3, #7
    6b78:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6b7a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6b7e:	d31b      	bcc.n	6bb8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    6b80:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    6b84:	46c3      	mov	fp, r8
    6b86:	e005      	b.n	6b94 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    6b88:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    6b8c:	f108 0801 	add.w	r8, r8, #1
    6b90:	45c2      	cmp	sl, r8
    6b92:	d00d      	beq.n	6bb0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    6b94:	6833      	ldr	r3, [r6, #0]
    6b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b98:	4622      	mov	r2, r4
    6b9a:	9905      	ldr	r1, [sp, #20]
    6b9c:	4441      	add	r1, r8
    6b9e:	4630      	mov	r0, r6
    6ba0:	4798      	blx	r3
    6ba2:	2800      	cmp	r0, #0
    6ba4:	f43f ae5b 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6ba8:	f1b8 0f00 	cmp.w	r8, #0
    6bac:	d1ee      	bne.n	6b8c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
    6bae:	e7eb      	b.n	6b88 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
    6bb0:	f1b9 0f00 	cmp.w	r9, #0
    6bb4:	f000 808b 	beq.w	6cce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
    6bb8:	f8d9 3000 	ldr.w	r3, [r9]
    6bbc:	685b      	ldr	r3, [r3, #4]
    6bbe:	2216      	movs	r2, #22
    6bc0:	494d      	ldr	r1, [pc, #308]	; (6cf8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
    6bc2:	4648      	mov	r0, r9
    6bc4:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6bc6:	9b05      	ldr	r3, [sp, #20]
    6bc8:	9a04      	ldr	r2, [sp, #16]
    6bca:	1899      	adds	r1, r3, r2
    6bcc:	9802      	ldr	r0, [sp, #8]
    6bce:	f7ff fd8f 	bl	66f0 <ExFatFormatter::writeUpcase(unsigned long)>
    6bd2:	2800      	cmp	r0, #0
    6bd4:	f43f ae46 	beq.w	6864 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    6bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
    6bdc:	9a01      	ldr	r2, [sp, #4]
    6bde:	4093      	lsls	r3, r2
    6be0:	9a02      	ldr	r2, [sp, #8]
    6be2:	6892      	ldr	r2, [r2, #8]
    6be4:	429a      	cmp	r2, r3
    6be6:	f63f ae3d 	bhi.w	6864 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
    6bea:	f1b9 0f00 	cmp.w	r9, #0
    6bee:	d003      	beq.n	6bf8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    6bf0:	4942      	ldr	r1, [pc, #264]	; (6cfc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
    6bf2:	4648      	mov	r0, r9
    6bf4:	f7ff fd2c 	bl	6650 <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    6bf8:	f04f 0a02 	mov.w	sl, #2
    6bfc:	9b01      	ldr	r3, [sp, #4]
    6bfe:	fa0a f803 	lsl.w	r8, sl, r3
    6c02:	9b05      	ldr	r3, [sp, #20]
    6c04:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6c06:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c0a:	2100      	movs	r1, #0
    6c0c:	4620      	mov	r0, r4
    6c0e:	f00a fe0d 	bl	1182c <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    6c12:	2203      	movs	r2, #3
    6c14:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    6c16:	2381      	movs	r3, #129	; 0x81
    6c18:	f884 3020 	strb.w	r3, [r4, #32]
    6c1c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
    6c20:	2300      	movs	r3, #0
    6c22:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
    6c24:	2182      	movs	r1, #130	; 0x82
    6c26:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    6c2a:	9802      	ldr	r0, [sp, #8]
    6c2c:	6841      	ldr	r1, [r0, #4]
    6c2e:	6461      	str	r1, [r4, #68]	; 0x44
    6c30:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    6c32:	6882      	ldr	r2, [r0, #8]
    6c34:	65a2      	str	r2, [r4, #88]	; 0x58
    6c36:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    6c38:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
    6c3a:	f44f 7a00 	mov.w	sl, #512	; 0x200
    6c3e:	469b      	mov	fp, r3
    6c40:	e005      	b.n	6c4e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
    6c42:	4652      	mov	r2, sl
    6c44:	4659      	mov	r1, fp
    6c46:	4620      	mov	r0, r4
    6c48:	f00a fdf0 	bl	1182c <memset>
  for (uint32_t i = 0; i < ns; i++) {
    6c4c:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    6c4e:	6833      	ldr	r3, [r6, #0]
    6c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c52:	4622      	mov	r2, r4
    6c54:	eb08 0107 	add.w	r1, r8, r7
    6c58:	4630      	mov	r0, r6
    6c5a:	4798      	blx	r3
    6c5c:	9000      	str	r0, [sp, #0]
    6c5e:	2800      	cmp	r0, #0
    6c60:	f43f adfd 	beq.w	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6c64:	2f00      	cmp	r7, #0
    6c66:	d0ec      	beq.n	6c42 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    6c68:	3701      	adds	r7, #1
    6c6a:	9b04      	ldr	r3, [sp, #16]
    6c6c:	42bb      	cmp	r3, r7
    6c6e:	d1ee      	bne.n	6c4e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
    6c70:	f1b9 0f00 	cmp.w	r9, #0
    6c74:	d00f      	beq.n	6c96 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    6c76:	4922      	ldr	r1, [pc, #136]	; (6d00 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
    6c78:	4648      	mov	r0, r9
    6c7a:	f7ff fce9 	bl	6650 <Print::write(char const*)>
  return true;
    6c7e:	9d00      	ldr	r5, [sp, #0]
    6c80:	e5f8      	b.n	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6c82:	9d08      	ldr	r5, [sp, #32]
    6c84:	e5eb      	b.n	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6c86:	9d08      	ldr	r5, [sp, #32]
    6c88:	e5e9      	b.n	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6c8a:	9d08      	ldr	r5, [sp, #32]
    6c8c:	e5e7      	b.n	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6c8e:	9d08      	ldr	r5, [sp, #32]
    6c90:	e5e5      	b.n	685e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
    6c92:	2500      	movs	r5, #0
    6c94:	e5ee      	b.n	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
    6c96:	9d00      	ldr	r5, [sp, #0]
    6c98:	e5ec      	b.n	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
    6c9a:	4605      	mov	r5, r0
    6c9c:	e5ea      	b.n	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
    6c9e:	9f03      	ldr	r7, [sp, #12]
    6ca0:	3707      	adds	r7, #7
    6ca2:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6ca4:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    6ca8:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    6cac:	9b04      	ldr	r3, [sp, #16]
    6cae:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    6cb2:	f4ff addf 	bcc.w	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
    6cba:	2100      	movs	r1, #0
    6cbc:	4620      	mov	r0, r4
    6cbe:	f00a fdb5 	bl	1182c <memset>
  secBuf[0] = 0X7;
    6cc2:	2307      	movs	r3, #7
    6cc4:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6cc6:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6cca:	f4bf af59 	bcs.w	6b80 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6cce:	9b05      	ldr	r3, [sp, #20]
    6cd0:	9a04      	ldr	r2, [sp, #16]
    6cd2:	1899      	adds	r1, r3, r2
    6cd4:	9802      	ldr	r0, [sp, #8]
    6cd6:	f7ff fd0b 	bl	66f0 <ExFatFormatter::writeUpcase(unsigned long)>
    6cda:	2800      	cmp	r0, #0
    6cdc:	d0dd      	beq.n	6c9a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    6cde:	f44f 7300 	mov.w	r3, #512	; 0x200
    6ce2:	9a01      	ldr	r2, [sp, #4]
    6ce4:	4093      	lsls	r3, r2
    6ce6:	9a02      	ldr	r2, [sp, #8]
    6ce8:	6892      	ldr	r2, [r2, #8]
    6cea:	429a      	cmp	r2, r3
    6cec:	f67f af7d 	bls.w	6bea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
    6cf0:	e5c0      	b.n	6874 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6cf2:	bf00      	nop
    6cf4:	20002104 	.word	0x20002104
    6cf8:	200020f0 	.word	0x200020f0
    6cfc:	20002108 	.word	0x20002108
    6d00:	20002118 	.word	0x20002118

00006d04 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    6d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d08:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
    6d0a:	460e      	mov	r6, r1
    6d0c:	f101 081e 	add.w	r8, r1, #30
    6d10:	e00c      	b.n	6d2c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    6d12:	4620      	mov	r0, r4
    6d14:	f004 fd98 	bl	b848 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    6d18:	f004 feb4 	bl	ba84 <toUpcase(unsigned short)>
    6d1c:	4605      	mov	r5, r0
    6d1e:	4638      	mov	r0, r7
    6d20:	f004 feb0 	bl	ba84 <toUpcase(unsigned short)>
    6d24:	4285      	cmp	r5, r0
    6d26:	d111      	bne.n	6d4c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
    6d28:	4546      	cmp	r6, r8
    6d2a:	d00d      	beq.n	6d48 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
    6d2c:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
    6d30:	89a3      	ldrh	r3, [r4, #12]
    6d32:	2b00      	cmp	r3, #0
    6d34:	d1ed      	bne.n	6d12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
    6d36:	6862      	ldr	r2, [r4, #4]
    6d38:	68a3      	ldr	r3, [r4, #8]
    6d3a:	429a      	cmp	r2, r3
    6d3c:	d1e9      	bne.n	6d12 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
    6d3e:	fab7 f087 	clz	r0, r7
    6d42:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    6d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    6d48:	2001      	movs	r0, #1
    6d4a:	e7fb      	b.n	6d44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
    6d4c:	2000      	movs	r0, #0
    6d4e:	e7f9      	b.n	6d44 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

00006d50 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    6d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d54:	b083      	sub	sp, #12
    6d56:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    6d58:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6d5c:	2b00      	cmp	r3, #0
    6d5e:	d03e      	beq.n	6dde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6d60:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6d62:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    6d66:	2b01      	cmp	r3, #1
    6d68:	d94b      	bls.n	6e02 <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
    6d6a:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6d6c:	2302      	movs	r3, #2
    6d6e:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
    6d70:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6d72:	3a01      	subs	r2, #1
    6d74:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6d76:	f8df b098 	ldr.w	fp, [pc, #152]	; 6e10 <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    6d7a:	2200      	movs	r2, #0
    6d7c:	9901      	ldr	r1, [sp, #4]
    6d7e:	4648      	mov	r0, r9
    6d80:	f7fe fa8a 	bl	5298 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6d84:	b358      	cbz	r0, 6dde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6d86:	7803      	ldrb	r3, [r0, #0]
    6d88:	2bc1      	cmp	r3, #193	; 0xc1
    6d8a:	d128      	bne.n	6dde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
    6d8c:	4605      	mov	r5, r0
    6d8e:	f100 081e 	add.w	r8, r0, #30
    6d92:	e00f      	b.n	6db4 <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
    6d94:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    6d98:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    6d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6d9e:	d31b      	bcc.n	6dd8 <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
    6da0:	b380      	cbz	r0, 6e04 <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6da2:	463a      	mov	r2, r7
    6da4:	4631      	mov	r1, r6
    6da6:	f004 fdca 	bl	b93e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6daa:	4606      	mov	r6, r0
    6dac:	b1b8      	cbz	r0, 6dde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6dae:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    6db0:	45a8      	cmp	r8, r5
    6db2:	d01c      	beq.n	6dee <ExFatFile::getName8(char*, unsigned int)+0x9e>
    6db4:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    6db8:	2c00      	cmp	r4, #0
    6dba:	d0eb      	beq.n	6d94 <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
    6dbc:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6dc0:	b29b      	uxth	r3, r3
    6dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6dc6:	d20a      	bcs.n	6dde <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6dc8:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    6dcc:	f3c0 0009 	ubfx	r0, r0, #0, #10
    6dd0:	4304      	orrs	r4, r0
    6dd2:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
    6dd6:	e7e4      	b.n	6da2 <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
    6dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6ddc:	d305      	bcc.n	6dea <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    6dde:	2000      	movs	r0, #0
    6de0:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
    6de4:	b003      	add	sp, #12
    6de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    6dea:	4604      	mov	r4, r0
    6dec:	e7e0      	b.n	6db0 <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	3301      	adds	r3, #1
    6df2:	b2db      	uxtb	r3, r3
    6df4:	461a      	mov	r2, r3
    6df6:	9301      	str	r3, [sp, #4]
    6df8:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    6dfc:	4293      	cmp	r3, r2
    6dfe:	d2bc      	bcs.n	6d7a <ExFatFile::getName8(char*, unsigned int)+0x2a>
    6e00:	e000      	b.n	6e04 <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
    6e02:	460e      	mov	r6, r1
  *str = '\0';
    6e04:	2300      	movs	r3, #0
    6e06:	7033      	strb	r3, [r6, #0]
  return str - name;
    6e08:	eba6 000a 	sub.w	r0, r6, sl
    6e0c:	e7ea      	b.n	6de4 <ExFatFile::getName8(char*, unsigned int)+0x94>
    6e0e:	bf00      	nop
    6e10:	000ffc00 	.word	0x000ffc00

00006e14 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    6e14:	b570      	push	{r4, r5, r6, lr}
    6e16:	460c      	mov	r4, r1
    next = begin;
    6e18:	680b      	ldr	r3, [r1, #0]
    6e1a:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    6e1c:	2600      	movs	r6, #0
    6e1e:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    6e20:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    6e22:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
    6e26:	e016      	b.n	6e56 <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
    6e28:	4620      	mov	r0, r4
    6e2a:	f004 fd0d 	bl	b848 <FsName::get16()>
    if (u == 0XFFFF) {
    6e2e:	42a8      	cmp	r0, r5
    6e30:	d020      	beq.n	6e74 <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
    6e32:	f004 fe27 	bl	ba84 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    6e36:	03f3      	lsls	r3, r6, #15
    6e38:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
    6e3c:	fa53 f380 	uxtab	r3, r3, r0
    6e40:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    6e42:	f3c3 034e 	ubfx	r3, r3, #1, #15
    6e46:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    6e4a:	0a00      	lsrs	r0, r0, #8
    6e4c:	fa10 f383 	uxtah	r3, r0, r3
    6e50:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    6e52:	6920      	ldr	r0, [r4, #16]
    6e54:	3001      	adds	r0, #1
  fname->nameLength = 0;
    6e56:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
    6e58:	89a3      	ldrh	r3, [r4, #12]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	d1e4      	bne.n	6e28 <ExFatFile::hashName(ExName_t*)+0x14>
    6e5e:	6862      	ldr	r2, [r4, #4]
    6e60:	68a3      	ldr	r3, [r4, #8]
    6e62:	429a      	cmp	r2, r3
    6e64:	d1e0      	bne.n	6e28 <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    6e66:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    6e68:	3801      	subs	r0, #1
    6e6a:	28fe      	cmp	r0, #254	; 0xfe
    6e6c:	bf8c      	ite	hi
    6e6e:	2000      	movhi	r0, #0
    6e70:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    6e72:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    6e74:	2000      	movs	r0, #0
    6e76:	e7fc      	b.n	6e72 <ExFatFile::hashName(ExName_t*)+0x5e>

00006e78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e7c:	b083      	sub	sp, #12
    6e7e:	4607      	mov	r7, r0
    6e80:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6e82:	9101      	str	r1, [sp, #4]
    6e84:	b1e9      	cbz	r1, 6ec2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    6e86:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
    6e88:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
    6e8c:	42b3      	cmp	r3, r6
    6e8e:	bf98      	it	ls
    6e90:	2600      	movls	r6, #0
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    6e92:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    6e96:	f006 0307 	and.w	r3, r6, #7
    6e9a:	2401      	movs	r4, #1
    6e9c:	409c      	lsls	r4, r3
    6e9e:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
    6ea0:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
    6ea2:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
    6ea4:	f04f 0b00 	mov.w	fp, #0
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    6ea8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    6eac:	465a      	mov	r2, fp
    6eae:	eb01 3115 	add.w	r1, r1, r5, lsr #12
    6eb2:	4638      	mov	r0, r7
    6eb4:	f004 fc89 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6eb8:	b388      	cbz	r0, 6f1e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
    6eba:	4482      	add	sl, r0
    6ebc:	f500 7100 	add.w	r1, r0, #512	; 0x200
    6ec0:	e023      	b.n	6f0a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6ec2:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
    6ec6:	e7df      	b.n	6e88 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    6ec8:	46a8      	mov	r8, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6eca:	42ae      	cmp	r6, r5
    6ecc:	d029      	beq.n	6f22 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    6ece:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    6ed2:	42ab      	cmp	r3, r5
    6ed4:	d91e      	bls.n	6f14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
    6ed6:	0064      	lsls	r4, r4, #1
    6ed8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    6edc:	d010      	beq.n	6f00 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
    6ede:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
    6ee0:	4222      	tst	r2, r4
    6ee2:	d1f1      	bne.n	6ec8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
    6ee4:	eba5 0308 	sub.w	r3, r5, r8
    6ee8:	454b      	cmp	r3, r9
    6eea:	d1ee      	bne.n	6eca <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
    6eec:	9b01      	ldr	r3, [sp, #4]
    6eee:	b923      	cbnz	r3, 6efa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    6ef0:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    6ef4:	bf08      	it	eq
    6ef6:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    6efa:	f108 0002 	add.w	r0, r8, #2
    6efe:	e011      	b.n	6f24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
    6f00:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    6f04:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
    6f06:	4551      	cmp	r1, sl
    6f08:	d007      	beq.n	6f1a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
    6f0a:	2c00      	cmp	r4, #0
    6f0c:	d0f8      	beq.n	6f00 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
    6f0e:	f89a 2000 	ldrb.w	r2, [sl]
    6f12:	e7e4      	b.n	6ede <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
    6f14:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
    6f16:	46d8      	mov	r8, fp
    6f18:	465d      	mov	r5, fp
    }
    i = 0;
    6f1a:	46da      	mov	sl, fp
    6f1c:	e7c4      	b.n	6ea8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
    6f1e:	2000      	movs	r0, #0
    6f20:	e000      	b.n	6f24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
    6f22:	2001      	movs	r0, #1
  }
  return 0;
}
    6f24:	b003      	add	sp, #12
    6f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006f2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6f2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f2e:	4615      	mov	r5, r2
    6f30:	461e      	mov	r6, r3
  uint32_t sector;
  uint32_t start = cluster - 2;
    6f32:	3902      	subs	r1, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6f34:	188b      	adds	r3, r1, r2
    6f36:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    6f3a:	4293      	cmp	r3, r2
    6f3c:	d854      	bhi.n	6fe8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
    6f3e:	4607      	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    6f40:	b15e      	cbz	r6, 6f5a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6f42:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    6f46:	4283      	cmp	r3, r0
    6f48:	d90d      	bls.n	6f66 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    6f4a:	4288      	cmp	r0, r1
    6f4c:	d30b      	bcc.n	6f66 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6f4e:	4293      	cmp	r3, r2
    6f50:	bf28      	it	cs
    6f52:	2300      	movcs	r3, #0
    6f54:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    6f58:	e005      	b.n	6f66 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    6f5a:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    6f5e:	428b      	cmp	r3, r1
      m_bitmapStart = start;
    6f60:	bf88      	it	hi
    6f62:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    6f66:	f001 0307 	and.w	r3, r1, #7
    6f6a:	2401      	movs	r4, #1
    6f6c:	409c      	lsls	r4, r3
    6f6e:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
    6f70:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    6f74:	eb03 3811 	add.w	r8, r3, r1, lsr #12
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    6f78:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
    6f7c:	f04f 0901 	mov.w	r9, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6f80:	f04f 0a00 	mov.w	sl, #0
    6f84:	464a      	mov	r2, r9
    6f86:	4641      	mov	r1, r8
    6f88:	4638      	mov	r0, r7
    6f8a:	f004 fc1e 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6f8e:	4684      	mov	ip, r0
    6f90:	b368      	cbz	r0, 6fee <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
    6f92:	4458      	add	r0, fp
    6f94:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
    6f98:	b1e4      	cbz	r4, 6fd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    6f9a:	4603      	mov	r3, r0
    6f9c:	7802      	ldrb	r2, [r0, #0]
    6f9e:	4222      	tst	r2, r4
    6fa0:	bf14      	ite	ne
    6fa2:	2101      	movne	r1, #1
    6fa4:	2100      	moveq	r1, #0
    6fa6:	42b1      	cmp	r1, r6
    6fa8:	d025      	beq.n	6ff6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
    6faa:	4062      	eors	r2, r4
    6fac:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
    6fae:	3d01      	subs	r5, #1
    6fb0:	d018      	beq.n	6fe4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
    6fb2:	0064      	lsls	r4, r4, #1
    6fb4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    6fb8:	d00c      	beq.n	6fd4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    6fba:	7819      	ldrb	r1, [r3, #0]
    6fbc:	4221      	tst	r1, r4
    6fbe:	bf14      	ite	ne
    6fc0:	2201      	movne	r2, #1
    6fc2:	2200      	moveq	r2, #0
    6fc4:	42b2      	cmp	r2, r6
    6fc6:	d014      	beq.n	6ff2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
    6fc8:	4061      	eors	r1, r4
    6fca:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
    6fcc:	3d01      	subs	r5, #1
    6fce:	d1f0      	bne.n	6fb2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
    6fd0:	2001      	movs	r0, #1
    6fd2:	e00a      	b.n	6fea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
    6fd4:	3001      	adds	r0, #1
      mask = 1;
    6fd6:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
    6fd8:	4560      	cmp	r0, ip
    6fda:	d1dd      	bne.n	6f98 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    6fdc:	f108 0801 	add.w	r8, r8, #1
    i = 0;
    6fe0:	46d3      	mov	fp, sl
    6fe2:	e7cf      	b.n	6f84 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
    6fe4:	2001      	movs	r0, #1
    6fe6:	e000      	b.n	6fea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  }

 fail:
  return false;
    6fe8:	2000      	movs	r0, #0
}
    6fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    6fee:	2000      	movs	r0, #0
    6ff0:	e7fb      	b.n	6fea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    6ff2:	2000      	movs	r0, #0
    6ff4:	e7f9      	b.n	6fea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    6ff6:	2000      	movs	r0, #0
    6ff8:	e7f7      	b.n	6fea <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

00006ffa <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6ffa:	b510      	push	{r4, lr}
    6ffc:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6ffe:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7002:	6849      	ldr	r1, [r1, #4]
    7004:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
    7006:	6823      	ldr	r3, [r4, #0]
    7008:	3b02      	subs	r3, #2
    700a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    700e:	fa03 f30c 	lsl.w	r3, r3, ip
    7012:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    7016:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
    701a:	4419      	add	r1, r3
    701c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7020:	f004 fbd3 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    7024:	4603      	mov	r3, r0
    7026:	b118      	cbz	r0, 7030 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
    7028:	6862      	ldr	r2, [r4, #4]
    702a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    702e:	4413      	add	r3, r2
}
    7030:	4618      	mov	r0, r3
    7032:	bd10      	pop	{r4, pc}

00007034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7034:	b538      	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7036:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    703a:	3301      	adds	r3, #1
    703c:	428b      	cmp	r3, r1
    703e:	d202      	bcs.n	7046 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    DBG_FAIL_MACRO;
    return -1;
    7040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    7044:	bd38      	pop	{r3, r4, r5, pc}
    7046:	460c      	mov	r4, r1
    7048:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    704a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    704e:	2200      	movs	r2, #0
    7050:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7054:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7058:	f004 fbb7 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    705c:	b148      	cbz	r0, 7072 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    705e:	00a4      	lsls	r4, r4, #2
    7060:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    7064:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    7066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    706a:	d005      	beq.n	7078 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
    706c:	602b      	str	r3, [r5, #0]
  return 1;
    706e:	2001      	movs	r0, #1
    7070:	e7e8      	b.n	7044 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
    7072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7076:	e7e5      	b.n	7044 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
    7078:	2000      	movs	r0, #0
    707a:	e7e3      	b.n	7044 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

0000707c <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    707c:	b530      	push	{r4, r5, lr}
    707e:	b083      	sub	sp, #12
    7080:	4605      	mov	r5, r0
    7082:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
    7084:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
    7086:	aa01      	add	r2, sp, #4
    7088:	9901      	ldr	r1, [sp, #4]
    708a:	4628      	mov	r0, r5
    708c:	f7ff ffd2 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    7090:	2800      	cmp	r0, #0
    7092:	db03      	blt.n	709c <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
    7094:	3401      	adds	r4, #1
  } while (status);
    7096:	2800      	cmp	r0, #0
    7098:	d1f5      	bne.n	7086 <ExFatPartition::chainSize(unsigned long)+0xa>
    709a:	e000      	b.n	709e <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
    709c:	2400      	movs	r4, #0
}
    709e:	4620      	mov	r0, r4
    70a0:	b003      	add	sp, #12
    70a2:	bd30      	pop	{r4, r5, pc}

000070a4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    70a4:	b570      	push	{r4, r5, r6, lr}
    70a6:	4606      	mov	r6, r0
    70a8:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    70aa:	6849      	ldr	r1, [r1, #4]
    70ac:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    70b0:	400b      	ands	r3, r1
    70b2:	4413      	add	r3, r2
  pos->position += offset;
    70b4:	4411      	add	r1, r2
    70b6:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    70b8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    70bc:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
    70be:	b2d2      	uxtb	r2, r2
    70c0:	40d3      	lsrs	r3, r2
  while (tmp--) {
    70c2:	1e5d      	subs	r5, r3, #1
    70c4:	b963      	cbnz	r3, 70e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
    70c6:	2001      	movs	r0, #1
    70c8:	e012      	b.n	70f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
    70ca:	4622      	mov	r2, r4
    70cc:	6821      	ldr	r1, [r4, #0]
    70ce:	4630      	mov	r0, r6
    70d0:	f7ff ffb0 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    70d4:	2801      	cmp	r0, #1
    70d6:	d10b      	bne.n	70f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
    70d8:	3d01      	subs	r5, #1
    70da:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    70de:	d006      	beq.n	70ee <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
    70e0:	7a23      	ldrb	r3, [r4, #8]
    70e2:	2b00      	cmp	r3, #0
    70e4:	d0f1      	beq.n	70ca <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
    70e6:	6823      	ldr	r3, [r4, #0]
    70e8:	3301      	adds	r3, #1
    70ea:	6023      	str	r3, [r4, #0]
    70ec:	e7f4      	b.n	70d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
    70ee:	2001      	movs	r0, #1
}
    70f0:	bd70      	pop	{r4, r5, r6, pc}

000070f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    70f2:	2901      	cmp	r1, #1
    70f4:	d919      	bls.n	712a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    70f6:	b538      	push	{r3, r4, r5, lr}
    70f8:	460c      	mov	r4, r1
    70fa:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    70fc:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7100:	3301      	adds	r3, #1
    7102:	428b      	cmp	r3, r1
    7104:	d201      	bcs.n	710a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    7106:	2000      	movs	r0, #0
}
    7108:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    710a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    710e:	2201      	movs	r2, #1
    7110:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7114:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7118:	f004 fb57 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    711c:	b138      	cbz	r0, 712e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    711e:	00a4      	lsls	r4, r4, #2
    7120:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    7124:	5105      	str	r5, [r0, r4]
  return true;
    7126:	2001      	movs	r0, #1
    7128:	e7ee      	b.n	7108 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    712a:	2000      	movs	r0, #0
}
    712c:	4770      	bx	lr
  return false;
    712e:	2000      	movs	r0, #0
    7130:	e7ea      	b.n	7108 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

00007132 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    7132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7136:	b082      	sub	sp, #8
    7138:	4606      	mov	r6, r0
    713a:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    713c:	460f      	mov	r7, r1
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    713e:	f04f 0800 	mov.w	r8, #0
    7142:	e00d      	b.n	7160 <ExFatPartition::freeChain(unsigned long)+0x2e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    }
    cluster = next;
    7144:	461c      	mov	r4, r3
    7146:	e00b      	b.n	7160 <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7148:	1c62      	adds	r2, r4, #1
    714a:	4643      	mov	r3, r8
    714c:	1bd2      	subs	r2, r2, r7
    714e:	4639      	mov	r1, r7
    7150:	4630      	mov	r0, r6
    7152:	f7ff feea 	bl	6f2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7156:	4603      	mov	r3, r0
    7158:	b318      	cbz	r0, 71a2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    715a:	9f01      	ldr	r7, [sp, #4]
  } while (status);
    715c:	b30d      	cbz	r5, 71a2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    715e:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
    7160:	aa01      	add	r2, sp, #4
    7162:	4621      	mov	r1, r4
    7164:	4630      	mov	r0, r6
    7166:	f7ff ff65 	bl	7034 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    716a:	1e05      	subs	r5, r0, #0
    716c:	db18      	blt.n	71a0 <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
    716e:	4642      	mov	r2, r8
    7170:	4621      	mov	r1, r4
    7172:	4630      	mov	r0, r6
    7174:	f7ff ffbd 	bl	70f2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7178:	4603      	mov	r3, r0
    717a:	b190      	cbz	r0, 71a2 <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
    717c:	2d00      	cmp	r5, #0
    717e:	d0e3      	beq.n	7148 <ExFatPartition::freeChain(unsigned long)+0x16>
    7180:	9b01      	ldr	r3, [sp, #4]
    7182:	1c62      	adds	r2, r4, #1
    7184:	429a      	cmp	r2, r3
    7186:	d0dd      	beq.n	7144 <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7188:	1c62      	adds	r2, r4, #1
    718a:	4643      	mov	r3, r8
    718c:	1bd2      	subs	r2, r2, r7
    718e:	4639      	mov	r1, r7
    7190:	4630      	mov	r0, r6
    7192:	f7ff feca 	bl	6f2a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7196:	4603      	mov	r3, r0
    7198:	b118      	cbz	r0, 71a2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    719a:	9f01      	ldr	r7, [sp, #4]
    719c:	463c      	mov	r4, r7
    719e:	e7df      	b.n	7160 <ExFatPartition::freeChain(unsigned long)+0x2e>

  return true;

 fail:
  return false;
    71a0:	2300      	movs	r3, #0
}
    71a2:	4618      	mov	r0, r3
    71a4:	b002      	add	sp, #8
    71a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071aa <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    71aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    71ae:	4606      	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    71b0:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
    71b4:	2500      	movs	r5, #0
  uint32_t nc = 0;
    71b6:	462c      	mov	r4, r5
    71b8:	f500 7804 	add.w	r8, r0, #528	; 0x210
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    71bc:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    71be:	f101 0901 	add.w	r9, r1, #1
    71c2:	2200      	movs	r2, #0
    71c4:	4640      	mov	r0, r8
    71c6:	f004 fb00 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    71ca:	b308      	cbz	r0, 7210 <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    71cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    71d0:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
    71d4:	e007      	b.n	71e6 <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
    71d6:	3508      	adds	r5, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    71d8:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    71da:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    71de:	42a0      	cmp	r0, r4
    71e0:	d911      	bls.n	7206 <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    71e2:	4574      	cmp	r4, lr
    71e4:	d012      	beq.n	720c <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
    71e6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    71ea:	29ff      	cmp	r1, #255	; 0xff
    71ec:	d0f3      	beq.n	71d6 <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
    71ee:	2900      	cmp	r1, #0
    71f0:	d0f2      	beq.n	71d8 <ExFatPartition::freeClusterCount()+0x2e>
    71f2:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    71f4:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
    71f6:	4219      	tst	r1, r3
            usedCount++;
    71f8:	bf18      	it	ne
    71fa:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    71fc:	005b      	lsls	r3, r3, #1
    71fe:	b2db      	uxtb	r3, r3
    7200:	3a01      	subs	r2, #1
    7202:	d1f8      	bne.n	71f6 <ExFatPartition::freeClusterCount()+0x4c>
    7204:	e7e8      	b.n	71d8 <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
    7206:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    7208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    720c:	4649      	mov	r1, r9
    720e:	e7d6      	b.n	71be <ExFatPartition::freeClusterCount()+0x14>
      return 0;
    7210:	2000      	movs	r0, #0
    7212:	e7f9      	b.n	7208 <ExFatPartition::freeClusterCount()+0x5e>

00007214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7218:	4604      	mov	r4, r0
    721a:	460b      	mov	r3, r1
    721c:	4616      	mov	r6, r2
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    721e:	2100      	movs	r1, #0
    7220:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
    7224:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    7228:	6043      	str	r3, [r0, #4]
    m_status = 0;
    722a:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
    722c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7230:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
    7232:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
    7236:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    723a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    723e:	f500 7704 	add.w	r7, r0, #528	; 0x210
    7242:	460a      	mov	r2, r1
    7244:	4638      	mov	r0, r7
    7246:	f004 fac0 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    724a:	4680      	mov	r8, r0
    724c:	fab0 f080 	clz	r0, r0
    7250:	0940      	lsrs	r0, r0, #5
    7252:	2e04      	cmp	r6, #4
    7254:	bf94      	ite	ls
    7256:	4605      	movls	r5, r0
    7258:	f040 0501 	orrhi.w	r5, r0, #1
    725c:	2d00      	cmp	r5, #0
    725e:	d154      	bne.n	730a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    7260:	b1ce      	cbz	r6, 7296 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    7262:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7264:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    7268:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
    726c:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    7270:	d14c      	bne.n	730c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    7272:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    7276:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    727a:	2b00      	cmp	r3, #0
    727c:	d046      	beq.n	730c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    727e:	eb08 1606 	add.w	r6, r8, r6, lsl #4
    7282:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
    7286:	2200      	movs	r2, #0
    7288:	4631      	mov	r1, r6
    728a:	4638      	mov	r0, r7
    728c:	f004 fa9d 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7290:	4680      	mov	r8, r0
    7292:	b908      	cbnz	r0, 7298 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
    7294:	e03a      	b.n	730c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
    7296:	2600      	movs	r6, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    7298:	2205      	movs	r2, #5
    729a:	491e      	ldr	r1, [pc, #120]	; (7314 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
    729c:	f108 0003 	add.w	r0, r8, #3
    72a0:	f009 fea4 	bl	10fec <strncmp>
    72a4:	bb90      	cbnz	r0, 730c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    72a6:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
    72aa:	2b09      	cmp	r3, #9
    72ac:	d12e      	bne.n	730c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    72ae:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    72b2:	4433      	add	r3, r6
    72b4:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    72b8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    72bc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    72c0:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    72c4:	4433      	add	r3, r6
    72c6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    72ca:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    72ce:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    72d2:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    72d6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    72da:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    72de:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    72e2:	3309      	adds	r3, #9
    72e4:	2501      	movs	r5, #1
    72e6:	fa05 f303 	lsl.w	r3, r5, r3
    72ea:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    72ee:	3b01      	subs	r3, #1
    72f0:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    72f4:	2100      	movs	r1, #0
    72f6:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    72fa:	462a      	mov	r2, r5
    72fc:	4620      	mov	r0, r4
    72fe:	f7ff fdbb 	bl	6e78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7302:	2340      	movs	r3, #64	; 0x40
    7304:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    7308:	e000      	b.n	730c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>

 fail:
  return false;
    730a:	2500      	movs	r5, #0
}
    730c:	4628      	mov	r0, r5
    730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7312:	bf00      	nop
    7314:	20002138 	.word	0x20002138

00007318 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7318:	b510      	push	{r4, lr}
    731a:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    731c:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    7320:	f7ff feac 	bl	707c <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7324:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    7328:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    732a:	b2db      	uxtb	r3, r3
}
    732c:	4098      	lsls	r0, r3
    732e:	bd10      	pop	{r4, pc}

00007330 <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    7330:	b538      	push	{r3, r4, r5, lr}
    7332:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7334:	4602      	mov	r2, r0
    7336:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    733a:	4629      	mov	r1, r5
    733c:	6880      	ldr	r0, [r0, #8]
    733e:	f002 f940 	bl	95c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7342:	b140      	cbz	r0, 7356 <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    7344:	b945      	cbnz	r5, 7358 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7346:	78a3      	ldrb	r3, [r4, #2]
    7348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    734c:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    734e:	78a3      	ldrb	r3, [r4, #2]
    7350:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7354:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    7356:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    7358:	3501      	adds	r5, #1
    735a:	6923      	ldr	r3, [r4, #16]
    735c:	42ab      	cmp	r3, r5
    735e:	d0f6      	beq.n	734e <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7360:	78a3      	ldrb	r3, [r4, #2]
    7362:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7366:	70a3      	strb	r3, [r4, #2]
    7368:	e7f1      	b.n	734e <FatFile::addCluster()+0x1e>
	...

0000736c <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    736c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    7370:	7803      	ldrb	r3, [r0, #0]
    7372:	f013 0f20 	tst.w	r3, #32
    7376:	d133      	bne.n	73e0 <FatFile::addDirCluster()+0x74>
    7378:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    737a:	6942      	ldr	r2, [r0, #20]
    737c:	4b1b      	ldr	r3, [pc, #108]	; (73ec <FatFile::addDirCluster()+0x80>)
    737e:	429a      	cmp	r2, r3
    7380:	d301      	bcc.n	7386 <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    7382:	2700      	movs	r7, #0
    7384:	e02d      	b.n	73e2 <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
    7386:	f7ff ffd3 	bl	7330 <FatFile::addCluster()>
    738a:	4607      	mov	r7, r0
    738c:	b348      	cbz	r0, 73e2 <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
    738e:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7390:	692e      	ldr	r6, [r5, #16]
    7392:	3e02      	subs	r6, #2
    7394:	7983      	ldrb	r3, [r0, #6]
    7396:	409e      	lsls	r6, r3
    7398:	6943      	ldr	r3, [r0, #20]
    739a:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    739c:	7903      	ldrb	r3, [r0, #4]
    739e:	b1b3      	cbz	r3, 73ce <FatFile::addDirCluster()+0x62>
    73a0:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
    73a2:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
    73a6:	f44f 7a00 	mov.w	sl, #512	; 0x200
    73aa:	46a1      	mov	r9, r4
    73ac:	4642      	mov	r2, r8
    73ae:	fa56 f184 	uxtab	r1, r6, r4
    73b2:	3028      	adds	r0, #40	; 0x28
    73b4:	f004 fa09 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    73b8:	b1b0      	cbz	r0, 73e8 <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
    73ba:	4652      	mov	r2, sl
    73bc:	4649      	mov	r1, r9
    73be:	f00a fa35 	bl	1182c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    73c2:	68a8      	ldr	r0, [r5, #8]
    73c4:	3401      	adds	r4, #1
    73c6:	7902      	ldrb	r2, [r0, #4]
    73c8:	b2e3      	uxtb	r3, r4
    73ca:	429a      	cmp	r2, r3
    73cc:	d8ee      	bhi.n	73ac <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    73ce:	7982      	ldrb	r2, [r0, #6]
    73d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    73d4:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    73d6:	696a      	ldr	r2, [r5, #20]
    73d8:	fa12 f383 	uxtah	r3, r2, r3
    73dc:	616b      	str	r3, [r5, #20]
  return true;
    73de:	e000      	b.n	73e2 <FatFile::addDirCluster()+0x76>
  return false;
    73e0:	2700      	movs	r7, #0
}
    73e2:	4638      	mov	r0, r7
    73e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
    73e8:	2700      	movs	r7, #0
    73ea:	e7fa      	b.n	73e2 <FatFile::addDirCluster()+0x76>
    73ec:	001ffe00 	.word	0x001ffe00

000073f0 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    73f0:	b510      	push	{r4, lr}
    73f2:	4604      	mov	r4, r0
    73f4:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
    73f6:	6880      	ldr	r0, [r0, #8]
    73f8:	69a1      	ldr	r1, [r4, #24]
    73fa:	3028      	adds	r0, #40	; 0x28
    73fc:	f004 f9e5 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    7400:	4603      	mov	r3, r0
    7402:	b120      	cbz	r0, 740e <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    7404:	88a2      	ldrh	r2, [r4, #4]
    7406:	f002 020f 	and.w	r2, r2, #15
    740a:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
    740e:	4618      	mov	r0, r3
    7410:	bd10      	pop	{r4, pc}

00007412 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    7412:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
    7414:	7803      	ldrb	r3, [r0, #0]
    7416:	b10b      	cbz	r3, 741c <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7418:	2000      	movs	r0, #0
}
    741a:	bd38      	pop	{r3, r4, r5, pc}
    741c:	4604      	mov	r4, r0
    741e:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
    7420:	2224      	movs	r2, #36	; 0x24
    7422:	2100      	movs	r1, #0
    7424:	f00a fa02 	bl	1182c <memset>
  m_vol = vol;
    7428:	60a5      	str	r5, [r4, #8]
    return m_fatType;
    742a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    742c:	2b10      	cmp	r3, #16
    742e:	d007      	beq.n	7440 <FatFile::openRoot(FatVolume*)+0x2e>
    7430:	2b20      	cmp	r3, #32
    7432:	d007      	beq.n	7444 <FatFile::openRoot(FatVolume*)+0x32>
    7434:	2b0c      	cmp	r3, #12
    7436:	d001      	beq.n	743c <FatFile::openRoot(FatVolume*)+0x2a>
    7438:	2000      	movs	r0, #0
    743a:	e7ee      	b.n	741a <FatFile::openRoot(FatVolume*)+0x8>
    743c:	2320      	movs	r3, #32
    743e:	e002      	b.n	7446 <FatFile::openRoot(FatVolume*)+0x34>
    7440:	2320      	movs	r3, #32
    7442:	e000      	b.n	7446 <FatFile::openRoot(FatVolume*)+0x34>
    7444:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7446:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7448:	2001      	movs	r0, #1
    744a:	70a0      	strb	r0, [r4, #2]
  return true;
    744c:	e7e5      	b.n	741a <FatFile::openRoot(FatVolume*)+0x8>

0000744e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    744e:	b538      	push	{r3, r4, r5, lr}
    7450:	4604      	mov	r4, r0
    7452:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7454:	68cb      	ldr	r3, [r1, #12]
    7456:	b91b      	cbnz	r3, 7460 <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
    7458:	6889      	ldr	r1, [r1, #8]
    745a:	f7ff ffda 	bl	7412 <FatFile::openRoot(FatVolume*)>
}
    745e:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    7460:	2224      	movs	r2, #36	; 0x24
    7462:	2100      	movs	r1, #0
    7464:	f00a f9e2 	bl	1182c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    7468:	2310      	movs	r3, #16
    746a:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    746c:	2001      	movs	r0, #1
    746e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    7470:	68ab      	ldr	r3, [r5, #8]
    7472:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7474:	68eb      	ldr	r3, [r5, #12]
    7476:	6223      	str	r3, [r4, #32]
  return true;
    7478:	e7f1      	b.n	745e <FatFile::openCluster(FatFile*)+0x10>

0000747a <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    747a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    747e:	b083      	sub	sp, #12
    7480:	4604      	mov	r4, r0
    7482:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7484:	7883      	ldrb	r3, [r0, #2]
    7486:	f013 0f01 	tst.w	r3, #1
    748a:	f000 80b4 	beq.w	75f6 <FatFile::read(void*, unsigned int)+0x17c>
    748e:	4689      	mov	r9, r1
    7490:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7492:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7494:	f013 0f08 	tst.w	r3, #8
    7498:	d012      	beq.n	74c0 <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    749a:	69c3      	ldr	r3, [r0, #28]
    749c:	6942      	ldr	r2, [r0, #20]
    749e:	1a9b      	subs	r3, r3, r2
    74a0:	460a      	mov	r2, r1
    74a2:	4299      	cmp	r1, r3
    74a4:	bf28      	it	cs
    74a6:	461a      	movcs	r2, r3
    74a8:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    74aa:	9b00      	ldr	r3, [sp, #0]
    74ac:	2b00      	cmp	r3, #0
    74ae:	f000 80b7 	beq.w	7620 <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
    74b2:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
    74b4:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    74b8:	f104 0310 	add.w	r3, r4, #16
    74bc:	9301      	str	r3, [sp, #4]
    74be:	e05b      	b.n	7578 <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
    74c0:	f013 0f20 	tst.w	r3, #32
    74c4:	d0f1      	beq.n	74aa <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    74c6:	6883      	ldr	r3, [r0, #8]
    74c8:	895a      	ldrh	r2, [r3, #10]
    74ca:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    74cc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    74d0:	b29b      	uxth	r3, r3
    74d2:	9a00      	ldr	r2, [sp, #0]
    74d4:	429a      	cmp	r2, r3
    74d6:	bf28      	it	cs
    74d8:	461a      	movcs	r2, r3
    74da:	9200      	str	r2, [sp, #0]
    74dc:	e7e5      	b.n	74aa <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
    74de:	f890 a005 	ldrb.w	sl, [r0, #5]
    74e2:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    74e6:	f1b8 0f00 	cmp.w	r8, #0
    74ea:	d109      	bne.n	7500 <FatFile::read(void*, unsigned int)+0x86>
    74ec:	f1ba 0f00 	cmp.w	sl, #0
    74f0:	d106      	bne.n	7500 <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
    74f2:	b973      	cbnz	r3, 7512 <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    74f4:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
    74f8:	bf14      	ite	ne
    74fa:	6a03      	ldrne	r3, [r0, #32]
    74fc:	6a23      	ldreq	r3, [r4, #32]
    74fe:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7500:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7502:	6925      	ldr	r5, [r4, #16]
    7504:	3d02      	subs	r5, #2
    7506:	799a      	ldrb	r2, [r3, #6]
    7508:	4095      	lsls	r5, r2
    750a:	695b      	ldr	r3, [r3, #20]
    750c:	441d      	add	r5, r3
    750e:	4455      	add	r5, sl
    7510:	e03d      	b.n	758e <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
    7512:	f012 0f08 	tst.w	r2, #8
    7516:	d007      	beq.n	7528 <FatFile::read(void*, unsigned int)+0xae>
    7518:	78a3      	ldrb	r3, [r4, #2]
    751a:	f013 0f40 	tst.w	r3, #64	; 0x40
    751e:	d003      	beq.n	7528 <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
    7520:	6923      	ldr	r3, [r4, #16]
    7522:	3301      	adds	r3, #1
    7524:	6123      	str	r3, [r4, #16]
    7526:	e7eb      	b.n	7500 <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7528:	9a01      	ldr	r2, [sp, #4]
    752a:	6921      	ldr	r1, [r4, #16]
    752c:	f001 ff27 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7530:	2800      	cmp	r0, #0
    7532:	db60      	blt.n	75f6 <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
    7534:	2800      	cmp	r0, #0
    7536:	d1e3      	bne.n	7500 <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
    7538:	7823      	ldrb	r3, [r4, #0]
    753a:	f013 0f70 	tst.w	r3, #112	; 0x70
    753e:	d05a      	beq.n	75f6 <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7540:	9b00      	ldr	r3, [sp, #0]
    7542:	1bd8      	subs	r0, r3, r7
    7544:	e05d      	b.n	7602 <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
    7546:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
    754a:	42be      	cmp	r6, r7
    754c:	bf28      	it	cs
    754e:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
    7550:	68a0      	ldr	r0, [r4, #8]
    7552:	2200      	movs	r2, #0
    7554:	4629      	mov	r1, r5
    7556:	3028      	adds	r0, #40	; 0x28
    7558:	f004 f937 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    755c:	4601      	mov	r1, r0
    755e:	2800      	cmp	r0, #0
    7560:	d049      	beq.n	75f6 <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    7562:	4632      	mov	r2, r6
    7564:	4441      	add	r1, r8
    7566:	4648      	mov	r0, r9
    7568:	f005 fcda 	bl	cf20 <memcpy>
    dst += n;
    756c:	44b1      	add	r9, r6
    m_curPosition += n;
    756e:	6963      	ldr	r3, [r4, #20]
    7570:	4433      	add	r3, r6
    7572:	6163      	str	r3, [r4, #20]
  while (toRead) {
    7574:	1bbf      	subs	r7, r7, r6
    7576:	d0e3      	beq.n	7540 <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7578:	6963      	ldr	r3, [r4, #20]
    757a:	68a0      	ldr	r0, [r4, #8]
    757c:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7580:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
    7582:	f012 0f20 	tst.w	r2, #32
    7586:	d0aa      	beq.n	74de <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
    7588:	6a05      	ldr	r5, [r0, #32]
    758a:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    758e:	f1b8 0f00 	cmp.w	r8, #0
    7592:	d1d8      	bne.n	7546 <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7594:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7598:	d3d5      	bcc.n	7546 <FatFile::read(void*, unsigned int)+0xcc>
    759a:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    759e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    75a2:	429d      	cmp	r5, r3
    75a4:	d0cf      	beq.n	7546 <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    75a6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    75aa:	d32d      	bcc.n	7608 <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    75ac:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
    75b0:	7822      	ldrb	r2, [r4, #0]
    75b2:	f012 0f20 	tst.w	r2, #32
    75b6:	d106      	bne.n	75c6 <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    75b8:	f89b 2004 	ldrb.w	r2, [fp, #4]
    75bc:	eba2 020a 	sub.w	r2, r2, sl
    75c0:	4590      	cmp	r8, r2
    75c2:	bf28      	it	cs
    75c4:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
    75c6:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    75ca:	429d      	cmp	r5, r3
    75cc:	d808      	bhi.n	75e0 <FatFile::read(void*, unsigned int)+0x166>
    75ce:	eb05 0208 	add.w	r2, r5, r8
    75d2:	4293      	cmp	r3, r2
    75d4:	d204      	bcs.n	75e0 <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    75d6:	f10b 0028 	add.w	r0, fp, #40	; 0x28
    75da:	f004 f8cf 	bl	b77c <FsCache::sync()>
    75de:	b150      	cbz	r0, 75f6 <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    75e0:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    75e4:	6803      	ldr	r3, [r0, #0]
    75e6:	f8d3 b014 	ldr.w	fp, [r3, #20]
    75ea:	4643      	mov	r3, r8
    75ec:	464a      	mov	r2, r9
    75ee:	4629      	mov	r1, r5
    75f0:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    75f2:	2800      	cmp	r0, #0
    75f4:	d1ba      	bne.n	756c <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
    75f6:	7863      	ldrb	r3, [r4, #1]
    75f8:	f043 0302 	orr.w	r3, r3, #2
    75fc:	7063      	strb	r3, [r4, #1]
  return -1;
    75fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7602:	b003      	add	sp, #12
    7604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
    7608:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    760c:	6803      	ldr	r3, [r0, #0]
    760e:	691b      	ldr	r3, [r3, #16]
    7610:	464a      	mov	r2, r9
    7612:	4629      	mov	r1, r5
    7614:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7616:	2800      	cmp	r0, #0
    7618:	d0ed      	beq.n	75f6 <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    761a:	f44f 7600 	mov.w	r6, #512	; 0x200
    761e:	e7a5      	b.n	756c <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
    7620:	9f00      	ldr	r7, [sp, #0]
    7622:	e78d      	b.n	7540 <FatFile::read(void*, unsigned int)+0xc6>

00007624 <FatFile::peek()>:
int FatFile::peek() {
    7624:	b570      	push	{r4, r5, r6, lr}
    7626:	b082      	sub	sp, #8
    7628:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    762a:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    762c:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
    762e:	2201      	movs	r2, #1
    7630:	f10d 0107 	add.w	r1, sp, #7
    7634:	f7ff ff21 	bl	747a <FatFile::read(void*, unsigned int)>
    7638:	2801      	cmp	r0, #1
    763a:	bf0c      	ite	eq
    763c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7640:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    7644:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
    7646:	6125      	str	r5, [r4, #16]
}
    7648:	b002      	add	sp, #8
    764a:	bd70      	pop	{r4, r5, r6, pc}

0000764c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    764c:	b530      	push	{r4, r5, lr}
    764e:	b083      	sub	sp, #12
    7650:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7652:	6943      	ldr	r3, [r0, #20]
    7654:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
    7658:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
    765c:	d009      	beq.n	7672 <FatFile::readDirCache(bool)+0x26>
    765e:	2901      	cmp	r1, #1
    7660:	d107      	bne.n	7672 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    7662:	3320      	adds	r3, #32
    7664:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7666:	68a0      	ldr	r0, [r4, #8]
    7668:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    766a:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    766e:	b003      	add	sp, #12
    7670:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7672:	2201      	movs	r2, #1
    7674:	f10d 0107 	add.w	r1, sp, #7
    7678:	4620      	mov	r0, r4
    767a:	f7ff fefe 	bl	747a <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    767e:	b240      	sxtb	r0, r0
    7680:	2801      	cmp	r0, #1
    7682:	d103      	bne.n	768c <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7684:	6963      	ldr	r3, [r4, #20]
    7686:	331f      	adds	r3, #31
    7688:	6163      	str	r3, [r4, #20]
    768a:	e7ec      	b.n	7666 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    768c:	2000      	movs	r0, #0
    768e:	e7ee      	b.n	766e <FatFile::readDirCache(bool)+0x22>

00007690 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7694:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7696:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
    7698:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
    769a:	b36b      	cbz	r3, 76f8 <FatFile::seekSet(unsigned long)+0x68>
    769c:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    769e:	6942      	ldr	r2, [r0, #20]
    76a0:	428a      	cmp	r2, r1
    76a2:	d045      	beq.n	7730 <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
    76a4:	b361      	cbz	r1, 7700 <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    76a6:	f013 0f08 	tst.w	r3, #8
    76aa:	d032      	beq.n	7712 <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
    76ac:	69c1      	ldr	r1, [r0, #28]
    76ae:	42a9      	cmp	r1, r5
    76b0:	d322      	bcc.n	76f8 <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    76b2:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    76b6:	f89c 1006 	ldrb.w	r1, [ip, #6]
    76ba:	3109      	adds	r1, #9
    76bc:	b2c9      	uxtb	r1, r1
    76be:	1e6e      	subs	r6, r5, #1
    76c0:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    76c2:	78a0      	ldrb	r0, [r4, #2]
    76c4:	f010 0f40 	tst.w	r0, #64	; 0x40
    76c8:	d12c      	bne.n	7724 <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    76ca:	1e50      	subs	r0, r2, #1
    76cc:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
    76ce:	b10a      	cbz	r2, 76d4 <FatFile::seekSet(unsigned long)+0x44>
    76d0:	4286      	cmp	r6, r0
    76d2:	d22b      	bcs.n	772c <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    76d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
    76d8:	bf14      	ite	ne
    76da:	f8dc 3020 	ldrne.w	r3, [ip, #32]
    76de:	6a23      	ldreq	r3, [r4, #32]
    76e0:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    76e2:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
    76e6:	b16e      	cbz	r6, 7704 <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    76e8:	4642      	mov	r2, r8
    76ea:	6921      	ldr	r1, [r4, #16]
    76ec:	68a0      	ldr	r0, [r4, #8]
    76ee:	f001 fe46 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
    76f2:	3e01      	subs	r6, #1
    76f4:	2800      	cmp	r0, #0
    76f6:	dcf6      	bgt.n	76e6 <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    76f8:	6127      	str	r7, [r4, #16]
  return false;
    76fa:	2000      	movs	r0, #0
}
    76fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
    7700:	2300      	movs	r3, #0
    7702:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
    7704:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7706:	78a3      	ldrb	r3, [r4, #2]
    7708:	f023 0320 	bic.w	r3, r3, #32
    770c:	70a3      	strb	r3, [r4, #2]
  return true;
    770e:	2001      	movs	r0, #1
    7710:	e7f4      	b.n	76fc <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
    7712:	f013 0f20 	tst.w	r3, #32
    7716:	d0cc      	beq.n	76b2 <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
    7718:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    771a:	895b      	ldrh	r3, [r3, #10]
    771c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7720:	d9f0      	bls.n	7704 <FatFile::seekSet(unsigned long)+0x74>
    7722:	e7e9      	b.n	76f8 <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
    7724:	6a23      	ldr	r3, [r4, #32]
    7726:	4433      	add	r3, r6
    7728:	6123      	str	r3, [r4, #16]
    goto done;
    772a:	e7eb      	b.n	7704 <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
    772c:	1a36      	subs	r6, r6, r0
    772e:	e7d8      	b.n	76e2 <FatFile::seekSet(unsigned long)+0x52>
    return true;
    7730:	2001      	movs	r0, #1
    7732:	e7e3      	b.n	76fc <FatFile::seekSet(unsigned long)+0x6c>

00007734 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7734:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7736:	7803      	ldrb	r3, [r0, #0]
    7738:	f013 0f10 	tst.w	r3, #16
    773c:	d101      	bne.n	7742 <FatFile::rmdir()+0xe>
  return false;
    773e:	2000      	movs	r0, #0
}
    7740:	bd38      	pop	{r3, r4, r5, pc}
    7742:	4604      	mov	r4, r0
    seekSet(0);
    7744:	2100      	movs	r1, #0
    7746:	f7ff ffa3 	bl	7690 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    774a:	2501      	movs	r5, #1
    774c:	4629      	mov	r1, r5
    774e:	4620      	mov	r0, r4
    7750:	f7ff ff7c 	bl	764c <FatFile::readDirCache(bool)>
    if (!dir) {
    7754:	4603      	mov	r3, r0
    7756:	b168      	cbz	r0, 7774 <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
    7758:	7800      	ldrb	r0, [r0, #0]
    775a:	b170      	cbz	r0, 777a <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    775c:	282e      	cmp	r0, #46	; 0x2e
    775e:	bf18      	it	ne
    7760:	28e5      	cmpne	r0, #229	; 0xe5
    7762:	bf0c      	ite	eq
    7764:	2001      	moveq	r0, #1
    7766:	2000      	movne	r0, #0
    7768:	d0f0      	beq.n	774c <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
    776a:	7adb      	ldrb	r3, [r3, #11]
    776c:	f013 0f08 	tst.w	r3, #8
    7770:	d1ec      	bne.n	774c <FatFile::rmdir()+0x18>
    7772:	e7e5      	b.n	7740 <FatFile::rmdir()+0xc>
      if (!getError()) {
    7774:	7863      	ldrb	r3, [r4, #1]
    7776:	2b00      	cmp	r3, #0
    7778:	d1e2      	bne.n	7740 <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
    777a:	2308      	movs	r3, #8
    777c:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    777e:	78a3      	ldrb	r3, [r4, #2]
    7780:	f043 0302 	orr.w	r3, r3, #2
    7784:	70a3      	strb	r3, [r4, #2]
  return remove();
    7786:	4620      	mov	r0, r4
    7788:	f001 f974 	bl	8a74 <FatFile::remove()>
    778c:	e7d8      	b.n	7740 <FatFile::rmdir()+0xc>

0000778e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    778e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7790:	4604      	mov	r4, r0
    7792:	460e      	mov	r6, r1
    7794:	4615      	mov	r5, r2
    7796:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
    7798:	2224      	movs	r2, #36	; 0x24
    779a:	2100      	movs	r1, #0
    779c:	f00a f846 	bl	1182c <memset>
  m_vol = dirFile->m_vol;
    77a0:	68b0      	ldr	r0, [r6, #8]
    77a2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    77a4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
    77a6:	6a33      	ldr	r3, [r6, #32]
    77a8:	60e3      	str	r3, [r4, #12]
    77aa:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
    77ae:	f005 050f 	and.w	r5, r5, #15
    77b2:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    77b6:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    77b8:	f011 0f08 	tst.w	r1, #8
    77bc:	d113      	bne.n	77e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    77be:	f001 0117 	and.w	r1, r1, #23
    77c2:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    77c4:	7ad3      	ldrb	r3, [r2, #11]
    77c6:	f013 0f18 	tst.w	r3, #24
    77ca:	d102      	bne.n	77d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
    77cc:	f041 0108 	orr.w	r1, r1, #8
    77d0:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
    77d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    77d6:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
    77d8:	f007 0303 	and.w	r3, r7, #3
    77dc:	2b01      	cmp	r3, #1
    77de:	d027      	beq.n	7830 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    77e0:	2b02      	cmp	r3, #2
    77e2:	d027      	beq.n	7834 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    77e4:	b11b      	cbz	r3, 77ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
    77e6:	2000      	movs	r0, #0
    77e8:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
    77ea:	70a0      	strb	r0, [r4, #2]
}
    77ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
    77ee:	f417 6f80 	tst.w	r7, #1024	; 0x400
    77f2:	d1f8      	bne.n	77e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    77f4:	f007 0308 	and.w	r3, r7, #8
    77f8:	f043 0301 	orr.w	r3, r3, #1
    77fc:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    77fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7800:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7802:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7804:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7806:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    780a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    780c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    780e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7810:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    7814:	d105      	bne.n	7822 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
    7816:	2001      	movs	r0, #1
    7818:	e7e8      	b.n	77ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    781a:	f001 ff19 	bl	9650 <FatPartition::freeChain(unsigned long)>
    781e:	b9f0      	cbnz	r0, 785e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    7820:	e7e1      	b.n	77e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7822:	69e1      	ldr	r1, [r4, #28]
    7824:	4620      	mov	r0, r4
    7826:	f7ff ff33 	bl	7690 <FatFile::seekSet(unsigned long)>
    782a:	2800      	cmp	r0, #0
    782c:	d1de      	bne.n	77ec <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    782e:	e7da      	b.n	77e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
    7830:	2302      	movs	r3, #2
    7832:	e000      	b.n	7836 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
    7834:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
    7836:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    7838:	7821      	ldrb	r1, [r4, #0]
    783a:	f011 0f11 	tst.w	r1, #17
    783e:	d1d2      	bne.n	77e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7840:	f007 0108 	and.w	r1, r7, #8
    7844:	430b      	orrs	r3, r1
    7846:	70a3      	strb	r3, [r4, #2]
    7848:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    784a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    784c:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    784e:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7850:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
    7854:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7858:	d0d7      	beq.n	780a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    785a:	2900      	cmp	r1, #0
    785c:	d1dd      	bne.n	781a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    785e:	78a3      	ldrb	r3, [r4, #2]
    7860:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7864:	70a3      	strb	r3, [r4, #2]
    7866:	e7d3      	b.n	7810 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

00007868 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    786c:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
    786e:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7870:	2d00      	cmp	r5, #0
    7872:	d14f      	bne.n	7914 <FatFile::openNext(FatFile*, int)+0xac>
    7874:	4606      	mov	r6, r0
    7876:	460c      	mov	r4, r1
    7878:	4692      	mov	sl, r2
    787a:	780b      	ldrb	r3, [r1, #0]
    787c:	f013 0f70 	tst.w	r3, #112	; 0x70
    7880:	d04c      	beq.n	791c <FatFile::openNext(FatFile*, int)+0xb4>
    7882:	694b      	ldr	r3, [r1, #20]
    7884:	f013 0f1f 	tst.w	r3, #31
    7888:	d14a      	bne.n	7920 <FatFile::openNext(FatFile*, int)+0xb8>
    788a:	46a9      	mov	r9, r5
    788c:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
    788e:	2700      	movs	r7, #0
    7890:	e000      	b.n	7894 <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
    7892:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
    7894:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
    7898:	4639      	mov	r1, r7
    789a:	4620      	mov	r0, r4
    789c:	f7ff fed6 	bl	764c <FatFile::readDirCache(bool)>
    if (!dir) {
    78a0:	4602      	mov	r2, r0
    78a2:	2800      	cmp	r0, #0
    78a4:	d03e      	beq.n	7924 <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
    78a6:	7803      	ldrb	r3, [r0, #0]
    78a8:	2b00      	cmp	r3, #0
    78aa:	d03d      	beq.n	7928 <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    78ac:	2be5      	cmp	r3, #229	; 0xe5
    78ae:	bf18      	it	ne
    78b0:	2b2e      	cmpne	r3, #46	; 0x2e
    78b2:	bf0c      	ite	eq
    78b4:	2001      	moveq	r0, #1
    78b6:	2000      	movne	r0, #0
    78b8:	d0eb      	beq.n	7892 <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    78ba:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
    78bc:	f011 0c08 	ands.w	ip, r1, #8
    78c0:	d003      	beq.n	78ca <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
    78c2:	290f      	cmp	r1, #15
    78c4:	d01e      	beq.n	7904 <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
    78c6:	46a9      	mov	r9, r5
    78c8:	e7e4      	b.n	7894 <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    78ca:	f1b9 0f00 	cmp.w	r9, #0
    78ce:	d00f      	beq.n	78f0 <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    78d0:	1e51      	subs	r1, r2, #1
    78d2:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    78d4:	ea4f 13cc 	mov.w	r3, ip, lsl #7
    78d8:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    78dc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    78e0:	fa55 f383 	uxtab	r3, r5, r3
    78e4:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
    78e8:	4291      	cmp	r1, r2
    78ea:	d1f3      	bne.n	78d4 <FatFile::openNext(FatFile*, int)+0x6c>
    78ec:	45e3      	cmp	fp, ip
    78ee:	d112      	bne.n	7916 <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    78f0:	f8cd 9000 	str.w	r9, [sp]
    78f4:	4653      	mov	r3, sl
    78f6:	f3c8 124f 	ubfx	r2, r8, #5, #16
    78fa:	4621      	mov	r1, r4
    78fc:	4630      	mov	r0, r6
    78fe:	f7ff ff46 	bl	778e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7902:	e008      	b.n	7916 <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7904:	f013 0f40 	tst.w	r3, #64	; 0x40
    7908:	d0c4      	beq.n	7894 <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
    790a:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
    790e:	f892 b00d 	ldrb.w	fp, [r2, #13]
    7912:	e7bf      	b.n	7894 <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
    7914:	2000      	movs	r0, #0
}
    7916:	b003      	add	sp, #12
    7918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    791c:	2000      	movs	r0, #0
    791e:	e7fa      	b.n	7916 <FatFile::openNext(FatFile*, int)+0xae>
    7920:	2000      	movs	r0, #0
    7922:	e7f8      	b.n	7916 <FatFile::openNext(FatFile*, int)+0xae>
    7924:	2000      	movs	r0, #0
    7926:	e7f6      	b.n	7916 <FatFile::openNext(FatFile*, int)+0xae>
    7928:	2000      	movs	r0, #0
    792a:	e7f4      	b.n	7916 <FatFile::openNext(FatFile*, int)+0xae>

0000792c <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    792c:	7803      	ldrb	r3, [r0, #0]
    792e:	2b00      	cmp	r3, #0
    7930:	d049      	beq.n	79c6 <FatFile::sync()+0x9a>
bool FatFile::sync() {
    7932:	b530      	push	{r4, r5, lr}
    7934:	b083      	sub	sp, #12
    7936:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7938:	f990 3002 	ldrsb.w	r3, [r0, #2]
    793c:	2b00      	cmp	r3, #0
    793e:	db0d      	blt.n	795c <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7940:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7942:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7946:	f003 ff19 	bl	b77c <FsCache::sync()>
    794a:	2800      	cmp	r0, #0
    794c:	d12e      	bne.n	79ac <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    794e:	7863      	ldrb	r3, [r4, #1]
    7950:	f043 0301 	orr.w	r3, r3, #1
    7954:	7063      	strb	r3, [r4, #1]
  return false;
    7956:	2000      	movs	r0, #0
}
    7958:	b003      	add	sp, #12
    795a:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    795c:	2101      	movs	r1, #1
    795e:	f7ff fd47 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7962:	4605      	mov	r5, r0
    7964:	2800      	cmp	r0, #0
    7966:	d0f2      	beq.n	794e <FatFile::sync()+0x22>
    7968:	7803      	ldrb	r3, [r0, #0]
    796a:	2be5      	cmp	r3, #229	; 0xe5
    796c:	d0ef      	beq.n	794e <FatFile::sync()+0x22>
    if (isFile()) {
    796e:	7823      	ldrb	r3, [r4, #0]
    7970:	f013 0f08 	tst.w	r3, #8
    7974:	d001      	beq.n	797a <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
    7976:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7978:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    797a:	6a23      	ldr	r3, [r4, #32]
    797c:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    797e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7980:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
    7982:	4b12      	ldr	r3, [pc, #72]	; (79cc <FatFile::sync()+0xa0>)
    7984:	681b      	ldr	r3, [r3, #0]
    7986:	b163      	cbz	r3, 79a2 <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
    7988:	f10d 0203 	add.w	r2, sp, #3
    798c:	a901      	add	r1, sp, #4
    798e:	f10d 0006 	add.w	r0, sp, #6
    7992:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    7994:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7998:	832b      	strh	r3, [r5, #24]
    799a:	826b      	strh	r3, [r5, #18]
    799c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    79a0:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    79a2:	78a3      	ldrb	r3, [r4, #2]
    79a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    79a8:	70a3      	strb	r3, [r4, #2]
    79aa:	e7c9      	b.n	7940 <FatFile::sync()+0x14>
    79ac:	f505 700e 	add.w	r0, r5, #568	; 0x238
    79b0:	f003 fee4 	bl	b77c <FsCache::sync()>
    79b4:	2800      	cmp	r0, #0
    79b6:	d0ca      	beq.n	794e <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
    79b8:	6828      	ldr	r0, [r5, #0]
    79ba:	6803      	ldr	r3, [r0, #0]
    79bc:	6a1b      	ldr	r3, [r3, #32]
    79be:	4798      	blx	r3
  if (m_vol->cacheSync()) {
    79c0:	2800      	cmp	r0, #0
    79c2:	d1c9      	bne.n	7958 <FatFile::sync()+0x2c>
 fail:
    79c4:	e7c3      	b.n	794e <FatFile::sync()+0x22>
    return true;
    79c6:	2001      	movs	r0, #1
}
    79c8:	4770      	bx	lr
    79ca:	bf00      	nop
    79cc:	20004b64 	.word	0x20004b64

000079d0 <FatFile::close()>:
bool FatFile::close() {
    79d0:	b510      	push	{r4, lr}
    79d2:	4604      	mov	r4, r0
  bool rtn = sync();
    79d4:	f7ff ffaa 	bl	792c <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    79d8:	2300      	movs	r3, #0
    79da:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    79dc:	70a3      	strb	r3, [r4, #2]
}
    79de:	bd10      	pop	{r4, pc}

000079e0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    79e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    79e2:	b095      	sub	sp, #84	; 0x54
    79e4:	9201      	str	r2, [sp, #4]
    79e6:	461f      	mov	r7, r3
  FatFile() {}
    79e8:	2300      	movs	r3, #0
    79ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    79ee:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    79f2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    79f6:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    79fa:	7803      	ldrb	r3, [r0, #0]
    79fc:	2b00      	cmp	r3, #0
    79fe:	d14e      	bne.n	7a9e <FatFile::open(FatFile*, char const*, int)+0xbe>
    7a00:	4604      	mov	r4, r0
    7a02:	460d      	mov	r5, r1
    7a04:	780b      	ldrb	r3, [r1, #0]
    7a06:	f013 0f70 	tst.w	r3, #112	; 0x70
    7a0a:	d04c      	beq.n	7aa6 <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
    7a0c:	4613      	mov	r3, r2
    7a0e:	7812      	ldrb	r2, [r2, #0]
    7a10:	2a2f      	cmp	r2, #47	; 0x2f
    7a12:	d028      	beq.n	7a66 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7a14:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
    7a16:	ab01      	add	r3, sp, #4
    7a18:	aa02      	add	r2, sp, #8
    7a1a:	9901      	ldr	r1, [sp, #4]
    7a1c:	4620      	mov	r0, r4
    7a1e:	f000 ffbb 	bl	8998 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7a22:	4603      	mov	r3, r0
    7a24:	2800      	cmp	r0, #0
    7a26:	d03b      	beq.n	7aa0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
    7a28:	9b01      	ldr	r3, [sp, #4]
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	b37b      	cbz	r3, 7a8e <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7a2e:	4633      	mov	r3, r6
    7a30:	aa02      	add	r2, sp, #8
    7a32:	4629      	mov	r1, r5
    7a34:	4620      	mov	r0, r4
    7a36:	f000 fe2f 	bl	8698 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7a3a:	4603      	mov	r3, r0
    7a3c:	b380      	cbz	r0, 7aa0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
    7a3e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7a42:	46a6      	mov	lr, r4
    7a44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7a48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7a4c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7a50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7a54:	f8de 3000 	ldr.w	r3, [lr]
    7a58:	f8cc 3000 	str.w	r3, [ip]
    close();
    7a5c:	4620      	mov	r0, r4
    7a5e:	f7ff ffb7 	bl	79d0 <FatFile::close()>
    dirFile = &tmpDir;
    7a62:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7a64:	e7d7      	b.n	7a16 <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
    7a66:	3301      	adds	r3, #1
    7a68:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7a6a:	781a      	ldrb	r2, [r3, #0]
    7a6c:	2a2f      	cmp	r2, #47	; 0x2f
    7a6e:	d0fa      	beq.n	7a66 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
    7a70:	b92a      	cbnz	r2, 7a7e <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
    7a72:	68a9      	ldr	r1, [r5, #8]
    7a74:	4620      	mov	r0, r4
    7a76:	f7ff fccc 	bl	7412 <FatFile::openRoot(FatVolume*)>
    7a7a:	4603      	mov	r3, r0
    7a7c:	e010      	b.n	7aa0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7a7e:	68a9      	ldr	r1, [r5, #8]
    7a80:	a80b      	add	r0, sp, #44	; 0x2c
    7a82:	f7ff fcc6 	bl	7412 <FatFile::openRoot(FatVolume*)>
    7a86:	4603      	mov	r3, r0
    7a88:	b150      	cbz	r0, 7aa0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
    7a8a:	ad0b      	add	r5, sp, #44	; 0x2c
    7a8c:	e7c2      	b.n	7a14 <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
    7a8e:	463b      	mov	r3, r7
    7a90:	aa02      	add	r2, sp, #8
    7a92:	4629      	mov	r1, r5
    7a94:	4620      	mov	r0, r4
    7a96:	f000 fdff 	bl	8698 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7a9a:	4603      	mov	r3, r0
    7a9c:	e000      	b.n	7aa0 <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
    7a9e:	2300      	movs	r3, #0
}
    7aa0:	4618      	mov	r0, r3
    7aa2:	b015      	add	sp, #84	; 0x54
    7aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7aa6:	2300      	movs	r3, #0
    7aa8:	e7fa      	b.n	7aa0 <FatFile::open(FatFile*, char const*, int)+0xc0>

00007aaa <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7aaa:	b129      	cbz	r1, 7ab8 <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
    7aac:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    7aae:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    7ab2:	f7ff ff95 	bl	79e0 <FatFile::open(FatFile*, char const*, int)>
}
    7ab6:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    7ab8:	2000      	movs	r0, #0
}
    7aba:	4770      	bx	lr

00007abc <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7abc:	b570      	push	{r4, r5, r6, lr}
    7abe:	4605      	mov	r5, r0
    7ac0:	460c      	mov	r4, r1
  if (!sync()) {
    7ac2:	f7ff ff33 	bl	792c <FatFile::sync()>
    7ac6:	4606      	mov	r6, r0
    7ac8:	b908      	cbnz	r0, 7ace <FatFile::dirEntry(DirFat_t*)+0x12>
}
    7aca:	4630      	mov	r0, r6
    7acc:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7ace:	2100      	movs	r1, #0
    7ad0:	4628      	mov	r0, r5
    7ad2:	f7ff fc8d 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7ad6:	4603      	mov	r3, r0
    7ad8:	b180      	cbz	r0, 7afc <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
    7ada:	6805      	ldr	r5, [r0, #0]
    7adc:	6840      	ldr	r0, [r0, #4]
    7ade:	6899      	ldr	r1, [r3, #8]
    7ae0:	68da      	ldr	r2, [r3, #12]
    7ae2:	6025      	str	r5, [r4, #0]
    7ae4:	6060      	str	r0, [r4, #4]
    7ae6:	60a1      	str	r1, [r4, #8]
    7ae8:	60e2      	str	r2, [r4, #12]
    7aea:	691d      	ldr	r5, [r3, #16]
    7aec:	6958      	ldr	r0, [r3, #20]
    7aee:	6999      	ldr	r1, [r3, #24]
    7af0:	69da      	ldr	r2, [r3, #28]
    7af2:	6125      	str	r5, [r4, #16]
    7af4:	6160      	str	r0, [r4, #20]
    7af6:	61a1      	str	r1, [r4, #24]
    7af8:	61e2      	str	r2, [r4, #28]
  return true;
    7afa:	e7e6      	b.n	7aca <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
    7afc:	2600      	movs	r6, #0
    7afe:	e7e4      	b.n	7aca <FatFile::dirEntry(DirFat_t*)+0xe>

00007b00 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7b00:	b530      	push	{r4, r5, lr}
    7b02:	b089      	sub	sp, #36	; 0x24
    7b04:	460d      	mov	r5, r1
    7b06:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7b08:	4669      	mov	r1, sp
    7b0a:	f7ff ffd7 	bl	7abc <FatFile::dirEntry(DirFat_t*)>
    7b0e:	b128      	cbz	r0, 7b1c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7b10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7b14:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7b16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b1a:	8023      	strh	r3, [r4, #0]
}
    7b1c:	b009      	add	sp, #36	; 0x24
    7b1e:	bd30      	pop	{r4, r5, pc}

00007b20 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7b20:	b530      	push	{r4, r5, lr}
    7b22:	b089      	sub	sp, #36	; 0x24
    7b24:	460d      	mov	r5, r1
    7b26:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7b28:	4669      	mov	r1, sp
    7b2a:	f7ff ffc7 	bl	7abc <FatFile::dirEntry(DirFat_t*)>
    7b2e:	b128      	cbz	r0, 7b3c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7b30:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    7b34:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7b36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7b3a:	8023      	strh	r3, [r4, #0]
}
    7b3c:	b009      	add	sp, #36	; 0x24
    7b3e:	bd30      	pop	{r4, r5, pc}

00007b40 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7b40:	780b      	ldrb	r3, [r1, #0]
    7b42:	f013 0f70 	tst.w	r3, #112	; 0x70
    7b46:	d101      	bne.n	7b4c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
    7b48:	2000      	movs	r0, #0
}
    7b4a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b4e:	b089      	sub	sp, #36	; 0x24
    7b50:	4604      	mov	r4, r0
    7b52:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7b54:	f640 2302 	movw	r3, #2562	; 0xa02
    7b58:	f000 fd9e 	bl	8698 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7b5c:	b908      	cbnz	r0, 7b62 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
    7b5e:	b009      	add	sp, #36	; 0x24
    7b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
    7b62:	2301      	movs	r3, #1
    7b64:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7b66:	2310      	movs	r3, #16
    7b68:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    7b6a:	4620      	mov	r0, r4
    7b6c:	f7ff fbfe 	bl	736c <FatFile::addDirCluster()>
    7b70:	2800      	cmp	r0, #0
    7b72:	d0f4      	beq.n	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
    7b74:	6923      	ldr	r3, [r4, #16]
    7b76:	6223      	str	r3, [r4, #32]
    seekSet(0);
    7b78:	2100      	movs	r1, #0
    7b7a:	4620      	mov	r0, r4
    7b7c:	f7ff fd88 	bl	7690 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    7b80:	4620      	mov	r0, r4
    7b82:	f7ff fed3 	bl	792c <FatFile::sync()>
    7b86:	2800      	cmp	r0, #0
    7b88:	d0e9      	beq.n	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7b8a:	2101      	movs	r1, #1
    7b8c:	4620      	mov	r0, r4
    7b8e:	f7ff fc2f 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7b92:	4686      	mov	lr, r0
    7b94:	2800      	cmp	r0, #0
    7b96:	d07b      	beq.n	7c90 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7b98:	2310      	movs	r3, #16
    7b9a:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7b9c:	46ec      	mov	ip, sp
    7b9e:	6800      	ldr	r0, [r0, #0]
    7ba0:	f8de 1004 	ldr.w	r1, [lr, #4]
    7ba4:	f8de 2008 	ldr.w	r2, [lr, #8]
    7ba8:	f8de 300c 	ldr.w	r3, [lr, #12]
    7bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7bb0:	f8de 0010 	ldr.w	r0, [lr, #16]
    7bb4:	f8de 1014 	ldr.w	r1, [lr, #20]
    7bb8:	f8de 2018 	ldr.w	r2, [lr, #24]
    7bbc:	f8de 301c 	ldr.w	r3, [lr, #28]
    7bc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7bc4:	f8be 6014 	ldrh.w	r6, [lr, #20]
    7bc8:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
    7bcc:	232e      	movs	r3, #46	; 0x2e
    7bce:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    7bd2:	466b      	mov	r3, sp
    7bd4:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
    7bd8:	2220      	movs	r2, #32
    7bda:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
    7bde:	428b      	cmp	r3, r1
    7be0:	d1fb      	bne.n	7bda <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
    7be2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7be4:	6a23      	ldr	r3, [r4, #32]
    7be6:	3b02      	subs	r3, #2
    7be8:	7982      	ldrb	r2, [r0, #6]
    7bea:	4093      	lsls	r3, r2
    7bec:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7bee:	2201      	movs	r2, #1
    7bf0:	4419      	add	r1, r3
    7bf2:	3028      	adds	r0, #40	; 0x28
    7bf4:	f003 fde9 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7bf8:	4684      	mov	ip, r0
    7bfa:	2800      	cmp	r0, #0
    7bfc:	d04a      	beq.n	7c94 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
    7bfe:	f8ad 6014 	strh.w	r6, [sp, #20]
    7c02:	f8ad 701a 	strh.w	r7, [sp, #26]
    7c06:	46ee      	mov	lr, sp
    7c08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7c0c:	f8cc 0000 	str.w	r0, [ip]
    7c10:	f8cc 1004 	str.w	r1, [ip, #4]
    7c14:	f8cc 2008 	str.w	r2, [ip, #8]
    7c18:	f8cc 300c 	str.w	r3, [ip, #12]
    7c1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7c20:	f8cc 0010 	str.w	r0, [ip, #16]
    7c24:	f8cc 1014 	str.w	r1, [ip, #20]
    7c28:	f8cc 2018 	str.w	r2, [ip, #24]
    7c2c:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
    7c30:	232e      	movs	r3, #46	; 0x2e
    7c32:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7c36:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7c38:	0c1a      	lsrs	r2, r3, #16
    7c3a:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7c3e:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7c42:	466d      	mov	r5, sp
    7c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7c46:	f8cc 0020 	str.w	r0, [ip, #32]
    7c4a:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    7c4e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    7c52:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    7c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7c58:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    7c5c:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    7c60:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    7c64:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    7c68:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7c6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7c6e:	f003 fd85 	bl	b77c <FsCache::sync()>
    7c72:	2800      	cmp	r0, #0
    7c74:	f43f af73 	beq.w	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    7c78:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7c7c:	f003 fd7e 	bl	b77c <FsCache::sync()>
    7c80:	2800      	cmp	r0, #0
    7c82:	f43f af6c 	beq.w	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
    7c86:	6820      	ldr	r0, [r4, #0]
    7c88:	6803      	ldr	r3, [r0, #0]
    7c8a:	6a1b      	ldr	r3, [r3, #32]
    7c8c:	4798      	blx	r3
    7c8e:	e766      	b.n	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
    7c90:	2000      	movs	r0, #0
    7c92:	e764      	b.n	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    7c94:	2000      	movs	r0, #0
    7c96:	e762      	b.n	7b5e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

00007c98 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c9a:	b095      	sub	sp, #84	; 0x54
    7c9c:	9201      	str	r2, [sp, #4]
    7c9e:	461e      	mov	r6, r3
    7ca0:	2300      	movs	r3, #0
    7ca2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
    7ca6:	f88d 3008 	strb.w	r3, [sp, #8]
    7caa:	f88d 3009 	strb.w	r3, [sp, #9]
    7cae:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
    7cb2:	7803      	ldrb	r3, [r0, #0]
    7cb4:	2b00      	cmp	r3, #0
    7cb6:	d150      	bne.n	7d5a <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    7cb8:	4604      	mov	r4, r0
    7cba:	460d      	mov	r5, r1
    7cbc:	780b      	ldrb	r3, [r1, #0]
    7cbe:	f013 0f70 	tst.w	r3, #112	; 0x70
    7cc2:	d04e      	beq.n	7d62 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
    7cc4:	4613      	mov	r3, r2
    7cc6:	7812      	ldrb	r2, [r2, #0]
    7cc8:	2a2f      	cmp	r2, #47	; 0x2f
    7cca:	d001      	beq.n	7cd0 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
    7ccc:	2700      	movs	r7, #0
    7cce:	e020      	b.n	7d12 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
    7cd0:	3301      	adds	r3, #1
    7cd2:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7cd4:	781a      	ldrb	r2, [r3, #0]
    7cd6:	2a2f      	cmp	r2, #47	; 0x2f
    7cd8:	d0fa      	beq.n	7cd0 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7cda:	68a9      	ldr	r1, [r5, #8]
    7cdc:	a802      	add	r0, sp, #8
    7cde:	f7ff fb98 	bl	7412 <FatFile::openRoot(FatVolume*)>
    7ce2:	4602      	mov	r2, r0
    7ce4:	2800      	cmp	r0, #0
    7ce6:	d039      	beq.n	7d5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
    7ce8:	ad02      	add	r5, sp, #8
    7cea:	e7ef      	b.n	7ccc <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
    7cec:	f10d 0c08 	add.w	ip, sp, #8
    7cf0:	46a6      	mov	lr, r4
    7cf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7cf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7cfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7cfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7d02:	f8de 3000 	ldr.w	r3, [lr]
    7d06:	f8cc 3000 	str.w	r3, [ip]
    close();
    7d0a:	4620      	mov	r0, r4
    7d0c:	f7ff fe60 	bl	79d0 <FatFile::close()>
    parent = &tmpDir;
    7d10:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7d12:	ab01      	add	r3, sp, #4
    7d14:	aa0b      	add	r2, sp, #44	; 0x2c
    7d16:	9901      	ldr	r1, [sp, #4]
    7d18:	4620      	mov	r0, r4
    7d1a:	f000 fe3d 	bl	8998 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7d1e:	4602      	mov	r2, r0
    7d20:	b1e0      	cbz	r0, 7d5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
    7d22:	9b01      	ldr	r3, [sp, #4]
    7d24:	781b      	ldrb	r3, [r3, #0]
    7d26:	b18b      	cbz	r3, 7d4c <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
    7d28:	463b      	mov	r3, r7
    7d2a:	aa0b      	add	r2, sp, #44	; 0x2c
    7d2c:	4629      	mov	r1, r5
    7d2e:	4620      	mov	r0, r4
    7d30:	f000 fcb2 	bl	8698 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7d34:	2800      	cmp	r0, #0
    7d36:	d1d9      	bne.n	7cec <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
    7d38:	b1ae      	cbz	r6, 7d66 <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
    7d3a:	aa0b      	add	r2, sp, #44	; 0x2c
    7d3c:	4629      	mov	r1, r5
    7d3e:	4620      	mov	r0, r4
    7d40:	f7ff fefe 	bl	7b40 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7d44:	4602      	mov	r2, r0
    7d46:	2800      	cmp	r0, #0
    7d48:	d1d0      	bne.n	7cec <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
    7d4a:	e007      	b.n	7d5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
    7d4c:	aa0b      	add	r2, sp, #44	; 0x2c
    7d4e:	4629      	mov	r1, r5
    7d50:	4620      	mov	r0, r4
    7d52:	f7ff fef5 	bl	7b40 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7d56:	4602      	mov	r2, r0
    7d58:	e000      	b.n	7d5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
    7d5a:	2200      	movs	r2, #0
}
    7d5c:	4610      	mov	r0, r2
    7d5e:	b015      	add	sp, #84	; 0x54
    7d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7d62:	2200      	movs	r2, #0
    7d64:	e7fa      	b.n	7d5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    7d66:	4632      	mov	r2, r6
    7d68:	e7f8      	b.n	7d5c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

00007d6a <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7d6a:	b570      	push	{r4, r5, r6, lr}
    7d6c:	b09a      	sub	sp, #104	; 0x68
    7d6e:	2300      	movs	r3, #0
    7d70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7d74:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    7d78:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    7d7c:	f88d 3000 	strb.w	r3, [sp]
    7d80:	f88d 3001 	strb.w	r3, [sp, #1]
    7d84:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
    7d88:	7803      	ldrb	r3, [r0, #0]
    7d8a:	f013 0f18 	tst.w	r3, #24
    7d8e:	f000 80e3 	beq.w	7f58 <FatFile::rename(FatFile*, char const*)+0x1ee>
    7d92:	4604      	mov	r4, r0
    7d94:	460d      	mov	r5, r1
    7d96:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
    7d98:	6882      	ldr	r2, [r0, #8]
    7d9a:	688b      	ldr	r3, [r1, #8]
    7d9c:	429a      	cmp	r2, r3
    7d9e:	d002      	beq.n	7da6 <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
    7da0:	2000      	movs	r0, #0
}
    7da2:	b01a      	add	sp, #104	; 0x68
    7da4:	bd70      	pop	{r4, r5, r6, pc}
  sync();
    7da6:	f7ff fdc1 	bl	792c <FatFile::sync()>
  oldFile = *this;
    7daa:	46ec      	mov	ip, sp
    7dac:	46a6      	mov	lr, r4
    7dae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7db2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7db6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7dbe:	f8de 3000 	ldr.w	r3, [lr]
    7dc2:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7dc6:	2100      	movs	r1, #0
    7dc8:	4620      	mov	r0, r4
    7dca:	f7ff fb11 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7dce:	4686      	mov	lr, r0
    7dd0:	2800      	cmp	r0, #0
    7dd2:	f000 80c3 	beq.w	7f5c <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
    7dd6:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    7dda:	6800      	ldr	r0, [r0, #0]
    7ddc:	f8de 1004 	ldr.w	r1, [lr, #4]
    7de0:	f8de 2008 	ldr.w	r2, [lr, #8]
    7de4:	f8de 300c 	ldr.w	r3, [lr, #12]
    7de8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7dec:	f8de 0010 	ldr.w	r0, [lr, #16]
    7df0:	f8de 1014 	ldr.w	r1, [lr, #20]
    7df4:	f8de 2018 	ldr.w	r2, [lr, #24]
    7df8:	f8de 301c 	ldr.w	r3, [lr, #28]
    7dfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    7e00:	7823      	ldrb	r3, [r4, #0]
    7e02:	f013 0f08 	tst.w	r3, #8
    7e06:	d00a      	beq.n	7e1e <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7e08:	f640 2301 	movw	r3, #2561	; 0xa01
    7e0c:	4632      	mov	r2, r6
    7e0e:	4629      	mov	r1, r5
    7e10:	a809      	add	r0, sp, #36	; 0x24
    7e12:	f7ff fde5 	bl	79e0 <FatFile::open(FatFile*, char const*, int)>
    7e16:	2800      	cmp	r0, #0
    7e18:	d0c3      	beq.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
    7e1a:	2600      	movs	r6, #0
    7e1c:	e008      	b.n	7e30 <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
    7e1e:	2300      	movs	r3, #0
    7e20:	4632      	mov	r2, r6
    7e22:	4629      	mov	r1, r5
    7e24:	a809      	add	r0, sp, #36	; 0x24
    7e26:	f7ff ff37 	bl	7c98 <FatFile::mkdir(FatFile*, char const*, bool)>
    7e2a:	2800      	cmp	r0, #0
    7e2c:	d0b9      	beq.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
    7e2e:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
    7e30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7e32:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7e34:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7e38:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7e3a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    7e3e:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7e42:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7e44:	2300      	movs	r3, #0
    7e46:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
    7e4a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7e4e:	2101      	movs	r1, #1
    7e50:	4620      	mov	r0, r4
    7e52:	f7ff facd 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7e56:	4603      	mov	r3, r0
    7e58:	2800      	cmp	r0, #0
    7e5a:	f000 8081 	beq.w	7f60 <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7e5e:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
    7e62:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
    7e66:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
    7e6a:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
    7e6e:	f8c3 500d 	str.w	r5, [r3, #13]
    7e72:	f8c3 0011 	str.w	r0, [r3, #17]
    7e76:	f8c3 1015 	str.w	r1, [r3, #21]
    7e7a:	f8c3 2019 	str.w	r2, [r3, #25]
    7e7e:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
    7e82:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    7e86:	f8a3 101d 	strh.w	r1, [r3, #29]
    7e8a:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
    7e8c:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
    7e90:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
    7e92:	2e00      	cmp	r6, #0
    7e94:	d03e      	beq.n	7f14 <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7e96:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7e98:	1eb3      	subs	r3, r6, #2
    7e9a:	7982      	ldrb	r2, [r0, #6]
    7e9c:	4093      	lsls	r3, r2
    7e9e:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7ea0:	2200      	movs	r2, #0
    7ea2:	4419      	add	r1, r3
    7ea4:	3028      	adds	r0, #40	; 0x28
    7ea6:	f003 fc90 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7eaa:	4684      	mov	ip, r0
    7eac:	2800      	cmp	r0, #0
    7eae:	d059      	beq.n	7f64 <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
    7eb0:	ad12      	add	r5, sp, #72	; 0x48
    7eb2:	6a00      	ldr	r0, [r0, #32]
    7eb4:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
    7eb8:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
    7ebc:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    7ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7ec2:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
    7ec6:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
    7eca:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
    7ece:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    7ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    7ed4:	4631      	mov	r1, r6
    7ed6:	68a0      	ldr	r0, [r4, #8]
    7ed8:	f001 fbba 	bl	9650 <FatPartition::freeChain(unsigned long)>
    7edc:	2800      	cmp	r0, #0
    7ede:	f43f af60 	beq.w	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7ee2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7ee4:	6a23      	ldr	r3, [r4, #32]
    7ee6:	3b02      	subs	r3, #2
    7ee8:	7982      	ldrb	r2, [r0, #6]
    7eea:	4093      	lsls	r3, r2
    7eec:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7eee:	2201      	movs	r2, #1
    7ef0:	4419      	add	r1, r3
    7ef2:	3028      	adds	r0, #40	; 0x28
    7ef4:	f003 fc69 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7ef8:	4606      	mov	r6, r0
    7efa:	2800      	cmp	r0, #0
    7efc:	d034      	beq.n	7f68 <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
    7efe:	ad12      	add	r5, sp, #72	; 0x48
    7f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f02:	6230      	str	r0, [r6, #32]
    7f04:	6271      	str	r1, [r6, #36]	; 0x24
    7f06:	62b2      	str	r2, [r6, #40]	; 0x28
    7f08:	62f3      	str	r3, [r6, #44]	; 0x2c
    7f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7f0c:	6330      	str	r0, [r6, #48]	; 0x30
    7f0e:	6371      	str	r1, [r6, #52]	; 0x34
    7f10:	63b2      	str	r2, [r6, #56]	; 0x38
    7f12:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    7f14:	2300      	movs	r3, #0
    7f16:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
    7f18:	2302      	movs	r3, #2
    7f1a:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
    7f1e:	2308      	movs	r3, #8
    7f20:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
    7f24:	4668      	mov	r0, sp
    7f26:	f000 fda5 	bl	8a74 <FatFile::remove()>
    7f2a:	2800      	cmp	r0, #0
    7f2c:	f43f af39 	beq.w	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
    7f30:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7f32:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7f36:	f003 fc21 	bl	b77c <FsCache::sync()>
    7f3a:	2800      	cmp	r0, #0
    7f3c:	f43f af31 	beq.w	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    7f40:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7f44:	f003 fc1a 	bl	b77c <FsCache::sync()>
    7f48:	2800      	cmp	r0, #0
    7f4a:	f43f af2a 	beq.w	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
    7f4e:	6820      	ldr	r0, [r4, #0]
    7f50:	6803      	ldr	r3, [r0, #0]
    7f52:	6a1b      	ldr	r3, [r3, #32]
    7f54:	4798      	blx	r3
    7f56:	e724      	b.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
    7f58:	2000      	movs	r0, #0
    7f5a:	e722      	b.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    7f5c:	2000      	movs	r0, #0
    7f5e:	e720      	b.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    7f60:	2000      	movs	r0, #0
    7f62:	e71e      	b.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    7f64:	2000      	movs	r0, #0
    7f66:	e71c      	b.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>
    7f68:	2000      	movs	r0, #0
    7f6a:	e71a      	b.n	7da2 <FatFile::rename(FatFile*, char const*)+0x38>

00007f6c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    7f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f70:	b083      	sub	sp, #12
    7f72:	9101      	str	r1, [sp, #4]
    7f74:	461e      	mov	r6, r3
    7f76:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    7f7a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    7f7e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    7f82:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    7f86:	7803      	ldrb	r3, [r0, #0]
    7f88:	f013 0f08 	tst.w	r3, #8
    7f8c:	d060      	beq.n	8050 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
    7f8e:	4605      	mov	r5, r0
      || year > 2107
    7f90:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    7f94:	b294      	uxth	r4, r2
    7f96:	2c7f      	cmp	r4, #127	; 0x7f
    7f98:	d85e      	bhi.n	8058 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
    7f9a:	1e73      	subs	r3, r6, #1
    7f9c:	b2db      	uxtb	r3, r3
    7f9e:	2b0b      	cmp	r3, #11
    7fa0:	d85c      	bhi.n	805c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
    7fa2:	1e7b      	subs	r3, r7, #1
    7fa4:	b2db      	uxtb	r3, r3
    7fa6:	2b1e      	cmp	r3, #30
    7fa8:	d85a      	bhi.n	8060 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
    7faa:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    7fae:	bf98      	it	ls
    7fb0:	f1b9 0f17 	cmpls.w	r9, #23
    7fb4:	bf8c      	ite	hi
    7fb6:	f04f 0b01 	movhi.w	fp, #1
    7fba:	f04f 0b00 	movls.w	fp, #0
    7fbe:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    7fc2:	bf88      	it	hi
    7fc4:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
    7fc8:	f1bb 0f00 	cmp.w	fp, #0
    7fcc:	d001      	beq.n	7fd2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    7fce:	2000      	movs	r0, #0
    7fd0:	e03f      	b.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
    7fd2:	f7ff fcab 	bl	792c <FatFile::sync()>
    7fd6:	2800      	cmp	r0, #0
    7fd8:	d03b      	beq.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7fda:	2101      	movs	r1, #1
    7fdc:	4628      	mov	r0, r5
    7fde:	f7ff fa07 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7fe2:	4601      	mov	r1, r0
    7fe4:	2800      	cmp	r0, #0
    7fe6:	d03d      	beq.n	8064 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    7fe8:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
    7fec:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    7ff0:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    7ff2:	ea4f 0258 	mov.w	r2, r8, lsr #1
    7ff6:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
    7ffa:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
    7ffe:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
    8000:	9801      	ldr	r0, [sp, #4]
    8002:	f010 0f01 	tst.w	r0, #1
    8006:	bf18      	it	ne
    8008:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
    800a:	9801      	ldr	r0, [sp, #4]
    800c:	f010 0f02 	tst.w	r0, #2
    8010:	d008      	beq.n	8024 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
    8012:	820b      	strh	r3, [r1, #16]
    8014:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
    8016:	f018 0801 	ands.w	r8, r8, #1
    801a:	bf18      	it	ne
    801c:	f04f 0864 	movne.w	r8, #100	; 0x64
    8020:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
    8024:	9801      	ldr	r0, [sp, #4]
    8026:	f010 0f04 	tst.w	r0, #4
    802a:	d001      	beq.n	8030 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
    802c:	830b      	strh	r3, [r1, #24]
    802e:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
    8030:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8032:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8036:	f003 fba1 	bl	b77c <FsCache::sync()>
    803a:	b150      	cbz	r0, 8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    803c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8040:	f003 fb9c 	bl	b77c <FsCache::sync()>
    8044:	b128      	cbz	r0, 8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
    8046:	6820      	ldr	r0, [r4, #0]
    8048:	6803      	ldr	r3, [r0, #0]
    804a:	6a1b      	ldr	r3, [r3, #32]
    804c:	4798      	blx	r3
    804e:	e000      	b.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
    8050:	2000      	movs	r0, #0
}
    8052:	b003      	add	sp, #12
    8054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8058:	2000      	movs	r0, #0
    805a:	e7fa      	b.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    805c:	2000      	movs	r0, #0
    805e:	e7f8      	b.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8060:	2000      	movs	r0, #0
    8062:	e7f6      	b.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8064:	4658      	mov	r0, fp
    8066:	e7f4      	b.n	8052 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

00008068 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    8068:	7883      	ldrb	r3, [r0, #2]
    806a:	f013 0f02 	tst.w	r3, #2
    806e:	d02f      	beq.n	80d0 <FatFile::truncate()+0x68>
bool FatFile::truncate() {
    8070:	b510      	push	{r4, lr}
    8072:	b082      	sub	sp, #8
    8074:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    8076:	6a01      	ldr	r1, [r0, #32]
    8078:	b361      	cbz	r1, 80d4 <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
    807a:	6903      	ldr	r3, [r0, #16]
    807c:	b93b      	cbnz	r3, 808e <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    807e:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
    8080:	2300      	movs	r3, #0
    8082:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    8084:	68a0      	ldr	r0, [r4, #8]
    8086:	f001 fae3 	bl	9650 <FatPartition::freeChain(unsigned long)>
    808a:	b968      	cbnz	r0, 80a8 <FatFile::truncate()+0x40>
    808c:	e015      	b.n	80ba <FatFile::truncate()+0x52>
    toFree = 0;
    808e:	2200      	movs	r2, #0
    8090:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    8092:	aa01      	add	r2, sp, #4
    8094:	4619      	mov	r1, r3
    8096:	6880      	ldr	r0, [r0, #8]
    8098:	f001 f971 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    809c:	2800      	cmp	r0, #0
    809e:	db1b      	blt.n	80d8 <FatFile::truncate()+0x70>
    if (fg) {
    80a0:	b968      	cbnz	r0, 80be <FatFile::truncate()+0x56>
  if (toFree) {
    80a2:	9901      	ldr	r1, [sp, #4]
    80a4:	2900      	cmp	r1, #0
    80a6:	d1ed      	bne.n	8084 <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    80a8:	6963      	ldr	r3, [r4, #20]
    80aa:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    80ac:	78a3      	ldrb	r3, [r4, #2]
    80ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    80b2:	70a3      	strb	r3, [r4, #2]
  return sync();
    80b4:	4620      	mov	r0, r4
    80b6:	f7ff fc39 	bl	792c <FatFile::sync()>

 fail:
  return false;
}
    80ba:	b002      	add	sp, #8
    80bc:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    80be:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    80c2:	6921      	ldr	r1, [r4, #16]
    80c4:	68a0      	ldr	r0, [r4, #8]
    80c6:	f001 f9e9 	bl	949c <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    80ca:	2800      	cmp	r0, #0
    80cc:	d1e9      	bne.n	80a2 <FatFile::truncate()+0x3a>
    80ce:	e7f4      	b.n	80ba <FatFile::truncate()+0x52>
  return false;
    80d0:	2000      	movs	r0, #0
}
    80d2:	4770      	bx	lr
      return true;
    80d4:	2001      	movs	r0, #1
    80d6:	e7f0      	b.n	80ba <FatFile::truncate()+0x52>
  return false;
    80d8:	2000      	movs	r0, #0
    80da:	e7ee      	b.n	80ba <FatFile::truncate()+0x52>

000080dc <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    80dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80e0:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    80e2:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    80e4:	f013 0f02 	tst.w	r3, #2
    80e8:	d017      	beq.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
    80ea:	4688      	mov	r8, r1
    80ec:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    80ee:	f013 0f08 	tst.w	r3, #8
    80f2:	d10d      	bne.n	8110 <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    80f4:	6963      	ldr	r3, [r4, #20]
    80f6:	43db      	mvns	r3, r3
    80f8:	454b      	cmp	r3, r9
    80fa:	d30e      	bcc.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    80fc:	f1b9 0f00 	cmp.w	r9, #0
    8100:	f000 80ac 	beq.w	825c <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
    8104:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8106:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    810a:	f04f 0a01 	mov.w	sl, #1
    810e:	e064      	b.n	81da <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
    8110:	69c1      	ldr	r1, [r0, #28]
    8112:	f7ff fabd 	bl	7690 <FatFile::seekSet(unsigned long)>
    8116:	2800      	cmp	r0, #0
    8118:	d1ec      	bne.n	80f4 <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    811a:	7863      	ldrb	r3, [r4, #1]
    811c:	f043 0301 	orr.w	r3, r3, #1
    8120:	7063      	strb	r3, [r4, #1]
  return 0;
    8122:	2000      	movs	r0, #0
}
    8124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8128:	465a      	mov	r2, fp
    812a:	f001 f928 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    812e:	2800      	cmp	r0, #0
    8130:	dbf3      	blt.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
    8132:	b938      	cbnz	r0, 8144 <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
    8134:	4620      	mov	r0, r4
    8136:	f7ff f8fb 	bl	7330 <FatFile::addCluster()>
    813a:	b918      	cbnz	r0, 8144 <FatFile::write(void const*, unsigned int)+0x68>
    813c:	e7ed      	b.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
    813e:	6a23      	ldr	r3, [r4, #32]
    8140:	b1eb      	cbz	r3, 817e <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
    8142:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8144:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8146:	6921      	ldr	r1, [r4, #16]
    8148:	3902      	subs	r1, #2
    814a:	7983      	ldrb	r3, [r0, #6]
    814c:	4099      	lsls	r1, r3
    814e:	6943      	ldr	r3, [r0, #20]
    8150:	4419      	add	r1, r3
                      + sectorOfCluster;
    8152:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8154:	b916      	cbnz	r6, 815c <FatFile::write(void const*, unsigned int)+0x80>
    8156:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    815a:	d218      	bcs.n	818e <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
    815c:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    8160:	42bd      	cmp	r5, r7
    8162:	bf28      	it	cs
    8164:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
    8166:	bb16      	cbnz	r6, 81ae <FatFile::write(void const*, unsigned int)+0xd2>
    8168:	6962      	ldr	r2, [r4, #20]
    816a:	69e3      	ldr	r3, [r4, #28]
    816c:	429a      	cmp	r2, r3
    816e:	d24b      	bcs.n	8208 <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    8170:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8172:	f013 0f20 	tst.w	r3, #32
    8176:	bf0c      	ite	eq
    8178:	2201      	moveq	r2, #1
    817a:	2205      	movne	r2, #5
    817c:	e018      	b.n	81b0 <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
    817e:	4620      	mov	r0, r4
    8180:	f7ff f8d6 	bl	7330 <FatFile::addCluster()>
    8184:	2800      	cmp	r0, #0
    8186:	d0c8      	beq.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
    8188:	6923      	ldr	r3, [r4, #16]
    818a:	6223      	str	r3, [r4, #32]
    818c:	e7da      	b.n	8144 <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    818e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    8192:	d241      	bcs.n	8218 <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
    8194:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8196:	4299      	cmp	r1, r3
    8198:	d059      	beq.n	824e <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
    819a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    819c:	6803      	ldr	r3, [r0, #0]
    819e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    81a0:	4642      	mov	r2, r8
    81a2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    81a4:	2800      	cmp	r0, #0
    81a6:	d0b8      	beq.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
    81a8:	f44f 7500 	mov.w	r5, #512	; 0x200
    81ac:	e00f      	b.n	81ce <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    81ae:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
    81b0:	3028      	adds	r0, #40	; 0x28
    81b2:	f003 fb0a 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    81b6:	2800      	cmp	r0, #0
    81b8:	d0af      	beq.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
    81ba:	462a      	mov	r2, r5
    81bc:	4641      	mov	r1, r8
    81be:	4430      	add	r0, r6
    81c0:	f004 feae 	bl	cf20 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    81c4:	68a0      	ldr	r0, [r4, #8]
    81c6:	442e      	add	r6, r5
    81c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    81cc:	d01e      	beq.n	820c <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
    81ce:	6963      	ldr	r3, [r4, #20]
    81d0:	442b      	add	r3, r5
    81d2:	6163      	str	r3, [r4, #20]
    src += n;
    81d4:	44a8      	add	r8, r5
  while (nToWrite) {
    81d6:	1b7f      	subs	r7, r7, r5
    81d8:	d040      	beq.n	825c <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    81da:	68a0      	ldr	r0, [r4, #8]
    81dc:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
    81de:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    81e0:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    81e4:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
    81e8:	d1ac      	bne.n	8144 <FatFile::write(void const*, unsigned int)+0x68>
    81ea:	2e00      	cmp	r6, #0
    81ec:	d1aa      	bne.n	8144 <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
    81ee:	6921      	ldr	r1, [r4, #16]
    81f0:	2900      	cmp	r1, #0
    81f2:	d0a4      	beq.n	813e <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
    81f4:	78a2      	ldrb	r2, [r4, #2]
    81f6:	f012 0f40 	tst.w	r2, #64	; 0x40
    81fa:	d095      	beq.n	8128 <FatFile::write(void const*, unsigned int)+0x4c>
    81fc:	69e2      	ldr	r2, [r4, #28]
    81fe:	4293      	cmp	r3, r2
    8200:	d292      	bcs.n	8128 <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
    8202:	3101      	adds	r1, #1
    8204:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
    8206:	e79d      	b.n	8144 <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8208:	2205      	movs	r2, #5
    820a:	e7d1      	b.n	81b0 <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
    820c:	3028      	adds	r0, #40	; 0x28
    820e:	f003 fab5 	bl	b77c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    8212:	2800      	cmp	r0, #0
    8214:	d1db      	bne.n	81ce <FatFile::write(void const*, unsigned int)+0xf2>
    8216:	e780      	b.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8218:	7903      	ldrb	r3, [r0, #4]
    821a:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    821c:	0a7a      	lsrs	r2, r7, #9
    821e:	4293      	cmp	r3, r2
    8220:	bf28      	it	cs
    8222:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    8224:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    8226:	6b42      	ldr	r2, [r0, #52]	; 0x34
    8228:	4291      	cmp	r1, r2
    822a:	d808      	bhi.n	823e <FatFile::write(void const*, unsigned int)+0x162>
    822c:	18ce      	adds	r6, r1, r3
    822e:	42b2      	cmp	r2, r6
    8230:	d205      	bcs.n	823e <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
    8232:	2200      	movs	r2, #0
    8234:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    823c:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    823e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8240:	6802      	ldr	r2, [r0, #0]
    8242:	6a96      	ldr	r6, [r2, #40]	; 0x28
    8244:	4642      	mov	r2, r8
    8246:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8248:	2800      	cmp	r0, #0
    824a:	d1c0      	bne.n	81ce <FatFile::write(void const*, unsigned int)+0xf2>
    824c:	e765      	b.n	811a <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
    824e:	2300      	movs	r3, #0
    8250:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8258:	6343      	str	r3, [r0, #52]	; 0x34
  }
    825a:	e79e      	b.n	819a <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
    825c:	6963      	ldr	r3, [r4, #20]
    825e:	69e2      	ldr	r2, [r4, #28]
    8260:	4293      	cmp	r3, r2
    8262:	d906      	bls.n	8272 <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
    8264:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8266:	78a3      	ldrb	r3, [r4, #2]
    8268:	f063 037f 	orn	r3, r3, #127	; 0x7f
    826c:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    826e:	4648      	mov	r0, r9
    8270:	e758      	b.n	8124 <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
    8272:	4b05      	ldr	r3, [pc, #20]	; (8288 <FatFile::write(void const*, unsigned int)+0x1ac>)
    8274:	681b      	ldr	r3, [r3, #0]
    8276:	b12b      	cbz	r3, 8284 <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8278:	78a3      	ldrb	r3, [r4, #2]
    827a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    827e:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    8280:	4648      	mov	r0, r9
    8282:	e74f      	b.n	8124 <FatFile::write(void const*, unsigned int)+0x48>
    8284:	4648      	mov	r0, r9
    8286:	e74d      	b.n	8124 <FatFile::write(void const*, unsigned int)+0x48>
    8288:	20004b64 	.word	0x20004b64

0000828c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8290:	b08d      	sub	sp, #52	; 0x34
    8292:	4680      	mov	r8, r0
    8294:	9100      	str	r1, [sp, #0]
    8296:	4614      	mov	r4, r2
    8298:	461f      	mov	r7, r3
  FatFile dir = *this;
    829a:	ad03      	add	r5, sp, #12
    829c:	4606      	mov	r6, r0
    829e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    82a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    82a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    82a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    82a6:	6833      	ldr	r3, [r6, #0]
    82a8:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    82aa:	6823      	ldr	r3, [r4, #0]
    82ac:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    82ae:	2300      	movs	r3, #0
    82b0:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    82b2:	9701      	str	r7, [sp, #4]
    82b4:	2f00      	cmp	r7, #0
    82b6:	d040      	beq.n	833a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
    82b8:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    82bc:	9b00      	ldr	r3, [sp, #0]
    82be:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    82c2:	b289      	uxth	r1, r1
    82c4:	0149      	lsls	r1, r1, #5
    82c6:	a803      	add	r0, sp, #12
    82c8:	f7ff f9e2 	bl	7690 <FatFile::seekSet(unsigned long)>
    82cc:	4682      	mov	sl, r0
    82ce:	b340      	cbz	r0, 8322 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
    82d0:	2100      	movs	r1, #0
    82d2:	a803      	add	r0, sp, #12
    82d4:	f7ff f9ba 	bl	764c <FatFile::readDirCache(bool)>
    if (!ldir) {
    82d8:	4681      	mov	r9, r0
    82da:	b388      	cbz	r0, 8340 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
    82dc:	2600      	movs	r6, #0
    82de:	e00f      	b.n	8300 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    82e0:	4620      	mov	r0, r4
    82e2:	f003 fab1 	bl	b848 <FsName::get16()>
    82e6:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    82e8:	4628      	mov	r0, r5
    82ea:	f003 fbcb 	bl	ba84 <toUpcase(unsigned short)>
    82ee:	4605      	mov	r5, r0
    82f0:	4638      	mov	r0, r7
    82f2:	f003 fbc7 	bl	ba84 <toUpcase(unsigned short)>
    82f6:	4285      	cmp	r5, r0
    82f8:	d125      	bne.n	8346 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
    82fa:	3601      	adds	r6, #1
    82fc:	2e0d      	cmp	r6, #13
    82fe:	d014      	beq.n	832a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
    8300:	b2f2      	uxtb	r2, r6
    8302:	4649      	mov	r1, r9
    8304:	4640      	mov	r0, r8
    8306:	f000 ff19 	bl	913c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    830a:	4605      	mov	r5, r0
    return !ls && next == end;
    830c:	89a3      	ldrh	r3, [r4, #12]
    830e:	2b00      	cmp	r3, #0
    8310:	d1e6      	bne.n	82e0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
    8312:	6862      	ldr	r2, [r4, #4]
    8314:	68a3      	ldr	r3, [r4, #8]
    8316:	429a      	cmp	r2, r3
    8318:	d1e2      	bne.n	82e0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
    831a:	fab0 fa80 	clz	sl, r0
    831e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
    8322:	4650      	mov	r0, sl
    8324:	b00d      	add	sp, #52	; 0x34
    8326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    832a:	f10b 0b01 	add.w	fp, fp, #1
    832e:	fa5f fb8b 	uxtb.w	fp, fp
    8332:	9b01      	ldr	r3, [sp, #4]
    8334:	455b      	cmp	r3, fp
    8336:	d2c1      	bcs.n	82bc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
    8338:	e7f3      	b.n	8322 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
    833a:	f04f 0a01 	mov.w	sl, #1
    833e:	e7f0      	b.n	8322 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
    8340:	f04f 0a00 	mov.w	sl, #0
    8344:	e7ed      	b.n	8322 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
    8346:	f04f 0a00 	mov.w	sl, #0
    834a:	e7ea      	b.n	8322 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

0000834c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8350:	b08f      	sub	sp, #60	; 0x3c
    8352:	9102      	str	r1, [sp, #8]
    8354:	4617      	mov	r7, r2
    8356:	461e      	mov	r6, r3
  FatFile dir = *this;
    8358:	ad05      	add	r5, sp, #20
    835a:	4604      	mov	r4, r0
    835c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    835e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8364:	6823      	ldr	r3, [r4, #0]
    8366:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
    8368:	f107 0215 	add.w	r2, r7, #21
    836c:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
    8370:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8374:	ea4f 13ca 	mov.w	r3, sl, lsl #7
    8378:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
    837c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    8380:	fa50 f383 	uxtab	r3, r0, r3
    8384:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
    8388:	428a      	cmp	r2, r1
    838a:	d1f3      	bne.n	8374 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
    838c:	683b      	ldr	r3, [r7, #0]
    838e:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    8390:	2300      	movs	r3, #0
    8392:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8394:	2e00      	cmp	r6, #0
    8396:	d064      	beq.n	8462 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
    8398:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
    839c:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    839e:	f8cd a00c 	str.w	sl, [sp, #12]
    83a2:	46b2      	mov	sl, r6
    83a4:	e032      	b.n	840c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    83a6:	4638      	mov	r0, r7
    83a8:	f003 fa4e 	bl	b848 <FsName::get16()>
  if (i < 5) {
    83ac:	f1b8 0f04 	cmp.w	r8, #4
    83b0:	d818      	bhi.n	83e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
    83b2:	b2f3      	uxtb	r3, r6
    83b4:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    83b8:	f8a3 0001 	strh.w	r0, [r3, #1]
    83bc:	3601      	adds	r6, #1
    83be:	3501      	adds	r5, #1
    83c0:	b2ed      	uxtb	r5, r5
    83c2:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
    83c6:	89bb      	ldrh	r3, [r7, #12]
    83c8:	2b00      	cmp	r3, #0
    83ca:	d1ec      	bne.n	83a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
    83cc:	687a      	ldr	r2, [r7, #4]
    83ce:	68bb      	ldr	r3, [r7, #8]
    83d0:	429a      	cmp	r2, r3
    83d2:	d1e8      	bne.n	83a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
    83d4:	1c63      	adds	r3, r4, #1
    83d6:	1e20      	subs	r0, r4, #0
    83d8:	bf18      	it	ne
    83da:	2001      	movne	r0, #1
    83dc:	4240      	negs	r0, r0
    83de:	b280      	uxth	r0, r0
    83e0:	b2dc      	uxtb	r4, r3
    83e2:	e7e3      	b.n	83ac <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
    83e4:	f1b8 0f0a 	cmp.w	r8, #10
    83e8:	d804      	bhi.n	83f4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
    83ea:	b2f3      	uxtb	r3, r6
    83ec:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    83f0:	8098      	strh	r0, [r3, #4]
}
    83f2:	e7e3      	b.n	83bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
    83f4:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
    83f6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    83fa:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
    83fc:	2d0c      	cmp	r5, #12
    83fe:	d9dd      	bls.n	83bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8400:	f10b 0b01 	add.w	fp, fp, #1
    8404:	fa5f fb8b 	uxtb.w	fp, fp
    8408:	45da      	cmp	sl, fp
    840a:	d32c      	bcc.n	8466 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    840c:	9b02      	ldr	r3, [sp, #8]
    840e:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8412:	b289      	uxth	r1, r1
    8414:	0149      	lsls	r1, r1, #5
    8416:	a805      	add	r0, sp, #20
    8418:	f7ff f93a 	bl	7690 <FatFile::seekSet(unsigned long)>
    841c:	9001      	str	r0, [sp, #4]
    841e:	b310      	cbz	r0, 8466 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8420:	2100      	movs	r1, #0
    8422:	a805      	add	r0, sp, #20
    8424:	f7ff f912 	bl	764c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8428:	4681      	mov	r9, r0
    842a:	b300      	cbz	r0, 846e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
    842c:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
    842e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8432:	f043 0301 	orr.w	r3, r3, #1
    8436:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    843a:	45da      	cmp	sl, fp
    843c:	bf0c      	ite	eq
    843e:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
    8442:	465b      	movne	r3, fp
    8444:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8446:	f04f 030f 	mov.w	r3, #15
    844a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    844c:	f04f 0300 	mov.w	r3, #0
    8450:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
    8452:	9b03      	ldr	r3, [sp, #12]
    8454:	7343      	strb	r3, [r0, #13]
    8456:	f04f 0300 	mov.w	r3, #0
    845a:	8343      	strh	r3, [r0, #26]
    845c:	2501      	movs	r5, #1
    845e:	2600      	movs	r6, #0
    8460:	e7af      	b.n	83c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8462:	2301      	movs	r3, #1
    8464:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
    8466:	9801      	ldr	r0, [sp, #4]
    8468:	b00f      	add	sp, #60	; 0x3c
    846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    846e:	2300      	movs	r3, #0
    8470:	9301      	str	r3, [sp, #4]
    8472:	e7f8      	b.n	8466 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

00008474 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    8474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8478:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    847a:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
    847c:	4602      	mov	r2, r0
    847e:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    8482:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
    8484:	2120      	movs	r1, #32
    8486:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
    848a:	4282      	cmp	r2, r0
    848c:	d1fb      	bne.n	8486 <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    848e:	781a      	ldrb	r2, [r3, #0]
    8490:	2a2e      	cmp	r2, #46	; 0x2e
    8492:	bf14      	ite	ne
    8494:	2501      	movne	r5, #1
    8496:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8498:	d103      	bne.n	84a2 <FatFile::makeSFN(FatLfn_t*)+0x2e>
    849a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    849e:	2a2e      	cmp	r2, #46	; 0x2e
    84a0:	d0fb      	beq.n	849a <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    84a2:	1e62      	subs	r2, r4, #1
    84a4:	429a      	cmp	r2, r3
    84a6:	d909      	bls.n	84bc <FatFile::makeSFN(FatLfn_t*)+0x48>
    84a8:	4611      	mov	r1, r2
    84aa:	461e      	mov	r6, r3
    84ac:	460a      	mov	r2, r1
    84ae:	3901      	subs	r1, #1
    84b0:	7810      	ldrb	r0, [r2, #0]
    84b2:	282e      	cmp	r0, #46	; 0x2e
    84b4:	d002      	beq.n	84bc <FatFile::makeSFN(FatLfn_t*)+0x48>
    84b6:	460a      	mov	r2, r1
    84b8:	42b1      	cmp	r1, r6
    84ba:	d1f7      	bne.n	84ac <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
    84bc:	429c      	cmp	r4, r3
    84be:	d908      	bls.n	84d2 <FatFile::makeSFN(FatLfn_t*)+0x5e>
    84c0:	2600      	movs	r6, #0
    84c2:	2707      	movs	r7, #7
    84c4:	46b4      	mov	ip, r6
    84c6:	46b3      	mov	fp, r6
    84c8:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    84cc:	f04f 0a0a 	mov.w	sl, #10
    84d0:	e061      	b.n	8596 <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
    84d2:	2600      	movs	r6, #0
    84d4:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    84d6:	f89e 3016 	ldrb.w	r3, [lr, #22]
    84da:	2b20      	cmp	r3, #32
    84dc:	f000 8084 	beq.w	85e8 <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    84e0:	2d00      	cmp	r5, #0
    84e2:	d03b      	beq.n	855c <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    84e4:	ea1b 0f06 	tst.w	fp, r6
    84e8:	bf18      	it	ne
    84ea:	2602      	movne	r6, #2
    84ec:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    84f0:	4628      	mov	r0, r5

 fail:
  return false;
}
    84f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    84f6:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
    84fa:	fa5f f888 	uxtb.w	r8, r8
    84fe:	f1b8 0f05 	cmp.w	r8, #5
    8502:	d964      	bls.n	85ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
    8504:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
    8508:	fa5f f888 	uxtb.w	r8, r8
    850c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    8510:	d85d      	bhi.n	85ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
    8512:	45bc      	cmp	ip, r7
    8514:	d815      	bhi.n	8542 <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
    8516:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
    851a:	b2c0      	uxtb	r0, r0
    851c:	2819      	cmp	r0, #25
    851e:	d82a      	bhi.n	8576 <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
    8520:	3920      	subs	r1, #32
    8522:	b2c9      	uxtb	r1, r1
        lc |= bit;
    8524:	ea49 0606 	orr.w	r6, r9, r6
    8528:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
    852a:	f10c 0001 	add.w	r0, ip, #1
    852e:	b2c0      	uxtb	r0, r0
    8530:	44f4      	add	ip, lr
    8532:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
    8536:	2806      	cmp	r0, #6
    8538:	d854      	bhi.n	85e4 <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
    853a:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
    853e:	4684      	mov	ip, r0
    8540:	e026      	b.n	8590 <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
    8542:	429a      	cmp	r2, r3
    8544:	bf2c      	ite	cs
    8546:	2500      	movcs	r5, #0
    8548:	2501      	movcc	r5, #1
    854a:	2f0a      	cmp	r7, #10
    854c:	bf08      	it	eq
    854e:	f045 0501 	orreq.w	r5, r5, #1
    8552:	b175      	cbz	r5, 8572 <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
    8554:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8558:	2b20      	cmp	r3, #32
    855a:	d0ca      	beq.n	84f2 <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    855c:	2001      	movs	r0, #1
    855e:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8562:	f89e 3014 	ldrb.w	r3, [lr, #20]
    8566:	4473      	add	r3, lr
    8568:	227e      	movs	r2, #126	; 0x7e
    856a:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    856c:	2231      	movs	r2, #49	; 0x31
    856e:	75da      	strb	r2, [r3, #23]
    8570:	e7bf      	b.n	84f2 <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
    8572:	1e53      	subs	r3, r2, #1
        continue;
    8574:	e00c      	b.n	8590 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
    8576:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
    857a:	b2c0      	uxtb	r0, r0
    857c:	2819      	cmp	r0, #25
        uc |= bit;
    857e:	bf98      	it	ls
    8580:	ea49 0b0b 	orrls.w	fp, r9, fp
    8584:	e7d1      	b.n	852a <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
    8586:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
    8588:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    858c:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8590:	3301      	adds	r3, #1
    8592:	429c      	cmp	r4, r3
    8594:	d99f      	bls.n	84d6 <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
    8596:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
    8598:	292e      	cmp	r1, #46	; 0x2e
    859a:	bf08      	it	eq
    859c:	429a      	cmpeq	r2, r3
    859e:	bf0c      	ite	eq
    85a0:	2001      	moveq	r0, #1
    85a2:	2000      	movne	r0, #0
    85a4:	d0ef      	beq.n	8586 <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    85a6:	2922      	cmp	r1, #34	; 0x22
    85a8:	d011      	beq.n	85ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
    85aa:	297c      	cmp	r1, #124	; 0x7c
    85ac:	d00f      	beq.n	85ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
    85ae:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
    85b2:	fa5f f888 	uxtb.w	r8, r8
    85b6:	f1b8 0f02 	cmp.w	r8, #2
    85ba:	d908      	bls.n	85ce <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    85bc:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
    85c0:	fa5f f888 	uxtb.w	r8, r8
    85c4:	f1b8 0f05 	cmp.w	r8, #5
    85c8:	d895      	bhi.n	84f6 <FatFile::makeSFN(FatLfn_t*)+0x82>
    85ca:	292d      	cmp	r1, #45	; 0x2d
    85cc:	d093      	beq.n	84f6 <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
    85ce:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    85d2:	2980      	cmp	r1, #128	; 0x80
    85d4:	d004      	beq.n	85e0 <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
    85d6:	45bc      	cmp	ip, r7
    85d8:	d8b3      	bhi.n	8542 <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
    85da:	4605      	mov	r5, r0
        c = '_';
    85dc:	215f      	movs	r1, #95	; 0x5f
    85de:	e7a4      	b.n	852a <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
    85e0:	4605      	mov	r5, r0
    85e2:	e7d5      	b.n	8590 <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
    85e4:	4684      	mov	ip, r0
    85e6:	e7d3      	b.n	8590 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
    85e8:	2000      	movs	r0, #0
    85ea:	e782      	b.n	84f2 <FatFile::makeSFN(FatLfn_t*)+0x7e>

000085ec <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    85ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85f0:	b083      	sub	sp, #12
    85f2:	4604      	mov	r4, r0
    85f4:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    85f6:	f891 8014 	ldrb.w	r8, [r1, #20]
    85fa:	2362      	movs	r3, #98	; 0x62
    85fc:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
    85fe:	2500      	movs	r5, #0
	return systick_millis_count;
    8600:	f8df b090 	ldr.w	fp, [pc, #144]	; 8694 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8604:	f101 0a16 	add.w	sl, r1, #22
    8608:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
    860c:	442b      	add	r3, r5
    860e:	b29d      	uxth	r5, r3
    if (pos > 3) {
    8610:	f1b8 0f03 	cmp.w	r8, #3
    8614:	bf28      	it	cs
    8616:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    861a:	f108 0304 	add.w	r3, r8, #4
    861e:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8620:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8624:	2a09      	cmp	r2, #9
    8626:	bf94      	ite	ls
    8628:	3230      	addls	r2, #48	; 0x30
    862a:	3237      	addhi	r2, #55	; 0x37
    862c:	18f9      	adds	r1, r7, r3
    862e:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
    8630:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8632:	3b01      	subs	r3, #1
    8634:	b2db      	uxtb	r3, r3
    8636:	4598      	cmp	r8, r3
    8638:	d1f2      	bne.n	8620 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    863a:	eb07 0308 	add.w	r3, r7, r8
    863e:	227e      	movs	r2, #126	; 0x7e
    8640:	759a      	strb	r2, [r3, #22]
    seekSet(0);
    8642:	2100      	movs	r1, #0
    8644:	4620      	mov	r0, r4
    8646:	f7ff f823 	bl	7690 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    864a:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    864c:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
    8650:	4631      	mov	r1, r6
    8652:	4620      	mov	r0, r4
    8654:	f7fe fffa 	bl	764c <FatFile::readDirCache(bool)>
      if (!dir) {
    8658:	4601      	mov	r1, r0
    865a:	b190      	cbz	r0, 8682 <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
    865c:	7803      	ldrb	r3, [r0, #0]
    865e:	b1bb      	cbz	r3, 8690 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8660:	7ac3      	ldrb	r3, [r0, #11]
    8662:	f013 0f08 	tst.w	r3, #8
    8666:	d1f3      	bne.n	8650 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8668:	464a      	mov	r2, r9
    866a:	4650      	mov	r0, sl
    866c:	f009 f812 	bl	11694 <memcmp>
    8670:	2800      	cmp	r0, #0
    8672:	d1ed      	bne.n	8650 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8674:	9b01      	ldr	r3, [sp, #4]
    8676:	3b01      	subs	r3, #1
    8678:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    867c:	9301      	str	r3, [sp, #4]
    867e:	d1c3      	bne.n	8608 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
    8680:	e003      	b.n	868a <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
    8682:	7860      	ldrb	r0, [r4, #1]
    8684:	fab0 f080 	clz	r0, r0
    8688:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    868a:	b003      	add	sp, #12
    868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8690:	2001      	movs	r0, #1
    8692:	e7fa      	b.n	868a <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
    8694:	200052bc 	.word	0x200052bc

00008698 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    869c:	b08f      	sub	sp, #60	; 0x3c
    869e:	900a      	str	r0, [sp, #40]	; 0x28
    86a0:	460e      	mov	r6, r1
    86a2:	9204      	str	r2, [sp, #16]
    86a4:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    86a6:	780b      	ldrb	r3, [r1, #0]
    86a8:	f013 0f70 	tst.w	r3, #112	; 0x70
    86ac:	f000 8158 	beq.w	8960 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
    86b0:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
    86b2:	f890 8000 	ldrb.w	r8, [r0]
    86b6:	f1b8 0f00 	cmp.w	r8, #0
    86ba:	f040 8157 	bne.w	896c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    86be:	6913      	ldr	r3, [r2, #16]
    86c0:	330c      	adds	r3, #12
    86c2:	4ab0      	ldr	r2, [pc, #704]	; (8984 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
    86c4:	fba2 2303 	umull	r2, r3, r2, r3
    86c8:	f3c3 0287 	ubfx	r2, r3, #2, #8
    86cc:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    86ce:	7d4b      	ldrb	r3, [r1, #21]
    86d0:	f013 0f03 	tst.w	r3, #3
    86d4:	d017      	beq.n	8706 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
    86d6:	1c57      	adds	r7, r2, #1
    86d8:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
    86da:	68b3      	ldr	r3, [r6, #8]
    86dc:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
    86de:	2100      	movs	r1, #0
    86e0:	4630      	mov	r0, r6
    86e2:	f7fe ffd5 	bl	7690 <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
    86e6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
    86ea:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
    86ee:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
    86f0:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
    86f4:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
    86f8:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    86fc:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    86fe:	9b04      	ldr	r3, [sp, #16]
    8700:	3316      	adds	r3, #22
    8702:	9305      	str	r3, [sp, #20]
  }
    8704:	e087      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8706:	2701      	movs	r7, #1
    8708:	e7e7      	b.n	86da <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
    870a:	f8cd 8008 	str.w	r8, [sp, #8]
    870e:	e082      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
    8710:	f8cd 8008 	str.w	r8, [sp, #8]
    8714:	e07f      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    8716:	f8cd 8008 	str.w	r8, [sp, #8]
    871a:	e07c      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
    871c:	7873      	ldrb	r3, [r6, #1]
    871e:	2b00      	cmp	r3, #0
    8720:	f040 8127 	bne.w	8972 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8724:	9b06      	ldr	r3, [sp, #24]
    8726:	f413 7f00 	tst.w	r3, #512	; 0x200
    872a:	f000 8125 	beq.w	8978 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    872e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8732:	3b01      	subs	r3, #1
    8734:	2b01      	cmp	r3, #1
    8736:	f200 8122 	bhi.w	897e <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    873a:	2c00      	cmp	r4, #0
    873c:	bf08      	it	eq
    873e:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    8740:	42bc      	cmp	r4, r7
    8742:	d20b      	bcs.n	875c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
    8744:	2500      	movs	r5, #0
    8746:	4629      	mov	r1, r5
    8748:	4630      	mov	r0, r6
    874a:	f7fe ff7f 	bl	764c <FatFile::readDirCache(bool)>
    if (!dir) {
    874e:	2800      	cmp	r0, #0
    8750:	f000 80ee 	beq.w	8930 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    8754:	3401      	adds	r4, #1
    8756:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8758:	42a7      	cmp	r7, r4
    875a:	d1f4      	bne.n	8746 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    875c:	9b08      	ldr	r3, [sp, #32]
    875e:	b13b      	cbz	r3, 8770 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
    8760:	9904      	ldr	r1, [sp, #16]
    8762:	4630      	mov	r0, r6
    8764:	f7ff ff42 	bl	85ec <FatFile::makeUniqueSfn(FatLfn_t*)>
    8768:	4681      	mov	r9, r0
    876a:	2800      	cmp	r0, #0
    876c:	f000 80fa 	beq.w	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    8770:	3f01      	subs	r7, #1
    8772:	b2fb      	uxtb	r3, r7
    8774:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
    8776:	449a      	add	sl, r3
    8778:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    877c:	9f04      	ldr	r7, [sp, #16]
    877e:	463a      	mov	r2, r7
    8780:	4629      	mov	r1, r5
    8782:	4630      	mov	r0, r6
    8784:	f7ff fde2 	bl	834c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8788:	4681      	mov	r9, r0
    878a:	2800      	cmp	r0, #0
    878c:	f000 80ea 	beq.w	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8790:	0169      	lsls	r1, r5, #5
    8792:	4630      	mov	r0, r6
    8794:	f7fe ff7c 	bl	7690 <FatFile::seekSet(unsigned long)>
    8798:	4681      	mov	r9, r0
    879a:	2800      	cmp	r0, #0
    879c:	f000 80e2 	beq.w	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    87a0:	2100      	movs	r1, #0
    87a2:	4630      	mov	r0, r6
    87a4:	f7fe ff52 	bl	764c <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    87a8:	4604      	mov	r4, r0
    87aa:	2800      	cmp	r0, #0
    87ac:	f000 80f1 	beq.w	8992 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    87b0:	2220      	movs	r2, #32
    87b2:	2100      	movs	r1, #0
    87b4:	f009 f83a 	bl	1182c <memset>
  memcpy(dir->name, fname->sfn, 11);
    87b8:	f8d7 2016 	ldr.w	r2, [r7, #22]
    87bc:	f8d7 301a 	ldr.w	r3, [r7, #26]
    87c0:	6022      	str	r2, [r4, #0]
    87c2:	6063      	str	r3, [r4, #4]
    87c4:	8bfa      	ldrh	r2, [r7, #30]
    87c6:	f897 3020 	ldrb.w	r3, [r7, #32]
    87ca:	8122      	strh	r2, [r4, #8]
    87cc:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    87ce:	7d7b      	ldrb	r3, [r7, #21]
    87d0:	f003 0318 	and.w	r3, r3, #24
    87d4:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    87d6:	4b6c      	ldr	r3, [pc, #432]	; (8988 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
    87d8:	681b      	ldr	r3, [r3, #0]
    87da:	2b00      	cmp	r3, #0
    87dc:	f000 80ba 	beq.w	8954 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    87e0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    87e4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
    87e8:	a80d      	add	r0, sp, #52	; 0x34
    87ea:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    87ec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    87f0:	8223      	strh	r3, [r4, #16]
    87f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    87f6:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    87f8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    87fc:	7363      	strb	r3, [r4, #13]
    87fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8800:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8804:	f043 0301 	orr.w	r3, r3, #1
    8808:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
    880c:	e086      	b.n	891c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
    880e:	2b00      	cmp	r3, #0
    8810:	d088      	beq.n	8724 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
    8812:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8816:	6975      	ldr	r5, [r6, #20]
    8818:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    881c:	4659      	mov	r1, fp
    881e:	4630      	mov	r0, r6
    8820:	f7fe ff14 	bl	764c <FatFile::readDirCache(bool)>
    if (!dir) {
    8824:	2800      	cmp	r0, #0
    8826:	f43f af79 	beq.w	871c <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    882a:	7803      	ldrb	r3, [r0, #0]
    882c:	2b00      	cmp	r3, #0
    882e:	bf18      	it	ne
    8830:	2be5      	cmpne	r3, #229	; 0xe5
    8832:	bf0c      	ite	eq
    8834:	f04f 0901 	moveq.w	r9, #1
    8838:	f04f 0900 	movne.w	r9, #0
    883c:	d107      	bne.n	884e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    883e:	2c00      	cmp	r4, #0
    8840:	bf08      	it	eq
    8842:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8844:	42bc      	cmp	r4, r7
    8846:	d2e2      	bcs.n	880e <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
    8848:	3401      	adds	r4, #1
    884a:	b2e4      	uxtb	r4, r4
    884c:	e7df      	b.n	880e <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
    884e:	42bc      	cmp	r4, r7
    8850:	bf38      	it	cc
    8852:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8854:	2b2e      	cmp	r3, #46	; 0x2e
    8856:	f43f af58 	beq.w	870a <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    885a:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
    885c:	2a0f      	cmp	r2, #15
    885e:	d014      	beq.n	888a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
    8860:	f012 0208 	ands.w	r2, r2, #8
    8864:	f47f af57 	bne.w	8716 <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
    8868:	9b02      	ldr	r3, [sp, #8]
    886a:	2b00      	cmp	r3, #0
    886c:	d13b      	bne.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    886e:	220b      	movs	r2, #11
    8870:	9905      	ldr	r1, [sp, #20]
    8872:	f008 ff0f 	bl	11694 <memcmp>
    8876:	2800      	cmp	r0, #0
    8878:	d1cd      	bne.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    887a:	9b04      	ldr	r3, [sp, #16]
    887c:	7d5b      	ldrb	r3, [r3, #21]
    887e:	f013 0301 	ands.w	r3, r3, #1
    8882:	d046      	beq.n	8912 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
    8884:	2301      	movs	r3, #1
    8886:	9308      	str	r3, [sp, #32]
    8888:	e7c5      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
    888a:	9a02      	ldr	r2, [sp, #8]
    888c:	b9ea      	cbnz	r2, 88ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
    888e:	f003 021f 	and.w	r2, r3, #31
    8892:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
    8894:	9907      	ldr	r1, [sp, #28]
    8896:	4291      	cmp	r1, r2
    8898:	d1bd      	bne.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
    889a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    889e:	9302      	str	r3, [sp, #8]
    88a0:	d0b9      	beq.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
    88a2:	7b43      	ldrb	r3, [r0, #13]
    88a4:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
    88a6:	9202      	str	r2, [sp, #8]
      if (order == 1) {
    88a8:	9b03      	ldr	r3, [sp, #12]
    88aa:	2b01      	cmp	r3, #1
    88ac:	d1b3      	bne.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    88ae:	1c69      	adds	r1, r5, #1
    88b0:	9d02      	ldr	r5, [sp, #8]
    88b2:	462b      	mov	r3, r5
    88b4:	9a04      	ldr	r2, [sp, #16]
    88b6:	b289      	uxth	r1, r1
    88b8:	4630      	mov	r0, r6
    88ba:	f7ff fce7 	bl	828c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    88be:	462b      	mov	r3, r5
    88c0:	2800      	cmp	r0, #0
    88c2:	bf08      	it	eq
    88c4:	4643      	moveq	r3, r8
    88c6:	9302      	str	r3, [sp, #8]
    88c8:	e7a5      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    88ca:	9a03      	ldr	r2, [sp, #12]
    88cc:	3a01      	subs	r2, #1
    88ce:	b2d2      	uxtb	r2, r2
    88d0:	9203      	str	r2, [sp, #12]
    88d2:	4293      	cmp	r3, r2
    88d4:	f47f af1c 	bne.w	8710 <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
    88d8:	7b43      	ldrb	r3, [r0, #13]
    88da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    88dc:	4293      	cmp	r3, r2
    88de:	d0e3      	beq.n	88a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
    88e0:	f8cd 8008 	str.w	r8, [sp, #8]
    88e4:	e797      	b.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    88e6:	9b03      	ldr	r3, [sp, #12]
    88e8:	2b01      	cmp	r3, #1
    88ea:	d13b      	bne.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
    88ec:	1e41      	subs	r1, r0, #1
    88ee:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    88f2:	01d3      	lsls	r3, r2, #7
    88f4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    88f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    88fc:	fa52 f383 	uxtab	r3, r2, r3
    8900:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    8902:	4561      	cmp	r1, ip
    8904:	d1f5      	bne.n	88f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
    8906:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8908:	4293      	cmp	r3, r2
    890a:	d12b      	bne.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    890c:	9b02      	ldr	r3, [sp, #8]
    890e:	4698      	mov	r8, r3
    8910:	e000      	b.n	8914 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
    8912:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
    8914:	9b06      	ldr	r3, [sp, #24]
    8916:	f413 6f00 	tst.w	r3, #2048	; 0x800
    891a:	d123      	bne.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    891c:	f8cd 8000 	str.w	r8, [sp]
    8920:	9b06      	ldr	r3, [sp, #24]
    8922:	462a      	mov	r2, r5
    8924:	4631      	mov	r1, r6
    8926:	980a      	ldr	r0, [sp, #40]	; 0x28
    8928:	f7fe ff31 	bl	778e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    892c:	4681      	mov	r9, r0
    892e:	e019      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
    8930:	7873      	ldrb	r3, [r6, #1]
    8932:	bb5b      	cbnz	r3, 898c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
    8934:	42a7      	cmp	r7, r4
    8936:	f67f af11 	bls.w	875c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    893a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
    893c:	4630      	mov	r0, r6
    893e:	f7fe fd15 	bl	736c <FatFile::addDirCluster()>
    8942:	4681      	mov	r9, r0
    8944:	b170      	cbz	r0, 8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8946:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8948:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    894c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    894e:	42a7      	cmp	r7, r4
    8950:	d8f4      	bhi.n	893c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
    8952:	e703      	b.n	875c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8954:	f245 6321 	movw	r3, #22049	; 0x5621
    8958:	8223      	strh	r3, [r4, #16]
    895a:	8323      	strh	r3, [r4, #24]
    895c:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    895e:	e74e      	b.n	87fe <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
    8960:	f04f 0900 	mov.w	r9, #0
}
    8964:	4648      	mov	r0, r9
    8966:	b00f      	add	sp, #60	; 0x3c
    8968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    896c:	f04f 0900 	mov.w	r9, #0
    8970:	e7f8      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8972:	f04f 0900 	mov.w	r9, #0
    8976:	e7f5      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8978:	f04f 0900 	mov.w	r9, #0
    897c:	e7f2      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    897e:	f04f 0900 	mov.w	r9, #0
    8982:	e7ef      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8984:	4ec4ec4f 	.word	0x4ec4ec4f
    8988:	20004b64 	.word	0x20004b64
    898c:	f04f 0900 	mov.w	r9, #0
    8990:	e7e8      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8992:	f04f 0900 	mov.w	r9, #0
    8996:	e7e5      	b.n	8964 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

00008998 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8998:	b5f0      	push	{r4, r5, r6, r7, lr}
    899a:	b083      	sub	sp, #12
    899c:	4608      	mov	r0, r1
    899e:	4615      	mov	r5, r2
    89a0:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    89a2:	780b      	ldrb	r3, [r1, #0]
    89a4:	2b20      	cmp	r3, #32
    89a6:	d103      	bne.n	89b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    89a8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    89ac:	2b20      	cmp	r3, #32
    89ae:	d0fb      	beq.n	89a8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
    89b0:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    89b2:	7803      	ldrb	r3, [r0, #0]
    89b4:	b1d3      	cbz	r3, 89ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    89b6:	2b2f      	cmp	r3, #47	; 0x2f
    89b8:	d018      	beq.n	89ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
    89ba:	2400      	movs	r4, #0
    89bc:	4e2c      	ldr	r6, [pc, #176]	; (8a70 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
    89be:	e033      	b.n	8a28 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    89c0:	f1bc 0f1f 	cmp.w	ip, #31
    89c4:	d90f      	bls.n	89e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    89c6:	e04d      	b.n	8a64 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    89c8:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
    89cc:	d00b      	beq.n	89e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    89ce:	d903      	bls.n	89d8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
    89d0:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
    89d4:	d007      	beq.n	89e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    89d6:	e020      	b.n	8a1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    89d8:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
    89dc:	fa5f fc8c 	uxtb.w	ip, ip
    89e0:	f1bc 0f01 	cmp.w	ip, #1
    89e4:	d819      	bhi.n	8a1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    89e6:	2000      	movs	r0, #0
}
    89e8:	b003      	add	sp, #12
    89ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    89ec:	692b      	ldr	r3, [r5, #16]
    89ee:	3b01      	subs	r3, #1
    89f0:	2bfe      	cmp	r3, #254	; 0xfe
    89f2:	d80f      	bhi.n	8a14 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    89f4:	7803      	ldrb	r3, [r0, #0]
    89f6:	2b20      	cmp	r3, #32
    89f8:	d001      	beq.n	89fe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    89fa:	2b2f      	cmp	r3, #47	; 0x2f
    89fc:	d105      	bne.n	8a0a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    89fe:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8a02:	2b20      	cmp	r3, #32
    8a04:	d0fb      	beq.n	89fe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8a06:	2b2f      	cmp	r3, #47	; 0x2f
    8a08:	d0f9      	beq.n	89fe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
    8a0a:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
    8a0c:	4628      	mov	r0, r5
    8a0e:	f7ff fd31 	bl	8474 <FatFile::makeSFN(FatLfn_t*)>
    8a12:	e7e9      	b.n	89e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
    8a14:	2000      	movs	r0, #0
    8a16:	e7e7      	b.n	89e8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
    8a18:	3402      	adds	r4, #2
      fname->len = len;
    8a1a:	612c      	str	r4, [r5, #16]
      fname->end = path;
    8a1c:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
    8a1e:	7803      	ldrb	r3, [r0, #0]
    8a20:	2b00      	cmp	r3, #0
    8a22:	d0e3      	beq.n	89ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8a24:	2b2f      	cmp	r3, #47	; 0x2f
    8a26:	d0e1      	beq.n	89ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8a28:	aa01      	add	r2, sp, #4
    8a2a:	1d01      	adds	r1, r0, #4
    8a2c:	f002 ffd6 	bl	b9dc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8a30:	2800      	cmp	r0, #0
    8a32:	d0d8      	beq.n	89e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
    8a34:	9b01      	ldr	r3, [sp, #4]
    8a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8a3a:	d2ed      	bcs.n	8a18 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
    8a3c:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8a3e:	2b7f      	cmp	r3, #127	; 0x7f
    8a40:	d810      	bhi.n	8a64 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8a42:	fa5f fc83 	uxtb.w	ip, r3
    8a46:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    8a4a:	d8bd      	bhi.n	89c8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
    8a4c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    8a50:	d9b6      	bls.n	89c0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    8a52:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
    8a56:	fa5f fc8c 	uxtb.w	ip, ip
    8a5a:	fa26 fc0c 	lsr.w	ip, r6, ip
    8a5e:	f01c 0f01 	tst.w	ip, #1
    8a62:	d1c0      	bne.n	89e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
    8a64:	2b2e      	cmp	r3, #46	; 0x2e
    8a66:	d0da      	beq.n	8a1e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8a68:	2b20      	cmp	r3, #32
    8a6a:	d0d8      	beq.n	8a1e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8a6c:	e7d5      	b.n	8a1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8a6e:	bf00      	nop
    8a70:	05002101 	.word	0x05002101

00008a74 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a78:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
    8a7a:	2300      	movs	r3, #0
    8a7c:	f88d 3004 	strb.w	r3, [sp, #4]
    8a80:	f88d 3005 	strb.w	r3, [sp, #5]
    8a84:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8a88:	7883      	ldrb	r3, [r0, #2]
    8a8a:	f013 0f02 	tst.w	r3, #2
    8a8e:	f000 8091 	beq.w	8bb4 <FatFile::remove()+0x140>
    8a92:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8a94:	6a01      	ldr	r1, [r0, #32]
    8a96:	b129      	cbz	r1, 8aa4 <FatFile::remove()+0x30>
    8a98:	6880      	ldr	r0, [r0, #8]
    8a9a:	f000 fdd9 	bl	9650 <FatPartition::freeChain(unsigned long)>
    8a9e:	4603      	mov	r3, r0
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d06c      	beq.n	8b7e <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8aa4:	2101      	movs	r1, #1
    8aa6:	4628      	mov	r0, r5
    8aa8:	f7fe fca2 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8aac:	4606      	mov	r6, r0
    8aae:	2800      	cmp	r0, #0
    8ab0:	f000 8082 	beq.w	8bb8 <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
    8ab4:	1e42      	subs	r2, r0, #1
    8ab6:	300a      	adds	r0, #10
    uint8_t sum = 0;
    8ab8:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8aba:	01e3      	lsls	r3, r4, #7
    8abc:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    8ac0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8ac4:	fa51 f383 	uxtab	r3, r1, r3
    8ac8:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    8aca:	4290      	cmp	r0, r2
    8acc:	d1f5      	bne.n	8aba <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8ace:	23e5      	movs	r3, #229	; 0xe5
    8ad0:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8ad2:	2300      	movs	r3, #0
    8ad4:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
    8ad6:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8ad8:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8ada:	f106 0028 	add.w	r0, r6, #40	; 0x28
    8ade:	f002 fe4d 	bl	b77c <FsCache::sync()>
    8ae2:	b908      	cbnz	r0, 8ae8 <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8ae4:	2300      	movs	r3, #0
    8ae6:	e04a      	b.n	8b7e <FatFile::remove()+0x10a>
    8ae8:	f506 700e 	add.w	r0, r6, #568	; 0x238
    8aec:	f002 fe46 	bl	b77c <FsCache::sync()>
    8af0:	2800      	cmp	r0, #0
    8af2:	d0f7      	beq.n	8ae4 <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
    8af4:	6830      	ldr	r0, [r6, #0]
    8af6:	6803      	ldr	r3, [r0, #0]
    8af8:	6a1b      	ldr	r3, [r3, #32]
    8afa:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    8afc:	4603      	mov	r3, r0
    8afe:	2800      	cmp	r0, #0
    8b00:	d03d      	beq.n	8b7e <FatFile::remove()+0x10a>
  if (!isLFN()) {
    8b02:	78ea      	ldrb	r2, [r5, #3]
    8b04:	2a00      	cmp	r2, #0
    8b06:	d03a      	beq.n	8b7e <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
    8b08:	4629      	mov	r1, r5
    8b0a:	a801      	add	r0, sp, #4
    8b0c:	f7fe fc9f 	bl	744e <FatFile::openCluster(FatFile*)>
    8b10:	4603      	mov	r3, r0
    8b12:	2800      	cmp	r0, #0
    8b14:	d033      	beq.n	8b7e <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8b16:	78eb      	ldrb	r3, [r5, #3]
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d04f      	beq.n	8bbc <FatFile::remove()+0x148>
    8b1c:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8b1e:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
    8b20:	f04f 08e5 	mov.w	r8, #229	; 0xe5
    8b24:	e021      	b.n	8b6a <FatFile::remove()+0xf6>
    8b26:	4639      	mov	r1, r7
    8b28:	a801      	add	r0, sp, #4
    8b2a:	f7fe fd8f 	bl	764c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8b2e:	2800      	cmp	r0, #0
    8b30:	d046      	beq.n	8bc0 <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8b32:	7ac2      	ldrb	r2, [r0, #11]
    8b34:	2a0f      	cmp	r2, #15
    8b36:	d145      	bne.n	8bc4 <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
    8b38:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8b3a:	f002 011f 	and.w	r1, r2, #31
    8b3e:	428e      	cmp	r6, r1
    8b40:	d142      	bne.n	8bc8 <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
    8b42:	7b41      	ldrb	r1, [r0, #13]
    8b44:	42a1      	cmp	r1, r4
    8b46:	d141      	bne.n	8bcc <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
    8b48:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
    8b4c:	68a9      	ldr	r1, [r5, #8]
    8b4e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    8b52:	f043 0301 	orr.w	r3, r3, #1
    8b56:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    8b5a:	f012 0f40 	tst.w	r2, #64	; 0x40
    8b5e:	d112      	bne.n	8b86 <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8b60:	3601      	adds	r6, #1
    8b62:	b2f6      	uxtb	r6, r6
    8b64:	78eb      	ldrb	r3, [r5, #3]
    8b66:	42b3      	cmp	r3, r6
    8b68:	d322      	bcc.n	8bb0 <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8b6a:	88a9      	ldrh	r1, [r5, #4]
    8b6c:	1b89      	subs	r1, r1, r6
    8b6e:	b289      	uxth	r1, r1
    8b70:	0149      	lsls	r1, r1, #5
    8b72:	a801      	add	r0, sp, #4
    8b74:	f7fe fd8c 	bl	7690 <FatFile::seekSet(unsigned long)>
    8b78:	4603      	mov	r3, r0
    8b7a:	2800      	cmp	r0, #0
    8b7c:	d1d3      	bne.n	8b26 <FatFile::remove()+0xb2>
}
    8b7e:	4618      	mov	r0, r3
    8b80:	b00a      	add	sp, #40	; 0x28
    8b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
    8b86:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8b88:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8b8c:	f002 fdf6 	bl	b77c <FsCache::sync()>
    8b90:	4603      	mov	r3, r0
    8b92:	2800      	cmp	r0, #0
    8b94:	d0f3      	beq.n	8b7e <FatFile::remove()+0x10a>
    8b96:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8b9a:	f002 fdef 	bl	b77c <FsCache::sync()>
    8b9e:	4603      	mov	r3, r0
    8ba0:	2800      	cmp	r0, #0
    8ba2:	d0ec      	beq.n	8b7e <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
    8ba4:	6820      	ldr	r0, [r4, #0]
    8ba6:	6803      	ldr	r3, [r0, #0]
    8ba8:	6a1b      	ldr	r3, [r3, #32]
    8baa:	4798      	blx	r3
    8bac:	4603      	mov	r3, r0
    8bae:	e7e6      	b.n	8b7e <FatFile::remove()+0x10a>
  return false;
    8bb0:	2300      	movs	r3, #0
 fail:
    8bb2:	e7e4      	b.n	8b7e <FatFile::remove()+0x10a>
  return false;
    8bb4:	2300      	movs	r3, #0
    8bb6:	e7e2      	b.n	8b7e <FatFile::remove()+0x10a>
    8bb8:	2300      	movs	r3, #0
    8bba:	e7e0      	b.n	8b7e <FatFile::remove()+0x10a>
    8bbc:	2300      	movs	r3, #0
    8bbe:	e7de      	b.n	8b7e <FatFile::remove()+0x10a>
    8bc0:	2300      	movs	r3, #0
    8bc2:	e7dc      	b.n	8b7e <FatFile::remove()+0x10a>
    8bc4:	2300      	movs	r3, #0
    8bc6:	e7da      	b.n	8b7e <FatFile::remove()+0x10a>
    8bc8:	2300      	movs	r3, #0
    8bca:	e7d8      	b.n	8b7e <FatFile::remove()+0x10a>
    8bcc:	2300      	movs	r3, #0
    8bce:	e7d6      	b.n	8b7e <FatFile::remove()+0x10a>

00008bd0 <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    8bd0:	b510      	push	{r4, lr}
    8bd2:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    8bd4:	6848      	ldr	r0, [r1, #4]
    8bd6:	b130      	cbz	r0, 8be6 <initFatDirCallback(unsigned long, void*)+0x16>
    8bd8:	890b      	ldrh	r3, [r1, #8]
    8bda:	3301      	adds	r3, #1
    8bdc:	b29b      	uxth	r3, r3
    8bde:	810b      	strh	r3, [r1, #8]
    8be0:	894a      	ldrh	r2, [r1, #10]
    8be2:	429a      	cmp	r2, r3
    8be4:	d901      	bls.n	8bea <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    8be6:	6820      	ldr	r0, [r4, #0]
    8be8:	bd10      	pop	{r4, pc}
    8bea:	6803      	ldr	r3, [r0, #0]
    8bec:	685b      	ldr	r3, [r3, #4]
    8bee:	2201      	movs	r2, #1
    8bf0:	4902      	ldr	r1, [pc, #8]	; (8bfc <initFatDirCallback(unsigned long, void*)+0x2c>)
    8bf2:	4798      	blx	r3
    state->count = 0;
    8bf4:	2300      	movs	r3, #0
    8bf6:	8123      	strh	r3, [r4, #8]
    8bf8:	e7f5      	b.n	8be6 <initFatDirCallback(unsigned long, void*)+0x16>
    8bfa:	bf00      	nop
    8bfc:	20002da8 	.word	0x20002da8

00008c00 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    8c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c02:	b087      	sub	sp, #28
    8c04:	4604      	mov	r4, r0
    8c06:	460e      	mov	r6, r1
    8c08:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
    8c0e:	2100      	movs	r1, #0
    8c10:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8c12:	f008 fe0b 	bl	1182c <memset>
  writeMsg("Writing FAT ");
    8c16:	6a20      	ldr	r0, [r4, #32]
    8c18:	b120      	cbz	r0, 8c24 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
    8c1a:	6803      	ldr	r3, [r0, #0]
    8c1c:	685b      	ldr	r3, [r3, #4]
    8c1e:	220c      	movs	r2, #12
    8c20:	4920      	ldr	r1, [pc, #128]	; (8ca4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    8c22:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
    8c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8c26:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
    8c28:	6a23      	ldr	r3, [r4, #32]
    8c2a:	9304      	str	r3, [sp, #16]
  state.count = 0;
    8c2c:	2300      	movs	r3, #0
    8c2e:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    8c32:	096b      	lsrs	r3, r5, #5
    8c34:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    8c38:	69e0      	ldr	r0, [r4, #28]
    8c3a:	68e1      	ldr	r1, [r4, #12]
    8c3c:	6803      	ldr	r3, [r0, #0]
    8c3e:	aa03      	add	r2, sp, #12
    8c40:	9200      	str	r2, [sp, #0]
    8c42:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    8c44:	4b18      	ldr	r3, [pc, #96]	; (8ca8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    8c46:	1e6a      	subs	r2, r5, #1
    8c48:	3101      	adds	r1, #1
    8c4a:	47b8      	blx	r7
    8c4c:	4603      	mov	r3, r0
    8c4e:	b328      	cbz	r0, 8c9c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
    8c50:	6a20      	ldr	r0, [r4, #32]
    8c52:	b120      	cbz	r0, 8c5e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    8c54:	6803      	ldr	r3, [r0, #0]
    8c56:	685b      	ldr	r3, [r3, #4]
    8c58:	2202      	movs	r2, #2
    8c5a:	4914      	ldr	r1, [pc, #80]	; (8cac <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    8c5c:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    8c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8c60:	22f8      	movs	r2, #248	; 0xf8
    8c62:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
    8c64:	2e10      	cmp	r6, #16
    8c66:	bf0c      	ite	eq
    8c68:	2004      	moveq	r0, #4
    8c6a:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
    8c6c:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
    8c6e:	21ff      	movs	r1, #255	; 0xff
    8c70:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c72:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    8c74:	3301      	adds	r3, #1
    8c76:	4298      	cmp	r0, r3
    8c78:	d1fa      	bne.n	8c70 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    8c7a:	69e0      	ldr	r0, [r4, #28]
    8c7c:	6803      	ldr	r3, [r0, #0]
    8c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c80:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c82:	68e1      	ldr	r1, [r4, #12]
    8c84:	4798      	blx	r3
    8c86:	4603      	mov	r3, r0
    8c88:	b140      	cbz	r0, 8c9c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    8c8a:	69e0      	ldr	r0, [r4, #28]
    8c8c:	68e5      	ldr	r5, [r4, #12]
    8c8e:	68a1      	ldr	r1, [r4, #8]
    8c90:	6803      	ldr	r3, [r0, #0]
    8c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c94:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8c96:	4429      	add	r1, r5
    8c98:	4798      	blx	r3
    8c9a:	4603      	mov	r3, r0
}
    8c9c:	4618      	mov	r0, r3
    8c9e:	b007      	add	sp, #28
    8ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ca2:	bf00      	nop
    8ca4:	200020e0 	.word	0x200020e0
    8ca8:	00008bd1 	.word	0x00008bd1
    8cac:	20002104 	.word	0x20002104

00008cb0 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    8cb0:	b570      	push	{r4, r5, r6, lr}
    8cb2:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8cb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8cb6:	f44f 7600 	mov.w	r6, #512	; 0x200
    8cba:	4632      	mov	r2, r6
    8cbc:	2100      	movs	r1, #0
    8cbe:	4620      	mov	r0, r4
    8cc0:	f008 fdb4 	bl	1182c <memset>
  pbs->jmpInstruction[0] = 0XEB;
    8cc4:	23eb      	movs	r3, #235	; 0xeb
    8cc6:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    8cc8:	2376      	movs	r3, #118	; 0x76
    8cca:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    8ccc:	2390      	movs	r3, #144	; 0x90
    8cce:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    8cd0:	2320      	movs	r3, #32
    8cd2:	70e3      	strb	r3, [r4, #3]
    8cd4:	7123      	strb	r3, [r4, #4]
    8cd6:	7163      	strb	r3, [r4, #5]
    8cd8:	71a3      	strb	r3, [r4, #6]
    8cda:	71e3      	strb	r3, [r4, #7]
    8cdc:	7223      	strb	r3, [r4, #8]
    8cde:	7263      	strb	r3, [r4, #9]
    8ce0:	72a3      	strb	r3, [r4, #10]
    8ce2:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    8ce6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    8cea:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    8cec:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    8cee:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    8cf0:	2302      	movs	r3, #2
    8cf2:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    8cf4:	23f8      	movs	r3, #248	; 0xf8
    8cf6:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    8cf8:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8cfa:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    8cfc:	69ab      	ldr	r3, [r5, #24]
    8cfe:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d00:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8d04:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    8d08:	bd70      	pop	{r4, r5, r6, pc}

00008d0a <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    8d0a:	b538      	push	{r3, r4, r5, lr}
    8d0c:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
    8d12:	2100      	movs	r1, #0
    8d14:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8d16:	f008 fd89 	bl	1182c <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    8d1a:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    8d1c:	6922      	ldr	r2, [r4, #16]
    8d1e:	6821      	ldr	r1, [r4, #0]
    8d20:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    8d24:	f002 fdb6 	bl	b894 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    8d28:	6922      	ldr	r2, [r4, #16]
    8d2a:	69a3      	ldr	r3, [r4, #24]
    8d2c:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    8d2e:	3a01      	subs	r2, #1
    8d30:	6821      	ldr	r1, [r4, #0]
    8d32:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    8d36:	f002 fdad 	bl	b894 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    8d3a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    8d3e:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    8d42:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8d44:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    8d48:	69a3      	ldr	r3, [r4, #24]
    8d4a:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d4e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8d52:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    8d56:	69e0      	ldr	r0, [r4, #28]
    8d58:	6803      	ldr	r3, [r0, #0]
    8d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d5e:	2100      	movs	r1, #0
    8d60:	4798      	blx	r3
}
    8d62:	bd38      	pop	{r3, r4, r5, pc}

00008d64 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    8d64:	b570      	push	{r4, r5, r6, lr}
    8d66:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8d68:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
    8d6e:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8d70:	6946      	ldr	r6, [r0, #20]
    8d72:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
    8d76:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    8d7a:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8d7e:	f202 1001 	addw	r0, r2, #257	; 0x101
    8d82:	0a00      	lsrs	r0, r0, #8
    8d84:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8d86:	0040      	lsls	r0, r0, #1
    8d88:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    8d8c:	459c      	cmp	ip, r3
    8d8e:	d90f      	bls.n	8db0 <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8d90:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8d94:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8d96:	1af2      	subs	r2, r6, r3
    8d98:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8d9c:	f202 1101 	addw	r1, r2, #257	; 0x101
    8da0:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8da2:	0048      	lsls	r0, r1, #1
    8da4:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    8da8:	4563      	cmp	r3, ip
    8daa:	d3f3      	bcc.n	8d94 <FatFormatter::makeFat16()+0x30>
    8dac:	6063      	str	r3, [r4, #4]
    8dae:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    8db0:	eba3 030c 	sub.w	r3, r3, ip
    8db4:	f103 0180 	add.w	r1, r3, #128	; 0x80
    8db8:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    8dba:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
    8dbe:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    8dc2:	d213      	bcs.n	8dec <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
    8dc4:	2101      	movs	r1, #1
    8dc6:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8dc8:	3381      	adds	r3, #129	; 0x81
    8dca:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8dcc:	3021      	adds	r0, #33	; 0x21
    8dce:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
    8dd2:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
    8dd4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    8dd8:	bf34      	ite	cc
    8dda:	2304      	movcc	r3, #4
    8ddc:	2306      	movcs	r3, #6
    8dde:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8de2:	4620      	mov	r0, r4
    8de4:	f7ff ff91 	bl	8d0a <FatFormatter::writeMbr()>
    8de8:	b950      	cbnz	r0, 8e00 <FatFormatter::makeFat16()+0x9c>
}
    8dea:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
    8dec:	6a20      	ldr	r0, [r4, #32]
    8dee:	2800      	cmp	r0, #0
    8df0:	d040      	beq.n	8e74 <FatFormatter::makeFat16()+0x110>
    8df2:	6803      	ldr	r3, [r0, #0]
    8df4:	685b      	ldr	r3, [r3, #4]
    8df6:	2213      	movs	r2, #19
    8df8:	491f      	ldr	r1, [pc, #124]	; (8e78 <FatFormatter::makeFat16()+0x114>)
    8dfa:	4798      	blx	r3
    return false;
    8dfc:	2000      	movs	r0, #0
    8dfe:	e7f4      	b.n	8dea <FatFormatter::makeFat16()+0x86>
  initPbs();
    8e00:	4620      	mov	r0, r4
    8e02:	f7ff ff55 	bl	8cb0 <FatFormatter::initPbs()>
    8e06:	f44f 7300 	mov.w	r3, #512	; 0x200
    8e0a:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    8e0e:	68a3      	ldr	r3, [r4, #8]
    8e10:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    8e12:	2380      	movs	r3, #128	; 0x80
    8e14:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    8e18:	2329      	movs	r3, #41	; 0x29
    8e1a:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    8e1e:	4b17      	ldr	r3, [pc, #92]	; (8e7c <FatFormatter::makeFat16()+0x118>)
    8e20:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    8e24:	f105 032a 	add.w	r3, r5, #42	; 0x2a
    8e28:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8e2c:	2220      	movs	r2, #32
    8e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    8e32:	4299      	cmp	r1, r3
    8e34:	d1fb      	bne.n	8e2e <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
    8e36:	2346      	movs	r3, #70	; 0x46
    8e38:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    8e3c:	2341      	movs	r3, #65	; 0x41
    8e3e:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    8e42:	2354      	movs	r3, #84	; 0x54
    8e44:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    8e48:	2331      	movs	r3, #49	; 0x31
    8e4a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    8e4e:	2336      	movs	r3, #54	; 0x36
    8e50:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    8e54:	69e0      	ldr	r0, [r4, #28]
    8e56:	6803      	ldr	r3, [r0, #0]
    8e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e5c:	6921      	ldr	r1, [r4, #16]
    8e5e:	4798      	blx	r3
    8e60:	2800      	cmp	r0, #0
    8e62:	d0c2      	beq.n	8dea <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    8e64:	6862      	ldr	r2, [r4, #4]
    8e66:	68e3      	ldr	r3, [r4, #12]
    8e68:	1ad2      	subs	r2, r2, r3
    8e6a:	2110      	movs	r1, #16
    8e6c:	4620      	mov	r0, r4
    8e6e:	f7ff fec7 	bl	8c00 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    8e72:	e7ba      	b.n	8dea <FatFormatter::makeFat16()+0x86>
    return false;
    8e74:	2000      	movs	r0, #0
    8e76:	e7b8      	b.n	8dea <FatFormatter::makeFat16()+0x86>
    8e78:	200020b4 	.word	0x200020b4
    8e7c:	0012d687 	.word	0x0012d687

00008e80 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    8e80:	b570      	push	{r4, r5, r6, lr}
    8e82:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8e84:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
    8e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8e8a:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8e8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    8e90:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8e92:	6946      	ldr	r6, [r0, #20]
    8e94:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
    8e98:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
    8e9c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8ea0:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8ea4:	09db      	lsrs	r3, r3, #7
    8ea6:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8ea8:	f242 0209 	movw	r2, #8201	; 0x2009
    8eac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
    8eb0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    8eb4:	d931      	bls.n	8f1a <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8eba:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8ebe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8ec2:	1ab1      	subs	r1, r6, r2
    8ec4:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8ec8:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8ecc:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8ece:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    8ed2:	4282      	cmp	r2, r0
    8ed4:	d3f3      	bcc.n	8ebe <FatFormatter::makeFat32()+0x3e>
    8ed6:	6062      	str	r2, [r4, #4]
    8ed8:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
    8eda:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    8ede:	4281      	cmp	r1, r0
    8ee0:	d91e      	bls.n	8f20 <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8ee2:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
    8ee6:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    8eea:	b29b      	uxth	r3, r3
    8eec:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8eee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    8ef2:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8ef4:	fb01 220c 	mla	r2, r1, ip, r2
    8ef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    8efc:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
    8efe:	4b55      	ldr	r3, [pc, #340]	; (9054 <FatFormatter::makeFat32()+0x1d4>)
    8f00:	429a      	cmp	r2, r3
    8f02:	bf94      	ite	ls
    8f04:	220b      	movls	r2, #11
    8f06:	220c      	movhi	r2, #12
    8f08:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8f0c:	4620      	mov	r0, r4
    8f0e:	f7ff fefc 	bl	8d0a <FatFormatter::writeMbr()>
    8f12:	4603      	mov	r3, r0
    8f14:	b978      	cbnz	r0, 8f36 <FatFormatter::makeFat32()+0xb6>
}
    8f16:	4618      	mov	r0, r3
    8f18:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8f1e:	e7dc      	b.n	8eda <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
    8f20:	6a20      	ldr	r0, [r4, #32]
    8f22:	2800      	cmp	r0, #0
    8f24:	f000 8093 	beq.w	904e <FatFormatter::makeFat32()+0x1ce>
    8f28:	6803      	ldr	r3, [r0, #0]
    8f2a:	685b      	ldr	r3, [r3, #4]
    8f2c:	2213      	movs	r2, #19
    8f2e:	494a      	ldr	r1, [pc, #296]	; (9058 <FatFormatter::makeFat32()+0x1d8>)
    8f30:	4798      	blx	r3
    return false;
    8f32:	2300      	movs	r3, #0
    8f34:	e7ef      	b.n	8f16 <FatFormatter::makeFat32()+0x96>
  initPbs();
    8f36:	4620      	mov	r0, r4
    8f38:	f7ff feba 	bl	8cb0 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    8f3c:	68a3      	ldr	r3, [r4, #8]
    8f3e:	626b      	str	r3, [r5, #36]	; 0x24
    8f40:	2302      	movs	r3, #2
    8f42:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
    8f44:	2301      	movs	r3, #1
    8f46:	862b      	strh	r3, [r5, #48]	; 0x30
    8f48:	2306      	movs	r3, #6
    8f4a:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    8f4c:	2380      	movs	r3, #128	; 0x80
    8f4e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    8f52:	2329      	movs	r3, #41	; 0x29
    8f54:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    8f58:	4b40      	ldr	r3, [pc, #256]	; (905c <FatFormatter::makeFat32()+0x1dc>)
    8f5a:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    8f5e:	f105 0346 	add.w	r3, r5, #70	; 0x46
    8f62:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    8f66:	2220      	movs	r2, #32
    8f68:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    8f6c:	4299      	cmp	r1, r3
    8f6e:	d1fb      	bne.n	8f68 <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
    8f70:	2346      	movs	r3, #70	; 0x46
    8f72:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    8f76:	2341      	movs	r3, #65	; 0x41
    8f78:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    8f7c:	2354      	movs	r3, #84	; 0x54
    8f7e:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    8f82:	2333      	movs	r3, #51	; 0x33
    8f84:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    8f88:	2332      	movs	r3, #50	; 0x32
    8f8a:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    8f8e:	69e0      	ldr	r0, [r4, #28]
    8f90:	6803      	ldr	r3, [r0, #0]
    8f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8f96:	6921      	ldr	r1, [r4, #16]
    8f98:	4798      	blx	r3
    8f9a:	4603      	mov	r3, r0
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d0ba      	beq.n	8f16 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    8fa0:	69e0      	ldr	r0, [r4, #28]
    8fa2:	6921      	ldr	r1, [r4, #16]
    8fa4:	6803      	ldr	r3, [r0, #0]
    8fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8fa8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8faa:	3106      	adds	r1, #6
    8fac:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    8fae:	4603      	mov	r3, r0
    8fb0:	2800      	cmp	r0, #0
    8fb2:	d0b0      	beq.n	8f16 <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    8fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
    8fb8:	2100      	movs	r1, #0
    8fba:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8fbc:	f008 fc36 	bl	1182c <memset>
    8fc0:	4b27      	ldr	r3, [pc, #156]	; (9060 <FatFormatter::makeFat32()+0x1e0>)
    8fc2:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    8fc6:	69e0      	ldr	r0, [r4, #28]
    8fc8:	6921      	ldr	r1, [r4, #16]
    8fca:	6803      	ldr	r3, [r0, #0]
    8fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8fce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8fd0:	3102      	adds	r1, #2
    8fd2:	4798      	blx	r3
    8fd4:	4603      	mov	r3, r0
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d09d      	beq.n	8f16 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    8fda:	69e0      	ldr	r0, [r4, #28]
    8fdc:	6921      	ldr	r1, [r4, #16]
    8fde:	6803      	ldr	r3, [r0, #0]
    8fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8fe2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8fe4:	3108      	adds	r1, #8
    8fe6:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    8fe8:	4603      	mov	r3, r0
    8fea:	2800      	cmp	r0, #0
    8fec:	d093      	beq.n	8f16 <FatFormatter::makeFat32()+0x96>
    8fee:	4b1d      	ldr	r3, [pc, #116]	; (9064 <FatFormatter::makeFat32()+0x1e4>)
    8ff0:	602b      	str	r3, [r5, #0]
    8ff2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
    8ff6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    8ffa:	3320      	adds	r3, #32
    8ffc:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    9000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9004:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
    9008:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    900c:	69e0      	ldr	r0, [r4, #28]
    900e:	6921      	ldr	r1, [r4, #16]
    9010:	6803      	ldr	r3, [r0, #0]
    9012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9014:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9016:	3101      	adds	r1, #1
    9018:	4798      	blx	r3
    901a:	4603      	mov	r3, r0
    901c:	2800      	cmp	r0, #0
    901e:	f43f af7a 	beq.w	8f16 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    9022:	69e0      	ldr	r0, [r4, #28]
    9024:	6921      	ldr	r1, [r4, #16]
    9026:	6803      	ldr	r3, [r0, #0]
    9028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    902a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    902c:	3107      	adds	r1, #7
    902e:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9030:	4603      	mov	r3, r0
    9032:	2800      	cmp	r0, #0
    9034:	f43f af6f 	beq.w	8f16 <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    9038:	68a2      	ldr	r2, [r4, #8]
    903a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    903e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    9042:	2120      	movs	r1, #32
    9044:	4620      	mov	r0, r4
    9046:	f7ff fddb 	bl	8c00 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    904a:	4603      	mov	r3, r0
    904c:	e763      	b.n	8f16 <FatFormatter::makeFat32()+0x96>
    return false;
    904e:	2300      	movs	r3, #0
    9050:	e761      	b.n	8f16 <FatFormatter::makeFat32()+0x96>
    9052:	bf00      	nop
    9054:	00fb0400 	.word	0x00fb0400
    9058:	200020b4 	.word	0x200020b4
    905c:	0012d687 	.word	0x0012d687
    9060:	aa550000 	.word	0xaa550000
    9064:	41615252 	.word	0x41615252

00009068 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    9068:	b538      	push	{r3, r4, r5, lr}
    906a:	4604      	mov	r4, r0
    906c:	4608      	mov	r0, r1
  m_dev = dev;
    906e:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
    9070:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    9072:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    9074:	680b      	ldr	r3, [r1, #0]
    9076:	69db      	ldr	r3, [r3, #28]
    9078:	4798      	blx	r3
    907a:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    907c:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
    9080:	0ada      	lsrs	r2, r3, #11
    9082:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
    9084:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    9088:	d31d      	bcc.n	90c6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
    908a:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
    908e:	d333      	bcc.n	90f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
    9090:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
    9094:	d342      	bcc.n	911c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
    9096:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
    909a:	d341      	bcc.n	9120 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
    909c:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
    90a0:	d340      	bcc.n	9124 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
    90a2:	4a22      	ldr	r2, [pc, #136]	; (912c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    90a4:	4293      	cmp	r3, r2
    90a6:	d93f      	bls.n	9128 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
    90a8:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
    90ac:	4293      	cmp	r3, r2
    90ae:	d814      	bhi.n	90da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
    90b0:	2340      	movs	r3, #64	; 0x40
    90b2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    90b6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    90ba:	d320      	bcc.n	90fe <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
    90bc:	4620      	mov	r0, r4
    90be:	f7ff fedf 	bl	8e80 <FatFormatter::makeFat32()>
    90c2:	4605      	mov	r5, r0
    90c4:	e01f      	b.n	9106 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
    90c6:	6a20      	ldr	r0, [r4, #32]
    90c8:	b1a0      	cbz	r0, 90f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    90ca:	6803      	ldr	r3, [r0, #0]
    90cc:	685b      	ldr	r3, [r3, #4]
    90ce:	2214      	movs	r2, #20
    90d0:	4917      	ldr	r1, [pc, #92]	; (9130 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    90d2:	4798      	blx	r3
    return false;
    90d4:	2500      	movs	r5, #0
}
    90d6:	4628      	mov	r0, r5
    90d8:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
    90da:	2380      	movs	r3, #128	; 0x80
    90dc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    90e0:	e7ec      	b.n	90bc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
    90e2:	6a20      	ldr	r0, [r4, #32]
    90e4:	2800      	cmp	r0, #0
    90e6:	d0f6      	beq.n	90d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    90e8:	6803      	ldr	r3, [r0, #0]
    90ea:	685b      	ldr	r3, [r3, #4]
    90ec:	220f      	movs	r2, #15
    90ee:	4911      	ldr	r1, [pc, #68]	; (9134 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    90f0:	4798      	blx	r3
    90f2:	e7f0      	b.n	90d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
    90f4:	2500      	movs	r5, #0
    90f6:	e7ee      	b.n	90d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    90f8:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
    90fa:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    90fe:	4620      	mov	r0, r4
    9100:	f7ff fe30 	bl	8d64 <FatFormatter::makeFat16()>
    9104:	4605      	mov	r5, r0
  if (rtn) {
    9106:	2d00      	cmp	r5, #0
    9108:	d0eb      	beq.n	90e2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    910a:	6a20      	ldr	r0, [r4, #32]
    910c:	2800      	cmp	r0, #0
    910e:	d0e2      	beq.n	90d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9110:	6803      	ldr	r3, [r0, #0]
    9112:	685b      	ldr	r3, [r3, #4]
    9114:	220d      	movs	r2, #13
    9116:	4908      	ldr	r1, [pc, #32]	; (9138 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
    9118:	4798      	blx	r3
    911a:	e7dc      	b.n	90d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    911c:	2304      	movs	r3, #4
    911e:	e7ec      	b.n	90fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9120:	2308      	movs	r3, #8
    9122:	e7ea      	b.n	90fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9124:	2310      	movs	r3, #16
    9126:	e7e8      	b.n	90fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9128:	2320      	movs	r3, #32
    912a:	e7e6      	b.n	90fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    912c:	002007ff 	.word	0x002007ff
    9130:	2000207c 	.word	0x2000207c
    9134:	200020a4 	.word	0x200020a4
    9138:	20002094 	.word	0x20002094

0000913c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    913c:	2a04      	cmp	r2, #4
    913e:	d804      	bhi.n	914a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9140:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9144:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    9148:	4770      	bx	lr
  } else if (i < 11) {
    914a:	2a0a      	cmp	r2, #10
    914c:	d803      	bhi.n	9156 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    914e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9152:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    9154:	4770      	bx	lr
  } else if (i < 13) {
    9156:	2a0c      	cmp	r2, #12
    9158:	d803      	bhi.n	9162 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    915a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    915e:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
    9160:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9162:	2000      	movs	r0, #0
}
    9164:	4770      	bx	lr

00009166 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    9166:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    916a:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    916c:	7804      	ldrb	r4, [r0, #0]
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    916e:	2c00      	cmp	r4, #0
    9170:	d041      	beq.n	91f6 <FatFile::getSFN(char*, unsigned int)+0x90>
    9172:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9174:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9178:	d007      	beq.n	918a <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
    917a:	2a01      	cmp	r2, #1
    917c:	d93b      	bls.n	91f6 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    917e:	232f      	movs	r3, #47	; 0x2f
    9180:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
    9182:	2300      	movs	r3, #0
    9184:	704b      	strb	r3, [r1, #1]
    return 1;
    9186:	2001      	movs	r0, #1
    9188:	e037      	b.n	91fa <FatFile::getSFN(char*, unsigned int)+0x94>
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    918a:	2100      	movs	r1, #0
    918c:	f7fe f930 	bl	73f0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9190:	4686      	mov	lr, r0
    9192:	b380      	cbz	r0, 91f6 <FatFile::getSFN(char*, unsigned int)+0x90>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    9194:	4603      	mov	r3, r0
    9196:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
    9198:	2108      	movs	r1, #8
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    919a:	f04f 0810 	mov.w	r8, #16
      c = '.';
    919e:	272e      	movs	r7, #46	; 0x2e
    91a0:	e012      	b.n	91c8 <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
    91a2:	781a      	ldrb	r2, [r3, #0]
    91a4:	2a20      	cmp	r2, #32
    91a6:	d022      	beq.n	91ee <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
    91a8:	4641      	mov	r1, r8
      c = '.';
    91aa:	46bc      	mov	ip, r7
    91ac:	e002      	b.n	91b4 <FatFile::getSFN(char*, unsigned int)+0x4e>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
        c += 'a' - 'A';
      }
      if (c == ' ') {
    91ae:	f1bc 0f20 	cmp.w	ip, #32
    91b2:	d006      	beq.n	91c2 <FatFile::getSFN(char*, unsigned int)+0x5c>
        continue;
      }
    }
    if ((j + 1u) >= size) {
    91b4:	46a1      	mov	r9, r4
    91b6:	1c62      	adds	r2, r4, #1
    91b8:	42b2      	cmp	r2, r6
    91ba:	d21c      	bcs.n	91f6 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    91bc:	b2d4      	uxtb	r4, r2
    91be:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
    91c2:	3001      	adds	r0, #1
    91c4:	280c      	cmp	r0, #12
    91c6:	d012      	beq.n	91ee <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
    91c8:	b2c2      	uxtb	r2, r0
    91ca:	2a08      	cmp	r2, #8
    91cc:	d0e9      	beq.n	91a2 <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
    91ce:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    91d2:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
    91d6:	b2d2      	uxtb	r2, r2
    91d8:	2a19      	cmp	r2, #25
    91da:	d8e8      	bhi.n	91ae <FatFile::getSFN(char*, unsigned int)+0x48>
    91dc:	f89e 200c 	ldrb.w	r2, [lr, #12]
    91e0:	4211      	tst	r1, r2
    91e2:	d0e7      	beq.n	91b4 <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
    91e4:	f10c 0c20 	add.w	ip, ip, #32
    91e8:	fa5f fc8c 	uxtb.w	ip, ip
    91ec:	e7e2      	b.n	91b4 <FatFile::getSFN(char*, unsigned int)+0x4e>
  }
  name[j] = '\0';
    91ee:	4620      	mov	r0, r4
    91f0:	2300      	movs	r3, #0
    91f2:	552b      	strb	r3, [r5, r4]
  return j;
    91f4:	e001      	b.n	91fa <FatFile::getSFN(char*, unsigned int)+0x94>

 fail:
  name[0] = '\0';
    91f6:	2000      	movs	r0, #0
    91f8:	7028      	strb	r0, [r5, #0]
  return 0;
}
    91fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00009200 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    9200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9204:	b08b      	sub	sp, #44	; 0x2c
    9206:	4689      	mov	r9, r1
  FatFile() {}
    9208:	2300      	movs	r3, #0
    920a:	f88d 3004 	strb.w	r3, [sp, #4]
    920e:	f88d 3005 	strb.w	r3, [sp, #5]
    9212:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
    9216:	7803      	ldrb	r3, [r0, #0]
    9218:	2b00      	cmp	r3, #0
    921a:	d05d      	beq.n	92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    921c:	4604      	mov	r4, r0
    921e:	4617      	mov	r7, r2
  if (!isLFN()) {
    9220:	78c3      	ldrb	r3, [r0, #3]
    9222:	b913      	cbnz	r3, 922a <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    9224:	f7ff ff9f 	bl	9166 <FatFile::getSFN(char*, unsigned int)>
    9228:	e059      	b.n	92de <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
    922a:	4601      	mov	r1, r0
    922c:	a801      	add	r0, sp, #4
    922e:	f7fe f90e 	bl	744e <FatFile::openCluster(FatFile*)>
    9232:	2800      	cmp	r0, #0
    9234:	d050      	beq.n	92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9236:	78e3      	ldrb	r3, [r4, #3]
    9238:	2b00      	cmp	r3, #0
    923a:	d05d      	beq.n	92f8 <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
    923c:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    923e:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
    9242:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9244:	3f01      	subs	r7, #1
    9246:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9248:	88a1      	ldrh	r1, [r4, #4]
    924a:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    924e:	b289      	uxth	r1, r1
    9250:	0149      	lsls	r1, r1, #5
    9252:	a801      	add	r0, sp, #4
    9254:	f7fe fa1c 	bl	7690 <FatFile::seekSet(unsigned long)>
    9258:	2800      	cmp	r0, #0
    925a:	d03d      	beq.n	92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    925c:	2100      	movs	r1, #0
    925e:	a801      	add	r0, sp, #4
    9260:	f7fe f9f4 	bl	764c <FatFile::readDirCache(bool)>
    if (!ldir) {
    9264:	4682      	mov	sl, r0
    9266:	b3b8      	cbz	r0, 92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9268:	7ac3      	ldrb	r3, [r0, #11]
    926a:	2b0f      	cmp	r3, #15
    926c:	d134      	bne.n	92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    926e:	7803      	ldrb	r3, [r0, #0]
    9270:	f003 031f 	and.w	r3, r3, #31
    9274:	455b      	cmp	r3, fp
    9276:	d12f      	bne.n	92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    9278:	f04f 0800 	mov.w	r8, #0
    927c:	e012      	b.n	92a4 <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    927e:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    9282:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    9284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9288:	d323      	bcc.n	92d2 <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
    928a:	b3b0      	cbz	r0, 92fa <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    928c:	463a      	mov	r2, r7
    928e:	4629      	mov	r1, r5
    9290:	f002 fb55 	bl	b93e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9294:	4605      	mov	r5, r0
    9296:	b1f8      	cbz	r0, 92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
    9298:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
    929a:	f108 0801 	add.w	r8, r8, #1
    929e:	f1b8 0f0d 	cmp.w	r8, #13
    92a2:	d021      	beq.n	92e8 <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
    92a4:	fa5f f288 	uxtb.w	r2, r8
    92a8:	4651      	mov	r1, sl
    92aa:	4620      	mov	r0, r4
    92ac:	f7ff ff46 	bl	913c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    92b0:	2e00      	cmp	r6, #0
    92b2:	d0e4      	beq.n	927e <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    92b4:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    92b8:	b29b      	uxth	r3, r3
    92ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    92be:	d20b      	bcs.n	92d8 <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    92c0:	4b10      	ldr	r3, [pc, #64]	; (9304 <FatFile::getName8(char*, unsigned int)+0x104>)
    92c2:	ea03 2686 	and.w	r6, r3, r6, lsl #10
    92c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
    92ca:	4306      	orrs	r6, r0
    92cc:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
    92d0:	e7dc      	b.n	928c <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
    92d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    92d6:	d305      	bcc.n	92e4 <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
    92d8:	2000      	movs	r0, #0
    92da:	f889 0000 	strb.w	r0, [r9]
}
    92de:	b00b      	add	sp, #44	; 0x2c
    92e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    92e4:	4606      	mov	r6, r0
    92e6:	e7d8      	b.n	929a <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    92e8:	f10b 0b01 	add.w	fp, fp, #1
    92ec:	fa5f fb8b 	uxtb.w	fp, fp
    92f0:	78e3      	ldrb	r3, [r4, #3]
    92f2:	455b      	cmp	r3, fp
    92f4:	d2a8      	bcs.n	9248 <FatFile::getName8(char*, unsigned int)+0x48>
    92f6:	e000      	b.n	92fa <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
    92f8:	464d      	mov	r5, r9
  *str = '\0';
    92fa:	2300      	movs	r3, #0
    92fc:	702b      	strb	r3, [r5, #0]
  return str - name;
    92fe:	eba5 0009 	sub.w	r0, r5, r9
    9302:	e7ec      	b.n	92de <FatFile::getName8(char*, unsigned int)+0xde>
    9304:	000ffc00 	.word	0x000ffc00

00009308 <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    9308:	b508      	push	{r3, lr}
  return getName8(name, size);
    930a:	f7ff ff79 	bl	9200 <FatFile::getName8(char*, unsigned int)>
}
    930e:	bd08      	pop	{r3, pc}

00009310 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    9310:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    9312:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    9314:	46a4      	mov	ip, r4
    9316:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    931a:	bf28      	it	cs
    931c:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9320:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9324:	4281      	cmp	r1, r0
    9326:	d307      	bcc.n	9338 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    9328:	eba4 040c 	sub.w	r4, r4, ip
    932c:	6014      	str	r4, [r2, #0]
}
    932e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9332:	4770      	bx	lr
  while (p < e) {
    9334:	4288      	cmp	r0, r1
    9336:	d9f7      	bls.n	9328 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
    9338:	f831 3b02 	ldrh.w	r3, [r1], #2
    933c:	2b00      	cmp	r3, #0
    933e:	d1f9      	bne.n	9334 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9340:	6853      	ldr	r3, [r2, #4]
    9342:	3301      	adds	r3, #1
    9344:	6053      	str	r3, [r2, #4]
    9346:	e7f5      	b.n	9334 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

00009348 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9348:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    934a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    934c:	46a4      	mov	ip, r4
    934e:	2c80      	cmp	r4, #128	; 0x80
    9350:	bf28      	it	cs
    9352:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    9356:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    935a:	4281      	cmp	r1, r0
    935c:	d307      	bcc.n	936e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    935e:	eba4 040c 	sub.w	r4, r4, ip
    9362:	6014      	str	r4, [r2, #0]
}
    9364:	f85d 4b04 	ldr.w	r4, [sp], #4
    9368:	4770      	bx	lr
  while (p < e) {
    936a:	4288      	cmp	r0, r1
    936c:	d9f7      	bls.n	935e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
    936e:	f851 3b04 	ldr.w	r3, [r1], #4
    9372:	2b00      	cmp	r3, #0
    9374:	d1f9      	bne.n	936a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    9376:	6853      	ldr	r3, [r2, #4]
    9378:	3301      	adds	r3, #1
    937a:	6053      	str	r3, [r2, #4]
    937c:	e7f5      	b.n	936a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

0000937e <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    937e:	2901      	cmp	r1, #1
    9380:	d974      	bls.n	946c <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9382:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9386:	4606      	mov	r6, r0
    9388:	460c      	mov	r4, r1
    938a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    938c:	69c3      	ldr	r3, [r0, #28]
    938e:	428b      	cmp	r3, r1
    9390:	d36f      	bcc.n	9472 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
    9392:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9394:	2b20      	cmp	r3, #32
    9396:	d02d      	beq.n	93f4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
    9398:	2b10      	cmp	r3, #16
    939a:	d044      	beq.n	9426 <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    939c:	2b0c      	cmp	r3, #12
    939e:	d172      	bne.n	9486 <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
    93a0:	f3c1 034e 	ubfx	r3, r1, #1, #15
    93a4:	fa13 f381 	uxtah	r3, r3, r1
    93a8:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    93aa:	f3c3 2346 	ubfx	r3, r3, #9, #7
    93ae:	6982      	ldr	r2, [r0, #24]
    93b0:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
    93b4:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    93b8:	7a02      	ldrb	r2, [r0, #8]
    93ba:	2a02      	cmp	r2, #2
    93bc:	bf14      	ite	ne
    93be:	2200      	movne	r2, #0
    93c0:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    93c2:	0052      	lsls	r2, r2, #1
    93c4:	4641      	mov	r1, r8
    93c6:	4648      	mov	r0, r9
    93c8:	f002 f9ff 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    93cc:	4602      	mov	r2, r0
    93ce:	2800      	cmp	r0, #0
    93d0:	d05c      	beq.n	948c <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
    93d2:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
    93d6:	5cc7      	ldrb	r7, [r0, r3]
    index++;
    93d8:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    93da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    93de:	d036      	beq.n	944e <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
    93e0:	5cd3      	ldrb	r3, [r2, r3]
    93e2:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    93e6:	f014 0f01 	tst.w	r4, #1
    93ea:	bf14      	ite	ne
    93ec:	091b      	lsrne	r3, r3, #4
    93ee:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
    93f2:	e012      	b.n	941a <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    93f4:	7a02      	ldrb	r2, [r0, #8]
    93f6:	2a02      	cmp	r2, #2
    93f8:	bf14      	ite	ne
    93fa:	2200      	movne	r2, #0
    93fc:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    93fe:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9400:	0052      	lsls	r2, r2, #1
    9402:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9406:	f500 700e 	add.w	r0, r0, #568	; 0x238
    940a:	f002 f9de 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    940e:	2800      	cmp	r0, #0
    9410:	d033      	beq.n	947a <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9412:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    9414:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    9418:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    941a:	69f2      	ldr	r2, [r6, #28]
    941c:	4293      	cmp	r3, r2
    941e:	d83b      	bhi.n	9498 <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
    9420:	602b      	str	r3, [r5, #0]
  return 1;
    9422:	2001      	movs	r0, #1
    9424:	e027      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9426:	7a02      	ldrb	r2, [r0, #8]
    9428:	2a02      	cmp	r2, #2
    942a:	bf14      	ite	ne
    942c:	2200      	movne	r2, #0
    942e:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9430:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9434:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9436:	0052      	lsls	r2, r2, #1
    9438:	4419      	add	r1, r3
    943a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    943e:	f002 f9c4 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9442:	b1e8      	cbz	r0, 9480 <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9444:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    9446:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    944a:	5b03      	ldrh	r3, [r0, r4]
    944c:	e7e5      	b.n	941a <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    944e:	7a32      	ldrb	r2, [r6, #8]
    9450:	2a02      	cmp	r2, #2
    9452:	bf14      	ite	ne
    9454:	2200      	movne	r2, #0
    9456:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9458:	0052      	lsls	r2, r2, #1
    945a:	f108 0101 	add.w	r1, r8, #1
    945e:	4648      	mov	r0, r9
    9460:	f002 f9b3 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9464:	4602      	mov	r2, r0
    9466:	b1a0      	cbz	r0, 9492 <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
    9468:	2300      	movs	r3, #0
    946a:	e7b9      	b.n	93e0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
    946c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9470:	4770      	bx	lr
  return -1;
    9472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
    947a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    947e:	e7fa      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9484:	e7f7      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    948a:	e7f4      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    948c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9490:	e7f1      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9496:	e7ee      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
    9498:	2000      	movs	r0, #0
    949a:	e7ec      	b.n	9476 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

0000949c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    949c:	2901      	cmp	r1, #1
    949e:	d972      	bls.n	9586 <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    94a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    94a4:	4606      	mov	r6, r0
    94a6:	460c      	mov	r4, r1
    94a8:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    94aa:	69c3      	ldr	r3, [r0, #28]
    94ac:	428b      	cmp	r3, r1
    94ae:	d36c      	bcc.n	958a <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
    94b0:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    94b2:	2b20      	cmp	r3, #32
    94b4:	d02d      	beq.n	9512 <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
    94b6:	2b10      	cmp	r3, #16
    94b8:	d03e      	beq.n	9538 <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
    94ba:	2b0c      	cmp	r3, #12
    94bc:	d16c      	bne.n	9598 <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
    94be:	f3c1 034e 	ubfx	r3, r1, #1, #15
    94c2:	fa13 f381 	uxtah	r3, r3, r1
    94c6:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    94c8:	f3c3 2346 	ubfx	r3, r3, #9, #7
    94cc:	6982      	ldr	r2, [r0, #24]
    94ce:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    94d2:	7a03      	ldrb	r3, [r0, #8]
    94d4:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    94d6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    94da:	bf14      	ite	ne
    94dc:	2201      	movne	r2, #1
    94de:	2203      	moveq	r2, #3
    94e0:	4641      	mov	r1, r8
    94e2:	4648      	mov	r0, r9
    94e4:	f002 f971 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    94e8:	4601      	mov	r1, r0
    94ea:	2800      	cmp	r0, #0
    94ec:	d056      	beq.n	959c <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
    94ee:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
    94f2:	f014 0401 	ands.w	r4, r4, #1
    94f6:	d055      	beq.n	95a4 <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
    94f8:	5cc2      	ldrb	r2, [r0, r3]
    94fa:	f002 020f 	and.w	r2, r2, #15
    94fe:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
    9502:	54c2      	strb	r2, [r0, r3]
    index++;
    9504:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    950a:	d029      	beq.n	9560 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    950c:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9510:	e054      	b.n	95bc <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9512:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9514:	7a03      	ldrb	r3, [r0, #8]
    9516:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9518:	bf14      	ite	ne
    951a:	2201      	movne	r2, #1
    951c:	2203      	moveq	r2, #3
    951e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9522:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9526:	f002 f950 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    952a:	b388      	cbz	r0, 9590 <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    952c:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    952e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9532:	5105      	str	r5, [r0, r4]
    return true;
    9534:	2001      	movs	r0, #1
    9536:	e029      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9538:	f3c1 2107 	ubfx	r1, r1, #8, #8
    953c:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    953e:	7a02      	ldrb	r2, [r0, #8]
    9540:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    9542:	bf14      	ite	ne
    9544:	2201      	movne	r2, #1
    9546:	2203      	moveq	r2, #3
    9548:	4419      	add	r1, r3
    954a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    954e:	f002 f93c 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9552:	b1f8      	cbz	r0, 9594 <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9554:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    9556:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    955a:	5305      	strh	r5, [r0, r4]
    return true;
    955c:	2001      	movs	r0, #1
    955e:	e015      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9560:	7a33      	ldrb	r3, [r6, #8]
    9562:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9564:	bf14      	ite	ne
    9566:	2201      	movne	r2, #1
    9568:	2203      	moveq	r2, #3
    956a:	f108 0101 	add.w	r1, r8, #1
    956e:	4648      	mov	r0, r9
    9570:	f002 f92b 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9574:	4601      	mov	r1, r0
    9576:	b198      	cbz	r0, 95a0 <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
    9578:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    957c:	b90c      	cbnz	r4, 9582 <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
    957e:	2300      	movs	r3, #0
    9580:	e017      	b.n	95b2 <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
    9582:	2300      	movs	r3, #0
    9584:	e01a      	b.n	95bc <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
    9586:	2000      	movs	r0, #0
}
    9588:	4770      	bx	lr
  return false;
    958a:	2000      	movs	r0, #0
}
    958c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9590:	2000      	movs	r0, #0
    9592:	e7fb      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9594:	2000      	movs	r0, #0
    9596:	e7f9      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9598:	2000      	movs	r0, #0
    959a:	e7f7      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    959c:	2000      	movs	r0, #0
    959e:	e7f5      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    95a0:	2000      	movs	r0, #0
    95a2:	e7f3      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
    95a4:	54c5      	strb	r5, [r0, r3]
    index++;
    95a6:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    95a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    95ac:	d0d8      	beq.n	9560 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    95ae:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    95b2:	5cc8      	ldrb	r0, [r1, r3]
    95b4:	f020 000f 	bic.w	r0, r0, #15
    95b8:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
    95bc:	54ca      	strb	r2, [r1, r3]
    return true;
    95be:	2001      	movs	r0, #1
    95c0:	e7e4      	b.n	958c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

000095c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    95c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    95c6:	b083      	sub	sp, #12
    95c8:	4605      	mov	r5, r0
    95ca:	460e      	mov	r6, r1
    95cc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    95ce:	68c4      	ldr	r4, [r0, #12]
    95d0:	428c      	cmp	r4, r1
    95d2:	d30c      	bcc.n	95ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
    95d4:	2701      	movs	r7, #1
      setStart = true;
    95d6:	f04f 0901 	mov.w	r9, #1
    find++;
    95da:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    95dc:	69eb      	ldr	r3, [r5, #28]
    95de:	42a3      	cmp	r3, r4
    95e0:	d20b      	bcs.n	95fa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
    95e2:	b13f      	cbz	r7, 95f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
    95e4:	2700      	movs	r7, #0
}
    95e6:	4638      	mov	r0, r7
    95e8:	b003      	add	sp, #12
    95ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
    95ee:	460c      	mov	r4, r1
    setStart = false;
    95f0:	2700      	movs	r7, #0
    95f2:	e7f0      	b.n	95d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
    95f4:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    95f6:	464f      	mov	r7, r9
    95f8:	e7ef      	b.n	95da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
    95fa:	42a6      	cmp	r6, r4
    95fc:	d0f2      	beq.n	95e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
    95fe:	aa01      	add	r2, sp, #4
    9600:	4621      	mov	r1, r4
    9602:	4628      	mov	r0, r5
    9604:	f7ff febb 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9608:	2800      	cmp	r0, #0
    960a:	dbeb      	blt.n	95e4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
    960c:	2800      	cmp	r0, #0
    960e:	d0e4      	beq.n	95da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    9610:	9b01      	ldr	r3, [sp, #4]
    9612:	2b00      	cmp	r3, #0
    9614:	d1e1      	bne.n	95da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    9616:	b107      	cbz	r7, 961a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
    9618:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
    961a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    961e:	4621      	mov	r1, r4
    9620:	4628      	mov	r0, r5
    9622:	f7ff ff3b 	bl	949c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    9626:	4607      	mov	r7, r0
    9628:	2800      	cmp	r0, #0
    962a:	d0dc      	beq.n	95e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
    962c:	b93e      	cbnz	r6, 963e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
    962e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9630:	2b00      	cmp	r3, #0
    9632:	db01      	blt.n	9638 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
    9634:	3b01      	subs	r3, #1
    9636:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9638:	f8c8 4000 	str.w	r4, [r8]
  return true;
    963c:	e7d3      	b.n	95e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
    963e:	4622      	mov	r2, r4
    9640:	4631      	mov	r1, r6
    9642:	4628      	mov	r0, r5
    9644:	f7ff ff2a 	bl	949c <FatPartition::fatPut(unsigned long, unsigned long)>
    9648:	2800      	cmp	r0, #0
    964a:	d1f0      	bne.n	962e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
    964c:	4607      	mov	r7, r0
    964e:	e7ca      	b.n	95e6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00009650 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9650:	b5f0      	push	{r4, r5, r6, r7, lr}
    9652:	b083      	sub	sp, #12
    9654:	4605      	mov	r5, r0
    9656:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
    9658:	2700      	movs	r7, #0
    965a:	e001      	b.n	9660 <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
    965c:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
    965e:	b1ce      	cbz	r6, 9694 <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
    9660:	aa01      	add	r2, sp, #4
    9662:	4621      	mov	r1, r4
    9664:	4628      	mov	r0, r5
    9666:	f7ff fe8a 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    966a:	1e06      	subs	r6, r0, #0
    966c:	db11      	blt.n	9692 <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
    966e:	463a      	mov	r2, r7
    9670:	4621      	mov	r1, r4
    9672:	4628      	mov	r0, r5
    9674:	f7ff ff12 	bl	949c <FatPartition::fatPut(unsigned long, unsigned long)>
    9678:	4602      	mov	r2, r0
    967a:	b158      	cbz	r0, 9694 <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
    967c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    967e:	2b00      	cmp	r3, #0
    9680:	db01      	blt.n	9686 <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
    9682:	3301      	adds	r3, #1
    9684:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9686:	68eb      	ldr	r3, [r5, #12]
    9688:	42a3      	cmp	r3, r4
    968a:	d9e7      	bls.n	965c <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
    968c:	3c01      	subs	r4, #1
    968e:	60ec      	str	r4, [r5, #12]
    9690:	e7e4      	b.n	965c <FatPartition::freeChain(unsigned long)+0xc>
  return false;
    9692:	2200      	movs	r2, #0
}
    9694:	4610      	mov	r0, r2
    9696:	b003      	add	sp, #12
    9698:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000969c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    969c:	b5f0      	push	{r4, r5, r6, r7, lr}
    969e:	b087      	sub	sp, #28
    96a0:	4604      	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    96a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    96a4:	2800      	cmp	r0, #0
    96a6:	da45      	bge.n	9734 <FatPartition::freeClusterCount()+0x98>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    96a8:	79e3      	ldrb	r3, [r4, #7]
    96aa:	2b0c      	cmp	r3, #12
    96ac:	d11e      	bne.n	96ec <FatPartition::freeClusterCount()+0x50>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    96ae:	69e7      	ldr	r7, [r4, #28]
    96b0:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    96b2:	2b02      	cmp	r3, #2
    96b4:	d917      	bls.n	96e6 <FatPartition::freeClusterCount()+0x4a>
    96b6:	2502      	movs	r5, #2
    uint32_t free = 0;
    96b8:	2600      	movs	r6, #0
    96ba:	e006      	b.n	96ca <FatPartition::freeClusterCount()+0x2e>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
    96bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    96c0:	e038      	b.n	9734 <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
    96c2:	1c6b      	adds	r3, r5, #1
    96c4:	42af      	cmp	r7, r5
    96c6:	d00f      	beq.n	96e8 <FatPartition::freeClusterCount()+0x4c>
    96c8:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
    96ca:	aa03      	add	r2, sp, #12
    96cc:	4629      	mov	r1, r5
    96ce:	4620      	mov	r0, r4
    96d0:	f7ff fe55 	bl	937e <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    96d4:	2800      	cmp	r0, #0
    96d6:	dbf1      	blt.n	96bc <FatPartition::freeClusterCount()+0x20>
      }
      if (fg && c == 0) {
    96d8:	2800      	cmp	r0, #0
    96da:	d0f2      	beq.n	96c2 <FatPartition::freeClusterCount()+0x26>
    96dc:	9b03      	ldr	r3, [sp, #12]
    96de:	2b00      	cmp	r3, #0
    96e0:	d1ef      	bne.n	96c2 <FatPartition::freeClusterCount()+0x26>
        free++;
    96e2:	3601      	adds	r6, #1
    96e4:	e7ed      	b.n	96c2 <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
    96e6:	2600      	movs	r6, #0
      }
    }
    return free;
    96e8:	4630      	mov	r0, r6
    96ea:	e023      	b.n	9734 <FatPartition::freeClusterCount()+0x98>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    96ec:	2300      	movs	r3, #0
    96ee:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
    96f0:	69e3      	ldr	r3, [r4, #28]
    96f2:	3301      	adds	r3, #1
    96f4:	9304      	str	r3, [sp, #16]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    96f6:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
    96f8:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    96fc:	f013 0f01 	tst.w	r3, #1
    9700:	d11a      	bne.n	9738 <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
    9702:	2300      	movs	r3, #0
    9704:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    970c:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
    9710:	f504 7212 	add.w	r2, r4, #584	; 0x248
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    9714:	79e3      	ldrb	r3, [r4, #7]
    9716:	2b20      	cmp	r3, #32
    9718:	d017      	beq.n	974a <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    971a:	6820      	ldr	r0, [r4, #0]
    971c:	6803      	ldr	r3, [r0, #0]
    971e:	a904      	add	r1, sp, #16
    9720:	9101      	str	r1, [sp, #4]
    9722:	4913      	ldr	r1, [pc, #76]	; (9770 <FatPartition::freeClusterCount()+0xd4>)
    9724:	9100      	str	r1, [sp, #0]
    9726:	699e      	ldr	r6, [r3, #24]
    9728:	462b      	mov	r3, r5
    972a:	69a1      	ldr	r1, [r4, #24]
    972c:	47b0      	blx	r6
    972e:	b1d8      	cbz	r0, 9768 <FatPartition::freeClusterCount()+0xcc>
  }

  setFreeClusterCount(state.free_count);
    9730:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    9732:	6260      	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    9734:	b007      	add	sp, #28
    9736:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
    9738:	f504 700e 	add.w	r0, r4, #568	; 0x238
    973c:	f002 f81e 	bl	b77c <FsCache::sync()>
    9740:	2800      	cmp	r0, #0
    9742:	d1de      	bne.n	9702 <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
    9744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9748:	e7f4      	b.n	9734 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    974a:	6820      	ldr	r0, [r4, #0]
    974c:	6803      	ldr	r3, [r0, #0]
    974e:	a904      	add	r1, sp, #16
    9750:	9101      	str	r1, [sp, #4]
    9752:	4908      	ldr	r1, [pc, #32]	; (9774 <FatPartition::freeClusterCount()+0xd8>)
    9754:	9100      	str	r1, [sp, #0]
    9756:	699e      	ldr	r6, [r3, #24]
    9758:	462b      	mov	r3, r5
    975a:	69a1      	ldr	r1, [r4, #24]
    975c:	47b0      	blx	r6
    975e:	2800      	cmp	r0, #0
    9760:	d1e6      	bne.n	9730 <FatPartition::freeClusterCount()+0x94>
    9762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9766:	e7e5      	b.n	9734 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    976c:	e7e2      	b.n	9734 <FatPartition::freeClusterCount()+0x98>
    976e:	bf00      	nop
    9770:	00009311 	.word	0x00009311
    9774:	00009349 	.word	0x00009349

00009778 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9778:	b570      	push	{r4, r5, r6, lr}
    977a:	4604      	mov	r4, r0
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    977c:	6001      	str	r1, [r0, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    977e:	2300      	movs	r3, #0
    9780:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    9782:	2001      	movs	r0, #1
    9784:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
    9786:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
    978a:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
    978c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9794:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    9796:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    979a:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    979e:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    97a2:	b1e2      	cbz	r2, 97de <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    97a4:	4616      	mov	r6, r2
    if (part > 4) {
    97a6:	2a04      	cmp	r2, #4
    97a8:	d901      	bls.n	97ae <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    97aa:	2000      	movs	r0, #0
}
    97ac:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    97ae:	461a      	mov	r2, r3
    97b0:	4619      	mov	r1, r3
    97b2:	4628      	mov	r0, r5
    97b4:	f002 f809 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    97b8:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    97bc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    97c0:	4433      	add	r3, r6
    97c2:	011e      	lsls	r6, r3, #4
    97c4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    97c8:	2800      	cmp	r0, #0
    97ca:	d06a      	beq.n	98a2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
    97cc:	7919      	ldrb	r1, [r3, #4]
    97ce:	2900      	cmp	r1, #0
    97d0:	d069      	beq.n	98a6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
    97d2:	5d92      	ldrb	r2, [r2, r6]
    97d4:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    97d8:	d167      	bne.n	98aa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
    97da:	689e      	ldr	r6, [r3, #8]
    97dc:	e000      	b.n	97e0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
    97de:	2600      	movs	r6, #0
    97e0:	2200      	movs	r2, #0
    97e2:	4631      	mov	r1, r6
    97e4:	4628      	mov	r0, r5
    97e6:	f001 fff0 	bl	b7ca <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    97ea:	4601      	mov	r1, r0
    97ec:	2800      	cmp	r0, #0
    97ee:	d05e      	beq.n	98ae <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
    97f0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    97f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    97f8:	d15b      	bne.n	98b2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
    97fa:	7c03      	ldrb	r3, [r0, #16]
    97fc:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    97fe:	3b01      	subs	r3, #1
    9800:	b2db      	uxtb	r3, r3
    9802:	2b01      	cmp	r3, #1
    9804:	d857      	bhi.n	98b6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9806:	7b40      	ldrb	r0, [r0, #13]
    9808:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    980a:	1e43      	subs	r3, r0, #1
    980c:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    980e:	2300      	movs	r3, #0
    9810:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9812:	2801      	cmp	r0, #1
    9814:	d00d      	beq.n	9832 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
    9816:	2200      	movs	r2, #0
    9818:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
    981a:	3201      	adds	r2, #1
    981c:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    981e:	005b      	lsls	r3, r3, #1
    9820:	b2db      	uxtb	r3, r3
    9822:	4298      	cmp	r0, r3
    9824:	d004      	beq.n	9830 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
    9826:	2b00      	cmp	r3, #0
    9828:	d1f7      	bne.n	981a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    982a:	71a2      	strb	r2, [r4, #6]
  return false;
    982c:	2000      	movs	r0, #0
    982e:	e7bd      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9830:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9832:	8acb      	ldrh	r3, [r1, #22]
    9834:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9836:	b90b      	cbnz	r3, 983c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
    9838:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    983a:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    983c:	89cb      	ldrh	r3, [r1, #14]
    983e:	4433      	add	r3, r6
    9840:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
    9842:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9846:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9848:	6920      	ldr	r0, [r4, #16]
    984a:	7c0d      	ldrb	r5, [r1, #16]
    984c:	fb00 3305 	mla	r3, r0, r5, r3
    9850:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9852:	0152      	lsls	r2, r2, #5
    9854:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
    9858:	eb03 2352 	add.w	r3, r3, r2, lsr #9
    985c:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
    985e:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
    9862:	b902      	cbnz	r2, 9866 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
    9864:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9866:	1af3      	subs	r3, r6, r3
    9868:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
    986a:	79a2      	ldrb	r2, [r4, #6]
    986c:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
    986e:	1c5a      	adds	r2, r3, #1
    9870:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9876:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9878:	f640 72f4 	movw	r2, #4084	; 0xff4
    987c:	4293      	cmp	r3, r2
    987e:	d907      	bls.n	9890 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9880:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    9884:	4293      	cmp	r3, r2
    9886:	d90a      	bls.n	989e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
    9888:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    988a:	6223      	str	r3, [r4, #32]
    988c:	2320      	movs	r3, #32
    988e:	e000      	b.n	9892 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
    9890:	230c      	movs	r3, #12
    m_fatType = 12;
    9892:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9894:	6320      	str	r0, [r4, #48]	; 0x30
    9896:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
    989a:	2001      	movs	r0, #1
    989c:	e786      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    989e:	2310      	movs	r3, #16
    98a0:	e7f7      	b.n	9892 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
    98a2:	2000      	movs	r0, #0
    98a4:	e782      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    98a6:	2000      	movs	r0, #0
    98a8:	e780      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    98aa:	2000      	movs	r0, #0
    98ac:	e77e      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    98ae:	2000      	movs	r0, #0
    98b0:	e77c      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    98b2:	2000      	movs	r0, #0
    98b4:	e77a      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    98b6:	2000      	movs	r0, #0
    98b8:	e778      	b.n	97ac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

000098ba <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    98ba:	b538      	push	{r3, r4, r5, lr}
    98bc:	4604      	mov	r4, r0
    98be:	460d      	mov	r5, r1
    98c0:	2300      	movs	r3, #0
    98c2:	6383      	str	r3, [r0, #56]	; 0x38
    98c4:	63c3      	str	r3, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    98c6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    98c8:	b1ab      	cbz	r3, 98f6 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
    98ca:	4601      	mov	r1, r0
    98cc:	2024      	movs	r0, #36	; 0x24
    98ce:	f000 f8b3 	bl	9a38 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    98d2:	2300      	movs	r3, #0
    98d4:	7003      	strb	r3, [r0, #0]
    98d6:	7043      	strb	r3, [r0, #1]
    98d8:	7083      	strb	r3, [r0, #2]
    98da:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    98dc:	4684      	mov	ip, r0
    98de:	6bad      	ldr	r5, [r5, #56]	; 0x38
    98e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    98e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    98e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    98e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    98ec:	682b      	ldr	r3, [r5, #0]
    98ee:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    98f2:	4620      	mov	r0, r4
    98f4:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
    98f6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    98f8:	2b00      	cmp	r3, #0
    98fa:	d0fa      	beq.n	98f2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
    98fc:	4601      	mov	r1, r0
    98fe:	2038      	movs	r0, #56	; 0x38
    9900:	f000 f89a 	bl	9a38 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9904:	2300      	movs	r3, #0
    9906:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    990a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    990e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    9912:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    9914:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9916:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    991a:	f8d3 c000 	ldr.w	ip, [r3]
    991e:	685d      	ldr	r5, [r3, #4]
    9920:	6899      	ldr	r1, [r3, #8]
    9922:	68da      	ldr	r2, [r3, #12]
    9924:	f8c0 c000 	str.w	ip, [r0]
    9928:	6045      	str	r5, [r0, #4]
    992a:	6081      	str	r1, [r0, #8]
    992c:	60c2      	str	r2, [r0, #12]
    992e:	3310      	adds	r3, #16
    9930:	3010      	adds	r0, #16
    9932:	4573      	cmp	r3, lr
    9934:	d1f1      	bne.n	991a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
    9936:	681b      	ldr	r3, [r3, #0]
    9938:	6003      	str	r3, [r0, #0]
    993a:	e7da      	b.n	98f2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

0000993c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    993c:	b510      	push	{r4, lr}
    993e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9940:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9942:	b110      	cbz	r0, 994a <FsBaseFile::close()+0xe>
    9944:	f7fe f844 	bl	79d0 <FatFile::close()>
    9948:	b938      	cbnz	r0, 995a <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    994a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    994c:	b140      	cbz	r0, 9960 <FsBaseFile::close()+0x24>
    994e:	f7fb fcbf 	bl	52d0 <ExFatFile::close()>
    9952:	b130      	cbz	r0, 9962 <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
    9954:	2300      	movs	r3, #0
    9956:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9958:	e003      	b.n	9962 <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
    995a:	2300      	movs	r3, #0
    995c:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    995e:	e000      	b.n	9962 <FsBaseFile::close()+0x26>
  }
  return false;
    9960:	2000      	movs	r0, #0
}
    9962:	bd10      	pop	{r4, pc}

00009964 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9964:	b3a1      	cbz	r1, 99d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9968:	4604      	mov	r4, r0
    996a:	4617      	mov	r7, r2
    996c:	461e      	mov	r6, r3
    996e:	460d      	mov	r5, r1
    return false;
  }
  close();
    9970:	f7ff ffe4 	bl	993c <FsBaseFile::close()>
  if (vol->m_fVol) {
    9974:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    9978:	b18b      	cbz	r3, 999e <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    997a:	4621      	mov	r1, r4
    997c:	2024      	movs	r0, #36	; 0x24
    997e:	f000 f85b 	bl	9a38 <operator new(unsigned int, unsigned long*)>
    9982:	2300      	movs	r3, #0
    9984:	7003      	strb	r3, [r0, #0]
    9986:	7043      	strb	r3, [r0, #1]
    9988:	7083      	strb	r3, [r0, #2]
    998a:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    998c:	4633      	mov	r3, r6
    998e:	463a      	mov	r2, r7
    9990:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9994:	f7fe f889 	bl	7aaa <FatFile::open(FatVolume*, char const*, int)>
    9998:	b900      	cbnz	r0, 999c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
    999a:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    999c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
    999e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    99a2:	b1bb      	cbz	r3, 99d4 <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
    99a4:	4621      	mov	r1, r4
    99a6:	2038      	movs	r0, #56	; 0x38
    99a8:	f000 f846 	bl	9a38 <operator new(unsigned int, unsigned long*)>
    99ac:	2200      	movs	r2, #0
    99ae:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    99b2:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    99b6:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    99ba:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    99bc:	4633      	mov	r3, r6
    99be:	463a      	mov	r2, r7
    99c0:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    99c4:	f7fc f8cd 	bl	5b62 <ExFatFile::open(ExFatVolume*, char const*, int)>
    99c8:	2800      	cmp	r0, #0
    99ca:	d1e7      	bne.n	999c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
    99cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    99ce:	e7e5      	b.n	999c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
    99d0:	2000      	movs	r0, #0
}
    99d2:	4770      	bx	lr
  return false;
    99d4:	2000      	movs	r0, #0
    99d6:	e7e1      	b.n	999c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

000099d8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    99d8:	b570      	push	{r4, r5, r6, lr}
    99da:	4605      	mov	r5, r0
    99dc:	460c      	mov	r4, r1
    99de:	4616      	mov	r6, r2
  close();
    99e0:	f7ff ffac 	bl	993c <FsBaseFile::close()>
  if (dir->m_fFile) {
    99e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    99e6:	b17b      	cbz	r3, 9a08 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
    99e8:	4629      	mov	r1, r5
    99ea:	2024      	movs	r0, #36	; 0x24
    99ec:	f000 f824 	bl	9a38 <operator new(unsigned int, unsigned long*)>
    99f0:	2100      	movs	r1, #0
    99f2:	7001      	strb	r1, [r0, #0]
    99f4:	7041      	strb	r1, [r0, #1]
    99f6:	7081      	strb	r1, [r0, #2]
    99f8:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    99fa:	4632      	mov	r2, r6
    99fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    99fe:	f7fd ff33 	bl	7868 <FatFile::openNext(FatFile*, int)>
    9a02:	b900      	cbnz	r0, 9a06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
    9a04:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9a06:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
    9a08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9a0a:	b19b      	cbz	r3, 9a34 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    9a0c:	4629      	mov	r1, r5
    9a0e:	2038      	movs	r0, #56	; 0x38
    9a10:	f000 f812 	bl	9a38 <operator new(unsigned int, unsigned long*)>
    9a14:	2200      	movs	r2, #0
    9a16:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9a1a:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9a1e:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9a22:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9a24:	4632      	mov	r2, r6
    9a26:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9a28:	f7fc f8a4 	bl	5b74 <ExFatFile::openNext(ExFatFile*, int)>
    9a2c:	2800      	cmp	r0, #0
    9a2e:	d1ea      	bne.n	9a06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
    9a30:	63e8      	str	r0, [r5, #60]	; 0x3c
    9a32:	e7e8      	b.n	9a06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
    9a34:	2000      	movs	r0, #0
    9a36:	e7e6      	b.n	9a06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

00009a38 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9a38:	4608      	mov	r0, r1
    9a3a:	4770      	bx	lr

00009a3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a40:	4604      	mov	r4, r0
    9a42:	4690      	mov	r8, r2
    9a44:	461f      	mov	r7, r3
  m_blockDev = blockDev;
    9a46:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9a4a:	2600      	movs	r6, #0
    9a4c:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9a50:	4601      	mov	r1, r0
    9a52:	f44f 6090 	mov.w	r0, #1152	; 0x480
    9a56:	f7ff ffef 	bl	9a38 <operator new(unsigned int, unsigned long*)>
    9a5a:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    9a5c:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9a60:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9a64:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    9a68:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    9a6c:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9a70:	463a      	mov	r2, r7
    9a72:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9a76:	f7fd fbcd 	bl	7214 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9a7a:	bb00      	cbnz	r0, 9abe <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9a7c:	2500      	movs	r5, #0
    9a7e:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9a82:	4621      	mov	r1, r4
    9a84:	f240 406c 	movw	r0, #1132	; 0x46c
    9a88:	f7ff ffd6 	bl	9a38 <operator new(unsigned int, unsigned long*)>
    9a8c:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    9a8e:	71c5      	strb	r5, [r0, #7]
    9a90:	2302      	movs	r3, #2
    9a92:	7203      	strb	r3, [r0, #8]
    9a94:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
    9a98:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
    9a9c:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
    9aa0:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9aa4:	463a      	mov	r2, r7
    9aa6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9aaa:	f7ff fe65 	bl	9778 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9aae:	b9f8      	cbnz	r0, 9af0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    9ab0:	2000      	movs	r0, #0
    9ab2:	4b1a      	ldr	r3, [pc, #104]	; (9b1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9ab4:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
    9ab6:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    9aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9abe:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9ac2:	4630      	mov	r0, r6
    9ac4:	f7fb fc04 	bl	52d0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    9ac8:	4629      	mov	r1, r5
    9aca:	4630      	mov	r0, r6
    9acc:	f7fb fc2e 	bl	532c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    9ad0:	2800      	cmp	r0, #0
    9ad2:	d0d3      	beq.n	9a7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
    9ad4:	4b12      	ldr	r3, [pc, #72]	; (9b20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	b13b      	cbz	r3, 9aea <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
    9ada:	f1b8 0f00 	cmp.w	r8, #0
    9ade:	d119      	bne.n	9b14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
    9ae0:	4b0e      	ldr	r3, [pc, #56]	; (9b1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9ae2:	681b      	ldr	r3, [r3, #0]
    9ae4:	b1b3      	cbz	r3, 9b14 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
    9ae6:	2001      	movs	r0, #1
    9ae8:	e7e7      	b.n	9aba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
    9aea:	4b0d      	ldr	r3, [pc, #52]	; (9b20 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    9aec:	601d      	str	r5, [r3, #0]
    9aee:	e7f4      	b.n	9ada <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9af0:	f506 6589 	add.w	r5, r6, #1096	; 0x448
    9af4:	4628      	mov	r0, r5
    9af6:	f7fd ff6b 	bl	79d0 <FatFile::close()>
    return m_vwd.openRoot(this);
    9afa:	4631      	mov	r1, r6
    9afc:	4628      	mov	r0, r5
    9afe:	f7fd fc88 	bl	7412 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    9b02:	2800      	cmp	r0, #0
    9b04:	d0d4      	beq.n	9ab0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
    9b06:	4b07      	ldr	r3, [pc, #28]	; (9b24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d1e5      	bne.n	9ada <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
    9b0e:	4b05      	ldr	r3, [pc, #20]	; (9b24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    9b10:	601e      	str	r6, [r3, #0]
    9b12:	e7e2      	b.n	9ada <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
    9b14:	4b01      	ldr	r3, [pc, #4]	; (9b1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9b16:	601c      	str	r4, [r3, #0]
  return true;
    9b18:	2001      	movs	r0, #1
    9b1a:	e7ce      	b.n	9aba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
    9b1c:	20004ba0 	.word	0x20004ba0
    9b20:	20004b6c 	.word	0x20004b6c
    9b24:	20004bac 	.word	0x20004bac

00009b28 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9b28:	b538      	push	{r3, r4, r5, lr}
    9b2a:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    9b2c:	2000      	movs	r0, #0
    9b2e:	6060      	str	r0, [r4, #4]
    9b30:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    9b34:	60a5      	str	r5, [r4, #8]
    9b36:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
    9b38:	64a0      	str	r0, [r4, #72]	; 0x48
    9b3a:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9b3c:	4620      	mov	r0, r4
    9b3e:	4d03      	ldr	r5, [pc, #12]	; (9b4c <FsVolume::open(char const*, int)+0x24>)
    9b40:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9b44:	f7ff ff0e 	bl	9964 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    9b48:	4620      	mov	r0, r4
    9b4a:	bd38      	pop	{r3, r4, r5, pc}
    9b4c:	200023b0 	.word	0x200023b0

00009b50 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9b54:	4770      	bx	lr

00009b56 <SharedSpiCard::errorCode() const>:
  }
    9b56:	7c40      	ldrb	r0, [r0, #17]
    9b58:	4770      	bx	lr

00009b5a <SharedSpiCard::errorData() const>:
  }
    9b5a:	7d00      	ldrb	r0, [r0, #20]
    9b5c:	4770      	bx	lr

00009b5e <SharedSpiCard::type() const>:
  }
    9b5e:	7d40      	ldrb	r0, [r0, #21]
    9b60:	4770      	bx	lr

00009b62 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9b62:	2001      	movs	r0, #1
    9b64:	4770      	bx	lr

00009b66 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9b66:	7f00      	ldrb	r0, [r0, #28]
    9b68:	4770      	bx	lr

00009b6a <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    9b6a:	b500      	push	{lr}
    9b6c:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9b6e:	6803      	ldr	r3, [r0, #0]
    9b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9b72:	4669      	mov	r1, sp
    9b74:	4798      	blx	r3
    9b76:	b3b0      	cbz	r0, 9be6 <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    9b78:	f89d 3000 	ldrb.w	r3, [sp]
    9b7c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    9b80:	d003      	beq.n	9b8a <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    9b82:	2b40      	cmp	r3, #64	; 0x40
    9b84:	d020      	beq.n	9bc8 <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    9b86:	2000      	movs	r0, #0
    9b88:	e02e      	b.n	9be8 <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9b8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9b8e:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9b92:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9b96:	0080      	lsls	r0, r0, #2
    9b98:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    9b9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9ba0:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9ba4:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9ba6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    9baa:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9bae:	f89d 200a 	ldrb.w	r2, [sp, #10]
    9bb2:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9bb4:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9bb8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9bbc:	f002 020f 	and.w	r2, r2, #15
    9bc0:	4413      	add	r3, r2
    9bc2:	3b07      	subs	r3, #7
    9bc4:	4098      	lsls	r0, r3
    9bc6:	e00f      	b.n	9be8 <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9bd0:	f89d 0009 	ldrb.w	r0, [sp, #9]
    9bd4:	3001      	adds	r0, #1
    9bd6:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    9bda:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9bde:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    9be2:	0280      	lsls	r0, r0, #10
    9be4:	e000      	b.n	9be8 <SharedSpiCard::sectorCount()+0x7e>
    9be6:	2000      	movs	r0, #0
}
    9be8:	b005      	add	sp, #20
    9bea:	f85d fb04 	ldr.w	pc, [sp], #4

00009bee <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    9bee:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
    9bf0:	6803      	ldr	r3, [r0, #0]
    9bf2:	695c      	ldr	r4, [r3, #20]
    9bf4:	2301      	movs	r3, #1
    9bf6:	47a0      	blx	r4
}
    9bf8:	bd10      	pop	{r4, pc}

00009bfa <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9bfa:	b538      	push	{r3, r4, r5, lr}
    9bfc:	4604      	mov	r4, r0
    9bfe:	460d      	mov	r5, r1
  if (!syncDevice()) {
    9c00:	6803      	ldr	r3, [r0, #0]
    9c02:	6a1b      	ldr	r3, [r3, #32]
    9c04:	4798      	blx	r3
    9c06:	b100      	cbz	r0, 9c0a <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    9c08:	7725      	strb	r5, [r4, #28]
  return true;
}
    9c0a:	bd38      	pop	{r3, r4, r5, pc}

00009c0c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    9c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c0e:	4605      	mov	r5, r0
    9c10:	460e      	mov	r6, r1
    9c12:	4614      	mov	r4, r2
    9c14:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c16:	7cc3      	ldrb	r3, [r0, #19]
    9c18:	2b02      	cmp	r3, #2
    9c1a:	d021      	beq.n	9c60 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
    9c1c:	682b      	ldr	r3, [r5, #0]
    9c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9c20:	4631      	mov	r1, r6
    9c22:	4628      	mov	r0, r5
    9c24:	4798      	blx	r3
    9c26:	4603      	mov	r3, r0
    9c28:	b1c0      	cbz	r0, 9c5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
    9c2a:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9c2c:	b167      	cbz	r7, 9c48 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
    9c2e:	2600      	movs	r6, #0
    if (!writeData(src)) {
    9c30:	682a      	ldr	r2, [r5, #0]
    9c32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    9c34:	4621      	mov	r1, r4
    9c36:	4628      	mov	r0, r5
    9c38:	4790      	blx	r2
    9c3a:	4603      	mov	r3, r0
    9c3c:	b170      	cbz	r0, 9c5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
    9c3e:	3601      	adds	r6, #1
    9c40:	f504 7400 	add.w	r4, r4, #512	; 0x200
    9c44:	42b7      	cmp	r7, r6
    9c46:	d1f3      	bne.n	9c30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
    9c48:	69ab      	ldr	r3, [r5, #24]
    9c4a:	443b      	add	r3, r7
    9c4c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9c4e:	7f2b      	ldrb	r3, [r5, #28]
    9c50:	b923      	cbnz	r3, 9c5c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    9c52:	682b      	ldr	r3, [r5, #0]
    9c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9c56:	4628      	mov	r0, r5
    9c58:	4798      	blx	r3
    9c5a:	4603      	mov	r3, r0

fail:
  return false;
}
    9c5c:	4618      	mov	r0, r3
    9c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c60:	6983      	ldr	r3, [r0, #24]
    9c62:	428b      	cmp	r3, r1
    9c64:	d1da      	bne.n	9c1c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    9c66:	e7e1      	b.n	9c2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009c68 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c6c:	4605      	mov	r5, r0
    9c6e:	460c      	mov	r4, r1
    9c70:	4692      	mov	sl, r2
    9c72:	461f      	mov	r7, r3
    9c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c78:	7cc3      	ldrb	r3, [r0, #19]
    9c7a:	2b02      	cmp	r3, #2
    9c7c:	d026      	beq.n	9ccc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
    9c7e:	682b      	ldr	r3, [r5, #0]
    9c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9c82:	4621      	mov	r1, r4
    9c84:	4628      	mov	r0, r5
    9c86:	4798      	blx	r3
    9c88:	4603      	mov	r3, r0
    9c8a:	b1e0      	cbz	r0, 9cc6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
    9c8c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    9c8e:	f1ba 0f00 	cmp.w	sl, #0
    9c92:	d00e      	beq.n	9cb2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    9c94:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
    9c98:	4641      	mov	r1, r8
    9c9a:	4620      	mov	r0, r4
    9c9c:	47b8      	blx	r7
    9c9e:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9ca0:	682b      	ldr	r3, [r5, #0]
    9ca2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    9ca4:	4628      	mov	r0, r5
    9ca6:	47b0      	blx	r6
    9ca8:	4603      	mov	r3, r0
    9caa:	b160      	cbz	r0, 9cc6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
    9cac:	3401      	adds	r4, #1
    9cae:	45a1      	cmp	r9, r4
    9cb0:	d1f2      	bne.n	9c98 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
    9cb2:	69ab      	ldr	r3, [r5, #24]
    9cb4:	4453      	add	r3, sl
    9cb6:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9cb8:	7f2b      	ldrb	r3, [r5, #28]
    9cba:	b923      	cbnz	r3, 9cc6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
    9cbc:	682b      	ldr	r3, [r5, #0]
    9cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9cc0:	4628      	mov	r0, r5
    9cc2:	4798      	blx	r3
    9cc4:	4603      	mov	r3, r0

 fail:
  return false;
}
    9cc6:	4618      	mov	r0, r3
    9cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9ccc:	6983      	ldr	r3, [r0, #24]
    9cce:	428b      	cmp	r3, r1
    9cd0:	d1d5      	bne.n	9c7e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
    9cd2:	e7dc      	b.n	9c8e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

00009cd4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9cd4:	4770      	bx	lr

00009cd6 <SharedSpiCard::end()>:
  void end() {
    9cd6:	b508      	push	{r3, lr}
    m_spiDriver.end();
    9cd8:	3004      	adds	r0, #4
    9cda:	f001 fcfd 	bl	b6d8 <SdSpiArduinoDriver::end()>
  }
    9cde:	bd08      	pop	{r3, pc}

00009ce0 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9ce0:	b510      	push	{r4, lr}
    9ce2:	4604      	mov	r4, r0
    9ce4:	2120      	movs	r1, #32
    9ce6:	f003 f9b9 	bl	d05c <operator delete(void*, unsigned int)>
    9cea:	4620      	mov	r0, r4
    9cec:	bd10      	pop	{r4, pc}

00009cee <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    9cee:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    9cf0:	7c83      	ldrb	r3, [r0, #18]
    9cf2:	b103      	cbz	r3, 9cf6 <SharedSpiCard::spiStart()+0x8>
}
    9cf4:	bd38      	pop	{r3, r4, r5, pc}
    9cf6:	4604      	mov	r4, r0
    m_spiDriver.activate();
    9cf8:	1d05      	adds	r5, r0, #4
    9cfa:	4628      	mov	r0, r5
    9cfc:	f001 fc14 	bl	b528 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9d00:	2100      	movs	r1, #0
    9d02:	7c20      	ldrb	r0, [r4, #16]
    9d04:	f001 fc0c 	bl	b520 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d08:	21ff      	movs	r1, #255	; 0xff
    9d0a:	4628      	mov	r0, r5
    9d0c:	f001 fd05 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9d10:	2301      	movs	r3, #1
    9d12:	74a3      	strb	r3, [r4, #18]
}
    9d14:	e7ee      	b.n	9cf4 <SharedSpiCard::spiStart()+0x6>

00009d16 <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    9d16:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    9d18:	7c83      	ldrb	r3, [r0, #18]
    9d1a:	b903      	cbnz	r3, 9d1e <SharedSpiCard::spiStop()+0x8>
}
    9d1c:	bd38      	pop	{r3, r4, r5, pc}
    9d1e:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
    9d20:	2101      	movs	r1, #1
    9d22:	7c00      	ldrb	r0, [r0, #16]
    9d24:	f001 fbfc 	bl	b520 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d28:	1d25      	adds	r5, r4, #4
    9d2a:	21ff      	movs	r1, #255	; 0xff
    9d2c:	4628      	mov	r0, r5
    9d2e:	f001 fcf4 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9d32:	4628      	mov	r0, r5
    9d34:	f001 fca0 	bl	b678 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9d38:	2300      	movs	r3, #0
    9d3a:	74a3      	strb	r3, [r4, #18]
}
    9d3c:	e7ee      	b.n	9d1c <SharedSpiCard::spiStop()+0x6>

00009d3e <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    9d3e:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    9d40:	7cc3      	ldrb	r3, [r0, #19]
    9d42:	2b01      	cmp	r3, #1
    9d44:	d018      	beq.n	9d78 <SharedSpiCard::isBusy()+0x3a>
    9d46:	4604      	mov	r4, r0
  if (!spiActive) {
    9d48:	7c83      	ldrb	r3, [r0, #18]
    9d4a:	b143      	cbz	r3, 9d5e <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
    9d4c:	3004      	adds	r0, #4
    9d4e:	f001 fcc8 	bl	b6e2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9d52:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9d56:	bf18      	it	ne
    9d58:	2501      	movne	r5, #1
}
    9d5a:	4628      	mov	r0, r5
    9d5c:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
    9d5e:	f7ff ffc6 	bl	9cee <SharedSpiCard::spiStart()>
    9d62:	1d20      	adds	r0, r4, #4
    9d64:	f001 fcbd 	bl	b6e2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9d68:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9d6c:	bf18      	it	ne
    9d6e:	2501      	movne	r5, #1
    spiStop();
    9d70:	4620      	mov	r0, r4
    9d72:	f7ff ffd0 	bl	9d16 <SharedSpiCard::spiStop()>
    9d76:	e7f0      	b.n	9d5a <SharedSpiCard::isBusy()+0x1c>
    return false;
    9d78:	2500      	movs	r5, #0
    9d7a:	e7ee      	b.n	9d5a <SharedSpiCard::isBusy()+0x1c>

00009d7c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    9d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d80:	4604      	mov	r4, r0
    9d82:	4688      	mov	r8, r1
    9d84:	4691      	mov	r9, r2
    9d86:	4b17      	ldr	r3, [pc, #92]	; (9de4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
    9d88:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
    9d8a:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    9d8e:	b2ad      	uxth	r5, r5
    9d90:	1d06      	adds	r6, r0, #4
    9d92:	461f      	mov	r7, r3
    9d94:	4630      	mov	r0, r6
    9d96:	f001 fca4 	bl	b6e2 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9d9a:	7520      	strb	r0, [r4, #20]
    9d9c:	28ff      	cmp	r0, #255	; 0xff
    9d9e:	d10c      	bne.n	9dba <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
    9da0:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9da2:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9da4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9da8:	d0f4      	beq.n	9d94 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    9daa:	231d      	movs	r3, #29
    m_errorCode = code;
    9dac:	7463      	strb	r3, [r4, #17]
  spiStop();
    9dae:	4620      	mov	r0, r4
    9db0:	f7ff ffb1 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    9db4:	2000      	movs	r0, #0
}
    9db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
    9dba:	28fe      	cmp	r0, #254	; 0xfe
    9dbc:	d001      	beq.n	9dc2 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    9dbe:	2318      	movs	r3, #24
    9dc0:	e7f4      	b.n	9dac <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
    9dc2:	464a      	mov	r2, r9
    9dc4:	4641      	mov	r1, r8
    9dc6:	4630      	mov	r0, r6
    9dc8:	f001 fc97 	bl	b6fa <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    9dcc:	7520      	strb	r0, [r4, #20]
    9dce:	b108      	cbz	r0, 9dd4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
    9dd0:	2325      	movs	r3, #37	; 0x25
    9dd2:	e7eb      	b.n	9dac <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
    9dd4:	4630      	mov	r0, r6
    9dd6:	f001 fc84 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    9dda:	4630      	mov	r0, r6
    9ddc:	f001 fc81 	bl	b6e2 <SdSpiArduinoDriver::receive()>
  return true;
    9de0:	2001      	movs	r0, #1
    9de2:	e7e8      	b.n	9db6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
    9de4:	200052bc 	.word	0x200052bc

00009de8 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
    9de8:	b508      	push	{r3, lr}
  return readData(dst, 512);
    9dea:	f44f 7200 	mov.w	r2, #512	; 0x200
    9dee:	f7ff ffc5 	bl	9d7c <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
    9df2:	bd08      	pop	{r3, pc}

00009df4 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    9df4:	b570      	push	{r4, r5, r6, lr}
    9df6:	4b0a      	ldr	r3, [pc, #40]	; (9e20 <SharedSpiCard::waitReady(unsigned short)+0x2c>)
    9df8:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
    9dfa:	440c      	add	r4, r1
    9dfc:	b2a4      	uxth	r4, r4
    9dfe:	1d05      	adds	r5, r0, #4
    9e00:	461e      	mov	r6, r3
    9e02:	4628      	mov	r0, r5
    9e04:	f001 fc6d 	bl	b6e2 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9e08:	28ff      	cmp	r0, #255	; 0xff
    9e0a:	d006      	beq.n	9e1a <SharedSpiCard::waitReady(unsigned short)+0x26>
    9e0c:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9e0e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    9e10:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9e14:	d0f5      	beq.n	9e02 <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
    9e16:	2000      	movs	r0, #0
    9e18:	e000      	b.n	9e1c <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
    9e1a:	2001      	movs	r0, #1
}
    9e1c:	bd70      	pop	{r4, r5, r6, pc}
    9e1e:	bf00      	nop
    9e20:	200052bc 	.word	0x200052bc

00009e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e28:	b082      	sub	sp, #8
    9e2a:	4605      	mov	r5, r0
    9e2c:	460f      	mov	r7, r1
    9e2e:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
    9e30:	6803      	ldr	r3, [r0, #0]
    9e32:	6a1b      	ldr	r3, [r3, #32]
    9e34:	4798      	blx	r3
    9e36:	2800      	cmp	r0, #0
    9e38:	d03b      	beq.n	9eb2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
    9e3a:	7cab      	ldrb	r3, [r5, #18]
    9e3c:	b3ab      	cbz	r3, 9eaa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
    9e3e:	2f0c      	cmp	r7, #12
    9e40:	d00a      	beq.n	9e58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    9e42:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9e46:	4628      	mov	r0, r5
    9e48:	f7ff ffd4 	bl	9df4 <SharedSpiCard::waitReady(unsigned short)>
    9e4c:	b127      	cbz	r7, 9e58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    9e4e:	f080 0001 	eor.w	r0, r0, #1
    9e52:	f010 0fff 	tst.w	r0, #255	; 0xff
    9e56:	d12e      	bne.n	9eb6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
    9e58:	1d2e      	adds	r6, r5, #4
    9e5a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    9e5e:	4630      	mov	r0, r6
    9e60:	f001 fc5b 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    9e64:	f10d 0804 	add.w	r8, sp, #4
    9e68:	ac02      	add	r4, sp, #8
    9e6a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9e6e:	4630      	mov	r0, r6
    9e70:	f001 fc53 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    9e74:	4544      	cmp	r4, r8
    9e76:	d1f8      	bne.n	9e6a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9e78:	2f00      	cmp	r7, #0
    9e7a:	bf0c      	ite	eq
    9e7c:	2195      	moveq	r1, #149	; 0x95
    9e7e:	2187      	movne	r1, #135	; 0x87
    9e80:	4630      	mov	r0, r6
    9e82:	f001 fc4a 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9e86:	4630      	mov	r0, r6
    9e88:	f001 fc2b 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    9e8c:	240a      	movs	r4, #10
    9e8e:	4630      	mov	r0, r6
    9e90:	f001 fc27 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
    9e94:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
    9e96:	f010 0f80 	tst.w	r0, #128	; 0x80
    9e9a:	d003      	beq.n	9ea4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
    9e9c:	3c01      	subs	r4, #1
    9e9e:	b2a4      	uxth	r4, r4
    9ea0:	2c00      	cmp	r4, #0
    9ea2:	d1f4      	bne.n	9e8e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
    9ea4:	b002      	add	sp, #8
    9ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
    9eaa:	4628      	mov	r0, r5
    9eac:	f7ff ff1f 	bl	9cee <SharedSpiCard::spiStart()>
    9eb0:	e7c5      	b.n	9e3e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
    9eb2:	20ff      	movs	r0, #255	; 0xff
    9eb4:	e7f6      	b.n	9ea4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
    9eb6:	20ff      	movs	r0, #255	; 0xff
    9eb8:	e7f4      	b.n	9ea4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

00009ebc <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ec0:	b089      	sub	sp, #36	; 0x24
    9ec2:	4605      	mov	r5, r0
    9ec4:	ac01      	add	r4, sp, #4
    9ec6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    9eca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9ece:	4617      	mov	r7, r2
  m_spiActive = false;
    9ed0:	f04f 0800 	mov.w	r8, #0
    9ed4:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    9ed8:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    9edc:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
    9ee0:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    9ee2:	f001 fb18 	bl	b516 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    9ee6:	2101      	movs	r1, #1
    9ee8:	7c28      	ldrb	r0, [r5, #16]
    9eea:	f001 fb19 	bl	b520 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    9eee:	4b55      	ldr	r3, [pc, #340]	; (a044 <SharedSpiCard::begin(SdSpiConfig)+0x188>)
    9ef0:	60ab      	str	r3, [r5, #8]
    9ef2:	2307      	movs	r3, #7
    9ef4:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
    9ef6:	ab05      	add	r3, sp, #20
    9ef8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    9efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    9f00:	1d2e      	adds	r6, r5, #4
    9f02:	cb0e      	ldmia	r3, {r1, r2, r3}
    9f04:	4630      	mov	r0, r6
    9f06:	f001 fba3 	bl	b650 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
    9f0a:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
    9f0e:	4628      	mov	r0, r5
    9f10:	f7ff feed 	bl	9cee <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
    9f14:	2101      	movs	r1, #1
    9f16:	7c28      	ldrb	r0, [r5, #16]
    9f18:	f001 fb02 	bl	b520 <sdCsWrite(unsigned char, bool)>
    9f1c:	240a      	movs	r4, #10
    m_spiDriver.send(data);
    9f1e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    9f22:	4641      	mov	r1, r8
    9f24:	4630      	mov	r0, r6
    9f26:	f001 fbf8 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    9f2a:	1e63      	subs	r3, r4, #1
    9f2c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9f30:	d1f7      	bne.n	9f22 <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
    9f32:	2100      	movs	r1, #0
    9f34:	7c28      	ldrb	r0, [r5, #16]
    9f36:	f001 faf3 	bl	b520 <sdCsWrite(unsigned char, bool)>
    9f3a:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    9f3c:	f04f 0800 	mov.w	r8, #0
    9f40:	4642      	mov	r2, r8
    9f42:	4641      	mov	r1, r8
    9f44:	4628      	mov	r0, r5
    9f46:	f7ff ff6d 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9f4a:	2801      	cmp	r0, #1
    9f4c:	d00c      	beq.n	9f68 <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
    9f4e:	1e63      	subs	r3, r4, #1
    9f50:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9f54:	d1f4      	bne.n	9f40 <SharedSpiCard::begin(SdSpiConfig)+0x84>
    9f56:	2301      	movs	r3, #1
    m_errorCode = code;
    9f58:	746b      	strb	r3, [r5, #17]
  spiStop();
    9f5a:	4628      	mov	r0, r5
    9f5c:	f7ff fedb 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    9f60:	2000      	movs	r0, #0
}
    9f62:	b009      	add	sp, #36	; 0x24
    9f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    9f68:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    9f6c:	2108      	movs	r1, #8
    9f6e:	4628      	mov	r0, r5
    9f70:	f7ff ff58 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9f74:	f010 0f04 	tst.w	r0, #4
    9f78:	d10e      	bne.n	9f98 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
    9f7a:	2302      	movs	r3, #2
    9f7c:	756b      	strb	r3, [r5, #21]
    9f7e:	2404      	movs	r4, #4
    return m_spiDriver.receive();
    9f80:	4630      	mov	r0, r6
    9f82:	f001 fbae 	bl	b6e2 <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    9f86:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    9f88:	1e63      	subs	r3, r4, #1
    9f8a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    9f8e:	d1f7      	bne.n	9f80 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
    9f90:	28aa      	cmp	r0, #170	; 0xaa
    9f92:	d003      	beq.n	9f9c <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    9f94:	2306      	movs	r3, #6
    9f96:	e7df      	b.n	9f58 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
    9f98:	2301      	movs	r3, #1
    9f9a:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    9f9c:	682b      	ldr	r3, [r5, #0]
    9f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9fa0:	4628      	mov	r0, r5
    9fa2:	4798      	blx	r3
    9fa4:	2802      	cmp	r0, #2
    9fa6:	bf14      	ite	ne
    9fa8:	2400      	movne	r4, #0
    9faa:	2401      	moveq	r4, #1
    9fac:	07a4      	lsls	r4, r4, #30
    9fae:	4b26      	ldr	r3, [pc, #152]	; (a048 <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
    9fb0:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
    9fb2:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
    9fb6:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
    9fba:	f04f 0a00 	mov.w	sl, #0
    9fbe:	f04f 0937 	mov.w	r9, #55	; 0x37
    9fc2:	f8df b084 	ldr.w	fp, [pc, #132]	; a048 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    9fc6:	4652      	mov	r2, sl
    9fc8:	4649      	mov	r1, r9
    9fca:	4628      	mov	r0, r5
    9fcc:	f7ff ff2a 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    9fd0:	4622      	mov	r2, r4
    9fd2:	2129      	movs	r1, #41	; 0x29
    9fd4:	4628      	mov	r0, r5
    9fd6:	f7ff ff25 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    9fda:	b140      	cbz	r0, 9fee <SharedSpiCard::begin(SdSpiConfig)+0x132>
    9fdc:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
    9fe0:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    9fe4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9fe8:	d0ed      	beq.n	9fc6 <SharedSpiCard::begin(SdSpiConfig)+0x10a>
    9fea:	2317      	movs	r3, #23
    9fec:	e7b4      	b.n	9f58 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
    9fee:	682b      	ldr	r3, [r5, #0]
    9ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    9ff2:	4628      	mov	r0, r5
    9ff4:	4798      	blx	r3
    9ff6:	2802      	cmp	r0, #2
    9ff8:	d007      	beq.n	a00a <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
    9ffa:	4628      	mov	r0, r5
    9ffc:	f7ff fe8b 	bl	9d16 <SharedSpiCard::spiStop()>
    a000:	60af      	str	r7, [r5, #8]
    a002:	2307      	movs	r3, #7
    a004:	60eb      	str	r3, [r5, #12]
  return true;
    a006:	2001      	movs	r0, #1
    a008:	e7ab      	b.n	9f62 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
    a00a:	2200      	movs	r2, #0
    a00c:	213a      	movs	r1, #58	; 0x3a
    a00e:	4628      	mov	r0, r5
    a010:	f7ff ff08 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a014:	b108      	cbz	r0, a01a <SharedSpiCard::begin(SdSpiConfig)+0x15e>
    a016:	2312      	movs	r3, #18
    a018:	e79e      	b.n	9f58 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
    a01a:	4630      	mov	r0, r6
    a01c:	f001 fb61 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a020:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    a024:	2bc0      	cmp	r3, #192	; 0xc0
    a026:	d009      	beq.n	a03c <SharedSpiCard::begin(SdSpiConfig)+0x180>
    a028:	4630      	mov	r0, r6
    a02a:	f001 fb5a 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    a02e:	4630      	mov	r0, r6
    a030:	f001 fb57 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    a034:	4630      	mov	r0, r6
    a036:	f001 fb54 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a03a:	e7de      	b.n	9ffa <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
    a03c:	2303      	movs	r3, #3
    a03e:	756b      	strb	r3, [r5, #21]
  }
    a040:	e7f2      	b.n	a028 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    a042:	bf00      	nop
    a044:	00061a80 	.word	0x00061a80
    a048:	200052bc 	.word	0x200052bc

0000a04c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a04e:	4606      	mov	r6, r0
    a050:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a052:	2200      	movs	r2, #0
    a054:	213a      	movs	r1, #58	; 0x3a
    a056:	f7ff fee5 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a05a:	b968      	cbnz	r0, a078 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a05c:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a05e:	1d37      	adds	r7, r6, #4
    a060:	4638      	mov	r0, r7
    a062:	f001 fb3e 	bl	b6e2 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a066:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a06a:	42ac      	cmp	r4, r5
    a06c:	d1f8      	bne.n	a060 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
    a06e:	4630      	mov	r0, r6
    a070:	f7ff fe51 	bl	9d16 <SharedSpiCard::spiStop()>
  return true;
    a074:	2001      	movs	r0, #1
}
    a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a078:	2312      	movs	r3, #18
    a07a:	7473      	strb	r3, [r6, #17]
  spiStop();
    a07c:	4630      	mov	r0, r6
    a07e:	f7ff fe4a 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a082:	2000      	movs	r0, #0
    a084:	e7f7      	b.n	a076 <SharedSpiCard::readOCR(unsigned long*)+0x2a>

0000a086 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a086:	b538      	push	{r3, r4, r5, lr}
    a088:	4604      	mov	r4, r0
    a08a:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    a08c:	2200      	movs	r2, #0
    a08e:	f7ff fec9 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a092:	b138      	cbz	r0, a0a4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    a094:	231b      	movs	r3, #27
    a096:	7463      	strb	r3, [r4, #17]
  spiStop();
    a098:	4620      	mov	r0, r4
    a09a:	f7ff fe3c 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a09e:	2500      	movs	r5, #0
}
    a0a0:	4628      	mov	r0, r5
    a0a2:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
    a0a4:	2210      	movs	r2, #16
    a0a6:	4629      	mov	r1, r5
    a0a8:	4620      	mov	r0, r4
    a0aa:	f7ff fe67 	bl	9d7c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a0ae:	4605      	mov	r5, r0
    a0b0:	2800      	cmp	r0, #0
    a0b2:	d0f1      	beq.n	a098 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    a0b4:	4620      	mov	r0, r4
    a0b6:	f7ff fe2e 	bl	9d16 <SharedSpiCard::spiStop()>
  return true;
    a0ba:	e7f1      	b.n	a0a0 <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

0000a0bc <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a0bc:	b508      	push	{r3, lr}
    a0be:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
    a0c0:	2109      	movs	r1, #9
    a0c2:	f7ff ffe0 	bl	a086 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a0c6:	bd08      	pop	{r3, pc}

0000a0c8 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a0c8:	b508      	push	{r3, lr}
    a0ca:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
    a0cc:	210a      	movs	r1, #10
    a0ce:	f7ff ffda 	bl	a086 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a0d2:	bd08      	pop	{r3, pc}

0000a0d4 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    a0d4:	b538      	push	{r3, r4, r5, lr}
    a0d6:	4604      	mov	r4, r0
    a0d8:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a0da:	6803      	ldr	r3, [r0, #0]
    a0dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a0de:	4798      	blx	r3
    a0e0:	2803      	cmp	r0, #3
    sector <<= 9;
    a0e2:	bf18      	it	ne
    a0e4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    a0e6:	462a      	mov	r2, r5
    a0e8:	2112      	movs	r1, #18
    a0ea:	4620      	mov	r0, r4
    a0ec:	f7ff fe9a 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a0f0:	b910      	cbnz	r0, a0f8 <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
    a0f2:	2001      	movs	r0, #1
    a0f4:	74e0      	strb	r0, [r4, #19]
}
    a0f6:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a0f8:	230c      	movs	r3, #12
    a0fa:	7463      	strb	r3, [r4, #17]
  spiStop();
    a0fc:	4620      	mov	r0, r4
    a0fe:	f7ff fe0a 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a102:	2000      	movs	r0, #0
    a104:	e7f7      	b.n	a0f6 <SharedSpiCard::readStart(unsigned long)+0x22>

0000a106 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a106:	b510      	push	{r4, lr}
    a108:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
    a10a:	2200      	movs	r2, #0
    a10c:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a10e:	210c      	movs	r1, #12
    a110:	f7ff fe88 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a114:	b920      	cbnz	r0, a120 <SharedSpiCard::readStop()+0x1a>
  spiStop();
    a116:	4620      	mov	r0, r4
    a118:	f7ff fdfd 	bl	9d16 <SharedSpiCard::spiStop()>
  return true;
    a11c:	2001      	movs	r0, #1
}
    a11e:	bd10      	pop	{r4, pc}
    a120:	2309      	movs	r3, #9
    a122:	7463      	strb	r3, [r4, #17]
  spiStop();
    a124:	4620      	mov	r0, r4
    a126:	f7ff fdf6 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a12a:	2000      	movs	r0, #0
    a12c:	e7f7      	b.n	a11e <SharedSpiCard::readStop()+0x18>

0000a12e <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    a12e:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
    a130:	7cc3      	ldrb	r3, [r0, #19]
    a132:	2b02      	cmp	r3, #2
    a134:	d003      	beq.n	a13e <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
    a136:	2b01      	cmp	r3, #1
    a138:	d005      	beq.n	a146 <SharedSpiCard::syncDevice()+0x18>
  return true;
    a13a:	2001      	movs	r0, #1
}
    a13c:	bd08      	pop	{r3, pc}
    return writeStop();
    a13e:	6803      	ldr	r3, [r0, #0]
    a140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a142:	4798      	blx	r3
    a144:	e7fa      	b.n	a13c <SharedSpiCard::syncDevice()+0xe>
    return readStop();
    a146:	f7ff ffde 	bl	a106 <SharedSpiCard::readStop()>
    a14a:	e7f7      	b.n	a13c <SharedSpiCard::syncDevice()+0xe>

0000a14c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a14e:	4606      	mov	r6, r0
    a150:	460d      	mov	r5, r1
    a152:	4614      	mov	r4, r2
    a154:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a156:	7cc3      	ldrb	r3, [r0, #19]
    a158:	2b01      	cmp	r3, #1
    a15a:	d102      	bne.n	a162 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a15c:	6983      	ldr	r3, [r0, #24]
    a15e:	428b      	cmp	r3, r1
    a160:	d006      	beq.n	a170 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    a162:	4629      	mov	r1, r5
    a164:	4630      	mov	r0, r6
    a166:	f7ff ffb5 	bl	a0d4 <SharedSpiCard::readStart(unsigned long)>
    a16a:	4603      	mov	r3, r0
    a16c:	b190      	cbz	r0, a194 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
    a16e:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a170:	b15f      	cbz	r7, a18a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    a172:	2500      	movs	r5, #0
    if (!readData(dst)) {
    a174:	4621      	mov	r1, r4
    a176:	4630      	mov	r0, r6
    a178:	f7ff fe36 	bl	9de8 <SharedSpiCard::readData(unsigned char*)>
    a17c:	4603      	mov	r3, r0
    a17e:	b148      	cbz	r0, a194 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a180:	3501      	adds	r5, #1
    a182:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a186:	42af      	cmp	r7, r5
    a188:	d1f4      	bne.n	a174 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
    a18a:	69b3      	ldr	r3, [r6, #24]
    a18c:	443b      	add	r3, r7
    a18e:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a190:	7f33      	ldrb	r3, [r6, #28]
    a192:	b10b      	cbz	r3, a198 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
    a194:	4618      	mov	r0, r3
    a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
    a198:	4630      	mov	r0, r6
    a19a:	f7ff ffb4 	bl	a106 <SharedSpiCard::readStop()>
    a19e:	4603      	mov	r3, r0
    a1a0:	e7f8      	b.n	a194 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0000a1a2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a1a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1a6:	4606      	mov	r6, r0
    a1a8:	460c      	mov	r4, r1
    a1aa:	4615      	mov	r5, r2
    a1ac:	469a      	mov	sl, r3
    a1ae:	9f08      	ldr	r7, [sp, #32]
    a1b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    a1b4:	7cc3      	ldrb	r3, [r0, #19]
    a1b6:	2b01      	cmp	r3, #1
    a1b8:	d102      	bne.n	a1c0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
    a1ba:	6983      	ldr	r3, [r0, #24]
    a1bc:	428b      	cmp	r3, r1
    a1be:	d006      	beq.n	a1ce <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a1c0:	4621      	mov	r1, r4
    a1c2:	4630      	mov	r0, r6
    a1c4:	f7ff ff86 	bl	a0d4 <SharedSpiCard::readStart(unsigned long)>
    a1c8:	4603      	mov	r3, r0
    a1ca:	b1b8      	cbz	r0, a1fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
    a1cc:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a1ce:	f1ba 0f00 	cmp.w	sl, #0
    a1d2:	d00e      	beq.n	a1f2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
    a1d4:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
    a1d8:	4629      	mov	r1, r5
    a1da:	4630      	mov	r0, r6
    a1dc:	f7ff fe04 	bl	9de8 <SharedSpiCard::readData(unsigned char*)>
    a1e0:	4603      	mov	r3, r0
    a1e2:	b158      	cbz	r0, a1fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
    a1e4:	4642      	mov	r2, r8
    a1e6:	4629      	mov	r1, r5
    a1e8:	4620      	mov	r0, r4
    a1ea:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
    a1ec:	3401      	adds	r4, #1
    a1ee:	45a1      	cmp	r9, r4
    a1f0:	d1f2      	bne.n	a1d8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
    a1f2:	69b3      	ldr	r3, [r6, #24]
    a1f4:	4453      	add	r3, sl
    a1f6:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a1f8:	7f33      	ldrb	r3, [r6, #28]
    a1fa:	b113      	cbz	r3, a202 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
    a1fc:	4618      	mov	r0, r3
    a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
    a202:	4630      	mov	r0, r6
    a204:	f7ff ff7f 	bl	a106 <SharedSpiCard::readStop()>
    a208:	4603      	mov	r3, r0
    a20a:	e7f7      	b.n	a1fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

0000a20c <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    a20c:	b538      	push	{r3, r4, r5, lr}
    a20e:	4604      	mov	r4, r0
    a210:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a212:	6803      	ldr	r3, [r0, #0]
    a214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a216:	4798      	blx	r3
    a218:	2803      	cmp	r0, #3
    sector <<= 9;
    a21a:	bf18      	it	ne
    a21c:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    a21e:	462a      	mov	r2, r5
    a220:	2119      	movs	r1, #25
    a222:	4620      	mov	r0, r4
    a224:	f7ff fdfe 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a228:	b918      	cbnz	r0, a232 <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
    a22a:	2302      	movs	r3, #2
    a22c:	74e3      	strb	r3, [r4, #19]
  return true;
    a22e:	2001      	movs	r0, #1
}
    a230:	bd38      	pop	{r3, r4, r5, pc}
    a232:	230e      	movs	r3, #14
    a234:	7463      	strb	r3, [r4, #17]
  spiStop();
    a236:	4620      	mov	r0, r4
    a238:	f7ff fd6d 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a23c:	2000      	movs	r0, #0
    a23e:	e7f7      	b.n	a230 <SharedSpiCard::writeStart(unsigned long)+0x24>

0000a240 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a240:	b570      	push	{r4, r5, r6, lr}
    a242:	b084      	sub	sp, #16
    a244:	4604      	mov	r4, r0
    a246:	460d      	mov	r5, r1
    a248:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
    a24a:	6803      	ldr	r3, [r0, #0]
    a24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a24e:	4669      	mov	r1, sp
    a250:	4798      	blx	r3
    a252:	b1f8      	cbz	r0, a294 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
    a254:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a258:	f013 0f40 	tst.w	r3, #64	; 0x40
    a25c:	d10d      	bne.n	a27a <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a25e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a262:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a266:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a268:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a26c:	1c72      	adds	r2, r6, #1
    a26e:	432a      	orrs	r2, r5
    a270:	4213      	tst	r3, r2
    a272:	d002      	beq.n	a27a <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    a274:	2327      	movs	r3, #39	; 0x27
    a276:	7463      	strb	r3, [r4, #17]
      goto fail;
    a278:	e00c      	b.n	a294 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a27a:	7d63      	ldrb	r3, [r4, #21]
    a27c:	2b03      	cmp	r3, #3
    a27e:	d001      	beq.n	a284 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
    a280:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    a282:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
    a284:	462a      	mov	r2, r5
    a286:	2120      	movs	r1, #32
    a288:	4620      	mov	r0, r4
    a28a:	f7ff fdcb 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a28e:	b140      	cbz	r0, a2a2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
    a290:	2326      	movs	r3, #38	; 0x26
    a292:	7463      	strb	r3, [r4, #17]
  spiStop();
    a294:	4620      	mov	r0, r4
    a296:	f7ff fd3e 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a29a:	2500      	movs	r5, #0
}
    a29c:	4628      	mov	r0, r5
    a29e:	b004      	add	sp, #16
    a2a0:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
    a2a2:	4632      	mov	r2, r6
    a2a4:	2121      	movs	r1, #33	; 0x21
    a2a6:	4620      	mov	r0, r4
    a2a8:	f7ff fdbc 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a2ac:	2800      	cmp	r0, #0
    a2ae:	d1ef      	bne.n	a290 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
    a2b0:	2200      	movs	r2, #0
    a2b2:	2126      	movs	r1, #38	; 0x26
    a2b4:	4620      	mov	r0, r4
    a2b6:	f7ff fdb5 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a2ba:	2800      	cmp	r0, #0
    a2bc:	d1e8      	bne.n	a290 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    a2be:	f242 7110 	movw	r1, #10000	; 0x2710
    a2c2:	4620      	mov	r0, r4
    a2c4:	f7ff fd96 	bl	9df4 <SharedSpiCard::waitReady(unsigned short)>
    a2c8:	4605      	mov	r5, r0
    a2ca:	b910      	cbnz	r0, a2d2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
    a2cc:	2328      	movs	r3, #40	; 0x28
    a2ce:	7463      	strb	r3, [r4, #17]
    goto fail;
    a2d0:	e7e0      	b.n	a294 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
    a2d2:	4620      	mov	r0, r4
    a2d4:	f7ff fd1f 	bl	9d16 <SharedSpiCard::spiStop()>
  return true;
    a2d8:	e7e0      	b.n	a29c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

0000a2da <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    a2da:	b538      	push	{r3, r4, r5, lr}
    a2dc:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a2de:	f44f 7116 	mov.w	r1, #600	; 0x258
    a2e2:	f7ff fd87 	bl	9df4 <SharedSpiCard::waitReady(unsigned short)>
    a2e6:	4605      	mov	r5, r0
    a2e8:	b150      	cbz	r0, a300 <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
    a2ea:	21fd      	movs	r1, #253	; 0xfd
    a2ec:	1d20      	adds	r0, r4, #4
    a2ee:	f001 fa14 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    a2f2:	4620      	mov	r0, r4
    a2f4:	f7ff fd0f 	bl	9d16 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    a2f8:	2300      	movs	r3, #0
    a2fa:	74e3      	strb	r3, [r4, #19]
}
    a2fc:	4628      	mov	r0, r5
    a2fe:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a300:	231e      	movs	r3, #30
    a302:	7463      	strb	r3, [r4, #17]
  spiStop();
    a304:	4620      	mov	r0, r4
    a306:	f7ff fd06 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a30a:	e7f7      	b.n	a2fc <SharedSpiCard::writeStop()+0x22>

0000a30c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a30c:	b570      	push	{r4, r5, r6, lr}
    a30e:	4605      	mov	r5, r0
    a310:	4616      	mov	r6, r2
    m_spiDriver.send(data);
    a312:	1d04      	adds	r4, r0, #4
    a314:	4620      	mov	r0, r4
    a316:	f001 fa00 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a31a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a31e:	4631      	mov	r1, r6
    a320:	4620      	mov	r0, r4
    a322:	f001 fa04 	bl	b72e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a326:	21ff      	movs	r1, #255	; 0xff
    a328:	4620      	mov	r0, r4
    a32a:	f001 f9f6 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    a32e:	21ff      	movs	r1, #255	; 0xff
    a330:	4620      	mov	r0, r4
    a332:	f001 f9f2 	bl	b71a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a336:	4620      	mov	r0, r4
    a338:	f001 f9d3 	bl	b6e2 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    a33c:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a33e:	f000 031f 	and.w	r3, r0, #31
    a342:	2b05      	cmp	r3, #5
    a344:	d101      	bne.n	a34a <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
    a346:	2001      	movs	r0, #1
}
    a348:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
    a34a:	2320      	movs	r3, #32
    a34c:	746b      	strb	r3, [r5, #17]
  spiStop();
    a34e:	4628      	mov	r0, r5
    a350:	f7ff fce1 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a354:	2000      	movs	r0, #0
    a356:	e7f7      	b.n	a348 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

0000a358 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a358:	b538      	push	{r3, r4, r5, lr}
    a35a:	4604      	mov	r4, r0
    a35c:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a35e:	f44f 7116 	mov.w	r1, #600	; 0x258
    a362:	f7ff fd47 	bl	9df4 <SharedSpiCard::waitReady(unsigned short)>
    a366:	b930      	cbnz	r0, a376 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    a368:	2324      	movs	r3, #36	; 0x24
    a36a:	7463      	strb	r3, [r4, #17]
  spiStop();
    a36c:	4620      	mov	r0, r4
    a36e:	f7ff fcd2 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a372:	2000      	movs	r0, #0
}
    a374:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a376:	462a      	mov	r2, r5
    a378:	21fc      	movs	r1, #252	; 0xfc
    a37a:	4620      	mov	r0, r4
    a37c:	f7ff ffc6 	bl	a30c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a380:	2800      	cmp	r0, #0
    a382:	d1f7      	bne.n	a374 <SharedSpiCard::writeData(unsigned char const*)+0x1c>
    a384:	e7f2      	b.n	a36c <SharedSpiCard::writeData(unsigned char const*)+0x14>

0000a386 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a386:	b570      	push	{r4, r5, r6, lr}
    a388:	4604      	mov	r4, r0
    a38a:	460d      	mov	r5, r1
    a38c:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    a38e:	6803      	ldr	r3, [r0, #0]
    a390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a392:	4798      	blx	r3
    a394:	2803      	cmp	r0, #3
    sector <<= 9;
    a396:	bf18      	it	ne
    a398:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a39a:	462a      	mov	r2, r5
    a39c:	2118      	movs	r1, #24
    a39e:	4620      	mov	r0, r4
    a3a0:	f7ff fd40 	bl	9e24 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a3a4:	b138      	cbz	r0, a3b6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    a3a6:	230d      	movs	r3, #13
    a3a8:	7463      	strb	r3, [r4, #17]
  spiStop();
    a3aa:	4620      	mov	r0, r4
    a3ac:	f7ff fcb3 	bl	9d16 <SharedSpiCard::spiStop()>
  return false;
    a3b0:	2500      	movs	r5, #0
}
    a3b2:	4628      	mov	r0, r5
    a3b4:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a3b6:	4632      	mov	r2, r6
    a3b8:	21fe      	movs	r1, #254	; 0xfe
    a3ba:	4620      	mov	r0, r4
    a3bc:	f7ff ffa6 	bl	a30c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a3c0:	4605      	mov	r5, r0
    a3c2:	2800      	cmp	r0, #0
    a3c4:	d0f1      	beq.n	a3aa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
    a3c6:	4620      	mov	r0, r4
    a3c8:	f7ff fca5 	bl	9d16 <SharedSpiCard::spiStop()>
  return true;
    a3cc:	e7f1      	b.n	a3b2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

0000a3ce <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a3ce:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
    a3d0:	7f03      	ldrb	r3, [r0, #28]
    a3d2:	b123      	cbz	r3, a3de <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
    a3d4:	6803      	ldr	r3, [r0, #0]
    a3d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a3d8:	2301      	movs	r3, #1
    a3da:	47a0      	blx	r4
}
    a3dc:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
    a3de:	f7ff ffd2 	bl	a386 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
    a3e2:	e7fb      	b.n	a3dc <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0000a3e4 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a3e4:	b510      	push	{r4, lr}
    a3e6:	b084      	sub	sp, #16
    a3e8:	4604      	mov	r4, r0
    a3ea:	f10d 0c04 	add.w	ip, sp, #4
    a3ee:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a3f2:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a3f6:	f7ff fd61 	bl	9ebc <SharedSpiCard::begin(SdSpiConfig)>
    a3fa:	b120      	cbz	r0, a406 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a3fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a400:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    a404:	7723      	strb	r3, [r4, #28]
}
    a406:	b004      	add	sp, #16
    a408:	bd10      	pop	{r4, pc}

0000a40a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a40a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a40e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a412:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a416:	b1b3      	cbz	r3, a446 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a418:	4605      	mov	r5, r0
    a41a:	460c      	mov	r4, r1
    a41c:	4616      	mov	r6, r2
    a41e:	461f      	mov	r7, r3
    a420:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
    a422:	682b      	ldr	r3, [r5, #0]
    a424:	691b      	ldr	r3, [r3, #16]
    a426:	4632      	mov	r2, r6
    a428:	4621      	mov	r1, r4
    a42a:	4628      	mov	r0, r5
    a42c:	4798      	blx	r3
    a42e:	4682      	mov	sl, r0
    a430:	b130      	cbz	r0, a440 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
    a432:	464a      	mov	r2, r9
    a434:	4631      	mov	r1, r6
    a436:	4620      	mov	r0, r4
    a438:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a43a:	3401      	adds	r4, #1
    a43c:	42bc      	cmp	r4, r7
    a43e:	d1f0      	bne.n	a422 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
    a440:	4650      	mov	r0, sl
    a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
    a446:	f04f 0a01 	mov.w	sl, #1
    a44a:	e7f9      	b.n	a440 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

0000a44c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a450:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a454:	b1aa      	cbz	r2, a482 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
    a456:	4605      	mov	r5, r0
    a458:	460c      	mov	r4, r1
    a45a:	461f      	mov	r7, r3
    a45c:	4690      	mov	r8, r2
    a45e:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a460:	682b      	ldr	r3, [r5, #0]
    a462:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a464:	4649      	mov	r1, r9
    a466:	4620      	mov	r0, r4
    a468:	47b8      	blx	r7
    a46a:	4602      	mov	r2, r0
    a46c:	4621      	mov	r1, r4
    a46e:	4628      	mov	r0, r5
    a470:	47b0      	blx	r6
    a472:	4603      	mov	r3, r0
    a474:	b110      	cbz	r0, a47c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
    a476:	3401      	adds	r4, #1
    a478:	4544      	cmp	r4, r8
    a47a:	d1f1      	bne.n	a460 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a47c:	4618      	mov	r0, r3
    a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a482:	2301      	movs	r3, #1
    a484:	e7fa      	b.n	a47c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

0000a486 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a486:	2000      	movs	r0, #0
    a488:	4770      	bx	lr

0000a48a <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a48a:	2000      	movs	r0, #0
    a48c:	4770      	bx	lr

0000a48e <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a48e:	2000      	movs	r0, #0
    a490:	4770      	bx	lr

0000a492 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a492:	4770      	bx	lr

0000a494 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a494:	4b07      	ldr	r3, [pc, #28]	; (a4b4 <sdIrs()+0x20>)
    a496:	2100      	movs	r1, #0
    a498:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a49a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    a49c:	4a06      	ldr	r2, [pc, #24]	; (a4b8 <sdIrs()+0x24>)
    a49e:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a4a0:	6812      	ldr	r2, [r2, #0]
    a4a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a4a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a4a6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a4aa:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    a4ac:	4b03      	ldr	r3, [pc, #12]	; (a4bc <sdIrs()+0x28>)
    a4ae:	7019      	strb	r1, [r3, #0]
}
    a4b0:	4770      	bx	lr
    a4b2:	bf00      	nop
    a4b4:	402c0000 	.word	0x402c0000
    a4b8:	20004b60 	.word	0x20004b60
    a4bc:	200052f7 	.word	0x200052f7

0000a4c0 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a4c0:	4b06      	ldr	r3, [pc, #24]	; (a4dc <gpioMux(unsigned char)+0x1c>)
    a4c2:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a4c6:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a4ca:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a4ce:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a4d2:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a4d6:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
    a4da:	4770      	bx	lr
    a4dc:	401f8000 	.word	0x401f8000

0000a4e0 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    a4e0:	4b03      	ldr	r3, [pc, #12]	; (a4f0 <isBusyCommandComplete()+0x10>)
    a4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a4e4:	4803      	ldr	r0, [pc, #12]	; (a4f4 <isBusyCommandComplete()+0x14>)
    a4e6:	4018      	ands	r0, r3
}
    a4e8:	fab0 f080 	clz	r0, r0
    a4ec:	0940      	lsrs	r0, r0, #5
    a4ee:	4770      	bx	lr
    a4f0:	402c0000 	.word	0x402c0000
    a4f4:	000f0001 	.word	0x000f0001

0000a4f8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    a4f8:	4b02      	ldr	r3, [pc, #8]	; (a504 <isBusyCommandInhibit()+0xc>)
    a4fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    a4fc:	f000 0001 	and.w	r0, r0, #1
    a500:	4770      	bx	lr
    a502:	bf00      	nop
    a504:	402c0000 	.word	0x402c0000

0000a508 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a508:	4b03      	ldr	r3, [pc, #12]	; (a518 <isBusyDat()+0x10>)
    a50a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a50c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    a510:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a514:	4770      	bx	lr
    a516:	bf00      	nop
    a518:	402c0000 	.word	0x402c0000

0000a51c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    a51c:	4b01      	ldr	r3, [pc, #4]	; (a524 <isBusyDMA()+0x8>)
    a51e:	7818      	ldrb	r0, [r3, #0]
}
    a520:	4770      	bx	lr
    a522:	bf00      	nop
    a524:	200052f7 	.word	0x200052f7

0000a528 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    a528:	4b03      	ldr	r3, [pc, #12]	; (a538 <isBusyFifoRead()+0x10>)
    a52a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a52c:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    a530:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    a534:	4770      	bx	lr
    a536:	bf00      	nop
    a538:	402c0000 	.word	0x402c0000

0000a53c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    a53c:	4b03      	ldr	r3, [pc, #12]	; (a54c <isBusyFifoWrite()+0x10>)
    a53e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a540:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    a544:	f3c0 2080 	ubfx	r0, r0, #10, #1
    a548:	4770      	bx	lr
    a54a:	bf00      	nop
    a54c:	402c0000 	.word	0x402c0000

0000a550 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a550:	4b03      	ldr	r3, [pc, #12]	; (a560 <isBusyTransferComplete()+0x10>)
    a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a554:	4803      	ldr	r0, [pc, #12]	; (a564 <isBusyTransferComplete()+0x14>)
    a556:	4018      	ands	r0, r3
}
    a558:	fab0 f080 	clz	r0, r0
    a55c:	0940      	lsrs	r0, r0, #5
    a55e:	4770      	bx	lr
    a560:	402c0000 	.word	0x402c0000
    a564:	117f0002 	.word	0x117f0002

0000a568 <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a568:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a56a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a56e:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a572:	4b2b      	ldr	r3, [pc, #172]	; (a620 <setSdclk(unsigned long)+0xb8>)
    a574:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a576:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
    a57a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    a57e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    a582:	4b28      	ldr	r3, [pc, #160]	; (a624 <setSdclk(unsigned long)+0xbc>)
    a584:	fba3 3202 	umull	r3, r2, r3, r2
    a588:	0892      	lsrs	r2, r2, #2
    a58a:	4b27      	ldr	r3, [pc, #156]	; (a628 <setSdclk(unsigned long)+0xc0>)
    a58c:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a590:	f3c1 23c2 	ubfx	r3, r1, #11, #3
    a594:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a596:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a59a:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
    a59e:	d239      	bcs.n	a614 <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
    a5a0:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    a5a2:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a5a4:	0113      	lsls	r3, r2, #4
    a5a6:	fbbc f3f3 	udiv	r3, ip, r3
    a5aa:	4573      	cmp	r3, lr
    a5ac:	d901      	bls.n	a5b2 <setSdclk(unsigned long)+0x4a>
    a5ae:	2aff      	cmp	r2, #255	; 0xff
    a5b0:	d9f7      	bls.n	a5a2 <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a5b2:	fbbc f3f2 	udiv	r3, ip, r2
    a5b6:	459e      	cmp	lr, r3
    a5b8:	d22e      	bcs.n	a618 <setSdclk(unsigned long)+0xb0>
    a5ba:	0051      	lsls	r1, r2, #1
    a5bc:	2301      	movs	r3, #1
    dvs++;
    a5be:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a5c0:	fbbc f0f1 	udiv	r0, ip, r1
    a5c4:	4570      	cmp	r0, lr
    a5c6:	bf94      	ite	ls
    a5c8:	2000      	movls	r0, #0
    a5ca:	2001      	movhi	r0, #1
    a5cc:	2b0f      	cmp	r3, #15
    a5ce:	bf88      	it	hi
    a5d0:	2000      	movhi	r0, #0
    a5d2:	460c      	mov	r4, r1
    a5d4:	4411      	add	r1, r2
    a5d6:	2800      	cmp	r0, #0
    a5d8:	d1f1      	bne.n	a5be <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a5da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a5de:	fb01 f404 	mul.w	r4, r1, r4
    a5e2:	fbbc f4f4 	udiv	r4, ip, r4
    a5e6:	4811      	ldr	r0, [pc, #68]	; (a62c <setSdclk(unsigned long)+0xc4>)
    a5e8:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a5ea:	4811      	ldr	r0, [pc, #68]	; (a630 <setSdclk(unsigned long)+0xc8>)
    a5ec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
    a5ee:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a5f0:	011b      	lsls	r3, r3, #4
    a5f2:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a5f4:	490f      	ldr	r1, [pc, #60]	; (a634 <setSdclk(unsigned long)+0xcc>)
    a5f6:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a5f8:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a5fa:	01d2      	lsls	r2, r2, #7
    a5fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    a600:	4313      	orrs	r3, r2
    a602:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a606:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a608:	4602      	mov	r2, r0
    a60a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a60c:	f013 0f08 	tst.w	r3, #8
    a610:	d0fb      	beq.n	a60a <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a612:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
    a614:	2201      	movs	r2, #1
    a616:	e7cc      	b.n	a5b2 <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a618:	4614      	mov	r4, r2
    a61a:	2301      	movs	r3, #1
    a61c:	e7dd      	b.n	a5da <setSdclk(unsigned long)+0x72>
    a61e:	bf00      	nop
    a620:	400fc000 	.word	0x400fc000
    a624:	aaaaaaab 	.word	0xaaaaaaab
    a628:	5e69ec00 	.word	0x5e69ec00
    a62c:	20004ac4 	.word	0x20004ac4
    a630:	402c0000 	.word	0x402c0000
    a634:	fff0000f 	.word	0xfff0000f

0000a638 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    a638:	4b01      	ldr	r3, [pc, #4]	; (a640 <SdioCard::errorCode() const+0x8>)
    a63a:	7818      	ldrb	r0, [r3, #0]
    a63c:	4770      	bx	lr
    a63e:	bf00      	nop
    a640:	20003a18 	.word	0x20003a18

0000a644 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a644:	4b01      	ldr	r3, [pc, #4]	; (a64c <SdioCard::errorData() const+0x8>)
    a646:	6818      	ldr	r0, [r3, #0]
}
    a648:	4770      	bx	lr
    a64a:	bf00      	nop
    a64c:	20004b60 	.word	0x20004b60

0000a650 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a650:	b410      	push	{r4}
    a652:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    a654:	4c06      	ldr	r4, [pc, #24]	; (a670 <SdioCard::readCID(CID*)+0x20>)
    a656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a658:	f8cc 0000 	str.w	r0, [ip]
    a65c:	f8cc 1004 	str.w	r1, [ip, #4]
    a660:	f8cc 2008 	str.w	r2, [ip, #8]
    a664:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    a668:	2001      	movs	r0, #1
    a66a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a66e:	4770      	bx	lr
    a670:	20004b34 	.word	0x20004b34

0000a674 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a674:	b410      	push	{r4}
    a676:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    a678:	4c06      	ldr	r4, [pc, #24]	; (a694 <SdioCard::readCSD(csd_t*)+0x20>)
    a67a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a67c:	f8cc 0000 	str.w	r0, [ip]
    a680:	f8cc 1004 	str.w	r1, [ip, #4]
    a684:	f8cc 2008 	str.w	r2, [ip, #8]
    a688:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    a68c:	2001      	movs	r0, #1
    a68e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a692:	4770      	bx	lr
    a694:	20004b44 	.word	0x20004b44

0000a698 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a698:	4b02      	ldr	r3, [pc, #8]	; (a6a4 <SdioCard::readOCR(unsigned long*)+0xc>)
    a69a:	681b      	ldr	r3, [r3, #0]
    a69c:	600b      	str	r3, [r1, #0]
  return true;
}
    a69e:	2001      	movs	r0, #1
    a6a0:	4770      	bx	lr
    a6a2:	bf00      	nop
    a6a4:	20004b54 	.word	0x20004b54

0000a6a8 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    a6a8:	4b17      	ldr	r3, [pc, #92]	; (a708 <SdioCard::sectorCount()+0x60>)
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a6b0:	d003      	beq.n	a6ba <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
    a6b2:	2b40      	cmp	r3, #64	; 0x40
    a6b4:	d01b      	beq.n	a6ee <SdioCard::sectorCount()+0x46>
    return 0;
    a6b6:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    a6b8:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a6ba:	4a13      	ldr	r2, [pc, #76]	; (a708 <SdioCard::sectorCount()+0x60>)
    a6bc:	7993      	ldrb	r3, [r2, #6]
    a6be:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a6c2:	79d0      	ldrb	r0, [r2, #7]
    a6c4:	0080      	lsls	r0, r0, #2
    a6c6:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    a6ca:	7a13      	ldrb	r3, [r2, #8]
    a6cc:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a6d0:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a6d2:	7a53      	ldrb	r3, [r2, #9]
    a6d4:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    a6d8:	7a91      	ldrb	r1, [r2, #10]
    a6da:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a6dc:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a6e0:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a6e2:	f002 020f 	and.w	r2, r2, #15
    a6e6:	4413      	add	r3, r2
    a6e8:	3b07      	subs	r3, #7
    a6ea:	4098      	lsls	r0, r3
    a6ec:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a6ee:	4b06      	ldr	r3, [pc, #24]	; (a708 <SdioCard::sectorCount()+0x60>)
    a6f0:	79da      	ldrb	r2, [r3, #7]
    a6f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a6f6:	7a58      	ldrb	r0, [r3, #9]
    a6f8:	3001      	adds	r0, #1
    a6fa:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    a6fe:	7a1b      	ldrb	r3, [r3, #8]
    a700:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    a704:	0280      	lsls	r0, r0, #10
    a706:	4770      	bx	lr
    a708:	20004b44 	.word	0x20004b44

0000a70c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    a70c:	4b04      	ldr	r3, [pc, #16]	; (a720 <SdioCard::type() const+0x14>)
    a70e:	781b      	ldrb	r3, [r3, #0]
    a710:	b123      	cbz	r3, a71c <SdioCard::type() const+0x10>
    a712:	4b04      	ldr	r3, [pc, #16]	; (a724 <SdioCard::type() const+0x18>)
    a714:	7818      	ldrb	r0, [r3, #0]
    a716:	3002      	adds	r0, #2
    a718:	b2c0      	uxtb	r0, r0
    a71a:	4770      	bx	lr
    a71c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    a71e:	4770      	bx	lr
    a720:	200052f4 	.word	0x200052f4
    a724:	200052f5 	.word	0x200052f5

0000a728 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    a728:	4770      	bx	lr
	...

0000a72c <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a72e:	4604      	mov	r4, r0
  uint32_t m = micros();
    a730:	f002 fb38 	bl	cda4 <micros>
    a734:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a736:	4f05      	ldr	r7, [pc, #20]	; (a74c <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
    a738:	47a0      	blx	r4
    a73a:	4606      	mov	r6, r0
    a73c:	b120      	cbz	r0, a748 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a73e:	f002 fb31 	bl	cda4 <micros>
    a742:	1b40      	subs	r0, r0, r5
    a744:	42b8      	cmp	r0, r7
    a746:	d9f7      	bls.n	a738 <waitTimeout(bool (*)())+0xc>
}
    a748:	4630      	mov	r0, r6
    a74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a74c:	000f4240 	.word	0x000f4240

0000a750 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    a750:	b570      	push	{r4, r5, r6, lr}
    a752:	4604      	mov	r4, r0
    a754:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    a756:	4819      	ldr	r0, [pc, #100]	; (a7bc <cardCommand(unsigned long, unsigned long)+0x6c>)
    a758:	f7ff ffe8 	bl	a72c <waitTimeout(bool (*)())>
    a75c:	bb40      	cbnz	r0, a7b0 <cardCommand(unsigned long, unsigned long)+0x60>
    a75e:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
    a760:	4b17      	ldr	r3, [pc, #92]	; (a7c0 <cardCommand(unsigned long, unsigned long)+0x70>)
    a762:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    a764:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    a768:	d007      	beq.n	a77a <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    a76a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a76c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    a770:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    a772:	6c99      	ldr	r1, [r3, #72]	; 0x48
    a774:	b2e2      	uxtb	r2, r4
    a776:	430a      	orrs	r2, r1
    a778:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    a77a:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    a77e:	4b10      	ldr	r3, [pc, #64]	; (a7c0 <cardCommand(unsigned long, unsigned long)+0x70>)
    a780:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    a782:	4810      	ldr	r0, [pc, #64]	; (a7c4 <cardCommand(unsigned long, unsigned long)+0x74>)
    a784:	f7ff ffd2 	bl	a72c <waitTimeout(bool (*)())>
    a788:	4601      	mov	r1, r0
    a78a:	b990      	cbnz	r0, a7b2 <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
    a78c:	4a0c      	ldr	r2, [pc, #48]	; (a7c0 <cardCommand(unsigned long, unsigned long)+0x70>)
    a78e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    a790:	4b0d      	ldr	r3, [pc, #52]	; (a7c8 <cardCommand(unsigned long, unsigned long)+0x78>)
    a792:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a794:	6818      	ldr	r0, [r3, #0]
    a796:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a798:	681b      	ldr	r3, [r3, #0]
    a79a:	f013 0f01 	tst.w	r3, #1
    a79e:	d00a      	beq.n	a7b6 <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    a7a0:	4b09      	ldr	r3, [pc, #36]	; (a7c8 <cardCommand(unsigned long, unsigned long)+0x78>)
    a7a2:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a7a4:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    a7a8:	bf0c      	ite	eq
    a7aa:	2601      	moveq	r6, #1
    a7ac:	2600      	movne	r6, #0
    a7ae:	e000      	b.n	a7b2 <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
    a7b0:	2600      	movs	r6, #0
}
    a7b2:	4630      	mov	r0, r6
    a7b4:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a7b6:	460e      	mov	r6, r1
    a7b8:	e7fb      	b.n	a7b2 <cardCommand(unsigned long, unsigned long)+0x62>
    a7ba:	bf00      	nop
    a7bc:	0000a4f9 	.word	0x0000a4f9
    a7c0:	402c0000 	.word	0x402c0000
    a7c4:	0000a4e1 	.word	0x0000a4e1
    a7c8:	20004b60 	.word	0x20004b60

0000a7cc <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
    a7cc:	b510      	push	{r4, lr}
    a7ce:	b084      	sub	sp, #16
    a7d0:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
    a7d2:	4b19      	ldr	r3, [pc, #100]	; (a838 <readReg16(unsigned long, void*)+0x6c>)
    a7d4:	6819      	ldr	r1, [r3, #0]
    a7d6:	f7ff ffbb 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    a7da:	b350      	cbz	r0, a832 <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a7dc:	4b17      	ldr	r3, [pc, #92]	; (a83c <readReg16(unsigned long, void*)+0x70>)
    a7de:	691a      	ldr	r2, [r3, #16]
    a7e0:	9200      	str	r2, [sp, #0]
    a7e2:	695a      	ldr	r2, [r3, #20]
    a7e4:	9201      	str	r2, [sp, #4]
    a7e6:	699a      	ldr	r2, [r3, #24]
    a7e8:	9202      	str	r2, [sp, #8]
    a7ea:	69db      	ldr	r3, [r3, #28]
    a7ec:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    a7ee:	f104 0e0f 	add.w	lr, r4, #15
    a7f2:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    a7f4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    a7f8:	461a      	mov	r2, r3
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	bfb8      	it	lt
    a7fe:	1cda      	addlt	r2, r3, #3
    a800:	f022 0203 	bic.w	r2, r2, #3
    a804:	3210      	adds	r2, #16
    a806:	446a      	add	r2, sp
    a808:	4259      	negs	r1, r3
    a80a:	f003 0c03 	and.w	ip, r3, #3
    a80e:	f001 0103 	and.w	r1, r1, #3
    a812:	bf58      	it	pl
    a814:	f1c1 0c00 	rsbpl	ip, r1, #0
    a818:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a81c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    a820:	fa22 f20c 	lsr.w	r2, r2, ip
    a824:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
    a828:	3301      	adds	r3, #1
    a82a:	2b0f      	cmp	r3, #15
    a82c:	d1e2      	bne.n	a7f4 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    a82e:	2300      	movs	r3, #0
    a830:	73e3      	strb	r3, [r4, #15]
}
    a832:	b004      	add	sp, #16
    a834:	bd10      	pop	{r4, pc}
    a836:	bf00      	nop
    a838:	20004b58 	.word	0x20004b58
    a83c:	402c0000 	.word	0x402c0000

0000a840 <statusCMD13()>:
static uint32_t statusCMD13() {
    a840:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a842:	4b05      	ldr	r3, [pc, #20]	; (a858 <statusCMD13()+0x18>)
    a844:	6819      	ldr	r1, [r3, #0]
    a846:	4805      	ldr	r0, [pc, #20]	; (a85c <statusCMD13()+0x1c>)
    a848:	f7ff ff82 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    a84c:	b110      	cbz	r0, a854 <statusCMD13()+0x14>
    a84e:	4b04      	ldr	r3, [pc, #16]	; (a860 <statusCMD13()+0x20>)
    a850:	6918      	ldr	r0, [r3, #16]
}
    a852:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a854:	2000      	movs	r0, #0
    a856:	e7fc      	b.n	a852 <statusCMD13()+0x12>
    a858:	20004b58 	.word	0x20004b58
    a85c:	0d1a0000 	.word	0x0d1a0000
    a860:	402c0000 	.word	0x402c0000

0000a864 <isBusyCMD13()>:
static bool isBusyCMD13() {
    a864:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    a866:	f7ff ffeb 	bl	a840 <statusCMD13()>
    a86a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
    a86e:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a872:	bd08      	pop	{r3, pc}

0000a874 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    a874:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
    a876:	7a03      	ldrb	r3, [r0, #8]
    a878:	f013 0f01 	tst.w	r3, #1
    a87c:	d00b      	beq.n	a896 <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a87e:	4b0c      	ldr	r3, [pc, #48]	; (a8b0 <SdioCard::isBusy()+0x3c>)
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	b10b      	cbz	r3, a888 <SdioCard::isBusy()+0x14>
    a884:	4798      	blx	r3
}
    a886:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a888:	4b0a      	ldr	r3, [pc, #40]	; (a8b4 <SdioCard::isBusy()+0x40>)
    a88a:	7818      	ldrb	r0, [r3, #0]
    a88c:	2800      	cmp	r0, #0
    a88e:	d0fa      	beq.n	a886 <SdioCard::isBusy()+0x12>
    a890:	f7ff ffe8 	bl	a864 <isBusyCMD13()>
    a894:	e7f7      	b.n	a886 <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
    a896:	4b08      	ldr	r3, [pc, #32]	; (a8b8 <SdioCard::isBusy()+0x44>)
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	b933      	cbnz	r3, a8aa <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a89c:	4b07      	ldr	r3, [pc, #28]	; (a8bc <SdioCard::isBusy()+0x48>)
    a89e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a8a0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    a8a4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a8a8:	e7ed      	b.n	a886 <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
    a8aa:	f7ff fe51 	bl	a550 <isBusyTransferComplete()>
    a8ae:	e7ea      	b.n	a886 <SdioCard::isBusy()+0x12>
    a8b0:	20004b5c 	.word	0x20004b5c
    a8b4:	200052f3 	.word	0x200052f3
    a8b8:	200052f6 	.word	0x200052f6
    a8bc:	402c0000 	.word	0x402c0000

0000a8c0 <SdioCard::status()>:
uint32_t SdioCard::status() {
    a8c0:	b508      	push	{r3, lr}
  return statusCMD13();
    a8c2:	f7ff ffbd 	bl	a840 <statusCMD13()>
}
    a8c6:	bd08      	pop	{r3, pc}

0000a8c8 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a8c8:	b538      	push	{r3, r4, r5, lr}
    a8ca:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    a8cc:	4b2a      	ldr	r3, [pc, #168]	; (a978 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    a8ce:	7a9b      	ldrb	r3, [r3, #10]
    a8d0:	f013 0f40 	tst.w	r3, #64	; 0x40
    a8d4:	d113      	bne.n	a8fe <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    a8d6:	4a28      	ldr	r2, [pc, #160]	; (a978 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    a8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a8dc:	7ad2      	ldrb	r2, [r2, #11]
    a8de:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a8e0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a8e4:	1c62      	adds	r2, r4, #1
    a8e6:	430a      	orrs	r2, r1
    a8e8:	4213      	tst	r3, r2
    a8ea:	d008      	beq.n	a8fe <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    a8ec:	4b23      	ldr	r3, [pc, #140]	; (a97c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a8ee:	2227      	movs	r2, #39	; 0x27
    a8f0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a8f2:	4b23      	ldr	r3, [pc, #140]	; (a980 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a8f4:	f240 22e3 	movw	r2, #739	; 0x2e3
    a8f8:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    a8fa:	2500      	movs	r5, #0
    a8fc:	e010      	b.n	a920 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
    a8fe:	4b21      	ldr	r3, [pc, #132]	; (a984 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    a900:	781b      	ldrb	r3, [r3, #0]
    a902:	b90b      	cbnz	r3, a908 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    a904:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    a906:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    a908:	481f      	ldr	r0, [pc, #124]	; (a988 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    a90a:	f7ff ff21 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    a90e:	4605      	mov	r5, r0
    a910:	b940      	cbnz	r0, a924 <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
    a912:	4b1a      	ldr	r3, [pc, #104]	; (a97c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a914:	220f      	movs	r2, #15
    a916:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a918:	4b19      	ldr	r3, [pc, #100]	; (a980 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a91a:	f240 22eb 	movw	r2, #747	; 0x2eb
    a91e:	601a      	str	r2, [r3, #0]
}
    a920:	4628      	mov	r0, r5
    a922:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    a924:	4621      	mov	r1, r4
    a926:	4819      	ldr	r0, [pc, #100]	; (a98c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    a928:	f7ff ff12 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    a92c:	4605      	mov	r5, r0
    a92e:	b938      	cbnz	r0, a940 <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
    a930:	4b12      	ldr	r3, [pc, #72]	; (a97c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a932:	2210      	movs	r2, #16
    a934:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a936:	4b12      	ldr	r3, [pc, #72]	; (a980 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a938:	f240 22ee 	movw	r2, #750	; 0x2ee
    a93c:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
    a93e:	e7ef      	b.n	a920 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    a940:	2100      	movs	r1, #0
    a942:	4813      	ldr	r0, [pc, #76]	; (a990 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    a944:	f7ff ff04 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    a948:	4605      	mov	r5, r0
    a94a:	b938      	cbnz	r0, a95c <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
    a94c:	4b0b      	ldr	r3, [pc, #44]	; (a97c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a94e:	2211      	movs	r2, #17
    a950:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a952:	4b0b      	ldr	r3, [pc, #44]	; (a980 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a954:	f240 22f1 	movw	r2, #753	; 0x2f1
    a958:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    a95a:	e7e1      	b.n	a920 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
    a95c:	480d      	ldr	r0, [pc, #52]	; (a994 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    a95e:	f7ff fee5 	bl	a72c <waitTimeout(bool (*)())>
    a962:	2800      	cmp	r0, #0
    a964:	d0dc      	beq.n	a920 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    a966:	4b05      	ldr	r3, [pc, #20]	; (a97c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a968:	2228      	movs	r2, #40	; 0x28
    a96a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a96c:	4b04      	ldr	r3, [pc, #16]	; (a980 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a96e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    a972:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    a974:	2500      	movs	r5, #0
    a976:	e7d3      	b.n	a920 <SdioCard::erase(unsigned long, unsigned long)+0x58>
    a978:	20004b44 	.word	0x20004b44
    a97c:	20003a18 	.word	0x20003a18
    a980:	20004b30 	.word	0x20004b30
    a984:	200052f5 	.word	0x200052f5
    a988:	201a0000 	.word	0x201a0000
    a98c:	211a0000 	.word	0x211a0000
    a990:	261b0000 	.word	0x261b0000
    a994:	0000a865 	.word	0x0000a865

0000a998 <waitTransferComplete()>:
static bool waitTransferComplete() {
    a998:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    a99a:	4b10      	ldr	r3, [pc, #64]	; (a9dc <waitTransferComplete()+0x44>)
    a99c:	781c      	ldrb	r4, [r3, #0]
    a99e:	b914      	cbnz	r4, a9a6 <waitTransferComplete()+0xe>
    return true;
    a9a0:	2401      	movs	r4, #1
}
    a9a2:	4620      	mov	r0, r4
    a9a4:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    a9a6:	480e      	ldr	r0, [pc, #56]	; (a9e0 <waitTransferComplete()+0x48>)
    a9a8:	f7ff fec0 	bl	a72c <waitTimeout(bool (*)())>
  m_transferActive = false;
    a9ac:	4b0b      	ldr	r3, [pc, #44]	; (a9dc <waitTransferComplete()+0x44>)
    a9ae:	2200      	movs	r2, #0
    a9b0:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
    a9b2:	4b0c      	ldr	r3, [pc, #48]	; (a9e4 <waitTransferComplete()+0x4c>)
    a9b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    a9b6:	4a0c      	ldr	r2, [pc, #48]	; (a9e8 <waitTransferComplete()+0x50>)
    a9b8:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a9ba:	6812      	ldr	r2, [r2, #0]
    a9bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    a9be:	b920      	cbnz	r0, a9ca <waitTransferComplete()+0x32>
    a9c0:	4b09      	ldr	r3, [pc, #36]	; (a9e8 <waitTransferComplete()+0x50>)
    a9c2:	681a      	ldr	r2, [r3, #0]
    a9c4:	4b09      	ldr	r3, [pc, #36]	; (a9ec <waitTransferComplete()+0x54>)
    a9c6:	421a      	tst	r2, r3
    a9c8:	d0eb      	beq.n	a9a2 <waitTransferComplete()+0xa>
  m_errorCode = code;
    a9ca:	4b09      	ldr	r3, [pc, #36]	; (a9f0 <waitTransferComplete()+0x58>)
    a9cc:	221f      	movs	r2, #31
    a9ce:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a9d0:	4b08      	ldr	r3, [pc, #32]	; (a9f4 <waitTransferComplete()+0x5c>)
    a9d2:	f240 227a 	movw	r2, #634	; 0x27a
    a9d6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    a9d8:	2400      	movs	r4, #0
    a9da:	e7e2      	b.n	a9a2 <waitTransferComplete()+0xa>
    a9dc:	200052f6 	.word	0x200052f6
    a9e0:	0000a551 	.word	0x0000a551
    a9e4:	402c0000 	.word	0x402c0000
    a9e8:	20004b60 	.word	0x20004b60
    a9ec:	117f0000 	.word	0x117f0000
    a9f0:	20003a18 	.word	0x20003a18
    a9f4:	20004b30 	.word	0x20004b30

0000a9f8 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    a9f8:	b538      	push	{r3, r4, r5, lr}
    a9fa:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    a9fc:	f7ff ffcc 	bl	a998 <waitTransferComplete()>
    aa00:	4604      	mov	r4, r0
    aa02:	b1f0      	cbz	r0, aa42 <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    aa04:	4b1c      	ldr	r3, [pc, #112]	; (aa78 <SdioCard::writeData(unsigned char const*)+0x80>)
    aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aa08:	f413 7f80 	tst.w	r3, #256	; 0x100
    aa0c:	d108      	bne.n	aa20 <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    aa0e:	4b1a      	ldr	r3, [pc, #104]	; (aa78 <SdioCard::writeData(unsigned char const*)+0x80>)
    aa10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aa12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    aa16:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    aa18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aa1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    aa1e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    aa20:	4a15      	ldr	r2, [pc, #84]	; (aa78 <SdioCard::writeData(unsigned char const*)+0x80>)
    aa22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    aa24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    aa28:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    aa2a:	4814      	ldr	r0, [pc, #80]	; (aa7c <SdioCard::writeData(unsigned char const*)+0x84>)
    aa2c:	f7ff fe7e 	bl	a72c <waitTimeout(bool (*)())>
    aa30:	b148      	cbz	r0, aa46 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
    aa32:	4b13      	ldr	r3, [pc, #76]	; (aa80 <SdioCard::writeData(unsigned char const*)+0x88>)
    aa34:	2221      	movs	r2, #33	; 0x21
    aa36:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aa38:	4b12      	ldr	r3, [pc, #72]	; (aa84 <SdioCard::writeData(unsigned char const*)+0x8c>)
    aa3a:	f240 32d9 	movw	r2, #985	; 0x3d9
    aa3e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    aa40:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    aa42:	4620      	mov	r0, r4
    aa44:	bd38      	pop	{r3, r4, r5, pc}
    aa46:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    aa4a:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    aa4e:	480a      	ldr	r0, [pc, #40]	; (aa78 <SdioCard::writeData(unsigned char const*)+0x80>)
    aa50:	6a43      	ldr	r3, [r0, #36]	; 0x24
    aa52:	f413 6f80 	tst.w	r3, #1024	; 0x400
    aa56:	d0fb      	beq.n	aa50 <SdioCard::writeData(unsigned char const*)+0x58>
    aa58:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
    aa5c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    aa60:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    aa62:	4563      	cmp	r3, ip
    aa64:	d1fa      	bne.n	aa5c <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    aa66:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    aa6a:	458c      	cmp	ip, r1
    aa6c:	d1f0      	bne.n	aa50 <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
    aa6e:	4b06      	ldr	r3, [pc, #24]	; (aa88 <SdioCard::writeData(unsigned char const*)+0x90>)
    aa70:	2201      	movs	r2, #1
    aa72:	701a      	strb	r2, [r3, #0]
  return true;
    aa74:	e7e5      	b.n	aa42 <SdioCard::writeData(unsigned char const*)+0x4a>
    aa76:	bf00      	nop
    aa78:	402c0000 	.word	0x402c0000
    aa7c:	0000a53d 	.word	0x0000a53d
    aa80:	20003a18 	.word	0x20003a18
    aa84:	20004b30 	.word	0x20004b30
    aa88:	200052f6 	.word	0x200052f6

0000aa8c <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa8e:	4604      	mov	r4, r0
  m_busyFcn = fcn;
    aa90:	4b0a      	ldr	r3, [pc, #40]	; (aabc <yieldTimeout(bool (*)())+0x30>)
    aa92:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
    aa94:	f002 f986 	bl	cda4 <micros>
    aa98:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aa9a:	4f09      	ldr	r7, [pc, #36]	; (aac0 <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
    aa9c:	e001      	b.n	aaa2 <yieldTimeout(bool (*)())+0x16>
    yield();
    aa9e:	f004 f89f 	bl	ebe0 <yield>
  while (fcn()) {
    aaa2:	47a0      	blx	r4
    aaa4:	4606      	mov	r6, r0
    aaa6:	b120      	cbz	r0, aab2 <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aaa8:	f002 f97c 	bl	cda4 <micros>
    aaac:	1b40      	subs	r0, r0, r5
    aaae:	42b8      	cmp	r0, r7
    aab0:	d9f5      	bls.n	aa9e <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
    aab2:	4b02      	ldr	r3, [pc, #8]	; (aabc <yieldTimeout(bool (*)())+0x30>)
    aab4:	2200      	movs	r2, #0
    aab6:	601a      	str	r2, [r3, #0]
}
    aab8:	4630      	mov	r0, r6
    aaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aabc:	20004b5c 	.word	0x20004b5c
    aac0:	000f4240 	.word	0x000f4240

0000aac4 <waitDmaStatus()>:
static bool waitDmaStatus() {
    aac4:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    aac6:	4809      	ldr	r0, [pc, #36]	; (aaec <waitDmaStatus()+0x28>)
    aac8:	f7ff ffe0 	bl	aa8c <yieldTimeout(bool (*)())>
    aacc:	b960      	cbnz	r0, aae8 <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    aace:	4b08      	ldr	r3, [pc, #32]	; (aaf0 <waitDmaStatus()+0x2c>)
    aad0:	681b      	ldr	r3, [r3, #0]
    aad2:	f013 0f02 	tst.w	r3, #2
    aad6:	d008      	beq.n	aaea <waitDmaStatus()+0x26>
    aad8:	4b05      	ldr	r3, [pc, #20]	; (aaf0 <waitDmaStatus()+0x2c>)
    aada:	681a      	ldr	r2, [r3, #0]
    aadc:	4b05      	ldr	r3, [pc, #20]	; (aaf4 <waitDmaStatus()+0x30>)
    aade:	421a      	tst	r2, r3
    aae0:	bf0c      	ite	eq
    aae2:	2001      	moveq	r0, #1
    aae4:	2000      	movne	r0, #0
    aae6:	e000      	b.n	aaea <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
    aae8:	2000      	movs	r0, #0
}
    aaea:	bd08      	pop	{r3, pc}
    aaec:	0000a51d 	.word	0x0000a51d
    aaf0:	20004b60 	.word	0x20004b60
    aaf4:	117f0000 	.word	0x117f0000

0000aaf8 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    aaf8:	b538      	push	{r3, r4, r5, lr}
    aafa:	4605      	mov	r5, r0
    aafc:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
    aafe:	4819      	ldr	r0, [pc, #100]	; (ab64 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    ab00:	f7ff fe14 	bl	a72c <waitTimeout(bool (*)())>
    ab04:	b140      	cbz	r0, ab18 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    ab06:	4b18      	ldr	r3, [pc, #96]	; (ab68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ab08:	220a      	movs	r2, #10
    ab0a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab0c:	4b17      	ldr	r3, [pc, #92]	; (ab6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ab0e:	f44f 72cc 	mov.w	r2, #408	; 0x198
    ab12:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    ab14:	2000      	movs	r0, #0
}
    ab16:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    ab18:	4b15      	ldr	r3, [pc, #84]	; (ab70 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    ab1a:	2201      	movs	r2, #1
    ab1c:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    ab1e:	4b15      	ldr	r3, [pc, #84]	; (ab74 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    ab20:	2200      	movs	r2, #0
    ab22:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    ab24:	4b14      	ldr	r3, [pc, #80]	; (ab78 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    ab26:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    ab28:	4a14      	ldr	r2, [pc, #80]	; (ab7c <cardCMD6(unsigned long, unsigned char*)+0x84>)
    ab2a:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    ab2c:	4a14      	ldr	r2, [pc, #80]	; (ab80 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    ab2e:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    ab30:	4629      	mov	r1, r5
    ab32:	4814      	ldr	r0, [pc, #80]	; (ab84 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    ab34:	f7ff fe0c 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    ab38:	b938      	cbnz	r0, ab4a <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    ab3a:	4b0b      	ldr	r3, [pc, #44]	; (ab68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ab3c:	2204      	movs	r2, #4
    ab3e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab40:	4b0a      	ldr	r3, [pc, #40]	; (ab6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ab42:	f240 129f 	movw	r2, #415	; 0x19f
    ab46:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
    ab48:	e7e5      	b.n	ab16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    ab4a:	f7ff ffbb 	bl	aac4 <waitDmaStatus()>
    ab4e:	2800      	cmp	r0, #0
    ab50:	d1e1      	bne.n	ab16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    ab52:	4b05      	ldr	r3, [pc, #20]	; (ab68 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ab54:	2225      	movs	r2, #37	; 0x25
    ab56:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab58:	4b04      	ldr	r3, [pc, #16]	; (ab6c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ab5a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    ab5e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    ab60:	e7d9      	b.n	ab16 <cardCMD6(unsigned long, unsigned char*)+0x1e>
    ab62:	bf00      	nop
    ab64:	0000a865 	.word	0x0000a865
    ab68:	20003a18 	.word	0x20003a18
    ab6c:	20004b30 	.word	0x20004b30
    ab70:	200052f7 	.word	0x200052f7
    ab74:	20004b60 	.word	0x20004b60
    ab78:	402c0000 	.word	0x402c0000
    ab7c:	00010040 	.word	0x00010040
    ab80:	117f0002 	.word	0x117f0002
    ab84:	063a0011 	.word	0x063a0011

0000ab88 <transferStop()>:
static bool transferStop() {
    ab88:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ab8a:	4a19      	ldr	r2, [pc, #100]	; (abf0 <transferStop()+0x68>)
    ab8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ab8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ab92:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ab94:	2100      	movs	r1, #0
    ab96:	4817      	ldr	r0, [pc, #92]	; (abf4 <transferStop()+0x6c>)
    ab98:	f7ff fdda 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    ab9c:	4604      	mov	r4, r0
    ab9e:	b940      	cbnz	r0, abb2 <transferStop()+0x2a>
  m_errorCode = code;
    aba0:	4b15      	ldr	r3, [pc, #84]	; (abf8 <transferStop()+0x70>)
    aba2:	2209      	movs	r2, #9
    aba4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aba6:	4b15      	ldr	r3, [pc, #84]	; (abfc <transferStop()+0x74>)
    aba8:	f240 223d 	movw	r2, #573	; 0x23d
    abac:	601a      	str	r2, [r3, #0]
}
    abae:	4620      	mov	r0, r4
    abb0:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
    abb2:	4813      	ldr	r0, [pc, #76]	; (ac00 <transferStop()+0x78>)
    abb4:	f7ff ff6a 	bl	aa8c <yieldTimeout(bool (*)())>
    abb8:	b140      	cbz	r0, abcc <transferStop()+0x44>
  m_errorCode = code;
    abba:	4b0f      	ldr	r3, [pc, #60]	; (abf8 <transferStop()+0x70>)
    abbc:	220a      	movs	r2, #10
    abbe:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    abc0:	4b0e      	ldr	r3, [pc, #56]	; (abfc <transferStop()+0x74>)
    abc2:	f44f 7210 	mov.w	r2, #576	; 0x240
    abc6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    abc8:	2400      	movs	r4, #0
    abca:	e7f0      	b.n	abae <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    abcc:	4b08      	ldr	r3, [pc, #32]	; (abf0 <transferStop()+0x68>)
    abce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    abd0:	f013 0f02 	tst.w	r3, #2
    abd4:	d0eb      	beq.n	abae <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    abd6:	4b06      	ldr	r3, [pc, #24]	; (abf0 <transferStop()+0x68>)
    abd8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    abda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    abdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    abe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    abe2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    abe6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    abe8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    abea:	629a      	str	r2, [r3, #40]	; 0x28
    abec:	e7df      	b.n	abae <transferStop()+0x26>
    abee:	bf00      	nop
    abf0:	402c0000 	.word	0x402c0000
    abf4:	0cdb0000 	.word	0x0cdb0000
    abf8:	20003a18 	.word	0x20003a18
    abfc:	20004b30 	.word	0x20004b30
    ac00:	0000a509 	.word	0x0000a509

0000ac04 <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    ac04:	b508      	push	{r3, lr}
  return transferStop();
    ac06:	f7ff ffbf 	bl	ab88 <transferStop()>
}
    ac0a:	bd08      	pop	{r3, pc}

0000ac0c <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
    ac0c:	b510      	push	{r4, lr}
    ac0e:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    ac10:	4813      	ldr	r0, [pc, #76]	; (ac60 <SdioCard::writeStart(unsigned long)+0x54>)
    ac12:	f7ff ff3b 	bl	aa8c <yieldTimeout(bool (*)())>
    ac16:	b140      	cbz	r0, ac2a <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    ac18:	4b12      	ldr	r3, [pc, #72]	; (ac64 <SdioCard::writeStart(unsigned long)+0x58>)
    ac1a:	220a      	movs	r2, #10
    ac1c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac1e:	4b12      	ldr	r3, [pc, #72]	; (ac68 <SdioCard::writeStart(unsigned long)+0x5c>)
    ac20:	f240 422c 	movw	r2, #1068	; 0x42c
    ac24:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    ac26:	2000      	movs	r0, #0
}
    ac28:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ac2a:	4b10      	ldr	r3, [pc, #64]	; (ac6c <SdioCard::writeStart(unsigned long)+0x60>)
    ac2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ac2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ac32:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ac34:	f44f 7200 	mov.w	r2, #512	; 0x200
    ac38:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ac3a:	4b0d      	ldr	r3, [pc, #52]	; (ac70 <SdioCard::writeStart(unsigned long)+0x64>)
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	b903      	cbnz	r3, ac42 <SdioCard::writeStart(unsigned long)+0x36>
    ac40:	0264      	lsls	r4, r4, #9
    ac42:	4621      	mov	r1, r4
    ac44:	480b      	ldr	r0, [pc, #44]	; (ac74 <SdioCard::writeStart(unsigned long)+0x68>)
    ac46:	f7ff fd83 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    ac4a:	2800      	cmp	r0, #0
    ac4c:	d1ec      	bne.n	ac28 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    ac4e:	4b05      	ldr	r3, [pc, #20]	; (ac64 <SdioCard::writeStart(unsigned long)+0x58>)
    ac50:	220e      	movs	r2, #14
    ac52:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac54:	4b04      	ldr	r3, [pc, #16]	; (ac68 <SdioCard::writeStart(unsigned long)+0x5c>)
    ac56:	f44f 6287 	mov.w	r2, #1080	; 0x438
    ac5a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    ac5c:	e7e4      	b.n	ac28 <SdioCard::writeStart(unsigned long)+0x1c>
    ac5e:	bf00      	nop
    ac60:	0000a865 	.word	0x0000a865
    ac64:	20003a18 	.word	0x20003a18
    ac68:	20004b30 	.word	0x20004b30
    ac6c:	402c0000 	.word	0x402c0000
    ac70:	200052f5 	.word	0x200052f5
    ac74:	193a0020 	.word	0x193a0020

0000ac78 <SdioCard::~SdioCard()>:
    ac78:	b510      	push	{r4, lr}
    ac7a:	4604      	mov	r4, r0
    ac7c:	210c      	movs	r1, #12
    ac7e:	f002 f9ed 	bl	d05c <operator delete(void*, unsigned int)>
    ac82:	4620      	mov	r0, r4
    ac84:	bd10      	pop	{r4, pc}
	...

0000ac88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    ac88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac8c:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    ac8e:	f012 0203 	ands.w	r2, r2, #3
    ac92:	bf18      	it	ne
    ac94:	2201      	movne	r2, #1
    ac96:	2b00      	cmp	r3, #0
    ac98:	bf14      	ite	ne
    ac9a:	4615      	movne	r5, r2
    ac9c:	f042 0501 	orreq.w	r5, r2, #1
    aca0:	b155      	cbz	r5, acb8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
    aca2:	4b1c      	ldr	r3, [pc, #112]	; (ad14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    aca4:	2225      	movs	r2, #37	; 0x25
    aca6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aca8:	4b1b      	ldr	r3, [pc, #108]	; (ad18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    acaa:	f240 12f5 	movw	r2, #501	; 0x1f5
    acae:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    acb0:	2500      	movs	r5, #0
}
    acb2:	4628      	mov	r0, r5
    acb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acb8:	4607      	mov	r7, r0
    acba:	460e      	mov	r6, r1
    acbc:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
    acbe:	4817      	ldr	r0, [pc, #92]	; (ad1c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    acc0:	f7ff fee4 	bl	aa8c <yieldTimeout(bool (*)())>
    acc4:	b138      	cbz	r0, acd6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
    acc6:	4b13      	ldr	r3, [pc, #76]	; (ad14 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    acc8:	220a      	movs	r2, #10
    acca:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    accc:	4b12      	ldr	r3, [pc, #72]	; (ad18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    acce:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    acd2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    acd4:	e7ed      	b.n	acb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
    acd6:	4b12      	ldr	r3, [pc, #72]	; (ad20 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    acd8:	2201      	movs	r2, #1
    acda:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    acdc:	4b11      	ldr	r3, [pc, #68]	; (ad24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    acde:	2200      	movs	r2, #0
    ace0:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
    ace2:	4a11      	ldr	r2, [pc, #68]	; (ad28 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    ace4:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    ace6:	4b11      	ldr	r3, [pc, #68]	; (ad2c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    ace8:	ea03 4308 	and.w	r3, r3, r8, lsl #16
    acec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    acf0:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    acf2:	4b0f      	ldr	r3, [pc, #60]	; (ad30 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
    acf4:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    acf6:	4b0f      	ldr	r3, [pc, #60]	; (ad34 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    acf8:	781b      	ldrb	r3, [r3, #0]
    acfa:	b903      	cbnz	r3, acfe <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
    acfc:	0276      	lsls	r6, r6, #9
    acfe:	4631      	mov	r1, r6
    ad00:	4638      	mov	r0, r7
    ad02:	f7ff fd25 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    ad06:	4605      	mov	r5, r0
    ad08:	2800      	cmp	r0, #0
    ad0a:	d0d2      	beq.n	acb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
    ad0c:	f7ff feda 	bl	aac4 <waitDmaStatus()>
    ad10:	4605      	mov	r5, r0
    ad12:	e7ce      	b.n	acb2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
    ad14:	20003a18 	.word	0x20003a18
    ad18:	20004b30 	.word	0x20004b30
    ad1c:	0000a865 	.word	0x0000a865
    ad20:	200052f7 	.word	0x200052f7
    ad24:	20004b60 	.word	0x20004b60
    ad28:	402c0000 	.word	0x402c0000
    ad2c:	1fff0000 	.word	0x1fff0000
    ad30:	117f0002 	.word	0x117f0002
    ad34:	200052f5 	.word	0x200052f5

0000ad38 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad3a:	4606      	mov	r6, r0
    ad3c:	460c      	mov	r4, r1
    ad3e:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    ad40:	7a02      	ldrb	r2, [r0, #8]
    ad42:	f012 0f01 	tst.w	r2, #1
    ad46:	d112      	bne.n	ad6e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    ad48:	b17b      	cbz	r3, ad6a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    ad4a:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
    ad4c:	6833      	ldr	r3, [r6, #0]
    ad4e:	691b      	ldr	r3, [r3, #16]
    ad50:	462a      	mov	r2, r5
    ad52:	4621      	mov	r1, r4
    ad54:	4630      	mov	r0, r6
    ad56:	4798      	blx	r3
    ad58:	4603      	mov	r3, r0
    ad5a:	b120      	cbz	r0, ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    ad5c:	3401      	adds	r4, #1
    ad5e:	f505 7500 	add.w	r5, r5, #512	; 0x200
    ad62:	42a7      	cmp	r7, r4
    ad64:	d1f2      	bne.n	ad4c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
    ad66:	4618      	mov	r0, r3
    ad68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    ad6a:	2301      	movs	r3, #1
    ad6c:	e7fb      	b.n	ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
    ad6e:	f015 0f03 	tst.w	r5, #3
    ad72:	d010      	beq.n	ad96 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    ad74:	b1f3      	cbz	r3, adb4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    ad76:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
    ad78:	6833      	ldr	r3, [r6, #0]
    ad7a:	691b      	ldr	r3, [r3, #16]
    ad7c:	462a      	mov	r2, r5
    ad7e:	4621      	mov	r1, r4
    ad80:	4630      	mov	r0, r6
    ad82:	4798      	blx	r3
    ad84:	4603      	mov	r3, r0
    ad86:	2800      	cmp	r0, #0
    ad88:	d0ed      	beq.n	ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    ad8a:	3401      	adds	r4, #1
    ad8c:	f505 7500 	add.w	r5, r5, #512	; 0x200
    ad90:	42bc      	cmp	r4, r7
    ad92:	d1f1      	bne.n	ad78 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
    ad94:	e7e7      	b.n	ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    ad96:	462a      	mov	r2, r5
    ad98:	4807      	ldr	r0, [pc, #28]	; (adb8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    ad9a:	f7ff ff75 	bl	ac88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ad9e:	4603      	mov	r3, r0
    ada0:	2800      	cmp	r0, #0
    ada2:	d1e0      	bne.n	ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
    ada4:	4a05      	ldr	r2, [pc, #20]	; (adbc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    ada6:	210c      	movs	r1, #12
    ada8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    adaa:	4a05      	ldr	r2, [pc, #20]	; (adc0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
    adac:	f240 3182 	movw	r1, #898	; 0x382
    adb0:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    adb2:	e7d8      	b.n	ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
    adb4:	2301      	movs	r3, #1
    adb6:	e7d6      	b.n	ad66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    adb8:	123a0037 	.word	0x123a0037
    adbc:	20003a18 	.word	0x20003a18
    adc0:	20004b30 	.word	0x20004b30

0000adc4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    adc4:	b570      	push	{r4, r5, r6, lr}
    adc6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    adca:	460e      	mov	r6, r1
    adcc:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    adce:	7a03      	ldrb	r3, [r0, #8]
    add0:	f013 0f01 	tst.w	r3, #1
    add4:	d01c      	beq.n	ae10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    add6:	f012 0f03 	tst.w	r2, #3
    adda:	d006      	beq.n	adea <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    addc:	f44f 7200 	mov.w	r2, #512	; 0x200
    ade0:	4629      	mov	r1, r5
    ade2:	4668      	mov	r0, sp
    ade4:	f002 f89c 	bl	cf20 <memcpy>
      ptr = aligned;
    ade8:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    adea:	2301      	movs	r3, #1
    adec:	462a      	mov	r2, r5
    adee:	4631      	mov	r1, r6
    adf0:	481d      	ldr	r0, [pc, #116]	; (ae68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    adf2:	f7ff ff49 	bl	ac88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    adf6:	4603      	mov	r3, r0
    adf8:	b930      	cbnz	r0, ae08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    adfa:	4a1c      	ldr	r2, [pc, #112]	; (ae6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
    adfc:	210d      	movs	r1, #13
    adfe:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ae00:	4a1b      	ldr	r2, [pc, #108]	; (ae70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    ae02:	f240 31f2 	movw	r1, #1010	; 0x3f2
    ae06:	6011      	str	r1, [r2, #0]
}
    ae08:	4618      	mov	r0, r3
    ae0a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ae0e:	bd70      	pop	{r4, r5, r6, pc}
    ae10:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    ae12:	f7ff fdc1 	bl	a998 <waitTransferComplete()>
    ae16:	4603      	mov	r3, r0
    ae18:	2800      	cmp	r0, #0
    ae1a:	d0f5      	beq.n	ae08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    ae1c:	7a63      	ldrb	r3, [r4, #9]
    ae1e:	2b02      	cmp	r3, #2
    ae20:	d01d      	beq.n	ae5e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    ae22:	6823      	ldr	r3, [r4, #0]
    ae24:	6a1b      	ldr	r3, [r3, #32]
    ae26:	4620      	mov	r0, r4
    ae28:	4798      	blx	r3
    ae2a:	4603      	mov	r3, r0
    ae2c:	2800      	cmp	r0, #0
    ae2e:	d0eb      	beq.n	ae08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    ae30:	6823      	ldr	r3, [r4, #0]
    ae32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ae34:	4631      	mov	r1, r6
    ae36:	4620      	mov	r0, r4
    ae38:	4798      	blx	r3
    ae3a:	4603      	mov	r3, r0
    ae3c:	2800      	cmp	r0, #0
    ae3e:	d0e3      	beq.n	ae08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
    ae40:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    ae42:	2302      	movs	r3, #2
    ae44:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
    ae46:	6823      	ldr	r3, [r4, #0]
    ae48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    ae4a:	4629      	mov	r1, r5
    ae4c:	4620      	mov	r0, r4
    ae4e:	4798      	blx	r3
    ae50:	4603      	mov	r3, r0
    ae52:	2800      	cmp	r0, #0
    ae54:	d0d8      	beq.n	ae08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    ae56:	6862      	ldr	r2, [r4, #4]
    ae58:	3201      	adds	r2, #1
    ae5a:	6062      	str	r2, [r4, #4]
    ae5c:	e7d4      	b.n	ae08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    ae5e:	6863      	ldr	r3, [r4, #4]
    ae60:	42b3      	cmp	r3, r6
    ae62:	d1de      	bne.n	ae22 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    ae64:	e7ef      	b.n	ae46 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
    ae66:	bf00      	nop
    ae68:	183a0001 	.word	0x183a0001
    ae6c:	20003a18 	.word	0x20003a18
    ae70:	20004b30 	.word	0x20004b30

0000ae74 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae76:	4606      	mov	r6, r0
    ae78:	460c      	mov	r4, r1
    ae7a:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    ae7c:	7a02      	ldrb	r2, [r0, #8]
    ae7e:	f012 0f01 	tst.w	r2, #1
    ae82:	d112      	bne.n	aeaa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    ae84:	b17b      	cbz	r3, aea6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    ae86:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
    ae88:	6833      	ldr	r3, [r6, #0]
    ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ae8c:	462a      	mov	r2, r5
    ae8e:	4621      	mov	r1, r4
    ae90:	4630      	mov	r0, r6
    ae92:	4798      	blx	r3
    ae94:	4603      	mov	r3, r0
    ae96:	b120      	cbz	r0, aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    ae98:	3401      	adds	r4, #1
    ae9a:	f505 7500 	add.w	r5, r5, #512	; 0x200
    ae9e:	42a7      	cmp	r7, r4
    aea0:	d1f2      	bne.n	ae88 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
    aea2:	4618      	mov	r0, r3
    aea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    aea6:	2301      	movs	r3, #1
    aea8:	e7fb      	b.n	aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
    aeaa:	f015 0f03 	tst.w	r5, #3
    aeae:	d010      	beq.n	aed2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    aeb0:	b1f3      	cbz	r3, aef0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
    aeb2:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
    aeb4:	6833      	ldr	r3, [r6, #0]
    aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aeb8:	462a      	mov	r2, r5
    aeba:	4621      	mov	r1, r4
    aebc:	4630      	mov	r0, r6
    aebe:	4798      	blx	r3
    aec0:	4603      	mov	r3, r0
    aec2:	2800      	cmp	r0, #0
    aec4:	d0ed      	beq.n	aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    aec6:	3401      	adds	r4, #1
    aec8:	f505 7500 	add.w	r5, r5, #512	; 0x200
    aecc:	42bc      	cmp	r4, r7
    aece:	d1f1      	bne.n	aeb4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    aed0:	e7e7      	b.n	aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    aed2:	462a      	mov	r2, r5
    aed4:	4807      	ldr	r0, [pc, #28]	; (aef4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    aed6:	f7ff fed7 	bl	ac88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    aeda:	4603      	mov	r3, r0
    aedc:	2800      	cmp	r0, #0
    aede:	d1e0      	bne.n	aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
    aee0:	4a05      	ldr	r2, [pc, #20]	; (aef8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    aee2:	210e      	movs	r1, #14
    aee4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    aee6:	4a05      	ldr	r2, [pc, #20]	; (aefc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
    aee8:	f240 411e 	movw	r1, #1054	; 0x41e
    aeec:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    aeee:	e7d8      	b.n	aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
    aef0:	2301      	movs	r3, #1
    aef2:	e7d6      	b.n	aea2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    aef4:	193a0027 	.word	0x193a0027
    aef8:	20003a18 	.word	0x20003a18
    aefc:	20004b30 	.word	0x20004b30

0000af00 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af04:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
    af06:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    af08:	2300      	movs	r3, #0
    af0a:	7243      	strb	r3, [r0, #9]
  m_initDone = false;
    af0c:	4aae      	ldr	r2, [pc, #696]	; (b1c8 <SdioCard::begin(SdioConfig)+0x2c8>)
    af0e:	7013      	strb	r3, [r2, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    af10:	4aae      	ldr	r2, [pc, #696]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    af12:	7013      	strb	r3, [r2, #0]
  m_highCapacity = false;
    af14:	4aae      	ldr	r2, [pc, #696]	; (b1d0 <SdioCard::begin(SdioConfig)+0x2d0>)
    af16:	7013      	strb	r3, [r2, #0]
  m_version2 = false;
    af18:	4aae      	ldr	r2, [pc, #696]	; (b1d4 <SdioCard::begin(SdioConfig)+0x2d4>)
    af1a:	7013      	strb	r3, [r2, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    af1c:	4bae      	ldr	r3, [pc, #696]	; (b1d8 <SdioCard::begin(SdioConfig)+0x2d8>)
    af1e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    af22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    af26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    af2a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    af2e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    af32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    af36:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    af3a:	f042 0218 	orr.w	r2, r2, #24
    af3e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    af42:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    af46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    af4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    af4e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
    af52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    af56:	f042 020c 	orr.w	r2, r2, #12
    af5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    af5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af60:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    af64:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    af66:	69da      	ldr	r2, [r3, #28]
    af68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    af6c:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    af6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    af74:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    af76:	2005      	movs	r0, #5
    af78:	f7ff faa2 	bl	a4c0 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    af7c:	4b97      	ldr	r3, [pc, #604]	; (b1dc <SdioCard::begin(SdioConfig)+0x2dc>)
    af7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    af80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    af84:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    af86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    af88:	4a95      	ldr	r2, [pc, #596]	; (b1e0 <SdioCard::begin(SdioConfig)+0x2e0>)
    af8a:	430a      	orrs	r2, r1
    af8c:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    af8e:	461a      	mov	r2, r3
    af90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    af92:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    af96:	d1fb      	bne.n	af90 <SdioCard::begin(SdioConfig)+0x90>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    af98:	f44f 70c8 	mov.w	r0, #400	; 0x190
    af9c:	f7ff fae4 	bl	a568 <setSdclk(unsigned long)>
    gpioMux(0);
    afa0:	2000      	movs	r0, #0
    afa2:	f7ff fa8d 	bl	a4c0 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    afa6:	4b8f      	ldr	r3, [pc, #572]	; (b1e4 <SdioCard::begin(SdioConfig)+0x2e4>)
    afa8:	f247 02b8 	movw	r2, #28856	; 0x70b8
    afac:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    afb0:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    afb4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    afb8:	f241 01b8 	movw	r1, #4280	; 0x10b8
    afbc:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    afc0:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    afc4:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    afc8:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
    afcc:	4a86      	ldr	r2, [pc, #536]	; (b1e8 <SdioCard::begin(SdioConfig)+0x2e8>)
    afce:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    afd0:	4a86      	ldr	r2, [pc, #536]	; (b1ec <SdioCard::begin(SdioConfig)+0x2ec>)
    afd2:	4987      	ldr	r1, [pc, #540]	; (b1f0 <SdioCard::begin(SdioConfig)+0x2f0>)
    afd4:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    afd8:	4a86      	ldr	r2, [pc, #536]	; (b1f4 <SdioCard::begin(SdioConfig)+0x2f4>)
    afda:	2160      	movs	r1, #96	; 0x60
    afdc:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    afe0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    afe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    afe8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    afec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    afee:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    aff2:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    aff4:	461a      	mov	r2, r3
    aff6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    aff8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    affc:	d1fb      	bne.n	aff6 <SdioCard::begin(SdioConfig)+0xf6>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    affe:	2100      	movs	r1, #0
    b000:	4608      	mov	r0, r1
    b002:	f7ff fba5 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b006:	4604      	mov	r4, r0
    b008:	b950      	cbnz	r0, b020 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    b00a:	4b70      	ldr	r3, [pc, #448]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b00c:	2201      	movs	r2, #1
    b00e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b010:	4b79      	ldr	r3, [pc, #484]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b012:	f240 228e 	movw	r2, #654	; 0x28e
    b016:	601a      	str	r2, [r3, #0]
}
    b018:	4620      	mov	r0, r4
    b01a:	b010      	add	sp, #64	; 0x40
    b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b020:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b022:	4e76      	ldr	r6, [pc, #472]	; (b1fc <SdioCard::begin(SdioConfig)+0x2fc>)
    b024:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
    b028:	4629      	mov	r1, r5
    b02a:	4630      	mov	r0, r6
    b02c:	f7ff fb90 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b030:	b980      	cbnz	r0, b054 <SdioCard::begin(SdioConfig)+0x154>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b032:	3c01      	subs	r4, #1
    b034:	d1f8      	bne.n	b028 <SdioCard::begin(SdioConfig)+0x128>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b036:	4b67      	ldr	r3, [pc, #412]	; (b1d4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	2b00      	cmp	r3, #0
    b03c:	4d70      	ldr	r5, [pc, #448]	; (b200 <SdioCard::begin(SdioConfig)+0x300>)
    b03e:	bf08      	it	eq
    b040:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
    b044:	f001 feae 	bl	cda4 <micros>
    b048:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b04a:	4e6e      	ldr	r6, [pc, #440]	; (b204 <SdioCard::begin(SdioConfig)+0x304>)
    b04c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; b238 <SdioCard::begin(SdioConfig)+0x338>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b050:	4f6d      	ldr	r7, [pc, #436]	; (b208 <SdioCard::begin(SdioConfig)+0x308>)
    b052:	e020      	b.n	b096 <SdioCard::begin(SdioConfig)+0x196>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b054:	4b61      	ldr	r3, [pc, #388]	; (b1dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b056:	691b      	ldr	r3, [r3, #16]
    b058:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b05c:	d008      	beq.n	b070 <SdioCard::begin(SdioConfig)+0x170>
  m_errorCode = code;
    b05e:	4b5b      	ldr	r3, [pc, #364]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b060:	2206      	movs	r2, #6
    b062:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b064:	4b64      	ldr	r3, [pc, #400]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b066:	f44f 7225 	mov.w	r2, #660	; 0x294
    b06a:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b06c:	2400      	movs	r4, #0
    b06e:	e7d3      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
      m_version2 = true;
    b070:	4b58      	ldr	r3, [pc, #352]	; (b1d4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b072:	2201      	movs	r2, #1
    b074:	701a      	strb	r2, [r3, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b076:	4d62      	ldr	r5, [pc, #392]	; (b200 <SdioCard::begin(SdioConfig)+0x300>)
    b078:	e7e4      	b.n	b044 <SdioCard::begin(SdioConfig)+0x144>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b07a:	4629      	mov	r1, r5
    b07c:	4640      	mov	r0, r8
    b07e:	f7ff fb67 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b082:	b170      	cbz	r0, b0a2 <SdioCard::begin(SdioConfig)+0x1a2>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b084:	f001 fe8e 	bl	cda4 <micros>
    b088:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b08a:	42b8      	cmp	r0, r7
    b08c:	d809      	bhi.n	b0a2 <SdioCard::begin(SdioConfig)+0x1a2>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b08e:	4b53      	ldr	r3, [pc, #332]	; (b1dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b090:	691b      	ldr	r3, [r3, #16]
    b092:	2b00      	cmp	r3, #0
    b094:	db0e      	blt.n	b0b4 <SdioCard::begin(SdioConfig)+0x1b4>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b096:	2100      	movs	r1, #0
    b098:	4630      	mov	r0, r6
    b09a:	f7ff fb59 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b09e:	2800      	cmp	r0, #0
    b0a0:	d1eb      	bne.n	b07a <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    b0a2:	4b4a      	ldr	r3, [pc, #296]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b0a4:	2217      	movs	r2, #23
    b0a6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0a8:	4b53      	ldr	r3, [pc, #332]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b0aa:	f240 229f 	movw	r2, #671	; 0x29f
    b0ae:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
    b0b0:	2400      	movs	r4, #0
    b0b2:	e7b1      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  m_ocr = SDHC_CMDRSP0;
    b0b4:	4b49      	ldr	r3, [pc, #292]	; (b1dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b0b6:	6919      	ldr	r1, [r3, #16]
    b0b8:	4a54      	ldr	r2, [pc, #336]	; (b20c <SdioCard::begin(SdioConfig)+0x30c>)
    b0ba:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b0bc:	691b      	ldr	r3, [r3, #16]
    b0be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b0c2:	d002      	beq.n	b0ca <SdioCard::begin(SdioConfig)+0x1ca>
    m_highCapacity = true;
    b0c4:	4b42      	ldr	r3, [pc, #264]	; (b1d0 <SdioCard::begin(SdioConfig)+0x2d0>)
    b0c6:	2201      	movs	r2, #1
    b0c8:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b0ca:	2100      	movs	r1, #0
    b0cc:	4850      	ldr	r0, [pc, #320]	; (b210 <SdioCard::begin(SdioConfig)+0x310>)
    b0ce:	f7ff fb3f 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b0d2:	4604      	mov	r4, r0
    b0d4:	b938      	cbnz	r0, b0e6 <SdioCard::begin(SdioConfig)+0x1e6>
  m_errorCode = code;
    b0d6:	4b3d      	ldr	r3, [pc, #244]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b0d8:	2202      	movs	r2, #2
    b0da:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0dc:	4b46      	ldr	r3, [pc, #280]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b0de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    b0e2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b0e4:	e798      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b0e6:	2100      	movs	r1, #0
    b0e8:	484a      	ldr	r0, [pc, #296]	; (b214 <SdioCard::begin(SdioConfig)+0x314>)
    b0ea:	f7ff fb31 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b0ee:	4604      	mov	r4, r0
    b0f0:	b938      	cbnz	r0, b102 <SdioCard::begin(SdioConfig)+0x202>
  m_errorCode = code;
    b0f2:	4b36      	ldr	r3, [pc, #216]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b0f4:	2203      	movs	r2, #3
    b0f6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0f8:	4b3f      	ldr	r3, [pc, #252]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b0fa:	f240 22ab 	movw	r2, #683	; 0x2ab
    b0fe:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b100:	e78a      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b102:	4b36      	ldr	r3, [pc, #216]	; (b1dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b104:	691a      	ldr	r2, [r3, #16]
    b106:	4b44      	ldr	r3, [pc, #272]	; (b218 <SdioCard::begin(SdioConfig)+0x318>)
    b108:	4013      	ands	r3, r2
    b10a:	4a44      	ldr	r2, [pc, #272]	; (b21c <SdioCard::begin(SdioConfig)+0x31c>)
    b10c:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b10e:	4944      	ldr	r1, [pc, #272]	; (b220 <SdioCard::begin(SdioConfig)+0x320>)
    b110:	4844      	ldr	r0, [pc, #272]	; (b224 <SdioCard::begin(SdioConfig)+0x324>)
    b112:	f7ff fb5b 	bl	a7cc <readReg16(unsigned long, void*)>
    b116:	4604      	mov	r4, r0
    b118:	b938      	cbnz	r0, b12a <SdioCard::begin(SdioConfig)+0x22a>
  m_errorCode = code;
    b11a:	4b2c      	ldr	r3, [pc, #176]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b11c:	2207      	movs	r2, #7
    b11e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b120:	4b35      	ldr	r3, [pc, #212]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b122:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    b126:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b128:	e776      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b12a:	493f      	ldr	r1, [pc, #252]	; (b228 <SdioCard::begin(SdioConfig)+0x328>)
    b12c:	483f      	ldr	r0, [pc, #252]	; (b22c <SdioCard::begin(SdioConfig)+0x32c>)
    b12e:	f7ff fb4d 	bl	a7cc <readReg16(unsigned long, void*)>
    b132:	4604      	mov	r4, r0
    b134:	b938      	cbnz	r0, b146 <SdioCard::begin(SdioConfig)+0x246>
  m_errorCode = code;
    b136:	4b25      	ldr	r3, [pc, #148]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b138:	2208      	movs	r2, #8
    b13a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b13c:	4b2e      	ldr	r3, [pc, #184]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b13e:	f240 22b3 	movw	r2, #691	; 0x2b3
    b142:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b144:	e768      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b146:	4b35      	ldr	r3, [pc, #212]	; (b21c <SdioCard::begin(SdioConfig)+0x31c>)
    b148:	6819      	ldr	r1, [r3, #0]
    b14a:	4839      	ldr	r0, [pc, #228]	; (b230 <SdioCard::begin(SdioConfig)+0x330>)
    b14c:	f7ff fb00 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b150:	4604      	mov	r4, r0
    b152:	b938      	cbnz	r0, b164 <SdioCard::begin(SdioConfig)+0x264>
  m_errorCode = code;
    b154:	4b1d      	ldr	r3, [pc, #116]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b156:	2205      	movs	r2, #5
    b158:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b15a:	4b27      	ldr	r3, [pc, #156]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b15c:	f240 22b6 	movw	r2, #694	; 0x2b6
    b160:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b162:	e759      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b164:	4b2d      	ldr	r3, [pc, #180]	; (b21c <SdioCard::begin(SdioConfig)+0x31c>)
    b166:	6819      	ldr	r1, [r3, #0]
    b168:	4826      	ldr	r0, [pc, #152]	; (b204 <SdioCard::begin(SdioConfig)+0x304>)
    b16a:	f7ff faf1 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b16e:	b940      	cbnz	r0, b182 <SdioCard::begin(SdioConfig)+0x282>
  m_errorCode = code;
    b170:	4b16      	ldr	r3, [pc, #88]	; (b1cc <SdioCard::begin(SdioConfig)+0x2cc>)
    b172:	2214      	movs	r2, #20
    b174:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b176:	4b20      	ldr	r3, [pc, #128]	; (b1f8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b178:	f240 22ba 	movw	r2, #698	; 0x2ba
    b17c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b17e:	2400      	movs	r4, #0
    b180:	e74a      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b182:	2102      	movs	r1, #2
    b184:	482b      	ldr	r0, [pc, #172]	; (b234 <SdioCard::begin(SdioConfig)+0x334>)
    b186:	f7ff fae3 	bl	a750 <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    b18a:	4604      	mov	r4, r0
    b18c:	2800      	cmp	r0, #0
    b18e:	d0ef      	beq.n	b170 <SdioCard::begin(SdioConfig)+0x270>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b190:	4b12      	ldr	r3, [pc, #72]	; (b1dc <SdioCard::begin(SdioConfig)+0x2dc>)
    b192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b194:	f022 0206 	bic.w	r2, r2, #6
    b198:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b19a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b19c:	f042 0202 	orr.w	r2, r2, #2
    b1a0:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b1a2:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    b1a6:	645a      	str	r2, [r3, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b1a8:	4669      	mov	r1, sp
    b1aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    b1ae:	f7ff fca3 	bl	aaf8 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b1b2:	2800      	cmp	r0, #0
    b1b4:	d053      	beq.n	b25e <SdioCard::begin(SdioConfig)+0x35e>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b1b6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b1ba:	f013 0f02 	tst.w	r3, #2
    b1be:	d13d      	bne.n	b23c <SdioCard::begin(SdioConfig)+0x33c>
    kHzSdClk = 25000;
    b1c0:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b1c4:	e04d      	b.n	b262 <SdioCard::begin(SdioConfig)+0x362>
    b1c6:	bf00      	nop
    b1c8:	200052f3 	.word	0x200052f3
    b1cc:	20003a18 	.word	0x20003a18
    b1d0:	200052f5 	.word	0x200052f5
    b1d4:	200052f4 	.word	0x200052f4
    b1d8:	400d8000 	.word	0x400d8000
    b1dc:	402c0000 	.word	0x402c0000
    b1e0:	01008000 	.word	0x01008000
    b1e4:	401f8000 	.word	0x401f8000
    b1e8:	117f000b 	.word	0x117f000b
    b1ec:	20003c00 	.word	0x20003c00
    b1f0:	0000a495 	.word	0x0000a495
    b1f4:	e000e400 	.word	0xe000e400
    b1f8:	20004b30 	.word	0x20004b30
    b1fc:	081a0000 	.word	0x081a0000
    b200:	40300000 	.word	0x40300000
    b204:	371a0000 	.word	0x371a0000
    b208:	000f4240 	.word	0x000f4240
    b20c:	20004b54 	.word	0x20004b54
    b210:	02090000 	.word	0x02090000
    b214:	031a0000 	.word	0x031a0000
    b218:	ffff0000 	.word	0xffff0000
    b21c:	20004b58 	.word	0x20004b58
    b220:	20004b44 	.word	0x20004b44
    b224:	09090000 	.word	0x09090000
    b228:	20004b34 	.word	0x20004b34
    b22c:	0a090000 	.word	0x0a090000
    b230:	071b0000 	.word	0x071b0000
    b234:	061a0000 	.word	0x061a0000
    b238:	29020000 	.word	0x29020000
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b23c:	4669      	mov	r1, sp
    b23e:	4819      	ldr	r0, [pc, #100]	; (b2a4 <SdioCard::begin(SdioConfig)+0x3a4>)
    b240:	f7ff fc5a 	bl	aaf8 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b244:	b358      	cbz	r0, b29e <SdioCard::begin(SdioConfig)+0x39e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b246:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b24a:	f003 030f 	and.w	r3, r3, #15
    kHzSdClk = 25000;
    b24e:	f24c 3550 	movw	r5, #50000	; 0xc350
    b252:	f246 12a8 	movw	r2, #25000	; 0x61a8
    b256:	2b01      	cmp	r3, #1
    b258:	bf18      	it	ne
    b25a:	4615      	movne	r5, r2
    b25c:	e001      	b.n	b262 <SdioCard::begin(SdioConfig)+0x362>
    b25e:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
    b262:	2005      	movs	r0, #5
    b264:	f7ff f92c 	bl	a4c0 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    b268:	4628      	mov	r0, r5
    b26a:	f7ff f97d 	bl	a568 <setSdclk(unsigned long)>
    gpioMux(0);
    b26e:	2000      	movs	r0, #0
    b270:	f7ff f926 	bl	a4c0 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b274:	4b0c      	ldr	r3, [pc, #48]	; (b2a8 <SdioCard::begin(SdioConfig)+0x3a8>)
    b276:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b27a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b27e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b282:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b286:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b28a:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b28e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b292:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
    b296:	4b05      	ldr	r3, [pc, #20]	; (b2ac <SdioCard::begin(SdioConfig)+0x3ac>)
    b298:	2201      	movs	r2, #1
    b29a:	701a      	strb	r2, [r3, #0]
  return true;
    b29c:	e6bc      	b.n	b018 <SdioCard::begin(SdioConfig)+0x118>
    kHzSdClk = 25000;
    b29e:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b2a2:	e7de      	b.n	b262 <SdioCard::begin(SdioConfig)+0x362>
    b2a4:	80fffff1 	.word	0x80fffff1
    b2a8:	401f8000 	.word	0x401f8000
    b2ac:	200052f3 	.word	0x200052f3

0000b2b0 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    b2b0:	b538      	push	{r3, r4, r5, lr}
    b2b2:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b2b4:	4b2b      	ldr	r3, [pc, #172]	; (b364 <SdioCard::readData(unsigned char*)+0xb4>)
    b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b2b8:	f413 7f00 	tst.w	r3, #512	; 0x200
    b2bc:	d10e      	bne.n	b2dc <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b2be:	4b29      	ldr	r3, [pc, #164]	; (b364 <SdioCard::readData(unsigned char*)+0xb4>)
    b2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b2c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b2c6:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b2c8:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b2ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b2cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b2d0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b2d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b2d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b2d8:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b2da:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    b2dc:	4822      	ldr	r0, [pc, #136]	; (b368 <SdioCard::readData(unsigned char*)+0xb8>)
    b2de:	f7ff fa25 	bl	a72c <waitTimeout(bool (*)())>
    b2e2:	4605      	mov	r5, r0
    b2e4:	b148      	cbz	r0, b2fa <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
    b2e6:	4b21      	ldr	r3, [pc, #132]	; (b36c <SdioCard::readData(unsigned char*)+0xbc>)
    b2e8:	221a      	movs	r2, #26
    b2ea:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b2ec:	4b20      	ldr	r3, [pc, #128]	; (b370 <SdioCard::readData(unsigned char*)+0xc0>)
    b2ee:	f240 3237 	movw	r2, #823	; 0x337
    b2f2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b2f4:	2500      	movs	r5, #0
}
    b2f6:	4628      	mov	r0, r5
    b2f8:	bd38      	pop	{r3, r4, r5, pc}
    b2fa:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
    b2fe:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b302:	4818      	ldr	r0, [pc, #96]	; (b364 <SdioCard::readData(unsigned char*)+0xb4>)
    b304:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b306:	f413 6f00 	tst.w	r3, #2048	; 0x800
    b30a:	d0fb      	beq.n	b304 <SdioCard::readData(unsigned char*)+0x54>
    b30c:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b310:	6a02      	ldr	r2, [r0, #32]
    b312:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b316:	4563      	cmp	r3, ip
    b318:	d1fa      	bne.n	b310 <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b31a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b31e:	458c      	cmp	ip, r1
    b320:	d1f0      	bne.n	b304 <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
    b322:	4814      	ldr	r0, [pc, #80]	; (b374 <SdioCard::readData(unsigned char*)+0xc4>)
    b324:	f7ff fa02 	bl	a72c <waitTimeout(bool (*)())>
    b328:	4601      	mov	r1, r0
    b32a:	b138      	cbz	r0, b33c <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
    b32c:	4b0f      	ldr	r3, [pc, #60]	; (b36c <SdioCard::readData(unsigned char*)+0xbc>)
    b32e:	221d      	movs	r2, #29
    b330:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b332:	4b0f      	ldr	r3, [pc, #60]	; (b370 <SdioCard::readData(unsigned char*)+0xc0>)
    b334:	f240 3242 	movw	r2, #834	; 0x342
    b338:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b33a:	e7dc      	b.n	b2f6 <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
    b33c:	4a09      	ldr	r2, [pc, #36]	; (b364 <SdioCard::readData(unsigned char*)+0xb4>)
    b33e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    b340:	4b0d      	ldr	r3, [pc, #52]	; (b378 <SdioCard::readData(unsigned char*)+0xc8>)
    b342:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b344:	6818      	ldr	r0, [r3, #0]
    b346:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b348:	681b      	ldr	r3, [r3, #0]
    b34a:	f013 0f02 	tst.w	r3, #2
    b34e:	d007      	beq.n	b360 <SdioCard::readData(unsigned char*)+0xb0>
    b350:	4b09      	ldr	r3, [pc, #36]	; (b378 <SdioCard::readData(unsigned char*)+0xc8>)
    b352:	681a      	ldr	r2, [r3, #0]
    b354:	4b09      	ldr	r3, [pc, #36]	; (b37c <SdioCard::readData(unsigned char*)+0xcc>)
    b356:	421a      	tst	r2, r3
    b358:	bf0c      	ite	eq
    b35a:	2501      	moveq	r5, #1
    b35c:	2500      	movne	r5, #0
    b35e:	e7ca      	b.n	b2f6 <SdioCard::readData(unsigned char*)+0x46>
    b360:	460d      	mov	r5, r1
    b362:	e7c8      	b.n	b2f6 <SdioCard::readData(unsigned char*)+0x46>
    b364:	402c0000 	.word	0x402c0000
    b368:	0000a529 	.word	0x0000a529
    b36c:	20003a18 	.word	0x20003a18
    b370:	20004b30 	.word	0x20004b30
    b374:	0000a551 	.word	0x0000a551
    b378:	20004b60 	.word	0x20004b60
    b37c:	117f0000 	.word	0x117f0000

0000b380 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b380:	b510      	push	{r4, lr}
    b382:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b384:	4813      	ldr	r0, [pc, #76]	; (b3d4 <SdioCard::readStart(unsigned long)+0x54>)
    b386:	f7ff fb81 	bl	aa8c <yieldTimeout(bool (*)())>
    b38a:	b140      	cbz	r0, b39e <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    b38c:	4b12      	ldr	r3, [pc, #72]	; (b3d8 <SdioCard::readStart(unsigned long)+0x58>)
    b38e:	220a      	movs	r2, #10
    b390:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b392:	4b12      	ldr	r3, [pc, #72]	; (b3dc <SdioCard::readStart(unsigned long)+0x5c>)
    b394:	f240 3292 	movw	r2, #914	; 0x392
    b398:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b39a:	2000      	movs	r0, #0
}
    b39c:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b39e:	4b10      	ldr	r3, [pc, #64]	; (b3e0 <SdioCard::readStart(unsigned long)+0x60>)
    b3a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b3a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b3a6:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    b3ac:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b3ae:	4b0d      	ldr	r3, [pc, #52]	; (b3e4 <SdioCard::readStart(unsigned long)+0x64>)
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	b903      	cbnz	r3, b3b6 <SdioCard::readStart(unsigned long)+0x36>
    b3b4:	0264      	lsls	r4, r4, #9
    b3b6:	4621      	mov	r1, r4
    b3b8:	480b      	ldr	r0, [pc, #44]	; (b3e8 <SdioCard::readStart(unsigned long)+0x68>)
    b3ba:	f7ff f9c9 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b3be:	2800      	cmp	r0, #0
    b3c0:	d1ec      	bne.n	b39c <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    b3c2:	4b05      	ldr	r3, [pc, #20]	; (b3d8 <SdioCard::readStart(unsigned long)+0x58>)
    b3c4:	220c      	movs	r2, #12
    b3c6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b3c8:	4b04      	ldr	r3, [pc, #16]	; (b3dc <SdioCard::readStart(unsigned long)+0x5c>)
    b3ca:	f240 329e 	movw	r2, #926	; 0x39e
    b3ce:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    b3d0:	e7e4      	b.n	b39c <SdioCard::readStart(unsigned long)+0x1c>
    b3d2:	bf00      	nop
    b3d4:	0000a865 	.word	0x0000a865
    b3d8:	20003a18 	.word	0x20003a18
    b3dc:	20004b30 	.word	0x20004b30
    b3e0:	402c0000 	.word	0x402c0000
    b3e4:	200052f5 	.word	0x200052f5
    b3e8:	123a0030 	.word	0x123a0030

0000b3ec <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b3ec:	b570      	push	{r4, r5, r6, lr}
    b3ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b3f2:	460e      	mov	r6, r1
    b3f4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b3f6:	7a03      	ldrb	r3, [r0, #8]
    b3f8:	f013 0f01 	tst.w	r3, #1
    b3fc:	d013      	beq.n	b426 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b3fe:	f012 0f03 	tst.w	r2, #3
    b402:	d135      	bne.n	b470 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b404:	2301      	movs	r3, #1
    b406:	4822      	ldr	r0, [pc, #136]	; (b490 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b408:	f7ff fc3e 	bl	ac88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b40c:	2800      	cmp	r0, #0
    b40e:	d13c      	bne.n	b48a <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
    b410:	4b20      	ldr	r3, [pc, #128]	; (b494 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    b412:	220b      	movs	r2, #11
    b414:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b416:	4b20      	ldr	r3, [pc, #128]	; (b498 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    b418:	f240 3255 	movw	r2, #853	; 0x355
    b41c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    b41e:	2000      	movs	r0, #0
}
    b420:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b424:	bd70      	pop	{r4, r5, r6, pc}
    b426:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b428:	f7ff fab6 	bl	a998 <waitTransferComplete()>
    b42c:	2800      	cmp	r0, #0
    b42e:	d0f7      	beq.n	b420 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b430:	7a63      	ldrb	r3, [r4, #9]
    b432:	2b01      	cmp	r3, #1
    b434:	d018      	beq.n	b468 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    b436:	6823      	ldr	r3, [r4, #0]
    b438:	6a1b      	ldr	r3, [r3, #32]
    b43a:	4620      	mov	r0, r4
    b43c:	4798      	blx	r3
    b43e:	2800      	cmp	r0, #0
    b440:	d0ee      	beq.n	b420 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    b442:	4631      	mov	r1, r6
    b444:	4620      	mov	r0, r4
    b446:	f7ff ff9b 	bl	b380 <SdioCard::readStart(unsigned long)>
    b44a:	2800      	cmp	r0, #0
    b44c:	d0e8      	beq.n	b420 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
    b44e:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    b450:	2301      	movs	r3, #1
    b452:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b454:	4629      	mov	r1, r5
    b456:	4620      	mov	r0, r4
    b458:	f7ff ff2a 	bl	b2b0 <SdioCard::readData(unsigned char*)>
    b45c:	2800      	cmp	r0, #0
    b45e:	d0df      	beq.n	b420 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    b460:	6863      	ldr	r3, [r4, #4]
    b462:	3301      	adds	r3, #1
    b464:	6063      	str	r3, [r4, #4]
    b466:	e7db      	b.n	b420 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b468:	6863      	ldr	r3, [r4, #4]
    b46a:	42b3      	cmp	r3, r6
    b46c:	d1e3      	bne.n	b436 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    b46e:	e7f1      	b.n	b454 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b470:	2301      	movs	r3, #1
    b472:	466a      	mov	r2, sp
    b474:	4806      	ldr	r0, [pc, #24]	; (b490 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b476:	f7ff fc07 	bl	ac88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b47a:	2800      	cmp	r0, #0
    b47c:	d0c8      	beq.n	b410 <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
    b47e:	f44f 7200 	mov.w	r2, #512	; 0x200
    b482:	4669      	mov	r1, sp
    b484:	4628      	mov	r0, r5
    b486:	f001 fd4b 	bl	cf20 <memcpy>
  return true;
    b48a:	2001      	movs	r0, #1
    b48c:	e7c8      	b.n	b420 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    b48e:	bf00      	nop
    b490:	113a0011 	.word	0x113a0011
    b494:	20003a18 	.word	0x20003a18
    b498:	20004b30 	.word	0x20004b30

0000b49c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b49c:	b510      	push	{r4, lr}
    b49e:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
    b4a0:	2100      	movs	r1, #0
    b4a2:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b4a4:	4a10      	ldr	r2, [pc, #64]	; (b4e8 <SdioCard::stopTransmission(bool)+0x4c>)
    b4a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b4a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b4ac:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b4ae:	480f      	ldr	r0, [pc, #60]	; (b4ec <SdioCard::stopTransmission(bool)+0x50>)
    b4b0:	f7ff f94e 	bl	a750 <cardCommand(unsigned long, unsigned long)>
    b4b4:	b938      	cbnz	r0, b4c6 <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
    b4b6:	4b0e      	ldr	r3, [pc, #56]	; (b4f0 <SdioCard::stopTransmission(bool)+0x54>)
    b4b8:	2209      	movs	r2, #9
    b4ba:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b4bc:	4b0d      	ldr	r3, [pc, #52]	; (b4f4 <SdioCard::stopTransmission(bool)+0x58>)
    b4be:	f44f 726d 	mov.w	r2, #948	; 0x3b4
    b4c2:	601a      	str	r2, [r3, #0]
}
    b4c4:	bd10      	pop	{r4, pc}
  if (blocking) {
    b4c6:	2c00      	cmp	r4, #0
    b4c8:	d0fc      	beq.n	b4c4 <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
    b4ca:	480b      	ldr	r0, [pc, #44]	; (b4f8 <SdioCard::stopTransmission(bool)+0x5c>)
    b4cc:	f7ff fade 	bl	aa8c <yieldTimeout(bool (*)())>
    b4d0:	b140      	cbz	r0, b4e4 <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
    b4d2:	4b07      	ldr	r3, [pc, #28]	; (b4f0 <SdioCard::stopTransmission(bool)+0x54>)
    b4d4:	220a      	movs	r2, #10
    b4d6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b4d8:	4b06      	ldr	r3, [pc, #24]	; (b4f4 <SdioCard::stopTransmission(bool)+0x58>)
    b4da:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    b4de:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    b4e0:	2000      	movs	r0, #0
    b4e2:	e7ef      	b.n	b4c4 <SdioCard::stopTransmission(bool)+0x28>
  return true;
    b4e4:	4620      	mov	r0, r4
    b4e6:	e7ed      	b.n	b4c4 <SdioCard::stopTransmission(bool)+0x28>
    b4e8:	402c0000 	.word	0x402c0000
    b4ec:	0cdb0000 	.word	0x0cdb0000
    b4f0:	20003a18 	.word	0x20003a18
    b4f4:	20004b30 	.word	0x20004b30
    b4f8:	0000a509 	.word	0x0000a509

0000b4fc <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    b4fc:	b510      	push	{r4, lr}
    b4fe:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
    b500:	f7ff fa4a 	bl	a998 <waitTransferComplete()>
    b504:	b108      	cbz	r0, b50a <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
    b506:	7a63      	ldrb	r3, [r4, #9]
    b508:	b903      	cbnz	r3, b50c <SdioCard::syncDevice()+0x10>
}
    b50a:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
    b50c:	2101      	movs	r1, #1
    b50e:	4620      	mov	r0, r4
    b510:	f7ff ffc4 	bl	b49c <SdioCard::stopTransmission(bool)>
    b514:	e7f9      	b.n	b50a <SdioCard::syncDevice()+0xe>

0000b516 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
    b516:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
    b518:	2101      	movs	r1, #1
    b51a:	f001 fcbb 	bl	ce94 <pinMode>
}
    b51e:	bd08      	pop	{r3, pc}

0000b520 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
    b520:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
    b522:	f001 fc7f 	bl	ce24 <digitalWrite>
}
    b526:	bd08      	pop	{r3, pc}

0000b528 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    b528:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
    b52a:	6803      	ldr	r3, [r0, #0]
    b52c:	6842      	ldr	r2, [r0, #4]
    b52e:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
    b530:	7cd9      	ldrb	r1, [r3, #19]
    b532:	2900      	cmp	r1, #0
    b534:	d042      	beq.n	b5bc <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
    b536:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    b538:	7cd9      	ldrb	r1, [r3, #19]
    b53a:	f011 0f01 	tst.w	r1, #1
    b53e:	d008      	beq.n	b552 <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    b540:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b544:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
    b548:	695d      	ldr	r5, [r3, #20]
    b54a:	4029      	ands	r1, r5
    b54c:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    b54e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    b552:	7cd9      	ldrb	r1, [r3, #19]
    b554:	f011 0f02 	tst.w	r1, #2
    b558:	d008      	beq.n	b56c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    b55a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b55e:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    b562:	699d      	ldr	r5, [r3, #24]
    b564:	4029      	ands	r1, r5
    b566:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    b568:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    b56c:	7cd9      	ldrb	r1, [r3, #19]
    b56e:	f011 0f04 	tst.w	r1, #4
    b572:	d008      	beq.n	b586 <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    b574:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b578:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    b57c:	69dd      	ldr	r5, [r3, #28]
    b57e:	4029      	ands	r1, r5
    b580:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    b582:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    b586:	7cd9      	ldrb	r1, [r3, #19]
    b588:	f011 0f08 	tst.w	r1, #8
    b58c:	d008      	beq.n	b5a0 <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    b58e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b592:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    b596:	6a1d      	ldr	r5, [r3, #32]
    b598:	4029      	ands	r1, r5
    b59a:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    b59c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    b5a0:	7cd9      	ldrb	r1, [r3, #19]
    b5a2:	f011 0f10 	tst.w	r1, #16
    b5a6:	d008      	beq.n	b5ba <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    b5a8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b5ac:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    b5b0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b5b2:	4029      	ands	r1, r5
    b5b4:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    b5b6:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
    b5ba:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    b5bc:	6899      	ldr	r1, [r3, #8]
    b5be:	428a      	cmp	r2, r1
    b5c0:	d025      	beq.n	b60e <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
    b5c2:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    b5c4:	4920      	ldr	r1, [pc, #128]	; (b648 <SdSpiArduinoDriver::activate()+0x120>)
    b5c6:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b5c8:	f3c1 1501 	ubfx	r5, r1, #4, #2
    b5cc:	481f      	ldr	r0, [pc, #124]	; (b64c <SdSpiArduinoDriver::activate()+0x124>)
    b5ce:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    b5d2:	f3c1 6182 	ubfx	r1, r1, #26, #3
    b5d6:	3101      	adds	r1, #1
    b5d8:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    b5dc:	b37a      	cbz	r2, b63e <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
    b5de:	4282      	cmp	r2, r0
    b5e0:	d82b      	bhi.n	b63a <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
    b5e2:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
    b5e6:	fbb0 f0f1 	udiv	r0, r0, r1
    b5ea:	4282      	cmp	r2, r0
    b5ec:	d31f      	bcc.n	b62e <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
    b5ee:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    b5f2:	d31e      	bcc.n	b632 <SdSpiArduinoDriver::activate()+0x10a>
    b5f4:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
    b5f8:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b5fa:	0850      	lsrs	r0, r2, #1
    b5fc:	0201      	lsls	r1, r0, #8
    b5fe:	b289      	uxth	r1, r1
    b600:	0400      	lsls	r0, r0, #16
    b602:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    b606:	4301      	orrs	r1, r0
    b608:	b2d2      	uxtb	r2, r2
    b60a:	430a      	orrs	r2, r1
    b60c:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b60e:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
    b610:	2100      	movs	r1, #0
    b612:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b614:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b616:	2103      	movs	r1, #3
    b618:	6251      	str	r1, [r2, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b61a:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
    b61c:	68d9      	ldr	r1, [r3, #12]
    b61e:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b620:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
    b622:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b624:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
    b626:	2201      	movs	r2, #1
    b628:	611a      	str	r2, [r3, #16]
}
    b62a:	bc30      	pop	{r4, r5}
    b62c:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
    b62e:	4608      	mov	r0, r1
    b630:	e007      	b.n	b642 <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
    b632:	2902      	cmp	r1, #2
    b634:	d8e0      	bhi.n	b5f8 <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
    b636:	2200      	movs	r2, #0
    b638:	e7df      	b.n	b5fa <SdSpiArduinoDriver::activate()+0xd2>
    b63a:	2200      	movs	r2, #0
    b63c:	e7dd      	b.n	b5fa <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
    b63e:	428d      	cmp	r5, r1
    b640:	d3db      	bcc.n	b5fa <SdSpiArduinoDriver::activate()+0xd2>
    b642:	1c41      	adds	r1, r0, #1
    b644:	e7d3      	b.n	b5ee <SdSpiArduinoDriver::activate()+0xc6>
    b646:	bf00      	nop
    b648:	400fc000 	.word	0x400fc000
    b64c:	20002510 	.word	0x20002510

0000b650 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    b650:	b500      	push	{lr}
    b652:	b085      	sub	sp, #20
    b654:	4684      	mov	ip, r0
    b656:	a804      	add	r0, sp, #16
    b658:	e900 000e 	stmdb	r0, {r1, r2, r3}
    b65c:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
    b65e:	b133      	cbz	r3, b66e <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    b660:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    b664:	f7f9 f836 	bl	46d4 <SPIClass::begin()>
}
    b668:	b005      	add	sp, #20
    b66a:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
    b66e:	4801      	ldr	r0, [pc, #4]	; (b674 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    b670:	e7f6      	b.n	b660 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    b672:	bf00      	nop
    b674:	200045b0 	.word	0x200045b0

0000b678 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    b678:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    b67a:	7cda      	ldrb	r2, [r3, #19]
    b67c:	b35a      	cbz	r2, b6d6 <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    b67e:	f012 0f01 	tst.w	r2, #1
    b682:	d004      	beq.n	b68e <SdSpiArduinoDriver::deactivate()+0x16>
    b684:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b686:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b68a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    b68e:	7cda      	ldrb	r2, [r3, #19]
    b690:	f012 0f02 	tst.w	r2, #2
    b694:	d004      	beq.n	b6a0 <SdSpiArduinoDriver::deactivate()+0x28>
    b696:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b698:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b69c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    b6a0:	7cda      	ldrb	r2, [r3, #19]
    b6a2:	f012 0f04 	tst.w	r2, #4
    b6a6:	d004      	beq.n	b6b2 <SdSpiArduinoDriver::deactivate()+0x3a>
    b6a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b6aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b6ae:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    b6b2:	7cda      	ldrb	r2, [r3, #19]
    b6b4:	f012 0f08 	tst.w	r2, #8
    b6b8:	d004      	beq.n	b6c4 <SdSpiArduinoDriver::deactivate()+0x4c>
    b6ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b6bc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b6c0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    b6c4:	7cda      	ldrb	r2, [r3, #19]
    b6c6:	f012 0f10 	tst.w	r2, #16
    b6ca:	d004      	beq.n	b6d6 <SdSpiArduinoDriver::deactivate()+0x5e>
    b6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b6ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b6d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    b6d6:	4770      	bx	lr

0000b6d8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
    b6d8:	b508      	push	{r3, lr}
  m_spi->end();
    b6da:	6800      	ldr	r0, [r0, #0]
    b6dc:	f7f9 f971 	bl	49c2 <SPIClass::end()>
}
    b6e0:	bd08      	pop	{r3, pc}

0000b6e2 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    b6e2:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6e4:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b6e6:	21ff      	movs	r1, #255	; 0xff
    b6e8:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6ea:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b6ec:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b6ee:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b6f2:	d0fb      	beq.n	b6ec <SdSpiArduinoDriver::receive()+0xa>
    b6f4:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
    b6f6:	b2c0      	uxtb	r0, r0
    b6f8:	4770      	bx	lr

0000b6fa <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    b6fa:	b570      	push	{r4, r5, r6, lr}
    b6fc:	4605      	mov	r5, r0
    b6fe:	460c      	mov	r4, r1
    b700:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    b702:	21ff      	movs	r1, #255	; 0xff
    b704:	4620      	mov	r0, r4
    b706:	f006 f891 	bl	1182c <memset>
		transfer(buf, buf, count);
    b70a:	4633      	mov	r3, r6
    b70c:	4622      	mov	r2, r4
    b70e:	4621      	mov	r1, r4
    b710:	6828      	ldr	r0, [r5, #0]
    b712:	f7f9 f917 	bl	4944 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    b716:	2000      	movs	r0, #0
    b718:	bd70      	pop	{r4, r5, r6, pc}

0000b71a <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    b71a:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b71c:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b71e:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b720:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b722:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b724:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b728:	d0fb      	beq.n	b722 <SdSpiArduinoDriver::send(unsigned char)+0x8>
    b72a:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    b72c:	4770      	bx	lr

0000b72e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    b72e:	b530      	push	{r4, r5, lr}
    b730:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    b734:	4604      	mov	r4, r0
    b736:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    b738:	1e53      	subs	r3, r2, #1
    b73a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b73e:	d313      	bcc.n	b768 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    b740:	b17a      	cbz	r2, b762 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
    b742:	3901      	subs	r1, #1
    b744:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
    b748:	6823      	ldr	r3, [r4, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b74a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b74c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b750:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b752:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b754:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b756:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b75a:	d0fb      	beq.n	b754 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
    b75c:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
    b75e:	4561      	cmp	r1, ip
    b760:	d1f2      	bne.n	b748 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
    b762:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    b766:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    b768:	4668      	mov	r0, sp
    b76a:	f001 fbd9 	bl	cf20 <memcpy>
		transfer(buf, buf, count);
    b76e:	462b      	mov	r3, r5
    b770:	466a      	mov	r2, sp
    b772:	4669      	mov	r1, sp
    b774:	6820      	ldr	r0, [r4, #0]
    b776:	f7f9 f8e5 	bl	4944 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
    b77a:	e7f2      	b.n	b762 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

0000b77c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    b77c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    b77e:	7803      	ldrb	r3, [r0, #0]
    b780:	f013 0f01 	tst.w	r3, #1
    b784:	d01c      	beq.n	b7c0 <FsCache::sync()+0x44>
    b786:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    b788:	6840      	ldr	r0, [r0, #4]
    b78a:	f104 0610 	add.w	r6, r4, #16
    b78e:	6803      	ldr	r3, [r0, #0]
    b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b792:	4632      	mov	r2, r6
    b794:	68e1      	ldr	r1, [r4, #12]
    b796:	4798      	blx	r3
    b798:	4605      	mov	r5, r0
    b79a:	b190      	cbz	r0, b7c2 <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    b79c:	7823      	ldrb	r3, [r4, #0]
    b79e:	f013 0f02 	tst.w	r3, #2
    b7a2:	d008      	beq.n	b7b6 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    b7a4:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    b7a6:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    b7a8:	6803      	ldr	r3, [r0, #0]
    b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b7ac:	4632      	mov	r2, r6
    b7ae:	68e6      	ldr	r6, [r4, #12]
    b7b0:	4431      	add	r1, r6
    b7b2:	4798      	blx	r3
    b7b4:	b138      	cbz	r0, b7c6 <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    b7b6:	7823      	ldrb	r3, [r4, #0]
    b7b8:	f023 0301 	bic.w	r3, r3, #1
    b7bc:	7023      	strb	r3, [r4, #0]
    b7be:	e000      	b.n	b7c2 <FsCache::sync()+0x46>
  }
  return true;
    b7c0:	2501      	movs	r5, #1

 fail:
  return false;
}
    b7c2:	4628      	mov	r0, r5
    b7c4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    b7c6:	4605      	mov	r5, r0
    b7c8:	e7fb      	b.n	b7c2 <FsCache::sync()+0x46>

0000b7ca <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    b7ca:	b570      	push	{r4, r5, r6, lr}
    b7cc:	4604      	mov	r4, r0
  if (!m_blockDev) {
    b7ce:	6840      	ldr	r0, [r0, #4]
    b7d0:	b158      	cbz	r0, b7ea <FsCache::prepare(unsigned long, unsigned char)+0x20>
    b7d2:	460e      	mov	r6, r1
    b7d4:	4615      	mov	r5, r2
  if (m_sector != sector) {
    b7d6:	68e3      	ldr	r3, [r4, #12]
    b7d8:	428b      	cmp	r3, r1
    b7da:	d107      	bne.n	b7ec <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
    b7dc:	f005 0503 	and.w	r5, r5, #3
    b7e0:	7823      	ldrb	r3, [r4, #0]
    b7e2:	432b      	orrs	r3, r5
    b7e4:	4620      	mov	r0, r4
    b7e6:	f800 3b10 	strb.w	r3, [r0], #16
}
    b7ea:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
    b7ec:	4620      	mov	r0, r4
    b7ee:	f7ff ffc5 	bl	b77c <FsCache::sync()>
    b7f2:	b170      	cbz	r0, b812 <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
    b7f4:	f015 0f04 	tst.w	r5, #4
    b7f8:	d107      	bne.n	b80a <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    b7fa:	6860      	ldr	r0, [r4, #4]
    b7fc:	6803      	ldr	r3, [r0, #0]
    b7fe:	691b      	ldr	r3, [r3, #16]
    b800:	f104 0210 	add.w	r2, r4, #16
    b804:	4631      	mov	r1, r6
    b806:	4798      	blx	r3
    b808:	b128      	cbz	r0, b816 <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
    b80a:	2300      	movs	r3, #0
    b80c:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
    b80e:	60e6      	str	r6, [r4, #12]
    b810:	e7e4      	b.n	b7dc <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
    b812:	2000      	movs	r0, #0
    b814:	e7e9      	b.n	b7ea <FsCache::prepare(unsigned long, unsigned char)+0x20>
    b816:	2000      	movs	r0, #0
    b818:	e7e7      	b.n	b7ea <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

0000b81c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
 */
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
    b81c:	b508      	push	{r3, lr}
  *ms10 = 0;
    b81e:	2300      	movs	r3, #0
    b820:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    b822:	4b02      	ldr	r3, [pc, #8]	; (b82c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
    b824:	681b      	ldr	r3, [r3, #0]
    b826:	4798      	blx	r3
}
    b828:	bd08      	pop	{r3, pc}
    b82a:	bf00      	nop
    b82c:	20004b68 	.word	0x20004b68

0000b830 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    b830:	4b02      	ldr	r3, [pc, #8]	; (b83c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    b832:	4a03      	ldr	r2, [pc, #12]	; (b840 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    b834:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
    b836:	4b03      	ldr	r3, [pc, #12]	; (b844 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    b838:	6018      	str	r0, [r3, #0]
  }
    b83a:	4770      	bx	lr
    b83c:	20004b64 	.word	0x20004b64
    b840:	0000b81d 	.word	0x0000b81d
    b844:	20004b68 	.word	0x20004b68

0000b848 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    b848:	b510      	push	{r4, lr}
    b84a:	b082      	sub	sp, #8
    b84c:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    b84e:	8980      	ldrh	r0, [r0, #12]
    b850:	b118      	cbz	r0, b85a <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    b852:	2300      	movs	r3, #0
    b854:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    b856:	b002      	add	sp, #8
    b858:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    b85a:	6863      	ldr	r3, [r4, #4]
    b85c:	68a1      	ldr	r1, [r4, #8]
    b85e:	428b      	cmp	r3, r1
    b860:	d2f9      	bcs.n	b856 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    b862:	aa01      	add	r2, sp, #4
    b864:	4618      	mov	r0, r3
    b866:	f000 f8b9 	bl	b9dc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    b86a:	b130      	cbz	r0, b87a <FsName::get16()+0x32>
    next = ptr;
    b86c:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    b86e:	9801      	ldr	r0, [sp, #4]
    b870:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    b874:	d204      	bcs.n	b880 <FsName::get16()+0x38>
      rtn = cp;
    b876:	b280      	uxth	r0, r0
    b878:	e7ed      	b.n	b856 <FsName::get16()+0xe>
  return 0XFFFF;
    b87a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    b87e:	e7ea      	b.n	b856 <FsName::get16()+0xe>
    b880:	f3c0 0309 	ubfx	r3, r0, #0, #10
    b884:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
    b888:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    b88a:	0a80      	lsrs	r0, r0, #10
    b88c:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    b890:	b280      	uxth	r0, r0
    b892:	e7e0      	b.n	b856 <FsName::get16()+0xe>

0000b894 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    b894:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b896:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    b89a:	d82e      	bhi.n	b8fa <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
    b89c:	2910      	cmp	r1, #16
    b89e:	d81f      	bhi.n	b8e0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b8a0:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
    b8a4:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    b8a6:	fb0e f101 	mul.w	r1, lr, r1
    b8aa:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
    b8ae:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
    b8b2:	d23f      	bcs.n	b934 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    b8b4:	fb01 231c 	mls	r3, r1, ip, r2
    b8b8:	fbb3 f3fe 	udiv	r3, r3, lr
    b8bc:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    b8be:	fbb2 f1fe 	udiv	r1, r2, lr
    b8c2:	fb0e 2211 	mls	r2, lr, r1, r2
    b8c6:	3201      	adds	r2, #1
    b8c8:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    b8ca:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    b8cc:	ea4f 039c 	mov.w	r3, ip, lsr #2
    b8d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b8d4:	431a      	orrs	r2, r3
    b8d6:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
    b8d8:	f880 c002 	strb.w	ip, [r0, #2]
}
    b8dc:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
    b8e0:	2920      	cmp	r1, #32
    b8e2:	d803      	bhi.n	b8ec <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b8e4:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
    b8e8:	2104      	movs	r1, #4
    b8ea:	e7dc      	b.n	b8a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b8ec:	f04f 0e20 	mov.w	lr, #32
    b8f0:	2980      	cmp	r1, #128	; 0x80
    b8f2:	bf8c      	ite	hi
    b8f4:	2110      	movhi	r1, #16
    b8f6:	2108      	movls	r1, #8
    b8f8:	e7d5      	b.n	b8a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    b8fa:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    b8fe:	d90d      	bls.n	b91c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
    b900:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    b904:	d90e      	bls.n	b924 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
    b906:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    b90a:	d90f      	bls.n	b92c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b90c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    b910:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
    b914:	bf94      	ite	ls
    b916:	2180      	movls	r1, #128	; 0x80
    b918:	21ff      	movhi	r1, #255	; 0xff
    b91a:	e7c4      	b.n	b8a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    b91c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
    b920:	2110      	movs	r1, #16
    b922:	e7c0      	b.n	b8a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b924:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
    b928:	2120      	movs	r1, #32
    b92a:	e7bc      	b.n	b8a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b92c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
    b930:	2140      	movs	r1, #64	; 0x40
    b932:	e7b8      	b.n	b8a6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
    b934:	223f      	movs	r2, #63	; 0x3f
    h = 254;
    b936:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
    b938:	f240 3cff 	movw	ip, #1023	; 0x3ff
    b93c:	e7c5      	b.n	b8ca <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

0000b93e <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    b93e:	4603      	mov	r3, r0
    size_t n = end - str;
    b940:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
    b942:	287f      	cmp	r0, #127	; 0x7f
    b944:	d805      	bhi.n	b952 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    b946:	2a00      	cmp	r2, #0
    b948:	d040      	beq.n	b9cc <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
    b94a:	4608      	mov	r0, r1
    b94c:	f800 3b01 	strb.w	r3, [r0], #1
    b950:	4770      	bx	lr
    } else if (cp < 0X800) {
    b952:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    b956:	d20d      	bcs.n	b974 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    b958:	2a01      	cmp	r2, #1
    b95a:	d939      	bls.n	b9d0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    b95c:	0982      	lsrs	r2, r0, #6
    b95e:	f062 023f 	orn	r2, r2, #63	; 0x3f
    b962:	4608      	mov	r0, r1
    b964:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    b968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b96c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b970:	704b      	strb	r3, [r1, #1]
    b972:	4770      	bx	lr
    } else if (cp < 0X10000) {
    b974:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    b978:	d211      	bcs.n	b99e <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    b97a:	2a02      	cmp	r2, #2
    b97c:	d92a      	bls.n	b9d4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    b97e:	0b02      	lsrs	r2, r0, #12
    b980:	f062 021f 	orn	r2, r2, #31
    b984:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    b986:	f3c0 1285 	ubfx	r2, r0, #6, #6
    b98a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b98e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    b990:	1cc8      	adds	r0, r1, #3
    b992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b996:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b99a:	708b      	strb	r3, [r1, #2]
    b99c:	4770      	bx	lr
       if (n < 4) goto fail;
    b99e:	2a03      	cmp	r2, #3
    b9a0:	d91a      	bls.n	b9d8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    b9a2:	0c82      	lsrs	r2, r0, #18
    b9a4:	f062 020f 	orn	r2, r2, #15
    b9a8:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    b9aa:	f3c0 3205 	ubfx	r2, r0, #12, #6
    b9ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b9b2:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    b9b4:	f3c0 1285 	ubfx	r2, r0, #6, #6
    b9b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b9bc:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    b9be:	1d08      	adds	r0, r1, #4
    b9c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b9c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b9c8:	70cb      	strb	r3, [r1, #3]
    b9ca:	4770      	bx	lr
    return nullptr;
    b9cc:	2000      	movs	r0, #0
    b9ce:	4770      	bx	lr
    b9d0:	2000      	movs	r0, #0
    b9d2:	4770      	bx	lr
    b9d4:	2000      	movs	r0, #0
    b9d6:	4770      	bx	lr
    b9d8:	2000      	movs	r0, #0
  }
    b9da:	4770      	bx	lr

0000b9dc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    b9dc:	4288      	cmp	r0, r1
    b9de:	d242      	bcs.n	ba66 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    b9e0:	b510      	push	{r4, lr}
    b9e2:	4603      	mov	r3, r0
    uint8_t ch = str[0];
    b9e4:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    b9e6:	f990 0000 	ldrsb.w	r0, [r0]
    b9ea:	2800      	cmp	r0, #0
    b9ec:	da10      	bge.n	ba10 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
    b9ee:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    b9f2:	28c0      	cmp	r0, #192	; 0xc0
    b9f4:	d00f      	beq.n	ba16 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
    b9f6:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    b9fa:	28e0      	cmp	r0, #224	; 0xe0
    b9fc:	d02e      	beq.n	ba5c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
    b9fe:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    ba02:	28f0      	cmp	r0, #240	; 0xf0
    ba04:	d131      	bne.n	ba6a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
    ba06:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    ba0a:	f04f 0c04 	mov.w	ip, #4
    ba0e:	e006      	b.n	ba1e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
    ba10:	6014      	str	r4, [r2, #0]
      return str + 1;
    ba12:	1c58      	adds	r0, r3, #1
  }
    ba14:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
    ba16:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    ba1a:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
    ba1e:	eb03 000c 	add.w	r0, r3, ip
    ba22:	4288      	cmp	r0, r1
    ba24:	d823      	bhi.n	ba6e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
    ba26:	1c59      	adds	r1, r3, #1
    ba28:	4684      	mov	ip, r0
      ch = str[i];
    ba2a:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    ba2e:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
    ba32:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    ba36:	d11c      	bne.n	ba72 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
    ba38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba3c:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
    ba40:	4561      	cmp	r1, ip
    ba42:	d1f2      	bne.n	ba2a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
    ba44:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    ba48:	4b0d      	ldr	r3, [pc, #52]	; (ba80 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
    ba4a:	4299      	cmp	r1, r3
    ba4c:	d813      	bhi.n	ba76 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    ba4e:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    ba52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    ba56:	d310      	bcc.n	ba7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
    ba58:	6014      	str	r4, [r2, #0]
    return str + n;
    ba5a:	e7db      	b.n	ba14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
    ba5c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    ba60:	f04f 0c03 	mov.w	ip, #3
    ba64:	e7db      	b.n	ba1e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
    ba66:	2000      	movs	r0, #0
  }
    ba68:	4770      	bx	lr
      return nullptr;
    ba6a:	2000      	movs	r0, #0
    ba6c:	e7d2      	b.n	ba14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    ba6e:	2000      	movs	r0, #0
    ba70:	e7d0      	b.n	ba14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
    ba72:	2000      	movs	r0, #0
    ba74:	e7ce      	b.n	ba14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    ba76:	2000      	movs	r0, #0
    ba78:	e7cc      	b.n	ba14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    ba7a:	2000      	movs	r0, #0
    ba7c:	e7ca      	b.n	ba14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    ba7e:	bf00      	nop
    ba80:	0010ff7f 	.word	0x0010ff7f

0000ba84 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    ba84:	287e      	cmp	r0, #126	; 0x7e
    ba86:	d80c      	bhi.n	baa2 <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    ba88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    ba8c:	b29b      	uxth	r3, r3
    ba8e:	2b19      	cmp	r3, #25
    ba90:	bf8c      	ite	hi
    ba92:	2300      	movhi	r3, #0
    ba94:	2301      	movls	r3, #1
    ba96:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    ba9a:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    ba9c:	4770      	bx	lr
    mid = left + (right - left)/2;
    ba9e:	469c      	mov	ip, r3
    baa0:	e004      	b.n	baac <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
    baa2:	b430      	push	{r4, r5}
  size_t right = size;
    baa4:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    baa8:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    baaa:	4c27      	ldr	r4, [pc, #156]	; (bb48 <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
    baac:	ebac 0302 	sub.w	r3, ip, r2
    bab0:	2b01      	cmp	r3, #1
    bab2:	d907      	bls.n	bac4 <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
    bab4:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    bab8:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
    babc:	4281      	cmp	r1, r0
    babe:	d8ee      	bhi.n	ba9e <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
    bac0:	461a      	mov	r2, r3
    bac2:	e7f3      	b.n	baac <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
    bac4:	b292      	uxth	r2, r2
    bac6:	4b20      	ldr	r3, [pc, #128]	; (bb48 <toUpcase(unsigned short)+0xc4>)
    bac8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    bacc:	4298      	cmp	r0, r3
    bace:	d31d      	bcc.n	bb0c <toUpcase(unsigned short)+0x88>
    bad0:	1ac1      	subs	r1, r0, r3
    bad2:	4c1d      	ldr	r4, [pc, #116]	; (bb48 <toUpcase(unsigned short)+0xc4>)
    bad4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    bad8:	78e4      	ldrb	r4, [r4, #3]
    bada:	42a1      	cmp	r1, r4
    badc:	da19      	bge.n	bb12 <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
    bade:	491a      	ldr	r1, [pc, #104]	; (bb48 <toUpcase(unsigned short)+0xc4>)
    bae0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    bae4:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    bae8:	2a01      	cmp	r2, #1
    baea:	d004      	beq.n	baf6 <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
    baec:	b14a      	cbz	r2, bb02 <toUpcase(unsigned short)+0x7e>
    baee:	b293      	uxth	r3, r2
    baf0:	4403      	add	r3, r0
    baf2:	b298      	uxth	r0, r3
    baf4:	e021      	b.n	bb3a <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
    baf6:	1ac3      	subs	r3, r0, r3
    baf8:	f003 0301 	and.w	r3, r3, #1
    bafc:	1ac3      	subs	r3, r0, r3
    bafe:	b298      	uxth	r0, r3
    bb00:	e01b      	b.n	bb3a <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
    bb02:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    bb06:	e7f3      	b.n	baf0 <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
    bb08:	461c      	mov	r4, r3
    bb0a:	e005      	b.n	bb18 <toUpcase(unsigned short)+0x94>
    bb0c:	244b      	movs	r4, #75	; 0x4b
    bb0e:	2200      	movs	r2, #0
    bb10:	e001      	b.n	bb16 <toUpcase(unsigned short)+0x92>
    bb12:	244b      	movs	r4, #75	; 0x4b
    bb14:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    bb16:	4d0d      	ldr	r5, [pc, #52]	; (bb4c <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
    bb18:	1aa3      	subs	r3, r4, r2
    bb1a:	2b01      	cmp	r3, #1
    bb1c:	d907      	bls.n	bb2e <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
    bb1e:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    bb22:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
    bb26:	4281      	cmp	r1, r0
    bb28:	d8ee      	bhi.n	bb08 <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
    bb2a:	461a      	mov	r2, r3
    bb2c:	e7f4      	b.n	bb18 <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
    bb2e:	b292      	uxth	r2, r2
    bb30:	4b06      	ldr	r3, [pc, #24]	; (bb4c <toUpcase(unsigned short)+0xc8>)
    bb32:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
    bb36:	4283      	cmp	r3, r0
    bb38:	d001      	beq.n	bb3e <toUpcase(unsigned short)+0xba>
}
    bb3a:	bc30      	pop	{r4, r5}
    bb3c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    bb3e:	4b03      	ldr	r3, [pc, #12]	; (bb4c <toUpcase(unsigned short)+0xc8>)
    bb40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bb44:	8858      	ldrh	r0, [r3, #2]
    bb46:	e7f8      	b.n	bb3a <toUpcase(unsigned short)+0xb6>
    bb48:	20001f9c 	.word	0x20001f9c
    bb4c:	20001e70 	.word	0x20001e70

0000bb50 <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bb50:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bb54:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bb56:	4b11      	ldr	r3, [pc, #68]	; (bb9c <EventResponder::runFromInterrupt()+0x4c>)
    bb58:	6818      	ldr	r0, [r3, #0]
		if (first) {
    bb5a:	b1d0      	cbz	r0, bb92 <EventResponder::runFromInterrupt()+0x42>
{
    bb5c:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
    bb5e:	461d      	mov	r5, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bb60:	4e0f      	ldr	r6, [pc, #60]	; (bba0 <EventResponder::runFromInterrupt()+0x50>)
    bb62:	2400      	movs	r4, #0
    bb64:	e009      	b.n	bb7a <EventResponder::runFromInterrupt()+0x2a>
    bb66:	6034      	str	r4, [r6, #0]
    bb68:	e00c      	b.n	bb84 <EventResponder::runFromInterrupt()+0x34>
			}
			enableInterrupts(irq);
			first->_triggered = false;
    bb6a:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    bb6c:	6883      	ldr	r3, [r0, #8]
    bb6e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bb70:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bb74:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    bb76:	6828      	ldr	r0, [r5, #0]
		if (first) {
    bb78:	b140      	cbz	r0, bb8c <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
    bb7a:	6943      	ldr	r3, [r0, #20]
    bb7c:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
    bb7e:	2b00      	cmp	r3, #0
    bb80:	d0f1      	beq.n	bb66 <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
    bb82:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bb84:	2a00      	cmp	r2, #0
    bb86:	d1f0      	bne.n	bb6a <EventResponder::runFromInterrupt()+0x1a>
    bb88:	b662      	cpsie	i
    bb8a:	e7ee      	b.n	bb6a <EventResponder::runFromInterrupt()+0x1a>
    bb8c:	b902      	cbnz	r2, bb90 <EventResponder::runFromInterrupt()+0x40>
    bb8e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    bb90:	bd70      	pop	{r4, r5, r6, pc}
    bb92:	b90a      	cbnz	r2, bb98 <EventResponder::runFromInterrupt()+0x48>
    bb94:	b662      	cpsie	i
			break;
    bb96:	4770      	bx	lr
    bb98:	4770      	bx	lr
    bb9a:	bf00      	nop
    bb9c:	20004b78 	.word	0x20004b78
    bba0:	20004b74 	.word	0x20004b74

0000bba4 <pendablesrvreq_isr>:
{
    bba4:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    bba6:	f7ff ffd3 	bl	bb50 <EventResponder::runFromInterrupt()>
}
    bbaa:	bd08      	pop	{r3, pc}

0000bbac <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bbac:	4b04      	ldr	r3, [pc, #16]	; (bbc0 <systick_isr+0x14>)
    bbae:	685a      	ldr	r2, [r3, #4]
    bbb0:	4b04      	ldr	r3, [pc, #16]	; (bbc4 <systick_isr+0x18>)
    bbb2:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
    bbb4:	4a04      	ldr	r2, [pc, #16]	; (bbc8 <systick_isr+0x1c>)
    bbb6:	6813      	ldr	r3, [r2, #0]
    bbb8:	3301      	adds	r3, #1
    bbba:	6013      	str	r3, [r2, #0]
}
    bbbc:	4770      	bx	lr
    bbbe:	bf00      	nop
    bbc0:	e0001000 	.word	0xe0001000
    bbc4:	200052b8 	.word	0x200052b8
    bbc8:	200052bc 	.word	0x200052bc

0000bbcc <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    bbcc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    bbd0:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    bbd2:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    bbd6:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    bbd8:	4293      	cmp	r3, r2
    bbda:	d202      	bcs.n	bbe2 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    bbdc:	3a01      	subs	r2, #1
    bbde:	1ad0      	subs	r0, r2, r3
}
    bbe0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    bbe2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    bbe4:	3901      	subs	r1, #1
    bbe6:	440a      	add	r2, r1
    bbe8:	1ad0      	subs	r0, r2, r3
    bbea:	4770      	bx	lr

0000bbec <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    bbec:	b672      	cpsid	i
	head = rx_buffer_head_;
    bbee:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    bbf2:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    bbf4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bbf8:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    bbfa:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    bbfc:	bf3c      	itt	cc
    bbfe:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    bc00:	1852      	addcc	r2, r2, r1
    bc02:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    bc04:	6902      	ldr	r2, [r0, #16]
    bc06:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    bc08:	f3c0 6002 	ubfx	r0, r0, #24, #3
    bc0c:	4418      	add	r0, r3
	__enable_irq();
    bc0e:	b662      	cpsie	i
	return avail;
}
    bc10:	4770      	bx	lr

0000bc12 <HardwareSerial::peek()>:
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
}

int HardwareSerial::peek(void)
{
    bc12:	4602      	mov	r2, r0
	uint32_t head, tail;

	head = rx_buffer_head_;
    bc14:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bc18:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    bc1a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bc1e:	b29b      	uxth	r3, r3
	if (head == tail) {
    bc20:	4299      	cmp	r1, r3
    bc22:	d00b      	beq.n	bc3c <HardwareSerial::peek()+0x2a>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bc24:	3301      	adds	r3, #1
    bc26:	6b91      	ldr	r1, [r2, #56]	; 0x38
    bc28:	4299      	cmp	r1, r3
    bc2a:	bf98      	it	ls
    bc2c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    bc2e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    bc30:	4299      	cmp	r1, r3
    bc32:	d921      	bls.n	bc78 <HardwareSerial::peek()+0x66>
		return rx_buffer_[tail];
    bc34:	6a12      	ldr	r2, [r2, #32]
    bc36:	5cd0      	ldrb	r0, [r2, r3]
    bc38:	b2c0      	uxtb	r0, r0
    bc3a:	4770      	bx	lr
		__disable_irq();
    bc3c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    bc3e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bc42:	b289      	uxth	r1, r1
		if (head == tail) {
    bc44:	428b      	cmp	r3, r1
    bc46:	d001      	beq.n	bc4c <HardwareSerial::peek()+0x3a>
		__enable_irq();
    bc48:	b662      	cpsie	i
    bc4a:	e7eb      	b.n	bc24 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    bc4c:	6903      	ldr	r3, [r0, #16]
    bc4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    bc50:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    bc54:	d00c      	beq.n	bc70 <HardwareSerial::peek()+0x5e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bc56:	69db      	ldr	r3, [r3, #28]
    bc58:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_head_ = 1;
    bc5c:	2101      	movs	r1, #1
    bc5e:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    bc62:	2100      	movs	r1, #0
    bc64:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    bc68:	6a12      	ldr	r2, [r2, #32]
    bc6a:	b2db      	uxtb	r3, r3
    bc6c:	7053      	strb	r3, [r2, #1]
    bc6e:	e001      	b.n	bc74 <HardwareSerial::peek()+0x62>
			int c = -1;	// assume nothing to return
    bc70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    bc74:	b662      	cpsie	i
			return c;
    bc76:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    bc78:	1a5b      	subs	r3, r3, r1
    bc7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    bc7c:	5cd0      	ldrb	r0, [r2, r3]
    bc7e:	b2c0      	uxtb	r0, r0
	}
}
    bc80:	4770      	bx	lr

0000bc82 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
    bc82:	4602      	mov	r2, r0
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    bc84:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bc88:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    bc8a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bc8e:	b29b      	uxth	r3, r3
	if (head == tail) {
    bc90:	4299      	cmp	r1, r3
    bc92:	d01b      	beq.n	bccc <HardwareSerial::read()+0x4a>
{
    bc94:	b430      	push	{r4, r5}
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bc96:	3301      	adds	r3, #1
    bc98:	6b94      	ldr	r4, [r2, #56]	; 0x38
    bc9a:	429c      	cmp	r4, r3
    bc9c:	bf98      	it	ls
    bc9e:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    bca0:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bca2:	4298      	cmp	r0, r3
    bca4:	d927      	bls.n	bcf6 <HardwareSerial::read()+0x74>
		c = rx_buffer_[tail];
    bca6:	6a10      	ldr	r0, [r2, #32]
    bca8:	5cc0      	ldrb	r0, [r0, r3]
    bcaa:	b2c0      	uxtb	r0, r0
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    bcac:	b29d      	uxth	r5, r3
    bcae:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    bcb2:	6d95      	ldr	r5, [r2, #88]	; 0x58
    bcb4:	b145      	cbz	r5, bcc8 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    bcb6:	4299      	cmp	r1, r3
    bcb8:	d322      	bcc.n	bd00 <HardwareSerial::read()+0x7e>
    bcba:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    bcbc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    bcbe:	4299      	cmp	r1, r3
    bcc0:	d302      	bcc.n	bcc8 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    bcc2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    bcc4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    bcc8:	bc30      	pop	{r4, r5}
    bcca:	4770      	bx	lr
		__disable_irq();
    bccc:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    bcce:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bcd2:	b289      	uxth	r1, r1
		if (head == tail) {
    bcd4:	428b      	cmp	r3, r1
    bcd6:	d001      	beq.n	bcdc <HardwareSerial::read()+0x5a>
		__enable_irq();
    bcd8:	b662      	cpsie	i
    bcda:	e7db      	b.n	bc94 <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    bcdc:	6903      	ldr	r3, [r0, #16]
    bcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bce0:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    bce4:	d003      	beq.n	bcee <HardwareSerial::read()+0x6c>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bce6:	69d8      	ldr	r0, [r3, #28]
    bce8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    bcec:	e001      	b.n	bcf2 <HardwareSerial::read()+0x70>
			c = -1;	// assume nothing to return
    bcee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    bcf2:	b662      	cpsie	i
}	
    bcf4:	4770      	bx	lr
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    bcf6:	1a18      	subs	r0, r3, r0
    bcf8:	6a55      	ldr	r5, [r2, #36]	; 0x24
    bcfa:	5c28      	ldrb	r0, [r5, r0]
    bcfc:	b2c0      	uxtb	r0, r0
    bcfe:	e7d5      	b.n	bcac <HardwareSerial::read()+0x2a>
		else avail = rx_buffer_total_size_ + head - tail;
    bd00:	440c      	add	r4, r1
    bd02:	1ae3      	subs	r3, r4, r3
    bd04:	e7da      	b.n	bcbc <HardwareSerial::read()+0x3a>

0000bd06 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
    bd06:	b510      	push	{r4, lr}
    bd08:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    bd0a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    bd0e:	b12b      	cbz	r3, bd1c <HardwareSerial::flush()+0x16>
    bd10:	f002 ff66 	bl	ebe0 <yield>
    bd14:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    bd18:	2b00      	cmp	r3, #0
    bd1a:	d1f9      	bne.n	bd10 <HardwareSerial::flush()+0xa>
}
    bd1c:	bd10      	pop	{r4, pc}
	...

0000bd20 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    bd20:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    bd24:	b99b      	cbnz	r3, bd4e <nvic_execution_priority()+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bd26:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    bd2a:	b998      	cbnz	r0, bd54 <nvic_execution_priority()+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    bd2c:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    bd30:	b123      	cbz	r3, bd3c <nvic_execution_priority()+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    bd32:	2b0f      	cmp	r3, #15
    bd34:	d904      	bls.n	bd40 <nvic_execution_priority()+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    bd36:	4a08      	ldr	r2, [pc, #32]	; (bd58 <nvic_execution_priority()+0x38>)
    bd38:	5cd0      	ldrb	r0, [r2, r3]
    bd3a:	e001      	b.n	bd40 <nvic_execution_priority()+0x20>
	uint32_t priority=256;
    bd3c:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    bd40:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    bd44:	b13b      	cbz	r3, bd56 <nvic_execution_priority()+0x36>
    bd46:	4298      	cmp	r0, r3
    bd48:	bf28      	it	cs
    bd4a:	4618      	movcs	r0, r3
	return priority;
    bd4c:	4770      	bx	lr
	if (faultmask) return -1;
    bd4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bd52:	4770      	bx	lr
	if (primask) return 0;
    bd54:	2000      	movs	r0, #0
}
    bd56:	4770      	bx	lr
    bd58:	e000e3f0 	.word	0xe000e3f0

0000bd5c <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    bd5c:	b570      	push	{r4, r5, r6, lr}
    bd5e:	4604      	mov	r4, r0
    bd60:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    bd62:	6d03      	ldr	r3, [r0, #80]	; 0x50
    bd64:	b113      	cbz	r3, bd6c <HardwareSerial::write9bit(unsigned long)+0x10>
    bd66:	6d42      	ldr	r2, [r0, #84]	; 0x54
    bd68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    bd6c:	7ea3      	ldrb	r3, [r4, #26]
    bd6e:	b133      	cbz	r3, bd7e <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    bd70:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    bd72:	6922      	ldr	r2, [r4, #16]
    bd74:	6993      	ldr	r3, [r2, #24]
    bd76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    bd7a:	6193      	str	r3, [r2, #24]
		__enable_irq();
    bd7c:	b662      	cpsie	i
		//digitalWriteFast(2, HIGH);
	}

	head = tx_buffer_head_;
    bd7e:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    bd82:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    bd84:	3501      	adds	r5, #1
    bd86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    bd88:	42ab      	cmp	r3, r5
    bd8a:	bf98      	it	ls
    bd8c:	2500      	movls	r5, #0
	while (tx_buffer_tail_ == head) {
    bd8e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bd92:	b29b      	uxth	r3, r3
    bd94:	429d      	cmp	r5, r3
    bd96:	d01f      	beq.n	bdd8 <HardwareSerial::write9bit(unsigned long)+0x7c>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    bd98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    bd9a:	42ab      	cmp	r3, r5
    bd9c:	d93e      	bls.n	be1c <HardwareSerial::write9bit(unsigned long)+0xc0>
		tx_buffer_[head] = c;
    bd9e:	69e3      	ldr	r3, [r4, #28]
    bda0:	b2f6      	uxtb	r6, r6
    bda2:	555e      	strb	r6, [r3, r5]
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
    bda4:	b672      	cpsid	i
	transmitting_ = 1;
    bda6:	2001      	movs	r0, #1
    bda8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    bdac:	b2ad      	uxth	r5, r5
    bdae:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    bdb2:	6922      	ldr	r2, [r4, #16]
    bdb4:	6993      	ldr	r3, [r2, #24]
    bdb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    bdba:	6193      	str	r3, [r2, #24]
	__enable_irq();
    bdbc:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    bdbe:	bd70      	pop	{r4, r5, r6, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    bdc0:	1a59      	subs	r1, r3, r1
    bdc2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bdc4:	5c41      	ldrb	r1, [r0, r1]
    bdc6:	b2c9      	uxtb	r1, r1
    bdc8:	e020      	b.n	be0c <HardwareSerial::write9bit(unsigned long)+0xb0>
		} else if (priority >= 256) 
    bdca:	28ff      	cmp	r0, #255	; 0xff
    bdcc:	dc23      	bgt.n	be16 <HardwareSerial::write9bit(unsigned long)+0xba>
	while (tx_buffer_tail_ == head) {
    bdce:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bdd2:	b29b      	uxth	r3, r3
    bdd4:	42ab      	cmp	r3, r5
    bdd6:	d1df      	bne.n	bd98 <HardwareSerial::write9bit(unsigned long)+0x3c>
		int priority = nvic_execution_priority();
    bdd8:	f7ff ffa2 	bl	bd20 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    bddc:	6963      	ldr	r3, [r4, #20]
    bdde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    bde2:	4283      	cmp	r3, r0
    bde4:	dbf1      	blt.n	bdca <HardwareSerial::write9bit(unsigned long)+0x6e>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    bde6:	6922      	ldr	r2, [r4, #16]
    bde8:	6953      	ldr	r3, [r2, #20]
    bdea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    bdee:	d0ee      	beq.n	bdce <HardwareSerial::write9bit(unsigned long)+0x72>
				uint32_t tail = tx_buffer_tail_;
    bdf0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bdf4:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    bdf6:	3301      	adds	r3, #1
    bdf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bdfa:	4299      	cmp	r1, r3
    bdfc:	bf98      	it	ls
    bdfe:	2300      	movls	r3, #0
				if (tail < tx_buffer_size_) {
    be00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    be02:	4299      	cmp	r1, r3
    be04:	d9dc      	bls.n	bdc0 <HardwareSerial::write9bit(unsigned long)+0x64>
					n = tx_buffer_[tail];
    be06:	69e1      	ldr	r1, [r4, #28]
    be08:	5cc9      	ldrb	r1, [r1, r3]
    be0a:	b2c9      	uxtb	r1, r1
				port->DATA  = n;
    be0c:	61d1      	str	r1, [r2, #28]
				tx_buffer_tail_ = tail;
    be0e:	b29b      	uxth	r3, r3
    be10:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    be14:	e7db      	b.n	bdce <HardwareSerial::write9bit(unsigned long)+0x72>
			yield(); // wait
    be16:	f002 fee3 	bl	ebe0 <yield>
    be1a:	e7d8      	b.n	bdce <HardwareSerial::write9bit(unsigned long)+0x72>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    be1c:	1aeb      	subs	r3, r5, r3
    be1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    be20:	b2f6      	uxtb	r6, r6
    be22:	54d6      	strb	r6, [r2, r3]
    be24:	e7be      	b.n	bda4 <HardwareSerial::write9bit(unsigned long)+0x48>

0000be26 <HardwareSerial::write(unsigned char)>:
{
    be26:	b508      	push	{r3, lr}
	return write9bit(c);
    be28:	f7ff ff98 	bl	bd5c <HardwareSerial::write9bit(unsigned long)>
}
    be2c:	bd08      	pop	{r3, pc}

0000be2e <HardwareSerial::IRQHandler()>:

void HardwareSerial::IRQHandler() 
{
    be2e:	b530      	push	{r4, r5, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    be30:	6903      	ldr	r3, [r0, #16]
    be32:	695a      	ldr	r2, [r3, #20]
    be34:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    be38:	d047      	beq.n	beca <HardwareSerial::IRQHandler()+0x9c>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    be3c:	f3c3 6c02 	ubfx	ip, r3, #24, #3
		if (avail) {
    be40:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    be44:	d038      	beq.n	beb8 <HardwareSerial::IRQHandler()+0x8a>
			uint32_t newhead;
			head = rx_buffer_head_;
    be46:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
    be4a:	fa1f fe8e 	uxth.w	lr, lr
			tail = rx_buffer_tail_;
    be4e:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    be52:	b2a4      	uxth	r4, r4
    be54:	e009      	b.n	be6a <HardwareSerial::IRQHandler()+0x3c>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    be56:	1a59      	subs	r1, r3, r1
    be58:	6a45      	ldr	r5, [r0, #36]	; 0x24
    be5a:	b2d2      	uxtb	r2, r2
    be5c:	546a      	strb	r2, [r5, r1]
					head = newhead;
    be5e:	469e      	mov	lr, r3
					}
				}
			} while (--avail > 0) ;
    be60:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    be64:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    be68:	d016      	beq.n	be98 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    be6a:	6903      	ldr	r3, [r0, #16]
    be6c:	69da      	ldr	r2, [r3, #28]
				newhead = head + 1;
    be6e:	f10e 0301 	add.w	r3, lr, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    be72:	6b81      	ldr	r1, [r0, #56]	; 0x38
    be74:	4299      	cmp	r1, r3
    be76:	bf98      	it	ls
    be78:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    be7a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    be7e:	b289      	uxth	r1, r1
    be80:	4299      	cmp	r1, r3
    be82:	d0ed      	beq.n	be60 <HardwareSerial::IRQHandler()+0x32>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    be84:	f3c2 0209 	ubfx	r2, r2, #0, #10
					if (newhead < rx_buffer_size_) {
    be88:	6b01      	ldr	r1, [r0, #48]	; 0x30
    be8a:	4299      	cmp	r1, r3
    be8c:	d9e3      	bls.n	be56 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_[head] = n;
    be8e:	6a01      	ldr	r1, [r0, #32]
    be90:	b2d2      	uxtb	r2, r2
    be92:	54ca      	strb	r2, [r1, r3]
					head = newhead;
    be94:	469e      	mov	lr, r3
    be96:	e7e3      	b.n	be60 <HardwareSerial::IRQHandler()+0x32>
			rx_buffer_head_ = head;
    be98:	fa1f f38e 	uxth.w	r3, lr
    be9c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    bea0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    bea2:	b14b      	cbz	r3, beb8 <HardwareSerial::IRQHandler()+0x8a>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    bea4:	45a6      	cmp	lr, r4
    bea6:	d320      	bcc.n	beea <HardwareSerial::IRQHandler()+0xbc>
    bea8:	ebae 0e04 	sub.w	lr, lr, r4
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
    beac:	6c02      	ldr	r2, [r0, #64]	; 0x40
    beae:	4572      	cmp	r2, lr
    beb0:	d802      	bhi.n	beb8 <HardwareSerial::IRQHandler()+0x8a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    beb2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    beb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    beb8:	6903      	ldr	r3, [r0, #16]
    beba:	695a      	ldr	r2, [r3, #20]
    bebc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    bec0:	d003      	beq.n	beca <HardwareSerial::IRQHandler()+0x9c>
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    bec2:	695a      	ldr	r2, [r3, #20]
    bec4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    bec8:	615a      	str	r2, [r3, #20]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    beca:	6903      	ldr	r3, [r0, #16]
    becc:	699d      	ldr	r5, [r3, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    bece:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    bed2:	d02c      	beq.n	bf2e <HardwareSerial::IRQHandler()+0x100>
    bed4:	695b      	ldr	r3, [r3, #20]
    bed6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    beda:	d028      	beq.n	bf2e <HardwareSerial::IRQHandler()+0x100>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    bedc:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    bee0:	b2a4      	uxth	r4, r4
		tail = tx_buffer_tail_;
    bee2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    bee6:	b29b      	uxth	r3, r3
    bee8:	e00e      	b.n	bf08 <HardwareSerial::IRQHandler()+0xda>
				else avail = rx_buffer_total_size_ + head - tail;
    beea:	6b82      	ldr	r2, [r0, #56]	; 0x38
    beec:	1b12      	subs	r2, r2, r4
    beee:	4496      	add	lr, r2
    bef0:	e7dc      	b.n	beac <HardwareSerial::IRQHandler()+0x7e>
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    bef2:	1a9a      	subs	r2, r3, r2
    bef4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bef6:	5c8a      	ldrb	r2, [r1, r2]
    bef8:	b2d2      	uxtb	r2, r2
			}
			port->DATA = n;
    befa:	6901      	ldr	r1, [r0, #16]
    befc:	61ca      	str	r2, [r1, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    befe:	6902      	ldr	r2, [r0, #16]
    bf00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    bf02:	f412 6f80 	tst.w	r2, #1024	; 0x400
    bf06:	d10d      	bne.n	bf24 <HardwareSerial::IRQHandler()+0xf6>
			if (head == tail) break;
    bf08:	42a3      	cmp	r3, r4
    bf0a:	d02f      	beq.n	bf6c <HardwareSerial::IRQHandler()+0x13e>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bf0c:	3301      	adds	r3, #1
    bf0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    bf10:	429a      	cmp	r2, r3
    bf12:	bf98      	it	ls
    bf14:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    bf16:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    bf18:	429a      	cmp	r2, r3
    bf1a:	d9ea      	bls.n	bef2 <HardwareSerial::IRQHandler()+0xc4>
				n = tx_buffer_[tail];
    bf1c:	69c2      	ldr	r2, [r0, #28]
    bf1e:	5cd2      	ldrb	r2, [r2, r3]
    bf20:	b2d2      	uxtb	r2, r2
    bf22:	e7ea      	b.n	befa <HardwareSerial::IRQHandler()+0xcc>
		tx_buffer_tail_ = tail;
    bf24:	b29a      	uxth	r2, r3
    bf26:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		if (head == tail) {
    bf2a:	42a3      	cmp	r3, r4
    bf2c:	d020      	beq.n	bf70 <HardwareSerial::IRQHandler()+0x142>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    bf2e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
    bf32:	d01a      	beq.n	bf6a <HardwareSerial::IRQHandler()+0x13c>
    bf34:	6903      	ldr	r3, [r0, #16]
    bf36:	695b      	ldr	r3, [r3, #20]
    bf38:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    bf3c:	d015      	beq.n	bf6a <HardwareSerial::IRQHandler()+0x13c>
	{
		transmitting_ = 0;
    bf3e:	2300      	movs	r3, #0
    bf40:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    bf44:	6d03      	ldr	r3, [r0, #80]	; 0x50
    bf46:	b113      	cbz	r3, bf4e <HardwareSerial::IRQHandler()+0x120>
    bf48:	6d42      	ldr	r2, [r0, #84]	; 0x54
    bf4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    bf4e:	7e83      	ldrb	r3, [r0, #26]
    bf50:	b133      	cbz	r3, bf60 <HardwareSerial::IRQHandler()+0x132>
			__disable_irq();
    bf52:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    bf54:	6902      	ldr	r2, [r0, #16]
    bf56:	6993      	ldr	r3, [r2, #24]
    bf58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    bf5c:	6193      	str	r3, [r2, #24]
			__enable_irq();
    bf5e:	b662      	cpsie	i
			//digitalWriteFast(2, LOW);
		}

		port->CTRL &= ~LPUART_CTRL_TCIE;
    bf60:	6902      	ldr	r2, [r0, #16]
    bf62:	6993      	ldr	r3, [r2, #24]
    bf64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    bf68:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    bf6a:	bd30      	pop	{r4, r5, pc}
		tx_buffer_tail_ = tail;
    bf6c:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    bf70:	6902      	ldr	r2, [r0, #16]
    bf72:	6993      	ldr	r3, [r2, #24]
    bf74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    bf78:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    bf7a:	6902      	ldr	r2, [r0, #16]
    bf7c:	6993      	ldr	r3, [r2, #24]
    bf7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    bf82:	6193      	str	r3, [r2, #24]
    bf84:	e7d3      	b.n	bf2e <HardwareSerial::IRQHandler()+0x100>
	...

0000bf88 <HardwareSerial::addToSerialEventsList()>:


void HardwareSerial::addToSerialEventsList() {
    bf88:	b410      	push	{r4}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bf8a:	4b0e      	ldr	r3, [pc, #56]	; (bfc4 <HardwareSerial::addToSerialEventsList()+0x3c>)
    bf8c:	781c      	ldrb	r4, [r3, #0]
    bf8e:	b15c      	cbz	r4, bfa8 <HardwareSerial::addToSerialEventsList()+0x20>
    bf90:	490d      	ldr	r1, [pc, #52]	; (bfc8 <HardwareSerial::addToSerialEventsList()+0x40>)
    bf92:	1f0b      	subs	r3, r1, #4
    bf94:	1e62      	subs	r2, r4, #1
    bf96:	b2d2      	uxtb	r2, r2
    bf98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    bf9c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bfa0:	4282      	cmp	r2, r0
    bfa2:	d00c      	beq.n	bfbe <HardwareSerial::addToSerialEventsList()+0x36>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bfa4:	428b      	cmp	r3, r1
    bfa6:	d1f9      	bne.n	bf9c <HardwareSerial::addToSerialEventsList()+0x14>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    bfa8:	1c62      	adds	r2, r4, #1
    bfaa:	4b06      	ldr	r3, [pc, #24]	; (bfc4 <HardwareSerial::addToSerialEventsList()+0x3c>)
    bfac:	701a      	strb	r2, [r3, #0]
    bfae:	4b06      	ldr	r3, [pc, #24]	; (bfc8 <HardwareSerial::addToSerialEventsList()+0x40>)
    bfb0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    bfb4:	4a05      	ldr	r2, [pc, #20]	; (bfcc <HardwareSerial::addToSerialEventsList()+0x44>)
    bfb6:	7813      	ldrb	r3, [r2, #0]
    bfb8:	f043 0302 	orr.w	r3, r3, #2
    bfbc:	7013      	strb	r3, [r2, #0]
}
    bfbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    bfc2:	4770      	bx	lr
    bfc4:	200052f9 	.word	0x200052f9
    bfc8:	20004b80 	.word	0x20004b80
    bfcc:	20003a1b 	.word	0x20003a1b

0000bfd0 <HardwareSerial::begin(unsigned long, unsigned short)>:
{
    bfd0:	b570      	push	{r4, r5, r6, lr}
    bfd2:	ee07 1a90 	vmov	s15, r1
    bfd6:	4614      	mov	r4, r2
	float base = (float)UART_CLOCK / (float)baud;
    bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    bfdc:	ed9f 7a93 	vldr	s14, [pc, #588]	; c22c <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>
    bfe0:	ee87 5a27 	vdiv.f32	s10, s14, s15
	for (int osr=4; osr <= 32; osr++) {
    bfe4:	2104      	movs	r1, #4
	int bestosr = 4;
    bfe6:	468e      	mov	lr, r1
	int bestdiv = 1;
    bfe8:	2201      	movs	r2, #1
	float besterr = 1e20;
    bfea:	ed9f 6a91 	vldr	s12, [pc, #580]	; c230 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>
		int divint = (int)(div + 0.5f);
    bfee:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    bff2:	f641 7cff 	movw	ip, #8191	; 0x1fff
    bff6:	e002      	b.n	bffe <HardwareSerial::begin(unsigned long, unsigned short)+0x2e>
	for (int osr=4; osr <= 32; osr++) {
    bff8:	3101      	adds	r1, #1
    bffa:	2921      	cmp	r1, #33	; 0x21
    bffc:	d02a      	beq.n	c054 <HardwareSerial::begin(unsigned long, unsigned short)+0x84>
		float div = base / (float)osr;
    bffe:	ee07 1a90 	vmov	s15, r1
    c002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c006:	ee85 7a27 	vdiv.f32	s14, s10, s15
		int divint = (int)(div + 0.5f);
    c00a:	ee77 7a25 	vadd.f32	s15, s14, s11
    c00e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c012:	ee17 3a90 	vmov	r3, s15
    c016:	4563      	cmp	r3, ip
    c018:	bfa8      	it	ge
    c01a:	4663      	movge	r3, ip
    c01c:	2b01      	cmp	r3, #1
    c01e:	bfb8      	it	lt
    c020:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    c022:	ee07 3a90 	vmov	s15, r3
    c026:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    c02a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    c02e:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    c036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c03a:	bf48      	it	mi
    c03c:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c040:	eef4 7ac6 	vcmpe.f32	s15, s12
    c044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c048:	d8d6      	bhi.n	bff8 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
    c04a:	468e      	mov	lr, r1
			bestdiv = divint;
    c04c:	461a      	mov	r2, r3
			besterr = err;
    c04e:	eeb0 6a67 	vmov.f32	s12, s15
    c052:	e7d1      	b.n	bff8 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    c054:	2300      	movs	r3, #0
    c056:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    c05a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
    c05e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c062:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c066:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c068:	6941      	ldr	r1, [r0, #20]
    c06a:	f8b1 605c 	ldrh.w	r6, [r1, #92]	; 0x5c
    c06e:	1bae      	subs	r6, r5, r6
    c070:	63c6      	str	r6, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c072:	f8b1 605e 	ldrh.w	r6, [r1, #94]	; 0x5e
    c076:	1bad      	subs	r5, r5, r6
    c078:	6405      	str	r5, [r0, #64]	; 0x40
	transmitting_ = 0;
    c07a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	hardware->ccm_register |= hardware->ccm_value;
    c07e:	690d      	ldr	r5, [r1, #16]
    c080:	682b      	ldr	r3, [r5, #0]
    c082:	6949      	ldr	r1, [r1, #20]
    c084:	430b      	orrs	r3, r1
    c086:	602b      	str	r3, [r5, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    c088:	f404 7300 	and.w	r3, r4, #512	; 0x200
    c08c:	2b00      	cmp	r3, #0
    c08e:	bf14      	ite	ne
    c090:	2301      	movne	r3, #1
    c092:	2300      	moveq	r3, #0
    c094:	7683      	strb	r3, [r0, #26]
	if (!half_duplex_mode_)  {
    c096:	f040 80aa 	bne.w	c1ee <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c09a:	4966      	ldr	r1, [pc, #408]	; (c234 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c09c:	6943      	ldr	r3, [r0, #20]
    c09e:	7e05      	ldrb	r5, [r0, #24]
    c0a0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c0a4:	7e1b      	ldrb	r3, [r3, #24]
    c0a6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c0aa:	689b      	ldr	r3, [r3, #8]
    c0ac:	4d62      	ldr	r5, [pc, #392]	; (c238 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    c0ae:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c0b0:	6943      	ldr	r3, [r0, #20]
    c0b2:	7e05      	ldrb	r5, [r0, #24]
    c0b4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c0b8:	7e1d      	ldrb	r5, [r3, #24]
    c0ba:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c0be:	6849      	ldr	r1, [r1, #4]
    c0c0:	69db      	ldr	r3, [r3, #28]
    c0c2:	600b      	str	r3, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c0c4:	7e01      	ldrb	r1, [r0, #24]
    c0c6:	6943      	ldr	r3, [r0, #20]
    c0c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c0cc:	6a19      	ldr	r1, [r3, #32]
    c0ce:	b109      	cbz	r1, c0d4 <HardwareSerial::begin(unsigned long, unsigned short)+0x104>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c0d2:	600b      	str	r3, [r1, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c0d4:	4957      	ldr	r1, [pc, #348]	; (c234 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c0d6:	6943      	ldr	r3, [r0, #20]
    c0d8:	7e45      	ldrb	r5, [r0, #25]
    c0da:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c0de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c0e2:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c0e6:	689b      	ldr	r3, [r3, #8]
    c0e8:	25d9      	movs	r5, #217	; 0xd9
    c0ea:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c0ec:	6943      	ldr	r3, [r0, #20]
    c0ee:	7e45      	ldrb	r5, [r0, #25]
    c0f0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c0f4:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c0f8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c0fc:	6849      	ldr	r1, [r1, #4]
    c0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c100:	600b      	str	r3, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    c102:	7e41      	ldrb	r1, [r0, #25]
    c104:	6943      	ldr	r3, [r0, #20]
    c106:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c10a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    c10c:	b109      	cbz	r1, c112 <HardwareSerial::begin(unsigned long, unsigned short)+0x142>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    c10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c110:	600b      	str	r3, [r1, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c112:	6901      	ldr	r1, [r0, #16]
    c114:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    c118:	061b      	lsls	r3, r3, #24
    c11a:	f003 5cf8 	and.w	ip, r3, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    c11e:	f1be 0f08 	cmp.w	lr, #8
    c122:	bfcc      	ite	gt
    c124:	f04f 0e00 	movgt.w	lr, #0
    c128:	f04f 0e01 	movle.w	lr, #1
    c12c:	ea42 434e 	orr.w	r3, r2, lr, lsl #17
    c130:	ea4c 0303 	orr.w	r3, ip, r3
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c134:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    c136:	6903      	ldr	r3, [r0, #16]
    c138:	2200      	movs	r2, #0
    c13a:	60da      	str	r2, [r3, #12]
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c13c:	6943      	ldr	r3, [r0, #20]
    c13e:	6859      	ldr	r1, [r3, #4]
    c140:	785b      	ldrb	r3, [r3, #1]
    c142:	3310      	adds	r3, #16
    c144:	4a3d      	ldr	r2, [pc, #244]	; (c23c <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    c146:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c14a:	6943      	ldr	r3, [r0, #20]
    c14c:	785a      	ldrb	r2, [r3, #1]
    c14e:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
    c152:	4b3b      	ldr	r3, [pc, #236]	; (c240 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    c154:	54d1      	strb	r1, [r2, r3]
	NVIC_ENABLE_IRQ(hardware->irq);
    c156:	6943      	ldr	r3, [r0, #20]
    c158:	785a      	ldrb	r2, [r3, #1]
    c15a:	4b3a      	ldr	r3, [pc, #232]	; (c244 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
    c15c:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c160:	009b      	lsls	r3, r3, #2
    c162:	f002 021f 	and.w	r2, r2, #31
    c166:	2101      	movs	r1, #1
    c168:	fa01 f202 	lsl.w	r2, r1, r2
    c16c:	601a      	str	r2, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c16e:	6903      	ldr	r3, [r0, #16]
    c170:	f04f 1202 	mov.w	r2, #131074	; 0x20002
    c174:	62da      	str	r2, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c176:	6902      	ldr	r2, [r0, #16]
    c178:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c17a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    c17e:	6293      	str	r3, [r2, #40]	; 0x28
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c180:	f004 0203 	and.w	r2, r4, #3
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c184:	f014 0f04 	tst.w	r4, #4
    c188:	d14a      	bne.n	c220 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c18a:	f442 1370 	orr.w	r3, r2, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c18e:	f004 020f 	and.w	r2, r4, #15
    c192:	2a04      	cmp	r2, #4
    c194:	bf08      	it	eq
    c196:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c19a:	f014 0f20 	tst.w	r4, #32
    c19e:	bf18      	it	ne
    c1a0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    c1a4:	7e82      	ldrb	r2, [r0, #26]
    c1a6:	b10a      	cbz	r2, c1ac <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    c1a8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	port->CTRL = ctrl;
    c1ac:	6902      	ldr	r2, [r0, #16]
    c1ae:	6193      	str	r3, [r2, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c1b0:	f014 0f08 	tst.w	r4, #8
    c1b4:	d004      	beq.n	c1c0 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f0>
    c1b6:	6902      	ldr	r2, [r0, #16]
    c1b8:	6913      	ldr	r3, [r2, #16]
    c1ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c1be:	6113      	str	r3, [r2, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c1c0:	6902      	ldr	r2, [r0, #16]
    c1c2:	6953      	ldr	r3, [r2, #20]
    c1c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c1c8:	f014 0f10 	tst.w	r4, #16
    c1cc:	bf18      	it	ne
    c1ce:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    c1d2:	6153      	str	r3, [r2, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    c1d4:	f414 7f80 	tst.w	r4, #256	; 0x100
    c1d8:	d004      	beq.n	c1e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    c1da:	6902      	ldr	r2, [r0, #16]
    c1dc:	6913      	ldr	r3, [r2, #16]
    c1de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c1e2:	6113      	str	r3, [r2, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c1e4:	6943      	ldr	r3, [r0, #20]
    c1e6:	68db      	ldr	r3, [r3, #12]
    c1e8:	781b      	ldrb	r3, [r3, #0]
    c1ea:	b1e3      	cbz	r3, c226 <HardwareSerial::begin(unsigned long, unsigned short)+0x256>
};
    c1ec:	bd70      	pop	{r4, r5, r6, pc}
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    c1ee:	4911      	ldr	r1, [pc, #68]	; (c234 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c1f0:	6943      	ldr	r3, [r0, #20]
    c1f2:	7e45      	ldrb	r5, [r0, #25]
    c1f4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c1f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c1fc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c200:	689b      	ldr	r3, [r3, #8]
    c202:	f24f 05d9 	movw	r5, #61657	; 0xf0d9
    c206:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c208:	6943      	ldr	r3, [r0, #20]
    c20a:	7e45      	ldrb	r5, [r0, #25]
    c20c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c210:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c214:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c218:	6849      	ldr	r1, [r1, #4]
    c21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c21c:	600b      	str	r3, [r1, #0]
    c21e:	e770      	b.n	c102 <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c220:	4b09      	ldr	r3, [pc, #36]	; (c248 <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    c222:	4313      	orrs	r3, r2
    c224:	e7b3      	b.n	c18e <HardwareSerial::begin(unsigned long, unsigned short)+0x1be>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c226:	f7ff feaf 	bl	bf88 <HardwareSerial::addToSerialEventsList()>
};
    c22a:	e7df      	b.n	c1ec <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
    c22c:	4bb71b00 	.word	0x4bb71b00
    c230:	60ad78ec 	.word	0x60ad78ec
    c234:	20002828 	.word	0x20002828
    c238:	0001f038 	.word	0x0001f038
    c23c:	20003c00 	.word	0x20003c00
    c240:	e000e400 	.word	0xe000e400
    c244:	38003840 	.word	0x38003840
    c248:	003c0010 	.word	0x003c0010

0000c24c <IRQHandler_Serial5>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
    c24c:	b508      	push	{r3, lr}
	Serial5.IRQHandler();
    c24e:	4802      	ldr	r0, [pc, #8]	; (c258 <IRQHandler_Serial5+0xc>)
    c250:	f7ff fded 	bl	be2e <HardwareSerial::IRQHandler()>
}
    c254:	bd08      	pop	{r3, pc}
    c256:	bf00      	nop
    c258:	200046a0 	.word	0x200046a0

0000c25c <_GLOBAL__sub_I_IRQHandler_Serial5>:
    c25c:	4b16      	ldr	r3, [pc, #88]	; (c2b8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x5c>)
    c25e:	2200      	movs	r2, #0
    c260:	605a      	str	r2, [r3, #4]
    c262:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c266:	6099      	str	r1, [r3, #8]
    c268:	731a      	strb	r2, [r3, #12]
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c26a:	4914      	ldr	r1, [pc, #80]	; (c2bc <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    c26c:	6019      	str	r1, [r3, #0]
		port(myport), hardware(myhardware),
    c26e:	4914      	ldr	r1, [pc, #80]	; (c2c0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    c270:	6119      	str	r1, [r3, #16]
    c272:	4914      	ldr	r1, [pc, #80]	; (c2c4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    c274:	6159      	str	r1, [r3, #20]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c276:	761a      	strb	r2, [r3, #24]
    c278:	765a      	strb	r2, [r3, #25]
    c27a:	769a      	strb	r2, [r3, #26]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c27c:	4912      	ldr	r1, [pc, #72]	; (c2c8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    c27e:	61d9      	str	r1, [r3, #28]
    c280:	4912      	ldr	r1, [pc, #72]	; (c2cc <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    c282:	6219      	str	r1, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c284:	625a      	str	r2, [r3, #36]	; 0x24
    c286:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c288:	2028      	movs	r0, #40	; 0x28
    c28a:	62d8      	str	r0, [r3, #44]	; 0x2c
    c28c:	2140      	movs	r1, #64	; 0x40
    c28e:	6319      	str	r1, [r3, #48]	; 0x30
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c290:	6358      	str	r0, [r3, #52]	; 0x34
    c292:	6399      	str	r1, [r3, #56]	; 0x38
    c294:	63da      	str	r2, [r3, #60]	; 0x3c
    c296:	641a      	str	r2, [r3, #64]	; 0x40
    c298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    c29c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    c2a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    c2a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    c2a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    c2ac:	651a      	str	r2, [r3, #80]	; 0x50
    c2ae:	655a      	str	r2, [r3, #84]	; 0x54
    c2b0:	659a      	str	r2, [r3, #88]	; 0x58
    c2b2:	65da      	str	r2, [r3, #92]	; 0x5c
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    c2b4:	4770      	bx	lr
    c2b6:	bf00      	nop
    c2b8:	200046a0 	.word	0x200046a0
    c2bc:	200022c8 	.word	0x200022c8
    c2c0:	401a0000 	.word	0x401a0000
    c2c4:	200032d8 	.word	0x200032d8
    c2c8:	20004b08 	.word	0x20004b08
    c2cc:	20004ac8 	.word	0x20004ac8

0000c2d0 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c2d2:	b179      	cbz	r1, c2f4 <Print::write(unsigned char const*, unsigned int)+0x24>
    c2d4:	4606      	mov	r6, r0
    c2d6:	460c      	mov	r4, r1
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c2d8:	b172      	cbz	r2, c2f8 <Print::write(unsigned char const*, unsigned int)+0x28>
    c2da:	188f      	adds	r7, r1, r2
	size_t count = 0;
    c2dc:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    c2de:	6833      	ldr	r3, [r6, #0]
    c2e0:	681b      	ldr	r3, [r3, #0]
    c2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
    c2e6:	4630      	mov	r0, r6
    c2e8:	4798      	blx	r3
    c2ea:	4405      	add	r5, r0
    c2ec:	42a7      	cmp	r7, r4
    c2ee:	d1f6      	bne.n	c2de <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    c2f0:	4628      	mov	r0, r5
    c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    c2f4:	2500      	movs	r5, #0
    c2f6:	e7fb      	b.n	c2f0 <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
    c2f8:	4615      	mov	r5, r2
    c2fa:	e7f9      	b.n	c2f0 <Print::write(unsigned char const*, unsigned int)+0x20>

0000c2fc <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    c2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c300:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
    c302:	688c      	ldr	r4, [r1, #8]
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c304:	b1ec      	cbz	r4, c342 <Print::print(String const&)+0x46>
    c306:	4606      	mov	r6, r0
    c308:	4688      	mov	r8, r1
	unsigned int index = 0;
    c30a:	2500      	movs	r5, #0
	size_t count = 0;
    c30c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    c30e:	f04f 0921 	mov.w	r9, #33	; 0x21
    c312:	462b      	mov	r3, r5
    c314:	464a      	mov	r2, r9
    c316:	a901      	add	r1, sp, #4
    c318:	4640      	mov	r0, r8
    c31a:	f000 fb8d 	bl	ca38 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    c31e:	4622      	mov	r2, r4
    c320:	2c20      	cmp	r4, #32
    c322:	bf28      	it	cs
    c324:	2220      	movcs	r2, #32
		index += nbytes;
    c326:	4415      	add	r5, r2
		len -= nbytes;
    c328:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    c32a:	6833      	ldr	r3, [r6, #0]
    c32c:	685b      	ldr	r3, [r3, #4]
    c32e:	a901      	add	r1, sp, #4
    c330:	4630      	mov	r0, r6
    c332:	4798      	blx	r3
    c334:	4407      	add	r7, r0
	while (len > 0) {
    c336:	2c00      	cmp	r4, #0
    c338:	d1eb      	bne.n	c312 <Print::print(String const&)+0x16>
	}
	return count;
}
    c33a:	4638      	mov	r0, r7
    c33c:	b00b      	add	sp, #44	; 0x2c
    c33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
    c342:	4627      	mov	r7, r4
	return count;
    c344:	e7f9      	b.n	c33a <Print::print(String const&)+0x3e>

0000c346 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    c346:	b500      	push	{lr}
    c348:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c34a:	f640 230d 	movw	r3, #2573	; 0xa0d
    c34e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c352:	6803      	ldr	r3, [r0, #0]
    c354:	685b      	ldr	r3, [r3, #4]
    c356:	2202      	movs	r2, #2
    c358:	a901      	add	r1, sp, #4
    c35a:	4798      	blx	r3
}
    c35c:	b003      	add	sp, #12
    c35e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c364 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c364:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c366:	4b04      	ldr	r3, [pc, #16]	; (c378 <_write+0x14>)
    c368:	2802      	cmp	r0, #2
    c36a:	bf88      	it	hi
    c36c:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c36e:	6818      	ldr	r0, [r3, #0]
    c370:	6844      	ldr	r4, [r0, #4]
    c372:	4618      	mov	r0, r3
    c374:	47a0      	blx	r4
}
    c376:	bd10      	pop	{r4, pc}
    c378:	200032c8 	.word	0x200032c8

0000c37c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c37c:	b530      	push	{r4, r5, lr}
    c37e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c380:	b92a      	cbnz	r2, c38e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    c382:	6803      	ldr	r3, [r0, #0]
    c384:	681b      	ldr	r3, [r3, #0]
    c386:	b2c9      	uxtb	r1, r1
    c388:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c38a:	b00b      	add	sp, #44	; 0x2c
    c38c:	bd30      	pop	{r4, r5, pc}
    c38e:	4696      	mov	lr, r2
		base = 10;
    c390:	2a01      	cmp	r2, #1
    c392:	bf14      	ite	ne
    c394:	4696      	movne	lr, r2
    c396:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
    c39a:	b9b9      	cbnz	r1, c3cc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
    c39c:	2230      	movs	r2, #48	; 0x30
    c39e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c3a2:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
    c3a6:	b14b      	cbz	r3, c3bc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
    c3a8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c3ac:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
    c3b0:	f10c 0328 	add.w	r3, ip, #40	; 0x28
    c3b4:	446b      	add	r3, sp
    c3b6:	222d      	movs	r2, #45	; 0x2d
    c3b8:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    c3bc:	6803      	ldr	r3, [r0, #0]
    c3be:	685b      	ldr	r3, [r3, #4]
    c3c0:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
    c3c4:	a901      	add	r1, sp, #4
    c3c6:	4461      	add	r1, ip
    c3c8:	4798      	blx	r3
    c3ca:	e7de      	b.n	c38a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
    c3cc:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
    c3d0:	4674      	mov	r4, lr
    c3d2:	e004      	b.n	c3de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
    c3d4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c3d8:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
    c3dc:	4611      	mov	r1, r2
			digit = n % base;
    c3de:	fbb1 f2fe 	udiv	r2, r1, lr
    c3e2:	fb0e 1212 	mls	r2, lr, r2, r1
    c3e6:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c3e8:	2a09      	cmp	r2, #9
    c3ea:	bf94      	ite	ls
    c3ec:	3230      	addls	r2, #48	; 0x30
    c3ee:	3237      	addhi	r2, #55	; 0x37
    c3f0:	b2d2      	uxtb	r2, r2
    c3f2:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    c3f6:	446d      	add	r5, sp
    c3f8:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    c3fc:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
    c400:	428c      	cmp	r4, r1
    c402:	d9e7      	bls.n	c3d4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
    c404:	e7cf      	b.n	c3a6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>
	...

0000c408 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    c408:	b570      	push	{r4, r5, r6, lr}
    c40a:	ed2d 8b02 	vpush	{d8}
    c40e:	b086      	sub	sp, #24
    c410:	4605      	mov	r5, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c412:	eeb4 0b40 	vcmp.f64	d0, d0
    c416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c41a:	d666      	bvs.n	c4ea <Print::printFloat(double, unsigned char)+0xe2>
    c41c:	460c      	mov	r4, r1
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c41e:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c422:	ed9f 6b4b 	vldr	d6, [pc, #300]	; c550 <Print::printFloat(double, unsigned char)+0x148>
    c426:	eeb4 7b46 	vcmp.f64	d7, d6
    c42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c42e:	dc63      	bgt.n	c4f8 <Print::printFloat(double, unsigned char)+0xf0>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c430:	ed9f 7b49 	vldr	d7, [pc, #292]	; c558 <Print::printFloat(double, unsigned char)+0x150>
    c434:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c43c:	dc67      	bgt.n	c50e <Print::printFloat(double, unsigned char)+0x106>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c43e:	ed9f 7b48 	vldr	d7, [pc, #288]	; c560 <Print::printFloat(double, unsigned char)+0x158>
    c442:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c44a:	d467      	bmi.n	c51c <Print::printFloat(double, unsigned char)+0x114>
	
	// Handle negative numbers
	if (number < 0.0) {
    c44c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c454:	d469      	bmi.n	c52a <Print::printFloat(double, unsigned char)+0x122>
	uint8_t sign=0;
    c456:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    c458:	2c00      	cmp	r4, #0
    c45a:	d06a      	beq.n	c532 <Print::printFloat(double, unsigned char)+0x12a>
    c45c:	f04f 0c00 	mov.w	ip, #0
	double rounding = 0.5;
    c460:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
		rounding *= 0.1;
    c464:	ed9f 6b40 	vldr	d6, [pc, #256]	; c568 <Print::printFloat(double, unsigned char)+0x160>
    c468:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    c46c:	f10c 0c01 	add.w	ip, ip, #1
    c470:	fa5f f28c 	uxtb.w	r2, ip
    c474:	4294      	cmp	r4, r2
    c476:	d8f7      	bhi.n	c468 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    c478:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    c47c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    c480:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    c484:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    c488:	220a      	movs	r2, #10
    c48a:	ee17 1a90 	vmov	r1, s15
    c48e:	4628      	mov	r0, r5
    c490:	f7ff ff74 	bl	c37c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c494:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    c496:	232e      	movs	r3, #46	; 0x2e
    c498:	f88d 3008 	strb.w	r3, [sp, #8]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    c49c:	2c0f      	cmp	r4, #15
    c49e:	bf28      	it	cs
    c4a0:	240f      	movcs	r4, #15

		while (digits-- > 0) {
    c4a2:	aa02      	add	r2, sp, #8
    c4a4:	1e60      	subs	r0, r4, #1
    c4a6:	f10d 0309 	add.w	r3, sp, #9
    c4aa:	fa53 f080 	uxtab	r0, r3, r0
			remainder *= 10.0;
    c4ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    c4b2:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    c4b6:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c4ba:	edcd 7a01 	vstr	s15, [sp, #4]
    c4be:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
    c4c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
    c4c6:	f802 1f01 	strb.w	r1, [r2, #1]!
			remainder -= n; 
    c4ca:	ee07 3a90 	vmov	s15, r3
    c4ce:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    c4d2:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    c4d6:	4282      	cmp	r2, r0
    c4d8:	d1eb      	bne.n	c4b2 <Print::printFloat(double, unsigned char)+0xaa>
			buf[count++] = '0' + n;
    c4da:	3401      	adds	r4, #1
		}
		count += write(buf, count);
    c4dc:	682b      	ldr	r3, [r5, #0]
    c4de:	685b      	ldr	r3, [r3, #4]
    c4e0:	b2e2      	uxtb	r2, r4
    c4e2:	a902      	add	r1, sp, #8
    c4e4:	4628      	mov	r0, r5
    c4e6:	4798      	blx	r3
    c4e8:	e00c      	b.n	c504 <Print::printFloat(double, unsigned char)+0xfc>
							  return write((const uint8_t *)str, strlen(str)); }
    c4ea:	6803      	ldr	r3, [r0, #0]
    c4ec:	685b      	ldr	r3, [r3, #4]
    c4ee:	2203      	movs	r2, #3
    c4f0:	491f      	ldr	r1, [pc, #124]	; (c570 <Print::printFloat(double, unsigned char)+0x168>)
    c4f2:	4798      	blx	r3
    c4f4:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    c4f6:	e005      	b.n	c504 <Print::printFloat(double, unsigned char)+0xfc>
    c4f8:	6803      	ldr	r3, [r0, #0]
    c4fa:	685b      	ldr	r3, [r3, #4]
    c4fc:	2203      	movs	r2, #3
    c4fe:	491d      	ldr	r1, [pc, #116]	; (c574 <Print::printFloat(double, unsigned char)+0x16c>)
    c500:	4798      	blx	r3
    c502:	4606      	mov	r6, r0
	}
	return count;
}
    c504:	4630      	mov	r0, r6
    c506:	b006      	add	sp, #24
    c508:	ecbd 8b02 	vpop	{d8}
    c50c:	bd70      	pop	{r4, r5, r6, pc}
    c50e:	6803      	ldr	r3, [r0, #0]
    c510:	685b      	ldr	r3, [r3, #4]
    c512:	2203      	movs	r2, #3
    c514:	4918      	ldr	r1, [pc, #96]	; (c578 <Print::printFloat(double, unsigned char)+0x170>)
    c516:	4798      	blx	r3
    c518:	4606      	mov	r6, r0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c51a:	e7f3      	b.n	c504 <Print::printFloat(double, unsigned char)+0xfc>
    c51c:	6803      	ldr	r3, [r0, #0]
    c51e:	685b      	ldr	r3, [r3, #4]
    c520:	2203      	movs	r2, #3
    c522:	4915      	ldr	r1, [pc, #84]	; (c578 <Print::printFloat(double, unsigned char)+0x170>)
    c524:	4798      	blx	r3
    c526:	4606      	mov	r6, r0
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c528:	e7ec      	b.n	c504 <Print::printFloat(double, unsigned char)+0xfc>
		number = -number;
    c52a:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    c52e:	2301      	movs	r3, #1
    c530:	e792      	b.n	c458 <Print::printFloat(double, unsigned char)+0x50>
	number += rounding;
    c532:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    c536:	ee30 0b07 	vadd.f64	d0, d0, d7
	count += printNumber(int_part, 10, sign);
    c53a:	220a      	movs	r2, #10
    c53c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c540:	ee17 1a90 	vmov	r1, s15
    c544:	4628      	mov	r0, r5
    c546:	f7ff ff19 	bl	c37c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c54a:	4606      	mov	r6, r0
	if (digits > 0) {
    c54c:	e7da      	b.n	c504 <Print::printFloat(double, unsigned char)+0xfc>
    c54e:	bf00      	nop
    c550:	ffffffff 	.word	0xffffffff
    c554:	7fefffff 	.word	0x7fefffff
    c558:	e0000000 	.word	0xe0000000
    c55c:	41efffff 	.word	0x41efffff
    c560:	e0000000 	.word	0xe0000000
    c564:	c1efffff 	.word	0xc1efffff
    c568:	9999999a 	.word	0x9999999a
    c56c:	3fb99999 	.word	0x3fb99999
    c570:	20002140 	.word	0x20002140
    c574:	20002144 	.word	0x20002144
    c578:	20002148 	.word	0x20002148

0000c57c <Stream::timedPeek()>:
{
    c57c:	b570      	push	{r4, r5, r6, lr}
    c57e:	4604      	mov	r4, r0
    c580:	4b09      	ldr	r3, [pc, #36]	; (c5a8 <Stream::timedPeek()+0x2c>)
    c582:	681e      	ldr	r6, [r3, #0]
    c584:	461d      	mov	r5, r3
    c = peek();
    c586:	6823      	ldr	r3, [r4, #0]
    c588:	699b      	ldr	r3, [r3, #24]
    c58a:	4620      	mov	r0, r4
    c58c:	4798      	blx	r3
    if (c >= 0) return c;
    c58e:	2800      	cmp	r0, #0
    c590:	da08      	bge.n	c5a4 <Stream::timedPeek()+0x28>
    yield();
    c592:	f002 fb25 	bl	ebe0 <yield>
    c596:	682b      	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c598:	1b9b      	subs	r3, r3, r6
    c59a:	68a2      	ldr	r2, [r4, #8]
    c59c:	4293      	cmp	r3, r2
    c59e:	d3f2      	bcc.n	c586 <Stream::timedPeek()+0xa>
  return -1;     // -1 indicates timeout
    c5a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c5a4:	bd70      	pop	{r4, r5, r6, pc}
    c5a6:	bf00      	nop
    c5a8:	200052bc 	.word	0x200052bc

0000c5ac <Stream::peekNextDigit()>:
{
    c5ac:	b510      	push	{r4, lr}
    c5ae:	4604      	mov	r4, r0
    c5b0:	e003      	b.n	c5ba <Stream::peekNextDigit()+0xe>
    read();  // discard non-numeric
    c5b2:	6823      	ldr	r3, [r4, #0]
    c5b4:	695b      	ldr	r3, [r3, #20]
    c5b6:	4620      	mov	r0, r4
    c5b8:	4798      	blx	r3
    c = timedPeek();
    c5ba:	4620      	mov	r0, r4
    c5bc:	f7ff ffde 	bl	c57c <Stream::timedPeek()>
    if (c == '-') return c;
    c5c0:	282d      	cmp	r0, #45	; 0x2d
    c5c2:	d005      	beq.n	c5d0 <Stream::peekNextDigit()+0x24>
    c5c4:	2800      	cmp	r0, #0
    c5c6:	db03      	blt.n	c5d0 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    c5c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c5cc:	2b09      	cmp	r3, #9
    c5ce:	d8f0      	bhi.n	c5b2 <Stream::peekNextDigit()+0x6>
}
    c5d0:	bd10      	pop	{r4, pc}
	...

0000c5d4 <Stream::parseFloat(char)>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c5d8:	ed2d 8b02 	vpush	{d8}
    c5dc:	4604      	mov	r4, r0
    c5de:	460d      	mov	r5, r1
  boolean isFraction = false;
  long value = 0;
  int c;
  float fraction = 1.0;

  c = peekNextDigit();
    c5e0:	f7ff ffe4 	bl	c5ac <Stream::peekNextDigit()>
    // ignore non numeric leading characters
  if(c < 0)
    c5e4:	2800      	cmp	r0, #0
    c5e6:	db45      	blt.n	c674 <Stream::parseFloat(char)+0xa0>
  float fraction = 1.0;
    c5e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  long value = 0;
    c5ec:	f04f 0900 	mov.w	r9, #0
  boolean isFraction = false;
    c5f0:	464f      	mov	r7, r9
  boolean isNegative = false;
    c5f2:	46c8      	mov	r8, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    c5f4:	2601      	movs	r6, #1
    else if (c == '.')
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1f;
    c5f6:	eddf 8a21 	vldr	s17, [pc, #132]	; c67c <Stream::parseFloat(char)+0xa8>
    c5fa:	e00f      	b.n	c61c <Stream::parseFloat(char)+0x48>
      isNegative = true;
    c5fc:	46b0      	mov	r8, r6
    }
    read();  // consume the character we got with peek
    c5fe:	6823      	ldr	r3, [r4, #0]
    c600:	695b      	ldr	r3, [r3, #20]
    c602:	4620      	mov	r0, r4
    c604:	4798      	blx	r3
    c = timedPeek();
    c606:	4620      	mov	r0, r4
    c608:	f7ff ffb8 	bl	c57c <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
    c60c:	4285      	cmp	r5, r0
    c60e:	bf18      	it	ne
    c610:	282e      	cmpne	r0, #46	; 0x2e
    c612:	d003      	beq.n	c61c <Stream::parseFloat(char)+0x48>
    c614:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c618:	2b09      	cmp	r3, #9
    c61a:	d816      	bhi.n	c64a <Stream::parseFloat(char)+0x76>
    if(c == skipChar)
    c61c:	4285      	cmp	r5, r0
    c61e:	d0ee      	beq.n	c5fe <Stream::parseFloat(char)+0x2a>
    else if(c == '-')
    c620:	282d      	cmp	r0, #45	; 0x2d
    c622:	d0eb      	beq.n	c5fc <Stream::parseFloat(char)+0x28>
    else if (c == '.')
    c624:	282e      	cmp	r0, #46	; 0x2e
    c626:	d00e      	beq.n	c646 <Stream::parseFloat(char)+0x72>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    c628:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c62c:	2b09      	cmp	r3, #9
    c62e:	d8e6      	bhi.n	c5fe <Stream::parseFloat(char)+0x2a>
      value = value * 10 + c - '0';
    c630:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    c634:	eb00 0049 	add.w	r0, r0, r9, lsl #1
    c638:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
      if(isFraction)
    c63c:	2f00      	cmp	r7, #0
    c63e:	d0de      	beq.n	c5fe <Stream::parseFloat(char)+0x2a>
         fraction *= 0.1f;
    c640:	ee28 8a28 	vmul.f32	s16, s16, s17
    c644:	e7db      	b.n	c5fe <Stream::parseFloat(char)+0x2a>
      isFraction = true;
    c646:	4637      	mov	r7, r6
    c648:	e7d9      	b.n	c5fe <Stream::parseFloat(char)+0x2a>

  if(isNegative)
    c64a:	f1b8 0f00 	cmp.w	r8, #0
    c64e:	d001      	beq.n	c654 <Stream::parseFloat(char)+0x80>
    value = -value;
    c650:	f1c9 0900 	rsb	r9, r9, #0
  if(isFraction)
    c654:	b14f      	cbz	r7, c66a <Stream::parseFloat(char)+0x96>
    return value * fraction;
    c656:	ee07 9a90 	vmov	s15, r9
    c65a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    c65e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
    c662:	ecbd 8b02 	vpop	{d8}
    c666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return value;
    c66a:	ee07 9a90 	vmov	s15, r9
    c66e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    c672:	e7f6      	b.n	c662 <Stream::parseFloat(char)+0x8e>
    return 0; // zero returned if timeout
    c674:	ed9f 0a02 	vldr	s0, [pc, #8]	; c680 <Stream::parseFloat(char)+0xac>
    c678:	e7f3      	b.n	c662 <Stream::parseFloat(char)+0x8e>
    c67a:	bf00      	nop
    c67c:	3dcccccd 	.word	0x3dcccccd
    c680:	00000000 	.word	0x00000000

0000c684 <Stream::parseFloat()>:
{
    c684:	b508      	push	{r3, lr}
  return parseFloat(NO_SKIP_CHAR);
    c686:	2101      	movs	r1, #1
    c688:	f7ff ffa4 	bl	c5d4 <Stream::parseFloat(char)>
}
    c68c:	bd08      	pop	{r3, pc}
	...

0000c690 <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    c694:	4b59      	ldr	r3, [pc, #356]	; (c7fc <breakTime(unsigned long, DateTimeFields&)+0x16c>)
    c696:	fba3 4200 	umull	r4, r2, r3, r0
    c69a:	0952      	lsrs	r2, r2, #5
    c69c:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    c6a0:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    c6a4:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.min = time % 60;
    c6a6:	fba3 0302 	umull	r0, r3, r3, r2
    c6aa:	095b      	lsrs	r3, r3, #5
    c6ac:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    c6b0:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
    c6b4:	704a      	strb	r2, [r1, #1]
  time /= 60; // now it is hours
  tm.hour = time % 24;
    c6b6:	4a52      	ldr	r2, [pc, #328]	; (c800 <breakTime(unsigned long, DateTimeFields&)+0x170>)
    c6b8:	fba2 2e03 	umull	r2, lr, r2, r3
    c6bc:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    c6c0:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
    c6c4:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    c6c8:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c6ca:	f10e 0204 	add.w	r2, lr, #4
    c6ce:	4b4d      	ldr	r3, [pc, #308]	; (c804 <breakTime(unsigned long, DateTimeFields&)+0x174>)
    c6d0:	fba3 0302 	umull	r0, r3, r3, r2
    c6d4:	1ad0      	subs	r0, r2, r3
    c6d6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    c6da:	089b      	lsrs	r3, r3, #2
    c6dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    c6e0:	1ad2      	subs	r2, r2, r3
    c6e2:	70ca      	strb	r2, [r1, #3]

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c6e4:	2000      	movs	r0, #0
  days = 0;
    c6e6:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c6e8:	f240 176d 	movw	r7, #365	; 0x16d
    c6ec:	4e46      	ldr	r6, [pc, #280]	; (c808 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c6ee:	f04f 0864 	mov.w	r8, #100	; 0x64
    c6f2:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
    c6f6:	f44f 79c8 	mov.w	r9, #400	; 0x190
    c6fa:	e004      	b.n	c706 <breakTime(unsigned long, DateTimeFields&)+0x76>
    c6fc:	463c      	mov	r4, r7
    c6fe:	4422      	add	r2, r4
    c700:	3001      	adds	r0, #1
    c702:	4596      	cmp	lr, r2
    c704:	d319      	bcc.n	c73a <breakTime(unsigned long, DateTimeFields&)+0xaa>
    c706:	fa5f fc80 	uxtb.w	ip, r0
    c70a:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
    c70e:	f013 0503 	ands.w	r5, r3, #3
    c712:	d1f3      	bne.n	c6fc <breakTime(unsigned long, DateTimeFields&)+0x6c>
    c714:	fb86 b403 	smull	fp, r4, r6, r3
    c718:	1164      	asrs	r4, r4, #5
    c71a:	fb08 3414 	mls	r4, r8, r4, r3
    c71e:	b954      	cbnz	r4, c736 <breakTime(unsigned long, DateTimeFields&)+0xa6>
    c720:	fb86 b403 	smull	fp, r4, r6, r3
    c724:	11e4      	asrs	r4, r4, #7
    c726:	fb09 3414 	mls	r4, r9, r4, r3
    c72a:	2c00      	cmp	r4, #0
    c72c:	bf14      	ite	ne
    c72e:	463c      	movne	r4, r7
    c730:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    c734:	e7e3      	b.n	c6fe <breakTime(unsigned long, DateTimeFields&)+0x6e>
    c736:	4654      	mov	r4, sl
    c738:	e7e1      	b.n	c6fe <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    c73a:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
    c73e:	f881 c006 	strb.w	ip, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    c742:	b9b5      	cbnz	r5, c772 <breakTime(unsigned long, DateTimeFields&)+0xe2>
    c744:	4830      	ldr	r0, [pc, #192]	; (c808 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c746:	fb80 4003 	smull	r4, r0, r0, r3
    c74a:	1140      	asrs	r0, r0, #5
    c74c:	2464      	movs	r4, #100	; 0x64
    c74e:	fb04 3010 	mls	r0, r4, r0, r3
    c752:	bb50      	cbnz	r0, c7aa <breakTime(unsigned long, DateTimeFields&)+0x11a>
    c754:	482c      	ldr	r0, [pc, #176]	; (c808 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c756:	fb80 4003 	smull	r4, r0, r0, r3
    c75a:	11c0      	asrs	r0, r0, #7
    c75c:	f44f 74c8 	mov.w	r4, #400	; 0x190
    c760:	fb04 3010 	mls	r0, r4, r0, r3
    c764:	2800      	cmp	r0, #0
    c766:	f240 106d 	movw	r0, #365	; 0x16d
    c76a:	bf08      	it	eq
    c76c:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    c770:	e001      	b.n	c776 <breakTime(unsigned long, DateTimeFields&)+0xe6>
    c772:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c776:	ebae 0e02 	sub.w	lr, lr, r2
    c77a:	eb00 020e 	add.w	r2, r0, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    c77e:	4f22      	ldr	r7, [pc, #136]	; (c808 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c780:	fb87 0703 	smull	r0, r7, r7, r3
    c784:	ea4f 1e67 	mov.w	lr, r7, asr #5
    c788:	2064      	movs	r0, #100	; 0x64
    c78a:	fb00 3e1e 	mls	lr, r0, lr, r3
    c78e:	11ff      	asrs	r7, r7, #7
    c790:	f44f 70c8 	mov.w	r0, #400	; 0x190
    c794:	fb00 3717 	mls	r7, r0, r7, r3
    c798:	2301      	movs	r3, #1
    c79a:	2000      	movs	r0, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    c79c:	f8df c06c 	ldr.w	ip, [pc, #108]	; c80c <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
    c7a0:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
    c7a4:	f04f 091d 	mov.w	r9, #29
    c7a8:	e014      	b.n	c7d4 <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c7aa:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    c7ae:	e7e2      	b.n	c776 <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
    c7b0:	b94d      	cbnz	r5, c7c6 <breakTime(unsigned long, DateTimeFields&)+0x136>
    c7b2:	f1be 0f00 	cmp.w	lr, #0
    c7b6:	d11c      	bne.n	c7f2 <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
    c7b8:	2f00      	cmp	r7, #0
    c7ba:	bf14      	ite	ne
    c7bc:	241c      	movne	r4, #28
    c7be:	241d      	moveq	r4, #29
    c7c0:	e002      	b.n	c7c8 <breakTime(unsigned long, DateTimeFields&)+0x138>
    c7c2:	4633      	mov	r3, r6
    c7c4:	e010      	b.n	c7e8 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
    c7c6:	4644      	mov	r4, r8
    }

    if (time >= monthLength) {
    c7c8:	4294      	cmp	r4, r2
    c7ca:	d814      	bhi.n	c7f6 <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
    c7cc:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    c7ce:	3001      	adds	r0, #1
    c7d0:	3301      	adds	r3, #1
    c7d2:	b2db      	uxtb	r3, r3
    c7d4:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
    c7d6:	2e01      	cmp	r6, #1
    c7d8:	d0ea      	beq.n	c7b0 <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
    c7da:	f810 400c 	ldrb.w	r4, [r0, ip]
    c7de:	4294      	cmp	r4, r2
    c7e0:	d8ef      	bhi.n	c7c2 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c7e2:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    c7e4:	2b0b      	cmp	r3, #11
    c7e6:	d9f2      	bls.n	c7ce <breakTime(unsigned long, DateTimeFields&)+0x13e>
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
    c7e8:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
    c7ea:	3201      	adds	r2, #1
    c7ec:	710a      	strb	r2, [r1, #4]
}
    c7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
    c7f2:	464c      	mov	r4, r9
    c7f4:	e7e8      	b.n	c7c8 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
    c7f6:	4633      	mov	r3, r6
    c7f8:	e7f6      	b.n	c7e8 <breakTime(unsigned long, DateTimeFields&)+0x158>
    c7fa:	bf00      	nop
    c7fc:	88888889 	.word	0x88888889
    c800:	aaaaaaab 	.word	0xaaaaaaab
    c804:	24924925 	.word	0x24924925
    c808:	51eb851f 	.word	0x51eb851f
    c80c:	20002070 	.word	0x20002070

0000c810 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    c810:	b510      	push	{r4, lr}
    c812:	4604      	mov	r4, r0
{
	free(buffer);
    c814:	6800      	ldr	r0, [r0, #0]
    c816:	f004 fc85 	bl	11124 <free>
}
    c81a:	4620      	mov	r0, r4
    c81c:	bd10      	pop	{r4, pc}

0000c81e <String::changeBuffer(unsigned int)>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    c81e:	b538      	push	{r3, r4, r5, lr}
    c820:	4604      	mov	r4, r0
    c822:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    c824:	3101      	adds	r1, #1
    c826:	6800      	ldr	r0, [r0, #0]
    c828:	f005 fcf2 	bl	12210 <realloc>
	if (newbuffer) {
    c82c:	b118      	cbz	r0, c836 <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
    c82e:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    c830:	6065      	str	r5, [r4, #4]
		return 1;
    c832:	2001      	movs	r0, #1
	}
	return 0;
}
    c834:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    c836:	2000      	movs	r0, #0
    c838:	e7fc      	b.n	c834 <String::changeBuffer(unsigned int)+0x16>

0000c83a <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
    c83a:	6843      	ldr	r3, [r0, #4]
    c83c:	428b      	cmp	r3, r1
    c83e:	d301      	bcc.n	c844 <String::reserve(unsigned int)+0xa>
    c840:	2001      	movs	r0, #1
}
    c842:	4770      	bx	lr
{
    c844:	b510      	push	{r4, lr}
    c846:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
    c848:	f7ff ffe9 	bl	c81e <String::changeBuffer(unsigned int)>
    c84c:	b900      	cbnz	r0, c850 <String::reserve(unsigned int)+0x16>
}
    c84e:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
    c850:	68a3      	ldr	r3, [r4, #8]
    c852:	b923      	cbnz	r3, c85e <String::reserve(unsigned int)+0x24>
    c854:	6823      	ldr	r3, [r4, #0]
    c856:	2200      	movs	r2, #0
    c858:	701a      	strb	r2, [r3, #0]
		return 1;
    c85a:	2001      	movs	r0, #1
    c85c:	e7f7      	b.n	c84e <String::reserve(unsigned int)+0x14>
    c85e:	2001      	movs	r0, #1
    c860:	e7f5      	b.n	c84e <String::reserve(unsigned int)+0x14>

0000c862 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    c862:	b570      	push	{r4, r5, r6, lr}
    c864:	4604      	mov	r4, r0
	if (length == 0) {
    c866:	b932      	cbnz	r2, c876 <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
    c868:	6803      	ldr	r3, [r0, #0]
    c86a:	b103      	cbz	r3, c86e <String::copy(char const*, unsigned int)+0xc>
    c86c:	701a      	strb	r2, [r3, #0]
		len = 0;
    c86e:	2300      	movs	r3, #0
    c870:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c872:	4620      	mov	r0, r4
    c874:	bd70      	pop	{r4, r5, r6, pc}
    c876:	460d      	mov	r5, r1
    c878:	4616      	mov	r6, r2
	if (!reserve(length)) {
    c87a:	4611      	mov	r1, r2
    c87c:	f7ff ffdd 	bl	c83a <String::reserve(unsigned int)>
    c880:	b948      	cbnz	r0, c896 <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
    c882:	6820      	ldr	r0, [r4, #0]
    c884:	b118      	cbz	r0, c88e <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    c886:	f004 fc4d 	bl	11124 <free>
			buffer = NULL;
    c88a:	2300      	movs	r3, #0
    c88c:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
    c88e:	2300      	movs	r3, #0
    c890:	6063      	str	r3, [r4, #4]
    c892:	60a3      	str	r3, [r4, #8]
		return *this;
    c894:	e7ed      	b.n	c872 <String::copy(char const*, unsigned int)+0x10>
	len = length;
    c896:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    c898:	4629      	mov	r1, r5
    c89a:	6820      	ldr	r0, [r4, #0]
    c89c:	f005 f856 	bl	1194c <strcpy>
	return *this;
    c8a0:	e7e7      	b.n	c872 <String::copy(char const*, unsigned int)+0x10>

0000c8a2 <String::String(char const*)>:
String::String(const char *cstr)
    c8a2:	b538      	push	{r3, r4, r5, lr}
    c8a4:	4604      	mov	r4, r0
	buffer = NULL;
    c8a6:	2300      	movs	r3, #0
    c8a8:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c8aa:	6043      	str	r3, [r0, #4]
	len = 0;
    c8ac:	6083      	str	r3, [r0, #8]
	flags = 0;
    c8ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    c8b0:	b141      	cbz	r1, c8c4 <String::String(char const*)+0x22>
    c8b2:	460d      	mov	r5, r1
    c8b4:	4608      	mov	r0, r1
    c8b6:	f005 fde3 	bl	12480 <strlen>
    c8ba:	4602      	mov	r2, r0
    c8bc:	4629      	mov	r1, r5
    c8be:	4620      	mov	r0, r4
    c8c0:	f7ff ffcf 	bl	c862 <String::copy(char const*, unsigned int)>
}
    c8c4:	4620      	mov	r0, r4
    c8c6:	bd38      	pop	{r3, r4, r5, pc}

0000c8c8 <String::move(String&)>:

void String::move(String &rhs)
{
	if (&rhs == this) return;
    c8c8:	4281      	cmp	r1, r0
    c8ca:	d011      	beq.n	c8f0 <String::move(String&)+0x28>
{
    c8cc:	b538      	push	{r3, r4, r5, lr}
    c8ce:	4605      	mov	r5, r0
    c8d0:	460c      	mov	r4, r1
	if (buffer) free(buffer);
    c8d2:	6800      	ldr	r0, [r0, #0]
    c8d4:	b108      	cbz	r0, c8da <String::move(String&)+0x12>
    c8d6:	f004 fc25 	bl	11124 <free>
	buffer = rhs.buffer;
    c8da:	6823      	ldr	r3, [r4, #0]
    c8dc:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    c8de:	6863      	ldr	r3, [r4, #4]
    c8e0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    c8e2:	68a3      	ldr	r3, [r4, #8]
    c8e4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    c8e6:	2300      	movs	r3, #0
    c8e8:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    c8ea:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    c8ec:	60a3      	str	r3, [r4, #8]
}
    c8ee:	bd38      	pop	{r3, r4, r5, pc}
    c8f0:	4770      	bx	lr

0000c8f2 <String::operator=(String const&)>:

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c8f2:	4288      	cmp	r0, r1
    c8f4:	d005      	beq.n	c902 <String::operator=(String const&)+0x10>
{
    c8f6:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
    c8f8:	688a      	ldr	r2, [r1, #8]
    c8fa:	6809      	ldr	r1, [r1, #0]
    c8fc:	f7ff ffb1 	bl	c862 <String::copy(char const*, unsigned int)>
}
    c900:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
    c902:	4608      	mov	r0, r1
}
    c904:	4770      	bx	lr

0000c906 <String::String(String const&)>:
String::String(const String &value)
    c906:	b510      	push	{r4, lr}
    c908:	4604      	mov	r4, r0
	buffer = NULL;
    c90a:	2300      	movs	r3, #0
    c90c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c90e:	6043      	str	r3, [r0, #4]
	len = 0;
    c910:	6083      	str	r3, [r0, #8]
	flags = 0;
    c912:	7303      	strb	r3, [r0, #12]
	*this = value;
    c914:	f7ff ffed 	bl	c8f2 <String::operator=(String const&)>
}
    c918:	4620      	mov	r0, r4
    c91a:	bd10      	pop	{r4, pc}

0000c91c <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    c91c:	b510      	push	{r4, lr}
    c91e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    c920:	4288      	cmp	r0, r1
    c922:	d001      	beq.n	c928 <String::operator=(String&&)+0xc>
    c924:	f7ff ffd0 	bl	c8c8 <String::move(String&)>
	return *this;
}
    c928:	4620      	mov	r0, r4
    c92a:	bd10      	pop	{r4, pc}

0000c92c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    c92c:	b538      	push	{r3, r4, r5, lr}
    c92e:	4604      	mov	r4, r0
	if (cstr) {
    c930:	b151      	cbz	r1, c948 <String::operator=(char const*)+0x1c>
    c932:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
    c934:	4608      	mov	r0, r1
    c936:	f005 fda3 	bl	12480 <strlen>
    c93a:	4602      	mov	r2, r0
    c93c:	4629      	mov	r1, r5
    c93e:	4620      	mov	r0, r4
    c940:	f7ff ff8f 	bl	c862 <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    c944:	4620      	mov	r0, r4
    c946:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
    c948:	2300      	movs	r3, #0
    c94a:	6083      	str	r3, [r0, #8]
    c94c:	e7fa      	b.n	c944 <String::operator=(char const*)+0x18>

0000c94e <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    c94e:	b510      	push	{r4, lr}
    c950:	b08a      	sub	sp, #40	; 0x28
    c952:	4604      	mov	r4, r0
    c954:	4608      	mov	r0, r1
	buffer = NULL;
    c956:	2300      	movs	r3, #0
    c958:	6023      	str	r3, [r4, #0]
	capacity = 0;
    c95a:	6063      	str	r3, [r4, #4]
	len = 0;
    c95c:	60a3      	str	r3, [r4, #8]
	flags = 0;
    c95e:	7323      	strb	r3, [r4, #12]
	itoa(value, buf, base);
    c960:	a901      	add	r1, sp, #4
    c962:	f004 fbbb 	bl	110dc <itoa>
	*this = buf;
    c966:	a901      	add	r1, sp, #4
    c968:	4620      	mov	r0, r4
    c96a:	f7ff ffdf 	bl	c92c <String::operator=(char const*)>
}
    c96e:	4620      	mov	r0, r4
    c970:	b00a      	add	sp, #40	; 0x28
    c972:	bd10      	pop	{r4, pc}

0000c974 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    c974:	b510      	push	{r4, lr}
    c976:	b08a      	sub	sp, #40	; 0x28
    c978:	4604      	mov	r4, r0
	buffer = NULL;
    c97a:	2300      	movs	r3, #0
    c97c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c97e:	6043      	str	r3, [r0, #4]
	len = 0;
    c980:	6083      	str	r3, [r0, #8]
	flags = 0;
    c982:	7303      	strb	r3, [r0, #12]
	*this = dtostrf(num, digits + 2, digits, buf);
    c984:	466a      	mov	r2, sp
    c986:	1c88      	adds	r0, r1, #2
    c988:	f000 fb9e 	bl	d0c8 <dtostrf>
    c98c:	4601      	mov	r1, r0
    c98e:	4620      	mov	r0, r4
    c990:	f7ff ffcc 	bl	c92c <String::operator=(char const*)>
}
    c994:	4620      	mov	r0, r4
    c996:	b00a      	add	sp, #40	; 0x28
    c998:	bd10      	pop	{r4, pc}

0000c99a <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    c99a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c99e:	4604      	mov	r4, r0
    c9a0:	460d      	mov	r5, r1
    c9a2:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
    c9a4:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    c9a6:	6803      	ldr	r3, [r0, #0]
    c9a8:	42ab      	cmp	r3, r5
    c9aa:	d806      	bhi.n	c9ba <String::append(char const*, unsigned int)+0x20>
    c9ac:	185a      	adds	r2, r3, r1
    c9ae:	4295      	cmp	r5, r2
    c9b0:	d209      	bcs.n	c9c6 <String::append(char const*, unsigned int)+0x2c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    c9b2:	1aef      	subs	r7, r5, r3
		self = true;
    c9b4:	f04f 0901 	mov.w	r9, #1
    c9b8:	e001      	b.n	c9be <String::append(char const*, unsigned int)+0x24>
	bool self = false;
    c9ba:	f04f 0900 	mov.w	r9, #0
	}
	if (length == 0 || !reserve(newlen)) return *this;
    c9be:	b92e      	cbnz	r6, c9cc <String::append(char const*, unsigned int)+0x32>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    c9c0:	4620      	mov	r0, r4
    c9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    c9c6:	f04f 0900 	mov.w	r9, #0
    c9ca:	e7f8      	b.n	c9be <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
    c9cc:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
    c9d0:	4641      	mov	r1, r8
    c9d2:	4620      	mov	r0, r4
    c9d4:	f7ff ff31 	bl	c83a <String::reserve(unsigned int)>
    c9d8:	2800      	cmp	r0, #0
    c9da:	d0f1      	beq.n	c9c0 <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
    c9dc:	f1b9 0f00 	cmp.w	r9, #0
    c9e0:	d00d      	beq.n	c9fe <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
    c9e2:	6823      	ldr	r3, [r4, #0]
    c9e4:	68a0      	ldr	r0, [r4, #8]
    c9e6:	4632      	mov	r2, r6
    c9e8:	19d9      	adds	r1, r3, r7
    c9ea:	4418      	add	r0, r3
    c9ec:	f000 fa98 	bl	cf20 <memcpy>
		buffer[newlen] = 0;
    c9f0:	6823      	ldr	r3, [r4, #0]
    c9f2:	2200      	movs	r2, #0
    c9f4:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
    c9f8:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
    c9fc:	e7e0      	b.n	c9c0 <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
    c9fe:	6820      	ldr	r0, [r4, #0]
    ca00:	68a3      	ldr	r3, [r4, #8]
    ca02:	4629      	mov	r1, r5
    ca04:	4418      	add	r0, r3
    ca06:	f004 ffa1 	bl	1194c <strcpy>
    ca0a:	e7f5      	b.n	c9f8 <String::append(char const*, unsigned int)+0x5e>

0000ca0c <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    ca0c:	b510      	push	{r4, lr}
    ca0e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    ca10:	688a      	ldr	r2, [r1, #8]
    ca12:	6809      	ldr	r1, [r1, #0]
    ca14:	f7ff ffc1 	bl	c99a <String::append(char const*, unsigned int)>
	return a;
}
    ca18:	4620      	mov	r0, r4
    ca1a:	bd10      	pop	{r4, pc}

0000ca1c <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    ca1c:	b538      	push	{r3, r4, r5, lr}
    ca1e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    ca20:	b141      	cbz	r1, ca34 <operator+(StringSumHelper const&, char const*)+0x18>
    ca22:	460d      	mov	r5, r1
    ca24:	4608      	mov	r0, r1
    ca26:	f005 fd2b 	bl	12480 <strlen>
    ca2a:	4602      	mov	r2, r0
    ca2c:	4629      	mov	r1, r5
    ca2e:	4620      	mov	r0, r4
    ca30:	f7ff ffb3 	bl	c99a <String::append(char const*, unsigned int)>
	return a;
}
    ca34:	4620      	mov	r0, r4
    ca36:	bd38      	pop	{r3, r4, r5, pc}

0000ca38 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    ca38:	b1b2      	cbz	r2, ca68 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
    ca3a:	b538      	push	{r3, r4, r5, lr}
    ca3c:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    ca3e:	b124      	cbz	r4, ca4a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    ca40:	6885      	ldr	r5, [r0, #8]
    ca42:	429d      	cmp	r5, r3
    ca44:	d802      	bhi.n	ca4c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    ca46:	2300      	movs	r3, #0
    ca48:	7023      	strb	r3, [r4, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    ca4a:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    ca4c:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    ca4e:	1e51      	subs	r1, r2, #1
    ca50:	428d      	cmp	r5, r1
    ca52:	bf28      	it	cs
    ca54:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
    ca56:	6801      	ldr	r1, [r0, #0]
    ca58:	462a      	mov	r2, r5
    ca5a:	4419      	add	r1, r3
    ca5c:	4620      	mov	r0, r4
    ca5e:	f004 fb0b 	bl	11078 <strncpy>
	buf[n] = 0;
    ca62:	2300      	movs	r3, #0
    ca64:	5563      	strb	r3, [r4, r5]
    ca66:	e7f0      	b.n	ca4a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
    ca68:	4770      	bx	lr
	...

0000ca6c <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    ca6c:	282a      	cmp	r0, #42	; 0x2a
    ca6e:	d83e      	bhi.n	caee <analogRead+0x82>
{
    ca70:	b570      	push	{r4, r5, r6, lr}
    ca72:	4604      	mov	r4, r0
	if (calibrating) wait_for_cal();
    ca74:	4b20      	ldr	r3, [pc, #128]	; (caf8 <analogRead+0x8c>)
    ca76:	781b      	ldrb	r3, [r3, #0]
    ca78:	b9b3      	cbnz	r3, caa8 <analogRead+0x3c>
	uint8_t ch = pin_to_channel[pin];
    ca7a:	4b20      	ldr	r3, [pc, #128]	; (cafc <analogRead+0x90>)
    ca7c:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    ca7e:	2bff      	cmp	r3, #255	; 0xff
    ca80:	d037      	beq.n	caf2 <analogRead+0x86>
	if(!(ch & 0x80)) {
    ca82:	f013 0f80 	tst.w	r3, #128	; 0x80
    ca86:	d120      	bne.n	caca <analogRead+0x5e>
		ADC1_HC0 = ch;
    ca88:	4a1d      	ldr	r2, [pc, #116]	; (cb00 <analogRead+0x94>)
    ca8a:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    ca8c:	6a13      	ldr	r3, [r2, #32]
    ca8e:	f013 0f01 	tst.w	r3, #1
    ca92:	d106      	bne.n	caa2 <analogRead+0x36>
    ca94:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    ca96:	f002 f8a3 	bl	ebe0 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    ca9a:	6a23      	ldr	r3, [r4, #32]
    ca9c:	f013 0f01 	tst.w	r3, #1
    caa0:	d0f9      	beq.n	ca96 <analogRead+0x2a>
		return ADC1_R0;
    caa2:	4b17      	ldr	r3, [pc, #92]	; (cb00 <analogRead+0x94>)
    caa4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    caa6:	bd70      	pop	{r4, r5, r6, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    caa8:	4d15      	ldr	r5, [pc, #84]	; (cb00 <analogRead+0x94>)
    caaa:	4e16      	ldr	r6, [pc, #88]	; (cb04 <analogRead+0x98>)
    caac:	e001      	b.n	cab2 <analogRead+0x46>
		yield();
    caae:	f002 f897 	bl	ebe0 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    cab2:	6cab      	ldr	r3, [r5, #72]	; 0x48
    cab4:	f013 0f80 	tst.w	r3, #128	; 0x80
    cab8:	d1f9      	bne.n	caae <analogRead+0x42>
    caba:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    cabc:	f013 0f80 	tst.w	r3, #128	; 0x80
    cac0:	d1f5      	bne.n	caae <analogRead+0x42>
	calibrating = 0;
    cac2:	4b0d      	ldr	r3, [pc, #52]	; (caf8 <analogRead+0x8c>)
    cac4:	2200      	movs	r2, #0
    cac6:	701a      	strb	r2, [r3, #0]
}
    cac8:	e7d7      	b.n	ca7a <analogRead+0xe>
		ADC2_HC0 = ch & 0x7f;
    caca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cace:	4a0d      	ldr	r2, [pc, #52]	; (cb04 <analogRead+0x98>)
    cad0:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cad2:	6a13      	ldr	r3, [r2, #32]
    cad4:	f013 0f01 	tst.w	r3, #1
    cad8:	d106      	bne.n	cae8 <analogRead+0x7c>
    cada:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    cadc:	f002 f880 	bl	ebe0 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cae0:	6a23      	ldr	r3, [r4, #32]
    cae2:	f013 0f01 	tst.w	r3, #1
    cae6:	d0f9      	beq.n	cadc <analogRead+0x70>
		return ADC2_R0;
    cae8:	4b06      	ldr	r3, [pc, #24]	; (cb04 <analogRead+0x98>)
    caea:	6a58      	ldr	r0, [r3, #36]	; 0x24
    caec:	e7db      	b.n	caa6 <analogRead+0x3a>
	if (pin > sizeof(pin_to_channel)) return 0;
    caee:	2000      	movs	r0, #0
}
    caf0:	4770      	bx	lr
	if (ch == 255) return 0;
    caf2:	2000      	movs	r0, #0
    caf4:	e7d7      	b.n	caa6 <analogRead+0x3a>
    caf6:	bf00      	nop
    caf8:	200052fd 	.word	0x200052fd
    cafc:	20002c58 	.word	0x20002c58
    cb00:	400c4000 	.word	0x400c4000
    cb04:	400c8000 	.word	0x400c8000

0000cb08 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    cb08:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    cb0a:	4b8e      	ldr	r3, [pc, #568]	; (cd44 <set_arm_clock+0x23c>)
    cb0c:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    cb0e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    cb10:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
    cb14:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    cb16:	4b8c      	ldr	r3, [pc, #560]	; (cd48 <set_arm_clock+0x240>)
    cb18:	4298      	cmp	r0, r3
    cb1a:	d915      	bls.n	cb48 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    cb1c:	4b8b      	ldr	r3, [pc, #556]	; (cd4c <set_arm_clock+0x244>)
    cb1e:	4298      	cmp	r0, r3
    cb20:	d96d      	bls.n	cbfe <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    cb22:	4b8b      	ldr	r3, [pc, #556]	; (cd50 <set_arm_clock+0x248>)
    cb24:	4403      	add	r3, r0
    cb26:	0a1b      	lsrs	r3, r3, #8
    cb28:	498a      	ldr	r1, [pc, #552]	; (cd54 <set_arm_clock+0x24c>)
    cb2a:	fba1 1303 	umull	r1, r3, r1, r3
    cb2e:	09db      	lsrs	r3, r3, #7
    cb30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cb34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cb38:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
    cb3c:	f240 6127 	movw	r1, #1575	; 0x627
    cb40:	428b      	cmp	r3, r1
    cb42:	bf28      	it	cs
    cb44:	460b      	movcs	r3, r1
    cb46:	e007      	b.n	cb58 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    cb48:	4e83      	ldr	r6, [pc, #524]	; (cd58 <set_arm_clock+0x250>)
    cb4a:	f240 437e 	movw	r3, #1150	; 0x47e
    cb4e:	f240 31b6 	movw	r1, #950	; 0x3b6
    cb52:	42b0      	cmp	r0, r6
    cb54:	bf98      	it	ls
    cb56:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cb58:	4e7a      	ldr	r6, [pc, #488]	; (cd44 <set_arm_clock+0x23c>)
    cb5a:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    cb5e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    cb62:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cb66:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    cb6a:	497c      	ldr	r1, [pc, #496]	; (cd5c <set_arm_clock+0x254>)
    cb6c:	fba1 1303 	umull	r1, r3, r1, r3
    cb70:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    cb74:	f004 011f 	and.w	r1, r4, #31
    cb78:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    cb7c:	d209      	bcs.n	cb92 <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cb7e:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cb82:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cb86:	4b76      	ldr	r3, [pc, #472]	; (cd60 <set_arm_clock+0x258>)
    cb88:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cb8a:	4619      	mov	r1, r3
    cb8c:	680b      	ldr	r3, [r1, #0]
    cb8e:	2b00      	cmp	r3, #0
    cb90:	dafc      	bge.n	cb8c <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    cb92:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
    cb96:	d12a      	bne.n	cbee <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    cb98:	4972      	ldr	r1, [pc, #456]	; (cd64 <set_arm_clock+0x25c>)
    cb9a:	690e      	ldr	r6, [r1, #16]
    cb9c:	4972      	ldr	r1, [pc, #456]	; (cd68 <set_arm_clock+0x260>)
    cb9e:	43b1      	bics	r1, r6
    cba0:	d030      	beq.n	cc04 <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    cba2:	4619      	mov	r1, r3
			sel = 1;
    cba4:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cba6:	06ce      	lsls	r6, r1, #27
    cba8:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
    cbac:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
    cbb0:	d004      	beq.n	cbbc <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    cbb2:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    cbb6:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
    cbb8:	4962      	ldr	r1, [pc, #392]	; (cd44 <set_arm_clock+0x23c>)
    cbba:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cbbc:	0319      	lsls	r1, r3, #12
    cbbe:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
    cbc2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    cbc6:	d009      	beq.n	cbdc <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    cbc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    cbcc:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
    cbce:	4b5d      	ldr	r3, [pc, #372]	; (cd44 <set_arm_clock+0x23c>)
    cbd0:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    cbd2:	461a      	mov	r2, r3
    cbd4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cbd6:	f013 0f08 	tst.w	r3, #8
    cbda:	d1fb      	bne.n	cbd4 <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    cbdc:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    cbe0:	4b58      	ldr	r3, [pc, #352]	; (cd44 <set_arm_clock+0x23c>)
    cbe2:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cbe4:	461a      	mov	r2, r3
    cbe6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cbe8:	f013 0f20 	tst.w	r3, #32
    cbec:	d1fb      	bne.n	cbe6 <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    cbee:	4b5f      	ldr	r3, [pc, #380]	; (cd6c <set_arm_clock+0x264>)
    cbf0:	4298      	cmp	r0, r3
    cbf2:	d817      	bhi.n	cc24 <set_arm_clock+0x11c>
    cbf4:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    cbf6:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    cbf8:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
    cbfa:	4e5c      	ldr	r6, [pc, #368]	; (cd6c <set_arm_clock+0x264>)
    cbfc:	e00e      	b.n	cc1c <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
    cbfe:	f240 43e2 	movw	r3, #1250	; 0x4e2
    cc02:	e7a9      	b.n	cb58 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
    cc04:	2103      	movs	r1, #3
    cc06:	e7ce      	b.n	cba6 <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    cc08:	2904      	cmp	r1, #4
    cc0a:	d80e      	bhi.n	cc2a <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
    cc0c:	3101      	adds	r1, #1
				div_arm = 1;
    cc0e:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cc10:	fb01 f302 	mul.w	r3, r1, r2
    cc14:	fb00 f303 	mul.w	r3, r0, r3
    cc18:	42b3      	cmp	r3, r6
    cc1a:	d806      	bhi.n	cc2a <set_arm_clock+0x122>
		if (div_arm < 8) {
    cc1c:	2a07      	cmp	r2, #7
    cc1e:	d8f3      	bhi.n	cc08 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    cc20:	3201      	adds	r2, #1
    cc22:	e7f5      	b.n	cc10 <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
    cc24:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    cc26:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    cc28:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cc2a:	4851      	ldr	r0, [pc, #324]	; (cd70 <set_arm_clock+0x268>)
    cc2c:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
    cc2e:	4b51      	ldr	r3, [pc, #324]	; (cd74 <set_arm_clock+0x26c>)
    cc30:	4298      	cmp	r0, r3
    cc32:	f200 8083 	bhi.w	cd3c <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cc36:	4b50      	ldr	r3, [pc, #320]	; (cd78 <set_arm_clock+0x270>)
    cc38:	fba3 0300 	umull	r0, r3, r3, r0
    cc3c:	0d1b      	lsrs	r3, r3, #20
    cc3e:	2b36      	cmp	r3, #54	; 0x36
    cc40:	bf38      	it	cc
    cc42:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    cc44:	484d      	ldr	r0, [pc, #308]	; (cd7c <set_arm_clock+0x274>)
    cc46:	fb03 f000 	mul.w	r0, r3, r0
    cc4a:	fbb0 f0f2 	udiv	r0, r0, r2
    cc4e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cc52:	4e44      	ldr	r6, [pc, #272]	; (cd64 <set_arm_clock+0x25c>)
    cc54:	6836      	ldr	r6, [r6, #0]
    cc56:	4f4a      	ldr	r7, [pc, #296]	; (cd80 <set_arm_clock+0x278>)
    cc58:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    cc5a:	4e4a      	ldr	r6, [pc, #296]	; (cd84 <set_arm_clock+0x27c>)
    cc5c:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cc5e:	42b7      	cmp	r7, r6
    cc60:	d009      	beq.n	cc76 <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    cc62:	4e40      	ldr	r6, [pc, #256]	; (cd64 <set_arm_clock+0x25c>)
    cc64:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    cc68:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    cc6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    cc6e:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    cc70:	6833      	ldr	r3, [r6, #0]
    cc72:	2b00      	cmp	r3, #0
    cc74:	dafc      	bge.n	cc70 <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    cc76:	4b33      	ldr	r3, [pc, #204]	; (cd44 <set_arm_clock+0x23c>)
    cc78:	691b      	ldr	r3, [r3, #16]
    cc7a:	3a01      	subs	r2, #1
    cc7c:	f003 0307 	and.w	r3, r3, #7
    cc80:	4293      	cmp	r3, r2
    cc82:	d008      	beq.n	cc96 <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    cc84:	f002 0207 	and.w	r2, r2, #7
    cc88:	4b2e      	ldr	r3, [pc, #184]	; (cd44 <set_arm_clock+0x23c>)
    cc8a:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    cc8c:	461a      	mov	r2, r3
    cc8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cc90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    cc94:	d1fb      	bne.n	cc8e <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cc96:	3901      	subs	r1, #1
    cc98:	028b      	lsls	r3, r1, #10
    cc9a:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
    cc9e:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    cca2:	d00b      	beq.n	ccbc <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    cca4:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    cca8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
    ccac:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
    ccae:	4b25      	ldr	r3, [pc, #148]	; (cd44 <set_arm_clock+0x23c>)
    ccb0:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    ccb2:	461a      	mov	r2, r3
    ccb4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ccb6:	f013 0f02 	tst.w	r3, #2
    ccba:	d1fb      	bne.n	ccb4 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ccbc:	4932      	ldr	r1, [pc, #200]	; (cd88 <set_arm_clock+0x280>)
    ccbe:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    ccc0:	4a32      	ldr	r2, [pc, #200]	; (cd8c <set_arm_clock+0x284>)
    ccc2:	4291      	cmp	r1, r2
    ccc4:	d83c      	bhi.n	cd40 <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    ccc6:	09c9      	lsrs	r1, r1, #7
    ccc8:	4b31      	ldr	r3, [pc, #196]	; (cd90 <set_arm_clock+0x288>)
    ccca:	fba3 3101 	umull	r3, r1, r3, r1
    ccce:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    ccd0:	1e4b      	subs	r3, r1, #1
    ccd2:	021a      	lsls	r2, r3, #8
    ccd4:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    ccd8:	f413 7f40 	tst.w	r3, #768	; 0x300
    ccdc:	d006      	beq.n	ccec <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    ccde:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    cce2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    cce6:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    cce8:	4b16      	ldr	r3, [pc, #88]	; (cd44 <set_arm_clock+0x23c>)
    ccea:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    ccec:	4a15      	ldr	r2, [pc, #84]	; (cd44 <set_arm_clock+0x23c>)
    ccee:	6953      	ldr	r3, [r2, #20]
    ccf0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    ccf4:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ccf6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ccf8:	f013 0f20 	tst.w	r3, #32
    ccfc:	d1fb      	bne.n	ccf6 <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
    ccfe:	4b25      	ldr	r3, [pc, #148]	; (cd94 <set_arm_clock+0x28c>)
    cd00:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    cd02:	fbb0 f1f1 	udiv	r1, r0, r1
    cd06:	4b24      	ldr	r3, [pc, #144]	; (cd98 <set_arm_clock+0x290>)
    cd08:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cd0a:	4b24      	ldr	r3, [pc, #144]	; (cd9c <set_arm_clock+0x294>)
    cd0c:	fba3 2300 	umull	r2, r3, r3, r0
    cd10:	0c9b      	lsrs	r3, r3, #18
    cd12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd16:	fbb2 f3f3 	udiv	r3, r2, r3
    cd1a:	4a21      	ldr	r2, [pc, #132]	; (cda0 <set_arm_clock+0x298>)
    cd1c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    cd1e:	f004 031f 	and.w	r3, r4, #31
    cd22:	459c      	cmp	ip, r3
    cd24:	d208      	bcs.n	cd38 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cd26:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cd2a:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cd2e:	4a0c      	ldr	r2, [pc, #48]	; (cd60 <set_arm_clock+0x258>)
    cd30:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cd32:	6813      	ldr	r3, [r2, #0]
    cd34:	2b00      	cmp	r3, #0
    cd36:	dafc      	bge.n	cd32 <set_arm_clock+0x22a>
	}

	return frequency;
}
    cd38:	bcf0      	pop	{r4, r5, r6, r7}
    cd3a:	4770      	bx	lr
	if (mult > 108) mult = 108;
    cd3c:	236c      	movs	r3, #108	; 0x6c
    cd3e:	e781      	b.n	cc44 <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
    cd40:	2104      	movs	r1, #4
    cd42:	e7c5      	b.n	ccd0 <set_arm_clock+0x1c8>
    cd44:	400fc000 	.word	0x400fc000
    cd48:	1f78a400 	.word	0x1f78a400
    cd4c:	23c34600 	.word	0x23c34600
    cd50:	dc3cba00 	.word	0xdc3cba00
    cd54:	004cb223 	.word	0x004cb223
    cd58:	016e3600 	.word	0x016e3600
    cd5c:	51eb851f 	.word	0x51eb851f
    cd60:	40080000 	.word	0x40080000
    cd64:	400d8000 	.word	0x400d8000
    cd68:	80003040 	.word	0x80003040
    cd6c:	269fb1ff 	.word	0x269fb1ff
    cd70:	005b8d80 	.word	0x005b8d80
    cd74:	4df67eff 	.word	0x4df67eff
    cd78:	165e9f81 	.word	0x165e9f81
    cd7c:	00b71b00 	.word	0x00b71b00
    cd80:	8001307f 	.word	0x8001307f
    cd84:	80002000 	.word	0x80002000
    cd88:	08f0d17f 	.word	0x08f0d17f
    cd8c:	2cb4177f 	.word	0x2cb4177f
    cd90:	00e5109f 	.word	0x00e5109f
    cd94:	20003288 	.word	0x20003288
    cd98:	20003284 	.word	0x20003284
    cd9c:	431bde83 	.word	0x431bde83
    cda0:	20005288 	.word	0x20005288

0000cda4 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    cda4:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cda6:	4b0f      	ldr	r3, [pc, #60]	; (cde4 <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    cda8:	4d0f      	ldr	r5, [pc, #60]	; (cde8 <micros+0x44>)
		scc = systick_cycle_count;
    cdaa:	4c10      	ldr	r4, [pc, #64]	; (cdec <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cdac:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    cdb0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    cdb4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    cdb6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    cdb8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    cdbc:	2a00      	cmp	r2, #0
    cdbe:	d1f7      	bne.n	cdb0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    cdc0:	4b0b      	ldr	r3, [pc, #44]	; (cdf0 <micros+0x4c>)
    cdc2:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cdc4:	4a0b      	ldr	r2, [pc, #44]	; (cdf4 <micros+0x50>)
    cdc6:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
    cdc8:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    cdca:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    cdce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    cdd2:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
    cdd6:	429a      	cmp	r2, r3
    cdd8:	bf94      	ite	ls
    cdda:	1880      	addls	r0, r0, r2
    cddc:	18c0      	addhi	r0, r0, r3
    cdde:	bc30      	pop	{r4, r5}
    cde0:	4770      	bx	lr
    cde2:	bf00      	nop
    cde4:	200052c0 	.word	0x200052c0
    cde8:	200052bc 	.word	0x200052bc
    cdec:	200052b8 	.word	0x200052b8
    cdf0:	e0001000 	.word	0xe0001000
    cdf4:	20005288 	.word	0x20005288

0000cdf8 <delay>:
	if (msec == 0) return;
    cdf8:	b900      	cbnz	r0, cdfc <delay+0x4>
    cdfa:	4770      	bx	lr
{
    cdfc:	b538      	push	{r3, r4, r5, lr}
    cdfe:	4605      	mov	r5, r0
	start = micros();
    ce00:	f7ff ffd0 	bl	cda4 <micros>
    ce04:	4604      	mov	r4, r0
    ce06:	e001      	b.n	ce0c <delay+0x14>
		yield();
    ce08:	f001 feea 	bl	ebe0 <yield>
		while ((micros() - start) >= 1000) {
    ce0c:	f7ff ffca 	bl	cda4 <micros>
    ce10:	1b00      	subs	r0, r0, r4
    ce12:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    ce16:	d3f7      	bcc.n	ce08 <delay+0x10>
			if (--msec == 0) return;
    ce18:	3d01      	subs	r5, #1
    ce1a:	d002      	beq.n	ce22 <delay+0x2a>
			start += 1000;
    ce1c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    ce20:	e7f4      	b.n	ce0c <delay+0x14>
}
    ce22:	bd38      	pop	{r3, r4, r5, pc}

0000ce24 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ce24:	2836      	cmp	r0, #54	; 0x36
    ce26:	d81b      	bhi.n	ce60 <digitalWrite+0x3c>
{
    ce28:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    ce2a:	4b0e      	ldr	r3, [pc, #56]	; (ce64 <digitalWrite+0x40>)
    ce2c:	0102      	lsls	r2, r0, #4
    ce2e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    ce32:	589b      	ldr	r3, [r3, r2]
    ce34:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
    ce36:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
    ce38:	4214      	tst	r4, r2
    ce3a:	d008      	beq.n	ce4e <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
    ce3c:	b121      	cbz	r1, ce48 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
    ce3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ce42:	f85d 4b04 	ldr.w	r4, [sp], #4
    ce46:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
    ce48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    ce4c:	e7f9      	b.n	ce42 <digitalWrite+0x1e>
		if (val) {
    ce4e:	b119      	cbz	r1, ce58 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ce50:	6883      	ldr	r3, [r0, #8]
    ce52:	4a05      	ldr	r2, [pc, #20]	; (ce68 <digitalWrite+0x44>)
    ce54:	601a      	str	r2, [r3, #0]
    ce56:	e7f4      	b.n	ce42 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ce58:	6883      	ldr	r3, [r0, #8]
    ce5a:	4a04      	ldr	r2, [pc, #16]	; (ce6c <digitalWrite+0x48>)
    ce5c:	601a      	str	r2, [r3, #0]
    ce5e:	e7f0      	b.n	ce42 <digitalWrite+0x1e>
    ce60:	4770      	bx	lr
    ce62:	bf00      	nop
    ce64:	20002828 	.word	0x20002828
    ce68:	0001f038 	.word	0x0001f038
    ce6c:	00013038 	.word	0x00013038

0000ce70 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    ce70:	2836      	cmp	r0, #54	; 0x36
    ce72:	d80b      	bhi.n	ce8c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    ce74:	4b06      	ldr	r3, [pc, #24]	; (ce90 <digitalRead+0x20>)
    ce76:	0102      	lsls	r2, r0, #4
    ce78:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    ce7c:	589b      	ldr	r3, [r3, r2]
    ce7e:	689a      	ldr	r2, [r3, #8]
    ce80:	68c3      	ldr	r3, [r0, #12]
    ce82:	421a      	tst	r2, r3
    ce84:	bf14      	ite	ne
    ce86:	2001      	movne	r0, #1
    ce88:	2000      	moveq	r0, #0
    ce8a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    ce8c:	2000      	movs	r0, #0
}
    ce8e:	4770      	bx	lr
    ce90:	20002828 	.word	0x20002828

0000ce94 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ce94:	2836      	cmp	r0, #54	; 0x36
    ce96:	d832      	bhi.n	cefe <pinMode+0x6a>
{
    ce98:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    ce9a:	4b19      	ldr	r3, [pc, #100]	; (cf00 <pinMode+0x6c>)
    ce9c:	0102      	lsls	r2, r0, #4
    ce9e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    cea2:	2901      	cmp	r1, #1
    cea4:	d00c      	beq.n	cec0 <pinMode+0x2c>
    cea6:	2904      	cmp	r1, #4
    cea8:	d00a      	beq.n	cec0 <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ceaa:	589a      	ldr	r2, [r3, r2]
    ceac:	6853      	ldr	r3, [r2, #4]
    ceae:	68c4      	ldr	r4, [r0, #12]
    ceb0:	ea23 0304 	bic.w	r3, r3, r4
    ceb4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
    ceb6:	b9a9      	cbnz	r1, cee4 <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ceb8:	6883      	ldr	r3, [r0, #8]
    ceba:	2238      	movs	r2, #56	; 0x38
    cebc:	601a      	str	r2, [r3, #0]
    cebe:	e00b      	b.n	ced8 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    cec0:	589a      	ldr	r2, [r3, r2]
    cec2:	6853      	ldr	r3, [r2, #4]
    cec4:	68c4      	ldr	r4, [r0, #12]
    cec6:	4323      	orrs	r3, r4
    cec8:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
    ceca:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
    cecc:	6883      	ldr	r3, [r0, #8]
    cece:	bf0c      	ite	eq
    ced0:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    ced2:	f640 0238 	movwne	r2, #2104	; 0x838
    ced6:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    ced8:	6843      	ldr	r3, [r0, #4]
    ceda:	2215      	movs	r2, #21
    cedc:	601a      	str	r2, [r3, #0]
}
    cede:	f85d 4b04 	ldr.w	r4, [sp], #4
    cee2:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    cee4:	2902      	cmp	r1, #2
    cee6:	d006      	beq.n	cef6 <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
    cee8:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ceea:	6883      	ldr	r3, [r0, #8]
    ceec:	bf0c      	ite	eq
    ceee:	4a05      	ldreq	r2, [pc, #20]	; (cf04 <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    cef0:	4a05      	ldrne	r2, [pc, #20]	; (cf08 <pinMode+0x74>)
    cef2:	601a      	str	r2, [r3, #0]
    cef4:	e7f0      	b.n	ced8 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cef6:	6883      	ldr	r3, [r0, #8]
    cef8:	4a04      	ldr	r2, [pc, #16]	; (cf0c <pinMode+0x78>)
    cefa:	601a      	str	r2, [r3, #0]
    cefc:	e7ec      	b.n	ced8 <pinMode+0x44>
    cefe:	4770      	bx	lr
    cf00:	20002828 	.word	0x20002828
    cf04:	00013038 	.word	0x00013038
    cf08:	00010038 	.word	0x00010038
    cf0c:	0001f038 	.word	0x0001f038

0000cf10 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    cf10:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    cf12:	f7f5 fe4b 	bl	2bac <setup>
	while (1) {
		loop();
    cf16:	f7f5 fc6b 	bl	27f0 <loop>
		yield();
    cf1a:	f001 fe61 	bl	ebe0 <yield>
	while (1) {
    cf1e:	e7fa      	b.n	cf16 <main+0x6>

0000cf20 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    cf20:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    cf22:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    cf26:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    cf2a:	d16d      	bne.n	d008 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cf2c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    cf2e:	d341      	bcc.n	cfb4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    cf30:	f851 3b04 	ldr.w	r3, [r1], #4
    cf34:	f840 3b04 	str.w	r3, [r0], #4
    cf38:	f851 3b04 	ldr.w	r3, [r1], #4
    cf3c:	f840 3b04 	str.w	r3, [r0], #4
    cf40:	f851 3b04 	ldr.w	r3, [r1], #4
    cf44:	f840 3b04 	str.w	r3, [r0], #4
    cf48:	f851 3b04 	ldr.w	r3, [r1], #4
    cf4c:	f840 3b04 	str.w	r3, [r0], #4
    cf50:	f851 3b04 	ldr.w	r3, [r1], #4
    cf54:	f840 3b04 	str.w	r3, [r0], #4
    cf58:	f851 3b04 	ldr.w	r3, [r1], #4
    cf5c:	f840 3b04 	str.w	r3, [r0], #4
    cf60:	f851 3b04 	ldr.w	r3, [r1], #4
    cf64:	f840 3b04 	str.w	r3, [r0], #4
    cf68:	f851 3b04 	ldr.w	r3, [r1], #4
    cf6c:	f840 3b04 	str.w	r3, [r0], #4
    cf70:	f851 3b04 	ldr.w	r3, [r1], #4
    cf74:	f840 3b04 	str.w	r3, [r0], #4
    cf78:	f851 3b04 	ldr.w	r3, [r1], #4
    cf7c:	f840 3b04 	str.w	r3, [r0], #4
    cf80:	f851 3b04 	ldr.w	r3, [r1], #4
    cf84:	f840 3b04 	str.w	r3, [r0], #4
    cf88:	f851 3b04 	ldr.w	r3, [r1], #4
    cf8c:	f840 3b04 	str.w	r3, [r0], #4
    cf90:	f851 3b04 	ldr.w	r3, [r1], #4
    cf94:	f840 3b04 	str.w	r3, [r0], #4
    cf98:	f851 3b04 	ldr.w	r3, [r1], #4
    cf9c:	f840 3b04 	str.w	r3, [r0], #4
    cfa0:	f851 3b04 	ldr.w	r3, [r1], #4
    cfa4:	f840 3b04 	str.w	r3, [r0], #4
    cfa8:	f851 3b04 	ldr.w	r3, [r1], #4
    cfac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cfb0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    cfb2:	d2bd      	bcs.n	cf30 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    cfb4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    cfb6:	d311      	bcc.n	cfdc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    cfb8:	f851 3b04 	ldr.w	r3, [r1], #4
    cfbc:	f840 3b04 	str.w	r3, [r0], #4
    cfc0:	f851 3b04 	ldr.w	r3, [r1], #4
    cfc4:	f840 3b04 	str.w	r3, [r0], #4
    cfc8:	f851 3b04 	ldr.w	r3, [r1], #4
    cfcc:	f840 3b04 	str.w	r3, [r0], #4
    cfd0:	f851 3b04 	ldr.w	r3, [r1], #4
    cfd4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    cfd8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    cfda:	d2ed      	bcs.n	cfb8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    cfdc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    cfde:	d305      	bcc.n	cfec <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    cfe0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    cfe4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    cfe8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    cfea:	d2f9      	bcs.n	cfe0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    cfec:	3204      	adds	r2, #4
	beq	.Ldone
    cfee:	d008      	beq.n	d002 <memcpy+0xe2>

	lsls	r2, r2, #31
    cff0:	07d2      	lsls	r2, r2, #31
	itt ne
    cff2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    cff4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    cff8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    cffc:	d301      	bcc.n	d002 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    cffe:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d000:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d002:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d004:	4770      	bx	lr
    d006:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d008:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d00a:	d313      	bcc.n	d034 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d00c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d00e:	d08d      	beq.n	cf2c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d010:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d014:	d08a      	beq.n	cf2c <memcpy+0xc>

	rsb	r3, #4
    d016:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d01a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d01c:	07db      	lsls	r3, r3, #31
	itt ne
    d01e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d020:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d024:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d028:	d380      	bcc.n	cf2c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d02a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d02e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d032:	e77b      	b.n	cf2c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d034:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d036:	d3d9      	bcc.n	cfec <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d038:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d03a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d03e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d042:	d2f9      	bcs.n	d038 <memcpy+0x118>

	ldrb	r3, [r1]
    d044:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d046:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d048:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d04a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d04c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d04e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d050:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d052:	4770      	bx	lr

0000d054 <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
    d054:	b508      	push	{r3, lr}
	return malloc(size);
    d056:	f004 f85d 	bl	11114 <malloc>
}
    d05a:	bd08      	pop	{r3, pc}

0000d05c <operator delete(void*, unsigned int)>:
{
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
    d05c:	b508      	push	{r3, lr}
	free(ptr);
    d05e:	f004 f861 	bl	11124 <free>
}
    d062:	bd08      	pop	{r3, pc}

0000d064 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d064:	b530      	push	{r4, r5, lr}
    d066:	4684      	mov	ip, r0
    d068:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
    d06a:	3901      	subs	r1, #1
{
    d06c:	460d      	mov	r5, r1
	int i=0, j;
    d06e:	f04f 0e00 	mov.w	lr, #0
    d072:	e002      	b.n	d07a <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d074:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
    d078:	469c      	mov	ip, r3
		digit = val % radix;
    d07a:	fbbc f3f2 	udiv	r3, ip, r2
    d07e:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d082:	2b09      	cmp	r3, #9
    d084:	bf94      	ite	ls
    d086:	3330      	addls	r3, #48	; 0x30
    d088:	3337      	addhi	r3, #55	; 0x37
    d08a:	b2db      	uxtb	r3, r3
    d08c:	4674      	mov	r4, lr
    d08e:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
    d092:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
    d096:	4562      	cmp	r2, ip
    d098:	d9ec      	bls.n	d074 <ultoa+0x10>
	}
	buf[i + 1] = 0;
    d09a:	1c63      	adds	r3, r4, #1
    d09c:	eb00 0c03 	add.w	ip, r0, r3
    d0a0:	2200      	movs	r2, #0
    d0a2:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
    d0a4:	4596      	cmp	lr, r2
    d0a6:	dd0e      	ble.n	d0c6 <ultoa+0x62>
		t = buf[j];
    d0a8:	460a      	mov	r2, r1
    d0aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
    d0ae:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    d0b2:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
    d0b4:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
    d0b8:	3202      	adds	r2, #2
    d0ba:	1a12      	subs	r2, r2, r0
    d0bc:	1a43      	subs	r3, r0, r1
    d0be:	3b01      	subs	r3, #1
    d0c0:	4423      	add	r3, r4
    d0c2:	429a      	cmp	r2, r3
    d0c4:	dbf0      	blt.n	d0a8 <ultoa+0x44>
	}
	return buf;
}
    d0c6:	bd30      	pop	{r4, r5, pc}

0000d0c8 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0cc:	ed2d 8b02 	vpush	{d8}
    d0d0:	b084      	sub	sp, #16
    d0d2:	eeb0 8a40 	vmov.f32	s16, s0
    d0d6:	4605      	mov	r5, r0
    d0d8:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d0da:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    d0de:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
    d0e2:	eeb4 0a40 	vcmp.f32	s0, s0
    d0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0ea:	d62c      	bvs.n	d146 <dtostrf+0x7e>
    d0ec:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d0ee:	eef0 7ac0 	vabs.f32	s15, s0
    d0f2:	ed9f 7ab0 	vldr	s14, [pc, #704]	; d3b4 <dtostrf+0x2ec>
    d0f6:	eef4 7a47 	vcmp.f32	s15, s14
    d0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d0fe:	dd52      	ble.n	d1a6 <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
    d100:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d108:	bf4c      	ite	mi
    d10a:	2304      	movmi	r3, #4
    d10c:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d10e:	4293      	cmp	r3, r2
    d110:	f280 817c 	bge.w	d40c <dtostrf+0x344>
    d114:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d116:	2800      	cmp	r0, #0
    d118:	f280 817b 	bge.w	d412 <dtostrf+0x34a>
			while (awidth) {
    d11c:	2a00      	cmp	r2, #0
    d11e:	f000 813b 	beq.w	d398 <dtostrf+0x2d0>
    d122:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d124:	2220      	movs	r2, #32
    d126:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d12a:	42a3      	cmp	r3, r4
    d12c:	d1fb      	bne.n	d126 <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d12e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d136:	f140 8127 	bpl.w	d388 <dtostrf+0x2c0>
    d13a:	2200      	movs	r2, #0
    d13c:	461c      	mov	r4, r3
    d13e:	232d      	movs	r3, #45	; 0x2d
    d140:	f804 3b01 	strb.w	r3, [r4], #1
    d144:	e16b      	b.n	d41e <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
    d146:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d14e:	bf4c      	ite	mi
    d150:	2304      	movmi	r3, #4
    d152:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d154:	4293      	cmp	r3, r2
    d156:	f280 8133 	bge.w	d3c0 <dtostrf+0x2f8>
    d15a:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d15c:	2800      	cmp	r0, #0
    d15e:	f280 8132 	bge.w	d3c6 <dtostrf+0x2fe>
			while (awidth) {
    d162:	2a00      	cmp	r2, #0
    d164:	f000 810c 	beq.w	d380 <dtostrf+0x2b8>
    d168:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d16a:	2220      	movs	r2, #32
    d16c:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d170:	429c      	cmp	r4, r3
    d172:	d1fb      	bne.n	d16c <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d174:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d178:	ee18 2a10 	vmov	r2, s16
    d17c:	2a00      	cmp	r2, #0
    d17e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d182:	fe67 7a87 	vselge.f32	s15, s15, s14
    d186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d18e:	f140 80f0 	bpl.w	d372 <dtostrf+0x2aa>
    d192:	2200      	movs	r2, #0
    d194:	461c      	mov	r4, r3
    d196:	232d      	movs	r3, #45	; 0x2d
    d198:	f804 3b01 	strb.w	r3, [r4], #1
    d19c:	e122      	b.n	d3e4 <dtostrf+0x31c>
    d19e:	4623      	mov	r3, r4
    d1a0:	e7f8      	b.n	d194 <dtostrf+0xcc>
    d1a2:	4623      	mov	r3, r4
    d1a4:	e7ca      	b.n	d13c <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d1a6:	468a      	mov	sl, r1
    d1a8:	aa02      	add	r2, sp, #8
    d1aa:	a903      	add	r1, sp, #12
    d1ac:	4640      	mov	r0, r8
    d1ae:	f004 fb95 	bl	118dc <fcvtf>
    d1b2:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d1b4:	9b03      	ldr	r3, [sp, #12]
    d1b6:	ea58 0203 	orrs.w	r2, r8, r3
    d1ba:	d131      	bne.n	d220 <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d1bc:	7802      	ldrb	r2, [r0, #0]
    d1be:	487e      	ldr	r0, [pc, #504]	; (d3b8 <dtostrf+0x2f0>)
    d1c0:	4f7e      	ldr	r7, [pc, #504]	; (d3bc <dtostrf+0x2f4>)
    d1c2:	2a34      	cmp	r2, #52	; 0x34
    d1c4:	bf98      	it	ls
    d1c6:	4607      	movls	r7, r0
		decpt++;
    d1c8:	2301      	movs	r3, #1
    d1ca:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
    d1cc:	461e      	mov	r6, r3
    d1ce:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    d1d0:	f1b8 0e00 	subs.w	lr, r8, #0
    d1d4:	bf18      	it	ne
    d1d6:	f04f 0e01 	movne.w	lr, #1
    d1da:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
    d1de:	d036      	beq.n	d24e <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    d1e0:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
    d1e4:	4443      	add	r3, r8
    d1e6:	4283      	cmp	r3, r0
    d1e8:	d26d      	bcs.n	d2c6 <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d1ea:	f1b8 0f00 	cmp.w	r8, #0
    d1ee:	dd06      	ble.n	d1fe <dtostrf+0x136>
				val *= 10.0f;
    d1f0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    d1f4:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    d1f8:	f1ba 0a01 	subs.w	sl, sl, #1
    d1fc:	d1fa      	bne.n	d1f4 <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d1fe:	aa02      	add	r2, sp, #8
    d200:	a901      	add	r1, sp, #4
    d202:	4650      	mov	r0, sl
    d204:	eeb0 0a48 	vmov.f32	s0, s16
    d208:	f004 fb68 	bl	118dc <fcvtf>
    d20c:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d20e:	9903      	ldr	r1, [sp, #12]
    d210:	9b01      	ldr	r3, [sp, #4]
    d212:	1a5a      	subs	r2, r3, r1
    d214:	f108 0301 	add.w	r3, r8, #1
    d218:	429a      	cmp	r2, r3
    d21a:	d051      	beq.n	d2c0 <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
    d21c:	46ce      	mov	lr, r9
    d21e:	e016      	b.n	d24e <dtostrf+0x186>
	if (-decpt  > (int)precision) {
    d220:	425b      	negs	r3, r3
    d222:	4598      	cmp	r8, r3
    d224:	da03      	bge.n	d22e <dtostrf+0x166>
		decpt = -precision;
    d226:	f1c8 0300 	rsb	r3, r8, #0
    d22a:	9303      	str	r3, [sp, #12]
		s = "0";
    d22c:	4f62      	ldr	r7, [pc, #392]	; (d3b8 <dtostrf+0x2f0>)
	reqd = strlen(s);
    d22e:	4638      	mov	r0, r7
    d230:	f005 f926 	bl	12480 <strlen>
    d234:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
    d236:	9b03      	ldr	r3, [sp, #12]
    d238:	4283      	cmp	r3, r0
    d23a:	bfb8      	it	lt
    d23c:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
    d23e:	2b00      	cmp	r3, #0
    d240:	d1c6      	bne.n	d1d0 <dtostrf+0x108>
    d242:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
    d244:	f1b8 0e00 	subs.w	lr, r8, #0
    d248:	bf18      	it	ne
    d24a:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    d24e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d252:	f1b8 0f00 	cmp.w	r8, #0
    d256:	f000 80a3 	beq.w	d3a0 <dtostrf+0x2d8>
    d25a:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
    d25c:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d25e:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d262:	f1b9 0f00 	cmp.w	r9, #0
    d266:	dd30      	ble.n	d2ca <dtostrf+0x202>
		e += pad;
    d268:	464b      	mov	r3, r9
    d26a:	444a      	add	r2, r9
	p = buf;
    d26c:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
    d26e:	f04f 0c20 	mov.w	ip, #32
    d272:	f800 cb01 	strb.w	ip, [r0], #1
    d276:	1a21      	subs	r1, r4, r0
    d278:	4419      	add	r1, r3
    d27a:	2900      	cmp	r1, #0
    d27c:	dcf9      	bgt.n	d272 <dtostrf+0x1aa>
    d27e:	f1b9 0f00 	cmp.w	r9, #0
    d282:	bfd8      	it	le
    d284:	2301      	movle	r3, #1
    d286:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    d288:	f1b8 0f00 	cmp.w	r8, #0
    d28c:	d002      	beq.n	d294 <dtostrf+0x1cc>
    d28e:	212d      	movs	r1, #45	; 0x2d
    d290:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
    d294:	9803      	ldr	r0, [sp, #12]
    d296:	b910      	cbnz	r0, d29e <dtostrf+0x1d6>
    d298:	f1be 0f00 	cmp.w	lr, #0
    d29c:	d117      	bne.n	d2ce <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    d29e:	2800      	cmp	r0, #0
    d2a0:	da02      	bge.n	d2a8 <dtostrf+0x1e0>
    d2a2:	f1be 0f00 	cmp.w	lr, #0
    d2a6:	d11a      	bne.n	d2de <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d2a8:	4293      	cmp	r3, r2
    d2aa:	d24d      	bcs.n	d348 <dtostrf+0x280>
		*p++ = *s++;
    d2ac:	4638      	mov	r0, r7
    d2ae:	469c      	mov	ip, r3
    d2b0:	f810 1b01 	ldrb.w	r1, [r0], #1
    d2b4:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d2b8:	4594      	cmp	ip, r2
    d2ba:	d03f      	beq.n	d33c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d2bc:	272e      	movs	r7, #46	; 0x2e
    d2be:	e034      	b.n	d32a <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d2c0:	3101      	adds	r1, #1
    d2c2:	9103      	str	r1, [sp, #12]
    d2c4:	e7aa      	b.n	d21c <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
    d2c6:	46ce      	mov	lr, r9
    d2c8:	e7c1      	b.n	d24e <dtostrf+0x186>
	p = buf;
    d2ca:	4623      	mov	r3, r4
    d2cc:	e7df      	b.n	d28e <dtostrf+0x1c6>
		*p++ = '0';
    d2ce:	4619      	mov	r1, r3
    d2d0:	2030      	movs	r0, #48	; 0x30
    d2d2:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
    d2d6:	202e      	movs	r0, #46	; 0x2e
    d2d8:	7058      	strb	r0, [r3, #1]
    d2da:	460b      	mov	r3, r1
    d2dc:	e7e4      	b.n	d2a8 <dtostrf+0x1e0>
		*p++ = '0';
    d2de:	469e      	mov	lr, r3
    d2e0:	2130      	movs	r1, #48	; 0x30
    d2e2:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
    d2e6:	212e      	movs	r1, #46	; 0x2e
    d2e8:	7059      	strb	r1, [r3, #1]
    d2ea:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
    d2ec:	4601      	mov	r1, r0
			*p++ = '0';
    d2ee:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d2f2:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
    d2f6:	3101      	adds	r1, #1
    d2f8:	d4fb      	bmi.n	d2f2 <dtostrf+0x22a>
			*p++ = '0';
    d2fa:	4243      	negs	r3, r0
    d2fc:	2800      	cmp	r0, #0
    d2fe:	bfa8      	it	ge
    d300:	2301      	movge	r3, #1
    d302:	4473      	add	r3, lr
    d304:	9103      	str	r1, [sp, #12]
    d306:	ea6f 0000 	mvn.w	r0, r0
    d30a:	bfa8      	it	ge
    d30c:	2000      	movge	r0, #0
    d30e:	2130      	movs	r1, #48	; 0x30
    d310:	f80e 1000 	strb.w	r1, [lr, r0]
    d314:	e7c8      	b.n	d2a8 <dtostrf+0x1e0>
    d316:	4663      	mov	r3, ip
	while (p < e) {
    d318:	4293      	cmp	r3, r2
    d31a:	d20e      	bcs.n	d33a <dtostrf+0x272>
		*p++ = *s++;
    d31c:	469c      	mov	ip, r3
    d31e:	f810 1b01 	ldrb.w	r1, [r0], #1
    d322:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d326:	4594      	cmp	ip, r2
    d328:	d008      	beq.n	d33c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d32a:	9903      	ldr	r1, [sp, #12]
    d32c:	3901      	subs	r1, #1
    d32e:	9103      	str	r1, [sp, #12]
    d330:	2900      	cmp	r1, #0
    d332:	d1f0      	bne.n	d316 <dtostrf+0x24e>
    d334:	705f      	strb	r7, [r3, #1]
    d336:	3302      	adds	r3, #2
    d338:	e7ee      	b.n	d318 <dtostrf+0x250>
    d33a:	461a      	mov	r2, r3
	}
	if (width < 0) {
    d33c:	2d00      	cmp	r5, #0
    d33e:	db05      	blt.n	d34c <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d340:	2300      	movs	r3, #0
    d342:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    d344:	4620      	mov	r0, r4
    d346:	e07e      	b.n	d446 <dtostrf+0x37e>
	while (p < e) {
    d348:	461a      	mov	r2, r3
    d34a:	e7f7      	b.n	d33c <dtostrf+0x274>
		pad = (reqd + width) * -1;
    d34c:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
    d34e:	43f0      	mvns	r0, r6
    d350:	2e00      	cmp	r6, #0
    d352:	daf5      	bge.n	d340 <dtostrf+0x278>
    d354:	4611      	mov	r1, r2
    d356:	2520      	movs	r5, #32
    d358:	f801 5b01 	strb.w	r5, [r1], #1
    d35c:	f1c1 0301 	rsb	r3, r1, #1
    d360:	4403      	add	r3, r0
    d362:	4413      	add	r3, r2
    d364:	2b00      	cmp	r3, #0
    d366:	dcf7      	bgt.n	d358 <dtostrf+0x290>
    d368:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d36c:	3001      	adds	r0, #1
    d36e:	4402      	add	r2, r0
    d370:	e7e6      	b.n	d340 <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d372:	224e      	movs	r2, #78	; 0x4e
    d374:	701a      	strb	r2, [r3, #0]
    d376:	2141      	movs	r1, #65	; 0x41
    d378:	7059      	strb	r1, [r3, #1]
    d37a:	1cd8      	adds	r0, r3, #3
    d37c:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d37e:	e042      	b.n	d406 <dtostrf+0x33e>
			while (awidth) {
    d380:	4623      	mov	r3, r4
    d382:	e6f7      	b.n	d174 <dtostrf+0xac>
		if (width<0) {
    d384:	4623      	mov	r3, r4
    d386:	e6f5      	b.n	d174 <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d388:	2249      	movs	r2, #73	; 0x49
    d38a:	701a      	strb	r2, [r3, #0]
    d38c:	224e      	movs	r2, #78	; 0x4e
    d38e:	705a      	strb	r2, [r3, #1]
    d390:	1cd8      	adds	r0, r3, #3
    d392:	2246      	movs	r2, #70	; 0x46
    d394:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d396:	e054      	b.n	d442 <dtostrf+0x37a>
			while (awidth) {
    d398:	4623      	mov	r3, r4
    d39a:	e6c8      	b.n	d12e <dtostrf+0x66>
		if (width<0) {
    d39c:	4623      	mov	r3, r4
    d39e:	e6c6      	b.n	d12e <dtostrf+0x66>
	e = p + reqd;
    d3a0:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d3a2:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d3a6:	f1b9 0f00 	cmp.w	r9, #0
    d3aa:	f73f af5d 	bgt.w	d268 <dtostrf+0x1a0>
	p = buf;
    d3ae:	4623      	mov	r3, r4
    d3b0:	e770      	b.n	d294 <dtostrf+0x1cc>
    d3b2:	bf00      	nop
    d3b4:	7f7fffff 	.word	0x7f7fffff
    d3b8:	20002b98 	.word	0x20002b98
    d3bc:	20002b9c 	.word	0x20002b9c
		if (width<0) {
    d3c0:	2800      	cmp	r0, #0
    d3c2:	dbdf      	blt.n	d384 <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d3c4:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d3c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d3ca:	ee18 3a10 	vmov	r3, s16
    d3ce:	2b00      	cmp	r3, #0
    d3d0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d3d4:	fe67 7a87 	vselge.f32	s15, s15, s14
    d3d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d3e0:	f53f aedd 	bmi.w	d19e <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d3e4:	234e      	movs	r3, #78	; 0x4e
    d3e6:	7023      	strb	r3, [r4, #0]
    d3e8:	2141      	movs	r1, #65	; 0x41
    d3ea:	7061      	strb	r1, [r4, #1]
    d3ec:	1ce0      	adds	r0, r4, #3
    d3ee:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d3f0:	b14a      	cbz	r2, d406 <dtostrf+0x33e>
    d3f2:	4615      	mov	r5, r2
    d3f4:	3203      	adds	r2, #3
    d3f6:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d3f8:	4602      	mov	r2, r0
			*buf++ = ' ';
    d3fa:	2120      	movs	r1, #32
    d3fc:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
    d400:	4293      	cmp	r3, r2
    d402:	d1fb      	bne.n	d3fc <dtostrf+0x334>
			*buf++ = ' ';
    d404:	4428      	add	r0, r5
		*buf = 0;
    d406:	2300      	movs	r3, #0
    d408:	7003      	strb	r3, [r0, #0]
		return buf;
    d40a:	e01c      	b.n	d446 <dtostrf+0x37e>
		if (width<0) {
    d40c:	2800      	cmp	r0, #0
    d40e:	dbc5      	blt.n	d39c <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d410:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
    d412:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d41a:	f53f aec2 	bmi.w	d1a2 <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d41e:	2349      	movs	r3, #73	; 0x49
    d420:	7023      	strb	r3, [r4, #0]
    d422:	234e      	movs	r3, #78	; 0x4e
    d424:	7063      	strb	r3, [r4, #1]
    d426:	1ce0      	adds	r0, r4, #3
    d428:	2346      	movs	r3, #70	; 0x46
    d42a:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d42c:	b14a      	cbz	r2, d442 <dtostrf+0x37a>
    d42e:	4615      	mov	r5, r2
    d430:	3203      	adds	r2, #3
    d432:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d434:	4603      	mov	r3, r0
			*buf++ = ' ';
    d436:	2120      	movs	r1, #32
    d438:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
    d43c:	429a      	cmp	r2, r3
    d43e:	d1fb      	bne.n	d438 <dtostrf+0x370>
			*buf++ = ' ';
    d440:	4428      	add	r0, r5
		*buf = 0;
    d442:	2300      	movs	r3, #0
    d444:	7003      	strb	r3, [r0, #0]
}
    d446:	b004      	add	sp, #16
    d448:	ecbd 8b02 	vpop	{d8}
    d44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d450 <flexpwmWrite>:
{
    d450:	b570      	push	{r4, r5, r6, lr}
	uint16_t mask = 1 << submodule;
    d452:	f04f 0c01 	mov.w	ip, #1
    d456:	fa0c fc01 	lsl.w	ip, ip, r1
    d45a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t modulo = p->SM[submodule].VAL1;
    d45e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    d462:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    d466:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    d46a:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    d46e:	fb0e 3303 	mla	r3, lr, r3, r3
    d472:	4c27      	ldr	r4, [pc, #156]	; (d510 <flexpwmWrite+0xc0>)
    d474:	7824      	ldrb	r4, [r4, #0]
    d476:	40e3      	lsrs	r3, r4
    d478:	4573      	cmp	r3, lr
    d47a:	bf28      	it	cs
    d47c:	4673      	movcs	r3, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d47e:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    d482:	b2a4      	uxth	r4, r4
    d484:	012e      	lsls	r6, r5, #4
    d486:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    d48a:	4334      	orrs	r4, r6
    d48c:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    d490:	2a01      	cmp	r2, #1
    d492:	d01f      	beq.n	d4d4 <flexpwmWrite+0x84>
    d494:	2a02      	cmp	r2, #2
    d496:	d02d      	beq.n	d4f4 <flexpwmWrite+0xa4>
    d498:	b14a      	cbz	r2, d4ae <flexpwmWrite+0x5e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d49a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d49e:	b29b      	uxth	r3, r3
    d4a0:	f00c 0c0f 	and.w	ip, ip, #15
    d4a4:	ea43 0c0c 	orr.w	ip, r3, ip
    d4a8:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    d4ac:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL0 = modulo - cval;
    d4ae:	ebae 0e03 	sub.w	lr, lr, r3
    d4b2:	fa1f fe8e 	uxth.w	lr, lr
    d4b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d4ba:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d4be:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    d4c2:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d4c6:	b29b      	uxth	r3, r3
    d4c8:	f00c 020f 	and.w	r2, ip, #15
    d4cc:	4313      	orrs	r3, r2
    d4ce:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d4d2:	e7e2      	b.n	d49a <flexpwmWrite+0x4a>
		p->SM[submodule].VAL3 = cval;
    d4d4:	b29b      	uxth	r3, r3
    d4d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d4da:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d4de:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    d4e0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d4e4:	b29b      	uxth	r3, r3
    d4e6:	022d      	lsls	r5, r5, #8
    d4e8:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    d4ec:	432b      	orrs	r3, r5
    d4ee:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d4f2:	e7d2      	b.n	d49a <flexpwmWrite+0x4a>
		p->SM[submodule].VAL5 = cval;
    d4f4:	b29b      	uxth	r3, r3
    d4f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d4fa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d4fe:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    d500:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d504:	b29b      	uxth	r3, r3
    d506:	431e      	orrs	r6, r3
    d508:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    d50c:	e7c5      	b.n	d49a <flexpwmWrite+0x4a>
    d50e:	bf00      	nop
    d510:	20003a19 	.word	0x20003a19

0000d514 <flexpwmFrequency>:
{
    d514:	b530      	push	{r4, r5, lr}
	uint16_t mask = 1 << submodule;
    d516:	f04f 0c01 	mov.w	ip, #1
    d51a:	fa0c fc01 	lsl.w	ip, ip, r1
    d51e:	fa1f f58c 	uxth.w	r5, ip
	uint32_t olddiv = p->SM[submodule].VAL1;
    d522:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    d526:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d52a:	89dc      	ldrh	r4, [r3, #14]
    d52c:	b2a4      	uxth	r4, r4
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d52e:	4b32      	ldr	r3, [pc, #200]	; (d5f8 <flexpwmFrequency+0xe4>)
    d530:	ed93 7a00 	vldr	s14, [r3]
    d534:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d538:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d53c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d540:	ee77 7a87 	vadd.f32	s15, s15, s14
    d544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d548:	ee17 2a90 	vmov	r2, s15
	while (newdiv > 65535 && prescale < 7) {
    d54c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    d550:	d350      	bcc.n	d5f4 <flexpwmFrequency+0xe0>
	uint32_t prescale = 0;
    d552:	2300      	movs	r3, #0
	while (newdiv > 65535 && prescale < 7) {
    d554:	f64f 7eff 	movw	lr, #65535	; 0xffff
		newdiv = newdiv >> 1;
    d558:	0852      	lsrs	r2, r2, #1
		prescale = prescale + 1;
    d55a:	3301      	adds	r3, #1
	while (newdiv > 65535 && prescale < 7) {
    d55c:	4572      	cmp	r2, lr
    d55e:	d901      	bls.n	d564 <flexpwmFrequency+0x50>
    d560:	2b06      	cmp	r3, #6
    d562:	d9f9      	bls.n	d558 <flexpwmFrequency+0x44>
	if (newdiv > 65535) {
    d564:	2a02      	cmp	r2, #2
    d566:	bf38      	it	cc
    d568:	2202      	movcc	r2, #2
    d56a:	f64f 7eff 	movw	lr, #65535	; 0xffff
    d56e:	4572      	cmp	r2, lr
    d570:	bf28      	it	cs
    d572:	4672      	movcs	r2, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d574:	f8b0 e188 	ldrh.w	lr, [r0, #392]	; 0x188
    d578:	fa1f fe8e 	uxth.w	lr, lr
    d57c:	012d      	lsls	r5, r5, #4
    d57e:	b2ed      	uxtb	r5, r5
    d580:	ea4e 0e05 	orr.w	lr, lr, r5
    d584:	f8a0 e188 	strh.w	lr, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    d588:	011b      	lsls	r3, r3, #4
    d58a:	b2db      	uxtb	r3, r3
    d58c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d590:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    d594:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5
    d598:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    d59c:	1e53      	subs	r3, r2, #1
    d59e:	b29b      	uxth	r3, r3
    d5a0:	f8ae 300e 	strh.w	r3, [lr, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    d5a4:	f8be 300a 	ldrh.w	r3, [lr, #10]
    d5a8:	b29b      	uxth	r3, r3
    d5aa:	fb02 f303 	mul.w	r3, r2, r3
    d5ae:	fbb3 f3f4 	udiv	r3, r3, r4
    d5b2:	b29b      	uxth	r3, r3
    d5b4:	f8ae 300a 	strh.w	r3, [lr, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    d5b8:	f8be 3016 	ldrh.w	r3, [lr, #22]
    d5bc:	b29b      	uxth	r3, r3
    d5be:	fb02 f303 	mul.w	r3, r2, r3
    d5c2:	fbb3 f3f4 	udiv	r3, r3, r4
    d5c6:	b29b      	uxth	r3, r3
    d5c8:	f8ae 3016 	strh.w	r3, [lr, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    d5cc:	f8be 301e 	ldrh.w	r3, [lr, #30]
    d5d0:	b29b      	uxth	r3, r3
    d5d2:	fb02 f303 	mul.w	r3, r2, r3
    d5d6:	fbb3 f3f4 	udiv	r3, r3, r4
    d5da:	b29b      	uxth	r3, r3
    d5dc:	f8ae 301e 	strh.w	r3, [lr, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d5e0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d5e4:	b29b      	uxth	r3, r3
    d5e6:	f00c 0c0f 	and.w	ip, ip, #15
    d5ea:	ea43 030c 	orr.w	r3, r3, ip
    d5ee:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d5f2:	bd30      	pop	{r4, r5, pc}
	uint32_t prescale = 0;
    d5f4:	2300      	movs	r3, #0
    d5f6:	e7b5      	b.n	d564 <flexpwmFrequency+0x50>
    d5f8:	20003284 	.word	0x20003284

0000d5fc <quadtimerWrite>:
{
    d5fc:	b510      	push	{r4, lr}
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    d5fe:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
    d602:	f8be c006 	ldrh.w	ip, [lr, #6]
    d606:	fa1f fc8c 	uxth.w	ip, ip
    d60a:	f8be 3010 	ldrh.w	r3, [lr, #16]
    d60e:	f1cc 1c01 	rsb	ip, ip, #65537	; 0x10001
    d612:	fa1c f383 	uxtah	r3, ip, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    d616:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    d61a:	fb0c f202 	mul.w	r2, ip, r2
    d61e:	4c08      	ldr	r4, [pc, #32]	; (d640 <quadtimerWrite+0x44>)
    d620:	7824      	ldrb	r4, [r4, #0]
    d622:	40e2      	lsrs	r2, r4
	if (high >= modulo - 1) high = modulo - 2;
    d624:	4594      	cmp	ip, r2
    d626:	bf98      	it	ls
    d628:	1e9a      	subls	r2, r3, #2
	uint32_t low = modulo - high; // low must 2 or higher
    d62a:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].LOAD = 65537 - low;
    d62c:	f1c3 0301 	rsb	r3, r3, #1
    d630:	b29b      	uxth	r3, r3
    d632:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->CH[submodule].CMPLD1 = high;
    d636:	b292      	uxth	r2, r2
    d638:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    d63c:	8202      	strh	r2, [r0, #16]
}
    d63e:	bd10      	pop	{r4, pc}
    d640:	20003a19 	.word	0x20003a19

0000d644 <quadtimerFrequency>:
{
    d644:	b500      	push	{lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d646:	4b23      	ldr	r3, [pc, #140]	; (d6d4 <quadtimerFrequency+0x90>)
    d648:	ed93 7a00 	vldr	s14, [r3]
    d64c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d650:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d654:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d658:	ee77 7a87 	vadd.f32	s15, s15, s14
    d65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d660:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    d664:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    d668:	4293      	cmp	r3, r2
    d66a:	d930      	bls.n	d6ce <quadtimerFrequency+0x8a>
	uint32_t prescale = 0;
    d66c:	2200      	movs	r2, #0
	while (newdiv > 65534 && prescale < 7) {
    d66e:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = newdiv >> 1; 
    d672:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    d674:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    d676:	4563      	cmp	r3, ip
    d678:	d901      	bls.n	d67e <quadtimerFrequency+0x3a>
    d67a:	2a06      	cmp	r2, #6
    d67c:	d9f9      	bls.n	d672 <quadtimerFrequency+0x2e>
	if (newdiv > 65534) {
    d67e:	2b02      	cmp	r3, #2
    d680:	bf38      	it	cc
    d682:	2302      	movcc	r3, #2
    d684:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
    d688:	4563      	cmp	r3, ip
    d68a:	bf28      	it	cs
    d68c:	4663      	movcs	r3, ip
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    d68e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d692:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    d696:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    d69a:	88c8      	ldrh	r0, [r1, #6]
    d69c:	b280      	uxth	r0, r0
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    d69e:	fb0e fc03 	mul.w	ip, lr, r3
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    d6a2:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    d6a6:	4470      	add	r0, lr
    d6a8:	fbbc f0f0 	udiv	r0, ip, r0
	uint32_t low = newdiv - high;
    d6ac:	1a1b      	subs	r3, r3, r0
	p->CH[submodule].LOAD = 65537 - low;
    d6ae:	f1c3 0301 	rsb	r3, r3, #1
    d6b2:	b29b      	uxth	r3, r3
    d6b4:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    d6b6:	b280      	uxth	r0, r0
    d6b8:	8208      	strh	r0, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    d6ba:	3208      	adds	r2, #8
    d6bc:	0252      	lsls	r2, r2, #9
    d6be:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    d6c2:	f242 0326 	movw	r3, #8230	; 0x2026
    d6c6:	4313      	orrs	r3, r2
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    d6c8:	818b      	strh	r3, [r1, #12]
}
    d6ca:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t prescale = 0;
    d6ce:	2200      	movs	r2, #0
    d6d0:	e7d5      	b.n	d67e <quadtimerFrequency+0x3a>
    d6d2:	bf00      	nop
    d6d4:	20003284 	.word	0x20003284

0000d6d8 <analogWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    d6d8:	2836      	cmp	r0, #54	; 0x36
    d6da:	d83f      	bhi.n	d75c <analogWrite+0x84>
{
    d6dc:	b538      	push	{r3, r4, r5, lr}
    d6de:	4604      	mov	r4, r0
	info = pwm_pin_info + pin;
    d6e0:	4b1f      	ldr	r3, [pc, #124]	; (d760 <analogWrite+0x88>)
    d6e2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	if (info->type == 1) {
    d6e6:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    d6ea:	2b01      	cmp	r3, #1
    d6ec:	d014      	beq.n	d718 <analogWrite+0x40>
	} else if (info->type == 2) {
    d6ee:	2b02      	cmp	r3, #2
    d6f0:	d12b      	bne.n	d74a <analogWrite+0x72>
		switch ((info->module >> 4) & 3) {
    d6f2:	f895 c001 	ldrb.w	ip, [r5, #1]
    d6f6:	f3cc 1301 	ubfx	r3, ip, #4, #2
    d6fa:	2b01      	cmp	r3, #1
    d6fc:	d02a      	beq.n	d754 <analogWrite+0x7c>
    d6fe:	2b02      	cmp	r3, #2
    d700:	d02a      	beq.n	d758 <analogWrite+0x80>
		  case 0: qtimer = &IMXRT_TMR1; break;
    d702:	4818      	ldr	r0, [pc, #96]	; (d764 <analogWrite+0x8c>)
    d704:	4a18      	ldr	r2, [pc, #96]	; (d768 <analogWrite+0x90>)
    d706:	2b00      	cmp	r3, #0
    d708:	bf08      	it	eq
    d70a:	4610      	moveq	r0, r2
		quadtimerWrite(qtimer, info->module & 0x03, val);
    d70c:	b28a      	uxth	r2, r1
    d70e:	f00c 0103 	and.w	r1, ip, #3
    d712:	f7ff ff73 	bl	d5fc <quadtimerWrite>
    d716:	e012      	b.n	d73e <analogWrite+0x66>
		switch ((info->module >> 4) & 3) {
    d718:	f895 c001 	ldrb.w	ip, [r5, #1]
    d71c:	f3cc 1301 	ubfx	r3, ip, #4, #2
    d720:	2b01      	cmp	r3, #1
    d722:	d013      	beq.n	d74c <analogWrite+0x74>
    d724:	2b02      	cmp	r3, #2
    d726:	d013      	beq.n	d750 <analogWrite+0x78>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    d728:	4810      	ldr	r0, [pc, #64]	; (d76c <analogWrite+0x94>)
    d72a:	4a11      	ldr	r2, [pc, #68]	; (d770 <analogWrite+0x98>)
    d72c:	2b00      	cmp	r3, #0
    d72e:	bf08      	it	eq
    d730:	4610      	moveq	r0, r2
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    d732:	b28b      	uxth	r3, r1
    d734:	78aa      	ldrb	r2, [r5, #2]
    d736:	f00c 0103 	and.w	r1, ip, #3
    d73a:	f7ff fe89 	bl	d450 <flexpwmWrite>
	*(portConfigRegister(pin)) = info->muxval;
    d73e:	4b0d      	ldr	r3, [pc, #52]	; (d774 <analogWrite+0x9c>)
    d740:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    d744:	685b      	ldr	r3, [r3, #4]
    d746:	78ea      	ldrb	r2, [r5, #3]
    d748:	601a      	str	r2, [r3, #0]
}
    d74a:	bd38      	pop	{r3, r4, r5, pc}
		switch ((info->module >> 4) & 3) {
    d74c:	480a      	ldr	r0, [pc, #40]	; (d778 <analogWrite+0xa0>)
    d74e:	e7f0      	b.n	d732 <analogWrite+0x5a>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    d750:	480a      	ldr	r0, [pc, #40]	; (d77c <analogWrite+0xa4>)
    d752:	e7ee      	b.n	d732 <analogWrite+0x5a>
		switch ((info->module >> 4) & 3) {
    d754:	480a      	ldr	r0, [pc, #40]	; (d780 <analogWrite+0xa8>)
    d756:	e7d9      	b.n	d70c <analogWrite+0x34>
		  case 2: qtimer = &IMXRT_TMR3; break;
    d758:	480a      	ldr	r0, [pc, #40]	; (d784 <analogWrite+0xac>)
    d75a:	e7d7      	b.n	d70c <analogWrite+0x34>
    d75c:	4770      	bx	lr
    d75e:	bf00      	nop
    d760:	20002c84 	.word	0x20002c84
    d764:	401e8000 	.word	0x401e8000
    d768:	401dc000 	.word	0x401dc000
    d76c:	403e8000 	.word	0x403e8000
    d770:	403dc000 	.word	0x403dc000
    d774:	20002828 	.word	0x20002828
    d778:	403e0000 	.word	0x403e0000
    d77c:	403e4000 	.word	0x403e4000
    d780:	401e0000 	.word	0x401e0000
    d784:	401e4000 	.word	0x401e4000

0000d788 <analogWriteFrequency>:
	if (pin >= CORE_NUM_DIGITAL) return;
    d788:	2836      	cmp	r0, #54	; 0x36
    d78a:	d835      	bhi.n	d7f8 <analogWriteFrequency+0x70>
{
    d78c:	b510      	push	{r4, lr}
	info = pwm_pin_info + pin;
    d78e:	4b1b      	ldr	r3, [pc, #108]	; (d7fc <analogWriteFrequency+0x74>)
    d790:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	if (info->type == 1) {
    d794:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    d798:	2b01      	cmp	r3, #1
    d79a:	d002      	beq.n	d7a2 <analogWriteFrequency+0x1a>
	} else if (info->type == 2) {
    d79c:	2b02      	cmp	r3, #2
    d79e:	d016      	beq.n	d7ce <analogWriteFrequency+0x46>
}
    d7a0:	bd10      	pop	{r4, pc}
		switch ((info->module >> 4) & 3) {
    d7a2:	7851      	ldrb	r1, [r2, #1]
    d7a4:	f3c1 1301 	ubfx	r3, r1, #4, #2
    d7a8:	2b01      	cmp	r3, #1
    d7aa:	d00c      	beq.n	d7c6 <analogWriteFrequency+0x3e>
    d7ac:	2b02      	cmp	r3, #2
    d7ae:	d00c      	beq.n	d7ca <analogWriteFrequency+0x42>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    d7b0:	4813      	ldr	r0, [pc, #76]	; (d800 <analogWriteFrequency+0x78>)
    d7b2:	4c14      	ldr	r4, [pc, #80]	; (d804 <analogWriteFrequency+0x7c>)
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	bf08      	it	eq
    d7b8:	4620      	moveq	r0, r4
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    d7ba:	7892      	ldrb	r2, [r2, #2]
    d7bc:	f001 0103 	and.w	r1, r1, #3
    d7c0:	f7ff fea8 	bl	d514 <flexpwmFrequency>
    d7c4:	e7ec      	b.n	d7a0 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    d7c6:	4810      	ldr	r0, [pc, #64]	; (d808 <analogWriteFrequency+0x80>)
    d7c8:	e7f7      	b.n	d7ba <analogWriteFrequency+0x32>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    d7ca:	4810      	ldr	r0, [pc, #64]	; (d80c <analogWriteFrequency+0x84>)
    d7cc:	e7f5      	b.n	d7ba <analogWriteFrequency+0x32>
		switch ((info->module >> 4) & 3) {
    d7ce:	7851      	ldrb	r1, [r2, #1]
    d7d0:	f3c1 1301 	ubfx	r3, r1, #4, #2
    d7d4:	2b01      	cmp	r3, #1
    d7d6:	d00b      	beq.n	d7f0 <analogWriteFrequency+0x68>
    d7d8:	2b02      	cmp	r3, #2
    d7da:	d00b      	beq.n	d7f4 <analogWriteFrequency+0x6c>
		  case 0: qtimer = &IMXRT_TMR1; break;
    d7dc:	480c      	ldr	r0, [pc, #48]	; (d810 <analogWriteFrequency+0x88>)
    d7de:	4a0d      	ldr	r2, [pc, #52]	; (d814 <analogWriteFrequency+0x8c>)
    d7e0:	2b00      	cmp	r3, #0
    d7e2:	bf08      	it	eq
    d7e4:	4610      	moveq	r0, r2
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    d7e6:	f001 0103 	and.w	r1, r1, #3
    d7ea:	f7ff ff2b 	bl	d644 <quadtimerFrequency>
    d7ee:	e7d7      	b.n	d7a0 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    d7f0:	4809      	ldr	r0, [pc, #36]	; (d818 <analogWriteFrequency+0x90>)
    d7f2:	e7f8      	b.n	d7e6 <analogWriteFrequency+0x5e>
		  case 2: qtimer = &IMXRT_TMR3; break;
    d7f4:	4809      	ldr	r0, [pc, #36]	; (d81c <analogWriteFrequency+0x94>)
    d7f6:	e7f6      	b.n	d7e6 <analogWriteFrequency+0x5e>
    d7f8:	4770      	bx	lr
    d7fa:	bf00      	nop
    d7fc:	20002c84 	.word	0x20002c84
    d800:	403e8000 	.word	0x403e8000
    d804:	403dc000 	.word	0x403dc000
    d808:	403e0000 	.word	0x403e0000
    d80c:	403e4000 	.word	0x403e4000
    d810:	401e8000 	.word	0x401e8000
    d814:	401dc000 	.word	0x401dc000
    d818:	401e0000 	.word	0x401e0000
    d81c:	401e4000 	.word	0x401e4000

0000d820 <flexpwm_init>:
{
    d820:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d822:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    d826:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    d82a:	230f      	movs	r3, #15
    d82c:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    d830:	2100      	movs	r1, #0
    d832:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d836:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d83a:	b29b      	uxth	r3, r3
    d83c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    d840:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d844:	f44f 4460 	mov.w	r4, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d848:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
    d84c:	460a      	mov	r2, r1
		p->SM[i].VAL1 = 33464;
    d84e:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d852:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    d856:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d85a:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d85c:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    d860:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d862:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d864:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d866:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d868:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    d86c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d86e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d870:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d872:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    d874:	3101      	adds	r1, #1
    d876:	2904      	cmp	r1, #4
    d878:	d1eb      	bne.n	d852 <flexpwm_init+0x32>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d87a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d87e:	b29b      	uxth	r3, r3
    d880:	f043 030f 	orr.w	r3, r3, #15
    d884:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d888:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d88c:	b29b      	uxth	r3, r3
    d88e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    d892:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d896:	bd10      	pop	{r4, pc}

0000d898 <quadtimer_init>:
{
    d898:	b570      	push	{r4, r5, r6, lr}
	for (i=0; i < 4; i++) {
    d89a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    d89c:	4611      	mov	r1, r2
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d89e:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d8a0:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d8a4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d8a8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    d8ac:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    d8b0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    d8b4:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    d8b6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d8b8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d8ba:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d8bc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d8be:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    d8c2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d8c4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    d8c8:	3201      	adds	r2, #1
    d8ca:	2a04      	cmp	r2, #4
    d8cc:	d1ee      	bne.n	d8ac <quadtimer_init+0x14>
}
    d8ce:	bd70      	pop	{r4, r5, r6, pc}

0000d8d0 <pwm_init>:
{
    d8d0:	b508      	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d8d2:	4b10      	ldr	r3, [pc, #64]	; (d914 <pwm_init+0x44>)
    d8d4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    d8d6:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    d8da:	679a      	str	r2, [r3, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d8dc:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    d8e0:	4a0d      	ldr	r2, [pc, #52]	; (d918 <pwm_init+0x48>)
    d8e2:	430a      	orrs	r2, r1
    d8e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    d8e8:	480c      	ldr	r0, [pc, #48]	; (d91c <pwm_init+0x4c>)
    d8ea:	f7ff ff99 	bl	d820 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    d8ee:	480c      	ldr	r0, [pc, #48]	; (d920 <pwm_init+0x50>)
    d8f0:	f7ff ff96 	bl	d820 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    d8f4:	480b      	ldr	r0, [pc, #44]	; (d924 <pwm_init+0x54>)
    d8f6:	f7ff ff93 	bl	d820 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    d8fa:	480b      	ldr	r0, [pc, #44]	; (d928 <pwm_init+0x58>)
    d8fc:	f7ff ff90 	bl	d820 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    d900:	480a      	ldr	r0, [pc, #40]	; (d92c <pwm_init+0x5c>)
    d902:	f7ff ffc9 	bl	d898 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    d906:	480a      	ldr	r0, [pc, #40]	; (d930 <pwm_init+0x60>)
    d908:	f7ff ffc6 	bl	d898 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    d90c:	4809      	ldr	r0, [pc, #36]	; (d934 <pwm_init+0x64>)
    d90e:	f7ff ffc3 	bl	d898 <quadtimer_init>
}
    d912:	bd08      	pop	{r3, pc}
    d914:	400fc000 	.word	0x400fc000
    d918:	fc030000 	.word	0xfc030000
    d91c:	403dc000 	.word	0x403dc000
    d920:	403e0000 	.word	0x403e0000
    d924:	403e4000 	.word	0x403e4000
    d928:	403e8000 	.word	0x403e8000
    d92c:	401dc000 	.word	0x401dc000
    d930:	401e0000 	.word	0x401e0000
    d934:	401e4000 	.word	0x401e4000

0000d938 <analogWriteRes>:
	xbar[output] = input;
#endif
}

uint32_t analogWriteRes(uint32_t bits)
{
    d938:	4603      	mov	r3, r0
	if (bits < 1) {
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
    d93a:	4a05      	ldr	r2, [pc, #20]	; (d950 <analogWriteRes+0x18>)
    d93c:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    d93e:	2b10      	cmp	r3, #16
    d940:	bf28      	it	cs
    d942:	2310      	movcs	r3, #16
    d944:	2b01      	cmp	r3, #1
    d946:	bf38      	it	cc
    d948:	2301      	movcc	r3, #1
    d94a:	7013      	strb	r3, [r2, #0]
	return prior;
}
    d94c:	4770      	bx	lr
    d94e:	bf00      	nop
    d950:	20003a19 	.word	0x20003a19

0000d954 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    d954:	4b07      	ldr	r3, [pc, #28]	; (d974 <rtc_get+0x20>)
    d956:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    d958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    d95a:	4a06      	ldr	r2, [pc, #24]	; (d974 <rtc_get+0x20>)
    d95c:	4684      	mov	ip, r0
    d95e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    d960:	4619      	mov	r1, r3
    d962:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    d964:	4299      	cmp	r1, r3
    d966:	d1f9      	bne.n	d95c <rtc_get+0x8>
    d968:	4584      	cmp	ip, r0
    d96a:	d1f7      	bne.n	d95c <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    d96c:	0bdb      	lsrs	r3, r3, #15
}
    d96e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    d972:	4770      	bx	lr
    d974:	400d4000 	.word	0x400d4000

0000d978 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    d978:	4770      	bx	lr
	...

0000d97c <unused_interrupt_vector>:
	__disable_irq();
    d97c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    d97e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    d982:	4c52      	ldr	r4, [pc, #328]	; (dacc <unused_interrupt_vector+0x150>)
    d984:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    d988:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    d98c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d990:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
    d994:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    d998:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    d99c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    d9a0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
    d9a4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    d9a8:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    d9ac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    d9b0:	6993      	ldr	r3, [r2, #24]
    d9b2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    d9b6:	69d3      	ldr	r3, [r2, #28]
    d9b8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    d9bc:	f000 f8d2 	bl	db64 <tempmonGetTemp>
    d9c0:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    d9c4:	f7ff ffc6 	bl	d954 <rtc_get>
    d9c8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    d9cc:	230b      	movs	r3, #11
    d9ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
    d9d2:	483f      	ldr	r0, [pc, #252]	; (dad0 <unused_interrupt_vector+0x154>)
	crc = 0xFFFFFFFF;
    d9d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    d9d8:	493e      	ldr	r1, [pc, #248]	; (dad4 <unused_interrupt_vector+0x158>)
	while (p < end) {
    d9da:	4d3f      	ldr	r5, [pc, #252]	; (dad8 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    d9dc:	6803      	ldr	r3, [r0, #0]
    d9de:	3004      	adds	r0, #4
    d9e0:	405a      	eors	r2, r3
    d9e2:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    d9e4:	f002 0301 	and.w	r3, r2, #1
    d9e8:	fb01 f303 	mul.w	r3, r1, r3
    d9ec:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    d9f0:	3c01      	subs	r4, #1
    d9f2:	d1f7      	bne.n	d9e4 <unused_interrupt_vector+0x68>
	while (p < end) {
    d9f4:	42a8      	cmp	r0, r5
    d9f6:	d1f1      	bne.n	d9dc <unused_interrupt_vector+0x60>
	info->crc = crc;
    d9f8:	4b34      	ldr	r3, [pc, #208]	; (dacc <unused_interrupt_vector+0x150>)
    d9fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    d9fe:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    da02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    da06:	4a32      	ldr	r2, [pc, #200]	; (dad0 <unused_interrupt_vector+0x154>)
    da08:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
    da0c:	3220      	adds	r2, #32
    da0e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    da12:	f3bf 8f4f 	dsb	sy
	asm("isb");
    da16:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    da1a:	4a30      	ldr	r2, [pc, #192]	; (dadc <unused_interrupt_vector+0x160>)
    da1c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    da1e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    da22:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    da24:	4b2e      	ldr	r3, [pc, #184]	; (dae0 <unused_interrupt_vector+0x164>)
    da26:	2102      	movs	r1, #2
    da28:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    da2a:	69d3      	ldr	r3, [r2, #28]
    da2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    da30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    da34:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    da36:	4b2b      	ldr	r3, [pc, #172]	; (dae4 <unused_interrupt_vector+0x168>)
    da38:	681a      	ldr	r2, [r3, #0]
    da3a:	4b2b      	ldr	r3, [pc, #172]	; (dae8 <unused_interrupt_vector+0x16c>)
    da3c:	429a      	cmp	r2, r3
    da3e:	d81b      	bhi.n	da78 <unused_interrupt_vector+0xfc>
	PIT_MCR = 0;
    da40:	4b27      	ldr	r3, [pc, #156]	; (dae0 <unused_interrupt_vector+0x164>)
    da42:	2200      	movs	r2, #0
    da44:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
    da46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    da4a:	4a28      	ldr	r2, [pc, #160]	; (daec <unused_interrupt_vector+0x170>)
    da4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    da50:	2201      	movs	r2, #1
    da52:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    da56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    da5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    da5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    da62:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    da66:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    da6a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    da6e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    da72:	4d1b      	ldr	r5, [pc, #108]	; (dae0 <unused_interrupt_vector+0x164>)
			PIT_TFLG0 = 1;
    da74:	2601      	movs	r6, #1
    da76:	e005      	b.n	da84 <unused_interrupt_vector+0x108>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    da78:	4618      	mov	r0, r3
    da7a:	f7ff f845 	bl	cb08 <set_arm_clock>
    da7e:	e7df      	b.n	da40 <unused_interrupt_vector+0xc4>
		usb_isr();
    da80:	f000 f9e8 	bl	de54 <usb_isr>
		if (PIT_TFLG0) {
    da84:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    da88:	2b00      	cmp	r3, #0
    da8a:	d0f9      	beq.n	da80 <unused_interrupt_vector+0x104>
			PIT_TFLG0 = 1;
    da8c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    da90:	3401      	adds	r4, #1
    da92:	2c4f      	cmp	r4, #79	; 0x4f
    da94:	d9f4      	bls.n	da80 <unused_interrupt_vector+0x104>
	USB1_USBCMD = USB_USBCMD_RST;
    da96:	4b16      	ldr	r3, [pc, #88]	; (daf0 <unused_interrupt_vector+0x174>)
    da98:	2202      	movs	r2, #2
    da9a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    da9e:	4b15      	ldr	r3, [pc, #84]	; (daf4 <unused_interrupt_vector+0x178>)
    daa0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    daa4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    daa6:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
    daaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    daae:	b93b      	cbnz	r3, dac0 <unused_interrupt_vector+0x144>
	SRC_GPR5 = 0x0BAD00F1;
    dab0:	4811      	ldr	r0, [pc, #68]	; (daf8 <unused_interrupt_vector+0x17c>)
    dab2:	4912      	ldr	r1, [pc, #72]	; (dafc <unused_interrupt_vector+0x180>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dab4:	4a0a      	ldr	r2, [pc, #40]	; (dae0 <unused_interrupt_vector+0x164>)
	SRC_GPR5 = 0x0BAD00F1;
    dab6:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dab8:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    dabc:	2b00      	cmp	r3, #0
    dabe:	d0fa      	beq.n	dab6 <unused_interrupt_vector+0x13a>
	SCB_AIRCR = 0x05FA0004;
    dac0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dac4:	4a0e      	ldr	r2, [pc, #56]	; (db00 <unused_interrupt_vector+0x184>)
    dac6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    daca:	e7fe      	b.n	daca <unused_interrupt_vector+0x14e>
    dacc:	2027ff00 	.word	0x2027ff00
    dad0:	2027ff80 	.word	0x2027ff80
    dad4:	edb88320 	.word	0xedb88320
    dad8:	2027ffa8 	.word	0x2027ffa8
    dadc:	400fc000 	.word	0x400fc000
    dae0:	40084000 	.word	0x40084000
    dae4:	20003288 	.word	0x20003288
    dae8:	0bcd3d80 	.word	0x0bcd3d80
    daec:	00249f00 	.word	0x00249f00
    daf0:	402e0000 	.word	0x402e0000
    daf4:	400d9000 	.word	0x400d9000
    daf8:	400f8000 	.word	0x400f8000
    dafc:	0bad00f1 	.word	0x0bad00f1
    db00:	05fa0004 	.word	0x05fa0004

0000db04 <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    db04:	b508      	push	{r3, lr}
    db06:	4603      	mov	r3, r0
        char *prev = __brkval;
    db08:	4a08      	ldr	r2, [pc, #32]	; (db2c <_sbrk+0x28>)
    db0a:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
    db0c:	b133      	cbz	r3, db1c <_sbrk+0x18>
    db0e:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
    db10:	4402      	add	r2, r0
    db12:	4b07      	ldr	r3, [pc, #28]	; (db30 <_sbrk+0x2c>)
    db14:	429a      	cmp	r2, r3
    db16:	d802      	bhi.n	db1e <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <_sbrk+0x28>)
    db1a:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
    db1c:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
    db1e:	f003 faf3 	bl	11108 <__errno>
    db22:	230c      	movs	r3, #12
    db24:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
    db26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    db2a:	e7f7      	b.n	db1c <_sbrk+0x18>
    db2c:	20003340 	.word	0x20003340
    db30:	20280000 	.word	0x20280000

0000db34 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    db34:	2000      	movs	r0, #0
    db36:	4770      	bx	lr

0000db38 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    db38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    db3c:	4770      	bx	lr

0000db3e <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    db3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    db42:	604b      	str	r3, [r1, #4]
	return 0;
}
    db44:	2000      	movs	r0, #0
    db46:	4770      	bx	lr

0000db48 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    db48:	2001      	movs	r0, #1
    db4a:	4770      	bx	lr

0000db4c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    db4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    db50:	4770      	bx	lr

0000db52 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    db52:	bf30      	wfi
    db54:	e7fd      	b.n	db52 <__cxa_pure_virtual>

0000db56 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    db56:	bf30      	wfi
    db58:	e7fd      	b.n	db56 <abort>

0000db5a <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
    db5a:	b508      	push	{r3, lr}
  unused_interrupt_vector();
    db5c:	f7ff ff0e 	bl	d97c <unused_interrupt_vector>
}
    db60:	bd08      	pop	{r3, pc}
	...

0000db64 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    db64:	4a13      	ldr	r2, [pc, #76]	; (dbb4 <tempmonGetTemp+0x50>)
    db66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    db6a:	f013 0f04 	tst.w	r3, #4
    db6e:	d0fa      	beq.n	db66 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    db70:	4b10      	ldr	r3, [pc, #64]	; (dbb4 <tempmonGetTemp+0x50>)
    db72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    db76:	4a10      	ldr	r2, [pc, #64]	; (dbb8 <tempmonGetTemp+0x54>)
    db78:	ed92 7a00 	vldr	s14, [r2]
    db7c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    db80:	f3c3 230b 	ubfx	r3, r3, #8, #12
    db84:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    db88:	eef8 7a67 	vcvt.f32.u32	s15, s15
    db8c:	4b0b      	ldr	r3, [pc, #44]	; (dbbc <tempmonGetTemp+0x58>)
    db8e:	edd3 6a00 	vldr	s13, [r3]
    db92:	eef8 6a66 	vcvt.f32.u32	s13, s13
    db96:	ee77 7ae6 	vsub.f32	s15, s15, s13
    db9a:	4b09      	ldr	r3, [pc, #36]	; (dbc0 <tempmonGetTemp+0x5c>)
    db9c:	edd3 6a00 	vldr	s13, [r3]
    dba0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dba4:	4b07      	ldr	r3, [pc, #28]	; (dbc4 <tempmonGetTemp+0x60>)
    dba6:	edd3 6a00 	vldr	s13, [r3]
    dbaa:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    dbae:	ee37 0a40 	vsub.f32	s0, s14, s0
    dbb2:	4770      	bx	lr
    dbb4:	400d8100 	.word	0x400d8100
    dbb8:	20005120 	.word	0x20005120
    dbbc:	2000511c 	.word	0x2000511c
    dbc0:	20005124 	.word	0x20005124
    dbc4:	20005128 	.word	0x20005128

0000dbc8 <endpoint0_transmit>:
	if (len > 0) {
    dbc8:	468c      	mov	ip, r1
    dbca:	b319      	cbz	r1, dc14 <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
    dbcc:	4b23      	ldr	r3, [pc, #140]	; (dc5c <endpoint0_transmit+0x94>)
    dbce:	2101      	movs	r1, #1
    dbd0:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dbd2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    dbd6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    dbda:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dbdc:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dbde:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    dbe2:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dbe4:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    dbe8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dbea:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    dbee:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dbf0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    dbf4:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    dbf6:	491a      	ldr	r1, [pc, #104]	; (dc60 <endpoint0_transmit+0x98>)
    dbf8:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
    dbfa:	2300      	movs	r3, #0
    dbfc:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    dbfe:	4919      	ldr	r1, [pc, #100]	; (dc64 <endpoint0_transmit+0x9c>)
    dc00:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dc04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    dc08:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    dc0c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dc10:	2b00      	cmp	r3, #0
    dc12:	d1fb      	bne.n	dc0c <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
    dc14:	4b14      	ldr	r3, [pc, #80]	; (dc68 <endpoint0_transmit+0xa0>)
    dc16:	2101      	movs	r1, #1
    dc18:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dc1a:	2a00      	cmp	r2, #0
    dc1c:	f248 0180 	movw	r1, #32896	; 0x8080
    dc20:	bf08      	it	eq
    dc22:	2180      	moveq	r1, #128	; 0x80
    dc24:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    dc26:	2000      	movs	r0, #0
    dc28:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    dc2a:	490d      	ldr	r1, [pc, #52]	; (dc60 <endpoint0_transmit+0x98>)
    dc2c:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
    dc2e:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dc30:	4b0c      	ldr	r3, [pc, #48]	; (dc64 <endpoint0_transmit+0x9c>)
    dc32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    dc36:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    dc3a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    dc3e:	f041 0101 	orr.w	r1, r1, #1
    dc42:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    dc46:	1a12      	subs	r2, r2, r0
    dc48:	bf18      	it	ne
    dc4a:	2201      	movne	r2, #1
    dc4c:	4b07      	ldr	r3, [pc, #28]	; (dc6c <endpoint0_transmit+0xa4>)
    dc4e:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    dc50:	4a04      	ldr	r2, [pc, #16]	; (dc64 <endpoint0_transmit+0x9c>)
    dc52:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    dc56:	2b00      	cmp	r3, #0
    dc58:	d1fb      	bne.n	dc52 <endpoint0_transmit+0x8a>
}
    dc5a:	4770      	bx	lr
    dc5c:	20003ee0 	.word	0x20003ee0
    dc60:	20000000 	.word	0x20000000
    dc64:	402e0000 	.word	0x402e0000
    dc68:	20003ec0 	.word	0x20003ec0
    dc6c:	20004fe4 	.word	0x20004fe4

0000dc70 <endpoint0_receive>:
	if (len > 0) {
    dc70:	468c      	mov	ip, r1
    dc72:	b319      	cbz	r1, dcbc <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
    dc74:	4b24      	ldr	r3, [pc, #144]	; (dd08 <endpoint0_receive+0x98>)
    dc76:	2101      	movs	r1, #1
    dc78:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dc7a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    dc7e:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    dc82:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dc84:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dc86:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    dc8a:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dc8c:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    dc90:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dc92:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    dc96:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dc98:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    dc9c:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    dc9e:	491b      	ldr	r1, [pc, #108]	; (dd0c <endpoint0_receive+0x9c>)
    dca0:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
    dca2:	2300      	movs	r3, #0
    dca4:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
    dca6:	491a      	ldr	r1, [pc, #104]	; (dd10 <endpoint0_receive+0xa0>)
    dca8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dcac:	f043 0301 	orr.w	r3, r3, #1
    dcb0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    dcb4:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d1fb      	bne.n	dcb4 <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
    dcbc:	4b15      	ldr	r3, [pc, #84]	; (dd14 <endpoint0_receive+0xa4>)
    dcbe:	2101      	movs	r1, #1
    dcc0:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dcc2:	2a00      	cmp	r2, #0
    dcc4:	f248 0180 	movw	r1, #32896	; 0x8080
    dcc8:	bf08      	it	eq
    dcca:	2180      	moveq	r1, #128	; 0x80
    dccc:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    dcce:	2000      	movs	r0, #0
    dcd0:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    dcd2:	490e      	ldr	r1, [pc, #56]	; (dd0c <endpoint0_receive+0x9c>)
    dcd4:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
    dcd6:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dcd8:	4b0d      	ldr	r3, [pc, #52]	; (dd10 <endpoint0_receive+0xa0>)
    dcda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    dcde:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    dce2:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    dce6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    dcea:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    dcee:	1a12      	subs	r2, r2, r0
    dcf0:	bf18      	it	ne
    dcf2:	2201      	movne	r2, #1
    dcf4:	0412      	lsls	r2, r2, #16
    dcf6:	4b08      	ldr	r3, [pc, #32]	; (dd18 <endpoint0_receive+0xa8>)
    dcf8:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    dcfa:	4a05      	ldr	r2, [pc, #20]	; (dd10 <endpoint0_receive+0xa0>)
    dcfc:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    dd00:	2b00      	cmp	r3, #0
    dd02:	d1fb      	bne.n	dcfc <endpoint0_receive+0x8c>
}
    dd04:	4770      	bx	lr
    dd06:	bf00      	nop
    dd08:	20003ee0 	.word	0x20003ee0
    dd0c:	20000000 	.word	0x20000000
    dd10:	402e0000 	.word	0x402e0000
    dd14:	20003ec0 	.word	0x20003ec0
    dd18:	20004fe4 	.word	0x20004fe4

0000dd1c <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    dd1c:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    dd1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dd20:	b11b      	cbz	r3, dd2a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    dd22:	6853      	ldr	r3, [r2, #4]
    dd24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dd28:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    dd2a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    dd2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
    dd2e:	b33b      	cbz	r3, dd80 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
    dd30:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    dd32:	4b1a      	ldr	r3, [pc, #104]	; (dd9c <schedule_transfer+0x80>)
    dd34:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    dd38:	420b      	tst	r3, r1
    dd3a:	d12b      	bne.n	dd94 <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    dd3c:	4b18      	ldr	r3, [pc, #96]	; (dda0 <schedule_transfer+0x84>)
    dd3e:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    dd40:	4b16      	ldr	r3, [pc, #88]	; (dd9c <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    dd42:	4e17      	ldr	r6, [pc, #92]	; (dda0 <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    dd44:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    dd48:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    dd4c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    dd50:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    dd54:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    dd58:	f414 4f80 	tst.w	r4, #16384	; 0x4000
    dd5c:	d104      	bne.n	dd68 <schedule_transfer+0x4c>
    dd5e:	6874      	ldr	r4, [r6, #4]
    dd60:	1be4      	subs	r4, r4, r7
    dd62:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    dd66:	d3ed      	bcc.n	dd44 <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    dd68:	4229      	tst	r1, r5
    dd6a:	d113      	bne.n	dd94 <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    dd6c:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    dd6e:	2300      	movs	r3, #0
    dd70:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    dd72:	4c0a      	ldr	r4, [pc, #40]	; (dd9c <schedule_transfer+0x80>)
    dd74:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    dd78:	430b      	orrs	r3, r1
    dd7a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
    dd7e:	e009      	b.n	dd94 <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    dd80:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    dd82:	2300      	movs	r3, #0
    dd84:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    dd86:	4c05      	ldr	r4, [pc, #20]	; (dd9c <schedule_transfer+0x80>)
    dd88:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    dd8c:	430b      	orrs	r3, r1
    dd8e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    dd92:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    dd94:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    dd96:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    dd98:	bcf0      	pop	{r4, r5, r6, r7}
    dd9a:	4770      	bx	lr
    dd9c:	402e0000 	.word	0x402e0000
    dda0:	e0001000 	.word	0xe0001000

0000dda4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    dda4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    dda6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    dda8:	b1b5      	cbz	r5, ddd8 <run_callbacks+0x34>
    ddaa:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    ddac:	462b      	mov	r3, r5
	uint32_t count = 0;
    ddae:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
    ddb0:	685a      	ldr	r2, [r3, #4]
    ddb2:	f012 0f80 	tst.w	r2, #128	; 0x80
    ddb6:	d107      	bne.n	ddc8 <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    ddb8:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
    ddba:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
    ddbc:	2b01      	cmp	r3, #1
    ddbe:	d1f7      	bne.n	ddb0 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    ddc0:	2300      	movs	r3, #0
    ddc2:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    ddc4:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    ddc6:	e000      	b.n	ddca <run_callbacks+0x26>
			ep->first_transfer = t;
    ddc8:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
    ddca:	b12c      	cbz	r4, ddd8 <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
    ddcc:	4628      	mov	r0, r5
    ddce:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    ddd0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    ddd2:	4798      	blx	r3
	while (count) {
    ddd4:	3c01      	subs	r4, #1
    ddd6:	d1f9      	bne.n	ddcc <run_callbacks+0x28>
		first = next;
		count--;
	}
}
    ddd8:	bd70      	pop	{r4, r5, r6, pc}

0000ddda <usb_endpoint_config>:
{
    ddda:	b570      	push	{r4, r5, r6, lr}
    dddc:	4604      	mov	r4, r0
    ddde:	460e      	mov	r6, r1
    dde0:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    dde2:	223c      	movs	r2, #60	; 0x3c
    dde4:	2100      	movs	r1, #0
    dde6:	3004      	adds	r0, #4
    dde8:	f003 fd20 	bl	1182c <memset>
	qh->config = config;
    ddec:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    ddee:	2301      	movs	r3, #1
    ddf0:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
    ddf2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    ddf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ddf8 <usb_start_sof_interrupts>:
	__disable_irq();
    ddf8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    ddfa:	4a0a      	ldr	r2, [pc, #40]	; (de24 <usb_start_sof_interrupts+0x2c>)
    ddfc:	2301      	movs	r3, #1
    ddfe:	4083      	lsls	r3, r0
    de00:	7810      	ldrb	r0, [r2, #0]
    de02:	4318      	orrs	r0, r3
    de04:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    de06:	4b08      	ldr	r3, [pc, #32]	; (de28 <usb_start_sof_interrupts+0x30>)
    de08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    de0c:	f013 0f80 	tst.w	r3, #128	; 0x80
    de10:	d106      	bne.n	de20 <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    de12:	4a05      	ldr	r2, [pc, #20]	; (de28 <usb_start_sof_interrupts+0x30>)
    de14:	2180      	movs	r1, #128	; 0x80
    de16:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    de1a:	430b      	orrs	r3, r1
    de1c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    de20:	b662      	cpsie	i
}
    de22:	4770      	bx	lr
    de24:	20005307 	.word	0x20005307
    de28:	402e0000 	.word	0x402e0000

0000de2c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    de2c:	2301      	movs	r3, #1
    de2e:	4083      	lsls	r3, r0
    de30:	4a06      	ldr	r2, [pc, #24]	; (de4c <usb_stop_sof_interrupts+0x20>)
    de32:	7810      	ldrb	r0, [r2, #0]
    de34:	ea20 0003 	bic.w	r0, r0, r3
    de38:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    de3a:	b930      	cbnz	r0, de4a <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    de3c:	4a04      	ldr	r2, [pc, #16]	; (de50 <usb_stop_sof_interrupts+0x24>)
    de3e:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    de42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    de46:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    de4a:	4770      	bx	lr
    de4c:	20005307 	.word	0x20005307
    de50:	402e0000 	.word	0x402e0000

0000de54 <usb_isr>:
{
    de54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    de58:	4bb5      	ldr	r3, [pc, #724]	; (e130 <usb_isr+0x2dc>)
    de5a:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
    de5e:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    de62:	f017 0f01 	tst.w	r7, #1
    de66:	f000 81c9 	beq.w	e1fc <usb_isr+0x3a8>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    de6a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
    de6e:	2b00      	cmp	r3, #0
    de70:	f000 8192 	beq.w	e198 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    de74:	4cae      	ldr	r4, [pc, #696]	; (e130 <usb_isr+0x2dc>)
				s.word1 = endpoint_queue_head[0].setup0;
    de76:	4eaf      	ldr	r6, [pc, #700]	; (e134 <usb_isr+0x2e0>)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    de78:	f106 0b80 	add.w	fp, r6, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    de7c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; e16c <usb_isr+0x318>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    de80:	f8df 92ec 	ldr.w	r9, [pc, #748]	; e170 <usb_isr+0x31c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    de84:	f8df 82ec 	ldr.w	r8, [pc, #748]	; e174 <usb_isr+0x320>
    de88:	e01b      	b.n	dec2 <usb_isr+0x6e>
	switch (setup.wRequestAndType) {
    de8a:	2b80      	cmp	r3, #128	; 0x80
    de8c:	d110      	bne.n	deb0 <usb_isr+0x5c>
		reply_buffer[0] = 0;
    de8e:	48aa      	ldr	r0, [pc, #680]	; (e138 <usb_isr+0x2e4>)
    de90:	2200      	movs	r2, #0
    de92:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
    de94:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    de96:	2102      	movs	r1, #2
    de98:	f7ff fe96 	bl	dbc8 <endpoint0_transmit>
		return;
    de9c:	e00c      	b.n	deb8 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    de9e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    dea2:	f000 8089 	beq.w	dfb8 <usb_isr+0x164>
    dea6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    deaa:	b29b      	uxth	r3, r3
    deac:	2b01      	cmp	r3, #1
    deae:	d967      	bls.n	df80 <usb_isr+0x12c>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    deb0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    deb4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    deb8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    debc:	2b00      	cmp	r3, #0
    debe:	f000 816b 	beq.w	e198 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    dec2:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    dec6:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    dec8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
    deca:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    dece:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ded2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    ded6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    deda:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    dede:	d0f4      	beq.n	deca <usb_isr+0x76>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    dee0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    dee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    dee8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    deec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    def0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    def4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    def8:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    defc:	d1fa      	bne.n	def4 <usb_isr+0xa0>
			endpoint0_notify_mask = 0;
    defe:	4b8f      	ldr	r3, [pc, #572]	; (e13c <usb_isr+0x2e8>)
    df00:	2100      	movs	r1, #0
    df02:	6019      	str	r1, [r3, #0]
	setup.bothwords = setupdata;
    df04:	4610      	mov	r0, r2
	switch (setup.wRequestAndType) {
    df06:	b2ab      	uxth	r3, r5
    df08:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    df0c:	d07e      	beq.n	e00c <usb_isr+0x1b8>
    df0e:	d820      	bhi.n	df52 <usb_isr+0xfe>
    df10:	f240 3102 	movw	r1, #770	; 0x302
    df14:	428b      	cmp	r3, r1
    df16:	f000 80a1 	beq.w	e05c <usb_isr+0x208>
    df1a:	d8c0      	bhi.n	de9e <usb_isr+0x4a>
    df1c:	2b82      	cmp	r3, #130	; 0x82
    df1e:	d07e      	beq.n	e01e <usb_isr+0x1ca>
    df20:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    df24:	d1b1      	bne.n	de8a <usb_isr+0x36>
		endpoint = setup.wIndex & 0x7F;
    df26:	b293      	uxth	r3, r2
    df28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    df2c:	2a07      	cmp	r2, #7
    df2e:	d8bf      	bhi.n	deb0 <usb_isr+0x5c>
		if (dir) {
    df30:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    df34:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    df38:	bf14      	ite	ne
    df3a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    df3e:	f023 0301 	biceq.w	r3, r3, #1
    df42:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    df46:	2200      	movs	r2, #0
    df48:	4611      	mov	r1, r2
    df4a:	4610      	mov	r0, r2
    df4c:	f7ff fe90 	bl	dc70 <endpoint0_receive>
		return;
    df50:	e7b2      	b.n	deb8 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    df52:	f242 2121 	movw	r1, #8737	; 0x2221
    df56:	428b      	cmp	r3, r1
    df58:	f000 810e 	beq.w	e178 <usb_isr+0x324>
    df5c:	d919      	bls.n	df92 <usb_isr+0x13e>
    df5e:	f242 3121 	movw	r1, #8993	; 0x2321
    df62:	428b      	cmp	r3, r1
    df64:	f000 8112 	beq.w	e18c <usb_isr+0x338>
    df68:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    df6c:	428b      	cmp	r3, r1
    df6e:	d19f      	bne.n	deb0 <usb_isr+0x5c>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    df70:	b293      	uxth	r3, r2
    df72:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    df76:	d19b      	bne.n	deb0 <usb_isr+0x5c>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    df78:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    df7c:	f363 000f 	bfi	r0, r3, #0, #16
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    df80:	4b6f      	ldr	r3, [pc, #444]	; (e140 <usb_isr+0x2ec>)
    df82:	6859      	ldr	r1, [r3, #4]
    df84:	2900      	cmp	r1, #0
    df86:	d093      	beq.n	deb0 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    df88:	fa1f fe80 	uxth.w	lr, r0
    df8c:	f3c5 450f 	ubfx	r5, r5, #16, #16
    df90:	e0a7      	b.n	e0e2 <usb_isr+0x28e>
	switch (setup.wRequestAndType) {
    df92:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    df96:	d01b      	beq.n	dfd0 <usb_isr+0x17c>
    df98:	f242 0121 	movw	r1, #8225	; 0x2021
    df9c:	428b      	cmp	r3, r1
    df9e:	d187      	bne.n	deb0 <usb_isr+0x5c>
		if (setup.wLength != 7) break;
    dfa0:	0c13      	lsrs	r3, r2, #16
    dfa2:	2b07      	cmp	r3, #7
    dfa4:	d184      	bne.n	deb0 <usb_isr+0x5c>
		endpoint0_setupdata.bothwords = setupdata;
    dfa6:	4b67      	ldr	r3, [pc, #412]	; (e144 <usb_isr+0x2f0>)
    dfa8:	601d      	str	r5, [r3, #0]
    dfaa:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    dfac:	2201      	movs	r2, #1
    dfae:	2107      	movs	r1, #7
    dfb0:	4865      	ldr	r0, [pc, #404]	; (e148 <usb_isr+0x2f4>)
    dfb2:	f7ff fe5d 	bl	dc70 <endpoint0_receive>
		return;
    dfb6:	e77f      	b.n	deb8 <usb_isr+0x64>
		endpoint0_receive(NULL, 0, 0);
    dfb8:	2200      	movs	r2, #0
    dfba:	4611      	mov	r1, r2
    dfbc:	4610      	mov	r0, r2
    dfbe:	f7ff fe57 	bl	dc70 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    dfc2:	0c2b      	lsrs	r3, r5, #16
    dfc4:	065b      	lsls	r3, r3, #25
    dfc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    dfca:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    dfce:	e773      	b.n	deb8 <usb_isr+0x64>
		usb_configuration = setup.wValue;
    dfd0:	f3c5 4507 	ubfx	r5, r5, #16, #8
    dfd4:	4b5d      	ldr	r3, [pc, #372]	; (e14c <usb_isr+0x2f8>)
    dfd6:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    dfd8:	4b5d      	ldr	r3, [pc, #372]	; (e150 <usb_isr+0x2fc>)
    dfda:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    dfde:	4b5d      	ldr	r3, [pc, #372]	; (e154 <usb_isr+0x300>)
    dfe0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    dfe4:	4b5c      	ldr	r3, [pc, #368]	; (e158 <usb_isr+0x304>)
    dfe6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    dfea:	f000 fb45 	bl	e678 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    dfee:	2280      	movs	r2, #128	; 0x80
    dff0:	2100      	movs	r1, #0
    dff2:	4658      	mov	r0, fp
    dff4:	f003 fc1a 	bl	1182c <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    dff8:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    dffc:	f8c6 90e0 	str.w	r9, [r6, #224]	; 0xe0
		endpoint0_receive(NULL, 0, 0);
    e000:	2200      	movs	r2, #0
    e002:	4611      	mov	r1, r2
    e004:	4610      	mov	r0, r2
    e006:	f7ff fe33 	bl	dc70 <endpoint0_receive>
		return;
    e00a:	e755      	b.n	deb8 <usb_isr+0x64>
		reply_buffer[0] = usb_configuration;
    e00c:	4b4f      	ldr	r3, [pc, #316]	; (e14c <usb_isr+0x2f8>)
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	4849      	ldr	r0, [pc, #292]	; (e138 <usb_isr+0x2e4>)
    e012:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e014:	2200      	movs	r2, #0
    e016:	2101      	movs	r1, #1
    e018:	f7ff fdd6 	bl	dbc8 <endpoint0_transmit>
		return;
    e01c:	e74c      	b.n	deb8 <usb_isr+0x64>
		endpoint = setup.wIndex & 0x7F;
    e01e:	b293      	uxth	r3, r2
    e020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e024:	2a07      	cmp	r2, #7
    e026:	f63f af43 	bhi.w	deb0 <usb_isr+0x5c>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e02a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    e02e:	4a42      	ldr	r2, [pc, #264]	; (e138 <usb_isr+0x2e4>)
    e030:	2100      	movs	r1, #0
    e032:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    e034:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e036:	f013 0f80 	tst.w	r3, #128	; 0x80
    e03a:	d00b      	beq.n	e054 <usb_isr+0x200>
    e03c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e040:	d002      	beq.n	e048 <usb_isr+0x1f4>
			reply_buffer[0] = 1;
    e042:	4b3d      	ldr	r3, [pc, #244]	; (e138 <usb_isr+0x2e4>)
    e044:	2201      	movs	r2, #1
    e046:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e048:	2200      	movs	r2, #0
    e04a:	2102      	movs	r1, #2
    e04c:	483a      	ldr	r0, [pc, #232]	; (e138 <usb_isr+0x2e4>)
    e04e:	f7ff fdbb 	bl	dbc8 <endpoint0_transmit>
		return;
    e052:	e731      	b.n	deb8 <usb_isr+0x64>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e054:	f010 0f01 	tst.w	r0, #1
    e058:	d0f6      	beq.n	e048 <usb_isr+0x1f4>
    e05a:	e7f2      	b.n	e042 <usb_isr+0x1ee>
		endpoint = setup.wIndex & 0x7F;
    e05c:	b293      	uxth	r3, r2
    e05e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e062:	2a07      	cmp	r2, #7
    e064:	f63f af24 	bhi.w	deb0 <usb_isr+0x5c>
		if (dir) {
    e068:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e06c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e070:	bf14      	ite	ne
    e072:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e076:	f043 0301 	orreq.w	r3, r3, #1
    e07a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e07e:	2200      	movs	r2, #0
    e080:	4611      	mov	r1, r2
    e082:	4610      	mov	r0, r2
    e084:	f7ff fdf4 	bl	dc70 <endpoint0_receive>
		return;
    e088:	e716      	b.n	deb8 <usb_isr+0x64>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e08a:	4b34      	ldr	r3, [pc, #208]	; (e15c <usb_isr+0x308>)
    e08c:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e08e:	462a      	mov	r2, r5
    e090:	4933      	ldr	r1, [pc, #204]	; (e160 <usb_isr+0x30c>)
    e092:	4b34      	ldr	r3, [pc, #208]	; (e164 <usb_isr+0x310>)
    e094:	2800      	cmp	r0, #0
    e096:	bf18      	it	ne
    e098:	4619      	movne	r1, r3
    e09a:	4833      	ldr	r0, [pc, #204]	; (e168 <usb_isr+0x314>)
    e09c:	f7fe ff40 	bl	cf20 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e0a0:	4a31      	ldr	r2, [pc, #196]	; (e168 <usb_isr+0x314>)
    e0a2:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e0a6:	442a      	add	r2, r5
	asm("dsb");
    e0a8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e0ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e0b0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e0b4:	3320      	adds	r3, #32
	} while (location < end_addr);
    e0b6:	429a      	cmp	r2, r3
    e0b8:	d8fa      	bhi.n	e0b0 <usb_isr+0x25c>
	asm("dsb");
    e0ba:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e0be:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e0c2:	2200      	movs	r2, #0
    e0c4:	4629      	mov	r1, r5
    e0c6:	4828      	ldr	r0, [pc, #160]	; (e168 <usb_isr+0x314>)
    e0c8:	f7ff fd7e 	bl	dbc8 <endpoint0_transmit>
				return;
    e0cc:	e6f4      	b.n	deb8 <usb_isr+0x64>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e0ce:	462a      	mov	r2, r5
    e0d0:	4825      	ldr	r0, [pc, #148]	; (e168 <usb_isr+0x314>)
    e0d2:	f7fe ff25 	bl	cf20 <memcpy>
    e0d6:	e7e3      	b.n	e0a0 <usb_isr+0x24c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e0d8:	330c      	adds	r3, #12
    e0da:	6859      	ldr	r1, [r3, #4]
    e0dc:	2900      	cmp	r1, #0
    e0de:	f43f aee7 	beq.w	deb0 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e0e2:	4628      	mov	r0, r5
    e0e4:	f8b3 c000 	ldrh.w	ip, [r3]
    e0e8:	45ac      	cmp	ip, r5
    e0ea:	d1f5      	bne.n	e0d8 <usb_isr+0x284>
    e0ec:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    e0f0:	45f4      	cmp	ip, lr
    e0f2:	d1f1      	bne.n	e0d8 <usb_isr+0x284>
				if ((setup.wValue >> 8) == 3) {
    e0f4:	0a2d      	lsrs	r5, r5, #8
    e0f6:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
    e0f8:	bf0c      	ite	eq
    e0fa:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
    e0fc:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e0fe:	0c15      	lsrs	r5, r2, #16
    e100:	429d      	cmp	r5, r3
    e102:	bf28      	it	cs
    e104:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
    e106:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e10a:	d0be      	beq.n	e08a <usb_isr+0x236>
				} else if (setup.wValue == 0x700) {
    e10c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    e110:	d1dd      	bne.n	e0ce <usb_isr+0x27a>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e112:	4b12      	ldr	r3, [pc, #72]	; (e15c <usb_isr+0x308>)
    e114:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e116:	462a      	mov	r2, r5
    e118:	4912      	ldr	r1, [pc, #72]	; (e164 <usb_isr+0x310>)
    e11a:	4b11      	ldr	r3, [pc, #68]	; (e160 <usb_isr+0x30c>)
    e11c:	2800      	cmp	r0, #0
    e11e:	bf18      	it	ne
    e120:	4619      	movne	r1, r3
    e122:	4811      	ldr	r0, [pc, #68]	; (e168 <usb_isr+0x314>)
    e124:	f7fe fefc 	bl	cf20 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e128:	2307      	movs	r3, #7
    e12a:	4a0f      	ldr	r2, [pc, #60]	; (e168 <usb_isr+0x314>)
    e12c:	7053      	strb	r3, [r2, #1]
    e12e:	e7b7      	b.n	e0a0 <usb_isr+0x24c>
    e130:	402e0000 	.word	0x402e0000
    e134:	20000000 	.word	0x20000000
    e138:	2000509c 	.word	0x2000509c
    e13c:	20004fe4 	.word	0x20004fe4
    e140:	200030ac 	.word	0x200030ac
    e144:	20004080 	.word	0x20004080
    e148:	20004fdc 	.word	0x20004fdc
    e14c:	2000530c 	.word	0x2000530c
    e150:	00cc0002 	.word	0x00cc0002
    e154:	000200c8 	.word	0x000200c8
    e158:	00c80002 	.word	0x00c80002
    e15c:	2000530d 	.word	0x2000530d
    e160:	600020d4 	.word	0x600020d4
    e164:	60002138 	.word	0x60002138
    e168:	20200000 	.word	0x20200000
    e16c:	b8c6cf5d 	.word	0xb8c6cf5d
    e170:	74d59319 	.word	0x74d59319
    e174:	402e01c0 	.word	0x402e01c0
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e178:	b292      	uxth	r2, r2
    e17a:	b93a      	cbnz	r2, e18c <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e17c:	4b57      	ldr	r3, [pc, #348]	; (e2dc <usb_isr+0x488>)
    e17e:	681a      	ldr	r2, [r3, #0]
    e180:	4b57      	ldr	r3, [pc, #348]	; (e2e0 <usb_isr+0x48c>)
    e182:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e184:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e188:	4b56      	ldr	r3, [pc, #344]	; (e2e4 <usb_isr+0x490>)
    e18a:	701d      	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    e18c:	2200      	movs	r2, #0
    e18e:	4611      	mov	r1, r2
    e190:	4610      	mov	r0, r2
    e192:	f7ff fd6d 	bl	dc70 <endpoint0_receive>
		return;
    e196:	e68f      	b.n	deb8 <usb_isr+0x64>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e198:	4b53      	ldr	r3, [pc, #332]	; (e2e8 <usb_isr+0x494>)
    e19a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    e19e:	b36c      	cbz	r4, e1fc <usb_isr+0x3a8>
			USB1_ENDPTCOMPLETE = completestatus;
    e1a0:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e1a4:	4b51      	ldr	r3, [pc, #324]	; (e2ec <usb_isr+0x498>)
    e1a6:	681b      	ldr	r3, [r3, #0]
    e1a8:	421c      	tst	r4, r3
    e1aa:	d172      	bne.n	e292 <usb_isr+0x43e>
			completestatus &= endpointN_notify_mask;
    e1ac:	4b50      	ldr	r3, [pc, #320]	; (e2f0 <usb_isr+0x49c>)
    e1ae:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    e1b0:	401c      	ands	r4, r3
    e1b2:	d023      	beq.n	e1fc <usb_isr+0x3a8>
				while (tx) {
    e1b4:	0c26      	lsrs	r6, r4, #16
    e1b6:	d010      	beq.n	e1da <usb_isr+0x386>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e1b8:	f8df 9154 	ldr.w	r9, [pc, #340]	; e310 <usb_isr+0x4bc>
					tx &= ~(1<<p);
    e1bc:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
    e1c0:	fa96 f5a6 	rbit	r5, r6
    e1c4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e1c8:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
    e1cc:	3040      	adds	r0, #64	; 0x40
    e1ce:	f7ff fde9 	bl	dda4 <run_callbacks>
					tx &= ~(1<<p);
    e1d2:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
    e1d6:	43ae      	bics	r6, r5
    e1d8:	d1f2      	bne.n	e1c0 <usb_isr+0x36c>
				uint32_t rx = completestatus & 0xffff;
    e1da:	b2a4      	uxth	r4, r4
				while(rx) {
    e1dc:	b174      	cbz	r4, e1fc <usb_isr+0x3a8>
					run_callbacks(endpoint_queue_head + p * 2);
    e1de:	f8df 8130 	ldr.w	r8, [pc, #304]	; e310 <usb_isr+0x4bc>
					rx &= ~(1<<p);
    e1e2:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
    e1e4:	fa94 f5a4 	rbit	r5, r4
    e1e8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    e1ec:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
    e1f0:	f7ff fdd8 	bl	dda4 <run_callbacks>
					rx &= ~(1<<p);
    e1f4:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
    e1f8:	43ac      	bics	r4, r5
    e1fa:	d1f3      	bne.n	e1e4 <usb_isr+0x390>
	if (status & USB_USBSTS_URI) { // page 3164
    e1fc:	f017 0f40 	tst.w	r7, #64	; 0x40
    e200:	d019      	beq.n	e236 <usb_isr+0x3e2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e202:	4b39      	ldr	r3, [pc, #228]	; (e2e8 <usb_isr+0x494>)
    e204:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e208:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e20c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e210:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e214:	461a      	mov	r2, r3
    e216:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e21a:	2b00      	cmp	r3, #0
    e21c:	d1fb      	bne.n	e216 <usb_isr+0x3c2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e21e:	4b32      	ldr	r3, [pc, #200]	; (e2e8 <usb_isr+0x494>)
    e220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e224:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e228:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e22c:	f000 fa22 	bl	e674 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e230:	4b2f      	ldr	r3, [pc, #188]	; (e2f0 <usb_isr+0x49c>)
    e232:	2200      	movs	r2, #0
    e234:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e236:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
    e23a:	d003      	beq.n	e244 <usb_isr+0x3f0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e23c:	4b2d      	ldr	r3, [pc, #180]	; (e2f4 <usb_isr+0x4a0>)
    e23e:	681b      	ldr	r3, [r3, #0]
    e240:	b103      	cbz	r3, e244 <usb_isr+0x3f0>
    e242:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e244:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
    e248:	d003      	beq.n	e252 <usb_isr+0x3fe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e24a:	4b2b      	ldr	r3, [pc, #172]	; (e2f8 <usb_isr+0x4a4>)
    e24c:	681b      	ldr	r3, [r3, #0]
    e24e:	b103      	cbz	r3, e252 <usb_isr+0x3fe>
    e250:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e252:	f017 0f04 	tst.w	r7, #4
    e256:	d009      	beq.n	e26c <usb_isr+0x418>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e258:	4b23      	ldr	r3, [pc, #140]	; (e2e8 <usb_isr+0x494>)
    e25a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e25e:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
    e262:	4b26      	ldr	r3, [pc, #152]	; (e2fc <usb_isr+0x4a8>)
    e264:	bf14      	ite	ne
    e266:	2201      	movne	r2, #1
			usb_high_speed = 0;
    e268:	2200      	moveq	r2, #0
    e26a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e26c:	4b1e      	ldr	r3, [pc, #120]	; (e2e8 <usb_isr+0x494>)
    e26e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e272:	f013 0f80 	tst.w	r3, #128	; 0x80
    e276:	d00a      	beq.n	e28e <usb_isr+0x43a>
    e278:	f017 0f80 	tst.w	r7, #128	; 0x80
    e27c:	d007      	beq.n	e28e <usb_isr+0x43a>
		if (usb_reboot_timer) {
    e27e:	4b20      	ldr	r3, [pc, #128]	; (e300 <usb_isr+0x4ac>)
    e280:	781b      	ldrb	r3, [r3, #0]
    e282:	b123      	cbz	r3, e28e <usb_isr+0x43a>
			if (--usb_reboot_timer == 0) {
    e284:	3b01      	subs	r3, #1
    e286:	b2db      	uxtb	r3, r3
    e288:	4a1d      	ldr	r2, [pc, #116]	; (e300 <usb_isr+0x4ac>)
    e28a:	7013      	strb	r3, [r2, #0]
    e28c:	b30b      	cbz	r3, e2d2 <usb_isr+0x47e>
}
    e28e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				endpoint0_notify_mask = 0;
    e292:	4b16      	ldr	r3, [pc, #88]	; (e2ec <usb_isr+0x498>)
    e294:	2200      	movs	r2, #0
    e296:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    e298:	4b1a      	ldr	r3, [pc, #104]	; (e304 <usb_isr+0x4b0>)
    e29a:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e29c:	8819      	ldrh	r1, [r3, #0]
    e29e:	f242 0321 	movw	r3, #8225	; 0x2021
    e2a2:	4299      	cmp	r1, r3
    e2a4:	d182      	bne.n	e1ac <usb_isr+0x358>
    e2a6:	b292      	uxth	r2, r2
    e2a8:	2a00      	cmp	r2, #0
    e2aa:	f47f af7f 	bne.w	e1ac <usb_isr+0x358>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e2ae:	4b16      	ldr	r3, [pc, #88]	; (e308 <usb_isr+0x4b4>)
    e2b0:	4a16      	ldr	r2, [pc, #88]	; (e30c <usb_isr+0x4b8>)
    e2b2:	e892 0003 	ldmia.w	r2, {r0, r1}
    e2b6:	6018      	str	r0, [r3, #0]
    e2b8:	8099      	strh	r1, [r3, #4]
    e2ba:	0c09      	lsrs	r1, r1, #16
    e2bc:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e2be:	2886      	cmp	r0, #134	; 0x86
    e2c0:	f47f af74 	bne.w	e1ac <usb_isr+0x358>
			usb_start_sof_interrupts(NUM_INTERFACE);
    e2c4:	2003      	movs	r0, #3
    e2c6:	f7ff fd97 	bl	ddf8 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e2ca:	4b0d      	ldr	r3, [pc, #52]	; (e300 <usb_isr+0x4ac>)
    e2cc:	2250      	movs	r2, #80	; 0x50
    e2ce:	701a      	strb	r2, [r3, #0]
    e2d0:	e76c      	b.n	e1ac <usb_isr+0x358>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e2d2:	2003      	movs	r0, #3
    e2d4:	f7ff fdaa 	bl	de2c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e2d8:	f007 faba 	bl	15850 <___reboot_Teensyduino__veneer>
    e2dc:	200052bc 	.word	0x200052bc
    e2e0:	200052d0 	.word	0x200052d0
    e2e4:	2000530b 	.word	0x2000530b
    e2e8:	402e0000 	.word	0x402e0000
    e2ec:	20004fe4 	.word	0x20004fe4
    e2f0:	20004fe8 	.word	0x20004fe8
    e2f4:	200052d4 	.word	0x200052d4
    e2f8:	200052d8 	.word	0x200052d8
    e2fc:	2000530d 	.word	0x2000530d
    e300:	2000530e 	.word	0x2000530e
    e304:	20004080 	.word	0x20004080
    e308:	200052c8 	.word	0x200052c8
    e30c:	20004fdc 	.word	0x20004fdc
    e310:	20000000 	.word	0x20000000

0000e314 <usb_config_rx>:
{
    e314:	b538      	push	{r3, r4, r5, lr}
    e316:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e318:	1e83      	subs	r3, r0, #2
    e31a:	2b02      	cmp	r3, #2
    e31c:	d900      	bls.n	e320 <usb_config_rx+0xc>
}
    e31e:	bd38      	pop	{r3, r4, r5, pc}
    e320:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e322:	fab2 fc82 	clz	ip, r2
    e326:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e32a:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e32c:	462a      	mov	r2, r5
    e32e:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e332:	4807      	ldr	r0, [pc, #28]	; (e350 <usb_config_rx+0x3c>)
    e334:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e338:	f7ff fd4f 	bl	ddda <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    e33c:	2d00      	cmp	r5, #0
    e33e:	d0ee      	beq.n	e31e <usb_config_rx+0xa>
    e340:	4a04      	ldr	r2, [pc, #16]	; (e354 <usb_config_rx+0x40>)
    e342:	2301      	movs	r3, #1
    e344:	40a3      	lsls	r3, r4
    e346:	6811      	ldr	r1, [r2, #0]
    e348:	430b      	orrs	r3, r1
    e34a:	6013      	str	r3, [r2, #0]
    e34c:	e7e7      	b.n	e31e <usb_config_rx+0xa>
    e34e:	bf00      	nop
    e350:	20000000 	.word	0x20000000
    e354:	20004fe8 	.word	0x20004fe8

0000e358 <usb_config_tx>:
{
    e358:	b538      	push	{r3, r4, r5, lr}
    e35a:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e35c:	3802      	subs	r0, #2
    e35e:	2802      	cmp	r0, #2
    e360:	d900      	bls.n	e364 <usb_config_tx+0xc>
}
    e362:	bd38      	pop	{r3, r4, r5, pc}
    e364:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e366:	fab2 fc82 	clz	ip, r2
    e36a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e36e:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e370:	4809      	ldr	r0, [pc, #36]	; (e398 <usb_config_tx+0x40>)
    e372:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e376:	461a      	mov	r2, r3
    e378:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e37c:	3040      	adds	r0, #64	; 0x40
    e37e:	f7ff fd2c 	bl	ddda <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e382:	2d00      	cmp	r5, #0
    e384:	d0ed      	beq.n	e362 <usb_config_tx+0xa>
    e386:	4a05      	ldr	r2, [pc, #20]	; (e39c <usb_config_tx+0x44>)
    e388:	3410      	adds	r4, #16
    e38a:	2301      	movs	r3, #1
    e38c:	40a3      	lsls	r3, r4
    e38e:	6811      	ldr	r1, [r2, #0]
    e390:	430b      	orrs	r3, r1
    e392:	6013      	str	r3, [r2, #0]
    e394:	e7e5      	b.n	e362 <usb_config_tx+0xa>
    e396:	bf00      	nop
    e398:	20000000 	.word	0x20000000
    e39c:	20004fe8 	.word	0x20004fe8

0000e3a0 <usb_prepare_transfer>:
{
    e3a0:	b410      	push	{r4}
	transfer->next = 1;
    e3a2:	2401      	movs	r4, #1
    e3a4:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
    e3a6:	0412      	lsls	r2, r2, #16
    e3a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e3ac:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
    e3ae:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    e3b0:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    e3b4:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    e3b6:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
    e3ba:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    e3bc:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
    e3c0:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    e3c2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    e3c6:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
    e3c8:	61c3      	str	r3, [r0, #28]
}
    e3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    e3ce:	4770      	bx	lr

0000e3d0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    e3d0:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e3d2:	1e83      	subs	r3, r0, #2
    e3d4:	2b02      	cmp	r3, #2
    e3d6:	d900      	bls.n	e3da <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e3d8:	bd08      	pop	{r3, pc}
    e3da:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
    e3dc:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e3e0:	4b04      	ldr	r3, [pc, #16]	; (e3f4 <usb_transmit+0x24>)
    e3e2:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e3e6:	2301      	movs	r3, #1
    e3e8:	fa03 f101 	lsl.w	r1, r3, r1
    e3ec:	3040      	adds	r0, #64	; 0x40
    e3ee:	f7ff fc95 	bl	dd1c <schedule_transfer>
    e3f2:	e7f1      	b.n	e3d8 <usb_transmit+0x8>
    e3f4:	20000000 	.word	0x20000000

0000e3f8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    e3f8:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e3fa:	1e83      	subs	r3, r0, #2
    e3fc:	2b02      	cmp	r3, #2
    e3fe:	d900      	bls.n	e402 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e400:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
    e402:	460a      	mov	r2, r1
    e404:	2101      	movs	r1, #1
    e406:	4081      	lsls	r1, r0
    e408:	4b02      	ldr	r3, [pc, #8]	; (e414 <usb_receive+0x1c>)
    e40a:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e40e:	f7ff fc85 	bl	dd1c <schedule_transfer>
    e412:	e7f5      	b.n	e400 <usb_receive+0x8>
    e414:	20000000 	.word	0x20000000

0000e418 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    e418:	6840      	ldr	r0, [r0, #4]
#endif
}
    e41a:	4770      	bx	lr

0000e41c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e41c:	b500      	push	{lr}
    e41e:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e420:	4b10      	ldr	r3, [pc, #64]	; (e464 <usb_init_serialnumber+0x48>)
    e422:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
    e426:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e42a:	4b0f      	ldr	r3, [pc, #60]	; (e468 <usb_init_serialnumber+0x4c>)
    e42c:	4298      	cmp	r0, r3
    e42e:	d202      	bcs.n	e436 <usb_init_serialnumber+0x1a>
    e430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e434:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e436:	220a      	movs	r2, #10
    e438:	a901      	add	r1, sp, #4
    e43a:	f7fe fe13 	bl	d064 <ultoa>
	for (i=0; i<10; i++) {
    e43e:	a901      	add	r1, sp, #4
    e440:	480a      	ldr	r0, [pc, #40]	; (e46c <usb_init_serialnumber+0x50>)
    e442:	2300      	movs	r3, #0
		char c = buf[i];
    e444:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
    e448:	b122      	cbz	r2, e454 <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
    e44a:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e44e:	3301      	adds	r3, #1
    e450:	2b0a      	cmp	r3, #10
    e452:	d1f7      	bne.n	e444 <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e454:	3301      	adds	r3, #1
    e456:	005b      	lsls	r3, r3, #1
    e458:	4a04      	ldr	r2, [pc, #16]	; (e46c <usb_init_serialnumber+0x50>)
    e45a:	7013      	strb	r3, [r2, #0]
}
    e45c:	b005      	add	sp, #20
    e45e:	f85d fb04 	ldr.w	pc, [sp], #4
    e462:	bf00      	nop
    e464:	401f4400 	.word	0x401f4400
    e468:	00989680 	.word	0x00989680
    e46c:	20003a00 	.word	0x20003a00

0000e470 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e470:	b508      	push	{r3, lr}
    e472:	f000 fa15 	bl	e8a0 <usb_serial_flush_input>
    e476:	bd08      	pop	{r3, pc}

0000e478 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    e478:	b508      	push	{r3, lr}
    e47a:	f000 f9e1 	bl	e840 <usb_serial_peekchar>
    e47e:	bd08      	pop	{r3, pc}

0000e480 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    e480:	b508      	push	{r3, lr}
    e482:	f000 fa3f 	bl	e904 <usb_serial_getchar>
    e486:	bd08      	pop	{r3, pc}

0000e488 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e488:	b508      	push	{r3, lr}
    e48a:	f000 f9fd 	bl	e888 <usb_serial_available>
    e48e:	bd08      	pop	{r3, pc}

0000e490 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e490:	b508      	push	{r3, lr}
    e492:	f000 fb55 	bl	eb40 <usb_serial_flush_output>
    e496:	bd08      	pop	{r3, pc}

0000e498 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e498:	b508      	push	{r3, lr}
    e49a:	f000 fb2b 	bl	eaf4 <usb_serial_write_buffer_free>
    e49e:	bd08      	pop	{r3, pc}

0000e4a0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e4a0:	b508      	push	{r3, lr}
    e4a2:	4608      	mov	r0, r1
    e4a4:	4611      	mov	r1, r2
    e4a6:	f000 fa3d 	bl	e924 <usb_serial_write>
    e4aa:	bd08      	pop	{r3, pc}

0000e4ac <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e4ac:	b508      	push	{r3, lr}
    e4ae:	4608      	mov	r0, r1
    e4b0:	f000 fb14 	bl	eadc <usb_serial_putchar>
    e4b4:	bd08      	pop	{r3, pc}
	...

0000e4b8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    e4b8:	4b20      	ldr	r3, [pc, #128]	; (e53c <usb_serial_flush_callback+0x84>)
    e4ba:	781b      	ldrb	r3, [r3, #0]
    e4bc:	2b00      	cmp	r3, #0
    e4be:	d13b      	bne.n	e538 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
    e4c0:	4b1f      	ldr	r3, [pc, #124]	; (e540 <usb_serial_flush_callback+0x88>)
    e4c2:	781b      	ldrb	r3, [r3, #0]
    e4c4:	2b00      	cmp	r3, #0
    e4c6:	d037      	beq.n	e538 <usb_serial_flush_callback+0x80>
{
    e4c8:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    e4ca:	4b1e      	ldr	r3, [pc, #120]	; (e544 <usb_serial_flush_callback+0x8c>)
    e4cc:	881d      	ldrh	r5, [r3, #0]
    e4ce:	b905      	cbnz	r5, e4d2 <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
    e4d0:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    e4d2:	4a1d      	ldr	r2, [pc, #116]	; (e548 <usb_serial_flush_callback+0x90>)
    e4d4:	7811      	ldrb	r1, [r2, #0]
    e4d6:	4e1d      	ldr	r6, [pc, #116]	; (e54c <usb_serial_flush_callback+0x94>)
    e4d8:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e4dc:	4c1c      	ldr	r4, [pc, #112]	; (e550 <usb_serial_flush_callback+0x98>)
    e4de:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    e4e2:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e4e6:	2300      	movs	r3, #0
    e4e8:	462a      	mov	r2, r5
    e4ea:	4621      	mov	r1, r4
    e4ec:	4630      	mov	r0, r6
    e4ee:	f7ff ff57 	bl	e3a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e4f2:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    e4f4:	1962      	adds	r2, r4, r5
	asm("dsb");
    e4f6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e4fa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e4fe:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    e502:	3320      	adds	r3, #32
	} while (location < end_addr);
    e504:	429a      	cmp	r2, r3
    e506:	d8fa      	bhi.n	e4fe <usb_serial_flush_callback+0x46>
	asm("dsb");
    e508:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e50c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e510:	4631      	mov	r1, r6
    e512:	2004      	movs	r0, #4
    e514:	f7ff ff5c 	bl	e3d0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e518:	4b0b      	ldr	r3, [pc, #44]	; (e548 <usb_serial_flush_callback+0x90>)
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	3301      	adds	r3, #1
    e51e:	b2db      	uxtb	r3, r3
    e520:	2b03      	cmp	r3, #3
    e522:	d805      	bhi.n	e530 <usb_serial_flush_callback+0x78>
    e524:	4a08      	ldr	r2, [pc, #32]	; (e548 <usb_serial_flush_callback+0x90>)
    e526:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    e528:	4b06      	ldr	r3, [pc, #24]	; (e544 <usb_serial_flush_callback+0x8c>)
    e52a:	2200      	movs	r2, #0
    e52c:	801a      	strh	r2, [r3, #0]
    e52e:	e7cf      	b.n	e4d0 <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e530:	4b05      	ldr	r3, [pc, #20]	; (e548 <usb_serial_flush_callback+0x90>)
    e532:	2200      	movs	r2, #0
    e534:	701a      	strb	r2, [r3, #0]
    e536:	e7f7      	b.n	e528 <usb_serial_flush_callback+0x70>
    e538:	4770      	bx	lr
    e53a:	bf00      	nop
    e53c:	2000530a 	.word	0x2000530a
    e540:	2000530c 	.word	0x2000530c
    e544:	200052ee 	.word	0x200052ee
    e548:	20005309 	.word	0x20005309
    e54c:	20004000 	.word	0x20004000
    e550:	20201080 	.word	0x20201080

0000e554 <rx_queue_transfer>:
{
    e554:	b570      	push	{r4, r5, r6, lr}
    e556:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e558:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e55c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    e560:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    e564:	4c13      	ldr	r4, [pc, #76]	; (e5b4 <rx_queue_transfer+0x60>)
    e566:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e56a:	4d13      	ldr	r5, [pc, #76]	; (e5b8 <rx_queue_transfer+0x64>)
    e56c:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    e570:	4e12      	ldr	r6, [pc, #72]	; (e5bc <rx_queue_transfer+0x68>)
    e572:	8832      	ldrh	r2, [r6, #0]
    e574:	4621      	mov	r1, r4
    e576:	4628      	mov	r0, r5
    e578:	f7ff ff12 	bl	e3a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e57c:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
    e57e:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    e580:	4422      	add	r2, r4
	asm("dsb");
    e582:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e586:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e58a:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
    e58e:	3320      	adds	r3, #32
	} while (location < end_addr);
    e590:	429a      	cmp	r2, r3
    e592:	d8fa      	bhi.n	e58a <rx_queue_transfer+0x36>
	asm("dsb");
    e594:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e598:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    e59c:	4629      	mov	r1, r5
    e59e:	2003      	movs	r0, #3
    e5a0:	f7ff ff2a 	bl	e3f8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e5a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e5a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e5ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e5b0:	bd70      	pop	{r4, r5, r6, pc}
    e5b2:	bf00      	nop
    e5b4:	20200080 	.word	0x20200080
    e5b8:	20003f00 	.word	0x20003f00
    e5bc:	200052ec 	.word	0x200052ec

0000e5c0 <rx_event>:
{
    e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e5c2:	6843      	ldr	r3, [r0, #4]
    e5c4:	4a23      	ldr	r2, [pc, #140]	; (e654 <rx_event+0x94>)
    e5c6:	8814      	ldrh	r4, [r2, #0]
    e5c8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    e5cc:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
    e5ce:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
    e5d0:	2c00      	cmp	r4, #0
    e5d2:	dd3a      	ble.n	e64a <rx_event+0x8a>
		uint32_t head = rx_head;
    e5d4:	4b20      	ldr	r3, [pc, #128]	; (e658 <rx_event+0x98>)
    e5d6:	781b      	ldrb	r3, [r3, #0]
    e5d8:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
    e5da:	4a20      	ldr	r2, [pc, #128]	; (e65c <rx_event+0x9c>)
    e5dc:	7812      	ldrb	r2, [r2, #0]
    e5de:	b2d2      	uxtb	r2, r2
    e5e0:	4293      	cmp	r3, r2
    e5e2:	d008      	beq.n	e5f6 <rx_event+0x36>
			uint32_t ii = rx_list[head];
    e5e4:	4a1e      	ldr	r2, [pc, #120]	; (e660 <rx_event+0xa0>)
    e5e6:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
    e5e8:	4a1e      	ldr	r2, [pc, #120]	; (e664 <rx_event+0xa4>)
    e5ea:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    e5ee:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
    e5f2:	4294      	cmp	r4, r2
    e5f4:	d914      	bls.n	e620 <rx_event+0x60>
		rx_count[i] = len;
    e5f6:	4a1b      	ldr	r2, [pc, #108]	; (e664 <rx_event+0xa4>)
    e5f8:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
    e5fc:	4a1a      	ldr	r2, [pc, #104]	; (e668 <rx_event+0xa8>)
    e5fe:	2100      	movs	r1, #0
    e600:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    e604:	3301      	adds	r3, #1
    e606:	2b09      	cmp	r3, #9
    e608:	bf28      	it	cs
    e60a:	460b      	movcs	r3, r1
		rx_list[head] = i;
    e60c:	4a14      	ldr	r2, [pc, #80]	; (e660 <rx_event+0xa0>)
    e60e:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
    e610:	b2db      	uxtb	r3, r3
    e612:	4a11      	ldr	r2, [pc, #68]	; (e658 <rx_event+0x98>)
    e614:	7013      	strb	r3, [r2, #0]
		rx_available += len;
    e616:	4b15      	ldr	r3, [pc, #84]	; (e66c <rx_event+0xac>)
    e618:	681a      	ldr	r2, [r3, #0]
    e61a:	4414      	add	r4, r2
    e61c:	601c      	str	r4, [r3, #0]
}
    e61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e620:	eb06 2047 	add.w	r0, r6, r7, lsl #9
    e624:	4b12      	ldr	r3, [pc, #72]	; (e670 <rx_event+0xb0>)
    e626:	4622      	mov	r2, r4
    e628:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    e62c:	4418      	add	r0, r3
    e62e:	f7fe fc77 	bl	cf20 <memcpy>
				rx_count[ii] = count + len;
    e632:	4426      	add	r6, r4
    e634:	4b0b      	ldr	r3, [pc, #44]	; (e664 <rx_event+0xa4>)
    e636:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
    e63a:	4a0c      	ldr	r2, [pc, #48]	; (e66c <rx_event+0xac>)
    e63c:	6813      	ldr	r3, [r2, #0]
    e63e:	4423      	add	r3, r4
    e640:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    e642:	4628      	mov	r0, r5
    e644:	f7ff ff86 	bl	e554 <rx_queue_transfer>
				return;
    e648:	e7e9      	b.n	e61e <rx_event+0x5e>
		rx_queue_transfer(i);
    e64a:	4628      	mov	r0, r5
    e64c:	f7ff ff82 	bl	e554 <rx_queue_transfer>
    e650:	e7e5      	b.n	e61e <rx_event+0x5e>
    e652:	bf00      	nop
    e654:	200052ec 	.word	0x200052ec
    e658:	20005303 	.word	0x20005303
    e65c:	20005304 	.word	0x20005304
    e660:	200050d8 	.word	0x200050d8
    e664:	200050b8 	.word	0x200050b8
    e668:	200050c8 	.word	0x200050c8
    e66c:	200050b4 	.word	0x200050b4
    e670:	20200080 	.word	0x20200080

0000e674 <usb_serial_reset>:
}
    e674:	4770      	bx	lr
	...

0000e678 <usb_serial_configure>:
{
    e678:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    e67a:	4b2a      	ldr	r3, [pc, #168]	; (e724 <usb_serial_configure+0xac>)
    e67c:	781b      	ldrb	r3, [r3, #0]
    e67e:	f013 0fff 	tst.w	r3, #255	; 0xff
    e682:	bf0c      	ite	eq
    e684:	2340      	moveq	r3, #64	; 0x40
    e686:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    e68a:	4d27      	ldr	r5, [pc, #156]	; (e728 <usb_serial_configure+0xb0>)
    e68c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    e68e:	4e27      	ldr	r6, [pc, #156]	; (e72c <usb_serial_configure+0xb4>)
    e690:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e692:	2280      	movs	r2, #128	; 0x80
    e694:	2100      	movs	r1, #0
    e696:	4826      	ldr	r0, [pc, #152]	; (e730 <usb_serial_configure+0xb8>)
    e698:	f003 f8c8 	bl	1182c <memset>
	tx_head = 0;
    e69c:	2400      	movs	r4, #0
    e69e:	4b25      	ldr	r3, [pc, #148]	; (e734 <usb_serial_configure+0xbc>)
    e6a0:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
    e6a2:	4b25      	ldr	r3, [pc, #148]	; (e738 <usb_serial_configure+0xc0>)
    e6a4:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e6a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    e6aa:	4621      	mov	r1, r4
    e6ac:	4823      	ldr	r0, [pc, #140]	; (e73c <usb_serial_configure+0xc4>)
    e6ae:	f003 f8bd 	bl	1182c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    e6b2:	4b23      	ldr	r3, [pc, #140]	; (e740 <usb_serial_configure+0xc8>)
    e6b4:	601c      	str	r4, [r3, #0]
    e6b6:	605c      	str	r4, [r3, #4]
    e6b8:	609c      	str	r4, [r3, #8]
    e6ba:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
    e6bc:	4b21      	ldr	r3, [pc, #132]	; (e744 <usb_serial_configure+0xcc>)
    e6be:	601c      	str	r4, [r3, #0]
    e6c0:	605c      	str	r4, [r3, #4]
    e6c2:	609c      	str	r4, [r3, #8]
    e6c4:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
    e6c6:	4b20      	ldr	r3, [pc, #128]	; (e748 <usb_serial_configure+0xd0>)
    e6c8:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
    e6ca:	4b20      	ldr	r3, [pc, #128]	; (e74c <usb_serial_configure+0xd4>)
    e6cc:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
    e6ce:	4b20      	ldr	r3, [pc, #128]	; (e750 <usb_serial_configure+0xd8>)
    e6d0:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e6d2:	4623      	mov	r3, r4
    e6d4:	4622      	mov	r2, r4
    e6d6:	2110      	movs	r1, #16
    e6d8:	2002      	movs	r0, #2
    e6da:	f7ff fe3d 	bl	e358 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    e6de:	4b1d      	ldr	r3, [pc, #116]	; (e754 <usb_serial_configure+0xdc>)
    e6e0:	4622      	mov	r2, r4
    e6e2:	8831      	ldrh	r1, [r6, #0]
    e6e4:	2003      	movs	r0, #3
    e6e6:	f7ff fe15 	bl	e314 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    e6ea:	4623      	mov	r3, r4
    e6ec:	2201      	movs	r2, #1
    e6ee:	8829      	ldrh	r1, [r5, #0]
    e6f0:	2004      	movs	r0, #4
    e6f2:	f7ff fe31 	bl	e358 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    e6f6:	4620      	mov	r0, r4
    e6f8:	f7ff ff2c 	bl	e554 <rx_queue_transfer>
    e6fc:	3401      	adds	r4, #1
    e6fe:	2c08      	cmp	r4, #8
    e700:	d1f9      	bne.n	e6f6 <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
    e702:	4b15      	ldr	r3, [pc, #84]	; (e758 <usb_serial_configure+0xe0>)
    e704:	4a15      	ldr	r2, [pc, #84]	; (e75c <usb_serial_configure+0xe4>)
    e706:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    e708:	4b15      	ldr	r3, [pc, #84]	; (e760 <usb_serial_configure+0xe8>)
    e70a:	2200      	movs	r2, #0
    e70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e710:	224a      	movs	r2, #74	; 0x4a
    e712:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e716:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    e71a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e71e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    e722:	bd70      	pop	{r4, r5, r6, pc}
    e724:	2000530d 	.word	0x2000530d
    e728:	200052f0 	.word	0x200052f0
    e72c:	200052ec 	.word	0x200052ec
    e730:	20004000 	.word	0x20004000
    e734:	20005309 	.word	0x20005309
    e738:	200052ee 	.word	0x200052ee
    e73c:	20003f00 	.word	0x20003f00
    e740:	200050b8 	.word	0x200050b8
    e744:	200050c8 	.word	0x200050c8
    e748:	20005303 	.word	0x20005303
    e74c:	20005304 	.word	0x20005304
    e750:	200050b4 	.word	0x200050b4
    e754:	0000e5c1 	.word	0x0000e5c1
    e758:	200052d4 	.word	0x200052d4
    e75c:	0000e4b9 	.word	0x0000e4b9
    e760:	402e0000 	.word	0x402e0000

0000e764 <usb_serial_read>:
{
    e764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e768:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e76c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e770:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
    e774:	4b2b      	ldr	r3, [pc, #172]	; (e824 <usb_serial_read+0xc0>)
    e776:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    e778:	468a      	mov	sl, r1
    e77a:	2900      	cmp	r1, #0
    e77c:	d045      	beq.n	e80a <usb_serial_read+0xa6>
    e77e:	4681      	mov	r9, r0
    e780:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    e782:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
    e784:	f8df b0b4 	ldr.w	fp, [pc, #180]	; e83c <usb_serial_read+0xd8>
    e788:	e015      	b.n	e7b6 <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e78a:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    e78e:	462a      	mov	r2, r5
    e790:	4b25      	ldr	r3, [pc, #148]	; (e828 <usb_serial_read+0xc4>)
    e792:	4419      	add	r1, r3
    e794:	4648      	mov	r0, r9
    e796:	f7fe fbc3 	bl	cf20 <memcpy>
			p += avail;
    e79a:	44a9      	add	r9, r5
			rx_available -= avail;
    e79c:	4a23      	ldr	r2, [pc, #140]	; (e82c <usb_serial_read+0xc8>)
    e79e:	6813      	ldr	r3, [r2, #0]
    e7a0:	1b5b      	subs	r3, r3, r5
    e7a2:	6013      	str	r3, [r2, #0]
			count += avail;
    e7a4:	442f      	add	r7, r5
			rx_tail = tail;
    e7a6:	b2e3      	uxtb	r3, r4
    e7a8:	4a1e      	ldr	r2, [pc, #120]	; (e824 <usb_serial_read+0xc0>)
    e7aa:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    e7ac:	4630      	mov	r0, r6
    e7ae:	f7ff fed1 	bl	e554 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    e7b2:	45ba      	cmp	sl, r7
    e7b4:	d934      	bls.n	e820 <usb_serial_read+0xbc>
    e7b6:	f89b 3000 	ldrb.w	r3, [fp]
    e7ba:	b2db      	uxtb	r3, r3
    e7bc:	42a3      	cmp	r3, r4
    e7be:	d02d      	beq.n	e81c <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
    e7c0:	3401      	adds	r4, #1
    e7c2:	2c09      	cmp	r4, #9
    e7c4:	bf28      	it	cs
    e7c6:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e7c8:	4b19      	ldr	r3, [pc, #100]	; (e830 <usb_serial_read+0xcc>)
    e7ca:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
    e7cc:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
    e7d0:	4b18      	ldr	r3, [pc, #96]	; (e834 <usb_serial_read+0xd0>)
    e7d2:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
    e7d6:	4b18      	ldr	r3, [pc, #96]	; (e838 <usb_serial_read+0xd4>)
    e7d8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    e7dc:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
    e7de:	45a8      	cmp	r8, r5
    e7e0:	d2d3      	bcs.n	e78a <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e7e2:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    e7e6:	4642      	mov	r2, r8
    e7e8:	4b0f      	ldr	r3, [pc, #60]	; (e828 <usb_serial_read+0xc4>)
    e7ea:	4419      	add	r1, r3
    e7ec:	4648      	mov	r0, r9
    e7ee:	f7fe fb97 	bl	cf20 <memcpy>
			rx_available -= len;
    e7f2:	4a0e      	ldr	r2, [pc, #56]	; (e82c <usb_serial_read+0xc8>)
    e7f4:	6813      	ldr	r3, [r2, #0]
    e7f6:	eba3 030a 	sub.w	r3, r3, sl
    e7fa:	443b      	add	r3, r7
    e7fc:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
    e7fe:	4b0d      	ldr	r3, [pc, #52]	; (e834 <usb_serial_read+0xd0>)
    e800:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    e804:	4490      	add	r8, r2
    e806:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e80a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e80e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e812:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e816:	4650      	mov	r0, sl
    e818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e81c:	46ba      	mov	sl, r7
    e81e:	e7f4      	b.n	e80a <usb_serial_read+0xa6>
			count += avail;
    e820:	46ba      	mov	sl, r7
    e822:	e7f2      	b.n	e80a <usb_serial_read+0xa6>
    e824:	20005304 	.word	0x20005304
    e828:	20200080 	.word	0x20200080
    e82c:	200050b4 	.word	0x200050b4
    e830:	200050d8 	.word	0x200050d8
    e834:	200050c8 	.word	0x200050c8
    e838:	200050b8 	.word	0x200050b8
    e83c:	20005303 	.word	0x20005303

0000e840 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    e840:	4b0c      	ldr	r3, [pc, #48]	; (e874 <usb_serial_peekchar+0x34>)
    e842:	781b      	ldrb	r3, [r3, #0]
    e844:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    e846:	4a0c      	ldr	r2, [pc, #48]	; (e878 <usb_serial_peekchar+0x38>)
    e848:	7812      	ldrb	r2, [r2, #0]
    e84a:	b2d2      	uxtb	r2, r2
    e84c:	4293      	cmp	r3, r2
    e84e:	d00d      	beq.n	e86c <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
    e850:	3301      	adds	r3, #1
    e852:	2b09      	cmp	r3, #9
    e854:	bf28      	it	cs
    e856:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    e858:	4a08      	ldr	r2, [pc, #32]	; (e87c <usb_serial_peekchar+0x3c>)
    e85a:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e85c:	4b08      	ldr	r3, [pc, #32]	; (e880 <usb_serial_peekchar+0x40>)
    e85e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    e862:	4b08      	ldr	r3, [pc, #32]	; (e884 <usb_serial_peekchar+0x44>)
    e864:	eb03 2342 	add.w	r3, r3, r2, lsl #9
    e868:	5c58      	ldrb	r0, [r3, r1]
    e86a:	4770      	bx	lr
	if (tail == rx_head) return -1;
    e86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e870:	4770      	bx	lr
    e872:	bf00      	nop
    e874:	20005304 	.word	0x20005304
    e878:	20005303 	.word	0x20005303
    e87c:	200050d8 	.word	0x200050d8
    e880:	200050c8 	.word	0x200050c8
    e884:	20200080 	.word	0x20200080

0000e888 <usb_serial_available>:
{
    e888:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    e88a:	4b04      	ldr	r3, [pc, #16]	; (e89c <usb_serial_available+0x14>)
    e88c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    e88e:	b10c      	cbz	r4, e894 <usb_serial_available+0xc>
}
    e890:	4620      	mov	r0, r4
    e892:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    e894:	f000 f9a4 	bl	ebe0 <yield>
    e898:	e7fa      	b.n	e890 <usb_serial_available+0x8>
    e89a:	bf00      	nop
    e89c:	200050b4 	.word	0x200050b4

0000e8a0 <usb_serial_flush_input>:
{
    e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    e8a2:	4b12      	ldr	r3, [pc, #72]	; (e8ec <usb_serial_flush_input+0x4c>)
    e8a4:	781c      	ldrb	r4, [r3, #0]
    e8a6:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    e8a8:	4b11      	ldr	r3, [pc, #68]	; (e8f0 <usb_serial_flush_input+0x50>)
    e8aa:	781b      	ldrb	r3, [r3, #0]
    e8ac:	b2db      	uxtb	r3, r3
    e8ae:	429c      	cmp	r4, r3
    e8b0:	d01a      	beq.n	e8e8 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
    e8b2:	4f10      	ldr	r7, [pc, #64]	; (e8f4 <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
    e8b4:	4d10      	ldr	r5, [pc, #64]	; (e8f8 <usb_serial_flush_input+0x58>)
    e8b6:	4e11      	ldr	r6, [pc, #68]	; (e8fc <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
    e8b8:	3401      	adds	r4, #1
    e8ba:	2c09      	cmp	r4, #9
    e8bc:	bf28      	it	cs
    e8be:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e8c0:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
    e8c2:	682b      	ldr	r3, [r5, #0]
    e8c4:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
    e8c8:	490d      	ldr	r1, [pc, #52]	; (e900 <usb_serial_flush_input+0x60>)
    e8ca:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    e8ce:	1a52      	subs	r2, r2, r1
    e8d0:	1a9b      	subs	r3, r3, r2
    e8d2:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
    e8d4:	f7ff fe3e 	bl	e554 <rx_queue_transfer>
		rx_tail = tail;
    e8d8:	b2e2      	uxtb	r2, r4
    e8da:	4b04      	ldr	r3, [pc, #16]	; (e8ec <usb_serial_flush_input+0x4c>)
    e8dc:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
    e8de:	4b04      	ldr	r3, [pc, #16]	; (e8f0 <usb_serial_flush_input+0x50>)
    e8e0:	781b      	ldrb	r3, [r3, #0]
    e8e2:	b2db      	uxtb	r3, r3
    e8e4:	42a3      	cmp	r3, r4
    e8e6:	d1e7      	bne.n	e8b8 <usb_serial_flush_input+0x18>
}
    e8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8ea:	bf00      	nop
    e8ec:	20005304 	.word	0x20005304
    e8f0:	20005303 	.word	0x20005303
    e8f4:	200050d8 	.word	0x200050d8
    e8f8:	200050b4 	.word	0x200050b4
    e8fc:	200050b8 	.word	0x200050b8
    e900:	200050c8 	.word	0x200050c8

0000e904 <usb_serial_getchar>:
{
    e904:	b500      	push	{lr}
    e906:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    e908:	2101      	movs	r1, #1
    e90a:	f10d 0007 	add.w	r0, sp, #7
    e90e:	f7ff ff29 	bl	e764 <usb_serial_read>
    e912:	b120      	cbz	r0, e91e <usb_serial_getchar+0x1a>
    e914:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    e918:	b003      	add	sp, #12
    e91a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    e91e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e922:	e7f9      	b.n	e918 <usb_serial_getchar+0x14>

0000e924 <usb_serial_write>:
{
    e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e928:	b085      	sub	sp, #20
    e92a:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
    e92c:	4b62      	ldr	r3, [pc, #392]	; (eab8 <usb_serial_write+0x194>)
    e92e:	781b      	ldrb	r3, [r3, #0]
    e930:	2b00      	cmp	r3, #0
    e932:	f000 80bd 	beq.w	eab0 <usb_serial_write+0x18c>
    e936:	468b      	mov	fp, r1
	while (size > 0) {
    e938:	2900      	cmp	r1, #0
    e93a:	d047      	beq.n	e9cc <usb_serial_write+0xa8>
	uint32_t sent=0;
    e93c:	2300      	movs	r3, #0
    e93e:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    e940:	4c5e      	ldr	r4, [pc, #376]	; (eabc <usb_serial_write+0x198>)
    e942:	2601      	movs	r6, #1
    e944:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
    e948:	f8df 818c 	ldr.w	r8, [pc, #396]	; ead8 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
    e94c:	f8df a184 	ldr.w	sl, [pc, #388]	; ead4 <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
    e950:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e954:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    e956:	4b5a      	ldr	r3, [pc, #360]	; (eac0 <usb_serial_write+0x19c>)
    e958:	f893 9000 	ldrb.w	r9, [r3]
    e95c:	4b59      	ldr	r3, [pc, #356]	; (eac4 <usb_serial_write+0x1a0>)
    e95e:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
    e962:	4b59      	ldr	r3, [pc, #356]	; (eac8 <usb_serial_write+0x1a4>)
    e964:	881b      	ldrh	r3, [r3, #0]
    e966:	b94b      	cbnz	r3, e97c <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
    e968:	2700      	movs	r7, #0
		int waiting=0;
    e96a:	463d      	mov	r5, r7
    e96c:	e043      	b.n	e9f6 <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
    e96e:	4b56      	ldr	r3, [pc, #344]	; (eac8 <usb_serial_write+0x1a4>)
    e970:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e974:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
    e976:	2300      	movs	r3, #0
    e978:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e97c:	4b50      	ldr	r3, [pc, #320]	; (eac0 <usb_serial_write+0x19c>)
    e97e:	781b      	ldrb	r3, [r3, #0]
    e980:	02df      	lsls	r7, r3, #11
    e982:	4a51      	ldr	r2, [pc, #324]	; (eac8 <usb_serial_write+0x1a4>)
    e984:	8815      	ldrh	r5, [r2, #0]
    e986:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
    e98a:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
    e98e:	4b4f      	ldr	r3, [pc, #316]	; (eacc <usb_serial_write+0x1a8>)
    e990:	4418      	add	r0, r3
		if (size >= tx_available) {
    e992:	455d      	cmp	r5, fp
    e994:	d947      	bls.n	ea26 <usb_serial_write+0x102>
			memcpy(txdata, data, size);
    e996:	465a      	mov	r2, fp
    e998:	9903      	ldr	r1, [sp, #12]
    e99a:	f7fe fac1 	bl	cf20 <memcpy>
			tx_available -= size;
    e99e:	eba5 050b 	sub.w	r5, r5, fp
    e9a2:	4b49      	ldr	r3, [pc, #292]	; (eac8 <usb_serial_write+0x1a4>)
    e9a4:	801d      	strh	r5, [r3, #0]
			sent += size;
    e9a6:	9b01      	ldr	r3, [sp, #4]
    e9a8:	445b      	add	r3, fp
    e9aa:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e9ac:	4b48      	ldr	r3, [pc, #288]	; (ead0 <usb_serial_write+0x1ac>)
    e9ae:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    e9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
    e9b6:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
    e9ba:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    e9be:	2300      	movs	r3, #0
    e9c0:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    e9c2:	f1bb 0f00 	cmp.w	fp, #0
    e9c6:	d1c3      	bne.n	e950 <usb_serial_write+0x2c>
    e9c8:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
    e9cc:	4658      	mov	r0, fp
    e9ce:	e070      	b.n	eab2 <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
    e9d0:	f89a 3000 	ldrb.w	r3, [sl]
    e9d4:	b9f3      	cbnz	r3, ea14 <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    e9d6:	f8d8 3000 	ldr.w	r3, [r8]
    e9da:	1bdb      	subs	r3, r3, r7
    e9dc:	2b78      	cmp	r3, #120	; 0x78
    e9de:	d81b      	bhi.n	ea18 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
    e9e0:	4b35      	ldr	r3, [pc, #212]	; (eab8 <usb_serial_write+0x194>)
    e9e2:	781b      	ldrb	r3, [r3, #0]
    e9e4:	b1eb      	cbz	r3, ea22 <usb_serial_write+0xfe>
			yield();
    e9e6:	f000 f8fb 	bl	ebe0 <yield>
			tx_noautoflush = 1;
    e9ea:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
    e9ec:	4635      	mov	r5, r6
    e9ee:	4b36      	ldr	r3, [pc, #216]	; (eac8 <usb_serial_write+0x1a4>)
    e9f0:	881b      	ldrh	r3, [r3, #0]
    e9f2:	2b00      	cmp	r3, #0
    e9f4:	d1c2      	bne.n	e97c <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
    e9f6:	4648      	mov	r0, r9
    e9f8:	f7ff fd0e 	bl	e418 <usb_transfer_status>
			if (!(status & 0x80)) {
    e9fc:	f010 0f80 	tst.w	r0, #128	; 0x80
    ea00:	d0b5      	beq.n	e96e <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
    ea02:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
    ea06:	2300      	movs	r3, #0
    ea08:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
    ea0a:	2d00      	cmp	r5, #0
    ea0c:	d1e0      	bne.n	e9d0 <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
    ea0e:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
    ea12:	e7dd      	b.n	e9d0 <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
    ea14:	9801      	ldr	r0, [sp, #4]
    ea16:	e04c      	b.n	eab2 <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
    ea18:	4b2e      	ldr	r3, [pc, #184]	; (ead4 <usb_serial_write+0x1b0>)
    ea1a:	2201      	movs	r2, #1
    ea1c:	701a      	strb	r2, [r3, #0]
				return sent;
    ea1e:	9801      	ldr	r0, [sp, #4]
    ea20:	e047      	b.n	eab2 <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
    ea22:	9801      	ldr	r0, [sp, #4]
    ea24:	e045      	b.n	eab2 <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
    ea26:	462a      	mov	r2, r5
    ea28:	9903      	ldr	r1, [sp, #12]
    ea2a:	f7fe fa79 	bl	cf20 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ea2e:	4d27      	ldr	r5, [pc, #156]	; (eacc <usb_serial_write+0x1a8>)
    ea30:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ea32:	2300      	movs	r3, #0
    ea34:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ea38:	4629      	mov	r1, r5
    ea3a:	4648      	mov	r0, r9
    ea3c:	f7ff fcb0 	bl	e3a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ea40:	462b      	mov	r3, r5
	asm("dsb");
    ea42:	f3bf 8f4f 	dsb	sy
    ea46:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    ea4a:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    ea4e:	428a      	cmp	r2, r1
    ea50:	bf8c      	ite	hi
    ea52:	2201      	movhi	r2, #1
    ea54:	2240      	movls	r2, #64	; 0x40
    ea56:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    ea5a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ea5e:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    ea62:	3320      	adds	r3, #32
	} while (location < end_addr);
    ea64:	429d      	cmp	r5, r3
    ea66:	d1fa      	bne.n	ea5e <usb_serial_write+0x13a>
	asm("dsb");
    ea68:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ea6c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    ea70:	4649      	mov	r1, r9
    ea72:	2004      	movs	r0, #4
    ea74:	f7ff fcac 	bl	e3d0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    ea78:	4b11      	ldr	r3, [pc, #68]	; (eac0 <usb_serial_write+0x19c>)
    ea7a:	781b      	ldrb	r3, [r3, #0]
    ea7c:	3301      	adds	r3, #1
    ea7e:	b2db      	uxtb	r3, r3
    ea80:	2b03      	cmp	r3, #3
    ea82:	d811      	bhi.n	eaa8 <usb_serial_write+0x184>
    ea84:	4a0e      	ldr	r2, [pc, #56]	; (eac0 <usb_serial_write+0x19c>)
    ea86:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    ea88:	4a0f      	ldr	r2, [pc, #60]	; (eac8 <usb_serial_write+0x1a4>)
    ea8a:	8813      	ldrh	r3, [r2, #0]
    ea8c:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
    ea90:	9901      	ldr	r1, [sp, #4]
    ea92:	4419      	add	r1, r3
    ea94:	9101      	str	r1, [sp, #4]
			data += tx_available;
    ea96:	9903      	ldr	r1, [sp, #12]
    ea98:	4419      	add	r1, r3
    ea9a:	9103      	str	r1, [sp, #12]
			tx_available = 0;
    ea9c:	2300      	movs	r3, #0
    ea9e:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
    eaa0:	4a0b      	ldr	r2, [pc, #44]	; (ead0 <usb_serial_write+0x1ac>)
    eaa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
    eaa6:	e788      	b.n	e9ba <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eaa8:	4b05      	ldr	r3, [pc, #20]	; (eac0 <usb_serial_write+0x19c>)
    eaaa:	2200      	movs	r2, #0
    eaac:	701a      	strb	r2, [r3, #0]
    eaae:	e7eb      	b.n	ea88 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
    eab0:	2000      	movs	r0, #0
}
    eab2:	b005      	add	sp, #20
    eab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eab8:	2000530c 	.word	0x2000530c
    eabc:	2000530a 	.word	0x2000530a
    eac0:	20005309 	.word	0x20005309
    eac4:	20004000 	.word	0x20004000
    eac8:	200052ee 	.word	0x200052ee
    eacc:	20201080 	.word	0x20201080
    ead0:	402e0000 	.word	0x402e0000
    ead4:	20005308 	.word	0x20005308
    ead8:	200052bc 	.word	0x200052bc

0000eadc <usb_serial_putchar>:
{
    eadc:	b500      	push	{lr}
    eade:	b083      	sub	sp, #12
    eae0:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    eae4:	2101      	movs	r1, #1
    eae6:	f10d 0007 	add.w	r0, sp, #7
    eaea:	f7ff ff1b 	bl	e924 <usb_serial_write>
}
    eaee:	b003      	add	sp, #12
    eaf0:	f85d fb04 	ldr.w	pc, [sp], #4

0000eaf4 <usb_serial_write_buffer_free>:
{
    eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
    eaf6:	4b0f      	ldr	r3, [pc, #60]	; (eb34 <usb_serial_write_buffer_free+0x40>)
    eaf8:	2201      	movs	r2, #1
    eafa:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
    eafc:	4d0e      	ldr	r5, [pc, #56]	; (eb38 <usb_serial_write_buffer_free+0x44>)
    eafe:	2400      	movs	r4, #0
	uint32_t sum = 0;
    eb00:	4627      	mov	r7, r4
		if (i == tx_head) continue;
    eb02:	4e0e      	ldr	r6, [pc, #56]	; (eb3c <usb_serial_write_buffer_free+0x48>)
    eb04:	e003      	b.n	eb0e <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
    eb06:	3401      	adds	r4, #1
    eb08:	3520      	adds	r5, #32
    eb0a:	2c04      	cmp	r4, #4
    eb0c:	d00b      	beq.n	eb26 <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
    eb0e:	7833      	ldrb	r3, [r6, #0]
    eb10:	42a3      	cmp	r3, r4
    eb12:	d0f8      	beq.n	eb06 <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    eb14:	4628      	mov	r0, r5
    eb16:	f7ff fc7f 	bl	e418 <usb_transfer_status>
    eb1a:	f010 0f80 	tst.w	r0, #128	; 0x80
    eb1e:	bf08      	it	eq
    eb20:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
    eb24:	e7ef      	b.n	eb06 <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
    eb26:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    eb2a:	4b02      	ldr	r3, [pc, #8]	; (eb34 <usb_serial_write_buffer_free+0x40>)
    eb2c:	2200      	movs	r2, #0
    eb2e:	701a      	strb	r2, [r3, #0]
}
    eb30:	4638      	mov	r0, r7
    eb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb34:	2000530a 	.word	0x2000530a
    eb38:	20004000 	.word	0x20004000
    eb3c:	20005309 	.word	0x20005309

0000eb40 <usb_serial_flush_output>:
	if (!usb_configuration) return;
    eb40:	4b21      	ldr	r3, [pc, #132]	; (ebc8 <usb_serial_flush_output+0x88>)
    eb42:	781b      	ldrb	r3, [r3, #0]
    eb44:	2b00      	cmp	r3, #0
    eb46:	d03e      	beq.n	ebc6 <usb_serial_flush_output+0x86>
{
    eb48:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    eb4a:	4b20      	ldr	r3, [pc, #128]	; (ebcc <usb_serial_flush_output+0x8c>)
    eb4c:	881d      	ldrh	r5, [r3, #0]
    eb4e:	b905      	cbnz	r5, eb52 <usb_serial_flush_output+0x12>
}
    eb50:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
    eb52:	4a1f      	ldr	r2, [pc, #124]	; (ebd0 <usb_serial_flush_output+0x90>)
    eb54:	2101      	movs	r1, #1
    eb56:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    eb58:	4a1e      	ldr	r2, [pc, #120]	; (ebd4 <usb_serial_flush_output+0x94>)
    eb5a:	7811      	ldrb	r1, [r2, #0]
    eb5c:	4e1e      	ldr	r6, [pc, #120]	; (ebd8 <usb_serial_flush_output+0x98>)
    eb5e:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    eb62:	4c1e      	ldr	r4, [pc, #120]	; (ebdc <usb_serial_flush_output+0x9c>)
    eb64:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    eb68:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    eb6c:	2300      	movs	r3, #0
    eb6e:	462a      	mov	r2, r5
    eb70:	4621      	mov	r1, r4
    eb72:	4630      	mov	r0, r6
    eb74:	f7ff fc14 	bl	e3a0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    eb78:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    eb7a:	1962      	adds	r2, r4, r5
	asm("dsb");
    eb7c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    eb80:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    eb84:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    eb88:	3320      	adds	r3, #32
	} while (location < end_addr);
    eb8a:	429a      	cmp	r2, r3
    eb8c:	d8fa      	bhi.n	eb84 <usb_serial_flush_output+0x44>
	asm("dsb");
    eb8e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eb92:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    eb96:	4631      	mov	r1, r6
    eb98:	2004      	movs	r0, #4
    eb9a:	f7ff fc19 	bl	e3d0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    eb9e:	4b0d      	ldr	r3, [pc, #52]	; (ebd4 <usb_serial_flush_output+0x94>)
    eba0:	781b      	ldrb	r3, [r3, #0]
    eba2:	3301      	adds	r3, #1
    eba4:	b2db      	uxtb	r3, r3
    eba6:	2b03      	cmp	r3, #3
    eba8:	d809      	bhi.n	ebbe <usb_serial_flush_output+0x7e>
    ebaa:	4a0a      	ldr	r2, [pc, #40]	; (ebd4 <usb_serial_flush_output+0x94>)
    ebac:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    ebae:	2300      	movs	r3, #0
    ebb0:	4a06      	ldr	r2, [pc, #24]	; (ebcc <usb_serial_flush_output+0x8c>)
    ebb2:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
    ebb4:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ebb8:	4a05      	ldr	r2, [pc, #20]	; (ebd0 <usb_serial_flush_output+0x90>)
    ebba:	7013      	strb	r3, [r2, #0]
    ebbc:	e7c8      	b.n	eb50 <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ebbe:	4b05      	ldr	r3, [pc, #20]	; (ebd4 <usb_serial_flush_output+0x94>)
    ebc0:	2200      	movs	r2, #0
    ebc2:	701a      	strb	r2, [r3, #0]
    ebc4:	e7f3      	b.n	ebae <usb_serial_flush_output+0x6e>
    ebc6:	4770      	bx	lr
    ebc8:	2000530c 	.word	0x2000530c
    ebcc:	200052ee 	.word	0x200052ee
    ebd0:	2000530a 	.word	0x2000530a
    ebd4:	20005309 	.word	0x20005309
    ebd8:	20004000 	.word	0x20004000
    ebdc:	20201080 	.word	0x20201080

0000ebe0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    ebe2:	4b39      	ldr	r3, [pc, #228]	; (ecc8 <yield+0xe8>)
    ebe4:	781b      	ldrb	r3, [r3, #0]
    ebe6:	b1ab      	cbz	r3, ec14 <yield+0x34>
	if (running) return; // TODO: does this need to be atomic?
    ebe8:	4a38      	ldr	r2, [pc, #224]	; (eccc <yield+0xec>)
    ebea:	7812      	ldrb	r2, [r2, #0]
    ebec:	b992      	cbnz	r2, ec14 <yield+0x34>
	running = 1;
    ebee:	4a37      	ldr	r2, [pc, #220]	; (eccc <yield+0xec>)
    ebf0:	2101      	movs	r1, #1
    ebf2:	7011      	strb	r1, [r2, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    ebf4:	f013 0f01 	tst.w	r3, #1
    ebf8:	d10d      	bne.n	ec16 <yield+0x36>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    ebfa:	4b33      	ldr	r3, [pc, #204]	; (ecc8 <yield+0xe8>)
    ebfc:	781b      	ldrb	r3, [r3, #0]
    ebfe:	f013 0f02 	tst.w	r3, #2
    ec02:	d118      	bne.n	ec36 <yield+0x56>

	running = 0;
    ec04:	4b31      	ldr	r3, [pc, #196]	; (eccc <yield+0xec>)
    ec06:	2200      	movs	r2, #0
    ec08:	701a      	strb	r2, [r3, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    ec0a:	4b2f      	ldr	r3, [pc, #188]	; (ecc8 <yield+0xe8>)
    ec0c:	781b      	ldrb	r3, [r3, #0]
    ec0e:	f013 0f04 	tst.w	r3, #4
    ec12:	d12a      	bne.n	ec6a <yield+0x8a>
	
};
    ec14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        virtual int available() { return usb_serial_available(); }
    ec16:	f7ff fe37 	bl	e888 <usb_serial_available>
		if (Serial.available()) serialEvent();
    ec1a:	b948      	cbnz	r0, ec30 <yield+0x50>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    ec1c:	4b2c      	ldr	r3, [pc, #176]	; (ecd0 <yield+0xf0>)
    ec1e:	781b      	ldrb	r3, [r3, #0]
    ec20:	2b00      	cmp	r3, #0
    ec22:	d0ea      	beq.n	ebfa <yield+0x1a>
    ec24:	4a28      	ldr	r2, [pc, #160]	; (ecc8 <yield+0xe8>)
    ec26:	7813      	ldrb	r3, [r2, #0]
    ec28:	f023 0301 	bic.w	r3, r3, #1
    ec2c:	7013      	strb	r3, [r2, #0]
    ec2e:	e7e4      	b.n	ebfa <yield+0x1a>
		if (Serial.available()) serialEvent();
    ec30:	f000 f85a 	bl	ece8 <serialEvent()>
    ec34:	e7f2      	b.n	ec1c <yield+0x3c>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ec36:	4b27      	ldr	r3, [pc, #156]	; (ecd4 <yield+0xf4>)
    ec38:	781b      	ldrb	r3, [r3, #0]
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	d0e2      	beq.n	ec04 <yield+0x24>
    ec3e:	2400      	movs	r4, #0
			s_serials_with_serial_events[i]->doYieldCode();
    ec40:	4f25      	ldr	r7, [pc, #148]	; (ecd8 <yield+0xf8>)
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ec42:	4e24      	ldr	r6, [pc, #144]	; (ecd4 <yield+0xf4>)
    ec44:	e004      	b.n	ec50 <yield+0x70>
    ec46:	3401      	adds	r4, #1
    ec48:	7832      	ldrb	r2, [r6, #0]
    ec4a:	b2e3      	uxtb	r3, r4
    ec4c:	429a      	cmp	r2, r3
    ec4e:	d9d9      	bls.n	ec04 <yield+0x24>
			s_serials_with_serial_events[i]->doYieldCode();
    ec50:	b2e3      	uxtb	r3, r4
    ec52:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    ec56:	682b      	ldr	r3, [r5, #0]
    ec58:	691b      	ldr	r3, [r3, #16]
    ec5a:	4628      	mov	r0, r5
    ec5c:	4798      	blx	r3
    ec5e:	2800      	cmp	r0, #0
    ec60:	d0f1      	beq.n	ec46 <yield+0x66>
    ec62:	696b      	ldr	r3, [r5, #20]
    ec64:	689b      	ldr	r3, [r3, #8]
    ec66:	4798      	blx	r3
    ec68:	e7ed      	b.n	ec46 <yield+0x66>
		if (!firstYield) return;  
    ec6a:	4b1c      	ldr	r3, [pc, #112]	; (ecdc <yield+0xfc>)
    ec6c:	681b      	ldr	r3, [r3, #0]
    ec6e:	2b00      	cmp	r3, #0
    ec70:	d0d0      	beq.n	ec14 <yield+0x34>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ec72:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    ec76:	2b00      	cmp	r3, #0
    ec78:	d1cc      	bne.n	ec14 <yield+0x34>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ec7a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    ec7e:	b672      	cpsid	i
		EventResponder *first = firstYield;
    ec80:	4b16      	ldr	r3, [pc, #88]	; (ecdc <yield+0xfc>)
    ec82:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ec84:	b1a0      	cbz	r0, ecb0 <yield+0xd0>
		if (runningFromYield) {
    ec86:	4b16      	ldr	r3, [pc, #88]	; (ece0 <yield+0x100>)
    ec88:	781b      	ldrb	r3, [r3, #0]
    ec8a:	b9ab      	cbnz	r3, ecb8 <yield+0xd8>
		runningFromYield = true;
    ec8c:	4b14      	ldr	r3, [pc, #80]	; (ece0 <yield+0x100>)
    ec8e:	2101      	movs	r1, #1
    ec90:	7019      	strb	r1, [r3, #0]
		firstYield = first->_next;
    ec92:	6943      	ldr	r3, [r0, #20]
    ec94:	4911      	ldr	r1, [pc, #68]	; (ecdc <yield+0xfc>)
    ec96:	600b      	str	r3, [r1, #0]
		if (firstYield) {
    ec98:	b193      	cbz	r3, ecc0 <yield+0xe0>
			firstYield->_prev = nullptr;
    ec9a:	2100      	movs	r1, #0
    ec9c:	6199      	str	r1, [r3, #24]
		if (doit) __enable_irq();
    ec9e:	b902      	cbnz	r2, eca2 <yield+0xc2>
    eca0:	b662      	cpsie	i
		first->_triggered = false;
    eca2:	2400      	movs	r4, #0
    eca4:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    eca6:	6883      	ldr	r3, [r0, #8]
    eca8:	4798      	blx	r3
		runningFromYield = false;
    ecaa:	4b0d      	ldr	r3, [pc, #52]	; (ece0 <yield+0x100>)
    ecac:	701c      	strb	r4, [r3, #0]
    ecae:	e7b1      	b.n	ec14 <yield+0x34>
		if (doit) __enable_irq();
    ecb0:	2a00      	cmp	r2, #0
    ecb2:	d1af      	bne.n	ec14 <yield+0x34>
    ecb4:	b662      	cpsie	i
    ecb6:	e7ad      	b.n	ec14 <yield+0x34>
    ecb8:	2a00      	cmp	r2, #0
    ecba:	d1ab      	bne.n	ec14 <yield+0x34>
    ecbc:	b662      	cpsie	i
    ecbe:	e7a9      	b.n	ec14 <yield+0x34>
			lastYield = nullptr;
    ecc0:	4b08      	ldr	r3, [pc, #32]	; (ece4 <yield+0x104>)
    ecc2:	2100      	movs	r1, #0
    ecc4:	6019      	str	r1, [r3, #0]
    ecc6:	e7ea      	b.n	ec9e <yield+0xbe>
    ecc8:	20003a1b 	.word	0x20003a1b
    eccc:	200052fa 	.word	0x200052fa
    ecd0:	6000209e 	.word	0x6000209e
    ecd4:	200052f9 	.word	0x200052f9
    ecd8:	20004b80 	.word	0x20004b80
    ecdc:	20004b70 	.word	0x20004b70
    ece0:	200052f8 	.word	0x200052f8
    ece4:	20004b7c 	.word	0x20004b7c

0000ece8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    ece8:	4770      	bx	lr
	...

0000ecec <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    ecec:	6803      	ldr	r3, [r0, #0]
    ecee:	b16b      	cbz	r3, ed0c <smalloc_verify_pool+0x20>
    ecf0:	6842      	ldr	r2, [r0, #4]
    ecf2:	b16a      	cbz	r2, ed10 <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
    ecf4:	4b07      	ldr	r3, [pc, #28]	; (ed14 <smalloc_verify_pool+0x28>)
    ecf6:	fba3 1302 	umull	r1, r3, r3, r2
    ecfa:	08db      	lsrs	r3, r3, #3
    ecfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ed00:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    ed04:	bf0c      	ite	eq
    ed06:	2001      	moveq	r0, #1
    ed08:	2000      	movne	r0, #0
    ed0a:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    ed0c:	2000      	movs	r0, #0
    ed0e:	4770      	bx	lr
    ed10:	2000      	movs	r0, #0
	return 1;
}
    ed12:	4770      	bx	lr
    ed14:	aaaaaaab 	.word	0xaaaaaaab

0000ed18 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    ed18:	b538      	push	{r3, r4, r5, lr}
    ed1a:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    ed1c:	f7ff ffe6 	bl	ecec <smalloc_verify_pool>
    ed20:	b9b8      	cbnz	r0, ed52 <sm_align_pool+0x3a>
    ed22:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
    ed24:	6862      	ldr	r2, [r4, #4]
    ed26:	4b0c      	ldr	r3, [pc, #48]	; (ed58 <sm_align_pool+0x40>)
    ed28:	fba3 1302 	umull	r1, r3, r3, r2
    ed2c:	08db      	lsrs	r3, r3, #3
    ed2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    ed32:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ed36:	d001      	beq.n	ed3c <sm_align_pool+0x24>
    ed38:	1ad2      	subs	r2, r2, r3
    ed3a:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ed3c:	6863      	ldr	r3, [r4, #4]
    ed3e:	2bf0      	cmp	r3, #240	; 0xf0
    ed40:	d902      	bls.n	ed48 <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
    ed42:	2501      	movs	r5, #1
}
    ed44:	4628      	mov	r0, r5
    ed46:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
    ed48:	f002 f9de 	bl	11108 <__errno>
    ed4c:	231c      	movs	r3, #28
    ed4e:	6003      	str	r3, [r0, #0]
		return 0;
    ed50:	e7f8      	b.n	ed44 <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
    ed52:	2501      	movs	r5, #1
    ed54:	e7f6      	b.n	ed44 <sm_align_pool+0x2c>
    ed56:	bf00      	nop
    ed58:	aaaaaaab 	.word	0xaaaaaaab

0000ed5c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    ed5c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    ed5e:	b190      	cbz	r0, ed86 <sm_set_pool+0x2a>
    ed60:	461d      	mov	r5, r3
    ed62:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    ed64:	b101      	cbz	r1, ed68 <sm_set_pool+0xc>
    ed66:	b9fa      	cbnz	r2, eda8 <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
    ed68:	4620      	mov	r0, r4
    ed6a:	f7ff ffbf 	bl	ecec <smalloc_verify_pool>
    ed6e:	4606      	mov	r6, r0
    ed70:	b1a8      	cbz	r0, ed9e <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ed72:	68a3      	ldr	r3, [r4, #8]
    ed74:	b96b      	cbnz	r3, ed92 <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
    ed76:	2300      	movs	r3, #0
    ed78:	6023      	str	r3, [r4, #0]
    ed7a:	6063      	str	r3, [r4, #4]
    ed7c:	60a3      	str	r3, [r4, #8]
    ed7e:	60e3      	str	r3, [r4, #12]
			return 1;
    ed80:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ed82:	4630      	mov	r0, r6
    ed84:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    ed86:	f002 f9bf 	bl	11108 <__errno>
    ed8a:	2316      	movs	r3, #22
    ed8c:	6003      	str	r3, [r0, #0]
		return 0;
    ed8e:	2600      	movs	r6, #0
    ed90:	e7f7      	b.n	ed82 <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ed92:	6862      	ldr	r2, [r4, #4]
    ed94:	2100      	movs	r1, #0
    ed96:	6820      	ldr	r0, [r4, #0]
    ed98:	f002 fd48 	bl	1182c <memset>
    ed9c:	e7eb      	b.n	ed76 <sm_set_pool+0x1a>
		errno = EINVAL;
    ed9e:	f002 f9b3 	bl	11108 <__errno>
    eda2:	2316      	movs	r3, #22
    eda4:	6003      	str	r3, [r0, #0]
		return 0;
    eda6:	e7ec      	b.n	ed82 <sm_set_pool+0x26>
	spool->pool = new_pool;
    eda8:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
    edaa:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
    edac:	9b04      	ldr	r3, [sp, #16]
    edae:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    edb0:	f7ff ffb2 	bl	ed18 <sm_align_pool>
    edb4:	4606      	mov	r6, r0
    edb6:	2800      	cmp	r0, #0
    edb8:	d0e3      	beq.n	ed82 <sm_set_pool+0x26>
	if (do_zero) {
    edba:	b90d      	cbnz	r5, edc0 <sm_set_pool+0x64>
	return 1;
    edbc:	2601      	movs	r6, #1
    edbe:	e7e0      	b.n	ed82 <sm_set_pool+0x26>
		spool->do_zero = do_zero;
    edc0:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    edc2:	6862      	ldr	r2, [r4, #4]
    edc4:	2100      	movs	r1, #0
    edc6:	6820      	ldr	r0, [r4, #0]
    edc8:	f002 fd30 	bl	1182c <memset>
	return 1;
    edcc:	2601      	movs	r6, #1
    edce:	e7d8      	b.n	ed82 <sm_set_pool+0x26>

0000edd0 <sqrtf>:
    edd0:	b508      	push	{r3, lr}
    edd2:	ed2d 8b02 	vpush	{d8}
    edd6:	eeb0 8a40 	vmov.f32	s16, s0
    edda:	f000 fb11 	bl	f400 <__ieee754_sqrtf>
    edde:	eeb4 8a48 	vcmp.f32	s16, s16
    ede2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ede6:	d606      	bvs.n	edf6 <sqrtf+0x26>
    ede8:	eddf 8a09 	vldr	s17, [pc, #36]	; ee10 <sqrtf+0x40>
    edec:	eeb4 8ae8 	vcmpe.f32	s16, s17
    edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    edf4:	d402      	bmi.n	edfc <sqrtf+0x2c>
    edf6:	ecbd 8b02 	vpop	{d8}
    edfa:	bd08      	pop	{r3, pc}
    edfc:	f002 f984 	bl	11108 <__errno>
    ee00:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    ee04:	ecbd 8b02 	vpop	{d8}
    ee08:	2321      	movs	r3, #33	; 0x21
    ee0a:	6003      	str	r3, [r0, #0]
    ee0c:	bd08      	pop	{r3, pc}
    ee0e:	bf00      	nop
	...

0000ee18 <pow>:
    ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee1c:	ec5b ab10 	vmov	sl, fp, d0
    ee20:	ed2d 8b0a 	vpush	{d8-d12}
    ee24:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    ee28:	ee11 ea90 	vmov	lr, s3
    ee2c:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    ee30:	f240 70fd 	movw	r0, #2045	; 0x7fd
    ee34:	4286      	cmp	r6, r0
    ee36:	ee10 1a10 	vmov	r1, s0
    ee3a:	ee11 3a10 	vmov	r3, s2
    ee3e:	b089      	sub	sp, #36	; 0x24
    ee40:	465a      	mov	r2, fp
    ee42:	4665      	mov	r5, ip
    ee44:	ea4f 541e 	mov.w	r4, lr, lsr #20
    ee48:	f200 80c6 	bhi.w	efd8 <pow+0x1c0>
    ee4c:	f3c4 060a 	ubfx	r6, r4, #0, #11
    ee50:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    ee54:	2e7f      	cmp	r6, #127	; 0x7f
    ee56:	bf98      	it	ls
    ee58:	2000      	movls	r0, #0
    ee5a:	f200 80bd 	bhi.w	efd8 <pow+0x1c0>
    ee5e:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    ee62:	4ce1      	ldr	r4, [pc, #900]	; (f1e8 <pow+0x3d0>)
    ee64:	4be1      	ldr	r3, [pc, #900]	; (f1ec <pow+0x3d4>)
    ee66:	4414      	add	r4, r2
    ee68:	f3c4 3546 	ubfx	r5, r4, #13, #7
    ee6c:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    ee70:	ed93 6b00 	vldr	d6, [r3]
    ee74:	ed93 7b02 	vldr	d7, [r3, #8]
    ee78:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    ee7c:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    ee80:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    ee84:	0d26      	lsrs	r6, r4, #20
    ee86:	1524      	asrs	r4, r4, #20
    ee88:	ee05 4a90 	vmov	s11, r4
    ee8c:	0536      	lsls	r6, r6, #20
    ee8e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    ee92:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    ee96:	1b95      	subs	r5, r2, r6
    ee98:	eea5 2b06 	vfma.f64	d2, d5, d6
    ee9c:	eea5 9b07 	vfma.f64	d9, d5, d7
    eea0:	ed93 ab04 	vldr	d10, [r3, #16]
    eea4:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    eea8:	ed93 bb08 	vldr	d11, [r3, #32]
    eeac:	ed93 7b06 	vldr	d7, [r3, #24]
    eeb0:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    eeb4:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    eeb8:	1e0c      	subs	r4, r1, #0
    eeba:	ec45 4b1c 	vmov	d12, r4, r5
    eebe:	eeac 0b08 	vfma.f64	d0, d12, d8
    eec2:	eea0 3b05 	vfma.f64	d3, d0, d5
    eec6:	eea0 6b04 	vfma.f64	d6, d0, d4
    eeca:	ee20 5b0a 	vmul.f64	d5, d0, d10
    eece:	ee30 4b02 	vadd.f64	d4, d0, d2
    eed2:	ee20 8b05 	vmul.f64	d8, d0, d5
    eed6:	eea0 7b0b 	vfma.f64	d7, d0, d11
    eeda:	eea8 6b03 	vfma.f64	d6, d8, d3
    eede:	ee32 2b44 	vsub.f64	d2, d2, d4
    eee2:	eea8 7b06 	vfma.f64	d7, d8, d6
    eee6:	ee32 2b00 	vadd.f64	d2, d2, d0
    eeea:	eeb0 3b48 	vmov.f64	d3, d8
    eeee:	ee39 2b02 	vadd.f64	d2, d9, d2
    eef2:	ee95 3b00 	vfnms.f64	d3, d5, d0
    eef6:	ee34 5b08 	vadd.f64	d5, d4, d8
    eefa:	ee20 0b08 	vmul.f64	d0, d0, d8
    eefe:	ee34 4b45 	vsub.f64	d4, d4, d5
    ef02:	ee32 6b03 	vadd.f64	d6, d2, d3
    ef06:	ee34 4b08 	vadd.f64	d4, d4, d8
    ef0a:	ee36 6b04 	vadd.f64	d6, d6, d4
    ef0e:	eea0 6b07 	vfma.f64	d6, d0, d7
    ef12:	ee35 4b06 	vadd.f64	d4, d5, d6
    ef16:	ee21 8b04 	vmul.f64	d8, d1, d4
    ef1a:	ee18 2a90 	vmov	r2, s17
    ef1e:	eeb0 7b48 	vmov.f64	d7, d8
    ef22:	f3c2 550a 	ubfx	r5, r2, #20, #11
    ef26:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    ef2a:	18eb      	adds	r3, r5, r3
    ef2c:	2b3e      	cmp	r3, #62	; 0x3e
    ef2e:	ee91 7b04 	vfnms.f64	d7, d1, d4
    ef32:	ee35 5b44 	vsub.f64	d5, d5, d4
    ef36:	ee35 5b06 	vadd.f64	d5, d5, d6
    ef3a:	eea1 7b05 	vfma.f64	d7, d1, d5
    ef3e:	f200 8093 	bhi.w	f068 <pow+0x250>
    ef42:	4bab      	ldr	r3, [pc, #684]	; (f1f0 <pow+0x3d8>)
    ef44:	ed93 4b02 	vldr	d4, [r3, #8]
    ef48:	ed93 5b00 	vldr	d5, [r3]
    ef4c:	eeb0 1b44 	vmov.f64	d1, d4
    ef50:	ed93 2b04 	vldr	d2, [r3, #16]
    ef54:	eea8 1b05 	vfma.f64	d1, d8, d5
    ef58:	ed93 6b06 	vldr	d6, [r3, #24]
    ef5c:	ee11 1a10 	vmov	r1, s2
    ef60:	ee31 1b44 	vsub.f64	d1, d1, d4
    ef64:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ef68:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    ef6c:	eea1 8b02 	vfma.f64	d8, d1, d2
    ef70:	eea1 8b06 	vfma.f64	d8, d1, d6
    ef74:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    ef78:	ee37 7b08 	vadd.f64	d7, d7, d8
    ef7c:	ee27 2b07 	vmul.f64	d2, d7, d7
    ef80:	1892      	adds	r2, r2, r2
    ef82:	f102 040f 	add.w	r4, r2, #15
    ef86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ef8a:	eea7 6b04 	vfma.f64	d6, d7, d4
    ef8e:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    ef92:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    ef96:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    ef9a:	ed93 5b08 	vldr	d5, [r3, #32]
    ef9e:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    efa2:	6857      	ldr	r7, [r2, #4]
    efa4:	eea7 5b03 	vfma.f64	d5, d7, d3
    efa8:	1840      	adds	r0, r0, r1
    efaa:	2400      	movs	r4, #0
    efac:	ee22 3b02 	vmul.f64	d3, d2, d2
    efb0:	ee37 7b04 	vadd.f64	d7, d7, d4
    efb4:	19a2      	adds	r2, r4, r6
    efb6:	eea2 7b05 	vfma.f64	d7, d2, d5
    efba:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    efbe:	eea3 7b06 	vfma.f64	d7, d3, d6
    efc2:	2d00      	cmp	r5, #0
    efc4:	d05f      	beq.n	f086 <pow+0x26e>
    efc6:	ec43 2b10 	vmov	d0, r2, r3
    efca:	eea7 0b00 	vfma.f64	d0, d7, d0
    efce:	b009      	add	sp, #36	; 0x24
    efd0:	ecbd 8b0a 	vpop	{d8-d12}
    efd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efd8:	18d8      	adds	r0, r3, r3
    efda:	eb4e 090e 	adc.w	r9, lr, lr
    efde:	1e46      	subs	r6, r0, #1
    efe0:	4637      	mov	r7, r6
    efe2:	f06f 0801 	mvn.w	r8, #1
    efe6:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
    efea:	45b8      	cmp	r8, r7
    efec:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    eff0:	eb77 0606 	sbcs.w	r6, r7, r6
    eff4:	f0c0 8120 	bcc.w	f238 <pow+0x420>
    eff8:	1848      	adds	r0, r1, r1
    effa:	eb42 0902 	adc.w	r9, r2, r2
    effe:	1e46      	subs	r6, r0, #1
    f000:	4637      	mov	r7, r6
    f002:	f169 0600 	sbc.w	r6, r9, #0
    f006:	45b8      	cmp	r8, r7
    f008:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f00c:	eb77 0606 	sbcs.w	r6, r7, r6
    f010:	f0c0 8139 	bcc.w	f286 <pow+0x46e>
    f014:	2a00      	cmp	r2, #0
    f016:	db6a      	blt.n	f0ee <pow+0x2d6>
    f018:	2000      	movs	r0, #0
    f01a:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f01e:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    f022:	2b7f      	cmp	r3, #127	; 0x7f
    f024:	f240 77ff 	movw	r7, #2047	; 0x7ff
    f028:	d94f      	bls.n	f0ca <pow+0x2b2>
    f02a:	4b72      	ldr	r3, [pc, #456]	; (f1f4 <pow+0x3dc>)
    f02c:	2000      	movs	r0, #0
    f02e:	429a      	cmp	r2, r3
    f030:	bf08      	it	eq
    f032:	4281      	cmpeq	r1, r0
    f034:	f000 80fd 	beq.w	f232 <pow+0x41a>
    f038:	f240 35bd 	movw	r5, #957	; 0x3bd
    f03c:	42ae      	cmp	r6, r5
    f03e:	f240 8091 	bls.w	f164 <pow+0x34c>
    f042:	2901      	cmp	r1, #1
    f044:	eb72 0303 	sbcs.w	r3, r2, r3
    f048:	bf34      	ite	cc
    f04a:	2301      	movcc	r3, #1
    f04c:	2300      	movcs	r3, #0
    f04e:	42bc      	cmp	r4, r7
    f050:	bf8c      	ite	hi
    f052:	2400      	movhi	r4, #0
    f054:	2401      	movls	r4, #1
    f056:	42a3      	cmp	r3, r4
    f058:	d10e      	bne.n	f078 <pow+0x260>
    f05a:	b009      	add	sp, #36	; 0x24
    f05c:	ecbd 8b0a 	vpop	{d8-d12}
    f060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f064:	f000 bc30 	b.w	f8c8 <__math_uflow>
    f068:	2b00      	cmp	r3, #0
    f06a:	f2c0 80ce 	blt.w	f20a <pow+0x3f2>
    f06e:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    f072:	d975      	bls.n	f160 <pow+0x348>
    f074:	2a00      	cmp	r2, #0
    f076:	dbf0      	blt.n	f05a <pow+0x242>
    f078:	b009      	add	sp, #36	; 0x24
    f07a:	ecbd 8b0a 	vpop	{d8-d12}
    f07e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f082:	f000 bc29 	b.w	f8d8 <__math_oflow>
    f086:	42a1      	cmp	r1, r4
    f088:	f280 8113 	bge.w	f2b2 <pow+0x49a>
    f08c:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f090:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    f094:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    f098:	4610      	mov	r0, r2
    f09a:	ec41 0b15 	vmov	d5, r0, r1
    f09e:	ee27 7b05 	vmul.f64	d7, d7, d5
    f0a2:	ee35 6b07 	vadd.f64	d6, d5, d7
    f0a6:	eeb0 4bc6 	vabs.f64	d4, d6
    f0aa:	eeb4 4bc3 	vcmpe.f64	d4, d3
    f0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f0b2:	d461      	bmi.n	f178 <pow+0x360>
    f0b4:	ed9f 0b48 	vldr	d0, [pc, #288]	; f1d8 <pow+0x3c0>
    f0b8:	ee26 0b00 	vmul.f64	d0, d6, d0
    f0bc:	b009      	add	sp, #36	; 0x24
    f0be:	ecbd 8b0a 	vpop	{d8-d12}
    f0c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f0c6:	f000 bc37 	b.w	f938 <__math_check_uflow>
    f0ca:	2d00      	cmp	r5, #0
    f0cc:	f47f aec7 	bne.w	ee5e <pow+0x46>
    f0d0:	ed9f 7b43 	vldr	d7, [pc, #268]	; f1e0 <pow+0x3c8>
    f0d4:	ec4b ab16 	vmov	d6, sl, fp
    f0d8:	ee26 7b07 	vmul.f64	d7, d6, d7
    f0dc:	ec53 2b17 	vmov	r2, r3, d7
    f0e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f0e4:	ee17 1a10 	vmov	r1, s14
    f0e8:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    f0ec:	e6b7      	b.n	ee5e <pow+0x46>
    f0ee:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f0f2:	f240 30fe 	movw	r0, #1022	; 0x3fe
    f0f6:	4286      	cmp	r6, r0
    f0f8:	dd7e      	ble.n	f1f8 <pow+0x3e0>
    f0fa:	f240 4033 	movw	r0, #1075	; 0x433
    f0fe:	4286      	cmp	r6, r0
    f100:	f300 80fa 	bgt.w	f2f8 <pow+0x4e0>
    f104:	1b80      	subs	r0, r0, r6
    f106:	f1a0 0520 	sub.w	r5, r0, #32
    f10a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f10e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f112:	4087      	lsls	r7, r0
    f114:	fa09 f905 	lsl.w	r9, r9, r5
    f118:	f1c0 0820 	rsb	r8, r0, #32
    f11c:	9501      	str	r5, [sp, #4]
    f11e:	ea47 0509 	orr.w	r5, r7, r9
    f122:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f126:	fa27 f908 	lsr.w	r9, r7, r8
    f12a:	ea45 0509 	orr.w	r5, r5, r9
    f12e:	4087      	lsls	r7, r0
    f130:	ea23 0707 	bic.w	r7, r3, r7
    f134:	ea2e 0505 	bic.w	r5, lr, r5
    f138:	433d      	orrs	r5, r7
    f13a:	d15d      	bne.n	f1f8 <pow+0x3e0>
    f13c:	9d01      	ldr	r5, [sp, #4]
    f13e:	40c3      	lsrs	r3, r0
    f140:	fa0e f808 	lsl.w	r8, lr, r8
    f144:	ea43 0308 	orr.w	r3, r3, r8
    f148:	fa2e fe05 	lsr.w	lr, lr, r5
    f14c:	ea43 030e 	orr.w	r3, r3, lr
    f150:	f003 0301 	and.w	r3, r3, #1
    f154:	0498      	lsls	r0, r3, #18
    f156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f15a:	f3cc 050a 	ubfx	r5, ip, #0, #11
    f15e:	e75e      	b.n	f01e <pow+0x206>
    f160:	2500      	movs	r5, #0
    f162:	e6ee      	b.n	ef42 <pow+0x12a>
    f164:	4288      	cmp	r0, r1
    f166:	4193      	sbcs	r3, r2
    f168:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f16c:	bf34      	ite	cc
    f16e:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    f172:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    f176:	e72a      	b.n	efce <pow+0x1b6>
    f178:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    f17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f180:	ee35 5b46 	vsub.f64	d5, d5, d6
    f184:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    f188:	ee35 5b07 	vadd.f64	d5, d5, d7
    f18c:	bf58      	it	pl
    f18e:	eeb0 4b43 	vmovpl.f64	d4, d3
    f192:	ee36 3b04 	vadd.f64	d3, d6, d4
    f196:	ee34 7b43 	vsub.f64	d7, d4, d3
    f19a:	ee37 7b06 	vadd.f64	d7, d7, d6
    f19e:	ee37 7b05 	vadd.f64	d7, d7, d5
    f1a2:	ee37 7b03 	vadd.f64	d7, d7, d3
    f1a6:	ee37 6b44 	vsub.f64	d6, d7, d4
    f1aa:	eeb5 6b40 	vcmp.f64	d6, #0.0
    f1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1b2:	d104      	bne.n	f1be <pow+0x3a6>
    f1b4:	462a      	mov	r2, r5
    f1b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f1ba:	ec43 2b16 	vmov	d6, r2, r3
    f1be:	ed9f 5b06 	vldr	d5, [pc, #24]	; f1d8 <pow+0x3c0>
    f1c2:	ed8d 5b04 	vstr	d5, [sp, #16]
    f1c6:	ed9d 7b04 	vldr	d7, [sp, #16]
    f1ca:	ee27 7b05 	vmul.f64	d7, d7, d5
    f1ce:	ed8d 7b06 	vstr	d7, [sp, #24]
    f1d2:	e76f      	b.n	f0b4 <pow+0x29c>
    f1d4:	f3af 8000 	nop.w
    f1d8:	00000000 	.word	0x00000000
    f1dc:	00100000 	.word	0x00100000
    f1e0:	00000000 	.word	0x00000000
    f1e4:	43300000 	.word	0x43300000
    f1e8:	c0196aab 	.word	0xc0196aab
    f1ec:	20000c20 	.word	0x20000c20
    f1f0:	200002c0 	.word	0x200002c0
    f1f4:	3ff00000 	.word	0x3ff00000
    f1f8:	ec4b ab10 	vmov	d0, sl, fp
    f1fc:	b009      	add	sp, #36	; 0x24
    f1fe:	ecbd 8b0a 	vpop	{d8-d12}
    f202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f206:	f000 bb87 	b.w	f918 <__math_invalid>
    f20a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f20e:	ee38 0b00 	vadd.f64	d0, d8, d0
    f212:	2800      	cmp	r0, #0
    f214:	f43f aedb 	beq.w	efce <pow+0x1b6>
    f218:	eeb1 0b40 	vneg.f64	d0, d0
    f21c:	e6d7      	b.n	efce <pow+0x1b6>
    f21e:	1849      	adds	r1, r1, r1
    f220:	4b59      	ldr	r3, [pc, #356]	; (f388 <pow+0x570>)
    f222:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    f226:	f04f 0000 	mov.w	r0, #0
    f22a:	4152      	adcs	r2, r2
    f22c:	4288      	cmp	r0, r1
    f22e:	4193      	sbcs	r3, r2
    f230:	d35d      	bcc.n	f2ee <pow+0x4d6>
    f232:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f236:	e6ca      	b.n	efce <pow+0x1b6>
    f238:	ea50 0409 	orrs.w	r4, r0, r9
    f23c:	d0ef      	beq.n	f21e <pow+0x406>
    f23e:	4c53      	ldr	r4, [pc, #332]	; (f38c <pow+0x574>)
    f240:	2500      	movs	r5, #0
    f242:	42a2      	cmp	r2, r4
    f244:	bf08      	it	eq
    f246:	42a9      	cmpeq	r1, r5
    f248:	d047      	beq.n	f2da <pow+0x4c2>
    f24a:	1849      	adds	r1, r1, r1
    f24c:	4b50      	ldr	r3, [pc, #320]	; (f390 <pow+0x578>)
    f24e:	4152      	adcs	r2, r2
    f250:	428d      	cmp	r5, r1
    f252:	eb73 0402 	sbcs.w	r4, r3, r2
    f256:	d34a      	bcc.n	f2ee <pow+0x4d6>
    f258:	4599      	cmp	r9, r3
    f25a:	bf08      	it	eq
    f25c:	42a8      	cmpeq	r0, r5
    f25e:	d146      	bne.n	f2ee <pow+0x4d6>
    f260:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    f264:	429a      	cmp	r2, r3
    f266:	bf08      	it	eq
    f268:	42a9      	cmpeq	r1, r5
    f26a:	d0e2      	beq.n	f232 <pow+0x41a>
    f26c:	429a      	cmp	r2, r3
    f26e:	ea6f 0e0e 	mvn.w	lr, lr
    f272:	bf34      	ite	cc
    f274:	2200      	movcc	r2, #0
    f276:	2201      	movcs	r2, #1
    f278:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    f27c:	4572      	cmp	r2, lr
    f27e:	d077      	beq.n	f370 <pow+0x558>
    f280:	ed9f 0b3d 	vldr	d0, [pc, #244]	; f378 <pow+0x560>
    f284:	e6a3      	b.n	efce <pow+0x1b6>
    f286:	ec4b ab17 	vmov	d7, sl, fp
    f28a:	2a00      	cmp	r2, #0
    f28c:	ee27 0b07 	vmul.f64	d0, d7, d7
    f290:	db34      	blt.n	f2fc <pow+0x4e4>
    f292:	2200      	movs	r2, #0
    f294:	ea50 0909 	orrs.w	r9, r0, r9
    f298:	d15d      	bne.n	f356 <pow+0x53e>
    f29a:	f1be 0f00 	cmp.w	lr, #0
    f29e:	f6bf ae96 	bge.w	efce <pow+0x1b6>
    f2a2:	4610      	mov	r0, r2
    f2a4:	b009      	add	sp, #36	; 0x24
    f2a6:	ecbd 8b0a 	vpop	{d8-d12}
    f2aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2ae:	f000 bb1b 	b.w	f8e8 <__math_divzero>
    f2b2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    f2b6:	ed9f 6b32 	vldr	d6, [pc, #200]	; f380 <pow+0x568>
    f2ba:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    f2be:	4610      	mov	r0, r2
    f2c0:	ec41 0b10 	vmov	d0, r0, r1
    f2c4:	eea7 0b00 	vfma.f64	d0, d7, d0
    f2c8:	ee20 0b06 	vmul.f64	d0, d0, d6
    f2cc:	b009      	add	sp, #36	; 0x24
    f2ce:	ecbd 8b0a 	vpop	{d8-d12}
    f2d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2d6:	f000 bb3b 	b.w	f950 <__math_check_oflow>
    f2da:	18db      	adds	r3, r3, r3
    f2dc:	4a2a      	ldr	r2, [pc, #168]	; (f388 <pow+0x570>)
    f2de:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    f2e2:	eb4e 0e0e 	adc.w	lr, lr, lr
    f2e6:	429d      	cmp	r5, r3
    f2e8:	eb72 020e 	sbcs.w	r2, r2, lr
    f2ec:	d2a1      	bcs.n	f232 <pow+0x41a>
    f2ee:	ec4b ab17 	vmov	d7, sl, fp
    f2f2:	ee37 0b01 	vadd.f64	d0, d7, d1
    f2f6:	e66a      	b.n	efce <pow+0x1b6>
    f2f8:	2000      	movs	r0, #0
    f2fa:	e72c      	b.n	f156 <pow+0x33e>
    f2fc:	f3c4 020a 	ubfx	r2, r4, #0, #11
    f300:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    f304:	2934      	cmp	r1, #52	; 0x34
    f306:	d8c4      	bhi.n	f292 <pow+0x47a>
    f308:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    f30c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f310:	f1a2 051d 	sub.w	r5, r2, #29
    f314:	3203      	adds	r2, #3
    f316:	fa01 f705 	lsl.w	r7, r1, r5
    f31a:	fa01 f402 	lsl.w	r4, r1, r2
    f31e:	f1c2 0620 	rsb	r6, r2, #32
    f322:	433c      	orrs	r4, r7
    f324:	fa21 f706 	lsr.w	r7, r1, r6
    f328:	433c      	orrs	r4, r7
    f32a:	4091      	lsls	r1, r2
    f32c:	ea23 0101 	bic.w	r1, r3, r1
    f330:	ea2e 0404 	bic.w	r4, lr, r4
    f334:	4321      	orrs	r1, r4
    f336:	d1ac      	bne.n	f292 <pow+0x47a>
    f338:	fa23 f202 	lsr.w	r2, r3, r2
    f33c:	fa0e f606 	lsl.w	r6, lr, r6
    f340:	4332      	orrs	r2, r6
    f342:	fa2e f505 	lsr.w	r5, lr, r5
    f346:	432a      	orrs	r2, r5
    f348:	f012 0201 	ands.w	r2, r2, #1
    f34c:	d0a2      	beq.n	f294 <pow+0x47c>
    f34e:	eeb1 0b40 	vneg.f64	d0, d0
    f352:	2201      	movs	r2, #1
    f354:	e79e      	b.n	f294 <pow+0x47c>
    f356:	f1be 0f00 	cmp.w	lr, #0
    f35a:	f6bf ae38 	bge.w	efce <pow+0x1b6>
    f35e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f362:	ee86 7b00 	vdiv.f64	d7, d6, d0
    f366:	ed8d 7b02 	vstr	d7, [sp, #8]
    f36a:	ed9d 0b02 	vldr	d0, [sp, #8]
    f36e:	e62e      	b.n	efce <pow+0x1b6>
    f370:	ee21 0b01 	vmul.f64	d0, d1, d1
    f374:	e62b      	b.n	efce <pow+0x1b6>
    f376:	bf00      	nop
	...
    f384:	7f000000 	.word	0x7f000000
    f388:	fff00000 	.word	0xfff00000
    f38c:	3ff00000 	.word	0x3ff00000
    f390:	ffe00000 	.word	0xffe00000

0000f394 <asinf>:
    f394:	b508      	push	{r3, lr}
    f396:	ed2d 8b02 	vpush	{d8}
    f39a:	eeb0 8a40 	vmov.f32	s16, s0
    f39e:	f000 fbe3 	bl	fb68 <__ieee754_asinf>
    f3a2:	eeb4 8a48 	vcmp.f32	s16, s16
    f3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3aa:	eef0 8a40 	vmov.f32	s17, s0
    f3ae:	d60a      	bvs.n	f3c6 <asinf+0x32>
    f3b0:	eeb0 0a48 	vmov.f32	s0, s16
    f3b4:	f000 f81c 	bl	f3f0 <fabsf>
    f3b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f3bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
    f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3c4:	dc04      	bgt.n	f3d0 <asinf+0x3c>
    f3c6:	eeb0 0a68 	vmov.f32	s0, s17
    f3ca:	ecbd 8b02 	vpop	{d8}
    f3ce:	bd08      	pop	{r3, pc}
    f3d0:	f001 fe9a 	bl	11108 <__errno>
    f3d4:	ecbd 8b02 	vpop	{d8}
    f3d8:	4603      	mov	r3, r0
    f3da:	2221      	movs	r2, #33	; 0x21
    f3dc:	601a      	str	r2, [r3, #0]
    f3de:	4802      	ldr	r0, [pc, #8]	; (f3e8 <asinf+0x54>)
    f3e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f3e4:	f000 bac8 	b.w	f978 <nanf>
    f3e8:	20002090 	.word	0x20002090

0000f3ec <atan2f>:
    f3ec:	f000 bcc2 	b.w	fd74 <__ieee754_atan2f>

0000f3f0 <fabsf>:
    f3f0:	ee10 3a10 	vmov	r3, s0
    f3f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f3f8:	ee00 3a10 	vmov	s0, r3
    f3fc:	4770      	bx	lr
    f3fe:	bf00      	nop

0000f400 <__ieee754_sqrtf>:
    f400:	eeb1 0ac0 	vsqrt.f32	s0, s0
    f404:	4770      	bx	lr
    f406:	bf00      	nop

0000f408 <sinf>:
    f408:	b530      	push	{r4, r5, lr}
    f40a:	ee10 4a10 	vmov	r4, s0
    f40e:	f3c4 530a 	ubfx	r3, r4, #20, #11
    f412:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
    f416:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    f41a:	b083      	sub	sp, #12
    f41c:	d21b      	bcs.n	f456 <sinf+0x4e>
    f41e:	ee26 5b06 	vmul.f64	d5, d6, d6
    f422:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
    f426:	d36e      	bcc.n	f506 <sinf+0xfe>
    f428:	ee26 2b05 	vmul.f64	d2, d6, d5
    f42c:	ee25 1b02 	vmul.f64	d1, d5, d2
    f430:	4b73      	ldr	r3, [pc, #460]	; (f600 <sinf+0x1f8>)
    f432:	ed93 3b1a 	vldr	d3, [r3, #104]	; 0x68
    f436:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
    f43a:	ed93 4b16 	vldr	d4, [r3, #88]	; 0x58
    f43e:	eea5 7b03 	vfma.f64	d7, d5, d3
    f442:	eea2 6b04 	vfma.f64	d6, d2, d4
    f446:	eeb0 0b46 	vmov.f64	d0, d6
    f44a:	eea7 0b01 	vfma.f64	d0, d7, d1
    f44e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f452:	b003      	add	sp, #12
    f454:	bd30      	pop	{r4, r5, pc}
    f456:	f240 422e 	movw	r2, #1070	; 0x42e
    f45a:	4293      	cmp	r3, r2
    f45c:	d85e      	bhi.n	f51c <sinf+0x114>
    f45e:	4968      	ldr	r1, [pc, #416]	; (f600 <sinf+0x1f8>)
    f460:	ed91 7b08 	vldr	d7, [r1, #32]
    f464:	ee26 7b07 	vmul.f64	d7, d6, d7
    f468:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    f46c:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
    f470:	ee17 3a90 	vmov	r3, s15
    f474:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
    f478:	161b      	asrs	r3, r3, #24
    f47a:	f013 0f02 	tst.w	r3, #2
    f47e:	ee07 3a90 	vmov	s15, r3
    f482:	f101 0270 	add.w	r2, r1, #112	; 0x70
    f486:	bf08      	it	eq
    f488:	460a      	moveq	r2, r1
    f48a:	07d8      	lsls	r0, r3, #31
    f48c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    f490:	eea7 6b45 	vfms.f64	d6, d7, d5
    f494:	ee26 7b06 	vmul.f64	d7, d6, d6
    f498:	d41b      	bmi.n	f4d2 <sinf+0xca>
    f49a:	f003 0303 	and.w	r3, r3, #3
    f49e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    f4a2:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
    f4a6:	ed91 2b00 	vldr	d2, [r1]
    f4aa:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
    f4ae:	ee26 6b02 	vmul.f64	d6, d6, d2
    f4b2:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
    f4b6:	eea7 5b04 	vfma.f64	d5, d7, d4
    f4ba:	ee26 4b07 	vmul.f64	d4, d6, d7
    f4be:	ee27 7b04 	vmul.f64	d7, d7, d4
    f4c2:	eea4 6b03 	vfma.f64	d6, d4, d3
    f4c6:	eea5 6b07 	vfma.f64	d6, d5, d7
    f4ca:	eeb7 0bc6 	vcvt.f32.f64	s0, d6
    f4ce:	b003      	add	sp, #12
    f4d0:	bd30      	pop	{r4, r5, pc}
    f4d2:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
    f4d6:	ee27 5b07 	vmul.f64	d5, d7, d7
    f4da:	ed92 6b12 	vldr	d6, [r2, #72]	; 0x48
    f4de:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
    f4e2:	eea7 6b02 	vfma.f64	d6, d7, d2
    f4e6:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
    f4ea:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
    f4ee:	eea7 0b03 	vfma.f64	d0, d7, d3
    f4f2:	ee27 7b05 	vmul.f64	d7, d7, d5
    f4f6:	eea5 0b04 	vfma.f64	d0, d5, d4
    f4fa:	eea6 0b07 	vfma.f64	d0, d6, d7
    f4fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f502:	b003      	add	sp, #12
    f504:	bd30      	pop	{r4, r5, pc}
    f506:	0d22      	lsrs	r2, r4, #20
    f508:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
    f50c:	d1df      	bne.n	f4ce <sinf+0xc6>
    f50e:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    f512:	ee00 4a10 	vmov	s0, r4
    f516:	ed8d 5a01 	vstr	s10, [sp, #4]
    f51a:	e7d8      	b.n	f4ce <sinf+0xc6>
    f51c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    f520:	d24b      	bcs.n	f5ba <sinf+0x1b2>
    f522:	4b38      	ldr	r3, [pc, #224]	; (f604 <sinf+0x1fc>)
    f524:	f3c4 6283 	ubfx	r2, r4, #26, #4
    f528:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    f52c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    f530:	6905      	ldr	r5, [r0, #16]
    f532:	f3c4 0316 	ubfx	r3, r4, #0, #23
    f536:	f3c4 51c2 	ubfx	r1, r4, #23, #3
    f53a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    f53e:	408b      	lsls	r3, r1
    f540:	6a01      	ldr	r1, [r0, #32]
    f542:	fb03 f202 	mul.w	r2, r3, r2
    f546:	fba3 1001 	umull	r1, r0, r3, r1
    f54a:	fbe3 0205 	umlal	r0, r2, r3, r5
    f54e:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
    f552:	0f8d      	lsrs	r5, r1, #30
    f554:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
    f558:	1a51      	subs	r1, r2, r1
    f55a:	f001 fccb 	bl	10ef4 <__aeabi_l2d>
    f55e:	4b2a      	ldr	r3, [pc, #168]	; (f608 <sinf+0x200>)
    f560:	ed9f 7b25 	vldr	d7, [pc, #148]	; f5f8 <sinf+0x1f0>
    f564:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
    f568:	ec41 0b16 	vmov	d6, r0, r1
    f56c:	f014 0f02 	tst.w	r4, #2
    f570:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
    f574:	bf08      	it	eq
    f576:	4613      	moveq	r3, r2
    f578:	07e9      	lsls	r1, r5, #31
    f57a:	ee26 7b07 	vmul.f64	d7, d6, d7
    f57e:	ee27 6b07 	vmul.f64	d6, d7, d7
    f582:	d41f      	bmi.n	f5c4 <sinf+0x1bc>
    f584:	f004 0403 	and.w	r4, r4, #3
    f588:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    f58c:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
    f590:	ed92 2b00 	vldr	d2, [r2]
    f594:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
    f598:	ee27 7b02 	vmul.f64	d7, d7, d2
    f59c:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
    f5a0:	eea6 5b04 	vfma.f64	d5, d6, d4
    f5a4:	ee27 4b06 	vmul.f64	d4, d7, d6
    f5a8:	ee26 6b04 	vmul.f64	d6, d6, d4
    f5ac:	eea4 7b03 	vfma.f64	d7, d4, d3
    f5b0:	eea5 7b06 	vfma.f64	d7, d5, d6
    f5b4:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
    f5b8:	e789      	b.n	f4ce <sinf+0xc6>
    f5ba:	b003      	add	sp, #12
    f5bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f5c0:	f000 b910 	b.w	f7e4 <__math_invalidf>
    f5c4:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
    f5c8:	ee26 5b06 	vmul.f64	d5, d6, d6
    f5cc:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
    f5d0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f5d4:	eea6 7b02 	vfma.f64	d7, d6, d2
    f5d8:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
    f5dc:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
    f5e0:	eea6 0b03 	vfma.f64	d0, d6, d3
    f5e4:	ee26 6b05 	vmul.f64	d6, d6, d5
    f5e8:	eea5 0b04 	vfma.f64	d0, d5, d4
    f5ec:	eea7 0b06 	vfma.f64	d0, d7, d6
    f5f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f5f4:	e76b      	b.n	f4ce <sinf+0xc6>
    f5f6:	bf00      	nop
    f5f8:	54442d18 	.word	0x54442d18
    f5fc:	3c1921fb 	.word	0x3c1921fb
    f600:	20001c68 	.word	0x20001c68
    f604:	20002560 	.word	0x20002560
    f608:	20001cd8 	.word	0x20001cd8
    f60c:	00000000 	.word	0x00000000

0000f610 <cosf>:
    f610:	b538      	push	{r3, r4, r5, lr}
    f612:	ee10 4a10 	vmov	r4, s0
    f616:	f3c4 530a 	ubfx	r3, r4, #20, #11
    f61a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
    f61e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    f622:	d21e      	bcs.n	f662 <cosf+0x52>
    f624:	ee27 7b07 	vmul.f64	d7, d7, d7
    f628:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
    f62c:	d36f      	bcc.n	f70e <cosf+0xfe>
    f62e:	ee27 1b07 	vmul.f64	d1, d7, d7
    f632:	4b63      	ldr	r3, [pc, #396]	; (f7c0 <cosf+0x1b0>)
    f634:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
    f638:	ed93 5b12 	vldr	d5, [r3, #72]	; 0x48
    f63c:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f640:	eea7 5b02 	vfma.f64	d5, d7, d2
    f644:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
    f648:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
    f64c:	eea7 0b03 	vfma.f64	d0, d7, d3
    f650:	ee27 7b01 	vmul.f64	d7, d7, d1
    f654:	eea1 0b04 	vfma.f64	d0, d1, d4
    f658:	eea5 0b07 	vfma.f64	d0, d5, d7
    f65c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f660:	bd38      	pop	{r3, r4, r5, pc}
    f662:	f240 422e 	movw	r2, #1070	; 0x42e
    f666:	4293      	cmp	r3, r2
    f668:	d854      	bhi.n	f714 <cosf+0x104>
    f66a:	4955      	ldr	r1, [pc, #340]	; (f7c0 <cosf+0x1b0>)
    f66c:	ed91 6b08 	vldr	d6, [r1, #32]
    f670:	ee27 6b06 	vmul.f64	d6, d7, d6
    f674:	eefd 6bc6 	vcvt.s32.f64	s13, d6
    f678:	ed91 5b0a 	vldr	d5, [r1, #40]	; 0x28
    f67c:	ee16 3a90 	vmov	r3, s13
    f680:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
    f684:	161b      	asrs	r3, r3, #24
    f686:	f013 0f02 	tst.w	r3, #2
    f68a:	ee06 3a90 	vmov	s13, r3
    f68e:	f101 0270 	add.w	r2, r1, #112	; 0x70
    f692:	bf08      	it	eq
    f694:	460a      	moveq	r2, r1
    f696:	07d8      	lsls	r0, r3, #31
    f698:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    f69c:	eea6 7b45 	vfms.f64	d7, d6, d5
    f6a0:	ee27 6b07 	vmul.f64	d6, d7, d7
    f6a4:	d51a      	bpl.n	f6dc <cosf+0xcc>
    f6a6:	f003 0303 	and.w	r3, r3, #3
    f6aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    f6ae:	ed91 2b00 	vldr	d2, [r1]
    f6b2:	ed92 4b1a 	vldr	d4, [r2, #104]	; 0x68
    f6b6:	ed92 5b18 	vldr	d5, [r2, #96]	; 0x60
    f6ba:	ed92 3b16 	vldr	d3, [r2, #88]	; 0x58
    f6be:	eea6 5b04 	vfma.f64	d5, d6, d4
    f6c2:	ee27 7b02 	vmul.f64	d7, d7, d2
    f6c6:	ee27 4b06 	vmul.f64	d4, d7, d6
    f6ca:	ee26 6b04 	vmul.f64	d6, d6, d4
    f6ce:	eea4 7b03 	vfma.f64	d7, d4, d3
    f6d2:	eea5 7b06 	vfma.f64	d7, d5, d6
    f6d6:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
    f6da:	bd38      	pop	{r3, r4, r5, pc}
    f6dc:	ed92 2b14 	vldr	d2, [r2, #80]	; 0x50
    f6e0:	ed92 7b12 	vldr	d7, [r2, #72]	; 0x48
    f6e4:	ed92 3b0e 	vldr	d3, [r2, #56]	; 0x38
    f6e8:	ed92 0b0c 	vldr	d0, [r2, #48]	; 0x30
    f6ec:	ed92 4b10 	vldr	d4, [r2, #64]	; 0x40
    f6f0:	ee26 5b06 	vmul.f64	d5, d6, d6
    f6f4:	eea6 7b02 	vfma.f64	d7, d6, d2
    f6f8:	eea6 0b03 	vfma.f64	d0, d6, d3
    f6fc:	ee26 6b05 	vmul.f64	d6, d6, d5
    f700:	eea5 0b04 	vfma.f64	d0, d5, d4
    f704:	eea7 0b06 	vfma.f64	d0, d7, d6
    f708:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f70c:	bd38      	pop	{r3, r4, r5, pc}
    f70e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    f712:	bd38      	pop	{r3, r4, r5, pc}
    f714:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
    f718:	d23d      	bcs.n	f796 <cosf+0x186>
    f71a:	4b2a      	ldr	r3, [pc, #168]	; (f7c4 <cosf+0x1b4>)
    f71c:	f3c4 6283 	ubfx	r2, r4, #26, #4
    f720:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    f724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    f728:	6905      	ldr	r5, [r0, #16]
    f72a:	f3c4 0316 	ubfx	r3, r4, #0, #23
    f72e:	f3c4 51c2 	ubfx	r1, r4, #23, #3
    f732:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    f736:	408b      	lsls	r3, r1
    f738:	6a01      	ldr	r1, [r0, #32]
    f73a:	fb03 f202 	mul.w	r2, r3, r2
    f73e:	fba3 1001 	umull	r1, r0, r3, r1
    f742:	fbe3 0205 	umlal	r0, r2, r3, r5
    f746:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
    f74a:	0f8d      	lsrs	r5, r1, #30
    f74c:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
    f750:	1a51      	subs	r1, r2, r1
    f752:	f001 fbcf 	bl	10ef4 <__aeabi_l2d>
    f756:	4b1c      	ldr	r3, [pc, #112]	; (f7c8 <cosf+0x1b8>)
    f758:	ed9f 7b17 	vldr	d7, [pc, #92]	; f7b8 <cosf+0x1a8>
    f75c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
    f760:	ec41 0b16 	vmov	d6, r0, r1
    f764:	f014 0f02 	tst.w	r4, #2
    f768:	f1a3 0270 	sub.w	r2, r3, #112	; 0x70
    f76c:	bf08      	it	eq
    f76e:	4613      	moveq	r3, r2
    f770:	07e9      	lsls	r1, r5, #31
    f772:	ee26 7b07 	vmul.f64	d7, d6, d7
    f776:	ee27 6b07 	vmul.f64	d6, d7, d7
    f77a:	d510      	bpl.n	f79e <cosf+0x18e>
    f77c:	f004 0403 	and.w	r4, r4, #3
    f780:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    f784:	ed92 2b00 	vldr	d2, [r2]
    f788:	ed93 4b1a 	vldr	d4, [r3, #104]	; 0x68
    f78c:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
    f790:	ed93 3b16 	vldr	d3, [r3, #88]	; 0x58
    f794:	e793      	b.n	f6be <cosf+0xae>
    f796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f79a:	f000 b823 	b.w	f7e4 <__math_invalidf>
    f79e:	ed93 2b14 	vldr	d2, [r3, #80]	; 0x50
    f7a2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
    f7a6:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f7aa:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
    f7ae:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
    f7b2:	e79d      	b.n	f6f0 <cosf+0xe0>
    f7b4:	f3af 8000 	nop.w
    f7b8:	54442d18 	.word	0x54442d18
    f7bc:	3c1921fb 	.word	0x3c1921fb
    f7c0:	20001c68 	.word	0x20001c68
    f7c4:	20002560 	.word	0x20002560
    f7c8:	20001cd8 	.word	0x20001cd8

0000f7cc <with_errnof>:
    f7cc:	b510      	push	{r4, lr}
    f7ce:	b082      	sub	sp, #8
    f7d0:	ed8d 0a01 	vstr	s0, [sp, #4]
    f7d4:	4604      	mov	r4, r0
    f7d6:	f001 fc97 	bl	11108 <__errno>
    f7da:	ed9d 0a01 	vldr	s0, [sp, #4]
    f7de:	6004      	str	r4, [r0, #0]
    f7e0:	b002      	add	sp, #8
    f7e2:	bd10      	pop	{r4, pc}

0000f7e4 <__math_invalidf>:
    f7e4:	ee70 7a40 	vsub.f32	s15, s0, s0
    f7e8:	eeb4 0a40 	vcmp.f32	s0, s0
    f7ec:	ee87 7aa7 	vdiv.f32	s14, s15, s15
    f7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7f4:	eeb0 0a47 	vmov.f32	s0, s14
    f7f8:	d602      	bvs.n	f800 <__math_invalidf+0x1c>
    f7fa:	2021      	movs	r0, #33	; 0x21
    f7fc:	f7ff bfe6 	b.w	f7cc <with_errnof>
    f800:	4770      	bx	lr
    f802:	bf00      	nop
    f804:	0000      	movs	r0, r0
	...

0000f808 <sin>:
    f808:	eeb0 7b40 	vmov.f64	d7, d0
    f80c:	ee17 3a90 	vmov	r3, s15
    f810:	4a1b      	ldr	r2, [pc, #108]	; (f880 <sin+0x78>)
    f812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f816:	4293      	cmp	r3, r2
    f818:	dd1c      	ble.n	f854 <sin+0x4c>
    f81a:	4a1a      	ldr	r2, [pc, #104]	; (f884 <sin+0x7c>)
    f81c:	4293      	cmp	r3, r2
    f81e:	dd02      	ble.n	f826 <sin+0x1e>
    f820:	ee30 0b40 	vsub.f64	d0, d0, d0
    f824:	4770      	bx	lr
    f826:	b500      	push	{lr}
    f828:	b085      	sub	sp, #20
    f82a:	4668      	mov	r0, sp
    f82c:	f000 fc20 	bl	10070 <__ieee754_rem_pio2>
    f830:	f000 0003 	and.w	r0, r0, #3
    f834:	2801      	cmp	r0, #1
    f836:	ed9d 1b02 	vldr	d1, [sp, #8]
    f83a:	ed9d 0b00 	vldr	d0, [sp]
    f83e:	d00e      	beq.n	f85e <sin+0x56>
    f840:	2802      	cmp	r0, #2
    f842:	d013      	beq.n	f86c <sin+0x64>
    f844:	b170      	cbz	r0, f864 <sin+0x5c>
    f846:	f000 f89f 	bl	f988 <__kernel_cos>
    f84a:	eeb1 0b40 	vneg.f64	d0, d0
    f84e:	b005      	add	sp, #20
    f850:	f85d fb04 	ldr.w	pc, [sp], #4
    f854:	ed9f 1b08 	vldr	d1, [pc, #32]	; f878 <sin+0x70>
    f858:	2000      	movs	r0, #0
    f85a:	f000 b92d 	b.w	fab8 <__kernel_sin>
    f85e:	f000 f893 	bl	f988 <__kernel_cos>
    f862:	e7f4      	b.n	f84e <sin+0x46>
    f864:	2001      	movs	r0, #1
    f866:	f000 f927 	bl	fab8 <__kernel_sin>
    f86a:	e7f0      	b.n	f84e <sin+0x46>
    f86c:	2001      	movs	r0, #1
    f86e:	f000 f923 	bl	fab8 <__kernel_sin>
    f872:	eeb1 0b40 	vneg.f64	d0, d0
    f876:	e7ea      	b.n	f84e <sin+0x46>
	...
    f880:	3fe921fb 	.word	0x3fe921fb
    f884:	7fefffff 	.word	0x7fefffff

0000f888 <with_errno>:
    f888:	b510      	push	{r4, lr}
    f88a:	b082      	sub	sp, #8
    f88c:	ed8d 0b00 	vstr	d0, [sp]
    f890:	4604      	mov	r4, r0
    f892:	f001 fc39 	bl	11108 <__errno>
    f896:	ed9d 0b00 	vldr	d0, [sp]
    f89a:	6004      	str	r4, [r0, #0]
    f89c:	b002      	add	sp, #8
    f89e:	bd10      	pop	{r4, pc}

0000f8a0 <xflow>:
    f8a0:	b082      	sub	sp, #8
    f8a2:	b158      	cbz	r0, f8bc <xflow+0x1c>
    f8a4:	eeb1 7b40 	vneg.f64	d7, d0
    f8a8:	ed8d 7b00 	vstr	d7, [sp]
    f8ac:	ed9d 7b00 	vldr	d7, [sp]
    f8b0:	2022      	movs	r0, #34	; 0x22
    f8b2:	ee20 0b07 	vmul.f64	d0, d0, d7
    f8b6:	b002      	add	sp, #8
    f8b8:	f7ff bfe6 	b.w	f888 <with_errno>
    f8bc:	eeb0 7b40 	vmov.f64	d7, d0
    f8c0:	e7f2      	b.n	f8a8 <xflow+0x8>
    f8c2:	bf00      	nop
    f8c4:	0000      	movs	r0, r0
	...

0000f8c8 <__math_uflow>:
    f8c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; f8d0 <__math_uflow+0x8>
    f8cc:	f7ff bfe8 	b.w	f8a0 <xflow>
    f8d0:	00000000 	.word	0x00000000
    f8d4:	10000000 	.word	0x10000000

0000f8d8 <__math_oflow>:
    f8d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; f8e0 <__math_oflow+0x8>
    f8dc:	f7ff bfe0 	b.w	f8a0 <xflow>
    f8e0:	00000000 	.word	0x00000000
    f8e4:	70000000 	.word	0x70000000

0000f8e8 <__math_divzero>:
    f8e8:	b082      	sub	sp, #8
    f8ea:	2800      	cmp	r0, #0
    f8ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f8f0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    f8f4:	fe06 7b07 	vseleq.f64	d7, d6, d7
    f8f8:	ed8d 7b00 	vstr	d7, [sp]
    f8fc:	ed9d 0b00 	vldr	d0, [sp]
    f900:	ed9f 7b03 	vldr	d7, [pc, #12]	; f910 <__math_divzero+0x28>
    f904:	2022      	movs	r0, #34	; 0x22
    f906:	ee80 0b07 	vdiv.f64	d0, d0, d7
    f90a:	b002      	add	sp, #8
    f90c:	f7ff bfbc 	b.w	f888 <with_errno>
	...

0000f918 <__math_invalid>:
    f918:	eeb4 0b40 	vcmp.f64	d0, d0
    f91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f920:	ee30 7b40 	vsub.f64	d7, d0, d0
    f924:	ee87 6b07 	vdiv.f64	d6, d7, d7
    f928:	eeb0 0b46 	vmov.f64	d0, d6
    f92c:	d602      	bvs.n	f934 <__math_invalid+0x1c>
    f92e:	2021      	movs	r0, #33	; 0x21
    f930:	f7ff bfaa 	b.w	f888 <with_errno>
    f934:	4770      	bx	lr
    f936:	bf00      	nop

0000f938 <__math_check_uflow>:
    f938:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f940:	d000      	beq.n	f944 <__math_check_uflow+0xc>
    f942:	4770      	bx	lr
    f944:	2022      	movs	r0, #34	; 0x22
    f946:	f7ff bf9f 	b.w	f888 <with_errno>
    f94a:	bf00      	nop
    f94c:	0000      	movs	r0, r0
	...

0000f950 <__math_check_oflow>:
    f950:	ed9f 6b07 	vldr	d6, [pc, #28]	; f970 <__math_check_oflow+0x20>
    f954:	eeb0 7bc0 	vabs.f64	d7, d0
    f958:	eeb4 7b46 	vcmp.f64	d7, d6
    f95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f960:	dc00      	bgt.n	f964 <__math_check_oflow+0x14>
    f962:	4770      	bx	lr
    f964:	2022      	movs	r0, #34	; 0x22
    f966:	f7ff bf8f 	b.w	f888 <with_errno>
    f96a:	bf00      	nop
    f96c:	f3af 8000 	nop.w
    f970:	ffffffff 	.word	0xffffffff
    f974:	7fefffff 	.word	0x7fefffff

0000f978 <nanf>:
    f978:	ed9f 0a01 	vldr	s0, [pc, #4]	; f980 <nanf+0x8>
    f97c:	4770      	bx	lr
    f97e:	bf00      	nop
    f980:	7fc00000 	.word	0x7fc00000
    f984:	00000000 	.word	0x00000000

0000f988 <__kernel_cos>:
    f988:	ee10 3a90 	vmov	r3, s1
    f98c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f990:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    f994:	ed2d 8b02 	vpush	{d8}
    f998:	da2e      	bge.n	f9f8 <__kernel_cos+0x70>
    f99a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f99e:	ee17 3a90 	vmov	r3, s15
    f9a2:	2b00      	cmp	r3, #0
    f9a4:	d065      	beq.n	fa72 <__kernel_cos+0xea>
    f9a6:	ee20 4b00 	vmul.f64	d4, d0, d0
    f9aa:	ed9f 8b35 	vldr	d8, [pc, #212]	; fa80 <__kernel_cos+0xf8>
    f9ae:	ed9f 2b36 	vldr	d2, [pc, #216]	; fa88 <__kernel_cos+0x100>
    f9b2:	ed9f 3b37 	vldr	d3, [pc, #220]	; fa90 <__kernel_cos+0x108>
    f9b6:	eea4 2b08 	vfma.f64	d2, d4, d8
    f9ba:	ed9f 5b37 	vldr	d5, [pc, #220]	; fa98 <__kernel_cos+0x110>
    f9be:	eea4 3b02 	vfma.f64	d3, d4, d2
    f9c2:	ed9f 6b37 	vldr	d6, [pc, #220]	; faa0 <__kernel_cos+0x118>
    f9c6:	eea4 5b03 	vfma.f64	d5, d4, d3
    f9ca:	ed9f 7b37 	vldr	d7, [pc, #220]	; faa8 <__kernel_cos+0x120>
    f9ce:	eea4 6b05 	vfma.f64	d6, d4, d5
    f9d2:	eea4 7b06 	vfma.f64	d7, d4, d6
    f9d6:	ee24 7b07 	vmul.f64	d7, d4, d7
    f9da:	ee21 1b40 	vnmul.f64	d1, d1, d0
    f9de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f9e2:	eea4 1b07 	vfma.f64	d1, d4, d7
    f9e6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f9ea:	ee94 1b06 	vfnms.f64	d1, d4, d6
    f9ee:	ecbd 8b02 	vpop	{d8}
    f9f2:	ee30 0b41 	vsub.f64	d0, d0, d1
    f9f6:	4770      	bx	lr
    f9f8:	ed9f 8b21 	vldr	d8, [pc, #132]	; fa80 <__kernel_cos+0xf8>
    f9fc:	ee20 4b00 	vmul.f64	d4, d0, d0
    fa00:	ed9f 2b21 	vldr	d2, [pc, #132]	; fa88 <__kernel_cos+0x100>
    fa04:	ed9f 3b22 	vldr	d3, [pc, #136]	; fa90 <__kernel_cos+0x108>
    fa08:	eea4 2b08 	vfma.f64	d2, d4, d8
    fa0c:	ed9f 5b22 	vldr	d5, [pc, #136]	; fa98 <__kernel_cos+0x110>
    fa10:	eea2 3b04 	vfma.f64	d3, d2, d4
    fa14:	ed9f 6b22 	vldr	d6, [pc, #136]	; faa0 <__kernel_cos+0x118>
    fa18:	eea3 5b04 	vfma.f64	d5, d3, d4
    fa1c:	ed9f 7b22 	vldr	d7, [pc, #136]	; faa8 <__kernel_cos+0x120>
    fa20:	eea5 6b04 	vfma.f64	d6, d5, d4
    fa24:	4a22      	ldr	r2, [pc, #136]	; (fab0 <__kernel_cos+0x128>)
    fa26:	eea6 7b04 	vfma.f64	d7, d6, d4
    fa2a:	4293      	cmp	r3, r2
    fa2c:	ee27 7b04 	vmul.f64	d7, d7, d4
    fa30:	ddd3      	ble.n	f9da <__kernel_cos+0x52>
    fa32:	4a20      	ldr	r2, [pc, #128]	; (fab4 <__kernel_cos+0x12c>)
    fa34:	4293      	cmp	r3, r2
    fa36:	dc17      	bgt.n	fa68 <__kernel_cos+0xe0>
    fa38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fa3c:	2000      	movs	r0, #0
    fa3e:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
    fa42:	ec41 0b15 	vmov	d5, r0, r1
    fa46:	ee36 6b45 	vsub.f64	d6, d6, d5
    fa4a:	ee21 1b40 	vnmul.f64	d1, d1, d0
    fa4e:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fa52:	eea4 1b07 	vfma.f64	d1, d4, d7
    fa56:	ee94 5b03 	vfnms.f64	d5, d4, d3
    fa5a:	ecbd 8b02 	vpop	{d8}
    fa5e:	ee35 0b41 	vsub.f64	d0, d5, d1
    fa62:	ee36 0b40 	vsub.f64	d0, d6, d0
    fa66:	4770      	bx	lr
    fa68:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
    fa6c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    fa70:	e7eb      	b.n	fa4a <__kernel_cos+0xc2>
    fa72:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fa76:	ecbd 8b02 	vpop	{d8}
    fa7a:	4770      	bx	lr
    fa7c:	f3af 8000 	nop.w
    fa80:	be8838d4 	.word	0xbe8838d4
    fa84:	bda8fae9 	.word	0xbda8fae9
    fa88:	bdb4b1c4 	.word	0xbdb4b1c4
    fa8c:	3e21ee9e 	.word	0x3e21ee9e
    fa90:	809c52ad 	.word	0x809c52ad
    fa94:	be927e4f 	.word	0xbe927e4f
    fa98:	19cb1590 	.word	0x19cb1590
    fa9c:	3efa01a0 	.word	0x3efa01a0
    faa0:	16c15177 	.word	0x16c15177
    faa4:	bf56c16c 	.word	0xbf56c16c
    faa8:	5555554c 	.word	0x5555554c
    faac:	3fa55555 	.word	0x3fa55555
    fab0:	3fd33332 	.word	0x3fd33332
    fab4:	3fe90000 	.word	0x3fe90000

0000fab8 <__kernel_sin>:
    fab8:	ee10 3a90 	vmov	r3, s1
    fabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fac0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    fac4:	da04      	bge.n	fad0 <__kernel_sin+0x18>
    fac6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    faca:	ee17 3a90 	vmov	r3, s15
    face:	b35b      	cbz	r3, fb28 <__kernel_sin+0x70>
    fad0:	ee20 7b00 	vmul.f64	d7, d0, d0
    fad4:	ed9f 2b16 	vldr	d2, [pc, #88]	; fb30 <__kernel_sin+0x78>
    fad8:	ed9f 3b17 	vldr	d3, [pc, #92]	; fb38 <__kernel_sin+0x80>
    fadc:	ed9f 4b18 	vldr	d4, [pc, #96]	; fb40 <__kernel_sin+0x88>
    fae0:	eea7 3b02 	vfma.f64	d3, d7, d2
    fae4:	ed9f 5b18 	vldr	d5, [pc, #96]	; fb48 <__kernel_sin+0x90>
    fae8:	eea3 4b07 	vfma.f64	d4, d3, d7
    faec:	ed9f 6b18 	vldr	d6, [pc, #96]	; fb50 <__kernel_sin+0x98>
    faf0:	eea4 5b07 	vfma.f64	d5, d4, d7
    faf4:	eea5 6b07 	vfma.f64	d6, d5, d7
    faf8:	ee20 5b07 	vmul.f64	d5, d0, d7
    fafc:	b930      	cbnz	r0, fb0c <__kernel_sin+0x54>
    fafe:	ed9f 4b16 	vldr	d4, [pc, #88]	; fb58 <__kernel_sin+0xa0>
    fb02:	eea7 4b06 	vfma.f64	d4, d7, d6
    fb06:	eea4 0b05 	vfma.f64	d0, d4, d5
    fb0a:	4770      	bx	lr
    fb0c:	ed9f 4b14 	vldr	d4, [pc, #80]	; fb60 <__kernel_sin+0xa8>
    fb10:	ee26 6b45 	vnmul.f64	d6, d6, d5
    fb14:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fb18:	eea1 6b03 	vfma.f64	d6, d1, d3
    fb1c:	ee96 1b07 	vfnms.f64	d1, d6, d7
    fb20:	eea5 1b04 	vfma.f64	d1, d5, d4
    fb24:	ee30 0b41 	vsub.f64	d0, d0, d1
    fb28:	4770      	bx	lr
    fb2a:	bf00      	nop
    fb2c:	f3af 8000 	nop.w
    fb30:	5acfd57c 	.word	0x5acfd57c
    fb34:	3de5d93a 	.word	0x3de5d93a
    fb38:	8a2b9ceb 	.word	0x8a2b9ceb
    fb3c:	be5ae5e6 	.word	0xbe5ae5e6
    fb40:	57b1fe7d 	.word	0x57b1fe7d
    fb44:	3ec71de3 	.word	0x3ec71de3
    fb48:	19c161d5 	.word	0x19c161d5
    fb4c:	bf2a01a0 	.word	0xbf2a01a0
    fb50:	1110f8a6 	.word	0x1110f8a6
    fb54:	3f811111 	.word	0x3f811111
    fb58:	55555549 	.word	0x55555549
    fb5c:	bfc55555 	.word	0xbfc55555
    fb60:	55555549 	.word	0x55555549
    fb64:	3fc55555 	.word	0x3fc55555

0000fb68 <__ieee754_asinf>:
    fb68:	b538      	push	{r3, r4, r5, lr}
    fb6a:	ee10 5a10 	vmov	r5, s0
    fb6e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    fb72:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
    fb76:	ed2d 8b04 	vpush	{d8-d9}
    fb7a:	f000 8085 	beq.w	fc88 <__ieee754_asinf+0x120>
    fb7e:	dc7a      	bgt.n	fc76 <__ieee754_asinf+0x10e>
    fb80:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    fb84:	da0f      	bge.n	fba6 <__ieee754_asinf+0x3e>
    fb86:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
    fb8a:	f280 809c 	bge.w	fcc6 <__ieee754_asinf+0x15e>
    fb8e:	eddf 7a69 	vldr	s15, [pc, #420]	; fd34 <__ieee754_asinf+0x1cc>
    fb92:	ee70 7a27 	vadd.f32	s15, s0, s15
    fb96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    fb9a:	eef4 7ac7 	vcmpe.f32	s15, s14
    fb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fba2:	f300 808d 	bgt.w	fcc0 <__ieee754_asinf+0x158>
    fba6:	f7ff fc23 	bl	f3f0 <fabsf>
    fbaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fbae:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fbb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    fbb6:	ee20 8a07 	vmul.f32	s16, s0, s14
    fbba:	eddf 6a5f 	vldr	s13, [pc, #380]	; fd38 <__ieee754_asinf+0x1d0>
    fbbe:	ed9f 7a5f 	vldr	s14, [pc, #380]	; fd3c <__ieee754_asinf+0x1d4>
    fbc2:	ed9f 6a5f 	vldr	s12, [pc, #380]	; fd40 <__ieee754_asinf+0x1d8>
    fbc6:	ed9f 5a5f 	vldr	s10, [pc, #380]	; fd44 <__ieee754_asinf+0x1dc>
    fbca:	eddf 5a5f 	vldr	s11, [pc, #380]	; fd48 <__ieee754_asinf+0x1e0>
    fbce:	eddf 8a5f 	vldr	s17, [pc, #380]	; fd4c <__ieee754_asinf+0x1e4>
    fbd2:	eee8 6a07 	vfma.f32	s13, s16, s14
    fbd6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; fd50 <__ieee754_asinf+0x1e8>
    fbda:	eea8 7a06 	vfma.f32	s14, s16, s12
    fbde:	ed9f 6a5d 	vldr	s12, [pc, #372]	; fd54 <__ieee754_asinf+0x1ec>
    fbe2:	eea6 5a88 	vfma.f32	s10, s13, s16
    fbe6:	eea7 6a08 	vfma.f32	s12, s14, s16
    fbea:	ed9f 7a5b 	vldr	s14, [pc, #364]	; fd58 <__ieee754_asinf+0x1f0>
    fbee:	eddf 6a5b 	vldr	s13, [pc, #364]	; fd5c <__ieee754_asinf+0x1f4>
    fbf2:	eee5 5a08 	vfma.f32	s11, s10, s16
    fbf6:	eea6 7a08 	vfma.f32	s14, s12, s16
    fbfa:	eee5 6a88 	vfma.f32	s13, s11, s16
    fbfe:	eee7 7a08 	vfma.f32	s15, s14, s16
    fc02:	eee6 8a88 	vfma.f32	s17, s13, s16
    fc06:	eeb0 0a48 	vmov.f32	s0, s16
    fc0a:	eeb0 9a67 	vmov.f32	s18, s15
    fc0e:	f7ff fbf7 	bl	f400 <__ieee754_sqrtf>
    fc12:	4b53      	ldr	r3, [pc, #332]	; (fd60 <__ieee754_asinf+0x1f8>)
    fc14:	429c      	cmp	r4, r3
    fc16:	ee68 8a88 	vmul.f32	s17, s17, s16
    fc1a:	dc42      	bgt.n	fca2 <__ieee754_asinf+0x13a>
    fc1c:	ee10 3a10 	vmov	r3, s0
    fc20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    fc24:	f023 030f 	bic.w	r3, r3, #15
    fc28:	ee06 3a90 	vmov	s13, r3
    fc2c:	eea6 8ae6 	vfms.f32	s16, s13, s13
    fc30:	ee30 7a26 	vadd.f32	s14, s0, s13
    fc34:	ee88 5a89 	vdiv.f32	s10, s17, s18
    fc38:	eec8 4a07 	vdiv.f32	s9, s16, s14
    fc3c:	eddf 7a49 	vldr	s15, [pc, #292]	; fd64 <__ieee754_asinf+0x1fc>
    fc40:	ed9f 7a49 	vldr	s14, [pc, #292]	; fd68 <__ieee754_asinf+0x200>
    fc44:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    fc48:	eee4 7ac6 	vfms.f32	s15, s9, s12
    fc4c:	ee30 0a00 	vadd.f32	s0, s0, s0
    fc50:	eef0 5a47 	vmov.f32	s11, s14
    fc54:	eee6 5ac6 	vfms.f32	s11, s13, s12
    fc58:	eed0 7a05 	vfnms.f32	s15, s0, s10
    fc5c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    fc60:	ee37 7a67 	vsub.f32	s14, s14, s15
    fc64:	2d00      	cmp	r5, #0
    fc66:	dc0a      	bgt.n	fc7e <__ieee754_asinf+0x116>
    fc68:	ecbd 8b04 	vpop	{d8-d9}
    fc6c:	eeb1 7a47 	vneg.f32	s14, s14
    fc70:	eeb0 0a47 	vmov.f32	s0, s14
    fc74:	bd38      	pop	{r3, r4, r5, pc}
    fc76:	ee70 7a40 	vsub.f32	s15, s0, s0
    fc7a:	ee87 7aa7 	vdiv.f32	s14, s15, s15
    fc7e:	ecbd 8b04 	vpop	{d8-d9}
    fc82:	eeb0 0a47 	vmov.f32	s0, s14
    fc86:	bd38      	pop	{r3, r4, r5, pc}
    fc88:	ed9f 7a36 	vldr	s14, [pc, #216]	; fd64 <__ieee754_asinf+0x1fc>
    fc8c:	eddf 7a37 	vldr	s15, [pc, #220]	; fd6c <__ieee754_asinf+0x204>
    fc90:	ee20 7a07 	vmul.f32	s14, s0, s14
    fc94:	ecbd 8b04 	vpop	{d8-d9}
    fc98:	eea0 7a27 	vfma.f32	s14, s0, s15
    fc9c:	eeb0 0a47 	vmov.f32	s0, s14
    fca0:	bd38      	pop	{r3, r4, r5, pc}
    fca2:	ee88 6a89 	vdiv.f32	s12, s17, s18
    fca6:	eddf 7a32 	vldr	s15, [pc, #200]	; fd70 <__ieee754_asinf+0x208>
    fcaa:	ed9f 7a30 	vldr	s14, [pc, #192]	; fd6c <__ieee754_asinf+0x204>
    fcae:	eea0 0a06 	vfma.f32	s0, s0, s12
    fcb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    fcb6:	eee0 7a26 	vfma.f32	s15, s0, s13
    fcba:	ee37 7a67 	vsub.f32	s14, s14, s15
    fcbe:	e7d1      	b.n	fc64 <__ieee754_asinf+0xfc>
    fcc0:	eeb0 7a40 	vmov.f32	s14, s0
    fcc4:	e7db      	b.n	fc7e <__ieee754_asinf+0x116>
    fcc6:	ee60 7a00 	vmul.f32	s15, s0, s0
    fcca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; fd3c <__ieee754_asinf+0x1d4>
    fcce:	eddf 6a1a 	vldr	s13, [pc, #104]	; fd38 <__ieee754_asinf+0x1d0>
    fcd2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; fd44 <__ieee754_asinf+0x1dc>
    fcd6:	eddf 5a1a 	vldr	s11, [pc, #104]	; fd40 <__ieee754_asinf+0x1d8>
    fcda:	ed9f 5a1b 	vldr	s10, [pc, #108]	; fd48 <__ieee754_asinf+0x1e0>
    fcde:	eee7 6a87 	vfma.f32	s13, s15, s14
    fce2:	ecbd 8b04 	vpop	{d8-d9}
    fce6:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fcea:	ed9f 7a19 	vldr	s14, [pc, #100]	; fd50 <__ieee754_asinf+0x1e8>
    fcee:	eddf 6a19 	vldr	s13, [pc, #100]	; fd54 <__ieee754_asinf+0x1ec>
    fcf2:	eea7 7aa5 	vfma.f32	s14, s15, s11
    fcf6:	eea6 5a27 	vfma.f32	s10, s12, s15
    fcfa:	eee7 6a27 	vfma.f32	s13, s14, s15
    fcfe:	eddf 5a17 	vldr	s11, [pc, #92]	; fd5c <__ieee754_asinf+0x1f4>
    fd02:	ed9f 6a15 	vldr	s12, [pc, #84]	; fd58 <__ieee754_asinf+0x1f0>
    fd06:	ed9f 7a11 	vldr	s14, [pc, #68]	; fd4c <__ieee754_asinf+0x1e4>
    fd0a:	eee5 5a27 	vfma.f32	s11, s10, s15
    fd0e:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fd12:	eea5 7aa7 	vfma.f32	s14, s11, s15
    fd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    fd1a:	eee6 6a27 	vfma.f32	s13, s12, s15
    fd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
    fd22:	eeb0 7a40 	vmov.f32	s14, s0
    fd26:	ee87 6aa6 	vdiv.f32	s12, s15, s13
    fd2a:	eea0 7a06 	vfma.f32	s14, s0, s12
    fd2e:	eeb0 0a47 	vmov.f32	s0, s14
    fd32:	bd38      	pop	{r3, r4, r5, pc}
    fd34:	7149f2ca 	.word	0x7149f2ca
    fd38:	3a4f7f04 	.word	0x3a4f7f04
    fd3c:	3811ef08 	.word	0x3811ef08
    fd40:	3d9dc62e 	.word	0x3d9dc62e
    fd44:	bd241146 	.word	0xbd241146
    fd48:	3e4e0aa8 	.word	0x3e4e0aa8
    fd4c:	3e2aaaab 	.word	0x3e2aaaab
    fd50:	bf303361 	.word	0xbf303361
    fd54:	4001572d 	.word	0x4001572d
    fd58:	c019d139 	.word	0xc019d139
    fd5c:	bea6b090 	.word	0xbea6b090
    fd60:	3f799999 	.word	0x3f799999
    fd64:	b33bbd2e 	.word	0xb33bbd2e
    fd68:	3f490fdb 	.word	0x3f490fdb
    fd6c:	3fc90fdb 	.word	0x3fc90fdb
    fd70:	333bbd2e 	.word	0x333bbd2e

0000fd74 <__ieee754_atan2f>:
    fd74:	b510      	push	{r4, lr}
    fd76:	b082      	sub	sp, #8
    fd78:	edcd 0a01 	vstr	s1, [sp, #4]
    fd7c:	9b01      	ldr	r3, [sp, #4]
    fd7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    fd82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fd86:	eef0 7a40 	vmov.f32	s15, s0
    fd8a:	dc30      	bgt.n	fdee <__ieee754_atan2f+0x7a>
    fd8c:	ee10 0a10 	vmov	r0, s0
    fd90:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    fd94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fd98:	dc29      	bgt.n	fdee <__ieee754_atan2f+0x7a>
    fd9a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
    fd9e:	d040      	beq.n	fe22 <__ieee754_atan2f+0xae>
    fda0:	179c      	asrs	r4, r3, #30
    fda2:	f004 0402 	and.w	r4, r4, #2
    fda6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    fdaa:	b331      	cbz	r1, fdfa <__ieee754_atan2f+0x86>
    fdac:	b372      	cbz	r2, fe0c <__ieee754_atan2f+0x98>
    fdae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fdb2:	d03e      	beq.n	fe32 <__ieee754_atan2f+0xbe>
    fdb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fdb8:	d028      	beq.n	fe0c <__ieee754_atan2f+0x98>
    fdba:	1a89      	subs	r1, r1, r2
    fdbc:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
    fdc0:	ea4f 52e1 	mov.w	r2, r1, asr #23
    fdc4:	da32      	bge.n	fe2c <__ieee754_atan2f+0xb8>
    fdc6:	2b00      	cmp	r3, #0
    fdc8:	da40      	bge.n	fe4c <__ieee754_atan2f+0xd8>
    fdca:	323c      	adds	r2, #60	; 0x3c
    fdcc:	da3e      	bge.n	fe4c <__ieee754_atan2f+0xd8>
    fdce:	ed9f 0a33 	vldr	s0, [pc, #204]	; fe9c <__ieee754_atan2f+0x128>
    fdd2:	2c01      	cmp	r4, #1
    fdd4:	d04c      	beq.n	fe70 <__ieee754_atan2f+0xfc>
    fdd6:	2c02      	cmp	r4, #2
    fdd8:	d041      	beq.n	fe5e <__ieee754_atan2f+0xea>
    fdda:	b164      	cbz	r4, fdf6 <__ieee754_atan2f+0x82>
    fddc:	ed9f 7a30 	vldr	s14, [pc, #192]	; fea0 <__ieee754_atan2f+0x12c>
    fde0:	eddf 7a30 	vldr	s15, [pc, #192]	; fea4 <__ieee754_atan2f+0x130>
    fde4:	ee30 0a07 	vadd.f32	s0, s0, s14
    fde8:	ee30 0a67 	vsub.f32	s0, s0, s15
    fdec:	e003      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fdee:	ed9d 7a01 	vldr	s14, [sp, #4]
    fdf2:	ee37 0a27 	vadd.f32	s0, s14, s15
    fdf6:	b002      	add	sp, #8
    fdf8:	bd10      	pop	{r4, pc}
    fdfa:	2c02      	cmp	r4, #2
    fdfc:	d00e      	beq.n	fe1c <__ieee754_atan2f+0xa8>
    fdfe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; fea8 <__ieee754_atan2f+0x134>
    fe02:	2c03      	cmp	r4, #3
    fe04:	fe07 0a00 	vseleq.f32	s0, s14, s0
    fe08:	b002      	add	sp, #8
    fe0a:	bd10      	pop	{r4, pc}
    fe0c:	ed9f 0a27 	vldr	s0, [pc, #156]	; feac <__ieee754_atan2f+0x138>
    fe10:	eddf 7a27 	vldr	s15, [pc, #156]	; feb0 <__ieee754_atan2f+0x13c>
    fe14:	2800      	cmp	r0, #0
    fe16:	fe20 0a27 	vselge.f32	s0, s0, s15
    fe1a:	e7ec      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe1c:	ed9f 0a21 	vldr	s0, [pc, #132]	; fea4 <__ieee754_atan2f+0x130>
    fe20:	e7e9      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe22:	b002      	add	sp, #8
    fe24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe28:	f000 b84a 	b.w	fec0 <atanf>
    fe2c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; feac <__ieee754_atan2f+0x138>
    fe30:	e7cf      	b.n	fdd2 <__ieee754_atan2f+0x5e>
    fe32:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fe36:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    fe3a:	d020      	beq.n	fe7e <__ieee754_atan2f+0x10a>
    fe3c:	2c02      	cmp	r4, #2
    fe3e:	d826      	bhi.n	fe8e <__ieee754_atan2f+0x11a>
    fe40:	4b1c      	ldr	r3, [pc, #112]	; (feb4 <__ieee754_atan2f+0x140>)
    fe42:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fe46:	ed93 0a00 	vldr	s0, [r3]
    fe4a:	e7d4      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe4c:	ed9d 7a01 	vldr	s14, [sp, #4]
    fe50:	ee87 0a87 	vdiv.f32	s0, s15, s14
    fe54:	f7ff facc 	bl	f3f0 <fabsf>
    fe58:	f000 f832 	bl	fec0 <atanf>
    fe5c:	e7b9      	b.n	fdd2 <__ieee754_atan2f+0x5e>
    fe5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; fea0 <__ieee754_atan2f+0x12c>
    fe62:	eddf 7a10 	vldr	s15, [pc, #64]	; fea4 <__ieee754_atan2f+0x130>
    fe66:	ee30 0a07 	vadd.f32	s0, s0, s14
    fe6a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fe6e:	e7c2      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe70:	ee10 3a10 	vmov	r3, s0
    fe74:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    fe78:	ee00 3a10 	vmov	s0, r3
    fe7c:	e7bb      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe7e:	2c02      	cmp	r4, #2
    fe80:	d808      	bhi.n	fe94 <__ieee754_atan2f+0x120>
    fe82:	4b0d      	ldr	r3, [pc, #52]	; (feb8 <__ieee754_atan2f+0x144>)
    fe84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fe88:	ed93 0a00 	vldr	s0, [r3]
    fe8c:	e7b3      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe8e:	ed9f 0a03 	vldr	s0, [pc, #12]	; fe9c <__ieee754_atan2f+0x128>
    fe92:	e7b0      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe94:	ed9f 0a09 	vldr	s0, [pc, #36]	; febc <__ieee754_atan2f+0x148>
    fe98:	e7ad      	b.n	fdf6 <__ieee754_atan2f+0x82>
    fe9a:	bf00      	nop
    fe9c:	00000000 	.word	0x00000000
    fea0:	33bbbd2e 	.word	0x33bbbd2e
    fea4:	40490fdb 	.word	0x40490fdb
    fea8:	c0490fdb 	.word	0xc0490fdb
    feac:	3fc90fdb 	.word	0x3fc90fdb
    feb0:	bfc90fdb 	.word	0xbfc90fdb
    feb4:	20001d54 	.word	0x20001d54
    feb8:	20001d48 	.word	0x20001d48
    febc:	3f490fdb 	.word	0x3f490fdb

0000fec0 <atanf>:
    fec0:	b538      	push	{r3, r4, r5, lr}
    fec2:	ee10 5a10 	vmov	r5, s0
    fec6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    feca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
    fece:	eef0 7a40 	vmov.f32	s15, s0
    fed2:	db0a      	blt.n	feea <atanf+0x2a>
    fed4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    fed8:	dc58      	bgt.n	ff8c <atanf+0xcc>
    feda:	eddf 7a51 	vldr	s15, [pc, #324]	; 10020 <atanf+0x160>
    fede:	ed9f 7a51 	vldr	s14, [pc, #324]	; 10024 <atanf+0x164>
    fee2:	2d00      	cmp	r5, #0
    fee4:	fe37 0a87 	vselgt.f32	s0, s15, s14
    fee8:	bd38      	pop	{r3, r4, r5, pc}
    feea:	4b4f      	ldr	r3, [pc, #316]	; (10028 <atanf+0x168>)
    feec:	429c      	cmp	r4, r3
    feee:	dc5c      	bgt.n	ffaa <atanf+0xea>
    fef0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
    fef4:	db4d      	blt.n	ff92 <atanf+0xd2>
    fef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fefa:	ee27 6aa7 	vmul.f32	s12, s15, s15
    fefe:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1002c <atanf+0x16c>
    ff02:	eddf 5a4b 	vldr	s11, [pc, #300]	; 10030 <atanf+0x170>
    ff06:	eddf 4a4b 	vldr	s9, [pc, #300]	; 10034 <atanf+0x174>
    ff0a:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 10038 <atanf+0x178>
    ff0e:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 1003c <atanf+0x17c>
    ff12:	ee26 7a06 	vmul.f32	s14, s12, s12
    ff16:	1c5a      	adds	r2, r3, #1
    ff18:	eee7 5a26 	vfma.f32	s11, s14, s13
    ff1c:	eddf 6a48 	vldr	s13, [pc, #288]	; 10040 <atanf+0x180>
    ff20:	eea5 5a87 	vfma.f32	s10, s11, s14
    ff24:	eee7 6a24 	vfma.f32	s13, s14, s9
    ff28:	eddf 5a46 	vldr	s11, [pc, #280]	; 10044 <atanf+0x184>
    ff2c:	eddf 4a46 	vldr	s9, [pc, #280]	; 10048 <atanf+0x188>
    ff30:	eee6 5a87 	vfma.f32	s11, s13, s14
    ff34:	eea5 4a07 	vfma.f32	s8, s10, s14
    ff38:	ed9f 5a44 	vldr	s10, [pc, #272]	; 1004c <atanf+0x18c>
    ff3c:	eddf 6a44 	vldr	s13, [pc, #272]	; 10050 <atanf+0x190>
    ff40:	eea5 5a87 	vfma.f32	s10, s11, s14
    ff44:	eee4 4a07 	vfma.f32	s9, s8, s14
    ff48:	eddf 5a42 	vldr	s11, [pc, #264]	; 10054 <atanf+0x194>
    ff4c:	eee4 6a87 	vfma.f32	s13, s9, s14
    ff50:	eee5 5a07 	vfma.f32	s11, s10, s14
    ff54:	ee66 6a86 	vmul.f32	s13, s13, s12
    ff58:	ee65 5a87 	vmul.f32	s11, s11, s14
    ff5c:	d03a      	beq.n	ffd4 <atanf+0x114>
    ff5e:	4a3e      	ldr	r2, [pc, #248]	; (10058 <atanf+0x198>)
    ff60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ff64:	ee76 6aa5 	vadd.f32	s13, s13, s11
    ff68:	ed92 7a00 	vldr	s14, [r2]
    ff6c:	4a3b      	ldr	r2, [pc, #236]	; (1005c <atanf+0x19c>)
    ff6e:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    ff72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ff76:	2d00      	cmp	r5, #0
    ff78:	edd3 6a00 	vldr	s13, [r3]
    ff7c:	ee77 7a67 	vsub.f32	s15, s14, s15
    ff80:	ee36 0ae7 	vsub.f32	s0, s13, s15
    ff84:	dab0      	bge.n	fee8 <atanf+0x28>
    ff86:	eeb1 0a40 	vneg.f32	s0, s0
    ff8a:	bd38      	pop	{r3, r4, r5, pc}
    ff8c:	ee30 0a00 	vadd.f32	s0, s0, s0
    ff90:	bd38      	pop	{r3, r4, r5, pc}
    ff92:	ed9f 7a33 	vldr	s14, [pc, #204]	; 10060 <atanf+0x1a0>
    ff96:	ee30 7a07 	vadd.f32	s14, s0, s14
    ff9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    ff9e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    ffa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ffa6:	dda6      	ble.n	fef6 <atanf+0x36>
    ffa8:	bd38      	pop	{r3, r4, r5, pc}
    ffaa:	f7ff fa21 	bl	f3f0 <fabsf>
    ffae:	4b2d      	ldr	r3, [pc, #180]	; (10064 <atanf+0x1a4>)
    ffb0:	429c      	cmp	r4, r3
    ffb2:	dc16      	bgt.n	ffe2 <atanf+0x122>
    ffb4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
    ffb8:	429c      	cmp	r4, r3
    ffba:	dc27      	bgt.n	1000c <atanf+0x14c>
    ffbc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    ffc0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    ffc4:	eea0 7a27 	vfma.f32	s14, s0, s15
    ffc8:	2300      	movs	r3, #0
    ffca:	ee30 0a27 	vadd.f32	s0, s0, s15
    ffce:	eec7 7a00 	vdiv.f32	s15, s14, s0
    ffd2:	e792      	b.n	fefa <atanf+0x3a>
    ffd4:	ee76 6aa5 	vadd.f32	s13, s13, s11
    ffd8:	eee6 7ae7 	vfms.f32	s15, s13, s15
    ffdc:	eeb0 0a67 	vmov.f32	s0, s15
    ffe0:	bd38      	pop	{r3, r4, r5, pc}
    ffe2:	4b21      	ldr	r3, [pc, #132]	; (10068 <atanf+0x1a8>)
    ffe4:	429c      	cmp	r4, r3
    ffe6:	dc0b      	bgt.n	10000 <atanf+0x140>
    ffe8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    ffec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    fff0:	eea0 7a27 	vfma.f32	s14, s0, s15
    fff4:	2302      	movs	r3, #2
    fff6:	ee30 0a67 	vsub.f32	s0, s0, s15
    fffa:	eec0 7a07 	vdiv.f32	s15, s0, s14
    fffe:	e77c      	b.n	fefa <atanf+0x3a>
   10000:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   10004:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10008:	2303      	movs	r3, #3
   1000a:	e776      	b.n	fefa <atanf+0x3a>
   1000c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10010:	ee30 7a67 	vsub.f32	s14, s0, s15
   10014:	ee30 0a27 	vadd.f32	s0, s0, s15
   10018:	2301      	movs	r3, #1
   1001a:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1001e:	e76c      	b.n	fefa <atanf+0x3a>
   10020:	3fc90fdb 	.word	0x3fc90fdb
   10024:	bfc90fdb 	.word	0xbfc90fdb
   10028:	3edfffff 	.word	0x3edfffff
   1002c:	3c8569d7 	.word	0x3c8569d7
   10030:	3d4bda59 	.word	0x3d4bda59
   10034:	bd15a221 	.word	0xbd15a221
   10038:	3d886b35 	.word	0x3d886b35
   1003c:	3dba2e6e 	.word	0x3dba2e6e
   10040:	bd6ef16b 	.word	0xbd6ef16b
   10044:	bd9d8795 	.word	0xbd9d8795
   10048:	3e124925 	.word	0x3e124925
   1004c:	bde38e38 	.word	0xbde38e38
   10050:	3eaaaaab 	.word	0x3eaaaaab
   10054:	be4ccccd 	.word	0xbe4ccccd
   10058:	20002808 	.word	0x20002808
   1005c:	200027f8 	.word	0x200027f8
   10060:	7149f2ca 	.word	0x7149f2ca
   10064:	3f97ffff 	.word	0x3f97ffff
   10068:	401bffff 	.word	0x401bffff
   1006c:	00000000 	.word	0x00000000

00010070 <__ieee754_rem_pio2>:
   10070:	b570      	push	{r4, r5, r6, lr}
   10072:	ec53 2b10 	vmov	r2, r3, d0
   10076:	499c      	ldr	r1, [pc, #624]	; (102e8 <__ieee754_rem_pio2+0x278>)
   10078:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1007c:	428d      	cmp	r5, r1
   1007e:	b088      	sub	sp, #32
   10080:	4604      	mov	r4, r0
   10082:	dd6a      	ble.n	1015a <__ieee754_rem_pio2+0xea>
   10084:	4999      	ldr	r1, [pc, #612]	; (102ec <__ieee754_rem_pio2+0x27c>)
   10086:	428d      	cmp	r5, r1
   10088:	461e      	mov	r6, r3
   1008a:	dc1b      	bgt.n	100c4 <__ieee754_rem_pio2+0x54>
   1008c:	2b00      	cmp	r3, #0
   1008e:	ed9f 7b86 	vldr	d7, [pc, #536]	; 102a8 <__ieee754_rem_pio2+0x238>
   10092:	f340 80eb 	ble.w	1026c <__ieee754_rem_pio2+0x1fc>
   10096:	ee30 7b47 	vsub.f64	d7, d0, d7
   1009a:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
   1009e:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
   100a2:	428d      	cmp	r5, r1
   100a4:	d06a      	beq.n	1017c <__ieee754_rem_pio2+0x10c>
   100a6:	ed9f 6b82 	vldr	d6, [pc, #520]	; 102b0 <__ieee754_rem_pio2+0x240>
   100aa:	2001      	movs	r0, #1
   100ac:	ee37 5b46 	vsub.f64	d5, d7, d6
   100b0:	ee37 7b45 	vsub.f64	d7, d7, d5
   100b4:	ed84 5b00 	vstr	d5, [r4]
   100b8:	ee37 7b46 	vsub.f64	d7, d7, d6
   100bc:	ed84 7b02 	vstr	d7, [r4, #8]
   100c0:	b008      	add	sp, #32
   100c2:	bd70      	pop	{r4, r5, r6, pc}
   100c4:	498a      	ldr	r1, [pc, #552]	; (102f0 <__ieee754_rem_pio2+0x280>)
   100c6:	428d      	cmp	r5, r1
   100c8:	dd60      	ble.n	1018c <__ieee754_rem_pio2+0x11c>
   100ca:	498a      	ldr	r1, [pc, #552]	; (102f4 <__ieee754_rem_pio2+0x284>)
   100cc:	428d      	cmp	r5, r1
   100ce:	dc4d      	bgt.n	1016c <__ieee754_rem_pio2+0xfc>
   100d0:	152a      	asrs	r2, r5, #20
   100d2:	ee10 0a10 	vmov	r0, s0
   100d6:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
   100da:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
   100de:	ec41 0b17 	vmov	d7, r0, r1
   100e2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 102b8 <__ieee754_rem_pio2+0x248>
   100e6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
   100ea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
   100ee:	ee37 7b46 	vsub.f64	d7, d7, d6
   100f2:	ee27 7b05 	vmul.f64	d7, d7, d5
   100f6:	eefd 4bc7 	vcvt.s32.f64	s9, d7
   100fa:	ed8d 6b02 	vstr	d6, [sp, #8]
   100fe:	eeb8 6be4 	vcvt.f64.s32	d6, s9
   10102:	ee37 7b46 	vsub.f64	d7, d7, d6
   10106:	ee27 7b05 	vmul.f64	d7, d7, d5
   1010a:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1010e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10112:	ed8d 6b04 	vstr	d6, [sp, #16]
   10116:	ed8d 7b06 	vstr	d7, [sp, #24]
   1011a:	f040 8096 	bne.w	1024a <__ieee754_rem_pio2+0x1da>
   1011e:	ee14 3a90 	vmov	r3, s9
   10122:	2b00      	cmp	r3, #0
   10124:	bf0c      	ite	eq
   10126:	2301      	moveq	r3, #1
   10128:	2302      	movne	r3, #2
   1012a:	4973      	ldr	r1, [pc, #460]	; (102f8 <__ieee754_rem_pio2+0x288>)
   1012c:	9101      	str	r1, [sp, #4]
   1012e:	2102      	movs	r1, #2
   10130:	9100      	str	r1, [sp, #0]
   10132:	a802      	add	r0, sp, #8
   10134:	4621      	mov	r1, r4
   10136:	f000 f8e7 	bl	10308 <__kernel_rem_pio2>
   1013a:	2e00      	cmp	r6, #0
   1013c:	dac0      	bge.n	100c0 <__ieee754_rem_pio2+0x50>
   1013e:	ed94 6b00 	vldr	d6, [r4]
   10142:	ed94 7b02 	vldr	d7, [r4, #8]
   10146:	eeb1 6b46 	vneg.f64	d6, d6
   1014a:	eeb1 7b47 	vneg.f64	d7, d7
   1014e:	ed84 6b00 	vstr	d6, [r4]
   10152:	ed84 7b02 	vstr	d7, [r4, #8]
   10156:	4240      	negs	r0, r0
   10158:	e7b2      	b.n	100c0 <__ieee754_rem_pio2+0x50>
   1015a:	2000      	movs	r0, #0
   1015c:	2100      	movs	r1, #0
   1015e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   10162:	2000      	movs	r0, #0
   10164:	ed84 0b00 	vstr	d0, [r4]
   10168:	b008      	add	sp, #32
   1016a:	bd70      	pop	{r4, r5, r6, pc}
   1016c:	ee30 7b40 	vsub.f64	d7, d0, d0
   10170:	2000      	movs	r0, #0
   10172:	ed84 7b02 	vstr	d7, [r4, #8]
   10176:	ed84 7b00 	vstr	d7, [r4]
   1017a:	e7a1      	b.n	100c0 <__ieee754_rem_pio2+0x50>
   1017c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 102c0 <__ieee754_rem_pio2+0x250>
   10180:	ed9f 6b51 	vldr	d6, [pc, #324]	; 102c8 <__ieee754_rem_pio2+0x258>
   10184:	ee37 7b45 	vsub.f64	d7, d7, d5
   10188:	2001      	movs	r0, #1
   1018a:	e78f      	b.n	100ac <__ieee754_rem_pio2+0x3c>
   1018c:	f000 fc04 	bl	10998 <fabs>
   10190:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   10194:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 102d0 <__ieee754_rem_pio2+0x260>
   10198:	eea0 7b05 	vfma.f64	d7, d0, d5
   1019c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   101a0:	ed9f 3b41 	vldr	d3, [pc, #260]	; 102a8 <__ieee754_rem_pio2+0x238>
   101a4:	ee17 0a90 	vmov	r0, s15
   101a8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 102b0 <__ieee754_rem_pio2+0x240>
   101ac:	281f      	cmp	r0, #31
   101ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   101b2:	eeb1 4b45 	vneg.f64	d4, d5
   101b6:	eea5 0b43 	vfms.f64	d0, d5, d3
   101ba:	ee25 7b06 	vmul.f64	d7, d5, d6
   101be:	dc1c      	bgt.n	101fa <__ieee754_rem_pio2+0x18a>
   101c0:	4b4e      	ldr	r3, [pc, #312]	; (102fc <__ieee754_rem_pio2+0x28c>)
   101c2:	1e42      	subs	r2, r0, #1
   101c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   101c8:	42ab      	cmp	r3, r5
   101ca:	d016      	beq.n	101fa <__ieee754_rem_pio2+0x18a>
   101cc:	ee30 6b47 	vsub.f64	d6, d0, d7
   101d0:	ed84 6b00 	vstr	d6, [r4]
   101d4:	ee30 0b46 	vsub.f64	d0, d0, d6
   101d8:	ee30 0b47 	vsub.f64	d0, d0, d7
   101dc:	2e00      	cmp	r6, #0
   101de:	ed84 0b02 	vstr	d0, [r4, #8]
   101e2:	f6bf af6d 	bge.w	100c0 <__ieee754_rem_pio2+0x50>
   101e6:	eeb1 6b46 	vneg.f64	d6, d6
   101ea:	eeb1 0b40 	vneg.f64	d0, d0
   101ee:	ed84 6b00 	vstr	d6, [r4]
   101f2:	ed84 0b02 	vstr	d0, [r4, #8]
   101f6:	4240      	negs	r0, r0
   101f8:	e762      	b.n	100c0 <__ieee754_rem_pio2+0x50>
   101fa:	ee30 6b47 	vsub.f64	d6, d0, d7
   101fe:	ee16 3a90 	vmov	r3, s13
   10202:	f3c3 530a 	ubfx	r3, r3, #20, #11
   10206:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   1020a:	2b10      	cmp	r3, #16
   1020c:	ea4f 5225 	mov.w	r2, r5, asr #20
   10210:	ddde      	ble.n	101d0 <__ieee754_rem_pio2+0x160>
   10212:	eeb0 3b40 	vmov.f64	d3, d0
   10216:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 102c0 <__ieee754_rem_pio2+0x250>
   1021a:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 102c8 <__ieee754_rem_pio2+0x258>
   1021e:	eea4 3b06 	vfma.f64	d3, d4, d6
   10222:	ee30 7b43 	vsub.f64	d7, d0, d3
   10226:	eea4 7b06 	vfma.f64	d7, d4, d6
   1022a:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1022e:	ee33 6b47 	vsub.f64	d6, d3, d7
   10232:	ee16 3a90 	vmov	r3, s13
   10236:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1023a:	1ad2      	subs	r2, r2, r3
   1023c:	2a31      	cmp	r2, #49	; 0x31
   1023e:	dc06      	bgt.n	1024e <__ieee754_rem_pio2+0x1de>
   10240:	eeb0 0b43 	vmov.f64	d0, d3
   10244:	ed84 6b00 	vstr	d6, [r4]
   10248:	e7c4      	b.n	101d4 <__ieee754_rem_pio2+0x164>
   1024a:	2303      	movs	r3, #3
   1024c:	e76d      	b.n	1012a <__ieee754_rem_pio2+0xba>
   1024e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 102d8 <__ieee754_rem_pio2+0x268>
   10252:	eeb0 0b43 	vmov.f64	d0, d3
   10256:	ed9f 2b22 	vldr	d2, [pc, #136]	; 102e0 <__ieee754_rem_pio2+0x270>
   1025a:	eea4 0b06 	vfma.f64	d0, d4, d6
   1025e:	ee33 7b40 	vsub.f64	d7, d3, d0
   10262:	eea4 7b06 	vfma.f64	d7, d4, d6
   10266:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1026a:	e7af      	b.n	101cc <__ieee754_rem_pio2+0x15c>
   1026c:	4924      	ldr	r1, [pc, #144]	; (10300 <__ieee754_rem_pio2+0x290>)
   1026e:	ee30 7b07 	vadd.f64	d7, d0, d7
   10272:	428d      	cmp	r5, r1
   10274:	d00e      	beq.n	10294 <__ieee754_rem_pio2+0x224>
   10276:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 102b0 <__ieee754_rem_pio2+0x240>
   1027a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1027e:	ee37 5b06 	vadd.f64	d5, d7, d6
   10282:	ee37 7b45 	vsub.f64	d7, d7, d5
   10286:	ed84 5b00 	vstr	d5, [r4]
   1028a:	ee37 7b06 	vadd.f64	d7, d7, d6
   1028e:	ed84 7b02 	vstr	d7, [r4, #8]
   10292:	e715      	b.n	100c0 <__ieee754_rem_pio2+0x50>
   10294:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 102c0 <__ieee754_rem_pio2+0x250>
   10298:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 102c8 <__ieee754_rem_pio2+0x258>
   1029c:	ee37 7b05 	vadd.f64	d7, d7, d5
   102a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   102a4:	e7eb      	b.n	1027e <__ieee754_rem_pio2+0x20e>
   102a6:	bf00      	nop
   102a8:	54400000 	.word	0x54400000
   102ac:	3ff921fb 	.word	0x3ff921fb
   102b0:	1a626331 	.word	0x1a626331
   102b4:	3dd0b461 	.word	0x3dd0b461
   102b8:	00000000 	.word	0x00000000
   102bc:	41700000 	.word	0x41700000
   102c0:	1a600000 	.word	0x1a600000
   102c4:	3dd0b461 	.word	0x3dd0b461
   102c8:	2e037073 	.word	0x2e037073
   102cc:	3ba3198a 	.word	0x3ba3198a
   102d0:	6dc9c883 	.word	0x6dc9c883
   102d4:	3fe45f30 	.word	0x3fe45f30
   102d8:	2e000000 	.word	0x2e000000
   102dc:	3ba3198a 	.word	0x3ba3198a
   102e0:	252049c1 	.word	0x252049c1
   102e4:	397b839a 	.word	0x397b839a
   102e8:	3fe921fb 	.word	0x3fe921fb
   102ec:	4002d97b 	.word	0x4002d97b
   102f0:	413921fb 	.word	0x413921fb
   102f4:	7fefffff 	.word	0x7fefffff
   102f8:	20002fa4 	.word	0x20002fa4
   102fc:	20002bcc 	.word	0x20002bcc
   10300:	3ff921fb 	.word	0x3ff921fb
   10304:	00000000 	.word	0x00000000

00010308 <__kernel_rem_pio2>:
   10308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1030c:	ed2d 8b08 	vpush	{d8-d11}
   10310:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   10314:	461c      	mov	r4, r3
   10316:	9304      	str	r3, [sp, #16]
   10318:	9107      	str	r1, [sp, #28]
   1031a:	4bab      	ldr	r3, [pc, #684]	; (105c8 <__kernel_rem_pio2+0x2c0>)
   1031c:	99a6      	ldr	r1, [sp, #664]	; 0x298
   1031e:	f112 0f14 	cmn.w	r2, #20
   10322:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   10326:	4682      	mov	sl, r0
   10328:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1032c:	f2c0 8299 	blt.w	10862 <__kernel_rem_pio2+0x55a>
   10330:	49a6      	ldr	r1, [pc, #664]	; (105cc <__kernel_rem_pio2+0x2c4>)
   10332:	1ed3      	subs	r3, r2, #3
   10334:	fb81 0103 	smull	r0, r1, r1, r3
   10338:	17db      	asrs	r3, r3, #31
   1033a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1033e:	9303      	str	r3, [sp, #12]
   10340:	3301      	adds	r3, #1
   10342:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   10346:	00db      	lsls	r3, r3, #3
   10348:	18d3      	adds	r3, r2, r3
   1034a:	9306      	str	r3, [sp, #24]
   1034c:	9b03      	ldr	r3, [sp, #12]
   1034e:	eb15 0108 	adds.w	r1, r5, r8
   10352:	eba3 0308 	sub.w	r3, r3, r8
   10356:	d41a      	bmi.n	1038e <__kernel_rem_pio2+0x86>
   10358:	3101      	adds	r1, #1
   1035a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 105b0 <__kernel_rem_pio2+0x2a8>
   1035e:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   10360:	4419      	add	r1, r3
   10362:	aa1c      	add	r2, sp, #112	; 0x70
   10364:	e00a      	b.n	1037c <__kernel_rem_pio2+0x74>
   10366:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1036a:	ee07 4a90 	vmov	s15, r4
   1036e:	3301      	adds	r3, #1
   10370:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   10374:	428b      	cmp	r3, r1
   10376:	eca2 7b02 	vstmia	r2!, {d7}
   1037a:	d008      	beq.n	1038e <__kernel_rem_pio2+0x86>
   1037c:	2b00      	cmp	r3, #0
   1037e:	daf2      	bge.n	10366 <__kernel_rem_pio2+0x5e>
   10380:	eeb0 7b46 	vmov.f64	d7, d6
   10384:	3301      	adds	r3, #1
   10386:	428b      	cmp	r3, r1
   10388:	eca2 7b02 	vstmia	r2!, {d7}
   1038c:	d1f6      	bne.n	1037c <__kernel_rem_pio2+0x74>
   1038e:	2d00      	cmp	r5, #0
   10390:	f2c0 82c9 	blt.w	10926 <__kernel_rem_pio2+0x61e>
   10394:	9b04      	ldr	r3, [sp, #16]
   10396:	aa1c      	add	r2, sp, #112	; 0x70
   10398:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1039c:	ae6c      	add	r6, sp, #432	; 0x1b0
   1039e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   103a2:	4640      	mov	r0, r8
   103a4:	18ef      	adds	r7, r5, r3
   103a6:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   103aa:	f1b8 0f00 	cmp.w	r8, #0
   103ae:	ed9f 7b80 	vldr	d7, [pc, #512]	; 105b0 <__kernel_rem_pio2+0x2a8>
   103b2:	db09      	blt.n	103c8 <__kernel_rem_pio2+0xc0>
   103b4:	4622      	mov	r2, r4
   103b6:	4653      	mov	r3, sl
   103b8:	ecb3 5b02 	vldmia	r3!, {d5}
   103bc:	ed32 6b02 	vldmdb	r2!, {d6}
   103c0:	428b      	cmp	r3, r1
   103c2:	eea5 7b06 	vfma.f64	d7, d5, d6
   103c6:	d1f7      	bne.n	103b8 <__kernel_rem_pio2+0xb0>
   103c8:	3001      	adds	r0, #1
   103ca:	42b8      	cmp	r0, r7
   103cc:	eca6 7b02 	vstmia	r6!, {d7}
   103d0:	f104 0408 	add.w	r4, r4, #8
   103d4:	d1e9      	bne.n	103aa <__kernel_rem_pio2+0xa2>
   103d6:	af08      	add	r7, sp, #32
   103d8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   103dc:	ed9f 9b76 	vldr	d9, [pc, #472]	; 105b8 <__kernel_rem_pio2+0x2b0>
   103e0:	ed9f 8b77 	vldr	d8, [pc, #476]	; 105c0 <__kernel_rem_pio2+0x2b8>
   103e4:	3b04      	subs	r3, #4
   103e6:	f8dd b018 	ldr.w	fp, [sp, #24]
   103ea:	9305      	str	r3, [sp, #20]
   103ec:	eb0a 040c 	add.w	r4, sl, ip
   103f0:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   103f4:	ae6c      	add	r6, sp, #432	; 0x1b0
   103f6:	4629      	mov	r1, r5
   103f8:	9501      	str	r5, [sp, #4]
   103fa:	ab94      	add	r3, sp, #592	; 0x250
   103fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10400:	2900      	cmp	r1, #0
   10402:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   10406:	dd16      	ble.n	10436 <__kernel_rem_pio2+0x12e>
   10408:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   1040c:	463a      	mov	r2, r7
   1040e:	ee20 7b09 	vmul.f64	d7, d0, d9
   10412:	ed33 5b02 	vldmdb	r3!, {d5}
   10416:	eeb0 6b40 	vmov.f64	d6, d0
   1041a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1041e:	42b3      	cmp	r3, r6
   10420:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10424:	eea7 6b48 	vfms.f64	d6, d7, d8
   10428:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   1042c:	ee37 0b05 	vadd.f64	d0, d7, d5
   10430:	eca2 6a01 	vstmia	r2!, {s12}
   10434:	d1eb      	bne.n	1040e <__kernel_rem_pio2+0x106>
   10436:	4658      	mov	r0, fp
   10438:	9102      	str	r1, [sp, #8]
   1043a:	f000 fb41 	bl	10ac0 <scalbn>
   1043e:	eeb0 ab40 	vmov.f64	d10, d0
   10442:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   10446:	ee2a 0b00 	vmul.f64	d0, d10, d0
   1044a:	f000 fab1 	bl	109b0 <floor>
   1044e:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   10452:	eea0 ab47 	vfms.f64	d10, d0, d7
   10456:	eebd bbca 	vcvt.s32.f64	s22, d10
   1045a:	f1bb 0f00 	cmp.w	fp, #0
   1045e:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   10462:	9902      	ldr	r1, [sp, #8]
   10464:	ee3a ab47 	vsub.f64	d10, d10, d7
   10468:	dd74      	ble.n	10554 <__kernel_rem_pio2+0x24c>
   1046a:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1046e:	f1cb 0318 	rsb	r3, fp, #24
   10472:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   10476:	fa42 fc03 	asr.w	ip, r2, r3
   1047a:	fa0c f303 	lsl.w	r3, ip, r3
   1047e:	1ad2      	subs	r2, r2, r3
   10480:	f1cb 0017 	rsb	r0, fp, #23
   10484:	ee1b 3a10 	vmov	r3, s22
   10488:	fa42 f500 	asr.w	r5, r2, r0
   1048c:	4463      	add	r3, ip
   1048e:	2d00      	cmp	r5, #0
   10490:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   10494:	ee0b 3a10 	vmov	s22, r3
   10498:	dc64      	bgt.n	10564 <__kernel_rem_pio2+0x25c>
   1049a:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1049e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104a2:	f040 80c4 	bne.w	1062e <__kernel_rem_pio2+0x326>
   104a6:	9b01      	ldr	r3, [sp, #4]
   104a8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   104ac:	4573      	cmp	r3, lr
   104ae:	dc0d      	bgt.n	104cc <__kernel_rem_pio2+0x1c4>
   104b0:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   104b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   104b8:	2000      	movs	r0, #0
   104ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   104be:	454b      	cmp	r3, r9
   104c0:	ea40 0002 	orr.w	r0, r0, r2
   104c4:	d1f9      	bne.n	104ba <__kernel_rem_pio2+0x1b2>
   104c6:	2800      	cmp	r0, #0
   104c8:	f040 80f2 	bne.w	106b0 <__kernel_rem_pio2+0x3a8>
   104cc:	9b01      	ldr	r3, [sp, #4]
   104ce:	3b01      	subs	r3, #1
   104d0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   104d4:	2b00      	cmp	r3, #0
   104d6:	f040 80e6 	bne.w	106a6 <__kernel_rem_pio2+0x39e>
   104da:	9b05      	ldr	r3, [sp, #20]
   104dc:	2501      	movs	r5, #1
   104de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   104e2:	3501      	adds	r5, #1
   104e4:	2a00      	cmp	r2, #0
   104e6:	d0fa      	beq.n	104de <__kernel_rem_pio2+0x1d6>
   104e8:	f101 0e01 	add.w	lr, r1, #1
   104ec:	440d      	add	r5, r1
   104ee:	4670      	mov	r0, lr
   104f0:	9b04      	ldr	r3, [sp, #16]
   104f2:	4419      	add	r1, r3
   104f4:	9b03      	ldr	r3, [sp, #12]
   104f6:	eb03 0c0e 	add.w	ip, r3, lr
   104fa:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   104fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   10500:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10504:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   10508:	ab1c      	add	r3, sp, #112	; 0x70
   1050a:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   1050e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10512:	ed9c 7a01 	vldr	s14, [ip, #4]
   10516:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1051a:	f1b8 0f00 	cmp.w	r8, #0
   1051e:	ed81 7b00 	vstr	d7, [r1]
   10522:	f10c 0c04 	add.w	ip, ip, #4
   10526:	460a      	mov	r2, r1
   10528:	ed9f 6b21 	vldr	d6, [pc, #132]	; 105b0 <__kernel_rem_pio2+0x2a8>
   1052c:	f101 0108 	add.w	r1, r1, #8
   10530:	db09      	blt.n	10546 <__kernel_rem_pio2+0x23e>
   10532:	4653      	mov	r3, sl
   10534:	e001      	b.n	1053a <__kernel_rem_pio2+0x232>
   10536:	ed32 7b02 	vldmdb	r2!, {d7}
   1053a:	ecb3 5b02 	vldmia	r3!, {d5}
   1053e:	42a3      	cmp	r3, r4
   10540:	eea5 6b07 	vfma.f64	d6, d5, d7
   10544:	d1f7      	bne.n	10536 <__kernel_rem_pio2+0x22e>
   10546:	3001      	adds	r0, #1
   10548:	42a8      	cmp	r0, r5
   1054a:	ecae 6b02 	vstmia	lr!, {d6}
   1054e:	dde0      	ble.n	10512 <__kernel_rem_pio2+0x20a>
   10550:	4629      	mov	r1, r5
   10552:	e752      	b.n	103fa <__kernel_rem_pio2+0xf2>
   10554:	f040 809d 	bne.w	10692 <__kernel_rem_pio2+0x38a>
   10558:	1e4b      	subs	r3, r1, #1
   1055a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   1055e:	15ed      	asrs	r5, r5, #23
   10560:	2d00      	cmp	r5, #0
   10562:	dd9a      	ble.n	1049a <__kernel_rem_pio2+0x192>
   10564:	ee1b 3a10 	vmov	r3, s22
   10568:	2900      	cmp	r1, #0
   1056a:	f103 0301 	add.w	r3, r3, #1
   1056e:	ee0b 3a10 	vmov	s22, r3
   10572:	f340 818c 	ble.w	1088e <__kernel_rem_pio2+0x586>
   10576:	683a      	ldr	r2, [r7, #0]
   10578:	2a00      	cmp	r2, #0
   1057a:	f040 8082 	bne.w	10682 <__kernel_rem_pio2+0x37a>
   1057e:	2901      	cmp	r1, #1
   10580:	d02d      	beq.n	105de <__kernel_rem_pio2+0x2d6>
   10582:	463b      	mov	r3, r7
   10584:	2001      	movs	r0, #1
   10586:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1058a:	2a00      	cmp	r2, #0
   1058c:	d07c      	beq.n	10688 <__kernel_rem_pio2+0x380>
   1058e:	1c43      	adds	r3, r0, #1
   10590:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   10594:	4299      	cmp	r1, r3
   10596:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   1059a:	dd1f      	ble.n	105dc <__kernel_rem_pio2+0x2d4>
   1059c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   105a0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   105a4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   105a8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   105ac:	e011      	b.n	105d2 <__kernel_rem_pio2+0x2ca>
   105ae:	bf00      	nop
	...
   105bc:	3e700000 	.word	0x3e700000
   105c0:	00000000 	.word	0x00000000
   105c4:	41700000 	.word	0x41700000
   105c8:	20002ba0 	.word	0x20002ba0
   105cc:	2aaaaaab 	.word	0x2aaaaaab
   105d0:	681a      	ldr	r2, [r3, #0]
   105d2:	1a82      	subs	r2, r0, r2
   105d4:	f843 2b04 	str.w	r2, [r3], #4
   105d8:	4563      	cmp	r3, ip
   105da:	d1f9      	bne.n	105d0 <__kernel_rem_pio2+0x2c8>
   105dc:	2201      	movs	r2, #1
   105de:	f1bb 0f00 	cmp.w	fp, #0
   105e2:	dd0d      	ble.n	10600 <__kernel_rem_pio2+0x2f8>
   105e4:	f1bb 0f01 	cmp.w	fp, #1
   105e8:	f000 8133 	beq.w	10852 <__kernel_rem_pio2+0x54a>
   105ec:	f1bb 0f02 	cmp.w	fp, #2
   105f0:	d106      	bne.n	10600 <__kernel_rem_pio2+0x2f8>
   105f2:	1e48      	subs	r0, r1, #1
   105f4:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   105f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
   105fc:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10600:	2d02      	cmp	r5, #2
   10602:	f47f af4a 	bne.w	1049a <__kernel_rem_pio2+0x192>
   10606:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1060a:	ee30 ab4a 	vsub.f64	d10, d0, d10
   1060e:	2a00      	cmp	r2, #0
   10610:	f43f af43 	beq.w	1049a <__kernel_rem_pio2+0x192>
   10614:	4658      	mov	r0, fp
   10616:	9102      	str	r1, [sp, #8]
   10618:	f000 fa52 	bl	10ac0 <scalbn>
   1061c:	ee3a ab40 	vsub.f64	d10, d10, d0
   10620:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10628:	9902      	ldr	r1, [sp, #8]
   1062a:	f43f af3c 	beq.w	104a6 <__kernel_rem_pio2+0x19e>
   1062e:	9c06      	ldr	r4, [sp, #24]
   10630:	eeb0 0b4a 	vmov.f64	d0, d10
   10634:	4260      	negs	r0, r4
   10636:	46a8      	mov	r8, r5
   10638:	468b      	mov	fp, r1
   1063a:	9d01      	ldr	r5, [sp, #4]
   1063c:	f000 fa40 	bl	10ac0 <scalbn>
   10640:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 10948 <__kernel_rem_pio2+0x640>
   10644:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1064c:	f2c0 8147 	blt.w	108de <__kernel_rem_pio2+0x5d6>
   10650:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 10950 <__kernel_rem_pio2+0x648>
   10654:	ee20 7b07 	vmul.f64	d7, d0, d7
   10658:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1065c:	f10b 0201 	add.w	r2, fp, #1
   10660:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   10664:	eea5 0b46 	vfms.f64	d0, d5, d6
   10668:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1066c:	3418      	adds	r4, #24
   1066e:	ee10 3a10 	vmov	r3, s0
   10672:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   10676:	ee17 3a10 	vmov	r3, s14
   1067a:	9406      	str	r4, [sp, #24]
   1067c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   10680:	e02a      	b.n	106d8 <__kernel_rem_pio2+0x3d0>
   10682:	2301      	movs	r3, #1
   10684:	2000      	movs	r0, #0
   10686:	e783      	b.n	10590 <__kernel_rem_pio2+0x288>
   10688:	3001      	adds	r0, #1
   1068a:	4288      	cmp	r0, r1
   1068c:	f47f af7b 	bne.w	10586 <__kernel_rem_pio2+0x27e>
   10690:	e7a5      	b.n	105de <__kernel_rem_pio2+0x2d6>
   10692:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   10696:	eeb4 abc7 	vcmpe.f64	d10, d7
   1069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1069e:	f280 80e5 	bge.w	1086c <__kernel_rem_pio2+0x564>
   106a2:	2500      	movs	r5, #0
   106a4:	e6f9      	b.n	1049a <__kernel_rem_pio2+0x192>
   106a6:	f101 0e01 	add.w	lr, r1, #1
   106aa:	4670      	mov	r0, lr
   106ac:	4675      	mov	r5, lr
   106ae:	e71f      	b.n	104f0 <__kernel_rem_pio2+0x1e8>
   106b0:	9b06      	ldr	r3, [sp, #24]
   106b2:	f1a3 0118 	sub.w	r1, r3, #24
   106b6:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   106ba:	9106      	str	r1, [sp, #24]
   106bc:	46a8      	mov	r8, r5
   106be:	4672      	mov	r2, lr
   106c0:	9d01      	ldr	r5, [sp, #4]
   106c2:	b94b      	cbnz	r3, 106d8 <__kernel_rem_pio2+0x3d0>
   106c4:	f1ac 0304 	sub.w	r3, ip, #4
   106c8:	443b      	add	r3, r7
   106ca:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   106ce:	3a01      	subs	r2, #1
   106d0:	3918      	subs	r1, #24
   106d2:	2800      	cmp	r0, #0
   106d4:	d0f9      	beq.n	106ca <__kernel_rem_pio2+0x3c2>
   106d6:	9106      	str	r1, [sp, #24]
   106d8:	9806      	ldr	r0, [sp, #24]
   106da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   106de:	9201      	str	r2, [sp, #4]
   106e0:	f000 f9ee 	bl	10ac0 <scalbn>
   106e4:	9a01      	ldr	r2, [sp, #4]
   106e6:	2a00      	cmp	r2, #0
   106e8:	f2c0 8121 	blt.w	1092e <__kernel_rem_pio2+0x626>
   106ec:	ed9f 6b98 	vldr	d6, [pc, #608]	; 10950 <__kernel_rem_pio2+0x648>
   106f0:	f102 0c01 	add.w	ip, r2, #1
   106f4:	a96c      	add	r1, sp, #432	; 0x1b0
   106f6:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   106fa:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   106fe:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   10702:	ed33 7a01 	vldmdb	r3!, {s14}
   10706:	42bb      	cmp	r3, r7
   10708:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1070c:	ee27 7b00 	vmul.f64	d7, d7, d0
   10710:	ee20 0b06 	vmul.f64	d0, d0, d6
   10714:	ed21 7b02 	vstmdb	r1!, {d7}
   10718:	d1f3      	bne.n	10702 <__kernel_rem_pio2+0x3fa>
   1071a:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 10958 <__kernel_rem_pio2+0x650>
   1071e:	f1ae 0308 	sub.w	r3, lr, #8
   10722:	a96c      	add	r1, sp, #432	; 0x1b0
   10724:	18ce      	adds	r6, r1, r3
   10726:	2400      	movs	r4, #0
   10728:	af44      	add	r7, sp, #272	; 0x110
   1072a:	2d00      	cmp	r5, #0
   1072c:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 10960 <__kernel_rem_pio2+0x658>
   10730:	db10      	blt.n	10754 <__kernel_rem_pio2+0x44c>
   10732:	eeb0 6b44 	vmov.f64	d6, d4
   10736:	488c      	ldr	r0, [pc, #560]	; (10968 <__kernel_rem_pio2+0x660>)
   10738:	4631      	mov	r1, r6
   1073a:	2300      	movs	r3, #0
   1073c:	e003      	b.n	10746 <__kernel_rem_pio2+0x43e>
   1073e:	429c      	cmp	r4, r3
   10740:	db08      	blt.n	10754 <__kernel_rem_pio2+0x44c>
   10742:	ecb0 6b02 	vldmia	r0!, {d6}
   10746:	ecb1 5b02 	vldmia	r1!, {d5}
   1074a:	3301      	adds	r3, #1
   1074c:	429d      	cmp	r5, r3
   1074e:	eea5 7b06 	vfma.f64	d7, d5, d6
   10752:	daf4      	bge.n	1073e <__kernel_rem_pio2+0x436>
   10754:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   10758:	4294      	cmp	r4, r2
   1075a:	ed83 7b00 	vstr	d7, [r3]
   1075e:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   10762:	f104 0301 	add.w	r3, r4, #1
   10766:	f1a6 0608 	sub.w	r6, r6, #8
   1076a:	d001      	beq.n	10770 <__kernel_rem_pio2+0x468>
   1076c:	461c      	mov	r4, r3
   1076e:	e7dc      	b.n	1072a <__kernel_rem_pio2+0x422>
   10770:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10772:	2b02      	cmp	r3, #2
   10774:	dc1d      	bgt.n	107b2 <__kernel_rem_pio2+0x4aa>
   10776:	2b00      	cmp	r3, #0
   10778:	f300 808b 	bgt.w	10892 <__kernel_rem_pio2+0x58a>
   1077c:	d10f      	bne.n	1079e <__kernel_rem_pio2+0x496>
   1077e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 10960 <__kernel_rem_pio2+0x658>
   10782:	44be      	add	lr, r7
   10784:	ed3e 6b02 	vldmdb	lr!, {d6}
   10788:	4577      	cmp	r7, lr
   1078a:	ee37 7b06 	vadd.f64	d7, d7, d6
   1078e:	d1f9      	bne.n	10784 <__kernel_rem_pio2+0x47c>
   10790:	4643      	mov	r3, r8
   10792:	b10b      	cbz	r3, 10798 <__kernel_rem_pio2+0x490>
   10794:	eeb1 7b47 	vneg.f64	d7, d7
   10798:	9b07      	ldr	r3, [sp, #28]
   1079a:	ed83 7b00 	vstr	d7, [r3]
   1079e:	ee1b 3a10 	vmov	r3, s22
   107a2:	f003 0007 	and.w	r0, r3, #7
   107a6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   107aa:	ecbd 8b08 	vpop	{d8-d11}
   107ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107b2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   107b4:	2b03      	cmp	r3, #3
   107b6:	d1f2      	bne.n	1079e <__kernel_rem_pio2+0x496>
   107b8:	2a00      	cmp	r2, #0
   107ba:	f000 80e3 	beq.w	10984 <__kernel_rem_pio2+0x67c>
   107be:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   107c2:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   107c6:	ed30 6b02 	vldmdb	r0!, {d6}
   107ca:	eeb0 5b47 	vmov.f64	d5, d7
   107ce:	4287      	cmp	r7, r0
   107d0:	ee37 7b06 	vadd.f64	d7, d7, d6
   107d4:	ee36 6b47 	vsub.f64	d6, d6, d7
   107d8:	ed80 7b00 	vstr	d7, [r0]
   107dc:	ee36 6b05 	vadd.f64	d6, d6, d5
   107e0:	ed80 6b02 	vstr	d6, [r0, #8]
   107e4:	d1ef      	bne.n	107c6 <__kernel_rem_pio2+0x4be>
   107e6:	2a01      	cmp	r2, #1
   107e8:	f340 80cc 	ble.w	10984 <__kernel_rem_pio2+0x67c>
   107ec:	4439      	add	r1, r7
   107ee:	ed91 6b00 	vldr	d6, [r1]
   107f2:	00da      	lsls	r2, r3, #3
   107f4:	a946      	add	r1, sp, #280	; 0x118
   107f6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   107fa:	ed33 7b02 	vldmdb	r3!, {d7}
   107fe:	eeb0 5b46 	vmov.f64	d5, d6
   10802:	4299      	cmp	r1, r3
   10804:	ee36 6b07 	vadd.f64	d6, d6, d7
   10808:	ee37 7b46 	vsub.f64	d7, d7, d6
   1080c:	ed83 6b00 	vstr	d6, [r3]
   10810:	ee37 7b05 	vadd.f64	d7, d7, d5
   10814:	ed83 7b02 	vstr	d7, [r3, #8]
   10818:	d1ef      	bne.n	107fa <__kernel_rem_pio2+0x4f2>
   1081a:	ed9f 7b51 	vldr	d7, [pc, #324]	; 10960 <__kernel_rem_pio2+0x658>
   1081e:	f102 0308 	add.w	r3, r2, #8
   10822:	443b      	add	r3, r7
   10824:	f107 0210 	add.w	r2, r7, #16
   10828:	ed33 6b02 	vldmdb	r3!, {d6}
   1082c:	429a      	cmp	r2, r3
   1082e:	ee37 7b06 	vadd.f64	d7, d7, d6
   10832:	d1f9      	bne.n	10828 <__kernel_rem_pio2+0x520>
   10834:	4643      	mov	r3, r8
   10836:	2b00      	cmp	r3, #0
   10838:	d159      	bne.n	108ee <__kernel_rem_pio2+0x5e6>
   1083a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1083e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10842:	9c07      	ldr	r4, [sp, #28]
   10844:	ed84 7b04 	vstr	d7, [r4, #16]
   10848:	e9c4 0100 	strd	r0, r1, [r4]
   1084c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   10850:	e7a5      	b.n	1079e <__kernel_rem_pio2+0x496>
   10852:	1e48      	subs	r0, r1, #1
   10854:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10858:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1085c:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10860:	e6ce      	b.n	10600 <__kernel_rem_pio2+0x2f8>
   10862:	2100      	movs	r1, #0
   10864:	f06f 0317 	mvn.w	r3, #23
   10868:	9103      	str	r1, [sp, #12]
   1086a:	e56d      	b.n	10348 <__kernel_rem_pio2+0x40>
   1086c:	ee1b 3a10 	vmov	r3, s22
   10870:	2900      	cmp	r1, #0
   10872:	f103 0301 	add.w	r3, r3, #1
   10876:	ee0b 3a10 	vmov	s22, r3
   1087a:	bfc8      	it	gt
   1087c:	2502      	movgt	r5, #2
   1087e:	f73f ae7a 	bgt.w	10576 <__kernel_rem_pio2+0x26e>
   10882:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10886:	ee37 ab4a 	vsub.f64	d10, d7, d10
   1088a:	2502      	movs	r5, #2
   1088c:	e605      	b.n	1049a <__kernel_rem_pio2+0x192>
   1088e:	2200      	movs	r2, #0
   10890:	e6a5      	b.n	105de <__kernel_rem_pio2+0x2d6>
   10892:	ed9f 7b33 	vldr	d7, [pc, #204]	; 10960 <__kernel_rem_pio2+0x658>
   10896:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   1089a:	ed3c 6b02 	vldmdb	ip!, {d6}
   1089e:	4567      	cmp	r7, ip
   108a0:	ee37 7b06 	vadd.f64	d7, d7, d6
   108a4:	d1f9      	bne.n	1089a <__kernel_rem_pio2+0x592>
   108a6:	4643      	mov	r3, r8
   108a8:	ed97 6b00 	vldr	d6, [r7]
   108ac:	bb8b      	cbnz	r3, 10912 <__kernel_rem_pio2+0x60a>
   108ae:	9b07      	ldr	r3, [sp, #28]
   108b0:	2a00      	cmp	r2, #0
   108b2:	ed83 7b00 	vstr	d7, [r3]
   108b6:	ee36 7b47 	vsub.f64	d7, d6, d7
   108ba:	dd0c      	ble.n	108d6 <__kernel_rem_pio2+0x5ce>
   108bc:	a946      	add	r1, sp, #280	; 0x118
   108be:	2301      	movs	r3, #1
   108c0:	ecb1 6b02 	vldmia	r1!, {d6}
   108c4:	3301      	adds	r3, #1
   108c6:	429a      	cmp	r2, r3
   108c8:	ee37 7b06 	vadd.f64	d7, d7, d6
   108cc:	daf8      	bge.n	108c0 <__kernel_rem_pio2+0x5b8>
   108ce:	4643      	mov	r3, r8
   108d0:	b10b      	cbz	r3, 108d6 <__kernel_rem_pio2+0x5ce>
   108d2:	eeb1 7b47 	vneg.f64	d7, d7
   108d6:	9b07      	ldr	r3, [sp, #28]
   108d8:	ed83 7b02 	vstr	d7, [r3, #8]
   108dc:	e75f      	b.n	1079e <__kernel_rem_pio2+0x496>
   108de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   108e2:	465a      	mov	r2, fp
   108e4:	ee10 3a10 	vmov	r3, s0
   108e8:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   108ec:	e6f4      	b.n	106d8 <__kernel_rem_pio2+0x3d0>
   108ee:	ed97 5b00 	vldr	d5, [r7]
   108f2:	eeb1 7b47 	vneg.f64	d7, d7
   108f6:	ed97 6b02 	vldr	d6, [r7, #8]
   108fa:	eeb1 5b45 	vneg.f64	d5, d5
   108fe:	9b07      	ldr	r3, [sp, #28]
   10900:	eeb1 6b46 	vneg.f64	d6, d6
   10904:	ed83 5b00 	vstr	d5, [r3]
   10908:	ed83 6b02 	vstr	d6, [r3, #8]
   1090c:	ed83 7b04 	vstr	d7, [r3, #16]
   10910:	e745      	b.n	1079e <__kernel_rem_pio2+0x496>
   10912:	9b07      	ldr	r3, [sp, #28]
   10914:	eeb1 5b47 	vneg.f64	d5, d7
   10918:	2a00      	cmp	r2, #0
   1091a:	ed83 5b00 	vstr	d5, [r3]
   1091e:	ee36 7b47 	vsub.f64	d7, d6, d7
   10922:	dccb      	bgt.n	108bc <__kernel_rem_pio2+0x5b4>
   10924:	e7d5      	b.n	108d2 <__kernel_rem_pio2+0x5ca>
   10926:	9b04      	ldr	r3, [sp, #16]
   10928:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1092c:	e553      	b.n	103d6 <__kernel_rem_pio2+0xce>
   1092e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10930:	2b02      	cmp	r3, #2
   10932:	dc1b      	bgt.n	1096c <__kernel_rem_pio2+0x664>
   10934:	2b00      	cmp	r3, #0
   10936:	dc21      	bgt.n	1097c <__kernel_rem_pio2+0x674>
   10938:	f47f af31 	bne.w	1079e <__kernel_rem_pio2+0x496>
   1093c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 10960 <__kernel_rem_pio2+0x658>
   10940:	e726      	b.n	10790 <__kernel_rem_pio2+0x488>
   10942:	bf00      	nop
   10944:	f3af 8000 	nop.w
   10948:	00000000 	.word	0x00000000
   1094c:	41700000 	.word	0x41700000
   10950:	00000000 	.word	0x00000000
   10954:	3e700000 	.word	0x3e700000
   10958:	40000000 	.word	0x40000000
   1095c:	3ff921fb 	.word	0x3ff921fb
	...
   10968:	20000288 	.word	0x20000288
   1096c:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1096e:	2b03      	cmp	r3, #3
   10970:	f47f af15 	bne.w	1079e <__kernel_rem_pio2+0x496>
   10974:	ed9f 7b06 	vldr	d7, [pc, #24]	; 10990 <__kernel_rem_pio2+0x688>
   10978:	af44      	add	r7, sp, #272	; 0x110
   1097a:	e75b      	b.n	10834 <__kernel_rem_pio2+0x52c>
   1097c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 10990 <__kernel_rem_pio2+0x688>
   10980:	af44      	add	r7, sp, #272	; 0x110
   10982:	e790      	b.n	108a6 <__kernel_rem_pio2+0x59e>
   10984:	ed9f 7b02 	vldr	d7, [pc, #8]	; 10990 <__kernel_rem_pio2+0x688>
   10988:	e754      	b.n	10834 <__kernel_rem_pio2+0x52c>
   1098a:	bf00      	nop
   1098c:	f3af 8000 	nop.w
	...

00010998 <fabs>:
   10998:	ec51 0b10 	vmov	r0, r1, d0
   1099c:	ee10 2a10 	vmov	r2, s0
   109a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   109a4:	ec43 2b10 	vmov	d0, r2, r3
   109a8:	4770      	bx	lr
   109aa:	bf00      	nop
   109ac:	0000      	movs	r0, r0
	...

000109b0 <floor>:
   109b0:	b510      	push	{r4, lr}
   109b2:	b082      	sub	sp, #8
   109b4:	ed8d 0b00 	vstr	d0, [sp]
   109b8:	9901      	ldr	r1, [sp, #4]
   109ba:	9800      	ldr	r0, [sp, #0]
   109bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
   109c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   109c4:	2b13      	cmp	r3, #19
   109c6:	4684      	mov	ip, r0
   109c8:	dc31      	bgt.n	10a2e <floor+0x7e>
   109ca:	2b00      	cmp	r3, #0
   109cc:	db21      	blt.n	10a12 <floor+0x62>
   109ce:	4a3a      	ldr	r2, [pc, #232]	; (10ab8 <floor+0x108>)
   109d0:	411a      	asrs	r2, r3
   109d2:	ea01 0402 	and.w	r4, r1, r2
   109d6:	4304      	orrs	r4, r0
   109d8:	468e      	mov	lr, r1
   109da:	d02d      	beq.n	10a38 <floor+0x88>
   109dc:	ed9f 7b34 	vldr	d7, [pc, #208]	; 10ab0 <floor+0x100>
   109e0:	ed9d 6b00 	vldr	d6, [sp]
   109e4:	ee36 7b07 	vadd.f64	d7, d6, d7
   109e8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   109ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109f0:	dd09      	ble.n	10a06 <floor+0x56>
   109f2:	2900      	cmp	r1, #0
   109f4:	da04      	bge.n	10a00 <floor+0x50>
   109f6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   109fa:	fa41 f303 	asr.w	r3, r1, r3
   109fe:	449e      	add	lr, r3
   10a00:	ea2e 0102 	bic.w	r1, lr, r2
   10a04:	2000      	movs	r0, #0
   10a06:	460b      	mov	r3, r1
   10a08:	4602      	mov	r2, r0
   10a0a:	ec43 2b10 	vmov	d0, r2, r3
   10a0e:	b002      	add	sp, #8
   10a10:	bd10      	pop	{r4, pc}
   10a12:	ed9f 7b27 	vldr	d7, [pc, #156]	; 10ab0 <floor+0x100>
   10a16:	ee30 7b07 	vadd.f64	d7, d0, d7
   10a1a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a22:	ddf0      	ble.n	10a06 <floor+0x56>
   10a24:	2900      	cmp	r1, #0
   10a26:	db28      	blt.n	10a7a <floor+0xca>
   10a28:	2000      	movs	r0, #0
   10a2a:	4601      	mov	r1, r0
   10a2c:	e7eb      	b.n	10a06 <floor+0x56>
   10a2e:	2b33      	cmp	r3, #51	; 0x33
   10a30:	dd06      	ble.n	10a40 <floor+0x90>
   10a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10a36:	d01b      	beq.n	10a70 <floor+0xc0>
   10a38:	ed9d 0b00 	vldr	d0, [sp]
   10a3c:	b002      	add	sp, #8
   10a3e:	bd10      	pop	{r4, pc}
   10a40:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   10a44:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   10a48:	fa2e f202 	lsr.w	r2, lr, r2
   10a4c:	4210      	tst	r0, r2
   10a4e:	d0f3      	beq.n	10a38 <floor+0x88>
   10a50:	ed9f 7b17 	vldr	d7, [pc, #92]	; 10ab0 <floor+0x100>
   10a54:	ed9d 6b00 	vldr	d6, [sp]
   10a58:	ee36 7b07 	vadd.f64	d7, d6, d7
   10a5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a64:	ddcf      	ble.n	10a06 <floor+0x56>
   10a66:	2900      	cmp	r1, #0
   10a68:	db13      	blt.n	10a92 <floor+0xe2>
   10a6a:	ea2c 0002 	bic.w	r0, ip, r2
   10a6e:	e7ca      	b.n	10a06 <floor+0x56>
   10a70:	ed9d 7b00 	vldr	d7, [sp]
   10a74:	ee37 0b07 	vadd.f64	d0, d7, d7
   10a78:	e7e0      	b.n	10a3c <floor+0x8c>
   10a7a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10a7e:	4301      	orrs	r1, r0
   10a80:	4b0e      	ldr	r3, [pc, #56]	; (10abc <floor+0x10c>)
   10a82:	2900      	cmp	r1, #0
   10a84:	f04f 0000 	mov.w	r0, #0
   10a88:	bf0c      	ite	eq
   10a8a:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   10a8e:	4619      	movne	r1, r3
   10a90:	e7b9      	b.n	10a06 <floor+0x56>
   10a92:	2b14      	cmp	r3, #20
   10a94:	d009      	beq.n	10aaa <floor+0xfa>
   10a96:	2401      	movs	r4, #1
   10a98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   10a9c:	fa04 f303 	lsl.w	r3, r4, r3
   10aa0:	449c      	add	ip, r3
   10aa2:	4560      	cmp	r0, ip
   10aa4:	bf88      	it	hi
   10aa6:	1909      	addhi	r1, r1, r4
   10aa8:	e7df      	b.n	10a6a <floor+0xba>
   10aaa:	3101      	adds	r1, #1
   10aac:	e7dd      	b.n	10a6a <floor+0xba>
   10aae:	bf00      	nop
   10ab0:	8800759c 	.word	0x8800759c
   10ab4:	7e37e43c 	.word	0x7e37e43c
   10ab8:	000fffff 	.word	0x000fffff
   10abc:	bff00000 	.word	0xbff00000

00010ac0 <scalbn>:
   10ac0:	ec53 2b10 	vmov	r2, r3, d0
   10ac4:	b410      	push	{r4}
   10ac6:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10aca:	4619      	mov	r1, r3
   10acc:	bb74      	cbnz	r4, 10b2c <scalbn+0x6c>
   10ace:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   10ad2:	4311      	orrs	r1, r2
   10ad4:	d027      	beq.n	10b26 <scalbn+0x66>
   10ad6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 10b98 <scalbn+0xd8>
   10ada:	493b      	ldr	r1, [pc, #236]	; (10bc8 <scalbn+0x108>)
   10adc:	ee20 7b07 	vmul.f64	d7, d0, d7
   10ae0:	4288      	cmp	r0, r1
   10ae2:	ec53 2b17 	vmov	r2, r3, d7
   10ae6:	db43      	blt.n	10b70 <scalbn+0xb0>
   10ae8:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10aec:	4619      	mov	r1, r3
   10aee:	3c36      	subs	r4, #54	; 0x36
   10af0:	f24c 3c50 	movw	ip, #50000	; 0xc350
   10af4:	4560      	cmp	r0, ip
   10af6:	dc22      	bgt.n	10b3e <scalbn+0x7e>
   10af8:	4420      	add	r0, r4
   10afa:	f240 74fe 	movw	r4, #2046	; 0x7fe
   10afe:	42a0      	cmp	r0, r4
   10b00:	dc1d      	bgt.n	10b3e <scalbn+0x7e>
   10b02:	2800      	cmp	r0, #0
   10b04:	dc29      	bgt.n	10b5a <scalbn+0x9a>
   10b06:	f110 0f35 	cmn.w	r0, #53	; 0x35
   10b0a:	db38      	blt.n	10b7e <scalbn+0xbe>
   10b0c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10b10:	3036      	adds	r0, #54	; 0x36
   10b12:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10b16:	ed9f 7b22 	vldr	d7, [pc, #136]	; 10ba0 <scalbn+0xe0>
   10b1a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10b1e:	ec43 2b10 	vmov	d0, r2, r3
   10b22:	ee20 0b07 	vmul.f64	d0, d0, d7
   10b26:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b2a:	4770      	bx	lr
   10b2c:	f240 7cff 	movw	ip, #2047	; 0x7ff
   10b30:	4564      	cmp	r4, ip
   10b32:	d1dd      	bne.n	10af0 <scalbn+0x30>
   10b34:	ee30 0b00 	vadd.f64	d0, d0, d0
   10b38:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b3c:	4770      	bx	lr
   10b3e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 10ba8 <scalbn+0xe8>
   10b42:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 10bb0 <scalbn+0xf0>
   10b46:	eeb0 0b47 	vmov.f64	d0, d7
   10b4a:	2b00      	cmp	r3, #0
   10b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b50:	fe27 7b05 	vselge.f64	d7, d7, d5
   10b54:	ee27 0b00 	vmul.f64	d0, d7, d0
   10b58:	4770      	bx	lr
   10b5a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10b5e:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10b62:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10b66:	ec43 2b10 	vmov	d0, r2, r3
   10b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b6e:	4770      	bx	lr
   10b70:	ed9f 0b11 	vldr	d0, [pc, #68]	; 10bb8 <scalbn+0xf8>
   10b74:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b78:	ee27 0b00 	vmul.f64	d0, d7, d0
   10b7c:	4770      	bx	lr
   10b7e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 10bb8 <scalbn+0xf8>
   10b82:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 10bc0 <scalbn+0x100>
   10b86:	eeb0 0b47 	vmov.f64	d0, d7
   10b8a:	2b00      	cmp	r3, #0
   10b8c:	fe27 7b05 	vselge.f64	d7, d7, d5
   10b90:	ee27 0b00 	vmul.f64	d0, d7, d0
   10b94:	e7c7      	b.n	10b26 <scalbn+0x66>
   10b96:	bf00      	nop
   10b98:	00000000 	.word	0x00000000
   10b9c:	43500000 	.word	0x43500000
   10ba0:	00000000 	.word	0x00000000
   10ba4:	3c900000 	.word	0x3c900000
   10ba8:	8800759c 	.word	0x8800759c
   10bac:	7e37e43c 	.word	0x7e37e43c
   10bb0:	8800759c 	.word	0x8800759c
   10bb4:	fe37e43c 	.word	0xfe37e43c
   10bb8:	c2f8f359 	.word	0xc2f8f359
   10bbc:	01a56e1f 	.word	0x01a56e1f
   10bc0:	c2f8f359 	.word	0xc2f8f359
   10bc4:	81a56e1f 	.word	0x81a56e1f
   10bc8:	ffff3cb0 	.word	0xffff3cb0

00010bcc <__aeabi_atexit>:
   10bcc:	4603      	mov	r3, r0
   10bce:	4608      	mov	r0, r1
   10bd0:	4619      	mov	r1, r3
   10bd2:	f000 be7d 	b.w	118d0 <__cxa_atexit>
   10bd6:	bf00      	nop

00010bd8 <__aeabi_drsub>:
   10bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10bdc:	e002      	b.n	10be4 <__adddf3>
   10bde:	bf00      	nop

00010be0 <__aeabi_dsub>:
   10be0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00010be4 <__adddf3>:
   10be4:	b530      	push	{r4, r5, lr}
   10be6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10bea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10bee:	ea94 0f05 	teq	r4, r5
   10bf2:	bf08      	it	eq
   10bf4:	ea90 0f02 	teqeq	r0, r2
   10bf8:	bf1f      	itttt	ne
   10bfa:	ea54 0c00 	orrsne.w	ip, r4, r0
   10bfe:	ea55 0c02 	orrsne.w	ip, r5, r2
   10c02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   10c06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10c0a:	f000 80e2 	beq.w	10dd2 <__adddf3+0x1ee>
   10c0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   10c12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   10c16:	bfb8      	it	lt
   10c18:	426d      	neglt	r5, r5
   10c1a:	dd0c      	ble.n	10c36 <__adddf3+0x52>
   10c1c:	442c      	add	r4, r5
   10c1e:	ea80 0202 	eor.w	r2, r0, r2
   10c22:	ea81 0303 	eor.w	r3, r1, r3
   10c26:	ea82 0000 	eor.w	r0, r2, r0
   10c2a:	ea83 0101 	eor.w	r1, r3, r1
   10c2e:	ea80 0202 	eor.w	r2, r0, r2
   10c32:	ea81 0303 	eor.w	r3, r1, r3
   10c36:	2d36      	cmp	r5, #54	; 0x36
   10c38:	bf88      	it	hi
   10c3a:	bd30      	pophi	{r4, r5, pc}
   10c3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10c40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10c44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   10c48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   10c4c:	d002      	beq.n	10c54 <__adddf3+0x70>
   10c4e:	4240      	negs	r0, r0
   10c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10c54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   10c58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10c5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   10c60:	d002      	beq.n	10c68 <__adddf3+0x84>
   10c62:	4252      	negs	r2, r2
   10c64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   10c68:	ea94 0f05 	teq	r4, r5
   10c6c:	f000 80a7 	beq.w	10dbe <__adddf3+0x1da>
   10c70:	f1a4 0401 	sub.w	r4, r4, #1
   10c74:	f1d5 0e20 	rsbs	lr, r5, #32
   10c78:	db0d      	blt.n	10c96 <__adddf3+0xb2>
   10c7a:	fa02 fc0e 	lsl.w	ip, r2, lr
   10c7e:	fa22 f205 	lsr.w	r2, r2, r5
   10c82:	1880      	adds	r0, r0, r2
   10c84:	f141 0100 	adc.w	r1, r1, #0
   10c88:	fa03 f20e 	lsl.w	r2, r3, lr
   10c8c:	1880      	adds	r0, r0, r2
   10c8e:	fa43 f305 	asr.w	r3, r3, r5
   10c92:	4159      	adcs	r1, r3
   10c94:	e00e      	b.n	10cb4 <__adddf3+0xd0>
   10c96:	f1a5 0520 	sub.w	r5, r5, #32
   10c9a:	f10e 0e20 	add.w	lr, lr, #32
   10c9e:	2a01      	cmp	r2, #1
   10ca0:	fa03 fc0e 	lsl.w	ip, r3, lr
   10ca4:	bf28      	it	cs
   10ca6:	f04c 0c02 	orrcs.w	ip, ip, #2
   10caa:	fa43 f305 	asr.w	r3, r3, r5
   10cae:	18c0      	adds	r0, r0, r3
   10cb0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   10cb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10cb8:	d507      	bpl.n	10cca <__adddf3+0xe6>
   10cba:	f04f 0e00 	mov.w	lr, #0
   10cbe:	f1dc 0c00 	rsbs	ip, ip, #0
   10cc2:	eb7e 0000 	sbcs.w	r0, lr, r0
   10cc6:	eb6e 0101 	sbc.w	r1, lr, r1
   10cca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10cce:	d31b      	bcc.n	10d08 <__adddf3+0x124>
   10cd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   10cd4:	d30c      	bcc.n	10cf0 <__adddf3+0x10c>
   10cd6:	0849      	lsrs	r1, r1, #1
   10cd8:	ea5f 0030 	movs.w	r0, r0, rrx
   10cdc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10ce0:	f104 0401 	add.w	r4, r4, #1
   10ce4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10ce8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10cec:	f080 809a 	bcs.w	10e24 <__adddf3+0x240>
   10cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   10cf4:	bf08      	it	eq
   10cf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10cfa:	f150 0000 	adcs.w	r0, r0, #0
   10cfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10d02:	ea41 0105 	orr.w	r1, r1, r5
   10d06:	bd30      	pop	{r4, r5, pc}
   10d08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10d0c:	4140      	adcs	r0, r0
   10d0e:	eb41 0101 	adc.w	r1, r1, r1
   10d12:	3c01      	subs	r4, #1
   10d14:	bf28      	it	cs
   10d16:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10d1a:	d2e9      	bcs.n	10cf0 <__adddf3+0x10c>
   10d1c:	f091 0f00 	teq	r1, #0
   10d20:	bf04      	itt	eq
   10d22:	4601      	moveq	r1, r0
   10d24:	2000      	moveq	r0, #0
   10d26:	fab1 f381 	clz	r3, r1
   10d2a:	bf08      	it	eq
   10d2c:	3320      	addeq	r3, #32
   10d2e:	f1a3 030b 	sub.w	r3, r3, #11
   10d32:	f1b3 0220 	subs.w	r2, r3, #32
   10d36:	da0c      	bge.n	10d52 <__adddf3+0x16e>
   10d38:	320c      	adds	r2, #12
   10d3a:	dd08      	ble.n	10d4e <__adddf3+0x16a>
   10d3c:	f102 0c14 	add.w	ip, r2, #20
   10d40:	f1c2 020c 	rsb	r2, r2, #12
   10d44:	fa01 f00c 	lsl.w	r0, r1, ip
   10d48:	fa21 f102 	lsr.w	r1, r1, r2
   10d4c:	e00c      	b.n	10d68 <__adddf3+0x184>
   10d4e:	f102 0214 	add.w	r2, r2, #20
   10d52:	bfd8      	it	le
   10d54:	f1c2 0c20 	rsble	ip, r2, #32
   10d58:	fa01 f102 	lsl.w	r1, r1, r2
   10d5c:	fa20 fc0c 	lsr.w	ip, r0, ip
   10d60:	bfdc      	itt	le
   10d62:	ea41 010c 	orrle.w	r1, r1, ip
   10d66:	4090      	lslle	r0, r2
   10d68:	1ae4      	subs	r4, r4, r3
   10d6a:	bfa2      	ittt	ge
   10d6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   10d70:	4329      	orrge	r1, r5
   10d72:	bd30      	popge	{r4, r5, pc}
   10d74:	ea6f 0404 	mvn.w	r4, r4
   10d78:	3c1f      	subs	r4, #31
   10d7a:	da1c      	bge.n	10db6 <__adddf3+0x1d2>
   10d7c:	340c      	adds	r4, #12
   10d7e:	dc0e      	bgt.n	10d9e <__adddf3+0x1ba>
   10d80:	f104 0414 	add.w	r4, r4, #20
   10d84:	f1c4 0220 	rsb	r2, r4, #32
   10d88:	fa20 f004 	lsr.w	r0, r0, r4
   10d8c:	fa01 f302 	lsl.w	r3, r1, r2
   10d90:	ea40 0003 	orr.w	r0, r0, r3
   10d94:	fa21 f304 	lsr.w	r3, r1, r4
   10d98:	ea45 0103 	orr.w	r1, r5, r3
   10d9c:	bd30      	pop	{r4, r5, pc}
   10d9e:	f1c4 040c 	rsb	r4, r4, #12
   10da2:	f1c4 0220 	rsb	r2, r4, #32
   10da6:	fa20 f002 	lsr.w	r0, r0, r2
   10daa:	fa01 f304 	lsl.w	r3, r1, r4
   10dae:	ea40 0003 	orr.w	r0, r0, r3
   10db2:	4629      	mov	r1, r5
   10db4:	bd30      	pop	{r4, r5, pc}
   10db6:	fa21 f004 	lsr.w	r0, r1, r4
   10dba:	4629      	mov	r1, r5
   10dbc:	bd30      	pop	{r4, r5, pc}
   10dbe:	f094 0f00 	teq	r4, #0
   10dc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   10dc6:	bf06      	itte	eq
   10dc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10dcc:	3401      	addeq	r4, #1
   10dce:	3d01      	subne	r5, #1
   10dd0:	e74e      	b.n	10c70 <__adddf3+0x8c>
   10dd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10dd6:	bf18      	it	ne
   10dd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10ddc:	d029      	beq.n	10e32 <__adddf3+0x24e>
   10dde:	ea94 0f05 	teq	r4, r5
   10de2:	bf08      	it	eq
   10de4:	ea90 0f02 	teqeq	r0, r2
   10de8:	d005      	beq.n	10df6 <__adddf3+0x212>
   10dea:	ea54 0c00 	orrs.w	ip, r4, r0
   10dee:	bf04      	itt	eq
   10df0:	4619      	moveq	r1, r3
   10df2:	4610      	moveq	r0, r2
   10df4:	bd30      	pop	{r4, r5, pc}
   10df6:	ea91 0f03 	teq	r1, r3
   10dfa:	bf1e      	ittt	ne
   10dfc:	2100      	movne	r1, #0
   10dfe:	2000      	movne	r0, #0
   10e00:	bd30      	popne	{r4, r5, pc}
   10e02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   10e06:	d105      	bne.n	10e14 <__adddf3+0x230>
   10e08:	0040      	lsls	r0, r0, #1
   10e0a:	4149      	adcs	r1, r1
   10e0c:	bf28      	it	cs
   10e0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   10e12:	bd30      	pop	{r4, r5, pc}
   10e14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10e18:	bf3c      	itt	cc
   10e1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10e1e:	bd30      	popcc	{r4, r5, pc}
   10e20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10e24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10e28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10e2c:	f04f 0000 	mov.w	r0, #0
   10e30:	bd30      	pop	{r4, r5, pc}
   10e32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   10e36:	bf1a      	itte	ne
   10e38:	4619      	movne	r1, r3
   10e3a:	4610      	movne	r0, r2
   10e3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   10e40:	bf1c      	itt	ne
   10e42:	460b      	movne	r3, r1
   10e44:	4602      	movne	r2, r0
   10e46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10e4a:	bf06      	itte	eq
   10e4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   10e50:	ea91 0f03 	teqeq	r1, r3
   10e54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   10e58:	bd30      	pop	{r4, r5, pc}
   10e5a:	bf00      	nop

00010e5c <__aeabi_ui2d>:
   10e5c:	f090 0f00 	teq	r0, #0
   10e60:	bf04      	itt	eq
   10e62:	2100      	moveq	r1, #0
   10e64:	4770      	bxeq	lr
   10e66:	b530      	push	{r4, r5, lr}
   10e68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10e6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10e70:	f04f 0500 	mov.w	r5, #0
   10e74:	f04f 0100 	mov.w	r1, #0
   10e78:	e750      	b.n	10d1c <__adddf3+0x138>
   10e7a:	bf00      	nop

00010e7c <__aeabi_i2d>:
   10e7c:	f090 0f00 	teq	r0, #0
   10e80:	bf04      	itt	eq
   10e82:	2100      	moveq	r1, #0
   10e84:	4770      	bxeq	lr
   10e86:	b530      	push	{r4, r5, lr}
   10e88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10e8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10e90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   10e94:	bf48      	it	mi
   10e96:	4240      	negmi	r0, r0
   10e98:	f04f 0100 	mov.w	r1, #0
   10e9c:	e73e      	b.n	10d1c <__adddf3+0x138>
   10e9e:	bf00      	nop

00010ea0 <__aeabi_f2d>:
   10ea0:	0042      	lsls	r2, r0, #1
   10ea2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   10ea6:	ea4f 0131 	mov.w	r1, r1, rrx
   10eaa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10eae:	bf1f      	itttt	ne
   10eb0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   10eb4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10eb8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10ebc:	4770      	bxne	lr
   10ebe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   10ec2:	bf08      	it	eq
   10ec4:	4770      	bxeq	lr
   10ec6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   10eca:	bf04      	itt	eq
   10ecc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10ed0:	4770      	bxeq	lr
   10ed2:	b530      	push	{r4, r5, lr}
   10ed4:	f44f 7460 	mov.w	r4, #896	; 0x380
   10ed8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10edc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10ee0:	e71c      	b.n	10d1c <__adddf3+0x138>
   10ee2:	bf00      	nop

00010ee4 <__aeabi_ul2d>:
   10ee4:	ea50 0201 	orrs.w	r2, r0, r1
   10ee8:	bf08      	it	eq
   10eea:	4770      	bxeq	lr
   10eec:	b530      	push	{r4, r5, lr}
   10eee:	f04f 0500 	mov.w	r5, #0
   10ef2:	e00a      	b.n	10f0a <__aeabi_l2d+0x16>

00010ef4 <__aeabi_l2d>:
   10ef4:	ea50 0201 	orrs.w	r2, r0, r1
   10ef8:	bf08      	it	eq
   10efa:	4770      	bxeq	lr
   10efc:	b530      	push	{r4, r5, lr}
   10efe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   10f02:	d502      	bpl.n	10f0a <__aeabi_l2d+0x16>
   10f04:	4240      	negs	r0, r0
   10f06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10f0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10f0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   10f12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   10f16:	f43f aed8 	beq.w	10cca <__adddf3+0xe6>
   10f1a:	f04f 0203 	mov.w	r2, #3
   10f1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10f22:	bf18      	it	ne
   10f24:	3203      	addne	r2, #3
   10f26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10f2a:	bf18      	it	ne
   10f2c:	3203      	addne	r2, #3
   10f2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   10f32:	f1c2 0320 	rsb	r3, r2, #32
   10f36:	fa00 fc03 	lsl.w	ip, r0, r3
   10f3a:	fa20 f002 	lsr.w	r0, r0, r2
   10f3e:	fa01 fe03 	lsl.w	lr, r1, r3
   10f42:	ea40 000e 	orr.w	r0, r0, lr
   10f46:	fa21 f102 	lsr.w	r1, r1, r2
   10f4a:	4414      	add	r4, r2
   10f4c:	e6bd      	b.n	10cca <__adddf3+0xe6>
   10f4e:	bf00      	nop

00010f50 <__utoa>:
   10f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f52:	4f25      	ldr	r7, [pc, #148]	; (10fe8 <__utoa+0x98>)
   10f54:	f1a2 0e02 	sub.w	lr, r2, #2
   10f58:	4616      	mov	r6, r2
   10f5a:	4605      	mov	r5, r0
   10f5c:	460c      	mov	r4, r1
   10f5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10f60:	b08b      	sub	sp, #44	; 0x2c
   10f62:	46ec      	mov	ip, sp
   10f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10f68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10f6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10f6e:	e897 0003 	ldmia.w	r7, {r0, r1}
   10f72:	f84c 0b04 	str.w	r0, [ip], #4
   10f76:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   10f7a:	f88c 1000 	strb.w	r1, [ip]
   10f7e:	d82e      	bhi.n	10fde <__utoa+0x8e>
   10f80:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   10f84:	4670      	mov	r0, lr
   10f86:	f04f 0c00 	mov.w	ip, #0
   10f8a:	fbb5 f2f6 	udiv	r2, r5, r6
   10f8e:	fb06 5312 	mls	r3, r6, r2, r5
   10f92:	3328      	adds	r3, #40	; 0x28
   10f94:	446b      	add	r3, sp
   10f96:	4661      	mov	r1, ip
   10f98:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   10f9c:	f800 cf01 	strb.w	ip, [r0, #1]!
   10fa0:	462b      	mov	r3, r5
   10fa2:	429e      	cmp	r6, r3
   10fa4:	f101 0c01 	add.w	ip, r1, #1
   10fa8:	4615      	mov	r5, r2
   10faa:	d9ee      	bls.n	10f8a <__utoa+0x3a>
   10fac:	2300      	movs	r3, #0
   10fae:	f804 300c 	strb.w	r3, [r4, ip]
   10fb2:	b189      	cbz	r1, 10fd8 <__utoa+0x88>
   10fb4:	44a4      	add	ip, r4
   10fb6:	4672      	mov	r2, lr
   10fb8:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10fbc:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   10fc0:	f88e 5000 	strb.w	r5, [lr]
   10fc4:	eba4 030e 	sub.w	r3, r4, lr
   10fc8:	3202      	adds	r2, #2
   10fca:	3b01      	subs	r3, #1
   10fcc:	1b12      	subs	r2, r2, r4
   10fce:	440b      	add	r3, r1
   10fd0:	429a      	cmp	r2, r3
   10fd2:	f88c 0000 	strb.w	r0, [ip]
   10fd6:	dbee      	blt.n	10fb6 <__utoa+0x66>
   10fd8:	4620      	mov	r0, r4
   10fda:	b00b      	add	sp, #44	; 0x2c
   10fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fde:	2300      	movs	r3, #0
   10fe0:	4618      	mov	r0, r3
   10fe2:	7023      	strb	r3, [r4, #0]
   10fe4:	b00b      	add	sp, #44	; 0x2c
   10fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fe8:	20002630 	.word	0x20002630

00010fec <strncmp>:
   10fec:	2a00      	cmp	r2, #0
   10fee:	d03e      	beq.n	1106e <strncmp+0x82>
   10ff0:	ea40 0301 	orr.w	r3, r0, r1
   10ff4:	079b      	lsls	r3, r3, #30
   10ff6:	b530      	push	{r4, r5, lr}
   10ff8:	4684      	mov	ip, r0
   10ffa:	d12f      	bne.n	1105c <strncmp+0x70>
   10ffc:	2a03      	cmp	r2, #3
   10ffe:	d92d      	bls.n	1105c <strncmp+0x70>
   11000:	460b      	mov	r3, r1
   11002:	e008      	b.n	11016 <strncmp+0x2a>
   11004:	3a04      	subs	r2, #4
   11006:	4684      	mov	ip, r0
   11008:	4619      	mov	r1, r3
   1100a:	d025      	beq.n	11058 <strncmp+0x6c>
   1100c:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   11010:	d122      	bne.n	11058 <strncmp+0x6c>
   11012:	2a03      	cmp	r2, #3
   11014:	d922      	bls.n	1105c <strncmp+0x70>
   11016:	6804      	ldr	r4, [r0, #0]
   11018:	4619      	mov	r1, r3
   1101a:	f853 5b04 	ldr.w	r5, [r3], #4
   1101e:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   11022:	42ac      	cmp	r4, r5
   11024:	4684      	mov	ip, r0
   11026:	ea2e 0e04 	bic.w	lr, lr, r4
   1102a:	f100 0004 	add.w	r0, r0, #4
   1102e:	d0e9      	beq.n	11004 <strncmp+0x18>
   11030:	f89c 0000 	ldrb.w	r0, [ip]
   11034:	780c      	ldrb	r4, [r1, #0]
   11036:	42a0      	cmp	r0, r4
   11038:	d11b      	bne.n	11072 <strncmp+0x86>
   1103a:	46e6      	mov	lr, ip
   1103c:	b168      	cbz	r0, 1105a <strncmp+0x6e>
   1103e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   11042:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11046:	eba2 030e 	sub.w	r3, r2, lr
   1104a:	42a0      	cmp	r0, r4
   1104c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11050:	d10f      	bne.n	11072 <strncmp+0x86>
   11052:	eb1c 0303 	adds.w	r3, ip, r3
   11056:	d1f1      	bne.n	1103c <strncmp+0x50>
   11058:	2000      	movs	r0, #0
   1105a:	bd30      	pop	{r4, r5, pc}
   1105c:	f89c 0000 	ldrb.w	r0, [ip]
   11060:	780c      	ldrb	r4, [r1, #0]
   11062:	4284      	cmp	r4, r0
   11064:	d105      	bne.n	11072 <strncmp+0x86>
   11066:	2a01      	cmp	r2, #1
   11068:	d0f6      	beq.n	11058 <strncmp+0x6c>
   1106a:	46e6      	mov	lr, ip
   1106c:	e7e6      	b.n	1103c <strncmp+0x50>
   1106e:	4610      	mov	r0, r2
   11070:	4770      	bx	lr
   11072:	1b00      	subs	r0, r0, r4
   11074:	bd30      	pop	{r4, r5, pc}
   11076:	bf00      	nop

00011078 <strncpy>:
   11078:	ea40 0301 	orr.w	r3, r0, r1
   1107c:	079b      	lsls	r3, r3, #30
   1107e:	b530      	push	{r4, r5, lr}
   11080:	d101      	bne.n	11086 <strncpy+0xe>
   11082:	2a03      	cmp	r2, #3
   11084:	d80f      	bhi.n	110a6 <strncpy+0x2e>
   11086:	4684      	mov	ip, r0
   11088:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1108c:	e007      	b.n	1109e <strncpy+0x26>
   1108e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   11092:	f803 1b01 	strb.w	r1, [r3], #1
   11096:	1e54      	subs	r4, r2, #1
   11098:	b1c1      	cbz	r1, 110cc <strncpy+0x54>
   1109a:	469c      	mov	ip, r3
   1109c:	4622      	mov	r2, r4
   1109e:	4663      	mov	r3, ip
   110a0:	2a00      	cmp	r2, #0
   110a2:	d1f4      	bne.n	1108e <strncpy+0x16>
   110a4:	bd30      	pop	{r4, r5, pc}
   110a6:	460b      	mov	r3, r1
   110a8:	4684      	mov	ip, r0
   110aa:	4619      	mov	r1, r3
   110ac:	f853 5b04 	ldr.w	r5, [r3], #4
   110b0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   110b4:	ea24 0405 	bic.w	r4, r4, r5
   110b8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   110bc:	d1e4      	bne.n	11088 <strncpy+0x10>
   110be:	3a04      	subs	r2, #4
   110c0:	2a03      	cmp	r2, #3
   110c2:	f84c 5b04 	str.w	r5, [ip], #4
   110c6:	4619      	mov	r1, r3
   110c8:	d8ef      	bhi.n	110aa <strncpy+0x32>
   110ca:	e7dd      	b.n	11088 <strncpy+0x10>
   110cc:	4494      	add	ip, r2
   110ce:	2c00      	cmp	r4, #0
   110d0:	d0e8      	beq.n	110a4 <strncpy+0x2c>
   110d2:	f803 1b01 	strb.w	r1, [r3], #1
   110d6:	4563      	cmp	r3, ip
   110d8:	d1fb      	bne.n	110d2 <strncpy+0x5a>
   110da:	bd30      	pop	{r4, r5, pc}

000110dc <itoa>:
   110dc:	1e93      	subs	r3, r2, #2
   110de:	2b22      	cmp	r3, #34	; 0x22
   110e0:	b510      	push	{r4, lr}
   110e2:	460c      	mov	r4, r1
   110e4:	d80c      	bhi.n	11100 <itoa+0x24>
   110e6:	2a0a      	cmp	r2, #10
   110e8:	d003      	beq.n	110f2 <itoa+0x16>
   110ea:	f7ff ff31 	bl	10f50 <__utoa>
   110ee:	4620      	mov	r0, r4
   110f0:	bd10      	pop	{r4, pc}
   110f2:	2800      	cmp	r0, #0
   110f4:	daf9      	bge.n	110ea <itoa+0xe>
   110f6:	232d      	movs	r3, #45	; 0x2d
   110f8:	f801 3b01 	strb.w	r3, [r1], #1
   110fc:	4240      	negs	r0, r0
   110fe:	e7f4      	b.n	110ea <itoa+0xe>
   11100:	2300      	movs	r3, #0
   11102:	700b      	strb	r3, [r1, #0]
   11104:	4618      	mov	r0, r3
   11106:	bd10      	pop	{r4, pc}

00011108 <__errno>:
   11108:	4b01      	ldr	r3, [pc, #4]	; (11110 <__errno+0x8>)
   1110a:	6818      	ldr	r0, [r3, #0]
   1110c:	4770      	bx	lr
   1110e:	bf00      	nop
   11110:	200038d0 	.word	0x200038d0

00011114 <malloc>:
   11114:	4b02      	ldr	r3, [pc, #8]	; (11120 <malloc+0xc>)
   11116:	4601      	mov	r1, r0
   11118:	6818      	ldr	r0, [r3, #0]
   1111a:	f000 b80b 	b.w	11134 <_malloc_r>
   1111e:	bf00      	nop
   11120:	200038d0 	.word	0x200038d0

00011124 <free>:
   11124:	4b02      	ldr	r3, [pc, #8]	; (11130 <free+0xc>)
   11126:	4601      	mov	r1, r0
   11128:	6818      	ldr	r0, [r3, #0]
   1112a:	f001 bc53 	b.w	129d4 <_free_r>
   1112e:	bf00      	nop
   11130:	200038d0 	.word	0x200038d0

00011134 <_malloc_r>:
   11134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11138:	f101 060b 	add.w	r6, r1, #11
   1113c:	2e16      	cmp	r6, #22
   1113e:	b083      	sub	sp, #12
   11140:	4604      	mov	r4, r0
   11142:	d824      	bhi.n	1118e <_malloc_r+0x5a>
   11144:	2910      	cmp	r1, #16
   11146:	f200 80ba 	bhi.w	112be <_malloc_r+0x18a>
   1114a:	f000 fc5d 	bl	11a08 <__malloc_lock>
   1114e:	2610      	movs	r6, #16
   11150:	2218      	movs	r2, #24
   11152:	2002      	movs	r0, #2
   11154:	4fb5      	ldr	r7, [pc, #724]	; (1142c <_malloc_r+0x2f8>)
   11156:	443a      	add	r2, r7
   11158:	f1a2 0108 	sub.w	r1, r2, #8
   1115c:	6853      	ldr	r3, [r2, #4]
   1115e:	428b      	cmp	r3, r1
   11160:	f000 80ba 	beq.w	112d8 <_malloc_r+0x1a4>
   11164:	685a      	ldr	r2, [r3, #4]
   11166:	68d9      	ldr	r1, [r3, #12]
   11168:	f022 0203 	bic.w	r2, r2, #3
   1116c:	441a      	add	r2, r3
   1116e:	689d      	ldr	r5, [r3, #8]
   11170:	60e9      	str	r1, [r5, #12]
   11172:	608d      	str	r5, [r1, #8]
   11174:	6851      	ldr	r1, [r2, #4]
   11176:	f041 0101 	orr.w	r1, r1, #1
   1117a:	4620      	mov	r0, r4
   1117c:	6051      	str	r1, [r2, #4]
   1117e:	f103 0508 	add.w	r5, r3, #8
   11182:	f000 fc47 	bl	11a14 <__malloc_unlock>
   11186:	4628      	mov	r0, r5
   11188:	b003      	add	sp, #12
   1118a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1118e:	f036 0607 	bics.w	r6, r6, #7
   11192:	f100 8094 	bmi.w	112be <_malloc_r+0x18a>
   11196:	42b1      	cmp	r1, r6
   11198:	f200 8091 	bhi.w	112be <_malloc_r+0x18a>
   1119c:	f000 fc34 	bl	11a08 <__malloc_lock>
   111a0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   111a4:	f0c0 819a 	bcc.w	114dc <_malloc_r+0x3a8>
   111a8:	0a73      	lsrs	r3, r6, #9
   111aa:	f000 808f 	beq.w	112cc <_malloc_r+0x198>
   111ae:	2b04      	cmp	r3, #4
   111b0:	f200 816f 	bhi.w	11492 <_malloc_r+0x35e>
   111b4:	09b3      	lsrs	r3, r6, #6
   111b6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   111ba:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   111be:	00c3      	lsls	r3, r0, #3
   111c0:	4f9a      	ldr	r7, [pc, #616]	; (1142c <_malloc_r+0x2f8>)
   111c2:	443b      	add	r3, r7
   111c4:	f1a3 0508 	sub.w	r5, r3, #8
   111c8:	685b      	ldr	r3, [r3, #4]
   111ca:	429d      	cmp	r5, r3
   111cc:	d106      	bne.n	111dc <_malloc_r+0xa8>
   111ce:	e00c      	b.n	111ea <_malloc_r+0xb6>
   111d0:	2900      	cmp	r1, #0
   111d2:	f280 8127 	bge.w	11424 <_malloc_r+0x2f0>
   111d6:	68db      	ldr	r3, [r3, #12]
   111d8:	429d      	cmp	r5, r3
   111da:	d006      	beq.n	111ea <_malloc_r+0xb6>
   111dc:	685a      	ldr	r2, [r3, #4]
   111de:	f022 0203 	bic.w	r2, r2, #3
   111e2:	1b91      	subs	r1, r2, r6
   111e4:	290f      	cmp	r1, #15
   111e6:	ddf3      	ble.n	111d0 <_malloc_r+0x9c>
   111e8:	4660      	mov	r0, ip
   111ea:	693d      	ldr	r5, [r7, #16]
   111ec:	f8df c250 	ldr.w	ip, [pc, #592]	; 11440 <_malloc_r+0x30c>
   111f0:	4565      	cmp	r5, ip
   111f2:	d07c      	beq.n	112ee <_malloc_r+0x1ba>
   111f4:	686a      	ldr	r2, [r5, #4]
   111f6:	f022 0203 	bic.w	r2, r2, #3
   111fa:	1b93      	subs	r3, r2, r6
   111fc:	2b0f      	cmp	r3, #15
   111fe:	f300 817b 	bgt.w	114f8 <_malloc_r+0x3c4>
   11202:	2b00      	cmp	r3, #0
   11204:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   11208:	f280 816c 	bge.w	114e4 <_malloc_r+0x3b0>
   1120c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   11210:	f080 811a 	bcs.w	11448 <_malloc_r+0x314>
   11214:	08d3      	lsrs	r3, r2, #3
   11216:	6879      	ldr	r1, [r7, #4]
   11218:	3301      	adds	r3, #1
   1121a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   1121e:	2201      	movs	r2, #1
   11220:	fa02 f20e 	lsl.w	r2, r2, lr
   11224:	430a      	orrs	r2, r1
   11226:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   1122a:	f8c5 e008 	str.w	lr, [r5, #8]
   1122e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   11232:	3908      	subs	r1, #8
   11234:	60e9      	str	r1, [r5, #12]
   11236:	607a      	str	r2, [r7, #4]
   11238:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   1123c:	f8ce 500c 	str.w	r5, [lr, #12]
   11240:	1083      	asrs	r3, r0, #2
   11242:	2101      	movs	r1, #1
   11244:	4099      	lsls	r1, r3
   11246:	4291      	cmp	r1, r2
   11248:	d857      	bhi.n	112fa <_malloc_r+0x1c6>
   1124a:	4211      	tst	r1, r2
   1124c:	d106      	bne.n	1125c <_malloc_r+0x128>
   1124e:	f020 0003 	bic.w	r0, r0, #3
   11252:	0049      	lsls	r1, r1, #1
   11254:	4211      	tst	r1, r2
   11256:	f100 0004 	add.w	r0, r0, #4
   1125a:	d0fa      	beq.n	11252 <_malloc_r+0x11e>
   1125c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   11260:	464d      	mov	r5, r9
   11262:	4686      	mov	lr, r0
   11264:	f8d5 800c 	ldr.w	r8, [r5, #12]
   11268:	4545      	cmp	r5, r8
   1126a:	d108      	bne.n	1127e <_malloc_r+0x14a>
   1126c:	e11d      	b.n	114aa <_malloc_r+0x376>
   1126e:	2b00      	cmp	r3, #0
   11270:	f280 8124 	bge.w	114bc <_malloc_r+0x388>
   11274:	f8d8 800c 	ldr.w	r8, [r8, #12]
   11278:	4545      	cmp	r5, r8
   1127a:	f000 8116 	beq.w	114aa <_malloc_r+0x376>
   1127e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11282:	f022 0203 	bic.w	r2, r2, #3
   11286:	1b93      	subs	r3, r2, r6
   11288:	2b0f      	cmp	r3, #15
   1128a:	ddf0      	ble.n	1126e <_malloc_r+0x13a>
   1128c:	4620      	mov	r0, r4
   1128e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   11292:	eb08 0106 	add.w	r1, r8, r6
   11296:	f046 0601 	orr.w	r6, r6, #1
   1129a:	f8c8 6004 	str.w	r6, [r8, #4]
   1129e:	60ec      	str	r4, [r5, #12]
   112a0:	60a5      	str	r5, [r4, #8]
   112a2:	f043 0401 	orr.w	r4, r3, #1
   112a6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   112aa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   112ae:	604c      	str	r4, [r1, #4]
   112b0:	f848 3002 	str.w	r3, [r8, r2]
   112b4:	f000 fbae 	bl	11a14 <__malloc_unlock>
   112b8:	f108 0508 	add.w	r5, r8, #8
   112bc:	e002      	b.n	112c4 <_malloc_r+0x190>
   112be:	230c      	movs	r3, #12
   112c0:	6023      	str	r3, [r4, #0]
   112c2:	2500      	movs	r5, #0
   112c4:	4628      	mov	r0, r5
   112c6:	b003      	add	sp, #12
   112c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   112d0:	2040      	movs	r0, #64	; 0x40
   112d2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   112d6:	e773      	b.n	111c0 <_malloc_r+0x8c>
   112d8:	68d3      	ldr	r3, [r2, #12]
   112da:	429a      	cmp	r2, r3
   112dc:	bf08      	it	eq
   112de:	3002      	addeq	r0, #2
   112e0:	f47f af40 	bne.w	11164 <_malloc_r+0x30>
   112e4:	693d      	ldr	r5, [r7, #16]
   112e6:	f8df c158 	ldr.w	ip, [pc, #344]	; 11440 <_malloc_r+0x30c>
   112ea:	4565      	cmp	r5, ip
   112ec:	d182      	bne.n	111f4 <_malloc_r+0xc0>
   112ee:	687a      	ldr	r2, [r7, #4]
   112f0:	1083      	asrs	r3, r0, #2
   112f2:	2101      	movs	r1, #1
   112f4:	4099      	lsls	r1, r3
   112f6:	4291      	cmp	r1, r2
   112f8:	d9a7      	bls.n	1124a <_malloc_r+0x116>
   112fa:	68bd      	ldr	r5, [r7, #8]
   112fc:	686b      	ldr	r3, [r5, #4]
   112fe:	f023 0903 	bic.w	r9, r3, #3
   11302:	454e      	cmp	r6, r9
   11304:	d803      	bhi.n	1130e <_malloc_r+0x1da>
   11306:	eba9 0306 	sub.w	r3, r9, r6
   1130a:	2b0f      	cmp	r3, #15
   1130c:	dc7a      	bgt.n	11404 <_malloc_r+0x2d0>
   1130e:	f8df b134 	ldr.w	fp, [pc, #308]	; 11444 <_malloc_r+0x310>
   11312:	4b47      	ldr	r3, [pc, #284]	; (11430 <_malloc_r+0x2fc>)
   11314:	f8db 2000 	ldr.w	r2, [fp]
   11318:	681b      	ldr	r3, [r3, #0]
   1131a:	3201      	adds	r2, #1
   1131c:	4433      	add	r3, r6
   1131e:	eb05 0a09 	add.w	sl, r5, r9
   11322:	f000 8133 	beq.w	1158c <_malloc_r+0x458>
   11326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1132a:	330f      	adds	r3, #15
   1132c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   11330:	f028 080f 	bic.w	r8, r8, #15
   11334:	4641      	mov	r1, r8
   11336:	4620      	mov	r0, r4
   11338:	f001 fcba 	bl	12cb0 <_sbrk_r>
   1133c:	1c41      	adds	r1, r0, #1
   1133e:	4602      	mov	r2, r0
   11340:	f000 80f3 	beq.w	1152a <_malloc_r+0x3f6>
   11344:	4582      	cmp	sl, r0
   11346:	f200 80ee 	bhi.w	11526 <_malloc_r+0x3f2>
   1134a:	4b3a      	ldr	r3, [pc, #232]	; (11434 <_malloc_r+0x300>)
   1134c:	6819      	ldr	r1, [r3, #0]
   1134e:	4441      	add	r1, r8
   11350:	6019      	str	r1, [r3, #0]
   11352:	4608      	mov	r0, r1
   11354:	f000 814e 	beq.w	115f4 <_malloc_r+0x4c0>
   11358:	f8db 1000 	ldr.w	r1, [fp]
   1135c:	9301      	str	r3, [sp, #4]
   1135e:	3101      	adds	r1, #1
   11360:	bf1b      	ittet	ne
   11362:	eba2 010a 	subne.w	r1, r2, sl
   11366:	1809      	addne	r1, r1, r0
   11368:	f8cb 2000 	streq.w	r2, [fp]
   1136c:	6019      	strne	r1, [r3, #0]
   1136e:	f012 0b07 	ands.w	fp, r2, #7
   11372:	f000 8117 	beq.w	115a4 <_malloc_r+0x470>
   11376:	f1cb 0108 	rsb	r1, fp, #8
   1137a:	440a      	add	r2, r1
   1137c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   11380:	4490      	add	r8, r2
   11382:	3108      	adds	r1, #8
   11384:	eba1 0108 	sub.w	r1, r1, r8
   11388:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1138c:	4651      	mov	r1, sl
   1138e:	4620      	mov	r0, r4
   11390:	9200      	str	r2, [sp, #0]
   11392:	f001 fc8d 	bl	12cb0 <_sbrk_r>
   11396:	1c42      	adds	r2, r0, #1
   11398:	e9dd 2300 	ldrd	r2, r3, [sp]
   1139c:	f000 814f 	beq.w	1163e <_malloc_r+0x50a>
   113a0:	1a80      	subs	r0, r0, r2
   113a2:	eb00 080a 	add.w	r8, r0, sl
   113a6:	6819      	ldr	r1, [r3, #0]
   113a8:	60ba      	str	r2, [r7, #8]
   113aa:	f048 0001 	orr.w	r0, r8, #1
   113ae:	4451      	add	r1, sl
   113b0:	42bd      	cmp	r5, r7
   113b2:	6050      	str	r0, [r2, #4]
   113b4:	6019      	str	r1, [r3, #0]
   113b6:	f000 8129 	beq.w	1160c <_malloc_r+0x4d8>
   113ba:	f1b9 0f0f 	cmp.w	r9, #15
   113be:	f240 8127 	bls.w	11610 <_malloc_r+0x4dc>
   113c2:	6868      	ldr	r0, [r5, #4]
   113c4:	f1a9 0c0c 	sub.w	ip, r9, #12
   113c8:	f02c 0c07 	bic.w	ip, ip, #7
   113cc:	f000 0001 	and.w	r0, r0, #1
   113d0:	ea40 000c 	orr.w	r0, r0, ip
   113d4:	6068      	str	r0, [r5, #4]
   113d6:	f04f 0e05 	mov.w	lr, #5
   113da:	eb05 000c 	add.w	r0, r5, ip
   113de:	f1bc 0f0f 	cmp.w	ip, #15
   113e2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   113e6:	f200 8132 	bhi.w	1164e <_malloc_r+0x51a>
   113ea:	6850      	ldr	r0, [r2, #4]
   113ec:	4615      	mov	r5, r2
   113ee:	4b12      	ldr	r3, [pc, #72]	; (11438 <_malloc_r+0x304>)
   113f0:	681a      	ldr	r2, [r3, #0]
   113f2:	428a      	cmp	r2, r1
   113f4:	bf38      	it	cc
   113f6:	6019      	strcc	r1, [r3, #0]
   113f8:	4b10      	ldr	r3, [pc, #64]	; (1143c <_malloc_r+0x308>)
   113fa:	681a      	ldr	r2, [r3, #0]
   113fc:	428a      	cmp	r2, r1
   113fe:	bf38      	it	cc
   11400:	6019      	strcc	r1, [r3, #0]
   11402:	e094      	b.n	1152e <_malloc_r+0x3fa>
   11404:	19aa      	adds	r2, r5, r6
   11406:	f043 0301 	orr.w	r3, r3, #1
   1140a:	f046 0601 	orr.w	r6, r6, #1
   1140e:	606e      	str	r6, [r5, #4]
   11410:	4620      	mov	r0, r4
   11412:	60ba      	str	r2, [r7, #8]
   11414:	6053      	str	r3, [r2, #4]
   11416:	f000 fafd 	bl	11a14 <__malloc_unlock>
   1141a:	3508      	adds	r5, #8
   1141c:	4628      	mov	r0, r5
   1141e:	b003      	add	sp, #12
   11420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11424:	68d9      	ldr	r1, [r3, #12]
   11426:	441a      	add	r2, r3
   11428:	e6a1      	b.n	1116e <_malloc_r+0x3a>
   1142a:	bf00      	nop
   1142c:	200034b4 	.word	0x200034b4
   11430:	20004d84 	.word	0x20004d84
   11434:	20004d54 	.word	0x20004d54
   11438:	20004d7c 	.word	0x20004d7c
   1143c:	20004d80 	.word	0x20004d80
   11440:	200034bc 	.word	0x200034bc
   11444:	200038bc 	.word	0x200038bc
   11448:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   1144c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   11450:	d363      	bcc.n	1151a <_malloc_r+0x3e6>
   11452:	2b14      	cmp	r3, #20
   11454:	f200 80b7 	bhi.w	115c6 <_malloc_r+0x492>
   11458:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   1145c:	00c9      	lsls	r1, r1, #3
   1145e:	335b      	adds	r3, #91	; 0x5b
   11460:	eb07 0e01 	add.w	lr, r7, r1
   11464:	5879      	ldr	r1, [r7, r1]
   11466:	f1ae 0e08 	sub.w	lr, lr, #8
   1146a:	458e      	cmp	lr, r1
   1146c:	f000 8091 	beq.w	11592 <_malloc_r+0x45e>
   11470:	684b      	ldr	r3, [r1, #4]
   11472:	f023 0303 	bic.w	r3, r3, #3
   11476:	4293      	cmp	r3, r2
   11478:	d902      	bls.n	11480 <_malloc_r+0x34c>
   1147a:	6889      	ldr	r1, [r1, #8]
   1147c:	458e      	cmp	lr, r1
   1147e:	d1f7      	bne.n	11470 <_malloc_r+0x33c>
   11480:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   11484:	687a      	ldr	r2, [r7, #4]
   11486:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   1148a:	f8ce 5008 	str.w	r5, [lr, #8]
   1148e:	60cd      	str	r5, [r1, #12]
   11490:	e6d6      	b.n	11240 <_malloc_r+0x10c>
   11492:	2b14      	cmp	r3, #20
   11494:	d959      	bls.n	1154a <_malloc_r+0x416>
   11496:	2b54      	cmp	r3, #84	; 0x54
   11498:	f200 809d 	bhi.w	115d6 <_malloc_r+0x4a2>
   1149c:	0b33      	lsrs	r3, r6, #12
   1149e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   114a2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   114a6:	00c3      	lsls	r3, r0, #3
   114a8:	e68a      	b.n	111c0 <_malloc_r+0x8c>
   114aa:	f10e 0e01 	add.w	lr, lr, #1
   114ae:	f01e 0f03 	tst.w	lr, #3
   114b2:	f105 0508 	add.w	r5, r5, #8
   114b6:	f47f aed5 	bne.w	11264 <_malloc_r+0x130>
   114ba:	e051      	b.n	11560 <_malloc_r+0x42c>
   114bc:	4442      	add	r2, r8
   114be:	4645      	mov	r5, r8
   114c0:	6853      	ldr	r3, [r2, #4]
   114c2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   114c6:	f043 0301 	orr.w	r3, r3, #1
   114ca:	6053      	str	r3, [r2, #4]
   114cc:	f855 3f08 	ldr.w	r3, [r5, #8]!
   114d0:	4620      	mov	r0, r4
   114d2:	60d9      	str	r1, [r3, #12]
   114d4:	608b      	str	r3, [r1, #8]
   114d6:	f000 fa9d 	bl	11a14 <__malloc_unlock>
   114da:	e6f3      	b.n	112c4 <_malloc_r+0x190>
   114dc:	08f0      	lsrs	r0, r6, #3
   114de:	f106 0208 	add.w	r2, r6, #8
   114e2:	e637      	b.n	11154 <_malloc_r+0x20>
   114e4:	442a      	add	r2, r5
   114e6:	4620      	mov	r0, r4
   114e8:	6853      	ldr	r3, [r2, #4]
   114ea:	f043 0301 	orr.w	r3, r3, #1
   114ee:	6053      	str	r3, [r2, #4]
   114f0:	3508      	adds	r5, #8
   114f2:	f000 fa8f 	bl	11a14 <__malloc_unlock>
   114f6:	e6e5      	b.n	112c4 <_malloc_r+0x190>
   114f8:	19a9      	adds	r1, r5, r6
   114fa:	4620      	mov	r0, r4
   114fc:	f046 0601 	orr.w	r6, r6, #1
   11500:	f043 0401 	orr.w	r4, r3, #1
   11504:	606e      	str	r6, [r5, #4]
   11506:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1150a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1150e:	604c      	str	r4, [r1, #4]
   11510:	50ab      	str	r3, [r5, r2]
   11512:	f000 fa7f 	bl	11a14 <__malloc_unlock>
   11516:	3508      	adds	r5, #8
   11518:	e6d4      	b.n	112c4 <_malloc_r+0x190>
   1151a:	0993      	lsrs	r3, r2, #6
   1151c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   11520:	00c9      	lsls	r1, r1, #3
   11522:	3338      	adds	r3, #56	; 0x38
   11524:	e79c      	b.n	11460 <_malloc_r+0x32c>
   11526:	42bd      	cmp	r5, r7
   11528:	d05f      	beq.n	115ea <_malloc_r+0x4b6>
   1152a:	68bd      	ldr	r5, [r7, #8]
   1152c:	6868      	ldr	r0, [r5, #4]
   1152e:	f020 0803 	bic.w	r8, r0, #3
   11532:	4546      	cmp	r6, r8
   11534:	eba8 0306 	sub.w	r3, r8, r6
   11538:	d802      	bhi.n	11540 <_malloc_r+0x40c>
   1153a:	2b0f      	cmp	r3, #15
   1153c:	f73f af62 	bgt.w	11404 <_malloc_r+0x2d0>
   11540:	4620      	mov	r0, r4
   11542:	f000 fa67 	bl	11a14 <__malloc_unlock>
   11546:	2500      	movs	r5, #0
   11548:	e6bc      	b.n	112c4 <_malloc_r+0x190>
   1154a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1154e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   11552:	00c3      	lsls	r3, r0, #3
   11554:	e634      	b.n	111c0 <_malloc_r+0x8c>
   11556:	f859 3908 	ldr.w	r3, [r9], #-8
   1155a:	454b      	cmp	r3, r9
   1155c:	f040 8096 	bne.w	1168c <_malloc_r+0x558>
   11560:	f010 0f03 	tst.w	r0, #3
   11564:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   11568:	d1f5      	bne.n	11556 <_malloc_r+0x422>
   1156a:	687b      	ldr	r3, [r7, #4]
   1156c:	ea23 0301 	bic.w	r3, r3, r1
   11570:	607b      	str	r3, [r7, #4]
   11572:	0049      	lsls	r1, r1, #1
   11574:	4299      	cmp	r1, r3
   11576:	f63f aec0 	bhi.w	112fa <_malloc_r+0x1c6>
   1157a:	b919      	cbnz	r1, 11584 <_malloc_r+0x450>
   1157c:	e6bd      	b.n	112fa <_malloc_r+0x1c6>
   1157e:	0049      	lsls	r1, r1, #1
   11580:	f10e 0e04 	add.w	lr, lr, #4
   11584:	4219      	tst	r1, r3
   11586:	d0fa      	beq.n	1157e <_malloc_r+0x44a>
   11588:	4670      	mov	r0, lr
   1158a:	e667      	b.n	1125c <_malloc_r+0x128>
   1158c:	f103 0810 	add.w	r8, r3, #16
   11590:	e6d0      	b.n	11334 <_malloc_r+0x200>
   11592:	109a      	asrs	r2, r3, #2
   11594:	f04f 0801 	mov.w	r8, #1
   11598:	687b      	ldr	r3, [r7, #4]
   1159a:	fa08 f202 	lsl.w	r2, r8, r2
   1159e:	431a      	orrs	r2, r3
   115a0:	607a      	str	r2, [r7, #4]
   115a2:	e770      	b.n	11486 <_malloc_r+0x352>
   115a4:	eb02 0108 	add.w	r1, r2, r8
   115a8:	4249      	negs	r1, r1
   115aa:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   115ae:	4651      	mov	r1, sl
   115b0:	4620      	mov	r0, r4
   115b2:	9200      	str	r2, [sp, #0]
   115b4:	f001 fb7c 	bl	12cb0 <_sbrk_r>
   115b8:	1c43      	adds	r3, r0, #1
   115ba:	e9dd 2300 	ldrd	r2, r3, [sp]
   115be:	f47f aeef 	bne.w	113a0 <_malloc_r+0x26c>
   115c2:	46da      	mov	sl, fp
   115c4:	e6ef      	b.n	113a6 <_malloc_r+0x272>
   115c6:	2b54      	cmp	r3, #84	; 0x54
   115c8:	d825      	bhi.n	11616 <_malloc_r+0x4e2>
   115ca:	0b13      	lsrs	r3, r2, #12
   115cc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   115d0:	00c9      	lsls	r1, r1, #3
   115d2:	336e      	adds	r3, #110	; 0x6e
   115d4:	e744      	b.n	11460 <_malloc_r+0x32c>
   115d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   115da:	d825      	bhi.n	11628 <_malloc_r+0x4f4>
   115dc:	0bf3      	lsrs	r3, r6, #15
   115de:	f103 0078 	add.w	r0, r3, #120	; 0x78
   115e2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   115e6:	00c3      	lsls	r3, r0, #3
   115e8:	e5ea      	b.n	111c0 <_malloc_r+0x8c>
   115ea:	4b29      	ldr	r3, [pc, #164]	; (11690 <_malloc_r+0x55c>)
   115ec:	6818      	ldr	r0, [r3, #0]
   115ee:	4440      	add	r0, r8
   115f0:	6018      	str	r0, [r3, #0]
   115f2:	e6b1      	b.n	11358 <_malloc_r+0x224>
   115f4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   115f8:	f1bc 0f00 	cmp.w	ip, #0
   115fc:	f47f aeac 	bne.w	11358 <_malloc_r+0x224>
   11600:	68bd      	ldr	r5, [r7, #8]
   11602:	44c8      	add	r8, r9
   11604:	f048 0001 	orr.w	r0, r8, #1
   11608:	6068      	str	r0, [r5, #4]
   1160a:	e6f0      	b.n	113ee <_malloc_r+0x2ba>
   1160c:	4615      	mov	r5, r2
   1160e:	e6ee      	b.n	113ee <_malloc_r+0x2ba>
   11610:	2301      	movs	r3, #1
   11612:	6053      	str	r3, [r2, #4]
   11614:	e794      	b.n	11540 <_malloc_r+0x40c>
   11616:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1161a:	d823      	bhi.n	11664 <_malloc_r+0x530>
   1161c:	0bd3      	lsrs	r3, r2, #15
   1161e:	f103 0178 	add.w	r1, r3, #120	; 0x78
   11622:	00c9      	lsls	r1, r1, #3
   11624:	3377      	adds	r3, #119	; 0x77
   11626:	e71b      	b.n	11460 <_malloc_r+0x32c>
   11628:	f240 5254 	movw	r2, #1364	; 0x554
   1162c:	4293      	cmp	r3, r2
   1162e:	d823      	bhi.n	11678 <_malloc_r+0x544>
   11630:	0cb3      	lsrs	r3, r6, #18
   11632:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   11636:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   1163a:	00c3      	lsls	r3, r0, #3
   1163c:	e5c0      	b.n	111c0 <_malloc_r+0x8c>
   1163e:	f1ab 0b08 	sub.w	fp, fp, #8
   11642:	44d8      	add	r8, fp
   11644:	eba8 0802 	sub.w	r8, r8, r2
   11648:	f04f 0a00 	mov.w	sl, #0
   1164c:	e6ab      	b.n	113a6 <_malloc_r+0x272>
   1164e:	f105 0108 	add.w	r1, r5, #8
   11652:	4620      	mov	r0, r4
   11654:	9300      	str	r3, [sp, #0]
   11656:	f001 f9bd 	bl	129d4 <_free_r>
   1165a:	68bd      	ldr	r5, [r7, #8]
   1165c:	9b00      	ldr	r3, [sp, #0]
   1165e:	6868      	ldr	r0, [r5, #4]
   11660:	6819      	ldr	r1, [r3, #0]
   11662:	e6c4      	b.n	113ee <_malloc_r+0x2ba>
   11664:	f240 5154 	movw	r1, #1364	; 0x554
   11668:	428b      	cmp	r3, r1
   1166a:	d80b      	bhi.n	11684 <_malloc_r+0x550>
   1166c:	0c93      	lsrs	r3, r2, #18
   1166e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   11672:	00c9      	lsls	r1, r1, #3
   11674:	337c      	adds	r3, #124	; 0x7c
   11676:	e6f3      	b.n	11460 <_malloc_r+0x32c>
   11678:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1167c:	207f      	movs	r0, #127	; 0x7f
   1167e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   11682:	e59d      	b.n	111c0 <_malloc_r+0x8c>
   11684:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   11688:	237e      	movs	r3, #126	; 0x7e
   1168a:	e6e9      	b.n	11460 <_malloc_r+0x32c>
   1168c:	687b      	ldr	r3, [r7, #4]
   1168e:	e770      	b.n	11572 <_malloc_r+0x43e>
   11690:	20004d54 	.word	0x20004d54

00011694 <memcmp>:
   11694:	2a03      	cmp	r2, #3
   11696:	b570      	push	{r4, r5, r6, lr}
   11698:	d914      	bls.n	116c4 <memcmp+0x30>
   1169a:	ea40 0301 	orr.w	r3, r0, r1
   1169e:	079b      	lsls	r3, r3, #30
   116a0:	d122      	bne.n	116e8 <memcmp+0x54>
   116a2:	4604      	mov	r4, r0
   116a4:	460b      	mov	r3, r1
   116a6:	4619      	mov	r1, r3
   116a8:	4620      	mov	r0, r4
   116aa:	680e      	ldr	r6, [r1, #0]
   116ac:	6805      	ldr	r5, [r0, #0]
   116ae:	42b5      	cmp	r5, r6
   116b0:	f104 0404 	add.w	r4, r4, #4
   116b4:	f103 0304 	add.w	r3, r3, #4
   116b8:	d116      	bne.n	116e8 <memcmp+0x54>
   116ba:	3a04      	subs	r2, #4
   116bc:	2a03      	cmp	r2, #3
   116be:	4620      	mov	r0, r4
   116c0:	4619      	mov	r1, r3
   116c2:	d8f0      	bhi.n	116a6 <memcmp+0x12>
   116c4:	1e54      	subs	r4, r2, #1
   116c6:	b19a      	cbz	r2, 116f0 <memcmp+0x5c>
   116c8:	1e42      	subs	r2, r0, #1
   116ca:	3901      	subs	r1, #1
   116cc:	e001      	b.n	116d2 <memcmp+0x3e>
   116ce:	18c3      	adds	r3, r0, r3
   116d0:	d00c      	beq.n	116ec <memcmp+0x58>
   116d2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   116d6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   116da:	45e6      	cmp	lr, ip
   116dc:	eba4 0302 	sub.w	r3, r4, r2
   116e0:	d0f5      	beq.n	116ce <memcmp+0x3a>
   116e2:	ebae 000c 	sub.w	r0, lr, ip
   116e6:	bd70      	pop	{r4, r5, r6, pc}
   116e8:	1e54      	subs	r4, r2, #1
   116ea:	e7ed      	b.n	116c8 <memcmp+0x34>
   116ec:	4618      	mov	r0, r3
   116ee:	bd70      	pop	{r4, r5, r6, pc}
   116f0:	4610      	mov	r0, r2
   116f2:	bd70      	pop	{r4, r5, r6, pc}

000116f4 <memmove>:
   116f4:	4288      	cmp	r0, r1
   116f6:	d90d      	bls.n	11714 <memmove+0x20>
   116f8:	188b      	adds	r3, r1, r2
   116fa:	4283      	cmp	r3, r0
   116fc:	d90a      	bls.n	11714 <memmove+0x20>
   116fe:	eb00 0c02 	add.w	ip, r0, r2
   11702:	b1ba      	cbz	r2, 11734 <memmove+0x40>
   11704:	4662      	mov	r2, ip
   11706:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1170a:	f802 cd01 	strb.w	ip, [r2, #-1]!
   1170e:	4299      	cmp	r1, r3
   11710:	d1f9      	bne.n	11706 <memmove+0x12>
   11712:	4770      	bx	lr
   11714:	2a0f      	cmp	r2, #15
   11716:	d80e      	bhi.n	11736 <memmove+0x42>
   11718:	4603      	mov	r3, r0
   1171a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1171e:	b14a      	cbz	r2, 11734 <memmove+0x40>
   11720:	f10c 0c01 	add.w	ip, ip, #1
   11724:	3b01      	subs	r3, #1
   11726:	448c      	add	ip, r1
   11728:	f811 2b01 	ldrb.w	r2, [r1], #1
   1172c:	f803 2f01 	strb.w	r2, [r3, #1]!
   11730:	4561      	cmp	r1, ip
   11732:	d1f9      	bne.n	11728 <memmove+0x34>
   11734:	4770      	bx	lr
   11736:	ea40 0301 	orr.w	r3, r0, r1
   1173a:	079b      	lsls	r3, r3, #30
   1173c:	d150      	bne.n	117e0 <memmove+0xec>
   1173e:	f1a2 0310 	sub.w	r3, r2, #16
   11742:	b570      	push	{r4, r5, r6, lr}
   11744:	f101 0c20 	add.w	ip, r1, #32
   11748:	f023 050f 	bic.w	r5, r3, #15
   1174c:	f101 0e10 	add.w	lr, r1, #16
   11750:	f100 0410 	add.w	r4, r0, #16
   11754:	44ac      	add	ip, r5
   11756:	091b      	lsrs	r3, r3, #4
   11758:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   1175c:	f844 5c10 	str.w	r5, [r4, #-16]
   11760:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   11764:	f844 5c0c 	str.w	r5, [r4, #-12]
   11768:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   1176c:	f844 5c08 	str.w	r5, [r4, #-8]
   11770:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   11774:	f844 5c04 	str.w	r5, [r4, #-4]
   11778:	f10e 0e10 	add.w	lr, lr, #16
   1177c:	45e6      	cmp	lr, ip
   1177e:	f104 0410 	add.w	r4, r4, #16
   11782:	d1e9      	bne.n	11758 <memmove+0x64>
   11784:	3301      	adds	r3, #1
   11786:	f012 0f0c 	tst.w	r2, #12
   1178a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1178e:	f002 040f 	and.w	r4, r2, #15
   11792:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   11796:	d027      	beq.n	117e8 <memmove+0xf4>
   11798:	3c04      	subs	r4, #4
   1179a:	f024 0603 	bic.w	r6, r4, #3
   1179e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   117a2:	441e      	add	r6, r3
   117a4:	1f1c      	subs	r4, r3, #4
   117a6:	468e      	mov	lr, r1
   117a8:	f85e 5b04 	ldr.w	r5, [lr], #4
   117ac:	f844 5f04 	str.w	r5, [r4, #4]!
   117b0:	42b4      	cmp	r4, r6
   117b2:	d1f9      	bne.n	117a8 <memmove+0xb4>
   117b4:	f10c 0401 	add.w	r4, ip, #1
   117b8:	f002 0203 	and.w	r2, r2, #3
   117bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   117c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   117c4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   117c8:	b14a      	cbz	r2, 117de <memmove+0xea>
   117ca:	f10c 0c01 	add.w	ip, ip, #1
   117ce:	3b01      	subs	r3, #1
   117d0:	448c      	add	ip, r1
   117d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   117d6:	f803 2f01 	strb.w	r2, [r3, #1]!
   117da:	4561      	cmp	r1, ip
   117dc:	d1f9      	bne.n	117d2 <memmove+0xde>
   117de:	bd70      	pop	{r4, r5, r6, pc}
   117e0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   117e4:	4603      	mov	r3, r0
   117e6:	e79b      	b.n	11720 <memmove+0x2c>
   117e8:	4622      	mov	r2, r4
   117ea:	e7eb      	b.n	117c4 <memmove+0xd0>

000117ec <__assert_func>:
   117ec:	b500      	push	{lr}
   117ee:	4c0b      	ldr	r4, [pc, #44]	; (1181c <__assert_func+0x30>)
   117f0:	6825      	ldr	r5, [r4, #0]
   117f2:	4614      	mov	r4, r2
   117f4:	68ee      	ldr	r6, [r5, #12]
   117f6:	461a      	mov	r2, r3
   117f8:	b085      	sub	sp, #20
   117fa:	4603      	mov	r3, r0
   117fc:	460d      	mov	r5, r1
   117fe:	b14c      	cbz	r4, 11814 <__assert_func+0x28>
   11800:	4907      	ldr	r1, [pc, #28]	; (11820 <__assert_func+0x34>)
   11802:	9500      	str	r5, [sp, #0]
   11804:	e9cd 1401 	strd	r1, r4, [sp, #4]
   11808:	4630      	mov	r0, r6
   1180a:	4906      	ldr	r1, [pc, #24]	; (11824 <__assert_func+0x38>)
   1180c:	f001 f9e8 	bl	12be0 <fiprintf>
   11810:	f7fc f9a1 	bl	db56 <abort>
   11814:	4904      	ldr	r1, [pc, #16]	; (11828 <__assert_func+0x3c>)
   11816:	460c      	mov	r4, r1
   11818:	e7f3      	b.n	11802 <__assert_func+0x16>
   1181a:	bf00      	nop
   1181c:	200038d0 	.word	0x200038d0
   11820:	20002520 	.word	0x20002520
   11824:	20002530 	.word	0x20002530
   11828:	20002090 	.word	0x20002090

0001182c <memset>:
   1182c:	0783      	lsls	r3, r0, #30
   1182e:	b530      	push	{r4, r5, lr}
   11830:	d048      	beq.n	118c4 <memset+0x98>
   11832:	1e54      	subs	r4, r2, #1
   11834:	2a00      	cmp	r2, #0
   11836:	d03f      	beq.n	118b8 <memset+0x8c>
   11838:	b2ca      	uxtb	r2, r1
   1183a:	4603      	mov	r3, r0
   1183c:	e001      	b.n	11842 <memset+0x16>
   1183e:	3c01      	subs	r4, #1
   11840:	d33a      	bcc.n	118b8 <memset+0x8c>
   11842:	f803 2b01 	strb.w	r2, [r3], #1
   11846:	079d      	lsls	r5, r3, #30
   11848:	d1f9      	bne.n	1183e <memset+0x12>
   1184a:	2c03      	cmp	r4, #3
   1184c:	d92d      	bls.n	118aa <memset+0x7e>
   1184e:	b2cd      	uxtb	r5, r1
   11850:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11854:	2c0f      	cmp	r4, #15
   11856:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1185a:	d936      	bls.n	118ca <memset+0x9e>
   1185c:	f1a4 0210 	sub.w	r2, r4, #16
   11860:	f022 0c0f 	bic.w	ip, r2, #15
   11864:	f103 0e20 	add.w	lr, r3, #32
   11868:	44e6      	add	lr, ip
   1186a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   1186e:	f103 0210 	add.w	r2, r3, #16
   11872:	e942 5504 	strd	r5, r5, [r2, #-16]
   11876:	e942 5502 	strd	r5, r5, [r2, #-8]
   1187a:	3210      	adds	r2, #16
   1187c:	4572      	cmp	r2, lr
   1187e:	d1f8      	bne.n	11872 <memset+0x46>
   11880:	f10c 0201 	add.w	r2, ip, #1
   11884:	f014 0f0c 	tst.w	r4, #12
   11888:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1188c:	f004 0c0f 	and.w	ip, r4, #15
   11890:	d013      	beq.n	118ba <memset+0x8e>
   11892:	f1ac 0304 	sub.w	r3, ip, #4
   11896:	f023 0303 	bic.w	r3, r3, #3
   1189a:	3304      	adds	r3, #4
   1189c:	4413      	add	r3, r2
   1189e:	f842 5b04 	str.w	r5, [r2], #4
   118a2:	4293      	cmp	r3, r2
   118a4:	d1fb      	bne.n	1189e <memset+0x72>
   118a6:	f00c 0403 	and.w	r4, ip, #3
   118aa:	b12c      	cbz	r4, 118b8 <memset+0x8c>
   118ac:	b2c9      	uxtb	r1, r1
   118ae:	441c      	add	r4, r3
   118b0:	f803 1b01 	strb.w	r1, [r3], #1
   118b4:	429c      	cmp	r4, r3
   118b6:	d1fb      	bne.n	118b0 <memset+0x84>
   118b8:	bd30      	pop	{r4, r5, pc}
   118ba:	4664      	mov	r4, ip
   118bc:	4613      	mov	r3, r2
   118be:	2c00      	cmp	r4, #0
   118c0:	d1f4      	bne.n	118ac <memset+0x80>
   118c2:	e7f9      	b.n	118b8 <memset+0x8c>
   118c4:	4603      	mov	r3, r0
   118c6:	4614      	mov	r4, r2
   118c8:	e7bf      	b.n	1184a <memset+0x1e>
   118ca:	461a      	mov	r2, r3
   118cc:	46a4      	mov	ip, r4
   118ce:	e7e0      	b.n	11892 <memset+0x66>

000118d0 <__cxa_atexit>:
   118d0:	4613      	mov	r3, r2
   118d2:	460a      	mov	r2, r1
   118d4:	4601      	mov	r1, r0
   118d6:	2002      	movs	r0, #2
   118d8:	f002 ba78 	b.w	13dcc <__register_exitproc>

000118dc <fcvtf>:
   118dc:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   118e0:	2300      	movs	r3, #0
   118e2:	f002 bacd 	b.w	13e80 <fcvtbuf>
   118e6:	bf00      	nop

000118e8 <__libc_init_array>:
   118e8:	b570      	push	{r4, r5, r6, lr}
   118ea:	4e0d      	ldr	r6, [pc, #52]	; (11920 <__libc_init_array+0x38>)
   118ec:	4d0d      	ldr	r5, [pc, #52]	; (11924 <__libc_init_array+0x3c>)
   118ee:	1b76      	subs	r6, r6, r5
   118f0:	10b6      	asrs	r6, r6, #2
   118f2:	d006      	beq.n	11902 <__libc_init_array+0x1a>
   118f4:	2400      	movs	r4, #0
   118f6:	f855 3b04 	ldr.w	r3, [r5], #4
   118fa:	3401      	adds	r4, #1
   118fc:	4798      	blx	r3
   118fe:	42a6      	cmp	r6, r4
   11900:	d1f9      	bne.n	118f6 <__libc_init_array+0xe>
   11902:	4e09      	ldr	r6, [pc, #36]	; (11928 <__libc_init_array+0x40>)
   11904:	4d09      	ldr	r5, [pc, #36]	; (1192c <__libc_init_array+0x44>)
   11906:	1b76      	subs	r6, r6, r5
   11908:	f003 ffa6 	bl	15858 <___init_veneer>
   1190c:	10b6      	asrs	r6, r6, #2
   1190e:	d006      	beq.n	1191e <__libc_init_array+0x36>
   11910:	2400      	movs	r4, #0
   11912:	f855 3b04 	ldr.w	r3, [r5], #4
   11916:	3401      	adds	r4, #1
   11918:	4798      	blx	r3
   1191a:	42a6      	cmp	r6, r4
   1191c:	d1f9      	bne.n	11912 <__libc_init_array+0x2a>
   1191e:	bd70      	pop	{r4, r5, r6, pc}
   11920:	60001f90 	.word	0x60001f90
   11924:	60001f90 	.word	0x60001f90
   11928:	60001fac 	.word	0x60001fac
   1192c:	60001f90 	.word	0x60001f90

00011930 <__retarget_lock_init_recursive>:
   11930:	4770      	bx	lr
   11932:	bf00      	nop

00011934 <__retarget_lock_close_recursive>:
   11934:	4770      	bx	lr
   11936:	bf00      	nop

00011938 <__retarget_lock_acquire_recursive>:
   11938:	4770      	bx	lr
   1193a:	bf00      	nop

0001193c <__retarget_lock_release_recursive>:
   1193c:	4770      	bx	lr
   1193e:	bf00      	nop

00011940 <__locale_mb_cur_max>:
   11940:	4b01      	ldr	r3, [pc, #4]	; (11948 <__locale_mb_cur_max+0x8>)
   11942:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   11946:	4770      	bx	lr
   11948:	20003348 	.word	0x20003348

0001194c <strcpy>:
   1194c:	ea80 0201 	eor.w	r2, r0, r1
   11950:	4684      	mov	ip, r0
   11952:	f012 0f03 	tst.w	r2, #3
   11956:	d14f      	bne.n	119f8 <strcpy+0xac>
   11958:	f011 0f03 	tst.w	r1, #3
   1195c:	d132      	bne.n	119c4 <strcpy+0x78>
   1195e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   11962:	f011 0f04 	tst.w	r1, #4
   11966:	f851 3b04 	ldr.w	r3, [r1], #4
   1196a:	d00b      	beq.n	11984 <strcpy+0x38>
   1196c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11970:	439a      	bics	r2, r3
   11972:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11976:	bf04      	itt	eq
   11978:	f84c 3b04 	streq.w	r3, [ip], #4
   1197c:	f851 3b04 	ldreq.w	r3, [r1], #4
   11980:	d116      	bne.n	119b0 <strcpy+0x64>
   11982:	bf00      	nop
   11984:	f851 4b04 	ldr.w	r4, [r1], #4
   11988:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1198c:	439a      	bics	r2, r3
   1198e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11992:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   11996:	d10b      	bne.n	119b0 <strcpy+0x64>
   11998:	f84c 3b04 	str.w	r3, [ip], #4
   1199c:	43a2      	bics	r2, r4
   1199e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   119a2:	bf04      	itt	eq
   119a4:	f851 3b04 	ldreq.w	r3, [r1], #4
   119a8:	f84c 4b04 	streq.w	r4, [ip], #4
   119ac:	d0ea      	beq.n	11984 <strcpy+0x38>
   119ae:	4623      	mov	r3, r4
   119b0:	f80c 3b01 	strb.w	r3, [ip], #1
   119b4:	f013 0fff 	tst.w	r3, #255	; 0xff
   119b8:	ea4f 2333 	mov.w	r3, r3, ror #8
   119bc:	d1f8      	bne.n	119b0 <strcpy+0x64>
   119be:	f85d 4b04 	ldr.w	r4, [sp], #4
   119c2:	4770      	bx	lr
   119c4:	f011 0f01 	tst.w	r1, #1
   119c8:	d006      	beq.n	119d8 <strcpy+0x8c>
   119ca:	f811 2b01 	ldrb.w	r2, [r1], #1
   119ce:	f80c 2b01 	strb.w	r2, [ip], #1
   119d2:	2a00      	cmp	r2, #0
   119d4:	bf08      	it	eq
   119d6:	4770      	bxeq	lr
   119d8:	f011 0f02 	tst.w	r1, #2
   119dc:	d0bf      	beq.n	1195e <strcpy+0x12>
   119de:	f831 2b02 	ldrh.w	r2, [r1], #2
   119e2:	f012 0fff 	tst.w	r2, #255	; 0xff
   119e6:	bf16      	itet	ne
   119e8:	f82c 2b02 	strhne.w	r2, [ip], #2
   119ec:	f88c 2000 	strbeq.w	r2, [ip]
   119f0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   119f4:	d1b3      	bne.n	1195e <strcpy+0x12>
   119f6:	4770      	bx	lr
   119f8:	f811 2b01 	ldrb.w	r2, [r1], #1
   119fc:	f80c 2b01 	strb.w	r2, [ip], #1
   11a00:	2a00      	cmp	r2, #0
   11a02:	d1f9      	bne.n	119f8 <strcpy+0xac>
   11a04:	4770      	bx	lr
   11a06:	bf00      	nop

00011a08 <__malloc_lock>:
   11a08:	4801      	ldr	r0, [pc, #4]	; (11a10 <__malloc_lock+0x8>)
   11a0a:	f7ff bf95 	b.w	11938 <__retarget_lock_acquire_recursive>
   11a0e:	bf00      	nop
   11a10:	20004d4c 	.word	0x20004d4c

00011a14 <__malloc_unlock>:
   11a14:	4801      	ldr	r0, [pc, #4]	; (11a1c <__malloc_unlock+0x8>)
   11a16:	f7ff bf91 	b.w	1193c <__retarget_lock_release_recursive>
   11a1a:	bf00      	nop
   11a1c:	20004d4c 	.word	0x20004d4c

00011a20 <_Balloc>:
   11a20:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11a22:	b570      	push	{r4, r5, r6, lr}
   11a24:	4605      	mov	r5, r0
   11a26:	460c      	mov	r4, r1
   11a28:	b14b      	cbz	r3, 11a3e <_Balloc+0x1e>
   11a2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11a2e:	b180      	cbz	r0, 11a52 <_Balloc+0x32>
   11a30:	6802      	ldr	r2, [r0, #0]
   11a32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   11a36:	2300      	movs	r3, #0
   11a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
   11a3c:	bd70      	pop	{r4, r5, r6, pc}
   11a3e:	2221      	movs	r2, #33	; 0x21
   11a40:	2104      	movs	r1, #4
   11a42:	f000 fba9 	bl	12198 <_calloc_r>
   11a46:	4603      	mov	r3, r0
   11a48:	6468      	str	r0, [r5, #68]	; 0x44
   11a4a:	2800      	cmp	r0, #0
   11a4c:	d1ed      	bne.n	11a2a <_Balloc+0xa>
   11a4e:	2000      	movs	r0, #0
   11a50:	bd70      	pop	{r4, r5, r6, pc}
   11a52:	2101      	movs	r1, #1
   11a54:	fa01 f604 	lsl.w	r6, r1, r4
   11a58:	1d72      	adds	r2, r6, #5
   11a5a:	0092      	lsls	r2, r2, #2
   11a5c:	4628      	mov	r0, r5
   11a5e:	f000 fb9b 	bl	12198 <_calloc_r>
   11a62:	2800      	cmp	r0, #0
   11a64:	d0f3      	beq.n	11a4e <_Balloc+0x2e>
   11a66:	e9c0 4601 	strd	r4, r6, [r0, #4]
   11a6a:	e7e4      	b.n	11a36 <_Balloc+0x16>

00011a6c <_Bfree>:
   11a6c:	b131      	cbz	r1, 11a7c <_Bfree+0x10>
   11a6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11a70:	684a      	ldr	r2, [r1, #4]
   11a72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   11a76:	6008      	str	r0, [r1, #0]
   11a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11a7c:	4770      	bx	lr
   11a7e:	bf00      	nop

00011a80 <__multadd>:
   11a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a84:	690e      	ldr	r6, [r1, #16]
   11a86:	4680      	mov	r8, r0
   11a88:	460f      	mov	r7, r1
   11a8a:	461d      	mov	r5, r3
   11a8c:	f101 0e14 	add.w	lr, r1, #20
   11a90:	2000      	movs	r0, #0
   11a92:	f8de 1000 	ldr.w	r1, [lr]
   11a96:	b28c      	uxth	r4, r1
   11a98:	fb02 5304 	mla	r3, r2, r4, r5
   11a9c:	0c09      	lsrs	r1, r1, #16
   11a9e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11aa2:	fb02 cc01 	mla	ip, r2, r1, ip
   11aa6:	3001      	adds	r0, #1
   11aa8:	b29c      	uxth	r4, r3
   11aaa:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   11aae:	4286      	cmp	r6, r0
   11ab0:	f84e 4b04 	str.w	r4, [lr], #4
   11ab4:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11ab8:	dceb      	bgt.n	11a92 <__multadd+0x12>
   11aba:	b13d      	cbz	r5, 11acc <__multadd+0x4c>
   11abc:	68bb      	ldr	r3, [r7, #8]
   11abe:	42b3      	cmp	r3, r6
   11ac0:	dd07      	ble.n	11ad2 <__multadd+0x52>
   11ac2:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11ac6:	3601      	adds	r6, #1
   11ac8:	615d      	str	r5, [r3, #20]
   11aca:	613e      	str	r6, [r7, #16]
   11acc:	4638      	mov	r0, r7
   11ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ad2:	6879      	ldr	r1, [r7, #4]
   11ad4:	4640      	mov	r0, r8
   11ad6:	3101      	adds	r1, #1
   11ad8:	f7ff ffa2 	bl	11a20 <_Balloc>
   11adc:	4604      	mov	r4, r0
   11ade:	b1b0      	cbz	r0, 11b0e <__multadd+0x8e>
   11ae0:	693a      	ldr	r2, [r7, #16]
   11ae2:	3202      	adds	r2, #2
   11ae4:	f107 010c 	add.w	r1, r7, #12
   11ae8:	0092      	lsls	r2, r2, #2
   11aea:	300c      	adds	r0, #12
   11aec:	f7fb fa18 	bl	cf20 <memcpy>
   11af0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11af4:	687a      	ldr	r2, [r7, #4]
   11af6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11afa:	6039      	str	r1, [r7, #0]
   11afc:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11b00:	4627      	mov	r7, r4
   11b02:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11b06:	3601      	adds	r6, #1
   11b08:	615d      	str	r5, [r3, #20]
   11b0a:	613e      	str	r6, [r7, #16]
   11b0c:	e7de      	b.n	11acc <__multadd+0x4c>
   11b0e:	4b03      	ldr	r3, [pc, #12]	; (11b1c <__multadd+0x9c>)
   11b10:	4803      	ldr	r0, [pc, #12]	; (11b20 <__multadd+0xa0>)
   11b12:	4622      	mov	r2, r4
   11b14:	21ba      	movs	r1, #186	; 0xba
   11b16:	f7ff fe69 	bl	117ec <__assert_func>
   11b1a:	bf00      	nop
   11b1c:	200025c0 	.word	0x200025c0
   11b20:	200025d4 	.word	0x200025d4

00011b24 <__hi0bits>:
   11b24:	0c03      	lsrs	r3, r0, #16
   11b26:	041b      	lsls	r3, r3, #16
   11b28:	b9d3      	cbnz	r3, 11b60 <__hi0bits+0x3c>
   11b2a:	0400      	lsls	r0, r0, #16
   11b2c:	2310      	movs	r3, #16
   11b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   11b32:	bf04      	itt	eq
   11b34:	0200      	lsleq	r0, r0, #8
   11b36:	3308      	addeq	r3, #8
   11b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11b3c:	bf04      	itt	eq
   11b3e:	0100      	lsleq	r0, r0, #4
   11b40:	3304      	addeq	r3, #4
   11b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   11b46:	bf04      	itt	eq
   11b48:	0080      	lsleq	r0, r0, #2
   11b4a:	3302      	addeq	r3, #2
   11b4c:	2800      	cmp	r0, #0
   11b4e:	db05      	blt.n	11b5c <__hi0bits+0x38>
   11b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   11b54:	f103 0301 	add.w	r3, r3, #1
   11b58:	bf08      	it	eq
   11b5a:	2320      	moveq	r3, #32
   11b5c:	4618      	mov	r0, r3
   11b5e:	4770      	bx	lr
   11b60:	2300      	movs	r3, #0
   11b62:	e7e4      	b.n	11b2e <__hi0bits+0xa>

00011b64 <__lo0bits>:
   11b64:	6803      	ldr	r3, [r0, #0]
   11b66:	f013 0207 	ands.w	r2, r3, #7
   11b6a:	d008      	beq.n	11b7e <__lo0bits+0x1a>
   11b6c:	07d9      	lsls	r1, r3, #31
   11b6e:	d41f      	bmi.n	11bb0 <__lo0bits+0x4c>
   11b70:	079a      	lsls	r2, r3, #30
   11b72:	d522      	bpl.n	11bba <__lo0bits+0x56>
   11b74:	085b      	lsrs	r3, r3, #1
   11b76:	6003      	str	r3, [r0, #0]
   11b78:	2201      	movs	r2, #1
   11b7a:	4610      	mov	r0, r2
   11b7c:	4770      	bx	lr
   11b7e:	b299      	uxth	r1, r3
   11b80:	b909      	cbnz	r1, 11b86 <__lo0bits+0x22>
   11b82:	0c1b      	lsrs	r3, r3, #16
   11b84:	2210      	movs	r2, #16
   11b86:	b2d9      	uxtb	r1, r3
   11b88:	b909      	cbnz	r1, 11b8e <__lo0bits+0x2a>
   11b8a:	3208      	adds	r2, #8
   11b8c:	0a1b      	lsrs	r3, r3, #8
   11b8e:	0719      	lsls	r1, r3, #28
   11b90:	bf04      	itt	eq
   11b92:	091b      	lsreq	r3, r3, #4
   11b94:	3204      	addeq	r2, #4
   11b96:	0799      	lsls	r1, r3, #30
   11b98:	bf04      	itt	eq
   11b9a:	089b      	lsreq	r3, r3, #2
   11b9c:	3202      	addeq	r2, #2
   11b9e:	07d9      	lsls	r1, r3, #31
   11ba0:	d403      	bmi.n	11baa <__lo0bits+0x46>
   11ba2:	085b      	lsrs	r3, r3, #1
   11ba4:	f102 0201 	add.w	r2, r2, #1
   11ba8:	d005      	beq.n	11bb6 <__lo0bits+0x52>
   11baa:	6003      	str	r3, [r0, #0]
   11bac:	4610      	mov	r0, r2
   11bae:	4770      	bx	lr
   11bb0:	2200      	movs	r2, #0
   11bb2:	4610      	mov	r0, r2
   11bb4:	4770      	bx	lr
   11bb6:	2220      	movs	r2, #32
   11bb8:	e7df      	b.n	11b7a <__lo0bits+0x16>
   11bba:	089b      	lsrs	r3, r3, #2
   11bbc:	2202      	movs	r2, #2
   11bbe:	6003      	str	r3, [r0, #0]
   11bc0:	4610      	mov	r0, r2
   11bc2:	4770      	bx	lr

00011bc4 <__i2b>:
   11bc4:	b538      	push	{r3, r4, r5, lr}
   11bc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11bc8:	4604      	mov	r4, r0
   11bca:	460d      	mov	r5, r1
   11bcc:	b14b      	cbz	r3, 11be2 <__i2b+0x1e>
   11bce:	6858      	ldr	r0, [r3, #4]
   11bd0:	b1b0      	cbz	r0, 11c00 <__i2b+0x3c>
   11bd2:	6802      	ldr	r2, [r0, #0]
   11bd4:	605a      	str	r2, [r3, #4]
   11bd6:	2200      	movs	r2, #0
   11bd8:	2301      	movs	r3, #1
   11bda:	e9c0 3504 	strd	r3, r5, [r0, #16]
   11bde:	60c2      	str	r2, [r0, #12]
   11be0:	bd38      	pop	{r3, r4, r5, pc}
   11be2:	2221      	movs	r2, #33	; 0x21
   11be4:	2104      	movs	r1, #4
   11be6:	f000 fad7 	bl	12198 <_calloc_r>
   11bea:	4603      	mov	r3, r0
   11bec:	6460      	str	r0, [r4, #68]	; 0x44
   11bee:	2800      	cmp	r0, #0
   11bf0:	d1ed      	bne.n	11bce <__i2b+0xa>
   11bf2:	4b09      	ldr	r3, [pc, #36]	; (11c18 <__i2b+0x54>)
   11bf4:	4809      	ldr	r0, [pc, #36]	; (11c1c <__i2b+0x58>)
   11bf6:	2200      	movs	r2, #0
   11bf8:	f240 1145 	movw	r1, #325	; 0x145
   11bfc:	f7ff fdf6 	bl	117ec <__assert_func>
   11c00:	221c      	movs	r2, #28
   11c02:	2101      	movs	r1, #1
   11c04:	4620      	mov	r0, r4
   11c06:	f000 fac7 	bl	12198 <_calloc_r>
   11c0a:	2800      	cmp	r0, #0
   11c0c:	d0f1      	beq.n	11bf2 <__i2b+0x2e>
   11c0e:	2201      	movs	r2, #1
   11c10:	2302      	movs	r3, #2
   11c12:	e9c0 2301 	strd	r2, r3, [r0, #4]
   11c16:	e7de      	b.n	11bd6 <__i2b+0x12>
   11c18:	200025c0 	.word	0x200025c0
   11c1c:	200025d4 	.word	0x200025d4

00011c20 <__multiply>:
   11c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c24:	690e      	ldr	r6, [r1, #16]
   11c26:	6915      	ldr	r5, [r2, #16]
   11c28:	42ae      	cmp	r6, r5
   11c2a:	b085      	sub	sp, #20
   11c2c:	4688      	mov	r8, r1
   11c2e:	4614      	mov	r4, r2
   11c30:	db05      	blt.n	11c3e <__multiply+0x1e>
   11c32:	462a      	mov	r2, r5
   11c34:	4623      	mov	r3, r4
   11c36:	4635      	mov	r5, r6
   11c38:	460c      	mov	r4, r1
   11c3a:	4616      	mov	r6, r2
   11c3c:	4698      	mov	r8, r3
   11c3e:	68a3      	ldr	r3, [r4, #8]
   11c40:	6861      	ldr	r1, [r4, #4]
   11c42:	19af      	adds	r7, r5, r6
   11c44:	42bb      	cmp	r3, r7
   11c46:	bfb8      	it	lt
   11c48:	3101      	addlt	r1, #1
   11c4a:	f7ff fee9 	bl	11a20 <_Balloc>
   11c4e:	9001      	str	r0, [sp, #4]
   11c50:	2800      	cmp	r0, #0
   11c52:	f000 8087 	beq.w	11d64 <__multiply+0x144>
   11c56:	9b01      	ldr	r3, [sp, #4]
   11c58:	f103 0914 	add.w	r9, r3, #20
   11c5c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   11c60:	45d1      	cmp	r9, sl
   11c62:	d205      	bcs.n	11c70 <__multiply+0x50>
   11c64:	464b      	mov	r3, r9
   11c66:	2200      	movs	r2, #0
   11c68:	f843 2b04 	str.w	r2, [r3], #4
   11c6c:	459a      	cmp	sl, r3
   11c6e:	d8fb      	bhi.n	11c68 <__multiply+0x48>
   11c70:	f108 0814 	add.w	r8, r8, #20
   11c74:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   11c78:	f104 0314 	add.w	r3, r4, #20
   11c7c:	45d8      	cmp	r8, fp
   11c7e:	461a      	mov	r2, r3
   11c80:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   11c84:	d25f      	bcs.n	11d46 <__multiply+0x126>
   11c86:	1b2b      	subs	r3, r5, r4
   11c88:	3b15      	subs	r3, #21
   11c8a:	f023 0303 	bic.w	r3, r3, #3
   11c8e:	3304      	adds	r3, #4
   11c90:	3415      	adds	r4, #21
   11c92:	42a5      	cmp	r5, r4
   11c94:	bf38      	it	cc
   11c96:	2304      	movcc	r3, #4
   11c98:	e9cd a702 	strd	sl, r7, [sp, #8]
   11c9c:	46ac      	mov	ip, r5
   11c9e:	461f      	mov	r7, r3
   11ca0:	4692      	mov	sl, r2
   11ca2:	e005      	b.n	11cb0 <__multiply+0x90>
   11ca4:	0c09      	lsrs	r1, r1, #16
   11ca6:	d129      	bne.n	11cfc <__multiply+0xdc>
   11ca8:	45c3      	cmp	fp, r8
   11caa:	f109 0904 	add.w	r9, r9, #4
   11cae:	d948      	bls.n	11d42 <__multiply+0x122>
   11cb0:	f858 1b04 	ldr.w	r1, [r8], #4
   11cb4:	b28d      	uxth	r5, r1
   11cb6:	2d00      	cmp	r5, #0
   11cb8:	d0f4      	beq.n	11ca4 <__multiply+0x84>
   11cba:	4656      	mov	r6, sl
   11cbc:	464c      	mov	r4, r9
   11cbe:	2300      	movs	r3, #0
   11cc0:	f856 1b04 	ldr.w	r1, [r6], #4
   11cc4:	6822      	ldr	r2, [r4, #0]
   11cc6:	fa1f fe81 	uxth.w	lr, r1
   11cca:	b290      	uxth	r0, r2
   11ccc:	0c09      	lsrs	r1, r1, #16
   11cce:	fb05 000e 	mla	r0, r5, lr, r0
   11cd2:	0c12      	lsrs	r2, r2, #16
   11cd4:	4403      	add	r3, r0
   11cd6:	fb05 2201 	mla	r2, r5, r1, r2
   11cda:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11cde:	b29b      	uxth	r3, r3
   11ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11ce4:	45b4      	cmp	ip, r6
   11ce6:	f844 3b04 	str.w	r3, [r4], #4
   11cea:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11cee:	d8e7      	bhi.n	11cc0 <__multiply+0xa0>
   11cf0:	f849 3007 	str.w	r3, [r9, r7]
   11cf4:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11cf8:	0c09      	lsrs	r1, r1, #16
   11cfa:	d0d5      	beq.n	11ca8 <__multiply+0x88>
   11cfc:	f8d9 3000 	ldr.w	r3, [r9]
   11d00:	4650      	mov	r0, sl
   11d02:	461a      	mov	r2, r3
   11d04:	464c      	mov	r4, r9
   11d06:	2600      	movs	r6, #0
   11d08:	8805      	ldrh	r5, [r0, #0]
   11d0a:	0c12      	lsrs	r2, r2, #16
   11d0c:	fb01 2205 	mla	r2, r1, r5, r2
   11d10:	4416      	add	r6, r2
   11d12:	b29b      	uxth	r3, r3
   11d14:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   11d18:	f844 3b04 	str.w	r3, [r4], #4
   11d1c:	f850 5b04 	ldr.w	r5, [r0], #4
   11d20:	6822      	ldr	r2, [r4, #0]
   11d22:	0c2d      	lsrs	r5, r5, #16
   11d24:	b293      	uxth	r3, r2
   11d26:	fb01 3305 	mla	r3, r1, r5, r3
   11d2a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   11d2e:	4584      	cmp	ip, r0
   11d30:	ea4f 4613 	mov.w	r6, r3, lsr #16
   11d34:	d8e8      	bhi.n	11d08 <__multiply+0xe8>
   11d36:	45c3      	cmp	fp, r8
   11d38:	f849 3007 	str.w	r3, [r9, r7]
   11d3c:	f109 0904 	add.w	r9, r9, #4
   11d40:	d8b6      	bhi.n	11cb0 <__multiply+0x90>
   11d42:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   11d46:	2f00      	cmp	r7, #0
   11d48:	dc02      	bgt.n	11d50 <__multiply+0x130>
   11d4a:	e005      	b.n	11d58 <__multiply+0x138>
   11d4c:	3f01      	subs	r7, #1
   11d4e:	d003      	beq.n	11d58 <__multiply+0x138>
   11d50:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   11d54:	2b00      	cmp	r3, #0
   11d56:	d0f9      	beq.n	11d4c <__multiply+0x12c>
   11d58:	9b01      	ldr	r3, [sp, #4]
   11d5a:	4618      	mov	r0, r3
   11d5c:	611f      	str	r7, [r3, #16]
   11d5e:	b005      	add	sp, #20
   11d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d64:	4b03      	ldr	r3, [pc, #12]	; (11d74 <__multiply+0x154>)
   11d66:	4804      	ldr	r0, [pc, #16]	; (11d78 <__multiply+0x158>)
   11d68:	9a01      	ldr	r2, [sp, #4]
   11d6a:	f44f 71b1 	mov.w	r1, #354	; 0x162
   11d6e:	f7ff fd3d 	bl	117ec <__assert_func>
   11d72:	bf00      	nop
   11d74:	200025c0 	.word	0x200025c0
   11d78:	200025d4 	.word	0x200025d4

00011d7c <__pow5mult>:
   11d7c:	f012 0303 	ands.w	r3, r2, #3
   11d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d84:	4614      	mov	r4, r2
   11d86:	4606      	mov	r6, r0
   11d88:	d132      	bne.n	11df0 <__pow5mult+0x74>
   11d8a:	460d      	mov	r5, r1
   11d8c:	10a4      	asrs	r4, r4, #2
   11d8e:	d020      	beq.n	11dd2 <__pow5mult+0x56>
   11d90:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   11d94:	f1b8 0f00 	cmp.w	r8, #0
   11d98:	d033      	beq.n	11e02 <__pow5mult+0x86>
   11d9a:	07e3      	lsls	r3, r4, #31
   11d9c:	f04f 0700 	mov.w	r7, #0
   11da0:	d407      	bmi.n	11db2 <__pow5mult+0x36>
   11da2:	1064      	asrs	r4, r4, #1
   11da4:	d015      	beq.n	11dd2 <__pow5mult+0x56>
   11da6:	f8d8 0000 	ldr.w	r0, [r8]
   11daa:	b1a8      	cbz	r0, 11dd8 <__pow5mult+0x5c>
   11dac:	4680      	mov	r8, r0
   11dae:	07e3      	lsls	r3, r4, #31
   11db0:	d5f7      	bpl.n	11da2 <__pow5mult+0x26>
   11db2:	4642      	mov	r2, r8
   11db4:	4629      	mov	r1, r5
   11db6:	4630      	mov	r0, r6
   11db8:	f7ff ff32 	bl	11c20 <__multiply>
   11dbc:	b1b5      	cbz	r5, 11dec <__pow5mult+0x70>
   11dbe:	6869      	ldr	r1, [r5, #4]
   11dc0:	6c73      	ldr	r3, [r6, #68]	; 0x44
   11dc2:	1064      	asrs	r4, r4, #1
   11dc4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   11dc8:	602a      	str	r2, [r5, #0]
   11dca:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   11dce:	4605      	mov	r5, r0
   11dd0:	d1e9      	bne.n	11da6 <__pow5mult+0x2a>
   11dd2:	4628      	mov	r0, r5
   11dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11dd8:	4642      	mov	r2, r8
   11dda:	4641      	mov	r1, r8
   11ddc:	4630      	mov	r0, r6
   11dde:	f7ff ff1f 	bl	11c20 <__multiply>
   11de2:	f8c8 0000 	str.w	r0, [r8]
   11de6:	6007      	str	r7, [r0, #0]
   11de8:	4680      	mov	r8, r0
   11dea:	e7e0      	b.n	11dae <__pow5mult+0x32>
   11dec:	4605      	mov	r5, r0
   11dee:	e7d8      	b.n	11da2 <__pow5mult+0x26>
   11df0:	3b01      	subs	r3, #1
   11df2:	4a0f      	ldr	r2, [pc, #60]	; (11e30 <__pow5mult+0xb4>)
   11df4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11df8:	2300      	movs	r3, #0
   11dfa:	f7ff fe41 	bl	11a80 <__multadd>
   11dfe:	4605      	mov	r5, r0
   11e00:	e7c4      	b.n	11d8c <__pow5mult+0x10>
   11e02:	2101      	movs	r1, #1
   11e04:	4630      	mov	r0, r6
   11e06:	f7ff fe0b 	bl	11a20 <_Balloc>
   11e0a:	4680      	mov	r8, r0
   11e0c:	b140      	cbz	r0, 11e20 <__pow5mult+0xa4>
   11e0e:	2301      	movs	r3, #1
   11e10:	f240 2271 	movw	r2, #625	; 0x271
   11e14:	e9c0 3204 	strd	r3, r2, [r0, #16]
   11e18:	2300      	movs	r3, #0
   11e1a:	6430      	str	r0, [r6, #64]	; 0x40
   11e1c:	6003      	str	r3, [r0, #0]
   11e1e:	e7bc      	b.n	11d9a <__pow5mult+0x1e>
   11e20:	4b04      	ldr	r3, [pc, #16]	; (11e34 <__pow5mult+0xb8>)
   11e22:	4805      	ldr	r0, [pc, #20]	; (11e38 <__pow5mult+0xbc>)
   11e24:	4642      	mov	r2, r8
   11e26:	f240 1145 	movw	r1, #325	; 0x145
   11e2a:	f7ff fcdf 	bl	117ec <__assert_func>
   11e2e:	bf00      	nop
   11e30:	20002c4c 	.word	0x20002c4c
   11e34:	200025c0 	.word	0x200025c0
   11e38:	200025d4 	.word	0x200025d4

00011e3c <__lshift>:
   11e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e40:	460d      	mov	r5, r1
   11e42:	4614      	mov	r4, r2
   11e44:	692f      	ldr	r7, [r5, #16]
   11e46:	68ab      	ldr	r3, [r5, #8]
   11e48:	6849      	ldr	r1, [r1, #4]
   11e4a:	eb07 1762 	add.w	r7, r7, r2, asr #5
   11e4e:	1c7e      	adds	r6, r7, #1
   11e50:	429e      	cmp	r6, r3
   11e52:	4680      	mov	r8, r0
   11e54:	ea4f 1962 	mov.w	r9, r2, asr #5
   11e58:	dd04      	ble.n	11e64 <__lshift+0x28>
   11e5a:	005b      	lsls	r3, r3, #1
   11e5c:	429e      	cmp	r6, r3
   11e5e:	f101 0101 	add.w	r1, r1, #1
   11e62:	dcfa      	bgt.n	11e5a <__lshift+0x1e>
   11e64:	4640      	mov	r0, r8
   11e66:	f7ff fddb 	bl	11a20 <_Balloc>
   11e6a:	4684      	mov	ip, r0
   11e6c:	2800      	cmp	r0, #0
   11e6e:	d052      	beq.n	11f16 <__lshift+0xda>
   11e70:	f1b9 0f00 	cmp.w	r9, #0
   11e74:	f100 0214 	add.w	r2, r0, #20
   11e78:	dd0e      	ble.n	11e98 <__lshift+0x5c>
   11e7a:	f109 0105 	add.w	r1, r9, #5
   11e7e:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   11e82:	4613      	mov	r3, r2
   11e84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   11e88:	2000      	movs	r0, #0
   11e8a:	f843 0b04 	str.w	r0, [r3], #4
   11e8e:	428b      	cmp	r3, r1
   11e90:	d1fb      	bne.n	11e8a <__lshift+0x4e>
   11e92:	f1ae 0314 	sub.w	r3, lr, #20
   11e96:	441a      	add	r2, r3
   11e98:	6929      	ldr	r1, [r5, #16]
   11e9a:	f105 0314 	add.w	r3, r5, #20
   11e9e:	f014 0e1f 	ands.w	lr, r4, #31
   11ea2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11ea6:	d02e      	beq.n	11f06 <__lshift+0xca>
   11ea8:	f1ce 0920 	rsb	r9, lr, #32
   11eac:	4610      	mov	r0, r2
   11eae:	f04f 0a00 	mov.w	sl, #0
   11eb2:	681c      	ldr	r4, [r3, #0]
   11eb4:	fa04 f40e 	lsl.w	r4, r4, lr
   11eb8:	ea44 040a 	orr.w	r4, r4, sl
   11ebc:	f840 4b04 	str.w	r4, [r0], #4
   11ec0:	f853 4b04 	ldr.w	r4, [r3], #4
   11ec4:	4299      	cmp	r1, r3
   11ec6:	fa24 fa09 	lsr.w	sl, r4, r9
   11eca:	d8f2      	bhi.n	11eb2 <__lshift+0x76>
   11ecc:	1b4b      	subs	r3, r1, r5
   11ece:	3b15      	subs	r3, #21
   11ed0:	f023 0303 	bic.w	r3, r3, #3
   11ed4:	3304      	adds	r3, #4
   11ed6:	f105 0015 	add.w	r0, r5, #21
   11eda:	4281      	cmp	r1, r0
   11edc:	bf38      	it	cc
   11ede:	2304      	movcc	r3, #4
   11ee0:	f1ba 0f00 	cmp.w	sl, #0
   11ee4:	bf18      	it	ne
   11ee6:	4637      	movne	r7, r6
   11ee8:	f842 a003 	str.w	sl, [r2, r3]
   11eec:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11ef0:	686a      	ldr	r2, [r5, #4]
   11ef2:	f8cc 7010 	str.w	r7, [ip, #16]
   11ef6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11efa:	6029      	str	r1, [r5, #0]
   11efc:	4660      	mov	r0, ip
   11efe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   11f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f06:	3a04      	subs	r2, #4
   11f08:	f853 0b04 	ldr.w	r0, [r3], #4
   11f0c:	f842 0f04 	str.w	r0, [r2, #4]!
   11f10:	4299      	cmp	r1, r3
   11f12:	d8f9      	bhi.n	11f08 <__lshift+0xcc>
   11f14:	e7ea      	b.n	11eec <__lshift+0xb0>
   11f16:	4b03      	ldr	r3, [pc, #12]	; (11f24 <__lshift+0xe8>)
   11f18:	4803      	ldr	r0, [pc, #12]	; (11f28 <__lshift+0xec>)
   11f1a:	4662      	mov	r2, ip
   11f1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   11f20:	f7ff fc64 	bl	117ec <__assert_func>
   11f24:	200025c0 	.word	0x200025c0
   11f28:	200025d4 	.word	0x200025d4

00011f2c <__mcmp>:
   11f2c:	690b      	ldr	r3, [r1, #16]
   11f2e:	4684      	mov	ip, r0
   11f30:	6900      	ldr	r0, [r0, #16]
   11f32:	1ac0      	subs	r0, r0, r3
   11f34:	d116      	bne.n	11f64 <__mcmp+0x38>
   11f36:	f10c 0c14 	add.w	ip, ip, #20
   11f3a:	3114      	adds	r1, #20
   11f3c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   11f40:	b410      	push	{r4}
   11f42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   11f46:	e001      	b.n	11f4c <__mcmp+0x20>
   11f48:	4594      	cmp	ip, r2
   11f4a:	d208      	bcs.n	11f5e <__mcmp+0x32>
   11f4c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11f50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11f54:	428c      	cmp	r4, r1
   11f56:	d0f7      	beq.n	11f48 <__mcmp+0x1c>
   11f58:	d205      	bcs.n	11f66 <__mcmp+0x3a>
   11f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f62:	4770      	bx	lr
   11f64:	4770      	bx	lr
   11f66:	2001      	movs	r0, #1
   11f68:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f6c:	4770      	bx	lr
   11f6e:	bf00      	nop

00011f70 <__mdiff>:
   11f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f74:	690f      	ldr	r7, [r1, #16]
   11f76:	6913      	ldr	r3, [r2, #16]
   11f78:	1aff      	subs	r7, r7, r3
   11f7a:	2f00      	cmp	r7, #0
   11f7c:	460e      	mov	r6, r1
   11f7e:	4690      	mov	r8, r2
   11f80:	d17f      	bne.n	12082 <__mdiff+0x112>
   11f82:	f101 0514 	add.w	r5, r1, #20
   11f86:	3214      	adds	r2, #20
   11f88:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11f8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11f90:	e001      	b.n	11f96 <__mdiff+0x26>
   11f92:	429d      	cmp	r5, r3
   11f94:	d278      	bcs.n	12088 <__mdiff+0x118>
   11f96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11f9a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11f9e:	42a1      	cmp	r1, r4
   11fa0:	d0f7      	beq.n	11f92 <__mdiff+0x22>
   11fa2:	d369      	bcc.n	12078 <__mdiff+0x108>
   11fa4:	6871      	ldr	r1, [r6, #4]
   11fa6:	f7ff fd3b 	bl	11a20 <_Balloc>
   11faa:	4681      	mov	r9, r0
   11fac:	2800      	cmp	r0, #0
   11fae:	d077      	beq.n	120a0 <__mdiff+0x130>
   11fb0:	6935      	ldr	r5, [r6, #16]
   11fb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   11fb6:	60c7      	str	r7, [r0, #12]
   11fb8:	f108 0e14 	add.w	lr, r8, #20
   11fbc:	f106 0014 	add.w	r0, r6, #20
   11fc0:	f109 0a14 	add.w	sl, r9, #20
   11fc4:	f106 0110 	add.w	r1, r6, #16
   11fc8:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   11fcc:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   11fd0:	4656      	mov	r6, sl
   11fd2:	f04f 0c00 	mov.w	ip, #0
   11fd6:	f85e 4b04 	ldr.w	r4, [lr], #4
   11fda:	f851 bf04 	ldr.w	fp, [r1, #4]!
   11fde:	b2a3      	uxth	r3, r4
   11fe0:	fa1c fc8b 	uxtah	ip, ip, fp
   11fe4:	ebac 0303 	sub.w	r3, ip, r3
   11fe8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11fec:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   11ff0:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   11ff4:	b29b      	uxth	r3, r3
   11ff6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   11ffa:	4572      	cmp	r2, lr
   11ffc:	f846 3b04 	str.w	r3, [r6], #4
   12000:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   12004:	d8e7      	bhi.n	11fd6 <__mdiff+0x66>
   12006:	eba2 0108 	sub.w	r1, r2, r8
   1200a:	3915      	subs	r1, #21
   1200c:	f108 0815 	add.w	r8, r8, #21
   12010:	4542      	cmp	r2, r8
   12012:	f021 0403 	bic.w	r4, r1, #3
   12016:	f104 0404 	add.w	r4, r4, #4
   1201a:	bf38      	it	cc
   1201c:	2404      	movcc	r4, #4
   1201e:	4420      	add	r0, r4
   12020:	f021 0203 	bic.w	r2, r1, #3
   12024:	bf38      	it	cc
   12026:	2200      	movcc	r2, #0
   12028:	4287      	cmp	r7, r0
   1202a:	4452      	add	r2, sl
   1202c:	4454      	add	r4, sl
   1202e:	d918      	bls.n	12062 <__mdiff+0xf2>
   12030:	4626      	mov	r6, r4
   12032:	4601      	mov	r1, r0
   12034:	f851 3b04 	ldr.w	r3, [r1], #4
   12038:	fa1c fc83 	uxtah	ip, ip, r3
   1203c:	ea4f 422c 	mov.w	r2, ip, asr #16
   12040:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   12044:	fa1f fc8c 	uxth.w	ip, ip
   12048:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   1204c:	428f      	cmp	r7, r1
   1204e:	f846 3b04 	str.w	r3, [r6], #4
   12052:	ea4f 4c22 	mov.w	ip, r2, asr #16
   12056:	d8ed      	bhi.n	12034 <__mdiff+0xc4>
   12058:	3f01      	subs	r7, #1
   1205a:	1a3f      	subs	r7, r7, r0
   1205c:	f027 0703 	bic.w	r7, r7, #3
   12060:	19e2      	adds	r2, r4, r7
   12062:	b923      	cbnz	r3, 1206e <__mdiff+0xfe>
   12064:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   12068:	3d01      	subs	r5, #1
   1206a:	2b00      	cmp	r3, #0
   1206c:	d0fa      	beq.n	12064 <__mdiff+0xf4>
   1206e:	f8c9 5010 	str.w	r5, [r9, #16]
   12072:	4648      	mov	r0, r9
   12074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12078:	4633      	mov	r3, r6
   1207a:	2701      	movs	r7, #1
   1207c:	4646      	mov	r6, r8
   1207e:	4698      	mov	r8, r3
   12080:	e790      	b.n	11fa4 <__mdiff+0x34>
   12082:	dbf9      	blt.n	12078 <__mdiff+0x108>
   12084:	2700      	movs	r7, #0
   12086:	e78d      	b.n	11fa4 <__mdiff+0x34>
   12088:	2100      	movs	r1, #0
   1208a:	f7ff fcc9 	bl	11a20 <_Balloc>
   1208e:	4681      	mov	r9, r0
   12090:	b168      	cbz	r0, 120ae <__mdiff+0x13e>
   12092:	2201      	movs	r2, #1
   12094:	2300      	movs	r3, #0
   12096:	e9c9 2304 	strd	r2, r3, [r9, #16]
   1209a:	4648      	mov	r0, r9
   1209c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120a0:	4b06      	ldr	r3, [pc, #24]	; (120bc <__mdiff+0x14c>)
   120a2:	4807      	ldr	r0, [pc, #28]	; (120c0 <__mdiff+0x150>)
   120a4:	464a      	mov	r2, r9
   120a6:	f240 2145 	movw	r1, #581	; 0x245
   120aa:	f7ff fb9f 	bl	117ec <__assert_func>
   120ae:	4b03      	ldr	r3, [pc, #12]	; (120bc <__mdiff+0x14c>)
   120b0:	4803      	ldr	r0, [pc, #12]	; (120c0 <__mdiff+0x150>)
   120b2:	464a      	mov	r2, r9
   120b4:	f240 2137 	movw	r1, #567	; 0x237
   120b8:	f7ff fb98 	bl	117ec <__assert_func>
   120bc:	200025c0 	.word	0x200025c0
   120c0:	200025d4 	.word	0x200025d4

000120c4 <__d2b>:
   120c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   120c8:	4688      	mov	r8, r1
   120ca:	b083      	sub	sp, #12
   120cc:	2101      	movs	r1, #1
   120ce:	ec57 6b10 	vmov	r6, r7, d0
   120d2:	4615      	mov	r5, r2
   120d4:	f7ff fca4 	bl	11a20 <_Balloc>
   120d8:	4604      	mov	r4, r0
   120da:	2800      	cmp	r0, #0
   120dc:	d051      	beq.n	12182 <__d2b+0xbe>
   120de:	f3c7 590a 	ubfx	r9, r7, #20, #11
   120e2:	f3c7 0313 	ubfx	r3, r7, #0, #20
   120e6:	f1b9 0f00 	cmp.w	r9, #0
   120ea:	d001      	beq.n	120f0 <__d2b+0x2c>
   120ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   120f0:	2e00      	cmp	r6, #0
   120f2:	9301      	str	r3, [sp, #4]
   120f4:	d118      	bne.n	12128 <__d2b+0x64>
   120f6:	a801      	add	r0, sp, #4
   120f8:	f7ff fd34 	bl	11b64 <__lo0bits>
   120fc:	9a01      	ldr	r2, [sp, #4]
   120fe:	6162      	str	r2, [r4, #20]
   12100:	2201      	movs	r2, #1
   12102:	f100 0320 	add.w	r3, r0, #32
   12106:	6122      	str	r2, [r4, #16]
   12108:	f1b9 0f00 	cmp.w	r9, #0
   1210c:	d025      	beq.n	1215a <__d2b+0x96>
   1210e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   12112:	eb09 0203 	add.w	r2, r9, r3
   12116:	4620      	mov	r0, r4
   12118:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   1211c:	f8c8 2000 	str.w	r2, [r8]
   12120:	602b      	str	r3, [r5, #0]
   12122:	b003      	add	sp, #12
   12124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12128:	4668      	mov	r0, sp
   1212a:	9600      	str	r6, [sp, #0]
   1212c:	f7ff fd1a 	bl	11b64 <__lo0bits>
   12130:	4603      	mov	r3, r0
   12132:	b310      	cbz	r0, 1217a <__d2b+0xb6>
   12134:	e9dd 0200 	ldrd	r0, r2, [sp]
   12138:	f1c3 0120 	rsb	r1, r3, #32
   1213c:	fa02 f101 	lsl.w	r1, r2, r1
   12140:	4301      	orrs	r1, r0
   12142:	40da      	lsrs	r2, r3
   12144:	6161      	str	r1, [r4, #20]
   12146:	9201      	str	r2, [sp, #4]
   12148:	2a00      	cmp	r2, #0
   1214a:	61a2      	str	r2, [r4, #24]
   1214c:	bf14      	ite	ne
   1214e:	2202      	movne	r2, #2
   12150:	2201      	moveq	r2, #1
   12152:	6122      	str	r2, [r4, #16]
   12154:	f1b9 0f00 	cmp.w	r9, #0
   12158:	d1d9      	bne.n	1210e <__d2b+0x4a>
   1215a:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   1215e:	f8c8 3000 	str.w	r3, [r8]
   12162:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   12166:	6918      	ldr	r0, [r3, #16]
   12168:	f7ff fcdc 	bl	11b24 <__hi0bits>
   1216c:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   12170:	4620      	mov	r0, r4
   12172:	602b      	str	r3, [r5, #0]
   12174:	b003      	add	sp, #12
   12176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1217a:	9a00      	ldr	r2, [sp, #0]
   1217c:	6162      	str	r2, [r4, #20]
   1217e:	9a01      	ldr	r2, [sp, #4]
   12180:	e7e2      	b.n	12148 <__d2b+0x84>
   12182:	4b03      	ldr	r3, [pc, #12]	; (12190 <__d2b+0xcc>)
   12184:	4803      	ldr	r0, [pc, #12]	; (12194 <__d2b+0xd0>)
   12186:	4622      	mov	r2, r4
   12188:	f240 310f 	movw	r1, #783	; 0x30f
   1218c:	f7ff fb2e 	bl	117ec <__assert_func>
   12190:	200025c0 	.word	0x200025c0
   12194:	200025d4 	.word	0x200025d4

00012198 <_calloc_r>:
   12198:	b538      	push	{r3, r4, r5, lr}
   1219a:	fba1 1402 	umull	r1, r4, r1, r2
   1219e:	bb8c      	cbnz	r4, 12204 <_calloc_r+0x6c>
   121a0:	f7fe ffc8 	bl	11134 <_malloc_r>
   121a4:	4605      	mov	r5, r0
   121a6:	b1e0      	cbz	r0, 121e2 <_calloc_r+0x4a>
   121a8:	f850 2c04 	ldr.w	r2, [r0, #-4]
   121ac:	f022 0203 	bic.w	r2, r2, #3
   121b0:	3a04      	subs	r2, #4
   121b2:	2a24      	cmp	r2, #36	; 0x24
   121b4:	d817      	bhi.n	121e6 <_calloc_r+0x4e>
   121b6:	2a13      	cmp	r2, #19
   121b8:	d91a      	bls.n	121f0 <_calloc_r+0x58>
   121ba:	2a1b      	cmp	r2, #27
   121bc:	e9c0 4400 	strd	r4, r4, [r0]
   121c0:	d91d      	bls.n	121fe <_calloc_r+0x66>
   121c2:	2a24      	cmp	r2, #36	; 0x24
   121c4:	bf14      	ite	ne
   121c6:	f100 0210 	addne.w	r2, r0, #16
   121ca:	f100 0218 	addeq.w	r2, r0, #24
   121ce:	f04f 0300 	mov.w	r3, #0
   121d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   121d6:	bf04      	itt	eq
   121d8:	6104      	streq	r4, [r0, #16]
   121da:	6144      	streq	r4, [r0, #20]
   121dc:	e9c2 3300 	strd	r3, r3, [r2]
   121e0:	6093      	str	r3, [r2, #8]
   121e2:	4628      	mov	r0, r5
   121e4:	bd38      	pop	{r3, r4, r5, pc}
   121e6:	4621      	mov	r1, r4
   121e8:	f7ff fb20 	bl	1182c <memset>
   121ec:	4628      	mov	r0, r5
   121ee:	bd38      	pop	{r3, r4, r5, pc}
   121f0:	4602      	mov	r2, r0
   121f2:	2300      	movs	r3, #0
   121f4:	e9c2 3300 	strd	r3, r3, [r2]
   121f8:	6093      	str	r3, [r2, #8]
   121fa:	4628      	mov	r0, r5
   121fc:	bd38      	pop	{r3, r4, r5, pc}
   121fe:	f100 0208 	add.w	r2, r0, #8
   12202:	e7f6      	b.n	121f2 <_calloc_r+0x5a>
   12204:	f7fe ff80 	bl	11108 <__errno>
   12208:	230c      	movs	r3, #12
   1220a:	2500      	movs	r5, #0
   1220c:	6003      	str	r3, [r0, #0]
   1220e:	e7e8      	b.n	121e2 <_calloc_r+0x4a>

00012210 <realloc>:
   12210:	b410      	push	{r4}
   12212:	4c04      	ldr	r4, [pc, #16]	; (12224 <realloc+0x14>)
   12214:	4603      	mov	r3, r0
   12216:	460a      	mov	r2, r1
   12218:	6820      	ldr	r0, [r4, #0]
   1221a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1221e:	4619      	mov	r1, r3
   12220:	f000 b99c 	b.w	1255c <_realloc_r>
   12224:	200038d0 	.word	0x200038d0

00012228 <stdio_exit_handler>:
   12228:	4a02      	ldr	r2, [pc, #8]	; (12234 <stdio_exit_handler+0xc>)
   1222a:	4903      	ldr	r1, [pc, #12]	; (12238 <stdio_exit_handler+0x10>)
   1222c:	4803      	ldr	r0, [pc, #12]	; (1223c <stdio_exit_handler+0x14>)
   1222e:	f000 bd51 	b.w	12cd4 <_fwalk_sglue>
   12232:	bf00      	nop
   12234:	200038c4 	.word	0x200038c4
   12238:	00013f79 	.word	0x00013f79
   1223c:	20003148 	.word	0x20003148

00012240 <cleanup_stdio>:
   12240:	4b0c      	ldr	r3, [pc, #48]	; (12274 <cleanup_stdio+0x34>)
   12242:	6841      	ldr	r1, [r0, #4]
   12244:	4299      	cmp	r1, r3
   12246:	b510      	push	{r4, lr}
   12248:	4604      	mov	r4, r0
   1224a:	d001      	beq.n	12250 <cleanup_stdio+0x10>
   1224c:	f001 fe94 	bl	13f78 <_fclose_r>
   12250:	68a1      	ldr	r1, [r4, #8]
   12252:	4b09      	ldr	r3, [pc, #36]	; (12278 <cleanup_stdio+0x38>)
   12254:	4299      	cmp	r1, r3
   12256:	d002      	beq.n	1225e <cleanup_stdio+0x1e>
   12258:	4620      	mov	r0, r4
   1225a:	f001 fe8d 	bl	13f78 <_fclose_r>
   1225e:	68e1      	ldr	r1, [r4, #12]
   12260:	4b06      	ldr	r3, [pc, #24]	; (1227c <cleanup_stdio+0x3c>)
   12262:	4299      	cmp	r1, r3
   12264:	d004      	beq.n	12270 <cleanup_stdio+0x30>
   12266:	4620      	mov	r0, r4
   12268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1226c:	f001 be84 	b.w	13f78 <_fclose_r>
   12270:	bd10      	pop	{r4, pc}
   12272:	bf00      	nop
   12274:	20004d88 	.word	0x20004d88
   12278:	20004df0 	.word	0x20004df0
   1227c:	20004e58 	.word	0x20004e58

00012280 <global_stdio_init.part.0>:
   12280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12284:	4c2a      	ldr	r4, [pc, #168]	; (12330 <global_stdio_init.part.0+0xb0>)
   12286:	4b2b      	ldr	r3, [pc, #172]	; (12334 <global_stdio_init.part.0+0xb4>)
   12288:	482b      	ldr	r0, [pc, #172]	; (12338 <global_stdio_init.part.0+0xb8>)
   1228a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1234c <global_stdio_init.part.0+0xcc>
   1228e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 12350 <global_stdio_init.part.0+0xd0>
   12292:	4f2a      	ldr	r7, [pc, #168]	; (1233c <global_stdio_init.part.0+0xbc>)
   12294:	6018      	str	r0, [r3, #0]
   12296:	2500      	movs	r5, #0
   12298:	2304      	movs	r3, #4
   1229a:	2208      	movs	r2, #8
   1229c:	4629      	mov	r1, r5
   1229e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   122a2:	4e27      	ldr	r6, [pc, #156]	; (12340 <global_stdio_init.part.0+0xc0>)
   122a4:	6665      	str	r5, [r4, #100]	; 0x64
   122a6:	e9c4 5302 	strd	r5, r3, [r4, #8]
   122aa:	e9c4 5500 	strd	r5, r5, [r4]
   122ae:	e9c4 5504 	strd	r5, r5, [r4, #16]
   122b2:	61a5      	str	r5, [r4, #24]
   122b4:	f7ff faba 	bl	1182c <memset>
   122b8:	4b22      	ldr	r3, [pc, #136]	; (12344 <global_stdio_init.part.0+0xc4>)
   122ba:	6763      	str	r3, [r4, #116]	; 0x74
   122bc:	2208      	movs	r2, #8
   122be:	4629      	mov	r1, r5
   122c0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   122c4:	e9c4 4907 	strd	r4, r9, [r4, #28]
   122c8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   122cc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   122d0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   122d4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   122d8:	6725      	str	r5, [r4, #112]	; 0x70
   122da:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   122de:	62e6      	str	r6, [r4, #44]	; 0x2c
   122e0:	f7ff faa4 	bl	1182c <memset>
   122e4:	4b18      	ldr	r3, [pc, #96]	; (12348 <global_stdio_init.part.0+0xc8>)
   122e6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   122ea:	4629      	mov	r1, r5
   122ec:	f104 0368 	add.w	r3, r4, #104	; 0x68
   122f0:	2208      	movs	r2, #8
   122f2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   122f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   122fa:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   122fe:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   12302:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   12306:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   1230a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   1230e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   12312:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   12316:	f7ff fa89 	bl	1182c <memset>
   1231a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1231e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   12322:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   12326:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1232a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1232e:	bf00      	nop
   12330:	20004d88 	.word	0x20004d88
   12334:	20004ec0 	.word	0x20004ec0
   12338:	00012229 	.word	0x00012229
   1233c:	00012c6d 	.word	0x00012c6d
   12340:	00012c8d 	.word	0x00012c8d
   12344:	00010009 	.word	0x00010009
   12348:	00020012 	.word	0x00020012
   1234c:	00012c09 	.word	0x00012c09
   12350:	00012c2d 	.word	0x00012c2d

00012354 <__sinit>:
   12354:	b510      	push	{r4, lr}
   12356:	4604      	mov	r4, r0
   12358:	480a      	ldr	r0, [pc, #40]	; (12384 <__sinit+0x30>)
   1235a:	f7ff faed 	bl	11938 <__retarget_lock_acquire_recursive>
   1235e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12360:	b923      	cbnz	r3, 1236c <__sinit+0x18>
   12362:	4b09      	ldr	r3, [pc, #36]	; (12388 <__sinit+0x34>)
   12364:	4a09      	ldr	r2, [pc, #36]	; (1238c <__sinit+0x38>)
   12366:	681b      	ldr	r3, [r3, #0]
   12368:	6362      	str	r2, [r4, #52]	; 0x34
   1236a:	b123      	cbz	r3, 12376 <__sinit+0x22>
   1236c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12370:	4804      	ldr	r0, [pc, #16]	; (12384 <__sinit+0x30>)
   12372:	f7ff bae3 	b.w	1193c <__retarget_lock_release_recursive>
   12376:	f7ff ff83 	bl	12280 <global_stdio_init.part.0>
   1237a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1237e:	4801      	ldr	r0, [pc, #4]	; (12384 <__sinit+0x30>)
   12380:	f7ff badc 	b.w	1193c <__retarget_lock_release_recursive>
   12384:	20004d50 	.word	0x20004d50
   12388:	20004ec0 	.word	0x20004ec0
   1238c:	00012241 	.word	0x00012241

00012390 <__sfp_lock_acquire>:
   12390:	4801      	ldr	r0, [pc, #4]	; (12398 <__sfp_lock_acquire+0x8>)
   12392:	f7ff bad1 	b.w	11938 <__retarget_lock_acquire_recursive>
   12396:	bf00      	nop
   12398:	20004d50 	.word	0x20004d50

0001239c <__sfp_lock_release>:
   1239c:	4801      	ldr	r0, [pc, #4]	; (123a4 <__sfp_lock_release+0x8>)
   1239e:	f7ff bacd 	b.w	1193c <__retarget_lock_release_recursive>
   123a2:	bf00      	nop
   123a4:	20004d50 	.word	0x20004d50
	...

000123b0 <memchr>:
   123b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   123b4:	2a10      	cmp	r2, #16
   123b6:	db2b      	blt.n	12410 <memchr+0x60>
   123b8:	f010 0f07 	tst.w	r0, #7
   123bc:	d008      	beq.n	123d0 <memchr+0x20>
   123be:	f810 3b01 	ldrb.w	r3, [r0], #1
   123c2:	3a01      	subs	r2, #1
   123c4:	428b      	cmp	r3, r1
   123c6:	d02d      	beq.n	12424 <memchr+0x74>
   123c8:	f010 0f07 	tst.w	r0, #7
   123cc:	b342      	cbz	r2, 12420 <memchr+0x70>
   123ce:	d1f6      	bne.n	123be <memchr+0xe>
   123d0:	b4f0      	push	{r4, r5, r6, r7}
   123d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   123d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   123da:	f022 0407 	bic.w	r4, r2, #7
   123de:	f07f 0700 	mvns.w	r7, #0
   123e2:	2300      	movs	r3, #0
   123e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   123e8:	3c08      	subs	r4, #8
   123ea:	ea85 0501 	eor.w	r5, r5, r1
   123ee:	ea86 0601 	eor.w	r6, r6, r1
   123f2:	fa85 f547 	uadd8	r5, r5, r7
   123f6:	faa3 f587 	sel	r5, r3, r7
   123fa:	fa86 f647 	uadd8	r6, r6, r7
   123fe:	faa5 f687 	sel	r6, r5, r7
   12402:	b98e      	cbnz	r6, 12428 <memchr+0x78>
   12404:	d1ee      	bne.n	123e4 <memchr+0x34>
   12406:	bcf0      	pop	{r4, r5, r6, r7}
   12408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1240c:	f002 0207 	and.w	r2, r2, #7
   12410:	b132      	cbz	r2, 12420 <memchr+0x70>
   12412:	f810 3b01 	ldrb.w	r3, [r0], #1
   12416:	3a01      	subs	r2, #1
   12418:	ea83 0301 	eor.w	r3, r3, r1
   1241c:	b113      	cbz	r3, 12424 <memchr+0x74>
   1241e:	d1f8      	bne.n	12412 <memchr+0x62>
   12420:	2000      	movs	r0, #0
   12422:	4770      	bx	lr
   12424:	3801      	subs	r0, #1
   12426:	4770      	bx	lr
   12428:	2d00      	cmp	r5, #0
   1242a:	bf06      	itte	eq
   1242c:	4635      	moveq	r5, r6
   1242e:	3803      	subeq	r0, #3
   12430:	3807      	subne	r0, #7
   12432:	f015 0f01 	tst.w	r5, #1
   12436:	d107      	bne.n	12448 <memchr+0x98>
   12438:	3001      	adds	r0, #1
   1243a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1243e:	bf02      	ittt	eq
   12440:	3001      	addeq	r0, #1
   12442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12446:	3001      	addeq	r0, #1
   12448:	bcf0      	pop	{r4, r5, r6, r7}
   1244a:	3801      	subs	r0, #1
   1244c:	4770      	bx	lr
   1244e:	bf00      	nop
	...

00012480 <strlen>:
   12480:	f890 f000 	pld	[r0]
   12484:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12488:	f020 0107 	bic.w	r1, r0, #7
   1248c:	f06f 0c00 	mvn.w	ip, #0
   12490:	f010 0407 	ands.w	r4, r0, #7
   12494:	f891 f020 	pld	[r1, #32]
   12498:	f040 8049 	bne.w	1252e <strlen+0xae>
   1249c:	f04f 0400 	mov.w	r4, #0
   124a0:	f06f 0007 	mvn.w	r0, #7
   124a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   124a8:	f891 f040 	pld	[r1, #64]	; 0x40
   124ac:	f100 0008 	add.w	r0, r0, #8
   124b0:	fa82 f24c 	uadd8	r2, r2, ip
   124b4:	faa4 f28c 	sel	r2, r4, ip
   124b8:	fa83 f34c 	uadd8	r3, r3, ip
   124bc:	faa2 f38c 	sel	r3, r2, ip
   124c0:	bb4b      	cbnz	r3, 12516 <strlen+0x96>
   124c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   124c6:	fa82 f24c 	uadd8	r2, r2, ip
   124ca:	f100 0008 	add.w	r0, r0, #8
   124ce:	faa4 f28c 	sel	r2, r4, ip
   124d2:	fa83 f34c 	uadd8	r3, r3, ip
   124d6:	faa2 f38c 	sel	r3, r2, ip
   124da:	b9e3      	cbnz	r3, 12516 <strlen+0x96>
   124dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   124e0:	fa82 f24c 	uadd8	r2, r2, ip
   124e4:	f100 0008 	add.w	r0, r0, #8
   124e8:	faa4 f28c 	sel	r2, r4, ip
   124ec:	fa83 f34c 	uadd8	r3, r3, ip
   124f0:	faa2 f38c 	sel	r3, r2, ip
   124f4:	b97b      	cbnz	r3, 12516 <strlen+0x96>
   124f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   124fa:	f101 0120 	add.w	r1, r1, #32
   124fe:	fa82 f24c 	uadd8	r2, r2, ip
   12502:	f100 0008 	add.w	r0, r0, #8
   12506:	faa4 f28c 	sel	r2, r4, ip
   1250a:	fa83 f34c 	uadd8	r3, r3, ip
   1250e:	faa2 f38c 	sel	r3, r2, ip
   12512:	2b00      	cmp	r3, #0
   12514:	d0c6      	beq.n	124a4 <strlen+0x24>
   12516:	2a00      	cmp	r2, #0
   12518:	bf04      	itt	eq
   1251a:	3004      	addeq	r0, #4
   1251c:	461a      	moveq	r2, r3
   1251e:	ba12      	rev	r2, r2
   12520:	fab2 f282 	clz	r2, r2
   12524:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12528:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1252c:	4770      	bx	lr
   1252e:	e9d1 2300 	ldrd	r2, r3, [r1]
   12532:	f004 0503 	and.w	r5, r4, #3
   12536:	f1c4 0000 	rsb	r0, r4, #0
   1253a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1253e:	f014 0f04 	tst.w	r4, #4
   12542:	f891 f040 	pld	[r1, #64]	; 0x40
   12546:	fa0c f505 	lsl.w	r5, ip, r5
   1254a:	ea62 0205 	orn	r2, r2, r5
   1254e:	bf1c      	itt	ne
   12550:	ea63 0305 	ornne	r3, r3, r5
   12554:	4662      	movne	r2, ip
   12556:	f04f 0400 	mov.w	r4, #0
   1255a:	e7a9      	b.n	124b0 <strlen+0x30>

0001255c <_realloc_r>:
   1255c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12560:	4617      	mov	r7, r2
   12562:	2900      	cmp	r1, #0
   12564:	f000 8098 	beq.w	12698 <_realloc_r+0x13c>
   12568:	460c      	mov	r4, r1
   1256a:	f107 050b 	add.w	r5, r7, #11
   1256e:	4680      	mov	r8, r0
   12570:	f7ff fa4a 	bl	11a08 <__malloc_lock>
   12574:	2d16      	cmp	r5, #22
   12576:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1257a:	d85b      	bhi.n	12634 <_realloc_r+0xd8>
   1257c:	2510      	movs	r5, #16
   1257e:	462a      	mov	r2, r5
   12580:	42af      	cmp	r7, r5
   12582:	d85c      	bhi.n	1263e <_realloc_r+0xe2>
   12584:	f021 0603 	bic.w	r6, r1, #3
   12588:	4296      	cmp	r6, r2
   1258a:	f1a4 0908 	sub.w	r9, r4, #8
   1258e:	da62      	bge.n	12656 <_realloc_r+0xfa>
   12590:	4bbc      	ldr	r3, [pc, #752]	; (12884 <_realloc_r+0x328>)
   12592:	f8d3 c008 	ldr.w	ip, [r3, #8]
   12596:	eb09 0006 	add.w	r0, r9, r6
   1259a:	4584      	cmp	ip, r0
   1259c:	f000 8097 	beq.w	126ce <_realloc_r+0x172>
   125a0:	f8d0 c004 	ldr.w	ip, [r0, #4]
   125a4:	f02c 0301 	bic.w	r3, ip, #1
   125a8:	4403      	add	r3, r0
   125aa:	685b      	ldr	r3, [r3, #4]
   125ac:	07db      	lsls	r3, r3, #31
   125ae:	d468      	bmi.n	12682 <_realloc_r+0x126>
   125b0:	f02c 0c03 	bic.w	ip, ip, #3
   125b4:	eb06 030c 	add.w	r3, r6, ip
   125b8:	4293      	cmp	r3, r2
   125ba:	da47      	bge.n	1264c <_realloc_r+0xf0>
   125bc:	07cb      	lsls	r3, r1, #31
   125be:	d410      	bmi.n	125e2 <_realloc_r+0x86>
   125c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   125c4:	eba9 0a03 	sub.w	sl, r9, r3
   125c8:	f8da 3004 	ldr.w	r3, [sl, #4]
   125cc:	f023 0103 	bic.w	r1, r3, #3
   125d0:	448c      	add	ip, r1
   125d2:	44b4      	add	ip, r6
   125d4:	4594      	cmp	ip, r2
   125d6:	f280 8111 	bge.w	127fc <_realloc_r+0x2a0>
   125da:	1873      	adds	r3, r6, r1
   125dc:	4293      	cmp	r3, r2
   125de:	f280 80e8 	bge.w	127b2 <_realloc_r+0x256>
   125e2:	4639      	mov	r1, r7
   125e4:	4640      	mov	r0, r8
   125e6:	f7fe fda5 	bl	11134 <_malloc_r>
   125ea:	4607      	mov	r7, r0
   125ec:	b1e0      	cbz	r0, 12628 <_realloc_r+0xcc>
   125ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
   125f2:	f023 0301 	bic.w	r3, r3, #1
   125f6:	444b      	add	r3, r9
   125f8:	f1a0 0208 	sub.w	r2, r0, #8
   125fc:	4293      	cmp	r3, r2
   125fe:	f000 80d2 	beq.w	127a6 <_realloc_r+0x24a>
   12602:	1f32      	subs	r2, r6, #4
   12604:	2a24      	cmp	r2, #36	; 0x24
   12606:	f200 80f5 	bhi.w	127f4 <_realloc_r+0x298>
   1260a:	2a13      	cmp	r2, #19
   1260c:	f200 80ac 	bhi.w	12768 <_realloc_r+0x20c>
   12610:	4603      	mov	r3, r0
   12612:	4622      	mov	r2, r4
   12614:	6811      	ldr	r1, [r2, #0]
   12616:	6019      	str	r1, [r3, #0]
   12618:	6851      	ldr	r1, [r2, #4]
   1261a:	6059      	str	r1, [r3, #4]
   1261c:	6892      	ldr	r2, [r2, #8]
   1261e:	609a      	str	r2, [r3, #8]
   12620:	4621      	mov	r1, r4
   12622:	4640      	mov	r0, r8
   12624:	f000 f9d6 	bl	129d4 <_free_r>
   12628:	4640      	mov	r0, r8
   1262a:	f7ff f9f3 	bl	11a14 <__malloc_unlock>
   1262e:	4638      	mov	r0, r7
   12630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12634:	f025 0507 	bic.w	r5, r5, #7
   12638:	2d00      	cmp	r5, #0
   1263a:	462a      	mov	r2, r5
   1263c:	daa0      	bge.n	12580 <_realloc_r+0x24>
   1263e:	230c      	movs	r3, #12
   12640:	f8c8 3000 	str.w	r3, [r8]
   12644:	2700      	movs	r7, #0
   12646:	4638      	mov	r0, r7
   12648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1264c:	461e      	mov	r6, r3
   1264e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   12652:	60d3      	str	r3, [r2, #12]
   12654:	609a      	str	r2, [r3, #8]
   12656:	1b73      	subs	r3, r6, r5
   12658:	2b0f      	cmp	r3, #15
   1265a:	d822      	bhi.n	126a2 <_realloc_r+0x146>
   1265c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12660:	f003 0301 	and.w	r3, r3, #1
   12664:	4333      	orrs	r3, r6
   12666:	444e      	add	r6, r9
   12668:	f8c9 3004 	str.w	r3, [r9, #4]
   1266c:	6873      	ldr	r3, [r6, #4]
   1266e:	f043 0301 	orr.w	r3, r3, #1
   12672:	6073      	str	r3, [r6, #4]
   12674:	4640      	mov	r0, r8
   12676:	4627      	mov	r7, r4
   12678:	f7ff f9cc 	bl	11a14 <__malloc_unlock>
   1267c:	4638      	mov	r0, r7
   1267e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12682:	07c9      	lsls	r1, r1, #31
   12684:	d4ad      	bmi.n	125e2 <_realloc_r+0x86>
   12686:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1268a:	eba9 0a03 	sub.w	sl, r9, r3
   1268e:	f8da 1004 	ldr.w	r1, [sl, #4]
   12692:	f021 0103 	bic.w	r1, r1, #3
   12696:	e7a0      	b.n	125da <_realloc_r+0x7e>
   12698:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1269c:	4611      	mov	r1, r2
   1269e:	f7fe bd49 	b.w	11134 <_malloc_r>
   126a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   126a6:	eb09 0105 	add.w	r1, r9, r5
   126aa:	f002 0201 	and.w	r2, r2, #1
   126ae:	444e      	add	r6, r9
   126b0:	f043 0301 	orr.w	r3, r3, #1
   126b4:	432a      	orrs	r2, r5
   126b6:	f8c9 2004 	str.w	r2, [r9, #4]
   126ba:	604b      	str	r3, [r1, #4]
   126bc:	6873      	ldr	r3, [r6, #4]
   126be:	f043 0301 	orr.w	r3, r3, #1
   126c2:	3108      	adds	r1, #8
   126c4:	6073      	str	r3, [r6, #4]
   126c6:	4640      	mov	r0, r8
   126c8:	f000 f984 	bl	129d4 <_free_r>
   126cc:	e7d2      	b.n	12674 <_realloc_r+0x118>
   126ce:	f8dc 0004 	ldr.w	r0, [ip, #4]
   126d2:	f020 0b03 	bic.w	fp, r0, #3
   126d6:	eb06 0c0b 	add.w	ip, r6, fp
   126da:	f105 0010 	add.w	r0, r5, #16
   126de:	4584      	cmp	ip, r0
   126e0:	da4d      	bge.n	1277e <_realloc_r+0x222>
   126e2:	07c9      	lsls	r1, r1, #31
   126e4:	f53f af7d 	bmi.w	125e2 <_realloc_r+0x86>
   126e8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   126ec:	eba9 0a01 	sub.w	sl, r9, r1
   126f0:	f8da 1004 	ldr.w	r1, [sl, #4]
   126f4:	f021 0103 	bic.w	r1, r1, #3
   126f8:	448b      	add	fp, r1
   126fa:	44b3      	add	fp, r6
   126fc:	4558      	cmp	r0, fp
   126fe:	f73f af6c 	bgt.w	125da <_realloc_r+0x7e>
   12702:	4657      	mov	r7, sl
   12704:	f8da 100c 	ldr.w	r1, [sl, #12]
   12708:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1270c:	1f32      	subs	r2, r6, #4
   1270e:	2a24      	cmp	r2, #36	; 0x24
   12710:	60c1      	str	r1, [r0, #12]
   12712:	6088      	str	r0, [r1, #8]
   12714:	f200 80db 	bhi.w	128ce <_realloc_r+0x372>
   12718:	2a13      	cmp	r2, #19
   1271a:	f240 80d6 	bls.w	128ca <_realloc_r+0x36e>
   1271e:	6821      	ldr	r1, [r4, #0]
   12720:	f8ca 1008 	str.w	r1, [sl, #8]
   12724:	6861      	ldr	r1, [r4, #4]
   12726:	f8ca 100c 	str.w	r1, [sl, #12]
   1272a:	2a1b      	cmp	r2, #27
   1272c:	f200 80df 	bhi.w	128ee <_realloc_r+0x392>
   12730:	3408      	adds	r4, #8
   12732:	f10a 0210 	add.w	r2, sl, #16
   12736:	6821      	ldr	r1, [r4, #0]
   12738:	6011      	str	r1, [r2, #0]
   1273a:	6861      	ldr	r1, [r4, #4]
   1273c:	6051      	str	r1, [r2, #4]
   1273e:	68a1      	ldr	r1, [r4, #8]
   12740:	6091      	str	r1, [r2, #8]
   12742:	eb0a 0105 	add.w	r1, sl, r5
   12746:	ebab 0205 	sub.w	r2, fp, r5
   1274a:	f042 0201 	orr.w	r2, r2, #1
   1274e:	6099      	str	r1, [r3, #8]
   12750:	604a      	str	r2, [r1, #4]
   12752:	f8da 3004 	ldr.w	r3, [sl, #4]
   12756:	f003 0301 	and.w	r3, r3, #1
   1275a:	432b      	orrs	r3, r5
   1275c:	4640      	mov	r0, r8
   1275e:	f8ca 3004 	str.w	r3, [sl, #4]
   12762:	f7ff f957 	bl	11a14 <__malloc_unlock>
   12766:	e76e      	b.n	12646 <_realloc_r+0xea>
   12768:	6823      	ldr	r3, [r4, #0]
   1276a:	6003      	str	r3, [r0, #0]
   1276c:	6863      	ldr	r3, [r4, #4]
   1276e:	6043      	str	r3, [r0, #4]
   12770:	2a1b      	cmp	r2, #27
   12772:	d868      	bhi.n	12846 <_realloc_r+0x2ea>
   12774:	f104 0208 	add.w	r2, r4, #8
   12778:	f100 0308 	add.w	r3, r0, #8
   1277c:	e74a      	b.n	12614 <_realloc_r+0xb8>
   1277e:	eb09 0205 	add.w	r2, r9, r5
   12782:	609a      	str	r2, [r3, #8]
   12784:	ebac 0305 	sub.w	r3, ip, r5
   12788:	f043 0301 	orr.w	r3, r3, #1
   1278c:	6053      	str	r3, [r2, #4]
   1278e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12792:	f003 0301 	and.w	r3, r3, #1
   12796:	432b      	orrs	r3, r5
   12798:	4640      	mov	r0, r8
   1279a:	f844 3c04 	str.w	r3, [r4, #-4]
   1279e:	f7ff f939 	bl	11a14 <__malloc_unlock>
   127a2:	4627      	mov	r7, r4
   127a4:	e74f      	b.n	12646 <_realloc_r+0xea>
   127a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   127aa:	f023 0303 	bic.w	r3, r3, #3
   127ae:	441e      	add	r6, r3
   127b0:	e751      	b.n	12656 <_realloc_r+0xfa>
   127b2:	4657      	mov	r7, sl
   127b4:	f8da 100c 	ldr.w	r1, [sl, #12]
   127b8:	f857 0f08 	ldr.w	r0, [r7, #8]!
   127bc:	1f32      	subs	r2, r6, #4
   127be:	2a24      	cmp	r2, #36	; 0x24
   127c0:	60c1      	str	r1, [r0, #12]
   127c2:	6088      	str	r0, [r1, #8]
   127c4:	d84c      	bhi.n	12860 <_realloc_r+0x304>
   127c6:	2a13      	cmp	r2, #19
   127c8:	d948      	bls.n	1285c <_realloc_r+0x300>
   127ca:	6821      	ldr	r1, [r4, #0]
   127cc:	f8ca 1008 	str.w	r1, [sl, #8]
   127d0:	6861      	ldr	r1, [r4, #4]
   127d2:	f8ca 100c 	str.w	r1, [sl, #12]
   127d6:	2a1b      	cmp	r2, #27
   127d8:	d856      	bhi.n	12888 <_realloc_r+0x32c>
   127da:	3408      	adds	r4, #8
   127dc:	f10a 0210 	add.w	r2, sl, #16
   127e0:	461e      	mov	r6, r3
   127e2:	6823      	ldr	r3, [r4, #0]
   127e4:	6013      	str	r3, [r2, #0]
   127e6:	6863      	ldr	r3, [r4, #4]
   127e8:	6053      	str	r3, [r2, #4]
   127ea:	68a3      	ldr	r3, [r4, #8]
   127ec:	6093      	str	r3, [r2, #8]
   127ee:	46d1      	mov	r9, sl
   127f0:	463c      	mov	r4, r7
   127f2:	e730      	b.n	12656 <_realloc_r+0xfa>
   127f4:	4621      	mov	r1, r4
   127f6:	f7fe ff7d 	bl	116f4 <memmove>
   127fa:	e711      	b.n	12620 <_realloc_r+0xc4>
   127fc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   12800:	4657      	mov	r7, sl
   12802:	60cb      	str	r3, [r1, #12]
   12804:	6099      	str	r1, [r3, #8]
   12806:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1280a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1280e:	60cb      	str	r3, [r1, #12]
   12810:	1f32      	subs	r2, r6, #4
   12812:	2a24      	cmp	r2, #36	; 0x24
   12814:	6099      	str	r1, [r3, #8]
   12816:	d82d      	bhi.n	12874 <_realloc_r+0x318>
   12818:	2a13      	cmp	r2, #19
   1281a:	d929      	bls.n	12870 <_realloc_r+0x314>
   1281c:	6823      	ldr	r3, [r4, #0]
   1281e:	f8ca 3008 	str.w	r3, [sl, #8]
   12822:	6863      	ldr	r3, [r4, #4]
   12824:	f8ca 300c 	str.w	r3, [sl, #12]
   12828:	2a1b      	cmp	r2, #27
   1282a:	d842      	bhi.n	128b2 <_realloc_r+0x356>
   1282c:	3408      	adds	r4, #8
   1282e:	f10a 0310 	add.w	r3, sl, #16
   12832:	6822      	ldr	r2, [r4, #0]
   12834:	601a      	str	r2, [r3, #0]
   12836:	6862      	ldr	r2, [r4, #4]
   12838:	605a      	str	r2, [r3, #4]
   1283a:	68a2      	ldr	r2, [r4, #8]
   1283c:	609a      	str	r2, [r3, #8]
   1283e:	4666      	mov	r6, ip
   12840:	46d1      	mov	r9, sl
   12842:	463c      	mov	r4, r7
   12844:	e707      	b.n	12656 <_realloc_r+0xfa>
   12846:	68a3      	ldr	r3, [r4, #8]
   12848:	6083      	str	r3, [r0, #8]
   1284a:	68e3      	ldr	r3, [r4, #12]
   1284c:	60c3      	str	r3, [r0, #12]
   1284e:	2a24      	cmp	r2, #36	; 0x24
   12850:	d026      	beq.n	128a0 <_realloc_r+0x344>
   12852:	f104 0210 	add.w	r2, r4, #16
   12856:	f100 0310 	add.w	r3, r0, #16
   1285a:	e6db      	b.n	12614 <_realloc_r+0xb8>
   1285c:	463a      	mov	r2, r7
   1285e:	e7bf      	b.n	127e0 <_realloc_r+0x284>
   12860:	4621      	mov	r1, r4
   12862:	4638      	mov	r0, r7
   12864:	461e      	mov	r6, r3
   12866:	46d1      	mov	r9, sl
   12868:	f7fe ff44 	bl	116f4 <memmove>
   1286c:	463c      	mov	r4, r7
   1286e:	e6f2      	b.n	12656 <_realloc_r+0xfa>
   12870:	463b      	mov	r3, r7
   12872:	e7de      	b.n	12832 <_realloc_r+0x2d6>
   12874:	4621      	mov	r1, r4
   12876:	4638      	mov	r0, r7
   12878:	4666      	mov	r6, ip
   1287a:	46d1      	mov	r9, sl
   1287c:	f7fe ff3a 	bl	116f4 <memmove>
   12880:	463c      	mov	r4, r7
   12882:	e6e8      	b.n	12656 <_realloc_r+0xfa>
   12884:	200034b4 	.word	0x200034b4
   12888:	68a1      	ldr	r1, [r4, #8]
   1288a:	f8ca 1010 	str.w	r1, [sl, #16]
   1288e:	68e1      	ldr	r1, [r4, #12]
   12890:	f8ca 1014 	str.w	r1, [sl, #20]
   12894:	2a24      	cmp	r2, #36	; 0x24
   12896:	d020      	beq.n	128da <_realloc_r+0x37e>
   12898:	3410      	adds	r4, #16
   1289a:	f10a 0218 	add.w	r2, sl, #24
   1289e:	e79f      	b.n	127e0 <_realloc_r+0x284>
   128a0:	6923      	ldr	r3, [r4, #16]
   128a2:	6103      	str	r3, [r0, #16]
   128a4:	6961      	ldr	r1, [r4, #20]
   128a6:	6141      	str	r1, [r0, #20]
   128a8:	f104 0218 	add.w	r2, r4, #24
   128ac:	f100 0318 	add.w	r3, r0, #24
   128b0:	e6b0      	b.n	12614 <_realloc_r+0xb8>
   128b2:	68a3      	ldr	r3, [r4, #8]
   128b4:	f8ca 3010 	str.w	r3, [sl, #16]
   128b8:	68e3      	ldr	r3, [r4, #12]
   128ba:	f8ca 3014 	str.w	r3, [sl, #20]
   128be:	2a24      	cmp	r2, #36	; 0x24
   128c0:	d021      	beq.n	12906 <_realloc_r+0x3aa>
   128c2:	3410      	adds	r4, #16
   128c4:	f10a 0318 	add.w	r3, sl, #24
   128c8:	e7b3      	b.n	12832 <_realloc_r+0x2d6>
   128ca:	463a      	mov	r2, r7
   128cc:	e733      	b.n	12736 <_realloc_r+0x1da>
   128ce:	4621      	mov	r1, r4
   128d0:	4638      	mov	r0, r7
   128d2:	f7fe ff0f 	bl	116f4 <memmove>
   128d6:	4b16      	ldr	r3, [pc, #88]	; (12930 <_realloc_r+0x3d4>)
   128d8:	e733      	b.n	12742 <_realloc_r+0x1e6>
   128da:	6922      	ldr	r2, [r4, #16]
   128dc:	f8ca 2018 	str.w	r2, [sl, #24]
   128e0:	6962      	ldr	r2, [r4, #20]
   128e2:	f8ca 201c 	str.w	r2, [sl, #28]
   128e6:	3418      	adds	r4, #24
   128e8:	f10a 0220 	add.w	r2, sl, #32
   128ec:	e778      	b.n	127e0 <_realloc_r+0x284>
   128ee:	68a1      	ldr	r1, [r4, #8]
   128f0:	f8ca 1010 	str.w	r1, [sl, #16]
   128f4:	68e1      	ldr	r1, [r4, #12]
   128f6:	f8ca 1014 	str.w	r1, [sl, #20]
   128fa:	2a24      	cmp	r2, #36	; 0x24
   128fc:	d00d      	beq.n	1291a <_realloc_r+0x3be>
   128fe:	3410      	adds	r4, #16
   12900:	f10a 0218 	add.w	r2, sl, #24
   12904:	e717      	b.n	12736 <_realloc_r+0x1da>
   12906:	6923      	ldr	r3, [r4, #16]
   12908:	f8ca 3018 	str.w	r3, [sl, #24]
   1290c:	6963      	ldr	r3, [r4, #20]
   1290e:	f8ca 301c 	str.w	r3, [sl, #28]
   12912:	3418      	adds	r4, #24
   12914:	f10a 0320 	add.w	r3, sl, #32
   12918:	e78b      	b.n	12832 <_realloc_r+0x2d6>
   1291a:	6922      	ldr	r2, [r4, #16]
   1291c:	f8ca 2018 	str.w	r2, [sl, #24]
   12920:	6962      	ldr	r2, [r4, #20]
   12922:	f8ca 201c 	str.w	r2, [sl, #28]
   12926:	3418      	adds	r4, #24
   12928:	f10a 0220 	add.w	r2, sl, #32
   1292c:	e703      	b.n	12736 <_realloc_r+0x1da>
   1292e:	bf00      	nop
   12930:	200034b4 	.word	0x200034b4

00012934 <_malloc_trim_r>:
   12934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12936:	4f24      	ldr	r7, [pc, #144]	; (129c8 <_malloc_trim_r+0x94>)
   12938:	460c      	mov	r4, r1
   1293a:	4606      	mov	r6, r0
   1293c:	f7ff f864 	bl	11a08 <__malloc_lock>
   12940:	68bb      	ldr	r3, [r7, #8]
   12942:	685d      	ldr	r5, [r3, #4]
   12944:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12948:	310f      	adds	r1, #15
   1294a:	f025 0503 	bic.w	r5, r5, #3
   1294e:	194b      	adds	r3, r1, r5
   12950:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12954:	f023 030f 	bic.w	r3, r3, #15
   12958:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1295c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12960:	db07      	blt.n	12972 <_malloc_trim_r+0x3e>
   12962:	2100      	movs	r1, #0
   12964:	4630      	mov	r0, r6
   12966:	f000 f9a3 	bl	12cb0 <_sbrk_r>
   1296a:	68bb      	ldr	r3, [r7, #8]
   1296c:	442b      	add	r3, r5
   1296e:	4298      	cmp	r0, r3
   12970:	d004      	beq.n	1297c <_malloc_trim_r+0x48>
   12972:	4630      	mov	r0, r6
   12974:	f7ff f84e 	bl	11a14 <__malloc_unlock>
   12978:	2000      	movs	r0, #0
   1297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1297c:	4261      	negs	r1, r4
   1297e:	4630      	mov	r0, r6
   12980:	f000 f996 	bl	12cb0 <_sbrk_r>
   12984:	3001      	adds	r0, #1
   12986:	d00d      	beq.n	129a4 <_malloc_trim_r+0x70>
   12988:	4a10      	ldr	r2, [pc, #64]	; (129cc <_malloc_trim_r+0x98>)
   1298a:	68bb      	ldr	r3, [r7, #8]
   1298c:	1b2d      	subs	r5, r5, r4
   1298e:	f045 0501 	orr.w	r5, r5, #1
   12992:	605d      	str	r5, [r3, #4]
   12994:	6813      	ldr	r3, [r2, #0]
   12996:	4630      	mov	r0, r6
   12998:	1b1b      	subs	r3, r3, r4
   1299a:	6013      	str	r3, [r2, #0]
   1299c:	f7ff f83a 	bl	11a14 <__malloc_unlock>
   129a0:	2001      	movs	r0, #1
   129a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   129a4:	2100      	movs	r1, #0
   129a6:	4630      	mov	r0, r6
   129a8:	f000 f982 	bl	12cb0 <_sbrk_r>
   129ac:	68ba      	ldr	r2, [r7, #8]
   129ae:	1a83      	subs	r3, r0, r2
   129b0:	2b0f      	cmp	r3, #15
   129b2:	ddde      	ble.n	12972 <_malloc_trim_r+0x3e>
   129b4:	f043 0301 	orr.w	r3, r3, #1
   129b8:	6053      	str	r3, [r2, #4]
   129ba:	4b05      	ldr	r3, [pc, #20]	; (129d0 <_malloc_trim_r+0x9c>)
   129bc:	4903      	ldr	r1, [pc, #12]	; (129cc <_malloc_trim_r+0x98>)
   129be:	681b      	ldr	r3, [r3, #0]
   129c0:	1ac0      	subs	r0, r0, r3
   129c2:	6008      	str	r0, [r1, #0]
   129c4:	e7d5      	b.n	12972 <_malloc_trim_r+0x3e>
   129c6:	bf00      	nop
   129c8:	200034b4 	.word	0x200034b4
   129cc:	20004d54 	.word	0x20004d54
   129d0:	200038bc 	.word	0x200038bc

000129d4 <_free_r>:
   129d4:	2900      	cmp	r1, #0
   129d6:	d061      	beq.n	12a9c <_free_r+0xc8>
   129d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129da:	460c      	mov	r4, r1
   129dc:	4606      	mov	r6, r0
   129de:	f7ff f813 	bl	11a08 <__malloc_lock>
   129e2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   129e6:	4f7b      	ldr	r7, [pc, #492]	; (12bd4 <_free_r+0x200>)
   129e8:	f1a4 0508 	sub.w	r5, r4, #8
   129ec:	f022 0101 	bic.w	r1, r2, #1
   129f0:	eb05 0c01 	add.w	ip, r5, r1
   129f4:	68b8      	ldr	r0, [r7, #8]
   129f6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   129fa:	4560      	cmp	r0, ip
   129fc:	f023 0303 	bic.w	r3, r3, #3
   12a00:	f000 808b 	beq.w	12b1a <_free_r+0x146>
   12a04:	07d2      	lsls	r2, r2, #31
   12a06:	f8cc 3004 	str.w	r3, [ip, #4]
   12a0a:	d432      	bmi.n	12a72 <_free_r+0x9e>
   12a0c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12a10:	1aad      	subs	r5, r5, r2
   12a12:	4411      	add	r1, r2
   12a14:	68aa      	ldr	r2, [r5, #8]
   12a16:	f107 0008 	add.w	r0, r7, #8
   12a1a:	4282      	cmp	r2, r0
   12a1c:	d06a      	beq.n	12af4 <_free_r+0x120>
   12a1e:	eb0c 0403 	add.w	r4, ip, r3
   12a22:	f8d4 e004 	ldr.w	lr, [r4, #4]
   12a26:	68ec      	ldr	r4, [r5, #12]
   12a28:	60d4      	str	r4, [r2, #12]
   12a2a:	f01e 0f01 	tst.w	lr, #1
   12a2e:	60a2      	str	r2, [r4, #8]
   12a30:	f000 8097 	beq.w	12b62 <_free_r+0x18e>
   12a34:	f041 0301 	orr.w	r3, r1, #1
   12a38:	606b      	str	r3, [r5, #4]
   12a3a:	f8cc 1000 	str.w	r1, [ip]
   12a3e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12a42:	d235      	bcs.n	12ab0 <_free_r+0xdc>
   12a44:	6878      	ldr	r0, [r7, #4]
   12a46:	08cb      	lsrs	r3, r1, #3
   12a48:	2201      	movs	r2, #1
   12a4a:	0949      	lsrs	r1, r1, #5
   12a4c:	3301      	adds	r3, #1
   12a4e:	408a      	lsls	r2, r1
   12a50:	4302      	orrs	r2, r0
   12a52:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12a56:	607a      	str	r2, [r7, #4]
   12a58:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   12a5c:	3a08      	subs	r2, #8
   12a5e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   12a62:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   12a66:	60cd      	str	r5, [r1, #12]
   12a68:	4630      	mov	r0, r6
   12a6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12a6e:	f7fe bfd1 	b.w	11a14 <__malloc_unlock>
   12a72:	eb0c 0203 	add.w	r2, ip, r3
   12a76:	6852      	ldr	r2, [r2, #4]
   12a78:	07d0      	lsls	r0, r2, #31
   12a7a:	d410      	bmi.n	12a9e <_free_r+0xca>
   12a7c:	4419      	add	r1, r3
   12a7e:	f107 0008 	add.w	r0, r7, #8
   12a82:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12a86:	4283      	cmp	r3, r0
   12a88:	d073      	beq.n	12b72 <_free_r+0x19e>
   12a8a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   12a8e:	60da      	str	r2, [r3, #12]
   12a90:	6093      	str	r3, [r2, #8]
   12a92:	f041 0301 	orr.w	r3, r1, #1
   12a96:	606b      	str	r3, [r5, #4]
   12a98:	5069      	str	r1, [r5, r1]
   12a9a:	e7d0      	b.n	12a3e <_free_r+0x6a>
   12a9c:	4770      	bx	lr
   12a9e:	f041 0301 	orr.w	r3, r1, #1
   12aa2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12aa6:	f844 3c04 	str.w	r3, [r4, #-4]
   12aaa:	f8cc 1000 	str.w	r1, [ip]
   12aae:	d3c9      	bcc.n	12a44 <_free_r+0x70>
   12ab0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12ab4:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12ab8:	d248      	bcs.n	12b4c <_free_r+0x178>
   12aba:	098b      	lsrs	r3, r1, #6
   12abc:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12ac0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12ac4:	00c3      	lsls	r3, r0, #3
   12ac6:	18f8      	adds	r0, r7, r3
   12ac8:	58fb      	ldr	r3, [r7, r3]
   12aca:	3808      	subs	r0, #8
   12acc:	4298      	cmp	r0, r3
   12ace:	d059      	beq.n	12b84 <_free_r+0x1b0>
   12ad0:	685a      	ldr	r2, [r3, #4]
   12ad2:	f022 0203 	bic.w	r2, r2, #3
   12ad6:	428a      	cmp	r2, r1
   12ad8:	d902      	bls.n	12ae0 <_free_r+0x10c>
   12ada:	689b      	ldr	r3, [r3, #8]
   12adc:	4298      	cmp	r0, r3
   12ade:	d1f7      	bne.n	12ad0 <_free_r+0xfc>
   12ae0:	68d8      	ldr	r0, [r3, #12]
   12ae2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12ae6:	6085      	str	r5, [r0, #8]
   12ae8:	60dd      	str	r5, [r3, #12]
   12aea:	4630      	mov	r0, r6
   12aec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12af0:	f7fe bf90 	b.w	11a14 <__malloc_unlock>
   12af4:	eb0c 0203 	add.w	r2, ip, r3
   12af8:	6852      	ldr	r2, [r2, #4]
   12afa:	07d2      	lsls	r2, r2, #31
   12afc:	d463      	bmi.n	12bc6 <_free_r+0x1f2>
   12afe:	440b      	add	r3, r1
   12b00:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12b04:	60ca      	str	r2, [r1, #12]
   12b06:	6091      	str	r1, [r2, #8]
   12b08:	f043 0201 	orr.w	r2, r3, #1
   12b0c:	606a      	str	r2, [r5, #4]
   12b0e:	4630      	mov	r0, r6
   12b10:	50eb      	str	r3, [r5, r3]
   12b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12b16:	f7fe bf7d 	b.w	11a14 <__malloc_unlock>
   12b1a:	440b      	add	r3, r1
   12b1c:	07d1      	lsls	r1, r2, #31
   12b1e:	d407      	bmi.n	12b30 <_free_r+0x15c>
   12b20:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12b24:	1aad      	subs	r5, r5, r2
   12b26:	4413      	add	r3, r2
   12b28:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   12b2c:	60ca      	str	r2, [r1, #12]
   12b2e:	6091      	str	r1, [r2, #8]
   12b30:	f043 0201 	orr.w	r2, r3, #1
   12b34:	606a      	str	r2, [r5, #4]
   12b36:	4a28      	ldr	r2, [pc, #160]	; (12bd8 <_free_r+0x204>)
   12b38:	60bd      	str	r5, [r7, #8]
   12b3a:	6812      	ldr	r2, [r2, #0]
   12b3c:	429a      	cmp	r2, r3
   12b3e:	d893      	bhi.n	12a68 <_free_r+0x94>
   12b40:	4b26      	ldr	r3, [pc, #152]	; (12bdc <_free_r+0x208>)
   12b42:	4630      	mov	r0, r6
   12b44:	6819      	ldr	r1, [r3, #0]
   12b46:	f7ff fef5 	bl	12934 <_malloc_trim_r>
   12b4a:	e78d      	b.n	12a68 <_free_r+0x94>
   12b4c:	2b14      	cmp	r3, #20
   12b4e:	d90a      	bls.n	12b66 <_free_r+0x192>
   12b50:	2b54      	cmp	r3, #84	; 0x54
   12b52:	d81f      	bhi.n	12b94 <_free_r+0x1c0>
   12b54:	0b0b      	lsrs	r3, r1, #12
   12b56:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   12b5a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   12b5e:	00c3      	lsls	r3, r0, #3
   12b60:	e7b1      	b.n	12ac6 <_free_r+0xf2>
   12b62:	4419      	add	r1, r3
   12b64:	e78d      	b.n	12a82 <_free_r+0xae>
   12b66:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   12b6a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   12b6e:	00c3      	lsls	r3, r0, #3
   12b70:	e7a9      	b.n	12ac6 <_free_r+0xf2>
   12b72:	f041 0301 	orr.w	r3, r1, #1
   12b76:	e9c7 5504 	strd	r5, r5, [r7, #16]
   12b7a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   12b7e:	606b      	str	r3, [r5, #4]
   12b80:	5069      	str	r1, [r5, r1]
   12b82:	e771      	b.n	12a68 <_free_r+0x94>
   12b84:	6879      	ldr	r1, [r7, #4]
   12b86:	1092      	asrs	r2, r2, #2
   12b88:	2401      	movs	r4, #1
   12b8a:	fa04 f202 	lsl.w	r2, r4, r2
   12b8e:	430a      	orrs	r2, r1
   12b90:	607a      	str	r2, [r7, #4]
   12b92:	e7a6      	b.n	12ae2 <_free_r+0x10e>
   12b94:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12b98:	d806      	bhi.n	12ba8 <_free_r+0x1d4>
   12b9a:	0bcb      	lsrs	r3, r1, #15
   12b9c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12ba0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12ba4:	00c3      	lsls	r3, r0, #3
   12ba6:	e78e      	b.n	12ac6 <_free_r+0xf2>
   12ba8:	f240 5254 	movw	r2, #1364	; 0x554
   12bac:	4293      	cmp	r3, r2
   12bae:	d806      	bhi.n	12bbe <_free_r+0x1ea>
   12bb0:	0c8b      	lsrs	r3, r1, #18
   12bb2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12bb6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   12bba:	00c3      	lsls	r3, r0, #3
   12bbc:	e783      	b.n	12ac6 <_free_r+0xf2>
   12bbe:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12bc2:	227e      	movs	r2, #126	; 0x7e
   12bc4:	e77f      	b.n	12ac6 <_free_r+0xf2>
   12bc6:	f041 0301 	orr.w	r3, r1, #1
   12bca:	606b      	str	r3, [r5, #4]
   12bcc:	f8cc 1000 	str.w	r1, [ip]
   12bd0:	e74a      	b.n	12a68 <_free_r+0x94>
   12bd2:	bf00      	nop
   12bd4:	200034b4 	.word	0x200034b4
   12bd8:	200038c0 	.word	0x200038c0
   12bdc:	20004d84 	.word	0x20004d84

00012be0 <fiprintf>:
   12be0:	b40e      	push	{r1, r2, r3}
   12be2:	b510      	push	{r4, lr}
   12be4:	b083      	sub	sp, #12
   12be6:	ab05      	add	r3, sp, #20
   12be8:	4c06      	ldr	r4, [pc, #24]	; (12c04 <fiprintf+0x24>)
   12bea:	f853 2b04 	ldr.w	r2, [r3], #4
   12bee:	9301      	str	r3, [sp, #4]
   12bf0:	4601      	mov	r1, r0
   12bf2:	6820      	ldr	r0, [r4, #0]
   12bf4:	f000 f8e4 	bl	12dc0 <_vfiprintf_r>
   12bf8:	b003      	add	sp, #12
   12bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12bfe:	b003      	add	sp, #12
   12c00:	4770      	bx	lr
   12c02:	bf00      	nop
   12c04:	200038d0 	.word	0x200038d0

00012c08 <__sread>:
   12c08:	b510      	push	{r4, lr}
   12c0a:	460c      	mov	r4, r1
   12c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12c10:	f002 fb12 	bl	15238 <_read_r>
   12c14:	2800      	cmp	r0, #0
   12c16:	db03      	blt.n	12c20 <__sread+0x18>
   12c18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   12c1a:	4403      	add	r3, r0
   12c1c:	6523      	str	r3, [r4, #80]	; 0x50
   12c1e:	bd10      	pop	{r4, pc}
   12c20:	89a3      	ldrh	r3, [r4, #12]
   12c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   12c26:	81a3      	strh	r3, [r4, #12]
   12c28:	bd10      	pop	{r4, pc}
   12c2a:	bf00      	nop

00012c2c <__swrite>:
   12c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12c30:	460c      	mov	r4, r1
   12c32:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   12c36:	461f      	mov	r7, r3
   12c38:	05cb      	lsls	r3, r1, #23
   12c3a:	4605      	mov	r5, r0
   12c3c:	4616      	mov	r6, r2
   12c3e:	d40b      	bmi.n	12c58 <__swrite+0x2c>
   12c40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   12c44:	81a1      	strh	r1, [r4, #12]
   12c46:	463b      	mov	r3, r7
   12c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12c4c:	4632      	mov	r2, r6
   12c4e:	4628      	mov	r0, r5
   12c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12c54:	f000 b862 	b.w	12d1c <_write_r>
   12c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12c5c:	2302      	movs	r3, #2
   12c5e:	2200      	movs	r2, #0
   12c60:	f002 fad4 	bl	1520c <_lseek_r>
   12c64:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   12c68:	e7ea      	b.n	12c40 <__swrite+0x14>
   12c6a:	bf00      	nop

00012c6c <__sseek>:
   12c6c:	b510      	push	{r4, lr}
   12c6e:	460c      	mov	r4, r1
   12c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12c74:	f002 faca 	bl	1520c <_lseek_r>
   12c78:	89a3      	ldrh	r3, [r4, #12]
   12c7a:	1c42      	adds	r2, r0, #1
   12c7c:	bf0e      	itee	eq
   12c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   12c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   12c86:	6520      	strne	r0, [r4, #80]	; 0x50
   12c88:	81a3      	strh	r3, [r4, #12]
   12c8a:	bd10      	pop	{r4, pc}

00012c8c <__sclose>:
   12c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12c90:	f002 b9c0 	b.w	15014 <_close_r>

00012c94 <__ascii_wctomb>:
   12c94:	b149      	cbz	r1, 12caa <__ascii_wctomb+0x16>
   12c96:	2aff      	cmp	r2, #255	; 0xff
   12c98:	d802      	bhi.n	12ca0 <__ascii_wctomb+0xc>
   12c9a:	700a      	strb	r2, [r1, #0]
   12c9c:	2001      	movs	r0, #1
   12c9e:	4770      	bx	lr
   12ca0:	238a      	movs	r3, #138	; 0x8a
   12ca2:	6003      	str	r3, [r0, #0]
   12ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12ca8:	4770      	bx	lr
   12caa:	4608      	mov	r0, r1
   12cac:	4770      	bx	lr
   12cae:	bf00      	nop

00012cb0 <_sbrk_r>:
   12cb0:	b538      	push	{r3, r4, r5, lr}
   12cb2:	4d07      	ldr	r5, [pc, #28]	; (12cd0 <_sbrk_r+0x20>)
   12cb4:	2200      	movs	r2, #0
   12cb6:	4604      	mov	r4, r0
   12cb8:	4608      	mov	r0, r1
   12cba:	602a      	str	r2, [r5, #0]
   12cbc:	f7fa ff22 	bl	db04 <_sbrk>
   12cc0:	1c43      	adds	r3, r0, #1
   12cc2:	d000      	beq.n	12cc6 <_sbrk_r+0x16>
   12cc4:	bd38      	pop	{r3, r4, r5, pc}
   12cc6:	682b      	ldr	r3, [r5, #0]
   12cc8:	2b00      	cmp	r3, #0
   12cca:	d0fb      	beq.n	12cc4 <_sbrk_r+0x14>
   12ccc:	6023      	str	r3, [r4, #0]
   12cce:	bd38      	pop	{r3, r4, r5, pc}
   12cd0:	20004fec 	.word	0x20004fec

00012cd4 <_fwalk_sglue>:
   12cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12cd8:	4680      	mov	r8, r0
   12cda:	460f      	mov	r7, r1
   12cdc:	4616      	mov	r6, r2
   12cde:	f04f 0900 	mov.w	r9, #0
   12ce2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12ce6:	3d01      	subs	r5, #1
   12ce8:	d411      	bmi.n	12d0e <_fwalk_sglue+0x3a>
   12cea:	89a3      	ldrh	r3, [r4, #12]
   12cec:	2b01      	cmp	r3, #1
   12cee:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12cf2:	d908      	bls.n	12d06 <_fwalk_sglue+0x32>
   12cf4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12cf8:	3301      	adds	r3, #1
   12cfa:	4621      	mov	r1, r4
   12cfc:	d003      	beq.n	12d06 <_fwalk_sglue+0x32>
   12cfe:	4640      	mov	r0, r8
   12d00:	47b8      	blx	r7
   12d02:	ea49 0900 	orr.w	r9, r9, r0
   12d06:	1c6b      	adds	r3, r5, #1
   12d08:	f104 0468 	add.w	r4, r4, #104	; 0x68
   12d0c:	d1ed      	bne.n	12cea <_fwalk_sglue+0x16>
   12d0e:	6836      	ldr	r6, [r6, #0]
   12d10:	2e00      	cmp	r6, #0
   12d12:	d1e6      	bne.n	12ce2 <_fwalk_sglue+0xe>
   12d14:	4648      	mov	r0, r9
   12d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d1a:	bf00      	nop

00012d1c <_write_r>:
   12d1c:	b538      	push	{r3, r4, r5, lr}
   12d1e:	460c      	mov	r4, r1
   12d20:	4d08      	ldr	r5, [pc, #32]	; (12d44 <_write_r+0x28>)
   12d22:	4684      	mov	ip, r0
   12d24:	4611      	mov	r1, r2
   12d26:	4620      	mov	r0, r4
   12d28:	461a      	mov	r2, r3
   12d2a:	2300      	movs	r3, #0
   12d2c:	602b      	str	r3, [r5, #0]
   12d2e:	4664      	mov	r4, ip
   12d30:	f7f9 fb18 	bl	c364 <_write>
   12d34:	1c43      	adds	r3, r0, #1
   12d36:	d000      	beq.n	12d3a <_write_r+0x1e>
   12d38:	bd38      	pop	{r3, r4, r5, pc}
   12d3a:	682b      	ldr	r3, [r5, #0]
   12d3c:	2b00      	cmp	r3, #0
   12d3e:	d0fb      	beq.n	12d38 <_write_r+0x1c>
   12d40:	6023      	str	r3, [r4, #0]
   12d42:	bd38      	pop	{r3, r4, r5, pc}
   12d44:	20004fec 	.word	0x20004fec

00012d48 <__sprint_r.part.0>:
   12d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12d4e:	049c      	lsls	r4, r3, #18
   12d50:	4690      	mov	r8, r2
   12d52:	d52d      	bpl.n	12db0 <__sprint_r.part.0+0x68>
   12d54:	6893      	ldr	r3, [r2, #8]
   12d56:	6812      	ldr	r2, [r2, #0]
   12d58:	b343      	cbz	r3, 12dac <__sprint_r.part.0+0x64>
   12d5a:	468b      	mov	fp, r1
   12d5c:	4606      	mov	r6, r0
   12d5e:	f102 0908 	add.w	r9, r2, #8
   12d62:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12d66:	ea5f 079a 	movs.w	r7, sl, lsr #2
   12d6a:	d015      	beq.n	12d98 <__sprint_r.part.0+0x50>
   12d6c:	3d04      	subs	r5, #4
   12d6e:	2400      	movs	r4, #0
   12d70:	e001      	b.n	12d76 <__sprint_r.part.0+0x2e>
   12d72:	42a7      	cmp	r7, r4
   12d74:	d00e      	beq.n	12d94 <__sprint_r.part.0+0x4c>
   12d76:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12d7a:	465a      	mov	r2, fp
   12d7c:	4630      	mov	r0, r6
   12d7e:	f002 fac7 	bl	15310 <_fputwc_r>
   12d82:	1c43      	adds	r3, r0, #1
   12d84:	f104 0401 	add.w	r4, r4, #1
   12d88:	d1f3      	bne.n	12d72 <__sprint_r.part.0+0x2a>
   12d8a:	2300      	movs	r3, #0
   12d8c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d94:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12d98:	f02a 0a03 	bic.w	sl, sl, #3
   12d9c:	eba3 030a 	sub.w	r3, r3, sl
   12da0:	f8c8 3008 	str.w	r3, [r8, #8]
   12da4:	f109 0908 	add.w	r9, r9, #8
   12da8:	2b00      	cmp	r3, #0
   12daa:	d1da      	bne.n	12d62 <__sprint_r.part.0+0x1a>
   12dac:	2000      	movs	r0, #0
   12dae:	e7ec      	b.n	12d8a <__sprint_r.part.0+0x42>
   12db0:	f002 fae2 	bl	15378 <__sfvwrite_r>
   12db4:	2300      	movs	r3, #0
   12db6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dbe:	bf00      	nop

00012dc0 <_vfiprintf_r>:
   12dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc4:	ed2d 8b02 	vpush	{d8}
   12dc8:	b0c5      	sub	sp, #276	; 0x114
   12dca:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   12dce:	4683      	mov	fp, r0
   12dd0:	ee08 1a10 	vmov	s16, r1
   12dd4:	4616      	mov	r6, r2
   12dd6:	2100      	movs	r1, #0
   12dd8:	2208      	movs	r2, #8
   12dda:	4650      	mov	r0, sl
   12ddc:	461c      	mov	r4, r3
   12dde:	9307      	str	r3, [sp, #28]
   12de0:	f7fe fd24 	bl	1182c <memset>
   12de4:	f1bb 0f00 	cmp.w	fp, #0
   12de8:	d004      	beq.n	12df4 <_vfiprintf_r+0x34>
   12dea:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12dee:	2b00      	cmp	r3, #0
   12df0:	f000 86a0 	beq.w	13b34 <_vfiprintf_r+0xd74>
   12df4:	ee18 2a10 	vmov	r2, s16
   12df8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12dfa:	07db      	lsls	r3, r3, #31
   12dfc:	f140 8513 	bpl.w	13826 <_vfiprintf_r+0xa66>
   12e00:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12e04:	b28a      	uxth	r2, r1
   12e06:	0495      	lsls	r5, r2, #18
   12e08:	d40b      	bmi.n	12e22 <_vfiprintf_r+0x62>
   12e0a:	ee18 3a10 	vmov	r3, s16
   12e0e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12e12:	8199      	strh	r1, [r3, #12]
   12e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12e16:	b28a      	uxth	r2, r1
   12e18:	ee18 1a10 	vmov	r1, s16
   12e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12e20:	664b      	str	r3, [r1, #100]	; 0x64
   12e22:	0710      	lsls	r0, r2, #28
   12e24:	f140 8105 	bpl.w	13032 <_vfiprintf_r+0x272>
   12e28:	ee18 3a10 	vmov	r3, s16
   12e2c:	691b      	ldr	r3, [r3, #16]
   12e2e:	2b00      	cmp	r3, #0
   12e30:	f000 80ff 	beq.w	13032 <_vfiprintf_r+0x272>
   12e34:	f002 031a 	and.w	r3, r2, #26
   12e38:	2b0a      	cmp	r3, #10
   12e3a:	f000 810a 	beq.w	13052 <_vfiprintf_r+0x292>
   12e3e:	2300      	movs	r3, #0
   12e40:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12e44:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12e48:	aa1b      	add	r2, sp, #108	; 0x6c
   12e4a:	930c      	str	r3, [sp, #48]	; 0x30
   12e4c:	9218      	str	r2, [sp, #96]	; 0x60
   12e4e:	4691      	mov	r9, r2
   12e50:	930b      	str	r3, [sp, #44]	; 0x2c
   12e52:	9305      	str	r3, [sp, #20]
   12e54:	46b0      	mov	r8, r6
   12e56:	4644      	mov	r4, r8
   12e58:	4ba8      	ldr	r3, [pc, #672]	; (130fc <_vfiprintf_r+0x33c>)
   12e5a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12e5e:	f7fe fd6f 	bl	11940 <__locale_mb_cur_max>
   12e62:	4622      	mov	r2, r4
   12e64:	4603      	mov	r3, r0
   12e66:	a912      	add	r1, sp, #72	; 0x48
   12e68:	f8cd a000 	str.w	sl, [sp]
   12e6c:	4658      	mov	r0, fp
   12e6e:	47a8      	blx	r5
   12e70:	2800      	cmp	r0, #0
   12e72:	f000 8145 	beq.w	13100 <_vfiprintf_r+0x340>
   12e76:	f2c0 8139 	blt.w	130ec <_vfiprintf_r+0x32c>
   12e7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12e7c:	2a25      	cmp	r2, #37	; 0x25
   12e7e:	4603      	mov	r3, r0
   12e80:	d001      	beq.n	12e86 <_vfiprintf_r+0xc6>
   12e82:	441c      	add	r4, r3
   12e84:	e7e8      	b.n	12e58 <_vfiprintf_r+0x98>
   12e86:	ebb4 0608 	subs.w	r6, r4, r8
   12e8a:	4605      	mov	r5, r0
   12e8c:	f040 813c 	bne.w	13108 <_vfiprintf_r+0x348>
   12e90:	2300      	movs	r3, #0
   12e92:	7861      	ldrb	r1, [r4, #1]
   12e94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e98:	f104 0801 	add.w	r8, r4, #1
   12e9c:	9306      	str	r3, [sp, #24]
   12e9e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12ea2:	461e      	mov	r6, r3
   12ea4:	242b      	movs	r4, #43	; 0x2b
   12ea6:	f108 0801 	add.w	r8, r8, #1
   12eaa:	f1a1 0320 	sub.w	r3, r1, #32
   12eae:	2b5a      	cmp	r3, #90	; 0x5a
   12eb0:	f200 8178 	bhi.w	131a4 <_vfiprintf_r+0x3e4>
   12eb4:	e8df f013 	tbh	[pc, r3, lsl #1]
   12eb8:	017602b5 	.word	0x017602b5
   12ebc:	02b00176 	.word	0x02b00176
   12ec0:	01760176 	.word	0x01760176
   12ec4:	006a0176 	.word	0x006a0176
   12ec8:	01760176 	.word	0x01760176
   12ecc:	028d027d 	.word	0x028d027d
   12ed0:	02880176 	.word	0x02880176
   12ed4:	01760297 	.word	0x01760297
   12ed8:	005b0292 	.word	0x005b0292
   12edc:	005b005b 	.word	0x005b005b
   12ee0:	005b005b 	.word	0x005b005b
   12ee4:	005b005b 	.word	0x005b005b
   12ee8:	005b005b 	.word	0x005b005b
   12eec:	01760176 	.word	0x01760176
   12ef0:	01760176 	.word	0x01760176
   12ef4:	01760176 	.word	0x01760176
   12ef8:	01760176 	.word	0x01760176
   12efc:	025c0176 	.word	0x025c0176
   12f00:	01760084 	.word	0x01760084
   12f04:	01760176 	.word	0x01760176
   12f08:	01760176 	.word	0x01760176
   12f0c:	01760176 	.word	0x01760176
   12f10:	01760176 	.word	0x01760176
   12f14:	00e80176 	.word	0x00e80176
   12f18:	01760176 	.word	0x01760176
   12f1c:	02330176 	.word	0x02330176
   12f20:	02da0176 	.word	0x02da0176
   12f24:	01760176 	.word	0x01760176
   12f28:	0176058b 	.word	0x0176058b
   12f2c:	01760176 	.word	0x01760176
   12f30:	01760176 	.word	0x01760176
   12f34:	01760176 	.word	0x01760176
   12f38:	01760176 	.word	0x01760176
   12f3c:	025c0176 	.word	0x025c0176
   12f40:	01760086 	.word	0x01760086
   12f44:	01760176 	.word	0x01760176
   12f48:	008602cd 	.word	0x008602cd
   12f4c:	0176007f 	.word	0x0176007f
   12f50:	017602c0 	.word	0x017602c0
   12f54:	00ea02fd 	.word	0x00ea02fd
   12f58:	007f02ed 	.word	0x007f02ed
   12f5c:	02330176 	.word	0x02330176
   12f60:	0569007c 	.word	0x0569007c
   12f64:	01760176 	.word	0x01760176
   12f68:	0176056b 	.word	0x0176056b
   12f6c:	007c      	.short	0x007c
   12f6e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12f72:	2200      	movs	r2, #0
   12f74:	f818 1b01 	ldrb.w	r1, [r8], #1
   12f78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12f7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12f80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12f84:	2b09      	cmp	r3, #9
   12f86:	d9f5      	bls.n	12f74 <_vfiprintf_r+0x1b4>
   12f88:	9206      	str	r2, [sp, #24]
   12f8a:	e78e      	b.n	12eaa <_vfiprintf_r+0xea>
   12f8c:	4658      	mov	r0, fp
   12f8e:	f000 ffef 	bl	13f70 <_localeconv_r>
   12f92:	6843      	ldr	r3, [r0, #4]
   12f94:	930d      	str	r3, [sp, #52]	; 0x34
   12f96:	4618      	mov	r0, r3
   12f98:	f7ff fa72 	bl	12480 <strlen>
   12f9c:	900e      	str	r0, [sp, #56]	; 0x38
   12f9e:	4605      	mov	r5, r0
   12fa0:	4658      	mov	r0, fp
   12fa2:	f000 ffe5 	bl	13f70 <_localeconv_r>
   12fa6:	6883      	ldr	r3, [r0, #8]
   12fa8:	930b      	str	r3, [sp, #44]	; 0x2c
   12faa:	2d00      	cmp	r5, #0
   12fac:	f040 84d6 	bne.w	1395c <_vfiprintf_r+0xb9c>
   12fb0:	f898 1000 	ldrb.w	r1, [r8]
   12fb4:	e777      	b.n	12ea6 <_vfiprintf_r+0xe6>
   12fb6:	f898 1000 	ldrb.w	r1, [r8]
   12fba:	f046 0620 	orr.w	r6, r6, #32
   12fbe:	e772      	b.n	12ea6 <_vfiprintf_r+0xe6>
   12fc0:	f046 0610 	orr.w	r6, r6, #16
   12fc4:	06b4      	lsls	r4, r6, #26
   12fc6:	f140 818e 	bpl.w	132e6 <_vfiprintf_r+0x526>
   12fca:	9b07      	ldr	r3, [sp, #28]
   12fcc:	3307      	adds	r3, #7
   12fce:	f023 0307 	bic.w	r3, r3, #7
   12fd2:	461a      	mov	r2, r3
   12fd4:	6859      	ldr	r1, [r3, #4]
   12fd6:	f852 3b08 	ldr.w	r3, [r2], #8
   12fda:	9207      	str	r2, [sp, #28]
   12fdc:	460a      	mov	r2, r1
   12fde:	2900      	cmp	r1, #0
   12fe0:	f2c0 8470 	blt.w	138c4 <_vfiprintf_r+0xb04>
   12fe4:	1c79      	adds	r1, r7, #1
   12fe6:	f000 85a2 	beq.w	13b2e <_vfiprintf_r+0xd6e>
   12fea:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12fee:	9103      	str	r1, [sp, #12]
   12ff0:	ea53 0102 	orrs.w	r1, r3, r2
   12ff4:	f000 843f 	beq.w	13876 <_vfiprintf_r+0xab6>
   12ff8:	2b0a      	cmp	r3, #10
   12ffa:	f172 0100 	sbcs.w	r1, r2, #0
   12ffe:	f080 8541 	bcs.w	13a84 <_vfiprintf_r+0xcc4>
   13002:	3330      	adds	r3, #48	; 0x30
   13004:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   13008:	9e03      	ldr	r6, [sp, #12]
   1300a:	2301      	movs	r3, #1
   1300c:	9304      	str	r3, [sp, #16]
   1300e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   13012:	9b04      	ldr	r3, [sp, #16]
   13014:	42bb      	cmp	r3, r7
   13016:	bfb8      	it	lt
   13018:	463b      	movlt	r3, r7
   1301a:	9303      	str	r3, [sp, #12]
   1301c:	2300      	movs	r3, #0
   1301e:	9308      	str	r3, [sp, #32]
   13020:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13024:	2b00      	cmp	r3, #0
   13026:	f000 80cb 	beq.w	131c0 <_vfiprintf_r+0x400>
   1302a:	9b03      	ldr	r3, [sp, #12]
   1302c:	3301      	adds	r3, #1
   1302e:	9303      	str	r3, [sp, #12]
   13030:	e0c6      	b.n	131c0 <_vfiprintf_r+0x400>
   13032:	ee18 1a10 	vmov	r1, s16
   13036:	4658      	mov	r0, fp
   13038:	ee18 5a10 	vmov	r5, s16
   1303c:	f001 f800 	bl	14040 <__swsetup_r>
   13040:	2800      	cmp	r0, #0
   13042:	f040 8652 	bne.w	13cea <_vfiprintf_r+0xf2a>
   13046:	89aa      	ldrh	r2, [r5, #12]
   13048:	f002 031a 	and.w	r3, r2, #26
   1304c:	2b0a      	cmp	r3, #10
   1304e:	f47f aef6 	bne.w	12e3e <_vfiprintf_r+0x7e>
   13052:	ee18 1a10 	vmov	r1, s16
   13056:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1305a:	2b00      	cmp	r3, #0
   1305c:	f6ff aeef 	blt.w	12e3e <_vfiprintf_r+0x7e>
   13060:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13062:	07db      	lsls	r3, r3, #31
   13064:	d402      	bmi.n	1306c <_vfiprintf_r+0x2ac>
   13066:	0597      	lsls	r7, r2, #22
   13068:	f140 8612 	bpl.w	13c90 <_vfiprintf_r+0xed0>
   1306c:	ee18 1a10 	vmov	r1, s16
   13070:	4623      	mov	r3, r4
   13072:	4632      	mov	r2, r6
   13074:	4658      	mov	r0, fp
   13076:	f000 fe69 	bl	13d4c <__sbprintf>
   1307a:	9005      	str	r0, [sp, #20]
   1307c:	9805      	ldr	r0, [sp, #20]
   1307e:	b045      	add	sp, #276	; 0x114
   13080:	ecbd 8b02 	vpop	{d8}
   13084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13088:	f046 0610 	orr.w	r6, r6, #16
   1308c:	f016 0220 	ands.w	r2, r6, #32
   13090:	f000 8136 	beq.w	13300 <_vfiprintf_r+0x540>
   13094:	9b07      	ldr	r3, [sp, #28]
   13096:	3307      	adds	r3, #7
   13098:	f023 0307 	bic.w	r3, r3, #7
   1309c:	4619      	mov	r1, r3
   1309e:	685a      	ldr	r2, [r3, #4]
   130a0:	f851 3b08 	ldr.w	r3, [r1], #8
   130a4:	9107      	str	r1, [sp, #28]
   130a6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   130aa:	9103      	str	r1, [sp, #12]
   130ac:	2100      	movs	r1, #0
   130ae:	2000      	movs	r0, #0
   130b0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   130b4:	1c78      	adds	r0, r7, #1
   130b6:	f000 8210 	beq.w	134da <_vfiprintf_r+0x71a>
   130ba:	9803      	ldr	r0, [sp, #12]
   130bc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   130c0:	ea53 0002 	orrs.w	r0, r3, r2
   130c4:	f040 8208 	bne.w	134d8 <_vfiprintf_r+0x718>
   130c8:	2f00      	cmp	r7, #0
   130ca:	f040 8538 	bne.w	13b3e <_vfiprintf_r+0xd7e>
   130ce:	2900      	cmp	r1, #0
   130d0:	f040 83d5 	bne.w	1387e <_vfiprintf_r+0xabe>
   130d4:	9b03      	ldr	r3, [sp, #12]
   130d6:	f013 0301 	ands.w	r3, r3, #1
   130da:	9304      	str	r3, [sp, #16]
   130dc:	f000 8411 	beq.w	13902 <_vfiprintf_r+0xb42>
   130e0:	2330      	movs	r3, #48	; 0x30
   130e2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   130e6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   130ea:	e792      	b.n	13012 <_vfiprintf_r+0x252>
   130ec:	2208      	movs	r2, #8
   130ee:	2100      	movs	r1, #0
   130f0:	4650      	mov	r0, sl
   130f2:	f7fe fb9b 	bl	1182c <memset>
   130f6:	2301      	movs	r3, #1
   130f8:	441c      	add	r4, r3
   130fa:	e6ad      	b.n	12e58 <_vfiprintf_r+0x98>
   130fc:	20003348 	.word	0x20003348
   13100:	ebb4 0608 	subs.w	r6, r4, r8
   13104:	4605      	mov	r5, r0
   13106:	d01b      	beq.n	13140 <_vfiprintf_r+0x380>
   13108:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1310a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1310c:	3301      	adds	r3, #1
   1310e:	4432      	add	r2, r6
   13110:	2b07      	cmp	r3, #7
   13112:	e9c9 8600 	strd	r8, r6, [r9]
   13116:	921a      	str	r2, [sp, #104]	; 0x68
   13118:	9319      	str	r3, [sp, #100]	; 0x64
   1311a:	dd1c      	ble.n	13156 <_vfiprintf_r+0x396>
   1311c:	2a00      	cmp	r2, #0
   1311e:	f000 83a6 	beq.w	1386e <_vfiprintf_r+0xaae>
   13122:	ee18 1a10 	vmov	r1, s16
   13126:	aa18      	add	r2, sp, #96	; 0x60
   13128:	4658      	mov	r0, fp
   1312a:	f7ff fe0d 	bl	12d48 <__sprint_r.part.0>
   1312e:	bb20      	cbnz	r0, 1317a <_vfiprintf_r+0x3ba>
   13130:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13134:	9b05      	ldr	r3, [sp, #20]
   13136:	4433      	add	r3, r6
   13138:	9305      	str	r3, [sp, #20]
   1313a:	2d00      	cmp	r5, #0
   1313c:	f47f aea8 	bne.w	12e90 <_vfiprintf_r+0xd0>
   13140:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13142:	2b00      	cmp	r3, #0
   13144:	f040 85c1 	bne.w	13cca <_vfiprintf_r+0xf0a>
   13148:	ee18 3a10 	vmov	r3, s16
   1314c:	2200      	movs	r2, #0
   1314e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13152:	9219      	str	r2, [sp, #100]	; 0x64
   13154:	e015      	b.n	13182 <_vfiprintf_r+0x3c2>
   13156:	f109 0908 	add.w	r9, r9, #8
   1315a:	e7eb      	b.n	13134 <_vfiprintf_r+0x374>
   1315c:	ee18 1a10 	vmov	r1, s16
   13160:	aa18      	add	r2, sp, #96	; 0x60
   13162:	4658      	mov	r0, fp
   13164:	f7ff fdf0 	bl	12d48 <__sprint_r.part.0>
   13168:	2800      	cmp	r0, #0
   1316a:	f000 80a6 	beq.w	132ba <_vfiprintf_r+0x4fa>
   1316e:	9b08      	ldr	r3, [sp, #32]
   13170:	b11b      	cbz	r3, 1317a <_vfiprintf_r+0x3ba>
   13172:	9908      	ldr	r1, [sp, #32]
   13174:	4658      	mov	r0, fp
   13176:	f7ff fc2d 	bl	129d4 <_free_r>
   1317a:	ee18 3a10 	vmov	r3, s16
   1317e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13182:	ee18 2a10 	vmov	r2, s16
   13186:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13188:	f012 0f01 	tst.w	r2, #1
   1318c:	b29a      	uxth	r2, r3
   1318e:	f000 80a0 	beq.w	132d2 <_vfiprintf_r+0x512>
   13192:	0650      	lsls	r0, r2, #25
   13194:	f100 85b2 	bmi.w	13cfc <_vfiprintf_r+0xf3c>
   13198:	9805      	ldr	r0, [sp, #20]
   1319a:	b045      	add	sp, #276	; 0x114
   1319c:	ecbd 8b02 	vpop	{d8}
   131a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a4:	2900      	cmp	r1, #0
   131a6:	d0cb      	beq.n	13140 <_vfiprintf_r+0x380>
   131a8:	2300      	movs	r3, #0
   131aa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   131ae:	2301      	movs	r3, #1
   131b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   131b4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   131b8:	ac2b      	add	r4, sp, #172	; 0xac
   131ba:	2300      	movs	r3, #0
   131bc:	9308      	str	r3, [sp, #32]
   131be:	461f      	mov	r7, r3
   131c0:	f016 0302 	ands.w	r3, r6, #2
   131c4:	9309      	str	r3, [sp, #36]	; 0x24
   131c6:	d002      	beq.n	131ce <_vfiprintf_r+0x40e>
   131c8:	9b03      	ldr	r3, [sp, #12]
   131ca:	3302      	adds	r3, #2
   131cc:	9303      	str	r3, [sp, #12]
   131ce:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   131d2:	930a      	str	r3, [sp, #40]	; 0x28
   131d4:	d105      	bne.n	131e2 <_vfiprintf_r+0x422>
   131d6:	9b06      	ldr	r3, [sp, #24]
   131d8:	9a03      	ldr	r2, [sp, #12]
   131da:	1a9d      	subs	r5, r3, r2
   131dc:	2d00      	cmp	r5, #0
   131de:	f300 827b 	bgt.w	136d8 <_vfiprintf_r+0x918>
   131e2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   131e6:	1c41      	adds	r1, r0, #1
   131e8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   131ec:	b182      	cbz	r2, 13210 <_vfiprintf_r+0x450>
   131ee:	2201      	movs	r2, #1
   131f0:	3301      	adds	r3, #1
   131f2:	f8c9 2004 	str.w	r2, [r9, #4]
   131f6:	2907      	cmp	r1, #7
   131f8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   131fc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13200:	f8c9 2000 	str.w	r2, [r9]
   13204:	f300 824a 	bgt.w	1369c <_vfiprintf_r+0x8dc>
   13208:	4608      	mov	r0, r1
   1320a:	f109 0908 	add.w	r9, r9, #8
   1320e:	3101      	adds	r1, #1
   13210:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13212:	b1e2      	cbz	r2, 1324e <_vfiprintf_r+0x48e>
   13214:	aa11      	add	r2, sp, #68	; 0x44
   13216:	3302      	adds	r3, #2
   13218:	f8c9 2000 	str.w	r2, [r9]
   1321c:	2907      	cmp	r1, #7
   1321e:	f04f 0202 	mov.w	r2, #2
   13222:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13226:	f8c9 2004 	str.w	r2, [r9, #4]
   1322a:	f340 8250 	ble.w	136ce <_vfiprintf_r+0x90e>
   1322e:	2b00      	cmp	r3, #0
   13230:	f000 8343 	beq.w	138ba <_vfiprintf_r+0xafa>
   13234:	ee18 1a10 	vmov	r1, s16
   13238:	aa18      	add	r2, sp, #96	; 0x60
   1323a:	4658      	mov	r0, fp
   1323c:	f7ff fd84 	bl	12d48 <__sprint_r.part.0>
   13240:	2800      	cmp	r0, #0
   13242:	d194      	bne.n	1316e <_vfiprintf_r+0x3ae>
   13244:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13248:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1324c:	1c41      	adds	r1, r0, #1
   1324e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13250:	2a80      	cmp	r2, #128	; 0x80
   13252:	f000 8184 	beq.w	1355e <_vfiprintf_r+0x79e>
   13256:	9a04      	ldr	r2, [sp, #16]
   13258:	1abd      	subs	r5, r7, r2
   1325a:	2d00      	cmp	r5, #0
   1325c:	f300 81d7 	bgt.w	1360e <_vfiprintf_r+0x84e>
   13260:	9a04      	ldr	r2, [sp, #16]
   13262:	f8c9 4000 	str.w	r4, [r9]
   13266:	4413      	add	r3, r2
   13268:	2907      	cmp	r1, #7
   1326a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1326e:	f8c9 2004 	str.w	r2, [r9, #4]
   13272:	f340 816e 	ble.w	13552 <_vfiprintf_r+0x792>
   13276:	2b00      	cmp	r3, #0
   13278:	f000 8275 	beq.w	13766 <_vfiprintf_r+0x9a6>
   1327c:	ee18 1a10 	vmov	r1, s16
   13280:	aa18      	add	r2, sp, #96	; 0x60
   13282:	4658      	mov	r0, fp
   13284:	f7ff fd60 	bl	12d48 <__sprint_r.part.0>
   13288:	2800      	cmp	r0, #0
   1328a:	f47f af70 	bne.w	1316e <_vfiprintf_r+0x3ae>
   1328e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13290:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13294:	0775      	lsls	r5, r6, #29
   13296:	d505      	bpl.n	132a4 <_vfiprintf_r+0x4e4>
   13298:	9a06      	ldr	r2, [sp, #24]
   1329a:	9903      	ldr	r1, [sp, #12]
   1329c:	1a54      	subs	r4, r2, r1
   1329e:	2c00      	cmp	r4, #0
   132a0:	f300 826b 	bgt.w	1377a <_vfiprintf_r+0x9ba>
   132a4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   132a8:	9803      	ldr	r0, [sp, #12]
   132aa:	4281      	cmp	r1, r0
   132ac:	bfac      	ite	ge
   132ae:	1852      	addge	r2, r2, r1
   132b0:	1812      	addlt	r2, r2, r0
   132b2:	9205      	str	r2, [sp, #20]
   132b4:	2b00      	cmp	r3, #0
   132b6:	f47f af51 	bne.w	1315c <_vfiprintf_r+0x39c>
   132ba:	9908      	ldr	r1, [sp, #32]
   132bc:	2300      	movs	r3, #0
   132be:	9319      	str	r3, [sp, #100]	; 0x64
   132c0:	2900      	cmp	r1, #0
   132c2:	f000 8149 	beq.w	13558 <_vfiprintf_r+0x798>
   132c6:	4658      	mov	r0, fp
   132c8:	f7ff fb84 	bl	129d4 <_free_r>
   132cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132d0:	e5c1      	b.n	12e56 <_vfiprintf_r+0x96>
   132d2:	059c      	lsls	r4, r3, #22
   132d4:	f53f af5d 	bmi.w	13192 <_vfiprintf_r+0x3d2>
   132d8:	ee18 4a10 	vmov	r4, s16
   132dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   132de:	f7fe fb2d 	bl	1193c <__retarget_lock_release_recursive>
   132e2:	89a2      	ldrh	r2, [r4, #12]
   132e4:	e755      	b.n	13192 <_vfiprintf_r+0x3d2>
   132e6:	06f0      	lsls	r0, r6, #27
   132e8:	9a07      	ldr	r2, [sp, #28]
   132ea:	f100 831f 	bmi.w	1392c <_vfiprintf_r+0xb6c>
   132ee:	0671      	lsls	r1, r6, #25
   132f0:	f140 8319 	bpl.w	13926 <_vfiprintf_r+0xb66>
   132f4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   132f8:	9207      	str	r2, [sp, #28]
   132fa:	17da      	asrs	r2, r3, #31
   132fc:	4611      	mov	r1, r2
   132fe:	e66e      	b.n	12fde <_vfiprintf_r+0x21e>
   13300:	f016 0310 	ands.w	r3, r6, #16
   13304:	9907      	ldr	r1, [sp, #28]
   13306:	f040 8309 	bne.w	1391c <_vfiprintf_r+0xb5c>
   1330a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1330e:	f000 8301 	beq.w	13914 <_vfiprintf_r+0xb54>
   13312:	461a      	mov	r2, r3
   13314:	f851 3b04 	ldr.w	r3, [r1], #4
   13318:	9107      	str	r1, [sp, #28]
   1331a:	b29b      	uxth	r3, r3
   1331c:	e6c3      	b.n	130a6 <_vfiprintf_r+0x2e6>
   1331e:	9b07      	ldr	r3, [sp, #28]
   13320:	461a      	mov	r2, r3
   13322:	2300      	movs	r3, #0
   13324:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13328:	4613      	mov	r3, r2
   1332a:	f853 4b04 	ldr.w	r4, [r3], #4
   1332e:	9303      	str	r3, [sp, #12]
   13330:	2c00      	cmp	r4, #0
   13332:	f000 8412 	beq.w	13b5a <_vfiprintf_r+0xd9a>
   13336:	2953      	cmp	r1, #83	; 0x53
   13338:	f000 8365 	beq.w	13a06 <_vfiprintf_r+0xc46>
   1333c:	f016 0510 	ands.w	r5, r6, #16
   13340:	f040 8361 	bne.w	13a06 <_vfiprintf_r+0xc46>
   13344:	1c7b      	adds	r3, r7, #1
   13346:	f000 84b3 	beq.w	13cb0 <_vfiprintf_r+0xef0>
   1334a:	463a      	mov	r2, r7
   1334c:	4629      	mov	r1, r5
   1334e:	4620      	mov	r0, r4
   13350:	f7ff f82e 	bl	123b0 <memchr>
   13354:	9008      	str	r0, [sp, #32]
   13356:	2800      	cmp	r0, #0
   13358:	f000 849f 	beq.w	13c9a <_vfiprintf_r+0xeda>
   1335c:	1b03      	subs	r3, r0, r4
   1335e:	9a03      	ldr	r2, [sp, #12]
   13360:	9304      	str	r3, [sp, #16]
   13362:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13366:	462f      	mov	r7, r5
   13368:	9207      	str	r2, [sp, #28]
   1336a:	9303      	str	r3, [sp, #12]
   1336c:	9508      	str	r5, [sp, #32]
   1336e:	e657      	b.n	13020 <_vfiprintf_r+0x260>
   13370:	2943      	cmp	r1, #67	; 0x43
   13372:	d002      	beq.n	1337a <_vfiprintf_r+0x5ba>
   13374:	06f5      	lsls	r5, r6, #27
   13376:	f140 832d 	bpl.w	139d4 <_vfiprintf_r+0xc14>
   1337a:	9d07      	ldr	r5, [sp, #28]
   1337c:	2208      	movs	r2, #8
   1337e:	2100      	movs	r1, #0
   13380:	a816      	add	r0, sp, #88	; 0x58
   13382:	ac2b      	add	r4, sp, #172	; 0xac
   13384:	f7fe fa52 	bl	1182c <memset>
   13388:	ab16      	add	r3, sp, #88	; 0x58
   1338a:	f855 2b04 	ldr.w	r2, [r5], #4
   1338e:	4621      	mov	r1, r4
   13390:	4658      	mov	r0, fp
   13392:	f000 fdc7 	bl	13f24 <_wcrtomb_r>
   13396:	4603      	mov	r3, r0
   13398:	3301      	adds	r3, #1
   1339a:	9004      	str	r0, [sp, #16]
   1339c:	f000 84b3 	beq.w	13d06 <_vfiprintf_r+0xf46>
   133a0:	9b04      	ldr	r3, [sp, #16]
   133a2:	9507      	str	r5, [sp, #28]
   133a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   133a8:	9303      	str	r3, [sp, #12]
   133aa:	2300      	movs	r3, #0
   133ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   133b0:	e703      	b.n	131ba <_vfiprintf_r+0x3fa>
   133b2:	9b07      	ldr	r3, [sp, #28]
   133b4:	f853 2b04 	ldr.w	r2, [r3], #4
   133b8:	9206      	str	r2, [sp, #24]
   133ba:	2a00      	cmp	r2, #0
   133bc:	f280 829c 	bge.w	138f8 <_vfiprintf_r+0xb38>
   133c0:	9a06      	ldr	r2, [sp, #24]
   133c2:	4252      	negs	r2, r2
   133c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   133c8:	f898 1000 	ldrb.w	r1, [r8]
   133cc:	f046 0604 	orr.w	r6, r6, #4
   133d0:	e569      	b.n	12ea6 <_vfiprintf_r+0xe6>
   133d2:	f898 1000 	ldrb.w	r1, [r8]
   133d6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   133da:	e564      	b.n	12ea6 <_vfiprintf_r+0xe6>
   133dc:	f898 1000 	ldrb.w	r1, [r8]
   133e0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   133e4:	e55f      	b.n	12ea6 <_vfiprintf_r+0xe6>
   133e6:	4642      	mov	r2, r8
   133e8:	f812 1b01 	ldrb.w	r1, [r2], #1
   133ec:	292a      	cmp	r1, #42	; 0x2a
   133ee:	f000 8496 	beq.w	13d1e <_vfiprintf_r+0xf5e>
   133f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   133f6:	2b09      	cmp	r3, #9
   133f8:	4690      	mov	r8, r2
   133fa:	f04f 0700 	mov.w	r7, #0
   133fe:	f63f ad54 	bhi.w	12eaa <_vfiprintf_r+0xea>
   13402:	f818 1b01 	ldrb.w	r1, [r8], #1
   13406:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1340a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1340e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13412:	2b09      	cmp	r3, #9
   13414:	d9f5      	bls.n	13402 <_vfiprintf_r+0x642>
   13416:	e548      	b.n	12eaa <_vfiprintf_r+0xea>
   13418:	f898 1000 	ldrb.w	r1, [r8]
   1341c:	f046 0601 	orr.w	r6, r6, #1
   13420:	e541      	b.n	12ea6 <_vfiprintf_r+0xe6>
   13422:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   13426:	2b00      	cmp	r3, #0
   13428:	f47f adc2 	bne.w	12fb0 <_vfiprintf_r+0x1f0>
   1342c:	2320      	movs	r3, #32
   1342e:	f898 1000 	ldrb.w	r1, [r8]
   13432:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13436:	e536      	b.n	12ea6 <_vfiprintf_r+0xe6>
   13438:	f898 1000 	ldrb.w	r1, [r8]
   1343c:	296c      	cmp	r1, #108	; 0x6c
   1343e:	bf03      	ittte	eq
   13440:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13444:	f046 0620 	orreq.w	r6, r6, #32
   13448:	f108 0801 	addeq.w	r8, r8, #1
   1344c:	f046 0610 	orrne.w	r6, r6, #16
   13450:	e529      	b.n	12ea6 <_vfiprintf_r+0xe6>
   13452:	f898 1000 	ldrb.w	r1, [r8]
   13456:	2968      	cmp	r1, #104	; 0x68
   13458:	bf03      	ittte	eq
   1345a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1345e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   13462:	f108 0801 	addeq.w	r8, r8, #1
   13466:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1346a:	e51c      	b.n	12ea6 <_vfiprintf_r+0xe6>
   1346c:	f046 0310 	orr.w	r3, r6, #16
   13470:	9303      	str	r3, [sp, #12]
   13472:	9b03      	ldr	r3, [sp, #12]
   13474:	f013 0220 	ands.w	r2, r3, #32
   13478:	f000 8206 	beq.w	13888 <_vfiprintf_r+0xac8>
   1347c:	9b07      	ldr	r3, [sp, #28]
   1347e:	3307      	adds	r3, #7
   13480:	f023 0307 	bic.w	r3, r3, #7
   13484:	4619      	mov	r1, r3
   13486:	685a      	ldr	r2, [r3, #4]
   13488:	f851 3b08 	ldr.w	r3, [r1], #8
   1348c:	9107      	str	r1, [sp, #28]
   1348e:	2101      	movs	r1, #1
   13490:	e60d      	b.n	130ae <_vfiprintf_r+0x2ee>
   13492:	9a07      	ldr	r2, [sp, #28]
   13494:	f046 0302 	orr.w	r3, r6, #2
   13498:	9303      	str	r3, [sp, #12]
   1349a:	f852 3b04 	ldr.w	r3, [r2], #4
   1349e:	9207      	str	r2, [sp, #28]
   134a0:	f647 0230 	movw	r2, #30768	; 0x7830
   134a4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   134a8:	4ab8      	ldr	r2, [pc, #736]	; (1378c <_vfiprintf_r+0x9cc>)
   134aa:	920c      	str	r2, [sp, #48]	; 0x30
   134ac:	2102      	movs	r1, #2
   134ae:	2200      	movs	r2, #0
   134b0:	e5fd      	b.n	130ae <_vfiprintf_r+0x2ee>
   134b2:	06b7      	lsls	r7, r6, #26
   134b4:	f100 8248 	bmi.w	13948 <_vfiprintf_r+0xb88>
   134b8:	06f5      	lsls	r5, r6, #27
   134ba:	f100 8346 	bmi.w	13b4a <_vfiprintf_r+0xd8a>
   134be:	0674      	lsls	r4, r6, #25
   134c0:	f100 83d5 	bmi.w	13c6e <_vfiprintf_r+0xeae>
   134c4:	05b0      	lsls	r0, r6, #22
   134c6:	f140 8340 	bpl.w	13b4a <_vfiprintf_r+0xd8a>
   134ca:	9b07      	ldr	r3, [sp, #28]
   134cc:	9905      	ldr	r1, [sp, #20]
   134ce:	f853 2b04 	ldr.w	r2, [r3], #4
   134d2:	9307      	str	r3, [sp, #28]
   134d4:	7011      	strb	r1, [r2, #0]
   134d6:	e4be      	b.n	12e56 <_vfiprintf_r+0x96>
   134d8:	9603      	str	r6, [sp, #12]
   134da:	2901      	cmp	r1, #1
   134dc:	f43f ad8c 	beq.w	12ff8 <_vfiprintf_r+0x238>
   134e0:	2902      	cmp	r1, #2
   134e2:	ac44      	add	r4, sp, #272	; 0x110
   134e4:	d111      	bne.n	1350a <_vfiprintf_r+0x74a>
   134e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   134e8:	f003 010f 	and.w	r1, r3, #15
   134ec:	091b      	lsrs	r3, r3, #4
   134ee:	5c41      	ldrb	r1, [r0, r1]
   134f0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   134f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   134f8:	0912      	lsrs	r2, r2, #4
   134fa:	ea53 0102 	orrs.w	r1, r3, r2
   134fe:	d1f3      	bne.n	134e8 <_vfiprintf_r+0x728>
   13500:	9e03      	ldr	r6, [sp, #12]
   13502:	ab44      	add	r3, sp, #272	; 0x110
   13504:	1b1b      	subs	r3, r3, r4
   13506:	9304      	str	r3, [sp, #16]
   13508:	e583      	b.n	13012 <_vfiprintf_r+0x252>
   1350a:	f003 0107 	and.w	r1, r3, #7
   1350e:	08db      	lsrs	r3, r3, #3
   13510:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   13514:	08d2      	lsrs	r2, r2, #3
   13516:	3130      	adds	r1, #48	; 0x30
   13518:	ea53 0502 	orrs.w	r5, r3, r2
   1351c:	4620      	mov	r0, r4
   1351e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13522:	d1f2      	bne.n	1350a <_vfiprintf_r+0x74a>
   13524:	9e03      	ldr	r6, [sp, #12]
   13526:	07f3      	lsls	r3, r6, #31
   13528:	d5eb      	bpl.n	13502 <_vfiprintf_r+0x742>
   1352a:	2930      	cmp	r1, #48	; 0x30
   1352c:	d0e8      	beq.n	13500 <_vfiprintf_r+0x740>
   1352e:	2330      	movs	r3, #48	; 0x30
   13530:	3802      	subs	r0, #2
   13532:	f804 3c01 	strb.w	r3, [r4, #-1]
   13536:	ab44      	add	r3, sp, #272	; 0x110
   13538:	1a1b      	subs	r3, r3, r0
   1353a:	9e03      	ldr	r6, [sp, #12]
   1353c:	9304      	str	r3, [sp, #16]
   1353e:	4604      	mov	r4, r0
   13540:	e567      	b.n	13012 <_vfiprintf_r+0x252>
   13542:	9b04      	ldr	r3, [sp, #16]
   13544:	941b      	str	r4, [sp, #108]	; 0x6c
   13546:	2201      	movs	r2, #1
   13548:	931c      	str	r3, [sp, #112]	; 0x70
   1354a:	931a      	str	r3, [sp, #104]	; 0x68
   1354c:	9219      	str	r2, [sp, #100]	; 0x64
   1354e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13552:	f109 0908 	add.w	r9, r9, #8
   13556:	e69d      	b.n	13294 <_vfiprintf_r+0x4d4>
   13558:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1355c:	e47b      	b.n	12e56 <_vfiprintf_r+0x96>
   1355e:	9a06      	ldr	r2, [sp, #24]
   13560:	9d03      	ldr	r5, [sp, #12]
   13562:	1b55      	subs	r5, r2, r5
   13564:	2d00      	cmp	r5, #0
   13566:	f77f ae76 	ble.w	13256 <_vfiprintf_r+0x496>
   1356a:	2d10      	cmp	r5, #16
   1356c:	f340 83bb 	ble.w	13ce6 <_vfiprintf_r+0xf26>
   13570:	9409      	str	r4, [sp, #36]	; 0x24
   13572:	ee18 4a10 	vmov	r4, s16
   13576:	e007      	b.n	13588 <_vfiprintf_r+0x7c8>
   13578:	f100 0c02 	add.w	ip, r0, #2
   1357c:	f109 0908 	add.w	r9, r9, #8
   13580:	4610      	mov	r0, r2
   13582:	3d10      	subs	r5, #16
   13584:	2d10      	cmp	r5, #16
   13586:	dd1e      	ble.n	135c6 <_vfiprintf_r+0x806>
   13588:	4981      	ldr	r1, [pc, #516]	; (13790 <_vfiprintf_r+0x9d0>)
   1358a:	f8c9 1000 	str.w	r1, [r9]
   1358e:	1c42      	adds	r2, r0, #1
   13590:	3310      	adds	r3, #16
   13592:	2110      	movs	r1, #16
   13594:	2a07      	cmp	r2, #7
   13596:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1359a:	f8c9 1004 	str.w	r1, [r9, #4]
   1359e:	ddeb      	ble.n	13578 <_vfiprintf_r+0x7b8>
   135a0:	aa18      	add	r2, sp, #96	; 0x60
   135a2:	2b00      	cmp	r3, #0
   135a4:	d074      	beq.n	13690 <_vfiprintf_r+0x8d0>
   135a6:	4621      	mov	r1, r4
   135a8:	4658      	mov	r0, fp
   135aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   135ae:	f7ff fbcb 	bl	12d48 <__sprint_r.part.0>
   135b2:	2800      	cmp	r0, #0
   135b4:	f47f addb 	bne.w	1316e <_vfiprintf_r+0x3ae>
   135b8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   135bc:	3d10      	subs	r5, #16
   135be:	2d10      	cmp	r5, #16
   135c0:	f100 0c01 	add.w	ip, r0, #1
   135c4:	dce0      	bgt.n	13588 <_vfiprintf_r+0x7c8>
   135c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   135c8:	4a71      	ldr	r2, [pc, #452]	; (13790 <_vfiprintf_r+0x9d0>)
   135ca:	f8c9 5004 	str.w	r5, [r9, #4]
   135ce:	442b      	add	r3, r5
   135d0:	f1bc 0f07 	cmp.w	ip, #7
   135d4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   135d8:	f8c9 2000 	str.w	r2, [r9]
   135dc:	f340 8194 	ble.w	13908 <_vfiprintf_r+0xb48>
   135e0:	2b00      	cmp	r3, #0
   135e2:	f000 831f 	beq.w	13c24 <_vfiprintf_r+0xe64>
   135e6:	ee18 1a10 	vmov	r1, s16
   135ea:	aa18      	add	r2, sp, #96	; 0x60
   135ec:	4658      	mov	r0, fp
   135ee:	f7ff fbab 	bl	12d48 <__sprint_r.part.0>
   135f2:	2800      	cmp	r0, #0
   135f4:	f47f adbb 	bne.w	1316e <_vfiprintf_r+0x3ae>
   135f8:	9a04      	ldr	r2, [sp, #16]
   135fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   135fe:	1abd      	subs	r5, r7, r2
   13600:	2d00      	cmp	r5, #0
   13602:	f100 0101 	add.w	r1, r0, #1
   13606:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1360a:	f77f ae29 	ble.w	13260 <_vfiprintf_r+0x4a0>
   1360e:	2d10      	cmp	r5, #16
   13610:	dd29      	ble.n	13666 <_vfiprintf_r+0x8a6>
   13612:	9409      	str	r4, [sp, #36]	; 0x24
   13614:	2710      	movs	r7, #16
   13616:	ee18 4a10 	vmov	r4, s16
   1361a:	e007      	b.n	1362c <_vfiprintf_r+0x86c>
   1361c:	f100 0c02 	add.w	ip, r0, #2
   13620:	f109 0908 	add.w	r9, r9, #8
   13624:	4610      	mov	r0, r2
   13626:	3d10      	subs	r5, #16
   13628:	2d10      	cmp	r5, #16
   1362a:	dd1a      	ble.n	13662 <_vfiprintf_r+0x8a2>
   1362c:	1c42      	adds	r2, r0, #1
   1362e:	4958      	ldr	r1, [pc, #352]	; (13790 <_vfiprintf_r+0x9d0>)
   13630:	3310      	adds	r3, #16
   13632:	2a07      	cmp	r2, #7
   13634:	e9c9 1700 	strd	r1, r7, [r9]
   13638:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1363c:	ddee      	ble.n	1361c <_vfiprintf_r+0x85c>
   1363e:	aa18      	add	r2, sp, #96	; 0x60
   13640:	b303      	cbz	r3, 13684 <_vfiprintf_r+0x8c4>
   13642:	4621      	mov	r1, r4
   13644:	4658      	mov	r0, fp
   13646:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1364a:	f7ff fb7d 	bl	12d48 <__sprint_r.part.0>
   1364e:	2800      	cmp	r0, #0
   13650:	f47f ad8d 	bne.w	1316e <_vfiprintf_r+0x3ae>
   13654:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13658:	3d10      	subs	r5, #16
   1365a:	2d10      	cmp	r5, #16
   1365c:	f100 0c01 	add.w	ip, r0, #1
   13660:	dce4      	bgt.n	1362c <_vfiprintf_r+0x86c>
   13662:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13664:	4661      	mov	r1, ip
   13666:	4a4a      	ldr	r2, [pc, #296]	; (13790 <_vfiprintf_r+0x9d0>)
   13668:	f8c9 5004 	str.w	r5, [r9, #4]
   1366c:	442b      	add	r3, r5
   1366e:	2907      	cmp	r1, #7
   13670:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13674:	f8c9 2000 	str.w	r2, [r9]
   13678:	f300 80e7 	bgt.w	1384a <_vfiprintf_r+0xa8a>
   1367c:	f109 0908 	add.w	r9, r9, #8
   13680:	3101      	adds	r1, #1
   13682:	e5ed      	b.n	13260 <_vfiprintf_r+0x4a0>
   13684:	f04f 0c01 	mov.w	ip, #1
   13688:	4618      	mov	r0, r3
   1368a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1368e:	e7ca      	b.n	13626 <_vfiprintf_r+0x866>
   13690:	f04f 0c01 	mov.w	ip, #1
   13694:	4618      	mov	r0, r3
   13696:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1369a:	e772      	b.n	13582 <_vfiprintf_r+0x7c2>
   1369c:	2b00      	cmp	r3, #0
   1369e:	f000 8104 	beq.w	138aa <_vfiprintf_r+0xaea>
   136a2:	ee18 1a10 	vmov	r1, s16
   136a6:	aa18      	add	r2, sp, #96	; 0x60
   136a8:	4658      	mov	r0, fp
   136aa:	f7ff fb4d 	bl	12d48 <__sprint_r.part.0>
   136ae:	2800      	cmp	r0, #0
   136b0:	f47f ad5d 	bne.w	1316e <_vfiprintf_r+0x3ae>
   136b4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   136b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136bc:	1c41      	adds	r1, r0, #1
   136be:	e5a7      	b.n	13210 <_vfiprintf_r+0x450>
   136c0:	2302      	movs	r3, #2
   136c2:	aa11      	add	r2, sp, #68	; 0x44
   136c4:	931c      	str	r3, [sp, #112]	; 0x70
   136c6:	921b      	str	r2, [sp, #108]	; 0x6c
   136c8:	2101      	movs	r1, #1
   136ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136ce:	4608      	mov	r0, r1
   136d0:	f109 0908 	add.w	r9, r9, #8
   136d4:	1c41      	adds	r1, r0, #1
   136d6:	e5ba      	b.n	1324e <_vfiprintf_r+0x48e>
   136d8:	2d10      	cmp	r5, #16
   136da:	f340 82e5 	ble.w	13ca8 <_vfiprintf_r+0xee8>
   136de:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   136e2:	940f      	str	r4, [sp, #60]	; 0x3c
   136e4:	4608      	mov	r0, r1
   136e6:	ee18 4a10 	vmov	r4, s16
   136ea:	e007      	b.n	136fc <_vfiprintf_r+0x93c>
   136ec:	f100 0c02 	add.w	ip, r0, #2
   136f0:	f109 0908 	add.w	r9, r9, #8
   136f4:	4610      	mov	r0, r2
   136f6:	3d10      	subs	r5, #16
   136f8:	2d10      	cmp	r5, #16
   136fa:	dd1d      	ble.n	13738 <_vfiprintf_r+0x978>
   136fc:	4925      	ldr	r1, [pc, #148]	; (13794 <_vfiprintf_r+0x9d4>)
   136fe:	f8c9 1000 	str.w	r1, [r9]
   13702:	1c42      	adds	r2, r0, #1
   13704:	3310      	adds	r3, #16
   13706:	2110      	movs	r1, #16
   13708:	2a07      	cmp	r2, #7
   1370a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1370e:	f8c9 1004 	str.w	r1, [r9, #4]
   13712:	ddeb      	ble.n	136ec <_vfiprintf_r+0x92c>
   13714:	aa18      	add	r2, sp, #96	; 0x60
   13716:	b303      	cbz	r3, 1375a <_vfiprintf_r+0x99a>
   13718:	4621      	mov	r1, r4
   1371a:	4658      	mov	r0, fp
   1371c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13720:	f7ff fb12 	bl	12d48 <__sprint_r.part.0>
   13724:	2800      	cmp	r0, #0
   13726:	f47f ad22 	bne.w	1316e <_vfiprintf_r+0x3ae>
   1372a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1372e:	3d10      	subs	r5, #16
   13730:	2d10      	cmp	r5, #16
   13732:	f100 0c01 	add.w	ip, r0, #1
   13736:	dce1      	bgt.n	136fc <_vfiprintf_r+0x93c>
   13738:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1373a:	4660      	mov	r0, ip
   1373c:	4a15      	ldr	r2, [pc, #84]	; (13794 <_vfiprintf_r+0x9d4>)
   1373e:	f8c9 5004 	str.w	r5, [r9, #4]
   13742:	442b      	add	r3, r5
   13744:	2807      	cmp	r0, #7
   13746:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1374a:	f8c9 2000 	str.w	r2, [r9]
   1374e:	f300 80c1 	bgt.w	138d4 <_vfiprintf_r+0xb14>
   13752:	f109 0908 	add.w	r9, r9, #8
   13756:	1c41      	adds	r1, r0, #1
   13758:	e546      	b.n	131e8 <_vfiprintf_r+0x428>
   1375a:	4618      	mov	r0, r3
   1375c:	f04f 0c01 	mov.w	ip, #1
   13760:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13764:	e7c7      	b.n	136f6 <_vfiprintf_r+0x936>
   13766:	0776      	lsls	r6, r6, #29
   13768:	9319      	str	r3, [sp, #100]	; 0x64
   1376a:	d553      	bpl.n	13814 <_vfiprintf_r+0xa54>
   1376c:	9a06      	ldr	r2, [sp, #24]
   1376e:	9903      	ldr	r1, [sp, #12]
   13770:	1a54      	subs	r4, r2, r1
   13772:	2c00      	cmp	r4, #0
   13774:	dd4e      	ble.n	13814 <_vfiprintf_r+0xa54>
   13776:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1377a:	2c10      	cmp	r4, #16
   1377c:	f340 82b0 	ble.w	13ce0 <_vfiprintf_r+0xf20>
   13780:	9919      	ldr	r1, [sp, #100]	; 0x64
   13782:	ee18 6a10 	vmov	r6, s16
   13786:	2510      	movs	r5, #16
   13788:	e00d      	b.n	137a6 <_vfiprintf_r+0x9e6>
   1378a:	bf00      	nop
   1378c:	200027dc 	.word	0x200027dc
   13790:	20003130 	.word	0x20003130
   13794:	20002818 	.word	0x20002818
   13798:	1c88      	adds	r0, r1, #2
   1379a:	f109 0908 	add.w	r9, r9, #8
   1379e:	4611      	mov	r1, r2
   137a0:	3c10      	subs	r4, #16
   137a2:	2c10      	cmp	r4, #16
   137a4:	dd1a      	ble.n	137dc <_vfiprintf_r+0xa1c>
   137a6:	1c4a      	adds	r2, r1, #1
   137a8:	48b3      	ldr	r0, [pc, #716]	; (13a78 <_vfiprintf_r+0xcb8>)
   137aa:	3310      	adds	r3, #16
   137ac:	2a07      	cmp	r2, #7
   137ae:	e9c9 0500 	strd	r0, r5, [r9]
   137b2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   137b6:	ddef      	ble.n	13798 <_vfiprintf_r+0x9d8>
   137b8:	aa18      	add	r2, sp, #96	; 0x60
   137ba:	b333      	cbz	r3, 1380a <_vfiprintf_r+0xa4a>
   137bc:	4631      	mov	r1, r6
   137be:	4658      	mov	r0, fp
   137c0:	f7ff fac2 	bl	12d48 <__sprint_r.part.0>
   137c4:	2800      	cmp	r0, #0
   137c6:	f47f acd2 	bne.w	1316e <_vfiprintf_r+0x3ae>
   137ca:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   137ce:	3c10      	subs	r4, #16
   137d0:	2c10      	cmp	r4, #16
   137d2:	f101 0001 	add.w	r0, r1, #1
   137d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   137da:	dce4      	bgt.n	137a6 <_vfiprintf_r+0x9e6>
   137dc:	4aa6      	ldr	r2, [pc, #664]	; (13a78 <_vfiprintf_r+0xcb8>)
   137de:	f8c9 4004 	str.w	r4, [r9, #4]
   137e2:	4423      	add	r3, r4
   137e4:	2807      	cmp	r0, #7
   137e6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   137ea:	f8c9 2000 	str.w	r2, [r9]
   137ee:	f77f ad59 	ble.w	132a4 <_vfiprintf_r+0x4e4>
   137f2:	b17b      	cbz	r3, 13814 <_vfiprintf_r+0xa54>
   137f4:	ee18 1a10 	vmov	r1, s16
   137f8:	aa18      	add	r2, sp, #96	; 0x60
   137fa:	4658      	mov	r0, fp
   137fc:	f7ff faa4 	bl	12d48 <__sprint_r.part.0>
   13800:	2800      	cmp	r0, #0
   13802:	f47f acb4 	bne.w	1316e <_vfiprintf_r+0x3ae>
   13806:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13808:	e54c      	b.n	132a4 <_vfiprintf_r+0x4e4>
   1380a:	2001      	movs	r0, #1
   1380c:	4619      	mov	r1, r3
   1380e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13812:	e7c5      	b.n	137a0 <_vfiprintf_r+0x9e0>
   13814:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13818:	9903      	ldr	r1, [sp, #12]
   1381a:	428a      	cmp	r2, r1
   1381c:	bfac      	ite	ge
   1381e:	189b      	addge	r3, r3, r2
   13820:	185b      	addlt	r3, r3, r1
   13822:	9305      	str	r3, [sp, #20]
   13824:	e549      	b.n	132ba <_vfiprintf_r+0x4fa>
   13826:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1382a:	058f      	lsls	r7, r1, #22
   1382c:	ee18 3a10 	vmov	r3, s16
   13830:	b28a      	uxth	r2, r1
   13832:	f53f aae8 	bmi.w	12e06 <_vfiprintf_r+0x46>
   13836:	ee18 5a10 	vmov	r5, s16
   1383a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1383c:	f7fe f87c 	bl	11938 <__retarget_lock_acquire_recursive>
   13840:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13844:	b28a      	uxth	r2, r1
   13846:	f7ff bade 	b.w	12e06 <_vfiprintf_r+0x46>
   1384a:	2b00      	cmp	r3, #0
   1384c:	f43f ae79 	beq.w	13542 <_vfiprintf_r+0x782>
   13850:	ee18 1a10 	vmov	r1, s16
   13854:	aa18      	add	r2, sp, #96	; 0x60
   13856:	4658      	mov	r0, fp
   13858:	f7ff fa76 	bl	12d48 <__sprint_r.part.0>
   1385c:	2800      	cmp	r0, #0
   1385e:	f47f ac86 	bne.w	1316e <_vfiprintf_r+0x3ae>
   13862:	9919      	ldr	r1, [sp, #100]	; 0x64
   13864:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13866:	3101      	adds	r1, #1
   13868:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1386c:	e4f8      	b.n	13260 <_vfiprintf_r+0x4a0>
   1386e:	9219      	str	r2, [sp, #100]	; 0x64
   13870:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13874:	e45e      	b.n	13134 <_vfiprintf_r+0x374>
   13876:	2f00      	cmp	r7, #0
   13878:	f47f abc3 	bne.w	13002 <_vfiprintf_r+0x242>
   1387c:	9e03      	ldr	r6, [sp, #12]
   1387e:	2700      	movs	r7, #0
   13880:	9704      	str	r7, [sp, #16]
   13882:	ac44      	add	r4, sp, #272	; 0x110
   13884:	f7ff bbc5 	b.w	13012 <_vfiprintf_r+0x252>
   13888:	9b03      	ldr	r3, [sp, #12]
   1388a:	f013 0310 	ands.w	r3, r3, #16
   1388e:	d154      	bne.n	1393a <_vfiprintf_r+0xb7a>
   13890:	9a03      	ldr	r2, [sp, #12]
   13892:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13896:	f000 816b 	beq.w	13b70 <_vfiprintf_r+0xdb0>
   1389a:	9907      	ldr	r1, [sp, #28]
   1389c:	461a      	mov	r2, r3
   1389e:	f851 3b04 	ldr.w	r3, [r1], #4
   138a2:	9107      	str	r1, [sp, #28]
   138a4:	b29b      	uxth	r3, r3
   138a6:	2101      	movs	r1, #1
   138a8:	e401      	b.n	130ae <_vfiprintf_r+0x2ee>
   138aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   138ac:	2a00      	cmp	r2, #0
   138ae:	d164      	bne.n	1397a <_vfiprintf_r+0xbba>
   138b0:	4618      	mov	r0, r3
   138b2:	2101      	movs	r1, #1
   138b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   138b8:	e4c9      	b.n	1324e <_vfiprintf_r+0x48e>
   138ba:	2101      	movs	r1, #1
   138bc:	4618      	mov	r0, r3
   138be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   138c2:	e4c4      	b.n	1324e <_vfiprintf_r+0x48e>
   138c4:	425b      	negs	r3, r3
   138c6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   138ca:	9603      	str	r6, [sp, #12]
   138cc:	202d      	movs	r0, #45	; 0x2d
   138ce:	2101      	movs	r1, #1
   138d0:	f7ff bbee 	b.w	130b0 <_vfiprintf_r+0x2f0>
   138d4:	2b00      	cmp	r3, #0
   138d6:	f000 8088 	beq.w	139ea <_vfiprintf_r+0xc2a>
   138da:	ee18 1a10 	vmov	r1, s16
   138de:	aa18      	add	r2, sp, #96	; 0x60
   138e0:	4658      	mov	r0, fp
   138e2:	f7ff fa31 	bl	12d48 <__sprint_r.part.0>
   138e6:	2800      	cmp	r0, #0
   138e8:	f47f ac41 	bne.w	1316e <_vfiprintf_r+0x3ae>
   138ec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   138f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   138f4:	1c41      	adds	r1, r0, #1
   138f6:	e477      	b.n	131e8 <_vfiprintf_r+0x428>
   138f8:	f898 1000 	ldrb.w	r1, [r8]
   138fc:	9307      	str	r3, [sp, #28]
   138fe:	f7ff bad2 	b.w	12ea6 <_vfiprintf_r+0xe6>
   13902:	ac44      	add	r4, sp, #272	; 0x110
   13904:	f7ff bb85 	b.w	13012 <_vfiprintf_r+0x252>
   13908:	f109 0908 	add.w	r9, r9, #8
   1390c:	f10c 0101 	add.w	r1, ip, #1
   13910:	4660      	mov	r0, ip
   13912:	e4a0      	b.n	13256 <_vfiprintf_r+0x496>
   13914:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13918:	f040 8197 	bne.w	13c4a <_vfiprintf_r+0xe8a>
   1391c:	f851 3b04 	ldr.w	r3, [r1], #4
   13920:	9107      	str	r1, [sp, #28]
   13922:	f7ff bbc0 	b.w	130a6 <_vfiprintf_r+0x2e6>
   13926:	05b3      	lsls	r3, r6, #22
   13928:	f100 8188 	bmi.w	13c3c <_vfiprintf_r+0xe7c>
   1392c:	f852 3b04 	ldr.w	r3, [r2], #4
   13930:	9207      	str	r2, [sp, #28]
   13932:	17da      	asrs	r2, r3, #31
   13934:	4611      	mov	r1, r2
   13936:	f7ff bb52 	b.w	12fde <_vfiprintf_r+0x21e>
   1393a:	9907      	ldr	r1, [sp, #28]
   1393c:	f851 3b04 	ldr.w	r3, [r1], #4
   13940:	9107      	str	r1, [sp, #28]
   13942:	2101      	movs	r1, #1
   13944:	f7ff bbb3 	b.w	130ae <_vfiprintf_r+0x2ee>
   13948:	9b07      	ldr	r3, [sp, #28]
   1394a:	9805      	ldr	r0, [sp, #20]
   1394c:	f853 1b04 	ldr.w	r1, [r3], #4
   13950:	9307      	str	r3, [sp, #28]
   13952:	17c2      	asrs	r2, r0, #31
   13954:	e9c1 0200 	strd	r0, r2, [r1]
   13958:	f7ff ba7d 	b.w	12e56 <_vfiprintf_r+0x96>
   1395c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1395e:	2b00      	cmp	r3, #0
   13960:	f43f ab26 	beq.w	12fb0 <_vfiprintf_r+0x1f0>
   13964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13966:	781b      	ldrb	r3, [r3, #0]
   13968:	2b00      	cmp	r3, #0
   1396a:	f43f ab21 	beq.w	12fb0 <_vfiprintf_r+0x1f0>
   1396e:	f898 1000 	ldrb.w	r1, [r8]
   13972:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13976:	f7ff ba96 	b.w	12ea6 <_vfiprintf_r+0xe6>
   1397a:	2302      	movs	r3, #2
   1397c:	aa11      	add	r2, sp, #68	; 0x44
   1397e:	931c      	str	r3, [sp, #112]	; 0x70
   13980:	921b      	str	r2, [sp, #108]	; 0x6c
   13982:	2001      	movs	r0, #1
   13984:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13988:	e6a2      	b.n	136d0 <_vfiprintf_r+0x910>
   1398a:	9603      	str	r6, [sp, #12]
   1398c:	e571      	b.n	13472 <_vfiprintf_r+0x6b2>
   1398e:	4b3b      	ldr	r3, [pc, #236]	; (13a7c <_vfiprintf_r+0xcbc>)
   13990:	930c      	str	r3, [sp, #48]	; 0x30
   13992:	f016 0220 	ands.w	r2, r6, #32
   13996:	d059      	beq.n	13a4c <_vfiprintf_r+0xc8c>
   13998:	9b07      	ldr	r3, [sp, #28]
   1399a:	3307      	adds	r3, #7
   1399c:	f023 0307 	bic.w	r3, r3, #7
   139a0:	4618      	mov	r0, r3
   139a2:	685a      	ldr	r2, [r3, #4]
   139a4:	f850 3b08 	ldr.w	r3, [r0], #8
   139a8:	9007      	str	r0, [sp, #28]
   139aa:	07f4      	lsls	r4, r6, #31
   139ac:	d509      	bpl.n	139c2 <_vfiprintf_r+0xc02>
   139ae:	ea53 0002 	orrs.w	r0, r3, r2
   139b2:	d006      	beq.n	139c2 <_vfiprintf_r+0xc02>
   139b4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   139b8:	2130      	movs	r1, #48	; 0x30
   139ba:	f046 0602 	orr.w	r6, r6, #2
   139be:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   139c2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   139c6:	9103      	str	r1, [sp, #12]
   139c8:	2102      	movs	r1, #2
   139ca:	f7ff bb70 	b.w	130ae <_vfiprintf_r+0x2ee>
   139ce:	4b2c      	ldr	r3, [pc, #176]	; (13a80 <_vfiprintf_r+0xcc0>)
   139d0:	930c      	str	r3, [sp, #48]	; 0x30
   139d2:	e7de      	b.n	13992 <_vfiprintf_r+0xbd2>
   139d4:	9b07      	ldr	r3, [sp, #28]
   139d6:	2101      	movs	r1, #1
   139d8:	f853 2b04 	ldr.w	r2, [r3], #4
   139dc:	9103      	str	r1, [sp, #12]
   139de:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   139e2:	9307      	str	r3, [sp, #28]
   139e4:	9104      	str	r1, [sp, #16]
   139e6:	ac2b      	add	r4, sp, #172	; 0xac
   139e8:	e4df      	b.n	133aa <_vfiprintf_r+0x5ea>
   139ea:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   139ee:	2a00      	cmp	r2, #0
   139f0:	f040 8132 	bne.w	13c58 <_vfiprintf_r+0xe98>
   139f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   139f6:	2a00      	cmp	r2, #0
   139f8:	f47f ae62 	bne.w	136c0 <_vfiprintf_r+0x900>
   139fc:	4618      	mov	r0, r3
   139fe:	2101      	movs	r1, #1
   13a00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13a04:	e427      	b.n	13256 <_vfiprintf_r+0x496>
   13a06:	2100      	movs	r1, #0
   13a08:	2208      	movs	r2, #8
   13a0a:	a816      	add	r0, sp, #88	; 0x58
   13a0c:	9413      	str	r4, [sp, #76]	; 0x4c
   13a0e:	f7fd ff0d 	bl	1182c <memset>
   13a12:	1c79      	adds	r1, r7, #1
   13a14:	f000 80bc 	beq.w	13b90 <_vfiprintf_r+0xdd0>
   13a18:	2500      	movs	r5, #0
   13a1a:	9407      	str	r4, [sp, #28]
   13a1c:	462c      	mov	r4, r5
   13a1e:	e00c      	b.n	13a3a <_vfiprintf_r+0xc7a>
   13a20:	a92b      	add	r1, sp, #172	; 0xac
   13a22:	4658      	mov	r0, fp
   13a24:	f000 fa7e 	bl	13f24 <_wcrtomb_r>
   13a28:	1c42      	adds	r2, r0, #1
   13a2a:	4420      	add	r0, r4
   13a2c:	f000 816b 	beq.w	13d06 <_vfiprintf_r+0xf46>
   13a30:	42b8      	cmp	r0, r7
   13a32:	dc08      	bgt.n	13a46 <_vfiprintf_r+0xc86>
   13a34:	f000 8170 	beq.w	13d18 <_vfiprintf_r+0xf58>
   13a38:	4604      	mov	r4, r0
   13a3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13a3c:	5952      	ldr	r2, [r2, r5]
   13a3e:	ab16      	add	r3, sp, #88	; 0x58
   13a40:	3504      	adds	r5, #4
   13a42:	2a00      	cmp	r2, #0
   13a44:	d1ec      	bne.n	13a20 <_vfiprintf_r+0xc60>
   13a46:	9404      	str	r4, [sp, #16]
   13a48:	9c07      	ldr	r4, [sp, #28]
   13a4a:	e0af      	b.n	13bac <_vfiprintf_r+0xdec>
   13a4c:	f016 0310 	ands.w	r3, r6, #16
   13a50:	9807      	ldr	r0, [sp, #28]
   13a52:	d10c      	bne.n	13a6e <_vfiprintf_r+0xcae>
   13a54:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13a58:	d005      	beq.n	13a66 <_vfiprintf_r+0xca6>
   13a5a:	461a      	mov	r2, r3
   13a5c:	f850 3b04 	ldr.w	r3, [r0], #4
   13a60:	9007      	str	r0, [sp, #28]
   13a62:	b29b      	uxth	r3, r3
   13a64:	e7a1      	b.n	139aa <_vfiprintf_r+0xbea>
   13a66:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13a6a:	f040 80e1 	bne.w	13c30 <_vfiprintf_r+0xe70>
   13a6e:	f850 3b04 	ldr.w	r3, [r0], #4
   13a72:	9007      	str	r0, [sp, #28]
   13a74:	e799      	b.n	139aa <_vfiprintf_r+0xbea>
   13a76:	bf00      	nop
   13a78:	20002818 	.word	0x20002818
   13a7c:	200027dc 	.word	0x200027dc
   13a80:	200027c8 	.word	0x200027c8
   13a84:	9903      	ldr	r1, [sp, #12]
   13a86:	9704      	str	r7, [sp, #16]
   13a88:	ac44      	add	r4, sp, #272	; 0x110
   13a8a:	469e      	mov	lr, r3
   13a8c:	ee08 ba90 	vmov	s17, fp
   13a90:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13a94:	f04f 0c00 	mov.w	ip, #0
   13a98:	4623      	mov	r3, r4
   13a9a:	e006      	b.n	13aaa <_vfiprintf_r+0xcea>
   13a9c:	f1be 0f0a 	cmp.w	lr, #10
   13aa0:	f172 0200 	sbcs.w	r2, r2, #0
   13aa4:	d339      	bcc.n	13b1a <_vfiprintf_r+0xd5a>
   13aa6:	46a6      	mov	lr, r4
   13aa8:	462a      	mov	r2, r5
   13aaa:	49a6      	ldr	r1, [pc, #664]	; (13d44 <_vfiprintf_r+0xf84>)
   13aac:	eb1e 0002 	adds.w	r0, lr, r2
   13ab0:	f140 0000 	adc.w	r0, r0, #0
   13ab4:	460f      	mov	r7, r1
   13ab6:	fba1 1400 	umull	r1, r4, r1, r0
   13aba:	f024 0103 	bic.w	r1, r4, #3
   13abe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13ac2:	1a40      	subs	r0, r0, r1
   13ac4:	ebbe 0100 	subs.w	r1, lr, r0
   13ac8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   13acc:	f162 0400 	sbc.w	r4, r2, #0
   13ad0:	fb05 f501 	mul.w	r5, r5, r1
   13ad4:	fb07 5504 	mla	r5, r7, r4, r5
   13ad8:	fba1 4107 	umull	r4, r1, r1, r7
   13adc:	440d      	add	r5, r1
   13ade:	2705      	movs	r7, #5
   13ae0:	f004 0101 	and.w	r1, r4, #1
   13ae4:	fba1 1b07 	umull	r1, fp, r1, r7
   13ae8:	1809      	adds	r1, r1, r0
   13aea:	0864      	lsrs	r4, r4, #1
   13aec:	3130      	adds	r1, #48	; 0x30
   13aee:	f803 1c01 	strb.w	r1, [r3, #-1]
   13af2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13af6:	f10c 0c01 	add.w	ip, ip, #1
   13afa:	3b01      	subs	r3, #1
   13afc:	086d      	lsrs	r5, r5, #1
   13afe:	2e00      	cmp	r6, #0
   13b00:	d0cc      	beq.n	13a9c <_vfiprintf_r+0xcdc>
   13b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b04:	7809      	ldrb	r1, [r1, #0]
   13b06:	4561      	cmp	r1, ip
   13b08:	d1c8      	bne.n	13a9c <_vfiprintf_r+0xcdc>
   13b0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   13b0e:	d0c5      	beq.n	13a9c <_vfiprintf_r+0xcdc>
   13b10:	f1be 0f0a 	cmp.w	lr, #10
   13b14:	f172 0200 	sbcs.w	r2, r2, #0
   13b18:	d26c      	bcs.n	13bf4 <_vfiprintf_r+0xe34>
   13b1a:	461c      	mov	r4, r3
   13b1c:	ab44      	add	r3, sp, #272	; 0x110
   13b1e:	1b1b      	subs	r3, r3, r4
   13b20:	9f04      	ldr	r7, [sp, #16]
   13b22:	9e03      	ldr	r6, [sp, #12]
   13b24:	9304      	str	r3, [sp, #16]
   13b26:	ee18 ba90 	vmov	fp, s17
   13b2a:	f7ff ba72 	b.w	13012 <_vfiprintf_r+0x252>
   13b2e:	9603      	str	r6, [sp, #12]
   13b30:	f7ff ba62 	b.w	12ff8 <_vfiprintf_r+0x238>
   13b34:	4658      	mov	r0, fp
   13b36:	f7fe fc0d 	bl	12354 <__sinit>
   13b3a:	f7ff b95b 	b.w	12df4 <_vfiprintf_r+0x34>
   13b3e:	2901      	cmp	r1, #1
   13b40:	9603      	str	r6, [sp, #12]
   13b42:	f47f accd 	bne.w	134e0 <_vfiprintf_r+0x720>
   13b46:	f7ff ba5c 	b.w	13002 <_vfiprintf_r+0x242>
   13b4a:	9b07      	ldr	r3, [sp, #28]
   13b4c:	9905      	ldr	r1, [sp, #20]
   13b4e:	f853 2b04 	ldr.w	r2, [r3], #4
   13b52:	6011      	str	r1, [r2, #0]
   13b54:	9307      	str	r3, [sp, #28]
   13b56:	f7ff b97e 	b.w	12e56 <_vfiprintf_r+0x96>
   13b5a:	2f06      	cmp	r7, #6
   13b5c:	463b      	mov	r3, r7
   13b5e:	9a03      	ldr	r2, [sp, #12]
   13b60:	4c79      	ldr	r4, [pc, #484]	; (13d48 <_vfiprintf_r+0xf88>)
   13b62:	9207      	str	r2, [sp, #28]
   13b64:	bf28      	it	cs
   13b66:	2306      	movcs	r3, #6
   13b68:	9304      	str	r3, [sp, #16]
   13b6a:	9303      	str	r3, [sp, #12]
   13b6c:	f7ff bb25 	b.w	131ba <_vfiprintf_r+0x3fa>
   13b70:	9b03      	ldr	r3, [sp, #12]
   13b72:	9907      	ldr	r1, [sp, #28]
   13b74:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13b78:	bf14      	ite	ne
   13b7a:	f851 3b04 	ldrne.w	r3, [r1], #4
   13b7e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13b82:	9107      	str	r1, [sp, #28]
   13b84:	bf1c      	itt	ne
   13b86:	4602      	movne	r2, r0
   13b88:	b2db      	uxtbne	r3, r3
   13b8a:	2101      	movs	r1, #1
   13b8c:	f7ff ba8f 	b.w	130ae <_vfiprintf_r+0x2ee>
   13b90:	ab16      	add	r3, sp, #88	; 0x58
   13b92:	9300      	str	r3, [sp, #0]
   13b94:	2300      	movs	r3, #0
   13b96:	4619      	mov	r1, r3
   13b98:	aa13      	add	r2, sp, #76	; 0x4c
   13b9a:	4658      	mov	r0, fp
   13b9c:	f000 fb22 	bl	141e4 <_wcsrtombs_r>
   13ba0:	4603      	mov	r3, r0
   13ba2:	3301      	adds	r3, #1
   13ba4:	9004      	str	r0, [sp, #16]
   13ba6:	f000 80ae 	beq.w	13d06 <_vfiprintf_r+0xf46>
   13baa:	9413      	str	r4, [sp, #76]	; 0x4c
   13bac:	9b04      	ldr	r3, [sp, #16]
   13bae:	2b00      	cmp	r3, #0
   13bb0:	d030      	beq.n	13c14 <_vfiprintf_r+0xe54>
   13bb2:	2b63      	cmp	r3, #99	; 0x63
   13bb4:	dc63      	bgt.n	13c7e <_vfiprintf_r+0xebe>
   13bb6:	2300      	movs	r3, #0
   13bb8:	9308      	str	r3, [sp, #32]
   13bba:	ac2b      	add	r4, sp, #172	; 0xac
   13bbc:	2208      	movs	r2, #8
   13bbe:	2100      	movs	r1, #0
   13bc0:	a816      	add	r0, sp, #88	; 0x58
   13bc2:	f7fd fe33 	bl	1182c <memset>
   13bc6:	9d04      	ldr	r5, [sp, #16]
   13bc8:	ab16      	add	r3, sp, #88	; 0x58
   13bca:	9300      	str	r3, [sp, #0]
   13bcc:	aa13      	add	r2, sp, #76	; 0x4c
   13bce:	462b      	mov	r3, r5
   13bd0:	4621      	mov	r1, r4
   13bd2:	4658      	mov	r0, fp
   13bd4:	f000 fb06 	bl	141e4 <_wcsrtombs_r>
   13bd8:	4285      	cmp	r5, r0
   13bda:	f040 80ab 	bne.w	13d34 <_vfiprintf_r+0xf74>
   13bde:	9b03      	ldr	r3, [sp, #12]
   13be0:	9a04      	ldr	r2, [sp, #16]
   13be2:	9307      	str	r3, [sp, #28]
   13be4:	2300      	movs	r3, #0
   13be6:	54a3      	strb	r3, [r4, r2]
   13be8:	461f      	mov	r7, r3
   13bea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   13bee:	9303      	str	r3, [sp, #12]
   13bf0:	f7ff ba16 	b.w	13020 <_vfiprintf_r+0x260>
   13bf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13bf6:	990d      	ldr	r1, [sp, #52]	; 0x34
   13bf8:	1a9b      	subs	r3, r3, r2
   13bfa:	4618      	mov	r0, r3
   13bfc:	9308      	str	r3, [sp, #32]
   13bfe:	f7fd fa3b 	bl	11078 <strncpy>
   13c02:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13c04:	9b08      	ldr	r3, [sp, #32]
   13c06:	784a      	ldrb	r2, [r1, #1]
   13c08:	b10a      	cbz	r2, 13c0e <_vfiprintf_r+0xe4e>
   13c0a:	3101      	adds	r1, #1
   13c0c:	910b      	str	r1, [sp, #44]	; 0x2c
   13c0e:	f04f 0c00 	mov.w	ip, #0
   13c12:	e748      	b.n	13aa6 <_vfiprintf_r+0xce6>
   13c14:	9b03      	ldr	r3, [sp, #12]
   13c16:	9307      	str	r3, [sp, #28]
   13c18:	9b04      	ldr	r3, [sp, #16]
   13c1a:	9303      	str	r3, [sp, #12]
   13c1c:	461f      	mov	r7, r3
   13c1e:	9308      	str	r3, [sp, #32]
   13c20:	f7ff b9fe 	b.w	13020 <_vfiprintf_r+0x260>
   13c24:	2101      	movs	r1, #1
   13c26:	4618      	mov	r0, r3
   13c28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13c2c:	f7ff bb13 	b.w	13256 <_vfiprintf_r+0x496>
   13c30:	f850 3b04 	ldr.w	r3, [r0], #4
   13c34:	9007      	str	r0, [sp, #28]
   13c36:	4622      	mov	r2, r4
   13c38:	b2db      	uxtb	r3, r3
   13c3a:	e6b6      	b.n	139aa <_vfiprintf_r+0xbea>
   13c3c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13c40:	9207      	str	r2, [sp, #28]
   13c42:	17da      	asrs	r2, r3, #31
   13c44:	4611      	mov	r1, r2
   13c46:	f7ff b9ca 	b.w	12fde <_vfiprintf_r+0x21e>
   13c4a:	f851 3b04 	ldr.w	r3, [r1], #4
   13c4e:	9107      	str	r1, [sp, #28]
   13c50:	4602      	mov	r2, r0
   13c52:	b2db      	uxtb	r3, r3
   13c54:	f7ff ba27 	b.w	130a6 <_vfiprintf_r+0x2e6>
   13c58:	2301      	movs	r3, #1
   13c5a:	931c      	str	r3, [sp, #112]	; 0x70
   13c5c:	2101      	movs	r1, #1
   13c5e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13c62:	931b      	str	r3, [sp, #108]	; 0x6c
   13c64:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13c68:	460b      	mov	r3, r1
   13c6a:	f7ff bacd 	b.w	13208 <_vfiprintf_r+0x448>
   13c6e:	9b07      	ldr	r3, [sp, #28]
   13c70:	9905      	ldr	r1, [sp, #20]
   13c72:	f853 2b04 	ldr.w	r2, [r3], #4
   13c76:	9307      	str	r3, [sp, #28]
   13c78:	8011      	strh	r1, [r2, #0]
   13c7a:	f7ff b8ec 	b.w	12e56 <_vfiprintf_r+0x96>
   13c7e:	1c59      	adds	r1, r3, #1
   13c80:	4658      	mov	r0, fp
   13c82:	f7fd fa57 	bl	11134 <_malloc_r>
   13c86:	4604      	mov	r4, r0
   13c88:	2800      	cmp	r0, #0
   13c8a:	d03c      	beq.n	13d06 <_vfiprintf_r+0xf46>
   13c8c:	9008      	str	r0, [sp, #32]
   13c8e:	e795      	b.n	13bbc <_vfiprintf_r+0xdfc>
   13c90:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13c92:	f7fd fe53 	bl	1193c <__retarget_lock_release_recursive>
   13c96:	f7ff b9e9 	b.w	1306c <_vfiprintf_r+0x2ac>
   13c9a:	9b03      	ldr	r3, [sp, #12]
   13c9c:	9307      	str	r3, [sp, #28]
   13c9e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13ca2:	9f08      	ldr	r7, [sp, #32]
   13ca4:	f7ff b9bc 	b.w	13020 <_vfiprintf_r+0x260>
   13ca8:	9819      	ldr	r0, [sp, #100]	; 0x64
   13caa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13cac:	3001      	adds	r0, #1
   13cae:	e545      	b.n	1373c <_vfiprintf_r+0x97c>
   13cb0:	9b03      	ldr	r3, [sp, #12]
   13cb2:	9307      	str	r3, [sp, #28]
   13cb4:	4620      	mov	r0, r4
   13cb6:	f7fe fbe3 	bl	12480 <strlen>
   13cba:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   13cbe:	462f      	mov	r7, r5
   13cc0:	9004      	str	r0, [sp, #16]
   13cc2:	9303      	str	r3, [sp, #12]
   13cc4:	9508      	str	r5, [sp, #32]
   13cc6:	f7ff b9ab 	b.w	13020 <_vfiprintf_r+0x260>
   13cca:	ee18 1a10 	vmov	r1, s16
   13cce:	aa18      	add	r2, sp, #96	; 0x60
   13cd0:	4658      	mov	r0, fp
   13cd2:	f7ff f839 	bl	12d48 <__sprint_r.part.0>
   13cd6:	2800      	cmp	r0, #0
   13cd8:	f43f aa36 	beq.w	13148 <_vfiprintf_r+0x388>
   13cdc:	f7ff ba4d 	b.w	1317a <_vfiprintf_r+0x3ba>
   13ce0:	9819      	ldr	r0, [sp, #100]	; 0x64
   13ce2:	3001      	adds	r0, #1
   13ce4:	e57a      	b.n	137dc <_vfiprintf_r+0xa1c>
   13ce6:	468c      	mov	ip, r1
   13ce8:	e46e      	b.n	135c8 <_vfiprintf_r+0x808>
   13cea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13cec:	07d9      	lsls	r1, r3, #31
   13cee:	d405      	bmi.n	13cfc <_vfiprintf_r+0xf3c>
   13cf0:	89ab      	ldrh	r3, [r5, #12]
   13cf2:	059a      	lsls	r2, r3, #22
   13cf4:	d402      	bmi.n	13cfc <_vfiprintf_r+0xf3c>
   13cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13cf8:	f7fd fe20 	bl	1193c <__retarget_lock_release_recursive>
   13cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d00:	9305      	str	r3, [sp, #20]
   13d02:	f7ff ba49 	b.w	13198 <_vfiprintf_r+0x3d8>
   13d06:	ee18 2a10 	vmov	r2, s16
   13d0a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d12:	8193      	strh	r3, [r2, #12]
   13d14:	f7ff ba35 	b.w	13182 <_vfiprintf_r+0x3c2>
   13d18:	9c07      	ldr	r4, [sp, #28]
   13d1a:	9704      	str	r7, [sp, #16]
   13d1c:	e746      	b.n	13bac <_vfiprintf_r+0xdec>
   13d1e:	9b07      	ldr	r3, [sp, #28]
   13d20:	f898 1001 	ldrb.w	r1, [r8, #1]
   13d24:	f853 7b04 	ldr.w	r7, [r3], #4
   13d28:	9307      	str	r3, [sp, #28]
   13d2a:	4690      	mov	r8, r2
   13d2c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13d30:	f7ff b8b9 	b.w	12ea6 <_vfiprintf_r+0xe6>
   13d34:	ee18 2a10 	vmov	r2, s16
   13d38:	8993      	ldrh	r3, [r2, #12]
   13d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d3e:	8193      	strh	r3, [r2, #12]
   13d40:	f7ff ba15 	b.w	1316e <_vfiprintf_r+0x3ae>
   13d44:	cccccccd 	.word	0xcccccccd
   13d48:	200027f0 	.word	0x200027f0

00013d4c <__sbprintf>:
   13d4c:	b570      	push	{r4, r5, r6, lr}
   13d4e:	460c      	mov	r4, r1
   13d50:	8989      	ldrh	r1, [r1, #12]
   13d52:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13d56:	f021 0102 	bic.w	r1, r1, #2
   13d5a:	f8ad 1014 	strh.w	r1, [sp, #20]
   13d5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13d60:	911b      	str	r1, [sp, #108]	; 0x6c
   13d62:	89e1      	ldrh	r1, [r4, #14]
   13d64:	f8ad 1016 	strh.w	r1, [sp, #22]
   13d68:	69e1      	ldr	r1, [r4, #28]
   13d6a:	9109      	str	r1, [sp, #36]	; 0x24
   13d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13d6e:	910b      	str	r1, [sp, #44]	; 0x2c
   13d70:	a91c      	add	r1, sp, #112	; 0x70
   13d72:	9102      	str	r1, [sp, #8]
   13d74:	9106      	str	r1, [sp, #24]
   13d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13d7a:	4606      	mov	r6, r0
   13d7c:	9104      	str	r1, [sp, #16]
   13d7e:	9107      	str	r1, [sp, #28]
   13d80:	a818      	add	r0, sp, #96	; 0x60
   13d82:	2100      	movs	r1, #0
   13d84:	e9cd 3200 	strd	r3, r2, [sp]
   13d88:	9108      	str	r1, [sp, #32]
   13d8a:	f7fd fdd1 	bl	11930 <__retarget_lock_init_recursive>
   13d8e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13d92:	a902      	add	r1, sp, #8
   13d94:	4630      	mov	r0, r6
   13d96:	f7ff f813 	bl	12dc0 <_vfiprintf_r>
   13d9a:	1e05      	subs	r5, r0, #0
   13d9c:	db07      	blt.n	13dae <__sbprintf+0x62>
   13d9e:	a902      	add	r1, sp, #8
   13da0:	4630      	mov	r0, r6
   13da2:	f001 f9e1 	bl	15168 <_fflush_r>
   13da6:	2800      	cmp	r0, #0
   13da8:	bf18      	it	ne
   13daa:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   13dae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13db2:	065b      	lsls	r3, r3, #25
   13db4:	d503      	bpl.n	13dbe <__sbprintf+0x72>
   13db6:	89a3      	ldrh	r3, [r4, #12]
   13db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13dbc:	81a3      	strh	r3, [r4, #12]
   13dbe:	9818      	ldr	r0, [sp, #96]	; 0x60
   13dc0:	f7fd fdb8 	bl	11934 <__retarget_lock_close_recursive>
   13dc4:	4628      	mov	r0, r5
   13dc6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   13dca:	bd70      	pop	{r4, r5, r6, pc}

00013dcc <__register_exitproc>:
   13dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13dd0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13e50 <__register_exitproc+0x84>
   13dd4:	4606      	mov	r6, r0
   13dd6:	f8da 0000 	ldr.w	r0, [sl]
   13dda:	4698      	mov	r8, r3
   13ddc:	460f      	mov	r7, r1
   13dde:	4691      	mov	r9, r2
   13de0:	f7fd fdaa 	bl	11938 <__retarget_lock_acquire_recursive>
   13de4:	4b18      	ldr	r3, [pc, #96]	; (13e48 <__register_exitproc+0x7c>)
   13de6:	681c      	ldr	r4, [r3, #0]
   13de8:	b324      	cbz	r4, 13e34 <__register_exitproc+0x68>
   13dea:	6865      	ldr	r5, [r4, #4]
   13dec:	2d1f      	cmp	r5, #31
   13dee:	dc24      	bgt.n	13e3a <__register_exitproc+0x6e>
   13df0:	b95e      	cbnz	r6, 13e0a <__register_exitproc+0x3e>
   13df2:	1c6b      	adds	r3, r5, #1
   13df4:	3502      	adds	r5, #2
   13df6:	f8da 0000 	ldr.w	r0, [sl]
   13dfa:	6063      	str	r3, [r4, #4]
   13dfc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13e00:	f7fd fd9c 	bl	1193c <__retarget_lock_release_recursive>
   13e04:	2000      	movs	r0, #0
   13e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e0a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   13e0e:	2301      	movs	r3, #1
   13e10:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13e14:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13e18:	40ab      	lsls	r3, r5
   13e1a:	431a      	orrs	r2, r3
   13e1c:	2e02      	cmp	r6, #2
   13e1e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   13e22:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13e26:	d1e4      	bne.n	13df2 <__register_exitproc+0x26>
   13e28:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   13e2c:	431a      	orrs	r2, r3
   13e2e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   13e32:	e7de      	b.n	13df2 <__register_exitproc+0x26>
   13e34:	4c05      	ldr	r4, [pc, #20]	; (13e4c <__register_exitproc+0x80>)
   13e36:	601c      	str	r4, [r3, #0]
   13e38:	e7d7      	b.n	13dea <__register_exitproc+0x1e>
   13e3a:	f8da 0000 	ldr.w	r0, [sl]
   13e3e:	f7fd fd7d 	bl	1193c <__retarget_lock_release_recursive>
   13e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e46:	e7de      	b.n	13e06 <__register_exitproc+0x3a>
   13e48:	20004bb4 	.word	0x20004bb4
   13e4c:	20004bb8 	.word	0x20004bb8
   13e50:	2000333c 	.word	0x2000333c

00013e54 <__ascii_mbtowc>:
   13e54:	b082      	sub	sp, #8
   13e56:	b149      	cbz	r1, 13e6c <__ascii_mbtowc+0x18>
   13e58:	b15a      	cbz	r2, 13e72 <__ascii_mbtowc+0x1e>
   13e5a:	b16b      	cbz	r3, 13e78 <__ascii_mbtowc+0x24>
   13e5c:	7813      	ldrb	r3, [r2, #0]
   13e5e:	600b      	str	r3, [r1, #0]
   13e60:	7812      	ldrb	r2, [r2, #0]
   13e62:	1e10      	subs	r0, r2, #0
   13e64:	bf18      	it	ne
   13e66:	2001      	movne	r0, #1
   13e68:	b002      	add	sp, #8
   13e6a:	4770      	bx	lr
   13e6c:	a901      	add	r1, sp, #4
   13e6e:	2a00      	cmp	r2, #0
   13e70:	d1f3      	bne.n	13e5a <__ascii_mbtowc+0x6>
   13e72:	4610      	mov	r0, r2
   13e74:	b002      	add	sp, #8
   13e76:	4770      	bx	lr
   13e78:	f06f 0001 	mvn.w	r0, #1
   13e7c:	e7f4      	b.n	13e68 <__ascii_mbtowc+0x14>
   13e7e:	bf00      	nop

00013e80 <fcvtbuf>:
   13e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e84:	460e      	mov	r6, r1
   13e86:	4926      	ldr	r1, [pc, #152]	; (13f20 <fcvtbuf+0xa0>)
   13e88:	b087      	sub	sp, #28
   13e8a:	680f      	ldr	r7, [r1, #0]
   13e8c:	4604      	mov	r4, r0
   13e8e:	4690      	mov	r8, r2
   13e90:	461d      	mov	r5, r3
   13e92:	b353      	cbz	r3, 13eea <fcvtbuf+0x6a>
   13e94:	aa05      	add	r2, sp, #20
   13e96:	4633      	mov	r3, r6
   13e98:	9201      	str	r2, [sp, #4]
   13e9a:	2103      	movs	r1, #3
   13e9c:	4622      	mov	r2, r4
   13e9e:	f8cd 8000 	str.w	r8, [sp]
   13ea2:	4638      	mov	r0, r7
   13ea4:	f000 fa40 	bl	14328 <_dtoa_r>
   13ea8:	9b05      	ldr	r3, [sp, #20]
   13eaa:	6832      	ldr	r2, [r6, #0]
   13eac:	4298      	cmp	r0, r3
   13eae:	4684      	mov	ip, r0
   13eb0:	f1c2 0200 	rsb	r2, r2, #0
   13eb4:	4629      	mov	r1, r5
   13eb6:	d209      	bcs.n	13ecc <fcvtbuf+0x4c>
   13eb8:	1a10      	subs	r0, r2, r0
   13eba:	f81c 3b01 	ldrb.w	r3, [ip], #1
   13ebe:	f801 3b01 	strb.w	r3, [r1], #1
   13ec2:	9b05      	ldr	r3, [sp, #20]
   13ec4:	4563      	cmp	r3, ip
   13ec6:	eb00 020c 	add.w	r2, r0, ip
   13eca:	d8f6      	bhi.n	13eba <fcvtbuf+0x3a>
   13ecc:	4294      	cmp	r4, r2
   13ece:	dd24      	ble.n	13f1a <fcvtbuf+0x9a>
   13ed0:	1aa2      	subs	r2, r4, r2
   13ed2:	440a      	add	r2, r1
   13ed4:	2330      	movs	r3, #48	; 0x30
   13ed6:	f801 3b01 	strb.w	r3, [r1], #1
   13eda:	4291      	cmp	r1, r2
   13edc:	d1fb      	bne.n	13ed6 <fcvtbuf+0x56>
   13ede:	2300      	movs	r3, #0
   13ee0:	7013      	strb	r3, [r2, #0]
   13ee2:	4628      	mov	r0, r5
   13ee4:	b007      	add	sp, #28
   13ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
   13eec:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13ef0:	429a      	cmp	r2, r3
   13ef2:	dd01      	ble.n	13ef8 <fcvtbuf+0x78>
   13ef4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13ef6:	e7cd      	b.n	13e94 <fcvtbuf+0x14>
   13ef8:	f100 0924 	add.w	r9, r0, #36	; 0x24
   13efc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   13efe:	464a      	mov	r2, r9
   13f00:	4638      	mov	r0, r7
   13f02:	ed8d 0b02 	vstr	d0, [sp, #8]
   13f06:	f7fe fb29 	bl	1255c <_realloc_r>
   13f0a:	4605      	mov	r5, r0
   13f0c:	2800      	cmp	r0, #0
   13f0e:	d0e8      	beq.n	13ee2 <fcvtbuf+0x62>
   13f10:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13f14:	ed9d 0b02 	vldr	d0, [sp, #8]
   13f18:	e7bc      	b.n	13e94 <fcvtbuf+0x14>
   13f1a:	460a      	mov	r2, r1
   13f1c:	e7df      	b.n	13ede <fcvtbuf+0x5e>
   13f1e:	bf00      	nop
   13f20:	200038d0 	.word	0x200038d0

00013f24 <_wcrtomb_r>:
   13f24:	b570      	push	{r4, r5, r6, lr}
   13f26:	4605      	mov	r5, r0
   13f28:	b084      	sub	sp, #16
   13f2a:	b15b      	cbz	r3, 13f44 <_wcrtomb_r+0x20>
   13f2c:	461c      	mov	r4, r3
   13f2e:	b169      	cbz	r1, 13f4c <_wcrtomb_r+0x28>
   13f30:	4b0e      	ldr	r3, [pc, #56]	; (13f6c <_wcrtomb_r+0x48>)
   13f32:	4628      	mov	r0, r5
   13f34:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13f38:	4623      	mov	r3, r4
   13f3a:	47b0      	blx	r6
   13f3c:	1c43      	adds	r3, r0, #1
   13f3e:	d00f      	beq.n	13f60 <_wcrtomb_r+0x3c>
   13f40:	b004      	add	sp, #16
   13f42:	bd70      	pop	{r4, r5, r6, pc}
   13f44:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13f48:	2900      	cmp	r1, #0
   13f4a:	d1f1      	bne.n	13f30 <_wcrtomb_r+0xc>
   13f4c:	4a07      	ldr	r2, [pc, #28]	; (13f6c <_wcrtomb_r+0x48>)
   13f4e:	4623      	mov	r3, r4
   13f50:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13f54:	4628      	mov	r0, r5
   13f56:	460a      	mov	r2, r1
   13f58:	a901      	add	r1, sp, #4
   13f5a:	47b0      	blx	r6
   13f5c:	1c43      	adds	r3, r0, #1
   13f5e:	d1ef      	bne.n	13f40 <_wcrtomb_r+0x1c>
   13f60:	2200      	movs	r2, #0
   13f62:	238a      	movs	r3, #138	; 0x8a
   13f64:	6022      	str	r2, [r4, #0]
   13f66:	602b      	str	r3, [r5, #0]
   13f68:	b004      	add	sp, #16
   13f6a:	bd70      	pop	{r4, r5, r6, pc}
   13f6c:	20003348 	.word	0x20003348

00013f70 <_localeconv_r>:
   13f70:	4800      	ldr	r0, [pc, #0]	; (13f74 <_localeconv_r+0x4>)
   13f72:	4770      	bx	lr
   13f74:	20003438 	.word	0x20003438

00013f78 <_fclose_r>:
   13f78:	b570      	push	{r4, r5, r6, lr}
   13f7a:	2900      	cmp	r1, #0
   13f7c:	d04b      	beq.n	14016 <_fclose_r+0x9e>
   13f7e:	4606      	mov	r6, r0
   13f80:	460c      	mov	r4, r1
   13f82:	b110      	cbz	r0, 13f8a <_fclose_r+0x12>
   13f84:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13f86:	2b00      	cmp	r3, #0
   13f88:	d048      	beq.n	1401c <_fclose_r+0xa4>
   13f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13f8c:	07d8      	lsls	r0, r3, #31
   13f8e:	d534      	bpl.n	13ffa <_fclose_r+0x82>
   13f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f94:	2b00      	cmp	r3, #0
   13f96:	d03e      	beq.n	14016 <_fclose_r+0x9e>
   13f98:	4621      	mov	r1, r4
   13f9a:	4630      	mov	r0, r6
   13f9c:	f001 f84c 	bl	15038 <__sflush_r>
   13fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13fa2:	4605      	mov	r5, r0
   13fa4:	b133      	cbz	r3, 13fb4 <_fclose_r+0x3c>
   13fa6:	69e1      	ldr	r1, [r4, #28]
   13fa8:	4630      	mov	r0, r6
   13faa:	4798      	blx	r3
   13fac:	2800      	cmp	r0, #0
   13fae:	bfb8      	it	lt
   13fb0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   13fb4:	89a3      	ldrh	r3, [r4, #12]
   13fb6:	061a      	lsls	r2, r3, #24
   13fb8:	d43c      	bmi.n	14034 <_fclose_r+0xbc>
   13fba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13fbc:	b141      	cbz	r1, 13fd0 <_fclose_r+0x58>
   13fbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13fc2:	4299      	cmp	r1, r3
   13fc4:	d002      	beq.n	13fcc <_fclose_r+0x54>
   13fc6:	4630      	mov	r0, r6
   13fc8:	f7fe fd04 	bl	129d4 <_free_r>
   13fcc:	2300      	movs	r3, #0
   13fce:	6323      	str	r3, [r4, #48]	; 0x30
   13fd0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13fd2:	b121      	cbz	r1, 13fde <_fclose_r+0x66>
   13fd4:	4630      	mov	r0, r6
   13fd6:	f7fe fcfd 	bl	129d4 <_free_r>
   13fda:	2300      	movs	r3, #0
   13fdc:	6463      	str	r3, [r4, #68]	; 0x44
   13fde:	f7fe f9d7 	bl	12390 <__sfp_lock_acquire>
   13fe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13fe4:	2200      	movs	r2, #0
   13fe6:	07db      	lsls	r3, r3, #31
   13fe8:	81a2      	strh	r2, [r4, #12]
   13fea:	d51f      	bpl.n	1402c <_fclose_r+0xb4>
   13fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13fee:	f7fd fca1 	bl	11934 <__retarget_lock_close_recursive>
   13ff2:	f7fe f9d3 	bl	1239c <__sfp_lock_release>
   13ff6:	4628      	mov	r0, r5
   13ff8:	bd70      	pop	{r4, r5, r6, pc}
   13ffa:	89a3      	ldrh	r3, [r4, #12]
   13ffc:	0599      	lsls	r1, r3, #22
   13ffe:	d4cb      	bmi.n	13f98 <_fclose_r+0x20>
   14000:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14002:	f7fd fc99 	bl	11938 <__retarget_lock_acquire_recursive>
   14006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1400a:	2b00      	cmp	r3, #0
   1400c:	d1c4      	bne.n	13f98 <_fclose_r+0x20>
   1400e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   14010:	f015 0501 	ands.w	r5, r5, #1
   14014:	d005      	beq.n	14022 <_fclose_r+0xaa>
   14016:	2500      	movs	r5, #0
   14018:	4628      	mov	r0, r5
   1401a:	bd70      	pop	{r4, r5, r6, pc}
   1401c:	f7fe f99a 	bl	12354 <__sinit>
   14020:	e7b3      	b.n	13f8a <_fclose_r+0x12>
   14022:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14024:	f7fd fc8a 	bl	1193c <__retarget_lock_release_recursive>
   14028:	4628      	mov	r0, r5
   1402a:	bd70      	pop	{r4, r5, r6, pc}
   1402c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1402e:	f7fd fc85 	bl	1193c <__retarget_lock_release_recursive>
   14032:	e7db      	b.n	13fec <_fclose_r+0x74>
   14034:	6921      	ldr	r1, [r4, #16]
   14036:	4630      	mov	r0, r6
   14038:	f7fe fccc 	bl	129d4 <_free_r>
   1403c:	e7bd      	b.n	13fba <_fclose_r+0x42>
   1403e:	bf00      	nop

00014040 <__swsetup_r>:
   14040:	b538      	push	{r3, r4, r5, lr}
   14042:	4b31      	ldr	r3, [pc, #196]	; (14108 <__swsetup_r+0xc8>)
   14044:	681b      	ldr	r3, [r3, #0]
   14046:	4605      	mov	r5, r0
   14048:	460c      	mov	r4, r1
   1404a:	b113      	cbz	r3, 14052 <__swsetup_r+0x12>
   1404c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1404e:	2a00      	cmp	r2, #0
   14050:	d04e      	beq.n	140f0 <__swsetup_r+0xb0>
   14052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14056:	0718      	lsls	r0, r3, #28
   14058:	b29a      	uxth	r2, r3
   1405a:	d51c      	bpl.n	14096 <__swsetup_r+0x56>
   1405c:	6921      	ldr	r1, [r4, #16]
   1405e:	b329      	cbz	r1, 140ac <__swsetup_r+0x6c>
   14060:	f012 0001 	ands.w	r0, r2, #1
   14064:	d007      	beq.n	14076 <__swsetup_r+0x36>
   14066:	2000      	movs	r0, #0
   14068:	60a0      	str	r0, [r4, #8]
   1406a:	6960      	ldr	r0, [r4, #20]
   1406c:	4240      	negs	r0, r0
   1406e:	61a0      	str	r0, [r4, #24]
   14070:	b139      	cbz	r1, 14082 <__swsetup_r+0x42>
   14072:	2000      	movs	r0, #0
   14074:	bd38      	pop	{r3, r4, r5, pc}
   14076:	0795      	lsls	r5, r2, #30
   14078:	bf58      	it	pl
   1407a:	6960      	ldrpl	r0, [r4, #20]
   1407c:	60a0      	str	r0, [r4, #8]
   1407e:	2900      	cmp	r1, #0
   14080:	d1f7      	bne.n	14072 <__swsetup_r+0x32>
   14082:	0612      	lsls	r2, r2, #24
   14084:	bf58      	it	pl
   14086:	4608      	movpl	r0, r1
   14088:	d5f4      	bpl.n	14074 <__swsetup_r+0x34>
   1408a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1408e:	81a3      	strh	r3, [r4, #12]
   14090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14094:	bd38      	pop	{r3, r4, r5, pc}
   14096:	06d1      	lsls	r1, r2, #27
   14098:	d52e      	bpl.n	140f8 <__swsetup_r+0xb8>
   1409a:	0752      	lsls	r2, r2, #29
   1409c:	d414      	bmi.n	140c8 <__swsetup_r+0x88>
   1409e:	6921      	ldr	r1, [r4, #16]
   140a0:	f043 0308 	orr.w	r3, r3, #8
   140a4:	81a3      	strh	r3, [r4, #12]
   140a6:	b29a      	uxth	r2, r3
   140a8:	2900      	cmp	r1, #0
   140aa:	d1d9      	bne.n	14060 <__swsetup_r+0x20>
   140ac:	f402 7020 	and.w	r0, r2, #640	; 0x280
   140b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   140b4:	d0d4      	beq.n	14060 <__swsetup_r+0x20>
   140b6:	4621      	mov	r1, r4
   140b8:	4628      	mov	r0, r5
   140ba:	f000 f827 	bl	1410c <__smakebuf_r>
   140be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   140c2:	6921      	ldr	r1, [r4, #16]
   140c4:	b29a      	uxth	r2, r3
   140c6:	e7cb      	b.n	14060 <__swsetup_r+0x20>
   140c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   140ca:	b151      	cbz	r1, 140e2 <__swsetup_r+0xa2>
   140cc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   140d0:	4291      	cmp	r1, r2
   140d2:	d004      	beq.n	140de <__swsetup_r+0x9e>
   140d4:	4628      	mov	r0, r5
   140d6:	f7fe fc7d 	bl	129d4 <_free_r>
   140da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   140de:	2200      	movs	r2, #0
   140e0:	6322      	str	r2, [r4, #48]	; 0x30
   140e2:	6921      	ldr	r1, [r4, #16]
   140e4:	2200      	movs	r2, #0
   140e6:	e9c4 1200 	strd	r1, r2, [r4]
   140ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   140ee:	e7d7      	b.n	140a0 <__swsetup_r+0x60>
   140f0:	4618      	mov	r0, r3
   140f2:	f7fe f92f 	bl	12354 <__sinit>
   140f6:	e7ac      	b.n	14052 <__swsetup_r+0x12>
   140f8:	2209      	movs	r2, #9
   140fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   140fe:	602a      	str	r2, [r5, #0]
   14100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14104:	81a3      	strh	r3, [r4, #12]
   14106:	bd38      	pop	{r3, r4, r5, pc}
   14108:	200038d0 	.word	0x200038d0

0001410c <__smakebuf_r>:
   1410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14110:	898b      	ldrh	r3, [r1, #12]
   14112:	460c      	mov	r4, r1
   14114:	0799      	lsls	r1, r3, #30
   14116:	b096      	sub	sp, #88	; 0x58
   14118:	d508      	bpl.n	1412c <__smakebuf_r+0x20>
   1411a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1411e:	2201      	movs	r2, #1
   14120:	e9c4 3204 	strd	r3, r2, [r4, #16]
   14124:	6023      	str	r3, [r4, #0]
   14126:	b016      	add	sp, #88	; 0x58
   14128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1412c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14130:	2900      	cmp	r1, #0
   14132:	4606      	mov	r6, r0
   14134:	db25      	blt.n	14182 <__smakebuf_r+0x76>
   14136:	466a      	mov	r2, sp
   14138:	f001 f840 	bl	151bc <_fstat_r>
   1413c:	2800      	cmp	r0, #0
   1413e:	db1f      	blt.n	14180 <__smakebuf_r+0x74>
   14140:	9d01      	ldr	r5, [sp, #4]
   14142:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   14146:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1414a:	fab5 f585 	clz	r5, r5
   1414e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14152:	096d      	lsrs	r5, r5, #5
   14154:	f44f 6700 	mov.w	r7, #2048	; 0x800
   14158:	4641      	mov	r1, r8
   1415a:	4630      	mov	r0, r6
   1415c:	f7fc ffea 	bl	11134 <_malloc_r>
   14160:	b1e0      	cbz	r0, 1419c <__smakebuf_r+0x90>
   14162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14166:	f8c4 8014 	str.w	r8, [r4, #20]
   1416a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1416e:	6020      	str	r0, [r4, #0]
   14170:	6120      	str	r0, [r4, #16]
   14172:	81a3      	strh	r3, [r4, #12]
   14174:	bb35      	cbnz	r5, 141c4 <__smakebuf_r+0xb8>
   14176:	433b      	orrs	r3, r7
   14178:	81a3      	strh	r3, [r4, #12]
   1417a:	b016      	add	sp, #88	; 0x58
   1417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14180:	89a3      	ldrh	r3, [r4, #12]
   14182:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   14186:	d019      	beq.n	141bc <__smakebuf_r+0xb0>
   14188:	f04f 0840 	mov.w	r8, #64	; 0x40
   1418c:	2500      	movs	r5, #0
   1418e:	4641      	mov	r1, r8
   14190:	4630      	mov	r0, r6
   14192:	462f      	mov	r7, r5
   14194:	f7fc ffce 	bl	11134 <_malloc_r>
   14198:	2800      	cmp	r0, #0
   1419a:	d1e2      	bne.n	14162 <__smakebuf_r+0x56>
   1419c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   141a0:	059a      	lsls	r2, r3, #22
   141a2:	d4c0      	bmi.n	14126 <__smakebuf_r+0x1a>
   141a4:	f023 0303 	bic.w	r3, r3, #3
   141a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   141ac:	f043 0302 	orr.w	r3, r3, #2
   141b0:	2101      	movs	r1, #1
   141b2:	e9c4 2104 	strd	r2, r1, [r4, #16]
   141b6:	81a3      	strh	r3, [r4, #12]
   141b8:	6022      	str	r2, [r4, #0]
   141ba:	e7b4      	b.n	14126 <__smakebuf_r+0x1a>
   141bc:	f44f 6880 	mov.w	r8, #1024	; 0x400
   141c0:	462f      	mov	r7, r5
   141c2:	e7c9      	b.n	14158 <__smakebuf_r+0x4c>
   141c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   141c8:	4630      	mov	r0, r6
   141ca:	f001 f80d 	bl	151e8 <_isatty_r>
   141ce:	b910      	cbnz	r0, 141d6 <__smakebuf_r+0xca>
   141d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   141d4:	e7cf      	b.n	14176 <__smakebuf_r+0x6a>
   141d6:	89a3      	ldrh	r3, [r4, #12]
   141d8:	f023 0303 	bic.w	r3, r3, #3
   141dc:	f043 0301 	orr.w	r3, r3, #1
   141e0:	b21b      	sxth	r3, r3
   141e2:	e7c8      	b.n	14176 <__smakebuf_r+0x6a>

000141e4 <_wcsrtombs_r>:
   141e4:	b510      	push	{r4, lr}
   141e6:	b082      	sub	sp, #8
   141e8:	9c04      	ldr	r4, [sp, #16]
   141ea:	e9cd 3400 	strd	r3, r4, [sp]
   141ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141f2:	f001 fb17 	bl	15824 <_wcsnrtombs_r>
   141f6:	b002      	add	sp, #8
   141f8:	bd10      	pop	{r4, pc}
   141fa:	bf00      	nop

000141fc <quorem>:
   141fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14200:	6903      	ldr	r3, [r0, #16]
   14202:	690c      	ldr	r4, [r1, #16]
   14204:	42a3      	cmp	r3, r4
   14206:	b083      	sub	sp, #12
   14208:	f2c0 8087 	blt.w	1431a <quorem+0x11e>
   1420c:	3c01      	subs	r4, #1
   1420e:	f101 0514 	add.w	r5, r1, #20
   14212:	00a3      	lsls	r3, r4, #2
   14214:	f100 0814 	add.w	r8, r0, #20
   14218:	9300      	str	r3, [sp, #0]
   1421a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1421e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   14222:	3301      	adds	r3, #1
   14224:	4681      	mov	r9, r0
   14226:	429a      	cmp	r2, r3
   14228:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1422c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   14230:	9001      	str	r0, [sp, #4]
   14232:	fbb2 f6f3 	udiv	r6, r2, r3
   14236:	d33b      	bcc.n	142b0 <quorem+0xb4>
   14238:	f04f 0c00 	mov.w	ip, #0
   1423c:	46ae      	mov	lr, r5
   1423e:	4640      	mov	r0, r8
   14240:	46e2      	mov	sl, ip
   14242:	4663      	mov	r3, ip
   14244:	f85e bb04 	ldr.w	fp, [lr], #4
   14248:	6802      	ldr	r2, [r0, #0]
   1424a:	fa1f fc8b 	uxth.w	ip, fp
   1424e:	fb06 330c 	mla	r3, r6, ip, r3
   14252:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   14256:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   1425a:	fb06 cc0b 	mla	ip, r6, fp, ip
   1425e:	b29b      	uxth	r3, r3
   14260:	ebaa 0303 	sub.w	r3, sl, r3
   14264:	fa1f fa8c 	uxth.w	sl, ip
   14268:	fa13 f382 	uxtah	r3, r3, r2
   1426c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   14270:	eb02 4223 	add.w	r2, r2, r3, asr #16
   14274:	b29b      	uxth	r3, r3
   14276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1427a:	4577      	cmp	r7, lr
   1427c:	f840 3b04 	str.w	r3, [r0], #4
   14280:	ea4f 4a22 	mov.w	sl, r2, asr #16
   14284:	ea4f 431c 	mov.w	r3, ip, lsr #16
   14288:	d2dc      	bcs.n	14244 <quorem+0x48>
   1428a:	9b00      	ldr	r3, [sp, #0]
   1428c:	f858 3003 	ldr.w	r3, [r8, r3]
   14290:	b973      	cbnz	r3, 142b0 <quorem+0xb4>
   14292:	9b01      	ldr	r3, [sp, #4]
   14294:	3b04      	subs	r3, #4
   14296:	4598      	cmp	r8, r3
   14298:	d304      	bcc.n	142a4 <quorem+0xa8>
   1429a:	e007      	b.n	142ac <quorem+0xb0>
   1429c:	4598      	cmp	r8, r3
   1429e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   142a2:	d203      	bcs.n	142ac <quorem+0xb0>
   142a4:	f853 2904 	ldr.w	r2, [r3], #-4
   142a8:	2a00      	cmp	r2, #0
   142aa:	d0f7      	beq.n	1429c <quorem+0xa0>
   142ac:	f8c9 4010 	str.w	r4, [r9, #16]
   142b0:	4648      	mov	r0, r9
   142b2:	f7fd fe3b 	bl	11f2c <__mcmp>
   142b6:	2800      	cmp	r0, #0
   142b8:	db2b      	blt.n	14312 <quorem+0x116>
   142ba:	3601      	adds	r6, #1
   142bc:	4641      	mov	r1, r8
   142be:	2300      	movs	r3, #0
   142c0:	f855 0b04 	ldr.w	r0, [r5], #4
   142c4:	f8d1 c000 	ldr.w	ip, [r1]
   142c8:	b282      	uxth	r2, r0
   142ca:	1a9a      	subs	r2, r3, r2
   142cc:	0c03      	lsrs	r3, r0, #16
   142ce:	fa12 f28c 	uxtah	r2, r2, ip
   142d2:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   142d6:	eb03 4322 	add.w	r3, r3, r2, asr #16
   142da:	b292      	uxth	r2, r2
   142dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   142e0:	42af      	cmp	r7, r5
   142e2:	f841 2b04 	str.w	r2, [r1], #4
   142e6:	ea4f 4323 	mov.w	r3, r3, asr #16
   142ea:	d2e9      	bcs.n	142c0 <quorem+0xc4>
   142ec:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   142f0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   142f4:	b96a      	cbnz	r2, 14312 <quorem+0x116>
   142f6:	3b04      	subs	r3, #4
   142f8:	4598      	cmp	r8, r3
   142fa:	d304      	bcc.n	14306 <quorem+0x10a>
   142fc:	e007      	b.n	1430e <quorem+0x112>
   142fe:	4598      	cmp	r8, r3
   14300:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   14304:	d203      	bcs.n	1430e <quorem+0x112>
   14306:	f853 2904 	ldr.w	r2, [r3], #-4
   1430a:	2a00      	cmp	r2, #0
   1430c:	d0f7      	beq.n	142fe <quorem+0x102>
   1430e:	f8c9 4010 	str.w	r4, [r9, #16]
   14312:	4630      	mov	r0, r6
   14314:	b003      	add	sp, #12
   14316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1431a:	2000      	movs	r0, #0
   1431c:	b003      	add	sp, #12
   1431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14322:	bf00      	nop
   14324:	0000      	movs	r0, r0
	...

00014328 <_dtoa_r>:
   14328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1432c:	ed2d 8b02 	vpush	{d8}
   14330:	b08f      	sub	sp, #60	; 0x3c
   14332:	ed8d 0b02 	vstr	d0, [sp, #8]
   14336:	9101      	str	r1, [sp, #4]
   14338:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1433a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   1433c:	9305      	str	r3, [sp, #20]
   1433e:	ec57 6b10 	vmov	r6, r7, d0
   14342:	4604      	mov	r4, r0
   14344:	4693      	mov	fp, r2
   14346:	b141      	cbz	r1, 1435a <_dtoa_r+0x32>
   14348:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   1434a:	604a      	str	r2, [r1, #4]
   1434c:	2301      	movs	r3, #1
   1434e:	4093      	lsls	r3, r2
   14350:	608b      	str	r3, [r1, #8]
   14352:	f7fd fb8b 	bl	11a6c <_Bfree>
   14356:	2300      	movs	r3, #0
   14358:	63a3      	str	r3, [r4, #56]	; 0x38
   1435a:	f1b7 0800 	subs.w	r8, r7, #0
   1435e:	bfb4      	ite	lt
   14360:	2301      	movlt	r3, #1
   14362:	2300      	movge	r3, #0
   14364:	602b      	str	r3, [r5, #0]
   14366:	4bbe      	ldr	r3, [pc, #760]	; (14660 <_dtoa_r+0x338>)
   14368:	bfbc      	itt	lt
   1436a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   1436e:	f8cd 800c 	strlt.w	r8, [sp, #12]
   14372:	ea33 0308 	bics.w	r3, r3, r8
   14376:	f000 809f 	beq.w	144b8 <_dtoa_r+0x190>
   1437a:	ed9d 8b02 	vldr	d8, [sp, #8]
   1437e:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14386:	d111      	bne.n	143ac <_dtoa_r+0x84>
   14388:	9a05      	ldr	r2, [sp, #20]
   1438a:	2301      	movs	r3, #1
   1438c:	6013      	str	r3, [r2, #0]
   1438e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14390:	2b00      	cmp	r3, #0
   14392:	f000 823f 	beq.w	14814 <_dtoa_r+0x4ec>
   14396:	4bb3      	ldr	r3, [pc, #716]	; (14664 <_dtoa_r+0x33c>)
   14398:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1439a:	6013      	str	r3, [r2, #0]
   1439c:	3b01      	subs	r3, #1
   1439e:	9300      	str	r3, [sp, #0]
   143a0:	9800      	ldr	r0, [sp, #0]
   143a2:	b00f      	add	sp, #60	; 0x3c
   143a4:	ecbd 8b02 	vpop	{d8}
   143a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ac:	aa0c      	add	r2, sp, #48	; 0x30
   143ae:	a90d      	add	r1, sp, #52	; 0x34
   143b0:	4620      	mov	r0, r4
   143b2:	eeb0 0b48 	vmov.f64	d0, d8
   143b6:	f7fd fe85 	bl	120c4 <__d2b>
   143ba:	ea5f 5318 	movs.w	r3, r8, lsr #20
   143be:	4605      	mov	r5, r0
   143c0:	f040 8092 	bne.w	144e8 <_dtoa_r+0x1c0>
   143c4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   143c8:	440b      	add	r3, r1
   143ca:	f203 4232 	addw	r2, r3, #1074	; 0x432
   143ce:	2a20      	cmp	r2, #32
   143d0:	f340 82fa 	ble.w	149c8 <_dtoa_r+0x6a0>
   143d4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   143d8:	fa08 f802 	lsl.w	r8, r8, r2
   143dc:	f203 4212 	addw	r2, r3, #1042	; 0x412
   143e0:	40d6      	lsrs	r6, r2
   143e2:	ea48 0206 	orr.w	r2, r8, r6
   143e6:	ee07 2a10 	vmov	s14, r2
   143ea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   143ee:	1e58      	subs	r0, r3, #1
   143f0:	ee17 6a90 	vmov	r6, s15
   143f4:	ec53 2b17 	vmov	r2, r3, d7
   143f8:	f04f 0a01 	mov.w	sl, #1
   143fc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   14400:	ed9f 3b91 	vldr	d3, [pc, #580]	; 14648 <_dtoa_r+0x320>
   14404:	ed9f 7b92 	vldr	d7, [pc, #584]	; 14650 <_dtoa_r+0x328>
   14408:	ed9f 5b93 	vldr	d5, [pc, #588]	; 14658 <_dtoa_r+0x330>
   1440c:	ee06 0a90 	vmov	s13, r0
   14410:	ec43 2b12 	vmov	d2, r2, r3
   14414:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   14418:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   1441c:	ee32 6b46 	vsub.f64	d6, d2, d6
   14420:	eea6 7b03 	vfma.f64	d7, d6, d3
   14424:	eea4 7b05 	vfma.f64	d7, d4, d5
   14428:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1442c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   14430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14434:	ee16 7a90 	vmov	r7, s13
   14438:	d508      	bpl.n	1444c <_dtoa_r+0x124>
   1443a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   1443e:	eeb4 6b47 	vcmp.f64	d6, d7
   14442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14446:	bf18      	it	ne
   14448:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   1444c:	2f16      	cmp	r7, #22
   1444e:	f200 8145 	bhi.w	146dc <_dtoa_r+0x3b4>
   14452:	4b85      	ldr	r3, [pc, #532]	; (14668 <_dtoa_r+0x340>)
   14454:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   14458:	ed93 7b00 	vldr	d7, [r3]
   1445c:	eeb4 8bc7 	vcmpe.f64	d8, d7
   14460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14464:	d557      	bpl.n	14516 <_dtoa_r+0x1ee>
   14466:	1a09      	subs	r1, r1, r0
   14468:	2300      	movs	r3, #0
   1446a:	f1b1 0801 	subs.w	r8, r1, #1
   1446e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   14472:	930a      	str	r3, [sp, #40]	; 0x28
   14474:	f100 8139 	bmi.w	146ea <_dtoa_r+0x3c2>
   14478:	2300      	movs	r3, #0
   1447a:	9306      	str	r3, [sp, #24]
   1447c:	2f00      	cmp	r7, #0
   1447e:	da52      	bge.n	14526 <_dtoa_r+0x1fe>
   14480:	9b06      	ldr	r3, [sp, #24]
   14482:	9704      	str	r7, [sp, #16]
   14484:	1bdb      	subs	r3, r3, r7
   14486:	9306      	str	r3, [sp, #24]
   14488:	427b      	negs	r3, r7
   1448a:	9308      	str	r3, [sp, #32]
   1448c:	9b01      	ldr	r3, [sp, #4]
   1448e:	2b09      	cmp	r3, #9
   14490:	f04f 0700 	mov.w	r7, #0
   14494:	d84e      	bhi.n	14534 <_dtoa_r+0x20c>
   14496:	2b05      	cmp	r3, #5
   14498:	f340 829d 	ble.w	149d6 <_dtoa_r+0x6ae>
   1449c:	3b04      	subs	r3, #4
   1449e:	9301      	str	r3, [sp, #4]
   144a0:	2600      	movs	r6, #0
   144a2:	9b01      	ldr	r3, [sp, #4]
   144a4:	1e9a      	subs	r2, r3, #2
   144a6:	2a03      	cmp	r2, #3
   144a8:	f200 8125 	bhi.w	146f6 <_dtoa_r+0x3ce>
   144ac:	e8df f012 	tbh	[pc, r2, lsl #1]
   144b0:	03a703aa 	.word	0x03a703aa
   144b4:	037e039d 	.word	0x037e039d
   144b8:	9a05      	ldr	r2, [sp, #20]
   144ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
   144be:	f242 730f 	movw	r3, #9999	; 0x270f
   144c2:	ea58 0806 	orrs.w	r8, r8, r6
   144c6:	6013      	str	r3, [r2, #0]
   144c8:	d11e      	bne.n	14508 <_dtoa_r+0x1e0>
   144ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   144cc:	2b00      	cmp	r3, #0
   144ce:	f000 8591 	beq.w	14ff4 <_dtoa_r+0xccc>
   144d2:	4b66      	ldr	r3, [pc, #408]	; (1466c <_dtoa_r+0x344>)
   144d4:	9300      	str	r3, [sp, #0]
   144d6:	3308      	adds	r3, #8
   144d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   144da:	9800      	ldr	r0, [sp, #0]
   144dc:	6013      	str	r3, [r2, #0]
   144de:	b00f      	add	sp, #60	; 0x3c
   144e0:	ecbd 8b02 	vpop	{d8}
   144e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e8:	ee18 6a90 	vmov	r6, s17
   144ec:	f3c6 0613 	ubfx	r6, r6, #0, #20
   144f0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   144f4:	ec53 2b18 	vmov	r2, r3, d8
   144f8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   144fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   144fe:	f04f 0a00 	mov.w	sl, #0
   14502:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14506:	e77b      	b.n	14400 <_dtoa_r+0xd8>
   14508:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1450a:	2b00      	cmp	r3, #0
   1450c:	f040 833b 	bne.w	14b86 <_dtoa_r+0x85e>
   14510:	4b57      	ldr	r3, [pc, #348]	; (14670 <_dtoa_r+0x348>)
   14512:	9300      	str	r3, [sp, #0]
   14514:	e744      	b.n	143a0 <_dtoa_r+0x78>
   14516:	1a09      	subs	r1, r1, r0
   14518:	2300      	movs	r3, #0
   1451a:	f1b1 0801 	subs.w	r8, r1, #1
   1451e:	930a      	str	r3, [sp, #40]	; 0x28
   14520:	f100 80e3 	bmi.w	146ea <_dtoa_r+0x3c2>
   14524:	9306      	str	r3, [sp, #24]
   14526:	2300      	movs	r3, #0
   14528:	9308      	str	r3, [sp, #32]
   1452a:	9b01      	ldr	r3, [sp, #4]
   1452c:	9704      	str	r7, [sp, #16]
   1452e:	2b09      	cmp	r3, #9
   14530:	44b8      	add	r8, r7
   14532:	d9b0      	bls.n	14496 <_dtoa_r+0x16e>
   14534:	2300      	movs	r3, #0
   14536:	2601      	movs	r6, #1
   14538:	9301      	str	r3, [sp, #4]
   1453a:	9607      	str	r6, [sp, #28]
   1453c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14540:	469b      	mov	fp, r3
   14542:	2100      	movs	r1, #0
   14544:	63e1      	str	r1, [r4, #60]	; 0x3c
   14546:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1454a:	4620      	mov	r0, r4
   1454c:	f7fd fa68 	bl	11a20 <_Balloc>
   14550:	9000      	str	r0, [sp, #0]
   14552:	2800      	cmp	r0, #0
   14554:	f000 8540 	beq.w	14fd8 <_dtoa_r+0xcb0>
   14558:	9b00      	ldr	r3, [sp, #0]
   1455a:	63a3      	str	r3, [r4, #56]	; 0x38
   1455c:	f1b9 0f0e 	cmp.w	r9, #14
   14560:	f200 80dc 	bhi.w	1471c <_dtoa_r+0x3f4>
   14564:	2e00      	cmp	r6, #0
   14566:	f000 80d9 	beq.w	1471c <_dtoa_r+0x3f4>
   1456a:	9b04      	ldr	r3, [sp, #16]
   1456c:	2b00      	cmp	r3, #0
   1456e:	f340 83de 	ble.w	14d2e <_dtoa_r+0xa06>
   14572:	4a3d      	ldr	r2, [pc, #244]	; (14668 <_dtoa_r+0x340>)
   14574:	f003 010f 	and.w	r1, r3, #15
   14578:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1457c:	ed92 7b00 	vldr	d7, [r2]
   14580:	111a      	asrs	r2, r3, #4
   14582:	05db      	lsls	r3, r3, #23
   14584:	f140 8382 	bpl.w	14c8c <_dtoa_r+0x964>
   14588:	493a      	ldr	r1, [pc, #232]	; (14674 <_dtoa_r+0x34c>)
   1458a:	ed91 6b08 	vldr	d6, [r1, #32]
   1458e:	f002 020f 	and.w	r2, r2, #15
   14592:	2003      	movs	r0, #3
   14594:	ee88 5b06 	vdiv.f64	d5, d8, d6
   14598:	b15a      	cbz	r2, 145b2 <_dtoa_r+0x28a>
   1459a:	4936      	ldr	r1, [pc, #216]	; (14674 <_dtoa_r+0x34c>)
   1459c:	07d6      	lsls	r6, r2, #31
   1459e:	d504      	bpl.n	145aa <_dtoa_r+0x282>
   145a0:	ed91 6b00 	vldr	d6, [r1]
   145a4:	3001      	adds	r0, #1
   145a6:	ee27 7b06 	vmul.f64	d7, d7, d6
   145aa:	1052      	asrs	r2, r2, #1
   145ac:	f101 0108 	add.w	r1, r1, #8
   145b0:	d1f4      	bne.n	1459c <_dtoa_r+0x274>
   145b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
   145b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145b8:	b13b      	cbz	r3, 145ca <_dtoa_r+0x2a2>
   145ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   145be:	eeb4 6bc7 	vcmpe.f64	d6, d7
   145c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   145c6:	f100 84ae 	bmi.w	14f26 <_dtoa_r+0xbfe>
   145ca:	ee07 0a90 	vmov	s15, r0
   145ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   145d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   145d6:	eea5 7b06 	vfma.f64	d7, d5, d6
   145da:	ee17 2a90 	vmov	r2, s15
   145de:	ec51 0b17 	vmov	r0, r1, d7
   145e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   145e6:	f1b9 0f00 	cmp.w	r9, #0
   145ea:	f000 8388 	beq.w	14cfe <_dtoa_r+0x9d6>
   145ee:	9e04      	ldr	r6, [sp, #16]
   145f0:	464a      	mov	r2, r9
   145f2:	9b07      	ldr	r3, [sp, #28]
   145f4:	2b00      	cmp	r3, #0
   145f6:	f000 8447 	beq.w	14e88 <_dtoa_r+0xb60>
   145fa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   145fe:	4b1a      	ldr	r3, [pc, #104]	; (14668 <_dtoa_r+0x340>)
   14600:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   14604:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14608:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   1460c:	ee36 7b47 	vsub.f64	d7, d6, d7
   14610:	ed1c 6b02 	vldr	d6, [ip, #-8]
   14614:	ee83 5b06 	vdiv.f64	d5, d3, d6
   14618:	ec41 0b16 	vmov	d6, r0, r1
   1461c:	ee14 0a90 	vmov	r0, s9
   14620:	ee35 5b46 	vsub.f64	d5, d5, d6
   14624:	9900      	ldr	r1, [sp, #0]
   14626:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1462a:	3030      	adds	r0, #48	; 0x30
   1462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14630:	f801 0b01 	strb.w	r0, [r1], #1
   14634:	f300 84ac 	bgt.w	14f90 <_dtoa_r+0xc68>
   14638:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   1463c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14640:	f04f 0c00 	mov.w	ip, #0
   14644:	e031      	b.n	146aa <_dtoa_r+0x382>
   14646:	bf00      	nop
   14648:	636f4361 	.word	0x636f4361
   1464c:	3fd287a7 	.word	0x3fd287a7
   14650:	8b60c8b3 	.word	0x8b60c8b3
   14654:	3fc68a28 	.word	0x3fc68a28
   14658:	509f79fb 	.word	0x509f79fb
   1465c:	3fd34413 	.word	0x3fd34413
   14660:	7ff00000 	.word	0x7ff00000
   14664:	20002b99 	.word	0x20002b99
   14668:	20000b58 	.word	0x20000b58
   1466c:	2000275c 	.word	0x2000275c
   14670:	20002768 	.word	0x20002768
   14674:	20000b30 	.word	0x20000b30
   14678:	f10c 0c01 	add.w	ip, ip, #1
   1467c:	4594      	cmp	ip, r2
   1467e:	da4d      	bge.n	1471c <_dtoa_r+0x3f4>
   14680:	ee27 7b04 	vmul.f64	d7, d7, d4
   14684:	ee25 5b04 	vmul.f64	d5, d5, d4
   14688:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1468c:	ee16 3a90 	vmov	r3, s13
   14690:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   14694:	3330      	adds	r3, #48	; 0x30
   14696:	ee37 7b43 	vsub.f64	d7, d7, d3
   1469a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146a2:	f801 3b01 	strb.w	r3, [r1], #1
   146a6:	f100 8473 	bmi.w	14f90 <_dtoa_r+0xc68>
   146aa:	ee32 6b47 	vsub.f64	d6, d2, d7
   146ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
   146b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146b6:	d5df      	bpl.n	14678 <_dtoa_r+0x350>
   146b8:	9a00      	ldr	r2, [sp, #0]
   146ba:	9604      	str	r6, [sp, #16]
   146bc:	e002      	b.n	146c4 <_dtoa_r+0x39c>
   146be:	428a      	cmp	r2, r1
   146c0:	f000 8450 	beq.w	14f64 <_dtoa_r+0xc3c>
   146c4:	4689      	mov	r9, r1
   146c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   146ca:	2b39      	cmp	r3, #57	; 0x39
   146cc:	d0f7      	beq.n	146be <_dtoa_r+0x396>
   146ce:	3301      	adds	r3, #1
   146d0:	b2db      	uxtb	r3, r3
   146d2:	700b      	strb	r3, [r1, #0]
   146d4:	9b04      	ldr	r3, [sp, #16]
   146d6:	3301      	adds	r3, #1
   146d8:	9304      	str	r3, [sp, #16]
   146da:	e155      	b.n	14988 <_dtoa_r+0x660>
   146dc:	1a09      	subs	r1, r1, r0
   146de:	2301      	movs	r3, #1
   146e0:	f1b1 0801 	subs.w	r8, r1, #1
   146e4:	930a      	str	r3, [sp, #40]	; 0x28
   146e6:	f57f aec7 	bpl.w	14478 <_dtoa_r+0x150>
   146ea:	f1c1 0301 	rsb	r3, r1, #1
   146ee:	9306      	str	r3, [sp, #24]
   146f0:	f04f 0800 	mov.w	r8, #0
   146f4:	e6c2      	b.n	1447c <_dtoa_r+0x154>
   146f6:	2600      	movs	r6, #0
   146f8:	63e6      	str	r6, [r4, #60]	; 0x3c
   146fa:	4631      	mov	r1, r6
   146fc:	4620      	mov	r0, r4
   146fe:	f7fd f98f 	bl	11a20 <_Balloc>
   14702:	9000      	str	r0, [sp, #0]
   14704:	2800      	cmp	r0, #0
   14706:	f000 8467 	beq.w	14fd8 <_dtoa_r+0xcb0>
   1470a:	9b00      	ldr	r3, [sp, #0]
   1470c:	63a3      	str	r3, [r4, #56]	; 0x38
   1470e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14712:	930b      	str	r3, [sp, #44]	; 0x2c
   14714:	4699      	mov	r9, r3
   14716:	2301      	movs	r3, #1
   14718:	46b3      	mov	fp, r6
   1471a:	9307      	str	r3, [sp, #28]
   1471c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1471e:	2a00      	cmp	r2, #0
   14720:	db55      	blt.n	147ce <_dtoa_r+0x4a6>
   14722:	9904      	ldr	r1, [sp, #16]
   14724:	290e      	cmp	r1, #14
   14726:	dc52      	bgt.n	147ce <_dtoa_r+0x4a6>
   14728:	4bb7      	ldr	r3, [pc, #732]	; (14a08 <_dtoa_r+0x6e0>)
   1472a:	f1bb 0f00 	cmp.w	fp, #0
   1472e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   14732:	ed93 6b00 	vldr	d6, [r3]
   14736:	da15      	bge.n	14764 <_dtoa_r+0x43c>
   14738:	f1b9 0f00 	cmp.w	r9, #0
   1473c:	dc12      	bgt.n	14764 <_dtoa_r+0x43c>
   1473e:	f040 82f2 	bne.w	14d26 <_dtoa_r+0x9fe>
   14742:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14746:	ee26 7b07 	vmul.f64	d7, d6, d7
   1474a:	eeb4 8bc7 	vcmpe.f64	d8, d7
   1474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14752:	46ca      	mov	sl, r9
   14754:	464e      	mov	r6, r9
   14756:	f200 826d 	bhi.w	14c34 <_dtoa_r+0x90c>
   1475a:	f8dd 8000 	ldr.w	r8, [sp]
   1475e:	ea6f 0b0b 	mvn.w	fp, fp
   14762:	e270      	b.n	14c46 <_dtoa_r+0x91e>
   14764:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14768:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1476c:	9900      	ldr	r1, [sp, #0]
   1476e:	ee17 3a10 	vmov	r3, s14
   14772:	f1b9 0f01 	cmp.w	r9, #1
   14776:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1477a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1477e:	f801 3b01 	strb.w	r3, [r1], #1
   14782:	eea5 8b46 	vfms.f64	d8, d5, d6
   14786:	f000 8334 	beq.w	14df2 <_dtoa_r+0xaca>
   1478a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1478e:	2301      	movs	r3, #1
   14790:	e011      	b.n	147b6 <_dtoa_r+0x48e>
   14792:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14796:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1479a:	3301      	adds	r3, #1
   1479c:	ee17 2a10 	vmov	r2, s14
   147a0:	454b      	cmp	r3, r9
   147a2:	f102 0230 	add.w	r2, r2, #48	; 0x30
   147a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   147aa:	f801 2b01 	strb.w	r2, [r1], #1
   147ae:	eea5 8b46 	vfms.f64	d8, d5, d6
   147b2:	f000 831e 	beq.w	14df2 <_dtoa_r+0xaca>
   147b6:	ee28 8b04 	vmul.f64	d8, d8, d4
   147ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
   147be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   147c2:	d1e6      	bne.n	14792 <_dtoa_r+0x46a>
   147c4:	9b04      	ldr	r3, [sp, #16]
   147c6:	3301      	adds	r3, #1
   147c8:	9304      	str	r3, [sp, #16]
   147ca:	4689      	mov	r9, r1
   147cc:	e0dc      	b.n	14988 <_dtoa_r+0x660>
   147ce:	9b07      	ldr	r3, [sp, #28]
   147d0:	b343      	cbz	r3, 14824 <_dtoa_r+0x4fc>
   147d2:	9b01      	ldr	r3, [sp, #4]
   147d4:	2b01      	cmp	r3, #1
   147d6:	f340 8276 	ble.w	14cc6 <_dtoa_r+0x99e>
   147da:	9b08      	ldr	r3, [sp, #32]
   147dc:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   147e0:	4553      	cmp	r3, sl
   147e2:	f280 823f 	bge.w	14c64 <_dtoa_r+0x93c>
   147e6:	9b08      	ldr	r3, [sp, #32]
   147e8:	f8cd a020 	str.w	sl, [sp, #32]
   147ec:	ebaa 0203 	sub.w	r2, sl, r3
   147f0:	4417      	add	r7, r2
   147f2:	f04f 0a00 	mov.w	sl, #0
   147f6:	f1b9 0f00 	cmp.w	r9, #0
   147fa:	f2c0 8325 	blt.w	14e48 <_dtoa_r+0xb20>
   147fe:	9b06      	ldr	r3, [sp, #24]
   14800:	9309      	str	r3, [sp, #36]	; 0x24
   14802:	444b      	add	r3, r9
   14804:	44c8      	add	r8, r9
   14806:	9306      	str	r3, [sp, #24]
   14808:	2101      	movs	r1, #1
   1480a:	4620      	mov	r0, r4
   1480c:	f7fd f9da 	bl	11bc4 <__i2b>
   14810:	4606      	mov	r6, r0
   14812:	e00c      	b.n	1482e <_dtoa_r+0x506>
   14814:	4b7d      	ldr	r3, [pc, #500]	; (14a0c <_dtoa_r+0x6e4>)
   14816:	9300      	str	r3, [sp, #0]
   14818:	9800      	ldr	r0, [sp, #0]
   1481a:	b00f      	add	sp, #60	; 0x3c
   1481c:	ecbd 8b02 	vpop	{d8}
   14820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14824:	9b06      	ldr	r3, [sp, #24]
   14826:	f8dd a020 	ldr.w	sl, [sp, #32]
   1482a:	9e07      	ldr	r6, [sp, #28]
   1482c:	9309      	str	r3, [sp, #36]	; 0x24
   1482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14830:	b16b      	cbz	r3, 1484e <_dtoa_r+0x526>
   14832:	f1b8 0f00 	cmp.w	r8, #0
   14836:	dd0a      	ble.n	1484e <_dtoa_r+0x526>
   14838:	4543      	cmp	r3, r8
   1483a:	9906      	ldr	r1, [sp, #24]
   1483c:	461a      	mov	r2, r3
   1483e:	bfa8      	it	ge
   14840:	4642      	movge	r2, r8
   14842:	1a89      	subs	r1, r1, r2
   14844:	1a9b      	subs	r3, r3, r2
   14846:	9106      	str	r1, [sp, #24]
   14848:	9309      	str	r3, [sp, #36]	; 0x24
   1484a:	eba8 0802 	sub.w	r8, r8, r2
   1484e:	9b08      	ldr	r3, [sp, #32]
   14850:	b163      	cbz	r3, 1486c <_dtoa_r+0x544>
   14852:	9b07      	ldr	r3, [sp, #28]
   14854:	2b00      	cmp	r3, #0
   14856:	f000 82a7 	beq.w	14da8 <_dtoa_r+0xa80>
   1485a:	f1ba 0f00 	cmp.w	sl, #0
   1485e:	f300 8204 	bgt.w	14c6a <_dtoa_r+0x942>
   14862:	9b08      	ldr	r3, [sp, #32]
   14864:	ebb3 020a 	subs.w	r2, r3, sl
   14868:	f040 82ff 	bne.w	14e6a <_dtoa_r+0xb42>
   1486c:	2101      	movs	r1, #1
   1486e:	4620      	mov	r0, r4
   14870:	f7fd f9a8 	bl	11bc4 <__i2b>
   14874:	2f00      	cmp	r7, #0
   14876:	4682      	mov	sl, r0
   14878:	f300 80af 	bgt.w	149da <_dtoa_r+0x6b2>
   1487c:	9b01      	ldr	r3, [sp, #4]
   1487e:	2b01      	cmp	r3, #1
   14880:	f340 8187 	ble.w	14b92 <_dtoa_r+0x86a>
   14884:	2300      	movs	r3, #0
   14886:	9308      	str	r3, [sp, #32]
   14888:	2001      	movs	r0, #1
   1488a:	2f00      	cmp	r7, #0
   1488c:	f040 80b1 	bne.w	149f2 <_dtoa_r+0x6ca>
   14890:	4440      	add	r0, r8
   14892:	f010 001f 	ands.w	r0, r0, #31
   14896:	f000 817a 	beq.w	14b8e <_dtoa_r+0x866>
   1489a:	f1c0 0220 	rsb	r2, r0, #32
   1489e:	2a04      	cmp	r2, #4
   148a0:	f300 8088 	bgt.w	149b4 <_dtoa_r+0x68c>
   148a4:	f040 81f6 	bne.w	14c94 <_dtoa_r+0x96c>
   148a8:	9b06      	ldr	r3, [sp, #24]
   148aa:	2b00      	cmp	r3, #0
   148ac:	dd05      	ble.n	148ba <_dtoa_r+0x592>
   148ae:	4629      	mov	r1, r5
   148b0:	461a      	mov	r2, r3
   148b2:	4620      	mov	r0, r4
   148b4:	f7fd fac2 	bl	11e3c <__lshift>
   148b8:	4605      	mov	r5, r0
   148ba:	f1b8 0f00 	cmp.w	r8, #0
   148be:	dd05      	ble.n	148cc <_dtoa_r+0x5a4>
   148c0:	4651      	mov	r1, sl
   148c2:	4642      	mov	r2, r8
   148c4:	4620      	mov	r0, r4
   148c6:	f7fd fab9 	bl	11e3c <__lshift>
   148ca:	4682      	mov	sl, r0
   148cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   148ce:	2b00      	cmp	r3, #0
   148d0:	f040 813f 	bne.w	14b52 <_dtoa_r+0x82a>
   148d4:	f1b9 0f00 	cmp.w	r9, #0
   148d8:	f340 8125 	ble.w	14b26 <_dtoa_r+0x7fe>
   148dc:	9b07      	ldr	r3, [sp, #28]
   148de:	2b00      	cmp	r3, #0
   148e0:	f040 80a3 	bne.w	14a2a <_dtoa_r+0x702>
   148e4:	9b04      	ldr	r3, [sp, #16]
   148e6:	3301      	adds	r3, #1
   148e8:	9304      	str	r3, [sp, #16]
   148ea:	f8dd 8000 	ldr.w	r8, [sp]
   148ee:	2701      	movs	r7, #1
   148f0:	e007      	b.n	14902 <_dtoa_r+0x5da>
   148f2:	4629      	mov	r1, r5
   148f4:	2300      	movs	r3, #0
   148f6:	220a      	movs	r2, #10
   148f8:	4620      	mov	r0, r4
   148fa:	f7fd f8c1 	bl	11a80 <__multadd>
   148fe:	3701      	adds	r7, #1
   14900:	4605      	mov	r5, r0
   14902:	4651      	mov	r1, sl
   14904:	4628      	mov	r0, r5
   14906:	f7ff fc79 	bl	141fc <quorem>
   1490a:	45b9      	cmp	r9, r7
   1490c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   14910:	f808 0b01 	strb.w	r0, [r8], #1
   14914:	dced      	bgt.n	148f2 <_dtoa_r+0x5ca>
   14916:	f1b9 0f00 	cmp.w	r9, #0
   1491a:	9a00      	ldr	r2, [sp, #0]
   1491c:	bfcc      	ite	gt
   1491e:	46cb      	movgt	fp, r9
   14920:	f04f 0b01 	movle.w	fp, #1
   14924:	4603      	mov	r3, r0
   14926:	4493      	add	fp, r2
   14928:	2700      	movs	r7, #0
   1492a:	4629      	mov	r1, r5
   1492c:	2201      	movs	r2, #1
   1492e:	4620      	mov	r0, r4
   14930:	9301      	str	r3, [sp, #4]
   14932:	f7fd fa83 	bl	11e3c <__lshift>
   14936:	4651      	mov	r1, sl
   14938:	4605      	mov	r5, r0
   1493a:	f7fd faf7 	bl	11f2c <__mcmp>
   1493e:	2800      	cmp	r0, #0
   14940:	f340 81af 	ble.w	14ca2 <_dtoa_r+0x97a>
   14944:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   14948:	9a00      	ldr	r2, [sp, #0]
   1494a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1494e:	e004      	b.n	1495a <_dtoa_r+0x632>
   14950:	455a      	cmp	r2, fp
   14952:	f000 81b1 	beq.w	14cb8 <_dtoa_r+0x990>
   14956:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1495a:	2b39      	cmp	r3, #57	; 0x39
   1495c:	f10b 0901 	add.w	r9, fp, #1
   14960:	d0f6      	beq.n	14950 <_dtoa_r+0x628>
   14962:	3301      	adds	r3, #1
   14964:	f88b 3000 	strb.w	r3, [fp]
   14968:	4651      	mov	r1, sl
   1496a:	4620      	mov	r0, r4
   1496c:	f7fd f87e 	bl	11a6c <_Bfree>
   14970:	b156      	cbz	r6, 14988 <_dtoa_r+0x660>
   14972:	b12f      	cbz	r7, 14980 <_dtoa_r+0x658>
   14974:	42b7      	cmp	r7, r6
   14976:	d003      	beq.n	14980 <_dtoa_r+0x658>
   14978:	4639      	mov	r1, r7
   1497a:	4620      	mov	r0, r4
   1497c:	f7fd f876 	bl	11a6c <_Bfree>
   14980:	4631      	mov	r1, r6
   14982:	4620      	mov	r0, r4
   14984:	f7fd f872 	bl	11a6c <_Bfree>
   14988:	4629      	mov	r1, r5
   1498a:	4620      	mov	r0, r4
   1498c:	f7fd f86e 	bl	11a6c <_Bfree>
   14990:	2300      	movs	r3, #0
   14992:	f889 3000 	strb.w	r3, [r9]
   14996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1499a:	601a      	str	r2, [r3, #0]
   1499c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1499e:	2b00      	cmp	r3, #0
   149a0:	f43f acfe 	beq.w	143a0 <_dtoa_r+0x78>
   149a4:	9800      	ldr	r0, [sp, #0]
   149a6:	f8c3 9000 	str.w	r9, [r3]
   149aa:	b00f      	add	sp, #60	; 0x3c
   149ac:	ecbd 8b02 	vpop	{d8}
   149b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149b4:	f1c0 001c 	rsb	r0, r0, #28
   149b8:	9b06      	ldr	r3, [sp, #24]
   149ba:	4403      	add	r3, r0
   149bc:	9306      	str	r3, [sp, #24]
   149be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   149c0:	4403      	add	r3, r0
   149c2:	9309      	str	r3, [sp, #36]	; 0x24
   149c4:	4480      	add	r8, r0
   149c6:	e76f      	b.n	148a8 <_dtoa_r+0x580>
   149c8:	f1c2 0220 	rsb	r2, r2, #32
   149cc:	fa06 f202 	lsl.w	r2, r6, r2
   149d0:	ee07 2a10 	vmov	s14, r2
   149d4:	e509      	b.n	143ea <_dtoa_r+0xc2>
   149d6:	2601      	movs	r6, #1
   149d8:	e563      	b.n	144a2 <_dtoa_r+0x17a>
   149da:	4601      	mov	r1, r0
   149dc:	463a      	mov	r2, r7
   149de:	4620      	mov	r0, r4
   149e0:	f7fd f9cc 	bl	11d7c <__pow5mult>
   149e4:	9b01      	ldr	r3, [sp, #4]
   149e6:	2b01      	cmp	r3, #1
   149e8:	4682      	mov	sl, r0
   149ea:	f340 81c5 	ble.w	14d78 <_dtoa_r+0xa50>
   149ee:	2300      	movs	r3, #0
   149f0:	9308      	str	r3, [sp, #32]
   149f2:	f8da 2010 	ldr.w	r2, [sl, #16]
   149f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   149fa:	6910      	ldr	r0, [r2, #16]
   149fc:	f7fd f892 	bl	11b24 <__hi0bits>
   14a00:	f1c0 0020 	rsb	r0, r0, #32
   14a04:	e744      	b.n	14890 <_dtoa_r+0x568>
   14a06:	bf00      	nop
   14a08:	20000b58 	.word	0x20000b58
   14a0c:	20002b98 	.word	0x20002b98
   14a10:	4631      	mov	r1, r6
   14a12:	2300      	movs	r3, #0
   14a14:	220a      	movs	r2, #10
   14a16:	4620      	mov	r0, r4
   14a18:	f7fd f832 	bl	11a80 <__multadd>
   14a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a1e:	2b00      	cmp	r3, #0
   14a20:	4606      	mov	r6, r0
   14a22:	f340 82ce 	ble.w	14fc2 <_dtoa_r+0xc9a>
   14a26:	9704      	str	r7, [sp, #16]
   14a28:	4699      	mov	r9, r3
   14a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a2c:	2b00      	cmp	r3, #0
   14a2e:	dd05      	ble.n	14a3c <_dtoa_r+0x714>
   14a30:	4631      	mov	r1, r6
   14a32:	461a      	mov	r2, r3
   14a34:	4620      	mov	r0, r4
   14a36:	f7fd fa01 	bl	11e3c <__lshift>
   14a3a:	4606      	mov	r6, r0
   14a3c:	9b08      	ldr	r3, [sp, #32]
   14a3e:	2b00      	cmp	r3, #0
   14a40:	f040 81eb 	bne.w	14e1a <_dtoa_r+0xaf2>
   14a44:	46b0      	mov	r8, r6
   14a46:	9b02      	ldr	r3, [sp, #8]
   14a48:	9f00      	ldr	r7, [sp, #0]
   14a4a:	f003 0201 	and.w	r2, r3, #1
   14a4e:	1e7b      	subs	r3, r7, #1
   14a50:	444b      	add	r3, r9
   14a52:	9308      	str	r3, [sp, #32]
   14a54:	9b01      	ldr	r3, [sp, #4]
   14a56:	920a      	str	r2, [sp, #40]	; 0x28
   14a58:	4313      	orrs	r3, r2
   14a5a:	9309      	str	r3, [sp, #36]	; 0x24
   14a5c:	4651      	mov	r1, sl
   14a5e:	4628      	mov	r0, r5
   14a60:	f7ff fbcc 	bl	141fc <quorem>
   14a64:	4631      	mov	r1, r6
   14a66:	4683      	mov	fp, r0
   14a68:	4628      	mov	r0, r5
   14a6a:	f7fd fa5f 	bl	11f2c <__mcmp>
   14a6e:	4642      	mov	r2, r8
   14a70:	4651      	mov	r1, sl
   14a72:	4681      	mov	r9, r0
   14a74:	4620      	mov	r0, r4
   14a76:	f7fd fa7b 	bl	11f70 <__mdiff>
   14a7a:	68c2      	ldr	r2, [r0, #12]
   14a7c:	4601      	mov	r1, r0
   14a7e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   14a82:	2a00      	cmp	r2, #0
   14a84:	d142      	bne.n	14b0c <_dtoa_r+0x7e4>
   14a86:	e9cd 0306 	strd	r0, r3, [sp, #24]
   14a8a:	4628      	mov	r0, r5
   14a8c:	f7fd fa4e 	bl	11f2c <__mcmp>
   14a90:	9906      	ldr	r1, [sp, #24]
   14a92:	9002      	str	r0, [sp, #8]
   14a94:	4620      	mov	r0, r4
   14a96:	f7fc ffe9 	bl	11a6c <_Bfree>
   14a9a:	9a02      	ldr	r2, [sp, #8]
   14a9c:	9b07      	ldr	r3, [sp, #28]
   14a9e:	b91a      	cbnz	r2, 14aa8 <_dtoa_r+0x780>
   14aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
   14aa2:	2900      	cmp	r1, #0
   14aa4:	f000 827e 	beq.w	14fa4 <_dtoa_r+0xc7c>
   14aa8:	f1b9 0f00 	cmp.w	r9, #0
   14aac:	f2c0 8183 	blt.w	14db6 <_dtoa_r+0xa8e>
   14ab0:	9901      	ldr	r1, [sp, #4]
   14ab2:	ea49 0901 	orr.w	r9, r9, r1
   14ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
   14ab8:	ea51 0909 	orrs.w	r9, r1, r9
   14abc:	f000 817b 	beq.w	14db6 <_dtoa_r+0xa8e>
   14ac0:	2a00      	cmp	r2, #0
   14ac2:	f300 81c6 	bgt.w	14e52 <_dtoa_r+0xb2a>
   14ac6:	9a08      	ldr	r2, [sp, #32]
   14ac8:	703b      	strb	r3, [r7, #0]
   14aca:	f107 0901 	add.w	r9, r7, #1
   14ace:	4297      	cmp	r7, r2
   14ad0:	46cb      	mov	fp, r9
   14ad2:	f000 81c4 	beq.w	14e5e <_dtoa_r+0xb36>
   14ad6:	4629      	mov	r1, r5
   14ad8:	2300      	movs	r3, #0
   14ada:	220a      	movs	r2, #10
   14adc:	4620      	mov	r0, r4
   14ade:	f7fc ffcf 	bl	11a80 <__multadd>
   14ae2:	4546      	cmp	r6, r8
   14ae4:	4605      	mov	r5, r0
   14ae6:	4631      	mov	r1, r6
   14ae8:	f04f 0300 	mov.w	r3, #0
   14aec:	f04f 020a 	mov.w	r2, #10
   14af0:	4620      	mov	r0, r4
   14af2:	d012      	beq.n	14b1a <_dtoa_r+0x7f2>
   14af4:	f7fc ffc4 	bl	11a80 <__multadd>
   14af8:	4641      	mov	r1, r8
   14afa:	4606      	mov	r6, r0
   14afc:	2300      	movs	r3, #0
   14afe:	220a      	movs	r2, #10
   14b00:	4620      	mov	r0, r4
   14b02:	f7fc ffbd 	bl	11a80 <__multadd>
   14b06:	464f      	mov	r7, r9
   14b08:	4680      	mov	r8, r0
   14b0a:	e7a7      	b.n	14a5c <_dtoa_r+0x734>
   14b0c:	4620      	mov	r0, r4
   14b0e:	9302      	str	r3, [sp, #8]
   14b10:	f7fc ffac 	bl	11a6c <_Bfree>
   14b14:	9b02      	ldr	r3, [sp, #8]
   14b16:	2201      	movs	r2, #1
   14b18:	e7c6      	b.n	14aa8 <_dtoa_r+0x780>
   14b1a:	f7fc ffb1 	bl	11a80 <__multadd>
   14b1e:	464f      	mov	r7, r9
   14b20:	4606      	mov	r6, r0
   14b22:	4680      	mov	r8, r0
   14b24:	e79a      	b.n	14a5c <_dtoa_r+0x734>
   14b26:	9b01      	ldr	r3, [sp, #4]
   14b28:	2b02      	cmp	r3, #2
   14b2a:	dc71      	bgt.n	14c10 <_dtoa_r+0x8e8>
   14b2c:	9b07      	ldr	r3, [sp, #28]
   14b2e:	2b00      	cmp	r3, #0
   14b30:	f47f af7b 	bne.w	14a2a <_dtoa_r+0x702>
   14b34:	9b04      	ldr	r3, [sp, #16]
   14b36:	4651      	mov	r1, sl
   14b38:	3301      	adds	r3, #1
   14b3a:	4628      	mov	r0, r5
   14b3c:	9304      	str	r3, [sp, #16]
   14b3e:	f7ff fb5d 	bl	141fc <quorem>
   14b42:	f8dd b000 	ldr.w	fp, [sp]
   14b46:	f100 0330 	add.w	r3, r0, #48	; 0x30
   14b4a:	f80b 3b01 	strb.w	r3, [fp], #1
   14b4e:	2700      	movs	r7, #0
   14b50:	e6eb      	b.n	1492a <_dtoa_r+0x602>
   14b52:	4651      	mov	r1, sl
   14b54:	4628      	mov	r0, r5
   14b56:	f7fd f9e9 	bl	11f2c <__mcmp>
   14b5a:	2800      	cmp	r0, #0
   14b5c:	f6bf aeba 	bge.w	148d4 <_dtoa_r+0x5ac>
   14b60:	4629      	mov	r1, r5
   14b62:	2300      	movs	r3, #0
   14b64:	220a      	movs	r2, #10
   14b66:	4620      	mov	r0, r4
   14b68:	f7fc ff8a 	bl	11a80 <__multadd>
   14b6c:	9b04      	ldr	r3, [sp, #16]
   14b6e:	1e5f      	subs	r7, r3, #1
   14b70:	9b07      	ldr	r3, [sp, #28]
   14b72:	4605      	mov	r5, r0
   14b74:	2b00      	cmp	r3, #0
   14b76:	f47f af4b 	bne.w	14a10 <_dtoa_r+0x6e8>
   14b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14b7c:	2b00      	cmp	r3, #0
   14b7e:	f340 8218 	ble.w	14fb2 <_dtoa_r+0xc8a>
   14b82:	4699      	mov	r9, r3
   14b84:	e6b1      	b.n	148ea <_dtoa_r+0x5c2>
   14b86:	4bbc      	ldr	r3, [pc, #752]	; (14e78 <_dtoa_r+0xb50>)
   14b88:	9300      	str	r3, [sp, #0]
   14b8a:	3303      	adds	r3, #3
   14b8c:	e4a4      	b.n	144d8 <_dtoa_r+0x1b0>
   14b8e:	201c      	movs	r0, #28
   14b90:	e712      	b.n	149b8 <_dtoa_r+0x690>
   14b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14b96:	2800      	cmp	r0, #0
   14b98:	f47f ae74 	bne.w	14884 <_dtoa_r+0x55c>
   14b9c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14ba0:	2a00      	cmp	r2, #0
   14ba2:	f000 80f4 	beq.w	14d8e <_dtoa_r+0xa66>
   14ba6:	9b02      	ldr	r3, [sp, #8]
   14ba8:	9308      	str	r3, [sp, #32]
   14baa:	e66d      	b.n	14888 <_dtoa_r+0x560>
   14bac:	2301      	movs	r3, #1
   14bae:	9307      	str	r3, [sp, #28]
   14bb0:	9b04      	ldr	r3, [sp, #16]
   14bb2:	445b      	add	r3, fp
   14bb4:	f103 0901 	add.w	r9, r3, #1
   14bb8:	f1b9 0f01 	cmp.w	r9, #1
   14bbc:	46cc      	mov	ip, r9
   14bbe:	930b      	str	r3, [sp, #44]	; 0x2c
   14bc0:	bfb8      	it	lt
   14bc2:	f04f 0c01 	movlt.w	ip, #1
   14bc6:	2100      	movs	r1, #0
   14bc8:	f1bc 0f17 	cmp.w	ip, #23
   14bcc:	63e1      	str	r1, [r4, #60]	; 0x3c
   14bce:	f77f acbc 	ble.w	1454a <_dtoa_r+0x222>
   14bd2:	2001      	movs	r0, #1
   14bd4:	2204      	movs	r2, #4
   14bd6:	0052      	lsls	r2, r2, #1
   14bd8:	f102 0314 	add.w	r3, r2, #20
   14bdc:	4563      	cmp	r3, ip
   14bde:	4601      	mov	r1, r0
   14be0:	f100 0001 	add.w	r0, r0, #1
   14be4:	d9f7      	bls.n	14bd6 <_dtoa_r+0x8ae>
   14be6:	63e1      	str	r1, [r4, #60]	; 0x3c
   14be8:	e4af      	b.n	1454a <_dtoa_r+0x222>
   14bea:	2301      	movs	r3, #1
   14bec:	9307      	str	r3, [sp, #28]
   14bee:	f1bb 0f00 	cmp.w	fp, #0
   14bf2:	dd52      	ble.n	14c9a <_dtoa_r+0x972>
   14bf4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   14bf8:	46d9      	mov	r9, fp
   14bfa:	46dc      	mov	ip, fp
   14bfc:	e7e3      	b.n	14bc6 <_dtoa_r+0x89e>
   14bfe:	2300      	movs	r3, #0
   14c00:	9307      	str	r3, [sp, #28]
   14c02:	e7d5      	b.n	14bb0 <_dtoa_r+0x888>
   14c04:	2300      	movs	r3, #0
   14c06:	9307      	str	r3, [sp, #28]
   14c08:	e7f1      	b.n	14bee <_dtoa_r+0x8c6>
   14c0a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   14c0e:	9704      	str	r7, [sp, #16]
   14c10:	f1b9 0f00 	cmp.w	r9, #0
   14c14:	f47f ada1 	bne.w	1475a <_dtoa_r+0x432>
   14c18:	4651      	mov	r1, sl
   14c1a:	464b      	mov	r3, r9
   14c1c:	2205      	movs	r2, #5
   14c1e:	4620      	mov	r0, r4
   14c20:	f7fc ff2e 	bl	11a80 <__multadd>
   14c24:	4601      	mov	r1, r0
   14c26:	4682      	mov	sl, r0
   14c28:	4628      	mov	r0, r5
   14c2a:	f7fd f97f 	bl	11f2c <__mcmp>
   14c2e:	2800      	cmp	r0, #0
   14c30:	f77f ad93 	ble.w	1475a <_dtoa_r+0x432>
   14c34:	9b04      	ldr	r3, [sp, #16]
   14c36:	f103 0b01 	add.w	fp, r3, #1
   14c3a:	9b00      	ldr	r3, [sp, #0]
   14c3c:	2231      	movs	r2, #49	; 0x31
   14c3e:	4698      	mov	r8, r3
   14c40:	f803 2b01 	strb.w	r2, [r3], #1
   14c44:	9300      	str	r3, [sp, #0]
   14c46:	4651      	mov	r1, sl
   14c48:	4620      	mov	r0, r4
   14c4a:	f7fc ff0f 	bl	11a6c <_Bfree>
   14c4e:	f10b 0301 	add.w	r3, fp, #1
   14c52:	f8dd 9000 	ldr.w	r9, [sp]
   14c56:	9304      	str	r3, [sp, #16]
   14c58:	f8cd 8000 	str.w	r8, [sp]
   14c5c:	2e00      	cmp	r6, #0
   14c5e:	f47f ae8f 	bne.w	14980 <_dtoa_r+0x658>
   14c62:	e691      	b.n	14988 <_dtoa_r+0x660>
   14c64:	eba3 0a0a 	sub.w	sl, r3, sl
   14c68:	e5c5      	b.n	147f6 <_dtoa_r+0x4ce>
   14c6a:	4631      	mov	r1, r6
   14c6c:	4652      	mov	r2, sl
   14c6e:	4620      	mov	r0, r4
   14c70:	f7fd f884 	bl	11d7c <__pow5mult>
   14c74:	462a      	mov	r2, r5
   14c76:	4601      	mov	r1, r0
   14c78:	4606      	mov	r6, r0
   14c7a:	4620      	mov	r0, r4
   14c7c:	f7fc ffd0 	bl	11c20 <__multiply>
   14c80:	4629      	mov	r1, r5
   14c82:	4605      	mov	r5, r0
   14c84:	4620      	mov	r0, r4
   14c86:	f7fc fef1 	bl	11a6c <_Bfree>
   14c8a:	e5ea      	b.n	14862 <_dtoa_r+0x53a>
   14c8c:	2002      	movs	r0, #2
   14c8e:	eeb0 5b48 	vmov.f64	d5, d8
   14c92:	e481      	b.n	14598 <_dtoa_r+0x270>
   14c94:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   14c98:	e68e      	b.n	149b8 <_dtoa_r+0x690>
   14c9a:	f04f 0b01 	mov.w	fp, #1
   14c9e:	46d9      	mov	r9, fp
   14ca0:	e44f      	b.n	14542 <_dtoa_r+0x21a>
   14ca2:	d103      	bne.n	14cac <_dtoa_r+0x984>
   14ca4:	9b01      	ldr	r3, [sp, #4]
   14ca6:	07db      	lsls	r3, r3, #31
   14ca8:	f53f ae4c 	bmi.w	14944 <_dtoa_r+0x61c>
   14cac:	46d9      	mov	r9, fp
   14cae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   14cb2:	2b30      	cmp	r3, #48	; 0x30
   14cb4:	d0fa      	beq.n	14cac <_dtoa_r+0x984>
   14cb6:	e657      	b.n	14968 <_dtoa_r+0x640>
   14cb8:	9b04      	ldr	r3, [sp, #16]
   14cba:	9a00      	ldr	r2, [sp, #0]
   14cbc:	3301      	adds	r3, #1
   14cbe:	9304      	str	r3, [sp, #16]
   14cc0:	2331      	movs	r3, #49	; 0x31
   14cc2:	7013      	strb	r3, [r2, #0]
   14cc4:	e650      	b.n	14968 <_dtoa_r+0x640>
   14cc6:	f1ba 0f00 	cmp.w	sl, #0
   14cca:	f000 8123 	beq.w	14f14 <_dtoa_r+0xbec>
   14cce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   14cd2:	9b06      	ldr	r3, [sp, #24]
   14cd4:	9309      	str	r3, [sp, #36]	; 0x24
   14cd6:	4413      	add	r3, r2
   14cd8:	f8dd a020 	ldr.w	sl, [sp, #32]
   14cdc:	9306      	str	r3, [sp, #24]
   14cde:	4490      	add	r8, r2
   14ce0:	e592      	b.n	14808 <_dtoa_r+0x4e0>
   14ce2:	ee07 0a90 	vmov	s15, r0
   14ce6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   14cea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   14cee:	eea6 5b07 	vfma.f64	d5, d6, d7
   14cf2:	ee15 2a90 	vmov	r2, s11
   14cf6:	ec51 0b15 	vmov	r0, r1, d5
   14cfa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   14cfe:	ec41 0b15 	vmov	d5, r0, r1
   14d02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14d06:	ee36 7b47 	vsub.f64	d7, d6, d7
   14d0a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   14d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14d12:	f300 8137 	bgt.w	14f84 <_dtoa_r+0xc5c>
   14d16:	eeb1 5b45 	vneg.f64	d5, d5
   14d1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   14d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14d22:	f57f acfb 	bpl.w	1471c <_dtoa_r+0x3f4>
   14d26:	f04f 0a00 	mov.w	sl, #0
   14d2a:	4656      	mov	r6, sl
   14d2c:	e515      	b.n	1475a <_dtoa_r+0x432>
   14d2e:	f000 80f5 	beq.w	14f1c <_dtoa_r+0xbf4>
   14d32:	9b04      	ldr	r3, [sp, #16]
   14d34:	4951      	ldr	r1, [pc, #324]	; (14e7c <_dtoa_r+0xb54>)
   14d36:	425a      	negs	r2, r3
   14d38:	f002 000f 	and.w	r0, r2, #15
   14d3c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   14d40:	ed91 6b00 	vldr	d6, [r1]
   14d44:	1112      	asrs	r2, r2, #4
   14d46:	ee28 6b06 	vmul.f64	d6, d8, d6
   14d4a:	f000 8142 	beq.w	14fd2 <_dtoa_r+0xcaa>
   14d4e:	eeb0 7b46 	vmov.f64	d7, d6
   14d52:	494b      	ldr	r1, [pc, #300]	; (14e80 <_dtoa_r+0xb58>)
   14d54:	2600      	movs	r6, #0
   14d56:	2002      	movs	r0, #2
   14d58:	07d3      	lsls	r3, r2, #31
   14d5a:	d505      	bpl.n	14d68 <_dtoa_r+0xa40>
   14d5c:	ed91 5b00 	vldr	d5, [r1]
   14d60:	3001      	adds	r0, #1
   14d62:	2601      	movs	r6, #1
   14d64:	ee27 7b05 	vmul.f64	d7, d7, d5
   14d68:	1052      	asrs	r2, r2, #1
   14d6a:	f101 0108 	add.w	r1, r1, #8
   14d6e:	d1f3      	bne.n	14d58 <_dtoa_r+0xa30>
   14d70:	2e00      	cmp	r6, #0
   14d72:	fe06 6b07 	vseleq.f64	d6, d6, d7
   14d76:	e41e      	b.n	145b6 <_dtoa_r+0x28e>
   14d78:	9b02      	ldr	r3, [sp, #8]
   14d7a:	2b00      	cmp	r3, #0
   14d7c:	f47f ae37 	bne.w	149ee <_dtoa_r+0x6c6>
   14d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14d84:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14d88:	2a00      	cmp	r2, #0
   14d8a:	f040 8137 	bne.w	14ffc <_dtoa_r+0xcd4>
   14d8e:	4a3d      	ldr	r2, [pc, #244]	; (14e84 <_dtoa_r+0xb5c>)
   14d90:	400a      	ands	r2, r1
   14d92:	2a00      	cmp	r2, #0
   14d94:	f000 80fa 	beq.w	14f8c <_dtoa_r+0xc64>
   14d98:	9b06      	ldr	r3, [sp, #24]
   14d9a:	3301      	adds	r3, #1
   14d9c:	9306      	str	r3, [sp, #24]
   14d9e:	2301      	movs	r3, #1
   14da0:	f108 0801 	add.w	r8, r8, #1
   14da4:	9308      	str	r3, [sp, #32]
   14da6:	e56f      	b.n	14888 <_dtoa_r+0x560>
   14da8:	4629      	mov	r1, r5
   14daa:	9a08      	ldr	r2, [sp, #32]
   14dac:	4620      	mov	r0, r4
   14dae:	f7fc ffe5 	bl	11d7c <__pow5mult>
   14db2:	4605      	mov	r5, r0
   14db4:	e55a      	b.n	1486c <_dtoa_r+0x544>
   14db6:	2a00      	cmp	r2, #0
   14db8:	dd12      	ble.n	14de0 <_dtoa_r+0xab8>
   14dba:	4629      	mov	r1, r5
   14dbc:	2201      	movs	r2, #1
   14dbe:	4620      	mov	r0, r4
   14dc0:	9301      	str	r3, [sp, #4]
   14dc2:	f7fd f83b 	bl	11e3c <__lshift>
   14dc6:	4651      	mov	r1, sl
   14dc8:	4605      	mov	r5, r0
   14dca:	f7fd f8af 	bl	11f2c <__mcmp>
   14dce:	2800      	cmp	r0, #0
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	f340 80e1 	ble.w	14f98 <_dtoa_r+0xc70>
   14dd6:	2b39      	cmp	r3, #57	; 0x39
   14dd8:	f000 80ca 	beq.w	14f70 <_dtoa_r+0xc48>
   14ddc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   14de0:	46b9      	mov	r9, r7
   14de2:	f809 3b01 	strb.w	r3, [r9], #1
   14de6:	9b04      	ldr	r3, [sp, #16]
   14de8:	3301      	adds	r3, #1
   14dea:	4637      	mov	r7, r6
   14dec:	9304      	str	r3, [sp, #16]
   14dee:	4646      	mov	r6, r8
   14df0:	e5ba      	b.n	14968 <_dtoa_r+0x640>
   14df2:	ee38 8b08 	vadd.f64	d8, d8, d8
   14df6:	eeb4 8bc6 	vcmpe.f64	d8, d6
   14dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14dfe:	dc0a      	bgt.n	14e16 <_dtoa_r+0xaee>
   14e00:	eeb4 8b46 	vcmp.f64	d8, d6
   14e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14e08:	f47f acdc 	bne.w	147c4 <_dtoa_r+0x49c>
   14e0c:	ee17 3a10 	vmov	r3, s14
   14e10:	07d8      	lsls	r0, r3, #31
   14e12:	f57f acd7 	bpl.w	147c4 <_dtoa_r+0x49c>
   14e16:	9a00      	ldr	r2, [sp, #0]
   14e18:	e454      	b.n	146c4 <_dtoa_r+0x39c>
   14e1a:	6871      	ldr	r1, [r6, #4]
   14e1c:	4620      	mov	r0, r4
   14e1e:	f7fc fdff 	bl	11a20 <_Balloc>
   14e22:	4607      	mov	r7, r0
   14e24:	2800      	cmp	r0, #0
   14e26:	f000 80de 	beq.w	14fe6 <_dtoa_r+0xcbe>
   14e2a:	6933      	ldr	r3, [r6, #16]
   14e2c:	3302      	adds	r3, #2
   14e2e:	009a      	lsls	r2, r3, #2
   14e30:	f106 010c 	add.w	r1, r6, #12
   14e34:	300c      	adds	r0, #12
   14e36:	f7f8 f873 	bl	cf20 <memcpy>
   14e3a:	4639      	mov	r1, r7
   14e3c:	2201      	movs	r2, #1
   14e3e:	4620      	mov	r0, r4
   14e40:	f7fc fffc 	bl	11e3c <__lshift>
   14e44:	4680      	mov	r8, r0
   14e46:	e5fe      	b.n	14a46 <_dtoa_r+0x71e>
   14e48:	9b06      	ldr	r3, [sp, #24]
   14e4a:	eba3 0309 	sub.w	r3, r3, r9
   14e4e:	9309      	str	r3, [sp, #36]	; 0x24
   14e50:	e4da      	b.n	14808 <_dtoa_r+0x4e0>
   14e52:	2b39      	cmp	r3, #57	; 0x39
   14e54:	f000 808c 	beq.w	14f70 <_dtoa_r+0xc48>
   14e58:	46b9      	mov	r9, r7
   14e5a:	3301      	adds	r3, #1
   14e5c:	e7c1      	b.n	14de2 <_dtoa_r+0xaba>
   14e5e:	9a04      	ldr	r2, [sp, #16]
   14e60:	3201      	adds	r2, #1
   14e62:	4637      	mov	r7, r6
   14e64:	9204      	str	r2, [sp, #16]
   14e66:	4646      	mov	r6, r8
   14e68:	e55f      	b.n	1492a <_dtoa_r+0x602>
   14e6a:	4629      	mov	r1, r5
   14e6c:	4620      	mov	r0, r4
   14e6e:	f7fc ff85 	bl	11d7c <__pow5mult>
   14e72:	4605      	mov	r5, r0
   14e74:	e4fa      	b.n	1486c <_dtoa_r+0x544>
   14e76:	bf00      	nop
   14e78:	20002768 	.word	0x20002768
   14e7c:	20000b58 	.word	0x20000b58
   14e80:	20000b30 	.word	0x20000b30
   14e84:	7ff00000 	.word	0x7ff00000
   14e88:	4b5e      	ldr	r3, [pc, #376]	; (15004 <_dtoa_r+0xcdc>)
   14e8a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   14e8e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14e92:	ed1c 3b02 	vldr	d3, [ip, #-8]
   14e96:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   14e9a:	ee36 7b47 	vsub.f64	d7, d6, d7
   14e9e:	ec41 0b16 	vmov	d6, r0, r1
   14ea2:	ee15 1a90 	vmov	r1, s11
   14ea6:	ee23 3b06 	vmul.f64	d3, d3, d6
   14eaa:	9800      	ldr	r0, [sp, #0]
   14eac:	3130      	adds	r1, #48	; 0x30
   14eae:	2a01      	cmp	r2, #1
   14eb0:	f800 1b01 	strb.w	r1, [r0], #1
   14eb4:	f000 8083 	beq.w	14fbe <_dtoa_r+0xc96>
   14eb8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14ebc:	9b00      	ldr	r3, [sp, #0]
   14ebe:	1899      	adds	r1, r3, r2
   14ec0:	ee27 7b04 	vmul.f64	d7, d7, d4
   14ec4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   14ec8:	ee16 3a90 	vmov	r3, s13
   14ecc:	3330      	adds	r3, #48	; 0x30
   14ece:	f800 3b01 	strb.w	r3, [r0], #1
   14ed2:	4281      	cmp	r1, r0
   14ed4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   14ed8:	ee37 7b45 	vsub.f64	d7, d7, d5
   14edc:	d1f0      	bne.n	14ec0 <_dtoa_r+0xb98>
   14ede:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14ee2:	ee33 5b06 	vadd.f64	d5, d3, d6
   14ee6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   14eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14eee:	f53f abe3 	bmi.w	146b8 <_dtoa_r+0x390>
   14ef2:	ee36 6b43 	vsub.f64	d6, d6, d3
   14ef6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14efe:	f77f ac0d 	ble.w	1471c <_dtoa_r+0x3f4>
   14f02:	4689      	mov	r9, r1
   14f04:	3901      	subs	r1, #1
   14f06:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   14f0a:	2b30      	cmp	r3, #48	; 0x30
   14f0c:	d0f9      	beq.n	14f02 <_dtoa_r+0xbda>
   14f0e:	1c73      	adds	r3, r6, #1
   14f10:	9304      	str	r3, [sp, #16]
   14f12:	e539      	b.n	14988 <_dtoa_r+0x660>
   14f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14f16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   14f1a:	e6da      	b.n	14cd2 <_dtoa_r+0x9aa>
   14f1c:	2002      	movs	r0, #2
   14f1e:	eeb0 6b48 	vmov.f64	d6, d8
   14f22:	f7ff bb48 	b.w	145b6 <_dtoa_r+0x28e>
   14f26:	f1b9 0f00 	cmp.w	r9, #0
   14f2a:	f43f aeda 	beq.w	14ce2 <_dtoa_r+0x9ba>
   14f2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14f30:	2a00      	cmp	r2, #0
   14f32:	f77f abf3 	ble.w	1471c <_dtoa_r+0x3f4>
   14f36:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14f3a:	ee26 6b04 	vmul.f64	d6, d6, d4
   14f3e:	3001      	adds	r0, #1
   14f40:	ee07 0a90 	vmov	s15, r0
   14f44:	9b04      	ldr	r3, [sp, #16]
   14f46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14f4a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14f4e:	eea6 7b05 	vfma.f64	d7, d6, d5
   14f52:	ee17 ca90 	vmov	ip, s15
   14f56:	ec51 0b17 	vmov	r0, r1, d7
   14f5a:	1e5e      	subs	r6, r3, #1
   14f5c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   14f60:	f7ff bb47 	b.w	145f2 <_dtoa_r+0x2ca>
   14f64:	9b04      	ldr	r3, [sp, #16]
   14f66:	3301      	adds	r3, #1
   14f68:	9304      	str	r3, [sp, #16]
   14f6a:	2331      	movs	r3, #49	; 0x31
   14f6c:	f7ff bbb1 	b.w	146d2 <_dtoa_r+0x3aa>
   14f70:	9b04      	ldr	r3, [sp, #16]
   14f72:	46bb      	mov	fp, r7
   14f74:	3301      	adds	r3, #1
   14f76:	9304      	str	r3, [sp, #16]
   14f78:	2339      	movs	r3, #57	; 0x39
   14f7a:	4637      	mov	r7, r6
   14f7c:	f80b 3b01 	strb.w	r3, [fp], #1
   14f80:	4646      	mov	r6, r8
   14f82:	e4e1      	b.n	14948 <_dtoa_r+0x620>
   14f84:	f04f 0a00 	mov.w	sl, #0
   14f88:	4656      	mov	r6, sl
   14f8a:	e653      	b.n	14c34 <_dtoa_r+0x90c>
   14f8c:	9208      	str	r2, [sp, #32]
   14f8e:	e47b      	b.n	14888 <_dtoa_r+0x560>
   14f90:	1c73      	adds	r3, r6, #1
   14f92:	9304      	str	r3, [sp, #16]
   14f94:	4689      	mov	r9, r1
   14f96:	e4f7      	b.n	14988 <_dtoa_r+0x660>
   14f98:	f47f af22 	bne.w	14de0 <_dtoa_r+0xab8>
   14f9c:	07da      	lsls	r2, r3, #31
   14f9e:	f57f af1f 	bpl.w	14de0 <_dtoa_r+0xab8>
   14fa2:	e718      	b.n	14dd6 <_dtoa_r+0xaae>
   14fa4:	2b39      	cmp	r3, #57	; 0x39
   14fa6:	d0e3      	beq.n	14f70 <_dtoa_r+0xc48>
   14fa8:	f1b9 0f00 	cmp.w	r9, #0
   14fac:	f73f af16 	bgt.w	14ddc <_dtoa_r+0xab4>
   14fb0:	e716      	b.n	14de0 <_dtoa_r+0xab8>
   14fb2:	9b01      	ldr	r3, [sp, #4]
   14fb4:	2b02      	cmp	r3, #2
   14fb6:	f73f ae28 	bgt.w	14c0a <_dtoa_r+0x8e2>
   14fba:	9704      	str	r7, [sp, #16]
   14fbc:	e5ba      	b.n	14b34 <_dtoa_r+0x80c>
   14fbe:	4601      	mov	r1, r0
   14fc0:	e78d      	b.n	14ede <_dtoa_r+0xbb6>
   14fc2:	9b01      	ldr	r3, [sp, #4]
   14fc4:	2b02      	cmp	r3, #2
   14fc6:	f73f ae20 	bgt.w	14c0a <_dtoa_r+0x8e2>
   14fca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   14fce:	9704      	str	r7, [sp, #16]
   14fd0:	e52b      	b.n	14a2a <_dtoa_r+0x702>
   14fd2:	2002      	movs	r0, #2
   14fd4:	f7ff baef 	b.w	145b6 <_dtoa_r+0x28e>
   14fd8:	4b0b      	ldr	r3, [pc, #44]	; (15008 <_dtoa_r+0xce0>)
   14fda:	480c      	ldr	r0, [pc, #48]	; (1500c <_dtoa_r+0xce4>)
   14fdc:	2200      	movs	r2, #0
   14fde:	f240 11af 	movw	r1, #431	; 0x1af
   14fe2:	f7fc fc03 	bl	117ec <__assert_func>
   14fe6:	4b08      	ldr	r3, [pc, #32]	; (15008 <_dtoa_r+0xce0>)
   14fe8:	4808      	ldr	r0, [pc, #32]	; (1500c <_dtoa_r+0xce4>)
   14fea:	463a      	mov	r2, r7
   14fec:	f240 21ef 	movw	r1, #751	; 0x2ef
   14ff0:	f7fc fbfc 	bl	117ec <__assert_func>
   14ff4:	4b06      	ldr	r3, [pc, #24]	; (15010 <_dtoa_r+0xce8>)
   14ff6:	9300      	str	r3, [sp, #0]
   14ff8:	f7ff b9d2 	b.w	143a0 <_dtoa_r+0x78>
   14ffc:	9b02      	ldr	r3, [sp, #8]
   14ffe:	9308      	str	r3, [sp, #32]
   15000:	e4f7      	b.n	149f2 <_dtoa_r+0x6ca>
   15002:	bf00      	nop
   15004:	20000b58 	.word	0x20000b58
   15008:	200025c0 	.word	0x200025c0
   1500c:	2000276c 	.word	0x2000276c
   15010:	2000275c 	.word	0x2000275c

00015014 <_close_r>:
   15014:	b538      	push	{r3, r4, r5, lr}
   15016:	4d07      	ldr	r5, [pc, #28]	; (15034 <_close_r+0x20>)
   15018:	2200      	movs	r2, #0
   1501a:	4604      	mov	r4, r0
   1501c:	4608      	mov	r0, r1
   1501e:	602a      	str	r2, [r5, #0]
   15020:	f7f8 fd8a 	bl	db38 <_close>
   15024:	1c43      	adds	r3, r0, #1
   15026:	d000      	beq.n	1502a <_close_r+0x16>
   15028:	bd38      	pop	{r3, r4, r5, pc}
   1502a:	682b      	ldr	r3, [r5, #0]
   1502c:	2b00      	cmp	r3, #0
   1502e:	d0fb      	beq.n	15028 <_close_r+0x14>
   15030:	6023      	str	r3, [r4, #0]
   15032:	bd38      	pop	{r3, r4, r5, pc}
   15034:	20004fec 	.word	0x20004fec

00015038 <__sflush_r>:
   15038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1503c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15040:	460c      	mov	r4, r1
   15042:	0711      	lsls	r1, r2, #28
   15044:	4680      	mov	r8, r0
   15046:	d447      	bmi.n	150d8 <__sflush_r+0xa0>
   15048:	6863      	ldr	r3, [r4, #4]
   1504a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1504e:	2b00      	cmp	r3, #0
   15050:	81a2      	strh	r2, [r4, #12]
   15052:	dd5e      	ble.n	15112 <__sflush_r+0xda>
   15054:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   15056:	2d00      	cmp	r5, #0
   15058:	d058      	beq.n	1510c <__sflush_r+0xd4>
   1505a:	2300      	movs	r3, #0
   1505c:	f8d8 6000 	ldr.w	r6, [r8]
   15060:	f8c8 3000 	str.w	r3, [r8]
   15064:	b293      	uxth	r3, r2
   15066:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1506a:	d156      	bne.n	1511a <__sflush_r+0xe2>
   1506c:	2301      	movs	r3, #1
   1506e:	69e1      	ldr	r1, [r4, #28]
   15070:	4640      	mov	r0, r8
   15072:	47a8      	blx	r5
   15074:	1c43      	adds	r3, r0, #1
   15076:	d067      	beq.n	15148 <__sflush_r+0x110>
   15078:	89a3      	ldrh	r3, [r4, #12]
   1507a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1507c:	075f      	lsls	r7, r3, #29
   1507e:	d505      	bpl.n	1508c <__sflush_r+0x54>
   15080:	6863      	ldr	r3, [r4, #4]
   15082:	1ac0      	subs	r0, r0, r3
   15084:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15086:	b10b      	cbz	r3, 1508c <__sflush_r+0x54>
   15088:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1508a:	1ac0      	subs	r0, r0, r3
   1508c:	69e1      	ldr	r1, [r4, #28]
   1508e:	4602      	mov	r2, r0
   15090:	2300      	movs	r3, #0
   15092:	4640      	mov	r0, r8
   15094:	47a8      	blx	r5
   15096:	1c41      	adds	r1, r0, #1
   15098:	d141      	bne.n	1511e <__sflush_r+0xe6>
   1509a:	f8d8 3000 	ldr.w	r3, [r8]
   1509e:	2b00      	cmp	r3, #0
   150a0:	d03d      	beq.n	1511e <__sflush_r+0xe6>
   150a2:	2b1d      	cmp	r3, #29
   150a4:	d001      	beq.n	150aa <__sflush_r+0x72>
   150a6:	2b16      	cmp	r3, #22
   150a8:	d156      	bne.n	15158 <__sflush_r+0x120>
   150aa:	89a3      	ldrh	r3, [r4, #12]
   150ac:	6922      	ldr	r2, [r4, #16]
   150ae:	6022      	str	r2, [r4, #0]
   150b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   150b4:	2100      	movs	r1, #0
   150b6:	6061      	str	r1, [r4, #4]
   150b8:	81a3      	strh	r3, [r4, #12]
   150ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   150bc:	f8c8 6000 	str.w	r6, [r8]
   150c0:	b321      	cbz	r1, 1510c <__sflush_r+0xd4>
   150c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   150c6:	4299      	cmp	r1, r3
   150c8:	d002      	beq.n	150d0 <__sflush_r+0x98>
   150ca:	4640      	mov	r0, r8
   150cc:	f7fd fc82 	bl	129d4 <_free_r>
   150d0:	2000      	movs	r0, #0
   150d2:	6320      	str	r0, [r4, #48]	; 0x30
   150d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150d8:	6926      	ldr	r6, [r4, #16]
   150da:	b1be      	cbz	r6, 1510c <__sflush_r+0xd4>
   150dc:	b293      	uxth	r3, r2
   150de:	6825      	ldr	r5, [r4, #0]
   150e0:	6026      	str	r6, [r4, #0]
   150e2:	079a      	lsls	r2, r3, #30
   150e4:	bf0c      	ite	eq
   150e6:	6963      	ldreq	r3, [r4, #20]
   150e8:	2300      	movne	r3, #0
   150ea:	1bad      	subs	r5, r5, r6
   150ec:	60a3      	str	r3, [r4, #8]
   150ee:	e00b      	b.n	15108 <__sflush_r+0xd0>
   150f0:	462b      	mov	r3, r5
   150f2:	4632      	mov	r2, r6
   150f4:	69e1      	ldr	r1, [r4, #28]
   150f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   150f8:	4640      	mov	r0, r8
   150fa:	47b8      	blx	r7
   150fc:	f1b0 0c00 	subs.w	ip, r0, #0
   15100:	eba5 050c 	sub.w	r5, r5, ip
   15104:	4466      	add	r6, ip
   15106:	dd17      	ble.n	15138 <__sflush_r+0x100>
   15108:	2d00      	cmp	r5, #0
   1510a:	dcf1      	bgt.n	150f0 <__sflush_r+0xb8>
   1510c:	2000      	movs	r0, #0
   1510e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15114:	2b00      	cmp	r3, #0
   15116:	dc9d      	bgt.n	15054 <__sflush_r+0x1c>
   15118:	e7f8      	b.n	1510c <__sflush_r+0xd4>
   1511a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1511c:	e7ae      	b.n	1507c <__sflush_r+0x44>
   1511e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15122:	6922      	ldr	r2, [r4, #16]
   15124:	6022      	str	r2, [r4, #0]
   15126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1512a:	81a3      	strh	r3, [r4, #12]
   1512c:	2200      	movs	r2, #0
   1512e:	04db      	lsls	r3, r3, #19
   15130:	6062      	str	r2, [r4, #4]
   15132:	d5c2      	bpl.n	150ba <__sflush_r+0x82>
   15134:	6520      	str	r0, [r4, #80]	; 0x50
   15136:	e7c0      	b.n	150ba <__sflush_r+0x82>
   15138:	89a3      	ldrh	r3, [r4, #12]
   1513a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1513e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15142:	81a3      	strh	r3, [r4, #12]
   15144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15148:	f8d8 3000 	ldr.w	r3, [r8]
   1514c:	2b00      	cmp	r3, #0
   1514e:	d093      	beq.n	15078 <__sflush_r+0x40>
   15150:	2b1d      	cmp	r3, #29
   15152:	d006      	beq.n	15162 <__sflush_r+0x12a>
   15154:	2b16      	cmp	r3, #22
   15156:	d004      	beq.n	15162 <__sflush_r+0x12a>
   15158:	89a3      	ldrh	r3, [r4, #12]
   1515a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1515e:	81a3      	strh	r3, [r4, #12]
   15160:	e7d5      	b.n	1510e <__sflush_r+0xd6>
   15162:	f8c8 6000 	str.w	r6, [r8]
   15166:	e7d1      	b.n	1510c <__sflush_r+0xd4>

00015168 <_fflush_r>:
   15168:	b538      	push	{r3, r4, r5, lr}
   1516a:	460c      	mov	r4, r1
   1516c:	4605      	mov	r5, r0
   1516e:	b108      	cbz	r0, 15174 <_fflush_r+0xc>
   15170:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15172:	b303      	cbz	r3, 151b6 <_fflush_r+0x4e>
   15174:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   15178:	b188      	cbz	r0, 1519e <_fflush_r+0x36>
   1517a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1517c:	07db      	lsls	r3, r3, #31
   1517e:	d401      	bmi.n	15184 <_fflush_r+0x1c>
   15180:	0581      	lsls	r1, r0, #22
   15182:	d50f      	bpl.n	151a4 <_fflush_r+0x3c>
   15184:	4628      	mov	r0, r5
   15186:	4621      	mov	r1, r4
   15188:	f7ff ff56 	bl	15038 <__sflush_r>
   1518c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1518e:	07da      	lsls	r2, r3, #31
   15190:	4605      	mov	r5, r0
   15192:	d402      	bmi.n	1519a <_fflush_r+0x32>
   15194:	89a3      	ldrh	r3, [r4, #12]
   15196:	059b      	lsls	r3, r3, #22
   15198:	d508      	bpl.n	151ac <_fflush_r+0x44>
   1519a:	4628      	mov	r0, r5
   1519c:	bd38      	pop	{r3, r4, r5, pc}
   1519e:	4605      	mov	r5, r0
   151a0:	4628      	mov	r0, r5
   151a2:	bd38      	pop	{r3, r4, r5, pc}
   151a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   151a6:	f7fc fbc7 	bl	11938 <__retarget_lock_acquire_recursive>
   151aa:	e7eb      	b.n	15184 <_fflush_r+0x1c>
   151ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   151ae:	f7fc fbc5 	bl	1193c <__retarget_lock_release_recursive>
   151b2:	4628      	mov	r0, r5
   151b4:	bd38      	pop	{r3, r4, r5, pc}
   151b6:	f7fd f8cd 	bl	12354 <__sinit>
   151ba:	e7db      	b.n	15174 <_fflush_r+0xc>

000151bc <_fstat_r>:
   151bc:	b570      	push	{r4, r5, r6, lr}
   151be:	460c      	mov	r4, r1
   151c0:	4d08      	ldr	r5, [pc, #32]	; (151e4 <_fstat_r+0x28>)
   151c2:	4603      	mov	r3, r0
   151c4:	2600      	movs	r6, #0
   151c6:	4620      	mov	r0, r4
   151c8:	4611      	mov	r1, r2
   151ca:	461c      	mov	r4, r3
   151cc:	602e      	str	r6, [r5, #0]
   151ce:	f7f8 fcb6 	bl	db3e <_fstat>
   151d2:	1c43      	adds	r3, r0, #1
   151d4:	d000      	beq.n	151d8 <_fstat_r+0x1c>
   151d6:	bd70      	pop	{r4, r5, r6, pc}
   151d8:	682b      	ldr	r3, [r5, #0]
   151da:	2b00      	cmp	r3, #0
   151dc:	d0fb      	beq.n	151d6 <_fstat_r+0x1a>
   151de:	6023      	str	r3, [r4, #0]
   151e0:	bd70      	pop	{r4, r5, r6, pc}
   151e2:	bf00      	nop
   151e4:	20004fec 	.word	0x20004fec

000151e8 <_isatty_r>:
   151e8:	b538      	push	{r3, r4, r5, lr}
   151ea:	4d07      	ldr	r5, [pc, #28]	; (15208 <_isatty_r+0x20>)
   151ec:	2200      	movs	r2, #0
   151ee:	4604      	mov	r4, r0
   151f0:	4608      	mov	r0, r1
   151f2:	602a      	str	r2, [r5, #0]
   151f4:	f7f8 fca8 	bl	db48 <_isatty>
   151f8:	1c43      	adds	r3, r0, #1
   151fa:	d000      	beq.n	151fe <_isatty_r+0x16>
   151fc:	bd38      	pop	{r3, r4, r5, pc}
   151fe:	682b      	ldr	r3, [r5, #0]
   15200:	2b00      	cmp	r3, #0
   15202:	d0fb      	beq.n	151fc <_isatty_r+0x14>
   15204:	6023      	str	r3, [r4, #0]
   15206:	bd38      	pop	{r3, r4, r5, pc}
   15208:	20004fec 	.word	0x20004fec

0001520c <_lseek_r>:
   1520c:	b538      	push	{r3, r4, r5, lr}
   1520e:	460c      	mov	r4, r1
   15210:	4d08      	ldr	r5, [pc, #32]	; (15234 <_lseek_r+0x28>)
   15212:	4684      	mov	ip, r0
   15214:	4611      	mov	r1, r2
   15216:	4620      	mov	r0, r4
   15218:	461a      	mov	r2, r3
   1521a:	2300      	movs	r3, #0
   1521c:	602b      	str	r3, [r5, #0]
   1521e:	4664      	mov	r4, ip
   15220:	f7f8 fc94 	bl	db4c <_lseek>
   15224:	1c43      	adds	r3, r0, #1
   15226:	d000      	beq.n	1522a <_lseek_r+0x1e>
   15228:	bd38      	pop	{r3, r4, r5, pc}
   1522a:	682b      	ldr	r3, [r5, #0]
   1522c:	2b00      	cmp	r3, #0
   1522e:	d0fb      	beq.n	15228 <_lseek_r+0x1c>
   15230:	6023      	str	r3, [r4, #0]
   15232:	bd38      	pop	{r3, r4, r5, pc}
   15234:	20004fec 	.word	0x20004fec

00015238 <_read_r>:
   15238:	b538      	push	{r3, r4, r5, lr}
   1523a:	460c      	mov	r4, r1
   1523c:	4d08      	ldr	r5, [pc, #32]	; (15260 <_read_r+0x28>)
   1523e:	4684      	mov	ip, r0
   15240:	4611      	mov	r1, r2
   15242:	4620      	mov	r0, r4
   15244:	461a      	mov	r2, r3
   15246:	2300      	movs	r3, #0
   15248:	602b      	str	r3, [r5, #0]
   1524a:	4664      	mov	r4, ip
   1524c:	f7f8 fc72 	bl	db34 <_read>
   15250:	1c43      	adds	r3, r0, #1
   15252:	d000      	beq.n	15256 <_read_r+0x1e>
   15254:	bd38      	pop	{r3, r4, r5, pc}
   15256:	682b      	ldr	r3, [r5, #0]
   15258:	2b00      	cmp	r3, #0
   1525a:	d0fb      	beq.n	15254 <_read_r+0x1c>
   1525c:	6023      	str	r3, [r4, #0]
   1525e:	bd38      	pop	{r3, r4, r5, pc}
   15260:	20004fec 	.word	0x20004fec

00015264 <__fputwc>:
   15264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15268:	b082      	sub	sp, #8
   1526a:	4682      	mov	sl, r0
   1526c:	4688      	mov	r8, r1
   1526e:	4614      	mov	r4, r2
   15270:	f7fc fb66 	bl	11940 <__locale_mb_cur_max>
   15274:	2801      	cmp	r0, #1
   15276:	d103      	bne.n	15280 <__fputwc+0x1c>
   15278:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1527c:	2bfe      	cmp	r3, #254	; 0xfe
   1527e:	d936      	bls.n	152ee <__fputwc+0x8a>
   15280:	f10d 0904 	add.w	r9, sp, #4
   15284:	4642      	mov	r2, r8
   15286:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1528a:	4649      	mov	r1, r9
   1528c:	4650      	mov	r0, sl
   1528e:	f7fe fe49 	bl	13f24 <_wcrtomb_r>
   15292:	1c42      	adds	r2, r0, #1
   15294:	4606      	mov	r6, r0
   15296:	d032      	beq.n	152fe <__fputwc+0x9a>
   15298:	b320      	cbz	r0, 152e4 <__fputwc+0x80>
   1529a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1529e:	2500      	movs	r5, #0
   152a0:	e009      	b.n	152b6 <__fputwc+0x52>
   152a2:	6823      	ldr	r3, [r4, #0]
   152a4:	1c5a      	adds	r2, r3, #1
   152a6:	6022      	str	r2, [r4, #0]
   152a8:	f883 c000 	strb.w	ip, [r3]
   152ac:	3501      	adds	r5, #1
   152ae:	42b5      	cmp	r5, r6
   152b0:	d218      	bcs.n	152e4 <__fputwc+0x80>
   152b2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   152b6:	68a3      	ldr	r3, [r4, #8]
   152b8:	3b01      	subs	r3, #1
   152ba:	2b00      	cmp	r3, #0
   152bc:	60a3      	str	r3, [r4, #8]
   152be:	daf0      	bge.n	152a2 <__fputwc+0x3e>
   152c0:	69a7      	ldr	r7, [r4, #24]
   152c2:	42bb      	cmp	r3, r7
   152c4:	4661      	mov	r1, ip
   152c6:	4622      	mov	r2, r4
   152c8:	4650      	mov	r0, sl
   152ca:	db02      	blt.n	152d2 <__fputwc+0x6e>
   152cc:	f1bc 0f0a 	cmp.w	ip, #10
   152d0:	d1e7      	bne.n	152a2 <__fputwc+0x3e>
   152d2:	f000 f9cb 	bl	1566c <__swbuf_r>
   152d6:	1c43      	adds	r3, r0, #1
   152d8:	d1e8      	bne.n	152ac <__fputwc+0x48>
   152da:	4606      	mov	r6, r0
   152dc:	4630      	mov	r0, r6
   152de:	b002      	add	sp, #8
   152e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   152e4:	4646      	mov	r6, r8
   152e6:	4630      	mov	r0, r6
   152e8:	b002      	add	sp, #8
   152ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   152ee:	fa5f fc88 	uxtb.w	ip, r8
   152f2:	f88d c004 	strb.w	ip, [sp, #4]
   152f6:	4606      	mov	r6, r0
   152f8:	f10d 0904 	add.w	r9, sp, #4
   152fc:	e7cf      	b.n	1529e <__fputwc+0x3a>
   152fe:	89a3      	ldrh	r3, [r4, #12]
   15300:	4630      	mov	r0, r6
   15302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15306:	81a3      	strh	r3, [r4, #12]
   15308:	b002      	add	sp, #8
   1530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1530e:	bf00      	nop

00015310 <_fputwc_r>:
   15310:	b530      	push	{r4, r5, lr}
   15312:	6e53      	ldr	r3, [r2, #100]	; 0x64
   15314:	f013 0f01 	tst.w	r3, #1
   15318:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1531c:	4614      	mov	r4, r2
   1531e:	b083      	sub	sp, #12
   15320:	4605      	mov	r5, r0
   15322:	b29a      	uxth	r2, r3
   15324:	d101      	bne.n	1532a <_fputwc_r+0x1a>
   15326:	0598      	lsls	r0, r3, #22
   15328:	d51c      	bpl.n	15364 <_fputwc_r+0x54>
   1532a:	0490      	lsls	r0, r2, #18
   1532c:	d406      	bmi.n	1533c <_fputwc_r+0x2c>
   1532e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   15334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15338:	81a3      	strh	r3, [r4, #12]
   1533a:	6662      	str	r2, [r4, #100]	; 0x64
   1533c:	4622      	mov	r2, r4
   1533e:	4628      	mov	r0, r5
   15340:	f7ff ff90 	bl	15264 <__fputwc>
   15344:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15346:	07da      	lsls	r2, r3, #31
   15348:	4605      	mov	r5, r0
   1534a:	d402      	bmi.n	15352 <_fputwc_r+0x42>
   1534c:	89a3      	ldrh	r3, [r4, #12]
   1534e:	059b      	lsls	r3, r3, #22
   15350:	d502      	bpl.n	15358 <_fputwc_r+0x48>
   15352:	4628      	mov	r0, r5
   15354:	b003      	add	sp, #12
   15356:	bd30      	pop	{r4, r5, pc}
   15358:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1535a:	f7fc faef 	bl	1193c <__retarget_lock_release_recursive>
   1535e:	4628      	mov	r0, r5
   15360:	b003      	add	sp, #12
   15362:	bd30      	pop	{r4, r5, pc}
   15364:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15366:	9101      	str	r1, [sp, #4]
   15368:	f7fc fae6 	bl	11938 <__retarget_lock_acquire_recursive>
   1536c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15370:	9901      	ldr	r1, [sp, #4]
   15372:	b29a      	uxth	r2, r3
   15374:	e7d9      	b.n	1532a <_fputwc_r+0x1a>
   15376:	bf00      	nop

00015378 <__sfvwrite_r>:
   15378:	6893      	ldr	r3, [r2, #8]
   1537a:	2b00      	cmp	r3, #0
   1537c:	f000 8085 	beq.w	1548a <__sfvwrite_r+0x112>
   15380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15384:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   15388:	460c      	mov	r4, r1
   1538a:	0719      	lsls	r1, r3, #28
   1538c:	4680      	mov	r8, r0
   1538e:	b083      	sub	sp, #12
   15390:	4617      	mov	r7, r2
   15392:	b298      	uxth	r0, r3
   15394:	d525      	bpl.n	153e2 <__sfvwrite_r+0x6a>
   15396:	6923      	ldr	r3, [r4, #16]
   15398:	b31b      	cbz	r3, 153e2 <__sfvwrite_r+0x6a>
   1539a:	f010 0302 	ands.w	r3, r0, #2
   1539e:	683d      	ldr	r5, [r7, #0]
   153a0:	d02d      	beq.n	153fe <__sfvwrite_r+0x86>
   153a2:	f04f 0a00 	mov.w	sl, #0
   153a6:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 15668 <__sfvwrite_r+0x2f0>
   153aa:	4656      	mov	r6, sl
   153ac:	46b9      	mov	r9, r7
   153ae:	455e      	cmp	r6, fp
   153b0:	4633      	mov	r3, r6
   153b2:	4652      	mov	r2, sl
   153b4:	bf28      	it	cs
   153b6:	465b      	movcs	r3, fp
   153b8:	4640      	mov	r0, r8
   153ba:	2e00      	cmp	r6, #0
   153bc:	d052      	beq.n	15464 <__sfvwrite_r+0xec>
   153be:	69e1      	ldr	r1, [r4, #28]
   153c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   153c2:	47b8      	blx	r7
   153c4:	2800      	cmp	r0, #0
   153c6:	dd56      	ble.n	15476 <__sfvwrite_r+0xfe>
   153c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   153cc:	1a1b      	subs	r3, r3, r0
   153ce:	4482      	add	sl, r0
   153d0:	1a36      	subs	r6, r6, r0
   153d2:	f8c9 3008 	str.w	r3, [r9, #8]
   153d6:	2b00      	cmp	r3, #0
   153d8:	d1e9      	bne.n	153ae <__sfvwrite_r+0x36>
   153da:	2000      	movs	r0, #0
   153dc:	b003      	add	sp, #12
   153de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e2:	4621      	mov	r1, r4
   153e4:	4640      	mov	r0, r8
   153e6:	f7fe fe2b 	bl	14040 <__swsetup_r>
   153ea:	2800      	cmp	r0, #0
   153ec:	f040 8138 	bne.w	15660 <__sfvwrite_r+0x2e8>
   153f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   153f4:	683d      	ldr	r5, [r7, #0]
   153f6:	b298      	uxth	r0, r3
   153f8:	f010 0302 	ands.w	r3, r0, #2
   153fc:	d1d1      	bne.n	153a2 <__sfvwrite_r+0x2a>
   153fe:	f010 0901 	ands.w	r9, r0, #1
   15402:	d144      	bne.n	1548e <__sfvwrite_r+0x116>
   15404:	464e      	mov	r6, r9
   15406:	9700      	str	r7, [sp, #0]
   15408:	b346      	cbz	r6, 1545c <__sfvwrite_r+0xe4>
   1540a:	0582      	lsls	r2, r0, #22
   1540c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   15410:	f140 8085 	bpl.w	1551e <__sfvwrite_r+0x1a6>
   15414:	45b3      	cmp	fp, r6
   15416:	465a      	mov	r2, fp
   15418:	f200 80b4 	bhi.w	15584 <__sfvwrite_r+0x20c>
   1541c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   15420:	f040 80c1 	bne.w	155a6 <__sfvwrite_r+0x22e>
   15424:	6820      	ldr	r0, [r4, #0]
   15426:	9201      	str	r2, [sp, #4]
   15428:	4649      	mov	r1, r9
   1542a:	f7fc f963 	bl	116f4 <memmove>
   1542e:	68a3      	ldr	r3, [r4, #8]
   15430:	9a01      	ldr	r2, [sp, #4]
   15432:	eba3 010b 	sub.w	r1, r3, fp
   15436:	6823      	ldr	r3, [r4, #0]
   15438:	60a1      	str	r1, [r4, #8]
   1543a:	4413      	add	r3, r2
   1543c:	46b2      	mov	sl, r6
   1543e:	6023      	str	r3, [r4, #0]
   15440:	2600      	movs	r6, #0
   15442:	9a00      	ldr	r2, [sp, #0]
   15444:	6893      	ldr	r3, [r2, #8]
   15446:	eba3 030a 	sub.w	r3, r3, sl
   1544a:	44d1      	add	r9, sl
   1544c:	6093      	str	r3, [r2, #8]
   1544e:	2b00      	cmp	r3, #0
   15450:	d0c3      	beq.n	153da <__sfvwrite_r+0x62>
   15452:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   15456:	b280      	uxth	r0, r0
   15458:	2e00      	cmp	r6, #0
   1545a:	d1d6      	bne.n	1540a <__sfvwrite_r+0x92>
   1545c:	e9d5 9600 	ldrd	r9, r6, [r5]
   15460:	3508      	adds	r5, #8
   15462:	e7d1      	b.n	15408 <__sfvwrite_r+0x90>
   15464:	e9d5 a600 	ldrd	sl, r6, [r5]
   15468:	3508      	adds	r5, #8
   1546a:	e7a0      	b.n	153ae <__sfvwrite_r+0x36>
   1546c:	4621      	mov	r1, r4
   1546e:	4640      	mov	r0, r8
   15470:	f7ff fe7a 	bl	15168 <_fflush_r>
   15474:	b388      	cbz	r0, 154da <__sfvwrite_r+0x162>
   15476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1547a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1547e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15482:	81a3      	strh	r3, [r4, #12]
   15484:	b003      	add	sp, #12
   15486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1548a:	2000      	movs	r0, #0
   1548c:	4770      	bx	lr
   1548e:	461e      	mov	r6, r3
   15490:	46ba      	mov	sl, r7
   15492:	4699      	mov	r9, r3
   15494:	4618      	mov	r0, r3
   15496:	9500      	str	r5, [sp, #0]
   15498:	461f      	mov	r7, r3
   1549a:	b366      	cbz	r6, 154f6 <__sfvwrite_r+0x17e>
   1549c:	2800      	cmp	r0, #0
   1549e:	d032      	beq.n	15506 <__sfvwrite_r+0x18e>
   154a0:	464a      	mov	r2, r9
   154a2:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   154a6:	6820      	ldr	r0, [r4, #0]
   154a8:	68a5      	ldr	r5, [r4, #8]
   154aa:	42b2      	cmp	r2, r6
   154ac:	bf28      	it	cs
   154ae:	4632      	movcs	r2, r6
   154b0:	4288      	cmp	r0, r1
   154b2:	d904      	bls.n	154be <__sfvwrite_r+0x146>
   154b4:	eb05 0b03 	add.w	fp, r5, r3
   154b8:	455a      	cmp	r2, fp
   154ba:	f300 80a7 	bgt.w	1560c <__sfvwrite_r+0x294>
   154be:	4293      	cmp	r3, r2
   154c0:	dc64      	bgt.n	1558c <__sfvwrite_r+0x214>
   154c2:	69e1      	ldr	r1, [r4, #28]
   154c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
   154c6:	463a      	mov	r2, r7
   154c8:	4640      	mov	r0, r8
   154ca:	47a8      	blx	r5
   154cc:	f1b0 0b00 	subs.w	fp, r0, #0
   154d0:	ddd1      	ble.n	15476 <__sfvwrite_r+0xfe>
   154d2:	ebb9 090b 	subs.w	r9, r9, fp
   154d6:	d0c9      	beq.n	1546c <__sfvwrite_r+0xf4>
   154d8:	2001      	movs	r0, #1
   154da:	f8da 3008 	ldr.w	r3, [sl, #8]
   154de:	eba3 030b 	sub.w	r3, r3, fp
   154e2:	445f      	add	r7, fp
   154e4:	eba6 060b 	sub.w	r6, r6, fp
   154e8:	f8ca 3008 	str.w	r3, [sl, #8]
   154ec:	2b00      	cmp	r3, #0
   154ee:	f43f af74 	beq.w	153da <__sfvwrite_r+0x62>
   154f2:	2e00      	cmp	r6, #0
   154f4:	d1d2      	bne.n	1549c <__sfvwrite_r+0x124>
   154f6:	9a00      	ldr	r2, [sp, #0]
   154f8:	6856      	ldr	r6, [r2, #4]
   154fa:	4613      	mov	r3, r2
   154fc:	3208      	adds	r2, #8
   154fe:	9200      	str	r2, [sp, #0]
   15500:	2e00      	cmp	r6, #0
   15502:	d0f8      	beq.n	154f6 <__sfvwrite_r+0x17e>
   15504:	681f      	ldr	r7, [r3, #0]
   15506:	4632      	mov	r2, r6
   15508:	210a      	movs	r1, #10
   1550a:	4638      	mov	r0, r7
   1550c:	f7fc ff50 	bl	123b0 <memchr>
   15510:	2800      	cmp	r0, #0
   15512:	f000 809c 	beq.w	1564e <__sfvwrite_r+0x2d6>
   15516:	3001      	adds	r0, #1
   15518:	eba0 0907 	sub.w	r9, r0, r7
   1551c:	e7c0      	b.n	154a0 <__sfvwrite_r+0x128>
   1551e:	6820      	ldr	r0, [r4, #0]
   15520:	6923      	ldr	r3, [r4, #16]
   15522:	4298      	cmp	r0, r3
   15524:	d816      	bhi.n	15554 <__sfvwrite_r+0x1dc>
   15526:	6962      	ldr	r2, [r4, #20]
   15528:	42b2      	cmp	r2, r6
   1552a:	d813      	bhi.n	15554 <__sfvwrite_r+0x1dc>
   1552c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   15530:	42b3      	cmp	r3, r6
   15532:	bf28      	it	cs
   15534:	4633      	movcs	r3, r6
   15536:	69e1      	ldr	r1, [r4, #28]
   15538:	fb93 f3f2 	sdiv	r3, r3, r2
   1553c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1553e:	fb02 f303 	mul.w	r3, r2, r3
   15542:	4640      	mov	r0, r8
   15544:	464a      	mov	r2, r9
   15546:	47b8      	blx	r7
   15548:	f1b0 0a00 	subs.w	sl, r0, #0
   1554c:	dd93      	ble.n	15476 <__sfvwrite_r+0xfe>
   1554e:	eba6 060a 	sub.w	r6, r6, sl
   15552:	e776      	b.n	15442 <__sfvwrite_r+0xca>
   15554:	45b3      	cmp	fp, r6
   15556:	46da      	mov	sl, fp
   15558:	bf28      	it	cs
   1555a:	46b2      	movcs	sl, r6
   1555c:	4652      	mov	r2, sl
   1555e:	4649      	mov	r1, r9
   15560:	f7fc f8c8 	bl	116f4 <memmove>
   15564:	68a3      	ldr	r3, [r4, #8]
   15566:	6822      	ldr	r2, [r4, #0]
   15568:	eba3 030a 	sub.w	r3, r3, sl
   1556c:	4452      	add	r2, sl
   1556e:	60a3      	str	r3, [r4, #8]
   15570:	6022      	str	r2, [r4, #0]
   15572:	2b00      	cmp	r3, #0
   15574:	d1eb      	bne.n	1554e <__sfvwrite_r+0x1d6>
   15576:	4621      	mov	r1, r4
   15578:	4640      	mov	r0, r8
   1557a:	f7ff fdf5 	bl	15168 <_fflush_r>
   1557e:	2800      	cmp	r0, #0
   15580:	d0e5      	beq.n	1554e <__sfvwrite_r+0x1d6>
   15582:	e778      	b.n	15476 <__sfvwrite_r+0xfe>
   15584:	6820      	ldr	r0, [r4, #0]
   15586:	46b3      	mov	fp, r6
   15588:	4632      	mov	r2, r6
   1558a:	e74c      	b.n	15426 <__sfvwrite_r+0xae>
   1558c:	4639      	mov	r1, r7
   1558e:	9201      	str	r2, [sp, #4]
   15590:	f7fc f8b0 	bl	116f4 <memmove>
   15594:	9a01      	ldr	r2, [sp, #4]
   15596:	68a3      	ldr	r3, [r4, #8]
   15598:	1a9b      	subs	r3, r3, r2
   1559a:	60a3      	str	r3, [r4, #8]
   1559c:	6823      	ldr	r3, [r4, #0]
   1559e:	4413      	add	r3, r2
   155a0:	6023      	str	r3, [r4, #0]
   155a2:	4693      	mov	fp, r2
   155a4:	e795      	b.n	154d2 <__sfvwrite_r+0x15a>
   155a6:	6823      	ldr	r3, [r4, #0]
   155a8:	6921      	ldr	r1, [r4, #16]
   155aa:	eba3 0b01 	sub.w	fp, r3, r1
   155ae:	6963      	ldr	r3, [r4, #20]
   155b0:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   155b4:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   155b8:	f10b 0301 	add.w	r3, fp, #1
   155bc:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   155c0:	4433      	add	r3, r6
   155c2:	4553      	cmp	r3, sl
   155c4:	4652      	mov	r2, sl
   155c6:	bf84      	itt	hi
   155c8:	469a      	movhi	sl, r3
   155ca:	4652      	movhi	r2, sl
   155cc:	0543      	lsls	r3, r0, #21
   155ce:	d52c      	bpl.n	1562a <__sfvwrite_r+0x2b2>
   155d0:	4611      	mov	r1, r2
   155d2:	4640      	mov	r0, r8
   155d4:	f7fb fdae 	bl	11134 <_malloc_r>
   155d8:	2800      	cmp	r0, #0
   155da:	d03b      	beq.n	15654 <__sfvwrite_r+0x2dc>
   155dc:	465a      	mov	r2, fp
   155de:	6921      	ldr	r1, [r4, #16]
   155e0:	9001      	str	r0, [sp, #4]
   155e2:	f7f7 fc9d 	bl	cf20 <memcpy>
   155e6:	89a2      	ldrh	r2, [r4, #12]
   155e8:	9b01      	ldr	r3, [sp, #4]
   155ea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   155ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   155f2:	81a2      	strh	r2, [r4, #12]
   155f4:	eb03 000b 	add.w	r0, r3, fp
   155f8:	6123      	str	r3, [r4, #16]
   155fa:	ebaa 030b 	sub.w	r3, sl, fp
   155fe:	f8c4 a014 	str.w	sl, [r4, #20]
   15602:	60a3      	str	r3, [r4, #8]
   15604:	6020      	str	r0, [r4, #0]
   15606:	46b3      	mov	fp, r6
   15608:	4632      	mov	r2, r6
   1560a:	e70c      	b.n	15426 <__sfvwrite_r+0xae>
   1560c:	4639      	mov	r1, r7
   1560e:	465a      	mov	r2, fp
   15610:	f7fc f870 	bl	116f4 <memmove>
   15614:	6823      	ldr	r3, [r4, #0]
   15616:	445b      	add	r3, fp
   15618:	6023      	str	r3, [r4, #0]
   1561a:	4621      	mov	r1, r4
   1561c:	4640      	mov	r0, r8
   1561e:	f7ff fda3 	bl	15168 <_fflush_r>
   15622:	2800      	cmp	r0, #0
   15624:	f43f af55 	beq.w	154d2 <__sfvwrite_r+0x15a>
   15628:	e725      	b.n	15476 <__sfvwrite_r+0xfe>
   1562a:	4640      	mov	r0, r8
   1562c:	f7fc ff96 	bl	1255c <_realloc_r>
   15630:	4603      	mov	r3, r0
   15632:	2800      	cmp	r0, #0
   15634:	d1de      	bne.n	155f4 <__sfvwrite_r+0x27c>
   15636:	6921      	ldr	r1, [r4, #16]
   15638:	4640      	mov	r0, r8
   1563a:	f7fd f9cb 	bl	129d4 <_free_r>
   1563e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15642:	220c      	movs	r2, #12
   15644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15648:	f8c8 2000 	str.w	r2, [r8]
   1564c:	e715      	b.n	1547a <__sfvwrite_r+0x102>
   1564e:	1c72      	adds	r2, r6, #1
   15650:	4691      	mov	r9, r2
   15652:	e726      	b.n	154a2 <__sfvwrite_r+0x12a>
   15654:	220c      	movs	r2, #12
   15656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1565a:	f8c8 2000 	str.w	r2, [r8]
   1565e:	e70c      	b.n	1547a <__sfvwrite_r+0x102>
   15660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15664:	e6ba      	b.n	153dc <__sfvwrite_r+0x64>
   15666:	bf00      	nop
   15668:	7ffffc00 	.word	0x7ffffc00

0001566c <__swbuf_r>:
   1566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1566e:	460d      	mov	r5, r1
   15670:	4614      	mov	r4, r2
   15672:	4606      	mov	r6, r0
   15674:	b110      	cbz	r0, 1567c <__swbuf_r+0x10>
   15676:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15678:	2b00      	cmp	r3, #0
   1567a:	d04c      	beq.n	15716 <__swbuf_r+0xaa>
   1567c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15680:	69a3      	ldr	r3, [r4, #24]
   15682:	60a3      	str	r3, [r4, #8]
   15684:	0717      	lsls	r7, r2, #28
   15686:	b290      	uxth	r0, r2
   15688:	d51b      	bpl.n	156c2 <__swbuf_r+0x56>
   1568a:	6923      	ldr	r3, [r4, #16]
   1568c:	b1cb      	cbz	r3, 156c2 <__swbuf_r+0x56>
   1568e:	b2ed      	uxtb	r5, r5
   15690:	0481      	lsls	r1, r0, #18
   15692:	462f      	mov	r7, r5
   15694:	d522      	bpl.n	156dc <__swbuf_r+0x70>
   15696:	6822      	ldr	r2, [r4, #0]
   15698:	6961      	ldr	r1, [r4, #20]
   1569a:	1ad3      	subs	r3, r2, r3
   1569c:	4299      	cmp	r1, r3
   1569e:	dd29      	ble.n	156f4 <__swbuf_r+0x88>
   156a0:	3301      	adds	r3, #1
   156a2:	68a1      	ldr	r1, [r4, #8]
   156a4:	3901      	subs	r1, #1
   156a6:	60a1      	str	r1, [r4, #8]
   156a8:	1c51      	adds	r1, r2, #1
   156aa:	6021      	str	r1, [r4, #0]
   156ac:	7015      	strb	r5, [r2, #0]
   156ae:	6962      	ldr	r2, [r4, #20]
   156b0:	429a      	cmp	r2, r3
   156b2:	d027      	beq.n	15704 <__swbuf_r+0x98>
   156b4:	89a3      	ldrh	r3, [r4, #12]
   156b6:	07db      	lsls	r3, r3, #31
   156b8:	d501      	bpl.n	156be <__swbuf_r+0x52>
   156ba:	2d0a      	cmp	r5, #10
   156bc:	d022      	beq.n	15704 <__swbuf_r+0x98>
   156be:	4638      	mov	r0, r7
   156c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   156c2:	4621      	mov	r1, r4
   156c4:	4630      	mov	r0, r6
   156c6:	f7fe fcbb 	bl	14040 <__swsetup_r>
   156ca:	bb08      	cbnz	r0, 15710 <__swbuf_r+0xa4>
   156cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   156d0:	6923      	ldr	r3, [r4, #16]
   156d2:	b290      	uxth	r0, r2
   156d4:	b2ed      	uxtb	r5, r5
   156d6:	0481      	lsls	r1, r0, #18
   156d8:	462f      	mov	r7, r5
   156da:	d4dc      	bmi.n	15696 <__swbuf_r+0x2a>
   156dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   156e0:	81a2      	strh	r2, [r4, #12]
   156e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   156e4:	6961      	ldr	r1, [r4, #20]
   156e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   156ea:	6662      	str	r2, [r4, #100]	; 0x64
   156ec:	6822      	ldr	r2, [r4, #0]
   156ee:	1ad3      	subs	r3, r2, r3
   156f0:	4299      	cmp	r1, r3
   156f2:	dcd5      	bgt.n	156a0 <__swbuf_r+0x34>
   156f4:	4621      	mov	r1, r4
   156f6:	4630      	mov	r0, r6
   156f8:	f7ff fd36 	bl	15168 <_fflush_r>
   156fc:	b940      	cbnz	r0, 15710 <__swbuf_r+0xa4>
   156fe:	6822      	ldr	r2, [r4, #0]
   15700:	2301      	movs	r3, #1
   15702:	e7ce      	b.n	156a2 <__swbuf_r+0x36>
   15704:	4621      	mov	r1, r4
   15706:	4630      	mov	r0, r6
   15708:	f7ff fd2e 	bl	15168 <_fflush_r>
   1570c:	2800      	cmp	r0, #0
   1570e:	d0d6      	beq.n	156be <__swbuf_r+0x52>
   15710:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15714:	e7d3      	b.n	156be <__swbuf_r+0x52>
   15716:	f7fc fe1d 	bl	12354 <__sinit>
   1571a:	e7af      	b.n	1567c <__swbuf_r+0x10>

0001571c <_wcsnrtombs_l>:
   1571c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15720:	b08b      	sub	sp, #44	; 0x2c
   15722:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   15726:	9f14      	ldr	r7, [sp, #80]	; 0x50
   15728:	9103      	str	r1, [sp, #12]
   1572a:	4681      	mov	r9, r0
   1572c:	9205      	str	r2, [sp, #20]
   1572e:	461e      	mov	r6, r3
   15730:	f1b8 0f00 	cmp.w	r8, #0
   15734:	d05c      	beq.n	157f0 <_wcsnrtombs_l+0xd4>
   15736:	9b03      	ldr	r3, [sp, #12]
   15738:	2b00      	cmp	r3, #0
   1573a:	d05e      	beq.n	157fa <_wcsnrtombs_l+0xde>
   1573c:	9b05      	ldr	r3, [sp, #20]
   1573e:	681d      	ldr	r5, [r3, #0]
   15740:	2f00      	cmp	r7, #0
   15742:	d06a      	beq.n	1581a <_wcsnrtombs_l+0xfe>
   15744:	1e74      	subs	r4, r6, #1
   15746:	b34e      	cbz	r6, 1579c <_wcsnrtombs_l+0x80>
   15748:	9b03      	ldr	r3, [sp, #12]
   1574a:	9304      	str	r3, [sp, #16]
   1574c:	3d04      	subs	r5, #4
   1574e:	2600      	movs	r6, #0
   15750:	9501      	str	r5, [sp, #4]
   15752:	e00b      	b.n	1576c <_wcsnrtombs_l+0x50>
   15754:	9b03      	ldr	r3, [sp, #12]
   15756:	bb2b      	cbnz	r3, 157a4 <_wcsnrtombs_l+0x88>
   15758:	9b01      	ldr	r3, [sp, #4]
   1575a:	681a      	ldr	r2, [r3, #0]
   1575c:	2a00      	cmp	r2, #0
   1575e:	d03a      	beq.n	157d6 <_wcsnrtombs_l+0xba>
   15760:	45bc      	cmp	ip, r7
   15762:	d25c      	bcs.n	1581e <_wcsnrtombs_l+0x102>
   15764:	3c01      	subs	r4, #1
   15766:	1c63      	adds	r3, r4, #1
   15768:	4666      	mov	r6, ip
   1576a:	d017      	beq.n	1579c <_wcsnrtombs_l+0x80>
   1576c:	f8d8 3000 	ldr.w	r3, [r8]
   15770:	9302      	str	r3, [sp, #8]
   15772:	9b01      	ldr	r3, [sp, #4]
   15774:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   15778:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1577c:	9301      	str	r3, [sp, #4]
   1577e:	a907      	add	r1, sp, #28
   15780:	4643      	mov	r3, r8
   15782:	4648      	mov	r0, r9
   15784:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15788:	47a8      	blx	r5
   1578a:	1c42      	adds	r2, r0, #1
   1578c:	d03a      	beq.n	15804 <_wcsnrtombs_l+0xe8>
   1578e:	eb00 0c06 	add.w	ip, r0, r6
   15792:	45bc      	cmp	ip, r7
   15794:	d9de      	bls.n	15754 <_wcsnrtombs_l+0x38>
   15796:	9b02      	ldr	r3, [sp, #8]
   15798:	e9c8 3b00 	strd	r3, fp, [r8]
   1579c:	4630      	mov	r0, r6
   1579e:	b00b      	add	sp, #44	; 0x2c
   157a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a4:	2800      	cmp	r0, #0
   157a6:	dd0e      	ble.n	157c6 <_wcsnrtombs_l+0xaa>
   157a8:	9b04      	ldr	r3, [sp, #16]
   157aa:	9d01      	ldr	r5, [sp, #4]
   157ac:	4418      	add	r0, r3
   157ae:	1e5a      	subs	r2, r3, #1
   157b0:	a907      	add	r1, sp, #28
   157b2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   157b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   157ba:	f802 3f01 	strb.w	r3, [r2, #1]!
   157be:	4572      	cmp	r2, lr
   157c0:	d1f9      	bne.n	157b6 <_wcsnrtombs_l+0x9a>
   157c2:	9501      	str	r5, [sp, #4]
   157c4:	9004      	str	r0, [sp, #16]
   157c6:	9b05      	ldr	r3, [sp, #20]
   157c8:	681a      	ldr	r2, [r3, #0]
   157ca:	3204      	adds	r2, #4
   157cc:	601a      	str	r2, [r3, #0]
   157ce:	9b01      	ldr	r3, [sp, #4]
   157d0:	681a      	ldr	r2, [r3, #0]
   157d2:	2a00      	cmp	r2, #0
   157d4:	d1c4      	bne.n	15760 <_wcsnrtombs_l+0x44>
   157d6:	9b03      	ldr	r3, [sp, #12]
   157d8:	b10b      	cbz	r3, 157de <_wcsnrtombs_l+0xc2>
   157da:	9b05      	ldr	r3, [sp, #20]
   157dc:	601a      	str	r2, [r3, #0]
   157de:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   157e2:	2200      	movs	r2, #0
   157e4:	4630      	mov	r0, r6
   157e6:	f8c8 2000 	str.w	r2, [r8]
   157ea:	b00b      	add	sp, #44	; 0x2c
   157ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f0:	9b03      	ldr	r3, [sp, #12]
   157f2:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   157f6:	2b00      	cmp	r3, #0
   157f8:	d1a0      	bne.n	1573c <_wcsnrtombs_l+0x20>
   157fa:	9b05      	ldr	r3, [sp, #20]
   157fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15800:	681d      	ldr	r5, [r3, #0]
   15802:	e79f      	b.n	15744 <_wcsnrtombs_l+0x28>
   15804:	4606      	mov	r6, r0
   15806:	218a      	movs	r1, #138	; 0x8a
   15808:	2200      	movs	r2, #0
   1580a:	4630      	mov	r0, r6
   1580c:	f8c9 1000 	str.w	r1, [r9]
   15810:	f8c8 2000 	str.w	r2, [r8]
   15814:	b00b      	add	sp, #44	; 0x2c
   15816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1581a:	463e      	mov	r6, r7
   1581c:	e7be      	b.n	1579c <_wcsnrtombs_l+0x80>
   1581e:	4666      	mov	r6, ip
   15820:	e7bc      	b.n	1579c <_wcsnrtombs_l+0x80>
   15822:	bf00      	nop

00015824 <_wcsnrtombs_r>:
   15824:	b510      	push	{r4, lr}
   15826:	b084      	sub	sp, #16
   15828:	4c05      	ldr	r4, [pc, #20]	; (15840 <_wcsnrtombs_r+0x1c>)
   1582a:	9806      	ldr	r0, [sp, #24]
   1582c:	9000      	str	r0, [sp, #0]
   1582e:	9807      	ldr	r0, [sp, #28]
   15830:	9001      	str	r0, [sp, #4]
   15832:	4804      	ldr	r0, [pc, #16]	; (15844 <_wcsnrtombs_r+0x20>)
   15834:	6800      	ldr	r0, [r0, #0]
   15836:	9402      	str	r4, [sp, #8]
   15838:	f7ff ff70 	bl	1571c <_wcsnrtombs_l>
   1583c:	b004      	add	sp, #16
   1583e:	bd10      	pop	{r4, pc}
   15840:	20003348 	.word	0x20003348
   15844:	200038d0 	.word	0x200038d0

00015848 <___ZN7TwoWire5beginEv_veneer>:
   15848:	f85f f000 	ldr.w	pc, [pc]	; 1584c <___ZN7TwoWire5beginEv_veneer+0x4>
   1584c:	600017c9 	.word	0x600017c9

00015850 <___reboot_Teensyduino__veneer>:
   15850:	f85f f000 	ldr.w	pc, [pc]	; 15854 <___reboot_Teensyduino__veneer+0x4>
   15854:	60001ee5 	.word	0x60001ee5

00015858 <___init_veneer>:
   15858:	f85f f000 	ldr.w	pc, [pc]	; 1585c <___init_veneer+0x4>
   1585c:	60001f39 	.word	0x60001f39

Disassembly of section .fini:

00015860 <_fini>:
   15860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15862:	bf00      	nop
