
/home/james/Documents/dRehmFlight/Versions/dRehmFlight_rip/build/dRehmFlight_rip.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001400:	b580      	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001402:	f000 fa5d 	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <ResetHandler2+0x1e0>)
60001408:	2208      	movs	r2, #8
6000140a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000140e:	4a75      	ldr	r2, [pc, #468]	; (600015e4 <ResetHandler2+0x1e4>)
60001410:	4b75      	ldr	r3, [pc, #468]	; (600015e8 <ResetHandler2+0x1e8>)
60001412:	429a      	cmp	r2, r3
60001414:	d00f      	beq.n	60001436 <ResetHandler2+0x36>
	while (dest < dest_end) {
60001416:	4b75      	ldr	r3, [pc, #468]	; (600015ec <ResetHandler2+0x1ec>)
60001418:	429a      	cmp	r2, r3
6000141a:	d20c      	bcs.n	60001436 <ResetHandler2+0x36>
6000141c:	1e58      	subs	r0, r3, #1
6000141e:	1a80      	subs	r0, r0, r2
60001420:	f020 0003 	bic.w	r0, r0, #3
60001424:	3004      	adds	r0, #4
60001426:	4b70      	ldr	r3, [pc, #448]	; (600015e8 <ResetHandler2+0x1e8>)
60001428:	4418      	add	r0, r3
		*dest++ = *src++;
6000142a:	f853 1b04 	ldr.w	r1, [r3], #4
6000142e:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
60001432:	4283      	cmp	r3, r0
60001434:	d1f9      	bne.n	6000142a <ResetHandler2+0x2a>
	if (dest == src) return;
60001436:	4a6e      	ldr	r2, [pc, #440]	; (600015f0 <ResetHandler2+0x1f0>)
60001438:	4b6e      	ldr	r3, [pc, #440]	; (600015f4 <ResetHandler2+0x1f4>)
6000143a:	429a      	cmp	r2, r3
6000143c:	d010      	beq.n	60001460 <ResetHandler2+0x60>
	while (dest < dest_end) {
6000143e:	4b6e      	ldr	r3, [pc, #440]	; (600015f8 <ResetHandler2+0x1f8>)
60001440:	429a      	cmp	r2, r3
60001442:	d20d      	bcs.n	60001460 <ResetHandler2+0x60>
60001444:	4a6a      	ldr	r2, [pc, #424]	; (600015f0 <ResetHandler2+0x1f0>)
60001446:	486d      	ldr	r0, [pc, #436]	; (600015fc <ResetHandler2+0x1fc>)
60001448:	1a80      	subs	r0, r0, r2
6000144a:	f020 0003 	bic.w	r0, r0, #3
6000144e:	3004      	adds	r0, #4
60001450:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <ResetHandler2+0x1f4>)
60001452:	4418      	add	r0, r3
		*dest++ = *src++;
60001454:	f853 1b04 	ldr.w	r1, [r3], #4
60001458:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
6000145c:	4283      	cmp	r3, r0
6000145e:	d1f9      	bne.n	60001454 <ResetHandler2+0x54>
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001460:	4a67      	ldr	r2, [pc, #412]	; (60001600 <ResetHandler2+0x200>)
60001462:	4b68      	ldr	r3, [pc, #416]	; (60001604 <ResetHandler2+0x204>)
60001464:	429a      	cmp	r2, r3
60001466:	d20b      	bcs.n	60001480 <ResetHandler2+0x80>
60001468:	4b65      	ldr	r3, [pc, #404]	; (60001600 <ResetHandler2+0x200>)
6000146a:	4a67      	ldr	r2, [pc, #412]	; (60001608 <ResetHandler2+0x208>)
6000146c:	1ad2      	subs	r2, r2, r3
6000146e:	f022 0203 	bic.w	r2, r2, #3
60001472:	3204      	adds	r2, #4
60001474:	441a      	add	r2, r3
		*dest++ = 0;
60001476:	2100      	movs	r1, #0
60001478:	f843 1b04 	str.w	r1, [r3], #4
	while (dest < dest_end) {
6000147c:	4293      	cmp	r3, r2
6000147e:	d1fb      	bne.n	60001478 <ResetHandler2+0x78>
	SCB_CPACR = 0x00F00000;
60001480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001484:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
60001488:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	2300      	movs	r3, #0
6000148e:	495f      	ldr	r1, [pc, #380]	; (6000160c <ResetHandler2+0x20c>)
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler2+0x210>)
60001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
60001496:	3301      	adds	r3, #1
60001498:	2bb0      	cmp	r3, #176	; 0xb0
6000149a:	d1fa      	bne.n	60001492 <ResetHandler2+0x92>
6000149c:	4b5d      	ldr	r3, [pc, #372]	; (60001614 <ResetHandler2+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149e:	2180      	movs	r1, #128	; 0x80
600014a0:	4a5d      	ldr	r2, [pc, #372]	; (60001618 <ResetHandler2+0x218>)
600014a2:	f803 1b01 	strb.w	r1, [r3], #1
600014a6:	4293      	cmp	r3, r2
600014a8:	d1fb      	bne.n	600014a2 <ResetHandler2+0xa2>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014aa:	4e58      	ldr	r6, [pc, #352]	; (6000160c <ResetHandler2+0x20c>)
600014ac:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014b0:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b4:	4d4a      	ldr	r5, [pc, #296]	; (600015e0 <ResetHandler2+0x1e0>)
600014b6:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014ba:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000164c <ResetHandler2+0x24c>
600014c2:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014c6:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ca:	f8df 9184 	ldr.w	r9, [pc, #388]	; 60001650 <ResetHandler2+0x250>
600014ce:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014da:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	4f4f      	ldr	r7, [pc, #316]	; (6000161c <ResetHandler2+0x21c>)
600014e0:	69fb      	ldr	r3, [r7, #28]
600014e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ea:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f6:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	4b49      	ldr	r3, [pc, #292]	; (60001620 <ResetHandler2+0x220>)
600014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014fe:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001500:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001502:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001504:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001506:	f000 f9e0 	bl	600018ca <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
6000150a:	4b46      	ldr	r3, [pc, #280]	; (60001624 <ResetHandler2+0x224>)
6000150c:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150e:	4b46      	ldr	r3, [pc, #280]	; (60001628 <ResetHandler2+0x228>)
60001510:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	2363      	movs	r3, #99	; 0x63
60001514:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
60001516:	2600      	movs	r6, #0
60001518:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151a:	2303      	movs	r3, #3
6000151c:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151e:	4b43      	ldr	r3, [pc, #268]	; (6000162c <ResetHandler2+0x22c>)
60001520:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001524:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
60001528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000152c:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001530:	4b3f      	ldr	r3, [pc, #252]	; (60001630 <ResetHandler2+0x230>)
60001532:	681a      	ldr	r2, [r3, #0]
60001534:	f042 0201 	orr.w	r2, r2, #1
60001538:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153a:	685a      	ldr	r2, [r3, #4]
6000153c:	4b3d      	ldr	r3, [pc, #244]	; (60001634 <ResetHandler2+0x234>)
6000153e:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001540:	f000 fb86 	bl	60001c50 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001544:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001548:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154c:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001550:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001554:	4838      	ldr	r0, [pc, #224]	; (60001638 <ResetHandler2+0x238>)
60001556:	f000 fd03 	bl	60001f60 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
6000155c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001560:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	4b36      	ldr	r3, [pc, #216]	; (6000163c <ResetHandler2+0x23c>)
60001564:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
60001566:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000156a:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001572:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001576:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
6000157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
6000157c:	f013 0f01 	tst.w	r3, #1
60001580:	d109      	bne.n	60001596 <ResetHandler2+0x196>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001582:	4b2f      	ldr	r3, [pc, #188]	; (60001640 <ResetHandler2+0x240>)
60001584:	4a2f      	ldr	r2, [pc, #188]	; (60001644 <ResetHandler2+0x244>)
60001586:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001588:	f642 6215 	movw	r2, #11797	; 0x2e15
6000158c:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000158e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001590:	f042 0201 	orr.w	r2, r2, #1
60001594:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001596:	4a2a      	ldr	r2, [pc, #168]	; (60001640 <ResetHandler2+0x240>)
60001598:	6893      	ldr	r3, [r2, #8]
6000159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000159e:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015a0:	f000 fa0c 	bl	600019bc <configure_external_ram>
	analog_init();
600015a4:	f000 f932 	bl	6000180c <analog_init>
	pwm_init();
600015a8:	f000 fcce 	bl	60001f48 <__pwm_init_veneer>
	tempmon_init();
600015ac:	f000 fb80 	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
600015b0:	f000 f987 	bl	600018c2 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b4:	4a24      	ldr	r2, [pc, #144]	; (60001648 <ResetHandler2+0x248>)
600015b6:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	2b13      	cmp	r3, #19
600015ba:	d9fc      	bls.n	600015b6 <ResetHandler2+0x1b6>
	usb_init();
600015bc:	f000 fc1c 	bl	60001df8 <usb_init>
600015c0:	4a21      	ldr	r2, [pc, #132]	; (60001648 <ResetHandler2+0x248>)
600015c2:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015c8:	d3fb      	bcc.n	600015c2 <ResetHandler2+0x1c2>
	startup_debug_reset();
600015ca:	f000 f97c 	bl	600018c6 <startup_debug_reset>
	startup_late_hook();
600015ce:	f000 f979 	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015d2:	f000 fccd 	bl	60001f70 <____libc_init_array_veneer>
	main();
600015d6:	f000 fcc7 	bl	60001f68 <__main_veneer>
	while (1) asm("WFI");
600015da:	bf30      	wfi
600015dc:	e7fd      	b.n	600015da <ResetHandler2+0x1da>
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00000000 	.word	0x00000000
600015e8:	600021b0 	.word	0x600021b0
600015ec:	00015928 	.word	0x00015928
600015f0:	20000000 	.word	0x20000000
600015f4:	60017adc 	.word	0x60017adc
600015f8:	200042c0 	.word	0x200042c0
600015fc:	200042bf 	.word	0x200042bf
60001600:	200042c0 	.word	0x200042c0
60001604:	20005880 	.word	0x20005880
60001608:	2000587f 	.word	0x2000587f
6000160c:	20004000 	.word	0x20004000
60001610:	0000e1b5 	.word	0x0000e1b5
60001614:	e000e400 	.word	0xe000e400
60001618:	e000e4a0 	.word	0xe000e4a0
6000161c:	400fc000 	.word	0x400fc000
60001620:	400ac000 	.word	0x400ac000
60001624:	0000c3d9 	.word	0x0000c3d9
60001628:	0000c3e1 	.word	0x0000c3e1
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	200057f4 	.word	0x200057f4
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	200057f8 	.word	0x200057f8
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001654:	4b07      	ldr	r3, [pc, #28]	; (60001674 <ResetHandler+0x20>)
60001656:	4a08      	ldr	r2, [pc, #32]	; (60001678 <ResetHandler+0x24>)
60001658:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000165a:	4a08      	ldr	r2, [pc, #32]	; (6000167c <ResetHandler+0x28>)
6000165c:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165e:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
60001662:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001664:	4b06      	ldr	r3, [pc, #24]	; (60001680 <ResetHandler+0x2c>)
60001666:	469d      	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
60001668:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000166c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001670:	f7ff fec6 	bl	60001400 <ResetHandler2>
60001674:	400ac000 	.word	0x400ac000
60001678:	aaaaaabf 	.word	0xaaaaaabf
6000167c:	00200007 	.word	0x00200007
60001680:	20068000 	.word	0x20068000

60001684 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
60001684:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	4a0f      	ldr	r2, [pc, #60]	; (600016c4 <TwoWire::configSDApin(unsigned char)+0x40>)
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000168e:	7a1b      	ldrb	r3, [r3, #8]
60001690:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001694:	689b      	ldr	r3, [r3, #8]
60001696:	4c0c      	ldr	r4, [pc, #48]	; (600016c8 <TwoWire::configSDApin(unsigned char)+0x44>)
60001698:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000169a:	6943      	ldr	r3, [r0, #20]
6000169c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016a0:	f893 c008 	ldrb.w	ip, [r3, #8]
600016a4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016a8:	6852      	ldr	r2, [r2, #4]
600016aa:	68db      	ldr	r3, [r3, #12]
600016ac:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ae:	6943      	ldr	r3, [r0, #20]
600016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016b4:	690b      	ldr	r3, [r1, #16]
600016b6:	b10b      	cbz	r3, 600016bc <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016b8:	694a      	ldr	r2, [r1, #20]
600016ba:	601a      	str	r2, [r3, #0]
	}
}
600016bc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016c0:	4770      	bx	lr
600016c2:	bf00      	nop
600016c4:	20002ba4 	.word	0x20002ba4
600016c8:	0001f861 	.word	0x0001f861

600016cc <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016cc:	b538      	push	{r3, r4, r5, lr}
600016ce:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016d0:	6943      	ldr	r3, [r0, #20]
600016d2:	7e02      	ldrb	r2, [r0, #24]
600016d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016d8:	7a10      	ldrb	r0, [r2, #8]
600016da:	4288      	cmp	r0, r1
600016dc:	d009      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016de:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016e0:	2aff      	cmp	r2, #255	; 0xff
600016e2:	d006      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016e4:	4291      	cmp	r1, r2
600016e6:	d007      	beq.n	600016f8 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016e8:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
600016ea:	2aff      	cmp	r2, #255	; 0xff
600016ec:	d001      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016ee:	428a      	cmp	r2, r1
600016f0:	d000      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x28>
}
600016f2:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016f4:	2501      	movs	r5, #1
600016f6:	e000      	b.n	600016fa <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
600016f8:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016fa:	681a      	ldr	r2, [r3, #0]
600016fc:	6812      	ldr	r2, [r2, #0]
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	421a      	tst	r2, r3
60001702:	d101      	bne.n	60001708 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001704:	7625      	strb	r5, [r4, #24]
60001706:	e7f4      	b.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001708:	4b05      	ldr	r3, [pc, #20]	; (60001720 <TwoWire::setSDA(unsigned char)+0x54>)
6000170a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000170e:	685b      	ldr	r3, [r3, #4]
60001710:	2205      	movs	r2, #5
60001712:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001714:	4629      	mov	r1, r5
60001716:	4620      	mov	r0, r4
60001718:	f7ff ffb4 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
6000171c:	e7f2      	b.n	60001704 <TwoWire::setSDA(unsigned char)+0x38>
6000171e:	bf00      	nop
60001720:	20002ba4 	.word	0x20002ba4

60001724 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001724:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001726:	4a0f      	ldr	r2, [pc, #60]	; (60001764 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
60001732:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001736:	689b      	ldr	r3, [r3, #8]
60001738:	4c0b      	ldr	r4, [pc, #44]	; (60001768 <TwoWire::configSCLpin(unsigned char)+0x44>)
6000173a:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000173c:	6943      	ldr	r3, [r0, #20]
6000173e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
60001742:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001746:	eb02 120c 	add.w	r2, r2, ip, lsl #4
6000174a:	6852      	ldr	r2, [r2, #4]
6000174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000174e:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001750:	6943      	ldr	r3, [r0, #20]
60001752:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001758:	b10b      	cbz	r3, 6000175e <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000175a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
6000175c:	601a      	str	r2, [r3, #0]
	}
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001762:	4770      	bx	lr
60001764:	20002ba4 	.word	0x20002ba4
60001768:	0001f861 	.word	0x0001f861

6000176c <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000176c:	b538      	push	{r3, r4, r5, lr}
6000176e:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001770:	6943      	ldr	r3, [r0, #20]
60001772:	7e42      	ldrb	r2, [r0, #25]
60001774:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001778:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
6000177c:	4288      	cmp	r0, r1
6000177e:	d00b      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001780:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001784:	2aff      	cmp	r2, #255	; 0xff
60001786:	d007      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001788:	4291      	cmp	r1, r2
6000178a:	d008      	beq.n	6000179e <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
60001790:	2aff      	cmp	r2, #255	; 0xff
60001792:	d001      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001794:	428a      	cmp	r2, r1
60001796:	d000      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x2e>
}
60001798:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000179a:	2501      	movs	r5, #1
6000179c:	e000      	b.n	600017a0 <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
6000179e:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a0:	681a      	ldr	r2, [r3, #0]
600017a2:	6812      	ldr	r2, [r2, #0]
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	421a      	tst	r2, r3
600017a8:	d101      	bne.n	600017ae <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017aa:	7665      	strb	r5, [r4, #25]
600017ac:	e7f4      	b.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	4b05      	ldr	r3, [pc, #20]	; (600017c4 <TwoWire::setSCL(unsigned char)+0x58>)
600017b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	2205      	movs	r2, #5
600017b8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017ba:	4629      	mov	r1, r5
600017bc:	4620      	mov	r0, r4
600017be:	f7ff ffb1 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
600017c2:	e7f2      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x3e>
600017c4:	20002ba4 	.word	0x20002ba4

600017c8 <TwoWire::begin()>:
{
600017c8:	b510      	push	{r4, lr}
600017ca:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	4a0d      	ldr	r2, [pc, #52]	; (60001804 <TwoWire::begin()+0x3c>)
600017ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
600017d0:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600017d8:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6941      	ldr	r1, [r0, #20]
600017dc:	680a      	ldr	r2, [r1, #0]
600017de:	6813      	ldr	r3, [r2, #0]
600017e0:	6849      	ldr	r1, [r1, #4]
600017e2:	430b      	orrs	r3, r1
600017e4:	6013      	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017e6:	6903      	ldr	r3, [r0, #16]
600017e8:	2202      	movs	r2, #2
600017ea:	611a      	str	r2, [r3, #16]
	setClock(100000);
600017ec:	4906      	ldr	r1, [pc, #24]	; (60001808 <TwoWire::begin()+0x40>)
600017ee:	f000 fbcb 	bl	60001f88 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017f2:	7e21      	ldrb	r1, [r4, #24]
600017f4:	4620      	mov	r0, r4
600017f6:	f7ff ff45 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017fa:	7e61      	ldrb	r1, [r4, #25]
600017fc:	4620      	mov	r0, r4
600017fe:	f7ff ff91 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
}
60001802:	bd10      	pop	{r4, pc}
60001804:	400fc000 	.word	0x400fc000
60001808:	000186a0 	.word	0x000186a0

6000180c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000180c:	4b11      	ldr	r3, [pc, #68]	; (60001854 <analog_init+0x48>)
6000180e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001810:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001814:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001818:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000181c:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000181e:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
60001822:	f240 6237 	movw	r2, #1591	; 0x637
60001826:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001828:	22a0      	movs	r2, #160	; 0xa0
6000182a:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000182c:	461a      	mov	r2, r3
6000182e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001830:	f013 0f80 	tst.w	r3, #128	; 0x80
60001834:	d1fb      	bne.n	6000182e <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001836:	4b08      	ldr	r3, [pc, #32]	; (60001858 <analog_init+0x4c>)
60001838:	f240 6237 	movw	r2, #1591	; 0x637
6000183c:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000183e:	22a0      	movs	r2, #160	; 0xa0
60001840:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001842:	461a      	mov	r2, r3
60001844:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001846:	f013 0f80 	tst.w	r3, #128	; 0x80
6000184a:	d1fb      	bne.n	60001844 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
6000184c:	4b03      	ldr	r3, [pc, #12]	; (6000185c <analog_init+0x50>)
6000184e:	2200      	movs	r2, #0
60001850:	701a      	strb	r2, [r3, #0]
}
60001852:	4770      	bx	lr
60001854:	400fc000 	.word	0x400fc000
60001858:	400c8000 	.word	0x400c8000
6000185c:	20005839 	.word	0x20005839

60001860 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001860:	4b09      	ldr	r3, [pc, #36]	; (60001888 <flexspi2_command+0x28>)
60001862:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001866:	0400      	lsls	r0, r0, #16
60001868:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
6000186c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001870:	2201      	movs	r2, #1
60001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001876:	461a      	mov	r2, r3
60001878:	6953      	ldr	r3, [r2, #20]
6000187a:	f013 0f01 	tst.w	r3, #1
6000187e:	d0fb      	beq.n	60001878 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001880:	4b01      	ldr	r3, [pc, #4]	; (60001888 <flexspi2_command+0x28>)
60001882:	2201      	movs	r2, #1
60001884:	615a      	str	r2, [r3, #20]
}
60001886:	4770      	bx	lr
60001888:	402a4000 	.word	0x402a4000

6000188c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000188c:	4b0a      	ldr	r3, [pc, #40]	; (600018b8 <flexspi2_psram_id+0x2c>)
6000188e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001892:	4a0a      	ldr	r2, [pc, #40]	; (600018bc <flexspi2_psram_id+0x30>)
60001894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001898:	2201      	movs	r2, #1
6000189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000189e:	461a      	mov	r2, r3
600018a0:	6953      	ldr	r3, [r2, #20]
600018a2:	f013 0f01 	tst.w	r3, #1
600018a6:	d0fb      	beq.n	600018a0 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
600018a8:	4b03      	ldr	r3, [pc, #12]	; (600018b8 <flexspi2_psram_id+0x2c>)
600018aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600018ae:	2221      	movs	r2, #33	; 0x21
600018b0:	615a      	str	r2, [r3, #20]
}
600018b2:	b280      	uxth	r0, r0
600018b4:	4770      	bx	lr
600018b6:	bf00      	nop
600018b8:	402a4000 	.word	0x402a4000
600018bc:	00030004 	.word	0x00030004

600018c0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018c0:	4770      	bx	lr

600018c2 <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
600018c2:	4770      	bx	lr

600018c4 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	4770      	bx	lr

600018c6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018c6:	bf00      	nop
600018c8:	4770      	bx	lr

600018ca <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018ce:	2100      	movs	r1, #0
600018d0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	2210      	movs	r2, #16
600018d6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018da:	4a28      	ldr	r2, [pc, #160]	; (6000197c <configure_cache+0xb2>)
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018e0:	2211      	movs	r2, #17
600018e2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018e6:	4a26      	ldr	r2, [pc, #152]	; (60001980 <configure_cache+0xb6>)
600018e8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018ec:	2212      	movs	r2, #18
600018ee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018f2:	4a24      	ldr	r2, [pc, #144]	; (60001984 <configure_cache+0xba>)
600018f4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018f8:	4a23      	ldr	r2, [pc, #140]	; (60001988 <configure_cache+0xbe>)
600018fa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018fe:	4a23      	ldr	r2, [pc, #140]	; (6000198c <configure_cache+0xc2>)
60001900:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001904:	4a22      	ldr	r2, [pc, #136]	; (60001990 <configure_cache+0xc6>)
60001906:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000190a:	4a22      	ldr	r2, [pc, #136]	; (60001994 <configure_cache+0xca>)
6000190c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001910:	4a21      	ldr	r2, [pc, #132]	; (60001998 <configure_cache+0xce>)
60001912:	f042 0215 	orr.w	r2, r2, #21
60001916:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000191a:	4a20      	ldr	r2, [pc, #128]	; (6000199c <configure_cache+0xd2>)
6000191c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001920:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
60001924:	320d      	adds	r2, #13
60001926:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000192a:	4a1d      	ldr	r2, [pc, #116]	; (600019a0 <configure_cache+0xd6>)
6000192c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001930:	4a1c      	ldr	r2, [pc, #112]	; (600019a4 <configure_cache+0xda>)
60001932:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001936:	4a1c      	ldr	r2, [pc, #112]	; (600019a8 <configure_cache+0xde>)
60001938:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000193c:	4a1b      	ldr	r2, [pc, #108]	; (600019ac <configure_cache+0xe2>)
6000193e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001942:	4a1b      	ldr	r2, [pc, #108]	; (600019b0 <configure_cache+0xe6>)
60001944:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001948:	4a1a      	ldr	r2, [pc, #104]	; (600019b4 <configure_cache+0xea>)
6000194a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000194e:	4a1a      	ldr	r2, [pc, #104]	; (600019b8 <configure_cache+0xee>)
60001950:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001954:	2201      	movs	r2, #1
60001956:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000195a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000195e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001962:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000196e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60001972:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001976:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000197a:	4770      	bx	lr
6000197c:	1000003f 	.word	0x1000003f
60001980:	03080025 	.word	0x03080025
60001984:	00100009 	.word	0x00100009
60001988:	00200013 	.word	0x00200013
6000198c:	07020021 	.word	0x07020021
60001990:	20000014 	.word	0x20000014
60001994:	13080025 	.word	0x13080025
60001998:	20005880 	.word	0x20005880
6000199c:	10000009 	.word	0x10000009
600019a0:	130b0027 	.word	0x130b0027
600019a4:	40000017 	.word	0x40000017
600019a8:	13100033 	.word	0x13100033
600019ac:	60000018 	.word	0x60000018
600019b0:	070b002f 	.word	0x070b002f
600019b4:	70000019 	.word	0x70000019
600019b8:	130b002f 	.word	0x130b002f

600019bc <configure_external_ram>:
{
600019bc:	b510      	push	{r4, lr}
600019be:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019c0:	4b8c      	ldr	r3, [pc, #560]	; (60001bf4 <configure_external_ram+0x238>)
600019c2:	4a8d      	ldr	r2, [pc, #564]	; (60001bf8 <configure_external_ram+0x23c>)
600019c4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019c8:	498c      	ldr	r1, [pc, #560]	; (60001bfc <configure_external_ram+0x240>)
600019ca:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600019d2:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
600019d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019da:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
600019de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019ea:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019ee:	2218      	movs	r2, #24
600019f0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019f2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019f4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019f6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019f8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
60001a0a:	2201      	movs	r2, #1
60001a0c:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a10:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a14:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a18:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a1c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a20:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a24:	4b76      	ldr	r3, [pc, #472]	; (60001c00 <configure_external_ram+0x244>)
60001a26:	699a      	ldr	r2, [r3, #24]
60001a28:	4976      	ldr	r1, [pc, #472]	; (60001c04 <configure_external_ram+0x248>)
60001a2a:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a2c:	4a76      	ldr	r2, [pc, #472]	; (60001c08 <configure_external_ram+0x24c>)
60001a2e:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a30:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
60001a36:	f042 020c 	orr.w	r2, r2, #12
60001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a3e:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
60001a42:	681a      	ldr	r2, [r3, #0]
60001a44:	f042 0202 	orr.w	r2, r2, #2
60001a48:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a4a:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a4c:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
60001a50:	f021 0173 	bic.w	r1, r1, #115	; 0x73
60001a54:	0409      	lsls	r1, r1, #16
60001a56:	0c09      	lsrs	r1, r1, #16
60001a58:	4a6c      	ldr	r2, [pc, #432]	; (60001c0c <configure_external_ram+0x250>)
60001a5a:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a5c:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60001a62:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a64:	496a      	ldr	r1, [pc, #424]	; (60001c10 <configure_external_ram+0x254>)
60001a66:	6888      	ldr	r0, [r1, #8]
60001a68:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60001a6c:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60001a70:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a76:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a78:	68da      	ldr	r2, [r3, #12]
60001a7a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60001a7e:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a80:	6a1a      	ldr	r2, [r3, #32]
60001a82:	4c64      	ldr	r4, [pc, #400]	; (60001c14 <configure_external_ram+0x258>)
60001a84:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a86:	4864      	ldr	r0, [pc, #400]	; (60001c18 <configure_external_ram+0x25c>)
60001a88:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8a:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8c:	6a1a      	ldr	r2, [r3, #32]
60001a8e:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a90:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a92:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a94:	4a61      	ldr	r2, [pc, #388]	; (60001c1c <configure_external_ram+0x260>)
60001a96:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a9a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60001a9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001aa2:	f042 0201 	orr.w	r2, r2, #1
60001aa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aaa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60001aae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001ab2:	f042 0201 	orr.w	r2, r2, #1
60001ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001aba:	2200      	movs	r2, #0
60001abc:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
60001ac2:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ac4:	4956      	ldr	r1, [pc, #344]	; (60001c20 <configure_external_ram+0x264>)
60001ac6:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ac8:	f240 6205 	movw	r2, #1541	; 0x605
60001acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001ad0:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001ad8:	681a      	ldr	r2, [r3, #0]
60001ada:	f022 0202 	bic.w	r2, r2, #2
60001ade:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ae0:	4a50      	ldr	r2, [pc, #320]	; (60001c24 <configure_external_ram+0x268>)
60001ae2:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ae4:	2202      	movs	r2, #2
60001ae6:	61da      	str	r2, [r3, #28]
60001ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001aec:	2100      	movs	r1, #0
60001aee:	4a4e      	ldr	r2, [pc, #312]	; (60001c28 <configure_external_ram+0x26c>)
60001af0:	f843 1b04 	str.w	r1, [r3], #4
60001af4:	4293      	cmp	r3, r2
60001af6:	d1fb      	bne.n	60001af0 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001af8:	4a4c      	ldr	r2, [pc, #304]	; (60001c2c <configure_external_ram+0x270>)
60001afa:	6813      	ldr	r3, [r2, #0]
60001afc:	f043 0301 	orr.w	r3, r3, #1
60001b00:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b02:	6813      	ldr	r3, [r2, #0]
60001b04:	f013 0f01 	tst.w	r3, #1
60001b08:	d1fb      	bne.n	60001b02 <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	4b48      	ldr	r3, [pc, #288]	; (60001c2c <configure_external_ram+0x270>)
60001b0c:	4a45      	ldr	r2, [pc, #276]	; (60001c24 <configure_external_ram+0x268>)
60001b0e:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
60001b12:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b14:	f240 62f5 	movw	r2, #1781	; 0x6f5
60001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b1c:	f240 4266 	movw	r2, #1126	; 0x466
60001b20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b24:	f240 4299 	movw	r2, #1177	; 0x499
60001b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b2c:	4a40      	ldr	r2, [pc, #256]	; (60001c30 <configure_external_ram+0x274>)
60001b2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b32:	f242 4201 	movw	r2, #9217	; 0x2401
60001b36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b3a:	f240 4235 	movw	r2, #1077	; 0x435
60001b3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b42:	4a3c      	ldr	r2, [pc, #240]	; (60001c34 <configure_external_ram+0x278>)
60001b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b48:	4a3b      	ldr	r2, [pc, #236]	; (60001c38 <configure_external_ram+0x27c>)
60001b4a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b4e:	4a3b      	ldr	r2, [pc, #236]	; (60001c3c <configure_external_ram+0x280>)
60001b50:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b54:	f242 2201 	movw	r2, #8705	; 0x2201
60001b58:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b5c:	2100      	movs	r1, #0
60001b5e:	4608      	mov	r0, r1
60001b60:	f7ff fe7e 	bl	60001860 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b64:	2100      	movs	r1, #0
60001b66:	2001      	movs	r0, #1
60001b68:	f7ff fe7a 	bl	60001860 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b6c:	2100      	movs	r1, #0
60001b6e:	4620      	mov	r0, r4
60001b70:	f7ff fe76 	bl	60001860 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b74:	2000      	movs	r0, #0
60001b76:	f7ff fe89 	bl	6000188c <flexspi2_psram_id>
60001b7a:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001b7e:	4298      	cmp	r0, r3
60001b80:	d007      	beq.n	60001b92 <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b82:	4b2f      	ldr	r3, [pc, #188]	; (60001c40 <configure_external_ram+0x284>)
60001b84:	2200      	movs	r2, #0
60001b86:	601a      	str	r2, [r3, #0]
60001b88:	605a      	str	r2, [r3, #4]
60001b8a:	609a      	str	r2, [r3, #8]
60001b8c:	60da      	str	r2, [r3, #12]
}
60001b8e:	b002      	add	sp, #8
60001b90:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
60001b92:	2100      	movs	r1, #0
60001b94:	2004      	movs	r0, #4
60001b96:	f7ff fe63 	bl	60001860 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b9a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001b9e:	2000      	movs	r0, #0
60001ba0:	f7ff fe5e 	bl	60001860 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001ba8:	2001      	movs	r0, #1
60001baa:	f7ff fe59 	bl	60001860 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001bae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bb2:	4620      	mov	r0, r4
60001bb4:	f7ff fe54 	bl	60001860 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60001bbc:	f7ff fe66 	bl	6000188c <flexspi2_psram_id>
60001bc0:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001bc4:	4298      	cmp	r0, r3
60001bc6:	d00e      	beq.n	60001be6 <configure_external_ram+0x22a>
60001bc8:	2008      	movs	r0, #8
			external_psram_size = 16;
60001bca:	4b1e      	ldr	r3, [pc, #120]	; (60001c44 <configure_external_ram+0x288>)
60001bcc:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60001bce:	491e      	ldr	r1, [pc, #120]	; (60001c48 <configure_external_ram+0x28c>)
60001bd0:	4a1e      	ldr	r2, [pc, #120]	; (60001c4c <configure_external_ram+0x290>)
60001bd2:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd4:	2300      	movs	r3, #0
60001bd6:	9300      	str	r3, [sp, #0]
60001bd8:	2301      	movs	r3, #1
60001bda:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60001bde:	4818      	ldr	r0, [pc, #96]	; (60001c40 <configure_external_ram+0x284>)
60001be0:	f000 f9ba 	bl	60001f58 <__sm_set_pool_veneer>
60001be4:	e7d3      	b.n	60001b8e <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
60001be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bea:	2004      	movs	r0, #4
60001bec:	f7ff fe38 	bl	60001860 <flexspi2_command>
			external_psram_size = 16;
60001bf0:	2010      	movs	r0, #16
60001bf2:	e7ea      	b.n	60001bca <configure_external_ram+0x20e>
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	400fc000 	.word	0x400fc000
60001c04:	1ffffcff 	.word	0x1ffffcff
60001c08:	a0000300 	.word	0xa0000300
60001c0c:	ffff0012 	.word	0xffff0012
60001c10:	402a8000 	.word	0x402a8000
60001c14:	7cf0ff00 	.word	0x7cf0ff00
60001c18:	80000040 	.word	0x80000040
60001c1c:	830f00ff 	.word	0x830f00ff
60001c20:	00020063 	.word	0x00020063
60001c24:	5af05af0 	.word	0x5af05af0
60001c28:	402a4300 	.word	0x402a4300
60001c2c:	402a4000 	.word	0x402a4000
60001c30:	3018049f 	.word	0x3018049f
60001c34:	0a1806eb 	.word	0x0a1806eb
60001c38:	26013206 	.word	0x26013206
60001c3c:	0a180638 	.word	0x0a180638
60001c40:	20005534 	.word	0x20005534
60001c44:	2000583c 	.word	0x2000583c
60001c48:	70000000 	.word	0x70000000
60001c4c:	70000000 	.word	0x70000000

60001c50 <usb_pll_start>:
{
60001c50:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c52:	4a16      	ldr	r2, [pc, #88]	; (60001cac <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c54:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	f243 0042 	movw	r0, #12354	; 0x3042
60001c6a:	e002      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c6e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c70:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c74:	f013 0f02 	tst.w	r3, #2
60001c78:	d1f8      	bne.n	60001c6c <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c7e:	d00c      	beq.n	60001c9a <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c84:	d00b      	beq.n	60001c9e <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c86:	2b00      	cmp	r3, #0
60001c88:	daf3      	bge.n	60001c72 <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c8e:	d108      	bne.n	60001ca2 <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
60001c94:	d007      	beq.n	60001ca6 <usb_pll_start+0x56>
}
60001c96:	bcf0      	pop	{r4, r5, r6, r7}
60001c98:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c9a:	6155      	str	r5, [r2, #20]
			continue;
60001c9c:	e7e9      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	6156      	str	r6, [r2, #20]
			continue;
60001ca0:	e7e7      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ca2:	6191      	str	r1, [r2, #24]
			continue;
60001ca4:	e7e5      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca6:	6157      	str	r7, [r2, #20]
			continue;
60001ca8:	e7e3      	b.n	60001c72 <usb_pll_start+0x22>
60001caa:	bf00      	nop
60001cac:	400d8000 	.word	0x400d8000

60001cb0 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cb0:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb2:	4b45      	ldr	r3, [pc, #276]	; (60001dc8 <tempmon_init+0x118>)
60001cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001cb8:	f022 0201 	bic.w	r2, r2, #1
60001cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc0:	2203      	movs	r2, #3
60001cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc6:	4a41      	ldr	r2, [pc, #260]	; (60001dcc <tempmon_init+0x11c>)
60001cc8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ccc:	b2d1      	uxtb	r1, r2
60001cce:	4c40      	ldr	r4, [pc, #256]	; (60001dd0 <tempmon_init+0x120>)
60001cd0:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd2:	f3c2 200b 	ubfx	r0, r2, #8, #12
60001cd6:	4d3f      	ldr	r5, [pc, #252]	; (60001dd4 <tempmon_init+0x124>)
60001cd8:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cda:	ee07 1a90 	vmov	s15, r1
60001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
60001ce2:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
60001ce6:	ee37 6a64 	vsub.f32	s12, s14, s9
60001cea:	493b      	ldr	r1, [pc, #236]	; (60001dd8 <tempmon_init+0x128>)
60001cec:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cf0:	ee07 0a90 	vmov	s15, r0
60001cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf8:	0d12      	lsrs	r2, r2, #20
60001cfa:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d02:	ee77 7ae6 	vsub.f32	s15, s15, s13
60001d06:	4835      	ldr	r0, [pc, #212]	; (60001ddc <tempmon_init+0x12c>)
60001d08:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 60001de0 <tempmon_init+0x130>
60001d14:	ee37 7a65 	vsub.f32	s14, s14, s11
60001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
60001d1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
60001d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
60001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d28:	ee17 ca90 	vmov	ip, s15
60001d2c:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
60001d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	ed95 6a00 	vldr	s12, [r5]
60001d38:	eeb8 6a46 	vcvt.f32.u32	s12, s12
60001d3c:	edd4 7a00 	vldr	s15, [r4]
60001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d44:	ed90 5a00 	vldr	s10, [r0]
60001d48:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	eddf 6a24 	vldr	s13, [pc, #144]	; 60001de4 <tempmon_init+0x134>
60001d54:	ee77 6ae6 	vsub.f32	s13, s15, s13
60001d58:	ee66 6a85 	vmul.f32	s13, s13, s10
60001d5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
60001d60:	ee37 7a06 	vadd.f32	s14, s14, s12
60001d64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	4a1f      	ldr	r2, [pc, #124]	; (60001de8 <tempmon_init+0x138>)
60001d6a:	ee17 0a10 	vmov	r0, s14
60001d6e:	ea02 4200 	and.w	r2, r2, r0, lsl #16
60001d72:	430a      	orrs	r2, r1
60001d74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d78:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
60001d80:	ee27 7a85 	vmul.f32	s14, s15, s10
60001d84:	eec7 7a25 	vdiv.f32	s15, s14, s11
60001d88:	ee77 7a86 	vadd.f32	s15, s15, s12
60001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60001d90:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d94:	f3c2 020b 	ubfx	r2, r2, #0, #12
60001d98:	430a      	orrs	r2, r1
60001d9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001da2:	f042 0202 	orr.w	r2, r2, #2
60001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001daa:	4b10      	ldr	r3, [pc, #64]	; (60001dec <tempmon_init+0x13c>)
60001dac:	2200      	movs	r2, #0
60001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001db2:	4b0f      	ldr	r3, [pc, #60]	; (60001df0 <tempmon_init+0x140>)
60001db4:	4a0f      	ldr	r2, [pc, #60]	; (60001df4 <tempmon_init+0x144>)
60001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dbe:	2201      	movs	r2, #1
60001dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dc4:	bc30      	pop	{r4, r5}
60001dc6:	4770      	bx	lr
60001dc8:	400d8100 	.word	0x400d8100
60001dcc:	401f4400 	.word	0x401f4400
60001dd0:	2000565c 	.word	0x2000565c
60001dd4:	20005658 	.word	0x20005658
60001dd8:	20005660 	.word	0x20005660
60001ddc:	20005664 	.word	0x20005664
60001de0:	42aa0000 	.word	0x42aa0000
60001de4:	42b40000 	.word	0x42b40000
60001de8:	0fff0000 	.word	0x0fff0000
60001dec:	e000e400 	.word	0xe000e400
60001df0:	20004000 	.word	0x20004000
60001df4:	0000e393 	.word	0x0000e393

60001df8 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001df8:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001dfa:	4b32      	ldr	r3, [pc, #200]	; (60001ec4 <usb_init+0xcc>)
60001dfc:	f640 7261 	movw	r2, #3937	; 0xf61
60001e00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001e04:	f000 f8b8 	bl	60001f78 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e08:	4a2f      	ldr	r2, [pc, #188]	; (60001ec8 <usb_init+0xd0>)
60001e0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e0e:	f043 0303 	orr.w	r3, r3, #3
60001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e16:	4b2d      	ldr	r3, [pc, #180]	; (60001ecc <usb_init+0xd4>)
60001e18:	f240 4204 	movw	r2, #1028	; 0x404
60001e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e20:	4b2b      	ldr	r3, [pc, #172]	; (60001ed0 <usb_init+0xd8>)
60001e22:	681a      	ldr	r2, [r3, #0]
60001e24:	4b2b      	ldr	r3, [pc, #172]	; (60001ed4 <usb_init+0xdc>)
60001e26:	421a      	tst	r2, r3
60001e28:	d105      	bne.n	60001e36 <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e2a:	4b28      	ldr	r3, [pc, #160]	; (60001ecc <usb_init+0xd4>)
60001e2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
60001e30:	f013 0f03 	tst.w	r3, #3
60001e34:	d01c      	beq.n	60001e70 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e36:	4b26      	ldr	r3, [pc, #152]	; (60001ed0 <usb_init+0xd8>)
60001e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e3c:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e3e:	4a23      	ldr	r2, [pc, #140]	; (60001ecc <usb_init+0xd4>)
60001e40:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e44:	f043 0302 	orr.w	r3, r3, #2
60001e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e4c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e50:	f013 0f02 	tst.w	r3, #2
60001e54:	d1fa      	bne.n	60001e4c <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001e5e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e62:	4b1b      	ldr	r3, [pc, #108]	; (60001ed0 <usb_init+0xd8>)
60001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e68:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e6a:	2019      	movs	r0, #25
60001e6c:	f000 f888 	bl	60001f80 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e70:	4b17      	ldr	r3, [pc, #92]	; (60001ed0 <usb_init+0xd8>)
60001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
60001e76:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60001e78:	2100      	movs	r1, #0
60001e7a:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e7c:	4c13      	ldr	r4, [pc, #76]	; (60001ecc <usb_init+0xd4>)
60001e7e:	230a      	movs	r3, #10
60001e80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e84:	4d14      	ldr	r5, [pc, #80]	; (60001ed8 <usb_init+0xe0>)
60001e86:	f44f 7220 	mov.w	r2, #640	; 0x280
60001e8a:	4628      	mov	r0, r5
60001e8c:	f000 f860 	bl	60001f50 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e90:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
60001e94:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60001e9a:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ea0:	f240 1343 	movw	r3, #323	; 0x143
60001ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60001ea8:	4b0c      	ldr	r3, [pc, #48]	; (60001edc <usb_init+0xe4>)
60001eaa:	4a0d      	ldr	r2, [pc, #52]	; (60001ee0 <usb_init+0xe8>)
60001eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ebc:	2301      	movs	r3, #1
60001ebe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ec2:	bd38      	pop	{r3, r4, r5, pc}
60001ec4:	400d8000 	.word	0x400d8000
60001ec8:	400fc000 	.word	0x400fc000
60001ecc:	402e0000 	.word	0x402e0000
60001ed0:	400d9000 	.word	0x400d9000
60001ed4:	001e1c00 	.word	0x001e1c00
60001ed8:	20000000 	.word	0x20000000
60001edc:	20004000 	.word	0x20004000
60001ee0:	0000e68d 	.word	0x0000e68d

60001ee4 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ee4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ee6:	4b0f      	ldr	r3, [pc, #60]	; (60001f24 <_reboot_Teensyduino_+0x40>)
60001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001eea:	f013 0f02 	tst.w	r3, #2
60001eee:	d100      	bne.n	60001ef2 <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001ef0:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ef2:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ef4:	4b0c      	ldr	r3, [pc, #48]	; (60001f28 <_reboot_Teensyduino_+0x44>)
60001ef6:	2200      	movs	r2, #0
60001ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001efc:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60001f00:	4a0a      	ldr	r2, [pc, #40]	; (60001f2c <_reboot_Teensyduino_+0x48>)
60001f02:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f04:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
60001f08:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
60001f0c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f0e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001f12:	4807      	ldr	r0, [pc, #28]	; (60001f30 <_reboot_Teensyduino_+0x4c>)
60001f14:	4b07      	ldr	r3, [pc, #28]	; (60001f34 <_reboot_Teensyduino_+0x50>)
60001f16:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
60001f1c:	69db      	ldr	r3, [r3, #28]
60001f1e:	689b      	ldr	r3, [r3, #8]
60001f20:	4798      	blx	r3
60001f22:	e7e6      	b.n	60001ef2 <_reboot_Teensyduino_+0xe>
60001f24:	401f4400 	.word	0x401f4400
60001f28:	402e0000 	.word	0x402e0000
60001f2c:	00200003 	.word	0x00200003
60001f30:	20208000 	.word	0x20208000
60001f34:	eb120000 	.word	0xeb120000

60001f38 <_init>:
60001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f3a:	bf00      	nop
60001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f3e:	bc08      	pop	{r3}
60001f40:	469e      	mov	lr, r3
60001f42:	4770      	bx	lr
60001f44:	0000      	movs	r0, r0
	...

60001f48 <__pwm_init_veneer>:
60001f48:	f85f f000 	ldr.w	pc, [pc]	; 60001f4c <__pwm_init_veneer+0x4>
60001f4c:	0000e109 	.word	0x0000e109

60001f50 <__memset_veneer>:
60001f50:	f85f f000 	ldr.w	pc, [pc]	; 60001f54 <__memset_veneer+0x4>
60001f54:	000118ed 	.word	0x000118ed

60001f58 <__sm_set_pool_veneer>:
60001f58:	f85f f000 	ldr.w	pc, [pc]	; 60001f5c <__sm_set_pool_veneer+0x4>
60001f5c:	0000f595 	.word	0x0000f595

60001f60 <__set_arm_clock_veneer>:
60001f60:	f85f f000 	ldr.w	pc, [pc]	; 60001f64 <__set_arm_clock_veneer+0x4>
60001f64:	0000d341 	.word	0x0000d341

60001f68 <__main_veneer>:
60001f68:	f85f f000 	ldr.w	pc, [pc]	; 60001f6c <__main_veneer+0x4>
60001f6c:	0000d749 	.word	0x0000d749

60001f70 <____libc_init_array_veneer>:
60001f70:	f85f f000 	ldr.w	pc, [pc]	; 60001f74 <____libc_init_array_veneer+0x4>
60001f74:	000119a9 	.word	0x000119a9

60001f78 <__usb_init_serialnumber_veneer>:
60001f78:	f85f f000 	ldr.w	pc, [pc]	; 60001f7c <__usb_init_serialnumber_veneer+0x4>
60001f7c:	0000ec55 	.word	0x0000ec55

60001f80 <__delay_veneer>:
60001f80:	f85f f000 	ldr.w	pc, [pc]	; 60001f84 <__delay_veneer+0x4>
60001f84:	0000d631 	.word	0x0000d631

60001f88 <___ZN7TwoWire8setClockEm_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <___ZN7TwoWire8setClockEm_veneer+0x4>
60001f8c:	00004c5d 	.word	0x00004c5d

60001f90 <__frame_dummy_init_array_entry>:
60001f90:	00000045 0000016d 00000671 00003aad     E...m...q....:..
60001fa0:	00003fa9 00004cfd 00005241 00005a51     .?...L..AR..QZ..
60001fb0:	0000ca91                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
#endif
}

uint8_t PWMServo::attached()
{
	if (pin >= NUM_DIGITAL_PINS) return 0;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	return (attachedpins[pin >> 5] & (1 << (pin & 31))) ? 1 : 0;
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
      36:	4770      	bx	lr
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	200042c0 	.word	0x200042c0
      3c:	200042c0 	.word	0x200042c0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    }
  }
  return readStop();
 fail:
  return false;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	f3af 8000 	nop.w
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
  return false;
      60:	20005588 	.word	0x20005588
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( target == nullptr) return true;
      64:	6001cc00 	.word	0x6001cc00

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6c:	6900      	ldr	r0, [r0, #16]
      6e:	b120      	cbz	r0, 7a <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
      70:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
      72:	6803      	ldr	r3, [r0, #0]
      74:	68db      	ldr	r3, [r3, #12]
      76:	4798      	blx	r3
	}
      78:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
      7a:	2000      	movs	r0, #0
	}
      7c:	4770      	bx	lr

0000007e <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      7e:	6900      	ldr	r0, [r0, #16]
      80:	b120      	cbz	r0, 8c <File::available()+0xe>
	int available() {
      82:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
      84:	6803      	ldr	r3, [r0, #0]
      86:	691b      	ldr	r3, [r3, #16]
      88:	4798      	blx	r3
	}
      8a:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
      8c:	2000      	movs	r0, #0
	}
      8e:	4770      	bx	lr

00000090 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      90:	6900      	ldr	r0, [r0, #16]
      92:	b120      	cbz	r0, 9e <File::peek()+0xe>
	int peek() {
      94:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
      96:	6803      	ldr	r3, [r0, #0]
      98:	695b      	ldr	r3, [r3, #20]
      9a:	4798      	blx	r3
	}
      9c:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
      9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      a2:	4770      	bx	lr

000000a4 <File::flush()>:
	void flush() {
		if (f) f->flush();
      a4:	6900      	ldr	r0, [r0, #16]
      a6:	b120      	cbz	r0, b2 <File::flush()+0xe>
	void flush() {
      a8:	b508      	push	{r3, lr}
		if (f) f->flush();
      aa:	6803      	ldr	r3, [r0, #0]
      ac:	699b      	ldr	r3, [r3, #24]
      ae:	4798      	blx	r3
	}
      b0:	bd08      	pop	{r3, pc}
      b2:	4770      	bx	lr

000000b4 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
      b4:	6900      	ldr	r0, [r0, #16]
      b6:	b168      	cbz	r0, d4 <File::read()+0x20>
	int read() {
      b8:	b500      	push	{lr}
      ba:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
      bc:	6803      	ldr	r3, [r0, #0]
      be:	689b      	ldr	r3, [r3, #8]
      c0:	2201      	movs	r2, #1
      c2:	f10d 0107 	add.w	r1, sp, #7
      c6:	4798      	blx	r3
      c8:	b138      	cbz	r0, da <File::read()+0x26>
		return b;
      ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
      ce:	b003      	add	sp, #12
      d0:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
      d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      d8:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
      da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      de:	e7f6      	b.n	ce <File::read()+0x1a>

000000e0 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      e0:	b500      	push	{lr}
      e2:	b083      	sub	sp, #12
      e4:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      e8:	6900      	ldr	r0, [r0, #16]
      ea:	b140      	cbz	r0, fe <File::write(unsigned char)+0x1e>
      ec:	6803      	ldr	r3, [r0, #0]
      ee:	68db      	ldr	r3, [r3, #12]
      f0:	2201      	movs	r2, #1
      f2:	f10d 0107 	add.w	r1, sp, #7
      f6:	4798      	blx	r3
	}
      f8:	b003      	add	sp, #12
      fa:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
      fe:	2000      	movs	r0, #0
     100:	e7fa      	b.n	f8 <File::write(unsigned char)+0x18>
	...

00000104 <File::~File()>:
	virtual ~File() {
     104:	b510      	push	{r4, lr}
     106:	4604      	mov	r4, r0
     108:	4b0b      	ldr	r3, [pc, #44]	; (138 <File::~File()+0x34>)
     10a:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     10c:	6903      	ldr	r3, [r0, #16]
     10e:	b163      	cbz	r3, 12a <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     110:	685a      	ldr	r2, [r3, #4]
     112:	3a01      	subs	r2, #1
     114:	605a      	str	r2, [r3, #4]
     116:	b942      	cbnz	r2, 12a <File::~File()+0x26>
			f->close();
     118:	6900      	ldr	r0, [r0, #16]
     11a:	6803      	ldr	r3, [r0, #0]
     11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     11e:	4798      	blx	r3
			delete f;
     120:	6920      	ldr	r0, [r4, #16]
     122:	b110      	cbz	r0, 12a <File::~File()+0x26>
     124:	6803      	ldr	r3, [r0, #0]
     126:	685b      	ldr	r3, [r3, #4]
     128:	4798      	blx	r3
	}
     12a:	2114      	movs	r1, #20
     12c:	4620      	mov	r0, r4
     12e:	f00d fbb1 	bl	d894 <operator delete(void*, unsigned int)>
     132:	4620      	mov	r0, r4
     134:	bd10      	pop	{r4, pc}
     136:	bf00      	nop
     138:	20002760 	.word	0x20002760

0000013c <File::~File()>:
	virtual ~File() {
     13c:	b510      	push	{r4, lr}
     13e:	4604      	mov	r4, r0
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <File::~File()+0x2c>)
     142:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     144:	6903      	ldr	r3, [r0, #16]
     146:	b163      	cbz	r3, 162 <File::~File()+0x26>
		if (--(f->refcount) == 0) {
     148:	685a      	ldr	r2, [r3, #4]
     14a:	3a01      	subs	r2, #1
     14c:	605a      	str	r2, [r3, #4]
     14e:	b942      	cbnz	r2, 162 <File::~File()+0x26>
			f->close();
     150:	6900      	ldr	r0, [r0, #16]
     152:	6803      	ldr	r3, [r0, #0]
     154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     156:	4798      	blx	r3
			delete f;
     158:	6920      	ldr	r0, [r4, #16]
     15a:	b110      	cbz	r0, 162 <File::~File()+0x26>
     15c:	6803      	ldr	r3, [r0, #0]
     15e:	685b      	ldr	r3, [r3, #4]
     160:	4798      	blx	r3
	}
     162:	4620      	mov	r0, r4
     164:	bd10      	pop	{r4, pc}
     166:	bf00      	nop
     168:	20002760 	.word	0x20002760

0000016c <_GLOBAL__sub_I_dt>:
bool doneWithSetup = 0;
int servoLoopCounter = 0;

// Number of loops before a sustained large change in values are accepted
int radioChCutoffTimeout = 10;
bool failureFlag = 0;
     16c:	b570      	push	{r4, r5, r6, lr}
String filePrefix = "flight_data";
     16e:	4e13      	ldr	r6, [pc, #76]	; (1bc <_GLOBAL__sub_I_dt+0x50>)
     170:	4913      	ldr	r1, [pc, #76]	; (1c0 <_GLOBAL__sub_I_dt+0x54>)
     172:	4630      	mov	r0, r6
     174:	f00c ffb1 	bl	d0da <String::String(char const*)>
     178:	4c12      	ldr	r4, [pc, #72]	; (1c4 <_GLOBAL__sub_I_dt+0x58>)
     17a:	4d13      	ldr	r5, [pc, #76]	; (1c8 <_GLOBAL__sub_I_dt+0x5c>)
     17c:	4622      	mov	r2, r4
     17e:	4629      	mov	r1, r5
     180:	4630      	mov	r0, r6
     182:	f010 ff3f 	bl	11004 <__aeabi_atexit>
String fileExtension = ".csv";
     186:	4e11      	ldr	r6, [pc, #68]	; (1cc <_GLOBAL__sub_I_dt+0x60>)
     188:	4911      	ldr	r1, [pc, #68]	; (1d0 <_GLOBAL__sub_I_dt+0x64>)
     18a:	4630      	mov	r0, r6
     18c:	f00c ffa5 	bl	d0da <String::String(char const*)>
     190:	4622      	mov	r2, r4
     192:	4629      	mov	r1, r5
     194:	4630      	mov	r0, r6
     196:	f010 ff35 	bl	11004 <__aeabi_atexit>
String fileName;
     19a:	4e0e      	ldr	r6, [pc, #56]	; (1d4 <_GLOBAL__sub_I_dt+0x68>)
     19c:	2100      	movs	r1, #0
     19e:	4630      	mov	r0, r6
     1a0:	f00c ff9b 	bl	d0da <String::String(char const*)>
     1a4:	4622      	mov	r2, r4
     1a6:	4629      	mov	r1, r5
     1a8:	4630      	mov	r0, r6
     1aa:	f010 ff2b 	bl	11004 <__aeabi_atexit>
File dataFile;
     1ae:	4622      	mov	r2, r4
     1b0:	4909      	ldr	r1, [pc, #36]	; (1d8 <_GLOBAL__sub_I_dt+0x6c>)
     1b2:	480a      	ldr	r0, [pc, #40]	; (1dc <_GLOBAL__sub_I_dt+0x70>)
     1b4:	f010 ff26 	bl	11004 <__aeabi_atexit>
bool failureFlag = 0;
     1b8:	bd70      	pop	{r4, r5, r6, pc}
     1ba:	bf00      	nop
     1bc:	20005564 	.word	0x20005564
     1c0:	20001c80 	.word	0x20001c80
     1c4:	200036b0 	.word	0x200036b0
     1c8:	0000d049 	.word	0x0000d049
     1cc:	20005544 	.word	0x20005544
     1d0:	20001c8c 	.word	0x20001c8c
     1d4:	20005554 	.word	0x20005554
     1d8:	0000013d 	.word	0x0000013d
     1dc:	20003c9c 	.word	0x20003c9c

000001e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>:

    /** \brief Constructs a Matrix or Array and initializes it by elements given by an initializer list of initializer
      * lists \cpp11
      */
    EIGEN_DEVICE_FUNC
    explicit EIGEN_STRONG_INLINE PlainObjectBase(const std::initializer_list<std::initializer_list<Scalar>>& list)
     1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
     1e2:	680e      	ldr	r6, [r1, #0]
      size() const noexcept { return _M_len; }
     1e4:	684b      	ldr	r3, [r1, #4]

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
     1e6:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
      : m_storage()
    {
      _check_template_params();

      size_t list_size = 0;
      if (list.begin() != list.end()) {
     1ea:	42be      	cmp	r6, r7
     1ec:	d02c      	beq.n	248 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x68>
      size() const noexcept { return _M_len; }
     1ee:	6872      	ldr	r2, [r6, #4]
      if (ColsAtCompileTime == 1 && list.size() == 1) {
        eigen_assert(list_size == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
        resize(list_size, ColsAtCompileTime);
        std::copy(list.begin()->begin(), list.begin()->end(), m_storage.data());
      } else {
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
     1f0:	2b03      	cmp	r3, #3
     1f2:	d12b      	bne.n	24c <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x6c>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
     1f4:	2a03      	cmp	r2, #3
     1f6:	d103      	bne.n	200 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
        resize(list.size(), list_size);

        Index row_index = 0;
        for (const std::initializer_list<Scalar>& row : list) {
     1f8:	4605      	mov	r5, r0
     1fa:	46b6      	mov	lr, r6
        Index row_index = 0;
     1fc:	2400      	movs	r4, #0
     1fe:	e013      	b.n	228 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x48>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
     200:	4b16      	ldr	r3, [pc, #88]	; (25c <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7c>)
     202:	4a17      	ldr	r2, [pc, #92]	; (260 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
     204:	f240 2139 	movw	r1, #569	; 0x239
     208:	4816      	ldr	r0, [pc, #88]	; (264 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
     20a:	f011 fb4f 	bl	118ac <__assert_func>
          eigen_assert(list_size == row.size());
     20e:	4b16      	ldr	r3, [pc, #88]	; (268 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x88>)
     210:	4a13      	ldr	r2, [pc, #76]	; (260 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
     212:	f240 213e 	movw	r1, #574	; 0x23e
     216:	4813      	ldr	r0, [pc, #76]	; (264 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
     218:	f011 fb48 	bl	118ac <__assert_func>
          Index col_index = 0;
          for (const Scalar& e : row) {
            coeffRef(row_index, col_index) = e;
            ++col_index;
          }
          ++row_index;
     21c:	3401      	adds	r4, #1
        for (const std::initializer_list<Scalar>& row : list) {
     21e:	f10e 0e08 	add.w	lr, lr, #8
     222:	3504      	adds	r5, #4
     224:	4577      	cmp	r7, lr
     226:	d018      	beq.n	25a <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7a>
          eigen_assert(list_size == row.size());
     228:	f8de 3004 	ldr.w	r3, [lr, #4]
     22c:	2b03      	cmp	r3, #3
     22e:	d1ee      	bne.n	20e <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x2e>
          for (const Scalar& e : row) {
     230:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
     234:	f103 0c0c 	add.w	ip, r3, #12
      begin() const noexcept { return _M_array; }
     238:	462a      	mov	r2, r5
            coeffRef(row_index, col_index) = e;
     23a:	f853 1b04 	ldr.w	r1, [r3], #4
     23e:	f842 1b0c 	str.w	r1, [r2], #12
          for (const Scalar& e : row) {
     242:	4563      	cmp	r3, ip
     244:	d1f9      	bne.n	23a <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x5a>
     246:	e7e9      	b.n	21c <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x3c>
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
     248:	2b03      	cmp	r3, #3
     24a:	d0d9      	beq.n	200 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
     24c:	4b07      	ldr	r3, [pc, #28]	; (26c <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x8c>)
     24e:	4a04      	ldr	r2, [pc, #16]	; (260 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
     250:	f44f 710e 	mov.w	r1, #568	; 0x238
     254:	4803      	ldr	r0, [pc, #12]	; (264 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
     256:	f011 fb29 	bl	118ac <__assert_func>
        }
      }
    }
     25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     25c:	200024b0 	.word	0x200024b0
     260:	20002364 	.word	0x20002364
     264:	2000245c 	.word	0x2000245c
     268:	20002504 	.word	0x20002504
     26c:	2000230c 	.word	0x2000230c

00000270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>:
    explicit EIGEN_STRONG_INLINE PlainObjectBase(const std::initializer_list<std::initializer_list<Scalar>>& list)
     270:	b508      	push	{r3, lr}
  EIGEN_ALIGN_TO_BOUNDARY(16) T array[Size];

  EIGEN_DEVICE_FUNC
  plain_array()
  {
    EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(15);
     272:	f010 0f0f 	tst.w	r0, #15
     276:	d119      	bne.n	2ac <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x3c>
     278:	680b      	ldr	r3, [r1, #0]
      size() const noexcept { return _M_len; }
     27a:	684a      	ldr	r2, [r1, #4]
      end() const noexcept { return begin() + size(); }
     27c:	eb03 0ec2 	add.w	lr, r3, r2, lsl #3
      if (list.begin() != list.end()) {
     280:	4573      	cmp	r3, lr
     282:	d027      	beq.n	2d4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x64>
      size() const noexcept { return _M_len; }
     284:	6859      	ldr	r1, [r3, #4]
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
     286:	2a02      	cmp	r2, #2
     288:	d126      	bne.n	2d8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x68>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
     28a:	2902      	cmp	r1, #2
     28c:	d114      	bne.n	2b8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x48>
        for (const std::initializer_list<Scalar>& row : list) {
     28e:	4602      	mov	r2, r0
          eigen_assert(list_size == row.size());
     290:	6859      	ldr	r1, [r3, #4]
     292:	2902      	cmp	r1, #2
     294:	d117      	bne.n	2c6 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x56>
      begin() const noexcept { return _M_array; }
     296:	f853 1b08 	ldr.w	r1, [r3], #8
            coeffRef(row_index, col_index) = e;
     29a:	f8d1 c000 	ldr.w	ip, [r1]
     29e:	f842 cb04 	str.w	ip, [r2], #4
     2a2:	6849      	ldr	r1, [r1, #4]
     2a4:	6051      	str	r1, [r2, #4]
        for (const std::initializer_list<Scalar>& row : list) {
     2a6:	459e      	cmp	lr, r3
     2a8:	d1f2      	bne.n	290 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
    }
     2aa:	bd08      	pop	{r3, pc}
     2ac:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x78>)
     2ae:	4a0f      	ldr	r2, [pc, #60]	; (2ec <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7c>)
     2b0:	216d      	movs	r1, #109	; 0x6d
     2b2:	480f      	ldr	r0, [pc, #60]	; (2f0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
     2b4:	f011 fafa 	bl	118ac <__assert_func>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
     2b8:	4b0e      	ldr	r3, [pc, #56]	; (2f4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
     2ba:	4a0f      	ldr	r2, [pc, #60]	; (2f8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x88>)
     2bc:	f240 2139 	movw	r1, #569	; 0x239
     2c0:	480e      	ldr	r0, [pc, #56]	; (2fc <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x8c>)
     2c2:	f011 faf3 	bl	118ac <__assert_func>
          eigen_assert(list_size == row.size());
     2c6:	4b0e      	ldr	r3, [pc, #56]	; (300 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x90>)
     2c8:	4a0b      	ldr	r2, [pc, #44]	; (2f8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x88>)
     2ca:	f240 213e 	movw	r1, #574	; 0x23e
     2ce:	480b      	ldr	r0, [pc, #44]	; (2fc <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x8c>)
     2d0:	f011 faec 	bl	118ac <__assert_func>
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
     2d4:	2a02      	cmp	r2, #2
     2d6:	d0ef      	beq.n	2b8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x48>
     2d8:	4b0a      	ldr	r3, [pc, #40]	; (304 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x94>)
     2da:	4a07      	ldr	r2, [pc, #28]	; (2f8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x88>)
     2dc:	f44f 710e 	mov.w	r1, #568	; 0x238
     2e0:	4806      	ldr	r0, [pc, #24]	; (2fc <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x8c>)
     2e2:	f011 fae3 	bl	118ac <__assert_func>
     2e6:	bf00      	nop
     2e8:	20002048 	.word	0x20002048
     2ec:	20002138 	.word	0x20002138
     2f0:	200021c4 	.word	0x200021c4
     2f4:	200024b0 	.word	0x200024b0
     2f8:	20002214 	.word	0x20002214
     2fc:	2000245c 	.word	0x2000245c
     300:	20002504 	.word	0x20002504
     304:	2000230c 	.word	0x2000230c

00000308 <__static_initialization_and_destruction_0(int, int)>:
			I2Cdev::writeWords(devAddr, SaveAddress + (i * shift), 1, (uint16_t *)&Data);
		}
	}
	resetFIFO();
	resetDMP();
}
     308:	f64f 73ff 	movw	r3, #65535	; 0xffff
     30c:	4299      	cmp	r1, r3
     30e:	d101      	bne.n	314 <__static_initialization_and_destruction_0(int, int)+0xc>
     310:	2801      	cmp	r0, #1
     312:	d000      	beq.n	316 <__static_initialization_and_destruction_0(int, int)+0xe>
     314:	4770      	bx	lr
     316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     31a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
     31e:	4b9e      	ldr	r3, [pc, #632]	; (598 <__static_initialization_and_destruction_0(int, int)+0x290>)
     320:	ed93 7a00 	vldr	s14, [r3]
     324:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     328:	ed9f 6b91 	vldr	d6, [pc, #580]	; 570 <__static_initialization_and_destruction_0(int, int)+0x268>
  Serial.print("float GyroErrorZ = ");
  Serial.print(GyroErrorZ);
  Serial.println(";");

  Serial.println("Paste these values in user specified variables section and comment out calculate_IMU_error() in void setup.");
}
     32c:	ee27 7b06 	vmul.f64	d7, d7, d6
     330:	ed9f 6b91 	vldr	d6, [pc, #580]	; 578 <__static_initialization_and_destruction_0(int, int)+0x270>
    //dump_hexbytes(buf, 512);
    while (root_dir_size) {
      dir = reinterpret_cast<DirLabel_t*>(&buf[index_in_sector]);
      //if (dir->name[0] == 0) break;  // at end of list...
      if (dir->type == EXFAT_TYPE_LABEL) {
        label_found = true;
     334:	ee27 6b06 	vmul.f64	d6, d7, d6
     338:	eef7 4bc6 	vcvt.f32.f64	s9, d6
     33c:	4b97      	ldr	r3, [pc, #604]	; (59c <__static_initialization_and_destruction_0(int, int)+0x294>)
     33e:	edc3 4a00 	vstr	s9, [r3]
float Kp_scale = 0.75f;
float Ki_scale = 0.1f;
float Kd_scale = 1.1f;

float Kp_roll_angle = 0.2*Kp_scale*0.95;
float Ki_roll_angle = 0.3*Ki_scale*1.01;
     342:	4b97      	ldr	r3, [pc, #604]	; (5a0 <__static_initialization_and_destruction_0(int, int)+0x298>)
     344:	ed93 5a00 	vldr	s10, [r3]
     348:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
     34c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 580 <__static_initialization_and_destruction_0(int, int)+0x278>
     350:	ee25 5b06 	vmul.f64	d5, d5, d6
     354:	f8df 828c 	ldr.w	r8, [pc, #652]	; 5e4 <__static_initialization_and_destruction_0(int, int)+0x2dc>
     358:	ed9f 3b8b 	vldr	d3, [pc, #556]	; 588 <__static_initialization_and_destruction_0(int, int)+0x280>
     35c:	ee25 6b03 	vmul.f64	d6, d5, d3
     360:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     364:	ed88 6a00 	vstr	s12, [r8]
float Kd_roll_angle = 0.05*Kd_scale*1.01;
     368:	4b8e      	ldr	r3, [pc, #568]	; (5a4 <__static_initialization_and_destruction_0(int, int)+0x29c>)
     36a:	ed93 6a00 	vldr	s12, [r3]
     36e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     372:	ed9f 2b87 	vldr	d2, [pc, #540]	; 590 <__static_initialization_and_destruction_0(int, int)+0x288>
     376:	ee26 6b02 	vmul.f64	d6, d6, d2
     37a:	4e8b      	ldr	r6, [pc, #556]	; (5a8 <__static_initialization_and_destruction_0(int, int)+0x2a0>)
     37c:	ee26 3b03 	vmul.f64	d3, d6, d3
     380:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     384:	ed86 3a00 	vstr	s6, [r6]
float Kp_pitch_angle = 0.2*Kp_scale;
     388:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     38c:	4b87      	ldr	r3, [pc, #540]	; (5ac <__static_initialization_and_destruction_0(int, int)+0x2a4>)
     38e:	ed83 7a00 	vstr	s14, [r3]
float Ki_pitch_angle = 0.3*Ki_scale;
     392:	f8df 9254 	ldr.w	r9, [pc, #596]	; 5e8 <__static_initialization_and_destruction_0(int, int)+0x2e0>
     396:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
     39a:	ed89 5a00 	vstr	s10, [r9]
float Kd_pitch_angle = 0.05*Kd_scale;
     39e:	4f84      	ldr	r7, [pc, #528]	; (5b0 <__static_initialization_and_destruction_0(int, int)+0x2a8>)
     3a0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     3a4:	ed87 6a00 	vstr	s12, [r7]
float Kd_yaw = 0.00015;       

// MATRICES OF PID GIANS //
const Matrix3f P_gains {{Kp_pitch_angle, 0, 0},
												{0, Kp_yaw, 0},
												{0, 0, Kp_roll_angle}};
     3a8:	aa08      	add	r2, sp, #32
     3aa:	ed8d 7a08 	vstr	s14, [sp, #32]
     3ae:	2400      	movs	r4, #0
     3b0:	9409      	str	r4, [sp, #36]	; 0x24
     3b2:	940a      	str	r4, [sp, #40]	; 0x28
     3b4:	ab02      	add	r3, sp, #8
     3b6:	9202      	str	r2, [sp, #8]
     3b8:	2503      	movs	r5, #3
     3ba:	9503      	str	r5, [sp, #12]
     3bc:	aa0b      	add	r2, sp, #44	; 0x2c
     3be:	940b      	str	r4, [sp, #44]	; 0x2c
     3c0:	497c      	ldr	r1, [pc, #496]	; (5b4 <__static_initialization_and_destruction_0(int, int)+0x2ac>)
     3c2:	6809      	ldr	r1, [r1, #0]
     3c4:	910c      	str	r1, [sp, #48]	; 0x30
     3c6:	940d      	str	r4, [sp, #52]	; 0x34
     3c8:	9204      	str	r2, [sp, #16]
     3ca:	9505      	str	r5, [sp, #20]
     3cc:	aa0e      	add	r2, sp, #56	; 0x38
     3ce:	940e      	str	r4, [sp, #56]	; 0x38
     3d0:	940f      	str	r4, [sp, #60]	; 0x3c
     3d2:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
     3d6:	9206      	str	r2, [sp, #24]
     3d8:	9507      	str	r5, [sp, #28]
     3da:	9300      	str	r3, [sp, #0]
     3dc:	9501      	str	r5, [sp, #4]
      * and implicit transposition is allowed for compile-time vectors only.
      *
      * \sa Matrix(const Scalar& a0, const Scalar& a1, const Scalar& a2,  const Scalar& a3, const ArgTypes&... args)
      */
    EIGEN_DEVICE_FUNC
    explicit EIGEN_STRONG_INLINE Matrix(const std::initializer_list<std::initializer_list<Scalar>>& list) : Base(list) {}
     3de:	4669      	mov	r1, sp
     3e0:	4875      	ldr	r0, [pc, #468]	; (5b8 <__static_initialization_and_destruction_0(int, int)+0x2b0>)
     3e2:	f7ff fefd 	bl	1e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
const Matrix3f I_gains {{Ki_pitch_angle, 0, 0},
												{0, Ki_yaw, 0},
												{0, 0, Ki_roll_angle}};
     3e6:	aa19      	add	r2, sp, #100	; 0x64
     3e8:	f8d9 3000 	ldr.w	r3, [r9]
     3ec:	9319      	str	r3, [sp, #100]	; 0x64
     3ee:	941a      	str	r4, [sp, #104]	; 0x68
     3f0:	941b      	str	r4, [sp, #108]	; 0x6c
     3f2:	ab13      	add	r3, sp, #76	; 0x4c
     3f4:	9213      	str	r2, [sp, #76]	; 0x4c
     3f6:	9514      	str	r5, [sp, #80]	; 0x50
     3f8:	aa1c      	add	r2, sp, #112	; 0x70
     3fa:	941c      	str	r4, [sp, #112]	; 0x70
     3fc:	496f      	ldr	r1, [pc, #444]	; (5bc <__static_initialization_and_destruction_0(int, int)+0x2b4>)
     3fe:	6809      	ldr	r1, [r1, #0]
     400:	911d      	str	r1, [sp, #116]	; 0x74
     402:	941e      	str	r4, [sp, #120]	; 0x78
     404:	9215      	str	r2, [sp, #84]	; 0x54
     406:	9516      	str	r5, [sp, #88]	; 0x58
     408:	aa1f      	add	r2, sp, #124	; 0x7c
     40a:	941f      	str	r4, [sp, #124]	; 0x7c
     40c:	9420      	str	r4, [sp, #128]	; 0x80
     40e:	f8d8 1000 	ldr.w	r1, [r8]
     412:	9121      	str	r1, [sp, #132]	; 0x84
     414:	9217      	str	r2, [sp, #92]	; 0x5c
     416:	9518      	str	r5, [sp, #96]	; 0x60
     418:	9311      	str	r3, [sp, #68]	; 0x44
     41a:	9512      	str	r5, [sp, #72]	; 0x48
     41c:	a911      	add	r1, sp, #68	; 0x44
     41e:	4868      	ldr	r0, [pc, #416]	; (5c0 <__static_initialization_and_destruction_0(int, int)+0x2b8>)
     420:	f7ff fede 	bl	1e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
const Matrix3f D_gains {{-Kd_pitch_angle, 0, 0},
												{0, Kd_yaw, 0},
												{0, 0, -Kd_roll_angle}};
     424:	aa2a      	add	r2, sp, #168	; 0xa8
const Matrix3f D_gains {{-Kd_pitch_angle, 0, 0},
     426:	edd7 7a00 	vldr	s15, [r7]
     42a:	eef1 7a67 	vneg.f32	s15, s15
												{0, 0, -Kd_roll_angle}};
     42e:	edcd 7a2a 	vstr	s15, [sp, #168]	; 0xa8
     432:	942b      	str	r4, [sp, #172]	; 0xac
     434:	942c      	str	r4, [sp, #176]	; 0xb0
     436:	ab24      	add	r3, sp, #144	; 0x90
     438:	9224      	str	r2, [sp, #144]	; 0x90
     43a:	9525      	str	r5, [sp, #148]	; 0x94
     43c:	aa2d      	add	r2, sp, #180	; 0xb4
     43e:	942d      	str	r4, [sp, #180]	; 0xb4
     440:	4960      	ldr	r1, [pc, #384]	; (5c4 <__static_initialization_and_destruction_0(int, int)+0x2bc>)
     442:	6809      	ldr	r1, [r1, #0]
     444:	912e      	str	r1, [sp, #184]	; 0xb8
     446:	942f      	str	r4, [sp, #188]	; 0xbc
     448:	9226      	str	r2, [sp, #152]	; 0x98
     44a:	9527      	str	r5, [sp, #156]	; 0x9c
     44c:	aa30      	add	r2, sp, #192	; 0xc0
     44e:	9430      	str	r4, [sp, #192]	; 0xc0
     450:	9431      	str	r4, [sp, #196]	; 0xc4
     452:	edd6 7a00 	vldr	s15, [r6]
     456:	eef1 7a67 	vneg.f32	s15, s15
     45a:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
     45e:	9228      	str	r2, [sp, #160]	; 0xa0
     460:	9529      	str	r5, [sp, #164]	; 0xa4
     462:	9322      	str	r3, [sp, #136]	; 0x88
     464:	9523      	str	r5, [sp, #140]	; 0x8c
     466:	a922      	add	r1, sp, #136	; 0x88
     468:	4857      	ldr	r0, [pc, #348]	; (5c8 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
     46a:	f7ff feb9 	bl	1e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>

// SCALE FACTORS FOR PID //
Matrix3f P_gainScale {{1, 0, 0},
											{0, 1, 0},
											{0, 0, 1}};
     46e:	aa3b      	add	r2, sp, #236	; 0xec
     470:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
     474:	963b      	str	r6, [sp, #236]	; 0xec
     476:	943c      	str	r4, [sp, #240]	; 0xf0
     478:	943d      	str	r4, [sp, #244]	; 0xf4
     47a:	ab35      	add	r3, sp, #212	; 0xd4
     47c:	9235      	str	r2, [sp, #212]	; 0xd4
     47e:	9536      	str	r5, [sp, #216]	; 0xd8
     480:	aa3e      	add	r2, sp, #248	; 0xf8
     482:	943e      	str	r4, [sp, #248]	; 0xf8
     484:	963f      	str	r6, [sp, #252]	; 0xfc
     486:	9440      	str	r4, [sp, #256]	; 0x100
     488:	9237      	str	r2, [sp, #220]	; 0xdc
     48a:	9538      	str	r5, [sp, #224]	; 0xe0
     48c:	aa41      	add	r2, sp, #260	; 0x104
     48e:	9441      	str	r4, [sp, #260]	; 0x104
     490:	9442      	str	r4, [sp, #264]	; 0x108
     492:	9643      	str	r6, [sp, #268]	; 0x10c
     494:	9239      	str	r2, [sp, #228]	; 0xe4
     496:	953a      	str	r5, [sp, #232]	; 0xe8
     498:	9333      	str	r3, [sp, #204]	; 0xcc
     49a:	9534      	str	r5, [sp, #208]	; 0xd0
     49c:	a933      	add	r1, sp, #204	; 0xcc
     49e:	484b      	ldr	r0, [pc, #300]	; (5cc <__static_initialization_and_destruction_0(int, int)+0x2c4>)
     4a0:	f7ff fe9e 	bl	1e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
Matrix3f I_gainScale {{1, 0, 0},
											{0, 1, 0},
											{0, 0, 1}};
     4a4:	aa4c      	add	r2, sp, #304	; 0x130
     4a6:	964c      	str	r6, [sp, #304]	; 0x130
     4a8:	944d      	str	r4, [sp, #308]	; 0x134
     4aa:	944e      	str	r4, [sp, #312]	; 0x138
     4ac:	ab46      	add	r3, sp, #280	; 0x118
     4ae:	9246      	str	r2, [sp, #280]	; 0x118
     4b0:	9547      	str	r5, [sp, #284]	; 0x11c
     4b2:	aa4f      	add	r2, sp, #316	; 0x13c
     4b4:	944f      	str	r4, [sp, #316]	; 0x13c
     4b6:	9650      	str	r6, [sp, #320]	; 0x140
     4b8:	9451      	str	r4, [sp, #324]	; 0x144
     4ba:	9248      	str	r2, [sp, #288]	; 0x120
     4bc:	9549      	str	r5, [sp, #292]	; 0x124
     4be:	aa52      	add	r2, sp, #328	; 0x148
     4c0:	9452      	str	r4, [sp, #328]	; 0x148
     4c2:	9453      	str	r4, [sp, #332]	; 0x14c
     4c4:	9654      	str	r6, [sp, #336]	; 0x150
     4c6:	924a      	str	r2, [sp, #296]	; 0x128
     4c8:	954b      	str	r5, [sp, #300]	; 0x12c
     4ca:	9344      	str	r3, [sp, #272]	; 0x110
     4cc:	9545      	str	r5, [sp, #276]	; 0x114
     4ce:	a944      	add	r1, sp, #272	; 0x110
     4d0:	483f      	ldr	r0, [pc, #252]	; (5d0 <__static_initialization_and_destruction_0(int, int)+0x2c8>)
     4d2:	f7ff fe85 	bl	1e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
Matrix3f D_gainScale {{1, 0, 0},
											{0, 1, 0},
											{0, 0, 1}};
     4d6:	aa5d      	add	r2, sp, #372	; 0x174
     4d8:	965d      	str	r6, [sp, #372]	; 0x174
     4da:	945e      	str	r4, [sp, #376]	; 0x178
     4dc:	945f      	str	r4, [sp, #380]	; 0x17c
     4de:	ab57      	add	r3, sp, #348	; 0x15c
     4e0:	9257      	str	r2, [sp, #348]	; 0x15c
     4e2:	9558      	str	r5, [sp, #352]	; 0x160
     4e4:	aa60      	add	r2, sp, #384	; 0x180
     4e6:	9460      	str	r4, [sp, #384]	; 0x180
     4e8:	9661      	str	r6, [sp, #388]	; 0x184
     4ea:	9462      	str	r4, [sp, #392]	; 0x188
     4ec:	9259      	str	r2, [sp, #356]	; 0x164
     4ee:	955a      	str	r5, [sp, #360]	; 0x168
     4f0:	9463      	str	r4, [sp, #396]	; 0x18c
     4f2:	9464      	str	r4, [sp, #400]	; 0x190
     4f4:	9665      	str	r6, [sp, #404]	; 0x194
     4f6:	aa63      	add	r2, sp, #396	; 0x18c
     4f8:	925b      	str	r2, [sp, #364]	; 0x16c
     4fa:	955c      	str	r5, [sp, #368]	; 0x170
     4fc:	9355      	str	r3, [sp, #340]	; 0x154
     4fe:	9556      	str	r5, [sp, #344]	; 0x158
     500:	a955      	add	r1, sp, #340	; 0x154
     502:	4834      	ldr	r0, [pc, #208]	; (5d4 <__static_initialization_and_destruction_0(int, int)+0x2cc>)
     504:	f7ff fe6c 	bl	1e0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>

// PID GAINS FOR RIP //
const Matrix2f P_gains_rip {{-0.1f, 0},
														{0, -0.1f}};
     508:	4b33      	ldr	r3, [pc, #204]	; (5d8 <__static_initialization_and_destruction_0(int, int)+0x2d0>)
     50a:	936c      	str	r3, [sp, #432]	; 0x1b0
     50c:	946d      	str	r4, [sp, #436]	; 0x1b4
     50e:	aa6c      	add	r2, sp, #432	; 0x1b0
     510:	9268      	str	r2, [sp, #416]	; 0x1a0
     512:	2502      	movs	r5, #2
     514:	9569      	str	r5, [sp, #420]	; 0x1a4
     516:	946e      	str	r4, [sp, #440]	; 0x1b8
     518:	936f      	str	r3, [sp, #444]	; 0x1bc
     51a:	ab6e      	add	r3, sp, #440	; 0x1b8
     51c:	936a      	str	r3, [sp, #424]	; 0x1a8
     51e:	956b      	str	r5, [sp, #428]	; 0x1ac
     520:	ab68      	add	r3, sp, #416	; 0x1a0
     522:	9366      	str	r3, [sp, #408]	; 0x198
     524:	9567      	str	r5, [sp, #412]	; 0x19c
     526:	a966      	add	r1, sp, #408	; 0x198
     528:	482c      	ldr	r0, [pc, #176]	; (5dc <__static_initialization_and_destruction_0(int, int)+0x2d4>)
     52a:	f7ff fea1 	bl	270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
const Matrix2f I_gains_rip {{0, 0},
														{0, 0}};
     52e:	9476      	str	r4, [sp, #472]	; 0x1d8
     530:	9477      	str	r4, [sp, #476]	; 0x1dc
     532:	ab76      	add	r3, sp, #472	; 0x1d8
     534:	9372      	str	r3, [sp, #456]	; 0x1c8
     536:	9573      	str	r5, [sp, #460]	; 0x1cc
     538:	9478      	str	r4, [sp, #480]	; 0x1e0
     53a:	9479      	str	r4, [sp, #484]	; 0x1e4
     53c:	ab78      	add	r3, sp, #480	; 0x1e0
     53e:	9374      	str	r3, [sp, #464]	; 0x1d0
     540:	9575      	str	r5, [sp, #468]	; 0x1d4
     542:	ab72      	add	r3, sp, #456	; 0x1c8
     544:	9370      	str	r3, [sp, #448]	; 0x1c0
     546:	9571      	str	r5, [sp, #452]	; 0x1c4
     548:	a970      	add	r1, sp, #448	; 0x1c0
     54a:	4825      	ldr	r0, [pc, #148]	; (5e0 <__static_initialization_and_destruction_0(int, int)+0x2d8>)
     54c:	f7ff fe90 	bl	270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
const Matrix2f D_gains_rip {{0, 0},
														{0, 0}};
     550:	9480      	str	r4, [sp, #512]	; 0x200
     552:	9481      	str	r4, [sp, #516]	; 0x204
     554:	ab80      	add	r3, sp, #512	; 0x200
     556:	937c      	str	r3, [sp, #496]	; 0x1f0
     558:	957d      	str	r5, [sp, #500]	; 0x1f4
     55a:	9482      	str	r4, [sp, #520]	; 0x208
     55c:	9483      	str	r4, [sp, #524]	; 0x20c
     55e:	ab82      	add	r3, sp, #520	; 0x208
     560:	937e      	str	r3, [sp, #504]	; 0x1f8
     562:	957f      	str	r5, [sp, #508]	; 0x1fc
     564:	ab7c      	add	r3, sp, #496	; 0x1f0
     566:	937a      	str	r3, [sp, #488]	; 0x1e8
     568:	957b      	str	r5, [sp, #492]	; 0x1ec
     56a:	a97a      	add	r1, sp, #488	; 0x1e8
     56c:	e03e      	b.n	5ec <__static_initialization_and_destruction_0(int, int)+0x2e4>
     56e:	bf00      	nop
     570:	9999999a 	.word	0x9999999a
     574:	3fc99999 	.word	0x3fc99999
     578:	66666666 	.word	0x66666666
     57c:	3fee6666 	.word	0x3fee6666
     580:	33333333 	.word	0x33333333
     584:	3fd33333 	.word	0x3fd33333
     588:	c28f5c29 	.word	0xc28f5c29
     58c:	3ff028f5 	.word	0x3ff028f5
     590:	9999999a 	.word	0x9999999a
     594:	3fa99999 	.word	0x3fa99999
     598:	20003620 	.word	0x20003620
     59c:	200045bc 	.word	0x200045bc
     5a0:	20003618 	.word	0x20003618
     5a4:	20003610 	.word	0x20003610
     5a8:	200045ac 	.word	0x200045ac
     5ac:	200045b8 	.word	0x200045b8
     5b0:	200045a8 	.word	0x200045a8
     5b4:	20003624 	.word	0x20003624
     5b8:	20004608 	.word	0x20004608
     5bc:	2000361c 	.word	0x2000361c
     5c0:	20004584 	.word	0x20004584
     5c4:	20003614 	.word	0x20003614
     5c8:	20004524 	.word	0x20004524
     5cc:	200045e4 	.word	0x200045e4
     5d0:	20004560 	.word	0x20004560
     5d4:	20004500 	.word	0x20004500
     5d8:	bdcccccd 	.word	0xbdcccccd
     5dc:	200044d0 	.word	0x200044d0
     5e0:	200044b0 	.word	0x200044b0
     5e4:	200045b4 	.word	0x200045b4
     5e8:	200045b0 	.word	0x200045b0
     5ec:	481c      	ldr	r0, [pc, #112]	; (660 <__static_initialization_and_destruction_0(int, int)+0x358>)
     5ee:	f7ff fe3f 	bl	270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>

Matrix2f P_gainScale_rip {{1, 0},
			 							      {0, 1}};
     5f2:	968a      	str	r6, [sp, #552]	; 0x228
     5f4:	948b      	str	r4, [sp, #556]	; 0x22c
     5f6:	ab8a      	add	r3, sp, #552	; 0x228
     5f8:	9386      	str	r3, [sp, #536]	; 0x218
     5fa:	9587      	str	r5, [sp, #540]	; 0x21c
     5fc:	948c      	str	r4, [sp, #560]	; 0x230
     5fe:	968d      	str	r6, [sp, #564]	; 0x234
     600:	ab8c      	add	r3, sp, #560	; 0x230
     602:	9388      	str	r3, [sp, #544]	; 0x220
     604:	9589      	str	r5, [sp, #548]	; 0x224
     606:	ab86      	add	r3, sp, #536	; 0x218
     608:	9384      	str	r3, [sp, #528]	; 0x210
     60a:	9585      	str	r5, [sp, #532]	; 0x214
     60c:	a984      	add	r1, sp, #528	; 0x210
     60e:	4815      	ldr	r0, [pc, #84]	; (664 <__static_initialization_and_destruction_0(int, int)+0x35c>)
     610:	f7ff fe2e 	bl	270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
Matrix2f I_gainScale_rip {{1, 0},
			 									  {0, 1}};
     614:	9694      	str	r6, [sp, #592]	; 0x250
     616:	9495      	str	r4, [sp, #596]	; 0x254
     618:	ab94      	add	r3, sp, #592	; 0x250
     61a:	9390      	str	r3, [sp, #576]	; 0x240
     61c:	9591      	str	r5, [sp, #580]	; 0x244
     61e:	9496      	str	r4, [sp, #600]	; 0x258
     620:	9697      	str	r6, [sp, #604]	; 0x25c
     622:	ab96      	add	r3, sp, #600	; 0x258
     624:	9392      	str	r3, [sp, #584]	; 0x248
     626:	9593      	str	r5, [sp, #588]	; 0x24c
     628:	ab90      	add	r3, sp, #576	; 0x240
     62a:	938e      	str	r3, [sp, #568]	; 0x238
     62c:	958f      	str	r5, [sp, #572]	; 0x23c
     62e:	a98e      	add	r1, sp, #568	; 0x238
     630:	480d      	ldr	r0, [pc, #52]	; (668 <__static_initialization_and_destruction_0(int, int)+0x360>)
     632:	f7ff fe1d 	bl	270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
Matrix2f D_gainScale_rip {{1, 0},
											    {0, 1}};
     636:	969e      	str	r6, [sp, #632]	; 0x278
     638:	949f      	str	r4, [sp, #636]	; 0x27c
     63a:	ab9e      	add	r3, sp, #632	; 0x278
     63c:	939a      	str	r3, [sp, #616]	; 0x268
     63e:	959b      	str	r5, [sp, #620]	; 0x26c
     640:	94a0      	str	r4, [sp, #640]	; 0x280
     642:	96a1      	str	r6, [sp, #644]	; 0x284
     644:	aba0      	add	r3, sp, #640	; 0x280
     646:	939c      	str	r3, [sp, #624]	; 0x270
     648:	959d      	str	r5, [sp, #628]	; 0x274
     64a:	ab9a      	add	r3, sp, #616	; 0x268
     64c:	9398      	str	r3, [sp, #608]	; 0x260
     64e:	9599      	str	r5, [sp, #612]	; 0x264
     650:	a998      	add	r1, sp, #608	; 0x260
     652:	4806      	ldr	r0, [pc, #24]	; (66c <__static_initialization_and_destruction_0(int, int)+0x364>)
     654:	f7ff fe0c 	bl	270 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
// result in pilot control of the axis connected to axisToRotate being removed, and a sine sweep
// conducted between the maximum and minimum frequencies specified.
bool conductSineSweep = 0; 	
float maxFreq = 1.5f; 			// Maximum frequency of the sine sweep in Hz
float minFreq = 0.05f; 			// Minimum frequency of the sine sweep in Hz
float sweepTime = 60;  	// How long to run the sweep for in seconds
     658:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
     65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     660:	20004490 	.word	0x20004490
     664:	200044c0 	.word	0x200044c0
     668:	200044a0 	.word	0x200044a0
     66c:	20004480 	.word	0x20004480

00000670 <_GLOBAL__sub_I_channel_1_fs>:
     670:	b508      	push	{r3, lr}
     672:	f64f 71ff 	movw	r1, #65535	; 0xffff
     676:	2001      	movs	r0, #1
     678:	f7ff fe46 	bl	308 <__static_initialization_and_destruction_0(int, int)>
     67c:	bd08      	pop	{r3, pc}

0000067e <Print::flush()>:
	virtual void flush()				{ }
     67e:	4770      	bx	lr

00000680 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     680:	6d03      	ldr	r3, [r0, #80]	; 0x50
     682:	b113      	cbz	r3, 68a <SDFile::position()+0xa>
     684:	6958      	ldr	r0, [r3, #20]
     686:	2100      	movs	r1, #0
     688:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     68a:	6d43      	ldr	r3, [r0, #84]	; 0x54
     68c:	b113      	cbz	r3, 694 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     68e:	6818      	ldr	r0, [r3, #0]
     690:	6859      	ldr	r1, [r3, #4]
     692:	4770      	bx	lr
     694:	2000      	movs	r0, #0
     696:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     698:	4770      	bx	lr

0000069a <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     69a:	6d03      	ldr	r3, [r0, #80]	; 0x50
     69c:	b113      	cbz	r3, 6a4 <SDFile::size()+0xa>
     69e:	69d8      	ldr	r0, [r3, #28]
     6a0:	2100      	movs	r1, #0
     6a2:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     6a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
     6a6:	b113      	cbz	r3, 6ae <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     6a8:	6918      	ldr	r0, [r3, #16]
     6aa:	6959      	ldr	r1, [r3, #20]
     6ac:	4770      	bx	lr
     6ae:	2000      	movs	r0, #0
     6b0:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     6b2:	4770      	bx	lr

000006b4 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     6b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     6b6:	b10b      	cbz	r3, 6bc <SDFile::isOpen()+0x8>
     6b8:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     6ba:	4770      	bx	lr
     6bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
     6be:	3800      	subs	r0, #0
     6c0:	bf18      	it	ne
     6c2:	2001      	movne	r0, #1
     6c4:	4770      	bx	lr

000006c6 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     6c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
     6c8:	b153      	cbz	r3, 6e0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     6ca:	781a      	ldrb	r2, [r3, #0]
     6cc:	f012 0f08 	tst.w	r2, #8
     6d0:	d020      	beq.n	714 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     6d2:	69d8      	ldr	r0, [r3, #28]
     6d4:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     6d6:	1ac0      	subs	r0, r0, r3
     6d8:	bf48      	it	mi
     6da:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     6de:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     6e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     6e2:	b1cb      	cbz	r3, 718 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     6e4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     6e8:	f012 0f08 	tst.w	r2, #8
     6ec:	d016      	beq.n	71c <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     6ee:	b410      	push	{r4}
     6f0:	691a      	ldr	r2, [r3, #16]
     6f2:	6959      	ldr	r1, [r3, #20]
     6f4:	6818      	ldr	r0, [r3, #0]
     6f6:	685c      	ldr	r4, [r3, #4]
     6f8:	1a13      	subs	r3, r2, r0
     6fa:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     6fe:	4618      	mov	r0, r3
     700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     704:	f172 0200 	sbcs.w	r2, r2, #0
     708:	d301      	bcc.n	70e <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     70a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    return BaseFile::available();
  }
     70e:	f85d 4b04 	ldr.w	r4, [sp], #4
     712:	4770      	bx	lr
     714:	2000      	movs	r0, #0
     716:	4770      	bx	lr
     718:	2000      	movs	r0, #0
    return BaseFile::available();
     71a:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     71c:	2300      	movs	r3, #0
     71e:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     720:	4618      	mov	r0, r3
     722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     726:	f172 0200 	sbcs.w	r2, r2, #0
     72a:	bf28      	it	cs
     72c:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     730:	4770      	bx	lr

00000732 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     732:	798a      	ldrb	r2, [r1, #6]
     734:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     738:	f013 0f80 	tst.w	r3, #128	; 0x80
     73c:	d120      	bne.n	780 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     73e:	b5f0      	push	{r4, r5, r6, r7, lr}
     740:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     742:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     746:	794b      	ldrb	r3, [r1, #5]
     748:	3301      	adds	r3, #1
     74a:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     74c:	790d      	ldrb	r5, [r1, #4]
     74e:	788e      	ldrb	r6, [r1, #2]
     750:	784f      	ldrb	r7, [r1, #1]
     752:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     754:	6d04      	ldr	r4, [r0, #80]	; 0x50
     756:	b14c      	cbz	r4, 76c <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     758:	9103      	str	r1, [sp, #12]
     75a:	9702      	str	r7, [sp, #8]
     75c:	9601      	str	r6, [sp, #4]
     75e:	9500      	str	r5, [sp, #0]
     760:	2102      	movs	r1, #2
     762:	4620      	mov	r0, r4
     764:	f008 f81c 	bl	87a0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     768:	b005      	add	sp, #20
     76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     76c:	6d40      	ldr	r0, [r0, #84]	; 0x54
     76e:	b148      	cbz	r0, 784 <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     770:	9103      	str	r1, [sp, #12]
     772:	9702      	str	r7, [sp, #8]
     774:	9601      	str	r6, [sp, #4]
     776:	9500      	str	r5, [sp, #0]
     778:	2102      	movs	r1, #2
     77a:	f006 f936 	bl	69ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     77e:	e7f3      	b.n	768 <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     780:	2000      	movs	r0, #0
	}
     782:	4770      	bx	lr
           m_xFile ?
     784:	2000      	movs	r0, #0
     786:	e7ef      	b.n	768 <SDFile::setCreateTime(DateTimeFields const&)+0x36>

00000788 <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     788:	b510      	push	{r4, lr}
     78a:	b082      	sub	sp, #8
     78c:	4603      	mov	r3, r0
     78e:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     790:	6d00      	ldr	r0, [r0, #80]	; 0x50
     792:	b310      	cbz	r0, 7da <SDFile::getModifyTime(DateTimeFields&)+0x52>
     794:	aa01      	add	r2, sp, #4
     796:	f10d 0106 	add.w	r1, sp, #6
     79a:	f007 fddb 	bl	8354 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     79e:	b1d0      	cbz	r0, 7d6 <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     7a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     7a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     7a8:	ea53 0102 	orrs.w	r1, r3, r2
     7ac:	d01f      	beq.n	7ee <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     7ae:	f002 011f 	and.w	r1, r2, #31
     7b2:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     7b4:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     7b6:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     7ba:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     7bc:	0ad2      	lsrs	r2, r2, #11
     7be:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     7c0:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     7c4:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     7c6:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     7ca:	3a01      	subs	r2, #1
     7cc:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     7ce:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     7d0:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     7d4:	71a3      	strb	r3, [r4, #6]
	}
     7d6:	b002      	add	sp, #8
     7d8:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     7da:	6d58      	ldr	r0, [r3, #84]	; 0x54
     7dc:	b128      	cbz	r0, 7ea <SDFile::getModifyTime(DateTimeFields&)+0x62>
     7de:	aa01      	add	r2, sp, #4
     7e0:	f10d 0106 	add.w	r1, sp, #6
     7e4:	f005 f9aa 	bl	5b3c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     7e8:	e7d9      	b.n	79e <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     7ea:	2000      	movs	r0, #0
     7ec:	e7f3      	b.n	7d6 <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     7ee:	2000      	movs	r0, #0
     7f0:	e7f1      	b.n	7d6 <SDFile::getModifyTime(DateTimeFields&)+0x4e>

000007f2 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     7f2:	b510      	push	{r4, lr}
     7f4:	b082      	sub	sp, #8
     7f6:	4603      	mov	r3, r0
     7f8:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     7fa:	6d00      	ldr	r0, [r0, #80]	; 0x50
     7fc:	b310      	cbz	r0, 844 <SDFile::getCreateTime(DateTimeFields&)+0x52>
     7fe:	aa01      	add	r2, sp, #4
     800:	f10d 0106 	add.w	r1, sp, #6
     804:	f007 fd96 	bl	8334 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     808:	b1d0      	cbz	r0, 840 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     80a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     80e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     812:	ea53 0102 	orrs.w	r1, r3, r2
     816:	d01f      	beq.n	858 <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     818:	f002 011f 	and.w	r1, r2, #31
     81c:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     81e:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     820:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     824:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     826:	0ad2      	lsrs	r2, r2, #11
     828:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     82a:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     82e:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     830:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     834:	3a01      	subs	r2, #1
     836:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     838:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     83a:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     83e:	71a3      	strb	r3, [r4, #6]
	}
     840:	b002      	add	sp, #8
     842:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     844:	6d58      	ldr	r0, [r3, #84]	; 0x54
     846:	b128      	cbz	r0, 854 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     848:	aa01      	add	r2, sp, #4
     84a:	f10d 0106 	add.w	r1, sp, #6
     84e:	f005 f963 	bl	5b18 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     852:	e7d9      	b.n	808 <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     854:	2000      	movs	r0, #0
     856:	e7f3      	b.n	840 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     858:	2000      	movs	r0, #0
     85a:	e7f1      	b.n	840 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

0000085c <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     85c:	b510      	push	{r4, lr}
     85e:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     860:	6d00      	ldr	r0, [r0, #80]	; 0x50
     862:	b120      	cbz	r0, 86e <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     864:	7803      	ldrb	r3, [r0, #0]
     866:	f013 0f70 	tst.w	r3, #112	; 0x70
     86a:	d10e      	bne.n	88a <SDFile::rewindDirectory()+0x2e>
	}
     86c:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     86e:	6d63      	ldr	r3, [r4, #84]	; 0x54
     870:	2b00      	cmp	r3, #0
     872:	d0fb      	beq.n	86c <SDFile::rewindDirectory()+0x10>
     874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     878:	f013 0f50 	tst.w	r3, #80	; 0x50
     87c:	d0f6      	beq.n	86c <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     87e:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     880:	2200      	movs	r2, #0
     882:	2300      	movs	r3, #0
     884:	f005 fab5 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
     888:	e7f0      	b.n	86c <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     88a:	2100      	movs	r1, #0
     88c:	f007 fb1a 	bl	7ec4 <FatFile::seekSet(unsigned long)>
     890:	6d60      	ldr	r0, [r4, #84]	; 0x54
     892:	2800      	cmp	r0, #0
     894:	d0ea      	beq.n	86c <SDFile::rewindDirectory()+0x10>
     896:	e7f3      	b.n	880 <SDFile::rewindDirectory()+0x24>

00000898 <SDFile::peek()>:
	virtual int peek() {
     898:	b508      	push	{r3, lr}
     89a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     89c:	6d00      	ldr	r0, [r0, #80]	; 0x50
     89e:	b110      	cbz	r0, 8a6 <SDFile::peek()+0xe>
     8a0:	f007 fada 	bl	7e58 <FatFile::peek()>
	}
     8a4:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     8a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
     8a8:	b110      	cbz	r0, 8b0 <SDFile::peek()+0x18>
     8aa:	f005 fa8c 	bl	5dc6 <ExFatFile::peek()>
     8ae:	e7f9      	b.n	8a4 <SDFile::peek()+0xc>
     8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     8b4:	e7f6      	b.n	8a4 <SDFile::peek()+0xc>

000008b6 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     8b6:	b500      	push	{lr}
     8b8:	b083      	sub	sp, #12
     8ba:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     8bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
     8be:	b158      	cbz	r0, 8d8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     8c0:	2201      	movs	r2, #1
     8c2:	f10d 0107 	add.w	r1, sp, #7
     8c6:	f007 f9f2 	bl	7cae <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     8ca:	2801      	cmp	r0, #1
     8cc:	d10f      	bne.n	8ee <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     8ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     8d2:	b003      	add	sp, #12
     8d4:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     8d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     8da:	b128      	cbz	r0, 8e8 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     8dc:	2201      	movs	r2, #1
     8de:	f10d 0107 	add.w	r1, sp, #7
     8e2:	f005 f9a5 	bl	5c30 <ExFatFile::read(void*, unsigned int)>
     8e6:	e7f0      	b.n	8ca <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8ec:	e7f1      	b.n	8d2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     8ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     8f2:	e7ee      	b.n	8d2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000008f4 <SDFile::flush()>:
	virtual void flush() {
     8f4:	b508      	push	{r3, lr}
     8f6:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     8f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
     8fa:	b110      	cbz	r0, 902 <SDFile::flush()+0xe>
     8fc:	f007 fc30 	bl	8160 <FatFile::sync()>
	}
     900:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     902:	6d58      	ldr	r0, [r3, #84]	; 0x54
     904:	2800      	cmp	r0, #0
     906:	d0fb      	beq.n	900 <SDFile::flush()+0xc>
     908:	f005 fee8 	bl	66dc <ExFatFile::sync()>
     90c:	e7f8      	b.n	900 <SDFile::flush()+0xc>

0000090e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     90e:	b500      	push	{lr}
     910:	b083      	sub	sp, #12
     912:	4603      	mov	r3, r0
     914:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     918:	6c80      	ldr	r0, [r0, #72]	; 0x48
     91a:	b138      	cbz	r0, 92c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     91c:	2201      	movs	r2, #1
     91e:	f10d 0107 	add.w	r1, sp, #7
     922:	f007 fff5 	bl	8910 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     926:	b003      	add	sp, #12
     928:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     92c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     92e:	b128      	cbz	r0, 93c <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     930:	2201      	movs	r2, #1
     932:	f10d 0107 	add.w	r1, sp, #7
     936:	f006 f985 	bl	6c44 <ExFatFile::write(void const*, unsigned int)>
     93a:	e7f4      	b.n	926 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     93c:	2000      	movs	r0, #0
    return BaseFile::write(b);
     93e:	e7f2      	b.n	926 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>

00000940 <SDFile::name()>:
	virtual const char * name() {
     940:	b510      	push	{r4, lr}
     942:	4604      	mov	r4, r0
		if (!filename) {
     944:	6d83      	ldr	r3, [r0, #88]	; 0x58
     946:	b10b      	cbz	r3, 94c <SDFile::name()+0xc>
	}
     948:	6da0      	ldr	r0, [r4, #88]	; 0x58
     94a:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     94c:	f44f 7080 	mov.w	r0, #256	; 0x100
     950:	f010 fc40 	bl	111d4 <malloc>
     954:	4601      	mov	r1, r0
     956:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     958:	b180      	cbz	r0, 97c <SDFile::name()+0x3c>
    *name = 0;
     95a:	2300      	movs	r3, #0
     95c:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     95e:	6d20      	ldr	r0, [r4, #80]	; 0x50
     960:	b120      	cbz	r0, 96c <SDFile::name()+0x2c>
     962:	f44f 7280 	mov.w	r2, #256	; 0x100
     966:	f009 f8e9 	bl	9b3c <FatFile::getName(char*, unsigned int)>
     96a:	e7ed      	b.n	948 <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     96c:	6d60      	ldr	r0, [r4, #84]	; 0x54
     96e:	2800      	cmp	r0, #0
     970:	d0ea      	beq.n	948 <SDFile::name()+0x8>
    return getName8(name, size);
     972:	f44f 7280 	mov.w	r2, #256	; 0x100
     976:	f006 fe05 	bl	7584 <ExFatFile::getName8(char*, unsigned int)>
     97a:	e7e5      	b.n	948 <SDFile::name()+0x8>
				filename = &zeroterm;
     97c:	4b01      	ldr	r3, [pc, #4]	; (984 <SDFile::name()+0x44>)
     97e:	65a3      	str	r3, [r4, #88]	; 0x58
     980:	e7e2      	b.n	948 <SDFile::name()+0x8>
     982:	bf00      	nop
     984:	20005837 	.word	0x20005837

00000988 <SDFile::close()>:
	virtual void close() {
     988:	b510      	push	{r4, lr}
     98a:	4604      	mov	r4, r0
		if (filename) {
     98c:	6d80      	ldr	r0, [r0, #88]	; 0x58
     98e:	b118      	cbz	r0, 998 <SDFile::close()+0x10>
			free(filename);
     990:	f010 fc28 	bl	111e4 <free>
			filename = nullptr;
     994:	2300      	movs	r3, #0
     996:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     998:	6d23      	ldr	r3, [r4, #80]	; 0x50
     99a:	b123      	cbz	r3, 9a6 <SDFile::close()+0x1e>
			sdfatfile.close();
     99c:	f104 0018 	add.w	r0, r4, #24
     9a0:	f009 fbe6 	bl	a170 <FsBaseFile::close()>
	}
     9a4:	bd10      	pop	{r4, pc}
     9a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
     9a8:	2b00      	cmp	r3, #0
     9aa:	d1f7      	bne.n	99c <SDFile::close()+0x14>
     9ac:	e7fa      	b.n	9a4 <SDFile::close()+0x1c>

000009ae <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     9ae:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     9b0:	6d04      	ldr	r4, [r0, #80]	; 0x50
     9b2:	b194      	cbz	r4, 9da <SDFile::truncate(unsigned long long)+0x2c>
     9b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     9b8:	4291      	cmp	r1, r2
     9ba:	f04f 0100 	mov.w	r1, #0
     9be:	4199      	sbcs	r1, r3
     9c0:	d201      	bcs.n	9c6 <SDFile::truncate(unsigned long long)+0x18>
     9c2:	2000      	movs	r0, #0
	}
     9c4:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     9c6:	4611      	mov	r1, r2
     9c8:	4620      	mov	r0, r4
     9ca:	f007 fa7b 	bl	7ec4 <FatFile::seekSet(unsigned long)>
     9ce:	2800      	cmp	r0, #0
     9d0:	d0f8      	beq.n	9c4 <SDFile::truncate(unsigned long long)+0x16>
     9d2:	4620      	mov	r0, r4
     9d4:	f007 ff62 	bl	889c <FatFile::truncate()>
     9d8:	e7f4      	b.n	9c4 <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     9da:	6d44      	ldr	r4, [r0, #84]	; 0x54
     9dc:	b144      	cbz	r4, 9f0 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     9de:	4620      	mov	r0, r4
     9e0:	f005 fa07 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
     9e4:	2800      	cmp	r0, #0
     9e6:	d0ed      	beq.n	9c4 <SDFile::truncate(unsigned long long)+0x16>
     9e8:	4620      	mov	r0, r4
     9ea:	f006 f8b8 	bl	6b5e <ExFatFile::truncate()>
     9ee:	e7e9      	b.n	9c4 <SDFile::truncate(unsigned long long)+0x16>
     9f0:	2000      	movs	r0, #0
     9f2:	e7e7      	b.n	9c4 <SDFile::truncate(unsigned long long)+0x16>

000009f4 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     9f4:	b570      	push	{r4, r5, r6, lr}
     9f6:	b094      	sub	sp, #80	; 0x50
     9f8:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
     9fa:	2200      	movs	r2, #0
     9fc:	9201      	str	r2, [sp, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     9fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     a02:	9302      	str	r3, [sp, #8]
     a04:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     a08:	9212      	str	r2, [sp, #72]	; 0x48
     a0a:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a0c:	4b1f      	ldr	r3, [pc, #124]	; (a8c <SDFile::openNextFile(unsigned char)+0x98>)
     a0e:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     a10:	3118      	adds	r1, #24
     a12:	a804      	add	r0, sp, #16
     a14:	f009 fbfa 	bl	a20c <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
     a1a:	2b00      	cmp	r3, #0
     a1c:	d02a      	beq.n	a74 <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     a1e:	205c      	movs	r0, #92	; 0x5c
     a20:	f00c ff34 	bl	d88c <operator new(unsigned int)>
     a24:	4604      	mov	r4, r0
class FileImpl {
     a26:	2600      	movs	r6, #0
     a28:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     a2a:	4b19      	ldr	r3, [pc, #100]	; (a90 <SDFile::openNextFile(unsigned char)+0x9c>)
     a2c:	6003      	str	r3, [r0, #0]
class Print
     a2e:	9b01      	ldr	r3, [sp, #4]
     a30:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     a32:	4b18      	ldr	r3, [pc, #96]	; (a94 <SDFile::openNextFile(unsigned char)+0xa0>)
     a34:	6083      	str	r3, [r0, #8]
     a36:	9b02      	ldr	r3, [sp, #8]
     a38:	6103      	str	r3, [r0, #16]
     a3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
     a3e:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     a40:	a904      	add	r1, sp, #16
     a42:	3018      	adds	r0, #24
     a44:	f009 fb53 	bl	a0ee <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     a48:	4b10      	ldr	r3, [pc, #64]	; (a8c <SDFile::openNextFile(unsigned char)+0x98>)
     a4a:	60a3      	str	r3, [r4, #8]
     a4c:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     a4e:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     a54:	60ab      	str	r3, [r5, #8]
     a56:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     a58:	4b0f      	ldr	r3, [pc, #60]	; (a98 <SDFile::openNextFile(unsigned char)+0xa4>)
     a5a:	602b      	str	r3, [r5, #0]
		f = file;
     a5c:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     a5e:	6863      	ldr	r3, [r4, #4]
     a60:	3301      	adds	r3, #1
     a62:	6063      	str	r3, [r4, #4]
     a64:	4b0d      	ldr	r3, [pc, #52]	; (a9c <SDFile::openNextFile(unsigned char)+0xa8>)
     a66:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     a68:	a804      	add	r0, sp, #16
     a6a:	f009 fb81 	bl	a170 <FsBaseFile::close()>
	}
     a6e:	4628      	mov	r0, r5
     a70:	b014      	add	sp, #80	; 0x50
     a72:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     a76:	2b00      	cmp	r3, #0
     a78:	d1d1      	bne.n	a1e <SDFile::openNextFile(unsigned char)+0x2a>
     a7a:	606b      	str	r3, [r5, #4]
     a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     a80:	60aa      	str	r2, [r5, #8]
     a82:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     a84:	4a04      	ldr	r2, [pc, #16]	; (a98 <SDFile::openNextFile(unsigned char)+0xa4>)
     a86:	602a      	str	r2, [r5, #0]
     a88:	612b      	str	r3, [r5, #16]
     a8a:	e7eb      	b.n	a64 <SDFile::openNextFile(unsigned char)+0x70>
     a8c:	2000278c 	.word	0x2000278c
     a90:	200027b0 	.word	0x200027b0
     a94:	2000280c 	.word	0x2000280c
     a98:	20002760 	.word	0x20002760
     a9c:	20002680 	.word	0x20002680

00000aa0 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     aa0:	b508      	push	{r3, lr}
     aa2:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     aa4:	6c80      	ldr	r0, [r0, #72]	; 0x48
     aa6:	b110      	cbz	r0, aae <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     aa8:	f007 f9d6 	bl	7e58 <FatFile::peek()>
  }
     aac:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     aae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     ab0:	b110      	cbz	r0, ab8 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     ab2:	f005 f988 	bl	5dc6 <ExFatFile::peek()>
     ab6:	e7f9      	b.n	aac <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     abc:	e7f6      	b.n	aac <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

00000abe <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     abe:	6d03      	ldr	r3, [r0, #80]	; 0x50
     ac0:	b133      	cbz	r3, ad0 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	f013 0f70 	tst.w	r3, #112	; 0x70
     ac8:	bf14      	ite	ne
     aca:	2001      	movne	r0, #1
     acc:	2000      	moveq	r0, #0
     ace:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     ad0:	6d43      	ldr	r3, [r0, #84]	; 0x54
     ad2:	b13b      	cbz	r3, ae4 <SDFile::isDirectory()+0x26>
     ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     ad8:	f013 0f50 	tst.w	r3, #80	; 0x50
     adc:	bf14      	ite	ne
     ade:	2001      	movne	r0, #1
     ae0:	2000      	moveq	r0, #0
     ae2:	4770      	bx	lr
     ae4:	2000      	movs	r0, #0
	}
     ae6:	4770      	bx	lr

00000ae8 <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     ae8:	b508      	push	{r3, lr}
     aea:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     aec:	6d00      	ldr	r0, [r0, #80]	; 0x50
     aee:	b110      	cbz	r0, af6 <SDFile::read(void*, unsigned int)+0xe>
     af0:	f007 f8dd 	bl	7cae <FatFile::read(void*, unsigned int)>
	}
     af4:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     af6:	6d58      	ldr	r0, [r3, #84]	; 0x54
     af8:	b110      	cbz	r0, b00 <SDFile::read(void*, unsigned int)+0x18>
     afa:	f005 f899 	bl	5c30 <ExFatFile::read(void*, unsigned int)>
     afe:	e7f9      	b.n	af4 <SDFile::read(void*, unsigned int)+0xc>
     b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b04:	e7f6      	b.n	af4 <SDFile::read(void*, unsigned int)+0xc>

00000b06 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     b06:	b508      	push	{r3, lr}
     b08:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     b0a:	6c80      	ldr	r0, [r0, #72]	; 0x48
     b0c:	b110      	cbz	r0, b14 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     b0e:	f007 fb27 	bl	8160 <FatFile::sync()>
  }
     b12:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     b14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     b16:	2800      	cmp	r0, #0
     b18:	d0fb      	beq.n	b12 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     b1a:	f005 fddf 	bl	66dc <ExFatFile::sync()>
     b1e:	e7f8      	b.n	b12 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

00000b20 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     b20:	b510      	push	{r4, lr}
     b22:	4604      	mov	r4, r0
     b24:	4b0c      	ldr	r3, [pc, #48]	; (b58 <SDFile::~SDFile()+0x38>)
     b26:	6003      	str	r3, [r0, #0]
		if (filename) {
     b28:	6d80      	ldr	r0, [r0, #88]	; 0x58
     b2a:	b118      	cbz	r0, b34 <SDFile::~SDFile()+0x14>
			free(filename);
     b2c:	f010 fb5a 	bl	111e4 <free>
			filename = nullptr;
     b30:	2300      	movs	r3, #0
     b32:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     b34:	6d23      	ldr	r3, [r4, #80]	; 0x50
     b36:	b15b      	cbz	r3, b50 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     b38:	f104 0018 	add.w	r0, r4, #24
     b3c:	f009 fb18 	bl	a170 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <SDFile::~SDFile()+0x3c>)
     b42:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     b44:	f104 0018 	add.w	r0, r4, #24
     b48:	f009 fb12 	bl	a170 <FsBaseFile::close()>
	}
     b4c:	4620      	mov	r0, r4
     b4e:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     b50:	6d63      	ldr	r3, [r4, #84]	; 0x54
     b52:	2b00      	cmp	r3, #0
     b54:	d1f0      	bne.n	b38 <SDFile::~SDFile()+0x18>
     b56:	e7f3      	b.n	b40 <SDFile::~SDFile()+0x20>
     b58:	200027b0 	.word	0x200027b0
     b5c:	20002680 	.word	0x20002680

00000b60 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     b60:	b510      	push	{r4, lr}
     b62:	4604      	mov	r4, r0
     b64:	4b0e      	ldr	r3, [pc, #56]	; (ba0 <SDFile::~SDFile()+0x40>)
     b66:	6003      	str	r3, [r0, #0]
		if (filename) {
     b68:	6d80      	ldr	r0, [r0, #88]	; 0x58
     b6a:	b118      	cbz	r0, b74 <SDFile::~SDFile()+0x14>
			free(filename);
     b6c:	f010 fb3a 	bl	111e4 <free>
			filename = nullptr;
     b70:	2300      	movs	r3, #0
     b72:	65a3      	str	r3, [r4, #88]	; 0x58
     b74:	6d23      	ldr	r3, [r4, #80]	; 0x50
     b76:	b17b      	cbz	r3, b98 <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     b78:	f104 0018 	add.w	r0, r4, #24
     b7c:	f009 faf8 	bl	a170 <FsBaseFile::close()>
     b80:	4b08      	ldr	r3, [pc, #32]	; (ba4 <SDFile::~SDFile()+0x44>)
     b82:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     b84:	f104 0018 	add.w	r0, r4, #24
     b88:	f009 faf2 	bl	a170 <FsBaseFile::close()>
	}
     b8c:	215c      	movs	r1, #92	; 0x5c
     b8e:	4620      	mov	r0, r4
     b90:	f00c fe80 	bl	d894 <operator delete(void*, unsigned int)>
     b94:	4620      	mov	r0, r4
     b96:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     b98:	6d63      	ldr	r3, [r4, #84]	; 0x54
     b9a:	2b00      	cmp	r3, #0
     b9c:	d1ec      	bne.n	b78 <SDFile::~SDFile()+0x18>
     b9e:	e7ef      	b.n	b80 <SDFile::~SDFile()+0x20>
     ba0:	200027b0 	.word	0x200027b0
     ba4:	20002680 	.word	0x20002680

00000ba8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     ba8:	b508      	push	{r3, lr}
     baa:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     bac:	6c80      	ldr	r0, [r0, #72]	; 0x48
     bae:	b110      	cbz	r0, bb6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     bb0:	f007 feae 	bl	8910 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     bb4:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     bb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     bb8:	b110      	cbz	r0, bc0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     bba:	f006 f843 	bl	6c44 <ExFatFile::write(void const*, unsigned int)>
     bbe:	e7f9      	b.n	bb4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     bc0:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     bc2:	e7f7      	b.n	bb4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000bc4 <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     bc4:	b508      	push	{r3, lr}
     bc6:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     bc8:	6d00      	ldr	r0, [r0, #80]	; 0x50
     bca:	b110      	cbz	r0, bd2 <SDFile::write(void const*, unsigned int)+0xe>
     bcc:	f007 fea0 	bl	8910 <FatFile::write(void const*, unsigned int)>
	}
     bd0:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     bd2:	6d58      	ldr	r0, [r3, #84]	; 0x54
     bd4:	b110      	cbz	r0, bdc <SDFile::write(void const*, unsigned int)+0x18>
     bd6:	f006 f835 	bl	6c44 <ExFatFile::write(void const*, unsigned int)>
     bda:	e7f9      	b.n	bd0 <SDFile::write(void const*, unsigned int)+0xc>
     bdc:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     bde:	e7f7      	b.n	bd0 <SDFile::write(void const*, unsigned int)+0xc>

00000be0 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     be0:	798a      	ldrb	r2, [r1, #6]
     be2:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     be6:	f013 0f80 	tst.w	r3, #128	; 0x80
     bea:	d120      	bne.n	c2e <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     bec:	b5f0      	push	{r4, r5, r6, r7, lr}
     bee:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     bf0:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     bf4:	794b      	ldrb	r3, [r1, #5]
     bf6:	3301      	adds	r3, #1
     bf8:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     bfa:	790d      	ldrb	r5, [r1, #4]
     bfc:	788e      	ldrb	r6, [r1, #2]
     bfe:	784f      	ldrb	r7, [r1, #1]
     c00:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     c02:	6d04      	ldr	r4, [r0, #80]	; 0x50
     c04:	b14c      	cbz	r4, c1a <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     c06:	9103      	str	r1, [sp, #12]
     c08:	9702      	str	r7, [sp, #8]
     c0a:	9601      	str	r6, [sp, #4]
     c0c:	9500      	str	r5, [sp, #0]
     c0e:	2104      	movs	r1, #4
     c10:	4620      	mov	r0, r4
     c12:	f007 fdc5 	bl	87a0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     c16:	b005      	add	sp, #20
     c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     c1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
     c1c:	b148      	cbz	r0, c32 <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     c1e:	9103      	str	r1, [sp, #12]
     c20:	9702      	str	r7, [sp, #8]
     c22:	9601      	str	r6, [sp, #4]
     c24:	9500      	str	r5, [sp, #0]
     c26:	2104      	movs	r1, #4
     c28:	f005 fedf 	bl	69ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     c2c:	e7f3      	b.n	c16 <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     c2e:	2000      	movs	r0, #0
	}
     c30:	4770      	bx	lr
           m_xFile ?
     c32:	2000      	movs	r0, #0
     c34:	e7ef      	b.n	c16 <SDFile::setModifyTime(DateTimeFields const&)+0x36>

00000c36 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     c36:	6d03      	ldr	r3, [r0, #80]	; 0x50
     c38:	b153      	cbz	r3, c50 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     c3a:	781a      	ldrb	r2, [r3, #0]
     c3c:	f012 0f08 	tst.w	r2, #8
     c40:	d020      	beq.n	c84 <SDFile::available()+0x4e>
     c42:	69d8      	ldr	r0, [r3, #28]
     c44:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     c46:	1ac0      	subs	r0, r0, r3
     c48:	bf48      	it	mi
     c4a:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     c4e:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     c50:	6d43      	ldr	r3, [r0, #84]	; 0x54
     c52:	b1cb      	cbz	r3, c88 <SDFile::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     c54:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     c58:	f012 0f08 	tst.w	r2, #8
     c5c:	d016      	beq.n	c8c <SDFile::available()+0x56>
	virtual int available() {
     c5e:	b410      	push	{r4}
     c60:	691a      	ldr	r2, [r3, #16]
     c62:	6959      	ldr	r1, [r3, #20]
     c64:	6818      	ldr	r0, [r3, #0]
     c66:	685c      	ldr	r4, [r3, #4]
     c68:	1a13      	subs	r3, r2, r0
     c6a:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     c6e:	4618      	mov	r0, r3
     c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c74:	f172 0200 	sbcs.w	r2, r2, #0
     c78:	d301      	bcc.n	c7e <SDFile::available()+0x48>
     c7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}
     c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
     c82:	4770      	bx	lr
     c84:	2000      	movs	r0, #0
     c86:	4770      	bx	lr
     c88:	2000      	movs	r0, #0
		return sdfatfile.available();
     c8a:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     c8c:	2300      	movs	r3, #0
     c8e:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     c90:	4618      	mov	r0, r3
     c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c96:	f172 0200 	sbcs.w	r2, r2, #0
     c9a:	bf28      	it	cs
     c9c:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     ca0:	4770      	bx	lr

00000ca2 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     ca2:	b510      	push	{r4, lr}
     ca4:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     ca6:	b12c      	cbz	r4, cb4 <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     ca8:	2c01      	cmp	r4, #1
     caa:	d019      	beq.n	ce0 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     cac:	2c02      	cmp	r4, #2
     cae:	d034      	beq.n	d1a <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     cb0:	2000      	movs	r0, #0
	}
     cb2:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     cb4:	6d04      	ldr	r4, [r0, #80]	; 0x50
     cb6:	b16c      	cbz	r4, cd4 <SDFile::seek(unsigned long long, int)+0x32>
     cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     cbc:	4291      	cmp	r1, r2
     cbe:	f04f 0100 	mov.w	r1, #0
     cc2:	4199      	sbcs	r1, r3
     cc4:	d201      	bcs.n	cca <SDFile::seek(unsigned long long, int)+0x28>
     cc6:	2000      	movs	r0, #0
     cc8:	e7f3      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
     cca:	4611      	mov	r1, r2
     ccc:	4620      	mov	r0, r4
     cce:	f007 f8f9 	bl	7ec4 <FatFile::seekSet(unsigned long)>
     cd2:	e7ee      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     cd4:	6d40      	ldr	r0, [r0, #84]	; 0x54
     cd6:	2800      	cmp	r0, #0
     cd8:	d03c      	beq.n	d54 <SDFile::seek(unsigned long long, int)+0xb2>
     cda:	f005 f88a 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
     cde:	e7e8      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     ce0:	6d04      	ldr	r4, [r0, #80]	; 0x50
     ce2:	b164      	cbz	r4, cfe <SDFile::seek(unsigned long long, int)+0x5c>
     ce4:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     ce6:	1889      	adds	r1, r1, r2
     ce8:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     cf0:	428a      	cmp	r2, r1
     cf2:	f04f 0200 	mov.w	r2, #0
     cf6:	419a      	sbcs	r2, r3
     cf8:	d20b      	bcs.n	d12 <SDFile::seek(unsigned long long, int)+0x70>
     cfa:	2000      	movs	r0, #0
     cfc:	e7d9      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     cfe:	6d40      	ldr	r0, [r0, #84]	; 0x54
     d00:	b350      	cbz	r0, d58 <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     d02:	6801      	ldr	r1, [r0, #0]
     d04:	6844      	ldr	r4, [r0, #4]
     d06:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     d08:	eb43 0304 	adc.w	r3, r3, r4
     d0c:	f005 f871 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
     d10:	e7cf      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d12:	4620      	mov	r0, r4
     d14:	f007 f8d6 	bl	7ec4 <FatFile::seekSet(unsigned long)>
     d18:	e7cb      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     d1a:	6d04      	ldr	r4, [r0, #80]	; 0x50
     d1c:	b164      	cbz	r4, d38 <SDFile::seek(unsigned long long, int)+0x96>
     d1e:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     d20:	1889      	adds	r1, r1, r2
     d22:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     d2a:	428a      	cmp	r2, r1
     d2c:	f04f 0200 	mov.w	r2, #0
     d30:	419a      	sbcs	r2, r3
     d32:	d20b      	bcs.n	d4c <SDFile::seek(unsigned long long, int)+0xaa>
     d34:	2000      	movs	r0, #0
     d36:	e7bc      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     d38:	6d40      	ldr	r0, [r0, #84]	; 0x54
     d3a:	b178      	cbz	r0, d5c <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
     d3c:	6901      	ldr	r1, [r0, #16]
     d3e:	6944      	ldr	r4, [r0, #20]
     d40:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     d42:	eb43 0304 	adc.w	r3, r3, r4
     d46:	f005 f854 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
     d4a:	e7b2      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d4c:	4620      	mov	r0, r4
     d4e:	f007 f8b9 	bl	7ec4 <FatFile::seekSet(unsigned long)>
     d52:	e7ae      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     d54:	2000      	movs	r0, #0
     d56:	e7ac      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
     d58:	2000      	movs	r0, #0
     d5a:	e7aa      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>
     d5c:	2000      	movs	r0, #0
     d5e:	e7a8      	b.n	cb2 <SDFile::seek(unsigned long long, int)+0x10>

00000d60 <controlMixer()>:
  s1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     d60:	4b19      	ldr	r3, [pc, #100]	; (dc8 <controlMixer()+0x68>)
     d62:	edd3 6a00 	vldr	s13, [r3]
     d66:	4b19      	ldr	r3, [pc, #100]	; (dcc <controlMixer()+0x6c>)
     d68:	ed93 5a00 	vldr	s10, [r3]
     d6c:	ee36 7ac5 	vsub.f32	s14, s13, s10
     d70:	4b17      	ldr	r3, [pc, #92]	; (dd0 <controlMixer()+0x70>)
     d72:	edd3 7a00 	vldr	s15, [r3]
     d76:	4b17      	ldr	r3, [pc, #92]	; (dd4 <controlMixer()+0x74>)
     d78:	ed93 6a00 	vldr	s12, [r3]
     d7c:	ee77 5a27 	vadd.f32	s11, s14, s15
     d80:	ee75 5a86 	vadd.f32	s11, s11, s12
     d84:	4b14      	ldr	r3, [pc, #80]	; (dd8 <controlMixer()+0x78>)
     d86:	edc3 5a00 	vstr	s11, [r3]
  s2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
     d8e:	ee37 7a46 	vsub.f32	s14, s14, s12
     d92:	4b12      	ldr	r3, [pc, #72]	; (ddc <controlMixer()+0x7c>)
     d94:	ed83 7a00 	vstr	s14, [r3]
  s3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     d98:	ee36 7a85 	vadd.f32	s14, s13, s10
     d9c:	ee77 6a67 	vsub.f32	s13, s14, s15
     da0:	ee76 6a86 	vadd.f32	s13, s13, s12
     da4:	4b0e      	ldr	r3, [pc, #56]	; (de0 <controlMixer()+0x80>)
     da6:	edc3 6a00 	vstr	s13, [r3]
  s4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     daa:	ee77 7a87 	vadd.f32	s15, s15, s14
     dae:	ee77 7ac6 	vsub.f32	s15, s15, s12
     db2:	4b0c      	ldr	r3, [pc, #48]	; (de4 <controlMixer()+0x84>)
     db4:	edc3 7a00 	vstr	s15, [r3]
  s5_command_scaled = 0;
     db8:	2300      	movs	r3, #0
     dba:	4a0b      	ldr	r2, [pc, #44]	; (de8 <controlMixer()+0x88>)
     dbc:	6013      	str	r3, [r2, #0]
  s6_command_scaled = 0;
     dbe:	4a0b      	ldr	r2, [pc, #44]	; (dec <controlMixer()+0x8c>)
     dc0:	6013      	str	r3, [r2, #0]
  s7_command_scaled = 0;
     dc2:	4a0b      	ldr	r2, [pc, #44]	; (df0 <controlMixer()+0x90>)
     dc4:	6013      	str	r3, [r2, #0]
}
     dc6:	4770      	bx	lr
     dc8:	20005800 	.word	0x20005800
     dcc:	200055b8 	.word	0x200055b8
     dd0:	200055e4 	.word	0x200055e4
     dd4:	2000581c 	.word	0x2000581c
     dd8:	20005624 	.word	0x20005624
     ddc:	2000562c 	.word	0x2000562c
     de0:	20005634 	.word	0x20005634
     de4:	2000563c 	.word	0x2000563c
     de8:	20005644 	.word	0x20005644
     dec:	2000564c 	.word	0x2000564c
     df0:	20005654 	.word	0x20005654

00000df4 <IMUinit()>:
void IMUinit() {
     df4:	b510      	push	{r4, lr}
    Wire.begin();
     df6:	4c17      	ldr	r4, [pc, #92]	; (e54 <IMUinit()+0x60>)
     df8:	4620      	mov	r0, r4
     dfa:	f014 fd8d 	bl	15918 <___ZN7TwoWire5beginEv_veneer>
    Wire.setClock(1000000); //Note this is 2.5 times the spec sheet 400 kHz max...
     dfe:	4916      	ldr	r1, [pc, #88]	; (e58 <IMUinit()+0x64>)
     e00:	4620      	mov	r0, r4
     e02:	f003 ff2b 	bl	4c5c <TwoWire::setClock(unsigned long)>
    mpu6050.initialize();
     e06:	4c15      	ldr	r4, [pc, #84]	; (e5c <IMUinit()+0x68>)
     e08:	4620      	mov	r0, r4
     e0a:	f003 fa7b 	bl	4304 <MPU6050::initialize()>
    if (mpu6050.testConnection() == false) {
     e0e:	4620      	mov	r0, r4
     e10:	f003 fa9e 	bl	4350 <MPU6050::testConnection()>
     e14:	b998      	cbnz	r0, e3e <IMUinit()+0x4a>
							  return write((const uint8_t *)str, strlen(str)); }
     e16:	4c12      	ldr	r4, [pc, #72]	; (e60 <IMUinit()+0x6c>)
     e18:	6823      	ldr	r3, [r4, #0]
     e1a:	685b      	ldr	r3, [r3, #4]
     e1c:	2223      	movs	r2, #35	; 0x23
     e1e:	4911      	ldr	r1, [pc, #68]	; (e64 <IMUinit()+0x70>)
     e20:	4620      	mov	r0, r4
     e22:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     e24:	4620      	mov	r0, r4
     e26:	f00b fea8 	bl	cb7a <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     e2a:	6823      	ldr	r3, [r4, #0]
     e2c:	685b      	ldr	r3, [r3, #4]
     e2e:	2229      	movs	r2, #41	; 0x29
     e30:	490d      	ldr	r1, [pc, #52]	; (e68 <IMUinit()+0x74>)
     e32:	4620      	mov	r0, r4
     e34:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     e36:	4620      	mov	r0, r4
     e38:	f00b fe9f 	bl	cb7a <Print::println()>
      while(1) {}
     e3c:	e7fe      	b.n	e3c <IMUinit()+0x48>
    mpu6050.setFullScaleGyroRange(GYRO_SCALE);
     e3e:	4c07      	ldr	r4, [pc, #28]	; (e5c <IMUinit()+0x68>)
     e40:	2100      	movs	r1, #0
     e42:	4620      	mov	r0, r4
     e44:	f003 f9fc 	bl	4240 <MPU6050::setFullScaleGyroRange(unsigned char)>
    mpu6050.setFullScaleAccelRange(ACCEL_SCALE);
     e48:	2100      	movs	r1, #0
     e4a:	4620      	mov	r0, r4
     e4c:	f003 fa04 	bl	4258 <MPU6050::setFullScaleAccelRange(unsigned char)>
}
     e50:	bd10      	pop	{r4, pc}
     e52:	bf00      	nop
     e54:	20004c50 	.word	0x20004c50
     e58:	000f4240 	.word	0x000f4240
     e5c:	20005578 	.word	0x20005578
     e60:	20003634 	.word	0x20003634
     e64:	20001d28 	.word	0x20001d28
     e68:	20001d4c 	.word	0x20001d4c
     e6c:	00000000 	.word	0x00000000

00000e70 <getIMUdata()>:
void getIMUdata() {
     e70:	b500      	push	{lr}
     e72:	b089      	sub	sp, #36	; 0x24
    mpu6050.getMotion6(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ);
     e74:	ab05      	add	r3, sp, #20
     e76:	9302      	str	r3, [sp, #8]
     e78:	f10d 0316 	add.w	r3, sp, #22
     e7c:	9301      	str	r3, [sp, #4]
     e7e:	ab06      	add	r3, sp, #24
     e80:	9300      	str	r3, [sp, #0]
     e82:	f10d 031a 	add.w	r3, sp, #26
     e86:	aa07      	add	r2, sp, #28
     e88:	f10d 011e 	add.w	r1, sp, #30
     e8c:	48a2      	ldr	r0, [pc, #648]	; (1118 <getIMUdata()+0x2a8>)
     e8e:	f003 f9ef 	bl	4270 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>
  AccY = AcY / ACCEL_SCALE_FACTOR;
     e92:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
     e96:	ee03 3a10 	vmov	s6, r3
     e9a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
     e9e:	ed9f 2b9a 	vldr	d2, [pc, #616]	; 1108 <getIMUdata()+0x298>
     ea2:	ee23 3b02 	vmul.f64	d3, d3, d2
     ea6:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  AccY = AccY - AccErrorY;
     eaa:	4b9c      	ldr	r3, [pc, #624]	; (111c <getIMUdata()+0x2ac>)
     eac:	edd3 7a00 	vldr	s15, [r3]
     eb0:	ee33 3a67 	vsub.f32	s6, s6, s15
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
     eb4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
     eb8:	ee06 3a10 	vmov	s12, r3
     ebc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     ec0:	ee26 6b02 	vmul.f64	d6, d6, d2
     ec4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  AccZ = AccZ - AccErrorZ;
     ec8:	4b95      	ldr	r3, [pc, #596]	; (1120 <getIMUdata()+0x2b0>)
     eca:	edd3 7a00 	vldr	s15, [r3]
     ece:	ee36 6a67 	vsub.f32	s12, s12, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     ed2:	4b94      	ldr	r3, [pc, #592]	; (1124 <getIMUdata()+0x2b4>)
     ed4:	edd3 6a00 	vldr	s13, [r3]
     ed8:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     edc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     ee0:	ee35 4b44 	vsub.f64	d4, d5, d4
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
     ee4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     ee8:	ee07 3a10 	vmov	s14, r3
     eec:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     ef0:	ee27 7b02 	vmul.f64	d7, d7, d2
     ef4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  AccX = AccX - AccErrorX;
     ef8:	4b8b      	ldr	r3, [pc, #556]	; (1128 <getIMUdata()+0x2b8>)
     efa:	edd3 7a00 	vldr	s15, [r3]
     efe:	ee37 7a67 	vsub.f32	s14, s14, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     f02:	ee27 7a26 	vmul.f32	s14, s14, s13
     f06:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     f0a:	4988      	ldr	r1, [pc, #544]	; (112c <getIMUdata()+0x2bc>)
     f0c:	ed91 2a00 	vldr	s4, [r1]
     f10:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     f14:	ee02 7b04 	vmla.f64	d7, d2, d4
     f18:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     f1c:	4b84      	ldr	r3, [pc, #528]	; (1130 <getIMUdata()+0x2c0>)
     f1e:	ed83 7a00 	vstr	s14, [r3]
  AccY = (1.0 - B_accel)*AccY_prev + B_accel*AccY;
     f22:	4a84      	ldr	r2, [pc, #528]	; (1134 <getIMUdata()+0x2c4>)
     f24:	ed92 2a00 	vldr	s4, [r2]
     f28:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     f2c:	ee23 3a26 	vmul.f32	s6, s6, s13
     f30:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     f34:	ee02 3b04 	vmla.f64	d3, d2, d4
     f38:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     f3c:	4b7e      	ldr	r3, [pc, #504]	; (1138 <getIMUdata()+0x2c8>)
     f3e:	ed83 3a00 	vstr	s6, [r3]
  AccZ = (1.0 - B_accel)*AccZ_prev + B_accel*AccZ;
     f42:	4b7e      	ldr	r3, [pc, #504]	; (113c <getIMUdata()+0x2cc>)
     f44:	ed93 2a00 	vldr	s4, [r3]
     f48:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     f4c:	ee26 6a26 	vmul.f32	s12, s12, s13
     f50:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     f54:	ee02 6b04 	vmla.f64	d6, d2, d4
     f58:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     f5c:	4878      	ldr	r0, [pc, #480]	; (1140 <getIMUdata()+0x2d0>)
     f5e:	ed80 6a00 	vstr	s12, [r0]
  AccX_prev = AccX;
     f62:	ed81 7a00 	vstr	s14, [r1]
  AccY_prev = AccY;
     f66:	ed82 3a00 	vstr	s6, [r2]
  AccZ_prev = AccZ;
     f6a:	ed83 6a00 	vstr	s12, [r3]
  GyroY = GyY / GYRO_SCALE_FACTOR;
     f6e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
     f72:	ee07 3a10 	vmov	s14, r3
     f76:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f7a:	ed9f 2b65 	vldr	d2, [pc, #404]	; 1110 <getIMUdata()+0x2a0>
     f7e:	ee87 3b02 	vdiv.f64	d3, d7, d2
     f82:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  GyroY = GyroY - GyroErrorY;
     f86:	4b6f      	ldr	r3, [pc, #444]	; (1144 <getIMUdata()+0x2d4>)
     f88:	edd3 7a00 	vldr	s15, [r3]
     f8c:	ee33 3a67 	vsub.f32	s6, s6, s15
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
     f90:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
     f94:	ee07 3a10 	vmov	s14, r3
     f98:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f9c:	ee87 6b02 	vdiv.f64	d6, d7, d2
     fa0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  GyroZ = GyroZ - GyroErrorZ;
     fa4:	4b68      	ldr	r3, [pc, #416]	; (1148 <getIMUdata()+0x2d8>)
     fa6:	edd3 7a00 	vldr	s15, [r3]
     faa:	ee36 6a67 	vsub.f32	s12, s12, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     fae:	4b67      	ldr	r3, [pc, #412]	; (114c <getIMUdata()+0x2dc>)
     fb0:	edd3 6a00 	vldr	s13, [r3]
     fb4:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     fb8:	ee35 4b44 	vsub.f64	d4, d5, d4
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
     fbc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     fc0:	ee01 3a10 	vmov	s2, r3
     fc4:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
     fc8:	ee81 7b02 	vdiv.f64	d7, d1, d2
     fcc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  GyroX = GyroX - GyroErrorX;
     fd0:	4b5f      	ldr	r3, [pc, #380]	; (1150 <getIMUdata()+0x2e0>)
     fd2:	edd3 7a00 	vldr	s15, [r3]
     fd6:	ee37 7a67 	vsub.f32	s14, s14, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     fda:	ee27 7a26 	vmul.f32	s14, s14, s13
     fde:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     fe2:	495c      	ldr	r1, [pc, #368]	; (1154 <getIMUdata()+0x2e4>)
     fe4:	ed91 2a00 	vldr	s4, [r1]
     fe8:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     fec:	ee02 7b04 	vmla.f64	d7, d2, d4
     ff0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     ff4:	4b58      	ldr	r3, [pc, #352]	; (1158 <getIMUdata()+0x2e8>)
     ff6:	ed83 7a00 	vstr	s14, [r3]
  GyroY = (1.0 - B_gyro)*GyroY_prev + B_gyro*GyroY;
     ffa:	4a58      	ldr	r2, [pc, #352]	; (115c <getIMUdata()+0x2ec>)
     ffc:	ed92 2a00 	vldr	s4, [r2]
    1000:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    1004:	ee23 3a26 	vmul.f32	s6, s6, s13
    1008:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    100c:	ee02 3b04 	vmla.f64	d3, d2, d4
    1010:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
    1014:	4b52      	ldr	r3, [pc, #328]	; (1160 <getIMUdata()+0x2f0>)
    1016:	ed83 3a00 	vstr	s6, [r3]
  GyroZ = (1.0 - B_gyro)*GyroZ_prev + B_gyro*GyroZ;
    101a:	4b52      	ldr	r3, [pc, #328]	; (1164 <getIMUdata()+0x2f4>)
    101c:	ed93 2a00 	vldr	s4, [r3]
    1020:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    1024:	ee26 6a26 	vmul.f32	s12, s12, s13
    1028:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    102c:	ee02 6b04 	vmla.f64	d6, d2, d4
    1030:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    1034:	484c      	ldr	r0, [pc, #304]	; (1168 <getIMUdata()+0x2f8>)
    1036:	ed80 6a00 	vstr	s12, [r0]
  GyroX_prev = GyroX;
    103a:	ed81 7a00 	vstr	s14, [r1]
  GyroY_prev = GyroY;
    103e:	ed82 3a00 	vstr	s6, [r2]
  GyroZ_prev = GyroZ;
    1042:	ed83 6a00 	vstr	s12, [r3]
  MagY = MgY/6.0;
    1046:	ed9f 7a49 	vldr	s14, [pc, #292]	; 116c <getIMUdata()+0x2fc>
  MagY = (MagY - MagErrorY)*MagScaleY;
    104a:	4b49      	ldr	r3, [pc, #292]	; (1170 <getIMUdata()+0x300>)
    104c:	ed93 6a00 	vldr	s12, [r3]
    1050:	ee37 6a46 	vsub.f32	s12, s14, s12
    1054:	4b47      	ldr	r3, [pc, #284]	; (1174 <getIMUdata()+0x304>)
    1056:	edd3 7a00 	vldr	s15, [r3]
    105a:	ee26 6a27 	vmul.f32	s12, s12, s15
  MagZ = (MagZ - MagErrorZ)*MagScaleZ;
    105e:	4b46      	ldr	r3, [pc, #280]	; (1178 <getIMUdata()+0x308>)
    1060:	ed93 4a00 	vldr	s8, [r3]
    1064:	ee37 4a44 	vsub.f32	s8, s14, s8
    1068:	4b44      	ldr	r3, [pc, #272]	; (117c <getIMUdata()+0x30c>)
    106a:	edd3 7a00 	vldr	s15, [r3]
    106e:	ee24 4a27 	vmul.f32	s8, s8, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
    1072:	4b43      	ldr	r3, [pc, #268]	; (1180 <getIMUdata()+0x310>)
    1074:	edd3 4a00 	vldr	s9, [r3]
    1078:	eeb7 3ae4 	vcvt.f64.f32	d3, s9
    107c:	ee35 5b43 	vsub.f64	d5, d5, d3
  MagX = (MagX - MagErrorX)*MagScaleX;
    1080:	4b40      	ldr	r3, [pc, #256]	; (1184 <getIMUdata()+0x314>)
    1082:	edd3 7a00 	vldr	s15, [r3]
    1086:	ee37 7a67 	vsub.f32	s14, s14, s15
    108a:	4b3f      	ldr	r3, [pc, #252]	; (1188 <getIMUdata()+0x318>)
    108c:	edd3 7a00 	vldr	s15, [r3]
    1090:	ee27 7a27 	vmul.f32	s14, s14, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
    1094:	ee27 7a24 	vmul.f32	s14, s14, s9
    1098:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    109c:	493b      	ldr	r1, [pc, #236]	; (118c <getIMUdata()+0x31c>)
    109e:	ed91 3a00 	vldr	s6, [r1]
    10a2:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    10a6:	ee03 7b05 	vmla.f64	d7, d3, d5
    10aa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    10ae:	4b38      	ldr	r3, [pc, #224]	; (1190 <getIMUdata()+0x320>)
    10b0:	ed83 7a00 	vstr	s14, [r3]
  MagY = (1.0 - B_mag)*MagY_prev + B_mag*MagY;
    10b4:	4a37      	ldr	r2, [pc, #220]	; (1194 <getIMUdata()+0x324>)
    10b6:	ed92 3a00 	vldr	s6, [r2]
    10ba:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    10be:	ee26 6a24 	vmul.f32	s12, s12, s9
    10c2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    10c6:	ee03 6b05 	vmla.f64	d6, d3, d5
    10ca:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    10ce:	4b32      	ldr	r3, [pc, #200]	; (1198 <getIMUdata()+0x328>)
    10d0:	ed83 6a00 	vstr	s12, [r3]
  MagZ = (1.0 - B_mag)*MagZ_prev + B_mag*MagZ;
    10d4:	4b31      	ldr	r3, [pc, #196]	; (119c <getIMUdata()+0x32c>)
    10d6:	ed93 3a00 	vldr	s6, [r3]
    10da:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
    10de:	ee24 4a24 	vmul.f32	s8, s8, s9
    10e2:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    10e6:	ee03 4b05 	vmla.f64	d4, d3, d5
    10ea:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    10ee:	482c      	ldr	r0, [pc, #176]	; (11a0 <getIMUdata()+0x330>)
    10f0:	ed80 4a00 	vstr	s8, [r0]
  MagX_prev = MagX;
    10f4:	ed81 7a00 	vstr	s14, [r1]
  MagY_prev = MagY;
    10f8:	ed82 6a00 	vstr	s12, [r2]
  MagZ_prev = MagZ;
    10fc:	ed83 4a00 	vstr	s8, [r3]
}
    1100:	b009      	add	sp, #36	; 0x24
    1102:	f85d fb04 	ldr.w	pc, [sp], #4
    1106:	bf00      	nop
    1108:	00000000 	.word	0x00000000
    110c:	3f100000 	.word	0x3f100000
    1110:	00000000 	.word	0x00000000
    1114:	40606000 	.word	0x40606000
    1118:	20005578 	.word	0x20005578
    111c:	200035e4 	.word	0x200035e4
    1120:	200035e8 	.word	0x200035e8
    1124:	200035ec 	.word	0x200035ec
    1128:	200035e0 	.word	0x200035e0
    112c:	200044ec 	.word	0x200044ec
    1130:	200044e8 	.word	0x200044e8
    1134:	200044f4 	.word	0x200044f4
    1138:	200044f0 	.word	0x200044f0
    113c:	200044fc 	.word	0x200044fc
    1140:	200044f8 	.word	0x200044f8
    1144:	20003608 	.word	0x20003608
    1148:	2000360c 	.word	0x2000360c
    114c:	200035f0 	.word	0x200035f0
    1150:	20003604 	.word	0x20003604
    1154:	2000454c 	.word	0x2000454c
    1158:	20004548 	.word	0x20004548
    115c:	20004554 	.word	0x20004554
    1160:	20004550 	.word	0x20004550
    1164:	2000455c 	.word	0x2000455c
    1168:	20004558 	.word	0x20004558
    116c:	00000000 	.word	0x00000000
    1170:	200045c4 	.word	0x200045c4
    1174:	2000362c 	.word	0x2000362c
    1178:	200045c8 	.word	0x200045c8
    117c:	20003630 	.word	0x20003630
    1180:	200035f8 	.word	0x200035f8
    1184:	200045c0 	.word	0x200045c0
    1188:	20003628 	.word	0x20003628
    118c:	200045d0 	.word	0x200045d0
    1190:	200045cc 	.word	0x200045cc
    1194:	200045d8 	.word	0x200045d8
    1198:	200045d4 	.word	0x200045d4
    119c:	200045e0 	.word	0x200045e0
    11a0:	200045dc 	.word	0x200045dc
    11a4:	00000000 	.word	0x00000000

000011a8 <setDesStateSerial(int)>:
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
}

void setDesStateSerial(int controlledAxis) {
    11a8:	b538      	push	{r3, r4, r5, lr}
    11aa:	ed2d 8b02 	vpush	{d8}
    11ae:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    11b0:	f00d ff86 	bl	f0c0 <usb_serial_available>
	//DESCRIPTION: Sets the desired pitch and roll angles based on user input over USB
	if (Serial.available()) {
    11b4:	bb50      	cbnz	r0, 120c <setDesStateSerial(int)+0x64>
		}
	}
	
	float desiredAngle = 0;

	if (useSineWave) {
    11b6:	4b24      	ldr	r3, [pc, #144]	; (1248 <setDesStateSerial(int)+0xa0>)
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	b3ab      	cbz	r3, 1228 <setDesStateSerial(int)+0x80>
		sineFrequency = static_cast<float>(serialInputValue);
    11bc:	4b23      	ldr	r3, [pc, #140]	; (124c <setDesStateSerial(int)+0xa4>)
    11be:	ed93 7a00 	vldr	s14, [r3]
    11c2:	4b23      	ldr	r3, [pc, #140]	; (1250 <setDesStateSerial(int)+0xa8>)
    11c4:	ed83 7a00 	vstr	s14, [r3]
		desiredAngle = 10*sin(2*PI*sineFrequency*sineTime);    // Set the output to be a sin wave between -5 and 5 degrees
    11c8:	4d22      	ldr	r5, [pc, #136]	; (1254 <setDesStateSerial(int)+0xac>)
    11ca:	ed95 8a00 	vldr	s16, [r5]
    11ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    11d2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 1240 <setDesStateSerial(int)+0x98>
    11d6:	ee27 7b06 	vmul.f64	d7, d7, d6
    11da:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
    11de:	ee27 0b00 	vmul.f64	d0, d7, d0
    11e2:	f00e fd2d 	bl	fc40 <sin>
    11e6:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
    11ea:	ee20 0b07 	vmul.f64	d0, d0, d7
    11ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		sineTime = sineTime + 1/2000.0f;
    11f2:	eddf 7a19 	vldr	s15, [pc, #100]	; 1258 <setDesStateSerial(int)+0xb0>
    11f6:	ee78 7a27 	vadd.f32	s15, s16, s15
    11fa:	edc5 7a00 	vstr	s15, [r5]
	}
	else {
		desiredAngle = static_cast<float>(serialInputValue);
	}

	switch (controlledAxis) {
    11fe:	2c01      	cmp	r4, #1
    1200:	d016      	beq.n	1230 <setDesStateSerial(int)+0x88>
    1202:	2c02      	cmp	r4, #2
    1204:	d018      	beq.n	1238 <setDesStateSerial(int)+0x90>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
    1206:	ecbd 8b02 	vpop	{d8}
    120a:	bd38      	pop	{r3, r4, r5, pc}
		serialInputValue = Serial.parseFloat();
    120c:	4813      	ldr	r0, [pc, #76]	; (125c <setDesStateSerial(int)+0xb4>)
    120e:	f00b fe55 	bl	cebc <Stream::parseFloat()>
    1212:	4b0e      	ldr	r3, [pc, #56]	; (124c <setDesStateSerial(int)+0xa4>)
    1214:	ed83 0a00 	vstr	s0, [r3]
		while (Serial.available() !=0) {
    1218:	e001      	b.n	121e <setDesStateSerial(int)+0x76>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
    121a:	f00d ff8f 	bl	f13c <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    121e:	f00d ff4f 	bl	f0c0 <usb_serial_available>
    1222:	2800      	cmp	r0, #0
    1224:	d1f9      	bne.n	121a <setDesStateSerial(int)+0x72>
    1226:	e7c6      	b.n	11b6 <setDesStateSerial(int)+0xe>
		desiredAngle = static_cast<float>(serialInputValue);
    1228:	4b08      	ldr	r3, [pc, #32]	; (124c <setDesStateSerial(int)+0xa4>)
    122a:	ed93 0a00 	vldr	s0, [r3]
    122e:	e7e6      	b.n	11fe <setDesStateSerial(int)+0x56>
			roll_des = desiredAngle;
    1230:	4b0b      	ldr	r3, [pc, #44]	; (1260 <setDesStateSerial(int)+0xb8>)
    1232:	ed83 0a00 	vstr	s0, [r3]
			break;
    1236:	e7e6      	b.n	1206 <setDesStateSerial(int)+0x5e>
			pitch_des = desiredAngle;
    1238:	4b0a      	ldr	r3, [pc, #40]	; (1264 <setDesStateSerial(int)+0xbc>)
    123a:	ed83 0a00 	vstr	s0, [r3]
}
    123e:	e7e2      	b.n	1206 <setDesStateSerial(int)+0x5e>
    1240:	54442d18 	.word	0x54442d18
    1244:	401921fb 	.word	0x401921fb
    1248:	20003d46 	.word	0x20003d46
    124c:	200057c8 	.word	0x200057c8
    1250:	200057ec 	.word	0x200057ec
    1254:	200057f0 	.word	0x200057f0
    1258:	3a03126f 	.word	0x3a03126f
    125c:	20003634 	.word	0x20003634
    1260:	200055e8 	.word	0x200055e8
    1264:	200055bc 	.word	0x200055bc

00001268 <performSineSweep(int)>:

void performSineSweep(int controlledAxis) {
    1268:	b510      	push	{r4, lr}
    126a:	ed2d 8b06 	vpush	{d8-d10}
    126e:	4604      	mov	r4, r0
	//DESCRIPTION: Performs a sine sweep from minFreq (Hz) to maxFreq (Hz) over sweepTime (seconds)
	float desiredAngle = 0;
  float amp = 10; 		// Sine wave amplitude in degrees
	desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
    1270:	4b2d      	ldr	r3, [pc, #180]	; (1328 <performSineSweep(int)+0xc0>)
    1272:	edd3 aa00 	vldr	s21, [r3]
    1276:	4b2d      	ldr	r3, [pc, #180]	; (132c <performSineSweep(int)+0xc4>)
    1278:	edd3 8a00 	vldr	s17, [r3]
    127c:	4b2c      	ldr	r3, [pc, #176]	; (1330 <performSineSweep(int)+0xc8>)
    127e:	ed93 aa00 	vldr	s20, [r3]
    1282:	4b2c      	ldr	r3, [pc, #176]	; (1334 <performSineSweep(int)+0xcc>)
    1284:	ed93 8a00 	vldr	s16, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    1288:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
    128c:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
    1290:	eeb0 0b49 	vmov.f64	d0, d9
    1294:	f00e f9dc 	bl	f650 <pow>
	if (sineTime > sweepTime) {
    1298:	eeb4 aac8 	vcmpe.f32	s20, s16
    129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12a0:	d42f      	bmi.n	1302 <performSineSweep(int)+0x9a>
    12a2:	eeb0 5b40 	vmov.f64	d5, d0
    12a6:	eeb7 7aca 	vcvt.f64.f32	d7, s20
	desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
    12aa:	ee3a 6ae8 	vsub.f32	s12, s21, s17
    12ae:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    12b2:	ed9f 4b19 	vldr	d4, [pc, #100]	; 1318 <performSineSweep(int)+0xb0>
    12b6:	ee26 6b04 	vmul.f64	d6, d6, d4
    12ba:	ee27 7b07 	vmul.f64	d7, d7, d7
    12be:	ee86 4b07 	vdiv.f64	d4, d6, d7
    12c2:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
    12c6:	ed9f 6b16 	vldr	d6, [pc, #88]	; 1320 <performSineSweep(int)+0xb8>
    12ca:	ee27 7b06 	vmul.f64	d7, d7, d6
    12ce:	ee27 0b09 	vmul.f64	d0, d7, d9
    12d2:	ee04 0b05 	vmla.f64	d0, d4, d5
    12d6:	f00e fcb3 	bl	fc40 <sin>
    12da:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
    12de:	ee20 0b07 	vmul.f64	d0, d0, d7
    12e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		desiredAngle = 0;
	}
	sineTime = sineTime + 1/2000.0f;
    12e6:	eddf 7a14 	vldr	s15, [pc, #80]	; 1338 <performSineSweep(int)+0xd0>
    12ea:	ee38 8a27 	vadd.f32	s16, s16, s15
    12ee:	4b11      	ldr	r3, [pc, #68]	; (1334 <performSineSweep(int)+0xcc>)
    12f0:	ed83 8a00 	vstr	s16, [r3]

	switch (controlledAxis) {
    12f4:	2c01      	cmp	r4, #1
    12f6:	d007      	beq.n	1308 <performSineSweep(int)+0xa0>
    12f8:	2c02      	cmp	r4, #2
    12fa:	d009      	beq.n	1310 <performSineSweep(int)+0xa8>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
    12fc:	ecbd 8b06 	vpop	{d8-d10}
    1300:	bd10      	pop	{r4, pc}
		desiredAngle = 0;
    1302:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 133c <performSineSweep(int)+0xd4>
    1306:	e7ee      	b.n	12e6 <performSineSweep(int)+0x7e>
			roll_des = desiredAngle;
    1308:	4b0d      	ldr	r3, [pc, #52]	; (1340 <performSineSweep(int)+0xd8>)
    130a:	ed83 0a00 	vstr	s0, [r3]
			break;
    130e:	e7f5      	b.n	12fc <performSineSweep(int)+0x94>
			pitch_des = desiredAngle;
    1310:	4b0c      	ldr	r3, [pc, #48]	; (1344 <performSineSweep(int)+0xdc>)
    1312:	ed83 0a00 	vstr	s0, [r3]
}
    1316:	e7f1      	b.n	12fc <performSineSweep(int)+0x94>
    1318:	54442d18 	.word	0x54442d18
    131c:	400921fb 	.word	0x400921fb
    1320:	54442d18 	.word	0x54442d18
    1324:	401921fb 	.word	0x401921fb
    1328:	20003cd0 	.word	0x20003cd0
    132c:	20003d1c 	.word	0x20003d1c
    1330:	20003d28 	.word	0x20003d28
    1334:	200057f0 	.word	0x200057f0
    1338:	3a03126f 	.word	0x3a03126f
    133c:	00000000 	.word	0x00000000
    1340:	200055e8 	.word	0x200055e8
    1344:	200055bc 	.word	0x200055bc

00001348 <rollStep()>:

void rollStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
    1348:	4b0a      	ldr	r3, [pc, #40]	; (1374 <rollStep()+0x2c>)
    134a:	681b      	ldr	r3, [r3, #0]
    134c:	f240 42e1 	movw	r2, #1249	; 0x4e1
    1350:	4293      	cmp	r3, r2
    1352:	dd0c      	ble.n	136e <rollStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
    1354:	f240 62d6 	movw	r2, #1750	; 0x6d6
    1358:	4293      	cmp	r3, r2
    135a:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
    135e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1378 <rollStep()+0x30>
    1362:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	roll_des = desiredAngle;
    1366:	4b05      	ldr	r3, [pc, #20]	; (137c <rollStep()+0x34>)
    1368:	edc3 7a00 	vstr	s15, [r3]
}
    136c:	4770      	bx	lr
		desiredAngle = 15.0f;
    136e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    1372:	e7f8      	b.n	1366 <rollStep()+0x1e>
    1374:	200054dc 	.word	0x200054dc
    1378:	00000000 	.word	0x00000000
    137c:	200055e8 	.word	0x200055e8

00001380 <pitchStep()>:
void pitchStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
    1380:	4b0a      	ldr	r3, [pc, #40]	; (13ac <pitchStep()+0x2c>)
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	f240 42e1 	movw	r2, #1249	; 0x4e1
    1388:	4293      	cmp	r3, r2
    138a:	dd0c      	ble.n	13a6 <pitchStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
    138c:	f240 62d6 	movw	r2, #1750	; 0x6d6
    1390:	4293      	cmp	r3, r2
    1392:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
    1396:	ed9f 7a06 	vldr	s14, [pc, #24]	; 13b0 <pitchStep()+0x30>
    139a:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	pitch_des = desiredAngle;
    139e:	4b05      	ldr	r3, [pc, #20]	; (13b4 <pitchStep()+0x34>)
    13a0:	edc3 7a00 	vstr	s15, [r3]
}
    13a4:	4770      	bx	lr
		desiredAngle = 15.0f;
    13a6:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    13aa:	e7f8      	b.n	139e <pitchStep()+0x1e>
    13ac:	200054dc 	.word	0x200054dc
    13b0:	00000000 	.word	0x00000000
    13b4:	200055bc 	.word	0x200055bc

000013b8 <getDesState()>:
   * RC pwm commands and scaling them to be within our limits defined in setup. thro_des stays within 0 to 1 range.
   * roll_des and pitch_des are scaled to be within max roll/pitch amount in either degrees (angle mode) or degrees/sec
   * (rate mode). yaw_des is scaled to be within max yaw in degrees/sec. Also creates roll_passthru, pitch_passthru, and
   * yaw_passthru variables, to be used in commanding motors/servos with direct unstabilized commands in controlMixer().
   */
  thro_des = (channel_1_pwm - 1000.0)/1000.0; //Between 0 and 1
    13b8:	4baf      	ldr	r3, [pc, #700]	; (1678 <getDesState()+0x2c0>)
    13ba:	ed93 7a00 	vldr	s14, [r3]
    13be:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    13c2:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 1658 <getDesState()+0x2a0>
    13c6:	ee37 7b45 	vsub.f64	d7, d7, d5
    13ca:	ee87 6b05 	vdiv.f64	d6, d7, d5
    13ce:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  roll_des = (channel_2_pwm - 1500.0)/500.0; //Between -1 and 1
    13d2:	4baa      	ldr	r3, [pc, #680]	; (167c <getDesState()+0x2c4>)
    13d4:	ed93 5a00 	vldr	s10, [r3]
    13d8:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    13dc:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 1660 <getDesState()+0x2a8>
    13e0:	ee35 5b43 	vsub.f64	d5, d5, d3
    13e4:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 1668 <getDesState()+0x2b0>
    13e8:	ee85 7b04 	vdiv.f64	d7, d5, d4
    13ec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pitch_des = (channel_3_pwm - 1500.0)/500.0; //Between -1 and 1
    13f0:	4ba3      	ldr	r3, [pc, #652]	; (1680 <getDesState()+0x2c8>)
    13f2:	ed93 5a00 	vldr	s10, [r3]
    13f6:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    13fa:	ee35 5b43 	vsub.f64	d5, d5, d3
    13fe:	ee85 1b04 	vdiv.f64	d1, d5, d4
    1402:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
  yaw_des = (channel_4_pwm - 1500.0)/500.0; //Between -1 and 1
    1406:	4b9f      	ldr	r3, [pc, #636]	; (1684 <getDesState()+0x2cc>)
    1408:	ed93 5a00 	vldr	s10, [r3]
    140c:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    1410:	ee35 5b43 	vsub.f64	d5, d5, d3
    1414:	ee85 2b04 	vdiv.f64	d2, d5, d4
    1418:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  roll_passthru = roll_des/2.0; //Between -0.5 and 0.5
    141c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
    1420:	ee27 5a03 	vmul.f32	s10, s14, s6
  pitch_passthru = pitch_des/2.0; //Between -0.5 and 0.5
    1424:	ee61 1a03 	vmul.f32	s3, s2, s6
  yaw_passthru = yaw_des/2.0; //Between -0.5 and 0.5
    1428:	ee22 3a03 	vmul.f32	s6, s4, s6

  //Constrain within normalized bounds
  thro_des = constrain(thro_des, 0.0, 1.0); //Between 0 and 1
    142c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
    1430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1434:	d40c      	bmi.n	1450 <getDesState()+0x98>
    1436:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    143a:	eeb4 6ae7 	vcmpe.f32	s12, s15
    143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1442:	dd02      	ble.n	144a <getDesState()+0x92>
    1444:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1448:	e004      	b.n	1454 <getDesState()+0x9c>
    144a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    144e:	e001      	b.n	1454 <getDesState()+0x9c>
    1450:	ed9f 6b87 	vldr	d6, [pc, #540]	; 1670 <getDesState()+0x2b8>
    1454:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    1458:	4b8b      	ldr	r3, [pc, #556]	; (1688 <getDesState()+0x2d0>)
    145a:	ed83 6a00 	vstr	s12, [r3]
  roll_des = constrain(roll_des, -1.0, 1.0)*maxRoll; //Between -maxRoll and +maxRoll
    145e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1462:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    146a:	d40c      	bmi.n	1486 <getDesState()+0xce>
    146c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1470:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1478:	dd02      	ble.n	1480 <getDesState()+0xc8>
    147a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    147e:	e004      	b.n	148a <getDesState()+0xd2>
    1480:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1484:	e001      	b.n	148a <getDesState()+0xd2>
    1486:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    148a:	4b80      	ldr	r3, [pc, #512]	; (168c <getDesState()+0x2d4>)
    148c:	ed93 4a00 	vldr	s8, [r3]
    1490:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1494:	ee24 4b07 	vmul.f64	d4, d4, d7
    1498:	eef7 3bc4 	vcvt.f32.f64	s7, d4
    149c:	4b7c      	ldr	r3, [pc, #496]	; (1690 <getDesState()+0x2d8>)
    149e:	edc3 3a00 	vstr	s7, [r3]
  pitch_des = constrain(pitch_des, -1.0, 1.0)*maxPitch; //Between -maxPitch and +maxPitch
    14a2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    14a6:	eeb4 1ae7 	vcmpe.f32	s2, s15
    14aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14ae:	d40c      	bmi.n	14ca <getDesState()+0x112>
    14b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    14b4:	eeb4 1ae7 	vcmpe.f32	s2, s15
    14b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14bc:	dd02      	ble.n	14c4 <getDesState()+0x10c>
    14be:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    14c2:	e004      	b.n	14ce <getDesState()+0x116>
    14c4:	eeb7 7ac1 	vcvt.f64.f32	d7, s2
    14c8:	e001      	b.n	14ce <getDesState()+0x116>
    14ca:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    14ce:	4b71      	ldr	r3, [pc, #452]	; (1694 <getDesState()+0x2dc>)
    14d0:	ed93 4a00 	vldr	s8, [r3]
    14d4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    14d8:	ee24 4b07 	vmul.f64	d4, d4, d7
    14dc:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    14e0:	4b6d      	ldr	r3, [pc, #436]	; (1698 <getDesState()+0x2e0>)
    14e2:	ed83 4a00 	vstr	s8, [r3]
  yaw_des = constrain(yaw_des, -1.0, 1.0)*maxYaw; //Between -maxYaw and +maxYaw
    14e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    14ea:	eeb4 2ae7 	vcmpe.f32	s4, s15
    14ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14f2:	d40c      	bmi.n	150e <getDesState()+0x156>
    14f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    14f8:	eeb4 2ae7 	vcmpe.f32	s4, s15
    14fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1500:	dd02      	ble.n	1508 <getDesState()+0x150>
    1502:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    1506:	e004      	b.n	1512 <getDesState()+0x15a>
    1508:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    150c:	e001      	b.n	1512 <getDesState()+0x15a>
    150e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    1512:	4b62      	ldr	r3, [pc, #392]	; (169c <getDesState()+0x2e4>)
    1514:	ed93 7a00 	vldr	s14, [r3]
    1518:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    151c:	ee27 7b02 	vmul.f64	d7, d7, d2
    1520:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1524:	4b5e      	ldr	r3, [pc, #376]	; (16a0 <getDesState()+0x2e8>)
    1526:	ed83 7a00 	vstr	s14, [r3]
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    152a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    152e:	eeb4 5ae7 	vcmpe.f32	s10, s15
    1532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1536:	d409      	bmi.n	154c <getDesState()+0x194>
    1538:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    153c:	eeb4 5ae7 	vcmpe.f32	s10, s15
    1540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1544:	dc1a      	bgt.n	157c <getDesState()+0x1c4>
    1546:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    154a:	e001      	b.n	1550 <getDesState()+0x198>
    154c:	eebe 5b00 	vmov.f64	d5, #224	; 0xbf000000 -0.5
    1550:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    1554:	4b53      	ldr	r3, [pc, #332]	; (16a4 <getDesState()+0x2ec>)
    1556:	ed83 5a00 	vstr	s10, [r3]
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    155a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    155e:	eef4 1ae7 	vcmpe.f32	s3, s15
    1562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1566:	d40c      	bmi.n	1582 <getDesState()+0x1ca>
    1568:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    156c:	eef4 1ae7 	vcmpe.f32	s3, s15
    1570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1574:	dc1d      	bgt.n	15b2 <getDesState()+0x1fa>
    1576:	eeb7 6ae1 	vcvt.f64.f32	d6, s3
    157a:	e004      	b.n	1586 <getDesState()+0x1ce>
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    157c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    1580:	e7e6      	b.n	1550 <getDesState()+0x198>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    1582:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    1586:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    158a:	4b47      	ldr	r3, [pc, #284]	; (16a8 <getDesState()+0x2f0>)
    158c:	ed83 6a00 	vstr	s12, [r3]
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1590:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    1594:	eeb4 3ae7 	vcmpe.f32	s6, s15
    1598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    159c:	d40c      	bmi.n	15b8 <getDesState()+0x200>
    159e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    15a2:	eeb4 3ae7 	vcmpe.f32	s6, s15
    15a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15aa:	dc1d      	bgt.n	15e8 <getDesState()+0x230>
    15ac:	eeb7 7ac3 	vcvt.f64.f32	d7, s6
    15b0:	e004      	b.n	15bc <getDesState()+0x204>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    15b2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    15b6:	e7e6      	b.n	1586 <getDesState()+0x1ce>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    15b8:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    15bc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    15c0:	4b3a      	ldr	r3, [pc, #232]	; (16ac <getDesState()+0x2f4>)
    15c2:	ed83 7a00 	vstr	s14, [r3]

	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    15c6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    15ca:	eef4 3ae7 	vcmpe.f32	s7, s15
    15ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15d2:	d40f      	bmi.n	15f4 <getDesState()+0x23c>
    15d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    15d8:	eef4 3ae7 	vcmpe.f32	s7, s15
    15dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    15e0:	dd05      	ble.n	15ee <getDesState()+0x236>
    15e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    15e6:	e007      	b.n	15f8 <getDesState()+0x240>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    15e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    15ec:	e7e6      	b.n	15bc <getDesState()+0x204>
	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    15ee:	eeb7 6ae3 	vcvt.f64.f32	d6, s7
    15f2:	e001      	b.n	15f8 <getDesState()+0x240>
    15f4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
    15f8:	4b2d      	ldr	r3, [pc, #180]	; (16b0 <getDesState()+0x2f8>)
    15fa:	ed93 7a00 	vldr	s14, [r3]
    15fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1602:	ee27 7b06 	vmul.f64	d7, d7, d6
    1606:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    160a:	4b2a      	ldr	r3, [pc, #168]	; (16b4 <getDesState()+0x2fc>)
    160c:	ed83 7a00 	vstr	s14, [r3]
	betaPitch_des = constrain(pitch_des, -1.0, 1.0)*maxBetaPitch;
    1610:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1614:	eeb4 4ae7 	vcmpe.f32	s8, s15
    1618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    161c:	d40c      	bmi.n	1638 <getDesState()+0x280>
    161e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1622:	eeb4 4ae7 	vcmpe.f32	s8, s15
    1626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    162a:	dd02      	ble.n	1632 <getDesState()+0x27a>
    162c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    1630:	e004      	b.n	163c <getDesState()+0x284>
    1632:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1636:	e001      	b.n	163c <getDesState()+0x284>
    1638:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    163c:	4b1e      	ldr	r3, [pc, #120]	; (16b8 <getDesState()+0x300>)
    163e:	ed93 7a00 	vldr	s14, [r3]
    1642:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1646:	ee27 7b04 	vmul.f64	d7, d7, d4
    164a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    164e:	4b1b      	ldr	r3, [pc, #108]	; (16bc <getDesState()+0x304>)
    1650:	ed83 7a00 	vstr	s14, [r3]
}
    1654:	4770      	bx	lr
    1656:	bf00      	nop
    1658:	00000000 	.word	0x00000000
    165c:	408f4000 	.word	0x408f4000
    1660:	00000000 	.word	0x00000000
    1664:	40977000 	.word	0x40977000
    1668:	00000000 	.word	0x00000000
    166c:	407f4000 	.word	0x407f4000
	...
    1678:	2000549c 	.word	0x2000549c
    167c:	200054a8 	.word	0x200054a8
    1680:	200054b4 	.word	0x200054b4
    1684:	200054c0 	.word	0x200054c0
    1688:	20005800 	.word	0x20005800
    168c:	20003cd8 	.word	0x20003cd8
    1690:	200055e8 	.word	0x200055e8
    1694:	20003cd4 	.word	0x20003cd4
    1698:	200055bc 	.word	0x200055bc
    169c:	20003cdc 	.word	0x20003cdc
    16a0:	20005820 	.word	0x20005820
    16a4:	200055ec 	.word	0x200055ec
    16a8:	200055c0 	.word	0x200055c0
    16ac:	20005824 	.word	0x20005824
    16b0:	20003cc4 	.word	0x20003cc4
    16b4:	2000545c 	.word	0x2000545c
    16b8:	20003cc8 	.word	0x20003cc8
    16bc:	20005470 	.word	0x20005470

000016c0 <scaleCommands()>:

void scaleCommands() {
    16c0:	b4f0      	push	{r4, r5, r6, r7}
  //m5_command_PWM = constrain(m5_command_PWM, 125, 250);
  //m6_command_PWM = constrain(m6_command_PWM, 125, 250);

  //Scaled to 0-180 for servo library
  s1_command_PWM = s1_command_scaled*180;
  s2_command_PWM = s2_command_scaled*180;
    16c2:	4b3a      	ldr	r3, [pc, #232]	; (17ac <scaleCommands()+0xec>)
    16c4:	edd3 7a00 	vldr	s15, [r3]
    16c8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 17b0 <scaleCommands()+0xf0>
    16cc:	ee67 7a87 	vmul.f32	s15, s15, s14
    16d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    16d4:	ee17 5a90 	vmov	r5, s15
  s3_command_PWM = s3_command_scaled*180;
    16d8:	4b36      	ldr	r3, [pc, #216]	; (17b4 <scaleCommands()+0xf4>)
    16da:	edd3 7a00 	vldr	s15, [r3]
    16de:	ee67 7a87 	vmul.f32	s15, s15, s14
    16e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    16e6:	ee17 4a90 	vmov	r4, s15
  s4_command_PWM = s4_command_scaled*180;
    16ea:	4b33      	ldr	r3, [pc, #204]	; (17b8 <scaleCommands()+0xf8>)
    16ec:	edd3 7a00 	vldr	s15, [r3]
    16f0:	ee67 7a87 	vmul.f32	s15, s15, s14
    16f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    16f8:	ee17 0a90 	vmov	r0, s15
  s5_command_PWM = s5_command_scaled*180;
    16fc:	4b2f      	ldr	r3, [pc, #188]	; (17bc <scaleCommands()+0xfc>)
    16fe:	edd3 7a00 	vldr	s15, [r3]
    1702:	ee67 7a87 	vmul.f32	s15, s15, s14
    1706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    170a:	ee17 1a90 	vmov	r1, s15
  s6_command_PWM = s6_command_scaled*180;
    170e:	4b2c      	ldr	r3, [pc, #176]	; (17c0 <scaleCommands()+0x100>)
    1710:	edd3 7a00 	vldr	s15, [r3]
    1714:	ee67 7a87 	vmul.f32	s15, s15, s14
    1718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    171c:	ee17 2a90 	vmov	r2, s15
  s7_command_PWM = s7_command_scaled*180;
    1720:	4b28      	ldr	r3, [pc, #160]	; (17c4 <scaleCommands()+0x104>)
    1722:	edd3 7a00 	vldr	s15, [r3]
    1726:	ee67 7a87 	vmul.f32	s15, s15, s14
    172a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    172e:	ee17 3a90 	vmov	r3, s15
  s1_command_PWM = s1_command_scaled*180;
    1732:	4e25      	ldr	r6, [pc, #148]	; (17c8 <scaleCommands()+0x108>)
    1734:	edd6 7a00 	vldr	s15, [r6]
    1738:	ee67 7a87 	vmul.f32	s15, s15, s14
    173c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1740:	ee17 6a90 	vmov	r6, s15
  //Constrain commands to servos within servo library bounds
  s1_command_PWM = constrain(s1_command_PWM, 0, 180);
    1744:	2eb4      	cmp	r6, #180	; 0xb4
    1746:	bfa8      	it	ge
    1748:	26b4      	movge	r6, #180	; 0xb4
    174a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    174e:	4f1f      	ldr	r7, [pc, #124]	; (17cc <scaleCommands()+0x10c>)
    1750:	603e      	str	r6, [r7, #0]
  s2_command_PWM = constrain(s2_command_PWM, 0, 180);
    1752:	2db4      	cmp	r5, #180	; 0xb4
    1754:	bfa8      	it	ge
    1756:	25b4      	movge	r5, #180	; 0xb4
    1758:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    175c:	4e1c      	ldr	r6, [pc, #112]	; (17d0 <scaleCommands()+0x110>)
    175e:	6035      	str	r5, [r6, #0]
  s3_command_PWM = constrain(s3_command_PWM, 0, 180);
    1760:	2cb4      	cmp	r4, #180	; 0xb4
    1762:	bfa8      	it	ge
    1764:	24b4      	movge	r4, #180	; 0xb4
    1766:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    176a:	4d1a      	ldr	r5, [pc, #104]	; (17d4 <scaleCommands()+0x114>)
    176c:	602c      	str	r4, [r5, #0]
  s4_command_PWM = constrain(s4_command_PWM, 0, 180);
    176e:	28b4      	cmp	r0, #180	; 0xb4
    1770:	bfa8      	it	ge
    1772:	20b4      	movge	r0, #180	; 0xb4
    1774:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1778:	4c17      	ldr	r4, [pc, #92]	; (17d8 <scaleCommands()+0x118>)
    177a:	6020      	str	r0, [r4, #0]
  s5_command_PWM = constrain(s5_command_PWM, 0, 180);
    177c:	29b4      	cmp	r1, #180	; 0xb4
    177e:	bfa8      	it	ge
    1780:	21b4      	movge	r1, #180	; 0xb4
    1782:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    1786:	4815      	ldr	r0, [pc, #84]	; (17dc <scaleCommands()+0x11c>)
    1788:	6001      	str	r1, [r0, #0]
  s6_command_PWM = constrain(s6_command_PWM, 0, 180);
    178a:	2ab4      	cmp	r2, #180	; 0xb4
    178c:	bfa8      	it	ge
    178e:	22b4      	movge	r2, #180	; 0xb4
    1790:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1794:	4912      	ldr	r1, [pc, #72]	; (17e0 <scaleCommands()+0x120>)
    1796:	600a      	str	r2, [r1, #0]
  s7_command_PWM = constrain(s7_command_PWM, 0, 180);
    1798:	2bb4      	cmp	r3, #180	; 0xb4
    179a:	bfa8      	it	ge
    179c:	23b4      	movge	r3, #180	; 0xb4
    179e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    17a2:	4a10      	ldr	r2, [pc, #64]	; (17e4 <scaleCommands()+0x124>)
    17a4:	6013      	str	r3, [r2, #0]
}
    17a6:	bcf0      	pop	{r4, r5, r6, r7}
    17a8:	4770      	bx	lr
    17aa:	bf00      	nop
    17ac:	2000562c 	.word	0x2000562c
    17b0:	43340000 	.word	0x43340000
    17b4:	20005634 	.word	0x20005634
    17b8:	2000563c 	.word	0x2000563c
    17bc:	20005644 	.word	0x20005644
    17c0:	2000564c 	.word	0x2000564c
    17c4:	20005654 	.word	0x20005654
    17c8:	20005624 	.word	0x20005624
    17cc:	20005620 	.word	0x20005620
    17d0:	20005628 	.word	0x20005628
    17d4:	20005630 	.word	0x20005630
    17d8:	20005638 	.word	0x20005638
    17dc:	20005640 	.word	0x20005640
    17e0:	20005648 	.word	0x20005648
    17e4:	20005650 	.word	0x20005650

000017e8 <getCommands()>:

void getCommands() {
    17e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    channel_4_pwm = getRadioPWM(4);
    channel_5_pwm = getRadioPWM(5);
    channel_6_pwm = getRadioPWM(6);
    
  #elif defined USE_SBUS_RX
    if (sbus.read(&sbusChannels[0], &sbusFailSafe, &sbusLostFrame))
    17ea:	4bc5      	ldr	r3, [pc, #788]	; (1b00 <getCommands()+0x318>)
    17ec:	4ac5      	ldr	r2, [pc, #788]	; (1b04 <getCommands()+0x31c>)
    17ee:	49c6      	ldr	r1, [pc, #792]	; (1b08 <getCommands()+0x320>)
    17f0:	48c6      	ldr	r0, [pc, #792]	; (1b0c <getCommands()+0x324>)
    17f2:	f002 fe63 	bl	44bc <SBUS::read(unsigned short*, bool*, bool*)>
    17f6:	2800      	cmp	r0, #0
    17f8:	f000 80bb 	beq.w	1972 <getCommands()+0x18a>
    {
      //sBus scaling below is for Taranis-Plus and X4R-SB
      float scale = 0.615;  
      float bias  = 895.0; 
      channel_1_pwm_pre = sbusChannels[0] * scale + bias;
    17fc:	4bc2      	ldr	r3, [pc, #776]	; (1b08 <getCommands()+0x320>)
    17fe:	881a      	ldrh	r2, [r3, #0]
    1800:	ee06 2a90 	vmov	s13, r2
    1804:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1808:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 1b10 <getCommands()+0x328>
    180c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1810:	eddf 7ac0 	vldr	s15, [pc, #768]	; 1b14 <getCommands()+0x32c>
    1814:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1818:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    181c:	4abe      	ldr	r2, [pc, #760]	; (1b18 <getCommands()+0x330>)
    181e:	edc2 6a00 	vstr	s13, [r2]
      channel_2_pwm_pre = sbusChannels[1] * scale + bias;
    1822:	885a      	ldrh	r2, [r3, #2]
    1824:	ee06 2a90 	vmov	s13, r2
    1828:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    182c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1830:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1834:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1838:	4ab8      	ldr	r2, [pc, #736]	; (1b1c <getCommands()+0x334>)
    183a:	edc2 6a00 	vstr	s13, [r2]
      channel_3_pwm_pre = sbusChannels[2] * scale + bias;
    183e:	889a      	ldrh	r2, [r3, #4]
    1840:	ee06 2a90 	vmov	s13, r2
    1844:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1848:	ee66 6a87 	vmul.f32	s13, s13, s14
    184c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1850:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1854:	4ab2      	ldr	r2, [pc, #712]	; (1b20 <getCommands()+0x338>)
    1856:	edc2 6a00 	vstr	s13, [r2]
      channel_4_pwm_pre = sbusChannels[3] * scale + bias;
    185a:	88da      	ldrh	r2, [r3, #6]
    185c:	ee06 2a90 	vmov	s13, r2
    1860:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1864:	ee66 6a87 	vmul.f32	s13, s13, s14
    1868:	ee76 6aa7 	vadd.f32	s13, s13, s15
    186c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1870:	4aac      	ldr	r2, [pc, #688]	; (1b24 <getCommands()+0x33c>)
    1872:	edc2 6a00 	vstr	s13, [r2]
      channel_5_pwm = sbusChannels[4] * scale + bias;
    1876:	891a      	ldrh	r2, [r3, #8]
    1878:	ee06 2a90 	vmov	s13, r2
    187c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1880:	ee66 6a87 	vmul.f32	s13, s13, s14
    1884:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1888:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    188c:	4aa6      	ldr	r2, [pc, #664]	; (1b28 <getCommands()+0x340>)
    188e:	edc2 6a00 	vstr	s13, [r2]
      channel_6_pwm = sbusChannels[5] * scale + bias; 
    1892:	895a      	ldrh	r2, [r3, #10]
    1894:	ee06 2a90 	vmov	s13, r2
    1898:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    189c:	ee66 6a87 	vmul.f32	s13, s13, s14
    18a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
    18a4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    18a8:	4aa0      	ldr	r2, [pc, #640]	; (1b2c <getCommands()+0x344>)
    18aa:	edc2 6a00 	vstr	s13, [r2]
			channel_7_pwm = sbusChannels[6] * scale + bias;
    18ae:	899a      	ldrh	r2, [r3, #12]
    18b0:	ee06 2a90 	vmov	s13, r2
    18b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    18b8:	ee66 6a87 	vmul.f32	s13, s13, s14
    18bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    18c0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    18c4:	4a9a      	ldr	r2, [pc, #616]	; (1b30 <getCommands()+0x348>)
    18c6:	edc2 6a00 	vstr	s13, [r2]
			channel_8_pwm = sbusChannels[7] * scale + bias;
    18ca:	89da      	ldrh	r2, [r3, #14]
    18cc:	ee06 2a90 	vmov	s13, r2
    18d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    18d4:	ee66 6a87 	vmul.f32	s13, s13, s14
    18d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    18dc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    18e0:	4a94      	ldr	r2, [pc, #592]	; (1b34 <getCommands()+0x34c>)
    18e2:	edc2 6a00 	vstr	s13, [r2]
			channel_9_pwm = sbusChannels[8] * scale + bias;
    18e6:	8a1a      	ldrh	r2, [r3, #16]
    18e8:	ee06 2a90 	vmov	s13, r2
    18ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    18f0:	ee66 6a87 	vmul.f32	s13, s13, s14
    18f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    18f8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    18fc:	4a8e      	ldr	r2, [pc, #568]	; (1b38 <getCommands()+0x350>)
    18fe:	edc2 6a00 	vstr	s13, [r2]
			channel_10_pwm = sbusChannels[9] * scale + bias;
    1902:	8a5a      	ldrh	r2, [r3, #18]
    1904:	ee06 2a90 	vmov	s13, r2
    1908:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    190c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1910:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1914:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1918:	4a88      	ldr	r2, [pc, #544]	; (1b3c <getCommands()+0x354>)
    191a:	edc2 6a00 	vstr	s13, [r2]
			channel_11_pwm = sbusChannels[10] * scale + bias;
    191e:	8a9a      	ldrh	r2, [r3, #20]
    1920:	ee06 2a90 	vmov	s13, r2
    1924:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1928:	ee66 6a87 	vmul.f32	s13, s13, s14
    192c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1930:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1934:	4a82      	ldr	r2, [pc, #520]	; (1b40 <getCommands()+0x358>)
    1936:	edc2 6a00 	vstr	s13, [r2]
			channel_12_pwm = sbusChannels[11] * scale + bias;
    193a:	8ada      	ldrh	r2, [r3, #22]
    193c:	ee06 2a90 	vmov	s13, r2
    1940:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1944:	ee66 6a87 	vmul.f32	s13, s13, s14
    1948:	ee76 6aa7 	vadd.f32	s13, s13, s15
    194c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1950:	4a7c      	ldr	r2, [pc, #496]	; (1b44 <getCommands()+0x35c>)
    1952:	edc2 6a00 	vstr	s13, [r2]
			channel_13_pwm = sbusChannels[12] * scale + bias;
    1956:	8b1b      	ldrh	r3, [r3, #24]
    1958:	ee06 3a90 	vmov	s13, r3
    195c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1960:	ee26 7a87 	vmul.f32	s14, s13, s14
    1964:	ee77 7a27 	vadd.f32	s15, s14, s15
    1968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    196c:	4b76      	ldr	r3, [pc, #472]	; (1b48 <getCommands()+0x360>)
    196e:	edc3 7a00 	vstr	s15, [r3]
    }
  #endif
  
  //Low-pass the critical commands and update previous values
  float b = 0.7; //Lower=slower, higher=noiser
  channel_1_pwm_pre = (1.0 - b)*channel_1_pwm_prev + b*channel_1_pwm_pre;
    1972:	4b76      	ldr	r3, [pc, #472]	; (1b4c <getCommands()+0x364>)
    1974:	681d      	ldr	r5, [r3, #0]
    1976:	4b68      	ldr	r3, [pc, #416]	; (1b18 <getCommands()+0x330>)
    1978:	edd3 7a00 	vldr	s15, [r3]
    197c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1980:	eddf 5a73 	vldr	s11, [pc, #460]	; 1b50 <getCommands()+0x368>
    1984:	ee27 7a25 	vmul.f32	s14, s14, s11
    1988:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    198c:	ee06 5a90 	vmov	s13, r5
    1990:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    1994:	ed9f 6b58 	vldr	d6, [pc, #352]	; 1af8 <getCommands()+0x310>
    1998:	ee04 7b06 	vmla.f64	d7, d4, d6
    199c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    19a0:	ee17 0a90 	vmov	r0, s15
    19a4:	edc3 7a00 	vstr	s15, [r3]
  channel_2_pwm_pre = (1.0 - b)*channel_2_pwm_prev + b*channel_2_pwm_pre;
    19a8:	4b6a      	ldr	r3, [pc, #424]	; (1b54 <getCommands()+0x36c>)
    19aa:	f8d3 c000 	ldr.w	ip, [r3]
    19ae:	4b5b      	ldr	r3, [pc, #364]	; (1b1c <getCommands()+0x334>)
    19b0:	edd3 7a00 	vldr	s15, [r3]
    19b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    19b8:	ee27 7a25 	vmul.f32	s14, s14, s11
    19bc:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    19c0:	ee05 ca10 	vmov	s10, ip
    19c4:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    19c8:	ee04 7b06 	vmla.f64	d7, d4, d6
    19cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    19d0:	ee17 1a90 	vmov	r1, s15
    19d4:	edc3 7a00 	vstr	s15, [r3]
  channel_3_pwm_pre = (1.0 - b)*channel_3_pwm_prev + b*channel_3_pwm_pre;
    19d8:	4b5f      	ldr	r3, [pc, #380]	; (1b58 <getCommands()+0x370>)
    19da:	681f      	ldr	r7, [r3, #0]
    19dc:	4b50      	ldr	r3, [pc, #320]	; (1b20 <getCommands()+0x338>)
    19de:	edd3 7a00 	vldr	s15, [r3]
    19e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    19e6:	ee27 7a25 	vmul.f32	s14, s14, s11
    19ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    19ee:	ee05 7a10 	vmov	s10, r7
    19f2:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    19f6:	ee04 7b06 	vmla.f64	d7, d4, d6
    19fa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    19fe:	ee17 2a90 	vmov	r2, s15
    1a02:	edc3 7a00 	vstr	s15, [r3]
  channel_4_pwm_pre = (1.0 - b)*channel_4_pwm_prev + b*channel_4_pwm_pre;
    1a06:	4b55      	ldr	r3, [pc, #340]	; (1b5c <getCommands()+0x374>)
    1a08:	681e      	ldr	r6, [r3, #0]
    1a0a:	4c46      	ldr	r4, [pc, #280]	; (1b24 <getCommands()+0x33c>)
    1a0c:	edd4 7a00 	vldr	s15, [r4]
    1a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1a14:	ee27 7a25 	vmul.f32	s14, s14, s11
    1a18:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1a1c:	ee05 6a90 	vmov	s11, r6
    1a20:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    1a24:	ee05 7b06 	vmla.f64	d7, d5, d6
    1a28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1a2c:	ee17 3a90 	vmov	r3, s15
    1a30:	edc4 7a00 	vstr	s15, [r4]

	// Additional cutoff to deal with occasional spikes in recieved radio commands
	d_ch1 = channel_1_pwm_pre - channel_1_pwm_prev;
    1a34:	1b44      	subs	r4, r0, r5
    1a36:	f8df e158 	ldr.w	lr, [pc, #344]	; 1b90 <getCommands()+0x3a8>
    1a3a:	f8ce 4000 	str.w	r4, [lr]
	d_ch2 = channel_2_pwm_pre - channel_2_pwm_prev;
    1a3e:	eba1 010c 	sub.w	r1, r1, ip
    1a42:	f8df c138 	ldr.w	ip, [pc, #312]	; 1b7c <getCommands()+0x394>
    1a46:	f8cc 1000 	str.w	r1, [ip]
	d_ch3 = channel_3_pwm_pre - channel_3_pwm_prev;
    1a4a:	1bd2      	subs	r2, r2, r7
    1a4c:	4944      	ldr	r1, [pc, #272]	; (1b60 <getCommands()+0x378>)
    1a4e:	600a      	str	r2, [r1, #0]
	d_ch4 = channel_4_pwm_pre - channel_4_pwm_prev;
    1a50:	1b9b      	subs	r3, r3, r6
    1a52:	4a44      	ldr	r2, [pc, #272]	; (1b64 <getCommands()+0x37c>)
    1a54:	6013      	str	r3, [r2, #0]
	
	if (abs(d_ch1) > cutoff_val && ch1_CutCounter < maxCutCounter && doneWithSetup) {
    1a56:	2c00      	cmp	r4, #0
    1a58:	bfb8      	it	lt
    1a5a:	4264      	neglt	r4, r4
    1a5c:	4b42      	ldr	r3, [pc, #264]	; (1b68 <getCommands()+0x380>)
    1a5e:	681b      	ldr	r3, [r3, #0]
    1a60:	429c      	cmp	r4, r3
    1a62:	dd0a      	ble.n	1a7a <getCommands()+0x292>
    1a64:	4b41      	ldr	r3, [pc, #260]	; (1b6c <getCommands()+0x384>)
    1a66:	681a      	ldr	r2, [r3, #0]
    1a68:	4b41      	ldr	r3, [pc, #260]	; (1b70 <getCommands()+0x388>)
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	429a      	cmp	r2, r3
    1a6e:	da04      	bge.n	1a7a <getCommands()+0x292>
    1a70:	4b40      	ldr	r3, [pc, #256]	; (1b74 <getCommands()+0x38c>)
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	2b00      	cmp	r3, #0
    1a76:	f040 80b5 	bne.w	1be4 <getCommands()+0x3fc>
		channel_1_pwm = channel_1_pwm_prev;
		Serial.println(F("Radio command spike detected (CH1)"));
		ch1_CutCounter++;
	} else {
		channel_1_pwm = channel_1_pwm_pre;
    1a7a:	4b3f      	ldr	r3, [pc, #252]	; (1b78 <getCommands()+0x390>)
    1a7c:	6018      	str	r0, [r3, #0]
    1a7e:	2300      	movs	r3, #0
		ch1_CutCounter++;
    1a80:	4a3a      	ldr	r2, [pc, #232]	; (1b6c <getCommands()+0x384>)
    1a82:	6013      	str	r3, [r2, #0]
		ch1_CutCounter = 0;
	}
	if (abs(d_ch2) > cutoff_val && ch2_CutCounter < maxCutCounter && doneWithSetup) {
    1a84:	4b3d      	ldr	r3, [pc, #244]	; (1b7c <getCommands()+0x394>)
    1a86:	681b      	ldr	r3, [r3, #0]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	bfb8      	it	lt
    1a8c:	425b      	neglt	r3, r3
    1a8e:	4a36      	ldr	r2, [pc, #216]	; (1b68 <getCommands()+0x380>)
    1a90:	6812      	ldr	r2, [r2, #0]
    1a92:	4293      	cmp	r3, r2
    1a94:	dd0a      	ble.n	1aac <getCommands()+0x2c4>
    1a96:	4b3a      	ldr	r3, [pc, #232]	; (1b80 <getCommands()+0x398>)
    1a98:	681a      	ldr	r2, [r3, #0]
    1a9a:	4b35      	ldr	r3, [pc, #212]	; (1b70 <getCommands()+0x388>)
    1a9c:	681b      	ldr	r3, [r3, #0]
    1a9e:	429a      	cmp	r2, r3
    1aa0:	da04      	bge.n	1aac <getCommands()+0x2c4>
    1aa2:	4b34      	ldr	r3, [pc, #208]	; (1b74 <getCommands()+0x38c>)
    1aa4:	781b      	ldrb	r3, [r3, #0]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	f040 80ac 	bne.w	1c04 <getCommands()+0x41c>
		channel_2_pwm = channel_2_pwm_prev;
		Serial.println(F("Radio command spike detected (CH2)"));
		ch2_CutCounter++;
	} else {
		channel_2_pwm = channel_2_pwm_pre;
    1aac:	4b1b      	ldr	r3, [pc, #108]	; (1b1c <getCommands()+0x334>)
    1aae:	681a      	ldr	r2, [r3, #0]
    1ab0:	4b34      	ldr	r3, [pc, #208]	; (1b84 <getCommands()+0x39c>)
    1ab2:	601a      	str	r2, [r3, #0]
    1ab4:	2300      	movs	r3, #0
		ch2_CutCounter++;
    1ab6:	4a32      	ldr	r2, [pc, #200]	; (1b80 <getCommands()+0x398>)
    1ab8:	6013      	str	r3, [r2, #0]
		ch2_CutCounter = 0;
	}
	if (abs(d_ch3) > cutoff_val && ch3_CutCounter < maxCutCounter && doneWithSetup) {
    1aba:	4b29      	ldr	r3, [pc, #164]	; (1b60 <getCommands()+0x378>)
    1abc:	681b      	ldr	r3, [r3, #0]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	bfb8      	it	lt
    1ac2:	425b      	neglt	r3, r3
    1ac4:	4a28      	ldr	r2, [pc, #160]	; (1b68 <getCommands()+0x380>)
    1ac6:	6812      	ldr	r2, [r2, #0]
    1ac8:	4293      	cmp	r3, r2
    1aca:	dd0a      	ble.n	1ae2 <getCommands()+0x2fa>
    1acc:	4b2e      	ldr	r3, [pc, #184]	; (1b88 <getCommands()+0x3a0>)
    1ace:	681a      	ldr	r2, [r3, #0]
    1ad0:	4b27      	ldr	r3, [pc, #156]	; (1b70 <getCommands()+0x388>)
    1ad2:	681b      	ldr	r3, [r3, #0]
    1ad4:	429a      	cmp	r2, r3
    1ad6:	da04      	bge.n	1ae2 <getCommands()+0x2fa>
    1ad8:	4b26      	ldr	r3, [pc, #152]	; (1b74 <getCommands()+0x38c>)
    1ada:	781b      	ldrb	r3, [r3, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	f040 80a3 	bne.w	1c28 <getCommands()+0x440>
		channel_3_pwm = channel_3_pwm_prev;
		Serial.println(F("Radio command spike detected (CH3)"));
		ch3_CutCounter++;
	} else {
		channel_3_pwm = channel_3_pwm_pre;
    1ae2:	4b0f      	ldr	r3, [pc, #60]	; (1b20 <getCommands()+0x338>)
    1ae4:	681a      	ldr	r2, [r3, #0]
    1ae6:	4b29      	ldr	r3, [pc, #164]	; (1b8c <getCommands()+0x3a4>)
    1ae8:	601a      	str	r2, [r3, #0]
    1aea:	2300      	movs	r3, #0
		ch3_CutCounter++;
    1aec:	4a26      	ldr	r2, [pc, #152]	; (1b88 <getCommands()+0x3a0>)
    1aee:	6013      	str	r3, [r2, #0]
		ch3_CutCounter = 0;
	}
	if (abs(d_ch4) > cutoff_val && ch4_CutCounter < maxCutCounter && doneWithSetup) {
    1af0:	4b1c      	ldr	r3, [pc, #112]	; (1b64 <getCommands()+0x37c>)
    1af2:	681b      	ldr	r3, [r3, #0]
    1af4:	2b00      	cmp	r3, #0
    1af6:	e04d      	b.n	1b94 <getCommands()+0x3ac>
    1af8:	40000000 	.word	0x40000000
    1afc:	3fd33333 	.word	0x3fd33333
    1b00:	20005842 	.word	0x20005842
    1b04:	20005841 	.word	0x20005841
    1b08:	200057a4 	.word	0x200057a4
    1b0c:	20005668 	.word	0x20005668
    1b10:	3f1d70a4 	.word	0x3f1d70a4
    1b14:	445fc000 	.word	0x445fc000
    1b18:	200054a0 	.word	0x200054a0
    1b1c:	200054ac 	.word	0x200054ac
    1b20:	200054b8 	.word	0x200054b8
    1b24:	200054c4 	.word	0x200054c4
    1b28:	200054cc 	.word	0x200054cc
    1b2c:	200054d0 	.word	0x200054d0
    1b30:	200054d4 	.word	0x200054d4
    1b34:	200054d8 	.word	0x200054d8
    1b38:	200054dc 	.word	0x200054dc
    1b3c:	2000548c 	.word	0x2000548c
    1b40:	20005490 	.word	0x20005490
    1b44:	20005494 	.word	0x20005494
    1b48:	20005498 	.word	0x20005498
    1b4c:	200054a4 	.word	0x200054a4
    1b50:	3f333333 	.word	0x3f333333
    1b54:	200054b0 	.word	0x200054b0
    1b58:	200054bc 	.word	0x200054bc
    1b5c:	200054c8 	.word	0x200054c8
    1b60:	20005500 	.word	0x20005500
    1b64:	20005504 	.word	0x20005504
    1b68:	20003c98 	.word	0x20003c98
    1b6c:	2000547c 	.word	0x2000547c
    1b70:	20003ccc 	.word	0x20003ccc
    1b74:	2000583b 	.word	0x2000583b
    1b78:	2000549c 	.word	0x2000549c
    1b7c:	200054fc 	.word	0x200054fc
    1b80:	20005480 	.word	0x20005480
    1b84:	200054a8 	.word	0x200054a8
    1b88:	20005484 	.word	0x20005484
    1b8c:	200054b4 	.word	0x200054b4
    1b90:	200054f8 	.word	0x200054f8
    1b94:	bfb8      	it	lt
    1b96:	425b      	neglt	r3, r3
    1b98:	4a35      	ldr	r2, [pc, #212]	; (1c70 <getCommands()+0x488>)
    1b9a:	6812      	ldr	r2, [r2, #0]
    1b9c:	4293      	cmp	r3, r2
    1b9e:	dd09      	ble.n	1bb4 <getCommands()+0x3cc>
    1ba0:	4b34      	ldr	r3, [pc, #208]	; (1c74 <getCommands()+0x48c>)
    1ba2:	681a      	ldr	r2, [r3, #0]
    1ba4:	4b34      	ldr	r3, [pc, #208]	; (1c78 <getCommands()+0x490>)
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	429a      	cmp	r2, r3
    1baa:	da03      	bge.n	1bb4 <getCommands()+0x3cc>
    1bac:	4b33      	ldr	r3, [pc, #204]	; (1c7c <getCommands()+0x494>)
    1bae:	781b      	ldrb	r3, [r3, #0]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d14b      	bne.n	1c4c <getCommands()+0x464>
		channel_4_pwm = channel_4_pwm_prev;
		Serial.println(F("Radio command spike detected (CH4)"));
		ch4_CutCounter++;
	} else {
		channel_4_pwm = channel_4_pwm_pre;
    1bb4:	4b32      	ldr	r3, [pc, #200]	; (1c80 <getCommands()+0x498>)
    1bb6:	681a      	ldr	r2, [r3, #0]
    1bb8:	4b32      	ldr	r3, [pc, #200]	; (1c84 <getCommands()+0x49c>)
    1bba:	601a      	str	r2, [r3, #0]
    1bbc:	2300      	movs	r3, #0
		ch4_CutCounter++;
    1bbe:	4a2d      	ldr	r2, [pc, #180]	; (1c74 <getCommands()+0x48c>)
    1bc0:	6013      	str	r3, [r2, #0]
		ch4_CutCounter = 0;
	}

	// Update prev values
  channel_1_pwm_prev = channel_1_pwm;
    1bc2:	4b31      	ldr	r3, [pc, #196]	; (1c88 <getCommands()+0x4a0>)
    1bc4:	681a      	ldr	r2, [r3, #0]
    1bc6:	4b31      	ldr	r3, [pc, #196]	; (1c8c <getCommands()+0x4a4>)
    1bc8:	601a      	str	r2, [r3, #0]
  channel_2_pwm_prev = channel_2_pwm;
    1bca:	4b31      	ldr	r3, [pc, #196]	; (1c90 <getCommands()+0x4a8>)
    1bcc:	681a      	ldr	r2, [r3, #0]
    1bce:	4b31      	ldr	r3, [pc, #196]	; (1c94 <getCommands()+0x4ac>)
    1bd0:	601a      	str	r2, [r3, #0]
  channel_3_pwm_prev = channel_3_pwm;
    1bd2:	4b31      	ldr	r3, [pc, #196]	; (1c98 <getCommands()+0x4b0>)
    1bd4:	681a      	ldr	r2, [r3, #0]
    1bd6:	4b31      	ldr	r3, [pc, #196]	; (1c9c <getCommands()+0x4b4>)
    1bd8:	601a      	str	r2, [r3, #0]
  channel_4_pwm_prev = channel_4_pwm;
    1bda:	4b2a      	ldr	r3, [pc, #168]	; (1c84 <getCommands()+0x49c>)
    1bdc:	681a      	ldr	r2, [r3, #0]
    1bde:	4b30      	ldr	r3, [pc, #192]	; (1ca0 <getCommands()+0x4b8>)
    1be0:	601a      	str	r2, [r3, #0]
}
    1be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		channel_1_pwm = channel_1_pwm_prev;
    1be4:	4b28      	ldr	r3, [pc, #160]	; (1c88 <getCommands()+0x4a0>)
    1be6:	601d      	str	r5, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1be8:	4c2e      	ldr	r4, [pc, #184]	; (1ca4 <getCommands()+0x4bc>)
    1bea:	6823      	ldr	r3, [r4, #0]
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	2222      	movs	r2, #34	; 0x22
    1bf0:	492d      	ldr	r1, [pc, #180]	; (1ca8 <getCommands()+0x4c0>)
    1bf2:	4620      	mov	r0, r4
    1bf4:	4798      	blx	r3
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1bf6:	4620      	mov	r0, r4
    1bf8:	f00a ffbf 	bl	cb7a <Print::println()>
		ch1_CutCounter++;
    1bfc:	4b2b      	ldr	r3, [pc, #172]	; (1cac <getCommands()+0x4c4>)
    1bfe:	681b      	ldr	r3, [r3, #0]
    1c00:	3301      	adds	r3, #1
    1c02:	e73d      	b.n	1a80 <getCommands()+0x298>
		channel_2_pwm = channel_2_pwm_prev;
    1c04:	4b23      	ldr	r3, [pc, #140]	; (1c94 <getCommands()+0x4ac>)
    1c06:	681a      	ldr	r2, [r3, #0]
    1c08:	4b21      	ldr	r3, [pc, #132]	; (1c90 <getCommands()+0x4a8>)
    1c0a:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1c0c:	4c25      	ldr	r4, [pc, #148]	; (1ca4 <getCommands()+0x4bc>)
    1c0e:	6823      	ldr	r3, [r4, #0]
    1c10:	685b      	ldr	r3, [r3, #4]
    1c12:	2222      	movs	r2, #34	; 0x22
    1c14:	4926      	ldr	r1, [pc, #152]	; (1cb0 <getCommands()+0x4c8>)
    1c16:	4620      	mov	r0, r4
    1c18:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1c1a:	4620      	mov	r0, r4
    1c1c:	f00a ffad 	bl	cb7a <Print::println()>
		ch2_CutCounter++;
    1c20:	4b24      	ldr	r3, [pc, #144]	; (1cb4 <getCommands()+0x4cc>)
    1c22:	681b      	ldr	r3, [r3, #0]
    1c24:	3301      	adds	r3, #1
    1c26:	e746      	b.n	1ab6 <getCommands()+0x2ce>
		channel_3_pwm = channel_3_pwm_prev;
    1c28:	4b1c      	ldr	r3, [pc, #112]	; (1c9c <getCommands()+0x4b4>)
    1c2a:	681a      	ldr	r2, [r3, #0]
    1c2c:	4b1a      	ldr	r3, [pc, #104]	; (1c98 <getCommands()+0x4b0>)
    1c2e:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1c30:	4c1c      	ldr	r4, [pc, #112]	; (1ca4 <getCommands()+0x4bc>)
    1c32:	6823      	ldr	r3, [r4, #0]
    1c34:	685b      	ldr	r3, [r3, #4]
    1c36:	2222      	movs	r2, #34	; 0x22
    1c38:	491f      	ldr	r1, [pc, #124]	; (1cb8 <getCommands()+0x4d0>)
    1c3a:	4620      	mov	r0, r4
    1c3c:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1c3e:	4620      	mov	r0, r4
    1c40:	f00a ff9b 	bl	cb7a <Print::println()>
		ch3_CutCounter++;
    1c44:	4b1d      	ldr	r3, [pc, #116]	; (1cbc <getCommands()+0x4d4>)
    1c46:	681b      	ldr	r3, [r3, #0]
    1c48:	3301      	adds	r3, #1
    1c4a:	e74f      	b.n	1aec <getCommands()+0x304>
		channel_4_pwm = channel_4_pwm_prev;
    1c4c:	4b14      	ldr	r3, [pc, #80]	; (1ca0 <getCommands()+0x4b8>)
    1c4e:	681a      	ldr	r2, [r3, #0]
    1c50:	4b0c      	ldr	r3, [pc, #48]	; (1c84 <getCommands()+0x49c>)
    1c52:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1c54:	4c13      	ldr	r4, [pc, #76]	; (1ca4 <getCommands()+0x4bc>)
    1c56:	6823      	ldr	r3, [r4, #0]
    1c58:	685b      	ldr	r3, [r3, #4]
    1c5a:	2222      	movs	r2, #34	; 0x22
    1c5c:	4918      	ldr	r1, [pc, #96]	; (1cc0 <getCommands()+0x4d8>)
    1c5e:	4620      	mov	r0, r4
    1c60:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1c62:	4620      	mov	r0, r4
    1c64:	f00a ff89 	bl	cb7a <Print::println()>
		ch4_CutCounter++;
    1c68:	4b02      	ldr	r3, [pc, #8]	; (1c74 <getCommands()+0x48c>)
    1c6a:	681b      	ldr	r3, [r3, #0]
    1c6c:	3301      	adds	r3, #1
    1c6e:	e7a6      	b.n	1bbe <getCommands()+0x3d6>
    1c70:	20003c98 	.word	0x20003c98
    1c74:	20005488 	.word	0x20005488
    1c78:	20003ccc 	.word	0x20003ccc
    1c7c:	2000583b 	.word	0x2000583b
    1c80:	200054c4 	.word	0x200054c4
    1c84:	200054c0 	.word	0x200054c0
    1c88:	2000549c 	.word	0x2000549c
    1c8c:	200054a4 	.word	0x200054a4
    1c90:	200054a8 	.word	0x200054a8
    1c94:	200054b0 	.word	0x200054b0
    1c98:	200054b4 	.word	0x200054b4
    1c9c:	200054bc 	.word	0x200054bc
    1ca0:	200054c8 	.word	0x200054c8
    1ca4:	20003634 	.word	0x20003634
    1ca8:	20001c94 	.word	0x20001c94
    1cac:	2000547c 	.word	0x2000547c
    1cb0:	20001cb8 	.word	0x20001cb8
    1cb4:	20005480 	.word	0x20005480
    1cb8:	20001cdc 	.word	0x20001cdc
    1cbc:	20005484 	.word	0x20005484
    1cc0:	20001d00 	.word	0x20001d00

00001cc4 <failSafe()>:
  int check2 = 0;
  int check3 = 0;
  int check4 = 0;
  int check5 = 0;
  int check6 = 0;
	failureFlag = 0;
    1cc4:	4b28      	ldr	r3, [pc, #160]	; (1d68 <failSafe()+0xa4>)
    1cc6:	2200      	movs	r2, #0
    1cc8:	701a      	strb	r2, [r3, #0]

  //Triggers for failure criteria
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
  if (channel_2_pwm > maxVal || channel_2_pwm < minVal) check2 = 1;
    1cca:	4b28      	ldr	r3, [pc, #160]	; (1d6c <failSafe()+0xa8>)
    1ccc:	681a      	ldr	r2, [r3, #0]
    1cce:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
    1cd2:	4b27      	ldr	r3, [pc, #156]	; (1d70 <failSafe()+0xac>)
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1cda:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    1cde:	bf94      	ite	ls
    1ce0:	2300      	movls	r3, #0
    1ce2:	2301      	movhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;

  //If any failures, set to default failsafe values
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1ce4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1ce8:	bf88      	it	hi
    1cea:	3301      	addhi	r3, #1
  if (channel_3_pwm > maxVal || channel_3_pwm < minVal) check3 = 1;
    1cec:	4a21      	ldr	r2, [pc, #132]	; (1d74 <failSafe()+0xb0>)
    1cee:	6812      	ldr	r2, [r2, #0]
    1cf0:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1cf4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1cf8:	bf88      	it	hi
    1cfa:	3301      	addhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
    1cfc:	4a1e      	ldr	r2, [pc, #120]	; (1d78 <failSafe()+0xb4>)
    1cfe:	6812      	ldr	r2, [r2, #0]
    1d00:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1d04:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1d08:	bf88      	it	hi
    1d0a:	3301      	addhi	r3, #1
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
    1d0c:	4a1b      	ldr	r2, [pc, #108]	; (1d7c <failSafe()+0xb8>)
    1d0e:	6812      	ldr	r2, [r2, #0]
    1d10:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1d14:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1d18:	bf88      	it	hi
    1d1a:	3301      	addhi	r3, #1
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;
    1d1c:	4a18      	ldr	r2, [pc, #96]	; (1d80 <failSafe()+0xbc>)
    1d1e:	6812      	ldr	r2, [r2, #0]
    1d20:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    1d24:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    1d28:	bf88      	it	hi
    1d2a:	3301      	addhi	r3, #1
    1d2c:	b1d3      	cbz	r3, 1d64 <failSafe()+0xa0>
    channel_1_pwm = channel_1_fs;
    1d2e:	4b15      	ldr	r3, [pc, #84]	; (1d84 <failSafe()+0xc0>)
    1d30:	681a      	ldr	r2, [r3, #0]
    1d32:	4b0f      	ldr	r3, [pc, #60]	; (1d70 <failSafe()+0xac>)
    1d34:	601a      	str	r2, [r3, #0]
    channel_2_pwm = channel_2_fs;
    1d36:	4b14      	ldr	r3, [pc, #80]	; (1d88 <failSafe()+0xc4>)
    1d38:	681a      	ldr	r2, [r3, #0]
    1d3a:	4b0c      	ldr	r3, [pc, #48]	; (1d6c <failSafe()+0xa8>)
    1d3c:	601a      	str	r2, [r3, #0]
    channel_3_pwm = channel_3_fs;
    1d3e:	4b13      	ldr	r3, [pc, #76]	; (1d8c <failSafe()+0xc8>)
    1d40:	681a      	ldr	r2, [r3, #0]
    1d42:	4b0c      	ldr	r3, [pc, #48]	; (1d74 <failSafe()+0xb0>)
    1d44:	601a      	str	r2, [r3, #0]
    channel_4_pwm = channel_4_fs;
    1d46:	4b12      	ldr	r3, [pc, #72]	; (1d90 <failSafe()+0xcc>)
    1d48:	681a      	ldr	r2, [r3, #0]
    1d4a:	4b0b      	ldr	r3, [pc, #44]	; (1d78 <failSafe()+0xb4>)
    1d4c:	601a      	str	r2, [r3, #0]
    channel_5_pwm = channel_5_fs;
    1d4e:	4b11      	ldr	r3, [pc, #68]	; (1d94 <failSafe()+0xd0>)
    1d50:	681a      	ldr	r2, [r3, #0]
    1d52:	4b0a      	ldr	r3, [pc, #40]	; (1d7c <failSafe()+0xb8>)
    1d54:	601a      	str	r2, [r3, #0]
    channel_6_pwm = channel_6_fs;
    1d56:	4b10      	ldr	r3, [pc, #64]	; (1d98 <failSafe()+0xd4>)
    1d58:	681a      	ldr	r2, [r3, #0]
    1d5a:	4b09      	ldr	r3, [pc, #36]	; (1d80 <failSafe()+0xbc>)
    1d5c:	601a      	str	r2, [r3, #0]
		failureFlag = 1;
    1d5e:	4b02      	ldr	r3, [pc, #8]	; (1d68 <failSafe()+0xa4>)
    1d60:	2201      	movs	r2, #1
    1d62:	701a      	strb	r2, [r3, #0]
  }
}
    1d64:	4770      	bx	lr
    1d66:	bf00      	nop
    1d68:	2000583d 	.word	0x2000583d
    1d6c:	200054a8 	.word	0x200054a8
    1d70:	2000549c 	.word	0x2000549c
    1d74:	200054b4 	.word	0x200054b4
    1d78:	200054c0 	.word	0x200054c0
    1d7c:	200054cc 	.word	0x200054cc
    1d80:	200054d0 	.word	0x200054d0
    1d84:	20003c74 	.word	0x20003c74
    1d88:	20003c78 	.word	0x20003c78
    1d8c:	20003c7c 	.word	0x20003c7c
    1d90:	20003c80 	.word	0x20003c80
    1d94:	20003c84 	.word	0x20003c84
    1d98:	20003c88 	.word	0x20003c88

00001d9c <throttleCut()>:
   * Monitors the state of radio command channel_5_pwm and directly sets the mx_command_PWM values to minimum (120 is
   * minimum for oneshot125 protocol, 0 is minimum for standard PWM servo library used) if channel 5 is high. This is the last function 
   * called before commandMotors() is called so that the last thing checked is if the user is giving permission to command
   * the motors to anything other than minimum value. Safety first. 
   */
  if (channel_5_pwm > 1500) {
    1d9c:	4b0a      	ldr	r3, [pc, #40]	; (1dc8 <throttleCut()+0x2c>)
    1d9e:	681a      	ldr	r2, [r3, #0]
    1da0:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1da4:	429a      	cmp	r2, r3
    1da6:	dd0e      	ble.n	1dc6 <throttleCut()+0x2a>
    // m4_command_PWM = 120;
    // m5_command_PWM = 120;
    // m6_command_PWM = 120;
    
    //Uncomment if using servo PWM variables to control motor ESCs
    s1_command_PWM = 0;
    1da8:	2300      	movs	r3, #0
    1daa:	4a08      	ldr	r2, [pc, #32]	; (1dcc <throttleCut()+0x30>)
    1dac:	6013      	str	r3, [r2, #0]
    s2_command_PWM = 0;
    1dae:	4a08      	ldr	r2, [pc, #32]	; (1dd0 <throttleCut()+0x34>)
    1db0:	6013      	str	r3, [r2, #0]
    s3_command_PWM = 0;
    1db2:	4a08      	ldr	r2, [pc, #32]	; (1dd4 <throttleCut()+0x38>)
    1db4:	6013      	str	r3, [r2, #0]
    s4_command_PWM = 0;
    1db6:	4a08      	ldr	r2, [pc, #32]	; (1dd8 <throttleCut()+0x3c>)
    1db8:	6013      	str	r3, [r2, #0]
    s5_command_PWM = 0;
    1dba:	4a08      	ldr	r2, [pc, #32]	; (1ddc <throttleCut()+0x40>)
    1dbc:	6013      	str	r3, [r2, #0]
    s6_command_PWM = 0;
    1dbe:	4a08      	ldr	r2, [pc, #32]	; (1de0 <throttleCut()+0x44>)
    1dc0:	6013      	str	r3, [r2, #0]
    s7_command_PWM = 0;
    1dc2:	4a08      	ldr	r2, [pc, #32]	; (1de4 <throttleCut()+0x48>)
    1dc4:	6013      	str	r3, [r2, #0]
  }
}
    1dc6:	4770      	bx	lr
    1dc8:	200054cc 	.word	0x200054cc
    1dcc:	20005620 	.word	0x20005620
    1dd0:	20005628 	.word	0x20005628
    1dd4:	20005630 	.word	0x20005630
    1dd8:	20005638 	.word	0x20005638
    1ddc:	20005640 	.word	0x20005640
    1de0:	20005648 	.word	0x20005648
    1de4:	20005650 	.word	0x20005650

00001de8 <loopRate(int)>:
  #endif
  Serial.println("Error: MPU9250 not selected. Cannot calibrate non-existent magnetometer.");
  while(1); //Halt code so it won't enter main loop until this function commented out
}

void loopRate(int freq) {
    1de8:	b510      	push	{r4, lr}
    1dea:	ed2d 8b02 	vpush	{d8}
    1dee:	ee06 0a10 	vmov	s12, r0
   * background cause the loop rate to fluctuate. This function basically just waits at the end of every loop iteration until 
   * the correct time has passed since the start of the current loop for the desired loop rate in Hz. 2kHz is a good rate to 
   * be at because the loop nominally will run between 2.8kHz - 4.2kHz. This lets us have a little room to add extra computations
   * and remain above 2kHz, without needing to retune all of our filtering parameters.
   */
  float invFreq = 1.0/freq*1000000.0;
    1df2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1df6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    1dfa:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1dfe:	ed9f 6b12 	vldr	d6, [pc, #72]	; 1e48 <loopRate(int)+0x60>
    1e02:	ee27 7b06 	vmul.f64	d7, d7, d6
    1e06:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  unsigned long checker = micros();
    1e0a:	f00b fbe7 	bl	d5dc <micros>
  
  //Sit in loop until appropriate time has passed
  while (invFreq > (checker - current_time)) {
    1e0e:	4b10      	ldr	r3, [pc, #64]	; (1e50 <loopRate(int)+0x68>)
    1e10:	681b      	ldr	r3, [r3, #0]
    1e12:	1ac0      	subs	r0, r0, r3
    1e14:	ee07 0a90 	vmov	s15, r0
    1e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e24:	dd0d      	ble.n	1e42 <loopRate(int)+0x5a>
    1e26:	4c0a      	ldr	r4, [pc, #40]	; (1e50 <loopRate(int)+0x68>)
    checker = micros();
    1e28:	f00b fbd8 	bl	d5dc <micros>
  while (invFreq > (checker - current_time)) {
    1e2c:	6823      	ldr	r3, [r4, #0]
    1e2e:	1ac0      	subs	r0, r0, r3
    1e30:	ee07 0a90 	vmov	s15, r0
    1e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1e38:	eef4 7ac8 	vcmpe.f32	s15, s16
    1e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e40:	d4f2      	bmi.n	1e28 <loopRate(int)+0x40>
  }
}
    1e42:	ecbd 8b02 	vpop	{d8}
    1e46:	bd10      	pop	{r4, pc}
    1e48:	00000000 	.word	0x00000000
    1e4c:	412e8480 	.word	0x412e8480
    1e50:	200054f4 	.word	0x200054f4

00001e54 <loopBlink()>:
void loopBlink() {
  //DESCRIPTION: Blink LED on board to indicate main loop is running
  /*
   * It looks cool.
   */
  if (current_time - blink_counter > blink_delay) {
    1e54:	4b11      	ldr	r3, [pc, #68]	; (1e9c <loopBlink()+0x48>)
    1e56:	681b      	ldr	r3, [r3, #0]
    1e58:	4a11      	ldr	r2, [pc, #68]	; (1ea0 <loopBlink()+0x4c>)
    1e5a:	6812      	ldr	r2, [r2, #0]
    1e5c:	1a9b      	subs	r3, r3, r2
    1e5e:	4a11      	ldr	r2, [pc, #68]	; (1ea4 <loopBlink()+0x50>)
    1e60:	6812      	ldr	r2, [r2, #0]
    1e62:	4293      	cmp	r3, r2
    1e64:	d800      	bhi.n	1e68 <loopBlink()+0x14>
    1e66:	4770      	bx	lr
void loopBlink() {
    1e68:	b510      	push	{r4, lr}
    blink_counter = micros();
    1e6a:	f00b fbb7 	bl	d5dc <micros>
    1e6e:	4b0c      	ldr	r3, [pc, #48]	; (1ea0 <loopBlink()+0x4c>)
    1e70:	6018      	str	r0, [r3, #0]
    digitalWrite(13, blinkAlternate); //Pin 13 is built in LED
    1e72:	4c0d      	ldr	r4, [pc, #52]	; (1ea8 <loopBlink()+0x54>)
    1e74:	7821      	ldrb	r1, [r4, #0]
    1e76:	200d      	movs	r0, #13
    1e78:	f00b fbf0 	bl	d65c <digitalWrite>
    
    if (blinkAlternate == 1) {
    1e7c:	7823      	ldrb	r3, [r4, #0]
    1e7e:	b12b      	cbz	r3, 1e8c <loopBlink()+0x38>
      blinkAlternate = 0;
    1e80:	2200      	movs	r2, #0
    1e82:	7022      	strb	r2, [r4, #0]
      blink_delay = 100000;
    1e84:	4b07      	ldr	r3, [pc, #28]	; (1ea4 <loopBlink()+0x50>)
    1e86:	4a09      	ldr	r2, [pc, #36]	; (1eac <loopBlink()+0x58>)
    1e88:	601a      	str	r2, [r3, #0]
    else if (blinkAlternate == 0) {
      blinkAlternate = 1;
      blink_delay = 2000000;
      }
  }
}
    1e8a:	bd10      	pop	{r4, pc}
      blinkAlternate = 1;
    1e8c:	4b06      	ldr	r3, [pc, #24]	; (1ea8 <loopBlink()+0x54>)
    1e8e:	2201      	movs	r2, #1
    1e90:	701a      	strb	r2, [r3, #0]
      blink_delay = 2000000;
    1e92:	4b04      	ldr	r3, [pc, #16]	; (1ea4 <loopBlink()+0x50>)
    1e94:	4a06      	ldr	r2, [pc, #24]	; (1eb0 <loopBlink()+0x5c>)
    1e96:	601a      	str	r2, [r3, #0]
}
    1e98:	e7f7      	b.n	1e8a <loopBlink()+0x36>
    1e9a:	bf00      	nop
    1e9c:	200054f4 	.word	0x200054f4
    1ea0:	20005474 	.word	0x20005474
    1ea4:	20005478 	.word	0x20005478
    1ea8:	20005838 	.word	0x20005838
    1eac:	000186a0 	.word	0x000186a0
    1eb0:	001e8480 	.word	0x001e8480

00001eb4 <setupBlink(int, int, int)>:

void setupBlink(int numBlinks,int upTime, int downTime) {
    1eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //DESCRIPTION: Simple function to make LED on board blink as desired
  for (int j = 1; j<= numBlinks; j++) {
    1eb8:	1e06      	subs	r6, r0, #0
    1eba:	dd17      	ble.n	1eec <setupBlink(int, int, int)+0x38>
    1ebc:	460f      	mov	r7, r1
    1ebe:	4690      	mov	r8, r2
    1ec0:	2401      	movs	r4, #1
    digitalWrite(13, LOW);
    1ec2:	f04f 0a00 	mov.w	sl, #0
    1ec6:	250d      	movs	r5, #13
    delay(downTime);
    digitalWrite(13, HIGH);
    1ec8:	46a1      	mov	r9, r4
    digitalWrite(13, LOW);
    1eca:	4651      	mov	r1, sl
    1ecc:	4628      	mov	r0, r5
    1ece:	f00b fbc5 	bl	d65c <digitalWrite>
    delay(downTime);
    1ed2:	4640      	mov	r0, r8
    1ed4:	f00b fbac 	bl	d630 <delay>
    digitalWrite(13, HIGH);
    1ed8:	4649      	mov	r1, r9
    1eda:	4628      	mov	r0, r5
    1edc:	f00b fbbe 	bl	d65c <digitalWrite>
    delay(upTime);
    1ee0:	4638      	mov	r0, r7
    1ee2:	f00b fba5 	bl	d630 <delay>
  for (int j = 1; j<= numBlinks; j++) {
    1ee6:	3401      	adds	r4, #1
    1ee8:	42a6      	cmp	r6, r4
    1eea:	daee      	bge.n	1eca <setupBlink(int, int, int)+0x16>
  }
}
    1eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001ef0 <getJoyAngle()>:
    Serial.print(F("dt = "));
    Serial.println(dt*1000000.0);
  }
}

void getJoyAngle() {
    1ef0:	b510      	push	{r4, lr}
	alphaCounts = analogRead(joyAlphaPin);
    1ef2:	2029      	movs	r0, #41	; 0x29
    1ef4:	f00b f9d6 	bl	d2a4 <analogRead>
    1ef8:	4c37      	ldr	r4, [pc, #220]	; (1fd8 <getJoyAngle()+0xe8>)
    1efa:	6020      	str	r0, [r4, #0]
	betaCounts = analogRead(joyBetaPin);
    1efc:	2028      	movs	r0, #40	; 0x28
    1efe:	f00b f9d1 	bl	d2a4 <analogRead>
    1f02:	4b36      	ldr	r3, [pc, #216]	; (1fdc <getJoyAngle()+0xec>)
    1f04:	6018      	str	r0, [r3, #0]
	//alpha = alphaCounts*0.06577f - 40.0f;
	//beta = betaCounts*(-0.05971f) + 36.0f;
	float FR_alpha = alphaCounts_max - alphaCounts_min;
    1f06:	4b36      	ldr	r3, [pc, #216]	; (1fe0 <getJoyAngle()+0xf0>)
    1f08:	681a      	ldr	r2, [r3, #0]
    1f0a:	4b36      	ldr	r3, [pc, #216]	; (1fe4 <getJoyAngle()+0xf4>)
    1f0c:	681b      	ldr	r3, [r3, #0]
    1f0e:	1a9b      	subs	r3, r3, r2
    1f10:	ee07 3a90 	vmov	s15, r3
    1f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float FR_beta = betaCounts_max - alphaCounts_min;
    1f18:	4b33      	ldr	r3, [pc, #204]	; (1fe8 <getJoyAngle()+0xf8>)
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	1a9b      	subs	r3, r3, r2
    1f1e:	ee07 3a90 	vmov	s15, r3
    1f22:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_max -
    1f26:	edd4 7a00 	vldr	s15, [r4]
    1f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1f2e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    1f32:	ee67 6a25 	vmul.f32	s13, s14, s11
    1f36:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1f3a:	ee06 2a90 	vmov	s13, r2
    1f3e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1f42:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1f46:	eec7 6a87 	vdiv.f32	s13, s15, s14
    1f4a:	4b28      	ldr	r3, [pc, #160]	; (1fec <getJoyAngle()+0xfc>)
    1f4c:	edd3 7a00 	vldr	s15, [r3]
    1f50:	4b27      	ldr	r3, [pc, #156]	; (1ff0 <getJoyAngle()+0x100>)
    1f52:	ed93 7a00 	vldr	s14, [r3]
    1f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1f5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
		alpha_min) + alphaOffset;
    1f5e:	4b25      	ldr	r3, [pc, #148]	; (1ff4 <getJoyAngle()+0x104>)
    1f60:	edd3 7a00 	vldr	s15, [r3]
    1f64:	ee76 6aa7 	vadd.f32	s13, s13, s15
	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_max -
    1f68:	4b23      	ldr	r3, [pc, #140]	; (1ff8 <getJoyAngle()+0x108>)
    1f6a:	edc3 6a00 	vstr	s13, [r3]
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    1f6e:	ee07 0a90 	vmov	s15, r0
    1f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1f76:	ee66 5a25 	vmul.f32	s11, s12, s11
    1f7a:	ee77 7ae5 	vsub.f32	s15, s15, s11
    1f7e:	4b1f      	ldr	r3, [pc, #124]	; (1ffc <getJoyAngle()+0x10c>)
    1f80:	ed93 7a00 	vldr	s14, [r3]
    1f84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1f8c:	ee87 7a86 	vdiv.f32	s14, s15, s12
    1f90:	4b1b      	ldr	r3, [pc, #108]	; (2000 <getJoyAngle()+0x110>)
    1f92:	edd3 7a00 	vldr	s15, [r3]
    1f96:	4b1b      	ldr	r3, [pc, #108]	; (2004 <getJoyAngle()+0x114>)
    1f98:	ed93 6a00 	vldr	s12, [r3]
    1f9c:	ee77 7ac6 	vsub.f32	s15, s15, s12
    1fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
		beta_max) + betaOffset;
    1fa4:	4b18      	ldr	r3, [pc, #96]	; (2008 <getJoyAngle()+0x118>)
    1fa6:	ed93 7a00 	vldr	s14, [r3]
    1faa:	ee77 7a87 	vadd.f32	s15, s15, s14
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    1fae:	4b17      	ldr	r3, [pc, #92]	; (200c <getJoyAngle()+0x11c>)
    1fb0:	edc3 7a00 	vstr	s15, [r3]


	alphaRoll = alpha + roll_IMU;
    1fb4:	4b16      	ldr	r3, [pc, #88]	; (2010 <getJoyAngle()+0x120>)
    1fb6:	ed93 7a00 	vldr	s14, [r3]
    1fba:	ee37 7a26 	vadd.f32	s14, s14, s13
    1fbe:	4b15      	ldr	r3, [pc, #84]	; (2014 <getJoyAngle()+0x124>)
    1fc0:	ed83 7a00 	vstr	s14, [r3]
	betaPitch = beta + pitch_IMU;
    1fc4:	4b14      	ldr	r3, [pc, #80]	; (2018 <getJoyAngle()+0x128>)
    1fc6:	ed93 7a00 	vldr	s14, [r3]
    1fca:	ee77 7a27 	vadd.f32	s15, s14, s15
    1fce:	4b13      	ldr	r3, [pc, #76]	; (201c <getJoyAngle()+0x12c>)
    1fd0:	edc3 7a00 	vstr	s15, [r3]
}
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	bf00      	nop
    1fd8:	20005450 	.word	0x20005450
    1fdc:	20005464 	.word	0x20005464
    1fe0:	20003c44 	.word	0x20003c44
    1fe4:	20003c40 	.word	0x20003c40
    1fe8:	20003c54 	.word	0x20003c54
    1fec:	20003c48 	.word	0x20003c48
    1ff0:	20003c4c 	.word	0x20003c4c
    1ff4:	20005454 	.word	0x20005454
    1ff8:	2000544c 	.word	0x2000544c
    1ffc:	20003c58 	.word	0x20003c58
    2000:	20003c60 	.word	0x20003c60
    2004:	20003c5c 	.word	0x20003c5c
    2008:	20005468 	.word	0x20005468
    200c:	20005460 	.word	0x20005460
    2010:	200055e0 	.word	0x200055e0
    2014:	20005458 	.word	0x20005458
    2018:	200055b4 	.word	0x200055b4
    201c:	2000546c 	.word	0x2000546c

00002020 <openIris()>:

void openIris() {
    2020:	b508      	push	{r3, lr}
	iris.write(60);
    2022:	213c      	movs	r1, #60	; 0x3c
    2024:	4803      	ldr	r0, [pc, #12]	; (2034 <openIris()+0x14>)
    2026:	f003 f981 	bl	532c <PWMServo::write(int)>
	servoLoopCounter = 0;
    202a:	4b03      	ldr	r3, [pc, #12]	; (2038 <openIris()+0x18>)
    202c:	2200      	movs	r2, #0
    202e:	601a      	str	r2, [r3, #0]
}
    2030:	bd08      	pop	{r3, pc}
    2032:	bf00      	nop
    2034:	20005574 	.word	0x20005574
    2038:	200057e8 	.word	0x200057e8

0000203c <closeIris()>:

void closeIris() {
    203c:	b508      	push	{r3, lr}
	if (servoLoopCounter < 500) {
    203e:	4b09      	ldr	r3, [pc, #36]	; (2064 <closeIris()+0x28>)
    2040:	681b      	ldr	r3, [r3, #0]
    2042:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2046:	da08      	bge.n	205a <closeIris()+0x1e>
		iris.write(120);
    2048:	2178      	movs	r1, #120	; 0x78
    204a:	4807      	ldr	r0, [pc, #28]	; (2068 <closeIris()+0x2c>)
    204c:	f003 f96e 	bl	532c <PWMServo::write(int)>
		servoLoopCounter++;
    2050:	4a04      	ldr	r2, [pc, #16]	; (2064 <closeIris()+0x28>)
    2052:	6813      	ldr	r3, [r2, #0]
    2054:	3301      	adds	r3, #1
    2056:	6013      	str	r3, [r2, #0]
	} else {
		iris.write(118);
	}
}
    2058:	bd08      	pop	{r3, pc}
		iris.write(118);
    205a:	2176      	movs	r1, #118	; 0x76
    205c:	4802      	ldr	r0, [pc, #8]	; (2068 <closeIris()+0x2c>)
    205e:	f003 f965 	bl	532c <PWMServo::write(int)>
}
    2062:	e7f9      	b.n	2058 <closeIris()+0x1c>
    2064:	200057e8 	.word	0x200057e8
    2068:	20005574 	.word	0x20005574

0000206c <printRIPAngles()>:
		Serial.print(F("betaCounts_min = "));
		Serial.println(betaCounts_min);
	}
}

void printRIPAngles() {
    206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (current_time - print_counter > 20000) {
    206e:	4b37      	ldr	r3, [pc, #220]	; (214c <printRIPAngles()+0xe0>)
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	4a37      	ldr	r2, [pc, #220]	; (2150 <printRIPAngles()+0xe4>)
    2074:	6812      	ldr	r2, [r2, #0]
    2076:	1a9b      	subs	r3, r3, r2
    2078:	f644 6220 	movw	r2, #20000	; 0x4e20
    207c:	4293      	cmp	r3, r2
    207e:	d800      	bhi.n	2082 <printRIPAngles()+0x16>
		//Serial.print(alphaCounts);
		//Serial.print(" ");
		//Serial.print("BetaCounts: ");
		//Serial.println(betaCounts);
	}
}
    2080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		print_counter = micros();
    2082:	f00b faab 	bl	d5dc <micros>
    2086:	4b32      	ldr	r3, [pc, #200]	; (2150 <printRIPAngles()+0xe4>)
    2088:	6018      	str	r0, [r3, #0]
		Serial.print(alpha);
    208a:	4f32      	ldr	r7, [pc, #200]	; (2154 <printRIPAngles()+0xe8>)
    208c:	ed97 0a00 	vldr	s0, [r7]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2090:	4c31      	ldr	r4, [pc, #196]	; (2158 <printRIPAngles()+0xec>)
    2092:	2102      	movs	r1, #2
    2094:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2098:	4620      	mov	r0, r4
    209a:	f00a fdd1 	bl	cc40 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    209e:	4d2f      	ldr	r5, [pc, #188]	; (215c <printRIPAngles()+0xf0>)
    20a0:	6823      	ldr	r3, [r4, #0]
    20a2:	685b      	ldr	r3, [r3, #4]
    20a4:	2201      	movs	r2, #1
    20a6:	4629      	mov	r1, r5
    20a8:	4620      	mov	r0, r4
    20aa:	4798      	blx	r3
		Serial.print(roll_IMU);
    20ac:	4e2c      	ldr	r6, [pc, #176]	; (2160 <printRIPAngles()+0xf4>)
    20ae:	ed96 0a00 	vldr	s0, [r6]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    20b2:	2102      	movs	r1, #2
    20b4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    20b8:	4620      	mov	r0, r4
    20ba:	f00a fdc1 	bl	cc40 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    20be:	6823      	ldr	r3, [r4, #0]
    20c0:	685b      	ldr	r3, [r3, #4]
    20c2:	2201      	movs	r2, #1
    20c4:	4629      	mov	r1, r5
    20c6:	4620      	mov	r0, r4
    20c8:	4798      	blx	r3
		Serial.print(alpha + roll_IMU);
    20ca:	ed97 0a00 	vldr	s0, [r7]
    20ce:	edd6 7a00 	vldr	s15, [r6]
    20d2:	ee30 0a27 	vadd.f32	s0, s0, s15
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    20d6:	2102      	movs	r1, #2
    20d8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    20dc:	4620      	mov	r0, r4
    20de:	f00a fdaf 	bl	cc40 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    20e2:	6823      	ldr	r3, [r4, #0]
    20e4:	685b      	ldr	r3, [r3, #4]
    20e6:	2201      	movs	r2, #1
    20e8:	4629      	mov	r1, r5
    20ea:	4620      	mov	r0, r4
    20ec:	4798      	blx	r3
		Serial.print(beta);
    20ee:	4f1d      	ldr	r7, [pc, #116]	; (2164 <printRIPAngles()+0xf8>)
    20f0:	ed97 0a00 	vldr	s0, [r7]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    20f4:	2102      	movs	r1, #2
    20f6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    20fa:	4620      	mov	r0, r4
    20fc:	f00a fda0 	bl	cc40 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2100:	6823      	ldr	r3, [r4, #0]
    2102:	685b      	ldr	r3, [r3, #4]
    2104:	2201      	movs	r2, #1
    2106:	4629      	mov	r1, r5
    2108:	4620      	mov	r0, r4
    210a:	4798      	blx	r3
		Serial.print(pitch_IMU);
    210c:	4e16      	ldr	r6, [pc, #88]	; (2168 <printRIPAngles()+0xfc>)
    210e:	ed96 0a00 	vldr	s0, [r6]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2112:	2102      	movs	r1, #2
    2114:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2118:	4620      	mov	r0, r4
    211a:	f00a fd91 	bl	cc40 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    211e:	6823      	ldr	r3, [r4, #0]
    2120:	685b      	ldr	r3, [r3, #4]
    2122:	2201      	movs	r2, #1
    2124:	4629      	mov	r1, r5
    2126:	4620      	mov	r0, r4
    2128:	4798      	blx	r3
		Serial.println(beta + pitch_IMU);
    212a:	ed97 0a00 	vldr	s0, [r7]
    212e:	edd6 7a00 	vldr	s15, [r6]
    2132:	ee30 0a27 	vadd.f32	s0, s0, s15
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2136:	2102      	movs	r1, #2
    2138:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    213c:	4620      	mov	r0, r4
    213e:	f00a fd7f 	bl	cc40 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    2142:	4620      	mov	r0, r4
    2144:	f00a fd19 	bl	cb7a <Print::println()>
}
    2148:	e79a      	b.n	2080 <printRIPAngles()+0x14>
    214a:	bf00      	nop
    214c:	200054f4 	.word	0x200054f4
    2150:	200055c8 	.word	0x200055c8
    2154:	2000544c 	.word	0x2000544c
    2158:	20003634 	.word	0x20003634
    215c:	200030e8 	.word	0x200030e8
    2160:	200055e0 	.word	0x200055e0
    2164:	20005460 	.word	0x20005460
    2168:	200055b4 	.word	0x200055b4

0000216c <getDataString()>:

String getDataString() {
    216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2170:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    2174:	4605      	mov	r5, r0
	String csvDataString;
    2176:	2100      	movs	r1, #0
    2178:	f00a ffaf 	bl	d0da <String::String(char const*)>
	csvDataString = String(roll_IMU)
    217c:	2102      	movs	r1, #2
    217e:	4bcc      	ldr	r3, [pc, #816]	; (24b0 <getDataString()+0x344>)
    2180:	ed93 0a00 	vldr	s0, [r3]
    2184:	a806      	add	r0, sp, #24
    2186:	f00b f811 	bl	d1ac <String::String(float, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    218a:	a906      	add	r1, sp, #24
    218c:	a802      	add	r0, sp, #8
    218e:	f00a ffd6 	bl	d13e <String::String(String const&)>
									+ ","
    2192:	4cc8      	ldr	r4, [pc, #800]	; (24b4 <getDataString()+0x348>)
    2194:	4621      	mov	r1, r4
    2196:	a802      	add	r0, sp, #8
    2198:	f00b f85c 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    219c:	4606      	mov	r6, r0
									+ String(pitch_IMU)
    219e:	2102      	movs	r1, #2
    21a0:	4bc5      	ldr	r3, [pc, #788]	; (24b8 <getDataString()+0x34c>)
    21a2:	ed93 0a00 	vldr	s0, [r3]
    21a6:	a80a      	add	r0, sp, #40	; 0x28
    21a8:	f00b f800 	bl	d1ac <String::String(float, unsigned char)>
    21ac:	a90a      	add	r1, sp, #40	; 0x28
    21ae:	4630      	mov	r0, r6
    21b0:	f00b f848 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    21b4:	4621      	mov	r1, r4
    21b6:	f00b f84d 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    21ba:	4606      	mov	r6, r0
									+ String(yaw_IMU)
    21bc:	2102      	movs	r1, #2
    21be:	4bbf      	ldr	r3, [pc, #764]	; (24bc <getDataString()+0x350>)
    21c0:	ed93 0a00 	vldr	s0, [r3]
    21c4:	a80e      	add	r0, sp, #56	; 0x38
    21c6:	f00a fff1 	bl	d1ac <String::String(float, unsigned char)>
    21ca:	a90e      	add	r1, sp, #56	; 0x38
    21cc:	4630      	mov	r0, r6
    21ce:	f00b f839 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    21d2:	4621      	mov	r1, r4
    21d4:	f00b f83e 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    21d8:	4606      	mov	r6, r0
									+ String(alpha)
    21da:	2102      	movs	r1, #2
    21dc:	4bb8      	ldr	r3, [pc, #736]	; (24c0 <getDataString()+0x354>)
    21de:	ed93 0a00 	vldr	s0, [r3]
    21e2:	a812      	add	r0, sp, #72	; 0x48
    21e4:	f00a ffe2 	bl	d1ac <String::String(float, unsigned char)>
    21e8:	a912      	add	r1, sp, #72	; 0x48
    21ea:	4630      	mov	r0, r6
    21ec:	f00b f82a 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    21f0:	4621      	mov	r1, r4
    21f2:	f00b f82f 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    21f6:	4606      	mov	r6, r0
									+ String(beta)
    21f8:	2102      	movs	r1, #2
    21fa:	4bb2      	ldr	r3, [pc, #712]	; (24c4 <getDataString()+0x358>)
    21fc:	ed93 0a00 	vldr	s0, [r3]
    2200:	a816      	add	r0, sp, #88	; 0x58
    2202:	f00a ffd3 	bl	d1ac <String::String(float, unsigned char)>
    2206:	a916      	add	r1, sp, #88	; 0x58
    2208:	4630      	mov	r0, r6
    220a:	f00b f81b 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    220e:	4621      	mov	r1, r4
    2210:	f00b f820 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2214:	4606      	mov	r6, r0
									+ String(roll_des)
    2216:	2102      	movs	r1, #2
    2218:	4bab      	ldr	r3, [pc, #684]	; (24c8 <getDataString()+0x35c>)
    221a:	ed93 0a00 	vldr	s0, [r3]
    221e:	a81a      	add	r0, sp, #104	; 0x68
    2220:	f00a ffc4 	bl	d1ac <String::String(float, unsigned char)>
    2224:	a91a      	add	r1, sp, #104	; 0x68
    2226:	4630      	mov	r0, r6
    2228:	f00b f80c 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    222c:	4621      	mov	r1, r4
    222e:	f00b f811 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2232:	4606      	mov	r6, r0
									+ String(pitch_des)
    2234:	2102      	movs	r1, #2
    2236:	4ba5      	ldr	r3, [pc, #660]	; (24cc <getDataString()+0x360>)
    2238:	ed93 0a00 	vldr	s0, [r3]
    223c:	a81e      	add	r0, sp, #120	; 0x78
    223e:	f00a ffb5 	bl	d1ac <String::String(float, unsigned char)>
    2242:	a91e      	add	r1, sp, #120	; 0x78
    2244:	4630      	mov	r0, r6
    2246:	f00a fffd 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    224a:	4621      	mov	r1, r4
    224c:	f00b f802 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2250:	4606      	mov	r6, r0
									+ String(yaw_des)
    2252:	2102      	movs	r1, #2
    2254:	4b9e      	ldr	r3, [pc, #632]	; (24d0 <getDataString()+0x364>)
    2256:	ed93 0a00 	vldr	s0, [r3]
    225a:	a822      	add	r0, sp, #136	; 0x88
    225c:	f00a ffa6 	bl	d1ac <String::String(float, unsigned char)>
    2260:	a922      	add	r1, sp, #136	; 0x88
    2262:	4630      	mov	r0, r6
    2264:	f00a ffee 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2268:	4621      	mov	r1, r4
    226a:	f00a fff3 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    226e:	4606      	mov	r6, r0
									+ String(thro_des)
    2270:	2102      	movs	r1, #2
    2272:	4b98      	ldr	r3, [pc, #608]	; (24d4 <getDataString()+0x368>)
    2274:	ed93 0a00 	vldr	s0, [r3]
    2278:	a826      	add	r0, sp, #152	; 0x98
    227a:	f00a ff97 	bl	d1ac <String::String(float, unsigned char)>
    227e:	a926      	add	r1, sp, #152	; 0x98
    2280:	4630      	mov	r0, r6
    2282:	f00a ffdf 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2286:	4621      	mov	r1, r4
    2288:	f00a ffe4 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    228c:	4606      	mov	r6, r0
									+ String(roll_PID)
    228e:	2102      	movs	r1, #2
    2290:	4b91      	ldr	r3, [pc, #580]	; (24d8 <getDataString()+0x36c>)
    2292:	ed93 0a00 	vldr	s0, [r3]
    2296:	a82a      	add	r0, sp, #168	; 0xa8
    2298:	f00a ff88 	bl	d1ac <String::String(float, unsigned char)>
    229c:	a92a      	add	r1, sp, #168	; 0xa8
    229e:	4630      	mov	r0, r6
    22a0:	f00a ffd0 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22a4:	4621      	mov	r1, r4
    22a6:	f00a ffd5 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    22aa:	4606      	mov	r6, r0
									+ String(pitch_PID)
    22ac:	2102      	movs	r1, #2
    22ae:	4b8b      	ldr	r3, [pc, #556]	; (24dc <getDataString()+0x370>)
    22b0:	ed93 0a00 	vldr	s0, [r3]
    22b4:	a82e      	add	r0, sp, #184	; 0xb8
    22b6:	f00a ff79 	bl	d1ac <String::String(float, unsigned char)>
    22ba:	a92e      	add	r1, sp, #184	; 0xb8
    22bc:	4630      	mov	r0, r6
    22be:	f00a ffc1 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22c2:	4621      	mov	r1, r4
    22c4:	f00a ffc6 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    22c8:	4606      	mov	r6, r0
									+ String(yaw_PID)
    22ca:	2102      	movs	r1, #2
    22cc:	4b84      	ldr	r3, [pc, #528]	; (24e0 <getDataString()+0x374>)
    22ce:	ed93 0a00 	vldr	s0, [r3]
    22d2:	a832      	add	r0, sp, #200	; 0xc8
    22d4:	f00a ff6a 	bl	d1ac <String::String(float, unsigned char)>
    22d8:	a932      	add	r1, sp, #200	; 0xc8
    22da:	4630      	mov	r0, r6
    22dc:	f00a ffb2 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22e0:	4621      	mov	r1, r4
    22e2:	f00a ffb7 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    22e6:	4606      	mov	r6, r0
									+ String(channel_1_pwm)
    22e8:	220a      	movs	r2, #10
    22ea:	4b7e      	ldr	r3, [pc, #504]	; (24e4 <getDataString()+0x378>)
    22ec:	6819      	ldr	r1, [r3, #0]
    22ee:	a836      	add	r0, sp, #216	; 0xd8
    22f0:	f00a ff49 	bl	d186 <String::String(int, unsigned char)>
    22f4:	a936      	add	r1, sp, #216	; 0xd8
    22f6:	4630      	mov	r0, r6
    22f8:	f00a ffa4 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22fc:	4621      	mov	r1, r4
    22fe:	f00a ffa9 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2302:	4606      	mov	r6, r0
									+ String(channel_2_pwm)
    2304:	220a      	movs	r2, #10
    2306:	4b78      	ldr	r3, [pc, #480]	; (24e8 <getDataString()+0x37c>)
    2308:	6819      	ldr	r1, [r3, #0]
    230a:	a83a      	add	r0, sp, #232	; 0xe8
    230c:	f00a ff3b 	bl	d186 <String::String(int, unsigned char)>
    2310:	a93a      	add	r1, sp, #232	; 0xe8
    2312:	4630      	mov	r0, r6
    2314:	f00a ff96 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2318:	4621      	mov	r1, r4
    231a:	f00a ff9b 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    231e:	4606      	mov	r6, r0
									+ String(channel_3_pwm)
    2320:	220a      	movs	r2, #10
    2322:	4b72      	ldr	r3, [pc, #456]	; (24ec <getDataString()+0x380>)
    2324:	6819      	ldr	r1, [r3, #0]
    2326:	a83e      	add	r0, sp, #248	; 0xf8
    2328:	f00a ff2d 	bl	d186 <String::String(int, unsigned char)>
    232c:	a93e      	add	r1, sp, #248	; 0xf8
    232e:	4630      	mov	r0, r6
    2330:	f00a ff88 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2334:	4621      	mov	r1, r4
    2336:	f00a ff8d 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    233a:	4606      	mov	r6, r0
									+ String(channel_4_pwm)
    233c:	220a      	movs	r2, #10
    233e:	4b6c      	ldr	r3, [pc, #432]	; (24f0 <getDataString()+0x384>)
    2340:	6819      	ldr	r1, [r3, #0]
    2342:	a842      	add	r0, sp, #264	; 0x108
    2344:	f00a ff1f 	bl	d186 <String::String(int, unsigned char)>
    2348:	a942      	add	r1, sp, #264	; 0x108
    234a:	4630      	mov	r0, r6
    234c:	f00a ff7a 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2350:	4621      	mov	r1, r4
    2352:	f00a ff7f 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2356:	4606      	mov	r6, r0
									+ String(channel_5_pwm)
    2358:	220a      	movs	r2, #10
    235a:	4b66      	ldr	r3, [pc, #408]	; (24f4 <getDataString()+0x388>)
    235c:	6819      	ldr	r1, [r3, #0]
    235e:	a846      	add	r0, sp, #280	; 0x118
    2360:	f00a ff11 	bl	d186 <String::String(int, unsigned char)>
    2364:	a946      	add	r1, sp, #280	; 0x118
    2366:	4630      	mov	r0, r6
    2368:	f00a ff6c 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    236c:	4621      	mov	r1, r4
    236e:	f00a ff71 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2372:	4606      	mov	r6, r0
									+ String(channel_6_pwm)
    2374:	220a      	movs	r2, #10
    2376:	4b60      	ldr	r3, [pc, #384]	; (24f8 <getDataString()+0x38c>)
    2378:	6819      	ldr	r1, [r3, #0]
    237a:	a84a      	add	r0, sp, #296	; 0x128
    237c:	f00a ff03 	bl	d186 <String::String(int, unsigned char)>
    2380:	a94a      	add	r1, sp, #296	; 0x128
    2382:	4630      	mov	r0, r6
    2384:	f00a ff5e 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2388:	4621      	mov	r1, r4
    238a:	f00a ff63 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    238e:	4606      	mov	r6, r0
									+ String(channel_7_pwm)
    2390:	220a      	movs	r2, #10
    2392:	4b5a      	ldr	r3, [pc, #360]	; (24fc <getDataString()+0x390>)
    2394:	6819      	ldr	r1, [r3, #0]
    2396:	a84e      	add	r0, sp, #312	; 0x138
    2398:	f00a fef5 	bl	d186 <String::String(int, unsigned char)>
    239c:	a94e      	add	r1, sp, #312	; 0x138
    239e:	4630      	mov	r0, r6
    23a0:	f00a ff50 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23a4:	4621      	mov	r1, r4
    23a6:	f00a ff55 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    23aa:	4606      	mov	r6, r0
									+ String(channel_8_pwm)
    23ac:	220a      	movs	r2, #10
    23ae:	4b54      	ldr	r3, [pc, #336]	; (2500 <getDataString()+0x394>)
    23b0:	6819      	ldr	r1, [r3, #0]
    23b2:	a852      	add	r0, sp, #328	; 0x148
    23b4:	f00a fee7 	bl	d186 <String::String(int, unsigned char)>
    23b8:	a952      	add	r1, sp, #328	; 0x148
    23ba:	4630      	mov	r0, r6
    23bc:	f00a ff42 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23c0:	4621      	mov	r1, r4
    23c2:	f00a ff47 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    23c6:	4606      	mov	r6, r0
									+ String(channel_9_pwm)
    23c8:	220a      	movs	r2, #10
    23ca:	4b4e      	ldr	r3, [pc, #312]	; (2504 <getDataString()+0x398>)
    23cc:	6819      	ldr	r1, [r3, #0]
    23ce:	a856      	add	r0, sp, #344	; 0x158
    23d0:	f00a fed9 	bl	d186 <String::String(int, unsigned char)>
    23d4:	a956      	add	r1, sp, #344	; 0x158
    23d6:	4630      	mov	r0, r6
    23d8:	f00a ff34 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23dc:	4621      	mov	r1, r4
    23de:	f00a ff39 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    23e2:	4606      	mov	r6, r0
									+ String(channel_10_pwm)
    23e4:	220a      	movs	r2, #10
    23e6:	4b48      	ldr	r3, [pc, #288]	; (2508 <getDataString()+0x39c>)
    23e8:	6819      	ldr	r1, [r3, #0]
    23ea:	a85a      	add	r0, sp, #360	; 0x168
    23ec:	f00a fecb 	bl	d186 <String::String(int, unsigned char)>
    23f0:	a95a      	add	r1, sp, #360	; 0x168
    23f2:	4630      	mov	r0, r6
    23f4:	f00a ff26 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23f8:	4621      	mov	r1, r4
    23fa:	f00a ff2b 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    23fe:	4606      	mov	r6, r0
									+ String(channel_11_pwm)
    2400:	220a      	movs	r2, #10
    2402:	4b42      	ldr	r3, [pc, #264]	; (250c <getDataString()+0x3a0>)
    2404:	6819      	ldr	r1, [r3, #0]
    2406:	a85e      	add	r0, sp, #376	; 0x178
    2408:	f00a febd 	bl	d186 <String::String(int, unsigned char)>
    240c:	a95e      	add	r1, sp, #376	; 0x178
    240e:	4630      	mov	r0, r6
    2410:	f00a ff18 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2414:	4621      	mov	r1, r4
    2416:	f00a ff1d 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    241a:	4606      	mov	r6, r0
									+ String(channel_12_pwm)
    241c:	220a      	movs	r2, #10
    241e:	4b3c      	ldr	r3, [pc, #240]	; (2510 <getDataString()+0x3a4>)
    2420:	6819      	ldr	r1, [r3, #0]
    2422:	a862      	add	r0, sp, #392	; 0x188
    2424:	f00a feaf 	bl	d186 <String::String(int, unsigned char)>
    2428:	a962      	add	r1, sp, #392	; 0x188
    242a:	4630      	mov	r0, r6
    242c:	f00a ff0a 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2430:	4621      	mov	r1, r4
    2432:	f00a ff0f 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2436:	4606      	mov	r6, r0
									+ String(channel_13_pwm)
    2438:	220a      	movs	r2, #10
    243a:	4b36      	ldr	r3, [pc, #216]	; (2514 <getDataString()+0x3a8>)
    243c:	6819      	ldr	r1, [r3, #0]
    243e:	a866      	add	r0, sp, #408	; 0x198
    2440:	f00a fea1 	bl	d186 <String::String(int, unsigned char)>
    2444:	a966      	add	r1, sp, #408	; 0x198
    2446:	4630      	mov	r0, r6
    2448:	f00a fefc 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    244c:	4621      	mov	r1, r4
    244e:	f00a ff01 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2452:	4606      	mov	r6, r0
									+ String(GyroX)
    2454:	2102      	movs	r1, #2
    2456:	4b30      	ldr	r3, [pc, #192]	; (2518 <getDataString()+0x3ac>)
    2458:	ed93 0a00 	vldr	s0, [r3]
    245c:	a86a      	add	r0, sp, #424	; 0x1a8
    245e:	f00a fea5 	bl	d1ac <String::String(float, unsigned char)>
    2462:	a96a      	add	r1, sp, #424	; 0x1a8
    2464:	4630      	mov	r0, r6
    2466:	f00a feed 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    246a:	4621      	mov	r1, r4
    246c:	f00a fef2 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2470:	4606      	mov	r6, r0
									+ String(GyroY)
    2472:	2102      	movs	r1, #2
    2474:	4b29      	ldr	r3, [pc, #164]	; (251c <getDataString()+0x3b0>)
    2476:	ed93 0a00 	vldr	s0, [r3]
    247a:	a86e      	add	r0, sp, #440	; 0x1b8
    247c:	f00a fe96 	bl	d1ac <String::String(float, unsigned char)>
    2480:	a96e      	add	r1, sp, #440	; 0x1b8
    2482:	4630      	mov	r0, r6
    2484:	f00a fede 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2488:	4621      	mov	r1, r4
    248a:	f00a fee3 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    248e:	4606      	mov	r6, r0
									+ String(GyroZ)
    2490:	2102      	movs	r1, #2
    2492:	4b23      	ldr	r3, [pc, #140]	; (2520 <getDataString()+0x3b4>)
    2494:	ed93 0a00 	vldr	s0, [r3]
    2498:	a872      	add	r0, sp, #456	; 0x1c8
    249a:	f00a fe87 	bl	d1ac <String::String(float, unsigned char)>
    249e:	a972      	add	r1, sp, #456	; 0x1c8
    24a0:	4630      	mov	r0, r6
    24a2:	f00a fecf 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    24a6:	4621      	mov	r1, r4
    24a8:	f00a fed4 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    24ac:	4606      	mov	r6, r0
    24ae:	e039      	b.n	2524 <getDataString()+0x3b8>
    24b0:	200055e0 	.word	0x200055e0
    24b4:	20001d24 	.word	0x20001d24
    24b8:	200055b4 	.word	0x200055b4
    24bc:	20005818 	.word	0x20005818
    24c0:	2000544c 	.word	0x2000544c
    24c4:	20005460 	.word	0x20005460
    24c8:	200055e8 	.word	0x200055e8
    24cc:	200055bc 	.word	0x200055bc
    24d0:	20005820 	.word	0x20005820
    24d4:	20005800 	.word	0x20005800
    24d8:	200055e4 	.word	0x200055e4
    24dc:	200055b8 	.word	0x200055b8
    24e0:	2000581c 	.word	0x2000581c
    24e4:	2000549c 	.word	0x2000549c
    24e8:	200054a8 	.word	0x200054a8
    24ec:	200054b4 	.word	0x200054b4
    24f0:	200054c0 	.word	0x200054c0
    24f4:	200054cc 	.word	0x200054cc
    24f8:	200054d0 	.word	0x200054d0
    24fc:	200054d4 	.word	0x200054d4
    2500:	200054d8 	.word	0x200054d8
    2504:	200054dc 	.word	0x200054dc
    2508:	2000548c 	.word	0x2000548c
    250c:	20005490 	.word	0x20005490
    2510:	20005494 	.word	0x20005494
    2514:	20005498 	.word	0x20005498
    2518:	20004548 	.word	0x20004548
    251c:	20004550 	.word	0x20004550
    2520:	20004558 	.word	0x20004558
									+ String(AccX)
    2524:	2102      	movs	r1, #2
    2526:	4bcf      	ldr	r3, [pc, #828]	; (2864 <getDataString()+0x6f8>)
    2528:	ed93 0a00 	vldr	s0, [r3]
    252c:	a876      	add	r0, sp, #472	; 0x1d8
    252e:	f00a fe3d 	bl	d1ac <String::String(float, unsigned char)>
    2532:	a976      	add	r1, sp, #472	; 0x1d8
    2534:	4630      	mov	r0, r6
    2536:	f00a fe85 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    253a:	4621      	mov	r1, r4
    253c:	f00a fe8a 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2540:	4606      	mov	r6, r0
									+ String(AccY)
    2542:	2102      	movs	r1, #2
    2544:	4bc8      	ldr	r3, [pc, #800]	; (2868 <getDataString()+0x6fc>)
    2546:	ed93 0a00 	vldr	s0, [r3]
    254a:	a87a      	add	r0, sp, #488	; 0x1e8
    254c:	f00a fe2e 	bl	d1ac <String::String(float, unsigned char)>
    2550:	a97a      	add	r1, sp, #488	; 0x1e8
    2552:	4630      	mov	r0, r6
    2554:	f00a fe76 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2558:	4621      	mov	r1, r4
    255a:	f00a fe7b 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    255e:	4606      	mov	r6, r0
									+ String(AccZ)
    2560:	2102      	movs	r1, #2
    2562:	4bc2      	ldr	r3, [pc, #776]	; (286c <getDataString()+0x700>)
    2564:	ed93 0a00 	vldr	s0, [r3]
    2568:	a87e      	add	r0, sp, #504	; 0x1f8
    256a:	f00a fe1f 	bl	d1ac <String::String(float, unsigned char)>
    256e:	a97e      	add	r1, sp, #504	; 0x1f8
    2570:	4630      	mov	r0, r6
    2572:	f00a fe67 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2576:	4621      	mov	r1, r4
    2578:	f00a fe6c 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    257c:	4606      	mov	r6, r0
									+ String(s1_command_scaled)
    257e:	2102      	movs	r1, #2
    2580:	4bbb      	ldr	r3, [pc, #748]	; (2870 <getDataString()+0x704>)
    2582:	ed93 0a00 	vldr	s0, [r3]
    2586:	a882      	add	r0, sp, #520	; 0x208
    2588:	f00a fe10 	bl	d1ac <String::String(float, unsigned char)>
    258c:	a982      	add	r1, sp, #520	; 0x208
    258e:	4630      	mov	r0, r6
    2590:	f00a fe58 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2594:	4621      	mov	r1, r4
    2596:	f00a fe5d 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    259a:	4606      	mov	r6, r0
									+ String(s2_command_scaled)
    259c:	2102      	movs	r1, #2
    259e:	4bb5      	ldr	r3, [pc, #724]	; (2874 <getDataString()+0x708>)
    25a0:	ed93 0a00 	vldr	s0, [r3]
    25a4:	a886      	add	r0, sp, #536	; 0x218
    25a6:	f00a fe01 	bl	d1ac <String::String(float, unsigned char)>
    25aa:	a986      	add	r1, sp, #536	; 0x218
    25ac:	4630      	mov	r0, r6
    25ae:	f00a fe49 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    25b2:	4621      	mov	r1, r4
    25b4:	f00a fe4e 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    25b8:	4606      	mov	r6, r0
									+ String(s3_command_scaled)
    25ba:	2102      	movs	r1, #2
    25bc:	4bae      	ldr	r3, [pc, #696]	; (2878 <getDataString()+0x70c>)
    25be:	ed93 0a00 	vldr	s0, [r3]
    25c2:	a88a      	add	r0, sp, #552	; 0x228
    25c4:	f00a fdf2 	bl	d1ac <String::String(float, unsigned char)>
    25c8:	a98a      	add	r1, sp, #552	; 0x228
    25ca:	4630      	mov	r0, r6
    25cc:	f00a fe3a 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    25d0:	4621      	mov	r1, r4
    25d2:	f00a fe3f 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    25d6:	4606      	mov	r6, r0
									+ String(s4_command_scaled)
    25d8:	2102      	movs	r1, #2
    25da:	4ba8      	ldr	r3, [pc, #672]	; (287c <getDataString()+0x710>)
    25dc:	ed93 0a00 	vldr	s0, [r3]
    25e0:	a88e      	add	r0, sp, #568	; 0x238
    25e2:	f00a fde3 	bl	d1ac <String::String(float, unsigned char)>
    25e6:	a98e      	add	r1, sp, #568	; 0x238
    25e8:	4630      	mov	r0, r6
    25ea:	f00a fe2b 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    25ee:	4621      	mov	r1, r4
    25f0:	f00a fe30 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    25f4:	4606      	mov	r6, r0
									+ String(P_gains(2,2)*P_gainScale(2,2))
    25f6:	f8df b294 	ldr.w	fp, [pc, #660]	; 288c <getDataString()+0x720>
    25fa:	f8df a294 	ldr.w	sl, [pc, #660]	; 2890 <getDataString()+0x724>
    25fe:	ed9b 0a08 	vldr	s0, [fp, #32]
    2602:	edda 7a08 	vldr	s15, [sl, #32]
    2606:	2102      	movs	r1, #2
    2608:	ee20 0a27 	vmul.f32	s0, s0, s15
    260c:	a892      	add	r0, sp, #584	; 0x248
    260e:	f00a fdcd 	bl	d1ac <String::String(float, unsigned char)>
    2612:	a992      	add	r1, sp, #584	; 0x248
    2614:	4630      	mov	r0, r6
    2616:	f00a fe15 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    261a:	4621      	mov	r1, r4
    261c:	f00a fe1a 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2620:	4606      	mov	r6, r0
									+ String(I_gains(2,2)*I_gainScale(2,2))
    2622:	f8df 9270 	ldr.w	r9, [pc, #624]	; 2894 <getDataString()+0x728>
    2626:	f8df 8270 	ldr.w	r8, [pc, #624]	; 2898 <getDataString()+0x72c>
    262a:	ed99 0a08 	vldr	s0, [r9, #32]
    262e:	edd8 7a08 	vldr	s15, [r8, #32]
    2632:	2102      	movs	r1, #2
    2634:	ee20 0a27 	vmul.f32	s0, s0, s15
    2638:	a896      	add	r0, sp, #600	; 0x258
    263a:	f00a fdb7 	bl	d1ac <String::String(float, unsigned char)>
    263e:	a996      	add	r1, sp, #600	; 0x258
    2640:	4630      	mov	r0, r6
    2642:	f00a fdff 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2646:	4621      	mov	r1, r4
    2648:	f00a fe04 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    264c:	9001      	str	r0, [sp, #4]
									+ String(D_gains(2,2)*D_gainScale(2,2))	
    264e:	4f8c      	ldr	r7, [pc, #560]	; (2880 <getDataString()+0x714>)
    2650:	4e8c      	ldr	r6, [pc, #560]	; (2884 <getDataString()+0x718>)
    2652:	ed97 0a08 	vldr	s0, [r7, #32]
    2656:	edd6 7a08 	vldr	s15, [r6, #32]
    265a:	2102      	movs	r1, #2
    265c:	ee20 0a27 	vmul.f32	s0, s0, s15
    2660:	ab9a      	add	r3, sp, #616	; 0x268
    2662:	4618      	mov	r0, r3
    2664:	f00a fda2 	bl	d1ac <String::String(float, unsigned char)>
    2668:	a99a      	add	r1, sp, #616	; 0x268
    266a:	9801      	ldr	r0, [sp, #4]
    266c:	f00a fdea 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2670:	4621      	mov	r1, r4
    2672:	f00a fdef 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2676:	9001      	str	r0, [sp, #4]
									+ String(P_gains(0,0)*P_gainScale(0,0))
    2678:	ed9b 0a00 	vldr	s0, [fp]
    267c:	edda 7a00 	vldr	s15, [sl]
    2680:	2102      	movs	r1, #2
    2682:	ee20 0a27 	vmul.f32	s0, s0, s15
    2686:	ab9e      	add	r3, sp, #632	; 0x278
    2688:	4618      	mov	r0, r3
    268a:	f00a fd8f 	bl	d1ac <String::String(float, unsigned char)>
    268e:	a99e      	add	r1, sp, #632	; 0x278
    2690:	9801      	ldr	r0, [sp, #4]
    2692:	f00a fdd7 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2696:	4621      	mov	r1, r4
    2698:	f00a fddc 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    269c:	9001      	str	r0, [sp, #4]
									+ String(I_gains(0,0)*I_gainScale(0,0))
    269e:	ed99 0a00 	vldr	s0, [r9]
    26a2:	edd8 7a00 	vldr	s15, [r8]
    26a6:	2102      	movs	r1, #2
    26a8:	ee20 0a27 	vmul.f32	s0, s0, s15
    26ac:	aba2      	add	r3, sp, #648	; 0x288
    26ae:	4618      	mov	r0, r3
    26b0:	f00a fd7c 	bl	d1ac <String::String(float, unsigned char)>
    26b4:	a9a2      	add	r1, sp, #648	; 0x288
    26b6:	9801      	ldr	r0, [sp, #4]
    26b8:	f00a fdc4 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    26bc:	4621      	mov	r1, r4
    26be:	f00a fdc9 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    26c2:	9001      	str	r0, [sp, #4]
									+ String(D_gains(0,0)*D_gainScale(0,0))	
    26c4:	ed97 0a00 	vldr	s0, [r7]
    26c8:	edd6 7a00 	vldr	s15, [r6]
    26cc:	2102      	movs	r1, #2
    26ce:	ee20 0a27 	vmul.f32	s0, s0, s15
    26d2:	aba6      	add	r3, sp, #664	; 0x298
    26d4:	4618      	mov	r0, r3
    26d6:	f00a fd69 	bl	d1ac <String::String(float, unsigned char)>
    26da:	a9a6      	add	r1, sp, #664	; 0x298
    26dc:	9801      	ldr	r0, [sp, #4]
    26de:	f00a fdb1 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    26e2:	4621      	mov	r1, r4
    26e4:	f00a fdb6 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    26e8:	9001      	str	r0, [sp, #4]
									+ String(P_gains(1,1)*P_gainScale(1,1))
    26ea:	ed9b 0a04 	vldr	s0, [fp, #16]
    26ee:	edda 7a04 	vldr	s15, [sl, #16]
    26f2:	2102      	movs	r1, #2
    26f4:	ee20 0a27 	vmul.f32	s0, s0, s15
    26f8:	abaa      	add	r3, sp, #680	; 0x2a8
    26fa:	4618      	mov	r0, r3
    26fc:	f00a fd56 	bl	d1ac <String::String(float, unsigned char)>
    2700:	a9aa      	add	r1, sp, #680	; 0x2a8
    2702:	9801      	ldr	r0, [sp, #4]
    2704:	f00a fd9e 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2708:	4621      	mov	r1, r4
    270a:	f00a fda3 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    270e:	4682      	mov	sl, r0
									+ String(I_gains(1,1)*I_gainScale(1,1))
    2710:	ed99 0a04 	vldr	s0, [r9, #16]
    2714:	edd8 7a04 	vldr	s15, [r8, #16]
    2718:	2102      	movs	r1, #2
    271a:	ee20 0a27 	vmul.f32	s0, s0, s15
    271e:	a8ae      	add	r0, sp, #696	; 0x2b8
    2720:	f00a fd44 	bl	d1ac <String::String(float, unsigned char)>
    2724:	a9ae      	add	r1, sp, #696	; 0x2b8
    2726:	4650      	mov	r0, sl
    2728:	f00a fd8c 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    272c:	4621      	mov	r1, r4
    272e:	f00a fd91 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2732:	4680      	mov	r8, r0
									+ String(D_gains(1,1)*D_gainScale(1,1))
    2734:	ed97 0a04 	vldr	s0, [r7, #16]
    2738:	edd6 7a04 	vldr	s15, [r6, #16]
    273c:	2102      	movs	r1, #2
    273e:	ee20 0a27 	vmul.f32	s0, s0, s15
    2742:	a8b2      	add	r0, sp, #712	; 0x2c8
    2744:	f00a fd32 	bl	d1ac <String::String(float, unsigned char)>
    2748:	a9b2      	add	r1, sp, #712	; 0x2c8
    274a:	4640      	mov	r0, r8
    274c:	f00a fd7a 	bl	d244 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2750:	4621      	mov	r1, r4
    2752:	f00a fd7f 	bl	d254 <operator+(StringSumHelper const&, char const*)>
    2756:	4604      	mov	r4, r0
									+ String(failureFlag);	
    2758:	220a      	movs	r2, #10
    275a:	4b4b      	ldr	r3, [pc, #300]	; (2888 <getDataString()+0x71c>)
    275c:	7819      	ldrb	r1, [r3, #0]
    275e:	a8b6      	add	r0, sp, #728	; 0x2d8
    2760:	f00a fd11 	bl	d186 <String::String(int, unsigned char)>
    2764:	a9b6      	add	r1, sp, #728	; 0x2d8
    2766:	4620      	mov	r0, r4
    2768:	f00a fd6c 	bl	d244 <operator+(StringSumHelper const&, String const&)>
    276c:	4601      	mov	r1, r0
    276e:	4628      	mov	r0, r5
    2770:	f00a fcdb 	bl	d12a <String::operator=(String const&)>
    2774:	a8b6      	add	r0, sp, #728	; 0x2d8
    2776:	f00a fc67 	bl	d048 <String::~String()>
									+ String(D_gains(1,1)*D_gainScale(1,1))
    277a:	a8b2      	add	r0, sp, #712	; 0x2c8
    277c:	f00a fc64 	bl	d048 <String::~String()>
									+ String(I_gains(1,1)*I_gainScale(1,1))
    2780:	a8ae      	add	r0, sp, #696	; 0x2b8
    2782:	f00a fc61 	bl	d048 <String::~String()>
									+ String(P_gains(1,1)*P_gainScale(1,1))
    2786:	a8aa      	add	r0, sp, #680	; 0x2a8
    2788:	f00a fc5e 	bl	d048 <String::~String()>
									+ String(D_gains(0,0)*D_gainScale(0,0))	
    278c:	a8a6      	add	r0, sp, #664	; 0x298
    278e:	f00a fc5b 	bl	d048 <String::~String()>
									+ String(I_gains(0,0)*I_gainScale(0,0))
    2792:	a8a2      	add	r0, sp, #648	; 0x288
    2794:	f00a fc58 	bl	d048 <String::~String()>
									+ String(P_gains(0,0)*P_gainScale(0,0))
    2798:	a89e      	add	r0, sp, #632	; 0x278
    279a:	f00a fc55 	bl	d048 <String::~String()>
									+ String(D_gains(2,2)*D_gainScale(2,2))	
    279e:	a89a      	add	r0, sp, #616	; 0x268
    27a0:	f00a fc52 	bl	d048 <String::~String()>
									+ String(I_gains(2,2)*I_gainScale(2,2))
    27a4:	a896      	add	r0, sp, #600	; 0x258
    27a6:	f00a fc4f 	bl	d048 <String::~String()>
									+ String(P_gains(2,2)*P_gainScale(2,2))
    27aa:	a892      	add	r0, sp, #584	; 0x248
    27ac:	f00a fc4c 	bl	d048 <String::~String()>
									+ String(s4_command_scaled)
    27b0:	a88e      	add	r0, sp, #568	; 0x238
    27b2:	f00a fc49 	bl	d048 <String::~String()>
									+ String(s3_command_scaled)
    27b6:	a88a      	add	r0, sp, #552	; 0x228
    27b8:	f00a fc46 	bl	d048 <String::~String()>
									+ String(s2_command_scaled)
    27bc:	a886      	add	r0, sp, #536	; 0x218
    27be:	f00a fc43 	bl	d048 <String::~String()>
									+ String(s1_command_scaled)
    27c2:	a882      	add	r0, sp, #520	; 0x208
    27c4:	f00a fc40 	bl	d048 <String::~String()>
									+ String(AccZ)
    27c8:	a87e      	add	r0, sp, #504	; 0x1f8
    27ca:	f00a fc3d 	bl	d048 <String::~String()>
									+ String(AccY)
    27ce:	a87a      	add	r0, sp, #488	; 0x1e8
    27d0:	f00a fc3a 	bl	d048 <String::~String()>
									+ String(AccX)
    27d4:	a876      	add	r0, sp, #472	; 0x1d8
    27d6:	f00a fc37 	bl	d048 <String::~String()>
									+ String(GyroZ)
    27da:	a872      	add	r0, sp, #456	; 0x1c8
    27dc:	f00a fc34 	bl	d048 <String::~String()>
									+ String(GyroY)
    27e0:	a86e      	add	r0, sp, #440	; 0x1b8
    27e2:	f00a fc31 	bl	d048 <String::~String()>
									+ String(GyroX)
    27e6:	a86a      	add	r0, sp, #424	; 0x1a8
    27e8:	f00a fc2e 	bl	d048 <String::~String()>
									+ String(channel_13_pwm)
    27ec:	a866      	add	r0, sp, #408	; 0x198
    27ee:	f00a fc2b 	bl	d048 <String::~String()>
									+ String(channel_12_pwm)
    27f2:	a862      	add	r0, sp, #392	; 0x188
    27f4:	f00a fc28 	bl	d048 <String::~String()>
									+ String(channel_11_pwm)
    27f8:	a85e      	add	r0, sp, #376	; 0x178
    27fa:	f00a fc25 	bl	d048 <String::~String()>
									+ String(channel_10_pwm)
    27fe:	a85a      	add	r0, sp, #360	; 0x168
    2800:	f00a fc22 	bl	d048 <String::~String()>
									+ String(channel_9_pwm)
    2804:	a856      	add	r0, sp, #344	; 0x158
    2806:	f00a fc1f 	bl	d048 <String::~String()>
									+ String(channel_8_pwm)
    280a:	a852      	add	r0, sp, #328	; 0x148
    280c:	f00a fc1c 	bl	d048 <String::~String()>
									+ String(channel_7_pwm)
    2810:	a84e      	add	r0, sp, #312	; 0x138
    2812:	f00a fc19 	bl	d048 <String::~String()>
									+ String(channel_6_pwm)
    2816:	a84a      	add	r0, sp, #296	; 0x128
    2818:	f00a fc16 	bl	d048 <String::~String()>
									+ String(channel_5_pwm)
    281c:	a846      	add	r0, sp, #280	; 0x118
    281e:	f00a fc13 	bl	d048 <String::~String()>
									+ String(channel_4_pwm)
    2822:	a842      	add	r0, sp, #264	; 0x108
    2824:	f00a fc10 	bl	d048 <String::~String()>
									+ String(channel_3_pwm)
    2828:	a83e      	add	r0, sp, #248	; 0xf8
    282a:	f00a fc0d 	bl	d048 <String::~String()>
									+ String(channel_2_pwm)
    282e:	a83a      	add	r0, sp, #232	; 0xe8
    2830:	f00a fc0a 	bl	d048 <String::~String()>
									+ String(channel_1_pwm)
    2834:	a836      	add	r0, sp, #216	; 0xd8
    2836:	f00a fc07 	bl	d048 <String::~String()>
									+ String(yaw_PID)
    283a:	a832      	add	r0, sp, #200	; 0xc8
    283c:	f00a fc04 	bl	d048 <String::~String()>
									+ String(pitch_PID)
    2840:	a82e      	add	r0, sp, #184	; 0xb8
    2842:	f00a fc01 	bl	d048 <String::~String()>
									+ String(roll_PID)
    2846:	a82a      	add	r0, sp, #168	; 0xa8
    2848:	f00a fbfe 	bl	d048 <String::~String()>
									+ String(thro_des)
    284c:	a826      	add	r0, sp, #152	; 0x98
    284e:	f00a fbfb 	bl	d048 <String::~String()>
									+ String(yaw_des)
    2852:	a822      	add	r0, sp, #136	; 0x88
    2854:	f00a fbf8 	bl	d048 <String::~String()>
									+ String(pitch_des)
    2858:	a81e      	add	r0, sp, #120	; 0x78
    285a:	f00a fbf5 	bl	d048 <String::~String()>
									+ String(roll_des)
    285e:	a81a      	add	r0, sp, #104	; 0x68
    2860:	e01c      	b.n	289c <getDataString()+0x730>
    2862:	bf00      	nop
    2864:	200044e8 	.word	0x200044e8
    2868:	200044f0 	.word	0x200044f0
    286c:	200044f8 	.word	0x200044f8
    2870:	20005624 	.word	0x20005624
    2874:	2000562c 	.word	0x2000562c
    2878:	20005634 	.word	0x20005634
    287c:	2000563c 	.word	0x2000563c
    2880:	20004524 	.word	0x20004524
    2884:	20004500 	.word	0x20004500
    2888:	2000583d 	.word	0x2000583d
    288c:	20004608 	.word	0x20004608
    2890:	200045e4 	.word	0x200045e4
    2894:	20004584 	.word	0x20004584
    2898:	20004560 	.word	0x20004560
    289c:	f00a fbd4 	bl	d048 <String::~String()>
									+ String(beta)
    28a0:	a816      	add	r0, sp, #88	; 0x58
    28a2:	f00a fbd1 	bl	d048 <String::~String()>
									+ String(alpha)
    28a6:	a812      	add	r0, sp, #72	; 0x48
    28a8:	f00a fbce 	bl	d048 <String::~String()>
									+ String(yaw_IMU)
    28ac:	a80e      	add	r0, sp, #56	; 0x38
    28ae:	f00a fbcb 	bl	d048 <String::~String()>
									+ String(pitch_IMU)
    28b2:	a80a      	add	r0, sp, #40	; 0x28
    28b4:	f00a fbc8 	bl	d048 <String::~String()>
class StringSumHelper : public String
    28b8:	a802      	add	r0, sp, #8
    28ba:	f00a fbc5 	bl	d048 <String::~String()>
	csvDataString = String(roll_IMU)
    28be:	a806      	add	r0, sp, #24
    28c0:	f00a fbc2 	bl	d048 <String::~String()>
	return csvDataString;
}
    28c4:	4628      	mov	r0, r5
    28c6:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    28ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    28ce:	bf00      	nop

000028d0 <getPScale()>:
	}
}

void getPScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_10_pwm - 1500.0f)/500.0f * 0.8f;
    28d0:	4b0d      	ldr	r3, [pc, #52]	; (2908 <getPScale()+0x38>)
    28d2:	ed93 7a00 	vldr	s14, [r3]
    28d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    28da:	eddf 7a0c 	vldr	s15, [pc, #48]	; 290c <getPScale()+0x3c>
    28de:	ee37 7a67 	vsub.f32	s14, s14, s15
    28e2:	eddf 6a0b 	vldr	s13, [pc, #44]	; 2910 <getPScale()+0x40>
    28e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
    28ea:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2914 <getPScale()+0x44>
    28ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    28f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    28f6:	ee77 7a87 	vadd.f32	s15, s15, s14
	P_gainScale(0,0) = scaleVal;
    28fa:	4b07      	ldr	r3, [pc, #28]	; (2918 <getPScale()+0x48>)
    28fc:	edc3 7a00 	vstr	s15, [r3]
	P_gainScale(2,2) = scaleVal;
    2900:	edc3 7a08 	vstr	s15, [r3, #32]
}
    2904:	4770      	bx	lr
    2906:	bf00      	nop
    2908:	2000548c 	.word	0x2000548c
    290c:	44bb8000 	.word	0x44bb8000
    2910:	43fa0000 	.word	0x43fa0000
    2914:	3f4ccccd 	.word	0x3f4ccccd
    2918:	200045e4 	.word	0x200045e4

0000291c <getDScale()>:

void getDScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_12_pwm - 1500.0f)/500.0f * 0.8f;
    291c:	4b0d      	ldr	r3, [pc, #52]	; (2954 <getDScale()+0x38>)
    291e:	ed93 7a00 	vldr	s14, [r3]
    2922:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2926:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2958 <getDScale()+0x3c>
    292a:	ee37 7a67 	vsub.f32	s14, s14, s15
    292e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 295c <getDScale()+0x40>
    2932:	eec7 7a26 	vdiv.f32	s15, s14, s13
    2936:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2960 <getDScale()+0x44>
    293a:	ee67 7a87 	vmul.f32	s15, s15, s14
    293e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2942:	ee77 7a87 	vadd.f32	s15, s15, s14
	D_gainScale(0,0) = scaleVal;
    2946:	4b07      	ldr	r3, [pc, #28]	; (2964 <getDScale()+0x48>)
    2948:	edc3 7a00 	vstr	s15, [r3]
	D_gainScale(2,2) = scaleVal;
    294c:	edc3 7a08 	vstr	s15, [r3, #32]

}
    2950:	4770      	bx	lr
    2952:	bf00      	nop
    2954:	20005494 	.word	0x20005494
    2958:	44bb8000 	.word	0x44bb8000
    295c:	43fa0000 	.word	0x43fa0000
    2960:	3f4ccccd 	.word	0x3f4ccccd
    2964:	20004500 	.word	0x20004500

00002968 <getIScale()>:

void getIScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_11_pwm - 1500.0f)/500.0f * 0.8f;
    2968:	4b0d      	ldr	r3, [pc, #52]	; (29a0 <getIScale()+0x38>)
    296a:	ed93 7a00 	vldr	s14, [r3]
    296e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2972:	eddf 7a0c 	vldr	s15, [pc, #48]	; 29a4 <getIScale()+0x3c>
    2976:	ee37 7a67 	vsub.f32	s14, s14, s15
    297a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 29a8 <getIScale()+0x40>
    297e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    2982:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 29ac <getIScale()+0x44>
    2986:	ee67 7a87 	vmul.f32	s15, s15, s14
    298a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    298e:	ee77 7a87 	vadd.f32	s15, s15, s14
	I_gainScale(0,0) = scaleVal;
    2992:	4b07      	ldr	r3, [pc, #28]	; (29b0 <getIScale()+0x48>)
    2994:	edc3 7a00 	vstr	s15, [r3]
	I_gainScale(2,2) = scaleVal;
    2998:	edc3 7a08 	vstr	s15, [r3, #32]
}
    299c:	4770      	bx	lr
    299e:	bf00      	nop
    29a0:	20005490 	.word	0x20005490
    29a4:	44bb8000 	.word	0x44bb8000
    29a8:	43fa0000 	.word	0x43fa0000
    29ac:	3f4ccccd 	.word	0x3f4ccccd
    29b0:	20004560 	.word	0x20004560

000029b4 <invSqrt(float)>:
  unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
  float tmp = *(float*)&i;
  float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
  return y;
  */
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    29b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
    29b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29bc:	d406      	bmi.n	29cc <invSqrt(float)+0x18>
    29be:	eef1 7ac0 	vsqrt.f32	s15, s0
}
    29c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    29c6:	ee80 0a27 	vdiv.f32	s0, s0, s15
    29ca:	4770      	bx	lr
float invSqrt(float x) {
    29cc:	b508      	push	{r3, lr}
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    29ce:	f00c fe1b 	bl	f608 <sqrtf>
    29d2:	eef0 7a40 	vmov.f32	s15, s0
}
    29d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    29da:	ee80 0a27 	vdiv.f32	s0, s0, s15
    29de:	bd08      	pop	{r3, pc}

000029e0 <Madgwick6DOF(float, float, float, float, float, float, float)>:
void Madgwick6DOF(float gx, float gy, float gz, float ax, float ay, float az, float invSampleFreq) {
    29e0:	b508      	push	{r3, lr}
    29e2:	ed2d 8b0e 	vpush	{d8-d14}
    29e6:	eeb0 ba61 	vmov.f32	s22, s3
    29ea:	eef0 8a42 	vmov.f32	s17, s4
    29ee:	eeb0 ea62 	vmov.f32	s28, s5
    29f2:	eeb0 da43 	vmov.f32	s26, s6
  gx *= 0.0174533f;
    29f6:	eddf 7acc 	vldr	s15, [pc, #816]	; 2d28 <Madgwick6DOF(float, float, float, float, float, float, float)+0x348>
    29fa:	ee20 0a27 	vmul.f32	s0, s0, s15
  gy *= 0.0174533f;
    29fe:	ee60 0aa7 	vmul.f32	s1, s1, s15
  gz *= 0.0174533f;
    2a02:	ee21 1a27 	vmul.f32	s2, s2, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    2a06:	4bc9      	ldr	r3, [pc, #804]	; (2d2c <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2a08:	ed93 ca00 	vldr	s24, [r3]
    2a0c:	4bc8      	ldr	r3, [pc, #800]	; (2d30 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2a0e:	edd3 ba00 	vldr	s23, [r3]
    2a12:	4bc8      	ldr	r3, [pc, #800]	; (2d34 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    2a14:	edd3 ca00 	vldr	s25, [r3]
    2a18:	ee2c aa40 	vnmul.f32	s20, s24, s0
    2a1c:	ee6b 7aa0 	vmul.f32	s15, s23, s1
    2a20:	ee3a aa67 	vsub.f32	s20, s20, s15
    2a24:	ee6c 7a81 	vmul.f32	s15, s25, s2
    2a28:	ee3a aa67 	vsub.f32	s20, s20, s15
    2a2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2a30:	ee2a aa27 	vmul.f32	s20, s20, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    2a34:	4bc0      	ldr	r3, [pc, #768]	; (2d38 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    2a36:	edd3 da00 	vldr	s27, [r3]
    2a3a:	ee6d 9a80 	vmul.f32	s19, s27, s0
    2a3e:	ee2b 7a81 	vmul.f32	s14, s23, s2
    2a42:	ee79 9a87 	vadd.f32	s19, s19, s14
    2a46:	ee2c 7aa0 	vmul.f32	s14, s25, s1
    2a4a:	ee79 9ac7 	vsub.f32	s19, s19, s14
    2a4e:	ee69 9aa7 	vmul.f32	s19, s19, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    2a52:	ee6d aaa0 	vmul.f32	s21, s27, s1
    2a56:	ee2c 7a01 	vmul.f32	s14, s24, s2
    2a5a:	ee7a aac7 	vsub.f32	s21, s21, s14
    2a5e:	ee2c 7a80 	vmul.f32	s14, s25, s0
    2a62:	ee7a aa87 	vadd.f32	s21, s21, s14
    2a66:	ee6a aaa7 	vmul.f32	s21, s21, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    2a6a:	ee2d 9a81 	vmul.f32	s18, s27, s2
    2a6e:	ee6c 0a20 	vmul.f32	s1, s24, s1
    2a72:	ee39 9a20 	vadd.f32	s18, s18, s1
    2a76:	ee2b 0a80 	vmul.f32	s0, s23, s0
    2a7a:	ee39 9a40 	vsub.f32	s18, s18, s0
    2a7e:	ee29 9a27 	vmul.f32	s18, s18, s15
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    2a82:	eeb5 2a40 	vcmp.f32	s4, #0.0
    2a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a8a:	bf14      	ite	ne
    2a8c:	2301      	movne	r3, #1
    2a8e:	2300      	moveq	r3, #0
    2a90:	eef5 2a40 	vcmp.f32	s5, #0.0
    2a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a98:	bf18      	it	ne
    2a9a:	f043 0301 	orrne.w	r3, r3, #1
    2a9e:	b92b      	cbnz	r3, 2aac <Madgwick6DOF(float, float, float, float, float, float, float)+0xcc>
    2aa0:	eef5 1a40 	vcmp.f32	s3, #0.0
    2aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2aa8:	f000 80b5 	beq.w	2c16 <Madgwick6DOF(float, float, float, float, float, float, float)+0x236>
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    2aac:	ee6b 7a0b 	vmul.f32	s15, s22, s22
    2ab0:	ee28 7aa8 	vmul.f32	s14, s17, s17
    2ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
    2ab8:	ee2e 0a0e 	vmul.f32	s0, s28, s28
    2abc:	ee37 0a80 	vadd.f32	s0, s15, s0
    2ac0:	f7ff ff78 	bl	29b4 <invSqrt(float)>
    ax *= recipNorm;
    2ac4:	ee2b ba00 	vmul.f32	s22, s22, s0
    ay *= recipNorm;
    2ac8:	ee28 6a80 	vmul.f32	s12, s17, s0
    az *= recipNorm;
    2acc:	ee2e 0a00 	vmul.f32	s0, s28, s0
    _2q0 = 2.0f * q0;
    2ad0:	ee3d 2aad 	vadd.f32	s4, s27, s27
    _2q1 = 2.0f * q1;
    2ad4:	ee7c 4a0c 	vadd.f32	s9, s24, s24
    _2q2 = 2.0f * q2;
    2ad8:	ee3b 5aab 	vadd.f32	s10, s23, s23
    _2q3 = 2.0f * q3;
    2adc:	ee3c 3aac 	vadd.f32	s6, s25, s25
    _4q0 = 4.0f * q0;
    2ae0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    2ae4:	ee6d 7aa5 	vmul.f32	s15, s27, s11
    _4q1 = 4.0f * q1;
    2ae8:	ee6c 1a25 	vmul.f32	s3, s24, s11
    _4q2 = 4.0f * q2;
    2aec:	ee2b 4aa5 	vmul.f32	s8, s23, s11
    _8q1 = 8.0f * q1;
    2af0:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    2af4:	ee2c 1a23 	vmul.f32	s2, s24, s7
    _8q2 = 8.0f * q2;
    2af8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    q1q1 = q1 * q1;
    2afc:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    q2q2 = q2 * q2;
    2b00:	ee6b 6aab 	vmul.f32	s13, s23, s23
    q3q3 = q3 * q3;
    2b04:	ee6c 2aac 	vmul.f32	s5, s25, s25
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    2b08:	ee67 eaa6 	vmul.f32	s29, s15, s13
    2b0c:	ee6b 0a05 	vmul.f32	s1, s22, s10
    2b10:	ee7e eaa0 	vadd.f32	s29, s29, s1
    2b14:	ee67 7a87 	vmul.f32	s15, s15, s14
    2b18:	ee7e eaa7 	vadd.f32	s29, s29, s15
    2b1c:	ee66 7a24 	vmul.f32	s15, s12, s9
    2b20:	ee7e eae7 	vsub.f32	s29, s29, s15
    q0q0 = q0 * q0;
    2b24:	ee6d 7aad 	vmul.f32	s15, s27, s27
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    2b28:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2b2c:	ee21 eaa2 	vmul.f32	s28, s3, s5
    2b30:	ee6b 0a03 	vmul.f32	s1, s22, s6
    2b34:	ee3e ea60 	vsub.f32	s28, s28, s1
    2b38:	ee6c 0a27 	vmul.f32	s1, s24, s15
    2b3c:	ee3e ea20 	vadd.f32	s28, s28, s1
    2b40:	ee66 0a02 	vmul.f32	s1, s12, s4
    2b44:	ee3e ea60 	vsub.f32	s28, s28, s1
    2b48:	ee3e ea61 	vsub.f32	s28, s28, s3
    2b4c:	ee61 0a07 	vmul.f32	s1, s2, s14
    2b50:	ee3e ea20 	vadd.f32	s28, s28, s1
    2b54:	ee21 1a26 	vmul.f32	s2, s2, s13
    2b58:	ee3e ea01 	vadd.f32	s28, s28, s2
    2b5c:	ee60 1a21 	vmul.f32	s3, s0, s3
    2b60:	ee3e ea21 	vadd.f32	s28, s28, s3
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    2b64:	ee2b 8aa7 	vmul.f32	s16, s23, s15
    2b68:	ee2b 2a02 	vmul.f32	s4, s22, s4
    2b6c:	ee38 8a02 	vadd.f32	s16, s16, s4
    2b70:	ee64 2a22 	vmul.f32	s5, s8, s5
    2b74:	ee38 8a22 	vadd.f32	s16, s16, s5
    2b78:	ee26 3a03 	vmul.f32	s6, s12, s6
    2b7c:	ee38 8a43 	vsub.f32	s16, s16, s6
    2b80:	ee38 8a44 	vsub.f32	s16, s16, s8
    2b84:	ee63 7a87 	vmul.f32	s15, s7, s14
    2b88:	ee38 8a27 	vadd.f32	s16, s16, s15
    2b8c:	ee63 3aa6 	vmul.f32	s7, s7, s13
    2b90:	ee38 8a23 	vadd.f32	s16, s16, s7
    2b94:	ee20 0a04 	vmul.f32	s0, s0, s8
    2b98:	ee38 8a00 	vadd.f32	s16, s16, s0
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    2b9c:	ee27 7a25 	vmul.f32	s14, s14, s11
    2ba0:	ee27 7a2c 	vmul.f32	s14, s14, s25
    2ba4:	ee2b ba24 	vmul.f32	s22, s22, s9
    2ba8:	ee77 8a4b 	vsub.f32	s17, s14, s22
    2bac:	ee66 6aa5 	vmul.f32	s13, s13, s11
    2bb0:	ee66 6aac 	vmul.f32	s13, s13, s25
    2bb4:	ee38 7aa6 	vadd.f32	s14, s17, s13
    2bb8:	ee66 8a05 	vmul.f32	s17, s12, s10
    2bbc:	ee77 8a68 	vsub.f32	s17, s14, s17
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); //normalise step magnitude
    2bc0:	ee6e 7aae 	vmul.f32	s15, s29, s29
    2bc4:	ee2e 7a0e 	vmul.f32	s14, s28, s28
    2bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
    2bcc:	ee28 7a08 	vmul.f32	s14, s16, s16
    2bd0:	ee77 7a87 	vadd.f32	s15, s15, s14
    2bd4:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2bd8:	ee37 0a80 	vadd.f32	s0, s15, s0
    2bdc:	f7ff feea 	bl	29b4 <invSqrt(float)>
    qDot1 -= B_madgwick * s0;
    2be0:	4b56      	ldr	r3, [pc, #344]	; (2d3c <Madgwick6DOF(float, float, float, float, float, float, float)+0x35c>)
    2be2:	edd3 7a00 	vldr	s15, [r3]
    s0 *= recipNorm;
    2be6:	ee6e ea80 	vmul.f32	s29, s29, s0
    qDot1 -= B_madgwick * s0;
    2bea:	ee6e eaa7 	vmul.f32	s29, s29, s15
    2bee:	ee3a aa6e 	vsub.f32	s20, s20, s29
    s1 *= recipNorm;
    2bf2:	ee2e ea00 	vmul.f32	s28, s28, s0
    qDot2 -= B_madgwick * s1;
    2bf6:	ee2e ea27 	vmul.f32	s28, s28, s15
    2bfa:	ee79 9ace 	vsub.f32	s19, s19, s28
    s2 *= recipNorm;
    2bfe:	ee28 8a00 	vmul.f32	s16, s16, s0
    qDot3 -= B_madgwick * s2;
    2c02:	ee28 8a27 	vmul.f32	s16, s16, s15
    2c06:	ee7a aac8 	vsub.f32	s21, s21, s16
    s3 *= recipNorm;
    2c0a:	ee68 8a80 	vmul.f32	s17, s17, s0
    qDot4 -= B_madgwick * s3;
    2c0e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    2c12:	ee39 9a68 	vsub.f32	s18, s18, s17
  q0 += qDot1 * invSampleFreq;
    2c16:	ee2a aa0d 	vmul.f32	s20, s20, s26
    2c1a:	ee3a aa2d 	vadd.f32	s20, s20, s27
  q1 += qDot2 * invSampleFreq;
    2c1e:	ee29 8a8d 	vmul.f32	s16, s19, s26
    2c22:	ee38 8a0c 	vadd.f32	s16, s16, s24
  q2 += qDot3 * invSampleFreq;
    2c26:	ee6a aa8d 	vmul.f32	s21, s21, s26
    2c2a:	ee7a aaab 	vadd.f32	s21, s21, s23
  q3 += qDot4 * invSampleFreq;
    2c2e:	ee69 8a0d 	vmul.f32	s17, s18, s26
    2c32:	ee78 8aac 	vadd.f32	s17, s17, s25
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    2c36:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    2c3a:	ee28 7a08 	vmul.f32	s14, s16, s16
    2c3e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2c42:	ee2a 7aaa 	vmul.f32	s14, s21, s21
    2c46:	ee77 7a87 	vadd.f32	s15, s15, s14
    2c4a:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2c4e:	ee37 0a80 	vadd.f32	s0, s15, s0
    2c52:	f7ff feaf 	bl	29b4 <invSqrt(float)>
  q0 *= recipNorm;
    2c56:	ee2a aa00 	vmul.f32	s20, s20, s0
    2c5a:	4b37      	ldr	r3, [pc, #220]	; (2d38 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    2c5c:	ed83 aa00 	vstr	s20, [r3]
  q1 *= recipNorm;
    2c60:	ee28 8a00 	vmul.f32	s16, s16, s0
    2c64:	4b31      	ldr	r3, [pc, #196]	; (2d2c <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2c66:	ed83 8a00 	vstr	s16, [r3]
  q2 *= recipNorm;
    2c6a:	ee6a aa80 	vmul.f32	s21, s21, s0
    2c6e:	4b30      	ldr	r3, [pc, #192]	; (2d30 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2c70:	edc3 aa00 	vstr	s21, [r3]
  q3 *= recipNorm;
    2c74:	ee68 8a80 	vmul.f32	s17, s17, s0
    2c78:	4b2e      	ldr	r3, [pc, #184]	; (2d34 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    2c7a:	edc3 8a00 	vstr	s17, [r3]
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
    2c7e:	ee6a baaa 	vmul.f32	s23, s21, s21
    2c82:	ee68 0a08 	vmul.f32	s1, s16, s16
    2c86:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    2c8a:	ee7b 0a60 	vsub.f32	s1, s22, s1
    2c8e:	ee2a 0a08 	vmul.f32	s0, s20, s16
    2c92:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  { return __builtin_atan2f(__y, __x); }
    2c96:	ee70 0aeb 	vsub.f32	s1, s1, s23
    2c9a:	ee30 0a27 	vadd.f32	s0, s0, s15
    2c9e:	f00c ffc1 	bl	fc24 <atan2f>
    2ca2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2ca6:	ed9f 9b1e 	vldr	d9, [pc, #120]	; 2d20 <Madgwick6DOF(float, float, float, float, float, float, float)+0x340>
    2caa:	ee20 0b09 	vmul.f64	d0, d0, d9
    2cae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2cb2:	4b23      	ldr	r3, [pc, #140]	; (2d40 <Madgwick6DOF(float, float, float, float, float, float, float)+0x360>)
    2cb4:	ed83 0a00 	vstr	s0, [r3]
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
    2cb8:	ee68 7a28 	vmul.f32	s15, s16, s17
    2cbc:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    2cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_asinf(__x); }
    2cc4:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    2cc8:	ee27 0a80 	vmul.f32	s0, s15, s0
    2ccc:	f00c ff7e 	bl	fbcc <asinf>
    2cd0:	eeb1 7a40 	vneg.f32	s14, s0
    2cd4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2cd8:	ee27 7b09 	vmul.f64	d7, d7, d9
    2cdc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2ce0:	4b18      	ldr	r3, [pc, #96]	; (2d44 <Madgwick6DOF(float, float, float, float, float, float, float)+0x364>)
    2ce2:	ed83 7a00 	vstr	s14, [r3]
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
    2ce6:	ee3b ba6b 	vsub.f32	s22, s22, s23
    2cea:	ee68 0aa8 	vmul.f32	s1, s17, s17
    2cee:	ee28 8a2a 	vmul.f32	s16, s16, s21
    2cf2:	ee2a 0a28 	vmul.f32	s0, s20, s17
  { return __builtin_atan2f(__y, __x); }
    2cf6:	ee7b 0a60 	vsub.f32	s1, s22, s1
    2cfa:	ee38 0a00 	vadd.f32	s0, s16, s0
    2cfe:	f00c ff91 	bl	fc24 <atan2f>
    2d02:	eeb1 0a40 	vneg.f32	s0, s0
    2d06:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2d0a:	ee20 0b09 	vmul.f64	d0, d0, d9
    2d0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2d12:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <Madgwick6DOF(float, float, float, float, float, float, float)+0x368>)
    2d14:	ed83 0a00 	vstr	s0, [r3]
}
    2d18:	ecbd 8b0e 	vpop	{d8-d14}
    2d1c:	bd08      	pop	{r3, pc}
    2d1e:	bf00      	nop
    2d20:	1a5d2372 	.word	0x1a5d2372
    2d24:	404ca5dc 	.word	0x404ca5dc
    2d28:	3c8efa39 	.word	0x3c8efa39
    2d2c:	200055cc 	.word	0x200055cc
    2d30:	200055d0 	.word	0x200055d0
    2d34:	200055d4 	.word	0x200055d4
    2d38:	20003d24 	.word	0x20003d24
    2d3c:	200035f4 	.word	0x200035f4
    2d40:	200055e0 	.word	0x200055e0
    2d44:	200055b4 	.word	0x200055b4
    2d48:	20005818 	.word	0x20005818

00002d4c <radioSetup()>:
unsigned long channel_1_raw, channel_2_raw, channel_3_raw, channel_4_raw, channel_5_raw, 
							channel_6_raw, channel_7_raw, channel_8_raw, channel_9_raw;
int ppm_counter = 0;
unsigned long time_ms = 0;

void radioSetup() {
    2d4c:	b508      	push	{r3, lr}
    attachInterrupt(digitalPinToInterrupt(ch6Pin), getCh6, CHANGE);
    delay(20);

  //SBUS Recevier 
  #elif defined USE_SBUS_RX
    sbus.begin();
    2d4e:	4802      	ldr	r0, [pc, #8]	; (2d58 <radioSetup()+0xc>)
    2d50:	f001 fc92 	bl	4678 <SBUS::begin()>
  #elif defined USE_DSM_RX
    Serial3.begin(115000);
  #else
    #error No RX type defined...
  #endif
}
    2d54:	bd08      	pop	{r3, pc}
    2d56:	bf00      	nop
    2d58:	20005668 	.word	0x20005668

00002d5c <setup>:
void setup() {
    2d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d5e:	b0a5      	sub	sp, #148	; 0x94
		uint32_t millis_begin = systick_millis_count;
    2d60:	4b94      	ldr	r3, [pc, #592]	; (2fb4 <setup+0x258>)
    2d62:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2d64:	4c94      	ldr	r4, [pc, #592]	; (2fb8 <setup+0x25c>)
    2d66:	4f95      	ldr	r7, [pc, #596]	; (2fbc <setup+0x260>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2d68:	461d      	mov	r5, r3
		while (!(*this)) {
    2d6a:	e004      	b.n	2d76 <setup+0x1a>
				if (elapsed > 2000) break;
    2d6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2d70:	d813      	bhi.n	2d9a <setup+0x3e>
			yield();
    2d72:	f00c fb51 	bl	f418 <yield>
		yield();
    2d76:	f00c fb4f 	bl	f418 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2d7a:	7823      	ldrb	r3, [r4, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	f000 822e 	beq.w	31de <setup+0x482>
    2d82:	783b      	ldrb	r3, [r7, #0]
    2d84:	f013 0f01 	tst.w	r3, #1
    2d88:	f000 8229 	beq.w	31de <setup+0x482>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2d8c:	682b      	ldr	r3, [r5, #0]
    2d8e:	4a8c      	ldr	r2, [pc, #560]	; (2fc0 <setup+0x264>)
    2d90:	6812      	ldr	r2, [r2, #0]
    2d92:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2d94:	2b0e      	cmp	r3, #14
    2d96:	f240 8222 	bls.w	31de <setup+0x482>
  delay(500);
    2d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2d9e:	f00a fc47 	bl	d630 <delay>
  pinMode(13, OUTPUT); //Pin 13 LED blinker on board, do not modify 
    2da2:	2101      	movs	r1, #1
    2da4:	200d      	movs	r0, #13
    2da6:	f00a fc91 	bl	d6cc <pinMode>
  pinMode(m1Pin, OUTPUT);
    2daa:	2101      	movs	r1, #1
    2dac:	2000      	movs	r0, #0
    2dae:	f00a fc8d 	bl	d6cc <pinMode>
  pinMode(m2Pin, OUTPUT);
    2db2:	2101      	movs	r1, #1
    2db4:	4608      	mov	r0, r1
    2db6:	f00a fc89 	bl	d6cc <pinMode>
  pinMode(m3Pin, OUTPUT);
    2dba:	2101      	movs	r1, #1
    2dbc:	2002      	movs	r0, #2
    2dbe:	f00a fc85 	bl	d6cc <pinMode>
  pinMode(m4Pin, OUTPUT);
    2dc2:	2101      	movs	r1, #1
    2dc4:	2003      	movs	r0, #3
    2dc6:	f00a fc81 	bl	d6cc <pinMode>
  pinMode(m5Pin, OUTPUT);
    2dca:	2101      	movs	r1, #1
    2dcc:	2004      	movs	r0, #4
    2dce:	f00a fc7d 	bl	d6cc <pinMode>
  pinMode(m6Pin, OUTPUT);
    2dd2:	2101      	movs	r1, #1
    2dd4:	2005      	movs	r0, #5
    2dd6:	f00a fc79 	bl	d6cc <pinMode>
  servo1.attach(servo1Pin, 1000, 2100); //Pin, min PWM value, max PWM value
    2dda:	f640 0334 	movw	r3, #2100	; 0x834
    2dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2de2:	2106      	movs	r1, #6
    2de4:	4877      	ldr	r0, [pc, #476]	; (2fc4 <setup+0x268>)
    2de6:	f002 fa53 	bl	5290 <PWMServo::attach(int, int, int)>
  servo2.attach(servo2Pin, 1000, 2100);
    2dea:	f640 0334 	movw	r3, #2100	; 0x834
    2dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2df2:	2107      	movs	r1, #7
    2df4:	4874      	ldr	r0, [pc, #464]	; (2fc8 <setup+0x26c>)
    2df6:	f002 fa4b 	bl	5290 <PWMServo::attach(int, int, int)>
  servo3.attach(servo3Pin, 1000, 2100);
    2dfa:	f640 0334 	movw	r3, #2100	; 0x834
    2dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e02:	210a      	movs	r1, #10
    2e04:	4871      	ldr	r0, [pc, #452]	; (2fcc <setup+0x270>)
    2e06:	f002 fa43 	bl	5290 <PWMServo::attach(int, int, int)>
  servo4.attach(servo4Pin, 1000, 2100);
    2e0a:	f640 0334 	movw	r3, #2100	; 0x834
    2e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e12:	2109      	movs	r1, #9
    2e14:	486e      	ldr	r0, [pc, #440]	; (2fd0 <setup+0x274>)
    2e16:	f002 fa3b 	bl	5290 <PWMServo::attach(int, int, int)>
  servo5.attach(servo5Pin, 1000, 2100);
    2e1a:	f640 0334 	movw	r3, #2100	; 0x834
    2e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e22:	2108      	movs	r1, #8
    2e24:	486b      	ldr	r0, [pc, #428]	; (2fd4 <setup+0x278>)
    2e26:	f002 fa33 	bl	5290 <PWMServo::attach(int, int, int)>
  servo6.attach(servo6Pin, 1000, 2100);
    2e2a:	f640 0334 	movw	r3, #2100	; 0x834
    2e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e32:	210b      	movs	r1, #11
    2e34:	4868      	ldr	r0, [pc, #416]	; (2fd8 <setup+0x27c>)
    2e36:	f002 fa2b 	bl	5290 <PWMServo::attach(int, int, int)>
  servo7.attach(servo7Pin, 1000, 2100);
    2e3a:	f640 0334 	movw	r3, #2100	; 0x834
    2e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e42:	210c      	movs	r1, #12
    2e44:	4865      	ldr	r0, [pc, #404]	; (2fdc <setup+0x280>)
    2e46:	f002 fa23 	bl	5290 <PWMServo::attach(int, int, int)>
#elif defined(__arm__) && defined(TEENSYDUINO)
    static uint32_t attachedpins[]; // 1 bit per digital pin
#endif
  public:
    PWMServo();
    uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
    2e4a:	f44f 6316 	mov.w	r3, #2400	; 0x960
    2e4e:	f44f 7208 	mov.w	r2, #544	; 0x220
    2e52:	2118      	movs	r1, #24
    2e54:	4862      	ldr	r0, [pc, #392]	; (2fe0 <setup+0x284>)
    2e56:	f002 fa1b 	bl	5290 <PWMServo::attach(int, int, int)>
	getJoyAngle();
    2e5a:	f7ff f849 	bl	1ef0 <getJoyAngle()>
	alphaOffset = -alpha;
    2e5e:	4e61      	ldr	r6, [pc, #388]	; (2fe4 <setup+0x288>)
    2e60:	4b61      	ldr	r3, [pc, #388]	; (2fe8 <setup+0x28c>)
    2e62:	edd3 7a00 	vldr	s15, [r3]
    2e66:	eef1 7a67 	vneg.f32	s15, s15
    2e6a:	edc6 7a00 	vstr	s15, [r6]
	betaOffset = -beta;
    2e6e:	4d5f      	ldr	r5, [pc, #380]	; (2fec <setup+0x290>)
    2e70:	4b5f      	ldr	r3, [pc, #380]	; (2ff0 <setup+0x294>)
    2e72:	edd3 7a00 	vldr	s15, [r3]
    2e76:	eef1 7a67 	vneg.f32	s15, s15
    2e7a:	edc5 7a00 	vstr	s15, [r5]
							  return write((const uint8_t *)str, strlen(str)); }
    2e7e:	4c5d      	ldr	r4, [pc, #372]	; (2ff4 <setup+0x298>)
    2e80:	6823      	ldr	r3, [r4, #0]
    2e82:	685b      	ldr	r3, [r3, #4]
    2e84:	220d      	movs	r2, #13
    2e86:	495c      	ldr	r1, [pc, #368]	; (2ff8 <setup+0x29c>)
    2e88:	4620      	mov	r0, r4
    2e8a:	4798      	blx	r3
	Serial.print(alphaOffset);
    2e8c:	ed96 0a00 	vldr	s0, [r6]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2e90:	2102      	movs	r1, #2
    2e92:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2e96:	4620      	mov	r0, r4
    2e98:	f009 fed2 	bl	cc40 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2e9c:	6823      	ldr	r3, [r4, #0]
    2e9e:	685b      	ldr	r3, [r3, #4]
    2ea0:	220c      	movs	r2, #12
    2ea2:	4956      	ldr	r1, [pc, #344]	; (2ffc <setup+0x2a0>)
    2ea4:	4620      	mov	r0, r4
    2ea6:	4798      	blx	r3
	Serial.print(betaOffset);
    2ea8:	ed95 0a00 	vldr	s0, [r5]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2eac:	2102      	movs	r1, #2
    2eae:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2eb2:	4620      	mov	r0, r4
    2eb4:	f009 fec4 	bl	cc40 <Print::printFloat(double, unsigned char)>
  digitalWrite(13, HIGH);
    2eb8:	2101      	movs	r1, #1
    2eba:	200d      	movs	r0, #13
    2ebc:	f00a fbce 	bl	d65c <digitalWrite>
  delay(5);
    2ec0:	2005      	movs	r0, #5
    2ec2:	f00a fbb5 	bl	d630 <delay>
							  return write((const uint8_t *)str, strlen(str)); }
    2ec6:	6823      	ldr	r3, [r4, #0]
    2ec8:	685b      	ldr	r3, [r3, #4]
    2eca:	2217      	movs	r2, #23
    2ecc:	494c      	ldr	r1, [pc, #304]	; (3000 <setup+0x2a4>)
    2ece:	4620      	mov	r0, r4
    2ed0:	4798      	blx	r3
  if (SD.begin(chipSelect)) {
    2ed2:	21fe      	movs	r1, #254	; 0xfe
    2ed4:	484b      	ldr	r0, [pc, #300]	; (3004 <setup+0x2a8>)
    2ed6:	f002 fc75 	bl	57c4 <SDClass::begin(unsigned char)>
    2eda:	2800      	cmp	r0, #0
    2edc:	f000 8171 	beq.w	31c2 <setup+0x466>
    2ee0:	6823      	ldr	r3, [r4, #0]
    2ee2:	685b      	ldr	r3, [r3, #4]
    2ee4:	2211      	movs	r2, #17
    2ee6:	4948      	ldr	r1, [pc, #288]	; (3008 <setup+0x2ac>)
    2ee8:	4620      	mov	r0, r4
    2eea:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2eec:	4620      	mov	r0, r4
    2eee:	f009 fe44 	bl	cb7a <Print::println()>
		SD_is_present = 1;
    2ef2:	4b46      	ldr	r3, [pc, #280]	; (300c <setup+0x2b0>)
    2ef4:	2201      	movs	r2, #1
    2ef6:	701a      	strb	r2, [r3, #0]
	StringSumHelper(const String &s) : String(s) {}
    2ef8:	4945      	ldr	r1, [pc, #276]	; (3010 <setup+0x2b4>)
    2efa:	a814      	add	r0, sp, #80	; 0x50
    2efc:	f00a f91f 	bl	d13e <String::String(String const&)>
		fileName = filePrefix + String(fileIncrement) + fileExtension;
    2f00:	220a      	movs	r2, #10
    2f02:	2100      	movs	r1, #0
    2f04:	a818      	add	r0, sp, #96	; 0x60
    2f06:	f00a f93e 	bl	d186 <String::String(int, unsigned char)>
    2f0a:	a918      	add	r1, sp, #96	; 0x60
    2f0c:	a814      	add	r0, sp, #80	; 0x50
    2f0e:	f00a f999 	bl	d244 <operator+(StringSumHelper const&, String const&)>
    2f12:	4940      	ldr	r1, [pc, #256]	; (3014 <setup+0x2b8>)
    2f14:	f00a f996 	bl	d244 <operator+(StringSumHelper const&, String const&)>
    2f18:	4601      	mov	r1, r0
    2f1a:	483f      	ldr	r0, [pc, #252]	; (3018 <setup+0x2bc>)
    2f1c:	f00a f905 	bl	d12a <String::operator=(String const&)>
    2f20:	a818      	add	r0, sp, #96	; 0x60
    2f22:	f00a f891 	bl	d048 <String::~String()>
class StringSumHelper : public String
    2f26:	a814      	add	r0, sp, #80	; 0x50
    2f28:	f00a f88e 	bl	d048 <String::~String()>
		int fileIncrement = 0;
    2f2c:	2400      	movs	r4, #0
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2f2e:	4d3a      	ldr	r5, [pc, #232]	; (3018 <setup+0x2bc>)
    2f30:	4f3a      	ldr	r7, [pc, #232]	; (301c <setup+0x2c0>)
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    2f32:	4e34      	ldr	r6, [pc, #208]	; (3004 <setup+0x2a8>)
		while(SD.exists(fileName.c_str())) {
    2f34:	e02a      	b.n	2f8c <setup+0x230>
           m_xVol ? m_xVol->exists(path) : false;
    2f36:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
    2f3a:	2900      	cmp	r1, #0
    2f3c:	d070      	beq.n	3020 <setup+0x2c4>
  ExFatFile() {}
    2f3e:	2300      	movs	r3, #0
    2f40:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2f44:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    2f48:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2f4c:	4668      	mov	r0, sp
    2f4e:	f003 fa22 	bl	6396 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2f52:	2800      	cmp	r0, #0
    2f54:	d064      	beq.n	3020 <setup+0x2c4>
			fileIncrement++;
    2f56:	3401      	adds	r4, #1
	StringSumHelper(const String &s) : String(s) {}
    2f58:	492d      	ldr	r1, [pc, #180]	; (3010 <setup+0x2b4>)
    2f5a:	a81c      	add	r0, sp, #112	; 0x70
    2f5c:	f00a f8ef 	bl	d13e <String::String(String const&)>
			fileName = filePrefix + String(fileIncrement) + fileExtension;
    2f60:	220a      	movs	r2, #10
    2f62:	4621      	mov	r1, r4
    2f64:	a820      	add	r0, sp, #128	; 0x80
    2f66:	f00a f90e 	bl	d186 <String::String(int, unsigned char)>
    2f6a:	a920      	add	r1, sp, #128	; 0x80
    2f6c:	a81c      	add	r0, sp, #112	; 0x70
    2f6e:	f00a f969 	bl	d244 <operator+(StringSumHelper const&, String const&)>
    2f72:	4928      	ldr	r1, [pc, #160]	; (3014 <setup+0x2b8>)
    2f74:	f00a f966 	bl	d244 <operator+(StringSumHelper const&, String const&)>
    2f78:	4601      	mov	r1, r0
    2f7a:	4628      	mov	r0, r5
    2f7c:	f00a f8d5 	bl	d12a <String::operator=(String const&)>
    2f80:	a820      	add	r0, sp, #128	; 0x80
    2f82:	f00a f861 	bl	d048 <String::~String()>
class StringSumHelper : public String
    2f86:	a81c      	add	r0, sp, #112	; 0x70
    2f88:	f00a f85e 	bl	d048 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2f8c:	682a      	ldr	r2, [r5, #0]
    2f8e:	2a00      	cmp	r2, #0
    2f90:	bf08      	it	eq
    2f92:	463a      	moveq	r2, r7
    return m_fVol ? m_fVol->exists(path) :
    2f94:	f8d6 1484 	ldr.w	r1, [r6, #1156]	; 0x484
    2f98:	2900      	cmp	r1, #0
    2f9a:	d0cc      	beq.n	2f36 <setup+0x1da>
  FatFile() {}
    2f9c:	2300      	movs	r3, #0
    2f9e:	f88d 3000 	strb.w	r3, [sp]
    2fa2:	f88d 3001 	strb.w	r3, [sp, #1]
    2fa6:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2faa:	4668      	mov	r0, sp
    2fac:	f005 f997 	bl	82de <FatFile::open(FatVolume*, char const*, int)>
    2fb0:	e7cf      	b.n	2f52 <setup+0x1f6>
    2fb2:	bf00      	nop
    2fb4:	200057f8 	.word	0x200057f8
    2fb8:	20005848 	.word	0x20005848
    2fbc:	20005847 	.word	0x20005847
    2fc0:	2000580c 	.word	0x2000580c
    2fc4:	200057cc 	.word	0x200057cc
    2fc8:	200057d0 	.word	0x200057d0
    2fcc:	200057d4 	.word	0x200057d4
    2fd0:	200057d8 	.word	0x200057d8
    2fd4:	200057dc 	.word	0x200057dc
    2fd8:	200057e0 	.word	0x200057e0
    2fdc:	200057e4 	.word	0x200057e4
    2fe0:	20005574 	.word	0x20005574
    2fe4:	20005454 	.word	0x20005454
    2fe8:	2000544c 	.word	0x2000544c
    2fec:	20005468 	.word	0x20005468
    2ff0:	20005460 	.word	0x20005460
    2ff4:	20003634 	.word	0x20003634
    2ff8:	200030dc 	.word	0x200030dc
    2ffc:	200030ec 	.word	0x200030ec
    3000:	200030fc 	.word	0x200030fc
    3004:	2000462c 	.word	0x2000462c
    3008:	20003114 	.word	0x20003114
    300c:	2000582e 	.word	0x2000582e
    3010:	20005564 	.word	0x20005564
    3014:	20005544 	.word	0x20005544
    3018:	20005554 	.word	0x20005554
    301c:	200034bc 	.word	0x200034bc
    3020:	4b75      	ldr	r3, [pc, #468]	; (31f8 <setup+0x49c>)
    3022:	681a      	ldr	r2, [r3, #0]
    3024:	2a00      	cmp	r2, #0
    3026:	f000 80c5 	beq.w	31b4 <setup+0x458>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    302a:	f244 2302 	movw	r3, #16898	; 0x4202
    302e:	4973      	ldr	r1, [pc, #460]	; (31fc <setup+0x4a0>)
    3030:	4668      	mov	r0, sp
    3032:	f007 f993 	bl	a35c <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    3036:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3038:	2b00      	cmp	r3, #0
    303a:	f000 80bd 	beq.w	31b8 <setup+0x45c>
		if (file) return File(new SDFile(file));
    303e:	205c      	movs	r0, #92	; 0x5c
    3040:	f00a fc24 	bl	d88c <operator new(unsigned int)>
    3044:	4604      	mov	r4, r0
class FileImpl {
    3046:	2500      	movs	r5, #0
    3048:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    304a:	4b6d      	ldr	r3, [pc, #436]	; (3200 <setup+0x4a4>)
    304c:	6003      	str	r3, [r0, #0]
class Print
    304e:	9b01      	ldr	r3, [sp, #4]
    3050:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    3052:	4b6c      	ldr	r3, [pc, #432]	; (3204 <setup+0x4a8>)
    3054:	6083      	str	r3, [r0, #8]
    3056:	9b02      	ldr	r3, [sp, #8]
    3058:	6103      	str	r3, [r0, #16]
    305a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    305e:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    3060:	a904      	add	r1, sp, #16
    3062:	3018      	adds	r0, #24
    3064:	f007 f843 	bl	a0ee <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3068:	4b67      	ldr	r3, [pc, #412]	; (3208 <setup+0x4ac>)
    306a:	60a3      	str	r3, [r4, #8]
    306c:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    306e:	6863      	ldr	r3, [r4, #4]
    3070:	3301      	adds	r3, #1
    3072:	6063      	str	r3, [r4, #4]
    3074:	4b65      	ldr	r3, [pc, #404]	; (320c <setup+0x4b0>)
    3076:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    3078:	a804      	add	r0, sp, #16
    307a:	f007 f879 	bl	a170 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    307e:	4b64      	ldr	r3, [pc, #400]	; (3210 <setup+0x4b4>)
    3080:	691b      	ldr	r3, [r3, #16]
    3082:	b16b      	cbz	r3, 30a0 <setup+0x344>
		if (--(f->refcount) == 0) {
    3084:	685a      	ldr	r2, [r3, #4]
    3086:	3a01      	subs	r2, #1
    3088:	605a      	str	r2, [r3, #4]
    308a:	b94a      	cbnz	r2, 30a0 <setup+0x344>
			f->close();
    308c:	4d60      	ldr	r5, [pc, #384]	; (3210 <setup+0x4b4>)
    308e:	6928      	ldr	r0, [r5, #16]
    3090:	6803      	ldr	r3, [r0, #0]
    3092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3094:	4798      	blx	r3
			delete f;
    3096:	6928      	ldr	r0, [r5, #16]
    3098:	b110      	cbz	r0, 30a0 <setup+0x344>
    309a:	6803      	ldr	r3, [r0, #0]
    309c:	685b      	ldr	r3, [r3, #4]
    309e:	4798      	blx	r3
		f = file.f;
    30a0:	4d5b      	ldr	r5, [pc, #364]	; (3210 <setup+0x4b4>)
    30a2:	612c      	str	r4, [r5, #16]
			"roll_imu,pitch_imu,yaw_imu,alpha,beta,roll_des,pitch_des,yaw_des,throttle_des,roll_pid,pitch_pid,yaw_pid,radio_ch1,radio_ch2,radio_ch3,radio_ch4,radio_ch5,radio_ch6,radio_ch7,radio_ch8,radio_ch9,radio_ch10,radio_ch11,radio_ch12,radio_ch13,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,s1_command,s2_command,s3_command,s4_command,kp_roll,ki_roll,kd_roll,kp_pitch,ki_pitch,kd_pitch,kp_yaw,ki_yaw,kd_yaw,failsafeTriggered";
    30a4:	495b      	ldr	r1, [pc, #364]	; (3214 <setup+0x4b8>)
    30a6:	4668      	mov	r0, sp
    30a8:	f00a f817 	bl	d0da <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    30ac:	4669      	mov	r1, sp
    30ae:	4628      	mov	r0, r5
    30b0:	f009 fd3e 	bl	cb30 <Print::print(String const&)>
    30b4:	4628      	mov	r0, r5
    30b6:	f009 fd60 	bl	cb7a <Print::println()>
		if (f) {
    30ba:	6928      	ldr	r0, [r5, #16]
    30bc:	b198      	cbz	r0, 30e6 <setup+0x38a>
			f->close();
    30be:	6803      	ldr	r3, [r0, #0]
    30c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30c2:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    30c4:	692a      	ldr	r2, [r5, #16]
    30c6:	6853      	ldr	r3, [r2, #4]
    30c8:	3b01      	subs	r3, #1
    30ca:	6053      	str	r3, [r2, #4]
    30cc:	b943      	cbnz	r3, 30e0 <setup+0x384>
			f->close();
    30ce:	6928      	ldr	r0, [r5, #16]
    30d0:	6803      	ldr	r3, [r0, #0]
    30d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30d4:	4798      	blx	r3
			delete f;
    30d6:	6928      	ldr	r0, [r5, #16]
    30d8:	b110      	cbz	r0, 30e0 <setup+0x384>
    30da:	6803      	ldr	r3, [r0, #0]
    30dc:	685b      	ldr	r3, [r3, #4]
    30de:	4798      	blx	r3
		}
		f = nullptr;
    30e0:	4b4b      	ldr	r3, [pc, #300]	; (3210 <setup+0x4b4>)
    30e2:	2200      	movs	r2, #0
    30e4:	611a      	str	r2, [r3, #16]
  }
    30e6:	4668      	mov	r0, sp
    30e8:	f009 ffae 	bl	d048 <String::~String()>
  radioSetup();
    30ec:	f7ff fe2e 	bl	2d4c <radioSetup()>
  channel_1_pwm = channel_1_fs;
    30f0:	4b49      	ldr	r3, [pc, #292]	; (3218 <setup+0x4bc>)
    30f2:	681a      	ldr	r2, [r3, #0]
    30f4:	4b49      	ldr	r3, [pc, #292]	; (321c <setup+0x4c0>)
    30f6:	601a      	str	r2, [r3, #0]
  channel_2_pwm = channel_2_fs;
    30f8:	4b49      	ldr	r3, [pc, #292]	; (3220 <setup+0x4c4>)
    30fa:	681a      	ldr	r2, [r3, #0]
    30fc:	4b49      	ldr	r3, [pc, #292]	; (3224 <setup+0x4c8>)
    30fe:	601a      	str	r2, [r3, #0]
  channel_3_pwm = channel_3_fs;
    3100:	4b49      	ldr	r3, [pc, #292]	; (3228 <setup+0x4cc>)
    3102:	681a      	ldr	r2, [r3, #0]
    3104:	4b49      	ldr	r3, [pc, #292]	; (322c <setup+0x4d0>)
    3106:	601a      	str	r2, [r3, #0]
  channel_4_pwm = channel_4_fs;
    3108:	4b49      	ldr	r3, [pc, #292]	; (3230 <setup+0x4d4>)
    310a:	681a      	ldr	r2, [r3, #0]
    310c:	4b49      	ldr	r3, [pc, #292]	; (3234 <setup+0x4d8>)
    310e:	601a      	str	r2, [r3, #0]
  channel_5_pwm = channel_5_fs;
    3110:	4b49      	ldr	r3, [pc, #292]	; (3238 <setup+0x4dc>)
    3112:	681a      	ldr	r2, [r3, #0]
    3114:	4b49      	ldr	r3, [pc, #292]	; (323c <setup+0x4e0>)
    3116:	601a      	str	r2, [r3, #0]
  channel_6_pwm = channel_6_fs;
    3118:	4b49      	ldr	r3, [pc, #292]	; (3240 <setup+0x4e4>)
    311a:	681a      	ldr	r2, [r3, #0]
    311c:	4b49      	ldr	r3, [pc, #292]	; (3244 <setup+0x4e8>)
    311e:	601a      	str	r2, [r3, #0]
	channel_7_pwm = channel_7_fs;
    3120:	4b49      	ldr	r3, [pc, #292]	; (3248 <setup+0x4ec>)
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	4b49      	ldr	r3, [pc, #292]	; (324c <setup+0x4f0>)
    3126:	601a      	str	r2, [r3, #0]
	channel_8_pwm = channel_8_fs;
    3128:	4b49      	ldr	r3, [pc, #292]	; (3250 <setup+0x4f4>)
    312a:	681a      	ldr	r2, [r3, #0]
    312c:	4b49      	ldr	r3, [pc, #292]	; (3254 <setup+0x4f8>)
    312e:	601a      	str	r2, [r3, #0]
	channel_9_pwm = channel_9_fs;
    3130:	4b49      	ldr	r3, [pc, #292]	; (3258 <setup+0x4fc>)
    3132:	681a      	ldr	r2, [r3, #0]
    3134:	4b49      	ldr	r3, [pc, #292]	; (325c <setup+0x500>)
    3136:	601a      	str	r2, [r3, #0]
	channel_10_pwm = channel_10_fs;
    3138:	4b49      	ldr	r3, [pc, #292]	; (3260 <setup+0x504>)
    313a:	681a      	ldr	r2, [r3, #0]
    313c:	4b49      	ldr	r3, [pc, #292]	; (3264 <setup+0x508>)
    313e:	601a      	str	r2, [r3, #0]
	channel_11_pwm = channel_11_fs;
    3140:	4b49      	ldr	r3, [pc, #292]	; (3268 <setup+0x50c>)
    3142:	681a      	ldr	r2, [r3, #0]
    3144:	4b49      	ldr	r3, [pc, #292]	; (326c <setup+0x510>)
    3146:	601a      	str	r2, [r3, #0]
	channel_12_pwm = channel_12_fs;
    3148:	4b49      	ldr	r3, [pc, #292]	; (3270 <setup+0x514>)
    314a:	681a      	ldr	r2, [r3, #0]
    314c:	4b49      	ldr	r3, [pc, #292]	; (3274 <setup+0x518>)
    314e:	601a      	str	r2, [r3, #0]
	channel_13_pwm = channel_13_fs;
    3150:	4b49      	ldr	r3, [pc, #292]	; (3278 <setup+0x51c>)
    3152:	681a      	ldr	r2, [r3, #0]
    3154:	4b49      	ldr	r3, [pc, #292]	; (327c <setup+0x520>)
    3156:	601a      	str	r2, [r3, #0]
  IMUinit();
    3158:	f7fd fe4c 	bl	df4 <IMUinit()>
  delay(5);
    315c:	2005      	movs	r0, #5
    315e:	f00a fa67 	bl	d630 <delay>
  servo1.write(0); //Command servo angle from 0-180 degrees (1000 to 2000 PWM)
    3162:	2100      	movs	r1, #0
    3164:	4846      	ldr	r0, [pc, #280]	; (3280 <setup+0x524>)
    3166:	f002 f8e1 	bl	532c <PWMServo::write(int)>
  servo2.write(0); //Set these to 90 for servos if you do not want them to briefly max out on startup
    316a:	2100      	movs	r1, #0
    316c:	4845      	ldr	r0, [pc, #276]	; (3284 <setup+0x528>)
    316e:	f002 f8dd 	bl	532c <PWMServo::write(int)>
  servo3.write(0); //Keep these at 0 if you are using servo outputs for motors
    3172:	2100      	movs	r1, #0
    3174:	4844      	ldr	r0, [pc, #272]	; (3288 <setup+0x52c>)
    3176:	f002 f8d9 	bl	532c <PWMServo::write(int)>
  servo4.write(0);
    317a:	2100      	movs	r1, #0
    317c:	4843      	ldr	r0, [pc, #268]	; (328c <setup+0x530>)
    317e:	f002 f8d5 	bl	532c <PWMServo::write(int)>
  servo5.write(0);
    3182:	2100      	movs	r1, #0
    3184:	4842      	ldr	r0, [pc, #264]	; (3290 <setup+0x534>)
    3186:	f002 f8d1 	bl	532c <PWMServo::write(int)>
  servo6.write(0);
    318a:	2100      	movs	r1, #0
    318c:	4841      	ldr	r0, [pc, #260]	; (3294 <setup+0x538>)
    318e:	f002 f8cd 	bl	532c <PWMServo::write(int)>
  servo7.write(0);
    3192:	2100      	movs	r1, #0
    3194:	4840      	ldr	r0, [pc, #256]	; (3298 <setup+0x53c>)
    3196:	f002 f8c9 	bl	532c <PWMServo::write(int)>
  delay(5);
    319a:	2005      	movs	r0, #5
    319c:	f00a fa48 	bl	d630 <delay>
  setupBlink(3,160,70); //numBlinks, upTime (ms), downTime (ms)
    31a0:	2246      	movs	r2, #70	; 0x46
    31a2:	21a0      	movs	r1, #160	; 0xa0
    31a4:	2003      	movs	r0, #3
    31a6:	f7fe fe85 	bl	1eb4 <setupBlink(int, int, int)>
	doneWithSetup = 1;
    31aa:	4b3c      	ldr	r3, [pc, #240]	; (329c <setup+0x540>)
    31ac:	2201      	movs	r2, #1
    31ae:	701a      	strb	r2, [r3, #0]
}
    31b0:	b025      	add	sp, #148	; 0x94
    31b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b4:	4a3a      	ldr	r2, [pc, #232]	; (32a0 <setup+0x544>)
    31b6:	e738      	b.n	302a <setup+0x2ce>
  bool isOpen() const {return m_fFile || m_xFile;}
    31b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    31ba:	2c00      	cmp	r4, #0
    31bc:	f47f af3f 	bne.w	303e <setup+0x2e2>
    31c0:	e758      	b.n	3074 <setup+0x318>
							  return write((const uint8_t *)str, strlen(str)); }
    31c2:	4c38      	ldr	r4, [pc, #224]	; (32a4 <setup+0x548>)
    31c4:	6823      	ldr	r3, [r4, #0]
    31c6:	685b      	ldr	r3, [r3, #4]
    31c8:	221b      	movs	r2, #27
    31ca:	4937      	ldr	r1, [pc, #220]	; (32a8 <setup+0x54c>)
    31cc:	4620      	mov	r0, r4
    31ce:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    31d0:	4620      	mov	r0, r4
    31d2:	f009 fcd2 	bl	cb7a <Print::println()>
		SD_is_present = 0;
    31d6:	4b35      	ldr	r3, [pc, #212]	; (32ac <setup+0x550>)
    31d8:	2200      	movs	r2, #0
    31da:	701a      	strb	r2, [r3, #0]
    31dc:	e786      	b.n	30ec <setup+0x390>
			uint32_t elapsed = systick_millis_count - millis_begin;
    31de:	682b      	ldr	r3, [r5, #0]
    31e0:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    31e2:	7822      	ldrb	r2, [r4, #0]
    31e4:	2a00      	cmp	r2, #0
    31e6:	f47f adc1 	bne.w	2d6c <setup+0x10>
				if (elapsed > 750) break;
    31ea:	f240 22ee 	movw	r2, #750	; 0x2ee
    31ee:	4293      	cmp	r3, r2
    31f0:	f67f adbf 	bls.w	2d72 <setup+0x16>
    31f4:	e5d1      	b.n	2d9a <setup+0x3e>
    31f6:	bf00      	nop
    31f8:	20005554 	.word	0x20005554
    31fc:	20004630 	.word	0x20004630
    3200:	200027b0 	.word	0x200027b0
    3204:	2000280c 	.word	0x2000280c
    3208:	2000278c 	.word	0x2000278c
    320c:	20002680 	.word	0x20002680
    3210:	20003c9c 	.word	0x20003c9c
    3214:	20003128 	.word	0x20003128
    3218:	20003c74 	.word	0x20003c74
    321c:	2000549c 	.word	0x2000549c
    3220:	20003c78 	.word	0x20003c78
    3224:	200054a8 	.word	0x200054a8
    3228:	20003c7c 	.word	0x20003c7c
    322c:	200054b4 	.word	0x200054b4
    3230:	20003c80 	.word	0x20003c80
    3234:	200054c0 	.word	0x200054c0
    3238:	20003c84 	.word	0x20003c84
    323c:	200054cc 	.word	0x200054cc
    3240:	20003c88 	.word	0x20003c88
    3244:	200054d0 	.word	0x200054d0
    3248:	20003c8c 	.word	0x20003c8c
    324c:	200054d4 	.word	0x200054d4
    3250:	20003c90 	.word	0x20003c90
    3254:	200054d8 	.word	0x200054d8
    3258:	20003c94 	.word	0x20003c94
    325c:	200054dc 	.word	0x200054dc
    3260:	20003c64 	.word	0x20003c64
    3264:	2000548c 	.word	0x2000548c
    3268:	20003c68 	.word	0x20003c68
    326c:	20005490 	.word	0x20005490
    3270:	20003c6c 	.word	0x20003c6c
    3274:	20005494 	.word	0x20005494
    3278:	20003c70 	.word	0x20003c70
    327c:	20005498 	.word	0x20005498
    3280:	200057cc 	.word	0x200057cc
    3284:	200057d0 	.word	0x200057d0
    3288:	200057d4 	.word	0x200057d4
    328c:	200057d8 	.word	0x200057d8
    3290:	200057dc 	.word	0x200057dc
    3294:	200057e0 	.word	0x200057e0
    3298:	200057e4 	.word	0x200057e4
    329c:	2000583b 	.word	0x2000583b
    32a0:	200034bc 	.word	0x200034bc
    32a4:	20003634 	.word	0x20003634
    32a8:	200032c0 	.word	0x200032c0
    32ac:	2000582e 	.word	0x2000582e

000032b0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)>:
    #endif  // end EIGEN_HAS_CXX11

    /** \sa PlainObjectBase::operator=(const EigenBase<OtherDerived>&) */
    template<typename OtherDerived>
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE PlainObjectBase(const DenseBase<OtherDerived> &other)
    32b0:	b508      	push	{r3, lr}
    32b2:	f010 0f0f 	tst.w	r0, #15
    32b6:	d142      	bne.n	333e <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)+0x8e>
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const LhsNestedCleaned& lhs() const { return m_lhs; }
    32b8:	680a      	ldr	r2, [r1, #0]
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const RhsNestedCleaned& rhs() const { return m_rhs; }
    32ba:	684b      	ldr	r3, [r1, #4]
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32bc:	edd2 7a02 	vldr	s15, [r2, #8]
    32c0:	ed93 7a01 	vldr	s14, [r3, #4]
    32c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    32c8:	ed92 7a00 	vldr	s14, [r2]
    32cc:	edd3 6a00 	vldr	s13, [r3]
    32d0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32d4:	ee77 7a87 	vadd.f32	s15, s15, s14
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
    32d8:	edc0 7a00 	vstr	s15, [r0]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32dc:	edd2 7a03 	vldr	s15, [r2, #12]
    32e0:	ed93 7a01 	vldr	s14, [r3, #4]
    32e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    32e8:	ed92 7a01 	vldr	s14, [r2, #4]
    32ec:	edd3 6a00 	vldr	s13, [r3]
    32f0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32f4:	ee77 7a87 	vadd.f32	s15, s15, s14
    32f8:	edc0 7a01 	vstr	s15, [r0, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32fc:	edd2 7a02 	vldr	s15, [r2, #8]
    3300:	ed93 7a03 	vldr	s14, [r3, #12]
    3304:	ee67 7a87 	vmul.f32	s15, s15, s14
    3308:	ed92 7a00 	vldr	s14, [r2]
    330c:	edd3 6a02 	vldr	s13, [r3, #8]
    3310:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3314:	ee77 7a87 	vadd.f32	s15, s15, s14
    3318:	edc0 7a02 	vstr	s15, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    331c:	edd2 7a03 	vldr	s15, [r2, #12]
    3320:	ed93 7a03 	vldr	s14, [r3, #12]
    3324:	ee67 7a87 	vmul.f32	s15, s15, s14
    3328:	ed92 7a01 	vldr	s14, [r2, #4]
    332c:	edd3 6a02 	vldr	s13, [r3, #8]
    3330:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3334:	ee77 7a87 	vadd.f32	s15, s15, s14
    3338:	edc0 7a03 	vstr	s15, [r0, #12]
      : m_storage()
    {
      _check_template_params();
      resizeLike(other);
      _set_noalias(other);
    }
    333c:	bd08      	pop	{r3, pc}
    333e:	4b03      	ldr	r3, [pc, #12]	; (334c <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)+0x9c>)
    3340:	4a03      	ldr	r2, [pc, #12]	; (3350 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)+0xa0>)
    3342:	216d      	movs	r1, #109	; 0x6d
    3344:	4803      	ldr	r0, [pc, #12]	; (3354 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)+0xa4>)
    3346:	f00e fab1 	bl	118ac <__assert_func>
    334a:	bf00      	nop
    334c:	20002048 	.word	0x20002048
    3350:	20002138 	.word	0x20002138
    3354:	200021c4 	.word	0x200021c4

00003358 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> > const&)>:
    const LhsNestedCleaned& lhs() const { return m_lhs; }
    3358:	680a      	ldr	r2, [r1, #0]
    const RhsNestedCleaned& rhs() const { return m_rhs; }
    335a:	684b      	ldr	r3, [r1, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    335c:	edd2 7a06 	vldr	s15, [r2, #24]
    3360:	ed93 7a02 	vldr	s14, [r3, #8]
    3364:	ee67 7a87 	vmul.f32	s15, s15, s14
    3368:	ed92 7a03 	vldr	s14, [r2, #12]
    336c:	edd3 6a01 	vldr	s13, [r3, #4]
    3370:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3374:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3378:	ed92 7a00 	vldr	s14, [r2]
    337c:	edd3 6a00 	vldr	s13, [r3]
    3380:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3384:	ee77 7a87 	vadd.f32	s15, s15, s14
    3388:	edc0 7a00 	vstr	s15, [r0]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    338c:	edd2 7a07 	vldr	s15, [r2, #28]
    3390:	ed93 7a02 	vldr	s14, [r3, #8]
    3394:	ee67 7a87 	vmul.f32	s15, s15, s14
    3398:	ed92 7a04 	vldr	s14, [r2, #16]
    339c:	edd3 6a01 	vldr	s13, [r3, #4]
    33a0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33a4:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33a8:	ed92 7a01 	vldr	s14, [r2, #4]
    33ac:	edd3 6a00 	vldr	s13, [r3]
    33b0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33b4:	ee77 7a87 	vadd.f32	s15, s15, s14
    33b8:	edc0 7a01 	vstr	s15, [r0, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33bc:	edd2 7a08 	vldr	s15, [r2, #32]
    33c0:	ed93 7a02 	vldr	s14, [r3, #8]
    33c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    33c8:	ed92 7a05 	vldr	s14, [r2, #20]
    33cc:	edd3 6a01 	vldr	s13, [r3, #4]
    33d0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33d4:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33d8:	ed92 7a02 	vldr	s14, [r2, #8]
    33dc:	edd3 6a00 	vldr	s13, [r3]
    33e0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33e4:	ee77 7a87 	vadd.f32	s15, s15, s14
    33e8:	edc0 7a02 	vstr	s15, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33ec:	edd2 7a06 	vldr	s15, [r2, #24]
    33f0:	ed93 7a05 	vldr	s14, [r3, #20]
    33f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    33f8:	ed92 7a03 	vldr	s14, [r2, #12]
    33fc:	edd3 6a04 	vldr	s13, [r3, #16]
    3400:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3404:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3408:	ed92 7a00 	vldr	s14, [r2]
    340c:	edd3 6a03 	vldr	s13, [r3, #12]
    3410:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3414:	ee77 7a87 	vadd.f32	s15, s15, s14
    3418:	edc0 7a03 	vstr	s15, [r0, #12]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    341c:	edd2 7a07 	vldr	s15, [r2, #28]
    3420:	ed93 7a05 	vldr	s14, [r3, #20]
    3424:	ee67 7a87 	vmul.f32	s15, s15, s14
    3428:	ed92 7a04 	vldr	s14, [r2, #16]
    342c:	edd3 6a04 	vldr	s13, [r3, #16]
    3430:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3434:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3438:	ed92 7a01 	vldr	s14, [r2, #4]
    343c:	edd3 6a03 	vldr	s13, [r3, #12]
    3440:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3444:	ee77 7a87 	vadd.f32	s15, s15, s14
    3448:	edc0 7a04 	vstr	s15, [r0, #16]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    344c:	edd2 7a08 	vldr	s15, [r2, #32]
    3450:	ed93 7a05 	vldr	s14, [r3, #20]
    3454:	ee67 7a87 	vmul.f32	s15, s15, s14
    3458:	ed92 7a05 	vldr	s14, [r2, #20]
    345c:	edd3 6a04 	vldr	s13, [r3, #16]
    3460:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3464:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3468:	ed92 7a02 	vldr	s14, [r2, #8]
    346c:	edd3 6a03 	vldr	s13, [r3, #12]
    3470:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3474:	ee77 7a87 	vadd.f32	s15, s15, s14
    3478:	edc0 7a05 	vstr	s15, [r0, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    347c:	edd2 7a06 	vldr	s15, [r2, #24]
    3480:	ed93 7a08 	vldr	s14, [r3, #32]
    3484:	ee67 7a87 	vmul.f32	s15, s15, s14
    3488:	ed92 7a03 	vldr	s14, [r2, #12]
    348c:	edd3 6a07 	vldr	s13, [r3, #28]
    3490:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3494:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3498:	ed92 7a00 	vldr	s14, [r2]
    349c:	edd3 6a06 	vldr	s13, [r3, #24]
    34a0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34a4:	ee77 7a87 	vadd.f32	s15, s15, s14
    34a8:	edc0 7a06 	vstr	s15, [r0, #24]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34ac:	edd2 7a07 	vldr	s15, [r2, #28]
    34b0:	ed93 7a08 	vldr	s14, [r3, #32]
    34b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    34b8:	ed92 7a04 	vldr	s14, [r2, #16]
    34bc:	edd3 6a07 	vldr	s13, [r3, #28]
    34c0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34c4:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34c8:	ed92 7a01 	vldr	s14, [r2, #4]
    34cc:	edd3 6a06 	vldr	s13, [r3, #24]
    34d0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34d4:	ee77 7a87 	vadd.f32	s15, s15, s14
    34d8:	edc0 7a07 	vstr	s15, [r0, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34dc:	edd2 7a08 	vldr	s15, [r2, #32]
    34e0:	ed93 7a08 	vldr	s14, [r3, #32]
    34e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    34e8:	ed92 7a05 	vldr	s14, [r2, #20]
    34ec:	edd3 6a07 	vldr	s13, [r3, #28]
    34f0:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34f4:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34f8:	ed92 7a02 	vldr	s14, [r2, #8]
    34fc:	edd3 6a06 	vldr	s13, [r3, #24]
    3500:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3504:	ee77 7a87 	vadd.f32	s15, s15, s14
    3508:	edc0 7a08 	vstr	s15, [r0, #32]
    350c:	4770      	bx	lr
	...

00003510 <loop>:
void loop() {
    3510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3514:	b0d9      	sub	sp, #356	; 0x164
    3516:	f10d 04b7 	add.w	r4, sp, #183	; 0xb7
    351a:	f024 040f 	bic.w	r4, r4, #15
  prev_time = current_time;      
    351e:	4d92      	ldr	r5, [pc, #584]	; (3768 <loop+0x258>)
    3520:	4e92      	ldr	r6, [pc, #584]	; (376c <loop+0x25c>)
    3522:	6833      	ldr	r3, [r6, #0]
    3524:	602b      	str	r3, [r5, #0]
  current_time = micros();      
    3526:	f00a f859 	bl	d5dc <micros>
    352a:	6030      	str	r0, [r6, #0]
  dt = (current_time - prev_time)/1000000.0;
    352c:	682b      	ldr	r3, [r5, #0]
    352e:	1ac0      	subs	r0, r0, r3
    3530:	ee07 0a90 	vmov	s15, r0
    3534:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    3538:	ed9f 5b89 	vldr	d5, [pc, #548]	; 3760 <loop+0x250>
    353c:	ee87 6b05 	vdiv.f64	d6, d7, d5
    3540:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    3544:	4b8a      	ldr	r3, [pc, #552]	; (3770 <loop+0x260>)
    3546:	ed83 6a00 	vstr	s12, [r3]
  loopBlink(); //Indicate we are in main loop with short blink every 1.5 seconds
    354a:	f7fe fc83 	bl	1e54 <loopBlink()>
	printRIPAngles();
    354e:	f7fe fd8d 	bl	206c <printRIPAngles()>
	if (channel_6_pwm < 1500) {
    3552:	4b88      	ldr	r3, [pc, #544]	; (3774 <loop+0x264>)
    3554:	681a      	ldr	r2, [r3, #0]
    3556:	f240 53db 	movw	r3, #1499	; 0x5db
    355a:	429a      	cmp	r2, r3
    355c:	f300 80f0 	bgt.w	3740 <loop+0x230>
		irisFlag = 0;
    3560:	4b85      	ldr	r3, [pc, #532]	; (3778 <loop+0x268>)
    3562:	2200      	movs	r2, #0
    3564:	701a      	strb	r2, [r3, #0]
		closeIris();
    3566:	f7fe fd69 	bl	203c <closeIris()>
	if (channel_7_pwm > 1750) {
    356a:	4b84      	ldr	r3, [pc, #528]	; (377c <loop+0x26c>)
    356c:	681a      	ldr	r2, [r3, #0]
    356e:	f240 63d6 	movw	r3, #1750	; 0x6d6
    3572:	429a      	cmp	r2, r3
    3574:	f340 80ea 	ble.w	374c <loop+0x23c>
		conductSineSweep = 1;
    3578:	4b81      	ldr	r3, [pc, #516]	; (3780 <loop+0x270>)
    357a:	2201      	movs	r2, #1
    357c:	701a      	strb	r2, [r3, #0]
	if (SD_is_present && current_time - print_counterSD > 10000) {
    357e:	4b81      	ldr	r3, [pc, #516]	; (3784 <loop+0x274>)
    3580:	781b      	ldrb	r3, [r3, #0]
    3582:	b14b      	cbz	r3, 3598 <loop+0x88>
    3584:	4b79      	ldr	r3, [pc, #484]	; (376c <loop+0x25c>)
    3586:	681b      	ldr	r3, [r3, #0]
    3588:	4a7f      	ldr	r2, [pc, #508]	; (3788 <loop+0x278>)
    358a:	6812      	ldr	r2, [r2, #0]
    358c:	1a9b      	subs	r3, r3, r2
    358e:	f242 7210 	movw	r2, #10000	; 0x2710
    3592:	4293      	cmp	r3, r2
    3594:	f200 814e 	bhi.w	3834 <loop+0x324>
  getIMUdata(); //Pulls raw gyro, accelerometer, and magnetometer data from IMU and LP filters to remove noise
    3598:	f7fd fc6a 	bl	e70 <getIMUdata()>
  Madgwick(GyroX, -GyroY, -GyroZ, -AccX, AccY, AccZ, MagY, -MagX, MagZ, dt); //Updates roll_IMU, pitch_IMU, and yaw_IMU angle estimates (degrees)
    359c:	4b7b      	ldr	r3, [pc, #492]	; (378c <loop+0x27c>)
    359e:	edd3 1a00 	vldr	s3, [r3]
    35a2:	4b7b      	ldr	r3, [pc, #492]	; (3790 <loop+0x280>)
    35a4:	ed93 1a00 	vldr	s2, [r3]
    35a8:	4b7a      	ldr	r3, [pc, #488]	; (3794 <loop+0x284>)
    35aa:	edd3 0a00 	vldr	s1, [r3]
    Madgwick6DOF(gx, gy, gz, ax, ay, az, invSampleFreq);
    35ae:	4b70      	ldr	r3, [pc, #448]	; (3770 <loop+0x260>)
    35b0:	ed93 3a00 	vldr	s6, [r3]
    35b4:	4b78      	ldr	r3, [pc, #480]	; (3798 <loop+0x288>)
    35b6:	edd3 2a00 	vldr	s5, [r3]
    35ba:	4b78      	ldr	r3, [pc, #480]	; (379c <loop+0x28c>)
    35bc:	ed93 2a00 	vldr	s4, [r3]
    35c0:	eef1 1a61 	vneg.f32	s3, s3
    35c4:	eeb1 1a41 	vneg.f32	s2, s2
    35c8:	eef1 0a60 	vneg.f32	s1, s1
    35cc:	4b74      	ldr	r3, [pc, #464]	; (37a0 <loop+0x290>)
    35ce:	ed93 0a00 	vldr	s0, [r3]
    35d2:	f7ff fa05 	bl	29e0 <Madgwick6DOF(float, float, float, float, float, float, float)>
  getJoyAngle();
    35d6:	f7fe fc8b 	bl	1ef0 <getJoyAngle()>
  getDesState(); //Convert raw commands to normalized values based on saturated control limits
    35da:	f7fd feed 	bl	13b8 <getDesState()>
	if (useSerialAngleCommands) {
    35de:	4b71      	ldr	r3, [pc, #452]	; (37a4 <loop+0x294>)
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	2b00      	cmp	r3, #0
    35e4:	f040 819d 	bne.w	3922 <loop+0x412>
	if (conductSineSweep) {
    35e8:	4b65      	ldr	r3, [pc, #404]	; (3780 <loop+0x270>)
    35ea:	781b      	ldrb	r3, [r3, #0]
    35ec:	2b00      	cmp	r3, #0
    35ee:	f040 819d 	bne.w	392c <loop+0x41c>
	if (channel_8_pwm > 1250 && channel_8_pwm < 1750) {
    35f2:	4b6d      	ldr	r3, [pc, #436]	; (37a8 <loop+0x298>)
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	f2a3 43e3 	subw	r3, r3, #1251	; 0x4e3
    35fa:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
    35fe:	f240 819a 	bls.w	3936 <loop+0x426>
	if (channel_8_pwm > 1750) {
    3602:	4b69      	ldr	r3, [pc, #420]	; (37a8 <loop+0x298>)
    3604:	681a      	ldr	r2, [r3, #0]
    3606:	f240 63d6 	movw	r3, #1750	; 0x6d6
    360a:	429a      	cmp	r2, r3
    360c:	f300 8196 	bgt.w	393c <loop+0x42c>
	getPScale();
    3610:	f7ff f95e 	bl	28d0 <getPScale()>
	getIScale();
    3614:	f7ff f9a8 	bl	2968 <getIScale()>
	getDScale();
    3618:	f7ff f980 	bl	291c <getDScale()>
	if (irisFlag) {
    361c:	4b56      	ldr	r3, [pc, #344]	; (3778 <loop+0x268>)
    361e:	781b      	ldrb	r3, [r3, #0]
    3620:	2b00      	cmp	r3, #0
    3622:	f040 818e 	bne.w	3942 <loop+0x432>
	desState[0]   = pitch_des;
    3626:	4a61      	ldr	r2, [pc, #388]	; (37ac <loop+0x29c>)
    3628:	4b61      	ldr	r3, [pc, #388]	; (37b0 <loop+0x2a0>)
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	6013      	str	r3, [r2, #0]
	desState[1]   = yaw_des;
    362e:	4b61      	ldr	r3, [pc, #388]	; (37b4 <loop+0x2a4>)
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	6053      	str	r3, [r2, #4]
	desState[2]   = roll_des;
    3634:	4b60      	ldr	r3, [pc, #384]	; (37b8 <loop+0x2a8>)
    3636:	681b      	ldr	r3, [r3, #0]
    3638:	6093      	str	r3, [r2, #8]
	currState[0]  = pitch_IMU;
    363a:	4b60      	ldr	r3, [pc, #384]	; (37bc <loop+0x2ac>)
    363c:	4960      	ldr	r1, [pc, #384]	; (37c0 <loop+0x2b0>)
    363e:	6809      	ldr	r1, [r1, #0]
    3640:	6019      	str	r1, [r3, #0]
	currState[1]  = yaw_IMU;
    3642:	4960      	ldr	r1, [pc, #384]	; (37c4 <loop+0x2b4>)
    3644:	6809      	ldr	r1, [r1, #0]
    3646:	6059      	str	r1, [r3, #4]
	currState[2]  = roll_IMU;
    3648:	495f      	ldr	r1, [pc, #380]	; (37c8 <loop+0x2b8>)
    364a:	6809      	ldr	r1, [r1, #0]
    364c:	6099      	str	r1, [r3, #8]
      : Base(), m_storage(other.m_storage) { }
    364e:	ad4c      	add	r5, sp, #304	; 0x130
    3650:	ca07      	ldmia	r2, {r0, r1, r2}
    3652:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    3656:	ae4f      	add	r6, sp, #316	; 0x13c
    3658:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    365c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    Product(const Lhs& lhs, const Rhs& rhs) : m_lhs(lhs), m_rhs(rhs)
    3660:	4b5a      	ldr	r3, [pc, #360]	; (37cc <loop+0x2bc>)
    3662:	9352      	str	r3, [sp, #328]	; 0x148
    3664:	4b5a      	ldr	r3, [pc, #360]	; (37d0 <loop+0x2c0>)
    3666:	9353      	str	r3, [sp, #332]	; 0x14c
      * \sa MatrixBase::operator=(const EigenBase<OtherDerived>&)
      */
    template<typename OtherDerived>
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const EigenBase<OtherDerived> &other)
      : Base(other.derived())
    3668:	a952      	add	r1, sp, #328	; 0x148
    366a:	a804      	add	r0, sp, #16
    366c:	f7ff fe74 	bl	3358 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> > const&)>
    3670:	4b58      	ldr	r3, [pc, #352]	; (37d4 <loop+0x2c4>)
    3672:	9354      	str	r3, [sp, #336]	; 0x150
    3674:	4b58      	ldr	r3, [pc, #352]	; (37d8 <loop+0x2c8>)
    3676:	9355      	str	r3, [sp, #340]	; 0x154
    3678:	af0d      	add	r7, sp, #52	; 0x34
    367a:	a954      	add	r1, sp, #336	; 0x150
    367c:	4638      	mov	r0, r7
    367e:	f7ff fe6b 	bl	3358 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> > const&)>
    3682:	4b56      	ldr	r3, [pc, #344]	; (37dc <loop+0x2cc>)
    3684:	9356      	str	r3, [sp, #344]	; 0x158
    3686:	4b56      	ldr	r3, [pc, #344]	; (37e0 <loop+0x2d0>)
    3688:	9357      	str	r3, [sp, #348]	; 0x15c
    368a:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    368e:	a956      	add	r1, sp, #344	; 0x158
    3690:	4640      	mov	r0, r8
    3692:	f7ff fe61 	bl	3358 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, 0> > const&)>
	pidOutputVals = pidOutput(desState, currState, (P_gains*P_gainScale), (I_gains*I_gainScale),
    3696:	ac49      	add	r4, sp, #292	; 0x124
    3698:	4b52      	ldr	r3, [pc, #328]	; (37e4 <loop+0x2d4>)
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	f240 4223 	movw	r2, #1059	; 0x423
    36a0:	4293      	cmp	r3, r2
    36a2:	bfcc      	ite	gt
    36a4:	2300      	movgt	r3, #0
    36a6:	2301      	movle	r3, #1
    36a8:	9302      	str	r3, [sp, #8]
    36aa:	f8cd 8004 	str.w	r8, [sp, #4]
    36ae:	9700      	str	r7, [sp, #0]
    36b0:	ab04      	add	r3, sp, #16
    36b2:	4632      	mov	r2, r6
    36b4:	4629      	mov	r1, r5
    36b6:	4620      	mov	r0, r4
    36b8:	f000 fb70 	bl	3d9c <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)>
      m_storage = std::move(other.m_storage);
    36bc:	4b4a      	ldr	r3, [pc, #296]	; (37e8 <loop+0x2d8>)
    36be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    36c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pitch_PID     = pidOutputVals[0];
    36c6:	6819      	ldr	r1, [r3, #0]
    36c8:	4a48      	ldr	r2, [pc, #288]	; (37ec <loop+0x2dc>)
    36ca:	6011      	str	r1, [r2, #0]
	yaw_PID       = pidOutputVals[1];
    36cc:	6859      	ldr	r1, [r3, #4]
    36ce:	4a48      	ldr	r2, [pc, #288]	; (37f0 <loop+0x2e0>)
    36d0:	6011      	str	r1, [r2, #0]
	roll_PID      = pidOutputVals[2];
    36d2:	689a      	ldr	r2, [r3, #8]
    36d4:	4b47      	ldr	r3, [pc, #284]	; (37f4 <loop+0x2e4>)
    36d6:	601a      	str	r2, [r3, #0]
  controlMixer(); //Mixes PID outputs to scaled actuator commands -- custom mixing assignments done here
    36d8:	f7fd fb42 	bl	d60 <controlMixer()>
  scaleCommands(); //Scales motor commands to 125 to 250 range (oneshot125 protocol) and servo PWM commands to 0 to 180 (for servo library)
    36dc:	f7fd fff0 	bl	16c0 <scaleCommands()>
  throttleCut(); //Directly sets motor commands to low based on state of ch5
    36e0:	f7fe fb5c 	bl	1d9c <throttleCut()>
  servo1.write(s1_command_PWM); //Writes PWM value to servo object
    36e4:	4b44      	ldr	r3, [pc, #272]	; (37f8 <loop+0x2e8>)
    36e6:	6819      	ldr	r1, [r3, #0]
    36e8:	4844      	ldr	r0, [pc, #272]	; (37fc <loop+0x2ec>)
    36ea:	f001 fe1f 	bl	532c <PWMServo::write(int)>
  servo2.write(s2_command_PWM);
    36ee:	4b44      	ldr	r3, [pc, #272]	; (3800 <loop+0x2f0>)
    36f0:	6819      	ldr	r1, [r3, #0]
    36f2:	4844      	ldr	r0, [pc, #272]	; (3804 <loop+0x2f4>)
    36f4:	f001 fe1a 	bl	532c <PWMServo::write(int)>
  servo3.write(s3_command_PWM);
    36f8:	4b43      	ldr	r3, [pc, #268]	; (3808 <loop+0x2f8>)
    36fa:	6819      	ldr	r1, [r3, #0]
    36fc:	4843      	ldr	r0, [pc, #268]	; (380c <loop+0x2fc>)
    36fe:	f001 fe15 	bl	532c <PWMServo::write(int)>
  servo4.write(s4_command_PWM);
    3702:	4b43      	ldr	r3, [pc, #268]	; (3810 <loop+0x300>)
    3704:	6819      	ldr	r1, [r3, #0]
    3706:	4843      	ldr	r0, [pc, #268]	; (3814 <loop+0x304>)
    3708:	f001 fe10 	bl	532c <PWMServo::write(int)>
  servo5.write(s5_command_PWM);
    370c:	4b42      	ldr	r3, [pc, #264]	; (3818 <loop+0x308>)
    370e:	6819      	ldr	r1, [r3, #0]
    3710:	4842      	ldr	r0, [pc, #264]	; (381c <loop+0x30c>)
    3712:	f001 fe0b 	bl	532c <PWMServo::write(int)>
  servo6.write(s6_command_PWM);
    3716:	4b42      	ldr	r3, [pc, #264]	; (3820 <loop+0x310>)
    3718:	6819      	ldr	r1, [r3, #0]
    371a:	4842      	ldr	r0, [pc, #264]	; (3824 <loop+0x314>)
    371c:	f001 fe06 	bl	532c <PWMServo::write(int)>
  servo7.write(s7_command_PWM);
    3720:	4b41      	ldr	r3, [pc, #260]	; (3828 <loop+0x318>)
    3722:	6819      	ldr	r1, [r3, #0]
    3724:	4841      	ldr	r0, [pc, #260]	; (382c <loop+0x31c>)
    3726:	f001 fe01 	bl	532c <PWMServo::write(int)>
  getCommands(); //Pulls current available radio commands
    372a:	f7fe f85d 	bl	17e8 <getCommands()>
  failSafe(); //Prevent failures in event of bad receiver connection, defaults to failsafe values assigned in setup
    372e:	f7fe fac9 	bl	1cc4 <failSafe()>
  loopRate(2000); //Do not exceed 2000Hz, all filter parameters tuned to 2000Hz by default
    3732:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    3736:	f7fe fb57 	bl	1de8 <loopRate(int)>
}
    373a:	b059      	add	sp, #356	; 0x164
    373c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		irisFlag = 1;
    3740:	4b0d      	ldr	r3, [pc, #52]	; (3778 <loop+0x268>)
    3742:	2201      	movs	r2, #1
    3744:	701a      	strb	r2, [r3, #0]
		openIris();
    3746:	f7fe fc6b 	bl	2020 <openIris()>
    374a:	e70e      	b.n	356a <loop+0x5a>
		conductSineSweep = 0;
    374c:	4b0c      	ldr	r3, [pc, #48]	; (3780 <loop+0x270>)
    374e:	2200      	movs	r2, #0
    3750:	701a      	strb	r2, [r3, #0]
		sineTime = 0;
    3752:	4b37      	ldr	r3, [pc, #220]	; (3830 <loop+0x320>)
    3754:	2200      	movs	r2, #0
    3756:	601a      	str	r2, [r3, #0]
    3758:	e711      	b.n	357e <loop+0x6e>
    375a:	bf00      	nop
    375c:	f3af 8000 	nop.w
    3760:	00000000 	.word	0x00000000
    3764:	412e8480 	.word	0x412e8480
    3768:	200055c4 	.word	0x200055c4
    376c:	200054f4 	.word	0x200054f4
    3770:	2000551c 	.word	0x2000551c
    3774:	200054d0 	.word	0x200054d0
    3778:	2000583e 	.word	0x2000583e
    377c:	200054d4 	.word	0x200054d4
    3780:	2000583a 	.word	0x2000583a
    3784:	2000582e 	.word	0x2000582e
    3788:	20003d20 	.word	0x20003d20
    378c:	200044e8 	.word	0x200044e8
    3790:	20004558 	.word	0x20004558
    3794:	20004550 	.word	0x20004550
    3798:	200044f8 	.word	0x200044f8
    379c:	200044f0 	.word	0x200044f0
    37a0:	20004548 	.word	0x20004548
    37a4:	2000584b 	.word	0x2000584b
    37a8:	200054d8 	.word	0x200054d8
    37ac:	20005508 	.word	0x20005508
    37b0:	200055bc 	.word	0x200055bc
    37b4:	20005820 	.word	0x20005820
    37b8:	200055e8 	.word	0x200055e8
    37bc:	200054e0 	.word	0x200054e0
    37c0:	200055b4 	.word	0x200055b4
    37c4:	20005818 	.word	0x20005818
    37c8:	200055e0 	.word	0x200055e0
    37cc:	20004608 	.word	0x20004608
    37d0:	200045e4 	.word	0x200045e4
    37d4:	20004584 	.word	0x20004584
    37d8:	20004560 	.word	0x20004560
    37dc:	20004524 	.word	0x20004524
    37e0:	20004500 	.word	0x20004500
    37e4:	2000549c 	.word	0x2000549c
    37e8:	200055a0 	.word	0x200055a0
    37ec:	200055b8 	.word	0x200055b8
    37f0:	2000581c 	.word	0x2000581c
    37f4:	200055e4 	.word	0x200055e4
    37f8:	20005620 	.word	0x20005620
    37fc:	200057cc 	.word	0x200057cc
    3800:	20005628 	.word	0x20005628
    3804:	200057d0 	.word	0x200057d0
    3808:	20005630 	.word	0x20005630
    380c:	200057d4 	.word	0x200057d4
    3810:	20005638 	.word	0x20005638
    3814:	200057d8 	.word	0x200057d8
    3818:	20005640 	.word	0x20005640
    381c:	200057dc 	.word	0x200057dc
    3820:	20005648 	.word	0x20005648
    3824:	200057e0 	.word	0x200057e0
    3828:	20005650 	.word	0x20005650
    382c:	200057e4 	.word	0x200057e4
    3830:	200057f0 	.word	0x200057f0
    print_counterSD = micros();
    3834:	f009 fed2 	bl	d5dc <micros>
    3838:	4b80      	ldr	r3, [pc, #512]	; (3a3c <loop+0x52c>)
    383a:	6018      	str	r0, [r3, #0]
    String dataString;
    383c:	2100      	movs	r1, #0
    383e:	a80d      	add	r0, sp, #52	; 0x34
    3840:	f009 fc4b 	bl	d0da <String::String(char const*)>
    dataString = getDataString();
    3844:	a839      	add	r0, sp, #228	; 0xe4
    3846:	f7fe fc91 	bl	216c <getDataString()>
    384a:	a939      	add	r1, sp, #228	; 0xe4
    384c:	a80d      	add	r0, sp, #52	; 0x34
    384e:	f009 fc81 	bl	d154 <String::operator=(String&&)>
    3852:	a839      	add	r0, sp, #228	; 0xe4
    3854:	f009 fbf8 	bl	d048 <String::~String()>
    3858:	4b79      	ldr	r3, [pc, #484]	; (3a40 <loop+0x530>)
    385a:	681a      	ldr	r2, [r3, #0]
    385c:	2a00      	cmp	r2, #0
    385e:	d04e      	beq.n	38fe <loop+0x3ee>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3860:	f244 2302 	movw	r3, #16898	; 0x4202
    3864:	4977      	ldr	r1, [pc, #476]	; (3a44 <loop+0x534>)
    3866:	a816      	add	r0, sp, #88	; 0x58
    3868:	f006 fd78 	bl	a35c <FsVolume::open(char const*, int)>
    386c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    386e:	2b00      	cmp	r3, #0
    3870:	d047      	beq.n	3902 <loop+0x3f2>
		if (file) return File(new SDFile(file));
    3872:	205c      	movs	r0, #92	; 0x5c
    3874:	f00a f80a 	bl	d88c <operator new(unsigned int)>
    3878:	4605      	mov	r5, r0
class FileImpl {
    387a:	2600      	movs	r6, #0
    387c:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    387e:	4b72      	ldr	r3, [pc, #456]	; (3a48 <loop+0x538>)
    3880:	6003      	str	r3, [r0, #0]
class Print
    3882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3884:	60c3      	str	r3, [r0, #12]
    3886:	4b71      	ldr	r3, [pc, #452]	; (3a4c <loop+0x53c>)
    3888:	6083      	str	r3, [r0, #8]
    388a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    388c:	6103      	str	r3, [r0, #16]
    388e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    3892:	7503      	strb	r3, [r0, #20]
    3894:	a91a      	add	r1, sp, #104	; 0x68
    3896:	3018      	adds	r0, #24
    3898:	f006 fc29 	bl	a0ee <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    389c:	4b6c      	ldr	r3, [pc, #432]	; (3a50 <loop+0x540>)
    389e:	60ab      	str	r3, [r5, #8]
    38a0:	65ae      	str	r6, [r5, #88]	; 0x58
		if (f) f->refcount++;
    38a2:	686b      	ldr	r3, [r5, #4]
    38a4:	3301      	adds	r3, #1
    38a6:	606b      	str	r3, [r5, #4]
    38a8:	4b6a      	ldr	r3, [pc, #424]	; (3a54 <loop+0x544>)
    38aa:	9316      	str	r3, [sp, #88]	; 0x58
  ~FsBaseFile() {close();}
    38ac:	a81a      	add	r0, sp, #104	; 0x68
    38ae:	f006 fc5f 	bl	a170 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    38b2:	4b69      	ldr	r3, [pc, #420]	; (3a58 <loop+0x548>)
    38b4:	691b      	ldr	r3, [r3, #16]
    38b6:	2b00      	cmp	r3, #0
    38b8:	f000 8096 	beq.w	39e8 <loop+0x4d8>
		if (--(f->refcount) == 0) {
    38bc:	685a      	ldr	r2, [r3, #4]
    38be:	3a01      	subs	r2, #1
    38c0:	605a      	str	r2, [r3, #4]
    38c2:	b94a      	cbnz	r2, 38d8 <loop+0x3c8>
			f->close();
    38c4:	4e64      	ldr	r6, [pc, #400]	; (3a58 <loop+0x548>)
    38c6:	6930      	ldr	r0, [r6, #16]
    38c8:	6803      	ldr	r3, [r0, #0]
    38ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38cc:	4798      	blx	r3
			delete f;
    38ce:	6930      	ldr	r0, [r6, #16]
    38d0:	b110      	cbz	r0, 38d8 <loop+0x3c8>
    38d2:	6803      	ldr	r3, [r0, #0]
    38d4:	685b      	ldr	r3, [r3, #4]
    38d6:	4798      	blx	r3
		f = file.f;
    38d8:	4b5f      	ldr	r3, [pc, #380]	; (3a58 <loop+0x548>)
    38da:	611d      	str	r5, [r3, #16]
		return (f) ? f->isOpen() : false;
    38dc:	2d00      	cmp	r5, #0
    38de:	f040 8085 	bne.w	39ec <loop+0x4dc>
							  return write((const uint8_t *)str, strlen(str)); }
    38e2:	4d5e      	ldr	r5, [pc, #376]	; (3a5c <loop+0x54c>)
    38e4:	682b      	ldr	r3, [r5, #0]
    38e6:	685b      	ldr	r3, [r3, #4]
    38e8:	2219      	movs	r2, #25
    38ea:	495d      	ldr	r1, [pc, #372]	; (3a60 <loop+0x550>)
    38ec:	4628      	mov	r0, r5
    38ee:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    38f0:	4628      	mov	r0, r5
    38f2:	f009 f942 	bl	cb7a <Print::println()>
  }
    38f6:	a80d      	add	r0, sp, #52	; 0x34
    38f8:	f009 fba6 	bl	d048 <String::~String()>
    38fc:	e64c      	b.n	3598 <loop+0x88>
    38fe:	4a59      	ldr	r2, [pc, #356]	; (3a64 <loop+0x554>)
    3900:	e7ae      	b.n	3860 <loop+0x350>
  bool isOpen() const {return m_fFile || m_xFile;}
    3902:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    3904:	2d00      	cmp	r5, #0
    3906:	d1b4      	bne.n	3872 <loop+0x362>
    3908:	4b52      	ldr	r3, [pc, #328]	; (3a54 <loop+0x544>)
    390a:	9316      	str	r3, [sp, #88]	; 0x58
  ~FsBaseFile() {close();}
    390c:	a81a      	add	r0, sp, #104	; 0x68
    390e:	f006 fc2f 	bl	a170 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3912:	4b51      	ldr	r3, [pc, #324]	; (3a58 <loop+0x548>)
    3914:	691b      	ldr	r3, [r3, #16]
    3916:	2b00      	cmp	r3, #0
    3918:	d1d0      	bne.n	38bc <loop+0x3ac>
		f = file.f;
    391a:	4b4f      	ldr	r3, [pc, #316]	; (3a58 <loop+0x548>)
    391c:	2200      	movs	r2, #0
    391e:	611a      	str	r2, [r3, #16]
		return (f) ? f->isOpen() : false;
    3920:	e7df      	b.n	38e2 <loop+0x3d2>
		setDesStateSerial(axisToRotate);
    3922:	4b51      	ldr	r3, [pc, #324]	; (3a68 <loop+0x558>)
    3924:	6818      	ldr	r0, [r3, #0]
    3926:	f7fd fc3f 	bl	11a8 <setDesStateSerial(int)>
    392a:	e65d      	b.n	35e8 <loop+0xd8>
  	performSineSweep(axisToRotate);
    392c:	4b4e      	ldr	r3, [pc, #312]	; (3a68 <loop+0x558>)
    392e:	6818      	ldr	r0, [r3, #0]
    3930:	f7fd fc9a 	bl	1268 <performSineSweep(int)>
    3934:	e65d      	b.n	35f2 <loop+0xe2>
		rollStep();
    3936:	f7fd fd07 	bl	1348 <rollStep()>
    393a:	e662      	b.n	3602 <loop+0xf2>
		pitchStep();
    393c:	f7fd fd20 	bl	1380 <pitchStep()>
    3940:	e666      	b.n	3610 <loop+0x100>
		desState_rip[0]   = alphaRoll_des;
    3942:	4a4a      	ldr	r2, [pc, #296]	; (3a6c <loop+0x55c>)
    3944:	4b4a      	ldr	r3, [pc, #296]	; (3a70 <loop+0x560>)
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	6013      	str	r3, [r2, #0]
		desState_rip[1]   = betaPitch_des;
    394a:	4b4a      	ldr	r3, [pc, #296]	; (3a74 <loop+0x564>)
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	6053      	str	r3, [r2, #4]
		currState_rip[0]  = alphaRoll;
    3950:	4b49      	ldr	r3, [pc, #292]	; (3a78 <loop+0x568>)
    3952:	494a      	ldr	r1, [pc, #296]	; (3a7c <loop+0x56c>)
    3954:	6809      	ldr	r1, [r1, #0]
    3956:	6019      	str	r1, [r3, #0]
		currState_rip[1]  = betaPitch;
    3958:	4949      	ldr	r1, [pc, #292]	; (3a80 <loop+0x570>)
    395a:	6809      	ldr	r1, [r1, #0]
    395c:	6059      	str	r1, [r3, #4]
      : Base(), m_storage(other.m_storage) { }
    395e:	ae3f      	add	r6, sp, #252	; 0xfc
    3960:	e892 0003 	ldmia.w	r2, {r0, r1}
    3964:	e886 0003 	stmia.w	r6, {r0, r1}
    3968:	af41      	add	r7, sp, #260	; 0x104
    396a:	e893 0003 	ldmia.w	r3, {r0, r1}
    396e:	e887 0003 	stmia.w	r7, {r0, r1}
    3972:	4b44      	ldr	r3, [pc, #272]	; (3a84 <loop+0x574>)
    3974:	9343      	str	r3, [sp, #268]	; 0x10c
    3976:	4b44      	ldr	r3, [pc, #272]	; (3a88 <loop+0x578>)
    3978:	9344      	str	r3, [sp, #272]	; 0x110
    397a:	f104 0820 	add.w	r8, r4, #32
    397e:	a943      	add	r1, sp, #268	; 0x10c
    3980:	4640      	mov	r0, r8
    3982:	f7ff fc95 	bl	32b0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)>
    3986:	4b41      	ldr	r3, [pc, #260]	; (3a8c <loop+0x57c>)
    3988:	9345      	str	r3, [sp, #276]	; 0x114
    398a:	4b41      	ldr	r3, [pc, #260]	; (3a90 <loop+0x580>)
    398c:	9346      	str	r3, [sp, #280]	; 0x118
    398e:	f104 0910 	add.w	r9, r4, #16
    3992:	a945      	add	r1, sp, #276	; 0x114
    3994:	4648      	mov	r0, r9
    3996:	f7ff fc8b 	bl	32b0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)>
    399a:	4b3e      	ldr	r3, [pc, #248]	; (3a94 <loop+0x584>)
    399c:	9347      	str	r3, [sp, #284]	; 0x11c
    399e:	4b3e      	ldr	r3, [pc, #248]	; (3a98 <loop+0x588>)
    39a0:	9348      	str	r3, [sp, #288]	; 0x120
    39a2:	a947      	add	r1, sp, #284	; 0x11c
    39a4:	4620      	mov	r0, r4
    39a6:	f7ff fc83 	bl	32b0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 2, 2, 0, 2, 2> >::PlainObjectBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> >(Eigen::DenseBase<Eigen::Product<Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, 0> > const&)>
		pidOutputVals_rip = pidOutput_rip(desState_rip, currState_rip, (P_gains_rip*P_gainScale_rip),
    39aa:	ad3d      	add	r5, sp, #244	; 0xf4
    39ac:	4b3b      	ldr	r3, [pc, #236]	; (3a9c <loop+0x58c>)
    39ae:	681b      	ldr	r3, [r3, #0]
    39b0:	f240 4223 	movw	r2, #1059	; 0x423
    39b4:	4293      	cmp	r3, r2
    39b6:	bfcc      	ite	gt
    39b8:	2300      	movgt	r3, #0
    39ba:	2301      	movle	r3, #1
    39bc:	9302      	str	r3, [sp, #8]
    39be:	9401      	str	r4, [sp, #4]
    39c0:	f8cd 9000 	str.w	r9, [sp]
    39c4:	4643      	mov	r3, r8
    39c6:	463a      	mov	r2, r7
    39c8:	4631      	mov	r1, r6
    39ca:	4628      	mov	r0, r5
    39cc:	f000 f8b0 	bl	3b30 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)>
      m_storage = std::move(other.m_storage);
    39d0:	4b33      	ldr	r3, [pc, #204]	; (3aa0 <loop+0x590>)
    39d2:	e895 0003 	ldmia.w	r5, {r0, r1}
    39d6:	e883 0003 	stmia.w	r3, {r0, r1}
		roll_des          = pidOutputVals_rip[0];
    39da:	6819      	ldr	r1, [r3, #0]
    39dc:	4a31      	ldr	r2, [pc, #196]	; (3aa4 <loop+0x594>)
    39de:	6011      	str	r1, [r2, #0]
		pitch_des         = pidOutputVals_rip[1];
    39e0:	685a      	ldr	r2, [r3, #4]
    39e2:	4b31      	ldr	r3, [pc, #196]	; (3aa8 <loop+0x598>)
    39e4:	601a      	str	r2, [r3, #0]
    39e6:	e61e      	b.n	3626 <loop+0x116>
		f = file.f;
    39e8:	4b1b      	ldr	r3, [pc, #108]	; (3a58 <loop+0x548>)
    39ea:	611d      	str	r5, [r3, #16]
		return (f) ? f->isOpen() : false;
    39ec:	682b      	ldr	r3, [r5, #0]
    39ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    39f0:	4628      	mov	r0, r5
    39f2:	4798      	blx	r3
    if (dataFile) {
    39f4:	2800      	cmp	r0, #0
    39f6:	f43f af74 	beq.w	38e2 <loop+0x3d2>
	size_t println(const String &s)			{ return print(s) + println(); }
    39fa:	4d17      	ldr	r5, [pc, #92]	; (3a58 <loop+0x548>)
    39fc:	a90d      	add	r1, sp, #52	; 0x34
    39fe:	4628      	mov	r0, r5
    3a00:	f009 f896 	bl	cb30 <Print::print(String const&)>
    3a04:	4628      	mov	r0, r5
    3a06:	f009 f8b8 	bl	cb7a <Print::println()>
		if (f) {
    3a0a:	6928      	ldr	r0, [r5, #16]
    3a0c:	2800      	cmp	r0, #0
    3a0e:	f43f af72 	beq.w	38f6 <loop+0x3e6>
			f->close();
    3a12:	6803      	ldr	r3, [r0, #0]
    3a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a16:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    3a18:	692a      	ldr	r2, [r5, #16]
    3a1a:	6853      	ldr	r3, [r2, #4]
    3a1c:	3b01      	subs	r3, #1
    3a1e:	6053      	str	r3, [r2, #4]
    3a20:	b943      	cbnz	r3, 3a34 <loop+0x524>
			f->close();
    3a22:	6928      	ldr	r0, [r5, #16]
    3a24:	6803      	ldr	r3, [r0, #0]
    3a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a28:	4798      	blx	r3
			delete f;
    3a2a:	6928      	ldr	r0, [r5, #16]
    3a2c:	b110      	cbz	r0, 3a34 <loop+0x524>
    3a2e:	6803      	ldr	r3, [r0, #0]
    3a30:	685b      	ldr	r3, [r3, #4]
    3a32:	4798      	blx	r3
		f = nullptr;
    3a34:	4b08      	ldr	r3, [pc, #32]	; (3a58 <loop+0x548>)
    3a36:	2200      	movs	r2, #0
    3a38:	611a      	str	r2, [r3, #16]
	}
    3a3a:	e75c      	b.n	38f6 <loop+0x3e6>
    3a3c:	20003d20 	.word	0x20003d20
    3a40:	20005554 	.word	0x20005554
    3a44:	20004630 	.word	0x20004630
    3a48:	200027b0 	.word	0x200027b0
    3a4c:	2000280c 	.word	0x2000280c
    3a50:	2000278c 	.word	0x2000278c
    3a54:	20002680 	.word	0x20002680
    3a58:	20003c9c 	.word	0x20003c9c
    3a5c:	20003634 	.word	0x20003634
    3a60:	20002f2c 	.word	0x20002f2c
    3a64:	200034bc 	.word	0x200034bc
    3a68:	20003c50 	.word	0x20003c50
    3a6c:	20005514 	.word	0x20005514
    3a70:	2000545c 	.word	0x2000545c
    3a74:	20005470 	.word	0x20005470
    3a78:	200054ec 	.word	0x200054ec
    3a7c:	20005458 	.word	0x20005458
    3a80:	2000546c 	.word	0x2000546c
    3a84:	200044d0 	.word	0x200044d0
    3a88:	200044c0 	.word	0x200044c0
    3a8c:	200044b0 	.word	0x200044b0
    3a90:	200044a0 	.word	0x200044a0
    3a94:	20004490 	.word	0x20004490
    3a98:	20004480 	.word	0x20004480
    3a9c:	2000549c 	.word	0x2000549c
    3aa0:	200055ac 	.word	0x200055ac
    3aa4:	200055e8 	.word	0x200055e8
    3aa8:	200055bc 	.word	0x200055bc

00003aac <_GLOBAL__sub_I_mpu6050>:
    rising_edge_start_6 = micros();
  }
  else if(trigger == 0) {
    channel_6_raw = micros() - rising_edge_start_6;
  }
}
    3aac:	b510      	push	{r4, lr}
  MPU6050 mpu6050;
    3aae:	2168      	movs	r1, #104	; 0x68
    3ab0:	4812      	ldr	r0, [pc, #72]	; (3afc <_GLOBAL__sub_I_mpu6050+0x50>)
    3ab2:	f000 fbc3 	bl	423c <MPU6050::MPU6050(unsigned char)>
  SBUS sbus(Serial5);
    3ab6:	4c12      	ldr	r4, [pc, #72]	; (3b00 <_GLOBAL__sub_I_mpu6050+0x54>)
    3ab8:	4912      	ldr	r1, [pc, #72]	; (3b04 <_GLOBAL__sub_I_mpu6050+0x58>)
    3aba:	4620      	mov	r0, r4
    3abc:	f000 fc50 	bl	4360 <SBUS::SBUS(HardwareSerial&)>
    3ac0:	4a11      	ldr	r2, [pc, #68]	; (3b08 <_GLOBAL__sub_I_mpu6050+0x5c>)
    3ac2:	4912      	ldr	r1, [pc, #72]	; (3b0c <_GLOBAL__sub_I_mpu6050+0x60>)
    3ac4:	4620      	mov	r0, r4
    3ac6:	f00d fa9d 	bl	11004 <__aeabi_atexit>
PWMServo iris;
    3aca:	4811      	ldr	r0, [pc, #68]	; (3b10 <_GLOBAL__sub_I_mpu6050+0x64>)
    3acc:	f001 fbdc 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo1;
    3ad0:	4810      	ldr	r0, [pc, #64]	; (3b14 <_GLOBAL__sub_I_mpu6050+0x68>)
    3ad2:	f001 fbd9 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo2;
    3ad6:	4810      	ldr	r0, [pc, #64]	; (3b18 <_GLOBAL__sub_I_mpu6050+0x6c>)
    3ad8:	f001 fbd6 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo3;
    3adc:	480f      	ldr	r0, [pc, #60]	; (3b1c <_GLOBAL__sub_I_mpu6050+0x70>)
    3ade:	f001 fbd3 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo4;
    3ae2:	480f      	ldr	r0, [pc, #60]	; (3b20 <_GLOBAL__sub_I_mpu6050+0x74>)
    3ae4:	f001 fbd0 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo5;
    3ae8:	480e      	ldr	r0, [pc, #56]	; (3b24 <_GLOBAL__sub_I_mpu6050+0x78>)
    3aea:	f001 fbcd 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo6;
    3aee:	480e      	ldr	r0, [pc, #56]	; (3b28 <_GLOBAL__sub_I_mpu6050+0x7c>)
    3af0:	f001 fbca 	bl	5288 <PWMServo::PWMServo()>
PWMServo servo7;
    3af4:	480d      	ldr	r0, [pc, #52]	; (3b2c <_GLOBAL__sub_I_mpu6050+0x80>)
    3af6:	f001 fbc7 	bl	5288 <PWMServo::PWMServo()>
    3afa:	bd10      	pop	{r4, pc}
    3afc:	20005578 	.word	0x20005578
    3b00:	20005668 	.word	0x20005668
    3b04:	20004bf0 	.word	0x20004bf0
    3b08:	200036b0 	.word	0x200036b0
    3b0c:	000043a9 	.word	0x000043a9
    3b10:	20005574 	.word	0x20005574
    3b14:	200057cc 	.word	0x200057cc
    3b18:	200057d0 	.word	0x200057d0
    3b1c:	200057d4 	.word	0x200057d4
    3b20:	200057d8 	.word	0x200057d8
    3b24:	200057dc 	.word	0x200057dc
    3b28:	200057e0 	.word	0x200057e0
    3b2c:	200057e4 	.word	0x200057e4

00003b30 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)>:

	return PIDValues;
}

Vector2f pidOutput_rip(Vector2f refState, Vector2f currState, Matrix2f P_gains, 
									 Matrix2f I_gains, Matrix2f D_gains, bool lowThrottle) {
    3b30:	b4f0      	push	{r4, r5, r6, r7}
    3b32:	b082      	sub	sp, #8
    3b34:	9c06      	ldr	r4, [sp, #24]
    3b36:	9d07      	ldr	r5, [sp, #28]
    3b38:	f89d 6020 	ldrb.w	r6, [sp, #32]

	//----- DECLARATIONS -----//
	// Declared as static so that the variables remain in memory while the program is running, even
	// outside of this function.
	static Vector2f integralOld(0,0);
    3b3c:	4f6b      	ldr	r7, [pc, #428]	; (3cec <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1bc>)
    3b3e:	683f      	ldr	r7, [r7, #0]
    3b40:	f017 0f01 	tst.w	r7, #1
    3b44:	d10b      	bne.n	3b5e <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x2e>
                                                                  && (internal::is_same<T0,Index>::value)
                                                                  && (internal::is_same<T1,Index>::value)
                                                                  && Base::SizeAtCompileTime==2,T1>::type* = 0)
    {
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(PlainObjectBase, 2)
      m_storage.data()[0] = Scalar(val0);
    3b46:	4f6a      	ldr	r7, [pc, #424]	; (3cf0 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c0>)
    3b48:	f04f 0c00 	mov.w	ip, #0
    3b4c:	f8c7 c000 	str.w	ip, [r7]
      m_storage.data()[1] = Scalar(val1);
    3b50:	f8c7 c004 	str.w	ip, [r7, #4]
    3b54:	4f65      	ldr	r7, [pc, #404]	; (3cec <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1bc>)
    3b56:	f04f 0c01 	mov.w	ip, #1
    3b5a:	f8c7 c000 	str.w	ip, [r7]
	static Vector2f errorOld(0,0);
    3b5e:	4f65      	ldr	r7, [pc, #404]	; (3cf4 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c4>)
    3b60:	683f      	ldr	r7, [r7, #0]
    3b62:	f017 0f01 	tst.w	r7, #1
    3b66:	d10b      	bne.n	3b80 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x50>
      m_storage.data()[0] = Scalar(val0);
    3b68:	4f63      	ldr	r7, [pc, #396]	; (3cf8 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c8>)
    3b6a:	f04f 0c00 	mov.w	ip, #0
    3b6e:	f8c7 c000 	str.w	ip, [r7]
      m_storage.data()[1] = Scalar(val1);
    3b72:	f8c7 c004 	str.w	ip, [r7, #4]
    3b76:	4f5f      	ldr	r7, [pc, #380]	; (3cf4 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c4>)
    3b78:	f04f 0c01 	mov.w	ip, #1
    3b7c:	f8c7 c000 	str.w	ip, [r7]
      m_storage.data()[0] = Scalar(val0);
    3b80:	f04f 0c00 	mov.w	ip, #0
    3b84:	f8cd c000 	str.w	ip, [sp]
      m_storage.data()[1] = Scalar(val1);
    3b88:	f8cd c004 	str.w	ip, [sp, #4]
      m_storage.data()[0] = Scalar(val0);
    3b8c:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = Scalar(val1);
    3b90:	f8c0 c004 	str.w	ip, [r0, #4]
#else
  scalar_difference_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3b94:	edd1 5a00 	vldr	s11, [r1]
    3b98:	edd2 7a00 	vldr	s15, [r2]
    3b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    3ba0:	ed91 6a01 	vldr	s12, [r1, #4]
    3ba4:	edd2 7a01 	vldr	s15, [r2, #4]
    3ba8:	ee36 6a67 	vsub.f32	s12, s12, s15
	//----- END DECLARATIONS -----//
	
	error = refState - currState;

	// Prevent integral buildup with low throttle
	if (!lowThrottle) {
    3bac:	b116      	cbz	r6, 3bb4 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x84>
		integral = integralOld + error*dt;
	}

	// Saturate integral to prevent buildup
	for (int lv1=0; lv1<2; lv1++) {
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    3bae:	ed9d 4a00 	vldr	s8, [sp]
    3bb2:	e01a      	b.n	3bea <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0xba>
namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const Scalar& other) : m_other(other) { }
    3bb4:	4a51      	ldr	r2, [pc, #324]	; (3cfc <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1cc>)
    3bb6:	edd2 7a00 	vldr	s15, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3bba:	ee27 7aa5 	vmul.f32	s14, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3bbe:	4a4c      	ldr	r2, [pc, #304]	; (3cf0 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c0>)
    3bc0:	edd2 6a00 	vldr	s13, [r2]
    3bc4:	ee37 7a26 	vadd.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3bc8:	ee67 7a86 	vmul.f32	s15, s15, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3bcc:	edd2 6a01 	vldr	s13, [r2, #4]
    3bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
    3bd4:	edcd 7a01 	vstr	s15, [sp, #4]
    3bd8:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3be4:	d513      	bpl.n	3c0e <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0xde>
    3be6:	eebb 4a09 	vmov.f32	s8, #185	; 0xc1c80000 -25.0
    3bea:	eddd 7a01 	vldr	s15, [sp, #4]
    3bee:	eebb 7a09 	vmov.f32	s14, #185	; 0xc1c80000 -25.0
    3bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
    3bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3bfa:	d411      	bmi.n	3c20 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0xf0>
    3bfc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
    3c00:	eef4 7a47 	vcmp.f32	s15, s14
    3c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c08:	fe77 7a27 	vselgt.f32	s15, s14, s15
    3c0c:	e00a      	b.n	3c24 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0xf4>
    3c0e:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    3c12:	eeb4 7a67 	vcmp.f32	s14, s15
    3c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c1a:	fe37 4a87 	vselgt.f32	s8, s15, s14
    3c1e:	e7e4      	b.n	3bea <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0xba>
    3c20:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3c24:	4a35      	ldr	r2, [pc, #212]	; (3cfc <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1cc>)
    3c26:	edd2 6a00 	vldr	s13, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3c2a:	4a33      	ldr	r2, [pc, #204]	; (3cf8 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c8>)
    3c2c:	ed92 7a00 	vldr	s14, [r2]
    3c30:	ee35 7ac7 	vsub.f32	s14, s11, s14
#else
  scalar_quotient_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
    3c34:	eec7 4a26 	vdiv.f32	s9, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3c38:	ed92 7a01 	vldr	s14, [r2, #4]
    3c3c:	ee36 7a47 	vsub.f32	s14, s12, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
    3c40:	ee87 5a26 	vdiv.f32	s10, s14, s13
    3c44:	492a      	ldr	r1, [pc, #168]	; (3cf0 <pidOutput_rip(Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, Eigen::Matrix<float, 2, 2, 0, 2, 2>, bool)+0x1c0>)
    3c46:	ed81 4a00 	vstr	s8, [r1]
    3c4a:	edc1 7a01 	vstr	s15, [r1, #4]
    3c4e:	edc2 5a00 	vstr	s11, [r2]
    3c52:	ed82 6a01 	vstr	s12, [r2, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3c56:	ed93 7a03 	vldr	s14, [r3, #12]
    3c5a:	ee26 7a07 	vmul.f32	s14, s12, s14
    3c5e:	edd3 6a01 	vldr	s13, [r3, #4]
    3c62:	ee65 6aa6 	vmul.f32	s13, s11, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3c66:	ee37 7a26 	vadd.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3c6a:	edd4 6a03 	vldr	s13, [r4, #12]
    3c6e:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3c72:	edd4 3a01 	vldr	s7, [r4, #4]
    3c76:	ee64 3a23 	vmul.f32	s7, s8, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3c7a:	ee76 6aa3 	vadd.f32	s13, s13, s7
  *
  */
template<typename DstScalar,typename SrcScalar> struct add_assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(add_assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a += b; }
    3c7e:	ee37 7a26 	vadd.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3c82:	edd5 6a03 	vldr	s13, [r5, #12]
    3c86:	ee65 6a26 	vmul.f32	s13, s10, s13
    3c8a:	edd5 3a01 	vldr	s7, [r5, #4]
    3c8e:	ee64 3aa3 	vmul.f32	s7, s9, s7
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3c92:	ee76 6aa3 	vadd.f32	s13, s13, s7
    3c96:	ee37 7a26 	vadd.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3c9a:	edd3 6a02 	vldr	s13, [r3, #8]
    3c9e:	ee66 6a26 	vmul.f32	s13, s12, s13
    3ca2:	ed93 6a00 	vldr	s12, [r3]
    3ca6:	ee25 6a86 	vmul.f32	s12, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3caa:	ee76 6a86 	vadd.f32	s13, s13, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3cae:	ed94 6a02 	vldr	s12, [r4, #8]
    3cb2:	ee67 7a86 	vmul.f32	s15, s15, s12
    3cb6:	ed94 6a00 	vldr	s12, [r4]
    3cba:	ee24 6a06 	vmul.f32	s12, s8, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3cbe:	ee77 7a86 	vadd.f32	s15, s15, s12
    3cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3cc6:	edd5 6a02 	vldr	s13, [r5, #8]
    3cca:	ee25 5a26 	vmul.f32	s10, s10, s13
    3cce:	edd5 6a00 	vldr	s13, [r5]
    3cd2:	ee64 4aa6 	vmul.f32	s9, s9, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3cd6:	ee35 5a24 	vadd.f32	s10, s10, s9
    3cda:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
    3cde:	edc0 7a00 	vstr	s15, [r0]
    3ce2:	ed80 7a01 	vstr	s14, [r0, #4]
	derivative    = (error - errorOld) / dt;
	integralOld   = integral;
	errorOld      = error;
	PIDValues     = (P_gains*error + I_gains*integral + D_gains*derivative);
	return PIDValues;
}
    3ce6:	b002      	add	sp, #8
    3ce8:	bcf0      	pop	{r4, r5, r6, r7}
    3cea:	4770      	bx	lr
    3cec:	20005010 	.word	0x20005010
    3cf0:	20005110 	.word	0x20005110
    3cf4:	20005014 	.word	0x20005014
    3cf8:	20005118 	.word	0x20005118
    3cfc:	2000551c 	.word	0x2000551c

00003d00 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>:
    Flags = Base::Flags | EvalBeforeNestingBit
  };

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
    : m_result(xpr.rows(), xpr.cols())
    3d00:	1d03      	adds	r3, r0, #4

// this helper permits to completely eliminate m_outerStride if it is known at compiletime.
template<typename Scalar,int OuterStride> class plainobjectbase_evaluator_data {
public:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
    3d02:	6003      	str	r3, [r0, #0]
    const LhsNestedCleaned& lhs() const { return m_lhs; }
    3d04:	680a      	ldr	r2, [r1, #0]
    const RhsNestedCleaned& rhs() const { return m_rhs; }
    3d06:	684b      	ldr	r3, [r1, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3d08:	edd2 7a06 	vldr	s15, [r2, #24]
    3d0c:	ed93 7a02 	vldr	s14, [r3, #8]
    3d10:	ee67 7a87 	vmul.f32	s15, s15, s14
    3d14:	ed92 7a03 	vldr	s14, [r2, #12]
    3d18:	edd3 6a01 	vldr	s13, [r3, #4]
    3d1c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3d20:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3d24:	ed92 7a00 	vldr	s14, [r2]
    3d28:	edd3 6a00 	vldr	s13, [r3]
    3d2c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3d30:	ee77 7a87 	vadd.f32	s15, s15, s14
    3d34:	edc0 7a01 	vstr	s15, [r0, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3d38:	edd2 7a07 	vldr	s15, [r2, #28]
    3d3c:	ed93 7a02 	vldr	s14, [r3, #8]
    3d40:	ee67 7a87 	vmul.f32	s15, s15, s14
    3d44:	ed92 7a04 	vldr	s14, [r2, #16]
    3d48:	edd3 6a01 	vldr	s13, [r3, #4]
    3d4c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3d50:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3d54:	ed92 7a01 	vldr	s14, [r2, #4]
    3d58:	edd3 6a00 	vldr	s13, [r3]
    3d5c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3d60:	ee77 7a87 	vadd.f32	s15, s15, s14
    3d64:	edc0 7a02 	vstr	s15, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3d68:	edd2 7a08 	vldr	s15, [r2, #32]
    3d6c:	ed93 7a02 	vldr	s14, [r3, #8]
    3d70:	ee67 7a87 	vmul.f32	s15, s15, s14
    3d74:	ed92 7a05 	vldr	s14, [r2, #20]
    3d78:	edd3 6a01 	vldr	s13, [r3, #4]
    3d7c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3d80:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3d84:	ed92 7a02 	vldr	s14, [r2, #8]
    3d88:	edd3 6a00 	vldr	s13, [r3]
    3d8c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3d90:	ee77 7a87 	vadd.f32	s15, s15, s14
    3d94:	edc0 7a03 	vstr	s15, [r0, #12]
//     const RhsNested rhs(xpr.rhs());
//
//     generic_product_impl<LhsNestedCleaned, RhsNestedCleaned>::evalTo(m_result, lhs, rhs);

    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
  }
    3d98:	4770      	bx	lr
	...

00003d9c <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)>:
									 Matrix3f I_gains, Matrix3f D_gains, bool lowThrottle) {
    3d9c:	b570      	push	{r4, r5, r6, lr}
    3d9e:	ed2d 8b02 	vpush	{d8}
    3da2:	b0a8      	sub	sp, #160	; 0xa0
    3da4:	4604      	mov	r4, r0
    3da6:	f89d 50c0 	ldrb.w	r5, [sp, #192]	; 0xc0
	static Vector3f integralOld(0,0,0);
    3daa:	4876      	ldr	r0, [pc, #472]	; (3f84 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1e8>)
    3dac:	6800      	ldr	r0, [r0, #0]
    3dae:	f010 0f01 	tst.w	r0, #1
    3db2:	d10b      	bne.n	3dcc <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x30>
      m_storage.data()[0] = x;
    3db4:	4874      	ldr	r0, [pc, #464]	; (3f88 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1ec>)
    3db6:	f04f 0c00 	mov.w	ip, #0
    3dba:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = y;
    3dbe:	f8c0 c004 	str.w	ip, [r0, #4]
      m_storage.data()[2] = z;
    3dc2:	f8c0 c008 	str.w	ip, [r0, #8]
    3dc6:	486f      	ldr	r0, [pc, #444]	; (3f84 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1e8>)
    3dc8:	2601      	movs	r6, #1
    3dca:	6006      	str	r6, [r0, #0]
	static Vector3f errorOld(0,0,0);
    3dcc:	486f      	ldr	r0, [pc, #444]	; (3f8c <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1f0>)
    3dce:	6800      	ldr	r0, [r0, #0]
    3dd0:	f010 0f01 	tst.w	r0, #1
    3dd4:	d10b      	bne.n	3dee <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x52>
      m_storage.data()[0] = x;
    3dd6:	486e      	ldr	r0, [pc, #440]	; (3f90 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1f4>)
    3dd8:	f04f 0c00 	mov.w	ip, #0
    3ddc:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = y;
    3de0:	f8c0 c004 	str.w	ip, [r0, #4]
      m_storage.data()[2] = z;
    3de4:	f8c0 c008 	str.w	ip, [r0, #8]
    3de8:	4868      	ldr	r0, [pc, #416]	; (3f8c <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1f0>)
    3dea:	2601      	movs	r6, #1
    3dec:	6006      	str	r6, [r0, #0]
      m_storage.data()[0] = x;
    3dee:	2000      	movs	r0, #0
    3df0:	9022      	str	r0, [sp, #136]	; 0x88
      m_storage.data()[1] = y;
    3df2:	9023      	str	r0, [sp, #140]	; 0x8c
      m_storage.data()[2] = z;
    3df4:	9024      	str	r0, [sp, #144]	; 0x90
      m_storage.data()[0] = x;
    3df6:	901f      	str	r0, [sp, #124]	; 0x7c
      m_storage.data()[1] = y;
    3df8:	9020      	str	r0, [sp, #128]	; 0x80
      m_storage.data()[2] = z;
    3dfa:	9021      	str	r0, [sp, #132]	; 0x84
      m_storage.data()[0] = x;
    3dfc:	6020      	str	r0, [r4, #0]
      m_storage.data()[1] = y;
    3dfe:	6060      	str	r0, [r4, #4]
      m_storage.data()[2] = z;
    3e00:	60a0      	str	r0, [r4, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3e02:	ed91 6a00 	vldr	s12, [r1]
    3e06:	edd2 7a00 	vldr	s15, [r2]
    3e0a:	ee36 6a67 	vsub.f32	s12, s12, s15
    3e0e:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
    3e12:	ed91 7a01 	vldr	s14, [r1, #4]
    3e16:	edd1 6a02 	vldr	s13, [r1, #8]
    3e1a:	edd2 7a02 	vldr	s15, [r2, #8]
    3e1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
    3e22:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
	error[1] = refState[1] - GyroZ;
    3e26:	4a5b      	ldr	r2, [pc, #364]	; (3f94 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1f8>)
    3e28:	edd2 7a00 	vldr	s15, [r2]
    3e2c:	ee37 7a67 	vsub.f32	s14, s14, s15
    3e30:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
	if (!lowThrottle) {
    3e34:	b135      	cbz	r5, 3e44 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0xa8>
      * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator[](Index index)
    3e36:	aa22      	add	r2, sp, #136	; 0x88
    3e38:	a925      	add	r1, sp, #148	; 0x94
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    3e3a:	eefb 5a09 	vmov.f32	s11, #185	; 0xc1c80000 -25.0
    3e3e:	eeb3 5a09 	vmov.f32	s10, #57	; 0x41c80000  25.0
    3e42:	e022      	b.n	3e8a <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0xee>
    3e44:	4a54      	ldr	r2, [pc, #336]	; (3f98 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1fc>)
    3e46:	edd2 7a00 	vldr	s15, [r2]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3e4a:	ee67 5a86 	vmul.f32	s11, s15, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3e4e:	4a4e      	ldr	r2, [pc, #312]	; (3f88 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1ec>)
    3e50:	ed92 5a00 	vldr	s10, [r2]
    3e54:	ee75 5a85 	vadd.f32	s11, s11, s10
    3e58:	edcd 5a22 	vstr	s11, [sp, #136]	; 0x88
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3e5c:	ee67 5a27 	vmul.f32	s11, s14, s15
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3e60:	ed92 5a01 	vldr	s10, [r2, #4]
    3e64:	ee75 5a85 	vadd.f32	s11, s11, s10
    3e68:	edcd 5a23 	vstr	s11, [sp, #140]	; 0x8c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3e6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3e70:	edd2 5a02 	vldr	s11, [r2, #8]
    3e74:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3e78:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
    3e7c:	e7db      	b.n	3e36 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x9a>
    3e7e:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    3e82:	ed42 7a01 	vstr	s15, [r2, #-4]
	for (int lv1=0; lv1<3; lv1++) {
    3e86:	428a      	cmp	r2, r1
    3e88:	d00d      	beq.n	3ea6 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x10a>
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    3e8a:	ecf2 7a01 	vldmia	r2!, {s15}
    3e8e:	eef4 7ae5 	vcmpe.f32	s15, s11
    3e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e96:	d4f2      	bmi.n	3e7e <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0xe2>
    3e98:	eef4 7a45 	vcmp.f32	s15, s10
    3e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ea0:	fe75 7a27 	vselgt.f32	s15, s10, s15
    3ea4:	e7ed      	b.n	3e82 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0xe6>
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3ea6:	4a3a      	ldr	r2, [pc, #232]	; (3f90 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1f4>)
    3ea8:	edd2 7a01 	vldr	s15, [r2, #4]
    3eac:	ee77 7a67 	vsub.f32	s15, s14, s15
    3eb0:	4939      	ldr	r1, [pc, #228]	; (3f98 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1fc>)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
    3eb2:	ed91 5a00 	vldr	s10, [r1]
    3eb6:	eec7 5a85 	vdiv.f32	s11, s15, s10
    3eba:	edcd 5a20 	vstr	s11, [sp, #128]	; 0x80
	derivative[0] = GyroY;
    3ebe:	4937      	ldr	r1, [pc, #220]	; (3f9c <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x200>)
    3ec0:	6809      	ldr	r1, [r1, #0]
    3ec2:	911f      	str	r1, [sp, #124]	; 0x7c
	derivative[2] = GyroX;
    3ec4:	4936      	ldr	r1, [pc, #216]	; (3fa0 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x204>)
    3ec6:	6809      	ldr	r1, [r1, #0]
    3ec8:	9121      	str	r1, [sp, #132]	; 0x84
    3eca:	492f      	ldr	r1, [pc, #188]	; (3f88 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x1ec>)
    3ecc:	9822      	ldr	r0, [sp, #136]	; 0x88
    3ece:	6008      	str	r0, [r1, #0]
    3ed0:	9823      	ldr	r0, [sp, #140]	; 0x8c
    3ed2:	6048      	str	r0, [r1, #4]
    3ed4:	9824      	ldr	r0, [sp, #144]	; 0x90
    3ed6:	6088      	str	r0, [r1, #8]
    3ed8:	ed82 6a00 	vstr	s12, [r2]
    3edc:	ed82 7a01 	vstr	s14, [r2, #4]
    3ee0:	edc2 6a02 	vstr	s13, [r2, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
    3ee4:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 3fa4 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, bool)+0x208>
    3ee8:	ed8d 8a03 	vstr	s16, [sp, #12]
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
    3eec:	9305      	str	r3, [sp, #20]
    3eee:	ab25      	add	r3, sp, #148	; 0x94
    3ef0:	9306      	str	r3, [sp, #24]
    3ef2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3ef4:	9307      	str	r3, [sp, #28]
    3ef6:	ab22      	add	r3, sp, #136	; 0x88
    3ef8:	9308      	str	r3, [sp, #32]
    3efa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    3efc:	930a      	str	r3, [sp, #40]	; 0x28
    3efe:	ab1f      	add	r3, sp, #124	; 0x7c
    3f00:	930b      	str	r3, [sp, #44]	; 0x2c
    3f02:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
    3f06:	a905      	add	r1, sp, #20
    3f08:	a813      	add	r0, sp, #76	; 0x4c
    3f0a:	f7ff fef9 	bl	3d00 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
    3f0e:	a907      	add	r1, sp, #28
    3f10:	a817      	add	r0, sp, #92	; 0x5c
    3f12:	f7ff fef5 	bl	3d00 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
    3f16:	a90a      	add	r1, sp, #40	; 0x28
    3f18:	a81b      	add	r0, sp, #108	; 0x6c
    3f1a:	f7ff fef1 	bl	3d00 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index index) const
  {
    return m_d.data[index];
    3f1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3f20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3f22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3f24:	edd1 7a00 	vldr	s15, [r1]
    3f28:	ed92 7a00 	vldr	s14, [r2]
    3f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3f30:	ed93 7a00 	vldr	s14, [r3]
    3f34:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3f38:	ee67 7a88 	vmul.f32	s15, s15, s16
    3f3c:	edc4 7a00 	vstr	s15, [r4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3f40:	edd1 7a01 	vldr	s15, [r1, #4]
    3f44:	ed92 7a01 	vldr	s14, [r2, #4]
    3f48:	ee77 7a87 	vadd.f32	s15, s15, s14
    3f4c:	ed93 7a01 	vldr	s14, [r3, #4]
    3f50:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3f54:	ee67 7a88 	vmul.f32	s15, s15, s16
    3f58:	edc4 7a01 	vstr	s15, [r4, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3f5c:	edd1 7a02 	vldr	s15, [r1, #8]
    3f60:	ed92 7a02 	vldr	s14, [r2, #8]
    3f64:	ee77 7a87 	vadd.f32	s15, s15, s14
    3f68:	ed93 7a02 	vldr	s14, [r3, #8]
    3f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3f70:	ee67 7a88 	vmul.f32	s15, s15, s16
    3f74:	edc4 7a02 	vstr	s15, [r4, #8]
}
    3f78:	4620      	mov	r0, r4
    3f7a:	b028      	add	sp, #160	; 0xa0
    3f7c:	ecbd 8b02 	vpop	{d8}
    3f80:	bd70      	pop	{r4, r5, r6, pc}
    3f82:	bf00      	nop
    3f84:	20005018 	.word	0x20005018
    3f88:	20005120 	.word	0x20005120
    3f8c:	2000501c 	.word	0x2000501c
    3f90:	2000512c 	.word	0x2000512c
    3f94:	20004558 	.word	0x20004558
    3f98:	2000551c 	.word	0x2000551c
    3f9c:	20004550 	.word	0x20004550
    3fa0:	20004548 	.word	0x20004548
    3fa4:	3c23d70a 	.word	0x3c23d70a

00003fa8 <_GLOBAL__sub_I_desState>:
      m_storage.data()[0] = x;
    3fa8:	4a0b      	ldr	r2, [pc, #44]	; (3fd8 <_GLOBAL__sub_I_desState+0x30>)
    3faa:	2300      	movs	r3, #0
    3fac:	6013      	str	r3, [r2, #0]
      m_storage.data()[1] = y;
    3fae:	6053      	str	r3, [r2, #4]
      m_storage.data()[2] = z;
    3fb0:	6093      	str	r3, [r2, #8]
      m_storage.data()[0] = x;
    3fb2:	4a0a      	ldr	r2, [pc, #40]	; (3fdc <_GLOBAL__sub_I_desState+0x34>)
    3fb4:	6013      	str	r3, [r2, #0]
      m_storage.data()[1] = y;
    3fb6:	6053      	str	r3, [r2, #4]
      m_storage.data()[2] = z;
    3fb8:	6093      	str	r3, [r2, #8]
      m_storage.data()[0] = x;
    3fba:	4a09      	ldr	r2, [pc, #36]	; (3fe0 <_GLOBAL__sub_I_desState+0x38>)
    3fbc:	6013      	str	r3, [r2, #0]
      m_storage.data()[1] = y;
    3fbe:	6053      	str	r3, [r2, #4]
      m_storage.data()[2] = z;
    3fc0:	6093      	str	r3, [r2, #8]
      m_storage.data()[0] = Scalar(val0);
    3fc2:	4a08      	ldr	r2, [pc, #32]	; (3fe4 <_GLOBAL__sub_I_desState+0x3c>)
    3fc4:	6013      	str	r3, [r2, #0]
      m_storage.data()[1] = Scalar(val1);
    3fc6:	6053      	str	r3, [r2, #4]
      m_storage.data()[0] = Scalar(val0);
    3fc8:	4a07      	ldr	r2, [pc, #28]	; (3fe8 <_GLOBAL__sub_I_desState+0x40>)
    3fca:	6013      	str	r3, [r2, #0]
      m_storage.data()[1] = Scalar(val1);
    3fcc:	6053      	str	r3, [r2, #4]
      m_storage.data()[0] = Scalar(val0);
    3fce:	4a07      	ldr	r2, [pc, #28]	; (3fec <_GLOBAL__sub_I_desState+0x44>)
    3fd0:	6013      	str	r3, [r2, #0]
      m_storage.data()[1] = Scalar(val1);
    3fd2:	6053      	str	r3, [r2, #4]
}
    3fd4:	4770      	bx	lr
    3fd6:	bf00      	nop
    3fd8:	20005508 	.word	0x20005508
    3fdc:	200054e0 	.word	0x200054e0
    3fe0:	200055a0 	.word	0x200055a0
    3fe4:	20005514 	.word	0x20005514
    3fe8:	200054ec 	.word	0x200054ec
    3fec:	200055ac 	.word	0x200055ac

00003ff0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    3ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ff4:	b087      	sub	sp, #28
    3ff6:	9002      	str	r0, [sp, #8]
    3ff8:	9103      	str	r1, [sp, #12]
    3ffa:	461f      	mov	r7, r3
    3ffc:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    4000:	4b3c      	ldr	r3, [pc, #240]	; (40f4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    4002:	f8d3 9000 	ldr.w	r9, [r3]
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    4006:	9200      	str	r2, [sp, #0]
    4008:	2a00      	cmp	r2, #0
    400a:	d061      	beq.n	40d0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe0>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    400c:	0043      	lsls	r3, r0, #1
    400e:	b2d9      	uxtb	r1, r3
    4010:	9101      	str	r1, [sp, #4]
    4012:	4613      	mov	r3, r2
    4014:	2a88      	cmp	r2, #136	; 0x88
    4016:	bf28      	it	cs
    4018:	2388      	movcs	r3, #136	; 0x88
    401a:	9304      	str	r3, [sp, #16]
    401c:	f04f 0800 	mov.w	r8, #0
    int8_t count = 0;
    4020:	4644      	mov	r4, r8
    4022:	4d35      	ldr	r5, [pc, #212]	; (40f8 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x108>)
		transmitting = 1;
    4024:	f04f 0b01 	mov.w	fp, #1
    4028:	f88d b017 	strb.w	fp, [sp, #23]
    402c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 40f4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>
    4030:	e022      	b.n	4078 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x88>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4036:	e006      	b.n	4046 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x56>
    4038:	4299      	cmp	r1, r3
    403a:	d9fa      	bls.n	4032 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x42>
		return rxBuffer[rxBufferIndex++];
    403c:	3301      	adds	r3, #1
    403e:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
    4042:	442a      	add	r2, r5
    4044:	7e93      	ldrb	r3, [r2, #26]
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    4046:	553b      	strb	r3, [r7, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    4048:	3401      	adds	r4, #1
    404a:	b264      	sxtb	r4, r4
		return rxBufferLength - rxBufferIndex;
    404c:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    4050:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    4054:	461a      	mov	r2, r3
    4056:	4299      	cmp	r1, r3
    4058:	d007      	beq.n	406a <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    405a:	2e00      	cmp	r6, #0
    405c:	d0ec      	beq.n	4038 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
    405e:	f8da 0000 	ldr.w	r0, [sl]
    4062:	eba0 0009 	sub.w	r0, r0, r9
    4066:	42b0      	cmp	r0, r6
    4068:	d3e6      	bcc.n	4038 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    406a:	9b04      	ldr	r3, [sp, #16]
    406c:	4498      	add	r8, r3
    406e:	fa5f f888 	uxtb.w	r8, r8
    4072:	9b00      	ldr	r3, [sp, #0]
    4074:	4543      	cmp	r3, r8
    4076:	d92c      	bls.n	40d2 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe2>
		txBuffer[0] = (address << 1);
    4078:	9b01      	ldr	r3, [sp, #4]
    407a:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    407e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    4082:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		txBufferLength = 1;
    4086:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
                Wire.write(regAddr);
    408a:	9903      	ldr	r1, [sp, #12]
    408c:	4628      	mov	r0, r5
    408e:	f000 fb2a 	bl	46e6 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    4092:	4659      	mov	r1, fp
    4094:	4628      	mov	r0, r5
    4096:	f000 fc53 	bl	4940 <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    409a:	9b01      	ldr	r3, [sp, #4]
    409c:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    40a0:	f885 b130 	strb.w	fp, [r5, #304]	; 0x130
		txBufferLength = 1;
    40a4:	f885 b12f 	strb.w	fp, [r5, #303]	; 0x12f
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    40a8:	9b00      	ldr	r3, [sp, #0]
    40aa:	eba3 0208 	sub.w	r2, r3, r8
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    40ae:	2a88      	cmp	r2, #136	; 0x88
    40b0:	bfa8      	it	ge
    40b2:	2288      	movge	r2, #136	; 0x88
		return requestFrom(address, quantity, (uint8_t)1);
    40b4:	465b      	mov	r3, fp
    40b6:	b2d2      	uxtb	r2, r2
    40b8:	9902      	ldr	r1, [sp, #8]
    40ba:	4628      	mov	r0, r5
    40bc:	f000 fcbc 	bl	4a38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    40c0:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    40c4:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    40c8:	461a      	mov	r2, r3
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    40ca:	4299      	cmp	r1, r3
    40cc:	d1c5      	bne.n	405a <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x6a>
    40ce:	e7cc      	b.n	406a <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    int8_t count = 0;
    40d0:	2400      	movs	r4, #0
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    40d2:	b156      	cbz	r6, 40ea <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    40d4:	4b07      	ldr	r3, [pc, #28]	; (40f4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	eba3 0309 	sub.w	r3, r3, r9
    40dc:	42b3      	cmp	r3, r6
    40de:	d304      	bcc.n	40ea <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    40e0:	9b00      	ldr	r3, [sp, #0]
    40e2:	429c      	cmp	r4, r3
    40e4:	bfb8      	it	lt
    40e6:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    40ea:	4620      	mov	r0, r4
    40ec:	b007      	add	sp, #28
    40ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    40f2:	bf00      	nop
    40f4:	200057f8 	.word	0x200057f8
    40f8:	20004c50 	.word	0x20004c50

000040fc <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    40fc:	b500      	push	{lr}
    40fe:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
    4100:	9300      	str	r3, [sp, #0]
    4102:	4613      	mov	r3, r2
    4104:	2201      	movs	r2, #1
    4106:	f7ff ff73 	bl	3ff0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    410a:	b003      	add	sp, #12
    410c:	f85d fb04 	ldr.w	pc, [sp], #4

00004110 <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    4110:	b530      	push	{r4, r5, lr}
    4112:	b083      	sub	sp, #12
    4114:	4614      	mov	r4, r2
    4116:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    4118:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    411c:	f10d 0207 	add.w	r2, sp, #7
    4120:	f7ff ffec 	bl	40fc <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    4124:	b160      	cbz	r0, 4140 <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x30>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    4126:	1b62      	subs	r2, r4, r5
    4128:	3201      	adds	r2, #1
    412a:	2101      	movs	r1, #1
    412c:	fa01 f305 	lsl.w	r3, r1, r5
    4130:	3b01      	subs	r3, #1
    4132:	4093      	lsls	r3, r2
        b &= mask;
    4134:	f89d 1007 	ldrb.w	r1, [sp, #7]
        b >>= (bitStart - length + 1);
    4138:	400b      	ands	r3, r1
    413a:	4113      	asrs	r3, r2
    413c:	9a06      	ldr	r2, [sp, #24]
    413e:	7013      	strb	r3, [r2, #0]
}
    4140:	b003      	add	sp, #12
    4142:	bd30      	pop	{r4, r5, pc}

00004144 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    4144:	b570      	push	{r4, r5, r6, lr}
    4146:	4615      	mov	r5, r2
    4148:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    414a:	4a10      	ldr	r2, [pc, #64]	; (418c <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    414c:	0040      	lsls	r0, r0, #1
    414e:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		transmitting = 1;
    4152:	2301      	movs	r3, #1
    4154:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
		txBufferLength = 1;
    4158:	f882 312f 	strb.w	r3, [r2, #303]	; 0x12f
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
	#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    415c:	4610      	mov	r0, r2
    415e:	f000 fac2 	bl	46e6 <TwoWire::write(unsigned char)>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    4162:	b15d      	cbz	r5, 417c <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x38>
    4164:	1e74      	subs	r4, r6, #1
    4166:	3d01      	subs	r5, #1
    4168:	fa56 f585 	uxtab	r5, r6, r5
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
			#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
			Wire.write((uint8_t) data[i]);
    416c:	4e07      	ldr	r6, [pc, #28]	; (418c <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    416e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4172:	4630      	mov	r0, r6
    4174:	f000 fab7 	bl	46e6 <TwoWire::write(unsigned char)>
    for (uint8_t i = 0; i < length; i++) {
    4178:	42ac      	cmp	r4, r5
    417a:	d1f8      	bne.n	416e <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x2a>
		return endTransmission(1);
    417c:	2101      	movs	r1, #1
    417e:	4803      	ldr	r0, [pc, #12]	; (418c <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    4180:	f000 fbde 	bl	4940 <TwoWire::endTransmission(unsigned char)>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
    4184:	fab0 f080 	clz	r0, r0
    4188:	0940      	lsrs	r0, r0, #5
    418a:	bd70      	pop	{r4, r5, r6, pc}
    418c:	20004c50 	.word	0x20004c50

00004190 <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    4190:	b500      	push	{lr}
    4192:	b083      	sub	sp, #12
    4194:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
    4198:	f10d 0307 	add.w	r3, sp, #7
    419c:	2201      	movs	r2, #1
    419e:	f7ff ffd1 	bl	4144 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    41a2:	b003      	add	sp, #12
    41a4:	f85d fb04 	ldr.w	pc, [sp], #4

000041a8 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    41a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41aa:	b083      	sub	sp, #12
    41ac:	4604      	mov	r4, r0
    41ae:	460d      	mov	r5, r1
    41b0:	4616      	mov	r6, r2
    41b2:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
    41b4:	4b0c      	ldr	r3, [pc, #48]	; (41e8 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>)
    41b6:	881b      	ldrh	r3, [r3, #0]
    41b8:	f10d 0207 	add.w	r2, sp, #7
    41bc:	f7ff ff9e 	bl	40fc <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    41c0:	b15f      	cbz	r7, 41da <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    41c2:	2301      	movs	r3, #1
    41c4:	40b3      	lsls	r3, r6
    41c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    41ca:	431a      	orrs	r2, r3
    41cc:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
    41ce:	4629      	mov	r1, r5
    41d0:	4620      	mov	r0, r4
    41d2:	f7ff ffdd 	bl	4190 <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
}
    41d6:	b003      	add	sp, #12
    41d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    41da:	2301      	movs	r3, #1
    41dc:	40b3      	lsls	r3, r6
    41de:	f89d 2007 	ldrb.w	r2, [sp, #7]
    41e2:	ea22 0203 	bic.w	r2, r2, r3
    41e6:	e7f2      	b.n	41ce <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    41e8:	20003d42 	.word	0x20003d42

000041ec <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	b083      	sub	sp, #12
    41f0:	4605      	mov	r5, r0
    41f2:	460e      	mov	r6, r1
    41f4:	4614      	mov	r4, r2
    41f6:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
    41f8:	4b0f      	ldr	r3, [pc, #60]	; (4238 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>)
    41fa:	881b      	ldrh	r3, [r3, #0]
    41fc:	f10d 0207 	add.w	r2, sp, #7
    4200:	f7ff ff7c 	bl	40fc <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    4204:	b910      	cbnz	r0, 420c <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
        return false;
    4206:	2000      	movs	r0, #0
}
    4208:	b003      	add	sp, #12
    420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    420c:	1be2      	subs	r2, r4, r7
    420e:	3201      	adds	r2, #1
    4210:	2101      	movs	r1, #1
    4212:	fa01 f307 	lsl.w	r3, r1, r7
    4216:	3b01      	subs	r3, #1
    4218:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
    421a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    421e:	4091      	lsls	r1, r2
    4220:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
    4222:	f89d 2007 	ldrb.w	r2, [sp, #7]
    4226:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
    422a:	400b      	ands	r3, r1
        return writeByte(devAddr, regAddr, b);
    422c:	431a      	orrs	r2, r3
    422e:	4631      	mov	r1, r6
    4230:	4628      	mov	r0, r5
    4232:	f7ff ffad 	bl	4190 <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
    4236:	e7e7      	b.n	4208 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    4238:	20003d42 	.word	0x20003d42

0000423c <MPU6050::MPU6050(unsigned char)>:
MPU6050::MPU6050(uint8_t address):devAddr(address) {
    423c:	7001      	strb	r1, [r0, #0]
}
    423e:	4770      	bx	lr

00004240 <MPU6050::setFullScaleGyroRange(unsigned char)>:
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    4240:	b500      	push	{lr}
    4242:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    4244:	7800      	ldrb	r0, [r0, #0]
    4246:	9100      	str	r1, [sp, #0]
    4248:	2302      	movs	r3, #2
    424a:	2204      	movs	r2, #4
    424c:	211b      	movs	r1, #27
    424e:	f7ff ffcd 	bl	41ec <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    4252:	b003      	add	sp, #12
    4254:	f85d fb04 	ldr.w	pc, [sp], #4

00004258 <MPU6050::setFullScaleAccelRange(unsigned char)>:
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    4258:	b500      	push	{lr}
    425a:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    425c:	7800      	ldrb	r0, [r0, #0]
    425e:	9100      	str	r1, [sp, #0]
    4260:	2302      	movs	r3, #2
    4262:	2204      	movs	r2, #4
    4264:	211c      	movs	r1, #28
    4266:	f7ff ffc1 	bl	41ec <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    426a:	b003      	add	sp, #12
    426c:	f85d fb04 	ldr.w	pc, [sp], #4

00004270 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>:
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    4270:	b5f0      	push	{r4, r5, r6, r7, lr}
    4272:	b083      	sub	sp, #12
    4274:	4604      	mov	r4, r0
    4276:	460f      	mov	r7, r1
    4278:	4616      	mov	r6, r2
    427a:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
    427c:	4603      	mov	r3, r0
    427e:	f813 0b01 	ldrb.w	r0, [r3], #1
    4282:	4a15      	ldr	r2, [pc, #84]	; (42d8 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)+0x68>)
    4284:	8812      	ldrh	r2, [r2, #0]
    4286:	9200      	str	r2, [sp, #0]
    4288:	220e      	movs	r2, #14
    428a:	213b      	movs	r1, #59	; 0x3b
    428c:	f7ff feb0 	bl	3ff0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    4290:	7862      	ldrb	r2, [r4, #1]
    4292:	78a3      	ldrb	r3, [r4, #2]
    4294:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4298:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    429a:	78e2      	ldrb	r2, [r4, #3]
    429c:	7923      	ldrb	r3, [r4, #4]
    429e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    42a2:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    42a4:	7962      	ldrb	r2, [r4, #5]
    42a6:	79a3      	ldrb	r3, [r4, #6]
    42a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    42ac:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    42ae:	7a62      	ldrb	r2, [r4, #9]
    42b0:	7aa3      	ldrb	r3, [r4, #10]
    42b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    42b6:	9a08      	ldr	r2, [sp, #32]
    42b8:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    42ba:	7ae2      	ldrb	r2, [r4, #11]
    42bc:	7b23      	ldrb	r3, [r4, #12]
    42be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    42c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    42c4:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    42c6:	7b62      	ldrb	r2, [r4, #13]
    42c8:	7ba3      	ldrb	r3, [r4, #14]
    42ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    42ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    42d0:	8013      	strh	r3, [r2, #0]
}
    42d2:	b003      	add	sp, #12
    42d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42d6:	bf00      	nop
    42d8:	20003d42 	.word	0x20003d42

000042dc <MPU6050::setSleepEnabled(bool)>:
void MPU6050::setSleepEnabled(bool enabled) {
    42dc:	b508      	push	{r3, lr}
    42de:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    42e0:	2206      	movs	r2, #6
    42e2:	216b      	movs	r1, #107	; 0x6b
    42e4:	7800      	ldrb	r0, [r0, #0]
    42e6:	f7ff ff5f 	bl	41a8 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>
}
    42ea:	bd08      	pop	{r3, pc}

000042ec <MPU6050::setClockSource(unsigned char)>:
void MPU6050::setClockSource(uint8_t source) {
    42ec:	b500      	push	{lr}
    42ee:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    42f0:	7800      	ldrb	r0, [r0, #0]
    42f2:	9100      	str	r1, [sp, #0]
    42f4:	2303      	movs	r3, #3
    42f6:	2202      	movs	r2, #2
    42f8:	216b      	movs	r1, #107	; 0x6b
    42fa:	f7ff ff77 	bl	41ec <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    42fe:	b003      	add	sp, #12
    4300:	f85d fb04 	ldr.w	pc, [sp], #4

00004304 <MPU6050::initialize()>:
void MPU6050::initialize() {
    4304:	b510      	push	{r4, lr}
    4306:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    4308:	2101      	movs	r1, #1
    430a:	f7ff ffef 	bl	42ec <MPU6050::setClockSource(unsigned char)>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    430e:	2100      	movs	r1, #0
    4310:	4620      	mov	r0, r4
    4312:	f7ff ff95 	bl	4240 <MPU6050::setFullScaleGyroRange(unsigned char)>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    4316:	2100      	movs	r1, #0
    4318:	4620      	mov	r0, r4
    431a:	f7ff ff9d 	bl	4258 <MPU6050::setFullScaleAccelRange(unsigned char)>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    431e:	2100      	movs	r1, #0
    4320:	4620      	mov	r0, r4
    4322:	f7ff ffdb 	bl	42dc <MPU6050::setSleepEnabled(bool)>
}
    4326:	bd10      	pop	{r4, pc}

00004328 <MPU6050::getDeviceID()>:
uint8_t MPU6050::getDeviceID() {
    4328:	b510      	push	{r4, lr}
    432a:	b082      	sub	sp, #8
    432c:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    432e:	4603      	mov	r3, r0
    4330:	f813 0b01 	ldrb.w	r0, [r3], #1
    4334:	4a05      	ldr	r2, [pc, #20]	; (434c <MPU6050::getDeviceID()+0x24>)
    4336:	8812      	ldrh	r2, [r2, #0]
    4338:	9201      	str	r2, [sp, #4]
    433a:	9300      	str	r3, [sp, #0]
    433c:	2306      	movs	r3, #6
    433e:	461a      	mov	r2, r3
    4340:	2175      	movs	r1, #117	; 0x75
    4342:	f7ff fee5 	bl	4110 <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    4346:	7860      	ldrb	r0, [r4, #1]
    4348:	b002      	add	sp, #8
    434a:	bd10      	pop	{r4, pc}
    434c:	20003d42 	.word	0x20003d42

00004350 <MPU6050::testConnection()>:
bool MPU6050::testConnection() {
    4350:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
    4352:	f7ff ffe9 	bl	4328 <MPU6050::getDeviceID()>
}
    4356:	2834      	cmp	r0, #52	; 0x34
    4358:	bf14      	ite	ne
    435a:	2000      	movne	r0, #0
    435c:	2001      	moveq	r0, #1
    435e:	bd08      	pop	{r3, pc}

00004360 <SBUS::SBUS(HardwareSerial&)>:
	uint8_t PACKET[25];
	volatile int SENDINDEX;
	void sendByte();
#endif
/* SBUS object, input the serial bus */
SBUS::SBUS(HardwareSerial& bus)
    4360:	b510      	push	{r4, lr}
    4362:	4a10      	ldr	r2, [pc, #64]	; (43a4 <SBUS::SBUS(HardwareSerial&)+0x44>)
    4364:	6002      	str	r2, [r0, #0]
    4366:	f04f 0e0f 	mov.w	lr, #15
    436a:	f880 e004 	strb.w	lr, [r0, #4]
    436e:	f04f 0c00 	mov.w	ip, #0
    4372:	f880 c005 	strb.w	ip, [r0, #5]
    4376:	2204      	movs	r2, #4
    4378:	7182      	strb	r2, [r0, #6]
    437a:	f880 e007 	strb.w	lr, [r0, #7]
    437e:	f641 3458 	movw	r4, #7000	; 0x1b58
    4382:	6084      	str	r4, [r0, #8]
    4384:	f880 c00d 	strb.w	ip, [r0, #13]
    4388:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    438c:	2208      	movs	r2, #8
    438e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    4392:	22ac      	movs	r2, #172	; 0xac
    4394:	8542      	strh	r2, [r0, #42]	; 0x2a
    4396:	f240 7213 	movw	r2, #1811	; 0x713
    439a:	8582      	strh	r2, [r0, #44]	; 0x2c
{
	_bus = &bus;
    439c:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
    43a0:	bd10      	pop	{r4, pc}
    43a2:	bf00      	nop
    43a4:	000186a0 	.word	0x000186a0

000043a8 <SBUS::~SBUS()>:
		}
	}
}

/* destructor, free dynamically allocated memory */
SBUS::~SBUS()
    43a8:	b538      	push	{r3, r4, r5, lr}
    43aa:	4605      	mov	r5, r0
{
	if (_readCoeff) {
    43ac:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    43b0:	b183      	cbz	r3, 43d4 <SBUS::~SBUS()+0x2c>
    43b2:	2400      	movs	r4, #0
    43b4:	e004      	b.n	43c0 <SBUS::~SBUS()+0x18>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_readCoeff[i]) {
				free(_readCoeff[i]);
    43b6:	f00c ff15 	bl	111e4 <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    43ba:	3404      	adds	r4, #4
    43bc:	2c40      	cmp	r4, #64	; 0x40
    43be:	d005      	beq.n	43cc <SBUS::~SBUS()+0x24>
			if (_readCoeff[i]) {
    43c0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    43c4:	5918      	ldr	r0, [r3, r4]
    43c6:	2800      	cmp	r0, #0
    43c8:	d1f5      	bne.n	43b6 <SBUS::~SBUS()+0xe>
    43ca:	e7f6      	b.n	43ba <SBUS::~SBUS()+0x12>
			}
		}
		free(_readCoeff);
    43cc:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    43d0:	f00c ff08 	bl	111e4 <free>
	}
	if (_writeCoeff) {
    43d4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    43d8:	b183      	cbz	r3, 43fc <SBUS::~SBUS()+0x54>
    43da:	2400      	movs	r4, #0
    43dc:	e004      	b.n	43e8 <SBUS::~SBUS()+0x40>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_writeCoeff[i]) {
				free(_writeCoeff[i]);
    43de:	f00c ff01 	bl	111e4 <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    43e2:	3404      	adds	r4, #4
    43e4:	2c40      	cmp	r4, #64	; 0x40
    43e6:	d005      	beq.n	43f4 <SBUS::~SBUS()+0x4c>
			if (_writeCoeff[i]) {
    43e8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    43ec:	5918      	ldr	r0, [r3, r4]
    43ee:	2800      	cmp	r0, #0
    43f0:	d1f5      	bne.n	43de <SBUS::~SBUS()+0x36>
    43f2:	e7f6      	b.n	43e2 <SBUS::~SBUS()+0x3a>
			}
		}
		free(_writeCoeff);
    43f4:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    43f8:	f00c fef4 	bl	111e4 <free>
	}
}
    43fc:	4628      	mov	r0, r5
    43fe:	bd38      	pop	{r3, r4, r5, pc}

00004400 <SBUS::parse()>:

/* parse the SBUS data */
bool SBUS::parse()
{
    4400:	b570      	push	{r4, r5, r6, lr}
    4402:	4604      	mov	r4, r0
	// reset the parser state if too much time has passed
	static elapsedMicros _sbusTime = 0;
    4404:	4b2b      	ldr	r3, [pc, #172]	; (44b4 <SBUS::parse()+0xb4>)
    4406:	681b      	ldr	r3, [r3, #0]
    4408:	f013 0f01 	tst.w	r3, #1
    440c:	d00c      	beq.n	4428 <SBUS::parse()+0x28>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    440e:	f009 f8e5 	bl	d5dc <micros>
    4412:	4b29      	ldr	r3, [pc, #164]	; (44b8 <SBUS::parse()+0xb8>)
    4414:	681b      	ldr	r3, [r3, #0]
    4416:	1ac0      	subs	r0, r0, r3
	if (_sbusTime > SBUS_TIMEOUT_US) {_parserState = 0;}
    4418:	68a3      	ldr	r3, [r4, #8]
    441a:	4283      	cmp	r3, r0
    441c:	d201      	bcs.n	4422 <SBUS::parse()+0x22>
    441e:	2300      	movs	r3, #0
    4420:	7323      	strb	r3, [r4, #12]
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    4422:	4d25      	ldr	r5, [pc, #148]	; (44b8 <SBUS::parse()+0xb8>)
		_sbusTime = 0;
		_curByte = _bus->read();
		// find the header
		if (_parserState == 0) {
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
					_parserState++;
    4424:	2601      	movs	r6, #1
    4426:	e011      	b.n	444c <SBUS::parse()+0x4c>
	elapsedMicros(unsigned long val) { us = micros() - val; }
    4428:	f009 f8d8 	bl	d5dc <micros>
    442c:	4b22      	ldr	r3, [pc, #136]	; (44b8 <SBUS::parse()+0xb8>)
    442e:	6018      	str	r0, [r3, #0]
	static elapsedMicros _sbusTime = 0;
    4430:	4b20      	ldr	r3, [pc, #128]	; (44b4 <SBUS::parse()+0xb4>)
    4432:	2201      	movs	r2, #1
    4434:	601a      	str	r2, [r3, #0]
    4436:	e7ea      	b.n	440e <SBUS::parse()+0xe>
				} else {
					_parserState = 0;
				}
		} else {
			// strip off the data
			if ((_parserState-1) < _payloadSize) {
    4438:	2b18      	cmp	r3, #24
    443a:	d803      	bhi.n	4444 <SBUS::parse()+0x44>
				_payload[_parserState-1] = _curByte;
    443c:	18e2      	adds	r2, r4, r3
    443e:	7390      	strb	r0, [r2, #14]
				_parserState++;
    4440:	3301      	adds	r3, #1
    4442:	7323      	strb	r3, [r4, #12]
			}
			// check the end byte
			if ((_parserState-1) == _payloadSize) {
    4444:	7b23      	ldrb	r3, [r4, #12]
    4446:	2b19      	cmp	r3, #25
    4448:	d022      	beq.n	4490 <SBUS::parse()+0x90>
					_parserState = 0;
					return false;
				}
			}
		}
		_prevByte = _curByte;
    444a:	7360      	strb	r0, [r4, #13]
	while (_bus->available() > 0) {
    444c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    4450:	6803      	ldr	r3, [r0, #0]
    4452:	691b      	ldr	r3, [r3, #16]
    4454:	4798      	blx	r3
    4456:	2800      	cmp	r0, #0
    4458:	dd29      	ble.n	44ae <SBUS::parse()+0xae>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    445a:	f009 f8bf 	bl	d5dc <micros>
    445e:	6028      	str	r0, [r5, #0]
		_curByte = _bus->read();
    4460:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    4464:	6803      	ldr	r3, [r0, #0]
    4466:	695b      	ldr	r3, [r3, #20]
    4468:	4798      	blx	r3
    446a:	b2c0      	uxtb	r0, r0
    446c:	73a0      	strb	r0, [r4, #14]
		if (_parserState == 0) {
    446e:	7b23      	ldrb	r3, [r4, #12]
    4470:	2b00      	cmp	r3, #0
    4472:	d1e1      	bne.n	4438 <SBUS::parse()+0x38>
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
    4474:	7923      	ldrb	r3, [r4, #4]
    4476:	4283      	cmp	r3, r0
    4478:	d1e7      	bne.n	444a <SBUS::parse()+0x4a>
    447a:	7b63      	ldrb	r3, [r4, #13]
    447c:	7962      	ldrb	r2, [r4, #5]
    447e:	429a      	cmp	r2, r3
    4480:	d004      	beq.n	448c <SBUS::parse()+0x8c>
    4482:	79e1      	ldrb	r1, [r4, #7]
    4484:	79a2      	ldrb	r2, [r4, #6]
    4486:	400b      	ands	r3, r1
    4488:	429a      	cmp	r2, r3
    448a:	d1de      	bne.n	444a <SBUS::parse()+0x4a>
					_parserState++;
    448c:	7326      	strb	r6, [r4, #12]
    448e:	e7dc      	b.n	444a <SBUS::parse()+0x4a>
				if ((_curByte == _sbusFooter) || ((_curByte & _sbus2Mask) == _sbus2Footer)) {
    4490:	7963      	ldrb	r3, [r4, #5]
    4492:	4283      	cmp	r3, r0
    4494:	d007      	beq.n	44a6 <SBUS::parse()+0xa6>
    4496:	79e2      	ldrb	r2, [r4, #7]
    4498:	79a3      	ldrb	r3, [r4, #6]
    449a:	4010      	ands	r0, r2
    449c:	4283      	cmp	r3, r0
    449e:	d002      	beq.n	44a6 <SBUS::parse()+0xa6>
					_parserState = 0;
    44a0:	2000      	movs	r0, #0
    44a2:	7320      	strb	r0, [r4, #12]
					return false;
    44a4:	e004      	b.n	44b0 <SBUS::parse()+0xb0>
					_parserState = 0;
    44a6:	2300      	movs	r3, #0
    44a8:	7323      	strb	r3, [r4, #12]
					return true;
    44aa:	2001      	movs	r0, #1
    44ac:	e000      	b.n	44b0 <SBUS::parse()+0xb0>
	}
	// return false if a partial packet
	return false;
    44ae:	2000      	movs	r0, #0
}
    44b0:	bd70      	pop	{r4, r5, r6, pc}
    44b2:	bf00      	nop
    44b4:	20005020 	.word	0x20005020
    44b8:	20005138 	.word	0x20005138

000044bc <SBUS::read(unsigned short*, bool*, bool*)>:
{
    44bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44be:	4604      	mov	r4, r0
    44c0:	460d      	mov	r5, r1
    44c2:	4616      	mov	r6, r2
    44c4:	461f      	mov	r7, r3
	if (parse()) {
    44c6:	f7ff ff9b 	bl	4400 <SBUS::parse()>
    44ca:	4602      	mov	r2, r0
    44cc:	2800      	cmp	r0, #0
    44ce:	f000 80a5 	beq.w	461c <SBUS::read(unsigned short*, bool*, bool*)+0x160>
		if (channels) {
    44d2:	2d00      	cmp	r5, #0
    44d4:	f000 808e 	beq.w	45f4 <SBUS::read(unsigned short*, bool*, bool*)+0x138>
			channels[0]  = (uint16_t) ((_payload[0]    |_payload[1] <<8)                     & 0x07FF);
    44d8:	7c21      	ldrb	r1, [r4, #16]
    44da:	7be3      	ldrb	r3, [r4, #15]
    44dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    44e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    44e4:	802b      	strh	r3, [r5, #0]
			channels[1]  = (uint16_t) ((_payload[1]>>3 |_payload[2] <<5)                     & 0x07FF);
    44e6:	7c21      	ldrb	r1, [r4, #16]
    44e8:	7c63      	ldrb	r3, [r4, #17]
    44ea:	015b      	lsls	r3, r3, #5
    44ec:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    44f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
    44f4:	806b      	strh	r3, [r5, #2]
			channels[2]  = (uint16_t) ((_payload[2]>>6 |_payload[3] <<2 |_payload[4]<<10)  	 & 0x07FF);
    44f6:	7ca1      	ldrb	r1, [r4, #18]
    44f8:	7ce3      	ldrb	r3, [r4, #19]
    44fa:	029b      	lsls	r3, r3, #10
    44fc:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    4500:	7c61      	ldrb	r1, [r4, #17]
    4502:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    4506:	f3c3 030a 	ubfx	r3, r3, #0, #11
    450a:	80ab      	strh	r3, [r5, #4]
			channels[3]  = (uint16_t) ((_payload[4]>>1 |_payload[5] <<7)                     & 0x07FF);
    450c:	7ce1      	ldrb	r1, [r4, #19]
    450e:	7d23      	ldrb	r3, [r4, #20]
    4510:	01db      	lsls	r3, r3, #7
    4512:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4516:	f3c3 030a 	ubfx	r3, r3, #0, #11
    451a:	80eb      	strh	r3, [r5, #6]
			channels[4]  = (uint16_t) ((_payload[5]>>4 |_payload[6] <<4)                     & 0x07FF);
    451c:	7d21      	ldrb	r1, [r4, #20]
    451e:	7d63      	ldrb	r3, [r4, #21]
    4520:	011b      	lsls	r3, r3, #4
    4522:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    4526:	f3c3 030a 	ubfx	r3, r3, #0, #11
    452a:	812b      	strh	r3, [r5, #8]
			channels[5]  = (uint16_t) ((_payload[6]>>7 |_payload[7] <<1 |_payload[8]<<9)   	 & 0x07FF);
    452c:	7da1      	ldrb	r1, [r4, #22]
    452e:	7de3      	ldrb	r3, [r4, #23]
    4530:	025b      	lsls	r3, r3, #9
    4532:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    4536:	7d61      	ldrb	r1, [r4, #21]
    4538:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    453c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4540:	816b      	strh	r3, [r5, #10]
			channels[6]  = (uint16_t) ((_payload[8]>>2 |_payload[9] <<6)                     & 0x07FF);
    4542:	7de1      	ldrb	r1, [r4, #23]
    4544:	7e23      	ldrb	r3, [r4, #24]
    4546:	019b      	lsls	r3, r3, #6
    4548:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    454c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4550:	81ab      	strh	r3, [r5, #12]
			channels[7]  = (uint16_t) ((_payload[9]>>5 |_payload[10]<<3)                     & 0x07FF);
    4552:	7e21      	ldrb	r1, [r4, #24]
    4554:	7e63      	ldrb	r3, [r4, #25]
    4556:	00db      	lsls	r3, r3, #3
    4558:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    455c:	81eb      	strh	r3, [r5, #14]
			channels[8]  = (uint16_t) ((_payload[11]   |_payload[12]<<8)                     & 0x07FF);
    455e:	7ee1      	ldrb	r1, [r4, #27]
    4560:	7ea3      	ldrb	r3, [r4, #26]
    4562:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4566:	f3c3 030a 	ubfx	r3, r3, #0, #11
    456a:	822b      	strh	r3, [r5, #16]
			channels[9]  = (uint16_t) ((_payload[12]>>3|_payload[13]<<5)                     & 0x07FF);
    456c:	7ee1      	ldrb	r1, [r4, #27]
    456e:	7f23      	ldrb	r3, [r4, #28]
    4570:	015b      	lsls	r3, r3, #5
    4572:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    4576:	f3c3 030a 	ubfx	r3, r3, #0, #11
    457a:	826b      	strh	r3, [r5, #18]
			channels[10] = (uint16_t) ((_payload[13]>>6|_payload[14]<<2 |_payload[15]<<10) 	 & 0x07FF);
    457c:	7f61      	ldrb	r1, [r4, #29]
    457e:	7fa3      	ldrb	r3, [r4, #30]
    4580:	029b      	lsls	r3, r3, #10
    4582:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    4586:	7f21      	ldrb	r1, [r4, #28]
    4588:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    458c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4590:	82ab      	strh	r3, [r5, #20]
			channels[11] = (uint16_t) ((_payload[15]>>1|_payload[16]<<7)                     & 0x07FF);
    4592:	7fa1      	ldrb	r1, [r4, #30]
    4594:	7fe3      	ldrb	r3, [r4, #31]
    4596:	01db      	lsls	r3, r3, #7
    4598:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    459c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    45a0:	82eb      	strh	r3, [r5, #22]
			channels[12] = (uint16_t) ((_payload[16]>>4|_payload[17]<<4)                     & 0x07FF);
    45a2:	7fe1      	ldrb	r1, [r4, #31]
    45a4:	f894 3020 	ldrb.w	r3, [r4, #32]
    45a8:	011b      	lsls	r3, r3, #4
    45aa:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    45ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
    45b2:	832b      	strh	r3, [r5, #24]
			channels[13] = (uint16_t) ((_payload[17]>>7|_payload[18]<<1 |_payload[19]<<9)  	 & 0x07FF);
    45b4:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    45b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    45bc:	025b      	lsls	r3, r3, #9
    45be:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    45c2:	f894 1020 	ldrb.w	r1, [r4, #32]
    45c6:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    45ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
    45ce:	836b      	strh	r3, [r5, #26]
			channels[14] = (uint16_t) ((_payload[19]>>2|_payload[20]<<6)                     & 0x07FF);
    45d0:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    45d4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    45d8:	019b      	lsls	r3, r3, #6
    45da:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    45de:	f3c3 030a 	ubfx	r3, r3, #0, #11
    45e2:	83ab      	strh	r3, [r5, #28]
			channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
    45e4:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    45e8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    45ec:	00db      	lsls	r3, r3, #3
    45ee:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    45f2:	83eb      	strh	r3, [r5, #30]
		if (lostFrame) {
    45f4:	b147      	cbz	r7, 4608 <SBUS::read(unsigned short*, bool*, bool*)+0x14c>
    	if (_payload[22] & _sbusLostFrame) {
    45f6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    45fa:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    45fe:	4219      	tst	r1, r3
      	*lostFrame = true;
    4600:	bf14      	ite	ne
    4602:	2301      	movne	r3, #1
				*lostFrame = false;
    4604:	2300      	moveq	r3, #0
    4606:	703b      	strb	r3, [r7, #0]
		if (failsafe) {
    4608:	b146      	cbz	r6, 461c <SBUS::read(unsigned short*, bool*, bool*)+0x160>
    	if (_payload[22] & _sbusFailSafe) {
    460a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    460e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4612:	4219      	tst	r1, r3
      		*failsafe = true;
    4614:	bf14      	ite	ne
    4616:	2301      	movne	r3, #1
      		*failsafe = false;
    4618:	2300      	moveq	r3, #0
    461a:	7033      	strb	r3, [r6, #0]
}
    461c:	4610      	mov	r0, r2
    461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004620 <SBUS::scaleBias(unsigned char)>:

/* compute scale factor and bias from end points */
void SBUS::scaleBias(uint8_t channel)
{
	_sbusScale[channel] = 2.0f / ((float)_sbusMax[channel] - (float)_sbusMin[channel]);
    4620:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    4624:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    4626:	ee07 2a10 	vmov	s14, r2
    462a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    462e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    4632:	ee07 3a90 	vmov	s15, r3
    4636:	eef8 7a67 	vcvt.f32.u32	s15, s15
    463a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    463e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    4642:	eec6 6a27 	vdiv.f32	s13, s12, s15
    4646:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    464a:	edc0 6a1c 	vstr	s13, [r0, #112]	; 0x70
	_sbusBias[channel] = -1.0f*((float)_sbusMin[channel] + ((float)_sbusMax[channel] - (float)_sbusMin[channel]) / 2.0f) * _sbusScale[channel];
    464e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    4652:	ee67 7a86 	vmul.f32	s15, s15, s12
    4656:	ee77 7a87 	vadd.f32	s15, s15, s14
    465a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    465e:	edc0 7a2c 	vstr	s15, [r0, #176]	; 0xb0
}
    4662:	4770      	bx	lr

00004664 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>:
{
    4664:	b508      	push	{r3, lr}
	_sbusMin[channel] = min;
    4666:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
    466a:	f8ac 202e 	strh.w	r2, [ip, #46]	; 0x2e
	_sbusMax[channel] = max;
    466e:	f8ac 304e 	strh.w	r3, [ip, #78]	; 0x4e
	scaleBias(channel);
    4672:	f7ff ffd5 	bl	4620 <SBUS::scaleBias(unsigned char)>
}
    4676:	bd08      	pop	{r3, pc}

00004678 <SBUS::begin()>:
{
    4678:	b538      	push	{r3, r4, r5, lr}
    467a:	4605      	mov	r5, r0
	_parserState = 0;
    467c:	2400      	movs	r4, #0
    467e:	7304      	strb	r4, [r0, #12]
		setEndPoints(i,_defaultMin,_defaultMax);
    4680:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4682:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    4684:	b2e1      	uxtb	r1, r4
    4686:	4628      	mov	r0, r5
    4688:	f7ff ffec 	bl	4664 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>
	for (uint8_t i = 0; i < _numChannels; i++) {
    468c:	3401      	adds	r4, #1
    468e:	2c10      	cmp	r4, #16
    4690:	d1f6      	bne.n	4680 <SBUS::begin()+0x8>
		_bus->begin(_sbusBaud,SERIAL_8E2_RXINV_TXINV);
    4692:	f44f 729b 	mov.w	r2, #310	; 0x136
    4696:	6829      	ldr	r1, [r5, #0]
    4698:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    469c:	f008 f8b2 	bl	c804 <HardwareSerial::begin(unsigned long, unsigned short)>
}
    46a0:	bd38      	pop	{r3, r4, r5, pc}

000046a2 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    46a2:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    46a6:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    46aa:	1a10      	subs	r0, r2, r0
    46ac:	4770      	bx	lr

000046ae <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    46ae:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    46b2:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    46b6:	429a      	cmp	r2, r3
    46b8:	d905      	bls.n	46c6 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    46ba:	1c5a      	adds	r2, r3, #1
    46bc:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    46c0:	4418      	add	r0, r3
    46c2:	7e80      	ldrb	r0, [r0, #26]
    46c4:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    46c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    46ca:	4770      	bx	lr

000046cc <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    46cc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    46d0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    46d4:	429a      	cmp	r2, r3
    46d6:	d902      	bls.n	46de <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    46d8:	4418      	add	r0, r3
    46da:	7e80      	ldrb	r0, [r0, #26]
    46dc:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    46de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    46e2:	4770      	bx	lr

000046e4 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    46e4:	4770      	bx	lr

000046e6 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    46e6:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    46ea:	b17b      	cbz	r3, 470c <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    46ec:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    46f0:	2b88      	cmp	r3, #136	; 0x88
    46f2:	d903      	bls.n	46fc <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    46f4:	2301      	movs	r3, #1
    46f6:	6043      	str	r3, [r0, #4]
			return 0;
    46f8:	2000      	movs	r0, #0
    46fa:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    46fc:	1c5a      	adds	r2, r3, #1
    46fe:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
    4702:	4418      	add	r0, r3
    4704:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    4708:	2001      	movs	r0, #1
    470a:	4770      	bx	lr
	return 0;
    470c:	2000      	movs	r0, #0
}
    470e:	4770      	bx	lr

00004710 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    4710:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    4712:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    4716:	b90b      	cbnz	r3, 471c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
    4718:	2000      	movs	r0, #0
}
    471a:	bd38      	pop	{r3, r4, r5, pc}
    471c:	4605      	mov	r5, r0
    471e:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    4720:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    4724:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    4728:	42a2      	cmp	r2, r4
    472a:	d202      	bcs.n	4732 <TwoWire::write(unsigned char const*, unsigned int)+0x22>
    472c:	2001      	movs	r0, #1
    472e:	6068      	str	r0, [r5, #4]
			quantity = avail;
    4730:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    4732:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    4736:	4622      	mov	r2, r4
    4738:	4418      	add	r0, r3
    473a:	f009 f80d 	bl	d758 <memcpy>
		txBufferLength += quantity;
    473e:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    4742:	4423      	add	r3, r4
    4744:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
    4748:	4620      	mov	r0, r4
    474a:	e7e6      	b.n	471a <TwoWire::write(unsigned char const*, unsigned int)+0xa>

0000474c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    474c:	b538      	push	{r3, r4, r5, lr}
    474e:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    4750:	2500      	movs	r5, #0
    4752:	6045      	str	r5, [r0, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    4754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4758:	6083      	str	r3, [r0, #8]
    475a:	7305      	strb	r5, [r0, #12]
		: port(myport), hardware(myhardware) {
    475c:	4b15      	ldr	r3, [pc, #84]	; (47b4 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    475e:	6003      	str	r3, [r0, #0]
    4760:	6101      	str	r1, [r0, #16]
    4762:	6142      	str	r2, [r0, #20]
    4764:	7605      	strb	r5, [r0, #24]
    4766:	7645      	strb	r5, [r0, #25]
    4768:	2288      	movs	r2, #136	; 0x88
    476a:	4629      	mov	r1, r5
    476c:	301a      	adds	r0, #26
    476e:	f00d f8bd 	bl	118ec <memset>
    4772:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    4776:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    477a:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    477e:	2289      	movs	r2, #137	; 0x89
    4780:	4629      	mov	r1, r5
    4782:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    4786:	f00d f8b1 	bl	118ec <memset>
    478a:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    478e:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    4792:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    4796:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    479a:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    479e:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    47a2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    47a6:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    47aa:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	}
    47ae:	4620      	mov	r0, r4
    47b0:	bd38      	pop	{r3, r4, r5, pc}
    47b2:	bf00      	nop
    47b4:	20002860 	.word	0x20002860

000047b8 <TwoWire::force_clock()>:
{
    47b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47bc:	b083      	sub	sp, #12
    47be:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    47c0:	6943      	ldr	r3, [r0, #20]
    47c2:	7e02      	ldrb	r2, [r0, #24]
    47c4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    47c8:	7a11      	ldrb	r1, [r2, #8]
    47ca:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    47cc:	7e42      	ldrb	r2, [r0, #25]
    47ce:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    47d2:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    47d6:	4b47      	ldr	r3, [pc, #284]	; (48f4 <TwoWire::force_clock()+0x13c>)
    47d8:	ea4f 1e01 	mov.w	lr, r1, lsl #4
    47dc:	eb03 1201 	add.w	r2, r3, r1, lsl #4
    47e0:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    47e2:	ea4f 1108 	mov.w	r1, r8, lsl #4
    47e6:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    47ea:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    47ec:	6852      	ldr	r2, [r2, #4]
    47ee:	2415      	movs	r4, #21
    47f0:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
    47f2:	f853 200e 	ldr.w	r2, [r3, lr]
    47f6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    47fa:	f853 e00e 	ldr.w	lr, [r3, lr]
    47fe:	f8de 2004 	ldr.w	r2, [lr, #4]
    4802:	4332      	orrs	r2, r6
    4804:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4808:	686a      	ldr	r2, [r5, #4]
    480a:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    480c:	585a      	ldr	r2, [r3, r1]
    480e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    4812:	585a      	ldr	r2, [r3, r1]
    4814:	6853      	ldr	r3, [r2, #4]
    4816:	4303      	orrs	r3, r0
    4818:	6053      	str	r3, [r2, #4]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    481a:	4b37      	ldr	r3, [pc, #220]	; (48f8 <TwoWire::force_clock()+0x140>)
    481c:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    481e:	4b37      	ldr	r3, [pc, #220]	; (48fc <TwoWire::force_clock()+0x144>)
    4820:	681a      	ldr	r2, [r3, #0]
    4822:	4b37      	ldr	r3, [pc, #220]	; (4900 <TwoWire::force_clock()+0x148>)
    4824:	fba3 3202 	umull	r3, r2, r3, r2
    4828:	0c92      	lsrs	r2, r2, #18
    482a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    482e:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4830:	4931      	ldr	r1, [pc, #196]	; (48f8 <TwoWire::force_clock()+0x140>)
    4832:	684b      	ldr	r3, [r1, #4]
    4834:	1b1b      	subs	r3, r3, r4
    4836:	429a      	cmp	r2, r3
    4838:	d8fb      	bhi.n	4832 <TwoWire::force_clock()+0x7a>
    483a:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
    483c:	492d      	ldr	r1, [pc, #180]	; (48f4 <TwoWire::force_clock()+0x13c>)
    483e:	9b01      	ldr	r3, [sp, #4]
    4840:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4844:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
    4848:	4b2b      	ldr	r3, [pc, #172]	; (48f8 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    484a:	4d2c      	ldr	r5, [pc, #176]	; (48fc <TwoWire::force_clock()+0x144>)
    484c:	4c2c      	ldr	r4, [pc, #176]	; (4900 <TwoWire::force_clock()+0x148>)
    484e:	e025      	b.n	489c <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
    4850:	680f      	ldr	r7, [r1, #0]
    4852:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4856:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    485a:	f8d5 a000 	ldr.w	sl, [r5]
    485e:	fba4 9a0a 	umull	r9, sl, r4, sl
    4862:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4866:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    486a:	685f      	ldr	r7, [r3, #4]
    486c:	eba7 090b 	sub.w	r9, r7, fp
    4870:	45ca      	cmp	sl, r9
    4872:	d8fa      	bhi.n	486a <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
    4874:	680f      	ldr	r7, [r1, #0]
    4876:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    487a:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    487e:	f8d5 a000 	ldr.w	sl, [r5]
    4882:	fba4 9a0a 	umull	r9, sl, r4, sl
    4886:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    488a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    488e:	685f      	ldr	r7, [r3, #4]
    4890:	eba7 090b 	sub.w	r9, r7, fp
    4894:	45ca      	cmp	sl, r9
    4896:	d8fa      	bhi.n	488e <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
    4898:	3a01      	subs	r2, #1
    489a:	d00e      	beq.n	48ba <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
    489c:	f8de 7000 	ldr.w	r7, [lr]
    48a0:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    48a4:	ea19 0f06 	tst.w	r9, r6
    48a8:	d0d2      	beq.n	4850 <TwoWire::force_clock()+0x98>
    48aa:	680f      	ldr	r7, [r1, #0]
    48ac:	f8d7 9008 	ldr.w	r9, [r7, #8]
    48b0:	ea19 0f00 	tst.w	r9, r0
    48b4:	d0cc      	beq.n	4850 <TwoWire::force_clock()+0x98>
			ret = true;
    48b6:	2001      	movs	r0, #1
    48b8:	e000      	b.n	48bc <TwoWire::force_clock()+0x104>
	bool ret = false;
    48ba:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    48bc:	4b0d      	ldr	r3, [pc, #52]	; (48f4 <TwoWire::force_clock()+0x13c>)
    48be:	9a01      	ldr	r2, [sp, #4]
    48c0:	eb03 1702 	add.w	r7, r3, r2, lsl #4
    48c4:	6879      	ldr	r1, [r7, #4]
    48c6:	f8dc 2014 	ldr.w	r2, [ip, #20]
    48ca:	f89c 4018 	ldrb.w	r4, [ip, #24]
    48ce:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    48d2:	68d2      	ldr	r2, [r2, #12]
    48d4:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    48d6:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    48da:	685a      	ldr	r2, [r3, #4]
    48dc:	f8dc 3014 	ldr.w	r3, [ip, #20]
    48e0:	f89c 1019 	ldrb.w	r1, [ip, #25]
    48e4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    48e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    48ea:	6013      	str	r3, [r2, #0]
}
    48ec:	b003      	add	sp, #12
    48ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48f2:	bf00      	nop
    48f4:	20002ba4 	.word	0x20002ba4
    48f8:	e0001000 	.word	0xe0001000
    48fc:	20003600 	.word	0x20003600
    4900:	431bde83 	.word	0x431bde83

00004904 <TwoWire::wait_idle()>:
{
    4904:	b538      	push	{r3, r4, r5, lr}
    4906:	4605      	mov	r5, r0
	return systick_millis_count;
    4908:	4b0c      	ldr	r3, [pc, #48]	; (493c <TwoWire::wait_idle()+0x38>)
    490a:	681c      	ldr	r4, [r3, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    490c:	6902      	ldr	r2, [r0, #16]
    490e:	4619      	mov	r1, r3
    4910:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    4912:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    4916:	d00a      	beq.n	492e <TwoWire::wait_idle()+0x2a>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    4918:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    491c:	d107      	bne.n	492e <TwoWire::wait_idle()+0x2a>
    491e:	680b      	ldr	r3, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
    4920:	1b1b      	subs	r3, r3, r4
		if (timeout > 16) {
    4922:	2b10      	cmp	r3, #16
    4924:	d9f4      	bls.n	4910 <TwoWire::wait_idle()+0xc>
			if (force_clock()) break;
    4926:	4628      	mov	r0, r5
    4928:	f7ff ff46 	bl	47b8 <TwoWire::force_clock()>
    492c:	b120      	cbz	r0, 4938 <TwoWire::wait_idle()+0x34>
	port->MSR = 0x00007F00; // clear all prior flags
    492e:	692b      	ldr	r3, [r5, #16]
    4930:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    4934:	615a      	str	r2, [r3, #20]
	return true;
    4936:	2001      	movs	r0, #1
}
    4938:	bd38      	pop	{r3, r4, r5, pc}
    493a:	bf00      	nop
    493c:	200057f8 	.word	0x200057f8

00004940 <TwoWire::endTransmission(unsigned char)>:
{
    4940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    4944:	f890 612f 	ldrb.w	r6, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    4948:	2e00      	cmp	r6, #0
    494a:	d06e      	beq.n	4a2a <TwoWire::endTransmission(unsigned char)+0xea>
    494c:	4605      	mov	r5, r0
    494e:	4689      	mov	r9, r1
	if (!wait_idle()) return 4;
    4950:	f7ff ffd8 	bl	4904 <TwoWire::wait_idle()>
    4954:	2800      	cmp	r0, #0
    4956:	d06b      	beq.n	4a30 <TwoWire::endTransmission(unsigned char)+0xf0>
    4958:	4b36      	ldr	r3, [pc, #216]	; (4a34 <TwoWire::endTransmission(unsigned char)+0xf4>)
    495a:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    495e:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4960:	f44f 7a00 	mov.w	sl, #512	; 0x200
    4964:	461f      	mov	r7, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4966:	e040      	b.n	49ea <TwoWire::endTransmission(unsigned char)+0xaa>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4968:	692b      	ldr	r3, [r5, #16]
    496a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    496c:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    4970:	f012 0f04 	tst.w	r2, #4
    4974:	d00b      	beq.n	498e <TwoWire::endTransmission(unsigned char)+0x4e>
    4976:	e03a      	b.n	49ee <TwoWire::endTransmission(unsigned char)+0xae>
				} else if (tx_index < tx_len) {
    4978:	42a6      	cmp	r6, r4
    497a:	d912      	bls.n	49a2 <TwoWire::endTransmission(unsigned char)+0x62>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    497c:	692a      	ldr	r2, [r5, #16]
    497e:	1929      	adds	r1, r5, r4
    4980:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    4984:	6611      	str	r1, [r2, #96]	; 0x60
    4986:	3401      	adds	r4, #1
				fifo_used++;
    4988:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    498a:	2b03      	cmp	r3, #3
    498c:	d82f      	bhi.n	49ee <TwoWire::endTransmission(unsigned char)+0xae>
				if (tx_index == 0) {
    498e:	2c00      	cmp	r4, #0
    4990:	d1f2      	bne.n	4978 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    4992:	6929      	ldr	r1, [r5, #16]
    4994:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    4998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    499c:	660a      	str	r2, [r1, #96]	; 0x60
					tx_index = 1;
    499e:	2401      	movs	r4, #1
    49a0:	e7f2      	b.n	4988 <TwoWire::endTransmission(unsigned char)+0x48>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    49a2:	f1b9 0f00 	cmp.w	r9, #0
    49a6:	d002      	beq.n	49ae <TwoWire::endTransmission(unsigned char)+0x6e>
    49a8:	692b      	ldr	r3, [r5, #16]
    49aa:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    49ae:	3401      	adds	r4, #1
					break;
    49b0:	e01d      	b.n	49ee <TwoWire::endTransmission(unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    49b2:	690b      	ldr	r3, [r1, #16]
    49b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    49b8:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    49ba:	2004      	movs	r0, #4
    49bc:	e036      	b.n	4a2c <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    49be:	690b      	ldr	r3, [r1, #16]
    49c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    49c4:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    49c6:	692b      	ldr	r3, [r5, #16]
    49c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    49cc:	661a      	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    49ce:	2002      	movs	r0, #2
    49d0:	e02c      	b.n	4a2c <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    49d2:	690b      	ldr	r3, [r1, #16]
    49d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    49d8:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    49da:	692b      	ldr	r3, [r5, #16]
    49dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    49e0:	661a      	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    49e2:	2004      	movs	r0, #4
    49e4:	e022      	b.n	4a2c <TwoWire::endTransmission(unsigned char)+0xec>
		yield();
    49e6:	f00a fd17 	bl	f418 <yield>
		if (tx_index <= tx_len) {
    49ea:	42b4      	cmp	r4, r6
    49ec:	d9bc      	bls.n	4968 <TwoWire::endTransmission(unsigned char)+0x28>
		uint32_t status = port->MSR; // pg 2884 & 2891
    49ee:	6929      	ldr	r1, [r5, #16]
    49f0:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    49f2:	f413 6f00 	tst.w	r3, #2048	; 0x800
    49f6:	d1dc      	bne.n	49b2 <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    49f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    49fc:	d1df      	bne.n	49be <TwoWire::endTransmission(unsigned char)+0x7e>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    49fe:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4a02:	d1e6      	bne.n	49d2 <TwoWire::endTransmission(unsigned char)+0x92>
    4a04:	683a      	ldr	r2, [r7, #0]
	operator unsigned long () const { return millis() - ms; }
    4a06:	eba2 0208 	sub.w	r2, r2, r8
    4a0a:	2a32      	cmp	r2, #50	; 0x32
    4a0c:	d8e1      	bhi.n	49d2 <TwoWire::endTransmission(unsigned char)+0x92>
		if (tx_index > tx_len) {
    4a0e:	42b4      	cmp	r4, r6
    4a10:	d9e9      	bls.n	49e6 <TwoWire::endTransmission(unsigned char)+0xa6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4a12:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4a14:	f012 0f07 	tst.w	r2, #7
    4a18:	d1e5      	bne.n	49e6 <TwoWire::endTransmission(unsigned char)+0xa6>
    4a1a:	f413 7f00 	tst.w	r3, #512	; 0x200
    4a1e:	d102      	bne.n	4a26 <TwoWire::endTransmission(unsigned char)+0xe6>
    4a20:	f1b9 0f00 	cmp.w	r9, #0
    4a24:	d1df      	bne.n	49e6 <TwoWire::endTransmission(unsigned char)+0xa6>
				return 0;
    4a26:	2000      	movs	r0, #0
    4a28:	e000      	b.n	4a2c <TwoWire::endTransmission(unsigned char)+0xec>
	if (!tx_len) return 4; // no address for transmit
    4a2a:	2004      	movs	r0, #4
}
    4a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!wait_idle()) return 4;
    4a30:	2004      	movs	r0, #4
    4a32:	e7fb      	b.n	4a2c <TwoWire::endTransmission(unsigned char)+0xec>
    4a34:	200057f8 	.word	0x200057f8

00004a38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a3c:	4604      	mov	r4, r0
    4a3e:	460d      	mov	r5, r1
    4a40:	4616      	mov	r6, r2
    4a42:	4698      	mov	r8, r3
	if (!wait_idle()) return 4;
    4a44:	f7ff ff5e 	bl	4904 <TwoWire::wait_idle()>
    4a48:	2800      	cmp	r0, #0
    4a4a:	f000 8090 	beq.w	4b6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    4a4e:	0069      	lsls	r1, r5, #1
	if (length < 1) length = 1;
    4a50:	2e01      	cmp	r6, #1
    4a52:	bf38      	it	cc
    4a54:	2601      	movcc	r6, #1
	rxBufferIndex = 0;
    4a56:	2500      	movs	r5, #0
    4a58:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
	rxBufferLength = 0;
    4a5c:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    4a60:	4b44      	ldr	r3, [pc, #272]	; (4b74 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    4a62:	f8d3 9000 	ldr.w	r9, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4a66:	b2c9      	uxtb	r1, r1
    4a68:	f240 4701 	movw	r7, #1025	; 0x401
    4a6c:	430f      	orrs	r7, r1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4a6e:	e059      	b.n	4b24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    4a70:	6923      	ldr	r3, [r4, #16]
    4a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4a74:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    4a78:	f013 0f04 	tst.w	r3, #4
    4a7c:	d154      	bne.n	4b28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    4a7e:	462b      	mov	r3, r5
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4a80:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4a84:	1e70      	subs	r0, r6, #1
    4a86:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4a8a:	4429      	add	r1, r5
    4a8c:	e010      	b.n	4ab0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    4a8e:	2b01      	cmp	r3, #1
    4a90:	d006      	beq.n	4aa0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4a92:	f1b8 0f00 	cmp.w	r8, #0
    4a96:	d005      	beq.n	4aa4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
    4a98:	6922      	ldr	r2, [r4, #16]
    4a9a:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    4a9e:	e001      	b.n	4aa4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4aa0:	6922      	ldr	r2, [r4, #16]
    4aa2:	6610      	str	r0, [r2, #96]	; 0x60
				tx_state++;
    4aa4:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
    4aa6:	1aca      	subs	r2, r1, r3
    4aa8:	2a03      	cmp	r2, #3
    4aaa:	d806      	bhi.n	4aba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
    4aac:	2b02      	cmp	r3, #2
    4aae:	d804      	bhi.n	4aba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
				if (tx_state == 0) {
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d1ec      	bne.n	4a8e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4ab4:	6922      	ldr	r2, [r4, #16]
    4ab6:	6617      	str	r7, [r2, #96]	; 0x60
    4ab8:	e7f4      	b.n	4aa4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				tx_state++;
    4aba:	461d      	mov	r5, r3
    4abc:	e034      	b.n	4b28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4abe:	f8d4 c010 	ldr.w	ip, [r4, #16]
    4ac2:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
    4ac6:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4aca:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    4ace:	d02f      	beq.n	4b30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
				rxBuffer[rxBufferLength++] = port->MRDR;
    4ad0:	f8dc 0070 	ldr.w	r0, [ip, #112]	; 0x70
    4ad4:	460b      	mov	r3, r1
    4ad6:	3101      	adds	r1, #1
    4ad8:	b2c9      	uxtb	r1, r1
    4ada:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    4ade:	4423      	add	r3, r4
    4ae0:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4ae2:	3a01      	subs	r2, #1
    4ae4:	d024      	beq.n	4b30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
    4ae6:	2987      	cmp	r1, #135	; 0x87
    4ae8:	d9f2      	bls.n	4ad0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x98>
    4aea:	e021      	b.n	4b30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4aec:	690b      	ldr	r3, [r1, #16]
    4aee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4af2:	610b      	str	r3, [r1, #16]
			break;
    4af4:	e007      	b.n	4b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4af6:	690b      	ldr	r3, [r1, #16]
    4af8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4afc:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4afe:	6923      	ldr	r3, [r4, #16]
    4b00:	f44f 7200 	mov.w	r2, #512	; 0x200
    4b04:	661a      	str	r2, [r3, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4b06:	6923      	ldr	r3, [r4, #16]
    4b08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    4b0a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    4b0e:	d003      	beq.n	4b18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
    4b10:	691a      	ldr	r2, [r3, #16]
    4b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4b16:	611a      	str	r2, [r3, #16]
	return rxBufferLength;
    4b18:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
    4b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		yield();
    4b20:	f00a fc7a 	bl	f418 <yield>
		if (tx_state < 3) {
    4b24:	2d02      	cmp	r5, #2
    4b26:	d9a3      	bls.n	4a70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
		if (rxBufferLength < sizeof(rxBuffer)) {
    4b28:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    4b2c:	2987      	cmp	r1, #135	; 0x87
    4b2e:	d9c6      	bls.n	4abe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
		uint32_t status = port->MSR; // pg 2884 & 2891
    4b30:	6921      	ldr	r1, [r4, #16]
    4b32:	694a      	ldr	r2, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    4b34:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4b38:	d1d8      	bne.n	4aec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4b3a:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    4b3e:	d1da      	bne.n	4af6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
    4b40:	4b0c      	ldr	r3, [pc, #48]	; (4b74 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    4b42:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
    4b44:	eba3 0309 	sub.w	r3, r3, r9
    4b48:	2b32      	cmp	r3, #50	; 0x32
    4b4a:	d8d4      	bhi.n	4af6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		if (rxBufferLength >= length && tx_state >= 3) {
    4b4c:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    4b50:	42b3      	cmp	r3, r6
    4b52:	d3e5      	bcc.n	4b20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4b54:	2d02      	cmp	r5, #2
    4b56:	d9e3      	bls.n	4b20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4b58:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4b5a:	f013 0f07 	tst.w	r3, #7
    4b5e:	d1df      	bne.n	4b20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4b60:	f412 7f00 	tst.w	r2, #512	; 0x200
    4b64:	d1cf      	bne.n	4b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
    4b66:	f1b8 0f00 	cmp.w	r8, #0
    4b6a:	d1d9      	bne.n	4b20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4b6c:	e7cb      	b.n	4b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
	if (!wait_idle()) return 4;
    4b6e:	2004      	movs	r0, #4
    4b70:	e7d4      	b.n	4b1c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
    4b72:	bf00      	nop
    4b74:	200057f8 	.word	0x200057f8

00004b78 <TwoWire::isr()>:
{
    4b78:	b538      	push	{r3, r4, r5, lr}
    4b7a:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    4b7c:	6903      	ldr	r3, [r0, #16]
    4b7e:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    4b82:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    4b86:	d001      	beq.n	4b8c <TwoWire::isr()+0x14>
    4b88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    4b8c:	f015 0f02 	tst.w	r5, #2
    4b90:	d012      	beq.n	4bb8 <TwoWire::isr()+0x40>
		int rx = port->SRDR;
    4b92:	6923      	ldr	r3, [r4, #16]
    4b94:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    4b98:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    4b9c:	d008      	beq.n	4bb0 <TwoWire::isr()+0x38>
			rxBufferIndex = 0;
    4b9e:	2300      	movs	r3, #0
    4ba0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    4ba4:	1c59      	adds	r1, r3, #1
    4ba6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    4baa:	4423      	add	r3, r4
    4bac:	769a      	strb	r2, [r3, #26]
    4bae:	e003      	b.n	4bb8 <TwoWire::isr()+0x40>
		if (rxBufferLength < BUFFER_LENGTH) {
    4bb0:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    4bb4:	2b87      	cmp	r3, #135	; 0x87
    4bb6:	d9f5      	bls.n	4ba4 <TwoWire::isr()+0x2c>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    4bb8:	f015 0f01 	tst.w	r5, #1
    4bbc:	d01b      	beq.n	4bf6 <TwoWire::isr()+0x7e>
		if (!transmitting) {
    4bbe:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    4bc2:	b94b      	cbnz	r3, 4bd8 <TwoWire::isr()+0x60>
			if (user_onRequest != nullptr) {
    4bc4:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    4bc8:	b103      	cbz	r3, 4bcc <TwoWire::isr()+0x54>
				(*user_onRequest)();
    4bca:	4798      	blx	r3
			txBufferIndex = 0;
    4bcc:	2300      	movs	r3, #0
    4bce:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    4bd2:	2301      	movs	r3, #1
    4bd4:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    4bd8:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
    4bdc:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    4be0:	429a      	cmp	r2, r3
    4be2:	d91e      	bls.n	4c22 <TwoWire::isr()+0xaa>
			port->STDR = txBuffer[txBufferIndex++];
    4be4:	1c5a      	adds	r2, r3, #1
    4be6:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    4bea:	6922      	ldr	r2, [r4, #16]
    4bec:	4423      	add	r3, r4
    4bee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    4bf2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    4bf6:	f415 7f00 	tst.w	r5, #512	; 0x200
    4bfa:	d011      	beq.n	4c20 <TwoWire::isr()+0xa8>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    4bfc:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    4c00:	b118      	cbz	r0, 4c0a <TwoWire::isr()+0x92>
    4c02:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    4c06:	b103      	cbz	r3, 4c0a <TwoWire::isr()+0x92>
			(*user_onReceive)(rxBufferLength);
    4c08:	4798      	blx	r3
		rxBufferIndex = 0;
    4c0a:	2300      	movs	r3, #0
    4c0c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
    4c10:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
    4c14:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
    4c18:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
    4c1c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    4c20:	bd38      	pop	{r3, r4, r5, pc}
			port->STDR = 0;
    4c22:	6923      	ldr	r3, [r4, #16]
    4c24:	2200      	movs	r2, #0
    4c26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    4c2a:	e7e4      	b.n	4bf6 <TwoWire::isr()+0x7e>

00004c2c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    4c2c:	b508      	push	{r3, lr}
    4c2e:	4802      	ldr	r0, [pc, #8]	; (4c38 <lpi2c1_isr()+0xc>)
    4c30:	f7ff ffa2 	bl	4b78 <TwoWire::isr()>
    4c34:	bd08      	pop	{r3, pc}
    4c36:	bf00      	nop
    4c38:	20004c50 	.word	0x20004c50

00004c3c <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    4c3c:	b508      	push	{r3, lr}
    4c3e:	4802      	ldr	r0, [pc, #8]	; (4c48 <lpi2c3_isr()+0xc>)
    4c40:	f7ff ff9a 	bl	4b78 <TwoWire::isr()>
    4c44:	bd08      	pop	{r3, pc}
    4c46:	bf00      	nop
    4c48:	20004d90 	.word	0x20004d90

00004c4c <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    4c4c:	b508      	push	{r3, lr}
    4c4e:	4802      	ldr	r0, [pc, #8]	; (4c58 <lpi2c4_isr()+0xc>)
    4c50:	f7ff ff92 	bl	4b78 <TwoWire::isr()>
    4c54:	bd08      	pop	{r3, pc}
    4c56:	bf00      	nop
    4c58:	20004ed0 	.word	0x20004ed0

00004c5c <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    4c5c:	6903      	ldr	r3, [r0, #16]
    4c5e:	2200      	movs	r2, #0
    4c60:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    4c62:	4b1d      	ldr	r3, [pc, #116]	; (4cd8 <TwoWire::setClock(unsigned long)+0x7c>)
    4c64:	4299      	cmp	r1, r3
    4c66:	d81a      	bhi.n	4c9e <TwoWire::setClock(unsigned long)+0x42>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4c68:	6903      	ldr	r3, [r0, #16]
    4c6a:	4a1c      	ldr	r2, [pc, #112]	; (4cdc <TwoWire::setClock(unsigned long)+0x80>)
    4c6c:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    4c6e:	6903      	ldr	r3, [r0, #16]
    4c70:	2201      	movs	r2, #1
    4c72:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    4c74:	6903      	ldr	r3, [r0, #16]
    4c76:	4a1a      	ldr	r2, [pc, #104]	; (4ce0 <TwoWire::setClock(unsigned long)+0x84>)
    4c78:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4c7a:	6903      	ldr	r3, [r0, #16]
    4c7c:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
    4c80:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    4c82:	6903      	ldr	r3, [r0, #16]
    4c84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4c86:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4c88:	6903      	ldr	r3, [r0, #16]
    4c8a:	2200      	movs	r2, #0
    4c8c:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    4c8e:	6903      	ldr	r3, [r0, #16]
    4c90:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4c94:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    4c96:	6903      	ldr	r3, [r0, #16]
    4c98:	2201      	movs	r2, #1
    4c9a:	611a      	str	r2, [r3, #16]
}
    4c9c:	4770      	bx	lr
	} else if (frequency < 1000000) {
    4c9e:	4b11      	ldr	r3, [pc, #68]	; (4ce4 <TwoWire::setClock(unsigned long)+0x88>)
    4ca0:	4299      	cmp	r1, r3
    4ca2:	d80c      	bhi.n	4cbe <TwoWire::setClock(unsigned long)+0x62>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    4ca4:	6903      	ldr	r3, [r0, #16]
    4ca6:	4a10      	ldr	r2, [pc, #64]	; (4ce8 <TwoWire::setClock(unsigned long)+0x8c>)
    4ca8:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4caa:	6903      	ldr	r3, [r0, #16]
    4cac:	2200      	movs	r2, #0
    4cae:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    4cb0:	6903      	ldr	r3, [r0, #16]
    4cb2:	4a0e      	ldr	r2, [pc, #56]	; (4cec <TwoWire::setClock(unsigned long)+0x90>)
    4cb4:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4cb6:	6903      	ldr	r3, [r0, #16]
    4cb8:	4a0d      	ldr	r2, [pc, #52]	; (4cf0 <TwoWire::setClock(unsigned long)+0x94>)
    4cba:	62da      	str	r2, [r3, #44]	; 0x2c
    4cbc:	e7e1      	b.n	4c82 <TwoWire::setClock(unsigned long)+0x26>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    4cbe:	6903      	ldr	r3, [r0, #16]
    4cc0:	4a0c      	ldr	r2, [pc, #48]	; (4cf4 <TwoWire::setClock(unsigned long)+0x98>)
    4cc2:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4cc4:	6903      	ldr	r3, [r0, #16]
    4cc6:	2200      	movs	r2, #0
    4cc8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    4cca:	6903      	ldr	r3, [r0, #16]
    4ccc:	4a0a      	ldr	r2, [pc, #40]	; (4cf8 <TwoWire::setClock(unsigned long)+0x9c>)
    4cce:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4cd0:	6903      	ldr	r3, [r0, #16]
    4cd2:	4a07      	ldr	r2, [pc, #28]	; (4cf0 <TwoWire::setClock(unsigned long)+0x94>)
    4cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    4cd6:	e7d4      	b.n	4c82 <TwoWire::setClock(unsigned long)+0x26>
    4cd8:	00061a7f 	.word	0x00061a7f
    4cdc:	1928373b 	.word	0x1928373b
    4ce0:	05050bb8 	.word	0x05050bb8
    4ce4:	000f423f 	.word	0x000f423f
    4ce8:	0c121a1c 	.word	0x0c121a1c
    4cec:	02020e10 	.word	0x02020e10
    4cf0:	00057f00 	.word	0x00057f00
    4cf4:	0407090a 	.word	0x0407090a
    4cf8:	01010960 	.word	0x01010960

00004cfc <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    4cfc:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    4cfe:	4c09      	ldr	r4, [pc, #36]	; (4d24 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    4d00:	4622      	mov	r2, r4
    4d02:	4909      	ldr	r1, [pc, #36]	; (4d28 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    4d04:	4809      	ldr	r0, [pc, #36]	; (4d2c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    4d06:	f7ff fd21 	bl	474c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    4d0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4d0e:	4908      	ldr	r1, [pc, #32]	; (4d30 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    4d10:	4808      	ldr	r0, [pc, #32]	; (4d34 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    4d12:	f7ff fd1b 	bl	474c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    4d16:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    4d1a:	4907      	ldr	r1, [pc, #28]	; (4d38 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    4d1c:	4807      	ldr	r0, [pc, #28]	; (4d3c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    4d1e:	f7ff fd15 	bl	474c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    4d22:	bd10      	pop	{r4, pc}
    4d24:	60001fb4 	.word	0x60001fb4
    4d28:	403f0000 	.word	0x403f0000
    4d2c:	20004c50 	.word	0x20004c50
    4d30:	403f8000 	.word	0x403f8000
    4d34:	20004d90 	.word	0x20004d90
    4d38:	403fc000 	.word	0x403fc000
    4d3c:	20004ed0 	.word	0x20004ed0

00004d40 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4d40:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    4d42:	4b2e      	ldr	r3, [pc, #184]	; (4dfc <_spi_dma_rxISR0()+0xbc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    4d44:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4d46:	7908      	ldrb	r0, [r1, #4]
    4d48:	4a2d      	ldr	r2, [pc, #180]	; (4e00 <_spi_dma_rxISR0()+0xc0>)
    4d4a:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4d4c:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4d4e:	7900      	ldrb	r0, [r0, #4]
    4d50:	7710      	strb	r0, [r2, #28]
    4d52:	7909      	ldrb	r1, [r1, #4]
    4d54:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    4d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d03a      	beq.n	4dd2 <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4d60:	d30b      	bcc.n	4d7a <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    4d62:	4a28      	ldr	r2, [pc, #160]	; (4e04 <_spi_dma_rxISR0()+0xc4>)
    4d64:	441a      	add	r2, r3
    4d66:	4b25      	ldr	r3, [pc, #148]	; (4dfc <_spi_dma_rxISR0()+0xbc>)
    4d68:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4d6c:	7911      	ldrb	r1, [r2, #4]
    4d6e:	4a24      	ldr	r2, [pc, #144]	; (4e00 <_spi_dma_rxISR0()+0xc0>)
    4d70:	76d1      	strb	r1, [r2, #27]
    4d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4d74:	791b      	ldrb	r3, [r3, #4]
    4d76:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4d78:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4d7a:	4a20      	ldr	r2, [pc, #128]	; (4dfc <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4d7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4d7e:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4d80:	8bd1      	ldrh	r1, [r2, #30]
    4d82:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4d86:	d114      	bne.n	4db2 <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    4d88:	b29b      	uxth	r3, r3
    4d8a:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4d8c:	8bd3      	ldrh	r3, [r2, #30]
    4d8e:	b29b      	uxth	r3, r3
    4d90:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4d92:	4b1a      	ldr	r3, [pc, #104]	; (4dfc <_spi_dma_rxISR0()+0xbc>)
    4d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4d98:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4d9a:	8bd9      	ldrh	r1, [r3, #30]
    4d9c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4da0:	d10f      	bne.n	4dc2 <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    4da2:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4da6:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4da8:	8bda      	ldrh	r2, [r3, #30]
    4daa:	b292      	uxth	r2, r2
    4dac:	82da      	strh	r2, [r3, #22]
    4dae:	2200      	movs	r2, #0
    4db0:	e7d9      	b.n	4d66 <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4db2:	8bd1      	ldrh	r1, [r2, #30]
    4db4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4dbc:	430b      	orrs	r3, r1
    4dbe:	83d3      	strh	r3, [r2, #30]
    4dc0:	e7e4      	b.n	4d8c <_spi_dma_rxISR0()+0x4c>
    4dc2:	8bd9      	ldrh	r1, [r3, #30]
    4dc4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4dcc:	430a      	orrs	r2, r1
    4dce:	83da      	strh	r2, [r3, #30]
    4dd0:	e7ea      	b.n	4da8 <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4dd2:	4a0a      	ldr	r2, [pc, #40]	; (4dfc <_spi_dma_rxISR0()+0xbc>)
    4dd4:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4dd6:	210f      	movs	r1, #15
    4dd8:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4dda:	2100      	movs	r1, #0
    4ddc:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4dde:	f240 3001 	movw	r0, #769	; 0x301
    4de2:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4de4:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4de8:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4dea:	2303      	movs	r3, #3
    4dec:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4df0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4df2:	6803      	ldr	r3, [r0, #0]
    4df4:	681b      	ldr	r3, [r3, #0]
    4df6:	460a      	mov	r2, r1
    4df8:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4dfa:	e7bd      	b.n	4d78 <_spi_dma_rxISR0()+0x38>
    4dfc:	20004b00 	.word	0x20004b00
    4e00:	400e8000 	.word	0x400e8000
    4e04:	ffff8001 	.word	0xffff8001

00004e08 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4e08:	b508      	push	{r3, lr}
	_dmaRX->clearInterrupt();
    4e0a:	4b2e      	ldr	r3, [pc, #184]	; (4ec4 <_spi_dma_rxISR1()+0xbc>)
		DMA_CINT = channel;
    4e0c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4e0e:	7908      	ldrb	r0, [r1, #4]
    4e10:	4a2d      	ldr	r2, [pc, #180]	; (4ec8 <_spi_dma_rxISR1()+0xc0>)
    4e12:	77d0      	strb	r0, [r2, #31]
		DMA_CDNE = channel;
    4e14:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4e16:	7900      	ldrb	r0, [r0, #4]
    4e18:	7710      	strb	r0, [r2, #28]
    4e1a:	7909      	ldrb	r1, [r1, #4]
    4e1c:	7711      	strb	r1, [r2, #28]
	if (_dma_count_remaining) {
    4e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e20:	2b00      	cmp	r3, #0
    4e22:	d03a      	beq.n	4e9a <_spi_dma_rxISR1()+0x92>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4e28:	d30b      	bcc.n	4e42 <_spi_dma_rxISR1()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    4e2a:	4a28      	ldr	r2, [pc, #160]	; (4ecc <_spi_dma_rxISR1()+0xc4>)
    4e2c:	441a      	add	r2, r3
    4e2e:	4b25      	ldr	r3, [pc, #148]	; (4ec4 <_spi_dma_rxISR1()+0xbc>)
    4e30:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4e34:	7911      	ldrb	r1, [r2, #4]
    4e36:	4a24      	ldr	r2, [pc, #144]	; (4ec8 <_spi_dma_rxISR1()+0xc0>)
    4e38:	76d1      	strb	r1, [r2, #27]
    4e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e3c:	791b      	ldrb	r3, [r3, #4]
    4e3e:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4e40:	bd08      	pop	{r3, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4e42:	4a20      	ldr	r2, [pc, #128]	; (4ec4 <_spi_dma_rxISR1()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4e44:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4e46:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4e48:	8bd1      	ldrh	r1, [r2, #30]
    4e4a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4e4e:	d114      	bne.n	4e7a <_spi_dma_rxISR1()+0x72>
		tcd->BITER = len & 0x7fff;
    4e50:	b29b      	uxth	r3, r3
    4e52:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4e54:	8bd3      	ldrh	r3, [r2, #30]
    4e56:	b29b      	uxth	r3, r3
    4e58:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4e5a:	4b1a      	ldr	r3, [pc, #104]	; (4ec4 <_spi_dma_rxISR1()+0xbc>)
    4e5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4e60:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4e62:	8bd9      	ldrh	r1, [r3, #30]
    4e64:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4e68:	d10f      	bne.n	4e8a <_spi_dma_rxISR1()+0x82>
		tcd->BITER = len & 0x7fff;
    4e6a:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4e6e:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4e70:	8bda      	ldrh	r2, [r3, #30]
    4e72:	b292      	uxth	r2, r2
    4e74:	82da      	strh	r2, [r3, #22]
    4e76:	2200      	movs	r2, #0
    4e78:	e7d9      	b.n	4e2e <_spi_dma_rxISR1()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4e7a:	8bd1      	ldrh	r1, [r2, #30]
    4e7c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4e84:	430b      	orrs	r3, r1
    4e86:	83d3      	strh	r3, [r2, #30]
    4e88:	e7e4      	b.n	4e54 <_spi_dma_rxISR1()+0x4c>
    4e8a:	8bd9      	ldrh	r1, [r3, #30]
    4e8c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4e94:	430a      	orrs	r2, r1
    4e96:	83da      	strh	r2, [r3, #30]
    4e98:	e7ea      	b.n	4e70 <_spi_dma_rxISR1()+0x68>
    4e9a:	4a0a      	ldr	r2, [pc, #40]	; (4ec4 <_spi_dma_rxISR1()+0xbc>)
    4e9c:	6813      	ldr	r3, [r2, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4e9e:	210f      	movs	r1, #15
    4ea0:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4ea2:	2100      	movs	r1, #0
    4ea4:	61d9      	str	r1, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4ea6:	f240 3001 	movw	r0, #769	; 0x301
    4eaa:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4eac:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4eb0:	6158      	str	r0, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4eb2:	2303      	movs	r3, #3
    4eb4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4eb8:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4eba:	6803      	ldr	r3, [r0, #0]
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	460a      	mov	r2, r1
    4ec0:	4798      	blx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4ec2:	e7bd      	b.n	4e40 <_spi_dma_rxISR1()+0x38>
    4ec4:	20004b50 	.word	0x20004b50
    4ec8:	400e8000 	.word	0x400e8000
    4ecc:	ffff8001 	.word	0xffff8001

00004ed0 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    4ed0:	6001      	str	r1, [r0, #0]
    4ed2:	6042      	str	r2, [r0, #4]
    4ed4:	2300      	movs	r3, #0
    4ed6:	6083      	str	r3, [r0, #8]
    4ed8:	60c3      	str	r3, [r0, #12]
    4eda:	7403      	strb	r3, [r0, #16]
    4edc:	7443      	strb	r3, [r0, #17]
    4ede:	7483      	strb	r3, [r0, #18]
    4ee0:	74c3      	strb	r3, [r0, #19]
    4ee2:	6143      	str	r3, [r0, #20]
    4ee4:	6183      	str	r3, [r0, #24]
    4ee6:	61c3      	str	r3, [r0, #28]
    4ee8:	6203      	str	r3, [r0, #32]
    4eea:	6243      	str	r3, [r0, #36]	; 0x24
    4eec:	6283      	str	r3, [r0, #40]	; 0x28
    4eee:	62c3      	str	r3, [r0, #44]	; 0x2c
    4ef0:	6303      	str	r3, [r0, #48]	; 0x30
    4ef2:	6343      	str	r3, [r0, #52]	; 0x34
    4ef4:	6383      	str	r3, [r0, #56]	; 0x38
    4ef6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    4efa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    4efe:	6403      	str	r3, [r0, #64]	; 0x40
    4f00:	6443      	str	r3, [r0, #68]	; 0x44
    4f02:	6483      	str	r3, [r0, #72]	; 0x48
    4f04:	64c3      	str	r3, [r0, #76]	; 0x4c
	}
    4f06:	4770      	bx	lr

00004f08 <SPIClass::begin()>:
{
    4f08:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4f0a:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4f0c:	680a      	ldr	r2, [r1, #0]
    4f0e:	6813      	ldr	r3, [r2, #0]
    4f10:	6849      	ldr	r1, [r1, #4]
    4f12:	ea23 0301 	bic.w	r3, r3, r1
    4f16:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4f18:	498f      	ldr	r1, [pc, #572]	; (5158 <SPIClass::begin()+0x250>)
    4f1a:	698b      	ldr	r3, [r1, #24]
    4f1c:	4a8f      	ldr	r2, [pc, #572]	; (515c <SPIClass::begin()+0x254>)
    4f1e:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4f20:	4b8f      	ldr	r3, [pc, #572]	; (5160 <SPIClass::begin()+0x258>)
    4f22:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4f24:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4f26:	4b8f      	ldr	r3, [pc, #572]	; (5164 <SPIClass::begin()+0x25c>)
    4f28:	6842      	ldr	r2, [r0, #4]
    4f2a:	7c01      	ldrb	r1, [r0, #16]
    4f2c:	440a      	add	r2, r1
    4f2e:	7c12      	ldrb	r2, [r2, #16]
    4f30:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4f34:	6891      	ldr	r1, [r2, #8]
    4f36:	22b8      	movs	r2, #184	; 0xb8
    4f38:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4f3a:	6841      	ldr	r1, [r0, #4]
    4f3c:	7c44      	ldrb	r4, [r0, #17]
    4f3e:	4421      	add	r1, r4
    4f40:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4f44:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4f48:	6889      	ldr	r1, [r1, #8]
    4f4a:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    4f4c:	6841      	ldr	r1, [r0, #4]
    4f4e:	7c84      	ldrb	r4, [r0, #18]
    4f50:	4421      	add	r1, r4
    4f52:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    4f56:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4f5a:	6889      	ldr	r1, [r1, #8]
    4f5c:	600a      	str	r2, [r1, #0]
    4f5e:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    4f60:	6821      	ldr	r1, [r4, #0]
    4f62:	680a      	ldr	r2, [r1, #0]
    4f64:	6864      	ldr	r4, [r4, #4]
    4f66:	4322      	orrs	r2, r4
    4f68:	600a      	str	r2, [r1, #0]
    4f6a:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4f6c:	7c04      	ldrb	r4, [r0, #16]
    4f6e:	1911      	adds	r1, r2, r4
    4f70:	7c09      	ldrb	r1, [r1, #16]
    4f72:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4f76:	6849      	ldr	r1, [r1, #4]
    4f78:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4f7c:	6952      	ldr	r2, [r2, #20]
    4f7e:	600a      	str	r2, [r1, #0]
    4f80:	6844      	ldr	r4, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    4f82:	7c42      	ldrb	r2, [r0, #17]
    4f84:	18a1      	adds	r1, r4, r2
    4f86:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4f8a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4f8e:	6849      	ldr	r1, [r1, #4]
    4f90:	320a      	adds	r2, #10
    4f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    4f96:	600a      	str	r2, [r1, #0]
    4f98:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4f9a:	7c81      	ldrb	r1, [r0, #18]
    4f9c:	1854      	adds	r4, r2, r1
    4f9e:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    4fa2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4fa6:	685b      	ldr	r3, [r3, #4]
    4fa8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    4fae:	601a      	str	r2, [r3, #0]
    4fb0:	6843      	ldr	r3, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    4fb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4fb4:	7c81      	ldrb	r1, [r0, #18]
    4fb6:	440b      	add	r3, r1
    4fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4fbc:	6013      	str	r3, [r2, #0]
    4fbe:	6843      	ldr	r3, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    4fc0:	6a1a      	ldr	r2, [r3, #32]
    4fc2:	7c01      	ldrb	r1, [r0, #16]
    4fc4:	440b      	add	r3, r1
    4fc6:	7f1b      	ldrb	r3, [r3, #28]
    4fc8:	6013      	str	r3, [r2, #0]
    4fca:	6843      	ldr	r3, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4fce:	7c41      	ldrb	r1, [r0, #17]
    4fd0:	440b      	add	r3, r1
    4fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    4fd6:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4fd8:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    4fda:	2202      	movs	r2, #2
    4fdc:	611a      	str	r2, [r3, #16]
    4fde:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    4fe0:	220f      	movs	r2, #15
    4fe2:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    4fe4:	7cc3      	ldrb	r3, [r0, #19]
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d042      	beq.n	5070 <SPIClass::begin()+0x168>
			__disable_irq();
    4fea:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4fec:	7cc3      	ldrb	r3, [r0, #19]
    4fee:	f013 0f01 	tst.w	r3, #1
    4ff2:	d008      	beq.n	5006 <SPIClass::begin()+0xfe>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4ff4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4ff8:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    4ffc:	6941      	ldr	r1, [r0, #20]
    4ffe:	400b      	ands	r3, r1
    5000:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    5002:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    5006:	7cc3      	ldrb	r3, [r0, #19]
    5008:	f013 0f02 	tst.w	r3, #2
    500c:	d008      	beq.n	5020 <SPIClass::begin()+0x118>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    500e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5012:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    5016:	6981      	ldr	r1, [r0, #24]
    5018:	400b      	ands	r3, r1
    501a:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    501c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    5020:	7cc3      	ldrb	r3, [r0, #19]
    5022:	f013 0f04 	tst.w	r3, #4
    5026:	d008      	beq.n	503a <SPIClass::begin()+0x132>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5028:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    502c:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    5030:	69c1      	ldr	r1, [r0, #28]
    5032:	400b      	ands	r3, r1
    5034:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    5036:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    503a:	7cc3      	ldrb	r3, [r0, #19]
    503c:	f013 0f08 	tst.w	r3, #8
    5040:	d008      	beq.n	5054 <SPIClass::begin()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    5042:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5046:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    504a:	6a01      	ldr	r1, [r0, #32]
    504c:	400b      	ands	r3, r1
    504e:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    5050:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    5054:	7cc3      	ldrb	r3, [r0, #19]
    5056:	f013 0f10 	tst.w	r3, #16
    505a:	d008      	beq.n	506e <SPIClass::begin()+0x166>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    505c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5060:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    5064:	6a41      	ldr	r1, [r0, #36]	; 0x24
    5066:	400b      	ands	r3, r1
    5068:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    506a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    506e:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    5070:	6882      	ldr	r2, [r0, #8]
    5072:	4b3d      	ldr	r3, [pc, #244]	; (5168 <SPIClass::begin()+0x260>)
    5074:	429a      	cmp	r2, r3
    5076:	d029      	beq.n	50cc <SPIClass::begin()+0x1c4>
		    _clock = settings.clock();
    5078:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    507a:	4b37      	ldr	r3, [pc, #220]	; (5158 <SPIClass::begin()+0x250>)
    507c:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    507e:	f3c3 1101 	ubfx	r1, r3, #4, #2
    5082:	f3c3 6382 	ubfx	r3, r3, #26, #3
    5086:	3301      	adds	r3, #1
    5088:	4a38      	ldr	r2, [pc, #224]	; (516c <SPIClass::begin()+0x264>)
    508a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    508e:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    5092:	4b37      	ldr	r3, [pc, #220]	; (5170 <SPIClass::begin()+0x268>)
    5094:	429a      	cmp	r2, r3
    5096:	d95d      	bls.n	5154 <SPIClass::begin()+0x24c>
			d = _clock ? clkhz/_clock : clkhz;
    5098:	4b36      	ldr	r3, [pc, #216]	; (5174 <SPIClass::begin()+0x26c>)
    509a:	fba3 1302 	umull	r1, r3, r3, r2
    509e:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    50a0:	fbb2 f2f3 	udiv	r2, r2, r3
    50a4:	4930      	ldr	r1, [pc, #192]	; (5168 <SPIClass::begin()+0x260>)
    50a6:	428a      	cmp	r2, r1
    50a8:	bf88      	it	hi
    50aa:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    50ac:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    50b0:	d34c      	bcc.n	514c <SPIClass::begin()+0x244>
    50b2:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    50b6:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    50b8:	0859      	lsrs	r1, r3, #1
    50ba:	020a      	lsls	r2, r1, #8
    50bc:	b292      	uxth	r2, r2
    50be:	0409      	lsls	r1, r1, #16
    50c0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    50c4:	430a      	orrs	r2, r1
    50c6:	b2db      	uxtb	r3, r3
    50c8:	4313      	orrs	r3, r2
    50ca:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    50cc:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    50ce:	2200      	movs	r2, #0
    50d0:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    50d2:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    50d4:	2203      	movs	r2, #3
    50d6:	625a      	str	r2, [r3, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    50d8:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    50da:	68c2      	ldr	r2, [r0, #12]
    50dc:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    50de:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    50e0:	2207      	movs	r2, #7
    50e2:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    50e4:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    50e6:	2201      	movs	r2, #1
    50e8:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    50ea:	7cc3      	ldrb	r3, [r0, #19]
    50ec:	b35b      	cbz	r3, 5146 <SPIClass::begin()+0x23e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    50ee:	f013 0f01 	tst.w	r3, #1
    50f2:	d004      	beq.n	50fe <SPIClass::begin()+0x1f6>
    50f4:	6a82      	ldr	r2, [r0, #40]	; 0x28
    50f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    50fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    50fe:	7cc3      	ldrb	r3, [r0, #19]
    5100:	f013 0f02 	tst.w	r3, #2
    5104:	d004      	beq.n	5110 <SPIClass::begin()+0x208>
    5106:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    5108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    510c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    5110:	7cc3      	ldrb	r3, [r0, #19]
    5112:	f013 0f04 	tst.w	r3, #4
    5116:	d004      	beq.n	5122 <SPIClass::begin()+0x21a>
    5118:	6b02      	ldr	r2, [r0, #48]	; 0x30
    511a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    511e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    5122:	7cc3      	ldrb	r3, [r0, #19]
    5124:	f013 0f08 	tst.w	r3, #8
    5128:	d004      	beq.n	5134 <SPIClass::begin()+0x22c>
    512a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    512c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5130:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    5134:	7cc3      	ldrb	r3, [r0, #19]
    5136:	f013 0f10 	tst.w	r3, #16
    513a:	d004      	beq.n	5146 <SPIClass::begin()+0x23e>
    513c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    513e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5142:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    5146:	f85d 4b04 	ldr.w	r4, [sp], #4
    514a:	4770      	bx	lr
			if (d > 2) {
    514c:	2b02      	cmp	r3, #2
    514e:	d8b2      	bhi.n	50b6 <SPIClass::begin()+0x1ae>
				div =0;
    5150:	2300      	movs	r3, #0
    5152:	e7b1      	b.n	50b8 <SPIClass::begin()+0x1b0>
    5154:	2300      	movs	r3, #0
    5156:	e7af      	b.n	50b8 <SPIClass::begin()+0x1b0>
    5158:	400fc000 	.word	0x400fc000
    515c:	e3ffffcf 	.word	0xe3ffffcf
    5160:	08000010 	.word	0x08000010
    5164:	20002ba4 	.word	0x20002ba4
    5168:	003d0900 	.word	0x003d0900
    516c:	200028ec 	.word	0x200028ec
    5170:	003d08ff 	.word	0x003d08ff
    5174:	431bde83 	.word	0x431bde83

00005178 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    5178:	2b00      	cmp	r3, #0
    517a:	d03b      	beq.n	51f4 <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    517c:	b470      	push	{r4, r5, r6}
    517e:	460e      	mov	r6, r1
    5180:	4611      	mov	r1, r2
    5182:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    5184:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    5186:	f240 2201 	movw	r2, #513	; 0x201
    518a:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    518c:	462c      	mov	r4, r5
    518e:	e016      	b.n	51be <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5190:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    5194:	e019      	b.n	51ca <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    5196:	3c01      	subs	r4, #1
    5198:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    519a:	695b      	ldr	r3, [r3, #20]
    519c:	f013 0f01 	tst.w	r3, #1
    51a0:	d10c      	bne.n	51bc <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    51a2:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    51a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    51a6:	f012 0f02 	tst.w	r2, #2
    51aa:	d1f5      	bne.n	5198 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    51ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    51ae:	2900      	cmp	r1, #0
    51b0:	d0f1      	beq.n	5196 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    51b2:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    51b4:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    51b8:	4611      	mov	r1, r2
    51ba:	e7ec      	b.n	5196 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    51bc:	b155      	cbz	r5, 51d4 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    51be:	2e00      	cmp	r6, #0
    51c0:	d0e6      	beq.n	5190 <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    51c2:	4633      	mov	r3, r6
    51c4:	f813 2b01 	ldrb.w	r2, [r3], #1
    51c8:	461e      	mov	r6, r3
    51ca:	6803      	ldr	r3, [r0, #0]
    51cc:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    51ce:	3d01      	subs	r5, #1
    51d0:	e7e7      	b.n	51a2 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    51d2:	3c01      	subs	r4, #1
	while (count_read) {
    51d4:	b164      	cbz	r4, 51f0 <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    51d6:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    51d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    51da:	f012 0f02 	tst.w	r2, #2
    51de:	d1f9      	bne.n	51d4 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    51e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    51e2:	2900      	cmp	r1, #0
    51e4:	d0f5      	beq.n	51d2 <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    51e6:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    51e8:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    51ec:	4611      	mov	r1, r2
    51ee:	e7f0      	b.n	51d2 <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    51f0:	bc70      	pop	{r4, r5, r6}
    51f2:	4770      	bx	lr
    51f4:	4770      	bx	lr

000051f6 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    51f6:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    51f8:	681a      	ldr	r2, [r3, #0]
    51fa:	6812      	ldr	r2, [r2, #0]
    51fc:	685b      	ldr	r3, [r3, #4]
    51fe:	421a      	tst	r2, r3
    5200:	d100      	bne.n	5204 <SPIClass::end()+0xe>
    5202:	4770      	bx	lr
void SPIClass::end() {
    5204:	b510      	push	{r4, lr}
    5206:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    5208:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    520a:	2200      	movs	r2, #0
    520c:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    520e:	6843      	ldr	r3, [r0, #4]
    5210:	7c02      	ldrb	r2, [r0, #16]
    5212:	4413      	add	r3, r2
    5214:	2105      	movs	r1, #5
    5216:	7c18      	ldrb	r0, [r3, #16]
    5218:	f008 fa58 	bl	d6cc <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    521c:	6863      	ldr	r3, [r4, #4]
    521e:	7c62      	ldrb	r2, [r4, #17]
    5220:	4413      	add	r3, r2
    5222:	2105      	movs	r1, #5
    5224:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    5228:	f008 fa50 	bl	d6cc <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    522c:	6863      	ldr	r3, [r4, #4]
    522e:	7ca2      	ldrb	r2, [r4, #18]
    5230:	4413      	add	r3, r2
    5232:	2105      	movs	r1, #5
    5234:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    5238:	f008 fa48 	bl	d6cc <pinMode>
}
    523c:	bd10      	pop	{r4, pc}
	...

00005240 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    5240:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    5242:	4a08      	ldr	r2, [pc, #32]	; (5264 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    5244:	4908      	ldr	r1, [pc, #32]	; (5268 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    5246:	4809      	ldr	r0, [pc, #36]	; (526c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    5248:	f7ff fe42 	bl	4ed0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    524c:	4a08      	ldr	r2, [pc, #32]	; (5270 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    524e:	4909      	ldr	r1, [pc, #36]	; (5274 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    5250:	4809      	ldr	r0, [pc, #36]	; (5278 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    5252:	f7ff fe3d 	bl	4ed0 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    5256:	4a09      	ldr	r2, [pc, #36]	; (527c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    5258:	4909      	ldr	r1, [pc, #36]	; (5280 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    525a:	480a      	ldr	r0, [pc, #40]	; (5284 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    525c:	f7ff fe38 	bl	4ed0 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    5260:	bd08      	pop	{r3, pc}
    5262:	bf00      	nop
    5264:	20002608 	.word	0x20002608
    5268:	403a0000 	.word	0x403a0000
    526c:	20004b00 	.word	0x20004b00
    5270:	20002598 	.word	0x20002598
    5274:	4039c000 	.word	0x4039c000
    5278:	20004b50 	.word	0x20004b50
    527c:	20002528 	.word	0x20002528
    5280:	40394000 	.word	0x40394000
    5284:	20004ba0 	.word	0x20004ba0

00005288 <PWMServo::PWMServo()>:
PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
    5288:	22ff      	movs	r2, #255	; 0xff
    528a:	7002      	strb	r2, [r0, #0]
    528c:	7042      	strb	r2, [r0, #1]
    528e:	4770      	bx	lr

00005290 <PWMServo::attach(int, int, int)>:
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    5290:	2936      	cmp	r1, #54	; 0x36
    5292:	d840      	bhi.n	5316 <PWMServo::attach(int, int, int)+0x86>
{
    5294:	b570      	push	{r4, r5, r6, lr}
    5296:	4604      	mov	r4, r0
    5298:	4616      	mov	r6, r2
    529a:	461d      	mov	r5, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
    529c:	290f      	cmp	r1, #15
    529e:	dd0b      	ble.n	52b8 <PWMServo::attach(int, int, int)+0x28>
    52a0:	2912      	cmp	r1, #18
    52a2:	d009      	beq.n	52b8 <PWMServo::attach(int, int, int)+0x28>
    52a4:	f1a1 0213 	sub.w	r2, r1, #19
    52a8:	2a0a      	cmp	r2, #10
    52aa:	d829      	bhi.n	5300 <PWMServo::attach(int, int, int)+0x70>
    52ac:	f240 6379 	movw	r3, #1657	; 0x679
    52b0:	40d3      	lsrs	r3, r2
    52b2:	f013 0f01 	tst.w	r3, #1
    52b6:	d021      	beq.n	52fc <PWMServo::attach(int, int, int)+0x6c>
	pin = pinArg;
    52b8:	b2c8      	uxtb	r0, r1
    52ba:	7020      	strb	r0, [r4, #0]
	analogWriteFrequency(pin, 50);
    52bc:	ed9f 0a18 	vldr	s0, [pc, #96]	; 5320 <PWMServo::attach(int, int, int)+0x90>
    52c0:	f008 fe7e 	bl	dfc0 <analogWriteFrequency>
	min16 = min >> 4;
    52c4:	1132      	asrs	r2, r6, #4
    52c6:	70a2      	strb	r2, [r4, #2]
	max16 = max >> 4;
    52c8:	112b      	asrs	r3, r5, #4
    52ca:	70e3      	strb	r3, [r4, #3]
	angle = NO_ANGLE;
    52cc:	23ff      	movs	r3, #255	; 0xff
    52ce:	7063      	strb	r3, [r4, #1]
	digitalWrite(pin, LOW);
    52d0:	2100      	movs	r1, #0
    52d2:	7820      	ldrb	r0, [r4, #0]
    52d4:	f008 f9c2 	bl	d65c <digitalWrite>
	pinMode(pin, OUTPUT);
    52d8:	2101      	movs	r1, #1
    52da:	7820      	ldrb	r0, [r4, #0]
    52dc:	f008 f9f6 	bl	d6cc <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
    52e0:	7823      	ldrb	r3, [r4, #0]
    52e2:	0959      	lsrs	r1, r3, #5
    52e4:	4a0f      	ldr	r2, [pc, #60]	; (5324 <PWMServo::attach(int, int, int)+0x94>)
    52e6:	f003 031f 	and.w	r3, r3, #31
    52ea:	2001      	movs	r0, #1
    52ec:	fa00 f303 	lsl.w	r3, r0, r3
    52f0:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    52f4:	4323      	orrs	r3, r4
    52f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    52fa:	bd70      	pop	{r4, r5, r6, pc}
	if (!digitalPinHasPWM(pinArg)) return 0;
    52fc:	2000      	movs	r0, #0
    52fe:	e7fc      	b.n	52fa <PWMServo::attach(int, int, int)+0x6a>
    5300:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
    5304:	2a15      	cmp	r2, #21
    5306:	d808      	bhi.n	531a <PWMServo::attach(int, int, int)+0x8a>
    5308:	4b07      	ldr	r3, [pc, #28]	; (5328 <PWMServo::attach(int, int, int)+0x98>)
    530a:	40d3      	lsrs	r3, r2
    530c:	f013 0f01 	tst.w	r3, #1
    5310:	d1d2      	bne.n	52b8 <PWMServo::attach(int, int, int)+0x28>
    5312:	2000      	movs	r0, #0
    5314:	e7f1      	b.n	52fa <PWMServo::attach(int, int, int)+0x6a>
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    5316:	2000      	movs	r0, #0
}
    5318:	4770      	bx	lr
	if (!digitalPinHasPWM(pinArg)) return 0;
    531a:	2000      	movs	r0, #0
    531c:	e7ed      	b.n	52fa <PWMServo::attach(int, int, int)+0x6a>
    531e:	bf00      	nop
    5320:	42480000 	.word	0x42480000
    5324:	20005104 	.word	0x20005104
    5328:	00247e19 	.word	0x00247e19

0000532c <PWMServo::write(int)>:
	if (pin >= NUM_DIGITAL_PINS) return;
    532c:	7803      	ldrb	r3, [r0, #0]
    532e:	2b36      	cmp	r3, #54	; 0x36
    5330:	d900      	bls.n	5334 <PWMServo::write(int)+0x8>
    5332:	4770      	bx	lr
{
    5334:	b570      	push	{r4, r5, r6, lr}
    5336:	4604      	mov	r4, r0
	if (angleArg < 0) angleArg = 0;
    5338:	29b4      	cmp	r1, #180	; 0xb4
    533a:	bfa8      	it	ge
    533c:	21b4      	movge	r1, #180	; 0xb4
    533e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	angle = angleArg;
    5342:	7041      	strb	r1, [r0, #1]
	uint32_t us = (((max16 - min16) * 46603 * angle) >> 11) + (min16 << 12); // us*256
    5344:	7883      	ldrb	r3, [r0, #2]
    5346:	78c2      	ldrb	r2, [r0, #3]
    5348:	1ad2      	subs	r2, r2, r3
    534a:	fb01 f202 	mul.w	r2, r1, r2
    534e:	f24b 610b 	movw	r1, #46603	; 0xb60b
    5352:	fb01 f202 	mul.w	r2, r1, r2
    5356:	031d      	lsls	r5, r3, #12
    5358:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	uint32_t duty = (us * 3355) >> 22;
    535c:	f640 531b 	movw	r3, #3355	; 0xd1b
    5360:	fb03 f505 	mul.w	r5, r3, r5
    5364:	0dad      	lsrs	r5, r5, #22
	noInterrupts();
    5366:	b672      	cpsid	i
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    5368:	200c      	movs	r0, #12
    536a:	f008 ff01 	bl	e170 <analogWriteRes>
    536e:	4606      	mov	r6, r0
	analogWrite(pin, duty);
    5370:	4629      	mov	r1, r5
    5372:	7820      	ldrb	r0, [r4, #0]
    5374:	f008 fdcc 	bl	df10 <analogWrite>
    5378:	4630      	mov	r0, r6
    537a:	f008 fef9 	bl	e170 <analogWriteRes>
	interrupts();
    537e:	b662      	cpsie	i
}
    5380:	bd70      	pop	{r4, r5, r6, pc}

00005382 <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    5382:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    5386:	b1e3      	cbz	r3, 53c2 <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    5388:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    538c:	b163      	cbz	r3, 53a8 <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    538e:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    5390:	3801      	subs	r0, #1
    5392:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5394:	7999      	ldrb	r1, [r3, #6]
    5396:	f44f 7300 	mov.w	r3, #512	; 0x200
    539a:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    539c:	b29b      	uxth	r3, r3
    539e:	fba3 0100 	umull	r0, r1, r3, r0
    53a2:	fb03 1102 	mla	r1, r3, r2, r1
    53a6:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    53a8:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    53ac:	b12b      	cbz	r3, 53ba <SDClass::totalSize()+0x38>
    53ae:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    53b2:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    53b4:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    53b8:	e7f1      	b.n	539e <SDClass::totalSize()+0x1c>
    53ba:	2000      	movs	r0, #0
    53bc:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    53be:	4603      	mov	r3, r0
    53c0:	e7ed      	b.n	539e <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    53c2:	2000      	movs	r0, #0
    53c4:	4601      	mov	r1, r0
	}
    53c6:	4770      	bx	lr

000053c8 <SDClass::~SDClass()>:
class SDClass : public FS
    53c8:	4770      	bx	lr
	...

000053cc <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    53cc:	b530      	push	{r4, r5, lr}
    53ce:	b083      	sub	sp, #12
    53d0:	4605      	mov	r5, r0
    53d2:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    53d4:	f008 feda 	bl	e18c <rtc_get>
	if (now < 315532800) { // before 1980
    53d8:	4b1c      	ldr	r3, [pc, #112]	; (544c <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    53da:	4298      	cmp	r0, r3
    53dc:	d804      	bhi.n	53e8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    53de:	2300      	movs	r3, #0
    53e0:	802b      	strh	r3, [r5, #0]
		*time = 0;
    53e2:	8023      	strh	r3, [r4, #0]
}
    53e4:	b003      	add	sp, #12
    53e6:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    53e8:	4669      	mov	r1, sp
    53ea:	f007 fd6d 	bl	cec8 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    53ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    53f2:	3301      	adds	r3, #1
    53f4:	b2db      	uxtb	r3, r3
    53f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    53fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    53fe:	3a50      	subs	r2, #80	; 0x50
    5400:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    5402:	291f      	cmp	r1, #31
    5404:	bf98      	it	ls
    5406:	2b0c      	cmpls	r3, #12
    5408:	d801      	bhi.n	540e <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    540a:	2a7f      	cmp	r2, #127	; 0x7f
    540c:	d910      	bls.n	5430 <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    540e:	2100      	movs	r1, #0
    5410:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    5412:	f89d 2002 	ldrb.w	r2, [sp, #2]
    5416:	f89d 3001 	ldrb.w	r3, [sp, #1]
    541a:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    541e:	2a17      	cmp	r2, #23
    5420:	bf98      	it	ls
    5422:	2b3b      	cmpls	r3, #59	; 0x3b
    5424:	d801      	bhi.n	542a <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    5426:	293b      	cmp	r1, #59	; 0x3b
    5428:	d908      	bls.n	543c <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    542a:	2300      	movs	r3, #0
    542c:	8023      	strh	r3, [r4, #0]
}
    542e:	e7d9      	b.n	53e4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    5430:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    5434:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    5438:	b289      	uxth	r1, r1
    543a:	e7e9      	b.n	5410 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    543c:	015b      	lsls	r3, r3, #5
    543e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    5442:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    5446:	b29b      	uxth	r3, r3
    5448:	e7f0      	b.n	542c <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    544a:	bf00      	nop
    544c:	12cea5ff 	.word	0x12cea5ff

00005450 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    5450:	b500      	push	{lr}
    5452:	b08f      	sub	sp, #60	; 0x3c
    5454:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    5456:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    545a:	b161      	cbz	r1, 5476 <SDClass::exists(char const*)+0x26>
    545c:	2300      	movs	r3, #0
    545e:	f88d 3000 	strb.w	r3, [sp]
    5462:	f88d 3001 	strb.w	r3, [sp, #1]
    5466:	f88d 3002 	strb.w	r3, [sp, #2]
    546a:	4668      	mov	r0, sp
    546c:	f002 ff37 	bl	82de <FatFile::open(FatVolume*, char const*, int)>
	}
    5470:	b00f      	add	sp, #60	; 0x3c
    5472:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    5476:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    547a:	b151      	cbz	r1, 5492 <SDClass::exists(char const*)+0x42>
    547c:	2300      	movs	r3, #0
    547e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    5482:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    5486:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    548a:	4668      	mov	r0, sp
    548c:	f000 ff83 	bl	6396 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5490:	e7ee      	b.n	5470 <SDClass::exists(char const*)+0x20>
    5492:	2000      	movs	r0, #0
    5494:	e7ec      	b.n	5470 <SDClass::exists(char const*)+0x20>

00005496 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    5496:	b500      	push	{lr}
    5498:	b08f      	sub	sp, #60	; 0x3c
    549a:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    549c:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    54a0:	b189      	cbz	r1, 54c6 <SDClass::rmdir(char const*)+0x30>
    54a2:	2300      	movs	r3, #0
    54a4:	f88d 3000 	strb.w	r3, [sp]
    54a8:	f88d 3001 	strb.w	r3, [sp, #1]
    54ac:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    54b0:	4668      	mov	r0, sp
    54b2:	f002 ff14 	bl	82de <FatFile::open(FatVolume*, char const*, int)>
    54b6:	b910      	cbnz	r0, 54be <SDClass::rmdir(char const*)+0x28>
	}
    54b8:	b00f      	add	sp, #60	; 0x3c
    54ba:	f85d fb04 	ldr.w	pc, [sp], #4
    54be:	4668      	mov	r0, sp
    54c0:	f002 fd52 	bl	7f68 <FatFile::rmdir()>
    54c4:	e7f8      	b.n	54b8 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    54c6:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    54ca:	b179      	cbz	r1, 54ec <SDClass::rmdir(char const*)+0x56>
    54cc:	2300      	movs	r3, #0
    54ce:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    54d2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    54d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    54da:	4668      	mov	r0, sp
    54dc:	f000 ff5b 	bl	6396 <ExFatFile::open(ExFatVolume*, char const*, int)>
    54e0:	2800      	cmp	r0, #0
    54e2:	d0e9      	beq.n	54b8 <SDClass::rmdir(char const*)+0x22>
    54e4:	4668      	mov	r0, sp
    54e6:	f001 f83d 	bl	6564 <ExFatFile::rmdir()>
    54ea:	e7e5      	b.n	54b8 <SDClass::rmdir(char const*)+0x22>
    54ec:	2000      	movs	r0, #0
    54ee:	e7e3      	b.n	54b8 <SDClass::rmdir(char const*)+0x22>

000054f0 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    54f0:	b500      	push	{lr}
    54f2:	b08f      	sub	sp, #60	; 0x3c
    54f4:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    54f6:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    54fa:	b191      	cbz	r1, 5522 <SDClass::remove(char const*)+0x32>
    54fc:	2300      	movs	r3, #0
    54fe:	f88d 3000 	strb.w	r3, [sp]
    5502:	f88d 3001 	strb.w	r3, [sp, #1]
    5506:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    550a:	2301      	movs	r3, #1
    550c:	4668      	mov	r0, sp
    550e:	f002 fee6 	bl	82de <FatFile::open(FatVolume*, char const*, int)>
    5512:	b910      	cbnz	r0, 551a <SDClass::remove(char const*)+0x2a>
	}
    5514:	b00f      	add	sp, #60	; 0x3c
    5516:	f85d fb04 	ldr.w	pc, [sp], #4
    551a:	4668      	mov	r0, sp
    551c:	f003 fec4 	bl	92a8 <FatFile::remove()>
    5520:	e7f8      	b.n	5514 <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    5522:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    5526:	b181      	cbz	r1, 554a <SDClass::remove(char const*)+0x5a>
    5528:	2300      	movs	r3, #0
    552a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    552e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    5532:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5536:	2301      	movs	r3, #1
    5538:	4668      	mov	r0, sp
    553a:	f000 ff2c 	bl	6396 <ExFatFile::open(ExFatVolume*, char const*, int)>
    553e:	2800      	cmp	r0, #0
    5540:	d0e8      	beq.n	5514 <SDClass::remove(char const*)+0x24>
    5542:	4668      	mov	r0, sp
    5544:	f000 ffb6 	bl	64b4 <ExFatFile::remove()>
    5548:	e7e4      	b.n	5514 <SDClass::remove(char const*)+0x24>
    554a:	2000      	movs	r0, #0
    554c:	e7e2      	b.n	5514 <SDClass::remove(char const*)+0x24>

0000554e <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    554e:	b530      	push	{r4, r5, lr}
    5550:	b08f      	sub	sp, #60	; 0x3c
    5552:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    5554:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    5558:	b1b4      	cbz	r4, 5588 <SDClass::rename(char const*, char const*)+0x3a>
    555a:	2300      	movs	r3, #0
    555c:	f88d 3000 	strb.w	r3, [sp]
    5560:	f88d 3001 	strb.w	r3, [sp, #1]
    5564:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    5568:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    556c:	460a      	mov	r2, r1
    556e:	4621      	mov	r1, r4
    5570:	4668      	mov	r0, sp
    5572:	f002 fe4f 	bl	8214 <FatFile::open(FatFile*, char const*, int)>
    5576:	b908      	cbnz	r0, 557c <SDClass::rename(char const*, char const*)+0x2e>
	}
    5578:	b00f      	add	sp, #60	; 0x3c
    557a:	bd30      	pop	{r4, r5, pc}
    557c:	462a      	mov	r2, r5
    557e:	4621      	mov	r1, r4
    5580:	4668      	mov	r0, sp
    5582:	f003 f80c 	bl	859e <FatFile::rename(FatFile*, char const*)>
    5586:	e7f7      	b.n	5578 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    5588:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    558c:	b1ac      	cbz	r4, 55ba <SDClass::rename(char const*, char const*)+0x6c>
    558e:	2300      	movs	r3, #0
    5590:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    5594:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    5598:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    559c:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    55a0:	460a      	mov	r2, r1
    55a2:	4621      	mov	r1, r4
    55a4:	4668      	mov	r0, sp
    55a6:	f000 fe83 	bl	62b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    55aa:	2800      	cmp	r0, #0
    55ac:	d0e4      	beq.n	5578 <SDClass::rename(char const*, char const*)+0x2a>
    55ae:	462a      	mov	r2, r5
    55b0:	4621      	mov	r1, r4
    55b2:	4668      	mov	r0, sp
    55b4:	f001 f9bb 	bl	692e <ExFatFile::rename(ExFatFile*, char const*)>
    55b8:	e7de      	b.n	5578 <SDClass::rename(char const*, char const*)+0x2a>
    55ba:	2000      	movs	r0, #0
    55bc:	e7dc      	b.n	5578 <SDClass::rename(char const*, char const*)+0x2a>

000055be <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    55be:	b500      	push	{lr}
    55c0:	b08f      	sub	sp, #60	; 0x3c
    55c2:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    55c4:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    55c8:	b179      	cbz	r1, 55ea <SDClass::mkdir(char const*)+0x2c>
    55ca:	2300      	movs	r3, #0
    55cc:	f88d 3000 	strb.w	r3, [sp]
    55d0:	f88d 3001 	strb.w	r3, [sp, #1]
    55d4:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    55d8:	2301      	movs	r3, #1
    55da:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    55de:	4668      	mov	r0, sp
    55e0:	f002 ff74 	bl	84cc <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    55e4:	b00f      	add	sp, #60	; 0x3c
    55e6:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    55ea:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    55ee:	b169      	cbz	r1, 560c <SDClass::mkdir(char const*)+0x4e>
    55f0:	2300      	movs	r3, #0
    55f2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    55f6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    55fa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    55fe:	2301      	movs	r3, #1
    5600:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5604:	4668      	mov	r0, sp
    5606:	f001 f91c 	bl	6842 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    560a:	e7eb      	b.n	55e4 <SDClass::mkdir(char const*)+0x26>
    560c:	2000      	movs	r0, #0
    560e:	e7e9      	b.n	55e4 <SDClass::mkdir(char const*)+0x26>

00005610 <SDClass::open(char const*, unsigned char)>:
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    5610:	b570      	push	{r4, r5, r6, lr}
    5612:	b094      	sub	sp, #80	; 0x50
    5614:	4605      	mov	r5, r0
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    5616:	2b01      	cmp	r3, #1
    5618:	d036      	beq.n	5688 <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    561a:	2b02      	cmp	r3, #2
    561c:	f240 2302 	movw	r3, #514	; 0x202
    5620:	bf18      	it	ne
    5622:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    5624:	3104      	adds	r1, #4
    5626:	4668      	mov	r0, sp
    5628:	f004 fe98 	bl	a35c <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    562c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    562e:	2b00      	cmp	r3, #0
    5630:	d02d      	beq.n	568e <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    5632:	205c      	movs	r0, #92	; 0x5c
    5634:	f008 f92a 	bl	d88c <operator new(unsigned int)>
    5638:	4604      	mov	r4, r0
class FileImpl {
    563a:	2600      	movs	r6, #0
    563c:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    563e:	4b1a      	ldr	r3, [pc, #104]	; (56a8 <SDClass::open(char const*, unsigned char)+0x98>)
    5640:	6003      	str	r3, [r0, #0]
class Print
    5642:	9b01      	ldr	r3, [sp, #4]
    5644:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    5646:	4b19      	ldr	r3, [pc, #100]	; (56ac <SDClass::open(char const*, unsigned char)+0x9c>)
    5648:	6083      	str	r3, [r0, #8]
    564a:	9b02      	ldr	r3, [sp, #8]
    564c:	6103      	str	r3, [r0, #16]
    564e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5652:	7503      	strb	r3, [r0, #20]
    5654:	a904      	add	r1, sp, #16
    5656:	3018      	adds	r0, #24
    5658:	f004 fd49 	bl	a0ee <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    565c:	4b14      	ldr	r3, [pc, #80]	; (56b0 <SDClass::open(char const*, unsigned char)+0xa0>)
    565e:	60a3      	str	r3, [r4, #8]
    5660:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    5662:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5668:	60ab      	str	r3, [r5, #8]
    566a:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    566c:	4b11      	ldr	r3, [pc, #68]	; (56b4 <SDClass::open(char const*, unsigned char)+0xa4>)
    566e:	602b      	str	r3, [r5, #0]
		f = file;
    5670:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    5672:	6863      	ldr	r3, [r4, #4]
    5674:	3301      	adds	r3, #1
    5676:	6063      	str	r3, [r4, #4]
    5678:	4b0f      	ldr	r3, [pc, #60]	; (56b8 <SDClass::open(char const*, unsigned char)+0xa8>)
    567a:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    567c:	a804      	add	r0, sp, #16
    567e:	f004 fd77 	bl	a170 <FsBaseFile::close()>
	}
    5682:	4628      	mov	r0, r5
    5684:	b014      	add	sp, #80	; 0x50
    5686:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    5688:	f244 2302 	movw	r3, #16898	; 0x4202
    568c:	e7ca      	b.n	5624 <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    568e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5690:	2b00      	cmp	r3, #0
    5692:	d1ce      	bne.n	5632 <SDClass::open(char const*, unsigned char)+0x22>
    5694:	606b      	str	r3, [r5, #4]
    5696:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    569a:	60aa      	str	r2, [r5, #8]
    569c:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    569e:	4a05      	ldr	r2, [pc, #20]	; (56b4 <SDClass::open(char const*, unsigned char)+0xa4>)
    56a0:	602a      	str	r2, [r5, #0]
    56a2:	612b      	str	r3, [r5, #16]
    56a4:	e7e8      	b.n	5678 <SDClass::open(char const*, unsigned char)+0x68>
    56a6:	bf00      	nop
    56a8:	200027b0 	.word	0x200027b0
    56ac:	2000280c 	.word	0x2000280c
    56b0:	2000278c 	.word	0x2000278c
    56b4:	20002760 	.word	0x20002760
    56b8:	20002680 	.word	0x20002680

000056bc <SDClass::usedSize()>:
	uint64_t usedSize() {
    56bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    56be:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    56c2:	2b00      	cmp	r3, #0
    56c4:	d04d      	beq.n	5762 <SDClass::usedSize()+0xa6>
    56c6:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    56c8:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    56cc:	b1f3      	cbz	r3, 570c <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    56ce:	69de      	ldr	r6, [r3, #28]
    56d0:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    56d2:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    56d6:	2800      	cmp	r0, #0
    56d8:	d05a      	beq.n	5790 <SDClass::usedSize()+0xd4>
    56da:	6803      	ldr	r3, [r0, #0]
    56dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    56de:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    56e0:	4607      	mov	r7, r0
    56e2:	b140      	cbz	r0, 56f6 <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    56e4:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    56e8:	2800      	cmp	r0, #0
    56ea:	d032      	beq.n	5752 <SDClass::usedSize()+0x96>
    56ec:	6803      	ldr	r3, [r0, #0]
    56ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    56f0:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    56f2:	b1b8      	cbz	r0, 5724 <SDClass::usedSize()+0x68>
    56f4:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    56f6:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    56fa:	2800      	cmp	r0, #0
    56fc:	d14b      	bne.n	5796 <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    56fe:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    5702:	b388      	cbz	r0, 5768 <SDClass::usedSize()+0xac>
    5704:	f002 f96b 	bl	79de <ExFatPartition::freeClusterCount()>
    5708:	4605      	mov	r5, r0
    570a:	e047      	b.n	579c <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    570c:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    5710:	2b00      	cmp	r3, #0
    5712:	d055      	beq.n	57c0 <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    5714:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5718:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    571c:	2800      	cmp	r0, #0
    571e:	d1dc      	bne.n	56da <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5720:	2700      	movs	r7, #0
    5722:	e7ec      	b.n	56fe <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    5724:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5728:	b1a8      	cbz	r0, 5756 <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    572a:	6803      	ldr	r3, [r0, #0]
    572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    572e:	2101      	movs	r1, #1
    5730:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5732:	4607      	mov	r7, r0
    5734:	2800      	cmp	r0, #0
    5736:	d1de      	bne.n	56f6 <SDClass::usedSize()+0x3a>
      return 0;
    5738:	2500      	movs	r5, #0
    573a:	e031      	b.n	57a0 <SDClass::usedSize()+0xe4>
    if (m_card) {
    573c:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5740:	b158      	cbz	r0, 575a <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    5742:	6803      	ldr	r3, [r0, #0]
    5744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5746:	2100      	movs	r1, #0
    5748:	4798      	blx	r3
      return 0;
    574a:	2800      	cmp	r0, #0
    574c:	bf08      	it	eq
    574e:	2500      	moveq	r5, #0
    5750:	e026      	b.n	57a0 <SDClass::usedSize()+0xe4>
      return 0;
    5752:	2500      	movs	r5, #0
    5754:	e024      	b.n	57a0 <SDClass::usedSize()+0xe4>
    5756:	2500      	movs	r5, #0
    5758:	e022      	b.n	57a0 <SDClass::usedSize()+0xe4>
      return 0;
    575a:	2500      	movs	r5, #0
    575c:	e020      	b.n	57a0 <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    575e:	2300      	movs	r3, #0
    5760:	e029      	b.n	57b6 <SDClass::usedSize()+0xfa>
    5762:	2000      	movs	r0, #0
    5764:	4601      	mov	r1, r0
    5766:	e02a      	b.n	57be <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    5768:	b967      	cbnz	r7, 5784 <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    576a:	2300      	movs	r3, #0
    576c:	4630      	mov	r0, r6
    576e:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    5770:	e021      	b.n	57b6 <SDClass::usedSize()+0xfa>
    5772:	4630      	mov	r0, r6
    5774:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5776:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    577a:	2b00      	cmp	r3, #0
    577c:	d0ef      	beq.n	575e <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    577e:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    5782:	e018      	b.n	57b6 <SDClass::usedSize()+0xfa>
    if (m_card) {
    5784:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5788:	2800      	cmp	r0, #0
    578a:	d0f2      	beq.n	5772 <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    578c:	2500      	movs	r5, #0
    578e:	e7d8      	b.n	5742 <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    5790:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5794:	2700      	movs	r7, #0
    5796:	f004 fb9b 	bl	9ed0 <FatPartition::freeClusterCount()>
    579a:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    579c:	2f00      	cmp	r7, #0
    579e:	d1cd      	bne.n	573c <SDClass::usedSize()+0x80>
    57a0:	1b70      	subs	r0, r6, r5
    57a2:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    57a4:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    57a8:	2b00      	cmp	r3, #0
    57aa:	d0e4      	beq.n	5776 <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    57ac:	7999      	ldrb	r1, [r3, #6]
    57ae:	f44f 7300 	mov.w	r3, #512	; 0x200
    57b2:	408b      	lsls	r3, r1
    57b4:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    57b6:	fba3 0100 	umull	r0, r1, r3, r0
    57ba:	fb03 1102 	mla	r1, r3, r2, r1
	}
    57be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    57c0:	2600      	movs	r6, #0
    57c2:	e7a9      	b.n	5718 <SDClass::usedSize()+0x5c>

000057c4 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    57c4:	b530      	push	{r4, r5, lr}
    57c6:	b085      	sub	sp, #20
    57c8:	4604      	mov	r4, r0
    57ca:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    57cc:	4832      	ldr	r0, [pc, #200]	; (5898 <SDClass::begin(unsigned char)+0xd4>)
    57ce:	f006 fc49 	bl	c064 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    57d2:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    57d6:	2dfe      	cmp	r5, #254	; 0xfe
    57d8:	d004      	beq.n	57e4 <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    57da:	2d36      	cmp	r5, #54	; 0x36
    57dc:	d930      	bls.n	5840 <SDClass::begin(unsigned char)+0x7c>
	return false;
    57de:	2000      	movs	r0, #0
}
    57e0:	b005      	add	sp, #20
    57e2:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    57e4:	23ff      	movs	r3, #255	; 0xff
    57e6:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    57ea:	2100      	movs	r1, #0
    57ec:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    57f0:	f204 4594 	addw	r5, r4, #1172	; 0x494
    57f4:	4628      	mov	r0, r5
    57f6:	f005 ff9d 	bl	b734 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    57fa:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    57fe:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    5802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5804:	4628      	mov	r0, r5
    5806:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5808:	b158      	cbz	r0, 5822 <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    580a:	2300      	movs	r3, #0
    580c:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    5810:	232e      	movs	r3, #46	; 0x2e
    5812:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5816:	2103      	movs	r1, #3
    5818:	202e      	movs	r0, #46	; 0x2e
    581a:	f007 ff57 	bl	d6cc <pinMode>
		return ret;
    581e:	2000      	movs	r0, #0
    5820:	e7de      	b.n	57e0 <SDClass::begin(unsigned char)+0x1c>
    5822:	2301      	movs	r3, #1
    5824:	461a      	mov	r2, r3
    5826:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    582a:	1d20      	adds	r0, r4, #4
    582c:	f004 fd20 	bl	a270 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    5830:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    5834:	232e      	movs	r3, #46	; 0x2e
    5836:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    583a:	2800      	cmp	r0, #0
    583c:	d1d0      	bne.n	57e0 <SDClass::begin(unsigned char)+0x1c>
    583e:	e7ea      	b.n	5816 <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    5840:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    5844:	2300      	movs	r3, #0
    5846:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    584a:	4a14      	ldr	r2, [pc, #80]	; (589c <SDClass::begin(unsigned char)+0xd8>)
    584c:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    5850:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    5854:	f88d 5004 	strb.w	r5, [sp, #4]
    5858:	f88d 3005 	strb.w	r3, [sp, #5]
    585c:	9202      	str	r2, [sp, #8]
    585e:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    5860:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    5864:	ab04      	add	r3, sp, #16
    5866:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    586a:	4628      	mov	r0, r5
    586c:	f005 f9d4 	bl	ac18 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    5870:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    5874:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    5878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    587a:	4628      	mov	r0, r5
    587c:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    587e:	b118      	cbz	r0, 5888 <SDClass::begin(unsigned char)+0xc4>
    5880:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    5882:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    5886:	e7ab      	b.n	57e0 <SDClass::begin(unsigned char)+0x1c>
    5888:	2301      	movs	r3, #1
    588a:	461a      	mov	r2, r3
    588c:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    5890:	1d20      	adds	r0, r4, #4
    5892:	f004 fced 	bl	a270 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5896:	e7f4      	b.n	5882 <SDClass::begin(unsigned char)+0xbe>
    5898:	000053cd 	.word	0x000053cd
    589c:	017d7840 	.word	0x017d7840

000058a0 <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    58a0:	b530      	push	{r4, r5, lr}
    58a2:	b085      	sub	sp, #20
    58a4:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    58a6:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    58aa:	2bff      	cmp	r3, #255	; 0xff
    58ac:	d01e      	beq.n	58ec <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    58ae:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    58b2:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    58b6:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    58ba:	f88d 3004 	strb.w	r3, [sp, #4]
    58be:	f88d 0005 	strb.w	r0, [sp, #5]
    58c2:	9102      	str	r1, [sp, #8]
    58c4:	9203      	str	r2, [sp, #12]
    58c6:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    58ca:	ab04      	add	r3, sp, #16
    58cc:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    58d0:	4628      	mov	r0, r5
    58d2:	f005 f9a1 	bl	ac18 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    58d6:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    58da:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    58de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    58e0:	4628      	mov	r0, r5
    58e2:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    58e4:	b1d8      	cbz	r0, 591e <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    58e6:	2000      	movs	r0, #0
  }
    58e8:	b005      	add	sp, #20
    58ea:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    58ec:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    58f0:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    58f4:	4628      	mov	r0, r5
    58f6:	f005 ff1d 	bl	b734 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    58fa:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    58fe:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    5902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5904:	4628      	mov	r0, r5
    5906:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5908:	b108      	cbz	r0, 590e <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    590a:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    590c:	e7ec      	b.n	58e8 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    590e:	2301      	movs	r3, #1
    5910:	461a      	mov	r2, r3
    5912:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    5916:	4620      	mov	r0, r4
    5918:	f004 fcaa 	bl	a270 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    591c:	e7e4      	b.n	58e8 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    591e:	2301      	movs	r3, #1
    5920:	461a      	mov	r2, r3
    5922:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    5926:	4620      	mov	r0, r4
    5928:	f004 fca2 	bl	a270 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    592c:	e7dc      	b.n	58e8 <SdBase<FsVolume, FsFormatter>::restart()+0x48>

0000592e <SDClass::format(int, char, Print&)>:
{
    592e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5932:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    5934:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    5938:	b39c      	cbz	r4, 59a2 <SDClass::format(int, char, Print&)+0x74>
    593a:	4605      	mov	r5, r0
    593c:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    593e:	6823      	ldr	r3, [r4, #0]
    5940:	69db      	ldr	r3, [r3, #28]
    5942:	4620      	mov	r0, r4
    5944:	4798      	blx	r3
    5946:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    5948:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    594c:	d804      	bhi.n	5958 <SDClass::format(int, char, Print&)+0x2a>
    594e:	2600      	movs	r6, #0
}
    5950:	4630      	mov	r0, r6
    5952:	b00c      	add	sp, #48	; 0x30
    5954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    5958:	f44f 7000 	mov.w	r0, #512	; 0x200
    595c:	f00b fc3a 	bl	111d4 <malloc>
	if (!buf) return false; // unable to allocate memory
    5960:	4680      	mov	r8, r0
    5962:	b300      	cbz	r0, 59a6 <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    5964:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    5968:	d913      	bls.n	5992 <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    596a:	463b      	mov	r3, r7
    596c:	4602      	mov	r2, r0
    596e:	4621      	mov	r1, r4
    5970:	a801      	add	r0, sp, #4
    5972:	f001 fb23 	bl	6fbc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    5976:	4606      	mov	r6, r0
	free(buf);
    5978:	4640      	mov	r0, r8
    597a:	f00b fc33 	bl	111e4 <free>
	if (ret) {
    597e:	2e00      	cmp	r6, #0
    5980:	d0e6      	beq.n	5950 <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    5982:	6823      	ldr	r3, [r4, #0]
    5984:	6a1b      	ldr	r3, [r3, #32]
    5986:	4620      	mov	r0, r4
    5988:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    598a:	1d28      	adds	r0, r5, #4
    598c:	f7ff ff88 	bl	58a0 <SdBase<FsVolume, FsFormatter>::restart()>
    5990:	e7de      	b.n	5950 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    5992:	463b      	mov	r3, r7
    5994:	4602      	mov	r2, r0
    5996:	4621      	mov	r1, r4
    5998:	a801      	add	r0, sp, #4
    599a:	f003 ff7f 	bl	989c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    599e:	4606      	mov	r6, r0
    59a0:	e7ea      	b.n	5978 <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    59a2:	2600      	movs	r6, #0
    59a4:	e7d4      	b.n	5950 <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    59a6:	2600      	movs	r6, #0
    59a8:	e7d2      	b.n	5950 <SDClass::format(int, char, Print&)+0x22>
	...

000059ac <SDClass::mediaPresent()>:
{
    59ac:	b570      	push	{r4, r5, r6, lr}
    59ae:	b084      	sub	sp, #16
    59b0:	4604      	mov	r4, r0
    59b2:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    59b6:	2e00      	cmp	r6, #0
    59b8:	d042      	beq.n	5a40 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    59ba:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    59be:	b345      	cbz	r5, 5a12 <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    59c0:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    59c4:	2bfe      	cmp	r3, #254	; 0xfe
    59c6:	d00a      	beq.n	59de <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    59c8:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    59cc:	2836      	cmp	r0, #54	; 0x36
    59ce:	d914      	bls.n	59fa <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    59d0:	6833      	ldr	r3, [r6, #0]
    59d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    59d4:	4669      	mov	r1, sp
    59d6:	4630      	mov	r0, r6
    59d8:	4798      	blx	r3
    59da:	4605      	mov	r5, r0
    59dc:	e031      	b.n	5a42 <SDClass::mediaPresent()+0x96>
				s = card->status();
    59de:	6833      	ldr	r3, [r6, #0]
    59e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    59e2:	4630      	mov	r0, r6
    59e4:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    59e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    59ea:	d0ed      	beq.n	59c8 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    59ec:	bb48      	cbnz	r0, 5a42 <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    59ee:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    59f2:	2bfe      	cmp	r3, #254	; 0xfe
    59f4:	d007      	beq.n	5a06 <SDClass::mediaPresent()+0x5a>
				ret = false;
    59f6:	2500      	movs	r5, #0
    59f8:	e023      	b.n	5a42 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    59fa:	f007 fe55 	bl	d6a8 <digitalRead>
    59fe:	1e05      	subs	r5, r0, #0
    5a00:	bf18      	it	ne
    5a02:	2501      	movne	r5, #1
    5a04:	e01d      	b.n	5a42 <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5a06:	2103      	movs	r1, #3
    5a08:	202e      	movs	r0, #46	; 0x2e
    5a0a:	f007 fe5f 	bl	d6cc <pinMode>
				ret = false;
    5a0e:	2500      	movs	r5, #0
    5a10:	e017      	b.n	5a42 <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    5a12:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    5a16:	2bfe      	cmp	r3, #254	; 0xfe
    5a18:	d008      	beq.n	5a2c <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5a1a:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    5a1e:	2836      	cmp	r0, #54	; 0x36
    5a20:	d90a      	bls.n	5a38 <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    5a22:	1d20      	adds	r0, r4, #4
    5a24:	f7ff ff3c 	bl	58a0 <SdBase<FsVolume, FsFormatter>::restart()>
    5a28:	4605      	mov	r5, r0
    5a2a:	e00a      	b.n	5a42 <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    5a2c:	4b07      	ldr	r3, [pc, #28]	; (5a4c <SDClass::mediaPresent()+0xa0>)
    5a2e:	689b      	ldr	r3, [r3, #8]
			if (ret)
    5a30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5a34:	d1f5      	bne.n	5a22 <SDClass::mediaPresent()+0x76>
    5a36:	e004      	b.n	5a42 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5a38:	f007 fe36 	bl	d6a8 <digitalRead>
			if (ret)
    5a3c:	b108      	cbz	r0, 5a42 <SDClass::mediaPresent()+0x96>
    5a3e:	e7f0      	b.n	5a22 <SDClass::mediaPresent()+0x76>
		ret = false;
    5a40:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    5a42:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    5a46:	4628      	mov	r0, r5
    5a48:	b004      	add	sp, #16
    5a4a:	bd70      	pop	{r4, r5, r6, pc}
    5a4c:	42008000 	.word	0x42008000

00005a50 <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    5a50:	b508      	push	{r3, lr}
	SDClass() { }
    5a52:	4817      	ldr	r0, [pc, #92]	; (5ab0 <_GLOBAL__sub_I_SD+0x60>)
    5a54:	4b17      	ldr	r3, [pc, #92]	; (5ab4 <_GLOBAL__sub_I_SD+0x64>)
    5a56:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    5a58:	2300      	movs	r3, #0
    5a5a:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    5a5e:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    5a62:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5a66:	4a14      	ldr	r2, [pc, #80]	; (5ab8 <_GLOBAL__sub_I_SD+0x68>)
    5a68:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    5a6c:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    5a70:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    5a74:	4a11      	ldr	r2, [pc, #68]	; (5abc <_GLOBAL__sub_I_SD+0x6c>)
    5a76:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5a7a:	2207      	movs	r2, #7
    5a7c:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    5a80:	2229      	movs	r2, #41	; 0x29
    5a82:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    5a86:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    5a8a:	4a0d      	ldr	r2, [pc, #52]	; (5ac0 <_GLOBAL__sub_I_SD+0x70>)
    5a8c:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    5a90:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    5a94:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    5a98:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    5a9c:	23ff      	movs	r3, #255	; 0xff
    5a9e:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    5aa2:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    5aa6:	4a07      	ldr	r2, [pc, #28]	; (5ac4 <_GLOBAL__sub_I_SD+0x74>)
    5aa8:	4907      	ldr	r1, [pc, #28]	; (5ac8 <_GLOBAL__sub_I_SD+0x78>)
    5aaa:	f00b faab 	bl	11004 <__aeabi_atexit>
}
    5aae:	bd08      	pop	{r3, pc}
    5ab0:	2000462c 	.word	0x2000462c
    5ab4:	20002830 	.word	0x20002830
    5ab8:	20002884 	.word	0x20002884
    5abc:	003d0900 	.word	0x003d0900
    5ac0:	200026c8 	.word	0x200026c8
    5ac4:	200036b0 	.word	0x200036b0
    5ac8:	000053c9 	.word	0x000053c9

00005acc <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5acc:	b530      	push	{r4, r5, lr}
    5ace:	b085      	sub	sp, #20
    5ad0:	4604      	mov	r4, r0
    5ad2:	468c      	mov	ip, r1
    5ad4:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    5ad6:	ab01      	add	r3, sp, #4
    5ad8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5adc:	c907      	ldmia	r1, {r0, r1, r2}
    5ade:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5ae2:	ea4f 124c 	mov.w	r2, ip, lsl #5
    5ae6:	4619      	mov	r1, r3
    5ae8:	6a20      	ldr	r0, [r4, #32]
    5aea:	f001 fef5 	bl	78d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5aee:	2801      	cmp	r0, #1
    5af0:	d106      	bne.n	5b00 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5af2:	462a      	mov	r2, r5
    5af4:	a901      	add	r1, sp, #4
    5af6:	6a20      	ldr	r0, [r4, #32]
    5af8:	f001 fe99 	bl	782e <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5afc:	b005      	add	sp, #20
    5afe:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    5b00:	2000      	movs	r0, #0
    5b02:	e7fb      	b.n	5afc <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005b04 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5b04:	b510      	push	{r4, lr}
    5b06:	4604      	mov	r4, r0
  bool rtn = sync();
    5b08:	f000 fde8 	bl	66dc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5b0c:	2300      	movs	r3, #0
    5b0e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5b12:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5b16:	bd10      	pop	{r4, pc}

00005b18 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5b18:	b538      	push	{r3, r4, r5, lr}
    5b1a:	460d      	mov	r5, r1
    5b1c:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5b1e:	2200      	movs	r2, #0
    5b20:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5b24:	6a00      	ldr	r0, [r0, #32]
    5b26:	f001 fe82 	bl	782e <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5b2a:	b128      	cbz	r0, 5b38 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5b2c:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5b2e:	802a      	strh	r2, [r5, #0]
    5b30:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    5b32:	8023      	strh	r3, [r4, #0]
  return true;
    5b34:	2001      	movs	r0, #1

 fail:
  return false;
}
    5b36:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5b38:	2000      	movs	r0, #0
    5b3a:	e7fc      	b.n	5b36 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

00005b3c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5b3c:	b538      	push	{r3, r4, r5, lr}
    5b3e:	460d      	mov	r5, r1
    5b40:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5b42:	2200      	movs	r2, #0
    5b44:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5b48:	6a00      	ldr	r0, [r0, #32]
    5b4a:	f001 fe70 	bl	782e <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5b4e:	b128      	cbz	r0, 5b5c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    5b50:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    5b52:	802a      	strh	r2, [r5, #0]
    5b54:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    5b56:	8023      	strh	r3, [r4, #0]
  return true;
    5b58:	2001      	movs	r0, #1

 fail:
  return false;
}
    5b5a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5b5c:	2000      	movs	r0, #0
    5b5e:	e7fc      	b.n	5b5a <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

00005b60 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5b60:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    5b62:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5b66:	b10b      	cbz	r3, 5b6c <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5b68:	2000      	movs	r0, #0
}
    5b6a:	bd38      	pop	{r3, r4, r5, pc}
    5b6c:	4604      	mov	r4, r0
    5b6e:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    5b70:	2238      	movs	r2, #56	; 0x38
    5b72:	2100      	movs	r1, #0
    5b74:	f00b feba 	bl	118ec <memset>
  m_attributes = FILE_ATTR_ROOT;
    5b78:	2340      	movs	r3, #64	; 0x40
    5b7a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    5b7e:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    5b80:	2001      	movs	r0, #1
    5b82:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    5b86:	e7f0      	b.n	5b6a <ExFatFile::openRoot(ExFatVolume*)+0xa>

00005b88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5b88:	b570      	push	{r4, r5, r6, lr}
    5b8a:	460d      	mov	r5, r1
    5b8c:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    5b8e:	782a      	ldrb	r2, [r5, #0]
    5b90:	2a20      	cmp	r2, #32
    5b92:	d103      	bne.n	5b9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    5b94:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    5b98:	2c20      	cmp	r4, #32
    5b9a:	d0fb      	beq.n	5b94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    5b9c:	600d      	str	r5, [r1, #0]
  fname->end = path;
    5b9e:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    5ba0:	782c      	ldrb	r4, [r5, #0]
    5ba2:	b384      	cbz	r4, 5c06 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5ba4:	2c2f      	cmp	r4, #47	; 0x2f
    5ba6:	d02e      	beq.n	5c06 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5ba8:	f105 0e01 	add.w	lr, r5, #1
    5bac:	4e1f      	ldr	r6, [pc, #124]	; (5c2c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    5bae:	e017      	b.n	5be0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    5bb0:	2c1f      	cmp	r4, #31
    5bb2:	d823      	bhi.n	5bfc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    5bb4:	2000      	movs	r0, #0
    5bb6:	e00b      	b.n	5bd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5bb8:	2c5c      	cmp	r4, #92	; 0x5c
    5bba:	d035      	beq.n	5c28 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    5bbc:	d903      	bls.n	5bc6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    5bbe:	2c7c      	cmp	r4, #124	; 0x7c
    5bc0:	d107      	bne.n	5bd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    5bc2:	2000      	movs	r0, #0
    5bc4:	e004      	b.n	5bd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5bc6:	3c3e      	subs	r4, #62	; 0x3e
    5bc8:	b2e4      	uxtb	r4, r4
    5bca:	2c01      	cmp	r4, #1
    5bcc:	d801      	bhi.n	5bd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    5bce:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    5bd0:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    5bd2:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    5bd4:	782c      	ldrb	r4, [r5, #0]
    5bd6:	f10e 0e01 	add.w	lr, lr, #1
    5bda:	b1a4      	cbz	r4, 5c06 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5bdc:	2c2f      	cmp	r4, #47	; 0x2f
    5bde:	d012      	beq.n	5c06 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    5be0:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    5be2:	2c3c      	cmp	r4, #60	; 0x3c
    5be4:	d8e8      	bhi.n	5bb8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    5be6:	2c21      	cmp	r4, #33	; 0x21
    5be8:	d9e2      	bls.n	5bb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    5bea:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    5bee:	fa5f fc8c 	uxtb.w	ip, ip
    5bf2:	fa26 fc0c 	lsr.w	ip, r6, ip
    5bf6:	f01c 0f01 	tst.w	ip, #1
    5bfa:	d113      	bne.n	5c24 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    5bfc:	2c2e      	cmp	r4, #46	; 0x2e
    5bfe:	d0e9      	beq.n	5bd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5c00:	2c20      	cmp	r4, #32
    5c02:	d0e7      	beq.n	5bd4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5c04:	e7e5      	b.n	5bd2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5c06:	782a      	ldrb	r2, [r5, #0]
    5c08:	2a2f      	cmp	r2, #47	; 0x2f
    5c0a:	d001      	beq.n	5c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    5c0c:	2a20      	cmp	r2, #32
    5c0e:	d105      	bne.n	5c1c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    5c10:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    5c14:	2c20      	cmp	r4, #32
    5c16:	d0fb      	beq.n	5c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    5c18:	2c2f      	cmp	r4, #47	; 0x2f
    5c1a:	d0f9      	beq.n	5c10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    5c1c:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    5c1e:	f001 fd13 	bl	7648 <ExFatFile::hashName(ExName_t*)>
    5c22:	e7d5      	b.n	5bd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    5c24:	2000      	movs	r0, #0
    5c26:	e7d3      	b.n	5bd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5c28:	2000      	movs	r0, #0
    5c2a:	e7d1      	b.n	5bd0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5c2c:	05002101 	.word	0x05002101

00005c30 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c34:	b083      	sub	sp, #12
    5c36:	4604      	mov	r4, r0
    5c38:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5c3a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5c3e:	f013 0f01 	tst.w	r3, #1
    5c42:	f000 80b3 	beq.w	5dac <ExFatFile::read(void*, unsigned int)+0x17c>
    5c46:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5c48:	f013 0f40 	tst.w	r3, #64	; 0x40
    5c4c:	d104      	bne.n	5c58 <ExFatFile::read(void*, unsigned int)+0x28>
    5c4e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5c52:	f013 0f08 	tst.w	r3, #8
    5c56:	d00d      	beq.n	5c74 <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    5c58:	6822      	ldr	r2, [r4, #0]
    5c5a:	6863      	ldr	r3, [r4, #4]
    5c5c:	6921      	ldr	r1, [r4, #16]
    5c5e:	6960      	ldr	r0, [r4, #20]
    5c60:	9d00      	ldr	r5, [sp, #0]
    5c62:	18ad      	adds	r5, r5, r2
    5c64:	f143 0300 	adc.w	r3, r3, #0
    5c68:	42a9      	cmp	r1, r5
    5c6a:	eb70 0303 	sbcs.w	r3, r0, r3
    5c6e:	d201      	bcs.n	5c74 <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    5c70:	1a8b      	subs	r3, r1, r2
    5c72:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    5c74:	9b00      	ldr	r3, [sp, #0]
    5c76:	2b00      	cmp	r3, #0
    5c78:	f000 80a3 	beq.w	5dc2 <ExFatFile::read(void*, unsigned int)+0x192>
    5c7c:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5c7e:	f104 0318 	add.w	r3, r4, #24
    5c82:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5c84:	f240 1bff 	movw	fp, #511	; 0x1ff
    5c88:	e036      	b.n	5cf8 <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    5c8a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5c8e:	f013 0f40 	tst.w	r3, #64	; 0x40
    5c92:	d003      	beq.n	5c9c <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    5c94:	69a3      	ldr	r3, [r4, #24]
    5c96:	3301      	adds	r3, #1
    5c98:	61a3      	str	r3, [r4, #24]
    5c9a:	e041      	b.n	5d20 <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5c9c:	9a01      	ldr	r2, [sp, #4]
    5c9e:	69a1      	ldr	r1, [r4, #24]
    5ca0:	f001 fde2 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5ca4:	2800      	cmp	r0, #0
    5ca6:	f2c0 8081 	blt.w	5dac <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    5caa:	2800      	cmp	r0, #0
    5cac:	d138      	bne.n	5d20 <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    5cae:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5cb2:	f013 0f50 	tst.w	r3, #80	; 0x50
    5cb6:	d079      	beq.n	5dac <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    5cb8:	9b00      	ldr	r3, [sp, #0]
    5cba:	1bd8      	subs	r0, r3, r7
    5cbc:	e07e      	b.n	5dbc <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    5cbe:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    5cc2:	42be      	cmp	r6, r7
    5cc4:	bf28      	it	cs
    5cc6:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    5cc8:	2200      	movs	r2, #0
    5cca:	4629      	mov	r1, r5
    5ccc:	f508 7004 	add.w	r0, r8, #528	; 0x210
    5cd0:	f006 f995 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5cd4:	4601      	mov	r1, r0
    5cd6:	2800      	cmp	r0, #0
    5cd8:	d068      	beq.n	5dac <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    5cda:	4632      	mov	r2, r6
    5cdc:	4449      	add	r1, r9
    5cde:	4650      	mov	r0, sl
    5ce0:	f007 fd3a 	bl	d758 <memcpy>
    dst += n;
    5ce4:	44b2      	add	sl, r6
    m_curPosition += n;
    5ce6:	6823      	ldr	r3, [r4, #0]
    5ce8:	6862      	ldr	r2, [r4, #4]
    5cea:	199b      	adds	r3, r3, r6
    5cec:	f142 0200 	adc.w	r2, r2, #0
    5cf0:	6023      	str	r3, [r4, #0]
    5cf2:	6062      	str	r2, [r4, #4]
  while (toRead) {
    5cf4:	1bbf      	subs	r7, r7, r6
    5cf6:	d0df      	beq.n	5cb8 <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5cf8:	6823      	ldr	r3, [r4, #0]
    5cfa:	6862      	ldr	r2, [r4, #4]
    5cfc:	6a20      	ldr	r0, [r4, #32]
    5cfe:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    5d02:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5d04:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    5d08:	b956      	cbnz	r6, 5d20 <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    5d0a:	4313      	orrs	r3, r2
    5d0c:	d1bd      	bne.n	5c8a <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5d0e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5d12:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5d16:	bf14      	ite	ne
    5d18:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    5d1c:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    5d1e:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5d20:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5d24:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5d28:	0a72      	lsrs	r2, r6, #9
    5d2a:	69a5      	ldr	r5, [r4, #24]
    5d2c:	3d02      	subs	r5, #2
    5d2e:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    5d30:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    5d34:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    5d38:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5d3a:	f1b9 0f00 	cmp.w	r9, #0
    5d3e:	d1be      	bne.n	5cbe <ExFatFile::read(void*, unsigned int)+0x8e>
    5d40:	455f      	cmp	r7, fp
    5d42:	d9bc      	bls.n	5cbe <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5d44:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5d48:	428d      	cmp	r5, r1
    5d4a:	d0b8      	beq.n	5cbe <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5d4c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    5d50:	d20a      	bcs.n	5d68 <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    5d52:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5d56:	6803      	ldr	r3, [r0, #0]
    5d58:	691b      	ldr	r3, [r3, #16]
    5d5a:	4652      	mov	r2, sl
    5d5c:	4629      	mov	r1, r5
    5d5e:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5d60:	b320      	cbz	r0, 5dac <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    5d62:	f44f 7600 	mov.w	r6, #512	; 0x200
    5d66:	e7bd      	b.n	5ce4 <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5d68:	f04f 0901 	mov.w	r9, #1
    5d6c:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5d70:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5d74:	0a7b      	lsrs	r3, r7, #9
    5d76:	4599      	cmp	r9, r3
    5d78:	bf28      	it	cs
    5d7a:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    5d7c:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    5d80:	428d      	cmp	r5, r1
    5d82:	d808      	bhi.n	5d96 <ExFatFile::read(void*, unsigned int)+0x166>
    5d84:	eb05 0309 	add.w	r3, r5, r9
    5d88:	4299      	cmp	r1, r3
    5d8a:	d204      	bcs.n	5d96 <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    5d8c:	f508 7004 	add.w	r0, r8, #528	; 0x210
    5d90:	f006 f90e 	bl	bfb0 <FsCache::sync()>
    5d94:	b150      	cbz	r0, 5dac <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    5d96:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5d9a:	6803      	ldr	r3, [r0, #0]
    5d9c:	f8d3 8014 	ldr.w	r8, [r3, #20]
    5da0:	464b      	mov	r3, r9
    5da2:	4652      	mov	r2, sl
    5da4:	4629      	mov	r1, r5
    5da6:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5da8:	2800      	cmp	r0, #0
    5daa:	d19b      	bne.n	5ce4 <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    5dac:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5db0:	f043 0302 	orr.w	r3, r3, #2
    5db4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5dbc:	b003      	add	sp, #12
    5dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    5dc2:	461f      	mov	r7, r3
    5dc4:	e778      	b.n	5cb8 <ExFatFile::read(void*, unsigned int)+0x88>

00005dc6 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5dc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dc8:	b083      	sub	sp, #12
    5dca:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    5dcc:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    5dd0:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    5dd2:	2201      	movs	r2, #1
    5dd4:	f10d 0107 	add.w	r1, sp, #7
    5dd8:	f7ff ff2a 	bl	5c30 <ExFatFile::read(void*, unsigned int)>
    5ddc:	2801      	cmp	r0, #1
    5dde:	bf0c      	ite	eq
    5de0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5de4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    5de8:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    5dec:	61a5      	str	r5, [r4, #24]
}
    5dee:	b003      	add	sp, #12
    5df0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005df2 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5df2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5df6:	4604      	mov	r4, r0
    5df8:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5dfa:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    5dfe:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    5e02:	2a00      	cmp	r2, #0
    5e04:	d054      	beq.n	5eb0 <ExFatFile::seekSet(unsigned long long)+0xbe>
    5e06:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5e08:	6801      	ldr	r1, [r0, #0]
    5e0a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5e0e:	459c      	cmp	ip, r3
    5e10:	bf08      	it	eq
    5e12:	42b1      	cmpeq	r1, r6
    5e14:	d05d      	beq.n	5ed2 <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    5e16:	ea56 0307 	orrs.w	r3, r6, r7
    5e1a:	d04e      	beq.n	5eba <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5e1c:	f012 0f08 	tst.w	r2, #8
    5e20:	d004      	beq.n	5e2c <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    5e22:	6900      	ldr	r0, [r0, #16]
    5e24:	6963      	ldr	r3, [r4, #20]
    5e26:	42b0      	cmp	r0, r6
    5e28:	41bb      	sbcs	r3, r7
    5e2a:	d341      	bcc.n	5eb0 <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5e2c:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5e30:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    5e34:	3309      	adds	r3, #9
    5e36:	b2db      	uxtb	r3, r3
    5e38:	1e75      	subs	r5, r6, #1
    5e3a:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    5e3e:	f1c3 0920 	rsb	r9, r3, #32
    5e42:	f1a3 0020 	sub.w	r0, r3, #32
    5e46:	40dd      	lsrs	r5, r3
    5e48:	fa0a f909 	lsl.w	r9, sl, r9
    5e4c:	ea45 0509 	orr.w	r5, r5, r9
    5e50:	fa2a f000 	lsr.w	r0, sl, r0
    5e54:	4305      	orrs	r5, r0
  if (isContiguous()) {
    5e56:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
    5e5e:	d132      	bne.n	5ec6 <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5e60:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    5e64:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    5e68:	f1c3 0920 	rsb	r9, r3, #32
    5e6c:	f1a3 0020 	sub.w	r0, r3, #32
    5e70:	fa2b f303 	lsr.w	r3, fp, r3
    5e74:	fa0a f909 	lsl.w	r9, sl, r9
    5e78:	ea43 0309 	orr.w	r3, r3, r9
    5e7c:	fa2a f000 	lsr.w	r0, sl, r0
    5e80:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    5e82:	ea51 0c0c 	orrs.w	ip, r1, ip
    5e86:	d001      	beq.n	5e8c <ExFatFile::seekSet(unsigned long long)+0x9a>
    5e88:	429d      	cmp	r5, r3
    5e8a:	d220      	bcs.n	5ece <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5e8c:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5e90:	bf14      	ite	ne
    5e92:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    5e96:	69e3      	ldreq	r3, [r4, #28]
    5e98:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5e9a:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    5e9e:	b175      	cbz	r5, 5ebe <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5ea0:	464a      	mov	r2, r9
    5ea2:	69a1      	ldr	r1, [r4, #24]
    5ea4:	6a20      	ldr	r0, [r4, #32]
    5ea6:	f001 fcdf 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5eaa:	3d01      	subs	r5, #1
    5eac:	2800      	cmp	r0, #0
    5eae:	dcf6      	bgt.n	5e9e <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    5eb0:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    5eb4:	2000      	movs	r0, #0
}
    5eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    5eba:	2300      	movs	r3, #0
    5ebc:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    5ebe:	6026      	str	r6, [r4, #0]
    5ec0:	6067      	str	r7, [r4, #4]
  return true;
    5ec2:	2001      	movs	r0, #1
    5ec4:	e7f7      	b.n	5eb6 <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    5ec6:	69e3      	ldr	r3, [r4, #28]
    5ec8:	442b      	add	r3, r5
    5eca:	61a3      	str	r3, [r4, #24]
    goto done;
    5ecc:	e7f7      	b.n	5ebe <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    5ece:	1aed      	subs	r5, r5, r3
    5ed0:	e7e3      	b.n	5e9a <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    5ed2:	2001      	movs	r0, #1
    5ed4:	e7ef      	b.n	5eb6 <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

00005ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5edc:	b08f      	sub	sp, #60	; 0x3c
    5ede:	4607      	mov	r7, r0
    5ee0:	9302      	str	r3, [sp, #8]
    5ee2:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    5ee6:	f1bb 0f00 	cmp.w	fp, #0
    5eea:	d10e      	bne.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5eec:	460d      	mov	r5, r1
    5eee:	4691      	mov	r9, r2
    5ef0:	461a      	mov	r2, r3
    5ef2:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5ef6:	f013 0f50 	tst.w	r3, #80	; 0x50
    5efa:	d006      	beq.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    5efc:	f002 0303 	and.w	r3, r2, #3
    5f00:	2b01      	cmp	r3, #1
    5f02:	d02b      	beq.n	5f5c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    5f04:	2b02      	cmp	r3, #2
    5f06:	d02b      	beq.n	5f60 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    5f08:	b143      	cbz	r3, 5f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    5f0a:	2600      	movs	r6, #0
    5f0c:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    5f10:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    5f14:	4630      	mov	r0, r6
    5f16:	b00f      	add	sp, #60	; 0x3c
    5f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    5f1c:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5f1e:	9a02      	ldr	r2, [sp, #8]
    5f20:	f002 0208 	and.w	r2, r2, #8
    5f24:	4313      	orrs	r3, r2
    5f26:	9303      	str	r3, [sp, #12]
  if (fname) {
    5f28:	f1b9 0f00 	cmp.w	r9, #0
    5f2c:	d01a      	beq.n	5f64 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5f2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5f32:	f103 080e 	add.w	r8, r3, #14
    5f36:	4bae      	ldr	r3, [pc, #696]	; (61f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    5f38:	fba3 3808 	umull	r3, r8, r3, r8
    5f3c:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    5f40:	f108 0802 	add.w	r8, r8, #2
    5f44:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    5f48:	2200      	movs	r2, #0
    5f4a:	2300      	movs	r3, #0
    5f4c:	4628      	mov	r0, r5
    5f4e:	f7ff ff50 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5f52:	465c      	mov	r4, fp
    5f54:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5f56:	f04f 0a20 	mov.w	sl, #32
    5f5a:	e00c      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5f5c:	2302      	movs	r3, #2
    5f5e:	e7de      	b.n	5f1e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5f60:	2303      	movs	r3, #3
    5f62:	e7dc      	b.n	5f1e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    5f64:	f04f 0803 	mov.w	r8, #3
    5f68:	e7f3      	b.n	5f52 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    5f6a:	461e      	mov	r6, r3
    5f6c:	e003      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5f6e:	461e      	mov	r6, r3
    5f70:	e001      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    5f72:	b1cb      	cbz	r3, 5fa8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    5f74:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5f76:	4652      	mov	r2, sl
    5f78:	a906      	add	r1, sp, #24
    5f7a:	4628      	mov	r0, r5
    5f7c:	f7ff fe58 	bl	5c30 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5f80:	b1a8      	cbz	r0, 5fae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    5f82:	2820      	cmp	r0, #32
    5f84:	d1c1      	bne.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    5f86:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5f8a:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    5f8e:	2a00      	cmp	r2, #0
    5f90:	db20      	blt.n	5fd4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    5f92:	b924      	cbnz	r4, 5f9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5f94:	682a      	ldr	r2, [r5, #0]
    5f96:	3a20      	subs	r2, #32
    5f98:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5f9a:	69aa      	ldr	r2, [r5, #24]
    5f9c:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    5f9e:	4544      	cmp	r4, r8
    5fa0:	d2e7      	bcs.n	5f72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    5fa2:	3401      	adds	r4, #1
    5fa4:	b2e4      	uxtb	r4, r4
    5fa6:	e7e4      	b.n	5f72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    5fa8:	f1b9 0f00 	cmp.w	r9, #0
    5fac:	d0ad      	beq.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5fae:	9b02      	ldr	r3, [sp, #8]
    5fb0:	f413 7f00 	tst.w	r3, #512	; 0x200
    5fb4:	d0a9      	beq.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5fb6:	9b03      	ldr	r3, [sp, #12]
    5fb8:	f013 0f02 	tst.w	r3, #2
    5fbc:	d0a5      	beq.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5fbe:	f1b9 0f00 	cmp.w	r9, #0
    5fc2:	d0a2      	beq.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    5fc4:	4544      	cmp	r4, r8
    5fc6:	f080 80cd 	bcs.w	6164 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    5fca:	2620      	movs	r6, #32
    5fcc:	f8dd a004 	ldr.w	sl, [sp, #4]
    5fd0:	46bb      	mov	fp, r7
    5fd2:	e0b2      	b.n	613a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    5fd4:	bb3e      	cbnz	r6, 6026 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    5fd6:	4544      	cmp	r4, r8
    5fd8:	bf38      	it	cc
    5fda:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    5fdc:	2b85      	cmp	r3, #133	; 0x85
    5fde:	d1ca      	bne.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    5fe0:	2238      	movs	r2, #56	; 0x38
    5fe2:	2100      	movs	r1, #0
    5fe4:	4638      	mov	r0, r7
    5fe6:	f00b fc81 	bl	118ec <memset>
      m_setCount = dirFile->setCount;
    5fea:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5fee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5ff2:	f89d 201c 	ldrb.w	r2, [sp, #28]
    5ff6:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5ffa:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    5ffe:	bf08      	it	eq
    6000:	f043 0308 	orreq.w	r3, r3, #8
    6004:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    6008:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    600a:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    600c:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    600e:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    6010:	682b      	ldr	r3, [r5, #0]
    6012:	3b20      	subs	r3, #32
    6014:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6016:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    601a:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    601e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    6022:	2601      	movs	r6, #1
    6024:	e7a7      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    6026:	2bc0      	cmp	r3, #192	; 0xc0
    6028:	d003      	beq.n	6032 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    602a:	2bc1      	cmp	r3, #193	; 0xc1
    602c:	d033      	beq.n	6096 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    602e:	2600      	movs	r6, #0
    6030:	e7a1      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    6032:	9a03      	ldr	r2, [sp, #12]
    6034:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6038:	f89d 3019 	ldrb.w	r3, [sp, #25]
    603c:	f013 0f02 	tst.w	r3, #2
    6040:	d003      	beq.n	604a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    6042:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    6046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    604a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    604e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    6052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6054:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    6056:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    605a:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    605e:	f1b9 0f00 	cmp.w	r9, #0
    6062:	d02e      	beq.n	60c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    6064:	f8d9 3000 	ldr.w	r3, [r9]
    6068:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    606c:	f04f 0300 	mov.w	r3, #0
    6070:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    6074:	f89d 301b 	ldrb.w	r3, [sp, #27]
    6078:	f8d9 2010 	ldr.w	r2, [r9, #16]
    607c:	429a      	cmp	r2, r3
    607e:	d001      	beq.n	6084 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    6080:	2600      	movs	r6, #0
    6082:	e778      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    6084:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    6088:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    608c:	429e      	cmp	r6, r3
    608e:	bf14      	ite	ne
    6090:	2600      	movne	r6, #0
    6092:	2601      	moveq	r6, #1
    6094:	e76f      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    6096:	464a      	mov	r2, r9
    6098:	a906      	add	r1, sp, #24
    609a:	4638      	mov	r0, r7
    609c:	f001 fa4c 	bl	7538 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    60a0:	4603      	mov	r3, r0
    60a2:	2800      	cmp	r0, #0
    60a4:	f43f af61 	beq.w	5f6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    60a8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    60ac:	2a00      	cmp	r2, #0
    60ae:	f47f af5e 	bne.w	5f6e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    60b2:	f8d9 1008 	ldr.w	r1, [r9, #8]
    60b6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    60ba:	4291      	cmp	r1, r2
    60bc:	d001      	beq.n	60c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    60be:	461e      	mov	r6, r3
    60c0:	e759      	b.n	5f76 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    60c2:	9b02      	ldr	r3, [sp, #8]
    60c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    60c8:	f47f af1f 	bne.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    60cc:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    60d0:	d105      	bne.n	60de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    60d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    60d6:	f013 0f02 	tst.w	r3, #2
    60da:	f000 80d5 	beq.w	6288 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    60de:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    60e2:	f013 0f11 	tst.w	r3, #17
    60e6:	f47f af10 	bne.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    60ea:	9b02      	ldr	r3, [sp, #8]
    60ec:	f413 6f80 	tst.w	r3, #1024	; 0x400
    60f0:	f000 80cf 	beq.w	6292 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    60f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    60f8:	f013 0f02 	tst.w	r3, #2
    60fc:	f43f af05 	beq.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    6100:	2200      	movs	r2, #0
    6102:	2300      	movs	r3, #0
    6104:	4638      	mov	r0, r7
    6106:	f7ff fe74 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
    610a:	2800      	cmp	r0, #0
    610c:	f43f aefd 	beq.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    6110:	4638      	mov	r0, r7
    6112:	f000 fd24 	bl	6b5e <ExFatFile::truncate()>
    if (!truncate(0)) {
    6116:	4606      	mov	r6, r0
    6118:	2800      	cmp	r0, #0
    611a:	f47f aefb 	bne.w	5f14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    611e:	e6f4      	b.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    6120:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    6122:	4628      	mov	r0, r5
    6124:	f000 fb08 	bl	6738 <ExFatFile::addDirCluster()>
    6128:	b908      	cbnz	r0, 612e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    612a:	465f      	mov	r7, fp
    612c:	e6ed      	b.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    612e:	61af      	str	r7, [r5, #24]
      continue;
    6130:	e001      	b.n	6136 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    6132:	3401      	adds	r4, #1
    6134:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    6136:	4544      	cmp	r4, r8
    6138:	d211      	bcs.n	615e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    613a:	4632      	mov	r2, r6
    613c:	a906      	add	r1, sp, #24
    613e:	4628      	mov	r0, r5
    6140:	f7ff fd76 	bl	5c30 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6144:	2800      	cmp	r0, #0
    6146:	d0eb      	beq.n	6120 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    6148:	2820      	cmp	r0, #32
    614a:	f040 809b 	bne.w	6284 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    614e:	2c00      	cmp	r4, #0
    6150:	d1ef      	bne.n	6132 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    6152:	682b      	ldr	r3, [r5, #0]
    6154:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    6158:	69ab      	ldr	r3, [r5, #24]
    615a:	9300      	str	r3, [sp, #0]
    615c:	e7e9      	b.n	6132 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    615e:	f8cd a004 	str.w	sl, [sp, #4]
    6162:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6164:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    6168:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    616c:	2238      	movs	r2, #56	; 0x38
    616e:	2100      	movs	r1, #0
    6170:	4638      	mov	r0, r7
    6172:	f00b fbbb 	bl	118ec <memset>
  ExFatVolume* volume() const {return m_vol;}
    6176:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    6178:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    617a:	2308      	movs	r3, #8
    617c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    6180:	9b00      	ldr	r3, [sp, #0]
    6182:	627b      	str	r3, [r7, #36]	; 0x24
    6184:	9b01      	ldr	r3, [sp, #4]
    6186:	62bb      	str	r3, [r7, #40]	; 0x28
    6188:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    618c:	f8d9 3000 	ldr.w	r3, [r9]
    6190:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    6194:	2300      	movs	r3, #0
    6196:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    619a:	f1b8 0f00 	cmp.w	r8, #0
    619e:	d06c      	beq.n	627a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    61a0:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    61a2:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    61a6:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    61aa:	f8df b048 	ldr.w	fp, [pc, #72]	; 61f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    61ae:	e036      	b.n	621e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    61b0:	2385      	movs	r3, #133	; 0x85
    61b2:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    61b4:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    61b8:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    61bc:	f8db 3000 	ldr.w	r3, [fp]
    61c0:	b17b      	cbz	r3, 61e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    61c2:	f10d 0213 	add.w	r2, sp, #19
    61c6:	f10d 0116 	add.w	r1, sp, #22
    61ca:	a805      	add	r0, sp, #20
    61cc:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    61ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    61d2:	8163      	strh	r3, [r4, #10]
    61d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    61d8:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    61da:	f89d 3013 	ldrb.w	r3, [sp, #19]
    61de:	7523      	strb	r3, [r4, #20]
    61e0:	e019      	b.n	6216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    61e2:	f245 6321 	movw	r3, #22049	; 0x5621
    61e6:	8163      	strh	r3, [r4, #10]
    61e8:	81e3      	strh	r3, [r4, #14]
    61ea:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    61ec:	e013      	b.n	6216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    61ee:	bf00      	nop
    61f0:	88888889 	.word	0x88888889
    61f4:	200050c4 	.word	0x200050c4
      dirStream->type = EXFAT_TYPE_STREAM;
    61f8:	23c0      	movs	r3, #192	; 0xc0
    61fa:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    61fc:	2301      	movs	r3, #1
    61fe:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6200:	9b03      	ldr	r3, [sp, #12]
    6202:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    620a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    620e:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    6210:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    6214:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    6216:	3601      	adds	r6, #1
    6218:	b2f3      	uxtb	r3, r6
    621a:	4598      	cmp	r8, r3
    621c:	d92d      	bls.n	627a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    621e:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    6220:	2201      	movs	r2, #1
    6222:	4629      	mov	r1, r5
    6224:	4638      	mov	r0, r7
    6226:	f7ff fc51 	bl	5acc <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    622a:	4604      	mov	r4, r0
    622c:	2800      	cmp	r0, #0
    622e:	f43f ae6c 	beq.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    6232:	f990 3000 	ldrsb.w	r3, [r0]
    6236:	2b00      	cmp	r3, #0
    6238:	f6ff ae67 	blt.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    623c:	2220      	movs	r2, #32
    623e:	2100      	movs	r1, #0
    6240:	f00b fb54 	bl	118ec <memset>
    if (i == 0) {
    6244:	2d00      	cmp	r5, #0
    6246:	d0b3      	beq.n	61b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    6248:	2d01      	cmp	r5, #1
    624a:	d0d5      	beq.n	61f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    624c:	23c1      	movs	r3, #193	; 0xc1
    624e:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    6250:	4625      	mov	r5, r4
    6252:	341e      	adds	r4, #30
    6254:	e006      	b.n	6264 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    6256:	4648      	mov	r0, r9
    6258:	f005 ff10 	bl	c07c <FsName::get16()>
    625c:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    6260:	42ac      	cmp	r4, r5
    6262:	d0d8      	beq.n	6216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    6264:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    6268:	2b00      	cmp	r3, #0
    626a:	d1f4      	bne.n	6256 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    626c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6270:	f8d9 3008 	ldr.w	r3, [r9, #8]
    6274:	429a      	cmp	r2, r3
    6276:	d1ee      	bne.n	6256 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    6278:	e7cd      	b.n	6216 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    627a:	4638      	mov	r0, r7
    627c:	f000 fa2e 	bl	66dc <ExFatFile::sync()>
    6280:	4606      	mov	r6, r0
    6282:	e647      	b.n	5f14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    6284:	465f      	mov	r7, fp
    6286:	e640      	b.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    6288:	9b02      	ldr	r3, [sp, #8]
    628a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    628e:	f47f ae3c 	bne.w	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6292:	9b02      	ldr	r3, [sp, #8]
    6294:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    6298:	f43f ae3c 	beq.w	5f14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    629c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    62a0:	4638      	mov	r0, r7
    62a2:	f7ff fda6 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
    62a6:	4606      	mov	r6, r0
    62a8:	2800      	cmp	r0, #0
    62aa:	f47f ae33 	bne.w	5f14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    62ae:	e62c      	b.n	5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

000062b0 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    62b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62b4:	b096      	sub	sp, #88	; 0x58
    62b6:	9201      	str	r2, [sp, #4]
    62b8:	461f      	mov	r7, r3
  ExFatFile() {}
    62ba:	2300      	movs	r3, #0
    62bc:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    62c0:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    62c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    62c8:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    62cc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    62d0:	2b00      	cmp	r3, #0
    62d2:	d159      	bne.n	6388 <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    62d4:	4604      	mov	r4, r0
    62d6:	460d      	mov	r5, r1
    62d8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    62dc:	f013 0f50 	tst.w	r3, #80	; 0x50
    62e0:	d057      	beq.n	6392 <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    62e2:	4613      	mov	r3, r2
    62e4:	7812      	ldrb	r2, [r2, #0]
    62e6:	2a2f      	cmp	r2, #47	; 0x2f
    62e8:	d001      	beq.n	62ee <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    62ea:	2600      	movs	r6, #0
    62ec:	e02c      	b.n	6348 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    62ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    62f2:	2a2f      	cmp	r2, #47	; 0x2f
    62f4:	d0fb      	beq.n	62ee <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    62f6:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    62f8:	b92a      	cbnz	r2, 6306 <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    62fa:	6a29      	ldr	r1, [r5, #32]
    62fc:	4620      	mov	r0, r4
    62fe:	f7ff fc2f 	bl	5b60 <ExFatFile::openRoot(ExFatVolume*)>
    6302:	4603      	mov	r3, r0
    6304:	e041      	b.n	638a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6306:	6a29      	ldr	r1, [r5, #32]
    6308:	a808      	add	r0, sp, #32
    630a:	f7ff fc29 	bl	5b60 <ExFatFile::openRoot(ExFatVolume*)>
    630e:	4603      	mov	r3, r0
    6310:	2800      	cmp	r0, #0
    6312:	d03a      	beq.n	638a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    6314:	ad08      	add	r5, sp, #32
    6316:	e7e8      	b.n	62ea <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    6318:	46ae      	mov	lr, r5
    631a:	f8dc 0000 	ldr.w	r0, [ip]
    631e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    6322:	f8dc 2008 	ldr.w	r2, [ip, #8]
    6326:	f8dc 300c 	ldr.w	r3, [ip, #12]
    632a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    632e:	f10c 0c10 	add.w	ip, ip, #16
    6332:	4675      	mov	r5, lr
    6334:	45c4      	cmp	ip, r8
    6336:	d1ef      	bne.n	6318 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    6338:	f8dc 0000 	ldr.w	r0, [ip]
    633c:	f8ce 0000 	str.w	r0, [lr]
    close();
    6340:	4620      	mov	r0, r4
    6342:	f7ff fbdf 	bl	5b04 <ExFatFile::close()>
    dirFile = &tmpDir;
    6346:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6348:	ab01      	add	r3, sp, #4
    634a:	aa02      	add	r2, sp, #8
    634c:	9901      	ldr	r1, [sp, #4]
    634e:	4620      	mov	r0, r4
    6350:	f7ff fc1a 	bl	5b88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6354:	4603      	mov	r3, r0
    6356:	b1c0      	cbz	r0, 638a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    6358:	9b01      	ldr	r3, [sp, #4]
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	b163      	cbz	r3, 6378 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    635e:	4633      	mov	r3, r6
    6360:	aa02      	add	r2, sp, #8
    6362:	4629      	mov	r1, r5
    6364:	4620      	mov	r0, r4
    6366:	f7ff fdb7 	bl	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    636a:	4603      	mov	r3, r0
    636c:	b168      	cbz	r0, 638a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    636e:	46a4      	mov	ip, r4
    6370:	ad08      	add	r5, sp, #32
    6372:	f104 0830 	add.w	r8, r4, #48	; 0x30
    6376:	e7cf      	b.n	6318 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    6378:	463b      	mov	r3, r7
    637a:	aa02      	add	r2, sp, #8
    637c:	4629      	mov	r1, r5
    637e:	4620      	mov	r0, r4
    6380:	f7ff fdaa 	bl	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6384:	4603      	mov	r3, r0
    6386:	e000      	b.n	638a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    6388:	2300      	movs	r3, #0
}
    638a:	4618      	mov	r0, r3
    638c:	b016      	add	sp, #88	; 0x58
    638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    6392:	2300      	movs	r3, #0
    6394:	e7f9      	b.n	638a <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

00006396 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    6396:	b129      	cbz	r1, 63a4 <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    6398:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    639a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    639e:	f7ff ff87 	bl	62b0 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    63a2:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    63a4:	2000      	movs	r0, #0
}
    63a6:	4770      	bx	lr

000063a8 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    63a8:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    63aa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    63ae:	b97b      	cbnz	r3, 63d0 <ExFatFile::openNext(ExFatFile*, int)+0x28>
    63b0:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    63b4:	f013 0f50 	tst.w	r3, #80	; 0x50
    63b8:	d00c      	beq.n	63d4 <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    63ba:	680b      	ldr	r3, [r1, #0]
    63bc:	f013 0f1f 	tst.w	r3, #31
    63c0:	d001      	beq.n	63c6 <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    63c2:	2000      	movs	r0, #0
    63c4:	e005      	b.n	63d2 <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    63c6:	4613      	mov	r3, r2
    63c8:	2200      	movs	r2, #0
    63ca:	f7ff fd85 	bl	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    63ce:	e000      	b.n	63d2 <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    63d0:	2000      	movs	r0, #0
}
    63d2:	bd08      	pop	{r3, pc}
  return false;
    63d4:	2000      	movs	r0, #0
    63d6:	e7fc      	b.n	63d2 <ExFatFile::openNext(ExFatFile*, int)+0x2a>

000063d8 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    63d8:	b410      	push	{r4}
    63da:	4684      	mov	ip, r0
    63dc:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    63de:	f89c 4000 	ldrb.w	r4, [ip]
    63e2:	2c85      	cmp	r4, #133	; 0x85
    63e4:	bf14      	ite	ne
    63e6:	2400      	movne	r4, #0
    63e8:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    63ea:	2200      	movs	r2, #0
    63ec:	e000      	b.n	63f0 <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    63ee:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    63f0:	03c3      	lsls	r3, r0, #15
    63f2:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    63f6:	f81c 1002 	ldrb.w	r1, [ip, r2]
    63fa:	fa11 f383 	uxtah	r3, r1, r3
    63fe:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6400:	2a01      	cmp	r2, #1
    6402:	d101      	bne.n	6408 <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    6404:	2c00      	cmp	r4, #0
    6406:	d1f2      	bne.n	63ee <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    6408:	3201      	adds	r2, #1
    640a:	2a1f      	cmp	r2, #31
    640c:	d9f0      	bls.n	63f0 <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
  }
  return checksum;
}
    640e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6412:	4770      	bx	lr

00006414 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6416:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6418:	6a00      	ldr	r0, [r0, #32]
    641a:	69a1      	ldr	r1, [r4, #24]
    641c:	b101      	cbz	r1, 6420 <ExFatFile::addCluster()+0xc>
    641e:	3101      	adds	r1, #1
    6420:	2201      	movs	r2, #1
    6422:	f001 f943 	bl	76ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    6426:	4605      	mov	r5, r0
  if (find < 2) {
    6428:	2801      	cmp	r0, #1
    642a:	d93c      	bls.n	64a6 <ExFatFile::addCluster()+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    642c:	2301      	movs	r3, #1
    642e:	461a      	mov	r2, r3
    6430:	4601      	mov	r1, r0
    6432:	6a20      	ldr	r0, [r4, #32]
    6434:	f001 f993 	bl	775e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6438:	4607      	mov	r7, r0
    643a:	2800      	cmp	r0, #0
    643c:	d034      	beq.n	64a8 <ExFatFile::addCluster()+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    643e:	69a3      	ldr	r3, [r4, #24]
    6440:	b1bb      	cbz	r3, 6472 <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6442:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    6446:	f012 0f40 	tst.w	r2, #64	; 0x40
    644a:	d01a      	beq.n	6482 <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    644c:	3301      	adds	r3, #1
    644e:	42ab      	cmp	r3, r5
    6450:	d015      	beq.n	647e <ExFatFile::addCluster()+0x6a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    6456:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    645a:	69e1      	ldr	r1, [r4, #28]
    645c:	69a3      	ldr	r3, [r4, #24]
    645e:	428b      	cmp	r3, r1
    6460:	d90f      	bls.n	6482 <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    6462:	1c4e      	adds	r6, r1, #1
    6464:	4632      	mov	r2, r6
    6466:	6a20      	ldr	r0, [r4, #32]
    6468:	f001 fa5d 	bl	7926 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    646c:	b1f0      	cbz	r0, 64ac <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    646e:	4631      	mov	r1, r6
    6470:	e7f4      	b.n	645c <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6472:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    647a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    647e:	61a5      	str	r5, [r4, #24]
  return true;
    6480:	e012      	b.n	64a8 <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6486:	4629      	mov	r1, r5
    6488:	6a20      	ldr	r0, [r4, #32]
    648a:	f001 fa4c 	bl	7926 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    648e:	b178      	cbz	r0, 64b0 <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    6490:	69a1      	ldr	r1, [r4, #24]
    6492:	2900      	cmp	r1, #0
    6494:	d0f3      	beq.n	647e <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6496:	462a      	mov	r2, r5
    6498:	6a20      	ldr	r0, [r4, #32]
    649a:	f001 fa44 	bl	7926 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    649e:	2800      	cmp	r0, #0
    64a0:	d1ed      	bne.n	647e <ExFatFile::addCluster()+0x6a>

 fail:
  return false;
    64a2:	4607      	mov	r7, r0
    64a4:	e000      	b.n	64a8 <ExFatFile::addCluster()+0x94>
    64a6:	2700      	movs	r7, #0
}
    64a8:	4638      	mov	r0, r7
    64aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    64ac:	4607      	mov	r7, r0
    64ae:	e7fb      	b.n	64a8 <ExFatFile::addCluster()+0x94>
    64b0:	4607      	mov	r7, r0
    64b2:	e7f9      	b.n	64a8 <ExFatFile::addCluster()+0x94>

000064b4 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    64b4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    64b8:	f013 0f02 	tst.w	r3, #2
    64bc:	d04e      	beq.n	655c <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    64be:	b570      	push	{r4, r5, r6, lr}
    64c0:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    64c2:	69c1      	ldr	r1, [r0, #28]
    64c4:	b1e9      	cbz	r1, 6502 <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    64c6:	f013 0f40 	tst.w	r3, #64	; 0x40
    64ca:	d041      	beq.n	6550 <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    64cc:	6a00      	ldr	r0, [r0, #32]
    64ce:	68aa      	ldr	r2, [r5, #8]
    64d0:	68ec      	ldr	r4, [r5, #12]
    64d2:	3a01      	subs	r2, #1
    64d4:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    64d8:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    64dc:	3309      	adds	r3, #9
    64de:	b2db      	uxtb	r3, r3
    64e0:	f1c3 0c20 	rsb	ip, r3, #32
    64e4:	f1a3 0620 	sub.w	r6, r3, #32
    64e8:	40da      	lsrs	r2, r3
    64ea:	fa04 fc0c 	lsl.w	ip, r4, ip
    64ee:	ea42 020c 	orr.w	r2, r2, ip
    64f2:	fa24 f606 	lsr.w	r6, r4, r6
    64f6:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    64f8:	2300      	movs	r3, #0
    64fa:	3201      	adds	r2, #1
    64fc:	f001 f92f 	bl	775e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6500:	b378      	cbz	r0, 6562 <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    6502:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6504:	2601      	movs	r6, #1
    6506:	4632      	mov	r2, r6
    6508:	b2e1      	uxtb	r1, r4
    650a:	4628      	mov	r0, r5
    650c:	f7ff fade 	bl	5acc <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6510:	b330      	cbz	r0, 6560 <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    6512:	7803      	ldrb	r3, [r0, #0]
    6514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6518:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    651a:	3401      	adds	r4, #1
    651c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    6520:	b2e3      	uxtb	r3, r4
    6522:	429a      	cmp	r2, r3
    6524:	d2ef      	bcs.n	6506 <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6526:	2300      	movs	r3, #0
    6528:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    652c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    6530:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6532:	4620      	mov	r0, r4
    6534:	f005 fd3c 	bl	bfb0 <FsCache::sync()>
    6538:	b198      	cbz	r0, 6562 <ExFatFile::remove()+0xae>
    653a:	f504 7004 	add.w	r0, r4, #528	; 0x210
    653e:	f005 fd37 	bl	bfb0 <FsCache::sync()>
    6542:	b170      	cbz	r0, 6562 <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6544:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    6548:	6803      	ldr	r3, [r0, #0]
    654a:	6a1b      	ldr	r3, [r3, #32]
    654c:	4798      	blx	r3
    654e:	e008      	b.n	6562 <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    6550:	6a00      	ldr	r0, [r0, #32]
    6552:	f001 fa08 	bl	7966 <ExFatPartition::freeChain(unsigned long)>
    6556:	2800      	cmp	r0, #0
    6558:	d1d3      	bne.n	6502 <ExFatFile::remove()+0x4e>
    655a:	e002      	b.n	6562 <ExFatFile::remove()+0xae>

 fail:
  return false;
    655c:	2000      	movs	r0, #0
}
    655e:	4770      	bx	lr
  return false;
    6560:	2000      	movs	r0, #0
}
    6562:	bd70      	pop	{r4, r5, r6, pc}

00006564 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6564:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6568:	f013 0f10 	tst.w	r3, #16
    656c:	d101      	bne.n	6572 <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    656e:	2000      	movs	r0, #0
}
    6570:	4770      	bx	lr
bool ExFatFile::rmdir() {
    6572:	b530      	push	{r4, r5, lr}
    6574:	b089      	sub	sp, #36	; 0x24
    6576:	4604      	mov	r4, r0
    seekSet(0);
    6578:	2200      	movs	r2, #0
    657a:	2300      	movs	r3, #0
    657c:	f7ff fc39 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    6580:	2520      	movs	r5, #32
    6582:	462a      	mov	r2, r5
    6584:	4669      	mov	r1, sp
    6586:	4620      	mov	r0, r4
    6588:	f7ff fb52 	bl	5c30 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    658c:	b148      	cbz	r0, 65a2 <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    658e:	2820      	cmp	r0, #32
    6590:	d115      	bne.n	65be <ExFatFile::rmdir()+0x5a>
    6592:	f89d 2000 	ldrb.w	r2, [sp]
    6596:	f99d 3000 	ldrsb.w	r3, [sp]
    659a:	2b00      	cmp	r3, #0
    659c:	db11      	blt.n	65c2 <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    659e:	2a00      	cmp	r2, #0
    65a0:	d1ef      	bne.n	6582 <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    65a2:	2308      	movs	r3, #8
    65a4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    65a8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    65ac:	f043 0302 	orr.w	r3, r3, #2
    65b0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    65b4:	4620      	mov	r0, r4
    65b6:	f7ff ff7d 	bl	64b4 <ExFatFile::remove()>
}
    65ba:	b009      	add	sp, #36	; 0x24
    65bc:	bd30      	pop	{r4, r5, pc}
  return false;
    65be:	2000      	movs	r0, #0
    65c0:	e7fb      	b.n	65ba <ExFatFile::rmdir()+0x56>
    65c2:	2000      	movs	r0, #0
    65c4:	e7f9      	b.n	65ba <ExFatFile::rmdir()+0x56>
	...

000065c8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    65c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    65cc:	b083      	sub	sp, #12
    65ce:	4604      	mov	r4, r0
    65d0:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    65d2:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    65d4:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    65d6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 66d8 <ExFatFile::syncDir()+0x110>
    65da:	e02a      	b.n	6632 <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    65dc:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    65e0:	f003 0337 	and.w	r3, r3, #55	; 0x37
    65e4:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    65e6:	f8d9 3000 	ldr.w	r3, [r9]
    65ea:	b183      	cbz	r3, 660e <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    65ec:	f10d 0203 	add.w	r2, sp, #3
    65f0:	f10d 0106 	add.w	r1, sp, #6
    65f4:	a801      	add	r0, sp, #4
    65f6:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    65f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    65fc:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    65fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    6602:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    6604:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6608:	81eb      	strh	r3, [r5, #14]
    660a:	822a      	strh	r2, [r5, #16]
    660c:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    660e:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6610:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6614:	f043 0301 	orr.w	r3, r3, #1
    6618:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    661c:	4639      	mov	r1, r7
    661e:	4628      	mov	r0, r5
    6620:	f7ff feda 	bl	63d8 <exFatDirChecksum(unsigned char const*, unsigned short)>
    6624:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6626:	3601      	adds	r6, #1
    6628:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    662c:	b2f3      	uxtb	r3, r6
    662e:	429a      	cmp	r2, r3
    6630:	d334      	bcc.n	669c <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6632:	4642      	mov	r2, r8
    6634:	b2f1      	uxtb	r1, r6
    6636:	4620      	mov	r0, r4
    6638:	f7ff fa48 	bl	5acc <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    663c:	4605      	mov	r5, r0
    663e:	b130      	cbz	r0, 664e <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    6640:	7803      	ldrb	r3, [r0, #0]
    6642:	2bc0      	cmp	r3, #192	; 0xc0
    6644:	d00d      	beq.n	6662 <ExFatFile::syncDir()+0x9a>
    6646:	2bc1      	cmp	r3, #193	; 0xc1
    6648:	d0e8      	beq.n	661c <ExFatFile::syncDir()+0x54>
    664a:	2b85      	cmp	r3, #133	; 0x85
    664c:	d0c6      	beq.n	65dc <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    664e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6652:	f043 0301 	orr.w	r3, r3, #1
    6656:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    665a:	2000      	movs	r0, #0
}
    665c:	b003      	add	sp, #12
    665e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    6662:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6666:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    666a:	7843      	ldrb	r3, [r0, #1]
    666c:	bf14      	ite	ne
    666e:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6672:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    6676:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6678:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    667c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    6680:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6682:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6684:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6688:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    668c:	6a22      	ldr	r2, [r4, #32]
    668e:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6692:	f043 0301 	orr.w	r3, r3, #1
    6696:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    669a:	e7bf      	b.n	661c <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    669c:	2201      	movs	r2, #1
    669e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    66a2:	6a20      	ldr	r0, [r4, #32]
    66a4:	f001 f8c3 	bl	782e <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    66a8:	2800      	cmp	r0, #0
    66aa:	d0d0      	beq.n	664e <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    66ac:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    66ae:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    66b0:	4628      	mov	r0, r5
    66b2:	f005 fc7d 	bl	bfb0 <FsCache::sync()>
    66b6:	2800      	cmp	r0, #0
    66b8:	d0c9      	beq.n	664e <ExFatFile::syncDir()+0x86>
    66ba:	f505 7004 	add.w	r0, r5, #528	; 0x210
    66be:	f005 fc77 	bl	bfb0 <FsCache::sync()>
    66c2:	2800      	cmp	r0, #0
    66c4:	d0c3      	beq.n	664e <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    66c6:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    66ca:	6803      	ldr	r3, [r0, #0]
    66cc:	6a1b      	ldr	r3, [r3, #32]
    66ce:	4798      	blx	r3
    66d0:	2800      	cmp	r0, #0
    66d2:	d1c3      	bne.n	665c <ExFatFile::syncDir()+0x94>
    66d4:	e7bb      	b.n	664e <ExFatFile::syncDir()+0x86>
    66d6:	bf00      	nop
    66d8:	200050c4 	.word	0x200050c4

000066dc <ExFatFile::sync()>:
bool ExFatFile::sync() {
    66dc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    66de:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    66e2:	b33b      	cbz	r3, 6734 <ExFatFile::sync()+0x58>
    66e4:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    66e6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    66ea:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    66ee:	2a00      	cmp	r2, #0
    66f0:	db0c      	blt.n	670c <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    66f2:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    66f4:	4628      	mov	r0, r5
    66f6:	f005 fc5b 	bl	bfb0 <FsCache::sync()>
    66fa:	b970      	cbnz	r0, 671a <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    66fc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6700:	f043 0301 	orr.w	r3, r3, #1
    6704:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6708:	2000      	movs	r0, #0
    670a:	e014      	b.n	6736 <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    670c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6710:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    6714:	f7ff ff58 	bl	65c8 <ExFatFile::syncDir()>
    6718:	e00d      	b.n	6736 <ExFatFile::sync()+0x5a>
    671a:	f505 7004 	add.w	r0, r5, #528	; 0x210
    671e:	f005 fc47 	bl	bfb0 <FsCache::sync()>
    6722:	2800      	cmp	r0, #0
    6724:	d0ea      	beq.n	66fc <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    6726:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    672a:	6803      	ldr	r3, [r0, #0]
    672c:	6a1b      	ldr	r3, [r3, #32]
    672e:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    6730:	b908      	cbnz	r0, 6736 <ExFatFile::sync()+0x5a>
    6732:	e7e3      	b.n	66fc <ExFatFile::sync()+0x20>
    return true;
    6734:	2001      	movs	r0, #1
}
    6736:	bd38      	pop	{r3, r4, r5, pc}

00006738 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    673c:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    673e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6742:	f013 0f40 	tst.w	r3, #64	; 0x40
    6746:	d10a      	bne.n	675e <ExFatFile::addDirCluster()+0x26>
    6748:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    674a:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    674c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    6750:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    6752:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    6756:	d306      	bcc.n	6766 <ExFatFile::addDirCluster()+0x2e>
  return false;
    6758:	2000      	movs	r0, #0
}
    675a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    675e:	6a00      	ldr	r0, [r0, #32]
    6760:	f001 f9f4 	bl	7b4c <ExFatPartition::rootLength()>
    6764:	e7f1      	b.n	674a <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    6766:	4628      	mov	r0, r5
    6768:	f7ff fe54 	bl	6414 <ExFatFile::addCluster()>
    676c:	2800      	cmp	r0, #0
    676e:	d0f4      	beq.n	675a <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    6770:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    6772:	69ae      	ldr	r6, [r5, #24]
    6774:	3e02      	subs	r6, #2
    6776:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    677a:	409e      	lsls	r6, r3
    677c:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6780:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6782:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    6784:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    6786:	f44f 7900 	mov.w	r9, #512	; 0x200
    678a:	46a0      	mov	r8, r4
    678c:	463a      	mov	r2, r7
    678e:	1931      	adds	r1, r6, r4
    6790:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6794:	f005 fc33 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6798:	b360      	cbz	r0, 67f4 <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    679a:	464a      	mov	r2, r9
    679c:	4641      	mov	r1, r8
    679e:	f00b f8a5 	bl	118ec <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    67a2:	3401      	adds	r4, #1
    67a4:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    67a6:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    67aa:	2301      	movs	r3, #1
    67ac:	4093      	lsls	r3, r2
    67ae:	429c      	cmp	r4, r3
    67b0:	d3ec      	bcc.n	678c <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    67b2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    67b6:	f013 0f40 	tst.w	r3, #64	; 0x40
    67ba:	d117      	bne.n	67ec <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    67bc:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    67c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    67c4:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    67c8:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    67cc:	68ab      	ldr	r3, [r5, #8]
    67ce:	68ea      	ldr	r2, [r5, #12]
    67d0:	185b      	adds	r3, r3, r1
    67d2:	f142 0200 	adc.w	r2, r2, #0
    67d6:	60ab      	str	r3, [r5, #8]
    67d8:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    67da:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    67de:	692b      	ldr	r3, [r5, #16]
    67e0:	696a      	ldr	r2, [r5, #20]
    67e2:	185b      	adds	r3, r3, r1
    67e4:	f142 0200 	adc.w	r2, r2, #0
    67e8:	612b      	str	r3, [r5, #16]
    67ea:	616a      	str	r2, [r5, #20]
  return sync();
    67ec:	4628      	mov	r0, r5
    67ee:	f7ff ff75 	bl	66dc <ExFatFile::sync()>
    67f2:	e7b2      	b.n	675a <ExFatFile::addDirCluster()+0x22>
  return false;
    67f4:	2000      	movs	r0, #0
    67f6:	e7b0      	b.n	675a <ExFatFile::addDirCluster()+0x22>

000067f8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    67f8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    67fc:	f013 0f50 	tst.w	r3, #80	; 0x50
    6800:	d101      	bne.n	6806 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    6802:	2000      	movs	r0, #0
}
    6804:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6806:	b510      	push	{r4, lr}
    6808:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    680a:	f640 2302 	movw	r3, #2562	; 0xa02
    680e:	f7ff fb63 	bl	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6812:	b900      	cbnz	r0, 6816 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    6814:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    6816:	2310      	movs	r3, #16
    6818:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    681c:	4620      	mov	r0, r4
    681e:	f7ff ff8b 	bl	6738 <ExFatFile::addDirCluster()>
    6822:	2800      	cmp	r0, #0
    6824:	d0f6      	beq.n	6814 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    6826:	69a3      	ldr	r3, [r4, #24]
    6828:	61e3      	str	r3, [r4, #28]
    682a:	2200      	movs	r2, #0
    682c:	2300      	movs	r3, #0
    682e:	4620      	mov	r0, r4
    6830:	f7ff fadf 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6834:	23c1      	movs	r3, #193	; 0xc1
    6836:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    683a:	4620      	mov	r0, r4
    683c:	f7ff ff4e 	bl	66dc <ExFatFile::sync()>
    6840:	e7e8      	b.n	6814 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

00006842 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6846:	b096      	sub	sp, #88	; 0x58
    6848:	9201      	str	r2, [sp, #4]
    684a:	461e      	mov	r6, r3
    684c:	2300      	movs	r3, #0
    684e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    6852:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6856:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    685a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    685e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6862:	2b00      	cmp	r3, #0
    6864:	d15a      	bne.n	691c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    6866:	4604      	mov	r4, r0
    6868:	460d      	mov	r5, r1
    686a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    686e:	f013 0f50 	tst.w	r3, #80	; 0x50
    6872:	d058      	beq.n	6926 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    6874:	4613      	mov	r3, r2
    6876:	7812      	ldrb	r2, [r2, #0]
    6878:	2a2f      	cmp	r2, #47	; 0x2f
    687a:	d001      	beq.n	6880 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    687c:	2700      	movs	r7, #0
    687e:	e029      	b.n	68d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    6880:	3301      	adds	r3, #1
    6882:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    6884:	781a      	ldrb	r2, [r3, #0]
    6886:	2a2f      	cmp	r2, #47	; 0x2f
    6888:	d0fa      	beq.n	6880 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    688a:	6a29      	ldr	r1, [r5, #32]
    688c:	a802      	add	r0, sp, #8
    688e:	f7ff f967 	bl	5b60 <ExFatFile::openRoot(ExFatVolume*)>
    6892:	4603      	mov	r3, r0
    6894:	2800      	cmp	r0, #0
    6896:	d042      	beq.n	691e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    6898:	ad02      	add	r5, sp, #8
    689a:	e7ef      	b.n	687c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    689c:	46a4      	mov	ip, r4
    689e:	ad02      	add	r5, sp, #8
    68a0:	f104 0830 	add.w	r8, r4, #48	; 0x30
    68a4:	46ae      	mov	lr, r5
    68a6:	f8dc 0000 	ldr.w	r0, [ip]
    68aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
    68ae:	f8dc 2008 	ldr.w	r2, [ip, #8]
    68b2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    68b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    68ba:	f10c 0c10 	add.w	ip, ip, #16
    68be:	4675      	mov	r5, lr
    68c0:	45c4      	cmp	ip, r8
    68c2:	d1ef      	bne.n	68a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    68c4:	f8dc 0000 	ldr.w	r0, [ip]
    68c8:	f8ce 0000 	str.w	r0, [lr]
    close();
    68cc:	4620      	mov	r0, r4
    68ce:	f7ff f919 	bl	5b04 <ExFatFile::close()>
    parent = &tmpDir;
    68d2:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    68d4:	ab01      	add	r3, sp, #4
    68d6:	aa10      	add	r2, sp, #64	; 0x40
    68d8:	9901      	ldr	r1, [sp, #4]
    68da:	4620      	mov	r0, r4
    68dc:	f7ff f954 	bl	5b88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    68e0:	4603      	mov	r3, r0
    68e2:	b1e0      	cbz	r0, 691e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    68e4:	9b01      	ldr	r3, [sp, #4]
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	b18b      	cbz	r3, 690e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    68ea:	463b      	mov	r3, r7
    68ec:	aa10      	add	r2, sp, #64	; 0x40
    68ee:	4629      	mov	r1, r5
    68f0:	4620      	mov	r0, r4
    68f2:	f7ff faf1 	bl	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    68f6:	2800      	cmp	r0, #0
    68f8:	d1d0      	bne.n	689c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    68fa:	b1b6      	cbz	r6, 692a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    68fc:	aa10      	add	r2, sp, #64	; 0x40
    68fe:	4629      	mov	r1, r5
    6900:	4620      	mov	r0, r4
    6902:	f7ff ff79 	bl	67f8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6906:	4603      	mov	r3, r0
    6908:	2800      	cmp	r0, #0
    690a:	d1c7      	bne.n	689c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    690c:	e007      	b.n	691e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    690e:	aa10      	add	r2, sp, #64	; 0x40
    6910:	4629      	mov	r1, r5
    6912:	4620      	mov	r0, r4
    6914:	f7ff ff70 	bl	67f8 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6918:	4603      	mov	r3, r0
    691a:	e000      	b.n	691e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    691c:	2300      	movs	r3, #0
}
    691e:	4618      	mov	r0, r3
    6920:	b016      	add	sp, #88	; 0x58
    6922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    6926:	2300      	movs	r3, #0
    6928:	e7f9      	b.n	691e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    692a:	4633      	mov	r3, r6
    692c:	e7f7      	b.n	691e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

0000692e <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    692e:	b570      	push	{r4, r5, r6, lr}
    6930:	b09c      	sub	sp, #112	; 0x70
    6932:	2300      	movs	r3, #0
    6934:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6938:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    693c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    6940:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    6944:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6948:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    694c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6950:	f013 0f18 	tst.w	r3, #24
    6954:	d047      	beq.n	69e6 <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    6956:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    6958:	6a00      	ldr	r0, [r0, #32]
    695a:	6a0b      	ldr	r3, [r1, #32]
    695c:	4298      	cmp	r0, r3
    695e:	d002      	beq.n	6966 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    6960:	2000      	movs	r0, #0
}
    6962:	b01c      	add	sp, #112	; 0x70
    6964:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6966:	f640 2301 	movw	r3, #2561	; 0xa01
    696a:	a80e      	add	r0, sp, #56	; 0x38
    696c:	f7ff fca0 	bl	62b0 <ExFatFile::open(ExFatFile*, char const*, int)>
    6970:	2800      	cmp	r0, #0
    6972:	d0f6      	beq.n	6962 <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    6974:	46a4      	mov	ip, r4
    6976:	466d      	mov	r5, sp
    6978:	f104 0630 	add.w	r6, r4, #48	; 0x30
    697c:	46ae      	mov	lr, r5
    697e:	f8dc 0000 	ldr.w	r0, [ip]
    6982:	f8dc 1004 	ldr.w	r1, [ip, #4]
    6986:	f8dc 2008 	ldr.w	r2, [ip, #8]
    698a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    698e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6992:	f10c 0c10 	add.w	ip, ip, #16
    6996:	4675      	mov	r5, lr
    6998:	45b4      	cmp	ip, r6
    699a:	d1ef      	bne.n	697c <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    699c:	f8dc 0000 	ldr.w	r0, [ip]
    69a0:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    69a4:	f104 0324 	add.w	r3, r4, #36	; 0x24
    69a8:	aa17      	add	r2, sp, #92	; 0x5c
    69aa:	ca07      	ldmia	r2, {r0, r1, r2}
    69ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    69b0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    69b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    69b8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    69bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    69c0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    69c4:	4620      	mov	r0, r4
    69c6:	f7ff fe89 	bl	66dc <ExFatFile::sync()>
    69ca:	2800      	cmp	r0, #0
    69cc:	d0c9      	beq.n	6962 <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    69ce:	2300      	movs	r3, #0
    69d0:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    69d2:	2302      	movs	r3, #2
    69d4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    69d8:	2308      	movs	r3, #8
    69da:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    69de:	4668      	mov	r0, sp
    69e0:	f7ff fd68 	bl	64b4 <ExFatFile::remove()>
    69e4:	e7bd      	b.n	6962 <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    69e6:	2000      	movs	r0, #0
    69e8:	e7bb      	b.n	6962 <ExFatFile::rename(ExFatFile*, char const*)+0x34>

000069ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    69ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69ee:	b083      	sub	sp, #12
    69f0:	9100      	str	r1, [sp, #0]
    69f2:	461e      	mov	r6, r3
    69f4:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    69f8:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    69fc:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    6a00:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    6a04:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6a08:	f013 0f08 	tst.w	r3, #8
    6a0c:	f000 809a 	beq.w	6b44 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    6a10:	4605      	mov	r5, r0
      || year > 2107
    6a12:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    6a16:	b294      	uxth	r4, r2
    6a18:	2c7f      	cmp	r4, #127	; 0x7f
    6a1a:	f200 8098 	bhi.w	6b4e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    6a1e:	1e73      	subs	r3, r6, #1
    6a20:	b2db      	uxtb	r3, r3
    6a22:	2b0b      	cmp	r3, #11
    6a24:	f200 8095 	bhi.w	6b52 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    6a28:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    6a2c:	b2db      	uxtb	r3, r3
    6a2e:	2b1e      	cmp	r3, #30
    6a30:	f200 8091 	bhi.w	6b56 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    6a34:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    6a38:	bf98      	it	ls
    6a3a:	f1ba 0f17 	cmpls.w	sl, #23
    6a3e:	bf8c      	ite	hi
    6a40:	2701      	movhi	r7, #1
    6a42:	2700      	movls	r7, #0
    6a44:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    6a48:	bf88      	it	hi
    6a4a:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    6a4e:	b10f      	cbz	r7, 6a54 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    6a50:	2700      	movs	r7, #0
    6a52:	e078      	b.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    6a54:	f7ff fe42 	bl	66dc <ExFatFile::sync()>
    6a58:	2800      	cmp	r0, #0
    6a5a:	d07e      	beq.n	6b5a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    6a5c:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    6a60:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    6a64:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    6a66:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6a6a:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    6a6e:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    6a72:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    6a76:	f019 0901 	ands.w	r9, r9, #1
    6a7a:	bf18      	it	ne
    6a7c:	f04f 0964 	movne.w	r9, #100	; 0x64
    6a80:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    6a82:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6a84:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    6a86:	9b00      	ldr	r3, [sp, #0]
    6a88:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6a8c:	4652      	mov	r2, sl
    6a8e:	b2f1      	uxtb	r1, r6
    6a90:	4628      	mov	r0, r5
    6a92:	f7ff f81b 	bl	5acc <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6a96:	4602      	mov	r2, r0
    6a98:	2800      	cmp	r0, #0
    6a9a:	d054      	beq.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    6a9c:	7803      	ldrb	r3, [r0, #0]
    6a9e:	2b85      	cmp	r3, #133	; 0x85
    6aa0:	d02b      	beq.n	6afa <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    6aa2:	3340      	adds	r3, #64	; 0x40
    6aa4:	b2db      	uxtb	r3, r3
    6aa6:	2b01      	cmp	r3, #1
    6aa8:	d84d      	bhi.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    6aaa:	9901      	ldr	r1, [sp, #4]
    6aac:	4610      	mov	r0, r2
    6aae:	f7ff fc93 	bl	63d8 <exFatDirChecksum(unsigned char const*, unsigned short)>
    6ab2:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6ab4:	3601      	adds	r6, #1
    6ab6:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    6aba:	b2f3      	uxtb	r3, r6
    6abc:	429a      	cmp	r2, r3
    6abe:	d2e5      	bcs.n	6a8c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6ac0:	2201      	movs	r2, #1
    6ac2:	f105 0124 	add.w	r1, r5, #36	; 0x24
    6ac6:	6a28      	ldr	r0, [r5, #32]
    6ac8:	f000 feb1 	bl	782e <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6acc:	2800      	cmp	r0, #0
    6ace:	d03a      	beq.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6ad0:	9a01      	ldr	r2, [sp, #4]
    6ad2:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    6ad4:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6ad6:	4620      	mov	r0, r4
    6ad8:	f005 fa6a 	bl	bfb0 <FsCache::sync()>
    6adc:	4607      	mov	r7, r0
    6ade:	b390      	cbz	r0, 6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6ae0:	f504 7004 	add.w	r0, r4, #528	; 0x210
    6ae4:	f005 fa64 	bl	bfb0 <FsCache::sync()>
    6ae8:	4607      	mov	r7, r0
    6aea:	b360      	cbz	r0, 6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    6aec:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    6af0:	6803      	ldr	r3, [r0, #0]
    6af2:	6a1b      	ldr	r3, [r3, #32]
    6af4:	4798      	blx	r3
    6af6:	4607      	mov	r7, r0
    6af8:	e025      	b.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6afa:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6afe:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6b02:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    6b04:	6a29      	ldr	r1, [r5, #32]
    6b06:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    6b0a:	f043 0301 	orr.w	r3, r3, #1
    6b0e:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    6b12:	f1b8 0f00 	cmp.w	r8, #0
    6b16:	d002      	beq.n	6b1e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    6b18:	f8a0 b010 	strh.w	fp, [r0, #16]
    6b1c:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    6b1e:	9b00      	ldr	r3, [sp, #0]
    6b20:	f013 0f02 	tst.w	r3, #2
    6b24:	d004      	beq.n	6b30 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    6b26:	f882 9014 	strb.w	r9, [r2, #20]
    6b2a:	f8a2 b008 	strh.w	fp, [r2, #8]
    6b2e:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    6b30:	9b00      	ldr	r3, [sp, #0]
    6b32:	f013 0f04 	tst.w	r3, #4
    6b36:	d0b8      	beq.n	6aaa <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    6b38:	f882 9015 	strb.w	r9, [r2, #21]
    6b3c:	f8a2 b00c 	strh.w	fp, [r2, #12]
    6b40:	81d4      	strh	r4, [r2, #14]
}
    6b42:	e7b2      	b.n	6aaa <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    6b44:	2700      	movs	r7, #0
}
    6b46:	4638      	mov	r0, r7
    6b48:	b003      	add	sp, #12
    6b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    6b4e:	2700      	movs	r7, #0
    6b50:	e7f9      	b.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6b52:	2700      	movs	r7, #0
    6b54:	e7f7      	b.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6b56:	2700      	movs	r7, #0
    6b58:	e7f5      	b.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6b5a:	4607      	mov	r7, r0
    6b5c:	e7f3      	b.n	6b46 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

00006b5e <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6b5e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6b62:	f013 0f02 	tst.w	r3, #2
    6b66:	d066      	beq.n	6c36 <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    6b68:	b530      	push	{r4, r5, lr}
    6b6a:	b083      	sub	sp, #12
    6b6c:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6b6e:	69c5      	ldr	r5, [r0, #28]
    6b70:	2d00      	cmp	r5, #0
    6b72:	d062      	beq.n	6c3a <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    6b74:	f013 0f40 	tst.w	r3, #64	; 0x40
    6b78:	d03b      	beq.n	6bf2 <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6b7a:	6a00      	ldr	r0, [r0, #32]
    6b7c:	68a2      	ldr	r2, [r4, #8]
    6b7e:	68e1      	ldr	r1, [r4, #12]
    6b80:	3a01      	subs	r2, #1
    6b82:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6b86:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6b8a:	3309      	adds	r3, #9
    6b8c:	b2db      	uxtb	r3, r3
    6b8e:	f1c3 0e20 	rsb	lr, r3, #32
    6b92:	f1a3 0c20 	sub.w	ip, r3, #32
    6b96:	40da      	lsrs	r2, r3
    6b98:	fa01 fe0e 	lsl.w	lr, r1, lr
    6b9c:	ea42 020e 	orr.w	r2, r2, lr
    6ba0:	fa21 fc0c 	lsr.w	ip, r1, ip
    6ba4:	ea42 020c 	orr.w	r2, r2, ip
    6ba8:	3201      	adds	r2, #1
    if (m_curCluster) {
    6baa:	69a3      	ldr	r3, [r4, #24]
    6bac:	b1b3      	cbz	r3, 6bdc <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    6bae:	1c59      	adds	r1, r3, #1
    6bb0:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    6bb2:	3d01      	subs	r5, #1
    6bb4:	1aed      	subs	r5, r5, r3
    6bb6:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6bb8:	b9a2      	cbnz	r2, 6be4 <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    6bba:	e9d4 2300 	ldrd	r2, r3, [r4]
    6bbe:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    6bc2:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6bc6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6bce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6bd2:	4620      	mov	r0, r4
    6bd4:	f7ff fd82 	bl	66dc <ExFatFile::sync()>

 fail:
  return false;
}
    6bd8:	b003      	add	sp, #12
    6bda:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    6bdc:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6bde:	2300      	movs	r3, #0
    6be0:	61e3      	str	r3, [r4, #28]
    6be2:	e7e9      	b.n	6bb8 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6be4:	2300      	movs	r3, #0
    6be6:	9901      	ldr	r1, [sp, #4]
    6be8:	f000 fdb9 	bl	775e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6bec:	2800      	cmp	r0, #0
    6bee:	d1e4      	bne.n	6bba <ExFatFile::truncate()+0x5c>
    6bf0:	e7f2      	b.n	6bd8 <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    6bf2:	6981      	ldr	r1, [r0, #24]
    6bf4:	b949      	cbnz	r1, 6c0a <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    6bf6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6bf8:	2300      	movs	r3, #0
    6bfa:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    6bfc:	4629      	mov	r1, r5
    6bfe:	6a20      	ldr	r0, [r4, #32]
    6c00:	f000 feb1 	bl	7966 <ExFatPartition::freeChain(unsigned long)>
    6c04:	2800      	cmp	r0, #0
    6c06:	d1d8      	bne.n	6bba <ExFatFile::truncate()+0x5c>
    6c08:	e7e6      	b.n	6bd8 <ExFatFile::truncate()+0x7a>
      toFree = 0;
    6c0a:	2300      	movs	r3, #0
    6c0c:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6c0e:	aa01      	add	r2, sp, #4
    6c10:	6a00      	ldr	r0, [r0, #32]
    6c12:	f000 fe29 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6c16:	2800      	cmp	r0, #0
    6c18:	db11      	blt.n	6c3e <ExFatFile::truncate()+0xe0>
      if (fg) {
    6c1a:	b918      	cbnz	r0, 6c24 <ExFatFile::truncate()+0xc6>
    if (toFree) {
    6c1c:	9d01      	ldr	r5, [sp, #4]
    6c1e:	2d00      	cmp	r5, #0
    6c20:	d0cb      	beq.n	6bba <ExFatFile::truncate()+0x5c>
    6c22:	e7eb      	b.n	6bfc <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c28:	69a1      	ldr	r1, [r4, #24]
    6c2a:	6a20      	ldr	r0, [r4, #32]
    6c2c:	f000 fe7b 	bl	7926 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6c30:	2800      	cmp	r0, #0
    6c32:	d1f3      	bne.n	6c1c <ExFatFile::truncate()+0xbe>
    6c34:	e7d0      	b.n	6bd8 <ExFatFile::truncate()+0x7a>
  return false;
    6c36:	2000      	movs	r0, #0
}
    6c38:	4770      	bx	lr
      return true;
    6c3a:	2001      	movs	r0, #1
    6c3c:	e7cc      	b.n	6bd8 <ExFatFile::truncate()+0x7a>
  return false;
    6c3e:	2000      	movs	r0, #0
    6c40:	e7ca      	b.n	6bd8 <ExFatFile::truncate()+0x7a>
	...

00006c44 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c48:	b083      	sub	sp, #12
    6c4a:	4604      	mov	r4, r0
    6c4c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6c50:	f013 0f02 	tst.w	r3, #2
    6c54:	d014      	beq.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
    6c56:	4688      	mov	r8, r1
    6c58:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6c5a:	f013 0f08 	tst.w	r3, #8
    6c5e:	d109      	bne.n	6c74 <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    6c60:	f1bb 0f00 	cmp.w	fp, #0
    6c64:	f000 80ed 	beq.w	6e42 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6c68:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c6a:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6c6e:	f04f 0901 	mov.w	r9, #1
    6c72:	e085      	b.n	6d80 <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    6c74:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6c78:	f7ff f8bb 	bl	5df2 <ExFatFile::seekSet(unsigned long long)>
    6c7c:	2800      	cmp	r0, #0
    6c7e:	d1ef      	bne.n	6c60 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6c80:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6c84:	f043 0301 	orr.w	r3, r3, #1
    6c88:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6c8c:	2000      	movs	r0, #0
}
    6c8e:	b003      	add	sp, #12
    6c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c94:	4652      	mov	r2, sl
    6c96:	f000 fde7 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6c9a:	2800      	cmp	r0, #0
    6c9c:	dbf0      	blt.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    6c9e:	b938      	cbnz	r0, 6cb0 <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    6ca0:	4620      	mov	r0, r4
    6ca2:	f7ff fbb7 	bl	6414 <ExFatFile::addCluster()>
    6ca6:	b918      	cbnz	r0, 6cb0 <ExFatFile::write(void const*, unsigned int)+0x6c>
    6ca8:	e7ea      	b.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    6caa:	69e3      	ldr	r3, [r4, #28]
    6cac:	b323      	cbz	r3, 6cf8 <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    6cae:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    6cb0:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    6cb2:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6cb6:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    6cba:	69a1      	ldr	r1, [r4, #24]
    6cbc:	3902      	subs	r1, #2
    6cbe:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6cc0:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    6cc4:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6cc8:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6cca:	b916      	cbnz	r6, 6cd2 <ExFatFile::write(void const*, unsigned int)+0x8e>
    6ccc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    6cd0:	d21a      	bcs.n	6d08 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    6cd2:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    6cd6:	42bd      	cmp	r5, r7
    6cd8:	bf28      	it	cs
    6cda:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6cdc:	bb3e      	cbnz	r6, 6d2e <ExFatFile::write(void const*, unsigned int)+0xea>
    6cde:	6862      	ldr	r2, [r4, #4]
    6ce0:	9200      	str	r2, [sp, #0]
    6ce2:	6963      	ldr	r3, [r4, #20]
    6ce4:	9301      	str	r3, [sp, #4]
    6ce6:	6823      	ldr	r3, [r4, #0]
    6ce8:	6922      	ldr	r2, [r4, #16]
    6cea:	4293      	cmp	r3, r2
    6cec:	9a00      	ldr	r2, [sp, #0]
    6cee:	9b01      	ldr	r3, [sp, #4]
    6cf0:	419a      	sbcs	r2, r3
    6cf2:	d375      	bcc.n	6de0 <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6cf4:	2205      	movs	r2, #5
    6cf6:	e01b      	b.n	6d30 <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    6cf8:	4620      	mov	r0, r4
    6cfa:	f7ff fb8b 	bl	6414 <ExFatFile::addCluster()>
    6cfe:	2800      	cmp	r0, #0
    6d00:	d0be      	beq.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    6d02:	69a3      	ldr	r3, [r4, #24]
    6d04:	61e3      	str	r3, [r4, #28]
    6d06:	e7d3      	b.n	6cb0 <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6d08:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    6d0c:	d271      	bcs.n	6df2 <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    6d0e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    6d12:	4299      	cmp	r1, r3
    6d14:	f000 808d 	beq.w	6e32 <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    6d18:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6d1c:	6803      	ldr	r3, [r0, #0]
    6d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d20:	4642      	mov	r2, r8
    6d22:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6d24:	2800      	cmp	r0, #0
    6d26:	d0ab      	beq.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    6d28:	f44f 7500 	mov.w	r5, #512	; 0x200
    6d2c:	e010      	b.n	6d50 <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6d2e:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    6d30:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6d34:	f005 f963 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6d38:	2800      	cmp	r0, #0
    6d3a:	d0a1      	beq.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    6d3c:	462a      	mov	r2, r5
    6d3e:	4641      	mov	r1, r8
    6d40:	4430      	add	r0, r6
    6d42:	f006 fd09 	bl	d758 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d46:	6a20      	ldr	r0, [r4, #32]
    6d48:	442e      	add	r6, r5
    6d4a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6d4e:	d049      	beq.n	6de4 <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    6d50:	6823      	ldr	r3, [r4, #0]
    6d52:	6862      	ldr	r2, [r4, #4]
    6d54:	18eb      	adds	r3, r5, r3
    6d56:	f142 0200 	adc.w	r2, r2, #0
    6d5a:	6023      	str	r3, [r4, #0]
    6d5c:	6062      	str	r2, [r4, #4]
    src += n;
    6d5e:	44a8      	add	r8, r5
    toWrite -= n;
    6d60:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    6d62:	6920      	ldr	r0, [r4, #16]
    6d64:	6961      	ldr	r1, [r4, #20]
    6d66:	4298      	cmp	r0, r3
    6d68:	4191      	sbcs	r1, r2
    6d6a:	d207      	bcs.n	6d7c <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6d6c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    6d70:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6d74:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6d78:	6123      	str	r3, [r4, #16]
    6d7a:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    6d7c:	2f00      	cmp	r7, #0
    6d7e:	d060      	beq.n	6e42 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6d80:	6a20      	ldr	r0, [r4, #32]
    6d82:	6825      	ldr	r5, [r4, #0]
    6d84:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6d88:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6d8a:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6d8e:	2d00      	cmp	r5, #0
    6d90:	d18e      	bne.n	6cb0 <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    6d92:	69a1      	ldr	r1, [r4, #24]
    6d94:	2900      	cmp	r1, #0
    6d96:	d088      	beq.n	6caa <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    6d98:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6d9c:	f013 0f40 	tst.w	r3, #64	; 0x40
    6da0:	f43f af78 	beq.w	6c94 <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6da4:	68a3      	ldr	r3, [r4, #8]
    6da6:	68e2      	ldr	r2, [r4, #12]
    6da8:	3b01      	subs	r3, #1
    6daa:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6dae:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    6db2:	3009      	adds	r0, #9
    6db4:	b2c0      	uxtb	r0, r0
    6db6:	f1c0 0e20 	rsb	lr, r0, #32
    6dba:	f1a0 0c20 	sub.w	ip, r0, #32
    6dbe:	40c3      	lsrs	r3, r0
    6dc0:	fa02 fe0e 	lsl.w	lr, r2, lr
    6dc4:	ea43 030e 	orr.w	r3, r3, lr
    6dc8:	fa22 fc0c 	lsr.w	ip, r2, ip
    6dcc:	ea43 030c 	orr.w	r3, r3, ip
    6dd0:	69e2      	ldr	r2, [r4, #28]
    6dd2:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    6dd4:	4299      	cmp	r1, r3
    6dd6:	f4bf af63 	bcs.w	6ca0 <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    6dda:	3101      	adds	r1, #1
    6ddc:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    6dde:	e767      	b.n	6cb0 <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6de0:	464a      	mov	r2, r9
    6de2:	e7a5      	b.n	6d30 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    6de4:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6de8:	f005 f8e2 	bl	bfb0 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    6dec:	2800      	cmp	r0, #0
    6dee:	d1af      	bne.n	6d50 <ExFatFile::write(void const*, unsigned int)+0x10c>
    6df0:	e746      	b.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6df2:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6df6:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6dfa:	0a7a      	lsrs	r2, r7, #9
    6dfc:	4293      	cmp	r3, r2
    6dfe:	bf28      	it	cs
    6e00:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    6e02:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    6e04:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    6e08:	4291      	cmp	r1, r2
    6e0a:	d809      	bhi.n	6e20 <ExFatFile::write(void const*, unsigned int)+0x1dc>
    6e0c:	18ce      	adds	r6, r1, r3
    6e0e:	42b2      	cmp	r2, r6
    6e10:	d206      	bcs.n	6e20 <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    6e12:	2200      	movs	r2, #0
    6e14:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e1c:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6e20:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6e24:	6802      	ldr	r2, [r0, #0]
    6e26:	6a96      	ldr	r6, [r2, #40]	; 0x28
    6e28:	4642      	mov	r2, r8
    6e2a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6e2c:	2800      	cmp	r0, #0
    6e2e:	d18f      	bne.n	6d50 <ExFatFile::write(void const*, unsigned int)+0x10c>
    6e30:	e726      	b.n	6c80 <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    6e32:	2300      	movs	r3, #0
    6e34:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e3c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    6e40:	e76a      	b.n	6d18 <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    6e42:	6821      	ldr	r1, [r4, #0]
    6e44:	6862      	ldr	r2, [r4, #4]
    6e46:	68a0      	ldr	r0, [r4, #8]
    6e48:	68e3      	ldr	r3, [r4, #12]
    6e4a:	4288      	cmp	r0, r1
    6e4c:	4193      	sbcs	r3, r2
    6e4e:	d209      	bcs.n	6e64 <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    6e50:	60a1      	str	r1, [r4, #8]
    6e52:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6e54:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6e58:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6e5c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6e60:	4658      	mov	r0, fp
    6e62:	e714      	b.n	6c8e <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    6e64:	4b06      	ldr	r3, [pc, #24]	; (6e80 <ExFatFile::write(void const*, unsigned int)+0x23c>)
    6e66:	681b      	ldr	r3, [r3, #0]
    6e68:	b13b      	cbz	r3, 6e7a <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6e6a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6e72:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6e76:	4658      	mov	r0, fp
    6e78:	e709      	b.n	6c8e <ExFatFile::write(void const*, unsigned int)+0x4a>
    6e7a:	4658      	mov	r0, fp
    6e7c:	e707      	b.n	6c8e <ExFatFile::write(void const*, unsigned int)+0x4a>
    6e7e:	bf00      	nop
    6e80:	200050c4 	.word	0x200050c4

00006e84 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6e84:	b161      	cbz	r1, 6ea0 <Print::write(char const*)+0x1c>
    6e86:	b538      	push	{r3, r4, r5, lr}
    6e88:	4604      	mov	r4, r0
    6e8a:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    6e8c:	4608      	mov	r0, r1
    6e8e:	f00b fb57 	bl	12540 <strlen>
    6e92:	4602      	mov	r2, r0
    6e94:	6823      	ldr	r3, [r4, #0]
    6e96:	685b      	ldr	r3, [r3, #4]
    6e98:	4629      	mov	r1, r5
    6e9a:	4620      	mov	r0, r4
    6e9c:	4798      	blx	r3
    6e9e:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6ea0:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    6ea2:	4770      	bx	lr

00006ea4 <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    6ea4:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6ea6:	6883      	ldr	r3, [r0, #8]
    6ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6eac:	b173      	cbz	r3, 6ecc <ExFatFormatter::syncUpcase()+0x28>
    6eae:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    6eb0:	2000      	movs	r0, #0
    6eb2:	690a      	ldr	r2, [r1, #16]
    6eb4:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    6eb6:	3301      	adds	r3, #1
    6eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6ebc:	d3f9      	bcc.n	6eb2 <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6ebe:	68c8      	ldr	r0, [r1, #12]
    6ec0:	6803      	ldr	r3, [r0, #0]
    6ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ec4:	690a      	ldr	r2, [r1, #16]
    6ec6:	6809      	ldr	r1, [r1, #0]
    6ec8:	4798      	blx	r3
}
    6eca:	bd08      	pop	{r3, pc}
    return true;
    6ecc:	2001      	movs	r0, #1
    6ece:	e7fc      	b.n	6eca <ExFatFormatter::syncUpcase()+0x26>

00006ed0 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6ed0:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6ed2:	6882      	ldr	r2, [r0, #8]
    6ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    6ed8:	6900      	ldr	r0, [r0, #16]
    6eda:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    6edc:	6858      	ldr	r0, [r3, #4]
    6ede:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    6ee2:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    6ee4:	6899      	ldr	r1, [r3, #8]
    6ee6:	3101      	adds	r1, #1
    6ee8:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    6eea:	f240 11ff 	movw	r1, #511	; 0x1ff
    6eee:	428a      	cmp	r2, r1
    6ef0:	d001      	beq.n	6ef6 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    6ef2:	2001      	movs	r0, #1
}
    6ef4:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6ef6:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6ef8:	68d8      	ldr	r0, [r3, #12]
    6efa:	6802      	ldr	r2, [r0, #0]
    6efc:	6a54      	ldr	r4, [r2, #36]	; 0x24
    6efe:	6819      	ldr	r1, [r3, #0]
    6f00:	1c4a      	adds	r2, r1, #1
    6f02:	601a      	str	r2, [r3, #0]
    6f04:	691a      	ldr	r2, [r3, #16]
    6f06:	47a0      	blx	r4
}
    6f08:	bd10      	pop	{r4, pc}

00006f0a <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    6f0a:	b538      	push	{r3, r4, r5, lr}
    6f0c:	4605      	mov	r5, r0
    6f0e:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6f10:	b2c9      	uxtb	r1, r1
    6f12:	f7ff ffdd 	bl	6ed0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6f16:	b900      	cbnz	r0, 6f1a <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    6f18:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6f1a:	0a21      	lsrs	r1, r4, #8
    6f1c:	4628      	mov	r0, r5
    6f1e:	f7ff ffd7 	bl	6ed0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6f22:	e7f9      	b.n	6f18 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

00006f24 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    6f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f28:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    6f2a:	2500      	movs	r5, #0
    6f2c:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    6f2e:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    6f30:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6f32:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6f36:	e022      	b.n	6f7e <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    6f38:	1c6c      	adds	r4, r5, #1
    6f3a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6f3e:	d208      	bcs.n	6f52 <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6f40:	b2a0      	uxth	r0, r4
    6f42:	f005 f9b9 	bl	c2b8 <toUpcase(unsigned short)>
    6f46:	42a0      	cmp	r0, r4
    6f48:	d103      	bne.n	6f52 <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6f4a:	3401      	adds	r4, #1
    6f4c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6f50:	d1f6      	bne.n	6f40 <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    6f52:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    6f56:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6f5a:	d31d      	bcc.n	6f98 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6f5c:	4639      	mov	r1, r7
    6f5e:	4630      	mov	r0, r6
    6f60:	f7ff ffd3 	bl	6f0a <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6f64:	4603      	mov	r3, r0
    6f66:	b308      	cbz	r0, 6fac <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6f68:	fa1f f188 	uxth.w	r1, r8
    6f6c:	4630      	mov	r0, r6
    6f6e:	f7ff ffcc 	bl	6f0a <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6f72:	4603      	mov	r3, r0
    6f74:	b1d0      	cbz	r0, 6fac <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6f76:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6f78:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6f7c:	d219      	bcs.n	6fb2 <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    6f7e:	b2a8      	uxth	r0, r5
    6f80:	f005 f99a 	bl	c2b8 <toUpcase(unsigned short)>
    6f84:	4601      	mov	r1, r0
    if (uc != ch) {
    6f86:	42a8      	cmp	r0, r5
    6f88:	d0d6      	beq.n	6f38 <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    6f8a:	4630      	mov	r0, r6
    6f8c:	f7ff ffbd 	bl	6f0a <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6f90:	4603      	mov	r3, r0
    6f92:	b158      	cbz	r0, 6fac <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    6f94:	3501      	adds	r5, #1
    6f96:	e7ef      	b.n	6f78 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    6f98:	42a5      	cmp	r5, r4
    6f9a:	d2ed      	bcs.n	6f78 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    6f9c:	b2a9      	uxth	r1, r5
    6f9e:	4630      	mov	r0, r6
    6fa0:	f7ff ffb3 	bl	6f0a <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6fa4:	3501      	adds	r5, #1
    6fa6:	4603      	mov	r3, r0
    6fa8:	2800      	cmp	r0, #0
    6faa:	d1f5      	bne.n	6f98 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    6fac:	4618      	mov	r0, r3
    6fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    6fb2:	4630      	mov	r0, r6
    6fb4:	f7ff ff76 	bl	6ea4 <ExFatFormatter::syncUpcase()>
    6fb8:	4603      	mov	r3, r0
    6fba:	e7f7      	b.n	6fac <ExFatFormatter::writeUpcase(unsigned long)+0x88>

00006fbc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fc0:	b08b      	sub	sp, #44	; 0x2c
    6fc2:	9002      	str	r0, [sp, #8]
    6fc4:	460e      	mov	r6, r1
    6fc6:	4614      	mov	r4, r2
    6fc8:	4699      	mov	r9, r3
  m_dev = dev;
    6fca:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    6fcc:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    6fce:	680b      	ldr	r3, [r1, #0]
    6fd0:	69db      	ldr	r3, [r3, #28]
    6fd2:	4608      	mov	r0, r1
    6fd4:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    6fd6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    6fda:	d369      	bcc.n	70b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    6fdc:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    6fde:	2300      	movs	r3, #0
    6fe0:	2201      	movs	r2, #1
    6fe2:	3301      	adds	r3, #1
    6fe4:	b2db      	uxtb	r3, r3
    6fe6:	0052      	lsls	r2, r2, #1
    6fe8:	bf14      	ite	ne
    6fea:	2501      	movne	r5, #1
    6fec:	2500      	moveq	r5, #0
    6fee:	4297      	cmp	r7, r2
    6ff0:	bf94      	ite	ls
    6ff2:	2500      	movls	r5, #0
    6ff4:	f005 0501 	andhi.w	r5, r5, #1
    6ff8:	2d00      	cmp	r5, #0
    6ffa:	d1f2      	bne.n	6fe2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6ffc:	2b1c      	cmp	r3, #28
    6ffe:	d963      	bls.n	70c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    7000:	f1b3 0b0b 	subs.w	fp, r3, #11
    7004:	bf48      	it	mi
    7006:	f10b 0b01 	addmi.w	fp, fp, #1
    700a:	ea4f 016b 	mov.w	r1, fp, asr #1
    700e:	9101      	str	r1, [sp, #4]
    7010:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    7014:	2201      	movs	r2, #1
    7016:	408a      	lsls	r2, r1
    7018:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    701a:	3301      	adds	r3, #1
    701c:	105b      	asrs	r3, r3, #1
    701e:	f04f 0a01 	mov.w	sl, #1
    7022:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    7026:	ea4f 034a 	mov.w	r3, sl, lsl #1
    702a:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    702c:	ea4f 028a 	mov.w	r2, sl, lsl #2
    7030:	9205      	str	r2, [sp, #20]
    7032:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    7036:	9901      	ldr	r1, [sp, #4]
    7038:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    703c:	9203      	str	r2, [sp, #12]
    703e:	fa02 f801 	lsl.w	r8, r2, r1
    7042:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7046:	f44f 7200 	mov.w	r2, #512	; 0x200
    704a:	2100      	movs	r1, #0
    704c:	4620      	mov	r0, r4
    704e:	f00a fc4d 	bl	118ec <memset>
  mbr->part->beginCHS[0] = 1;
    7052:	2301      	movs	r3, #1
    7054:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    7058:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    705c:	2307      	movs	r3, #7
    705e:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    7062:	23fe      	movs	r3, #254	; 0xfe
    7064:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    7068:	23ff      	movs	r3, #255	; 0xff
    706a:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    706e:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    7072:	9b00      	ldr	r3, [sp, #0]
    7074:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    7078:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    707c:	f64a 2355 	movw	r3, #43605	; 0xaa55
    7080:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    7084:	6833      	ldr	r3, [r6, #0]
    7086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7088:	4622      	mov	r2, r4
    708a:	2100      	movs	r1, #0
    708c:	4630      	mov	r0, r6
    708e:	4798      	blx	r3
    7090:	bb70      	cbnz	r0, 70f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    7092:	f1b9 0f00 	cmp.w	r9, #0
    7096:	d007      	beq.n	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    7098:	f8d9 3000 	ldr.w	r3, [r9]
    709c:	685b      	ldr	r3, [r3, #4]
    709e:	220f      	movs	r2, #15
    70a0:	49af      	ldr	r1, [pc, #700]	; (7360 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    70a2:	4648      	mov	r0, r9
    70a4:	4798      	blx	r3
  return false;
    70a6:	2500      	movs	r5, #0
}
    70a8:	4628      	mov	r0, r5
    70aa:	b00b      	add	sp, #44	; 0x2c
    70ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    70b0:	f1b9 0f00 	cmp.w	r9, #0
    70b4:	f000 8207 	beq.w	74c6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    70b8:	f8d9 3000 	ldr.w	r3, [r9]
    70bc:	685b      	ldr	r3, [r3, #4]
    70be:	2215      	movs	r2, #21
    70c0:	49a8      	ldr	r1, [pc, #672]	; (7364 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    70c2:	4648      	mov	r0, r9
    70c4:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    70c6:	e7e7      	b.n	7098 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    70c8:	2b1a      	cmp	r3, #26
    70ca:	d809      	bhi.n	70e0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    70cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    70d0:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    70d2:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    70d6:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    70da:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    70de:	e7a2      	b.n	7026 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    70e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    70e4:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    70e6:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    70ea:	f8cd b004 	str.w	fp, [sp, #4]
    70ee:	e794      	b.n	701a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    70f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    70f4:	2100      	movs	r1, #0
    70f6:	4620      	mov	r0, r4
    70f8:	f00a fbf8 	bl	118ec <memset>
  pbs->jmpInstruction[0] = 0XEB;
    70fc:	23eb      	movs	r3, #235	; 0xeb
    70fe:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    7100:	2376      	movs	r3, #118	; 0x76
    7102:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    7104:	2390      	movs	r3, #144	; 0x90
    7106:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    7108:	2345      	movs	r3, #69	; 0x45
    710a:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    710c:	2358      	movs	r3, #88	; 0x58
    710e:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    7110:	2346      	movs	r3, #70	; 0x46
    7112:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    7114:	2341      	movs	r3, #65	; 0x41
    7116:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    7118:	2354      	movs	r3, #84	; 0x54
    711a:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    711c:	2320      	movs	r3, #32
    711e:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    7120:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    7122:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    7124:	9b00      	ldr	r3, [sp, #0]
    7126:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    7128:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    712c:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    7130:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    7134:	65a3      	str	r3, [r4, #88]	; 0x58
    7136:	9a03      	ldr	r2, [sp, #12]
    7138:	65e2      	str	r2, [r4, #92]	; 0x5c
    713a:	2304      	movs	r3, #4
    713c:	6623      	str	r3, [r4, #96]	; 0x60
    713e:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    7140:	f44f 7380 	mov.w	r3, #256	; 0x100
    7144:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    7148:	2309      	movs	r3, #9
    714a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    714e:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    7152:	2301      	movs	r3, #1
    7154:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    7158:	2380      	movs	r3, #128	; 0x80
    715a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    715e:	f104 0377 	add.w	r3, r4, #119	; 0x77
    7162:	9407      	str	r4, [sp, #28]
    7164:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    7168:	22f4      	movs	r2, #244	; 0xf4
    716a:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    716e:	428b      	cmp	r3, r1
    7170:	d1fb      	bne.n	716a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    7172:	f64a 2355 	movw	r3, #43605	; 0xaa55
    7176:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    717a:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    717c:	461f      	mov	r7, r3
    717e:	e003      	b.n	7188 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    7180:	3301      	adds	r3, #1
    7182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7186:	d009      	beq.n	719c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    7188:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    718c:	2a01      	cmp	r2, #1
    718e:	d9f7      	bls.n	7180 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    7190:	2b70      	cmp	r3, #112	; 0x70
    7192:	d0f5      	beq.n	7180 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    7194:	5ce2      	ldrb	r2, [r4, r3]
    7196:	eb02 0777 	add.w	r7, r2, r7, ror #1
    719a:	e7f1      	b.n	7180 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    719c:	6833      	ldr	r3, [r6, #0]
    719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71a0:	4622      	mov	r2, r4
    71a2:	f8dd 8000 	ldr.w	r8, [sp]
    71a6:	4641      	mov	r1, r8
    71a8:	4630      	mov	r0, r6
    71aa:	4798      	blx	r3
    71ac:	2800      	cmp	r0, #0
    71ae:	f43f af70 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    71b2:	6833      	ldr	r3, [r6, #0]
    71b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71b6:	4622      	mov	r2, r4
    71b8:	f8cd 8000 	str.w	r8, [sp]
    71bc:	4641      	mov	r1, r8
    71be:	310c      	adds	r1, #12
    71c0:	4630      	mov	r0, r6
    71c2:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    71c4:	2800      	cmp	r0, #0
    71c6:	f43f af64 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    71ca:	9900      	ldr	r1, [sp, #0]
    71cc:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    71d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    71d4:	2100      	movs	r1, #0
    71d6:	4620      	mov	r0, r4
    71d8:	f00a fb88 	bl	118ec <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    71dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
    71e0:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    71e4:	9900      	ldr	r1, [sp, #0]
    71e6:	f101 0309 	add.w	r3, r1, #9
    71ea:	1e62      	subs	r2, r4, #1
    71ec:	9206      	str	r2, [sp, #24]
    71ee:	9a07      	ldr	r2, [sp, #28]
    71f0:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    71f4:	9508      	str	r5, [sp, #32]
    71f6:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    71f8:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    71fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    71fe:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    7202:	4543      	cmp	r3, r8
    7204:	d1f9      	bne.n	71fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    7206:	6833      	ldr	r3, [r6, #0]
    7208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    720a:	4622      	mov	r2, r4
    720c:	4659      	mov	r1, fp
    720e:	4630      	mov	r0, r6
    7210:	4798      	blx	r3
    7212:	2800      	cmp	r0, #0
    7214:	f000 814f 	beq.w	74b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    7218:	6833      	ldr	r3, [r6, #0]
    721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    721c:	4622      	mov	r2, r4
    721e:	f10b 010c 	add.w	r1, fp, #12
    7222:	4630      	mov	r0, r6
    7224:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    7226:	2800      	cmp	r0, #0
    7228:	f000 8147 	beq.w	74ba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    722c:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    7230:	42ab      	cmp	r3, r5
    7232:	d001      	beq.n	7238 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    7234:	469b      	mov	fp, r3
    7236:	e7df      	b.n	71f8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7238:	9309      	str	r3, [sp, #36]	; 0x24
    723a:	9d08      	ldr	r5, [sp, #32]
    723c:	f44f 7200 	mov.w	r2, #512	; 0x200
    7240:	2100      	movs	r1, #0
    7242:	4620      	mov	r0, r4
    7244:	f00a fb52 	bl	118ec <memset>
  for (int j = 0; j < 2; j++) {
    7248:	f10b 0b03 	add.w	fp, fp, #3
    724c:	9508      	str	r5, [sp, #32]
    724e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    7250:	9b06      	ldr	r3, [sp, #24]
    7252:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7256:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    725a:	4598      	cmp	r8, r3
    725c:	d1f9      	bne.n	7252 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    725e:	6833      	ldr	r3, [r6, #0]
    7260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7262:	4622      	mov	r2, r4
    7264:	4629      	mov	r1, r5
    7266:	4630      	mov	r0, r6
    7268:	4798      	blx	r3
    726a:	2800      	cmp	r0, #0
    726c:	f000 8127 	beq.w	74be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    7270:	6833      	ldr	r3, [r6, #0]
    7272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7274:	4622      	mov	r2, r4
    7276:	f105 010c 	add.w	r1, r5, #12
    727a:	4630      	mov	r0, r6
    727c:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    727e:	2800      	cmp	r0, #0
    7280:	f000 811f 	beq.w	74c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    7284:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    7286:	458b      	cmp	fp, r1
    7288:	d001      	beq.n	728e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    728a:	460d      	mov	r5, r1
    728c:	e7e0      	b.n	7250 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    728e:	9509      	str	r5, [sp, #36]	; 0x24
    7290:	9d08      	ldr	r5, [sp, #32]
    7292:	1f23      	subs	r3, r4, #4
    7294:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7298:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    729c:	429a      	cmp	r2, r3
    729e:	d1fb      	bne.n	7298 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    72a0:	6833      	ldr	r3, [r6, #0]
    72a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72a4:	4622      	mov	r2, r4
    72a6:	4630      	mov	r0, r6
    72a8:	4798      	blx	r3
    72aa:	2800      	cmp	r0, #0
    72ac:	f43f aef1 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    72b0:	6833      	ldr	r3, [r6, #0]
    72b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72b4:	4622      	mov	r2, r4
    72b6:	9909      	ldr	r1, [sp, #36]	; 0x24
    72b8:	310d      	adds	r1, #13
    72ba:	4630      	mov	r0, r6
    72bc:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    72be:	2800      	cmp	r0, #0
    72c0:	f43f aee7 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    72c4:	f1b9 0f00 	cmp.w	r9, #0
    72c8:	d006      	beq.n	72d8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    72ca:	f8d9 3000 	ldr.w	r3, [r9]
    72ce:	685b      	ldr	r3, [r3, #4]
    72d0:	220c      	movs	r2, #12
    72d2:	4925      	ldr	r1, [pc, #148]	; (7368 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    72d4:	4648      	mov	r0, r9
    72d6:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    72d8:	9b00      	ldr	r3, [sp, #0]
    72da:	4453      	add	r3, sl
    72dc:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    72de:	9b03      	ldr	r3, [sp, #12]
    72e0:	ea4f 0883 	mov.w	r8, r3, lsl #2
    72e4:	f208 2807 	addw	r8, r8, #519	; 0x207
    72e8:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    72ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    72f0:	2100      	movs	r1, #0
    72f2:	4620      	mov	r0, r4
    72f4:	f00a fafa 	bl	118ec <memset>
  secBuf[0] = 0XF8;
    72f8:	4623      	mov	r3, r4
    72fa:	22f8      	movs	r2, #248	; 0xf8
    72fc:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    7300:	22ff      	movs	r2, #255	; 0xff
    7302:	9907      	ldr	r1, [sp, #28]
    7304:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    7308:	428b      	cmp	r3, r1
    730a:	d1fb      	bne.n	7304 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    730c:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    7310:	2700      	movs	r7, #0
    7312:	e00d      	b.n	7330 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    7314:	6833      	ldr	r3, [r6, #0]
    7316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7318:	4622      	mov	r2, r4
    731a:	eb0b 0107 	add.w	r1, fp, r7
    731e:	4630      	mov	r0, r6
    7320:	4798      	blx	r3
    7322:	2800      	cmp	r0, #0
    7324:	f43f aeb5 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    7328:	b19f      	cbz	r7, 7352 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    732a:	3701      	adds	r7, #1
    732c:	45ba      	cmp	sl, r7
    732e:	d91f      	bls.n	7370 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    7330:	fbb7 f3f8 	udiv	r3, r7, r8
    7334:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    7338:	2b00      	cmp	r3, #0
    733a:	d1eb      	bne.n	7314 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    733c:	f1b9 0f00 	cmp.w	r9, #0
    7340:	d0e8      	beq.n	7314 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    7342:	f8d9 3000 	ldr.w	r3, [r9]
    7346:	685b      	ldr	r3, [r3, #4]
    7348:	2201      	movs	r2, #1
    734a:	4908      	ldr	r1, [pc, #32]	; (736c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    734c:	4648      	mov	r0, r9
    734e:	4798      	blx	r3
    7350:	e7e0      	b.n	7314 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    7352:	f44f 7200 	mov.w	r2, #512	; 0x200
    7356:	2100      	movs	r1, #0
    7358:	4620      	mov	r0, r4
    735a:	f00a fac7 	bl	118ec <memset>
    735e:	e7e4      	b.n	732a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    7360:	20002030 	.word	0x20002030
    7364:	20001fd0 	.word	0x20001fd0
    7368:	20001fe8 	.word	0x20001fe8
    736c:	20003124 	.word	0x20003124
  writeMsg(pr, "\r\n");
    7370:	f1b9 0f00 	cmp.w	r9, #0
    7374:	f000 80ad 	beq.w	74d2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    7378:	f8d9 3000 	ldr.w	r3, [r9]
    737c:	685b      	ldr	r3, [r3, #4]
    737e:	2202      	movs	r2, #2
    7380:	4969      	ldr	r1, [pc, #420]	; (7528 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    7382:	4648      	mov	r0, r9
    7384:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    7386:	9f03      	ldr	r7, [sp, #12]
    7388:	3707      	adds	r7, #7
    738a:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    738c:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    7390:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    7394:	9b04      	ldr	r3, [sp, #16]
    7396:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    739a:	f4ff ae7d 	bcc.w	7098 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    739e:	f44f 7200 	mov.w	r2, #512	; 0x200
    73a2:	2100      	movs	r1, #0
    73a4:	4620      	mov	r0, r4
    73a6:	f00a faa1 	bl	118ec <memset>
  secBuf[0] = 0X7;
    73aa:	2307      	movs	r3, #7
    73ac:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    73ae:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    73b2:	d31b      	bcc.n	73ec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    73b4:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    73b8:	46c3      	mov	fp, r8
    73ba:	e005      	b.n	73c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    73bc:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    73c0:	f108 0801 	add.w	r8, r8, #1
    73c4:	45c2      	cmp	sl, r8
    73c6:	d00d      	beq.n	73e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    73c8:	6833      	ldr	r3, [r6, #0]
    73ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    73cc:	4622      	mov	r2, r4
    73ce:	9905      	ldr	r1, [sp, #20]
    73d0:	4441      	add	r1, r8
    73d2:	4630      	mov	r0, r6
    73d4:	4798      	blx	r3
    73d6:	2800      	cmp	r0, #0
    73d8:	f43f ae5b 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    73dc:	f1b8 0f00 	cmp.w	r8, #0
    73e0:	d1ee      	bne.n	73c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
    73e2:	e7eb      	b.n	73bc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
    73e4:	f1b9 0f00 	cmp.w	r9, #0
    73e8:	f000 808b 	beq.w	7502 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
    73ec:	f8d9 3000 	ldr.w	r3, [r9]
    73f0:	685b      	ldr	r3, [r3, #4]
    73f2:	2216      	movs	r2, #22
    73f4:	494d      	ldr	r1, [pc, #308]	; (752c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
    73f6:	4648      	mov	r0, r9
    73f8:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    73fa:	9b05      	ldr	r3, [sp, #20]
    73fc:	9a04      	ldr	r2, [sp, #16]
    73fe:	1899      	adds	r1, r3, r2
    7400:	9802      	ldr	r0, [sp, #8]
    7402:	f7ff fd8f 	bl	6f24 <ExFatFormatter::writeUpcase(unsigned long)>
    7406:	2800      	cmp	r0, #0
    7408:	f43f ae46 	beq.w	7098 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    740c:	f44f 7300 	mov.w	r3, #512	; 0x200
    7410:	9a01      	ldr	r2, [sp, #4]
    7412:	4093      	lsls	r3, r2
    7414:	9a02      	ldr	r2, [sp, #8]
    7416:	6892      	ldr	r2, [r2, #8]
    7418:	429a      	cmp	r2, r3
    741a:	f63f ae3d 	bhi.w	7098 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
    741e:	f1b9 0f00 	cmp.w	r9, #0
    7422:	d003      	beq.n	742c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    7424:	4942      	ldr	r1, [pc, #264]	; (7530 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
    7426:	4648      	mov	r0, r9
    7428:	f7ff fd2c 	bl	6e84 <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    742c:	f04f 0a02 	mov.w	sl, #2
    7430:	9b01      	ldr	r3, [sp, #4]
    7432:	fa0a f803 	lsl.w	r8, sl, r3
    7436:	9b05      	ldr	r3, [sp, #20]
    7438:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    743a:	f44f 7200 	mov.w	r2, #512	; 0x200
    743e:	2100      	movs	r1, #0
    7440:	4620      	mov	r0, r4
    7442:	f00a fa53 	bl	118ec <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    7446:	2203      	movs	r2, #3
    7448:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    744a:	2381      	movs	r3, #129	; 0x81
    744c:	f884 3020 	strb.w	r3, [r4, #32]
    7450:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
    7454:	2300      	movs	r3, #0
    7456:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
    7458:	2182      	movs	r1, #130	; 0x82
    745a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    745e:	9802      	ldr	r0, [sp, #8]
    7460:	6841      	ldr	r1, [r0, #4]
    7462:	6461      	str	r1, [r4, #68]	; 0x44
    7464:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    7466:	6882      	ldr	r2, [r0, #8]
    7468:	65a2      	str	r2, [r4, #88]	; 0x58
    746a:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    746c:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
    746e:	f44f 7a00 	mov.w	sl, #512	; 0x200
    7472:	469b      	mov	fp, r3
    7474:	e005      	b.n	7482 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
    7476:	4652      	mov	r2, sl
    7478:	4659      	mov	r1, fp
    747a:	4620      	mov	r0, r4
    747c:	f00a fa36 	bl	118ec <memset>
  for (uint32_t i = 0; i < ns; i++) {
    7480:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    7482:	6833      	ldr	r3, [r6, #0]
    7484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7486:	4622      	mov	r2, r4
    7488:	eb08 0107 	add.w	r1, r8, r7
    748c:	4630      	mov	r0, r6
    748e:	4798      	blx	r3
    7490:	9000      	str	r0, [sp, #0]
    7492:	2800      	cmp	r0, #0
    7494:	f43f adfd 	beq.w	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    7498:	2f00      	cmp	r7, #0
    749a:	d0ec      	beq.n	7476 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    749c:	3701      	adds	r7, #1
    749e:	9b04      	ldr	r3, [sp, #16]
    74a0:	42bb      	cmp	r3, r7
    74a2:	d1ee      	bne.n	7482 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
    74a4:	f1b9 0f00 	cmp.w	r9, #0
    74a8:	d00f      	beq.n	74ca <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    74aa:	4922      	ldr	r1, [pc, #136]	; (7534 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
    74ac:	4648      	mov	r0, r9
    74ae:	f7ff fce9 	bl	6e84 <Print::write(char const*)>
  return true;
    74b2:	9d00      	ldr	r5, [sp, #0]
    74b4:	e5f8      	b.n	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    74b6:	9d08      	ldr	r5, [sp, #32]
    74b8:	e5eb      	b.n	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    74ba:	9d08      	ldr	r5, [sp, #32]
    74bc:	e5e9      	b.n	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    74be:	9d08      	ldr	r5, [sp, #32]
    74c0:	e5e7      	b.n	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    74c2:	9d08      	ldr	r5, [sp, #32]
    74c4:	e5e5      	b.n	7092 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
    74c6:	2500      	movs	r5, #0
    74c8:	e5ee      	b.n	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
    74ca:	9d00      	ldr	r5, [sp, #0]
    74cc:	e5ec      	b.n	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
    74ce:	4605      	mov	r5, r0
    74d0:	e5ea      	b.n	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
    74d2:	9f03      	ldr	r7, [sp, #12]
    74d4:	3707      	adds	r7, #7
    74d6:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    74d8:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    74dc:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    74e0:	9b04      	ldr	r3, [sp, #16]
    74e2:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    74e6:	f4ff addf 	bcc.w	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    74ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    74ee:	2100      	movs	r1, #0
    74f0:	4620      	mov	r0, r4
    74f2:	f00a f9fb 	bl	118ec <memset>
  secBuf[0] = 0X7;
    74f6:	2307      	movs	r3, #7
    74f8:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    74fa:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    74fe:	f4bf af59 	bcs.w	73b4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    7502:	9b05      	ldr	r3, [sp, #20]
    7504:	9a04      	ldr	r2, [sp, #16]
    7506:	1899      	adds	r1, r3, r2
    7508:	9802      	ldr	r0, [sp, #8]
    750a:	f7ff fd0b 	bl	6f24 <ExFatFormatter::writeUpcase(unsigned long)>
    750e:	2800      	cmp	r0, #0
    7510:	d0dd      	beq.n	74ce <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    7512:	f44f 7300 	mov.w	r3, #512	; 0x200
    7516:	9a01      	ldr	r2, [sp, #4]
    7518:	4093      	lsls	r3, r2
    751a:	9a02      	ldr	r2, [sp, #8]
    751c:	6892      	ldr	r2, [r2, #8]
    751e:	429a      	cmp	r2, r3
    7520:	f67f af7d 	bls.w	741e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
    7524:	e5c0      	b.n	70a8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    7526:	bf00      	nop
    7528:	2000200c 	.word	0x2000200c
    752c:	20001ff8 	.word	0x20001ff8
    7530:	20002010 	.word	0x20002010
    7534:	20002020 	.word	0x20002020

00007538 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    7538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    753c:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
    753e:	460e      	mov	r6, r1
    7540:	f101 081e 	add.w	r8, r1, #30
    7544:	e00c      	b.n	7560 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    7546:	4620      	mov	r0, r4
    7548:	f004 fd98 	bl	c07c <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    754c:	f004 feb4 	bl	c2b8 <toUpcase(unsigned short)>
    7550:	4605      	mov	r5, r0
    7552:	4638      	mov	r0, r7
    7554:	f004 feb0 	bl	c2b8 <toUpcase(unsigned short)>
    7558:	4285      	cmp	r5, r0
    755a:	d111      	bne.n	7580 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
    755c:	4546      	cmp	r6, r8
    755e:	d00d      	beq.n	757c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
    7560:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
    7564:	89a3      	ldrh	r3, [r4, #12]
    7566:	2b00      	cmp	r3, #0
    7568:	d1ed      	bne.n	7546 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
    756a:	6862      	ldr	r2, [r4, #4]
    756c:	68a3      	ldr	r3, [r4, #8]
    756e:	429a      	cmp	r2, r3
    7570:	d1e9      	bne.n	7546 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
    7572:	fab7 f087 	clz	r0, r7
    7576:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    7578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    757c:	2001      	movs	r0, #1
    757e:	e7fb      	b.n	7578 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
    7580:	2000      	movs	r0, #0
    7582:	e7f9      	b.n	7578 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

00007584 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    7584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7588:	b083      	sub	sp, #12
    758a:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    758c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7590:	2b00      	cmp	r3, #0
    7592:	d03e      	beq.n	7612 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    7594:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7596:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    759a:	2b01      	cmp	r3, #1
    759c:	d94b      	bls.n	7636 <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
    759e:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    75a0:	2302      	movs	r3, #2
    75a2:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
    75a4:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    75a6:	3a01      	subs	r2, #1
    75a8:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    75aa:	f8df b098 	ldr.w	fp, [pc, #152]	; 7644 <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    75ae:	2200      	movs	r2, #0
    75b0:	9901      	ldr	r1, [sp, #4]
    75b2:	4648      	mov	r0, r9
    75b4:	f7fe fa8a 	bl	5acc <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    75b8:	b358      	cbz	r0, 7612 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    75ba:	7803      	ldrb	r3, [r0, #0]
    75bc:	2bc1      	cmp	r3, #193	; 0xc1
    75be:	d128      	bne.n	7612 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
    75c0:	4605      	mov	r5, r0
    75c2:	f100 081e 	add.w	r8, r0, #30
    75c6:	e00f      	b.n	75e8 <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
    75c8:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    75cc:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    75ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    75d2:	d31b      	bcc.n	760c <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
    75d4:	b380      	cbz	r0, 7638 <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    75d6:	463a      	mov	r2, r7
    75d8:	4631      	mov	r1, r6
    75da:	f004 fdca 	bl	c172 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    75de:	4606      	mov	r6, r0
    75e0:	b1b8      	cbz	r0, 7612 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    75e2:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    75e4:	45a8      	cmp	r8, r5
    75e6:	d01c      	beq.n	7622 <ExFatFile::getName8(char*, unsigned int)+0x9e>
    75e8:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    75ec:	2c00      	cmp	r4, #0
    75ee:	d0eb      	beq.n	75c8 <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
    75f0:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    75f4:	b29b      	uxth	r3, r3
    75f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    75fa:	d20a      	bcs.n	7612 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    75fc:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    7600:	f3c0 0009 	ubfx	r0, r0, #0, #10
    7604:	4304      	orrs	r4, r0
    7606:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
    760a:	e7e4      	b.n	75d6 <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
    760c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    7610:	d305      	bcc.n	761e <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    7612:	2000      	movs	r0, #0
    7614:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
    7618:	b003      	add	sp, #12
    761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    761e:	4604      	mov	r4, r0
    7620:	e7e0      	b.n	75e4 <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7622:	9b01      	ldr	r3, [sp, #4]
    7624:	3301      	adds	r3, #1
    7626:	b2db      	uxtb	r3, r3
    7628:	461a      	mov	r2, r3
    762a:	9301      	str	r3, [sp, #4]
    762c:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    7630:	4293      	cmp	r3, r2
    7632:	d2bc      	bcs.n	75ae <ExFatFile::getName8(char*, unsigned int)+0x2a>
    7634:	e000      	b.n	7638 <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
    7636:	460e      	mov	r6, r1
  *str = '\0';
    7638:	2300      	movs	r3, #0
    763a:	7033      	strb	r3, [r6, #0]
  return str - name;
    763c:	eba6 000a 	sub.w	r0, r6, sl
    7640:	e7ea      	b.n	7618 <ExFatFile::getName8(char*, unsigned int)+0x94>
    7642:	bf00      	nop
    7644:	000ffc00 	.word	0x000ffc00

00007648 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    7648:	b570      	push	{r4, r5, r6, lr}
    764a:	460c      	mov	r4, r1
    next = begin;
    764c:	680b      	ldr	r3, [r1, #0]
    764e:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    7650:	2600      	movs	r6, #0
    7652:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    7654:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    7656:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
    765a:	e016      	b.n	768a <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
    765c:	4620      	mov	r0, r4
    765e:	f004 fd0d 	bl	c07c <FsName::get16()>
    if (u == 0XFFFF) {
    7662:	42a8      	cmp	r0, r5
    7664:	d020      	beq.n	76a8 <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
    7666:	f004 fe27 	bl	c2b8 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    766a:	03f3      	lsls	r3, r6, #15
    766c:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
    7670:	fa53 f380 	uxtab	r3, r3, r0
    7674:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    7676:	f3c3 034e 	ubfx	r3, r3, #1, #15
    767a:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    767e:	0a00      	lsrs	r0, r0, #8
    7680:	fa10 f383 	uxtah	r3, r0, r3
    7684:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    7686:	6920      	ldr	r0, [r4, #16]
    7688:	3001      	adds	r0, #1
  fname->nameLength = 0;
    768a:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
    768c:	89a3      	ldrh	r3, [r4, #12]
    768e:	2b00      	cmp	r3, #0
    7690:	d1e4      	bne.n	765c <ExFatFile::hashName(ExName_t*)+0x14>
    7692:	6862      	ldr	r2, [r4, #4]
    7694:	68a3      	ldr	r3, [r4, #8]
    7696:	429a      	cmp	r2, r3
    7698:	d1e0      	bne.n	765c <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    769a:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    769c:	3801      	subs	r0, #1
    769e:	28fe      	cmp	r0, #254	; 0xfe
    76a0:	bf8c      	ite	hi
    76a2:	2000      	movhi	r0, #0
    76a4:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    76a6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    76a8:	2000      	movs	r0, #0
    76aa:	e7fc      	b.n	76a6 <ExFatFile::hashName(ExName_t*)+0x5e>

000076ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    76ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76b0:	b083      	sub	sp, #12
    76b2:	4607      	mov	r7, r0
    76b4:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    76b6:	9101      	str	r1, [sp, #4]
    76b8:	b1e9      	cbz	r1, 76f6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    76ba:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
    76bc:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
    76c0:	42b3      	cmp	r3, r6
    76c2:	bf98      	it	ls
    76c4:	2600      	movls	r6, #0
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    76c6:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    76ca:	f006 0307 	and.w	r3, r6, #7
    76ce:	2401      	movs	r4, #1
    76d0:	409c      	lsls	r4, r3
    76d2:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
    76d4:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
    76d6:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
    76d8:	f04f 0b00 	mov.w	fp, #0
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    76dc:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    76e0:	465a      	mov	r2, fp
    76e2:	eb01 3115 	add.w	r1, r1, r5, lsr #12
    76e6:	4638      	mov	r0, r7
    76e8:	f004 fc89 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    76ec:	b388      	cbz	r0, 7752 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
    76ee:	4482      	add	sl, r0
    76f0:	f500 7100 	add.w	r1, r0, #512	; 0x200
    76f4:	e023      	b.n	773e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    76f6:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
    76fa:	e7df      	b.n	76bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    76fc:	46a8      	mov	r8, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    76fe:	42ae      	cmp	r6, r5
    7700:	d029      	beq.n	7756 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    7702:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    7706:	42ab      	cmp	r3, r5
    7708:	d91e      	bls.n	7748 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
    770a:	0064      	lsls	r4, r4, #1
    770c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7710:	d010      	beq.n	7734 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
    7712:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
    7714:	4222      	tst	r2, r4
    7716:	d1f1      	bne.n	76fc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
    7718:	eba5 0308 	sub.w	r3, r5, r8
    771c:	454b      	cmp	r3, r9
    771e:	d1ee      	bne.n	76fe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
    7720:	9b01      	ldr	r3, [sp, #4]
    7722:	b923      	cbnz	r3, 772e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    7724:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    7728:	bf08      	it	eq
    772a:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    772e:	f108 0002 	add.w	r0, r8, #2
    7732:	e011      	b.n	7758 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
    7734:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    7738:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
    773a:	4551      	cmp	r1, sl
    773c:	d007      	beq.n	774e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
    773e:	2c00      	cmp	r4, #0
    7740:	d0f8      	beq.n	7734 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
    7742:	f89a 2000 	ldrb.w	r2, [sl]
    7746:	e7e4      	b.n	7712 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
    7748:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
    774a:	46d8      	mov	r8, fp
    774c:	465d      	mov	r5, fp
    }
    i = 0;
    774e:	46da      	mov	sl, fp
    7750:	e7c4      	b.n	76dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
    7752:	2000      	movs	r0, #0
    7754:	e000      	b.n	7758 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
    7756:	2001      	movs	r0, #1
  }
  return 0;
}
    7758:	b003      	add	sp, #12
    775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000775e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    775e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7762:	4615      	mov	r5, r2
    7764:	461e      	mov	r6, r3
  uint32_t sector;
  uint32_t start = cluster - 2;
    7766:	3902      	subs	r1, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7768:	188b      	adds	r3, r1, r2
    776a:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    776e:	4293      	cmp	r3, r2
    7770:	d854      	bhi.n	781c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
    7772:	4607      	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    7774:	b15e      	cbz	r6, 778e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    7776:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    777a:	4283      	cmp	r3, r0
    777c:	d90d      	bls.n	779a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    777e:	4288      	cmp	r0, r1
    7780:	d30b      	bcc.n	779a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    7782:	4293      	cmp	r3, r2
    7784:	bf28      	it	cs
    7786:	2300      	movcs	r3, #0
    7788:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    778c:	e005      	b.n	779a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    778e:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    7792:	428b      	cmp	r3, r1
      m_bitmapStart = start;
    7794:	bf88      	it	hi
    7796:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    779a:	f001 0307 	and.w	r3, r1, #7
    779e:	2401      	movs	r4, #1
    77a0:	409c      	lsls	r4, r3
    77a2:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
    77a4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    77a8:	eb03 3811 	add.w	r8, r3, r1, lsr #12
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    77ac:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
    77b0:	f04f 0901 	mov.w	r9, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    77b4:	f04f 0a00 	mov.w	sl, #0
    77b8:	464a      	mov	r2, r9
    77ba:	4641      	mov	r1, r8
    77bc:	4638      	mov	r0, r7
    77be:	f004 fc1e 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    77c2:	4684      	mov	ip, r0
    77c4:	b368      	cbz	r0, 7822 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
    77c6:	4458      	add	r0, fp
    77c8:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
    77cc:	b1e4      	cbz	r4, 7808 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    77ce:	4603      	mov	r3, r0
    77d0:	7802      	ldrb	r2, [r0, #0]
    77d2:	4222      	tst	r2, r4
    77d4:	bf14      	ite	ne
    77d6:	2101      	movne	r1, #1
    77d8:	2100      	moveq	r1, #0
    77da:	42b1      	cmp	r1, r6
    77dc:	d025      	beq.n	782a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
    77de:	4062      	eors	r2, r4
    77e0:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
    77e2:	3d01      	subs	r5, #1
    77e4:	d018      	beq.n	7818 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
    77e6:	0064      	lsls	r4, r4, #1
    77e8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    77ec:	d00c      	beq.n	7808 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    77ee:	7819      	ldrb	r1, [r3, #0]
    77f0:	4221      	tst	r1, r4
    77f2:	bf14      	ite	ne
    77f4:	2201      	movne	r2, #1
    77f6:	2200      	moveq	r2, #0
    77f8:	42b2      	cmp	r2, r6
    77fa:	d014      	beq.n	7826 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
    77fc:	4061      	eors	r1, r4
    77fe:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
    7800:	3d01      	subs	r5, #1
    7802:	d1f0      	bne.n	77e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
    7804:	2001      	movs	r0, #1
    7806:	e00a      	b.n	781e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
    7808:	3001      	adds	r0, #1
      mask = 1;
    780a:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
    780c:	4560      	cmp	r0, ip
    780e:	d1dd      	bne.n	77cc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    7810:	f108 0801 	add.w	r8, r8, #1
    i = 0;
    7814:	46d3      	mov	fp, sl
    7816:	e7cf      	b.n	77b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
    7818:	2001      	movs	r0, #1
    781a:	e000      	b.n	781e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  }

 fail:
  return false;
    781c:	2000      	movs	r0, #0
}
    781e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    7822:	2000      	movs	r0, #0
    7824:	e7fb      	b.n	781e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    7826:	2000      	movs	r0, #0
    7828:	e7f9      	b.n	781e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    782a:	2000      	movs	r0, #0
    782c:	e7f7      	b.n	781e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

0000782e <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    782e:	b510      	push	{r4, lr}
    7830:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    7832:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7836:	6849      	ldr	r1, [r1, #4]
    7838:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
    783a:	6823      	ldr	r3, [r4, #0]
    783c:	3b02      	subs	r3, #2
    783e:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    7842:	fa03 f30c 	lsl.w	r3, r3, ip
    7846:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    784a:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
    784e:	4419      	add	r1, r3
    7850:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7854:	f004 fbd3 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    7858:	4603      	mov	r3, r0
    785a:	b118      	cbz	r0, 7864 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
    785c:	6862      	ldr	r2, [r4, #4]
    785e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    7862:	4413      	add	r3, r2
}
    7864:	4618      	mov	r0, r3
    7866:	bd10      	pop	{r4, pc}

00007868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7868:	b538      	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    786a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    786e:	3301      	adds	r3, #1
    7870:	428b      	cmp	r3, r1
    7872:	d202      	bcs.n	787a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    DBG_FAIL_MACRO;
    return -1;
    7874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    7878:	bd38      	pop	{r3, r4, r5, pc}
    787a:	460c      	mov	r4, r1
    787c:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    787e:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    7882:	2200      	movs	r2, #0
    7884:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7888:	f500 7004 	add.w	r0, r0, #528	; 0x210
    788c:	f004 fbb7 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    7890:	b148      	cbz	r0, 78a6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    7892:	00a4      	lsls	r4, r4, #2
    7894:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    7898:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    789a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    789e:	d005      	beq.n	78ac <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
    78a0:	602b      	str	r3, [r5, #0]
  return 1;
    78a2:	2001      	movs	r0, #1
    78a4:	e7e8      	b.n	7878 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
    78a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    78aa:	e7e5      	b.n	7878 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
    78ac:	2000      	movs	r0, #0
    78ae:	e7e3      	b.n	7878 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

000078b0 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    78b0:	b530      	push	{r4, r5, lr}
    78b2:	b083      	sub	sp, #12
    78b4:	4605      	mov	r5, r0
    78b6:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
    78b8:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
    78ba:	aa01      	add	r2, sp, #4
    78bc:	9901      	ldr	r1, [sp, #4]
    78be:	4628      	mov	r0, r5
    78c0:	f7ff ffd2 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    78c4:	2800      	cmp	r0, #0
    78c6:	db03      	blt.n	78d0 <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
    78c8:	3401      	adds	r4, #1
  } while (status);
    78ca:	2800      	cmp	r0, #0
    78cc:	d1f5      	bne.n	78ba <ExFatPartition::chainSize(unsigned long)+0xa>
    78ce:	e000      	b.n	78d2 <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
    78d0:	2400      	movs	r4, #0
}
    78d2:	4620      	mov	r0, r4
    78d4:	b003      	add	sp, #12
    78d6:	bd30      	pop	{r4, r5, pc}

000078d8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    78d8:	b570      	push	{r4, r5, r6, lr}
    78da:	4606      	mov	r6, r0
    78dc:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    78de:	6849      	ldr	r1, [r1, #4]
    78e0:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    78e4:	400b      	ands	r3, r1
    78e6:	4413      	add	r3, r2
  pos->position += offset;
    78e8:	4411      	add	r1, r2
    78ea:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    78ec:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    78f0:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
    78f2:	b2d2      	uxtb	r2, r2
    78f4:	40d3      	lsrs	r3, r2
  while (tmp--) {
    78f6:	1e5d      	subs	r5, r3, #1
    78f8:	b963      	cbnz	r3, 7914 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
    78fa:	2001      	movs	r0, #1
    78fc:	e012      	b.n	7924 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
    78fe:	4622      	mov	r2, r4
    7900:	6821      	ldr	r1, [r4, #0]
    7902:	4630      	mov	r0, r6
    7904:	f7ff ffb0 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    7908:	2801      	cmp	r0, #1
    790a:	d10b      	bne.n	7924 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
    790c:	3d01      	subs	r5, #1
    790e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    7912:	d006      	beq.n	7922 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
    7914:	7a23      	ldrb	r3, [r4, #8]
    7916:	2b00      	cmp	r3, #0
    7918:	d0f1      	beq.n	78fe <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
    791a:	6823      	ldr	r3, [r4, #0]
    791c:	3301      	adds	r3, #1
    791e:	6023      	str	r3, [r4, #0]
    7920:	e7f4      	b.n	790c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
    7922:	2001      	movs	r0, #1
}
    7924:	bd70      	pop	{r4, r5, r6, pc}

00007926 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7926:	2901      	cmp	r1, #1
    7928:	d919      	bls.n	795e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    792a:	b538      	push	{r3, r4, r5, lr}
    792c:	460c      	mov	r4, r1
    792e:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7930:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7934:	3301      	adds	r3, #1
    7936:	428b      	cmp	r3, r1
    7938:	d201      	bcs.n	793e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    793a:	2000      	movs	r0, #0
}
    793c:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    793e:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    7942:	2201      	movs	r2, #1
    7944:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7948:	f500 7004 	add.w	r0, r0, #528	; 0x210
    794c:	f004 fb57 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    7950:	b138      	cbz	r0, 7962 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    7952:	00a4      	lsls	r4, r4, #2
    7954:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    7958:	5105      	str	r5, [r0, r4]
  return true;
    795a:	2001      	movs	r0, #1
    795c:	e7ee      	b.n	793c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    795e:	2000      	movs	r0, #0
}
    7960:	4770      	bx	lr
  return false;
    7962:	2000      	movs	r0, #0
    7964:	e7ea      	b.n	793c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

00007966 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    7966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    796a:	b082      	sub	sp, #8
    796c:	4606      	mov	r6, r0
    796e:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    7970:	460f      	mov	r7, r1
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    7972:	f04f 0800 	mov.w	r8, #0
    7976:	e00d      	b.n	7994 <ExFatPartition::freeChain(unsigned long)+0x2e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    }
    cluster = next;
    7978:	461c      	mov	r4, r3
    797a:	e00b      	b.n	7994 <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    797c:	1c62      	adds	r2, r4, #1
    797e:	4643      	mov	r3, r8
    7980:	1bd2      	subs	r2, r2, r7
    7982:	4639      	mov	r1, r7
    7984:	4630      	mov	r0, r6
    7986:	f7ff feea 	bl	775e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    798a:	4603      	mov	r3, r0
    798c:	b318      	cbz	r0, 79d6 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    798e:	9f01      	ldr	r7, [sp, #4]
  } while (status);
    7990:	b30d      	cbz	r5, 79d6 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    7992:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
    7994:	aa01      	add	r2, sp, #4
    7996:	4621      	mov	r1, r4
    7998:	4630      	mov	r0, r6
    799a:	f7ff ff65 	bl	7868 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    799e:	1e05      	subs	r5, r0, #0
    79a0:	db18      	blt.n	79d4 <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
    79a2:	4642      	mov	r2, r8
    79a4:	4621      	mov	r1, r4
    79a6:	4630      	mov	r0, r6
    79a8:	f7ff ffbd 	bl	7926 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    79ac:	4603      	mov	r3, r0
    79ae:	b190      	cbz	r0, 79d6 <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
    79b0:	2d00      	cmp	r5, #0
    79b2:	d0e3      	beq.n	797c <ExFatPartition::freeChain(unsigned long)+0x16>
    79b4:	9b01      	ldr	r3, [sp, #4]
    79b6:	1c62      	adds	r2, r4, #1
    79b8:	429a      	cmp	r2, r3
    79ba:	d0dd      	beq.n	7978 <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    79bc:	1c62      	adds	r2, r4, #1
    79be:	4643      	mov	r3, r8
    79c0:	1bd2      	subs	r2, r2, r7
    79c2:	4639      	mov	r1, r7
    79c4:	4630      	mov	r0, r6
    79c6:	f7ff feca 	bl	775e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    79ca:	4603      	mov	r3, r0
    79cc:	b118      	cbz	r0, 79d6 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    79ce:	9f01      	ldr	r7, [sp, #4]
    79d0:	463c      	mov	r4, r7
    79d2:	e7df      	b.n	7994 <ExFatPartition::freeChain(unsigned long)+0x2e>

  return true;

 fail:
  return false;
    79d4:	2300      	movs	r3, #0
}
    79d6:	4618      	mov	r0, r3
    79d8:	b002      	add	sp, #8
    79da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000079de <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    79de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79e2:	4606      	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    79e4:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
    79e8:	2500      	movs	r5, #0
  uint32_t nc = 0;
    79ea:	462c      	mov	r4, r5
    79ec:	f500 7804 	add.w	r8, r0, #528	; 0x210
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    79f0:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    79f2:	f101 0901 	add.w	r9, r1, #1
    79f6:	2200      	movs	r2, #0
    79f8:	4640      	mov	r0, r8
    79fa:	f004 fb00 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    79fe:	b308      	cbz	r0, 7a44 <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7a00:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    7a04:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
    7a08:	e007      	b.n	7a1a <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
    7a0a:	3508      	adds	r5, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    7a0c:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    7a0e:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    7a12:	42a0      	cmp	r0, r4
    7a14:	d911      	bls.n	7a3a <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7a16:	4574      	cmp	r4, lr
    7a18:	d012      	beq.n	7a40 <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
    7a1a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    7a1e:	29ff      	cmp	r1, #255	; 0xff
    7a20:	d0f3      	beq.n	7a0a <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
    7a22:	2900      	cmp	r1, #0
    7a24:	d0f2      	beq.n	7a0c <ExFatPartition::freeClusterCount()+0x2e>
    7a26:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7a28:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
    7a2a:	4219      	tst	r1, r3
            usedCount++;
    7a2c:	bf18      	it	ne
    7a2e:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7a30:	005b      	lsls	r3, r3, #1
    7a32:	b2db      	uxtb	r3, r3
    7a34:	3a01      	subs	r2, #1
    7a36:	d1f8      	bne.n	7a2a <ExFatPartition::freeClusterCount()+0x4c>
    7a38:	e7e8      	b.n	7a0c <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
    7a3a:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    7a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    7a40:	4649      	mov	r1, r9
    7a42:	e7d6      	b.n	79f2 <ExFatPartition::freeClusterCount()+0x14>
      return 0;
    7a44:	2000      	movs	r0, #0
    7a46:	e7f9      	b.n	7a3c <ExFatPartition::freeClusterCount()+0x5e>

00007a48 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a4c:	4604      	mov	r4, r0
    7a4e:	460b      	mov	r3, r1
    7a50:	4616      	mov	r6, r2
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    7a52:	2100      	movs	r1, #0
    7a54:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
    7a58:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    7a5c:	6043      	str	r3, [r0, #4]
    m_status = 0;
    7a5e:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
    7a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a64:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
    7a66:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
    7a6a:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7a6e:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    7a72:	f500 7704 	add.w	r7, r0, #528	; 0x210
    7a76:	460a      	mov	r2, r1
    7a78:	4638      	mov	r0, r7
    7a7a:	f004 fac0 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    7a7e:	4680      	mov	r8, r0
    7a80:	fab0 f080 	clz	r0, r0
    7a84:	0940      	lsrs	r0, r0, #5
    7a86:	2e04      	cmp	r6, #4
    7a88:	bf94      	ite	ls
    7a8a:	4605      	movls	r5, r0
    7a8c:	f040 0501 	orrhi.w	r5, r0, #1
    7a90:	2d00      	cmp	r5, #0
    7a92:	d154      	bne.n	7b3e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    7a94:	b1ce      	cbz	r6, 7aca <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    7a96:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7a98:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    7a9c:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
    7aa0:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    7aa4:	d14c      	bne.n	7b40 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    7aa6:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    7aaa:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d046      	beq.n	7b40 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    7ab2:	eb08 1606 	add.w	r6, r8, r6, lsl #4
    7ab6:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
    7aba:	2200      	movs	r2, #0
    7abc:	4631      	mov	r1, r6
    7abe:	4638      	mov	r0, r7
    7ac0:	f004 fa9d 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7ac4:	4680      	mov	r8, r0
    7ac6:	b908      	cbnz	r0, 7acc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
    7ac8:	e03a      	b.n	7b40 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
    7aca:	2600      	movs	r6, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    7acc:	2205      	movs	r2, #5
    7ace:	491e      	ldr	r1, [pc, #120]	; (7b48 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
    7ad0:	f108 0003 	add.w	r0, r8, #3
    7ad4:	f009 faea 	bl	110ac <strncmp>
    7ad8:	bb90      	cbnz	r0, 7b40 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    7ada:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
    7ade:	2b09      	cmp	r3, #9
    7ae0:	d12e      	bne.n	7b40 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    7ae2:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    7ae6:	4433      	add	r3, r6
    7ae8:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    7aec:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    7af0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7af4:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    7af8:	4433      	add	r3, r6
    7afa:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    7afe:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    7b02:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    7b06:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    7b0a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7b0e:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    7b12:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7b16:	3309      	adds	r3, #9
    7b18:	2501      	movs	r5, #1
    7b1a:	fa05 f303 	lsl.w	r3, r5, r3
    7b1e:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    7b22:	3b01      	subs	r3, #1
    7b24:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    7b28:	2100      	movs	r1, #0
    7b2a:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    7b2e:	462a      	mov	r2, r5
    7b30:	4620      	mov	r0, r4
    7b32:	f7ff fdbb 	bl	76ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7b36:	2340      	movs	r3, #64	; 0x40
    7b38:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    7b3c:	e000      	b.n	7b40 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>

 fail:
  return false;
    7b3e:	2500      	movs	r5, #0
}
    7b40:	4628      	mov	r0, r5
    7b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b46:	bf00      	nop
    7b48:	20002040 	.word	0x20002040

00007b4c <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7b4c:	b510      	push	{r4, lr}
    7b4e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    7b50:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    7b54:	f7ff feac 	bl	78b0 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7b58:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    7b5c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    7b5e:	b2db      	uxtb	r3, r3
}
    7b60:	4098      	lsls	r0, r3
    7b62:	bd10      	pop	{r4, pc}

00007b64 <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    7b64:	b538      	push	{r3, r4, r5, lr}
    7b66:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7b68:	4602      	mov	r2, r0
    7b6a:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7b6e:	4629      	mov	r1, r5
    7b70:	6880      	ldr	r0, [r0, #8]
    7b72:	f002 f940 	bl	9df6 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7b76:	b140      	cbz	r0, 7b8a <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    7b78:	b945      	cbnz	r5, 7b8c <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7b7a:	78a3      	ldrb	r3, [r4, #2]
    7b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7b80:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7b82:	78a3      	ldrb	r3, [r4, #2]
    7b84:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7b88:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    7b8a:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    7b8c:	3501      	adds	r5, #1
    7b8e:	6923      	ldr	r3, [r4, #16]
    7b90:	42ab      	cmp	r3, r5
    7b92:	d0f6      	beq.n	7b82 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7b94:	78a3      	ldrb	r3, [r4, #2]
    7b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7b9a:	70a3      	strb	r3, [r4, #2]
    7b9c:	e7f1      	b.n	7b82 <FatFile::addCluster()+0x1e>
	...

00007ba0 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    7ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    7ba4:	7803      	ldrb	r3, [r0, #0]
    7ba6:	f013 0f20 	tst.w	r3, #32
    7baa:	d133      	bne.n	7c14 <FatFile::addDirCluster()+0x74>
    7bac:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    7bae:	6942      	ldr	r2, [r0, #20]
    7bb0:	4b1b      	ldr	r3, [pc, #108]	; (7c20 <FatFile::addDirCluster()+0x80>)
    7bb2:	429a      	cmp	r2, r3
    7bb4:	d301      	bcc.n	7bba <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    7bb6:	2700      	movs	r7, #0
    7bb8:	e02d      	b.n	7c16 <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
    7bba:	f7ff ffd3 	bl	7b64 <FatFile::addCluster()>
    7bbe:	4607      	mov	r7, r0
    7bc0:	b348      	cbz	r0, 7c16 <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
    7bc2:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7bc4:	692e      	ldr	r6, [r5, #16]
    7bc6:	3e02      	subs	r6, #2
    7bc8:	7983      	ldrb	r3, [r0, #6]
    7bca:	409e      	lsls	r6, r3
    7bcc:	6943      	ldr	r3, [r0, #20]
    7bce:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7bd0:	7903      	ldrb	r3, [r0, #4]
    7bd2:	b1b3      	cbz	r3, 7c02 <FatFile::addDirCluster()+0x62>
    7bd4:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
    7bd6:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
    7bda:	f44f 7a00 	mov.w	sl, #512	; 0x200
    7bde:	46a1      	mov	r9, r4
    7be0:	4642      	mov	r2, r8
    7be2:	fa56 f184 	uxtab	r1, r6, r4
    7be6:	3028      	adds	r0, #40	; 0x28
    7be8:	f004 fa09 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7bec:	b1b0      	cbz	r0, 7c1c <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
    7bee:	4652      	mov	r2, sl
    7bf0:	4649      	mov	r1, r9
    7bf2:	f009 fe7b 	bl	118ec <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7bf6:	68a8      	ldr	r0, [r5, #8]
    7bf8:	3401      	adds	r4, #1
    7bfa:	7902      	ldrb	r2, [r0, #4]
    7bfc:	b2e3      	uxtb	r3, r4
    7bfe:	429a      	cmp	r2, r3
    7c00:	d8ee      	bhi.n	7be0 <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    7c02:	7982      	ldrb	r2, [r0, #6]
    7c04:	f44f 7300 	mov.w	r3, #512	; 0x200
    7c08:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7c0a:	696a      	ldr	r2, [r5, #20]
    7c0c:	fa12 f383 	uxtah	r3, r2, r3
    7c10:	616b      	str	r3, [r5, #20]
  return true;
    7c12:	e000      	b.n	7c16 <FatFile::addDirCluster()+0x76>
  return false;
    7c14:	2700      	movs	r7, #0
}
    7c16:	4638      	mov	r0, r7
    7c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
    7c1c:	2700      	movs	r7, #0
    7c1e:	e7fa      	b.n	7c16 <FatFile::addDirCluster()+0x76>
    7c20:	001ffe00 	.word	0x001ffe00

00007c24 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7c24:	b510      	push	{r4, lr}
    7c26:	4604      	mov	r4, r0
    7c28:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
    7c2a:	6880      	ldr	r0, [r0, #8]
    7c2c:	69a1      	ldr	r1, [r4, #24]
    7c2e:	3028      	adds	r0, #40	; 0x28
    7c30:	f004 f9e5 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    7c34:	4603      	mov	r3, r0
    7c36:	b120      	cbz	r0, 7c42 <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    7c38:	88a2      	ldrh	r2, [r4, #4]
    7c3a:	f002 020f 	and.w	r2, r2, #15
    7c3e:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
    7c42:	4618      	mov	r0, r3
    7c44:	bd10      	pop	{r4, pc}

00007c46 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    7c46:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
    7c48:	7803      	ldrb	r3, [r0, #0]
    7c4a:	b10b      	cbz	r3, 7c50 <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7c4c:	2000      	movs	r0, #0
}
    7c4e:	bd38      	pop	{r3, r4, r5, pc}
    7c50:	4604      	mov	r4, r0
    7c52:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
    7c54:	2224      	movs	r2, #36	; 0x24
    7c56:	2100      	movs	r1, #0
    7c58:	f009 fe48 	bl	118ec <memset>
  m_vol = vol;
    7c5c:	60a5      	str	r5, [r4, #8]
    return m_fatType;
    7c5e:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7c60:	2b10      	cmp	r3, #16
    7c62:	d007      	beq.n	7c74 <FatFile::openRoot(FatVolume*)+0x2e>
    7c64:	2b20      	cmp	r3, #32
    7c66:	d007      	beq.n	7c78 <FatFile::openRoot(FatVolume*)+0x32>
    7c68:	2b0c      	cmp	r3, #12
    7c6a:	d001      	beq.n	7c70 <FatFile::openRoot(FatVolume*)+0x2a>
    7c6c:	2000      	movs	r0, #0
    7c6e:	e7ee      	b.n	7c4e <FatFile::openRoot(FatVolume*)+0x8>
    7c70:	2320      	movs	r3, #32
    7c72:	e002      	b.n	7c7a <FatFile::openRoot(FatVolume*)+0x34>
    7c74:	2320      	movs	r3, #32
    7c76:	e000      	b.n	7c7a <FatFile::openRoot(FatVolume*)+0x34>
    7c78:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7c7a:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7c7c:	2001      	movs	r0, #1
    7c7e:	70a0      	strb	r0, [r4, #2]
  return true;
    7c80:	e7e5      	b.n	7c4e <FatFile::openRoot(FatVolume*)+0x8>

00007c82 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    7c82:	b538      	push	{r3, r4, r5, lr}
    7c84:	4604      	mov	r4, r0
    7c86:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7c88:	68cb      	ldr	r3, [r1, #12]
    7c8a:	b91b      	cbnz	r3, 7c94 <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
    7c8c:	6889      	ldr	r1, [r1, #8]
    7c8e:	f7ff ffda 	bl	7c46 <FatFile::openRoot(FatVolume*)>
}
    7c92:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    7c94:	2224      	movs	r2, #36	; 0x24
    7c96:	2100      	movs	r1, #0
    7c98:	f009 fe28 	bl	118ec <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    7c9c:	2310      	movs	r3, #16
    7c9e:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7ca0:	2001      	movs	r0, #1
    7ca2:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    7ca4:	68ab      	ldr	r3, [r5, #8]
    7ca6:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7ca8:	68eb      	ldr	r3, [r5, #12]
    7caa:	6223      	str	r3, [r4, #32]
  return true;
    7cac:	e7f1      	b.n	7c92 <FatFile::openCluster(FatFile*)+0x10>

00007cae <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7cae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cb2:	b083      	sub	sp, #12
    7cb4:	4604      	mov	r4, r0
    7cb6:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7cb8:	7883      	ldrb	r3, [r0, #2]
    7cba:	f013 0f01 	tst.w	r3, #1
    7cbe:	f000 80b4 	beq.w	7e2a <FatFile::read(void*, unsigned int)+0x17c>
    7cc2:	4689      	mov	r9, r1
    7cc4:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7cc6:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7cc8:	f013 0f08 	tst.w	r3, #8
    7ccc:	d012      	beq.n	7cf4 <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7cce:	69c3      	ldr	r3, [r0, #28]
    7cd0:	6942      	ldr	r2, [r0, #20]
    7cd2:	1a9b      	subs	r3, r3, r2
    7cd4:	460a      	mov	r2, r1
    7cd6:	4299      	cmp	r1, r3
    7cd8:	bf28      	it	cs
    7cda:	461a      	movcs	r2, r3
    7cdc:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7cde:	9b00      	ldr	r3, [sp, #0]
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	f000 80b7 	beq.w	7e54 <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
    7ce6:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
    7ce8:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7cec:	f104 0310 	add.w	r3, r4, #16
    7cf0:	9301      	str	r3, [sp, #4]
    7cf2:	e05b      	b.n	7dac <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
    7cf4:	f013 0f20 	tst.w	r3, #32
    7cf8:	d0f1      	beq.n	7cde <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7cfa:	6883      	ldr	r3, [r0, #8]
    7cfc:	895a      	ldrh	r2, [r3, #10]
    7cfe:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    7d00:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    7d04:	b29b      	uxth	r3, r3
    7d06:	9a00      	ldr	r2, [sp, #0]
    7d08:	429a      	cmp	r2, r3
    7d0a:	bf28      	it	cs
    7d0c:	461a      	movcs	r2, r3
    7d0e:	9200      	str	r2, [sp, #0]
    7d10:	e7e5      	b.n	7cde <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
    7d12:	f890 a005 	ldrb.w	sl, [r0, #5]
    7d16:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    7d1a:	f1b8 0f00 	cmp.w	r8, #0
    7d1e:	d109      	bne.n	7d34 <FatFile::read(void*, unsigned int)+0x86>
    7d20:	f1ba 0f00 	cmp.w	sl, #0
    7d24:	d106      	bne.n	7d34 <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
    7d26:	b973      	cbnz	r3, 7d46 <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7d28:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
    7d2c:	bf14      	ite	ne
    7d2e:	6a03      	ldrne	r3, [r0, #32]
    7d30:	6a23      	ldreq	r3, [r4, #32]
    7d32:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7d34:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7d36:	6925      	ldr	r5, [r4, #16]
    7d38:	3d02      	subs	r5, #2
    7d3a:	799a      	ldrb	r2, [r3, #6]
    7d3c:	4095      	lsls	r5, r2
    7d3e:	695b      	ldr	r3, [r3, #20]
    7d40:	441d      	add	r5, r3
    7d42:	4455      	add	r5, sl
    7d44:	e03d      	b.n	7dc2 <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
    7d46:	f012 0f08 	tst.w	r2, #8
    7d4a:	d007      	beq.n	7d5c <FatFile::read(void*, unsigned int)+0xae>
    7d4c:	78a3      	ldrb	r3, [r4, #2]
    7d4e:	f013 0f40 	tst.w	r3, #64	; 0x40
    7d52:	d003      	beq.n	7d5c <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
    7d54:	6923      	ldr	r3, [r4, #16]
    7d56:	3301      	adds	r3, #1
    7d58:	6123      	str	r3, [r4, #16]
    7d5a:	e7eb      	b.n	7d34 <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7d5c:	9a01      	ldr	r2, [sp, #4]
    7d5e:	6921      	ldr	r1, [r4, #16]
    7d60:	f001 ff27 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7d64:	2800      	cmp	r0, #0
    7d66:	db60      	blt.n	7e2a <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
    7d68:	2800      	cmp	r0, #0
    7d6a:	d1e3      	bne.n	7d34 <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
    7d6c:	7823      	ldrb	r3, [r4, #0]
    7d6e:	f013 0f70 	tst.w	r3, #112	; 0x70
    7d72:	d05a      	beq.n	7e2a <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7d74:	9b00      	ldr	r3, [sp, #0]
    7d76:	1bd8      	subs	r0, r3, r7
    7d78:	e05d      	b.n	7e36 <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
    7d7a:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
    7d7e:	42be      	cmp	r6, r7
    7d80:	bf28      	it	cs
    7d82:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
    7d84:	68a0      	ldr	r0, [r4, #8]
    7d86:	2200      	movs	r2, #0
    7d88:	4629      	mov	r1, r5
    7d8a:	3028      	adds	r0, #40	; 0x28
    7d8c:	f004 f937 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7d90:	4601      	mov	r1, r0
    7d92:	2800      	cmp	r0, #0
    7d94:	d049      	beq.n	7e2a <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    7d96:	4632      	mov	r2, r6
    7d98:	4441      	add	r1, r8
    7d9a:	4648      	mov	r0, r9
    7d9c:	f005 fcdc 	bl	d758 <memcpy>
    dst += n;
    7da0:	44b1      	add	r9, r6
    m_curPosition += n;
    7da2:	6963      	ldr	r3, [r4, #20]
    7da4:	4433      	add	r3, r6
    7da6:	6163      	str	r3, [r4, #20]
  while (toRead) {
    7da8:	1bbf      	subs	r7, r7, r6
    7daa:	d0e3      	beq.n	7d74 <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7dac:	6963      	ldr	r3, [r4, #20]
    7dae:	68a0      	ldr	r0, [r4, #8]
    7db0:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7db4:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
    7db6:	f012 0f20 	tst.w	r2, #32
    7dba:	d0aa      	beq.n	7d12 <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
    7dbc:	6a05      	ldr	r5, [r0, #32]
    7dbe:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    7dc2:	f1b8 0f00 	cmp.w	r8, #0
    7dc6:	d1d8      	bne.n	7d7a <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7dc8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7dcc:	d3d5      	bcc.n	7d7a <FatFile::read(void*, unsigned int)+0xcc>
    7dce:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    7dd2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7dd6:	429d      	cmp	r5, r3
    7dd8:	d0cf      	beq.n	7d7a <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7dda:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    7dde:	d32d      	bcc.n	7e3c <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7de0:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
    7de4:	7822      	ldrb	r2, [r4, #0]
    7de6:	f012 0f20 	tst.w	r2, #32
    7dea:	d106      	bne.n	7dfa <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7dec:	f89b 2004 	ldrb.w	r2, [fp, #4]
    7df0:	eba2 020a 	sub.w	r2, r2, sl
    7df4:	4590      	cmp	r8, r2
    7df6:	bf28      	it	cs
    7df8:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
    7dfa:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    7dfe:	429d      	cmp	r5, r3
    7e00:	d808      	bhi.n	7e14 <FatFile::read(void*, unsigned int)+0x166>
    7e02:	eb05 0208 	add.w	r2, r5, r8
    7e06:	4293      	cmp	r3, r2
    7e08:	d204      	bcs.n	7e14 <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    7e0a:	f10b 0028 	add.w	r0, fp, #40	; 0x28
    7e0e:	f004 f8cf 	bl	bfb0 <FsCache::sync()>
    7e12:	b150      	cbz	r0, 7e2a <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    7e14:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    7e18:	6803      	ldr	r3, [r0, #0]
    7e1a:	f8d3 b014 	ldr.w	fp, [r3, #20]
    7e1e:	4643      	mov	r3, r8
    7e20:	464a      	mov	r2, r9
    7e22:	4629      	mov	r1, r5
    7e24:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7e26:	2800      	cmp	r0, #0
    7e28:	d1ba      	bne.n	7da0 <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
    7e2a:	7863      	ldrb	r3, [r4, #1]
    7e2c:	f043 0302 	orr.w	r3, r3, #2
    7e30:	7063      	strb	r3, [r4, #1]
  return -1;
    7e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7e36:	b003      	add	sp, #12
    7e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
    7e3c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    7e40:	6803      	ldr	r3, [r0, #0]
    7e42:	691b      	ldr	r3, [r3, #16]
    7e44:	464a      	mov	r2, r9
    7e46:	4629      	mov	r1, r5
    7e48:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7e4a:	2800      	cmp	r0, #0
    7e4c:	d0ed      	beq.n	7e2a <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    7e4e:	f44f 7600 	mov.w	r6, #512	; 0x200
    7e52:	e7a5      	b.n	7da0 <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
    7e54:	9f00      	ldr	r7, [sp, #0]
    7e56:	e78d      	b.n	7d74 <FatFile::read(void*, unsigned int)+0xc6>

00007e58 <FatFile::peek()>:
int FatFile::peek() {
    7e58:	b570      	push	{r4, r5, r6, lr}
    7e5a:	b082      	sub	sp, #8
    7e5c:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    7e5e:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    7e60:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
    7e62:	2201      	movs	r2, #1
    7e64:	f10d 0107 	add.w	r1, sp, #7
    7e68:	f7ff ff21 	bl	7cae <FatFile::read(void*, unsigned int)>
    7e6c:	2801      	cmp	r0, #1
    7e6e:	bf0c      	ite	eq
    7e70:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7e74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    7e78:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
    7e7a:	6125      	str	r5, [r4, #16]
}
    7e7c:	b002      	add	sp, #8
    7e7e:	bd70      	pop	{r4, r5, r6, pc}

00007e80 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7e80:	b530      	push	{r4, r5, lr}
    7e82:	b083      	sub	sp, #12
    7e84:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7e86:	6943      	ldr	r3, [r0, #20]
    7e88:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
    7e8c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
    7e90:	d009      	beq.n	7ea6 <FatFile::readDirCache(bool)+0x26>
    7e92:	2901      	cmp	r1, #1
    7e94:	d107      	bne.n	7ea6 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    7e96:	3320      	adds	r3, #32
    7e98:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7e9a:	68a0      	ldr	r0, [r4, #8]
    7e9c:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7e9e:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    7ea2:	b003      	add	sp, #12
    7ea4:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7ea6:	2201      	movs	r2, #1
    7ea8:	f10d 0107 	add.w	r1, sp, #7
    7eac:	4620      	mov	r0, r4
    7eae:	f7ff fefe 	bl	7cae <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7eb2:	b240      	sxtb	r0, r0
    7eb4:	2801      	cmp	r0, #1
    7eb6:	d103      	bne.n	7ec0 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7eb8:	6963      	ldr	r3, [r4, #20]
    7eba:	331f      	adds	r3, #31
    7ebc:	6163      	str	r3, [r4, #20]
    7ebe:	e7ec      	b.n	7e9a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    7ec0:	2000      	movs	r0, #0
    7ec2:	e7ee      	b.n	7ea2 <FatFile::readDirCache(bool)+0x22>

00007ec4 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ec8:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7eca:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
    7ecc:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
    7ece:	b36b      	cbz	r3, 7f2c <FatFile::seekSet(unsigned long)+0x68>
    7ed0:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7ed2:	6942      	ldr	r2, [r0, #20]
    7ed4:	428a      	cmp	r2, r1
    7ed6:	d045      	beq.n	7f64 <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
    7ed8:	b361      	cbz	r1, 7f34 <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    7eda:	f013 0f08 	tst.w	r3, #8
    7ede:	d032      	beq.n	7f46 <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
    7ee0:	69c1      	ldr	r1, [r0, #28]
    7ee2:	42a9      	cmp	r1, r5
    7ee4:	d322      	bcc.n	7f2c <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7ee6:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7eea:	f89c 1006 	ldrb.w	r1, [ip, #6]
    7eee:	3109      	adds	r1, #9
    7ef0:	b2c9      	uxtb	r1, r1
    7ef2:	1e6e      	subs	r6, r5, #1
    7ef4:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    7ef6:	78a0      	ldrb	r0, [r4, #2]
    7ef8:	f010 0f40 	tst.w	r0, #64	; 0x40
    7efc:	d12c      	bne.n	7f58 <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7efe:	1e50      	subs	r0, r2, #1
    7f00:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
    7f02:	b10a      	cbz	r2, 7f08 <FatFile::seekSet(unsigned long)+0x44>
    7f04:	4286      	cmp	r6, r0
    7f06:	d22b      	bcs.n	7f60 <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7f08:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
    7f0c:	bf14      	ite	ne
    7f0e:	f8dc 3020 	ldrne.w	r3, [ip, #32]
    7f12:	6a23      	ldreq	r3, [r4, #32]
    7f14:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7f16:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
    7f1a:	b16e      	cbz	r6, 7f38 <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7f1c:	4642      	mov	r2, r8
    7f1e:	6921      	ldr	r1, [r4, #16]
    7f20:	68a0      	ldr	r0, [r4, #8]
    7f22:	f001 fe46 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    7f26:	3e01      	subs	r6, #1
    7f28:	2800      	cmp	r0, #0
    7f2a:	dcf6      	bgt.n	7f1a <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    7f2c:	6127      	str	r7, [r4, #16]
  return false;
    7f2e:	2000      	movs	r0, #0
}
    7f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
    7f34:	2300      	movs	r3, #0
    7f36:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
    7f38:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7f3a:	78a3      	ldrb	r3, [r4, #2]
    7f3c:	f023 0320 	bic.w	r3, r3, #32
    7f40:	70a3      	strb	r3, [r4, #2]
  return true;
    7f42:	2001      	movs	r0, #1
    7f44:	e7f4      	b.n	7f30 <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
    7f46:	f013 0f20 	tst.w	r3, #32
    7f4a:	d0cc      	beq.n	7ee6 <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
    7f4c:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7f4e:	895b      	ldrh	r3, [r3, #10]
    7f50:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7f54:	d9f0      	bls.n	7f38 <FatFile::seekSet(unsigned long)+0x74>
    7f56:	e7e9      	b.n	7f2c <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
    7f58:	6a23      	ldr	r3, [r4, #32]
    7f5a:	4433      	add	r3, r6
    7f5c:	6123      	str	r3, [r4, #16]
    goto done;
    7f5e:	e7eb      	b.n	7f38 <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
    7f60:	1a36      	subs	r6, r6, r0
    7f62:	e7d8      	b.n	7f16 <FatFile::seekSet(unsigned long)+0x52>
    return true;
    7f64:	2001      	movs	r0, #1
    7f66:	e7e3      	b.n	7f30 <FatFile::seekSet(unsigned long)+0x6c>

00007f68 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7f68:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7f6a:	7803      	ldrb	r3, [r0, #0]
    7f6c:	f013 0f10 	tst.w	r3, #16
    7f70:	d101      	bne.n	7f76 <FatFile::rmdir()+0xe>
  return false;
    7f72:	2000      	movs	r0, #0
}
    7f74:	bd38      	pop	{r3, r4, r5, pc}
    7f76:	4604      	mov	r4, r0
    seekSet(0);
    7f78:	2100      	movs	r1, #0
    7f7a:	f7ff ffa3 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    7f7e:	2501      	movs	r5, #1
    7f80:	4629      	mov	r1, r5
    7f82:	4620      	mov	r0, r4
    7f84:	f7ff ff7c 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!dir) {
    7f88:	4603      	mov	r3, r0
    7f8a:	b168      	cbz	r0, 7fa8 <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
    7f8c:	7800      	ldrb	r0, [r0, #0]
    7f8e:	b170      	cbz	r0, 7fae <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7f90:	282e      	cmp	r0, #46	; 0x2e
    7f92:	bf18      	it	ne
    7f94:	28e5      	cmpne	r0, #229	; 0xe5
    7f96:	bf0c      	ite	eq
    7f98:	2001      	moveq	r0, #1
    7f9a:	2000      	movne	r0, #0
    7f9c:	d0f0      	beq.n	7f80 <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
    7f9e:	7adb      	ldrb	r3, [r3, #11]
    7fa0:	f013 0f08 	tst.w	r3, #8
    7fa4:	d1ec      	bne.n	7f80 <FatFile::rmdir()+0x18>
    7fa6:	e7e5      	b.n	7f74 <FatFile::rmdir()+0xc>
      if (!getError()) {
    7fa8:	7863      	ldrb	r3, [r4, #1]
    7faa:	2b00      	cmp	r3, #0
    7fac:	d1e2      	bne.n	7f74 <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
    7fae:	2308      	movs	r3, #8
    7fb0:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7fb2:	78a3      	ldrb	r3, [r4, #2]
    7fb4:	f043 0302 	orr.w	r3, r3, #2
    7fb8:	70a3      	strb	r3, [r4, #2]
  return remove();
    7fba:	4620      	mov	r0, r4
    7fbc:	f001 f974 	bl	92a8 <FatFile::remove()>
    7fc0:	e7d8      	b.n	7f74 <FatFile::rmdir()+0xc>

00007fc2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fc4:	4604      	mov	r4, r0
    7fc6:	460e      	mov	r6, r1
    7fc8:	4615      	mov	r5, r2
    7fca:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
    7fcc:	2224      	movs	r2, #36	; 0x24
    7fce:	2100      	movs	r1, #0
    7fd0:	f009 fc8c 	bl	118ec <memset>
  m_vol = dirFile->m_vol;
    7fd4:	68b0      	ldr	r0, [r6, #8]
    7fd6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    7fd8:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
    7fda:	6a33      	ldr	r3, [r6, #32]
    7fdc:	60e3      	str	r3, [r4, #12]
    7fde:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
    7fe2:	f005 050f 	and.w	r5, r5, #15
    7fe6:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7fea:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    7fec:	f011 0f08 	tst.w	r1, #8
    7ff0:	d113      	bne.n	801a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7ff2:	f001 0117 	and.w	r1, r1, #23
    7ff6:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    7ff8:	7ad3      	ldrb	r3, [r2, #11]
    7ffa:	f013 0f18 	tst.w	r3, #24
    7ffe:	d102      	bne.n	8006 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
    8000:	f041 0108 	orr.w	r1, r1, #8
    8004:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
    8006:	f89d 3018 	ldrb.w	r3, [sp, #24]
    800a:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
    800c:	f007 0303 	and.w	r3, r7, #3
    8010:	2b01      	cmp	r3, #1
    8012:	d027      	beq.n	8064 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    8014:	2b02      	cmp	r3, #2
    8016:	d027      	beq.n	8068 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    8018:	b11b      	cbz	r3, 8022 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
    801a:	2000      	movs	r0, #0
    801c:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
    801e:	70a0      	strb	r0, [r4, #2]
}
    8020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
    8022:	f417 6f80 	tst.w	r7, #1024	; 0x400
    8026:	d1f8      	bne.n	801a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8028:	f007 0308 	and.w	r3, r7, #8
    802c:	f043 0301 	orr.w	r3, r3, #1
    8030:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    8032:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    8034:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8036:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    8038:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    803a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    803e:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    8040:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    8042:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    8044:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    8048:	d105      	bne.n	8056 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
    804a:	2001      	movs	r0, #1
    804c:	e7e8      	b.n	8020 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    804e:	f001 ff19 	bl	9e84 <FatPartition::freeChain(unsigned long)>
    8052:	b9f0      	cbnz	r0, 8092 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    8054:	e7e1      	b.n	801a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    8056:	69e1      	ldr	r1, [r4, #28]
    8058:	4620      	mov	r0, r4
    805a:	f7ff ff33 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    805e:	2800      	cmp	r0, #0
    8060:	d1de      	bne.n	8020 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    8062:	e7da      	b.n	801a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
    8064:	2302      	movs	r3, #2
    8066:	e000      	b.n	806a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
    8068:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
    806a:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    806c:	7821      	ldrb	r1, [r4, #0]
    806e:	f011 0f11 	tst.w	r1, #17
    8072:	d1d2      	bne.n	801a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8074:	f007 0108 	and.w	r1, r7, #8
    8078:	430b      	orrs	r3, r1
    807a:	70a3      	strb	r3, [r4, #2]
    807c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    807e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8080:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    8082:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8084:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
    8088:	f417 6f80 	tst.w	r7, #1024	; 0x400
    808c:	d0d7      	beq.n	803e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    808e:	2900      	cmp	r1, #0
    8090:	d1dd      	bne.n	804e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8092:	78a3      	ldrb	r3, [r4, #2]
    8094:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8098:	70a3      	strb	r3, [r4, #2]
    809a:	e7d3      	b.n	8044 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

0000809c <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80a0:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
    80a2:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    80a4:	2d00      	cmp	r5, #0
    80a6:	d14f      	bne.n	8148 <FatFile::openNext(FatFile*, int)+0xac>
    80a8:	4606      	mov	r6, r0
    80aa:	460c      	mov	r4, r1
    80ac:	4692      	mov	sl, r2
    80ae:	780b      	ldrb	r3, [r1, #0]
    80b0:	f013 0f70 	tst.w	r3, #112	; 0x70
    80b4:	d04c      	beq.n	8150 <FatFile::openNext(FatFile*, int)+0xb4>
    80b6:	694b      	ldr	r3, [r1, #20]
    80b8:	f013 0f1f 	tst.w	r3, #31
    80bc:	d14a      	bne.n	8154 <FatFile::openNext(FatFile*, int)+0xb8>
    80be:	46a9      	mov	r9, r5
    80c0:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
    80c2:	2700      	movs	r7, #0
    80c4:	e000      	b.n	80c8 <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
    80c6:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
    80c8:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
    80cc:	4639      	mov	r1, r7
    80ce:	4620      	mov	r0, r4
    80d0:	f7ff fed6 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!dir) {
    80d4:	4602      	mov	r2, r0
    80d6:	2800      	cmp	r0, #0
    80d8:	d03e      	beq.n	8158 <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
    80da:	7803      	ldrb	r3, [r0, #0]
    80dc:	2b00      	cmp	r3, #0
    80de:	d03d      	beq.n	815c <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    80e0:	2be5      	cmp	r3, #229	; 0xe5
    80e2:	bf18      	it	ne
    80e4:	2b2e      	cmpne	r3, #46	; 0x2e
    80e6:	bf0c      	ite	eq
    80e8:	2001      	moveq	r0, #1
    80ea:	2000      	movne	r0, #0
    80ec:	d0eb      	beq.n	80c6 <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    80ee:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
    80f0:	f011 0c08 	ands.w	ip, r1, #8
    80f4:	d003      	beq.n	80fe <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
    80f6:	290f      	cmp	r1, #15
    80f8:	d01e      	beq.n	8138 <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
    80fa:	46a9      	mov	r9, r5
    80fc:	e7e4      	b.n	80c8 <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    80fe:	f1b9 0f00 	cmp.w	r9, #0
    8102:	d00f      	beq.n	8124 <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    8104:	1e51      	subs	r1, r2, #1
    8106:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8108:	ea4f 13cc 	mov.w	r3, ip, lsl #7
    810c:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    8110:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    8114:	fa55 f383 	uxtab	r3, r5, r3
    8118:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
    811c:	4291      	cmp	r1, r2
    811e:	d1f3      	bne.n	8108 <FatFile::openNext(FatFile*, int)+0x6c>
    8120:	45e3      	cmp	fp, ip
    8122:	d112      	bne.n	814a <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    8124:	f8cd 9000 	str.w	r9, [sp]
    8128:	4653      	mov	r3, sl
    812a:	f3c8 124f 	ubfx	r2, r8, #5, #16
    812e:	4621      	mov	r1, r4
    8130:	4630      	mov	r0, r6
    8132:	f7ff ff46 	bl	7fc2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8136:	e008      	b.n	814a <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8138:	f013 0f40 	tst.w	r3, #64	; 0x40
    813c:	d0c4      	beq.n	80c8 <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
    813e:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
    8142:	f892 b00d 	ldrb.w	fp, [r2, #13]
    8146:	e7bf      	b.n	80c8 <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
    8148:	2000      	movs	r0, #0
}
    814a:	b003      	add	sp, #12
    814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8150:	2000      	movs	r0, #0
    8152:	e7fa      	b.n	814a <FatFile::openNext(FatFile*, int)+0xae>
    8154:	2000      	movs	r0, #0
    8156:	e7f8      	b.n	814a <FatFile::openNext(FatFile*, int)+0xae>
    8158:	2000      	movs	r0, #0
    815a:	e7f6      	b.n	814a <FatFile::openNext(FatFile*, int)+0xae>
    815c:	2000      	movs	r0, #0
    815e:	e7f4      	b.n	814a <FatFile::openNext(FatFile*, int)+0xae>

00008160 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    8160:	7803      	ldrb	r3, [r0, #0]
    8162:	2b00      	cmp	r3, #0
    8164:	d049      	beq.n	81fa <FatFile::sync()+0x9a>
bool FatFile::sync() {
    8166:	b530      	push	{r4, r5, lr}
    8168:	b083      	sub	sp, #12
    816a:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    816c:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8170:	2b00      	cmp	r3, #0
    8172:	db0d      	blt.n	8190 <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    8174:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8176:	f105 0028 	add.w	r0, r5, #40	; 0x28
    817a:	f003 ff19 	bl	bfb0 <FsCache::sync()>
    817e:	2800      	cmp	r0, #0
    8180:	d12e      	bne.n	81e0 <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    8182:	7863      	ldrb	r3, [r4, #1]
    8184:	f043 0301 	orr.w	r3, r3, #1
    8188:	7063      	strb	r3, [r4, #1]
  return false;
    818a:	2000      	movs	r0, #0
}
    818c:	b003      	add	sp, #12
    818e:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8190:	2101      	movs	r1, #1
    8192:	f7ff fd47 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    8196:	4605      	mov	r5, r0
    8198:	2800      	cmp	r0, #0
    819a:	d0f2      	beq.n	8182 <FatFile::sync()+0x22>
    819c:	7803      	ldrb	r3, [r0, #0]
    819e:	2be5      	cmp	r3, #229	; 0xe5
    81a0:	d0ef      	beq.n	8182 <FatFile::sync()+0x22>
    if (isFile()) {
    81a2:	7823      	ldrb	r3, [r4, #0]
    81a4:	f013 0f08 	tst.w	r3, #8
    81a8:	d001      	beq.n	81ae <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
    81aa:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    81ac:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    81ae:	6a23      	ldr	r3, [r4, #32]
    81b0:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    81b2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    81b4:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
    81b6:	4b12      	ldr	r3, [pc, #72]	; (8200 <FatFile::sync()+0xa0>)
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	b163      	cbz	r3, 81d6 <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
    81bc:	f10d 0203 	add.w	r2, sp, #3
    81c0:	a901      	add	r1, sp, #4
    81c2:	f10d 0006 	add.w	r0, sp, #6
    81c6:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    81c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    81cc:	832b      	strh	r3, [r5, #24]
    81ce:	826b      	strh	r3, [r5, #18]
    81d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    81d4:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    81d6:	78a3      	ldrb	r3, [r4, #2]
    81d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    81dc:	70a3      	strb	r3, [r4, #2]
    81de:	e7c9      	b.n	8174 <FatFile::sync()+0x14>
    81e0:	f505 700e 	add.w	r0, r5, #568	; 0x238
    81e4:	f003 fee4 	bl	bfb0 <FsCache::sync()>
    81e8:	2800      	cmp	r0, #0
    81ea:	d0ca      	beq.n	8182 <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
    81ec:	6828      	ldr	r0, [r5, #0]
    81ee:	6803      	ldr	r3, [r0, #0]
    81f0:	6a1b      	ldr	r3, [r3, #32]
    81f2:	4798      	blx	r3
  if (m_vol->cacheSync()) {
    81f4:	2800      	cmp	r0, #0
    81f6:	d1c9      	bne.n	818c <FatFile::sync()+0x2c>
 fail:
    81f8:	e7c3      	b.n	8182 <FatFile::sync()+0x22>
    return true;
    81fa:	2001      	movs	r0, #1
}
    81fc:	4770      	bx	lr
    81fe:	bf00      	nop
    8200:	200050c4 	.word	0x200050c4

00008204 <FatFile::close()>:
bool FatFile::close() {
    8204:	b510      	push	{r4, lr}
    8206:	4604      	mov	r4, r0
  bool rtn = sync();
    8208:	f7ff ffaa 	bl	8160 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    820c:	2300      	movs	r3, #0
    820e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8210:	70a3      	strb	r3, [r4, #2]
}
    8212:	bd10      	pop	{r4, pc}

00008214 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8214:	b5f0      	push	{r4, r5, r6, r7, lr}
    8216:	b095      	sub	sp, #84	; 0x54
    8218:	9201      	str	r2, [sp, #4]
    821a:	461f      	mov	r7, r3
  FatFile() {}
    821c:	2300      	movs	r3, #0
    821e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    8222:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    8226:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    822a:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    822e:	7803      	ldrb	r3, [r0, #0]
    8230:	2b00      	cmp	r3, #0
    8232:	d14e      	bne.n	82d2 <FatFile::open(FatFile*, char const*, int)+0xbe>
    8234:	4604      	mov	r4, r0
    8236:	460d      	mov	r5, r1
    8238:	780b      	ldrb	r3, [r1, #0]
    823a:	f013 0f70 	tst.w	r3, #112	; 0x70
    823e:	d04c      	beq.n	82da <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
    8240:	4613      	mov	r3, r2
    8242:	7812      	ldrb	r2, [r2, #0]
    8244:	2a2f      	cmp	r2, #47	; 0x2f
    8246:	d028      	beq.n	829a <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8248:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
    824a:	ab01      	add	r3, sp, #4
    824c:	aa02      	add	r2, sp, #8
    824e:	9901      	ldr	r1, [sp, #4]
    8250:	4620      	mov	r0, r4
    8252:	f000 ffbb 	bl	91cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8256:	4603      	mov	r3, r0
    8258:	2800      	cmp	r0, #0
    825a:	d03b      	beq.n	82d4 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
    825c:	9b01      	ldr	r3, [sp, #4]
    825e:	781b      	ldrb	r3, [r3, #0]
    8260:	b37b      	cbz	r3, 82c2 <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8262:	4633      	mov	r3, r6
    8264:	aa02      	add	r2, sp, #8
    8266:	4629      	mov	r1, r5
    8268:	4620      	mov	r0, r4
    826a:	f000 fe2f 	bl	8ecc <FatFile::open(FatFile*, FatLfn_t*, int)>
    826e:	4603      	mov	r3, r0
    8270:	b380      	cbz	r0, 82d4 <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
    8272:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    8276:	46a6      	mov	lr, r4
    8278:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    827c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8280:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8288:	f8de 3000 	ldr.w	r3, [lr]
    828c:	f8cc 3000 	str.w	r3, [ip]
    close();
    8290:	4620      	mov	r0, r4
    8292:	f7ff ffb7 	bl	8204 <FatFile::close()>
    dirFile = &tmpDir;
    8296:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    8298:	e7d7      	b.n	824a <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
    829a:	3301      	adds	r3, #1
    829c:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    829e:	781a      	ldrb	r2, [r3, #0]
    82a0:	2a2f      	cmp	r2, #47	; 0x2f
    82a2:	d0fa      	beq.n	829a <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
    82a4:	b92a      	cbnz	r2, 82b2 <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
    82a6:	68a9      	ldr	r1, [r5, #8]
    82a8:	4620      	mov	r0, r4
    82aa:	f7ff fccc 	bl	7c46 <FatFile::openRoot(FatVolume*)>
    82ae:	4603      	mov	r3, r0
    82b0:	e010      	b.n	82d4 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    82b2:	68a9      	ldr	r1, [r5, #8]
    82b4:	a80b      	add	r0, sp, #44	; 0x2c
    82b6:	f7ff fcc6 	bl	7c46 <FatFile::openRoot(FatVolume*)>
    82ba:	4603      	mov	r3, r0
    82bc:	b150      	cbz	r0, 82d4 <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
    82be:	ad0b      	add	r5, sp, #44	; 0x2c
    82c0:	e7c2      	b.n	8248 <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
    82c2:	463b      	mov	r3, r7
    82c4:	aa02      	add	r2, sp, #8
    82c6:	4629      	mov	r1, r5
    82c8:	4620      	mov	r0, r4
    82ca:	f000 fdff 	bl	8ecc <FatFile::open(FatFile*, FatLfn_t*, int)>
    82ce:	4603      	mov	r3, r0
    82d0:	e000      	b.n	82d4 <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
    82d2:	2300      	movs	r3, #0
}
    82d4:	4618      	mov	r0, r3
    82d6:	b015      	add	sp, #84	; 0x54
    82d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    82da:	2300      	movs	r3, #0
    82dc:	e7fa      	b.n	82d4 <FatFile::open(FatFile*, char const*, int)+0xc0>

000082de <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    82de:	b129      	cbz	r1, 82ec <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
    82e0:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    82e2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    82e6:	f7ff ff95 	bl	8214 <FatFile::open(FatFile*, char const*, int)>
}
    82ea:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    82ec:	2000      	movs	r0, #0
}
    82ee:	4770      	bx	lr

000082f0 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    82f0:	b570      	push	{r4, r5, r6, lr}
    82f2:	4605      	mov	r5, r0
    82f4:	460c      	mov	r4, r1
  if (!sync()) {
    82f6:	f7ff ff33 	bl	8160 <FatFile::sync()>
    82fa:	4606      	mov	r6, r0
    82fc:	b908      	cbnz	r0, 8302 <FatFile::dirEntry(DirFat_t*)+0x12>
}
    82fe:	4630      	mov	r0, r6
    8300:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    8302:	2100      	movs	r1, #0
    8304:	4628      	mov	r0, r5
    8306:	f7ff fc8d 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    830a:	4603      	mov	r3, r0
    830c:	b180      	cbz	r0, 8330 <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
    830e:	6805      	ldr	r5, [r0, #0]
    8310:	6840      	ldr	r0, [r0, #4]
    8312:	6899      	ldr	r1, [r3, #8]
    8314:	68da      	ldr	r2, [r3, #12]
    8316:	6025      	str	r5, [r4, #0]
    8318:	6060      	str	r0, [r4, #4]
    831a:	60a1      	str	r1, [r4, #8]
    831c:	60e2      	str	r2, [r4, #12]
    831e:	691d      	ldr	r5, [r3, #16]
    8320:	6958      	ldr	r0, [r3, #20]
    8322:	6999      	ldr	r1, [r3, #24]
    8324:	69da      	ldr	r2, [r3, #28]
    8326:	6125      	str	r5, [r4, #16]
    8328:	6160      	str	r0, [r4, #20]
    832a:	61a1      	str	r1, [r4, #24]
    832c:	61e2      	str	r2, [r4, #28]
  return true;
    832e:	e7e6      	b.n	82fe <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
    8330:	2600      	movs	r6, #0
    8332:	e7e4      	b.n	82fe <FatFile::dirEntry(DirFat_t*)+0xe>

00008334 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    8334:	b530      	push	{r4, r5, lr}
    8336:	b089      	sub	sp, #36	; 0x24
    8338:	460d      	mov	r5, r1
    833a:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    833c:	4669      	mov	r1, sp
    833e:	f7ff ffd7 	bl	82f0 <FatFile::dirEntry(DirFat_t*)>
    8342:	b128      	cbz	r0, 8350 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    8344:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8348:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    834a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    834e:	8023      	strh	r3, [r4, #0]
}
    8350:	b009      	add	sp, #36	; 0x24
    8352:	bd30      	pop	{r4, r5, pc}

00008354 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    8354:	b530      	push	{r4, r5, lr}
    8356:	b089      	sub	sp, #36	; 0x24
    8358:	460d      	mov	r5, r1
    835a:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    835c:	4669      	mov	r1, sp
    835e:	f7ff ffc7 	bl	82f0 <FatFile::dirEntry(DirFat_t*)>
    8362:	b128      	cbz	r0, 8370 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    8364:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    8368:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    836a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    836e:	8023      	strh	r3, [r4, #0]
}
    8370:	b009      	add	sp, #36	; 0x24
    8372:	bd30      	pop	{r4, r5, pc}

00008374 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    8374:	780b      	ldrb	r3, [r1, #0]
    8376:	f013 0f70 	tst.w	r3, #112	; 0x70
    837a:	d101      	bne.n	8380 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
    837c:	2000      	movs	r0, #0
}
    837e:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8380:	b5f0      	push	{r4, r5, r6, r7, lr}
    8382:	b089      	sub	sp, #36	; 0x24
    8384:	4604      	mov	r4, r0
    8386:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8388:	f640 2302 	movw	r3, #2562	; 0xa02
    838c:	f000 fd9e 	bl	8ecc <FatFile::open(FatFile*, FatLfn_t*, int)>
    8390:	b908      	cbnz	r0, 8396 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
    8392:	b009      	add	sp, #36	; 0x24
    8394:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
    8396:	2301      	movs	r3, #1
    8398:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    839a:	2310      	movs	r3, #16
    839c:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    839e:	4620      	mov	r0, r4
    83a0:	f7ff fbfe 	bl	7ba0 <FatFile::addDirCluster()>
    83a4:	2800      	cmp	r0, #0
    83a6:	d0f4      	beq.n	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
    83a8:	6923      	ldr	r3, [r4, #16]
    83aa:	6223      	str	r3, [r4, #32]
    seekSet(0);
    83ac:	2100      	movs	r1, #0
    83ae:	4620      	mov	r0, r4
    83b0:	f7ff fd88 	bl	7ec4 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    83b4:	4620      	mov	r0, r4
    83b6:	f7ff fed3 	bl	8160 <FatFile::sync()>
    83ba:	2800      	cmp	r0, #0
    83bc:	d0e9      	beq.n	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    83be:	2101      	movs	r1, #1
    83c0:	4620      	mov	r0, r4
    83c2:	f7ff fc2f 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    83c6:	4686      	mov	lr, r0
    83c8:	2800      	cmp	r0, #0
    83ca:	d07b      	beq.n	84c4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    83cc:	2310      	movs	r3, #16
    83ce:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    83d0:	46ec      	mov	ip, sp
    83d2:	6800      	ldr	r0, [r0, #0]
    83d4:	f8de 1004 	ldr.w	r1, [lr, #4]
    83d8:	f8de 2008 	ldr.w	r2, [lr, #8]
    83dc:	f8de 300c 	ldr.w	r3, [lr, #12]
    83e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    83e4:	f8de 0010 	ldr.w	r0, [lr, #16]
    83e8:	f8de 1014 	ldr.w	r1, [lr, #20]
    83ec:	f8de 2018 	ldr.w	r2, [lr, #24]
    83f0:	f8de 301c 	ldr.w	r3, [lr, #28]
    83f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    83f8:	f8be 6014 	ldrh.w	r6, [lr, #20]
    83fc:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
    8400:	232e      	movs	r3, #46	; 0x2e
    8402:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    8406:	466b      	mov	r3, sp
    8408:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
    840c:	2220      	movs	r2, #32
    840e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
    8412:	428b      	cmp	r3, r1
    8414:	d1fb      	bne.n	840e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
    8416:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8418:	6a23      	ldr	r3, [r4, #32]
    841a:	3b02      	subs	r3, #2
    841c:	7982      	ldrb	r2, [r0, #6]
    841e:	4093      	lsls	r3, r2
    8420:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    8422:	2201      	movs	r2, #1
    8424:	4419      	add	r1, r3
    8426:	3028      	adds	r0, #40	; 0x28
    8428:	f003 fde9 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    842c:	4684      	mov	ip, r0
    842e:	2800      	cmp	r0, #0
    8430:	d04a      	beq.n	84c8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
    8432:	f8ad 6014 	strh.w	r6, [sp, #20]
    8436:	f8ad 701a 	strh.w	r7, [sp, #26]
    843a:	46ee      	mov	lr, sp
    843c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8440:	f8cc 0000 	str.w	r0, [ip]
    8444:	f8cc 1004 	str.w	r1, [ip, #4]
    8448:	f8cc 2008 	str.w	r2, [ip, #8]
    844c:	f8cc 300c 	str.w	r3, [ip, #12]
    8450:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8454:	f8cc 0010 	str.w	r0, [ip, #16]
    8458:	f8cc 1014 	str.w	r1, [ip, #20]
    845c:	f8cc 2018 	str.w	r2, [ip, #24]
    8460:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
    8464:	232e      	movs	r3, #46	; 0x2e
    8466:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    846a:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    846c:	0c1a      	lsrs	r2, r3, #16
    846e:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8472:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    8476:	466d      	mov	r5, sp
    8478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    847a:	f8cc 0020 	str.w	r0, [ip, #32]
    847e:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    8482:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    8486:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    848a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    848c:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    8490:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    8494:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    8498:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    849c:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    849e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    84a2:	f003 fd85 	bl	bfb0 <FsCache::sync()>
    84a6:	2800      	cmp	r0, #0
    84a8:	f43f af73 	beq.w	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    84ac:	f504 700e 	add.w	r0, r4, #568	; 0x238
    84b0:	f003 fd7e 	bl	bfb0 <FsCache::sync()>
    84b4:	2800      	cmp	r0, #0
    84b6:	f43f af6c 	beq.w	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
    84ba:	6820      	ldr	r0, [r4, #0]
    84bc:	6803      	ldr	r3, [r0, #0]
    84be:	6a1b      	ldr	r3, [r3, #32]
    84c0:	4798      	blx	r3
    84c2:	e766      	b.n	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
    84c4:	2000      	movs	r0, #0
    84c6:	e764      	b.n	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    84c8:	2000      	movs	r0, #0
    84ca:	e762      	b.n	8392 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

000084cc <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    84cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ce:	b095      	sub	sp, #84	; 0x54
    84d0:	9201      	str	r2, [sp, #4]
    84d2:	461e      	mov	r6, r3
    84d4:	2300      	movs	r3, #0
    84d6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
    84da:	f88d 3008 	strb.w	r3, [sp, #8]
    84de:	f88d 3009 	strb.w	r3, [sp, #9]
    84e2:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
    84e6:	7803      	ldrb	r3, [r0, #0]
    84e8:	2b00      	cmp	r3, #0
    84ea:	d150      	bne.n	858e <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    84ec:	4604      	mov	r4, r0
    84ee:	460d      	mov	r5, r1
    84f0:	780b      	ldrb	r3, [r1, #0]
    84f2:	f013 0f70 	tst.w	r3, #112	; 0x70
    84f6:	d04e      	beq.n	8596 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
    84f8:	4613      	mov	r3, r2
    84fa:	7812      	ldrb	r2, [r2, #0]
    84fc:	2a2f      	cmp	r2, #47	; 0x2f
    84fe:	d001      	beq.n	8504 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
    8500:	2700      	movs	r7, #0
    8502:	e020      	b.n	8546 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
    8504:	3301      	adds	r3, #1
    8506:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    8508:	781a      	ldrb	r2, [r3, #0]
    850a:	2a2f      	cmp	r2, #47	; 0x2f
    850c:	d0fa      	beq.n	8504 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
    850e:	68a9      	ldr	r1, [r5, #8]
    8510:	a802      	add	r0, sp, #8
    8512:	f7ff fb98 	bl	7c46 <FatFile::openRoot(FatVolume*)>
    8516:	4602      	mov	r2, r0
    8518:	2800      	cmp	r0, #0
    851a:	d039      	beq.n	8590 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
    851c:	ad02      	add	r5, sp, #8
    851e:	e7ef      	b.n	8500 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
    8520:	f10d 0c08 	add.w	ip, sp, #8
    8524:	46a6      	mov	lr, r4
    8526:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    852a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    852e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8536:	f8de 3000 	ldr.w	r3, [lr]
    853a:	f8cc 3000 	str.w	r3, [ip]
    close();
    853e:	4620      	mov	r0, r4
    8540:	f7ff fe60 	bl	8204 <FatFile::close()>
    parent = &tmpDir;
    8544:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    8546:	ab01      	add	r3, sp, #4
    8548:	aa0b      	add	r2, sp, #44	; 0x2c
    854a:	9901      	ldr	r1, [sp, #4]
    854c:	4620      	mov	r0, r4
    854e:	f000 fe3d 	bl	91cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8552:	4602      	mov	r2, r0
    8554:	b1e0      	cbz	r0, 8590 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
    8556:	9b01      	ldr	r3, [sp, #4]
    8558:	781b      	ldrb	r3, [r3, #0]
    855a:	b18b      	cbz	r3, 8580 <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
    855c:	463b      	mov	r3, r7
    855e:	aa0b      	add	r2, sp, #44	; 0x2c
    8560:	4629      	mov	r1, r5
    8562:	4620      	mov	r0, r4
    8564:	f000 fcb2 	bl	8ecc <FatFile::open(FatFile*, FatLfn_t*, int)>
    8568:	2800      	cmp	r0, #0
    856a:	d1d9      	bne.n	8520 <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
    856c:	b1ae      	cbz	r6, 859a <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
    856e:	aa0b      	add	r2, sp, #44	; 0x2c
    8570:	4629      	mov	r1, r5
    8572:	4620      	mov	r0, r4
    8574:	f7ff fefe 	bl	8374 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    8578:	4602      	mov	r2, r0
    857a:	2800      	cmp	r0, #0
    857c:	d1d0      	bne.n	8520 <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
    857e:	e007      	b.n	8590 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
    8580:	aa0b      	add	r2, sp, #44	; 0x2c
    8582:	4629      	mov	r1, r5
    8584:	4620      	mov	r0, r4
    8586:	f7ff fef5 	bl	8374 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    858a:	4602      	mov	r2, r0
    858c:	e000      	b.n	8590 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
    858e:	2200      	movs	r2, #0
}
    8590:	4610      	mov	r0, r2
    8592:	b015      	add	sp, #84	; 0x54
    8594:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    8596:	2200      	movs	r2, #0
    8598:	e7fa      	b.n	8590 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    859a:	4632      	mov	r2, r6
    859c:	e7f8      	b.n	8590 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

0000859e <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    859e:	b570      	push	{r4, r5, r6, lr}
    85a0:	b09a      	sub	sp, #104	; 0x68
    85a2:	2300      	movs	r3, #0
    85a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    85a8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    85ac:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    85b0:	f88d 3000 	strb.w	r3, [sp]
    85b4:	f88d 3001 	strb.w	r3, [sp, #1]
    85b8:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
    85bc:	7803      	ldrb	r3, [r0, #0]
    85be:	f013 0f18 	tst.w	r3, #24
    85c2:	f000 80e3 	beq.w	878c <FatFile::rename(FatFile*, char const*)+0x1ee>
    85c6:	4604      	mov	r4, r0
    85c8:	460d      	mov	r5, r1
    85ca:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
    85cc:	6882      	ldr	r2, [r0, #8]
    85ce:	688b      	ldr	r3, [r1, #8]
    85d0:	429a      	cmp	r2, r3
    85d2:	d002      	beq.n	85da <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
    85d4:	2000      	movs	r0, #0
}
    85d6:	b01a      	add	sp, #104	; 0x68
    85d8:	bd70      	pop	{r4, r5, r6, pc}
  sync();
    85da:	f7ff fdc1 	bl	8160 <FatFile::sync()>
  oldFile = *this;
    85de:	46ec      	mov	ip, sp
    85e0:	46a6      	mov	lr, r4
    85e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    85e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    85ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    85ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    85f2:	f8de 3000 	ldr.w	r3, [lr]
    85f6:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    85fa:	2100      	movs	r1, #0
    85fc:	4620      	mov	r0, r4
    85fe:	f7ff fb11 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8602:	4686      	mov	lr, r0
    8604:	2800      	cmp	r0, #0
    8606:	f000 80c3 	beq.w	8790 <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
    860a:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    860e:	6800      	ldr	r0, [r0, #0]
    8610:	f8de 1004 	ldr.w	r1, [lr, #4]
    8614:	f8de 2008 	ldr.w	r2, [lr, #8]
    8618:	f8de 300c 	ldr.w	r3, [lr, #12]
    861c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8620:	f8de 0010 	ldr.w	r0, [lr, #16]
    8624:	f8de 1014 	ldr.w	r1, [lr, #20]
    8628:	f8de 2018 	ldr.w	r2, [lr, #24]
    862c:	f8de 301c 	ldr.w	r3, [lr, #28]
    8630:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8634:	7823      	ldrb	r3, [r4, #0]
    8636:	f013 0f08 	tst.w	r3, #8
    863a:	d00a      	beq.n	8652 <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    863c:	f640 2301 	movw	r3, #2561	; 0xa01
    8640:	4632      	mov	r2, r6
    8642:	4629      	mov	r1, r5
    8644:	a809      	add	r0, sp, #36	; 0x24
    8646:	f7ff fde5 	bl	8214 <FatFile::open(FatFile*, char const*, int)>
    864a:	2800      	cmp	r0, #0
    864c:	d0c3      	beq.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
    864e:	2600      	movs	r6, #0
    8650:	e008      	b.n	8664 <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
    8652:	2300      	movs	r3, #0
    8654:	4632      	mov	r2, r6
    8656:	4629      	mov	r1, r5
    8658:	a809      	add	r0, sp, #36	; 0x24
    865a:	f7ff ff37 	bl	84cc <FatFile::mkdir(FatFile*, char const*, bool)>
    865e:	2800      	cmp	r0, #0
    8660:	d0b9      	beq.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
    8662:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
    8664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8666:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    8668:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    866c:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    866e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8672:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    8674:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8676:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    8678:	2300      	movs	r3, #0
    867a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
    867e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8682:	2101      	movs	r1, #1
    8684:	4620      	mov	r0, r4
    8686:	f7ff facd 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    868a:	4603      	mov	r3, r0
    868c:	2800      	cmp	r0, #0
    868e:	f000 8081 	beq.w	8794 <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    8692:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
    8696:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
    869a:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
    869e:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
    86a2:	f8c3 500d 	str.w	r5, [r3, #13]
    86a6:	f8c3 0011 	str.w	r0, [r3, #17]
    86aa:	f8c3 1015 	str.w	r1, [r3, #21]
    86ae:	f8c3 2019 	str.w	r2, [r3, #25]
    86b2:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
    86b6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    86ba:	f8a3 101d 	strh.w	r1, [r3, #29]
    86be:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
    86c0:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
    86c4:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
    86c6:	2e00      	cmp	r6, #0
    86c8:	d03e      	beq.n	8748 <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    86ca:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    86cc:	1eb3      	subs	r3, r6, #2
    86ce:	7982      	ldrb	r2, [r0, #6]
    86d0:	4093      	lsls	r3, r2
    86d2:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    86d4:	2200      	movs	r2, #0
    86d6:	4419      	add	r1, r3
    86d8:	3028      	adds	r0, #40	; 0x28
    86da:	f003 fc90 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    86de:	4684      	mov	ip, r0
    86e0:	2800      	cmp	r0, #0
    86e2:	d059      	beq.n	8798 <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
    86e4:	ad12      	add	r5, sp, #72	; 0x48
    86e6:	6a00      	ldr	r0, [r0, #32]
    86e8:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
    86ec:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
    86f0:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    86f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    86f6:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
    86fa:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
    86fe:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
    8702:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    8706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    8708:	4631      	mov	r1, r6
    870a:	68a0      	ldr	r0, [r4, #8]
    870c:	f001 fbba 	bl	9e84 <FatPartition::freeChain(unsigned long)>
    8710:	2800      	cmp	r0, #0
    8712:	f43f af60 	beq.w	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
    8716:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8718:	6a23      	ldr	r3, [r4, #32]
    871a:	3b02      	subs	r3, #2
    871c:	7982      	ldrb	r2, [r0, #6]
    871e:	4093      	lsls	r3, r2
    8720:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    8722:	2201      	movs	r2, #1
    8724:	4419      	add	r1, r3
    8726:	3028      	adds	r0, #40	; 0x28
    8728:	f003 fc69 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    872c:	4606      	mov	r6, r0
    872e:	2800      	cmp	r0, #0
    8730:	d034      	beq.n	879c <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
    8732:	ad12      	add	r5, sp, #72	; 0x48
    8734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8736:	6230      	str	r0, [r6, #32]
    8738:	6271      	str	r1, [r6, #36]	; 0x24
    873a:	62b2      	str	r2, [r6, #40]	; 0x28
    873c:	62f3      	str	r3, [r6, #44]	; 0x2c
    873e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8740:	6330      	str	r0, [r6, #48]	; 0x30
    8742:	6371      	str	r1, [r6, #52]	; 0x34
    8744:	63b2      	str	r2, [r6, #56]	; 0x38
    8746:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8748:	2300      	movs	r3, #0
    874a:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
    874c:	2302      	movs	r3, #2
    874e:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
    8752:	2308      	movs	r3, #8
    8754:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
    8758:	4668      	mov	r0, sp
    875a:	f000 fda5 	bl	92a8 <FatFile::remove()>
    875e:	2800      	cmp	r0, #0
    8760:	f43f af39 	beq.w	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
    8764:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8766:	f104 0028 	add.w	r0, r4, #40	; 0x28
    876a:	f003 fc21 	bl	bfb0 <FsCache::sync()>
    876e:	2800      	cmp	r0, #0
    8770:	f43f af31 	beq.w	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    8774:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8778:	f003 fc1a 	bl	bfb0 <FsCache::sync()>
    877c:	2800      	cmp	r0, #0
    877e:	f43f af2a 	beq.w	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
    8782:	6820      	ldr	r0, [r4, #0]
    8784:	6803      	ldr	r3, [r0, #0]
    8786:	6a1b      	ldr	r3, [r3, #32]
    8788:	4798      	blx	r3
    878a:	e724      	b.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
    878c:	2000      	movs	r0, #0
    878e:	e722      	b.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    8790:	2000      	movs	r0, #0
    8792:	e720      	b.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    8794:	2000      	movs	r0, #0
    8796:	e71e      	b.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    8798:	2000      	movs	r0, #0
    879a:	e71c      	b.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>
    879c:	2000      	movs	r0, #0
    879e:	e71a      	b.n	85d6 <FatFile::rename(FatFile*, char const*)+0x38>

000087a0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    87a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87a4:	b083      	sub	sp, #12
    87a6:	9101      	str	r1, [sp, #4]
    87a8:	461e      	mov	r6, r3
    87aa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    87ae:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    87b2:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    87b6:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    87ba:	7803      	ldrb	r3, [r0, #0]
    87bc:	f013 0f08 	tst.w	r3, #8
    87c0:	d060      	beq.n	8884 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
    87c2:	4605      	mov	r5, r0
      || year > 2107
    87c4:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    87c8:	b294      	uxth	r4, r2
    87ca:	2c7f      	cmp	r4, #127	; 0x7f
    87cc:	d85e      	bhi.n	888c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
    87ce:	1e73      	subs	r3, r6, #1
    87d0:	b2db      	uxtb	r3, r3
    87d2:	2b0b      	cmp	r3, #11
    87d4:	d85c      	bhi.n	8890 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
    87d6:	1e7b      	subs	r3, r7, #1
    87d8:	b2db      	uxtb	r3, r3
    87da:	2b1e      	cmp	r3, #30
    87dc:	d85a      	bhi.n	8894 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
    87de:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    87e2:	bf98      	it	ls
    87e4:	f1b9 0f17 	cmpls.w	r9, #23
    87e8:	bf8c      	ite	hi
    87ea:	f04f 0b01 	movhi.w	fp, #1
    87ee:	f04f 0b00 	movls.w	fp, #0
    87f2:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    87f6:	bf88      	it	hi
    87f8:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
    87fc:	f1bb 0f00 	cmp.w	fp, #0
    8800:	d001      	beq.n	8806 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    8802:	2000      	movs	r0, #0
    8804:	e03f      	b.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
    8806:	f7ff fcab 	bl	8160 <FatFile::sync()>
    880a:	2800      	cmp	r0, #0
    880c:	d03b      	beq.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    880e:	2101      	movs	r1, #1
    8810:	4628      	mov	r0, r5
    8812:	f7ff fa07 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8816:	4601      	mov	r1, r0
    8818:	2800      	cmp	r0, #0
    881a:	d03d      	beq.n	8898 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    881c:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
    8820:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    8824:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    8826:	ea4f 0258 	mov.w	r2, r8, lsr #1
    882a:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
    882e:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
    8832:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
    8834:	9801      	ldr	r0, [sp, #4]
    8836:	f010 0f01 	tst.w	r0, #1
    883a:	bf18      	it	ne
    883c:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
    883e:	9801      	ldr	r0, [sp, #4]
    8840:	f010 0f02 	tst.w	r0, #2
    8844:	d008      	beq.n	8858 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
    8846:	820b      	strh	r3, [r1, #16]
    8848:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
    884a:	f018 0801 	ands.w	r8, r8, #1
    884e:	bf18      	it	ne
    8850:	f04f 0864 	movne.w	r8, #100	; 0x64
    8854:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
    8858:	9801      	ldr	r0, [sp, #4]
    885a:	f010 0f04 	tst.w	r0, #4
    885e:	d001      	beq.n	8864 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
    8860:	830b      	strh	r3, [r1, #24]
    8862:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
    8864:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8866:	f104 0028 	add.w	r0, r4, #40	; 0x28
    886a:	f003 fba1 	bl	bfb0 <FsCache::sync()>
    886e:	b150      	cbz	r0, 8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8870:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8874:	f003 fb9c 	bl	bfb0 <FsCache::sync()>
    8878:	b128      	cbz	r0, 8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
    887a:	6820      	ldr	r0, [r4, #0]
    887c:	6803      	ldr	r3, [r0, #0]
    887e:	6a1b      	ldr	r3, [r3, #32]
    8880:	4798      	blx	r3
    8882:	e000      	b.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
    8884:	2000      	movs	r0, #0
}
    8886:	b003      	add	sp, #12
    8888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    888c:	2000      	movs	r0, #0
    888e:	e7fa      	b.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8890:	2000      	movs	r0, #0
    8892:	e7f8      	b.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8894:	2000      	movs	r0, #0
    8896:	e7f6      	b.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8898:	4658      	mov	r0, fp
    889a:	e7f4      	b.n	8886 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

0000889c <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    889c:	7883      	ldrb	r3, [r0, #2]
    889e:	f013 0f02 	tst.w	r3, #2
    88a2:	d02f      	beq.n	8904 <FatFile::truncate()+0x68>
bool FatFile::truncate() {
    88a4:	b510      	push	{r4, lr}
    88a6:	b082      	sub	sp, #8
    88a8:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    88aa:	6a01      	ldr	r1, [r0, #32]
    88ac:	b361      	cbz	r1, 8908 <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
    88ae:	6903      	ldr	r3, [r0, #16]
    88b0:	b93b      	cbnz	r3, 88c2 <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    88b2:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
    88b4:	2300      	movs	r3, #0
    88b6:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    88b8:	68a0      	ldr	r0, [r4, #8]
    88ba:	f001 fae3 	bl	9e84 <FatPartition::freeChain(unsigned long)>
    88be:	b968      	cbnz	r0, 88dc <FatFile::truncate()+0x40>
    88c0:	e015      	b.n	88ee <FatFile::truncate()+0x52>
    toFree = 0;
    88c2:	2200      	movs	r2, #0
    88c4:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    88c6:	aa01      	add	r2, sp, #4
    88c8:	4619      	mov	r1, r3
    88ca:	6880      	ldr	r0, [r0, #8]
    88cc:	f001 f971 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    88d0:	2800      	cmp	r0, #0
    88d2:	db1b      	blt.n	890c <FatFile::truncate()+0x70>
    if (fg) {
    88d4:	b968      	cbnz	r0, 88f2 <FatFile::truncate()+0x56>
  if (toFree) {
    88d6:	9901      	ldr	r1, [sp, #4]
    88d8:	2900      	cmp	r1, #0
    88da:	d1ed      	bne.n	88b8 <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    88dc:	6963      	ldr	r3, [r4, #20]
    88de:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    88e0:	78a3      	ldrb	r3, [r4, #2]
    88e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    88e6:	70a3      	strb	r3, [r4, #2]
  return sync();
    88e8:	4620      	mov	r0, r4
    88ea:	f7ff fc39 	bl	8160 <FatFile::sync()>

 fail:
  return false;
}
    88ee:	b002      	add	sp, #8
    88f0:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    88f2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    88f6:	6921      	ldr	r1, [r4, #16]
    88f8:	68a0      	ldr	r0, [r4, #8]
    88fa:	f001 f9e9 	bl	9cd0 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    88fe:	2800      	cmp	r0, #0
    8900:	d1e9      	bne.n	88d6 <FatFile::truncate()+0x3a>
    8902:	e7f4      	b.n	88ee <FatFile::truncate()+0x52>
  return false;
    8904:	2000      	movs	r0, #0
}
    8906:	4770      	bx	lr
      return true;
    8908:	2001      	movs	r0, #1
    890a:	e7f0      	b.n	88ee <FatFile::truncate()+0x52>
  return false;
    890c:	2000      	movs	r0, #0
    890e:	e7ee      	b.n	88ee <FatFile::truncate()+0x52>

00008910 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    8910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8914:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    8916:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    8918:	f013 0f02 	tst.w	r3, #2
    891c:	d017      	beq.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
    891e:	4688      	mov	r8, r1
    8920:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    8922:	f013 0f08 	tst.w	r3, #8
    8926:	d10d      	bne.n	8944 <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    8928:	6963      	ldr	r3, [r4, #20]
    892a:	43db      	mvns	r3, r3
    892c:	454b      	cmp	r3, r9
    892e:	d30e      	bcc.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    8930:	f1b9 0f00 	cmp.w	r9, #0
    8934:	f000 80ac 	beq.w	8a90 <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
    8938:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    893a:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    893e:	f04f 0a01 	mov.w	sl, #1
    8942:	e064      	b.n	8a0e <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
    8944:	69c1      	ldr	r1, [r0, #28]
    8946:	f7ff fabd 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    894a:	2800      	cmp	r0, #0
    894c:	d1ec      	bne.n	8928 <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    894e:	7863      	ldrb	r3, [r4, #1]
    8950:	f043 0301 	orr.w	r3, r3, #1
    8954:	7063      	strb	r3, [r4, #1]
  return 0;
    8956:	2000      	movs	r0, #0
}
    8958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    895c:	465a      	mov	r2, fp
    895e:	f001 f928 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8962:	2800      	cmp	r0, #0
    8964:	dbf3      	blt.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
    8966:	b938      	cbnz	r0, 8978 <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
    8968:	4620      	mov	r0, r4
    896a:	f7ff f8fb 	bl	7b64 <FatFile::addCluster()>
    896e:	b918      	cbnz	r0, 8978 <FatFile::write(void const*, unsigned int)+0x68>
    8970:	e7ed      	b.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
    8972:	6a23      	ldr	r3, [r4, #32]
    8974:	b1eb      	cbz	r3, 89b2 <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
    8976:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8978:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    897a:	6921      	ldr	r1, [r4, #16]
    897c:	3902      	subs	r1, #2
    897e:	7983      	ldrb	r3, [r0, #6]
    8980:	4099      	lsls	r1, r3
    8982:	6943      	ldr	r3, [r0, #20]
    8984:	4419      	add	r1, r3
                      + sectorOfCluster;
    8986:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8988:	b916      	cbnz	r6, 8990 <FatFile::write(void const*, unsigned int)+0x80>
    898a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    898e:	d218      	bcs.n	89c2 <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
    8990:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    8994:	42bd      	cmp	r5, r7
    8996:	bf28      	it	cs
    8998:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
    899a:	bb16      	cbnz	r6, 89e2 <FatFile::write(void const*, unsigned int)+0xd2>
    899c:	6962      	ldr	r2, [r4, #20]
    899e:	69e3      	ldr	r3, [r4, #28]
    89a0:	429a      	cmp	r2, r3
    89a2:	d24b      	bcs.n	8a3c <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    89a4:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    89a6:	f013 0f20 	tst.w	r3, #32
    89aa:	bf0c      	ite	eq
    89ac:	2201      	moveq	r2, #1
    89ae:	2205      	movne	r2, #5
    89b0:	e018      	b.n	89e4 <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
    89b2:	4620      	mov	r0, r4
    89b4:	f7ff f8d6 	bl	7b64 <FatFile::addCluster()>
    89b8:	2800      	cmp	r0, #0
    89ba:	d0c8      	beq.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
    89bc:	6923      	ldr	r3, [r4, #16]
    89be:	6223      	str	r3, [r4, #32]
    89c0:	e7da      	b.n	8978 <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    89c2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    89c6:	d241      	bcs.n	8a4c <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
    89c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    89ca:	4299      	cmp	r1, r3
    89cc:	d059      	beq.n	8a82 <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
    89ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    89d0:	6803      	ldr	r3, [r0, #0]
    89d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89d4:	4642      	mov	r2, r8
    89d6:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    89d8:	2800      	cmp	r0, #0
    89da:	d0b8      	beq.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
    89dc:	f44f 7500 	mov.w	r5, #512	; 0x200
    89e0:	e00f      	b.n	8a02 <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    89e2:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
    89e4:	3028      	adds	r0, #40	; 0x28
    89e6:	f003 fb0a 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    89ea:	2800      	cmp	r0, #0
    89ec:	d0af      	beq.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
    89ee:	462a      	mov	r2, r5
    89f0:	4641      	mov	r1, r8
    89f2:	4430      	add	r0, r6
    89f4:	f004 feb0 	bl	d758 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    89f8:	68a0      	ldr	r0, [r4, #8]
    89fa:	442e      	add	r6, r5
    89fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8a00:	d01e      	beq.n	8a40 <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
    8a02:	6963      	ldr	r3, [r4, #20]
    8a04:	442b      	add	r3, r5
    8a06:	6163      	str	r3, [r4, #20]
    src += n;
    8a08:	44a8      	add	r8, r5
  while (nToWrite) {
    8a0a:	1b7f      	subs	r7, r7, r5
    8a0c:	d040      	beq.n	8a90 <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    8a0e:	68a0      	ldr	r0, [r4, #8]
    8a10:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
    8a12:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    8a14:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    8a18:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
    8a1c:	d1ac      	bne.n	8978 <FatFile::write(void const*, unsigned int)+0x68>
    8a1e:	2e00      	cmp	r6, #0
    8a20:	d1aa      	bne.n	8978 <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
    8a22:	6921      	ldr	r1, [r4, #16]
    8a24:	2900      	cmp	r1, #0
    8a26:	d0a4      	beq.n	8972 <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
    8a28:	78a2      	ldrb	r2, [r4, #2]
    8a2a:	f012 0f40 	tst.w	r2, #64	; 0x40
    8a2e:	d095      	beq.n	895c <FatFile::write(void const*, unsigned int)+0x4c>
    8a30:	69e2      	ldr	r2, [r4, #28]
    8a32:	4293      	cmp	r3, r2
    8a34:	d292      	bcs.n	895c <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
    8a36:	3101      	adds	r1, #1
    8a38:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
    8a3a:	e79d      	b.n	8978 <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8a3c:	2205      	movs	r2, #5
    8a3e:	e7d1      	b.n	89e4 <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
    8a40:	3028      	adds	r0, #40	; 0x28
    8a42:	f003 fab5 	bl	bfb0 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    8a46:	2800      	cmp	r0, #0
    8a48:	d1db      	bne.n	8a02 <FatFile::write(void const*, unsigned int)+0xf2>
    8a4a:	e780      	b.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8a4c:	7903      	ldrb	r3, [r0, #4]
    8a4e:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    8a50:	0a7a      	lsrs	r2, r7, #9
    8a52:	4293      	cmp	r3, r2
    8a54:	bf28      	it	cs
    8a56:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    8a58:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    8a5a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    8a5c:	4291      	cmp	r1, r2
    8a5e:	d808      	bhi.n	8a72 <FatFile::write(void const*, unsigned int)+0x162>
    8a60:	18ce      	adds	r6, r1, r3
    8a62:	42b2      	cmp	r2, r6
    8a64:	d205      	bcs.n	8a72 <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
    8a66:	2200      	movs	r2, #0
    8a68:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8a70:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    8a72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8a74:	6802      	ldr	r2, [r0, #0]
    8a76:	6a96      	ldr	r6, [r2, #40]	; 0x28
    8a78:	4642      	mov	r2, r8
    8a7a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d1c0      	bne.n	8a02 <FatFile::write(void const*, unsigned int)+0xf2>
    8a80:	e765      	b.n	894e <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
    8a82:	2300      	movs	r3, #0
    8a84:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a8c:	6343      	str	r3, [r0, #52]	; 0x34
  }
    8a8e:	e79e      	b.n	89ce <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
    8a90:	6963      	ldr	r3, [r4, #20]
    8a92:	69e2      	ldr	r2, [r4, #28]
    8a94:	4293      	cmp	r3, r2
    8a96:	d906      	bls.n	8aa6 <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
    8a98:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8a9a:	78a3      	ldrb	r3, [r4, #2]
    8a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8aa0:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    8aa2:	4648      	mov	r0, r9
    8aa4:	e758      	b.n	8958 <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
    8aa6:	4b05      	ldr	r3, [pc, #20]	; (8abc <FatFile::write(void const*, unsigned int)+0x1ac>)
    8aa8:	681b      	ldr	r3, [r3, #0]
    8aaa:	b12b      	cbz	r3, 8ab8 <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8aac:	78a3      	ldrb	r3, [r4, #2]
    8aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8ab2:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    8ab4:	4648      	mov	r0, r9
    8ab6:	e74f      	b.n	8958 <FatFile::write(void const*, unsigned int)+0x48>
    8ab8:	4648      	mov	r0, r9
    8aba:	e74d      	b.n	8958 <FatFile::write(void const*, unsigned int)+0x48>
    8abc:	200050c4 	.word	0x200050c4

00008ac0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ac4:	b08d      	sub	sp, #52	; 0x34
    8ac6:	4680      	mov	r8, r0
    8ac8:	9100      	str	r1, [sp, #0]
    8aca:	4614      	mov	r4, r2
    8acc:	461f      	mov	r7, r3
  FatFile dir = *this;
    8ace:	ad03      	add	r5, sp, #12
    8ad0:	4606      	mov	r6, r0
    8ad2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8ad6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8ada:	6833      	ldr	r3, [r6, #0]
    8adc:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    8ade:	6823      	ldr	r3, [r4, #0]
    8ae0:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    8ae2:	2300      	movs	r3, #0
    8ae4:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8ae6:	9701      	str	r7, [sp, #4]
    8ae8:	2f00      	cmp	r7, #0
    8aea:	d040      	beq.n	8b6e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
    8aec:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8af0:	9b00      	ldr	r3, [sp, #0]
    8af2:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8af6:	b289      	uxth	r1, r1
    8af8:	0149      	lsls	r1, r1, #5
    8afa:	a803      	add	r0, sp, #12
    8afc:	f7ff f9e2 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    8b00:	4682      	mov	sl, r0
    8b02:	b340      	cbz	r0, 8b56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
    8b04:	2100      	movs	r1, #0
    8b06:	a803      	add	r0, sp, #12
    8b08:	f7ff f9ba 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!ldir) {
    8b0c:	4681      	mov	r9, r0
    8b0e:	b388      	cbz	r0, 8b74 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
    8b10:	2600      	movs	r6, #0
    8b12:	e00f      	b.n	8b34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    8b14:	4620      	mov	r0, r4
    8b16:	f003 fab1 	bl	c07c <FsName::get16()>
    8b1a:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    8b1c:	4628      	mov	r0, r5
    8b1e:	f003 fbcb 	bl	c2b8 <toUpcase(unsigned short)>
    8b22:	4605      	mov	r5, r0
    8b24:	4638      	mov	r0, r7
    8b26:	f003 fbc7 	bl	c2b8 <toUpcase(unsigned short)>
    8b2a:	4285      	cmp	r5, r0
    8b2c:	d125      	bne.n	8b7a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
    8b2e:	3601      	adds	r6, #1
    8b30:	2e0d      	cmp	r6, #13
    8b32:	d014      	beq.n	8b5e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
    8b34:	b2f2      	uxtb	r2, r6
    8b36:	4649      	mov	r1, r9
    8b38:	4640      	mov	r0, r8
    8b3a:	f000 ff19 	bl	9970 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    8b3e:	4605      	mov	r5, r0
    return !ls && next == end;
    8b40:	89a3      	ldrh	r3, [r4, #12]
    8b42:	2b00      	cmp	r3, #0
    8b44:	d1e6      	bne.n	8b14 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
    8b46:	6862      	ldr	r2, [r4, #4]
    8b48:	68a3      	ldr	r3, [r4, #8]
    8b4a:	429a      	cmp	r2, r3
    8b4c:	d1e2      	bne.n	8b14 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
    8b4e:	fab0 fa80 	clz	sl, r0
    8b52:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
    8b56:	4650      	mov	r0, sl
    8b58:	b00d      	add	sp, #52	; 0x34
    8b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8b5e:	f10b 0b01 	add.w	fp, fp, #1
    8b62:	fa5f fb8b 	uxtb.w	fp, fp
    8b66:	9b01      	ldr	r3, [sp, #4]
    8b68:	455b      	cmp	r3, fp
    8b6a:	d2c1      	bcs.n	8af0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
    8b6c:	e7f3      	b.n	8b56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
    8b6e:	f04f 0a01 	mov.w	sl, #1
    8b72:	e7f0      	b.n	8b56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
    8b74:	f04f 0a00 	mov.w	sl, #0
    8b78:	e7ed      	b.n	8b56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
    8b7a:	f04f 0a00 	mov.w	sl, #0
    8b7e:	e7ea      	b.n	8b56 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

00008b80 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b84:	b08f      	sub	sp, #60	; 0x3c
    8b86:	9102      	str	r1, [sp, #8]
    8b88:	4617      	mov	r7, r2
    8b8a:	461e      	mov	r6, r3
  FatFile dir = *this;
    8b8c:	ad05      	add	r5, sp, #20
    8b8e:	4604      	mov	r4, r0
    8b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8b98:	6823      	ldr	r3, [r4, #0]
    8b9a:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
    8b9c:	f107 0215 	add.w	r2, r7, #21
    8ba0:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
    8ba4:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8ba8:	ea4f 13ca 	mov.w	r3, sl, lsl #7
    8bac:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
    8bb0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    8bb4:	fa50 f383 	uxtab	r3, r0, r3
    8bb8:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
    8bbc:	428a      	cmp	r2, r1
    8bbe:	d1f3      	bne.n	8ba8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
    8bc0:	683b      	ldr	r3, [r7, #0]
    8bc2:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    8bc4:	2300      	movs	r3, #0
    8bc6:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8bc8:	2e00      	cmp	r6, #0
    8bca:	d064      	beq.n	8c96 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
    8bcc:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
    8bd0:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8bd2:	f8cd a00c 	str.w	sl, [sp, #12]
    8bd6:	46b2      	mov	sl, r6
    8bd8:	e032      	b.n	8c40 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    8bda:	4638      	mov	r0, r7
    8bdc:	f003 fa4e 	bl	c07c <FsName::get16()>
  if (i < 5) {
    8be0:	f1b8 0f04 	cmp.w	r8, #4
    8be4:	d818      	bhi.n	8c18 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
    8be6:	b2f3      	uxtb	r3, r6
    8be8:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8bec:	f8a3 0001 	strh.w	r0, [r3, #1]
    8bf0:	3601      	adds	r6, #1
    8bf2:	3501      	adds	r5, #1
    8bf4:	b2ed      	uxtb	r5, r5
    8bf6:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
    8bfa:	89bb      	ldrh	r3, [r7, #12]
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d1ec      	bne.n	8bda <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
    8c00:	687a      	ldr	r2, [r7, #4]
    8c02:	68bb      	ldr	r3, [r7, #8]
    8c04:	429a      	cmp	r2, r3
    8c06:	d1e8      	bne.n	8bda <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
    8c08:	1c63      	adds	r3, r4, #1
    8c0a:	1e20      	subs	r0, r4, #0
    8c0c:	bf18      	it	ne
    8c0e:	2001      	movne	r0, #1
    8c10:	4240      	negs	r0, r0
    8c12:	b280      	uxth	r0, r0
    8c14:	b2dc      	uxtb	r4, r3
    8c16:	e7e3      	b.n	8be0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
    8c18:	f1b8 0f0a 	cmp.w	r8, #10
    8c1c:	d804      	bhi.n	8c28 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
    8c1e:	b2f3      	uxtb	r3, r6
    8c20:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8c24:	8098      	strh	r0, [r3, #4]
}
    8c26:	e7e3      	b.n	8bf0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
    8c28:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
    8c2a:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8c2e:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
    8c30:	2d0c      	cmp	r5, #12
    8c32:	d9dd      	bls.n	8bf0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8c34:	f10b 0b01 	add.w	fp, fp, #1
    8c38:	fa5f fb8b 	uxtb.w	fp, fp
    8c3c:	45da      	cmp	sl, fp
    8c3e:	d32c      	bcc.n	8c9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8c40:	9b02      	ldr	r3, [sp, #8]
    8c42:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8c46:	b289      	uxth	r1, r1
    8c48:	0149      	lsls	r1, r1, #5
    8c4a:	a805      	add	r0, sp, #20
    8c4c:	f7ff f93a 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    8c50:	9001      	str	r0, [sp, #4]
    8c52:	b310      	cbz	r0, 8c9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8c54:	2100      	movs	r1, #0
    8c56:	a805      	add	r0, sp, #20
    8c58:	f7ff f912 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!ldir) {
    8c5c:	4681      	mov	r9, r0
    8c5e:	b300      	cbz	r0, 8ca2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
    8c60:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
    8c62:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8c66:	f043 0301 	orr.w	r3, r3, #1
    8c6a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8c6e:	45da      	cmp	sl, fp
    8c70:	bf0c      	ite	eq
    8c72:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
    8c76:	465b      	movne	r3, fp
    8c78:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8c7a:	f04f 030f 	mov.w	r3, #15
    8c7e:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    8c80:	f04f 0300 	mov.w	r3, #0
    8c84:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
    8c86:	9b03      	ldr	r3, [sp, #12]
    8c88:	7343      	strb	r3, [r0, #13]
    8c8a:	f04f 0300 	mov.w	r3, #0
    8c8e:	8343      	strh	r3, [r0, #26]
    8c90:	2501      	movs	r5, #1
    8c92:	2600      	movs	r6, #0
    8c94:	e7af      	b.n	8bf6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8c96:	2301      	movs	r3, #1
    8c98:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
    8c9a:	9801      	ldr	r0, [sp, #4]
    8c9c:	b00f      	add	sp, #60	; 0x3c
    8c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8ca2:	2300      	movs	r3, #0
    8ca4:	9301      	str	r3, [sp, #4]
    8ca6:	e7f8      	b.n	8c9a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

00008ca8 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    8ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8cac:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    8cae:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
    8cb0:	4602      	mov	r2, r0
    8cb2:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    8cb6:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
    8cb8:	2120      	movs	r1, #32
    8cba:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
    8cbe:	4282      	cmp	r2, r0
    8cc0:	d1fb      	bne.n	8cba <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8cc2:	781a      	ldrb	r2, [r3, #0]
    8cc4:	2a2e      	cmp	r2, #46	; 0x2e
    8cc6:	bf14      	ite	ne
    8cc8:	2501      	movne	r5, #1
    8cca:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8ccc:	d103      	bne.n	8cd6 <FatFile::makeSFN(FatLfn_t*)+0x2e>
    8cce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8cd2:	2a2e      	cmp	r2, #46	; 0x2e
    8cd4:	d0fb      	beq.n	8cce <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8cd6:	1e62      	subs	r2, r4, #1
    8cd8:	429a      	cmp	r2, r3
    8cda:	d909      	bls.n	8cf0 <FatFile::makeSFN(FatLfn_t*)+0x48>
    8cdc:	4611      	mov	r1, r2
    8cde:	461e      	mov	r6, r3
    8ce0:	460a      	mov	r2, r1
    8ce2:	3901      	subs	r1, #1
    8ce4:	7810      	ldrb	r0, [r2, #0]
    8ce6:	282e      	cmp	r0, #46	; 0x2e
    8ce8:	d002      	beq.n	8cf0 <FatFile::makeSFN(FatLfn_t*)+0x48>
    8cea:	460a      	mov	r2, r1
    8cec:	42b1      	cmp	r1, r6
    8cee:	d1f7      	bne.n	8ce0 <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
    8cf0:	429c      	cmp	r4, r3
    8cf2:	d908      	bls.n	8d06 <FatFile::makeSFN(FatLfn_t*)+0x5e>
    8cf4:	2600      	movs	r6, #0
    8cf6:	2707      	movs	r7, #7
    8cf8:	46b4      	mov	ip, r6
    8cfa:	46b3      	mov	fp, r6
    8cfc:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    8d00:	f04f 0a0a 	mov.w	sl, #10
    8d04:	e061      	b.n	8dca <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
    8d06:	2600      	movs	r6, #0
    8d08:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8d0a:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8d0e:	2b20      	cmp	r3, #32
    8d10:	f000 8084 	beq.w	8e1c <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    8d14:	2d00      	cmp	r5, #0
    8d16:	d03b      	beq.n	8d90 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8d18:	ea1b 0f06 	tst.w	fp, r6
    8d1c:	bf18      	it	ne
    8d1e:	2602      	movne	r6, #2
    8d20:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    8d24:	4628      	mov	r0, r5

 fail:
  return false;
}
    8d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8d2a:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
    8d2e:	fa5f f888 	uxtb.w	r8, r8
    8d32:	f1b8 0f05 	cmp.w	r8, #5
    8d36:	d964      	bls.n	8e02 <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
    8d38:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
    8d3c:	fa5f f888 	uxtb.w	r8, r8
    8d40:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    8d44:	d85d      	bhi.n	8e02 <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
    8d46:	45bc      	cmp	ip, r7
    8d48:	d815      	bhi.n	8d76 <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
    8d4a:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
    8d4e:	b2c0      	uxtb	r0, r0
    8d50:	2819      	cmp	r0, #25
    8d52:	d82a      	bhi.n	8daa <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
    8d54:	3920      	subs	r1, #32
    8d56:	b2c9      	uxtb	r1, r1
        lc |= bit;
    8d58:	ea49 0606 	orr.w	r6, r9, r6
    8d5c:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
    8d5e:	f10c 0001 	add.w	r0, ip, #1
    8d62:	b2c0      	uxtb	r0, r0
    8d64:	44f4      	add	ip, lr
    8d66:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
    8d6a:	2806      	cmp	r0, #6
    8d6c:	d854      	bhi.n	8e18 <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
    8d6e:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
    8d72:	4684      	mov	ip, r0
    8d74:	e026      	b.n	8dc4 <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
    8d76:	429a      	cmp	r2, r3
    8d78:	bf2c      	ite	cs
    8d7a:	2500      	movcs	r5, #0
    8d7c:	2501      	movcc	r5, #1
    8d7e:	2f0a      	cmp	r7, #10
    8d80:	bf08      	it	eq
    8d82:	f045 0501 	orreq.w	r5, r5, #1
    8d86:	b175      	cbz	r5, 8da6 <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
    8d88:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8d8c:	2b20      	cmp	r3, #32
    8d8e:	d0ca      	beq.n	8d26 <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8d90:	2001      	movs	r0, #1
    8d92:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8d96:	f89e 3014 	ldrb.w	r3, [lr, #20]
    8d9a:	4473      	add	r3, lr
    8d9c:	227e      	movs	r2, #126	; 0x7e
    8d9e:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    8da0:	2231      	movs	r2, #49	; 0x31
    8da2:	75da      	strb	r2, [r3, #23]
    8da4:	e7bf      	b.n	8d26 <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
    8da6:	1e53      	subs	r3, r2, #1
        continue;
    8da8:	e00c      	b.n	8dc4 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
    8daa:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
    8dae:	b2c0      	uxtb	r0, r0
    8db0:	2819      	cmp	r0, #25
        uc |= bit;
    8db2:	bf98      	it	ls
    8db4:	ea49 0b0b 	orrls.w	fp, r9, fp
    8db8:	e7d1      	b.n	8d5e <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
    8dba:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
    8dbc:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8dc0:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8dc4:	3301      	adds	r3, #1
    8dc6:	429c      	cmp	r4, r3
    8dc8:	d99f      	bls.n	8d0a <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
    8dca:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
    8dcc:	292e      	cmp	r1, #46	; 0x2e
    8dce:	bf08      	it	eq
    8dd0:	429a      	cmpeq	r2, r3
    8dd2:	bf0c      	ite	eq
    8dd4:	2001      	moveq	r0, #1
    8dd6:	2000      	movne	r0, #0
    8dd8:	d0ef      	beq.n	8dba <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8dda:	2922      	cmp	r1, #34	; 0x22
    8ddc:	d011      	beq.n	8e02 <FatFile::makeSFN(FatLfn_t*)+0x15a>
    8dde:	297c      	cmp	r1, #124	; 0x7c
    8de0:	d00f      	beq.n	8e02 <FatFile::makeSFN(FatLfn_t*)+0x15a>
    8de2:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
    8de6:	fa5f f888 	uxtb.w	r8, r8
    8dea:	f1b8 0f02 	cmp.w	r8, #2
    8dee:	d908      	bls.n	8e02 <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8df0:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
    8df4:	fa5f f888 	uxtb.w	r8, r8
    8df8:	f1b8 0f05 	cmp.w	r8, #5
    8dfc:	d895      	bhi.n	8d2a <FatFile::makeSFN(FatLfn_t*)+0x82>
    8dfe:	292d      	cmp	r1, #45	; 0x2d
    8e00:	d093      	beq.n	8d2a <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
    8e02:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e06:	2980      	cmp	r1, #128	; 0x80
    8e08:	d004      	beq.n	8e14 <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
    8e0a:	45bc      	cmp	ip, r7
    8e0c:	d8b3      	bhi.n	8d76 <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
    8e0e:	4605      	mov	r5, r0
        c = '_';
    8e10:	215f      	movs	r1, #95	; 0x5f
    8e12:	e7a4      	b.n	8d5e <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
    8e14:	4605      	mov	r5, r0
    8e16:	e7d5      	b.n	8dc4 <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
    8e18:	4684      	mov	ip, r0
    8e1a:	e7d3      	b.n	8dc4 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
    8e1c:	2000      	movs	r0, #0
    8e1e:	e782      	b.n	8d26 <FatFile::makeSFN(FatLfn_t*)+0x7e>

00008e20 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e24:	b083      	sub	sp, #12
    8e26:	4604      	mov	r4, r0
    8e28:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8e2a:	f891 8014 	ldrb.w	r8, [r1, #20]
    8e2e:	2362      	movs	r3, #98	; 0x62
    8e30:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
    8e32:	2500      	movs	r5, #0
	return systick_millis_count;
    8e34:	f8df b090 	ldr.w	fp, [pc, #144]	; 8ec8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8e38:	f101 0a16 	add.w	sl, r1, #22
    8e3c:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
    8e40:	442b      	add	r3, r5
    8e42:	b29d      	uxth	r5, r3
    if (pos > 3) {
    8e44:	f1b8 0f03 	cmp.w	r8, #3
    8e48:	bf28      	it	cs
    8e4a:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8e4e:	f108 0304 	add.w	r3, r8, #4
    8e52:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8e54:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8e58:	2a09      	cmp	r2, #9
    8e5a:	bf94      	ite	ls
    8e5c:	3230      	addls	r2, #48	; 0x30
    8e5e:	3237      	addhi	r2, #55	; 0x37
    8e60:	18f9      	adds	r1, r7, r3
    8e62:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
    8e64:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8e66:	3b01      	subs	r3, #1
    8e68:	b2db      	uxtb	r3, r3
    8e6a:	4598      	cmp	r8, r3
    8e6c:	d1f2      	bne.n	8e54 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    8e6e:	eb07 0308 	add.w	r3, r7, r8
    8e72:	227e      	movs	r2, #126	; 0x7e
    8e74:	759a      	strb	r2, [r3, #22]
    seekSet(0);
    8e76:	2100      	movs	r1, #0
    8e78:	4620      	mov	r0, r4
    8e7a:	f7ff f823 	bl	7ec4 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8e7e:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8e80:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
    8e84:	4631      	mov	r1, r6
    8e86:	4620      	mov	r0, r4
    8e88:	f7fe fffa 	bl	7e80 <FatFile::readDirCache(bool)>
      if (!dir) {
    8e8c:	4601      	mov	r1, r0
    8e8e:	b190      	cbz	r0, 8eb6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
    8e90:	7803      	ldrb	r3, [r0, #0]
    8e92:	b1bb      	cbz	r3, 8ec4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8e94:	7ac3      	ldrb	r3, [r0, #11]
    8e96:	f013 0f08 	tst.w	r3, #8
    8e9a:	d1f3      	bne.n	8e84 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8e9c:	464a      	mov	r2, r9
    8e9e:	4650      	mov	r0, sl
    8ea0:	f008 fc58 	bl	11754 <memcmp>
    8ea4:	2800      	cmp	r0, #0
    8ea6:	d1ed      	bne.n	8e84 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8ea8:	9b01      	ldr	r3, [sp, #4]
    8eaa:	3b01      	subs	r3, #1
    8eac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8eb0:	9301      	str	r3, [sp, #4]
    8eb2:	d1c3      	bne.n	8e3c <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
    8eb4:	e003      	b.n	8ebe <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
    8eb6:	7860      	ldrb	r0, [r4, #1]
    8eb8:	fab0 f080 	clz	r0, r0
    8ebc:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    8ebe:	b003      	add	sp, #12
    8ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8ec4:	2001      	movs	r0, #1
    8ec6:	e7fa      	b.n	8ebe <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
    8ec8:	200057f8 	.word	0x200057f8

00008ecc <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ed0:	b08f      	sub	sp, #60	; 0x3c
    8ed2:	900a      	str	r0, [sp, #40]	; 0x28
    8ed4:	460e      	mov	r6, r1
    8ed6:	9204      	str	r2, [sp, #16]
    8ed8:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    8eda:	780b      	ldrb	r3, [r1, #0]
    8edc:	f013 0f70 	tst.w	r3, #112	; 0x70
    8ee0:	f000 8158 	beq.w	9194 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
    8ee4:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
    8ee6:	f890 8000 	ldrb.w	r8, [r0]
    8eea:	f1b8 0f00 	cmp.w	r8, #0
    8eee:	f040 8157 	bne.w	91a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8ef2:	6913      	ldr	r3, [r2, #16]
    8ef4:	330c      	adds	r3, #12
    8ef6:	4ab0      	ldr	r2, [pc, #704]	; (91b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
    8ef8:	fba2 2303 	umull	r2, r3, r2, r3
    8efc:	f3c3 0287 	ubfx	r2, r3, #2, #8
    8f00:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8f02:	7d4b      	ldrb	r3, [r1, #21]
    8f04:	f013 0f03 	tst.w	r3, #3
    8f08:	d017      	beq.n	8f3a <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
    8f0a:	1c57      	adds	r7, r2, #1
    8f0c:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
    8f0e:	68b3      	ldr	r3, [r6, #8]
    8f10:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
    8f12:	2100      	movs	r1, #0
    8f14:	4630      	mov	r0, r6
    8f16:	f7fe ffd5 	bl	7ec4 <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
    8f1a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
    8f1e:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
    8f22:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
    8f24:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
    8f28:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
    8f2c:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    8f30:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8f32:	9b04      	ldr	r3, [sp, #16]
    8f34:	3316      	adds	r3, #22
    8f36:	9305      	str	r3, [sp, #20]
  }
    8f38:	e087      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8f3a:	2701      	movs	r7, #1
    8f3c:	e7e7      	b.n	8f0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
    8f3e:	f8cd 8008 	str.w	r8, [sp, #8]
    8f42:	e082      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
    8f44:	f8cd 8008 	str.w	r8, [sp, #8]
    8f48:	e07f      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    8f4a:	f8cd 8008 	str.w	r8, [sp, #8]
    8f4e:	e07c      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
    8f50:	7873      	ldrb	r3, [r6, #1]
    8f52:	2b00      	cmp	r3, #0
    8f54:	f040 8127 	bne.w	91a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8f58:	9b06      	ldr	r3, [sp, #24]
    8f5a:	f413 7f00 	tst.w	r3, #512	; 0x200
    8f5e:	f000 8125 	beq.w	91ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8f62:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8f66:	3b01      	subs	r3, #1
    8f68:	2b01      	cmp	r3, #1
    8f6a:	f200 8122 	bhi.w	91b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    8f6e:	2c00      	cmp	r4, #0
    8f70:	bf08      	it	eq
    8f72:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    8f74:	42bc      	cmp	r4, r7
    8f76:	d20b      	bcs.n	8f90 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
    8f78:	2500      	movs	r5, #0
    8f7a:	4629      	mov	r1, r5
    8f7c:	4630      	mov	r0, r6
    8f7e:	f7fe ff7f 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!dir) {
    8f82:	2800      	cmp	r0, #0
    8f84:	f000 80ee 	beq.w	9164 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    8f88:	3401      	adds	r4, #1
    8f8a:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8f8c:	42a7      	cmp	r7, r4
    8f8e:	d1f4      	bne.n	8f7a <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    8f90:	9b08      	ldr	r3, [sp, #32]
    8f92:	b13b      	cbz	r3, 8fa4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
    8f94:	9904      	ldr	r1, [sp, #16]
    8f96:	4630      	mov	r0, r6
    8f98:	f7ff ff42 	bl	8e20 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8f9c:	4681      	mov	r9, r0
    8f9e:	2800      	cmp	r0, #0
    8fa0:	f000 80fa 	beq.w	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    8fa4:	3f01      	subs	r7, #1
    8fa6:	b2fb      	uxtb	r3, r7
    8fa8:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
    8faa:	449a      	add	sl, r3
    8fac:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8fb0:	9f04      	ldr	r7, [sp, #16]
    8fb2:	463a      	mov	r2, r7
    8fb4:	4629      	mov	r1, r5
    8fb6:	4630      	mov	r0, r6
    8fb8:	f7ff fde2 	bl	8b80 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8fbc:	4681      	mov	r9, r0
    8fbe:	2800      	cmp	r0, #0
    8fc0:	f000 80ea 	beq.w	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8fc4:	0169      	lsls	r1, r5, #5
    8fc6:	4630      	mov	r0, r6
    8fc8:	f7fe ff7c 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    8fcc:	4681      	mov	r9, r0
    8fce:	2800      	cmp	r0, #0
    8fd0:	f000 80e2 	beq.w	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8fd4:	2100      	movs	r1, #0
    8fd6:	4630      	mov	r0, r6
    8fd8:	f7fe ff52 	bl	7e80 <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    8fdc:	4604      	mov	r4, r0
    8fde:	2800      	cmp	r0, #0
    8fe0:	f000 80f1 	beq.w	91c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    8fe4:	2220      	movs	r2, #32
    8fe6:	2100      	movs	r1, #0
    8fe8:	f008 fc80 	bl	118ec <memset>
  memcpy(dir->name, fname->sfn, 11);
    8fec:	f8d7 2016 	ldr.w	r2, [r7, #22]
    8ff0:	f8d7 301a 	ldr.w	r3, [r7, #26]
    8ff4:	6022      	str	r2, [r4, #0]
    8ff6:	6063      	str	r3, [r4, #4]
    8ff8:	8bfa      	ldrh	r2, [r7, #30]
    8ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
    8ffe:	8122      	strh	r2, [r4, #8]
    9000:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9002:	7d7b      	ldrb	r3, [r7, #21]
    9004:	f003 0318 	and.w	r3, r3, #24
    9008:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    900a:	4b6c      	ldr	r3, [pc, #432]	; (91bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
    900c:	681b      	ldr	r3, [r3, #0]
    900e:	2b00      	cmp	r3, #0
    9010:	f000 80ba 	beq.w	9188 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    9014:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    9018:	f10d 0132 	add.w	r1, sp, #50	; 0x32
    901c:	a80d      	add	r0, sp, #52	; 0x34
    901e:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    9020:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    9024:	8223      	strh	r3, [r4, #16]
    9026:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    902a:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    902c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    9030:	7363      	strb	r3, [r4, #13]
    9032:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9034:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9038:	f043 0301 	orr.w	r3, r3, #1
    903c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
    9040:	e086      	b.n	9150 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
    9042:	2b00      	cmp	r3, #0
    9044:	d088      	beq.n	8f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
    9046:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    904a:	6975      	ldr	r5, [r6, #20]
    904c:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    9050:	4659      	mov	r1, fp
    9052:	4630      	mov	r0, r6
    9054:	f7fe ff14 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!dir) {
    9058:	2800      	cmp	r0, #0
    905a:	f43f af79 	beq.w	8f50 <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    905e:	7803      	ldrb	r3, [r0, #0]
    9060:	2b00      	cmp	r3, #0
    9062:	bf18      	it	ne
    9064:	2be5      	cmpne	r3, #229	; 0xe5
    9066:	bf0c      	ite	eq
    9068:	f04f 0901 	moveq.w	r9, #1
    906c:	f04f 0900 	movne.w	r9, #0
    9070:	d107      	bne.n	9082 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9072:	2c00      	cmp	r4, #0
    9074:	bf08      	it	eq
    9076:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    9078:	42bc      	cmp	r4, r7
    907a:	d2e2      	bcs.n	9042 <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
    907c:	3401      	adds	r4, #1
    907e:	b2e4      	uxtb	r4, r4
    9080:	e7df      	b.n	9042 <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
    9082:	42bc      	cmp	r4, r7
    9084:	bf38      	it	cc
    9086:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9088:	2b2e      	cmp	r3, #46	; 0x2e
    908a:	f43f af58 	beq.w	8f3e <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    908e:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
    9090:	2a0f      	cmp	r2, #15
    9092:	d014      	beq.n	90be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
    9094:	f012 0208 	ands.w	r2, r2, #8
    9098:	f47f af57 	bne.w	8f4a <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
    909c:	9b02      	ldr	r3, [sp, #8]
    909e:	2b00      	cmp	r3, #0
    90a0:	d13b      	bne.n	911a <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    90a2:	220b      	movs	r2, #11
    90a4:	9905      	ldr	r1, [sp, #20]
    90a6:	f008 fb55 	bl	11754 <memcmp>
    90aa:	2800      	cmp	r0, #0
    90ac:	d1cd      	bne.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    90ae:	9b04      	ldr	r3, [sp, #16]
    90b0:	7d5b      	ldrb	r3, [r3, #21]
    90b2:	f013 0301 	ands.w	r3, r3, #1
    90b6:	d046      	beq.n	9146 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
    90b8:	2301      	movs	r3, #1
    90ba:	9308      	str	r3, [sp, #32]
    90bc:	e7c5      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
    90be:	9a02      	ldr	r2, [sp, #8]
    90c0:	b9ea      	cbnz	r2, 90fe <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
    90c2:	f003 021f 	and.w	r2, r3, #31
    90c6:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
    90c8:	9907      	ldr	r1, [sp, #28]
    90ca:	4291      	cmp	r1, r2
    90cc:	d1bd      	bne.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
    90ce:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    90d2:	9302      	str	r3, [sp, #8]
    90d4:	d0b9      	beq.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
    90d6:	7b43      	ldrb	r3, [r0, #13]
    90d8:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
    90da:	9202      	str	r2, [sp, #8]
      if (order == 1) {
    90dc:	9b03      	ldr	r3, [sp, #12]
    90de:	2b01      	cmp	r3, #1
    90e0:	d1b3      	bne.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    90e2:	1c69      	adds	r1, r5, #1
    90e4:	9d02      	ldr	r5, [sp, #8]
    90e6:	462b      	mov	r3, r5
    90e8:	9a04      	ldr	r2, [sp, #16]
    90ea:	b289      	uxth	r1, r1
    90ec:	4630      	mov	r0, r6
    90ee:	f7ff fce7 	bl	8ac0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    90f2:	462b      	mov	r3, r5
    90f4:	2800      	cmp	r0, #0
    90f6:	bf08      	it	eq
    90f8:	4643      	moveq	r3, r8
    90fa:	9302      	str	r3, [sp, #8]
    90fc:	e7a5      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    90fe:	9a03      	ldr	r2, [sp, #12]
    9100:	3a01      	subs	r2, #1
    9102:	b2d2      	uxtb	r2, r2
    9104:	9203      	str	r2, [sp, #12]
    9106:	4293      	cmp	r3, r2
    9108:	f47f af1c 	bne.w	8f44 <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
    910c:	7b43      	ldrb	r3, [r0, #13]
    910e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9110:	4293      	cmp	r3, r2
    9112:	d0e3      	beq.n	90dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
    9114:	f8cd 8008 	str.w	r8, [sp, #8]
    9118:	e797      	b.n	904a <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    911a:	9b03      	ldr	r3, [sp, #12]
    911c:	2b01      	cmp	r3, #1
    911e:	d13b      	bne.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
    9120:	1e41      	subs	r1, r0, #1
    9122:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9126:	01d3      	lsls	r3, r2, #7
    9128:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    912c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    9130:	fa52 f383 	uxtab	r3, r2, r3
    9134:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    9136:	4561      	cmp	r1, ip
    9138:	d1f5      	bne.n	9126 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
    913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    913c:	4293      	cmp	r3, r2
    913e:	d12b      	bne.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    9140:	9b02      	ldr	r3, [sp, #8]
    9142:	4698      	mov	r8, r3
    9144:	e000      	b.n	9148 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
    9146:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
    9148:	9b06      	ldr	r3, [sp, #24]
    914a:	f413 6f00 	tst.w	r3, #2048	; 0x800
    914e:	d123      	bne.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    9150:	f8cd 8000 	str.w	r8, [sp]
    9154:	9b06      	ldr	r3, [sp, #24]
    9156:	462a      	mov	r2, r5
    9158:	4631      	mov	r1, r6
    915a:	980a      	ldr	r0, [sp, #40]	; 0x28
    915c:	f7fe ff31 	bl	7fc2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9160:	4681      	mov	r9, r0
    9162:	e019      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
    9164:	7873      	ldrb	r3, [r6, #1]
    9166:	bb5b      	cbnz	r3, 91c0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
    9168:	42a7      	cmp	r7, r4
    916a:	f67f af11 	bls.w	8f90 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    916e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
    9170:	4630      	mov	r0, r6
    9172:	f7fe fd15 	bl	7ba0 <FatFile::addDirCluster()>
    9176:	4681      	mov	r9, r0
    9178:	b170      	cbz	r0, 9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    917a:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    917c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    9180:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    9182:	42a7      	cmp	r7, r4
    9184:	d8f4      	bhi.n	9170 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
    9186:	e703      	b.n	8f90 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
    9188:	f245 6321 	movw	r3, #22049	; 0x5621
    918c:	8223      	strh	r3, [r4, #16]
    918e:	8323      	strh	r3, [r4, #24]
    9190:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    9192:	e74e      	b.n	9032 <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
    9194:	f04f 0900 	mov.w	r9, #0
}
    9198:	4648      	mov	r0, r9
    919a:	b00f      	add	sp, #60	; 0x3c
    919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    91a0:	f04f 0900 	mov.w	r9, #0
    91a4:	e7f8      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    91a6:	f04f 0900 	mov.w	r9, #0
    91aa:	e7f5      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    91ac:	f04f 0900 	mov.w	r9, #0
    91b0:	e7f2      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    91b2:	f04f 0900 	mov.w	r9, #0
    91b6:	e7ef      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    91b8:	4ec4ec4f 	.word	0x4ec4ec4f
    91bc:	200050c4 	.word	0x200050c4
    91c0:	f04f 0900 	mov.w	r9, #0
    91c4:	e7e8      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    91c6:	f04f 0900 	mov.w	r9, #0
    91ca:	e7e5      	b.n	9198 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

000091cc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    91cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    91ce:	b083      	sub	sp, #12
    91d0:	4608      	mov	r0, r1
    91d2:	4615      	mov	r5, r2
    91d4:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    91d6:	780b      	ldrb	r3, [r1, #0]
    91d8:	2b20      	cmp	r3, #32
    91da:	d103      	bne.n	91e4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    91dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    91e0:	2b20      	cmp	r3, #32
    91e2:	d0fb      	beq.n	91dc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
    91e4:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    91e6:	7803      	ldrb	r3, [r0, #0]
    91e8:	b1d3      	cbz	r3, 9220 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    91ea:	2b2f      	cmp	r3, #47	; 0x2f
    91ec:	d018      	beq.n	9220 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
    91ee:	2400      	movs	r4, #0
    91f0:	4e2c      	ldr	r6, [pc, #176]	; (92a4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
    91f2:	e033      	b.n	925c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    91f4:	f1bc 0f1f 	cmp.w	ip, #31
    91f8:	d90f      	bls.n	921a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    91fa:	e04d      	b.n	9298 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    91fc:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
    9200:	d00b      	beq.n	921a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    9202:	d903      	bls.n	920c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
    9204:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
    9208:	d007      	beq.n	921a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    920a:	e020      	b.n	924e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    920c:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
    9210:	fa5f fc8c 	uxtb.w	ip, ip
    9214:	f1bc 0f01 	cmp.w	ip, #1
    9218:	d819      	bhi.n	924e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    921a:	2000      	movs	r0, #0
}
    921c:	b003      	add	sp, #12
    921e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    9220:	692b      	ldr	r3, [r5, #16]
    9222:	3b01      	subs	r3, #1
    9224:	2bfe      	cmp	r3, #254	; 0xfe
    9226:	d80f      	bhi.n	9248 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    9228:	7803      	ldrb	r3, [r0, #0]
    922a:	2b20      	cmp	r3, #32
    922c:	d001      	beq.n	9232 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    922e:	2b2f      	cmp	r3, #47	; 0x2f
    9230:	d105      	bne.n	923e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9232:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    9236:	2b20      	cmp	r3, #32
    9238:	d0fb      	beq.n	9232 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    923a:	2b2f      	cmp	r3, #47	; 0x2f
    923c:	d0f9      	beq.n	9232 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
    923e:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
    9240:	4628      	mov	r0, r5
    9242:	f7ff fd31 	bl	8ca8 <FatFile::makeSFN(FatLfn_t*)>
    9246:	e7e9      	b.n	921c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
    9248:	2000      	movs	r0, #0
    924a:	e7e7      	b.n	921c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
    924c:	3402      	adds	r4, #2
      fname->len = len;
    924e:	612c      	str	r4, [r5, #16]
      fname->end = path;
    9250:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
    9252:	7803      	ldrb	r3, [r0, #0]
    9254:	2b00      	cmp	r3, #0
    9256:	d0e3      	beq.n	9220 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    9258:	2b2f      	cmp	r3, #47	; 0x2f
    925a:	d0e1      	beq.n	9220 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    925c:	aa01      	add	r2, sp, #4
    925e:	1d01      	adds	r1, r0, #4
    9260:	f002 ffd6 	bl	c210 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    9264:	2800      	cmp	r0, #0
    9266:	d0d8      	beq.n	921a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
    9268:	9b01      	ldr	r3, [sp, #4]
    926a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    926e:	d2ed      	bcs.n	924c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
    9270:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9272:	2b7f      	cmp	r3, #127	; 0x7f
    9274:	d810      	bhi.n	9298 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    9276:	fa5f fc83 	uxtb.w	ip, r3
    927a:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    927e:	d8bd      	bhi.n	91fc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
    9280:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    9284:	d9b6      	bls.n	91f4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    9286:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
    928a:	fa5f fc8c 	uxtb.w	ip, ip
    928e:	fa26 fc0c 	lsr.w	ip, r6, ip
    9292:	f01c 0f01 	tst.w	ip, #1
    9296:	d1c0      	bne.n	921a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
    9298:	2b2e      	cmp	r3, #46	; 0x2e
    929a:	d0da      	beq.n	9252 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    929c:	2b20      	cmp	r3, #32
    929e:	d0d8      	beq.n	9252 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    92a0:	e7d5      	b.n	924e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    92a2:	bf00      	nop
    92a4:	05002101 	.word	0x05002101

000092a8 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    92a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92ac:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
    92ae:	2300      	movs	r3, #0
    92b0:	f88d 3004 	strb.w	r3, [sp, #4]
    92b4:	f88d 3005 	strb.w	r3, [sp, #5]
    92b8:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    92bc:	7883      	ldrb	r3, [r0, #2]
    92be:	f013 0f02 	tst.w	r3, #2
    92c2:	f000 8091 	beq.w	93e8 <FatFile::remove()+0x140>
    92c6:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    92c8:	6a01      	ldr	r1, [r0, #32]
    92ca:	b129      	cbz	r1, 92d8 <FatFile::remove()+0x30>
    92cc:	6880      	ldr	r0, [r0, #8]
    92ce:	f000 fdd9 	bl	9e84 <FatPartition::freeChain(unsigned long)>
    92d2:	4603      	mov	r3, r0
    92d4:	2800      	cmp	r0, #0
    92d6:	d06c      	beq.n	93b2 <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    92d8:	2101      	movs	r1, #1
    92da:	4628      	mov	r0, r5
    92dc:	f7fe fca2 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    92e0:	4606      	mov	r6, r0
    92e2:	2800      	cmp	r0, #0
    92e4:	f000 8082 	beq.w	93ec <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
    92e8:	1e42      	subs	r2, r0, #1
    92ea:	300a      	adds	r0, #10
    uint8_t sum = 0;
    92ec:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    92ee:	01e3      	lsls	r3, r4, #7
    92f0:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    92f4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    92f8:	fa51 f383 	uxtab	r3, r1, r3
    92fc:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    92fe:	4290      	cmp	r0, r2
    9300:	d1f5      	bne.n	92ee <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    9302:	23e5      	movs	r3, #229	; 0xe5
    9304:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9306:	2300      	movs	r3, #0
    9308:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
    930a:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    930c:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    930e:	f106 0028 	add.w	r0, r6, #40	; 0x28
    9312:	f002 fe4d 	bl	bfb0 <FsCache::sync()>
    9316:	b908      	cbnz	r0, 931c <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9318:	2300      	movs	r3, #0
    931a:	e04a      	b.n	93b2 <FatFile::remove()+0x10a>
    931c:	f506 700e 	add.w	r0, r6, #568	; 0x238
    9320:	f002 fe46 	bl	bfb0 <FsCache::sync()>
    9324:	2800      	cmp	r0, #0
    9326:	d0f7      	beq.n	9318 <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
    9328:	6830      	ldr	r0, [r6, #0]
    932a:	6803      	ldr	r3, [r0, #0]
    932c:	6a1b      	ldr	r3, [r3, #32]
    932e:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    9330:	4603      	mov	r3, r0
    9332:	2800      	cmp	r0, #0
    9334:	d03d      	beq.n	93b2 <FatFile::remove()+0x10a>
  if (!isLFN()) {
    9336:	78ea      	ldrb	r2, [r5, #3]
    9338:	2a00      	cmp	r2, #0
    933a:	d03a      	beq.n	93b2 <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
    933c:	4629      	mov	r1, r5
    933e:	a801      	add	r0, sp, #4
    9340:	f7fe fc9f 	bl	7c82 <FatFile::openCluster(FatFile*)>
    9344:	4603      	mov	r3, r0
    9346:	2800      	cmp	r0, #0
    9348:	d033      	beq.n	93b2 <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    934a:	78eb      	ldrb	r3, [r5, #3]
    934c:	2b00      	cmp	r3, #0
    934e:	d04f      	beq.n	93f0 <FatFile::remove()+0x148>
    9350:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9352:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
    9354:	f04f 08e5 	mov.w	r8, #229	; 0xe5
    9358:	e021      	b.n	939e <FatFile::remove()+0xf6>
    935a:	4639      	mov	r1, r7
    935c:	a801      	add	r0, sp, #4
    935e:	f7fe fd8f 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!ldir) {
    9362:	2800      	cmp	r0, #0
    9364:	d046      	beq.n	93f4 <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9366:	7ac2      	ldrb	r2, [r0, #11]
    9368:	2a0f      	cmp	r2, #15
    936a:	d145      	bne.n	93f8 <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
    936c:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    936e:	f002 011f 	and.w	r1, r2, #31
    9372:	428e      	cmp	r6, r1
    9374:	d142      	bne.n	93fc <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
    9376:	7b41      	ldrb	r1, [r0, #13]
    9378:	42a1      	cmp	r1, r4
    937a:	d141      	bne.n	9400 <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
    937c:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
    9380:	68a9      	ldr	r1, [r5, #8]
    9382:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    9386:	f043 0301 	orr.w	r3, r3, #1
    938a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    938e:	f012 0f40 	tst.w	r2, #64	; 0x40
    9392:	d112      	bne.n	93ba <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9394:	3601      	adds	r6, #1
    9396:	b2f6      	uxtb	r6, r6
    9398:	78eb      	ldrb	r3, [r5, #3]
    939a:	42b3      	cmp	r3, r6
    939c:	d322      	bcc.n	93e4 <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    939e:	88a9      	ldrh	r1, [r5, #4]
    93a0:	1b89      	subs	r1, r1, r6
    93a2:	b289      	uxth	r1, r1
    93a4:	0149      	lsls	r1, r1, #5
    93a6:	a801      	add	r0, sp, #4
    93a8:	f7fe fd8c 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    93ac:	4603      	mov	r3, r0
    93ae:	2800      	cmp	r0, #0
    93b0:	d1d3      	bne.n	935a <FatFile::remove()+0xb2>
}
    93b2:	4618      	mov	r0, r3
    93b4:	b00a      	add	sp, #40	; 0x28
    93b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
    93ba:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    93bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    93c0:	f002 fdf6 	bl	bfb0 <FsCache::sync()>
    93c4:	4603      	mov	r3, r0
    93c6:	2800      	cmp	r0, #0
    93c8:	d0f3      	beq.n	93b2 <FatFile::remove()+0x10a>
    93ca:	f504 700e 	add.w	r0, r4, #568	; 0x238
    93ce:	f002 fdef 	bl	bfb0 <FsCache::sync()>
    93d2:	4603      	mov	r3, r0
    93d4:	2800      	cmp	r0, #0
    93d6:	d0ec      	beq.n	93b2 <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
    93d8:	6820      	ldr	r0, [r4, #0]
    93da:	6803      	ldr	r3, [r0, #0]
    93dc:	6a1b      	ldr	r3, [r3, #32]
    93de:	4798      	blx	r3
    93e0:	4603      	mov	r3, r0
    93e2:	e7e6      	b.n	93b2 <FatFile::remove()+0x10a>
  return false;
    93e4:	2300      	movs	r3, #0
 fail:
    93e6:	e7e4      	b.n	93b2 <FatFile::remove()+0x10a>
  return false;
    93e8:	2300      	movs	r3, #0
    93ea:	e7e2      	b.n	93b2 <FatFile::remove()+0x10a>
    93ec:	2300      	movs	r3, #0
    93ee:	e7e0      	b.n	93b2 <FatFile::remove()+0x10a>
    93f0:	2300      	movs	r3, #0
    93f2:	e7de      	b.n	93b2 <FatFile::remove()+0x10a>
    93f4:	2300      	movs	r3, #0
    93f6:	e7dc      	b.n	93b2 <FatFile::remove()+0x10a>
    93f8:	2300      	movs	r3, #0
    93fa:	e7da      	b.n	93b2 <FatFile::remove()+0x10a>
    93fc:	2300      	movs	r3, #0
    93fe:	e7d8      	b.n	93b2 <FatFile::remove()+0x10a>
    9400:	2300      	movs	r3, #0
    9402:	e7d6      	b.n	93b2 <FatFile::remove()+0x10a>

00009404 <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    9404:	b510      	push	{r4, lr}
    9406:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    9408:	6848      	ldr	r0, [r1, #4]
    940a:	b130      	cbz	r0, 941a <initFatDirCallback(unsigned long, void*)+0x16>
    940c:	890b      	ldrh	r3, [r1, #8]
    940e:	3301      	adds	r3, #1
    9410:	b29b      	uxth	r3, r3
    9412:	810b      	strh	r3, [r1, #8]
    9414:	894a      	ldrh	r2, [r1, #10]
    9416:	429a      	cmp	r2, r3
    9418:	d901      	bls.n	941e <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    941a:	6820      	ldr	r0, [r4, #0]
    941c:	bd10      	pop	{r4, pc}
    941e:	6803      	ldr	r3, [r0, #0]
    9420:	685b      	ldr	r3, [r3, #4]
    9422:	2201      	movs	r2, #1
    9424:	4902      	ldr	r1, [pc, #8]	; (9430 <initFatDirCallback(unsigned long, void*)+0x2c>)
    9426:	4798      	blx	r3
    state->count = 0;
    9428:	2300      	movs	r3, #0
    942a:	8123      	strh	r3, [r4, #8]
    942c:	e7f5      	b.n	941a <initFatDirCallback(unsigned long, void*)+0x16>
    942e:	bf00      	nop
    9430:	20003124 	.word	0x20003124

00009434 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    9434:	b5f0      	push	{r4, r5, r6, r7, lr}
    9436:	b087      	sub	sp, #28
    9438:	4604      	mov	r4, r0
    943a:	460e      	mov	r6, r1
    943c:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    943e:	f44f 7200 	mov.w	r2, #512	; 0x200
    9442:	2100      	movs	r1, #0
    9444:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9446:	f008 fa51 	bl	118ec <memset>
  writeMsg("Writing FAT ");
    944a:	6a20      	ldr	r0, [r4, #32]
    944c:	b120      	cbz	r0, 9458 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
    944e:	6803      	ldr	r3, [r0, #0]
    9450:	685b      	ldr	r3, [r3, #4]
    9452:	220c      	movs	r2, #12
    9454:	4920      	ldr	r1, [pc, #128]	; (94d8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    9456:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
    9458:	6a63      	ldr	r3, [r4, #36]	; 0x24
    945a:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
    945c:	6a23      	ldr	r3, [r4, #32]
    945e:	9304      	str	r3, [sp, #16]
  state.count = 0;
    9460:	2300      	movs	r3, #0
    9462:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    9466:	096b      	lsrs	r3, r5, #5
    9468:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    946c:	69e0      	ldr	r0, [r4, #28]
    946e:	68e1      	ldr	r1, [r4, #12]
    9470:	6803      	ldr	r3, [r0, #0]
    9472:	aa03      	add	r2, sp, #12
    9474:	9200      	str	r2, [sp, #0]
    9476:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    9478:	4b18      	ldr	r3, [pc, #96]	; (94dc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    947a:	1e6a      	subs	r2, r5, #1
    947c:	3101      	adds	r1, #1
    947e:	47b8      	blx	r7
    9480:	4603      	mov	r3, r0
    9482:	b328      	cbz	r0, 94d0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
    9484:	6a20      	ldr	r0, [r4, #32]
    9486:	b120      	cbz	r0, 9492 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    9488:	6803      	ldr	r3, [r0, #0]
    948a:	685b      	ldr	r3, [r3, #4]
    948c:	2202      	movs	r2, #2
    948e:	4914      	ldr	r1, [pc, #80]	; (94e0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    9490:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    9492:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9494:	22f8      	movs	r2, #248	; 0xf8
    9496:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
    9498:	2e10      	cmp	r6, #16
    949a:	bf0c      	ite	eq
    949c:	2004      	moveq	r0, #4
    949e:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
    94a0:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
    94a2:	21ff      	movs	r1, #255	; 0xff
    94a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94a6:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    94a8:	3301      	adds	r3, #1
    94aa:	4298      	cmp	r0, r3
    94ac:	d1fa      	bne.n	94a4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    94ae:	69e0      	ldr	r0, [r4, #28]
    94b0:	6803      	ldr	r3, [r0, #0]
    94b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94b6:	68e1      	ldr	r1, [r4, #12]
    94b8:	4798      	blx	r3
    94ba:	4603      	mov	r3, r0
    94bc:	b140      	cbz	r0, 94d0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    94be:	69e0      	ldr	r0, [r4, #28]
    94c0:	68e5      	ldr	r5, [r4, #12]
    94c2:	68a1      	ldr	r1, [r4, #8]
    94c4:	6803      	ldr	r3, [r0, #0]
    94c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94ca:	4429      	add	r1, r5
    94cc:	4798      	blx	r3
    94ce:	4603      	mov	r3, r0
}
    94d0:	4618      	mov	r0, r3
    94d2:	b007      	add	sp, #28
    94d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94d6:	bf00      	nop
    94d8:	20001fe8 	.word	0x20001fe8
    94dc:	00009405 	.word	0x00009405
    94e0:	2000200c 	.word	0x2000200c

000094e4 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    94e4:	b570      	push	{r4, r5, r6, lr}
    94e6:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    94e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    94ea:	f44f 7600 	mov.w	r6, #512	; 0x200
    94ee:	4632      	mov	r2, r6
    94f0:	2100      	movs	r1, #0
    94f2:	4620      	mov	r0, r4
    94f4:	f008 f9fa 	bl	118ec <memset>
  pbs->jmpInstruction[0] = 0XEB;
    94f8:	23eb      	movs	r3, #235	; 0xeb
    94fa:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    94fc:	2376      	movs	r3, #118	; 0x76
    94fe:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    9500:	2390      	movs	r3, #144	; 0x90
    9502:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    9504:	2320      	movs	r3, #32
    9506:	70e3      	strb	r3, [r4, #3]
    9508:	7123      	strb	r3, [r4, #4]
    950a:	7163      	strb	r3, [r4, #5]
    950c:	71a3      	strb	r3, [r4, #6]
    950e:	71e3      	strb	r3, [r4, #7]
    9510:	7223      	strb	r3, [r4, #8]
    9512:	7263      	strb	r3, [r4, #9]
    9514:	72a3      	strb	r3, [r4, #10]
    9516:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    951a:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    951e:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    9520:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    9522:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    9524:	2302      	movs	r3, #2
    9526:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    9528:	23f8      	movs	r3, #248	; 0xf8
    952a:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    952c:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    952e:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    9530:	69ab      	ldr	r3, [r5, #24]
    9532:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    9534:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9538:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    953c:	bd70      	pop	{r4, r5, r6, pc}

0000953e <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    953e:	b538      	push	{r3, r4, r5, lr}
    9540:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    9542:	f44f 7200 	mov.w	r2, #512	; 0x200
    9546:	2100      	movs	r1, #0
    9548:	6a40      	ldr	r0, [r0, #36]	; 0x24
    954a:	f008 f9cf 	bl	118ec <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    954e:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    9550:	6922      	ldr	r2, [r4, #16]
    9552:	6821      	ldr	r1, [r4, #0]
    9554:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    9558:	f002 fdb6 	bl	c0c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    955c:	6922      	ldr	r2, [r4, #16]
    955e:	69a3      	ldr	r3, [r4, #24]
    9560:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    9562:	3a01      	subs	r2, #1
    9564:	6821      	ldr	r1, [r4, #0]
    9566:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    956a:	f002 fdad 	bl	c0c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    956e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    9572:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    9576:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    9578:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    957c:	69a3      	ldr	r3, [r4, #24]
    957e:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    9582:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9586:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    958a:	69e0      	ldr	r0, [r4, #28]
    958c:	6803      	ldr	r3, [r0, #0]
    958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9590:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9592:	2100      	movs	r1, #0
    9594:	4798      	blx	r3
}
    9596:	bd38      	pop	{r3, r4, r5, pc}

00009598 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    9598:	b570      	push	{r4, r5, r6, lr}
    959a:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    959c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    959e:	f44f 7380 	mov.w	r3, #256	; 0x100
    95a2:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    95a4:	6946      	ldr	r6, [r0, #20]
    95a6:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
    95aa:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    95ae:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    95b2:	f202 1001 	addw	r0, r2, #257	; 0x101
    95b6:	0a00      	lsrs	r0, r0, #8
    95b8:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    95ba:	0040      	lsls	r0, r0, #1
    95bc:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    95c0:	459c      	cmp	ip, r3
    95c2:	d90f      	bls.n	95e4 <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    95c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    95c8:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    95ca:	1af2      	subs	r2, r6, r3
    95cc:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    95d0:	f202 1101 	addw	r1, r2, #257	; 0x101
    95d4:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    95d6:	0048      	lsls	r0, r1, #1
    95d8:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    95dc:	4563      	cmp	r3, ip
    95de:	d3f3      	bcc.n	95c8 <FatFormatter::makeFat16()+0x30>
    95e0:	6063      	str	r3, [r4, #4]
    95e2:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    95e4:	eba3 030c 	sub.w	r3, r3, ip
    95e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
    95ec:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    95ee:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
    95f2:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    95f6:	d213      	bcs.n	9620 <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
    95f8:	2101      	movs	r1, #1
    95fa:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    95fc:	3381      	adds	r3, #129	; 0x81
    95fe:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    9600:	3021      	adds	r0, #33	; 0x21
    9602:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
    9606:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
    9608:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    960c:	bf34      	ite	cc
    960e:	2304      	movcc	r3, #4
    9610:	2306      	movcs	r3, #6
    9612:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    9616:	4620      	mov	r0, r4
    9618:	f7ff ff91 	bl	953e <FatFormatter::writeMbr()>
    961c:	b950      	cbnz	r0, 9634 <FatFormatter::makeFat16()+0x9c>
}
    961e:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
    9620:	6a20      	ldr	r0, [r4, #32]
    9622:	2800      	cmp	r0, #0
    9624:	d040      	beq.n	96a8 <FatFormatter::makeFat16()+0x110>
    9626:	6803      	ldr	r3, [r0, #0]
    9628:	685b      	ldr	r3, [r3, #4]
    962a:	2213      	movs	r2, #19
    962c:	491f      	ldr	r1, [pc, #124]	; (96ac <FatFormatter::makeFat16()+0x114>)
    962e:	4798      	blx	r3
    return false;
    9630:	2000      	movs	r0, #0
    9632:	e7f4      	b.n	961e <FatFormatter::makeFat16()+0x86>
  initPbs();
    9634:	4620      	mov	r0, r4
    9636:	f7ff ff55 	bl	94e4 <FatFormatter::initPbs()>
    963a:	f44f 7300 	mov.w	r3, #512	; 0x200
    963e:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    9642:	68a3      	ldr	r3, [r4, #8]
    9644:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    9646:	2380      	movs	r3, #128	; 0x80
    9648:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    964c:	2329      	movs	r3, #41	; 0x29
    964e:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    9652:	4b17      	ldr	r3, [pc, #92]	; (96b0 <FatFormatter::makeFat16()+0x118>)
    9654:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9658:	f105 032a 	add.w	r3, r5, #42	; 0x2a
    965c:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    9660:	2220      	movs	r2, #32
    9662:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9666:	4299      	cmp	r1, r3
    9668:	d1fb      	bne.n	9662 <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
    966a:	2346      	movs	r3, #70	; 0x46
    966c:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    9670:	2341      	movs	r3, #65	; 0x41
    9672:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    9676:	2354      	movs	r3, #84	; 0x54
    9678:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    967c:	2331      	movs	r3, #49	; 0x31
    967e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    9682:	2336      	movs	r3, #54	; 0x36
    9684:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    9688:	69e0      	ldr	r0, [r4, #28]
    968a:	6803      	ldr	r3, [r0, #0]
    968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    968e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9690:	6921      	ldr	r1, [r4, #16]
    9692:	4798      	blx	r3
    9694:	2800      	cmp	r0, #0
    9696:	d0c2      	beq.n	961e <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    9698:	6862      	ldr	r2, [r4, #4]
    969a:	68e3      	ldr	r3, [r4, #12]
    969c:	1ad2      	subs	r2, r2, r3
    969e:	2110      	movs	r1, #16
    96a0:	4620      	mov	r0, r4
    96a2:	f7ff fec7 	bl	9434 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    96a6:	e7ba      	b.n	961e <FatFormatter::makeFat16()+0x86>
    return false;
    96a8:	2000      	movs	r0, #0
    96aa:	e7b8      	b.n	961e <FatFormatter::makeFat16()+0x86>
    96ac:	20001fbc 	.word	0x20001fbc
    96b0:	0012d687 	.word	0x0012d687

000096b4 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    96b4:	b570      	push	{r4, r5, r6, lr}
    96b6:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    96b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
    96ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    96be:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    96c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    96c4:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    96c6:	6946      	ldr	r6, [r0, #20]
    96c8:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
    96cc:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
    96d0:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    96d4:	f101 0381 	add.w	r3, r1, #129	; 0x81
    96d8:	09db      	lsrs	r3, r3, #7
    96da:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    96dc:	f242 0209 	movw	r2, #8201	; 0x2009
    96e0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
    96e4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    96e8:	d931      	bls.n	974e <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    96ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
    96ee:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    96f2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    96f6:	1ab1      	subs	r1, r6, r2
    96f8:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    96fc:	f101 0381 	add.w	r3, r1, #129	; 0x81
    9700:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    9702:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    9706:	4282      	cmp	r2, r0
    9708:	d3f3      	bcc.n	96f2 <FatFormatter::makeFat32()+0x3e>
    970a:	6062      	str	r2, [r4, #4]
    970c:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
    970e:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    9712:	4281      	cmp	r1, r0
    9714:	d91e      	bls.n	9754 <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    9716:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
    971a:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    971e:	b29b      	uxth	r3, r3
    9720:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    9722:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    9726:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    9728:	fb01 220c 	mla	r2, r1, ip, r2
    972c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    9730:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
    9732:	4b55      	ldr	r3, [pc, #340]	; (9888 <FatFormatter::makeFat32()+0x1d4>)
    9734:	429a      	cmp	r2, r3
    9736:	bf94      	ite	ls
    9738:	220b      	movls	r2, #11
    973a:	220c      	movhi	r2, #12
    973c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    9740:	4620      	mov	r0, r4
    9742:	f7ff fefc 	bl	953e <FatFormatter::writeMbr()>
    9746:	4603      	mov	r3, r0
    9748:	b978      	cbnz	r0, 976a <FatFormatter::makeFat32()+0xb6>
}
    974a:	4618      	mov	r0, r3
    974c:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    974e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9752:	e7dc      	b.n	970e <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
    9754:	6a20      	ldr	r0, [r4, #32]
    9756:	2800      	cmp	r0, #0
    9758:	f000 8093 	beq.w	9882 <FatFormatter::makeFat32()+0x1ce>
    975c:	6803      	ldr	r3, [r0, #0]
    975e:	685b      	ldr	r3, [r3, #4]
    9760:	2213      	movs	r2, #19
    9762:	494a      	ldr	r1, [pc, #296]	; (988c <FatFormatter::makeFat32()+0x1d8>)
    9764:	4798      	blx	r3
    return false;
    9766:	2300      	movs	r3, #0
    9768:	e7ef      	b.n	974a <FatFormatter::makeFat32()+0x96>
  initPbs();
    976a:	4620      	mov	r0, r4
    976c:	f7ff feba 	bl	94e4 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    9770:	68a3      	ldr	r3, [r4, #8]
    9772:	626b      	str	r3, [r5, #36]	; 0x24
    9774:	2302      	movs	r3, #2
    9776:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
    9778:	2301      	movs	r3, #1
    977a:	862b      	strh	r3, [r5, #48]	; 0x30
    977c:	2306      	movs	r3, #6
    977e:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    9780:	2380      	movs	r3, #128	; 0x80
    9782:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    9786:	2329      	movs	r3, #41	; 0x29
    9788:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    978c:	4b40      	ldr	r3, [pc, #256]	; (9890 <FatFormatter::makeFat32()+0x1dc>)
    978e:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    9792:	f105 0346 	add.w	r3, r5, #70	; 0x46
    9796:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    979a:	2220      	movs	r2, #32
    979c:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    97a0:	4299      	cmp	r1, r3
    97a2:	d1fb      	bne.n	979c <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
    97a4:	2346      	movs	r3, #70	; 0x46
    97a6:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    97aa:	2341      	movs	r3, #65	; 0x41
    97ac:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    97b0:	2354      	movs	r3, #84	; 0x54
    97b2:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    97b6:	2333      	movs	r3, #51	; 0x33
    97b8:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    97bc:	2332      	movs	r3, #50	; 0x32
    97be:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    97c2:	69e0      	ldr	r0, [r4, #28]
    97c4:	6803      	ldr	r3, [r0, #0]
    97c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    97c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    97ca:	6921      	ldr	r1, [r4, #16]
    97cc:	4798      	blx	r3
    97ce:	4603      	mov	r3, r0
    97d0:	2800      	cmp	r0, #0
    97d2:	d0ba      	beq.n	974a <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    97d4:	69e0      	ldr	r0, [r4, #28]
    97d6:	6921      	ldr	r1, [r4, #16]
    97d8:	6803      	ldr	r3, [r0, #0]
    97da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    97dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    97de:	3106      	adds	r1, #6
    97e0:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    97e2:	4603      	mov	r3, r0
    97e4:	2800      	cmp	r0, #0
    97e6:	d0b0      	beq.n	974a <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    97e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    97ec:	2100      	movs	r1, #0
    97ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
    97f0:	f008 f87c 	bl	118ec <memset>
    97f4:	4b27      	ldr	r3, [pc, #156]	; (9894 <FatFormatter::makeFat32()+0x1e0>)
    97f6:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    97fa:	69e0      	ldr	r0, [r4, #28]
    97fc:	6921      	ldr	r1, [r4, #16]
    97fe:	6803      	ldr	r3, [r0, #0]
    9800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9802:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9804:	3102      	adds	r1, #2
    9806:	4798      	blx	r3
    9808:	4603      	mov	r3, r0
    980a:	2800      	cmp	r0, #0
    980c:	d09d      	beq.n	974a <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    980e:	69e0      	ldr	r0, [r4, #28]
    9810:	6921      	ldr	r1, [r4, #16]
    9812:	6803      	ldr	r3, [r0, #0]
    9814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9816:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9818:	3108      	adds	r1, #8
    981a:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    981c:	4603      	mov	r3, r0
    981e:	2800      	cmp	r0, #0
    9820:	d093      	beq.n	974a <FatFormatter::makeFat32()+0x96>
    9822:	4b1d      	ldr	r3, [pc, #116]	; (9898 <FatFormatter::makeFat32()+0x1e4>)
    9824:	602b      	str	r3, [r5, #0]
    9826:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
    982a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    982e:	3320      	adds	r3, #32
    9830:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    9834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9838:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
    983c:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9840:	69e0      	ldr	r0, [r4, #28]
    9842:	6921      	ldr	r1, [r4, #16]
    9844:	6803      	ldr	r3, [r0, #0]
    9846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9848:	6a62      	ldr	r2, [r4, #36]	; 0x24
    984a:	3101      	adds	r1, #1
    984c:	4798      	blx	r3
    984e:	4603      	mov	r3, r0
    9850:	2800      	cmp	r0, #0
    9852:	f43f af7a 	beq.w	974a <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    9856:	69e0      	ldr	r0, [r4, #28]
    9858:	6921      	ldr	r1, [r4, #16]
    985a:	6803      	ldr	r3, [r0, #0]
    985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    985e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9860:	3107      	adds	r1, #7
    9862:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9864:	4603      	mov	r3, r0
    9866:	2800      	cmp	r0, #0
    9868:	f43f af6f 	beq.w	974a <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    986c:	68a2      	ldr	r2, [r4, #8]
    986e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    9872:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    9876:	2120      	movs	r1, #32
    9878:	4620      	mov	r0, r4
    987a:	f7ff fddb 	bl	9434 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    987e:	4603      	mov	r3, r0
    9880:	e763      	b.n	974a <FatFormatter::makeFat32()+0x96>
    return false;
    9882:	2300      	movs	r3, #0
    9884:	e761      	b.n	974a <FatFormatter::makeFat32()+0x96>
    9886:	bf00      	nop
    9888:	00fb0400 	.word	0x00fb0400
    988c:	20001fbc 	.word	0x20001fbc
    9890:	0012d687 	.word	0x0012d687
    9894:	aa550000 	.word	0xaa550000
    9898:	41615252 	.word	0x41615252

0000989c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    989c:	b538      	push	{r3, r4, r5, lr}
    989e:	4604      	mov	r4, r0
    98a0:	4608      	mov	r0, r1
  m_dev = dev;
    98a2:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
    98a4:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    98a6:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    98a8:	680b      	ldr	r3, [r1, #0]
    98aa:	69db      	ldr	r3, [r3, #28]
    98ac:	4798      	blx	r3
    98ae:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    98b0:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
    98b4:	0ada      	lsrs	r2, r3, #11
    98b6:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
    98b8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    98bc:	d31d      	bcc.n	98fa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
    98be:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
    98c2:	d333      	bcc.n	992c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
    98c4:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
    98c8:	d342      	bcc.n	9950 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
    98ca:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
    98ce:	d341      	bcc.n	9954 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
    98d0:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
    98d4:	d340      	bcc.n	9958 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
    98d6:	4a22      	ldr	r2, [pc, #136]	; (9960 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    98d8:	4293      	cmp	r3, r2
    98da:	d93f      	bls.n	995c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
    98dc:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
    98e0:	4293      	cmp	r3, r2
    98e2:	d814      	bhi.n	990e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
    98e4:	2340      	movs	r3, #64	; 0x40
    98e6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    98ea:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    98ee:	d320      	bcc.n	9932 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
    98f0:	4620      	mov	r0, r4
    98f2:	f7ff fedf 	bl	96b4 <FatFormatter::makeFat32()>
    98f6:	4605      	mov	r5, r0
    98f8:	e01f      	b.n	993a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
    98fa:	6a20      	ldr	r0, [r4, #32]
    98fc:	b1a0      	cbz	r0, 9928 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    98fe:	6803      	ldr	r3, [r0, #0]
    9900:	685b      	ldr	r3, [r3, #4]
    9902:	2214      	movs	r2, #20
    9904:	4917      	ldr	r1, [pc, #92]	; (9964 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    9906:	4798      	blx	r3
    return false;
    9908:	2500      	movs	r5, #0
}
    990a:	4628      	mov	r0, r5
    990c:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
    990e:	2380      	movs	r3, #128	; 0x80
    9910:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    9914:	e7ec      	b.n	98f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
    9916:	6a20      	ldr	r0, [r4, #32]
    9918:	2800      	cmp	r0, #0
    991a:	d0f6      	beq.n	990a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    991c:	6803      	ldr	r3, [r0, #0]
    991e:	685b      	ldr	r3, [r3, #4]
    9920:	220f      	movs	r2, #15
    9922:	4911      	ldr	r1, [pc, #68]	; (9968 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    9924:	4798      	blx	r3
    9926:	e7f0      	b.n	990a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
    9928:	2500      	movs	r5, #0
    992a:	e7ee      	b.n	990a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    992c:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
    992e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    9932:	4620      	mov	r0, r4
    9934:	f7ff fe30 	bl	9598 <FatFormatter::makeFat16()>
    9938:	4605      	mov	r5, r0
  if (rtn) {
    993a:	2d00      	cmp	r5, #0
    993c:	d0eb      	beq.n	9916 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    993e:	6a20      	ldr	r0, [r4, #32]
    9940:	2800      	cmp	r0, #0
    9942:	d0e2      	beq.n	990a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9944:	6803      	ldr	r3, [r0, #0]
    9946:	685b      	ldr	r3, [r3, #4]
    9948:	220d      	movs	r2, #13
    994a:	4908      	ldr	r1, [pc, #32]	; (996c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
    994c:	4798      	blx	r3
    994e:	e7dc      	b.n	990a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9950:	2304      	movs	r3, #4
    9952:	e7ec      	b.n	992e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9954:	2308      	movs	r3, #8
    9956:	e7ea      	b.n	992e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9958:	2310      	movs	r3, #16
    995a:	e7e8      	b.n	992e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    995c:	2320      	movs	r3, #32
    995e:	e7e6      	b.n	992e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9960:	002007ff 	.word	0x002007ff
    9964:	20001f84 	.word	0x20001f84
    9968:	20001fac 	.word	0x20001fac
    996c:	20001f9c 	.word	0x20001f9c

00009970 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    9970:	2a04      	cmp	r2, #4
    9972:	d804      	bhi.n	997e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9974:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9978:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    997c:	4770      	bx	lr
  } else if (i < 11) {
    997e:	2a0a      	cmp	r2, #10
    9980:	d803      	bhi.n	998a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    9982:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9986:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    9988:	4770      	bx	lr
  } else if (i < 13) {
    998a:	2a0c      	cmp	r2, #12
    998c:	d803      	bhi.n	9996 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    998e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9992:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
    9994:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9996:	2000      	movs	r0, #0
}
    9998:	4770      	bx	lr

0000999a <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    999a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    999e:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    99a0:	7804      	ldrb	r4, [r0, #0]
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    99a2:	2c00      	cmp	r4, #0
    99a4:	d041      	beq.n	9a2a <FatFile::getSFN(char*, unsigned int)+0x90>
    99a6:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    99a8:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    99ac:	d007      	beq.n	99be <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
    99ae:	2a01      	cmp	r2, #1
    99b0:	d93b      	bls.n	9a2a <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    99b2:	232f      	movs	r3, #47	; 0x2f
    99b4:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
    99b6:	2300      	movs	r3, #0
    99b8:	704b      	strb	r3, [r1, #1]
    return 1;
    99ba:	2001      	movs	r0, #1
    99bc:	e037      	b.n	9a2e <FatFile::getSFN(char*, unsigned int)+0x94>
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    99be:	2100      	movs	r1, #0
    99c0:	f7fe f930 	bl	7c24 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    99c4:	4686      	mov	lr, r0
    99c6:	b380      	cbz	r0, 9a2a <FatFile::getSFN(char*, unsigned int)+0x90>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    99c8:	4603      	mov	r3, r0
    99ca:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
    99cc:	2108      	movs	r1, #8
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    99ce:	f04f 0810 	mov.w	r8, #16
      c = '.';
    99d2:	272e      	movs	r7, #46	; 0x2e
    99d4:	e012      	b.n	99fc <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
    99d6:	781a      	ldrb	r2, [r3, #0]
    99d8:	2a20      	cmp	r2, #32
    99da:	d022      	beq.n	9a22 <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
    99dc:	4641      	mov	r1, r8
      c = '.';
    99de:	46bc      	mov	ip, r7
    99e0:	e002      	b.n	99e8 <FatFile::getSFN(char*, unsigned int)+0x4e>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
        c += 'a' - 'A';
      }
      if (c == ' ') {
    99e2:	f1bc 0f20 	cmp.w	ip, #32
    99e6:	d006      	beq.n	99f6 <FatFile::getSFN(char*, unsigned int)+0x5c>
        continue;
      }
    }
    if ((j + 1u) >= size) {
    99e8:	46a1      	mov	r9, r4
    99ea:	1c62      	adds	r2, r4, #1
    99ec:	42b2      	cmp	r2, r6
    99ee:	d21c      	bcs.n	9a2a <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    99f0:	b2d4      	uxtb	r4, r2
    99f2:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
    99f6:	3001      	adds	r0, #1
    99f8:	280c      	cmp	r0, #12
    99fa:	d012      	beq.n	9a22 <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
    99fc:	b2c2      	uxtb	r2, r0
    99fe:	2a08      	cmp	r2, #8
    9a00:	d0e9      	beq.n	99d6 <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
    9a02:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9a06:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
    9a0a:	b2d2      	uxtb	r2, r2
    9a0c:	2a19      	cmp	r2, #25
    9a0e:	d8e8      	bhi.n	99e2 <FatFile::getSFN(char*, unsigned int)+0x48>
    9a10:	f89e 200c 	ldrb.w	r2, [lr, #12]
    9a14:	4211      	tst	r1, r2
    9a16:	d0e7      	beq.n	99e8 <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
    9a18:	f10c 0c20 	add.w	ip, ip, #32
    9a1c:	fa5f fc8c 	uxtb.w	ip, ip
    9a20:	e7e2      	b.n	99e8 <FatFile::getSFN(char*, unsigned int)+0x4e>
  }
  name[j] = '\0';
    9a22:	4620      	mov	r0, r4
    9a24:	2300      	movs	r3, #0
    9a26:	552b      	strb	r3, [r5, r4]
  return j;
    9a28:	e001      	b.n	9a2e <FatFile::getSFN(char*, unsigned int)+0x94>

 fail:
  name[0] = '\0';
    9a2a:	2000      	movs	r0, #0
    9a2c:	7028      	strb	r0, [r5, #0]
  return 0;
}
    9a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00009a34 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    9a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a38:	b08b      	sub	sp, #44	; 0x2c
    9a3a:	4689      	mov	r9, r1
  FatFile() {}
    9a3c:	2300      	movs	r3, #0
    9a3e:	f88d 3004 	strb.w	r3, [sp, #4]
    9a42:	f88d 3005 	strb.w	r3, [sp, #5]
    9a46:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
    9a4a:	7803      	ldrb	r3, [r0, #0]
    9a4c:	2b00      	cmp	r3, #0
    9a4e:	d05d      	beq.n	9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
    9a50:	4604      	mov	r4, r0
    9a52:	4617      	mov	r7, r2
  if (!isLFN()) {
    9a54:	78c3      	ldrb	r3, [r0, #3]
    9a56:	b913      	cbnz	r3, 9a5e <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    9a58:	f7ff ff9f 	bl	999a <FatFile::getSFN(char*, unsigned int)>
    9a5c:	e059      	b.n	9b12 <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
    9a5e:	4601      	mov	r1, r0
    9a60:	a801      	add	r0, sp, #4
    9a62:	f7fe f90e 	bl	7c82 <FatFile::openCluster(FatFile*)>
    9a66:	2800      	cmp	r0, #0
    9a68:	d050      	beq.n	9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9a6a:	78e3      	ldrb	r3, [r4, #3]
    9a6c:	2b00      	cmp	r3, #0
    9a6e:	d05d      	beq.n	9b2c <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
    9a70:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9a72:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
    9a76:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9a78:	3f01      	subs	r7, #1
    9a7a:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9a7c:	88a1      	ldrh	r1, [r4, #4]
    9a7e:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9a82:	b289      	uxth	r1, r1
    9a84:	0149      	lsls	r1, r1, #5
    9a86:	a801      	add	r0, sp, #4
    9a88:	f7fe fa1c 	bl	7ec4 <FatFile::seekSet(unsigned long)>
    9a8c:	2800      	cmp	r0, #0
    9a8e:	d03d      	beq.n	9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
    9a90:	2100      	movs	r1, #0
    9a92:	a801      	add	r0, sp, #4
    9a94:	f7fe f9f4 	bl	7e80 <FatFile::readDirCache(bool)>
    if (!ldir) {
    9a98:	4682      	mov	sl, r0
    9a9a:	b3b8      	cbz	r0, 9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9a9c:	7ac3      	ldrb	r3, [r0, #11]
    9a9e:	2b0f      	cmp	r3, #15
    9aa0:	d134      	bne.n	9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
    9aa2:	7803      	ldrb	r3, [r0, #0]
    9aa4:	f003 031f 	and.w	r3, r3, #31
    9aa8:	455b      	cmp	r3, fp
    9aaa:	d12f      	bne.n	9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
    9aac:	f04f 0800 	mov.w	r8, #0
    9ab0:	e012      	b.n	9ad8 <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    9ab2:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    9ab6:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    9ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9abc:	d323      	bcc.n	9b06 <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
    9abe:	b3b0      	cbz	r0, 9b2e <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9ac0:	463a      	mov	r2, r7
    9ac2:	4629      	mov	r1, r5
    9ac4:	f002 fb55 	bl	c172 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9ac8:	4605      	mov	r5, r0
    9aca:	b1f8      	cbz	r0, 9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
    9acc:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
    9ace:	f108 0801 	add.w	r8, r8, #1
    9ad2:	f1b8 0f0d 	cmp.w	r8, #13
    9ad6:	d021      	beq.n	9b1c <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
    9ad8:	fa5f f288 	uxtb.w	r2, r8
    9adc:	4651      	mov	r1, sl
    9ade:	4620      	mov	r0, r4
    9ae0:	f7ff ff46 	bl	9970 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    9ae4:	2e00      	cmp	r6, #0
    9ae6:	d0e4      	beq.n	9ab2 <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    9ae8:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    9aec:	b29b      	uxth	r3, r3
    9aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9af2:	d20b      	bcs.n	9b0c <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    9af4:	4b10      	ldr	r3, [pc, #64]	; (9b38 <FatFile::getName8(char*, unsigned int)+0x104>)
    9af6:	ea03 2686 	and.w	r6, r3, r6, lsl #10
    9afa:	f3c0 0009 	ubfx	r0, r0, #0, #10
    9afe:	4306      	orrs	r6, r0
    9b00:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
    9b04:	e7dc      	b.n	9ac0 <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
    9b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9b0a:	d305      	bcc.n	9b18 <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
    9b0c:	2000      	movs	r0, #0
    9b0e:	f889 0000 	strb.w	r0, [r9]
}
    9b12:	b00b      	add	sp, #44	; 0x2c
    9b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    9b18:	4606      	mov	r6, r0
    9b1a:	e7d8      	b.n	9ace <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9b1c:	f10b 0b01 	add.w	fp, fp, #1
    9b20:	fa5f fb8b 	uxtb.w	fp, fp
    9b24:	78e3      	ldrb	r3, [r4, #3]
    9b26:	455b      	cmp	r3, fp
    9b28:	d2a8      	bcs.n	9a7c <FatFile::getName8(char*, unsigned int)+0x48>
    9b2a:	e000      	b.n	9b2e <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
    9b2c:	464d      	mov	r5, r9
  *str = '\0';
    9b2e:	2300      	movs	r3, #0
    9b30:	702b      	strb	r3, [r5, #0]
  return str - name;
    9b32:	eba5 0009 	sub.w	r0, r5, r9
    9b36:	e7ec      	b.n	9b12 <FatFile::getName8(char*, unsigned int)+0xde>
    9b38:	000ffc00 	.word	0x000ffc00

00009b3c <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    9b3c:	b508      	push	{r3, lr}
  return getName8(name, size);
    9b3e:	f7ff ff79 	bl	9a34 <FatFile::getName8(char*, unsigned int)>
}
    9b42:	bd08      	pop	{r3, pc}

00009b44 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    9b44:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    9b46:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    9b48:	46a4      	mov	ip, r4
    9b4a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    9b4e:	bf28      	it	cs
    9b50:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9b54:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9b58:	4281      	cmp	r1, r0
    9b5a:	d307      	bcc.n	9b6c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    9b5c:	eba4 040c 	sub.w	r4, r4, ip
    9b60:	6014      	str	r4, [r2, #0]
}
    9b62:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b66:	4770      	bx	lr
  while (p < e) {
    9b68:	4288      	cmp	r0, r1
    9b6a:	d9f7      	bls.n	9b5c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
    9b6c:	f831 3b02 	ldrh.w	r3, [r1], #2
    9b70:	2b00      	cmp	r3, #0
    9b72:	d1f9      	bne.n	9b68 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9b74:	6853      	ldr	r3, [r2, #4]
    9b76:	3301      	adds	r3, #1
    9b78:	6053      	str	r3, [r2, #4]
    9b7a:	e7f5      	b.n	9b68 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

00009b7c <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9b7c:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    9b7e:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    9b80:	46a4      	mov	ip, r4
    9b82:	2c80      	cmp	r4, #128	; 0x80
    9b84:	bf28      	it	cs
    9b86:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    9b8a:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    9b8e:	4281      	cmp	r1, r0
    9b90:	d307      	bcc.n	9ba2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    9b92:	eba4 040c 	sub.w	r4, r4, ip
    9b96:	6014      	str	r4, [r2, #0]
}
    9b98:	f85d 4b04 	ldr.w	r4, [sp], #4
    9b9c:	4770      	bx	lr
  while (p < e) {
    9b9e:	4288      	cmp	r0, r1
    9ba0:	d9f7      	bls.n	9b92 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
    9ba2:	f851 3b04 	ldr.w	r3, [r1], #4
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	d1f9      	bne.n	9b9e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    9baa:	6853      	ldr	r3, [r2, #4]
    9bac:	3301      	adds	r3, #1
    9bae:	6053      	str	r3, [r2, #4]
    9bb0:	e7f5      	b.n	9b9e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

00009bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    9bb2:	2901      	cmp	r1, #1
    9bb4:	d974      	bls.n	9ca0 <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9bb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9bba:	4606      	mov	r6, r0
    9bbc:	460c      	mov	r4, r1
    9bbe:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    9bc0:	69c3      	ldr	r3, [r0, #28]
    9bc2:	428b      	cmp	r3, r1
    9bc4:	d36f      	bcc.n	9ca6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
    9bc6:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9bc8:	2b20      	cmp	r3, #32
    9bca:	d02d      	beq.n	9c28 <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
    9bcc:	2b10      	cmp	r3, #16
    9bce:	d044      	beq.n	9c5a <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    9bd0:	2b0c      	cmp	r3, #12
    9bd2:	d172      	bne.n	9cba <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
    9bd4:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9bd8:	fa13 f381 	uxtah	r3, r3, r1
    9bdc:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9bde:	f3c3 2346 	ubfx	r3, r3, #9, #7
    9be2:	6982      	ldr	r2, [r0, #24]
    9be4:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
    9be8:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9bec:	7a02      	ldrb	r2, [r0, #8]
    9bee:	2a02      	cmp	r2, #2
    9bf0:	bf14      	ite	ne
    9bf2:	2200      	movne	r2, #0
    9bf4:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9bf6:	0052      	lsls	r2, r2, #1
    9bf8:	4641      	mov	r1, r8
    9bfa:	4648      	mov	r0, r9
    9bfc:	f002 f9ff 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9c00:	4602      	mov	r2, r0
    9c02:	2800      	cmp	r0, #0
    9c04:	d05c      	beq.n	9cc0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
    9c06:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
    9c0a:	5cc7      	ldrb	r7, [r0, r3]
    index++;
    9c0c:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9c12:	d036      	beq.n	9c82 <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
    9c14:	5cd3      	ldrb	r3, [r2, r3]
    9c16:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    9c1a:	f014 0f01 	tst.w	r4, #1
    9c1e:	bf14      	ite	ne
    9c20:	091b      	lsrne	r3, r3, #4
    9c22:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
    9c26:	e012      	b.n	9c4e <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9c28:	7a02      	ldrb	r2, [r0, #8]
    9c2a:	2a02      	cmp	r2, #2
    9c2c:	bf14      	ite	ne
    9c2e:	2200      	movne	r2, #0
    9c30:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9c32:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9c34:	0052      	lsls	r2, r2, #1
    9c36:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9c3a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9c3e:	f002 f9de 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9c42:	2800      	cmp	r0, #0
    9c44:	d033      	beq.n	9cae <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9c46:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    9c48:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    9c4c:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    9c4e:	69f2      	ldr	r2, [r6, #28]
    9c50:	4293      	cmp	r3, r2
    9c52:	d83b      	bhi.n	9ccc <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
    9c54:	602b      	str	r3, [r5, #0]
  return 1;
    9c56:	2001      	movs	r0, #1
    9c58:	e027      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9c5a:	7a02      	ldrb	r2, [r0, #8]
    9c5c:	2a02      	cmp	r2, #2
    9c5e:	bf14      	ite	ne
    9c60:	2200      	movne	r2, #0
    9c62:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9c64:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9c68:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9c6a:	0052      	lsls	r2, r2, #1
    9c6c:	4419      	add	r1, r3
    9c6e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9c72:	f002 f9c4 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9c76:	b1e8      	cbz	r0, 9cb4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9c78:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    9c7a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    9c7e:	5b03      	ldrh	r3, [r0, r4]
    9c80:	e7e5      	b.n	9c4e <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9c82:	7a32      	ldrb	r2, [r6, #8]
    9c84:	2a02      	cmp	r2, #2
    9c86:	bf14      	ite	ne
    9c88:	2200      	movne	r2, #0
    9c8a:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9c8c:	0052      	lsls	r2, r2, #1
    9c8e:	f108 0101 	add.w	r1, r8, #1
    9c92:	4648      	mov	r0, r9
    9c94:	f002 f9b3 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9c98:	4602      	mov	r2, r0
    9c9a:	b1a0      	cbz	r0, 9cc6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
    9c9c:	2300      	movs	r3, #0
    9c9e:	e7b9      	b.n	9c14 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
    9ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9ca4:	4770      	bx	lr
  return -1;
    9ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
    9cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cb2:	e7fa      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cb8:	e7f7      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cbe:	e7f4      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cc4:	e7f1      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cca:	e7ee      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
    9ccc:	2000      	movs	r0, #0
    9cce:	e7ec      	b.n	9caa <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

00009cd0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    9cd0:	2901      	cmp	r1, #1
    9cd2:	d972      	bls.n	9dba <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9cd8:	4606      	mov	r6, r0
    9cda:	460c      	mov	r4, r1
    9cdc:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    9cde:	69c3      	ldr	r3, [r0, #28]
    9ce0:	428b      	cmp	r3, r1
    9ce2:	d36c      	bcc.n	9dbe <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
    9ce4:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9ce6:	2b20      	cmp	r3, #32
    9ce8:	d02d      	beq.n	9d46 <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
    9cea:	2b10      	cmp	r3, #16
    9cec:	d03e      	beq.n	9d6c <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
    9cee:	2b0c      	cmp	r3, #12
    9cf0:	d16c      	bne.n	9dcc <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
    9cf2:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9cf6:	fa13 f381 	uxtah	r3, r3, r1
    9cfa:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9cfc:	f3c3 2346 	ubfx	r3, r3, #9, #7
    9d00:	6982      	ldr	r2, [r0, #24]
    9d02:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9d06:	7a03      	ldrb	r3, [r0, #8]
    9d08:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9d0a:	f500 790e 	add.w	r9, r0, #568	; 0x238
    9d0e:	bf14      	ite	ne
    9d10:	2201      	movne	r2, #1
    9d12:	2203      	moveq	r2, #3
    9d14:	4641      	mov	r1, r8
    9d16:	4648      	mov	r0, r9
    9d18:	f002 f971 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9d1c:	4601      	mov	r1, r0
    9d1e:	2800      	cmp	r0, #0
    9d20:	d056      	beq.n	9dd0 <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
    9d22:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
    9d26:	f014 0401 	ands.w	r4, r4, #1
    9d2a:	d055      	beq.n	9dd8 <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
    9d2c:	5cc2      	ldrb	r2, [r0, r3]
    9d2e:	f002 020f 	and.w	r2, r2, #15
    9d32:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
    9d36:	54c2      	strb	r2, [r0, r3]
    index++;
    9d38:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9d3e:	d029      	beq.n	9d94 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    9d40:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9d44:	e054      	b.n	9df0 <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9d46:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9d48:	7a03      	ldrb	r3, [r0, #8]
    9d4a:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9d4c:	bf14      	ite	ne
    9d4e:	2201      	movne	r2, #1
    9d50:	2203      	moveq	r2, #3
    9d52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9d56:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9d5a:	f002 f950 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9d5e:	b388      	cbz	r0, 9dc4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9d60:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    9d62:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9d66:	5105      	str	r5, [r0, r4]
    return true;
    9d68:	2001      	movs	r0, #1
    9d6a:	e029      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9d6c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9d70:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9d72:	7a02      	ldrb	r2, [r0, #8]
    9d74:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    9d76:	bf14      	ite	ne
    9d78:	2201      	movne	r2, #1
    9d7a:	2203      	moveq	r2, #3
    9d7c:	4419      	add	r1, r3
    9d7e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9d82:	f002 f93c 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9d86:	b1f8      	cbz	r0, 9dc8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9d88:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    9d8a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    9d8e:	5305      	strh	r5, [r0, r4]
    return true;
    9d90:	2001      	movs	r0, #1
    9d92:	e015      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9d94:	7a33      	ldrb	r3, [r6, #8]
    9d96:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9d98:	bf14      	ite	ne
    9d9a:	2201      	movne	r2, #1
    9d9c:	2203      	moveq	r2, #3
    9d9e:	f108 0101 	add.w	r1, r8, #1
    9da2:	4648      	mov	r0, r9
    9da4:	f002 f92b 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9da8:	4601      	mov	r1, r0
    9daa:	b198      	cbz	r0, 9dd4 <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
    9dac:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9db0:	b90c      	cbnz	r4, 9db6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
    9db2:	2300      	movs	r3, #0
    9db4:	e017      	b.n	9de6 <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
    9db6:	2300      	movs	r3, #0
    9db8:	e01a      	b.n	9df0 <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
    9dba:	2000      	movs	r0, #0
}
    9dbc:	4770      	bx	lr
  return false;
    9dbe:	2000      	movs	r0, #0
}
    9dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9dc4:	2000      	movs	r0, #0
    9dc6:	e7fb      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9dc8:	2000      	movs	r0, #0
    9dca:	e7f9      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9dcc:	2000      	movs	r0, #0
    9dce:	e7f7      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9dd0:	2000      	movs	r0, #0
    9dd2:	e7f5      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9dd4:	2000      	movs	r0, #0
    9dd6:	e7f3      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
    9dd8:	54c5      	strb	r5, [r0, r3]
    index++;
    9dda:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9de0:	d0d8      	beq.n	9d94 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    9de2:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9de6:	5cc8      	ldrb	r0, [r1, r3]
    9de8:	f020 000f 	bic.w	r0, r0, #15
    9dec:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
    9df0:	54ca      	strb	r2, [r1, r3]
    return true;
    9df2:	2001      	movs	r0, #1
    9df4:	e7e4      	b.n	9dc0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

00009df6 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9df6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9dfa:	b083      	sub	sp, #12
    9dfc:	4605      	mov	r5, r0
    9dfe:	460e      	mov	r6, r1
    9e00:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    9e02:	68c4      	ldr	r4, [r0, #12]
    9e04:	428c      	cmp	r4, r1
    9e06:	d30c      	bcc.n	9e22 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
    9e08:	2701      	movs	r7, #1
      setStart = true;
    9e0a:	f04f 0901 	mov.w	r9, #1
    find++;
    9e0e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    9e10:	69eb      	ldr	r3, [r5, #28]
    9e12:	42a3      	cmp	r3, r4
    9e14:	d20b      	bcs.n	9e2e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
    9e16:	b13f      	cbz	r7, 9e28 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
    9e18:	2700      	movs	r7, #0
}
    9e1a:	4638      	mov	r0, r7
    9e1c:	b003      	add	sp, #12
    9e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
    9e22:	460c      	mov	r4, r1
    setStart = false;
    9e24:	2700      	movs	r7, #0
    9e26:	e7f0      	b.n	9e0a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
    9e28:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    9e2a:	464f      	mov	r7, r9
    9e2c:	e7ef      	b.n	9e0e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
    9e2e:	42a6      	cmp	r6, r4
    9e30:	d0f2      	beq.n	9e18 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
    9e32:	aa01      	add	r2, sp, #4
    9e34:	4621      	mov	r1, r4
    9e36:	4628      	mov	r0, r5
    9e38:	f7ff febb 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9e3c:	2800      	cmp	r0, #0
    9e3e:	dbeb      	blt.n	9e18 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
    9e40:	2800      	cmp	r0, #0
    9e42:	d0e4      	beq.n	9e0e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    9e44:	9b01      	ldr	r3, [sp, #4]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d1e1      	bne.n	9e0e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    9e4a:	b107      	cbz	r7, 9e4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
    9e4c:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
    9e4e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9e52:	4621      	mov	r1, r4
    9e54:	4628      	mov	r0, r5
    9e56:	f7ff ff3b 	bl	9cd0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    9e5a:	4607      	mov	r7, r0
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d0dc      	beq.n	9e1a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
    9e60:	b93e      	cbnz	r6, 9e72 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
    9e62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9e64:	2b00      	cmp	r3, #0
    9e66:	db01      	blt.n	9e6c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
    9e68:	3b01      	subs	r3, #1
    9e6a:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9e6c:	f8c8 4000 	str.w	r4, [r8]
  return true;
    9e70:	e7d3      	b.n	9e1a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
    9e72:	4622      	mov	r2, r4
    9e74:	4631      	mov	r1, r6
    9e76:	4628      	mov	r0, r5
    9e78:	f7ff ff2a 	bl	9cd0 <FatPartition::fatPut(unsigned long, unsigned long)>
    9e7c:	2800      	cmp	r0, #0
    9e7e:	d1f0      	bne.n	9e62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
    9e80:	4607      	mov	r7, r0
    9e82:	e7ca      	b.n	9e1a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00009e84 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e86:	b083      	sub	sp, #12
    9e88:	4605      	mov	r5, r0
    9e8a:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
    9e8c:	2700      	movs	r7, #0
    9e8e:	e001      	b.n	9e94 <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
    9e90:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
    9e92:	b1ce      	cbz	r6, 9ec8 <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
    9e94:	aa01      	add	r2, sp, #4
    9e96:	4621      	mov	r1, r4
    9e98:	4628      	mov	r0, r5
    9e9a:	f7ff fe8a 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9e9e:	1e06      	subs	r6, r0, #0
    9ea0:	db11      	blt.n	9ec6 <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
    9ea2:	463a      	mov	r2, r7
    9ea4:	4621      	mov	r1, r4
    9ea6:	4628      	mov	r0, r5
    9ea8:	f7ff ff12 	bl	9cd0 <FatPartition::fatPut(unsigned long, unsigned long)>
    9eac:	4602      	mov	r2, r0
    9eae:	b158      	cbz	r0, 9ec8 <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
    9eb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	db01      	blt.n	9eba <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
    9eb6:	3301      	adds	r3, #1
    9eb8:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9eba:	68eb      	ldr	r3, [r5, #12]
    9ebc:	42a3      	cmp	r3, r4
    9ebe:	d9e7      	bls.n	9e90 <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
    9ec0:	3c01      	subs	r4, #1
    9ec2:	60ec      	str	r4, [r5, #12]
    9ec4:	e7e4      	b.n	9e90 <FatPartition::freeChain(unsigned long)+0xc>
  return false;
    9ec6:	2200      	movs	r2, #0
}
    9ec8:	4610      	mov	r0, r2
    9eca:	b003      	add	sp, #12
    9ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00009ed0 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    9ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ed2:	b087      	sub	sp, #28
    9ed4:	4604      	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    9ed6:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9ed8:	2800      	cmp	r0, #0
    9eda:	da45      	bge.n	9f68 <FatPartition::freeClusterCount()+0x98>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    9edc:	79e3      	ldrb	r3, [r4, #7]
    9ede:	2b0c      	cmp	r3, #12
    9ee0:	d11e      	bne.n	9f20 <FatPartition::freeClusterCount()+0x50>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    9ee2:	69e7      	ldr	r7, [r4, #28]
    9ee4:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    9ee6:	2b02      	cmp	r3, #2
    9ee8:	d917      	bls.n	9f1a <FatPartition::freeClusterCount()+0x4a>
    9eea:	2502      	movs	r5, #2
    uint32_t free = 0;
    9eec:	2600      	movs	r6, #0
    9eee:	e006      	b.n	9efe <FatPartition::freeClusterCount()+0x2e>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
    9ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9ef4:	e038      	b.n	9f68 <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
    9ef6:	1c6b      	adds	r3, r5, #1
    9ef8:	42af      	cmp	r7, r5
    9efa:	d00f      	beq.n	9f1c <FatPartition::freeClusterCount()+0x4c>
    9efc:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
    9efe:	aa03      	add	r2, sp, #12
    9f00:	4629      	mov	r1, r5
    9f02:	4620      	mov	r0, r4
    9f04:	f7ff fe55 	bl	9bb2 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    9f08:	2800      	cmp	r0, #0
    9f0a:	dbf1      	blt.n	9ef0 <FatPartition::freeClusterCount()+0x20>
      }
      if (fg && c == 0) {
    9f0c:	2800      	cmp	r0, #0
    9f0e:	d0f2      	beq.n	9ef6 <FatPartition::freeClusterCount()+0x26>
    9f10:	9b03      	ldr	r3, [sp, #12]
    9f12:	2b00      	cmp	r3, #0
    9f14:	d1ef      	bne.n	9ef6 <FatPartition::freeClusterCount()+0x26>
        free++;
    9f16:	3601      	adds	r6, #1
    9f18:	e7ed      	b.n	9ef6 <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
    9f1a:	2600      	movs	r6, #0
      }
    }
    return free;
    9f1c:	4630      	mov	r0, r6
    9f1e:	e023      	b.n	9f68 <FatPartition::freeClusterCount()+0x98>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    9f20:	2300      	movs	r3, #0
    9f22:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
    9f24:	69e3      	ldr	r3, [r4, #28]
    9f26:	3301      	adds	r3, #1
    9f28:	9304      	str	r3, [sp, #16]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    9f2a:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
    9f2c:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    9f30:	f013 0f01 	tst.w	r3, #1
    9f34:	d11a      	bne.n	9f6c <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
    9f36:	2300      	movs	r3, #0
    9f38:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f40:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
    9f44:	f504 7212 	add.w	r2, r4, #584	; 0x248
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    9f48:	79e3      	ldrb	r3, [r4, #7]
    9f4a:	2b20      	cmp	r3, #32
    9f4c:	d017      	beq.n	9f7e <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9f4e:	6820      	ldr	r0, [r4, #0]
    9f50:	6803      	ldr	r3, [r0, #0]
    9f52:	a904      	add	r1, sp, #16
    9f54:	9101      	str	r1, [sp, #4]
    9f56:	4913      	ldr	r1, [pc, #76]	; (9fa4 <FatPartition::freeClusterCount()+0xd4>)
    9f58:	9100      	str	r1, [sp, #0]
    9f5a:	699e      	ldr	r6, [r3, #24]
    9f5c:	462b      	mov	r3, r5
    9f5e:	69a1      	ldr	r1, [r4, #24]
    9f60:	47b0      	blx	r6
    9f62:	b1d8      	cbz	r0, 9f9c <FatPartition::freeClusterCount()+0xcc>
  }

  setFreeClusterCount(state.free_count);
    9f64:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    9f66:	6260      	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    9f68:	b007      	add	sp, #28
    9f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
    9f6c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9f70:	f002 f81e 	bl	bfb0 <FsCache::sync()>
    9f74:	2800      	cmp	r0, #0
    9f76:	d1de      	bne.n	9f36 <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
    9f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9f7c:	e7f4      	b.n	9f68 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9f7e:	6820      	ldr	r0, [r4, #0]
    9f80:	6803      	ldr	r3, [r0, #0]
    9f82:	a904      	add	r1, sp, #16
    9f84:	9101      	str	r1, [sp, #4]
    9f86:	4908      	ldr	r1, [pc, #32]	; (9fa8 <FatPartition::freeClusterCount()+0xd8>)
    9f88:	9100      	str	r1, [sp, #0]
    9f8a:	699e      	ldr	r6, [r3, #24]
    9f8c:	462b      	mov	r3, r5
    9f8e:	69a1      	ldr	r1, [r4, #24]
    9f90:	47b0      	blx	r6
    9f92:	2800      	cmp	r0, #0
    9f94:	d1e6      	bne.n	9f64 <FatPartition::freeClusterCount()+0x94>
    9f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9f9a:	e7e5      	b.n	9f68 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9fa0:	e7e2      	b.n	9f68 <FatPartition::freeClusterCount()+0x98>
    9fa2:	bf00      	nop
    9fa4:	00009b45 	.word	0x00009b45
    9fa8:	00009b7d 	.word	0x00009b7d

00009fac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9fac:	b570      	push	{r4, r5, r6, lr}
    9fae:	4604      	mov	r4, r0
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    9fb0:	6001      	str	r1, [r0, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    9fb2:	2300      	movs	r3, #0
    9fb4:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    9fb6:	2001      	movs	r0, #1
    9fb8:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
    9fba:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
    9fbe:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
    9fc0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9fc8:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    9fca:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    9fce:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9fd2:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9fd6:	b1e2      	cbz	r2, a012 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    9fd8:	4616      	mov	r6, r2
    if (part > 4) {
    9fda:	2a04      	cmp	r2, #4
    9fdc:	d901      	bls.n	9fe2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    9fde:	2000      	movs	r0, #0
}
    9fe0:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    9fe2:	461a      	mov	r2, r3
    9fe4:	4619      	mov	r1, r3
    9fe6:	4628      	mov	r0, r5
    9fe8:	f002 f809 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    9fec:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    9ff0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9ff4:	4433      	add	r3, r6
    9ff6:	011e      	lsls	r6, r3, #4
    9ff8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d06a      	beq.n	a0d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
    a000:	7919      	ldrb	r1, [r3, #4]
    a002:	2900      	cmp	r1, #0
    a004:	d069      	beq.n	a0da <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
    a006:	5d92      	ldrb	r2, [r2, r6]
    a008:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    a00c:	d167      	bne.n	a0de <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
    a00e:	689e      	ldr	r6, [r3, #8]
    a010:	e000      	b.n	a014 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
    a012:	2600      	movs	r6, #0
    a014:	2200      	movs	r2, #0
    a016:	4631      	mov	r1, r6
    a018:	4628      	mov	r0, r5
    a01a:	f001 fff0 	bl	bffe <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    a01e:	4601      	mov	r1, r0
    a020:	2800      	cmp	r0, #0
    a022:	d05e      	beq.n	a0e2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
    a024:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    a028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a02c:	d15b      	bne.n	a0e6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
    a02e:	7c03      	ldrb	r3, [r0, #16]
    a030:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a032:	3b01      	subs	r3, #1
    a034:	b2db      	uxtb	r3, r3
    a036:	2b01      	cmp	r3, #1
    a038:	d857      	bhi.n	a0ea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a03a:	7b40      	ldrb	r0, [r0, #13]
    a03c:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a03e:	1e43      	subs	r3, r0, #1
    a040:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    a042:	2300      	movs	r3, #0
    a044:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a046:	2801      	cmp	r0, #1
    a048:	d00d      	beq.n	a066 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
    a04a:	2200      	movs	r2, #0
    a04c:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
    a04e:	3201      	adds	r2, #1
    a050:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a052:	005b      	lsls	r3, r3, #1
    a054:	b2db      	uxtb	r3, r3
    a056:	4298      	cmp	r0, r3
    a058:	d004      	beq.n	a064 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
    a05a:	2b00      	cmp	r3, #0
    a05c:	d1f7      	bne.n	a04e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    a05e:	71a2      	strb	r2, [r4, #6]
  return false;
    a060:	2000      	movs	r0, #0
    a062:	e7bd      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a064:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    a066:	8acb      	ldrh	r3, [r1, #22]
    a068:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    a06a:	b90b      	cbnz	r3, a070 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
    a06c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    a06e:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a070:	89cb      	ldrh	r3, [r1, #14]
    a072:	4433      	add	r3, r6
    a074:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
    a076:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    a07a:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a07c:	6920      	ldr	r0, [r4, #16]
    a07e:	7c0d      	ldrb	r5, [r1, #16]
    a080:	fb00 3305 	mla	r3, r0, r5, r3
    a084:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a086:	0152      	lsls	r2, r2, #5
    a088:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
    a08c:	eb03 2352 	add.w	r3, r3, r2, lsr #9
    a090:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
    a092:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
    a096:	b902      	cbnz	r2, a09a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
    a098:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    a09a:	1af3      	subs	r3, r6, r3
    a09c:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
    a09e:	79a2      	ldrb	r2, [r4, #6]
    a0a0:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
    a0a2:	1c5a      	adds	r2, r3, #1
    a0a4:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    a0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a0aa:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    a0ac:	f640 72f4 	movw	r2, #4084	; 0xff4
    a0b0:	4293      	cmp	r3, r2
    a0b2:	d907      	bls.n	a0c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    a0b4:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    a0b8:	4293      	cmp	r3, r2
    a0ba:	d90a      	bls.n	a0d2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
    a0bc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    a0be:	6223      	str	r3, [r4, #32]
    a0c0:	2320      	movs	r3, #32
    a0c2:	e000      	b.n	a0c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
    a0c4:	230c      	movs	r3, #12
    m_fatType = 12;
    a0c6:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    a0c8:	6320      	str	r0, [r4, #48]	; 0x30
    a0ca:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
    a0ce:	2001      	movs	r0, #1
    a0d0:	e786      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a0d2:	2310      	movs	r3, #16
    a0d4:	e7f7      	b.n	a0c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
    a0d6:	2000      	movs	r0, #0
    a0d8:	e782      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a0da:	2000      	movs	r0, #0
    a0dc:	e780      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a0de:	2000      	movs	r0, #0
    a0e0:	e77e      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a0e2:	2000      	movs	r0, #0
    a0e4:	e77c      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a0e6:	2000      	movs	r0, #0
    a0e8:	e77a      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    a0ea:	2000      	movs	r0, #0
    a0ec:	e778      	b.n	9fe0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

0000a0ee <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    a0ee:	b538      	push	{r3, r4, r5, lr}
    a0f0:	4604      	mov	r4, r0
    a0f2:	460d      	mov	r5, r1
    a0f4:	2300      	movs	r3, #0
    a0f6:	6383      	str	r3, [r0, #56]	; 0x38
    a0f8:	63c3      	str	r3, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    a0fa:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    a0fc:	b1ab      	cbz	r3, a12a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
    a0fe:	4601      	mov	r1, r0
    a100:	2024      	movs	r0, #36	; 0x24
    a102:	f000 f8b3 	bl	a26c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    a106:	2300      	movs	r3, #0
    a108:	7003      	strb	r3, [r0, #0]
    a10a:	7043      	strb	r3, [r0, #1]
    a10c:	7083      	strb	r3, [r0, #2]
    a10e:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    a110:	4684      	mov	ip, r0
    a112:	6bad      	ldr	r5, [r5, #56]	; 0x38
    a114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a11a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a11c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a120:	682b      	ldr	r3, [r5, #0]
    a122:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    a126:	4620      	mov	r0, r4
    a128:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
    a12a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    a12c:	2b00      	cmp	r3, #0
    a12e:	d0fa      	beq.n	a126 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
    a130:	4601      	mov	r1, r0
    a132:	2038      	movs	r0, #56	; 0x38
    a134:	f000 f89a 	bl	a26c <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    a138:	2300      	movs	r3, #0
    a13a:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    a13e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    a142:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    a146:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    a148:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a14a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    a14e:	f8d3 c000 	ldr.w	ip, [r3]
    a152:	685d      	ldr	r5, [r3, #4]
    a154:	6899      	ldr	r1, [r3, #8]
    a156:	68da      	ldr	r2, [r3, #12]
    a158:	f8c0 c000 	str.w	ip, [r0]
    a15c:	6045      	str	r5, [r0, #4]
    a15e:	6081      	str	r1, [r0, #8]
    a160:	60c2      	str	r2, [r0, #12]
    a162:	3310      	adds	r3, #16
    a164:	3010      	adds	r0, #16
    a166:	4573      	cmp	r3, lr
    a168:	d1f1      	bne.n	a14e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
    a16a:	681b      	ldr	r3, [r3, #0]
    a16c:	6003      	str	r3, [r0, #0]
    a16e:	e7da      	b.n	a126 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

0000a170 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    a170:	b510      	push	{r4, lr}
    a172:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a174:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a176:	b110      	cbz	r0, a17e <FsBaseFile::close()+0xe>
    a178:	f7fe f844 	bl	8204 <FatFile::close()>
    a17c:	b938      	cbnz	r0, a18e <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    a17e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a180:	b140      	cbz	r0, a194 <FsBaseFile::close()+0x24>
    a182:	f7fb fcbf 	bl	5b04 <ExFatFile::close()>
    a186:	b130      	cbz	r0, a196 <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
    a188:	2300      	movs	r3, #0
    a18a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    a18c:	e003      	b.n	a196 <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
    a18e:	2300      	movs	r3, #0
    a190:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    a192:	e000      	b.n	a196 <FsBaseFile::close()+0x26>
  }
  return false;
    a194:	2000      	movs	r0, #0
}
    a196:	bd10      	pop	{r4, pc}

0000a198 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    a198:	b3a1      	cbz	r1, a204 <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    a19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a19c:	4604      	mov	r4, r0
    a19e:	4617      	mov	r7, r2
    a1a0:	461e      	mov	r6, r3
    a1a2:	460d      	mov	r5, r1
    return false;
  }
  close();
    a1a4:	f7ff ffe4 	bl	a170 <FsBaseFile::close()>
  if (vol->m_fVol) {
    a1a8:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    a1ac:	b18b      	cbz	r3, a1d2 <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    a1ae:	4621      	mov	r1, r4
    a1b0:	2024      	movs	r0, #36	; 0x24
    a1b2:	f000 f85b 	bl	a26c <operator new(unsigned int, unsigned long*)>
    a1b6:	2300      	movs	r3, #0
    a1b8:	7003      	strb	r3, [r0, #0]
    a1ba:	7043      	strb	r3, [r0, #1]
    a1bc:	7083      	strb	r3, [r0, #2]
    a1be:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a1c0:	4633      	mov	r3, r6
    a1c2:	463a      	mov	r2, r7
    a1c4:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    a1c8:	f7fe f889 	bl	82de <FatFile::open(FatVolume*, char const*, int)>
    a1cc:	b900      	cbnz	r0, a1d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
    a1ce:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
    a1d2:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    a1d6:	b1bb      	cbz	r3, a208 <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
    a1d8:	4621      	mov	r1, r4
    a1da:	2038      	movs	r0, #56	; 0x38
    a1dc:	f000 f846 	bl	a26c <operator new(unsigned int, unsigned long*)>
    a1e0:	2200      	movs	r2, #0
    a1e2:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    a1e6:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    a1ea:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    a1ee:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a1f0:	4633      	mov	r3, r6
    a1f2:	463a      	mov	r2, r7
    a1f4:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    a1f8:	f7fc f8cd 	bl	6396 <ExFatFile::open(ExFatVolume*, char const*, int)>
    a1fc:	2800      	cmp	r0, #0
    a1fe:	d1e7      	bne.n	a1d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
    a200:	63e0      	str	r0, [r4, #60]	; 0x3c
    a202:	e7e5      	b.n	a1d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
    a204:	2000      	movs	r0, #0
}
    a206:	4770      	bx	lr
  return false;
    a208:	2000      	movs	r0, #0
    a20a:	e7e1      	b.n	a1d0 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

0000a20c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    a20c:	b570      	push	{r4, r5, r6, lr}
    a20e:	4605      	mov	r5, r0
    a210:	460c      	mov	r4, r1
    a212:	4616      	mov	r6, r2
  close();
    a214:	f7ff ffac 	bl	a170 <FsBaseFile::close()>
  if (dir->m_fFile) {
    a218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a21a:	b17b      	cbz	r3, a23c <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
    a21c:	4629      	mov	r1, r5
    a21e:	2024      	movs	r0, #36	; 0x24
    a220:	f000 f824 	bl	a26c <operator new(unsigned int, unsigned long*)>
    a224:	2100      	movs	r1, #0
    a226:	7001      	strb	r1, [r0, #0]
    a228:	7041      	strb	r1, [r0, #1]
    a22a:	7081      	strb	r1, [r0, #2]
    a22c:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    a22e:	4632      	mov	r2, r6
    a230:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    a232:	f7fd ff33 	bl	809c <FatFile::openNext(FatFile*, int)>
    a236:	b900      	cbnz	r0, a23a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
    a238:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a23a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
    a23c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a23e:	b19b      	cbz	r3, a268 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    a240:	4629      	mov	r1, r5
    a242:	2038      	movs	r0, #56	; 0x38
    a244:	f000 f812 	bl	a26c <operator new(unsigned int, unsigned long*)>
    a248:	2200      	movs	r2, #0
    a24a:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    a24e:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    a252:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    a256:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    a258:	4632      	mov	r2, r6
    a25a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    a25c:	f7fc f8a4 	bl	63a8 <ExFatFile::openNext(ExFatFile*, int)>
    a260:	2800      	cmp	r0, #0
    a262:	d1ea      	bne.n	a23a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
    a264:	63e8      	str	r0, [r5, #60]	; 0x3c
    a266:	e7e8      	b.n	a23a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
    a268:	2000      	movs	r0, #0
    a26a:	e7e6      	b.n	a23a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

0000a26c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    a26c:	4608      	mov	r0, r1
    a26e:	4770      	bx	lr

0000a270 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a274:	4604      	mov	r4, r0
    a276:	4690      	mov	r8, r2
    a278:	461f      	mov	r7, r3
  m_blockDev = blockDev;
    a27a:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    a27e:	2600      	movs	r6, #0
    a280:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    a284:	4601      	mov	r1, r0
    a286:	f44f 6090 	mov.w	r0, #1152	; 0x480
    a28a:	f7ff ffef 	bl	a26c <operator new(unsigned int, unsigned long*)>
    a28e:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    a290:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    a294:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    a298:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    a29c:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    a2a0:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    a2a4:	463a      	mov	r2, r7
    a2a6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a2aa:	f7fd fbcd 	bl	7a48 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a2ae:	bb00      	cbnz	r0, a2f2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  m_xVol = nullptr;
    a2b0:	2500      	movs	r5, #0
    a2b2:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    a2b6:	4621      	mov	r1, r4
    a2b8:	f240 406c 	movw	r0, #1132	; 0x46c
    a2bc:	f7ff ffd6 	bl	a26c <operator new(unsigned int, unsigned long*)>
    a2c0:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    a2c2:	71c5      	strb	r5, [r0, #7]
    a2c4:	2302      	movs	r3, #2
    a2c6:	7203      	strb	r3, [r0, #8]
    a2c8:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
    a2cc:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
    a2d0:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
    a2d4:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    a2d8:	463a      	mov	r2, r7
    a2da:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a2de:	f7ff fe65 	bl	9fac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a2e2:	b9f8      	cbnz	r0, a324 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  m_cwv = nullptr;
    a2e4:	2000      	movs	r0, #0
    a2e6:	4b1a      	ldr	r3, [pc, #104]	; (a350 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a2e8:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
    a2ea:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
}
    a2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a2f2:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    a2f6:	4630      	mov	r0, r6
    a2f8:	f7fb fc04 	bl	5b04 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    a2fc:	4629      	mov	r1, r5
    a2fe:	4630      	mov	r0, r6
    a300:	f7fb fc2e 	bl	5b60 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    a304:	2800      	cmp	r0, #0
    a306:	d0d3      	beq.n	a2b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
    a308:	4b12      	ldr	r3, [pc, #72]	; (a354 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    a30a:	681b      	ldr	r3, [r3, #0]
    a30c:	b13b      	cbz	r3, a31e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
    a30e:	f1b8 0f00 	cmp.w	r8, #0
    a312:	d119      	bne.n	a348 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
    a314:	4b0e      	ldr	r3, [pc, #56]	; (a350 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a316:	681b      	ldr	r3, [r3, #0]
    a318:	b1b3      	cbz	r3, a348 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
    a31a:	2001      	movs	r0, #1
    a31c:	e7e7      	b.n	a2ee <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
    a31e:	4b0d      	ldr	r3, [pc, #52]	; (a354 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    a320:	601d      	str	r5, [r3, #0]
    a322:	e7f4      	b.n	a30e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a324:	f506 6589 	add.w	r5, r6, #1096	; 0x448
    a328:	4628      	mov	r0, r5
    a32a:	f7fd ff6b 	bl	8204 <FatFile::close()>
    return m_vwd.openRoot(this);
    a32e:	4631      	mov	r1, r6
    a330:	4628      	mov	r0, r5
    a332:	f7fd fc88 	bl	7c46 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    a336:	2800      	cmp	r0, #0
    a338:	d0d4      	beq.n	a2e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
    a33a:	4b07      	ldr	r3, [pc, #28]	; (a358 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    a33c:	681b      	ldr	r3, [r3, #0]
    a33e:	2b00      	cmp	r3, #0
    a340:	d1e5      	bne.n	a30e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
    a342:	4b05      	ldr	r3, [pc, #20]	; (a358 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    a344:	601e      	str	r6, [r3, #0]
    a346:	e7e2      	b.n	a30e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
    a348:	4b01      	ldr	r3, [pc, #4]	; (a350 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a34a:	601c      	str	r4, [r3, #0]
  return true;
    a34c:	2001      	movs	r0, #1
    a34e:	e7ce      	b.n	a2ee <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
    a350:	20005100 	.word	0x20005100
    a354:	200050cc 	.word	0x200050cc
    a358:	2000510c 	.word	0x2000510c

0000a35c <FsVolume::open(char const*, int)>:
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    a35c:	b538      	push	{r3, r4, r5, lr}
    a35e:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    a360:	2000      	movs	r0, #0
    a362:	6060      	str	r0, [r4, #4]
    a364:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    a368:	60a5      	str	r5, [r4, #8]
    a36a:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
    a36c:	64a0      	str	r0, [r4, #72]	; 0x48
    a36e:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    a370:	4620      	mov	r0, r4
    a372:	4d03      	ldr	r5, [pc, #12]	; (a380 <FsVolume::open(char const*, int)+0x24>)
    a374:	f840 5b10 	str.w	r5, [r0], #16
  tmpFile.open(this, path, oflag);
    a378:	f7ff ff0e 	bl	a198 <FsBaseFile::open(FsVolume*, char const*, int)>
}
    a37c:	4620      	mov	r0, r4
    a37e:	bd38      	pop	{r3, r4, r5, pc}
    a380:	2000278c 	.word	0x2000278c

0000a384 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    a384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a388:	4770      	bx	lr

0000a38a <SharedSpiCard::errorCode() const>:
  }
    a38a:	7c40      	ldrb	r0, [r0, #17]
    a38c:	4770      	bx	lr

0000a38e <SharedSpiCard::errorData() const>:
  }
    a38e:	7d00      	ldrb	r0, [r0, #20]
    a390:	4770      	bx	lr

0000a392 <SharedSpiCard::type() const>:
  }
    a392:	7d40      	ldrb	r0, [r0, #21]
    a394:	4770      	bx	lr

0000a396 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    a396:	2001      	movs	r0, #1
    a398:	4770      	bx	lr

0000a39a <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    a39a:	7f00      	ldrb	r0, [r0, #28]
    a39c:	4770      	bx	lr

0000a39e <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    a39e:	b500      	push	{lr}
    a3a0:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a3a2:	6803      	ldr	r3, [r0, #0]
    a3a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a3a6:	4669      	mov	r1, sp
    a3a8:	4798      	blx	r3
    a3aa:	b3b0      	cbz	r0, a41a <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a3ac:	f89d 3000 	ldrb.w	r3, [sp]
    a3b0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a3b4:	d003      	beq.n	a3be <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a3b6:	2b40      	cmp	r3, #64	; 0x40
    a3b8:	d020      	beq.n	a3fc <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    a3ba:	2000      	movs	r0, #0
    a3bc:	e02e      	b.n	a41c <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a3be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a3c2:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a3c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a3ca:	0080      	lsls	r0, r0, #2
    a3cc:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    a3d0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a3d4:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a3d8:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a3da:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a3de:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    a3e2:	f89d 200a 	ldrb.w	r2, [sp, #10]
    a3e6:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a3e8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a3ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a3f0:	f002 020f 	and.w	r2, r2, #15
    a3f4:	4413      	add	r3, r2
    a3f6:	3b07      	subs	r3, #7
    a3f8:	4098      	lsls	r0, r3
    a3fa:	e00f      	b.n	a41c <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a3fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a404:	f89d 0009 	ldrb.w	r0, [sp, #9]
    a408:	3001      	adds	r0, #1
    a40a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a40e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a412:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    a416:	0280      	lsls	r0, r0, #10
    a418:	e000      	b.n	a41c <SharedSpiCard::sectorCount()+0x7e>
    a41a:	2000      	movs	r0, #0
}
    a41c:	b005      	add	sp, #20
    a41e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a422 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a422:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
    a424:	6803      	ldr	r3, [r0, #0]
    a426:	695c      	ldr	r4, [r3, #20]
    a428:	2301      	movs	r3, #1
    a42a:	47a0      	blx	r4
}
    a42c:	bd10      	pop	{r4, pc}

0000a42e <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    a42e:	b538      	push	{r3, r4, r5, lr}
    a430:	4604      	mov	r4, r0
    a432:	460d      	mov	r5, r1
  if (!syncDevice()) {
    a434:	6803      	ldr	r3, [r0, #0]
    a436:	6a1b      	ldr	r3, [r3, #32]
    a438:	4798      	blx	r3
    a43a:	b100      	cbz	r0, a43e <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    a43c:	7725      	strb	r5, [r4, #28]
  return true;
}
    a43e:	bd38      	pop	{r3, r4, r5, pc}

0000a440 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a442:	4605      	mov	r5, r0
    a444:	460e      	mov	r6, r1
    a446:	4614      	mov	r4, r2
    a448:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a44a:	7cc3      	ldrb	r3, [r0, #19]
    a44c:	2b02      	cmp	r3, #2
    a44e:	d021      	beq.n	a494 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
    a450:	682b      	ldr	r3, [r5, #0]
    a452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a454:	4631      	mov	r1, r6
    a456:	4628      	mov	r0, r5
    a458:	4798      	blx	r3
    a45a:	4603      	mov	r3, r0
    a45c:	b1c0      	cbz	r0, a490 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
    a45e:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    a460:	b167      	cbz	r7, a47c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
    a462:	2600      	movs	r6, #0
    if (!writeData(src)) {
    a464:	682a      	ldr	r2, [r5, #0]
    a466:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    a468:	4621      	mov	r1, r4
    a46a:	4628      	mov	r0, r5
    a46c:	4790      	blx	r2
    a46e:	4603      	mov	r3, r0
    a470:	b170      	cbz	r0, a490 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
    a472:	3601      	adds	r6, #1
    a474:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a478:	42b7      	cmp	r7, r6
    a47a:	d1f3      	bne.n	a464 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
    a47c:	69ab      	ldr	r3, [r5, #24]
    a47e:	443b      	add	r3, r7
    a480:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    a482:	7f2b      	ldrb	r3, [r5, #28]
    a484:	b923      	cbnz	r3, a490 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    a486:	682b      	ldr	r3, [r5, #0]
    a488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a48a:	4628      	mov	r0, r5
    a48c:	4798      	blx	r3
    a48e:	4603      	mov	r3, r0

fail:
  return false;
}
    a490:	4618      	mov	r0, r3
    a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a494:	6983      	ldr	r3, [r0, #24]
    a496:	428b      	cmp	r3, r1
    a498:	d1da      	bne.n	a450 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    a49a:	e7e1      	b.n	a460 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000a49c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    a49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4a0:	4605      	mov	r5, r0
    a4a2:	460c      	mov	r4, r1
    a4a4:	4692      	mov	sl, r2
    a4a6:	461f      	mov	r7, r3
    a4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a4ac:	7cc3      	ldrb	r3, [r0, #19]
    a4ae:	2b02      	cmp	r3, #2
    a4b0:	d026      	beq.n	a500 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
    a4b2:	682b      	ldr	r3, [r5, #0]
    a4b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a4b6:	4621      	mov	r1, r4
    a4b8:	4628      	mov	r0, r5
    a4ba:	4798      	blx	r3
    a4bc:	4603      	mov	r3, r0
    a4be:	b1e0      	cbz	r0, a4fa <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
    a4c0:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    a4c2:	f1ba 0f00 	cmp.w	sl, #0
    a4c6:	d00e      	beq.n	a4e6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    a4c8:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
    a4cc:	4641      	mov	r1, r8
    a4ce:	4620      	mov	r0, r4
    a4d0:	47b8      	blx	r7
    a4d2:	4601      	mov	r1, r0
    if (!writeData(src)) {
    a4d4:	682b      	ldr	r3, [r5, #0]
    a4d6:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    a4d8:	4628      	mov	r0, r5
    a4da:	47b0      	blx	r6
    a4dc:	4603      	mov	r3, r0
    a4de:	b160      	cbz	r0, a4fa <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
    a4e0:	3401      	adds	r4, #1
    a4e2:	45a1      	cmp	r9, r4
    a4e4:	d1f2      	bne.n	a4cc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
    a4e6:	69ab      	ldr	r3, [r5, #24]
    a4e8:	4453      	add	r3, sl
    a4ea:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    a4ec:	7f2b      	ldrb	r3, [r5, #28]
    a4ee:	b923      	cbnz	r3, a4fa <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
    a4f0:	682b      	ldr	r3, [r5, #0]
    a4f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a4f4:	4628      	mov	r0, r5
    a4f6:	4798      	blx	r3
    a4f8:	4603      	mov	r3, r0

 fail:
  return false;
}
    a4fa:	4618      	mov	r0, r3
    a4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a500:	6983      	ldr	r3, [r0, #24]
    a502:	428b      	cmp	r3, r1
    a504:	d1d5      	bne.n	a4b2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
    a506:	e7dc      	b.n	a4c2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

0000a508 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    a508:	4770      	bx	lr

0000a50a <SharedSpiCard::end()>:
  void end() {
    a50a:	b508      	push	{r3, lr}
    m_spiDriver.end();
    a50c:	3004      	adds	r0, #4
    a50e:	f001 fcfd 	bl	bf0c <SdSpiArduinoDriver::end()>
  }
    a512:	bd08      	pop	{r3, pc}

0000a514 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    a514:	b510      	push	{r4, lr}
    a516:	4604      	mov	r4, r0
    a518:	2120      	movs	r1, #32
    a51a:	f003 f9bb 	bl	d894 <operator delete(void*, unsigned int)>
    a51e:	4620      	mov	r0, r4
    a520:	bd10      	pop	{r4, pc}

0000a522 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    a522:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    a524:	7c83      	ldrb	r3, [r0, #18]
    a526:	b103      	cbz	r3, a52a <SharedSpiCard::spiStart()+0x8>
}
    a528:	bd38      	pop	{r3, r4, r5, pc}
    a52a:	4604      	mov	r4, r0
    m_spiDriver.activate();
    a52c:	1d05      	adds	r5, r0, #4
    a52e:	4628      	mov	r0, r5
    a530:	f001 fc14 	bl	bd5c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    a534:	2100      	movs	r1, #0
    a536:	7c20      	ldrb	r0, [r4, #16]
    a538:	f001 fc0c 	bl	bd54 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a53c:	21ff      	movs	r1, #255	; 0xff
    a53e:	4628      	mov	r0, r5
    a540:	f001 fd05 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    a544:	2301      	movs	r3, #1
    a546:	74a3      	strb	r3, [r4, #18]
}
    a548:	e7ee      	b.n	a528 <SharedSpiCard::spiStart()+0x6>

0000a54a <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    a54a:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    a54c:	7c83      	ldrb	r3, [r0, #18]
    a54e:	b903      	cbnz	r3, a552 <SharedSpiCard::spiStop()+0x8>
}
    a550:	bd38      	pop	{r3, r4, r5, pc}
    a552:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
    a554:	2101      	movs	r1, #1
    a556:	7c00      	ldrb	r0, [r0, #16]
    a558:	f001 fbfc 	bl	bd54 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a55c:	1d25      	adds	r5, r4, #4
    a55e:	21ff      	movs	r1, #255	; 0xff
    a560:	4628      	mov	r0, r5
    a562:	f001 fcf4 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a566:	4628      	mov	r0, r5
    a568:	f001 fca0 	bl	beac <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a56c:	2300      	movs	r3, #0
    a56e:	74a3      	strb	r3, [r4, #18]
}
    a570:	e7ee      	b.n	a550 <SharedSpiCard::spiStop()+0x6>

0000a572 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    a572:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    a574:	7cc3      	ldrb	r3, [r0, #19]
    a576:	2b01      	cmp	r3, #1
    a578:	d018      	beq.n	a5ac <SharedSpiCard::isBusy()+0x3a>
    a57a:	4604      	mov	r4, r0
  if (!spiActive) {
    a57c:	7c83      	ldrb	r3, [r0, #18]
    a57e:	b143      	cbz	r3, a592 <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
    a580:	3004      	adds	r0, #4
    a582:	f001 fcc8 	bl	bf16 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a586:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a58a:	bf18      	it	ne
    a58c:	2501      	movne	r5, #1
}
    a58e:	4628      	mov	r0, r5
    a590:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
    a592:	f7ff ffc6 	bl	a522 <SharedSpiCard::spiStart()>
    a596:	1d20      	adds	r0, r4, #4
    a598:	f001 fcbd 	bl	bf16 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a59c:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a5a0:	bf18      	it	ne
    a5a2:	2501      	movne	r5, #1
    spiStop();
    a5a4:	4620      	mov	r0, r4
    a5a6:	f7ff ffd0 	bl	a54a <SharedSpiCard::spiStop()>
    a5aa:	e7f0      	b.n	a58e <SharedSpiCard::isBusy()+0x1c>
    return false;
    a5ac:	2500      	movs	r5, #0
    a5ae:	e7ee      	b.n	a58e <SharedSpiCard::isBusy()+0x1c>

0000a5b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5b4:	4604      	mov	r4, r0
    a5b6:	4688      	mov	r8, r1
    a5b8:	4691      	mov	r9, r2
    a5ba:	4b17      	ldr	r3, [pc, #92]	; (a618 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
    a5bc:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
    a5be:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    a5c2:	b2ad      	uxth	r5, r5
    a5c4:	1d06      	adds	r6, r0, #4
    a5c6:	461f      	mov	r7, r3
    a5c8:	4630      	mov	r0, r6
    a5ca:	f001 fca4 	bl	bf16 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    a5ce:	7520      	strb	r0, [r4, #20]
    a5d0:	28ff      	cmp	r0, #255	; 0xff
    a5d2:	d10c      	bne.n	a5ee <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
    a5d4:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a5d6:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    a5d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a5dc:	d0f4      	beq.n	a5c8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    a5de:	231d      	movs	r3, #29
    m_errorCode = code;
    a5e0:	7463      	strb	r3, [r4, #17]
  spiStop();
    a5e2:	4620      	mov	r0, r4
    a5e4:	f7ff ffb1 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    a5e8:	2000      	movs	r0, #0
}
    a5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
    a5ee:	28fe      	cmp	r0, #254	; 0xfe
    a5f0:	d001      	beq.n	a5f6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    a5f2:	2318      	movs	r3, #24
    a5f4:	e7f4      	b.n	a5e0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
    a5f6:	464a      	mov	r2, r9
    a5f8:	4641      	mov	r1, r8
    a5fa:	4630      	mov	r0, r6
    a5fc:	f001 fc97 	bl	bf2e <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    a600:	7520      	strb	r0, [r4, #20]
    a602:	b108      	cbz	r0, a608 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
    a604:	2325      	movs	r3, #37	; 0x25
    a606:	e7eb      	b.n	a5e0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
    a608:	4630      	mov	r0, r6
    a60a:	f001 fc84 	bl	bf16 <SdSpiArduinoDriver::receive()>
    a60e:	4630      	mov	r0, r6
    a610:	f001 fc81 	bl	bf16 <SdSpiArduinoDriver::receive()>
  return true;
    a614:	2001      	movs	r0, #1
    a616:	e7e8      	b.n	a5ea <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
    a618:	200057f8 	.word	0x200057f8

0000a61c <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
    a61c:	b508      	push	{r3, lr}
  return readData(dst, 512);
    a61e:	f44f 7200 	mov.w	r2, #512	; 0x200
    a622:	f7ff ffc5 	bl	a5b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
    a626:	bd08      	pop	{r3, pc}

0000a628 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    a628:	b570      	push	{r4, r5, r6, lr}
    a62a:	4b0a      	ldr	r3, [pc, #40]	; (a654 <SharedSpiCard::waitReady(unsigned short)+0x2c>)
    a62c:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
    a62e:	440c      	add	r4, r1
    a630:	b2a4      	uxth	r4, r4
    a632:	1d05      	adds	r5, r0, #4
    a634:	461e      	mov	r6, r3
    a636:	4628      	mov	r0, r5
    a638:	f001 fc6d 	bl	bf16 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a63c:	28ff      	cmp	r0, #255	; 0xff
    a63e:	d006      	beq.n	a64e <SharedSpiCard::waitReady(unsigned short)+0x26>
    a640:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a642:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a644:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a648:	d0f5      	beq.n	a636 <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
    a64a:	2000      	movs	r0, #0
    a64c:	e000      	b.n	a650 <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
    a64e:	2001      	movs	r0, #1
}
    a650:	bd70      	pop	{r4, r5, r6, pc}
    a652:	bf00      	nop
    a654:	200057f8 	.word	0x200057f8

0000a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a65c:	b082      	sub	sp, #8
    a65e:	4605      	mov	r5, r0
    a660:	460f      	mov	r7, r1
    a662:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
    a664:	6803      	ldr	r3, [r0, #0]
    a666:	6a1b      	ldr	r3, [r3, #32]
    a668:	4798      	blx	r3
    a66a:	2800      	cmp	r0, #0
    a66c:	d03b      	beq.n	a6e6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
    a66e:	7cab      	ldrb	r3, [r5, #18]
    a670:	b3ab      	cbz	r3, a6de <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
    a672:	2f0c      	cmp	r7, #12
    a674:	d00a      	beq.n	a68c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    a676:	f44f 7196 	mov.w	r1, #300	; 0x12c
    a67a:	4628      	mov	r0, r5
    a67c:	f7ff ffd4 	bl	a628 <SharedSpiCard::waitReady(unsigned short)>
    a680:	b127      	cbz	r7, a68c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    a682:	f080 0001 	eor.w	r0, r0, #1
    a686:	f010 0fff 	tst.w	r0, #255	; 0xff
    a68a:	d12e      	bne.n	a6ea <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
    a68c:	1d2e      	adds	r6, r5, #4
    a68e:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    a692:	4630      	mov	r0, r6
    a694:	f001 fc5b 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    a698:	f10d 0804 	add.w	r8, sp, #4
    a69c:	ac02      	add	r4, sp, #8
    a69e:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a6a2:	4630      	mov	r0, r6
    a6a4:	f001 fc53 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    a6a8:	4544      	cmp	r4, r8
    a6aa:	d1f8      	bne.n	a69e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    a6ac:	2f00      	cmp	r7, #0
    a6ae:	bf0c      	ite	eq
    a6b0:	2195      	moveq	r1, #149	; 0x95
    a6b2:	2187      	movne	r1, #135	; 0x87
    a6b4:	4630      	mov	r0, r6
    a6b6:	f001 fc4a 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a6ba:	4630      	mov	r0, r6
    a6bc:	f001 fc2b 	bl	bf16 <SdSpiArduinoDriver::receive()>
    a6c0:	240a      	movs	r4, #10
    a6c2:	4630      	mov	r0, r6
    a6c4:	f001 fc27 	bl	bf16 <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
    a6c8:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
    a6ca:	f010 0f80 	tst.w	r0, #128	; 0x80
    a6ce:	d003      	beq.n	a6d8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
    a6d0:	3c01      	subs	r4, #1
    a6d2:	b2a4      	uxth	r4, r4
    a6d4:	2c00      	cmp	r4, #0
    a6d6:	d1f4      	bne.n	a6c2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
    a6d8:	b002      	add	sp, #8
    a6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
    a6de:	4628      	mov	r0, r5
    a6e0:	f7ff ff1f 	bl	a522 <SharedSpiCard::spiStart()>
    a6e4:	e7c5      	b.n	a672 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
    a6e6:	20ff      	movs	r0, #255	; 0xff
    a6e8:	e7f6      	b.n	a6d8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
    a6ea:	20ff      	movs	r0, #255	; 0xff
    a6ec:	e7f4      	b.n	a6d8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

0000a6f0 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    a6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6f4:	b089      	sub	sp, #36	; 0x24
    a6f6:	4605      	mov	r5, r0
    a6f8:	ac01      	add	r4, sp, #4
    a6fa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    a6fe:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a702:	4617      	mov	r7, r2
  m_spiActive = false;
    a704:	f04f 0800 	mov.w	r8, #0
    a708:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    a70c:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    a710:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
    a714:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    a716:	f001 fb18 	bl	bd4a <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    a71a:	2101      	movs	r1, #1
    a71c:	7c28      	ldrb	r0, [r5, #16]
    a71e:	f001 fb19 	bl	bd54 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    a722:	4b55      	ldr	r3, [pc, #340]	; (a878 <SharedSpiCard::begin(SdSpiConfig)+0x188>)
    a724:	60ab      	str	r3, [r5, #8]
    a726:	2307      	movs	r3, #7
    a728:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
    a72a:	ab05      	add	r3, sp, #20
    a72c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    a730:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    a734:	1d2e      	adds	r6, r5, #4
    a736:	cb0e      	ldmia	r3, {r1, r2, r3}
    a738:	4630      	mov	r0, r6
    a73a:	f001 fba3 	bl	be84 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
    a73e:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
    a742:	4628      	mov	r0, r5
    a744:	f7ff feed 	bl	a522 <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
    a748:	2101      	movs	r1, #1
    a74a:	7c28      	ldrb	r0, [r5, #16]
    a74c:	f001 fb02 	bl	bd54 <sdCsWrite(unsigned char, bool)>
    a750:	240a      	movs	r4, #10
    m_spiDriver.send(data);
    a752:	f04f 08ff 	mov.w	r8, #255	; 0xff
    a756:	4641      	mov	r1, r8
    a758:	4630      	mov	r0, r6
    a75a:	f001 fbf8 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    a75e:	1e63      	subs	r3, r4, #1
    a760:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a764:	d1f7      	bne.n	a756 <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
    a766:	2100      	movs	r1, #0
    a768:	7c28      	ldrb	r0, [r5, #16]
    a76a:	f001 faf3 	bl	bd54 <sdCsWrite(unsigned char, bool)>
    a76e:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    a770:	f04f 0800 	mov.w	r8, #0
    a774:	4642      	mov	r2, r8
    a776:	4641      	mov	r1, r8
    a778:	4628      	mov	r0, r5
    a77a:	f7ff ff6d 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a77e:	2801      	cmp	r0, #1
    a780:	d00c      	beq.n	a79c <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
    a782:	1e63      	subs	r3, r4, #1
    a784:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a788:	d1f4      	bne.n	a774 <SharedSpiCard::begin(SdSpiConfig)+0x84>
    a78a:	2301      	movs	r3, #1
    m_errorCode = code;
    a78c:	746b      	strb	r3, [r5, #17]
  spiStop();
    a78e:	4628      	mov	r0, r5
    a790:	f7ff fedb 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    a794:	2000      	movs	r0, #0
}
    a796:	b009      	add	sp, #36	; 0x24
    a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    a79c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    a7a0:	2108      	movs	r1, #8
    a7a2:	4628      	mov	r0, r5
    a7a4:	f7ff ff58 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a7a8:	f010 0f04 	tst.w	r0, #4
    a7ac:	d10e      	bne.n	a7cc <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
    a7ae:	2302      	movs	r3, #2
    a7b0:	756b      	strb	r3, [r5, #21]
    a7b2:	2404      	movs	r4, #4
    return m_spiDriver.receive();
    a7b4:	4630      	mov	r0, r6
    a7b6:	f001 fbae 	bl	bf16 <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    a7ba:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    a7bc:	1e63      	subs	r3, r4, #1
    a7be:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a7c2:	d1f7      	bne.n	a7b4 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
    a7c4:	28aa      	cmp	r0, #170	; 0xaa
    a7c6:	d003      	beq.n	a7d0 <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    a7c8:	2306      	movs	r3, #6
    a7ca:	e7df      	b.n	a78c <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
    a7cc:	2301      	movs	r3, #1
    a7ce:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    a7d0:	682b      	ldr	r3, [r5, #0]
    a7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a7d4:	4628      	mov	r0, r5
    a7d6:	4798      	blx	r3
    a7d8:	2802      	cmp	r0, #2
    a7da:	bf14      	ite	ne
    a7dc:	2400      	movne	r4, #0
    a7de:	2401      	moveq	r4, #1
    a7e0:	07a4      	lsls	r4, r4, #30
    a7e2:	4b26      	ldr	r3, [pc, #152]	; (a87c <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
    a7e4:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
    a7e6:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
    a7ea:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
    a7ee:	f04f 0a00 	mov.w	sl, #0
    a7f2:	f04f 0937 	mov.w	r9, #55	; 0x37
    a7f6:	f8df b084 	ldr.w	fp, [pc, #132]	; a87c <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    a7fa:	4652      	mov	r2, sl
    a7fc:	4649      	mov	r1, r9
    a7fe:	4628      	mov	r0, r5
    a800:	f7ff ff2a 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    a804:	4622      	mov	r2, r4
    a806:	2129      	movs	r1, #41	; 0x29
    a808:	4628      	mov	r0, r5
    a80a:	f7ff ff25 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    a80e:	b140      	cbz	r0, a822 <SharedSpiCard::begin(SdSpiConfig)+0x132>
    a810:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
    a814:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    a818:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a81c:	d0ed      	beq.n	a7fa <SharedSpiCard::begin(SdSpiConfig)+0x10a>
    a81e:	2317      	movs	r3, #23
    a820:	e7b4      	b.n	a78c <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
    a822:	682b      	ldr	r3, [r5, #0]
    a824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a826:	4628      	mov	r0, r5
    a828:	4798      	blx	r3
    a82a:	2802      	cmp	r0, #2
    a82c:	d007      	beq.n	a83e <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
    a82e:	4628      	mov	r0, r5
    a830:	f7ff fe8b 	bl	a54a <SharedSpiCard::spiStop()>
    a834:	60af      	str	r7, [r5, #8]
    a836:	2307      	movs	r3, #7
    a838:	60eb      	str	r3, [r5, #12]
  return true;
    a83a:	2001      	movs	r0, #1
    a83c:	e7ab      	b.n	a796 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
    a83e:	2200      	movs	r2, #0
    a840:	213a      	movs	r1, #58	; 0x3a
    a842:	4628      	mov	r0, r5
    a844:	f7ff ff08 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a848:	b108      	cbz	r0, a84e <SharedSpiCard::begin(SdSpiConfig)+0x15e>
    a84a:	2312      	movs	r3, #18
    a84c:	e79e      	b.n	a78c <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
    a84e:	4630      	mov	r0, r6
    a850:	f001 fb61 	bl	bf16 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a854:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    a858:	2bc0      	cmp	r3, #192	; 0xc0
    a85a:	d009      	beq.n	a870 <SharedSpiCard::begin(SdSpiConfig)+0x180>
    a85c:	4630      	mov	r0, r6
    a85e:	f001 fb5a 	bl	bf16 <SdSpiArduinoDriver::receive()>
    a862:	4630      	mov	r0, r6
    a864:	f001 fb57 	bl	bf16 <SdSpiArduinoDriver::receive()>
    a868:	4630      	mov	r0, r6
    a86a:	f001 fb54 	bl	bf16 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a86e:	e7de      	b.n	a82e <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
    a870:	2303      	movs	r3, #3
    a872:	756b      	strb	r3, [r5, #21]
  }
    a874:	e7f2      	b.n	a85c <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    a876:	bf00      	nop
    a878:	00061a80 	.word	0x00061a80
    a87c:	200057f8 	.word	0x200057f8

0000a880 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a882:	4606      	mov	r6, r0
    a884:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a886:	2200      	movs	r2, #0
    a888:	213a      	movs	r1, #58	; 0x3a
    a88a:	f7ff fee5 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a88e:	b968      	cbnz	r0, a8ac <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a890:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a892:	1d37      	adds	r7, r6, #4
    a894:	4638      	mov	r0, r7
    a896:	f001 fb3e 	bl	bf16 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a89a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a89e:	42ac      	cmp	r4, r5
    a8a0:	d1f8      	bne.n	a894 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
    a8a2:	4630      	mov	r0, r6
    a8a4:	f7ff fe51 	bl	a54a <SharedSpiCard::spiStop()>
  return true;
    a8a8:	2001      	movs	r0, #1
}
    a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a8ac:	2312      	movs	r3, #18
    a8ae:	7473      	strb	r3, [r6, #17]
  spiStop();
    a8b0:	4630      	mov	r0, r6
    a8b2:	f7ff fe4a 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    a8b6:	2000      	movs	r0, #0
    a8b8:	e7f7      	b.n	a8aa <SharedSpiCard::readOCR(unsigned long*)+0x2a>

0000a8ba <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a8ba:	b538      	push	{r3, r4, r5, lr}
    a8bc:	4604      	mov	r4, r0
    a8be:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    a8c0:	2200      	movs	r2, #0
    a8c2:	f7ff fec9 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a8c6:	b138      	cbz	r0, a8d8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    a8c8:	231b      	movs	r3, #27
    a8ca:	7463      	strb	r3, [r4, #17]
  spiStop();
    a8cc:	4620      	mov	r0, r4
    a8ce:	f7ff fe3c 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    a8d2:	2500      	movs	r5, #0
}
    a8d4:	4628      	mov	r0, r5
    a8d6:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
    a8d8:	2210      	movs	r2, #16
    a8da:	4629      	mov	r1, r5
    a8dc:	4620      	mov	r0, r4
    a8de:	f7ff fe67 	bl	a5b0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a8e2:	4605      	mov	r5, r0
    a8e4:	2800      	cmp	r0, #0
    a8e6:	d0f1      	beq.n	a8cc <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    a8e8:	4620      	mov	r0, r4
    a8ea:	f7ff fe2e 	bl	a54a <SharedSpiCard::spiStop()>
  return true;
    a8ee:	e7f1      	b.n	a8d4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

0000a8f0 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a8f0:	b508      	push	{r3, lr}
    a8f2:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
    a8f4:	2109      	movs	r1, #9
    a8f6:	f7ff ffe0 	bl	a8ba <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a8fa:	bd08      	pop	{r3, pc}

0000a8fc <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a8fc:	b508      	push	{r3, lr}
    a8fe:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
    a900:	210a      	movs	r1, #10
    a902:	f7ff ffda 	bl	a8ba <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a906:	bd08      	pop	{r3, pc}

0000a908 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    a908:	b538      	push	{r3, r4, r5, lr}
    a90a:	4604      	mov	r4, r0
    a90c:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a90e:	6803      	ldr	r3, [r0, #0]
    a910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a912:	4798      	blx	r3
    a914:	2803      	cmp	r0, #3
    sector <<= 9;
    a916:	bf18      	it	ne
    a918:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    a91a:	462a      	mov	r2, r5
    a91c:	2112      	movs	r1, #18
    a91e:	4620      	mov	r0, r4
    a920:	f7ff fe9a 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a924:	b910      	cbnz	r0, a92c <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
    a926:	2001      	movs	r0, #1
    a928:	74e0      	strb	r0, [r4, #19]
}
    a92a:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a92c:	230c      	movs	r3, #12
    a92e:	7463      	strb	r3, [r4, #17]
  spiStop();
    a930:	4620      	mov	r0, r4
    a932:	f7ff fe0a 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    a936:	2000      	movs	r0, #0
    a938:	e7f7      	b.n	a92a <SharedSpiCard::readStart(unsigned long)+0x22>

0000a93a <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a93a:	b510      	push	{r4, lr}
    a93c:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
    a93e:	2200      	movs	r2, #0
    a940:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a942:	210c      	movs	r1, #12
    a944:	f7ff fe88 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a948:	b920      	cbnz	r0, a954 <SharedSpiCard::readStop()+0x1a>
  spiStop();
    a94a:	4620      	mov	r0, r4
    a94c:	f7ff fdfd 	bl	a54a <SharedSpiCard::spiStop()>
  return true;
    a950:	2001      	movs	r0, #1
}
    a952:	bd10      	pop	{r4, pc}
    a954:	2309      	movs	r3, #9
    a956:	7463      	strb	r3, [r4, #17]
  spiStop();
    a958:	4620      	mov	r0, r4
    a95a:	f7ff fdf6 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    a95e:	2000      	movs	r0, #0
    a960:	e7f7      	b.n	a952 <SharedSpiCard::readStop()+0x18>

0000a962 <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    a962:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
    a964:	7cc3      	ldrb	r3, [r0, #19]
    a966:	2b02      	cmp	r3, #2
    a968:	d003      	beq.n	a972 <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
    a96a:	2b01      	cmp	r3, #1
    a96c:	d005      	beq.n	a97a <SharedSpiCard::syncDevice()+0x18>
  return true;
    a96e:	2001      	movs	r0, #1
}
    a970:	bd08      	pop	{r3, pc}
    return writeStop();
    a972:	6803      	ldr	r3, [r0, #0]
    a974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a976:	4798      	blx	r3
    a978:	e7fa      	b.n	a970 <SharedSpiCard::syncDevice()+0xe>
    return readStop();
    a97a:	f7ff ffde 	bl	a93a <SharedSpiCard::readStop()>
    a97e:	e7f7      	b.n	a970 <SharedSpiCard::syncDevice()+0xe>

0000a980 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a982:	4606      	mov	r6, r0
    a984:	460d      	mov	r5, r1
    a986:	4614      	mov	r4, r2
    a988:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a98a:	7cc3      	ldrb	r3, [r0, #19]
    a98c:	2b01      	cmp	r3, #1
    a98e:	d102      	bne.n	a996 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a990:	6983      	ldr	r3, [r0, #24]
    a992:	428b      	cmp	r3, r1
    a994:	d006      	beq.n	a9a4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    a996:	4629      	mov	r1, r5
    a998:	4630      	mov	r0, r6
    a99a:	f7ff ffb5 	bl	a908 <SharedSpiCard::readStart(unsigned long)>
    a99e:	4603      	mov	r3, r0
    a9a0:	b190      	cbz	r0, a9c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
    a9a2:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a9a4:	b15f      	cbz	r7, a9be <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    a9a6:	2500      	movs	r5, #0
    if (!readData(dst)) {
    a9a8:	4621      	mov	r1, r4
    a9aa:	4630      	mov	r0, r6
    a9ac:	f7ff fe36 	bl	a61c <SharedSpiCard::readData(unsigned char*)>
    a9b0:	4603      	mov	r3, r0
    a9b2:	b148      	cbz	r0, a9c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a9b4:	3501      	adds	r5, #1
    a9b6:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a9ba:	42af      	cmp	r7, r5
    a9bc:	d1f4      	bne.n	a9a8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
    a9be:	69b3      	ldr	r3, [r6, #24]
    a9c0:	443b      	add	r3, r7
    a9c2:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a9c4:	7f33      	ldrb	r3, [r6, #28]
    a9c6:	b10b      	cbz	r3, a9cc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
    a9c8:	4618      	mov	r0, r3
    a9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
    a9cc:	4630      	mov	r0, r6
    a9ce:	f7ff ffb4 	bl	a93a <SharedSpiCard::readStop()>
    a9d2:	4603      	mov	r3, r0
    a9d4:	e7f8      	b.n	a9c8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0000a9d6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a9d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9da:	4606      	mov	r6, r0
    a9dc:	460c      	mov	r4, r1
    a9de:	4615      	mov	r5, r2
    a9e0:	469a      	mov	sl, r3
    a9e2:	9f08      	ldr	r7, [sp, #32]
    a9e4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    a9e8:	7cc3      	ldrb	r3, [r0, #19]
    a9ea:	2b01      	cmp	r3, #1
    a9ec:	d102      	bne.n	a9f4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
    a9ee:	6983      	ldr	r3, [r0, #24]
    a9f0:	428b      	cmp	r3, r1
    a9f2:	d006      	beq.n	aa02 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a9f4:	4621      	mov	r1, r4
    a9f6:	4630      	mov	r0, r6
    a9f8:	f7ff ff86 	bl	a908 <SharedSpiCard::readStart(unsigned long)>
    a9fc:	4603      	mov	r3, r0
    a9fe:	b1b8      	cbz	r0, aa30 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
    aa00:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    aa02:	f1ba 0f00 	cmp.w	sl, #0
    aa06:	d00e      	beq.n	aa26 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
    aa08:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
    aa0c:	4629      	mov	r1, r5
    aa0e:	4630      	mov	r0, r6
    aa10:	f7ff fe04 	bl	a61c <SharedSpiCard::readData(unsigned char*)>
    aa14:	4603      	mov	r3, r0
    aa16:	b158      	cbz	r0, aa30 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
    aa18:	4642      	mov	r2, r8
    aa1a:	4629      	mov	r1, r5
    aa1c:	4620      	mov	r0, r4
    aa1e:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
    aa20:	3401      	adds	r4, #1
    aa22:	45a1      	cmp	r9, r4
    aa24:	d1f2      	bne.n	aa0c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
    aa26:	69b3      	ldr	r3, [r6, #24]
    aa28:	4453      	add	r3, sl
    aa2a:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    aa2c:	7f33      	ldrb	r3, [r6, #28]
    aa2e:	b113      	cbz	r3, aa36 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
    aa30:	4618      	mov	r0, r3
    aa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
    aa36:	4630      	mov	r0, r6
    aa38:	f7ff ff7f 	bl	a93a <SharedSpiCard::readStop()>
    aa3c:	4603      	mov	r3, r0
    aa3e:	e7f7      	b.n	aa30 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

0000aa40 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    aa40:	b538      	push	{r3, r4, r5, lr}
    aa42:	4604      	mov	r4, r0
    aa44:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    aa46:	6803      	ldr	r3, [r0, #0]
    aa48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    aa4a:	4798      	blx	r3
    aa4c:	2803      	cmp	r0, #3
    sector <<= 9;
    aa4e:	bf18      	it	ne
    aa50:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    aa52:	462a      	mov	r2, r5
    aa54:	2119      	movs	r1, #25
    aa56:	4620      	mov	r0, r4
    aa58:	f7ff fdfe 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    aa5c:	b918      	cbnz	r0, aa66 <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
    aa5e:	2302      	movs	r3, #2
    aa60:	74e3      	strb	r3, [r4, #19]
  return true;
    aa62:	2001      	movs	r0, #1
}
    aa64:	bd38      	pop	{r3, r4, r5, pc}
    aa66:	230e      	movs	r3, #14
    aa68:	7463      	strb	r3, [r4, #17]
  spiStop();
    aa6a:	4620      	mov	r0, r4
    aa6c:	f7ff fd6d 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    aa70:	2000      	movs	r0, #0
    aa72:	e7f7      	b.n	aa64 <SharedSpiCard::writeStart(unsigned long)+0x24>

0000aa74 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    aa74:	b570      	push	{r4, r5, r6, lr}
    aa76:	b084      	sub	sp, #16
    aa78:	4604      	mov	r4, r0
    aa7a:	460d      	mov	r5, r1
    aa7c:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
    aa7e:	6803      	ldr	r3, [r0, #0]
    aa80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    aa82:	4669      	mov	r1, sp
    aa84:	4798      	blx	r3
    aa86:	b1f8      	cbz	r0, aac8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
    aa88:	f89d 300a 	ldrb.w	r3, [sp, #10]
    aa8c:	f013 0f40 	tst.w	r3, #64	; 0x40
    aa90:	d10d      	bne.n	aaae <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    aa92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    aa96:	f89d 200b 	ldrb.w	r2, [sp, #11]
    aa9a:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    aa9c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    aaa0:	1c72      	adds	r2, r6, #1
    aaa2:	432a      	orrs	r2, r5
    aaa4:	4213      	tst	r3, r2
    aaa6:	d002      	beq.n	aaae <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    aaa8:	2327      	movs	r3, #39	; 0x27
    aaaa:	7463      	strb	r3, [r4, #17]
      goto fail;
    aaac:	e00c      	b.n	aac8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
    aaae:	7d63      	ldrb	r3, [r4, #21]
    aab0:	2b03      	cmp	r3, #3
    aab2:	d001      	beq.n	aab8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
    aab4:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    aab6:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
    aab8:	462a      	mov	r2, r5
    aaba:	2120      	movs	r1, #32
    aabc:	4620      	mov	r0, r4
    aabe:	f7ff fdcb 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    aac2:	b140      	cbz	r0, aad6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
    aac4:	2326      	movs	r3, #38	; 0x26
    aac6:	7463      	strb	r3, [r4, #17]
  spiStop();
    aac8:	4620      	mov	r0, r4
    aaca:	f7ff fd3e 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    aace:	2500      	movs	r5, #0
}
    aad0:	4628      	mov	r0, r5
    aad2:	b004      	add	sp, #16
    aad4:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
    aad6:	4632      	mov	r2, r6
    aad8:	2121      	movs	r1, #33	; 0x21
    aada:	4620      	mov	r0, r4
    aadc:	f7ff fdbc 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    aae0:	2800      	cmp	r0, #0
    aae2:	d1ef      	bne.n	aac4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
    aae4:	2200      	movs	r2, #0
    aae6:	2126      	movs	r1, #38	; 0x26
    aae8:	4620      	mov	r0, r4
    aaea:	f7ff fdb5 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    aaee:	2800      	cmp	r0, #0
    aaf0:	d1e8      	bne.n	aac4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    aaf2:	f242 7110 	movw	r1, #10000	; 0x2710
    aaf6:	4620      	mov	r0, r4
    aaf8:	f7ff fd96 	bl	a628 <SharedSpiCard::waitReady(unsigned short)>
    aafc:	4605      	mov	r5, r0
    aafe:	b910      	cbnz	r0, ab06 <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
    ab00:	2328      	movs	r3, #40	; 0x28
    ab02:	7463      	strb	r3, [r4, #17]
    goto fail;
    ab04:	e7e0      	b.n	aac8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
    ab06:	4620      	mov	r0, r4
    ab08:	f7ff fd1f 	bl	a54a <SharedSpiCard::spiStop()>
  return true;
    ab0c:	e7e0      	b.n	aad0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

0000ab0e <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    ab0e:	b538      	push	{r3, r4, r5, lr}
    ab10:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    ab12:	f44f 7116 	mov.w	r1, #600	; 0x258
    ab16:	f7ff fd87 	bl	a628 <SharedSpiCard::waitReady(unsigned short)>
    ab1a:	4605      	mov	r5, r0
    ab1c:	b150      	cbz	r0, ab34 <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
    ab1e:	21fd      	movs	r1, #253	; 0xfd
    ab20:	1d20      	adds	r0, r4, #4
    ab22:	f001 fa14 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    ab26:	4620      	mov	r0, r4
    ab28:	f7ff fd0f 	bl	a54a <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    ab2c:	2300      	movs	r3, #0
    ab2e:	74e3      	strb	r3, [r4, #19]
}
    ab30:	4628      	mov	r0, r5
    ab32:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    ab34:	231e      	movs	r3, #30
    ab36:	7463      	strb	r3, [r4, #17]
  spiStop();
    ab38:	4620      	mov	r0, r4
    ab3a:	f7ff fd06 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    ab3e:	e7f7      	b.n	ab30 <SharedSpiCard::writeStop()+0x22>

0000ab40 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    ab40:	b570      	push	{r4, r5, r6, lr}
    ab42:	4605      	mov	r5, r0
    ab44:	4616      	mov	r6, r2
    m_spiDriver.send(data);
    ab46:	1d04      	adds	r4, r0, #4
    ab48:	4620      	mov	r0, r4
    ab4a:	f001 fa00 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    ab4e:	f44f 7200 	mov.w	r2, #512	; 0x200
    ab52:	4631      	mov	r1, r6
    ab54:	4620      	mov	r0, r4
    ab56:	f001 fa04 	bl	bf62 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    ab5a:	21ff      	movs	r1, #255	; 0xff
    ab5c:	4620      	mov	r0, r4
    ab5e:	f001 f9f6 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    ab62:	21ff      	movs	r1, #255	; 0xff
    ab64:	4620      	mov	r0, r4
    ab66:	f001 f9f2 	bl	bf4e <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    ab6a:	4620      	mov	r0, r4
    ab6c:	f001 f9d3 	bl	bf16 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    ab70:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    ab72:	f000 031f 	and.w	r3, r0, #31
    ab76:	2b05      	cmp	r3, #5
    ab78:	d101      	bne.n	ab7e <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
    ab7a:	2001      	movs	r0, #1
}
    ab7c:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
    ab7e:	2320      	movs	r3, #32
    ab80:	746b      	strb	r3, [r5, #17]
  spiStop();
    ab82:	4628      	mov	r0, r5
    ab84:	f7ff fce1 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    ab88:	2000      	movs	r0, #0
    ab8a:	e7f7      	b.n	ab7c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

0000ab8c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    ab8c:	b538      	push	{r3, r4, r5, lr}
    ab8e:	4604      	mov	r4, r0
    ab90:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    ab92:	f44f 7116 	mov.w	r1, #600	; 0x258
    ab96:	f7ff fd47 	bl	a628 <SharedSpiCard::waitReady(unsigned short)>
    ab9a:	b930      	cbnz	r0, abaa <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    ab9c:	2324      	movs	r3, #36	; 0x24
    ab9e:	7463      	strb	r3, [r4, #17]
  spiStop();
    aba0:	4620      	mov	r0, r4
    aba2:	f7ff fcd2 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    aba6:	2000      	movs	r0, #0
}
    aba8:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    abaa:	462a      	mov	r2, r5
    abac:	21fc      	movs	r1, #252	; 0xfc
    abae:	4620      	mov	r0, r4
    abb0:	f7ff ffc6 	bl	ab40 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    abb4:	2800      	cmp	r0, #0
    abb6:	d1f7      	bne.n	aba8 <SharedSpiCard::writeData(unsigned char const*)+0x1c>
    abb8:	e7f2      	b.n	aba0 <SharedSpiCard::writeData(unsigned char const*)+0x14>

0000abba <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    abba:	b570      	push	{r4, r5, r6, lr}
    abbc:	4604      	mov	r4, r0
    abbe:	460d      	mov	r5, r1
    abc0:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    abc2:	6803      	ldr	r3, [r0, #0]
    abc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    abc6:	4798      	blx	r3
    abc8:	2803      	cmp	r0, #3
    sector <<= 9;
    abca:	bf18      	it	ne
    abcc:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    abce:	462a      	mov	r2, r5
    abd0:	2118      	movs	r1, #24
    abd2:	4620      	mov	r0, r4
    abd4:	f7ff fd40 	bl	a658 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    abd8:	b138      	cbz	r0, abea <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    abda:	230d      	movs	r3, #13
    abdc:	7463      	strb	r3, [r4, #17]
  spiStop();
    abde:	4620      	mov	r0, r4
    abe0:	f7ff fcb3 	bl	a54a <SharedSpiCard::spiStop()>
  return false;
    abe4:	2500      	movs	r5, #0
}
    abe6:	4628      	mov	r0, r5
    abe8:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    abea:	4632      	mov	r2, r6
    abec:	21fe      	movs	r1, #254	; 0xfe
    abee:	4620      	mov	r0, r4
    abf0:	f7ff ffa6 	bl	ab40 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    abf4:	4605      	mov	r5, r0
    abf6:	2800      	cmp	r0, #0
    abf8:	d0f1      	beq.n	abde <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
    abfa:	4620      	mov	r0, r4
    abfc:	f7ff fca5 	bl	a54a <SharedSpiCard::spiStop()>
  return true;
    ac00:	e7f1      	b.n	abe6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

0000ac02 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    ac02:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
    ac04:	7f03      	ldrb	r3, [r0, #28]
    ac06:	b123      	cbz	r3, ac12 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
    ac08:	6803      	ldr	r3, [r0, #0]
    ac0a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    ac0c:	2301      	movs	r3, #1
    ac0e:	47a0      	blx	r4
}
    ac10:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
    ac12:	f7ff ffd2 	bl	abba <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
    ac16:	e7fb      	b.n	ac10 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0000ac18 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    ac18:	b510      	push	{r4, lr}
    ac1a:	b084      	sub	sp, #16
    ac1c:	4604      	mov	r4, r0
    ac1e:	f10d 0c04 	add.w	ip, sp, #4
    ac22:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    ac26:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    ac2a:	f7ff fd61 	bl	a6f0 <SharedSpiCard::begin(SdSpiConfig)>
    ac2e:	b120      	cbz	r0, ac3a <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    ac30:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ac34:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    ac38:	7723      	strb	r3, [r4, #28]
}
    ac3a:	b004      	add	sp, #16
    ac3c:	bd10      	pop	{r4, pc}

0000ac3e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    ac3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac42:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ac46:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    ac4a:	b1b3      	cbz	r3, ac7a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    ac4c:	4605      	mov	r5, r0
    ac4e:	460c      	mov	r4, r1
    ac50:	4616      	mov	r6, r2
    ac52:	461f      	mov	r7, r3
    ac54:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
    ac56:	682b      	ldr	r3, [r5, #0]
    ac58:	691b      	ldr	r3, [r3, #16]
    ac5a:	4632      	mov	r2, r6
    ac5c:	4621      	mov	r1, r4
    ac5e:	4628      	mov	r0, r5
    ac60:	4798      	blx	r3
    ac62:	4682      	mov	sl, r0
    ac64:	b130      	cbz	r0, ac74 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
    ac66:	464a      	mov	r2, r9
    ac68:	4631      	mov	r1, r6
    ac6a:	4620      	mov	r0, r4
    ac6c:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    ac6e:	3401      	adds	r4, #1
    ac70:	42bc      	cmp	r4, r7
    ac72:	d1f0      	bne.n	ac56 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
    ac74:	4650      	mov	r0, sl
    ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
    ac7a:	f04f 0a01 	mov.w	sl, #1
    ac7e:	e7f9      	b.n	ac74 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

0000ac80 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ac84:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    ac88:	b1aa      	cbz	r2, acb6 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
    ac8a:	4605      	mov	r5, r0
    ac8c:	460c      	mov	r4, r1
    ac8e:	461f      	mov	r7, r3
    ac90:	4690      	mov	r8, r2
    ac92:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    ac94:	682b      	ldr	r3, [r5, #0]
    ac96:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    ac98:	4649      	mov	r1, r9
    ac9a:	4620      	mov	r0, r4
    ac9c:	47b8      	blx	r7
    ac9e:	4602      	mov	r2, r0
    aca0:	4621      	mov	r1, r4
    aca2:	4628      	mov	r0, r5
    aca4:	47b0      	blx	r6
    aca6:	4603      	mov	r3, r0
    aca8:	b110      	cbz	r0, acb0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
    acaa:	3401      	adds	r4, #1
    acac:	4544      	cmp	r4, r8
    acae:	d1f1      	bne.n	ac94 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    acb0:	4618      	mov	r0, r3
    acb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    acb6:	2301      	movs	r3, #1
    acb8:	e7fa      	b.n	acb0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

0000acba <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    acba:	2000      	movs	r0, #0
    acbc:	4770      	bx	lr

0000acbe <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    acbe:	2000      	movs	r0, #0
    acc0:	4770      	bx	lr

0000acc2 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    acc2:	2000      	movs	r0, #0
    acc4:	4770      	bx	lr

0000acc6 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    acc6:	4770      	bx	lr

0000acc8 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    acc8:	4b07      	ldr	r3, [pc, #28]	; (ace8 <sdIrs()+0x20>)
    acca:	2100      	movs	r1, #0
    accc:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    acce:	6b18      	ldr	r0, [r3, #48]	; 0x30
    acd0:	4a06      	ldr	r2, [pc, #24]	; (acec <sdIrs()+0x24>)
    acd2:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    acd4:	6812      	ldr	r2, [r2, #0]
    acd6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    acd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    acda:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    acde:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    ace0:	4b03      	ldr	r3, [pc, #12]	; (acf0 <sdIrs()+0x28>)
    ace2:	7019      	strb	r1, [r3, #0]
}
    ace4:	4770      	bx	lr
    ace6:	bf00      	nop
    ace8:	402c0000 	.word	0x402c0000
    acec:	200050c0 	.word	0x200050c0
    acf0:	20005833 	.word	0x20005833

0000acf4 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    acf4:	4b06      	ldr	r3, [pc, #24]	; (ad10 <gpioMux(unsigned char)+0x1c>)
    acf6:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    acfa:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    acfe:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    ad02:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    ad06:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    ad0a:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
    ad0e:	4770      	bx	lr
    ad10:	401f8000 	.word	0x401f8000

0000ad14 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    ad14:	4b03      	ldr	r3, [pc, #12]	; (ad24 <isBusyCommandComplete()+0x10>)
    ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ad18:	4803      	ldr	r0, [pc, #12]	; (ad28 <isBusyCommandComplete()+0x14>)
    ad1a:	4018      	ands	r0, r3
}
    ad1c:	fab0 f080 	clz	r0, r0
    ad20:	0940      	lsrs	r0, r0, #5
    ad22:	4770      	bx	lr
    ad24:	402c0000 	.word	0x402c0000
    ad28:	000f0001 	.word	0x000f0001

0000ad2c <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ad2c:	4b02      	ldr	r3, [pc, #8]	; (ad38 <isBusyCommandInhibit()+0xc>)
    ad2e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    ad30:	f000 0001 	and.w	r0, r0, #1
    ad34:	4770      	bx	lr
    ad36:	bf00      	nop
    ad38:	402c0000 	.word	0x402c0000

0000ad3c <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ad3c:	4b03      	ldr	r3, [pc, #12]	; (ad4c <isBusyDat()+0x10>)
    ad3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ad40:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    ad44:	f3c0 6000 	ubfx	r0, r0, #24, #1
    ad48:	4770      	bx	lr
    ad4a:	bf00      	nop
    ad4c:	402c0000 	.word	0x402c0000

0000ad50 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    ad50:	4b01      	ldr	r3, [pc, #4]	; (ad58 <isBusyDMA()+0x8>)
    ad52:	7818      	ldrb	r0, [r3, #0]
}
    ad54:	4770      	bx	lr
    ad56:	bf00      	nop
    ad58:	20005833 	.word	0x20005833

0000ad5c <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    ad5c:	4b03      	ldr	r3, [pc, #12]	; (ad6c <isBusyFifoRead()+0x10>)
    ad5e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ad60:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    ad64:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    ad68:	4770      	bx	lr
    ad6a:	bf00      	nop
    ad6c:	402c0000 	.word	0x402c0000

0000ad70 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    ad70:	4b03      	ldr	r3, [pc, #12]	; (ad80 <isBusyFifoWrite()+0x10>)
    ad72:	6a58      	ldr	r0, [r3, #36]	; 0x24
    ad74:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    ad78:	f3c0 2080 	ubfx	r0, r0, #10, #1
    ad7c:	4770      	bx	lr
    ad7e:	bf00      	nop
    ad80:	402c0000 	.word	0x402c0000

0000ad84 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ad84:	4b03      	ldr	r3, [pc, #12]	; (ad94 <isBusyTransferComplete()+0x10>)
    ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ad88:	4803      	ldr	r0, [pc, #12]	; (ad98 <isBusyTransferComplete()+0x14>)
    ad8a:	4018      	ands	r0, r3
}
    ad8c:	fab0 f080 	clz	r0, r0
    ad90:	0940      	lsrs	r0, r0, #5
    ad92:	4770      	bx	lr
    ad94:	402c0000 	.word	0x402c0000
    ad98:	117f0002 	.word	0x117f0002

0000ad9c <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    ad9c:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    ad9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ada2:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    ada6:	4b2b      	ldr	r3, [pc, #172]	; (ae54 <setSdclk(unsigned long)+0xb8>)
    ada8:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    adaa:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
    adae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    adb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    adb6:	4b28      	ldr	r3, [pc, #160]	; (ae58 <setSdclk(unsigned long)+0xbc>)
    adb8:	fba3 3202 	umull	r3, r2, r3, r2
    adbc:	0892      	lsrs	r2, r2, #2
    adbe:	4b27      	ldr	r3, [pc, #156]	; (ae5c <setSdclk(unsigned long)+0xc0>)
    adc0:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    adc4:	f3c1 23c2 	ubfx	r3, r1, #11, #3
    adc8:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    adca:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    adce:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
    add2:	d239      	bcs.n	ae48 <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
    add4:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    add6:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    add8:	0113      	lsls	r3, r2, #4
    adda:	fbbc f3f3 	udiv	r3, ip, r3
    adde:	4573      	cmp	r3, lr
    ade0:	d901      	bls.n	ade6 <setSdclk(unsigned long)+0x4a>
    ade2:	2aff      	cmp	r2, #255	; 0xff
    ade4:	d9f7      	bls.n	add6 <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ade6:	fbbc f3f2 	udiv	r3, ip, r2
    adea:	459e      	cmp	lr, r3
    adec:	d22e      	bcs.n	ae4c <setSdclk(unsigned long)+0xb0>
    adee:	0051      	lsls	r1, r2, #1
    adf0:	2301      	movs	r3, #1
    dvs++;
    adf2:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    adf4:	fbbc f0f1 	udiv	r0, ip, r1
    adf8:	4570      	cmp	r0, lr
    adfa:	bf94      	ite	ls
    adfc:	2000      	movls	r0, #0
    adfe:	2001      	movhi	r0, #1
    ae00:	2b0f      	cmp	r3, #15
    ae02:	bf88      	it	hi
    ae04:	2000      	movhi	r0, #0
    ae06:	460c      	mov	r4, r1
    ae08:	4411      	add	r1, r2
    ae0a:	2800      	cmp	r0, #0
    ae0c:	d1f1      	bne.n	adf2 <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ae0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ae12:	fb01 f404 	mul.w	r4, r1, r4
    ae16:	fbbc f4f4 	udiv	r4, ip, r4
    ae1a:	4811      	ldr	r0, [pc, #68]	; (ae60 <setSdclk(unsigned long)+0xc4>)
    ae1c:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    ae1e:	4811      	ldr	r0, [pc, #68]	; (ae64 <setSdclk(unsigned long)+0xc8>)
    ae20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
    ae22:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ae24:	011b      	lsls	r3, r3, #4
    ae26:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    ae28:	490f      	ldr	r1, [pc, #60]	; (ae68 <setSdclk(unsigned long)+0xcc>)
    ae2a:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ae2c:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    ae2e:	01d2      	lsls	r2, r2, #7
    ae30:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    ae34:	4313      	orrs	r3, r2
    ae36:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ae3a:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ae3c:	4602      	mov	r2, r0
    ae3e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ae40:	f013 0f08 	tst.w	r3, #8
    ae44:	d0fb      	beq.n	ae3e <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    ae46:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
    ae48:	2201      	movs	r2, #1
    ae4a:	e7cc      	b.n	ade6 <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ae4c:	4614      	mov	r4, r2
    ae4e:	2301      	movs	r3, #1
    ae50:	e7dd      	b.n	ae0e <setSdclk(unsigned long)+0x72>
    ae52:	bf00      	nop
    ae54:	400fc000 	.word	0x400fc000
    ae58:	aaaaaaab 	.word	0xaaaaaaab
    ae5c:	5e69ec00 	.word	0x5e69ec00
    ae60:	20005024 	.word	0x20005024
    ae64:	402c0000 	.word	0x402c0000
    ae68:	fff0000f 	.word	0xfff0000f

0000ae6c <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    ae6c:	4b01      	ldr	r3, [pc, #4]	; (ae74 <SdioCard::errorCode() const+0x8>)
    ae6e:	7818      	ldrb	r0, [r3, #0]
    ae70:	4770      	bx	lr
    ae72:	bf00      	nop
    ae74:	20003d44 	.word	0x20003d44

0000ae78 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ae78:	4b01      	ldr	r3, [pc, #4]	; (ae80 <SdioCard::errorData() const+0x8>)
    ae7a:	6818      	ldr	r0, [r3, #0]
}
    ae7c:	4770      	bx	lr
    ae7e:	bf00      	nop
    ae80:	200050c0 	.word	0x200050c0

0000ae84 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ae84:	b410      	push	{r4}
    ae86:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    ae88:	4c06      	ldr	r4, [pc, #24]	; (aea4 <SdioCard::readCID(CID*)+0x20>)
    ae8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ae8c:	f8cc 0000 	str.w	r0, [ip]
    ae90:	f8cc 1004 	str.w	r1, [ip, #4]
    ae94:	f8cc 2008 	str.w	r2, [ip, #8]
    ae98:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    ae9c:	2001      	movs	r0, #1
    ae9e:	f85d 4b04 	ldr.w	r4, [sp], #4
    aea2:	4770      	bx	lr
    aea4:	20005094 	.word	0x20005094

0000aea8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    aea8:	b410      	push	{r4}
    aeaa:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    aeac:	4c06      	ldr	r4, [pc, #24]	; (aec8 <SdioCard::readCSD(csd_t*)+0x20>)
    aeae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    aeb0:	f8cc 0000 	str.w	r0, [ip]
    aeb4:	f8cc 1004 	str.w	r1, [ip, #4]
    aeb8:	f8cc 2008 	str.w	r2, [ip, #8]
    aebc:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    aec0:	2001      	movs	r0, #1
    aec2:	f85d 4b04 	ldr.w	r4, [sp], #4
    aec6:	4770      	bx	lr
    aec8:	200050a4 	.word	0x200050a4

0000aecc <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    aecc:	4b02      	ldr	r3, [pc, #8]	; (aed8 <SdioCard::readOCR(unsigned long*)+0xc>)
    aece:	681b      	ldr	r3, [r3, #0]
    aed0:	600b      	str	r3, [r1, #0]
  return true;
}
    aed2:	2001      	movs	r0, #1
    aed4:	4770      	bx	lr
    aed6:	bf00      	nop
    aed8:	200050b4 	.word	0x200050b4

0000aedc <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    aedc:	4b17      	ldr	r3, [pc, #92]	; (af3c <SdioCard::sectorCount()+0x60>)
    aede:	781b      	ldrb	r3, [r3, #0]
    aee0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    aee4:	d003      	beq.n	aeee <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
    aee6:	2b40      	cmp	r3, #64	; 0x40
    aee8:	d01b      	beq.n	af22 <SdioCard::sectorCount()+0x46>
    return 0;
    aeea:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    aeec:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
    aeee:	4a13      	ldr	r2, [pc, #76]	; (af3c <SdioCard::sectorCount()+0x60>)
    aef0:	7993      	ldrb	r3, [r2, #6]
    aef2:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    aef6:	79d0      	ldrb	r0, [r2, #7]
    aef8:	0080      	lsls	r0, r0, #2
    aefa:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    aefe:	7a13      	ldrb	r3, [r2, #8]
    af00:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    af04:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    af06:	7a53      	ldrb	r3, [r2, #9]
    af08:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    af0c:	7a91      	ldrb	r1, [r2, #10]
    af0e:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    af10:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    af14:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    af16:	f002 020f 	and.w	r2, r2, #15
    af1a:	4413      	add	r3, r2
    af1c:	3b07      	subs	r3, #7
    af1e:	4098      	lsls	r0, r3
    af20:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
    af22:	4b06      	ldr	r3, [pc, #24]	; (af3c <SdioCard::sectorCount()+0x60>)
    af24:	79da      	ldrb	r2, [r3, #7]
    af26:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    af2a:	7a58      	ldrb	r0, [r3, #9]
    af2c:	3001      	adds	r0, #1
    af2e:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    af32:	7a1b      	ldrb	r3, [r3, #8]
    af34:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    af38:	0280      	lsls	r0, r0, #10
    af3a:	4770      	bx	lr
    af3c:	200050a4 	.word	0x200050a4

0000af40 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    af40:	4b04      	ldr	r3, [pc, #16]	; (af54 <SdioCard::type() const+0x14>)
    af42:	781b      	ldrb	r3, [r3, #0]
    af44:	b123      	cbz	r3, af50 <SdioCard::type() const+0x10>
    af46:	4b04      	ldr	r3, [pc, #16]	; (af58 <SdioCard::type() const+0x18>)
    af48:	7818      	ldrb	r0, [r3, #0]
    af4a:	3002      	adds	r0, #2
    af4c:	b2c0      	uxtb	r0, r0
    af4e:	4770      	bx	lr
    af50:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    af52:	4770      	bx	lr
    af54:	20005830 	.word	0x20005830
    af58:	20005831 	.word	0x20005831

0000af5c <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    af5c:	4770      	bx	lr
	...

0000af60 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af62:	4604      	mov	r4, r0
  uint32_t m = micros();
    af64:	f002 fb3a 	bl	d5dc <micros>
    af68:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af6a:	4f05      	ldr	r7, [pc, #20]	; (af80 <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
    af6c:	47a0      	blx	r4
    af6e:	4606      	mov	r6, r0
    af70:	b120      	cbz	r0, af7c <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af72:	f002 fb33 	bl	d5dc <micros>
    af76:	1b40      	subs	r0, r0, r5
    af78:	42b8      	cmp	r0, r7
    af7a:	d9f7      	bls.n	af6c <waitTimeout(bool (*)())+0xc>
}
    af7c:	4630      	mov	r0, r6
    af7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af80:	000f4240 	.word	0x000f4240

0000af84 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    af84:	b570      	push	{r4, r5, r6, lr}
    af86:	4604      	mov	r4, r0
    af88:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    af8a:	4819      	ldr	r0, [pc, #100]	; (aff0 <cardCommand(unsigned long, unsigned long)+0x6c>)
    af8c:	f7ff ffe8 	bl	af60 <waitTimeout(bool (*)())>
    af90:	bb40      	cbnz	r0, afe4 <cardCommand(unsigned long, unsigned long)+0x60>
    af92:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
    af94:	4b17      	ldr	r3, [pc, #92]	; (aff4 <cardCommand(unsigned long, unsigned long)+0x70>)
    af96:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    af98:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    af9c:	d007      	beq.n	afae <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    af9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    afa0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    afa4:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    afa6:	6c99      	ldr	r1, [r3, #72]	; 0x48
    afa8:	b2e2      	uxtb	r2, r4
    afaa:	430a      	orrs	r2, r1
    afac:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    afae:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    afb2:	4b10      	ldr	r3, [pc, #64]	; (aff4 <cardCommand(unsigned long, unsigned long)+0x70>)
    afb4:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    afb6:	4810      	ldr	r0, [pc, #64]	; (aff8 <cardCommand(unsigned long, unsigned long)+0x74>)
    afb8:	f7ff ffd2 	bl	af60 <waitTimeout(bool (*)())>
    afbc:	4601      	mov	r1, r0
    afbe:	b990      	cbnz	r0, afe6 <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
    afc0:	4a0c      	ldr	r2, [pc, #48]	; (aff4 <cardCommand(unsigned long, unsigned long)+0x70>)
    afc2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    afc4:	4b0d      	ldr	r3, [pc, #52]	; (affc <cardCommand(unsigned long, unsigned long)+0x78>)
    afc6:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    afc8:	6818      	ldr	r0, [r3, #0]
    afca:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    afcc:	681b      	ldr	r3, [r3, #0]
    afce:	f013 0f01 	tst.w	r3, #1
    afd2:	d00a      	beq.n	afea <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    afd4:	4b09      	ldr	r3, [pc, #36]	; (affc <cardCommand(unsigned long, unsigned long)+0x78>)
    afd6:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    afd8:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    afdc:	bf0c      	ite	eq
    afde:	2601      	moveq	r6, #1
    afe0:	2600      	movne	r6, #0
    afe2:	e000      	b.n	afe6 <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
    afe4:	2600      	movs	r6, #0
}
    afe6:	4630      	mov	r0, r6
    afe8:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    afea:	460e      	mov	r6, r1
    afec:	e7fb      	b.n	afe6 <cardCommand(unsigned long, unsigned long)+0x62>
    afee:	bf00      	nop
    aff0:	0000ad2d 	.word	0x0000ad2d
    aff4:	402c0000 	.word	0x402c0000
    aff8:	0000ad15 	.word	0x0000ad15
    affc:	200050c0 	.word	0x200050c0

0000b000 <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
    b000:	b510      	push	{r4, lr}
    b002:	b084      	sub	sp, #16
    b004:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
    b006:	4b19      	ldr	r3, [pc, #100]	; (b06c <readReg16(unsigned long, void*)+0x6c>)
    b008:	6819      	ldr	r1, [r3, #0]
    b00a:	f7ff ffbb 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b00e:	b350      	cbz	r0, b066 <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    b010:	4b17      	ldr	r3, [pc, #92]	; (b070 <readReg16(unsigned long, void*)+0x70>)
    b012:	691a      	ldr	r2, [r3, #16]
    b014:	9200      	str	r2, [sp, #0]
    b016:	695a      	ldr	r2, [r3, #20]
    b018:	9201      	str	r2, [sp, #4]
    b01a:	699a      	ldr	r2, [r3, #24]
    b01c:	9202      	str	r2, [sp, #8]
    b01e:	69db      	ldr	r3, [r3, #28]
    b020:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    b022:	f104 0e0f 	add.w	lr, r4, #15
    b026:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    b028:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    b02c:	461a      	mov	r2, r3
    b02e:	2b00      	cmp	r3, #0
    b030:	bfb8      	it	lt
    b032:	1cda      	addlt	r2, r3, #3
    b034:	f022 0203 	bic.w	r2, r2, #3
    b038:	3210      	adds	r2, #16
    b03a:	446a      	add	r2, sp
    b03c:	4259      	negs	r1, r3
    b03e:	f003 0c03 	and.w	ip, r3, #3
    b042:	f001 0103 	and.w	r1, r1, #3
    b046:	bf58      	it	pl
    b048:	f1c1 0c00 	rsbpl	ip, r1, #0
    b04c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b050:	f852 2c10 	ldr.w	r2, [r2, #-16]
    b054:	fa22 f20c 	lsr.w	r2, r2, ip
    b058:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
    b05c:	3301      	adds	r3, #1
    b05e:	2b0f      	cmp	r3, #15
    b060:	d1e2      	bne.n	b028 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    b062:	2300      	movs	r3, #0
    b064:	73e3      	strb	r3, [r4, #15]
}
    b066:	b004      	add	sp, #16
    b068:	bd10      	pop	{r4, pc}
    b06a:	bf00      	nop
    b06c:	200050b8 	.word	0x200050b8
    b070:	402c0000 	.word	0x402c0000

0000b074 <statusCMD13()>:
static uint32_t statusCMD13() {
    b074:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b076:	4b05      	ldr	r3, [pc, #20]	; (b08c <statusCMD13()+0x18>)
    b078:	6819      	ldr	r1, [r3, #0]
    b07a:	4805      	ldr	r0, [pc, #20]	; (b090 <statusCMD13()+0x1c>)
    b07c:	f7ff ff82 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b080:	b110      	cbz	r0, b088 <statusCMD13()+0x14>
    b082:	4b04      	ldr	r3, [pc, #16]	; (b094 <statusCMD13()+0x20>)
    b084:	6918      	ldr	r0, [r3, #16]
}
    b086:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b088:	2000      	movs	r0, #0
    b08a:	e7fc      	b.n	b086 <statusCMD13()+0x12>
    b08c:	200050b8 	.word	0x200050b8
    b090:	0d1a0000 	.word	0x0d1a0000
    b094:	402c0000 	.word	0x402c0000

0000b098 <isBusyCMD13()>:
static bool isBusyCMD13() {
    b098:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    b09a:	f7ff ffeb 	bl	b074 <statusCMD13()>
    b09e:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
    b0a2:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b0a6:	bd08      	pop	{r3, pc}

0000b0a8 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    b0a8:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
    b0aa:	7a03      	ldrb	r3, [r0, #8]
    b0ac:	f013 0f01 	tst.w	r3, #1
    b0b0:	d00b      	beq.n	b0ca <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    b0b2:	4b0c      	ldr	r3, [pc, #48]	; (b0e4 <SdioCard::isBusy()+0x3c>)
    b0b4:	681b      	ldr	r3, [r3, #0]
    b0b6:	b10b      	cbz	r3, b0bc <SdioCard::isBusy()+0x14>
    b0b8:	4798      	blx	r3
}
    b0ba:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    b0bc:	4b0a      	ldr	r3, [pc, #40]	; (b0e8 <SdioCard::isBusy()+0x40>)
    b0be:	7818      	ldrb	r0, [r3, #0]
    b0c0:	2800      	cmp	r0, #0
    b0c2:	d0fa      	beq.n	b0ba <SdioCard::isBusy()+0x12>
    b0c4:	f7ff ffe8 	bl	b098 <isBusyCMD13()>
    b0c8:	e7f7      	b.n	b0ba <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
    b0ca:	4b08      	ldr	r3, [pc, #32]	; (b0ec <SdioCard::isBusy()+0x44>)
    b0cc:	781b      	ldrb	r3, [r3, #0]
    b0ce:	b933      	cbnz	r3, b0de <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b0d0:	4b07      	ldr	r3, [pc, #28]	; (b0f0 <SdioCard::isBusy()+0x48>)
    b0d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    b0d4:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    b0d8:	f3c0 6000 	ubfx	r0, r0, #24, #1
    b0dc:	e7ed      	b.n	b0ba <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
    b0de:	f7ff fe51 	bl	ad84 <isBusyTransferComplete()>
    b0e2:	e7ea      	b.n	b0ba <SdioCard::isBusy()+0x12>
    b0e4:	200050bc 	.word	0x200050bc
    b0e8:	2000582f 	.word	0x2000582f
    b0ec:	20005832 	.word	0x20005832
    b0f0:	402c0000 	.word	0x402c0000

0000b0f4 <SdioCard::status()>:
uint32_t SdioCard::status() {
    b0f4:	b508      	push	{r3, lr}
  return statusCMD13();
    b0f6:	f7ff ffbd 	bl	b074 <statusCMD13()>
}
    b0fa:	bd08      	pop	{r3, pc}

0000b0fc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b0fc:	b538      	push	{r3, r4, r5, lr}
    b0fe:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    b100:	4b2a      	ldr	r3, [pc, #168]	; (b1ac <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    b102:	7a9b      	ldrb	r3, [r3, #10]
    b104:	f013 0f40 	tst.w	r3, #64	; 0x40
    b108:	d113      	bne.n	b132 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    b10a:	4a28      	ldr	r2, [pc, #160]	; (b1ac <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    b10c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b110:	7ad2      	ldrb	r2, [r2, #11]
    b112:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b114:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b118:	1c62      	adds	r2, r4, #1
    b11a:	430a      	orrs	r2, r1
    b11c:	4213      	tst	r3, r2
    b11e:	d008      	beq.n	b132 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    b120:	4b23      	ldr	r3, [pc, #140]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    b122:	2227      	movs	r2, #39	; 0x27
    b124:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b126:	4b23      	ldr	r3, [pc, #140]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    b128:	f240 22e3 	movw	r2, #739	; 0x2e3
    b12c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    b12e:	2500      	movs	r5, #0
    b130:	e010      	b.n	b154 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
    b132:	4b21      	ldr	r3, [pc, #132]	; (b1b8 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    b134:	781b      	ldrb	r3, [r3, #0]
    b136:	b90b      	cbnz	r3, b13c <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    b138:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    b13a:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    b13c:	481f      	ldr	r0, [pc, #124]	; (b1bc <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    b13e:	f7ff ff21 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b142:	4605      	mov	r5, r0
    b144:	b940      	cbnz	r0, b158 <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
    b146:	4b1a      	ldr	r3, [pc, #104]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    b148:	220f      	movs	r2, #15
    b14a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b14c:	4b19      	ldr	r3, [pc, #100]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    b14e:	f240 22eb 	movw	r2, #747	; 0x2eb
    b152:	601a      	str	r2, [r3, #0]
}
    b154:	4628      	mov	r0, r5
    b156:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    b158:	4621      	mov	r1, r4
    b15a:	4819      	ldr	r0, [pc, #100]	; (b1c0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    b15c:	f7ff ff12 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b160:	4605      	mov	r5, r0
    b162:	b938      	cbnz	r0, b174 <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
    b164:	4b12      	ldr	r3, [pc, #72]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    b166:	2210      	movs	r2, #16
    b168:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b16a:	4b12      	ldr	r3, [pc, #72]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    b16c:	f240 22ee 	movw	r2, #750	; 0x2ee
    b170:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
    b172:	e7ef      	b.n	b154 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    b174:	2100      	movs	r1, #0
    b176:	4813      	ldr	r0, [pc, #76]	; (b1c4 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    b178:	f7ff ff04 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b17c:	4605      	mov	r5, r0
    b17e:	b938      	cbnz	r0, b190 <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
    b180:	4b0b      	ldr	r3, [pc, #44]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    b182:	2211      	movs	r2, #17
    b184:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b186:	4b0b      	ldr	r3, [pc, #44]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    b188:	f240 22f1 	movw	r2, #753	; 0x2f1
    b18c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    b18e:	e7e1      	b.n	b154 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
    b190:	480d      	ldr	r0, [pc, #52]	; (b1c8 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    b192:	f7ff fee5 	bl	af60 <waitTimeout(bool (*)())>
    b196:	2800      	cmp	r0, #0
    b198:	d0dc      	beq.n	b154 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    b19a:	4b05      	ldr	r3, [pc, #20]	; (b1b0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    b19c:	2228      	movs	r2, #40	; 0x28
    b19e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1a0:	4b04      	ldr	r3, [pc, #16]	; (b1b4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    b1a2:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    b1a6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b1a8:	2500      	movs	r5, #0
    b1aa:	e7d3      	b.n	b154 <SdioCard::erase(unsigned long, unsigned long)+0x58>
    b1ac:	200050a4 	.word	0x200050a4
    b1b0:	20003d44 	.word	0x20003d44
    b1b4:	20005090 	.word	0x20005090
    b1b8:	20005831 	.word	0x20005831
    b1bc:	201a0000 	.word	0x201a0000
    b1c0:	211a0000 	.word	0x211a0000
    b1c4:	261b0000 	.word	0x261b0000
    b1c8:	0000b099 	.word	0x0000b099

0000b1cc <waitTransferComplete()>:
static bool waitTransferComplete() {
    b1cc:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    b1ce:	4b10      	ldr	r3, [pc, #64]	; (b210 <waitTransferComplete()+0x44>)
    b1d0:	781c      	ldrb	r4, [r3, #0]
    b1d2:	b914      	cbnz	r4, b1da <waitTransferComplete()+0xe>
    return true;
    b1d4:	2401      	movs	r4, #1
}
    b1d6:	4620      	mov	r0, r4
    b1d8:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    b1da:	480e      	ldr	r0, [pc, #56]	; (b214 <waitTransferComplete()+0x48>)
    b1dc:	f7ff fec0 	bl	af60 <waitTimeout(bool (*)())>
  m_transferActive = false;
    b1e0:	4b0b      	ldr	r3, [pc, #44]	; (b210 <waitTransferComplete()+0x44>)
    b1e2:	2200      	movs	r2, #0
    b1e4:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
    b1e6:	4b0c      	ldr	r3, [pc, #48]	; (b218 <waitTransferComplete()+0x4c>)
    b1e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b1ea:	4a0c      	ldr	r2, [pc, #48]	; (b21c <waitTransferComplete()+0x50>)
    b1ec:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b1ee:	6812      	ldr	r2, [r2, #0]
    b1f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b1f2:	b920      	cbnz	r0, b1fe <waitTransferComplete()+0x32>
    b1f4:	4b09      	ldr	r3, [pc, #36]	; (b21c <waitTransferComplete()+0x50>)
    b1f6:	681a      	ldr	r2, [r3, #0]
    b1f8:	4b09      	ldr	r3, [pc, #36]	; (b220 <waitTransferComplete()+0x54>)
    b1fa:	421a      	tst	r2, r3
    b1fc:	d0eb      	beq.n	b1d6 <waitTransferComplete()+0xa>
  m_errorCode = code;
    b1fe:	4b09      	ldr	r3, [pc, #36]	; (b224 <waitTransferComplete()+0x58>)
    b200:	221f      	movs	r2, #31
    b202:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b204:	4b08      	ldr	r3, [pc, #32]	; (b228 <waitTransferComplete()+0x5c>)
    b206:	f240 227a 	movw	r2, #634	; 0x27a
    b20a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    b20c:	2400      	movs	r4, #0
    b20e:	e7e2      	b.n	b1d6 <waitTransferComplete()+0xa>
    b210:	20005832 	.word	0x20005832
    b214:	0000ad85 	.word	0x0000ad85
    b218:	402c0000 	.word	0x402c0000
    b21c:	200050c0 	.word	0x200050c0
    b220:	117f0000 	.word	0x117f0000
    b224:	20003d44 	.word	0x20003d44
    b228:	20005090 	.word	0x20005090

0000b22c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    b22c:	b538      	push	{r3, r4, r5, lr}
    b22e:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    b230:	f7ff ffcc 	bl	b1cc <waitTransferComplete()>
    b234:	4604      	mov	r4, r0
    b236:	b1f0      	cbz	r0, b276 <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    b238:	4b1c      	ldr	r3, [pc, #112]	; (b2ac <SdioCard::writeData(unsigned char const*)+0x80>)
    b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b23c:	f413 7f80 	tst.w	r3, #256	; 0x100
    b240:	d108      	bne.n	b254 <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b242:	4b1a      	ldr	r3, [pc, #104]	; (b2ac <SdioCard::writeData(unsigned char const*)+0x80>)
    b244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b246:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b24a:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b24c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b24e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b252:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b254:	4a15      	ldr	r2, [pc, #84]	; (b2ac <SdioCard::writeData(unsigned char const*)+0x80>)
    b256:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b25c:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    b25e:	4814      	ldr	r0, [pc, #80]	; (b2b0 <SdioCard::writeData(unsigned char const*)+0x84>)
    b260:	f7ff fe7e 	bl	af60 <waitTimeout(bool (*)())>
    b264:	b148      	cbz	r0, b27a <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
    b266:	4b13      	ldr	r3, [pc, #76]	; (b2b4 <SdioCard::writeData(unsigned char const*)+0x88>)
    b268:	2221      	movs	r2, #33	; 0x21
    b26a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b26c:	4b12      	ldr	r3, [pc, #72]	; (b2b8 <SdioCard::writeData(unsigned char const*)+0x8c>)
    b26e:	f240 32d9 	movw	r2, #985	; 0x3d9
    b272:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    b274:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    b276:	4620      	mov	r0, r4
    b278:	bd38      	pop	{r3, r4, r5, pc}
    b27a:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    b27e:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    b282:	480a      	ldr	r0, [pc, #40]	; (b2ac <SdioCard::writeData(unsigned char const*)+0x80>)
    b284:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b286:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b28a:	d0fb      	beq.n	b284 <SdioCard::writeData(unsigned char const*)+0x58>
    b28c:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
    b290:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b294:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b296:	4563      	cmp	r3, ip
    b298:	d1fa      	bne.n	b290 <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b29a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b29e:	458c      	cmp	ip, r1
    b2a0:	d1f0      	bne.n	b284 <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
    b2a2:	4b06      	ldr	r3, [pc, #24]	; (b2bc <SdioCard::writeData(unsigned char const*)+0x90>)
    b2a4:	2201      	movs	r2, #1
    b2a6:	701a      	strb	r2, [r3, #0]
  return true;
    b2a8:	e7e5      	b.n	b276 <SdioCard::writeData(unsigned char const*)+0x4a>
    b2aa:	bf00      	nop
    b2ac:	402c0000 	.word	0x402c0000
    b2b0:	0000ad71 	.word	0x0000ad71
    b2b4:	20003d44 	.word	0x20003d44
    b2b8:	20005090 	.word	0x20005090
    b2bc:	20005832 	.word	0x20005832

0000b2c0 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2c2:	4604      	mov	r4, r0
  m_busyFcn = fcn;
    b2c4:	4b0a      	ldr	r3, [pc, #40]	; (b2f0 <yieldTimeout(bool (*)())+0x30>)
    b2c6:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
    b2c8:	f002 f988 	bl	d5dc <micros>
    b2cc:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b2ce:	4f09      	ldr	r7, [pc, #36]	; (b2f4 <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
    b2d0:	e001      	b.n	b2d6 <yieldTimeout(bool (*)())+0x16>
    yield();
    b2d2:	f004 f8a1 	bl	f418 <yield>
  while (fcn()) {
    b2d6:	47a0      	blx	r4
    b2d8:	4606      	mov	r6, r0
    b2da:	b120      	cbz	r0, b2e6 <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b2dc:	f002 f97e 	bl	d5dc <micros>
    b2e0:	1b40      	subs	r0, r0, r5
    b2e2:	42b8      	cmp	r0, r7
    b2e4:	d9f5      	bls.n	b2d2 <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
    b2e6:	4b02      	ldr	r3, [pc, #8]	; (b2f0 <yieldTimeout(bool (*)())+0x30>)
    b2e8:	2200      	movs	r2, #0
    b2ea:	601a      	str	r2, [r3, #0]
}
    b2ec:	4630      	mov	r0, r6
    b2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2f0:	200050bc 	.word	0x200050bc
    b2f4:	000f4240 	.word	0x000f4240

0000b2f8 <waitDmaStatus()>:
static bool waitDmaStatus() {
    b2f8:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    b2fa:	4809      	ldr	r0, [pc, #36]	; (b320 <waitDmaStatus()+0x28>)
    b2fc:	f7ff ffe0 	bl	b2c0 <yieldTimeout(bool (*)())>
    b300:	b960      	cbnz	r0, b31c <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b302:	4b08      	ldr	r3, [pc, #32]	; (b324 <waitDmaStatus()+0x2c>)
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	f013 0f02 	tst.w	r3, #2
    b30a:	d008      	beq.n	b31e <waitDmaStatus()+0x26>
    b30c:	4b05      	ldr	r3, [pc, #20]	; (b324 <waitDmaStatus()+0x2c>)
    b30e:	681a      	ldr	r2, [r3, #0]
    b310:	4b05      	ldr	r3, [pc, #20]	; (b328 <waitDmaStatus()+0x30>)
    b312:	421a      	tst	r2, r3
    b314:	bf0c      	ite	eq
    b316:	2001      	moveq	r0, #1
    b318:	2000      	movne	r0, #0
    b31a:	e000      	b.n	b31e <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
    b31c:	2000      	movs	r0, #0
}
    b31e:	bd08      	pop	{r3, pc}
    b320:	0000ad51 	.word	0x0000ad51
    b324:	200050c0 	.word	0x200050c0
    b328:	117f0000 	.word	0x117f0000

0000b32c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    b32c:	b538      	push	{r3, r4, r5, lr}
    b32e:	4605      	mov	r5, r0
    b330:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
    b332:	4819      	ldr	r0, [pc, #100]	; (b398 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    b334:	f7ff fe14 	bl	af60 <waitTimeout(bool (*)())>
    b338:	b140      	cbz	r0, b34c <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    b33a:	4b18      	ldr	r3, [pc, #96]	; (b39c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b33c:	220a      	movs	r2, #10
    b33e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b340:	4b17      	ldr	r3, [pc, #92]	; (b3a0 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b342:	f44f 72cc 	mov.w	r2, #408	; 0x198
    b346:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b348:	2000      	movs	r0, #0
}
    b34a:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    b34c:	4b15      	ldr	r3, [pc, #84]	; (b3a4 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    b34e:	2201      	movs	r2, #1
    b350:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    b352:	4b15      	ldr	r3, [pc, #84]	; (b3a8 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    b354:	2200      	movs	r2, #0
    b356:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    b358:	4b14      	ldr	r3, [pc, #80]	; (b3ac <cardCMD6(unsigned long, unsigned char*)+0x80>)
    b35a:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b35c:	4a14      	ldr	r2, [pc, #80]	; (b3b0 <cardCMD6(unsigned long, unsigned char*)+0x84>)
    b35e:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b360:	4a14      	ldr	r2, [pc, #80]	; (b3b4 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    b362:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b364:	4629      	mov	r1, r5
    b366:	4814      	ldr	r0, [pc, #80]	; (b3b8 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    b368:	f7ff fe0c 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b36c:	b938      	cbnz	r0, b37e <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    b36e:	4b0b      	ldr	r3, [pc, #44]	; (b39c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b370:	2204      	movs	r2, #4
    b372:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b374:	4b0a      	ldr	r3, [pc, #40]	; (b3a0 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b376:	f240 129f 	movw	r2, #415	; 0x19f
    b37a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
    b37c:	e7e5      	b.n	b34a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    b37e:	f7ff ffbb 	bl	b2f8 <waitDmaStatus()>
    b382:	2800      	cmp	r0, #0
    b384:	d1e1      	bne.n	b34a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    b386:	4b05      	ldr	r3, [pc, #20]	; (b39c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b388:	2225      	movs	r2, #37	; 0x25
    b38a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b38c:	4b04      	ldr	r3, [pc, #16]	; (b3a0 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b38e:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    b392:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b394:	e7d9      	b.n	b34a <cardCMD6(unsigned long, unsigned char*)+0x1e>
    b396:	bf00      	nop
    b398:	0000b099 	.word	0x0000b099
    b39c:	20003d44 	.word	0x20003d44
    b3a0:	20005090 	.word	0x20005090
    b3a4:	20005833 	.word	0x20005833
    b3a8:	200050c0 	.word	0x200050c0
    b3ac:	402c0000 	.word	0x402c0000
    b3b0:	00010040 	.word	0x00010040
    b3b4:	117f0002 	.word	0x117f0002
    b3b8:	063a0011 	.word	0x063a0011

0000b3bc <transferStop()>:
static bool transferStop() {
    b3bc:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b3be:	4a19      	ldr	r2, [pc, #100]	; (b424 <transferStop()+0x68>)
    b3c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b3c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b3c6:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b3c8:	2100      	movs	r1, #0
    b3ca:	4817      	ldr	r0, [pc, #92]	; (b428 <transferStop()+0x6c>)
    b3cc:	f7ff fdda 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b3d0:	4604      	mov	r4, r0
    b3d2:	b940      	cbnz	r0, b3e6 <transferStop()+0x2a>
  m_errorCode = code;
    b3d4:	4b15      	ldr	r3, [pc, #84]	; (b42c <transferStop()+0x70>)
    b3d6:	2209      	movs	r2, #9
    b3d8:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b3da:	4b15      	ldr	r3, [pc, #84]	; (b430 <transferStop()+0x74>)
    b3dc:	f240 223d 	movw	r2, #573	; 0x23d
    b3e0:	601a      	str	r2, [r3, #0]
}
    b3e2:	4620      	mov	r0, r4
    b3e4:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
    b3e6:	4813      	ldr	r0, [pc, #76]	; (b434 <transferStop()+0x78>)
    b3e8:	f7ff ff6a 	bl	b2c0 <yieldTimeout(bool (*)())>
    b3ec:	b140      	cbz	r0, b400 <transferStop()+0x44>
  m_errorCode = code;
    b3ee:	4b0f      	ldr	r3, [pc, #60]	; (b42c <transferStop()+0x70>)
    b3f0:	220a      	movs	r2, #10
    b3f2:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b3f4:	4b0e      	ldr	r3, [pc, #56]	; (b430 <transferStop()+0x74>)
    b3f6:	f44f 7210 	mov.w	r2, #576	; 0x240
    b3fa:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b3fc:	2400      	movs	r4, #0
    b3fe:	e7f0      	b.n	b3e2 <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    b400:	4b08      	ldr	r3, [pc, #32]	; (b424 <transferStop()+0x68>)
    b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b404:	f013 0f02 	tst.w	r3, #2
    b408:	d0eb      	beq.n	b3e2 <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    b40a:	4b06      	ldr	r3, [pc, #24]	; (b424 <transferStop()+0x68>)
    b40c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b40e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b416:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    b41a:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    b41c:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    b41e:	629a      	str	r2, [r3, #40]	; 0x28
    b420:	e7df      	b.n	b3e2 <transferStop()+0x26>
    b422:	bf00      	nop
    b424:	402c0000 	.word	0x402c0000
    b428:	0cdb0000 	.word	0x0cdb0000
    b42c:	20003d44 	.word	0x20003d44
    b430:	20005090 	.word	0x20005090
    b434:	0000ad3d 	.word	0x0000ad3d

0000b438 <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    b438:	b508      	push	{r3, lr}
  return transferStop();
    b43a:	f7ff ffbf 	bl	b3bc <transferStop()>
}
    b43e:	bd08      	pop	{r3, pc}

0000b440 <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
    b440:	b510      	push	{r4, lr}
    b442:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b444:	4813      	ldr	r0, [pc, #76]	; (b494 <SdioCard::writeStart(unsigned long)+0x54>)
    b446:	f7ff ff3b 	bl	b2c0 <yieldTimeout(bool (*)())>
    b44a:	b140      	cbz	r0, b45e <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    b44c:	4b12      	ldr	r3, [pc, #72]	; (b498 <SdioCard::writeStart(unsigned long)+0x58>)
    b44e:	220a      	movs	r2, #10
    b450:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b452:	4b12      	ldr	r3, [pc, #72]	; (b49c <SdioCard::writeStart(unsigned long)+0x5c>)
    b454:	f240 422c 	movw	r2, #1068	; 0x42c
    b458:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b45a:	2000      	movs	r0, #0
}
    b45c:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b45e:	4b10      	ldr	r3, [pc, #64]	; (b4a0 <SdioCard::writeStart(unsigned long)+0x60>)
    b460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b462:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b466:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b468:	f44f 7200 	mov.w	r2, #512	; 0x200
    b46c:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b46e:	4b0d      	ldr	r3, [pc, #52]	; (b4a4 <SdioCard::writeStart(unsigned long)+0x64>)
    b470:	781b      	ldrb	r3, [r3, #0]
    b472:	b903      	cbnz	r3, b476 <SdioCard::writeStart(unsigned long)+0x36>
    b474:	0264      	lsls	r4, r4, #9
    b476:	4621      	mov	r1, r4
    b478:	480b      	ldr	r0, [pc, #44]	; (b4a8 <SdioCard::writeStart(unsigned long)+0x68>)
    b47a:	f7ff fd83 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b47e:	2800      	cmp	r0, #0
    b480:	d1ec      	bne.n	b45c <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    b482:	4b05      	ldr	r3, [pc, #20]	; (b498 <SdioCard::writeStart(unsigned long)+0x58>)
    b484:	220e      	movs	r2, #14
    b486:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b488:	4b04      	ldr	r3, [pc, #16]	; (b49c <SdioCard::writeStart(unsigned long)+0x5c>)
    b48a:	f44f 6287 	mov.w	r2, #1080	; 0x438
    b48e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    b490:	e7e4      	b.n	b45c <SdioCard::writeStart(unsigned long)+0x1c>
    b492:	bf00      	nop
    b494:	0000b099 	.word	0x0000b099
    b498:	20003d44 	.word	0x20003d44
    b49c:	20005090 	.word	0x20005090
    b4a0:	402c0000 	.word	0x402c0000
    b4a4:	20005831 	.word	0x20005831
    b4a8:	193a0020 	.word	0x193a0020

0000b4ac <SdioCard::~SdioCard()>:
    b4ac:	b510      	push	{r4, lr}
    b4ae:	4604      	mov	r4, r0
    b4b0:	210c      	movs	r1, #12
    b4b2:	f002 f9ef 	bl	d894 <operator delete(void*, unsigned int)>
    b4b6:	4620      	mov	r0, r4
    b4b8:	bd10      	pop	{r4, pc}
	...

0000b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4c0:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    b4c2:	f012 0203 	ands.w	r2, r2, #3
    b4c6:	bf18      	it	ne
    b4c8:	2201      	movne	r2, #1
    b4ca:	2b00      	cmp	r3, #0
    b4cc:	bf14      	ite	ne
    b4ce:	4615      	movne	r5, r2
    b4d0:	f042 0501 	orreq.w	r5, r2, #1
    b4d4:	b155      	cbz	r5, b4ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
    b4d6:	4b1c      	ldr	r3, [pc, #112]	; (b548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    b4d8:	2225      	movs	r2, #37	; 0x25
    b4da:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b4dc:	4b1b      	ldr	r3, [pc, #108]	; (b54c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b4de:	f240 12f5 	movw	r2, #501	; 0x1f5
    b4e2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b4e4:	2500      	movs	r5, #0
}
    b4e6:	4628      	mov	r0, r5
    b4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4ec:	4607      	mov	r7, r0
    b4ee:	460e      	mov	r6, r1
    b4f0:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
    b4f2:	4817      	ldr	r0, [pc, #92]	; (b550 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    b4f4:	f7ff fee4 	bl	b2c0 <yieldTimeout(bool (*)())>
    b4f8:	b138      	cbz	r0, b50a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
    b4fa:	4b13      	ldr	r3, [pc, #76]	; (b548 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    b4fc:	220a      	movs	r2, #10
    b4fe:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b500:	4b12      	ldr	r3, [pc, #72]	; (b54c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b502:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b506:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b508:	e7ed      	b.n	b4e6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
    b50a:	4b12      	ldr	r3, [pc, #72]	; (b554 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    b50c:	2201      	movs	r2, #1
    b50e:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    b510:	4b11      	ldr	r3, [pc, #68]	; (b558 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    b512:	2200      	movs	r2, #0
    b514:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
    b516:	4a11      	ldr	r2, [pc, #68]	; (b55c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    b518:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b51a:	4b11      	ldr	r3, [pc, #68]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    b51c:	ea03 4308 	and.w	r3, r3, r8, lsl #16
    b520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b524:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b526:	4b0f      	ldr	r3, [pc, #60]	; (b564 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
    b528:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b52a:	4b0f      	ldr	r3, [pc, #60]	; (b568 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    b52c:	781b      	ldrb	r3, [r3, #0]
    b52e:	b903      	cbnz	r3, b532 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
    b530:	0276      	lsls	r6, r6, #9
    b532:	4631      	mov	r1, r6
    b534:	4638      	mov	r0, r7
    b536:	f7ff fd25 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b53a:	4605      	mov	r5, r0
    b53c:	2800      	cmp	r0, #0
    b53e:	d0d2      	beq.n	b4e6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
    b540:	f7ff feda 	bl	b2f8 <waitDmaStatus()>
    b544:	4605      	mov	r5, r0
    b546:	e7ce      	b.n	b4e6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
    b548:	20003d44 	.word	0x20003d44
    b54c:	20005090 	.word	0x20005090
    b550:	0000b099 	.word	0x0000b099
    b554:	20005833 	.word	0x20005833
    b558:	200050c0 	.word	0x200050c0
    b55c:	402c0000 	.word	0x402c0000
    b560:	1fff0000 	.word	0x1fff0000
    b564:	117f0002 	.word	0x117f0002
    b568:	20005831 	.word	0x20005831

0000b56c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b56e:	4606      	mov	r6, r0
    b570:	460c      	mov	r4, r1
    b572:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b574:	7a02      	ldrb	r2, [r0, #8]
    b576:	f012 0f01 	tst.w	r2, #1
    b57a:	d112      	bne.n	b5a2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b57c:	b17b      	cbz	r3, b59e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    b57e:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
    b580:	6833      	ldr	r3, [r6, #0]
    b582:	691b      	ldr	r3, [r3, #16]
    b584:	462a      	mov	r2, r5
    b586:	4621      	mov	r1, r4
    b588:	4630      	mov	r0, r6
    b58a:	4798      	blx	r3
    b58c:	4603      	mov	r3, r0
    b58e:	b120      	cbz	r0, b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b590:	3401      	adds	r4, #1
    b592:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b596:	42a7      	cmp	r7, r4
    b598:	d1f2      	bne.n	b580 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
    b59a:	4618      	mov	r0, r3
    b59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b59e:	2301      	movs	r3, #1
    b5a0:	e7fb      	b.n	b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
    b5a2:	f015 0f03 	tst.w	r5, #3
    b5a6:	d010      	beq.n	b5ca <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b5a8:	b1f3      	cbz	r3, b5e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    b5aa:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
    b5ac:	6833      	ldr	r3, [r6, #0]
    b5ae:	691b      	ldr	r3, [r3, #16]
    b5b0:	462a      	mov	r2, r5
    b5b2:	4621      	mov	r1, r4
    b5b4:	4630      	mov	r0, r6
    b5b6:	4798      	blx	r3
    b5b8:	4603      	mov	r3, r0
    b5ba:	2800      	cmp	r0, #0
    b5bc:	d0ed      	beq.n	b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b5be:	3401      	adds	r4, #1
    b5c0:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b5c4:	42bc      	cmp	r4, r7
    b5c6:	d1f1      	bne.n	b5ac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
    b5c8:	e7e7      	b.n	b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b5ca:	462a      	mov	r2, r5
    b5cc:	4807      	ldr	r0, [pc, #28]	; (b5ec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b5ce:	f7ff ff75 	bl	b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b5d2:	4603      	mov	r3, r0
    b5d4:	2800      	cmp	r0, #0
    b5d6:	d1e0      	bne.n	b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
    b5d8:	4a05      	ldr	r2, [pc, #20]	; (b5f0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b5da:	210c      	movs	r1, #12
    b5dc:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b5de:	4a05      	ldr	r2, [pc, #20]	; (b5f4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
    b5e0:	f240 3182 	movw	r1, #898	; 0x382
    b5e4:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    b5e6:	e7d8      	b.n	b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
    b5e8:	2301      	movs	r3, #1
    b5ea:	e7d6      	b.n	b59a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    b5ec:	123a0037 	.word	0x123a0037
    b5f0:	20003d44 	.word	0x20003d44
    b5f4:	20005090 	.word	0x20005090

0000b5f8 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b5f8:	b570      	push	{r4, r5, r6, lr}
    b5fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b5fe:	460e      	mov	r6, r1
    b600:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b602:	7a03      	ldrb	r3, [r0, #8]
    b604:	f013 0f01 	tst.w	r3, #1
    b608:	d01c      	beq.n	b644 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    b60a:	f012 0f03 	tst.w	r2, #3
    b60e:	d006      	beq.n	b61e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    b610:	f44f 7200 	mov.w	r2, #512	; 0x200
    b614:	4629      	mov	r1, r5
    b616:	4668      	mov	r0, sp
    b618:	f002 f89e 	bl	d758 <memcpy>
      ptr = aligned;
    b61c:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    b61e:	2301      	movs	r3, #1
    b620:	462a      	mov	r2, r5
    b622:	4631      	mov	r1, r6
    b624:	481d      	ldr	r0, [pc, #116]	; (b69c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    b626:	f7ff ff49 	bl	b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b62a:	4603      	mov	r3, r0
    b62c:	b930      	cbnz	r0, b63c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    b62e:	4a1c      	ldr	r2, [pc, #112]	; (b6a0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
    b630:	210d      	movs	r1, #13
    b632:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b634:	4a1b      	ldr	r2, [pc, #108]	; (b6a4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    b636:	f240 31f2 	movw	r1, #1010	; 0x3f2
    b63a:	6011      	str	r1, [r2, #0]
}
    b63c:	4618      	mov	r0, r3
    b63e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b642:	bd70      	pop	{r4, r5, r6, pc}
    b644:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b646:	f7ff fdc1 	bl	b1cc <waitTransferComplete()>
    b64a:	4603      	mov	r3, r0
    b64c:	2800      	cmp	r0, #0
    b64e:	d0f5      	beq.n	b63c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b650:	7a63      	ldrb	r3, [r4, #9]
    b652:	2b02      	cmp	r3, #2
    b654:	d01d      	beq.n	b692 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    b656:	6823      	ldr	r3, [r4, #0]
    b658:	6a1b      	ldr	r3, [r3, #32]
    b65a:	4620      	mov	r0, r4
    b65c:	4798      	blx	r3
    b65e:	4603      	mov	r3, r0
    b660:	2800      	cmp	r0, #0
    b662:	d0eb      	beq.n	b63c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    b664:	6823      	ldr	r3, [r4, #0]
    b666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b668:	4631      	mov	r1, r6
    b66a:	4620      	mov	r0, r4
    b66c:	4798      	blx	r3
    b66e:	4603      	mov	r3, r0
    b670:	2800      	cmp	r0, #0
    b672:	d0e3      	beq.n	b63c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
    b674:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    b676:	2302      	movs	r3, #2
    b678:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
    b67a:	6823      	ldr	r3, [r4, #0]
    b67c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b67e:	4629      	mov	r1, r5
    b680:	4620      	mov	r0, r4
    b682:	4798      	blx	r3
    b684:	4603      	mov	r3, r0
    b686:	2800      	cmp	r0, #0
    b688:	d0d8      	beq.n	b63c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    b68a:	6862      	ldr	r2, [r4, #4]
    b68c:	3201      	adds	r2, #1
    b68e:	6062      	str	r2, [r4, #4]
    b690:	e7d4      	b.n	b63c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b692:	6863      	ldr	r3, [r4, #4]
    b694:	42b3      	cmp	r3, r6
    b696:	d1de      	bne.n	b656 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    b698:	e7ef      	b.n	b67a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
    b69a:	bf00      	nop
    b69c:	183a0001 	.word	0x183a0001
    b6a0:	20003d44 	.word	0x20003d44
    b6a4:	20005090 	.word	0x20005090

0000b6a8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b6aa:	4606      	mov	r6, r0
    b6ac:	460c      	mov	r4, r1
    b6ae:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b6b0:	7a02      	ldrb	r2, [r0, #8]
    b6b2:	f012 0f01 	tst.w	r2, #1
    b6b6:	d112      	bne.n	b6de <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b6b8:	b17b      	cbz	r3, b6da <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    b6ba:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
    b6bc:	6833      	ldr	r3, [r6, #0]
    b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b6c0:	462a      	mov	r2, r5
    b6c2:	4621      	mov	r1, r4
    b6c4:	4630      	mov	r0, r6
    b6c6:	4798      	blx	r3
    b6c8:	4603      	mov	r3, r0
    b6ca:	b120      	cbz	r0, b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b6cc:	3401      	adds	r4, #1
    b6ce:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b6d2:	42a7      	cmp	r7, r4
    b6d4:	d1f2      	bne.n	b6bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
    b6d6:	4618      	mov	r0, r3
    b6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b6da:	2301      	movs	r3, #1
    b6dc:	e7fb      	b.n	b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
    b6de:	f015 0f03 	tst.w	r5, #3
    b6e2:	d010      	beq.n	b706 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b6e4:	b1f3      	cbz	r3, b724 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
    b6e6:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
    b6e8:	6833      	ldr	r3, [r6, #0]
    b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b6ec:	462a      	mov	r2, r5
    b6ee:	4621      	mov	r1, r4
    b6f0:	4630      	mov	r0, r6
    b6f2:	4798      	blx	r3
    b6f4:	4603      	mov	r3, r0
    b6f6:	2800      	cmp	r0, #0
    b6f8:	d0ed      	beq.n	b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b6fa:	3401      	adds	r4, #1
    b6fc:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b700:	42bc      	cmp	r4, r7
    b702:	d1f1      	bne.n	b6e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    b704:	e7e7      	b.n	b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b706:	462a      	mov	r2, r5
    b708:	4807      	ldr	r0, [pc, #28]	; (b728 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b70a:	f7ff fed7 	bl	b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b70e:	4603      	mov	r3, r0
    b710:	2800      	cmp	r0, #0
    b712:	d1e0      	bne.n	b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
    b714:	4a05      	ldr	r2, [pc, #20]	; (b72c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b716:	210e      	movs	r1, #14
    b718:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b71a:	4a05      	ldr	r2, [pc, #20]	; (b730 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
    b71c:	f240 411e 	movw	r1, #1054	; 0x41e
    b720:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    b722:	e7d8      	b.n	b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
    b724:	2301      	movs	r3, #1
    b726:	e7d6      	b.n	b6d6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    b728:	193a0027 	.word	0x193a0027
    b72c:	20003d44 	.word	0x20003d44
    b730:	20005090 	.word	0x20005090

0000b734 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b738:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
    b73a:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b73c:	2300      	movs	r3, #0
    b73e:	7243      	strb	r3, [r0, #9]
  m_initDone = false;
    b740:	4aae      	ldr	r2, [pc, #696]	; (b9fc <SdioCard::begin(SdioConfig)+0x2c8>)
    b742:	7013      	strb	r3, [r2, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    b744:	4aae      	ldr	r2, [pc, #696]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b746:	7013      	strb	r3, [r2, #0]
  m_highCapacity = false;
    b748:	4aae      	ldr	r2, [pc, #696]	; (ba04 <SdioCard::begin(SdioConfig)+0x2d0>)
    b74a:	7013      	strb	r3, [r2, #0]
  m_version2 = false;
    b74c:	4aae      	ldr	r2, [pc, #696]	; (ba08 <SdioCard::begin(SdioConfig)+0x2d4>)
    b74e:	7013      	strb	r3, [r2, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b750:	4bae      	ldr	r3, [pc, #696]	; (ba0c <SdioCard::begin(SdioConfig)+0x2d8>)
    b752:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b75a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    b75e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b762:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    b766:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b76a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b76e:	f042 0218 	orr.w	r2, r2, #24
    b772:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b776:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b77a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b77e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b782:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
    b786:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b78a:	f042 020c 	orr.w	r2, r2, #12
    b78e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b794:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b798:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b79a:	69da      	ldr	r2, [r3, #28]
    b79c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b7a0:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b7a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b7a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b7a8:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    b7aa:	2005      	movs	r0, #5
    b7ac:	f7ff faa2 	bl	acf4 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    b7b0:	4b97      	ldr	r3, [pc, #604]	; (ba10 <SdioCard::begin(SdioConfig)+0x2dc>)
    b7b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b7b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b7b8:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b7ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b7bc:	4a95      	ldr	r2, [pc, #596]	; (ba14 <SdioCard::begin(SdioConfig)+0x2e0>)
    b7be:	430a      	orrs	r2, r1
    b7c0:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b7c2:	461a      	mov	r2, r3
    b7c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b7c6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    b7ca:	d1fb      	bne.n	b7c4 <SdioCard::begin(SdioConfig)+0x90>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b7cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b7d0:	f7ff fae4 	bl	ad9c <setSdclk(unsigned long)>
    gpioMux(0);
    b7d4:	2000      	movs	r0, #0
    b7d6:	f7ff fa8d 	bl	acf4 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b7da:	4b8f      	ldr	r3, [pc, #572]	; (ba18 <SdioCard::begin(SdioConfig)+0x2e4>)
    b7dc:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b7e0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b7e4:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b7e8:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b7ec:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b7f0:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b7f4:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b7f8:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b7fc:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
    b800:	4a86      	ldr	r2, [pc, #536]	; (ba1c <SdioCard::begin(SdioConfig)+0x2e8>)
    b802:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b804:	4a86      	ldr	r2, [pc, #536]	; (ba20 <SdioCard::begin(SdioConfig)+0x2ec>)
    b806:	4987      	ldr	r1, [pc, #540]	; (ba24 <SdioCard::begin(SdioConfig)+0x2f0>)
    b808:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b80c:	4a86      	ldr	r2, [pc, #536]	; (ba28 <SdioCard::begin(SdioConfig)+0x2f4>)
    b80e:	2160      	movs	r1, #96	; 0x60
    b810:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b814:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b818:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b81c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b822:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    b826:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b828:	461a      	mov	r2, r3
    b82a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b82c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    b830:	d1fb      	bne.n	b82a <SdioCard::begin(SdioConfig)+0xf6>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b832:	2100      	movs	r1, #0
    b834:	4608      	mov	r0, r1
    b836:	f7ff fba5 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b83a:	4604      	mov	r4, r0
    b83c:	b950      	cbnz	r0, b854 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    b83e:	4b70      	ldr	r3, [pc, #448]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b840:	2201      	movs	r2, #1
    b842:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b844:	4b79      	ldr	r3, [pc, #484]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b846:	f240 228e 	movw	r2, #654	; 0x28e
    b84a:	601a      	str	r2, [r3, #0]
}
    b84c:	4620      	mov	r0, r4
    b84e:	b010      	add	sp, #64	; 0x40
    b850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b854:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b856:	4e76      	ldr	r6, [pc, #472]	; (ba30 <SdioCard::begin(SdioConfig)+0x2fc>)
    b858:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
    b85c:	4629      	mov	r1, r5
    b85e:	4630      	mov	r0, r6
    b860:	f7ff fb90 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b864:	b980      	cbnz	r0, b888 <SdioCard::begin(SdioConfig)+0x154>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b866:	3c01      	subs	r4, #1
    b868:	d1f8      	bne.n	b85c <SdioCard::begin(SdioConfig)+0x128>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b86a:	4b67      	ldr	r3, [pc, #412]	; (ba08 <SdioCard::begin(SdioConfig)+0x2d4>)
    b86c:	781b      	ldrb	r3, [r3, #0]
    b86e:	2b00      	cmp	r3, #0
    b870:	4d70      	ldr	r5, [pc, #448]	; (ba34 <SdioCard::begin(SdioConfig)+0x300>)
    b872:	bf08      	it	eq
    b874:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
    b878:	f001 feb0 	bl	d5dc <micros>
    b87c:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b87e:	4e6e      	ldr	r6, [pc, #440]	; (ba38 <SdioCard::begin(SdioConfig)+0x304>)
    b880:	f8df 81e8 	ldr.w	r8, [pc, #488]	; ba6c <SdioCard::begin(SdioConfig)+0x338>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b884:	4f6d      	ldr	r7, [pc, #436]	; (ba3c <SdioCard::begin(SdioConfig)+0x308>)
    b886:	e020      	b.n	b8ca <SdioCard::begin(SdioConfig)+0x196>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b888:	4b61      	ldr	r3, [pc, #388]	; (ba10 <SdioCard::begin(SdioConfig)+0x2dc>)
    b88a:	691b      	ldr	r3, [r3, #16]
    b88c:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b890:	d008      	beq.n	b8a4 <SdioCard::begin(SdioConfig)+0x170>
  m_errorCode = code;
    b892:	4b5b      	ldr	r3, [pc, #364]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b894:	2206      	movs	r2, #6
    b896:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b898:	4b64      	ldr	r3, [pc, #400]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b89a:	f44f 7225 	mov.w	r2, #660	; 0x294
    b89e:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b8a0:	2400      	movs	r4, #0
    b8a2:	e7d3      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
      m_version2 = true;
    b8a4:	4b58      	ldr	r3, [pc, #352]	; (ba08 <SdioCard::begin(SdioConfig)+0x2d4>)
    b8a6:	2201      	movs	r2, #1
    b8a8:	701a      	strb	r2, [r3, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b8aa:	4d62      	ldr	r5, [pc, #392]	; (ba34 <SdioCard::begin(SdioConfig)+0x300>)
    b8ac:	e7e4      	b.n	b878 <SdioCard::begin(SdioConfig)+0x144>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b8ae:	4629      	mov	r1, r5
    b8b0:	4640      	mov	r0, r8
    b8b2:	f7ff fb67 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b8b6:	b170      	cbz	r0, b8d6 <SdioCard::begin(SdioConfig)+0x1a2>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b8b8:	f001 fe90 	bl	d5dc <micros>
    b8bc:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b8be:	42b8      	cmp	r0, r7
    b8c0:	d809      	bhi.n	b8d6 <SdioCard::begin(SdioConfig)+0x1a2>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b8c2:	4b53      	ldr	r3, [pc, #332]	; (ba10 <SdioCard::begin(SdioConfig)+0x2dc>)
    b8c4:	691b      	ldr	r3, [r3, #16]
    b8c6:	2b00      	cmp	r3, #0
    b8c8:	db0e      	blt.n	b8e8 <SdioCard::begin(SdioConfig)+0x1b4>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b8ca:	2100      	movs	r1, #0
    b8cc:	4630      	mov	r0, r6
    b8ce:	f7ff fb59 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b8d2:	2800      	cmp	r0, #0
    b8d4:	d1eb      	bne.n	b8ae <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    b8d6:	4b4a      	ldr	r3, [pc, #296]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b8d8:	2217      	movs	r2, #23
    b8da:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b8dc:	4b53      	ldr	r3, [pc, #332]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b8de:	f240 229f 	movw	r2, #671	; 0x29f
    b8e2:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
    b8e4:	2400      	movs	r4, #0
    b8e6:	e7b1      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  m_ocr = SDHC_CMDRSP0;
    b8e8:	4b49      	ldr	r3, [pc, #292]	; (ba10 <SdioCard::begin(SdioConfig)+0x2dc>)
    b8ea:	6919      	ldr	r1, [r3, #16]
    b8ec:	4a54      	ldr	r2, [pc, #336]	; (ba40 <SdioCard::begin(SdioConfig)+0x30c>)
    b8ee:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b8f0:	691b      	ldr	r3, [r3, #16]
    b8f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b8f6:	d002      	beq.n	b8fe <SdioCard::begin(SdioConfig)+0x1ca>
    m_highCapacity = true;
    b8f8:	4b42      	ldr	r3, [pc, #264]	; (ba04 <SdioCard::begin(SdioConfig)+0x2d0>)
    b8fa:	2201      	movs	r2, #1
    b8fc:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b8fe:	2100      	movs	r1, #0
    b900:	4850      	ldr	r0, [pc, #320]	; (ba44 <SdioCard::begin(SdioConfig)+0x310>)
    b902:	f7ff fb3f 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b906:	4604      	mov	r4, r0
    b908:	b938      	cbnz	r0, b91a <SdioCard::begin(SdioConfig)+0x1e6>
  m_errorCode = code;
    b90a:	4b3d      	ldr	r3, [pc, #244]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b90c:	2202      	movs	r2, #2
    b90e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b910:	4b46      	ldr	r3, [pc, #280]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b912:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    b916:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b918:	e798      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b91a:	2100      	movs	r1, #0
    b91c:	484a      	ldr	r0, [pc, #296]	; (ba48 <SdioCard::begin(SdioConfig)+0x314>)
    b91e:	f7ff fb31 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b922:	4604      	mov	r4, r0
    b924:	b938      	cbnz	r0, b936 <SdioCard::begin(SdioConfig)+0x202>
  m_errorCode = code;
    b926:	4b36      	ldr	r3, [pc, #216]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b928:	2203      	movs	r2, #3
    b92a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b92c:	4b3f      	ldr	r3, [pc, #252]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b92e:	f240 22ab 	movw	r2, #683	; 0x2ab
    b932:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b934:	e78a      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b936:	4b36      	ldr	r3, [pc, #216]	; (ba10 <SdioCard::begin(SdioConfig)+0x2dc>)
    b938:	691a      	ldr	r2, [r3, #16]
    b93a:	4b44      	ldr	r3, [pc, #272]	; (ba4c <SdioCard::begin(SdioConfig)+0x318>)
    b93c:	4013      	ands	r3, r2
    b93e:	4a44      	ldr	r2, [pc, #272]	; (ba50 <SdioCard::begin(SdioConfig)+0x31c>)
    b940:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b942:	4944      	ldr	r1, [pc, #272]	; (ba54 <SdioCard::begin(SdioConfig)+0x320>)
    b944:	4844      	ldr	r0, [pc, #272]	; (ba58 <SdioCard::begin(SdioConfig)+0x324>)
    b946:	f7ff fb5b 	bl	b000 <readReg16(unsigned long, void*)>
    b94a:	4604      	mov	r4, r0
    b94c:	b938      	cbnz	r0, b95e <SdioCard::begin(SdioConfig)+0x22a>
  m_errorCode = code;
    b94e:	4b2c      	ldr	r3, [pc, #176]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b950:	2207      	movs	r2, #7
    b952:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b954:	4b35      	ldr	r3, [pc, #212]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b956:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    b95a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b95c:	e776      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b95e:	493f      	ldr	r1, [pc, #252]	; (ba5c <SdioCard::begin(SdioConfig)+0x328>)
    b960:	483f      	ldr	r0, [pc, #252]	; (ba60 <SdioCard::begin(SdioConfig)+0x32c>)
    b962:	f7ff fb4d 	bl	b000 <readReg16(unsigned long, void*)>
    b966:	4604      	mov	r4, r0
    b968:	b938      	cbnz	r0, b97a <SdioCard::begin(SdioConfig)+0x246>
  m_errorCode = code;
    b96a:	4b25      	ldr	r3, [pc, #148]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b96c:	2208      	movs	r2, #8
    b96e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b970:	4b2e      	ldr	r3, [pc, #184]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b972:	f240 22b3 	movw	r2, #691	; 0x2b3
    b976:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b978:	e768      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b97a:	4b35      	ldr	r3, [pc, #212]	; (ba50 <SdioCard::begin(SdioConfig)+0x31c>)
    b97c:	6819      	ldr	r1, [r3, #0]
    b97e:	4839      	ldr	r0, [pc, #228]	; (ba64 <SdioCard::begin(SdioConfig)+0x330>)
    b980:	f7ff fb00 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b984:	4604      	mov	r4, r0
    b986:	b938      	cbnz	r0, b998 <SdioCard::begin(SdioConfig)+0x264>
  m_errorCode = code;
    b988:	4b1d      	ldr	r3, [pc, #116]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b98a:	2205      	movs	r2, #5
    b98c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b98e:	4b27      	ldr	r3, [pc, #156]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b990:	f240 22b6 	movw	r2, #694	; 0x2b6
    b994:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b996:	e759      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b998:	4b2d      	ldr	r3, [pc, #180]	; (ba50 <SdioCard::begin(SdioConfig)+0x31c>)
    b99a:	6819      	ldr	r1, [r3, #0]
    b99c:	4826      	ldr	r0, [pc, #152]	; (ba38 <SdioCard::begin(SdioConfig)+0x304>)
    b99e:	f7ff faf1 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    b9a2:	b940      	cbnz	r0, b9b6 <SdioCard::begin(SdioConfig)+0x282>
  m_errorCode = code;
    b9a4:	4b16      	ldr	r3, [pc, #88]	; (ba00 <SdioCard::begin(SdioConfig)+0x2cc>)
    b9a6:	2214      	movs	r2, #20
    b9a8:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b9aa:	4b20      	ldr	r3, [pc, #128]	; (ba2c <SdioCard::begin(SdioConfig)+0x2f8>)
    b9ac:	f240 22ba 	movw	r2, #698	; 0x2ba
    b9b0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b9b2:	2400      	movs	r4, #0
    b9b4:	e74a      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b9b6:	2102      	movs	r1, #2
    b9b8:	482b      	ldr	r0, [pc, #172]	; (ba68 <SdioCard::begin(SdioConfig)+0x334>)
    b9ba:	f7ff fae3 	bl	af84 <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    b9be:	4604      	mov	r4, r0
    b9c0:	2800      	cmp	r0, #0
    b9c2:	d0ef      	beq.n	b9a4 <SdioCard::begin(SdioConfig)+0x270>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b9c4:	4b12      	ldr	r3, [pc, #72]	; (ba10 <SdioCard::begin(SdioConfig)+0x2dc>)
    b9c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b9c8:	f022 0206 	bic.w	r2, r2, #6
    b9cc:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b9ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b9d0:	f042 0202 	orr.w	r2, r2, #2
    b9d4:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b9d6:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    b9da:	645a      	str	r2, [r3, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b9dc:	4669      	mov	r1, sp
    b9de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    b9e2:	f7ff fca3 	bl	b32c <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b9e6:	2800      	cmp	r0, #0
    b9e8:	d053      	beq.n	ba92 <SdioCard::begin(SdioConfig)+0x35e>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b9ea:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b9ee:	f013 0f02 	tst.w	r3, #2
    b9f2:	d13d      	bne.n	ba70 <SdioCard::begin(SdioConfig)+0x33c>
    kHzSdClk = 25000;
    b9f4:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b9f8:	e04d      	b.n	ba96 <SdioCard::begin(SdioConfig)+0x362>
    b9fa:	bf00      	nop
    b9fc:	2000582f 	.word	0x2000582f
    ba00:	20003d44 	.word	0x20003d44
    ba04:	20005831 	.word	0x20005831
    ba08:	20005830 	.word	0x20005830
    ba0c:	400d8000 	.word	0x400d8000
    ba10:	402c0000 	.word	0x402c0000
    ba14:	01008000 	.word	0x01008000
    ba18:	401f8000 	.word	0x401f8000
    ba1c:	117f000b 	.word	0x117f000b
    ba20:	20004000 	.word	0x20004000
    ba24:	0000acc9 	.word	0x0000acc9
    ba28:	e000e400 	.word	0xe000e400
    ba2c:	20005090 	.word	0x20005090
    ba30:	081a0000 	.word	0x081a0000
    ba34:	40300000 	.word	0x40300000
    ba38:	371a0000 	.word	0x371a0000
    ba3c:	000f4240 	.word	0x000f4240
    ba40:	200050b4 	.word	0x200050b4
    ba44:	02090000 	.word	0x02090000
    ba48:	031a0000 	.word	0x031a0000
    ba4c:	ffff0000 	.word	0xffff0000
    ba50:	200050b8 	.word	0x200050b8
    ba54:	200050a4 	.word	0x200050a4
    ba58:	09090000 	.word	0x09090000
    ba5c:	20005094 	.word	0x20005094
    ba60:	0a090000 	.word	0x0a090000
    ba64:	071b0000 	.word	0x071b0000
    ba68:	061a0000 	.word	0x061a0000
    ba6c:	29020000 	.word	0x29020000
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    ba70:	4669      	mov	r1, sp
    ba72:	4819      	ldr	r0, [pc, #100]	; (bad8 <SdioCard::begin(SdioConfig)+0x3a4>)
    ba74:	f7ff fc5a 	bl	b32c <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    ba78:	b358      	cbz	r0, bad2 <SdioCard::begin(SdioConfig)+0x39e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    ba7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ba7e:	f003 030f 	and.w	r3, r3, #15
    kHzSdClk = 25000;
    ba82:	f24c 3550 	movw	r5, #50000	; 0xc350
    ba86:	f246 12a8 	movw	r2, #25000	; 0x61a8
    ba8a:	2b01      	cmp	r3, #1
    ba8c:	bf18      	it	ne
    ba8e:	4615      	movne	r5, r2
    ba90:	e001      	b.n	ba96 <SdioCard::begin(SdioConfig)+0x362>
    ba92:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
    ba96:	2005      	movs	r0, #5
    ba98:	f7ff f92c 	bl	acf4 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    ba9c:	4628      	mov	r0, r5
    ba9e:	f7ff f97d 	bl	ad9c <setSdclk(unsigned long)>
    gpioMux(0);
    baa2:	2000      	movs	r0, #0
    baa4:	f7ff f926 	bl	acf4 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    baa8:	4b0c      	ldr	r3, [pc, #48]	; (badc <SdioCard::begin(SdioConfig)+0x3a8>)
    baaa:	f247 02b8 	movw	r2, #28856	; 0x70b8
    baae:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    bab2:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    bab6:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    baba:	f241 01b8 	movw	r1, #4280	; 0x10b8
    babe:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    bac2:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    bac6:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
    baca:	4b05      	ldr	r3, [pc, #20]	; (bae0 <SdioCard::begin(SdioConfig)+0x3ac>)
    bacc:	2201      	movs	r2, #1
    bace:	701a      	strb	r2, [r3, #0]
  return true;
    bad0:	e6bc      	b.n	b84c <SdioCard::begin(SdioConfig)+0x118>
    kHzSdClk = 25000;
    bad2:	f246 15a8 	movw	r5, #25000	; 0x61a8
    bad6:	e7de      	b.n	ba96 <SdioCard::begin(SdioConfig)+0x362>
    bad8:	80fffff1 	.word	0x80fffff1
    badc:	401f8000 	.word	0x401f8000
    bae0:	2000582f 	.word	0x2000582f

0000bae4 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    bae4:	b538      	push	{r3, r4, r5, lr}
    bae6:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    bae8:	4b2b      	ldr	r3, [pc, #172]	; (bb98 <SdioCard::readData(unsigned char*)+0xb4>)
    baea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    baec:	f413 7f00 	tst.w	r3, #512	; 0x200
    baf0:	d10e      	bne.n	bb10 <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    baf2:	4b29      	ldr	r3, [pc, #164]	; (bb98 <SdioCard::readData(unsigned char*)+0xb4>)
    baf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    baf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    bafa:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    bafc:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    bafe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bb00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bb04:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bb06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bb08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    bb0c:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    bb0e:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    bb10:	4822      	ldr	r0, [pc, #136]	; (bb9c <SdioCard::readData(unsigned char*)+0xb8>)
    bb12:	f7ff fa25 	bl	af60 <waitTimeout(bool (*)())>
    bb16:	4605      	mov	r5, r0
    bb18:	b148      	cbz	r0, bb2e <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
    bb1a:	4b21      	ldr	r3, [pc, #132]	; (bba0 <SdioCard::readData(unsigned char*)+0xbc>)
    bb1c:	221a      	movs	r2, #26
    bb1e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bb20:	4b20      	ldr	r3, [pc, #128]	; (bba4 <SdioCard::readData(unsigned char*)+0xc0>)
    bb22:	f240 3237 	movw	r2, #823	; 0x337
    bb26:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    bb28:	2500      	movs	r5, #0
}
    bb2a:	4628      	mov	r0, r5
    bb2c:	bd38      	pop	{r3, r4, r5, pc}
    bb2e:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
    bb32:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    bb36:	4818      	ldr	r0, [pc, #96]	; (bb98 <SdioCard::readData(unsigned char*)+0xb4>)
    bb38:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bb3a:	f413 6f00 	tst.w	r3, #2048	; 0x800
    bb3e:	d0fb      	beq.n	bb38 <SdioCard::readData(unsigned char*)+0x54>
    bb40:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    bb44:	6a02      	ldr	r2, [r0, #32]
    bb46:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    bb4a:	4563      	cmp	r3, ip
    bb4c:	d1fa      	bne.n	bb44 <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    bb4e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    bb52:	458c      	cmp	ip, r1
    bb54:	d1f0      	bne.n	bb38 <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
    bb56:	4814      	ldr	r0, [pc, #80]	; (bba8 <SdioCard::readData(unsigned char*)+0xc4>)
    bb58:	f7ff fa02 	bl	af60 <waitTimeout(bool (*)())>
    bb5c:	4601      	mov	r1, r0
    bb5e:	b138      	cbz	r0, bb70 <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
    bb60:	4b0f      	ldr	r3, [pc, #60]	; (bba0 <SdioCard::readData(unsigned char*)+0xbc>)
    bb62:	221d      	movs	r2, #29
    bb64:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bb66:	4b0f      	ldr	r3, [pc, #60]	; (bba4 <SdioCard::readData(unsigned char*)+0xc0>)
    bb68:	f240 3242 	movw	r2, #834	; 0x342
    bb6c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    bb6e:	e7dc      	b.n	bb2a <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
    bb70:	4a09      	ldr	r2, [pc, #36]	; (bb98 <SdioCard::readData(unsigned char*)+0xb4>)
    bb72:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bb74:	4b0d      	ldr	r3, [pc, #52]	; (bbac <SdioCard::readData(unsigned char*)+0xc8>)
    bb76:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bb78:	6818      	ldr	r0, [r3, #0]
    bb7a:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bb7c:	681b      	ldr	r3, [r3, #0]
    bb7e:	f013 0f02 	tst.w	r3, #2
    bb82:	d007      	beq.n	bb94 <SdioCard::readData(unsigned char*)+0xb0>
    bb84:	4b09      	ldr	r3, [pc, #36]	; (bbac <SdioCard::readData(unsigned char*)+0xc8>)
    bb86:	681a      	ldr	r2, [r3, #0]
    bb88:	4b09      	ldr	r3, [pc, #36]	; (bbb0 <SdioCard::readData(unsigned char*)+0xcc>)
    bb8a:	421a      	tst	r2, r3
    bb8c:	bf0c      	ite	eq
    bb8e:	2501      	moveq	r5, #1
    bb90:	2500      	movne	r5, #0
    bb92:	e7ca      	b.n	bb2a <SdioCard::readData(unsigned char*)+0x46>
    bb94:	460d      	mov	r5, r1
    bb96:	e7c8      	b.n	bb2a <SdioCard::readData(unsigned char*)+0x46>
    bb98:	402c0000 	.word	0x402c0000
    bb9c:	0000ad5d 	.word	0x0000ad5d
    bba0:	20003d44 	.word	0x20003d44
    bba4:	20005090 	.word	0x20005090
    bba8:	0000ad85 	.word	0x0000ad85
    bbac:	200050c0 	.word	0x200050c0
    bbb0:	117f0000 	.word	0x117f0000

0000bbb4 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    bbb4:	b510      	push	{r4, lr}
    bbb6:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    bbb8:	4813      	ldr	r0, [pc, #76]	; (bc08 <SdioCard::readStart(unsigned long)+0x54>)
    bbba:	f7ff fb81 	bl	b2c0 <yieldTimeout(bool (*)())>
    bbbe:	b140      	cbz	r0, bbd2 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    bbc0:	4b12      	ldr	r3, [pc, #72]	; (bc0c <SdioCard::readStart(unsigned long)+0x58>)
    bbc2:	220a      	movs	r2, #10
    bbc4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bbc6:	4b12      	ldr	r3, [pc, #72]	; (bc10 <SdioCard::readStart(unsigned long)+0x5c>)
    bbc8:	f240 3292 	movw	r2, #914	; 0x392
    bbcc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    bbce:	2000      	movs	r0, #0
}
    bbd0:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bbd2:	4b10      	ldr	r3, [pc, #64]	; (bc14 <SdioCard::readStart(unsigned long)+0x60>)
    bbd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bbd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    bbda:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bbdc:	f44f 7200 	mov.w	r2, #512	; 0x200
    bbe0:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bbe2:	4b0d      	ldr	r3, [pc, #52]	; (bc18 <SdioCard::readStart(unsigned long)+0x64>)
    bbe4:	781b      	ldrb	r3, [r3, #0]
    bbe6:	b903      	cbnz	r3, bbea <SdioCard::readStart(unsigned long)+0x36>
    bbe8:	0264      	lsls	r4, r4, #9
    bbea:	4621      	mov	r1, r4
    bbec:	480b      	ldr	r0, [pc, #44]	; (bc1c <SdioCard::readStart(unsigned long)+0x68>)
    bbee:	f7ff f9c9 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    bbf2:	2800      	cmp	r0, #0
    bbf4:	d1ec      	bne.n	bbd0 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    bbf6:	4b05      	ldr	r3, [pc, #20]	; (bc0c <SdioCard::readStart(unsigned long)+0x58>)
    bbf8:	220c      	movs	r2, #12
    bbfa:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bbfc:	4b04      	ldr	r3, [pc, #16]	; (bc10 <SdioCard::readStart(unsigned long)+0x5c>)
    bbfe:	f240 329e 	movw	r2, #926	; 0x39e
    bc02:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    bc04:	e7e4      	b.n	bbd0 <SdioCard::readStart(unsigned long)+0x1c>
    bc06:	bf00      	nop
    bc08:	0000b099 	.word	0x0000b099
    bc0c:	20003d44 	.word	0x20003d44
    bc10:	20005090 	.word	0x20005090
    bc14:	402c0000 	.word	0x402c0000
    bc18:	20005831 	.word	0x20005831
    bc1c:	123a0030 	.word	0x123a0030

0000bc20 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    bc20:	b570      	push	{r4, r5, r6, lr}
    bc22:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    bc26:	460e      	mov	r6, r1
    bc28:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    bc2a:	7a03      	ldrb	r3, [r0, #8]
    bc2c:	f013 0f01 	tst.w	r3, #1
    bc30:	d013      	beq.n	bc5a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    bc32:	f012 0f03 	tst.w	r2, #3
    bc36:	d135      	bne.n	bca4 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    bc38:	2301      	movs	r3, #1
    bc3a:	4822      	ldr	r0, [pc, #136]	; (bcc4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    bc3c:	f7ff fc3e 	bl	b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bc40:	2800      	cmp	r0, #0
    bc42:	d13c      	bne.n	bcbe <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
    bc44:	4b20      	ldr	r3, [pc, #128]	; (bcc8 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    bc46:	220b      	movs	r2, #11
    bc48:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bc4a:	4b20      	ldr	r3, [pc, #128]	; (bccc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    bc4c:	f240 3255 	movw	r2, #853	; 0x355
    bc50:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    bc52:	2000      	movs	r0, #0
}
    bc54:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bc58:	bd70      	pop	{r4, r5, r6, pc}
    bc5a:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    bc5c:	f7ff fab6 	bl	b1cc <waitTransferComplete()>
    bc60:	2800      	cmp	r0, #0
    bc62:	d0f7      	beq.n	bc54 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    bc64:	7a63      	ldrb	r3, [r4, #9]
    bc66:	2b01      	cmp	r3, #1
    bc68:	d018      	beq.n	bc9c <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    bc6a:	6823      	ldr	r3, [r4, #0]
    bc6c:	6a1b      	ldr	r3, [r3, #32]
    bc6e:	4620      	mov	r0, r4
    bc70:	4798      	blx	r3
    bc72:	2800      	cmp	r0, #0
    bc74:	d0ee      	beq.n	bc54 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    bc76:	4631      	mov	r1, r6
    bc78:	4620      	mov	r0, r4
    bc7a:	f7ff ff9b 	bl	bbb4 <SdioCard::readStart(unsigned long)>
    bc7e:	2800      	cmp	r0, #0
    bc80:	d0e8      	beq.n	bc54 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
    bc82:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    bc84:	2301      	movs	r3, #1
    bc86:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    bc88:	4629      	mov	r1, r5
    bc8a:	4620      	mov	r0, r4
    bc8c:	f7ff ff2a 	bl	bae4 <SdioCard::readData(unsigned char*)>
    bc90:	2800      	cmp	r0, #0
    bc92:	d0df      	beq.n	bc54 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    bc94:	6863      	ldr	r3, [r4, #4]
    bc96:	3301      	adds	r3, #1
    bc98:	6063      	str	r3, [r4, #4]
    bc9a:	e7db      	b.n	bc54 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    bc9c:	6863      	ldr	r3, [r4, #4]
    bc9e:	42b3      	cmp	r3, r6
    bca0:	d1e3      	bne.n	bc6a <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    bca2:	e7f1      	b.n	bc88 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    bca4:	2301      	movs	r3, #1
    bca6:	466a      	mov	r2, sp
    bca8:	4806      	ldr	r0, [pc, #24]	; (bcc4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    bcaa:	f7ff fc07 	bl	b4bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bcae:	2800      	cmp	r0, #0
    bcb0:	d0c8      	beq.n	bc44 <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
    bcb2:	f44f 7200 	mov.w	r2, #512	; 0x200
    bcb6:	4669      	mov	r1, sp
    bcb8:	4628      	mov	r0, r5
    bcba:	f001 fd4d 	bl	d758 <memcpy>
  return true;
    bcbe:	2001      	movs	r0, #1
    bcc0:	e7c8      	b.n	bc54 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    bcc2:	bf00      	nop
    bcc4:	113a0011 	.word	0x113a0011
    bcc8:	20003d44 	.word	0x20003d44
    bccc:	20005090 	.word	0x20005090

0000bcd0 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    bcd0:	b510      	push	{r4, lr}
    bcd2:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
    bcd4:	2100      	movs	r1, #0
    bcd6:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bcd8:	4a10      	ldr	r2, [pc, #64]	; (bd1c <SdioCard::stopTransmission(bool)+0x4c>)
    bcda:	6a93      	ldr	r3, [r2, #40]	; 0x28
    bcdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bce0:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bce2:	480f      	ldr	r0, [pc, #60]	; (bd20 <SdioCard::stopTransmission(bool)+0x50>)
    bce4:	f7ff f94e 	bl	af84 <cardCommand(unsigned long, unsigned long)>
    bce8:	b938      	cbnz	r0, bcfa <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
    bcea:	4b0e      	ldr	r3, [pc, #56]	; (bd24 <SdioCard::stopTransmission(bool)+0x54>)
    bcec:	2209      	movs	r2, #9
    bcee:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bcf0:	4b0d      	ldr	r3, [pc, #52]	; (bd28 <SdioCard::stopTransmission(bool)+0x58>)
    bcf2:	f44f 726d 	mov.w	r2, #948	; 0x3b4
    bcf6:	601a      	str	r2, [r3, #0]
}
    bcf8:	bd10      	pop	{r4, pc}
  if (blocking) {
    bcfa:	2c00      	cmp	r4, #0
    bcfc:	d0fc      	beq.n	bcf8 <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
    bcfe:	480b      	ldr	r0, [pc, #44]	; (bd2c <SdioCard::stopTransmission(bool)+0x5c>)
    bd00:	f7ff fade 	bl	b2c0 <yieldTimeout(bool (*)())>
    bd04:	b140      	cbz	r0, bd18 <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
    bd06:	4b07      	ldr	r3, [pc, #28]	; (bd24 <SdioCard::stopTransmission(bool)+0x54>)
    bd08:	220a      	movs	r2, #10
    bd0a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    bd0c:	4b06      	ldr	r3, [pc, #24]	; (bd28 <SdioCard::stopTransmission(bool)+0x58>)
    bd0e:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    bd12:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    bd14:	2000      	movs	r0, #0
    bd16:	e7ef      	b.n	bcf8 <SdioCard::stopTransmission(bool)+0x28>
  return true;
    bd18:	4620      	mov	r0, r4
    bd1a:	e7ed      	b.n	bcf8 <SdioCard::stopTransmission(bool)+0x28>
    bd1c:	402c0000 	.word	0x402c0000
    bd20:	0cdb0000 	.word	0x0cdb0000
    bd24:	20003d44 	.word	0x20003d44
    bd28:	20005090 	.word	0x20005090
    bd2c:	0000ad3d 	.word	0x0000ad3d

0000bd30 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    bd30:	b510      	push	{r4, lr}
    bd32:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
    bd34:	f7ff fa4a 	bl	b1cc <waitTransferComplete()>
    bd38:	b108      	cbz	r0, bd3e <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
    bd3a:	7a63      	ldrb	r3, [r4, #9]
    bd3c:	b903      	cbnz	r3, bd40 <SdioCard::syncDevice()+0x10>
}
    bd3e:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
    bd40:	2101      	movs	r1, #1
    bd42:	4620      	mov	r0, r4
    bd44:	f7ff ffc4 	bl	bcd0 <SdioCard::stopTransmission(bool)>
    bd48:	e7f9      	b.n	bd3e <SdioCard::syncDevice()+0xe>

0000bd4a <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
    bd4a:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
    bd4c:	2101      	movs	r1, #1
    bd4e:	f001 fcbd 	bl	d6cc <pinMode>
}
    bd52:	bd08      	pop	{r3, pc}

0000bd54 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
    bd54:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
    bd56:	f001 fc81 	bl	d65c <digitalWrite>
}
    bd5a:	bd08      	pop	{r3, pc}

0000bd5c <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    bd5c:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
    bd5e:	6803      	ldr	r3, [r0, #0]
    bd60:	6842      	ldr	r2, [r0, #4]
    bd62:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
    bd64:	7cd9      	ldrb	r1, [r3, #19]
    bd66:	2900      	cmp	r1, #0
    bd68:	d042      	beq.n	bdf0 <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
    bd6a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    bd6c:	7cd9      	ldrb	r1, [r3, #19]
    bd6e:	f011 0f01 	tst.w	r1, #1
    bd72:	d008      	beq.n	bd86 <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    bd74:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bd78:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
    bd7c:	695d      	ldr	r5, [r3, #20]
    bd7e:	4029      	ands	r1, r5
    bd80:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    bd82:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    bd86:	7cd9      	ldrb	r1, [r3, #19]
    bd88:	f011 0f02 	tst.w	r1, #2
    bd8c:	d008      	beq.n	bda0 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    bd8e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bd92:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    bd96:	699d      	ldr	r5, [r3, #24]
    bd98:	4029      	ands	r1, r5
    bd9a:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    bd9c:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    bda0:	7cd9      	ldrb	r1, [r3, #19]
    bda2:	f011 0f04 	tst.w	r1, #4
    bda6:	d008      	beq.n	bdba <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    bda8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bdac:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    bdb0:	69dd      	ldr	r5, [r3, #28]
    bdb2:	4029      	ands	r1, r5
    bdb4:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    bdb6:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    bdba:	7cd9      	ldrb	r1, [r3, #19]
    bdbc:	f011 0f08 	tst.w	r1, #8
    bdc0:	d008      	beq.n	bdd4 <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    bdc2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bdc6:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    bdca:	6a1d      	ldr	r5, [r3, #32]
    bdcc:	4029      	ands	r1, r5
    bdce:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    bdd0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    bdd4:	7cd9      	ldrb	r1, [r3, #19]
    bdd6:	f011 0f10 	tst.w	r1, #16
    bdda:	d008      	beq.n	bdee <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    bddc:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bde0:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    bde4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bde6:	4029      	ands	r1, r5
    bde8:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    bdea:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
    bdee:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    bdf0:	6899      	ldr	r1, [r3, #8]
    bdf2:	428a      	cmp	r2, r1
    bdf4:	d025      	beq.n	be42 <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
    bdf6:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    bdf8:	4920      	ldr	r1, [pc, #128]	; (be7c <SdSpiArduinoDriver::activate()+0x120>)
    bdfa:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    bdfc:	f3c1 1501 	ubfx	r5, r1, #4, #2
    be00:	481f      	ldr	r0, [pc, #124]	; (be80 <SdSpiArduinoDriver::activate()+0x124>)
    be02:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    be06:	f3c1 6182 	ubfx	r1, r1, #26, #3
    be0a:	3101      	adds	r1, #1
    be0c:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    be10:	b37a      	cbz	r2, be72 <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
    be12:	4282      	cmp	r2, r0
    be14:	d82b      	bhi.n	be6e <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
    be16:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
    be1a:	fbb0 f0f1 	udiv	r0, r0, r1
    be1e:	4282      	cmp	r2, r0
    be20:	d31f      	bcc.n	be62 <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
    be22:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    be26:	d31e      	bcc.n	be66 <SdSpiArduinoDriver::activate()+0x10a>
    be28:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
    be2c:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    be2e:	0850      	lsrs	r0, r2, #1
    be30:	0201      	lsls	r1, r0, #8
    be32:	b289      	uxth	r1, r1
    be34:	0400      	lsls	r0, r0, #16
    be36:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    be3a:	4301      	orrs	r1, r0
    be3c:	b2d2      	uxtb	r2, r2
    be3e:	430a      	orrs	r2, r1
    be40:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    be42:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
    be44:	2100      	movs	r1, #0
    be46:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    be48:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    be4a:	2103      	movs	r1, #3
    be4c:	6251      	str	r1, [r2, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    be4e:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
    be50:	68d9      	ldr	r1, [r3, #12]
    be52:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    be54:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
    be56:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    be58:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
    be5a:	2201      	movs	r2, #1
    be5c:	611a      	str	r2, [r3, #16]
}
    be5e:	bc30      	pop	{r4, r5}
    be60:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
    be62:	4608      	mov	r0, r1
    be64:	e007      	b.n	be76 <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
    be66:	2902      	cmp	r1, #2
    be68:	d8e0      	bhi.n	be2c <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
    be6a:	2200      	movs	r2, #0
    be6c:	e7df      	b.n	be2e <SdSpiArduinoDriver::activate()+0xd2>
    be6e:	2200      	movs	r2, #0
    be70:	e7dd      	b.n	be2e <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
    be72:	428d      	cmp	r5, r1
    be74:	d3db      	bcc.n	be2e <SdSpiArduinoDriver::activate()+0xd2>
    be76:	1c41      	adds	r1, r0, #1
    be78:	e7d3      	b.n	be22 <SdSpiArduinoDriver::activate()+0xc6>
    be7a:	bf00      	nop
    be7c:	400fc000 	.word	0x400fc000
    be80:	200028ec 	.word	0x200028ec

0000be84 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    be84:	b500      	push	{lr}
    be86:	b085      	sub	sp, #20
    be88:	4684      	mov	ip, r0
    be8a:	a804      	add	r0, sp, #16
    be8c:	e900 000e 	stmdb	r0, {r1, r2, r3}
    be90:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
    be92:	b133      	cbz	r3, bea2 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    be94:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    be98:	f7f9 f836 	bl	4f08 <SPIClass::begin()>
}
    be9c:	b005      	add	sp, #20
    be9e:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
    bea2:	4801      	ldr	r0, [pc, #4]	; (bea8 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    bea4:	e7f6      	b.n	be94 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    bea6:	bf00      	nop
    bea8:	20004b00 	.word	0x20004b00

0000beac <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    beac:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    beae:	7cda      	ldrb	r2, [r3, #19]
    beb0:	b35a      	cbz	r2, bf0a <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    beb2:	f012 0f01 	tst.w	r2, #1
    beb6:	d004      	beq.n	bec2 <SdSpiArduinoDriver::deactivate()+0x16>
    beb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    beba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bebe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    bec2:	7cda      	ldrb	r2, [r3, #19]
    bec4:	f012 0f02 	tst.w	r2, #2
    bec8:	d004      	beq.n	bed4 <SdSpiArduinoDriver::deactivate()+0x28>
    beca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    becc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bed0:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bed4:	7cda      	ldrb	r2, [r3, #19]
    bed6:	f012 0f04 	tst.w	r2, #4
    beda:	d004      	beq.n	bee6 <SdSpiArduinoDriver::deactivate()+0x3a>
    bedc:	6b19      	ldr	r1, [r3, #48]	; 0x30
    bede:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bee2:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bee6:	7cda      	ldrb	r2, [r3, #19]
    bee8:	f012 0f08 	tst.w	r2, #8
    beec:	d004      	beq.n	bef8 <SdSpiArduinoDriver::deactivate()+0x4c>
    beee:	6b59      	ldr	r1, [r3, #52]	; 0x34
    bef0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bef4:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bef8:	7cda      	ldrb	r2, [r3, #19]
    befa:	f012 0f10 	tst.w	r2, #16
    befe:	d004      	beq.n	bf0a <SdSpiArduinoDriver::deactivate()+0x5e>
    bf00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bf02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bf06:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bf0a:	4770      	bx	lr

0000bf0c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
    bf0c:	b508      	push	{r3, lr}
  m_spi->end();
    bf0e:	6800      	ldr	r0, [r0, #0]
    bf10:	f7f9 f971 	bl	51f6 <SPIClass::end()>
}
    bf14:	bd08      	pop	{r3, pc}

0000bf16 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    bf16:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf18:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bf1a:	21ff      	movs	r1, #255	; 0xff
    bf1c:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf1e:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bf20:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bf22:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bf26:	d0fb      	beq.n	bf20 <SdSpiArduinoDriver::receive()+0xa>
    bf28:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
    bf2a:	b2c0      	uxtb	r0, r0
    bf2c:	4770      	bx	lr

0000bf2e <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bf2e:	b570      	push	{r4, r5, r6, lr}
    bf30:	4605      	mov	r5, r0
    bf32:	460c      	mov	r4, r1
    bf34:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bf36:	21ff      	movs	r1, #255	; 0xff
    bf38:	4620      	mov	r0, r4
    bf3a:	f005 fcd7 	bl	118ec <memset>
		transfer(buf, buf, count);
    bf3e:	4633      	mov	r3, r6
    bf40:	4622      	mov	r2, r4
    bf42:	4621      	mov	r1, r4
    bf44:	6828      	ldr	r0, [r5, #0]
    bf46:	f7f9 f917 	bl	5178 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bf4a:	2000      	movs	r0, #0
    bf4c:	bd70      	pop	{r4, r5, r6, pc}

0000bf4e <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    bf4e:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf50:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bf52:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf54:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bf56:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bf58:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bf5c:	d0fb      	beq.n	bf56 <SdSpiArduinoDriver::send(unsigned char)+0x8>
    bf5e:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    bf60:	4770      	bx	lr

0000bf62 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bf62:	b530      	push	{r4, r5, lr}
    bf64:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bf68:	4604      	mov	r4, r0
    bf6a:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bf6c:	1e53      	subs	r3, r2, #1
    bf6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bf72:	d313      	bcc.n	bf9c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bf74:	b17a      	cbz	r2, bf96 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
    bf76:	3901      	subs	r1, #1
    bf78:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
    bf7c:	6823      	ldr	r3, [r4, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf7e:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bf80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    bf84:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf86:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bf88:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bf8a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bf8e:	d0fb      	beq.n	bf88 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
    bf90:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
    bf92:	4561      	cmp	r1, ip
    bf94:	d1f2      	bne.n	bf7c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
    bf96:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bf9a:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    bf9c:	4668      	mov	r0, sp
    bf9e:	f001 fbdb 	bl	d758 <memcpy>
		transfer(buf, buf, count);
    bfa2:	462b      	mov	r3, r5
    bfa4:	466a      	mov	r2, sp
    bfa6:	4669      	mov	r1, sp
    bfa8:	6820      	ldr	r0, [r4, #0]
    bfaa:	f7f9 f8e5 	bl	5178 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
    bfae:	e7f2      	b.n	bf96 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

0000bfb0 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    bfb0:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    bfb2:	7803      	ldrb	r3, [r0, #0]
    bfb4:	f013 0f01 	tst.w	r3, #1
    bfb8:	d01c      	beq.n	bff4 <FsCache::sync()+0x44>
    bfba:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    bfbc:	6840      	ldr	r0, [r0, #4]
    bfbe:	f104 0610 	add.w	r6, r4, #16
    bfc2:	6803      	ldr	r3, [r0, #0]
    bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bfc6:	4632      	mov	r2, r6
    bfc8:	68e1      	ldr	r1, [r4, #12]
    bfca:	4798      	blx	r3
    bfcc:	4605      	mov	r5, r0
    bfce:	b190      	cbz	r0, bff6 <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    bfd0:	7823      	ldrb	r3, [r4, #0]
    bfd2:	f013 0f02 	tst.w	r3, #2
    bfd6:	d008      	beq.n	bfea <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bfd8:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    bfda:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bfdc:	6803      	ldr	r3, [r0, #0]
    bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bfe0:	4632      	mov	r2, r6
    bfe2:	68e6      	ldr	r6, [r4, #12]
    bfe4:	4431      	add	r1, r6
    bfe6:	4798      	blx	r3
    bfe8:	b138      	cbz	r0, bffa <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    bfea:	7823      	ldrb	r3, [r4, #0]
    bfec:	f023 0301 	bic.w	r3, r3, #1
    bff0:	7023      	strb	r3, [r4, #0]
    bff2:	e000      	b.n	bff6 <FsCache::sync()+0x46>
  }
  return true;
    bff4:	2501      	movs	r5, #1

 fail:
  return false;
}
    bff6:	4628      	mov	r0, r5
    bff8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    bffa:	4605      	mov	r5, r0
    bffc:	e7fb      	b.n	bff6 <FsCache::sync()+0x46>

0000bffe <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    bffe:	b570      	push	{r4, r5, r6, lr}
    c000:	4604      	mov	r4, r0
  if (!m_blockDev) {
    c002:	6840      	ldr	r0, [r0, #4]
    c004:	b158      	cbz	r0, c01e <FsCache::prepare(unsigned long, unsigned char)+0x20>
    c006:	460e      	mov	r6, r1
    c008:	4615      	mov	r5, r2
  if (m_sector != sector) {
    c00a:	68e3      	ldr	r3, [r4, #12]
    c00c:	428b      	cmp	r3, r1
    c00e:	d107      	bne.n	c020 <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
    c010:	f005 0503 	and.w	r5, r5, #3
    c014:	7823      	ldrb	r3, [r4, #0]
    c016:	432b      	orrs	r3, r5
    c018:	4620      	mov	r0, r4
    c01a:	f800 3b10 	strb.w	r3, [r0], #16
}
    c01e:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
    c020:	4620      	mov	r0, r4
    c022:	f7ff ffc5 	bl	bfb0 <FsCache::sync()>
    c026:	b170      	cbz	r0, c046 <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
    c028:	f015 0f04 	tst.w	r5, #4
    c02c:	d107      	bne.n	c03e <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    c02e:	6860      	ldr	r0, [r4, #4]
    c030:	6803      	ldr	r3, [r0, #0]
    c032:	691b      	ldr	r3, [r3, #16]
    c034:	f104 0210 	add.w	r2, r4, #16
    c038:	4631      	mov	r1, r6
    c03a:	4798      	blx	r3
    c03c:	b128      	cbz	r0, c04a <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
    c03e:	2300      	movs	r3, #0
    c040:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
    c042:	60e6      	str	r6, [r4, #12]
    c044:	e7e4      	b.n	c010 <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
    c046:	2000      	movs	r0, #0
    c048:	e7e9      	b.n	c01e <FsCache::prepare(unsigned long, unsigned char)+0x20>
    c04a:	2000      	movs	r0, #0
    c04c:	e7e7      	b.n	c01e <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

0000c050 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
 */
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
    c050:	b508      	push	{r3, lr}
  *ms10 = 0;
    c052:	2300      	movs	r3, #0
    c054:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    c056:	4b02      	ldr	r3, [pc, #8]	; (c060 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
    c058:	681b      	ldr	r3, [r3, #0]
    c05a:	4798      	blx	r3
}
    c05c:	bd08      	pop	{r3, pc}
    c05e:	bf00      	nop
    c060:	200050c8 	.word	0x200050c8

0000c064 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    c064:	4b02      	ldr	r3, [pc, #8]	; (c070 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    c066:	4a03      	ldr	r2, [pc, #12]	; (c074 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    c068:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
    c06a:	4b03      	ldr	r3, [pc, #12]	; (c078 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    c06c:	6018      	str	r0, [r3, #0]
  }
    c06e:	4770      	bx	lr
    c070:	200050c4 	.word	0x200050c4
    c074:	0000c051 	.word	0x0000c051
    c078:	200050c8 	.word	0x200050c8

0000c07c <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    c07c:	b510      	push	{r4, lr}
    c07e:	b082      	sub	sp, #8
    c080:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    c082:	8980      	ldrh	r0, [r0, #12]
    c084:	b118      	cbz	r0, c08e <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    c086:	2300      	movs	r3, #0
    c088:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    c08a:	b002      	add	sp, #8
    c08c:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    c08e:	6863      	ldr	r3, [r4, #4]
    c090:	68a1      	ldr	r1, [r4, #8]
    c092:	428b      	cmp	r3, r1
    c094:	d2f9      	bcs.n	c08a <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    c096:	aa01      	add	r2, sp, #4
    c098:	4618      	mov	r0, r3
    c09a:	f000 f8b9 	bl	c210 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    c09e:	b130      	cbz	r0, c0ae <FsName::get16()+0x32>
    next = ptr;
    c0a0:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    c0a2:	9801      	ldr	r0, [sp, #4]
    c0a4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    c0a8:	d204      	bcs.n	c0b4 <FsName::get16()+0x38>
      rtn = cp;
    c0aa:	b280      	uxth	r0, r0
    c0ac:	e7ed      	b.n	c08a <FsName::get16()+0xe>
  return 0XFFFF;
    c0ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c0b2:	e7ea      	b.n	c08a <FsName::get16()+0xe>
    c0b4:	f3c0 0309 	ubfx	r3, r0, #0, #10
    c0b8:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
    c0bc:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    c0be:	0a80      	lsrs	r0, r0, #10
    c0c0:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    c0c4:	b280      	uxth	r0, r0
    c0c6:	e7e0      	b.n	c08a <FsName::get16()+0xe>

0000c0c8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    c0c8:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c0ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    c0ce:	d82e      	bhi.n	c12e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
    c0d0:	2910      	cmp	r1, #16
    c0d2:	d81f      	bhi.n	c114 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c0d4:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
    c0d8:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    c0da:	fb0e f101 	mul.w	r1, lr, r1
    c0de:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
    c0e2:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
    c0e6:	d23f      	bcs.n	c168 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    c0e8:	fb01 231c 	mls	r3, r1, ip, r2
    c0ec:	fbb3 f3fe 	udiv	r3, r3, lr
    c0f0:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    c0f2:	fbb2 f1fe 	udiv	r1, r2, lr
    c0f6:	fb0e 2211 	mls	r2, lr, r1, r2
    c0fa:	3201      	adds	r2, #1
    c0fc:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    c0fe:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    c100:	ea4f 039c 	mov.w	r3, ip, lsr #2
    c104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    c108:	431a      	orrs	r2, r3
    c10a:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
    c10c:	f880 c002 	strb.w	ip, [r0, #2]
}
    c110:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
    c114:	2920      	cmp	r1, #32
    c116:	d803      	bhi.n	c120 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c118:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
    c11c:	2104      	movs	r1, #4
    c11e:	e7dc      	b.n	c0da <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c120:	f04f 0e20 	mov.w	lr, #32
    c124:	2980      	cmp	r1, #128	; 0x80
    c126:	bf8c      	ite	hi
    c128:	2110      	movhi	r1, #16
    c12a:	2108      	movls	r1, #8
    c12c:	e7d5      	b.n	c0da <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    c12e:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    c132:	d90d      	bls.n	c150 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
    c134:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    c138:	d90e      	bls.n	c158 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
    c13a:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    c13e:	d90f      	bls.n	c160 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c140:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    c144:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
    c148:	bf94      	ite	ls
    c14a:	2180      	movls	r1, #128	; 0x80
    c14c:	21ff      	movhi	r1, #255	; 0xff
    c14e:	e7c4      	b.n	c0da <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    c150:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
    c154:	2110      	movs	r1, #16
    c156:	e7c0      	b.n	c0da <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c158:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
    c15c:	2120      	movs	r1, #32
    c15e:	e7bc      	b.n	c0da <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    c160:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
    c164:	2140      	movs	r1, #64	; 0x40
    c166:	e7b8      	b.n	c0da <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
    c168:	223f      	movs	r2, #63	; 0x3f
    h = 254;
    c16a:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
    c16c:	f240 3cff 	movw	ip, #1023	; 0x3ff
    c170:	e7c5      	b.n	c0fe <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

0000c172 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    c172:	4603      	mov	r3, r0
    size_t n = end - str;
    c174:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
    c176:	287f      	cmp	r0, #127	; 0x7f
    c178:	d805      	bhi.n	c186 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    c17a:	2a00      	cmp	r2, #0
    c17c:	d040      	beq.n	c200 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
    c17e:	4608      	mov	r0, r1
    c180:	f800 3b01 	strb.w	r3, [r0], #1
    c184:	4770      	bx	lr
    } else if (cp < 0X800) {
    c186:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c18a:	d20d      	bcs.n	c1a8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    c18c:	2a01      	cmp	r2, #1
    c18e:	d939      	bls.n	c204 <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    c190:	0982      	lsrs	r2, r0, #6
    c192:	f062 023f 	orn	r2, r2, #63	; 0x3f
    c196:	4608      	mov	r0, r1
    c198:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c19c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c1a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c1a4:	704b      	strb	r3, [r1, #1]
    c1a6:	4770      	bx	lr
    } else if (cp < 0X10000) {
    c1a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    c1ac:	d211      	bcs.n	c1d2 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    c1ae:	2a02      	cmp	r2, #2
    c1b0:	d92a      	bls.n	c208 <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c1b2:	0b02      	lsrs	r2, r0, #12
    c1b4:	f062 021f 	orn	r2, r2, #31
    c1b8:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c1ba:	f3c0 1285 	ubfx	r2, r0, #6, #6
    c1be:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c1c2:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c1c4:	1cc8      	adds	r0, r1, #3
    c1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c1ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c1ce:	708b      	strb	r3, [r1, #2]
    c1d0:	4770      	bx	lr
       if (n < 4) goto fail;
    c1d2:	2a03      	cmp	r2, #3
    c1d4:	d91a      	bls.n	c20c <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c1d6:	0c82      	lsrs	r2, r0, #18
    c1d8:	f062 020f 	orn	r2, r2, #15
    c1dc:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c1de:	f3c0 3205 	ubfx	r2, r0, #12, #6
    c1e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c1e6:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c1e8:	f3c0 1285 	ubfx	r2, r0, #6, #6
    c1ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
    c1f0:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c1f2:	1d08      	adds	r0, r1, #4
    c1f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c1f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c1fc:	70cb      	strb	r3, [r1, #3]
    c1fe:	4770      	bx	lr
    return nullptr;
    c200:	2000      	movs	r0, #0
    c202:	4770      	bx	lr
    c204:	2000      	movs	r0, #0
    c206:	4770      	bx	lr
    c208:	2000      	movs	r0, #0
    c20a:	4770      	bx	lr
    c20c:	2000      	movs	r0, #0
  }
    c20e:	4770      	bx	lr

0000c210 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    c210:	4288      	cmp	r0, r1
    c212:	d242      	bcs.n	c29a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    c214:	b510      	push	{r4, lr}
    c216:	4603      	mov	r3, r0
    uint8_t ch = str[0];
    c218:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    c21a:	f990 0000 	ldrsb.w	r0, [r0]
    c21e:	2800      	cmp	r0, #0
    c220:	da10      	bge.n	c244 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
    c222:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    c226:	28c0      	cmp	r0, #192	; 0xc0
    c228:	d00f      	beq.n	c24a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
    c22a:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    c22e:	28e0      	cmp	r0, #224	; 0xe0
    c230:	d02e      	beq.n	c290 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
    c232:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    c236:	28f0      	cmp	r0, #240	; 0xf0
    c238:	d131      	bne.n	c29e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
    c23a:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    c23e:	f04f 0c04 	mov.w	ip, #4
    c242:	e006      	b.n	c252 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
    c244:	6014      	str	r4, [r2, #0]
      return str + 1;
    c246:	1c58      	adds	r0, r3, #1
  }
    c248:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
    c24a:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    c24e:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
    c252:	eb03 000c 	add.w	r0, r3, ip
    c256:	4288      	cmp	r0, r1
    c258:	d823      	bhi.n	c2a2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
    c25a:	1c59      	adds	r1, r3, #1
    c25c:	4684      	mov	ip, r0
      ch = str[i];
    c25e:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    c262:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
    c266:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    c26a:	d11c      	bne.n	c2a6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
    c26c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c270:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
    c274:	4561      	cmp	r1, ip
    c276:	d1f2      	bne.n	c25e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
    c278:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    c27c:	4b0d      	ldr	r3, [pc, #52]	; (c2b4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
    c27e:	4299      	cmp	r1, r3
    c280:	d813      	bhi.n	c2aa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    c282:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    c286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c28a:	d310      	bcc.n	c2ae <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
    c28c:	6014      	str	r4, [r2, #0]
    return str + n;
    c28e:	e7db      	b.n	c248 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
    c290:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    c294:	f04f 0c03 	mov.w	ip, #3
    c298:	e7db      	b.n	c252 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
    c29a:	2000      	movs	r0, #0
  }
    c29c:	4770      	bx	lr
      return nullptr;
    c29e:	2000      	movs	r0, #0
    c2a0:	e7d2      	b.n	c248 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    c2a2:	2000      	movs	r0, #0
    c2a4:	e7d0      	b.n	c248 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
    c2a6:	2000      	movs	r0, #0
    c2a8:	e7ce      	b.n	c248 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    c2aa:	2000      	movs	r0, #0
    c2ac:	e7cc      	b.n	c248 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    c2ae:	2000      	movs	r0, #0
    c2b0:	e7ca      	b.n	c248 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    c2b2:	bf00      	nop
    c2b4:	0010ff7f 	.word	0x0010ff7f

0000c2b8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    c2b8:	287e      	cmp	r0, #126	; 0x7e
    c2ba:	d80c      	bhi.n	c2d6 <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    c2bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    c2c0:	b29b      	uxth	r3, r3
    c2c2:	2b19      	cmp	r3, #25
    c2c4:	bf8c      	ite	hi
    c2c6:	2300      	movhi	r3, #0
    c2c8:	2301      	movls	r3, #1
    c2ca:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    c2ce:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    c2d0:	4770      	bx	lr
    mid = left + (right - left)/2;
    c2d2:	469c      	mov	ip, r3
    c2d4:	e004      	b.n	c2e0 <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
    c2d6:	b430      	push	{r4, r5}
  size_t right = size;
    c2d8:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    c2dc:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    c2de:	4c27      	ldr	r4, [pc, #156]	; (c37c <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
    c2e0:	ebac 0302 	sub.w	r3, ip, r2
    c2e4:	2b01      	cmp	r3, #1
    c2e6:	d907      	bls.n	c2f8 <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
    c2e8:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    c2ec:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
    c2f0:	4281      	cmp	r1, r0
    c2f2:	d8ee      	bhi.n	c2d2 <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
    c2f4:	461a      	mov	r2, r3
    c2f6:	e7f3      	b.n	c2e0 <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
    c2f8:	b292      	uxth	r2, r2
    c2fa:	4b20      	ldr	r3, [pc, #128]	; (c37c <toUpcase(unsigned short)+0xc4>)
    c2fc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c300:	4298      	cmp	r0, r3
    c302:	d31d      	bcc.n	c340 <toUpcase(unsigned short)+0x88>
    c304:	1ac1      	subs	r1, r0, r3
    c306:	4c1d      	ldr	r4, [pc, #116]	; (c37c <toUpcase(unsigned short)+0xc4>)
    c308:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    c30c:	78e4      	ldrb	r4, [r4, #3]
    c30e:	42a1      	cmp	r1, r4
    c310:	da19      	bge.n	c346 <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
    c312:	491a      	ldr	r1, [pc, #104]	; (c37c <toUpcase(unsigned short)+0xc4>)
    c314:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    c318:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    c31c:	2a01      	cmp	r2, #1
    c31e:	d004      	beq.n	c32a <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
    c320:	b14a      	cbz	r2, c336 <toUpcase(unsigned short)+0x7e>
    c322:	b293      	uxth	r3, r2
    c324:	4403      	add	r3, r0
    c326:	b298      	uxth	r0, r3
    c328:	e021      	b.n	c36e <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
    c32a:	1ac3      	subs	r3, r0, r3
    c32c:	f003 0301 	and.w	r3, r3, #1
    c330:	1ac3      	subs	r3, r0, r3
    c332:	b298      	uxth	r0, r3
    c334:	e01b      	b.n	c36e <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
    c336:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    c33a:	e7f3      	b.n	c324 <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
    c33c:	461c      	mov	r4, r3
    c33e:	e005      	b.n	c34c <toUpcase(unsigned short)+0x94>
    c340:	244b      	movs	r4, #75	; 0x4b
    c342:	2200      	movs	r2, #0
    c344:	e001      	b.n	c34a <toUpcase(unsigned short)+0x92>
    c346:	244b      	movs	r4, #75	; 0x4b
    c348:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    c34a:	4d0d      	ldr	r5, [pc, #52]	; (c380 <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
    c34c:	1aa3      	subs	r3, r4, r2
    c34e:	2b01      	cmp	r3, #1
    c350:	d907      	bls.n	c362 <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
    c352:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    c356:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
    c35a:	4281      	cmp	r1, r0
    c35c:	d8ee      	bhi.n	c33c <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
    c35e:	461a      	mov	r2, r3
    c360:	e7f4      	b.n	c34c <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
    c362:	b292      	uxth	r2, r2
    c364:	4b06      	ldr	r3, [pc, #24]	; (c380 <toUpcase(unsigned short)+0xc8>)
    c366:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
    c36a:	4283      	cmp	r3, r0
    c36c:	d001      	beq.n	c372 <toUpcase(unsigned short)+0xba>
}
    c36e:	bc30      	pop	{r4, r5}
    c370:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    c372:	4b03      	ldr	r3, [pc, #12]	; (c380 <toUpcase(unsigned short)+0xc8>)
    c374:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c378:	8858      	ldrh	r0, [r3, #2]
    c37a:	e7f8      	b.n	c36e <toUpcase(unsigned short)+0xb6>
    c37c:	20001ea4 	.word	0x20001ea4
    c380:	20001d78 	.word	0x20001d78

0000c384 <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c384:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c388:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c38a:	4b11      	ldr	r3, [pc, #68]	; (c3d0 <EventResponder::runFromInterrupt()+0x4c>)
    c38c:	6818      	ldr	r0, [r3, #0]
		if (first) {
    c38e:	b1d0      	cbz	r0, c3c6 <EventResponder::runFromInterrupt()+0x42>
{
    c390:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
    c392:	461d      	mov	r5, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c394:	4e0f      	ldr	r6, [pc, #60]	; (c3d4 <EventResponder::runFromInterrupt()+0x50>)
    c396:	2400      	movs	r4, #0
    c398:	e009      	b.n	c3ae <EventResponder::runFromInterrupt()+0x2a>
    c39a:	6034      	str	r4, [r6, #0]
    c39c:	e00c      	b.n	c3b8 <EventResponder::runFromInterrupt()+0x34>
			}
			enableInterrupts(irq);
			first->_triggered = false;
    c39e:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c3a0:	6883      	ldr	r3, [r0, #8]
    c3a2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c3a4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c3a8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    c3aa:	6828      	ldr	r0, [r5, #0]
		if (first) {
    c3ac:	b140      	cbz	r0, c3c0 <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
    c3ae:	6943      	ldr	r3, [r0, #20]
    c3b0:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	d0f1      	beq.n	c39a <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
    c3b6:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c3b8:	2a00      	cmp	r2, #0
    c3ba:	d1f0      	bne.n	c39e <EventResponder::runFromInterrupt()+0x1a>
    c3bc:	b662      	cpsie	i
    c3be:	e7ee      	b.n	c39e <EventResponder::runFromInterrupt()+0x1a>
    c3c0:	b902      	cbnz	r2, c3c4 <EventResponder::runFromInterrupt()+0x40>
    c3c2:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    c3c4:	bd70      	pop	{r4, r5, r6, pc}
    c3c6:	b90a      	cbnz	r2, c3cc <EventResponder::runFromInterrupt()+0x48>
    c3c8:	b662      	cpsie	i
			break;
    c3ca:	4770      	bx	lr
    c3cc:	4770      	bx	lr
    c3ce:	bf00      	nop
    c3d0:	200050d8 	.word	0x200050d8
    c3d4:	200050d4 	.word	0x200050d4

0000c3d8 <pendablesrvreq_isr>:
{
    c3d8:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    c3da:	f7ff ffd3 	bl	c384 <EventResponder::runFromInterrupt()>
}
    c3de:	bd08      	pop	{r3, pc}

0000c3e0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c3e0:	4b04      	ldr	r3, [pc, #16]	; (c3f4 <systick_isr+0x14>)
    c3e2:	685a      	ldr	r2, [r3, #4]
    c3e4:	4b04      	ldr	r3, [pc, #16]	; (c3f8 <systick_isr+0x18>)
    c3e6:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
    c3e8:	4a04      	ldr	r2, [pc, #16]	; (c3fc <systick_isr+0x1c>)
    c3ea:	6813      	ldr	r3, [r2, #0]
    c3ec:	3301      	adds	r3, #1
    c3ee:	6013      	str	r3, [r2, #0]
}
    c3f0:	4770      	bx	lr
    c3f2:	bf00      	nop
    c3f4:	e0001000 	.word	0xe0001000
    c3f8:	200057f4 	.word	0x200057f4
    c3fc:	200057f8 	.word	0x200057f8

0000c400 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    c400:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    c404:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    c406:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    c40a:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c40c:	4293      	cmp	r3, r2
    c40e:	d202      	bcs.n	c416 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    c410:	3a01      	subs	r2, #1
    c412:	1ad0      	subs	r0, r2, r3
}
    c414:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c416:	6b41      	ldr	r1, [r0, #52]	; 0x34
    c418:	3901      	subs	r1, #1
    c41a:	440a      	add	r2, r1
    c41c:	1ad0      	subs	r0, r2, r3
    c41e:	4770      	bx	lr

0000c420 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    c420:	b672      	cpsid	i
	head = rx_buffer_head_;
    c422:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    c426:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    c428:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c42c:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    c42e:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    c430:	bf3c      	itt	cc
    c432:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    c434:	1852      	addcc	r2, r2, r1
    c436:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    c438:	6902      	ldr	r2, [r0, #16]
    c43a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    c43c:	f3c0 6002 	ubfx	r0, r0, #24, #3
    c440:	4418      	add	r0, r3
	__enable_irq();
    c442:	b662      	cpsie	i
	return avail;
}
    c444:	4770      	bx	lr

0000c446 <HardwareSerial::peek()>:
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
}

int HardwareSerial::peek(void)
{
    c446:	4602      	mov	r2, r0
	uint32_t head, tail;

	head = rx_buffer_head_;
    c448:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c44c:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    c44e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c452:	b29b      	uxth	r3, r3
	if (head == tail) {
    c454:	4299      	cmp	r1, r3
    c456:	d00b      	beq.n	c470 <HardwareSerial::peek()+0x2a>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c458:	3301      	adds	r3, #1
    c45a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    c45c:	4299      	cmp	r1, r3
    c45e:	bf98      	it	ls
    c460:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    c462:	6b11      	ldr	r1, [r2, #48]	; 0x30
    c464:	4299      	cmp	r1, r3
    c466:	d921      	bls.n	c4ac <HardwareSerial::peek()+0x66>
		return rx_buffer_[tail];
    c468:	6a12      	ldr	r2, [r2, #32]
    c46a:	5cd0      	ldrb	r0, [r2, r3]
    c46c:	b2c0      	uxtb	r0, r0
    c46e:	4770      	bx	lr
		__disable_irq();
    c470:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    c472:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c476:	b289      	uxth	r1, r1
		if (head == tail) {
    c478:	428b      	cmp	r3, r1
    c47a:	d001      	beq.n	c480 <HardwareSerial::peek()+0x3a>
		__enable_irq();
    c47c:	b662      	cpsie	i
    c47e:	e7eb      	b.n	c458 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    c480:	6903      	ldr	r3, [r0, #16]
    c482:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    c484:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    c488:	d00c      	beq.n	c4a4 <HardwareSerial::peek()+0x5e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c48a:	69db      	ldr	r3, [r3, #28]
    c48c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_head_ = 1;
    c490:	2101      	movs	r1, #1
    c492:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    c496:	2100      	movs	r1, #0
    c498:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    c49c:	6a12      	ldr	r2, [r2, #32]
    c49e:	b2db      	uxtb	r3, r3
    c4a0:	7053      	strb	r3, [r2, #1]
    c4a2:	e001      	b.n	c4a8 <HardwareSerial::peek()+0x62>
			int c = -1;	// assume nothing to return
    c4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    c4a8:	b662      	cpsie	i
			return c;
    c4aa:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    c4ac:	1a5b      	subs	r3, r3, r1
    c4ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
    c4b0:	5cd0      	ldrb	r0, [r2, r3]
    c4b2:	b2c0      	uxtb	r0, r0
	}
}
    c4b4:	4770      	bx	lr

0000c4b6 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
    c4b6:	4602      	mov	r2, r0
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    c4b8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c4bc:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    c4be:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c4c2:	b29b      	uxth	r3, r3
	if (head == tail) {
    c4c4:	4299      	cmp	r1, r3
    c4c6:	d01b      	beq.n	c500 <HardwareSerial::read()+0x4a>
{
    c4c8:	b430      	push	{r4, r5}
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c4ca:	3301      	adds	r3, #1
    c4cc:	6b94      	ldr	r4, [r2, #56]	; 0x38
    c4ce:	429c      	cmp	r4, r3
    c4d0:	bf98      	it	ls
    c4d2:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    c4d4:	6b10      	ldr	r0, [r2, #48]	; 0x30
    c4d6:	4298      	cmp	r0, r3
    c4d8:	d927      	bls.n	c52a <HardwareSerial::read()+0x74>
		c = rx_buffer_[tail];
    c4da:	6a10      	ldr	r0, [r2, #32]
    c4dc:	5cc0      	ldrb	r0, [r0, r3]
    c4de:	b2c0      	uxtb	r0, r0
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    c4e0:	b29d      	uxth	r5, r3
    c4e2:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    c4e6:	6d95      	ldr	r5, [r2, #88]	; 0x58
    c4e8:	b145      	cbz	r5, c4fc <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    c4ea:	4299      	cmp	r1, r3
    c4ec:	d322      	bcc.n	c534 <HardwareSerial::read()+0x7e>
    c4ee:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    c4f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    c4f2:	4299      	cmp	r1, r3
    c4f4:	d302      	bcc.n	c4fc <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    c4f6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    c4f8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    c4fc:	bc30      	pop	{r4, r5}
    c4fe:	4770      	bx	lr
		__disable_irq();
    c500:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    c502:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c506:	b289      	uxth	r1, r1
		if (head == tail) {
    c508:	428b      	cmp	r3, r1
    c50a:	d001      	beq.n	c510 <HardwareSerial::read()+0x5a>
		__enable_irq();
    c50c:	b662      	cpsie	i
    c50e:	e7db      	b.n	c4c8 <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    c510:	6903      	ldr	r3, [r0, #16]
    c512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c514:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    c518:	d003      	beq.n	c522 <HardwareSerial::read()+0x6c>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c51a:	69d8      	ldr	r0, [r3, #28]
    c51c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    c520:	e001      	b.n	c526 <HardwareSerial::read()+0x70>
			c = -1;	// assume nothing to return
    c522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    c526:	b662      	cpsie	i
}	
    c528:	4770      	bx	lr
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    c52a:	1a18      	subs	r0, r3, r0
    c52c:	6a55      	ldr	r5, [r2, #36]	; 0x24
    c52e:	5c28      	ldrb	r0, [r5, r0]
    c530:	b2c0      	uxtb	r0, r0
    c532:	e7d5      	b.n	c4e0 <HardwareSerial::read()+0x2a>
		else avail = rx_buffer_total_size_ + head - tail;
    c534:	440c      	add	r4, r1
    c536:	1ae3      	subs	r3, r4, r3
    c538:	e7da      	b.n	c4f0 <HardwareSerial::read()+0x3a>

0000c53a <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
    c53a:	b510      	push	{r4, lr}
    c53c:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    c53e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    c542:	b12b      	cbz	r3, c550 <HardwareSerial::flush()+0x16>
    c544:	f002 ff68 	bl	f418 <yield>
    c548:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    c54c:	2b00      	cmp	r3, #0
    c54e:	d1f9      	bne.n	c544 <HardwareSerial::flush()+0xa>
}
    c550:	bd10      	pop	{r4, pc}
	...

0000c554 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    c554:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    c558:	b99b      	cbnz	r3, c582 <nvic_execution_priority()+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c55a:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    c55e:	b998      	cbnz	r0, c588 <nvic_execution_priority()+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c560:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    c564:	b123      	cbz	r3, c570 <nvic_execution_priority()+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    c566:	2b0f      	cmp	r3, #15
    c568:	d904      	bls.n	c574 <nvic_execution_priority()+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    c56a:	4a08      	ldr	r2, [pc, #32]	; (c58c <nvic_execution_priority()+0x38>)
    c56c:	5cd0      	ldrb	r0, [r2, r3]
    c56e:	e001      	b.n	c574 <nvic_execution_priority()+0x20>
	uint32_t priority=256;
    c570:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    c574:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    c578:	b13b      	cbz	r3, c58a <nvic_execution_priority()+0x36>
    c57a:	4298      	cmp	r0, r3
    c57c:	bf28      	it	cs
    c57e:	4618      	movcs	r0, r3
	return priority;
    c580:	4770      	bx	lr
	if (faultmask) return -1;
    c582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c586:	4770      	bx	lr
	if (primask) return 0;
    c588:	2000      	movs	r0, #0
}
    c58a:	4770      	bx	lr
    c58c:	e000e3f0 	.word	0xe000e3f0

0000c590 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    c590:	b570      	push	{r4, r5, r6, lr}
    c592:	4604      	mov	r4, r0
    c594:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c596:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c598:	b113      	cbz	r3, c5a0 <HardwareSerial::write9bit(unsigned long)+0x10>
    c59a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    c5a0:	7ea3      	ldrb	r3, [r4, #26]
    c5a2:	b133      	cbz	r3, c5b2 <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    c5a4:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    c5a6:	6922      	ldr	r2, [r4, #16]
    c5a8:	6993      	ldr	r3, [r2, #24]
    c5aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c5ae:	6193      	str	r3, [r2, #24]
		__enable_irq();
    c5b0:	b662      	cpsie	i
		//digitalWriteFast(2, HIGH);
	}

	head = tx_buffer_head_;
    c5b2:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    c5b6:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    c5b8:	3501      	adds	r5, #1
    c5ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c5bc:	42ab      	cmp	r3, r5
    c5be:	bf98      	it	ls
    c5c0:	2500      	movls	r5, #0
	while (tx_buffer_tail_ == head) {
    c5c2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c5c6:	b29b      	uxth	r3, r3
    c5c8:	429d      	cmp	r5, r3
    c5ca:	d01f      	beq.n	c60c <HardwareSerial::write9bit(unsigned long)+0x7c>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    c5cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c5ce:	42ab      	cmp	r3, r5
    c5d0:	d93e      	bls.n	c650 <HardwareSerial::write9bit(unsigned long)+0xc0>
		tx_buffer_[head] = c;
    c5d2:	69e3      	ldr	r3, [r4, #28]
    c5d4:	b2f6      	uxtb	r6, r6
    c5d6:	555e      	strb	r6, [r3, r5]
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
    c5d8:	b672      	cpsid	i
	transmitting_ = 1;
    c5da:	2001      	movs	r0, #1
    c5dc:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    c5e0:	b2ad      	uxth	r5, r5
    c5e2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    c5e6:	6922      	ldr	r2, [r4, #16]
    c5e8:	6993      	ldr	r3, [r2, #24]
    c5ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c5ee:	6193      	str	r3, [r2, #24]
	__enable_irq();
    c5f0:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    c5f2:	bd70      	pop	{r4, r5, r6, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    c5f4:	1a59      	subs	r1, r3, r1
    c5f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c5f8:	5c41      	ldrb	r1, [r0, r1]
    c5fa:	b2c9      	uxtb	r1, r1
    c5fc:	e020      	b.n	c640 <HardwareSerial::write9bit(unsigned long)+0xb0>
		} else if (priority >= 256) 
    c5fe:	28ff      	cmp	r0, #255	; 0xff
    c600:	dc23      	bgt.n	c64a <HardwareSerial::write9bit(unsigned long)+0xba>
	while (tx_buffer_tail_ == head) {
    c602:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c606:	b29b      	uxth	r3, r3
    c608:	42ab      	cmp	r3, r5
    c60a:	d1df      	bne.n	c5cc <HardwareSerial::write9bit(unsigned long)+0x3c>
		int priority = nvic_execution_priority();
    c60c:	f7ff ffa2 	bl	c554 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    c610:	6963      	ldr	r3, [r4, #20]
    c612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    c616:	4283      	cmp	r3, r0
    c618:	dbf1      	blt.n	c5fe <HardwareSerial::write9bit(unsigned long)+0x6e>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    c61a:	6922      	ldr	r2, [r4, #16]
    c61c:	6953      	ldr	r3, [r2, #20]
    c61e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c622:	d0ee      	beq.n	c602 <HardwareSerial::write9bit(unsigned long)+0x72>
				uint32_t tail = tx_buffer_tail_;
    c624:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c628:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    c62a:	3301      	adds	r3, #1
    c62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c62e:	4299      	cmp	r1, r3
    c630:	bf98      	it	ls
    c632:	2300      	movls	r3, #0
				if (tail < tx_buffer_size_) {
    c634:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    c636:	4299      	cmp	r1, r3
    c638:	d9dc      	bls.n	c5f4 <HardwareSerial::write9bit(unsigned long)+0x64>
					n = tx_buffer_[tail];
    c63a:	69e1      	ldr	r1, [r4, #28]
    c63c:	5cc9      	ldrb	r1, [r1, r3]
    c63e:	b2c9      	uxtb	r1, r1
				port->DATA  = n;
    c640:	61d1      	str	r1, [r2, #28]
				tx_buffer_tail_ = tail;
    c642:	b29b      	uxth	r3, r3
    c644:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    c648:	e7db      	b.n	c602 <HardwareSerial::write9bit(unsigned long)+0x72>
			yield(); // wait
    c64a:	f002 fee5 	bl	f418 <yield>
    c64e:	e7d8      	b.n	c602 <HardwareSerial::write9bit(unsigned long)+0x72>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    c650:	1aeb      	subs	r3, r5, r3
    c652:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c654:	b2f6      	uxtb	r6, r6
    c656:	54d6      	strb	r6, [r2, r3]
    c658:	e7be      	b.n	c5d8 <HardwareSerial::write9bit(unsigned long)+0x48>

0000c65a <HardwareSerial::write(unsigned char)>:
{
    c65a:	b508      	push	{r3, lr}
	return write9bit(c);
    c65c:	f7ff ff98 	bl	c590 <HardwareSerial::write9bit(unsigned long)>
}
    c660:	bd08      	pop	{r3, pc}

0000c662 <HardwareSerial::IRQHandler()>:

void HardwareSerial::IRQHandler() 
{
    c662:	b530      	push	{r4, r5, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    c664:	6903      	ldr	r3, [r0, #16]
    c666:	695a      	ldr	r2, [r3, #20]
    c668:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    c66c:	d047      	beq.n	c6fe <HardwareSerial::IRQHandler()+0x9c>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c670:	f3c3 6c02 	ubfx	ip, r3, #24, #3
		if (avail) {
    c674:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    c678:	d038      	beq.n	c6ec <HardwareSerial::IRQHandler()+0x8a>
			uint32_t newhead;
			head = rx_buffer_head_;
    c67a:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
    c67e:	fa1f fe8e 	uxth.w	lr, lr
			tail = rx_buffer_tail_;
    c682:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    c686:	b2a4      	uxth	r4, r4
    c688:	e009      	b.n	c69e <HardwareSerial::IRQHandler()+0x3c>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c68a:	1a59      	subs	r1, r3, r1
    c68c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c68e:	b2d2      	uxtb	r2, r2
    c690:	546a      	strb	r2, [r5, r1]
					head = newhead;
    c692:	469e      	mov	lr, r3
					}
				}
			} while (--avail > 0) ;
    c694:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c698:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    c69c:	d016      	beq.n	c6cc <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c69e:	6903      	ldr	r3, [r0, #16]
    c6a0:	69da      	ldr	r2, [r3, #28]
				newhead = head + 1;
    c6a2:	f10e 0301 	add.w	r3, lr, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    c6a6:	6b81      	ldr	r1, [r0, #56]	; 0x38
    c6a8:	4299      	cmp	r1, r3
    c6aa:	bf98      	it	ls
    c6ac:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    c6ae:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    c6b2:	b289      	uxth	r1, r1
    c6b4:	4299      	cmp	r1, r3
    c6b6:	d0ed      	beq.n	c694 <HardwareSerial::IRQHandler()+0x32>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c6b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
					if (newhead < rx_buffer_size_) {
    c6bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c6be:	4299      	cmp	r1, r3
    c6c0:	d9e3      	bls.n	c68a <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_[head] = n;
    c6c2:	6a01      	ldr	r1, [r0, #32]
    c6c4:	b2d2      	uxtb	r2, r2
    c6c6:	54ca      	strb	r2, [r1, r3]
					head = newhead;
    c6c8:	469e      	mov	lr, r3
    c6ca:	e7e3      	b.n	c694 <HardwareSerial::IRQHandler()+0x32>
			rx_buffer_head_ = head;
    c6cc:	fa1f f38e 	uxth.w	r3, lr
    c6d0:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    c6d4:	6d83      	ldr	r3, [r0, #88]	; 0x58
    c6d6:	b14b      	cbz	r3, c6ec <HardwareSerial::IRQHandler()+0x8a>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    c6d8:	45a6      	cmp	lr, r4
    c6da:	d320      	bcc.n	c71e <HardwareSerial::IRQHandler()+0xbc>
    c6dc:	ebae 0e04 	sub.w	lr, lr, r4
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
    c6e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    c6e2:	4572      	cmp	r2, lr
    c6e4:	d802      	bhi.n	c6ec <HardwareSerial::IRQHandler()+0x8a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    c6e6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    c6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    c6ec:	6903      	ldr	r3, [r0, #16]
    c6ee:	695a      	ldr	r2, [r3, #20]
    c6f0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    c6f4:	d003      	beq.n	c6fe <HardwareSerial::IRQHandler()+0x9c>
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    c6f6:	695a      	ldr	r2, [r3, #20]
    c6f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c6fc:	615a      	str	r2, [r3, #20]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    c6fe:	6903      	ldr	r3, [r0, #16]
    c700:	699d      	ldr	r5, [r3, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    c702:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    c706:	d02c      	beq.n	c762 <HardwareSerial::IRQHandler()+0x100>
    c708:	695b      	ldr	r3, [r3, #20]
    c70a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c70e:	d028      	beq.n	c762 <HardwareSerial::IRQHandler()+0x100>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    c710:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    c714:	b2a4      	uxth	r4, r4
		tail = tx_buffer_tail_;
    c716:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    c71a:	b29b      	uxth	r3, r3
    c71c:	e00e      	b.n	c73c <HardwareSerial::IRQHandler()+0xda>
				else avail = rx_buffer_total_size_ + head - tail;
    c71e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    c720:	1b12      	subs	r2, r2, r4
    c722:	4496      	add	lr, r2
    c724:	e7dc      	b.n	c6e0 <HardwareSerial::IRQHandler()+0x7e>
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    c726:	1a9a      	subs	r2, r3, r2
    c728:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c72a:	5c8a      	ldrb	r2, [r1, r2]
    c72c:	b2d2      	uxtb	r2, r2
			}
			port->DATA = n;
    c72e:	6901      	ldr	r1, [r0, #16]
    c730:	61ca      	str	r2, [r1, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    c732:	6902      	ldr	r2, [r0, #16]
    c734:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c736:	f412 6f80 	tst.w	r2, #1024	; 0x400
    c73a:	d10d      	bne.n	c758 <HardwareSerial::IRQHandler()+0xf6>
			if (head == tail) break;
    c73c:	42a3      	cmp	r3, r4
    c73e:	d02f      	beq.n	c7a0 <HardwareSerial::IRQHandler()+0x13e>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c740:	3301      	adds	r3, #1
    c742:	6b42      	ldr	r2, [r0, #52]	; 0x34
    c744:	429a      	cmp	r2, r3
    c746:	bf98      	it	ls
    c748:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    c74a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    c74c:	429a      	cmp	r2, r3
    c74e:	d9ea      	bls.n	c726 <HardwareSerial::IRQHandler()+0xc4>
				n = tx_buffer_[tail];
    c750:	69c2      	ldr	r2, [r0, #28]
    c752:	5cd2      	ldrb	r2, [r2, r3]
    c754:	b2d2      	uxtb	r2, r2
    c756:	e7ea      	b.n	c72e <HardwareSerial::IRQHandler()+0xcc>
		tx_buffer_tail_ = tail;
    c758:	b29a      	uxth	r2, r3
    c75a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		if (head == tail) {
    c75e:	42a3      	cmp	r3, r4
    c760:	d020      	beq.n	c7a4 <HardwareSerial::IRQHandler()+0x142>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    c762:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
    c766:	d01a      	beq.n	c79e <HardwareSerial::IRQHandler()+0x13c>
    c768:	6903      	ldr	r3, [r0, #16]
    c76a:	695b      	ldr	r3, [r3, #20]
    c76c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    c770:	d015      	beq.n	c79e <HardwareSerial::IRQHandler()+0x13c>
	{
		transmitting_ = 0;
    c772:	2300      	movs	r3, #0
    c774:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c778:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c77a:	b113      	cbz	r3, c782 <HardwareSerial::IRQHandler()+0x120>
    c77c:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    c782:	7e83      	ldrb	r3, [r0, #26]
    c784:	b133      	cbz	r3, c794 <HardwareSerial::IRQHandler()+0x132>
			__disable_irq();
    c786:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    c788:	6902      	ldr	r2, [r0, #16]
    c78a:	6993      	ldr	r3, [r2, #24]
    c78c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    c790:	6193      	str	r3, [r2, #24]
			__enable_irq();
    c792:	b662      	cpsie	i
			//digitalWriteFast(2, LOW);
		}

		port->CTRL &= ~LPUART_CTRL_TCIE;
    c794:	6902      	ldr	r2, [r0, #16]
    c796:	6993      	ldr	r3, [r2, #24]
    c798:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    c79c:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    c79e:	bd30      	pop	{r4, r5, pc}
		tx_buffer_tail_ = tail;
    c7a0:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    c7a4:	6902      	ldr	r2, [r0, #16]
    c7a6:	6993      	ldr	r3, [r2, #24]
    c7a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    c7ac:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    c7ae:	6902      	ldr	r2, [r0, #16]
    c7b0:	6993      	ldr	r3, [r2, #24]
    c7b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    c7b6:	6193      	str	r3, [r2, #24]
    c7b8:	e7d3      	b.n	c762 <HardwareSerial::IRQHandler()+0x100>
	...

0000c7bc <HardwareSerial::addToSerialEventsList()>:


void HardwareSerial::addToSerialEventsList() {
    c7bc:	b410      	push	{r4}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c7be:	4b0e      	ldr	r3, [pc, #56]	; (c7f8 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c7c0:	781c      	ldrb	r4, [r3, #0]
    c7c2:	b15c      	cbz	r4, c7dc <HardwareSerial::addToSerialEventsList()+0x20>
    c7c4:	490d      	ldr	r1, [pc, #52]	; (c7fc <HardwareSerial::addToSerialEventsList()+0x40>)
    c7c6:	1f0b      	subs	r3, r1, #4
    c7c8:	1e62      	subs	r2, r4, #1
    c7ca:	b2d2      	uxtb	r2, r2
    c7cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c7d0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c7d4:	4282      	cmp	r2, r0
    c7d6:	d00c      	beq.n	c7f2 <HardwareSerial::addToSerialEventsList()+0x36>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c7d8:	428b      	cmp	r3, r1
    c7da:	d1f9      	bne.n	c7d0 <HardwareSerial::addToSerialEventsList()+0x14>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c7dc:	1c62      	adds	r2, r4, #1
    c7de:	4b06      	ldr	r3, [pc, #24]	; (c7f8 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c7e0:	701a      	strb	r2, [r3, #0]
    c7e2:	4b06      	ldr	r3, [pc, #24]	; (c7fc <HardwareSerial::addToSerialEventsList()+0x40>)
    c7e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c7e8:	4a05      	ldr	r2, [pc, #20]	; (c800 <HardwareSerial::addToSerialEventsList()+0x44>)
    c7ea:	7813      	ldrb	r3, [r2, #0]
    c7ec:	f043 0302 	orr.w	r3, r3, #2
    c7f0:	7013      	strb	r3, [r2, #0]
}
    c7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    c7f6:	4770      	bx	lr
    c7f8:	20005835 	.word	0x20005835
    c7fc:	200050e0 	.word	0x200050e0
    c800:	20003d47 	.word	0x20003d47

0000c804 <HardwareSerial::begin(unsigned long, unsigned short)>:
{
    c804:	b570      	push	{r4, r5, r6, lr}
    c806:	ee07 1a90 	vmov	s15, r1
    c80a:	4614      	mov	r4, r2
	float base = (float)UART_CLOCK / (float)baud;
    c80c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c810:	ed9f 7a93 	vldr	s14, [pc, #588]	; ca60 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>
    c814:	ee87 5a27 	vdiv.f32	s10, s14, s15
	for (int osr=4; osr <= 32; osr++) {
    c818:	2104      	movs	r1, #4
	int bestosr = 4;
    c81a:	468e      	mov	lr, r1
	int bestdiv = 1;
    c81c:	2201      	movs	r2, #1
	float besterr = 1e20;
    c81e:	ed9f 6a91 	vldr	s12, [pc, #580]	; ca64 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>
		int divint = (int)(div + 0.5f);
    c822:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c826:	f641 7cff 	movw	ip, #8191	; 0x1fff
    c82a:	e002      	b.n	c832 <HardwareSerial::begin(unsigned long, unsigned short)+0x2e>
	for (int osr=4; osr <= 32; osr++) {
    c82c:	3101      	adds	r1, #1
    c82e:	2921      	cmp	r1, #33	; 0x21
    c830:	d02a      	beq.n	c888 <HardwareSerial::begin(unsigned long, unsigned short)+0x84>
		float div = base / (float)osr;
    c832:	ee07 1a90 	vmov	s15, r1
    c836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c83a:	ee85 7a27 	vdiv.f32	s14, s10, s15
		int divint = (int)(div + 0.5f);
    c83e:	ee77 7a25 	vadd.f32	s15, s14, s11
    c842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c846:	ee17 3a90 	vmov	r3, s15
    c84a:	4563      	cmp	r3, ip
    c84c:	bfa8      	it	ge
    c84e:	4663      	movge	r3, ip
    c850:	2b01      	cmp	r3, #1
    c852:	bfb8      	it	lt
    c854:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    c856:	ee07 3a90 	vmov	s15, r3
    c85a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    c85e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    c862:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    c86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c86e:	bf48      	it	mi
    c870:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c874:	eef4 7ac6 	vcmpe.f32	s15, s12
    c878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c87c:	d8d6      	bhi.n	c82c <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
    c87e:	468e      	mov	lr, r1
			bestdiv = divint;
    c880:	461a      	mov	r2, r3
			besterr = err;
    c882:	eeb0 6a67 	vmov.f32	s12, s15
    c886:	e7d1      	b.n	c82c <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    c888:	2300      	movs	r3, #0
    c88a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    c88e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
    c892:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c896:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c89a:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c89c:	6941      	ldr	r1, [r0, #20]
    c89e:	f8b1 605c 	ldrh.w	r6, [r1, #92]	; 0x5c
    c8a2:	1bae      	subs	r6, r5, r6
    c8a4:	63c6      	str	r6, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c8a6:	f8b1 605e 	ldrh.w	r6, [r1, #94]	; 0x5e
    c8aa:	1bad      	subs	r5, r5, r6
    c8ac:	6405      	str	r5, [r0, #64]	; 0x40
	transmitting_ = 0;
    c8ae:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	hardware->ccm_register |= hardware->ccm_value;
    c8b2:	690d      	ldr	r5, [r1, #16]
    c8b4:	682b      	ldr	r3, [r5, #0]
    c8b6:	6949      	ldr	r1, [r1, #20]
    c8b8:	430b      	orrs	r3, r1
    c8ba:	602b      	str	r3, [r5, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    c8bc:	f404 7300 	and.w	r3, r4, #512	; 0x200
    c8c0:	2b00      	cmp	r3, #0
    c8c2:	bf14      	ite	ne
    c8c4:	2301      	movne	r3, #1
    c8c6:	2300      	moveq	r3, #0
    c8c8:	7683      	strb	r3, [r0, #26]
	if (!half_duplex_mode_)  {
    c8ca:	f040 80aa 	bne.w	ca22 <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c8ce:	4966      	ldr	r1, [pc, #408]	; (ca68 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c8d0:	6943      	ldr	r3, [r0, #20]
    c8d2:	7e05      	ldrb	r5, [r0, #24]
    c8d4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c8d8:	7e1b      	ldrb	r3, [r3, #24]
    c8da:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c8de:	689b      	ldr	r3, [r3, #8]
    c8e0:	4d62      	ldr	r5, [pc, #392]	; (ca6c <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    c8e2:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c8e4:	6943      	ldr	r3, [r0, #20]
    c8e6:	7e05      	ldrb	r5, [r0, #24]
    c8e8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c8ec:	7e1d      	ldrb	r5, [r3, #24]
    c8ee:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c8f2:	6849      	ldr	r1, [r1, #4]
    c8f4:	69db      	ldr	r3, [r3, #28]
    c8f6:	600b      	str	r3, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c8f8:	7e01      	ldrb	r1, [r0, #24]
    c8fa:	6943      	ldr	r3, [r0, #20]
    c8fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c900:	6a19      	ldr	r1, [r3, #32]
    c902:	b109      	cbz	r1, c908 <HardwareSerial::begin(unsigned long, unsigned short)+0x104>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c906:	600b      	str	r3, [r1, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c908:	4957      	ldr	r1, [pc, #348]	; (ca68 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c90a:	6943      	ldr	r3, [r0, #20]
    c90c:	7e45      	ldrb	r5, [r0, #25]
    c90e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c912:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c916:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c91a:	689b      	ldr	r3, [r3, #8]
    c91c:	25d9      	movs	r5, #217	; 0xd9
    c91e:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c920:	6943      	ldr	r3, [r0, #20]
    c922:	7e45      	ldrb	r5, [r0, #25]
    c924:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c928:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c92c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c930:	6849      	ldr	r1, [r1, #4]
    c932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c934:	600b      	str	r3, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    c936:	7e41      	ldrb	r1, [r0, #25]
    c938:	6943      	ldr	r3, [r0, #20]
    c93a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c93e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    c940:	b109      	cbz	r1, c946 <HardwareSerial::begin(unsigned long, unsigned short)+0x142>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    c942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c944:	600b      	str	r3, [r1, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c946:	6901      	ldr	r1, [r0, #16]
    c948:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    c94c:	061b      	lsls	r3, r3, #24
    c94e:	f003 5cf8 	and.w	ip, r3, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    c952:	f1be 0f08 	cmp.w	lr, #8
    c956:	bfcc      	ite	gt
    c958:	f04f 0e00 	movgt.w	lr, #0
    c95c:	f04f 0e01 	movle.w	lr, #1
    c960:	ea42 434e 	orr.w	r3, r2, lr, lsl #17
    c964:	ea4c 0303 	orr.w	r3, ip, r3
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c968:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    c96a:	6903      	ldr	r3, [r0, #16]
    c96c:	2200      	movs	r2, #0
    c96e:	60da      	str	r2, [r3, #12]
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c970:	6943      	ldr	r3, [r0, #20]
    c972:	6859      	ldr	r1, [r3, #4]
    c974:	785b      	ldrb	r3, [r3, #1]
    c976:	3310      	adds	r3, #16
    c978:	4a3d      	ldr	r2, [pc, #244]	; (ca70 <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    c97a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c97e:	6943      	ldr	r3, [r0, #20]
    c980:	785a      	ldrb	r2, [r3, #1]
    c982:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
    c986:	4b3b      	ldr	r3, [pc, #236]	; (ca74 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    c988:	54d1      	strb	r1, [r2, r3]
	NVIC_ENABLE_IRQ(hardware->irq);
    c98a:	6943      	ldr	r3, [r0, #20]
    c98c:	785a      	ldrb	r2, [r3, #1]
    c98e:	4b3a      	ldr	r3, [pc, #232]	; (ca78 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
    c990:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c994:	009b      	lsls	r3, r3, #2
    c996:	f002 021f 	and.w	r2, r2, #31
    c99a:	2101      	movs	r1, #1
    c99c:	fa01 f202 	lsl.w	r2, r1, r2
    c9a0:	601a      	str	r2, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c9a2:	6903      	ldr	r3, [r0, #16]
    c9a4:	f04f 1202 	mov.w	r2, #131074	; 0x20002
    c9a8:	62da      	str	r2, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c9aa:	6902      	ldr	r2, [r0, #16]
    c9ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c9ae:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    c9b2:	6293      	str	r3, [r2, #40]	; 0x28
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c9b4:	f004 0203 	and.w	r2, r4, #3
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c9b8:	f014 0f04 	tst.w	r4, #4
    c9bc:	d14a      	bne.n	ca54 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c9be:	f442 1370 	orr.w	r3, r2, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c9c2:	f004 020f 	and.w	r2, r4, #15
    c9c6:	2a04      	cmp	r2, #4
    c9c8:	bf08      	it	eq
    c9ca:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c9ce:	f014 0f20 	tst.w	r4, #32
    c9d2:	bf18      	it	ne
    c9d4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    c9d8:	7e82      	ldrb	r2, [r0, #26]
    c9da:	b10a      	cbz	r2, c9e0 <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    c9dc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	port->CTRL = ctrl;
    c9e0:	6902      	ldr	r2, [r0, #16]
    c9e2:	6193      	str	r3, [r2, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c9e4:	f014 0f08 	tst.w	r4, #8
    c9e8:	d004      	beq.n	c9f4 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f0>
    c9ea:	6902      	ldr	r2, [r0, #16]
    c9ec:	6913      	ldr	r3, [r2, #16]
    c9ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c9f2:	6113      	str	r3, [r2, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c9f4:	6902      	ldr	r2, [r0, #16]
    c9f6:	6953      	ldr	r3, [r2, #20]
    c9f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c9fc:	f014 0f10 	tst.w	r4, #16
    ca00:	bf18      	it	ne
    ca02:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    ca06:	6153      	str	r3, [r2, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    ca08:	f414 7f80 	tst.w	r4, #256	; 0x100
    ca0c:	d004      	beq.n	ca18 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    ca0e:	6902      	ldr	r2, [r0, #16]
    ca10:	6913      	ldr	r3, [r2, #16]
    ca12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ca16:	6113      	str	r3, [r2, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    ca18:	6943      	ldr	r3, [r0, #20]
    ca1a:	68db      	ldr	r3, [r3, #12]
    ca1c:	781b      	ldrb	r3, [r3, #0]
    ca1e:	b1e3      	cbz	r3, ca5a <HardwareSerial::begin(unsigned long, unsigned short)+0x256>
};
    ca20:	bd70      	pop	{r4, r5, r6, pc}
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    ca22:	4911      	ldr	r1, [pc, #68]	; (ca68 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    ca24:	6943      	ldr	r3, [r0, #20]
    ca26:	7e45      	ldrb	r5, [r0, #25]
    ca28:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    ca2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    ca30:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    ca34:	689b      	ldr	r3, [r3, #8]
    ca36:	f24f 05d9 	movw	r5, #61657	; 0xf0d9
    ca3a:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    ca3c:	6943      	ldr	r3, [r0, #20]
    ca3e:	7e45      	ldrb	r5, [r0, #25]
    ca40:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    ca44:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    ca48:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    ca4c:	6849      	ldr	r1, [r1, #4]
    ca4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ca50:	600b      	str	r3, [r1, #0]
    ca52:	e770      	b.n	c936 <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    ca54:	4b09      	ldr	r3, [pc, #36]	; (ca7c <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    ca56:	4313      	orrs	r3, r2
    ca58:	e7b3      	b.n	c9c2 <HardwareSerial::begin(unsigned long, unsigned short)+0x1be>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    ca5a:	f7ff feaf 	bl	c7bc <HardwareSerial::addToSerialEventsList()>
};
    ca5e:	e7df      	b.n	ca20 <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
    ca60:	4bb71b00 	.word	0x4bb71b00
    ca64:	60ad78ec 	.word	0x60ad78ec
    ca68:	20002ba4 	.word	0x20002ba4
    ca6c:	0001f038 	.word	0x0001f038
    ca70:	20004000 	.word	0x20004000
    ca74:	e000e400 	.word	0xe000e400
    ca78:	38003840 	.word	0x38003840
    ca7c:	003c0010 	.word	0x003c0010

0000ca80 <IRQHandler_Serial5>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
    ca80:	b508      	push	{r3, lr}
	Serial5.IRQHandler();
    ca82:	4802      	ldr	r0, [pc, #8]	; (ca8c <IRQHandler_Serial5+0xc>)
    ca84:	f7ff fded 	bl	c662 <HardwareSerial::IRQHandler()>
}
    ca88:	bd08      	pop	{r3, pc}
    ca8a:	bf00      	nop
    ca8c:	20004bf0 	.word	0x20004bf0

0000ca90 <_GLOBAL__sub_I_IRQHandler_Serial5>:
    ca90:	4b16      	ldr	r3, [pc, #88]	; (caec <_GLOBAL__sub_I_IRQHandler_Serial5+0x5c>)
    ca92:	2200      	movs	r2, #0
    ca94:	605a      	str	r2, [r3, #4]
    ca96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ca9a:	6099      	str	r1, [r3, #8]
    ca9c:	731a      	strb	r2, [r3, #12]
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    ca9e:	4914      	ldr	r1, [pc, #80]	; (caf0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    caa0:	6019      	str	r1, [r3, #0]
		port(myport), hardware(myhardware),
    caa2:	4914      	ldr	r1, [pc, #80]	; (caf4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    caa4:	6119      	str	r1, [r3, #16]
    caa6:	4914      	ldr	r1, [pc, #80]	; (caf8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    caa8:	6159      	str	r1, [r3, #20]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    caaa:	761a      	strb	r2, [r3, #24]
    caac:	765a      	strb	r2, [r3, #25]
    caae:	769a      	strb	r2, [r3, #26]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    cab0:	4912      	ldr	r1, [pc, #72]	; (cafc <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    cab2:	61d9      	str	r1, [r3, #28]
    cab4:	4912      	ldr	r1, [pc, #72]	; (cb00 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    cab6:	6219      	str	r1, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    cab8:	625a      	str	r2, [r3, #36]	; 0x24
    caba:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    cabc:	2028      	movs	r0, #40	; 0x28
    cabe:	62d8      	str	r0, [r3, #44]	; 0x2c
    cac0:	2140      	movs	r1, #64	; 0x40
    cac2:	6319      	str	r1, [r3, #48]	; 0x30
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    cac4:	6358      	str	r0, [r3, #52]	; 0x34
    cac6:	6399      	str	r1, [r3, #56]	; 0x38
    cac8:	63da      	str	r2, [r3, #60]	; 0x3c
    caca:	641a      	str	r2, [r3, #64]	; 0x40
    cacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    cad0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    cad4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    cad8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    cadc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    cae0:	651a      	str	r2, [r3, #80]	; 0x50
    cae2:	655a      	str	r2, [r3, #84]	; 0x54
    cae4:	659a      	str	r2, [r3, #88]	; 0x58
    cae6:	65da      	str	r2, [r3, #92]	; 0x5c
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    cae8:	4770      	bx	lr
    caea:	bf00      	nop
    caec:	20004bf0 	.word	0x20004bf0
    caf0:	200026a4 	.word	0x200026a4
    caf4:	401a0000 	.word	0x401a0000
    caf8:	20003644 	.word	0x20003644
    cafc:	20005068 	.word	0x20005068
    cb00:	20005028 	.word	0x20005028

0000cb04 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    cb06:	b179      	cbz	r1, cb28 <Print::write(unsigned char const*, unsigned int)+0x24>
    cb08:	4606      	mov	r6, r0
    cb0a:	460c      	mov	r4, r1
	size_t count = 0;
	while (size--) count += write(*buffer++);
    cb0c:	b172      	cbz	r2, cb2c <Print::write(unsigned char const*, unsigned int)+0x28>
    cb0e:	188f      	adds	r7, r1, r2
	size_t count = 0;
    cb10:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    cb12:	6833      	ldr	r3, [r6, #0]
    cb14:	681b      	ldr	r3, [r3, #0]
    cb16:	f814 1b01 	ldrb.w	r1, [r4], #1
    cb1a:	4630      	mov	r0, r6
    cb1c:	4798      	blx	r3
    cb1e:	4405      	add	r5, r0
    cb20:	42a7      	cmp	r7, r4
    cb22:	d1f6      	bne.n	cb12 <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    cb24:	4628      	mov	r0, r5
    cb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    cb28:	2500      	movs	r5, #0
    cb2a:	e7fb      	b.n	cb24 <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
    cb2c:	4615      	mov	r5, r2
    cb2e:	e7f9      	b.n	cb24 <Print::write(unsigned char const*, unsigned int)+0x20>

0000cb30 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    cb30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb34:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
    cb36:	688c      	ldr	r4, [r1, #8]
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    cb38:	b1ec      	cbz	r4, cb76 <Print::print(String const&)+0x46>
    cb3a:	4606      	mov	r6, r0
    cb3c:	4688      	mov	r8, r1
	unsigned int index = 0;
    cb3e:	2500      	movs	r5, #0
	size_t count = 0;
    cb40:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    cb42:	f04f 0921 	mov.w	r9, #33	; 0x21
    cb46:	462b      	mov	r3, r5
    cb48:	464a      	mov	r2, r9
    cb4a:	a901      	add	r1, sp, #4
    cb4c:	4640      	mov	r0, r8
    cb4e:	f000 fb8f 	bl	d270 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    cb52:	4622      	mov	r2, r4
    cb54:	2c20      	cmp	r4, #32
    cb56:	bf28      	it	cs
    cb58:	2220      	movcs	r2, #32
		index += nbytes;
    cb5a:	4415      	add	r5, r2
		len -= nbytes;
    cb5c:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    cb5e:	6833      	ldr	r3, [r6, #0]
    cb60:	685b      	ldr	r3, [r3, #4]
    cb62:	a901      	add	r1, sp, #4
    cb64:	4630      	mov	r0, r6
    cb66:	4798      	blx	r3
    cb68:	4407      	add	r7, r0
	while (len > 0) {
    cb6a:	2c00      	cmp	r4, #0
    cb6c:	d1eb      	bne.n	cb46 <Print::print(String const&)+0x16>
	}
	return count;
}
    cb6e:	4638      	mov	r0, r7
    cb70:	b00b      	add	sp, #44	; 0x2c
    cb72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
    cb76:	4627      	mov	r7, r4
	return count;
    cb78:	e7f9      	b.n	cb6e <Print::print(String const&)+0x3e>

0000cb7a <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    cb7a:	b500      	push	{lr}
    cb7c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    cb7e:	f640 230d 	movw	r3, #2573	; 0xa0d
    cb82:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    cb86:	6803      	ldr	r3, [r0, #0]
    cb88:	685b      	ldr	r3, [r3, #4]
    cb8a:	2202      	movs	r2, #2
    cb8c:	a901      	add	r1, sp, #4
    cb8e:	4798      	blx	r3
}
    cb90:	b003      	add	sp, #12
    cb92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000cb98 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    cb98:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
    cb9a:	4b04      	ldr	r3, [pc, #16]	; (cbac <_write+0x14>)
    cb9c:	2802      	cmp	r0, #2
    cb9e:	bf88      	it	hi
    cba0:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cba2:	6818      	ldr	r0, [r3, #0]
    cba4:	6844      	ldr	r4, [r0, #4]
    cba6:	4618      	mov	r0, r3
    cba8:	47a0      	blx	r4
}
    cbaa:	bd10      	pop	{r4, pc}
    cbac:	20003634 	.word	0x20003634

0000cbb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    cbb0:	b530      	push	{r4, r5, lr}
    cbb2:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    cbb4:	b92a      	cbnz	r2, cbc2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    cbb6:	6803      	ldr	r3, [r0, #0]
    cbb8:	681b      	ldr	r3, [r3, #0]
    cbba:	b2c9      	uxtb	r1, r1
    cbbc:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    cbbe:	b00b      	add	sp, #44	; 0x2c
    cbc0:	bd30      	pop	{r4, r5, pc}
    cbc2:	4696      	mov	lr, r2
		base = 10;
    cbc4:	2a01      	cmp	r2, #1
    cbc6:	bf14      	ite	ne
    cbc8:	4696      	movne	lr, r2
    cbca:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
    cbce:	b9b9      	cbnz	r1, cc00 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
    cbd0:	2230      	movs	r2, #48	; 0x30
    cbd2:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    cbd6:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
    cbda:	b14b      	cbz	r3, cbf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
    cbdc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    cbe0:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
    cbe4:	f10c 0328 	add.w	r3, ip, #40	; 0x28
    cbe8:	446b      	add	r3, sp
    cbea:	222d      	movs	r2, #45	; 0x2d
    cbec:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    cbf0:	6803      	ldr	r3, [r0, #0]
    cbf2:	685b      	ldr	r3, [r3, #4]
    cbf4:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
    cbf8:	a901      	add	r1, sp, #4
    cbfa:	4461      	add	r1, ip
    cbfc:	4798      	blx	r3
    cbfe:	e7de      	b.n	cbbe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
    cc00:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
    cc04:	4674      	mov	r4, lr
    cc06:	e004      	b.n	cc12 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
    cc08:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    cc0c:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
    cc10:	4611      	mov	r1, r2
			digit = n % base;
    cc12:	fbb1 f2fe 	udiv	r2, r1, lr
    cc16:	fb0e 1212 	mls	r2, lr, r2, r1
    cc1a:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cc1c:	2a09      	cmp	r2, #9
    cc1e:	bf94      	ite	ls
    cc20:	3230      	addls	r2, #48	; 0x30
    cc22:	3237      	addhi	r2, #55	; 0x37
    cc24:	b2d2      	uxtb	r2, r2
    cc26:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    cc2a:	446d      	add	r5, sp
    cc2c:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    cc30:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
    cc34:	428c      	cmp	r4, r1
    cc36:	d9e7      	bls.n	cc08 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
    cc38:	e7cf      	b.n	cbda <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>
    cc3a:	0000      	movs	r0, r0
    cc3c:	0000      	movs	r0, r0
	...

0000cc40 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    cc40:	b570      	push	{r4, r5, r6, lr}
    cc42:	ed2d 8b02 	vpush	{d8}
    cc46:	b086      	sub	sp, #24
    cc48:	4605      	mov	r5, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    cc4a:	eeb4 0b40 	vcmp.f64	d0, d0
    cc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc52:	d666      	bvs.n	cd22 <Print::printFloat(double, unsigned char)+0xe2>
    cc54:	460c      	mov	r4, r1
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    cc56:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    cc5a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; cd88 <Print::printFloat(double, unsigned char)+0x148>
    cc5e:	eeb4 7b46 	vcmp.f64	d7, d6
    cc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc66:	dc63      	bgt.n	cd30 <Print::printFloat(double, unsigned char)+0xf0>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    cc68:	ed9f 7b49 	vldr	d7, [pc, #292]	; cd90 <Print::printFloat(double, unsigned char)+0x150>
    cc6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
    cc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc74:	dc67      	bgt.n	cd46 <Print::printFloat(double, unsigned char)+0x106>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    cc76:	ed9f 7b48 	vldr	d7, [pc, #288]	; cd98 <Print::printFloat(double, unsigned char)+0x158>
    cc7a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc82:	d467      	bmi.n	cd54 <Print::printFloat(double, unsigned char)+0x114>
	
	// Handle negative numbers
	if (number < 0.0) {
    cc84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc8c:	d469      	bmi.n	cd62 <Print::printFloat(double, unsigned char)+0x122>
	uint8_t sign=0;
    cc8e:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    cc90:	2c00      	cmp	r4, #0
    cc92:	d06a      	beq.n	cd6a <Print::printFloat(double, unsigned char)+0x12a>
    cc94:	f04f 0c00 	mov.w	ip, #0
	double rounding = 0.5;
    cc98:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
		rounding *= 0.1;
    cc9c:	ed9f 6b40 	vldr	d6, [pc, #256]	; cda0 <Print::printFloat(double, unsigned char)+0x160>
    cca0:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    cca4:	f10c 0c01 	add.w	ip, ip, #1
    cca8:	fa5f f28c 	uxtb.w	r2, ip
    ccac:	4294      	cmp	r4, r2
    ccae:	d8f7      	bhi.n	cca0 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    ccb0:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    ccb4:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    ccb8:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    ccbc:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    ccc0:	220a      	movs	r2, #10
    ccc2:	ee17 1a90 	vmov	r1, s15
    ccc6:	4628      	mov	r0, r5
    ccc8:	f7ff ff72 	bl	cbb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    cccc:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    ccce:	232e      	movs	r3, #46	; 0x2e
    ccd0:	f88d 3008 	strb.w	r3, [sp, #8]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    ccd4:	2c0f      	cmp	r4, #15
    ccd6:	bf28      	it	cs
    ccd8:	240f      	movcs	r4, #15

		while (digits-- > 0) {
    ccda:	aa02      	add	r2, sp, #8
    ccdc:	1e60      	subs	r0, r4, #1
    ccde:	f10d 0309 	add.w	r3, sp, #9
    cce2:	fa53 f080 	uxtab	r0, r3, r0
			remainder *= 10.0;
    cce6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    ccea:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    ccee:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    ccf2:	edcd 7a01 	vstr	s15, [sp, #4]
    ccf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
    ccfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
    ccfe:	f802 1f01 	strb.w	r1, [r2, #1]!
			remainder -= n; 
    cd02:	ee07 3a90 	vmov	s15, r3
    cd06:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    cd0a:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    cd0e:	4282      	cmp	r2, r0
    cd10:	d1eb      	bne.n	ccea <Print::printFloat(double, unsigned char)+0xaa>
			buf[count++] = '0' + n;
    cd12:	3401      	adds	r4, #1
		}
		count += write(buf, count);
    cd14:	682b      	ldr	r3, [r5, #0]
    cd16:	685b      	ldr	r3, [r3, #4]
    cd18:	b2e2      	uxtb	r2, r4
    cd1a:	a902      	add	r1, sp, #8
    cd1c:	4628      	mov	r0, r5
    cd1e:	4798      	blx	r3
    cd20:	e00c      	b.n	cd3c <Print::printFloat(double, unsigned char)+0xfc>
							  return write((const uint8_t *)str, strlen(str)); }
    cd22:	6803      	ldr	r3, [r0, #0]
    cd24:	685b      	ldr	r3, [r3, #4]
    cd26:	2203      	movs	r2, #3
    cd28:	491f      	ldr	r1, [pc, #124]	; (cda8 <Print::printFloat(double, unsigned char)+0x168>)
    cd2a:	4798      	blx	r3
    cd2c:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    cd2e:	e005      	b.n	cd3c <Print::printFloat(double, unsigned char)+0xfc>
    cd30:	6803      	ldr	r3, [r0, #0]
    cd32:	685b      	ldr	r3, [r3, #4]
    cd34:	2203      	movs	r2, #3
    cd36:	491d      	ldr	r1, [pc, #116]	; (cdac <Print::printFloat(double, unsigned char)+0x16c>)
    cd38:	4798      	blx	r3
    cd3a:	4606      	mov	r6, r0
	}
	return count;
}
    cd3c:	4630      	mov	r0, r6
    cd3e:	b006      	add	sp, #24
    cd40:	ecbd 8b02 	vpop	{d8}
    cd44:	bd70      	pop	{r4, r5, r6, pc}
    cd46:	6803      	ldr	r3, [r0, #0]
    cd48:	685b      	ldr	r3, [r3, #4]
    cd4a:	2203      	movs	r2, #3
    cd4c:	4918      	ldr	r1, [pc, #96]	; (cdb0 <Print::printFloat(double, unsigned char)+0x170>)
    cd4e:	4798      	blx	r3
    cd50:	4606      	mov	r6, r0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    cd52:	e7f3      	b.n	cd3c <Print::printFloat(double, unsigned char)+0xfc>
    cd54:	6803      	ldr	r3, [r0, #0]
    cd56:	685b      	ldr	r3, [r3, #4]
    cd58:	2203      	movs	r2, #3
    cd5a:	4915      	ldr	r1, [pc, #84]	; (cdb0 <Print::printFloat(double, unsigned char)+0x170>)
    cd5c:	4798      	blx	r3
    cd5e:	4606      	mov	r6, r0
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    cd60:	e7ec      	b.n	cd3c <Print::printFloat(double, unsigned char)+0xfc>
		number = -number;
    cd62:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    cd66:	2301      	movs	r3, #1
    cd68:	e792      	b.n	cc90 <Print::printFloat(double, unsigned char)+0x50>
	number += rounding;
    cd6a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    cd6e:	ee30 0b07 	vadd.f64	d0, d0, d7
	count += printNumber(int_part, 10, sign);
    cd72:	220a      	movs	r2, #10
    cd74:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    cd78:	ee17 1a90 	vmov	r1, s15
    cd7c:	4628      	mov	r0, r5
    cd7e:	f7ff ff17 	bl	cbb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    cd82:	4606      	mov	r6, r0
	if (digits > 0) {
    cd84:	e7da      	b.n	cd3c <Print::printFloat(double, unsigned char)+0xfc>
    cd86:	bf00      	nop
    cd88:	ffffffff 	.word	0xffffffff
    cd8c:	7fefffff 	.word	0x7fefffff
    cd90:	e0000000 	.word	0xe0000000
    cd94:	41efffff 	.word	0x41efffff
    cd98:	e0000000 	.word	0xe0000000
    cd9c:	c1efffff 	.word	0xc1efffff
    cda0:	9999999a 	.word	0x9999999a
    cda4:	3fb99999 	.word	0x3fb99999
    cda8:	2000251c 	.word	0x2000251c
    cdac:	20002520 	.word	0x20002520
    cdb0:	20002524 	.word	0x20002524

0000cdb4 <Stream::timedPeek()>:
{
    cdb4:	b570      	push	{r4, r5, r6, lr}
    cdb6:	4604      	mov	r4, r0
    cdb8:	4b09      	ldr	r3, [pc, #36]	; (cde0 <Stream::timedPeek()+0x2c>)
    cdba:	681e      	ldr	r6, [r3, #0]
    cdbc:	461d      	mov	r5, r3
    c = peek();
    cdbe:	6823      	ldr	r3, [r4, #0]
    cdc0:	699b      	ldr	r3, [r3, #24]
    cdc2:	4620      	mov	r0, r4
    cdc4:	4798      	blx	r3
    if (c >= 0) return c;
    cdc6:	2800      	cmp	r0, #0
    cdc8:	da08      	bge.n	cddc <Stream::timedPeek()+0x28>
    yield();
    cdca:	f002 fb25 	bl	f418 <yield>
    cdce:	682b      	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    cdd0:	1b9b      	subs	r3, r3, r6
    cdd2:	68a2      	ldr	r2, [r4, #8]
    cdd4:	4293      	cmp	r3, r2
    cdd6:	d3f2      	bcc.n	cdbe <Stream::timedPeek()+0xa>
  return -1;     // -1 indicates timeout
    cdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    cddc:	bd70      	pop	{r4, r5, r6, pc}
    cdde:	bf00      	nop
    cde0:	200057f8 	.word	0x200057f8

0000cde4 <Stream::peekNextDigit()>:
{
    cde4:	b510      	push	{r4, lr}
    cde6:	4604      	mov	r4, r0
    cde8:	e003      	b.n	cdf2 <Stream::peekNextDigit()+0xe>
    read();  // discard non-numeric
    cdea:	6823      	ldr	r3, [r4, #0]
    cdec:	695b      	ldr	r3, [r3, #20]
    cdee:	4620      	mov	r0, r4
    cdf0:	4798      	blx	r3
    c = timedPeek();
    cdf2:	4620      	mov	r0, r4
    cdf4:	f7ff ffde 	bl	cdb4 <Stream::timedPeek()>
    if (c == '-') return c;
    cdf8:	282d      	cmp	r0, #45	; 0x2d
    cdfa:	d005      	beq.n	ce08 <Stream::peekNextDigit()+0x24>
    cdfc:	2800      	cmp	r0, #0
    cdfe:	db03      	blt.n	ce08 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    ce00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ce04:	2b09      	cmp	r3, #9
    ce06:	d8f0      	bhi.n	cdea <Stream::peekNextDigit()+0x6>
}
    ce08:	bd10      	pop	{r4, pc}
	...

0000ce0c <Stream::parseFloat(char)>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce10:	ed2d 8b02 	vpush	{d8}
    ce14:	4604      	mov	r4, r0
    ce16:	460d      	mov	r5, r1
  boolean isFraction = false;
  long value = 0;
  int c;
  float fraction = 1.0;

  c = peekNextDigit();
    ce18:	f7ff ffe4 	bl	cde4 <Stream::peekNextDigit()>
    // ignore non numeric leading characters
  if(c < 0)
    ce1c:	2800      	cmp	r0, #0
    ce1e:	db45      	blt.n	ceac <Stream::parseFloat(char)+0xa0>
  float fraction = 1.0;
    ce20:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  long value = 0;
    ce24:	f04f 0900 	mov.w	r9, #0
  boolean isFraction = false;
    ce28:	464f      	mov	r7, r9
  boolean isNegative = false;
    ce2a:	46c8      	mov	r8, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    ce2c:	2601      	movs	r6, #1
    else if (c == '.')
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1f;
    ce2e:	eddf 8a21 	vldr	s17, [pc, #132]	; ceb4 <Stream::parseFloat(char)+0xa8>
    ce32:	e00f      	b.n	ce54 <Stream::parseFloat(char)+0x48>
      isNegative = true;
    ce34:	46b0      	mov	r8, r6
    }
    read();  // consume the character we got with peek
    ce36:	6823      	ldr	r3, [r4, #0]
    ce38:	695b      	ldr	r3, [r3, #20]
    ce3a:	4620      	mov	r0, r4
    ce3c:	4798      	blx	r3
    c = timedPeek();
    ce3e:	4620      	mov	r0, r4
    ce40:	f7ff ffb8 	bl	cdb4 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
    ce44:	4285      	cmp	r5, r0
    ce46:	bf18      	it	ne
    ce48:	282e      	cmpne	r0, #46	; 0x2e
    ce4a:	d003      	beq.n	ce54 <Stream::parseFloat(char)+0x48>
    ce4c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ce50:	2b09      	cmp	r3, #9
    ce52:	d816      	bhi.n	ce82 <Stream::parseFloat(char)+0x76>
    if(c == skipChar)
    ce54:	4285      	cmp	r5, r0
    ce56:	d0ee      	beq.n	ce36 <Stream::parseFloat(char)+0x2a>
    else if(c == '-')
    ce58:	282d      	cmp	r0, #45	; 0x2d
    ce5a:	d0eb      	beq.n	ce34 <Stream::parseFloat(char)+0x28>
    else if (c == '.')
    ce5c:	282e      	cmp	r0, #46	; 0x2e
    ce5e:	d00e      	beq.n	ce7e <Stream::parseFloat(char)+0x72>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    ce60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ce64:	2b09      	cmp	r3, #9
    ce66:	d8e6      	bhi.n	ce36 <Stream::parseFloat(char)+0x2a>
      value = value * 10 + c - '0';
    ce68:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    ce6c:	eb00 0049 	add.w	r0, r0, r9, lsl #1
    ce70:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
      if(isFraction)
    ce74:	2f00      	cmp	r7, #0
    ce76:	d0de      	beq.n	ce36 <Stream::parseFloat(char)+0x2a>
         fraction *= 0.1f;
    ce78:	ee28 8a28 	vmul.f32	s16, s16, s17
    ce7c:	e7db      	b.n	ce36 <Stream::parseFloat(char)+0x2a>
      isFraction = true;
    ce7e:	4637      	mov	r7, r6
    ce80:	e7d9      	b.n	ce36 <Stream::parseFloat(char)+0x2a>

  if(isNegative)
    ce82:	f1b8 0f00 	cmp.w	r8, #0
    ce86:	d001      	beq.n	ce8c <Stream::parseFloat(char)+0x80>
    value = -value;
    ce88:	f1c9 0900 	rsb	r9, r9, #0
  if(isFraction)
    ce8c:	b14f      	cbz	r7, cea2 <Stream::parseFloat(char)+0x96>
    return value * fraction;
    ce8e:	ee07 9a90 	vmov	s15, r9
    ce92:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    ce96:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
    ce9a:	ecbd 8b02 	vpop	{d8}
    ce9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return value;
    cea2:	ee07 9a90 	vmov	s15, r9
    cea6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    ceaa:	e7f6      	b.n	ce9a <Stream::parseFloat(char)+0x8e>
    return 0; // zero returned if timeout
    ceac:	ed9f 0a02 	vldr	s0, [pc, #8]	; ceb8 <Stream::parseFloat(char)+0xac>
    ceb0:	e7f3      	b.n	ce9a <Stream::parseFloat(char)+0x8e>
    ceb2:	bf00      	nop
    ceb4:	3dcccccd 	.word	0x3dcccccd
    ceb8:	00000000 	.word	0x00000000

0000cebc <Stream::parseFloat()>:
{
    cebc:	b508      	push	{r3, lr}
  return parseFloat(NO_SKIP_CHAR);
    cebe:	2101      	movs	r1, #1
    cec0:	f7ff ffa4 	bl	ce0c <Stream::parseFloat(char)>
}
    cec4:	bd08      	pop	{r3, pc}
	...

0000cec8 <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    cecc:	4b59      	ldr	r3, [pc, #356]	; (d034 <breakTime(unsigned long, DateTimeFields&)+0x16c>)
    cece:	fba3 4200 	umull	r4, r2, r3, r0
    ced2:	0952      	lsrs	r2, r2, #5
    ced4:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    ced8:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    cedc:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.min = time % 60;
    cede:	fba3 0302 	umull	r0, r3, r3, r2
    cee2:	095b      	lsrs	r3, r3, #5
    cee4:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    cee8:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
    ceec:	704a      	strb	r2, [r1, #1]
  time /= 60; // now it is hours
  tm.hour = time % 24;
    ceee:	4a52      	ldr	r2, [pc, #328]	; (d038 <breakTime(unsigned long, DateTimeFields&)+0x170>)
    cef0:	fba2 2e03 	umull	r2, lr, r2, r3
    cef4:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    cef8:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
    cefc:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    cf00:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    cf02:	f10e 0204 	add.w	r2, lr, #4
    cf06:	4b4d      	ldr	r3, [pc, #308]	; (d03c <breakTime(unsigned long, DateTimeFields&)+0x174>)
    cf08:	fba3 0302 	umull	r0, r3, r3, r2
    cf0c:	1ad0      	subs	r0, r2, r3
    cf0e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    cf12:	089b      	lsrs	r3, r3, #2
    cf14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    cf18:	1ad2      	subs	r2, r2, r3
    cf1a:	70ca      	strb	r2, [r1, #3]

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cf1c:	2000      	movs	r0, #0
  days = 0;
    cf1e:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cf20:	f240 176d 	movw	r7, #365	; 0x16d
    cf24:	4e46      	ldr	r6, [pc, #280]	; (d040 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cf26:	f04f 0864 	mov.w	r8, #100	; 0x64
    cf2a:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
    cf2e:	f44f 79c8 	mov.w	r9, #400	; 0x190
    cf32:	e004      	b.n	cf3e <breakTime(unsigned long, DateTimeFields&)+0x76>
    cf34:	463c      	mov	r4, r7
    cf36:	4422      	add	r2, r4
    cf38:	3001      	adds	r0, #1
    cf3a:	4596      	cmp	lr, r2
    cf3c:	d319      	bcc.n	cf72 <breakTime(unsigned long, DateTimeFields&)+0xaa>
    cf3e:	fa5f fc80 	uxtb.w	ip, r0
    cf42:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
    cf46:	f013 0503 	ands.w	r5, r3, #3
    cf4a:	d1f3      	bne.n	cf34 <breakTime(unsigned long, DateTimeFields&)+0x6c>
    cf4c:	fb86 b403 	smull	fp, r4, r6, r3
    cf50:	1164      	asrs	r4, r4, #5
    cf52:	fb08 3414 	mls	r4, r8, r4, r3
    cf56:	b954      	cbnz	r4, cf6e <breakTime(unsigned long, DateTimeFields&)+0xa6>
    cf58:	fb86 b403 	smull	fp, r4, r6, r3
    cf5c:	11e4      	asrs	r4, r4, #7
    cf5e:	fb09 3414 	mls	r4, r9, r4, r3
    cf62:	2c00      	cmp	r4, #0
    cf64:	bf14      	ite	ne
    cf66:	463c      	movne	r4, r7
    cf68:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    cf6c:	e7e3      	b.n	cf36 <breakTime(unsigned long, DateTimeFields&)+0x6e>
    cf6e:	4654      	mov	r4, sl
    cf70:	e7e1      	b.n	cf36 <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    cf72:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
    cf76:	f881 c006 	strb.w	ip, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    cf7a:	b9b5      	cbnz	r5, cfaa <breakTime(unsigned long, DateTimeFields&)+0xe2>
    cf7c:	4830      	ldr	r0, [pc, #192]	; (d040 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cf7e:	fb80 4003 	smull	r4, r0, r0, r3
    cf82:	1140      	asrs	r0, r0, #5
    cf84:	2464      	movs	r4, #100	; 0x64
    cf86:	fb04 3010 	mls	r0, r4, r0, r3
    cf8a:	bb50      	cbnz	r0, cfe2 <breakTime(unsigned long, DateTimeFields&)+0x11a>
    cf8c:	482c      	ldr	r0, [pc, #176]	; (d040 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cf8e:	fb80 4003 	smull	r4, r0, r0, r3
    cf92:	11c0      	asrs	r0, r0, #7
    cf94:	f44f 74c8 	mov.w	r4, #400	; 0x190
    cf98:	fb04 3010 	mls	r0, r4, r0, r3
    cf9c:	2800      	cmp	r0, #0
    cf9e:	f240 106d 	movw	r0, #365	; 0x16d
    cfa2:	bf08      	it	eq
    cfa4:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    cfa8:	e001      	b.n	cfae <breakTime(unsigned long, DateTimeFields&)+0xe6>
    cfaa:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    cfae:	ebae 0e02 	sub.w	lr, lr, r2
    cfb2:	eb00 020e 	add.w	r2, r0, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    cfb6:	4f22      	ldr	r7, [pc, #136]	; (d040 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cfb8:	fb87 0703 	smull	r0, r7, r7, r3
    cfbc:	ea4f 1e67 	mov.w	lr, r7, asr #5
    cfc0:	2064      	movs	r0, #100	; 0x64
    cfc2:	fb00 3e1e 	mls	lr, r0, lr, r3
    cfc6:	11ff      	asrs	r7, r7, #7
    cfc8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cfcc:	fb00 3717 	mls	r7, r0, r7, r3
    cfd0:	2301      	movs	r3, #1
    cfd2:	2000      	movs	r0, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    cfd4:	f8df c06c 	ldr.w	ip, [pc, #108]	; d044 <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
    cfd8:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
    cfdc:	f04f 091d 	mov.w	r9, #29
    cfe0:	e014      	b.n	d00c <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
    cfe2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    cfe6:	e7e2      	b.n	cfae <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
    cfe8:	b94d      	cbnz	r5, cffe <breakTime(unsigned long, DateTimeFields&)+0x136>
    cfea:	f1be 0f00 	cmp.w	lr, #0
    cfee:	d11c      	bne.n	d02a <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
    cff0:	2f00      	cmp	r7, #0
    cff2:	bf14      	ite	ne
    cff4:	241c      	movne	r4, #28
    cff6:	241d      	moveq	r4, #29
    cff8:	e002      	b.n	d000 <breakTime(unsigned long, DateTimeFields&)+0x138>
    cffa:	4633      	mov	r3, r6
    cffc:	e010      	b.n	d020 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
    cffe:	4644      	mov	r4, r8
    }

    if (time >= monthLength) {
    d000:	4294      	cmp	r4, r2
    d002:	d814      	bhi.n	d02e <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
    d004:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    d006:	3001      	adds	r0, #1
    d008:	3301      	adds	r3, #1
    d00a:	b2db      	uxtb	r3, r3
    d00c:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
    d00e:	2e01      	cmp	r6, #1
    d010:	d0ea      	beq.n	cfe8 <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
    d012:	f810 400c 	ldrb.w	r4, [r0, ip]
    d016:	4294      	cmp	r4, r2
    d018:	d8ef      	bhi.n	cffa <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    d01a:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    d01c:	2b0b      	cmp	r3, #11
    d01e:	d9f2      	bls.n	d006 <breakTime(unsigned long, DateTimeFields&)+0x13e>
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
    d020:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
    d022:	3201      	adds	r2, #1
    d024:	710a      	strb	r2, [r1, #4]
}
    d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
    d02a:	464c      	mov	r4, r9
    d02c:	e7e8      	b.n	d000 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
    d02e:	4633      	mov	r3, r6
    d030:	e7f6      	b.n	d020 <breakTime(unsigned long, DateTimeFields&)+0x158>
    d032:	bf00      	nop
    d034:	88888889 	.word	0x88888889
    d038:	aaaaaaab 	.word	0xaaaaaaab
    d03c:	24924925 	.word	0x24924925
    d040:	51eb851f 	.word	0x51eb851f
    d044:	20001f78 	.word	0x20001f78

0000d048 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    d048:	b510      	push	{r4, lr}
    d04a:	4604      	mov	r4, r0
{
	free(buffer);
    d04c:	6800      	ldr	r0, [r0, #0]
    d04e:	f004 f8c9 	bl	111e4 <free>
}
    d052:	4620      	mov	r0, r4
    d054:	bd10      	pop	{r4, pc}

0000d056 <String::changeBuffer(unsigned int)>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    d056:	b538      	push	{r3, r4, r5, lr}
    d058:	4604      	mov	r4, r0
    d05a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    d05c:	3101      	adds	r1, #1
    d05e:	6800      	ldr	r0, [r0, #0]
    d060:	f005 f936 	bl	122d0 <realloc>
	if (newbuffer) {
    d064:	b118      	cbz	r0, d06e <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
    d066:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    d068:	6065      	str	r5, [r4, #4]
		return 1;
    d06a:	2001      	movs	r0, #1
	}
	return 0;
}
    d06c:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    d06e:	2000      	movs	r0, #0
    d070:	e7fc      	b.n	d06c <String::changeBuffer(unsigned int)+0x16>

0000d072 <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
    d072:	6843      	ldr	r3, [r0, #4]
    d074:	428b      	cmp	r3, r1
    d076:	d301      	bcc.n	d07c <String::reserve(unsigned int)+0xa>
    d078:	2001      	movs	r0, #1
}
    d07a:	4770      	bx	lr
{
    d07c:	b510      	push	{r4, lr}
    d07e:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
    d080:	f7ff ffe9 	bl	d056 <String::changeBuffer(unsigned int)>
    d084:	b900      	cbnz	r0, d088 <String::reserve(unsigned int)+0x16>
}
    d086:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
    d088:	68a3      	ldr	r3, [r4, #8]
    d08a:	b923      	cbnz	r3, d096 <String::reserve(unsigned int)+0x24>
    d08c:	6823      	ldr	r3, [r4, #0]
    d08e:	2200      	movs	r2, #0
    d090:	701a      	strb	r2, [r3, #0]
		return 1;
    d092:	2001      	movs	r0, #1
    d094:	e7f7      	b.n	d086 <String::reserve(unsigned int)+0x14>
    d096:	2001      	movs	r0, #1
    d098:	e7f5      	b.n	d086 <String::reserve(unsigned int)+0x14>

0000d09a <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    d09a:	b570      	push	{r4, r5, r6, lr}
    d09c:	4604      	mov	r4, r0
	if (length == 0) {
    d09e:	b932      	cbnz	r2, d0ae <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
    d0a0:	6803      	ldr	r3, [r0, #0]
    d0a2:	b103      	cbz	r3, d0a6 <String::copy(char const*, unsigned int)+0xc>
    d0a4:	701a      	strb	r2, [r3, #0]
		len = 0;
    d0a6:	2300      	movs	r3, #0
    d0a8:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    d0aa:	4620      	mov	r0, r4
    d0ac:	bd70      	pop	{r4, r5, r6, pc}
    d0ae:	460d      	mov	r5, r1
    d0b0:	4616      	mov	r6, r2
	if (!reserve(length)) {
    d0b2:	4611      	mov	r1, r2
    d0b4:	f7ff ffdd 	bl	d072 <String::reserve(unsigned int)>
    d0b8:	b948      	cbnz	r0, d0ce <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
    d0ba:	6820      	ldr	r0, [r4, #0]
    d0bc:	b118      	cbz	r0, d0c6 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    d0be:	f004 f891 	bl	111e4 <free>
			buffer = NULL;
    d0c2:	2300      	movs	r3, #0
    d0c4:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
    d0c6:	2300      	movs	r3, #0
    d0c8:	6063      	str	r3, [r4, #4]
    d0ca:	60a3      	str	r3, [r4, #8]
		return *this;
    d0cc:	e7ed      	b.n	d0aa <String::copy(char const*, unsigned int)+0x10>
	len = length;
    d0ce:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    d0d0:	4629      	mov	r1, r5
    d0d2:	6820      	ldr	r0, [r4, #0]
    d0d4:	f004 fc9a 	bl	11a0c <strcpy>
	return *this;
    d0d8:	e7e7      	b.n	d0aa <String::copy(char const*, unsigned int)+0x10>

0000d0da <String::String(char const*)>:
String::String(const char *cstr)
    d0da:	b538      	push	{r3, r4, r5, lr}
    d0dc:	4604      	mov	r4, r0
	buffer = NULL;
    d0de:	2300      	movs	r3, #0
    d0e0:	6003      	str	r3, [r0, #0]
	capacity = 0;
    d0e2:	6043      	str	r3, [r0, #4]
	len = 0;
    d0e4:	6083      	str	r3, [r0, #8]
	flags = 0;
    d0e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    d0e8:	b141      	cbz	r1, d0fc <String::String(char const*)+0x22>
    d0ea:	460d      	mov	r5, r1
    d0ec:	4608      	mov	r0, r1
    d0ee:	f005 fa27 	bl	12540 <strlen>
    d0f2:	4602      	mov	r2, r0
    d0f4:	4629      	mov	r1, r5
    d0f6:	4620      	mov	r0, r4
    d0f8:	f7ff ffcf 	bl	d09a <String::copy(char const*, unsigned int)>
}
    d0fc:	4620      	mov	r0, r4
    d0fe:	bd38      	pop	{r3, r4, r5, pc}

0000d100 <String::move(String&)>:

void String::move(String &rhs)
{
	if (&rhs == this) return;
    d100:	4281      	cmp	r1, r0
    d102:	d011      	beq.n	d128 <String::move(String&)+0x28>
{
    d104:	b538      	push	{r3, r4, r5, lr}
    d106:	4605      	mov	r5, r0
    d108:	460c      	mov	r4, r1
	if (buffer) free(buffer);
    d10a:	6800      	ldr	r0, [r0, #0]
    d10c:	b108      	cbz	r0, d112 <String::move(String&)+0x12>
    d10e:	f004 f869 	bl	111e4 <free>
	buffer = rhs.buffer;
    d112:	6823      	ldr	r3, [r4, #0]
    d114:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    d116:	6863      	ldr	r3, [r4, #4]
    d118:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    d11a:	68a3      	ldr	r3, [r4, #8]
    d11c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    d11e:	2300      	movs	r3, #0
    d120:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    d122:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    d124:	60a3      	str	r3, [r4, #8]
}
    d126:	bd38      	pop	{r3, r4, r5, pc}
    d128:	4770      	bx	lr

0000d12a <String::operator=(String const&)>:

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    d12a:	4288      	cmp	r0, r1
    d12c:	d005      	beq.n	d13a <String::operator=(String const&)+0x10>
{
    d12e:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
    d130:	688a      	ldr	r2, [r1, #8]
    d132:	6809      	ldr	r1, [r1, #0]
    d134:	f7ff ffb1 	bl	d09a <String::copy(char const*, unsigned int)>
}
    d138:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
    d13a:	4608      	mov	r0, r1
}
    d13c:	4770      	bx	lr

0000d13e <String::String(String const&)>:
String::String(const String &value)
    d13e:	b510      	push	{r4, lr}
    d140:	4604      	mov	r4, r0
	buffer = NULL;
    d142:	2300      	movs	r3, #0
    d144:	6003      	str	r3, [r0, #0]
	capacity = 0;
    d146:	6043      	str	r3, [r0, #4]
	len = 0;
    d148:	6083      	str	r3, [r0, #8]
	flags = 0;
    d14a:	7303      	strb	r3, [r0, #12]
	*this = value;
    d14c:	f7ff ffed 	bl	d12a <String::operator=(String const&)>
}
    d150:	4620      	mov	r0, r4
    d152:	bd10      	pop	{r4, pc}

0000d154 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    d154:	b510      	push	{r4, lr}
    d156:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    d158:	4288      	cmp	r0, r1
    d15a:	d001      	beq.n	d160 <String::operator=(String&&)+0xc>
    d15c:	f7ff ffd0 	bl	d100 <String::move(String&)>
	return *this;
}
    d160:	4620      	mov	r0, r4
    d162:	bd10      	pop	{r4, pc}

0000d164 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    d164:	b538      	push	{r3, r4, r5, lr}
    d166:	4604      	mov	r4, r0
	if (cstr) {
    d168:	b151      	cbz	r1, d180 <String::operator=(char const*)+0x1c>
    d16a:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
    d16c:	4608      	mov	r0, r1
    d16e:	f005 f9e7 	bl	12540 <strlen>
    d172:	4602      	mov	r2, r0
    d174:	4629      	mov	r1, r5
    d176:	4620      	mov	r0, r4
    d178:	f7ff ff8f 	bl	d09a <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    d17c:	4620      	mov	r0, r4
    d17e:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
    d180:	2300      	movs	r3, #0
    d182:	6083      	str	r3, [r0, #8]
    d184:	e7fa      	b.n	d17c <String::operator=(char const*)+0x18>

0000d186 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    d186:	b510      	push	{r4, lr}
    d188:	b08a      	sub	sp, #40	; 0x28
    d18a:	4604      	mov	r4, r0
    d18c:	4608      	mov	r0, r1
	buffer = NULL;
    d18e:	2300      	movs	r3, #0
    d190:	6023      	str	r3, [r4, #0]
	capacity = 0;
    d192:	6063      	str	r3, [r4, #4]
	len = 0;
    d194:	60a3      	str	r3, [r4, #8]
	flags = 0;
    d196:	7323      	strb	r3, [r4, #12]
	itoa(value, buf, base);
    d198:	a901      	add	r1, sp, #4
    d19a:	f003 ffff 	bl	1119c <itoa>
	*this = buf;
    d19e:	a901      	add	r1, sp, #4
    d1a0:	4620      	mov	r0, r4
    d1a2:	f7ff ffdf 	bl	d164 <String::operator=(char const*)>
}
    d1a6:	4620      	mov	r0, r4
    d1a8:	b00a      	add	sp, #40	; 0x28
    d1aa:	bd10      	pop	{r4, pc}

0000d1ac <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    d1ac:	b510      	push	{r4, lr}
    d1ae:	b08a      	sub	sp, #40	; 0x28
    d1b0:	4604      	mov	r4, r0
	buffer = NULL;
    d1b2:	2300      	movs	r3, #0
    d1b4:	6003      	str	r3, [r0, #0]
	capacity = 0;
    d1b6:	6043      	str	r3, [r0, #4]
	len = 0;
    d1b8:	6083      	str	r3, [r0, #8]
	flags = 0;
    d1ba:	7303      	strb	r3, [r0, #12]
	*this = dtostrf(num, digits + 2, digits, buf);
    d1bc:	466a      	mov	r2, sp
    d1be:	1c88      	adds	r0, r1, #2
    d1c0:	f000 fb9e 	bl	d900 <dtostrf>
    d1c4:	4601      	mov	r1, r0
    d1c6:	4620      	mov	r0, r4
    d1c8:	f7ff ffcc 	bl	d164 <String::operator=(char const*)>
}
    d1cc:	4620      	mov	r0, r4
    d1ce:	b00a      	add	sp, #40	; 0x28
    d1d0:	bd10      	pop	{r4, pc}

0000d1d2 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    d1d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d1d6:	4604      	mov	r4, r0
    d1d8:	460d      	mov	r5, r1
    d1da:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
    d1dc:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    d1de:	6803      	ldr	r3, [r0, #0]
    d1e0:	42ab      	cmp	r3, r5
    d1e2:	d806      	bhi.n	d1f2 <String::append(char const*, unsigned int)+0x20>
    d1e4:	185a      	adds	r2, r3, r1
    d1e6:	4295      	cmp	r5, r2
    d1e8:	d209      	bcs.n	d1fe <String::append(char const*, unsigned int)+0x2c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    d1ea:	1aef      	subs	r7, r5, r3
		self = true;
    d1ec:	f04f 0901 	mov.w	r9, #1
    d1f0:	e001      	b.n	d1f6 <String::append(char const*, unsigned int)+0x24>
	bool self = false;
    d1f2:	f04f 0900 	mov.w	r9, #0
	}
	if (length == 0 || !reserve(newlen)) return *this;
    d1f6:	b92e      	cbnz	r6, d204 <String::append(char const*, unsigned int)+0x32>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    d1f8:	4620      	mov	r0, r4
    d1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    d1fe:	f04f 0900 	mov.w	r9, #0
    d202:	e7f8      	b.n	d1f6 <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
    d204:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
    d208:	4641      	mov	r1, r8
    d20a:	4620      	mov	r0, r4
    d20c:	f7ff ff31 	bl	d072 <String::reserve(unsigned int)>
    d210:	2800      	cmp	r0, #0
    d212:	d0f1      	beq.n	d1f8 <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
    d214:	f1b9 0f00 	cmp.w	r9, #0
    d218:	d00d      	beq.n	d236 <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
    d21a:	6823      	ldr	r3, [r4, #0]
    d21c:	68a0      	ldr	r0, [r4, #8]
    d21e:	4632      	mov	r2, r6
    d220:	19d9      	adds	r1, r3, r7
    d222:	4418      	add	r0, r3
    d224:	f000 fa98 	bl	d758 <memcpy>
		buffer[newlen] = 0;
    d228:	6823      	ldr	r3, [r4, #0]
    d22a:	2200      	movs	r2, #0
    d22c:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
    d230:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
    d234:	e7e0      	b.n	d1f8 <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
    d236:	6820      	ldr	r0, [r4, #0]
    d238:	68a3      	ldr	r3, [r4, #8]
    d23a:	4629      	mov	r1, r5
    d23c:	4418      	add	r0, r3
    d23e:	f004 fbe5 	bl	11a0c <strcpy>
    d242:	e7f5      	b.n	d230 <String::append(char const*, unsigned int)+0x5e>

0000d244 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    d244:	b510      	push	{r4, lr}
    d246:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    d248:	688a      	ldr	r2, [r1, #8]
    d24a:	6809      	ldr	r1, [r1, #0]
    d24c:	f7ff ffc1 	bl	d1d2 <String::append(char const*, unsigned int)>
	return a;
}
    d250:	4620      	mov	r0, r4
    d252:	bd10      	pop	{r4, pc}

0000d254 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    d254:	b538      	push	{r3, r4, r5, lr}
    d256:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    d258:	b141      	cbz	r1, d26c <operator+(StringSumHelper const&, char const*)+0x18>
    d25a:	460d      	mov	r5, r1
    d25c:	4608      	mov	r0, r1
    d25e:	f005 f96f 	bl	12540 <strlen>
    d262:	4602      	mov	r2, r0
    d264:	4629      	mov	r1, r5
    d266:	4620      	mov	r0, r4
    d268:	f7ff ffb3 	bl	d1d2 <String::append(char const*, unsigned int)>
	return a;
}
    d26c:	4620      	mov	r0, r4
    d26e:	bd38      	pop	{r3, r4, r5, pc}

0000d270 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    d270:	b1b2      	cbz	r2, d2a0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
    d272:	b538      	push	{r3, r4, r5, lr}
    d274:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    d276:	b124      	cbz	r4, d282 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    d278:	6885      	ldr	r5, [r0, #8]
    d27a:	429d      	cmp	r5, r3
    d27c:	d802      	bhi.n	d284 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    d27e:	2300      	movs	r3, #0
    d280:	7023      	strb	r3, [r4, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    d282:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    d284:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    d286:	1e51      	subs	r1, r2, #1
    d288:	428d      	cmp	r5, r1
    d28a:	bf28      	it	cs
    d28c:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
    d28e:	6801      	ldr	r1, [r0, #0]
    d290:	462a      	mov	r2, r5
    d292:	4419      	add	r1, r3
    d294:	4620      	mov	r0, r4
    d296:	f003 ff4f 	bl	11138 <strncpy>
	buf[n] = 0;
    d29a:	2300      	movs	r3, #0
    d29c:	5563      	strb	r3, [r4, r5]
    d29e:	e7f0      	b.n	d282 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
    d2a0:	4770      	bx	lr
	...

0000d2a4 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    d2a4:	282a      	cmp	r0, #42	; 0x2a
    d2a6:	d83e      	bhi.n	d326 <analogRead+0x82>
{
    d2a8:	b570      	push	{r4, r5, r6, lr}
    d2aa:	4604      	mov	r4, r0
	if (calibrating) wait_for_cal();
    d2ac:	4b20      	ldr	r3, [pc, #128]	; (d330 <analogRead+0x8c>)
    d2ae:	781b      	ldrb	r3, [r3, #0]
    d2b0:	b9b3      	cbnz	r3, d2e0 <analogRead+0x3c>
	uint8_t ch = pin_to_channel[pin];
    d2b2:	4b20      	ldr	r3, [pc, #128]	; (d334 <analogRead+0x90>)
    d2b4:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    d2b6:	2bff      	cmp	r3, #255	; 0xff
    d2b8:	d037      	beq.n	d32a <analogRead+0x86>
	if(!(ch & 0x80)) {
    d2ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    d2be:	d120      	bne.n	d302 <analogRead+0x5e>
		ADC1_HC0 = ch;
    d2c0:	4a1d      	ldr	r2, [pc, #116]	; (d338 <analogRead+0x94>)
    d2c2:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    d2c4:	6a13      	ldr	r3, [r2, #32]
    d2c6:	f013 0f01 	tst.w	r3, #1
    d2ca:	d106      	bne.n	d2da <analogRead+0x36>
    d2cc:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    d2ce:	f002 f8a3 	bl	f418 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    d2d2:	6a23      	ldr	r3, [r4, #32]
    d2d4:	f013 0f01 	tst.w	r3, #1
    d2d8:	d0f9      	beq.n	d2ce <analogRead+0x2a>
		return ADC1_R0;
    d2da:	4b17      	ldr	r3, [pc, #92]	; (d338 <analogRead+0x94>)
    d2dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    d2de:	bd70      	pop	{r4, r5, r6, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    d2e0:	4d15      	ldr	r5, [pc, #84]	; (d338 <analogRead+0x94>)
    d2e2:	4e16      	ldr	r6, [pc, #88]	; (d33c <analogRead+0x98>)
    d2e4:	e001      	b.n	d2ea <analogRead+0x46>
		yield();
    d2e6:	f002 f897 	bl	f418 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    d2ea:	6cab      	ldr	r3, [r5, #72]	; 0x48
    d2ec:	f013 0f80 	tst.w	r3, #128	; 0x80
    d2f0:	d1f9      	bne.n	d2e6 <analogRead+0x42>
    d2f2:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    d2f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    d2f8:	d1f5      	bne.n	d2e6 <analogRead+0x42>
	calibrating = 0;
    d2fa:	4b0d      	ldr	r3, [pc, #52]	; (d330 <analogRead+0x8c>)
    d2fc:	2200      	movs	r2, #0
    d2fe:	701a      	strb	r2, [r3, #0]
}
    d300:	e7d7      	b.n	d2b2 <analogRead+0xe>
		ADC2_HC0 = ch & 0x7f;
    d302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d306:	4a0d      	ldr	r2, [pc, #52]	; (d33c <analogRead+0x98>)
    d308:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    d30a:	6a13      	ldr	r3, [r2, #32]
    d30c:	f013 0f01 	tst.w	r3, #1
    d310:	d106      	bne.n	d320 <analogRead+0x7c>
    d312:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    d314:	f002 f880 	bl	f418 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    d318:	6a23      	ldr	r3, [r4, #32]
    d31a:	f013 0f01 	tst.w	r3, #1
    d31e:	d0f9      	beq.n	d314 <analogRead+0x70>
		return ADC2_R0;
    d320:	4b06      	ldr	r3, [pc, #24]	; (d33c <analogRead+0x98>)
    d322:	6a58      	ldr	r0, [r3, #36]	; 0x24
    d324:	e7db      	b.n	d2de <analogRead+0x3a>
	if (pin > sizeof(pin_to_channel)) return 0;
    d326:	2000      	movs	r0, #0
}
    d328:	4770      	bx	lr
	if (ch == 255) return 0;
    d32a:	2000      	movs	r0, #0
    d32c:	e7d7      	b.n	d2de <analogRead+0x3a>
    d32e:	bf00      	nop
    d330:	20005839 	.word	0x20005839
    d334:	20002fd4 	.word	0x20002fd4
    d338:	400c4000 	.word	0x400c4000
    d33c:	400c8000 	.word	0x400c8000

0000d340 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    d340:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    d342:	4b8e      	ldr	r3, [pc, #568]	; (d57c <set_arm_clock+0x23c>)
    d344:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    d346:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    d348:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
    d34c:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    d34e:	4b8c      	ldr	r3, [pc, #560]	; (d580 <set_arm_clock+0x240>)
    d350:	4298      	cmp	r0, r3
    d352:	d915      	bls.n	d380 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    d354:	4b8b      	ldr	r3, [pc, #556]	; (d584 <set_arm_clock+0x244>)
    d356:	4298      	cmp	r0, r3
    d358:	d96d      	bls.n	d436 <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    d35a:	4b8b      	ldr	r3, [pc, #556]	; (d588 <set_arm_clock+0x248>)
    d35c:	4403      	add	r3, r0
    d35e:	0a1b      	lsrs	r3, r3, #8
    d360:	498a      	ldr	r1, [pc, #552]	; (d58c <set_arm_clock+0x24c>)
    d362:	fba1 1303 	umull	r1, r3, r1, r3
    d366:	09db      	lsrs	r3, r3, #7
    d368:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d36c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d370:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
    d374:	f240 6127 	movw	r1, #1575	; 0x627
    d378:	428b      	cmp	r3, r1
    d37a:	bf28      	it	cs
    d37c:	460b      	movcs	r3, r1
    d37e:	e007      	b.n	d390 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    d380:	4e83      	ldr	r6, [pc, #524]	; (d590 <set_arm_clock+0x250>)
    d382:	f240 437e 	movw	r3, #1150	; 0x47e
    d386:	f240 31b6 	movw	r1, #950	; 0x3b6
    d38a:	42b0      	cmp	r0, r6
    d38c:	bf98      	it	ls
    d38e:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d390:	4e7a      	ldr	r6, [pc, #488]	; (d57c <set_arm_clock+0x23c>)
    d392:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    d396:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    d39a:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d39e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    d3a2:	497c      	ldr	r1, [pc, #496]	; (d594 <set_arm_clock+0x254>)
    d3a4:	fba1 1303 	umull	r1, r3, r1, r3
    d3a8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    d3ac:	f004 011f 	and.w	r1, r4, #31
    d3b0:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    d3b4:	d209      	bcs.n	d3ca <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d3b6:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d3ba:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    d3be:	4b76      	ldr	r3, [pc, #472]	; (d598 <set_arm_clock+0x258>)
    d3c0:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d3c2:	4619      	mov	r1, r3
    d3c4:	680b      	ldr	r3, [r1, #0]
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	dafc      	bge.n	d3c4 <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    d3ca:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
    d3ce:	d12a      	bne.n	d426 <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    d3d0:	4972      	ldr	r1, [pc, #456]	; (d59c <set_arm_clock+0x25c>)
    d3d2:	690e      	ldr	r6, [r1, #16]
    d3d4:	4972      	ldr	r1, [pc, #456]	; (d5a0 <set_arm_clock+0x260>)
    d3d6:	43b1      	bics	r1, r6
    d3d8:	d030      	beq.n	d43c <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    d3da:	4619      	mov	r1, r3
			sel = 1;
    d3dc:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    d3de:	06ce      	lsls	r6, r1, #27
    d3e0:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
    d3e4:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
    d3e8:	d004      	beq.n	d3f4 <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    d3ea:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    d3ee:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
    d3f0:	4962      	ldr	r1, [pc, #392]	; (d57c <set_arm_clock+0x23c>)
    d3f2:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    d3f4:	0319      	lsls	r1, r3, #12
    d3f6:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
    d3fa:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    d3fe:	d009      	beq.n	d414 <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    d400:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    d404:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
    d406:	4b5d      	ldr	r3, [pc, #372]	; (d57c <set_arm_clock+0x23c>)
    d408:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    d40a:	461a      	mov	r2, r3
    d40c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d40e:	f013 0f08 	tst.w	r3, #8
    d412:	d1fb      	bne.n	d40c <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    d414:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    d418:	4b58      	ldr	r3, [pc, #352]	; (d57c <set_arm_clock+0x23c>)
    d41a:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d41c:	461a      	mov	r2, r3
    d41e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d420:	f013 0f20 	tst.w	r3, #32
    d424:	d1fb      	bne.n	d41e <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    d426:	4b5f      	ldr	r3, [pc, #380]	; (d5a4 <set_arm_clock+0x264>)
    d428:	4298      	cmp	r0, r3
    d42a:	d817      	bhi.n	d45c <set_arm_clock+0x11c>
    d42c:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    d42e:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    d430:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
    d432:	4e5c      	ldr	r6, [pc, #368]	; (d5a4 <set_arm_clock+0x264>)
    d434:	e00e      	b.n	d454 <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
    d436:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d43a:	e7a9      	b.n	d390 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
    d43c:	2103      	movs	r1, #3
    d43e:	e7ce      	b.n	d3de <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    d440:	2904      	cmp	r1, #4
    d442:	d80e      	bhi.n	d462 <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
    d444:	3101      	adds	r1, #1
				div_arm = 1;
    d446:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d448:	fb01 f302 	mul.w	r3, r1, r2
    d44c:	fb00 f303 	mul.w	r3, r0, r3
    d450:	42b3      	cmp	r3, r6
    d452:	d806      	bhi.n	d462 <set_arm_clock+0x122>
		if (div_arm < 8) {
    d454:	2a07      	cmp	r2, #7
    d456:	d8f3      	bhi.n	d440 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    d458:	3201      	adds	r2, #1
    d45a:	e7f5      	b.n	d448 <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
    d45c:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    d45e:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    d460:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d462:	4851      	ldr	r0, [pc, #324]	; (d5a8 <set_arm_clock+0x268>)
    d464:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
    d466:	4b51      	ldr	r3, [pc, #324]	; (d5ac <set_arm_clock+0x26c>)
    d468:	4298      	cmp	r0, r3
    d46a:	f200 8083 	bhi.w	d574 <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d46e:	4b50      	ldr	r3, [pc, #320]	; (d5b0 <set_arm_clock+0x270>)
    d470:	fba3 0300 	umull	r0, r3, r3, r0
    d474:	0d1b      	lsrs	r3, r3, #20
    d476:	2b36      	cmp	r3, #54	; 0x36
    d478:	bf38      	it	cc
    d47a:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    d47c:	484d      	ldr	r0, [pc, #308]	; (d5b4 <set_arm_clock+0x274>)
    d47e:	fb03 f000 	mul.w	r0, r3, r0
    d482:	fbb0 f0f2 	udiv	r0, r0, r2
    d486:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d48a:	4e44      	ldr	r6, [pc, #272]	; (d59c <set_arm_clock+0x25c>)
    d48c:	6836      	ldr	r6, [r6, #0]
    d48e:	4f4a      	ldr	r7, [pc, #296]	; (d5b8 <set_arm_clock+0x278>)
    d490:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d492:	4e4a      	ldr	r6, [pc, #296]	; (d5bc <set_arm_clock+0x27c>)
    d494:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d496:	42b7      	cmp	r7, r6
    d498:	d009      	beq.n	d4ae <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    d49a:	4e40      	ldr	r6, [pc, #256]	; (d59c <set_arm_clock+0x25c>)
    d49c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    d4a0:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    d4a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    d4a6:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    d4a8:	6833      	ldr	r3, [r6, #0]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	dafc      	bge.n	d4a8 <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    d4ae:	4b33      	ldr	r3, [pc, #204]	; (d57c <set_arm_clock+0x23c>)
    d4b0:	691b      	ldr	r3, [r3, #16]
    d4b2:	3a01      	subs	r2, #1
    d4b4:	f003 0307 	and.w	r3, r3, #7
    d4b8:	4293      	cmp	r3, r2
    d4ba:	d008      	beq.n	d4ce <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    d4bc:	f002 0207 	and.w	r2, r2, #7
    d4c0:	4b2e      	ldr	r3, [pc, #184]	; (d57c <set_arm_clock+0x23c>)
    d4c2:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    d4c4:	461a      	mov	r2, r3
    d4c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d4c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d4cc:	d1fb      	bne.n	d4c6 <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d4ce:	3901      	subs	r1, #1
    d4d0:	028b      	lsls	r3, r1, #10
    d4d2:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
    d4d6:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    d4da:	d00b      	beq.n	d4f4 <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    d4dc:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    d4e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
    d4e4:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
    d4e6:	4b25      	ldr	r3, [pc, #148]	; (d57c <set_arm_clock+0x23c>)
    d4e8:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    d4ea:	461a      	mov	r2, r3
    d4ec:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d4ee:	f013 0f02 	tst.w	r3, #2
    d4f2:	d1fb      	bne.n	d4ec <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d4f4:	4932      	ldr	r1, [pc, #200]	; (d5c0 <set_arm_clock+0x280>)
    d4f6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    d4f8:	4a32      	ldr	r2, [pc, #200]	; (d5c4 <set_arm_clock+0x284>)
    d4fa:	4291      	cmp	r1, r2
    d4fc:	d83c      	bhi.n	d578 <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d4fe:	09c9      	lsrs	r1, r1, #7
    d500:	4b31      	ldr	r3, [pc, #196]	; (d5c8 <set_arm_clock+0x288>)
    d502:	fba3 3101 	umull	r3, r1, r3, r1
    d506:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    d508:	1e4b      	subs	r3, r1, #1
    d50a:	021a      	lsls	r2, r3, #8
    d50c:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    d510:	f413 7f40 	tst.w	r3, #768	; 0x300
    d514:	d006      	beq.n	d524 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    d516:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d51a:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d51e:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    d520:	4b16      	ldr	r3, [pc, #88]	; (d57c <set_arm_clock+0x23c>)
    d522:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    d524:	4a15      	ldr	r2, [pc, #84]	; (d57c <set_arm_clock+0x23c>)
    d526:	6953      	ldr	r3, [r2, #20]
    d528:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    d52c:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d52e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d530:	f013 0f20 	tst.w	r3, #32
    d534:	d1fb      	bne.n	d52e <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
    d536:	4b25      	ldr	r3, [pc, #148]	; (d5cc <set_arm_clock+0x28c>)
    d538:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    d53a:	fbb0 f1f1 	udiv	r1, r0, r1
    d53e:	4b24      	ldr	r3, [pc, #144]	; (d5d0 <set_arm_clock+0x290>)
    d540:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d542:	4b24      	ldr	r3, [pc, #144]	; (d5d4 <set_arm_clock+0x294>)
    d544:	fba3 2300 	umull	r2, r3, r3, r0
    d548:	0c9b      	lsrs	r3, r3, #18
    d54a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d54e:	fbb2 f3f3 	udiv	r3, r2, r3
    d552:	4a21      	ldr	r2, [pc, #132]	; (d5d8 <set_arm_clock+0x298>)
    d554:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d556:	f004 031f 	and.w	r3, r4, #31
    d55a:	459c      	cmp	ip, r3
    d55c:	d208      	bcs.n	d570 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d55e:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d562:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    d566:	4a0c      	ldr	r2, [pc, #48]	; (d598 <set_arm_clock+0x258>)
    d568:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d56a:	6813      	ldr	r3, [r2, #0]
    d56c:	2b00      	cmp	r3, #0
    d56e:	dafc      	bge.n	d56a <set_arm_clock+0x22a>
	}

	return frequency;
}
    d570:	bcf0      	pop	{r4, r5, r6, r7}
    d572:	4770      	bx	lr
	if (mult > 108) mult = 108;
    d574:	236c      	movs	r3, #108	; 0x6c
    d576:	e781      	b.n	d47c <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
    d578:	2104      	movs	r1, #4
    d57a:	e7c5      	b.n	d508 <set_arm_clock+0x1c8>
    d57c:	400fc000 	.word	0x400fc000
    d580:	1f78a400 	.word	0x1f78a400
    d584:	23c34600 	.word	0x23c34600
    d588:	dc3cba00 	.word	0xdc3cba00
    d58c:	004cb223 	.word	0x004cb223
    d590:	016e3600 	.word	0x016e3600
    d594:	51eb851f 	.word	0x51eb851f
    d598:	40080000 	.word	0x40080000
    d59c:	400d8000 	.word	0x400d8000
    d5a0:	80003040 	.word	0x80003040
    d5a4:	269fb1ff 	.word	0x269fb1ff
    d5a8:	005b8d80 	.word	0x005b8d80
    d5ac:	4df67eff 	.word	0x4df67eff
    d5b0:	165e9f81 	.word	0x165e9f81
    d5b4:	00b71b00 	.word	0x00b71b00
    d5b8:	8001307f 	.word	0x8001307f
    d5bc:	80002000 	.word	0x80002000
    d5c0:	08f0d17f 	.word	0x08f0d17f
    d5c4:	2cb4177f 	.word	0x2cb4177f
    d5c8:	00e5109f 	.word	0x00e5109f
    d5cc:	20003600 	.word	0x20003600
    d5d0:	200035fc 	.word	0x200035fc
    d5d4:	431bde83 	.word	0x431bde83
    d5d8:	200057c4 	.word	0x200057c4

0000d5dc <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    d5dc:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d5de:	4b0f      	ldr	r3, [pc, #60]	; (d61c <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d5e0:	4d0f      	ldr	r5, [pc, #60]	; (d620 <micros+0x44>)
		scc = systick_cycle_count;
    d5e2:	4c10      	ldr	r4, [pc, #64]	; (d624 <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d5e4:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d5e8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    d5ec:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    d5ee:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d5f0:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    d5f4:	2a00      	cmp	r2, #0
    d5f6:	d1f7      	bne.n	d5e8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d5f8:	4b0b      	ldr	r3, [pc, #44]	; (d628 <micros+0x4c>)
    d5fa:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d5fc:	4a0b      	ldr	r2, [pc, #44]	; (d62c <micros+0x50>)
    d5fe:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
    d600:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d602:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    d606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d60a:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
    d60e:	429a      	cmp	r2, r3
    d610:	bf94      	ite	ls
    d612:	1880      	addls	r0, r0, r2
    d614:	18c0      	addhi	r0, r0, r3
    d616:	bc30      	pop	{r4, r5}
    d618:	4770      	bx	lr
    d61a:	bf00      	nop
    d61c:	200057fc 	.word	0x200057fc
    d620:	200057f8 	.word	0x200057f8
    d624:	200057f4 	.word	0x200057f4
    d628:	e0001000 	.word	0xe0001000
    d62c:	200057c4 	.word	0x200057c4

0000d630 <delay>:
	if (msec == 0) return;
    d630:	b900      	cbnz	r0, d634 <delay+0x4>
    d632:	4770      	bx	lr
{
    d634:	b538      	push	{r3, r4, r5, lr}
    d636:	4605      	mov	r5, r0
	start = micros();
    d638:	f7ff ffd0 	bl	d5dc <micros>
    d63c:	4604      	mov	r4, r0
    d63e:	e001      	b.n	d644 <delay+0x14>
		yield();
    d640:	f001 feea 	bl	f418 <yield>
		while ((micros() - start) >= 1000) {
    d644:	f7ff ffca 	bl	d5dc <micros>
    d648:	1b00      	subs	r0, r0, r4
    d64a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    d64e:	d3f7      	bcc.n	d640 <delay+0x10>
			if (--msec == 0) return;
    d650:	3d01      	subs	r5, #1
    d652:	d002      	beq.n	d65a <delay+0x2a>
			start += 1000;
    d654:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    d658:	e7f4      	b.n	d644 <delay+0x14>
}
    d65a:	bd38      	pop	{r3, r4, r5, pc}

0000d65c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d65c:	2836      	cmp	r0, #54	; 0x36
    d65e:	d81b      	bhi.n	d698 <digitalWrite+0x3c>
{
    d660:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d662:	4b0e      	ldr	r3, [pc, #56]	; (d69c <digitalWrite+0x40>)
    d664:	0102      	lsls	r2, r0, #4
    d666:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d66a:	589b      	ldr	r3, [r3, r2]
    d66c:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
    d66e:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
    d670:	4214      	tst	r4, r2
    d672:	d008      	beq.n	d686 <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
    d674:	b121      	cbz	r1, d680 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
    d676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d67a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d67e:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
    d680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    d684:	e7f9      	b.n	d67a <digitalWrite+0x1e>
		if (val) {
    d686:	b119      	cbz	r1, d690 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d688:	6883      	ldr	r3, [r0, #8]
    d68a:	4a05      	ldr	r2, [pc, #20]	; (d6a0 <digitalWrite+0x44>)
    d68c:	601a      	str	r2, [r3, #0]
    d68e:	e7f4      	b.n	d67a <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d690:	6883      	ldr	r3, [r0, #8]
    d692:	4a04      	ldr	r2, [pc, #16]	; (d6a4 <digitalWrite+0x48>)
    d694:	601a      	str	r2, [r3, #0]
    d696:	e7f0      	b.n	d67a <digitalWrite+0x1e>
    d698:	4770      	bx	lr
    d69a:	bf00      	nop
    d69c:	20002ba4 	.word	0x20002ba4
    d6a0:	0001f038 	.word	0x0001f038
    d6a4:	00013038 	.word	0x00013038

0000d6a8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    d6a8:	2836      	cmp	r0, #54	; 0x36
    d6aa:	d80b      	bhi.n	d6c4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    d6ac:	4b06      	ldr	r3, [pc, #24]	; (d6c8 <digitalRead+0x20>)
    d6ae:	0102      	lsls	r2, r0, #4
    d6b0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    d6b4:	589b      	ldr	r3, [r3, r2]
    d6b6:	689a      	ldr	r2, [r3, #8]
    d6b8:	68c3      	ldr	r3, [r0, #12]
    d6ba:	421a      	tst	r2, r3
    d6bc:	bf14      	ite	ne
    d6be:	2001      	movne	r0, #1
    d6c0:	2000      	moveq	r0, #0
    d6c2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    d6c4:	2000      	movs	r0, #0
}
    d6c6:	4770      	bx	lr
    d6c8:	20002ba4 	.word	0x20002ba4

0000d6cc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d6cc:	2836      	cmp	r0, #54	; 0x36
    d6ce:	d832      	bhi.n	d736 <pinMode+0x6a>
{
    d6d0:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d6d2:	4b19      	ldr	r3, [pc, #100]	; (d738 <pinMode+0x6c>)
    d6d4:	0102      	lsls	r2, r0, #4
    d6d6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d6da:	2901      	cmp	r1, #1
    d6dc:	d00c      	beq.n	d6f8 <pinMode+0x2c>
    d6de:	2904      	cmp	r1, #4
    d6e0:	d00a      	beq.n	d6f8 <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d6e2:	589a      	ldr	r2, [r3, r2]
    d6e4:	6853      	ldr	r3, [r2, #4]
    d6e6:	68c4      	ldr	r4, [r0, #12]
    d6e8:	ea23 0304 	bic.w	r3, r3, r4
    d6ec:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
    d6ee:	b9a9      	cbnz	r1, d71c <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d6f0:	6883      	ldr	r3, [r0, #8]
    d6f2:	2238      	movs	r2, #56	; 0x38
    d6f4:	601a      	str	r2, [r3, #0]
    d6f6:	e00b      	b.n	d710 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d6f8:	589a      	ldr	r2, [r3, r2]
    d6fa:	6853      	ldr	r3, [r2, #4]
    d6fc:	68c4      	ldr	r4, [r0, #12]
    d6fe:	4323      	orrs	r3, r4
    d700:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
    d702:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d704:	6883      	ldr	r3, [r0, #8]
    d706:	bf0c      	ite	eq
    d708:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d70a:	f640 0238 	movwne	r2, #2104	; 0x838
    d70e:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d710:	6843      	ldr	r3, [r0, #4]
    d712:	2215      	movs	r2, #21
    d714:	601a      	str	r2, [r3, #0]
}
    d716:	f85d 4b04 	ldr.w	r4, [sp], #4
    d71a:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    d71c:	2902      	cmp	r1, #2
    d71e:	d006      	beq.n	d72e <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
    d720:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d722:	6883      	ldr	r3, [r0, #8]
    d724:	bf0c      	ite	eq
    d726:	4a05      	ldreq	r2, [pc, #20]	; (d73c <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d728:	4a05      	ldrne	r2, [pc, #20]	; (d740 <pinMode+0x74>)
    d72a:	601a      	str	r2, [r3, #0]
    d72c:	e7f0      	b.n	d710 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d72e:	6883      	ldr	r3, [r0, #8]
    d730:	4a04      	ldr	r2, [pc, #16]	; (d744 <pinMode+0x78>)
    d732:	601a      	str	r2, [r3, #0]
    d734:	e7ec      	b.n	d710 <pinMode+0x44>
    d736:	4770      	bx	lr
    d738:	20002ba4 	.word	0x20002ba4
    d73c:	00013038 	.word	0x00013038
    d740:	00010038 	.word	0x00010038
    d744:	0001f038 	.word	0x0001f038

0000d748 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    d748:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    d74a:	f7f5 fb07 	bl	2d5c <setup>
	while (1) {
		loop();
    d74e:	f7f5 fedf 	bl	3510 <loop>
		yield();
    d752:	f001 fe61 	bl	f418 <yield>
	while (1) {
    d756:	e7fa      	b.n	d74e <main+0x6>

0000d758 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d758:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d75a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d75e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d762:	d16d      	bne.n	d840 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d764:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d766:	d341      	bcc.n	d7ec <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d768:	f851 3b04 	ldr.w	r3, [r1], #4
    d76c:	f840 3b04 	str.w	r3, [r0], #4
    d770:	f851 3b04 	ldr.w	r3, [r1], #4
    d774:	f840 3b04 	str.w	r3, [r0], #4
    d778:	f851 3b04 	ldr.w	r3, [r1], #4
    d77c:	f840 3b04 	str.w	r3, [r0], #4
    d780:	f851 3b04 	ldr.w	r3, [r1], #4
    d784:	f840 3b04 	str.w	r3, [r0], #4
    d788:	f851 3b04 	ldr.w	r3, [r1], #4
    d78c:	f840 3b04 	str.w	r3, [r0], #4
    d790:	f851 3b04 	ldr.w	r3, [r1], #4
    d794:	f840 3b04 	str.w	r3, [r0], #4
    d798:	f851 3b04 	ldr.w	r3, [r1], #4
    d79c:	f840 3b04 	str.w	r3, [r0], #4
    d7a0:	f851 3b04 	ldr.w	r3, [r1], #4
    d7a4:	f840 3b04 	str.w	r3, [r0], #4
    d7a8:	f851 3b04 	ldr.w	r3, [r1], #4
    d7ac:	f840 3b04 	str.w	r3, [r0], #4
    d7b0:	f851 3b04 	ldr.w	r3, [r1], #4
    d7b4:	f840 3b04 	str.w	r3, [r0], #4
    d7b8:	f851 3b04 	ldr.w	r3, [r1], #4
    d7bc:	f840 3b04 	str.w	r3, [r0], #4
    d7c0:	f851 3b04 	ldr.w	r3, [r1], #4
    d7c4:	f840 3b04 	str.w	r3, [r0], #4
    d7c8:	f851 3b04 	ldr.w	r3, [r1], #4
    d7cc:	f840 3b04 	str.w	r3, [r0], #4
    d7d0:	f851 3b04 	ldr.w	r3, [r1], #4
    d7d4:	f840 3b04 	str.w	r3, [r0], #4
    d7d8:	f851 3b04 	ldr.w	r3, [r1], #4
    d7dc:	f840 3b04 	str.w	r3, [r0], #4
    d7e0:	f851 3b04 	ldr.w	r3, [r1], #4
    d7e4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d7e8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d7ea:	d2bd      	bcs.n	d768 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d7ec:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d7ee:	d311      	bcc.n	d814 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d7f0:	f851 3b04 	ldr.w	r3, [r1], #4
    d7f4:	f840 3b04 	str.w	r3, [r0], #4
    d7f8:	f851 3b04 	ldr.w	r3, [r1], #4
    d7fc:	f840 3b04 	str.w	r3, [r0], #4
    d800:	f851 3b04 	ldr.w	r3, [r1], #4
    d804:	f840 3b04 	str.w	r3, [r0], #4
    d808:	f851 3b04 	ldr.w	r3, [r1], #4
    d80c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d810:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d812:	d2ed      	bcs.n	d7f0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d814:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d816:	d305      	bcc.n	d824 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d818:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d81c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d820:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d822:	d2f9      	bcs.n	d818 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d824:	3204      	adds	r2, #4
	beq	.Ldone
    d826:	d008      	beq.n	d83a <memcpy+0xe2>

	lsls	r2, r2, #31
    d828:	07d2      	lsls	r2, r2, #31
	itt ne
    d82a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d82c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d830:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d834:	d301      	bcc.n	d83a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d836:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d838:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d83a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d83c:	4770      	bx	lr
    d83e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d840:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d842:	d313      	bcc.n	d86c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d844:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d846:	d08d      	beq.n	d764 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d848:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d84c:	d08a      	beq.n	d764 <memcpy+0xc>

	rsb	r3, #4
    d84e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d852:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d854:	07db      	lsls	r3, r3, #31
	itt ne
    d856:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d858:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d85c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d860:	d380      	bcc.n	d764 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d862:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d866:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d86a:	e77b      	b.n	d764 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d86c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d86e:	d3d9      	bcc.n	d824 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d870:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d872:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d876:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d87a:	d2f9      	bcs.n	d870 <memcpy+0x118>

	ldrb	r3, [r1]
    d87c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d87e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d880:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d882:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d884:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d886:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d888:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d88a:	4770      	bx	lr

0000d88c <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
    d88c:	b508      	push	{r3, lr}
	return malloc(size);
    d88e:	f003 fca1 	bl	111d4 <malloc>
}
    d892:	bd08      	pop	{r3, pc}

0000d894 <operator delete(void*, unsigned int)>:
{
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
    d894:	b508      	push	{r3, lr}
	free(ptr);
    d896:	f003 fca5 	bl	111e4 <free>
}
    d89a:	bd08      	pop	{r3, pc}

0000d89c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d89c:	b530      	push	{r4, r5, lr}
    d89e:	4684      	mov	ip, r0
    d8a0:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
    d8a2:	3901      	subs	r1, #1
{
    d8a4:	460d      	mov	r5, r1
	int i=0, j;
    d8a6:	f04f 0e00 	mov.w	lr, #0
    d8aa:	e002      	b.n	d8b2 <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d8ac:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
    d8b0:	469c      	mov	ip, r3
		digit = val % radix;
    d8b2:	fbbc f3f2 	udiv	r3, ip, r2
    d8b6:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d8ba:	2b09      	cmp	r3, #9
    d8bc:	bf94      	ite	ls
    d8be:	3330      	addls	r3, #48	; 0x30
    d8c0:	3337      	addhi	r3, #55	; 0x37
    d8c2:	b2db      	uxtb	r3, r3
    d8c4:	4674      	mov	r4, lr
    d8c6:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
    d8ca:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
    d8ce:	4562      	cmp	r2, ip
    d8d0:	d9ec      	bls.n	d8ac <ultoa+0x10>
	}
	buf[i + 1] = 0;
    d8d2:	1c63      	adds	r3, r4, #1
    d8d4:	eb00 0c03 	add.w	ip, r0, r3
    d8d8:	2200      	movs	r2, #0
    d8da:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
    d8dc:	4596      	cmp	lr, r2
    d8de:	dd0e      	ble.n	d8fe <ultoa+0x62>
		t = buf[j];
    d8e0:	460a      	mov	r2, r1
    d8e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
    d8e6:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    d8ea:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
    d8ec:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
    d8f0:	3202      	adds	r2, #2
    d8f2:	1a12      	subs	r2, r2, r0
    d8f4:	1a43      	subs	r3, r0, r1
    d8f6:	3b01      	subs	r3, #1
    d8f8:	4423      	add	r3, r4
    d8fa:	429a      	cmp	r2, r3
    d8fc:	dbf0      	blt.n	d8e0 <ultoa+0x44>
	}
	return buf;
}
    d8fe:	bd30      	pop	{r4, r5, pc}

0000d900 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d904:	ed2d 8b02 	vpush	{d8}
    d908:	b084      	sub	sp, #16
    d90a:	eeb0 8a40 	vmov.f32	s16, s0
    d90e:	4605      	mov	r5, r0
    d910:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d912:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    d916:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
    d91a:	eeb4 0a40 	vcmp.f32	s0, s0
    d91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d922:	d62c      	bvs.n	d97e <dtostrf+0x7e>
    d924:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d926:	eef0 7ac0 	vabs.f32	s15, s0
    d92a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; dbec <dtostrf+0x2ec>
    d92e:	eef4 7a47 	vcmp.f32	s15, s14
    d932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d936:	dd52      	ble.n	d9de <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
    d938:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d940:	bf4c      	ite	mi
    d942:	2304      	movmi	r3, #4
    d944:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d946:	4293      	cmp	r3, r2
    d948:	f280 817c 	bge.w	dc44 <dtostrf+0x344>
    d94c:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d94e:	2800      	cmp	r0, #0
    d950:	f280 817b 	bge.w	dc4a <dtostrf+0x34a>
			while (awidth) {
    d954:	2a00      	cmp	r2, #0
    d956:	f000 813b 	beq.w	dbd0 <dtostrf+0x2d0>
    d95a:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d95c:	2220      	movs	r2, #32
    d95e:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d962:	42a3      	cmp	r3, r4
    d964:	d1fb      	bne.n	d95e <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d966:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d96e:	f140 8127 	bpl.w	dbc0 <dtostrf+0x2c0>
    d972:	2200      	movs	r2, #0
    d974:	461c      	mov	r4, r3
    d976:	232d      	movs	r3, #45	; 0x2d
    d978:	f804 3b01 	strb.w	r3, [r4], #1
    d97c:	e16b      	b.n	dc56 <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
    d97e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d986:	bf4c      	ite	mi
    d988:	2304      	movmi	r3, #4
    d98a:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d98c:	4293      	cmp	r3, r2
    d98e:	f280 8133 	bge.w	dbf8 <dtostrf+0x2f8>
    d992:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d994:	2800      	cmp	r0, #0
    d996:	f280 8132 	bge.w	dbfe <dtostrf+0x2fe>
			while (awidth) {
    d99a:	2a00      	cmp	r2, #0
    d99c:	f000 810c 	beq.w	dbb8 <dtostrf+0x2b8>
    d9a0:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d9a2:	2220      	movs	r2, #32
    d9a4:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d9a8:	429c      	cmp	r4, r3
    d9aa:	d1fb      	bne.n	d9a4 <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d9ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d9b0:	ee18 2a10 	vmov	r2, s16
    d9b4:	2a00      	cmp	r2, #0
    d9b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d9ba:	fe67 7a87 	vselge.f32	s15, s15, s14
    d9be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d9c6:	f140 80f0 	bpl.w	dbaa <dtostrf+0x2aa>
    d9ca:	2200      	movs	r2, #0
    d9cc:	461c      	mov	r4, r3
    d9ce:	232d      	movs	r3, #45	; 0x2d
    d9d0:	f804 3b01 	strb.w	r3, [r4], #1
    d9d4:	e122      	b.n	dc1c <dtostrf+0x31c>
    d9d6:	4623      	mov	r3, r4
    d9d8:	e7f8      	b.n	d9cc <dtostrf+0xcc>
    d9da:	4623      	mov	r3, r4
    d9dc:	e7ca      	b.n	d974 <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d9de:	468a      	mov	sl, r1
    d9e0:	aa02      	add	r2, sp, #8
    d9e2:	a903      	add	r1, sp, #12
    d9e4:	4640      	mov	r0, r8
    d9e6:	f003 ffd9 	bl	1199c <fcvtf>
    d9ea:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d9ec:	9b03      	ldr	r3, [sp, #12]
    d9ee:	ea58 0203 	orrs.w	r2, r8, r3
    d9f2:	d131      	bne.n	da58 <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d9f4:	7802      	ldrb	r2, [r0, #0]
    d9f6:	487e      	ldr	r0, [pc, #504]	; (dbf0 <dtostrf+0x2f0>)
    d9f8:	4f7e      	ldr	r7, [pc, #504]	; (dbf4 <dtostrf+0x2f4>)
    d9fa:	2a34      	cmp	r2, #52	; 0x34
    d9fc:	bf98      	it	ls
    d9fe:	4607      	movls	r7, r0
		decpt++;
    da00:	2301      	movs	r3, #1
    da02:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
    da04:	461e      	mov	r6, r3
    da06:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    da08:	f1b8 0e00 	subs.w	lr, r8, #0
    da0c:	bf18      	it	ne
    da0e:	f04f 0e01 	movne.w	lr, #1
    da12:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
    da16:	d036      	beq.n	da86 <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    da18:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
    da1c:	4443      	add	r3, r8
    da1e:	4283      	cmp	r3, r0
    da20:	d26d      	bcs.n	dafe <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    da22:	f1b8 0f00 	cmp.w	r8, #0
    da26:	dd06      	ble.n	da36 <dtostrf+0x136>
				val *= 10.0f;
    da28:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    da2c:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    da30:	f1ba 0a01 	subs.w	sl, sl, #1
    da34:	d1fa      	bne.n	da2c <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    da36:	aa02      	add	r2, sp, #8
    da38:	a901      	add	r1, sp, #4
    da3a:	4650      	mov	r0, sl
    da3c:	eeb0 0a48 	vmov.f32	s0, s16
    da40:	f003 ffac 	bl	1199c <fcvtf>
    da44:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    da46:	9903      	ldr	r1, [sp, #12]
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	1a5a      	subs	r2, r3, r1
    da4c:	f108 0301 	add.w	r3, r8, #1
    da50:	429a      	cmp	r2, r3
    da52:	d051      	beq.n	daf8 <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
    da54:	46ce      	mov	lr, r9
    da56:	e016      	b.n	da86 <dtostrf+0x186>
	if (-decpt  > (int)precision) {
    da58:	425b      	negs	r3, r3
    da5a:	4598      	cmp	r8, r3
    da5c:	da03      	bge.n	da66 <dtostrf+0x166>
		decpt = -precision;
    da5e:	f1c8 0300 	rsb	r3, r8, #0
    da62:	9303      	str	r3, [sp, #12]
		s = "0";
    da64:	4f62      	ldr	r7, [pc, #392]	; (dbf0 <dtostrf+0x2f0>)
	reqd = strlen(s);
    da66:	4638      	mov	r0, r7
    da68:	f004 fd6a 	bl	12540 <strlen>
    da6c:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
    da6e:	9b03      	ldr	r3, [sp, #12]
    da70:	4283      	cmp	r3, r0
    da72:	bfb8      	it	lt
    da74:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
    da76:	2b00      	cmp	r3, #0
    da78:	d1c6      	bne.n	da08 <dtostrf+0x108>
    da7a:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
    da7c:	f1b8 0e00 	subs.w	lr, r8, #0
    da80:	bf18      	it	ne
    da82:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    da86:	f8dd 8008 	ldr.w	r8, [sp, #8]
    da8a:	f1b8 0f00 	cmp.w	r8, #0
    da8e:	f000 80a3 	beq.w	dbd8 <dtostrf+0x2d8>
    da92:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
    da94:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    da96:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    da9a:	f1b9 0f00 	cmp.w	r9, #0
    da9e:	dd30      	ble.n	db02 <dtostrf+0x202>
		e += pad;
    daa0:	464b      	mov	r3, r9
    daa2:	444a      	add	r2, r9
	p = buf;
    daa4:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
    daa6:	f04f 0c20 	mov.w	ip, #32
    daaa:	f800 cb01 	strb.w	ip, [r0], #1
    daae:	1a21      	subs	r1, r4, r0
    dab0:	4419      	add	r1, r3
    dab2:	2900      	cmp	r1, #0
    dab4:	dcf9      	bgt.n	daaa <dtostrf+0x1aa>
    dab6:	f1b9 0f00 	cmp.w	r9, #0
    daba:	bfd8      	it	le
    dabc:	2301      	movle	r3, #1
    dabe:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    dac0:	f1b8 0f00 	cmp.w	r8, #0
    dac4:	d002      	beq.n	dacc <dtostrf+0x1cc>
    dac6:	212d      	movs	r1, #45	; 0x2d
    dac8:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
    dacc:	9803      	ldr	r0, [sp, #12]
    dace:	b910      	cbnz	r0, dad6 <dtostrf+0x1d6>
    dad0:	f1be 0f00 	cmp.w	lr, #0
    dad4:	d117      	bne.n	db06 <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    dad6:	2800      	cmp	r0, #0
    dad8:	da02      	bge.n	dae0 <dtostrf+0x1e0>
    dada:	f1be 0f00 	cmp.w	lr, #0
    dade:	d11a      	bne.n	db16 <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    dae0:	4293      	cmp	r3, r2
    dae2:	d24d      	bcs.n	db80 <dtostrf+0x280>
		*p++ = *s++;
    dae4:	4638      	mov	r0, r7
    dae6:	469c      	mov	ip, r3
    dae8:	f810 1b01 	ldrb.w	r1, [r0], #1
    daec:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    daf0:	4594      	cmp	ip, r2
    daf2:	d03f      	beq.n	db74 <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    daf4:	272e      	movs	r7, #46	; 0x2e
    daf6:	e034      	b.n	db62 <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    daf8:	3101      	adds	r1, #1
    dafa:	9103      	str	r1, [sp, #12]
    dafc:	e7aa      	b.n	da54 <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
    dafe:	46ce      	mov	lr, r9
    db00:	e7c1      	b.n	da86 <dtostrf+0x186>
	p = buf;
    db02:	4623      	mov	r3, r4
    db04:	e7df      	b.n	dac6 <dtostrf+0x1c6>
		*p++ = '0';
    db06:	4619      	mov	r1, r3
    db08:	2030      	movs	r0, #48	; 0x30
    db0a:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
    db0e:	202e      	movs	r0, #46	; 0x2e
    db10:	7058      	strb	r0, [r3, #1]
    db12:	460b      	mov	r3, r1
    db14:	e7e4      	b.n	dae0 <dtostrf+0x1e0>
		*p++ = '0';
    db16:	469e      	mov	lr, r3
    db18:	2130      	movs	r1, #48	; 0x30
    db1a:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
    db1e:	212e      	movs	r1, #46	; 0x2e
    db20:	7059      	strb	r1, [r3, #1]
    db22:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
    db24:	4601      	mov	r1, r0
			*p++ = '0';
    db26:	f04f 0c30 	mov.w	ip, #48	; 0x30
    db2a:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
    db2e:	3101      	adds	r1, #1
    db30:	d4fb      	bmi.n	db2a <dtostrf+0x22a>
			*p++ = '0';
    db32:	4243      	negs	r3, r0
    db34:	2800      	cmp	r0, #0
    db36:	bfa8      	it	ge
    db38:	2301      	movge	r3, #1
    db3a:	4473      	add	r3, lr
    db3c:	9103      	str	r1, [sp, #12]
    db3e:	ea6f 0000 	mvn.w	r0, r0
    db42:	bfa8      	it	ge
    db44:	2000      	movge	r0, #0
    db46:	2130      	movs	r1, #48	; 0x30
    db48:	f80e 1000 	strb.w	r1, [lr, r0]
    db4c:	e7c8      	b.n	dae0 <dtostrf+0x1e0>
    db4e:	4663      	mov	r3, ip
	while (p < e) {
    db50:	4293      	cmp	r3, r2
    db52:	d20e      	bcs.n	db72 <dtostrf+0x272>
		*p++ = *s++;
    db54:	469c      	mov	ip, r3
    db56:	f810 1b01 	ldrb.w	r1, [r0], #1
    db5a:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    db5e:	4594      	cmp	ip, r2
    db60:	d008      	beq.n	db74 <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    db62:	9903      	ldr	r1, [sp, #12]
    db64:	3901      	subs	r1, #1
    db66:	9103      	str	r1, [sp, #12]
    db68:	2900      	cmp	r1, #0
    db6a:	d1f0      	bne.n	db4e <dtostrf+0x24e>
    db6c:	705f      	strb	r7, [r3, #1]
    db6e:	3302      	adds	r3, #2
    db70:	e7ee      	b.n	db50 <dtostrf+0x250>
    db72:	461a      	mov	r2, r3
	}
	if (width < 0) {
    db74:	2d00      	cmp	r5, #0
    db76:	db05      	blt.n	db84 <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    db78:	2300      	movs	r3, #0
    db7a:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    db7c:	4620      	mov	r0, r4
    db7e:	e07e      	b.n	dc7e <dtostrf+0x37e>
	while (p < e) {
    db80:	461a      	mov	r2, r3
    db82:	e7f7      	b.n	db74 <dtostrf+0x274>
		pad = (reqd + width) * -1;
    db84:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
    db86:	43f0      	mvns	r0, r6
    db88:	2e00      	cmp	r6, #0
    db8a:	daf5      	bge.n	db78 <dtostrf+0x278>
    db8c:	4611      	mov	r1, r2
    db8e:	2520      	movs	r5, #32
    db90:	f801 5b01 	strb.w	r5, [r1], #1
    db94:	f1c1 0301 	rsb	r3, r1, #1
    db98:	4403      	add	r3, r0
    db9a:	4413      	add	r3, r2
    db9c:	2b00      	cmp	r3, #0
    db9e:	dcf7      	bgt.n	db90 <dtostrf+0x290>
    dba0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    dba4:	3001      	adds	r0, #1
    dba6:	4402      	add	r2, r0
    dba8:	e7e6      	b.n	db78 <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dbaa:	224e      	movs	r2, #78	; 0x4e
    dbac:	701a      	strb	r2, [r3, #0]
    dbae:	2141      	movs	r1, #65	; 0x41
    dbb0:	7059      	strb	r1, [r3, #1]
    dbb2:	1cd8      	adds	r0, r3, #3
    dbb4:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    dbb6:	e042      	b.n	dc3e <dtostrf+0x33e>
			while (awidth) {
    dbb8:	4623      	mov	r3, r4
    dbba:	e6f7      	b.n	d9ac <dtostrf+0xac>
		if (width<0) {
    dbbc:	4623      	mov	r3, r4
    dbbe:	e6f5      	b.n	d9ac <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    dbc0:	2249      	movs	r2, #73	; 0x49
    dbc2:	701a      	strb	r2, [r3, #0]
    dbc4:	224e      	movs	r2, #78	; 0x4e
    dbc6:	705a      	strb	r2, [r3, #1]
    dbc8:	1cd8      	adds	r0, r3, #3
    dbca:	2246      	movs	r2, #70	; 0x46
    dbcc:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    dbce:	e054      	b.n	dc7a <dtostrf+0x37a>
			while (awidth) {
    dbd0:	4623      	mov	r3, r4
    dbd2:	e6c8      	b.n	d966 <dtostrf+0x66>
		if (width<0) {
    dbd4:	4623      	mov	r3, r4
    dbd6:	e6c6      	b.n	d966 <dtostrf+0x66>
	e = p + reqd;
    dbd8:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    dbda:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    dbde:	f1b9 0f00 	cmp.w	r9, #0
    dbe2:	f73f af5d 	bgt.w	daa0 <dtostrf+0x1a0>
	p = buf;
    dbe6:	4623      	mov	r3, r4
    dbe8:	e770      	b.n	dacc <dtostrf+0x1cc>
    dbea:	bf00      	nop
    dbec:	7f7fffff 	.word	0x7f7fffff
    dbf0:	20002f14 	.word	0x20002f14
    dbf4:	20002f18 	.word	0x20002f18
		if (width<0) {
    dbf8:	2800      	cmp	r0, #0
    dbfa:	dbdf      	blt.n	dbbc <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    dbfc:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    dbfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    dc02:	ee18 3a10 	vmov	r3, s16
    dc06:	2b00      	cmp	r3, #0
    dc08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    dc0c:	fe67 7a87 	vselge.f32	s15, s15, s14
    dc10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    dc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc18:	f53f aedd 	bmi.w	d9d6 <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dc1c:	234e      	movs	r3, #78	; 0x4e
    dc1e:	7023      	strb	r3, [r4, #0]
    dc20:	2141      	movs	r1, #65	; 0x41
    dc22:	7061      	strb	r1, [r4, #1]
    dc24:	1ce0      	adds	r0, r4, #3
    dc26:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    dc28:	b14a      	cbz	r2, dc3e <dtostrf+0x33e>
    dc2a:	4615      	mov	r5, r2
    dc2c:	3203      	adds	r2, #3
    dc2e:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dc30:	4602      	mov	r2, r0
			*buf++ = ' ';
    dc32:	2120      	movs	r1, #32
    dc34:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
    dc38:	4293      	cmp	r3, r2
    dc3a:	d1fb      	bne.n	dc34 <dtostrf+0x334>
			*buf++ = ' ';
    dc3c:	4428      	add	r0, r5
		*buf = 0;
    dc3e:	2300      	movs	r3, #0
    dc40:	7003      	strb	r3, [r0, #0]
		return buf;
    dc42:	e01c      	b.n	dc7e <dtostrf+0x37e>
		if (width<0) {
    dc44:	2800      	cmp	r0, #0
    dc46:	dbc5      	blt.n	dbd4 <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    dc48:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
    dc4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    dc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc52:	f53f aec2 	bmi.w	d9da <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    dc56:	2349      	movs	r3, #73	; 0x49
    dc58:	7023      	strb	r3, [r4, #0]
    dc5a:	234e      	movs	r3, #78	; 0x4e
    dc5c:	7063      	strb	r3, [r4, #1]
    dc5e:	1ce0      	adds	r0, r4, #3
    dc60:	2346      	movs	r3, #70	; 0x46
    dc62:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    dc64:	b14a      	cbz	r2, dc7a <dtostrf+0x37a>
    dc66:	4615      	mov	r5, r2
    dc68:	3203      	adds	r2, #3
    dc6a:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    dc6c:	4603      	mov	r3, r0
			*buf++ = ' ';
    dc6e:	2120      	movs	r1, #32
    dc70:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
    dc74:	429a      	cmp	r2, r3
    dc76:	d1fb      	bne.n	dc70 <dtostrf+0x370>
			*buf++ = ' ';
    dc78:	4428      	add	r0, r5
		*buf = 0;
    dc7a:	2300      	movs	r3, #0
    dc7c:	7003      	strb	r3, [r0, #0]
}
    dc7e:	b004      	add	sp, #16
    dc80:	ecbd 8b02 	vpop	{d8}
    dc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000dc88 <flexpwmWrite>:
{
    dc88:	b570      	push	{r4, r5, r6, lr}
	uint16_t mask = 1 << submodule;
    dc8a:	f04f 0c01 	mov.w	ip, #1
    dc8e:	fa0c fc01 	lsl.w	ip, ip, r1
    dc92:	fa1f f58c 	uxth.w	r5, ip
	uint32_t modulo = p->SM[submodule].VAL1;
    dc96:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    dc9a:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    dc9e:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    dca2:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    dca6:	fb0e 3303 	mla	r3, lr, r3, r3
    dcaa:	4c27      	ldr	r4, [pc, #156]	; (dd48 <flexpwmWrite+0xc0>)
    dcac:	7824      	ldrb	r4, [r4, #0]
    dcae:	40e3      	lsrs	r3, r4
    dcb0:	4573      	cmp	r3, lr
    dcb2:	bf28      	it	cs
    dcb4:	4673      	movcs	r3, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    dcb6:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    dcba:	b2a4      	uxth	r4, r4
    dcbc:	012e      	lsls	r6, r5, #4
    dcbe:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    dcc2:	4334      	orrs	r4, r6
    dcc4:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    dcc8:	2a01      	cmp	r2, #1
    dcca:	d01f      	beq.n	dd0c <flexpwmWrite+0x84>
    dccc:	2a02      	cmp	r2, #2
    dcce:	d02d      	beq.n	dd2c <flexpwmWrite+0xa4>
    dcd0:	b14a      	cbz	r2, dce6 <flexpwmWrite+0x5e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    dcd2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    dcd6:	b29b      	uxth	r3, r3
    dcd8:	f00c 0c0f 	and.w	ip, ip, #15
    dcdc:	ea43 0c0c 	orr.w	ip, r3, ip
    dce0:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    dce4:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL0 = modulo - cval;
    dce6:	ebae 0e03 	sub.w	lr, lr, r3
    dcea:	fa1f fe8e 	uxth.w	lr, lr
    dcee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    dcf2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    dcf6:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    dcfa:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    dcfe:	b29b      	uxth	r3, r3
    dd00:	f00c 020f 	and.w	r2, ip, #15
    dd04:	4313      	orrs	r3, r2
    dd06:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    dd0a:	e7e2      	b.n	dcd2 <flexpwmWrite+0x4a>
		p->SM[submodule].VAL3 = cval;
    dd0c:	b29b      	uxth	r3, r3
    dd0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    dd12:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    dd16:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    dd18:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    dd1c:	b29b      	uxth	r3, r3
    dd1e:	022d      	lsls	r5, r5, #8
    dd20:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    dd24:	432b      	orrs	r3, r5
    dd26:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    dd2a:	e7d2      	b.n	dcd2 <flexpwmWrite+0x4a>
		p->SM[submodule].VAL5 = cval;
    dd2c:	b29b      	uxth	r3, r3
    dd2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    dd32:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    dd36:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    dd38:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    dd3c:	b29b      	uxth	r3, r3
    dd3e:	431e      	orrs	r6, r3
    dd40:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    dd44:	e7c5      	b.n	dcd2 <flexpwmWrite+0x4a>
    dd46:	bf00      	nop
    dd48:	20003d45 	.word	0x20003d45

0000dd4c <flexpwmFrequency>:
{
    dd4c:	b530      	push	{r4, r5, lr}
	uint16_t mask = 1 << submodule;
    dd4e:	f04f 0c01 	mov.w	ip, #1
    dd52:	fa0c fc01 	lsl.w	ip, ip, r1
    dd56:	fa1f f58c 	uxth.w	r5, ip
	uint32_t olddiv = p->SM[submodule].VAL1;
    dd5a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    dd5e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    dd62:	89dc      	ldrh	r4, [r3, #14]
    dd64:	b2a4      	uxth	r4, r4
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    dd66:	4b32      	ldr	r3, [pc, #200]	; (de30 <flexpwmFrequency+0xe4>)
    dd68:	ed93 7a00 	vldr	s14, [r3]
    dd6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    dd70:	eec7 7a00 	vdiv.f32	s15, s14, s0
    dd74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    dd78:	ee77 7a87 	vadd.f32	s15, s15, s14
    dd7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    dd80:	ee17 2a90 	vmov	r2, s15
	while (newdiv > 65535 && prescale < 7) {
    dd84:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    dd88:	d350      	bcc.n	de2c <flexpwmFrequency+0xe0>
	uint32_t prescale = 0;
    dd8a:	2300      	movs	r3, #0
	while (newdiv > 65535 && prescale < 7) {
    dd8c:	f64f 7eff 	movw	lr, #65535	; 0xffff
		newdiv = newdiv >> 1;
    dd90:	0852      	lsrs	r2, r2, #1
		prescale = prescale + 1;
    dd92:	3301      	adds	r3, #1
	while (newdiv > 65535 && prescale < 7) {
    dd94:	4572      	cmp	r2, lr
    dd96:	d901      	bls.n	dd9c <flexpwmFrequency+0x50>
    dd98:	2b06      	cmp	r3, #6
    dd9a:	d9f9      	bls.n	dd90 <flexpwmFrequency+0x44>
	if (newdiv > 65535) {
    dd9c:	2a02      	cmp	r2, #2
    dd9e:	bf38      	it	cc
    dda0:	2202      	movcc	r2, #2
    dda2:	f64f 7eff 	movw	lr, #65535	; 0xffff
    dda6:	4572      	cmp	r2, lr
    dda8:	bf28      	it	cs
    ddaa:	4672      	movcs	r2, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    ddac:	f8b0 e188 	ldrh.w	lr, [r0, #392]	; 0x188
    ddb0:	fa1f fe8e 	uxth.w	lr, lr
    ddb4:	012d      	lsls	r5, r5, #4
    ddb6:	b2ed      	uxtb	r5, r5
    ddb8:	ea4e 0e05 	orr.w	lr, lr, r5
    ddbc:	f8a0 e188 	strh.w	lr, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    ddc0:	011b      	lsls	r3, r3, #4
    ddc2:	b2db      	uxtb	r3, r3
    ddc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    ddc8:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    ddcc:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5
    ddd0:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    ddd4:	1e53      	subs	r3, r2, #1
    ddd6:	b29b      	uxth	r3, r3
    ddd8:	f8ae 300e 	strh.w	r3, [lr, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    dddc:	f8be 300a 	ldrh.w	r3, [lr, #10]
    dde0:	b29b      	uxth	r3, r3
    dde2:	fb02 f303 	mul.w	r3, r2, r3
    dde6:	fbb3 f3f4 	udiv	r3, r3, r4
    ddea:	b29b      	uxth	r3, r3
    ddec:	f8ae 300a 	strh.w	r3, [lr, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    ddf0:	f8be 3016 	ldrh.w	r3, [lr, #22]
    ddf4:	b29b      	uxth	r3, r3
    ddf6:	fb02 f303 	mul.w	r3, r2, r3
    ddfa:	fbb3 f3f4 	udiv	r3, r3, r4
    ddfe:	b29b      	uxth	r3, r3
    de00:	f8ae 3016 	strh.w	r3, [lr, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    de04:	f8be 301e 	ldrh.w	r3, [lr, #30]
    de08:	b29b      	uxth	r3, r3
    de0a:	fb02 f303 	mul.w	r3, r2, r3
    de0e:	fbb3 f3f4 	udiv	r3, r3, r4
    de12:	b29b      	uxth	r3, r3
    de14:	f8ae 301e 	strh.w	r3, [lr, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    de18:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    de1c:	b29b      	uxth	r3, r3
    de1e:	f00c 0c0f 	and.w	ip, ip, #15
    de22:	ea43 030c 	orr.w	r3, r3, ip
    de26:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    de2a:	bd30      	pop	{r4, r5, pc}
	uint32_t prescale = 0;
    de2c:	2300      	movs	r3, #0
    de2e:	e7b5      	b.n	dd9c <flexpwmFrequency+0x50>
    de30:	200035fc 	.word	0x200035fc

0000de34 <quadtimerWrite>:
{
    de34:	b510      	push	{r4, lr}
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    de36:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
    de3a:	f8be c006 	ldrh.w	ip, [lr, #6]
    de3e:	fa1f fc8c 	uxth.w	ip, ip
    de42:	f8be 3010 	ldrh.w	r3, [lr, #16]
    de46:	f1cc 1c01 	rsb	ip, ip, #65537	; 0x10001
    de4a:	fa1c f383 	uxtah	r3, ip, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    de4e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    de52:	fb0c f202 	mul.w	r2, ip, r2
    de56:	4c08      	ldr	r4, [pc, #32]	; (de78 <quadtimerWrite+0x44>)
    de58:	7824      	ldrb	r4, [r4, #0]
    de5a:	40e2      	lsrs	r2, r4
	if (high >= modulo - 1) high = modulo - 2;
    de5c:	4594      	cmp	ip, r2
    de5e:	bf98      	it	ls
    de60:	1e9a      	subls	r2, r3, #2
	uint32_t low = modulo - high; // low must 2 or higher
    de62:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].LOAD = 65537 - low;
    de64:	f1c3 0301 	rsb	r3, r3, #1
    de68:	b29b      	uxth	r3, r3
    de6a:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->CH[submodule].CMPLD1 = high;
    de6e:	b292      	uxth	r2, r2
    de70:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    de74:	8202      	strh	r2, [r0, #16]
}
    de76:	bd10      	pop	{r4, pc}
    de78:	20003d45 	.word	0x20003d45

0000de7c <quadtimerFrequency>:
{
    de7c:	b500      	push	{lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    de7e:	4b23      	ldr	r3, [pc, #140]	; (df0c <quadtimerFrequency+0x90>)
    de80:	ed93 7a00 	vldr	s14, [r3]
    de84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    de88:	eec7 7a00 	vdiv.f32	s15, s14, s0
    de8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    de90:	ee77 7a87 	vadd.f32	s15, s15, s14
    de94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    de98:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    de9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    dea0:	4293      	cmp	r3, r2
    dea2:	d930      	bls.n	df06 <quadtimerFrequency+0x8a>
	uint32_t prescale = 0;
    dea4:	2200      	movs	r2, #0
	while (newdiv > 65534 && prescale < 7) {
    dea6:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = newdiv >> 1; 
    deaa:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    deac:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    deae:	4563      	cmp	r3, ip
    deb0:	d901      	bls.n	deb6 <quadtimerFrequency+0x3a>
    deb2:	2a06      	cmp	r2, #6
    deb4:	d9f9      	bls.n	deaa <quadtimerFrequency+0x2e>
	if (newdiv > 65534) {
    deb6:	2b02      	cmp	r3, #2
    deb8:	bf38      	it	cc
    deba:	2302      	movcc	r3, #2
    debc:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
    dec0:	4563      	cmp	r3, ip
    dec2:	bf28      	it	cs
    dec4:	4663      	movcs	r3, ip
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    dec6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    deca:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    dece:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    ded2:	88c8      	ldrh	r0, [r1, #6]
    ded4:	b280      	uxth	r0, r0
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    ded6:	fb0e fc03 	mul.w	ip, lr, r3
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    deda:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    dede:	4470      	add	r0, lr
    dee0:	fbbc f0f0 	udiv	r0, ip, r0
	uint32_t low = newdiv - high;
    dee4:	1a1b      	subs	r3, r3, r0
	p->CH[submodule].LOAD = 65537 - low;
    dee6:	f1c3 0301 	rsb	r3, r3, #1
    deea:	b29b      	uxth	r3, r3
    deec:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    deee:	b280      	uxth	r0, r0
    def0:	8208      	strh	r0, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    def2:	3208      	adds	r2, #8
    def4:	0252      	lsls	r2, r2, #9
    def6:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    defa:	f242 0326 	movw	r3, #8230	; 0x2026
    defe:	4313      	orrs	r3, r2
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    df00:	818b      	strh	r3, [r1, #12]
}
    df02:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t prescale = 0;
    df06:	2200      	movs	r2, #0
    df08:	e7d5      	b.n	deb6 <quadtimerFrequency+0x3a>
    df0a:	bf00      	nop
    df0c:	200035fc 	.word	0x200035fc

0000df10 <analogWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    df10:	2836      	cmp	r0, #54	; 0x36
    df12:	d83f      	bhi.n	df94 <analogWrite+0x84>
{
    df14:	b538      	push	{r3, r4, r5, lr}
    df16:	4604      	mov	r4, r0
	info = pwm_pin_info + pin;
    df18:	4b1f      	ldr	r3, [pc, #124]	; (df98 <analogWrite+0x88>)
    df1a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	if (info->type == 1) {
    df1e:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    df22:	2b01      	cmp	r3, #1
    df24:	d014      	beq.n	df50 <analogWrite+0x40>
	} else if (info->type == 2) {
    df26:	2b02      	cmp	r3, #2
    df28:	d12b      	bne.n	df82 <analogWrite+0x72>
		switch ((info->module >> 4) & 3) {
    df2a:	f895 c001 	ldrb.w	ip, [r5, #1]
    df2e:	f3cc 1301 	ubfx	r3, ip, #4, #2
    df32:	2b01      	cmp	r3, #1
    df34:	d02a      	beq.n	df8c <analogWrite+0x7c>
    df36:	2b02      	cmp	r3, #2
    df38:	d02a      	beq.n	df90 <analogWrite+0x80>
		  case 0: qtimer = &IMXRT_TMR1; break;
    df3a:	4818      	ldr	r0, [pc, #96]	; (df9c <analogWrite+0x8c>)
    df3c:	4a18      	ldr	r2, [pc, #96]	; (dfa0 <analogWrite+0x90>)
    df3e:	2b00      	cmp	r3, #0
    df40:	bf08      	it	eq
    df42:	4610      	moveq	r0, r2
		quadtimerWrite(qtimer, info->module & 0x03, val);
    df44:	b28a      	uxth	r2, r1
    df46:	f00c 0103 	and.w	r1, ip, #3
    df4a:	f7ff ff73 	bl	de34 <quadtimerWrite>
    df4e:	e012      	b.n	df76 <analogWrite+0x66>
		switch ((info->module >> 4) & 3) {
    df50:	f895 c001 	ldrb.w	ip, [r5, #1]
    df54:	f3cc 1301 	ubfx	r3, ip, #4, #2
    df58:	2b01      	cmp	r3, #1
    df5a:	d013      	beq.n	df84 <analogWrite+0x74>
    df5c:	2b02      	cmp	r3, #2
    df5e:	d013      	beq.n	df88 <analogWrite+0x78>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    df60:	4810      	ldr	r0, [pc, #64]	; (dfa4 <analogWrite+0x94>)
    df62:	4a11      	ldr	r2, [pc, #68]	; (dfa8 <analogWrite+0x98>)
    df64:	2b00      	cmp	r3, #0
    df66:	bf08      	it	eq
    df68:	4610      	moveq	r0, r2
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    df6a:	b28b      	uxth	r3, r1
    df6c:	78aa      	ldrb	r2, [r5, #2]
    df6e:	f00c 0103 	and.w	r1, ip, #3
    df72:	f7ff fe89 	bl	dc88 <flexpwmWrite>
	*(portConfigRegister(pin)) = info->muxval;
    df76:	4b0d      	ldr	r3, [pc, #52]	; (dfac <analogWrite+0x9c>)
    df78:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    df7c:	685b      	ldr	r3, [r3, #4]
    df7e:	78ea      	ldrb	r2, [r5, #3]
    df80:	601a      	str	r2, [r3, #0]
}
    df82:	bd38      	pop	{r3, r4, r5, pc}
		switch ((info->module >> 4) & 3) {
    df84:	480a      	ldr	r0, [pc, #40]	; (dfb0 <analogWrite+0xa0>)
    df86:	e7f0      	b.n	df6a <analogWrite+0x5a>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    df88:	480a      	ldr	r0, [pc, #40]	; (dfb4 <analogWrite+0xa4>)
    df8a:	e7ee      	b.n	df6a <analogWrite+0x5a>
		switch ((info->module >> 4) & 3) {
    df8c:	480a      	ldr	r0, [pc, #40]	; (dfb8 <analogWrite+0xa8>)
    df8e:	e7d9      	b.n	df44 <analogWrite+0x34>
		  case 2: qtimer = &IMXRT_TMR3; break;
    df90:	480a      	ldr	r0, [pc, #40]	; (dfbc <analogWrite+0xac>)
    df92:	e7d7      	b.n	df44 <analogWrite+0x34>
    df94:	4770      	bx	lr
    df96:	bf00      	nop
    df98:	20003000 	.word	0x20003000
    df9c:	401e8000 	.word	0x401e8000
    dfa0:	401dc000 	.word	0x401dc000
    dfa4:	403e8000 	.word	0x403e8000
    dfa8:	403dc000 	.word	0x403dc000
    dfac:	20002ba4 	.word	0x20002ba4
    dfb0:	403e0000 	.word	0x403e0000
    dfb4:	403e4000 	.word	0x403e4000
    dfb8:	401e0000 	.word	0x401e0000
    dfbc:	401e4000 	.word	0x401e4000

0000dfc0 <analogWriteFrequency>:
	if (pin >= CORE_NUM_DIGITAL) return;
    dfc0:	2836      	cmp	r0, #54	; 0x36
    dfc2:	d835      	bhi.n	e030 <analogWriteFrequency+0x70>
{
    dfc4:	b510      	push	{r4, lr}
	info = pwm_pin_info + pin;
    dfc6:	4b1b      	ldr	r3, [pc, #108]	; (e034 <analogWriteFrequency+0x74>)
    dfc8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	if (info->type == 1) {
    dfcc:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    dfd0:	2b01      	cmp	r3, #1
    dfd2:	d002      	beq.n	dfda <analogWriteFrequency+0x1a>
	} else if (info->type == 2) {
    dfd4:	2b02      	cmp	r3, #2
    dfd6:	d016      	beq.n	e006 <analogWriteFrequency+0x46>
}
    dfd8:	bd10      	pop	{r4, pc}
		switch ((info->module >> 4) & 3) {
    dfda:	7851      	ldrb	r1, [r2, #1]
    dfdc:	f3c1 1301 	ubfx	r3, r1, #4, #2
    dfe0:	2b01      	cmp	r3, #1
    dfe2:	d00c      	beq.n	dffe <analogWriteFrequency+0x3e>
    dfe4:	2b02      	cmp	r3, #2
    dfe6:	d00c      	beq.n	e002 <analogWriteFrequency+0x42>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    dfe8:	4813      	ldr	r0, [pc, #76]	; (e038 <analogWriteFrequency+0x78>)
    dfea:	4c14      	ldr	r4, [pc, #80]	; (e03c <analogWriteFrequency+0x7c>)
    dfec:	2b00      	cmp	r3, #0
    dfee:	bf08      	it	eq
    dff0:	4620      	moveq	r0, r4
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    dff2:	7892      	ldrb	r2, [r2, #2]
    dff4:	f001 0103 	and.w	r1, r1, #3
    dff8:	f7ff fea8 	bl	dd4c <flexpwmFrequency>
    dffc:	e7ec      	b.n	dfd8 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    dffe:	4810      	ldr	r0, [pc, #64]	; (e040 <analogWriteFrequency+0x80>)
    e000:	e7f7      	b.n	dff2 <analogWriteFrequency+0x32>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    e002:	4810      	ldr	r0, [pc, #64]	; (e044 <analogWriteFrequency+0x84>)
    e004:	e7f5      	b.n	dff2 <analogWriteFrequency+0x32>
		switch ((info->module >> 4) & 3) {
    e006:	7851      	ldrb	r1, [r2, #1]
    e008:	f3c1 1301 	ubfx	r3, r1, #4, #2
    e00c:	2b01      	cmp	r3, #1
    e00e:	d00b      	beq.n	e028 <analogWriteFrequency+0x68>
    e010:	2b02      	cmp	r3, #2
    e012:	d00b      	beq.n	e02c <analogWriteFrequency+0x6c>
		  case 0: qtimer = &IMXRT_TMR1; break;
    e014:	480c      	ldr	r0, [pc, #48]	; (e048 <analogWriteFrequency+0x88>)
    e016:	4a0d      	ldr	r2, [pc, #52]	; (e04c <analogWriteFrequency+0x8c>)
    e018:	2b00      	cmp	r3, #0
    e01a:	bf08      	it	eq
    e01c:	4610      	moveq	r0, r2
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    e01e:	f001 0103 	and.w	r1, r1, #3
    e022:	f7ff ff2b 	bl	de7c <quadtimerFrequency>
    e026:	e7d7      	b.n	dfd8 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    e028:	4809      	ldr	r0, [pc, #36]	; (e050 <analogWriteFrequency+0x90>)
    e02a:	e7f8      	b.n	e01e <analogWriteFrequency+0x5e>
		  case 2: qtimer = &IMXRT_TMR3; break;
    e02c:	4809      	ldr	r0, [pc, #36]	; (e054 <analogWriteFrequency+0x94>)
    e02e:	e7f6      	b.n	e01e <analogWriteFrequency+0x5e>
    e030:	4770      	bx	lr
    e032:	bf00      	nop
    e034:	20003000 	.word	0x20003000
    e038:	403e8000 	.word	0x403e8000
    e03c:	403dc000 	.word	0x403dc000
    e040:	403e0000 	.word	0x403e0000
    e044:	403e4000 	.word	0x403e4000
    e048:	401e8000 	.word	0x401e8000
    e04c:	401dc000 	.word	0x401dc000
    e050:	401e0000 	.word	0x401e0000
    e054:	401e4000 	.word	0x401e4000

0000e058 <flexpwm_init>:
{
    e058:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e05a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    e05e:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    e062:	230f      	movs	r3, #15
    e064:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    e068:	2100      	movs	r1, #0
    e06a:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e06e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e072:	b29b      	uxth	r3, r3
    e074:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    e078:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e07c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e080:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
    e084:	460a      	mov	r2, r1
		p->SM[i].VAL1 = 33464;
    e086:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e08a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    e08e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    e092:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e094:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e098:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e09a:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e09c:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e09e:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e0a0:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    e0a4:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e0a6:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e0a8:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e0aa:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    e0ac:	3101      	adds	r1, #1
    e0ae:	2904      	cmp	r1, #4
    e0b0:	d1eb      	bne.n	e08a <flexpwm_init+0x32>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e0b2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e0b6:	b29b      	uxth	r3, r3
    e0b8:	f043 030f 	orr.w	r3, r3, #15
    e0bc:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e0c0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e0c4:	b29b      	uxth	r3, r3
    e0c6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    e0ca:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    e0ce:	bd10      	pop	{r4, pc}

0000e0d0 <quadtimer_init>:
{
    e0d0:	b570      	push	{r4, r5, r6, lr}
	for (i=0; i < 4; i++) {
    e0d2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e0d4:	4611      	mov	r1, r2
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e0d6:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e0d8:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e0dc:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e0e0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    e0e4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    e0e8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e0ec:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    e0ee:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e0f0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e0f2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e0f4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e0f6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e0fa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e0fc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    e100:	3201      	adds	r2, #1
    e102:	2a04      	cmp	r2, #4
    e104:	d1ee      	bne.n	e0e4 <quadtimer_init+0x14>
}
    e106:	bd70      	pop	{r4, r5, r6, pc}

0000e108 <pwm_init>:
{
    e108:	b508      	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e10a:	4b10      	ldr	r3, [pc, #64]	; (e14c <pwm_init+0x44>)
    e10c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    e10e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    e112:	679a      	str	r2, [r3, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e114:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    e118:	4a0d      	ldr	r2, [pc, #52]	; (e150 <pwm_init+0x48>)
    e11a:	430a      	orrs	r2, r1
    e11c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    e120:	480c      	ldr	r0, [pc, #48]	; (e154 <pwm_init+0x4c>)
    e122:	f7ff ff99 	bl	e058 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    e126:	480c      	ldr	r0, [pc, #48]	; (e158 <pwm_init+0x50>)
    e128:	f7ff ff96 	bl	e058 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    e12c:	480b      	ldr	r0, [pc, #44]	; (e15c <pwm_init+0x54>)
    e12e:	f7ff ff93 	bl	e058 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    e132:	480b      	ldr	r0, [pc, #44]	; (e160 <pwm_init+0x58>)
    e134:	f7ff ff90 	bl	e058 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    e138:	480a      	ldr	r0, [pc, #40]	; (e164 <pwm_init+0x5c>)
    e13a:	f7ff ffc9 	bl	e0d0 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    e13e:	480a      	ldr	r0, [pc, #40]	; (e168 <pwm_init+0x60>)
    e140:	f7ff ffc6 	bl	e0d0 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    e144:	4809      	ldr	r0, [pc, #36]	; (e16c <pwm_init+0x64>)
    e146:	f7ff ffc3 	bl	e0d0 <quadtimer_init>
}
    e14a:	bd08      	pop	{r3, pc}
    e14c:	400fc000 	.word	0x400fc000
    e150:	fc030000 	.word	0xfc030000
    e154:	403dc000 	.word	0x403dc000
    e158:	403e0000 	.word	0x403e0000
    e15c:	403e4000 	.word	0x403e4000
    e160:	403e8000 	.word	0x403e8000
    e164:	401dc000 	.word	0x401dc000
    e168:	401e0000 	.word	0x401e0000
    e16c:	401e4000 	.word	0x401e4000

0000e170 <analogWriteRes>:
	xbar[output] = input;
#endif
}

uint32_t analogWriteRes(uint32_t bits)
{
    e170:	4603      	mov	r3, r0
	if (bits < 1) {
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
    e172:	4a05      	ldr	r2, [pc, #20]	; (e188 <analogWriteRes+0x18>)
    e174:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    e176:	2b10      	cmp	r3, #16
    e178:	bf28      	it	cs
    e17a:	2310      	movcs	r3, #16
    e17c:	2b01      	cmp	r3, #1
    e17e:	bf38      	it	cc
    e180:	2301      	movcc	r3, #1
    e182:	7013      	strb	r3, [r2, #0]
	return prior;
}
    e184:	4770      	bx	lr
    e186:	bf00      	nop
    e188:	20003d45 	.word	0x20003d45

0000e18c <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    e18c:	4b07      	ldr	r3, [pc, #28]	; (e1ac <rtc_get+0x20>)
    e18e:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    e190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    e192:	4a06      	ldr	r2, [pc, #24]	; (e1ac <rtc_get+0x20>)
    e194:	4684      	mov	ip, r0
    e196:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    e198:	4619      	mov	r1, r3
    e19a:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    e19c:	4299      	cmp	r1, r3
    e19e:	d1f9      	bne.n	e194 <rtc_get+0x8>
    e1a0:	4584      	cmp	ip, r0
    e1a2:	d1f7      	bne.n	e194 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    e1a4:	0bdb      	lsrs	r3, r3, #15
}
    e1a6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    e1aa:	4770      	bx	lr
    e1ac:	400d4000 	.word	0x400d4000

0000e1b0 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    e1b0:	4770      	bx	lr
	...

0000e1b4 <unused_interrupt_vector>:
	__disable_irq();
    e1b4:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    e1b6:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    e1ba:	4c52      	ldr	r4, [pc, #328]	; (e304 <unused_interrupt_vector+0x150>)
    e1bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    e1c0:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    e1c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e1c8:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
    e1cc:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    e1d0:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    e1d4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    e1d8:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
    e1dc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    e1e0:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    e1e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    e1e8:	6993      	ldr	r3, [r2, #24]
    e1ea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    e1ee:	69d3      	ldr	r3, [r2, #28]
    e1f0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    e1f4:	f000 f8d2 	bl	e39c <tempmonGetTemp>
    e1f8:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    e1fc:	f7ff ffc6 	bl	e18c <rtc_get>
    e200:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    e204:	230b      	movs	r3, #11
    e206:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
    e20a:	483f      	ldr	r0, [pc, #252]	; (e308 <unused_interrupt_vector+0x154>)
	crc = 0xFFFFFFFF;
    e20c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e210:	493e      	ldr	r1, [pc, #248]	; (e30c <unused_interrupt_vector+0x158>)
	while (p < end) {
    e212:	4d3f      	ldr	r5, [pc, #252]	; (e310 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    e214:	6803      	ldr	r3, [r0, #0]
    e216:	3004      	adds	r0, #4
    e218:	405a      	eors	r2, r3
    e21a:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e21c:	f002 0301 	and.w	r3, r2, #1
    e220:	fb01 f303 	mul.w	r3, r1, r3
    e224:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    e228:	3c01      	subs	r4, #1
    e22a:	d1f7      	bne.n	e21c <unused_interrupt_vector+0x68>
	while (p < end) {
    e22c:	42a8      	cmp	r0, r5
    e22e:	d1f1      	bne.n	e214 <unused_interrupt_vector+0x60>
	info->crc = crc;
    e230:	4b34      	ldr	r3, [pc, #208]	; (e304 <unused_interrupt_vector+0x150>)
    e232:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    e236:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    e23a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e23e:	4a32      	ldr	r2, [pc, #200]	; (e308 <unused_interrupt_vector+0x154>)
    e240:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
    e244:	3220      	adds	r2, #32
    e246:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    e24a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e24e:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e252:	4a30      	ldr	r2, [pc, #192]	; (e314 <unused_interrupt_vector+0x160>)
    e254:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    e256:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    e25a:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    e25c:	4b2e      	ldr	r3, [pc, #184]	; (e318 <unused_interrupt_vector+0x164>)
    e25e:	2102      	movs	r1, #2
    e260:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e262:	69d3      	ldr	r3, [r2, #28]
    e264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e26c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e26e:	4b2b      	ldr	r3, [pc, #172]	; (e31c <unused_interrupt_vector+0x168>)
    e270:	681a      	ldr	r2, [r3, #0]
    e272:	4b2b      	ldr	r3, [pc, #172]	; (e320 <unused_interrupt_vector+0x16c>)
    e274:	429a      	cmp	r2, r3
    e276:	d81b      	bhi.n	e2b0 <unused_interrupt_vector+0xfc>
	PIT_MCR = 0;
    e278:	4b27      	ldr	r3, [pc, #156]	; (e318 <unused_interrupt_vector+0x164>)
    e27a:	2200      	movs	r2, #0
    e27c:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
    e27e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    e282:	4a28      	ldr	r2, [pc, #160]	; (e324 <unused_interrupt_vector+0x170>)
    e284:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e288:	2201      	movs	r2, #1
    e28a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    e28e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e296:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    e29a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    e29e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    e2a2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    e2a6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    e2aa:	4d1b      	ldr	r5, [pc, #108]	; (e318 <unused_interrupt_vector+0x164>)
			PIT_TFLG0 = 1;
    e2ac:	2601      	movs	r6, #1
    e2ae:	e005      	b.n	e2bc <unused_interrupt_vector+0x108>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e2b0:	4618      	mov	r0, r3
    e2b2:	f7ff f845 	bl	d340 <set_arm_clock>
    e2b6:	e7df      	b.n	e278 <unused_interrupt_vector+0xc4>
		usb_isr();
    e2b8:	f000 f9e8 	bl	e68c <usb_isr>
		if (PIT_TFLG0) {
    e2bc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d0f9      	beq.n	e2b8 <unused_interrupt_vector+0x104>
			PIT_TFLG0 = 1;
    e2c4:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    e2c8:	3401      	adds	r4, #1
    e2ca:	2c4f      	cmp	r4, #79	; 0x4f
    e2cc:	d9f4      	bls.n	e2b8 <unused_interrupt_vector+0x104>
	USB1_USBCMD = USB_USBCMD_RST;
    e2ce:	4b16      	ldr	r3, [pc, #88]	; (e328 <unused_interrupt_vector+0x174>)
    e2d0:	2202      	movs	r2, #2
    e2d2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e2d6:	4b15      	ldr	r3, [pc, #84]	; (e32c <unused_interrupt_vector+0x178>)
    e2d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    e2dc:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e2de:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
    e2e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    e2e6:	b93b      	cbnz	r3, e2f8 <unused_interrupt_vector+0x144>
	SRC_GPR5 = 0x0BAD00F1;
    e2e8:	4811      	ldr	r0, [pc, #68]	; (e330 <unused_interrupt_vector+0x17c>)
    e2ea:	4912      	ldr	r1, [pc, #72]	; (e334 <unused_interrupt_vector+0x180>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e2ec:	4a0a      	ldr	r2, [pc, #40]	; (e318 <unused_interrupt_vector+0x164>)
	SRC_GPR5 = 0x0BAD00F1;
    e2ee:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e2f0:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d0fa      	beq.n	e2ee <unused_interrupt_vector+0x13a>
	SCB_AIRCR = 0x05FA0004;
    e2f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e2fc:	4a0e      	ldr	r2, [pc, #56]	; (e338 <unused_interrupt_vector+0x184>)
    e2fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    e302:	e7fe      	b.n	e302 <unused_interrupt_vector+0x14e>
    e304:	2027ff00 	.word	0x2027ff00
    e308:	2027ff80 	.word	0x2027ff80
    e30c:	edb88320 	.word	0xedb88320
    e310:	2027ffa8 	.word	0x2027ffa8
    e314:	400fc000 	.word	0x400fc000
    e318:	40084000 	.word	0x40084000
    e31c:	20003600 	.word	0x20003600
    e320:	0bcd3d80 	.word	0x0bcd3d80
    e324:	00249f00 	.word	0x00249f00
    e328:	402e0000 	.word	0x402e0000
    e32c:	400d9000 	.word	0x400d9000
    e330:	400f8000 	.word	0x400f8000
    e334:	0bad00f1 	.word	0x0bad00f1
    e338:	05fa0004 	.word	0x05fa0004

0000e33c <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    e33c:	b508      	push	{r3, lr}
    e33e:	4603      	mov	r3, r0
        char *prev = __brkval;
    e340:	4a08      	ldr	r2, [pc, #32]	; (e364 <_sbrk+0x28>)
    e342:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
    e344:	b133      	cbz	r3, e354 <_sbrk+0x18>
    e346:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
    e348:	4402      	add	r2, r0
    e34a:	4b07      	ldr	r3, [pc, #28]	; (e368 <_sbrk+0x2c>)
    e34c:	429a      	cmp	r2, r3
    e34e:	d802      	bhi.n	e356 <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    e350:	4b04      	ldr	r3, [pc, #16]	; (e364 <_sbrk+0x28>)
    e352:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
    e354:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
    e356:	f002 ff37 	bl	111c8 <__errno>
    e35a:	230c      	movs	r3, #12
    e35c:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
    e35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e362:	e7f7      	b.n	e354 <_sbrk+0x18>
    e364:	200036ac 	.word	0x200036ac
    e368:	20280000 	.word	0x20280000

0000e36c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    e36c:	2000      	movs	r0, #0
    e36e:	4770      	bx	lr

0000e370 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    e370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e374:	4770      	bx	lr

0000e376 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    e376:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e37a:	604b      	str	r3, [r1, #4]
	return 0;
}
    e37c:	2000      	movs	r0, #0
    e37e:	4770      	bx	lr

0000e380 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    e380:	2001      	movs	r0, #1
    e382:	4770      	bx	lr

0000e384 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    e384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e388:	4770      	bx	lr

0000e38a <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    e38a:	bf30      	wfi
    e38c:	e7fd      	b.n	e38a <__cxa_pure_virtual>

0000e38e <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    e38e:	bf30      	wfi
    e390:	e7fd      	b.n	e38e <abort>

0000e392 <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
    e392:	b508      	push	{r3, lr}
  unused_interrupt_vector();
    e394:	f7ff ff0e 	bl	e1b4 <unused_interrupt_vector>
}
    e398:	bd08      	pop	{r3, pc}
	...

0000e39c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    e39c:	4a13      	ldr	r2, [pc, #76]	; (e3ec <tempmonGetTemp+0x50>)
    e39e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    e3a2:	f013 0f04 	tst.w	r3, #4
    e3a6:	d0fa      	beq.n	e39e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e3a8:	4b10      	ldr	r3, [pc, #64]	; (e3ec <tempmonGetTemp+0x50>)
    e3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e3ae:	4a10      	ldr	r2, [pc, #64]	; (e3f0 <tempmonGetTemp+0x54>)
    e3b0:	ed92 7a00 	vldr	s14, [r2]
    e3b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e3b8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    e3bc:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e3c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    e3c4:	4b0b      	ldr	r3, [pc, #44]	; (e3f4 <tempmonGetTemp+0x58>)
    e3c6:	edd3 6a00 	vldr	s13, [r3]
    e3ca:	eef8 6a66 	vcvt.f32.u32	s13, s13
    e3ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
    e3d2:	4b09      	ldr	r3, [pc, #36]	; (e3f8 <tempmonGetTemp+0x5c>)
    e3d4:	edd3 6a00 	vldr	s13, [r3]
    e3d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    e3dc:	4b07      	ldr	r3, [pc, #28]	; (e3fc <tempmonGetTemp+0x60>)
    e3de:	edd3 6a00 	vldr	s13, [r3]
    e3e2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    e3e6:	ee37 0a40 	vsub.f32	s0, s14, s0
    e3ea:	4770      	bx	lr
    e3ec:	400d8100 	.word	0x400d8100
    e3f0:	2000565c 	.word	0x2000565c
    e3f4:	20005658 	.word	0x20005658
    e3f8:	20005660 	.word	0x20005660
    e3fc:	20005664 	.word	0x20005664

0000e400 <endpoint0_transmit>:
	if (len > 0) {
    e400:	468c      	mov	ip, r1
    e402:	b319      	cbz	r1, e44c <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
    e404:	4b23      	ldr	r3, [pc, #140]	; (e494 <endpoint0_transmit+0x94>)
    e406:	2101      	movs	r1, #1
    e408:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e40a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    e40e:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    e412:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e414:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e416:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    e41a:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e41c:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    e420:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e422:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    e426:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e428:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e42c:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e42e:	491a      	ldr	r1, [pc, #104]	; (e498 <endpoint0_transmit+0x98>)
    e430:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
    e432:	2300      	movs	r3, #0
    e434:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    e436:	4919      	ldr	r1, [pc, #100]	; (e49c <endpoint0_transmit+0x9c>)
    e438:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e43c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e440:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e444:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e448:	2b00      	cmp	r3, #0
    e44a:	d1fb      	bne.n	e444 <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
    e44c:	4b14      	ldr	r3, [pc, #80]	; (e4a0 <endpoint0_transmit+0xa0>)
    e44e:	2101      	movs	r1, #1
    e450:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e452:	2a00      	cmp	r2, #0
    e454:	f248 0180 	movw	r1, #32896	; 0x8080
    e458:	bf08      	it	eq
    e45a:	2180      	moveq	r1, #128	; 0x80
    e45c:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    e45e:	2000      	movs	r0, #0
    e460:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    e462:	490d      	ldr	r1, [pc, #52]	; (e498 <endpoint0_transmit+0x98>)
    e464:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
    e466:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e468:	4b0c      	ldr	r3, [pc, #48]	; (e49c <endpoint0_transmit+0x9c>)
    e46a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    e46e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    e472:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    e476:	f041 0101 	orr.w	r1, r1, #1
    e47a:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e47e:	1a12      	subs	r2, r2, r0
    e480:	bf18      	it	ne
    e482:	2201      	movne	r2, #1
    e484:	4b07      	ldr	r3, [pc, #28]	; (e4a4 <endpoint0_transmit+0xa4>)
    e486:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e488:	4a04      	ldr	r2, [pc, #16]	; (e49c <endpoint0_transmit+0x9c>)
    e48a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e48e:	2b00      	cmp	r3, #0
    e490:	d1fb      	bne.n	e48a <endpoint0_transmit+0x8a>
}
    e492:	4770      	bx	lr
    e494:	200042e0 	.word	0x200042e0
    e498:	20000000 	.word	0x20000000
    e49c:	402e0000 	.word	0x402e0000
    e4a0:	200042c0 	.word	0x200042c0
    e4a4:	20005528 	.word	0x20005528

0000e4a8 <endpoint0_receive>:
	if (len > 0) {
    e4a8:	468c      	mov	ip, r1
    e4aa:	b319      	cbz	r1, e4f4 <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
    e4ac:	4b24      	ldr	r3, [pc, #144]	; (e540 <endpoint0_receive+0x98>)
    e4ae:	2101      	movs	r1, #1
    e4b0:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e4b2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    e4b6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    e4ba:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e4bc:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e4be:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    e4c2:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e4c4:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    e4c8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e4ca:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    e4ce:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e4d0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e4d4:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    e4d6:	491b      	ldr	r1, [pc, #108]	; (e544 <endpoint0_receive+0x9c>)
    e4d8:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
    e4da:	2300      	movs	r3, #0
    e4dc:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
    e4de:	491a      	ldr	r1, [pc, #104]	; (e548 <endpoint0_receive+0xa0>)
    e4e0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e4e4:	f043 0301 	orr.w	r3, r3, #1
    e4e8:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e4ec:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e4f0:	2b00      	cmp	r3, #0
    e4f2:	d1fb      	bne.n	e4ec <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
    e4f4:	4b15      	ldr	r3, [pc, #84]	; (e54c <endpoint0_receive+0xa4>)
    e4f6:	2101      	movs	r1, #1
    e4f8:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e4fa:	2a00      	cmp	r2, #0
    e4fc:	f248 0180 	movw	r1, #32896	; 0x8080
    e500:	bf08      	it	eq
    e502:	2180      	moveq	r1, #128	; 0x80
    e504:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    e506:	2000      	movs	r0, #0
    e508:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e50a:	490e      	ldr	r1, [pc, #56]	; (e544 <endpoint0_receive+0x9c>)
    e50c:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
    e50e:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e510:	4b0d      	ldr	r3, [pc, #52]	; (e548 <endpoint0_receive+0xa0>)
    e512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    e516:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e51a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    e51e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    e522:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e526:	1a12      	subs	r2, r2, r0
    e528:	bf18      	it	ne
    e52a:	2201      	movne	r2, #1
    e52c:	0412      	lsls	r2, r2, #16
    e52e:	4b08      	ldr	r3, [pc, #32]	; (e550 <endpoint0_receive+0xa8>)
    e530:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e532:	4a05      	ldr	r2, [pc, #20]	; (e548 <endpoint0_receive+0xa0>)
    e534:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e538:	2b00      	cmp	r3, #0
    e53a:	d1fb      	bne.n	e534 <endpoint0_receive+0x8c>
}
    e53c:	4770      	bx	lr
    e53e:	bf00      	nop
    e540:	200042e0 	.word	0x200042e0
    e544:	20000000 	.word	0x20000000
    e548:	402e0000 	.word	0x402e0000
    e54c:	200042c0 	.word	0x200042c0
    e550:	20005528 	.word	0x20005528

0000e554 <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    e554:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e556:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e558:	b11b      	cbz	r3, e562 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    e55a:	6853      	ldr	r3, [r2, #4]
    e55c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    e560:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    e562:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    e564:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
    e566:	b33b      	cbz	r3, e5b8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
    e568:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    e56a:	4b1a      	ldr	r3, [pc, #104]	; (e5d4 <schedule_transfer+0x80>)
    e56c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    e570:	420b      	tst	r3, r1
    e572:	d12b      	bne.n	e5cc <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    e574:	4b18      	ldr	r3, [pc, #96]	; (e5d8 <schedule_transfer+0x84>)
    e576:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e578:	4b16      	ldr	r3, [pc, #88]	; (e5d4 <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e57a:	4e17      	ldr	r6, [pc, #92]	; (e5d8 <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e57c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e580:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    e584:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    e588:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e58c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e590:	f414 4f80 	tst.w	r4, #16384	; 0x4000
    e594:	d104      	bne.n	e5a0 <schedule_transfer+0x4c>
    e596:	6874      	ldr	r4, [r6, #4]
    e598:	1be4      	subs	r4, r4, r7
    e59a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    e59e:	d3ed      	bcc.n	e57c <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    e5a0:	4229      	tst	r1, r5
    e5a2:	d113      	bne.n	e5cc <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    e5a4:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    e5a6:	2300      	movs	r3, #0
    e5a8:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    e5aa:	4c0a      	ldr	r4, [pc, #40]	; (e5d4 <schedule_transfer+0x80>)
    e5ac:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e5b0:	430b      	orrs	r3, r1
    e5b2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
    e5b6:	e009      	b.n	e5cc <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    e5b8:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    e5ba:	2300      	movs	r3, #0
    e5bc:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    e5be:	4c05      	ldr	r4, [pc, #20]	; (e5d4 <schedule_transfer+0x80>)
    e5c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e5c4:	430b      	orrs	r3, r1
    e5c6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e5ca:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    e5cc:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e5ce:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e5d0:	bcf0      	pop	{r4, r5, r6, r7}
    e5d2:	4770      	bx	lr
    e5d4:	402e0000 	.word	0x402e0000
    e5d8:	e0001000 	.word	0xe0001000

0000e5dc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e5dc:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    e5de:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    e5e0:	b1b5      	cbz	r5, e610 <run_callbacks+0x34>
    e5e2:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    e5e4:	462b      	mov	r3, r5
	uint32_t count = 0;
    e5e6:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
    e5e8:	685a      	ldr	r2, [r3, #4]
    e5ea:	f012 0f80 	tst.w	r2, #128	; 0x80
    e5ee:	d107      	bne.n	e600 <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    e5f0:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
    e5f2:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
    e5f4:	2b01      	cmp	r3, #1
    e5f6:	d1f7      	bne.n	e5e8 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    e5f8:	2300      	movs	r3, #0
    e5fa:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    e5fc:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    e5fe:	e000      	b.n	e602 <run_callbacks+0x26>
			ep->first_transfer = t;
    e600:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
    e602:	b12c      	cbz	r4, e610 <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
    e604:	4628      	mov	r0, r5
    e606:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    e608:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e60a:	4798      	blx	r3
	while (count) {
    e60c:	3c01      	subs	r4, #1
    e60e:	d1f9      	bne.n	e604 <run_callbacks+0x28>
		first = next;
		count--;
	}
}
    e610:	bd70      	pop	{r4, r5, r6, pc}

0000e612 <usb_endpoint_config>:
{
    e612:	b570      	push	{r4, r5, r6, lr}
    e614:	4604      	mov	r4, r0
    e616:	460e      	mov	r6, r1
    e618:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    e61a:	223c      	movs	r2, #60	; 0x3c
    e61c:	2100      	movs	r1, #0
    e61e:	3004      	adds	r0, #4
    e620:	f003 f964 	bl	118ec <memset>
	qh->config = config;
    e624:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    e626:	2301      	movs	r3, #1
    e628:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
    e62a:	63a5      	str	r5, [r4, #56]	; 0x38
}
    e62c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e630 <usb_start_sof_interrupts>:
	__disable_irq();
    e630:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    e632:	4a0a      	ldr	r2, [pc, #40]	; (e65c <usb_start_sof_interrupts+0x2c>)
    e634:	2301      	movs	r3, #1
    e636:	4083      	lsls	r3, r0
    e638:	7810      	ldrb	r0, [r2, #0]
    e63a:	4318      	orrs	r0, r3
    e63c:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    e63e:	4b08      	ldr	r3, [pc, #32]	; (e660 <usb_start_sof_interrupts+0x30>)
    e640:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e644:	f013 0f80 	tst.w	r3, #128	; 0x80
    e648:	d106      	bne.n	e658 <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e64a:	4a05      	ldr	r2, [pc, #20]	; (e660 <usb_start_sof_interrupts+0x30>)
    e64c:	2180      	movs	r1, #128	; 0x80
    e64e:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e652:	430b      	orrs	r3, r1
    e654:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    e658:	b662      	cpsie	i
}
    e65a:	4770      	bx	lr
    e65c:	20005843 	.word	0x20005843
    e660:	402e0000 	.word	0x402e0000

0000e664 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    e664:	2301      	movs	r3, #1
    e666:	4083      	lsls	r3, r0
    e668:	4a06      	ldr	r2, [pc, #24]	; (e684 <usb_stop_sof_interrupts+0x20>)
    e66a:	7810      	ldrb	r0, [r2, #0]
    e66c:	ea20 0003 	bic.w	r0, r0, r3
    e670:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    e672:	b930      	cbnz	r0, e682 <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e674:	4a04      	ldr	r2, [pc, #16]	; (e688 <usb_stop_sof_interrupts+0x24>)
    e676:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    e67a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e67e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    e682:	4770      	bx	lr
    e684:	20005843 	.word	0x20005843
    e688:	402e0000 	.word	0x402e0000

0000e68c <usb_isr>:
{
    e68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    e690:	4bb5      	ldr	r3, [pc, #724]	; (e968 <usb_isr+0x2dc>)
    e692:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
    e696:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e69a:	f017 0f01 	tst.w	r7, #1
    e69e:	f000 81c9 	beq.w	ea34 <usb_isr+0x3a8>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e6a2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
    e6a6:	2b00      	cmp	r3, #0
    e6a8:	f000 8192 	beq.w	e9d0 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e6ac:	4cae      	ldr	r4, [pc, #696]	; (e968 <usb_isr+0x2dc>)
				s.word1 = endpoint_queue_head[0].setup0;
    e6ae:	4eaf      	ldr	r6, [pc, #700]	; (e96c <usb_isr+0x2e0>)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e6b0:	f106 0b80 	add.w	fp, r6, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e6b4:	f8df a2ec 	ldr.w	sl, [pc, #748]	; e9a4 <usb_isr+0x318>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e6b8:	f8df 92ec 	ldr.w	r9, [pc, #748]	; e9a8 <usb_isr+0x31c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e6bc:	f8df 82ec 	ldr.w	r8, [pc, #748]	; e9ac <usb_isr+0x320>
    e6c0:	e01b      	b.n	e6fa <usb_isr+0x6e>
	switch (setup.wRequestAndType) {
    e6c2:	2b80      	cmp	r3, #128	; 0x80
    e6c4:	d110      	bne.n	e6e8 <usb_isr+0x5c>
		reply_buffer[0] = 0;
    e6c6:	48aa      	ldr	r0, [pc, #680]	; (e970 <usb_isr+0x2e4>)
    e6c8:	2200      	movs	r2, #0
    e6ca:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
    e6cc:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    e6ce:	2102      	movs	r1, #2
    e6d0:	f7ff fe96 	bl	e400 <endpoint0_transmit>
		return;
    e6d4:	e00c      	b.n	e6f0 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e6d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    e6da:	f000 8089 	beq.w	e7f0 <usb_isr+0x164>
    e6de:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    e6e2:	b29b      	uxth	r3, r3
    e6e4:	2b01      	cmp	r3, #1
    e6e6:	d967      	bls.n	e7b8 <usb_isr+0x12c>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e6e8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e6ec:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e6f0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e6f4:	2b00      	cmp	r3, #0
    e6f6:	f000 816b 	beq.w	e9d0 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e6fa:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    e6fe:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    e700:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e702:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e70a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e70e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e712:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    e716:	d0f4      	beq.n	e702 <usb_isr+0x76>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e718:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e71c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e720:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e724:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e728:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e72c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    e730:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    e734:	d1fa      	bne.n	e72c <usb_isr+0xa0>
			endpoint0_notify_mask = 0;
    e736:	4b8f      	ldr	r3, [pc, #572]	; (e974 <usb_isr+0x2e8>)
    e738:	2100      	movs	r1, #0
    e73a:	6019      	str	r1, [r3, #0]
	setup.bothwords = setupdata;
    e73c:	4610      	mov	r0, r2
	switch (setup.wRequestAndType) {
    e73e:	b2ab      	uxth	r3, r5
    e740:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    e744:	d07e      	beq.n	e844 <usb_isr+0x1b8>
    e746:	d820      	bhi.n	e78a <usb_isr+0xfe>
    e748:	f240 3102 	movw	r1, #770	; 0x302
    e74c:	428b      	cmp	r3, r1
    e74e:	f000 80a1 	beq.w	e894 <usb_isr+0x208>
    e752:	d8c0      	bhi.n	e6d6 <usb_isr+0x4a>
    e754:	2b82      	cmp	r3, #130	; 0x82
    e756:	d07e      	beq.n	e856 <usb_isr+0x1ca>
    e758:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    e75c:	d1b1      	bne.n	e6c2 <usb_isr+0x36>
		endpoint = setup.wIndex & 0x7F;
    e75e:	b293      	uxth	r3, r2
    e760:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e764:	2a07      	cmp	r2, #7
    e766:	d8bf      	bhi.n	e6e8 <usb_isr+0x5c>
		if (dir) {
    e768:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e76c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e770:	bf14      	ite	ne
    e772:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e776:	f023 0301 	biceq.w	r3, r3, #1
    e77a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e77e:	2200      	movs	r2, #0
    e780:	4611      	mov	r1, r2
    e782:	4610      	mov	r0, r2
    e784:	f7ff fe90 	bl	e4a8 <endpoint0_receive>
		return;
    e788:	e7b2      	b.n	e6f0 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e78a:	f242 2121 	movw	r1, #8737	; 0x2221
    e78e:	428b      	cmp	r3, r1
    e790:	f000 810e 	beq.w	e9b0 <usb_isr+0x324>
    e794:	d919      	bls.n	e7ca <usb_isr+0x13e>
    e796:	f242 3121 	movw	r1, #8993	; 0x2321
    e79a:	428b      	cmp	r3, r1
    e79c:	f000 8112 	beq.w	e9c4 <usb_isr+0x338>
    e7a0:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    e7a4:	428b      	cmp	r3, r1
    e7a6:	d19f      	bne.n	e6e8 <usb_isr+0x5c>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    e7a8:	b293      	uxth	r3, r2
    e7aa:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    e7ae:	d19b      	bne.n	e6e8 <usb_isr+0x5c>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    e7b0:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    e7b4:	f363 000f 	bfi	r0, r3, #0, #16
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e7b8:	4b6f      	ldr	r3, [pc, #444]	; (e978 <usb_isr+0x2ec>)
    e7ba:	6859      	ldr	r1, [r3, #4]
    e7bc:	2900      	cmp	r1, #0
    e7be:	d093      	beq.n	e6e8 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e7c0:	fa1f fe80 	uxth.w	lr, r0
    e7c4:	f3c5 450f 	ubfx	r5, r5, #16, #16
    e7c8:	e0a7      	b.n	e91a <usb_isr+0x28e>
	switch (setup.wRequestAndType) {
    e7ca:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e7ce:	d01b      	beq.n	e808 <usb_isr+0x17c>
    e7d0:	f242 0121 	movw	r1, #8225	; 0x2021
    e7d4:	428b      	cmp	r3, r1
    e7d6:	d187      	bne.n	e6e8 <usb_isr+0x5c>
		if (setup.wLength != 7) break;
    e7d8:	0c13      	lsrs	r3, r2, #16
    e7da:	2b07      	cmp	r3, #7
    e7dc:	d184      	bne.n	e6e8 <usb_isr+0x5c>
		endpoint0_setupdata.bothwords = setupdata;
    e7de:	4b67      	ldr	r3, [pc, #412]	; (e97c <usb_isr+0x2f0>)
    e7e0:	601d      	str	r5, [r3, #0]
    e7e2:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    e7e4:	2201      	movs	r2, #1
    e7e6:	2107      	movs	r1, #7
    e7e8:	4865      	ldr	r0, [pc, #404]	; (e980 <usb_isr+0x2f4>)
    e7ea:	f7ff fe5d 	bl	e4a8 <endpoint0_receive>
		return;
    e7ee:	e77f      	b.n	e6f0 <usb_isr+0x64>
		endpoint0_receive(NULL, 0, 0);
    e7f0:	2200      	movs	r2, #0
    e7f2:	4611      	mov	r1, r2
    e7f4:	4610      	mov	r0, r2
    e7f6:	f7ff fe57 	bl	e4a8 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    e7fa:	0c2b      	lsrs	r3, r5, #16
    e7fc:	065b      	lsls	r3, r3, #25
    e7fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e802:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    e806:	e773      	b.n	e6f0 <usb_isr+0x64>
		usb_configuration = setup.wValue;
    e808:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e80c:	4b5d      	ldr	r3, [pc, #372]	; (e984 <usb_isr+0x2f8>)
    e80e:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e810:	4b5d      	ldr	r3, [pc, #372]	; (e988 <usb_isr+0x2fc>)
    e812:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e816:	4b5d      	ldr	r3, [pc, #372]	; (e98c <usb_isr+0x300>)
    e818:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e81c:	4b5c      	ldr	r3, [pc, #368]	; (e990 <usb_isr+0x304>)
    e81e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    e822:	f000 fb45 	bl	eeb0 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e826:	2280      	movs	r2, #128	; 0x80
    e828:	2100      	movs	r1, #0
    e82a:	4658      	mov	r0, fp
    e82c:	f003 f85e 	bl	118ec <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e830:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e834:	f8c6 90e0 	str.w	r9, [r6, #224]	; 0xe0
		endpoint0_receive(NULL, 0, 0);
    e838:	2200      	movs	r2, #0
    e83a:	4611      	mov	r1, r2
    e83c:	4610      	mov	r0, r2
    e83e:	f7ff fe33 	bl	e4a8 <endpoint0_receive>
		return;
    e842:	e755      	b.n	e6f0 <usb_isr+0x64>
		reply_buffer[0] = usb_configuration;
    e844:	4b4f      	ldr	r3, [pc, #316]	; (e984 <usb_isr+0x2f8>)
    e846:	781b      	ldrb	r3, [r3, #0]
    e848:	4849      	ldr	r0, [pc, #292]	; (e970 <usb_isr+0x2e4>)
    e84a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e84c:	2200      	movs	r2, #0
    e84e:	2101      	movs	r1, #1
    e850:	f7ff fdd6 	bl	e400 <endpoint0_transmit>
		return;
    e854:	e74c      	b.n	e6f0 <usb_isr+0x64>
		endpoint = setup.wIndex & 0x7F;
    e856:	b293      	uxth	r3, r2
    e858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e85c:	2a07      	cmp	r2, #7
    e85e:	f63f af43 	bhi.w	e6e8 <usb_isr+0x5c>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e862:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    e866:	4a42      	ldr	r2, [pc, #264]	; (e970 <usb_isr+0x2e4>)
    e868:	2100      	movs	r1, #0
    e86a:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    e86c:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e86e:	f013 0f80 	tst.w	r3, #128	; 0x80
    e872:	d00b      	beq.n	e88c <usb_isr+0x200>
    e874:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e878:	d002      	beq.n	e880 <usb_isr+0x1f4>
			reply_buffer[0] = 1;
    e87a:	4b3d      	ldr	r3, [pc, #244]	; (e970 <usb_isr+0x2e4>)
    e87c:	2201      	movs	r2, #1
    e87e:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e880:	2200      	movs	r2, #0
    e882:	2102      	movs	r1, #2
    e884:	483a      	ldr	r0, [pc, #232]	; (e970 <usb_isr+0x2e4>)
    e886:	f7ff fdbb 	bl	e400 <endpoint0_transmit>
		return;
    e88a:	e731      	b.n	e6f0 <usb_isr+0x64>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e88c:	f010 0f01 	tst.w	r0, #1
    e890:	d0f6      	beq.n	e880 <usb_isr+0x1f4>
    e892:	e7f2      	b.n	e87a <usb_isr+0x1ee>
		endpoint = setup.wIndex & 0x7F;
    e894:	b293      	uxth	r3, r2
    e896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e89a:	2a07      	cmp	r2, #7
    e89c:	f63f af24 	bhi.w	e6e8 <usb_isr+0x5c>
		if (dir) {
    e8a0:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e8a4:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e8a8:	bf14      	ite	ne
    e8aa:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e8ae:	f043 0301 	orreq.w	r3, r3, #1
    e8b2:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e8b6:	2200      	movs	r2, #0
    e8b8:	4611      	mov	r1, r2
    e8ba:	4610      	mov	r0, r2
    e8bc:	f7ff fdf4 	bl	e4a8 <endpoint0_receive>
		return;
    e8c0:	e716      	b.n	e6f0 <usb_isr+0x64>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e8c2:	4b34      	ldr	r3, [pc, #208]	; (e994 <usb_isr+0x308>)
    e8c4:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e8c6:	462a      	mov	r2, r5
    e8c8:	4933      	ldr	r1, [pc, #204]	; (e998 <usb_isr+0x30c>)
    e8ca:	4b34      	ldr	r3, [pc, #208]	; (e99c <usb_isr+0x310>)
    e8cc:	2800      	cmp	r0, #0
    e8ce:	bf18      	it	ne
    e8d0:	4619      	movne	r1, r3
    e8d2:	4833      	ldr	r0, [pc, #204]	; (e9a0 <usb_isr+0x314>)
    e8d4:	f7fe ff40 	bl	d758 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e8d8:	4a31      	ldr	r2, [pc, #196]	; (e9a0 <usb_isr+0x314>)
    e8da:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e8de:	442a      	add	r2, r5
	asm("dsb");
    e8e0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e8e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e8e8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e8ec:	3320      	adds	r3, #32
	} while (location < end_addr);
    e8ee:	429a      	cmp	r2, r3
    e8f0:	d8fa      	bhi.n	e8e8 <usb_isr+0x25c>
	asm("dsb");
    e8f2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e8f6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e8fa:	2200      	movs	r2, #0
    e8fc:	4629      	mov	r1, r5
    e8fe:	4828      	ldr	r0, [pc, #160]	; (e9a0 <usb_isr+0x314>)
    e900:	f7ff fd7e 	bl	e400 <endpoint0_transmit>
				return;
    e904:	e6f4      	b.n	e6f0 <usb_isr+0x64>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e906:	462a      	mov	r2, r5
    e908:	4825      	ldr	r0, [pc, #148]	; (e9a0 <usb_isr+0x314>)
    e90a:	f7fe ff25 	bl	d758 <memcpy>
    e90e:	e7e3      	b.n	e8d8 <usb_isr+0x24c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e910:	330c      	adds	r3, #12
    e912:	6859      	ldr	r1, [r3, #4]
    e914:	2900      	cmp	r1, #0
    e916:	f43f aee7 	beq.w	e6e8 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e91a:	4628      	mov	r0, r5
    e91c:	f8b3 c000 	ldrh.w	ip, [r3]
    e920:	45ac      	cmp	ip, r5
    e922:	d1f5      	bne.n	e910 <usb_isr+0x284>
    e924:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    e928:	45f4      	cmp	ip, lr
    e92a:	d1f1      	bne.n	e910 <usb_isr+0x284>
				if ((setup.wValue >> 8) == 3) {
    e92c:	0a2d      	lsrs	r5, r5, #8
    e92e:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
    e930:	bf0c      	ite	eq
    e932:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
    e934:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e936:	0c15      	lsrs	r5, r2, #16
    e938:	429d      	cmp	r5, r3
    e93a:	bf28      	it	cs
    e93c:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
    e93e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e942:	d0be      	beq.n	e8c2 <usb_isr+0x236>
				} else if (setup.wValue == 0x700) {
    e944:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    e948:	d1dd      	bne.n	e906 <usb_isr+0x27a>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e94a:	4b12      	ldr	r3, [pc, #72]	; (e994 <usb_isr+0x308>)
    e94c:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e94e:	462a      	mov	r2, r5
    e950:	4912      	ldr	r1, [pc, #72]	; (e99c <usb_isr+0x310>)
    e952:	4b11      	ldr	r3, [pc, #68]	; (e998 <usb_isr+0x30c>)
    e954:	2800      	cmp	r0, #0
    e956:	bf18      	it	ne
    e958:	4619      	movne	r1, r3
    e95a:	4811      	ldr	r0, [pc, #68]	; (e9a0 <usb_isr+0x314>)
    e95c:	f7fe fefc 	bl	d758 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e960:	2307      	movs	r3, #7
    e962:	4a0f      	ldr	r2, [pc, #60]	; (e9a0 <usb_isr+0x314>)
    e964:	7053      	strb	r3, [r2, #1]
    e966:	e7b7      	b.n	e8d8 <usb_isr+0x24c>
    e968:	402e0000 	.word	0x402e0000
    e96c:	20000000 	.word	0x20000000
    e970:	200055d8 	.word	0x200055d8
    e974:	20005528 	.word	0x20005528
    e978:	20003428 	.word	0x20003428
    e97c:	200044e0 	.word	0x200044e0
    e980:	20005520 	.word	0x20005520
    e984:	20005848 	.word	0x20005848
    e988:	00cc0002 	.word	0x00cc0002
    e98c:	000200c8 	.word	0x000200c8
    e990:	00c80002 	.word	0x00c80002
    e994:	20005849 	.word	0x20005849
    e998:	600020dc 	.word	0x600020dc
    e99c:	60002140 	.word	0x60002140
    e9a0:	20200000 	.word	0x20200000
    e9a4:	b8c6cf5d 	.word	0xb8c6cf5d
    e9a8:	74d59319 	.word	0x74d59319
    e9ac:	402e01c0 	.word	0x402e01c0
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e9b0:	b292      	uxth	r2, r2
    e9b2:	b93a      	cbnz	r2, e9c4 <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e9b4:	4b57      	ldr	r3, [pc, #348]	; (eb14 <usb_isr+0x488>)
    e9b6:	681a      	ldr	r2, [r3, #0]
    e9b8:	4b57      	ldr	r3, [pc, #348]	; (eb18 <usb_isr+0x48c>)
    e9ba:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e9bc:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e9c0:	4b56      	ldr	r3, [pc, #344]	; (eb1c <usb_isr+0x490>)
    e9c2:	701d      	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    e9c4:	2200      	movs	r2, #0
    e9c6:	4611      	mov	r1, r2
    e9c8:	4610      	mov	r0, r2
    e9ca:	f7ff fd6d 	bl	e4a8 <endpoint0_receive>
		return;
    e9ce:	e68f      	b.n	e6f0 <usb_isr+0x64>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e9d0:	4b53      	ldr	r3, [pc, #332]	; (eb20 <usb_isr+0x494>)
    e9d2:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    e9d6:	b36c      	cbz	r4, ea34 <usb_isr+0x3a8>
			USB1_ENDPTCOMPLETE = completestatus;
    e9d8:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e9dc:	4b51      	ldr	r3, [pc, #324]	; (eb24 <usb_isr+0x498>)
    e9de:	681b      	ldr	r3, [r3, #0]
    e9e0:	421c      	tst	r4, r3
    e9e2:	d172      	bne.n	eaca <usb_isr+0x43e>
			completestatus &= endpointN_notify_mask;
    e9e4:	4b50      	ldr	r3, [pc, #320]	; (eb28 <usb_isr+0x49c>)
    e9e6:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    e9e8:	401c      	ands	r4, r3
    e9ea:	d023      	beq.n	ea34 <usb_isr+0x3a8>
				while (tx) {
    e9ec:	0c26      	lsrs	r6, r4, #16
    e9ee:	d010      	beq.n	ea12 <usb_isr+0x386>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e9f0:	f8df 9154 	ldr.w	r9, [pc, #340]	; eb48 <usb_isr+0x4bc>
					tx &= ~(1<<p);
    e9f4:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
    e9f8:	fa96 f5a6 	rbit	r5, r6
    e9fc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ea00:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
    ea04:	3040      	adds	r0, #64	; 0x40
    ea06:	f7ff fde9 	bl	e5dc <run_callbacks>
					tx &= ~(1<<p);
    ea0a:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
    ea0e:	43ae      	bics	r6, r5
    ea10:	d1f2      	bne.n	e9f8 <usb_isr+0x36c>
				uint32_t rx = completestatus & 0xffff;
    ea12:	b2a4      	uxth	r4, r4
				while(rx) {
    ea14:	b174      	cbz	r4, ea34 <usb_isr+0x3a8>
					run_callbacks(endpoint_queue_head + p * 2);
    ea16:	f8df 8130 	ldr.w	r8, [pc, #304]	; eb48 <usb_isr+0x4bc>
					rx &= ~(1<<p);
    ea1a:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
    ea1c:	fa94 f5a4 	rbit	r5, r4
    ea20:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    ea24:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
    ea28:	f7ff fdd8 	bl	e5dc <run_callbacks>
					rx &= ~(1<<p);
    ea2c:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
    ea30:	43ac      	bics	r4, r5
    ea32:	d1f3      	bne.n	ea1c <usb_isr+0x390>
	if (status & USB_USBSTS_URI) { // page 3164
    ea34:	f017 0f40 	tst.w	r7, #64	; 0x40
    ea38:	d019      	beq.n	ea6e <usb_isr+0x3e2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    ea3a:	4b39      	ldr	r3, [pc, #228]	; (eb20 <usb_isr+0x494>)
    ea3c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    ea40:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    ea44:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    ea48:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    ea4c:	461a      	mov	r2, r3
    ea4e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ea52:	2b00      	cmp	r3, #0
    ea54:	d1fb      	bne.n	ea4e <usb_isr+0x3c2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    ea56:	4b32      	ldr	r3, [pc, #200]	; (eb20 <usb_isr+0x494>)
    ea58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea5c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    ea60:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    ea64:	f000 fa22 	bl	eeac <usb_serial_reset>
		endpointN_notify_mask = 0;
    ea68:	4b2f      	ldr	r3, [pc, #188]	; (eb28 <usb_isr+0x49c>)
    ea6a:	2200      	movs	r2, #0
    ea6c:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    ea6e:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
    ea72:	d003      	beq.n	ea7c <usb_isr+0x3f0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    ea74:	4b2d      	ldr	r3, [pc, #180]	; (eb2c <usb_isr+0x4a0>)
    ea76:	681b      	ldr	r3, [r3, #0]
    ea78:	b103      	cbz	r3, ea7c <usb_isr+0x3f0>
    ea7a:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    ea7c:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
    ea80:	d003      	beq.n	ea8a <usb_isr+0x3fe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    ea82:	4b2b      	ldr	r3, [pc, #172]	; (eb30 <usb_isr+0x4a4>)
    ea84:	681b      	ldr	r3, [r3, #0]
    ea86:	b103      	cbz	r3, ea8a <usb_isr+0x3fe>
    ea88:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    ea8a:	f017 0f04 	tst.w	r7, #4
    ea8e:	d009      	beq.n	eaa4 <usb_isr+0x418>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    ea90:	4b23      	ldr	r3, [pc, #140]	; (eb20 <usb_isr+0x494>)
    ea92:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    ea96:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
    ea9a:	4b26      	ldr	r3, [pc, #152]	; (eb34 <usb_isr+0x4a8>)
    ea9c:	bf14      	ite	ne
    ea9e:	2201      	movne	r2, #1
			usb_high_speed = 0;
    eaa0:	2200      	moveq	r2, #0
    eaa2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    eaa4:	4b1e      	ldr	r3, [pc, #120]	; (eb20 <usb_isr+0x494>)
    eaa6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    eaaa:	f013 0f80 	tst.w	r3, #128	; 0x80
    eaae:	d00a      	beq.n	eac6 <usb_isr+0x43a>
    eab0:	f017 0f80 	tst.w	r7, #128	; 0x80
    eab4:	d007      	beq.n	eac6 <usb_isr+0x43a>
		if (usb_reboot_timer) {
    eab6:	4b20      	ldr	r3, [pc, #128]	; (eb38 <usb_isr+0x4ac>)
    eab8:	781b      	ldrb	r3, [r3, #0]
    eaba:	b123      	cbz	r3, eac6 <usb_isr+0x43a>
			if (--usb_reboot_timer == 0) {
    eabc:	3b01      	subs	r3, #1
    eabe:	b2db      	uxtb	r3, r3
    eac0:	4a1d      	ldr	r2, [pc, #116]	; (eb38 <usb_isr+0x4ac>)
    eac2:	7013      	strb	r3, [r2, #0]
    eac4:	b30b      	cbz	r3, eb0a <usb_isr+0x47e>
}
    eac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				endpoint0_notify_mask = 0;
    eaca:	4b16      	ldr	r3, [pc, #88]	; (eb24 <usb_isr+0x498>)
    eacc:	2200      	movs	r2, #0
    eace:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    ead0:	4b1a      	ldr	r3, [pc, #104]	; (eb3c <usb_isr+0x4b0>)
    ead2:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ead4:	8819      	ldrh	r1, [r3, #0]
    ead6:	f242 0321 	movw	r3, #8225	; 0x2021
    eada:	4299      	cmp	r1, r3
    eadc:	d182      	bne.n	e9e4 <usb_isr+0x358>
    eade:	b292      	uxth	r2, r2
    eae0:	2a00      	cmp	r2, #0
    eae2:	f47f af7f 	bne.w	e9e4 <usb_isr+0x358>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    eae6:	4b16      	ldr	r3, [pc, #88]	; (eb40 <usb_isr+0x4b4>)
    eae8:	4a16      	ldr	r2, [pc, #88]	; (eb44 <usb_isr+0x4b8>)
    eaea:	e892 0003 	ldmia.w	r2, {r0, r1}
    eaee:	6018      	str	r0, [r3, #0]
    eaf0:	8099      	strh	r1, [r3, #4]
    eaf2:	0c09      	lsrs	r1, r1, #16
    eaf4:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    eaf6:	2886      	cmp	r0, #134	; 0x86
    eaf8:	f47f af74 	bne.w	e9e4 <usb_isr+0x358>
			usb_start_sof_interrupts(NUM_INTERFACE);
    eafc:	2003      	movs	r0, #3
    eafe:	f7ff fd97 	bl	e630 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    eb02:	4b0d      	ldr	r3, [pc, #52]	; (eb38 <usb_isr+0x4ac>)
    eb04:	2250      	movs	r2, #80	; 0x50
    eb06:	701a      	strb	r2, [r3, #0]
    eb08:	e76c      	b.n	e9e4 <usb_isr+0x358>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    eb0a:	2003      	movs	r0, #3
    eb0c:	f7ff fdaa 	bl	e664 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    eb10:	f006 fefe 	bl	15910 <___reboot_Teensyduino__veneer>
    eb14:	200057f8 	.word	0x200057f8
    eb18:	2000580c 	.word	0x2000580c
    eb1c:	20005847 	.word	0x20005847
    eb20:	402e0000 	.word	0x402e0000
    eb24:	20005528 	.word	0x20005528
    eb28:	2000552c 	.word	0x2000552c
    eb2c:	20005810 	.word	0x20005810
    eb30:	20005814 	.word	0x20005814
    eb34:	20005849 	.word	0x20005849
    eb38:	2000584a 	.word	0x2000584a
    eb3c:	200044e0 	.word	0x200044e0
    eb40:	20005804 	.word	0x20005804
    eb44:	20005520 	.word	0x20005520
    eb48:	20000000 	.word	0x20000000

0000eb4c <usb_config_rx>:
{
    eb4c:	b538      	push	{r3, r4, r5, lr}
    eb4e:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    eb50:	1e83      	subs	r3, r0, #2
    eb52:	2b02      	cmp	r3, #2
    eb54:	d900      	bls.n	eb58 <usb_config_rx+0xc>
}
    eb56:	bd38      	pop	{r3, r4, r5, pc}
    eb58:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    eb5a:	fab2 fc82 	clz	ip, r2
    eb5e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    eb62:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    eb64:	462a      	mov	r2, r5
    eb66:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    eb6a:	4807      	ldr	r0, [pc, #28]	; (eb88 <usb_config_rx+0x3c>)
    eb6c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    eb70:	f7ff fd4f 	bl	e612 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    eb74:	2d00      	cmp	r5, #0
    eb76:	d0ee      	beq.n	eb56 <usb_config_rx+0xa>
    eb78:	4a04      	ldr	r2, [pc, #16]	; (eb8c <usb_config_rx+0x40>)
    eb7a:	2301      	movs	r3, #1
    eb7c:	40a3      	lsls	r3, r4
    eb7e:	6811      	ldr	r1, [r2, #0]
    eb80:	430b      	orrs	r3, r1
    eb82:	6013      	str	r3, [r2, #0]
    eb84:	e7e7      	b.n	eb56 <usb_config_rx+0xa>
    eb86:	bf00      	nop
    eb88:	20000000 	.word	0x20000000
    eb8c:	2000552c 	.word	0x2000552c

0000eb90 <usb_config_tx>:
{
    eb90:	b538      	push	{r3, r4, r5, lr}
    eb92:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    eb94:	3802      	subs	r0, #2
    eb96:	2802      	cmp	r0, #2
    eb98:	d900      	bls.n	eb9c <usb_config_tx+0xc>
}
    eb9a:	bd38      	pop	{r3, r4, r5, pc}
    eb9c:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    eb9e:	fab2 fc82 	clz	ip, r2
    eba2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    eba6:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    eba8:	4809      	ldr	r0, [pc, #36]	; (ebd0 <usb_config_tx+0x40>)
    ebaa:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    ebae:	461a      	mov	r2, r3
    ebb0:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    ebb4:	3040      	adds	r0, #64	; 0x40
    ebb6:	f7ff fd2c 	bl	e612 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ebba:	2d00      	cmp	r5, #0
    ebbc:	d0ed      	beq.n	eb9a <usb_config_tx+0xa>
    ebbe:	4a05      	ldr	r2, [pc, #20]	; (ebd4 <usb_config_tx+0x44>)
    ebc0:	3410      	adds	r4, #16
    ebc2:	2301      	movs	r3, #1
    ebc4:	40a3      	lsls	r3, r4
    ebc6:	6811      	ldr	r1, [r2, #0]
    ebc8:	430b      	orrs	r3, r1
    ebca:	6013      	str	r3, [r2, #0]
    ebcc:	e7e5      	b.n	eb9a <usb_config_tx+0xa>
    ebce:	bf00      	nop
    ebd0:	20000000 	.word	0x20000000
    ebd4:	2000552c 	.word	0x2000552c

0000ebd8 <usb_prepare_transfer>:
{
    ebd8:	b410      	push	{r4}
	transfer->next = 1;
    ebda:	2401      	movs	r4, #1
    ebdc:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
    ebde:	0412      	lsls	r2, r2, #16
    ebe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ebe4:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
    ebe6:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    ebe8:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    ebec:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    ebee:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
    ebf2:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    ebf4:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
    ebf8:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    ebfa:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    ebfe:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
    ec00:	61c3      	str	r3, [r0, #28]
}
    ec02:	f85d 4b04 	ldr.w	r4, [sp], #4
    ec06:	4770      	bx	lr

0000ec08 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    ec08:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ec0a:	1e83      	subs	r3, r0, #2
    ec0c:	2b02      	cmp	r3, #2
    ec0e:	d900      	bls.n	ec12 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    ec10:	bd08      	pop	{r3, pc}
    ec12:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
    ec14:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ec18:	4b04      	ldr	r3, [pc, #16]	; (ec2c <usb_transmit+0x24>)
    ec1a:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    ec1e:	2301      	movs	r3, #1
    ec20:	fa03 f101 	lsl.w	r1, r3, r1
    ec24:	3040      	adds	r0, #64	; 0x40
    ec26:	f7ff fc95 	bl	e554 <schedule_transfer>
    ec2a:	e7f1      	b.n	ec10 <usb_transmit+0x8>
    ec2c:	20000000 	.word	0x20000000

0000ec30 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    ec30:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ec32:	1e83      	subs	r3, r0, #2
    ec34:	2b02      	cmp	r3, #2
    ec36:	d900      	bls.n	ec3a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    ec38:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
    ec3a:	460a      	mov	r2, r1
    ec3c:	2101      	movs	r1, #1
    ec3e:	4081      	lsls	r1, r0
    ec40:	4b02      	ldr	r3, [pc, #8]	; (ec4c <usb_receive+0x1c>)
    ec42:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    ec46:	f7ff fc85 	bl	e554 <schedule_transfer>
    ec4a:	e7f5      	b.n	ec38 <usb_receive+0x8>
    ec4c:	20000000 	.word	0x20000000

0000ec50 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    ec50:	6840      	ldr	r0, [r0, #4]
#endif
}
    ec52:	4770      	bx	lr

0000ec54 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    ec54:	b500      	push	{lr}
    ec56:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ec58:	4b10      	ldr	r3, [pc, #64]	; (ec9c <usb_init_serialnumber+0x48>)
    ec5a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
    ec5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ec62:	4b0f      	ldr	r3, [pc, #60]	; (eca0 <usb_init_serialnumber+0x4c>)
    ec64:	4298      	cmp	r0, r3
    ec66:	d202      	bcs.n	ec6e <usb_init_serialnumber+0x1a>
    ec68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ec6c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    ec6e:	220a      	movs	r2, #10
    ec70:	a901      	add	r1, sp, #4
    ec72:	f7fe fe13 	bl	d89c <ultoa>
	for (i=0; i<10; i++) {
    ec76:	a901      	add	r1, sp, #4
    ec78:	480a      	ldr	r0, [pc, #40]	; (eca4 <usb_init_serialnumber+0x50>)
    ec7a:	2300      	movs	r3, #0
		char c = buf[i];
    ec7c:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
    ec80:	b122      	cbz	r2, ec8c <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
    ec82:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    ec86:	3301      	adds	r3, #1
    ec88:	2b0a      	cmp	r3, #10
    ec8a:	d1f7      	bne.n	ec7c <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ec8c:	3301      	adds	r3, #1
    ec8e:	005b      	lsls	r3, r3, #1
    ec90:	4a04      	ldr	r2, [pc, #16]	; (eca4 <usb_init_serialnumber+0x50>)
    ec92:	7013      	strb	r3, [r2, #0]
}
    ec94:	b005      	add	sp, #20
    ec96:	f85d fb04 	ldr.w	pc, [sp], #4
    ec9a:	bf00      	nop
    ec9c:	401f4400 	.word	0x401f4400
    eca0:	00989680 	.word	0x00989680
    eca4:	20003d2c 	.word	0x20003d2c

0000eca8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    eca8:	b508      	push	{r3, lr}
    ecaa:	f000 fa15 	bl	f0d8 <usb_serial_flush_input>
    ecae:	bd08      	pop	{r3, pc}

0000ecb0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    ecb0:	b508      	push	{r3, lr}
    ecb2:	f000 f9e1 	bl	f078 <usb_serial_peekchar>
    ecb6:	bd08      	pop	{r3, pc}

0000ecb8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    ecb8:	b508      	push	{r3, lr}
    ecba:	f000 fa3f 	bl	f13c <usb_serial_getchar>
    ecbe:	bd08      	pop	{r3, pc}

0000ecc0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    ecc0:	b508      	push	{r3, lr}
    ecc2:	f000 f9fd 	bl	f0c0 <usb_serial_available>
    ecc6:	bd08      	pop	{r3, pc}

0000ecc8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ecc8:	b508      	push	{r3, lr}
    ecca:	f000 fb55 	bl	f378 <usb_serial_flush_output>
    ecce:	bd08      	pop	{r3, pc}

0000ecd0 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ecd0:	b508      	push	{r3, lr}
    ecd2:	f000 fb2b 	bl	f32c <usb_serial_write_buffer_free>
    ecd6:	bd08      	pop	{r3, pc}

0000ecd8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ecd8:	b508      	push	{r3, lr}
    ecda:	4608      	mov	r0, r1
    ecdc:	4611      	mov	r1, r2
    ecde:	f000 fa3d 	bl	f15c <usb_serial_write>
    ece2:	bd08      	pop	{r3, pc}

0000ece4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ece4:	b508      	push	{r3, lr}
    ece6:	4608      	mov	r0, r1
    ece8:	f000 fb14 	bl	f314 <usb_serial_putchar>
    ecec:	bd08      	pop	{r3, pc}
	...

0000ecf0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    ecf0:	4b20      	ldr	r3, [pc, #128]	; (ed74 <usb_serial_flush_callback+0x84>)
    ecf2:	781b      	ldrb	r3, [r3, #0]
    ecf4:	2b00      	cmp	r3, #0
    ecf6:	d13b      	bne.n	ed70 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
    ecf8:	4b1f      	ldr	r3, [pc, #124]	; (ed78 <usb_serial_flush_callback+0x88>)
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	2b00      	cmp	r3, #0
    ecfe:	d037      	beq.n	ed70 <usb_serial_flush_callback+0x80>
{
    ed00:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    ed02:	4b1e      	ldr	r3, [pc, #120]	; (ed7c <usb_serial_flush_callback+0x8c>)
    ed04:	881d      	ldrh	r5, [r3, #0]
    ed06:	b905      	cbnz	r5, ed0a <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
    ed08:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    ed0a:	4a1d      	ldr	r2, [pc, #116]	; (ed80 <usb_serial_flush_callback+0x90>)
    ed0c:	7811      	ldrb	r1, [r2, #0]
    ed0e:	4e1d      	ldr	r6, [pc, #116]	; (ed84 <usb_serial_flush_callback+0x94>)
    ed10:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ed14:	4c1c      	ldr	r4, [pc, #112]	; (ed88 <usb_serial_flush_callback+0x98>)
    ed16:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    ed1a:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ed1e:	2300      	movs	r3, #0
    ed20:	462a      	mov	r2, r5
    ed22:	4621      	mov	r1, r4
    ed24:	4630      	mov	r0, r6
    ed26:	f7ff ff57 	bl	ebd8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ed2a:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    ed2c:	1962      	adds	r2, r4, r5
	asm("dsb");
    ed2e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ed32:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ed36:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    ed3a:	3320      	adds	r3, #32
	} while (location < end_addr);
    ed3c:	429a      	cmp	r2, r3
    ed3e:	d8fa      	bhi.n	ed36 <usb_serial_flush_callback+0x46>
	asm("dsb");
    ed40:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ed44:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ed48:	4631      	mov	r1, r6
    ed4a:	2004      	movs	r0, #4
    ed4c:	f7ff ff5c 	bl	ec08 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ed50:	4b0b      	ldr	r3, [pc, #44]	; (ed80 <usb_serial_flush_callback+0x90>)
    ed52:	781b      	ldrb	r3, [r3, #0]
    ed54:	3301      	adds	r3, #1
    ed56:	b2db      	uxtb	r3, r3
    ed58:	2b03      	cmp	r3, #3
    ed5a:	d805      	bhi.n	ed68 <usb_serial_flush_callback+0x78>
    ed5c:	4a08      	ldr	r2, [pc, #32]	; (ed80 <usb_serial_flush_callback+0x90>)
    ed5e:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    ed60:	4b06      	ldr	r3, [pc, #24]	; (ed7c <usb_serial_flush_callback+0x8c>)
    ed62:	2200      	movs	r2, #0
    ed64:	801a      	strh	r2, [r3, #0]
    ed66:	e7cf      	b.n	ed08 <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ed68:	4b05      	ldr	r3, [pc, #20]	; (ed80 <usb_serial_flush_callback+0x90>)
    ed6a:	2200      	movs	r2, #0
    ed6c:	701a      	strb	r2, [r3, #0]
    ed6e:	e7f7      	b.n	ed60 <usb_serial_flush_callback+0x70>
    ed70:	4770      	bx	lr
    ed72:	bf00      	nop
    ed74:	20005846 	.word	0x20005846
    ed78:	20005848 	.word	0x20005848
    ed7c:	2000582a 	.word	0x2000582a
    ed80:	20005845 	.word	0x20005845
    ed84:	20004400 	.word	0x20004400
    ed88:	20201080 	.word	0x20201080

0000ed8c <rx_queue_transfer>:
{
    ed8c:	b570      	push	{r4, r5, r6, lr}
    ed8e:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ed90:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ed94:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    ed98:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    ed9c:	4c13      	ldr	r4, [pc, #76]	; (edec <rx_queue_transfer+0x60>)
    ed9e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    eda2:	4d13      	ldr	r5, [pc, #76]	; (edf0 <rx_queue_transfer+0x64>)
    eda4:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    eda8:	4e12      	ldr	r6, [pc, #72]	; (edf4 <rx_queue_transfer+0x68>)
    edaa:	8832      	ldrh	r2, [r6, #0]
    edac:	4621      	mov	r1, r4
    edae:	4628      	mov	r0, r5
    edb0:	f7ff ff12 	bl	ebd8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    edb4:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
    edb6:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    edb8:	4422      	add	r2, r4
	asm("dsb");
    edba:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    edbe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    edc2:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
    edc6:	3320      	adds	r3, #32
	} while (location < end_addr);
    edc8:	429a      	cmp	r2, r3
    edca:	d8fa      	bhi.n	edc2 <rx_queue_transfer+0x36>
	asm("dsb");
    edcc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    edd0:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    edd4:	4629      	mov	r1, r5
    edd6:	2003      	movs	r0, #3
    edd8:	f7ff ff2a 	bl	ec30 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    eddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ede0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ede4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    ede8:	bd70      	pop	{r4, r5, r6, pc}
    edea:	bf00      	nop
    edec:	20200080 	.word	0x20200080
    edf0:	20004300 	.word	0x20004300
    edf4:	20005828 	.word	0x20005828

0000edf8 <rx_event>:
{
    edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    edfa:	6843      	ldr	r3, [r0, #4]
    edfc:	4a23      	ldr	r2, [pc, #140]	; (ee8c <rx_event+0x94>)
    edfe:	8814      	ldrh	r4, [r2, #0]
    ee00:	f3c3 430e 	ubfx	r3, r3, #16, #15
    ee04:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
    ee06:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
    ee08:	2c00      	cmp	r4, #0
    ee0a:	dd3a      	ble.n	ee82 <rx_event+0x8a>
		uint32_t head = rx_head;
    ee0c:	4b20      	ldr	r3, [pc, #128]	; (ee90 <rx_event+0x98>)
    ee0e:	781b      	ldrb	r3, [r3, #0]
    ee10:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
    ee12:	4a20      	ldr	r2, [pc, #128]	; (ee94 <rx_event+0x9c>)
    ee14:	7812      	ldrb	r2, [r2, #0]
    ee16:	b2d2      	uxtb	r2, r2
    ee18:	4293      	cmp	r3, r2
    ee1a:	d008      	beq.n	ee2e <rx_event+0x36>
			uint32_t ii = rx_list[head];
    ee1c:	4a1e      	ldr	r2, [pc, #120]	; (ee98 <rx_event+0xa0>)
    ee1e:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
    ee20:	4a1e      	ldr	r2, [pc, #120]	; (ee9c <rx_event+0xa4>)
    ee22:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    ee26:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
    ee2a:	4294      	cmp	r4, r2
    ee2c:	d914      	bls.n	ee58 <rx_event+0x60>
		rx_count[i] = len;
    ee2e:	4a1b      	ldr	r2, [pc, #108]	; (ee9c <rx_event+0xa4>)
    ee30:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
    ee34:	4a1a      	ldr	r2, [pc, #104]	; (eea0 <rx_event+0xa8>)
    ee36:	2100      	movs	r1, #0
    ee38:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    ee3c:	3301      	adds	r3, #1
    ee3e:	2b09      	cmp	r3, #9
    ee40:	bf28      	it	cs
    ee42:	460b      	movcs	r3, r1
		rx_list[head] = i;
    ee44:	4a14      	ldr	r2, [pc, #80]	; (ee98 <rx_event+0xa0>)
    ee46:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
    ee48:	b2db      	uxtb	r3, r3
    ee4a:	4a11      	ldr	r2, [pc, #68]	; (ee90 <rx_event+0x98>)
    ee4c:	7013      	strb	r3, [r2, #0]
		rx_available += len;
    ee4e:	4b15      	ldr	r3, [pc, #84]	; (eea4 <rx_event+0xac>)
    ee50:	681a      	ldr	r2, [r3, #0]
    ee52:	4414      	add	r4, r2
    ee54:	601c      	str	r4, [r3, #0]
}
    ee56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    ee58:	eb06 2047 	add.w	r0, r6, r7, lsl #9
    ee5c:	4b12      	ldr	r3, [pc, #72]	; (eea8 <rx_event+0xb0>)
    ee5e:	4622      	mov	r2, r4
    ee60:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    ee64:	4418      	add	r0, r3
    ee66:	f7fe fc77 	bl	d758 <memcpy>
				rx_count[ii] = count + len;
    ee6a:	4426      	add	r6, r4
    ee6c:	4b0b      	ldr	r3, [pc, #44]	; (ee9c <rx_event+0xa4>)
    ee6e:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
    ee72:	4a0c      	ldr	r2, [pc, #48]	; (eea4 <rx_event+0xac>)
    ee74:	6813      	ldr	r3, [r2, #0]
    ee76:	4423      	add	r3, r4
    ee78:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    ee7a:	4628      	mov	r0, r5
    ee7c:	f7ff ff86 	bl	ed8c <rx_queue_transfer>
				return;
    ee80:	e7e9      	b.n	ee56 <rx_event+0x5e>
		rx_queue_transfer(i);
    ee82:	4628      	mov	r0, r5
    ee84:	f7ff ff82 	bl	ed8c <rx_queue_transfer>
    ee88:	e7e5      	b.n	ee56 <rx_event+0x5e>
    ee8a:	bf00      	nop
    ee8c:	20005828 	.word	0x20005828
    ee90:	2000583f 	.word	0x2000583f
    ee94:	20005840 	.word	0x20005840
    ee98:	20005614 	.word	0x20005614
    ee9c:	200055f4 	.word	0x200055f4
    eea0:	20005604 	.word	0x20005604
    eea4:	200055f0 	.word	0x200055f0
    eea8:	20200080 	.word	0x20200080

0000eeac <usb_serial_reset>:
}
    eeac:	4770      	bx	lr
	...

0000eeb0 <usb_serial_configure>:
{
    eeb0:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    eeb2:	4b2a      	ldr	r3, [pc, #168]	; (ef5c <usb_serial_configure+0xac>)
    eeb4:	781b      	ldrb	r3, [r3, #0]
    eeb6:	f013 0fff 	tst.w	r3, #255	; 0xff
    eeba:	bf0c      	ite	eq
    eebc:	2340      	moveq	r3, #64	; 0x40
    eebe:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    eec2:	4d27      	ldr	r5, [pc, #156]	; (ef60 <usb_serial_configure+0xb0>)
    eec4:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    eec6:	4e27      	ldr	r6, [pc, #156]	; (ef64 <usb_serial_configure+0xb4>)
    eec8:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    eeca:	2280      	movs	r2, #128	; 0x80
    eecc:	2100      	movs	r1, #0
    eece:	4826      	ldr	r0, [pc, #152]	; (ef68 <usb_serial_configure+0xb8>)
    eed0:	f002 fd0c 	bl	118ec <memset>
	tx_head = 0;
    eed4:	2400      	movs	r4, #0
    eed6:	4b25      	ldr	r3, [pc, #148]	; (ef6c <usb_serial_configure+0xbc>)
    eed8:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
    eeda:	4b25      	ldr	r3, [pc, #148]	; (ef70 <usb_serial_configure+0xc0>)
    eedc:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    eede:	f44f 7280 	mov.w	r2, #256	; 0x100
    eee2:	4621      	mov	r1, r4
    eee4:	4823      	ldr	r0, [pc, #140]	; (ef74 <usb_serial_configure+0xc4>)
    eee6:	f002 fd01 	bl	118ec <memset>
	memset(rx_count, 0, sizeof(rx_count));
    eeea:	4b23      	ldr	r3, [pc, #140]	; (ef78 <usb_serial_configure+0xc8>)
    eeec:	601c      	str	r4, [r3, #0]
    eeee:	605c      	str	r4, [r3, #4]
    eef0:	609c      	str	r4, [r3, #8]
    eef2:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
    eef4:	4b21      	ldr	r3, [pc, #132]	; (ef7c <usb_serial_configure+0xcc>)
    eef6:	601c      	str	r4, [r3, #0]
    eef8:	605c      	str	r4, [r3, #4]
    eefa:	609c      	str	r4, [r3, #8]
    eefc:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
    eefe:	4b20      	ldr	r3, [pc, #128]	; (ef80 <usb_serial_configure+0xd0>)
    ef00:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
    ef02:	4b20      	ldr	r3, [pc, #128]	; (ef84 <usb_serial_configure+0xd4>)
    ef04:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
    ef06:	4b20      	ldr	r3, [pc, #128]	; (ef88 <usb_serial_configure+0xd8>)
    ef08:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    ef0a:	4623      	mov	r3, r4
    ef0c:	4622      	mov	r2, r4
    ef0e:	2110      	movs	r1, #16
    ef10:	2002      	movs	r0, #2
    ef12:	f7ff fe3d 	bl	eb90 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    ef16:	4b1d      	ldr	r3, [pc, #116]	; (ef8c <usb_serial_configure+0xdc>)
    ef18:	4622      	mov	r2, r4
    ef1a:	8831      	ldrh	r1, [r6, #0]
    ef1c:	2003      	movs	r0, #3
    ef1e:	f7ff fe15 	bl	eb4c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    ef22:	4623      	mov	r3, r4
    ef24:	2201      	movs	r2, #1
    ef26:	8829      	ldrh	r1, [r5, #0]
    ef28:	2004      	movs	r0, #4
    ef2a:	f7ff fe31 	bl	eb90 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ef2e:	4620      	mov	r0, r4
    ef30:	f7ff ff2c 	bl	ed8c <rx_queue_transfer>
    ef34:	3401      	adds	r4, #1
    ef36:	2c08      	cmp	r4, #8
    ef38:	d1f9      	bne.n	ef2e <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
    ef3a:	4b15      	ldr	r3, [pc, #84]	; (ef90 <usb_serial_configure+0xe0>)
    ef3c:	4a15      	ldr	r2, [pc, #84]	; (ef94 <usb_serial_configure+0xe4>)
    ef3e:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    ef40:	4b15      	ldr	r3, [pc, #84]	; (ef98 <usb_serial_configure+0xe8>)
    ef42:	2200      	movs	r2, #0
    ef44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    ef48:	224a      	movs	r2, #74	; 0x4a
    ef4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    ef4e:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ef52:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    ef56:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    ef5a:	bd70      	pop	{r4, r5, r6, pc}
    ef5c:	20005849 	.word	0x20005849
    ef60:	2000582c 	.word	0x2000582c
    ef64:	20005828 	.word	0x20005828
    ef68:	20004400 	.word	0x20004400
    ef6c:	20005845 	.word	0x20005845
    ef70:	2000582a 	.word	0x2000582a
    ef74:	20004300 	.word	0x20004300
    ef78:	200055f4 	.word	0x200055f4
    ef7c:	20005604 	.word	0x20005604
    ef80:	2000583f 	.word	0x2000583f
    ef84:	20005840 	.word	0x20005840
    ef88:	200055f0 	.word	0x200055f0
    ef8c:	0000edf9 	.word	0x0000edf9
    ef90:	20005810 	.word	0x20005810
    ef94:	0000ecf1 	.word	0x0000ecf1
    ef98:	402e0000 	.word	0x402e0000

0000ef9c <usb_serial_read>:
{
    ef9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    efa0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    efa4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    efa8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
    efac:	4b2b      	ldr	r3, [pc, #172]	; (f05c <usb_serial_read+0xc0>)
    efae:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    efb0:	468a      	mov	sl, r1
    efb2:	2900      	cmp	r1, #0
    efb4:	d045      	beq.n	f042 <usb_serial_read+0xa6>
    efb6:	4681      	mov	r9, r0
    efb8:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    efba:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
    efbc:	f8df b0b4 	ldr.w	fp, [pc, #180]	; f074 <usb_serial_read+0xd8>
    efc0:	e015      	b.n	efee <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    efc2:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    efc6:	462a      	mov	r2, r5
    efc8:	4b25      	ldr	r3, [pc, #148]	; (f060 <usb_serial_read+0xc4>)
    efca:	4419      	add	r1, r3
    efcc:	4648      	mov	r0, r9
    efce:	f7fe fbc3 	bl	d758 <memcpy>
			p += avail;
    efd2:	44a9      	add	r9, r5
			rx_available -= avail;
    efd4:	4a23      	ldr	r2, [pc, #140]	; (f064 <usb_serial_read+0xc8>)
    efd6:	6813      	ldr	r3, [r2, #0]
    efd8:	1b5b      	subs	r3, r3, r5
    efda:	6013      	str	r3, [r2, #0]
			count += avail;
    efdc:	442f      	add	r7, r5
			rx_tail = tail;
    efde:	b2e3      	uxtb	r3, r4
    efe0:	4a1e      	ldr	r2, [pc, #120]	; (f05c <usb_serial_read+0xc0>)
    efe2:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    efe4:	4630      	mov	r0, r6
    efe6:	f7ff fed1 	bl	ed8c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    efea:	45ba      	cmp	sl, r7
    efec:	d934      	bls.n	f058 <usb_serial_read+0xbc>
    efee:	f89b 3000 	ldrb.w	r3, [fp]
    eff2:	b2db      	uxtb	r3, r3
    eff4:	42a3      	cmp	r3, r4
    eff6:	d02d      	beq.n	f054 <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
    eff8:	3401      	adds	r4, #1
    effa:	2c09      	cmp	r4, #9
    effc:	bf28      	it	cs
    effe:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    f000:	4b19      	ldr	r3, [pc, #100]	; (f068 <usb_serial_read+0xcc>)
    f002:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
    f004:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
    f008:	4b18      	ldr	r3, [pc, #96]	; (f06c <usb_serial_read+0xd0>)
    f00a:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
    f00e:	4b18      	ldr	r3, [pc, #96]	; (f070 <usb_serial_read+0xd4>)
    f010:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    f014:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
    f016:	45a8      	cmp	r8, r5
    f018:	d2d3      	bcs.n	efc2 <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f01a:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    f01e:	4642      	mov	r2, r8
    f020:	4b0f      	ldr	r3, [pc, #60]	; (f060 <usb_serial_read+0xc4>)
    f022:	4419      	add	r1, r3
    f024:	4648      	mov	r0, r9
    f026:	f7fe fb97 	bl	d758 <memcpy>
			rx_available -= len;
    f02a:	4a0e      	ldr	r2, [pc, #56]	; (f064 <usb_serial_read+0xc8>)
    f02c:	6813      	ldr	r3, [r2, #0]
    f02e:	eba3 030a 	sub.w	r3, r3, sl
    f032:	443b      	add	r3, r7
    f034:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
    f036:	4b0d      	ldr	r3, [pc, #52]	; (f06c <usb_serial_read+0xd0>)
    f038:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    f03c:	4490      	add	r8, r2
    f03e:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f042:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    f04a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    f04e:	4650      	mov	r0, sl
    f050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f054:	46ba      	mov	sl, r7
    f056:	e7f4      	b.n	f042 <usb_serial_read+0xa6>
			count += avail;
    f058:	46ba      	mov	sl, r7
    f05a:	e7f2      	b.n	f042 <usb_serial_read+0xa6>
    f05c:	20005840 	.word	0x20005840
    f060:	20200080 	.word	0x20200080
    f064:	200055f0 	.word	0x200055f0
    f068:	20005614 	.word	0x20005614
    f06c:	20005604 	.word	0x20005604
    f070:	200055f4 	.word	0x200055f4
    f074:	2000583f 	.word	0x2000583f

0000f078 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    f078:	4b0c      	ldr	r3, [pc, #48]	; (f0ac <usb_serial_peekchar+0x34>)
    f07a:	781b      	ldrb	r3, [r3, #0]
    f07c:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    f07e:	4a0c      	ldr	r2, [pc, #48]	; (f0b0 <usb_serial_peekchar+0x38>)
    f080:	7812      	ldrb	r2, [r2, #0]
    f082:	b2d2      	uxtb	r2, r2
    f084:	4293      	cmp	r3, r2
    f086:	d00d      	beq.n	f0a4 <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
    f088:	3301      	adds	r3, #1
    f08a:	2b09      	cmp	r3, #9
    f08c:	bf28      	it	cs
    f08e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    f090:	4a08      	ldr	r2, [pc, #32]	; (f0b4 <usb_serial_peekchar+0x3c>)
    f092:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f094:	4b08      	ldr	r3, [pc, #32]	; (f0b8 <usb_serial_peekchar+0x40>)
    f096:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    f09a:	4b08      	ldr	r3, [pc, #32]	; (f0bc <usb_serial_peekchar+0x44>)
    f09c:	eb03 2342 	add.w	r3, r3, r2, lsl #9
    f0a0:	5c58      	ldrb	r0, [r3, r1]
    f0a2:	4770      	bx	lr
	if (tail == rx_head) return -1;
    f0a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f0a8:	4770      	bx	lr
    f0aa:	bf00      	nop
    f0ac:	20005840 	.word	0x20005840
    f0b0:	2000583f 	.word	0x2000583f
    f0b4:	20005614 	.word	0x20005614
    f0b8:	20005604 	.word	0x20005604
    f0bc:	20200080 	.word	0x20200080

0000f0c0 <usb_serial_available>:
{
    f0c0:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    f0c2:	4b04      	ldr	r3, [pc, #16]	; (f0d4 <usb_serial_available+0x14>)
    f0c4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    f0c6:	b10c      	cbz	r4, f0cc <usb_serial_available+0xc>
}
    f0c8:	4620      	mov	r0, r4
    f0ca:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    f0cc:	f000 f9a4 	bl	f418 <yield>
    f0d0:	e7fa      	b.n	f0c8 <usb_serial_available+0x8>
    f0d2:	bf00      	nop
    f0d4:	200055f0 	.word	0x200055f0

0000f0d8 <usb_serial_flush_input>:
{
    f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    f0da:	4b12      	ldr	r3, [pc, #72]	; (f124 <usb_serial_flush_input+0x4c>)
    f0dc:	781c      	ldrb	r4, [r3, #0]
    f0de:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    f0e0:	4b11      	ldr	r3, [pc, #68]	; (f128 <usb_serial_flush_input+0x50>)
    f0e2:	781b      	ldrb	r3, [r3, #0]
    f0e4:	b2db      	uxtb	r3, r3
    f0e6:	429c      	cmp	r4, r3
    f0e8:	d01a      	beq.n	f120 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
    f0ea:	4f10      	ldr	r7, [pc, #64]	; (f12c <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
    f0ec:	4d10      	ldr	r5, [pc, #64]	; (f130 <usb_serial_flush_input+0x58>)
    f0ee:	4e11      	ldr	r6, [pc, #68]	; (f134 <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
    f0f0:	3401      	adds	r4, #1
    f0f2:	2c09      	cmp	r4, #9
    f0f4:	bf28      	it	cs
    f0f6:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    f0f8:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
    f0fa:	682b      	ldr	r3, [r5, #0]
    f0fc:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
    f100:	490d      	ldr	r1, [pc, #52]	; (f138 <usb_serial_flush_input+0x60>)
    f102:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    f106:	1a52      	subs	r2, r2, r1
    f108:	1a9b      	subs	r3, r3, r2
    f10a:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
    f10c:	f7ff fe3e 	bl	ed8c <rx_queue_transfer>
		rx_tail = tail;
    f110:	b2e2      	uxtb	r2, r4
    f112:	4b04      	ldr	r3, [pc, #16]	; (f124 <usb_serial_flush_input+0x4c>)
    f114:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
    f116:	4b04      	ldr	r3, [pc, #16]	; (f128 <usb_serial_flush_input+0x50>)
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	b2db      	uxtb	r3, r3
    f11c:	42a3      	cmp	r3, r4
    f11e:	d1e7      	bne.n	f0f0 <usb_serial_flush_input+0x18>
}
    f120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f122:	bf00      	nop
    f124:	20005840 	.word	0x20005840
    f128:	2000583f 	.word	0x2000583f
    f12c:	20005614 	.word	0x20005614
    f130:	200055f0 	.word	0x200055f0
    f134:	200055f4 	.word	0x200055f4
    f138:	20005604 	.word	0x20005604

0000f13c <usb_serial_getchar>:
{
    f13c:	b500      	push	{lr}
    f13e:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    f140:	2101      	movs	r1, #1
    f142:	f10d 0007 	add.w	r0, sp, #7
    f146:	f7ff ff29 	bl	ef9c <usb_serial_read>
    f14a:	b120      	cbz	r0, f156 <usb_serial_getchar+0x1a>
    f14c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    f150:	b003      	add	sp, #12
    f152:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    f156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f15a:	e7f9      	b.n	f150 <usb_serial_getchar+0x14>

0000f15c <usb_serial_write>:
{
    f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f160:	b085      	sub	sp, #20
    f162:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
    f164:	4b62      	ldr	r3, [pc, #392]	; (f2f0 <usb_serial_write+0x194>)
    f166:	781b      	ldrb	r3, [r3, #0]
    f168:	2b00      	cmp	r3, #0
    f16a:	f000 80bd 	beq.w	f2e8 <usb_serial_write+0x18c>
    f16e:	468b      	mov	fp, r1
	while (size > 0) {
    f170:	2900      	cmp	r1, #0
    f172:	d047      	beq.n	f204 <usb_serial_write+0xa8>
	uint32_t sent=0;
    f174:	2300      	movs	r3, #0
    f176:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    f178:	4c5e      	ldr	r4, [pc, #376]	; (f2f4 <usb_serial_write+0x198>)
    f17a:	2601      	movs	r6, #1
    f17c:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
    f180:	f8df 818c 	ldr.w	r8, [pc, #396]	; f310 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
    f184:	f8df a184 	ldr.w	sl, [pc, #388]	; f30c <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
    f188:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f18c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    f18e:	4b5a      	ldr	r3, [pc, #360]	; (f2f8 <usb_serial_write+0x19c>)
    f190:	f893 9000 	ldrb.w	r9, [r3]
    f194:	4b59      	ldr	r3, [pc, #356]	; (f2fc <usb_serial_write+0x1a0>)
    f196:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
    f19a:	4b59      	ldr	r3, [pc, #356]	; (f300 <usb_serial_write+0x1a4>)
    f19c:	881b      	ldrh	r3, [r3, #0]
    f19e:	b94b      	cbnz	r3, f1b4 <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
    f1a0:	2700      	movs	r7, #0
		int waiting=0;
    f1a2:	463d      	mov	r5, r7
    f1a4:	e043      	b.n	f22e <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
    f1a6:	4b56      	ldr	r3, [pc, #344]	; (f300 <usb_serial_write+0x1a4>)
    f1a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f1ac:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
    f1ae:	2300      	movs	r3, #0
    f1b0:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f1b4:	4b50      	ldr	r3, [pc, #320]	; (f2f8 <usb_serial_write+0x19c>)
    f1b6:	781b      	ldrb	r3, [r3, #0]
    f1b8:	02df      	lsls	r7, r3, #11
    f1ba:	4a51      	ldr	r2, [pc, #324]	; (f300 <usb_serial_write+0x1a4>)
    f1bc:	8815      	ldrh	r5, [r2, #0]
    f1be:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
    f1c2:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
    f1c6:	4b4f      	ldr	r3, [pc, #316]	; (f304 <usb_serial_write+0x1a8>)
    f1c8:	4418      	add	r0, r3
		if (size >= tx_available) {
    f1ca:	455d      	cmp	r5, fp
    f1cc:	d947      	bls.n	f25e <usb_serial_write+0x102>
			memcpy(txdata, data, size);
    f1ce:	465a      	mov	r2, fp
    f1d0:	9903      	ldr	r1, [sp, #12]
    f1d2:	f7fe fac1 	bl	d758 <memcpy>
			tx_available -= size;
    f1d6:	eba5 050b 	sub.w	r5, r5, fp
    f1da:	4b49      	ldr	r3, [pc, #292]	; (f300 <usb_serial_write+0x1a4>)
    f1dc:	801d      	strh	r5, [r3, #0]
			sent += size;
    f1de:	9b01      	ldr	r3, [sp, #4]
    f1e0:	445b      	add	r3, fp
    f1e2:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    f1e4:	4b48      	ldr	r3, [pc, #288]	; (f308 <usb_serial_write+0x1ac>)
    f1e6:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    f1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
    f1ee:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
    f1f2:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    f1f6:	2300      	movs	r3, #0
    f1f8:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    f1fa:	f1bb 0f00 	cmp.w	fp, #0
    f1fe:	d1c3      	bne.n	f188 <usb_serial_write+0x2c>
    f200:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
    f204:	4658      	mov	r0, fp
    f206:	e070      	b.n	f2ea <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
    f208:	f89a 3000 	ldrb.w	r3, [sl]
    f20c:	b9f3      	cbnz	r3, f24c <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    f20e:	f8d8 3000 	ldr.w	r3, [r8]
    f212:	1bdb      	subs	r3, r3, r7
    f214:	2b78      	cmp	r3, #120	; 0x78
    f216:	d81b      	bhi.n	f250 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
    f218:	4b35      	ldr	r3, [pc, #212]	; (f2f0 <usb_serial_write+0x194>)
    f21a:	781b      	ldrb	r3, [r3, #0]
    f21c:	b1eb      	cbz	r3, f25a <usb_serial_write+0xfe>
			yield();
    f21e:	f000 f8fb 	bl	f418 <yield>
			tx_noautoflush = 1;
    f222:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
    f224:	4635      	mov	r5, r6
    f226:	4b36      	ldr	r3, [pc, #216]	; (f300 <usb_serial_write+0x1a4>)
    f228:	881b      	ldrh	r3, [r3, #0]
    f22a:	2b00      	cmp	r3, #0
    f22c:	d1c2      	bne.n	f1b4 <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
    f22e:	4648      	mov	r0, r9
    f230:	f7ff fd0e 	bl	ec50 <usb_transfer_status>
			if (!(status & 0x80)) {
    f234:	f010 0f80 	tst.w	r0, #128	; 0x80
    f238:	d0b5      	beq.n	f1a6 <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
    f23a:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
    f23e:	2300      	movs	r3, #0
    f240:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
    f242:	2d00      	cmp	r5, #0
    f244:	d1e0      	bne.n	f208 <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
    f246:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
    f24a:	e7dd      	b.n	f208 <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
    f24c:	9801      	ldr	r0, [sp, #4]
    f24e:	e04c      	b.n	f2ea <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
    f250:	4b2e      	ldr	r3, [pc, #184]	; (f30c <usb_serial_write+0x1b0>)
    f252:	2201      	movs	r2, #1
    f254:	701a      	strb	r2, [r3, #0]
				return sent;
    f256:	9801      	ldr	r0, [sp, #4]
    f258:	e047      	b.n	f2ea <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
    f25a:	9801      	ldr	r0, [sp, #4]
    f25c:	e045      	b.n	f2ea <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
    f25e:	462a      	mov	r2, r5
    f260:	9903      	ldr	r1, [sp, #12]
    f262:	f7fe fa79 	bl	d758 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f266:	4d27      	ldr	r5, [pc, #156]	; (f304 <usb_serial_write+0x1a8>)
    f268:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    f26a:	2300      	movs	r3, #0
    f26c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f270:	4629      	mov	r1, r5
    f272:	4648      	mov	r0, r9
    f274:	f7ff fcb0 	bl	ebd8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f278:	462b      	mov	r3, r5
	asm("dsb");
    f27a:	f3bf 8f4f 	dsb	sy
    f27e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    f282:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    f286:	428a      	cmp	r2, r1
    f288:	bf8c      	ite	hi
    f28a:	2201      	movhi	r2, #1
    f28c:	2240      	movls	r2, #64	; 0x40
    f28e:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    f292:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    f296:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    f29a:	3320      	adds	r3, #32
	} while (location < end_addr);
    f29c:	429d      	cmp	r5, r3
    f29e:	d1fa      	bne.n	f296 <usb_serial_write+0x13a>
	asm("dsb");
    f2a0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f2a4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    f2a8:	4649      	mov	r1, r9
    f2aa:	2004      	movs	r0, #4
    f2ac:	f7ff fcac 	bl	ec08 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    f2b0:	4b11      	ldr	r3, [pc, #68]	; (f2f8 <usb_serial_write+0x19c>)
    f2b2:	781b      	ldrb	r3, [r3, #0]
    f2b4:	3301      	adds	r3, #1
    f2b6:	b2db      	uxtb	r3, r3
    f2b8:	2b03      	cmp	r3, #3
    f2ba:	d811      	bhi.n	f2e0 <usb_serial_write+0x184>
    f2bc:	4a0e      	ldr	r2, [pc, #56]	; (f2f8 <usb_serial_write+0x19c>)
    f2be:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    f2c0:	4a0f      	ldr	r2, [pc, #60]	; (f300 <usb_serial_write+0x1a4>)
    f2c2:	8813      	ldrh	r3, [r2, #0]
    f2c4:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
    f2c8:	9901      	ldr	r1, [sp, #4]
    f2ca:	4419      	add	r1, r3
    f2cc:	9101      	str	r1, [sp, #4]
			data += tx_available;
    f2ce:	9903      	ldr	r1, [sp, #12]
    f2d0:	4419      	add	r1, r3
    f2d2:	9103      	str	r1, [sp, #12]
			tx_available = 0;
    f2d4:	2300      	movs	r3, #0
    f2d6:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
    f2d8:	4a0b      	ldr	r2, [pc, #44]	; (f308 <usb_serial_write+0x1ac>)
    f2da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
    f2de:	e788      	b.n	f1f2 <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
    f2e0:	4b05      	ldr	r3, [pc, #20]	; (f2f8 <usb_serial_write+0x19c>)
    f2e2:	2200      	movs	r2, #0
    f2e4:	701a      	strb	r2, [r3, #0]
    f2e6:	e7eb      	b.n	f2c0 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
    f2e8:	2000      	movs	r0, #0
}
    f2ea:	b005      	add	sp, #20
    f2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2f0:	20005848 	.word	0x20005848
    f2f4:	20005846 	.word	0x20005846
    f2f8:	20005845 	.word	0x20005845
    f2fc:	20004400 	.word	0x20004400
    f300:	2000582a 	.word	0x2000582a
    f304:	20201080 	.word	0x20201080
    f308:	402e0000 	.word	0x402e0000
    f30c:	20005844 	.word	0x20005844
    f310:	200057f8 	.word	0x200057f8

0000f314 <usb_serial_putchar>:
{
    f314:	b500      	push	{lr}
    f316:	b083      	sub	sp, #12
    f318:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    f31c:	2101      	movs	r1, #1
    f31e:	f10d 0007 	add.w	r0, sp, #7
    f322:	f7ff ff1b 	bl	f15c <usb_serial_write>
}
    f326:	b003      	add	sp, #12
    f328:	f85d fb04 	ldr.w	pc, [sp], #4

0000f32c <usb_serial_write_buffer_free>:
{
    f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
    f32e:	4b0f      	ldr	r3, [pc, #60]	; (f36c <usb_serial_write_buffer_free+0x40>)
    f330:	2201      	movs	r2, #1
    f332:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
    f334:	4d0e      	ldr	r5, [pc, #56]	; (f370 <usb_serial_write_buffer_free+0x44>)
    f336:	2400      	movs	r4, #0
	uint32_t sum = 0;
    f338:	4627      	mov	r7, r4
		if (i == tx_head) continue;
    f33a:	4e0e      	ldr	r6, [pc, #56]	; (f374 <usb_serial_write_buffer_free+0x48>)
    f33c:	e003      	b.n	f346 <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
    f33e:	3401      	adds	r4, #1
    f340:	3520      	adds	r5, #32
    f342:	2c04      	cmp	r4, #4
    f344:	d00b      	beq.n	f35e <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
    f346:	7833      	ldrb	r3, [r6, #0]
    f348:	42a3      	cmp	r3, r4
    f34a:	d0f8      	beq.n	f33e <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    f34c:	4628      	mov	r0, r5
    f34e:	f7ff fc7f 	bl	ec50 <usb_transfer_status>
    f352:	f010 0f80 	tst.w	r0, #128	; 0x80
    f356:	bf08      	it	eq
    f358:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
    f35c:	e7ef      	b.n	f33e <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
    f35e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f362:	4b02      	ldr	r3, [pc, #8]	; (f36c <usb_serial_write_buffer_free+0x40>)
    f364:	2200      	movs	r2, #0
    f366:	701a      	strb	r2, [r3, #0]
}
    f368:	4638      	mov	r0, r7
    f36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f36c:	20005846 	.word	0x20005846
    f370:	20004400 	.word	0x20004400
    f374:	20005845 	.word	0x20005845

0000f378 <usb_serial_flush_output>:
	if (!usb_configuration) return;
    f378:	4b21      	ldr	r3, [pc, #132]	; (f400 <usb_serial_flush_output+0x88>)
    f37a:	781b      	ldrb	r3, [r3, #0]
    f37c:	2b00      	cmp	r3, #0
    f37e:	d03e      	beq.n	f3fe <usb_serial_flush_output+0x86>
{
    f380:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    f382:	4b20      	ldr	r3, [pc, #128]	; (f404 <usb_serial_flush_output+0x8c>)
    f384:	881d      	ldrh	r5, [r3, #0]
    f386:	b905      	cbnz	r5, f38a <usb_serial_flush_output+0x12>
}
    f388:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
    f38a:	4a1f      	ldr	r2, [pc, #124]	; (f408 <usb_serial_flush_output+0x90>)
    f38c:	2101      	movs	r1, #1
    f38e:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    f390:	4a1e      	ldr	r2, [pc, #120]	; (f40c <usb_serial_flush_output+0x94>)
    f392:	7811      	ldrb	r1, [r2, #0]
    f394:	4e1e      	ldr	r6, [pc, #120]	; (f410 <usb_serial_flush_output+0x98>)
    f396:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f39a:	4c1e      	ldr	r4, [pc, #120]	; (f414 <usb_serial_flush_output+0x9c>)
    f39c:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    f3a0:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f3a4:	2300      	movs	r3, #0
    f3a6:	462a      	mov	r2, r5
    f3a8:	4621      	mov	r1, r4
    f3aa:	4630      	mov	r0, r6
    f3ac:	f7ff fc14 	bl	ebd8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f3b0:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    f3b2:	1962      	adds	r2, r4, r5
	asm("dsb");
    f3b4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f3b8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    f3bc:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    f3c0:	3320      	adds	r3, #32
	} while (location < end_addr);
    f3c2:	429a      	cmp	r2, r3
    f3c4:	d8fa      	bhi.n	f3bc <usb_serial_flush_output+0x44>
	asm("dsb");
    f3c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f3ca:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f3ce:	4631      	mov	r1, r6
    f3d0:	2004      	movs	r0, #4
    f3d2:	f7ff fc19 	bl	ec08 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f3d6:	4b0d      	ldr	r3, [pc, #52]	; (f40c <usb_serial_flush_output+0x94>)
    f3d8:	781b      	ldrb	r3, [r3, #0]
    f3da:	3301      	adds	r3, #1
    f3dc:	b2db      	uxtb	r3, r3
    f3de:	2b03      	cmp	r3, #3
    f3e0:	d809      	bhi.n	f3f6 <usb_serial_flush_output+0x7e>
    f3e2:	4a0a      	ldr	r2, [pc, #40]	; (f40c <usb_serial_flush_output+0x94>)
    f3e4:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    f3e6:	2300      	movs	r3, #0
    f3e8:	4a06      	ldr	r2, [pc, #24]	; (f404 <usb_serial_flush_output+0x8c>)
    f3ea:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
    f3ec:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f3f0:	4a05      	ldr	r2, [pc, #20]	; (f408 <usb_serial_flush_output+0x90>)
    f3f2:	7013      	strb	r3, [r2, #0]
    f3f4:	e7c8      	b.n	f388 <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f3f6:	4b05      	ldr	r3, [pc, #20]	; (f40c <usb_serial_flush_output+0x94>)
    f3f8:	2200      	movs	r2, #0
    f3fa:	701a      	strb	r2, [r3, #0]
    f3fc:	e7f3      	b.n	f3e6 <usb_serial_flush_output+0x6e>
    f3fe:	4770      	bx	lr
    f400:	20005848 	.word	0x20005848
    f404:	2000582a 	.word	0x2000582a
    f408:	20005846 	.word	0x20005846
    f40c:	20005845 	.word	0x20005845
    f410:	20004400 	.word	0x20004400
    f414:	20201080 	.word	0x20201080

0000f418 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    f41a:	4b39      	ldr	r3, [pc, #228]	; (f500 <yield+0xe8>)
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	b1ab      	cbz	r3, f44c <yield+0x34>
	if (running) return; // TODO: does this need to be atomic?
    f420:	4a38      	ldr	r2, [pc, #224]	; (f504 <yield+0xec>)
    f422:	7812      	ldrb	r2, [r2, #0]
    f424:	b992      	cbnz	r2, f44c <yield+0x34>
	running = 1;
    f426:	4a37      	ldr	r2, [pc, #220]	; (f504 <yield+0xec>)
    f428:	2101      	movs	r1, #1
    f42a:	7011      	strb	r1, [r2, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f42c:	f013 0f01 	tst.w	r3, #1
    f430:	d10d      	bne.n	f44e <yield+0x36>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    f432:	4b33      	ldr	r3, [pc, #204]	; (f500 <yield+0xe8>)
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	f013 0f02 	tst.w	r3, #2
    f43a:	d118      	bne.n	f46e <yield+0x56>

	running = 0;
    f43c:	4b31      	ldr	r3, [pc, #196]	; (f504 <yield+0xec>)
    f43e:	2200      	movs	r2, #0
    f440:	701a      	strb	r2, [r3, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f442:	4b2f      	ldr	r3, [pc, #188]	; (f500 <yield+0xe8>)
    f444:	781b      	ldrb	r3, [r3, #0]
    f446:	f013 0f04 	tst.w	r3, #4
    f44a:	d12a      	bne.n	f4a2 <yield+0x8a>
	
};
    f44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        virtual int available() { return usb_serial_available(); }
    f44e:	f7ff fe37 	bl	f0c0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    f452:	b948      	cbnz	r0, f468 <yield+0x50>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    f454:	4b2c      	ldr	r3, [pc, #176]	; (f508 <yield+0xf0>)
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	2b00      	cmp	r3, #0
    f45a:	d0ea      	beq.n	f432 <yield+0x1a>
    f45c:	4a28      	ldr	r2, [pc, #160]	; (f500 <yield+0xe8>)
    f45e:	7813      	ldrb	r3, [r2, #0]
    f460:	f023 0301 	bic.w	r3, r3, #1
    f464:	7013      	strb	r3, [r2, #0]
    f466:	e7e4      	b.n	f432 <yield+0x1a>
		if (Serial.available()) serialEvent();
    f468:	f000 f85a 	bl	f520 <serialEvent()>
    f46c:	e7f2      	b.n	f454 <yield+0x3c>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f46e:	4b27      	ldr	r3, [pc, #156]	; (f50c <yield+0xf4>)
    f470:	781b      	ldrb	r3, [r3, #0]
    f472:	2b00      	cmp	r3, #0
    f474:	d0e2      	beq.n	f43c <yield+0x24>
    f476:	2400      	movs	r4, #0
			s_serials_with_serial_events[i]->doYieldCode();
    f478:	4f25      	ldr	r7, [pc, #148]	; (f510 <yield+0xf8>)
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f47a:	4e24      	ldr	r6, [pc, #144]	; (f50c <yield+0xf4>)
    f47c:	e004      	b.n	f488 <yield+0x70>
    f47e:	3401      	adds	r4, #1
    f480:	7832      	ldrb	r2, [r6, #0]
    f482:	b2e3      	uxtb	r3, r4
    f484:	429a      	cmp	r2, r3
    f486:	d9d9      	bls.n	f43c <yield+0x24>
			s_serials_with_serial_events[i]->doYieldCode();
    f488:	b2e3      	uxtb	r3, r4
    f48a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    f48e:	682b      	ldr	r3, [r5, #0]
    f490:	691b      	ldr	r3, [r3, #16]
    f492:	4628      	mov	r0, r5
    f494:	4798      	blx	r3
    f496:	2800      	cmp	r0, #0
    f498:	d0f1      	beq.n	f47e <yield+0x66>
    f49a:	696b      	ldr	r3, [r5, #20]
    f49c:	689b      	ldr	r3, [r3, #8]
    f49e:	4798      	blx	r3
    f4a0:	e7ed      	b.n	f47e <yield+0x66>
		if (!firstYield) return;  
    f4a2:	4b1c      	ldr	r3, [pc, #112]	; (f514 <yield+0xfc>)
    f4a4:	681b      	ldr	r3, [r3, #0]
    f4a6:	2b00      	cmp	r3, #0
    f4a8:	d0d0      	beq.n	f44c <yield+0x34>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f4aa:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    f4ae:	2b00      	cmp	r3, #0
    f4b0:	d1cc      	bne.n	f44c <yield+0x34>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f4b2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    f4b6:	b672      	cpsid	i
		EventResponder *first = firstYield;
    f4b8:	4b16      	ldr	r3, [pc, #88]	; (f514 <yield+0xfc>)
    f4ba:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f4bc:	b1a0      	cbz	r0, f4e8 <yield+0xd0>
		if (runningFromYield) {
    f4be:	4b16      	ldr	r3, [pc, #88]	; (f518 <yield+0x100>)
    f4c0:	781b      	ldrb	r3, [r3, #0]
    f4c2:	b9ab      	cbnz	r3, f4f0 <yield+0xd8>
		runningFromYield = true;
    f4c4:	4b14      	ldr	r3, [pc, #80]	; (f518 <yield+0x100>)
    f4c6:	2101      	movs	r1, #1
    f4c8:	7019      	strb	r1, [r3, #0]
		firstYield = first->_next;
    f4ca:	6943      	ldr	r3, [r0, #20]
    f4cc:	4911      	ldr	r1, [pc, #68]	; (f514 <yield+0xfc>)
    f4ce:	600b      	str	r3, [r1, #0]
		if (firstYield) {
    f4d0:	b193      	cbz	r3, f4f8 <yield+0xe0>
			firstYield->_prev = nullptr;
    f4d2:	2100      	movs	r1, #0
    f4d4:	6199      	str	r1, [r3, #24]
		if (doit) __enable_irq();
    f4d6:	b902      	cbnz	r2, f4da <yield+0xc2>
    f4d8:	b662      	cpsie	i
		first->_triggered = false;
    f4da:	2400      	movs	r4, #0
    f4dc:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    f4de:	6883      	ldr	r3, [r0, #8]
    f4e0:	4798      	blx	r3
		runningFromYield = false;
    f4e2:	4b0d      	ldr	r3, [pc, #52]	; (f518 <yield+0x100>)
    f4e4:	701c      	strb	r4, [r3, #0]
    f4e6:	e7b1      	b.n	f44c <yield+0x34>
		if (doit) __enable_irq();
    f4e8:	2a00      	cmp	r2, #0
    f4ea:	d1af      	bne.n	f44c <yield+0x34>
    f4ec:	b662      	cpsie	i
    f4ee:	e7ad      	b.n	f44c <yield+0x34>
    f4f0:	2a00      	cmp	r2, #0
    f4f2:	d1ab      	bne.n	f44c <yield+0x34>
    f4f4:	b662      	cpsie	i
    f4f6:	e7a9      	b.n	f44c <yield+0x34>
			lastYield = nullptr;
    f4f8:	4b08      	ldr	r3, [pc, #32]	; (f51c <yield+0x104>)
    f4fa:	2100      	movs	r1, #0
    f4fc:	6019      	str	r1, [r3, #0]
    f4fe:	e7ea      	b.n	f4d6 <yield+0xbe>
    f500:	20003d47 	.word	0x20003d47
    f504:	20005836 	.word	0x20005836
    f508:	600020a6 	.word	0x600020a6
    f50c:	20005835 	.word	0x20005835
    f510:	200050e0 	.word	0x200050e0
    f514:	200050d0 	.word	0x200050d0
    f518:	20005834 	.word	0x20005834
    f51c:	200050dc 	.word	0x200050dc

0000f520 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    f520:	4770      	bx	lr
	...

0000f524 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    f524:	6803      	ldr	r3, [r0, #0]
    f526:	b16b      	cbz	r3, f544 <smalloc_verify_pool+0x20>
    f528:	6842      	ldr	r2, [r0, #4]
    f52a:	b16a      	cbz	r2, f548 <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
    f52c:	4b07      	ldr	r3, [pc, #28]	; (f54c <smalloc_verify_pool+0x28>)
    f52e:	fba3 1302 	umull	r1, r3, r3, r2
    f532:	08db      	lsrs	r3, r3, #3
    f534:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f538:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    f53c:	bf0c      	ite	eq
    f53e:	2001      	moveq	r0, #1
    f540:	2000      	movne	r0, #0
    f542:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    f544:	2000      	movs	r0, #0
    f546:	4770      	bx	lr
    f548:	2000      	movs	r0, #0
	return 1;
}
    f54a:	4770      	bx	lr
    f54c:	aaaaaaab 	.word	0xaaaaaaab

0000f550 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    f550:	b538      	push	{r3, r4, r5, lr}
    f552:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    f554:	f7ff ffe6 	bl	f524 <smalloc_verify_pool>
    f558:	b9b8      	cbnz	r0, f58a <sm_align_pool+0x3a>
    f55a:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
    f55c:	6862      	ldr	r2, [r4, #4]
    f55e:	4b0c      	ldr	r3, [pc, #48]	; (f590 <sm_align_pool+0x40>)
    f560:	fba3 1302 	umull	r1, r3, r3, r2
    f564:	08db      	lsrs	r3, r3, #3
    f566:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    f56a:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    f56e:	d001      	beq.n	f574 <sm_align_pool+0x24>
    f570:	1ad2      	subs	r2, r2, r3
    f572:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    f574:	6863      	ldr	r3, [r4, #4]
    f576:	2bf0      	cmp	r3, #240	; 0xf0
    f578:	d902      	bls.n	f580 <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
    f57a:	2501      	movs	r5, #1
}
    f57c:	4628      	mov	r0, r5
    f57e:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
    f580:	f001 fe22 	bl	111c8 <__errno>
    f584:	231c      	movs	r3, #28
    f586:	6003      	str	r3, [r0, #0]
		return 0;
    f588:	e7f8      	b.n	f57c <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
    f58a:	2501      	movs	r5, #1
    f58c:	e7f6      	b.n	f57c <sm_align_pool+0x2c>
    f58e:	bf00      	nop
    f590:	aaaaaaab 	.word	0xaaaaaaab

0000f594 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    f594:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    f596:	b190      	cbz	r0, f5be <sm_set_pool+0x2a>
    f598:	461d      	mov	r5, r3
    f59a:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    f59c:	b101      	cbz	r1, f5a0 <sm_set_pool+0xc>
    f59e:	b9fa      	cbnz	r2, f5e0 <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
    f5a0:	4620      	mov	r0, r4
    f5a2:	f7ff ffbf 	bl	f524 <smalloc_verify_pool>
    f5a6:	4606      	mov	r6, r0
    f5a8:	b1a8      	cbz	r0, f5d6 <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f5aa:	68a3      	ldr	r3, [r4, #8]
    f5ac:	b96b      	cbnz	r3, f5ca <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
    f5ae:	2300      	movs	r3, #0
    f5b0:	6023      	str	r3, [r4, #0]
    f5b2:	6063      	str	r3, [r4, #4]
    f5b4:	60a3      	str	r3, [r4, #8]
    f5b6:	60e3      	str	r3, [r4, #12]
			return 1;
    f5b8:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    f5ba:	4630      	mov	r0, r6
    f5bc:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    f5be:	f001 fe03 	bl	111c8 <__errno>
    f5c2:	2316      	movs	r3, #22
    f5c4:	6003      	str	r3, [r0, #0]
		return 0;
    f5c6:	2600      	movs	r6, #0
    f5c8:	e7f7      	b.n	f5ba <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f5ca:	6862      	ldr	r2, [r4, #4]
    f5cc:	2100      	movs	r1, #0
    f5ce:	6820      	ldr	r0, [r4, #0]
    f5d0:	f002 f98c 	bl	118ec <memset>
    f5d4:	e7eb      	b.n	f5ae <sm_set_pool+0x1a>
		errno = EINVAL;
    f5d6:	f001 fdf7 	bl	111c8 <__errno>
    f5da:	2316      	movs	r3, #22
    f5dc:	6003      	str	r3, [r0, #0]
		return 0;
    f5de:	e7ec      	b.n	f5ba <sm_set_pool+0x26>
	spool->pool = new_pool;
    f5e0:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
    f5e2:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
    f5e4:	9b04      	ldr	r3, [sp, #16]
    f5e6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    f5e8:	f7ff ffb2 	bl	f550 <sm_align_pool>
    f5ec:	4606      	mov	r6, r0
    f5ee:	2800      	cmp	r0, #0
    f5f0:	d0e3      	beq.n	f5ba <sm_set_pool+0x26>
	if (do_zero) {
    f5f2:	b90d      	cbnz	r5, f5f8 <sm_set_pool+0x64>
	return 1;
    f5f4:	2601      	movs	r6, #1
    f5f6:	e7e0      	b.n	f5ba <sm_set_pool+0x26>
		spool->do_zero = do_zero;
    f5f8:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    f5fa:	6862      	ldr	r2, [r4, #4]
    f5fc:	2100      	movs	r1, #0
    f5fe:	6820      	ldr	r0, [r4, #0]
    f600:	f002 f974 	bl	118ec <memset>
	return 1;
    f604:	2601      	movs	r6, #1
    f606:	e7d8      	b.n	f5ba <sm_set_pool+0x26>

0000f608 <sqrtf>:
    f608:	b508      	push	{r3, lr}
    f60a:	ed2d 8b02 	vpush	{d8}
    f60e:	eeb0 8a40 	vmov.f32	s16, s0
    f612:	f000 fb11 	bl	fc38 <__ieee754_sqrtf>
    f616:	eeb4 8a48 	vcmp.f32	s16, s16
    f61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f61e:	d606      	bvs.n	f62e <sqrtf+0x26>
    f620:	eddf 8a09 	vldr	s17, [pc, #36]	; f648 <sqrtf+0x40>
    f624:	eeb4 8ae8 	vcmpe.f32	s16, s17
    f628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f62c:	d402      	bmi.n	f634 <sqrtf+0x2c>
    f62e:	ecbd 8b02 	vpop	{d8}
    f632:	bd08      	pop	{r3, pc}
    f634:	f001 fdc8 	bl	111c8 <__errno>
    f638:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    f63c:	ecbd 8b02 	vpop	{d8}
    f640:	2321      	movs	r3, #33	; 0x21
    f642:	6003      	str	r3, [r0, #0]
    f644:	bd08      	pop	{r3, pc}
    f646:	bf00      	nop
	...

0000f650 <pow>:
    f650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f654:	ec5b ab10 	vmov	sl, fp, d0
    f658:	ed2d 8b0a 	vpush	{d8-d12}
    f65c:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    f660:	ee11 ea90 	vmov	lr, s3
    f664:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    f668:	f240 70fd 	movw	r0, #2045	; 0x7fd
    f66c:	4286      	cmp	r6, r0
    f66e:	ee10 1a10 	vmov	r1, s0
    f672:	ee11 3a10 	vmov	r3, s2
    f676:	b089      	sub	sp, #36	; 0x24
    f678:	465a      	mov	r2, fp
    f67a:	4665      	mov	r5, ip
    f67c:	ea4f 541e 	mov.w	r4, lr, lsr #20
    f680:	f200 80c6 	bhi.w	f810 <pow+0x1c0>
    f684:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f688:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    f68c:	2e7f      	cmp	r6, #127	; 0x7f
    f68e:	bf98      	it	ls
    f690:	2000      	movls	r0, #0
    f692:	f200 80bd 	bhi.w	f810 <pow+0x1c0>
    f696:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    f69a:	4ce1      	ldr	r4, [pc, #900]	; (fa20 <pow+0x3d0>)
    f69c:	4be1      	ldr	r3, [pc, #900]	; (fa24 <pow+0x3d4>)
    f69e:	4414      	add	r4, r2
    f6a0:	f3c4 3546 	ubfx	r5, r4, #13, #7
    f6a4:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    f6a8:	ed93 6b00 	vldr	d6, [r3]
    f6ac:	ed93 7b02 	vldr	d7, [r3, #8]
    f6b0:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    f6b4:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    f6b8:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    f6bc:	0d26      	lsrs	r6, r4, #20
    f6be:	1524      	asrs	r4, r4, #20
    f6c0:	ee05 4a90 	vmov	s11, r4
    f6c4:	0536      	lsls	r6, r6, #20
    f6c6:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    f6ca:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    f6ce:	1b95      	subs	r5, r2, r6
    f6d0:	eea5 2b06 	vfma.f64	d2, d5, d6
    f6d4:	eea5 9b07 	vfma.f64	d9, d5, d7
    f6d8:	ed93 ab04 	vldr	d10, [r3, #16]
    f6dc:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    f6e0:	ed93 bb08 	vldr	d11, [r3, #32]
    f6e4:	ed93 7b06 	vldr	d7, [r3, #24]
    f6e8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    f6ec:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f6f0:	1e0c      	subs	r4, r1, #0
    f6f2:	ec45 4b1c 	vmov	d12, r4, r5
    f6f6:	eeac 0b08 	vfma.f64	d0, d12, d8
    f6fa:	eea0 3b05 	vfma.f64	d3, d0, d5
    f6fe:	eea0 6b04 	vfma.f64	d6, d0, d4
    f702:	ee20 5b0a 	vmul.f64	d5, d0, d10
    f706:	ee30 4b02 	vadd.f64	d4, d0, d2
    f70a:	ee20 8b05 	vmul.f64	d8, d0, d5
    f70e:	eea0 7b0b 	vfma.f64	d7, d0, d11
    f712:	eea8 6b03 	vfma.f64	d6, d8, d3
    f716:	ee32 2b44 	vsub.f64	d2, d2, d4
    f71a:	eea8 7b06 	vfma.f64	d7, d8, d6
    f71e:	ee32 2b00 	vadd.f64	d2, d2, d0
    f722:	eeb0 3b48 	vmov.f64	d3, d8
    f726:	ee39 2b02 	vadd.f64	d2, d9, d2
    f72a:	ee95 3b00 	vfnms.f64	d3, d5, d0
    f72e:	ee34 5b08 	vadd.f64	d5, d4, d8
    f732:	ee20 0b08 	vmul.f64	d0, d0, d8
    f736:	ee34 4b45 	vsub.f64	d4, d4, d5
    f73a:	ee32 6b03 	vadd.f64	d6, d2, d3
    f73e:	ee34 4b08 	vadd.f64	d4, d4, d8
    f742:	ee36 6b04 	vadd.f64	d6, d6, d4
    f746:	eea0 6b07 	vfma.f64	d6, d0, d7
    f74a:	ee35 4b06 	vadd.f64	d4, d5, d6
    f74e:	ee21 8b04 	vmul.f64	d8, d1, d4
    f752:	ee18 2a90 	vmov	r2, s17
    f756:	eeb0 7b48 	vmov.f64	d7, d8
    f75a:	f3c2 550a 	ubfx	r5, r2, #20, #11
    f75e:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    f762:	18eb      	adds	r3, r5, r3
    f764:	2b3e      	cmp	r3, #62	; 0x3e
    f766:	ee91 7b04 	vfnms.f64	d7, d1, d4
    f76a:	ee35 5b44 	vsub.f64	d5, d5, d4
    f76e:	ee35 5b06 	vadd.f64	d5, d5, d6
    f772:	eea1 7b05 	vfma.f64	d7, d1, d5
    f776:	f200 8093 	bhi.w	f8a0 <pow+0x250>
    f77a:	4bab      	ldr	r3, [pc, #684]	; (fa28 <pow+0x3d8>)
    f77c:	ed93 4b02 	vldr	d4, [r3, #8]
    f780:	ed93 5b00 	vldr	d5, [r3]
    f784:	eeb0 1b44 	vmov.f64	d1, d4
    f788:	ed93 2b04 	vldr	d2, [r3, #16]
    f78c:	eea8 1b05 	vfma.f64	d1, d8, d5
    f790:	ed93 6b06 	vldr	d6, [r3, #24]
    f794:	ee11 1a10 	vmov	r1, s2
    f798:	ee31 1b44 	vsub.f64	d1, d1, d4
    f79c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    f7a0:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    f7a4:	eea1 8b02 	vfma.f64	d8, d1, d2
    f7a8:	eea1 8b06 	vfma.f64	d8, d1, d6
    f7ac:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    f7b0:	ee37 7b08 	vadd.f64	d7, d7, d8
    f7b4:	ee27 2b07 	vmul.f64	d2, d7, d7
    f7b8:	1892      	adds	r2, r2, r2
    f7ba:	f102 040f 	add.w	r4, r2, #15
    f7be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f7c2:	eea7 6b04 	vfma.f64	d6, d7, d4
    f7c6:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    f7ca:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    f7ce:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    f7d2:	ed93 5b08 	vldr	d5, [r3, #32]
    f7d6:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    f7da:	6857      	ldr	r7, [r2, #4]
    f7dc:	eea7 5b03 	vfma.f64	d5, d7, d3
    f7e0:	1840      	adds	r0, r0, r1
    f7e2:	2400      	movs	r4, #0
    f7e4:	ee22 3b02 	vmul.f64	d3, d2, d2
    f7e8:	ee37 7b04 	vadd.f64	d7, d7, d4
    f7ec:	19a2      	adds	r2, r4, r6
    f7ee:	eea2 7b05 	vfma.f64	d7, d2, d5
    f7f2:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    f7f6:	eea3 7b06 	vfma.f64	d7, d3, d6
    f7fa:	2d00      	cmp	r5, #0
    f7fc:	d05f      	beq.n	f8be <pow+0x26e>
    f7fe:	ec43 2b10 	vmov	d0, r2, r3
    f802:	eea7 0b00 	vfma.f64	d0, d7, d0
    f806:	b009      	add	sp, #36	; 0x24
    f808:	ecbd 8b0a 	vpop	{d8-d12}
    f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f810:	18d8      	adds	r0, r3, r3
    f812:	eb4e 090e 	adc.w	r9, lr, lr
    f816:	1e46      	subs	r6, r0, #1
    f818:	4637      	mov	r7, r6
    f81a:	f06f 0801 	mvn.w	r8, #1
    f81e:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
    f822:	45b8      	cmp	r8, r7
    f824:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f828:	eb77 0606 	sbcs.w	r6, r7, r6
    f82c:	f0c0 8120 	bcc.w	fa70 <pow+0x420>
    f830:	1848      	adds	r0, r1, r1
    f832:	eb42 0902 	adc.w	r9, r2, r2
    f836:	1e46      	subs	r6, r0, #1
    f838:	4637      	mov	r7, r6
    f83a:	f169 0600 	sbc.w	r6, r9, #0
    f83e:	45b8      	cmp	r8, r7
    f840:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f844:	eb77 0606 	sbcs.w	r6, r7, r6
    f848:	f0c0 8139 	bcc.w	fabe <pow+0x46e>
    f84c:	2a00      	cmp	r2, #0
    f84e:	db6a      	blt.n	f926 <pow+0x2d6>
    f850:	2000      	movs	r0, #0
    f852:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f856:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    f85a:	2b7f      	cmp	r3, #127	; 0x7f
    f85c:	f240 77ff 	movw	r7, #2047	; 0x7ff
    f860:	d94f      	bls.n	f902 <pow+0x2b2>
    f862:	4b72      	ldr	r3, [pc, #456]	; (fa2c <pow+0x3dc>)
    f864:	2000      	movs	r0, #0
    f866:	429a      	cmp	r2, r3
    f868:	bf08      	it	eq
    f86a:	4281      	cmpeq	r1, r0
    f86c:	f000 80fd 	beq.w	fa6a <pow+0x41a>
    f870:	f240 35bd 	movw	r5, #957	; 0x3bd
    f874:	42ae      	cmp	r6, r5
    f876:	f240 8091 	bls.w	f99c <pow+0x34c>
    f87a:	2901      	cmp	r1, #1
    f87c:	eb72 0303 	sbcs.w	r3, r2, r3
    f880:	bf34      	ite	cc
    f882:	2301      	movcc	r3, #1
    f884:	2300      	movcs	r3, #0
    f886:	42bc      	cmp	r4, r7
    f888:	bf8c      	ite	hi
    f88a:	2400      	movhi	r4, #0
    f88c:	2401      	movls	r4, #1
    f88e:	42a3      	cmp	r3, r4
    f890:	d10e      	bne.n	f8b0 <pow+0x260>
    f892:	b009      	add	sp, #36	; 0x24
    f894:	ecbd 8b0a 	vpop	{d8-d12}
    f898:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f89c:	f000 ba30 	b.w	fd00 <__math_uflow>
    f8a0:	2b00      	cmp	r3, #0
    f8a2:	f2c0 80ce 	blt.w	fa42 <pow+0x3f2>
    f8a6:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    f8aa:	d975      	bls.n	f998 <pow+0x348>
    f8ac:	2a00      	cmp	r2, #0
    f8ae:	dbf0      	blt.n	f892 <pow+0x242>
    f8b0:	b009      	add	sp, #36	; 0x24
    f8b2:	ecbd 8b0a 	vpop	{d8-d12}
    f8b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8ba:	f000 ba29 	b.w	fd10 <__math_oflow>
    f8be:	42a1      	cmp	r1, r4
    f8c0:	f280 8113 	bge.w	faea <pow+0x49a>
    f8c4:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f8c8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    f8cc:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    f8d0:	4610      	mov	r0, r2
    f8d2:	ec41 0b15 	vmov	d5, r0, r1
    f8d6:	ee27 7b05 	vmul.f64	d7, d7, d5
    f8da:	ee35 6b07 	vadd.f64	d6, d5, d7
    f8de:	eeb0 4bc6 	vabs.f64	d4, d6
    f8e2:	eeb4 4bc3 	vcmpe.f64	d4, d3
    f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8ea:	d461      	bmi.n	f9b0 <pow+0x360>
    f8ec:	ed9f 0b48 	vldr	d0, [pc, #288]	; fa10 <pow+0x3c0>
    f8f0:	ee26 0b00 	vmul.f64	d0, d6, d0
    f8f4:	b009      	add	sp, #36	; 0x24
    f8f6:	ecbd 8b0a 	vpop	{d8-d12}
    f8fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8fe:	f000 ba37 	b.w	fd70 <__math_check_uflow>
    f902:	2d00      	cmp	r5, #0
    f904:	f47f aec7 	bne.w	f696 <pow+0x46>
    f908:	ed9f 7b43 	vldr	d7, [pc, #268]	; fa18 <pow+0x3c8>
    f90c:	ec4b ab16 	vmov	d6, sl, fp
    f910:	ee26 7b07 	vmul.f64	d7, d6, d7
    f914:	ec53 2b17 	vmov	r2, r3, d7
    f918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f91c:	ee17 1a10 	vmov	r1, s14
    f920:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    f924:	e6b7      	b.n	f696 <pow+0x46>
    f926:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f92a:	f240 30fe 	movw	r0, #1022	; 0x3fe
    f92e:	4286      	cmp	r6, r0
    f930:	dd7e      	ble.n	fa30 <pow+0x3e0>
    f932:	f240 4033 	movw	r0, #1075	; 0x433
    f936:	4286      	cmp	r6, r0
    f938:	f300 80fa 	bgt.w	fb30 <pow+0x4e0>
    f93c:	1b80      	subs	r0, r0, r6
    f93e:	f1a0 0520 	sub.w	r5, r0, #32
    f942:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f946:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f94a:	4087      	lsls	r7, r0
    f94c:	fa09 f905 	lsl.w	r9, r9, r5
    f950:	f1c0 0820 	rsb	r8, r0, #32
    f954:	9501      	str	r5, [sp, #4]
    f956:	ea47 0509 	orr.w	r5, r7, r9
    f95a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f95e:	fa27 f908 	lsr.w	r9, r7, r8
    f962:	ea45 0509 	orr.w	r5, r5, r9
    f966:	4087      	lsls	r7, r0
    f968:	ea23 0707 	bic.w	r7, r3, r7
    f96c:	ea2e 0505 	bic.w	r5, lr, r5
    f970:	433d      	orrs	r5, r7
    f972:	d15d      	bne.n	fa30 <pow+0x3e0>
    f974:	9d01      	ldr	r5, [sp, #4]
    f976:	40c3      	lsrs	r3, r0
    f978:	fa0e f808 	lsl.w	r8, lr, r8
    f97c:	ea43 0308 	orr.w	r3, r3, r8
    f980:	fa2e fe05 	lsr.w	lr, lr, r5
    f984:	ea43 030e 	orr.w	r3, r3, lr
    f988:	f003 0301 	and.w	r3, r3, #1
    f98c:	0498      	lsls	r0, r3, #18
    f98e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f992:	f3cc 050a 	ubfx	r5, ip, #0, #11
    f996:	e75e      	b.n	f856 <pow+0x206>
    f998:	2500      	movs	r5, #0
    f99a:	e6ee      	b.n	f77a <pow+0x12a>
    f99c:	4288      	cmp	r0, r1
    f99e:	4193      	sbcs	r3, r2
    f9a0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f9a4:	bf34      	ite	cc
    f9a6:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    f9aa:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    f9ae:	e72a      	b.n	f806 <pow+0x1b6>
    f9b0:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    f9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9b8:	ee35 5b46 	vsub.f64	d5, d5, d6
    f9bc:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    f9c0:	ee35 5b07 	vadd.f64	d5, d5, d7
    f9c4:	bf58      	it	pl
    f9c6:	eeb0 4b43 	vmovpl.f64	d4, d3
    f9ca:	ee36 3b04 	vadd.f64	d3, d6, d4
    f9ce:	ee34 7b43 	vsub.f64	d7, d4, d3
    f9d2:	ee37 7b06 	vadd.f64	d7, d7, d6
    f9d6:	ee37 7b05 	vadd.f64	d7, d7, d5
    f9da:	ee37 7b03 	vadd.f64	d7, d7, d3
    f9de:	ee37 6b44 	vsub.f64	d6, d7, d4
    f9e2:	eeb5 6b40 	vcmp.f64	d6, #0.0
    f9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f9ea:	d104      	bne.n	f9f6 <pow+0x3a6>
    f9ec:	462a      	mov	r2, r5
    f9ee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f9f2:	ec43 2b16 	vmov	d6, r2, r3
    f9f6:	ed9f 5b06 	vldr	d5, [pc, #24]	; fa10 <pow+0x3c0>
    f9fa:	ed8d 5b04 	vstr	d5, [sp, #16]
    f9fe:	ed9d 7b04 	vldr	d7, [sp, #16]
    fa02:	ee27 7b05 	vmul.f64	d7, d7, d5
    fa06:	ed8d 7b06 	vstr	d7, [sp, #24]
    fa0a:	e76f      	b.n	f8ec <pow+0x29c>
    fa0c:	f3af 8000 	nop.w
    fa10:	00000000 	.word	0x00000000
    fa14:	00100000 	.word	0x00100000
    fa18:	00000000 	.word	0x00000000
    fa1c:	43300000 	.word	0x43300000
    fa20:	c0196aab 	.word	0xc0196aab
    fa24:	20000c20 	.word	0x20000c20
    fa28:	200002c0 	.word	0x200002c0
    fa2c:	3ff00000 	.word	0x3ff00000
    fa30:	ec4b ab10 	vmov	d0, sl, fp
    fa34:	b009      	add	sp, #36	; 0x24
    fa36:	ecbd 8b0a 	vpop	{d8-d12}
    fa3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa3e:	f000 b987 	b.w	fd50 <__math_invalid>
    fa42:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fa46:	ee38 0b00 	vadd.f64	d0, d8, d0
    fa4a:	2800      	cmp	r0, #0
    fa4c:	f43f aedb 	beq.w	f806 <pow+0x1b6>
    fa50:	eeb1 0b40 	vneg.f64	d0, d0
    fa54:	e6d7      	b.n	f806 <pow+0x1b6>
    fa56:	1849      	adds	r1, r1, r1
    fa58:	4b59      	ldr	r3, [pc, #356]	; (fbc0 <pow+0x570>)
    fa5a:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    fa5e:	f04f 0000 	mov.w	r0, #0
    fa62:	4152      	adcs	r2, r2
    fa64:	4288      	cmp	r0, r1
    fa66:	4193      	sbcs	r3, r2
    fa68:	d35d      	bcc.n	fb26 <pow+0x4d6>
    fa6a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fa6e:	e6ca      	b.n	f806 <pow+0x1b6>
    fa70:	ea50 0409 	orrs.w	r4, r0, r9
    fa74:	d0ef      	beq.n	fa56 <pow+0x406>
    fa76:	4c53      	ldr	r4, [pc, #332]	; (fbc4 <pow+0x574>)
    fa78:	2500      	movs	r5, #0
    fa7a:	42a2      	cmp	r2, r4
    fa7c:	bf08      	it	eq
    fa7e:	42a9      	cmpeq	r1, r5
    fa80:	d047      	beq.n	fb12 <pow+0x4c2>
    fa82:	1849      	adds	r1, r1, r1
    fa84:	4b50      	ldr	r3, [pc, #320]	; (fbc8 <pow+0x578>)
    fa86:	4152      	adcs	r2, r2
    fa88:	428d      	cmp	r5, r1
    fa8a:	eb73 0402 	sbcs.w	r4, r3, r2
    fa8e:	d34a      	bcc.n	fb26 <pow+0x4d6>
    fa90:	4599      	cmp	r9, r3
    fa92:	bf08      	it	eq
    fa94:	42a8      	cmpeq	r0, r5
    fa96:	d146      	bne.n	fb26 <pow+0x4d6>
    fa98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    fa9c:	429a      	cmp	r2, r3
    fa9e:	bf08      	it	eq
    faa0:	42a9      	cmpeq	r1, r5
    faa2:	d0e2      	beq.n	fa6a <pow+0x41a>
    faa4:	429a      	cmp	r2, r3
    faa6:	ea6f 0e0e 	mvn.w	lr, lr
    faaa:	bf34      	ite	cc
    faac:	2200      	movcc	r2, #0
    faae:	2201      	movcs	r2, #1
    fab0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    fab4:	4572      	cmp	r2, lr
    fab6:	d077      	beq.n	fba8 <pow+0x558>
    fab8:	ed9f 0b3d 	vldr	d0, [pc, #244]	; fbb0 <pow+0x560>
    fabc:	e6a3      	b.n	f806 <pow+0x1b6>
    fabe:	ec4b ab17 	vmov	d7, sl, fp
    fac2:	2a00      	cmp	r2, #0
    fac4:	ee27 0b07 	vmul.f64	d0, d7, d7
    fac8:	db34      	blt.n	fb34 <pow+0x4e4>
    faca:	2200      	movs	r2, #0
    facc:	ea50 0909 	orrs.w	r9, r0, r9
    fad0:	d15d      	bne.n	fb8e <pow+0x53e>
    fad2:	f1be 0f00 	cmp.w	lr, #0
    fad6:	f6bf ae96 	bge.w	f806 <pow+0x1b6>
    fada:	4610      	mov	r0, r2
    fadc:	b009      	add	sp, #36	; 0x24
    fade:	ecbd 8b0a 	vpop	{d8-d12}
    fae2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fae6:	f000 b91b 	b.w	fd20 <__math_divzero>
    faea:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    faee:	ed9f 6b32 	vldr	d6, [pc, #200]	; fbb8 <pow+0x568>
    faf2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    faf6:	4610      	mov	r0, r2
    faf8:	ec41 0b10 	vmov	d0, r0, r1
    fafc:	eea7 0b00 	vfma.f64	d0, d7, d0
    fb00:	ee20 0b06 	vmul.f64	d0, d0, d6
    fb04:	b009      	add	sp, #36	; 0x24
    fb06:	ecbd 8b0a 	vpop	{d8-d12}
    fb0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb0e:	f000 b93b 	b.w	fd88 <__math_check_oflow>
    fb12:	18db      	adds	r3, r3, r3
    fb14:	4a2a      	ldr	r2, [pc, #168]	; (fbc0 <pow+0x570>)
    fb16:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    fb1a:	eb4e 0e0e 	adc.w	lr, lr, lr
    fb1e:	429d      	cmp	r5, r3
    fb20:	eb72 020e 	sbcs.w	r2, r2, lr
    fb24:	d2a1      	bcs.n	fa6a <pow+0x41a>
    fb26:	ec4b ab17 	vmov	d7, sl, fp
    fb2a:	ee37 0b01 	vadd.f64	d0, d7, d1
    fb2e:	e66a      	b.n	f806 <pow+0x1b6>
    fb30:	2000      	movs	r0, #0
    fb32:	e72c      	b.n	f98e <pow+0x33e>
    fb34:	f3c4 020a 	ubfx	r2, r4, #0, #11
    fb38:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    fb3c:	2934      	cmp	r1, #52	; 0x34
    fb3e:	d8c4      	bhi.n	faca <pow+0x47a>
    fb40:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    fb44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fb48:	f1a2 051d 	sub.w	r5, r2, #29
    fb4c:	3203      	adds	r2, #3
    fb4e:	fa01 f705 	lsl.w	r7, r1, r5
    fb52:	fa01 f402 	lsl.w	r4, r1, r2
    fb56:	f1c2 0620 	rsb	r6, r2, #32
    fb5a:	433c      	orrs	r4, r7
    fb5c:	fa21 f706 	lsr.w	r7, r1, r6
    fb60:	433c      	orrs	r4, r7
    fb62:	4091      	lsls	r1, r2
    fb64:	ea23 0101 	bic.w	r1, r3, r1
    fb68:	ea2e 0404 	bic.w	r4, lr, r4
    fb6c:	4321      	orrs	r1, r4
    fb6e:	d1ac      	bne.n	faca <pow+0x47a>
    fb70:	fa23 f202 	lsr.w	r2, r3, r2
    fb74:	fa0e f606 	lsl.w	r6, lr, r6
    fb78:	4332      	orrs	r2, r6
    fb7a:	fa2e f505 	lsr.w	r5, lr, r5
    fb7e:	432a      	orrs	r2, r5
    fb80:	f012 0201 	ands.w	r2, r2, #1
    fb84:	d0a2      	beq.n	facc <pow+0x47c>
    fb86:	eeb1 0b40 	vneg.f64	d0, d0
    fb8a:	2201      	movs	r2, #1
    fb8c:	e79e      	b.n	facc <pow+0x47c>
    fb8e:	f1be 0f00 	cmp.w	lr, #0
    fb92:	f6bf ae38 	bge.w	f806 <pow+0x1b6>
    fb96:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fb9a:	ee86 7b00 	vdiv.f64	d7, d6, d0
    fb9e:	ed8d 7b02 	vstr	d7, [sp, #8]
    fba2:	ed9d 0b02 	vldr	d0, [sp, #8]
    fba6:	e62e      	b.n	f806 <pow+0x1b6>
    fba8:	ee21 0b01 	vmul.f64	d0, d1, d1
    fbac:	e62b      	b.n	f806 <pow+0x1b6>
    fbae:	bf00      	nop
	...
    fbbc:	7f000000 	.word	0x7f000000
    fbc0:	fff00000 	.word	0xfff00000
    fbc4:	3ff00000 	.word	0x3ff00000
    fbc8:	ffe00000 	.word	0xffe00000

0000fbcc <asinf>:
    fbcc:	b508      	push	{r3, lr}
    fbce:	ed2d 8b02 	vpush	{d8}
    fbd2:	eeb0 8a40 	vmov.f32	s16, s0
    fbd6:	f000 f9e3 	bl	ffa0 <__ieee754_asinf>
    fbda:	eeb4 8a48 	vcmp.f32	s16, s16
    fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fbe2:	eef0 8a40 	vmov.f32	s17, s0
    fbe6:	d60a      	bvs.n	fbfe <asinf+0x32>
    fbe8:	eeb0 0a48 	vmov.f32	s0, s16
    fbec:	f000 f81c 	bl	fc28 <fabsf>
    fbf0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fbf4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    fbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fbfc:	dc04      	bgt.n	fc08 <asinf+0x3c>
    fbfe:	eeb0 0a68 	vmov.f32	s0, s17
    fc02:	ecbd 8b02 	vpop	{d8}
    fc06:	bd08      	pop	{r3, pc}
    fc08:	f001 fade 	bl	111c8 <__errno>
    fc0c:	ecbd 8b02 	vpop	{d8}
    fc10:	4603      	mov	r3, r0
    fc12:	2221      	movs	r2, #33	; 0x21
    fc14:	601a      	str	r2, [r3, #0]
    fc16:	4802      	ldr	r0, [pc, #8]	; (fc20 <asinf+0x54>)
    fc18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fc1c:	f000 b8c8 	b.w	fdb0 <nanf>
    fc20:	20001f98 	.word	0x20001f98

0000fc24 <atan2f>:
    fc24:	f000 bac2 	b.w	101ac <__ieee754_atan2f>

0000fc28 <fabsf>:
    fc28:	ee10 3a10 	vmov	r3, s0
    fc2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fc30:	ee00 3a10 	vmov	s0, r3
    fc34:	4770      	bx	lr
    fc36:	bf00      	nop

0000fc38 <__ieee754_sqrtf>:
    fc38:	eeb1 0ac0 	vsqrt.f32	s0, s0
    fc3c:	4770      	bx	lr
    fc3e:	bf00      	nop

0000fc40 <sin>:
    fc40:	eeb0 7b40 	vmov.f64	d7, d0
    fc44:	ee17 3a90 	vmov	r3, s15
    fc48:	4a1b      	ldr	r2, [pc, #108]	; (fcb8 <sin+0x78>)
    fc4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fc4e:	4293      	cmp	r3, r2
    fc50:	dd1c      	ble.n	fc8c <sin+0x4c>
    fc52:	4a1a      	ldr	r2, [pc, #104]	; (fcbc <sin+0x7c>)
    fc54:	4293      	cmp	r3, r2
    fc56:	dd02      	ble.n	fc5e <sin+0x1e>
    fc58:	ee30 0b40 	vsub.f64	d0, d0, d0
    fc5c:	4770      	bx	lr
    fc5e:	b500      	push	{lr}
    fc60:	b085      	sub	sp, #20
    fc62:	4668      	mov	r0, sp
    fc64:	f000 fc20 	bl	104a8 <__ieee754_rem_pio2>
    fc68:	f000 0003 	and.w	r0, r0, #3
    fc6c:	2801      	cmp	r0, #1
    fc6e:	ed9d 1b02 	vldr	d1, [sp, #8]
    fc72:	ed9d 0b00 	vldr	d0, [sp]
    fc76:	d00e      	beq.n	fc96 <sin+0x56>
    fc78:	2802      	cmp	r0, #2
    fc7a:	d013      	beq.n	fca4 <sin+0x64>
    fc7c:	b170      	cbz	r0, fc9c <sin+0x5c>
    fc7e:	f000 f89f 	bl	fdc0 <__kernel_cos>
    fc82:	eeb1 0b40 	vneg.f64	d0, d0
    fc86:	b005      	add	sp, #20
    fc88:	f85d fb04 	ldr.w	pc, [sp], #4
    fc8c:	ed9f 1b08 	vldr	d1, [pc, #32]	; fcb0 <sin+0x70>
    fc90:	2000      	movs	r0, #0
    fc92:	f000 b92d 	b.w	fef0 <__kernel_sin>
    fc96:	f000 f893 	bl	fdc0 <__kernel_cos>
    fc9a:	e7f4      	b.n	fc86 <sin+0x46>
    fc9c:	2001      	movs	r0, #1
    fc9e:	f000 f927 	bl	fef0 <__kernel_sin>
    fca2:	e7f0      	b.n	fc86 <sin+0x46>
    fca4:	2001      	movs	r0, #1
    fca6:	f000 f923 	bl	fef0 <__kernel_sin>
    fcaa:	eeb1 0b40 	vneg.f64	d0, d0
    fcae:	e7ea      	b.n	fc86 <sin+0x46>
	...
    fcb8:	3fe921fb 	.word	0x3fe921fb
    fcbc:	7fefffff 	.word	0x7fefffff

0000fcc0 <with_errno>:
    fcc0:	b510      	push	{r4, lr}
    fcc2:	b082      	sub	sp, #8
    fcc4:	ed8d 0b00 	vstr	d0, [sp]
    fcc8:	4604      	mov	r4, r0
    fcca:	f001 fa7d 	bl	111c8 <__errno>
    fcce:	ed9d 0b00 	vldr	d0, [sp]
    fcd2:	6004      	str	r4, [r0, #0]
    fcd4:	b002      	add	sp, #8
    fcd6:	bd10      	pop	{r4, pc}

0000fcd8 <xflow>:
    fcd8:	b082      	sub	sp, #8
    fcda:	b158      	cbz	r0, fcf4 <xflow+0x1c>
    fcdc:	eeb1 7b40 	vneg.f64	d7, d0
    fce0:	ed8d 7b00 	vstr	d7, [sp]
    fce4:	ed9d 7b00 	vldr	d7, [sp]
    fce8:	2022      	movs	r0, #34	; 0x22
    fcea:	ee20 0b07 	vmul.f64	d0, d0, d7
    fcee:	b002      	add	sp, #8
    fcf0:	f7ff bfe6 	b.w	fcc0 <with_errno>
    fcf4:	eeb0 7b40 	vmov.f64	d7, d0
    fcf8:	e7f2      	b.n	fce0 <xflow+0x8>
    fcfa:	bf00      	nop
    fcfc:	0000      	movs	r0, r0
	...

0000fd00 <__math_uflow>:
    fd00:	ed9f 0b01 	vldr	d0, [pc, #4]	; fd08 <__math_uflow+0x8>
    fd04:	f7ff bfe8 	b.w	fcd8 <xflow>
    fd08:	00000000 	.word	0x00000000
    fd0c:	10000000 	.word	0x10000000

0000fd10 <__math_oflow>:
    fd10:	ed9f 0b01 	vldr	d0, [pc, #4]	; fd18 <__math_oflow+0x8>
    fd14:	f7ff bfe0 	b.w	fcd8 <xflow>
    fd18:	00000000 	.word	0x00000000
    fd1c:	70000000 	.word	0x70000000

0000fd20 <__math_divzero>:
    fd20:	b082      	sub	sp, #8
    fd22:	2800      	cmp	r0, #0
    fd24:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fd28:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    fd2c:	fe06 7b07 	vseleq.f64	d7, d6, d7
    fd30:	ed8d 7b00 	vstr	d7, [sp]
    fd34:	ed9d 0b00 	vldr	d0, [sp]
    fd38:	ed9f 7b03 	vldr	d7, [pc, #12]	; fd48 <__math_divzero+0x28>
    fd3c:	2022      	movs	r0, #34	; 0x22
    fd3e:	ee80 0b07 	vdiv.f64	d0, d0, d7
    fd42:	b002      	add	sp, #8
    fd44:	f7ff bfbc 	b.w	fcc0 <with_errno>
	...

0000fd50 <__math_invalid>:
    fd50:	eeb4 0b40 	vcmp.f64	d0, d0
    fd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd58:	ee30 7b40 	vsub.f64	d7, d0, d0
    fd5c:	ee87 6b07 	vdiv.f64	d6, d7, d7
    fd60:	eeb0 0b46 	vmov.f64	d0, d6
    fd64:	d602      	bvs.n	fd6c <__math_invalid+0x1c>
    fd66:	2021      	movs	r0, #33	; 0x21
    fd68:	f7ff bfaa 	b.w	fcc0 <with_errno>
    fd6c:	4770      	bx	lr
    fd6e:	bf00      	nop

0000fd70 <__math_check_uflow>:
    fd70:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd78:	d000      	beq.n	fd7c <__math_check_uflow+0xc>
    fd7a:	4770      	bx	lr
    fd7c:	2022      	movs	r0, #34	; 0x22
    fd7e:	f7ff bf9f 	b.w	fcc0 <with_errno>
    fd82:	bf00      	nop
    fd84:	0000      	movs	r0, r0
	...

0000fd88 <__math_check_oflow>:
    fd88:	ed9f 6b07 	vldr	d6, [pc, #28]	; fda8 <__math_check_oflow+0x20>
    fd8c:	eeb0 7bc0 	vabs.f64	d7, d0
    fd90:	eeb4 7b46 	vcmp.f64	d7, d6
    fd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fd98:	dc00      	bgt.n	fd9c <__math_check_oflow+0x14>
    fd9a:	4770      	bx	lr
    fd9c:	2022      	movs	r0, #34	; 0x22
    fd9e:	f7ff bf8f 	b.w	fcc0 <with_errno>
    fda2:	bf00      	nop
    fda4:	f3af 8000 	nop.w
    fda8:	ffffffff 	.word	0xffffffff
    fdac:	7fefffff 	.word	0x7fefffff

0000fdb0 <nanf>:
    fdb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; fdb8 <nanf+0x8>
    fdb4:	4770      	bx	lr
    fdb6:	bf00      	nop
    fdb8:	7fc00000 	.word	0x7fc00000
    fdbc:	00000000 	.word	0x00000000

0000fdc0 <__kernel_cos>:
    fdc0:	ee10 3a90 	vmov	r3, s1
    fdc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fdc8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    fdcc:	ed2d 8b02 	vpush	{d8}
    fdd0:	da2e      	bge.n	fe30 <__kernel_cos+0x70>
    fdd2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    fdd6:	ee17 3a90 	vmov	r3, s15
    fdda:	2b00      	cmp	r3, #0
    fddc:	d065      	beq.n	feaa <__kernel_cos+0xea>
    fdde:	ee20 4b00 	vmul.f64	d4, d0, d0
    fde2:	ed9f 8b35 	vldr	d8, [pc, #212]	; feb8 <__kernel_cos+0xf8>
    fde6:	ed9f 2b36 	vldr	d2, [pc, #216]	; fec0 <__kernel_cos+0x100>
    fdea:	ed9f 3b37 	vldr	d3, [pc, #220]	; fec8 <__kernel_cos+0x108>
    fdee:	eea4 2b08 	vfma.f64	d2, d4, d8
    fdf2:	ed9f 5b37 	vldr	d5, [pc, #220]	; fed0 <__kernel_cos+0x110>
    fdf6:	eea4 3b02 	vfma.f64	d3, d4, d2
    fdfa:	ed9f 6b37 	vldr	d6, [pc, #220]	; fed8 <__kernel_cos+0x118>
    fdfe:	eea4 5b03 	vfma.f64	d5, d4, d3
    fe02:	ed9f 7b37 	vldr	d7, [pc, #220]	; fee0 <__kernel_cos+0x120>
    fe06:	eea4 6b05 	vfma.f64	d6, d4, d5
    fe0a:	eea4 7b06 	vfma.f64	d7, d4, d6
    fe0e:	ee24 7b07 	vmul.f64	d7, d4, d7
    fe12:	ee21 1b40 	vnmul.f64	d1, d1, d0
    fe16:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    fe1a:	eea4 1b07 	vfma.f64	d1, d4, d7
    fe1e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fe22:	ee94 1b06 	vfnms.f64	d1, d4, d6
    fe26:	ecbd 8b02 	vpop	{d8}
    fe2a:	ee30 0b41 	vsub.f64	d0, d0, d1
    fe2e:	4770      	bx	lr
    fe30:	ed9f 8b21 	vldr	d8, [pc, #132]	; feb8 <__kernel_cos+0xf8>
    fe34:	ee20 4b00 	vmul.f64	d4, d0, d0
    fe38:	ed9f 2b21 	vldr	d2, [pc, #132]	; fec0 <__kernel_cos+0x100>
    fe3c:	ed9f 3b22 	vldr	d3, [pc, #136]	; fec8 <__kernel_cos+0x108>
    fe40:	eea4 2b08 	vfma.f64	d2, d4, d8
    fe44:	ed9f 5b22 	vldr	d5, [pc, #136]	; fed0 <__kernel_cos+0x110>
    fe48:	eea2 3b04 	vfma.f64	d3, d2, d4
    fe4c:	ed9f 6b22 	vldr	d6, [pc, #136]	; fed8 <__kernel_cos+0x118>
    fe50:	eea3 5b04 	vfma.f64	d5, d3, d4
    fe54:	ed9f 7b22 	vldr	d7, [pc, #136]	; fee0 <__kernel_cos+0x120>
    fe58:	eea5 6b04 	vfma.f64	d6, d5, d4
    fe5c:	4a22      	ldr	r2, [pc, #136]	; (fee8 <__kernel_cos+0x128>)
    fe5e:	eea6 7b04 	vfma.f64	d7, d6, d4
    fe62:	4293      	cmp	r3, r2
    fe64:	ee27 7b04 	vmul.f64	d7, d7, d4
    fe68:	ddd3      	ble.n	fe12 <__kernel_cos+0x52>
    fe6a:	4a20      	ldr	r2, [pc, #128]	; (feec <__kernel_cos+0x12c>)
    fe6c:	4293      	cmp	r3, r2
    fe6e:	dc17      	bgt.n	fea0 <__kernel_cos+0xe0>
    fe70:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fe74:	2000      	movs	r0, #0
    fe76:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
    fe7a:	ec41 0b15 	vmov	d5, r0, r1
    fe7e:	ee36 6b45 	vsub.f64	d6, d6, d5
    fe82:	ee21 1b40 	vnmul.f64	d1, d1, d0
    fe86:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fe8a:	eea4 1b07 	vfma.f64	d1, d4, d7
    fe8e:	ee94 5b03 	vfnms.f64	d5, d4, d3
    fe92:	ecbd 8b02 	vpop	{d8}
    fe96:	ee35 0b41 	vsub.f64	d0, d5, d1
    fe9a:	ee36 0b40 	vsub.f64	d0, d6, d0
    fe9e:	4770      	bx	lr
    fea0:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
    fea4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    fea8:	e7eb      	b.n	fe82 <__kernel_cos+0xc2>
    feaa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    feae:	ecbd 8b02 	vpop	{d8}
    feb2:	4770      	bx	lr
    feb4:	f3af 8000 	nop.w
    feb8:	be8838d4 	.word	0xbe8838d4
    febc:	bda8fae9 	.word	0xbda8fae9
    fec0:	bdb4b1c4 	.word	0xbdb4b1c4
    fec4:	3e21ee9e 	.word	0x3e21ee9e
    fec8:	809c52ad 	.word	0x809c52ad
    fecc:	be927e4f 	.word	0xbe927e4f
    fed0:	19cb1590 	.word	0x19cb1590
    fed4:	3efa01a0 	.word	0x3efa01a0
    fed8:	16c15177 	.word	0x16c15177
    fedc:	bf56c16c 	.word	0xbf56c16c
    fee0:	5555554c 	.word	0x5555554c
    fee4:	3fa55555 	.word	0x3fa55555
    fee8:	3fd33332 	.word	0x3fd33332
    feec:	3fe90000 	.word	0x3fe90000

0000fef0 <__kernel_sin>:
    fef0:	ee10 3a90 	vmov	r3, s1
    fef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fef8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    fefc:	da04      	bge.n	ff08 <__kernel_sin+0x18>
    fefe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    ff02:	ee17 3a90 	vmov	r3, s15
    ff06:	b35b      	cbz	r3, ff60 <__kernel_sin+0x70>
    ff08:	ee20 7b00 	vmul.f64	d7, d0, d0
    ff0c:	ed9f 2b16 	vldr	d2, [pc, #88]	; ff68 <__kernel_sin+0x78>
    ff10:	ed9f 3b17 	vldr	d3, [pc, #92]	; ff70 <__kernel_sin+0x80>
    ff14:	ed9f 4b18 	vldr	d4, [pc, #96]	; ff78 <__kernel_sin+0x88>
    ff18:	eea7 3b02 	vfma.f64	d3, d7, d2
    ff1c:	ed9f 5b18 	vldr	d5, [pc, #96]	; ff80 <__kernel_sin+0x90>
    ff20:	eea3 4b07 	vfma.f64	d4, d3, d7
    ff24:	ed9f 6b18 	vldr	d6, [pc, #96]	; ff88 <__kernel_sin+0x98>
    ff28:	eea4 5b07 	vfma.f64	d5, d4, d7
    ff2c:	eea5 6b07 	vfma.f64	d6, d5, d7
    ff30:	ee20 5b07 	vmul.f64	d5, d0, d7
    ff34:	b930      	cbnz	r0, ff44 <__kernel_sin+0x54>
    ff36:	ed9f 4b16 	vldr	d4, [pc, #88]	; ff90 <__kernel_sin+0xa0>
    ff3a:	eea7 4b06 	vfma.f64	d4, d7, d6
    ff3e:	eea4 0b05 	vfma.f64	d0, d4, d5
    ff42:	4770      	bx	lr
    ff44:	ed9f 4b14 	vldr	d4, [pc, #80]	; ff98 <__kernel_sin+0xa8>
    ff48:	ee26 6b45 	vnmul.f64	d6, d6, d5
    ff4c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    ff50:	eea1 6b03 	vfma.f64	d6, d1, d3
    ff54:	ee96 1b07 	vfnms.f64	d1, d6, d7
    ff58:	eea5 1b04 	vfma.f64	d1, d5, d4
    ff5c:	ee30 0b41 	vsub.f64	d0, d0, d1
    ff60:	4770      	bx	lr
    ff62:	bf00      	nop
    ff64:	f3af 8000 	nop.w
    ff68:	5acfd57c 	.word	0x5acfd57c
    ff6c:	3de5d93a 	.word	0x3de5d93a
    ff70:	8a2b9ceb 	.word	0x8a2b9ceb
    ff74:	be5ae5e6 	.word	0xbe5ae5e6
    ff78:	57b1fe7d 	.word	0x57b1fe7d
    ff7c:	3ec71de3 	.word	0x3ec71de3
    ff80:	19c161d5 	.word	0x19c161d5
    ff84:	bf2a01a0 	.word	0xbf2a01a0
    ff88:	1110f8a6 	.word	0x1110f8a6
    ff8c:	3f811111 	.word	0x3f811111
    ff90:	55555549 	.word	0x55555549
    ff94:	bfc55555 	.word	0xbfc55555
    ff98:	55555549 	.word	0x55555549
    ff9c:	3fc55555 	.word	0x3fc55555

0000ffa0 <__ieee754_asinf>:
    ffa0:	b538      	push	{r3, r4, r5, lr}
    ffa2:	ee10 5a10 	vmov	r5, s0
    ffa6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    ffaa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
    ffae:	ed2d 8b04 	vpush	{d8-d9}
    ffb2:	f000 8085 	beq.w	100c0 <__ieee754_asinf+0x120>
    ffb6:	dc7a      	bgt.n	100ae <__ieee754_asinf+0x10e>
    ffb8:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    ffbc:	da0f      	bge.n	ffde <__ieee754_asinf+0x3e>
    ffbe:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
    ffc2:	f280 809c 	bge.w	100fe <__ieee754_asinf+0x15e>
    ffc6:	eddf 7a69 	vldr	s15, [pc, #420]	; 1016c <__ieee754_asinf+0x1cc>
    ffca:	ee70 7a27 	vadd.f32	s15, s0, s15
    ffce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    ffd2:	eef4 7ac7 	vcmpe.f32	s15, s14
    ffd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ffda:	f300 808d 	bgt.w	100f8 <__ieee754_asinf+0x158>
    ffde:	f7ff fe23 	bl	fc28 <fabsf>
    ffe2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    ffe6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    ffea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    ffee:	ee20 8a07 	vmul.f32	s16, s0, s14
    fff2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 10170 <__ieee754_asinf+0x1d0>
    fff6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 10174 <__ieee754_asinf+0x1d4>
    fffa:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 10178 <__ieee754_asinf+0x1d8>
    fffe:	ed9f 5a5f 	vldr	s10, [pc, #380]	; 1017c <__ieee754_asinf+0x1dc>
   10002:	eddf 5a5f 	vldr	s11, [pc, #380]	; 10180 <__ieee754_asinf+0x1e0>
   10006:	eddf 8a5f 	vldr	s17, [pc, #380]	; 10184 <__ieee754_asinf+0x1e4>
   1000a:	eee8 6a07 	vfma.f32	s13, s16, s14
   1000e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 10188 <__ieee754_asinf+0x1e8>
   10012:	eea8 7a06 	vfma.f32	s14, s16, s12
   10016:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 1018c <__ieee754_asinf+0x1ec>
   1001a:	eea6 5a88 	vfma.f32	s10, s13, s16
   1001e:	eea7 6a08 	vfma.f32	s12, s14, s16
   10022:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 10190 <__ieee754_asinf+0x1f0>
   10026:	eddf 6a5b 	vldr	s13, [pc, #364]	; 10194 <__ieee754_asinf+0x1f4>
   1002a:	eee5 5a08 	vfma.f32	s11, s10, s16
   1002e:	eea6 7a08 	vfma.f32	s14, s12, s16
   10032:	eee5 6a88 	vfma.f32	s13, s11, s16
   10036:	eee7 7a08 	vfma.f32	s15, s14, s16
   1003a:	eee6 8a88 	vfma.f32	s17, s13, s16
   1003e:	eeb0 0a48 	vmov.f32	s0, s16
   10042:	eeb0 9a67 	vmov.f32	s18, s15
   10046:	f7ff fdf7 	bl	fc38 <__ieee754_sqrtf>
   1004a:	4b53      	ldr	r3, [pc, #332]	; (10198 <__ieee754_asinf+0x1f8>)
   1004c:	429c      	cmp	r4, r3
   1004e:	ee68 8a88 	vmul.f32	s17, s17, s16
   10052:	dc42      	bgt.n	100da <__ieee754_asinf+0x13a>
   10054:	ee10 3a10 	vmov	r3, s0
   10058:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   1005c:	f023 030f 	bic.w	r3, r3, #15
   10060:	ee06 3a90 	vmov	s13, r3
   10064:	eea6 8ae6 	vfms.f32	s16, s13, s13
   10068:	ee30 7a26 	vadd.f32	s14, s0, s13
   1006c:	ee88 5a89 	vdiv.f32	s10, s17, s18
   10070:	eec8 4a07 	vdiv.f32	s9, s16, s14
   10074:	eddf 7a49 	vldr	s15, [pc, #292]	; 1019c <__ieee754_asinf+0x1fc>
   10078:	ed9f 7a49 	vldr	s14, [pc, #292]	; 101a0 <__ieee754_asinf+0x200>
   1007c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   10080:	eee4 7ac6 	vfms.f32	s15, s9, s12
   10084:	ee30 0a00 	vadd.f32	s0, s0, s0
   10088:	eef0 5a47 	vmov.f32	s11, s14
   1008c:	eee6 5ac6 	vfms.f32	s11, s13, s12
   10090:	eed0 7a05 	vfnms.f32	s15, s0, s10
   10094:	ee77 7ae5 	vsub.f32	s15, s15, s11
   10098:	ee37 7a67 	vsub.f32	s14, s14, s15
   1009c:	2d00      	cmp	r5, #0
   1009e:	dc0a      	bgt.n	100b6 <__ieee754_asinf+0x116>
   100a0:	ecbd 8b04 	vpop	{d8-d9}
   100a4:	eeb1 7a47 	vneg.f32	s14, s14
   100a8:	eeb0 0a47 	vmov.f32	s0, s14
   100ac:	bd38      	pop	{r3, r4, r5, pc}
   100ae:	ee70 7a40 	vsub.f32	s15, s0, s0
   100b2:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   100b6:	ecbd 8b04 	vpop	{d8-d9}
   100ba:	eeb0 0a47 	vmov.f32	s0, s14
   100be:	bd38      	pop	{r3, r4, r5, pc}
   100c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 1019c <__ieee754_asinf+0x1fc>
   100c4:	eddf 7a37 	vldr	s15, [pc, #220]	; 101a4 <__ieee754_asinf+0x204>
   100c8:	ee20 7a07 	vmul.f32	s14, s0, s14
   100cc:	ecbd 8b04 	vpop	{d8-d9}
   100d0:	eea0 7a27 	vfma.f32	s14, s0, s15
   100d4:	eeb0 0a47 	vmov.f32	s0, s14
   100d8:	bd38      	pop	{r3, r4, r5, pc}
   100da:	ee88 6a89 	vdiv.f32	s12, s17, s18
   100de:	eddf 7a32 	vldr	s15, [pc, #200]	; 101a8 <__ieee754_asinf+0x208>
   100e2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 101a4 <__ieee754_asinf+0x204>
   100e6:	eea0 0a06 	vfma.f32	s0, s0, s12
   100ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
   100ee:	eee0 7a26 	vfma.f32	s15, s0, s13
   100f2:	ee37 7a67 	vsub.f32	s14, s14, s15
   100f6:	e7d1      	b.n	1009c <__ieee754_asinf+0xfc>
   100f8:	eeb0 7a40 	vmov.f32	s14, s0
   100fc:	e7db      	b.n	100b6 <__ieee754_asinf+0x116>
   100fe:	ee60 7a00 	vmul.f32	s15, s0, s0
   10102:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 10174 <__ieee754_asinf+0x1d4>
   10106:	eddf 6a1a 	vldr	s13, [pc, #104]	; 10170 <__ieee754_asinf+0x1d0>
   1010a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 1017c <__ieee754_asinf+0x1dc>
   1010e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 10178 <__ieee754_asinf+0x1d8>
   10112:	ed9f 5a1b 	vldr	s10, [pc, #108]	; 10180 <__ieee754_asinf+0x1e0>
   10116:	eee7 6a87 	vfma.f32	s13, s15, s14
   1011a:	ecbd 8b04 	vpop	{d8-d9}
   1011e:	eea6 6aa7 	vfma.f32	s12, s13, s15
   10122:	ed9f 7a19 	vldr	s14, [pc, #100]	; 10188 <__ieee754_asinf+0x1e8>
   10126:	eddf 6a19 	vldr	s13, [pc, #100]	; 1018c <__ieee754_asinf+0x1ec>
   1012a:	eea7 7aa5 	vfma.f32	s14, s15, s11
   1012e:	eea6 5a27 	vfma.f32	s10, s12, s15
   10132:	eee7 6a27 	vfma.f32	s13, s14, s15
   10136:	eddf 5a17 	vldr	s11, [pc, #92]	; 10194 <__ieee754_asinf+0x1f4>
   1013a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 10190 <__ieee754_asinf+0x1f0>
   1013e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 10184 <__ieee754_asinf+0x1e4>
   10142:	eee5 5a27 	vfma.f32	s11, s10, s15
   10146:	eea6 6aa7 	vfma.f32	s12, s13, s15
   1014a:	eea5 7aa7 	vfma.f32	s14, s11, s15
   1014e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   10152:	eee6 6a27 	vfma.f32	s13, s12, s15
   10156:	ee67 7a27 	vmul.f32	s15, s14, s15
   1015a:	eeb0 7a40 	vmov.f32	s14, s0
   1015e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
   10162:	eea0 7a06 	vfma.f32	s14, s0, s12
   10166:	eeb0 0a47 	vmov.f32	s0, s14
   1016a:	bd38      	pop	{r3, r4, r5, pc}
   1016c:	7149f2ca 	.word	0x7149f2ca
   10170:	3a4f7f04 	.word	0x3a4f7f04
   10174:	3811ef08 	.word	0x3811ef08
   10178:	3d9dc62e 	.word	0x3d9dc62e
   1017c:	bd241146 	.word	0xbd241146
   10180:	3e4e0aa8 	.word	0x3e4e0aa8
   10184:	3e2aaaab 	.word	0x3e2aaaab
   10188:	bf303361 	.word	0xbf303361
   1018c:	4001572d 	.word	0x4001572d
   10190:	c019d139 	.word	0xc019d139
   10194:	bea6b090 	.word	0xbea6b090
   10198:	3f799999 	.word	0x3f799999
   1019c:	b33bbd2e 	.word	0xb33bbd2e
   101a0:	3f490fdb 	.word	0x3f490fdb
   101a4:	3fc90fdb 	.word	0x3fc90fdb
   101a8:	333bbd2e 	.word	0x333bbd2e

000101ac <__ieee754_atan2f>:
   101ac:	b510      	push	{r4, lr}
   101ae:	b082      	sub	sp, #8
   101b0:	edcd 0a01 	vstr	s1, [sp, #4]
   101b4:	9b01      	ldr	r3, [sp, #4]
   101b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   101ba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   101be:	eef0 7a40 	vmov.f32	s15, s0
   101c2:	dc30      	bgt.n	10226 <__ieee754_atan2f+0x7a>
   101c4:	ee10 0a10 	vmov	r0, s0
   101c8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
   101cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   101d0:	dc29      	bgt.n	10226 <__ieee754_atan2f+0x7a>
   101d2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   101d6:	d040      	beq.n	1025a <__ieee754_atan2f+0xae>
   101d8:	179c      	asrs	r4, r3, #30
   101da:	f004 0402 	and.w	r4, r4, #2
   101de:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
   101e2:	b331      	cbz	r1, 10232 <__ieee754_atan2f+0x86>
   101e4:	b372      	cbz	r2, 10244 <__ieee754_atan2f+0x98>
   101e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
   101ea:	d03e      	beq.n	1026a <__ieee754_atan2f+0xbe>
   101ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   101f0:	d028      	beq.n	10244 <__ieee754_atan2f+0x98>
   101f2:	1a89      	subs	r1, r1, r2
   101f4:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
   101f8:	ea4f 52e1 	mov.w	r2, r1, asr #23
   101fc:	da32      	bge.n	10264 <__ieee754_atan2f+0xb8>
   101fe:	2b00      	cmp	r3, #0
   10200:	da40      	bge.n	10284 <__ieee754_atan2f+0xd8>
   10202:	323c      	adds	r2, #60	; 0x3c
   10204:	da3e      	bge.n	10284 <__ieee754_atan2f+0xd8>
   10206:	ed9f 0a33 	vldr	s0, [pc, #204]	; 102d4 <__ieee754_atan2f+0x128>
   1020a:	2c01      	cmp	r4, #1
   1020c:	d04c      	beq.n	102a8 <__ieee754_atan2f+0xfc>
   1020e:	2c02      	cmp	r4, #2
   10210:	d041      	beq.n	10296 <__ieee754_atan2f+0xea>
   10212:	b164      	cbz	r4, 1022e <__ieee754_atan2f+0x82>
   10214:	ed9f 7a30 	vldr	s14, [pc, #192]	; 102d8 <__ieee754_atan2f+0x12c>
   10218:	eddf 7a30 	vldr	s15, [pc, #192]	; 102dc <__ieee754_atan2f+0x130>
   1021c:	ee30 0a07 	vadd.f32	s0, s0, s14
   10220:	ee30 0a67 	vsub.f32	s0, s0, s15
   10224:	e003      	b.n	1022e <__ieee754_atan2f+0x82>
   10226:	ed9d 7a01 	vldr	s14, [sp, #4]
   1022a:	ee37 0a27 	vadd.f32	s0, s14, s15
   1022e:	b002      	add	sp, #8
   10230:	bd10      	pop	{r4, pc}
   10232:	2c02      	cmp	r4, #2
   10234:	d00e      	beq.n	10254 <__ieee754_atan2f+0xa8>
   10236:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 102e0 <__ieee754_atan2f+0x134>
   1023a:	2c03      	cmp	r4, #3
   1023c:	fe07 0a00 	vseleq.f32	s0, s14, s0
   10240:	b002      	add	sp, #8
   10242:	bd10      	pop	{r4, pc}
   10244:	ed9f 0a27 	vldr	s0, [pc, #156]	; 102e4 <__ieee754_atan2f+0x138>
   10248:	eddf 7a27 	vldr	s15, [pc, #156]	; 102e8 <__ieee754_atan2f+0x13c>
   1024c:	2800      	cmp	r0, #0
   1024e:	fe20 0a27 	vselge.f32	s0, s0, s15
   10252:	e7ec      	b.n	1022e <__ieee754_atan2f+0x82>
   10254:	ed9f 0a21 	vldr	s0, [pc, #132]	; 102dc <__ieee754_atan2f+0x130>
   10258:	e7e9      	b.n	1022e <__ieee754_atan2f+0x82>
   1025a:	b002      	add	sp, #8
   1025c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10260:	f000 b84a 	b.w	102f8 <atanf>
   10264:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 102e4 <__ieee754_atan2f+0x138>
   10268:	e7cf      	b.n	1020a <__ieee754_atan2f+0x5e>
   1026a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
   1026e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   10272:	d020      	beq.n	102b6 <__ieee754_atan2f+0x10a>
   10274:	2c02      	cmp	r4, #2
   10276:	d826      	bhi.n	102c6 <__ieee754_atan2f+0x11a>
   10278:	4b1c      	ldr	r3, [pc, #112]	; (102ec <__ieee754_atan2f+0x140>)
   1027a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1027e:	ed93 0a00 	vldr	s0, [r3]
   10282:	e7d4      	b.n	1022e <__ieee754_atan2f+0x82>
   10284:	ed9d 7a01 	vldr	s14, [sp, #4]
   10288:	ee87 0a87 	vdiv.f32	s0, s15, s14
   1028c:	f7ff fccc 	bl	fc28 <fabsf>
   10290:	f000 f832 	bl	102f8 <atanf>
   10294:	e7b9      	b.n	1020a <__ieee754_atan2f+0x5e>
   10296:	ed9f 7a10 	vldr	s14, [pc, #64]	; 102d8 <__ieee754_atan2f+0x12c>
   1029a:	eddf 7a10 	vldr	s15, [pc, #64]	; 102dc <__ieee754_atan2f+0x130>
   1029e:	ee30 0a07 	vadd.f32	s0, s0, s14
   102a2:	ee37 0ac0 	vsub.f32	s0, s15, s0
   102a6:	e7c2      	b.n	1022e <__ieee754_atan2f+0x82>
   102a8:	ee10 3a10 	vmov	r3, s0
   102ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   102b0:	ee00 3a10 	vmov	s0, r3
   102b4:	e7bb      	b.n	1022e <__ieee754_atan2f+0x82>
   102b6:	2c02      	cmp	r4, #2
   102b8:	d808      	bhi.n	102cc <__ieee754_atan2f+0x120>
   102ba:	4b0d      	ldr	r3, [pc, #52]	; (102f0 <__ieee754_atan2f+0x144>)
   102bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   102c0:	ed93 0a00 	vldr	s0, [r3]
   102c4:	e7b3      	b.n	1022e <__ieee754_atan2f+0x82>
   102c6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 102d4 <__ieee754_atan2f+0x128>
   102ca:	e7b0      	b.n	1022e <__ieee754_atan2f+0x82>
   102cc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 102f4 <__ieee754_atan2f+0x148>
   102d0:	e7ad      	b.n	1022e <__ieee754_atan2f+0x82>
   102d2:	bf00      	nop
   102d4:	00000000 	.word	0x00000000
   102d8:	33bbbd2e 	.word	0x33bbbd2e
   102dc:	40490fdb 	.word	0x40490fdb
   102e0:	c0490fdb 	.word	0xc0490fdb
   102e4:	3fc90fdb 	.word	0x3fc90fdb
   102e8:	bfc90fdb 	.word	0xbfc90fdb
   102ec:	20001c74 	.word	0x20001c74
   102f0:	20001c68 	.word	0x20001c68
   102f4:	3f490fdb 	.word	0x3f490fdb

000102f8 <atanf>:
   102f8:	b538      	push	{r3, r4, r5, lr}
   102fa:	ee10 5a10 	vmov	r5, s0
   102fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   10302:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   10306:	eef0 7a40 	vmov.f32	s15, s0
   1030a:	db0a      	blt.n	10322 <atanf+0x2a>
   1030c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   10310:	dc58      	bgt.n	103c4 <atanf+0xcc>
   10312:	eddf 7a51 	vldr	s15, [pc, #324]	; 10458 <atanf+0x160>
   10316:	ed9f 7a51 	vldr	s14, [pc, #324]	; 1045c <atanf+0x164>
   1031a:	2d00      	cmp	r5, #0
   1031c:	fe37 0a87 	vselgt.f32	s0, s15, s14
   10320:	bd38      	pop	{r3, r4, r5, pc}
   10322:	4b4f      	ldr	r3, [pc, #316]	; (10460 <atanf+0x168>)
   10324:	429c      	cmp	r4, r3
   10326:	dc5c      	bgt.n	103e2 <atanf+0xea>
   10328:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   1032c:	db4d      	blt.n	103ca <atanf+0xd2>
   1032e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10332:	ee27 6aa7 	vmul.f32	s12, s15, s15
   10336:	eddf 6a4b 	vldr	s13, [pc, #300]	; 10464 <atanf+0x16c>
   1033a:	eddf 5a4b 	vldr	s11, [pc, #300]	; 10468 <atanf+0x170>
   1033e:	eddf 4a4b 	vldr	s9, [pc, #300]	; 1046c <atanf+0x174>
   10342:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 10470 <atanf+0x178>
   10346:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 10474 <atanf+0x17c>
   1034a:	ee26 7a06 	vmul.f32	s14, s12, s12
   1034e:	1c5a      	adds	r2, r3, #1
   10350:	eee7 5a26 	vfma.f32	s11, s14, s13
   10354:	eddf 6a48 	vldr	s13, [pc, #288]	; 10478 <atanf+0x180>
   10358:	eea5 5a87 	vfma.f32	s10, s11, s14
   1035c:	eee7 6a24 	vfma.f32	s13, s14, s9
   10360:	eddf 5a46 	vldr	s11, [pc, #280]	; 1047c <atanf+0x184>
   10364:	eddf 4a46 	vldr	s9, [pc, #280]	; 10480 <atanf+0x188>
   10368:	eee6 5a87 	vfma.f32	s11, s13, s14
   1036c:	eea5 4a07 	vfma.f32	s8, s10, s14
   10370:	ed9f 5a44 	vldr	s10, [pc, #272]	; 10484 <atanf+0x18c>
   10374:	eddf 6a44 	vldr	s13, [pc, #272]	; 10488 <atanf+0x190>
   10378:	eea5 5a87 	vfma.f32	s10, s11, s14
   1037c:	eee4 4a07 	vfma.f32	s9, s8, s14
   10380:	eddf 5a42 	vldr	s11, [pc, #264]	; 1048c <atanf+0x194>
   10384:	eee4 6a87 	vfma.f32	s13, s9, s14
   10388:	eee5 5a07 	vfma.f32	s11, s10, s14
   1038c:	ee66 6a86 	vmul.f32	s13, s13, s12
   10390:	ee65 5a87 	vmul.f32	s11, s11, s14
   10394:	d03a      	beq.n	1040c <atanf+0x114>
   10396:	4a3e      	ldr	r2, [pc, #248]	; (10490 <atanf+0x198>)
   10398:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1039c:	ee76 6aa5 	vadd.f32	s13, s13, s11
   103a0:	ed92 7a00 	vldr	s14, [r2]
   103a4:	4a3b      	ldr	r2, [pc, #236]	; (10494 <atanf+0x19c>)
   103a6:	ee96 7aa7 	vfnms.f32	s14, s13, s15
   103aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   103ae:	2d00      	cmp	r5, #0
   103b0:	edd3 6a00 	vldr	s13, [r3]
   103b4:	ee77 7a67 	vsub.f32	s15, s14, s15
   103b8:	ee36 0ae7 	vsub.f32	s0, s13, s15
   103bc:	dab0      	bge.n	10320 <atanf+0x28>
   103be:	eeb1 0a40 	vneg.f32	s0, s0
   103c2:	bd38      	pop	{r3, r4, r5, pc}
   103c4:	ee30 0a00 	vadd.f32	s0, s0, s0
   103c8:	bd38      	pop	{r3, r4, r5, pc}
   103ca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 10498 <atanf+0x1a0>
   103ce:	ee30 7a07 	vadd.f32	s14, s0, s14
   103d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   103d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
   103da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   103de:	dda6      	ble.n	1032e <atanf+0x36>
   103e0:	bd38      	pop	{r3, r4, r5, pc}
   103e2:	f7ff fc21 	bl	fc28 <fabsf>
   103e6:	4b2d      	ldr	r3, [pc, #180]	; (1049c <atanf+0x1a4>)
   103e8:	429c      	cmp	r4, r3
   103ea:	dc16      	bgt.n	1041a <atanf+0x122>
   103ec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   103f0:	429c      	cmp	r4, r3
   103f2:	dc27      	bgt.n	10444 <atanf+0x14c>
   103f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   103f8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   103fc:	eea0 7a27 	vfma.f32	s14, s0, s15
   10400:	2300      	movs	r3, #0
   10402:	ee30 0a27 	vadd.f32	s0, s0, s15
   10406:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1040a:	e792      	b.n	10332 <atanf+0x3a>
   1040c:	ee76 6aa5 	vadd.f32	s13, s13, s11
   10410:	eee6 7ae7 	vfms.f32	s15, s13, s15
   10414:	eeb0 0a67 	vmov.f32	s0, s15
   10418:	bd38      	pop	{r3, r4, r5, pc}
   1041a:	4b21      	ldr	r3, [pc, #132]	; (104a0 <atanf+0x1a8>)
   1041c:	429c      	cmp	r4, r3
   1041e:	dc0b      	bgt.n	10438 <atanf+0x140>
   10420:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   10424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10428:	eea0 7a27 	vfma.f32	s14, s0, s15
   1042c:	2302      	movs	r3, #2
   1042e:	ee30 0a67 	vsub.f32	s0, s0, s15
   10432:	eec0 7a07 	vdiv.f32	s15, s0, s14
   10436:	e77c      	b.n	10332 <atanf+0x3a>
   10438:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1043c:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10440:	2303      	movs	r3, #3
   10442:	e776      	b.n	10332 <atanf+0x3a>
   10444:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10448:	ee30 7a67 	vsub.f32	s14, s0, s15
   1044c:	ee30 0a27 	vadd.f32	s0, s0, s15
   10450:	2301      	movs	r3, #1
   10452:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10456:	e76c      	b.n	10332 <atanf+0x3a>
   10458:	3fc90fdb 	.word	0x3fc90fdb
   1045c:	bfc90fdb 	.word	0xbfc90fdb
   10460:	3edfffff 	.word	0x3edfffff
   10464:	3c8569d7 	.word	0x3c8569d7
   10468:	3d4bda59 	.word	0x3d4bda59
   1046c:	bd15a221 	.word	0xbd15a221
   10470:	3d886b35 	.word	0x3d886b35
   10474:	3dba2e6e 	.word	0x3dba2e6e
   10478:	bd6ef16b 	.word	0xbd6ef16b
   1047c:	bd9d8795 	.word	0xbd9d8795
   10480:	3e124925 	.word	0x3e124925
   10484:	bde38e38 	.word	0xbde38e38
   10488:	3eaaaaab 	.word	0x3eaaaaab
   1048c:	be4ccccd 	.word	0xbe4ccccd
   10490:	20002b84 	.word	0x20002b84
   10494:	20002b74 	.word	0x20002b74
   10498:	7149f2ca 	.word	0x7149f2ca
   1049c:	3f97ffff 	.word	0x3f97ffff
   104a0:	401bffff 	.word	0x401bffff
   104a4:	00000000 	.word	0x00000000

000104a8 <__ieee754_rem_pio2>:
   104a8:	b570      	push	{r4, r5, r6, lr}
   104aa:	ec53 2b10 	vmov	r2, r3, d0
   104ae:	499c      	ldr	r1, [pc, #624]	; (10720 <__ieee754_rem_pio2+0x278>)
   104b0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   104b4:	428d      	cmp	r5, r1
   104b6:	b088      	sub	sp, #32
   104b8:	4604      	mov	r4, r0
   104ba:	dd6a      	ble.n	10592 <__ieee754_rem_pio2+0xea>
   104bc:	4999      	ldr	r1, [pc, #612]	; (10724 <__ieee754_rem_pio2+0x27c>)
   104be:	428d      	cmp	r5, r1
   104c0:	461e      	mov	r6, r3
   104c2:	dc1b      	bgt.n	104fc <__ieee754_rem_pio2+0x54>
   104c4:	2b00      	cmp	r3, #0
   104c6:	ed9f 7b86 	vldr	d7, [pc, #536]	; 106e0 <__ieee754_rem_pio2+0x238>
   104ca:	f340 80eb 	ble.w	106a4 <__ieee754_rem_pio2+0x1fc>
   104ce:	ee30 7b47 	vsub.f64	d7, d0, d7
   104d2:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
   104d6:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
   104da:	428d      	cmp	r5, r1
   104dc:	d06a      	beq.n	105b4 <__ieee754_rem_pio2+0x10c>
   104de:	ed9f 6b82 	vldr	d6, [pc, #520]	; 106e8 <__ieee754_rem_pio2+0x240>
   104e2:	2001      	movs	r0, #1
   104e4:	ee37 5b46 	vsub.f64	d5, d7, d6
   104e8:	ee37 7b45 	vsub.f64	d7, d7, d5
   104ec:	ed84 5b00 	vstr	d5, [r4]
   104f0:	ee37 7b46 	vsub.f64	d7, d7, d6
   104f4:	ed84 7b02 	vstr	d7, [r4, #8]
   104f8:	b008      	add	sp, #32
   104fa:	bd70      	pop	{r4, r5, r6, pc}
   104fc:	498a      	ldr	r1, [pc, #552]	; (10728 <__ieee754_rem_pio2+0x280>)
   104fe:	428d      	cmp	r5, r1
   10500:	dd60      	ble.n	105c4 <__ieee754_rem_pio2+0x11c>
   10502:	498a      	ldr	r1, [pc, #552]	; (1072c <__ieee754_rem_pio2+0x284>)
   10504:	428d      	cmp	r5, r1
   10506:	dc4d      	bgt.n	105a4 <__ieee754_rem_pio2+0xfc>
   10508:	152a      	asrs	r2, r5, #20
   1050a:	ee10 0a10 	vmov	r0, s0
   1050e:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
   10512:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
   10516:	ec41 0b17 	vmov	d7, r0, r1
   1051a:	ed9f 5b75 	vldr	d5, [pc, #468]	; 106f0 <__ieee754_rem_pio2+0x248>
   1051e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
   10522:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
   10526:	ee37 7b46 	vsub.f64	d7, d7, d6
   1052a:	ee27 7b05 	vmul.f64	d7, d7, d5
   1052e:	eefd 4bc7 	vcvt.s32.f64	s9, d7
   10532:	ed8d 6b02 	vstr	d6, [sp, #8]
   10536:	eeb8 6be4 	vcvt.f64.s32	d6, s9
   1053a:	ee37 7b46 	vsub.f64	d7, d7, d6
   1053e:	ee27 7b05 	vmul.f64	d7, d7, d5
   10542:	eeb5 7b40 	vcmp.f64	d7, #0.0
   10546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1054a:	ed8d 6b04 	vstr	d6, [sp, #16]
   1054e:	ed8d 7b06 	vstr	d7, [sp, #24]
   10552:	f040 8096 	bne.w	10682 <__ieee754_rem_pio2+0x1da>
   10556:	ee14 3a90 	vmov	r3, s9
   1055a:	2b00      	cmp	r3, #0
   1055c:	bf0c      	ite	eq
   1055e:	2301      	moveq	r3, #1
   10560:	2302      	movne	r3, #2
   10562:	4973      	ldr	r1, [pc, #460]	; (10730 <__ieee754_rem_pio2+0x288>)
   10564:	9101      	str	r1, [sp, #4]
   10566:	2102      	movs	r1, #2
   10568:	9100      	str	r1, [sp, #0]
   1056a:	a802      	add	r0, sp, #8
   1056c:	4621      	mov	r1, r4
   1056e:	f000 f8e7 	bl	10740 <__kernel_rem_pio2>
   10572:	2e00      	cmp	r6, #0
   10574:	dac0      	bge.n	104f8 <__ieee754_rem_pio2+0x50>
   10576:	ed94 6b00 	vldr	d6, [r4]
   1057a:	ed94 7b02 	vldr	d7, [r4, #8]
   1057e:	eeb1 6b46 	vneg.f64	d6, d6
   10582:	eeb1 7b47 	vneg.f64	d7, d7
   10586:	ed84 6b00 	vstr	d6, [r4]
   1058a:	ed84 7b02 	vstr	d7, [r4, #8]
   1058e:	4240      	negs	r0, r0
   10590:	e7b2      	b.n	104f8 <__ieee754_rem_pio2+0x50>
   10592:	2000      	movs	r0, #0
   10594:	2100      	movs	r1, #0
   10596:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1059a:	2000      	movs	r0, #0
   1059c:	ed84 0b00 	vstr	d0, [r4]
   105a0:	b008      	add	sp, #32
   105a2:	bd70      	pop	{r4, r5, r6, pc}
   105a4:	ee30 7b40 	vsub.f64	d7, d0, d0
   105a8:	2000      	movs	r0, #0
   105aa:	ed84 7b02 	vstr	d7, [r4, #8]
   105ae:	ed84 7b00 	vstr	d7, [r4]
   105b2:	e7a1      	b.n	104f8 <__ieee754_rem_pio2+0x50>
   105b4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 106f8 <__ieee754_rem_pio2+0x250>
   105b8:	ed9f 6b51 	vldr	d6, [pc, #324]	; 10700 <__ieee754_rem_pio2+0x258>
   105bc:	ee37 7b45 	vsub.f64	d7, d7, d5
   105c0:	2001      	movs	r0, #1
   105c2:	e78f      	b.n	104e4 <__ieee754_rem_pio2+0x3c>
   105c4:	f000 fc04 	bl	10dd0 <fabs>
   105c8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   105cc:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 10708 <__ieee754_rem_pio2+0x260>
   105d0:	eea0 7b05 	vfma.f64	d7, d0, d5
   105d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   105d8:	ed9f 3b41 	vldr	d3, [pc, #260]	; 106e0 <__ieee754_rem_pio2+0x238>
   105dc:	ee17 0a90 	vmov	r0, s15
   105e0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 106e8 <__ieee754_rem_pio2+0x240>
   105e4:	281f      	cmp	r0, #31
   105e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   105ea:	eeb1 4b45 	vneg.f64	d4, d5
   105ee:	eea5 0b43 	vfms.f64	d0, d5, d3
   105f2:	ee25 7b06 	vmul.f64	d7, d5, d6
   105f6:	dc1c      	bgt.n	10632 <__ieee754_rem_pio2+0x18a>
   105f8:	4b4e      	ldr	r3, [pc, #312]	; (10734 <__ieee754_rem_pio2+0x28c>)
   105fa:	1e42      	subs	r2, r0, #1
   105fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10600:	42ab      	cmp	r3, r5
   10602:	d016      	beq.n	10632 <__ieee754_rem_pio2+0x18a>
   10604:	ee30 6b47 	vsub.f64	d6, d0, d7
   10608:	ed84 6b00 	vstr	d6, [r4]
   1060c:	ee30 0b46 	vsub.f64	d0, d0, d6
   10610:	ee30 0b47 	vsub.f64	d0, d0, d7
   10614:	2e00      	cmp	r6, #0
   10616:	ed84 0b02 	vstr	d0, [r4, #8]
   1061a:	f6bf af6d 	bge.w	104f8 <__ieee754_rem_pio2+0x50>
   1061e:	eeb1 6b46 	vneg.f64	d6, d6
   10622:	eeb1 0b40 	vneg.f64	d0, d0
   10626:	ed84 6b00 	vstr	d6, [r4]
   1062a:	ed84 0b02 	vstr	d0, [r4, #8]
   1062e:	4240      	negs	r0, r0
   10630:	e762      	b.n	104f8 <__ieee754_rem_pio2+0x50>
   10632:	ee30 6b47 	vsub.f64	d6, d0, d7
   10636:	ee16 3a90 	vmov	r3, s13
   1063a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1063e:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   10642:	2b10      	cmp	r3, #16
   10644:	ea4f 5225 	mov.w	r2, r5, asr #20
   10648:	ddde      	ble.n	10608 <__ieee754_rem_pio2+0x160>
   1064a:	eeb0 3b40 	vmov.f64	d3, d0
   1064e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 106f8 <__ieee754_rem_pio2+0x250>
   10652:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 10700 <__ieee754_rem_pio2+0x258>
   10656:	eea4 3b06 	vfma.f64	d3, d4, d6
   1065a:	ee30 7b43 	vsub.f64	d7, d0, d3
   1065e:	eea4 7b06 	vfma.f64	d7, d4, d6
   10662:	ee95 7b02 	vfnms.f64	d7, d5, d2
   10666:	ee33 6b47 	vsub.f64	d6, d3, d7
   1066a:	ee16 3a90 	vmov	r3, s13
   1066e:	f3c3 530a 	ubfx	r3, r3, #20, #11
   10672:	1ad2      	subs	r2, r2, r3
   10674:	2a31      	cmp	r2, #49	; 0x31
   10676:	dc06      	bgt.n	10686 <__ieee754_rem_pio2+0x1de>
   10678:	eeb0 0b43 	vmov.f64	d0, d3
   1067c:	ed84 6b00 	vstr	d6, [r4]
   10680:	e7c4      	b.n	1060c <__ieee754_rem_pio2+0x164>
   10682:	2303      	movs	r3, #3
   10684:	e76d      	b.n	10562 <__ieee754_rem_pio2+0xba>
   10686:	ed9f 6b22 	vldr	d6, [pc, #136]	; 10710 <__ieee754_rem_pio2+0x268>
   1068a:	eeb0 0b43 	vmov.f64	d0, d3
   1068e:	ed9f 2b22 	vldr	d2, [pc, #136]	; 10718 <__ieee754_rem_pio2+0x270>
   10692:	eea4 0b06 	vfma.f64	d0, d4, d6
   10696:	ee33 7b40 	vsub.f64	d7, d3, d0
   1069a:	eea4 7b06 	vfma.f64	d7, d4, d6
   1069e:	ee95 7b02 	vfnms.f64	d7, d5, d2
   106a2:	e7af      	b.n	10604 <__ieee754_rem_pio2+0x15c>
   106a4:	4924      	ldr	r1, [pc, #144]	; (10738 <__ieee754_rem_pio2+0x290>)
   106a6:	ee30 7b07 	vadd.f64	d7, d0, d7
   106aa:	428d      	cmp	r5, r1
   106ac:	d00e      	beq.n	106cc <__ieee754_rem_pio2+0x224>
   106ae:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 106e8 <__ieee754_rem_pio2+0x240>
   106b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106b6:	ee37 5b06 	vadd.f64	d5, d7, d6
   106ba:	ee37 7b45 	vsub.f64	d7, d7, d5
   106be:	ed84 5b00 	vstr	d5, [r4]
   106c2:	ee37 7b06 	vadd.f64	d7, d7, d6
   106c6:	ed84 7b02 	vstr	d7, [r4, #8]
   106ca:	e715      	b.n	104f8 <__ieee754_rem_pio2+0x50>
   106cc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 106f8 <__ieee754_rem_pio2+0x250>
   106d0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 10700 <__ieee754_rem_pio2+0x258>
   106d4:	ee37 7b05 	vadd.f64	d7, d7, d5
   106d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106dc:	e7eb      	b.n	106b6 <__ieee754_rem_pio2+0x20e>
   106de:	bf00      	nop
   106e0:	54400000 	.word	0x54400000
   106e4:	3ff921fb 	.word	0x3ff921fb
   106e8:	1a626331 	.word	0x1a626331
   106ec:	3dd0b461 	.word	0x3dd0b461
   106f0:	00000000 	.word	0x00000000
   106f4:	41700000 	.word	0x41700000
   106f8:	1a600000 	.word	0x1a600000
   106fc:	3dd0b461 	.word	0x3dd0b461
   10700:	2e037073 	.word	0x2e037073
   10704:	3ba3198a 	.word	0x3ba3198a
   10708:	6dc9c883 	.word	0x6dc9c883
   1070c:	3fe45f30 	.word	0x3fe45f30
   10710:	2e000000 	.word	0x2e000000
   10714:	3ba3198a 	.word	0x3ba3198a
   10718:	252049c1 	.word	0x252049c1
   1071c:	397b839a 	.word	0x397b839a
   10720:	3fe921fb 	.word	0x3fe921fb
   10724:	4002d97b 	.word	0x4002d97b
   10728:	413921fb 	.word	0x413921fb
   1072c:	7fefffff 	.word	0x7fefffff
   10730:	20003320 	.word	0x20003320
   10734:	20002f48 	.word	0x20002f48
   10738:	3ff921fb 	.word	0x3ff921fb
   1073c:	00000000 	.word	0x00000000

00010740 <__kernel_rem_pio2>:
   10740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10744:	ed2d 8b08 	vpush	{d8-d11}
   10748:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   1074c:	461c      	mov	r4, r3
   1074e:	9304      	str	r3, [sp, #16]
   10750:	9107      	str	r1, [sp, #28]
   10752:	4bab      	ldr	r3, [pc, #684]	; (10a00 <__kernel_rem_pio2+0x2c0>)
   10754:	99a6      	ldr	r1, [sp, #664]	; 0x298
   10756:	f112 0f14 	cmn.w	r2, #20
   1075a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   1075e:	4682      	mov	sl, r0
   10760:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   10764:	f2c0 8299 	blt.w	10c9a <__kernel_rem_pio2+0x55a>
   10768:	49a6      	ldr	r1, [pc, #664]	; (10a04 <__kernel_rem_pio2+0x2c4>)
   1076a:	1ed3      	subs	r3, r2, #3
   1076c:	fb81 0103 	smull	r0, r1, r1, r3
   10770:	17db      	asrs	r3, r3, #31
   10772:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   10776:	9303      	str	r3, [sp, #12]
   10778:	3301      	adds	r3, #1
   1077a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1077e:	00db      	lsls	r3, r3, #3
   10780:	18d3      	adds	r3, r2, r3
   10782:	9306      	str	r3, [sp, #24]
   10784:	9b03      	ldr	r3, [sp, #12]
   10786:	eb15 0108 	adds.w	r1, r5, r8
   1078a:	eba3 0308 	sub.w	r3, r3, r8
   1078e:	d41a      	bmi.n	107c6 <__kernel_rem_pio2+0x86>
   10790:	3101      	adds	r1, #1
   10792:	ed9f 6b95 	vldr	d6, [pc, #596]	; 109e8 <__kernel_rem_pio2+0x2a8>
   10796:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   10798:	4419      	add	r1, r3
   1079a:	aa1c      	add	r2, sp, #112	; 0x70
   1079c:	e00a      	b.n	107b4 <__kernel_rem_pio2+0x74>
   1079e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   107a2:	ee07 4a90 	vmov	s15, r4
   107a6:	3301      	adds	r3, #1
   107a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   107ac:	428b      	cmp	r3, r1
   107ae:	eca2 7b02 	vstmia	r2!, {d7}
   107b2:	d008      	beq.n	107c6 <__kernel_rem_pio2+0x86>
   107b4:	2b00      	cmp	r3, #0
   107b6:	daf2      	bge.n	1079e <__kernel_rem_pio2+0x5e>
   107b8:	eeb0 7b46 	vmov.f64	d7, d6
   107bc:	3301      	adds	r3, #1
   107be:	428b      	cmp	r3, r1
   107c0:	eca2 7b02 	vstmia	r2!, {d7}
   107c4:	d1f6      	bne.n	107b4 <__kernel_rem_pio2+0x74>
   107c6:	2d00      	cmp	r5, #0
   107c8:	f2c0 82c9 	blt.w	10d5e <__kernel_rem_pio2+0x61e>
   107cc:	9b04      	ldr	r3, [sp, #16]
   107ce:	aa1c      	add	r2, sp, #112	; 0x70
   107d0:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   107d4:	ae6c      	add	r6, sp, #432	; 0x1b0
   107d6:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   107da:	4640      	mov	r0, r8
   107dc:	18ef      	adds	r7, r5, r3
   107de:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   107e2:	f1b8 0f00 	cmp.w	r8, #0
   107e6:	ed9f 7b80 	vldr	d7, [pc, #512]	; 109e8 <__kernel_rem_pio2+0x2a8>
   107ea:	db09      	blt.n	10800 <__kernel_rem_pio2+0xc0>
   107ec:	4622      	mov	r2, r4
   107ee:	4653      	mov	r3, sl
   107f0:	ecb3 5b02 	vldmia	r3!, {d5}
   107f4:	ed32 6b02 	vldmdb	r2!, {d6}
   107f8:	428b      	cmp	r3, r1
   107fa:	eea5 7b06 	vfma.f64	d7, d5, d6
   107fe:	d1f7      	bne.n	107f0 <__kernel_rem_pio2+0xb0>
   10800:	3001      	adds	r0, #1
   10802:	42b8      	cmp	r0, r7
   10804:	eca6 7b02 	vstmia	r6!, {d7}
   10808:	f104 0408 	add.w	r4, r4, #8
   1080c:	d1e9      	bne.n	107e2 <__kernel_rem_pio2+0xa2>
   1080e:	af08      	add	r7, sp, #32
   10810:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   10814:	ed9f 9b76 	vldr	d9, [pc, #472]	; 109f0 <__kernel_rem_pio2+0x2b0>
   10818:	ed9f 8b77 	vldr	d8, [pc, #476]	; 109f8 <__kernel_rem_pio2+0x2b8>
   1081c:	3b04      	subs	r3, #4
   1081e:	f8dd b018 	ldr.w	fp, [sp, #24]
   10822:	9305      	str	r3, [sp, #20]
   10824:	eb0a 040c 	add.w	r4, sl, ip
   10828:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   1082c:	ae6c      	add	r6, sp, #432	; 0x1b0
   1082e:	4629      	mov	r1, r5
   10830:	9501      	str	r5, [sp, #4]
   10832:	ab94      	add	r3, sp, #592	; 0x250
   10834:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10838:	2900      	cmp	r1, #0
   1083a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   1083e:	dd16      	ble.n	1086e <__kernel_rem_pio2+0x12e>
   10840:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   10844:	463a      	mov	r2, r7
   10846:	ee20 7b09 	vmul.f64	d7, d0, d9
   1084a:	ed33 5b02 	vldmdb	r3!, {d5}
   1084e:	eeb0 6b40 	vmov.f64	d6, d0
   10852:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   10856:	42b3      	cmp	r3, r6
   10858:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1085c:	eea7 6b48 	vfms.f64	d6, d7, d8
   10860:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   10864:	ee37 0b05 	vadd.f64	d0, d7, d5
   10868:	eca2 6a01 	vstmia	r2!, {s12}
   1086c:	d1eb      	bne.n	10846 <__kernel_rem_pio2+0x106>
   1086e:	4658      	mov	r0, fp
   10870:	9102      	str	r1, [sp, #8]
   10872:	f000 fb41 	bl	10ef8 <scalbn>
   10876:	eeb0 ab40 	vmov.f64	d10, d0
   1087a:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   1087e:	ee2a 0b00 	vmul.f64	d0, d10, d0
   10882:	f000 fab1 	bl	10de8 <floor>
   10886:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   1088a:	eea0 ab47 	vfms.f64	d10, d0, d7
   1088e:	eebd bbca 	vcvt.s32.f64	s22, d10
   10892:	f1bb 0f00 	cmp.w	fp, #0
   10896:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   1089a:	9902      	ldr	r1, [sp, #8]
   1089c:	ee3a ab47 	vsub.f64	d10, d10, d7
   108a0:	dd74      	ble.n	1098c <__kernel_rem_pio2+0x24c>
   108a2:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   108a6:	f1cb 0318 	rsb	r3, fp, #24
   108aa:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   108ae:	fa42 fc03 	asr.w	ip, r2, r3
   108b2:	fa0c f303 	lsl.w	r3, ip, r3
   108b6:	1ad2      	subs	r2, r2, r3
   108b8:	f1cb 0017 	rsb	r0, fp, #23
   108bc:	ee1b 3a10 	vmov	r3, s22
   108c0:	fa42 f500 	asr.w	r5, r2, r0
   108c4:	4463      	add	r3, ip
   108c6:	2d00      	cmp	r5, #0
   108c8:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   108cc:	ee0b 3a10 	vmov	s22, r3
   108d0:	dc64      	bgt.n	1099c <__kernel_rem_pio2+0x25c>
   108d2:	eeb5 ab40 	vcmp.f64	d10, #0.0
   108d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   108da:	f040 80c4 	bne.w	10a66 <__kernel_rem_pio2+0x326>
   108de:	9b01      	ldr	r3, [sp, #4]
   108e0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   108e4:	4573      	cmp	r3, lr
   108e6:	dc0d      	bgt.n	10904 <__kernel_rem_pio2+0x1c4>
   108e8:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   108ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   108f0:	2000      	movs	r0, #0
   108f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   108f6:	454b      	cmp	r3, r9
   108f8:	ea40 0002 	orr.w	r0, r0, r2
   108fc:	d1f9      	bne.n	108f2 <__kernel_rem_pio2+0x1b2>
   108fe:	2800      	cmp	r0, #0
   10900:	f040 80f2 	bne.w	10ae8 <__kernel_rem_pio2+0x3a8>
   10904:	9b01      	ldr	r3, [sp, #4]
   10906:	3b01      	subs	r3, #1
   10908:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   1090c:	2b00      	cmp	r3, #0
   1090e:	f040 80e6 	bne.w	10ade <__kernel_rem_pio2+0x39e>
   10912:	9b05      	ldr	r3, [sp, #20]
   10914:	2501      	movs	r5, #1
   10916:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1091a:	3501      	adds	r5, #1
   1091c:	2a00      	cmp	r2, #0
   1091e:	d0fa      	beq.n	10916 <__kernel_rem_pio2+0x1d6>
   10920:	f101 0e01 	add.w	lr, r1, #1
   10924:	440d      	add	r5, r1
   10926:	4670      	mov	r0, lr
   10928:	9b04      	ldr	r3, [sp, #16]
   1092a:	4419      	add	r1, r3
   1092c:	9b03      	ldr	r3, [sp, #12]
   1092e:	eb03 0c0e 	add.w	ip, r3, lr
   10932:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   10936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   10938:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1093c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   10940:	ab1c      	add	r3, sp, #112	; 0x70
   10942:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   10946:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1094a:	ed9c 7a01 	vldr	s14, [ip, #4]
   1094e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10952:	f1b8 0f00 	cmp.w	r8, #0
   10956:	ed81 7b00 	vstr	d7, [r1]
   1095a:	f10c 0c04 	add.w	ip, ip, #4
   1095e:	460a      	mov	r2, r1
   10960:	ed9f 6b21 	vldr	d6, [pc, #132]	; 109e8 <__kernel_rem_pio2+0x2a8>
   10964:	f101 0108 	add.w	r1, r1, #8
   10968:	db09      	blt.n	1097e <__kernel_rem_pio2+0x23e>
   1096a:	4653      	mov	r3, sl
   1096c:	e001      	b.n	10972 <__kernel_rem_pio2+0x232>
   1096e:	ed32 7b02 	vldmdb	r2!, {d7}
   10972:	ecb3 5b02 	vldmia	r3!, {d5}
   10976:	42a3      	cmp	r3, r4
   10978:	eea5 6b07 	vfma.f64	d6, d5, d7
   1097c:	d1f7      	bne.n	1096e <__kernel_rem_pio2+0x22e>
   1097e:	3001      	adds	r0, #1
   10980:	42a8      	cmp	r0, r5
   10982:	ecae 6b02 	vstmia	lr!, {d6}
   10986:	dde0      	ble.n	1094a <__kernel_rem_pio2+0x20a>
   10988:	4629      	mov	r1, r5
   1098a:	e752      	b.n	10832 <__kernel_rem_pio2+0xf2>
   1098c:	f040 809d 	bne.w	10aca <__kernel_rem_pio2+0x38a>
   10990:	1e4b      	subs	r3, r1, #1
   10992:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   10996:	15ed      	asrs	r5, r5, #23
   10998:	2d00      	cmp	r5, #0
   1099a:	dd9a      	ble.n	108d2 <__kernel_rem_pio2+0x192>
   1099c:	ee1b 3a10 	vmov	r3, s22
   109a0:	2900      	cmp	r1, #0
   109a2:	f103 0301 	add.w	r3, r3, #1
   109a6:	ee0b 3a10 	vmov	s22, r3
   109aa:	f340 818c 	ble.w	10cc6 <__kernel_rem_pio2+0x586>
   109ae:	683a      	ldr	r2, [r7, #0]
   109b0:	2a00      	cmp	r2, #0
   109b2:	f040 8082 	bne.w	10aba <__kernel_rem_pio2+0x37a>
   109b6:	2901      	cmp	r1, #1
   109b8:	d02d      	beq.n	10a16 <__kernel_rem_pio2+0x2d6>
   109ba:	463b      	mov	r3, r7
   109bc:	2001      	movs	r0, #1
   109be:	f853 2f04 	ldr.w	r2, [r3, #4]!
   109c2:	2a00      	cmp	r2, #0
   109c4:	d07c      	beq.n	10ac0 <__kernel_rem_pio2+0x380>
   109c6:	1c43      	adds	r3, r0, #1
   109c8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   109cc:	4299      	cmp	r1, r3
   109ce:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   109d2:	dd1f      	ble.n	10a14 <__kernel_rem_pio2+0x2d4>
   109d4:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   109d8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   109dc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   109e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   109e4:	e011      	b.n	10a0a <__kernel_rem_pio2+0x2ca>
   109e6:	bf00      	nop
	...
   109f4:	3e700000 	.word	0x3e700000
   109f8:	00000000 	.word	0x00000000
   109fc:	41700000 	.word	0x41700000
   10a00:	20002f1c 	.word	0x20002f1c
   10a04:	2aaaaaab 	.word	0x2aaaaaab
   10a08:	681a      	ldr	r2, [r3, #0]
   10a0a:	1a82      	subs	r2, r0, r2
   10a0c:	f843 2b04 	str.w	r2, [r3], #4
   10a10:	4563      	cmp	r3, ip
   10a12:	d1f9      	bne.n	10a08 <__kernel_rem_pio2+0x2c8>
   10a14:	2201      	movs	r2, #1
   10a16:	f1bb 0f00 	cmp.w	fp, #0
   10a1a:	dd0d      	ble.n	10a38 <__kernel_rem_pio2+0x2f8>
   10a1c:	f1bb 0f01 	cmp.w	fp, #1
   10a20:	f000 8133 	beq.w	10c8a <__kernel_rem_pio2+0x54a>
   10a24:	f1bb 0f02 	cmp.w	fp, #2
   10a28:	d106      	bne.n	10a38 <__kernel_rem_pio2+0x2f8>
   10a2a:	1e48      	subs	r0, r1, #1
   10a2c:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10a30:	f3c3 0315 	ubfx	r3, r3, #0, #22
   10a34:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10a38:	2d02      	cmp	r5, #2
   10a3a:	f47f af4a 	bne.w	108d2 <__kernel_rem_pio2+0x192>
   10a3e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   10a42:	ee30 ab4a 	vsub.f64	d10, d0, d10
   10a46:	2a00      	cmp	r2, #0
   10a48:	f43f af43 	beq.w	108d2 <__kernel_rem_pio2+0x192>
   10a4c:	4658      	mov	r0, fp
   10a4e:	9102      	str	r1, [sp, #8]
   10a50:	f000 fa52 	bl	10ef8 <scalbn>
   10a54:	ee3a ab40 	vsub.f64	d10, d10, d0
   10a58:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a60:	9902      	ldr	r1, [sp, #8]
   10a62:	f43f af3c 	beq.w	108de <__kernel_rem_pio2+0x19e>
   10a66:	9c06      	ldr	r4, [sp, #24]
   10a68:	eeb0 0b4a 	vmov.f64	d0, d10
   10a6c:	4260      	negs	r0, r4
   10a6e:	46a8      	mov	r8, r5
   10a70:	468b      	mov	fp, r1
   10a72:	9d01      	ldr	r5, [sp, #4]
   10a74:	f000 fa40 	bl	10ef8 <scalbn>
   10a78:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 10d80 <__kernel_rem_pio2+0x640>
   10a7c:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a84:	f2c0 8147 	blt.w	10d16 <__kernel_rem_pio2+0x5d6>
   10a88:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 10d88 <__kernel_rem_pio2+0x648>
   10a8c:	ee20 7b07 	vmul.f64	d7, d0, d7
   10a90:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   10a94:	f10b 0201 	add.w	r2, fp, #1
   10a98:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   10a9c:	eea5 0b46 	vfms.f64	d0, d5, d6
   10aa0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   10aa4:	3418      	adds	r4, #24
   10aa6:	ee10 3a10 	vmov	r3, s0
   10aaa:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   10aae:	ee17 3a10 	vmov	r3, s14
   10ab2:	9406      	str	r4, [sp, #24]
   10ab4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   10ab8:	e02a      	b.n	10b10 <__kernel_rem_pio2+0x3d0>
   10aba:	2301      	movs	r3, #1
   10abc:	2000      	movs	r0, #0
   10abe:	e783      	b.n	109c8 <__kernel_rem_pio2+0x288>
   10ac0:	3001      	adds	r0, #1
   10ac2:	4288      	cmp	r0, r1
   10ac4:	f47f af7b 	bne.w	109be <__kernel_rem_pio2+0x27e>
   10ac8:	e7a5      	b.n	10a16 <__kernel_rem_pio2+0x2d6>
   10aca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   10ace:	eeb4 abc7 	vcmpe.f64	d10, d7
   10ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ad6:	f280 80e5 	bge.w	10ca4 <__kernel_rem_pio2+0x564>
   10ada:	2500      	movs	r5, #0
   10adc:	e6f9      	b.n	108d2 <__kernel_rem_pio2+0x192>
   10ade:	f101 0e01 	add.w	lr, r1, #1
   10ae2:	4670      	mov	r0, lr
   10ae4:	4675      	mov	r5, lr
   10ae6:	e71f      	b.n	10928 <__kernel_rem_pio2+0x1e8>
   10ae8:	9b06      	ldr	r3, [sp, #24]
   10aea:	f1a3 0118 	sub.w	r1, r3, #24
   10aee:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   10af2:	9106      	str	r1, [sp, #24]
   10af4:	46a8      	mov	r8, r5
   10af6:	4672      	mov	r2, lr
   10af8:	9d01      	ldr	r5, [sp, #4]
   10afa:	b94b      	cbnz	r3, 10b10 <__kernel_rem_pio2+0x3d0>
   10afc:	f1ac 0304 	sub.w	r3, ip, #4
   10b00:	443b      	add	r3, r7
   10b02:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   10b06:	3a01      	subs	r2, #1
   10b08:	3918      	subs	r1, #24
   10b0a:	2800      	cmp	r0, #0
   10b0c:	d0f9      	beq.n	10b02 <__kernel_rem_pio2+0x3c2>
   10b0e:	9106      	str	r1, [sp, #24]
   10b10:	9806      	ldr	r0, [sp, #24]
   10b12:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   10b16:	9201      	str	r2, [sp, #4]
   10b18:	f000 f9ee 	bl	10ef8 <scalbn>
   10b1c:	9a01      	ldr	r2, [sp, #4]
   10b1e:	2a00      	cmp	r2, #0
   10b20:	f2c0 8121 	blt.w	10d66 <__kernel_rem_pio2+0x626>
   10b24:	ed9f 6b98 	vldr	d6, [pc, #608]	; 10d88 <__kernel_rem_pio2+0x648>
   10b28:	f102 0c01 	add.w	ip, r2, #1
   10b2c:	a96c      	add	r1, sp, #432	; 0x1b0
   10b2e:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   10b32:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   10b36:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   10b3a:	ed33 7a01 	vldmdb	r3!, {s14}
   10b3e:	42bb      	cmp	r3, r7
   10b40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10b44:	ee27 7b00 	vmul.f64	d7, d7, d0
   10b48:	ee20 0b06 	vmul.f64	d0, d0, d6
   10b4c:	ed21 7b02 	vstmdb	r1!, {d7}
   10b50:	d1f3      	bne.n	10b3a <__kernel_rem_pio2+0x3fa>
   10b52:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 10d90 <__kernel_rem_pio2+0x650>
   10b56:	f1ae 0308 	sub.w	r3, lr, #8
   10b5a:	a96c      	add	r1, sp, #432	; 0x1b0
   10b5c:	18ce      	adds	r6, r1, r3
   10b5e:	2400      	movs	r4, #0
   10b60:	af44      	add	r7, sp, #272	; 0x110
   10b62:	2d00      	cmp	r5, #0
   10b64:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 10d98 <__kernel_rem_pio2+0x658>
   10b68:	db10      	blt.n	10b8c <__kernel_rem_pio2+0x44c>
   10b6a:	eeb0 6b44 	vmov.f64	d6, d4
   10b6e:	488c      	ldr	r0, [pc, #560]	; (10da0 <__kernel_rem_pio2+0x660>)
   10b70:	4631      	mov	r1, r6
   10b72:	2300      	movs	r3, #0
   10b74:	e003      	b.n	10b7e <__kernel_rem_pio2+0x43e>
   10b76:	429c      	cmp	r4, r3
   10b78:	db08      	blt.n	10b8c <__kernel_rem_pio2+0x44c>
   10b7a:	ecb0 6b02 	vldmia	r0!, {d6}
   10b7e:	ecb1 5b02 	vldmia	r1!, {d5}
   10b82:	3301      	adds	r3, #1
   10b84:	429d      	cmp	r5, r3
   10b86:	eea5 7b06 	vfma.f64	d7, d5, d6
   10b8a:	daf4      	bge.n	10b76 <__kernel_rem_pio2+0x436>
   10b8c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   10b90:	4294      	cmp	r4, r2
   10b92:	ed83 7b00 	vstr	d7, [r3]
   10b96:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   10b9a:	f104 0301 	add.w	r3, r4, #1
   10b9e:	f1a6 0608 	sub.w	r6, r6, #8
   10ba2:	d001      	beq.n	10ba8 <__kernel_rem_pio2+0x468>
   10ba4:	461c      	mov	r4, r3
   10ba6:	e7dc      	b.n	10b62 <__kernel_rem_pio2+0x422>
   10ba8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10baa:	2b02      	cmp	r3, #2
   10bac:	dc1d      	bgt.n	10bea <__kernel_rem_pio2+0x4aa>
   10bae:	2b00      	cmp	r3, #0
   10bb0:	f300 808b 	bgt.w	10cca <__kernel_rem_pio2+0x58a>
   10bb4:	d10f      	bne.n	10bd6 <__kernel_rem_pio2+0x496>
   10bb6:	ed9f 7b78 	vldr	d7, [pc, #480]	; 10d98 <__kernel_rem_pio2+0x658>
   10bba:	44be      	add	lr, r7
   10bbc:	ed3e 6b02 	vldmdb	lr!, {d6}
   10bc0:	4577      	cmp	r7, lr
   10bc2:	ee37 7b06 	vadd.f64	d7, d7, d6
   10bc6:	d1f9      	bne.n	10bbc <__kernel_rem_pio2+0x47c>
   10bc8:	4643      	mov	r3, r8
   10bca:	b10b      	cbz	r3, 10bd0 <__kernel_rem_pio2+0x490>
   10bcc:	eeb1 7b47 	vneg.f64	d7, d7
   10bd0:	9b07      	ldr	r3, [sp, #28]
   10bd2:	ed83 7b00 	vstr	d7, [r3]
   10bd6:	ee1b 3a10 	vmov	r3, s22
   10bda:	f003 0007 	and.w	r0, r3, #7
   10bde:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   10be2:	ecbd 8b08 	vpop	{d8-d11}
   10be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10bec:	2b03      	cmp	r3, #3
   10bee:	d1f2      	bne.n	10bd6 <__kernel_rem_pio2+0x496>
   10bf0:	2a00      	cmp	r2, #0
   10bf2:	f000 80e3 	beq.w	10dbc <__kernel_rem_pio2+0x67c>
   10bf6:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   10bfa:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   10bfe:	ed30 6b02 	vldmdb	r0!, {d6}
   10c02:	eeb0 5b47 	vmov.f64	d5, d7
   10c06:	4287      	cmp	r7, r0
   10c08:	ee37 7b06 	vadd.f64	d7, d7, d6
   10c0c:	ee36 6b47 	vsub.f64	d6, d6, d7
   10c10:	ed80 7b00 	vstr	d7, [r0]
   10c14:	ee36 6b05 	vadd.f64	d6, d6, d5
   10c18:	ed80 6b02 	vstr	d6, [r0, #8]
   10c1c:	d1ef      	bne.n	10bfe <__kernel_rem_pio2+0x4be>
   10c1e:	2a01      	cmp	r2, #1
   10c20:	f340 80cc 	ble.w	10dbc <__kernel_rem_pio2+0x67c>
   10c24:	4439      	add	r1, r7
   10c26:	ed91 6b00 	vldr	d6, [r1]
   10c2a:	00da      	lsls	r2, r3, #3
   10c2c:	a946      	add	r1, sp, #280	; 0x118
   10c2e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   10c32:	ed33 7b02 	vldmdb	r3!, {d7}
   10c36:	eeb0 5b46 	vmov.f64	d5, d6
   10c3a:	4299      	cmp	r1, r3
   10c3c:	ee36 6b07 	vadd.f64	d6, d6, d7
   10c40:	ee37 7b46 	vsub.f64	d7, d7, d6
   10c44:	ed83 6b00 	vstr	d6, [r3]
   10c48:	ee37 7b05 	vadd.f64	d7, d7, d5
   10c4c:	ed83 7b02 	vstr	d7, [r3, #8]
   10c50:	d1ef      	bne.n	10c32 <__kernel_rem_pio2+0x4f2>
   10c52:	ed9f 7b51 	vldr	d7, [pc, #324]	; 10d98 <__kernel_rem_pio2+0x658>
   10c56:	f102 0308 	add.w	r3, r2, #8
   10c5a:	443b      	add	r3, r7
   10c5c:	f107 0210 	add.w	r2, r7, #16
   10c60:	ed33 6b02 	vldmdb	r3!, {d6}
   10c64:	429a      	cmp	r2, r3
   10c66:	ee37 7b06 	vadd.f64	d7, d7, d6
   10c6a:	d1f9      	bne.n	10c60 <__kernel_rem_pio2+0x520>
   10c6c:	4643      	mov	r3, r8
   10c6e:	2b00      	cmp	r3, #0
   10c70:	d159      	bne.n	10d26 <__kernel_rem_pio2+0x5e6>
   10c72:	e9d7 0100 	ldrd	r0, r1, [r7]
   10c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10c7a:	9c07      	ldr	r4, [sp, #28]
   10c7c:	ed84 7b04 	vstr	d7, [r4, #16]
   10c80:	e9c4 0100 	strd	r0, r1, [r4]
   10c84:	e9c4 2302 	strd	r2, r3, [r4, #8]
   10c88:	e7a5      	b.n	10bd6 <__kernel_rem_pio2+0x496>
   10c8a:	1e48      	subs	r0, r1, #1
   10c8c:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10c90:	f3c3 0316 	ubfx	r3, r3, #0, #23
   10c94:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10c98:	e6ce      	b.n	10a38 <__kernel_rem_pio2+0x2f8>
   10c9a:	2100      	movs	r1, #0
   10c9c:	f06f 0317 	mvn.w	r3, #23
   10ca0:	9103      	str	r1, [sp, #12]
   10ca2:	e56d      	b.n	10780 <__kernel_rem_pio2+0x40>
   10ca4:	ee1b 3a10 	vmov	r3, s22
   10ca8:	2900      	cmp	r1, #0
   10caa:	f103 0301 	add.w	r3, r3, #1
   10cae:	ee0b 3a10 	vmov	s22, r3
   10cb2:	bfc8      	it	gt
   10cb4:	2502      	movgt	r5, #2
   10cb6:	f73f ae7a 	bgt.w	109ae <__kernel_rem_pio2+0x26e>
   10cba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10cbe:	ee37 ab4a 	vsub.f64	d10, d7, d10
   10cc2:	2502      	movs	r5, #2
   10cc4:	e605      	b.n	108d2 <__kernel_rem_pio2+0x192>
   10cc6:	2200      	movs	r2, #0
   10cc8:	e6a5      	b.n	10a16 <__kernel_rem_pio2+0x2d6>
   10cca:	ed9f 7b33 	vldr	d7, [pc, #204]	; 10d98 <__kernel_rem_pio2+0x658>
   10cce:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   10cd2:	ed3c 6b02 	vldmdb	ip!, {d6}
   10cd6:	4567      	cmp	r7, ip
   10cd8:	ee37 7b06 	vadd.f64	d7, d7, d6
   10cdc:	d1f9      	bne.n	10cd2 <__kernel_rem_pio2+0x592>
   10cde:	4643      	mov	r3, r8
   10ce0:	ed97 6b00 	vldr	d6, [r7]
   10ce4:	bb8b      	cbnz	r3, 10d4a <__kernel_rem_pio2+0x60a>
   10ce6:	9b07      	ldr	r3, [sp, #28]
   10ce8:	2a00      	cmp	r2, #0
   10cea:	ed83 7b00 	vstr	d7, [r3]
   10cee:	ee36 7b47 	vsub.f64	d7, d6, d7
   10cf2:	dd0c      	ble.n	10d0e <__kernel_rem_pio2+0x5ce>
   10cf4:	a946      	add	r1, sp, #280	; 0x118
   10cf6:	2301      	movs	r3, #1
   10cf8:	ecb1 6b02 	vldmia	r1!, {d6}
   10cfc:	3301      	adds	r3, #1
   10cfe:	429a      	cmp	r2, r3
   10d00:	ee37 7b06 	vadd.f64	d7, d7, d6
   10d04:	daf8      	bge.n	10cf8 <__kernel_rem_pio2+0x5b8>
   10d06:	4643      	mov	r3, r8
   10d08:	b10b      	cbz	r3, 10d0e <__kernel_rem_pio2+0x5ce>
   10d0a:	eeb1 7b47 	vneg.f64	d7, d7
   10d0e:	9b07      	ldr	r3, [sp, #28]
   10d10:	ed83 7b02 	vstr	d7, [r3, #8]
   10d14:	e75f      	b.n	10bd6 <__kernel_rem_pio2+0x496>
   10d16:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   10d1a:	465a      	mov	r2, fp
   10d1c:	ee10 3a10 	vmov	r3, s0
   10d20:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   10d24:	e6f4      	b.n	10b10 <__kernel_rem_pio2+0x3d0>
   10d26:	ed97 5b00 	vldr	d5, [r7]
   10d2a:	eeb1 7b47 	vneg.f64	d7, d7
   10d2e:	ed97 6b02 	vldr	d6, [r7, #8]
   10d32:	eeb1 5b45 	vneg.f64	d5, d5
   10d36:	9b07      	ldr	r3, [sp, #28]
   10d38:	eeb1 6b46 	vneg.f64	d6, d6
   10d3c:	ed83 5b00 	vstr	d5, [r3]
   10d40:	ed83 6b02 	vstr	d6, [r3, #8]
   10d44:	ed83 7b04 	vstr	d7, [r3, #16]
   10d48:	e745      	b.n	10bd6 <__kernel_rem_pio2+0x496>
   10d4a:	9b07      	ldr	r3, [sp, #28]
   10d4c:	eeb1 5b47 	vneg.f64	d5, d7
   10d50:	2a00      	cmp	r2, #0
   10d52:	ed83 5b00 	vstr	d5, [r3]
   10d56:	ee36 7b47 	vsub.f64	d7, d6, d7
   10d5a:	dccb      	bgt.n	10cf4 <__kernel_rem_pio2+0x5b4>
   10d5c:	e7d5      	b.n	10d0a <__kernel_rem_pio2+0x5ca>
   10d5e:	9b04      	ldr	r3, [sp, #16]
   10d60:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   10d64:	e553      	b.n	1080e <__kernel_rem_pio2+0xce>
   10d66:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10d68:	2b02      	cmp	r3, #2
   10d6a:	dc1b      	bgt.n	10da4 <__kernel_rem_pio2+0x664>
   10d6c:	2b00      	cmp	r3, #0
   10d6e:	dc21      	bgt.n	10db4 <__kernel_rem_pio2+0x674>
   10d70:	f47f af31 	bne.w	10bd6 <__kernel_rem_pio2+0x496>
   10d74:	ed9f 7b08 	vldr	d7, [pc, #32]	; 10d98 <__kernel_rem_pio2+0x658>
   10d78:	e726      	b.n	10bc8 <__kernel_rem_pio2+0x488>
   10d7a:	bf00      	nop
   10d7c:	f3af 8000 	nop.w
   10d80:	00000000 	.word	0x00000000
   10d84:	41700000 	.word	0x41700000
   10d88:	00000000 	.word	0x00000000
   10d8c:	3e700000 	.word	0x3e700000
   10d90:	40000000 	.word	0x40000000
   10d94:	3ff921fb 	.word	0x3ff921fb
	...
   10da0:	20000288 	.word	0x20000288
   10da4:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10da6:	2b03      	cmp	r3, #3
   10da8:	f47f af15 	bne.w	10bd6 <__kernel_rem_pio2+0x496>
   10dac:	ed9f 7b06 	vldr	d7, [pc, #24]	; 10dc8 <__kernel_rem_pio2+0x688>
   10db0:	af44      	add	r7, sp, #272	; 0x110
   10db2:	e75b      	b.n	10c6c <__kernel_rem_pio2+0x52c>
   10db4:	ed9f 7b04 	vldr	d7, [pc, #16]	; 10dc8 <__kernel_rem_pio2+0x688>
   10db8:	af44      	add	r7, sp, #272	; 0x110
   10dba:	e790      	b.n	10cde <__kernel_rem_pio2+0x59e>
   10dbc:	ed9f 7b02 	vldr	d7, [pc, #8]	; 10dc8 <__kernel_rem_pio2+0x688>
   10dc0:	e754      	b.n	10c6c <__kernel_rem_pio2+0x52c>
   10dc2:	bf00      	nop
   10dc4:	f3af 8000 	nop.w
	...

00010dd0 <fabs>:
   10dd0:	ec51 0b10 	vmov	r0, r1, d0
   10dd4:	ee10 2a10 	vmov	r2, s0
   10dd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10ddc:	ec43 2b10 	vmov	d0, r2, r3
   10de0:	4770      	bx	lr
   10de2:	bf00      	nop
   10de4:	0000      	movs	r0, r0
	...

00010de8 <floor>:
   10de8:	b510      	push	{r4, lr}
   10dea:	b082      	sub	sp, #8
   10dec:	ed8d 0b00 	vstr	d0, [sp]
   10df0:	9901      	ldr	r1, [sp, #4]
   10df2:	9800      	ldr	r0, [sp, #0]
   10df4:	f3c1 520a 	ubfx	r2, r1, #20, #11
   10df8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   10dfc:	2b13      	cmp	r3, #19
   10dfe:	4684      	mov	ip, r0
   10e00:	dc31      	bgt.n	10e66 <floor+0x7e>
   10e02:	2b00      	cmp	r3, #0
   10e04:	db21      	blt.n	10e4a <floor+0x62>
   10e06:	4a3a      	ldr	r2, [pc, #232]	; (10ef0 <floor+0x108>)
   10e08:	411a      	asrs	r2, r3
   10e0a:	ea01 0402 	and.w	r4, r1, r2
   10e0e:	4304      	orrs	r4, r0
   10e10:	468e      	mov	lr, r1
   10e12:	d02d      	beq.n	10e70 <floor+0x88>
   10e14:	ed9f 7b34 	vldr	d7, [pc, #208]	; 10ee8 <floor+0x100>
   10e18:	ed9d 6b00 	vldr	d6, [sp]
   10e1c:	ee36 7b07 	vadd.f64	d7, d6, d7
   10e20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e28:	dd09      	ble.n	10e3e <floor+0x56>
   10e2a:	2900      	cmp	r1, #0
   10e2c:	da04      	bge.n	10e38 <floor+0x50>
   10e2e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   10e32:	fa41 f303 	asr.w	r3, r1, r3
   10e36:	449e      	add	lr, r3
   10e38:	ea2e 0102 	bic.w	r1, lr, r2
   10e3c:	2000      	movs	r0, #0
   10e3e:	460b      	mov	r3, r1
   10e40:	4602      	mov	r2, r0
   10e42:	ec43 2b10 	vmov	d0, r2, r3
   10e46:	b002      	add	sp, #8
   10e48:	bd10      	pop	{r4, pc}
   10e4a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 10ee8 <floor+0x100>
   10e4e:	ee30 7b07 	vadd.f64	d7, d0, d7
   10e52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e5a:	ddf0      	ble.n	10e3e <floor+0x56>
   10e5c:	2900      	cmp	r1, #0
   10e5e:	db28      	blt.n	10eb2 <floor+0xca>
   10e60:	2000      	movs	r0, #0
   10e62:	4601      	mov	r1, r0
   10e64:	e7eb      	b.n	10e3e <floor+0x56>
   10e66:	2b33      	cmp	r3, #51	; 0x33
   10e68:	dd06      	ble.n	10e78 <floor+0x90>
   10e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10e6e:	d01b      	beq.n	10ea8 <floor+0xc0>
   10e70:	ed9d 0b00 	vldr	d0, [sp]
   10e74:	b002      	add	sp, #8
   10e76:	bd10      	pop	{r4, pc}
   10e78:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   10e7c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   10e80:	fa2e f202 	lsr.w	r2, lr, r2
   10e84:	4210      	tst	r0, r2
   10e86:	d0f3      	beq.n	10e70 <floor+0x88>
   10e88:	ed9f 7b17 	vldr	d7, [pc, #92]	; 10ee8 <floor+0x100>
   10e8c:	ed9d 6b00 	vldr	d6, [sp]
   10e90:	ee36 7b07 	vadd.f64	d7, d6, d7
   10e94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10e9c:	ddcf      	ble.n	10e3e <floor+0x56>
   10e9e:	2900      	cmp	r1, #0
   10ea0:	db13      	blt.n	10eca <floor+0xe2>
   10ea2:	ea2c 0002 	bic.w	r0, ip, r2
   10ea6:	e7ca      	b.n	10e3e <floor+0x56>
   10ea8:	ed9d 7b00 	vldr	d7, [sp]
   10eac:	ee37 0b07 	vadd.f64	d0, d7, d7
   10eb0:	e7e0      	b.n	10e74 <floor+0x8c>
   10eb2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10eb6:	4301      	orrs	r1, r0
   10eb8:	4b0e      	ldr	r3, [pc, #56]	; (10ef4 <floor+0x10c>)
   10eba:	2900      	cmp	r1, #0
   10ebc:	f04f 0000 	mov.w	r0, #0
   10ec0:	bf0c      	ite	eq
   10ec2:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   10ec6:	4619      	movne	r1, r3
   10ec8:	e7b9      	b.n	10e3e <floor+0x56>
   10eca:	2b14      	cmp	r3, #20
   10ecc:	d009      	beq.n	10ee2 <floor+0xfa>
   10ece:	2401      	movs	r4, #1
   10ed0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   10ed4:	fa04 f303 	lsl.w	r3, r4, r3
   10ed8:	449c      	add	ip, r3
   10eda:	4560      	cmp	r0, ip
   10edc:	bf88      	it	hi
   10ede:	1909      	addhi	r1, r1, r4
   10ee0:	e7df      	b.n	10ea2 <floor+0xba>
   10ee2:	3101      	adds	r1, #1
   10ee4:	e7dd      	b.n	10ea2 <floor+0xba>
   10ee6:	bf00      	nop
   10ee8:	8800759c 	.word	0x8800759c
   10eec:	7e37e43c 	.word	0x7e37e43c
   10ef0:	000fffff 	.word	0x000fffff
   10ef4:	bff00000 	.word	0xbff00000

00010ef8 <scalbn>:
   10ef8:	ec53 2b10 	vmov	r2, r3, d0
   10efc:	b410      	push	{r4}
   10efe:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10f02:	4619      	mov	r1, r3
   10f04:	bb74      	cbnz	r4, 10f64 <scalbn+0x6c>
   10f06:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   10f0a:	4311      	orrs	r1, r2
   10f0c:	d027      	beq.n	10f5e <scalbn+0x66>
   10f0e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 10fd0 <scalbn+0xd8>
   10f12:	493b      	ldr	r1, [pc, #236]	; (11000 <scalbn+0x108>)
   10f14:	ee20 7b07 	vmul.f64	d7, d0, d7
   10f18:	4288      	cmp	r0, r1
   10f1a:	ec53 2b17 	vmov	r2, r3, d7
   10f1e:	db43      	blt.n	10fa8 <scalbn+0xb0>
   10f20:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10f24:	4619      	mov	r1, r3
   10f26:	3c36      	subs	r4, #54	; 0x36
   10f28:	f24c 3c50 	movw	ip, #50000	; 0xc350
   10f2c:	4560      	cmp	r0, ip
   10f2e:	dc22      	bgt.n	10f76 <scalbn+0x7e>
   10f30:	4420      	add	r0, r4
   10f32:	f240 74fe 	movw	r4, #2046	; 0x7fe
   10f36:	42a0      	cmp	r0, r4
   10f38:	dc1d      	bgt.n	10f76 <scalbn+0x7e>
   10f3a:	2800      	cmp	r0, #0
   10f3c:	dc29      	bgt.n	10f92 <scalbn+0x9a>
   10f3e:	f110 0f35 	cmn.w	r0, #53	; 0x35
   10f42:	db38      	blt.n	10fb6 <scalbn+0xbe>
   10f44:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10f48:	3036      	adds	r0, #54	; 0x36
   10f4a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10f4e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 10fd8 <scalbn+0xe0>
   10f52:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10f56:	ec43 2b10 	vmov	d0, r2, r3
   10f5a:	ee20 0b07 	vmul.f64	d0, d0, d7
   10f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f62:	4770      	bx	lr
   10f64:	f240 7cff 	movw	ip, #2047	; 0x7ff
   10f68:	4564      	cmp	r4, ip
   10f6a:	d1dd      	bne.n	10f28 <scalbn+0x30>
   10f6c:	ee30 0b00 	vadd.f64	d0, d0, d0
   10f70:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f74:	4770      	bx	lr
   10f76:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 10fe0 <scalbn+0xe8>
   10f7a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 10fe8 <scalbn+0xf0>
   10f7e:	eeb0 0b47 	vmov.f64	d0, d7
   10f82:	2b00      	cmp	r3, #0
   10f84:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f88:	fe27 7b05 	vselge.f64	d7, d7, d5
   10f8c:	ee27 0b00 	vmul.f64	d0, d7, d0
   10f90:	4770      	bx	lr
   10f92:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10f96:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10f9a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10f9e:	ec43 2b10 	vmov	d0, r2, r3
   10fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
   10fa6:	4770      	bx	lr
   10fa8:	ed9f 0b11 	vldr	d0, [pc, #68]	; 10ff0 <scalbn+0xf8>
   10fac:	f85d 4b04 	ldr.w	r4, [sp], #4
   10fb0:	ee27 0b00 	vmul.f64	d0, d7, d0
   10fb4:	4770      	bx	lr
   10fb6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 10ff0 <scalbn+0xf8>
   10fba:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 10ff8 <scalbn+0x100>
   10fbe:	eeb0 0b47 	vmov.f64	d0, d7
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	fe27 7b05 	vselge.f64	d7, d7, d5
   10fc8:	ee27 0b00 	vmul.f64	d0, d7, d0
   10fcc:	e7c7      	b.n	10f5e <scalbn+0x66>
   10fce:	bf00      	nop
   10fd0:	00000000 	.word	0x00000000
   10fd4:	43500000 	.word	0x43500000
   10fd8:	00000000 	.word	0x00000000
   10fdc:	3c900000 	.word	0x3c900000
   10fe0:	8800759c 	.word	0x8800759c
   10fe4:	7e37e43c 	.word	0x7e37e43c
   10fe8:	8800759c 	.word	0x8800759c
   10fec:	fe37e43c 	.word	0xfe37e43c
   10ff0:	c2f8f359 	.word	0xc2f8f359
   10ff4:	01a56e1f 	.word	0x01a56e1f
   10ff8:	c2f8f359 	.word	0xc2f8f359
   10ffc:	81a56e1f 	.word	0x81a56e1f
   11000:	ffff3cb0 	.word	0xffff3cb0

00011004 <__aeabi_atexit>:
   11004:	4603      	mov	r3, r0
   11006:	4608      	mov	r0, r1
   11008:	4619      	mov	r1, r3
   1100a:	f000 bcc1 	b.w	11990 <__cxa_atexit>
   1100e:	bf00      	nop

00011010 <__utoa>:
   11010:	b5f0      	push	{r4, r5, r6, r7, lr}
   11012:	4f25      	ldr	r7, [pc, #148]	; (110a8 <__utoa+0x98>)
   11014:	f1a2 0e02 	sub.w	lr, r2, #2
   11018:	4616      	mov	r6, r2
   1101a:	4605      	mov	r5, r0
   1101c:	460c      	mov	r4, r1
   1101e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   11020:	b08b      	sub	sp, #44	; 0x2c
   11022:	46ec      	mov	ip, sp
   11024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11028:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1102a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1102e:	e897 0003 	ldmia.w	r7, {r0, r1}
   11032:	f84c 0b04 	str.w	r0, [ip], #4
   11036:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   1103a:	f88c 1000 	strb.w	r1, [ip]
   1103e:	d82e      	bhi.n	1109e <__utoa+0x8e>
   11040:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   11044:	4670      	mov	r0, lr
   11046:	f04f 0c00 	mov.w	ip, #0
   1104a:	fbb5 f2f6 	udiv	r2, r5, r6
   1104e:	fb06 5312 	mls	r3, r6, r2, r5
   11052:	3328      	adds	r3, #40	; 0x28
   11054:	446b      	add	r3, sp
   11056:	4661      	mov	r1, ip
   11058:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   1105c:	f800 cf01 	strb.w	ip, [r0, #1]!
   11060:	462b      	mov	r3, r5
   11062:	429e      	cmp	r6, r3
   11064:	f101 0c01 	add.w	ip, r1, #1
   11068:	4615      	mov	r5, r2
   1106a:	d9ee      	bls.n	1104a <__utoa+0x3a>
   1106c:	2300      	movs	r3, #0
   1106e:	f804 300c 	strb.w	r3, [r4, ip]
   11072:	b189      	cbz	r1, 11098 <__utoa+0x88>
   11074:	44a4      	add	ip, r4
   11076:	4672      	mov	r2, lr
   11078:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1107c:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   11080:	f88e 5000 	strb.w	r5, [lr]
   11084:	eba4 030e 	sub.w	r3, r4, lr
   11088:	3202      	adds	r2, #2
   1108a:	3b01      	subs	r3, #1
   1108c:	1b12      	subs	r2, r2, r4
   1108e:	440b      	add	r3, r1
   11090:	429a      	cmp	r2, r3
   11092:	f88c 0000 	strb.w	r0, [ip]
   11096:	dbee      	blt.n	11076 <__utoa+0x66>
   11098:	4620      	mov	r0, r4
   1109a:	b00b      	add	sp, #44	; 0x2c
   1109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1109e:	2300      	movs	r3, #0
   110a0:	4618      	mov	r0, r3
   110a2:	7023      	strb	r3, [r4, #0]
   110a4:	b00b      	add	sp, #44	; 0x2c
   110a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110a8:	200029ac 	.word	0x200029ac

000110ac <strncmp>:
   110ac:	2a00      	cmp	r2, #0
   110ae:	d03e      	beq.n	1112e <strncmp+0x82>
   110b0:	ea40 0301 	orr.w	r3, r0, r1
   110b4:	079b      	lsls	r3, r3, #30
   110b6:	b530      	push	{r4, r5, lr}
   110b8:	4684      	mov	ip, r0
   110ba:	d12f      	bne.n	1111c <strncmp+0x70>
   110bc:	2a03      	cmp	r2, #3
   110be:	d92d      	bls.n	1111c <strncmp+0x70>
   110c0:	460b      	mov	r3, r1
   110c2:	e008      	b.n	110d6 <strncmp+0x2a>
   110c4:	3a04      	subs	r2, #4
   110c6:	4684      	mov	ip, r0
   110c8:	4619      	mov	r1, r3
   110ca:	d025      	beq.n	11118 <strncmp+0x6c>
   110cc:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   110d0:	d122      	bne.n	11118 <strncmp+0x6c>
   110d2:	2a03      	cmp	r2, #3
   110d4:	d922      	bls.n	1111c <strncmp+0x70>
   110d6:	6804      	ldr	r4, [r0, #0]
   110d8:	4619      	mov	r1, r3
   110da:	f853 5b04 	ldr.w	r5, [r3], #4
   110de:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   110e2:	42ac      	cmp	r4, r5
   110e4:	4684      	mov	ip, r0
   110e6:	ea2e 0e04 	bic.w	lr, lr, r4
   110ea:	f100 0004 	add.w	r0, r0, #4
   110ee:	d0e9      	beq.n	110c4 <strncmp+0x18>
   110f0:	f89c 0000 	ldrb.w	r0, [ip]
   110f4:	780c      	ldrb	r4, [r1, #0]
   110f6:	42a0      	cmp	r0, r4
   110f8:	d11b      	bne.n	11132 <strncmp+0x86>
   110fa:	46e6      	mov	lr, ip
   110fc:	b168      	cbz	r0, 1111a <strncmp+0x6e>
   110fe:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   11102:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11106:	eba2 030e 	sub.w	r3, r2, lr
   1110a:	42a0      	cmp	r0, r4
   1110c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11110:	d10f      	bne.n	11132 <strncmp+0x86>
   11112:	eb1c 0303 	adds.w	r3, ip, r3
   11116:	d1f1      	bne.n	110fc <strncmp+0x50>
   11118:	2000      	movs	r0, #0
   1111a:	bd30      	pop	{r4, r5, pc}
   1111c:	f89c 0000 	ldrb.w	r0, [ip]
   11120:	780c      	ldrb	r4, [r1, #0]
   11122:	4284      	cmp	r4, r0
   11124:	d105      	bne.n	11132 <strncmp+0x86>
   11126:	2a01      	cmp	r2, #1
   11128:	d0f6      	beq.n	11118 <strncmp+0x6c>
   1112a:	46e6      	mov	lr, ip
   1112c:	e7e6      	b.n	110fc <strncmp+0x50>
   1112e:	4610      	mov	r0, r2
   11130:	4770      	bx	lr
   11132:	1b00      	subs	r0, r0, r4
   11134:	bd30      	pop	{r4, r5, pc}
   11136:	bf00      	nop

00011138 <strncpy>:
   11138:	ea40 0301 	orr.w	r3, r0, r1
   1113c:	079b      	lsls	r3, r3, #30
   1113e:	b530      	push	{r4, r5, lr}
   11140:	d101      	bne.n	11146 <strncpy+0xe>
   11142:	2a03      	cmp	r2, #3
   11144:	d80f      	bhi.n	11166 <strncpy+0x2e>
   11146:	4684      	mov	ip, r0
   11148:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1114c:	e007      	b.n	1115e <strncpy+0x26>
   1114e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   11152:	f803 1b01 	strb.w	r1, [r3], #1
   11156:	1e54      	subs	r4, r2, #1
   11158:	b1c1      	cbz	r1, 1118c <strncpy+0x54>
   1115a:	469c      	mov	ip, r3
   1115c:	4622      	mov	r2, r4
   1115e:	4663      	mov	r3, ip
   11160:	2a00      	cmp	r2, #0
   11162:	d1f4      	bne.n	1114e <strncpy+0x16>
   11164:	bd30      	pop	{r4, r5, pc}
   11166:	460b      	mov	r3, r1
   11168:	4684      	mov	ip, r0
   1116a:	4619      	mov	r1, r3
   1116c:	f853 5b04 	ldr.w	r5, [r3], #4
   11170:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11174:	ea24 0405 	bic.w	r4, r4, r5
   11178:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1117c:	d1e4      	bne.n	11148 <strncpy+0x10>
   1117e:	3a04      	subs	r2, #4
   11180:	2a03      	cmp	r2, #3
   11182:	f84c 5b04 	str.w	r5, [ip], #4
   11186:	4619      	mov	r1, r3
   11188:	d8ef      	bhi.n	1116a <strncpy+0x32>
   1118a:	e7dd      	b.n	11148 <strncpy+0x10>
   1118c:	4494      	add	ip, r2
   1118e:	2c00      	cmp	r4, #0
   11190:	d0e8      	beq.n	11164 <strncpy+0x2c>
   11192:	f803 1b01 	strb.w	r1, [r3], #1
   11196:	4563      	cmp	r3, ip
   11198:	d1fb      	bne.n	11192 <strncpy+0x5a>
   1119a:	bd30      	pop	{r4, r5, pc}

0001119c <itoa>:
   1119c:	1e93      	subs	r3, r2, #2
   1119e:	2b22      	cmp	r3, #34	; 0x22
   111a0:	b510      	push	{r4, lr}
   111a2:	460c      	mov	r4, r1
   111a4:	d80c      	bhi.n	111c0 <itoa+0x24>
   111a6:	2a0a      	cmp	r2, #10
   111a8:	d003      	beq.n	111b2 <itoa+0x16>
   111aa:	f7ff ff31 	bl	11010 <__utoa>
   111ae:	4620      	mov	r0, r4
   111b0:	bd10      	pop	{r4, pc}
   111b2:	2800      	cmp	r0, #0
   111b4:	daf9      	bge.n	111aa <itoa+0xe>
   111b6:	232d      	movs	r3, #45	; 0x2d
   111b8:	f801 3b01 	strb.w	r3, [r1], #1
   111bc:	4240      	negs	r0, r0
   111be:	e7f4      	b.n	111aa <itoa+0xe>
   111c0:	2300      	movs	r3, #0
   111c2:	700b      	strb	r3, [r1, #0]
   111c4:	4618      	mov	r0, r3
   111c6:	bd10      	pop	{r4, pc}

000111c8 <__errno>:
   111c8:	4b01      	ldr	r3, [pc, #4]	; (111d0 <__errno+0x8>)
   111ca:	6818      	ldr	r0, [r3, #0]
   111cc:	4770      	bx	lr
   111ce:	bf00      	nop
   111d0:	20003c3c 	.word	0x20003c3c

000111d4 <malloc>:
   111d4:	4b02      	ldr	r3, [pc, #8]	; (111e0 <malloc+0xc>)
   111d6:	4601      	mov	r1, r0
   111d8:	6818      	ldr	r0, [r3, #0]
   111da:	f000 b80b 	b.w	111f4 <_malloc_r>
   111de:	bf00      	nop
   111e0:	20003c3c 	.word	0x20003c3c

000111e4 <free>:
   111e4:	4b02      	ldr	r3, [pc, #8]	; (111f0 <free+0xc>)
   111e6:	4601      	mov	r1, r0
   111e8:	6818      	ldr	r0, [r3, #0]
   111ea:	f001 bc53 	b.w	12a94 <_free_r>
   111ee:	bf00      	nop
   111f0:	20003c3c 	.word	0x20003c3c

000111f4 <_malloc_r>:
   111f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	f101 060b 	add.w	r6, r1, #11
   111fc:	2e16      	cmp	r6, #22
   111fe:	b083      	sub	sp, #12
   11200:	4604      	mov	r4, r0
   11202:	d824      	bhi.n	1124e <_malloc_r+0x5a>
   11204:	2910      	cmp	r1, #16
   11206:	f200 80ba 	bhi.w	1137e <_malloc_r+0x18a>
   1120a:	f000 fc5d 	bl	11ac8 <__malloc_lock>
   1120e:	2610      	movs	r6, #16
   11210:	2218      	movs	r2, #24
   11212:	2002      	movs	r0, #2
   11214:	4fb5      	ldr	r7, [pc, #724]	; (114ec <_malloc_r+0x2f8>)
   11216:	443a      	add	r2, r7
   11218:	f1a2 0108 	sub.w	r1, r2, #8
   1121c:	6853      	ldr	r3, [r2, #4]
   1121e:	428b      	cmp	r3, r1
   11220:	f000 80ba 	beq.w	11398 <_malloc_r+0x1a4>
   11224:	685a      	ldr	r2, [r3, #4]
   11226:	68d9      	ldr	r1, [r3, #12]
   11228:	f022 0203 	bic.w	r2, r2, #3
   1122c:	441a      	add	r2, r3
   1122e:	689d      	ldr	r5, [r3, #8]
   11230:	60e9      	str	r1, [r5, #12]
   11232:	608d      	str	r5, [r1, #8]
   11234:	6851      	ldr	r1, [r2, #4]
   11236:	f041 0101 	orr.w	r1, r1, #1
   1123a:	4620      	mov	r0, r4
   1123c:	6051      	str	r1, [r2, #4]
   1123e:	f103 0508 	add.w	r5, r3, #8
   11242:	f000 fc47 	bl	11ad4 <__malloc_unlock>
   11246:	4628      	mov	r0, r5
   11248:	b003      	add	sp, #12
   1124a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1124e:	f036 0607 	bics.w	r6, r6, #7
   11252:	f100 8094 	bmi.w	1137e <_malloc_r+0x18a>
   11256:	42b1      	cmp	r1, r6
   11258:	f200 8091 	bhi.w	1137e <_malloc_r+0x18a>
   1125c:	f000 fc34 	bl	11ac8 <__malloc_lock>
   11260:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   11264:	f0c0 819a 	bcc.w	1159c <_malloc_r+0x3a8>
   11268:	0a73      	lsrs	r3, r6, #9
   1126a:	f000 808f 	beq.w	1138c <_malloc_r+0x198>
   1126e:	2b04      	cmp	r3, #4
   11270:	f200 816f 	bhi.w	11552 <_malloc_r+0x35e>
   11274:	09b3      	lsrs	r3, r6, #6
   11276:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1127a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   1127e:	00c3      	lsls	r3, r0, #3
   11280:	4f9a      	ldr	r7, [pc, #616]	; (114ec <_malloc_r+0x2f8>)
   11282:	443b      	add	r3, r7
   11284:	f1a3 0508 	sub.w	r5, r3, #8
   11288:	685b      	ldr	r3, [r3, #4]
   1128a:	429d      	cmp	r5, r3
   1128c:	d106      	bne.n	1129c <_malloc_r+0xa8>
   1128e:	e00c      	b.n	112aa <_malloc_r+0xb6>
   11290:	2900      	cmp	r1, #0
   11292:	f280 8127 	bge.w	114e4 <_malloc_r+0x2f0>
   11296:	68db      	ldr	r3, [r3, #12]
   11298:	429d      	cmp	r5, r3
   1129a:	d006      	beq.n	112aa <_malloc_r+0xb6>
   1129c:	685a      	ldr	r2, [r3, #4]
   1129e:	f022 0203 	bic.w	r2, r2, #3
   112a2:	1b91      	subs	r1, r2, r6
   112a4:	290f      	cmp	r1, #15
   112a6:	ddf3      	ble.n	11290 <_malloc_r+0x9c>
   112a8:	4660      	mov	r0, ip
   112aa:	693d      	ldr	r5, [r7, #16]
   112ac:	f8df c250 	ldr.w	ip, [pc, #592]	; 11500 <_malloc_r+0x30c>
   112b0:	4565      	cmp	r5, ip
   112b2:	d07c      	beq.n	113ae <_malloc_r+0x1ba>
   112b4:	686a      	ldr	r2, [r5, #4]
   112b6:	f022 0203 	bic.w	r2, r2, #3
   112ba:	1b93      	subs	r3, r2, r6
   112bc:	2b0f      	cmp	r3, #15
   112be:	f300 817b 	bgt.w	115b8 <_malloc_r+0x3c4>
   112c2:	2b00      	cmp	r3, #0
   112c4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   112c8:	f280 816c 	bge.w	115a4 <_malloc_r+0x3b0>
   112cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   112d0:	f080 811a 	bcs.w	11508 <_malloc_r+0x314>
   112d4:	08d3      	lsrs	r3, r2, #3
   112d6:	6879      	ldr	r1, [r7, #4]
   112d8:	3301      	adds	r3, #1
   112da:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   112de:	2201      	movs	r2, #1
   112e0:	fa02 f20e 	lsl.w	r2, r2, lr
   112e4:	430a      	orrs	r2, r1
   112e6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   112ea:	f8c5 e008 	str.w	lr, [r5, #8]
   112ee:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   112f2:	3908      	subs	r1, #8
   112f4:	60e9      	str	r1, [r5, #12]
   112f6:	607a      	str	r2, [r7, #4]
   112f8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   112fc:	f8ce 500c 	str.w	r5, [lr, #12]
   11300:	1083      	asrs	r3, r0, #2
   11302:	2101      	movs	r1, #1
   11304:	4099      	lsls	r1, r3
   11306:	4291      	cmp	r1, r2
   11308:	d857      	bhi.n	113ba <_malloc_r+0x1c6>
   1130a:	4211      	tst	r1, r2
   1130c:	d106      	bne.n	1131c <_malloc_r+0x128>
   1130e:	f020 0003 	bic.w	r0, r0, #3
   11312:	0049      	lsls	r1, r1, #1
   11314:	4211      	tst	r1, r2
   11316:	f100 0004 	add.w	r0, r0, #4
   1131a:	d0fa      	beq.n	11312 <_malloc_r+0x11e>
   1131c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   11320:	464d      	mov	r5, r9
   11322:	4686      	mov	lr, r0
   11324:	f8d5 800c 	ldr.w	r8, [r5, #12]
   11328:	4545      	cmp	r5, r8
   1132a:	d108      	bne.n	1133e <_malloc_r+0x14a>
   1132c:	e11d      	b.n	1156a <_malloc_r+0x376>
   1132e:	2b00      	cmp	r3, #0
   11330:	f280 8124 	bge.w	1157c <_malloc_r+0x388>
   11334:	f8d8 800c 	ldr.w	r8, [r8, #12]
   11338:	4545      	cmp	r5, r8
   1133a:	f000 8116 	beq.w	1156a <_malloc_r+0x376>
   1133e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   11342:	f022 0203 	bic.w	r2, r2, #3
   11346:	1b93      	subs	r3, r2, r6
   11348:	2b0f      	cmp	r3, #15
   1134a:	ddf0      	ble.n	1132e <_malloc_r+0x13a>
   1134c:	4620      	mov	r0, r4
   1134e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   11352:	eb08 0106 	add.w	r1, r8, r6
   11356:	f046 0601 	orr.w	r6, r6, #1
   1135a:	f8c8 6004 	str.w	r6, [r8, #4]
   1135e:	60ec      	str	r4, [r5, #12]
   11360:	60a5      	str	r5, [r4, #8]
   11362:	f043 0401 	orr.w	r4, r3, #1
   11366:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1136a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1136e:	604c      	str	r4, [r1, #4]
   11370:	f848 3002 	str.w	r3, [r8, r2]
   11374:	f000 fbae 	bl	11ad4 <__malloc_unlock>
   11378:	f108 0508 	add.w	r5, r8, #8
   1137c:	e002      	b.n	11384 <_malloc_r+0x190>
   1137e:	230c      	movs	r3, #12
   11380:	6023      	str	r3, [r4, #0]
   11382:	2500      	movs	r5, #0
   11384:	4628      	mov	r0, r5
   11386:	b003      	add	sp, #12
   11388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1138c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11390:	2040      	movs	r0, #64	; 0x40
   11392:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   11396:	e773      	b.n	11280 <_malloc_r+0x8c>
   11398:	68d3      	ldr	r3, [r2, #12]
   1139a:	429a      	cmp	r2, r3
   1139c:	bf08      	it	eq
   1139e:	3002      	addeq	r0, #2
   113a0:	f47f af40 	bne.w	11224 <_malloc_r+0x30>
   113a4:	693d      	ldr	r5, [r7, #16]
   113a6:	f8df c158 	ldr.w	ip, [pc, #344]	; 11500 <_malloc_r+0x30c>
   113aa:	4565      	cmp	r5, ip
   113ac:	d182      	bne.n	112b4 <_malloc_r+0xc0>
   113ae:	687a      	ldr	r2, [r7, #4]
   113b0:	1083      	asrs	r3, r0, #2
   113b2:	2101      	movs	r1, #1
   113b4:	4099      	lsls	r1, r3
   113b6:	4291      	cmp	r1, r2
   113b8:	d9a7      	bls.n	1130a <_malloc_r+0x116>
   113ba:	68bd      	ldr	r5, [r7, #8]
   113bc:	686b      	ldr	r3, [r5, #4]
   113be:	f023 0903 	bic.w	r9, r3, #3
   113c2:	454e      	cmp	r6, r9
   113c4:	d803      	bhi.n	113ce <_malloc_r+0x1da>
   113c6:	eba9 0306 	sub.w	r3, r9, r6
   113ca:	2b0f      	cmp	r3, #15
   113cc:	dc7a      	bgt.n	114c4 <_malloc_r+0x2d0>
   113ce:	f8df b134 	ldr.w	fp, [pc, #308]	; 11504 <_malloc_r+0x310>
   113d2:	4b47      	ldr	r3, [pc, #284]	; (114f0 <_malloc_r+0x2fc>)
   113d4:	f8db 2000 	ldr.w	r2, [fp]
   113d8:	681b      	ldr	r3, [r3, #0]
   113da:	3201      	adds	r2, #1
   113dc:	4433      	add	r3, r6
   113de:	eb05 0a09 	add.w	sl, r5, r9
   113e2:	f000 8133 	beq.w	1164c <_malloc_r+0x458>
   113e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   113ea:	330f      	adds	r3, #15
   113ec:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   113f0:	f028 080f 	bic.w	r8, r8, #15
   113f4:	4641      	mov	r1, r8
   113f6:	4620      	mov	r0, r4
   113f8:	f001 fcba 	bl	12d70 <_sbrk_r>
   113fc:	1c41      	adds	r1, r0, #1
   113fe:	4602      	mov	r2, r0
   11400:	f000 80f3 	beq.w	115ea <_malloc_r+0x3f6>
   11404:	4582      	cmp	sl, r0
   11406:	f200 80ee 	bhi.w	115e6 <_malloc_r+0x3f2>
   1140a:	4b3a      	ldr	r3, [pc, #232]	; (114f4 <_malloc_r+0x300>)
   1140c:	6819      	ldr	r1, [r3, #0]
   1140e:	4441      	add	r1, r8
   11410:	6019      	str	r1, [r3, #0]
   11412:	4608      	mov	r0, r1
   11414:	f000 814e 	beq.w	116b4 <_malloc_r+0x4c0>
   11418:	f8db 1000 	ldr.w	r1, [fp]
   1141c:	9301      	str	r3, [sp, #4]
   1141e:	3101      	adds	r1, #1
   11420:	bf1b      	ittet	ne
   11422:	eba2 010a 	subne.w	r1, r2, sl
   11426:	1809      	addne	r1, r1, r0
   11428:	f8cb 2000 	streq.w	r2, [fp]
   1142c:	6019      	strne	r1, [r3, #0]
   1142e:	f012 0b07 	ands.w	fp, r2, #7
   11432:	f000 8117 	beq.w	11664 <_malloc_r+0x470>
   11436:	f1cb 0108 	rsb	r1, fp, #8
   1143a:	440a      	add	r2, r1
   1143c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   11440:	4490      	add	r8, r2
   11442:	3108      	adds	r1, #8
   11444:	eba1 0108 	sub.w	r1, r1, r8
   11448:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1144c:	4651      	mov	r1, sl
   1144e:	4620      	mov	r0, r4
   11450:	9200      	str	r2, [sp, #0]
   11452:	f001 fc8d 	bl	12d70 <_sbrk_r>
   11456:	1c42      	adds	r2, r0, #1
   11458:	e9dd 2300 	ldrd	r2, r3, [sp]
   1145c:	f000 814f 	beq.w	116fe <_malloc_r+0x50a>
   11460:	1a80      	subs	r0, r0, r2
   11462:	eb00 080a 	add.w	r8, r0, sl
   11466:	6819      	ldr	r1, [r3, #0]
   11468:	60ba      	str	r2, [r7, #8]
   1146a:	f048 0001 	orr.w	r0, r8, #1
   1146e:	4451      	add	r1, sl
   11470:	42bd      	cmp	r5, r7
   11472:	6050      	str	r0, [r2, #4]
   11474:	6019      	str	r1, [r3, #0]
   11476:	f000 8129 	beq.w	116cc <_malloc_r+0x4d8>
   1147a:	f1b9 0f0f 	cmp.w	r9, #15
   1147e:	f240 8127 	bls.w	116d0 <_malloc_r+0x4dc>
   11482:	6868      	ldr	r0, [r5, #4]
   11484:	f1a9 0c0c 	sub.w	ip, r9, #12
   11488:	f02c 0c07 	bic.w	ip, ip, #7
   1148c:	f000 0001 	and.w	r0, r0, #1
   11490:	ea40 000c 	orr.w	r0, r0, ip
   11494:	6068      	str	r0, [r5, #4]
   11496:	f04f 0e05 	mov.w	lr, #5
   1149a:	eb05 000c 	add.w	r0, r5, ip
   1149e:	f1bc 0f0f 	cmp.w	ip, #15
   114a2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   114a6:	f200 8132 	bhi.w	1170e <_malloc_r+0x51a>
   114aa:	6850      	ldr	r0, [r2, #4]
   114ac:	4615      	mov	r5, r2
   114ae:	4b12      	ldr	r3, [pc, #72]	; (114f8 <_malloc_r+0x304>)
   114b0:	681a      	ldr	r2, [r3, #0]
   114b2:	428a      	cmp	r2, r1
   114b4:	bf38      	it	cc
   114b6:	6019      	strcc	r1, [r3, #0]
   114b8:	4b10      	ldr	r3, [pc, #64]	; (114fc <_malloc_r+0x308>)
   114ba:	681a      	ldr	r2, [r3, #0]
   114bc:	428a      	cmp	r2, r1
   114be:	bf38      	it	cc
   114c0:	6019      	strcc	r1, [r3, #0]
   114c2:	e094      	b.n	115ee <_malloc_r+0x3fa>
   114c4:	19aa      	adds	r2, r5, r6
   114c6:	f043 0301 	orr.w	r3, r3, #1
   114ca:	f046 0601 	orr.w	r6, r6, #1
   114ce:	606e      	str	r6, [r5, #4]
   114d0:	4620      	mov	r0, r4
   114d2:	60ba      	str	r2, [r7, #8]
   114d4:	6053      	str	r3, [r2, #4]
   114d6:	f000 fafd 	bl	11ad4 <__malloc_unlock>
   114da:	3508      	adds	r5, #8
   114dc:	4628      	mov	r0, r5
   114de:	b003      	add	sp, #12
   114e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114e4:	68d9      	ldr	r1, [r3, #12]
   114e6:	441a      	add	r2, r3
   114e8:	e6a1      	b.n	1122e <_malloc_r+0x3a>
   114ea:	bf00      	nop
   114ec:	20003820 	.word	0x20003820
   114f0:	2000530c 	.word	0x2000530c
   114f4:	200052dc 	.word	0x200052dc
   114f8:	20005304 	.word	0x20005304
   114fc:	20005308 	.word	0x20005308
   11500:	20003828 	.word	0x20003828
   11504:	20003c28 	.word	0x20003c28
   11508:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   1150c:	ea4f 2352 	mov.w	r3, r2, lsr #9
   11510:	d363      	bcc.n	115da <_malloc_r+0x3e6>
   11512:	2b14      	cmp	r3, #20
   11514:	f200 80b7 	bhi.w	11686 <_malloc_r+0x492>
   11518:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   1151c:	00c9      	lsls	r1, r1, #3
   1151e:	335b      	adds	r3, #91	; 0x5b
   11520:	eb07 0e01 	add.w	lr, r7, r1
   11524:	5879      	ldr	r1, [r7, r1]
   11526:	f1ae 0e08 	sub.w	lr, lr, #8
   1152a:	458e      	cmp	lr, r1
   1152c:	f000 8091 	beq.w	11652 <_malloc_r+0x45e>
   11530:	684b      	ldr	r3, [r1, #4]
   11532:	f023 0303 	bic.w	r3, r3, #3
   11536:	4293      	cmp	r3, r2
   11538:	d902      	bls.n	11540 <_malloc_r+0x34c>
   1153a:	6889      	ldr	r1, [r1, #8]
   1153c:	458e      	cmp	lr, r1
   1153e:	d1f7      	bne.n	11530 <_malloc_r+0x33c>
   11540:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   11544:	687a      	ldr	r2, [r7, #4]
   11546:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   1154a:	f8ce 5008 	str.w	r5, [lr, #8]
   1154e:	60cd      	str	r5, [r1, #12]
   11550:	e6d6      	b.n	11300 <_malloc_r+0x10c>
   11552:	2b14      	cmp	r3, #20
   11554:	d959      	bls.n	1160a <_malloc_r+0x416>
   11556:	2b54      	cmp	r3, #84	; 0x54
   11558:	f200 809d 	bhi.w	11696 <_malloc_r+0x4a2>
   1155c:	0b33      	lsrs	r3, r6, #12
   1155e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   11562:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   11566:	00c3      	lsls	r3, r0, #3
   11568:	e68a      	b.n	11280 <_malloc_r+0x8c>
   1156a:	f10e 0e01 	add.w	lr, lr, #1
   1156e:	f01e 0f03 	tst.w	lr, #3
   11572:	f105 0508 	add.w	r5, r5, #8
   11576:	f47f aed5 	bne.w	11324 <_malloc_r+0x130>
   1157a:	e051      	b.n	11620 <_malloc_r+0x42c>
   1157c:	4442      	add	r2, r8
   1157e:	4645      	mov	r5, r8
   11580:	6853      	ldr	r3, [r2, #4]
   11582:	f8d8 100c 	ldr.w	r1, [r8, #12]
   11586:	f043 0301 	orr.w	r3, r3, #1
   1158a:	6053      	str	r3, [r2, #4]
   1158c:	f855 3f08 	ldr.w	r3, [r5, #8]!
   11590:	4620      	mov	r0, r4
   11592:	60d9      	str	r1, [r3, #12]
   11594:	608b      	str	r3, [r1, #8]
   11596:	f000 fa9d 	bl	11ad4 <__malloc_unlock>
   1159a:	e6f3      	b.n	11384 <_malloc_r+0x190>
   1159c:	08f0      	lsrs	r0, r6, #3
   1159e:	f106 0208 	add.w	r2, r6, #8
   115a2:	e637      	b.n	11214 <_malloc_r+0x20>
   115a4:	442a      	add	r2, r5
   115a6:	4620      	mov	r0, r4
   115a8:	6853      	ldr	r3, [r2, #4]
   115aa:	f043 0301 	orr.w	r3, r3, #1
   115ae:	6053      	str	r3, [r2, #4]
   115b0:	3508      	adds	r5, #8
   115b2:	f000 fa8f 	bl	11ad4 <__malloc_unlock>
   115b6:	e6e5      	b.n	11384 <_malloc_r+0x190>
   115b8:	19a9      	adds	r1, r5, r6
   115ba:	4620      	mov	r0, r4
   115bc:	f046 0601 	orr.w	r6, r6, #1
   115c0:	f043 0401 	orr.w	r4, r3, #1
   115c4:	606e      	str	r6, [r5, #4]
   115c6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   115ca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   115ce:	604c      	str	r4, [r1, #4]
   115d0:	50ab      	str	r3, [r5, r2]
   115d2:	f000 fa7f 	bl	11ad4 <__malloc_unlock>
   115d6:	3508      	adds	r5, #8
   115d8:	e6d4      	b.n	11384 <_malloc_r+0x190>
   115da:	0993      	lsrs	r3, r2, #6
   115dc:	f103 0139 	add.w	r1, r3, #57	; 0x39
   115e0:	00c9      	lsls	r1, r1, #3
   115e2:	3338      	adds	r3, #56	; 0x38
   115e4:	e79c      	b.n	11520 <_malloc_r+0x32c>
   115e6:	42bd      	cmp	r5, r7
   115e8:	d05f      	beq.n	116aa <_malloc_r+0x4b6>
   115ea:	68bd      	ldr	r5, [r7, #8]
   115ec:	6868      	ldr	r0, [r5, #4]
   115ee:	f020 0803 	bic.w	r8, r0, #3
   115f2:	4546      	cmp	r6, r8
   115f4:	eba8 0306 	sub.w	r3, r8, r6
   115f8:	d802      	bhi.n	11600 <_malloc_r+0x40c>
   115fa:	2b0f      	cmp	r3, #15
   115fc:	f73f af62 	bgt.w	114c4 <_malloc_r+0x2d0>
   11600:	4620      	mov	r0, r4
   11602:	f000 fa67 	bl	11ad4 <__malloc_unlock>
   11606:	2500      	movs	r5, #0
   11608:	e6bc      	b.n	11384 <_malloc_r+0x190>
   1160a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1160e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   11612:	00c3      	lsls	r3, r0, #3
   11614:	e634      	b.n	11280 <_malloc_r+0x8c>
   11616:	f859 3908 	ldr.w	r3, [r9], #-8
   1161a:	454b      	cmp	r3, r9
   1161c:	f040 8096 	bne.w	1174c <_malloc_r+0x558>
   11620:	f010 0f03 	tst.w	r0, #3
   11624:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   11628:	d1f5      	bne.n	11616 <_malloc_r+0x422>
   1162a:	687b      	ldr	r3, [r7, #4]
   1162c:	ea23 0301 	bic.w	r3, r3, r1
   11630:	607b      	str	r3, [r7, #4]
   11632:	0049      	lsls	r1, r1, #1
   11634:	4299      	cmp	r1, r3
   11636:	f63f aec0 	bhi.w	113ba <_malloc_r+0x1c6>
   1163a:	b919      	cbnz	r1, 11644 <_malloc_r+0x450>
   1163c:	e6bd      	b.n	113ba <_malloc_r+0x1c6>
   1163e:	0049      	lsls	r1, r1, #1
   11640:	f10e 0e04 	add.w	lr, lr, #4
   11644:	4219      	tst	r1, r3
   11646:	d0fa      	beq.n	1163e <_malloc_r+0x44a>
   11648:	4670      	mov	r0, lr
   1164a:	e667      	b.n	1131c <_malloc_r+0x128>
   1164c:	f103 0810 	add.w	r8, r3, #16
   11650:	e6d0      	b.n	113f4 <_malloc_r+0x200>
   11652:	109a      	asrs	r2, r3, #2
   11654:	f04f 0801 	mov.w	r8, #1
   11658:	687b      	ldr	r3, [r7, #4]
   1165a:	fa08 f202 	lsl.w	r2, r8, r2
   1165e:	431a      	orrs	r2, r3
   11660:	607a      	str	r2, [r7, #4]
   11662:	e770      	b.n	11546 <_malloc_r+0x352>
   11664:	eb02 0108 	add.w	r1, r2, r8
   11668:	4249      	negs	r1, r1
   1166a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1166e:	4651      	mov	r1, sl
   11670:	4620      	mov	r0, r4
   11672:	9200      	str	r2, [sp, #0]
   11674:	f001 fb7c 	bl	12d70 <_sbrk_r>
   11678:	1c43      	adds	r3, r0, #1
   1167a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1167e:	f47f aeef 	bne.w	11460 <_malloc_r+0x26c>
   11682:	46da      	mov	sl, fp
   11684:	e6ef      	b.n	11466 <_malloc_r+0x272>
   11686:	2b54      	cmp	r3, #84	; 0x54
   11688:	d825      	bhi.n	116d6 <_malloc_r+0x4e2>
   1168a:	0b13      	lsrs	r3, r2, #12
   1168c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   11690:	00c9      	lsls	r1, r1, #3
   11692:	336e      	adds	r3, #110	; 0x6e
   11694:	e744      	b.n	11520 <_malloc_r+0x32c>
   11696:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1169a:	d825      	bhi.n	116e8 <_malloc_r+0x4f4>
   1169c:	0bf3      	lsrs	r3, r6, #15
   1169e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   116a2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   116a6:	00c3      	lsls	r3, r0, #3
   116a8:	e5ea      	b.n	11280 <_malloc_r+0x8c>
   116aa:	4b29      	ldr	r3, [pc, #164]	; (11750 <_malloc_r+0x55c>)
   116ac:	6818      	ldr	r0, [r3, #0]
   116ae:	4440      	add	r0, r8
   116b0:	6018      	str	r0, [r3, #0]
   116b2:	e6b1      	b.n	11418 <_malloc_r+0x224>
   116b4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   116b8:	f1bc 0f00 	cmp.w	ip, #0
   116bc:	f47f aeac 	bne.w	11418 <_malloc_r+0x224>
   116c0:	68bd      	ldr	r5, [r7, #8]
   116c2:	44c8      	add	r8, r9
   116c4:	f048 0001 	orr.w	r0, r8, #1
   116c8:	6068      	str	r0, [r5, #4]
   116ca:	e6f0      	b.n	114ae <_malloc_r+0x2ba>
   116cc:	4615      	mov	r5, r2
   116ce:	e6ee      	b.n	114ae <_malloc_r+0x2ba>
   116d0:	2301      	movs	r3, #1
   116d2:	6053      	str	r3, [r2, #4]
   116d4:	e794      	b.n	11600 <_malloc_r+0x40c>
   116d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   116da:	d823      	bhi.n	11724 <_malloc_r+0x530>
   116dc:	0bd3      	lsrs	r3, r2, #15
   116de:	f103 0178 	add.w	r1, r3, #120	; 0x78
   116e2:	00c9      	lsls	r1, r1, #3
   116e4:	3377      	adds	r3, #119	; 0x77
   116e6:	e71b      	b.n	11520 <_malloc_r+0x32c>
   116e8:	f240 5254 	movw	r2, #1364	; 0x554
   116ec:	4293      	cmp	r3, r2
   116ee:	d823      	bhi.n	11738 <_malloc_r+0x544>
   116f0:	0cb3      	lsrs	r3, r6, #18
   116f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   116f6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   116fa:	00c3      	lsls	r3, r0, #3
   116fc:	e5c0      	b.n	11280 <_malloc_r+0x8c>
   116fe:	f1ab 0b08 	sub.w	fp, fp, #8
   11702:	44d8      	add	r8, fp
   11704:	eba8 0802 	sub.w	r8, r8, r2
   11708:	f04f 0a00 	mov.w	sl, #0
   1170c:	e6ab      	b.n	11466 <_malloc_r+0x272>
   1170e:	f105 0108 	add.w	r1, r5, #8
   11712:	4620      	mov	r0, r4
   11714:	9300      	str	r3, [sp, #0]
   11716:	f001 f9bd 	bl	12a94 <_free_r>
   1171a:	68bd      	ldr	r5, [r7, #8]
   1171c:	9b00      	ldr	r3, [sp, #0]
   1171e:	6868      	ldr	r0, [r5, #4]
   11720:	6819      	ldr	r1, [r3, #0]
   11722:	e6c4      	b.n	114ae <_malloc_r+0x2ba>
   11724:	f240 5154 	movw	r1, #1364	; 0x554
   11728:	428b      	cmp	r3, r1
   1172a:	d80b      	bhi.n	11744 <_malloc_r+0x550>
   1172c:	0c93      	lsrs	r3, r2, #18
   1172e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   11732:	00c9      	lsls	r1, r1, #3
   11734:	337c      	adds	r3, #124	; 0x7c
   11736:	e6f3      	b.n	11520 <_malloc_r+0x32c>
   11738:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1173c:	207f      	movs	r0, #127	; 0x7f
   1173e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   11742:	e59d      	b.n	11280 <_malloc_r+0x8c>
   11744:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   11748:	237e      	movs	r3, #126	; 0x7e
   1174a:	e6e9      	b.n	11520 <_malloc_r+0x32c>
   1174c:	687b      	ldr	r3, [r7, #4]
   1174e:	e770      	b.n	11632 <_malloc_r+0x43e>
   11750:	200052dc 	.word	0x200052dc

00011754 <memcmp>:
   11754:	2a03      	cmp	r2, #3
   11756:	b570      	push	{r4, r5, r6, lr}
   11758:	d914      	bls.n	11784 <memcmp+0x30>
   1175a:	ea40 0301 	orr.w	r3, r0, r1
   1175e:	079b      	lsls	r3, r3, #30
   11760:	d122      	bne.n	117a8 <memcmp+0x54>
   11762:	4604      	mov	r4, r0
   11764:	460b      	mov	r3, r1
   11766:	4619      	mov	r1, r3
   11768:	4620      	mov	r0, r4
   1176a:	680e      	ldr	r6, [r1, #0]
   1176c:	6805      	ldr	r5, [r0, #0]
   1176e:	42b5      	cmp	r5, r6
   11770:	f104 0404 	add.w	r4, r4, #4
   11774:	f103 0304 	add.w	r3, r3, #4
   11778:	d116      	bne.n	117a8 <memcmp+0x54>
   1177a:	3a04      	subs	r2, #4
   1177c:	2a03      	cmp	r2, #3
   1177e:	4620      	mov	r0, r4
   11780:	4619      	mov	r1, r3
   11782:	d8f0      	bhi.n	11766 <memcmp+0x12>
   11784:	1e54      	subs	r4, r2, #1
   11786:	b19a      	cbz	r2, 117b0 <memcmp+0x5c>
   11788:	1e42      	subs	r2, r0, #1
   1178a:	3901      	subs	r1, #1
   1178c:	e001      	b.n	11792 <memcmp+0x3e>
   1178e:	18c3      	adds	r3, r0, r3
   11790:	d00c      	beq.n	117ac <memcmp+0x58>
   11792:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   11796:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1179a:	45e6      	cmp	lr, ip
   1179c:	eba4 0302 	sub.w	r3, r4, r2
   117a0:	d0f5      	beq.n	1178e <memcmp+0x3a>
   117a2:	ebae 000c 	sub.w	r0, lr, ip
   117a6:	bd70      	pop	{r4, r5, r6, pc}
   117a8:	1e54      	subs	r4, r2, #1
   117aa:	e7ed      	b.n	11788 <memcmp+0x34>
   117ac:	4618      	mov	r0, r3
   117ae:	bd70      	pop	{r4, r5, r6, pc}
   117b0:	4610      	mov	r0, r2
   117b2:	bd70      	pop	{r4, r5, r6, pc}

000117b4 <memmove>:
   117b4:	4288      	cmp	r0, r1
   117b6:	d90d      	bls.n	117d4 <memmove+0x20>
   117b8:	188b      	adds	r3, r1, r2
   117ba:	4283      	cmp	r3, r0
   117bc:	d90a      	bls.n	117d4 <memmove+0x20>
   117be:	eb00 0c02 	add.w	ip, r0, r2
   117c2:	b1ba      	cbz	r2, 117f4 <memmove+0x40>
   117c4:	4662      	mov	r2, ip
   117c6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   117ca:	f802 cd01 	strb.w	ip, [r2, #-1]!
   117ce:	4299      	cmp	r1, r3
   117d0:	d1f9      	bne.n	117c6 <memmove+0x12>
   117d2:	4770      	bx	lr
   117d4:	2a0f      	cmp	r2, #15
   117d6:	d80e      	bhi.n	117f6 <memmove+0x42>
   117d8:	4603      	mov	r3, r0
   117da:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   117de:	b14a      	cbz	r2, 117f4 <memmove+0x40>
   117e0:	f10c 0c01 	add.w	ip, ip, #1
   117e4:	3b01      	subs	r3, #1
   117e6:	448c      	add	ip, r1
   117e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   117ec:	f803 2f01 	strb.w	r2, [r3, #1]!
   117f0:	4561      	cmp	r1, ip
   117f2:	d1f9      	bne.n	117e8 <memmove+0x34>
   117f4:	4770      	bx	lr
   117f6:	ea40 0301 	orr.w	r3, r0, r1
   117fa:	079b      	lsls	r3, r3, #30
   117fc:	d150      	bne.n	118a0 <memmove+0xec>
   117fe:	f1a2 0310 	sub.w	r3, r2, #16
   11802:	b570      	push	{r4, r5, r6, lr}
   11804:	f101 0c20 	add.w	ip, r1, #32
   11808:	f023 050f 	bic.w	r5, r3, #15
   1180c:	f101 0e10 	add.w	lr, r1, #16
   11810:	f100 0410 	add.w	r4, r0, #16
   11814:	44ac      	add	ip, r5
   11816:	091b      	lsrs	r3, r3, #4
   11818:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   1181c:	f844 5c10 	str.w	r5, [r4, #-16]
   11820:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   11824:	f844 5c0c 	str.w	r5, [r4, #-12]
   11828:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   1182c:	f844 5c08 	str.w	r5, [r4, #-8]
   11830:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   11834:	f844 5c04 	str.w	r5, [r4, #-4]
   11838:	f10e 0e10 	add.w	lr, lr, #16
   1183c:	45e6      	cmp	lr, ip
   1183e:	f104 0410 	add.w	r4, r4, #16
   11842:	d1e9      	bne.n	11818 <memmove+0x64>
   11844:	3301      	adds	r3, #1
   11846:	f012 0f0c 	tst.w	r2, #12
   1184a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1184e:	f002 040f 	and.w	r4, r2, #15
   11852:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   11856:	d027      	beq.n	118a8 <memmove+0xf4>
   11858:	3c04      	subs	r4, #4
   1185a:	f024 0603 	bic.w	r6, r4, #3
   1185e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   11862:	441e      	add	r6, r3
   11864:	1f1c      	subs	r4, r3, #4
   11866:	468e      	mov	lr, r1
   11868:	f85e 5b04 	ldr.w	r5, [lr], #4
   1186c:	f844 5f04 	str.w	r5, [r4, #4]!
   11870:	42b4      	cmp	r4, r6
   11872:	d1f9      	bne.n	11868 <memmove+0xb4>
   11874:	f10c 0401 	add.w	r4, ip, #1
   11878:	f002 0203 	and.w	r2, r2, #3
   1187c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11880:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   11884:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11888:	b14a      	cbz	r2, 1189e <memmove+0xea>
   1188a:	f10c 0c01 	add.w	ip, ip, #1
   1188e:	3b01      	subs	r3, #1
   11890:	448c      	add	ip, r1
   11892:	f811 2b01 	ldrb.w	r2, [r1], #1
   11896:	f803 2f01 	strb.w	r2, [r3, #1]!
   1189a:	4561      	cmp	r1, ip
   1189c:	d1f9      	bne.n	11892 <memmove+0xde>
   1189e:	bd70      	pop	{r4, r5, r6, pc}
   118a0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   118a4:	4603      	mov	r3, r0
   118a6:	e79b      	b.n	117e0 <memmove+0x2c>
   118a8:	4622      	mov	r2, r4
   118aa:	e7eb      	b.n	11884 <memmove+0xd0>

000118ac <__assert_func>:
   118ac:	b500      	push	{lr}
   118ae:	4c0b      	ldr	r4, [pc, #44]	; (118dc <__assert_func+0x30>)
   118b0:	6825      	ldr	r5, [r4, #0]
   118b2:	4614      	mov	r4, r2
   118b4:	68ee      	ldr	r6, [r5, #12]
   118b6:	461a      	mov	r2, r3
   118b8:	b085      	sub	sp, #20
   118ba:	4603      	mov	r3, r0
   118bc:	460d      	mov	r5, r1
   118be:	b14c      	cbz	r4, 118d4 <__assert_func+0x28>
   118c0:	4907      	ldr	r1, [pc, #28]	; (118e0 <__assert_func+0x34>)
   118c2:	9500      	str	r5, [sp, #0]
   118c4:	e9cd 1401 	strd	r1, r4, [sp, #4]
   118c8:	4630      	mov	r0, r6
   118ca:	4906      	ldr	r1, [pc, #24]	; (118e4 <__assert_func+0x38>)
   118cc:	f001 f9e8 	bl	12ca0 <fiprintf>
   118d0:	f7fc fd5d 	bl	e38e <abort>
   118d4:	4904      	ldr	r1, [pc, #16]	; (118e8 <__assert_func+0x3c>)
   118d6:	460c      	mov	r4, r1
   118d8:	e7f3      	b.n	118c2 <__assert_func+0x16>
   118da:	bf00      	nop
   118dc:	20003c3c 	.word	0x20003c3c
   118e0:	200028fc 	.word	0x200028fc
   118e4:	2000290c 	.word	0x2000290c
   118e8:	20001f98 	.word	0x20001f98

000118ec <memset>:
   118ec:	0783      	lsls	r3, r0, #30
   118ee:	b530      	push	{r4, r5, lr}
   118f0:	d048      	beq.n	11984 <memset+0x98>
   118f2:	1e54      	subs	r4, r2, #1
   118f4:	2a00      	cmp	r2, #0
   118f6:	d03f      	beq.n	11978 <memset+0x8c>
   118f8:	b2ca      	uxtb	r2, r1
   118fa:	4603      	mov	r3, r0
   118fc:	e001      	b.n	11902 <memset+0x16>
   118fe:	3c01      	subs	r4, #1
   11900:	d33a      	bcc.n	11978 <memset+0x8c>
   11902:	f803 2b01 	strb.w	r2, [r3], #1
   11906:	079d      	lsls	r5, r3, #30
   11908:	d1f9      	bne.n	118fe <memset+0x12>
   1190a:	2c03      	cmp	r4, #3
   1190c:	d92d      	bls.n	1196a <memset+0x7e>
   1190e:	b2cd      	uxtb	r5, r1
   11910:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11914:	2c0f      	cmp	r4, #15
   11916:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1191a:	d936      	bls.n	1198a <memset+0x9e>
   1191c:	f1a4 0210 	sub.w	r2, r4, #16
   11920:	f022 0c0f 	bic.w	ip, r2, #15
   11924:	f103 0e20 	add.w	lr, r3, #32
   11928:	44e6      	add	lr, ip
   1192a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   1192e:	f103 0210 	add.w	r2, r3, #16
   11932:	e942 5504 	strd	r5, r5, [r2, #-16]
   11936:	e942 5502 	strd	r5, r5, [r2, #-8]
   1193a:	3210      	adds	r2, #16
   1193c:	4572      	cmp	r2, lr
   1193e:	d1f8      	bne.n	11932 <memset+0x46>
   11940:	f10c 0201 	add.w	r2, ip, #1
   11944:	f014 0f0c 	tst.w	r4, #12
   11948:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1194c:	f004 0c0f 	and.w	ip, r4, #15
   11950:	d013      	beq.n	1197a <memset+0x8e>
   11952:	f1ac 0304 	sub.w	r3, ip, #4
   11956:	f023 0303 	bic.w	r3, r3, #3
   1195a:	3304      	adds	r3, #4
   1195c:	4413      	add	r3, r2
   1195e:	f842 5b04 	str.w	r5, [r2], #4
   11962:	4293      	cmp	r3, r2
   11964:	d1fb      	bne.n	1195e <memset+0x72>
   11966:	f00c 0403 	and.w	r4, ip, #3
   1196a:	b12c      	cbz	r4, 11978 <memset+0x8c>
   1196c:	b2c9      	uxtb	r1, r1
   1196e:	441c      	add	r4, r3
   11970:	f803 1b01 	strb.w	r1, [r3], #1
   11974:	429c      	cmp	r4, r3
   11976:	d1fb      	bne.n	11970 <memset+0x84>
   11978:	bd30      	pop	{r4, r5, pc}
   1197a:	4664      	mov	r4, ip
   1197c:	4613      	mov	r3, r2
   1197e:	2c00      	cmp	r4, #0
   11980:	d1f4      	bne.n	1196c <memset+0x80>
   11982:	e7f9      	b.n	11978 <memset+0x8c>
   11984:	4603      	mov	r3, r0
   11986:	4614      	mov	r4, r2
   11988:	e7bf      	b.n	1190a <memset+0x1e>
   1198a:	461a      	mov	r2, r3
   1198c:	46a4      	mov	ip, r4
   1198e:	e7e0      	b.n	11952 <memset+0x66>

00011990 <__cxa_atexit>:
   11990:	4613      	mov	r3, r2
   11992:	460a      	mov	r2, r1
   11994:	4601      	mov	r1, r0
   11996:	2002      	movs	r0, #2
   11998:	f002 ba78 	b.w	13e8c <__register_exitproc>

0001199c <fcvtf>:
   1199c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   119a0:	2300      	movs	r3, #0
   119a2:	f002 bacd 	b.w	13f40 <fcvtbuf>
   119a6:	bf00      	nop

000119a8 <__libc_init_array>:
   119a8:	b570      	push	{r4, r5, r6, lr}
   119aa:	4e0d      	ldr	r6, [pc, #52]	; (119e0 <__libc_init_array+0x38>)
   119ac:	4d0d      	ldr	r5, [pc, #52]	; (119e4 <__libc_init_array+0x3c>)
   119ae:	1b76      	subs	r6, r6, r5
   119b0:	10b6      	asrs	r6, r6, #2
   119b2:	d006      	beq.n	119c2 <__libc_init_array+0x1a>
   119b4:	2400      	movs	r4, #0
   119b6:	f855 3b04 	ldr.w	r3, [r5], #4
   119ba:	3401      	adds	r4, #1
   119bc:	4798      	blx	r3
   119be:	42a6      	cmp	r6, r4
   119c0:	d1f9      	bne.n	119b6 <__libc_init_array+0xe>
   119c2:	4e09      	ldr	r6, [pc, #36]	; (119e8 <__libc_init_array+0x40>)
   119c4:	4d09      	ldr	r5, [pc, #36]	; (119ec <__libc_init_array+0x44>)
   119c6:	1b76      	subs	r6, r6, r5
   119c8:	f003 ff9e 	bl	15908 <___init_veneer>
   119cc:	10b6      	asrs	r6, r6, #2
   119ce:	d006      	beq.n	119de <__libc_init_array+0x36>
   119d0:	2400      	movs	r4, #0
   119d2:	f855 3b04 	ldr.w	r3, [r5], #4
   119d6:	3401      	adds	r4, #1
   119d8:	4798      	blx	r3
   119da:	42a6      	cmp	r6, r4
   119dc:	d1f9      	bne.n	119d2 <__libc_init_array+0x2a>
   119de:	bd70      	pop	{r4, r5, r6, pc}
   119e0:	60001f90 	.word	0x60001f90
   119e4:	60001f90 	.word	0x60001f90
   119e8:	60001fb4 	.word	0x60001fb4
   119ec:	60001f90 	.word	0x60001f90

000119f0 <__retarget_lock_init_recursive>:
   119f0:	4770      	bx	lr
   119f2:	bf00      	nop

000119f4 <__retarget_lock_close_recursive>:
   119f4:	4770      	bx	lr
   119f6:	bf00      	nop

000119f8 <__retarget_lock_acquire_recursive>:
   119f8:	4770      	bx	lr
   119fa:	bf00      	nop

000119fc <__retarget_lock_release_recursive>:
   119fc:	4770      	bx	lr
   119fe:	bf00      	nop

00011a00 <__locale_mb_cur_max>:
   11a00:	4b01      	ldr	r3, [pc, #4]	; (11a08 <__locale_mb_cur_max+0x8>)
   11a02:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   11a06:	4770      	bx	lr
   11a08:	200036b4 	.word	0x200036b4

00011a0c <strcpy>:
   11a0c:	ea80 0201 	eor.w	r2, r0, r1
   11a10:	4684      	mov	ip, r0
   11a12:	f012 0f03 	tst.w	r2, #3
   11a16:	d14f      	bne.n	11ab8 <strcpy+0xac>
   11a18:	f011 0f03 	tst.w	r1, #3
   11a1c:	d132      	bne.n	11a84 <strcpy+0x78>
   11a1e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   11a22:	f011 0f04 	tst.w	r1, #4
   11a26:	f851 3b04 	ldr.w	r3, [r1], #4
   11a2a:	d00b      	beq.n	11a44 <strcpy+0x38>
   11a2c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11a30:	439a      	bics	r2, r3
   11a32:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11a36:	bf04      	itt	eq
   11a38:	f84c 3b04 	streq.w	r3, [ip], #4
   11a3c:	f851 3b04 	ldreq.w	r3, [r1], #4
   11a40:	d116      	bne.n	11a70 <strcpy+0x64>
   11a42:	bf00      	nop
   11a44:	f851 4b04 	ldr.w	r4, [r1], #4
   11a48:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11a4c:	439a      	bics	r2, r3
   11a4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11a52:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   11a56:	d10b      	bne.n	11a70 <strcpy+0x64>
   11a58:	f84c 3b04 	str.w	r3, [ip], #4
   11a5c:	43a2      	bics	r2, r4
   11a5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11a62:	bf04      	itt	eq
   11a64:	f851 3b04 	ldreq.w	r3, [r1], #4
   11a68:	f84c 4b04 	streq.w	r4, [ip], #4
   11a6c:	d0ea      	beq.n	11a44 <strcpy+0x38>
   11a6e:	4623      	mov	r3, r4
   11a70:	f80c 3b01 	strb.w	r3, [ip], #1
   11a74:	f013 0fff 	tst.w	r3, #255	; 0xff
   11a78:	ea4f 2333 	mov.w	r3, r3, ror #8
   11a7c:	d1f8      	bne.n	11a70 <strcpy+0x64>
   11a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11a82:	4770      	bx	lr
   11a84:	f011 0f01 	tst.w	r1, #1
   11a88:	d006      	beq.n	11a98 <strcpy+0x8c>
   11a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   11a8e:	f80c 2b01 	strb.w	r2, [ip], #1
   11a92:	2a00      	cmp	r2, #0
   11a94:	bf08      	it	eq
   11a96:	4770      	bxeq	lr
   11a98:	f011 0f02 	tst.w	r1, #2
   11a9c:	d0bf      	beq.n	11a1e <strcpy+0x12>
   11a9e:	f831 2b02 	ldrh.w	r2, [r1], #2
   11aa2:	f012 0fff 	tst.w	r2, #255	; 0xff
   11aa6:	bf16      	itet	ne
   11aa8:	f82c 2b02 	strhne.w	r2, [ip], #2
   11aac:	f88c 2000 	strbeq.w	r2, [ip]
   11ab0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   11ab4:	d1b3      	bne.n	11a1e <strcpy+0x12>
   11ab6:	4770      	bx	lr
   11ab8:	f811 2b01 	ldrb.w	r2, [r1], #1
   11abc:	f80c 2b01 	strb.w	r2, [ip], #1
   11ac0:	2a00      	cmp	r2, #0
   11ac2:	d1f9      	bne.n	11ab8 <strcpy+0xac>
   11ac4:	4770      	bx	lr
   11ac6:	bf00      	nop

00011ac8 <__malloc_lock>:
   11ac8:	4801      	ldr	r0, [pc, #4]	; (11ad0 <__malloc_lock+0x8>)
   11aca:	f7ff bf95 	b.w	119f8 <__retarget_lock_acquire_recursive>
   11ace:	bf00      	nop
   11ad0:	200052d4 	.word	0x200052d4

00011ad4 <__malloc_unlock>:
   11ad4:	4801      	ldr	r0, [pc, #4]	; (11adc <__malloc_unlock+0x8>)
   11ad6:	f7ff bf91 	b.w	119fc <__retarget_lock_release_recursive>
   11ada:	bf00      	nop
   11adc:	200052d4 	.word	0x200052d4

00011ae0 <_Balloc>:
   11ae0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11ae2:	b570      	push	{r4, r5, r6, lr}
   11ae4:	4605      	mov	r5, r0
   11ae6:	460c      	mov	r4, r1
   11ae8:	b14b      	cbz	r3, 11afe <_Balloc+0x1e>
   11aea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11aee:	b180      	cbz	r0, 11b12 <_Balloc+0x32>
   11af0:	6802      	ldr	r2, [r0, #0]
   11af2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   11af6:	2300      	movs	r3, #0
   11af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   11afc:	bd70      	pop	{r4, r5, r6, pc}
   11afe:	2221      	movs	r2, #33	; 0x21
   11b00:	2104      	movs	r1, #4
   11b02:	f000 fba9 	bl	12258 <_calloc_r>
   11b06:	4603      	mov	r3, r0
   11b08:	6468      	str	r0, [r5, #68]	; 0x44
   11b0a:	2800      	cmp	r0, #0
   11b0c:	d1ed      	bne.n	11aea <_Balloc+0xa>
   11b0e:	2000      	movs	r0, #0
   11b10:	bd70      	pop	{r4, r5, r6, pc}
   11b12:	2101      	movs	r1, #1
   11b14:	fa01 f604 	lsl.w	r6, r1, r4
   11b18:	1d72      	adds	r2, r6, #5
   11b1a:	0092      	lsls	r2, r2, #2
   11b1c:	4628      	mov	r0, r5
   11b1e:	f000 fb9b 	bl	12258 <_calloc_r>
   11b22:	2800      	cmp	r0, #0
   11b24:	d0f3      	beq.n	11b0e <_Balloc+0x2e>
   11b26:	e9c0 4601 	strd	r4, r6, [r0, #4]
   11b2a:	e7e4      	b.n	11af6 <_Balloc+0x16>

00011b2c <_Bfree>:
   11b2c:	b131      	cbz	r1, 11b3c <_Bfree+0x10>
   11b2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11b30:	684a      	ldr	r2, [r1, #4]
   11b32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   11b36:	6008      	str	r0, [r1, #0]
   11b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11b3c:	4770      	bx	lr
   11b3e:	bf00      	nop

00011b40 <__multadd>:
   11b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b44:	690e      	ldr	r6, [r1, #16]
   11b46:	4680      	mov	r8, r0
   11b48:	460f      	mov	r7, r1
   11b4a:	461d      	mov	r5, r3
   11b4c:	f101 0e14 	add.w	lr, r1, #20
   11b50:	2000      	movs	r0, #0
   11b52:	f8de 1000 	ldr.w	r1, [lr]
   11b56:	b28c      	uxth	r4, r1
   11b58:	fb02 5304 	mla	r3, r2, r4, r5
   11b5c:	0c09      	lsrs	r1, r1, #16
   11b5e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11b62:	fb02 cc01 	mla	ip, r2, r1, ip
   11b66:	3001      	adds	r0, #1
   11b68:	b29c      	uxth	r4, r3
   11b6a:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   11b6e:	4286      	cmp	r6, r0
   11b70:	f84e 4b04 	str.w	r4, [lr], #4
   11b74:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11b78:	dceb      	bgt.n	11b52 <__multadd+0x12>
   11b7a:	b13d      	cbz	r5, 11b8c <__multadd+0x4c>
   11b7c:	68bb      	ldr	r3, [r7, #8]
   11b7e:	42b3      	cmp	r3, r6
   11b80:	dd07      	ble.n	11b92 <__multadd+0x52>
   11b82:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11b86:	3601      	adds	r6, #1
   11b88:	615d      	str	r5, [r3, #20]
   11b8a:	613e      	str	r6, [r7, #16]
   11b8c:	4638      	mov	r0, r7
   11b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b92:	6879      	ldr	r1, [r7, #4]
   11b94:	4640      	mov	r0, r8
   11b96:	3101      	adds	r1, #1
   11b98:	f7ff ffa2 	bl	11ae0 <_Balloc>
   11b9c:	4604      	mov	r4, r0
   11b9e:	b1b0      	cbz	r0, 11bce <__multadd+0x8e>
   11ba0:	693a      	ldr	r2, [r7, #16]
   11ba2:	3202      	adds	r2, #2
   11ba4:	f107 010c 	add.w	r1, r7, #12
   11ba8:	0092      	lsls	r2, r2, #2
   11baa:	300c      	adds	r0, #12
   11bac:	f7fb fdd4 	bl	d758 <memcpy>
   11bb0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11bb4:	687a      	ldr	r2, [r7, #4]
   11bb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11bba:	6039      	str	r1, [r7, #0]
   11bbc:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11bc0:	4627      	mov	r7, r4
   11bc2:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11bc6:	3601      	adds	r6, #1
   11bc8:	615d      	str	r5, [r3, #20]
   11bca:	613e      	str	r6, [r7, #16]
   11bcc:	e7de      	b.n	11b8c <__multadd+0x4c>
   11bce:	4b03      	ldr	r3, [pc, #12]	; (11bdc <__multadd+0x9c>)
   11bd0:	4803      	ldr	r0, [pc, #12]	; (11be0 <__multadd+0xa0>)
   11bd2:	4622      	mov	r2, r4
   11bd4:	21ba      	movs	r1, #186	; 0xba
   11bd6:	f7ff fe69 	bl	118ac <__assert_func>
   11bda:	bf00      	nop
   11bdc:	2000293c 	.word	0x2000293c
   11be0:	20002950 	.word	0x20002950

00011be4 <__hi0bits>:
   11be4:	0c03      	lsrs	r3, r0, #16
   11be6:	041b      	lsls	r3, r3, #16
   11be8:	b9d3      	cbnz	r3, 11c20 <__hi0bits+0x3c>
   11bea:	0400      	lsls	r0, r0, #16
   11bec:	2310      	movs	r3, #16
   11bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   11bf2:	bf04      	itt	eq
   11bf4:	0200      	lsleq	r0, r0, #8
   11bf6:	3308      	addeq	r3, #8
   11bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11bfc:	bf04      	itt	eq
   11bfe:	0100      	lsleq	r0, r0, #4
   11c00:	3304      	addeq	r3, #4
   11c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   11c06:	bf04      	itt	eq
   11c08:	0080      	lsleq	r0, r0, #2
   11c0a:	3302      	addeq	r3, #2
   11c0c:	2800      	cmp	r0, #0
   11c0e:	db05      	blt.n	11c1c <__hi0bits+0x38>
   11c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   11c14:	f103 0301 	add.w	r3, r3, #1
   11c18:	bf08      	it	eq
   11c1a:	2320      	moveq	r3, #32
   11c1c:	4618      	mov	r0, r3
   11c1e:	4770      	bx	lr
   11c20:	2300      	movs	r3, #0
   11c22:	e7e4      	b.n	11bee <__hi0bits+0xa>

00011c24 <__lo0bits>:
   11c24:	6803      	ldr	r3, [r0, #0]
   11c26:	f013 0207 	ands.w	r2, r3, #7
   11c2a:	d008      	beq.n	11c3e <__lo0bits+0x1a>
   11c2c:	07d9      	lsls	r1, r3, #31
   11c2e:	d41f      	bmi.n	11c70 <__lo0bits+0x4c>
   11c30:	079a      	lsls	r2, r3, #30
   11c32:	d522      	bpl.n	11c7a <__lo0bits+0x56>
   11c34:	085b      	lsrs	r3, r3, #1
   11c36:	6003      	str	r3, [r0, #0]
   11c38:	2201      	movs	r2, #1
   11c3a:	4610      	mov	r0, r2
   11c3c:	4770      	bx	lr
   11c3e:	b299      	uxth	r1, r3
   11c40:	b909      	cbnz	r1, 11c46 <__lo0bits+0x22>
   11c42:	0c1b      	lsrs	r3, r3, #16
   11c44:	2210      	movs	r2, #16
   11c46:	b2d9      	uxtb	r1, r3
   11c48:	b909      	cbnz	r1, 11c4e <__lo0bits+0x2a>
   11c4a:	3208      	adds	r2, #8
   11c4c:	0a1b      	lsrs	r3, r3, #8
   11c4e:	0719      	lsls	r1, r3, #28
   11c50:	bf04      	itt	eq
   11c52:	091b      	lsreq	r3, r3, #4
   11c54:	3204      	addeq	r2, #4
   11c56:	0799      	lsls	r1, r3, #30
   11c58:	bf04      	itt	eq
   11c5a:	089b      	lsreq	r3, r3, #2
   11c5c:	3202      	addeq	r2, #2
   11c5e:	07d9      	lsls	r1, r3, #31
   11c60:	d403      	bmi.n	11c6a <__lo0bits+0x46>
   11c62:	085b      	lsrs	r3, r3, #1
   11c64:	f102 0201 	add.w	r2, r2, #1
   11c68:	d005      	beq.n	11c76 <__lo0bits+0x52>
   11c6a:	6003      	str	r3, [r0, #0]
   11c6c:	4610      	mov	r0, r2
   11c6e:	4770      	bx	lr
   11c70:	2200      	movs	r2, #0
   11c72:	4610      	mov	r0, r2
   11c74:	4770      	bx	lr
   11c76:	2220      	movs	r2, #32
   11c78:	e7df      	b.n	11c3a <__lo0bits+0x16>
   11c7a:	089b      	lsrs	r3, r3, #2
   11c7c:	2202      	movs	r2, #2
   11c7e:	6003      	str	r3, [r0, #0]
   11c80:	4610      	mov	r0, r2
   11c82:	4770      	bx	lr

00011c84 <__i2b>:
   11c84:	b538      	push	{r3, r4, r5, lr}
   11c86:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11c88:	4604      	mov	r4, r0
   11c8a:	460d      	mov	r5, r1
   11c8c:	b14b      	cbz	r3, 11ca2 <__i2b+0x1e>
   11c8e:	6858      	ldr	r0, [r3, #4]
   11c90:	b1b0      	cbz	r0, 11cc0 <__i2b+0x3c>
   11c92:	6802      	ldr	r2, [r0, #0]
   11c94:	605a      	str	r2, [r3, #4]
   11c96:	2200      	movs	r2, #0
   11c98:	2301      	movs	r3, #1
   11c9a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   11c9e:	60c2      	str	r2, [r0, #12]
   11ca0:	bd38      	pop	{r3, r4, r5, pc}
   11ca2:	2221      	movs	r2, #33	; 0x21
   11ca4:	2104      	movs	r1, #4
   11ca6:	f000 fad7 	bl	12258 <_calloc_r>
   11caa:	4603      	mov	r3, r0
   11cac:	6460      	str	r0, [r4, #68]	; 0x44
   11cae:	2800      	cmp	r0, #0
   11cb0:	d1ed      	bne.n	11c8e <__i2b+0xa>
   11cb2:	4b09      	ldr	r3, [pc, #36]	; (11cd8 <__i2b+0x54>)
   11cb4:	4809      	ldr	r0, [pc, #36]	; (11cdc <__i2b+0x58>)
   11cb6:	2200      	movs	r2, #0
   11cb8:	f240 1145 	movw	r1, #325	; 0x145
   11cbc:	f7ff fdf6 	bl	118ac <__assert_func>
   11cc0:	221c      	movs	r2, #28
   11cc2:	2101      	movs	r1, #1
   11cc4:	4620      	mov	r0, r4
   11cc6:	f000 fac7 	bl	12258 <_calloc_r>
   11cca:	2800      	cmp	r0, #0
   11ccc:	d0f1      	beq.n	11cb2 <__i2b+0x2e>
   11cce:	2201      	movs	r2, #1
   11cd0:	2302      	movs	r3, #2
   11cd2:	e9c0 2301 	strd	r2, r3, [r0, #4]
   11cd6:	e7de      	b.n	11c96 <__i2b+0x12>
   11cd8:	2000293c 	.word	0x2000293c
   11cdc:	20002950 	.word	0x20002950

00011ce0 <__multiply>:
   11ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ce4:	690e      	ldr	r6, [r1, #16]
   11ce6:	6915      	ldr	r5, [r2, #16]
   11ce8:	42ae      	cmp	r6, r5
   11cea:	b085      	sub	sp, #20
   11cec:	4688      	mov	r8, r1
   11cee:	4614      	mov	r4, r2
   11cf0:	db05      	blt.n	11cfe <__multiply+0x1e>
   11cf2:	462a      	mov	r2, r5
   11cf4:	4623      	mov	r3, r4
   11cf6:	4635      	mov	r5, r6
   11cf8:	460c      	mov	r4, r1
   11cfa:	4616      	mov	r6, r2
   11cfc:	4698      	mov	r8, r3
   11cfe:	68a3      	ldr	r3, [r4, #8]
   11d00:	6861      	ldr	r1, [r4, #4]
   11d02:	19af      	adds	r7, r5, r6
   11d04:	42bb      	cmp	r3, r7
   11d06:	bfb8      	it	lt
   11d08:	3101      	addlt	r1, #1
   11d0a:	f7ff fee9 	bl	11ae0 <_Balloc>
   11d0e:	9001      	str	r0, [sp, #4]
   11d10:	2800      	cmp	r0, #0
   11d12:	f000 8087 	beq.w	11e24 <__multiply+0x144>
   11d16:	9b01      	ldr	r3, [sp, #4]
   11d18:	f103 0914 	add.w	r9, r3, #20
   11d1c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   11d20:	45d1      	cmp	r9, sl
   11d22:	d205      	bcs.n	11d30 <__multiply+0x50>
   11d24:	464b      	mov	r3, r9
   11d26:	2200      	movs	r2, #0
   11d28:	f843 2b04 	str.w	r2, [r3], #4
   11d2c:	459a      	cmp	sl, r3
   11d2e:	d8fb      	bhi.n	11d28 <__multiply+0x48>
   11d30:	f108 0814 	add.w	r8, r8, #20
   11d34:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   11d38:	f104 0314 	add.w	r3, r4, #20
   11d3c:	45d8      	cmp	r8, fp
   11d3e:	461a      	mov	r2, r3
   11d40:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   11d44:	d25f      	bcs.n	11e06 <__multiply+0x126>
   11d46:	1b2b      	subs	r3, r5, r4
   11d48:	3b15      	subs	r3, #21
   11d4a:	f023 0303 	bic.w	r3, r3, #3
   11d4e:	3304      	adds	r3, #4
   11d50:	3415      	adds	r4, #21
   11d52:	42a5      	cmp	r5, r4
   11d54:	bf38      	it	cc
   11d56:	2304      	movcc	r3, #4
   11d58:	e9cd a702 	strd	sl, r7, [sp, #8]
   11d5c:	46ac      	mov	ip, r5
   11d5e:	461f      	mov	r7, r3
   11d60:	4692      	mov	sl, r2
   11d62:	e005      	b.n	11d70 <__multiply+0x90>
   11d64:	0c09      	lsrs	r1, r1, #16
   11d66:	d129      	bne.n	11dbc <__multiply+0xdc>
   11d68:	45c3      	cmp	fp, r8
   11d6a:	f109 0904 	add.w	r9, r9, #4
   11d6e:	d948      	bls.n	11e02 <__multiply+0x122>
   11d70:	f858 1b04 	ldr.w	r1, [r8], #4
   11d74:	b28d      	uxth	r5, r1
   11d76:	2d00      	cmp	r5, #0
   11d78:	d0f4      	beq.n	11d64 <__multiply+0x84>
   11d7a:	4656      	mov	r6, sl
   11d7c:	464c      	mov	r4, r9
   11d7e:	2300      	movs	r3, #0
   11d80:	f856 1b04 	ldr.w	r1, [r6], #4
   11d84:	6822      	ldr	r2, [r4, #0]
   11d86:	fa1f fe81 	uxth.w	lr, r1
   11d8a:	b290      	uxth	r0, r2
   11d8c:	0c09      	lsrs	r1, r1, #16
   11d8e:	fb05 000e 	mla	r0, r5, lr, r0
   11d92:	0c12      	lsrs	r2, r2, #16
   11d94:	4403      	add	r3, r0
   11d96:	fb05 2201 	mla	r2, r5, r1, r2
   11d9a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11d9e:	b29b      	uxth	r3, r3
   11da0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11da4:	45b4      	cmp	ip, r6
   11da6:	f844 3b04 	str.w	r3, [r4], #4
   11daa:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11dae:	d8e7      	bhi.n	11d80 <__multiply+0xa0>
   11db0:	f849 3007 	str.w	r3, [r9, r7]
   11db4:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11db8:	0c09      	lsrs	r1, r1, #16
   11dba:	d0d5      	beq.n	11d68 <__multiply+0x88>
   11dbc:	f8d9 3000 	ldr.w	r3, [r9]
   11dc0:	4650      	mov	r0, sl
   11dc2:	461a      	mov	r2, r3
   11dc4:	464c      	mov	r4, r9
   11dc6:	2600      	movs	r6, #0
   11dc8:	8805      	ldrh	r5, [r0, #0]
   11dca:	0c12      	lsrs	r2, r2, #16
   11dcc:	fb01 2205 	mla	r2, r1, r5, r2
   11dd0:	4416      	add	r6, r2
   11dd2:	b29b      	uxth	r3, r3
   11dd4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   11dd8:	f844 3b04 	str.w	r3, [r4], #4
   11ddc:	f850 5b04 	ldr.w	r5, [r0], #4
   11de0:	6822      	ldr	r2, [r4, #0]
   11de2:	0c2d      	lsrs	r5, r5, #16
   11de4:	b293      	uxth	r3, r2
   11de6:	fb01 3305 	mla	r3, r1, r5, r3
   11dea:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   11dee:	4584      	cmp	ip, r0
   11df0:	ea4f 4613 	mov.w	r6, r3, lsr #16
   11df4:	d8e8      	bhi.n	11dc8 <__multiply+0xe8>
   11df6:	45c3      	cmp	fp, r8
   11df8:	f849 3007 	str.w	r3, [r9, r7]
   11dfc:	f109 0904 	add.w	r9, r9, #4
   11e00:	d8b6      	bhi.n	11d70 <__multiply+0x90>
   11e02:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   11e06:	2f00      	cmp	r7, #0
   11e08:	dc02      	bgt.n	11e10 <__multiply+0x130>
   11e0a:	e005      	b.n	11e18 <__multiply+0x138>
   11e0c:	3f01      	subs	r7, #1
   11e0e:	d003      	beq.n	11e18 <__multiply+0x138>
   11e10:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   11e14:	2b00      	cmp	r3, #0
   11e16:	d0f9      	beq.n	11e0c <__multiply+0x12c>
   11e18:	9b01      	ldr	r3, [sp, #4]
   11e1a:	4618      	mov	r0, r3
   11e1c:	611f      	str	r7, [r3, #16]
   11e1e:	b005      	add	sp, #20
   11e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e24:	4b03      	ldr	r3, [pc, #12]	; (11e34 <__multiply+0x154>)
   11e26:	4804      	ldr	r0, [pc, #16]	; (11e38 <__multiply+0x158>)
   11e28:	9a01      	ldr	r2, [sp, #4]
   11e2a:	f44f 71b1 	mov.w	r1, #354	; 0x162
   11e2e:	f7ff fd3d 	bl	118ac <__assert_func>
   11e32:	bf00      	nop
   11e34:	2000293c 	.word	0x2000293c
   11e38:	20002950 	.word	0x20002950

00011e3c <__pow5mult>:
   11e3c:	f012 0303 	ands.w	r3, r2, #3
   11e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e44:	4614      	mov	r4, r2
   11e46:	4606      	mov	r6, r0
   11e48:	d132      	bne.n	11eb0 <__pow5mult+0x74>
   11e4a:	460d      	mov	r5, r1
   11e4c:	10a4      	asrs	r4, r4, #2
   11e4e:	d020      	beq.n	11e92 <__pow5mult+0x56>
   11e50:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   11e54:	f1b8 0f00 	cmp.w	r8, #0
   11e58:	d033      	beq.n	11ec2 <__pow5mult+0x86>
   11e5a:	07e3      	lsls	r3, r4, #31
   11e5c:	f04f 0700 	mov.w	r7, #0
   11e60:	d407      	bmi.n	11e72 <__pow5mult+0x36>
   11e62:	1064      	asrs	r4, r4, #1
   11e64:	d015      	beq.n	11e92 <__pow5mult+0x56>
   11e66:	f8d8 0000 	ldr.w	r0, [r8]
   11e6a:	b1a8      	cbz	r0, 11e98 <__pow5mult+0x5c>
   11e6c:	4680      	mov	r8, r0
   11e6e:	07e3      	lsls	r3, r4, #31
   11e70:	d5f7      	bpl.n	11e62 <__pow5mult+0x26>
   11e72:	4642      	mov	r2, r8
   11e74:	4629      	mov	r1, r5
   11e76:	4630      	mov	r0, r6
   11e78:	f7ff ff32 	bl	11ce0 <__multiply>
   11e7c:	b1b5      	cbz	r5, 11eac <__pow5mult+0x70>
   11e7e:	6869      	ldr	r1, [r5, #4]
   11e80:	6c73      	ldr	r3, [r6, #68]	; 0x44
   11e82:	1064      	asrs	r4, r4, #1
   11e84:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   11e88:	602a      	str	r2, [r5, #0]
   11e8a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   11e8e:	4605      	mov	r5, r0
   11e90:	d1e9      	bne.n	11e66 <__pow5mult+0x2a>
   11e92:	4628      	mov	r0, r5
   11e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11e98:	4642      	mov	r2, r8
   11e9a:	4641      	mov	r1, r8
   11e9c:	4630      	mov	r0, r6
   11e9e:	f7ff ff1f 	bl	11ce0 <__multiply>
   11ea2:	f8c8 0000 	str.w	r0, [r8]
   11ea6:	6007      	str	r7, [r0, #0]
   11ea8:	4680      	mov	r8, r0
   11eaa:	e7e0      	b.n	11e6e <__pow5mult+0x32>
   11eac:	4605      	mov	r5, r0
   11eae:	e7d8      	b.n	11e62 <__pow5mult+0x26>
   11eb0:	3b01      	subs	r3, #1
   11eb2:	4a0f      	ldr	r2, [pc, #60]	; (11ef0 <__pow5mult+0xb4>)
   11eb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11eb8:	2300      	movs	r3, #0
   11eba:	f7ff fe41 	bl	11b40 <__multadd>
   11ebe:	4605      	mov	r5, r0
   11ec0:	e7c4      	b.n	11e4c <__pow5mult+0x10>
   11ec2:	2101      	movs	r1, #1
   11ec4:	4630      	mov	r0, r6
   11ec6:	f7ff fe0b 	bl	11ae0 <_Balloc>
   11eca:	4680      	mov	r8, r0
   11ecc:	b140      	cbz	r0, 11ee0 <__pow5mult+0xa4>
   11ece:	2301      	movs	r3, #1
   11ed0:	f240 2271 	movw	r2, #625	; 0x271
   11ed4:	e9c0 3204 	strd	r3, r2, [r0, #16]
   11ed8:	2300      	movs	r3, #0
   11eda:	6430      	str	r0, [r6, #64]	; 0x40
   11edc:	6003      	str	r3, [r0, #0]
   11ede:	e7bc      	b.n	11e5a <__pow5mult+0x1e>
   11ee0:	4b04      	ldr	r3, [pc, #16]	; (11ef4 <__pow5mult+0xb8>)
   11ee2:	4805      	ldr	r0, [pc, #20]	; (11ef8 <__pow5mult+0xbc>)
   11ee4:	4642      	mov	r2, r8
   11ee6:	f240 1145 	movw	r1, #325	; 0x145
   11eea:	f7ff fcdf 	bl	118ac <__assert_func>
   11eee:	bf00      	nop
   11ef0:	20002fc8 	.word	0x20002fc8
   11ef4:	2000293c 	.word	0x2000293c
   11ef8:	20002950 	.word	0x20002950

00011efc <__lshift>:
   11efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f00:	460d      	mov	r5, r1
   11f02:	4614      	mov	r4, r2
   11f04:	692f      	ldr	r7, [r5, #16]
   11f06:	68ab      	ldr	r3, [r5, #8]
   11f08:	6849      	ldr	r1, [r1, #4]
   11f0a:	eb07 1762 	add.w	r7, r7, r2, asr #5
   11f0e:	1c7e      	adds	r6, r7, #1
   11f10:	429e      	cmp	r6, r3
   11f12:	4680      	mov	r8, r0
   11f14:	ea4f 1962 	mov.w	r9, r2, asr #5
   11f18:	dd04      	ble.n	11f24 <__lshift+0x28>
   11f1a:	005b      	lsls	r3, r3, #1
   11f1c:	429e      	cmp	r6, r3
   11f1e:	f101 0101 	add.w	r1, r1, #1
   11f22:	dcfa      	bgt.n	11f1a <__lshift+0x1e>
   11f24:	4640      	mov	r0, r8
   11f26:	f7ff fddb 	bl	11ae0 <_Balloc>
   11f2a:	4684      	mov	ip, r0
   11f2c:	2800      	cmp	r0, #0
   11f2e:	d052      	beq.n	11fd6 <__lshift+0xda>
   11f30:	f1b9 0f00 	cmp.w	r9, #0
   11f34:	f100 0214 	add.w	r2, r0, #20
   11f38:	dd0e      	ble.n	11f58 <__lshift+0x5c>
   11f3a:	f109 0105 	add.w	r1, r9, #5
   11f3e:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   11f42:	4613      	mov	r3, r2
   11f44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   11f48:	2000      	movs	r0, #0
   11f4a:	f843 0b04 	str.w	r0, [r3], #4
   11f4e:	428b      	cmp	r3, r1
   11f50:	d1fb      	bne.n	11f4a <__lshift+0x4e>
   11f52:	f1ae 0314 	sub.w	r3, lr, #20
   11f56:	441a      	add	r2, r3
   11f58:	6929      	ldr	r1, [r5, #16]
   11f5a:	f105 0314 	add.w	r3, r5, #20
   11f5e:	f014 0e1f 	ands.w	lr, r4, #31
   11f62:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11f66:	d02e      	beq.n	11fc6 <__lshift+0xca>
   11f68:	f1ce 0920 	rsb	r9, lr, #32
   11f6c:	4610      	mov	r0, r2
   11f6e:	f04f 0a00 	mov.w	sl, #0
   11f72:	681c      	ldr	r4, [r3, #0]
   11f74:	fa04 f40e 	lsl.w	r4, r4, lr
   11f78:	ea44 040a 	orr.w	r4, r4, sl
   11f7c:	f840 4b04 	str.w	r4, [r0], #4
   11f80:	f853 4b04 	ldr.w	r4, [r3], #4
   11f84:	4299      	cmp	r1, r3
   11f86:	fa24 fa09 	lsr.w	sl, r4, r9
   11f8a:	d8f2      	bhi.n	11f72 <__lshift+0x76>
   11f8c:	1b4b      	subs	r3, r1, r5
   11f8e:	3b15      	subs	r3, #21
   11f90:	f023 0303 	bic.w	r3, r3, #3
   11f94:	3304      	adds	r3, #4
   11f96:	f105 0015 	add.w	r0, r5, #21
   11f9a:	4281      	cmp	r1, r0
   11f9c:	bf38      	it	cc
   11f9e:	2304      	movcc	r3, #4
   11fa0:	f1ba 0f00 	cmp.w	sl, #0
   11fa4:	bf18      	it	ne
   11fa6:	4637      	movne	r7, r6
   11fa8:	f842 a003 	str.w	sl, [r2, r3]
   11fac:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11fb0:	686a      	ldr	r2, [r5, #4]
   11fb2:	f8cc 7010 	str.w	r7, [ip, #16]
   11fb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11fba:	6029      	str	r1, [r5, #0]
   11fbc:	4660      	mov	r0, ip
   11fbe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   11fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11fc6:	3a04      	subs	r2, #4
   11fc8:	f853 0b04 	ldr.w	r0, [r3], #4
   11fcc:	f842 0f04 	str.w	r0, [r2, #4]!
   11fd0:	4299      	cmp	r1, r3
   11fd2:	d8f9      	bhi.n	11fc8 <__lshift+0xcc>
   11fd4:	e7ea      	b.n	11fac <__lshift+0xb0>
   11fd6:	4b03      	ldr	r3, [pc, #12]	; (11fe4 <__lshift+0xe8>)
   11fd8:	4803      	ldr	r0, [pc, #12]	; (11fe8 <__lshift+0xec>)
   11fda:	4662      	mov	r2, ip
   11fdc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   11fe0:	f7ff fc64 	bl	118ac <__assert_func>
   11fe4:	2000293c 	.word	0x2000293c
   11fe8:	20002950 	.word	0x20002950

00011fec <__mcmp>:
   11fec:	690b      	ldr	r3, [r1, #16]
   11fee:	4684      	mov	ip, r0
   11ff0:	6900      	ldr	r0, [r0, #16]
   11ff2:	1ac0      	subs	r0, r0, r3
   11ff4:	d116      	bne.n	12024 <__mcmp+0x38>
   11ff6:	f10c 0c14 	add.w	ip, ip, #20
   11ffa:	3114      	adds	r1, #20
   11ffc:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   12000:	b410      	push	{r4}
   12002:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   12006:	e001      	b.n	1200c <__mcmp+0x20>
   12008:	4594      	cmp	ip, r2
   1200a:	d208      	bcs.n	1201e <__mcmp+0x32>
   1200c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   12010:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   12014:	428c      	cmp	r4, r1
   12016:	d0f7      	beq.n	12008 <__mcmp+0x1c>
   12018:	d205      	bcs.n	12026 <__mcmp+0x3a>
   1201a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1201e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12022:	4770      	bx	lr
   12024:	4770      	bx	lr
   12026:	2001      	movs	r0, #1
   12028:	f85d 4b04 	ldr.w	r4, [sp], #4
   1202c:	4770      	bx	lr
   1202e:	bf00      	nop

00012030 <__mdiff>:
   12030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12034:	690f      	ldr	r7, [r1, #16]
   12036:	6913      	ldr	r3, [r2, #16]
   12038:	1aff      	subs	r7, r7, r3
   1203a:	2f00      	cmp	r7, #0
   1203c:	460e      	mov	r6, r1
   1203e:	4690      	mov	r8, r2
   12040:	d17f      	bne.n	12142 <__mdiff+0x112>
   12042:	f101 0514 	add.w	r5, r1, #20
   12046:	3214      	adds	r2, #20
   12048:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1204c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12050:	e001      	b.n	12056 <__mdiff+0x26>
   12052:	429d      	cmp	r5, r3
   12054:	d278      	bcs.n	12148 <__mdiff+0x118>
   12056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   1205a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1205e:	42a1      	cmp	r1, r4
   12060:	d0f7      	beq.n	12052 <__mdiff+0x22>
   12062:	d369      	bcc.n	12138 <__mdiff+0x108>
   12064:	6871      	ldr	r1, [r6, #4]
   12066:	f7ff fd3b 	bl	11ae0 <_Balloc>
   1206a:	4681      	mov	r9, r0
   1206c:	2800      	cmp	r0, #0
   1206e:	d077      	beq.n	12160 <__mdiff+0x130>
   12070:	6935      	ldr	r5, [r6, #16]
   12072:	f8d8 2010 	ldr.w	r2, [r8, #16]
   12076:	60c7      	str	r7, [r0, #12]
   12078:	f108 0e14 	add.w	lr, r8, #20
   1207c:	f106 0014 	add.w	r0, r6, #20
   12080:	f109 0a14 	add.w	sl, r9, #20
   12084:	f106 0110 	add.w	r1, r6, #16
   12088:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   1208c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   12090:	4656      	mov	r6, sl
   12092:	f04f 0c00 	mov.w	ip, #0
   12096:	f85e 4b04 	ldr.w	r4, [lr], #4
   1209a:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1209e:	b2a3      	uxth	r3, r4
   120a0:	fa1c fc8b 	uxtah	ip, ip, fp
   120a4:	ebac 0303 	sub.w	r3, ip, r3
   120a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   120ac:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   120b0:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   120b4:	b29b      	uxth	r3, r3
   120b6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   120ba:	4572      	cmp	r2, lr
   120bc:	f846 3b04 	str.w	r3, [r6], #4
   120c0:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   120c4:	d8e7      	bhi.n	12096 <__mdiff+0x66>
   120c6:	eba2 0108 	sub.w	r1, r2, r8
   120ca:	3915      	subs	r1, #21
   120cc:	f108 0815 	add.w	r8, r8, #21
   120d0:	4542      	cmp	r2, r8
   120d2:	f021 0403 	bic.w	r4, r1, #3
   120d6:	f104 0404 	add.w	r4, r4, #4
   120da:	bf38      	it	cc
   120dc:	2404      	movcc	r4, #4
   120de:	4420      	add	r0, r4
   120e0:	f021 0203 	bic.w	r2, r1, #3
   120e4:	bf38      	it	cc
   120e6:	2200      	movcc	r2, #0
   120e8:	4287      	cmp	r7, r0
   120ea:	4452      	add	r2, sl
   120ec:	4454      	add	r4, sl
   120ee:	d918      	bls.n	12122 <__mdiff+0xf2>
   120f0:	4626      	mov	r6, r4
   120f2:	4601      	mov	r1, r0
   120f4:	f851 3b04 	ldr.w	r3, [r1], #4
   120f8:	fa1c fc83 	uxtah	ip, ip, r3
   120fc:	ea4f 422c 	mov.w	r2, ip, asr #16
   12100:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   12104:	fa1f fc8c 	uxth.w	ip, ip
   12108:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   1210c:	428f      	cmp	r7, r1
   1210e:	f846 3b04 	str.w	r3, [r6], #4
   12112:	ea4f 4c22 	mov.w	ip, r2, asr #16
   12116:	d8ed      	bhi.n	120f4 <__mdiff+0xc4>
   12118:	3f01      	subs	r7, #1
   1211a:	1a3f      	subs	r7, r7, r0
   1211c:	f027 0703 	bic.w	r7, r7, #3
   12120:	19e2      	adds	r2, r4, r7
   12122:	b923      	cbnz	r3, 1212e <__mdiff+0xfe>
   12124:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   12128:	3d01      	subs	r5, #1
   1212a:	2b00      	cmp	r3, #0
   1212c:	d0fa      	beq.n	12124 <__mdiff+0xf4>
   1212e:	f8c9 5010 	str.w	r5, [r9, #16]
   12132:	4648      	mov	r0, r9
   12134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12138:	4633      	mov	r3, r6
   1213a:	2701      	movs	r7, #1
   1213c:	4646      	mov	r6, r8
   1213e:	4698      	mov	r8, r3
   12140:	e790      	b.n	12064 <__mdiff+0x34>
   12142:	dbf9      	blt.n	12138 <__mdiff+0x108>
   12144:	2700      	movs	r7, #0
   12146:	e78d      	b.n	12064 <__mdiff+0x34>
   12148:	2100      	movs	r1, #0
   1214a:	f7ff fcc9 	bl	11ae0 <_Balloc>
   1214e:	4681      	mov	r9, r0
   12150:	b168      	cbz	r0, 1216e <__mdiff+0x13e>
   12152:	2201      	movs	r2, #1
   12154:	2300      	movs	r3, #0
   12156:	e9c9 2304 	strd	r2, r3, [r9, #16]
   1215a:	4648      	mov	r0, r9
   1215c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12160:	4b06      	ldr	r3, [pc, #24]	; (1217c <__mdiff+0x14c>)
   12162:	4807      	ldr	r0, [pc, #28]	; (12180 <__mdiff+0x150>)
   12164:	464a      	mov	r2, r9
   12166:	f240 2145 	movw	r1, #581	; 0x245
   1216a:	f7ff fb9f 	bl	118ac <__assert_func>
   1216e:	4b03      	ldr	r3, [pc, #12]	; (1217c <__mdiff+0x14c>)
   12170:	4803      	ldr	r0, [pc, #12]	; (12180 <__mdiff+0x150>)
   12172:	464a      	mov	r2, r9
   12174:	f240 2137 	movw	r1, #567	; 0x237
   12178:	f7ff fb98 	bl	118ac <__assert_func>
   1217c:	2000293c 	.word	0x2000293c
   12180:	20002950 	.word	0x20002950

00012184 <__d2b>:
   12184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12188:	4688      	mov	r8, r1
   1218a:	b083      	sub	sp, #12
   1218c:	2101      	movs	r1, #1
   1218e:	ec57 6b10 	vmov	r6, r7, d0
   12192:	4615      	mov	r5, r2
   12194:	f7ff fca4 	bl	11ae0 <_Balloc>
   12198:	4604      	mov	r4, r0
   1219a:	2800      	cmp	r0, #0
   1219c:	d051      	beq.n	12242 <__d2b+0xbe>
   1219e:	f3c7 590a 	ubfx	r9, r7, #20, #11
   121a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
   121a6:	f1b9 0f00 	cmp.w	r9, #0
   121aa:	d001      	beq.n	121b0 <__d2b+0x2c>
   121ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   121b0:	2e00      	cmp	r6, #0
   121b2:	9301      	str	r3, [sp, #4]
   121b4:	d118      	bne.n	121e8 <__d2b+0x64>
   121b6:	a801      	add	r0, sp, #4
   121b8:	f7ff fd34 	bl	11c24 <__lo0bits>
   121bc:	9a01      	ldr	r2, [sp, #4]
   121be:	6162      	str	r2, [r4, #20]
   121c0:	2201      	movs	r2, #1
   121c2:	f100 0320 	add.w	r3, r0, #32
   121c6:	6122      	str	r2, [r4, #16]
   121c8:	f1b9 0f00 	cmp.w	r9, #0
   121cc:	d025      	beq.n	1221a <__d2b+0x96>
   121ce:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   121d2:	eb09 0203 	add.w	r2, r9, r3
   121d6:	4620      	mov	r0, r4
   121d8:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   121dc:	f8c8 2000 	str.w	r2, [r8]
   121e0:	602b      	str	r3, [r5, #0]
   121e2:	b003      	add	sp, #12
   121e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   121e8:	4668      	mov	r0, sp
   121ea:	9600      	str	r6, [sp, #0]
   121ec:	f7ff fd1a 	bl	11c24 <__lo0bits>
   121f0:	4603      	mov	r3, r0
   121f2:	b310      	cbz	r0, 1223a <__d2b+0xb6>
   121f4:	e9dd 0200 	ldrd	r0, r2, [sp]
   121f8:	f1c3 0120 	rsb	r1, r3, #32
   121fc:	fa02 f101 	lsl.w	r1, r2, r1
   12200:	4301      	orrs	r1, r0
   12202:	40da      	lsrs	r2, r3
   12204:	6161      	str	r1, [r4, #20]
   12206:	9201      	str	r2, [sp, #4]
   12208:	2a00      	cmp	r2, #0
   1220a:	61a2      	str	r2, [r4, #24]
   1220c:	bf14      	ite	ne
   1220e:	2202      	movne	r2, #2
   12210:	2201      	moveq	r2, #1
   12212:	6122      	str	r2, [r4, #16]
   12214:	f1b9 0f00 	cmp.w	r9, #0
   12218:	d1d9      	bne.n	121ce <__d2b+0x4a>
   1221a:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   1221e:	f8c8 3000 	str.w	r3, [r8]
   12222:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   12226:	6918      	ldr	r0, [r3, #16]
   12228:	f7ff fcdc 	bl	11be4 <__hi0bits>
   1222c:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   12230:	4620      	mov	r0, r4
   12232:	602b      	str	r3, [r5, #0]
   12234:	b003      	add	sp, #12
   12236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1223a:	9a00      	ldr	r2, [sp, #0]
   1223c:	6162      	str	r2, [r4, #20]
   1223e:	9a01      	ldr	r2, [sp, #4]
   12240:	e7e2      	b.n	12208 <__d2b+0x84>
   12242:	4b03      	ldr	r3, [pc, #12]	; (12250 <__d2b+0xcc>)
   12244:	4803      	ldr	r0, [pc, #12]	; (12254 <__d2b+0xd0>)
   12246:	4622      	mov	r2, r4
   12248:	f240 310f 	movw	r1, #783	; 0x30f
   1224c:	f7ff fb2e 	bl	118ac <__assert_func>
   12250:	2000293c 	.word	0x2000293c
   12254:	20002950 	.word	0x20002950

00012258 <_calloc_r>:
   12258:	b538      	push	{r3, r4, r5, lr}
   1225a:	fba1 1402 	umull	r1, r4, r1, r2
   1225e:	bb8c      	cbnz	r4, 122c4 <_calloc_r+0x6c>
   12260:	f7fe ffc8 	bl	111f4 <_malloc_r>
   12264:	4605      	mov	r5, r0
   12266:	b1e0      	cbz	r0, 122a2 <_calloc_r+0x4a>
   12268:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1226c:	f022 0203 	bic.w	r2, r2, #3
   12270:	3a04      	subs	r2, #4
   12272:	2a24      	cmp	r2, #36	; 0x24
   12274:	d817      	bhi.n	122a6 <_calloc_r+0x4e>
   12276:	2a13      	cmp	r2, #19
   12278:	d91a      	bls.n	122b0 <_calloc_r+0x58>
   1227a:	2a1b      	cmp	r2, #27
   1227c:	e9c0 4400 	strd	r4, r4, [r0]
   12280:	d91d      	bls.n	122be <_calloc_r+0x66>
   12282:	2a24      	cmp	r2, #36	; 0x24
   12284:	bf14      	ite	ne
   12286:	f100 0210 	addne.w	r2, r0, #16
   1228a:	f100 0218 	addeq.w	r2, r0, #24
   1228e:	f04f 0300 	mov.w	r3, #0
   12292:	e9c0 4402 	strd	r4, r4, [r0, #8]
   12296:	bf04      	itt	eq
   12298:	6104      	streq	r4, [r0, #16]
   1229a:	6144      	streq	r4, [r0, #20]
   1229c:	e9c2 3300 	strd	r3, r3, [r2]
   122a0:	6093      	str	r3, [r2, #8]
   122a2:	4628      	mov	r0, r5
   122a4:	bd38      	pop	{r3, r4, r5, pc}
   122a6:	4621      	mov	r1, r4
   122a8:	f7ff fb20 	bl	118ec <memset>
   122ac:	4628      	mov	r0, r5
   122ae:	bd38      	pop	{r3, r4, r5, pc}
   122b0:	4602      	mov	r2, r0
   122b2:	2300      	movs	r3, #0
   122b4:	e9c2 3300 	strd	r3, r3, [r2]
   122b8:	6093      	str	r3, [r2, #8]
   122ba:	4628      	mov	r0, r5
   122bc:	bd38      	pop	{r3, r4, r5, pc}
   122be:	f100 0208 	add.w	r2, r0, #8
   122c2:	e7f6      	b.n	122b2 <_calloc_r+0x5a>
   122c4:	f7fe ff80 	bl	111c8 <__errno>
   122c8:	230c      	movs	r3, #12
   122ca:	2500      	movs	r5, #0
   122cc:	6003      	str	r3, [r0, #0]
   122ce:	e7e8      	b.n	122a2 <_calloc_r+0x4a>

000122d0 <realloc>:
   122d0:	b410      	push	{r4}
   122d2:	4c04      	ldr	r4, [pc, #16]	; (122e4 <realloc+0x14>)
   122d4:	4603      	mov	r3, r0
   122d6:	460a      	mov	r2, r1
   122d8:	6820      	ldr	r0, [r4, #0]
   122da:	f85d 4b04 	ldr.w	r4, [sp], #4
   122de:	4619      	mov	r1, r3
   122e0:	f000 b99c 	b.w	1261c <_realloc_r>
   122e4:	20003c3c 	.word	0x20003c3c

000122e8 <stdio_exit_handler>:
   122e8:	4a02      	ldr	r2, [pc, #8]	; (122f4 <stdio_exit_handler+0xc>)
   122ea:	4903      	ldr	r1, [pc, #12]	; (122f8 <stdio_exit_handler+0x10>)
   122ec:	4803      	ldr	r0, [pc, #12]	; (122fc <stdio_exit_handler+0x14>)
   122ee:	f000 bd51 	b.w	12d94 <_fwalk_sglue>
   122f2:	bf00      	nop
   122f4:	20003c30 	.word	0x20003c30
   122f8:	00014039 	.word	0x00014039
   122fc:	200034c0 	.word	0x200034c0

00012300 <cleanup_stdio>:
   12300:	4b0c      	ldr	r3, [pc, #48]	; (12334 <cleanup_stdio+0x34>)
   12302:	6841      	ldr	r1, [r0, #4]
   12304:	4299      	cmp	r1, r3
   12306:	b510      	push	{r4, lr}
   12308:	4604      	mov	r4, r0
   1230a:	d001      	beq.n	12310 <cleanup_stdio+0x10>
   1230c:	f001 fe94 	bl	14038 <_fclose_r>
   12310:	68a1      	ldr	r1, [r4, #8]
   12312:	4b09      	ldr	r3, [pc, #36]	; (12338 <cleanup_stdio+0x38>)
   12314:	4299      	cmp	r1, r3
   12316:	d002      	beq.n	1231e <cleanup_stdio+0x1e>
   12318:	4620      	mov	r0, r4
   1231a:	f001 fe8d 	bl	14038 <_fclose_r>
   1231e:	68e1      	ldr	r1, [r4, #12]
   12320:	4b06      	ldr	r3, [pc, #24]	; (1233c <cleanup_stdio+0x3c>)
   12322:	4299      	cmp	r1, r3
   12324:	d004      	beq.n	12330 <cleanup_stdio+0x30>
   12326:	4620      	mov	r0, r4
   12328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1232c:	f001 be84 	b.w	14038 <_fclose_r>
   12330:	bd10      	pop	{r4, pc}
   12332:	bf00      	nop
   12334:	20005310 	.word	0x20005310
   12338:	20005378 	.word	0x20005378
   1233c:	200053e0 	.word	0x200053e0

00012340 <global_stdio_init.part.0>:
   12340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12344:	4c2a      	ldr	r4, [pc, #168]	; (123f0 <global_stdio_init.part.0+0xb0>)
   12346:	4b2b      	ldr	r3, [pc, #172]	; (123f4 <global_stdio_init.part.0+0xb4>)
   12348:	482b      	ldr	r0, [pc, #172]	; (123f8 <global_stdio_init.part.0+0xb8>)
   1234a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1240c <global_stdio_init.part.0+0xcc>
   1234e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 12410 <global_stdio_init.part.0+0xd0>
   12352:	4f2a      	ldr	r7, [pc, #168]	; (123fc <global_stdio_init.part.0+0xbc>)
   12354:	6018      	str	r0, [r3, #0]
   12356:	2500      	movs	r5, #0
   12358:	2304      	movs	r3, #4
   1235a:	2208      	movs	r2, #8
   1235c:	4629      	mov	r1, r5
   1235e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   12362:	4e27      	ldr	r6, [pc, #156]	; (12400 <global_stdio_init.part.0+0xc0>)
   12364:	6665      	str	r5, [r4, #100]	; 0x64
   12366:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1236a:	e9c4 5500 	strd	r5, r5, [r4]
   1236e:	e9c4 5504 	strd	r5, r5, [r4, #16]
   12372:	61a5      	str	r5, [r4, #24]
   12374:	f7ff faba 	bl	118ec <memset>
   12378:	4b22      	ldr	r3, [pc, #136]	; (12404 <global_stdio_init.part.0+0xc4>)
   1237a:	6763      	str	r3, [r4, #116]	; 0x74
   1237c:	2208      	movs	r2, #8
   1237e:	4629      	mov	r1, r5
   12380:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   12384:	e9c4 4907 	strd	r4, r9, [r4, #28]
   12388:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   1238c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   12390:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   12394:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   12398:	6725      	str	r5, [r4, #112]	; 0x70
   1239a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1239e:	62e6      	str	r6, [r4, #44]	; 0x2c
   123a0:	f7ff faa4 	bl	118ec <memset>
   123a4:	4b18      	ldr	r3, [pc, #96]	; (12408 <global_stdio_init.part.0+0xc8>)
   123a6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   123aa:	4629      	mov	r1, r5
   123ac:	f104 0368 	add.w	r3, r4, #104	; 0x68
   123b0:	2208      	movs	r2, #8
   123b2:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   123b6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   123ba:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   123be:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   123c2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   123c6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   123ca:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   123ce:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   123d2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   123d6:	f7ff fa89 	bl	118ec <memset>
   123da:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   123de:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   123e2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   123e6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   123ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   123ee:	bf00      	nop
   123f0:	20005310 	.word	0x20005310
   123f4:	20005448 	.word	0x20005448
   123f8:	000122e9 	.word	0x000122e9
   123fc:	00012d2d 	.word	0x00012d2d
   12400:	00012d4d 	.word	0x00012d4d
   12404:	00010009 	.word	0x00010009
   12408:	00020012 	.word	0x00020012
   1240c:	00012cc9 	.word	0x00012cc9
   12410:	00012ced 	.word	0x00012ced

00012414 <__sinit>:
   12414:	b510      	push	{r4, lr}
   12416:	4604      	mov	r4, r0
   12418:	480a      	ldr	r0, [pc, #40]	; (12444 <__sinit+0x30>)
   1241a:	f7ff faed 	bl	119f8 <__retarget_lock_acquire_recursive>
   1241e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12420:	b923      	cbnz	r3, 1242c <__sinit+0x18>
   12422:	4b09      	ldr	r3, [pc, #36]	; (12448 <__sinit+0x34>)
   12424:	4a09      	ldr	r2, [pc, #36]	; (1244c <__sinit+0x38>)
   12426:	681b      	ldr	r3, [r3, #0]
   12428:	6362      	str	r2, [r4, #52]	; 0x34
   1242a:	b123      	cbz	r3, 12436 <__sinit+0x22>
   1242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12430:	4804      	ldr	r0, [pc, #16]	; (12444 <__sinit+0x30>)
   12432:	f7ff bae3 	b.w	119fc <__retarget_lock_release_recursive>
   12436:	f7ff ff83 	bl	12340 <global_stdio_init.part.0>
   1243a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1243e:	4801      	ldr	r0, [pc, #4]	; (12444 <__sinit+0x30>)
   12440:	f7ff badc 	b.w	119fc <__retarget_lock_release_recursive>
   12444:	200052d8 	.word	0x200052d8
   12448:	20005448 	.word	0x20005448
   1244c:	00012301 	.word	0x00012301

00012450 <__sfp_lock_acquire>:
   12450:	4801      	ldr	r0, [pc, #4]	; (12458 <__sfp_lock_acquire+0x8>)
   12452:	f7ff bad1 	b.w	119f8 <__retarget_lock_acquire_recursive>
   12456:	bf00      	nop
   12458:	200052d8 	.word	0x200052d8

0001245c <__sfp_lock_release>:
   1245c:	4801      	ldr	r0, [pc, #4]	; (12464 <__sfp_lock_release+0x8>)
   1245e:	f7ff bacd 	b.w	119fc <__retarget_lock_release_recursive>
   12462:	bf00      	nop
   12464:	200052d8 	.word	0x200052d8
	...

00012470 <memchr>:
   12470:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12474:	2a10      	cmp	r2, #16
   12476:	db2b      	blt.n	124d0 <memchr+0x60>
   12478:	f010 0f07 	tst.w	r0, #7
   1247c:	d008      	beq.n	12490 <memchr+0x20>
   1247e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12482:	3a01      	subs	r2, #1
   12484:	428b      	cmp	r3, r1
   12486:	d02d      	beq.n	124e4 <memchr+0x74>
   12488:	f010 0f07 	tst.w	r0, #7
   1248c:	b342      	cbz	r2, 124e0 <memchr+0x70>
   1248e:	d1f6      	bne.n	1247e <memchr+0xe>
   12490:	b4f0      	push	{r4, r5, r6, r7}
   12492:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12496:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1249a:	f022 0407 	bic.w	r4, r2, #7
   1249e:	f07f 0700 	mvns.w	r7, #0
   124a2:	2300      	movs	r3, #0
   124a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   124a8:	3c08      	subs	r4, #8
   124aa:	ea85 0501 	eor.w	r5, r5, r1
   124ae:	ea86 0601 	eor.w	r6, r6, r1
   124b2:	fa85 f547 	uadd8	r5, r5, r7
   124b6:	faa3 f587 	sel	r5, r3, r7
   124ba:	fa86 f647 	uadd8	r6, r6, r7
   124be:	faa5 f687 	sel	r6, r5, r7
   124c2:	b98e      	cbnz	r6, 124e8 <memchr+0x78>
   124c4:	d1ee      	bne.n	124a4 <memchr+0x34>
   124c6:	bcf0      	pop	{r4, r5, r6, r7}
   124c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   124cc:	f002 0207 	and.w	r2, r2, #7
   124d0:	b132      	cbz	r2, 124e0 <memchr+0x70>
   124d2:	f810 3b01 	ldrb.w	r3, [r0], #1
   124d6:	3a01      	subs	r2, #1
   124d8:	ea83 0301 	eor.w	r3, r3, r1
   124dc:	b113      	cbz	r3, 124e4 <memchr+0x74>
   124de:	d1f8      	bne.n	124d2 <memchr+0x62>
   124e0:	2000      	movs	r0, #0
   124e2:	4770      	bx	lr
   124e4:	3801      	subs	r0, #1
   124e6:	4770      	bx	lr
   124e8:	2d00      	cmp	r5, #0
   124ea:	bf06      	itte	eq
   124ec:	4635      	moveq	r5, r6
   124ee:	3803      	subeq	r0, #3
   124f0:	3807      	subne	r0, #7
   124f2:	f015 0f01 	tst.w	r5, #1
   124f6:	d107      	bne.n	12508 <memchr+0x98>
   124f8:	3001      	adds	r0, #1
   124fa:	f415 7f80 	tst.w	r5, #256	; 0x100
   124fe:	bf02      	ittt	eq
   12500:	3001      	addeq	r0, #1
   12502:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12506:	3001      	addeq	r0, #1
   12508:	bcf0      	pop	{r4, r5, r6, r7}
   1250a:	3801      	subs	r0, #1
   1250c:	4770      	bx	lr
   1250e:	bf00      	nop
	...

00012540 <strlen>:
   12540:	f890 f000 	pld	[r0]
   12544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12548:	f020 0107 	bic.w	r1, r0, #7
   1254c:	f06f 0c00 	mvn.w	ip, #0
   12550:	f010 0407 	ands.w	r4, r0, #7
   12554:	f891 f020 	pld	[r1, #32]
   12558:	f040 8049 	bne.w	125ee <strlen+0xae>
   1255c:	f04f 0400 	mov.w	r4, #0
   12560:	f06f 0007 	mvn.w	r0, #7
   12564:	e9d1 2300 	ldrd	r2, r3, [r1]
   12568:	f891 f040 	pld	[r1, #64]	; 0x40
   1256c:	f100 0008 	add.w	r0, r0, #8
   12570:	fa82 f24c 	uadd8	r2, r2, ip
   12574:	faa4 f28c 	sel	r2, r4, ip
   12578:	fa83 f34c 	uadd8	r3, r3, ip
   1257c:	faa2 f38c 	sel	r3, r2, ip
   12580:	bb4b      	cbnz	r3, 125d6 <strlen+0x96>
   12582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12586:	fa82 f24c 	uadd8	r2, r2, ip
   1258a:	f100 0008 	add.w	r0, r0, #8
   1258e:	faa4 f28c 	sel	r2, r4, ip
   12592:	fa83 f34c 	uadd8	r3, r3, ip
   12596:	faa2 f38c 	sel	r3, r2, ip
   1259a:	b9e3      	cbnz	r3, 125d6 <strlen+0x96>
   1259c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   125a0:	fa82 f24c 	uadd8	r2, r2, ip
   125a4:	f100 0008 	add.w	r0, r0, #8
   125a8:	faa4 f28c 	sel	r2, r4, ip
   125ac:	fa83 f34c 	uadd8	r3, r3, ip
   125b0:	faa2 f38c 	sel	r3, r2, ip
   125b4:	b97b      	cbnz	r3, 125d6 <strlen+0x96>
   125b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   125ba:	f101 0120 	add.w	r1, r1, #32
   125be:	fa82 f24c 	uadd8	r2, r2, ip
   125c2:	f100 0008 	add.w	r0, r0, #8
   125c6:	faa4 f28c 	sel	r2, r4, ip
   125ca:	fa83 f34c 	uadd8	r3, r3, ip
   125ce:	faa2 f38c 	sel	r3, r2, ip
   125d2:	2b00      	cmp	r3, #0
   125d4:	d0c6      	beq.n	12564 <strlen+0x24>
   125d6:	2a00      	cmp	r2, #0
   125d8:	bf04      	itt	eq
   125da:	3004      	addeq	r0, #4
   125dc:	461a      	moveq	r2, r3
   125de:	ba12      	rev	r2, r2
   125e0:	fab2 f282 	clz	r2, r2
   125e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   125e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   125ec:	4770      	bx	lr
   125ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   125f2:	f004 0503 	and.w	r5, r4, #3
   125f6:	f1c4 0000 	rsb	r0, r4, #0
   125fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   125fe:	f014 0f04 	tst.w	r4, #4
   12602:	f891 f040 	pld	[r1, #64]	; 0x40
   12606:	fa0c f505 	lsl.w	r5, ip, r5
   1260a:	ea62 0205 	orn	r2, r2, r5
   1260e:	bf1c      	itt	ne
   12610:	ea63 0305 	ornne	r3, r3, r5
   12614:	4662      	movne	r2, ip
   12616:	f04f 0400 	mov.w	r4, #0
   1261a:	e7a9      	b.n	12570 <strlen+0x30>

0001261c <_realloc_r>:
   1261c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12620:	4617      	mov	r7, r2
   12622:	2900      	cmp	r1, #0
   12624:	f000 8098 	beq.w	12758 <_realloc_r+0x13c>
   12628:	460c      	mov	r4, r1
   1262a:	f107 050b 	add.w	r5, r7, #11
   1262e:	4680      	mov	r8, r0
   12630:	f7ff fa4a 	bl	11ac8 <__malloc_lock>
   12634:	2d16      	cmp	r5, #22
   12636:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1263a:	d85b      	bhi.n	126f4 <_realloc_r+0xd8>
   1263c:	2510      	movs	r5, #16
   1263e:	462a      	mov	r2, r5
   12640:	42af      	cmp	r7, r5
   12642:	d85c      	bhi.n	126fe <_realloc_r+0xe2>
   12644:	f021 0603 	bic.w	r6, r1, #3
   12648:	4296      	cmp	r6, r2
   1264a:	f1a4 0908 	sub.w	r9, r4, #8
   1264e:	da62      	bge.n	12716 <_realloc_r+0xfa>
   12650:	4bbc      	ldr	r3, [pc, #752]	; (12944 <_realloc_r+0x328>)
   12652:	f8d3 c008 	ldr.w	ip, [r3, #8]
   12656:	eb09 0006 	add.w	r0, r9, r6
   1265a:	4584      	cmp	ip, r0
   1265c:	f000 8097 	beq.w	1278e <_realloc_r+0x172>
   12660:	f8d0 c004 	ldr.w	ip, [r0, #4]
   12664:	f02c 0301 	bic.w	r3, ip, #1
   12668:	4403      	add	r3, r0
   1266a:	685b      	ldr	r3, [r3, #4]
   1266c:	07db      	lsls	r3, r3, #31
   1266e:	d468      	bmi.n	12742 <_realloc_r+0x126>
   12670:	f02c 0c03 	bic.w	ip, ip, #3
   12674:	eb06 030c 	add.w	r3, r6, ip
   12678:	4293      	cmp	r3, r2
   1267a:	da47      	bge.n	1270c <_realloc_r+0xf0>
   1267c:	07cb      	lsls	r3, r1, #31
   1267e:	d410      	bmi.n	126a2 <_realloc_r+0x86>
   12680:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12684:	eba9 0a03 	sub.w	sl, r9, r3
   12688:	f8da 3004 	ldr.w	r3, [sl, #4]
   1268c:	f023 0103 	bic.w	r1, r3, #3
   12690:	448c      	add	ip, r1
   12692:	44b4      	add	ip, r6
   12694:	4594      	cmp	ip, r2
   12696:	f280 8111 	bge.w	128bc <_realloc_r+0x2a0>
   1269a:	1873      	adds	r3, r6, r1
   1269c:	4293      	cmp	r3, r2
   1269e:	f280 80e8 	bge.w	12872 <_realloc_r+0x256>
   126a2:	4639      	mov	r1, r7
   126a4:	4640      	mov	r0, r8
   126a6:	f7fe fda5 	bl	111f4 <_malloc_r>
   126aa:	4607      	mov	r7, r0
   126ac:	b1e0      	cbz	r0, 126e8 <_realloc_r+0xcc>
   126ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   126b2:	f023 0301 	bic.w	r3, r3, #1
   126b6:	444b      	add	r3, r9
   126b8:	f1a0 0208 	sub.w	r2, r0, #8
   126bc:	4293      	cmp	r3, r2
   126be:	f000 80d2 	beq.w	12866 <_realloc_r+0x24a>
   126c2:	1f32      	subs	r2, r6, #4
   126c4:	2a24      	cmp	r2, #36	; 0x24
   126c6:	f200 80f5 	bhi.w	128b4 <_realloc_r+0x298>
   126ca:	2a13      	cmp	r2, #19
   126cc:	f200 80ac 	bhi.w	12828 <_realloc_r+0x20c>
   126d0:	4603      	mov	r3, r0
   126d2:	4622      	mov	r2, r4
   126d4:	6811      	ldr	r1, [r2, #0]
   126d6:	6019      	str	r1, [r3, #0]
   126d8:	6851      	ldr	r1, [r2, #4]
   126da:	6059      	str	r1, [r3, #4]
   126dc:	6892      	ldr	r2, [r2, #8]
   126de:	609a      	str	r2, [r3, #8]
   126e0:	4621      	mov	r1, r4
   126e2:	4640      	mov	r0, r8
   126e4:	f000 f9d6 	bl	12a94 <_free_r>
   126e8:	4640      	mov	r0, r8
   126ea:	f7ff f9f3 	bl	11ad4 <__malloc_unlock>
   126ee:	4638      	mov	r0, r7
   126f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f4:	f025 0507 	bic.w	r5, r5, #7
   126f8:	2d00      	cmp	r5, #0
   126fa:	462a      	mov	r2, r5
   126fc:	daa0      	bge.n	12640 <_realloc_r+0x24>
   126fe:	230c      	movs	r3, #12
   12700:	f8c8 3000 	str.w	r3, [r8]
   12704:	2700      	movs	r7, #0
   12706:	4638      	mov	r0, r7
   12708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1270c:	461e      	mov	r6, r3
   1270e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   12712:	60d3      	str	r3, [r2, #12]
   12714:	609a      	str	r2, [r3, #8]
   12716:	1b73      	subs	r3, r6, r5
   12718:	2b0f      	cmp	r3, #15
   1271a:	d822      	bhi.n	12762 <_realloc_r+0x146>
   1271c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12720:	f003 0301 	and.w	r3, r3, #1
   12724:	4333      	orrs	r3, r6
   12726:	444e      	add	r6, r9
   12728:	f8c9 3004 	str.w	r3, [r9, #4]
   1272c:	6873      	ldr	r3, [r6, #4]
   1272e:	f043 0301 	orr.w	r3, r3, #1
   12732:	6073      	str	r3, [r6, #4]
   12734:	4640      	mov	r0, r8
   12736:	4627      	mov	r7, r4
   12738:	f7ff f9cc 	bl	11ad4 <__malloc_unlock>
   1273c:	4638      	mov	r0, r7
   1273e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12742:	07c9      	lsls	r1, r1, #31
   12744:	d4ad      	bmi.n	126a2 <_realloc_r+0x86>
   12746:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1274a:	eba9 0a03 	sub.w	sl, r9, r3
   1274e:	f8da 1004 	ldr.w	r1, [sl, #4]
   12752:	f021 0103 	bic.w	r1, r1, #3
   12756:	e7a0      	b.n	1269a <_realloc_r+0x7e>
   12758:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1275c:	4611      	mov	r1, r2
   1275e:	f7fe bd49 	b.w	111f4 <_malloc_r>
   12762:	f8d9 2004 	ldr.w	r2, [r9, #4]
   12766:	eb09 0105 	add.w	r1, r9, r5
   1276a:	f002 0201 	and.w	r2, r2, #1
   1276e:	444e      	add	r6, r9
   12770:	f043 0301 	orr.w	r3, r3, #1
   12774:	432a      	orrs	r2, r5
   12776:	f8c9 2004 	str.w	r2, [r9, #4]
   1277a:	604b      	str	r3, [r1, #4]
   1277c:	6873      	ldr	r3, [r6, #4]
   1277e:	f043 0301 	orr.w	r3, r3, #1
   12782:	3108      	adds	r1, #8
   12784:	6073      	str	r3, [r6, #4]
   12786:	4640      	mov	r0, r8
   12788:	f000 f984 	bl	12a94 <_free_r>
   1278c:	e7d2      	b.n	12734 <_realloc_r+0x118>
   1278e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12792:	f020 0b03 	bic.w	fp, r0, #3
   12796:	eb06 0c0b 	add.w	ip, r6, fp
   1279a:	f105 0010 	add.w	r0, r5, #16
   1279e:	4584      	cmp	ip, r0
   127a0:	da4d      	bge.n	1283e <_realloc_r+0x222>
   127a2:	07c9      	lsls	r1, r1, #31
   127a4:	f53f af7d 	bmi.w	126a2 <_realloc_r+0x86>
   127a8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   127ac:	eba9 0a01 	sub.w	sl, r9, r1
   127b0:	f8da 1004 	ldr.w	r1, [sl, #4]
   127b4:	f021 0103 	bic.w	r1, r1, #3
   127b8:	448b      	add	fp, r1
   127ba:	44b3      	add	fp, r6
   127bc:	4558      	cmp	r0, fp
   127be:	f73f af6c 	bgt.w	1269a <_realloc_r+0x7e>
   127c2:	4657      	mov	r7, sl
   127c4:	f8da 100c 	ldr.w	r1, [sl, #12]
   127c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
   127cc:	1f32      	subs	r2, r6, #4
   127ce:	2a24      	cmp	r2, #36	; 0x24
   127d0:	60c1      	str	r1, [r0, #12]
   127d2:	6088      	str	r0, [r1, #8]
   127d4:	f200 80db 	bhi.w	1298e <_realloc_r+0x372>
   127d8:	2a13      	cmp	r2, #19
   127da:	f240 80d6 	bls.w	1298a <_realloc_r+0x36e>
   127de:	6821      	ldr	r1, [r4, #0]
   127e0:	f8ca 1008 	str.w	r1, [sl, #8]
   127e4:	6861      	ldr	r1, [r4, #4]
   127e6:	f8ca 100c 	str.w	r1, [sl, #12]
   127ea:	2a1b      	cmp	r2, #27
   127ec:	f200 80df 	bhi.w	129ae <_realloc_r+0x392>
   127f0:	3408      	adds	r4, #8
   127f2:	f10a 0210 	add.w	r2, sl, #16
   127f6:	6821      	ldr	r1, [r4, #0]
   127f8:	6011      	str	r1, [r2, #0]
   127fa:	6861      	ldr	r1, [r4, #4]
   127fc:	6051      	str	r1, [r2, #4]
   127fe:	68a1      	ldr	r1, [r4, #8]
   12800:	6091      	str	r1, [r2, #8]
   12802:	eb0a 0105 	add.w	r1, sl, r5
   12806:	ebab 0205 	sub.w	r2, fp, r5
   1280a:	f042 0201 	orr.w	r2, r2, #1
   1280e:	6099      	str	r1, [r3, #8]
   12810:	604a      	str	r2, [r1, #4]
   12812:	f8da 3004 	ldr.w	r3, [sl, #4]
   12816:	f003 0301 	and.w	r3, r3, #1
   1281a:	432b      	orrs	r3, r5
   1281c:	4640      	mov	r0, r8
   1281e:	f8ca 3004 	str.w	r3, [sl, #4]
   12822:	f7ff f957 	bl	11ad4 <__malloc_unlock>
   12826:	e76e      	b.n	12706 <_realloc_r+0xea>
   12828:	6823      	ldr	r3, [r4, #0]
   1282a:	6003      	str	r3, [r0, #0]
   1282c:	6863      	ldr	r3, [r4, #4]
   1282e:	6043      	str	r3, [r0, #4]
   12830:	2a1b      	cmp	r2, #27
   12832:	d868      	bhi.n	12906 <_realloc_r+0x2ea>
   12834:	f104 0208 	add.w	r2, r4, #8
   12838:	f100 0308 	add.w	r3, r0, #8
   1283c:	e74a      	b.n	126d4 <_realloc_r+0xb8>
   1283e:	eb09 0205 	add.w	r2, r9, r5
   12842:	609a      	str	r2, [r3, #8]
   12844:	ebac 0305 	sub.w	r3, ip, r5
   12848:	f043 0301 	orr.w	r3, r3, #1
   1284c:	6053      	str	r3, [r2, #4]
   1284e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12852:	f003 0301 	and.w	r3, r3, #1
   12856:	432b      	orrs	r3, r5
   12858:	4640      	mov	r0, r8
   1285a:	f844 3c04 	str.w	r3, [r4, #-4]
   1285e:	f7ff f939 	bl	11ad4 <__malloc_unlock>
   12862:	4627      	mov	r7, r4
   12864:	e74f      	b.n	12706 <_realloc_r+0xea>
   12866:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1286a:	f023 0303 	bic.w	r3, r3, #3
   1286e:	441e      	add	r6, r3
   12870:	e751      	b.n	12716 <_realloc_r+0xfa>
   12872:	4657      	mov	r7, sl
   12874:	f8da 100c 	ldr.w	r1, [sl, #12]
   12878:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1287c:	1f32      	subs	r2, r6, #4
   1287e:	2a24      	cmp	r2, #36	; 0x24
   12880:	60c1      	str	r1, [r0, #12]
   12882:	6088      	str	r0, [r1, #8]
   12884:	d84c      	bhi.n	12920 <_realloc_r+0x304>
   12886:	2a13      	cmp	r2, #19
   12888:	d948      	bls.n	1291c <_realloc_r+0x300>
   1288a:	6821      	ldr	r1, [r4, #0]
   1288c:	f8ca 1008 	str.w	r1, [sl, #8]
   12890:	6861      	ldr	r1, [r4, #4]
   12892:	f8ca 100c 	str.w	r1, [sl, #12]
   12896:	2a1b      	cmp	r2, #27
   12898:	d856      	bhi.n	12948 <_realloc_r+0x32c>
   1289a:	3408      	adds	r4, #8
   1289c:	f10a 0210 	add.w	r2, sl, #16
   128a0:	461e      	mov	r6, r3
   128a2:	6823      	ldr	r3, [r4, #0]
   128a4:	6013      	str	r3, [r2, #0]
   128a6:	6863      	ldr	r3, [r4, #4]
   128a8:	6053      	str	r3, [r2, #4]
   128aa:	68a3      	ldr	r3, [r4, #8]
   128ac:	6093      	str	r3, [r2, #8]
   128ae:	46d1      	mov	r9, sl
   128b0:	463c      	mov	r4, r7
   128b2:	e730      	b.n	12716 <_realloc_r+0xfa>
   128b4:	4621      	mov	r1, r4
   128b6:	f7fe ff7d 	bl	117b4 <memmove>
   128ba:	e711      	b.n	126e0 <_realloc_r+0xc4>
   128bc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   128c0:	4657      	mov	r7, sl
   128c2:	60cb      	str	r3, [r1, #12]
   128c4:	6099      	str	r1, [r3, #8]
   128c6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   128ca:	f8da 300c 	ldr.w	r3, [sl, #12]
   128ce:	60cb      	str	r3, [r1, #12]
   128d0:	1f32      	subs	r2, r6, #4
   128d2:	2a24      	cmp	r2, #36	; 0x24
   128d4:	6099      	str	r1, [r3, #8]
   128d6:	d82d      	bhi.n	12934 <_realloc_r+0x318>
   128d8:	2a13      	cmp	r2, #19
   128da:	d929      	bls.n	12930 <_realloc_r+0x314>
   128dc:	6823      	ldr	r3, [r4, #0]
   128de:	f8ca 3008 	str.w	r3, [sl, #8]
   128e2:	6863      	ldr	r3, [r4, #4]
   128e4:	f8ca 300c 	str.w	r3, [sl, #12]
   128e8:	2a1b      	cmp	r2, #27
   128ea:	d842      	bhi.n	12972 <_realloc_r+0x356>
   128ec:	3408      	adds	r4, #8
   128ee:	f10a 0310 	add.w	r3, sl, #16
   128f2:	6822      	ldr	r2, [r4, #0]
   128f4:	601a      	str	r2, [r3, #0]
   128f6:	6862      	ldr	r2, [r4, #4]
   128f8:	605a      	str	r2, [r3, #4]
   128fa:	68a2      	ldr	r2, [r4, #8]
   128fc:	609a      	str	r2, [r3, #8]
   128fe:	4666      	mov	r6, ip
   12900:	46d1      	mov	r9, sl
   12902:	463c      	mov	r4, r7
   12904:	e707      	b.n	12716 <_realloc_r+0xfa>
   12906:	68a3      	ldr	r3, [r4, #8]
   12908:	6083      	str	r3, [r0, #8]
   1290a:	68e3      	ldr	r3, [r4, #12]
   1290c:	60c3      	str	r3, [r0, #12]
   1290e:	2a24      	cmp	r2, #36	; 0x24
   12910:	d026      	beq.n	12960 <_realloc_r+0x344>
   12912:	f104 0210 	add.w	r2, r4, #16
   12916:	f100 0310 	add.w	r3, r0, #16
   1291a:	e6db      	b.n	126d4 <_realloc_r+0xb8>
   1291c:	463a      	mov	r2, r7
   1291e:	e7bf      	b.n	128a0 <_realloc_r+0x284>
   12920:	4621      	mov	r1, r4
   12922:	4638      	mov	r0, r7
   12924:	461e      	mov	r6, r3
   12926:	46d1      	mov	r9, sl
   12928:	f7fe ff44 	bl	117b4 <memmove>
   1292c:	463c      	mov	r4, r7
   1292e:	e6f2      	b.n	12716 <_realloc_r+0xfa>
   12930:	463b      	mov	r3, r7
   12932:	e7de      	b.n	128f2 <_realloc_r+0x2d6>
   12934:	4621      	mov	r1, r4
   12936:	4638      	mov	r0, r7
   12938:	4666      	mov	r6, ip
   1293a:	46d1      	mov	r9, sl
   1293c:	f7fe ff3a 	bl	117b4 <memmove>
   12940:	463c      	mov	r4, r7
   12942:	e6e8      	b.n	12716 <_realloc_r+0xfa>
   12944:	20003820 	.word	0x20003820
   12948:	68a1      	ldr	r1, [r4, #8]
   1294a:	f8ca 1010 	str.w	r1, [sl, #16]
   1294e:	68e1      	ldr	r1, [r4, #12]
   12950:	f8ca 1014 	str.w	r1, [sl, #20]
   12954:	2a24      	cmp	r2, #36	; 0x24
   12956:	d020      	beq.n	1299a <_realloc_r+0x37e>
   12958:	3410      	adds	r4, #16
   1295a:	f10a 0218 	add.w	r2, sl, #24
   1295e:	e79f      	b.n	128a0 <_realloc_r+0x284>
   12960:	6923      	ldr	r3, [r4, #16]
   12962:	6103      	str	r3, [r0, #16]
   12964:	6961      	ldr	r1, [r4, #20]
   12966:	6141      	str	r1, [r0, #20]
   12968:	f104 0218 	add.w	r2, r4, #24
   1296c:	f100 0318 	add.w	r3, r0, #24
   12970:	e6b0      	b.n	126d4 <_realloc_r+0xb8>
   12972:	68a3      	ldr	r3, [r4, #8]
   12974:	f8ca 3010 	str.w	r3, [sl, #16]
   12978:	68e3      	ldr	r3, [r4, #12]
   1297a:	f8ca 3014 	str.w	r3, [sl, #20]
   1297e:	2a24      	cmp	r2, #36	; 0x24
   12980:	d021      	beq.n	129c6 <_realloc_r+0x3aa>
   12982:	3410      	adds	r4, #16
   12984:	f10a 0318 	add.w	r3, sl, #24
   12988:	e7b3      	b.n	128f2 <_realloc_r+0x2d6>
   1298a:	463a      	mov	r2, r7
   1298c:	e733      	b.n	127f6 <_realloc_r+0x1da>
   1298e:	4621      	mov	r1, r4
   12990:	4638      	mov	r0, r7
   12992:	f7fe ff0f 	bl	117b4 <memmove>
   12996:	4b16      	ldr	r3, [pc, #88]	; (129f0 <_realloc_r+0x3d4>)
   12998:	e733      	b.n	12802 <_realloc_r+0x1e6>
   1299a:	6922      	ldr	r2, [r4, #16]
   1299c:	f8ca 2018 	str.w	r2, [sl, #24]
   129a0:	6962      	ldr	r2, [r4, #20]
   129a2:	f8ca 201c 	str.w	r2, [sl, #28]
   129a6:	3418      	adds	r4, #24
   129a8:	f10a 0220 	add.w	r2, sl, #32
   129ac:	e778      	b.n	128a0 <_realloc_r+0x284>
   129ae:	68a1      	ldr	r1, [r4, #8]
   129b0:	f8ca 1010 	str.w	r1, [sl, #16]
   129b4:	68e1      	ldr	r1, [r4, #12]
   129b6:	f8ca 1014 	str.w	r1, [sl, #20]
   129ba:	2a24      	cmp	r2, #36	; 0x24
   129bc:	d00d      	beq.n	129da <_realloc_r+0x3be>
   129be:	3410      	adds	r4, #16
   129c0:	f10a 0218 	add.w	r2, sl, #24
   129c4:	e717      	b.n	127f6 <_realloc_r+0x1da>
   129c6:	6923      	ldr	r3, [r4, #16]
   129c8:	f8ca 3018 	str.w	r3, [sl, #24]
   129cc:	6963      	ldr	r3, [r4, #20]
   129ce:	f8ca 301c 	str.w	r3, [sl, #28]
   129d2:	3418      	adds	r4, #24
   129d4:	f10a 0320 	add.w	r3, sl, #32
   129d8:	e78b      	b.n	128f2 <_realloc_r+0x2d6>
   129da:	6922      	ldr	r2, [r4, #16]
   129dc:	f8ca 2018 	str.w	r2, [sl, #24]
   129e0:	6962      	ldr	r2, [r4, #20]
   129e2:	f8ca 201c 	str.w	r2, [sl, #28]
   129e6:	3418      	adds	r4, #24
   129e8:	f10a 0220 	add.w	r2, sl, #32
   129ec:	e703      	b.n	127f6 <_realloc_r+0x1da>
   129ee:	bf00      	nop
   129f0:	20003820 	.word	0x20003820

000129f4 <_malloc_trim_r>:
   129f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129f6:	4f24      	ldr	r7, [pc, #144]	; (12a88 <_malloc_trim_r+0x94>)
   129f8:	460c      	mov	r4, r1
   129fa:	4606      	mov	r6, r0
   129fc:	f7ff f864 	bl	11ac8 <__malloc_lock>
   12a00:	68bb      	ldr	r3, [r7, #8]
   12a02:	685d      	ldr	r5, [r3, #4]
   12a04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12a08:	310f      	adds	r1, #15
   12a0a:	f025 0503 	bic.w	r5, r5, #3
   12a0e:	194b      	adds	r3, r1, r5
   12a10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12a14:	f023 030f 	bic.w	r3, r3, #15
   12a18:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   12a1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12a20:	db07      	blt.n	12a32 <_malloc_trim_r+0x3e>
   12a22:	2100      	movs	r1, #0
   12a24:	4630      	mov	r0, r6
   12a26:	f000 f9a3 	bl	12d70 <_sbrk_r>
   12a2a:	68bb      	ldr	r3, [r7, #8]
   12a2c:	442b      	add	r3, r5
   12a2e:	4298      	cmp	r0, r3
   12a30:	d004      	beq.n	12a3c <_malloc_trim_r+0x48>
   12a32:	4630      	mov	r0, r6
   12a34:	f7ff f84e 	bl	11ad4 <__malloc_unlock>
   12a38:	2000      	movs	r0, #0
   12a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a3c:	4261      	negs	r1, r4
   12a3e:	4630      	mov	r0, r6
   12a40:	f000 f996 	bl	12d70 <_sbrk_r>
   12a44:	3001      	adds	r0, #1
   12a46:	d00d      	beq.n	12a64 <_malloc_trim_r+0x70>
   12a48:	4a10      	ldr	r2, [pc, #64]	; (12a8c <_malloc_trim_r+0x98>)
   12a4a:	68bb      	ldr	r3, [r7, #8]
   12a4c:	1b2d      	subs	r5, r5, r4
   12a4e:	f045 0501 	orr.w	r5, r5, #1
   12a52:	605d      	str	r5, [r3, #4]
   12a54:	6813      	ldr	r3, [r2, #0]
   12a56:	4630      	mov	r0, r6
   12a58:	1b1b      	subs	r3, r3, r4
   12a5a:	6013      	str	r3, [r2, #0]
   12a5c:	f7ff f83a 	bl	11ad4 <__malloc_unlock>
   12a60:	2001      	movs	r0, #1
   12a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12a64:	2100      	movs	r1, #0
   12a66:	4630      	mov	r0, r6
   12a68:	f000 f982 	bl	12d70 <_sbrk_r>
   12a6c:	68ba      	ldr	r2, [r7, #8]
   12a6e:	1a83      	subs	r3, r0, r2
   12a70:	2b0f      	cmp	r3, #15
   12a72:	ddde      	ble.n	12a32 <_malloc_trim_r+0x3e>
   12a74:	f043 0301 	orr.w	r3, r3, #1
   12a78:	6053      	str	r3, [r2, #4]
   12a7a:	4b05      	ldr	r3, [pc, #20]	; (12a90 <_malloc_trim_r+0x9c>)
   12a7c:	4903      	ldr	r1, [pc, #12]	; (12a8c <_malloc_trim_r+0x98>)
   12a7e:	681b      	ldr	r3, [r3, #0]
   12a80:	1ac0      	subs	r0, r0, r3
   12a82:	6008      	str	r0, [r1, #0]
   12a84:	e7d5      	b.n	12a32 <_malloc_trim_r+0x3e>
   12a86:	bf00      	nop
   12a88:	20003820 	.word	0x20003820
   12a8c:	200052dc 	.word	0x200052dc
   12a90:	20003c28 	.word	0x20003c28

00012a94 <_free_r>:
   12a94:	2900      	cmp	r1, #0
   12a96:	d061      	beq.n	12b5c <_free_r+0xc8>
   12a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a9a:	460c      	mov	r4, r1
   12a9c:	4606      	mov	r6, r0
   12a9e:	f7ff f813 	bl	11ac8 <__malloc_lock>
   12aa2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   12aa6:	4f7b      	ldr	r7, [pc, #492]	; (12c94 <_free_r+0x200>)
   12aa8:	f1a4 0508 	sub.w	r5, r4, #8
   12aac:	f022 0101 	bic.w	r1, r2, #1
   12ab0:	eb05 0c01 	add.w	ip, r5, r1
   12ab4:	68b8      	ldr	r0, [r7, #8]
   12ab6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   12aba:	4560      	cmp	r0, ip
   12abc:	f023 0303 	bic.w	r3, r3, #3
   12ac0:	f000 808b 	beq.w	12bda <_free_r+0x146>
   12ac4:	07d2      	lsls	r2, r2, #31
   12ac6:	f8cc 3004 	str.w	r3, [ip, #4]
   12aca:	d432      	bmi.n	12b32 <_free_r+0x9e>
   12acc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12ad0:	1aad      	subs	r5, r5, r2
   12ad2:	4411      	add	r1, r2
   12ad4:	68aa      	ldr	r2, [r5, #8]
   12ad6:	f107 0008 	add.w	r0, r7, #8
   12ada:	4282      	cmp	r2, r0
   12adc:	d06a      	beq.n	12bb4 <_free_r+0x120>
   12ade:	eb0c 0403 	add.w	r4, ip, r3
   12ae2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   12ae6:	68ec      	ldr	r4, [r5, #12]
   12ae8:	60d4      	str	r4, [r2, #12]
   12aea:	f01e 0f01 	tst.w	lr, #1
   12aee:	60a2      	str	r2, [r4, #8]
   12af0:	f000 8097 	beq.w	12c22 <_free_r+0x18e>
   12af4:	f041 0301 	orr.w	r3, r1, #1
   12af8:	606b      	str	r3, [r5, #4]
   12afa:	f8cc 1000 	str.w	r1, [ip]
   12afe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12b02:	d235      	bcs.n	12b70 <_free_r+0xdc>
   12b04:	6878      	ldr	r0, [r7, #4]
   12b06:	08cb      	lsrs	r3, r1, #3
   12b08:	2201      	movs	r2, #1
   12b0a:	0949      	lsrs	r1, r1, #5
   12b0c:	3301      	adds	r3, #1
   12b0e:	408a      	lsls	r2, r1
   12b10:	4302      	orrs	r2, r0
   12b12:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12b16:	607a      	str	r2, [r7, #4]
   12b18:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   12b1c:	3a08      	subs	r2, #8
   12b1e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   12b22:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   12b26:	60cd      	str	r5, [r1, #12]
   12b28:	4630      	mov	r0, r6
   12b2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12b2e:	f7fe bfd1 	b.w	11ad4 <__malloc_unlock>
   12b32:	eb0c 0203 	add.w	r2, ip, r3
   12b36:	6852      	ldr	r2, [r2, #4]
   12b38:	07d0      	lsls	r0, r2, #31
   12b3a:	d410      	bmi.n	12b5e <_free_r+0xca>
   12b3c:	4419      	add	r1, r3
   12b3e:	f107 0008 	add.w	r0, r7, #8
   12b42:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12b46:	4283      	cmp	r3, r0
   12b48:	d073      	beq.n	12c32 <_free_r+0x19e>
   12b4a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   12b4e:	60da      	str	r2, [r3, #12]
   12b50:	6093      	str	r3, [r2, #8]
   12b52:	f041 0301 	orr.w	r3, r1, #1
   12b56:	606b      	str	r3, [r5, #4]
   12b58:	5069      	str	r1, [r5, r1]
   12b5a:	e7d0      	b.n	12afe <_free_r+0x6a>
   12b5c:	4770      	bx	lr
   12b5e:	f041 0301 	orr.w	r3, r1, #1
   12b62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12b66:	f844 3c04 	str.w	r3, [r4, #-4]
   12b6a:	f8cc 1000 	str.w	r1, [ip]
   12b6e:	d3c9      	bcc.n	12b04 <_free_r+0x70>
   12b70:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12b74:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12b78:	d248      	bcs.n	12c0c <_free_r+0x178>
   12b7a:	098b      	lsrs	r3, r1, #6
   12b7c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12b80:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12b84:	00c3      	lsls	r3, r0, #3
   12b86:	18f8      	adds	r0, r7, r3
   12b88:	58fb      	ldr	r3, [r7, r3]
   12b8a:	3808      	subs	r0, #8
   12b8c:	4298      	cmp	r0, r3
   12b8e:	d059      	beq.n	12c44 <_free_r+0x1b0>
   12b90:	685a      	ldr	r2, [r3, #4]
   12b92:	f022 0203 	bic.w	r2, r2, #3
   12b96:	428a      	cmp	r2, r1
   12b98:	d902      	bls.n	12ba0 <_free_r+0x10c>
   12b9a:	689b      	ldr	r3, [r3, #8]
   12b9c:	4298      	cmp	r0, r3
   12b9e:	d1f7      	bne.n	12b90 <_free_r+0xfc>
   12ba0:	68d8      	ldr	r0, [r3, #12]
   12ba2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12ba6:	6085      	str	r5, [r0, #8]
   12ba8:	60dd      	str	r5, [r3, #12]
   12baa:	4630      	mov	r0, r6
   12bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12bb0:	f7fe bf90 	b.w	11ad4 <__malloc_unlock>
   12bb4:	eb0c 0203 	add.w	r2, ip, r3
   12bb8:	6852      	ldr	r2, [r2, #4]
   12bba:	07d2      	lsls	r2, r2, #31
   12bbc:	d463      	bmi.n	12c86 <_free_r+0x1f2>
   12bbe:	440b      	add	r3, r1
   12bc0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12bc4:	60ca      	str	r2, [r1, #12]
   12bc6:	6091      	str	r1, [r2, #8]
   12bc8:	f043 0201 	orr.w	r2, r3, #1
   12bcc:	606a      	str	r2, [r5, #4]
   12bce:	4630      	mov	r0, r6
   12bd0:	50eb      	str	r3, [r5, r3]
   12bd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12bd6:	f7fe bf7d 	b.w	11ad4 <__malloc_unlock>
   12bda:	440b      	add	r3, r1
   12bdc:	07d1      	lsls	r1, r2, #31
   12bde:	d407      	bmi.n	12bf0 <_free_r+0x15c>
   12be0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12be4:	1aad      	subs	r5, r5, r2
   12be6:	4413      	add	r3, r2
   12be8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   12bec:	60ca      	str	r2, [r1, #12]
   12bee:	6091      	str	r1, [r2, #8]
   12bf0:	f043 0201 	orr.w	r2, r3, #1
   12bf4:	606a      	str	r2, [r5, #4]
   12bf6:	4a28      	ldr	r2, [pc, #160]	; (12c98 <_free_r+0x204>)
   12bf8:	60bd      	str	r5, [r7, #8]
   12bfa:	6812      	ldr	r2, [r2, #0]
   12bfc:	429a      	cmp	r2, r3
   12bfe:	d893      	bhi.n	12b28 <_free_r+0x94>
   12c00:	4b26      	ldr	r3, [pc, #152]	; (12c9c <_free_r+0x208>)
   12c02:	4630      	mov	r0, r6
   12c04:	6819      	ldr	r1, [r3, #0]
   12c06:	f7ff fef5 	bl	129f4 <_malloc_trim_r>
   12c0a:	e78d      	b.n	12b28 <_free_r+0x94>
   12c0c:	2b14      	cmp	r3, #20
   12c0e:	d90a      	bls.n	12c26 <_free_r+0x192>
   12c10:	2b54      	cmp	r3, #84	; 0x54
   12c12:	d81f      	bhi.n	12c54 <_free_r+0x1c0>
   12c14:	0b0b      	lsrs	r3, r1, #12
   12c16:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   12c1a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   12c1e:	00c3      	lsls	r3, r0, #3
   12c20:	e7b1      	b.n	12b86 <_free_r+0xf2>
   12c22:	4419      	add	r1, r3
   12c24:	e78d      	b.n	12b42 <_free_r+0xae>
   12c26:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   12c2a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   12c2e:	00c3      	lsls	r3, r0, #3
   12c30:	e7a9      	b.n	12b86 <_free_r+0xf2>
   12c32:	f041 0301 	orr.w	r3, r1, #1
   12c36:	e9c7 5504 	strd	r5, r5, [r7, #16]
   12c3a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   12c3e:	606b      	str	r3, [r5, #4]
   12c40:	5069      	str	r1, [r5, r1]
   12c42:	e771      	b.n	12b28 <_free_r+0x94>
   12c44:	6879      	ldr	r1, [r7, #4]
   12c46:	1092      	asrs	r2, r2, #2
   12c48:	2401      	movs	r4, #1
   12c4a:	fa04 f202 	lsl.w	r2, r4, r2
   12c4e:	430a      	orrs	r2, r1
   12c50:	607a      	str	r2, [r7, #4]
   12c52:	e7a6      	b.n	12ba2 <_free_r+0x10e>
   12c54:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12c58:	d806      	bhi.n	12c68 <_free_r+0x1d4>
   12c5a:	0bcb      	lsrs	r3, r1, #15
   12c5c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12c60:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12c64:	00c3      	lsls	r3, r0, #3
   12c66:	e78e      	b.n	12b86 <_free_r+0xf2>
   12c68:	f240 5254 	movw	r2, #1364	; 0x554
   12c6c:	4293      	cmp	r3, r2
   12c6e:	d806      	bhi.n	12c7e <_free_r+0x1ea>
   12c70:	0c8b      	lsrs	r3, r1, #18
   12c72:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12c76:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   12c7a:	00c3      	lsls	r3, r0, #3
   12c7c:	e783      	b.n	12b86 <_free_r+0xf2>
   12c7e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12c82:	227e      	movs	r2, #126	; 0x7e
   12c84:	e77f      	b.n	12b86 <_free_r+0xf2>
   12c86:	f041 0301 	orr.w	r3, r1, #1
   12c8a:	606b      	str	r3, [r5, #4]
   12c8c:	f8cc 1000 	str.w	r1, [ip]
   12c90:	e74a      	b.n	12b28 <_free_r+0x94>
   12c92:	bf00      	nop
   12c94:	20003820 	.word	0x20003820
   12c98:	20003c2c 	.word	0x20003c2c
   12c9c:	2000530c 	.word	0x2000530c

00012ca0 <fiprintf>:
   12ca0:	b40e      	push	{r1, r2, r3}
   12ca2:	b510      	push	{r4, lr}
   12ca4:	b083      	sub	sp, #12
   12ca6:	ab05      	add	r3, sp, #20
   12ca8:	4c06      	ldr	r4, [pc, #24]	; (12cc4 <fiprintf+0x24>)
   12caa:	f853 2b04 	ldr.w	r2, [r3], #4
   12cae:	9301      	str	r3, [sp, #4]
   12cb0:	4601      	mov	r1, r0
   12cb2:	6820      	ldr	r0, [r4, #0]
   12cb4:	f000 f8e4 	bl	12e80 <_vfiprintf_r>
   12cb8:	b003      	add	sp, #12
   12cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12cbe:	b003      	add	sp, #12
   12cc0:	4770      	bx	lr
   12cc2:	bf00      	nop
   12cc4:	20003c3c 	.word	0x20003c3c

00012cc8 <__sread>:
   12cc8:	b510      	push	{r4, lr}
   12cca:	460c      	mov	r4, r1
   12ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12cd0:	f002 fb12 	bl	152f8 <_read_r>
   12cd4:	2800      	cmp	r0, #0
   12cd6:	db03      	blt.n	12ce0 <__sread+0x18>
   12cd8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   12cda:	4403      	add	r3, r0
   12cdc:	6523      	str	r3, [r4, #80]	; 0x50
   12cde:	bd10      	pop	{r4, pc}
   12ce0:	89a3      	ldrh	r3, [r4, #12]
   12ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   12ce6:	81a3      	strh	r3, [r4, #12]
   12ce8:	bd10      	pop	{r4, pc}
   12cea:	bf00      	nop

00012cec <__swrite>:
   12cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cf0:	460c      	mov	r4, r1
   12cf2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   12cf6:	461f      	mov	r7, r3
   12cf8:	05cb      	lsls	r3, r1, #23
   12cfa:	4605      	mov	r5, r0
   12cfc:	4616      	mov	r6, r2
   12cfe:	d40b      	bmi.n	12d18 <__swrite+0x2c>
   12d00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   12d04:	81a1      	strh	r1, [r4, #12]
   12d06:	463b      	mov	r3, r7
   12d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12d0c:	4632      	mov	r2, r6
   12d0e:	4628      	mov	r0, r5
   12d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12d14:	f000 b862 	b.w	12ddc <_write_r>
   12d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12d1c:	2302      	movs	r3, #2
   12d1e:	2200      	movs	r2, #0
   12d20:	f002 fad4 	bl	152cc <_lseek_r>
   12d24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   12d28:	e7ea      	b.n	12d00 <__swrite+0x14>
   12d2a:	bf00      	nop

00012d2c <__sseek>:
   12d2c:	b510      	push	{r4, lr}
   12d2e:	460c      	mov	r4, r1
   12d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12d34:	f002 faca 	bl	152cc <_lseek_r>
   12d38:	89a3      	ldrh	r3, [r4, #12]
   12d3a:	1c42      	adds	r2, r0, #1
   12d3c:	bf0e      	itee	eq
   12d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   12d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   12d46:	6520      	strne	r0, [r4, #80]	; 0x50
   12d48:	81a3      	strh	r3, [r4, #12]
   12d4a:	bd10      	pop	{r4, pc}

00012d4c <__sclose>:
   12d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12d50:	f002 b9c0 	b.w	150d4 <_close_r>

00012d54 <__ascii_wctomb>:
   12d54:	b149      	cbz	r1, 12d6a <__ascii_wctomb+0x16>
   12d56:	2aff      	cmp	r2, #255	; 0xff
   12d58:	d802      	bhi.n	12d60 <__ascii_wctomb+0xc>
   12d5a:	700a      	strb	r2, [r1, #0]
   12d5c:	2001      	movs	r0, #1
   12d5e:	4770      	bx	lr
   12d60:	238a      	movs	r3, #138	; 0x8a
   12d62:	6003      	str	r3, [r0, #0]
   12d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12d68:	4770      	bx	lr
   12d6a:	4608      	mov	r0, r1
   12d6c:	4770      	bx	lr
   12d6e:	bf00      	nop

00012d70 <_sbrk_r>:
   12d70:	b538      	push	{r3, r4, r5, lr}
   12d72:	4d07      	ldr	r5, [pc, #28]	; (12d90 <_sbrk_r+0x20>)
   12d74:	2200      	movs	r2, #0
   12d76:	4604      	mov	r4, r0
   12d78:	4608      	mov	r0, r1
   12d7a:	602a      	str	r2, [r5, #0]
   12d7c:	f7fb fade 	bl	e33c <_sbrk>
   12d80:	1c43      	adds	r3, r0, #1
   12d82:	d000      	beq.n	12d86 <_sbrk_r+0x16>
   12d84:	bd38      	pop	{r3, r4, r5, pc}
   12d86:	682b      	ldr	r3, [r5, #0]
   12d88:	2b00      	cmp	r3, #0
   12d8a:	d0fb      	beq.n	12d84 <_sbrk_r+0x14>
   12d8c:	6023      	str	r3, [r4, #0]
   12d8e:	bd38      	pop	{r3, r4, r5, pc}
   12d90:	20005530 	.word	0x20005530

00012d94 <_fwalk_sglue>:
   12d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d98:	4680      	mov	r8, r0
   12d9a:	460f      	mov	r7, r1
   12d9c:	4616      	mov	r6, r2
   12d9e:	f04f 0900 	mov.w	r9, #0
   12da2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12da6:	3d01      	subs	r5, #1
   12da8:	d411      	bmi.n	12dce <_fwalk_sglue+0x3a>
   12daa:	89a3      	ldrh	r3, [r4, #12]
   12dac:	2b01      	cmp	r3, #1
   12dae:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12db2:	d908      	bls.n	12dc6 <_fwalk_sglue+0x32>
   12db4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12db8:	3301      	adds	r3, #1
   12dba:	4621      	mov	r1, r4
   12dbc:	d003      	beq.n	12dc6 <_fwalk_sglue+0x32>
   12dbe:	4640      	mov	r0, r8
   12dc0:	47b8      	blx	r7
   12dc2:	ea49 0900 	orr.w	r9, r9, r0
   12dc6:	1c6b      	adds	r3, r5, #1
   12dc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
   12dcc:	d1ed      	bne.n	12daa <_fwalk_sglue+0x16>
   12dce:	6836      	ldr	r6, [r6, #0]
   12dd0:	2e00      	cmp	r6, #0
   12dd2:	d1e6      	bne.n	12da2 <_fwalk_sglue+0xe>
   12dd4:	4648      	mov	r0, r9
   12dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12dda:	bf00      	nop

00012ddc <_write_r>:
   12ddc:	b538      	push	{r3, r4, r5, lr}
   12dde:	460c      	mov	r4, r1
   12de0:	4d08      	ldr	r5, [pc, #32]	; (12e04 <_write_r+0x28>)
   12de2:	4684      	mov	ip, r0
   12de4:	4611      	mov	r1, r2
   12de6:	4620      	mov	r0, r4
   12de8:	461a      	mov	r2, r3
   12dea:	2300      	movs	r3, #0
   12dec:	602b      	str	r3, [r5, #0]
   12dee:	4664      	mov	r4, ip
   12df0:	f7f9 fed2 	bl	cb98 <_write>
   12df4:	1c43      	adds	r3, r0, #1
   12df6:	d000      	beq.n	12dfa <_write_r+0x1e>
   12df8:	bd38      	pop	{r3, r4, r5, pc}
   12dfa:	682b      	ldr	r3, [r5, #0]
   12dfc:	2b00      	cmp	r3, #0
   12dfe:	d0fb      	beq.n	12df8 <_write_r+0x1c>
   12e00:	6023      	str	r3, [r4, #0]
   12e02:	bd38      	pop	{r3, r4, r5, pc}
   12e04:	20005530 	.word	0x20005530

00012e08 <__sprint_r.part.0>:
   12e08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12e0e:	049c      	lsls	r4, r3, #18
   12e10:	4690      	mov	r8, r2
   12e12:	d52d      	bpl.n	12e70 <__sprint_r.part.0+0x68>
   12e14:	6893      	ldr	r3, [r2, #8]
   12e16:	6812      	ldr	r2, [r2, #0]
   12e18:	b343      	cbz	r3, 12e6c <__sprint_r.part.0+0x64>
   12e1a:	468b      	mov	fp, r1
   12e1c:	4606      	mov	r6, r0
   12e1e:	f102 0908 	add.w	r9, r2, #8
   12e22:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12e26:	ea5f 079a 	movs.w	r7, sl, lsr #2
   12e2a:	d015      	beq.n	12e58 <__sprint_r.part.0+0x50>
   12e2c:	3d04      	subs	r5, #4
   12e2e:	2400      	movs	r4, #0
   12e30:	e001      	b.n	12e36 <__sprint_r.part.0+0x2e>
   12e32:	42a7      	cmp	r7, r4
   12e34:	d00e      	beq.n	12e54 <__sprint_r.part.0+0x4c>
   12e36:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12e3a:	465a      	mov	r2, fp
   12e3c:	4630      	mov	r0, r6
   12e3e:	f002 fac7 	bl	153d0 <_fputwc_r>
   12e42:	1c43      	adds	r3, r0, #1
   12e44:	f104 0401 	add.w	r4, r4, #1
   12e48:	d1f3      	bne.n	12e32 <__sprint_r.part.0+0x2a>
   12e4a:	2300      	movs	r3, #0
   12e4c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e54:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12e58:	f02a 0a03 	bic.w	sl, sl, #3
   12e5c:	eba3 030a 	sub.w	r3, r3, sl
   12e60:	f8c8 3008 	str.w	r3, [r8, #8]
   12e64:	f109 0908 	add.w	r9, r9, #8
   12e68:	2b00      	cmp	r3, #0
   12e6a:	d1da      	bne.n	12e22 <__sprint_r.part.0+0x1a>
   12e6c:	2000      	movs	r0, #0
   12e6e:	e7ec      	b.n	12e4a <__sprint_r.part.0+0x42>
   12e70:	f002 fae2 	bl	15438 <__sfvwrite_r>
   12e74:	2300      	movs	r3, #0
   12e76:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e7e:	bf00      	nop

00012e80 <_vfiprintf_r>:
   12e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e84:	ed2d 8b02 	vpush	{d8}
   12e88:	b0c5      	sub	sp, #276	; 0x114
   12e8a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   12e8e:	4683      	mov	fp, r0
   12e90:	ee08 1a10 	vmov	s16, r1
   12e94:	4616      	mov	r6, r2
   12e96:	2100      	movs	r1, #0
   12e98:	2208      	movs	r2, #8
   12e9a:	4650      	mov	r0, sl
   12e9c:	461c      	mov	r4, r3
   12e9e:	9307      	str	r3, [sp, #28]
   12ea0:	f7fe fd24 	bl	118ec <memset>
   12ea4:	f1bb 0f00 	cmp.w	fp, #0
   12ea8:	d004      	beq.n	12eb4 <_vfiprintf_r+0x34>
   12eaa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12eae:	2b00      	cmp	r3, #0
   12eb0:	f000 86a0 	beq.w	13bf4 <_vfiprintf_r+0xd74>
   12eb4:	ee18 2a10 	vmov	r2, s16
   12eb8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12eba:	07db      	lsls	r3, r3, #31
   12ebc:	f140 8513 	bpl.w	138e6 <_vfiprintf_r+0xa66>
   12ec0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12ec4:	b28a      	uxth	r2, r1
   12ec6:	0495      	lsls	r5, r2, #18
   12ec8:	d40b      	bmi.n	12ee2 <_vfiprintf_r+0x62>
   12eca:	ee18 3a10 	vmov	r3, s16
   12ece:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12ed2:	8199      	strh	r1, [r3, #12]
   12ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12ed6:	b28a      	uxth	r2, r1
   12ed8:	ee18 1a10 	vmov	r1, s16
   12edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12ee0:	664b      	str	r3, [r1, #100]	; 0x64
   12ee2:	0710      	lsls	r0, r2, #28
   12ee4:	f140 8105 	bpl.w	130f2 <_vfiprintf_r+0x272>
   12ee8:	ee18 3a10 	vmov	r3, s16
   12eec:	691b      	ldr	r3, [r3, #16]
   12eee:	2b00      	cmp	r3, #0
   12ef0:	f000 80ff 	beq.w	130f2 <_vfiprintf_r+0x272>
   12ef4:	f002 031a 	and.w	r3, r2, #26
   12ef8:	2b0a      	cmp	r3, #10
   12efa:	f000 810a 	beq.w	13112 <_vfiprintf_r+0x292>
   12efe:	2300      	movs	r3, #0
   12f00:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12f04:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12f08:	aa1b      	add	r2, sp, #108	; 0x6c
   12f0a:	930c      	str	r3, [sp, #48]	; 0x30
   12f0c:	9218      	str	r2, [sp, #96]	; 0x60
   12f0e:	4691      	mov	r9, r2
   12f10:	930b      	str	r3, [sp, #44]	; 0x2c
   12f12:	9305      	str	r3, [sp, #20]
   12f14:	46b0      	mov	r8, r6
   12f16:	4644      	mov	r4, r8
   12f18:	4ba8      	ldr	r3, [pc, #672]	; (131bc <_vfiprintf_r+0x33c>)
   12f1a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12f1e:	f7fe fd6f 	bl	11a00 <__locale_mb_cur_max>
   12f22:	4622      	mov	r2, r4
   12f24:	4603      	mov	r3, r0
   12f26:	a912      	add	r1, sp, #72	; 0x48
   12f28:	f8cd a000 	str.w	sl, [sp]
   12f2c:	4658      	mov	r0, fp
   12f2e:	47a8      	blx	r5
   12f30:	2800      	cmp	r0, #0
   12f32:	f000 8145 	beq.w	131c0 <_vfiprintf_r+0x340>
   12f36:	f2c0 8139 	blt.w	131ac <_vfiprintf_r+0x32c>
   12f3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12f3c:	2a25      	cmp	r2, #37	; 0x25
   12f3e:	4603      	mov	r3, r0
   12f40:	d001      	beq.n	12f46 <_vfiprintf_r+0xc6>
   12f42:	441c      	add	r4, r3
   12f44:	e7e8      	b.n	12f18 <_vfiprintf_r+0x98>
   12f46:	ebb4 0608 	subs.w	r6, r4, r8
   12f4a:	4605      	mov	r5, r0
   12f4c:	f040 813c 	bne.w	131c8 <_vfiprintf_r+0x348>
   12f50:	2300      	movs	r3, #0
   12f52:	7861      	ldrb	r1, [r4, #1]
   12f54:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12f58:	f104 0801 	add.w	r8, r4, #1
   12f5c:	9306      	str	r3, [sp, #24]
   12f5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12f62:	461e      	mov	r6, r3
   12f64:	242b      	movs	r4, #43	; 0x2b
   12f66:	f108 0801 	add.w	r8, r8, #1
   12f6a:	f1a1 0320 	sub.w	r3, r1, #32
   12f6e:	2b5a      	cmp	r3, #90	; 0x5a
   12f70:	f200 8178 	bhi.w	13264 <_vfiprintf_r+0x3e4>
   12f74:	e8df f013 	tbh	[pc, r3, lsl #1]
   12f78:	017602b5 	.word	0x017602b5
   12f7c:	02b00176 	.word	0x02b00176
   12f80:	01760176 	.word	0x01760176
   12f84:	006a0176 	.word	0x006a0176
   12f88:	01760176 	.word	0x01760176
   12f8c:	028d027d 	.word	0x028d027d
   12f90:	02880176 	.word	0x02880176
   12f94:	01760297 	.word	0x01760297
   12f98:	005b0292 	.word	0x005b0292
   12f9c:	005b005b 	.word	0x005b005b
   12fa0:	005b005b 	.word	0x005b005b
   12fa4:	005b005b 	.word	0x005b005b
   12fa8:	005b005b 	.word	0x005b005b
   12fac:	01760176 	.word	0x01760176
   12fb0:	01760176 	.word	0x01760176
   12fb4:	01760176 	.word	0x01760176
   12fb8:	01760176 	.word	0x01760176
   12fbc:	025c0176 	.word	0x025c0176
   12fc0:	01760084 	.word	0x01760084
   12fc4:	01760176 	.word	0x01760176
   12fc8:	01760176 	.word	0x01760176
   12fcc:	01760176 	.word	0x01760176
   12fd0:	01760176 	.word	0x01760176
   12fd4:	00e80176 	.word	0x00e80176
   12fd8:	01760176 	.word	0x01760176
   12fdc:	02330176 	.word	0x02330176
   12fe0:	02da0176 	.word	0x02da0176
   12fe4:	01760176 	.word	0x01760176
   12fe8:	0176058b 	.word	0x0176058b
   12fec:	01760176 	.word	0x01760176
   12ff0:	01760176 	.word	0x01760176
   12ff4:	01760176 	.word	0x01760176
   12ff8:	01760176 	.word	0x01760176
   12ffc:	025c0176 	.word	0x025c0176
   13000:	01760086 	.word	0x01760086
   13004:	01760176 	.word	0x01760176
   13008:	008602cd 	.word	0x008602cd
   1300c:	0176007f 	.word	0x0176007f
   13010:	017602c0 	.word	0x017602c0
   13014:	00ea02fd 	.word	0x00ea02fd
   13018:	007f02ed 	.word	0x007f02ed
   1301c:	02330176 	.word	0x02330176
   13020:	0569007c 	.word	0x0569007c
   13024:	01760176 	.word	0x01760176
   13028:	0176056b 	.word	0x0176056b
   1302c:	007c      	.short	0x007c
   1302e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13032:	2200      	movs	r2, #0
   13034:	f818 1b01 	ldrb.w	r1, [r8], #1
   13038:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1303c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   13040:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13044:	2b09      	cmp	r3, #9
   13046:	d9f5      	bls.n	13034 <_vfiprintf_r+0x1b4>
   13048:	9206      	str	r2, [sp, #24]
   1304a:	e78e      	b.n	12f6a <_vfiprintf_r+0xea>
   1304c:	4658      	mov	r0, fp
   1304e:	f000 ffef 	bl	14030 <_localeconv_r>
   13052:	6843      	ldr	r3, [r0, #4]
   13054:	930d      	str	r3, [sp, #52]	; 0x34
   13056:	4618      	mov	r0, r3
   13058:	f7ff fa72 	bl	12540 <strlen>
   1305c:	900e      	str	r0, [sp, #56]	; 0x38
   1305e:	4605      	mov	r5, r0
   13060:	4658      	mov	r0, fp
   13062:	f000 ffe5 	bl	14030 <_localeconv_r>
   13066:	6883      	ldr	r3, [r0, #8]
   13068:	930b      	str	r3, [sp, #44]	; 0x2c
   1306a:	2d00      	cmp	r5, #0
   1306c:	f040 84d6 	bne.w	13a1c <_vfiprintf_r+0xb9c>
   13070:	f898 1000 	ldrb.w	r1, [r8]
   13074:	e777      	b.n	12f66 <_vfiprintf_r+0xe6>
   13076:	f898 1000 	ldrb.w	r1, [r8]
   1307a:	f046 0620 	orr.w	r6, r6, #32
   1307e:	e772      	b.n	12f66 <_vfiprintf_r+0xe6>
   13080:	f046 0610 	orr.w	r6, r6, #16
   13084:	06b4      	lsls	r4, r6, #26
   13086:	f140 818e 	bpl.w	133a6 <_vfiprintf_r+0x526>
   1308a:	9b07      	ldr	r3, [sp, #28]
   1308c:	3307      	adds	r3, #7
   1308e:	f023 0307 	bic.w	r3, r3, #7
   13092:	461a      	mov	r2, r3
   13094:	6859      	ldr	r1, [r3, #4]
   13096:	f852 3b08 	ldr.w	r3, [r2], #8
   1309a:	9207      	str	r2, [sp, #28]
   1309c:	460a      	mov	r2, r1
   1309e:	2900      	cmp	r1, #0
   130a0:	f2c0 8470 	blt.w	13984 <_vfiprintf_r+0xb04>
   130a4:	1c79      	adds	r1, r7, #1
   130a6:	f000 85a2 	beq.w	13bee <_vfiprintf_r+0xd6e>
   130aa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   130ae:	9103      	str	r1, [sp, #12]
   130b0:	ea53 0102 	orrs.w	r1, r3, r2
   130b4:	f000 843f 	beq.w	13936 <_vfiprintf_r+0xab6>
   130b8:	2b0a      	cmp	r3, #10
   130ba:	f172 0100 	sbcs.w	r1, r2, #0
   130be:	f080 8541 	bcs.w	13b44 <_vfiprintf_r+0xcc4>
   130c2:	3330      	adds	r3, #48	; 0x30
   130c4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   130c8:	9e03      	ldr	r6, [sp, #12]
   130ca:	2301      	movs	r3, #1
   130cc:	9304      	str	r3, [sp, #16]
   130ce:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   130d2:	9b04      	ldr	r3, [sp, #16]
   130d4:	42bb      	cmp	r3, r7
   130d6:	bfb8      	it	lt
   130d8:	463b      	movlt	r3, r7
   130da:	9303      	str	r3, [sp, #12]
   130dc:	2300      	movs	r3, #0
   130de:	9308      	str	r3, [sp, #32]
   130e0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   130e4:	2b00      	cmp	r3, #0
   130e6:	f000 80cb 	beq.w	13280 <_vfiprintf_r+0x400>
   130ea:	9b03      	ldr	r3, [sp, #12]
   130ec:	3301      	adds	r3, #1
   130ee:	9303      	str	r3, [sp, #12]
   130f0:	e0c6      	b.n	13280 <_vfiprintf_r+0x400>
   130f2:	ee18 1a10 	vmov	r1, s16
   130f6:	4658      	mov	r0, fp
   130f8:	ee18 5a10 	vmov	r5, s16
   130fc:	f001 f800 	bl	14100 <__swsetup_r>
   13100:	2800      	cmp	r0, #0
   13102:	f040 8652 	bne.w	13daa <_vfiprintf_r+0xf2a>
   13106:	89aa      	ldrh	r2, [r5, #12]
   13108:	f002 031a 	and.w	r3, r2, #26
   1310c:	2b0a      	cmp	r3, #10
   1310e:	f47f aef6 	bne.w	12efe <_vfiprintf_r+0x7e>
   13112:	ee18 1a10 	vmov	r1, s16
   13116:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1311a:	2b00      	cmp	r3, #0
   1311c:	f6ff aeef 	blt.w	12efe <_vfiprintf_r+0x7e>
   13120:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13122:	07db      	lsls	r3, r3, #31
   13124:	d402      	bmi.n	1312c <_vfiprintf_r+0x2ac>
   13126:	0597      	lsls	r7, r2, #22
   13128:	f140 8612 	bpl.w	13d50 <_vfiprintf_r+0xed0>
   1312c:	ee18 1a10 	vmov	r1, s16
   13130:	4623      	mov	r3, r4
   13132:	4632      	mov	r2, r6
   13134:	4658      	mov	r0, fp
   13136:	f000 fe69 	bl	13e0c <__sbprintf>
   1313a:	9005      	str	r0, [sp, #20]
   1313c:	9805      	ldr	r0, [sp, #20]
   1313e:	b045      	add	sp, #276	; 0x114
   13140:	ecbd 8b02 	vpop	{d8}
   13144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13148:	f046 0610 	orr.w	r6, r6, #16
   1314c:	f016 0220 	ands.w	r2, r6, #32
   13150:	f000 8136 	beq.w	133c0 <_vfiprintf_r+0x540>
   13154:	9b07      	ldr	r3, [sp, #28]
   13156:	3307      	adds	r3, #7
   13158:	f023 0307 	bic.w	r3, r3, #7
   1315c:	4619      	mov	r1, r3
   1315e:	685a      	ldr	r2, [r3, #4]
   13160:	f851 3b08 	ldr.w	r3, [r1], #8
   13164:	9107      	str	r1, [sp, #28]
   13166:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1316a:	9103      	str	r1, [sp, #12]
   1316c:	2100      	movs	r1, #0
   1316e:	2000      	movs	r0, #0
   13170:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13174:	1c78      	adds	r0, r7, #1
   13176:	f000 8210 	beq.w	1359a <_vfiprintf_r+0x71a>
   1317a:	9803      	ldr	r0, [sp, #12]
   1317c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   13180:	ea53 0002 	orrs.w	r0, r3, r2
   13184:	f040 8208 	bne.w	13598 <_vfiprintf_r+0x718>
   13188:	2f00      	cmp	r7, #0
   1318a:	f040 8538 	bne.w	13bfe <_vfiprintf_r+0xd7e>
   1318e:	2900      	cmp	r1, #0
   13190:	f040 83d5 	bne.w	1393e <_vfiprintf_r+0xabe>
   13194:	9b03      	ldr	r3, [sp, #12]
   13196:	f013 0301 	ands.w	r3, r3, #1
   1319a:	9304      	str	r3, [sp, #16]
   1319c:	f000 8411 	beq.w	139c2 <_vfiprintf_r+0xb42>
   131a0:	2330      	movs	r3, #48	; 0x30
   131a2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   131a6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   131aa:	e792      	b.n	130d2 <_vfiprintf_r+0x252>
   131ac:	2208      	movs	r2, #8
   131ae:	2100      	movs	r1, #0
   131b0:	4650      	mov	r0, sl
   131b2:	f7fe fb9b 	bl	118ec <memset>
   131b6:	2301      	movs	r3, #1
   131b8:	441c      	add	r4, r3
   131ba:	e6ad      	b.n	12f18 <_vfiprintf_r+0x98>
   131bc:	200036b4 	.word	0x200036b4
   131c0:	ebb4 0608 	subs.w	r6, r4, r8
   131c4:	4605      	mov	r5, r0
   131c6:	d01b      	beq.n	13200 <_vfiprintf_r+0x380>
   131c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   131ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   131cc:	3301      	adds	r3, #1
   131ce:	4432      	add	r2, r6
   131d0:	2b07      	cmp	r3, #7
   131d2:	e9c9 8600 	strd	r8, r6, [r9]
   131d6:	921a      	str	r2, [sp, #104]	; 0x68
   131d8:	9319      	str	r3, [sp, #100]	; 0x64
   131da:	dd1c      	ble.n	13216 <_vfiprintf_r+0x396>
   131dc:	2a00      	cmp	r2, #0
   131de:	f000 83a6 	beq.w	1392e <_vfiprintf_r+0xaae>
   131e2:	ee18 1a10 	vmov	r1, s16
   131e6:	aa18      	add	r2, sp, #96	; 0x60
   131e8:	4658      	mov	r0, fp
   131ea:	f7ff fe0d 	bl	12e08 <__sprint_r.part.0>
   131ee:	bb20      	cbnz	r0, 1323a <_vfiprintf_r+0x3ba>
   131f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131f4:	9b05      	ldr	r3, [sp, #20]
   131f6:	4433      	add	r3, r6
   131f8:	9305      	str	r3, [sp, #20]
   131fa:	2d00      	cmp	r5, #0
   131fc:	f47f aea8 	bne.w	12f50 <_vfiprintf_r+0xd0>
   13200:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13202:	2b00      	cmp	r3, #0
   13204:	f040 85c1 	bne.w	13d8a <_vfiprintf_r+0xf0a>
   13208:	ee18 3a10 	vmov	r3, s16
   1320c:	2200      	movs	r2, #0
   1320e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13212:	9219      	str	r2, [sp, #100]	; 0x64
   13214:	e015      	b.n	13242 <_vfiprintf_r+0x3c2>
   13216:	f109 0908 	add.w	r9, r9, #8
   1321a:	e7eb      	b.n	131f4 <_vfiprintf_r+0x374>
   1321c:	ee18 1a10 	vmov	r1, s16
   13220:	aa18      	add	r2, sp, #96	; 0x60
   13222:	4658      	mov	r0, fp
   13224:	f7ff fdf0 	bl	12e08 <__sprint_r.part.0>
   13228:	2800      	cmp	r0, #0
   1322a:	f000 80a6 	beq.w	1337a <_vfiprintf_r+0x4fa>
   1322e:	9b08      	ldr	r3, [sp, #32]
   13230:	b11b      	cbz	r3, 1323a <_vfiprintf_r+0x3ba>
   13232:	9908      	ldr	r1, [sp, #32]
   13234:	4658      	mov	r0, fp
   13236:	f7ff fc2d 	bl	12a94 <_free_r>
   1323a:	ee18 3a10 	vmov	r3, s16
   1323e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13242:	ee18 2a10 	vmov	r2, s16
   13246:	6e52      	ldr	r2, [r2, #100]	; 0x64
   13248:	f012 0f01 	tst.w	r2, #1
   1324c:	b29a      	uxth	r2, r3
   1324e:	f000 80a0 	beq.w	13392 <_vfiprintf_r+0x512>
   13252:	0650      	lsls	r0, r2, #25
   13254:	f100 85b2 	bmi.w	13dbc <_vfiprintf_r+0xf3c>
   13258:	9805      	ldr	r0, [sp, #20]
   1325a:	b045      	add	sp, #276	; 0x114
   1325c:	ecbd 8b02 	vpop	{d8}
   13260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13264:	2900      	cmp	r1, #0
   13266:	d0cb      	beq.n	13200 <_vfiprintf_r+0x380>
   13268:	2300      	movs	r3, #0
   1326a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1326e:	2301      	movs	r3, #1
   13270:	e9cd 3303 	strd	r3, r3, [sp, #12]
   13274:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   13278:	ac2b      	add	r4, sp, #172	; 0xac
   1327a:	2300      	movs	r3, #0
   1327c:	9308      	str	r3, [sp, #32]
   1327e:	461f      	mov	r7, r3
   13280:	f016 0302 	ands.w	r3, r6, #2
   13284:	9309      	str	r3, [sp, #36]	; 0x24
   13286:	d002      	beq.n	1328e <_vfiprintf_r+0x40e>
   13288:	9b03      	ldr	r3, [sp, #12]
   1328a:	3302      	adds	r3, #2
   1328c:	9303      	str	r3, [sp, #12]
   1328e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   13292:	930a      	str	r3, [sp, #40]	; 0x28
   13294:	d105      	bne.n	132a2 <_vfiprintf_r+0x422>
   13296:	9b06      	ldr	r3, [sp, #24]
   13298:	9a03      	ldr	r2, [sp, #12]
   1329a:	1a9d      	subs	r5, r3, r2
   1329c:	2d00      	cmp	r5, #0
   1329e:	f300 827b 	bgt.w	13798 <_vfiprintf_r+0x918>
   132a2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   132a6:	1c41      	adds	r1, r0, #1
   132a8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   132ac:	b182      	cbz	r2, 132d0 <_vfiprintf_r+0x450>
   132ae:	2201      	movs	r2, #1
   132b0:	3301      	adds	r3, #1
   132b2:	f8c9 2004 	str.w	r2, [r9, #4]
   132b6:	2907      	cmp	r1, #7
   132b8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   132bc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   132c0:	f8c9 2000 	str.w	r2, [r9]
   132c4:	f300 824a 	bgt.w	1375c <_vfiprintf_r+0x8dc>
   132c8:	4608      	mov	r0, r1
   132ca:	f109 0908 	add.w	r9, r9, #8
   132ce:	3101      	adds	r1, #1
   132d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   132d2:	b1e2      	cbz	r2, 1330e <_vfiprintf_r+0x48e>
   132d4:	aa11      	add	r2, sp, #68	; 0x44
   132d6:	3302      	adds	r3, #2
   132d8:	f8c9 2000 	str.w	r2, [r9]
   132dc:	2907      	cmp	r1, #7
   132de:	f04f 0202 	mov.w	r2, #2
   132e2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   132e6:	f8c9 2004 	str.w	r2, [r9, #4]
   132ea:	f340 8250 	ble.w	1378e <_vfiprintf_r+0x90e>
   132ee:	2b00      	cmp	r3, #0
   132f0:	f000 8343 	beq.w	1397a <_vfiprintf_r+0xafa>
   132f4:	ee18 1a10 	vmov	r1, s16
   132f8:	aa18      	add	r2, sp, #96	; 0x60
   132fa:	4658      	mov	r0, fp
   132fc:	f7ff fd84 	bl	12e08 <__sprint_r.part.0>
   13300:	2800      	cmp	r0, #0
   13302:	d194      	bne.n	1322e <_vfiprintf_r+0x3ae>
   13304:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13308:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1330c:	1c41      	adds	r1, r0, #1
   1330e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13310:	2a80      	cmp	r2, #128	; 0x80
   13312:	f000 8184 	beq.w	1361e <_vfiprintf_r+0x79e>
   13316:	9a04      	ldr	r2, [sp, #16]
   13318:	1abd      	subs	r5, r7, r2
   1331a:	2d00      	cmp	r5, #0
   1331c:	f300 81d7 	bgt.w	136ce <_vfiprintf_r+0x84e>
   13320:	9a04      	ldr	r2, [sp, #16]
   13322:	f8c9 4000 	str.w	r4, [r9]
   13326:	4413      	add	r3, r2
   13328:	2907      	cmp	r1, #7
   1332a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1332e:	f8c9 2004 	str.w	r2, [r9, #4]
   13332:	f340 816e 	ble.w	13612 <_vfiprintf_r+0x792>
   13336:	2b00      	cmp	r3, #0
   13338:	f000 8275 	beq.w	13826 <_vfiprintf_r+0x9a6>
   1333c:	ee18 1a10 	vmov	r1, s16
   13340:	aa18      	add	r2, sp, #96	; 0x60
   13342:	4658      	mov	r0, fp
   13344:	f7ff fd60 	bl	12e08 <__sprint_r.part.0>
   13348:	2800      	cmp	r0, #0
   1334a:	f47f af70 	bne.w	1322e <_vfiprintf_r+0x3ae>
   1334e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13350:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13354:	0775      	lsls	r5, r6, #29
   13356:	d505      	bpl.n	13364 <_vfiprintf_r+0x4e4>
   13358:	9a06      	ldr	r2, [sp, #24]
   1335a:	9903      	ldr	r1, [sp, #12]
   1335c:	1a54      	subs	r4, r2, r1
   1335e:	2c00      	cmp	r4, #0
   13360:	f300 826b 	bgt.w	1383a <_vfiprintf_r+0x9ba>
   13364:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   13368:	9803      	ldr	r0, [sp, #12]
   1336a:	4281      	cmp	r1, r0
   1336c:	bfac      	ite	ge
   1336e:	1852      	addge	r2, r2, r1
   13370:	1812      	addlt	r2, r2, r0
   13372:	9205      	str	r2, [sp, #20]
   13374:	2b00      	cmp	r3, #0
   13376:	f47f af51 	bne.w	1321c <_vfiprintf_r+0x39c>
   1337a:	9908      	ldr	r1, [sp, #32]
   1337c:	2300      	movs	r3, #0
   1337e:	9319      	str	r3, [sp, #100]	; 0x64
   13380:	2900      	cmp	r1, #0
   13382:	f000 8149 	beq.w	13618 <_vfiprintf_r+0x798>
   13386:	4658      	mov	r0, fp
   13388:	f7ff fb84 	bl	12a94 <_free_r>
   1338c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13390:	e5c1      	b.n	12f16 <_vfiprintf_r+0x96>
   13392:	059c      	lsls	r4, r3, #22
   13394:	f53f af5d 	bmi.w	13252 <_vfiprintf_r+0x3d2>
   13398:	ee18 4a10 	vmov	r4, s16
   1339c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1339e:	f7fe fb2d 	bl	119fc <__retarget_lock_release_recursive>
   133a2:	89a2      	ldrh	r2, [r4, #12]
   133a4:	e755      	b.n	13252 <_vfiprintf_r+0x3d2>
   133a6:	06f0      	lsls	r0, r6, #27
   133a8:	9a07      	ldr	r2, [sp, #28]
   133aa:	f100 831f 	bmi.w	139ec <_vfiprintf_r+0xb6c>
   133ae:	0671      	lsls	r1, r6, #25
   133b0:	f140 8319 	bpl.w	139e6 <_vfiprintf_r+0xb66>
   133b4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   133b8:	9207      	str	r2, [sp, #28]
   133ba:	17da      	asrs	r2, r3, #31
   133bc:	4611      	mov	r1, r2
   133be:	e66e      	b.n	1309e <_vfiprintf_r+0x21e>
   133c0:	f016 0310 	ands.w	r3, r6, #16
   133c4:	9907      	ldr	r1, [sp, #28]
   133c6:	f040 8309 	bne.w	139dc <_vfiprintf_r+0xb5c>
   133ca:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   133ce:	f000 8301 	beq.w	139d4 <_vfiprintf_r+0xb54>
   133d2:	461a      	mov	r2, r3
   133d4:	f851 3b04 	ldr.w	r3, [r1], #4
   133d8:	9107      	str	r1, [sp, #28]
   133da:	b29b      	uxth	r3, r3
   133dc:	e6c3      	b.n	13166 <_vfiprintf_r+0x2e6>
   133de:	9b07      	ldr	r3, [sp, #28]
   133e0:	461a      	mov	r2, r3
   133e2:	2300      	movs	r3, #0
   133e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   133e8:	4613      	mov	r3, r2
   133ea:	f853 4b04 	ldr.w	r4, [r3], #4
   133ee:	9303      	str	r3, [sp, #12]
   133f0:	2c00      	cmp	r4, #0
   133f2:	f000 8412 	beq.w	13c1a <_vfiprintf_r+0xd9a>
   133f6:	2953      	cmp	r1, #83	; 0x53
   133f8:	f000 8365 	beq.w	13ac6 <_vfiprintf_r+0xc46>
   133fc:	f016 0510 	ands.w	r5, r6, #16
   13400:	f040 8361 	bne.w	13ac6 <_vfiprintf_r+0xc46>
   13404:	1c7b      	adds	r3, r7, #1
   13406:	f000 84b3 	beq.w	13d70 <_vfiprintf_r+0xef0>
   1340a:	463a      	mov	r2, r7
   1340c:	4629      	mov	r1, r5
   1340e:	4620      	mov	r0, r4
   13410:	f7ff f82e 	bl	12470 <memchr>
   13414:	9008      	str	r0, [sp, #32]
   13416:	2800      	cmp	r0, #0
   13418:	f000 849f 	beq.w	13d5a <_vfiprintf_r+0xeda>
   1341c:	1b03      	subs	r3, r0, r4
   1341e:	9a03      	ldr	r2, [sp, #12]
   13420:	9304      	str	r3, [sp, #16]
   13422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13426:	462f      	mov	r7, r5
   13428:	9207      	str	r2, [sp, #28]
   1342a:	9303      	str	r3, [sp, #12]
   1342c:	9508      	str	r5, [sp, #32]
   1342e:	e657      	b.n	130e0 <_vfiprintf_r+0x260>
   13430:	2943      	cmp	r1, #67	; 0x43
   13432:	d002      	beq.n	1343a <_vfiprintf_r+0x5ba>
   13434:	06f5      	lsls	r5, r6, #27
   13436:	f140 832d 	bpl.w	13a94 <_vfiprintf_r+0xc14>
   1343a:	9d07      	ldr	r5, [sp, #28]
   1343c:	2208      	movs	r2, #8
   1343e:	2100      	movs	r1, #0
   13440:	a816      	add	r0, sp, #88	; 0x58
   13442:	ac2b      	add	r4, sp, #172	; 0xac
   13444:	f7fe fa52 	bl	118ec <memset>
   13448:	ab16      	add	r3, sp, #88	; 0x58
   1344a:	f855 2b04 	ldr.w	r2, [r5], #4
   1344e:	4621      	mov	r1, r4
   13450:	4658      	mov	r0, fp
   13452:	f000 fdc7 	bl	13fe4 <_wcrtomb_r>
   13456:	4603      	mov	r3, r0
   13458:	3301      	adds	r3, #1
   1345a:	9004      	str	r0, [sp, #16]
   1345c:	f000 84b3 	beq.w	13dc6 <_vfiprintf_r+0xf46>
   13460:	9b04      	ldr	r3, [sp, #16]
   13462:	9507      	str	r5, [sp, #28]
   13464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13468:	9303      	str	r3, [sp, #12]
   1346a:	2300      	movs	r3, #0
   1346c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13470:	e703      	b.n	1327a <_vfiprintf_r+0x3fa>
   13472:	9b07      	ldr	r3, [sp, #28]
   13474:	f853 2b04 	ldr.w	r2, [r3], #4
   13478:	9206      	str	r2, [sp, #24]
   1347a:	2a00      	cmp	r2, #0
   1347c:	f280 829c 	bge.w	139b8 <_vfiprintf_r+0xb38>
   13480:	9a06      	ldr	r2, [sp, #24]
   13482:	4252      	negs	r2, r2
   13484:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13488:	f898 1000 	ldrb.w	r1, [r8]
   1348c:	f046 0604 	orr.w	r6, r6, #4
   13490:	e569      	b.n	12f66 <_vfiprintf_r+0xe6>
   13492:	f898 1000 	ldrb.w	r1, [r8]
   13496:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   1349a:	e564      	b.n	12f66 <_vfiprintf_r+0xe6>
   1349c:	f898 1000 	ldrb.w	r1, [r8]
   134a0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   134a4:	e55f      	b.n	12f66 <_vfiprintf_r+0xe6>
   134a6:	4642      	mov	r2, r8
   134a8:	f812 1b01 	ldrb.w	r1, [r2], #1
   134ac:	292a      	cmp	r1, #42	; 0x2a
   134ae:	f000 8496 	beq.w	13dde <_vfiprintf_r+0xf5e>
   134b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   134b6:	2b09      	cmp	r3, #9
   134b8:	4690      	mov	r8, r2
   134ba:	f04f 0700 	mov.w	r7, #0
   134be:	f63f ad54 	bhi.w	12f6a <_vfiprintf_r+0xea>
   134c2:	f818 1b01 	ldrb.w	r1, [r8], #1
   134c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   134ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   134ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   134d2:	2b09      	cmp	r3, #9
   134d4:	d9f5      	bls.n	134c2 <_vfiprintf_r+0x642>
   134d6:	e548      	b.n	12f6a <_vfiprintf_r+0xea>
   134d8:	f898 1000 	ldrb.w	r1, [r8]
   134dc:	f046 0601 	orr.w	r6, r6, #1
   134e0:	e541      	b.n	12f66 <_vfiprintf_r+0xe6>
   134e2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   134e6:	2b00      	cmp	r3, #0
   134e8:	f47f adc2 	bne.w	13070 <_vfiprintf_r+0x1f0>
   134ec:	2320      	movs	r3, #32
   134ee:	f898 1000 	ldrb.w	r1, [r8]
   134f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   134f6:	e536      	b.n	12f66 <_vfiprintf_r+0xe6>
   134f8:	f898 1000 	ldrb.w	r1, [r8]
   134fc:	296c      	cmp	r1, #108	; 0x6c
   134fe:	bf03      	ittte	eq
   13500:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13504:	f046 0620 	orreq.w	r6, r6, #32
   13508:	f108 0801 	addeq.w	r8, r8, #1
   1350c:	f046 0610 	orrne.w	r6, r6, #16
   13510:	e529      	b.n	12f66 <_vfiprintf_r+0xe6>
   13512:	f898 1000 	ldrb.w	r1, [r8]
   13516:	2968      	cmp	r1, #104	; 0x68
   13518:	bf03      	ittte	eq
   1351a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1351e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   13522:	f108 0801 	addeq.w	r8, r8, #1
   13526:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1352a:	e51c      	b.n	12f66 <_vfiprintf_r+0xe6>
   1352c:	f046 0310 	orr.w	r3, r6, #16
   13530:	9303      	str	r3, [sp, #12]
   13532:	9b03      	ldr	r3, [sp, #12]
   13534:	f013 0220 	ands.w	r2, r3, #32
   13538:	f000 8206 	beq.w	13948 <_vfiprintf_r+0xac8>
   1353c:	9b07      	ldr	r3, [sp, #28]
   1353e:	3307      	adds	r3, #7
   13540:	f023 0307 	bic.w	r3, r3, #7
   13544:	4619      	mov	r1, r3
   13546:	685a      	ldr	r2, [r3, #4]
   13548:	f851 3b08 	ldr.w	r3, [r1], #8
   1354c:	9107      	str	r1, [sp, #28]
   1354e:	2101      	movs	r1, #1
   13550:	e60d      	b.n	1316e <_vfiprintf_r+0x2ee>
   13552:	9a07      	ldr	r2, [sp, #28]
   13554:	f046 0302 	orr.w	r3, r6, #2
   13558:	9303      	str	r3, [sp, #12]
   1355a:	f852 3b04 	ldr.w	r3, [r2], #4
   1355e:	9207      	str	r2, [sp, #28]
   13560:	f647 0230 	movw	r2, #30768	; 0x7830
   13564:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   13568:	4ab8      	ldr	r2, [pc, #736]	; (1384c <_vfiprintf_r+0x9cc>)
   1356a:	920c      	str	r2, [sp, #48]	; 0x30
   1356c:	2102      	movs	r1, #2
   1356e:	2200      	movs	r2, #0
   13570:	e5fd      	b.n	1316e <_vfiprintf_r+0x2ee>
   13572:	06b7      	lsls	r7, r6, #26
   13574:	f100 8248 	bmi.w	13a08 <_vfiprintf_r+0xb88>
   13578:	06f5      	lsls	r5, r6, #27
   1357a:	f100 8346 	bmi.w	13c0a <_vfiprintf_r+0xd8a>
   1357e:	0674      	lsls	r4, r6, #25
   13580:	f100 83d5 	bmi.w	13d2e <_vfiprintf_r+0xeae>
   13584:	05b0      	lsls	r0, r6, #22
   13586:	f140 8340 	bpl.w	13c0a <_vfiprintf_r+0xd8a>
   1358a:	9b07      	ldr	r3, [sp, #28]
   1358c:	9905      	ldr	r1, [sp, #20]
   1358e:	f853 2b04 	ldr.w	r2, [r3], #4
   13592:	9307      	str	r3, [sp, #28]
   13594:	7011      	strb	r1, [r2, #0]
   13596:	e4be      	b.n	12f16 <_vfiprintf_r+0x96>
   13598:	9603      	str	r6, [sp, #12]
   1359a:	2901      	cmp	r1, #1
   1359c:	f43f ad8c 	beq.w	130b8 <_vfiprintf_r+0x238>
   135a0:	2902      	cmp	r1, #2
   135a2:	ac44      	add	r4, sp, #272	; 0x110
   135a4:	d111      	bne.n	135ca <_vfiprintf_r+0x74a>
   135a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   135a8:	f003 010f 	and.w	r1, r3, #15
   135ac:	091b      	lsrs	r3, r3, #4
   135ae:	5c41      	ldrb	r1, [r0, r1]
   135b0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   135b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   135b8:	0912      	lsrs	r2, r2, #4
   135ba:	ea53 0102 	orrs.w	r1, r3, r2
   135be:	d1f3      	bne.n	135a8 <_vfiprintf_r+0x728>
   135c0:	9e03      	ldr	r6, [sp, #12]
   135c2:	ab44      	add	r3, sp, #272	; 0x110
   135c4:	1b1b      	subs	r3, r3, r4
   135c6:	9304      	str	r3, [sp, #16]
   135c8:	e583      	b.n	130d2 <_vfiprintf_r+0x252>
   135ca:	f003 0107 	and.w	r1, r3, #7
   135ce:	08db      	lsrs	r3, r3, #3
   135d0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   135d4:	08d2      	lsrs	r2, r2, #3
   135d6:	3130      	adds	r1, #48	; 0x30
   135d8:	ea53 0502 	orrs.w	r5, r3, r2
   135dc:	4620      	mov	r0, r4
   135de:	f804 1d01 	strb.w	r1, [r4, #-1]!
   135e2:	d1f2      	bne.n	135ca <_vfiprintf_r+0x74a>
   135e4:	9e03      	ldr	r6, [sp, #12]
   135e6:	07f3      	lsls	r3, r6, #31
   135e8:	d5eb      	bpl.n	135c2 <_vfiprintf_r+0x742>
   135ea:	2930      	cmp	r1, #48	; 0x30
   135ec:	d0e8      	beq.n	135c0 <_vfiprintf_r+0x740>
   135ee:	2330      	movs	r3, #48	; 0x30
   135f0:	3802      	subs	r0, #2
   135f2:	f804 3c01 	strb.w	r3, [r4, #-1]
   135f6:	ab44      	add	r3, sp, #272	; 0x110
   135f8:	1a1b      	subs	r3, r3, r0
   135fa:	9e03      	ldr	r6, [sp, #12]
   135fc:	9304      	str	r3, [sp, #16]
   135fe:	4604      	mov	r4, r0
   13600:	e567      	b.n	130d2 <_vfiprintf_r+0x252>
   13602:	9b04      	ldr	r3, [sp, #16]
   13604:	941b      	str	r4, [sp, #108]	; 0x6c
   13606:	2201      	movs	r2, #1
   13608:	931c      	str	r3, [sp, #112]	; 0x70
   1360a:	931a      	str	r3, [sp, #104]	; 0x68
   1360c:	9219      	str	r2, [sp, #100]	; 0x64
   1360e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13612:	f109 0908 	add.w	r9, r9, #8
   13616:	e69d      	b.n	13354 <_vfiprintf_r+0x4d4>
   13618:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1361c:	e47b      	b.n	12f16 <_vfiprintf_r+0x96>
   1361e:	9a06      	ldr	r2, [sp, #24]
   13620:	9d03      	ldr	r5, [sp, #12]
   13622:	1b55      	subs	r5, r2, r5
   13624:	2d00      	cmp	r5, #0
   13626:	f77f ae76 	ble.w	13316 <_vfiprintf_r+0x496>
   1362a:	2d10      	cmp	r5, #16
   1362c:	f340 83bb 	ble.w	13da6 <_vfiprintf_r+0xf26>
   13630:	9409      	str	r4, [sp, #36]	; 0x24
   13632:	ee18 4a10 	vmov	r4, s16
   13636:	e007      	b.n	13648 <_vfiprintf_r+0x7c8>
   13638:	f100 0c02 	add.w	ip, r0, #2
   1363c:	f109 0908 	add.w	r9, r9, #8
   13640:	4610      	mov	r0, r2
   13642:	3d10      	subs	r5, #16
   13644:	2d10      	cmp	r5, #16
   13646:	dd1e      	ble.n	13686 <_vfiprintf_r+0x806>
   13648:	4981      	ldr	r1, [pc, #516]	; (13850 <_vfiprintf_r+0x9d0>)
   1364a:	f8c9 1000 	str.w	r1, [r9]
   1364e:	1c42      	adds	r2, r0, #1
   13650:	3310      	adds	r3, #16
   13652:	2110      	movs	r1, #16
   13654:	2a07      	cmp	r2, #7
   13656:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1365a:	f8c9 1004 	str.w	r1, [r9, #4]
   1365e:	ddeb      	ble.n	13638 <_vfiprintf_r+0x7b8>
   13660:	aa18      	add	r2, sp, #96	; 0x60
   13662:	2b00      	cmp	r3, #0
   13664:	d074      	beq.n	13750 <_vfiprintf_r+0x8d0>
   13666:	4621      	mov	r1, r4
   13668:	4658      	mov	r0, fp
   1366a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1366e:	f7ff fbcb 	bl	12e08 <__sprint_r.part.0>
   13672:	2800      	cmp	r0, #0
   13674:	f47f addb 	bne.w	1322e <_vfiprintf_r+0x3ae>
   13678:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1367c:	3d10      	subs	r5, #16
   1367e:	2d10      	cmp	r5, #16
   13680:	f100 0c01 	add.w	ip, r0, #1
   13684:	dce0      	bgt.n	13648 <_vfiprintf_r+0x7c8>
   13686:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13688:	4a71      	ldr	r2, [pc, #452]	; (13850 <_vfiprintf_r+0x9d0>)
   1368a:	f8c9 5004 	str.w	r5, [r9, #4]
   1368e:	442b      	add	r3, r5
   13690:	f1bc 0f07 	cmp.w	ip, #7
   13694:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13698:	f8c9 2000 	str.w	r2, [r9]
   1369c:	f340 8194 	ble.w	139c8 <_vfiprintf_r+0xb48>
   136a0:	2b00      	cmp	r3, #0
   136a2:	f000 831f 	beq.w	13ce4 <_vfiprintf_r+0xe64>
   136a6:	ee18 1a10 	vmov	r1, s16
   136aa:	aa18      	add	r2, sp, #96	; 0x60
   136ac:	4658      	mov	r0, fp
   136ae:	f7ff fbab 	bl	12e08 <__sprint_r.part.0>
   136b2:	2800      	cmp	r0, #0
   136b4:	f47f adbb 	bne.w	1322e <_vfiprintf_r+0x3ae>
   136b8:	9a04      	ldr	r2, [sp, #16]
   136ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   136be:	1abd      	subs	r5, r7, r2
   136c0:	2d00      	cmp	r5, #0
   136c2:	f100 0101 	add.w	r1, r0, #1
   136c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136ca:	f77f ae29 	ble.w	13320 <_vfiprintf_r+0x4a0>
   136ce:	2d10      	cmp	r5, #16
   136d0:	dd29      	ble.n	13726 <_vfiprintf_r+0x8a6>
   136d2:	9409      	str	r4, [sp, #36]	; 0x24
   136d4:	2710      	movs	r7, #16
   136d6:	ee18 4a10 	vmov	r4, s16
   136da:	e007      	b.n	136ec <_vfiprintf_r+0x86c>
   136dc:	f100 0c02 	add.w	ip, r0, #2
   136e0:	f109 0908 	add.w	r9, r9, #8
   136e4:	4610      	mov	r0, r2
   136e6:	3d10      	subs	r5, #16
   136e8:	2d10      	cmp	r5, #16
   136ea:	dd1a      	ble.n	13722 <_vfiprintf_r+0x8a2>
   136ec:	1c42      	adds	r2, r0, #1
   136ee:	4958      	ldr	r1, [pc, #352]	; (13850 <_vfiprintf_r+0x9d0>)
   136f0:	3310      	adds	r3, #16
   136f2:	2a07      	cmp	r2, #7
   136f4:	e9c9 1700 	strd	r1, r7, [r9]
   136f8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   136fc:	ddee      	ble.n	136dc <_vfiprintf_r+0x85c>
   136fe:	aa18      	add	r2, sp, #96	; 0x60
   13700:	b303      	cbz	r3, 13744 <_vfiprintf_r+0x8c4>
   13702:	4621      	mov	r1, r4
   13704:	4658      	mov	r0, fp
   13706:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1370a:	f7ff fb7d 	bl	12e08 <__sprint_r.part.0>
   1370e:	2800      	cmp	r0, #0
   13710:	f47f ad8d 	bne.w	1322e <_vfiprintf_r+0x3ae>
   13714:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13718:	3d10      	subs	r5, #16
   1371a:	2d10      	cmp	r5, #16
   1371c:	f100 0c01 	add.w	ip, r0, #1
   13720:	dce4      	bgt.n	136ec <_vfiprintf_r+0x86c>
   13722:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13724:	4661      	mov	r1, ip
   13726:	4a4a      	ldr	r2, [pc, #296]	; (13850 <_vfiprintf_r+0x9d0>)
   13728:	f8c9 5004 	str.w	r5, [r9, #4]
   1372c:	442b      	add	r3, r5
   1372e:	2907      	cmp	r1, #7
   13730:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13734:	f8c9 2000 	str.w	r2, [r9]
   13738:	f300 80e7 	bgt.w	1390a <_vfiprintf_r+0xa8a>
   1373c:	f109 0908 	add.w	r9, r9, #8
   13740:	3101      	adds	r1, #1
   13742:	e5ed      	b.n	13320 <_vfiprintf_r+0x4a0>
   13744:	f04f 0c01 	mov.w	ip, #1
   13748:	4618      	mov	r0, r3
   1374a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1374e:	e7ca      	b.n	136e6 <_vfiprintf_r+0x866>
   13750:	f04f 0c01 	mov.w	ip, #1
   13754:	4618      	mov	r0, r3
   13756:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1375a:	e772      	b.n	13642 <_vfiprintf_r+0x7c2>
   1375c:	2b00      	cmp	r3, #0
   1375e:	f000 8104 	beq.w	1396a <_vfiprintf_r+0xaea>
   13762:	ee18 1a10 	vmov	r1, s16
   13766:	aa18      	add	r2, sp, #96	; 0x60
   13768:	4658      	mov	r0, fp
   1376a:	f7ff fb4d 	bl	12e08 <__sprint_r.part.0>
   1376e:	2800      	cmp	r0, #0
   13770:	f47f ad5d 	bne.w	1322e <_vfiprintf_r+0x3ae>
   13774:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13778:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1377c:	1c41      	adds	r1, r0, #1
   1377e:	e5a7      	b.n	132d0 <_vfiprintf_r+0x450>
   13780:	2302      	movs	r3, #2
   13782:	aa11      	add	r2, sp, #68	; 0x44
   13784:	931c      	str	r3, [sp, #112]	; 0x70
   13786:	921b      	str	r2, [sp, #108]	; 0x6c
   13788:	2101      	movs	r1, #1
   1378a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1378e:	4608      	mov	r0, r1
   13790:	f109 0908 	add.w	r9, r9, #8
   13794:	1c41      	adds	r1, r0, #1
   13796:	e5ba      	b.n	1330e <_vfiprintf_r+0x48e>
   13798:	2d10      	cmp	r5, #16
   1379a:	f340 82e5 	ble.w	13d68 <_vfiprintf_r+0xee8>
   1379e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   137a2:	940f      	str	r4, [sp, #60]	; 0x3c
   137a4:	4608      	mov	r0, r1
   137a6:	ee18 4a10 	vmov	r4, s16
   137aa:	e007      	b.n	137bc <_vfiprintf_r+0x93c>
   137ac:	f100 0c02 	add.w	ip, r0, #2
   137b0:	f109 0908 	add.w	r9, r9, #8
   137b4:	4610      	mov	r0, r2
   137b6:	3d10      	subs	r5, #16
   137b8:	2d10      	cmp	r5, #16
   137ba:	dd1d      	ble.n	137f8 <_vfiprintf_r+0x978>
   137bc:	4925      	ldr	r1, [pc, #148]	; (13854 <_vfiprintf_r+0x9d4>)
   137be:	f8c9 1000 	str.w	r1, [r9]
   137c2:	1c42      	adds	r2, r0, #1
   137c4:	3310      	adds	r3, #16
   137c6:	2110      	movs	r1, #16
   137c8:	2a07      	cmp	r2, #7
   137ca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   137ce:	f8c9 1004 	str.w	r1, [r9, #4]
   137d2:	ddeb      	ble.n	137ac <_vfiprintf_r+0x92c>
   137d4:	aa18      	add	r2, sp, #96	; 0x60
   137d6:	b303      	cbz	r3, 1381a <_vfiprintf_r+0x99a>
   137d8:	4621      	mov	r1, r4
   137da:	4658      	mov	r0, fp
   137dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   137e0:	f7ff fb12 	bl	12e08 <__sprint_r.part.0>
   137e4:	2800      	cmp	r0, #0
   137e6:	f47f ad22 	bne.w	1322e <_vfiprintf_r+0x3ae>
   137ea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   137ee:	3d10      	subs	r5, #16
   137f0:	2d10      	cmp	r5, #16
   137f2:	f100 0c01 	add.w	ip, r0, #1
   137f6:	dce1      	bgt.n	137bc <_vfiprintf_r+0x93c>
   137f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   137fa:	4660      	mov	r0, ip
   137fc:	4a15      	ldr	r2, [pc, #84]	; (13854 <_vfiprintf_r+0x9d4>)
   137fe:	f8c9 5004 	str.w	r5, [r9, #4]
   13802:	442b      	add	r3, r5
   13804:	2807      	cmp	r0, #7
   13806:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1380a:	f8c9 2000 	str.w	r2, [r9]
   1380e:	f300 80c1 	bgt.w	13994 <_vfiprintf_r+0xb14>
   13812:	f109 0908 	add.w	r9, r9, #8
   13816:	1c41      	adds	r1, r0, #1
   13818:	e546      	b.n	132a8 <_vfiprintf_r+0x428>
   1381a:	4618      	mov	r0, r3
   1381c:	f04f 0c01 	mov.w	ip, #1
   13820:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13824:	e7c7      	b.n	137b6 <_vfiprintf_r+0x936>
   13826:	0776      	lsls	r6, r6, #29
   13828:	9319      	str	r3, [sp, #100]	; 0x64
   1382a:	d553      	bpl.n	138d4 <_vfiprintf_r+0xa54>
   1382c:	9a06      	ldr	r2, [sp, #24]
   1382e:	9903      	ldr	r1, [sp, #12]
   13830:	1a54      	subs	r4, r2, r1
   13832:	2c00      	cmp	r4, #0
   13834:	dd4e      	ble.n	138d4 <_vfiprintf_r+0xa54>
   13836:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1383a:	2c10      	cmp	r4, #16
   1383c:	f340 82b0 	ble.w	13da0 <_vfiprintf_r+0xf20>
   13840:	9919      	ldr	r1, [sp, #100]	; 0x64
   13842:	ee18 6a10 	vmov	r6, s16
   13846:	2510      	movs	r5, #16
   13848:	e00d      	b.n	13866 <_vfiprintf_r+0x9e6>
   1384a:	bf00      	nop
   1384c:	20002b58 	.word	0x20002b58
   13850:	200034ac 	.word	0x200034ac
   13854:	20002b94 	.word	0x20002b94
   13858:	1c88      	adds	r0, r1, #2
   1385a:	f109 0908 	add.w	r9, r9, #8
   1385e:	4611      	mov	r1, r2
   13860:	3c10      	subs	r4, #16
   13862:	2c10      	cmp	r4, #16
   13864:	dd1a      	ble.n	1389c <_vfiprintf_r+0xa1c>
   13866:	1c4a      	adds	r2, r1, #1
   13868:	48b3      	ldr	r0, [pc, #716]	; (13b38 <_vfiprintf_r+0xcb8>)
   1386a:	3310      	adds	r3, #16
   1386c:	2a07      	cmp	r2, #7
   1386e:	e9c9 0500 	strd	r0, r5, [r9]
   13872:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13876:	ddef      	ble.n	13858 <_vfiprintf_r+0x9d8>
   13878:	aa18      	add	r2, sp, #96	; 0x60
   1387a:	b333      	cbz	r3, 138ca <_vfiprintf_r+0xa4a>
   1387c:	4631      	mov	r1, r6
   1387e:	4658      	mov	r0, fp
   13880:	f7ff fac2 	bl	12e08 <__sprint_r.part.0>
   13884:	2800      	cmp	r0, #0
   13886:	f47f acd2 	bne.w	1322e <_vfiprintf_r+0x3ae>
   1388a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1388e:	3c10      	subs	r4, #16
   13890:	2c10      	cmp	r4, #16
   13892:	f101 0001 	add.w	r0, r1, #1
   13896:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1389a:	dce4      	bgt.n	13866 <_vfiprintf_r+0x9e6>
   1389c:	4aa6      	ldr	r2, [pc, #664]	; (13b38 <_vfiprintf_r+0xcb8>)
   1389e:	f8c9 4004 	str.w	r4, [r9, #4]
   138a2:	4423      	add	r3, r4
   138a4:	2807      	cmp	r0, #7
   138a6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   138aa:	f8c9 2000 	str.w	r2, [r9]
   138ae:	f77f ad59 	ble.w	13364 <_vfiprintf_r+0x4e4>
   138b2:	b17b      	cbz	r3, 138d4 <_vfiprintf_r+0xa54>
   138b4:	ee18 1a10 	vmov	r1, s16
   138b8:	aa18      	add	r2, sp, #96	; 0x60
   138ba:	4658      	mov	r0, fp
   138bc:	f7ff faa4 	bl	12e08 <__sprint_r.part.0>
   138c0:	2800      	cmp	r0, #0
   138c2:	f47f acb4 	bne.w	1322e <_vfiprintf_r+0x3ae>
   138c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   138c8:	e54c      	b.n	13364 <_vfiprintf_r+0x4e4>
   138ca:	2001      	movs	r0, #1
   138cc:	4619      	mov	r1, r3
   138ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   138d2:	e7c5      	b.n	13860 <_vfiprintf_r+0x9e0>
   138d4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   138d8:	9903      	ldr	r1, [sp, #12]
   138da:	428a      	cmp	r2, r1
   138dc:	bfac      	ite	ge
   138de:	189b      	addge	r3, r3, r2
   138e0:	185b      	addlt	r3, r3, r1
   138e2:	9305      	str	r3, [sp, #20]
   138e4:	e549      	b.n	1337a <_vfiprintf_r+0x4fa>
   138e6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   138ea:	058f      	lsls	r7, r1, #22
   138ec:	ee18 3a10 	vmov	r3, s16
   138f0:	b28a      	uxth	r2, r1
   138f2:	f53f aae8 	bmi.w	12ec6 <_vfiprintf_r+0x46>
   138f6:	ee18 5a10 	vmov	r5, s16
   138fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   138fc:	f7fe f87c 	bl	119f8 <__retarget_lock_acquire_recursive>
   13900:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13904:	b28a      	uxth	r2, r1
   13906:	f7ff bade 	b.w	12ec6 <_vfiprintf_r+0x46>
   1390a:	2b00      	cmp	r3, #0
   1390c:	f43f ae79 	beq.w	13602 <_vfiprintf_r+0x782>
   13910:	ee18 1a10 	vmov	r1, s16
   13914:	aa18      	add	r2, sp, #96	; 0x60
   13916:	4658      	mov	r0, fp
   13918:	f7ff fa76 	bl	12e08 <__sprint_r.part.0>
   1391c:	2800      	cmp	r0, #0
   1391e:	f47f ac86 	bne.w	1322e <_vfiprintf_r+0x3ae>
   13922:	9919      	ldr	r1, [sp, #100]	; 0x64
   13924:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13926:	3101      	adds	r1, #1
   13928:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1392c:	e4f8      	b.n	13320 <_vfiprintf_r+0x4a0>
   1392e:	9219      	str	r2, [sp, #100]	; 0x64
   13930:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13934:	e45e      	b.n	131f4 <_vfiprintf_r+0x374>
   13936:	2f00      	cmp	r7, #0
   13938:	f47f abc3 	bne.w	130c2 <_vfiprintf_r+0x242>
   1393c:	9e03      	ldr	r6, [sp, #12]
   1393e:	2700      	movs	r7, #0
   13940:	9704      	str	r7, [sp, #16]
   13942:	ac44      	add	r4, sp, #272	; 0x110
   13944:	f7ff bbc5 	b.w	130d2 <_vfiprintf_r+0x252>
   13948:	9b03      	ldr	r3, [sp, #12]
   1394a:	f013 0310 	ands.w	r3, r3, #16
   1394e:	d154      	bne.n	139fa <_vfiprintf_r+0xb7a>
   13950:	9a03      	ldr	r2, [sp, #12]
   13952:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13956:	f000 816b 	beq.w	13c30 <_vfiprintf_r+0xdb0>
   1395a:	9907      	ldr	r1, [sp, #28]
   1395c:	461a      	mov	r2, r3
   1395e:	f851 3b04 	ldr.w	r3, [r1], #4
   13962:	9107      	str	r1, [sp, #28]
   13964:	b29b      	uxth	r3, r3
   13966:	2101      	movs	r1, #1
   13968:	e401      	b.n	1316e <_vfiprintf_r+0x2ee>
   1396a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1396c:	2a00      	cmp	r2, #0
   1396e:	d164      	bne.n	13a3a <_vfiprintf_r+0xbba>
   13970:	4618      	mov	r0, r3
   13972:	2101      	movs	r1, #1
   13974:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13978:	e4c9      	b.n	1330e <_vfiprintf_r+0x48e>
   1397a:	2101      	movs	r1, #1
   1397c:	4618      	mov	r0, r3
   1397e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13982:	e4c4      	b.n	1330e <_vfiprintf_r+0x48e>
   13984:	425b      	negs	r3, r3
   13986:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1398a:	9603      	str	r6, [sp, #12]
   1398c:	202d      	movs	r0, #45	; 0x2d
   1398e:	2101      	movs	r1, #1
   13990:	f7ff bbee 	b.w	13170 <_vfiprintf_r+0x2f0>
   13994:	2b00      	cmp	r3, #0
   13996:	f000 8088 	beq.w	13aaa <_vfiprintf_r+0xc2a>
   1399a:	ee18 1a10 	vmov	r1, s16
   1399e:	aa18      	add	r2, sp, #96	; 0x60
   139a0:	4658      	mov	r0, fp
   139a2:	f7ff fa31 	bl	12e08 <__sprint_r.part.0>
   139a6:	2800      	cmp	r0, #0
   139a8:	f47f ac41 	bne.w	1322e <_vfiprintf_r+0x3ae>
   139ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   139b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   139b4:	1c41      	adds	r1, r0, #1
   139b6:	e477      	b.n	132a8 <_vfiprintf_r+0x428>
   139b8:	f898 1000 	ldrb.w	r1, [r8]
   139bc:	9307      	str	r3, [sp, #28]
   139be:	f7ff bad2 	b.w	12f66 <_vfiprintf_r+0xe6>
   139c2:	ac44      	add	r4, sp, #272	; 0x110
   139c4:	f7ff bb85 	b.w	130d2 <_vfiprintf_r+0x252>
   139c8:	f109 0908 	add.w	r9, r9, #8
   139cc:	f10c 0101 	add.w	r1, ip, #1
   139d0:	4660      	mov	r0, ip
   139d2:	e4a0      	b.n	13316 <_vfiprintf_r+0x496>
   139d4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   139d8:	f040 8197 	bne.w	13d0a <_vfiprintf_r+0xe8a>
   139dc:	f851 3b04 	ldr.w	r3, [r1], #4
   139e0:	9107      	str	r1, [sp, #28]
   139e2:	f7ff bbc0 	b.w	13166 <_vfiprintf_r+0x2e6>
   139e6:	05b3      	lsls	r3, r6, #22
   139e8:	f100 8188 	bmi.w	13cfc <_vfiprintf_r+0xe7c>
   139ec:	f852 3b04 	ldr.w	r3, [r2], #4
   139f0:	9207      	str	r2, [sp, #28]
   139f2:	17da      	asrs	r2, r3, #31
   139f4:	4611      	mov	r1, r2
   139f6:	f7ff bb52 	b.w	1309e <_vfiprintf_r+0x21e>
   139fa:	9907      	ldr	r1, [sp, #28]
   139fc:	f851 3b04 	ldr.w	r3, [r1], #4
   13a00:	9107      	str	r1, [sp, #28]
   13a02:	2101      	movs	r1, #1
   13a04:	f7ff bbb3 	b.w	1316e <_vfiprintf_r+0x2ee>
   13a08:	9b07      	ldr	r3, [sp, #28]
   13a0a:	9805      	ldr	r0, [sp, #20]
   13a0c:	f853 1b04 	ldr.w	r1, [r3], #4
   13a10:	9307      	str	r3, [sp, #28]
   13a12:	17c2      	asrs	r2, r0, #31
   13a14:	e9c1 0200 	strd	r0, r2, [r1]
   13a18:	f7ff ba7d 	b.w	12f16 <_vfiprintf_r+0x96>
   13a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a1e:	2b00      	cmp	r3, #0
   13a20:	f43f ab26 	beq.w	13070 <_vfiprintf_r+0x1f0>
   13a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13a26:	781b      	ldrb	r3, [r3, #0]
   13a28:	2b00      	cmp	r3, #0
   13a2a:	f43f ab21 	beq.w	13070 <_vfiprintf_r+0x1f0>
   13a2e:	f898 1000 	ldrb.w	r1, [r8]
   13a32:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13a36:	f7ff ba96 	b.w	12f66 <_vfiprintf_r+0xe6>
   13a3a:	2302      	movs	r3, #2
   13a3c:	aa11      	add	r2, sp, #68	; 0x44
   13a3e:	931c      	str	r3, [sp, #112]	; 0x70
   13a40:	921b      	str	r2, [sp, #108]	; 0x6c
   13a42:	2001      	movs	r0, #1
   13a44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13a48:	e6a2      	b.n	13790 <_vfiprintf_r+0x910>
   13a4a:	9603      	str	r6, [sp, #12]
   13a4c:	e571      	b.n	13532 <_vfiprintf_r+0x6b2>
   13a4e:	4b3b      	ldr	r3, [pc, #236]	; (13b3c <_vfiprintf_r+0xcbc>)
   13a50:	930c      	str	r3, [sp, #48]	; 0x30
   13a52:	f016 0220 	ands.w	r2, r6, #32
   13a56:	d059      	beq.n	13b0c <_vfiprintf_r+0xc8c>
   13a58:	9b07      	ldr	r3, [sp, #28]
   13a5a:	3307      	adds	r3, #7
   13a5c:	f023 0307 	bic.w	r3, r3, #7
   13a60:	4618      	mov	r0, r3
   13a62:	685a      	ldr	r2, [r3, #4]
   13a64:	f850 3b08 	ldr.w	r3, [r0], #8
   13a68:	9007      	str	r0, [sp, #28]
   13a6a:	07f4      	lsls	r4, r6, #31
   13a6c:	d509      	bpl.n	13a82 <_vfiprintf_r+0xc02>
   13a6e:	ea53 0002 	orrs.w	r0, r3, r2
   13a72:	d006      	beq.n	13a82 <_vfiprintf_r+0xc02>
   13a74:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13a78:	2130      	movs	r1, #48	; 0x30
   13a7a:	f046 0602 	orr.w	r6, r6, #2
   13a7e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13a82:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13a86:	9103      	str	r1, [sp, #12]
   13a88:	2102      	movs	r1, #2
   13a8a:	f7ff bb70 	b.w	1316e <_vfiprintf_r+0x2ee>
   13a8e:	4b2c      	ldr	r3, [pc, #176]	; (13b40 <_vfiprintf_r+0xcc0>)
   13a90:	930c      	str	r3, [sp, #48]	; 0x30
   13a92:	e7de      	b.n	13a52 <_vfiprintf_r+0xbd2>
   13a94:	9b07      	ldr	r3, [sp, #28]
   13a96:	2101      	movs	r1, #1
   13a98:	f853 2b04 	ldr.w	r2, [r3], #4
   13a9c:	9103      	str	r1, [sp, #12]
   13a9e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13aa2:	9307      	str	r3, [sp, #28]
   13aa4:	9104      	str	r1, [sp, #16]
   13aa6:	ac2b      	add	r4, sp, #172	; 0xac
   13aa8:	e4df      	b.n	1346a <_vfiprintf_r+0x5ea>
   13aaa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   13aae:	2a00      	cmp	r2, #0
   13ab0:	f040 8132 	bne.w	13d18 <_vfiprintf_r+0xe98>
   13ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13ab6:	2a00      	cmp	r2, #0
   13ab8:	f47f ae62 	bne.w	13780 <_vfiprintf_r+0x900>
   13abc:	4618      	mov	r0, r3
   13abe:	2101      	movs	r1, #1
   13ac0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13ac4:	e427      	b.n	13316 <_vfiprintf_r+0x496>
   13ac6:	2100      	movs	r1, #0
   13ac8:	2208      	movs	r2, #8
   13aca:	a816      	add	r0, sp, #88	; 0x58
   13acc:	9413      	str	r4, [sp, #76]	; 0x4c
   13ace:	f7fd ff0d 	bl	118ec <memset>
   13ad2:	1c79      	adds	r1, r7, #1
   13ad4:	f000 80bc 	beq.w	13c50 <_vfiprintf_r+0xdd0>
   13ad8:	2500      	movs	r5, #0
   13ada:	9407      	str	r4, [sp, #28]
   13adc:	462c      	mov	r4, r5
   13ade:	e00c      	b.n	13afa <_vfiprintf_r+0xc7a>
   13ae0:	a92b      	add	r1, sp, #172	; 0xac
   13ae2:	4658      	mov	r0, fp
   13ae4:	f000 fa7e 	bl	13fe4 <_wcrtomb_r>
   13ae8:	1c42      	adds	r2, r0, #1
   13aea:	4420      	add	r0, r4
   13aec:	f000 816b 	beq.w	13dc6 <_vfiprintf_r+0xf46>
   13af0:	42b8      	cmp	r0, r7
   13af2:	dc08      	bgt.n	13b06 <_vfiprintf_r+0xc86>
   13af4:	f000 8170 	beq.w	13dd8 <_vfiprintf_r+0xf58>
   13af8:	4604      	mov	r4, r0
   13afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13afc:	5952      	ldr	r2, [r2, r5]
   13afe:	ab16      	add	r3, sp, #88	; 0x58
   13b00:	3504      	adds	r5, #4
   13b02:	2a00      	cmp	r2, #0
   13b04:	d1ec      	bne.n	13ae0 <_vfiprintf_r+0xc60>
   13b06:	9404      	str	r4, [sp, #16]
   13b08:	9c07      	ldr	r4, [sp, #28]
   13b0a:	e0af      	b.n	13c6c <_vfiprintf_r+0xdec>
   13b0c:	f016 0310 	ands.w	r3, r6, #16
   13b10:	9807      	ldr	r0, [sp, #28]
   13b12:	d10c      	bne.n	13b2e <_vfiprintf_r+0xcae>
   13b14:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13b18:	d005      	beq.n	13b26 <_vfiprintf_r+0xca6>
   13b1a:	461a      	mov	r2, r3
   13b1c:	f850 3b04 	ldr.w	r3, [r0], #4
   13b20:	9007      	str	r0, [sp, #28]
   13b22:	b29b      	uxth	r3, r3
   13b24:	e7a1      	b.n	13a6a <_vfiprintf_r+0xbea>
   13b26:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13b2a:	f040 80e1 	bne.w	13cf0 <_vfiprintf_r+0xe70>
   13b2e:	f850 3b04 	ldr.w	r3, [r0], #4
   13b32:	9007      	str	r0, [sp, #28]
   13b34:	e799      	b.n	13a6a <_vfiprintf_r+0xbea>
   13b36:	bf00      	nop
   13b38:	20002b94 	.word	0x20002b94
   13b3c:	20002b58 	.word	0x20002b58
   13b40:	20002b44 	.word	0x20002b44
   13b44:	9903      	ldr	r1, [sp, #12]
   13b46:	9704      	str	r7, [sp, #16]
   13b48:	ac44      	add	r4, sp, #272	; 0x110
   13b4a:	469e      	mov	lr, r3
   13b4c:	ee08 ba90 	vmov	s17, fp
   13b50:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13b54:	f04f 0c00 	mov.w	ip, #0
   13b58:	4623      	mov	r3, r4
   13b5a:	e006      	b.n	13b6a <_vfiprintf_r+0xcea>
   13b5c:	f1be 0f0a 	cmp.w	lr, #10
   13b60:	f172 0200 	sbcs.w	r2, r2, #0
   13b64:	d339      	bcc.n	13bda <_vfiprintf_r+0xd5a>
   13b66:	46a6      	mov	lr, r4
   13b68:	462a      	mov	r2, r5
   13b6a:	49a6      	ldr	r1, [pc, #664]	; (13e04 <_vfiprintf_r+0xf84>)
   13b6c:	eb1e 0002 	adds.w	r0, lr, r2
   13b70:	f140 0000 	adc.w	r0, r0, #0
   13b74:	460f      	mov	r7, r1
   13b76:	fba1 1400 	umull	r1, r4, r1, r0
   13b7a:	f024 0103 	bic.w	r1, r4, #3
   13b7e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13b82:	1a40      	subs	r0, r0, r1
   13b84:	ebbe 0100 	subs.w	r1, lr, r0
   13b88:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   13b8c:	f162 0400 	sbc.w	r4, r2, #0
   13b90:	fb05 f501 	mul.w	r5, r5, r1
   13b94:	fb07 5504 	mla	r5, r7, r4, r5
   13b98:	fba1 4107 	umull	r4, r1, r1, r7
   13b9c:	440d      	add	r5, r1
   13b9e:	2705      	movs	r7, #5
   13ba0:	f004 0101 	and.w	r1, r4, #1
   13ba4:	fba1 1b07 	umull	r1, fp, r1, r7
   13ba8:	1809      	adds	r1, r1, r0
   13baa:	0864      	lsrs	r4, r4, #1
   13bac:	3130      	adds	r1, #48	; 0x30
   13bae:	f803 1c01 	strb.w	r1, [r3, #-1]
   13bb2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13bb6:	f10c 0c01 	add.w	ip, ip, #1
   13bba:	3b01      	subs	r3, #1
   13bbc:	086d      	lsrs	r5, r5, #1
   13bbe:	2e00      	cmp	r6, #0
   13bc0:	d0cc      	beq.n	13b5c <_vfiprintf_r+0xcdc>
   13bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13bc4:	7809      	ldrb	r1, [r1, #0]
   13bc6:	4561      	cmp	r1, ip
   13bc8:	d1c8      	bne.n	13b5c <_vfiprintf_r+0xcdc>
   13bca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   13bce:	d0c5      	beq.n	13b5c <_vfiprintf_r+0xcdc>
   13bd0:	f1be 0f0a 	cmp.w	lr, #10
   13bd4:	f172 0200 	sbcs.w	r2, r2, #0
   13bd8:	d26c      	bcs.n	13cb4 <_vfiprintf_r+0xe34>
   13bda:	461c      	mov	r4, r3
   13bdc:	ab44      	add	r3, sp, #272	; 0x110
   13bde:	1b1b      	subs	r3, r3, r4
   13be0:	9f04      	ldr	r7, [sp, #16]
   13be2:	9e03      	ldr	r6, [sp, #12]
   13be4:	9304      	str	r3, [sp, #16]
   13be6:	ee18 ba90 	vmov	fp, s17
   13bea:	f7ff ba72 	b.w	130d2 <_vfiprintf_r+0x252>
   13bee:	9603      	str	r6, [sp, #12]
   13bf0:	f7ff ba62 	b.w	130b8 <_vfiprintf_r+0x238>
   13bf4:	4658      	mov	r0, fp
   13bf6:	f7fe fc0d 	bl	12414 <__sinit>
   13bfa:	f7ff b95b 	b.w	12eb4 <_vfiprintf_r+0x34>
   13bfe:	2901      	cmp	r1, #1
   13c00:	9603      	str	r6, [sp, #12]
   13c02:	f47f accd 	bne.w	135a0 <_vfiprintf_r+0x720>
   13c06:	f7ff ba5c 	b.w	130c2 <_vfiprintf_r+0x242>
   13c0a:	9b07      	ldr	r3, [sp, #28]
   13c0c:	9905      	ldr	r1, [sp, #20]
   13c0e:	f853 2b04 	ldr.w	r2, [r3], #4
   13c12:	6011      	str	r1, [r2, #0]
   13c14:	9307      	str	r3, [sp, #28]
   13c16:	f7ff b97e 	b.w	12f16 <_vfiprintf_r+0x96>
   13c1a:	2f06      	cmp	r7, #6
   13c1c:	463b      	mov	r3, r7
   13c1e:	9a03      	ldr	r2, [sp, #12]
   13c20:	4c79      	ldr	r4, [pc, #484]	; (13e08 <_vfiprintf_r+0xf88>)
   13c22:	9207      	str	r2, [sp, #28]
   13c24:	bf28      	it	cs
   13c26:	2306      	movcs	r3, #6
   13c28:	9304      	str	r3, [sp, #16]
   13c2a:	9303      	str	r3, [sp, #12]
   13c2c:	f7ff bb25 	b.w	1327a <_vfiprintf_r+0x3fa>
   13c30:	9b03      	ldr	r3, [sp, #12]
   13c32:	9907      	ldr	r1, [sp, #28]
   13c34:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13c38:	bf14      	ite	ne
   13c3a:	f851 3b04 	ldrne.w	r3, [r1], #4
   13c3e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13c42:	9107      	str	r1, [sp, #28]
   13c44:	bf1c      	itt	ne
   13c46:	4602      	movne	r2, r0
   13c48:	b2db      	uxtbne	r3, r3
   13c4a:	2101      	movs	r1, #1
   13c4c:	f7ff ba8f 	b.w	1316e <_vfiprintf_r+0x2ee>
   13c50:	ab16      	add	r3, sp, #88	; 0x58
   13c52:	9300      	str	r3, [sp, #0]
   13c54:	2300      	movs	r3, #0
   13c56:	4619      	mov	r1, r3
   13c58:	aa13      	add	r2, sp, #76	; 0x4c
   13c5a:	4658      	mov	r0, fp
   13c5c:	f000 fb22 	bl	142a4 <_wcsrtombs_r>
   13c60:	4603      	mov	r3, r0
   13c62:	3301      	adds	r3, #1
   13c64:	9004      	str	r0, [sp, #16]
   13c66:	f000 80ae 	beq.w	13dc6 <_vfiprintf_r+0xf46>
   13c6a:	9413      	str	r4, [sp, #76]	; 0x4c
   13c6c:	9b04      	ldr	r3, [sp, #16]
   13c6e:	2b00      	cmp	r3, #0
   13c70:	d030      	beq.n	13cd4 <_vfiprintf_r+0xe54>
   13c72:	2b63      	cmp	r3, #99	; 0x63
   13c74:	dc63      	bgt.n	13d3e <_vfiprintf_r+0xebe>
   13c76:	2300      	movs	r3, #0
   13c78:	9308      	str	r3, [sp, #32]
   13c7a:	ac2b      	add	r4, sp, #172	; 0xac
   13c7c:	2208      	movs	r2, #8
   13c7e:	2100      	movs	r1, #0
   13c80:	a816      	add	r0, sp, #88	; 0x58
   13c82:	f7fd fe33 	bl	118ec <memset>
   13c86:	9d04      	ldr	r5, [sp, #16]
   13c88:	ab16      	add	r3, sp, #88	; 0x58
   13c8a:	9300      	str	r3, [sp, #0]
   13c8c:	aa13      	add	r2, sp, #76	; 0x4c
   13c8e:	462b      	mov	r3, r5
   13c90:	4621      	mov	r1, r4
   13c92:	4658      	mov	r0, fp
   13c94:	f000 fb06 	bl	142a4 <_wcsrtombs_r>
   13c98:	4285      	cmp	r5, r0
   13c9a:	f040 80ab 	bne.w	13df4 <_vfiprintf_r+0xf74>
   13c9e:	9b03      	ldr	r3, [sp, #12]
   13ca0:	9a04      	ldr	r2, [sp, #16]
   13ca2:	9307      	str	r3, [sp, #28]
   13ca4:	2300      	movs	r3, #0
   13ca6:	54a3      	strb	r3, [r4, r2]
   13ca8:	461f      	mov	r7, r3
   13caa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   13cae:	9303      	str	r3, [sp, #12]
   13cb0:	f7ff ba16 	b.w	130e0 <_vfiprintf_r+0x260>
   13cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13cb6:	990d      	ldr	r1, [sp, #52]	; 0x34
   13cb8:	1a9b      	subs	r3, r3, r2
   13cba:	4618      	mov	r0, r3
   13cbc:	9308      	str	r3, [sp, #32]
   13cbe:	f7fd fa3b 	bl	11138 <strncpy>
   13cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13cc4:	9b08      	ldr	r3, [sp, #32]
   13cc6:	784a      	ldrb	r2, [r1, #1]
   13cc8:	b10a      	cbz	r2, 13cce <_vfiprintf_r+0xe4e>
   13cca:	3101      	adds	r1, #1
   13ccc:	910b      	str	r1, [sp, #44]	; 0x2c
   13cce:	f04f 0c00 	mov.w	ip, #0
   13cd2:	e748      	b.n	13b66 <_vfiprintf_r+0xce6>
   13cd4:	9b03      	ldr	r3, [sp, #12]
   13cd6:	9307      	str	r3, [sp, #28]
   13cd8:	9b04      	ldr	r3, [sp, #16]
   13cda:	9303      	str	r3, [sp, #12]
   13cdc:	461f      	mov	r7, r3
   13cde:	9308      	str	r3, [sp, #32]
   13ce0:	f7ff b9fe 	b.w	130e0 <_vfiprintf_r+0x260>
   13ce4:	2101      	movs	r1, #1
   13ce6:	4618      	mov	r0, r3
   13ce8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13cec:	f7ff bb13 	b.w	13316 <_vfiprintf_r+0x496>
   13cf0:	f850 3b04 	ldr.w	r3, [r0], #4
   13cf4:	9007      	str	r0, [sp, #28]
   13cf6:	4622      	mov	r2, r4
   13cf8:	b2db      	uxtb	r3, r3
   13cfa:	e6b6      	b.n	13a6a <_vfiprintf_r+0xbea>
   13cfc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13d00:	9207      	str	r2, [sp, #28]
   13d02:	17da      	asrs	r2, r3, #31
   13d04:	4611      	mov	r1, r2
   13d06:	f7ff b9ca 	b.w	1309e <_vfiprintf_r+0x21e>
   13d0a:	f851 3b04 	ldr.w	r3, [r1], #4
   13d0e:	9107      	str	r1, [sp, #28]
   13d10:	4602      	mov	r2, r0
   13d12:	b2db      	uxtb	r3, r3
   13d14:	f7ff ba27 	b.w	13166 <_vfiprintf_r+0x2e6>
   13d18:	2301      	movs	r3, #1
   13d1a:	931c      	str	r3, [sp, #112]	; 0x70
   13d1c:	2101      	movs	r1, #1
   13d1e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13d22:	931b      	str	r3, [sp, #108]	; 0x6c
   13d24:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13d28:	460b      	mov	r3, r1
   13d2a:	f7ff bacd 	b.w	132c8 <_vfiprintf_r+0x448>
   13d2e:	9b07      	ldr	r3, [sp, #28]
   13d30:	9905      	ldr	r1, [sp, #20]
   13d32:	f853 2b04 	ldr.w	r2, [r3], #4
   13d36:	9307      	str	r3, [sp, #28]
   13d38:	8011      	strh	r1, [r2, #0]
   13d3a:	f7ff b8ec 	b.w	12f16 <_vfiprintf_r+0x96>
   13d3e:	1c59      	adds	r1, r3, #1
   13d40:	4658      	mov	r0, fp
   13d42:	f7fd fa57 	bl	111f4 <_malloc_r>
   13d46:	4604      	mov	r4, r0
   13d48:	2800      	cmp	r0, #0
   13d4a:	d03c      	beq.n	13dc6 <_vfiprintf_r+0xf46>
   13d4c:	9008      	str	r0, [sp, #32]
   13d4e:	e795      	b.n	13c7c <_vfiprintf_r+0xdfc>
   13d50:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13d52:	f7fd fe53 	bl	119fc <__retarget_lock_release_recursive>
   13d56:	f7ff b9e9 	b.w	1312c <_vfiprintf_r+0x2ac>
   13d5a:	9b03      	ldr	r3, [sp, #12]
   13d5c:	9307      	str	r3, [sp, #28]
   13d5e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13d62:	9f08      	ldr	r7, [sp, #32]
   13d64:	f7ff b9bc 	b.w	130e0 <_vfiprintf_r+0x260>
   13d68:	9819      	ldr	r0, [sp, #100]	; 0x64
   13d6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13d6c:	3001      	adds	r0, #1
   13d6e:	e545      	b.n	137fc <_vfiprintf_r+0x97c>
   13d70:	9b03      	ldr	r3, [sp, #12]
   13d72:	9307      	str	r3, [sp, #28]
   13d74:	4620      	mov	r0, r4
   13d76:	f7fe fbe3 	bl	12540 <strlen>
   13d7a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   13d7e:	462f      	mov	r7, r5
   13d80:	9004      	str	r0, [sp, #16]
   13d82:	9303      	str	r3, [sp, #12]
   13d84:	9508      	str	r5, [sp, #32]
   13d86:	f7ff b9ab 	b.w	130e0 <_vfiprintf_r+0x260>
   13d8a:	ee18 1a10 	vmov	r1, s16
   13d8e:	aa18      	add	r2, sp, #96	; 0x60
   13d90:	4658      	mov	r0, fp
   13d92:	f7ff f839 	bl	12e08 <__sprint_r.part.0>
   13d96:	2800      	cmp	r0, #0
   13d98:	f43f aa36 	beq.w	13208 <_vfiprintf_r+0x388>
   13d9c:	f7ff ba4d 	b.w	1323a <_vfiprintf_r+0x3ba>
   13da0:	9819      	ldr	r0, [sp, #100]	; 0x64
   13da2:	3001      	adds	r0, #1
   13da4:	e57a      	b.n	1389c <_vfiprintf_r+0xa1c>
   13da6:	468c      	mov	ip, r1
   13da8:	e46e      	b.n	13688 <_vfiprintf_r+0x808>
   13daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13dac:	07d9      	lsls	r1, r3, #31
   13dae:	d405      	bmi.n	13dbc <_vfiprintf_r+0xf3c>
   13db0:	89ab      	ldrh	r3, [r5, #12]
   13db2:	059a      	lsls	r2, r3, #22
   13db4:	d402      	bmi.n	13dbc <_vfiprintf_r+0xf3c>
   13db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13db8:	f7fd fe20 	bl	119fc <__retarget_lock_release_recursive>
   13dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13dc0:	9305      	str	r3, [sp, #20]
   13dc2:	f7ff ba49 	b.w	13258 <_vfiprintf_r+0x3d8>
   13dc6:	ee18 2a10 	vmov	r2, s16
   13dca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13dd2:	8193      	strh	r3, [r2, #12]
   13dd4:	f7ff ba35 	b.w	13242 <_vfiprintf_r+0x3c2>
   13dd8:	9c07      	ldr	r4, [sp, #28]
   13dda:	9704      	str	r7, [sp, #16]
   13ddc:	e746      	b.n	13c6c <_vfiprintf_r+0xdec>
   13dde:	9b07      	ldr	r3, [sp, #28]
   13de0:	f898 1001 	ldrb.w	r1, [r8, #1]
   13de4:	f853 7b04 	ldr.w	r7, [r3], #4
   13de8:	9307      	str	r3, [sp, #28]
   13dea:	4690      	mov	r8, r2
   13dec:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13df0:	f7ff b8b9 	b.w	12f66 <_vfiprintf_r+0xe6>
   13df4:	ee18 2a10 	vmov	r2, s16
   13df8:	8993      	ldrh	r3, [r2, #12]
   13dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13dfe:	8193      	strh	r3, [r2, #12]
   13e00:	f7ff ba15 	b.w	1322e <_vfiprintf_r+0x3ae>
   13e04:	cccccccd 	.word	0xcccccccd
   13e08:	20002b6c 	.word	0x20002b6c

00013e0c <__sbprintf>:
   13e0c:	b570      	push	{r4, r5, r6, lr}
   13e0e:	460c      	mov	r4, r1
   13e10:	8989      	ldrh	r1, [r1, #12]
   13e12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13e16:	f021 0102 	bic.w	r1, r1, #2
   13e1a:	f8ad 1014 	strh.w	r1, [sp, #20]
   13e1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13e20:	911b      	str	r1, [sp, #108]	; 0x6c
   13e22:	89e1      	ldrh	r1, [r4, #14]
   13e24:	f8ad 1016 	strh.w	r1, [sp, #22]
   13e28:	69e1      	ldr	r1, [r4, #28]
   13e2a:	9109      	str	r1, [sp, #36]	; 0x24
   13e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13e2e:	910b      	str	r1, [sp, #44]	; 0x2c
   13e30:	a91c      	add	r1, sp, #112	; 0x70
   13e32:	9102      	str	r1, [sp, #8]
   13e34:	9106      	str	r1, [sp, #24]
   13e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13e3a:	4606      	mov	r6, r0
   13e3c:	9104      	str	r1, [sp, #16]
   13e3e:	9107      	str	r1, [sp, #28]
   13e40:	a818      	add	r0, sp, #96	; 0x60
   13e42:	2100      	movs	r1, #0
   13e44:	e9cd 3200 	strd	r3, r2, [sp]
   13e48:	9108      	str	r1, [sp, #32]
   13e4a:	f7fd fdd1 	bl	119f0 <__retarget_lock_init_recursive>
   13e4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13e52:	a902      	add	r1, sp, #8
   13e54:	4630      	mov	r0, r6
   13e56:	f7ff f813 	bl	12e80 <_vfiprintf_r>
   13e5a:	1e05      	subs	r5, r0, #0
   13e5c:	db07      	blt.n	13e6e <__sbprintf+0x62>
   13e5e:	a902      	add	r1, sp, #8
   13e60:	4630      	mov	r0, r6
   13e62:	f001 f9e1 	bl	15228 <_fflush_r>
   13e66:	2800      	cmp	r0, #0
   13e68:	bf18      	it	ne
   13e6a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   13e6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13e72:	065b      	lsls	r3, r3, #25
   13e74:	d503      	bpl.n	13e7e <__sbprintf+0x72>
   13e76:	89a3      	ldrh	r3, [r4, #12]
   13e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e7c:	81a3      	strh	r3, [r4, #12]
   13e7e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13e80:	f7fd fdb8 	bl	119f4 <__retarget_lock_close_recursive>
   13e84:	4628      	mov	r0, r5
   13e86:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   13e8a:	bd70      	pop	{r4, r5, r6, pc}

00013e8c <__register_exitproc>:
   13e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e90:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13f10 <__register_exitproc+0x84>
   13e94:	4606      	mov	r6, r0
   13e96:	f8da 0000 	ldr.w	r0, [sl]
   13e9a:	4698      	mov	r8, r3
   13e9c:	460f      	mov	r7, r1
   13e9e:	4691      	mov	r9, r2
   13ea0:	f7fd fdaa 	bl	119f8 <__retarget_lock_acquire_recursive>
   13ea4:	4b18      	ldr	r3, [pc, #96]	; (13f08 <__register_exitproc+0x7c>)
   13ea6:	681c      	ldr	r4, [r3, #0]
   13ea8:	b324      	cbz	r4, 13ef4 <__register_exitproc+0x68>
   13eaa:	6865      	ldr	r5, [r4, #4]
   13eac:	2d1f      	cmp	r5, #31
   13eae:	dc24      	bgt.n	13efa <__register_exitproc+0x6e>
   13eb0:	b95e      	cbnz	r6, 13eca <__register_exitproc+0x3e>
   13eb2:	1c6b      	adds	r3, r5, #1
   13eb4:	3502      	adds	r5, #2
   13eb6:	f8da 0000 	ldr.w	r0, [sl]
   13eba:	6063      	str	r3, [r4, #4]
   13ebc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13ec0:	f7fd fd9c 	bl	119fc <__retarget_lock_release_recursive>
   13ec4:	2000      	movs	r0, #0
   13ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13eca:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   13ece:	2301      	movs	r3, #1
   13ed0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13ed4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13ed8:	40ab      	lsls	r3, r5
   13eda:	431a      	orrs	r2, r3
   13edc:	2e02      	cmp	r6, #2
   13ede:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   13ee2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13ee6:	d1e4      	bne.n	13eb2 <__register_exitproc+0x26>
   13ee8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   13eec:	431a      	orrs	r2, r3
   13eee:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   13ef2:	e7de      	b.n	13eb2 <__register_exitproc+0x26>
   13ef4:	4c05      	ldr	r4, [pc, #20]	; (13f0c <__register_exitproc+0x80>)
   13ef6:	601c      	str	r4, [r3, #0]
   13ef8:	e7d7      	b.n	13eaa <__register_exitproc+0x1e>
   13efa:	f8da 0000 	ldr.w	r0, [sl]
   13efe:	f7fd fd7d 	bl	119fc <__retarget_lock_release_recursive>
   13f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13f06:	e7de      	b.n	13ec6 <__register_exitproc+0x3a>
   13f08:	2000513c 	.word	0x2000513c
   13f0c:	20005140 	.word	0x20005140
   13f10:	200036a8 	.word	0x200036a8

00013f14 <__ascii_mbtowc>:
   13f14:	b082      	sub	sp, #8
   13f16:	b149      	cbz	r1, 13f2c <__ascii_mbtowc+0x18>
   13f18:	b15a      	cbz	r2, 13f32 <__ascii_mbtowc+0x1e>
   13f1a:	b16b      	cbz	r3, 13f38 <__ascii_mbtowc+0x24>
   13f1c:	7813      	ldrb	r3, [r2, #0]
   13f1e:	600b      	str	r3, [r1, #0]
   13f20:	7812      	ldrb	r2, [r2, #0]
   13f22:	1e10      	subs	r0, r2, #0
   13f24:	bf18      	it	ne
   13f26:	2001      	movne	r0, #1
   13f28:	b002      	add	sp, #8
   13f2a:	4770      	bx	lr
   13f2c:	a901      	add	r1, sp, #4
   13f2e:	2a00      	cmp	r2, #0
   13f30:	d1f3      	bne.n	13f1a <__ascii_mbtowc+0x6>
   13f32:	4610      	mov	r0, r2
   13f34:	b002      	add	sp, #8
   13f36:	4770      	bx	lr
   13f38:	f06f 0001 	mvn.w	r0, #1
   13f3c:	e7f4      	b.n	13f28 <__ascii_mbtowc+0x14>
   13f3e:	bf00      	nop

00013f40 <fcvtbuf>:
   13f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f44:	460e      	mov	r6, r1
   13f46:	4926      	ldr	r1, [pc, #152]	; (13fe0 <fcvtbuf+0xa0>)
   13f48:	b087      	sub	sp, #28
   13f4a:	680f      	ldr	r7, [r1, #0]
   13f4c:	4604      	mov	r4, r0
   13f4e:	4690      	mov	r8, r2
   13f50:	461d      	mov	r5, r3
   13f52:	b353      	cbz	r3, 13faa <fcvtbuf+0x6a>
   13f54:	aa05      	add	r2, sp, #20
   13f56:	4633      	mov	r3, r6
   13f58:	9201      	str	r2, [sp, #4]
   13f5a:	2103      	movs	r1, #3
   13f5c:	4622      	mov	r2, r4
   13f5e:	f8cd 8000 	str.w	r8, [sp]
   13f62:	4638      	mov	r0, r7
   13f64:	f000 fa40 	bl	143e8 <_dtoa_r>
   13f68:	9b05      	ldr	r3, [sp, #20]
   13f6a:	6832      	ldr	r2, [r6, #0]
   13f6c:	4298      	cmp	r0, r3
   13f6e:	4684      	mov	ip, r0
   13f70:	f1c2 0200 	rsb	r2, r2, #0
   13f74:	4629      	mov	r1, r5
   13f76:	d209      	bcs.n	13f8c <fcvtbuf+0x4c>
   13f78:	1a10      	subs	r0, r2, r0
   13f7a:	f81c 3b01 	ldrb.w	r3, [ip], #1
   13f7e:	f801 3b01 	strb.w	r3, [r1], #1
   13f82:	9b05      	ldr	r3, [sp, #20]
   13f84:	4563      	cmp	r3, ip
   13f86:	eb00 020c 	add.w	r2, r0, ip
   13f8a:	d8f6      	bhi.n	13f7a <fcvtbuf+0x3a>
   13f8c:	4294      	cmp	r4, r2
   13f8e:	dd24      	ble.n	13fda <fcvtbuf+0x9a>
   13f90:	1aa2      	subs	r2, r4, r2
   13f92:	440a      	add	r2, r1
   13f94:	2330      	movs	r3, #48	; 0x30
   13f96:	f801 3b01 	strb.w	r3, [r1], #1
   13f9a:	4291      	cmp	r1, r2
   13f9c:	d1fb      	bne.n	13f96 <fcvtbuf+0x56>
   13f9e:	2300      	movs	r3, #0
   13fa0:	7013      	strb	r3, [r2, #0]
   13fa2:	4628      	mov	r0, r5
   13fa4:	b007      	add	sp, #28
   13fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13faa:	6cba      	ldr	r2, [r7, #72]	; 0x48
   13fac:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13fb0:	429a      	cmp	r2, r3
   13fb2:	dd01      	ble.n	13fb8 <fcvtbuf+0x78>
   13fb4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13fb6:	e7cd      	b.n	13f54 <fcvtbuf+0x14>
   13fb8:	f100 0924 	add.w	r9, r0, #36	; 0x24
   13fbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   13fbe:	464a      	mov	r2, r9
   13fc0:	4638      	mov	r0, r7
   13fc2:	ed8d 0b02 	vstr	d0, [sp, #8]
   13fc6:	f7fe fb29 	bl	1261c <_realloc_r>
   13fca:	4605      	mov	r5, r0
   13fcc:	2800      	cmp	r0, #0
   13fce:	d0e8      	beq.n	13fa2 <fcvtbuf+0x62>
   13fd0:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13fd4:	ed9d 0b02 	vldr	d0, [sp, #8]
   13fd8:	e7bc      	b.n	13f54 <fcvtbuf+0x14>
   13fda:	460a      	mov	r2, r1
   13fdc:	e7df      	b.n	13f9e <fcvtbuf+0x5e>
   13fde:	bf00      	nop
   13fe0:	20003c3c 	.word	0x20003c3c

00013fe4 <_wcrtomb_r>:
   13fe4:	b570      	push	{r4, r5, r6, lr}
   13fe6:	4605      	mov	r5, r0
   13fe8:	b084      	sub	sp, #16
   13fea:	b15b      	cbz	r3, 14004 <_wcrtomb_r+0x20>
   13fec:	461c      	mov	r4, r3
   13fee:	b169      	cbz	r1, 1400c <_wcrtomb_r+0x28>
   13ff0:	4b0e      	ldr	r3, [pc, #56]	; (1402c <_wcrtomb_r+0x48>)
   13ff2:	4628      	mov	r0, r5
   13ff4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13ff8:	4623      	mov	r3, r4
   13ffa:	47b0      	blx	r6
   13ffc:	1c43      	adds	r3, r0, #1
   13ffe:	d00f      	beq.n	14020 <_wcrtomb_r+0x3c>
   14000:	b004      	add	sp, #16
   14002:	bd70      	pop	{r4, r5, r6, pc}
   14004:	f500 7482 	add.w	r4, r0, #260	; 0x104
   14008:	2900      	cmp	r1, #0
   1400a:	d1f1      	bne.n	13ff0 <_wcrtomb_r+0xc>
   1400c:	4a07      	ldr	r2, [pc, #28]	; (1402c <_wcrtomb_r+0x48>)
   1400e:	4623      	mov	r3, r4
   14010:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   14014:	4628      	mov	r0, r5
   14016:	460a      	mov	r2, r1
   14018:	a901      	add	r1, sp, #4
   1401a:	47b0      	blx	r6
   1401c:	1c43      	adds	r3, r0, #1
   1401e:	d1ef      	bne.n	14000 <_wcrtomb_r+0x1c>
   14020:	2200      	movs	r2, #0
   14022:	238a      	movs	r3, #138	; 0x8a
   14024:	6022      	str	r2, [r4, #0]
   14026:	602b      	str	r3, [r5, #0]
   14028:	b004      	add	sp, #16
   1402a:	bd70      	pop	{r4, r5, r6, pc}
   1402c:	200036b4 	.word	0x200036b4

00014030 <_localeconv_r>:
   14030:	4800      	ldr	r0, [pc, #0]	; (14034 <_localeconv_r+0x4>)
   14032:	4770      	bx	lr
   14034:	200037a4 	.word	0x200037a4

00014038 <_fclose_r>:
   14038:	b570      	push	{r4, r5, r6, lr}
   1403a:	2900      	cmp	r1, #0
   1403c:	d04b      	beq.n	140d6 <_fclose_r+0x9e>
   1403e:	4606      	mov	r6, r0
   14040:	460c      	mov	r4, r1
   14042:	b110      	cbz	r0, 1404a <_fclose_r+0x12>
   14044:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14046:	2b00      	cmp	r3, #0
   14048:	d048      	beq.n	140dc <_fclose_r+0xa4>
   1404a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1404c:	07d8      	lsls	r0, r3, #31
   1404e:	d534      	bpl.n	140ba <_fclose_r+0x82>
   14050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14054:	2b00      	cmp	r3, #0
   14056:	d03e      	beq.n	140d6 <_fclose_r+0x9e>
   14058:	4621      	mov	r1, r4
   1405a:	4630      	mov	r0, r6
   1405c:	f001 f84c 	bl	150f8 <__sflush_r>
   14060:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14062:	4605      	mov	r5, r0
   14064:	b133      	cbz	r3, 14074 <_fclose_r+0x3c>
   14066:	69e1      	ldr	r1, [r4, #28]
   14068:	4630      	mov	r0, r6
   1406a:	4798      	blx	r3
   1406c:	2800      	cmp	r0, #0
   1406e:	bfb8      	it	lt
   14070:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   14074:	89a3      	ldrh	r3, [r4, #12]
   14076:	061a      	lsls	r2, r3, #24
   14078:	d43c      	bmi.n	140f4 <_fclose_r+0xbc>
   1407a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1407c:	b141      	cbz	r1, 14090 <_fclose_r+0x58>
   1407e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   14082:	4299      	cmp	r1, r3
   14084:	d002      	beq.n	1408c <_fclose_r+0x54>
   14086:	4630      	mov	r0, r6
   14088:	f7fe fd04 	bl	12a94 <_free_r>
   1408c:	2300      	movs	r3, #0
   1408e:	6323      	str	r3, [r4, #48]	; 0x30
   14090:	6c61      	ldr	r1, [r4, #68]	; 0x44
   14092:	b121      	cbz	r1, 1409e <_fclose_r+0x66>
   14094:	4630      	mov	r0, r6
   14096:	f7fe fcfd 	bl	12a94 <_free_r>
   1409a:	2300      	movs	r3, #0
   1409c:	6463      	str	r3, [r4, #68]	; 0x44
   1409e:	f7fe f9d7 	bl	12450 <__sfp_lock_acquire>
   140a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   140a4:	2200      	movs	r2, #0
   140a6:	07db      	lsls	r3, r3, #31
   140a8:	81a2      	strh	r2, [r4, #12]
   140aa:	d51f      	bpl.n	140ec <_fclose_r+0xb4>
   140ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140ae:	f7fd fca1 	bl	119f4 <__retarget_lock_close_recursive>
   140b2:	f7fe f9d3 	bl	1245c <__sfp_lock_release>
   140b6:	4628      	mov	r0, r5
   140b8:	bd70      	pop	{r4, r5, r6, pc}
   140ba:	89a3      	ldrh	r3, [r4, #12]
   140bc:	0599      	lsls	r1, r3, #22
   140be:	d4cb      	bmi.n	14058 <_fclose_r+0x20>
   140c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140c2:	f7fd fc99 	bl	119f8 <__retarget_lock_acquire_recursive>
   140c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   140ca:	2b00      	cmp	r3, #0
   140cc:	d1c4      	bne.n	14058 <_fclose_r+0x20>
   140ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
   140d0:	f015 0501 	ands.w	r5, r5, #1
   140d4:	d005      	beq.n	140e2 <_fclose_r+0xaa>
   140d6:	2500      	movs	r5, #0
   140d8:	4628      	mov	r0, r5
   140da:	bd70      	pop	{r4, r5, r6, pc}
   140dc:	f7fe f99a 	bl	12414 <__sinit>
   140e0:	e7b3      	b.n	1404a <_fclose_r+0x12>
   140e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140e4:	f7fd fc8a 	bl	119fc <__retarget_lock_release_recursive>
   140e8:	4628      	mov	r0, r5
   140ea:	bd70      	pop	{r4, r5, r6, pc}
   140ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   140ee:	f7fd fc85 	bl	119fc <__retarget_lock_release_recursive>
   140f2:	e7db      	b.n	140ac <_fclose_r+0x74>
   140f4:	6921      	ldr	r1, [r4, #16]
   140f6:	4630      	mov	r0, r6
   140f8:	f7fe fccc 	bl	12a94 <_free_r>
   140fc:	e7bd      	b.n	1407a <_fclose_r+0x42>
   140fe:	bf00      	nop

00014100 <__swsetup_r>:
   14100:	b538      	push	{r3, r4, r5, lr}
   14102:	4b31      	ldr	r3, [pc, #196]	; (141c8 <__swsetup_r+0xc8>)
   14104:	681b      	ldr	r3, [r3, #0]
   14106:	4605      	mov	r5, r0
   14108:	460c      	mov	r4, r1
   1410a:	b113      	cbz	r3, 14112 <__swsetup_r+0x12>
   1410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1410e:	2a00      	cmp	r2, #0
   14110:	d04e      	beq.n	141b0 <__swsetup_r+0xb0>
   14112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14116:	0718      	lsls	r0, r3, #28
   14118:	b29a      	uxth	r2, r3
   1411a:	d51c      	bpl.n	14156 <__swsetup_r+0x56>
   1411c:	6921      	ldr	r1, [r4, #16]
   1411e:	b329      	cbz	r1, 1416c <__swsetup_r+0x6c>
   14120:	f012 0001 	ands.w	r0, r2, #1
   14124:	d007      	beq.n	14136 <__swsetup_r+0x36>
   14126:	2000      	movs	r0, #0
   14128:	60a0      	str	r0, [r4, #8]
   1412a:	6960      	ldr	r0, [r4, #20]
   1412c:	4240      	negs	r0, r0
   1412e:	61a0      	str	r0, [r4, #24]
   14130:	b139      	cbz	r1, 14142 <__swsetup_r+0x42>
   14132:	2000      	movs	r0, #0
   14134:	bd38      	pop	{r3, r4, r5, pc}
   14136:	0795      	lsls	r5, r2, #30
   14138:	bf58      	it	pl
   1413a:	6960      	ldrpl	r0, [r4, #20]
   1413c:	60a0      	str	r0, [r4, #8]
   1413e:	2900      	cmp	r1, #0
   14140:	d1f7      	bne.n	14132 <__swsetup_r+0x32>
   14142:	0612      	lsls	r2, r2, #24
   14144:	bf58      	it	pl
   14146:	4608      	movpl	r0, r1
   14148:	d5f4      	bpl.n	14134 <__swsetup_r+0x34>
   1414a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1414e:	81a3      	strh	r3, [r4, #12]
   14150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14154:	bd38      	pop	{r3, r4, r5, pc}
   14156:	06d1      	lsls	r1, r2, #27
   14158:	d52e      	bpl.n	141b8 <__swsetup_r+0xb8>
   1415a:	0752      	lsls	r2, r2, #29
   1415c:	d414      	bmi.n	14188 <__swsetup_r+0x88>
   1415e:	6921      	ldr	r1, [r4, #16]
   14160:	f043 0308 	orr.w	r3, r3, #8
   14164:	81a3      	strh	r3, [r4, #12]
   14166:	b29a      	uxth	r2, r3
   14168:	2900      	cmp	r1, #0
   1416a:	d1d9      	bne.n	14120 <__swsetup_r+0x20>
   1416c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   14170:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   14174:	d0d4      	beq.n	14120 <__swsetup_r+0x20>
   14176:	4621      	mov	r1, r4
   14178:	4628      	mov	r0, r5
   1417a:	f000 f827 	bl	141cc <__smakebuf_r>
   1417e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14182:	6921      	ldr	r1, [r4, #16]
   14184:	b29a      	uxth	r2, r3
   14186:	e7cb      	b.n	14120 <__swsetup_r+0x20>
   14188:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1418a:	b151      	cbz	r1, 141a2 <__swsetup_r+0xa2>
   1418c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14190:	4291      	cmp	r1, r2
   14192:	d004      	beq.n	1419e <__swsetup_r+0x9e>
   14194:	4628      	mov	r0, r5
   14196:	f7fe fc7d 	bl	12a94 <_free_r>
   1419a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1419e:	2200      	movs	r2, #0
   141a0:	6322      	str	r2, [r4, #48]	; 0x30
   141a2:	6921      	ldr	r1, [r4, #16]
   141a4:	2200      	movs	r2, #0
   141a6:	e9c4 1200 	strd	r1, r2, [r4]
   141aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   141ae:	e7d7      	b.n	14160 <__swsetup_r+0x60>
   141b0:	4618      	mov	r0, r3
   141b2:	f7fe f92f 	bl	12414 <__sinit>
   141b6:	e7ac      	b.n	14112 <__swsetup_r+0x12>
   141b8:	2209      	movs	r2, #9
   141ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   141be:	602a      	str	r2, [r5, #0]
   141c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   141c4:	81a3      	strh	r3, [r4, #12]
   141c6:	bd38      	pop	{r3, r4, r5, pc}
   141c8:	20003c3c 	.word	0x20003c3c

000141cc <__smakebuf_r>:
   141cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141d0:	898b      	ldrh	r3, [r1, #12]
   141d2:	460c      	mov	r4, r1
   141d4:	0799      	lsls	r1, r3, #30
   141d6:	b096      	sub	sp, #88	; 0x58
   141d8:	d508      	bpl.n	141ec <__smakebuf_r+0x20>
   141da:	f104 0343 	add.w	r3, r4, #67	; 0x43
   141de:	2201      	movs	r2, #1
   141e0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   141e4:	6023      	str	r3, [r4, #0]
   141e6:	b016      	add	sp, #88	; 0x58
   141e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   141f0:	2900      	cmp	r1, #0
   141f2:	4606      	mov	r6, r0
   141f4:	db25      	blt.n	14242 <__smakebuf_r+0x76>
   141f6:	466a      	mov	r2, sp
   141f8:	f001 f840 	bl	1527c <_fstat_r>
   141fc:	2800      	cmp	r0, #0
   141fe:	db1f      	blt.n	14240 <__smakebuf_r+0x74>
   14200:	9d01      	ldr	r5, [sp, #4]
   14202:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   14206:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1420a:	fab5 f585 	clz	r5, r5
   1420e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14212:	096d      	lsrs	r5, r5, #5
   14214:	f44f 6700 	mov.w	r7, #2048	; 0x800
   14218:	4641      	mov	r1, r8
   1421a:	4630      	mov	r0, r6
   1421c:	f7fc ffea 	bl	111f4 <_malloc_r>
   14220:	b1e0      	cbz	r0, 1425c <__smakebuf_r+0x90>
   14222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14226:	f8c4 8014 	str.w	r8, [r4, #20]
   1422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1422e:	6020      	str	r0, [r4, #0]
   14230:	6120      	str	r0, [r4, #16]
   14232:	81a3      	strh	r3, [r4, #12]
   14234:	bb35      	cbnz	r5, 14284 <__smakebuf_r+0xb8>
   14236:	433b      	orrs	r3, r7
   14238:	81a3      	strh	r3, [r4, #12]
   1423a:	b016      	add	sp, #88	; 0x58
   1423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14240:	89a3      	ldrh	r3, [r4, #12]
   14242:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   14246:	d019      	beq.n	1427c <__smakebuf_r+0xb0>
   14248:	f04f 0840 	mov.w	r8, #64	; 0x40
   1424c:	2500      	movs	r5, #0
   1424e:	4641      	mov	r1, r8
   14250:	4630      	mov	r0, r6
   14252:	462f      	mov	r7, r5
   14254:	f7fc ffce 	bl	111f4 <_malloc_r>
   14258:	2800      	cmp	r0, #0
   1425a:	d1e2      	bne.n	14222 <__smakebuf_r+0x56>
   1425c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14260:	059a      	lsls	r2, r3, #22
   14262:	d4c0      	bmi.n	141e6 <__smakebuf_r+0x1a>
   14264:	f023 0303 	bic.w	r3, r3, #3
   14268:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1426c:	f043 0302 	orr.w	r3, r3, #2
   14270:	2101      	movs	r1, #1
   14272:	e9c4 2104 	strd	r2, r1, [r4, #16]
   14276:	81a3      	strh	r3, [r4, #12]
   14278:	6022      	str	r2, [r4, #0]
   1427a:	e7b4      	b.n	141e6 <__smakebuf_r+0x1a>
   1427c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   14280:	462f      	mov	r7, r5
   14282:	e7c9      	b.n	14218 <__smakebuf_r+0x4c>
   14284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   14288:	4630      	mov	r0, r6
   1428a:	f001 f80d 	bl	152a8 <_isatty_r>
   1428e:	b910      	cbnz	r0, 14296 <__smakebuf_r+0xca>
   14290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14294:	e7cf      	b.n	14236 <__smakebuf_r+0x6a>
   14296:	89a3      	ldrh	r3, [r4, #12]
   14298:	f023 0303 	bic.w	r3, r3, #3
   1429c:	f043 0301 	orr.w	r3, r3, #1
   142a0:	b21b      	sxth	r3, r3
   142a2:	e7c8      	b.n	14236 <__smakebuf_r+0x6a>

000142a4 <_wcsrtombs_r>:
   142a4:	b510      	push	{r4, lr}
   142a6:	b082      	sub	sp, #8
   142a8:	9c04      	ldr	r4, [sp, #16]
   142aa:	e9cd 3400 	strd	r3, r4, [sp]
   142ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142b2:	f001 fb17 	bl	158e4 <_wcsnrtombs_r>
   142b6:	b002      	add	sp, #8
   142b8:	bd10      	pop	{r4, pc}
   142ba:	bf00      	nop

000142bc <quorem>:
   142bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c0:	6903      	ldr	r3, [r0, #16]
   142c2:	690c      	ldr	r4, [r1, #16]
   142c4:	42a3      	cmp	r3, r4
   142c6:	b083      	sub	sp, #12
   142c8:	f2c0 8087 	blt.w	143da <quorem+0x11e>
   142cc:	3c01      	subs	r4, #1
   142ce:	f101 0514 	add.w	r5, r1, #20
   142d2:	00a3      	lsls	r3, r4, #2
   142d4:	f100 0814 	add.w	r8, r0, #20
   142d8:	9300      	str	r3, [sp, #0]
   142da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   142de:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   142e2:	3301      	adds	r3, #1
   142e4:	4681      	mov	r9, r0
   142e6:	429a      	cmp	r2, r3
   142e8:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   142ec:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   142f0:	9001      	str	r0, [sp, #4]
   142f2:	fbb2 f6f3 	udiv	r6, r2, r3
   142f6:	d33b      	bcc.n	14370 <quorem+0xb4>
   142f8:	f04f 0c00 	mov.w	ip, #0
   142fc:	46ae      	mov	lr, r5
   142fe:	4640      	mov	r0, r8
   14300:	46e2      	mov	sl, ip
   14302:	4663      	mov	r3, ip
   14304:	f85e bb04 	ldr.w	fp, [lr], #4
   14308:	6802      	ldr	r2, [r0, #0]
   1430a:	fa1f fc8b 	uxth.w	ip, fp
   1430e:	fb06 330c 	mla	r3, r6, ip, r3
   14312:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   14316:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   1431a:	fb06 cc0b 	mla	ip, r6, fp, ip
   1431e:	b29b      	uxth	r3, r3
   14320:	ebaa 0303 	sub.w	r3, sl, r3
   14324:	fa1f fa8c 	uxth.w	sl, ip
   14328:	fa13 f382 	uxtah	r3, r3, r2
   1432c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   14330:	eb02 4223 	add.w	r2, r2, r3, asr #16
   14334:	b29b      	uxth	r3, r3
   14336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1433a:	4577      	cmp	r7, lr
   1433c:	f840 3b04 	str.w	r3, [r0], #4
   14340:	ea4f 4a22 	mov.w	sl, r2, asr #16
   14344:	ea4f 431c 	mov.w	r3, ip, lsr #16
   14348:	d2dc      	bcs.n	14304 <quorem+0x48>
   1434a:	9b00      	ldr	r3, [sp, #0]
   1434c:	f858 3003 	ldr.w	r3, [r8, r3]
   14350:	b973      	cbnz	r3, 14370 <quorem+0xb4>
   14352:	9b01      	ldr	r3, [sp, #4]
   14354:	3b04      	subs	r3, #4
   14356:	4598      	cmp	r8, r3
   14358:	d304      	bcc.n	14364 <quorem+0xa8>
   1435a:	e007      	b.n	1436c <quorem+0xb0>
   1435c:	4598      	cmp	r8, r3
   1435e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   14362:	d203      	bcs.n	1436c <quorem+0xb0>
   14364:	f853 2904 	ldr.w	r2, [r3], #-4
   14368:	2a00      	cmp	r2, #0
   1436a:	d0f7      	beq.n	1435c <quorem+0xa0>
   1436c:	f8c9 4010 	str.w	r4, [r9, #16]
   14370:	4648      	mov	r0, r9
   14372:	f7fd fe3b 	bl	11fec <__mcmp>
   14376:	2800      	cmp	r0, #0
   14378:	db2b      	blt.n	143d2 <quorem+0x116>
   1437a:	3601      	adds	r6, #1
   1437c:	4641      	mov	r1, r8
   1437e:	2300      	movs	r3, #0
   14380:	f855 0b04 	ldr.w	r0, [r5], #4
   14384:	f8d1 c000 	ldr.w	ip, [r1]
   14388:	b282      	uxth	r2, r0
   1438a:	1a9a      	subs	r2, r3, r2
   1438c:	0c03      	lsrs	r3, r0, #16
   1438e:	fa12 f28c 	uxtah	r2, r2, ip
   14392:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   14396:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1439a:	b292      	uxth	r2, r2
   1439c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   143a0:	42af      	cmp	r7, r5
   143a2:	f841 2b04 	str.w	r2, [r1], #4
   143a6:	ea4f 4323 	mov.w	r3, r3, asr #16
   143aa:	d2e9      	bcs.n	14380 <quorem+0xc4>
   143ac:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   143b0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   143b4:	b96a      	cbnz	r2, 143d2 <quorem+0x116>
   143b6:	3b04      	subs	r3, #4
   143b8:	4598      	cmp	r8, r3
   143ba:	d304      	bcc.n	143c6 <quorem+0x10a>
   143bc:	e007      	b.n	143ce <quorem+0x112>
   143be:	4598      	cmp	r8, r3
   143c0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   143c4:	d203      	bcs.n	143ce <quorem+0x112>
   143c6:	f853 2904 	ldr.w	r2, [r3], #-4
   143ca:	2a00      	cmp	r2, #0
   143cc:	d0f7      	beq.n	143be <quorem+0x102>
   143ce:	f8c9 4010 	str.w	r4, [r9, #16]
   143d2:	4630      	mov	r0, r6
   143d4:	b003      	add	sp, #12
   143d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143da:	2000      	movs	r0, #0
   143dc:	b003      	add	sp, #12
   143de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143e2:	bf00      	nop
   143e4:	0000      	movs	r0, r0
	...

000143e8 <_dtoa_r>:
   143e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ec:	ed2d 8b02 	vpush	{d8}
   143f0:	b08f      	sub	sp, #60	; 0x3c
   143f2:	ed8d 0b02 	vstr	d0, [sp, #8]
   143f6:	9101      	str	r1, [sp, #4]
   143f8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   143fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   143fc:	9305      	str	r3, [sp, #20]
   143fe:	ec57 6b10 	vmov	r6, r7, d0
   14402:	4604      	mov	r4, r0
   14404:	4693      	mov	fp, r2
   14406:	b141      	cbz	r1, 1441a <_dtoa_r+0x32>
   14408:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   1440a:	604a      	str	r2, [r1, #4]
   1440c:	2301      	movs	r3, #1
   1440e:	4093      	lsls	r3, r2
   14410:	608b      	str	r3, [r1, #8]
   14412:	f7fd fb8b 	bl	11b2c <_Bfree>
   14416:	2300      	movs	r3, #0
   14418:	63a3      	str	r3, [r4, #56]	; 0x38
   1441a:	f1b7 0800 	subs.w	r8, r7, #0
   1441e:	bfb4      	ite	lt
   14420:	2301      	movlt	r3, #1
   14422:	2300      	movge	r3, #0
   14424:	602b      	str	r3, [r5, #0]
   14426:	4bbe      	ldr	r3, [pc, #760]	; (14720 <_dtoa_r+0x338>)
   14428:	bfbc      	itt	lt
   1442a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   1442e:	f8cd 800c 	strlt.w	r8, [sp, #12]
   14432:	ea33 0308 	bics.w	r3, r3, r8
   14436:	f000 809f 	beq.w	14578 <_dtoa_r+0x190>
   1443a:	ed9d 8b02 	vldr	d8, [sp, #8]
   1443e:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14446:	d111      	bne.n	1446c <_dtoa_r+0x84>
   14448:	9a05      	ldr	r2, [sp, #20]
   1444a:	2301      	movs	r3, #1
   1444c:	6013      	str	r3, [r2, #0]
   1444e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14450:	2b00      	cmp	r3, #0
   14452:	f000 823f 	beq.w	148d4 <_dtoa_r+0x4ec>
   14456:	4bb3      	ldr	r3, [pc, #716]	; (14724 <_dtoa_r+0x33c>)
   14458:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1445a:	6013      	str	r3, [r2, #0]
   1445c:	3b01      	subs	r3, #1
   1445e:	9300      	str	r3, [sp, #0]
   14460:	9800      	ldr	r0, [sp, #0]
   14462:	b00f      	add	sp, #60	; 0x3c
   14464:	ecbd 8b02 	vpop	{d8}
   14468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1446c:	aa0c      	add	r2, sp, #48	; 0x30
   1446e:	a90d      	add	r1, sp, #52	; 0x34
   14470:	4620      	mov	r0, r4
   14472:	eeb0 0b48 	vmov.f64	d0, d8
   14476:	f7fd fe85 	bl	12184 <__d2b>
   1447a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   1447e:	4605      	mov	r5, r0
   14480:	f040 8092 	bne.w	145a8 <_dtoa_r+0x1c0>
   14484:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   14488:	440b      	add	r3, r1
   1448a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   1448e:	2a20      	cmp	r2, #32
   14490:	f340 82fa 	ble.w	14a88 <_dtoa_r+0x6a0>
   14494:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   14498:	fa08 f802 	lsl.w	r8, r8, r2
   1449c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   144a0:	40d6      	lsrs	r6, r2
   144a2:	ea48 0206 	orr.w	r2, r8, r6
   144a6:	ee07 2a10 	vmov	s14, r2
   144aa:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   144ae:	1e58      	subs	r0, r3, #1
   144b0:	ee17 6a90 	vmov	r6, s15
   144b4:	ec53 2b17 	vmov	r2, r3, d7
   144b8:	f04f 0a01 	mov.w	sl, #1
   144bc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   144c0:	ed9f 3b91 	vldr	d3, [pc, #580]	; 14708 <_dtoa_r+0x320>
   144c4:	ed9f 7b92 	vldr	d7, [pc, #584]	; 14710 <_dtoa_r+0x328>
   144c8:	ed9f 5b93 	vldr	d5, [pc, #588]	; 14718 <_dtoa_r+0x330>
   144cc:	ee06 0a90 	vmov	s13, r0
   144d0:	ec43 2b12 	vmov	d2, r2, r3
   144d4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   144d8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   144dc:	ee32 6b46 	vsub.f64	d6, d2, d6
   144e0:	eea6 7b03 	vfma.f64	d7, d6, d3
   144e4:	eea4 7b05 	vfma.f64	d7, d4, d5
   144e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   144ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   144f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   144f4:	ee16 7a90 	vmov	r7, s13
   144f8:	d508      	bpl.n	1450c <_dtoa_r+0x124>
   144fa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   144fe:	eeb4 6b47 	vcmp.f64	d6, d7
   14502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14506:	bf18      	it	ne
   14508:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   1450c:	2f16      	cmp	r7, #22
   1450e:	f200 8145 	bhi.w	1479c <_dtoa_r+0x3b4>
   14512:	4b85      	ldr	r3, [pc, #532]	; (14728 <_dtoa_r+0x340>)
   14514:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   14518:	ed93 7b00 	vldr	d7, [r3]
   1451c:	eeb4 8bc7 	vcmpe.f64	d8, d7
   14520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14524:	d557      	bpl.n	145d6 <_dtoa_r+0x1ee>
   14526:	1a09      	subs	r1, r1, r0
   14528:	2300      	movs	r3, #0
   1452a:	f1b1 0801 	subs.w	r8, r1, #1
   1452e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   14532:	930a      	str	r3, [sp, #40]	; 0x28
   14534:	f100 8139 	bmi.w	147aa <_dtoa_r+0x3c2>
   14538:	2300      	movs	r3, #0
   1453a:	9306      	str	r3, [sp, #24]
   1453c:	2f00      	cmp	r7, #0
   1453e:	da52      	bge.n	145e6 <_dtoa_r+0x1fe>
   14540:	9b06      	ldr	r3, [sp, #24]
   14542:	9704      	str	r7, [sp, #16]
   14544:	1bdb      	subs	r3, r3, r7
   14546:	9306      	str	r3, [sp, #24]
   14548:	427b      	negs	r3, r7
   1454a:	9308      	str	r3, [sp, #32]
   1454c:	9b01      	ldr	r3, [sp, #4]
   1454e:	2b09      	cmp	r3, #9
   14550:	f04f 0700 	mov.w	r7, #0
   14554:	d84e      	bhi.n	145f4 <_dtoa_r+0x20c>
   14556:	2b05      	cmp	r3, #5
   14558:	f340 829d 	ble.w	14a96 <_dtoa_r+0x6ae>
   1455c:	3b04      	subs	r3, #4
   1455e:	9301      	str	r3, [sp, #4]
   14560:	2600      	movs	r6, #0
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	1e9a      	subs	r2, r3, #2
   14566:	2a03      	cmp	r2, #3
   14568:	f200 8125 	bhi.w	147b6 <_dtoa_r+0x3ce>
   1456c:	e8df f012 	tbh	[pc, r2, lsl #1]
   14570:	03a703aa 	.word	0x03a703aa
   14574:	037e039d 	.word	0x037e039d
   14578:	9a05      	ldr	r2, [sp, #20]
   1457a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   1457e:	f242 730f 	movw	r3, #9999	; 0x270f
   14582:	ea58 0806 	orrs.w	r8, r8, r6
   14586:	6013      	str	r3, [r2, #0]
   14588:	d11e      	bne.n	145c8 <_dtoa_r+0x1e0>
   1458a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1458c:	2b00      	cmp	r3, #0
   1458e:	f000 8591 	beq.w	150b4 <_dtoa_r+0xccc>
   14592:	4b66      	ldr	r3, [pc, #408]	; (1472c <_dtoa_r+0x344>)
   14594:	9300      	str	r3, [sp, #0]
   14596:	3308      	adds	r3, #8
   14598:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1459a:	9800      	ldr	r0, [sp, #0]
   1459c:	6013      	str	r3, [r2, #0]
   1459e:	b00f      	add	sp, #60	; 0x3c
   145a0:	ecbd 8b02 	vpop	{d8}
   145a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	ee18 6a90 	vmov	r6, s17
   145ac:	f3c6 0613 	ubfx	r6, r6, #0, #20
   145b0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   145b4:	ec53 2b18 	vmov	r2, r3, d8
   145b8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   145bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   145be:	f04f 0a00 	mov.w	sl, #0
   145c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   145c6:	e77b      	b.n	144c0 <_dtoa_r+0xd8>
   145c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   145ca:	2b00      	cmp	r3, #0
   145cc:	f040 833b 	bne.w	14c46 <_dtoa_r+0x85e>
   145d0:	4b57      	ldr	r3, [pc, #348]	; (14730 <_dtoa_r+0x348>)
   145d2:	9300      	str	r3, [sp, #0]
   145d4:	e744      	b.n	14460 <_dtoa_r+0x78>
   145d6:	1a09      	subs	r1, r1, r0
   145d8:	2300      	movs	r3, #0
   145da:	f1b1 0801 	subs.w	r8, r1, #1
   145de:	930a      	str	r3, [sp, #40]	; 0x28
   145e0:	f100 80e3 	bmi.w	147aa <_dtoa_r+0x3c2>
   145e4:	9306      	str	r3, [sp, #24]
   145e6:	2300      	movs	r3, #0
   145e8:	9308      	str	r3, [sp, #32]
   145ea:	9b01      	ldr	r3, [sp, #4]
   145ec:	9704      	str	r7, [sp, #16]
   145ee:	2b09      	cmp	r3, #9
   145f0:	44b8      	add	r8, r7
   145f2:	d9b0      	bls.n	14556 <_dtoa_r+0x16e>
   145f4:	2300      	movs	r3, #0
   145f6:	2601      	movs	r6, #1
   145f8:	9301      	str	r3, [sp, #4]
   145fa:	9607      	str	r6, [sp, #28]
   145fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14600:	469b      	mov	fp, r3
   14602:	2100      	movs	r1, #0
   14604:	63e1      	str	r1, [r4, #60]	; 0x3c
   14606:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1460a:	4620      	mov	r0, r4
   1460c:	f7fd fa68 	bl	11ae0 <_Balloc>
   14610:	9000      	str	r0, [sp, #0]
   14612:	2800      	cmp	r0, #0
   14614:	f000 8540 	beq.w	15098 <_dtoa_r+0xcb0>
   14618:	9b00      	ldr	r3, [sp, #0]
   1461a:	63a3      	str	r3, [r4, #56]	; 0x38
   1461c:	f1b9 0f0e 	cmp.w	r9, #14
   14620:	f200 80dc 	bhi.w	147dc <_dtoa_r+0x3f4>
   14624:	2e00      	cmp	r6, #0
   14626:	f000 80d9 	beq.w	147dc <_dtoa_r+0x3f4>
   1462a:	9b04      	ldr	r3, [sp, #16]
   1462c:	2b00      	cmp	r3, #0
   1462e:	f340 83de 	ble.w	14dee <_dtoa_r+0xa06>
   14632:	4a3d      	ldr	r2, [pc, #244]	; (14728 <_dtoa_r+0x340>)
   14634:	f003 010f 	and.w	r1, r3, #15
   14638:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1463c:	ed92 7b00 	vldr	d7, [r2]
   14640:	111a      	asrs	r2, r3, #4
   14642:	05db      	lsls	r3, r3, #23
   14644:	f140 8382 	bpl.w	14d4c <_dtoa_r+0x964>
   14648:	493a      	ldr	r1, [pc, #232]	; (14734 <_dtoa_r+0x34c>)
   1464a:	ed91 6b08 	vldr	d6, [r1, #32]
   1464e:	f002 020f 	and.w	r2, r2, #15
   14652:	2003      	movs	r0, #3
   14654:	ee88 5b06 	vdiv.f64	d5, d8, d6
   14658:	b15a      	cbz	r2, 14672 <_dtoa_r+0x28a>
   1465a:	4936      	ldr	r1, [pc, #216]	; (14734 <_dtoa_r+0x34c>)
   1465c:	07d6      	lsls	r6, r2, #31
   1465e:	d504      	bpl.n	1466a <_dtoa_r+0x282>
   14660:	ed91 6b00 	vldr	d6, [r1]
   14664:	3001      	adds	r0, #1
   14666:	ee27 7b06 	vmul.f64	d7, d7, d6
   1466a:	1052      	asrs	r2, r2, #1
   1466c:	f101 0108 	add.w	r1, r1, #8
   14670:	d1f4      	bne.n	1465c <_dtoa_r+0x274>
   14672:	ee85 6b07 	vdiv.f64	d6, d5, d7
   14676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14678:	b13b      	cbz	r3, 1468a <_dtoa_r+0x2a2>
   1467a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1467e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14686:	f100 84ae 	bmi.w	14fe6 <_dtoa_r+0xbfe>
   1468a:	ee07 0a90 	vmov	s15, r0
   1468e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14692:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14696:	eea5 7b06 	vfma.f64	d7, d5, d6
   1469a:	ee17 2a90 	vmov	r2, s15
   1469e:	ec51 0b17 	vmov	r0, r1, d7
   146a2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   146a6:	f1b9 0f00 	cmp.w	r9, #0
   146aa:	f000 8388 	beq.w	14dbe <_dtoa_r+0x9d6>
   146ae:	9e04      	ldr	r6, [sp, #16]
   146b0:	464a      	mov	r2, r9
   146b2:	9b07      	ldr	r3, [sp, #28]
   146b4:	2b00      	cmp	r3, #0
   146b6:	f000 8447 	beq.w	14f48 <_dtoa_r+0xb60>
   146ba:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   146be:	4b1a      	ldr	r3, [pc, #104]	; (14728 <_dtoa_r+0x340>)
   146c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   146c4:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   146c8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   146cc:	ee36 7b47 	vsub.f64	d7, d6, d7
   146d0:	ed1c 6b02 	vldr	d6, [ip, #-8]
   146d4:	ee83 5b06 	vdiv.f64	d5, d3, d6
   146d8:	ec41 0b16 	vmov	d6, r0, r1
   146dc:	ee14 0a90 	vmov	r0, s9
   146e0:	ee35 5b46 	vsub.f64	d5, d5, d6
   146e4:	9900      	ldr	r1, [sp, #0]
   146e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   146ea:	3030      	adds	r0, #48	; 0x30
   146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   146f0:	f801 0b01 	strb.w	r0, [r1], #1
   146f4:	f300 84ac 	bgt.w	15050 <_dtoa_r+0xc68>
   146f8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   146fc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14700:	f04f 0c00 	mov.w	ip, #0
   14704:	e031      	b.n	1476a <_dtoa_r+0x382>
   14706:	bf00      	nop
   14708:	636f4361 	.word	0x636f4361
   1470c:	3fd287a7 	.word	0x3fd287a7
   14710:	8b60c8b3 	.word	0x8b60c8b3
   14714:	3fc68a28 	.word	0x3fc68a28
   14718:	509f79fb 	.word	0x509f79fb
   1471c:	3fd34413 	.word	0x3fd34413
   14720:	7ff00000 	.word	0x7ff00000
   14724:	20002f15 	.word	0x20002f15
   14728:	20000b58 	.word	0x20000b58
   1472c:	20002ad8 	.word	0x20002ad8
   14730:	20002ae4 	.word	0x20002ae4
   14734:	20000b30 	.word	0x20000b30
   14738:	f10c 0c01 	add.w	ip, ip, #1
   1473c:	4594      	cmp	ip, r2
   1473e:	da4d      	bge.n	147dc <_dtoa_r+0x3f4>
   14740:	ee27 7b04 	vmul.f64	d7, d7, d4
   14744:	ee25 5b04 	vmul.f64	d5, d5, d4
   14748:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1474c:	ee16 3a90 	vmov	r3, s13
   14750:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   14754:	3330      	adds	r3, #48	; 0x30
   14756:	ee37 7b43 	vsub.f64	d7, d7, d3
   1475a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14762:	f801 3b01 	strb.w	r3, [r1], #1
   14766:	f100 8473 	bmi.w	15050 <_dtoa_r+0xc68>
   1476a:	ee32 6b47 	vsub.f64	d6, d2, d7
   1476e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   14772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14776:	d5df      	bpl.n	14738 <_dtoa_r+0x350>
   14778:	9a00      	ldr	r2, [sp, #0]
   1477a:	9604      	str	r6, [sp, #16]
   1477c:	e002      	b.n	14784 <_dtoa_r+0x39c>
   1477e:	428a      	cmp	r2, r1
   14780:	f000 8450 	beq.w	15024 <_dtoa_r+0xc3c>
   14784:	4689      	mov	r9, r1
   14786:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1478a:	2b39      	cmp	r3, #57	; 0x39
   1478c:	d0f7      	beq.n	1477e <_dtoa_r+0x396>
   1478e:	3301      	adds	r3, #1
   14790:	b2db      	uxtb	r3, r3
   14792:	700b      	strb	r3, [r1, #0]
   14794:	9b04      	ldr	r3, [sp, #16]
   14796:	3301      	adds	r3, #1
   14798:	9304      	str	r3, [sp, #16]
   1479a:	e155      	b.n	14a48 <_dtoa_r+0x660>
   1479c:	1a09      	subs	r1, r1, r0
   1479e:	2301      	movs	r3, #1
   147a0:	f1b1 0801 	subs.w	r8, r1, #1
   147a4:	930a      	str	r3, [sp, #40]	; 0x28
   147a6:	f57f aec7 	bpl.w	14538 <_dtoa_r+0x150>
   147aa:	f1c1 0301 	rsb	r3, r1, #1
   147ae:	9306      	str	r3, [sp, #24]
   147b0:	f04f 0800 	mov.w	r8, #0
   147b4:	e6c2      	b.n	1453c <_dtoa_r+0x154>
   147b6:	2600      	movs	r6, #0
   147b8:	63e6      	str	r6, [r4, #60]	; 0x3c
   147ba:	4631      	mov	r1, r6
   147bc:	4620      	mov	r0, r4
   147be:	f7fd f98f 	bl	11ae0 <_Balloc>
   147c2:	9000      	str	r0, [sp, #0]
   147c4:	2800      	cmp	r0, #0
   147c6:	f000 8467 	beq.w	15098 <_dtoa_r+0xcb0>
   147ca:	9b00      	ldr	r3, [sp, #0]
   147cc:	63a3      	str	r3, [r4, #56]	; 0x38
   147ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147d2:	930b      	str	r3, [sp, #44]	; 0x2c
   147d4:	4699      	mov	r9, r3
   147d6:	2301      	movs	r3, #1
   147d8:	46b3      	mov	fp, r6
   147da:	9307      	str	r3, [sp, #28]
   147dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   147de:	2a00      	cmp	r2, #0
   147e0:	db55      	blt.n	1488e <_dtoa_r+0x4a6>
   147e2:	9904      	ldr	r1, [sp, #16]
   147e4:	290e      	cmp	r1, #14
   147e6:	dc52      	bgt.n	1488e <_dtoa_r+0x4a6>
   147e8:	4bb7      	ldr	r3, [pc, #732]	; (14ac8 <_dtoa_r+0x6e0>)
   147ea:	f1bb 0f00 	cmp.w	fp, #0
   147ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   147f2:	ed93 6b00 	vldr	d6, [r3]
   147f6:	da15      	bge.n	14824 <_dtoa_r+0x43c>
   147f8:	f1b9 0f00 	cmp.w	r9, #0
   147fc:	dc12      	bgt.n	14824 <_dtoa_r+0x43c>
   147fe:	f040 82f2 	bne.w	14de6 <_dtoa_r+0x9fe>
   14802:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14806:	ee26 7b07 	vmul.f64	d7, d6, d7
   1480a:	eeb4 8bc7 	vcmpe.f64	d8, d7
   1480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14812:	46ca      	mov	sl, r9
   14814:	464e      	mov	r6, r9
   14816:	f200 826d 	bhi.w	14cf4 <_dtoa_r+0x90c>
   1481a:	f8dd 8000 	ldr.w	r8, [sp]
   1481e:	ea6f 0b0b 	mvn.w	fp, fp
   14822:	e270      	b.n	14d06 <_dtoa_r+0x91e>
   14824:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14828:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1482c:	9900      	ldr	r1, [sp, #0]
   1482e:	ee17 3a10 	vmov	r3, s14
   14832:	f1b9 0f01 	cmp.w	r9, #1
   14836:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1483a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1483e:	f801 3b01 	strb.w	r3, [r1], #1
   14842:	eea5 8b46 	vfms.f64	d8, d5, d6
   14846:	f000 8334 	beq.w	14eb2 <_dtoa_r+0xaca>
   1484a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1484e:	2301      	movs	r3, #1
   14850:	e011      	b.n	14876 <_dtoa_r+0x48e>
   14852:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14856:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1485a:	3301      	adds	r3, #1
   1485c:	ee17 2a10 	vmov	r2, s14
   14860:	454b      	cmp	r3, r9
   14862:	f102 0230 	add.w	r2, r2, #48	; 0x30
   14866:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1486a:	f801 2b01 	strb.w	r2, [r1], #1
   1486e:	eea5 8b46 	vfms.f64	d8, d5, d6
   14872:	f000 831e 	beq.w	14eb2 <_dtoa_r+0xaca>
   14876:	ee28 8b04 	vmul.f64	d8, d8, d4
   1487a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14882:	d1e6      	bne.n	14852 <_dtoa_r+0x46a>
   14884:	9b04      	ldr	r3, [sp, #16]
   14886:	3301      	adds	r3, #1
   14888:	9304      	str	r3, [sp, #16]
   1488a:	4689      	mov	r9, r1
   1488c:	e0dc      	b.n	14a48 <_dtoa_r+0x660>
   1488e:	9b07      	ldr	r3, [sp, #28]
   14890:	b343      	cbz	r3, 148e4 <_dtoa_r+0x4fc>
   14892:	9b01      	ldr	r3, [sp, #4]
   14894:	2b01      	cmp	r3, #1
   14896:	f340 8276 	ble.w	14d86 <_dtoa_r+0x99e>
   1489a:	9b08      	ldr	r3, [sp, #32]
   1489c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   148a0:	4553      	cmp	r3, sl
   148a2:	f280 823f 	bge.w	14d24 <_dtoa_r+0x93c>
   148a6:	9b08      	ldr	r3, [sp, #32]
   148a8:	f8cd a020 	str.w	sl, [sp, #32]
   148ac:	ebaa 0203 	sub.w	r2, sl, r3
   148b0:	4417      	add	r7, r2
   148b2:	f04f 0a00 	mov.w	sl, #0
   148b6:	f1b9 0f00 	cmp.w	r9, #0
   148ba:	f2c0 8325 	blt.w	14f08 <_dtoa_r+0xb20>
   148be:	9b06      	ldr	r3, [sp, #24]
   148c0:	9309      	str	r3, [sp, #36]	; 0x24
   148c2:	444b      	add	r3, r9
   148c4:	44c8      	add	r8, r9
   148c6:	9306      	str	r3, [sp, #24]
   148c8:	2101      	movs	r1, #1
   148ca:	4620      	mov	r0, r4
   148cc:	f7fd f9da 	bl	11c84 <__i2b>
   148d0:	4606      	mov	r6, r0
   148d2:	e00c      	b.n	148ee <_dtoa_r+0x506>
   148d4:	4b7d      	ldr	r3, [pc, #500]	; (14acc <_dtoa_r+0x6e4>)
   148d6:	9300      	str	r3, [sp, #0]
   148d8:	9800      	ldr	r0, [sp, #0]
   148da:	b00f      	add	sp, #60	; 0x3c
   148dc:	ecbd 8b02 	vpop	{d8}
   148e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e4:	9b06      	ldr	r3, [sp, #24]
   148e6:	f8dd a020 	ldr.w	sl, [sp, #32]
   148ea:	9e07      	ldr	r6, [sp, #28]
   148ec:	9309      	str	r3, [sp, #36]	; 0x24
   148ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   148f0:	b16b      	cbz	r3, 1490e <_dtoa_r+0x526>
   148f2:	f1b8 0f00 	cmp.w	r8, #0
   148f6:	dd0a      	ble.n	1490e <_dtoa_r+0x526>
   148f8:	4543      	cmp	r3, r8
   148fa:	9906      	ldr	r1, [sp, #24]
   148fc:	461a      	mov	r2, r3
   148fe:	bfa8      	it	ge
   14900:	4642      	movge	r2, r8
   14902:	1a89      	subs	r1, r1, r2
   14904:	1a9b      	subs	r3, r3, r2
   14906:	9106      	str	r1, [sp, #24]
   14908:	9309      	str	r3, [sp, #36]	; 0x24
   1490a:	eba8 0802 	sub.w	r8, r8, r2
   1490e:	9b08      	ldr	r3, [sp, #32]
   14910:	b163      	cbz	r3, 1492c <_dtoa_r+0x544>
   14912:	9b07      	ldr	r3, [sp, #28]
   14914:	2b00      	cmp	r3, #0
   14916:	f000 82a7 	beq.w	14e68 <_dtoa_r+0xa80>
   1491a:	f1ba 0f00 	cmp.w	sl, #0
   1491e:	f300 8204 	bgt.w	14d2a <_dtoa_r+0x942>
   14922:	9b08      	ldr	r3, [sp, #32]
   14924:	ebb3 020a 	subs.w	r2, r3, sl
   14928:	f040 82ff 	bne.w	14f2a <_dtoa_r+0xb42>
   1492c:	2101      	movs	r1, #1
   1492e:	4620      	mov	r0, r4
   14930:	f7fd f9a8 	bl	11c84 <__i2b>
   14934:	2f00      	cmp	r7, #0
   14936:	4682      	mov	sl, r0
   14938:	f300 80af 	bgt.w	14a9a <_dtoa_r+0x6b2>
   1493c:	9b01      	ldr	r3, [sp, #4]
   1493e:	2b01      	cmp	r3, #1
   14940:	f340 8187 	ble.w	14c52 <_dtoa_r+0x86a>
   14944:	2300      	movs	r3, #0
   14946:	9308      	str	r3, [sp, #32]
   14948:	2001      	movs	r0, #1
   1494a:	2f00      	cmp	r7, #0
   1494c:	f040 80b1 	bne.w	14ab2 <_dtoa_r+0x6ca>
   14950:	4440      	add	r0, r8
   14952:	f010 001f 	ands.w	r0, r0, #31
   14956:	f000 817a 	beq.w	14c4e <_dtoa_r+0x866>
   1495a:	f1c0 0220 	rsb	r2, r0, #32
   1495e:	2a04      	cmp	r2, #4
   14960:	f300 8088 	bgt.w	14a74 <_dtoa_r+0x68c>
   14964:	f040 81f6 	bne.w	14d54 <_dtoa_r+0x96c>
   14968:	9b06      	ldr	r3, [sp, #24]
   1496a:	2b00      	cmp	r3, #0
   1496c:	dd05      	ble.n	1497a <_dtoa_r+0x592>
   1496e:	4629      	mov	r1, r5
   14970:	461a      	mov	r2, r3
   14972:	4620      	mov	r0, r4
   14974:	f7fd fac2 	bl	11efc <__lshift>
   14978:	4605      	mov	r5, r0
   1497a:	f1b8 0f00 	cmp.w	r8, #0
   1497e:	dd05      	ble.n	1498c <_dtoa_r+0x5a4>
   14980:	4651      	mov	r1, sl
   14982:	4642      	mov	r2, r8
   14984:	4620      	mov	r0, r4
   14986:	f7fd fab9 	bl	11efc <__lshift>
   1498a:	4682      	mov	sl, r0
   1498c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1498e:	2b00      	cmp	r3, #0
   14990:	f040 813f 	bne.w	14c12 <_dtoa_r+0x82a>
   14994:	f1b9 0f00 	cmp.w	r9, #0
   14998:	f340 8125 	ble.w	14be6 <_dtoa_r+0x7fe>
   1499c:	9b07      	ldr	r3, [sp, #28]
   1499e:	2b00      	cmp	r3, #0
   149a0:	f040 80a3 	bne.w	14aea <_dtoa_r+0x702>
   149a4:	9b04      	ldr	r3, [sp, #16]
   149a6:	3301      	adds	r3, #1
   149a8:	9304      	str	r3, [sp, #16]
   149aa:	f8dd 8000 	ldr.w	r8, [sp]
   149ae:	2701      	movs	r7, #1
   149b0:	e007      	b.n	149c2 <_dtoa_r+0x5da>
   149b2:	4629      	mov	r1, r5
   149b4:	2300      	movs	r3, #0
   149b6:	220a      	movs	r2, #10
   149b8:	4620      	mov	r0, r4
   149ba:	f7fd f8c1 	bl	11b40 <__multadd>
   149be:	3701      	adds	r7, #1
   149c0:	4605      	mov	r5, r0
   149c2:	4651      	mov	r1, sl
   149c4:	4628      	mov	r0, r5
   149c6:	f7ff fc79 	bl	142bc <quorem>
   149ca:	45b9      	cmp	r9, r7
   149cc:	f100 0030 	add.w	r0, r0, #48	; 0x30
   149d0:	f808 0b01 	strb.w	r0, [r8], #1
   149d4:	dced      	bgt.n	149b2 <_dtoa_r+0x5ca>
   149d6:	f1b9 0f00 	cmp.w	r9, #0
   149da:	9a00      	ldr	r2, [sp, #0]
   149dc:	bfcc      	ite	gt
   149de:	46cb      	movgt	fp, r9
   149e0:	f04f 0b01 	movle.w	fp, #1
   149e4:	4603      	mov	r3, r0
   149e6:	4493      	add	fp, r2
   149e8:	2700      	movs	r7, #0
   149ea:	4629      	mov	r1, r5
   149ec:	2201      	movs	r2, #1
   149ee:	4620      	mov	r0, r4
   149f0:	9301      	str	r3, [sp, #4]
   149f2:	f7fd fa83 	bl	11efc <__lshift>
   149f6:	4651      	mov	r1, sl
   149f8:	4605      	mov	r5, r0
   149fa:	f7fd faf7 	bl	11fec <__mcmp>
   149fe:	2800      	cmp	r0, #0
   14a00:	f340 81af 	ble.w	14d62 <_dtoa_r+0x97a>
   14a04:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   14a08:	9a00      	ldr	r2, [sp, #0]
   14a0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   14a0e:	e004      	b.n	14a1a <_dtoa_r+0x632>
   14a10:	455a      	cmp	r2, fp
   14a12:	f000 81b1 	beq.w	14d78 <_dtoa_r+0x990>
   14a16:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   14a1a:	2b39      	cmp	r3, #57	; 0x39
   14a1c:	f10b 0901 	add.w	r9, fp, #1
   14a20:	d0f6      	beq.n	14a10 <_dtoa_r+0x628>
   14a22:	3301      	adds	r3, #1
   14a24:	f88b 3000 	strb.w	r3, [fp]
   14a28:	4651      	mov	r1, sl
   14a2a:	4620      	mov	r0, r4
   14a2c:	f7fd f87e 	bl	11b2c <_Bfree>
   14a30:	b156      	cbz	r6, 14a48 <_dtoa_r+0x660>
   14a32:	b12f      	cbz	r7, 14a40 <_dtoa_r+0x658>
   14a34:	42b7      	cmp	r7, r6
   14a36:	d003      	beq.n	14a40 <_dtoa_r+0x658>
   14a38:	4639      	mov	r1, r7
   14a3a:	4620      	mov	r0, r4
   14a3c:	f7fd f876 	bl	11b2c <_Bfree>
   14a40:	4631      	mov	r1, r6
   14a42:	4620      	mov	r0, r4
   14a44:	f7fd f872 	bl	11b2c <_Bfree>
   14a48:	4629      	mov	r1, r5
   14a4a:	4620      	mov	r0, r4
   14a4c:	f7fd f86e 	bl	11b2c <_Bfree>
   14a50:	2300      	movs	r3, #0
   14a52:	f889 3000 	strb.w	r3, [r9]
   14a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   14a5a:	601a      	str	r2, [r3, #0]
   14a5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14a5e:	2b00      	cmp	r3, #0
   14a60:	f43f acfe 	beq.w	14460 <_dtoa_r+0x78>
   14a64:	9800      	ldr	r0, [sp, #0]
   14a66:	f8c3 9000 	str.w	r9, [r3]
   14a6a:	b00f      	add	sp, #60	; 0x3c
   14a6c:	ecbd 8b02 	vpop	{d8}
   14a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a74:	f1c0 001c 	rsb	r0, r0, #28
   14a78:	9b06      	ldr	r3, [sp, #24]
   14a7a:	4403      	add	r3, r0
   14a7c:	9306      	str	r3, [sp, #24]
   14a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a80:	4403      	add	r3, r0
   14a82:	9309      	str	r3, [sp, #36]	; 0x24
   14a84:	4480      	add	r8, r0
   14a86:	e76f      	b.n	14968 <_dtoa_r+0x580>
   14a88:	f1c2 0220 	rsb	r2, r2, #32
   14a8c:	fa06 f202 	lsl.w	r2, r6, r2
   14a90:	ee07 2a10 	vmov	s14, r2
   14a94:	e509      	b.n	144aa <_dtoa_r+0xc2>
   14a96:	2601      	movs	r6, #1
   14a98:	e563      	b.n	14562 <_dtoa_r+0x17a>
   14a9a:	4601      	mov	r1, r0
   14a9c:	463a      	mov	r2, r7
   14a9e:	4620      	mov	r0, r4
   14aa0:	f7fd f9cc 	bl	11e3c <__pow5mult>
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	2b01      	cmp	r3, #1
   14aa8:	4682      	mov	sl, r0
   14aaa:	f340 81c5 	ble.w	14e38 <_dtoa_r+0xa50>
   14aae:	2300      	movs	r3, #0
   14ab0:	9308      	str	r3, [sp, #32]
   14ab2:	f8da 2010 	ldr.w	r2, [sl, #16]
   14ab6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   14aba:	6910      	ldr	r0, [r2, #16]
   14abc:	f7fd f892 	bl	11be4 <__hi0bits>
   14ac0:	f1c0 0020 	rsb	r0, r0, #32
   14ac4:	e744      	b.n	14950 <_dtoa_r+0x568>
   14ac6:	bf00      	nop
   14ac8:	20000b58 	.word	0x20000b58
   14acc:	20002f14 	.word	0x20002f14
   14ad0:	4631      	mov	r1, r6
   14ad2:	2300      	movs	r3, #0
   14ad4:	220a      	movs	r2, #10
   14ad6:	4620      	mov	r0, r4
   14ad8:	f7fd f832 	bl	11b40 <__multadd>
   14adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ade:	2b00      	cmp	r3, #0
   14ae0:	4606      	mov	r6, r0
   14ae2:	f340 82ce 	ble.w	15082 <_dtoa_r+0xc9a>
   14ae6:	9704      	str	r7, [sp, #16]
   14ae8:	4699      	mov	r9, r3
   14aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14aec:	2b00      	cmp	r3, #0
   14aee:	dd05      	ble.n	14afc <_dtoa_r+0x714>
   14af0:	4631      	mov	r1, r6
   14af2:	461a      	mov	r2, r3
   14af4:	4620      	mov	r0, r4
   14af6:	f7fd fa01 	bl	11efc <__lshift>
   14afa:	4606      	mov	r6, r0
   14afc:	9b08      	ldr	r3, [sp, #32]
   14afe:	2b00      	cmp	r3, #0
   14b00:	f040 81eb 	bne.w	14eda <_dtoa_r+0xaf2>
   14b04:	46b0      	mov	r8, r6
   14b06:	9b02      	ldr	r3, [sp, #8]
   14b08:	9f00      	ldr	r7, [sp, #0]
   14b0a:	f003 0201 	and.w	r2, r3, #1
   14b0e:	1e7b      	subs	r3, r7, #1
   14b10:	444b      	add	r3, r9
   14b12:	9308      	str	r3, [sp, #32]
   14b14:	9b01      	ldr	r3, [sp, #4]
   14b16:	920a      	str	r2, [sp, #40]	; 0x28
   14b18:	4313      	orrs	r3, r2
   14b1a:	9309      	str	r3, [sp, #36]	; 0x24
   14b1c:	4651      	mov	r1, sl
   14b1e:	4628      	mov	r0, r5
   14b20:	f7ff fbcc 	bl	142bc <quorem>
   14b24:	4631      	mov	r1, r6
   14b26:	4683      	mov	fp, r0
   14b28:	4628      	mov	r0, r5
   14b2a:	f7fd fa5f 	bl	11fec <__mcmp>
   14b2e:	4642      	mov	r2, r8
   14b30:	4651      	mov	r1, sl
   14b32:	4681      	mov	r9, r0
   14b34:	4620      	mov	r0, r4
   14b36:	f7fd fa7b 	bl	12030 <__mdiff>
   14b3a:	68c2      	ldr	r2, [r0, #12]
   14b3c:	4601      	mov	r1, r0
   14b3e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   14b42:	2a00      	cmp	r2, #0
   14b44:	d142      	bne.n	14bcc <_dtoa_r+0x7e4>
   14b46:	e9cd 0306 	strd	r0, r3, [sp, #24]
   14b4a:	4628      	mov	r0, r5
   14b4c:	f7fd fa4e 	bl	11fec <__mcmp>
   14b50:	9906      	ldr	r1, [sp, #24]
   14b52:	9002      	str	r0, [sp, #8]
   14b54:	4620      	mov	r0, r4
   14b56:	f7fc ffe9 	bl	11b2c <_Bfree>
   14b5a:	9a02      	ldr	r2, [sp, #8]
   14b5c:	9b07      	ldr	r3, [sp, #28]
   14b5e:	b91a      	cbnz	r2, 14b68 <_dtoa_r+0x780>
   14b60:	9909      	ldr	r1, [sp, #36]	; 0x24
   14b62:	2900      	cmp	r1, #0
   14b64:	f000 827e 	beq.w	15064 <_dtoa_r+0xc7c>
   14b68:	f1b9 0f00 	cmp.w	r9, #0
   14b6c:	f2c0 8183 	blt.w	14e76 <_dtoa_r+0xa8e>
   14b70:	9901      	ldr	r1, [sp, #4]
   14b72:	ea49 0901 	orr.w	r9, r9, r1
   14b76:	990a      	ldr	r1, [sp, #40]	; 0x28
   14b78:	ea51 0909 	orrs.w	r9, r1, r9
   14b7c:	f000 817b 	beq.w	14e76 <_dtoa_r+0xa8e>
   14b80:	2a00      	cmp	r2, #0
   14b82:	f300 81c6 	bgt.w	14f12 <_dtoa_r+0xb2a>
   14b86:	9a08      	ldr	r2, [sp, #32]
   14b88:	703b      	strb	r3, [r7, #0]
   14b8a:	f107 0901 	add.w	r9, r7, #1
   14b8e:	4297      	cmp	r7, r2
   14b90:	46cb      	mov	fp, r9
   14b92:	f000 81c4 	beq.w	14f1e <_dtoa_r+0xb36>
   14b96:	4629      	mov	r1, r5
   14b98:	2300      	movs	r3, #0
   14b9a:	220a      	movs	r2, #10
   14b9c:	4620      	mov	r0, r4
   14b9e:	f7fc ffcf 	bl	11b40 <__multadd>
   14ba2:	4546      	cmp	r6, r8
   14ba4:	4605      	mov	r5, r0
   14ba6:	4631      	mov	r1, r6
   14ba8:	f04f 0300 	mov.w	r3, #0
   14bac:	f04f 020a 	mov.w	r2, #10
   14bb0:	4620      	mov	r0, r4
   14bb2:	d012      	beq.n	14bda <_dtoa_r+0x7f2>
   14bb4:	f7fc ffc4 	bl	11b40 <__multadd>
   14bb8:	4641      	mov	r1, r8
   14bba:	4606      	mov	r6, r0
   14bbc:	2300      	movs	r3, #0
   14bbe:	220a      	movs	r2, #10
   14bc0:	4620      	mov	r0, r4
   14bc2:	f7fc ffbd 	bl	11b40 <__multadd>
   14bc6:	464f      	mov	r7, r9
   14bc8:	4680      	mov	r8, r0
   14bca:	e7a7      	b.n	14b1c <_dtoa_r+0x734>
   14bcc:	4620      	mov	r0, r4
   14bce:	9302      	str	r3, [sp, #8]
   14bd0:	f7fc ffac 	bl	11b2c <_Bfree>
   14bd4:	9b02      	ldr	r3, [sp, #8]
   14bd6:	2201      	movs	r2, #1
   14bd8:	e7c6      	b.n	14b68 <_dtoa_r+0x780>
   14bda:	f7fc ffb1 	bl	11b40 <__multadd>
   14bde:	464f      	mov	r7, r9
   14be0:	4606      	mov	r6, r0
   14be2:	4680      	mov	r8, r0
   14be4:	e79a      	b.n	14b1c <_dtoa_r+0x734>
   14be6:	9b01      	ldr	r3, [sp, #4]
   14be8:	2b02      	cmp	r3, #2
   14bea:	dc71      	bgt.n	14cd0 <_dtoa_r+0x8e8>
   14bec:	9b07      	ldr	r3, [sp, #28]
   14bee:	2b00      	cmp	r3, #0
   14bf0:	f47f af7b 	bne.w	14aea <_dtoa_r+0x702>
   14bf4:	9b04      	ldr	r3, [sp, #16]
   14bf6:	4651      	mov	r1, sl
   14bf8:	3301      	adds	r3, #1
   14bfa:	4628      	mov	r0, r5
   14bfc:	9304      	str	r3, [sp, #16]
   14bfe:	f7ff fb5d 	bl	142bc <quorem>
   14c02:	f8dd b000 	ldr.w	fp, [sp]
   14c06:	f100 0330 	add.w	r3, r0, #48	; 0x30
   14c0a:	f80b 3b01 	strb.w	r3, [fp], #1
   14c0e:	2700      	movs	r7, #0
   14c10:	e6eb      	b.n	149ea <_dtoa_r+0x602>
   14c12:	4651      	mov	r1, sl
   14c14:	4628      	mov	r0, r5
   14c16:	f7fd f9e9 	bl	11fec <__mcmp>
   14c1a:	2800      	cmp	r0, #0
   14c1c:	f6bf aeba 	bge.w	14994 <_dtoa_r+0x5ac>
   14c20:	4629      	mov	r1, r5
   14c22:	2300      	movs	r3, #0
   14c24:	220a      	movs	r2, #10
   14c26:	4620      	mov	r0, r4
   14c28:	f7fc ff8a 	bl	11b40 <__multadd>
   14c2c:	9b04      	ldr	r3, [sp, #16]
   14c2e:	1e5f      	subs	r7, r3, #1
   14c30:	9b07      	ldr	r3, [sp, #28]
   14c32:	4605      	mov	r5, r0
   14c34:	2b00      	cmp	r3, #0
   14c36:	f47f af4b 	bne.w	14ad0 <_dtoa_r+0x6e8>
   14c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	f340 8218 	ble.w	15072 <_dtoa_r+0xc8a>
   14c42:	4699      	mov	r9, r3
   14c44:	e6b1      	b.n	149aa <_dtoa_r+0x5c2>
   14c46:	4bbc      	ldr	r3, [pc, #752]	; (14f38 <_dtoa_r+0xb50>)
   14c48:	9300      	str	r3, [sp, #0]
   14c4a:	3303      	adds	r3, #3
   14c4c:	e4a4      	b.n	14598 <_dtoa_r+0x1b0>
   14c4e:	201c      	movs	r0, #28
   14c50:	e712      	b.n	14a78 <_dtoa_r+0x690>
   14c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14c56:	2800      	cmp	r0, #0
   14c58:	f47f ae74 	bne.w	14944 <_dtoa_r+0x55c>
   14c5c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14c60:	2a00      	cmp	r2, #0
   14c62:	f000 80f4 	beq.w	14e4e <_dtoa_r+0xa66>
   14c66:	9b02      	ldr	r3, [sp, #8]
   14c68:	9308      	str	r3, [sp, #32]
   14c6a:	e66d      	b.n	14948 <_dtoa_r+0x560>
   14c6c:	2301      	movs	r3, #1
   14c6e:	9307      	str	r3, [sp, #28]
   14c70:	9b04      	ldr	r3, [sp, #16]
   14c72:	445b      	add	r3, fp
   14c74:	f103 0901 	add.w	r9, r3, #1
   14c78:	f1b9 0f01 	cmp.w	r9, #1
   14c7c:	46cc      	mov	ip, r9
   14c7e:	930b      	str	r3, [sp, #44]	; 0x2c
   14c80:	bfb8      	it	lt
   14c82:	f04f 0c01 	movlt.w	ip, #1
   14c86:	2100      	movs	r1, #0
   14c88:	f1bc 0f17 	cmp.w	ip, #23
   14c8c:	63e1      	str	r1, [r4, #60]	; 0x3c
   14c8e:	f77f acbc 	ble.w	1460a <_dtoa_r+0x222>
   14c92:	2001      	movs	r0, #1
   14c94:	2204      	movs	r2, #4
   14c96:	0052      	lsls	r2, r2, #1
   14c98:	f102 0314 	add.w	r3, r2, #20
   14c9c:	4563      	cmp	r3, ip
   14c9e:	4601      	mov	r1, r0
   14ca0:	f100 0001 	add.w	r0, r0, #1
   14ca4:	d9f7      	bls.n	14c96 <_dtoa_r+0x8ae>
   14ca6:	63e1      	str	r1, [r4, #60]	; 0x3c
   14ca8:	e4af      	b.n	1460a <_dtoa_r+0x222>
   14caa:	2301      	movs	r3, #1
   14cac:	9307      	str	r3, [sp, #28]
   14cae:	f1bb 0f00 	cmp.w	fp, #0
   14cb2:	dd52      	ble.n	14d5a <_dtoa_r+0x972>
   14cb4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   14cb8:	46d9      	mov	r9, fp
   14cba:	46dc      	mov	ip, fp
   14cbc:	e7e3      	b.n	14c86 <_dtoa_r+0x89e>
   14cbe:	2300      	movs	r3, #0
   14cc0:	9307      	str	r3, [sp, #28]
   14cc2:	e7d5      	b.n	14c70 <_dtoa_r+0x888>
   14cc4:	2300      	movs	r3, #0
   14cc6:	9307      	str	r3, [sp, #28]
   14cc8:	e7f1      	b.n	14cae <_dtoa_r+0x8c6>
   14cca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   14cce:	9704      	str	r7, [sp, #16]
   14cd0:	f1b9 0f00 	cmp.w	r9, #0
   14cd4:	f47f ada1 	bne.w	1481a <_dtoa_r+0x432>
   14cd8:	4651      	mov	r1, sl
   14cda:	464b      	mov	r3, r9
   14cdc:	2205      	movs	r2, #5
   14cde:	4620      	mov	r0, r4
   14ce0:	f7fc ff2e 	bl	11b40 <__multadd>
   14ce4:	4601      	mov	r1, r0
   14ce6:	4682      	mov	sl, r0
   14ce8:	4628      	mov	r0, r5
   14cea:	f7fd f97f 	bl	11fec <__mcmp>
   14cee:	2800      	cmp	r0, #0
   14cf0:	f77f ad93 	ble.w	1481a <_dtoa_r+0x432>
   14cf4:	9b04      	ldr	r3, [sp, #16]
   14cf6:	f103 0b01 	add.w	fp, r3, #1
   14cfa:	9b00      	ldr	r3, [sp, #0]
   14cfc:	2231      	movs	r2, #49	; 0x31
   14cfe:	4698      	mov	r8, r3
   14d00:	f803 2b01 	strb.w	r2, [r3], #1
   14d04:	9300      	str	r3, [sp, #0]
   14d06:	4651      	mov	r1, sl
   14d08:	4620      	mov	r0, r4
   14d0a:	f7fc ff0f 	bl	11b2c <_Bfree>
   14d0e:	f10b 0301 	add.w	r3, fp, #1
   14d12:	f8dd 9000 	ldr.w	r9, [sp]
   14d16:	9304      	str	r3, [sp, #16]
   14d18:	f8cd 8000 	str.w	r8, [sp]
   14d1c:	2e00      	cmp	r6, #0
   14d1e:	f47f ae8f 	bne.w	14a40 <_dtoa_r+0x658>
   14d22:	e691      	b.n	14a48 <_dtoa_r+0x660>
   14d24:	eba3 0a0a 	sub.w	sl, r3, sl
   14d28:	e5c5      	b.n	148b6 <_dtoa_r+0x4ce>
   14d2a:	4631      	mov	r1, r6
   14d2c:	4652      	mov	r2, sl
   14d2e:	4620      	mov	r0, r4
   14d30:	f7fd f884 	bl	11e3c <__pow5mult>
   14d34:	462a      	mov	r2, r5
   14d36:	4601      	mov	r1, r0
   14d38:	4606      	mov	r6, r0
   14d3a:	4620      	mov	r0, r4
   14d3c:	f7fc ffd0 	bl	11ce0 <__multiply>
   14d40:	4629      	mov	r1, r5
   14d42:	4605      	mov	r5, r0
   14d44:	4620      	mov	r0, r4
   14d46:	f7fc fef1 	bl	11b2c <_Bfree>
   14d4a:	e5ea      	b.n	14922 <_dtoa_r+0x53a>
   14d4c:	2002      	movs	r0, #2
   14d4e:	eeb0 5b48 	vmov.f64	d5, d8
   14d52:	e481      	b.n	14658 <_dtoa_r+0x270>
   14d54:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   14d58:	e68e      	b.n	14a78 <_dtoa_r+0x690>
   14d5a:	f04f 0b01 	mov.w	fp, #1
   14d5e:	46d9      	mov	r9, fp
   14d60:	e44f      	b.n	14602 <_dtoa_r+0x21a>
   14d62:	d103      	bne.n	14d6c <_dtoa_r+0x984>
   14d64:	9b01      	ldr	r3, [sp, #4]
   14d66:	07db      	lsls	r3, r3, #31
   14d68:	f53f ae4c 	bmi.w	14a04 <_dtoa_r+0x61c>
   14d6c:	46d9      	mov	r9, fp
   14d6e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   14d72:	2b30      	cmp	r3, #48	; 0x30
   14d74:	d0fa      	beq.n	14d6c <_dtoa_r+0x984>
   14d76:	e657      	b.n	14a28 <_dtoa_r+0x640>
   14d78:	9b04      	ldr	r3, [sp, #16]
   14d7a:	9a00      	ldr	r2, [sp, #0]
   14d7c:	3301      	adds	r3, #1
   14d7e:	9304      	str	r3, [sp, #16]
   14d80:	2331      	movs	r3, #49	; 0x31
   14d82:	7013      	strb	r3, [r2, #0]
   14d84:	e650      	b.n	14a28 <_dtoa_r+0x640>
   14d86:	f1ba 0f00 	cmp.w	sl, #0
   14d8a:	f000 8123 	beq.w	14fd4 <_dtoa_r+0xbec>
   14d8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   14d92:	9b06      	ldr	r3, [sp, #24]
   14d94:	9309      	str	r3, [sp, #36]	; 0x24
   14d96:	4413      	add	r3, r2
   14d98:	f8dd a020 	ldr.w	sl, [sp, #32]
   14d9c:	9306      	str	r3, [sp, #24]
   14d9e:	4490      	add	r8, r2
   14da0:	e592      	b.n	148c8 <_dtoa_r+0x4e0>
   14da2:	ee07 0a90 	vmov	s15, r0
   14da6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   14daa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   14dae:	eea6 5b07 	vfma.f64	d5, d6, d7
   14db2:	ee15 2a90 	vmov	r2, s11
   14db6:	ec51 0b15 	vmov	r0, r1, d5
   14dba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   14dbe:	ec41 0b15 	vmov	d5, r0, r1
   14dc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14dc6:	ee36 7b47 	vsub.f64	d7, d6, d7
   14dca:	eeb4 7bc5 	vcmpe.f64	d7, d5
   14dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14dd2:	f300 8137 	bgt.w	15044 <_dtoa_r+0xc5c>
   14dd6:	eeb1 5b45 	vneg.f64	d5, d5
   14dda:	eeb4 7bc5 	vcmpe.f64	d7, d5
   14dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14de2:	f57f acfb 	bpl.w	147dc <_dtoa_r+0x3f4>
   14de6:	f04f 0a00 	mov.w	sl, #0
   14dea:	4656      	mov	r6, sl
   14dec:	e515      	b.n	1481a <_dtoa_r+0x432>
   14dee:	f000 80f5 	beq.w	14fdc <_dtoa_r+0xbf4>
   14df2:	9b04      	ldr	r3, [sp, #16]
   14df4:	4951      	ldr	r1, [pc, #324]	; (14f3c <_dtoa_r+0xb54>)
   14df6:	425a      	negs	r2, r3
   14df8:	f002 000f 	and.w	r0, r2, #15
   14dfc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   14e00:	ed91 6b00 	vldr	d6, [r1]
   14e04:	1112      	asrs	r2, r2, #4
   14e06:	ee28 6b06 	vmul.f64	d6, d8, d6
   14e0a:	f000 8142 	beq.w	15092 <_dtoa_r+0xcaa>
   14e0e:	eeb0 7b46 	vmov.f64	d7, d6
   14e12:	494b      	ldr	r1, [pc, #300]	; (14f40 <_dtoa_r+0xb58>)
   14e14:	2600      	movs	r6, #0
   14e16:	2002      	movs	r0, #2
   14e18:	07d3      	lsls	r3, r2, #31
   14e1a:	d505      	bpl.n	14e28 <_dtoa_r+0xa40>
   14e1c:	ed91 5b00 	vldr	d5, [r1]
   14e20:	3001      	adds	r0, #1
   14e22:	2601      	movs	r6, #1
   14e24:	ee27 7b05 	vmul.f64	d7, d7, d5
   14e28:	1052      	asrs	r2, r2, #1
   14e2a:	f101 0108 	add.w	r1, r1, #8
   14e2e:	d1f3      	bne.n	14e18 <_dtoa_r+0xa30>
   14e30:	2e00      	cmp	r6, #0
   14e32:	fe06 6b07 	vseleq.f64	d6, d6, d7
   14e36:	e41e      	b.n	14676 <_dtoa_r+0x28e>
   14e38:	9b02      	ldr	r3, [sp, #8]
   14e3a:	2b00      	cmp	r3, #0
   14e3c:	f47f ae37 	bne.w	14aae <_dtoa_r+0x6c6>
   14e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14e44:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14e48:	2a00      	cmp	r2, #0
   14e4a:	f040 8137 	bne.w	150bc <_dtoa_r+0xcd4>
   14e4e:	4a3d      	ldr	r2, [pc, #244]	; (14f44 <_dtoa_r+0xb5c>)
   14e50:	400a      	ands	r2, r1
   14e52:	2a00      	cmp	r2, #0
   14e54:	f000 80fa 	beq.w	1504c <_dtoa_r+0xc64>
   14e58:	9b06      	ldr	r3, [sp, #24]
   14e5a:	3301      	adds	r3, #1
   14e5c:	9306      	str	r3, [sp, #24]
   14e5e:	2301      	movs	r3, #1
   14e60:	f108 0801 	add.w	r8, r8, #1
   14e64:	9308      	str	r3, [sp, #32]
   14e66:	e56f      	b.n	14948 <_dtoa_r+0x560>
   14e68:	4629      	mov	r1, r5
   14e6a:	9a08      	ldr	r2, [sp, #32]
   14e6c:	4620      	mov	r0, r4
   14e6e:	f7fc ffe5 	bl	11e3c <__pow5mult>
   14e72:	4605      	mov	r5, r0
   14e74:	e55a      	b.n	1492c <_dtoa_r+0x544>
   14e76:	2a00      	cmp	r2, #0
   14e78:	dd12      	ble.n	14ea0 <_dtoa_r+0xab8>
   14e7a:	4629      	mov	r1, r5
   14e7c:	2201      	movs	r2, #1
   14e7e:	4620      	mov	r0, r4
   14e80:	9301      	str	r3, [sp, #4]
   14e82:	f7fd f83b 	bl	11efc <__lshift>
   14e86:	4651      	mov	r1, sl
   14e88:	4605      	mov	r5, r0
   14e8a:	f7fd f8af 	bl	11fec <__mcmp>
   14e8e:	2800      	cmp	r0, #0
   14e90:	9b01      	ldr	r3, [sp, #4]
   14e92:	f340 80e1 	ble.w	15058 <_dtoa_r+0xc70>
   14e96:	2b39      	cmp	r3, #57	; 0x39
   14e98:	f000 80ca 	beq.w	15030 <_dtoa_r+0xc48>
   14e9c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   14ea0:	46b9      	mov	r9, r7
   14ea2:	f809 3b01 	strb.w	r3, [r9], #1
   14ea6:	9b04      	ldr	r3, [sp, #16]
   14ea8:	3301      	adds	r3, #1
   14eaa:	4637      	mov	r7, r6
   14eac:	9304      	str	r3, [sp, #16]
   14eae:	4646      	mov	r6, r8
   14eb0:	e5ba      	b.n	14a28 <_dtoa_r+0x640>
   14eb2:	ee38 8b08 	vadd.f64	d8, d8, d8
   14eb6:	eeb4 8bc6 	vcmpe.f64	d8, d6
   14eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14ebe:	dc0a      	bgt.n	14ed6 <_dtoa_r+0xaee>
   14ec0:	eeb4 8b46 	vcmp.f64	d8, d6
   14ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14ec8:	f47f acdc 	bne.w	14884 <_dtoa_r+0x49c>
   14ecc:	ee17 3a10 	vmov	r3, s14
   14ed0:	07d8      	lsls	r0, r3, #31
   14ed2:	f57f acd7 	bpl.w	14884 <_dtoa_r+0x49c>
   14ed6:	9a00      	ldr	r2, [sp, #0]
   14ed8:	e454      	b.n	14784 <_dtoa_r+0x39c>
   14eda:	6871      	ldr	r1, [r6, #4]
   14edc:	4620      	mov	r0, r4
   14ede:	f7fc fdff 	bl	11ae0 <_Balloc>
   14ee2:	4607      	mov	r7, r0
   14ee4:	2800      	cmp	r0, #0
   14ee6:	f000 80de 	beq.w	150a6 <_dtoa_r+0xcbe>
   14eea:	6933      	ldr	r3, [r6, #16]
   14eec:	3302      	adds	r3, #2
   14eee:	009a      	lsls	r2, r3, #2
   14ef0:	f106 010c 	add.w	r1, r6, #12
   14ef4:	300c      	adds	r0, #12
   14ef6:	f7f8 fc2f 	bl	d758 <memcpy>
   14efa:	4639      	mov	r1, r7
   14efc:	2201      	movs	r2, #1
   14efe:	4620      	mov	r0, r4
   14f00:	f7fc fffc 	bl	11efc <__lshift>
   14f04:	4680      	mov	r8, r0
   14f06:	e5fe      	b.n	14b06 <_dtoa_r+0x71e>
   14f08:	9b06      	ldr	r3, [sp, #24]
   14f0a:	eba3 0309 	sub.w	r3, r3, r9
   14f0e:	9309      	str	r3, [sp, #36]	; 0x24
   14f10:	e4da      	b.n	148c8 <_dtoa_r+0x4e0>
   14f12:	2b39      	cmp	r3, #57	; 0x39
   14f14:	f000 808c 	beq.w	15030 <_dtoa_r+0xc48>
   14f18:	46b9      	mov	r9, r7
   14f1a:	3301      	adds	r3, #1
   14f1c:	e7c1      	b.n	14ea2 <_dtoa_r+0xaba>
   14f1e:	9a04      	ldr	r2, [sp, #16]
   14f20:	3201      	adds	r2, #1
   14f22:	4637      	mov	r7, r6
   14f24:	9204      	str	r2, [sp, #16]
   14f26:	4646      	mov	r6, r8
   14f28:	e55f      	b.n	149ea <_dtoa_r+0x602>
   14f2a:	4629      	mov	r1, r5
   14f2c:	4620      	mov	r0, r4
   14f2e:	f7fc ff85 	bl	11e3c <__pow5mult>
   14f32:	4605      	mov	r5, r0
   14f34:	e4fa      	b.n	1492c <_dtoa_r+0x544>
   14f36:	bf00      	nop
   14f38:	20002ae4 	.word	0x20002ae4
   14f3c:	20000b58 	.word	0x20000b58
   14f40:	20000b30 	.word	0x20000b30
   14f44:	7ff00000 	.word	0x7ff00000
   14f48:	4b5e      	ldr	r3, [pc, #376]	; (150c4 <_dtoa_r+0xcdc>)
   14f4a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   14f4e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14f52:	ed1c 3b02 	vldr	d3, [ip, #-8]
   14f56:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   14f5a:	ee36 7b47 	vsub.f64	d7, d6, d7
   14f5e:	ec41 0b16 	vmov	d6, r0, r1
   14f62:	ee15 1a90 	vmov	r1, s11
   14f66:	ee23 3b06 	vmul.f64	d3, d3, d6
   14f6a:	9800      	ldr	r0, [sp, #0]
   14f6c:	3130      	adds	r1, #48	; 0x30
   14f6e:	2a01      	cmp	r2, #1
   14f70:	f800 1b01 	strb.w	r1, [r0], #1
   14f74:	f000 8083 	beq.w	1507e <_dtoa_r+0xc96>
   14f78:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14f7c:	9b00      	ldr	r3, [sp, #0]
   14f7e:	1899      	adds	r1, r3, r2
   14f80:	ee27 7b04 	vmul.f64	d7, d7, d4
   14f84:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   14f88:	ee16 3a90 	vmov	r3, s13
   14f8c:	3330      	adds	r3, #48	; 0x30
   14f8e:	f800 3b01 	strb.w	r3, [r0], #1
   14f92:	4281      	cmp	r1, r0
   14f94:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   14f98:	ee37 7b45 	vsub.f64	d7, d7, d5
   14f9c:	d1f0      	bne.n	14f80 <_dtoa_r+0xb98>
   14f9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14fa2:	ee33 5b06 	vadd.f64	d5, d3, d6
   14fa6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   14faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14fae:	f53f abe3 	bmi.w	14778 <_dtoa_r+0x390>
   14fb2:	ee36 6b43 	vsub.f64	d6, d6, d3
   14fb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14fbe:	f77f ac0d 	ble.w	147dc <_dtoa_r+0x3f4>
   14fc2:	4689      	mov	r9, r1
   14fc4:	3901      	subs	r1, #1
   14fc6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   14fca:	2b30      	cmp	r3, #48	; 0x30
   14fcc:	d0f9      	beq.n	14fc2 <_dtoa_r+0xbda>
   14fce:	1c73      	adds	r3, r6, #1
   14fd0:	9304      	str	r3, [sp, #16]
   14fd2:	e539      	b.n	14a48 <_dtoa_r+0x660>
   14fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14fd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   14fda:	e6da      	b.n	14d92 <_dtoa_r+0x9aa>
   14fdc:	2002      	movs	r0, #2
   14fde:	eeb0 6b48 	vmov.f64	d6, d8
   14fe2:	f7ff bb48 	b.w	14676 <_dtoa_r+0x28e>
   14fe6:	f1b9 0f00 	cmp.w	r9, #0
   14fea:	f43f aeda 	beq.w	14da2 <_dtoa_r+0x9ba>
   14fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ff0:	2a00      	cmp	r2, #0
   14ff2:	f77f abf3 	ble.w	147dc <_dtoa_r+0x3f4>
   14ff6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14ffa:	ee26 6b04 	vmul.f64	d6, d6, d4
   14ffe:	3001      	adds	r0, #1
   15000:	ee07 0a90 	vmov	s15, r0
   15004:	9b04      	ldr	r3, [sp, #16]
   15006:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1500a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1500e:	eea6 7b05 	vfma.f64	d7, d6, d5
   15012:	ee17 ca90 	vmov	ip, s15
   15016:	ec51 0b17 	vmov	r0, r1, d7
   1501a:	1e5e      	subs	r6, r3, #1
   1501c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   15020:	f7ff bb47 	b.w	146b2 <_dtoa_r+0x2ca>
   15024:	9b04      	ldr	r3, [sp, #16]
   15026:	3301      	adds	r3, #1
   15028:	9304      	str	r3, [sp, #16]
   1502a:	2331      	movs	r3, #49	; 0x31
   1502c:	f7ff bbb1 	b.w	14792 <_dtoa_r+0x3aa>
   15030:	9b04      	ldr	r3, [sp, #16]
   15032:	46bb      	mov	fp, r7
   15034:	3301      	adds	r3, #1
   15036:	9304      	str	r3, [sp, #16]
   15038:	2339      	movs	r3, #57	; 0x39
   1503a:	4637      	mov	r7, r6
   1503c:	f80b 3b01 	strb.w	r3, [fp], #1
   15040:	4646      	mov	r6, r8
   15042:	e4e1      	b.n	14a08 <_dtoa_r+0x620>
   15044:	f04f 0a00 	mov.w	sl, #0
   15048:	4656      	mov	r6, sl
   1504a:	e653      	b.n	14cf4 <_dtoa_r+0x90c>
   1504c:	9208      	str	r2, [sp, #32]
   1504e:	e47b      	b.n	14948 <_dtoa_r+0x560>
   15050:	1c73      	adds	r3, r6, #1
   15052:	9304      	str	r3, [sp, #16]
   15054:	4689      	mov	r9, r1
   15056:	e4f7      	b.n	14a48 <_dtoa_r+0x660>
   15058:	f47f af22 	bne.w	14ea0 <_dtoa_r+0xab8>
   1505c:	07da      	lsls	r2, r3, #31
   1505e:	f57f af1f 	bpl.w	14ea0 <_dtoa_r+0xab8>
   15062:	e718      	b.n	14e96 <_dtoa_r+0xaae>
   15064:	2b39      	cmp	r3, #57	; 0x39
   15066:	d0e3      	beq.n	15030 <_dtoa_r+0xc48>
   15068:	f1b9 0f00 	cmp.w	r9, #0
   1506c:	f73f af16 	bgt.w	14e9c <_dtoa_r+0xab4>
   15070:	e716      	b.n	14ea0 <_dtoa_r+0xab8>
   15072:	9b01      	ldr	r3, [sp, #4]
   15074:	2b02      	cmp	r3, #2
   15076:	f73f ae28 	bgt.w	14cca <_dtoa_r+0x8e2>
   1507a:	9704      	str	r7, [sp, #16]
   1507c:	e5ba      	b.n	14bf4 <_dtoa_r+0x80c>
   1507e:	4601      	mov	r1, r0
   15080:	e78d      	b.n	14f9e <_dtoa_r+0xbb6>
   15082:	9b01      	ldr	r3, [sp, #4]
   15084:	2b02      	cmp	r3, #2
   15086:	f73f ae20 	bgt.w	14cca <_dtoa_r+0x8e2>
   1508a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1508e:	9704      	str	r7, [sp, #16]
   15090:	e52b      	b.n	14aea <_dtoa_r+0x702>
   15092:	2002      	movs	r0, #2
   15094:	f7ff baef 	b.w	14676 <_dtoa_r+0x28e>
   15098:	4b0b      	ldr	r3, [pc, #44]	; (150c8 <_dtoa_r+0xce0>)
   1509a:	480c      	ldr	r0, [pc, #48]	; (150cc <_dtoa_r+0xce4>)
   1509c:	2200      	movs	r2, #0
   1509e:	f240 11af 	movw	r1, #431	; 0x1af
   150a2:	f7fc fc03 	bl	118ac <__assert_func>
   150a6:	4b08      	ldr	r3, [pc, #32]	; (150c8 <_dtoa_r+0xce0>)
   150a8:	4808      	ldr	r0, [pc, #32]	; (150cc <_dtoa_r+0xce4>)
   150aa:	463a      	mov	r2, r7
   150ac:	f240 21ef 	movw	r1, #751	; 0x2ef
   150b0:	f7fc fbfc 	bl	118ac <__assert_func>
   150b4:	4b06      	ldr	r3, [pc, #24]	; (150d0 <_dtoa_r+0xce8>)
   150b6:	9300      	str	r3, [sp, #0]
   150b8:	f7ff b9d2 	b.w	14460 <_dtoa_r+0x78>
   150bc:	9b02      	ldr	r3, [sp, #8]
   150be:	9308      	str	r3, [sp, #32]
   150c0:	e4f7      	b.n	14ab2 <_dtoa_r+0x6ca>
   150c2:	bf00      	nop
   150c4:	20000b58 	.word	0x20000b58
   150c8:	2000293c 	.word	0x2000293c
   150cc:	20002ae8 	.word	0x20002ae8
   150d0:	20002ad8 	.word	0x20002ad8

000150d4 <_close_r>:
   150d4:	b538      	push	{r3, r4, r5, lr}
   150d6:	4d07      	ldr	r5, [pc, #28]	; (150f4 <_close_r+0x20>)
   150d8:	2200      	movs	r2, #0
   150da:	4604      	mov	r4, r0
   150dc:	4608      	mov	r0, r1
   150de:	602a      	str	r2, [r5, #0]
   150e0:	f7f9 f946 	bl	e370 <_close>
   150e4:	1c43      	adds	r3, r0, #1
   150e6:	d000      	beq.n	150ea <_close_r+0x16>
   150e8:	bd38      	pop	{r3, r4, r5, pc}
   150ea:	682b      	ldr	r3, [r5, #0]
   150ec:	2b00      	cmp	r3, #0
   150ee:	d0fb      	beq.n	150e8 <_close_r+0x14>
   150f0:	6023      	str	r3, [r4, #0]
   150f2:	bd38      	pop	{r3, r4, r5, pc}
   150f4:	20005530 	.word	0x20005530

000150f8 <__sflush_r>:
   150f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   150fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15100:	460c      	mov	r4, r1
   15102:	0711      	lsls	r1, r2, #28
   15104:	4680      	mov	r8, r0
   15106:	d447      	bmi.n	15198 <__sflush_r+0xa0>
   15108:	6863      	ldr	r3, [r4, #4]
   1510a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1510e:	2b00      	cmp	r3, #0
   15110:	81a2      	strh	r2, [r4, #12]
   15112:	dd5e      	ble.n	151d2 <__sflush_r+0xda>
   15114:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   15116:	2d00      	cmp	r5, #0
   15118:	d058      	beq.n	151cc <__sflush_r+0xd4>
   1511a:	2300      	movs	r3, #0
   1511c:	f8d8 6000 	ldr.w	r6, [r8]
   15120:	f8c8 3000 	str.w	r3, [r8]
   15124:	b293      	uxth	r3, r2
   15126:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1512a:	d156      	bne.n	151da <__sflush_r+0xe2>
   1512c:	2301      	movs	r3, #1
   1512e:	69e1      	ldr	r1, [r4, #28]
   15130:	4640      	mov	r0, r8
   15132:	47a8      	blx	r5
   15134:	1c43      	adds	r3, r0, #1
   15136:	d067      	beq.n	15208 <__sflush_r+0x110>
   15138:	89a3      	ldrh	r3, [r4, #12]
   1513a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1513c:	075f      	lsls	r7, r3, #29
   1513e:	d505      	bpl.n	1514c <__sflush_r+0x54>
   15140:	6863      	ldr	r3, [r4, #4]
   15142:	1ac0      	subs	r0, r0, r3
   15144:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15146:	b10b      	cbz	r3, 1514c <__sflush_r+0x54>
   15148:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1514a:	1ac0      	subs	r0, r0, r3
   1514c:	69e1      	ldr	r1, [r4, #28]
   1514e:	4602      	mov	r2, r0
   15150:	2300      	movs	r3, #0
   15152:	4640      	mov	r0, r8
   15154:	47a8      	blx	r5
   15156:	1c41      	adds	r1, r0, #1
   15158:	d141      	bne.n	151de <__sflush_r+0xe6>
   1515a:	f8d8 3000 	ldr.w	r3, [r8]
   1515e:	2b00      	cmp	r3, #0
   15160:	d03d      	beq.n	151de <__sflush_r+0xe6>
   15162:	2b1d      	cmp	r3, #29
   15164:	d001      	beq.n	1516a <__sflush_r+0x72>
   15166:	2b16      	cmp	r3, #22
   15168:	d156      	bne.n	15218 <__sflush_r+0x120>
   1516a:	89a3      	ldrh	r3, [r4, #12]
   1516c:	6922      	ldr	r2, [r4, #16]
   1516e:	6022      	str	r2, [r4, #0]
   15170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   15174:	2100      	movs	r1, #0
   15176:	6061      	str	r1, [r4, #4]
   15178:	81a3      	strh	r3, [r4, #12]
   1517a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1517c:	f8c8 6000 	str.w	r6, [r8]
   15180:	b321      	cbz	r1, 151cc <__sflush_r+0xd4>
   15182:	f104 0340 	add.w	r3, r4, #64	; 0x40
   15186:	4299      	cmp	r1, r3
   15188:	d002      	beq.n	15190 <__sflush_r+0x98>
   1518a:	4640      	mov	r0, r8
   1518c:	f7fd fc82 	bl	12a94 <_free_r>
   15190:	2000      	movs	r0, #0
   15192:	6320      	str	r0, [r4, #48]	; 0x30
   15194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15198:	6926      	ldr	r6, [r4, #16]
   1519a:	b1be      	cbz	r6, 151cc <__sflush_r+0xd4>
   1519c:	b293      	uxth	r3, r2
   1519e:	6825      	ldr	r5, [r4, #0]
   151a0:	6026      	str	r6, [r4, #0]
   151a2:	079a      	lsls	r2, r3, #30
   151a4:	bf0c      	ite	eq
   151a6:	6963      	ldreq	r3, [r4, #20]
   151a8:	2300      	movne	r3, #0
   151aa:	1bad      	subs	r5, r5, r6
   151ac:	60a3      	str	r3, [r4, #8]
   151ae:	e00b      	b.n	151c8 <__sflush_r+0xd0>
   151b0:	462b      	mov	r3, r5
   151b2:	4632      	mov	r2, r6
   151b4:	69e1      	ldr	r1, [r4, #28]
   151b6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   151b8:	4640      	mov	r0, r8
   151ba:	47b8      	blx	r7
   151bc:	f1b0 0c00 	subs.w	ip, r0, #0
   151c0:	eba5 050c 	sub.w	r5, r5, ip
   151c4:	4466      	add	r6, ip
   151c6:	dd17      	ble.n	151f8 <__sflush_r+0x100>
   151c8:	2d00      	cmp	r5, #0
   151ca:	dcf1      	bgt.n	151b0 <__sflush_r+0xb8>
   151cc:	2000      	movs	r0, #0
   151ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   151d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   151d4:	2b00      	cmp	r3, #0
   151d6:	dc9d      	bgt.n	15114 <__sflush_r+0x1c>
   151d8:	e7f8      	b.n	151cc <__sflush_r+0xd4>
   151da:	6d20      	ldr	r0, [r4, #80]	; 0x50
   151dc:	e7ae      	b.n	1513c <__sflush_r+0x44>
   151de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   151e2:	6922      	ldr	r2, [r4, #16]
   151e4:	6022      	str	r2, [r4, #0]
   151e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   151ea:	81a3      	strh	r3, [r4, #12]
   151ec:	2200      	movs	r2, #0
   151ee:	04db      	lsls	r3, r3, #19
   151f0:	6062      	str	r2, [r4, #4]
   151f2:	d5c2      	bpl.n	1517a <__sflush_r+0x82>
   151f4:	6520      	str	r0, [r4, #80]	; 0x50
   151f6:	e7c0      	b.n	1517a <__sflush_r+0x82>
   151f8:	89a3      	ldrh	r3, [r4, #12]
   151fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   151fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15202:	81a3      	strh	r3, [r4, #12]
   15204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15208:	f8d8 3000 	ldr.w	r3, [r8]
   1520c:	2b00      	cmp	r3, #0
   1520e:	d093      	beq.n	15138 <__sflush_r+0x40>
   15210:	2b1d      	cmp	r3, #29
   15212:	d006      	beq.n	15222 <__sflush_r+0x12a>
   15214:	2b16      	cmp	r3, #22
   15216:	d004      	beq.n	15222 <__sflush_r+0x12a>
   15218:	89a3      	ldrh	r3, [r4, #12]
   1521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1521e:	81a3      	strh	r3, [r4, #12]
   15220:	e7d5      	b.n	151ce <__sflush_r+0xd6>
   15222:	f8c8 6000 	str.w	r6, [r8]
   15226:	e7d1      	b.n	151cc <__sflush_r+0xd4>

00015228 <_fflush_r>:
   15228:	b538      	push	{r3, r4, r5, lr}
   1522a:	460c      	mov	r4, r1
   1522c:	4605      	mov	r5, r0
   1522e:	b108      	cbz	r0, 15234 <_fflush_r+0xc>
   15230:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15232:	b303      	cbz	r3, 15276 <_fflush_r+0x4e>
   15234:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   15238:	b188      	cbz	r0, 1525e <_fflush_r+0x36>
   1523a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1523c:	07db      	lsls	r3, r3, #31
   1523e:	d401      	bmi.n	15244 <_fflush_r+0x1c>
   15240:	0581      	lsls	r1, r0, #22
   15242:	d50f      	bpl.n	15264 <_fflush_r+0x3c>
   15244:	4628      	mov	r0, r5
   15246:	4621      	mov	r1, r4
   15248:	f7ff ff56 	bl	150f8 <__sflush_r>
   1524c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1524e:	07da      	lsls	r2, r3, #31
   15250:	4605      	mov	r5, r0
   15252:	d402      	bmi.n	1525a <_fflush_r+0x32>
   15254:	89a3      	ldrh	r3, [r4, #12]
   15256:	059b      	lsls	r3, r3, #22
   15258:	d508      	bpl.n	1526c <_fflush_r+0x44>
   1525a:	4628      	mov	r0, r5
   1525c:	bd38      	pop	{r3, r4, r5, pc}
   1525e:	4605      	mov	r5, r0
   15260:	4628      	mov	r0, r5
   15262:	bd38      	pop	{r3, r4, r5, pc}
   15264:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15266:	f7fc fbc7 	bl	119f8 <__retarget_lock_acquire_recursive>
   1526a:	e7eb      	b.n	15244 <_fflush_r+0x1c>
   1526c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1526e:	f7fc fbc5 	bl	119fc <__retarget_lock_release_recursive>
   15272:	4628      	mov	r0, r5
   15274:	bd38      	pop	{r3, r4, r5, pc}
   15276:	f7fd f8cd 	bl	12414 <__sinit>
   1527a:	e7db      	b.n	15234 <_fflush_r+0xc>

0001527c <_fstat_r>:
   1527c:	b570      	push	{r4, r5, r6, lr}
   1527e:	460c      	mov	r4, r1
   15280:	4d08      	ldr	r5, [pc, #32]	; (152a4 <_fstat_r+0x28>)
   15282:	4603      	mov	r3, r0
   15284:	2600      	movs	r6, #0
   15286:	4620      	mov	r0, r4
   15288:	4611      	mov	r1, r2
   1528a:	461c      	mov	r4, r3
   1528c:	602e      	str	r6, [r5, #0]
   1528e:	f7f9 f872 	bl	e376 <_fstat>
   15292:	1c43      	adds	r3, r0, #1
   15294:	d000      	beq.n	15298 <_fstat_r+0x1c>
   15296:	bd70      	pop	{r4, r5, r6, pc}
   15298:	682b      	ldr	r3, [r5, #0]
   1529a:	2b00      	cmp	r3, #0
   1529c:	d0fb      	beq.n	15296 <_fstat_r+0x1a>
   1529e:	6023      	str	r3, [r4, #0]
   152a0:	bd70      	pop	{r4, r5, r6, pc}
   152a2:	bf00      	nop
   152a4:	20005530 	.word	0x20005530

000152a8 <_isatty_r>:
   152a8:	b538      	push	{r3, r4, r5, lr}
   152aa:	4d07      	ldr	r5, [pc, #28]	; (152c8 <_isatty_r+0x20>)
   152ac:	2200      	movs	r2, #0
   152ae:	4604      	mov	r4, r0
   152b0:	4608      	mov	r0, r1
   152b2:	602a      	str	r2, [r5, #0]
   152b4:	f7f9 f864 	bl	e380 <_isatty>
   152b8:	1c43      	adds	r3, r0, #1
   152ba:	d000      	beq.n	152be <_isatty_r+0x16>
   152bc:	bd38      	pop	{r3, r4, r5, pc}
   152be:	682b      	ldr	r3, [r5, #0]
   152c0:	2b00      	cmp	r3, #0
   152c2:	d0fb      	beq.n	152bc <_isatty_r+0x14>
   152c4:	6023      	str	r3, [r4, #0]
   152c6:	bd38      	pop	{r3, r4, r5, pc}
   152c8:	20005530 	.word	0x20005530

000152cc <_lseek_r>:
   152cc:	b538      	push	{r3, r4, r5, lr}
   152ce:	460c      	mov	r4, r1
   152d0:	4d08      	ldr	r5, [pc, #32]	; (152f4 <_lseek_r+0x28>)
   152d2:	4684      	mov	ip, r0
   152d4:	4611      	mov	r1, r2
   152d6:	4620      	mov	r0, r4
   152d8:	461a      	mov	r2, r3
   152da:	2300      	movs	r3, #0
   152dc:	602b      	str	r3, [r5, #0]
   152de:	4664      	mov	r4, ip
   152e0:	f7f9 f850 	bl	e384 <_lseek>
   152e4:	1c43      	adds	r3, r0, #1
   152e6:	d000      	beq.n	152ea <_lseek_r+0x1e>
   152e8:	bd38      	pop	{r3, r4, r5, pc}
   152ea:	682b      	ldr	r3, [r5, #0]
   152ec:	2b00      	cmp	r3, #0
   152ee:	d0fb      	beq.n	152e8 <_lseek_r+0x1c>
   152f0:	6023      	str	r3, [r4, #0]
   152f2:	bd38      	pop	{r3, r4, r5, pc}
   152f4:	20005530 	.word	0x20005530

000152f8 <_read_r>:
   152f8:	b538      	push	{r3, r4, r5, lr}
   152fa:	460c      	mov	r4, r1
   152fc:	4d08      	ldr	r5, [pc, #32]	; (15320 <_read_r+0x28>)
   152fe:	4684      	mov	ip, r0
   15300:	4611      	mov	r1, r2
   15302:	4620      	mov	r0, r4
   15304:	461a      	mov	r2, r3
   15306:	2300      	movs	r3, #0
   15308:	602b      	str	r3, [r5, #0]
   1530a:	4664      	mov	r4, ip
   1530c:	f7f9 f82e 	bl	e36c <_read>
   15310:	1c43      	adds	r3, r0, #1
   15312:	d000      	beq.n	15316 <_read_r+0x1e>
   15314:	bd38      	pop	{r3, r4, r5, pc}
   15316:	682b      	ldr	r3, [r5, #0]
   15318:	2b00      	cmp	r3, #0
   1531a:	d0fb      	beq.n	15314 <_read_r+0x1c>
   1531c:	6023      	str	r3, [r4, #0]
   1531e:	bd38      	pop	{r3, r4, r5, pc}
   15320:	20005530 	.word	0x20005530

00015324 <__fputwc>:
   15324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15328:	b082      	sub	sp, #8
   1532a:	4682      	mov	sl, r0
   1532c:	4688      	mov	r8, r1
   1532e:	4614      	mov	r4, r2
   15330:	f7fc fb66 	bl	11a00 <__locale_mb_cur_max>
   15334:	2801      	cmp	r0, #1
   15336:	d103      	bne.n	15340 <__fputwc+0x1c>
   15338:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1533c:	2bfe      	cmp	r3, #254	; 0xfe
   1533e:	d936      	bls.n	153ae <__fputwc+0x8a>
   15340:	f10d 0904 	add.w	r9, sp, #4
   15344:	4642      	mov	r2, r8
   15346:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1534a:	4649      	mov	r1, r9
   1534c:	4650      	mov	r0, sl
   1534e:	f7fe fe49 	bl	13fe4 <_wcrtomb_r>
   15352:	1c42      	adds	r2, r0, #1
   15354:	4606      	mov	r6, r0
   15356:	d032      	beq.n	153be <__fputwc+0x9a>
   15358:	b320      	cbz	r0, 153a4 <__fputwc+0x80>
   1535a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1535e:	2500      	movs	r5, #0
   15360:	e009      	b.n	15376 <__fputwc+0x52>
   15362:	6823      	ldr	r3, [r4, #0]
   15364:	1c5a      	adds	r2, r3, #1
   15366:	6022      	str	r2, [r4, #0]
   15368:	f883 c000 	strb.w	ip, [r3]
   1536c:	3501      	adds	r5, #1
   1536e:	42b5      	cmp	r5, r6
   15370:	d218      	bcs.n	153a4 <__fputwc+0x80>
   15372:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   15376:	68a3      	ldr	r3, [r4, #8]
   15378:	3b01      	subs	r3, #1
   1537a:	2b00      	cmp	r3, #0
   1537c:	60a3      	str	r3, [r4, #8]
   1537e:	daf0      	bge.n	15362 <__fputwc+0x3e>
   15380:	69a7      	ldr	r7, [r4, #24]
   15382:	42bb      	cmp	r3, r7
   15384:	4661      	mov	r1, ip
   15386:	4622      	mov	r2, r4
   15388:	4650      	mov	r0, sl
   1538a:	db02      	blt.n	15392 <__fputwc+0x6e>
   1538c:	f1bc 0f0a 	cmp.w	ip, #10
   15390:	d1e7      	bne.n	15362 <__fputwc+0x3e>
   15392:	f000 f9cb 	bl	1572c <__swbuf_r>
   15396:	1c43      	adds	r3, r0, #1
   15398:	d1e8      	bne.n	1536c <__fputwc+0x48>
   1539a:	4606      	mov	r6, r0
   1539c:	4630      	mov	r0, r6
   1539e:	b002      	add	sp, #8
   153a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   153a4:	4646      	mov	r6, r8
   153a6:	4630      	mov	r0, r6
   153a8:	b002      	add	sp, #8
   153aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   153ae:	fa5f fc88 	uxtb.w	ip, r8
   153b2:	f88d c004 	strb.w	ip, [sp, #4]
   153b6:	4606      	mov	r6, r0
   153b8:	f10d 0904 	add.w	r9, sp, #4
   153bc:	e7cf      	b.n	1535e <__fputwc+0x3a>
   153be:	89a3      	ldrh	r3, [r4, #12]
   153c0:	4630      	mov	r0, r6
   153c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   153c6:	81a3      	strh	r3, [r4, #12]
   153c8:	b002      	add	sp, #8
   153ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   153ce:	bf00      	nop

000153d0 <_fputwc_r>:
   153d0:	b530      	push	{r4, r5, lr}
   153d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   153d4:	f013 0f01 	tst.w	r3, #1
   153d8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   153dc:	4614      	mov	r4, r2
   153de:	b083      	sub	sp, #12
   153e0:	4605      	mov	r5, r0
   153e2:	b29a      	uxth	r2, r3
   153e4:	d101      	bne.n	153ea <_fputwc_r+0x1a>
   153e6:	0598      	lsls	r0, r3, #22
   153e8:	d51c      	bpl.n	15424 <_fputwc_r+0x54>
   153ea:	0490      	lsls	r0, r2, #18
   153ec:	d406      	bmi.n	153fc <_fputwc_r+0x2c>
   153ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   153f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   153f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   153f8:	81a3      	strh	r3, [r4, #12]
   153fa:	6662      	str	r2, [r4, #100]	; 0x64
   153fc:	4622      	mov	r2, r4
   153fe:	4628      	mov	r0, r5
   15400:	f7ff ff90 	bl	15324 <__fputwc>
   15404:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15406:	07da      	lsls	r2, r3, #31
   15408:	4605      	mov	r5, r0
   1540a:	d402      	bmi.n	15412 <_fputwc_r+0x42>
   1540c:	89a3      	ldrh	r3, [r4, #12]
   1540e:	059b      	lsls	r3, r3, #22
   15410:	d502      	bpl.n	15418 <_fputwc_r+0x48>
   15412:	4628      	mov	r0, r5
   15414:	b003      	add	sp, #12
   15416:	bd30      	pop	{r4, r5, pc}
   15418:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1541a:	f7fc faef 	bl	119fc <__retarget_lock_release_recursive>
   1541e:	4628      	mov	r0, r5
   15420:	b003      	add	sp, #12
   15422:	bd30      	pop	{r4, r5, pc}
   15424:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15426:	9101      	str	r1, [sp, #4]
   15428:	f7fc fae6 	bl	119f8 <__retarget_lock_acquire_recursive>
   1542c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15430:	9901      	ldr	r1, [sp, #4]
   15432:	b29a      	uxth	r2, r3
   15434:	e7d9      	b.n	153ea <_fputwc_r+0x1a>
   15436:	bf00      	nop

00015438 <__sfvwrite_r>:
   15438:	6893      	ldr	r3, [r2, #8]
   1543a:	2b00      	cmp	r3, #0
   1543c:	f000 8085 	beq.w	1554a <__sfvwrite_r+0x112>
   15440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15444:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   15448:	460c      	mov	r4, r1
   1544a:	0719      	lsls	r1, r3, #28
   1544c:	4680      	mov	r8, r0
   1544e:	b083      	sub	sp, #12
   15450:	4617      	mov	r7, r2
   15452:	b298      	uxth	r0, r3
   15454:	d525      	bpl.n	154a2 <__sfvwrite_r+0x6a>
   15456:	6923      	ldr	r3, [r4, #16]
   15458:	b31b      	cbz	r3, 154a2 <__sfvwrite_r+0x6a>
   1545a:	f010 0302 	ands.w	r3, r0, #2
   1545e:	683d      	ldr	r5, [r7, #0]
   15460:	d02d      	beq.n	154be <__sfvwrite_r+0x86>
   15462:	f04f 0a00 	mov.w	sl, #0
   15466:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 15728 <__sfvwrite_r+0x2f0>
   1546a:	4656      	mov	r6, sl
   1546c:	46b9      	mov	r9, r7
   1546e:	455e      	cmp	r6, fp
   15470:	4633      	mov	r3, r6
   15472:	4652      	mov	r2, sl
   15474:	bf28      	it	cs
   15476:	465b      	movcs	r3, fp
   15478:	4640      	mov	r0, r8
   1547a:	2e00      	cmp	r6, #0
   1547c:	d052      	beq.n	15524 <__sfvwrite_r+0xec>
   1547e:	69e1      	ldr	r1, [r4, #28]
   15480:	6a67      	ldr	r7, [r4, #36]	; 0x24
   15482:	47b8      	blx	r7
   15484:	2800      	cmp	r0, #0
   15486:	dd56      	ble.n	15536 <__sfvwrite_r+0xfe>
   15488:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1548c:	1a1b      	subs	r3, r3, r0
   1548e:	4482      	add	sl, r0
   15490:	1a36      	subs	r6, r6, r0
   15492:	f8c9 3008 	str.w	r3, [r9, #8]
   15496:	2b00      	cmp	r3, #0
   15498:	d1e9      	bne.n	1546e <__sfvwrite_r+0x36>
   1549a:	2000      	movs	r0, #0
   1549c:	b003      	add	sp, #12
   1549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a2:	4621      	mov	r1, r4
   154a4:	4640      	mov	r0, r8
   154a6:	f7fe fe2b 	bl	14100 <__swsetup_r>
   154aa:	2800      	cmp	r0, #0
   154ac:	f040 8138 	bne.w	15720 <__sfvwrite_r+0x2e8>
   154b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   154b4:	683d      	ldr	r5, [r7, #0]
   154b6:	b298      	uxth	r0, r3
   154b8:	f010 0302 	ands.w	r3, r0, #2
   154bc:	d1d1      	bne.n	15462 <__sfvwrite_r+0x2a>
   154be:	f010 0901 	ands.w	r9, r0, #1
   154c2:	d144      	bne.n	1554e <__sfvwrite_r+0x116>
   154c4:	464e      	mov	r6, r9
   154c6:	9700      	str	r7, [sp, #0]
   154c8:	b346      	cbz	r6, 1551c <__sfvwrite_r+0xe4>
   154ca:	0582      	lsls	r2, r0, #22
   154cc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   154d0:	f140 8085 	bpl.w	155de <__sfvwrite_r+0x1a6>
   154d4:	45b3      	cmp	fp, r6
   154d6:	465a      	mov	r2, fp
   154d8:	f200 80b4 	bhi.w	15644 <__sfvwrite_r+0x20c>
   154dc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   154e0:	f040 80c1 	bne.w	15666 <__sfvwrite_r+0x22e>
   154e4:	6820      	ldr	r0, [r4, #0]
   154e6:	9201      	str	r2, [sp, #4]
   154e8:	4649      	mov	r1, r9
   154ea:	f7fc f963 	bl	117b4 <memmove>
   154ee:	68a3      	ldr	r3, [r4, #8]
   154f0:	9a01      	ldr	r2, [sp, #4]
   154f2:	eba3 010b 	sub.w	r1, r3, fp
   154f6:	6823      	ldr	r3, [r4, #0]
   154f8:	60a1      	str	r1, [r4, #8]
   154fa:	4413      	add	r3, r2
   154fc:	46b2      	mov	sl, r6
   154fe:	6023      	str	r3, [r4, #0]
   15500:	2600      	movs	r6, #0
   15502:	9a00      	ldr	r2, [sp, #0]
   15504:	6893      	ldr	r3, [r2, #8]
   15506:	eba3 030a 	sub.w	r3, r3, sl
   1550a:	44d1      	add	r9, sl
   1550c:	6093      	str	r3, [r2, #8]
   1550e:	2b00      	cmp	r3, #0
   15510:	d0c3      	beq.n	1549a <__sfvwrite_r+0x62>
   15512:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   15516:	b280      	uxth	r0, r0
   15518:	2e00      	cmp	r6, #0
   1551a:	d1d6      	bne.n	154ca <__sfvwrite_r+0x92>
   1551c:	e9d5 9600 	ldrd	r9, r6, [r5]
   15520:	3508      	adds	r5, #8
   15522:	e7d1      	b.n	154c8 <__sfvwrite_r+0x90>
   15524:	e9d5 a600 	ldrd	sl, r6, [r5]
   15528:	3508      	adds	r5, #8
   1552a:	e7a0      	b.n	1546e <__sfvwrite_r+0x36>
   1552c:	4621      	mov	r1, r4
   1552e:	4640      	mov	r0, r8
   15530:	f7ff fe7a 	bl	15228 <_fflush_r>
   15534:	b388      	cbz	r0, 1559a <__sfvwrite_r+0x162>
   15536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1553a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1553e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15542:	81a3      	strh	r3, [r4, #12]
   15544:	b003      	add	sp, #12
   15546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1554a:	2000      	movs	r0, #0
   1554c:	4770      	bx	lr
   1554e:	461e      	mov	r6, r3
   15550:	46ba      	mov	sl, r7
   15552:	4699      	mov	r9, r3
   15554:	4618      	mov	r0, r3
   15556:	9500      	str	r5, [sp, #0]
   15558:	461f      	mov	r7, r3
   1555a:	b366      	cbz	r6, 155b6 <__sfvwrite_r+0x17e>
   1555c:	2800      	cmp	r0, #0
   1555e:	d032      	beq.n	155c6 <__sfvwrite_r+0x18e>
   15560:	464a      	mov	r2, r9
   15562:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   15566:	6820      	ldr	r0, [r4, #0]
   15568:	68a5      	ldr	r5, [r4, #8]
   1556a:	42b2      	cmp	r2, r6
   1556c:	bf28      	it	cs
   1556e:	4632      	movcs	r2, r6
   15570:	4288      	cmp	r0, r1
   15572:	d904      	bls.n	1557e <__sfvwrite_r+0x146>
   15574:	eb05 0b03 	add.w	fp, r5, r3
   15578:	455a      	cmp	r2, fp
   1557a:	f300 80a7 	bgt.w	156cc <__sfvwrite_r+0x294>
   1557e:	4293      	cmp	r3, r2
   15580:	dc64      	bgt.n	1564c <__sfvwrite_r+0x214>
   15582:	69e1      	ldr	r1, [r4, #28]
   15584:	6a65      	ldr	r5, [r4, #36]	; 0x24
   15586:	463a      	mov	r2, r7
   15588:	4640      	mov	r0, r8
   1558a:	47a8      	blx	r5
   1558c:	f1b0 0b00 	subs.w	fp, r0, #0
   15590:	ddd1      	ble.n	15536 <__sfvwrite_r+0xfe>
   15592:	ebb9 090b 	subs.w	r9, r9, fp
   15596:	d0c9      	beq.n	1552c <__sfvwrite_r+0xf4>
   15598:	2001      	movs	r0, #1
   1559a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1559e:	eba3 030b 	sub.w	r3, r3, fp
   155a2:	445f      	add	r7, fp
   155a4:	eba6 060b 	sub.w	r6, r6, fp
   155a8:	f8ca 3008 	str.w	r3, [sl, #8]
   155ac:	2b00      	cmp	r3, #0
   155ae:	f43f af74 	beq.w	1549a <__sfvwrite_r+0x62>
   155b2:	2e00      	cmp	r6, #0
   155b4:	d1d2      	bne.n	1555c <__sfvwrite_r+0x124>
   155b6:	9a00      	ldr	r2, [sp, #0]
   155b8:	6856      	ldr	r6, [r2, #4]
   155ba:	4613      	mov	r3, r2
   155bc:	3208      	adds	r2, #8
   155be:	9200      	str	r2, [sp, #0]
   155c0:	2e00      	cmp	r6, #0
   155c2:	d0f8      	beq.n	155b6 <__sfvwrite_r+0x17e>
   155c4:	681f      	ldr	r7, [r3, #0]
   155c6:	4632      	mov	r2, r6
   155c8:	210a      	movs	r1, #10
   155ca:	4638      	mov	r0, r7
   155cc:	f7fc ff50 	bl	12470 <memchr>
   155d0:	2800      	cmp	r0, #0
   155d2:	f000 809c 	beq.w	1570e <__sfvwrite_r+0x2d6>
   155d6:	3001      	adds	r0, #1
   155d8:	eba0 0907 	sub.w	r9, r0, r7
   155dc:	e7c0      	b.n	15560 <__sfvwrite_r+0x128>
   155de:	6820      	ldr	r0, [r4, #0]
   155e0:	6923      	ldr	r3, [r4, #16]
   155e2:	4298      	cmp	r0, r3
   155e4:	d816      	bhi.n	15614 <__sfvwrite_r+0x1dc>
   155e6:	6962      	ldr	r2, [r4, #20]
   155e8:	42b2      	cmp	r2, r6
   155ea:	d813      	bhi.n	15614 <__sfvwrite_r+0x1dc>
   155ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   155f0:	42b3      	cmp	r3, r6
   155f2:	bf28      	it	cs
   155f4:	4633      	movcs	r3, r6
   155f6:	69e1      	ldr	r1, [r4, #28]
   155f8:	fb93 f3f2 	sdiv	r3, r3, r2
   155fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   155fe:	fb02 f303 	mul.w	r3, r2, r3
   15602:	4640      	mov	r0, r8
   15604:	464a      	mov	r2, r9
   15606:	47b8      	blx	r7
   15608:	f1b0 0a00 	subs.w	sl, r0, #0
   1560c:	dd93      	ble.n	15536 <__sfvwrite_r+0xfe>
   1560e:	eba6 060a 	sub.w	r6, r6, sl
   15612:	e776      	b.n	15502 <__sfvwrite_r+0xca>
   15614:	45b3      	cmp	fp, r6
   15616:	46da      	mov	sl, fp
   15618:	bf28      	it	cs
   1561a:	46b2      	movcs	sl, r6
   1561c:	4652      	mov	r2, sl
   1561e:	4649      	mov	r1, r9
   15620:	f7fc f8c8 	bl	117b4 <memmove>
   15624:	68a3      	ldr	r3, [r4, #8]
   15626:	6822      	ldr	r2, [r4, #0]
   15628:	eba3 030a 	sub.w	r3, r3, sl
   1562c:	4452      	add	r2, sl
   1562e:	60a3      	str	r3, [r4, #8]
   15630:	6022      	str	r2, [r4, #0]
   15632:	2b00      	cmp	r3, #0
   15634:	d1eb      	bne.n	1560e <__sfvwrite_r+0x1d6>
   15636:	4621      	mov	r1, r4
   15638:	4640      	mov	r0, r8
   1563a:	f7ff fdf5 	bl	15228 <_fflush_r>
   1563e:	2800      	cmp	r0, #0
   15640:	d0e5      	beq.n	1560e <__sfvwrite_r+0x1d6>
   15642:	e778      	b.n	15536 <__sfvwrite_r+0xfe>
   15644:	6820      	ldr	r0, [r4, #0]
   15646:	46b3      	mov	fp, r6
   15648:	4632      	mov	r2, r6
   1564a:	e74c      	b.n	154e6 <__sfvwrite_r+0xae>
   1564c:	4639      	mov	r1, r7
   1564e:	9201      	str	r2, [sp, #4]
   15650:	f7fc f8b0 	bl	117b4 <memmove>
   15654:	9a01      	ldr	r2, [sp, #4]
   15656:	68a3      	ldr	r3, [r4, #8]
   15658:	1a9b      	subs	r3, r3, r2
   1565a:	60a3      	str	r3, [r4, #8]
   1565c:	6823      	ldr	r3, [r4, #0]
   1565e:	4413      	add	r3, r2
   15660:	6023      	str	r3, [r4, #0]
   15662:	4693      	mov	fp, r2
   15664:	e795      	b.n	15592 <__sfvwrite_r+0x15a>
   15666:	6823      	ldr	r3, [r4, #0]
   15668:	6921      	ldr	r1, [r4, #16]
   1566a:	eba3 0b01 	sub.w	fp, r3, r1
   1566e:	6963      	ldr	r3, [r4, #20]
   15670:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   15674:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   15678:	f10b 0301 	add.w	r3, fp, #1
   1567c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   15680:	4433      	add	r3, r6
   15682:	4553      	cmp	r3, sl
   15684:	4652      	mov	r2, sl
   15686:	bf84      	itt	hi
   15688:	469a      	movhi	sl, r3
   1568a:	4652      	movhi	r2, sl
   1568c:	0543      	lsls	r3, r0, #21
   1568e:	d52c      	bpl.n	156ea <__sfvwrite_r+0x2b2>
   15690:	4611      	mov	r1, r2
   15692:	4640      	mov	r0, r8
   15694:	f7fb fdae 	bl	111f4 <_malloc_r>
   15698:	2800      	cmp	r0, #0
   1569a:	d03b      	beq.n	15714 <__sfvwrite_r+0x2dc>
   1569c:	465a      	mov	r2, fp
   1569e:	6921      	ldr	r1, [r4, #16]
   156a0:	9001      	str	r0, [sp, #4]
   156a2:	f7f8 f859 	bl	d758 <memcpy>
   156a6:	89a2      	ldrh	r2, [r4, #12]
   156a8:	9b01      	ldr	r3, [sp, #4]
   156aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   156ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   156b2:	81a2      	strh	r2, [r4, #12]
   156b4:	eb03 000b 	add.w	r0, r3, fp
   156b8:	6123      	str	r3, [r4, #16]
   156ba:	ebaa 030b 	sub.w	r3, sl, fp
   156be:	f8c4 a014 	str.w	sl, [r4, #20]
   156c2:	60a3      	str	r3, [r4, #8]
   156c4:	6020      	str	r0, [r4, #0]
   156c6:	46b3      	mov	fp, r6
   156c8:	4632      	mov	r2, r6
   156ca:	e70c      	b.n	154e6 <__sfvwrite_r+0xae>
   156cc:	4639      	mov	r1, r7
   156ce:	465a      	mov	r2, fp
   156d0:	f7fc f870 	bl	117b4 <memmove>
   156d4:	6823      	ldr	r3, [r4, #0]
   156d6:	445b      	add	r3, fp
   156d8:	6023      	str	r3, [r4, #0]
   156da:	4621      	mov	r1, r4
   156dc:	4640      	mov	r0, r8
   156de:	f7ff fda3 	bl	15228 <_fflush_r>
   156e2:	2800      	cmp	r0, #0
   156e4:	f43f af55 	beq.w	15592 <__sfvwrite_r+0x15a>
   156e8:	e725      	b.n	15536 <__sfvwrite_r+0xfe>
   156ea:	4640      	mov	r0, r8
   156ec:	f7fc ff96 	bl	1261c <_realloc_r>
   156f0:	4603      	mov	r3, r0
   156f2:	2800      	cmp	r0, #0
   156f4:	d1de      	bne.n	156b4 <__sfvwrite_r+0x27c>
   156f6:	6921      	ldr	r1, [r4, #16]
   156f8:	4640      	mov	r0, r8
   156fa:	f7fd f9cb 	bl	12a94 <_free_r>
   156fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15702:	220c      	movs	r2, #12
   15704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15708:	f8c8 2000 	str.w	r2, [r8]
   1570c:	e715      	b.n	1553a <__sfvwrite_r+0x102>
   1570e:	1c72      	adds	r2, r6, #1
   15710:	4691      	mov	r9, r2
   15712:	e726      	b.n	15562 <__sfvwrite_r+0x12a>
   15714:	220c      	movs	r2, #12
   15716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1571a:	f8c8 2000 	str.w	r2, [r8]
   1571e:	e70c      	b.n	1553a <__sfvwrite_r+0x102>
   15720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15724:	e6ba      	b.n	1549c <__sfvwrite_r+0x64>
   15726:	bf00      	nop
   15728:	7ffffc00 	.word	0x7ffffc00

0001572c <__swbuf_r>:
   1572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1572e:	460d      	mov	r5, r1
   15730:	4614      	mov	r4, r2
   15732:	4606      	mov	r6, r0
   15734:	b110      	cbz	r0, 1573c <__swbuf_r+0x10>
   15736:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15738:	2b00      	cmp	r3, #0
   1573a:	d04c      	beq.n	157d6 <__swbuf_r+0xaa>
   1573c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15740:	69a3      	ldr	r3, [r4, #24]
   15742:	60a3      	str	r3, [r4, #8]
   15744:	0717      	lsls	r7, r2, #28
   15746:	b290      	uxth	r0, r2
   15748:	d51b      	bpl.n	15782 <__swbuf_r+0x56>
   1574a:	6923      	ldr	r3, [r4, #16]
   1574c:	b1cb      	cbz	r3, 15782 <__swbuf_r+0x56>
   1574e:	b2ed      	uxtb	r5, r5
   15750:	0481      	lsls	r1, r0, #18
   15752:	462f      	mov	r7, r5
   15754:	d522      	bpl.n	1579c <__swbuf_r+0x70>
   15756:	6822      	ldr	r2, [r4, #0]
   15758:	6961      	ldr	r1, [r4, #20]
   1575a:	1ad3      	subs	r3, r2, r3
   1575c:	4299      	cmp	r1, r3
   1575e:	dd29      	ble.n	157b4 <__swbuf_r+0x88>
   15760:	3301      	adds	r3, #1
   15762:	68a1      	ldr	r1, [r4, #8]
   15764:	3901      	subs	r1, #1
   15766:	60a1      	str	r1, [r4, #8]
   15768:	1c51      	adds	r1, r2, #1
   1576a:	6021      	str	r1, [r4, #0]
   1576c:	7015      	strb	r5, [r2, #0]
   1576e:	6962      	ldr	r2, [r4, #20]
   15770:	429a      	cmp	r2, r3
   15772:	d027      	beq.n	157c4 <__swbuf_r+0x98>
   15774:	89a3      	ldrh	r3, [r4, #12]
   15776:	07db      	lsls	r3, r3, #31
   15778:	d501      	bpl.n	1577e <__swbuf_r+0x52>
   1577a:	2d0a      	cmp	r5, #10
   1577c:	d022      	beq.n	157c4 <__swbuf_r+0x98>
   1577e:	4638      	mov	r0, r7
   15780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15782:	4621      	mov	r1, r4
   15784:	4630      	mov	r0, r6
   15786:	f7fe fcbb 	bl	14100 <__swsetup_r>
   1578a:	bb08      	cbnz	r0, 157d0 <__swbuf_r+0xa4>
   1578c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15790:	6923      	ldr	r3, [r4, #16]
   15792:	b290      	uxth	r0, r2
   15794:	b2ed      	uxtb	r5, r5
   15796:	0481      	lsls	r1, r0, #18
   15798:	462f      	mov	r7, r5
   1579a:	d4dc      	bmi.n	15756 <__swbuf_r+0x2a>
   1579c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   157a0:	81a2      	strh	r2, [r4, #12]
   157a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   157a4:	6961      	ldr	r1, [r4, #20]
   157a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   157aa:	6662      	str	r2, [r4, #100]	; 0x64
   157ac:	6822      	ldr	r2, [r4, #0]
   157ae:	1ad3      	subs	r3, r2, r3
   157b0:	4299      	cmp	r1, r3
   157b2:	dcd5      	bgt.n	15760 <__swbuf_r+0x34>
   157b4:	4621      	mov	r1, r4
   157b6:	4630      	mov	r0, r6
   157b8:	f7ff fd36 	bl	15228 <_fflush_r>
   157bc:	b940      	cbnz	r0, 157d0 <__swbuf_r+0xa4>
   157be:	6822      	ldr	r2, [r4, #0]
   157c0:	2301      	movs	r3, #1
   157c2:	e7ce      	b.n	15762 <__swbuf_r+0x36>
   157c4:	4621      	mov	r1, r4
   157c6:	4630      	mov	r0, r6
   157c8:	f7ff fd2e 	bl	15228 <_fflush_r>
   157cc:	2800      	cmp	r0, #0
   157ce:	d0d6      	beq.n	1577e <__swbuf_r+0x52>
   157d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   157d4:	e7d3      	b.n	1577e <__swbuf_r+0x52>
   157d6:	f7fc fe1d 	bl	12414 <__sinit>
   157da:	e7af      	b.n	1573c <__swbuf_r+0x10>

000157dc <_wcsnrtombs_l>:
   157dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157e0:	b08b      	sub	sp, #44	; 0x2c
   157e2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   157e6:	9f14      	ldr	r7, [sp, #80]	; 0x50
   157e8:	9103      	str	r1, [sp, #12]
   157ea:	4681      	mov	r9, r0
   157ec:	9205      	str	r2, [sp, #20]
   157ee:	461e      	mov	r6, r3
   157f0:	f1b8 0f00 	cmp.w	r8, #0
   157f4:	d05c      	beq.n	158b0 <_wcsnrtombs_l+0xd4>
   157f6:	9b03      	ldr	r3, [sp, #12]
   157f8:	2b00      	cmp	r3, #0
   157fa:	d05e      	beq.n	158ba <_wcsnrtombs_l+0xde>
   157fc:	9b05      	ldr	r3, [sp, #20]
   157fe:	681d      	ldr	r5, [r3, #0]
   15800:	2f00      	cmp	r7, #0
   15802:	d06a      	beq.n	158da <_wcsnrtombs_l+0xfe>
   15804:	1e74      	subs	r4, r6, #1
   15806:	b34e      	cbz	r6, 1585c <_wcsnrtombs_l+0x80>
   15808:	9b03      	ldr	r3, [sp, #12]
   1580a:	9304      	str	r3, [sp, #16]
   1580c:	3d04      	subs	r5, #4
   1580e:	2600      	movs	r6, #0
   15810:	9501      	str	r5, [sp, #4]
   15812:	e00b      	b.n	1582c <_wcsnrtombs_l+0x50>
   15814:	9b03      	ldr	r3, [sp, #12]
   15816:	bb2b      	cbnz	r3, 15864 <_wcsnrtombs_l+0x88>
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	681a      	ldr	r2, [r3, #0]
   1581c:	2a00      	cmp	r2, #0
   1581e:	d03a      	beq.n	15896 <_wcsnrtombs_l+0xba>
   15820:	45bc      	cmp	ip, r7
   15822:	d25c      	bcs.n	158de <_wcsnrtombs_l+0x102>
   15824:	3c01      	subs	r4, #1
   15826:	1c63      	adds	r3, r4, #1
   15828:	4666      	mov	r6, ip
   1582a:	d017      	beq.n	1585c <_wcsnrtombs_l+0x80>
   1582c:	f8d8 3000 	ldr.w	r3, [r8]
   15830:	9302      	str	r3, [sp, #8]
   15832:	9b01      	ldr	r3, [sp, #4]
   15834:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   15838:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1583c:	9301      	str	r3, [sp, #4]
   1583e:	a907      	add	r1, sp, #28
   15840:	4643      	mov	r3, r8
   15842:	4648      	mov	r0, r9
   15844:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15848:	47a8      	blx	r5
   1584a:	1c42      	adds	r2, r0, #1
   1584c:	d03a      	beq.n	158c4 <_wcsnrtombs_l+0xe8>
   1584e:	eb00 0c06 	add.w	ip, r0, r6
   15852:	45bc      	cmp	ip, r7
   15854:	d9de      	bls.n	15814 <_wcsnrtombs_l+0x38>
   15856:	9b02      	ldr	r3, [sp, #8]
   15858:	e9c8 3b00 	strd	r3, fp, [r8]
   1585c:	4630      	mov	r0, r6
   1585e:	b00b      	add	sp, #44	; 0x2c
   15860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15864:	2800      	cmp	r0, #0
   15866:	dd0e      	ble.n	15886 <_wcsnrtombs_l+0xaa>
   15868:	9b04      	ldr	r3, [sp, #16]
   1586a:	9d01      	ldr	r5, [sp, #4]
   1586c:	4418      	add	r0, r3
   1586e:	1e5a      	subs	r2, r3, #1
   15870:	a907      	add	r1, sp, #28
   15872:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   15876:	f811 3b01 	ldrb.w	r3, [r1], #1
   1587a:	f802 3f01 	strb.w	r3, [r2, #1]!
   1587e:	4572      	cmp	r2, lr
   15880:	d1f9      	bne.n	15876 <_wcsnrtombs_l+0x9a>
   15882:	9501      	str	r5, [sp, #4]
   15884:	9004      	str	r0, [sp, #16]
   15886:	9b05      	ldr	r3, [sp, #20]
   15888:	681a      	ldr	r2, [r3, #0]
   1588a:	3204      	adds	r2, #4
   1588c:	601a      	str	r2, [r3, #0]
   1588e:	9b01      	ldr	r3, [sp, #4]
   15890:	681a      	ldr	r2, [r3, #0]
   15892:	2a00      	cmp	r2, #0
   15894:	d1c4      	bne.n	15820 <_wcsnrtombs_l+0x44>
   15896:	9b03      	ldr	r3, [sp, #12]
   15898:	b10b      	cbz	r3, 1589e <_wcsnrtombs_l+0xc2>
   1589a:	9b05      	ldr	r3, [sp, #20]
   1589c:	601a      	str	r2, [r3, #0]
   1589e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   158a2:	2200      	movs	r2, #0
   158a4:	4630      	mov	r0, r6
   158a6:	f8c8 2000 	str.w	r2, [r8]
   158aa:	b00b      	add	sp, #44	; 0x2c
   158ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b0:	9b03      	ldr	r3, [sp, #12]
   158b2:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   158b6:	2b00      	cmp	r3, #0
   158b8:	d1a0      	bne.n	157fc <_wcsnrtombs_l+0x20>
   158ba:	9b05      	ldr	r3, [sp, #20]
   158bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   158c0:	681d      	ldr	r5, [r3, #0]
   158c2:	e79f      	b.n	15804 <_wcsnrtombs_l+0x28>
   158c4:	4606      	mov	r6, r0
   158c6:	218a      	movs	r1, #138	; 0x8a
   158c8:	2200      	movs	r2, #0
   158ca:	4630      	mov	r0, r6
   158cc:	f8c9 1000 	str.w	r1, [r9]
   158d0:	f8c8 2000 	str.w	r2, [r8]
   158d4:	b00b      	add	sp, #44	; 0x2c
   158d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158da:	463e      	mov	r6, r7
   158dc:	e7be      	b.n	1585c <_wcsnrtombs_l+0x80>
   158de:	4666      	mov	r6, ip
   158e0:	e7bc      	b.n	1585c <_wcsnrtombs_l+0x80>
   158e2:	bf00      	nop

000158e4 <_wcsnrtombs_r>:
   158e4:	b510      	push	{r4, lr}
   158e6:	b084      	sub	sp, #16
   158e8:	4c05      	ldr	r4, [pc, #20]	; (15900 <_wcsnrtombs_r+0x1c>)
   158ea:	9806      	ldr	r0, [sp, #24]
   158ec:	9000      	str	r0, [sp, #0]
   158ee:	9807      	ldr	r0, [sp, #28]
   158f0:	9001      	str	r0, [sp, #4]
   158f2:	4804      	ldr	r0, [pc, #16]	; (15904 <_wcsnrtombs_r+0x20>)
   158f4:	6800      	ldr	r0, [r0, #0]
   158f6:	9402      	str	r4, [sp, #8]
   158f8:	f7ff ff70 	bl	157dc <_wcsnrtombs_l>
   158fc:	b004      	add	sp, #16
   158fe:	bd10      	pop	{r4, pc}
   15900:	200036b4 	.word	0x200036b4
   15904:	20003c3c 	.word	0x20003c3c

00015908 <___init_veneer>:
   15908:	f85f f000 	ldr.w	pc, [pc]	; 1590c <___init_veneer+0x4>
   1590c:	60001f39 	.word	0x60001f39

00015910 <___reboot_Teensyduino__veneer>:
   15910:	f85f f000 	ldr.w	pc, [pc]	; 15914 <___reboot_Teensyduino__veneer+0x4>
   15914:	60001ee5 	.word	0x60001ee5

00015918 <___ZN7TwoWire5beginEv_veneer>:
   15918:	f85f f000 	ldr.w	pc, [pc]	; 1591c <___ZN7TwoWire5beginEv_veneer+0x4>
   1591c:	600017c9 	.word	0x600017c9

Disassembly of section .fini:

00015920 <_fini>:
   15920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15922:	bf00      	nop
