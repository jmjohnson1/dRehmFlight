
/home/james/Documents/dRehmFlight/Versions/dRehmFlight_rip/build/dRehmFlight_rip.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001400:	b580      	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001402:	f000 fa5d 	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <ResetHandler2+0x1e0>)
60001408:	2208      	movs	r2, #8
6000140a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000140e:	4a75      	ldr	r2, [pc, #468]	; (600015e4 <ResetHandler2+0x1e4>)
60001410:	4b75      	ldr	r3, [pc, #468]	; (600015e8 <ResetHandler2+0x1e8>)
60001412:	429a      	cmp	r2, r3
60001414:	d00f      	beq.n	60001436 <ResetHandler2+0x36>
	while (dest < dest_end) {
60001416:	4b75      	ldr	r3, [pc, #468]	; (600015ec <ResetHandler2+0x1ec>)
60001418:	429a      	cmp	r2, r3
6000141a:	d20c      	bcs.n	60001436 <ResetHandler2+0x36>
6000141c:	1e58      	subs	r0, r3, #1
6000141e:	1a80      	subs	r0, r0, r2
60001420:	f020 0003 	bic.w	r0, r0, #3
60001424:	3004      	adds	r0, #4
60001426:	4b70      	ldr	r3, [pc, #448]	; (600015e8 <ResetHandler2+0x1e8>)
60001428:	4418      	add	r0, r3
		*dest++ = *src++;
6000142a:	f853 1b04 	ldr.w	r1, [r3], #4
6000142e:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
60001432:	4283      	cmp	r3, r0
60001434:	d1f9      	bne.n	6000142a <ResetHandler2+0x2a>
	if (dest == src) return;
60001436:	4a6e      	ldr	r2, [pc, #440]	; (600015f0 <ResetHandler2+0x1f0>)
60001438:	4b6e      	ldr	r3, [pc, #440]	; (600015f4 <ResetHandler2+0x1f4>)
6000143a:	429a      	cmp	r2, r3
6000143c:	d010      	beq.n	60001460 <ResetHandler2+0x60>
	while (dest < dest_end) {
6000143e:	4b6e      	ldr	r3, [pc, #440]	; (600015f8 <ResetHandler2+0x1f8>)
60001440:	429a      	cmp	r2, r3
60001442:	d20d      	bcs.n	60001460 <ResetHandler2+0x60>
60001444:	4a6a      	ldr	r2, [pc, #424]	; (600015f0 <ResetHandler2+0x1f0>)
60001446:	486d      	ldr	r0, [pc, #436]	; (600015fc <ResetHandler2+0x1fc>)
60001448:	1a80      	subs	r0, r0, r2
6000144a:	f020 0003 	bic.w	r0, r0, #3
6000144e:	3004      	adds	r0, #4
60001450:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <ResetHandler2+0x1f4>)
60001452:	4418      	add	r0, r3
		*dest++ = *src++;
60001454:	f853 1b04 	ldr.w	r1, [r3], #4
60001458:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
6000145c:	4283      	cmp	r3, r0
6000145e:	d1f9      	bne.n	60001454 <ResetHandler2+0x54>
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001460:	4a67      	ldr	r2, [pc, #412]	; (60001600 <ResetHandler2+0x200>)
60001462:	4b68      	ldr	r3, [pc, #416]	; (60001604 <ResetHandler2+0x204>)
60001464:	429a      	cmp	r2, r3
60001466:	d20b      	bcs.n	60001480 <ResetHandler2+0x80>
60001468:	4b65      	ldr	r3, [pc, #404]	; (60001600 <ResetHandler2+0x200>)
6000146a:	4a67      	ldr	r2, [pc, #412]	; (60001608 <ResetHandler2+0x208>)
6000146c:	1ad2      	subs	r2, r2, r3
6000146e:	f022 0203 	bic.w	r2, r2, #3
60001472:	3204      	adds	r2, #4
60001474:	441a      	add	r2, r3
		*dest++ = 0;
60001476:	2100      	movs	r1, #0
60001478:	f843 1b04 	str.w	r1, [r3], #4
	while (dest < dest_end) {
6000147c:	4293      	cmp	r3, r2
6000147e:	d1fb      	bne.n	60001478 <ResetHandler2+0x78>
	SCB_CPACR = 0x00F00000;
60001480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001484:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
60001488:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	2300      	movs	r3, #0
6000148e:	495f      	ldr	r1, [pc, #380]	; (6000160c <ResetHandler2+0x20c>)
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler2+0x210>)
60001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
60001496:	3301      	adds	r3, #1
60001498:	2bb0      	cmp	r3, #176	; 0xb0
6000149a:	d1fa      	bne.n	60001492 <ResetHandler2+0x92>
6000149c:	4b5d      	ldr	r3, [pc, #372]	; (60001614 <ResetHandler2+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149e:	2180      	movs	r1, #128	; 0x80
600014a0:	4a5d      	ldr	r2, [pc, #372]	; (60001618 <ResetHandler2+0x218>)
600014a2:	f803 1b01 	strb.w	r1, [r3], #1
600014a6:	4293      	cmp	r3, r2
600014a8:	d1fb      	bne.n	600014a2 <ResetHandler2+0xa2>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014aa:	4e58      	ldr	r6, [pc, #352]	; (6000160c <ResetHandler2+0x20c>)
600014ac:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014b0:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b4:	4d4a      	ldr	r5, [pc, #296]	; (600015e0 <ResetHandler2+0x1e0>)
600014b6:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014ba:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000164c <ResetHandler2+0x24c>
600014c2:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014c6:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ca:	f8df 9184 	ldr.w	r9, [pc, #388]	; 60001650 <ResetHandler2+0x250>
600014ce:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014da:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	4f4f      	ldr	r7, [pc, #316]	; (6000161c <ResetHandler2+0x21c>)
600014e0:	69fb      	ldr	r3, [r7, #28]
600014e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ea:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f6:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	4b49      	ldr	r3, [pc, #292]	; (60001620 <ResetHandler2+0x220>)
600014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014fe:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001500:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001502:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001504:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001506:	f000 f9e0 	bl	600018ca <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
6000150a:	4b46      	ldr	r3, [pc, #280]	; (60001624 <ResetHandler2+0x224>)
6000150c:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150e:	4b46      	ldr	r3, [pc, #280]	; (60001628 <ResetHandler2+0x228>)
60001510:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	2363      	movs	r3, #99	; 0x63
60001514:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
60001516:	2600      	movs	r6, #0
60001518:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151a:	2303      	movs	r3, #3
6000151c:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151e:	4b43      	ldr	r3, [pc, #268]	; (6000162c <ResetHandler2+0x22c>)
60001520:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001524:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
60001528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000152c:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001530:	4b3f      	ldr	r3, [pc, #252]	; (60001630 <ResetHandler2+0x230>)
60001532:	681a      	ldr	r2, [r3, #0]
60001534:	f042 0201 	orr.w	r2, r2, #1
60001538:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153a:	685a      	ldr	r2, [r3, #4]
6000153c:	4b3d      	ldr	r3, [pc, #244]	; (60001634 <ResetHandler2+0x234>)
6000153e:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001540:	f000 fb86 	bl	60001c50 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001544:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001548:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154c:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001550:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001554:	4838      	ldr	r0, [pc, #224]	; (60001638 <ResetHandler2+0x238>)
60001556:	f000 fcff 	bl	60001f58 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
6000155c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001560:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	4b36      	ldr	r3, [pc, #216]	; (6000163c <ResetHandler2+0x23c>)
60001564:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
60001566:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000156a:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001572:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001576:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
6000157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
6000157c:	f013 0f01 	tst.w	r3, #1
60001580:	d109      	bne.n	60001596 <ResetHandler2+0x196>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001582:	4b2f      	ldr	r3, [pc, #188]	; (60001640 <ResetHandler2+0x240>)
60001584:	4a2f      	ldr	r2, [pc, #188]	; (60001644 <ResetHandler2+0x244>)
60001586:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001588:	f642 6215 	movw	r2, #11797	; 0x2e15
6000158c:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000158e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001590:	f042 0201 	orr.w	r2, r2, #1
60001594:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001596:	4a2a      	ldr	r2, [pc, #168]	; (60001640 <ResetHandler2+0x240>)
60001598:	6893      	ldr	r3, [r2, #8]
6000159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000159e:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015a0:	f000 fa0c 	bl	600019bc <configure_external_ram>
	analog_init();
600015a4:	f000 f932 	bl	6000180c <analog_init>
	pwm_init();
600015a8:	f000 fcde 	bl	60001f68 <__pwm_init_veneer>
	tempmon_init();
600015ac:	f000 fb80 	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
600015b0:	f000 f987 	bl	600018c2 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b4:	4a24      	ldr	r2, [pc, #144]	; (60001648 <ResetHandler2+0x248>)
600015b6:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	2b13      	cmp	r3, #19
600015ba:	d9fc      	bls.n	600015b6 <ResetHandler2+0x1b6>
	usb_init();
600015bc:	f000 fc1c 	bl	60001df8 <usb_init>
600015c0:	4a21      	ldr	r2, [pc, #132]	; (60001648 <ResetHandler2+0x248>)
600015c2:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015c8:	d3fb      	bcc.n	600015c2 <ResetHandler2+0x1c2>
	startup_debug_reset();
600015ca:	f000 f97c 	bl	600018c6 <startup_debug_reset>
	startup_late_hook();
600015ce:	f000 f979 	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015d2:	f000 fcd5 	bl	60001f80 <____libc_init_array_veneer>
	main();
600015d6:	f000 fcbb 	bl	60001f50 <__main_veneer>
	while (1) asm("WFI");
600015da:	bf30      	wfi
600015dc:	e7fd      	b.n	600015da <ResetHandler2+0x1da>
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00000000 	.word	0x00000000
600015e8:	600021a8 	.word	0x600021a8
600015ec:	000151a8 	.word	0x000151a8
600015f0:	20000000 	.word	0x20000000
600015f4:	60017354 	.word	0x60017354
600015f8:	20003ec0 	.word	0x20003ec0
600015fc:	20003ebf 	.word	0x20003ebf
60001600:	20003ec0 	.word	0x20003ec0
60001604:	20005380 	.word	0x20005380
60001608:	2000537f 	.word	0x2000537f
6000160c:	20003c00 	.word	0x20003c00
60001610:	0000da4d 	.word	0x0000da4d
60001614:	e000e400 	.word	0xe000e400
60001618:	e000e4a0 	.word	0xe000e4a0
6000161c:	400fc000 	.word	0x400fc000
60001620:	400ac000 	.word	0x400ac000
60001624:	0000bc75 	.word	0x0000bc75
60001628:	0000bc7d 	.word	0x0000bc7d
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	200052ec 	.word	0x200052ec
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	200052f0 	.word	0x200052f0
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001654:	4b07      	ldr	r3, [pc, #28]	; (60001674 <ResetHandler+0x20>)
60001656:	4a08      	ldr	r2, [pc, #32]	; (60001678 <ResetHandler+0x24>)
60001658:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000165a:	4a08      	ldr	r2, [pc, #32]	; (6000167c <ResetHandler+0x28>)
6000165c:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165e:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
60001662:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001664:	4b06      	ldr	r3, [pc, #24]	; (60001680 <ResetHandler+0x2c>)
60001666:	469d      	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
60001668:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000166c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001670:	f7ff fec6 	bl	60001400 <ResetHandler2>
60001674:	400ac000 	.word	0x400ac000
60001678:	aaaaaabf 	.word	0xaaaaaabf
6000167c:	00200007 	.word	0x00200007
60001680:	20068000 	.word	0x20068000

60001684 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
60001684:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	4a0f      	ldr	r2, [pc, #60]	; (600016c4 <TwoWire::configSDApin(unsigned char)+0x40>)
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000168e:	7a1b      	ldrb	r3, [r3, #8]
60001690:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001694:	689b      	ldr	r3, [r3, #8]
60001696:	4c0c      	ldr	r4, [pc, #48]	; (600016c8 <TwoWire::configSDApin(unsigned char)+0x44>)
60001698:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000169a:	6943      	ldr	r3, [r0, #20]
6000169c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016a0:	f893 c008 	ldrb.w	ip, [r3, #8]
600016a4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016a8:	6852      	ldr	r2, [r2, #4]
600016aa:	68db      	ldr	r3, [r3, #12]
600016ac:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ae:	6943      	ldr	r3, [r0, #20]
600016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016b4:	690b      	ldr	r3, [r1, #16]
600016b6:	b10b      	cbz	r3, 600016bc <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016b8:	694a      	ldr	r2, [r1, #20]
600016ba:	601a      	str	r2, [r3, #0]
	}
}
600016bc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016c0:	4770      	bx	lr
600016c2:	bf00      	nop
600016c4:	200026e8 	.word	0x200026e8
600016c8:	0001f861 	.word	0x0001f861

600016cc <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016cc:	b538      	push	{r3, r4, r5, lr}
600016ce:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016d0:	6943      	ldr	r3, [r0, #20]
600016d2:	7e02      	ldrb	r2, [r0, #24]
600016d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016d8:	7a10      	ldrb	r0, [r2, #8]
600016da:	4288      	cmp	r0, r1
600016dc:	d009      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016de:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016e0:	2aff      	cmp	r2, #255	; 0xff
600016e2:	d006      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016e4:	4291      	cmp	r1, r2
600016e6:	d007      	beq.n	600016f8 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016e8:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
600016ea:	2aff      	cmp	r2, #255	; 0xff
600016ec:	d001      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016ee:	428a      	cmp	r2, r1
600016f0:	d000      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x28>
}
600016f2:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016f4:	2501      	movs	r5, #1
600016f6:	e000      	b.n	600016fa <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
600016f8:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016fa:	681a      	ldr	r2, [r3, #0]
600016fc:	6812      	ldr	r2, [r2, #0]
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	421a      	tst	r2, r3
60001702:	d101      	bne.n	60001708 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001704:	7625      	strb	r5, [r4, #24]
60001706:	e7f4      	b.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001708:	4b05      	ldr	r3, [pc, #20]	; (60001720 <TwoWire::setSDA(unsigned char)+0x54>)
6000170a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000170e:	685b      	ldr	r3, [r3, #4]
60001710:	2205      	movs	r2, #5
60001712:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001714:	4629      	mov	r1, r5
60001716:	4620      	mov	r0, r4
60001718:	f7ff ffb4 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
6000171c:	e7f2      	b.n	60001704 <TwoWire::setSDA(unsigned char)+0x38>
6000171e:	bf00      	nop
60001720:	200026e8 	.word	0x200026e8

60001724 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001724:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001726:	4a0f      	ldr	r2, [pc, #60]	; (60001764 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
60001732:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001736:	689b      	ldr	r3, [r3, #8]
60001738:	4c0b      	ldr	r4, [pc, #44]	; (60001768 <TwoWire::configSCLpin(unsigned char)+0x44>)
6000173a:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000173c:	6943      	ldr	r3, [r0, #20]
6000173e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
60001742:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001746:	eb02 120c 	add.w	r2, r2, ip, lsl #4
6000174a:	6852      	ldr	r2, [r2, #4]
6000174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000174e:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001750:	6943      	ldr	r3, [r0, #20]
60001752:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001758:	b10b      	cbz	r3, 6000175e <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000175a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
6000175c:	601a      	str	r2, [r3, #0]
	}
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001762:	4770      	bx	lr
60001764:	200026e8 	.word	0x200026e8
60001768:	0001f861 	.word	0x0001f861

6000176c <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000176c:	b538      	push	{r3, r4, r5, lr}
6000176e:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001770:	6943      	ldr	r3, [r0, #20]
60001772:	7e42      	ldrb	r2, [r0, #25]
60001774:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001778:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
6000177c:	4288      	cmp	r0, r1
6000177e:	d00b      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001780:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001784:	2aff      	cmp	r2, #255	; 0xff
60001786:	d007      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001788:	4291      	cmp	r1, r2
6000178a:	d008      	beq.n	6000179e <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
60001790:	2aff      	cmp	r2, #255	; 0xff
60001792:	d001      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001794:	428a      	cmp	r2, r1
60001796:	d000      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x2e>
}
60001798:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000179a:	2501      	movs	r5, #1
6000179c:	e000      	b.n	600017a0 <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
6000179e:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a0:	681a      	ldr	r2, [r3, #0]
600017a2:	6812      	ldr	r2, [r2, #0]
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	421a      	tst	r2, r3
600017a8:	d101      	bne.n	600017ae <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017aa:	7665      	strb	r5, [r4, #25]
600017ac:	e7f4      	b.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	4b05      	ldr	r3, [pc, #20]	; (600017c4 <TwoWire::setSCL(unsigned char)+0x58>)
600017b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	2205      	movs	r2, #5
600017b8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017ba:	4629      	mov	r1, r5
600017bc:	4620      	mov	r0, r4
600017be:	f7ff ffb1 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
600017c2:	e7f2      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x3e>
600017c4:	200026e8 	.word	0x200026e8

600017c8 <TwoWire::begin()>:
{
600017c8:	b510      	push	{r4, lr}
600017ca:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	4a0d      	ldr	r2, [pc, #52]	; (60001804 <TwoWire::begin()+0x3c>)
600017ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
600017d0:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600017d8:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6941      	ldr	r1, [r0, #20]
600017dc:	680a      	ldr	r2, [r1, #0]
600017de:	6813      	ldr	r3, [r2, #0]
600017e0:	6849      	ldr	r1, [r1, #4]
600017e2:	430b      	orrs	r3, r1
600017e4:	6013      	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017e6:	6903      	ldr	r3, [r0, #16]
600017e8:	2202      	movs	r2, #2
600017ea:	611a      	str	r2, [r3, #16]
	setClock(100000);
600017ec:	4906      	ldr	r1, [pc, #24]	; (60001808 <TwoWire::begin()+0x40>)
600017ee:	f000 fbab 	bl	60001f48 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017f2:	7e21      	ldrb	r1, [r4, #24]
600017f4:	4620      	mov	r0, r4
600017f6:	f7ff ff45 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017fa:	7e61      	ldrb	r1, [r4, #25]
600017fc:	4620      	mov	r0, r4
600017fe:	f7ff ff91 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
}
60001802:	bd10      	pop	{r4, pc}
60001804:	400fc000 	.word	0x400fc000
60001808:	000186a0 	.word	0x000186a0

6000180c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000180c:	4b11      	ldr	r3, [pc, #68]	; (60001854 <analog_init+0x48>)
6000180e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001810:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001814:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001818:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000181c:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000181e:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
60001822:	f240 6237 	movw	r2, #1591	; 0x637
60001826:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001828:	22a0      	movs	r2, #160	; 0xa0
6000182a:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000182c:	461a      	mov	r2, r3
6000182e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001830:	f013 0f80 	tst.w	r3, #128	; 0x80
60001834:	d1fb      	bne.n	6000182e <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001836:	4b08      	ldr	r3, [pc, #32]	; (60001858 <analog_init+0x4c>)
60001838:	f240 6237 	movw	r2, #1591	; 0x637
6000183c:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000183e:	22a0      	movs	r2, #160	; 0xa0
60001840:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001842:	461a      	mov	r2, r3
60001844:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001846:	f013 0f80 	tst.w	r3, #128	; 0x80
6000184a:	d1fb      	bne.n	60001844 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
6000184c:	4b03      	ldr	r3, [pc, #12]	; (6000185c <analog_init+0x50>)
6000184e:	2200      	movs	r2, #0
60001850:	701a      	strb	r2, [r3, #0]
}
60001852:	4770      	bx	lr
60001854:	400fc000 	.word	0x400fc000
60001858:	400c8000 	.word	0x400c8000
6000185c:	20005331 	.word	0x20005331

60001860 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001860:	4b09      	ldr	r3, [pc, #36]	; (60001888 <flexspi2_command+0x28>)
60001862:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001866:	0400      	lsls	r0, r0, #16
60001868:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
6000186c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001870:	2201      	movs	r2, #1
60001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001876:	461a      	mov	r2, r3
60001878:	6953      	ldr	r3, [r2, #20]
6000187a:	f013 0f01 	tst.w	r3, #1
6000187e:	d0fb      	beq.n	60001878 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001880:	4b01      	ldr	r3, [pc, #4]	; (60001888 <flexspi2_command+0x28>)
60001882:	2201      	movs	r2, #1
60001884:	615a      	str	r2, [r3, #20]
}
60001886:	4770      	bx	lr
60001888:	402a4000 	.word	0x402a4000

6000188c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000188c:	4b0a      	ldr	r3, [pc, #40]	; (600018b8 <flexspi2_psram_id+0x2c>)
6000188e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001892:	4a0a      	ldr	r2, [pc, #40]	; (600018bc <flexspi2_psram_id+0x30>)
60001894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001898:	2201      	movs	r2, #1
6000189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000189e:	461a      	mov	r2, r3
600018a0:	6953      	ldr	r3, [r2, #20]
600018a2:	f013 0f01 	tst.w	r3, #1
600018a6:	d0fb      	beq.n	600018a0 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
600018a8:	4b03      	ldr	r3, [pc, #12]	; (600018b8 <flexspi2_psram_id+0x2c>)
600018aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600018ae:	2221      	movs	r2, #33	; 0x21
600018b0:	615a      	str	r2, [r3, #20]
}
600018b2:	b280      	uxth	r0, r0
600018b4:	4770      	bx	lr
600018b6:	bf00      	nop
600018b8:	402a4000 	.word	0x402a4000
600018bc:	00030004 	.word	0x00030004

600018c0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018c0:	4770      	bx	lr

600018c2 <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
600018c2:	4770      	bx	lr

600018c4 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	4770      	bx	lr

600018c6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018c6:	bf00      	nop
600018c8:	4770      	bx	lr

600018ca <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018ce:	2100      	movs	r1, #0
600018d0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	2210      	movs	r2, #16
600018d6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018da:	4a28      	ldr	r2, [pc, #160]	; (6000197c <configure_cache+0xb2>)
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018e0:	2211      	movs	r2, #17
600018e2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018e6:	4a26      	ldr	r2, [pc, #152]	; (60001980 <configure_cache+0xb6>)
600018e8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018ec:	2212      	movs	r2, #18
600018ee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018f2:	4a24      	ldr	r2, [pc, #144]	; (60001984 <configure_cache+0xba>)
600018f4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018f8:	4a23      	ldr	r2, [pc, #140]	; (60001988 <configure_cache+0xbe>)
600018fa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018fe:	4a23      	ldr	r2, [pc, #140]	; (6000198c <configure_cache+0xc2>)
60001900:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001904:	4a22      	ldr	r2, [pc, #136]	; (60001990 <configure_cache+0xc6>)
60001906:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000190a:	4a22      	ldr	r2, [pc, #136]	; (60001994 <configure_cache+0xca>)
6000190c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001910:	4a21      	ldr	r2, [pc, #132]	; (60001998 <configure_cache+0xce>)
60001912:	f042 0215 	orr.w	r2, r2, #21
60001916:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000191a:	4a20      	ldr	r2, [pc, #128]	; (6000199c <configure_cache+0xd2>)
6000191c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001920:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
60001924:	320d      	adds	r2, #13
60001926:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000192a:	4a1d      	ldr	r2, [pc, #116]	; (600019a0 <configure_cache+0xd6>)
6000192c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001930:	4a1c      	ldr	r2, [pc, #112]	; (600019a4 <configure_cache+0xda>)
60001932:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001936:	4a1c      	ldr	r2, [pc, #112]	; (600019a8 <configure_cache+0xde>)
60001938:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000193c:	4a1b      	ldr	r2, [pc, #108]	; (600019ac <configure_cache+0xe2>)
6000193e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001942:	4a1b      	ldr	r2, [pc, #108]	; (600019b0 <configure_cache+0xe6>)
60001944:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001948:	4a1a      	ldr	r2, [pc, #104]	; (600019b4 <configure_cache+0xea>)
6000194a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000194e:	4a1a      	ldr	r2, [pc, #104]	; (600019b8 <configure_cache+0xee>)
60001950:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001954:	2201      	movs	r2, #1
60001956:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000195a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000195e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001962:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000196e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60001972:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001976:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000197a:	4770      	bx	lr
6000197c:	1000003f 	.word	0x1000003f
60001980:	03080025 	.word	0x03080025
60001984:	00100009 	.word	0x00100009
60001988:	00200013 	.word	0x00200013
6000198c:	07020021 	.word	0x07020021
60001990:	20000014 	.word	0x20000014
60001994:	13080025 	.word	0x13080025
60001998:	20005380 	.word	0x20005380
6000199c:	10000009 	.word	0x10000009
600019a0:	130b0027 	.word	0x130b0027
600019a4:	40000017 	.word	0x40000017
600019a8:	13100033 	.word	0x13100033
600019ac:	60000018 	.word	0x60000018
600019b0:	070b002f 	.word	0x070b002f
600019b4:	70000019 	.word	0x70000019
600019b8:	130b002f 	.word	0x130b002f

600019bc <configure_external_ram>:
{
600019bc:	b510      	push	{r4, lr}
600019be:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019c0:	4b8c      	ldr	r3, [pc, #560]	; (60001bf4 <configure_external_ram+0x238>)
600019c2:	4a8d      	ldr	r2, [pc, #564]	; (60001bf8 <configure_external_ram+0x23c>)
600019c4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019c8:	498c      	ldr	r1, [pc, #560]	; (60001bfc <configure_external_ram+0x240>)
600019ca:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600019d2:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
600019d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019da:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
600019de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019ea:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019ee:	2218      	movs	r2, #24
600019f0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019f2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019f4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019f6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019f8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
60001a0a:	2201      	movs	r2, #1
60001a0c:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a10:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a14:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a18:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a1c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a20:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a24:	4b76      	ldr	r3, [pc, #472]	; (60001c00 <configure_external_ram+0x244>)
60001a26:	699a      	ldr	r2, [r3, #24]
60001a28:	4976      	ldr	r1, [pc, #472]	; (60001c04 <configure_external_ram+0x248>)
60001a2a:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a2c:	4a76      	ldr	r2, [pc, #472]	; (60001c08 <configure_external_ram+0x24c>)
60001a2e:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a30:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
60001a36:	f042 020c 	orr.w	r2, r2, #12
60001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a3e:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
60001a42:	681a      	ldr	r2, [r3, #0]
60001a44:	f042 0202 	orr.w	r2, r2, #2
60001a48:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a4a:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a4c:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
60001a50:	f021 0173 	bic.w	r1, r1, #115	; 0x73
60001a54:	0409      	lsls	r1, r1, #16
60001a56:	0c09      	lsrs	r1, r1, #16
60001a58:	4a6c      	ldr	r2, [pc, #432]	; (60001c0c <configure_external_ram+0x250>)
60001a5a:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a5c:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60001a62:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a64:	496a      	ldr	r1, [pc, #424]	; (60001c10 <configure_external_ram+0x254>)
60001a66:	6888      	ldr	r0, [r1, #8]
60001a68:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60001a6c:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60001a70:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a76:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a78:	68da      	ldr	r2, [r3, #12]
60001a7a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60001a7e:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a80:	6a1a      	ldr	r2, [r3, #32]
60001a82:	4c64      	ldr	r4, [pc, #400]	; (60001c14 <configure_external_ram+0x258>)
60001a84:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a86:	4864      	ldr	r0, [pc, #400]	; (60001c18 <configure_external_ram+0x25c>)
60001a88:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8a:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8c:	6a1a      	ldr	r2, [r3, #32]
60001a8e:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a90:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a92:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a94:	4a61      	ldr	r2, [pc, #388]	; (60001c1c <configure_external_ram+0x260>)
60001a96:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a9a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60001a9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001aa2:	f042 0201 	orr.w	r2, r2, #1
60001aa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aaa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60001aae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001ab2:	f042 0201 	orr.w	r2, r2, #1
60001ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001aba:	2200      	movs	r2, #0
60001abc:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
60001ac2:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ac4:	4956      	ldr	r1, [pc, #344]	; (60001c20 <configure_external_ram+0x264>)
60001ac6:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ac8:	f240 6205 	movw	r2, #1541	; 0x605
60001acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001ad0:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001ad8:	681a      	ldr	r2, [r3, #0]
60001ada:	f022 0202 	bic.w	r2, r2, #2
60001ade:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ae0:	4a50      	ldr	r2, [pc, #320]	; (60001c24 <configure_external_ram+0x268>)
60001ae2:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ae4:	2202      	movs	r2, #2
60001ae6:	61da      	str	r2, [r3, #28]
60001ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001aec:	2100      	movs	r1, #0
60001aee:	4a4e      	ldr	r2, [pc, #312]	; (60001c28 <configure_external_ram+0x26c>)
60001af0:	f843 1b04 	str.w	r1, [r3], #4
60001af4:	4293      	cmp	r3, r2
60001af6:	d1fb      	bne.n	60001af0 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001af8:	4a4c      	ldr	r2, [pc, #304]	; (60001c2c <configure_external_ram+0x270>)
60001afa:	6813      	ldr	r3, [r2, #0]
60001afc:	f043 0301 	orr.w	r3, r3, #1
60001b00:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b02:	6813      	ldr	r3, [r2, #0]
60001b04:	f013 0f01 	tst.w	r3, #1
60001b08:	d1fb      	bne.n	60001b02 <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	4b48      	ldr	r3, [pc, #288]	; (60001c2c <configure_external_ram+0x270>)
60001b0c:	4a45      	ldr	r2, [pc, #276]	; (60001c24 <configure_external_ram+0x268>)
60001b0e:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
60001b12:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b14:	f240 62f5 	movw	r2, #1781	; 0x6f5
60001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b1c:	f240 4266 	movw	r2, #1126	; 0x466
60001b20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b24:	f240 4299 	movw	r2, #1177	; 0x499
60001b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b2c:	4a40      	ldr	r2, [pc, #256]	; (60001c30 <configure_external_ram+0x274>)
60001b2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b32:	f242 4201 	movw	r2, #9217	; 0x2401
60001b36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b3a:	f240 4235 	movw	r2, #1077	; 0x435
60001b3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b42:	4a3c      	ldr	r2, [pc, #240]	; (60001c34 <configure_external_ram+0x278>)
60001b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b48:	4a3b      	ldr	r2, [pc, #236]	; (60001c38 <configure_external_ram+0x27c>)
60001b4a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b4e:	4a3b      	ldr	r2, [pc, #236]	; (60001c3c <configure_external_ram+0x280>)
60001b50:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b54:	f242 2201 	movw	r2, #8705	; 0x2201
60001b58:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b5c:	2100      	movs	r1, #0
60001b5e:	4608      	mov	r0, r1
60001b60:	f7ff fe7e 	bl	60001860 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b64:	2100      	movs	r1, #0
60001b66:	2001      	movs	r0, #1
60001b68:	f7ff fe7a 	bl	60001860 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b6c:	2100      	movs	r1, #0
60001b6e:	4620      	mov	r0, r4
60001b70:	f7ff fe76 	bl	60001860 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b74:	2000      	movs	r0, #0
60001b76:	f7ff fe89 	bl	6000188c <flexspi2_psram_id>
60001b7a:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001b7e:	4298      	cmp	r0, r3
60001b80:	d007      	beq.n	60001b92 <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b82:	4b2f      	ldr	r3, [pc, #188]	; (60001c40 <configure_external_ram+0x284>)
60001b84:	2200      	movs	r2, #0
60001b86:	601a      	str	r2, [r3, #0]
60001b88:	605a      	str	r2, [r3, #4]
60001b8a:	609a      	str	r2, [r3, #8]
60001b8c:	60da      	str	r2, [r3, #12]
}
60001b8e:	b002      	add	sp, #8
60001b90:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
60001b92:	2100      	movs	r1, #0
60001b94:	2004      	movs	r0, #4
60001b96:	f7ff fe63 	bl	60001860 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b9a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001b9e:	2000      	movs	r0, #0
60001ba0:	f7ff fe5e 	bl	60001860 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001ba8:	2001      	movs	r0, #1
60001baa:	f7ff fe59 	bl	60001860 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001bae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bb2:	4620      	mov	r0, r4
60001bb4:	f7ff fe54 	bl	60001860 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60001bbc:	f7ff fe66 	bl	6000188c <flexspi2_psram_id>
60001bc0:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001bc4:	4298      	cmp	r0, r3
60001bc6:	d00e      	beq.n	60001be6 <configure_external_ram+0x22a>
60001bc8:	2008      	movs	r0, #8
			external_psram_size = 16;
60001bca:	4b1e      	ldr	r3, [pc, #120]	; (60001c44 <configure_external_ram+0x288>)
60001bcc:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60001bce:	491e      	ldr	r1, [pc, #120]	; (60001c48 <configure_external_ram+0x28c>)
60001bd0:	4a1e      	ldr	r2, [pc, #120]	; (60001c4c <configure_external_ram+0x290>)
60001bd2:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd4:	2300      	movs	r3, #0
60001bd6:	9300      	str	r3, [sp, #0]
60001bd8:	2301      	movs	r3, #1
60001bda:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60001bde:	4818      	ldr	r0, [pc, #96]	; (60001c40 <configure_external_ram+0x284>)
60001be0:	f000 f9be 	bl	60001f60 <__sm_set_pool_veneer>
60001be4:	e7d3      	b.n	60001b8e <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
60001be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bea:	2004      	movs	r0, #4
60001bec:	f7ff fe38 	bl	60001860 <flexspi2_command>
			external_psram_size = 16;
60001bf0:	2010      	movs	r0, #16
60001bf2:	e7ea      	b.n	60001bca <configure_external_ram+0x20e>
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	400fc000 	.word	0x400fc000
60001c04:	1ffffcff 	.word	0x1ffffcff
60001c08:	a0000300 	.word	0xa0000300
60001c0c:	ffff0012 	.word	0xffff0012
60001c10:	402a8000 	.word	0x402a8000
60001c14:	7cf0ff00 	.word	0x7cf0ff00
60001c18:	80000040 	.word	0x80000040
60001c1c:	830f00ff 	.word	0x830f00ff
60001c20:	00020063 	.word	0x00020063
60001c24:	5af05af0 	.word	0x5af05af0
60001c28:	402a4300 	.word	0x402a4300
60001c2c:	402a4000 	.word	0x402a4000
60001c30:	3018049f 	.word	0x3018049f
60001c34:	0a1806eb 	.word	0x0a1806eb
60001c38:	26013206 	.word	0x26013206
60001c3c:	0a180638 	.word	0x0a180638
60001c40:	20005000 	.word	0x20005000
60001c44:	20005334 	.word	0x20005334
60001c48:	70000000 	.word	0x70000000
60001c4c:	70000000 	.word	0x70000000

60001c50 <usb_pll_start>:
{
60001c50:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c52:	4a16      	ldr	r2, [pc, #88]	; (60001cac <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c54:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	f243 0042 	movw	r0, #12354	; 0x3042
60001c6a:	e002      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c6e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c70:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c74:	f013 0f02 	tst.w	r3, #2
60001c78:	d1f8      	bne.n	60001c6c <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c7e:	d00c      	beq.n	60001c9a <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c84:	d00b      	beq.n	60001c9e <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c86:	2b00      	cmp	r3, #0
60001c88:	daf3      	bge.n	60001c72 <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c8e:	d108      	bne.n	60001ca2 <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
60001c94:	d007      	beq.n	60001ca6 <usb_pll_start+0x56>
}
60001c96:	bcf0      	pop	{r4, r5, r6, r7}
60001c98:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c9a:	6155      	str	r5, [r2, #20]
			continue;
60001c9c:	e7e9      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	6156      	str	r6, [r2, #20]
			continue;
60001ca0:	e7e7      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ca2:	6191      	str	r1, [r2, #24]
			continue;
60001ca4:	e7e5      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca6:	6157      	str	r7, [r2, #20]
			continue;
60001ca8:	e7e3      	b.n	60001c72 <usb_pll_start+0x22>
60001caa:	bf00      	nop
60001cac:	400d8000 	.word	0x400d8000

60001cb0 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cb0:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb2:	4b45      	ldr	r3, [pc, #276]	; (60001dc8 <tempmon_init+0x118>)
60001cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001cb8:	f022 0201 	bic.w	r2, r2, #1
60001cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc0:	2203      	movs	r2, #3
60001cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc6:	4a41      	ldr	r2, [pc, #260]	; (60001dcc <tempmon_init+0x11c>)
60001cc8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ccc:	b2d1      	uxtb	r1, r2
60001cce:	4c40      	ldr	r4, [pc, #256]	; (60001dd0 <tempmon_init+0x120>)
60001cd0:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd2:	f3c2 200b 	ubfx	r0, r2, #8, #12
60001cd6:	4d3f      	ldr	r5, [pc, #252]	; (60001dd4 <tempmon_init+0x124>)
60001cd8:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cda:	ee07 1a90 	vmov	s15, r1
60001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
60001ce2:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
60001ce6:	ee37 6a64 	vsub.f32	s12, s14, s9
60001cea:	493b      	ldr	r1, [pc, #236]	; (60001dd8 <tempmon_init+0x128>)
60001cec:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cf0:	ee07 0a90 	vmov	s15, r0
60001cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf8:	0d12      	lsrs	r2, r2, #20
60001cfa:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d02:	ee77 7ae6 	vsub.f32	s15, s15, s13
60001d06:	4835      	ldr	r0, [pc, #212]	; (60001ddc <tempmon_init+0x12c>)
60001d08:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 60001de0 <tempmon_init+0x130>
60001d14:	ee37 7a65 	vsub.f32	s14, s14, s11
60001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
60001d1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
60001d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
60001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d28:	ee17 ca90 	vmov	ip, s15
60001d2c:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
60001d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	ed95 6a00 	vldr	s12, [r5]
60001d38:	eeb8 6a46 	vcvt.f32.u32	s12, s12
60001d3c:	edd4 7a00 	vldr	s15, [r4]
60001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d44:	ed90 5a00 	vldr	s10, [r0]
60001d48:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	eddf 6a24 	vldr	s13, [pc, #144]	; 60001de4 <tempmon_init+0x134>
60001d54:	ee77 6ae6 	vsub.f32	s13, s15, s13
60001d58:	ee66 6a85 	vmul.f32	s13, s13, s10
60001d5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
60001d60:	ee37 7a06 	vadd.f32	s14, s14, s12
60001d64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	4a1f      	ldr	r2, [pc, #124]	; (60001de8 <tempmon_init+0x138>)
60001d6a:	ee17 0a10 	vmov	r0, s14
60001d6e:	ea02 4200 	and.w	r2, r2, r0, lsl #16
60001d72:	430a      	orrs	r2, r1
60001d74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d78:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
60001d80:	ee27 7a85 	vmul.f32	s14, s15, s10
60001d84:	eec7 7a25 	vdiv.f32	s15, s14, s11
60001d88:	ee77 7a86 	vadd.f32	s15, s15, s12
60001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60001d90:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d94:	f3c2 020b 	ubfx	r2, r2, #0, #12
60001d98:	430a      	orrs	r2, r1
60001d9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001da2:	f042 0202 	orr.w	r2, r2, #2
60001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001daa:	4b10      	ldr	r3, [pc, #64]	; (60001dec <tempmon_init+0x13c>)
60001dac:	2200      	movs	r2, #0
60001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001db2:	4b0f      	ldr	r3, [pc, #60]	; (60001df0 <tempmon_init+0x140>)
60001db4:	4a0f      	ldr	r2, [pc, #60]	; (60001df4 <tempmon_init+0x144>)
60001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dbe:	2201      	movs	r2, #1
60001dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dc4:	bc30      	pop	{r4, r5}
60001dc6:	4770      	bx	lr
60001dc8:	400d8100 	.word	0x400d8100
60001dcc:	401f4400 	.word	0x401f4400
60001dd0:	20005154 	.word	0x20005154
60001dd4:	20005150 	.word	0x20005150
60001dd8:	20005158 	.word	0x20005158
60001ddc:	2000515c 	.word	0x2000515c
60001de0:	42aa0000 	.word	0x42aa0000
60001de4:	42b40000 	.word	0x42b40000
60001de8:	0fff0000 	.word	0x0fff0000
60001dec:	e000e400 	.word	0xe000e400
60001df0:	20003c00 	.word	0x20003c00
60001df4:	0000dc2b 	.word	0x0000dc2b

60001df8 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001df8:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001dfa:	4b32      	ldr	r3, [pc, #200]	; (60001ec4 <usb_init+0xcc>)
60001dfc:	f640 7261 	movw	r2, #3937	; 0xf61
60001e00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001e04:	f000 f8b8 	bl	60001f78 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e08:	4a2f      	ldr	r2, [pc, #188]	; (60001ec8 <usb_init+0xd0>)
60001e0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e0e:	f043 0303 	orr.w	r3, r3, #3
60001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e16:	4b2d      	ldr	r3, [pc, #180]	; (60001ecc <usb_init+0xd4>)
60001e18:	f240 4204 	movw	r2, #1028	; 0x404
60001e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e20:	4b2b      	ldr	r3, [pc, #172]	; (60001ed0 <usb_init+0xd8>)
60001e22:	681a      	ldr	r2, [r3, #0]
60001e24:	4b2b      	ldr	r3, [pc, #172]	; (60001ed4 <usb_init+0xdc>)
60001e26:	421a      	tst	r2, r3
60001e28:	d105      	bne.n	60001e36 <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e2a:	4b28      	ldr	r3, [pc, #160]	; (60001ecc <usb_init+0xd4>)
60001e2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
60001e30:	f013 0f03 	tst.w	r3, #3
60001e34:	d01c      	beq.n	60001e70 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e36:	4b26      	ldr	r3, [pc, #152]	; (60001ed0 <usb_init+0xd8>)
60001e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e3c:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e3e:	4a23      	ldr	r2, [pc, #140]	; (60001ecc <usb_init+0xd4>)
60001e40:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e44:	f043 0302 	orr.w	r3, r3, #2
60001e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e4c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e50:	f013 0f02 	tst.w	r3, #2
60001e54:	d1fa      	bne.n	60001e4c <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001e5e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e62:	4b1b      	ldr	r3, [pc, #108]	; (60001ed0 <usb_init+0xd8>)
60001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e68:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e6a:	2019      	movs	r0, #25
60001e6c:	f000 f880 	bl	60001f70 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e70:	4b17      	ldr	r3, [pc, #92]	; (60001ed0 <usb_init+0xd8>)
60001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
60001e76:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60001e78:	2100      	movs	r1, #0
60001e7a:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e7c:	4c13      	ldr	r4, [pc, #76]	; (60001ecc <usb_init+0xd4>)
60001e7e:	230a      	movs	r3, #10
60001e80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e84:	4d14      	ldr	r5, [pc, #80]	; (60001ed8 <usb_init+0xe0>)
60001e86:	f44f 7220 	mov.w	r2, #640	; 0x280
60001e8a:	4628      	mov	r0, r5
60001e8c:	f000 f87c 	bl	60001f88 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e90:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
60001e94:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60001e9a:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ea0:	f240 1343 	movw	r3, #323	; 0x143
60001ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60001ea8:	4b0c      	ldr	r3, [pc, #48]	; (60001edc <usb_init+0xe4>)
60001eaa:	4a0d      	ldr	r2, [pc, #52]	; (60001ee0 <usb_init+0xe8>)
60001eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ebc:	2301      	movs	r3, #1
60001ebe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ec2:	bd38      	pop	{r3, r4, r5, pc}
60001ec4:	400d8000 	.word	0x400d8000
60001ec8:	400fc000 	.word	0x400fc000
60001ecc:	402e0000 	.word	0x402e0000
60001ed0:	400d9000 	.word	0x400d9000
60001ed4:	001e1c00 	.word	0x001e1c00
60001ed8:	20000000 	.word	0x20000000
60001edc:	20003c00 	.word	0x20003c00
60001ee0:	0000df25 	.word	0x0000df25

60001ee4 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ee4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ee6:	4b0f      	ldr	r3, [pc, #60]	; (60001f24 <_reboot_Teensyduino_+0x40>)
60001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001eea:	f013 0f02 	tst.w	r3, #2
60001eee:	d100      	bne.n	60001ef2 <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001ef0:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ef2:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ef4:	4b0c      	ldr	r3, [pc, #48]	; (60001f28 <_reboot_Teensyduino_+0x44>)
60001ef6:	2200      	movs	r2, #0
60001ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001efc:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60001f00:	4a0a      	ldr	r2, [pc, #40]	; (60001f2c <_reboot_Teensyduino_+0x48>)
60001f02:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f04:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
60001f08:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
60001f0c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f0e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001f12:	4807      	ldr	r0, [pc, #28]	; (60001f30 <_reboot_Teensyduino_+0x4c>)
60001f14:	4b07      	ldr	r3, [pc, #28]	; (60001f34 <_reboot_Teensyduino_+0x50>)
60001f16:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
60001f1c:	69db      	ldr	r3, [r3, #28]
60001f1e:	689b      	ldr	r3, [r3, #8]
60001f20:	4798      	blx	r3
60001f22:	e7e6      	b.n	60001ef2 <_reboot_Teensyduino_+0xe>
60001f24:	401f4400 	.word	0x401f4400
60001f28:	402e0000 	.word	0x402e0000
60001f2c:	00200003 	.word	0x00200003
60001f30:	20208000 	.word	0x20208000
60001f34:	eb120000 	.word	0xeb120000

60001f38 <_init>:
60001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f3a:	bf00      	nop
60001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f3e:	bc08      	pop	{r3}
60001f40:	469e      	mov	lr, r3
60001f42:	4770      	bx	lr
60001f44:	0000      	movs	r0, r0
	...

60001f48 <___ZN7TwoWire8setClockEm_veneer>:
60001f48:	f85f f000 	ldr.w	pc, [pc]	; 60001f4c <___ZN7TwoWire8setClockEm_veneer+0x4>
60001f4c:	000044f9 	.word	0x000044f9

60001f50 <__main_veneer>:
60001f50:	f85f f000 	ldr.w	pc, [pc]	; 60001f54 <__main_veneer+0x4>
60001f54:	0000cfe1 	.word	0x0000cfe1

60001f58 <__set_arm_clock_veneer>:
60001f58:	f85f f000 	ldr.w	pc, [pc]	; 60001f5c <__set_arm_clock_veneer+0x4>
60001f5c:	0000cbd9 	.word	0x0000cbd9

60001f60 <__sm_set_pool_veneer>:
60001f60:	f85f f000 	ldr.w	pc, [pc]	; 60001f64 <__sm_set_pool_veneer+0x4>
60001f64:	0000ee2d 	.word	0x0000ee2d

60001f68 <__pwm_init_veneer>:
60001f68:	f85f f000 	ldr.w	pc, [pc]	; 60001f6c <__pwm_init_veneer+0x4>
60001f6c:	0000d9a1 	.word	0x0000d9a1

60001f70 <__delay_veneer>:
60001f70:	f85f f000 	ldr.w	pc, [pc]	; 60001f74 <__delay_veneer+0x4>
60001f74:	0000cec9 	.word	0x0000cec9

60001f78 <__usb_init_serialnumber_veneer>:
60001f78:	f85f f000 	ldr.w	pc, [pc]	; 60001f7c <__usb_init_serialnumber_veneer+0x4>
60001f7c:	0000e4ed 	.word	0x0000e4ed

60001f80 <____libc_init_array_veneer>:
60001f80:	f85f f000 	ldr.w	pc, [pc]	; 60001f84 <____libc_init_array_veneer+0x4>
60001f84:	00011241 	.word	0x00011241

60001f88 <__memset_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <__memset_veneer+0x4>
60001f8c:	00011185 	.word	0x00011185

60001f90 <__frame_dummy_init_array_entry>:
60001f90:	00000045 0000016d 000032d1 00004599     E...m....2...E..
60001fa0:	00004add 000052ed 0000c32d              .J...R..-...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
#endif
}

uint8_t PWMServo::attached()
{
	if (pin >= NUM_DIGITAL_PINS) return 0;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	return (attachedpins[pin >> 5] & (1 << (pin & 31))) ? 1 : 0;
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
      36:	4770      	bx	lr
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	20003ec0 	.word	0x20003ec0
      3c:	20003ec0 	.word	0x20003ec0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    }
  }
  return readStop();
 fail:
  return false;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	f3af 8000 	nop.w
	#define PID_FILTERING
	biquadFilter_init(&dTermFilter_roll, 100.0f, 2000.0f);
	biquadFilter_init(&dTermFilter_pitch, 100.0f, 2000.0f);
	biquadFilter_init(&dTermFilter_yaw, 100.0f, 2000.0f);
	#endif
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
  return false;
      60:	20005098 	.word	0x20005098
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( target == nullptr) return true;
      64:	6001c000 	.word	0x6001c000

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6c:	6900      	ldr	r0, [r0, #16]
      6e:	b120      	cbz	r0, 7a <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
      70:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
      72:	6803      	ldr	r3, [r0, #0]
      74:	68db      	ldr	r3, [r3, #12]
      76:	4798      	blx	r3
	}
      78:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
      7a:	2000      	movs	r0, #0
	}
      7c:	4770      	bx	lr

0000007e <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      7e:	6900      	ldr	r0, [r0, #16]
      80:	b120      	cbz	r0, 8c <File::available()+0xe>
	int available() {
      82:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
      84:	6803      	ldr	r3, [r0, #0]
      86:	691b      	ldr	r3, [r3, #16]
      88:	4798      	blx	r3
	}
      8a:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
      8c:	2000      	movs	r0, #0
	}
      8e:	4770      	bx	lr

00000090 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      90:	6900      	ldr	r0, [r0, #16]
      92:	b120      	cbz	r0, 9e <File::peek()+0xe>
	int peek() {
      94:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
      96:	6803      	ldr	r3, [r0, #0]
      98:	695b      	ldr	r3, [r3, #20]
      9a:	4798      	blx	r3
	}
      9c:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
      9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      a2:	4770      	bx	lr

000000a4 <File::flush()>:
	void flush() {
		if (f) f->flush();
      a4:	6900      	ldr	r0, [r0, #16]
      a6:	b120      	cbz	r0, b2 <File::flush()+0xe>
	void flush() {
      a8:	b508      	push	{r3, lr}
		if (f) f->flush();
      aa:	6803      	ldr	r3, [r0, #0]
      ac:	699b      	ldr	r3, [r3, #24]
      ae:	4798      	blx	r3
	}
      b0:	bd08      	pop	{r3, pc}
      b2:	4770      	bx	lr

000000b4 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
      b4:	6900      	ldr	r0, [r0, #16]
      b6:	b168      	cbz	r0, d4 <File::read()+0x20>
	int read() {
      b8:	b500      	push	{lr}
      ba:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
      bc:	6803      	ldr	r3, [r0, #0]
      be:	689b      	ldr	r3, [r3, #8]
      c0:	2201      	movs	r2, #1
      c2:	f10d 0107 	add.w	r1, sp, #7
      c6:	4798      	blx	r3
      c8:	b138      	cbz	r0, da <File::read()+0x26>
		return b;
      ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
      ce:	b003      	add	sp, #12
      d0:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
      d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      d8:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
      da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      de:	e7f6      	b.n	ce <File::read()+0x1a>

000000e0 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      e0:	b500      	push	{lr}
      e2:	b083      	sub	sp, #12
      e4:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      e8:	6900      	ldr	r0, [r0, #16]
      ea:	b140      	cbz	r0, fe <File::write(unsigned char)+0x1e>
      ec:	6803      	ldr	r3, [r0, #0]
      ee:	68db      	ldr	r3, [r3, #12]
      f0:	2201      	movs	r2, #1
      f2:	f10d 0107 	add.w	r1, sp, #7
      f6:	4798      	blx	r3
	}
      f8:	b003      	add	sp, #12
      fa:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
      fe:	2000      	movs	r0, #0
     100:	e7fa      	b.n	f8 <File::write(unsigned char)+0x18>
	...

00000104 <File::~File()>:
	virtual ~File() {
     104:	b510      	push	{r4, lr}
     106:	4604      	mov	r4, r0
     108:	4b0b      	ldr	r3, [pc, #44]	; (138 <File::~File()+0x34>)
     10a:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     10c:	6903      	ldr	r3, [r0, #16]
     10e:	b163      	cbz	r3, 12a <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     110:	685a      	ldr	r2, [r3, #4]
     112:	3a01      	subs	r2, #1
     114:	605a      	str	r2, [r3, #4]
     116:	b942      	cbnz	r2, 12a <File::~File()+0x26>
			f->close();
     118:	6900      	ldr	r0, [r0, #16]
     11a:	6803      	ldr	r3, [r0, #0]
     11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     11e:	4798      	blx	r3
			delete f;
     120:	6920      	ldr	r0, [r4, #16]
     122:	b110      	cbz	r0, 12a <File::~File()+0x26>
     124:	6803      	ldr	r3, [r0, #0]
     126:	685b      	ldr	r3, [r3, #4]
     128:	4798      	blx	r3
	}
     12a:	2114      	movs	r1, #20
     12c:	4620      	mov	r0, r4
     12e:	f00c fffd 	bl	d12c <operator delete(void*, unsigned int)>
     132:	4620      	mov	r0, r4
     134:	bd10      	pop	{r4, pc}
     136:	bf00      	nop
     138:	200022a4 	.word	0x200022a4

0000013c <File::~File()>:
	virtual ~File() {
     13c:	b510      	push	{r4, lr}
     13e:	4604      	mov	r4, r0
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <File::~File()+0x2c>)
     142:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     144:	6903      	ldr	r3, [r0, #16]
     146:	b163      	cbz	r3, 162 <File::~File()+0x26>
		if (--(f->refcount) == 0) {
     148:	685a      	ldr	r2, [r3, #4]
     14a:	3a01      	subs	r2, #1
     14c:	605a      	str	r2, [r3, #4]
     14e:	b942      	cbnz	r2, 162 <File::~File()+0x26>
			f->close();
     150:	6900      	ldr	r0, [r0, #16]
     152:	6803      	ldr	r3, [r0, #0]
     154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     156:	4798      	blx	r3
			delete f;
     158:	6920      	ldr	r0, [r4, #16]
     15a:	b110      	cbz	r0, 162 <File::~File()+0x26>
     15c:	6803      	ldr	r3, [r0, #0]
     15e:	685b      	ldr	r3, [r3, #4]
     160:	4798      	blx	r3
	}
     162:	4620      	mov	r0, r4
     164:	bd10      	pop	{r4, pc}
     166:	bf00      	nop
     168:	200022a4 	.word	0x200022a4

0000016c <_GLOBAL__sub_I_dt>:
bool doneWithSetup = 0;
int servoLoopCounter = 0;

// Number of loops before a sustained large change in values are accepted
int radioChCutoffTimeout = 10;
bool failureFlag = 0;
     16c:	b570      	push	{r4, r5, r6, lr}
String filePrefix = "flight_data";
     16e:	4e13      	ldr	r6, [pc, #76]	; (1bc <_GLOBAL__sub_I_dt+0x50>)
     170:	4913      	ldr	r1, [pc, #76]	; (1c0 <_GLOBAL__sub_I_dt+0x54>)
     172:	4630      	mov	r0, r6
     174:	f00c fbfd 	bl	c972 <String::String(char const*)>
     178:	4c12      	ldr	r4, [pc, #72]	; (1c4 <_GLOBAL__sub_I_dt+0x58>)
     17a:	4d13      	ldr	r5, [pc, #76]	; (1c8 <_GLOBAL__sub_I_dt+0x5c>)
     17c:	4622      	mov	r2, r4
     17e:	4629      	mov	r1, r5
     180:	4630      	mov	r0, r6
     182:	f010 fb8b 	bl	1089c <__aeabi_atexit>
String fileExtension = ".csv";
     186:	4e11      	ldr	r6, [pc, #68]	; (1cc <_GLOBAL__sub_I_dt+0x60>)
     188:	4911      	ldr	r1, [pc, #68]	; (1d0 <_GLOBAL__sub_I_dt+0x64>)
     18a:	4630      	mov	r0, r6
     18c:	f00c fbf1 	bl	c972 <String::String(char const*)>
     190:	4622      	mov	r2, r4
     192:	4629      	mov	r1, r5
     194:	4630      	mov	r0, r6
     196:	f010 fb81 	bl	1089c <__aeabi_atexit>
String fileName;
     19a:	4e0e      	ldr	r6, [pc, #56]	; (1d4 <_GLOBAL__sub_I_dt+0x68>)
     19c:	2100      	movs	r1, #0
     19e:	4630      	mov	r0, r6
     1a0:	f00c fbe7 	bl	c972 <String::String(char const*)>
     1a4:	4622      	mov	r2, r4
     1a6:	4629      	mov	r1, r5
     1a8:	4630      	mov	r0, r6
     1aa:	f010 fb77 	bl	1089c <__aeabi_atexit>
File dataFile;
     1ae:	4622      	mov	r2, r4
     1b0:	4909      	ldr	r1, [pc, #36]	; (1d8 <_GLOBAL__sub_I_dt+0x6c>)
     1b2:	480a      	ldr	r0, [pc, #40]	; (1dc <_GLOBAL__sub_I_dt+0x70>)
     1b4:	f010 fb72 	bl	1089c <__aeabi_atexit>
bool failureFlag = 0;
     1b8:	bd70      	pop	{r4, r5, r6, pc}
     1ba:	bf00      	nop
     1bc:	20005030 	.word	0x20005030
     1c0:	20001c98 	.word	0x20001c98
     1c4:	20003200 	.word	0x20003200
     1c8:	0000c8e1 	.word	0x0000c8e1
     1cc:	20005010 	.word	0x20005010
     1d0:	20001ca4 	.word	0x20001ca4
     1d4:	20005020 	.word	0x20005020
     1d8:	0000013d 	.word	0x0000013d
     1dc:	20003800 	.word	0x20003800

000001e0 <Print::flush()>:
	virtual void flush()				{ }
     1e0:	4770      	bx	lr

000001e2 <SDFile::available()>:
  operator bool() const {return isOpen();}
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
     1e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
     1e4:	b153      	cbz	r3, 1fc <SDFile::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     1e6:	781a      	ldrb	r2, [r3, #0]
     1e8:	f012 0f08 	tst.w	r2, #8
     1ec:	d020      	beq.n	230 <SDFile::available()+0x4e>
     1ee:	69d8      	ldr	r0, [r3, #28]
     1f0:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     1f2:	1ac0      	subs	r0, r0, r3
     1f4:	bf48      	it	mi
     1f6:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     1fa:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     1fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
     1fe:	b1cb      	cbz	r3, 234 <SDFile::available()+0x52>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     200:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     204:	f012 0f08 	tst.w	r2, #8
     208:	d016      	beq.n	238 <SDFile::available()+0x56>
		return sdfatfile.write(buf, size);
	}
	virtual int peek() {
		return sdfatfile.peek();
	}
	virtual int available() {
     20a:	b410      	push	{r4}
     20c:	691a      	ldr	r2, [r3, #16]
     20e:	6959      	ldr	r1, [r3, #20]
     210:	6818      	ldr	r0, [r3, #0]
     212:	685c      	ldr	r4, [r3, #4]
     214:	1a13      	subs	r3, r2, r0
     216:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     21a:	4618      	mov	r0, r3
     21c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     220:	f172 0200 	sbcs.w	r2, r2, #0
     224:	d301      	bcc.n	22a <SDFile::available()+0x48>
     226:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
		return sdfatfile.available();
	}
     22a:	f85d 4b04 	ldr.w	r4, [sp], #4
     22e:	4770      	bx	lr
     230:	2000      	movs	r0, #0
     232:	4770      	bx	lr
     234:	2000      	movs	r0, #0
		return sdfatfile.available();
     236:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     238:	2300      	movs	r3, #0
     23a:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     23c:	4618      	mov	r0, r3
     23e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     242:	f172 0200 	sbcs.w	r2, r2, #0
     246:	bf28      	it	cs
     248:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     24c:	4770      	bx	lr

0000024e <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     24e:	6d03      	ldr	r3, [r0, #80]	; 0x50
     250:	b113      	cbz	r3, 258 <SDFile::position()+0xa>
     252:	6958      	ldr	r0, [r3, #20]
     254:	2100      	movs	r1, #0
     256:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     258:	6d43      	ldr	r3, [r0, #84]	; 0x54
     25a:	b113      	cbz	r3, 262 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     25c:	6818      	ldr	r0, [r3, #0]
     25e:	6859      	ldr	r1, [r3, #4]
     260:	4770      	bx	lr
     262:	2000      	movs	r0, #0
     264:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     266:	4770      	bx	lr

00000268 <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     268:	6d03      	ldr	r3, [r0, #80]	; 0x50
     26a:	b113      	cbz	r3, 272 <SDFile::size()+0xa>
     26c:	69d8      	ldr	r0, [r3, #28]
     26e:	2100      	movs	r1, #0
     270:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     272:	6d43      	ldr	r3, [r0, #84]	; 0x54
     274:	b113      	cbz	r3, 27c <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     276:	6918      	ldr	r0, [r3, #16]
     278:	6959      	ldr	r1, [r3, #20]
     27a:	4770      	bx	lr
     27c:	2000      	movs	r0, #0
     27e:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     280:	4770      	bx	lr

00000282 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     282:	6d03      	ldr	r3, [r0, #80]	; 0x50
     284:	b10b      	cbz	r3, 28a <SDFile::isOpen()+0x8>
     286:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     288:	4770      	bx	lr
     28a:	6d40      	ldr	r0, [r0, #84]	; 0x54
     28c:	3800      	subs	r0, #0
     28e:	bf18      	it	ne
     290:	2001      	movne	r0, #1
     292:	4770      	bx	lr

00000294 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     294:	798a      	ldrb	r2, [r1, #6]
     296:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     29a:	f013 0f80 	tst.w	r3, #128	; 0x80
     29e:	d120      	bne.n	2e2 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a2:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     2a4:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     2a8:	794b      	ldrb	r3, [r1, #5]
     2aa:	3301      	adds	r3, #1
     2ac:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     2ae:	790d      	ldrb	r5, [r1, #4]
     2b0:	788e      	ldrb	r6, [r1, #2]
     2b2:	784f      	ldrb	r7, [r1, #1]
     2b4:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     2b6:	6d04      	ldr	r4, [r0, #80]	; 0x50
     2b8:	b14c      	cbz	r4, 2ce <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     2ba:	9103      	str	r1, [sp, #12]
     2bc:	9702      	str	r7, [sp, #8]
     2be:	9601      	str	r6, [sp, #4]
     2c0:	9500      	str	r5, [sp, #0]
     2c2:	2104      	movs	r1, #4
     2c4:	4620      	mov	r0, r4
     2c6:	f007 feb9 	bl	803c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     2ca:	b005      	add	sp, #20
     2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     2ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
     2d0:	b148      	cbz	r0, 2e6 <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     2d2:	9103      	str	r1, [sp, #12]
     2d4:	9702      	str	r7, [sp, #8]
     2d6:	9601      	str	r6, [sp, #4]
     2d8:	9500      	str	r5, [sp, #0]
     2da:	2104      	movs	r1, #4
     2dc:	f005 ffd3 	bl	6286 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     2e0:	e7f3      	b.n	2ca <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     2e2:	2000      	movs	r0, #0
	}
     2e4:	4770      	bx	lr
           m_xFile ?
     2e6:	2000      	movs	r0, #0
     2e8:	e7ef      	b.n	2ca <SDFile::setModifyTime(DateTimeFields const&)+0x36>

000002ea <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     2ea:	b510      	push	{r4, lr}
     2ec:	b082      	sub	sp, #8
     2ee:	4603      	mov	r3, r0
     2f0:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     2f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
     2f4:	b310      	cbz	r0, 33c <SDFile::getModifyTime(DateTimeFields&)+0x52>
     2f6:	aa01      	add	r2, sp, #4
     2f8:	f10d 0106 	add.w	r1, sp, #6
     2fc:	f007 fc78 	bl	7bf0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     300:	b1d0      	cbz	r0, 338 <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     302:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     306:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     30a:	ea53 0102 	orrs.w	r1, r3, r2
     30e:	d01f      	beq.n	350 <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     310:	f002 011f 	and.w	r1, r2, #31
     314:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     316:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     318:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     31c:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     31e:	0ad2      	lsrs	r2, r2, #11
     320:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     322:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     326:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     328:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     32c:	3a01      	subs	r2, #1
     32e:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     330:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     332:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     336:	71a3      	strb	r3, [r4, #6]
	}
     338:	b002      	add	sp, #8
     33a:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     33c:	6d58      	ldr	r0, [r3, #84]	; 0x54
     33e:	b128      	cbz	r0, 34c <SDFile::getModifyTime(DateTimeFields&)+0x62>
     340:	aa01      	add	r2, sp, #4
     342:	f10d 0106 	add.w	r1, sp, #6
     346:	f005 f847 	bl	53d8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     34a:	e7d9      	b.n	300 <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     34c:	2000      	movs	r0, #0
     34e:	e7f3      	b.n	338 <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     350:	2000      	movs	r0, #0
     352:	e7f1      	b.n	338 <SDFile::getModifyTime(DateTimeFields&)+0x4e>

00000354 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     354:	b510      	push	{r4, lr}
     356:	b082      	sub	sp, #8
     358:	4603      	mov	r3, r0
     35a:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     35c:	6d00      	ldr	r0, [r0, #80]	; 0x50
     35e:	b310      	cbz	r0, 3a6 <SDFile::getCreateTime(DateTimeFields&)+0x52>
     360:	aa01      	add	r2, sp, #4
     362:	f10d 0106 	add.w	r1, sp, #6
     366:	f007 fc33 	bl	7bd0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     36a:	b1d0      	cbz	r0, 3a2 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     36c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     370:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     374:	ea53 0102 	orrs.w	r1, r3, r2
     378:	d01f      	beq.n	3ba <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     37a:	f002 011f 	and.w	r1, r2, #31
     37e:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     380:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     382:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     386:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     388:	0ad2      	lsrs	r2, r2, #11
     38a:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     38c:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     390:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     392:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     396:	3a01      	subs	r2, #1
     398:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     39a:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     39c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     3a0:	71a3      	strb	r3, [r4, #6]
	}
     3a2:	b002      	add	sp, #8
     3a4:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     3a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
     3a8:	b128      	cbz	r0, 3b6 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     3aa:	aa01      	add	r2, sp, #4
     3ac:	f10d 0106 	add.w	r1, sp, #6
     3b0:	f005 f800 	bl	53b4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     3b4:	e7d9      	b.n	36a <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     3b6:	2000      	movs	r0, #0
     3b8:	e7f3      	b.n	3a2 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     3ba:	2000      	movs	r0, #0
     3bc:	e7f1      	b.n	3a2 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

000003be <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     3be:	b510      	push	{r4, lr}
     3c0:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     3c2:	6d00      	ldr	r0, [r0, #80]	; 0x50
     3c4:	b120      	cbz	r0, 3d0 <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     3c6:	7803      	ldrb	r3, [r0, #0]
     3c8:	f013 0f70 	tst.w	r3, #112	; 0x70
     3cc:	d10e      	bne.n	3ec <SDFile::rewindDirectory()+0x2e>
	}
     3ce:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     3d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
     3d2:	2b00      	cmp	r3, #0
     3d4:	d0fb      	beq.n	3ce <SDFile::rewindDirectory()+0x10>
     3d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     3da:	f013 0f50 	tst.w	r3, #80	; 0x50
     3de:	d0f6      	beq.n	3ce <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     3e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     3e2:	2200      	movs	r2, #0
     3e4:	2300      	movs	r3, #0
     3e6:	f005 f952 	bl	568e <ExFatFile::seekSet(unsigned long long)>
     3ea:	e7f0      	b.n	3ce <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     3ec:	2100      	movs	r1, #0
     3ee:	f007 f9b7 	bl	7760 <FatFile::seekSet(unsigned long)>
     3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
     3f4:	2800      	cmp	r0, #0
     3f6:	d0ea      	beq.n	3ce <SDFile::rewindDirectory()+0x10>
     3f8:	e7f3      	b.n	3e2 <SDFile::rewindDirectory()+0x24>

000003fa <SDFile::peek()>:
	virtual int peek() {
     3fa:	b508      	push	{r3, lr}
     3fc:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     3fe:	6d00      	ldr	r0, [r0, #80]	; 0x50
     400:	b110      	cbz	r0, 408 <SDFile::peek()+0xe>
     402:	f007 f977 	bl	76f4 <FatFile::peek()>
	}
     406:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     408:	6d58      	ldr	r0, [r3, #84]	; 0x54
     40a:	b110      	cbz	r0, 412 <SDFile::peek()+0x18>
     40c:	f005 f929 	bl	5662 <ExFatFile::peek()>
     410:	e7f9      	b.n	406 <SDFile::peek()+0xc>
     412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     416:	e7f6      	b.n	406 <SDFile::peek()+0xc>

00000418 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     418:	b500      	push	{lr}
     41a:	b083      	sub	sp, #12
     41c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     41e:	6c80      	ldr	r0, [r0, #72]	; 0x48
     420:	b158      	cbz	r0, 43a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     422:	2201      	movs	r2, #1
     424:	f10d 0107 	add.w	r1, sp, #7
     428:	f007 f88f 	bl	754a <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     42c:	2801      	cmp	r0, #1
     42e:	d10f      	bne.n	450 <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     430:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     434:	b003      	add	sp, #12
     436:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     43a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     43c:	b128      	cbz	r0, 44a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     43e:	2201      	movs	r2, #1
     440:	f10d 0107 	add.w	r1, sp, #7
     444:	f005 f842 	bl	54cc <ExFatFile::read(void*, unsigned int)>
     448:	e7f0      	b.n	42c <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     44a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     44e:	e7f1      	b.n	434 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     454:	e7ee      	b.n	434 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000456 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     456:	b508      	push	{r3, lr}
     458:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     45a:	6c80      	ldr	r0, [r0, #72]	; 0x48
     45c:	b110      	cbz	r0, 464 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     45e:	f007 facd 	bl	79fc <FatFile::sync()>
  }
     462:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     464:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     466:	2800      	cmp	r0, #0
     468:	d0fb      	beq.n	462 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     46a:	f005 fd85 	bl	5f78 <ExFatFile::sync()>
     46e:	e7f8      	b.n	462 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

00000470 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     470:	b500      	push	{lr}
     472:	b083      	sub	sp, #12
     474:	4603      	mov	r3, r0
     476:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     47a:	6c80      	ldr	r0, [r0, #72]	; 0x48
     47c:	b138      	cbz	r0, 48e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     47e:	2201      	movs	r2, #1
     480:	f10d 0107 	add.w	r1, sp, #7
     484:	f007 fe92 	bl	81ac <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     488:	b003      	add	sp, #12
     48a:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     48e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     490:	b128      	cbz	r0, 49e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     492:	2201      	movs	r2, #1
     494:	f10d 0107 	add.w	r1, sp, #7
     498:	f006 f822 	bl	64e0 <ExFatFile::write(void const*, unsigned int)>
     49c:	e7f4      	b.n	488 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     49e:	2000      	movs	r0, #0
    return BaseFile::write(b);
     4a0:	e7f2      	b.n	488 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
	...

000004a4 <SDFile::name()>:
	virtual const char * name() {
     4a4:	b510      	push	{r4, lr}
     4a6:	4604      	mov	r4, r0
		if (!filename) {
     4a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
     4aa:	b10b      	cbz	r3, 4b0 <SDFile::name()+0xc>
	}
     4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
     4ae:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     4b0:	f44f 7080 	mov.w	r0, #256	; 0x100
     4b4:	f010 fada 	bl	10a6c <malloc>
     4b8:	4601      	mov	r1, r0
     4ba:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     4bc:	b180      	cbz	r0, 4e0 <SDFile::name()+0x3c>
    *name = 0;
     4be:	2300      	movs	r3, #0
     4c0:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     4c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
     4c4:	b120      	cbz	r0, 4d0 <SDFile::name()+0x2c>
     4c6:	f44f 7280 	mov.w	r2, #256	; 0x100
     4ca:	f008 ff85 	bl	93d8 <FatFile::getName(char*, unsigned int)>
     4ce:	e7ed      	b.n	4ac <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     4d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
     4d2:	2800      	cmp	r0, #0
     4d4:	d0ea      	beq.n	4ac <SDFile::name()+0x8>
    return getName8(name, size);
     4d6:	f44f 7280 	mov.w	r2, #256	; 0x100
     4da:	f006 fca1 	bl	6e20 <ExFatFile::getName8(char*, unsigned int)>
     4de:	e7e5      	b.n	4ac <SDFile::name()+0x8>
				filename = &zeroterm;
     4e0:	4b01      	ldr	r3, [pc, #4]	; (4e8 <SDFile::name()+0x44>)
     4e2:	65a3      	str	r3, [r4, #88]	; 0x58
     4e4:	e7e2      	b.n	4ac <SDFile::name()+0x8>
     4e6:	bf00      	nop
     4e8:	2000532f 	.word	0x2000532f

000004ec <SDFile::close()>:
	virtual void close() {
     4ec:	b510      	push	{r4, lr}
     4ee:	4604      	mov	r4, r0
		if (filename) {
     4f0:	6d80      	ldr	r0, [r0, #88]	; 0x58
     4f2:	b118      	cbz	r0, 4fc <SDFile::close()+0x10>
			free(filename);
     4f4:	f010 fac2 	bl	10a7c <free>
			filename = nullptr;
     4f8:	2300      	movs	r3, #0
     4fa:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     4fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
     4fe:	b123      	cbz	r3, 50a <SDFile::close()+0x1e>
			sdfatfile.close();
     500:	f104 0018 	add.w	r0, r4, #24
     504:	f009 fa82 	bl	9a0c <FsBaseFile::close()>
	}
     508:	bd10      	pop	{r4, pc}
     50a:	6d63      	ldr	r3, [r4, #84]	; 0x54
     50c:	2b00      	cmp	r3, #0
     50e:	d1f7      	bne.n	500 <SDFile::close()+0x14>
     510:	e7fa      	b.n	508 <SDFile::close()+0x1c>

00000512 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     512:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     514:	6d04      	ldr	r4, [r0, #80]	; 0x50
     516:	b194      	cbz	r4, 53e <SDFile::truncate(unsigned long long)+0x2c>
     518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     51c:	4291      	cmp	r1, r2
     51e:	f04f 0100 	mov.w	r1, #0
     522:	4199      	sbcs	r1, r3
     524:	d201      	bcs.n	52a <SDFile::truncate(unsigned long long)+0x18>
     526:	2000      	movs	r0, #0
	}
     528:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     52a:	4611      	mov	r1, r2
     52c:	4620      	mov	r0, r4
     52e:	f007 f917 	bl	7760 <FatFile::seekSet(unsigned long)>
     532:	2800      	cmp	r0, #0
     534:	d0f8      	beq.n	528 <SDFile::truncate(unsigned long long)+0x16>
     536:	4620      	mov	r0, r4
     538:	f007 fdfe 	bl	8138 <FatFile::truncate()>
     53c:	e7f4      	b.n	528 <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     53e:	6d44      	ldr	r4, [r0, #84]	; 0x54
     540:	b144      	cbz	r4, 554 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     542:	4620      	mov	r0, r4
     544:	f005 f8a3 	bl	568e <ExFatFile::seekSet(unsigned long long)>
     548:	2800      	cmp	r0, #0
     54a:	d0ed      	beq.n	528 <SDFile::truncate(unsigned long long)+0x16>
     54c:	4620      	mov	r0, r4
     54e:	f005 ff54 	bl	63fa <ExFatFile::truncate()>
     552:	e7e9      	b.n	528 <SDFile::truncate(unsigned long long)+0x16>
     554:	2000      	movs	r0, #0
     556:	e7e7      	b.n	528 <SDFile::truncate(unsigned long long)+0x16>

00000558 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     558:	b570      	push	{r4, r5, r6, lr}
     55a:	b094      	sub	sp, #80	; 0x50
     55c:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
     55e:	2200      	movs	r2, #0
     560:	9201      	str	r2, [sp, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     566:	9302      	str	r3, [sp, #8]
     568:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     56c:	9212      	str	r2, [sp, #72]	; 0x48
     56e:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     570:	4b1f      	ldr	r3, [pc, #124]	; (5f0 <SDFile::openNextFile(unsigned char)+0x98>)
     572:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     574:	3118      	adds	r1, #24
     576:	a804      	add	r0, sp, #16
     578:	f009 fa96 	bl	9aa8 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     57c:	9b12      	ldr	r3, [sp, #72]	; 0x48
     57e:	2b00      	cmp	r3, #0
     580:	d02a      	beq.n	5d8 <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     582:	205c      	movs	r0, #92	; 0x5c
     584:	f00c fdce 	bl	d124 <operator new(unsigned int)>
     588:	4604      	mov	r4, r0
class FileImpl {
     58a:	2600      	movs	r6, #0
     58c:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     58e:	4b19      	ldr	r3, [pc, #100]	; (5f4 <SDFile::openNextFile(unsigned char)+0x9c>)
     590:	6003      	str	r3, [r0, #0]
class Print
     592:	9b01      	ldr	r3, [sp, #4]
     594:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     596:	4b18      	ldr	r3, [pc, #96]	; (5f8 <SDFile::openNextFile(unsigned char)+0xa0>)
     598:	6083      	str	r3, [r0, #8]
     59a:	9b02      	ldr	r3, [sp, #8]
     59c:	6103      	str	r3, [r0, #16]
     59e:	f89d 300c 	ldrb.w	r3, [sp, #12]
     5a2:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     5a4:	a904      	add	r1, sp, #16
     5a6:	3018      	adds	r0, #24
     5a8:	f009 f9ef 	bl	998a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     5ac:	4b10      	ldr	r3, [pc, #64]	; (5f0 <SDFile::openNextFile(unsigned char)+0x98>)
     5ae:	60a3      	str	r3, [r4, #8]
     5b0:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     5b2:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     5b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     5b8:	60ab      	str	r3, [r5, #8]
     5ba:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     5bc:	4b0f      	ldr	r3, [pc, #60]	; (5fc <SDFile::openNextFile(unsigned char)+0xa4>)
     5be:	602b      	str	r3, [r5, #0]
		f = file;
     5c0:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     5c2:	6863      	ldr	r3, [r4, #4]
     5c4:	3301      	adds	r3, #1
     5c6:	6063      	str	r3, [r4, #4]
     5c8:	4b0d      	ldr	r3, [pc, #52]	; (600 <SDFile::openNextFile(unsigned char)+0xa8>)
     5ca:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     5cc:	a804      	add	r0, sp, #16
     5ce:	f009 fa1d 	bl	9a0c <FsBaseFile::close()>
	}
     5d2:	4628      	mov	r0, r5
     5d4:	b014      	add	sp, #80	; 0x50
     5d6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     5d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     5da:	2b00      	cmp	r3, #0
     5dc:	d1d1      	bne.n	582 <SDFile::openNextFile(unsigned char)+0x2a>
     5de:	606b      	str	r3, [r5, #4]
     5e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     5e4:	60aa      	str	r2, [r5, #8]
     5e6:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     5e8:	4a04      	ldr	r2, [pc, #16]	; (5fc <SDFile::openNextFile(unsigned char)+0xa4>)
     5ea:	602a      	str	r2, [r5, #0]
     5ec:	612b      	str	r3, [r5, #16]
     5ee:	e7eb      	b.n	5c8 <SDFile::openNextFile(unsigned char)+0x70>
     5f0:	200022d0 	.word	0x200022d0
     5f4:	200022f4 	.word	0x200022f4
     5f8:	20002350 	.word	0x20002350
     5fc:	200022a4 	.word	0x200022a4
     600:	200021c4 	.word	0x200021c4

00000604 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     604:	b508      	push	{r3, lr}
     606:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     608:	6c80      	ldr	r0, [r0, #72]	; 0x48
     60a:	b110      	cbz	r0, 612 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     60c:	f007 f872 	bl	76f4 <FatFile::peek()>
  }
     610:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     612:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     614:	b110      	cbz	r0, 61c <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     616:	f005 f824 	bl	5662 <ExFatFile::peek()>
     61a:	e7f9      	b.n	610 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     620:	e7f6      	b.n	610 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

00000622 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     622:	6d03      	ldr	r3, [r0, #80]	; 0x50
     624:	b133      	cbz	r3, 634 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     626:	781b      	ldrb	r3, [r3, #0]
     628:	f013 0f70 	tst.w	r3, #112	; 0x70
     62c:	bf14      	ite	ne
     62e:	2001      	movne	r0, #1
     630:	2000      	moveq	r0, #0
     632:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     634:	6d43      	ldr	r3, [r0, #84]	; 0x54
     636:	b13b      	cbz	r3, 648 <SDFile::isDirectory()+0x26>
     638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     63c:	f013 0f50 	tst.w	r3, #80	; 0x50
     640:	bf14      	ite	ne
     642:	2001      	movne	r0, #1
     644:	2000      	moveq	r0, #0
     646:	4770      	bx	lr
     648:	2000      	movs	r0, #0
	}
     64a:	4770      	bx	lr

0000064c <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     64c:	b508      	push	{r3, lr}
     64e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     650:	6d00      	ldr	r0, [r0, #80]	; 0x50
     652:	b110      	cbz	r0, 65a <SDFile::read(void*, unsigned int)+0xe>
     654:	f006 ff79 	bl	754a <FatFile::read(void*, unsigned int)>
	}
     658:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     65a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     65c:	b110      	cbz	r0, 664 <SDFile::read(void*, unsigned int)+0x18>
     65e:	f004 ff35 	bl	54cc <ExFatFile::read(void*, unsigned int)>
     662:	e7f9      	b.n	658 <SDFile::read(void*, unsigned int)+0xc>
     664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     668:	e7f6      	b.n	658 <SDFile::read(void*, unsigned int)+0xc>

0000066a <SDFile::flush()>:
	virtual void flush() {
     66a:	b508      	push	{r3, lr}
     66c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     66e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     670:	b110      	cbz	r0, 678 <SDFile::flush()+0xe>
     672:	f007 f9c3 	bl	79fc <FatFile::sync()>
	}
     676:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     678:	6d58      	ldr	r0, [r3, #84]	; 0x54
     67a:	2800      	cmp	r0, #0
     67c:	d0fb      	beq.n	676 <SDFile::flush()+0xc>
     67e:	f005 fc7b 	bl	5f78 <ExFatFile::sync()>
     682:	e7f8      	b.n	676 <SDFile::flush()+0xc>

00000684 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     684:	b510      	push	{r4, lr}
     686:	4604      	mov	r4, r0
     688:	4b0c      	ldr	r3, [pc, #48]	; (6bc <SDFile::~SDFile()+0x38>)
     68a:	6003      	str	r3, [r0, #0]
		if (filename) {
     68c:	6d80      	ldr	r0, [r0, #88]	; 0x58
     68e:	b118      	cbz	r0, 698 <SDFile::~SDFile()+0x14>
			free(filename);
     690:	f010 f9f4 	bl	10a7c <free>
			filename = nullptr;
     694:	2300      	movs	r3, #0
     696:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     698:	6d23      	ldr	r3, [r4, #80]	; 0x50
     69a:	b15b      	cbz	r3, 6b4 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     69c:	f104 0018 	add.w	r0, r4, #24
     6a0:	f009 f9b4 	bl	9a0c <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     6a4:	4b06      	ldr	r3, [pc, #24]	; (6c0 <SDFile::~SDFile()+0x3c>)
     6a6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     6a8:	f104 0018 	add.w	r0, r4, #24
     6ac:	f009 f9ae 	bl	9a0c <FsBaseFile::close()>
	}
     6b0:	4620      	mov	r0, r4
     6b2:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     6b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     6b6:	2b00      	cmp	r3, #0
     6b8:	d1f0      	bne.n	69c <SDFile::~SDFile()+0x18>
     6ba:	e7f3      	b.n	6a4 <SDFile::~SDFile()+0x20>
     6bc:	200022f4 	.word	0x200022f4
     6c0:	200021c4 	.word	0x200021c4

000006c4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     6c4:	b510      	push	{r4, lr}
     6c6:	4604      	mov	r4, r0
     6c8:	4b0e      	ldr	r3, [pc, #56]	; (704 <SDFile::~SDFile()+0x40>)
     6ca:	6003      	str	r3, [r0, #0]
		if (filename) {
     6cc:	6d80      	ldr	r0, [r0, #88]	; 0x58
     6ce:	b118      	cbz	r0, 6d8 <SDFile::~SDFile()+0x14>
			free(filename);
     6d0:	f010 f9d4 	bl	10a7c <free>
			filename = nullptr;
     6d4:	2300      	movs	r3, #0
     6d6:	65a3      	str	r3, [r4, #88]	; 0x58
     6d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     6da:	b17b      	cbz	r3, 6fc <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     6dc:	f104 0018 	add.w	r0, r4, #24
     6e0:	f009 f994 	bl	9a0c <FsBaseFile::close()>
     6e4:	4b08      	ldr	r3, [pc, #32]	; (708 <SDFile::~SDFile()+0x44>)
     6e6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     6e8:	f104 0018 	add.w	r0, r4, #24
     6ec:	f009 f98e 	bl	9a0c <FsBaseFile::close()>
	}
     6f0:	215c      	movs	r1, #92	; 0x5c
     6f2:	4620      	mov	r0, r4
     6f4:	f00c fd1a 	bl	d12c <operator delete(void*, unsigned int)>
     6f8:	4620      	mov	r0, r4
     6fa:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     6fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
     6fe:	2b00      	cmp	r3, #0
     700:	d1ec      	bne.n	6dc <SDFile::~SDFile()+0x18>
     702:	e7ef      	b.n	6e4 <SDFile::~SDFile()+0x20>
     704:	200022f4 	.word	0x200022f4
     708:	200021c4 	.word	0x200021c4

0000070c <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     70c:	b508      	push	{r3, lr}
     70e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     710:	6d00      	ldr	r0, [r0, #80]	; 0x50
     712:	b110      	cbz	r0, 71a <SDFile::write(void const*, unsigned int)+0xe>
     714:	f007 fd4a 	bl	81ac <FatFile::write(void const*, unsigned int)>
	}
     718:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     71a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     71c:	b110      	cbz	r0, 724 <SDFile::write(void const*, unsigned int)+0x18>
     71e:	f005 fedf 	bl	64e0 <ExFatFile::write(void const*, unsigned int)>
     722:	e7f9      	b.n	718 <SDFile::write(void const*, unsigned int)+0xc>
     724:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     726:	e7f7      	b.n	718 <SDFile::write(void const*, unsigned int)+0xc>

00000728 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     728:	b508      	push	{r3, lr}
     72a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     72c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     72e:	b110      	cbz	r0, 736 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     730:	f007 fd3c 	bl	81ac <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     734:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     736:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     738:	b110      	cbz	r0, 740 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     73a:	f005 fed1 	bl	64e0 <ExFatFile::write(void const*, unsigned int)>
     73e:	e7f9      	b.n	734 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     740:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     742:	e7f7      	b.n	734 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000744 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     744:	798a      	ldrb	r2, [r1, #6]
     746:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     74a:	f013 0f80 	tst.w	r3, #128	; 0x80
     74e:	d120      	bne.n	792 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     750:	b5f0      	push	{r4, r5, r6, r7, lr}
     752:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     754:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     758:	794b      	ldrb	r3, [r1, #5]
     75a:	3301      	adds	r3, #1
     75c:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     75e:	790d      	ldrb	r5, [r1, #4]
     760:	788e      	ldrb	r6, [r1, #2]
     762:	784f      	ldrb	r7, [r1, #1]
     764:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     766:	6d04      	ldr	r4, [r0, #80]	; 0x50
     768:	b14c      	cbz	r4, 77e <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     76a:	9103      	str	r1, [sp, #12]
     76c:	9702      	str	r7, [sp, #8]
     76e:	9601      	str	r6, [sp, #4]
     770:	9500      	str	r5, [sp, #0]
     772:	2102      	movs	r1, #2
     774:	4620      	mov	r0, r4
     776:	f007 fc61 	bl	803c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     77a:	b005      	add	sp, #20
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     77e:	6d40      	ldr	r0, [r0, #84]	; 0x54
     780:	b148      	cbz	r0, 796 <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     782:	9103      	str	r1, [sp, #12]
     784:	9702      	str	r7, [sp, #8]
     786:	9601      	str	r6, [sp, #4]
     788:	9500      	str	r5, [sp, #0]
     78a:	2102      	movs	r1, #2
     78c:	f005 fd7b 	bl	6286 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     790:	e7f3      	b.n	77a <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     792:	2000      	movs	r0, #0
	}
     794:	4770      	bx	lr
           m_xFile ?
     796:	2000      	movs	r0, #0
     798:	e7ef      	b.n	77a <SDFile::setCreateTime(DateTimeFields const&)+0x36>

0000079a <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     79a:	6c83      	ldr	r3, [r0, #72]	; 0x48
     79c:	b153      	cbz	r3, 7b4 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     79e:	781a      	ldrb	r2, [r3, #0]
     7a0:	f012 0f08 	tst.w	r2, #8
     7a4:	d020      	beq.n	7e8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     7a6:	69d8      	ldr	r0, [r3, #28]
     7a8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     7aa:	1ac0      	subs	r0, r0, r3
     7ac:	bf48      	it	mi
     7ae:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     7b2:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     7b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     7b6:	b1cb      	cbz	r3, 7ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     7b8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     7bc:	f012 0f08 	tst.w	r2, #8
     7c0:	d016      	beq.n	7f0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  int available() {
     7c2:	b410      	push	{r4}
     7c4:	691a      	ldr	r2, [r3, #16]
     7c6:	6959      	ldr	r1, [r3, #20]
     7c8:	6818      	ldr	r0, [r3, #0]
     7ca:	685c      	ldr	r4, [r3, #4]
     7cc:	1a13      	subs	r3, r2, r0
     7ce:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     7d2:	4618      	mov	r0, r3
     7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     7d8:	f172 0200 	sbcs.w	r2, r2, #0
     7dc:	d301      	bcc.n	7e2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     7de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  }
     7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
     7e6:	4770      	bx	lr
     7e8:	2000      	movs	r0, #0
     7ea:	4770      	bx	lr
     7ec:	2000      	movs	r0, #0
    return BaseFile::available();
     7ee:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     7f0:	2300      	movs	r3, #0
     7f2:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     7f4:	4618      	mov	r0, r3
     7f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     7fa:	f172 0200 	sbcs.w	r2, r2, #0
     7fe:	bf28      	it	cs
     800:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     804:	4770      	bx	lr

00000806 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     806:	b510      	push	{r4, lr}
     808:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     80a:	b12c      	cbz	r4, 818 <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     80c:	2c01      	cmp	r4, #1
     80e:	d019      	beq.n	844 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     810:	2c02      	cmp	r4, #2
     812:	d034      	beq.n	87e <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     814:	2000      	movs	r0, #0
	}
     816:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     818:	6d04      	ldr	r4, [r0, #80]	; 0x50
     81a:	b16c      	cbz	r4, 838 <SDFile::seek(unsigned long long, int)+0x32>
     81c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     820:	4291      	cmp	r1, r2
     822:	f04f 0100 	mov.w	r1, #0
     826:	4199      	sbcs	r1, r3
     828:	d201      	bcs.n	82e <SDFile::seek(unsigned long long, int)+0x28>
     82a:	2000      	movs	r0, #0
     82c:	e7f3      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
     82e:	4611      	mov	r1, r2
     830:	4620      	mov	r0, r4
     832:	f006 ff95 	bl	7760 <FatFile::seekSet(unsigned long)>
     836:	e7ee      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     838:	6d40      	ldr	r0, [r0, #84]	; 0x54
     83a:	2800      	cmp	r0, #0
     83c:	d03c      	beq.n	8b8 <SDFile::seek(unsigned long long, int)+0xb2>
     83e:	f004 ff26 	bl	568e <ExFatFile::seekSet(unsigned long long)>
     842:	e7e8      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     844:	6d04      	ldr	r4, [r0, #80]	; 0x50
     846:	b164      	cbz	r4, 862 <SDFile::seek(unsigned long long, int)+0x5c>
     848:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     84a:	1889      	adds	r1, r1, r2
     84c:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     854:	428a      	cmp	r2, r1
     856:	f04f 0200 	mov.w	r2, #0
     85a:	419a      	sbcs	r2, r3
     85c:	d20b      	bcs.n	876 <SDFile::seek(unsigned long long, int)+0x70>
     85e:	2000      	movs	r0, #0
     860:	e7d9      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     862:	6d40      	ldr	r0, [r0, #84]	; 0x54
     864:	b350      	cbz	r0, 8bc <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     866:	6801      	ldr	r1, [r0, #0]
     868:	6844      	ldr	r4, [r0, #4]
     86a:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     86c:	eb43 0304 	adc.w	r3, r3, r4
     870:	f004 ff0d 	bl	568e <ExFatFile::seekSet(unsigned long long)>
     874:	e7cf      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     876:	4620      	mov	r0, r4
     878:	f006 ff72 	bl	7760 <FatFile::seekSet(unsigned long)>
     87c:	e7cb      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     87e:	6d04      	ldr	r4, [r0, #80]	; 0x50
     880:	b164      	cbz	r4, 89c <SDFile::seek(unsigned long long, int)+0x96>
     882:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     884:	1889      	adds	r1, r1, r2
     886:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     88a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     88e:	428a      	cmp	r2, r1
     890:	f04f 0200 	mov.w	r2, #0
     894:	419a      	sbcs	r2, r3
     896:	d20b      	bcs.n	8b0 <SDFile::seek(unsigned long long, int)+0xaa>
     898:	2000      	movs	r0, #0
     89a:	e7bc      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     89c:	6d40      	ldr	r0, [r0, #84]	; 0x54
     89e:	b178      	cbz	r0, 8c0 <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
     8a0:	6901      	ldr	r1, [r0, #16]
     8a2:	6944      	ldr	r4, [r0, #20]
     8a4:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     8a6:	eb43 0304 	adc.w	r3, r3, r4
     8aa:	f004 fef0 	bl	568e <ExFatFile::seekSet(unsigned long long)>
     8ae:	e7b2      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     8b0:	4620      	mov	r0, r4
     8b2:	f006 ff55 	bl	7760 <FatFile::seekSet(unsigned long)>
     8b6:	e7ae      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     8b8:	2000      	movs	r0, #0
     8ba:	e7ac      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
     8bc:	2000      	movs	r0, #0
     8be:	e7aa      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>
     8c0:	2000      	movs	r0, #0
     8c2:	e7a8      	b.n	816 <SDFile::seek(unsigned long long, int)+0x10>

000008c4 <controlMixer()>:
   *roll_passthru, pitch_passthru, yaw_passthru - direct unstabilized command passthrough
   *channel_6_pwm - free auxillary channel, can be used to toggle things with an 'if' statement
   */
   
  //Quad mixing - EXAMPLE
  m1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     8c4:	4b21      	ldr	r3, [pc, #132]	; (94c <controlMixer()+0x88>)
     8c6:	edd3 6a00 	vldr	s13, [r3]
     8ca:	4b21      	ldr	r3, [pc, #132]	; (950 <controlMixer()+0x8c>)
     8cc:	ed93 6a00 	vldr	s12, [r3]
     8d0:	ee36 7ac6 	vsub.f32	s14, s13, s12
     8d4:	4b1f      	ldr	r3, [pc, #124]	; (954 <controlMixer()+0x90>)
     8d6:	edd3 7a00 	vldr	s15, [r3]
     8da:	4b1f      	ldr	r3, [pc, #124]	; (958 <controlMixer()+0x94>)
     8dc:	ed93 5a00 	vldr	s10, [r3]
     8e0:	ee77 5a27 	vadd.f32	s11, s14, s15
     8e4:	ee75 5a85 	vadd.f32	s11, s11, s10
     8e8:	4b1c      	ldr	r3, [pc, #112]	; (95c <controlMixer()+0x98>)
     8ea:	edc3 5a00 	vstr	s11, [r3]
  m2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     8ee:	ee37 7a67 	vsub.f32	s14, s14, s15
     8f2:	ee37 7a45 	vsub.f32	s14, s14, s10
     8f6:	4b1a      	ldr	r3, [pc, #104]	; (960 <controlMixer()+0x9c>)
     8f8:	ed83 7a00 	vstr	s14, [r3]
  m3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     8fc:	ee76 6a86 	vadd.f32	s13, s13, s12
     900:	ee36 6ae7 	vsub.f32	s12, s13, s15
     904:	ee36 6a05 	vadd.f32	s12, s12, s10
     908:	4b16      	ldr	r3, [pc, #88]	; (964 <controlMixer()+0xa0>)
     90a:	ed83 6a00 	vstr	s12, [r3]
  m4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
     912:	ee77 7ac5 	vsub.f32	s15, s15, s10
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <controlMixer()+0xa4>)
     918:	edc3 7a00 	vstr	s15, [r3]
  m5_command_scaled = 0;
     91c:	2300      	movs	r3, #0
     91e:	4a13      	ldr	r2, [pc, #76]	; (96c <controlMixer()+0xa8>)
     920:	6013      	str	r3, [r2, #0]
  m6_command_scaled = 0;
     922:	4a13      	ldr	r2, [pc, #76]	; (970 <controlMixer()+0xac>)
     924:	6013      	str	r3, [r2, #0]

  //0.5 is centered servo, 0.0 is zero throttle if connecting to ESC for conventional PWM, 1.0 is max throttle
  s1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     926:	4a13      	ldr	r2, [pc, #76]	; (974 <controlMixer()+0xb0>)
     928:	edc2 5a00 	vstr	s11, [r2]
  s2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     92c:	4a12      	ldr	r2, [pc, #72]	; (978 <controlMixer()+0xb4>)
     92e:	ed82 7a00 	vstr	s14, [r2]
  s3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     932:	4a12      	ldr	r2, [pc, #72]	; (97c <controlMixer()+0xb8>)
     934:	ed82 6a00 	vstr	s12, [r2]
  s4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     938:	4a11      	ldr	r2, [pc, #68]	; (980 <controlMixer()+0xbc>)
     93a:	edc2 7a00 	vstr	s15, [r2]
  s5_command_scaled = 0;
     93e:	4a11      	ldr	r2, [pc, #68]	; (984 <controlMixer()+0xc0>)
     940:	6013      	str	r3, [r2, #0]
  s6_command_scaled = 0;
     942:	4a11      	ldr	r2, [pc, #68]	; (988 <controlMixer()+0xc4>)
     944:	6013      	str	r3, [r2, #0]
  s7_command_scaled = 0;
     946:	4a11      	ldr	r2, [pc, #68]	; (98c <controlMixer()+0xc8>)
     948:	6013      	str	r3, [r2, #0]
}
     94a:	4770      	bx	lr
     94c:	200052f8 	.word	0x200052f8
     950:	200050b4 	.word	0x200050b4
     954:	200050dc 	.word	0x200050dc
     958:	20005314 	.word	0x20005314
     95c:	2000505c 	.word	0x2000505c
     960:	20005064 	.word	0x20005064
     964:	2000506c 	.word	0x2000506c
     968:	20005074 	.word	0x20005074
     96c:	2000507c 	.word	0x2000507c
     970:	20005084 	.word	0x20005084
     974:	2000511c 	.word	0x2000511c
     978:	20005124 	.word	0x20005124
     97c:	2000512c 	.word	0x2000512c
     980:	20005134 	.word	0x20005134
     984:	2000513c 	.word	0x2000513c
     988:	20005144 	.word	0x20005144
     98c:	2000514c 	.word	0x2000514c

00000990 <IMUinit()>:

void IMUinit() {
     990:	b510      	push	{r4, lr}
  //DESCRIPTION: Initialize IMU
  /*
   * Don't worry about how this works.
   */
  #if defined USE_MPU6050_I2C
    Wire.begin();
     992:	4c17      	ldr	r4, [pc, #92]	; (9f0 <IMUinit()+0x60>)
     994:	4620      	mov	r0, r4
     996:	f014 fbf7 	bl	15188 <___ZN7TwoWire5beginEv_veneer>
    Wire.setClock(1000000); //Note this is 2.5 times the spec sheet 400 kHz max...
     99a:	4916      	ldr	r1, [pc, #88]	; (9f4 <IMUinit()+0x64>)
     99c:	4620      	mov	r0, r4
     99e:	f003 fdab 	bl	44f8 <TwoWire::setClock(unsigned long)>
    
    mpu6050.initialize();
     9a2:	4c15      	ldr	r4, [pc, #84]	; (9f8 <IMUinit()+0x68>)
     9a4:	4620      	mov	r0, r4
     9a6:	f003 f8fb 	bl	3ba0 <MPU6050::initialize()>
    
    if (mpu6050.testConnection() == false) {
     9aa:	4620      	mov	r0, r4
     9ac:	f003 f91e 	bl	3bec <MPU6050::testConnection()>
     9b0:	b998      	cbnz	r0, 9da <IMUinit()+0x4a>
							  return write((const uint8_t *)str, strlen(str)); }
     9b2:	4c12      	ldr	r4, [pc, #72]	; (9fc <IMUinit()+0x6c>)
     9b4:	6823      	ldr	r3, [r4, #0]
     9b6:	685b      	ldr	r3, [r3, #4]
     9b8:	2223      	movs	r2, #35	; 0x23
     9ba:	4911      	ldr	r1, [pc, #68]	; (a00 <IMUinit()+0x70>)
     9bc:	4620      	mov	r0, r4
     9be:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     9c0:	4620      	mov	r0, r4
     9c2:	f00b fd28 	bl	c416 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     9c6:	6823      	ldr	r3, [r4, #0]
     9c8:	685b      	ldr	r3, [r3, #4]
     9ca:	2229      	movs	r2, #41	; 0x29
     9cc:	490d      	ldr	r1, [pc, #52]	; (a04 <IMUinit()+0x74>)
     9ce:	4620      	mov	r0, r4
     9d0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     9d2:	4620      	mov	r0, r4
     9d4:	f00b fd1f 	bl	c416 <Print::println()>
      Serial.println("MPU6050 initialization unsuccessful");
      Serial.println("Check MPU6050 wiring or try cycling power");
      while(1) {}
     9d8:	e7fe      	b.n	9d8 <IMUinit()+0x48>
    }

    //From the reset state all registers should be 0x00, so we should be at
    //max sample rate with digital low pass filter(s) off.  All we need to
    //do is set the desired fullscale ranges
    mpu6050.setFullScaleGyroRange(GYRO_SCALE);
     9da:	4c07      	ldr	r4, [pc, #28]	; (9f8 <IMUinit()+0x68>)
     9dc:	2100      	movs	r1, #0
     9de:	4620      	mov	r0, r4
     9e0:	f003 f87c 	bl	3adc <MPU6050::setFullScaleGyroRange(unsigned char)>
    mpu6050.setFullScaleAccelRange(ACCEL_SCALE);
     9e4:	2100      	movs	r1, #0
     9e6:	4620      	mov	r0, r4
     9e8:	f003 f884 	bl	3af4 <MPU6050::setFullScaleAccelRange(unsigned char)>
    mpu9250.setMagCalX(MagErrorX, MagScaleX);
    mpu9250.setMagCalY(MagErrorY, MagScaleY);
    mpu9250.setMagCalZ(MagErrorZ, MagScaleZ);
    mpu9250.setSrd(0); //sets gyro and accel read to 1khz, magnetometer read to 100hz
  #endif
}
     9ec:	bd10      	pop	{r4, pc}
     9ee:	bf00      	nop
     9f0:	20004704 	.word	0x20004704
     9f4:	000f4240 	.word	0x000f4240
     9f8:	20005088 	.word	0x20005088
     9fc:	20003184 	.word	0x20003184
     a00:	20001d40 	.word	0x20001d40
     a04:	20001d64 	.word	0x20001d64

00000a08 <getIMUdata()>:

void getIMUdata() {
     a08:	b500      	push	{lr}
     a0a:	b089      	sub	sp, #36	; 0x24
   * the constant errors found in calculate_IMU_error() on startup are subtracted from the accelerometer and gyro readings.
   */
  int16_t AcX,AcY,AcZ,GyX,GyY,GyZ,MgX,MgY,MgZ;

  #if defined USE_MPU6050_I2C
    mpu6050.getMotion6(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ);
     a0c:	ab05      	add	r3, sp, #20
     a0e:	9302      	str	r3, [sp, #8]
     a10:	f10d 0316 	add.w	r3, sp, #22
     a14:	9301      	str	r3, [sp, #4]
     a16:	ab06      	add	r3, sp, #24
     a18:	9300      	str	r3, [sp, #0]
     a1a:	f10d 031a 	add.w	r3, sp, #26
     a1e:	aa07      	add	r2, sp, #28
     a20:	f10d 011e 	add.w	r1, sp, #30
     a24:	48a2      	ldr	r0, [pc, #648]	; (cb0 <getIMUdata()+0x2a8>)
     a26:	f003 f871 	bl	3b0c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>
    mpu9250.getMotion9(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ, &MgX, &MgY, &MgZ);
  #endif

 //Accelerometer
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
  AccY = AcY / ACCEL_SCALE_FACTOR;
     a2a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
     a2e:	ee03 3a10 	vmov	s6, r3
     a32:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
     a36:	ed9f 2b9a 	vldr	d2, [pc, #616]	; ca0 <getIMUdata()+0x298>
     a3a:	ee23 3b02 	vmul.f64	d3, d3, d2
     a3e:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  AccX = AccX - AccErrorX;
  AccY = AccY - AccErrorY;
     a42:	4b9c      	ldr	r3, [pc, #624]	; (cb4 <getIMUdata()+0x2ac>)
     a44:	edd3 7a00 	vldr	s15, [r3]
     a48:	ee33 3a67 	vsub.f32	s6, s6, s15
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
     a4c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
     a50:	ee06 3a10 	vmov	s12, r3
     a54:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     a58:	ee26 6b02 	vmul.f64	d6, d6, d2
     a5c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  AccZ = AccZ - AccErrorZ;
     a60:	4b95      	ldr	r3, [pc, #596]	; (cb8 <getIMUdata()+0x2b0>)
     a62:	edd3 7a00 	vldr	s15, [r3]
     a66:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter accelerometer data
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a6a:	4b94      	ldr	r3, [pc, #592]	; (cbc <getIMUdata()+0x2b4>)
     a6c:	edd3 6a00 	vldr	s13, [r3]
     a70:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     a74:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     a78:	ee35 4b44 	vsub.f64	d4, d5, d4
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
     a7c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     a80:	ee07 3a10 	vmov	s14, r3
     a84:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a88:	ee27 7b02 	vmul.f64	d7, d7, d2
     a8c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  AccX = AccX - AccErrorX;
     a90:	4b8b      	ldr	r3, [pc, #556]	; (cc0 <getIMUdata()+0x2b8>)
     a92:	edd3 7a00 	vldr	s15, [r3]
     a96:	ee37 7a67 	vsub.f32	s14, s14, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a9a:	ee27 7a26 	vmul.f32	s14, s14, s13
     a9e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     aa2:	4988      	ldr	r1, [pc, #544]	; (cc4 <getIMUdata()+0x2bc>)
     aa4:	ed91 2a00 	vldr	s4, [r1]
     aa8:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     aac:	ee02 7b04 	vmla.f64	d7, d2, d4
     ab0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     ab4:	4b84      	ldr	r3, [pc, #528]	; (cc8 <getIMUdata()+0x2c0>)
     ab6:	ed83 7a00 	vstr	s14, [r3]
  AccY = (1.0 - B_accel)*AccY_prev + B_accel*AccY;
     aba:	4a84      	ldr	r2, [pc, #528]	; (ccc <getIMUdata()+0x2c4>)
     abc:	ed92 2a00 	vldr	s4, [r2]
     ac0:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     ac4:	ee23 3a26 	vmul.f32	s6, s6, s13
     ac8:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     acc:	ee02 3b04 	vmla.f64	d3, d2, d4
     ad0:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     ad4:	4b7e      	ldr	r3, [pc, #504]	; (cd0 <getIMUdata()+0x2c8>)
     ad6:	ed83 3a00 	vstr	s6, [r3]
  AccZ = (1.0 - B_accel)*AccZ_prev + B_accel*AccZ;
     ada:	4b7e      	ldr	r3, [pc, #504]	; (cd4 <getIMUdata()+0x2cc>)
     adc:	ed93 2a00 	vldr	s4, [r3]
     ae0:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     ae4:	ee26 6a26 	vmul.f32	s12, s12, s13
     ae8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     aec:	ee02 6b04 	vmla.f64	d6, d2, d4
     af0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     af4:	4878      	ldr	r0, [pc, #480]	; (cd8 <getIMUdata()+0x2d0>)
     af6:	ed80 6a00 	vstr	s12, [r0]
  AccX_prev = AccX;
     afa:	ed81 7a00 	vstr	s14, [r1]
  AccY_prev = AccY;
     afe:	ed82 3a00 	vstr	s6, [r2]
  AccZ_prev = AccZ;
     b02:	ed83 6a00 	vstr	s12, [r3]

  //Gyro
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
  GyroY = GyY / GYRO_SCALE_FACTOR;
     b06:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
     b0a:	ee07 3a10 	vmov	s14, r3
     b0e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     b12:	ed9f 2b65 	vldr	d2, [pc, #404]	; ca8 <getIMUdata()+0x2a0>
     b16:	ee87 3b02 	vdiv.f64	d3, d7, d2
     b1a:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  GyroX = GyroX - GyroErrorX;
  GyroY = GyroY - GyroErrorY;
     b1e:	4b6f      	ldr	r3, [pc, #444]	; (cdc <getIMUdata()+0x2d4>)
     b20:	edd3 7a00 	vldr	s15, [r3]
     b24:	ee33 3a67 	vsub.f32	s6, s6, s15
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
     b28:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
     b2c:	ee07 3a10 	vmov	s14, r3
     b30:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     b34:	ee87 6b02 	vdiv.f64	d6, d7, d2
     b38:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  GyroZ = GyroZ - GyroErrorZ;
     b3c:	4b68      	ldr	r3, [pc, #416]	; (ce0 <getIMUdata()+0x2d8>)
     b3e:	edd3 7a00 	vldr	s15, [r3]
     b42:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter gyro data
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     b46:	4b67      	ldr	r3, [pc, #412]	; (ce4 <getIMUdata()+0x2dc>)
     b48:	edd3 6a00 	vldr	s13, [r3]
     b4c:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     b50:	ee35 4b44 	vsub.f64	d4, d5, d4
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
     b54:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     b58:	ee01 3a10 	vmov	s2, r3
     b5c:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
     b60:	ee81 7b02 	vdiv.f64	d7, d1, d2
     b64:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  GyroX = GyroX - GyroErrorX;
     b68:	4b5f      	ldr	r3, [pc, #380]	; (ce8 <getIMUdata()+0x2e0>)
     b6a:	edd3 7a00 	vldr	s15, [r3]
     b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     b72:	ee27 7a26 	vmul.f32	s14, s14, s13
     b76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     b7a:	495c      	ldr	r1, [pc, #368]	; (cec <getIMUdata()+0x2e4>)
     b7c:	ed91 2a00 	vldr	s4, [r1]
     b80:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b84:	ee02 7b04 	vmla.f64	d7, d2, d4
     b88:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     b8c:	4b58      	ldr	r3, [pc, #352]	; (cf0 <getIMUdata()+0x2e8>)
     b8e:	ed83 7a00 	vstr	s14, [r3]
  GyroY = (1.0 - B_gyro)*GyroY_prev + B_gyro*GyroY;
     b92:	4a58      	ldr	r2, [pc, #352]	; (cf4 <getIMUdata()+0x2ec>)
     b94:	ed92 2a00 	vldr	s4, [r2]
     b98:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b9c:	ee23 3a26 	vmul.f32	s6, s6, s13
     ba0:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     ba4:	ee02 3b04 	vmla.f64	d3, d2, d4
     ba8:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     bac:	4b52      	ldr	r3, [pc, #328]	; (cf8 <getIMUdata()+0x2f0>)
     bae:	ed83 3a00 	vstr	s6, [r3]
  GyroZ = (1.0 - B_gyro)*GyroZ_prev + B_gyro*GyroZ;
     bb2:	4b52      	ldr	r3, [pc, #328]	; (cfc <getIMUdata()+0x2f4>)
     bb4:	ed93 2a00 	vldr	s4, [r3]
     bb8:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     bbc:	ee26 6a26 	vmul.f32	s12, s12, s13
     bc0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     bc4:	ee02 6b04 	vmla.f64	d6, d2, d4
     bc8:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     bcc:	484c      	ldr	r0, [pc, #304]	; (d00 <getIMUdata()+0x2f8>)
     bce:	ed80 6a00 	vstr	s12, [r0]
  GyroX_prev = GyroX;
     bd2:	ed81 7a00 	vstr	s14, [r1]
  GyroY_prev = GyroY;
     bd6:	ed82 3a00 	vstr	s6, [r2]
  GyroZ_prev = GyroZ;
     bda:	ed83 6a00 	vstr	s12, [r3]

  //Magnetometer
  MagX = MgX/6.0; //uT
  MagY = MgY/6.0;
     bde:	ed9f 7a49 	vldr	s14, [pc, #292]	; d04 <getIMUdata()+0x2fc>
  MagZ = MgZ/6.0;
  //Correct the outputs with the calculated error values
  MagX = (MagX - MagErrorX)*MagScaleX;
  MagY = (MagY - MagErrorY)*MagScaleY;
     be2:	4b49      	ldr	r3, [pc, #292]	; (d08 <getIMUdata()+0x300>)
     be4:	ed93 6a00 	vldr	s12, [r3]
     be8:	ee37 6a46 	vsub.f32	s12, s14, s12
     bec:	4b47      	ldr	r3, [pc, #284]	; (d0c <getIMUdata()+0x304>)
     bee:	edd3 7a00 	vldr	s15, [r3]
     bf2:	ee26 6a27 	vmul.f32	s12, s12, s15
  MagZ = (MagZ - MagErrorZ)*MagScaleZ;
     bf6:	4b46      	ldr	r3, [pc, #280]	; (d10 <getIMUdata()+0x308>)
     bf8:	ed93 4a00 	vldr	s8, [r3]
     bfc:	ee37 4a44 	vsub.f32	s8, s14, s8
     c00:	4b44      	ldr	r3, [pc, #272]	; (d14 <getIMUdata()+0x30c>)
     c02:	edd3 7a00 	vldr	s15, [r3]
     c06:	ee24 4a27 	vmul.f32	s8, s8, s15
  //LP filter magnetometer data
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     c0a:	4b43      	ldr	r3, [pc, #268]	; (d18 <getIMUdata()+0x310>)
     c0c:	edd3 4a00 	vldr	s9, [r3]
     c10:	eeb7 3ae4 	vcvt.f64.f32	d3, s9
     c14:	ee35 5b43 	vsub.f64	d5, d5, d3
  MagX = (MagX - MagErrorX)*MagScaleX;
     c18:	4b40      	ldr	r3, [pc, #256]	; (d1c <getIMUdata()+0x314>)
     c1a:	edd3 7a00 	vldr	s15, [r3]
     c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
     c22:	4b3f      	ldr	r3, [pc, #252]	; (d20 <getIMUdata()+0x318>)
     c24:	edd3 7a00 	vldr	s15, [r3]
     c28:	ee27 7a27 	vmul.f32	s14, s14, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     c2c:	ee27 7a24 	vmul.f32	s14, s14, s9
     c30:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     c34:	493b      	ldr	r1, [pc, #236]	; (d24 <getIMUdata()+0x31c>)
     c36:	ed91 3a00 	vldr	s6, [r1]
     c3a:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     c3e:	ee03 7b05 	vmla.f64	d7, d3, d5
     c42:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     c46:	4b38      	ldr	r3, [pc, #224]	; (d28 <getIMUdata()+0x320>)
     c48:	ed83 7a00 	vstr	s14, [r3]
  MagY = (1.0 - B_mag)*MagY_prev + B_mag*MagY;
     c4c:	4a37      	ldr	r2, [pc, #220]	; (d2c <getIMUdata()+0x324>)
     c4e:	ed92 3a00 	vldr	s6, [r2]
     c52:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     c56:	ee26 6a24 	vmul.f32	s12, s12, s9
     c5a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     c5e:	ee03 6b05 	vmla.f64	d6, d3, d5
     c62:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     c66:	4b32      	ldr	r3, [pc, #200]	; (d30 <getIMUdata()+0x328>)
     c68:	ed83 6a00 	vstr	s12, [r3]
  MagZ = (1.0 - B_mag)*MagZ_prev + B_mag*MagZ;
     c6c:	4b31      	ldr	r3, [pc, #196]	; (d34 <getIMUdata()+0x32c>)
     c6e:	ed93 3a00 	vldr	s6, [r3]
     c72:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     c76:	ee24 4a24 	vmul.f32	s8, s8, s9
     c7a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     c7e:	ee03 4b05 	vmla.f64	d4, d3, d5
     c82:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     c86:	482c      	ldr	r0, [pc, #176]	; (d38 <getIMUdata()+0x330>)
     c88:	ed80 4a00 	vstr	s8, [r0]
  MagX_prev = MagX;
     c8c:	ed81 7a00 	vstr	s14, [r1]
  MagY_prev = MagY;
     c90:	ed82 6a00 	vstr	s12, [r2]
  MagZ_prev = MagZ;
     c94:	ed83 4a00 	vstr	s8, [r3]
}
     c98:	b009      	add	sp, #36	; 0x24
     c9a:	f85d fb04 	ldr.w	pc, [sp], #4
     c9e:	bf00      	nop
     ca0:	00000000 	.word	0x00000000
     ca4:	3f100000 	.word	0x3f100000
     ca8:	00000000 	.word	0x00000000
     cac:	40606000 	.word	0x40606000
     cb0:	20005088 	.word	0x20005088
     cb4:	20004088 	.word	0x20004088
     cb8:	2000312c 	.word	0x2000312c
     cbc:	20003130 	.word	0x20003130
     cc0:	20003128 	.word	0x20003128
     cc4:	20004090 	.word	0x20004090
     cc8:	2000408c 	.word	0x2000408c
     ccc:	20004098 	.word	0x20004098
     cd0:	20004094 	.word	0x20004094
     cd4:	200040a0 	.word	0x200040a0
     cd8:	2000409c 	.word	0x2000409c
     cdc:	2000314c 	.word	0x2000314c
     ce0:	20003150 	.word	0x20003150
     ce4:	20003134 	.word	0x20003134
     ce8:	20003148 	.word	0x20003148
     cec:	200040a8 	.word	0x200040a8
     cf0:	200040a4 	.word	0x200040a4
     cf4:	200040b0 	.word	0x200040b0
     cf8:	200040ac 	.word	0x200040ac
     cfc:	200040b8 	.word	0x200040b8
     d00:	200040b4 	.word	0x200040b4
     d04:	00000000 	.word	0x00000000
     d08:	200040c0 	.word	0x200040c0
     d0c:	2000317c 	.word	0x2000317c
     d10:	200040c4 	.word	0x200040c4
     d14:	20003180 	.word	0x20003180
     d18:	2000313c 	.word	0x2000313c
     d1c:	200040bc 	.word	0x200040bc
     d20:	20003178 	.word	0x20003178
     d24:	200040cc 	.word	0x200040cc
     d28:	200040c8 	.word	0x200040c8
     d2c:	200040d4 	.word	0x200040d4
     d30:	200040d0 	.word	0x200040d0
     d34:	200040dc 	.word	0x200040dc
     d38:	200040d8 	.word	0x200040d8
     d3c:	00000000 	.word	0x00000000

00000d40 <setDesStateSerial(int)>:
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
}

void setDesStateSerial(int controlledAxis) {
     d40:	b538      	push	{r3, r4, r5, lr}
     d42:	ed2d 8b02 	vpush	{d8}
     d46:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     d48:	f00d fe06 	bl	e958 <usb_serial_available>
	//DESCRIPTION: Sets the desired pitch and roll angles based on user input over USB
	if (Serial.available()) {
     d4c:	bb50      	cbnz	r0, da4 <setDesStateSerial(int)+0x64>
		}
	}
	
	float desiredAngle = 0;

	if (useSineWave) {
     d4e:	4b24      	ldr	r3, [pc, #144]	; (de0 <setDesStateSerial(int)+0xa0>)
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b3ab      	cbz	r3, dc0 <setDesStateSerial(int)+0x80>
		sineFrequency = static_cast<float>(serialInputValue);
     d54:	4b23      	ldr	r3, [pc, #140]	; (de4 <setDesStateSerial(int)+0xa4>)
     d56:	ed93 7a00 	vldr	s14, [r3]
     d5a:	4b23      	ldr	r3, [pc, #140]	; (de8 <setDesStateSerial(int)+0xa8>)
     d5c:	ed83 7a00 	vstr	s14, [r3]
		desiredAngle = 10*sin(2*PI*sineFrequency*sineTime);    // Set the output to be a sin wave between -5 and 5 degrees
     d60:	4d22      	ldr	r5, [pc, #136]	; (dec <setDesStateSerial(int)+0xac>)
     d62:	ed95 8a00 	vldr	s16, [r5]
     d66:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     d6a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; dd8 <setDesStateSerial(int)+0x98>
     d6e:	ee27 7b06 	vmul.f64	d7, d7, d6
     d72:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     d76:	ee27 0b00 	vmul.f64	d0, d7, d0
     d7a:	f00e fbad 	bl	f4d8 <sin>
     d7e:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     d82:	ee20 0b07 	vmul.f64	d0, d0, d7
     d86:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		sineTime = sineTime + 1/2000.0f;
     d8a:	eddf 7a19 	vldr	s15, [pc, #100]	; df0 <setDesStateSerial(int)+0xb0>
     d8e:	ee78 7a27 	vadd.f32	s15, s16, s15
     d92:	edc5 7a00 	vstr	s15, [r5]
	}
	else {
		desiredAngle = static_cast<float>(serialInputValue);
	}

	switch (controlledAxis) {
     d96:	2c01      	cmp	r4, #1
     d98:	d016      	beq.n	dc8 <setDesStateSerial(int)+0x88>
     d9a:	2c02      	cmp	r4, #2
     d9c:	d018      	beq.n	dd0 <setDesStateSerial(int)+0x90>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     d9e:	ecbd 8b02 	vpop	{d8}
     da2:	bd38      	pop	{r3, r4, r5, pc}
		serialInputValue = Serial.parseFloat();
     da4:	4813      	ldr	r0, [pc, #76]	; (df4 <setDesStateSerial(int)+0xb4>)
     da6:	f00b fcd5 	bl	c754 <Stream::parseFloat()>
     daa:	4b0e      	ldr	r3, [pc, #56]	; (de4 <setDesStateSerial(int)+0xa4>)
     dac:	ed83 0a00 	vstr	s0, [r3]
		while (Serial.available() !=0) {
     db0:	e001      	b.n	db6 <setDesStateSerial(int)+0x76>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     db2:	f00d fe0f 	bl	e9d4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
     db6:	f00d fdcf 	bl	e958 <usb_serial_available>
     dba:	2800      	cmp	r0, #0
     dbc:	d1f9      	bne.n	db2 <setDesStateSerial(int)+0x72>
     dbe:	e7c6      	b.n	d4e <setDesStateSerial(int)+0xe>
		desiredAngle = static_cast<float>(serialInputValue);
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <setDesStateSerial(int)+0xa4>)
     dc2:	ed93 0a00 	vldr	s0, [r3]
     dc6:	e7e6      	b.n	d96 <setDesStateSerial(int)+0x56>
			roll_des = desiredAngle;
     dc8:	4b0b      	ldr	r3, [pc, #44]	; (df8 <setDesStateSerial(int)+0xb8>)
     dca:	ed83 0a00 	vstr	s0, [r3]
			break;
     dce:	e7e6      	b.n	d9e <setDesStateSerial(int)+0x5e>
			pitch_des = desiredAngle;
     dd0:	4b0a      	ldr	r3, [pc, #40]	; (dfc <setDesStateSerial(int)+0xbc>)
     dd2:	ed83 0a00 	vstr	s0, [r3]
}
     dd6:	e7e2      	b.n	d9e <setDesStateSerial(int)+0x5e>
     dd8:	54442d18 	.word	0x54442d18
     ddc:	401921fb 	.word	0x401921fb
     de0:	200038d6 	.word	0x200038d6
     de4:	200052c0 	.word	0x200052c0
     de8:	200052e4 	.word	0x200052e4
     dec:	200052e8 	.word	0x200052e8
     df0:	3a03126f 	.word	0x3a03126f
     df4:	20003184 	.word	0x20003184
     df8:	200050e0 	.word	0x200050e0
     dfc:	200050b8 	.word	0x200050b8

00000e00 <performSineSweep(int)>:

void performSineSweep(int controlledAxis) {
     e00:	b510      	push	{r4, lr}
     e02:	ed2d 8b06 	vpush	{d8-d10}
     e06:	4604      	mov	r4, r0
	//DESCRIPTION: Performs a sine sweep from minFreq (Hz) to maxFreq (Hz) over sweepTime (seconds)
	float desiredAngle = 0;
  float amp = 10; 		// Sine wave amplitude in degrees
	desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     e08:	4b2d      	ldr	r3, [pc, #180]	; (ec0 <performSineSweep(int)+0xc0>)
     e0a:	edd3 aa00 	vldr	s21, [r3]
     e0e:	4b2d      	ldr	r3, [pc, #180]	; (ec4 <performSineSweep(int)+0xc4>)
     e10:	edd3 8a00 	vldr	s17, [r3]
     e14:	4b2c      	ldr	r3, [pc, #176]	; (ec8 <performSineSweep(int)+0xc8>)
     e16:	ed93 aa00 	vldr	s20, [r3]
     e1a:	4b2c      	ldr	r3, [pc, #176]	; (ecc <performSineSweep(int)+0xcc>)
     e1c:	ed93 8a00 	vldr	s16, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     e20:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
     e24:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
     e28:	eeb0 0b49 	vmov.f64	d0, d9
     e2c:	f00e f85c 	bl	eee8 <pow>
	if (sineTime > sweepTime) {
     e30:	eeb4 aac8 	vcmpe.f32	s20, s16
     e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e38:	d42f      	bmi.n	e9a <performSineSweep(int)+0x9a>
     e3a:	eeb0 5b40 	vmov.f64	d5, d0
     e3e:	eeb7 7aca 	vcvt.f64.f32	d7, s20
	desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     e42:	ee3a 6ae8 	vsub.f32	s12, s21, s17
     e46:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     e4a:	ed9f 4b19 	vldr	d4, [pc, #100]	; eb0 <performSineSweep(int)+0xb0>
     e4e:	ee26 6b04 	vmul.f64	d6, d6, d4
     e52:	ee27 7b07 	vmul.f64	d7, d7, d7
     e56:	ee86 4b07 	vdiv.f64	d4, d6, d7
     e5a:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
     e5e:	ed9f 6b16 	vldr	d6, [pc, #88]	; eb8 <performSineSweep(int)+0xb8>
     e62:	ee27 7b06 	vmul.f64	d7, d7, d6
     e66:	ee27 0b09 	vmul.f64	d0, d7, d9
     e6a:	ee04 0b05 	vmla.f64	d0, d4, d5
     e6e:	f00e fb33 	bl	f4d8 <sin>
     e72:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     e76:	ee20 0b07 	vmul.f64	d0, d0, d7
     e7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		desiredAngle = 0;
	}
	sineTime = sineTime + 1/2000.0f;
     e7e:	eddf 7a14 	vldr	s15, [pc, #80]	; ed0 <performSineSweep(int)+0xd0>
     e82:	ee38 8a27 	vadd.f32	s16, s16, s15
     e86:	4b11      	ldr	r3, [pc, #68]	; (ecc <performSineSweep(int)+0xcc>)
     e88:	ed83 8a00 	vstr	s16, [r3]

	switch (controlledAxis) {
     e8c:	2c01      	cmp	r4, #1
     e8e:	d007      	beq.n	ea0 <performSineSweep(int)+0xa0>
     e90:	2c02      	cmp	r4, #2
     e92:	d009      	beq.n	ea8 <performSineSweep(int)+0xa8>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     e94:	ecbd 8b06 	vpop	{d8-d10}
     e98:	bd10      	pop	{r4, pc}
		desiredAngle = 0;
     e9a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; ed4 <performSineSweep(int)+0xd4>
     e9e:	e7ee      	b.n	e7e <performSineSweep(int)+0x7e>
			roll_des = desiredAngle;
     ea0:	4b0d      	ldr	r3, [pc, #52]	; (ed8 <performSineSweep(int)+0xd8>)
     ea2:	ed83 0a00 	vstr	s0, [r3]
			break;
     ea6:	e7f5      	b.n	e94 <performSineSweep(int)+0x94>
			pitch_des = desiredAngle;
     ea8:	4b0c      	ldr	r3, [pc, #48]	; (edc <performSineSweep(int)+0xdc>)
     eaa:	ed83 0a00 	vstr	s0, [r3]
}
     eae:	e7f1      	b.n	e94 <performSineSweep(int)+0x94>
     eb0:	54442d18 	.word	0x54442d18
     eb4:	400921fb 	.word	0x400921fb
     eb8:	54442d18 	.word	0x54442d18
     ebc:	401921fb 	.word	0x401921fb
     ec0:	2000384c 	.word	0x2000384c
     ec4:	20003898 	.word	0x20003898
     ec8:	200038b8 	.word	0x200038b8
     ecc:	200052e8 	.word	0x200052e8
     ed0:	3a03126f 	.word	0x3a03126f
     ed4:	00000000 	.word	0x00000000
     ed8:	200050e0 	.word	0x200050e0
     edc:	200050b8 	.word	0x200050b8

00000ee0 <rollStep()>:

void rollStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     ee0:	4b0a      	ldr	r3, [pc, #40]	; (f0c <rollStep()+0x2c>)
     ee2:	681b      	ldr	r3, [r3, #0]
     ee4:	f240 42e1 	movw	r2, #1249	; 0x4e1
     ee8:	4293      	cmp	r3, r2
     eea:	dd0c      	ble.n	f06 <rollStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     eec:	f240 62d6 	movw	r2, #1750	; 0x6d6
     ef0:	4293      	cmp	r3, r2
     ef2:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     ef6:	ed9f 7a06 	vldr	s14, [pc, #24]	; f10 <rollStep()+0x30>
     efa:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	roll_des = desiredAngle;
     efe:	4b05      	ldr	r3, [pc, #20]	; (f14 <rollStep()+0x34>)
     f00:	edc3 7a00 	vstr	s15, [r3]
}
     f04:	4770      	bx	lr
		desiredAngle = 15.0f;
     f06:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     f0a:	e7f8      	b.n	efe <rollStep()+0x1e>
     f0c:	20004f58 	.word	0x20004f58
     f10:	00000000 	.word	0x00000000
     f14:	200050e0 	.word	0x200050e0

00000f18 <pitchStep()>:
void pitchStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     f18:	4b0a      	ldr	r3, [pc, #40]	; (f44 <pitchStep()+0x2c>)
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	f240 42e1 	movw	r2, #1249	; 0x4e1
     f20:	4293      	cmp	r3, r2
     f22:	dd0c      	ble.n	f3e <pitchStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     f24:	f240 62d6 	movw	r2, #1750	; 0x6d6
     f28:	4293      	cmp	r3, r2
     f2a:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     f2e:	ed9f 7a06 	vldr	s14, [pc, #24]	; f48 <pitchStep()+0x30>
     f32:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	pitch_des = desiredAngle;
     f36:	4b05      	ldr	r3, [pc, #20]	; (f4c <pitchStep()+0x34>)
     f38:	edc3 7a00 	vstr	s15, [r3]
}
     f3c:	4770      	bx	lr
		desiredAngle = 15.0f;
     f3e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     f42:	e7f8      	b.n	f36 <pitchStep()+0x1e>
     f44:	20004f58 	.word	0x20004f58
     f48:	00000000 	.word	0x00000000
     f4c:	200050b8 	.word	0x200050b8

00000f50 <getDesState()>:
   * RC pwm commands and scaling them to be within our limits defined in setup. thro_des stays within 0 to 1 range.
   * roll_des and pitch_des are scaled to be within max roll/pitch amount in either degrees (angle mode) or degrees/sec
   * (rate mode). yaw_des is scaled to be within max yaw in degrees/sec. Also creates roll_passthru, pitch_passthru, and
   * yaw_passthru variables, to be used in commanding motors/servos with direct unstabilized commands in controlMixer().
   */
  thro_des = (channel_1_pwm - 1000.0)/1000.0; //Between 0 and 1
     f50:	4baf      	ldr	r3, [pc, #700]	; (1210 <getDesState()+0x2c0>)
     f52:	ed93 7a00 	vldr	s14, [r3]
     f56:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f5a:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 11f0 <getDesState()+0x2a0>
     f5e:	ee37 7b45 	vsub.f64	d7, d7, d5
     f62:	ee87 6b05 	vdiv.f64	d6, d7, d5
     f66:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  roll_des = (channel_2_pwm - 1500.0)/500.0; //Between -1 and 1
     f6a:	4baa      	ldr	r3, [pc, #680]	; (1214 <getDesState()+0x2c4>)
     f6c:	ed93 5a00 	vldr	s10, [r3]
     f70:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f74:	ed9f 3ba0 	vldr	d3, [pc, #640]	; 11f8 <getDesState()+0x2a8>
     f78:	ee35 5b43 	vsub.f64	d5, d5, d3
     f7c:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 1200 <getDesState()+0x2b0>
     f80:	ee85 7b04 	vdiv.f64	d7, d5, d4
     f84:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  pitch_des = (channel_3_pwm - 1500.0)/500.0; //Between -1 and 1
     f88:	4ba3      	ldr	r3, [pc, #652]	; (1218 <getDesState()+0x2c8>)
     f8a:	ed93 5a00 	vldr	s10, [r3]
     f8e:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     f92:	ee35 5b43 	vsub.f64	d5, d5, d3
     f96:	ee85 1b04 	vdiv.f64	d1, d5, d4
     f9a:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
  yaw_des = (channel_4_pwm - 1500.0)/500.0; //Between -1 and 1
     f9e:	4b9f      	ldr	r3, [pc, #636]	; (121c <getDesState()+0x2cc>)
     fa0:	ed93 5a00 	vldr	s10, [r3]
     fa4:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
     fa8:	ee35 5b43 	vsub.f64	d5, d5, d3
     fac:	ee85 2b04 	vdiv.f64	d2, d5, d4
     fb0:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  roll_passthru = roll_des/2.0; //Between -0.5 and 0.5
     fb4:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
     fb8:	ee27 5a03 	vmul.f32	s10, s14, s6
  pitch_passthru = pitch_des/2.0; //Between -0.5 and 0.5
     fbc:	ee61 1a03 	vmul.f32	s3, s2, s6
  yaw_passthru = yaw_des/2.0; //Between -0.5 and 0.5
     fc0:	ee22 3a03 	vmul.f32	s6, s4, s6

  //Constrain within normalized bounds
  thro_des = constrain(thro_des, 0.0, 1.0); //Between 0 and 1
     fc4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
     fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fcc:	d40c      	bmi.n	fe8 <getDesState()+0x98>
     fce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     fd2:	eeb4 6ae7 	vcmpe.f32	s12, s15
     fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fda:	dd02      	ble.n	fe2 <getDesState()+0x92>
     fdc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     fe0:	e004      	b.n	fec <getDesState()+0x9c>
     fe2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     fe6:	e001      	b.n	fec <getDesState()+0x9c>
     fe8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 1208 <getDesState()+0x2b8>
     fec:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     ff0:	4b8b      	ldr	r3, [pc, #556]	; (1220 <getDesState()+0x2d0>)
     ff2:	ed83 6a00 	vstr	s12, [r3]
  roll_des = constrain(roll_des, -1.0, 1.0)*maxRoll; //Between -maxRoll and +maxRoll
     ff6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
     ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
     ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1002:	d40c      	bmi.n	101e <getDesState()+0xce>
    1004:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1008:	eeb4 7ae7 	vcmpe.f32	s14, s15
    100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1010:	dd02      	ble.n	1018 <getDesState()+0xc8>
    1012:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    1016:	e004      	b.n	1022 <getDesState()+0xd2>
    1018:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    101c:	e001      	b.n	1022 <getDesState()+0xd2>
    101e:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    1022:	4b80      	ldr	r3, [pc, #512]	; (1224 <getDesState()+0x2d4>)
    1024:	ed93 4a00 	vldr	s8, [r3]
    1028:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    102c:	ee24 4b07 	vmul.f64	d4, d4, d7
    1030:	eef7 3bc4 	vcvt.f32.f64	s7, d4
    1034:	4b7c      	ldr	r3, [pc, #496]	; (1228 <getDesState()+0x2d8>)
    1036:	edc3 3a00 	vstr	s7, [r3]
  pitch_des = constrain(pitch_des, -1.0, 1.0)*maxPitch; //Between -maxPitch and +maxPitch
    103a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    103e:	eeb4 1ae7 	vcmpe.f32	s2, s15
    1042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1046:	d40c      	bmi.n	1062 <getDesState()+0x112>
    1048:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    104c:	eeb4 1ae7 	vcmpe.f32	s2, s15
    1050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1054:	dd02      	ble.n	105c <getDesState()+0x10c>
    1056:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    105a:	e004      	b.n	1066 <getDesState()+0x116>
    105c:	eeb7 7ac1 	vcvt.f64.f32	d7, s2
    1060:	e001      	b.n	1066 <getDesState()+0x116>
    1062:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    1066:	4b71      	ldr	r3, [pc, #452]	; (122c <getDesState()+0x2dc>)
    1068:	ed93 4a00 	vldr	s8, [r3]
    106c:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1070:	ee24 4b07 	vmul.f64	d4, d4, d7
    1074:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1078:	4b6d      	ldr	r3, [pc, #436]	; (1230 <getDesState()+0x2e0>)
    107a:	ed83 4a00 	vstr	s8, [r3]
  yaw_des = constrain(yaw_des, -1.0, 1.0)*maxYaw; //Between -maxYaw and +maxYaw
    107e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1082:	eeb4 2ae7 	vcmpe.f32	s4, s15
    1086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    108a:	d40c      	bmi.n	10a6 <getDesState()+0x156>
    108c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1090:	eeb4 2ae7 	vcmpe.f32	s4, s15
    1094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1098:	dd02      	ble.n	10a0 <getDesState()+0x150>
    109a:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    109e:	e004      	b.n	10aa <getDesState()+0x15a>
    10a0:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    10a4:	e001      	b.n	10aa <getDesState()+0x15a>
    10a6:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    10aa:	4b62      	ldr	r3, [pc, #392]	; (1234 <getDesState()+0x2e4>)
    10ac:	ed93 7a00 	vldr	s14, [r3]
    10b0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    10b4:	ee27 7b02 	vmul.f64	d7, d7, d2
    10b8:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    10bc:	4b5e      	ldr	r3, [pc, #376]	; (1238 <getDesState()+0x2e8>)
    10be:	ed83 7a00 	vstr	s14, [r3]
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    10c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    10c6:	eeb4 5ae7 	vcmpe.f32	s10, s15
    10ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ce:	d409      	bmi.n	10e4 <getDesState()+0x194>
    10d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    10d4:	eeb4 5ae7 	vcmpe.f32	s10, s15
    10d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10dc:	dc1a      	bgt.n	1114 <getDesState()+0x1c4>
    10de:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    10e2:	e001      	b.n	10e8 <getDesState()+0x198>
    10e4:	eebe 5b00 	vmov.f64	d5, #224	; 0xbf000000 -0.5
    10e8:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    10ec:	4b53      	ldr	r3, [pc, #332]	; (123c <getDesState()+0x2ec>)
    10ee:	ed83 5a00 	vstr	s10, [r3]
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10f2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    10f6:	eef4 1ae7 	vcmpe.f32	s3, s15
    10fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10fe:	d40c      	bmi.n	111a <getDesState()+0x1ca>
    1100:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1104:	eef4 1ae7 	vcmpe.f32	s3, s15
    1108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    110c:	dc1d      	bgt.n	114a <getDesState()+0x1fa>
    110e:	eeb7 6ae1 	vcvt.f64.f32	d6, s3
    1112:	e004      	b.n	111e <getDesState()+0x1ce>
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    1114:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
    1118:	e7e6      	b.n	10e8 <getDesState()+0x198>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    111a:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    111e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    1122:	4b47      	ldr	r3, [pc, #284]	; (1240 <getDesState()+0x2f0>)
    1124:	ed83 6a00 	vstr	s12, [r3]
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1128:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    112c:	eeb4 3ae7 	vcmpe.f32	s6, s15
    1130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1134:	d40c      	bmi.n	1150 <getDesState()+0x200>
    1136:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    113a:	eeb4 3ae7 	vcmpe.f32	s6, s15
    113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1142:	dc1d      	bgt.n	1180 <getDesState()+0x230>
    1144:	eeb7 7ac3 	vcvt.f64.f32	d7, s6
    1148:	e004      	b.n	1154 <getDesState()+0x204>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    114a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    114e:	e7e6      	b.n	111e <getDesState()+0x1ce>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1150:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    1154:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    1158:	4b3a      	ldr	r3, [pc, #232]	; (1244 <getDesState()+0x2f4>)
    115a:	ed83 7a00 	vstr	s14, [r3]

	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    115e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1162:	eef4 3ae7 	vcmpe.f32	s7, s15
    1166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    116a:	d40f      	bmi.n	118c <getDesState()+0x23c>
    116c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1170:	eef4 3ae7 	vcmpe.f32	s7, s15
    1174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1178:	dd05      	ble.n	1186 <getDesState()+0x236>
    117a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    117e:	e007      	b.n	1190 <getDesState()+0x240>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1180:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    1184:	e7e6      	b.n	1154 <getDesState()+0x204>
	alphaRoll_des = constrain(roll_des, -1.0, 1.0)*maxAlphaRoll;
    1186:	eeb7 6ae3 	vcvt.f64.f32	d6, s7
    118a:	e001      	b.n	1190 <getDesState()+0x240>
    118c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
    1190:	4b2d      	ldr	r3, [pc, #180]	; (1248 <getDesState()+0x2f8>)
    1192:	ed93 7a00 	vldr	s14, [r3]
    1196:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    119a:	ee27 7b06 	vmul.f64	d7, d7, d6
    119e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    11a2:	4b2a      	ldr	r3, [pc, #168]	; (124c <getDesState()+0x2fc>)
    11a4:	ed83 7a00 	vstr	s14, [r3]
	betaPitch_des = constrain(pitch_des, -1.0, 1.0)*maxBetaPitch;
    11a8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    11ac:	eeb4 4ae7 	vcmpe.f32	s8, s15
    11b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11b4:	d40c      	bmi.n	11d0 <getDesState()+0x280>
    11b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    11ba:	eeb4 4ae7 	vcmpe.f32	s8, s15
    11be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11c2:	dd02      	ble.n	11ca <getDesState()+0x27a>
    11c4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    11c8:	e004      	b.n	11d4 <getDesState()+0x284>
    11ca:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    11ce:	e001      	b.n	11d4 <getDesState()+0x284>
    11d0:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    11d4:	4b1e      	ldr	r3, [pc, #120]	; (1250 <getDesState()+0x300>)
    11d6:	ed93 7a00 	vldr	s14, [r3]
    11da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    11de:	ee27 7b04 	vmul.f64	d7, d7, d4
    11e2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    11e6:	4b1b      	ldr	r3, [pc, #108]	; (1254 <getDesState()+0x304>)
    11e8:	ed83 7a00 	vstr	s14, [r3]
}
    11ec:	4770      	bx	lr
    11ee:	bf00      	nop
    11f0:	00000000 	.word	0x00000000
    11f4:	408f4000 	.word	0x408f4000
    11f8:	00000000 	.word	0x00000000
    11fc:	40977000 	.word	0x40977000
    1200:	00000000 	.word	0x00000000
    1204:	407f4000 	.word	0x407f4000
	...
    1210:	20004f18 	.word	0x20004f18
    1214:	20004f24 	.word	0x20004f24
    1218:	20004f30 	.word	0x20004f30
    121c:	20004f3c 	.word	0x20004f3c
    1220:	200052f8 	.word	0x200052f8
    1224:	20003854 	.word	0x20003854
    1228:	200050e0 	.word	0x200050e0
    122c:	20003850 	.word	0x20003850
    1230:	200050b8 	.word	0x200050b8
    1234:	20003858 	.word	0x20003858
    1238:	20005318 	.word	0x20005318
    123c:	200050e4 	.word	0x200050e4
    1240:	200050bc 	.word	0x200050bc
    1244:	2000531c 	.word	0x2000531c
    1248:	20003840 	.word	0x20003840
    124c:	20004ed8 	.word	0x20004ed8
    1250:	20003844 	.word	0x20003844
    1254:	20004eec 	.word	0x20004eec

00001258 <scaleCommands()>:

void scaleCommands() {
    1258:	b4f0      	push	{r4, r5, r6, r7}
   * mX_command_PWM are updated here which are used to command the motors in commandMotors(). sX_command_PWM are updated 
   * which are used to command the servos.
   */
  //Scaled to 125us - 250us for oneshot125 protocol
  m1_command_PWM = m1_command_scaled*125 + 125;
  m2_command_PWM = m2_command_scaled*125 + 125;
    125a:	4b74      	ldr	r3, [pc, #464]	; (142c <scaleCommands()+0x1d4>)
    125c:	ed93 7a00 	vldr	s14, [r3]
    1260:	eddf 7a73 	vldr	s15, [pc, #460]	; 1430 <scaleCommands()+0x1d8>
    1264:	ee27 7a27 	vmul.f32	s14, s14, s15
    1268:	ee37 7a27 	vadd.f32	s14, s14, s15
    126c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    1270:	ee17 4a10 	vmov	r4, s14
  m3_command_PWM = m3_command_scaled*125 + 125;
    1274:	4b6f      	ldr	r3, [pc, #444]	; (1434 <scaleCommands()+0x1dc>)
    1276:	ed93 7a00 	vldr	s14, [r3]
    127a:	ee27 7a27 	vmul.f32	s14, s14, s15
    127e:	ee37 7a27 	vadd.f32	s14, s14, s15
    1282:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    1286:	ee17 0a10 	vmov	r0, s14
  m4_command_PWM = m4_command_scaled*125 + 125;
    128a:	4b6b      	ldr	r3, [pc, #428]	; (1438 <scaleCommands()+0x1e0>)
    128c:	ed93 7a00 	vldr	s14, [r3]
    1290:	ee27 7a27 	vmul.f32	s14, s14, s15
    1294:	ee37 7a27 	vadd.f32	s14, s14, s15
    1298:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    129c:	ee17 1a10 	vmov	r1, s14
  m5_command_PWM = m5_command_scaled*125 + 125;
    12a0:	4b66      	ldr	r3, [pc, #408]	; (143c <scaleCommands()+0x1e4>)
    12a2:	ed93 7a00 	vldr	s14, [r3]
    12a6:	ee27 7a27 	vmul.f32	s14, s14, s15
    12aa:	ee37 7a27 	vadd.f32	s14, s14, s15
    12ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    12b2:	ee17 2a10 	vmov	r2, s14
  m6_command_PWM = m6_command_scaled*125 + 125;
    12b6:	4b62      	ldr	r3, [pc, #392]	; (1440 <scaleCommands()+0x1e8>)
    12b8:	ed93 7a00 	vldr	s14, [r3]
    12bc:	ee27 7a27 	vmul.f32	s14, s14, s15
    12c0:	ee37 7a27 	vadd.f32	s14, s14, s15
    12c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    12c8:	ee17 3a10 	vmov	r3, s14
  m1_command_PWM = m1_command_scaled*125 + 125;
    12cc:	4d5d      	ldr	r5, [pc, #372]	; (1444 <scaleCommands()+0x1ec>)
    12ce:	ed95 7a00 	vldr	s14, [r5]
    12d2:	ee27 7a27 	vmul.f32	s14, s14, s15
    12d6:	ee77 7a27 	vadd.f32	s15, s14, s15
    12da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12de:	ee17 5a90 	vmov	r5, s15
  //Constrain commands to motors within oneshot125 bounds
  m1_command_PWM = constrain(m1_command_PWM, 125, 250);
    12e2:	2dfa      	cmp	r5, #250	; 0xfa
    12e4:	bfa8      	it	ge
    12e6:	25fa      	movge	r5, #250	; 0xfa
    12e8:	2d7d      	cmp	r5, #125	; 0x7d
    12ea:	bfb8      	it	lt
    12ec:	257d      	movlt	r5, #125	; 0x7d
    12ee:	4e56      	ldr	r6, [pc, #344]	; (1448 <scaleCommands()+0x1f0>)
    12f0:	6035      	str	r5, [r6, #0]
  m2_command_PWM = constrain(m2_command_PWM, 125, 250);
    12f2:	2cfa      	cmp	r4, #250	; 0xfa
    12f4:	bfa8      	it	ge
    12f6:	24fa      	movge	r4, #250	; 0xfa
    12f8:	2c7d      	cmp	r4, #125	; 0x7d
    12fa:	bfb8      	it	lt
    12fc:	247d      	movlt	r4, #125	; 0x7d
    12fe:	4d53      	ldr	r5, [pc, #332]	; (144c <scaleCommands()+0x1f4>)
    1300:	602c      	str	r4, [r5, #0]
  m3_command_PWM = constrain(m3_command_PWM, 125, 250);
    1302:	28fa      	cmp	r0, #250	; 0xfa
    1304:	bfa8      	it	ge
    1306:	20fa      	movge	r0, #250	; 0xfa
    1308:	287d      	cmp	r0, #125	; 0x7d
    130a:	bfb8      	it	lt
    130c:	207d      	movlt	r0, #125	; 0x7d
    130e:	4c50      	ldr	r4, [pc, #320]	; (1450 <scaleCommands()+0x1f8>)
    1310:	6020      	str	r0, [r4, #0]
  m4_command_PWM = constrain(m4_command_PWM, 125, 250);
    1312:	29fa      	cmp	r1, #250	; 0xfa
    1314:	bfa8      	it	ge
    1316:	21fa      	movge	r1, #250	; 0xfa
    1318:	297d      	cmp	r1, #125	; 0x7d
    131a:	bfb8      	it	lt
    131c:	217d      	movlt	r1, #125	; 0x7d
    131e:	484d      	ldr	r0, [pc, #308]	; (1454 <scaleCommands()+0x1fc>)
    1320:	6001      	str	r1, [r0, #0]
  m5_command_PWM = constrain(m5_command_PWM, 125, 250);
    1322:	2afa      	cmp	r2, #250	; 0xfa
    1324:	bfa8      	it	ge
    1326:	22fa      	movge	r2, #250	; 0xfa
    1328:	2a7d      	cmp	r2, #125	; 0x7d
    132a:	bfb8      	it	lt
    132c:	227d      	movlt	r2, #125	; 0x7d
    132e:	494a      	ldr	r1, [pc, #296]	; (1458 <scaleCommands()+0x200>)
    1330:	600a      	str	r2, [r1, #0]
  m6_command_PWM = constrain(m6_command_PWM, 125, 250);
    1332:	2bfa      	cmp	r3, #250	; 0xfa
    1334:	bfa8      	it	ge
    1336:	23fa      	movge	r3, #250	; 0xfa
    1338:	2b7d      	cmp	r3, #125	; 0x7d
    133a:	bfb8      	it	lt
    133c:	237d      	movlt	r3, #125	; 0x7d
    133e:	4a47      	ldr	r2, [pc, #284]	; (145c <scaleCommands()+0x204>)
    1340:	6013      	str	r3, [r2, #0]

  //Scaled to 0-180 for servo library
  s1_command_PWM = s1_command_scaled*180;
  s2_command_PWM = s2_command_scaled*180;
    1342:	4b47      	ldr	r3, [pc, #284]	; (1460 <scaleCommands()+0x208>)
    1344:	edd3 7a00 	vldr	s15, [r3]
    1348:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1464 <scaleCommands()+0x20c>
    134c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1354:	ee17 5a90 	vmov	r5, s15
  s3_command_PWM = s3_command_scaled*180;
    1358:	4b43      	ldr	r3, [pc, #268]	; (1468 <scaleCommands()+0x210>)
    135a:	edd3 7a00 	vldr	s15, [r3]
    135e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1366:	ee17 4a90 	vmov	r4, s15
  s4_command_PWM = s4_command_scaled*180;
    136a:	4b40      	ldr	r3, [pc, #256]	; (146c <scaleCommands()+0x214>)
    136c:	edd3 7a00 	vldr	s15, [r3]
    1370:	ee67 7a87 	vmul.f32	s15, s15, s14
    1374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1378:	ee17 0a90 	vmov	r0, s15
  s5_command_PWM = s5_command_scaled*180;
    137c:	4b3c      	ldr	r3, [pc, #240]	; (1470 <scaleCommands()+0x218>)
    137e:	edd3 7a00 	vldr	s15, [r3]
    1382:	ee67 7a87 	vmul.f32	s15, s15, s14
    1386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    138a:	ee17 1a90 	vmov	r1, s15
  s6_command_PWM = s6_command_scaled*180;
    138e:	4b39      	ldr	r3, [pc, #228]	; (1474 <scaleCommands()+0x21c>)
    1390:	edd3 7a00 	vldr	s15, [r3]
    1394:	ee67 7a87 	vmul.f32	s15, s15, s14
    1398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    139c:	ee17 2a90 	vmov	r2, s15
  s7_command_PWM = s7_command_scaled*180;
    13a0:	4b35      	ldr	r3, [pc, #212]	; (1478 <scaleCommands()+0x220>)
    13a2:	edd3 7a00 	vldr	s15, [r3]
    13a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    13aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    13ae:	ee17 3a90 	vmov	r3, s15
  s1_command_PWM = s1_command_scaled*180;
    13b2:	4e32      	ldr	r6, [pc, #200]	; (147c <scaleCommands()+0x224>)
    13b4:	edd6 7a00 	vldr	s15, [r6]
    13b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    13bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    13c0:	ee17 6a90 	vmov	r6, s15
  //Constrain commands to servos within servo library bounds
  s1_command_PWM = constrain(s1_command_PWM, 0, 180);
    13c4:	2eb4      	cmp	r6, #180	; 0xb4
    13c6:	bfa8      	it	ge
    13c8:	26b4      	movge	r6, #180	; 0xb4
    13ca:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    13ce:	4f2c      	ldr	r7, [pc, #176]	; (1480 <scaleCommands()+0x228>)
    13d0:	603e      	str	r6, [r7, #0]
  s2_command_PWM = constrain(s2_command_PWM, 0, 180);
    13d2:	2db4      	cmp	r5, #180	; 0xb4
    13d4:	bfa8      	it	ge
    13d6:	25b4      	movge	r5, #180	; 0xb4
    13d8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    13dc:	4e29      	ldr	r6, [pc, #164]	; (1484 <scaleCommands()+0x22c>)
    13de:	6035      	str	r5, [r6, #0]
  s3_command_PWM = constrain(s3_command_PWM, 0, 180);
    13e0:	2cb4      	cmp	r4, #180	; 0xb4
    13e2:	bfa8      	it	ge
    13e4:	24b4      	movge	r4, #180	; 0xb4
    13e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    13ea:	4d27      	ldr	r5, [pc, #156]	; (1488 <scaleCommands()+0x230>)
    13ec:	602c      	str	r4, [r5, #0]
  s4_command_PWM = constrain(s4_command_PWM, 0, 180);
    13ee:	28b4      	cmp	r0, #180	; 0xb4
    13f0:	bfa8      	it	ge
    13f2:	20b4      	movge	r0, #180	; 0xb4
    13f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    13f8:	4c24      	ldr	r4, [pc, #144]	; (148c <scaleCommands()+0x234>)
    13fa:	6020      	str	r0, [r4, #0]
  s5_command_PWM = constrain(s5_command_PWM, 0, 180);
    13fc:	29b4      	cmp	r1, #180	; 0xb4
    13fe:	bfa8      	it	ge
    1400:	21b4      	movge	r1, #180	; 0xb4
    1402:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    1406:	4822      	ldr	r0, [pc, #136]	; (1490 <scaleCommands()+0x238>)
    1408:	6001      	str	r1, [r0, #0]
  s6_command_PWM = constrain(s6_command_PWM, 0, 180);
    140a:	2ab4      	cmp	r2, #180	; 0xb4
    140c:	bfa8      	it	ge
    140e:	22b4      	movge	r2, #180	; 0xb4
    1410:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1414:	491f      	ldr	r1, [pc, #124]	; (1494 <scaleCommands()+0x23c>)
    1416:	600a      	str	r2, [r1, #0]
  s7_command_PWM = constrain(s7_command_PWM, 0, 180);
    1418:	2bb4      	cmp	r3, #180	; 0xb4
    141a:	bfa8      	it	ge
    141c:	23b4      	movge	r3, #180	; 0xb4
    141e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1422:	4a1d      	ldr	r2, [pc, #116]	; (1498 <scaleCommands()+0x240>)
    1424:	6013      	str	r3, [r2, #0]
}
    1426:	bcf0      	pop	{r4, r5, r6, r7}
    1428:	4770      	bx	lr
    142a:	bf00      	nop
    142c:	20005064 	.word	0x20005064
    1430:	42fa0000 	.word	0x42fa0000
    1434:	2000506c 	.word	0x2000506c
    1438:	20005074 	.word	0x20005074
    143c:	2000507c 	.word	0x2000507c
    1440:	20005084 	.word	0x20005084
    1444:	2000505c 	.word	0x2000505c
    1448:	20005058 	.word	0x20005058
    144c:	20005060 	.word	0x20005060
    1450:	20005068 	.word	0x20005068
    1454:	20005070 	.word	0x20005070
    1458:	20005078 	.word	0x20005078
    145c:	20005080 	.word	0x20005080
    1460:	20005124 	.word	0x20005124
    1464:	43340000 	.word	0x43340000
    1468:	2000512c 	.word	0x2000512c
    146c:	20005134 	.word	0x20005134
    1470:	2000513c 	.word	0x2000513c
    1474:	20005144 	.word	0x20005144
    1478:	2000514c 	.word	0x2000514c
    147c:	2000511c 	.word	0x2000511c
    1480:	20005118 	.word	0x20005118
    1484:	20005120 	.word	0x20005120
    1488:	20005128 	.word	0x20005128
    148c:	20005130 	.word	0x20005130
    1490:	20005138 	.word	0x20005138
    1494:	20005140 	.word	0x20005140
    1498:	20005148 	.word	0x20005148
    149c:	00000000 	.word	0x00000000

000014a0 <getCommands()>:

void getCommands() {
    14a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    channel_4_pwm = getRadioPWM(4);
    channel_5_pwm = getRadioPWM(5);
    channel_6_pwm = getRadioPWM(6);
    
  #elif defined USE_SBUS_RX
    if (sbus.read(&sbusChannels[0], &sbusFailSafe, &sbusLostFrame))
    14a2:	4bc5      	ldr	r3, [pc, #788]	; (17b8 <getCommands()+0x318>)
    14a4:	4ac5      	ldr	r2, [pc, #788]	; (17bc <getCommands()+0x31c>)
    14a6:	49c6      	ldr	r1, [pc, #792]	; (17c0 <getCommands()+0x320>)
    14a8:	48c6      	ldr	r0, [pc, #792]	; (17c4 <getCommands()+0x324>)
    14aa:	f002 fc55 	bl	3d58 <SBUS::read(unsigned short*, bool*, bool*)>
    14ae:	2800      	cmp	r0, #0
    14b0:	f000 80bb 	beq.w	162a <getCommands()+0x18a>
    {
      //sBus scaling below is for Taranis-Plus and X4R-SB
      float scale = 0.615;  
      float bias  = 895.0; 
      channel_1_pwm_pre = sbusChannels[0] * scale + bias;
    14b4:	4bc2      	ldr	r3, [pc, #776]	; (17c0 <getCommands()+0x320>)
    14b6:	881a      	ldrh	r2, [r3, #0]
    14b8:	ee06 2a90 	vmov	s13, r2
    14bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14c0:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 17c8 <getCommands()+0x328>
    14c4:	ee66 6a87 	vmul.f32	s13, s13, s14
    14c8:	eddf 7ac0 	vldr	s15, [pc, #768]	; 17cc <getCommands()+0x32c>
    14cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14d0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14d4:	4abe      	ldr	r2, [pc, #760]	; (17d0 <getCommands()+0x330>)
    14d6:	edc2 6a00 	vstr	s13, [r2]
      channel_2_pwm_pre = sbusChannels[1] * scale + bias;
    14da:	885a      	ldrh	r2, [r3, #2]
    14dc:	ee06 2a90 	vmov	s13, r2
    14e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14e4:	ee66 6a87 	vmul.f32	s13, s13, s14
    14e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14ec:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14f0:	4ab8      	ldr	r2, [pc, #736]	; (17d4 <getCommands()+0x334>)
    14f2:	edc2 6a00 	vstr	s13, [r2]
      channel_3_pwm_pre = sbusChannels[2] * scale + bias;
    14f6:	889a      	ldrh	r2, [r3, #4]
    14f8:	ee06 2a90 	vmov	s13, r2
    14fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1500:	ee66 6a87 	vmul.f32	s13, s13, s14
    1504:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1508:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    150c:	4ab2      	ldr	r2, [pc, #712]	; (17d8 <getCommands()+0x338>)
    150e:	edc2 6a00 	vstr	s13, [r2]
      channel_4_pwm_pre = sbusChannels[3] * scale + bias;
    1512:	88da      	ldrh	r2, [r3, #6]
    1514:	ee06 2a90 	vmov	s13, r2
    1518:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    151c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1520:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1524:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1528:	4aac      	ldr	r2, [pc, #688]	; (17dc <getCommands()+0x33c>)
    152a:	edc2 6a00 	vstr	s13, [r2]
      channel_5_pwm = sbusChannels[4] * scale + bias;
    152e:	891a      	ldrh	r2, [r3, #8]
    1530:	ee06 2a90 	vmov	s13, r2
    1534:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1538:	ee66 6a87 	vmul.f32	s13, s13, s14
    153c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1540:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1544:	4aa6      	ldr	r2, [pc, #664]	; (17e0 <getCommands()+0x340>)
    1546:	edc2 6a00 	vstr	s13, [r2]
      channel_6_pwm = sbusChannels[5] * scale + bias; 
    154a:	895a      	ldrh	r2, [r3, #10]
    154c:	ee06 2a90 	vmov	s13, r2
    1550:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1554:	ee66 6a87 	vmul.f32	s13, s13, s14
    1558:	ee76 6aa7 	vadd.f32	s13, s13, s15
    155c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1560:	4aa0      	ldr	r2, [pc, #640]	; (17e4 <getCommands()+0x344>)
    1562:	edc2 6a00 	vstr	s13, [r2]
			channel_7_pwm = sbusChannels[6] * scale + bias;
    1566:	899a      	ldrh	r2, [r3, #12]
    1568:	ee06 2a90 	vmov	s13, r2
    156c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1570:	ee66 6a87 	vmul.f32	s13, s13, s14
    1574:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1578:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    157c:	4a9a      	ldr	r2, [pc, #616]	; (17e8 <getCommands()+0x348>)
    157e:	edc2 6a00 	vstr	s13, [r2]
			channel_8_pwm = sbusChannels[7] * scale + bias;
    1582:	89da      	ldrh	r2, [r3, #14]
    1584:	ee06 2a90 	vmov	s13, r2
    1588:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    158c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1590:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1594:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1598:	4a94      	ldr	r2, [pc, #592]	; (17ec <getCommands()+0x34c>)
    159a:	edc2 6a00 	vstr	s13, [r2]
			channel_9_pwm = sbusChannels[8] * scale + bias;
    159e:	8a1a      	ldrh	r2, [r3, #16]
    15a0:	ee06 2a90 	vmov	s13, r2
    15a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    15a8:	ee66 6a87 	vmul.f32	s13, s13, s14
    15ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
    15b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    15b4:	4a8e      	ldr	r2, [pc, #568]	; (17f0 <getCommands()+0x350>)
    15b6:	edc2 6a00 	vstr	s13, [r2]
			channel_10_pwm = sbusChannels[9] * scale + bias;
    15ba:	8a5a      	ldrh	r2, [r3, #18]
    15bc:	ee06 2a90 	vmov	s13, r2
    15c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    15c4:	ee66 6a87 	vmul.f32	s13, s13, s14
    15c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    15cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    15d0:	4a88      	ldr	r2, [pc, #544]	; (17f4 <getCommands()+0x354>)
    15d2:	edc2 6a00 	vstr	s13, [r2]
			channel_11_pwm = sbusChannels[10] * scale + bias;
    15d6:	8a9a      	ldrh	r2, [r3, #20]
    15d8:	ee06 2a90 	vmov	s13, r2
    15dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    15e0:	ee66 6a87 	vmul.f32	s13, s13, s14
    15e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    15e8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    15ec:	4a82      	ldr	r2, [pc, #520]	; (17f8 <getCommands()+0x358>)
    15ee:	edc2 6a00 	vstr	s13, [r2]
			channel_12_pwm = sbusChannels[11] * scale + bias;
    15f2:	8ada      	ldrh	r2, [r3, #22]
    15f4:	ee06 2a90 	vmov	s13, r2
    15f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    15fc:	ee66 6a87 	vmul.f32	s13, s13, s14
    1600:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1604:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1608:	4a7c      	ldr	r2, [pc, #496]	; (17fc <getCommands()+0x35c>)
    160a:	edc2 6a00 	vstr	s13, [r2]
			channel_13_pwm = sbusChannels[12] * scale + bias;
    160e:	8b1b      	ldrh	r3, [r3, #24]
    1610:	ee06 3a90 	vmov	s13, r3
    1614:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1618:	ee26 7a87 	vmul.f32	s14, s13, s14
    161c:	ee77 7a27 	vadd.f32	s15, s14, s15
    1620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1624:	4b76      	ldr	r3, [pc, #472]	; (1800 <getCommands()+0x360>)
    1626:	edc3 7a00 	vstr	s15, [r3]
    }
  #endif
  
  //Low-pass the critical commands and update previous values
  float b = 0.7; //Lower=slower, higher=noiser
  channel_1_pwm_pre = (1.0 - b)*channel_1_pwm_prev + b*channel_1_pwm_pre;
    162a:	4b76      	ldr	r3, [pc, #472]	; (1804 <getCommands()+0x364>)
    162c:	681d      	ldr	r5, [r3, #0]
    162e:	4b68      	ldr	r3, [pc, #416]	; (17d0 <getCommands()+0x330>)
    1630:	edd3 7a00 	vldr	s15, [r3]
    1634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1638:	eddf 5a73 	vldr	s11, [pc, #460]	; 1808 <getCommands()+0x368>
    163c:	ee27 7a25 	vmul.f32	s14, s14, s11
    1640:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1644:	ee06 5a90 	vmov	s13, r5
    1648:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    164c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 17b0 <getCommands()+0x310>
    1650:	ee04 7b06 	vmla.f64	d7, d4, d6
    1654:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1658:	ee17 0a90 	vmov	r0, s15
    165c:	edc3 7a00 	vstr	s15, [r3]
  channel_2_pwm_pre = (1.0 - b)*channel_2_pwm_prev + b*channel_2_pwm_pre;
    1660:	4b6a      	ldr	r3, [pc, #424]	; (180c <getCommands()+0x36c>)
    1662:	f8d3 c000 	ldr.w	ip, [r3]
    1666:	4b5b      	ldr	r3, [pc, #364]	; (17d4 <getCommands()+0x334>)
    1668:	edd3 7a00 	vldr	s15, [r3]
    166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1670:	ee27 7a25 	vmul.f32	s14, s14, s11
    1674:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1678:	ee05 ca10 	vmov	s10, ip
    167c:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    1680:	ee04 7b06 	vmla.f64	d7, d4, d6
    1684:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1688:	ee17 1a90 	vmov	r1, s15
    168c:	edc3 7a00 	vstr	s15, [r3]
  channel_3_pwm_pre = (1.0 - b)*channel_3_pwm_prev + b*channel_3_pwm_pre;
    1690:	4b5f      	ldr	r3, [pc, #380]	; (1810 <getCommands()+0x370>)
    1692:	681f      	ldr	r7, [r3, #0]
    1694:	4b50      	ldr	r3, [pc, #320]	; (17d8 <getCommands()+0x338>)
    1696:	edd3 7a00 	vldr	s15, [r3]
    169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    169e:	ee27 7a25 	vmul.f32	s14, s14, s11
    16a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    16a6:	ee05 7a10 	vmov	s10, r7
    16aa:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    16ae:	ee04 7b06 	vmla.f64	d7, d4, d6
    16b2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    16b6:	ee17 2a90 	vmov	r2, s15
    16ba:	edc3 7a00 	vstr	s15, [r3]
  channel_4_pwm_pre = (1.0 - b)*channel_4_pwm_prev + b*channel_4_pwm_pre;
    16be:	4b55      	ldr	r3, [pc, #340]	; (1814 <getCommands()+0x374>)
    16c0:	681e      	ldr	r6, [r3, #0]
    16c2:	4c46      	ldr	r4, [pc, #280]	; (17dc <getCommands()+0x33c>)
    16c4:	edd4 7a00 	vldr	s15, [r4]
    16c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    16cc:	ee27 7a25 	vmul.f32	s14, s14, s11
    16d0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    16d4:	ee05 6a90 	vmov	s11, r6
    16d8:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    16dc:	ee05 7b06 	vmla.f64	d7, d5, d6
    16e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    16e4:	ee17 3a90 	vmov	r3, s15
    16e8:	edc4 7a00 	vstr	s15, [r4]

	// Additional cutoff to deal with occasional spikes in recieved radio commands
	d_ch1 = channel_1_pwm_pre - channel_1_pwm_prev;
    16ec:	1b44      	subs	r4, r0, r5
    16ee:	f8df e158 	ldr.w	lr, [pc, #344]	; 1848 <getCommands()+0x3a8>
    16f2:	f8ce 4000 	str.w	r4, [lr]
	d_ch2 = channel_2_pwm_pre - channel_2_pwm_prev;
    16f6:	eba1 010c 	sub.w	r1, r1, ip
    16fa:	f8df c138 	ldr.w	ip, [pc, #312]	; 1834 <getCommands()+0x394>
    16fe:	f8cc 1000 	str.w	r1, [ip]
	d_ch3 = channel_3_pwm_pre - channel_3_pwm_prev;
    1702:	1bd2      	subs	r2, r2, r7
    1704:	4944      	ldr	r1, [pc, #272]	; (1818 <getCommands()+0x378>)
    1706:	600a      	str	r2, [r1, #0]
	d_ch4 = channel_4_pwm_pre - channel_4_pwm_prev;
    1708:	1b9b      	subs	r3, r3, r6
    170a:	4a44      	ldr	r2, [pc, #272]	; (181c <getCommands()+0x37c>)
    170c:	6013      	str	r3, [r2, #0]
	
	if (abs(d_ch1) > cutoff_val && ch1_CutCounter < maxCutCounter && doneWithSetup) {
    170e:	2c00      	cmp	r4, #0
    1710:	bfb8      	it	lt
    1712:	4264      	neglt	r4, r4
    1714:	4b42      	ldr	r3, [pc, #264]	; (1820 <getCommands()+0x380>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	42a3      	cmp	r3, r4
    171a:	da0a      	bge.n	1732 <getCommands()+0x292>
    171c:	4b41      	ldr	r3, [pc, #260]	; (1824 <getCommands()+0x384>)
    171e:	681a      	ldr	r2, [r3, #0]
    1720:	4b41      	ldr	r3, [pc, #260]	; (1828 <getCommands()+0x388>)
    1722:	681b      	ldr	r3, [r3, #0]
    1724:	429a      	cmp	r2, r3
    1726:	da04      	bge.n	1732 <getCommands()+0x292>
    1728:	4b40      	ldr	r3, [pc, #256]	; (182c <getCommands()+0x38c>)
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	2b00      	cmp	r3, #0
    172e:	f040 80b5 	bne.w	189c <getCommands()+0x3fc>
		channel_1_pwm = channel_1_pwm_prev;
		Serial.println(F("Radio command spike detected (CH1)"));
		ch1_CutCounter++;
	} else {
		channel_1_pwm = channel_1_pwm_pre;
    1732:	4b3f      	ldr	r3, [pc, #252]	; (1830 <getCommands()+0x390>)
    1734:	6018      	str	r0, [r3, #0]
    1736:	2300      	movs	r3, #0
		ch1_CutCounter++;
    1738:	4a3a      	ldr	r2, [pc, #232]	; (1824 <getCommands()+0x384>)
    173a:	6013      	str	r3, [r2, #0]
		ch1_CutCounter = 0;
	}
	if (abs(d_ch2) > cutoff_val && ch2_CutCounter < maxCutCounter && doneWithSetup) {
    173c:	4b3d      	ldr	r3, [pc, #244]	; (1834 <getCommands()+0x394>)
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	2b00      	cmp	r3, #0
    1742:	bfb8      	it	lt
    1744:	425b      	neglt	r3, r3
    1746:	4a36      	ldr	r2, [pc, #216]	; (1820 <getCommands()+0x380>)
    1748:	6812      	ldr	r2, [r2, #0]
    174a:	429a      	cmp	r2, r3
    174c:	da0a      	bge.n	1764 <getCommands()+0x2c4>
    174e:	4b3a      	ldr	r3, [pc, #232]	; (1838 <getCommands()+0x398>)
    1750:	681a      	ldr	r2, [r3, #0]
    1752:	4b35      	ldr	r3, [pc, #212]	; (1828 <getCommands()+0x388>)
    1754:	681b      	ldr	r3, [r3, #0]
    1756:	429a      	cmp	r2, r3
    1758:	da04      	bge.n	1764 <getCommands()+0x2c4>
    175a:	4b34      	ldr	r3, [pc, #208]	; (182c <getCommands()+0x38c>)
    175c:	781b      	ldrb	r3, [r3, #0]
    175e:	2b00      	cmp	r3, #0
    1760:	f040 80ac 	bne.w	18bc <getCommands()+0x41c>
		channel_2_pwm = channel_2_pwm_prev;
		Serial.println(F("Radio command spike detected (CH2)"));
		ch2_CutCounter++;
	} else {
		channel_2_pwm = channel_2_pwm_pre;
    1764:	4b1b      	ldr	r3, [pc, #108]	; (17d4 <getCommands()+0x334>)
    1766:	681a      	ldr	r2, [r3, #0]
    1768:	4b34      	ldr	r3, [pc, #208]	; (183c <getCommands()+0x39c>)
    176a:	601a      	str	r2, [r3, #0]
    176c:	2300      	movs	r3, #0
		ch2_CutCounter++;
    176e:	4a32      	ldr	r2, [pc, #200]	; (1838 <getCommands()+0x398>)
    1770:	6013      	str	r3, [r2, #0]
		ch2_CutCounter = 0;
	}
	if (abs(d_ch3) > cutoff_val && ch3_CutCounter < maxCutCounter && doneWithSetup) {
    1772:	4b29      	ldr	r3, [pc, #164]	; (1818 <getCommands()+0x378>)
    1774:	681b      	ldr	r3, [r3, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	bfb8      	it	lt
    177a:	425b      	neglt	r3, r3
    177c:	4a28      	ldr	r2, [pc, #160]	; (1820 <getCommands()+0x380>)
    177e:	6812      	ldr	r2, [r2, #0]
    1780:	429a      	cmp	r2, r3
    1782:	da0a      	bge.n	179a <getCommands()+0x2fa>
    1784:	4b2e      	ldr	r3, [pc, #184]	; (1840 <getCommands()+0x3a0>)
    1786:	681a      	ldr	r2, [r3, #0]
    1788:	4b27      	ldr	r3, [pc, #156]	; (1828 <getCommands()+0x388>)
    178a:	681b      	ldr	r3, [r3, #0]
    178c:	429a      	cmp	r2, r3
    178e:	da04      	bge.n	179a <getCommands()+0x2fa>
    1790:	4b26      	ldr	r3, [pc, #152]	; (182c <getCommands()+0x38c>)
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	2b00      	cmp	r3, #0
    1796:	f040 80a3 	bne.w	18e0 <getCommands()+0x440>
		channel_3_pwm = channel_3_pwm_prev;
		Serial.println(F("Radio command spike detected (CH3)"));
		ch3_CutCounter++;
	} else {
		channel_3_pwm = channel_3_pwm_pre;
    179a:	4b0f      	ldr	r3, [pc, #60]	; (17d8 <getCommands()+0x338>)
    179c:	681a      	ldr	r2, [r3, #0]
    179e:	4b29      	ldr	r3, [pc, #164]	; (1844 <getCommands()+0x3a4>)
    17a0:	601a      	str	r2, [r3, #0]
    17a2:	2300      	movs	r3, #0
		ch3_CutCounter++;
    17a4:	4a26      	ldr	r2, [pc, #152]	; (1840 <getCommands()+0x3a0>)
    17a6:	6013      	str	r3, [r2, #0]
		ch3_CutCounter = 0;
	}
	if (abs(d_ch4) > cutoff_val && ch4_CutCounter < maxCutCounter && doneWithSetup) {
    17a8:	4b1c      	ldr	r3, [pc, #112]	; (181c <getCommands()+0x37c>)
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	2b00      	cmp	r3, #0
    17ae:	e04d      	b.n	184c <getCommands()+0x3ac>
    17b0:	40000000 	.word	0x40000000
    17b4:	3fd33333 	.word	0x3fd33333
    17b8:	2000533a 	.word	0x2000533a
    17bc:	20005339 	.word	0x20005339
    17c0:	2000529c 	.word	0x2000529c
    17c4:	20005160 	.word	0x20005160
    17c8:	3f1d70a4 	.word	0x3f1d70a4
    17cc:	445fc000 	.word	0x445fc000
    17d0:	20004f1c 	.word	0x20004f1c
    17d4:	20004f28 	.word	0x20004f28
    17d8:	20004f34 	.word	0x20004f34
    17dc:	20004f40 	.word	0x20004f40
    17e0:	20004f48 	.word	0x20004f48
    17e4:	20004f4c 	.word	0x20004f4c
    17e8:	20004f50 	.word	0x20004f50
    17ec:	20004f54 	.word	0x20004f54
    17f0:	20004f58 	.word	0x20004f58
    17f4:	20004f08 	.word	0x20004f08
    17f8:	20004f0c 	.word	0x20004f0c
    17fc:	20004f10 	.word	0x20004f10
    1800:	20004f14 	.word	0x20004f14
    1804:	20004f20 	.word	0x20004f20
    1808:	3f333333 	.word	0x3f333333
    180c:	20004f2c 	.word	0x20004f2c
    1810:	20004f38 	.word	0x20004f38
    1814:	20004f44 	.word	0x20004f44
    1818:	20004fd4 	.word	0x20004fd4
    181c:	20004fd8 	.word	0x20004fd8
    1820:	200037e8 	.word	0x200037e8
    1824:	20004ef8 	.word	0x20004ef8
    1828:	20003848 	.word	0x20003848
    182c:	20005333 	.word	0x20005333
    1830:	20004f18 	.word	0x20004f18
    1834:	20004fd0 	.word	0x20004fd0
    1838:	20004efc 	.word	0x20004efc
    183c:	20004f24 	.word	0x20004f24
    1840:	20004f00 	.word	0x20004f00
    1844:	20004f30 	.word	0x20004f30
    1848:	20004fcc 	.word	0x20004fcc
    184c:	bfb8      	it	lt
    184e:	425b      	neglt	r3, r3
    1850:	4a35      	ldr	r2, [pc, #212]	; (1928 <getCommands()+0x488>)
    1852:	6812      	ldr	r2, [r2, #0]
    1854:	429a      	cmp	r2, r3
    1856:	da09      	bge.n	186c <getCommands()+0x3cc>
    1858:	4b34      	ldr	r3, [pc, #208]	; (192c <getCommands()+0x48c>)
    185a:	681a      	ldr	r2, [r3, #0]
    185c:	4b34      	ldr	r3, [pc, #208]	; (1930 <getCommands()+0x490>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	429a      	cmp	r2, r3
    1862:	da03      	bge.n	186c <getCommands()+0x3cc>
    1864:	4b33      	ldr	r3, [pc, #204]	; (1934 <getCommands()+0x494>)
    1866:	781b      	ldrb	r3, [r3, #0]
    1868:	2b00      	cmp	r3, #0
    186a:	d14b      	bne.n	1904 <getCommands()+0x464>
		channel_4_pwm = channel_4_pwm_prev;
		Serial.println(F("Radio command spike detected (CH4)"));
		ch4_CutCounter++;
	} else {
		channel_4_pwm = channel_4_pwm_pre;
    186c:	4b32      	ldr	r3, [pc, #200]	; (1938 <getCommands()+0x498>)
    186e:	681a      	ldr	r2, [r3, #0]
    1870:	4b32      	ldr	r3, [pc, #200]	; (193c <getCommands()+0x49c>)
    1872:	601a      	str	r2, [r3, #0]
    1874:	2300      	movs	r3, #0
		ch4_CutCounter++;
    1876:	4a2d      	ldr	r2, [pc, #180]	; (192c <getCommands()+0x48c>)
    1878:	6013      	str	r3, [r2, #0]
		ch4_CutCounter = 0;
	}

	// Update prev values
  channel_1_pwm_prev = channel_1_pwm;
    187a:	4b31      	ldr	r3, [pc, #196]	; (1940 <getCommands()+0x4a0>)
    187c:	681a      	ldr	r2, [r3, #0]
    187e:	4b31      	ldr	r3, [pc, #196]	; (1944 <getCommands()+0x4a4>)
    1880:	601a      	str	r2, [r3, #0]
  channel_2_pwm_prev = channel_2_pwm;
    1882:	4b31      	ldr	r3, [pc, #196]	; (1948 <getCommands()+0x4a8>)
    1884:	681a      	ldr	r2, [r3, #0]
    1886:	4b31      	ldr	r3, [pc, #196]	; (194c <getCommands()+0x4ac>)
    1888:	601a      	str	r2, [r3, #0]
  channel_3_pwm_prev = channel_3_pwm;
    188a:	4b31      	ldr	r3, [pc, #196]	; (1950 <getCommands()+0x4b0>)
    188c:	681a      	ldr	r2, [r3, #0]
    188e:	4b31      	ldr	r3, [pc, #196]	; (1954 <getCommands()+0x4b4>)
    1890:	601a      	str	r2, [r3, #0]
  channel_4_pwm_prev = channel_4_pwm;
    1892:	4b2a      	ldr	r3, [pc, #168]	; (193c <getCommands()+0x49c>)
    1894:	681a      	ldr	r2, [r3, #0]
    1896:	4b30      	ldr	r3, [pc, #192]	; (1958 <getCommands()+0x4b8>)
    1898:	601a      	str	r2, [r3, #0]
}
    189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		channel_1_pwm = channel_1_pwm_prev;
    189c:	4b28      	ldr	r3, [pc, #160]	; (1940 <getCommands()+0x4a0>)
    189e:	601d      	str	r5, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    18a0:	4c2e      	ldr	r4, [pc, #184]	; (195c <getCommands()+0x4bc>)
    18a2:	6823      	ldr	r3, [r4, #0]
    18a4:	685b      	ldr	r3, [r3, #4]
    18a6:	2222      	movs	r2, #34	; 0x22
    18a8:	492d      	ldr	r1, [pc, #180]	; (1960 <getCommands()+0x4c0>)
    18aa:	4620      	mov	r0, r4
    18ac:	4798      	blx	r3
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    18ae:	4620      	mov	r0, r4
    18b0:	f00a fdb1 	bl	c416 <Print::println()>
		ch1_CutCounter++;
    18b4:	4b2b      	ldr	r3, [pc, #172]	; (1964 <getCommands()+0x4c4>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	3301      	adds	r3, #1
    18ba:	e73d      	b.n	1738 <getCommands()+0x298>
		channel_2_pwm = channel_2_pwm_prev;
    18bc:	4b23      	ldr	r3, [pc, #140]	; (194c <getCommands()+0x4ac>)
    18be:	681a      	ldr	r2, [r3, #0]
    18c0:	4b21      	ldr	r3, [pc, #132]	; (1948 <getCommands()+0x4a8>)
    18c2:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    18c4:	4c25      	ldr	r4, [pc, #148]	; (195c <getCommands()+0x4bc>)
    18c6:	6823      	ldr	r3, [r4, #0]
    18c8:	685b      	ldr	r3, [r3, #4]
    18ca:	2222      	movs	r2, #34	; 0x22
    18cc:	4926      	ldr	r1, [pc, #152]	; (1968 <getCommands()+0x4c8>)
    18ce:	4620      	mov	r0, r4
    18d0:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    18d2:	4620      	mov	r0, r4
    18d4:	f00a fd9f 	bl	c416 <Print::println()>
		ch2_CutCounter++;
    18d8:	4b24      	ldr	r3, [pc, #144]	; (196c <getCommands()+0x4cc>)
    18da:	681b      	ldr	r3, [r3, #0]
    18dc:	3301      	adds	r3, #1
    18de:	e746      	b.n	176e <getCommands()+0x2ce>
		channel_3_pwm = channel_3_pwm_prev;
    18e0:	4b1c      	ldr	r3, [pc, #112]	; (1954 <getCommands()+0x4b4>)
    18e2:	681a      	ldr	r2, [r3, #0]
    18e4:	4b1a      	ldr	r3, [pc, #104]	; (1950 <getCommands()+0x4b0>)
    18e6:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    18e8:	4c1c      	ldr	r4, [pc, #112]	; (195c <getCommands()+0x4bc>)
    18ea:	6823      	ldr	r3, [r4, #0]
    18ec:	685b      	ldr	r3, [r3, #4]
    18ee:	2222      	movs	r2, #34	; 0x22
    18f0:	491f      	ldr	r1, [pc, #124]	; (1970 <getCommands()+0x4d0>)
    18f2:	4620      	mov	r0, r4
    18f4:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    18f6:	4620      	mov	r0, r4
    18f8:	f00a fd8d 	bl	c416 <Print::println()>
		ch3_CutCounter++;
    18fc:	4b1d      	ldr	r3, [pc, #116]	; (1974 <getCommands()+0x4d4>)
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	3301      	adds	r3, #1
    1902:	e74f      	b.n	17a4 <getCommands()+0x304>
		channel_4_pwm = channel_4_pwm_prev;
    1904:	4b14      	ldr	r3, [pc, #80]	; (1958 <getCommands()+0x4b8>)
    1906:	681a      	ldr	r2, [r3, #0]
    1908:	4b0c      	ldr	r3, [pc, #48]	; (193c <getCommands()+0x49c>)
    190a:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    190c:	4c13      	ldr	r4, [pc, #76]	; (195c <getCommands()+0x4bc>)
    190e:	6823      	ldr	r3, [r4, #0]
    1910:	685b      	ldr	r3, [r3, #4]
    1912:	2222      	movs	r2, #34	; 0x22
    1914:	4918      	ldr	r1, [pc, #96]	; (1978 <getCommands()+0x4d8>)
    1916:	4620      	mov	r0, r4
    1918:	4798      	blx	r3
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    191a:	4620      	mov	r0, r4
    191c:	f00a fd7b 	bl	c416 <Print::println()>
		ch4_CutCounter++;
    1920:	4b02      	ldr	r3, [pc, #8]	; (192c <getCommands()+0x48c>)
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	3301      	adds	r3, #1
    1926:	e7a6      	b.n	1876 <getCommands()+0x3d6>
    1928:	200037e8 	.word	0x200037e8
    192c:	20004f04 	.word	0x20004f04
    1930:	20003848 	.word	0x20003848
    1934:	20005333 	.word	0x20005333
    1938:	20004f40 	.word	0x20004f40
    193c:	20004f3c 	.word	0x20004f3c
    1940:	20004f18 	.word	0x20004f18
    1944:	20004f20 	.word	0x20004f20
    1948:	20004f24 	.word	0x20004f24
    194c:	20004f2c 	.word	0x20004f2c
    1950:	20004f30 	.word	0x20004f30
    1954:	20004f38 	.word	0x20004f38
    1958:	20004f44 	.word	0x20004f44
    195c:	20003184 	.word	0x20003184
    1960:	20001cac 	.word	0x20001cac
    1964:	20004ef8 	.word	0x20004ef8
    1968:	20001cd0 	.word	0x20001cd0
    196c:	20004efc 	.word	0x20004efc
    1970:	20001cf4 	.word	0x20001cf4
    1974:	20004f00 	.word	0x20004f00
    1978:	20001d18 	.word	0x20001d18

0000197c <failSafe()>:
  int check2 = 0;
  int check3 = 0;
  int check4 = 0;
  int check5 = 0;
  int check6 = 0;
	failureFlag = 0;
    197c:	4b28      	ldr	r3, [pc, #160]	; (1a20 <failSafe()+0xa4>)
    197e:	2200      	movs	r2, #0
    1980:	701a      	strb	r2, [r3, #0]

  //Triggers for failure criteria
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
  if (channel_2_pwm > maxVal || channel_2_pwm < minVal) check2 = 1;
    1982:	4b28      	ldr	r3, [pc, #160]	; (1a24 <failSafe()+0xa8>)
    1984:	681a      	ldr	r2, [r3, #0]
    1986:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
    198a:	4b27      	ldr	r3, [pc, #156]	; (1a28 <failSafe()+0xac>)
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    1992:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    1996:	bf94      	ite	ls
    1998:	2300      	movls	r3, #0
    199a:	2301      	movhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;

  //If any failures, set to default failsafe values
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    199c:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    19a0:	bf88      	it	hi
    19a2:	3301      	addhi	r3, #1
  if (channel_3_pwm > maxVal || channel_3_pwm < minVal) check3 = 1;
    19a4:	4a21      	ldr	r2, [pc, #132]	; (1a2c <failSafe()+0xb0>)
    19a6:	6812      	ldr	r2, [r2, #0]
    19a8:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    19ac:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    19b0:	bf88      	it	hi
    19b2:	3301      	addhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
    19b4:	4a1e      	ldr	r2, [pc, #120]	; (1a30 <failSafe()+0xb4>)
    19b6:	6812      	ldr	r2, [r2, #0]
    19b8:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    19bc:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    19c0:	bf88      	it	hi
    19c2:	3301      	addhi	r3, #1
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
    19c4:	4a1b      	ldr	r2, [pc, #108]	; (1a34 <failSafe()+0xb8>)
    19c6:	6812      	ldr	r2, [r2, #0]
    19c8:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    19cc:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    19d0:	bf88      	it	hi
    19d2:	3301      	addhi	r3, #1
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;
    19d4:	4a18      	ldr	r2, [pc, #96]	; (1a38 <failSafe()+0xbc>)
    19d6:	6812      	ldr	r2, [r2, #0]
    19d8:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    19dc:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    19e0:	bf88      	it	hi
    19e2:	3301      	addhi	r3, #1
    19e4:	b1d3      	cbz	r3, 1a1c <failSafe()+0xa0>
    channel_1_pwm = channel_1_fs;
    19e6:	4b15      	ldr	r3, [pc, #84]	; (1a3c <failSafe()+0xc0>)
    19e8:	681a      	ldr	r2, [r3, #0]
    19ea:	4b0f      	ldr	r3, [pc, #60]	; (1a28 <failSafe()+0xac>)
    19ec:	601a      	str	r2, [r3, #0]
    channel_2_pwm = channel_2_fs;
    19ee:	4b14      	ldr	r3, [pc, #80]	; (1a40 <failSafe()+0xc4>)
    19f0:	681a      	ldr	r2, [r3, #0]
    19f2:	4b0c      	ldr	r3, [pc, #48]	; (1a24 <failSafe()+0xa8>)
    19f4:	601a      	str	r2, [r3, #0]
    channel_3_pwm = channel_3_fs;
    19f6:	4b13      	ldr	r3, [pc, #76]	; (1a44 <failSafe()+0xc8>)
    19f8:	681a      	ldr	r2, [r3, #0]
    19fa:	4b0c      	ldr	r3, [pc, #48]	; (1a2c <failSafe()+0xb0>)
    19fc:	601a      	str	r2, [r3, #0]
    channel_4_pwm = channel_4_fs;
    19fe:	4b12      	ldr	r3, [pc, #72]	; (1a48 <failSafe()+0xcc>)
    1a00:	681a      	ldr	r2, [r3, #0]
    1a02:	4b0b      	ldr	r3, [pc, #44]	; (1a30 <failSafe()+0xb4>)
    1a04:	601a      	str	r2, [r3, #0]
    channel_5_pwm = channel_5_fs;
    1a06:	4b11      	ldr	r3, [pc, #68]	; (1a4c <failSafe()+0xd0>)
    1a08:	681a      	ldr	r2, [r3, #0]
    1a0a:	4b0a      	ldr	r3, [pc, #40]	; (1a34 <failSafe()+0xb8>)
    1a0c:	601a      	str	r2, [r3, #0]
    channel_6_pwm = channel_6_fs;
    1a0e:	4b10      	ldr	r3, [pc, #64]	; (1a50 <failSafe()+0xd4>)
    1a10:	681a      	ldr	r2, [r3, #0]
    1a12:	4b09      	ldr	r3, [pc, #36]	; (1a38 <failSafe()+0xbc>)
    1a14:	601a      	str	r2, [r3, #0]
		failureFlag = 1;
    1a16:	4b02      	ldr	r3, [pc, #8]	; (1a20 <failSafe()+0xa4>)
    1a18:	2201      	movs	r2, #1
    1a1a:	701a      	strb	r2, [r3, #0]
  }
}
    1a1c:	4770      	bx	lr
    1a1e:	bf00      	nop
    1a20:	20005335 	.word	0x20005335
    1a24:	20004f24 	.word	0x20004f24
    1a28:	20004f18 	.word	0x20004f18
    1a2c:	20004f30 	.word	0x20004f30
    1a30:	20004f3c 	.word	0x20004f3c
    1a34:	20004f48 	.word	0x20004f48
    1a38:	20004f4c 	.word	0x20004f4c
    1a3c:	200037c4 	.word	0x200037c4
    1a40:	200037c8 	.word	0x200037c8
    1a44:	200037cc 	.word	0x200037cc
    1a48:	200037d0 	.word	0x200037d0
    1a4c:	200037d4 	.word	0x200037d4
    1a50:	200037d8 	.word	0x200037d8

00001a54 <commandMotors()>:

void commandMotors() {
    1a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a58:	b085      	sub	sp, #20
  int flagM4 = 0;
  int flagM5 = 0;
  int flagM6 = 0;
  
  //Write all motor pins high
  digitalWrite(m1Pin, HIGH);
    1a5a:	2101      	movs	r1, #1
    1a5c:	2000      	movs	r0, #0
    1a5e:	f00b fa49 	bl	cef4 <digitalWrite>
  digitalWrite(m2Pin, HIGH);
    1a62:	2101      	movs	r1, #1
    1a64:	4608      	mov	r0, r1
    1a66:	f00b fa45 	bl	cef4 <digitalWrite>
  digitalWrite(m3Pin, HIGH);
    1a6a:	2101      	movs	r1, #1
    1a6c:	2002      	movs	r0, #2
    1a6e:	f00b fa41 	bl	cef4 <digitalWrite>
  digitalWrite(m4Pin, HIGH);
    1a72:	2101      	movs	r1, #1
    1a74:	2003      	movs	r0, #3
    1a76:	f00b fa3d 	bl	cef4 <digitalWrite>
  digitalWrite(m5Pin, HIGH);
    1a7a:	2101      	movs	r1, #1
    1a7c:	2004      	movs	r0, #4
    1a7e:	f00b fa39 	bl	cef4 <digitalWrite>
  digitalWrite(m6Pin, HIGH);
    1a82:	2101      	movs	r1, #1
    1a84:	2005      	movs	r0, #5
    1a86:	f00b fa35 	bl	cef4 <digitalWrite>
  pulseStart = micros();
    1a8a:	f00b f9f3 	bl	ce74 <micros>
    1a8e:	4606      	mov	r6, r0
  int flagM6 = 0;
    1a90:	f04f 0a00 	mov.w	sl, #0
  int flagM5 = 0;
    1a94:	46d3      	mov	fp, sl
  int flagM4 = 0;
    1a96:	f8cd a00c 	str.w	sl, [sp, #12]
  int flagM3 = 0;
    1a9a:	f8cd a008 	str.w	sl, [sp, #8]
  int flagM2 = 0;
    1a9e:	f8cd a004 	str.w	sl, [sp, #4]
  int flagM1 = 0;
    1aa2:	f8cd a000 	str.w	sl, [sp]
  int wentLow = 0;
    1aa6:	4655      	mov	r5, sl

  //Write each motor pin low as correct pulse length is reached
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    timer = micros();
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    1aa8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1b88 <commandMotors()+0x134>
      digitalWrite(m1Pin, LOW);
      wentLow = wentLow + 1;
      flagM1 = 1;
    }
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    1aac:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1b8c <commandMotors()+0x138>
      digitalWrite(m2Pin, LOW);
      wentLow = wentLow + 1;
      flagM2 = 1;
    }
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    1ab0:	4f31      	ldr	r7, [pc, #196]	; (1b78 <commandMotors()+0x124>)
    1ab2:	e029      	b.n	1b08 <commandMotors()+0xb4>
      digitalWrite(m1Pin, LOW);
    1ab4:	2100      	movs	r1, #0
    1ab6:	4608      	mov	r0, r1
    1ab8:	f00b fa1c 	bl	cef4 <digitalWrite>
      wentLow = wentLow + 1;
    1abc:	3501      	adds	r5, #1
      flagM1 = 1;
    1abe:	2301      	movs	r3, #1
    1ac0:	9300      	str	r3, [sp, #0]
    1ac2:	e02b      	b.n	1b1c <commandMotors()+0xc8>
      digitalWrite(m2Pin, LOW);
    1ac4:	2100      	movs	r1, #0
    1ac6:	2001      	movs	r0, #1
    1ac8:	f00b fa14 	bl	cef4 <digitalWrite>
      wentLow = wentLow + 1;
    1acc:	3501      	adds	r5, #1
      flagM2 = 1;
    1ace:	2301      	movs	r3, #1
    1ad0:	9301      	str	r3, [sp, #4]
    1ad2:	e02a      	b.n	1b2a <commandMotors()+0xd6>
      digitalWrite(m3Pin, LOW);
    1ad4:	2100      	movs	r1, #0
    1ad6:	2002      	movs	r0, #2
    1ad8:	f00b fa0c 	bl	cef4 <digitalWrite>
      wentLow = wentLow + 1;
    1adc:	3501      	adds	r5, #1
      flagM3 = 1;
    1ade:	2301      	movs	r3, #1
    1ae0:	9302      	str	r3, [sp, #8]
    1ae2:	e028      	b.n	1b36 <commandMotors()+0xe2>
    }
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
      digitalWrite(m4Pin, LOW);
    1ae4:	2100      	movs	r1, #0
    1ae6:	2003      	movs	r0, #3
    1ae8:	f00b fa04 	bl	cef4 <digitalWrite>
      wentLow = wentLow + 1;
    1aec:	3501      	adds	r5, #1
      flagM4 = 1;
    1aee:	2301      	movs	r3, #1
    1af0:	9303      	str	r3, [sp, #12]
    1af2:	e027      	b.n	1b44 <commandMotors()+0xf0>
    } 
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
      digitalWrite(m5Pin, LOW);
    1af4:	2100      	movs	r1, #0
    1af6:	2004      	movs	r0, #4
    1af8:	f00b f9fc 	bl	cef4 <digitalWrite>
      wentLow = wentLow + 1;
    1afc:	3501      	adds	r5, #1
      flagM5 = 1;
    1afe:	f04f 0b01 	mov.w	fp, #1
    1b02:	e026      	b.n	1b52 <commandMotors()+0xfe>
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    1b04:	2d05      	cmp	r5, #5
    1b06:	dc33      	bgt.n	1b70 <commandMotors()+0x11c>
    timer = micros();
    1b08:	f00b f9b4 	bl	ce74 <micros>
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    1b0c:	1b84      	subs	r4, r0, r6
    1b0e:	f8d9 3000 	ldr.w	r3, [r9]
    1b12:	429c      	cmp	r4, r3
    1b14:	db02      	blt.n	1b1c <commandMotors()+0xc8>
    1b16:	9b00      	ldr	r3, [sp, #0]
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d0cb      	beq.n	1ab4 <commandMotors()+0x60>
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    1b1c:	f8d8 3000 	ldr.w	r3, [r8]
    1b20:	429c      	cmp	r4, r3
    1b22:	db02      	blt.n	1b2a <commandMotors()+0xd6>
    1b24:	9b01      	ldr	r3, [sp, #4]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d0cc      	beq.n	1ac4 <commandMotors()+0x70>
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    1b2a:	683b      	ldr	r3, [r7, #0]
    1b2c:	429c      	cmp	r4, r3
    1b2e:	db02      	blt.n	1b36 <commandMotors()+0xe2>
    1b30:	9b02      	ldr	r3, [sp, #8]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d0ce      	beq.n	1ad4 <commandMotors()+0x80>
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
    1b36:	4b11      	ldr	r3, [pc, #68]	; (1b7c <commandMotors()+0x128>)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	429c      	cmp	r4, r3
    1b3c:	db02      	blt.n	1b44 <commandMotors()+0xf0>
    1b3e:	9b03      	ldr	r3, [sp, #12]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d0cf      	beq.n	1ae4 <commandMotors()+0x90>
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
    1b44:	4b0e      	ldr	r3, [pc, #56]	; (1b80 <commandMotors()+0x12c>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	429c      	cmp	r4, r3
    1b4a:	db02      	blt.n	1b52 <commandMotors()+0xfe>
    1b4c:	f1bb 0f00 	cmp.w	fp, #0
    1b50:	d0d0      	beq.n	1af4 <commandMotors()+0xa0>
    } 
    if ((m6_command_PWM <= timer - pulseStart) && (flagM6==0)) {
    1b52:	4b0c      	ldr	r3, [pc, #48]	; (1b84 <commandMotors()+0x130>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	429c      	cmp	r4, r3
    1b58:	dbd4      	blt.n	1b04 <commandMotors()+0xb0>
    1b5a:	f1ba 0f00 	cmp.w	sl, #0
    1b5e:	d1d1      	bne.n	1b04 <commandMotors()+0xb0>
      digitalWrite(m6Pin, LOW);
    1b60:	2100      	movs	r1, #0
    1b62:	2005      	movs	r0, #5
    1b64:	f00b f9c6 	bl	cef4 <digitalWrite>
      wentLow = wentLow + 1;
    1b68:	3501      	adds	r5, #1
      flagM6 = 1;
    1b6a:	f04f 0a01 	mov.w	sl, #1
    1b6e:	e7c9      	b.n	1b04 <commandMotors()+0xb0>
    } 
  }
}
    1b70:	b005      	add	sp, #20
    1b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b76:	bf00      	nop
    1b78:	20005068 	.word	0x20005068
    1b7c:	20005070 	.word	0x20005070
    1b80:	20005078 	.word	0x20005078
    1b84:	20005080 	.word	0x20005080
    1b88:	20005058 	.word	0x20005058
    1b8c:	20005060 	.word	0x20005060

00001b90 <throttleCut()>:
   * Monitors the state of radio command channel_5_pwm and directly sets the mx_command_PWM values to minimum (120 is
   * minimum for oneshot125 protocol, 0 is minimum for standard PWM servo library used) if channel 5 is high. This is the last function 
   * called before commandMotors() is called so that the last thing checked is if the user is giving permission to command
   * the motors to anything other than minimum value. Safety first. 
   */
  if (channel_5_pwm > 1500) {
    1b90:	4b0a      	ldr	r3, [pc, #40]	; (1bbc <throttleCut()+0x2c>)
    1b92:	681a      	ldr	r2, [r3, #0]
    1b94:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1b98:	429a      	cmp	r2, r3
    1b9a:	dd0e      	ble.n	1bba <throttleCut()+0x2a>
    // m4_command_PWM = 120;
    // m5_command_PWM = 120;
    // m6_command_PWM = 120;
    
    //Uncomment if using servo PWM variables to control motor ESCs
    s1_command_PWM = 0;
    1b9c:	2300      	movs	r3, #0
    1b9e:	4a08      	ldr	r2, [pc, #32]	; (1bc0 <throttleCut()+0x30>)
    1ba0:	6013      	str	r3, [r2, #0]
    s2_command_PWM = 0;
    1ba2:	4a08      	ldr	r2, [pc, #32]	; (1bc4 <throttleCut()+0x34>)
    1ba4:	6013      	str	r3, [r2, #0]
    s3_command_PWM = 0;
    1ba6:	4a08      	ldr	r2, [pc, #32]	; (1bc8 <throttleCut()+0x38>)
    1ba8:	6013      	str	r3, [r2, #0]
    s4_command_PWM = 0;
    1baa:	4a08      	ldr	r2, [pc, #32]	; (1bcc <throttleCut()+0x3c>)
    1bac:	6013      	str	r3, [r2, #0]
    s5_command_PWM = 0;
    1bae:	4a08      	ldr	r2, [pc, #32]	; (1bd0 <throttleCut()+0x40>)
    1bb0:	6013      	str	r3, [r2, #0]
    s6_command_PWM = 0;
    1bb2:	4a08      	ldr	r2, [pc, #32]	; (1bd4 <throttleCut()+0x44>)
    1bb4:	6013      	str	r3, [r2, #0]
    s7_command_PWM = 0;
    1bb6:	4a08      	ldr	r2, [pc, #32]	; (1bd8 <throttleCut()+0x48>)
    1bb8:	6013      	str	r3, [r2, #0]
  }
}
    1bba:	4770      	bx	lr
    1bbc:	20004f48 	.word	0x20004f48
    1bc0:	20005118 	.word	0x20005118
    1bc4:	20005120 	.word	0x20005120
    1bc8:	20005128 	.word	0x20005128
    1bcc:	20005130 	.word	0x20005130
    1bd0:	20005138 	.word	0x20005138
    1bd4:	20005140 	.word	0x20005140
    1bd8:	20005148 	.word	0x20005148
    1bdc:	00000000 	.word	0x00000000

00001be0 <loopRate(int)>:
  #endif
  Serial.println("Error: MPU9250 not selected. Cannot calibrate non-existent magnetometer.");
  while(1); //Halt code so it won't enter main loop until this function commented out
}

void loopRate(int freq) {
    1be0:	b510      	push	{r4, lr}
    1be2:	ed2d 8b02 	vpush	{d8}
    1be6:	ee06 0a10 	vmov	s12, r0
   * background cause the loop rate to fluctuate. This function basically just waits at the end of every loop iteration until 
   * the correct time has passed since the start of the current loop for the desired loop rate in Hz. 2kHz is a good rate to 
   * be at because the loop nominally will run between 2.8kHz - 4.2kHz. This lets us have a little room to add extra computations
   * and remain above 2kHz, without needing to retune all of our filtering parameters.
   */
  float invFreq = 1.0/freq*1000000.0;
    1bea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1bee:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    1bf2:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1bf6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 1c40 <loopRate(int)+0x60>
    1bfa:	ee27 7b06 	vmul.f64	d7, d7, d6
    1bfe:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  unsigned long checker = micros();
    1c02:	f00b f937 	bl	ce74 <micros>
  
  //Sit in loop until appropriate time has passed
  while (invFreq > (checker - current_time)) {
    1c06:	4b10      	ldr	r3, [pc, #64]	; (1c48 <loopRate(int)+0x68>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	1ac0      	subs	r0, r0, r3
    1c0c:	ee07 0a90 	vmov	s15, r0
    1c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1c14:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c1c:	dd0d      	ble.n	1c3a <loopRate(int)+0x5a>
    1c1e:	4c0a      	ldr	r4, [pc, #40]	; (1c48 <loopRate(int)+0x68>)
    checker = micros();
    1c20:	f00b f928 	bl	ce74 <micros>
  while (invFreq > (checker - current_time)) {
    1c24:	6823      	ldr	r3, [r4, #0]
    1c26:	1ac0      	subs	r0, r0, r3
    1c28:	ee07 0a90 	vmov	s15, r0
    1c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1c30:	eef4 7ac8 	vcmpe.f32	s15, s16
    1c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1c38:	d4f2      	bmi.n	1c20 <loopRate(int)+0x40>
  }
}
    1c3a:	ecbd 8b02 	vpop	{d8}
    1c3e:	bd10      	pop	{r4, pc}
    1c40:	00000000 	.word	0x00000000
    1c44:	412e8480 	.word	0x412e8480
    1c48:	20004f5c 	.word	0x20004f5c

00001c4c <loopBlink()>:
void loopBlink() {
  //DESCRIPTION: Blink LED on board to indicate main loop is running
  /*
   * It looks cool.
   */
  if (current_time - blink_counter > blink_delay) {
    1c4c:	4b11      	ldr	r3, [pc, #68]	; (1c94 <loopBlink()+0x48>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	4a11      	ldr	r2, [pc, #68]	; (1c98 <loopBlink()+0x4c>)
    1c52:	6812      	ldr	r2, [r2, #0]
    1c54:	1a9b      	subs	r3, r3, r2
    1c56:	4a11      	ldr	r2, [pc, #68]	; (1c9c <loopBlink()+0x50>)
    1c58:	6812      	ldr	r2, [r2, #0]
    1c5a:	4293      	cmp	r3, r2
    1c5c:	d800      	bhi.n	1c60 <loopBlink()+0x14>
    1c5e:	4770      	bx	lr
void loopBlink() {
    1c60:	b510      	push	{r4, lr}
    blink_counter = micros();
    1c62:	f00b f907 	bl	ce74 <micros>
    1c66:	4b0c      	ldr	r3, [pc, #48]	; (1c98 <loopBlink()+0x4c>)
    1c68:	6018      	str	r0, [r3, #0]
    digitalWrite(13, blinkAlternate); //Pin 13 is built in LED
    1c6a:	4c0d      	ldr	r4, [pc, #52]	; (1ca0 <loopBlink()+0x54>)
    1c6c:	7821      	ldrb	r1, [r4, #0]
    1c6e:	200d      	movs	r0, #13
    1c70:	f00b f940 	bl	cef4 <digitalWrite>
    
    if (blinkAlternate == 1) {
    1c74:	7823      	ldrb	r3, [r4, #0]
    1c76:	b12b      	cbz	r3, 1c84 <loopBlink()+0x38>
      blinkAlternate = 0;
    1c78:	2200      	movs	r2, #0
    1c7a:	7022      	strb	r2, [r4, #0]
      blink_delay = 100000;
    1c7c:	4b07      	ldr	r3, [pc, #28]	; (1c9c <loopBlink()+0x50>)
    1c7e:	4a09      	ldr	r2, [pc, #36]	; (1ca4 <loopBlink()+0x58>)
    1c80:	601a      	str	r2, [r3, #0]
    else if (blinkAlternate == 0) {
      blinkAlternate = 1;
      blink_delay = 2000000;
      }
  }
}
    1c82:	bd10      	pop	{r4, pc}
      blinkAlternate = 1;
    1c84:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <loopBlink()+0x54>)
    1c86:	2201      	movs	r2, #1
    1c88:	701a      	strb	r2, [r3, #0]
      blink_delay = 2000000;
    1c8a:	4b04      	ldr	r3, [pc, #16]	; (1c9c <loopBlink()+0x50>)
    1c8c:	4a06      	ldr	r2, [pc, #24]	; (1ca8 <loopBlink()+0x5c>)
    1c8e:	601a      	str	r2, [r3, #0]
}
    1c90:	e7f7      	b.n	1c82 <loopBlink()+0x36>
    1c92:	bf00      	nop
    1c94:	20004f5c 	.word	0x20004f5c
    1c98:	20004ef0 	.word	0x20004ef0
    1c9c:	20004ef4 	.word	0x20004ef4
    1ca0:	20005330 	.word	0x20005330
    1ca4:	000186a0 	.word	0x000186a0
    1ca8:	001e8480 	.word	0x001e8480

00001cac <setupBlink(int, int, int)>:

void setupBlink(int numBlinks,int upTime, int downTime) {
    1cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //DESCRIPTION: Simple function to make LED on board blink as desired
  for (int j = 1; j<= numBlinks; j++) {
    1cb0:	1e06      	subs	r6, r0, #0
    1cb2:	dd17      	ble.n	1ce4 <setupBlink(int, int, int)+0x38>
    1cb4:	460f      	mov	r7, r1
    1cb6:	4690      	mov	r8, r2
    1cb8:	2401      	movs	r4, #1
    digitalWrite(13, LOW);
    1cba:	f04f 0a00 	mov.w	sl, #0
    1cbe:	250d      	movs	r5, #13
    delay(downTime);
    digitalWrite(13, HIGH);
    1cc0:	46a1      	mov	r9, r4
    digitalWrite(13, LOW);
    1cc2:	4651      	mov	r1, sl
    1cc4:	4628      	mov	r0, r5
    1cc6:	f00b f915 	bl	cef4 <digitalWrite>
    delay(downTime);
    1cca:	4640      	mov	r0, r8
    1ccc:	f00b f8fc 	bl	cec8 <delay>
    digitalWrite(13, HIGH);
    1cd0:	4649      	mov	r1, r9
    1cd2:	4628      	mov	r0, r5
    1cd4:	f00b f90e 	bl	cef4 <digitalWrite>
    delay(upTime);
    1cd8:	4638      	mov	r0, r7
    1cda:	f00b f8f5 	bl	cec8 <delay>
  for (int j = 1; j<= numBlinks; j++) {
    1cde:	3401      	adds	r4, #1
    1ce0:	42a6      	cmp	r6, r4
    1ce2:	daee      	bge.n	1cc2 <setupBlink(int, int, int)+0x16>
  }
}
    1ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001ce8 <getJoyAngle()>:
    Serial.print(F("dt = "));
    Serial.println(dt*1000000.0);
  }
}

void getJoyAngle() {
    1ce8:	b510      	push	{r4, lr}
	// Read the raw analog values (0 to 1023)
	alphaCounts = analogRead(joyAlphaPin);
    1cea:	2029      	movs	r0, #41	; 0x29
    1cec:	f00a ff26 	bl	cb3c <analogRead>
    1cf0:	4c37      	ldr	r4, [pc, #220]	; (1dd0 <getJoyAngle()+0xe8>)
    1cf2:	6020      	str	r0, [r4, #0]
	betaCounts = analogRead(joyBetaPin);
    1cf4:	2028      	movs	r0, #40	; 0x28
    1cf6:	f00a ff21 	bl	cb3c <analogRead>
    1cfa:	4b36      	ldr	r3, [pc, #216]	; (1dd4 <getJoyAngle()+0xec>)
    1cfc:	6018      	str	r0, [r3, #0]
	// Full range of analog input based on calibration
	float FR_alpha = alphaCounts_max - alphaCounts_min;
    1cfe:	4b36      	ldr	r3, [pc, #216]	; (1dd8 <getJoyAngle()+0xf0>)
    1d00:	681a      	ldr	r2, [r3, #0]
    1d02:	4b36      	ldr	r3, [pc, #216]	; (1ddc <getJoyAngle()+0xf4>)
    1d04:	681b      	ldr	r3, [r3, #0]
    1d06:	1a9b      	subs	r3, r3, r2
    1d08:	ee07 3a90 	vmov	s15, r3
    1d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	float FR_beta = betaCounts_max - alphaCounts_min;
    1d10:	4b33      	ldr	r3, [pc, #204]	; (1de0 <getJoyAngle()+0xf8>)
    1d12:	681b      	ldr	r3, [r3, #0]
    1d14:	1a9b      	subs	r3, r3, r2
    1d16:	ee07 3a90 	vmov	s15, r3
    1d1a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15

	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_min -
    1d1e:	edd4 7a00 	vldr	s15, [r4]
    1d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1d26:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    1d2a:	ee67 6a25 	vmul.f32	s13, s14, s11
    1d2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1d32:	ee06 2a90 	vmov	s13, r2
    1d36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1d3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    1d3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    1d42:	4b28      	ldr	r3, [pc, #160]	; (1de4 <getJoyAngle()+0xfc>)
    1d44:	edd3 7a00 	vldr	s15, [r3]
    1d48:	4b27      	ldr	r3, [pc, #156]	; (1de8 <getJoyAngle()+0x100>)
    1d4a:	ed93 7a00 	vldr	s14, [r3]
    1d4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1d52:	ee66 6aa7 	vmul.f32	s13, s13, s15
		alpha_max) + alphaOffset;
    1d56:	4b25      	ldr	r3, [pc, #148]	; (1dec <getJoyAngle()+0x104>)
    1d58:	edd3 7a00 	vldr	s15, [r3]
    1d5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
	alpha = (static_cast<float>(alphaCounts) - FR_alpha/2.0f - alphaCounts_min)/FR_alpha*(alpha_min -
    1d60:	4b23      	ldr	r3, [pc, #140]	; (1df0 <getJoyAngle()+0x108>)
    1d62:	edc3 6a00 	vstr	s13, [r3]
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    1d66:	ee07 0a90 	vmov	s15, r0
    1d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1d6e:	ee66 5a25 	vmul.f32	s11, s12, s11
    1d72:	ee77 7ae5 	vsub.f32	s15, s15, s11
    1d76:	4b1f      	ldr	r3, [pc, #124]	; (1df4 <getJoyAngle()+0x10c>)
    1d78:	ed93 7a00 	vldr	s14, [r3]
    1d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1d80:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1d84:	ee87 7a86 	vdiv.f32	s14, s15, s12
    1d88:	4b1b      	ldr	r3, [pc, #108]	; (1df8 <getJoyAngle()+0x110>)
    1d8a:	edd3 7a00 	vldr	s15, [r3]
    1d8e:	4b1b      	ldr	r3, [pc, #108]	; (1dfc <getJoyAngle()+0x114>)
    1d90:	ed93 6a00 	vldr	s12, [r3]
    1d94:	ee77 7ac6 	vsub.f32	s15, s15, s12
    1d98:	ee67 7a27 	vmul.f32	s15, s14, s15
		beta_max) + betaOffset;
    1d9c:	4b18      	ldr	r3, [pc, #96]	; (1e00 <getJoyAngle()+0x118>)
    1d9e:	ed93 7a00 	vldr	s14, [r3]
    1da2:	ee77 7a87 	vadd.f32	s15, s15, s14
	beta = (static_cast<float>(betaCounts) - FR_beta/2.0f - betaCounts_min)/FR_beta*(beta_min -
    1da6:	4b17      	ldr	r3, [pc, #92]	; (1e04 <getJoyAngle()+0x11c>)
    1da8:	edc3 7a00 	vstr	s15, [r3]

	// Determine alpha and pitch in the inertial frame
	alphaRoll = alpha + roll_IMU;
    1dac:	4b16      	ldr	r3, [pc, #88]	; (1e08 <getJoyAngle()+0x120>)
    1dae:	ed93 7a00 	vldr	s14, [r3]
    1db2:	ee37 7a26 	vadd.f32	s14, s14, s13
    1db6:	4b15      	ldr	r3, [pc, #84]	; (1e0c <getJoyAngle()+0x124>)
    1db8:	ed83 7a00 	vstr	s14, [r3]
	betaPitch = beta + pitch_IMU;
    1dbc:	4b14      	ldr	r3, [pc, #80]	; (1e10 <getJoyAngle()+0x128>)
    1dbe:	ed93 7a00 	vldr	s14, [r3]
    1dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
    1dc6:	4b13      	ldr	r3, [pc, #76]	; (1e14 <getJoyAngle()+0x12c>)
    1dc8:	edc3 7a00 	vstr	s15, [r3]
}
    1dcc:	bd10      	pop	{r4, pc}
    1dce:	bf00      	nop
    1dd0:	20004ecc 	.word	0x20004ecc
    1dd4:	20004ee0 	.word	0x20004ee0
    1dd8:	20003794 	.word	0x20003794
    1ddc:	20003790 	.word	0x20003790
    1de0:	200037a4 	.word	0x200037a4
    1de4:	2000379c 	.word	0x2000379c
    1de8:	20003798 	.word	0x20003798
    1dec:	20004ed0 	.word	0x20004ed0
    1df0:	20004ec8 	.word	0x20004ec8
    1df4:	200037a8 	.word	0x200037a8
    1df8:	200037b0 	.word	0x200037b0
    1dfc:	200037ac 	.word	0x200037ac
    1e00:	20004ee4 	.word	0x20004ee4
    1e04:	20004edc 	.word	0x20004edc
    1e08:	200050d8 	.word	0x200050d8
    1e0c:	20004ed4 	.word	0x20004ed4
    1e10:	200050b0 	.word	0x200050b0
    1e14:	20004ee8 	.word	0x20004ee8

00001e18 <openIris()>:

void openIris() {
    1e18:	b508      	push	{r3, lr}
	iris.write(60);
    1e1a:	213c      	movs	r1, #60	; 0x3c
    1e1c:	4803      	ldr	r0, [pc, #12]	; (1e2c <openIris()+0x14>)
    1e1e:	f002 fed3 	bl	4bc8 <PWMServo::write(int)>
	servoLoopCounter = 0;
    1e22:	4b03      	ldr	r3, [pc, #12]	; (1e30 <openIris()+0x18>)
    1e24:	2200      	movs	r2, #0
    1e26:	601a      	str	r2, [r3, #0]
}
    1e28:	bd08      	pop	{r3, pc}
    1e2a:	bf00      	nop
    1e2c:	20005054 	.word	0x20005054
    1e30:	200052e0 	.word	0x200052e0

00001e34 <closeIris()>:

void closeIris() {
    1e34:	b508      	push	{r3, lr}
	if (servoLoopCounter < 500) {
    1e36:	4b09      	ldr	r3, [pc, #36]	; (1e5c <closeIris()+0x28>)
    1e38:	681b      	ldr	r3, [r3, #0]
    1e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1e3e:	da08      	bge.n	1e52 <closeIris()+0x1e>
		iris.write(140);
    1e40:	218c      	movs	r1, #140	; 0x8c
    1e42:	4807      	ldr	r0, [pc, #28]	; (1e60 <closeIris()+0x2c>)
    1e44:	f002 fec0 	bl	4bc8 <PWMServo::write(int)>
		servoLoopCounter++;
    1e48:	4a04      	ldr	r2, [pc, #16]	; (1e5c <closeIris()+0x28>)
    1e4a:	6813      	ldr	r3, [r2, #0]
    1e4c:	3301      	adds	r3, #1
    1e4e:	6013      	str	r3, [r2, #0]
	} else {
		iris.write(137); // Open it slightly more to ease strain on the servo
	}
}
    1e50:	bd08      	pop	{r3, pc}
		iris.write(137); // Open it slightly more to ease strain on the servo
    1e52:	2189      	movs	r1, #137	; 0x89
    1e54:	4802      	ldr	r0, [pc, #8]	; (1e60 <closeIris()+0x2c>)
    1e56:	f002 feb7 	bl	4bc8 <PWMServo::write(int)>
}
    1e5a:	e7f9      	b.n	1e50 <closeIris()+0x1c>
    1e5c:	200052e0 	.word	0x200052e0
    1e60:	20005054 	.word	0x20005054

00001e64 <getDataString()>:
		Serial.print(" ");
		Serial.println(beta + pitch_IMU);
	}
}

String getDataString() {
    1e64:	b570      	push	{r4, r5, r6, lr}
    1e66:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
    1e6a:	4605      	mov	r5, r0
	String csvDataString;
    1e6c:	2100      	movs	r1, #0
    1e6e:	f00a fd80 	bl	c972 <String::String(char const*)>
	csvDataString = String(roll_IMU)
    1e72:	2102      	movs	r1, #2
    1e74:	4bcc      	ldr	r3, [pc, #816]	; (21a8 <getDataString()+0x344>)
    1e76:	ed93 0a00 	vldr	s0, [r3]
    1e7a:	a804      	add	r0, sp, #16
    1e7c:	f00a fde2 	bl	ca44 <String::String(float, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1e80:	a904      	add	r1, sp, #16
    1e82:	4668      	mov	r0, sp
    1e84:	f00a fda7 	bl	c9d6 <String::String(String const&)>
									+ ","
    1e88:	4cc8      	ldr	r4, [pc, #800]	; (21ac <getDataString()+0x348>)
    1e8a:	4621      	mov	r1, r4
    1e8c:	4668      	mov	r0, sp
    1e8e:	f00a fe2d 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1e92:	4606      	mov	r6, r0
									+ String(pitch_IMU)
    1e94:	2102      	movs	r1, #2
    1e96:	4bc6      	ldr	r3, [pc, #792]	; (21b0 <getDataString()+0x34c>)
    1e98:	ed93 0a00 	vldr	s0, [r3]
    1e9c:	a808      	add	r0, sp, #32
    1e9e:	f00a fdd1 	bl	ca44 <String::String(float, unsigned char)>
    1ea2:	a908      	add	r1, sp, #32
    1ea4:	4630      	mov	r0, r6
    1ea6:	f00a fe19 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1eaa:	4621      	mov	r1, r4
    1eac:	f00a fe1e 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1eb0:	4606      	mov	r6, r0
									+ String(yaw_IMU)
    1eb2:	2102      	movs	r1, #2
    1eb4:	4bbf      	ldr	r3, [pc, #764]	; (21b4 <getDataString()+0x350>)
    1eb6:	ed93 0a00 	vldr	s0, [r3]
    1eba:	a80c      	add	r0, sp, #48	; 0x30
    1ebc:	f00a fdc2 	bl	ca44 <String::String(float, unsigned char)>
    1ec0:	a90c      	add	r1, sp, #48	; 0x30
    1ec2:	4630      	mov	r0, r6
    1ec4:	f00a fe0a 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ec8:	4621      	mov	r1, r4
    1eca:	f00a fe0f 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1ece:	4606      	mov	r6, r0
									+ String(alpha)
    1ed0:	2102      	movs	r1, #2
    1ed2:	4bb9      	ldr	r3, [pc, #740]	; (21b8 <getDataString()+0x354>)
    1ed4:	ed93 0a00 	vldr	s0, [r3]
    1ed8:	a810      	add	r0, sp, #64	; 0x40
    1eda:	f00a fdb3 	bl	ca44 <String::String(float, unsigned char)>
    1ede:	a910      	add	r1, sp, #64	; 0x40
    1ee0:	4630      	mov	r0, r6
    1ee2:	f00a fdfb 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ee6:	4621      	mov	r1, r4
    1ee8:	f00a fe00 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1eec:	4606      	mov	r6, r0
									+ String(beta)
    1eee:	2102      	movs	r1, #2
    1ef0:	4bb2      	ldr	r3, [pc, #712]	; (21bc <getDataString()+0x358>)
    1ef2:	ed93 0a00 	vldr	s0, [r3]
    1ef6:	a814      	add	r0, sp, #80	; 0x50
    1ef8:	f00a fda4 	bl	ca44 <String::String(float, unsigned char)>
    1efc:	a914      	add	r1, sp, #80	; 0x50
    1efe:	4630      	mov	r0, r6
    1f00:	f00a fdec 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f04:	4621      	mov	r1, r4
    1f06:	f00a fdf1 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1f0a:	4606      	mov	r6, r0
									+ String(roll_des)
    1f0c:	2102      	movs	r1, #2
    1f0e:	4bac      	ldr	r3, [pc, #688]	; (21c0 <getDataString()+0x35c>)
    1f10:	ed93 0a00 	vldr	s0, [r3]
    1f14:	a818      	add	r0, sp, #96	; 0x60
    1f16:	f00a fd95 	bl	ca44 <String::String(float, unsigned char)>
    1f1a:	a918      	add	r1, sp, #96	; 0x60
    1f1c:	4630      	mov	r0, r6
    1f1e:	f00a fddd 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f22:	4621      	mov	r1, r4
    1f24:	f00a fde2 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1f28:	4606      	mov	r6, r0
									+ String(pitch_des)
    1f2a:	2102      	movs	r1, #2
    1f2c:	4ba5      	ldr	r3, [pc, #660]	; (21c4 <getDataString()+0x360>)
    1f2e:	ed93 0a00 	vldr	s0, [r3]
    1f32:	a81c      	add	r0, sp, #112	; 0x70
    1f34:	f00a fd86 	bl	ca44 <String::String(float, unsigned char)>
    1f38:	a91c      	add	r1, sp, #112	; 0x70
    1f3a:	4630      	mov	r0, r6
    1f3c:	f00a fdce 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f40:	4621      	mov	r1, r4
    1f42:	f00a fdd3 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1f46:	4606      	mov	r6, r0
									+ String(yaw_des)
    1f48:	2102      	movs	r1, #2
    1f4a:	4b9f      	ldr	r3, [pc, #636]	; (21c8 <getDataString()+0x364>)
    1f4c:	ed93 0a00 	vldr	s0, [r3]
    1f50:	a820      	add	r0, sp, #128	; 0x80
    1f52:	f00a fd77 	bl	ca44 <String::String(float, unsigned char)>
    1f56:	a920      	add	r1, sp, #128	; 0x80
    1f58:	4630      	mov	r0, r6
    1f5a:	f00a fdbf 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f5e:	4621      	mov	r1, r4
    1f60:	f00a fdc4 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1f64:	4606      	mov	r6, r0
									+ String(thro_des)
    1f66:	2102      	movs	r1, #2
    1f68:	4b98      	ldr	r3, [pc, #608]	; (21cc <getDataString()+0x368>)
    1f6a:	ed93 0a00 	vldr	s0, [r3]
    1f6e:	a824      	add	r0, sp, #144	; 0x90
    1f70:	f00a fd68 	bl	ca44 <String::String(float, unsigned char)>
    1f74:	a924      	add	r1, sp, #144	; 0x90
    1f76:	4630      	mov	r0, r6
    1f78:	f00a fdb0 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f7c:	4621      	mov	r1, r4
    1f7e:	f00a fdb5 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1f82:	4606      	mov	r6, r0
									+ String(roll_PID)
    1f84:	2102      	movs	r1, #2
    1f86:	4b92      	ldr	r3, [pc, #584]	; (21d0 <getDataString()+0x36c>)
    1f88:	ed93 0a00 	vldr	s0, [r3]
    1f8c:	a828      	add	r0, sp, #160	; 0xa0
    1f8e:	f00a fd59 	bl	ca44 <String::String(float, unsigned char)>
    1f92:	a928      	add	r1, sp, #160	; 0xa0
    1f94:	4630      	mov	r0, r6
    1f96:	f00a fda1 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f9a:	4621      	mov	r1, r4
    1f9c:	f00a fda6 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1fa0:	4606      	mov	r6, r0
									+ String(pitch_PID)
    1fa2:	2102      	movs	r1, #2
    1fa4:	4b8b      	ldr	r3, [pc, #556]	; (21d4 <getDataString()+0x370>)
    1fa6:	ed93 0a00 	vldr	s0, [r3]
    1faa:	a82c      	add	r0, sp, #176	; 0xb0
    1fac:	f00a fd4a 	bl	ca44 <String::String(float, unsigned char)>
    1fb0:	a92c      	add	r1, sp, #176	; 0xb0
    1fb2:	4630      	mov	r0, r6
    1fb4:	f00a fd92 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fb8:	4621      	mov	r1, r4
    1fba:	f00a fd97 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1fbe:	4606      	mov	r6, r0
									+ String(yaw_PID)
    1fc0:	2102      	movs	r1, #2
    1fc2:	4b85      	ldr	r3, [pc, #532]	; (21d8 <getDataString()+0x374>)
    1fc4:	ed93 0a00 	vldr	s0, [r3]
    1fc8:	a830      	add	r0, sp, #192	; 0xc0
    1fca:	f00a fd3b 	bl	ca44 <String::String(float, unsigned char)>
    1fce:	a930      	add	r1, sp, #192	; 0xc0
    1fd0:	4630      	mov	r0, r6
    1fd2:	f00a fd83 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fd6:	4621      	mov	r1, r4
    1fd8:	f00a fd88 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1fdc:	4606      	mov	r6, r0
									+ String(channel_1_pwm)
    1fde:	220a      	movs	r2, #10
    1fe0:	4b7e      	ldr	r3, [pc, #504]	; (21dc <getDataString()+0x378>)
    1fe2:	6819      	ldr	r1, [r3, #0]
    1fe4:	a834      	add	r0, sp, #208	; 0xd0
    1fe6:	f00a fd1a 	bl	ca1e <String::String(int, unsigned char)>
    1fea:	a934      	add	r1, sp, #208	; 0xd0
    1fec:	4630      	mov	r0, r6
    1fee:	f00a fd75 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ff2:	4621      	mov	r1, r4
    1ff4:	f00a fd7a 	bl	caec <operator+(StringSumHelper const&, char const*)>
    1ff8:	4606      	mov	r6, r0
									+ String(channel_2_pwm)
    1ffa:	220a      	movs	r2, #10
    1ffc:	4b78      	ldr	r3, [pc, #480]	; (21e0 <getDataString()+0x37c>)
    1ffe:	6819      	ldr	r1, [r3, #0]
    2000:	a838      	add	r0, sp, #224	; 0xe0
    2002:	f00a fd0c 	bl	ca1e <String::String(int, unsigned char)>
    2006:	a938      	add	r1, sp, #224	; 0xe0
    2008:	4630      	mov	r0, r6
    200a:	f00a fd67 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    200e:	4621      	mov	r1, r4
    2010:	f00a fd6c 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2014:	4606      	mov	r6, r0
									+ String(channel_3_pwm)
    2016:	220a      	movs	r2, #10
    2018:	4b72      	ldr	r3, [pc, #456]	; (21e4 <getDataString()+0x380>)
    201a:	6819      	ldr	r1, [r3, #0]
    201c:	a83c      	add	r0, sp, #240	; 0xf0
    201e:	f00a fcfe 	bl	ca1e <String::String(int, unsigned char)>
    2022:	a93c      	add	r1, sp, #240	; 0xf0
    2024:	4630      	mov	r0, r6
    2026:	f00a fd59 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    202a:	4621      	mov	r1, r4
    202c:	f00a fd5e 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2030:	4606      	mov	r6, r0
									+ String(channel_4_pwm)
    2032:	220a      	movs	r2, #10
    2034:	4b6c      	ldr	r3, [pc, #432]	; (21e8 <getDataString()+0x384>)
    2036:	6819      	ldr	r1, [r3, #0]
    2038:	a840      	add	r0, sp, #256	; 0x100
    203a:	f00a fcf0 	bl	ca1e <String::String(int, unsigned char)>
    203e:	a940      	add	r1, sp, #256	; 0x100
    2040:	4630      	mov	r0, r6
    2042:	f00a fd4b 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2046:	4621      	mov	r1, r4
    2048:	f00a fd50 	bl	caec <operator+(StringSumHelper const&, char const*)>
    204c:	4606      	mov	r6, r0
									+ String(channel_5_pwm)
    204e:	220a      	movs	r2, #10
    2050:	4b66      	ldr	r3, [pc, #408]	; (21ec <getDataString()+0x388>)
    2052:	6819      	ldr	r1, [r3, #0]
    2054:	a844      	add	r0, sp, #272	; 0x110
    2056:	f00a fce2 	bl	ca1e <String::String(int, unsigned char)>
    205a:	a944      	add	r1, sp, #272	; 0x110
    205c:	4630      	mov	r0, r6
    205e:	f00a fd3d 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2062:	4621      	mov	r1, r4
    2064:	f00a fd42 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2068:	4606      	mov	r6, r0
									+ String(channel_6_pwm)
    206a:	220a      	movs	r2, #10
    206c:	4b60      	ldr	r3, [pc, #384]	; (21f0 <getDataString()+0x38c>)
    206e:	6819      	ldr	r1, [r3, #0]
    2070:	a848      	add	r0, sp, #288	; 0x120
    2072:	f00a fcd4 	bl	ca1e <String::String(int, unsigned char)>
    2076:	a948      	add	r1, sp, #288	; 0x120
    2078:	4630      	mov	r0, r6
    207a:	f00a fd2f 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    207e:	4621      	mov	r1, r4
    2080:	f00a fd34 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2084:	4606      	mov	r6, r0
									+ String(channel_7_pwm)
    2086:	220a      	movs	r2, #10
    2088:	4b5a      	ldr	r3, [pc, #360]	; (21f4 <getDataString()+0x390>)
    208a:	6819      	ldr	r1, [r3, #0]
    208c:	a84c      	add	r0, sp, #304	; 0x130
    208e:	f00a fcc6 	bl	ca1e <String::String(int, unsigned char)>
    2092:	a94c      	add	r1, sp, #304	; 0x130
    2094:	4630      	mov	r0, r6
    2096:	f00a fd21 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    209a:	4621      	mov	r1, r4
    209c:	f00a fd26 	bl	caec <operator+(StringSumHelper const&, char const*)>
    20a0:	4606      	mov	r6, r0
									+ String(channel_8_pwm)
    20a2:	220a      	movs	r2, #10
    20a4:	4b54      	ldr	r3, [pc, #336]	; (21f8 <getDataString()+0x394>)
    20a6:	6819      	ldr	r1, [r3, #0]
    20a8:	a850      	add	r0, sp, #320	; 0x140
    20aa:	f00a fcb8 	bl	ca1e <String::String(int, unsigned char)>
    20ae:	a950      	add	r1, sp, #320	; 0x140
    20b0:	4630      	mov	r0, r6
    20b2:	f00a fd13 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    20b6:	4621      	mov	r1, r4
    20b8:	f00a fd18 	bl	caec <operator+(StringSumHelper const&, char const*)>
    20bc:	4606      	mov	r6, r0
									+ String(channel_9_pwm)
    20be:	220a      	movs	r2, #10
    20c0:	4b4e      	ldr	r3, [pc, #312]	; (21fc <getDataString()+0x398>)
    20c2:	6819      	ldr	r1, [r3, #0]
    20c4:	a854      	add	r0, sp, #336	; 0x150
    20c6:	f00a fcaa 	bl	ca1e <String::String(int, unsigned char)>
    20ca:	a954      	add	r1, sp, #336	; 0x150
    20cc:	4630      	mov	r0, r6
    20ce:	f00a fd05 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    20d2:	4621      	mov	r1, r4
    20d4:	f00a fd0a 	bl	caec <operator+(StringSumHelper const&, char const*)>
    20d8:	4606      	mov	r6, r0
									+ String(channel_10_pwm)
    20da:	220a      	movs	r2, #10
    20dc:	4b48      	ldr	r3, [pc, #288]	; (2200 <getDataString()+0x39c>)
    20de:	6819      	ldr	r1, [r3, #0]
    20e0:	a858      	add	r0, sp, #352	; 0x160
    20e2:	f00a fc9c 	bl	ca1e <String::String(int, unsigned char)>
    20e6:	a958      	add	r1, sp, #352	; 0x160
    20e8:	4630      	mov	r0, r6
    20ea:	f00a fcf7 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    20ee:	4621      	mov	r1, r4
    20f0:	f00a fcfc 	bl	caec <operator+(StringSumHelper const&, char const*)>
    20f4:	4606      	mov	r6, r0
									+ String(channel_11_pwm)
    20f6:	220a      	movs	r2, #10
    20f8:	4b42      	ldr	r3, [pc, #264]	; (2204 <getDataString()+0x3a0>)
    20fa:	6819      	ldr	r1, [r3, #0]
    20fc:	a85c      	add	r0, sp, #368	; 0x170
    20fe:	f00a fc8e 	bl	ca1e <String::String(int, unsigned char)>
    2102:	a95c      	add	r1, sp, #368	; 0x170
    2104:	4630      	mov	r0, r6
    2106:	f00a fce9 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    210a:	4621      	mov	r1, r4
    210c:	f00a fcee 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2110:	4606      	mov	r6, r0
									+ String(channel_12_pwm)
    2112:	220a      	movs	r2, #10
    2114:	4b3c      	ldr	r3, [pc, #240]	; (2208 <getDataString()+0x3a4>)
    2116:	6819      	ldr	r1, [r3, #0]
    2118:	a860      	add	r0, sp, #384	; 0x180
    211a:	f00a fc80 	bl	ca1e <String::String(int, unsigned char)>
    211e:	a960      	add	r1, sp, #384	; 0x180
    2120:	4630      	mov	r0, r6
    2122:	f00a fcdb 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2126:	4621      	mov	r1, r4
    2128:	f00a fce0 	bl	caec <operator+(StringSumHelper const&, char const*)>
    212c:	4606      	mov	r6, r0
									+ String(channel_13_pwm)
    212e:	220a      	movs	r2, #10
    2130:	4b36      	ldr	r3, [pc, #216]	; (220c <getDataString()+0x3a8>)
    2132:	6819      	ldr	r1, [r3, #0]
    2134:	a864      	add	r0, sp, #400	; 0x190
    2136:	f00a fc72 	bl	ca1e <String::String(int, unsigned char)>
    213a:	a964      	add	r1, sp, #400	; 0x190
    213c:	4630      	mov	r0, r6
    213e:	f00a fccd 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2142:	4621      	mov	r1, r4
    2144:	f00a fcd2 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2148:	4606      	mov	r6, r0
									+ String(GyroX)
    214a:	2102      	movs	r1, #2
    214c:	4b30      	ldr	r3, [pc, #192]	; (2210 <getDataString()+0x3ac>)
    214e:	ed93 0a00 	vldr	s0, [r3]
    2152:	a868      	add	r0, sp, #416	; 0x1a0
    2154:	f00a fc76 	bl	ca44 <String::String(float, unsigned char)>
    2158:	a968      	add	r1, sp, #416	; 0x1a0
    215a:	4630      	mov	r0, r6
    215c:	f00a fcbe 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2160:	4621      	mov	r1, r4
    2162:	f00a fcc3 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2166:	4606      	mov	r6, r0
									+ String(GyroY)
    2168:	2102      	movs	r1, #2
    216a:	4b2a      	ldr	r3, [pc, #168]	; (2214 <getDataString()+0x3b0>)
    216c:	ed93 0a00 	vldr	s0, [r3]
    2170:	a86c      	add	r0, sp, #432	; 0x1b0
    2172:	f00a fc67 	bl	ca44 <String::String(float, unsigned char)>
    2176:	a96c      	add	r1, sp, #432	; 0x1b0
    2178:	4630      	mov	r0, r6
    217a:	f00a fcaf 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    217e:	4621      	mov	r1, r4
    2180:	f00a fcb4 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2184:	4606      	mov	r6, r0
									+ String(GyroZ)
    2186:	2102      	movs	r1, #2
    2188:	4b23      	ldr	r3, [pc, #140]	; (2218 <getDataString()+0x3b4>)
    218a:	ed93 0a00 	vldr	s0, [r3]
    218e:	a870      	add	r0, sp, #448	; 0x1c0
    2190:	f00a fc58 	bl	ca44 <String::String(float, unsigned char)>
    2194:	a970      	add	r1, sp, #448	; 0x1c0
    2196:	4630      	mov	r0, r6
    2198:	f00a fca0 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    219c:	4621      	mov	r1, r4
    219e:	f00a fca5 	bl	caec <operator+(StringSumHelper const&, char const*)>
    21a2:	4606      	mov	r6, r0
									+ String(AccX)
    21a4:	2102      	movs	r1, #2
    21a6:	e039      	b.n	221c <getDataString()+0x3b8>
    21a8:	200050d8 	.word	0x200050d8
    21ac:	20001d3c 	.word	0x20001d3c
    21b0:	200050b0 	.word	0x200050b0
    21b4:	20005310 	.word	0x20005310
    21b8:	20004ec8 	.word	0x20004ec8
    21bc:	20004edc 	.word	0x20004edc
    21c0:	200050e0 	.word	0x200050e0
    21c4:	200050b8 	.word	0x200050b8
    21c8:	20005318 	.word	0x20005318
    21cc:	200052f8 	.word	0x200052f8
    21d0:	200050dc 	.word	0x200050dc
    21d4:	200050b4 	.word	0x200050b4
    21d8:	20005314 	.word	0x20005314
    21dc:	20004f18 	.word	0x20004f18
    21e0:	20004f24 	.word	0x20004f24
    21e4:	20004f30 	.word	0x20004f30
    21e8:	20004f3c 	.word	0x20004f3c
    21ec:	20004f48 	.word	0x20004f48
    21f0:	20004f4c 	.word	0x20004f4c
    21f4:	20004f50 	.word	0x20004f50
    21f8:	20004f54 	.word	0x20004f54
    21fc:	20004f58 	.word	0x20004f58
    2200:	20004f08 	.word	0x20004f08
    2204:	20004f0c 	.word	0x20004f0c
    2208:	20004f10 	.word	0x20004f10
    220c:	20004f14 	.word	0x20004f14
    2210:	200040a4 	.word	0x200040a4
    2214:	200040ac 	.word	0x200040ac
    2218:	200040b4 	.word	0x200040b4
    221c:	4bcc      	ldr	r3, [pc, #816]	; (2550 <getDataString()+0x6ec>)
    221e:	ed93 0a00 	vldr	s0, [r3]
    2222:	a874      	add	r0, sp, #464	; 0x1d0
    2224:	f00a fc0e 	bl	ca44 <String::String(float, unsigned char)>
    2228:	a974      	add	r1, sp, #464	; 0x1d0
    222a:	4630      	mov	r0, r6
    222c:	f00a fc56 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2230:	4621      	mov	r1, r4
    2232:	f00a fc5b 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2236:	4606      	mov	r6, r0
									+ String(AccY)
    2238:	2102      	movs	r1, #2
    223a:	4bc6      	ldr	r3, [pc, #792]	; (2554 <getDataString()+0x6f0>)
    223c:	ed93 0a00 	vldr	s0, [r3]
    2240:	a878      	add	r0, sp, #480	; 0x1e0
    2242:	f00a fbff 	bl	ca44 <String::String(float, unsigned char)>
    2246:	a978      	add	r1, sp, #480	; 0x1e0
    2248:	4630      	mov	r0, r6
    224a:	f00a fc47 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    224e:	4621      	mov	r1, r4
    2250:	f00a fc4c 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2254:	4606      	mov	r6, r0
									+ String(AccZ)
    2256:	2102      	movs	r1, #2
    2258:	4bbf      	ldr	r3, [pc, #764]	; (2558 <getDataString()+0x6f4>)
    225a:	ed93 0a00 	vldr	s0, [r3]
    225e:	a87c      	add	r0, sp, #496	; 0x1f0
    2260:	f00a fbf0 	bl	ca44 <String::String(float, unsigned char)>
    2264:	a97c      	add	r1, sp, #496	; 0x1f0
    2266:	4630      	mov	r0, r6
    2268:	f00a fc38 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    226c:	4621      	mov	r1, r4
    226e:	f00a fc3d 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2272:	4606      	mov	r6, r0
									+ String(s1_command_scaled)
    2274:	2102      	movs	r1, #2
    2276:	4bb9      	ldr	r3, [pc, #740]	; (255c <getDataString()+0x6f8>)
    2278:	ed93 0a00 	vldr	s0, [r3]
    227c:	a880      	add	r0, sp, #512	; 0x200
    227e:	f00a fbe1 	bl	ca44 <String::String(float, unsigned char)>
    2282:	a980      	add	r1, sp, #512	; 0x200
    2284:	4630      	mov	r0, r6
    2286:	f00a fc29 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    228a:	4621      	mov	r1, r4
    228c:	f00a fc2e 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2290:	4606      	mov	r6, r0
									+ String(s2_command_scaled)
    2292:	2102      	movs	r1, #2
    2294:	4bb2      	ldr	r3, [pc, #712]	; (2560 <getDataString()+0x6fc>)
    2296:	ed93 0a00 	vldr	s0, [r3]
    229a:	a884      	add	r0, sp, #528	; 0x210
    229c:	f00a fbd2 	bl	ca44 <String::String(float, unsigned char)>
    22a0:	a984      	add	r1, sp, #528	; 0x210
    22a2:	4630      	mov	r0, r6
    22a4:	f00a fc1a 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    22a8:	4621      	mov	r1, r4
    22aa:	f00a fc1f 	bl	caec <operator+(StringSumHelper const&, char const*)>
    22ae:	4606      	mov	r6, r0
									+ String(s3_command_scaled)
    22b0:	2102      	movs	r1, #2
    22b2:	4bac      	ldr	r3, [pc, #688]	; (2564 <getDataString()+0x700>)
    22b4:	ed93 0a00 	vldr	s0, [r3]
    22b8:	a888      	add	r0, sp, #544	; 0x220
    22ba:	f00a fbc3 	bl	ca44 <String::String(float, unsigned char)>
    22be:	a988      	add	r1, sp, #544	; 0x220
    22c0:	4630      	mov	r0, r6
    22c2:	f00a fc0b 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    22c6:	4621      	mov	r1, r4
    22c8:	f00a fc10 	bl	caec <operator+(StringSumHelper const&, char const*)>
    22cc:	4606      	mov	r6, r0
									+ String(s4_command_scaled)
    22ce:	2102      	movs	r1, #2
    22d0:	4ba5      	ldr	r3, [pc, #660]	; (2568 <getDataString()+0x704>)
    22d2:	ed93 0a00 	vldr	s0, [r3]
    22d6:	a88c      	add	r0, sp, #560	; 0x230
    22d8:	f00a fbb4 	bl	ca44 <String::String(float, unsigned char)>
    22dc:	a98c      	add	r1, sp, #560	; 0x230
    22de:	4630      	mov	r0, r6
    22e0:	f00a fbfc 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    22e4:	4621      	mov	r1, r4
    22e6:	f00a fc01 	bl	caec <operator+(StringSumHelper const&, char const*)>
    22ea:	4606      	mov	r6, r0
									+ String(Kp_roll_angle*pScaleRoll)
    22ec:	4b9f      	ldr	r3, [pc, #636]	; (256c <getDataString()+0x708>)
    22ee:	ed93 0a00 	vldr	s0, [r3]
    22f2:	4b9f      	ldr	r3, [pc, #636]	; (2570 <getDataString()+0x70c>)
    22f4:	edd3 7a00 	vldr	s15, [r3]
    22f8:	2102      	movs	r1, #2
    22fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    22fe:	a890      	add	r0, sp, #576	; 0x240
    2300:	f00a fba0 	bl	ca44 <String::String(float, unsigned char)>
    2304:	a990      	add	r1, sp, #576	; 0x240
    2306:	4630      	mov	r0, r6
    2308:	f00a fbe8 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    230c:	4621      	mov	r1, r4
    230e:	f00a fbed 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2312:	4606      	mov	r6, r0
									+ String(Ki_roll_angle*iScaleRoll)
    2314:	4b97      	ldr	r3, [pc, #604]	; (2574 <getDataString()+0x710>)
    2316:	ed93 0a00 	vldr	s0, [r3]
    231a:	4b97      	ldr	r3, [pc, #604]	; (2578 <getDataString()+0x714>)
    231c:	edd3 7a00 	vldr	s15, [r3]
    2320:	2102      	movs	r1, #2
    2322:	ee20 0a27 	vmul.f32	s0, s0, s15
    2326:	a894      	add	r0, sp, #592	; 0x250
    2328:	f00a fb8c 	bl	ca44 <String::String(float, unsigned char)>
    232c:	a994      	add	r1, sp, #592	; 0x250
    232e:	4630      	mov	r0, r6
    2330:	f00a fbd4 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2334:	4621      	mov	r1, r4
    2336:	f00a fbd9 	bl	caec <operator+(StringSumHelper const&, char const*)>
    233a:	4606      	mov	r6, r0
									+ String(Kd_roll_angle*dScaleRoll)	
    233c:	4b8f      	ldr	r3, [pc, #572]	; (257c <getDataString()+0x718>)
    233e:	ed93 0a00 	vldr	s0, [r3]
    2342:	4b8f      	ldr	r3, [pc, #572]	; (2580 <getDataString()+0x71c>)
    2344:	edd3 7a00 	vldr	s15, [r3]
    2348:	2102      	movs	r1, #2
    234a:	ee20 0a27 	vmul.f32	s0, s0, s15
    234e:	a898      	add	r0, sp, #608	; 0x260
    2350:	f00a fb78 	bl	ca44 <String::String(float, unsigned char)>
    2354:	a998      	add	r1, sp, #608	; 0x260
    2356:	4630      	mov	r0, r6
    2358:	f00a fbc0 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    235c:	4621      	mov	r1, r4
    235e:	f00a fbc5 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2362:	4606      	mov	r6, r0
									+ String(Kp_pitch_angle*pScalePitch)
    2364:	4b87      	ldr	r3, [pc, #540]	; (2584 <getDataString()+0x720>)
    2366:	ed93 0a00 	vldr	s0, [r3]
    236a:	4b87      	ldr	r3, [pc, #540]	; (2588 <getDataString()+0x724>)
    236c:	edd3 7a00 	vldr	s15, [r3]
    2370:	2102      	movs	r1, #2
    2372:	ee20 0a27 	vmul.f32	s0, s0, s15
    2376:	a89c      	add	r0, sp, #624	; 0x270
    2378:	f00a fb64 	bl	ca44 <String::String(float, unsigned char)>
    237c:	a99c      	add	r1, sp, #624	; 0x270
    237e:	4630      	mov	r0, r6
    2380:	f00a fbac 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2384:	4621      	mov	r1, r4
    2386:	f00a fbb1 	bl	caec <operator+(StringSumHelper const&, char const*)>
    238a:	4606      	mov	r6, r0
									+ String(Ki_pitch_angle*iScalePitch)
    238c:	4b7f      	ldr	r3, [pc, #508]	; (258c <getDataString()+0x728>)
    238e:	ed93 0a00 	vldr	s0, [r3]
    2392:	4b7f      	ldr	r3, [pc, #508]	; (2590 <getDataString()+0x72c>)
    2394:	edd3 7a00 	vldr	s15, [r3]
    2398:	2102      	movs	r1, #2
    239a:	ee20 0a27 	vmul.f32	s0, s0, s15
    239e:	a8a0      	add	r0, sp, #640	; 0x280
    23a0:	f00a fb50 	bl	ca44 <String::String(float, unsigned char)>
    23a4:	a9a0      	add	r1, sp, #640	; 0x280
    23a6:	4630      	mov	r0, r6
    23a8:	f00a fb98 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    23ac:	4621      	mov	r1, r4
    23ae:	f00a fb9d 	bl	caec <operator+(StringSumHelper const&, char const*)>
    23b2:	4606      	mov	r6, r0
									+ String(Kd_pitch_angle*dScalePitch)	
    23b4:	4b77      	ldr	r3, [pc, #476]	; (2594 <getDataString()+0x730>)
    23b6:	ed93 0a00 	vldr	s0, [r3]
    23ba:	4b77      	ldr	r3, [pc, #476]	; (2598 <getDataString()+0x734>)
    23bc:	edd3 7a00 	vldr	s15, [r3]
    23c0:	2102      	movs	r1, #2
    23c2:	ee20 0a27 	vmul.f32	s0, s0, s15
    23c6:	a8a4      	add	r0, sp, #656	; 0x290
    23c8:	f00a fb3c 	bl	ca44 <String::String(float, unsigned char)>
    23cc:	a9a4      	add	r1, sp, #656	; 0x290
    23ce:	4630      	mov	r0, r6
    23d0:	f00a fb84 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    23d4:	4621      	mov	r1, r4
    23d6:	f00a fb89 	bl	caec <operator+(StringSumHelper const&, char const*)>
    23da:	4606      	mov	r6, r0
									+ String(Kp_yaw*pScaleYaw)
    23dc:	4b6f      	ldr	r3, [pc, #444]	; (259c <getDataString()+0x738>)
    23de:	ed93 0a00 	vldr	s0, [r3]
    23e2:	4b6f      	ldr	r3, [pc, #444]	; (25a0 <getDataString()+0x73c>)
    23e4:	edd3 7a00 	vldr	s15, [r3]
    23e8:	2102      	movs	r1, #2
    23ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    23ee:	a8a8      	add	r0, sp, #672	; 0x2a0
    23f0:	f00a fb28 	bl	ca44 <String::String(float, unsigned char)>
    23f4:	a9a8      	add	r1, sp, #672	; 0x2a0
    23f6:	4630      	mov	r0, r6
    23f8:	f00a fb70 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    23fc:	4621      	mov	r1, r4
    23fe:	f00a fb75 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2402:	4606      	mov	r6, r0
									+ String(Ki_yaw*iScaleYaw)
    2404:	4b67      	ldr	r3, [pc, #412]	; (25a4 <getDataString()+0x740>)
    2406:	ed93 0a00 	vldr	s0, [r3]
    240a:	4b67      	ldr	r3, [pc, #412]	; (25a8 <getDataString()+0x744>)
    240c:	edd3 7a00 	vldr	s15, [r3]
    2410:	2102      	movs	r1, #2
    2412:	ee20 0a27 	vmul.f32	s0, s0, s15
    2416:	a8ac      	add	r0, sp, #688	; 0x2b0
    2418:	f00a fb14 	bl	ca44 <String::String(float, unsigned char)>
    241c:	a9ac      	add	r1, sp, #688	; 0x2b0
    241e:	4630      	mov	r0, r6
    2420:	f00a fb5c 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    2424:	4621      	mov	r1, r4
    2426:	f00a fb61 	bl	caec <operator+(StringSumHelper const&, char const*)>
    242a:	4606      	mov	r6, r0
									+ String(Kd_yaw*dScaleYaw)	
    242c:	4b5f      	ldr	r3, [pc, #380]	; (25ac <getDataString()+0x748>)
    242e:	ed93 0a00 	vldr	s0, [r3]
    2432:	4b5f      	ldr	r3, [pc, #380]	; (25b0 <getDataString()+0x74c>)
    2434:	edd3 7a00 	vldr	s15, [r3]
    2438:	2102      	movs	r1, #2
    243a:	ee20 0a27 	vmul.f32	s0, s0, s15
    243e:	a8b0      	add	r0, sp, #704	; 0x2c0
    2440:	f00a fb00 	bl	ca44 <String::String(float, unsigned char)>
    2444:	a9b0      	add	r1, sp, #704	; 0x2c0
    2446:	4630      	mov	r0, r6
    2448:	f00a fb48 	bl	cadc <operator+(StringSumHelper const&, String const&)>
									+ ","
    244c:	4621      	mov	r1, r4
    244e:	f00a fb4d 	bl	caec <operator+(StringSumHelper const&, char const*)>
    2452:	4604      	mov	r4, r0
									+ String(failureFlag);	
    2454:	220a      	movs	r2, #10
    2456:	4b57      	ldr	r3, [pc, #348]	; (25b4 <getDataString()+0x750>)
    2458:	7819      	ldrb	r1, [r3, #0]
    245a:	a8b4      	add	r0, sp, #720	; 0x2d0
    245c:	f00a fadf 	bl	ca1e <String::String(int, unsigned char)>
    2460:	a9b4      	add	r1, sp, #720	; 0x2d0
    2462:	4620      	mov	r0, r4
    2464:	f00a fb3a 	bl	cadc <operator+(StringSumHelper const&, String const&)>
    2468:	4601      	mov	r1, r0
    246a:	4628      	mov	r0, r5
    246c:	f00a faa9 	bl	c9c2 <String::operator=(String const&)>
    2470:	a8b4      	add	r0, sp, #720	; 0x2d0
    2472:	f00a fa35 	bl	c8e0 <String::~String()>
									+ String(Kd_yaw*dScaleYaw)	
    2476:	a8b0      	add	r0, sp, #704	; 0x2c0
    2478:	f00a fa32 	bl	c8e0 <String::~String()>
									+ String(Ki_yaw*iScaleYaw)
    247c:	a8ac      	add	r0, sp, #688	; 0x2b0
    247e:	f00a fa2f 	bl	c8e0 <String::~String()>
									+ String(Kp_yaw*pScaleYaw)
    2482:	a8a8      	add	r0, sp, #672	; 0x2a0
    2484:	f00a fa2c 	bl	c8e0 <String::~String()>
									+ String(Kd_pitch_angle*dScalePitch)	
    2488:	a8a4      	add	r0, sp, #656	; 0x290
    248a:	f00a fa29 	bl	c8e0 <String::~String()>
									+ String(Ki_pitch_angle*iScalePitch)
    248e:	a8a0      	add	r0, sp, #640	; 0x280
    2490:	f00a fa26 	bl	c8e0 <String::~String()>
									+ String(Kp_pitch_angle*pScalePitch)
    2494:	a89c      	add	r0, sp, #624	; 0x270
    2496:	f00a fa23 	bl	c8e0 <String::~String()>
									+ String(Kd_roll_angle*dScaleRoll)	
    249a:	a898      	add	r0, sp, #608	; 0x260
    249c:	f00a fa20 	bl	c8e0 <String::~String()>
									+ String(Ki_roll_angle*iScaleRoll)
    24a0:	a894      	add	r0, sp, #592	; 0x250
    24a2:	f00a fa1d 	bl	c8e0 <String::~String()>
									+ String(Kp_roll_angle*pScaleRoll)
    24a6:	a890      	add	r0, sp, #576	; 0x240
    24a8:	f00a fa1a 	bl	c8e0 <String::~String()>
									+ String(s4_command_scaled)
    24ac:	a88c      	add	r0, sp, #560	; 0x230
    24ae:	f00a fa17 	bl	c8e0 <String::~String()>
									+ String(s3_command_scaled)
    24b2:	a888      	add	r0, sp, #544	; 0x220
    24b4:	f00a fa14 	bl	c8e0 <String::~String()>
									+ String(s2_command_scaled)
    24b8:	a884      	add	r0, sp, #528	; 0x210
    24ba:	f00a fa11 	bl	c8e0 <String::~String()>
									+ String(s1_command_scaled)
    24be:	a880      	add	r0, sp, #512	; 0x200
    24c0:	f00a fa0e 	bl	c8e0 <String::~String()>
									+ String(AccZ)
    24c4:	a87c      	add	r0, sp, #496	; 0x1f0
    24c6:	f00a fa0b 	bl	c8e0 <String::~String()>
									+ String(AccY)
    24ca:	a878      	add	r0, sp, #480	; 0x1e0
    24cc:	f00a fa08 	bl	c8e0 <String::~String()>
									+ String(AccX)
    24d0:	a874      	add	r0, sp, #464	; 0x1d0
    24d2:	f00a fa05 	bl	c8e0 <String::~String()>
									+ String(GyroZ)
    24d6:	a870      	add	r0, sp, #448	; 0x1c0
    24d8:	f00a fa02 	bl	c8e0 <String::~String()>
									+ String(GyroY)
    24dc:	a86c      	add	r0, sp, #432	; 0x1b0
    24de:	f00a f9ff 	bl	c8e0 <String::~String()>
									+ String(GyroX)
    24e2:	a868      	add	r0, sp, #416	; 0x1a0
    24e4:	f00a f9fc 	bl	c8e0 <String::~String()>
									+ String(channel_13_pwm)
    24e8:	a864      	add	r0, sp, #400	; 0x190
    24ea:	f00a f9f9 	bl	c8e0 <String::~String()>
									+ String(channel_12_pwm)
    24ee:	a860      	add	r0, sp, #384	; 0x180
    24f0:	f00a f9f6 	bl	c8e0 <String::~String()>
									+ String(channel_11_pwm)
    24f4:	a85c      	add	r0, sp, #368	; 0x170
    24f6:	f00a f9f3 	bl	c8e0 <String::~String()>
									+ String(channel_10_pwm)
    24fa:	a858      	add	r0, sp, #352	; 0x160
    24fc:	f00a f9f0 	bl	c8e0 <String::~String()>
									+ String(channel_9_pwm)
    2500:	a854      	add	r0, sp, #336	; 0x150
    2502:	f00a f9ed 	bl	c8e0 <String::~String()>
									+ String(channel_8_pwm)
    2506:	a850      	add	r0, sp, #320	; 0x140
    2508:	f00a f9ea 	bl	c8e0 <String::~String()>
									+ String(channel_7_pwm)
    250c:	a84c      	add	r0, sp, #304	; 0x130
    250e:	f00a f9e7 	bl	c8e0 <String::~String()>
									+ String(channel_6_pwm)
    2512:	a848      	add	r0, sp, #288	; 0x120
    2514:	f00a f9e4 	bl	c8e0 <String::~String()>
									+ String(channel_5_pwm)
    2518:	a844      	add	r0, sp, #272	; 0x110
    251a:	f00a f9e1 	bl	c8e0 <String::~String()>
									+ String(channel_4_pwm)
    251e:	a840      	add	r0, sp, #256	; 0x100
    2520:	f00a f9de 	bl	c8e0 <String::~String()>
									+ String(channel_3_pwm)
    2524:	a83c      	add	r0, sp, #240	; 0xf0
    2526:	f00a f9db 	bl	c8e0 <String::~String()>
									+ String(channel_2_pwm)
    252a:	a838      	add	r0, sp, #224	; 0xe0
    252c:	f00a f9d8 	bl	c8e0 <String::~String()>
									+ String(channel_1_pwm)
    2530:	a834      	add	r0, sp, #208	; 0xd0
    2532:	f00a f9d5 	bl	c8e0 <String::~String()>
									+ String(yaw_PID)
    2536:	a830      	add	r0, sp, #192	; 0xc0
    2538:	f00a f9d2 	bl	c8e0 <String::~String()>
									+ String(pitch_PID)
    253c:	a82c      	add	r0, sp, #176	; 0xb0
    253e:	f00a f9cf 	bl	c8e0 <String::~String()>
									+ String(roll_PID)
    2542:	a828      	add	r0, sp, #160	; 0xa0
    2544:	f00a f9cc 	bl	c8e0 <String::~String()>
									+ String(thro_des)
    2548:	a824      	add	r0, sp, #144	; 0x90
    254a:	f00a f9c9 	bl	c8e0 <String::~String()>
    254e:	e033      	b.n	25b8 <getDataString()+0x754>
    2550:	2000408c 	.word	0x2000408c
    2554:	20004094 	.word	0x20004094
    2558:	2000409c 	.word	0x2000409c
    255c:	2000511c 	.word	0x2000511c
    2560:	20005124 	.word	0x20005124
    2564:	2000512c 	.word	0x2000512c
    2568:	20005134 	.word	0x20005134
    256c:	20003170 	.word	0x20003170
    2570:	200038a8 	.word	0x200038a8
    2574:	20003164 	.word	0x20003164
    2578:	20003834 	.word	0x20003834
    257c:	20003158 	.word	0x20003158
    2580:	200037f8 	.word	0x200037f8
    2584:	2000316c 	.word	0x2000316c
    2588:	200038a4 	.word	0x200038a4
    258c:	20003160 	.word	0x20003160
    2590:	20003830 	.word	0x20003830
    2594:	20003154 	.word	0x20003154
    2598:	200037f4 	.word	0x200037f4
    259c:	20003174 	.word	0x20003174
    25a0:	200038ac 	.word	0x200038ac
    25a4:	20003168 	.word	0x20003168
    25a8:	20003838 	.word	0x20003838
    25ac:	2000315c 	.word	0x2000315c
    25b0:	200037fc 	.word	0x200037fc
    25b4:	20005335 	.word	0x20005335
									+ String(yaw_des)
    25b8:	a820      	add	r0, sp, #128	; 0x80
    25ba:	f00a f991 	bl	c8e0 <String::~String()>
									+ String(pitch_des)
    25be:	a81c      	add	r0, sp, #112	; 0x70
    25c0:	f00a f98e 	bl	c8e0 <String::~String()>
									+ String(roll_des)
    25c4:	a818      	add	r0, sp, #96	; 0x60
    25c6:	f00a f98b 	bl	c8e0 <String::~String()>
									+ String(beta)
    25ca:	a814      	add	r0, sp, #80	; 0x50
    25cc:	f00a f988 	bl	c8e0 <String::~String()>
									+ String(alpha)
    25d0:	a810      	add	r0, sp, #64	; 0x40
    25d2:	f00a f985 	bl	c8e0 <String::~String()>
									+ String(yaw_IMU)
    25d6:	a80c      	add	r0, sp, #48	; 0x30
    25d8:	f00a f982 	bl	c8e0 <String::~String()>
									+ String(pitch_IMU)
    25dc:	a808      	add	r0, sp, #32
    25de:	f00a f97f 	bl	c8e0 <String::~String()>
class StringSumHelper : public String
    25e2:	4668      	mov	r0, sp
    25e4:	f00a f97c 	bl	c8e0 <String::~String()>
	csvDataString = String(roll_IMU)
    25e8:	a804      	add	r0, sp, #16
    25ea:	f00a f979 	bl	c8e0 <String::~String()>
	return csvDataString;
}
    25ee:	4628      	mov	r0, r5
    25f0:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    25f4:	bd70      	pop	{r4, r5, r6, pc}
    25f6:	bf00      	nop

000025f8 <invSqrt(float)>:
  unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
  float tmp = *(float*)&i;
  float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
  return y;
  */
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    25f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
    25fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2600:	d406      	bmi.n	2610 <invSqrt(float)+0x18>
    2602:	eef1 7ac0 	vsqrt.f32	s15, s0
}
    2606:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    260a:	ee80 0a27 	vdiv.f32	s0, s0, s15
    260e:	4770      	bx	lr
float invSqrt(float x) {
    2610:	b508      	push	{r3, lr}
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    2612:	f00c fc45 	bl	eea0 <sqrtf>
    2616:	eef0 7a40 	vmov.f32	s15, s0
}
    261a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    261e:	ee80 0a27 	vdiv.f32	s0, s0, s15
    2622:	bd08      	pop	{r3, pc}
    2624:	0000      	movs	r0, r0
	...

00002628 <Madgwick6DOF(float, float, float, float, float, float, float)>:
void Madgwick6DOF(float gx, float gy, float gz, float ax, float ay, float az, float invSampleFreq) {
    2628:	b508      	push	{r3, lr}
    262a:	ed2d 8b0e 	vpush	{d8-d14}
    262e:	eeb0 ba61 	vmov.f32	s22, s3
    2632:	eef0 8a42 	vmov.f32	s17, s4
    2636:	eeb0 ea62 	vmov.f32	s28, s5
    263a:	eeb0 da43 	vmov.f32	s26, s6
  gx *= 0.0174533f;
    263e:	eddf 7acc 	vldr	s15, [pc, #816]	; 2970 <Madgwick6DOF(float, float, float, float, float, float, float)+0x348>
    2642:	ee20 0a27 	vmul.f32	s0, s0, s15
  gy *= 0.0174533f;
    2646:	ee60 0aa7 	vmul.f32	s1, s1, s15
  gz *= 0.0174533f;
    264a:	ee21 1a27 	vmul.f32	s2, s2, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    264e:	4bc9      	ldr	r3, [pc, #804]	; (2974 <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2650:	ed93 ca00 	vldr	s24, [r3]
    2654:	4bc8      	ldr	r3, [pc, #800]	; (2978 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2656:	edd3 ba00 	vldr	s23, [r3]
    265a:	4bc8      	ldr	r3, [pc, #800]	; (297c <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    265c:	edd3 ca00 	vldr	s25, [r3]
    2660:	ee2c aa40 	vnmul.f32	s20, s24, s0
    2664:	ee6b 7aa0 	vmul.f32	s15, s23, s1
    2668:	ee3a aa67 	vsub.f32	s20, s20, s15
    266c:	ee6c 7a81 	vmul.f32	s15, s25, s2
    2670:	ee3a aa67 	vsub.f32	s20, s20, s15
    2674:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2678:	ee2a aa27 	vmul.f32	s20, s20, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    267c:	4bc0      	ldr	r3, [pc, #768]	; (2980 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    267e:	edd3 da00 	vldr	s27, [r3]
    2682:	ee6d 9a80 	vmul.f32	s19, s27, s0
    2686:	ee2b 7a81 	vmul.f32	s14, s23, s2
    268a:	ee79 9a87 	vadd.f32	s19, s19, s14
    268e:	ee2c 7aa0 	vmul.f32	s14, s25, s1
    2692:	ee79 9ac7 	vsub.f32	s19, s19, s14
    2696:	ee69 9aa7 	vmul.f32	s19, s19, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    269a:	ee6d aaa0 	vmul.f32	s21, s27, s1
    269e:	ee2c 7a01 	vmul.f32	s14, s24, s2
    26a2:	ee7a aac7 	vsub.f32	s21, s21, s14
    26a6:	ee2c 7a80 	vmul.f32	s14, s25, s0
    26aa:	ee7a aa87 	vadd.f32	s21, s21, s14
    26ae:	ee6a aaa7 	vmul.f32	s21, s21, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    26b2:	ee2d 9a81 	vmul.f32	s18, s27, s2
    26b6:	ee6c 0a20 	vmul.f32	s1, s24, s1
    26ba:	ee39 9a20 	vadd.f32	s18, s18, s1
    26be:	ee2b 0a80 	vmul.f32	s0, s23, s0
    26c2:	ee39 9a40 	vsub.f32	s18, s18, s0
    26c6:	ee29 9a27 	vmul.f32	s18, s18, s15
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    26ca:	eeb5 2a40 	vcmp.f32	s4, #0.0
    26ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26d2:	bf14      	ite	ne
    26d4:	2301      	movne	r3, #1
    26d6:	2300      	moveq	r3, #0
    26d8:	eef5 2a40 	vcmp.f32	s5, #0.0
    26dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26e0:	bf18      	it	ne
    26e2:	f043 0301 	orrne.w	r3, r3, #1
    26e6:	b92b      	cbnz	r3, 26f4 <Madgwick6DOF(float, float, float, float, float, float, float)+0xcc>
    26e8:	eef5 1a40 	vcmp.f32	s3, #0.0
    26ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26f0:	f000 80b5 	beq.w	285e <Madgwick6DOF(float, float, float, float, float, float, float)+0x236>
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    26f4:	ee6b 7a0b 	vmul.f32	s15, s22, s22
    26f8:	ee28 7aa8 	vmul.f32	s14, s17, s17
    26fc:	ee77 7a87 	vadd.f32	s15, s15, s14
    2700:	ee2e 0a0e 	vmul.f32	s0, s28, s28
    2704:	ee37 0a80 	vadd.f32	s0, s15, s0
    2708:	f7ff ff76 	bl	25f8 <invSqrt(float)>
    ax *= recipNorm;
    270c:	ee2b ba00 	vmul.f32	s22, s22, s0
    ay *= recipNorm;
    2710:	ee28 6a80 	vmul.f32	s12, s17, s0
    az *= recipNorm;
    2714:	ee2e 0a00 	vmul.f32	s0, s28, s0
    _2q0 = 2.0f * q0;
    2718:	ee3d 2aad 	vadd.f32	s4, s27, s27
    _2q1 = 2.0f * q1;
    271c:	ee7c 4a0c 	vadd.f32	s9, s24, s24
    _2q2 = 2.0f * q2;
    2720:	ee3b 5aab 	vadd.f32	s10, s23, s23
    _2q3 = 2.0f * q3;
    2724:	ee3c 3aac 	vadd.f32	s6, s25, s25
    _4q0 = 4.0f * q0;
    2728:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    272c:	ee6d 7aa5 	vmul.f32	s15, s27, s11
    _4q1 = 4.0f * q1;
    2730:	ee6c 1a25 	vmul.f32	s3, s24, s11
    _4q2 = 4.0f * q2;
    2734:	ee2b 4aa5 	vmul.f32	s8, s23, s11
    _8q1 = 8.0f * q1;
    2738:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    273c:	ee2c 1a23 	vmul.f32	s2, s24, s7
    _8q2 = 8.0f * q2;
    2740:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    q1q1 = q1 * q1;
    2744:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    q2q2 = q2 * q2;
    2748:	ee6b 6aab 	vmul.f32	s13, s23, s23
    q3q3 = q3 * q3;
    274c:	ee6c 2aac 	vmul.f32	s5, s25, s25
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    2750:	ee67 eaa6 	vmul.f32	s29, s15, s13
    2754:	ee6b 0a05 	vmul.f32	s1, s22, s10
    2758:	ee7e eaa0 	vadd.f32	s29, s29, s1
    275c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2760:	ee7e eaa7 	vadd.f32	s29, s29, s15
    2764:	ee66 7a24 	vmul.f32	s15, s12, s9
    2768:	ee7e eae7 	vsub.f32	s29, s29, s15
    q0q0 = q0 * q0;
    276c:	ee6d 7aad 	vmul.f32	s15, s27, s27
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    2770:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2774:	ee21 eaa2 	vmul.f32	s28, s3, s5
    2778:	ee6b 0a03 	vmul.f32	s1, s22, s6
    277c:	ee3e ea60 	vsub.f32	s28, s28, s1
    2780:	ee6c 0a27 	vmul.f32	s1, s24, s15
    2784:	ee3e ea20 	vadd.f32	s28, s28, s1
    2788:	ee66 0a02 	vmul.f32	s1, s12, s4
    278c:	ee3e ea60 	vsub.f32	s28, s28, s1
    2790:	ee3e ea61 	vsub.f32	s28, s28, s3
    2794:	ee61 0a07 	vmul.f32	s1, s2, s14
    2798:	ee3e ea20 	vadd.f32	s28, s28, s1
    279c:	ee21 1a26 	vmul.f32	s2, s2, s13
    27a0:	ee3e ea01 	vadd.f32	s28, s28, s2
    27a4:	ee60 1a21 	vmul.f32	s3, s0, s3
    27a8:	ee3e ea21 	vadd.f32	s28, s28, s3
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    27ac:	ee2b 8aa7 	vmul.f32	s16, s23, s15
    27b0:	ee2b 2a02 	vmul.f32	s4, s22, s4
    27b4:	ee38 8a02 	vadd.f32	s16, s16, s4
    27b8:	ee64 2a22 	vmul.f32	s5, s8, s5
    27bc:	ee38 8a22 	vadd.f32	s16, s16, s5
    27c0:	ee26 3a03 	vmul.f32	s6, s12, s6
    27c4:	ee38 8a43 	vsub.f32	s16, s16, s6
    27c8:	ee38 8a44 	vsub.f32	s16, s16, s8
    27cc:	ee63 7a87 	vmul.f32	s15, s7, s14
    27d0:	ee38 8a27 	vadd.f32	s16, s16, s15
    27d4:	ee63 3aa6 	vmul.f32	s7, s7, s13
    27d8:	ee38 8a23 	vadd.f32	s16, s16, s7
    27dc:	ee20 0a04 	vmul.f32	s0, s0, s8
    27e0:	ee38 8a00 	vadd.f32	s16, s16, s0
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    27e4:	ee27 7a25 	vmul.f32	s14, s14, s11
    27e8:	ee27 7a2c 	vmul.f32	s14, s14, s25
    27ec:	ee2b ba24 	vmul.f32	s22, s22, s9
    27f0:	ee77 8a4b 	vsub.f32	s17, s14, s22
    27f4:	ee66 6aa5 	vmul.f32	s13, s13, s11
    27f8:	ee66 6aac 	vmul.f32	s13, s13, s25
    27fc:	ee38 7aa6 	vadd.f32	s14, s17, s13
    2800:	ee66 8a05 	vmul.f32	s17, s12, s10
    2804:	ee77 8a68 	vsub.f32	s17, s14, s17
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); //normalise step magnitude
    2808:	ee6e 7aae 	vmul.f32	s15, s29, s29
    280c:	ee2e 7a0e 	vmul.f32	s14, s28, s28
    2810:	ee77 7a87 	vadd.f32	s15, s15, s14
    2814:	ee28 7a08 	vmul.f32	s14, s16, s16
    2818:	ee77 7a87 	vadd.f32	s15, s15, s14
    281c:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2820:	ee37 0a80 	vadd.f32	s0, s15, s0
    2824:	f7ff fee8 	bl	25f8 <invSqrt(float)>
    qDot1 -= B_madgwick * s0;
    2828:	4b56      	ldr	r3, [pc, #344]	; (2984 <Madgwick6DOF(float, float, float, float, float, float, float)+0x35c>)
    282a:	edd3 7a00 	vldr	s15, [r3]
    s0 *= recipNorm;
    282e:	ee6e ea80 	vmul.f32	s29, s29, s0
    qDot1 -= B_madgwick * s0;
    2832:	ee6e eaa7 	vmul.f32	s29, s29, s15
    2836:	ee3a aa6e 	vsub.f32	s20, s20, s29
    s1 *= recipNorm;
    283a:	ee2e ea00 	vmul.f32	s28, s28, s0
    qDot2 -= B_madgwick * s1;
    283e:	ee2e ea27 	vmul.f32	s28, s28, s15
    2842:	ee79 9ace 	vsub.f32	s19, s19, s28
    s2 *= recipNorm;
    2846:	ee28 8a00 	vmul.f32	s16, s16, s0
    qDot3 -= B_madgwick * s2;
    284a:	ee28 8a27 	vmul.f32	s16, s16, s15
    284e:	ee7a aac8 	vsub.f32	s21, s21, s16
    s3 *= recipNorm;
    2852:	ee68 8a80 	vmul.f32	s17, s17, s0
    qDot4 -= B_madgwick * s3;
    2856:	ee68 8aa7 	vmul.f32	s17, s17, s15
    285a:	ee39 9a68 	vsub.f32	s18, s18, s17
  q0 += qDot1 * invSampleFreq;
    285e:	ee2a aa0d 	vmul.f32	s20, s20, s26
    2862:	ee3a aa2d 	vadd.f32	s20, s20, s27
  q1 += qDot2 * invSampleFreq;
    2866:	ee29 8a8d 	vmul.f32	s16, s19, s26
    286a:	ee38 8a0c 	vadd.f32	s16, s16, s24
  q2 += qDot3 * invSampleFreq;
    286e:	ee6a aa8d 	vmul.f32	s21, s21, s26
    2872:	ee7a aaab 	vadd.f32	s21, s21, s23
  q3 += qDot4 * invSampleFreq;
    2876:	ee69 8a0d 	vmul.f32	s17, s18, s26
    287a:	ee78 8aac 	vadd.f32	s17, s17, s25
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    287e:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    2882:	ee28 7a08 	vmul.f32	s14, s16, s16
    2886:	ee77 7a87 	vadd.f32	s15, s15, s14
    288a:	ee2a 7aaa 	vmul.f32	s14, s21, s21
    288e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2892:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2896:	ee37 0a80 	vadd.f32	s0, s15, s0
    289a:	f7ff fead 	bl	25f8 <invSqrt(float)>
  q0 *= recipNorm;
    289e:	ee2a aa00 	vmul.f32	s20, s20, s0
    28a2:	4b37      	ldr	r3, [pc, #220]	; (2980 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    28a4:	ed83 aa00 	vstr	s20, [r3]
  q1 *= recipNorm;
    28a8:	ee28 8a00 	vmul.f32	s16, s16, s0
    28ac:	4b31      	ldr	r3, [pc, #196]	; (2974 <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    28ae:	ed83 8a00 	vstr	s16, [r3]
  q2 *= recipNorm;
    28b2:	ee6a aa80 	vmul.f32	s21, s21, s0
    28b6:	4b30      	ldr	r3, [pc, #192]	; (2978 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    28b8:	edc3 aa00 	vstr	s21, [r3]
  q3 *= recipNorm;
    28bc:	ee68 8a80 	vmul.f32	s17, s17, s0
    28c0:	4b2e      	ldr	r3, [pc, #184]	; (297c <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    28c2:	edc3 8a00 	vstr	s17, [r3]
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
    28c6:	ee6a baaa 	vmul.f32	s23, s21, s21
    28ca:	ee68 0a08 	vmul.f32	s1, s16, s16
    28ce:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    28d2:	ee7b 0a60 	vsub.f32	s1, s22, s1
    28d6:	ee2a 0a08 	vmul.f32	s0, s20, s16
    28da:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  { return __builtin_atan2f(__y, __x); }
    28de:	ee70 0aeb 	vsub.f32	s1, s1, s23
    28e2:	ee30 0a27 	vadd.f32	s0, s0, s15
    28e6:	f00c fde9 	bl	f4bc <atan2f>
    28ea:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    28ee:	ed9f 9b1e 	vldr	d9, [pc, #120]	; 2968 <Madgwick6DOF(float, float, float, float, float, float, float)+0x340>
    28f2:	ee20 0b09 	vmul.f64	d0, d0, d9
    28f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    28fa:	4b23      	ldr	r3, [pc, #140]	; (2988 <Madgwick6DOF(float, float, float, float, float, float, float)+0x360>)
    28fc:	ed83 0a00 	vstr	s0, [r3]
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
    2900:	ee68 7a28 	vmul.f32	s15, s16, s17
    2904:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    2908:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_asinf(__x); }
    290c:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    2910:	ee27 0a80 	vmul.f32	s0, s15, s0
    2914:	f00c fda6 	bl	f464 <asinf>
    2918:	eeb1 7a40 	vneg.f32	s14, s0
    291c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2920:	ee27 7b09 	vmul.f64	d7, d7, d9
    2924:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2928:	4b18      	ldr	r3, [pc, #96]	; (298c <Madgwick6DOF(float, float, float, float, float, float, float)+0x364>)
    292a:	ed83 7a00 	vstr	s14, [r3]
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
    292e:	ee3b ba6b 	vsub.f32	s22, s22, s23
    2932:	ee68 0aa8 	vmul.f32	s1, s17, s17
    2936:	ee28 8a2a 	vmul.f32	s16, s16, s21
    293a:	ee2a 0a28 	vmul.f32	s0, s20, s17
  { return __builtin_atan2f(__y, __x); }
    293e:	ee7b 0a60 	vsub.f32	s1, s22, s1
    2942:	ee38 0a00 	vadd.f32	s0, s16, s0
    2946:	f00c fdb9 	bl	f4bc <atan2f>
    294a:	eeb1 0a40 	vneg.f32	s0, s0
    294e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2952:	ee20 0b09 	vmul.f64	d0, d0, d9
    2956:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    295a:	4b0d      	ldr	r3, [pc, #52]	; (2990 <Madgwick6DOF(float, float, float, float, float, float, float)+0x368>)
    295c:	ed83 0a00 	vstr	s0, [r3]
}
    2960:	ecbd 8b0e 	vpop	{d8-d14}
    2964:	bd08      	pop	{r3, pc}
    2966:	bf00      	nop
    2968:	1a5d2372 	.word	0x1a5d2372
    296c:	404ca5dc 	.word	0x404ca5dc
    2970:	3c8efa39 	.word	0x3c8efa39
    2974:	200050c4 	.word	0x200050c4
    2978:	200050c8 	.word	0x200050c8
    297c:	200050cc 	.word	0x200050cc
    2980:	200038b4 	.word	0x200038b4
    2984:	20003138 	.word	0x20003138
    2988:	200050d8 	.word	0x200050d8
    298c:	200050b0 	.word	0x200050b0
    2990:	20005310 	.word	0x20005310
    2994:	00000000 	.word	0x00000000

00002998 <loop>:
void loop() {
    2998:	b530      	push	{r4, r5, lr}
    299a:	b09d      	sub	sp, #116	; 0x74
  prev_time = current_time;      
    299c:	4cac      	ldr	r4, [pc, #688]	; (2c50 <loop+0x2b8>)
    299e:	4dad      	ldr	r5, [pc, #692]	; (2c54 <loop+0x2bc>)
    29a0:	682b      	ldr	r3, [r5, #0]
    29a2:	6023      	str	r3, [r4, #0]
  current_time = micros();      
    29a4:	f00a fa66 	bl	ce74 <micros>
    29a8:	6028      	str	r0, [r5, #0]
  dt = (current_time - prev_time)/1000000.0;
    29aa:	6823      	ldr	r3, [r4, #0]
    29ac:	1ac0      	subs	r0, r0, r3
    29ae:	ee07 0a90 	vmov	s15, r0
    29b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    29b6:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 2c48 <loop+0x2b0>
    29ba:	ee87 6b05 	vdiv.f64	d6, d7, d5
    29be:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    29c2:	4ba5      	ldr	r3, [pc, #660]	; (2c58 <loop+0x2c0>)
    29c4:	ed83 6a00 	vstr	s12, [r3]
  loopBlink(); //Indicate we are in main loop with short blink every 1.5 seconds
    29c8:	f7ff f940 	bl	1c4c <loopBlink()>
	if (channel_6_pwm < 1500) {
    29cc:	4ba3      	ldr	r3, [pc, #652]	; (2c5c <loop+0x2c4>)
    29ce:	681a      	ldr	r2, [r3, #0]
    29d0:	f240 53db 	movw	r3, #1499	; 0x5db
    29d4:	429a      	cmp	r2, r3
    29d6:	f300 80a1 	bgt.w	2b1c <loop+0x184>
		irisFlag = 0;
    29da:	4ba1      	ldr	r3, [pc, #644]	; (2c60 <loop+0x2c8>)
    29dc:	2200      	movs	r2, #0
    29de:	701a      	strb	r2, [r3, #0]
		closeIris();
    29e0:	f7ff fa28 	bl	1e34 <closeIris()>
	if (channel_7_pwm > 1750) {
    29e4:	4b9f      	ldr	r3, [pc, #636]	; (2c64 <loop+0x2cc>)
    29e6:	681a      	ldr	r2, [r3, #0]
    29e8:	f240 63d6 	movw	r3, #1750	; 0x6d6
    29ec:	429a      	cmp	r2, r3
    29ee:	f340 809b 	ble.w	2b28 <loop+0x190>
		conductSineSweep = 1;
    29f2:	4b9d      	ldr	r3, [pc, #628]	; (2c68 <loop+0x2d0>)
    29f4:	2201      	movs	r2, #1
    29f6:	701a      	strb	r2, [r3, #0]
	if (SD_is_present && current_time - print_counterSD > 10000) {
    29f8:	4b9c      	ldr	r3, [pc, #624]	; (2c6c <loop+0x2d4>)
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	b14b      	cbz	r3, 2a12 <loop+0x7a>
    29fe:	4b95      	ldr	r3, [pc, #596]	; (2c54 <loop+0x2bc>)
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	4a9b      	ldr	r2, [pc, #620]	; (2c70 <loop+0x2d8>)
    2a04:	6812      	ldr	r2, [r2, #0]
    2a06:	1a9b      	subs	r3, r3, r2
    2a08:	f242 7210 	movw	r2, #10000	; 0x2710
    2a0c:	4293      	cmp	r3, r2
    2a0e:	f200 8092 	bhi.w	2b36 <loop+0x19e>
  getIMUdata(); //Pulls raw gyro, accelerometer, and magnetometer data from IMU and LP filters to remove noise
    2a12:	f7fd fff9 	bl	a08 <getIMUdata()>
  Madgwick(GyroX, -GyroY, -GyroZ, -AccX, AccY, AccZ, MagY, -MagX, MagZ, dt); //Updates roll_IMU, pitch_IMU, and yaw_IMU angle estimates (degrees)
    2a16:	4b97      	ldr	r3, [pc, #604]	; (2c74 <loop+0x2dc>)
    2a18:	edd3 1a00 	vldr	s3, [r3]
    2a1c:	4b96      	ldr	r3, [pc, #600]	; (2c78 <loop+0x2e0>)
    2a1e:	ed93 1a00 	vldr	s2, [r3]
    2a22:	4b96      	ldr	r3, [pc, #600]	; (2c7c <loop+0x2e4>)
    2a24:	edd3 0a00 	vldr	s1, [r3]
    Madgwick6DOF(gx, gy, gz, ax, ay, az, invSampleFreq);
    2a28:	4b8b      	ldr	r3, [pc, #556]	; (2c58 <loop+0x2c0>)
    2a2a:	ed93 3a00 	vldr	s6, [r3]
    2a2e:	4b94      	ldr	r3, [pc, #592]	; (2c80 <loop+0x2e8>)
    2a30:	edd3 2a00 	vldr	s5, [r3]
    2a34:	4b93      	ldr	r3, [pc, #588]	; (2c84 <loop+0x2ec>)
    2a36:	ed93 2a00 	vldr	s4, [r3]
    2a3a:	eef1 1a61 	vneg.f32	s3, s3
    2a3e:	eeb1 1a41 	vneg.f32	s2, s2
    2a42:	eef1 0a60 	vneg.f32	s1, s1
    2a46:	4b90      	ldr	r3, [pc, #576]	; (2c88 <loop+0x2f0>)
    2a48:	ed93 0a00 	vldr	s0, [r3]
    2a4c:	f7ff fdec 	bl	2628 <Madgwick6DOF(float, float, float, float, float, float, float)>
  getJoyAngle();
    2a50:	f7ff f94a 	bl	1ce8 <getJoyAngle()>
  getDesState(); //Convert raw commands to normalized values based on saturated control limits
    2a54:	f7fe fa7c 	bl	f50 <getDesState()>
	if (useSerialAngleCommands) {
    2a58:	4b8c      	ldr	r3, [pc, #560]	; (2c8c <loop+0x2f4>)
    2a5a:	781b      	ldrb	r3, [r3, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	f040 80e1 	bne.w	2c24 <loop+0x28c>
	if (conductSineSweep) {
    2a62:	4b81      	ldr	r3, [pc, #516]	; (2c68 <loop+0x2d0>)
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	2b00      	cmp	r3, #0
    2a68:	f040 80e1 	bne.w	2c2e <loop+0x296>
	if (channel_8_pwm > 1250 && channel_8_pwm < 1750) {
    2a6c:	4b88      	ldr	r3, [pc, #544]	; (2c90 <loop+0x2f8>)
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	f2a3 43e3 	subw	r3, r3, #1251	; 0x4e3
    2a74:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
    2a78:	f240 80de 	bls.w	2c38 <loop+0x2a0>
	if (channel_8_pwm > 1750) {
    2a7c:	4b84      	ldr	r3, [pc, #528]	; (2c90 <loop+0x2f8>)
    2a7e:	681a      	ldr	r2, [r3, #0]
    2a80:	f240 63d6 	movw	r3, #1750	; 0x6d6
    2a84:	429a      	cmp	r2, r3
    2a86:	f300 80da 	bgt.w	2c3e <loop+0x2a6>
	if (irisFlag) {
    2a8a:	4b75      	ldr	r3, [pc, #468]	; (2c60 <loop+0x2c8>)
    2a8c:	781b      	ldrb	r3, [r3, #0]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	f040 8136 	bne.w	2d00 <loop+0x368>
	anglePID();
    2a94:	f000 fc88 	bl	33a8 <anglePID()>
  controlMixer(); //Mixes PID outputs to scaled actuator commands -- custom mixing assignments done here
    2a98:	f7fd ff14 	bl	8c4 <controlMixer()>
  scaleCommands(); //Scales motor commands to 125 to 250 range (oneshot125 protocol) and servo PWM commands to 0 to 180 (for servo library)
    2a9c:	f7fe fbdc 	bl	1258 <scaleCommands()>
  throttleCut(); //Directly sets motor commands to low based on state of ch5
    2aa0:	f7ff f876 	bl	1b90 <throttleCut()>
  commandMotors(); //Sends command pulses to each motor pin using OneShot125 protocol
    2aa4:	f7fe ffd6 	bl	1a54 <commandMotors()>
  servo1.write(s1_command_PWM); //Writes PWM value to servo object
    2aa8:	4b7a      	ldr	r3, [pc, #488]	; (2c94 <loop+0x2fc>)
    2aaa:	6819      	ldr	r1, [r3, #0]
    2aac:	487a      	ldr	r0, [pc, #488]	; (2c98 <loop+0x300>)
    2aae:	f002 f88b 	bl	4bc8 <PWMServo::write(int)>
  servo2.write(s2_command_PWM);
    2ab2:	4b7a      	ldr	r3, [pc, #488]	; (2c9c <loop+0x304>)
    2ab4:	6819      	ldr	r1, [r3, #0]
    2ab6:	487a      	ldr	r0, [pc, #488]	; (2ca0 <loop+0x308>)
    2ab8:	f002 f886 	bl	4bc8 <PWMServo::write(int)>
  servo3.write(s3_command_PWM);
    2abc:	4b79      	ldr	r3, [pc, #484]	; (2ca4 <loop+0x30c>)
    2abe:	6819      	ldr	r1, [r3, #0]
    2ac0:	4879      	ldr	r0, [pc, #484]	; (2ca8 <loop+0x310>)
    2ac2:	f002 f881 	bl	4bc8 <PWMServo::write(int)>
  servo4.write(s4_command_PWM);
    2ac6:	4b79      	ldr	r3, [pc, #484]	; (2cac <loop+0x314>)
    2ac8:	6819      	ldr	r1, [r3, #0]
    2aca:	4879      	ldr	r0, [pc, #484]	; (2cb0 <loop+0x318>)
    2acc:	f002 f87c 	bl	4bc8 <PWMServo::write(int)>
  servo5.write(s5_command_PWM);
    2ad0:	4b78      	ldr	r3, [pc, #480]	; (2cb4 <loop+0x31c>)
    2ad2:	6819      	ldr	r1, [r3, #0]
    2ad4:	4878      	ldr	r0, [pc, #480]	; (2cb8 <loop+0x320>)
    2ad6:	f002 f877 	bl	4bc8 <PWMServo::write(int)>
  servo6.write(s6_command_PWM);
    2ada:	4b78      	ldr	r3, [pc, #480]	; (2cbc <loop+0x324>)
    2adc:	6819      	ldr	r1, [r3, #0]
    2ade:	4878      	ldr	r0, [pc, #480]	; (2cc0 <loop+0x328>)
    2ae0:	f002 f872 	bl	4bc8 <PWMServo::write(int)>
  servo7.write(s7_command_PWM);
    2ae4:	4b77      	ldr	r3, [pc, #476]	; (2cc4 <loop+0x32c>)
    2ae6:	6819      	ldr	r1, [r3, #0]
    2ae8:	4877      	ldr	r0, [pc, #476]	; (2cc8 <loop+0x330>)
    2aea:	f002 f86d 	bl	4bc8 <PWMServo::write(int)>
  getCommands(); //Pulls current available radio commands
    2aee:	f7fe fcd7 	bl	14a0 <getCommands()>
  failSafe(); //Prevent failures in event of bad receiver connection, defaults to failsafe values assigned in setup
    2af2:	f7fe ff43 	bl	197c <failSafe()>
	Serial.println(integralOld_roll);
    2af6:	4b75      	ldr	r3, [pc, #468]	; (2ccc <loop+0x334>)
    2af8:	ed93 0a00 	vldr	s0, [r3]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2afc:	4c74      	ldr	r4, [pc, #464]	; (2cd0 <loop+0x338>)
    2afe:	2102      	movs	r1, #2
    2b00:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2b04:	4620      	mov	r0, r4
    2b06:	f009 fce7 	bl	c4d8 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    2b0a:	4620      	mov	r0, r4
    2b0c:	f009 fc83 	bl	c416 <Print::println()>
  loopRate(2000); //Do not exceed 2000Hz, all filter parameters tuned to 2000Hz by default
    2b10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    2b14:	f7ff f864 	bl	1be0 <loopRate(int)>
}
    2b18:	b01d      	add	sp, #116	; 0x74
    2b1a:	bd30      	pop	{r4, r5, pc}
		irisFlag = 1;
    2b1c:	4b50      	ldr	r3, [pc, #320]	; (2c60 <loop+0x2c8>)
    2b1e:	2201      	movs	r2, #1
    2b20:	701a      	strb	r2, [r3, #0]
		openIris();
    2b22:	f7ff f979 	bl	1e18 <openIris()>
    2b26:	e75d      	b.n	29e4 <loop+0x4c>
		conductSineSweep = 0;
    2b28:	4b4f      	ldr	r3, [pc, #316]	; (2c68 <loop+0x2d0>)
    2b2a:	2200      	movs	r2, #0
    2b2c:	701a      	strb	r2, [r3, #0]
		sineTime = 0;
    2b2e:	4b69      	ldr	r3, [pc, #420]	; (2cd4 <loop+0x33c>)
    2b30:	2200      	movs	r2, #0
    2b32:	601a      	str	r2, [r3, #0]
    2b34:	e760      	b.n	29f8 <loop+0x60>
    print_counterSD = micros();
    2b36:	f00a f99d 	bl	ce74 <micros>
    2b3a:	4b4d      	ldr	r3, [pc, #308]	; (2c70 <loop+0x2d8>)
    2b3c:	6018      	str	r0, [r3, #0]
    String dataString;
    2b3e:	2100      	movs	r1, #0
    2b40:	4668      	mov	r0, sp
    2b42:	f009 ff16 	bl	c972 <String::String(char const*)>
    dataString = getDataString();
    2b46:	a818      	add	r0, sp, #96	; 0x60
    2b48:	f7ff f98c 	bl	1e64 <getDataString()>
    2b4c:	a918      	add	r1, sp, #96	; 0x60
    2b4e:	4668      	mov	r0, sp
    2b50:	f009 ff4c 	bl	c9ec <String::operator=(String&&)>
    2b54:	a818      	add	r0, sp, #96	; 0x60
    2b56:	f009 fec3 	bl	c8e0 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2b5a:	4b5f      	ldr	r3, [pc, #380]	; (2cd8 <loop+0x340>)
    2b5c:	681a      	ldr	r2, [r3, #0]
    2b5e:	2a00      	cmp	r2, #0
    2b60:	d04e      	beq.n	2c00 <loop+0x268>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2b62:	f244 2302 	movw	r3, #16898	; 0x4202
    2b66:	495d      	ldr	r1, [pc, #372]	; (2cdc <loop+0x344>)
    2b68:	a804      	add	r0, sp, #16
    2b6a:	f007 f845 	bl	9bf8 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2b6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2b70:	2b00      	cmp	r3, #0
    2b72:	d047      	beq.n	2c04 <loop+0x26c>
		if (file) return File(new SDFile(file));
    2b74:	205c      	movs	r0, #92	; 0x5c
    2b76:	f00a fad5 	bl	d124 <operator new(unsigned int)>
    2b7a:	4604      	mov	r4, r0
class FileImpl {
    2b7c:	2500      	movs	r5, #0
    2b7e:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2b80:	4b57      	ldr	r3, [pc, #348]	; (2ce0 <loop+0x348>)
    2b82:	6003      	str	r3, [r0, #0]
class Print
    2b84:	9b05      	ldr	r3, [sp, #20]
    2b86:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    2b88:	4b56      	ldr	r3, [pc, #344]	; (2ce4 <loop+0x34c>)
    2b8a:	6083      	str	r3, [r0, #8]
    2b8c:	9b06      	ldr	r3, [sp, #24]
    2b8e:	6103      	str	r3, [r0, #16]
    2b90:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2b94:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    2b96:	a908      	add	r1, sp, #32
    2b98:	3018      	adds	r0, #24
    2b9a:	f006 fef6 	bl	998a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b9e:	4b52      	ldr	r3, [pc, #328]	; (2ce8 <loop+0x350>)
    2ba0:	60a3      	str	r3, [r4, #8]
    2ba2:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    2ba4:	6863      	ldr	r3, [r4, #4]
    2ba6:	3301      	adds	r3, #1
    2ba8:	6063      	str	r3, [r4, #4]
    2baa:	4b50      	ldr	r3, [pc, #320]	; (2cec <loop+0x354>)
    2bac:	9304      	str	r3, [sp, #16]
  ~FsBaseFile() {close();}
    2bae:	a808      	add	r0, sp, #32
    2bb0:	f006 ff2c 	bl	9a0c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    2bb4:	4b4e      	ldr	r3, [pc, #312]	; (2cf0 <loop+0x358>)
    2bb6:	691b      	ldr	r3, [r3, #16]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	f000 80a4 	beq.w	2d06 <loop+0x36e>
		if (--(f->refcount) == 0) {
    2bbe:	685a      	ldr	r2, [r3, #4]
    2bc0:	3a01      	subs	r2, #1
    2bc2:	605a      	str	r2, [r3, #4]
    2bc4:	b94a      	cbnz	r2, 2bda <loop+0x242>
			f->close();
    2bc6:	4d4a      	ldr	r5, [pc, #296]	; (2cf0 <loop+0x358>)
    2bc8:	6928      	ldr	r0, [r5, #16]
    2bca:	6803      	ldr	r3, [r0, #0]
    2bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bce:	4798      	blx	r3
			delete f;
    2bd0:	6928      	ldr	r0, [r5, #16]
    2bd2:	b110      	cbz	r0, 2bda <loop+0x242>
    2bd4:	6803      	ldr	r3, [r0, #0]
    2bd6:	685b      	ldr	r3, [r3, #4]
    2bd8:	4798      	blx	r3
		f = file.f;
    2bda:	4b45      	ldr	r3, [pc, #276]	; (2cf0 <loop+0x358>)
    2bdc:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    2bde:	2c00      	cmp	r4, #0
    2be0:	f040 8093 	bne.w	2d0a <loop+0x372>
							  return write((const uint8_t *)str, strlen(str)); }
    2be4:	4c3a      	ldr	r4, [pc, #232]	; (2cd0 <loop+0x338>)
    2be6:	6823      	ldr	r3, [r4, #0]
    2be8:	685b      	ldr	r3, [r3, #4]
    2bea:	2219      	movs	r2, #25
    2bec:	4941      	ldr	r1, [pc, #260]	; (2cf4 <loop+0x35c>)
    2bee:	4620      	mov	r0, r4
    2bf0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2bf2:	4620      	mov	r0, r4
    2bf4:	f009 fc0f 	bl	c416 <Print::println()>
  }
    2bf8:	4668      	mov	r0, sp
    2bfa:	f009 fe71 	bl	c8e0 <String::~String()>
    2bfe:	e708      	b.n	2a12 <loop+0x7a>
    2c00:	4a3d      	ldr	r2, [pc, #244]	; (2cf8 <loop+0x360>)
    2c02:	e7ae      	b.n	2b62 <loop+0x1ca>
  bool isOpen() const {return m_fFile || m_xFile;}
    2c04:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    2c06:	2c00      	cmp	r4, #0
    2c08:	d1b4      	bne.n	2b74 <loop+0x1dc>
    2c0a:	4b38      	ldr	r3, [pc, #224]	; (2cec <loop+0x354>)
    2c0c:	9304      	str	r3, [sp, #16]
  ~FsBaseFile() {close();}
    2c0e:	a808      	add	r0, sp, #32
    2c10:	f006 fefc 	bl	9a0c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    2c14:	4b36      	ldr	r3, [pc, #216]	; (2cf0 <loop+0x358>)
    2c16:	691b      	ldr	r3, [r3, #16]
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d1d0      	bne.n	2bbe <loop+0x226>
		f = file.f;
    2c1c:	4b34      	ldr	r3, [pc, #208]	; (2cf0 <loop+0x358>)
    2c1e:	2200      	movs	r2, #0
    2c20:	611a      	str	r2, [r3, #16]
		return (f) ? f->isOpen() : false;
    2c22:	e7df      	b.n	2be4 <loop+0x24c>
		setDesStateSerial(axisToRotate);
    2c24:	4b35      	ldr	r3, [pc, #212]	; (2cfc <loop+0x364>)
    2c26:	6818      	ldr	r0, [r3, #0]
    2c28:	f7fe f88a 	bl	d40 <setDesStateSerial(int)>
    2c2c:	e719      	b.n	2a62 <loop+0xca>
  	performSineSweep(axisToRotate);
    2c2e:	4b33      	ldr	r3, [pc, #204]	; (2cfc <loop+0x364>)
    2c30:	6818      	ldr	r0, [r3, #0]
    2c32:	f7fe f8e5 	bl	e00 <performSineSweep(int)>
    2c36:	e719      	b.n	2a6c <loop+0xd4>
		rollStep();
    2c38:	f7fe f952 	bl	ee0 <rollStep()>
    2c3c:	e71e      	b.n	2a7c <loop+0xe4>
		pitchStep();
    2c3e:	f7fe f96b 	bl	f18 <pitchStep()>
    2c42:	e722      	b.n	2a8a <loop+0xf2>
    2c44:	f3af 8000 	nop.w
    2c48:	00000000 	.word	0x00000000
    2c4c:	412e8480 	.word	0x412e8480
    2c50:	200050c0 	.word	0x200050c0
    2c54:	20004f5c 	.word	0x20004f5c
    2c58:	20004fdc 	.word	0x20004fdc
    2c5c:	20004f4c 	.word	0x20004f4c
    2c60:	20005336 	.word	0x20005336
    2c64:	20004f50 	.word	0x20004f50
    2c68:	20005332 	.word	0x20005332
    2c6c:	20005326 	.word	0x20005326
    2c70:	200038b0 	.word	0x200038b0
    2c74:	2000408c 	.word	0x2000408c
    2c78:	200040b4 	.word	0x200040b4
    2c7c:	200040ac 	.word	0x200040ac
    2c80:	2000409c 	.word	0x2000409c
    2c84:	20004094 	.word	0x20004094
    2c88:	200040a4 	.word	0x200040a4
    2c8c:	20005343 	.word	0x20005343
    2c90:	20004f54 	.word	0x20004f54
    2c94:	20005118 	.word	0x20005118
    2c98:	200052c4 	.word	0x200052c4
    2c9c:	20005120 	.word	0x20005120
    2ca0:	200052c8 	.word	0x200052c8
    2ca4:	20005128 	.word	0x20005128
    2ca8:	200052cc 	.word	0x200052cc
    2cac:	20005130 	.word	0x20005130
    2cb0:	200052d0 	.word	0x200052d0
    2cb4:	20005138 	.word	0x20005138
    2cb8:	200052d4 	.word	0x200052d4
    2cbc:	20005140 	.word	0x20005140
    2cc0:	200052d8 	.word	0x200052d8
    2cc4:	20005148 	.word	0x20005148
    2cc8:	200052dc 	.word	0x200052dc
    2ccc:	2000504c 	.word	0x2000504c
    2cd0:	20003184 	.word	0x20003184
    2cd4:	200052e8 	.word	0x200052e8
    2cd8:	20005020 	.word	0x20005020
    2cdc:	200040e4 	.word	0x200040e4
    2ce0:	200022f4 	.word	0x200022f4
    2ce4:	20002350 	.word	0x20002350
    2ce8:	200022d0 	.word	0x200022d0
    2cec:	200021c4 	.word	0x200021c4
    2cf0:	20003800 	.word	0x20003800
    2cf4:	20002a70 	.word	0x20002a70
    2cf8:	20003000 	.word	0x20003000
    2cfc:	200037a0 	.word	0x200037a0
		ripPID();
    2d00:	f000 fce2 	bl	36c8 <ripPID()>
    2d04:	e6c6      	b.n	2a94 <loop+0xfc>
		f = file.f;
    2d06:	4b15      	ldr	r3, [pc, #84]	; (2d5c <loop+0x3c4>)
    2d08:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    2d0a:	6823      	ldr	r3, [r4, #0]
    2d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2d0e:	4620      	mov	r0, r4
    2d10:	4798      	blx	r3
    if (dataFile) {
    2d12:	2800      	cmp	r0, #0
    2d14:	f43f af66 	beq.w	2be4 <loop+0x24c>
	size_t println(const String &s)			{ return print(s) + println(); }
    2d18:	4c10      	ldr	r4, [pc, #64]	; (2d5c <loop+0x3c4>)
    2d1a:	4669      	mov	r1, sp
    2d1c:	4620      	mov	r0, r4
    2d1e:	f009 fb55 	bl	c3cc <Print::print(String const&)>
    2d22:	4620      	mov	r0, r4
    2d24:	f009 fb77 	bl	c416 <Print::println()>
		if (f) {
    2d28:	6920      	ldr	r0, [r4, #16]
    2d2a:	2800      	cmp	r0, #0
    2d2c:	f43f af64 	beq.w	2bf8 <loop+0x260>
			f->close();
    2d30:	6803      	ldr	r3, [r0, #0]
    2d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d34:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    2d36:	6922      	ldr	r2, [r4, #16]
    2d38:	6853      	ldr	r3, [r2, #4]
    2d3a:	3b01      	subs	r3, #1
    2d3c:	6053      	str	r3, [r2, #4]
    2d3e:	b943      	cbnz	r3, 2d52 <loop+0x3ba>
			f->close();
    2d40:	6920      	ldr	r0, [r4, #16]
    2d42:	6803      	ldr	r3, [r0, #0]
    2d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2d46:	4798      	blx	r3
			delete f;
    2d48:	6920      	ldr	r0, [r4, #16]
    2d4a:	b110      	cbz	r0, 2d52 <loop+0x3ba>
    2d4c:	6803      	ldr	r3, [r0, #0]
    2d4e:	685b      	ldr	r3, [r3, #4]
    2d50:	4798      	blx	r3
		}
		f = nullptr;
    2d52:	4b02      	ldr	r3, [pc, #8]	; (2d5c <loop+0x3c4>)
    2d54:	2200      	movs	r2, #0
    2d56:	611a      	str	r2, [r3, #16]
	}
    2d58:	e74e      	b.n	2bf8 <loop+0x260>
    2d5a:	bf00      	nop
    2d5c:	20003800 	.word	0x20003800

00002d60 <radioSetup()>:
unsigned long channel_1_raw, channel_2_raw, channel_3_raw, channel_4_raw, channel_5_raw, 
							channel_6_raw, channel_7_raw, channel_8_raw, channel_9_raw;
int ppm_counter = 0;
unsigned long time_ms = 0;

void radioSetup() {
    2d60:	b508      	push	{r3, lr}
    attachInterrupt(digitalPinToInterrupt(ch6Pin), getCh6, CHANGE);
    delay(20);

  //SBUS Recevier 
  #elif defined USE_SBUS_RX
    sbus.begin();
    2d62:	4802      	ldr	r0, [pc, #8]	; (2d6c <radioSetup()+0xc>)
    2d64:	f001 f8d6 	bl	3f14 <SBUS::begin()>
  #elif defined USE_DSM_RX
    Serial3.begin(115000);
  #else
    #error No RX type defined...
  #endif
}
    2d68:	bd08      	pop	{r3, pc}
    2d6a:	bf00      	nop
    2d6c:	20005160 	.word	0x20005160

00002d70 <setup>:
void setup() {
    2d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d72:	b0a5      	sub	sp, #148	; 0x94
		uint32_t millis_begin = systick_millis_count;
    2d74:	4b97      	ldr	r3, [pc, #604]	; (2fd4 <setup+0x264>)
    2d76:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2d78:	4c97      	ldr	r4, [pc, #604]	; (2fd8 <setup+0x268>)
    2d7a:	4f98      	ldr	r7, [pc, #608]	; (2fdc <setup+0x26c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2d7c:	461d      	mov	r5, r3
		while (!(*this)) {
    2d7e:	e004      	b.n	2d8a <setup+0x1a>
				if (elapsed > 2000) break;
    2d80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2d84:	d813      	bhi.n	2dae <setup+0x3e>
			yield();
    2d86:	f00b ff93 	bl	ecb0 <yield>
		yield();
    2d8a:	f00b ff91 	bl	ecb0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2d8e:	7823      	ldrb	r3, [r4, #0]
    2d90:	2b00      	cmp	r3, #0
    2d92:	f000 8234 	beq.w	31fe <setup+0x48e>
    2d96:	783b      	ldrb	r3, [r7, #0]
    2d98:	f013 0f01 	tst.w	r3, #1
    2d9c:	f000 822f 	beq.w	31fe <setup+0x48e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2da0:	682b      	ldr	r3, [r5, #0]
    2da2:	4a8f      	ldr	r2, [pc, #572]	; (2fe0 <setup+0x270>)
    2da4:	6812      	ldr	r2, [r2, #0]
    2da6:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2da8:	2b0e      	cmp	r3, #14
    2daa:	f240 8228 	bls.w	31fe <setup+0x48e>
  delay(500);
    2dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2db2:	f00a f889 	bl	cec8 <delay>
  pinMode(13, OUTPUT); //Pin 13 LED blinker on board, do not modify 
    2db6:	2101      	movs	r1, #1
    2db8:	200d      	movs	r0, #13
    2dba:	f00a f8d3 	bl	cf64 <pinMode>
  pinMode(m1Pin, OUTPUT);
    2dbe:	2101      	movs	r1, #1
    2dc0:	2000      	movs	r0, #0
    2dc2:	f00a f8cf 	bl	cf64 <pinMode>
  pinMode(m2Pin, OUTPUT);
    2dc6:	2101      	movs	r1, #1
    2dc8:	4608      	mov	r0, r1
    2dca:	f00a f8cb 	bl	cf64 <pinMode>
  pinMode(m3Pin, OUTPUT);
    2dce:	2101      	movs	r1, #1
    2dd0:	2002      	movs	r0, #2
    2dd2:	f00a f8c7 	bl	cf64 <pinMode>
  pinMode(m4Pin, OUTPUT);
    2dd6:	2101      	movs	r1, #1
    2dd8:	2003      	movs	r0, #3
    2dda:	f00a f8c3 	bl	cf64 <pinMode>
  pinMode(m5Pin, OUTPUT);
    2dde:	2101      	movs	r1, #1
    2de0:	2004      	movs	r0, #4
    2de2:	f00a f8bf 	bl	cf64 <pinMode>
  pinMode(m6Pin, OUTPUT);
    2de6:	2101      	movs	r1, #1
    2de8:	2005      	movs	r0, #5
    2dea:	f00a f8bb 	bl	cf64 <pinMode>
  servo1.attach(servo1Pin, 1000, 2100); //Pin, min PWM value, max PWM value
    2dee:	f640 0334 	movw	r3, #2100	; 0x834
    2df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2df6:	2106      	movs	r1, #6
    2df8:	487a      	ldr	r0, [pc, #488]	; (2fe4 <setup+0x274>)
    2dfa:	f001 fe97 	bl	4b2c <PWMServo::attach(int, int, int)>
  servo2.attach(servo2Pin, 1000, 2100);
    2dfe:	f640 0334 	movw	r3, #2100	; 0x834
    2e02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e06:	2107      	movs	r1, #7
    2e08:	4877      	ldr	r0, [pc, #476]	; (2fe8 <setup+0x278>)
    2e0a:	f001 fe8f 	bl	4b2c <PWMServo::attach(int, int, int)>
  servo3.attach(servo3Pin, 1000, 2100);
    2e0e:	f640 0334 	movw	r3, #2100	; 0x834
    2e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e16:	210a      	movs	r1, #10
    2e18:	4874      	ldr	r0, [pc, #464]	; (2fec <setup+0x27c>)
    2e1a:	f001 fe87 	bl	4b2c <PWMServo::attach(int, int, int)>
  servo4.attach(servo4Pin, 1000, 2100);
    2e1e:	f640 0334 	movw	r3, #2100	; 0x834
    2e22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e26:	2109      	movs	r1, #9
    2e28:	4871      	ldr	r0, [pc, #452]	; (2ff0 <setup+0x280>)
    2e2a:	f001 fe7f 	bl	4b2c <PWMServo::attach(int, int, int)>
  servo5.attach(servo5Pin, 1000, 2100);
    2e2e:	f640 0334 	movw	r3, #2100	; 0x834
    2e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e36:	2108      	movs	r1, #8
    2e38:	486e      	ldr	r0, [pc, #440]	; (2ff4 <setup+0x284>)
    2e3a:	f001 fe77 	bl	4b2c <PWMServo::attach(int, int, int)>
  servo6.attach(servo6Pin, 1000, 2100);
    2e3e:	f640 0334 	movw	r3, #2100	; 0x834
    2e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e46:	210b      	movs	r1, #11
    2e48:	486b      	ldr	r0, [pc, #428]	; (2ff8 <setup+0x288>)
    2e4a:	f001 fe6f 	bl	4b2c <PWMServo::attach(int, int, int)>
  servo7.attach(servo7Pin, 1000, 2100);
    2e4e:	f640 0334 	movw	r3, #2100	; 0x834
    2e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e56:	210c      	movs	r1, #12
    2e58:	4868      	ldr	r0, [pc, #416]	; (2ffc <setup+0x28c>)
    2e5a:	f001 fe67 	bl	4b2c <PWMServo::attach(int, int, int)>
#elif defined(__arm__) && defined(TEENSYDUINO)
    static uint32_t attachedpins[]; // 1 bit per digital pin
#endif
  public:
    PWMServo();
    uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
    2e5e:	f44f 6316 	mov.w	r3, #2400	; 0x960
    2e62:	f44f 7208 	mov.w	r2, #544	; 0x220
    2e66:	2118      	movs	r1, #24
    2e68:	4865      	ldr	r0, [pc, #404]	; (3000 <setup+0x290>)
    2e6a:	f001 fe5f 	bl	4b2c <PWMServo::attach(int, int, int)>
  closeIris();
    2e6e:	f7fe ffe1 	bl	1e34 <closeIris()>
  delay(1000);
    2e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2e76:	f00a f827 	bl	cec8 <delay>
	getJoyAngle();
    2e7a:	f7fe ff35 	bl	1ce8 <getJoyAngle()>
	alphaOffset = -alpha;
    2e7e:	4e61      	ldr	r6, [pc, #388]	; (3004 <setup+0x294>)
    2e80:	4b61      	ldr	r3, [pc, #388]	; (3008 <setup+0x298>)
    2e82:	edd3 7a00 	vldr	s15, [r3]
    2e86:	eef1 7a67 	vneg.f32	s15, s15
    2e8a:	edc6 7a00 	vstr	s15, [r6]
	betaOffset = -beta;
    2e8e:	4d5f      	ldr	r5, [pc, #380]	; (300c <setup+0x29c>)
    2e90:	4b5f      	ldr	r3, [pc, #380]	; (3010 <setup+0x2a0>)
    2e92:	edd3 7a00 	vldr	s15, [r3]
    2e96:	eef1 7a67 	vneg.f32	s15, s15
    2e9a:	edc5 7a00 	vstr	s15, [r5]
							  return write((const uint8_t *)str, strlen(str)); }
    2e9e:	4c5d      	ldr	r4, [pc, #372]	; (3014 <setup+0x2a4>)
    2ea0:	6823      	ldr	r3, [r4, #0]
    2ea2:	685b      	ldr	r3, [r3, #4]
    2ea4:	220d      	movs	r2, #13
    2ea6:	495c      	ldr	r1, [pc, #368]	; (3018 <setup+0x2a8>)
    2ea8:	4620      	mov	r0, r4
    2eaa:	4798      	blx	r3
	Serial.print(alphaOffset);
    2eac:	ed96 0a00 	vldr	s0, [r6]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2eb0:	2102      	movs	r1, #2
    2eb2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2eb6:	4620      	mov	r0, r4
    2eb8:	f009 fb0e 	bl	c4d8 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2ebc:	6823      	ldr	r3, [r4, #0]
    2ebe:	685b      	ldr	r3, [r3, #4]
    2ec0:	220c      	movs	r2, #12
    2ec2:	4956      	ldr	r1, [pc, #344]	; (301c <setup+0x2ac>)
    2ec4:	4620      	mov	r0, r4
    2ec6:	4798      	blx	r3
	Serial.print(betaOffset);
    2ec8:	ed95 0a00 	vldr	s0, [r5]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2ecc:	2102      	movs	r1, #2
    2ece:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2ed2:	4620      	mov	r0, r4
    2ed4:	f009 fb00 	bl	c4d8 <Print::printFloat(double, unsigned char)>
  digitalWrite(13, HIGH);
    2ed8:	2101      	movs	r1, #1
    2eda:	200d      	movs	r0, #13
    2edc:	f00a f80a 	bl	cef4 <digitalWrite>
  delay(5);
    2ee0:	2005      	movs	r0, #5
    2ee2:	f009 fff1 	bl	cec8 <delay>
							  return write((const uint8_t *)str, strlen(str)); }
    2ee6:	6823      	ldr	r3, [r4, #0]
    2ee8:	685b      	ldr	r3, [r3, #4]
    2eea:	2217      	movs	r2, #23
    2eec:	494c      	ldr	r1, [pc, #304]	; (3020 <setup+0x2b0>)
    2eee:	4620      	mov	r0, r4
    2ef0:	4798      	blx	r3
  if (SD.begin(chipSelect)) {
    2ef2:	21fe      	movs	r1, #254	; 0xfe
    2ef4:	484b      	ldr	r0, [pc, #300]	; (3024 <setup+0x2b4>)
    2ef6:	f002 f8b3 	bl	5060 <SDClass::begin(unsigned char)>
    2efa:	2800      	cmp	r0, #0
    2efc:	f000 8171 	beq.w	31e2 <setup+0x472>
    2f00:	6823      	ldr	r3, [r4, #0]
    2f02:	685b      	ldr	r3, [r3, #4]
    2f04:	2211      	movs	r2, #17
    2f06:	4948      	ldr	r1, [pc, #288]	; (3028 <setup+0x2b8>)
    2f08:	4620      	mov	r0, r4
    2f0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2f0c:	4620      	mov	r0, r4
    2f0e:	f009 fa82 	bl	c416 <Print::println()>
		SD_is_present = 1;
    2f12:	4b46      	ldr	r3, [pc, #280]	; (302c <setup+0x2bc>)
    2f14:	2201      	movs	r2, #1
    2f16:	701a      	strb	r2, [r3, #0]
	StringSumHelper(const String &s) : String(s) {}
    2f18:	4945      	ldr	r1, [pc, #276]	; (3030 <setup+0x2c0>)
    2f1a:	a814      	add	r0, sp, #80	; 0x50
    2f1c:	f009 fd5b 	bl	c9d6 <String::String(String const&)>
		fileName = filePrefix + String(fileIncrement) + fileExtension;
    2f20:	220a      	movs	r2, #10
    2f22:	2100      	movs	r1, #0
    2f24:	a818      	add	r0, sp, #96	; 0x60
    2f26:	f009 fd7a 	bl	ca1e <String::String(int, unsigned char)>
    2f2a:	a918      	add	r1, sp, #96	; 0x60
    2f2c:	a814      	add	r0, sp, #80	; 0x50
    2f2e:	f009 fdd5 	bl	cadc <operator+(StringSumHelper const&, String const&)>
    2f32:	4940      	ldr	r1, [pc, #256]	; (3034 <setup+0x2c4>)
    2f34:	f009 fdd2 	bl	cadc <operator+(StringSumHelper const&, String const&)>
    2f38:	4601      	mov	r1, r0
    2f3a:	483f      	ldr	r0, [pc, #252]	; (3038 <setup+0x2c8>)
    2f3c:	f009 fd41 	bl	c9c2 <String::operator=(String const&)>
    2f40:	a818      	add	r0, sp, #96	; 0x60
    2f42:	f009 fccd 	bl	c8e0 <String::~String()>
class StringSumHelper : public String
    2f46:	a814      	add	r0, sp, #80	; 0x50
    2f48:	f009 fcca 	bl	c8e0 <String::~String()>
		int fileIncrement = 0;
    2f4c:	2400      	movs	r4, #0
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2f4e:	4d3a      	ldr	r5, [pc, #232]	; (3038 <setup+0x2c8>)
    2f50:	4f3a      	ldr	r7, [pc, #232]	; (303c <setup+0x2cc>)
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    2f52:	4e34      	ldr	r6, [pc, #208]	; (3024 <setup+0x2b4>)
		while(SD.exists(fileName.c_str())) {
    2f54:	e02a      	b.n	2fac <setup+0x23c>
           m_xVol ? m_xVol->exists(path) : false;
    2f56:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
    2f5a:	2900      	cmp	r1, #0
    2f5c:	d070      	beq.n	3040 <setup+0x2d0>
  ExFatFile() {}
    2f5e:	2300      	movs	r3, #0
    2f60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2f64:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    2f68:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2f6c:	4668      	mov	r0, sp
    2f6e:	f002 fe60 	bl	5c32 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2f72:	2800      	cmp	r0, #0
    2f74:	d064      	beq.n	3040 <setup+0x2d0>
			fileIncrement++;
    2f76:	3401      	adds	r4, #1
	StringSumHelper(const String &s) : String(s) {}
    2f78:	492d      	ldr	r1, [pc, #180]	; (3030 <setup+0x2c0>)
    2f7a:	a81c      	add	r0, sp, #112	; 0x70
    2f7c:	f009 fd2b 	bl	c9d6 <String::String(String const&)>
			fileName = filePrefix + String(fileIncrement) + fileExtension;
    2f80:	220a      	movs	r2, #10
    2f82:	4621      	mov	r1, r4
    2f84:	a820      	add	r0, sp, #128	; 0x80
    2f86:	f009 fd4a 	bl	ca1e <String::String(int, unsigned char)>
    2f8a:	a920      	add	r1, sp, #128	; 0x80
    2f8c:	a81c      	add	r0, sp, #112	; 0x70
    2f8e:	f009 fda5 	bl	cadc <operator+(StringSumHelper const&, String const&)>
    2f92:	4928      	ldr	r1, [pc, #160]	; (3034 <setup+0x2c4>)
    2f94:	f009 fda2 	bl	cadc <operator+(StringSumHelper const&, String const&)>
    2f98:	4601      	mov	r1, r0
    2f9a:	4628      	mov	r0, r5
    2f9c:	f009 fd11 	bl	c9c2 <String::operator=(String const&)>
    2fa0:	a820      	add	r0, sp, #128	; 0x80
    2fa2:	f009 fc9d 	bl	c8e0 <String::~String()>
class StringSumHelper : public String
    2fa6:	a81c      	add	r0, sp, #112	; 0x70
    2fa8:	f009 fc9a 	bl	c8e0 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2fac:	682a      	ldr	r2, [r5, #0]
    2fae:	2a00      	cmp	r2, #0
    2fb0:	bf08      	it	eq
    2fb2:	463a      	moveq	r2, r7
    return m_fVol ? m_fVol->exists(path) :
    2fb4:	f8d6 1484 	ldr.w	r1, [r6, #1156]	; 0x484
    2fb8:	2900      	cmp	r1, #0
    2fba:	d0cc      	beq.n	2f56 <setup+0x1e6>
  FatFile() {}
    2fbc:	2300      	movs	r3, #0
    2fbe:	f88d 3000 	strb.w	r3, [sp]
    2fc2:	f88d 3001 	strb.w	r3, [sp, #1]
    2fc6:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2fca:	4668      	mov	r0, sp
    2fcc:	f004 fdd5 	bl	7b7a <FatFile::open(FatVolume*, char const*, int)>
    2fd0:	e7cf      	b.n	2f72 <setup+0x202>
    2fd2:	bf00      	nop
    2fd4:	200052f0 	.word	0x200052f0
    2fd8:	20005340 	.word	0x20005340
    2fdc:	2000533f 	.word	0x2000533f
    2fe0:	20005304 	.word	0x20005304
    2fe4:	200052c4 	.word	0x200052c4
    2fe8:	200052c8 	.word	0x200052c8
    2fec:	200052cc 	.word	0x200052cc
    2ff0:	200052d0 	.word	0x200052d0
    2ff4:	200052d4 	.word	0x200052d4
    2ff8:	200052d8 	.word	0x200052d8
    2ffc:	200052dc 	.word	0x200052dc
    3000:	20005054 	.word	0x20005054
    3004:	20004ed0 	.word	0x20004ed0
    3008:	20004ec8 	.word	0x20004ec8
    300c:	20004ee4 	.word	0x20004ee4
    3010:	20004edc 	.word	0x20004edc
    3014:	20003184 	.word	0x20003184
    3018:	20002c20 	.word	0x20002c20
    301c:	20002c30 	.word	0x20002c30
    3020:	20002c40 	.word	0x20002c40
    3024:	200040e0 	.word	0x200040e0
    3028:	20002c58 	.word	0x20002c58
    302c:	20005326 	.word	0x20005326
    3030:	20005030 	.word	0x20005030
    3034:	20005010 	.word	0x20005010
    3038:	20005020 	.word	0x20005020
    303c:	20003000 	.word	0x20003000
    3040:	4b75      	ldr	r3, [pc, #468]	; (3218 <setup+0x4a8>)
    3042:	681a      	ldr	r2, [r3, #0]
    3044:	2a00      	cmp	r2, #0
    3046:	f000 80c5 	beq.w	31d4 <setup+0x464>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    304a:	f244 2302 	movw	r3, #16898	; 0x4202
    304e:	4973      	ldr	r1, [pc, #460]	; (321c <setup+0x4ac>)
    3050:	4668      	mov	r0, sp
    3052:	f006 fdd1 	bl	9bf8 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    3056:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3058:	2b00      	cmp	r3, #0
    305a:	f000 80bd 	beq.w	31d8 <setup+0x468>
		if (file) return File(new SDFile(file));
    305e:	205c      	movs	r0, #92	; 0x5c
    3060:	f00a f860 	bl	d124 <operator new(unsigned int)>
    3064:	4604      	mov	r4, r0
class FileImpl {
    3066:	2500      	movs	r5, #0
    3068:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    306a:	4b6d      	ldr	r3, [pc, #436]	; (3220 <setup+0x4b0>)
    306c:	6003      	str	r3, [r0, #0]
class Print
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	60c3      	str	r3, [r0, #12]
    3072:	4b6c      	ldr	r3, [pc, #432]	; (3224 <setup+0x4b4>)
    3074:	6083      	str	r3, [r0, #8]
    3076:	9b02      	ldr	r3, [sp, #8]
    3078:	6103      	str	r3, [r0, #16]
    307a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    307e:	7503      	strb	r3, [r0, #20]
    3080:	a904      	add	r1, sp, #16
    3082:	3018      	adds	r0, #24
    3084:	f006 fc81 	bl	998a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3088:	4b67      	ldr	r3, [pc, #412]	; (3228 <setup+0x4b8>)
    308a:	60a3      	str	r3, [r4, #8]
    308c:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    308e:	6863      	ldr	r3, [r4, #4]
    3090:	3301      	adds	r3, #1
    3092:	6063      	str	r3, [r4, #4]
    3094:	4b65      	ldr	r3, [pc, #404]	; (322c <setup+0x4bc>)
    3096:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    3098:	a804      	add	r0, sp, #16
    309a:	f006 fcb7 	bl	9a0c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    309e:	4b64      	ldr	r3, [pc, #400]	; (3230 <setup+0x4c0>)
    30a0:	691b      	ldr	r3, [r3, #16]
    30a2:	b16b      	cbz	r3, 30c0 <setup+0x350>
		if (--(f->refcount) == 0) {
    30a4:	685a      	ldr	r2, [r3, #4]
    30a6:	3a01      	subs	r2, #1
    30a8:	605a      	str	r2, [r3, #4]
    30aa:	b94a      	cbnz	r2, 30c0 <setup+0x350>
			f->close();
    30ac:	4d60      	ldr	r5, [pc, #384]	; (3230 <setup+0x4c0>)
    30ae:	6928      	ldr	r0, [r5, #16]
    30b0:	6803      	ldr	r3, [r0, #0]
    30b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30b4:	4798      	blx	r3
			delete f;
    30b6:	6928      	ldr	r0, [r5, #16]
    30b8:	b110      	cbz	r0, 30c0 <setup+0x350>
    30ba:	6803      	ldr	r3, [r0, #0]
    30bc:	685b      	ldr	r3, [r3, #4]
    30be:	4798      	blx	r3
		f = file.f;
    30c0:	4d5b      	ldr	r5, [pc, #364]	; (3230 <setup+0x4c0>)
    30c2:	612c      	str	r4, [r5, #16]
			"roll_imu,pitch_imu,yaw_imu,alpha,beta,roll_des,pitch_des,yaw_des,throttle_des,roll_pid,pitch_pid,yaw_pid,radio_ch1,radio_ch2,radio_ch3,radio_ch4,radio_ch5,radio_ch6,radio_ch7,radio_ch8,radio_ch9,radio_ch10,radio_ch11,radio_ch12,radio_ch13,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,s1_command,s2_command,s3_command,s4_command,kp_roll,ki_roll,kd_roll,kp_pitch,ki_pitch,kd_pitch,kp_yaw,ki_yaw,kd_yaw,failsafeTriggered";
    30c4:	495b      	ldr	r1, [pc, #364]	; (3234 <setup+0x4c4>)
    30c6:	4668      	mov	r0, sp
    30c8:	f009 fc53 	bl	c972 <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    30cc:	4669      	mov	r1, sp
    30ce:	4628      	mov	r0, r5
    30d0:	f009 f97c 	bl	c3cc <Print::print(String const&)>
    30d4:	4628      	mov	r0, r5
    30d6:	f009 f99e 	bl	c416 <Print::println()>
		if (f) {
    30da:	6928      	ldr	r0, [r5, #16]
    30dc:	b198      	cbz	r0, 3106 <setup+0x396>
			f->close();
    30de:	6803      	ldr	r3, [r0, #0]
    30e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30e2:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    30e4:	692a      	ldr	r2, [r5, #16]
    30e6:	6853      	ldr	r3, [r2, #4]
    30e8:	3b01      	subs	r3, #1
    30ea:	6053      	str	r3, [r2, #4]
    30ec:	b943      	cbnz	r3, 3100 <setup+0x390>
			f->close();
    30ee:	6928      	ldr	r0, [r5, #16]
    30f0:	6803      	ldr	r3, [r0, #0]
    30f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    30f4:	4798      	blx	r3
			delete f;
    30f6:	6928      	ldr	r0, [r5, #16]
    30f8:	b110      	cbz	r0, 3100 <setup+0x390>
    30fa:	6803      	ldr	r3, [r0, #0]
    30fc:	685b      	ldr	r3, [r3, #4]
    30fe:	4798      	blx	r3
		f = nullptr;
    3100:	4b4b      	ldr	r3, [pc, #300]	; (3230 <setup+0x4c0>)
    3102:	2200      	movs	r2, #0
    3104:	611a      	str	r2, [r3, #16]
  } else {
    3106:	4668      	mov	r0, sp
    3108:	f009 fbea 	bl	c8e0 <String::~String()>
  radioSetup();
    310c:	f7ff fe28 	bl	2d60 <radioSetup()>
  channel_1_pwm = channel_1_fs;
    3110:	4b49      	ldr	r3, [pc, #292]	; (3238 <setup+0x4c8>)
    3112:	681a      	ldr	r2, [r3, #0]
    3114:	4b49      	ldr	r3, [pc, #292]	; (323c <setup+0x4cc>)
    3116:	601a      	str	r2, [r3, #0]
  channel_2_pwm = channel_2_fs;
    3118:	4b49      	ldr	r3, [pc, #292]	; (3240 <setup+0x4d0>)
    311a:	681a      	ldr	r2, [r3, #0]
    311c:	4b49      	ldr	r3, [pc, #292]	; (3244 <setup+0x4d4>)
    311e:	601a      	str	r2, [r3, #0]
  channel_3_pwm = channel_3_fs;
    3120:	4b49      	ldr	r3, [pc, #292]	; (3248 <setup+0x4d8>)
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	4b49      	ldr	r3, [pc, #292]	; (324c <setup+0x4dc>)
    3126:	601a      	str	r2, [r3, #0]
  channel_4_pwm = channel_4_fs;
    3128:	4b49      	ldr	r3, [pc, #292]	; (3250 <setup+0x4e0>)
    312a:	681a      	ldr	r2, [r3, #0]
    312c:	4b49      	ldr	r3, [pc, #292]	; (3254 <setup+0x4e4>)
    312e:	601a      	str	r2, [r3, #0]
  channel_5_pwm = channel_5_fs;
    3130:	4b49      	ldr	r3, [pc, #292]	; (3258 <setup+0x4e8>)
    3132:	681a      	ldr	r2, [r3, #0]
    3134:	4b49      	ldr	r3, [pc, #292]	; (325c <setup+0x4ec>)
    3136:	601a      	str	r2, [r3, #0]
  channel_6_pwm = channel_6_fs;
    3138:	4b49      	ldr	r3, [pc, #292]	; (3260 <setup+0x4f0>)
    313a:	681a      	ldr	r2, [r3, #0]
    313c:	4b49      	ldr	r3, [pc, #292]	; (3264 <setup+0x4f4>)
    313e:	601a      	str	r2, [r3, #0]
	channel_7_pwm = channel_7_fs;
    3140:	4b49      	ldr	r3, [pc, #292]	; (3268 <setup+0x4f8>)
    3142:	681a      	ldr	r2, [r3, #0]
    3144:	4b49      	ldr	r3, [pc, #292]	; (326c <setup+0x4fc>)
    3146:	601a      	str	r2, [r3, #0]
	channel_8_pwm = channel_8_fs;
    3148:	4b49      	ldr	r3, [pc, #292]	; (3270 <setup+0x500>)
    314a:	681a      	ldr	r2, [r3, #0]
    314c:	4b49      	ldr	r3, [pc, #292]	; (3274 <setup+0x504>)
    314e:	601a      	str	r2, [r3, #0]
	channel_9_pwm = channel_9_fs;
    3150:	4b49      	ldr	r3, [pc, #292]	; (3278 <setup+0x508>)
    3152:	681a      	ldr	r2, [r3, #0]
    3154:	4b49      	ldr	r3, [pc, #292]	; (327c <setup+0x50c>)
    3156:	601a      	str	r2, [r3, #0]
	channel_10_pwm = channel_10_fs;
    3158:	4b49      	ldr	r3, [pc, #292]	; (3280 <setup+0x510>)
    315a:	681a      	ldr	r2, [r3, #0]
    315c:	4b49      	ldr	r3, [pc, #292]	; (3284 <setup+0x514>)
    315e:	601a      	str	r2, [r3, #0]
	channel_11_pwm = channel_11_fs;
    3160:	4b49      	ldr	r3, [pc, #292]	; (3288 <setup+0x518>)
    3162:	681a      	ldr	r2, [r3, #0]
    3164:	4b49      	ldr	r3, [pc, #292]	; (328c <setup+0x51c>)
    3166:	601a      	str	r2, [r3, #0]
	channel_12_pwm = channel_12_fs;
    3168:	4b49      	ldr	r3, [pc, #292]	; (3290 <setup+0x520>)
    316a:	681a      	ldr	r2, [r3, #0]
    316c:	4b49      	ldr	r3, [pc, #292]	; (3294 <setup+0x524>)
    316e:	601a      	str	r2, [r3, #0]
	channel_13_pwm = channel_13_fs;
    3170:	4b49      	ldr	r3, [pc, #292]	; (3298 <setup+0x528>)
    3172:	681a      	ldr	r2, [r3, #0]
    3174:	4b49      	ldr	r3, [pc, #292]	; (329c <setup+0x52c>)
    3176:	601a      	str	r2, [r3, #0]
  IMUinit();
    3178:	f7fd fc0a 	bl	990 <IMUinit()>
  delay(5);
    317c:	2005      	movs	r0, #5
    317e:	f009 fea3 	bl	cec8 <delay>
  servo1.write(0); //Command servo angle from 0-180 degrees (1000 to 2000 PWM)
    3182:	2100      	movs	r1, #0
    3184:	4846      	ldr	r0, [pc, #280]	; (32a0 <setup+0x530>)
    3186:	f001 fd1f 	bl	4bc8 <PWMServo::write(int)>
  servo2.write(0); //Set these to 90 for servos if you do not want them to briefly max out on startup
    318a:	2100      	movs	r1, #0
    318c:	4845      	ldr	r0, [pc, #276]	; (32a4 <setup+0x534>)
    318e:	f001 fd1b 	bl	4bc8 <PWMServo::write(int)>
  servo3.write(0); //Keep these at 0 if you are using servo outputs for motors
    3192:	2100      	movs	r1, #0
    3194:	4844      	ldr	r0, [pc, #272]	; (32a8 <setup+0x538>)
    3196:	f001 fd17 	bl	4bc8 <PWMServo::write(int)>
  servo4.write(0);
    319a:	2100      	movs	r1, #0
    319c:	4843      	ldr	r0, [pc, #268]	; (32ac <setup+0x53c>)
    319e:	f001 fd13 	bl	4bc8 <PWMServo::write(int)>
  servo5.write(0);
    31a2:	2100      	movs	r1, #0
    31a4:	4842      	ldr	r0, [pc, #264]	; (32b0 <setup+0x540>)
    31a6:	f001 fd0f 	bl	4bc8 <PWMServo::write(int)>
  servo6.write(0);
    31aa:	2100      	movs	r1, #0
    31ac:	4841      	ldr	r0, [pc, #260]	; (32b4 <setup+0x544>)
    31ae:	f001 fd0b 	bl	4bc8 <PWMServo::write(int)>
  servo7.write(0);
    31b2:	2100      	movs	r1, #0
    31b4:	4840      	ldr	r0, [pc, #256]	; (32b8 <setup+0x548>)
    31b6:	f001 fd07 	bl	4bc8 <PWMServo::write(int)>
  delay(5);
    31ba:	2005      	movs	r0, #5
    31bc:	f009 fe84 	bl	cec8 <delay>
  setupBlink(3,160,70); //numBlinks, upTime (ms), downTime (ms)
    31c0:	2246      	movs	r2, #70	; 0x46
    31c2:	21a0      	movs	r1, #160	; 0xa0
    31c4:	2003      	movs	r0, #3
    31c6:	f7fe fd71 	bl	1cac <setupBlink(int, int, int)>
	doneWithSetup = 1;
    31ca:	4b3c      	ldr	r3, [pc, #240]	; (32bc <setup+0x54c>)
    31cc:	2201      	movs	r2, #1
    31ce:	701a      	strb	r2, [r3, #0]
}
    31d0:	b025      	add	sp, #148	; 0x94
    31d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31d4:	4a3a      	ldr	r2, [pc, #232]	; (32c0 <setup+0x550>)
    31d6:	e738      	b.n	304a <setup+0x2da>
  bool isOpen() const {return m_fFile || m_xFile;}
    31d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    31da:	2c00      	cmp	r4, #0
    31dc:	f47f af3f 	bne.w	305e <setup+0x2ee>
    31e0:	e758      	b.n	3094 <setup+0x324>
							  return write((const uint8_t *)str, strlen(str)); }
    31e2:	4c38      	ldr	r4, [pc, #224]	; (32c4 <setup+0x554>)
    31e4:	6823      	ldr	r3, [r4, #0]
    31e6:	685b      	ldr	r3, [r3, #4]
    31e8:	221b      	movs	r2, #27
    31ea:	4937      	ldr	r1, [pc, #220]	; (32c8 <setup+0x558>)
    31ec:	4620      	mov	r0, r4
    31ee:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    31f0:	4620      	mov	r0, r4
    31f2:	f009 f910 	bl	c416 <Print::println()>
		SD_is_present = 0;
    31f6:	4b35      	ldr	r3, [pc, #212]	; (32cc <setup+0x55c>)
    31f8:	2200      	movs	r2, #0
    31fa:	701a      	strb	r2, [r3, #0]
    31fc:	e786      	b.n	310c <setup+0x39c>
			uint32_t elapsed = systick_millis_count - millis_begin;
    31fe:	682b      	ldr	r3, [r5, #0]
    3200:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    3202:	7822      	ldrb	r2, [r4, #0]
    3204:	2a00      	cmp	r2, #0
    3206:	f47f adbb 	bne.w	2d80 <setup+0x10>
				if (elapsed > 750) break;
    320a:	f240 22ee 	movw	r2, #750	; 0x2ee
    320e:	4293      	cmp	r3, r2
    3210:	f67f adb9 	bls.w	2d86 <setup+0x16>
    3214:	e5cb      	b.n	2dae <setup+0x3e>
    3216:	bf00      	nop
    3218:	20005020 	.word	0x20005020
    321c:	200040e4 	.word	0x200040e4
    3220:	200022f4 	.word	0x200022f4
    3224:	20002350 	.word	0x20002350
    3228:	200022d0 	.word	0x200022d0
    322c:	200021c4 	.word	0x200021c4
    3230:	20003800 	.word	0x20003800
    3234:	20002c6c 	.word	0x20002c6c
    3238:	200037c4 	.word	0x200037c4
    323c:	20004f18 	.word	0x20004f18
    3240:	200037c8 	.word	0x200037c8
    3244:	20004f24 	.word	0x20004f24
    3248:	200037cc 	.word	0x200037cc
    324c:	20004f30 	.word	0x20004f30
    3250:	200037d0 	.word	0x200037d0
    3254:	20004f3c 	.word	0x20004f3c
    3258:	200037d4 	.word	0x200037d4
    325c:	20004f48 	.word	0x20004f48
    3260:	200037d8 	.word	0x200037d8
    3264:	20004f4c 	.word	0x20004f4c
    3268:	200037dc 	.word	0x200037dc
    326c:	20004f50 	.word	0x20004f50
    3270:	200037e0 	.word	0x200037e0
    3274:	20004f54 	.word	0x20004f54
    3278:	200037e4 	.word	0x200037e4
    327c:	20004f58 	.word	0x20004f58
    3280:	200037b4 	.word	0x200037b4
    3284:	20004f08 	.word	0x20004f08
    3288:	200037b8 	.word	0x200037b8
    328c:	20004f0c 	.word	0x20004f0c
    3290:	200037bc 	.word	0x200037bc
    3294:	20004f10 	.word	0x20004f10
    3298:	200037c0 	.word	0x200037c0
    329c:	20004f14 	.word	0x20004f14
    32a0:	200052c4 	.word	0x200052c4
    32a4:	200052c8 	.word	0x200052c8
    32a8:	200052cc 	.word	0x200052cc
    32ac:	200052d0 	.word	0x200052d0
    32b0:	200052d4 	.word	0x200052d4
    32b4:	200052d8 	.word	0x200052d8
    32b8:	200052dc 	.word	0x200052dc
    32bc:	20005333 	.word	0x20005333
    32c0:	20003000 	.word	0x20003000
    32c4:	20003184 	.word	0x20003184
    32c8:	20002e04 	.word	0x20002e04
    32cc:	20005326 	.word	0x20005326

000032d0 <_GLOBAL__sub_I_mpu6050>:
    rising_edge_start_6 = micros();
  }
  else if(trigger == 0) {
    channel_6_raw = micros() - rising_edge_start_6;
  }
}
    32d0:	b510      	push	{r4, lr}
  MPU6050 mpu6050;
    32d2:	2168      	movs	r1, #104	; 0x68
    32d4:	4812      	ldr	r0, [pc, #72]	; (3320 <_GLOBAL__sub_I_mpu6050+0x50>)
    32d6:	f000 fbff 	bl	3ad8 <MPU6050::MPU6050(unsigned char)>
  SBUS sbus(Serial5);
    32da:	4c12      	ldr	r4, [pc, #72]	; (3324 <_GLOBAL__sub_I_mpu6050+0x54>)
    32dc:	4912      	ldr	r1, [pc, #72]	; (3328 <_GLOBAL__sub_I_mpu6050+0x58>)
    32de:	4620      	mov	r0, r4
    32e0:	f000 fc8c 	bl	3bfc <SBUS::SBUS(HardwareSerial&)>
    32e4:	4a11      	ldr	r2, [pc, #68]	; (332c <_GLOBAL__sub_I_mpu6050+0x5c>)
    32e6:	4912      	ldr	r1, [pc, #72]	; (3330 <_GLOBAL__sub_I_mpu6050+0x60>)
    32e8:	4620      	mov	r0, r4
    32ea:	f00d fad7 	bl	1089c <__aeabi_atexit>
PWMServo iris;
    32ee:	4811      	ldr	r0, [pc, #68]	; (3334 <_GLOBAL__sub_I_mpu6050+0x64>)
    32f0:	f001 fc18 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo1;
    32f4:	4810      	ldr	r0, [pc, #64]	; (3338 <_GLOBAL__sub_I_mpu6050+0x68>)
    32f6:	f001 fc15 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo2;
    32fa:	4810      	ldr	r0, [pc, #64]	; (333c <_GLOBAL__sub_I_mpu6050+0x6c>)
    32fc:	f001 fc12 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo3;
    3300:	480f      	ldr	r0, [pc, #60]	; (3340 <_GLOBAL__sub_I_mpu6050+0x70>)
    3302:	f001 fc0f 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo4;
    3306:	480f      	ldr	r0, [pc, #60]	; (3344 <_GLOBAL__sub_I_mpu6050+0x74>)
    3308:	f001 fc0c 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo5;
    330c:	480e      	ldr	r0, [pc, #56]	; (3348 <_GLOBAL__sub_I_mpu6050+0x78>)
    330e:	f001 fc09 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo6;
    3312:	480e      	ldr	r0, [pc, #56]	; (334c <_GLOBAL__sub_I_mpu6050+0x7c>)
    3314:	f001 fc06 	bl	4b24 <PWMServo::PWMServo()>
PWMServo servo7;
    3318:	480d      	ldr	r0, [pc, #52]	; (3350 <_GLOBAL__sub_I_mpu6050+0x80>)
    331a:	f001 fc03 	bl	4b24 <PWMServo::PWMServo()>
    331e:	bd10      	pop	{r4, pc}
    3320:	20005088 	.word	0x20005088
    3324:	20005160 	.word	0x20005160
    3328:	200046a4 	.word	0x200046a4
    332c:	20003200 	.word	0x20003200
    3330:	00003c45 	.word	0x00003c45
    3334:	20005054 	.word	0x20005054
    3338:	200052c4 	.word	0x200052c4
    333c:	200052c8 	.word	0x200052c8
    3340:	200052cc 	.word	0x200052cc
    3344:	200052d0 	.word	0x200052d0
    3348:	200052d4 	.word	0x200052d4
    334c:	200052d8 	.word	0x200052d8
    3350:	200052dc 	.word	0x200052dc

00003354 <biquadFilter_apply(biquadFilter_s*, float)>:

	filter->x1 = filter->x2 = 0;
	filter->y1 = filter->y2 = 0;
}

float biquadFilter_apply(biquadFilter_s *filter, float input) {
    3354:	eef0 7a40 	vmov.f32	s15, s0
	const float result = filter->b0*input + filter->x1;
    3358:	ed90 0a00 	vldr	s0, [r0]
    335c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3360:	ed90 7a05 	vldr	s14, [r0, #20]
    3364:	ee30 0a07 	vadd.f32	s0, s0, s14

	filter->x1 = filter->b1*input - filter->a1*result + filter->x2;
    3368:	ed90 7a01 	vldr	s14, [r0, #4]
    336c:	ee27 7a87 	vmul.f32	s14, s15, s14
    3370:	edd0 6a03 	vldr	s13, [r0, #12]
    3374:	ee60 6a26 	vmul.f32	s13, s0, s13
    3378:	ee37 7a66 	vsub.f32	s14, s14, s13
    337c:	edd0 6a06 	vldr	s13, [r0, #24]
    3380:	ee37 7a26 	vadd.f32	s14, s14, s13
    3384:	ed80 7a05 	vstr	s14, [r0, #20]
	filter->x2 = filter->b2*input - filter->a2*result;
    3388:	ed90 7a02 	vldr	s14, [r0, #8]
    338c:	ee67 7a87 	vmul.f32	s15, s15, s14
    3390:	ed90 7a04 	vldr	s14, [r0, #16]
    3394:	ee20 7a07 	vmul.f32	s14, s0, s14
    3398:	ee77 7ac7 	vsub.f32	s15, s15, s14
    339c:	edc0 7a06 	vstr	s15, [r0, #24]

	return result;
}
    33a0:	4770      	bx	lr
    33a2:	0000      	movs	r0, r0
    33a4:	0000      	movs	r0, r0
	...

000033a8 <anglePID()>:


void anglePID() {
    33a8:	b510      	push	{r4, lr}
    33aa:	ed2d 8b04 	vpush	{d8-d9}

  // --- Roll --- //
  float error_roll = roll_des - roll_IMU;
    33ae:	4b9e      	ldr	r3, [pc, #632]	; (3628 <anglePID()+0x280>)
    33b0:	ed93 8a00 	vldr	s16, [r3]
    33b4:	4b9d      	ldr	r3, [pc, #628]	; (362c <anglePID()+0x284>)
    33b6:	edd3 7a00 	vldr	s15, [r3]
    33ba:	ee38 8a67 	vsub.f32	s16, s16, s15
  float integral_roll = integralOld_roll + error_roll*dt;
    33be:	4b9c      	ldr	r3, [pc, #624]	; (3630 <anglePID()+0x288>)
    33c0:	edd3 7a00 	vldr	s15, [r3]
    33c4:	4b9b      	ldr	r3, [pc, #620]	; (3634 <anglePID()+0x28c>)
    33c6:	ed93 7a00 	vldr	s14, [r3]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    33ca:	4b9b      	ldr	r3, [pc, #620]	; (3638 <anglePID()+0x290>)
    33cc:	681a      	ldr	r2, [r3, #0]
    33ce:	f240 4323 	movw	r3, #1059	; 0x423
    33d2:	429a      	cmp	r2, r3
    33d4:	f340 8119 	ble.w	360a <anglePID()+0x262>
  float integral_roll = integralOld_roll + error_roll*dt;
    33d8:	ee67 7a88 	vmul.f32	s15, s15, s16
    33dc:	ee77 7a87 	vadd.f32	s15, s15, s14
    integral_roll = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_roll = constrain(integral_roll, -i_limit, i_limit);
    33e0:	4b96      	ldr	r3, [pc, #600]	; (363c <anglePID()+0x294>)
    33e2:	ed93 7a00 	vldr	s14, [r3]
    33e6:	eef1 8a47 	vneg.f32	s17, s14
    33ea:	eef4 7ae8 	vcmpe.f32	s15, s17
    33ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33f2:	d408      	bmi.n	3406 <anglePID()+0x5e>
    33f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    33f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33fc:	bf54      	ite	pl
    33fe:	eef0 8a67 	vmovpl.f32	s17, s15
    3402:	eef0 8a47 	vmovmi.f32	s17, s14
  float derivative_roll = GyroX;
	#ifdef PID_FILTERING
		derivative_roll = biquadFilter_apply(&dTermFilter_roll, derivative_roll);
    3406:	4b8e      	ldr	r3, [pc, #568]	; (3640 <anglePID()+0x298>)
    3408:	ed93 0a00 	vldr	s0, [r3]
    340c:	488d      	ldr	r0, [pc, #564]	; (3644 <anglePID()+0x29c>)
    340e:	f7ff ffa1 	bl	3354 <biquadFilter_apply(biquadFilter_s*, float)>
	#endif
	//Scaled by .01 to bring within -1 to 1 range
  roll_PID = 0.01*(Kp_roll_angle*pScaleRoll*error_roll 
    3412:	4b8d      	ldr	r3, [pc, #564]	; (3648 <anglePID()+0x2a0>)
    3414:	ed93 7a00 	vldr	s14, [r3]
    3418:	4b8c      	ldr	r3, [pc, #560]	; (364c <anglePID()+0x2a4>)
    341a:	edd3 7a00 	vldr	s15, [r3]
    341e:	ee27 7a27 	vmul.f32	s14, s14, s15
    3422:	ee27 7a08 	vmul.f32	s14, s14, s16
							   		+ Ki_roll_angle*iScaleRoll*integral_roll 
    3426:	4b8a      	ldr	r3, [pc, #552]	; (3650 <anglePID()+0x2a8>)
    3428:	edd3 7a00 	vldr	s15, [r3]
    342c:	4b89      	ldr	r3, [pc, #548]	; (3654 <anglePID()+0x2ac>)
    342e:	edd3 6a00 	vldr	s13, [r3]
    3432:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3436:	ee67 7aa8 	vmul.f32	s15, s15, s17
    343a:	ee37 7a27 	vadd.f32	s14, s14, s15
										- Kd_roll_angle*dScaleRoll*derivative_roll); 
    343e:	4b86      	ldr	r3, [pc, #536]	; (3658 <anglePID()+0x2b0>)
    3440:	edd3 7a00 	vldr	s15, [r3]
    3444:	4b85      	ldr	r3, [pc, #532]	; (365c <anglePID()+0x2b4>)
    3446:	edd3 6a00 	vldr	s13, [r3]
    344a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    344e:	ee67 7a80 	vmul.f32	s15, s15, s0
    3452:	ee37 7a67 	vsub.f32	s14, s14, s15
    3456:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  roll_PID = 0.01*(Kp_roll_angle*pScaleRoll*error_roll 
    345a:	ed9f 6b71 	vldr	d6, [pc, #452]	; 3620 <anglePID()+0x278>
    345e:	ee27 7b06 	vmul.f64	d7, d7, d6
    3462:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3466:	4b7e      	ldr	r3, [pc, #504]	; (3660 <anglePID()+0x2b8>)
    3468:	ed83 7a00 	vstr	s14, [r3]

  // --- Pitch --- //
  float error_pitch = pitch_des - pitch_IMU;
    346c:	4b7d      	ldr	r3, [pc, #500]	; (3664 <anglePID()+0x2bc>)
    346e:	ed93 9a00 	vldr	s18, [r3]
    3472:	4b7d      	ldr	r3, [pc, #500]	; (3668 <anglePID()+0x2c0>)
    3474:	edd3 7a00 	vldr	s15, [r3]
    3478:	ee39 9a67 	vsub.f32	s18, s18, s15
  float integral_pitch = integralOld_pitch + error_pitch*dt;
    347c:	4b6c      	ldr	r3, [pc, #432]	; (3630 <anglePID()+0x288>)
    347e:	edd3 7a00 	vldr	s15, [r3]
    3482:	4b7a      	ldr	r3, [pc, #488]	; (366c <anglePID()+0x2c4>)
    3484:	ed93 7a00 	vldr	s14, [r3]
  if (channel_1_pwm < 1060) {
    3488:	4b6b      	ldr	r3, [pc, #428]	; (3638 <anglePID()+0x290>)
    348a:	681a      	ldr	r2, [r3, #0]
    348c:	f240 4323 	movw	r3, #1059	; 0x423
    3490:	429a      	cmp	r2, r3
    3492:	f340 80bd 	ble.w	3610 <anglePID()+0x268>
  float integral_pitch = integralOld_pitch + error_pitch*dt;
    3496:	ee67 7a89 	vmul.f32	s15, s15, s18
    349a:	ee77 7a87 	vadd.f32	s15, s15, s14
    integral_pitch = 0;
  }
  integral_pitch = constrain(integral_pitch, -i_limit, i_limit);
    349e:	4b67      	ldr	r3, [pc, #412]	; (363c <anglePID()+0x294>)
    34a0:	ed93 7a00 	vldr	s14, [r3]
    34a4:	eeb1 8a47 	vneg.f32	s16, s14
    34a8:	eef4 7ac8 	vcmpe.f32	s15, s16
    34ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34b0:	d408      	bmi.n	34c4 <anglePID()+0x11c>
    34b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    34b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34ba:	bf54      	ite	pl
    34bc:	eeb0 8a67 	vmovpl.f32	s16, s15
    34c0:	eeb0 8a47 	vmovmi.f32	s16, s14
  float derivative_pitch = GyroY;
	#ifdef PID_FILTERING
		derivative_pitch = biquadFilter_apply(&dTermFilter_pitch, derivative_pitch);
    34c4:	4b6a      	ldr	r3, [pc, #424]	; (3670 <anglePID()+0x2c8>)
    34c6:	ed93 0a00 	vldr	s0, [r3]
    34ca:	486a      	ldr	r0, [pc, #424]	; (3674 <anglePID()+0x2cc>)
    34cc:	f7ff ff42 	bl	3354 <biquadFilter_apply(biquadFilter_s*, float)>
	#endif
	pitch_PID = 0.01*(Kp_pitch_angle*pScalePitch*error_pitch 
    34d0:	4b69      	ldr	r3, [pc, #420]	; (3678 <anglePID()+0x2d0>)
    34d2:	ed93 7a00 	vldr	s14, [r3]
    34d6:	4b69      	ldr	r3, [pc, #420]	; (367c <anglePID()+0x2d4>)
    34d8:	edd3 7a00 	vldr	s15, [r3]
    34dc:	ee27 7a27 	vmul.f32	s14, s14, s15
    34e0:	ee27 7a09 	vmul.f32	s14, s14, s18
										+ Ki_pitch_angle*iScalePitch*integral_pitch 
    34e4:	4b66      	ldr	r3, [pc, #408]	; (3680 <anglePID()+0x2d8>)
    34e6:	edd3 7a00 	vldr	s15, [r3]
    34ea:	4b66      	ldr	r3, [pc, #408]	; (3684 <anglePID()+0x2dc>)
    34ec:	edd3 6a00 	vldr	s13, [r3]
    34f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    34f4:	ee67 7a88 	vmul.f32	s15, s15, s16
    34f8:	ee37 7a27 	vadd.f32	s14, s14, s15
										- Kd_pitch_angle*dScalePitch*derivative_pitch);
    34fc:	4b62      	ldr	r3, [pc, #392]	; (3688 <anglePID()+0x2e0>)
    34fe:	edd3 7a00 	vldr	s15, [r3]
    3502:	4b62      	ldr	r3, [pc, #392]	; (368c <anglePID()+0x2e4>)
    3504:	edd3 6a00 	vldr	s13, [r3]
    3508:	ee67 7aa6 	vmul.f32	s15, s15, s13
    350c:	ee67 7a80 	vmul.f32	s15, s15, s0
    3510:	ee37 7a67 	vsub.f32	s14, s14, s15
    3514:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	pitch_PID = 0.01*(Kp_pitch_angle*pScalePitch*error_pitch 
    3518:	ed9f 6b41 	vldr	d6, [pc, #260]	; 3620 <anglePID()+0x278>
    351c:	ee27 7b06 	vmul.f64	d7, d7, d6
    3520:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3524:	4b5a      	ldr	r3, [pc, #360]	; (3690 <anglePID()+0x2e8>)
    3526:	ed83 7a00 	vstr	s14, [r3]

  // --- Yaw --- // stablize on rate from GyroZ
  float error_yaw = yaw_des - GyroZ;
    352a:	4b5a      	ldr	r3, [pc, #360]	; (3694 <anglePID()+0x2ec>)
    352c:	ed93 9a00 	vldr	s18, [r3]
    3530:	4b59      	ldr	r3, [pc, #356]	; (3698 <anglePID()+0x2f0>)
    3532:	edd3 7a00 	vldr	s15, [r3]
    3536:	ee39 9a67 	vsub.f32	s18, s18, s15
  float integral_yaw = integralOld_yaw + error_yaw*dt;
    353a:	4b3d      	ldr	r3, [pc, #244]	; (3630 <anglePID()+0x288>)
    353c:	ed93 0a00 	vldr	s0, [r3]
    3540:	4b56      	ldr	r3, [pc, #344]	; (369c <anglePID()+0x2f4>)
    3542:	ed93 7a00 	vldr	s14, [r3]
  if (channel_1_pwm < 1060) {
    3546:	4b3c      	ldr	r3, [pc, #240]	; (3638 <anglePID()+0x290>)
    3548:	681a      	ldr	r2, [r3, #0]
    354a:	f240 4323 	movw	r3, #1059	; 0x423
    354e:	429a      	cmp	r2, r3
    3550:	dd61      	ble.n	3616 <anglePID()+0x26e>
  float integral_yaw = integralOld_yaw + error_yaw*dt;
    3552:	ee60 7a09 	vmul.f32	s15, s0, s18
    3556:	ee77 7a87 	vadd.f32	s15, s15, s14
    integral_yaw = 0;
  }
  integral_yaw = constrain(integral_yaw, -i_limit, i_limit); 
    355a:	4b38      	ldr	r3, [pc, #224]	; (363c <anglePID()+0x294>)
    355c:	ed93 7a00 	vldr	s14, [r3]
    3560:	eef1 9a47 	vneg.f32	s19, s14
    3564:	eef4 7ae9 	vcmpe.f32	s15, s19
    3568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    356c:	d408      	bmi.n	3580 <anglePID()+0x1d8>
    356e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3576:	bf54      	ite	pl
    3578:	eef0 9a67 	vmovpl.f32	s19, s15
    357c:	eef0 9a47 	vmovmi.f32	s19, s14
  float derivative_yaw = (error_yaw - errorOld_yaw)/dt; 
    3580:	4c47      	ldr	r4, [pc, #284]	; (36a0 <anglePID()+0x2f8>)
    3582:	edd4 7a00 	vldr	s15, [r4]
    3586:	ee79 7a67 	vsub.f32	s15, s18, s15
	#ifdef PID_FILTERING
		derivative_yaw = biquadFilter_apply(&dTermFilter_yaw, derivative_yaw);
    358a:	ee87 0a80 	vdiv.f32	s0, s15, s0
    358e:	4845      	ldr	r0, [pc, #276]	; (36a4 <anglePID()+0x2fc>)
    3590:	f7ff fee0 	bl	3354 <biquadFilter_apply(biquadFilter_s*, float)>
	#endif
  yaw_PID = 0.01*(Kp_yaw*pScaleYaw*error_yaw 
    3594:	4b44      	ldr	r3, [pc, #272]	; (36a8 <anglePID()+0x300>)
    3596:	ed93 7a00 	vldr	s14, [r3]
    359a:	4b44      	ldr	r3, [pc, #272]	; (36ac <anglePID()+0x304>)
    359c:	edd3 7a00 	vldr	s15, [r3]
    35a0:	ee27 7a27 	vmul.f32	s14, s14, s15
    35a4:	ee27 7a09 	vmul.f32	s14, s14, s18
									+ Ki_yaw*iScaleYaw*integral_yaw 
    35a8:	4b41      	ldr	r3, [pc, #260]	; (36b0 <anglePID()+0x308>)
    35aa:	edd3 7a00 	vldr	s15, [r3]
    35ae:	4b41      	ldr	r3, [pc, #260]	; (36b4 <anglePID()+0x30c>)
    35b0:	edd3 6a00 	vldr	s13, [r3]
    35b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    35b8:	ee67 7aa9 	vmul.f32	s15, s15, s19
    35bc:	ee37 7a27 	vadd.f32	s14, s14, s15
									+ Kd_yaw*dScaleYaw*derivative_yaw);
    35c0:	4b3d      	ldr	r3, [pc, #244]	; (36b8 <anglePID()+0x310>)
    35c2:	edd3 7a00 	vldr	s15, [r3]
    35c6:	4b3d      	ldr	r3, [pc, #244]	; (36bc <anglePID()+0x314>)
    35c8:	edd3 6a00 	vldr	s13, [r3]
    35cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    35d0:	ee67 7a80 	vmul.f32	s15, s15, s0
    35d4:	ee37 7a27 	vadd.f32	s14, s14, s15
    35d8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  yaw_PID = 0.01*(Kp_yaw*pScaleYaw*error_yaw 
    35dc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 3620 <anglePID()+0x278>
    35e0:	ee27 7b06 	vmul.f64	d7, d7, d6
    35e4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    35e8:	4b35      	ldr	r3, [pc, #212]	; (36c0 <anglePID()+0x318>)
    35ea:	ed83 7a00 	vstr	s14, [r3]

  //Update roll variables
  integralOld_roll = integral_roll;
    35ee:	4b11      	ldr	r3, [pc, #68]	; (3634 <anglePID()+0x28c>)
    35f0:	edc3 8a00 	vstr	s17, [r3]
  //Update pitch variables
  integralOld_pitch = integral_pitch;
    35f4:	4b1d      	ldr	r3, [pc, #116]	; (366c <anglePID()+0x2c4>)
    35f6:	ed83 8a00 	vstr	s16, [r3]
  //Update yaw variables
  errorOld_yaw = error_yaw;
    35fa:	ed84 9a00 	vstr	s18, [r4]
  integralOld_yaw = integral_yaw;
    35fe:	4b27      	ldr	r3, [pc, #156]	; (369c <anglePID()+0x2f4>)
    3600:	edc3 9a00 	vstr	s19, [r3]
}
    3604:	ecbd 8b04 	vpop	{d8-d9}
    3608:	bd10      	pop	{r4, pc}
    integral_roll = 0;
    360a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 36c4 <anglePID()+0x31c>
    360e:	e6e7      	b.n	33e0 <anglePID()+0x38>
    integral_pitch = 0;
    3610:	eddf 7a2c 	vldr	s15, [pc, #176]	; 36c4 <anglePID()+0x31c>
    3614:	e743      	b.n	349e <anglePID()+0xf6>
    integral_yaw = 0;
    3616:	eddf 7a2b 	vldr	s15, [pc, #172]	; 36c4 <anglePID()+0x31c>
    361a:	e79e      	b.n	355a <anglePID()+0x1b2>
    361c:	f3af 8000 	nop.w
    3620:	47ae147b 	.word	0x47ae147b
    3624:	3f847ae1 	.word	0x3f847ae1
    3628:	200050e0 	.word	0x200050e0
    362c:	200050d8 	.word	0x200050d8
    3630:	20004fdc 	.word	0x20004fdc
    3634:	2000504c 	.word	0x2000504c
    3638:	20004f18 	.word	0x20004f18
    363c:	2000383c 	.word	0x2000383c
    3640:	200040a4 	.word	0x200040a4
    3644:	20004f84 	.word	0x20004f84
    3648:	20003170 	.word	0x20003170
    364c:	200038a8 	.word	0x200038a8
    3650:	20003164 	.word	0x20003164
    3654:	20003834 	.word	0x20003834
    3658:	20003158 	.word	0x20003158
    365c:	200037f8 	.word	0x200037f8
    3660:	200050dc 	.word	0x200050dc
    3664:	200050b8 	.word	0x200050b8
    3668:	200050b0 	.word	0x200050b0
    366c:	20005048 	.word	0x20005048
    3670:	200040ac 	.word	0x200040ac
    3674:	20004f60 	.word	0x20004f60
    3678:	2000316c 	.word	0x2000316c
    367c:	200038a4 	.word	0x200038a4
    3680:	20003160 	.word	0x20003160
    3684:	20003830 	.word	0x20003830
    3688:	20003154 	.word	0x20003154
    368c:	200037f4 	.word	0x200037f4
    3690:	200050b4 	.word	0x200050b4
    3694:	20005318 	.word	0x20005318
    3698:	200040b4 	.word	0x200040b4
    369c:	20005050 	.word	0x20005050
    36a0:	20004ffc 	.word	0x20004ffc
    36a4:	20004fa8 	.word	0x20004fa8
    36a8:	20003174 	.word	0x20003174
    36ac:	200038ac 	.word	0x200038ac
    36b0:	20003168 	.word	0x20003168
    36b4:	20003838 	.word	0x20003838
    36b8:	2000315c 	.word	0x2000315c
    36bc:	200037fc 	.word	0x200037fc
    36c0:	20005314 	.word	0x20005314
    36c4:	00000000 	.word	0x00000000

000036c8 <ripPID()>:

void ripPID() {
  // --- Alpha --- //
  float error_alphaRoll = alphaRoll_des - alphaRoll;
    36c8:	4b56      	ldr	r3, [pc, #344]	; (3824 <ripPID()+0x15c>)
    36ca:	ed93 7a00 	vldr	s14, [r3]
    36ce:	4b56      	ldr	r3, [pc, #344]	; (3828 <ripPID()+0x160>)
    36d0:	edd3 7a00 	vldr	s15, [r3]
    36d4:	ee37 7a67 	vsub.f32	s14, s14, s15
  float integral_alphaRoll = integralOld_alpha + error_alphaRoll*dt;
    36d8:	4b54      	ldr	r3, [pc, #336]	; (382c <ripPID()+0x164>)
    36da:	ed93 5a00 	vldr	s10, [r3]
    36de:	4b54      	ldr	r3, [pc, #336]	; (3830 <ripPID()+0x168>)
    36e0:	edd3 7a00 	vldr	s15, [r3]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    36e4:	4b53      	ldr	r3, [pc, #332]	; (3834 <ripPID()+0x16c>)
    36e6:	681b      	ldr	r3, [r3, #0]
    36e8:	f240 4223 	movw	r2, #1059	; 0x423
    36ec:	4293      	cmp	r3, r2
    36ee:	f340 8090 	ble.w	3812 <ripPID()+0x14a>
  float integral_alphaRoll = integralOld_alpha + error_alphaRoll*dt;
    36f2:	ee25 6a07 	vmul.f32	s12, s10, s14
    36f6:	ee36 6a27 	vadd.f32	s12, s12, s15
    integral_alphaRoll = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_alphaRoll = constrain(integral_alphaRoll, -i_limit, i_limit);
    36fa:	4a4f      	ldr	r2, [pc, #316]	; (3838 <ripPID()+0x170>)
    36fc:	edd2 4a00 	vldr	s9, [r2]
    3700:	eef1 5a64 	vneg.f32	s11, s9
    3704:	eeb4 6ae5 	vcmpe.f32	s12, s11
    3708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    370c:	f100 8084 	bmi.w	3818 <ripPID()+0x150>
    3710:	eef4 4a46 	vcmp.f32	s9, s12
    3714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3718:	bf48      	it	mi
    371a:	eeb0 6a64 	vmovmi.f32	s12, s9
  float derivative_alphaRoll = (error_alphaRoll - errorOld_alpha)/dt;

  roll_des = (Kp_alphaRoll*pScaleAlpha*error_alphaRoll 
    371e:	4a47      	ldr	r2, [pc, #284]	; (383c <ripPID()+0x174>)
    3720:	edd2 7a00 	vldr	s15, [r2]
    3724:	4a46      	ldr	r2, [pc, #280]	; (3840 <ripPID()+0x178>)
    3726:	edd2 6a00 	vldr	s13, [r2]
    372a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    372e:	ee67 7a87 	vmul.f32	s15, s15, s14
							+ Ki_alphaRoll*iScaleAlpha*integral_alphaRoll 
    3732:	4a44      	ldr	r2, [pc, #272]	; (3844 <ripPID()+0x17c>)
    3734:	edd2 6a00 	vldr	s13, [r2]
    3738:	4a43      	ldr	r2, [pc, #268]	; (3848 <ripPID()+0x180>)
    373a:	ed92 4a00 	vldr	s8, [r2]
    373e:	ee66 6a84 	vmul.f32	s13, s13, s8
    3742:	ee66 6a86 	vmul.f32	s13, s13, s12
    3746:	ee77 7aa6 	vadd.f32	s15, s15, s13
							- Kd_alphaRoll*dScaleAlpha*derivative_alphaRoll); 
    374a:	4a40      	ldr	r2, [pc, #256]	; (384c <ripPID()+0x184>)
    374c:	edd2 6a00 	vldr	s13, [r2]
    3750:	4a3f      	ldr	r2, [pc, #252]	; (3850 <ripPID()+0x188>)
    3752:	ed92 6a00 	vldr	s12, [r2]
    3756:	ee66 6a86 	vmul.f32	s13, s13, s12
  float derivative_alphaRoll = (error_alphaRoll - errorOld_alpha)/dt;
    375a:	4a3e      	ldr	r2, [pc, #248]	; (3854 <ripPID()+0x18c>)
    375c:	ed92 6a00 	vldr	s12, [r2]
    3760:	ee37 7a46 	vsub.f32	s14, s14, s12
    3764:	ee87 6a05 	vdiv.f32	s12, s14, s10
							- Kd_alphaRoll*dScaleAlpha*derivative_alphaRoll); 
    3768:	ee26 7a86 	vmul.f32	s14, s13, s12
    376c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  roll_des = (Kp_alphaRoll*pScaleAlpha*error_alphaRoll 
    3770:	4a39      	ldr	r2, [pc, #228]	; (3858 <ripPID()+0x190>)
    3772:	edc2 7a00 	vstr	s15, [r2]

  // --- Beta --- //
  float error_betaPitch = betaPitch_des - betaPitch;
    3776:	4a39      	ldr	r2, [pc, #228]	; (385c <ripPID()+0x194>)
    3778:	ed92 7a00 	vldr	s14, [r2]
    377c:	4a38      	ldr	r2, [pc, #224]	; (3860 <ripPID()+0x198>)
    377e:	edd2 7a00 	vldr	s15, [r2]
    3782:	ee37 7a67 	vsub.f32	s14, s14, s15
  float integral_betaPitch = integralOld_beta + error_betaPitch*dt;
    3786:	4a37      	ldr	r2, [pc, #220]	; (3864 <ripPID()+0x19c>)
    3788:	edd2 6a00 	vldr	s13, [r2]
  if (channel_1_pwm < 1060) {   //Don't let integrator build if throttle is too low
    378c:	f240 4223 	movw	r2, #1059	; 0x423
    3790:	4293      	cmp	r3, r2
    3792:	dd44      	ble.n	381e <ripPID()+0x156>
  float integral_betaPitch = integralOld_beta + error_betaPitch*dt;
    3794:	ee65 7a07 	vmul.f32	s15, s10, s14
    3798:	ee77 7aa6 	vadd.f32	s15, s15, s13
    integral_betaPitch = 0;
  }
  //Saturate integrator to prevent unsafe buildup
  integral_betaPitch = constrain(integral_betaPitch, -i_limit, i_limit);
    379c:	eef4 7ae5 	vcmpe.f32	s15, s11
    37a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    37a4:	d408      	bmi.n	37b8 <ripPID()+0xf0>
    37a6:	eef4 4ae7 	vcmpe.f32	s9, s15
    37aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    37ae:	bf54      	ite	pl
    37b0:	eef0 5a67 	vmovpl.f32	s11, s15
    37b4:	eef0 5a64 	vmovmi.f32	s11, s9
  float derivative_betaPitch = (error_betaPitch - errorOld_beta)/dt;

  pitch_des = (Kp_betaPitch*pScaleBeta*error_betaPitch 
    37b8:	4b2b      	ldr	r3, [pc, #172]	; (3868 <ripPID()+0x1a0>)
    37ba:	edd3 7a00 	vldr	s15, [r3]
    37be:	4b2b      	ldr	r3, [pc, #172]	; (386c <ripPID()+0x1a4>)
    37c0:	edd3 6a00 	vldr	s13, [r3]
    37c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    37c8:	ee67 7a87 	vmul.f32	s15, s15, s14
							+ Ki_betaPitch*iScaleBeta*integral_betaPitch 
    37cc:	4b28      	ldr	r3, [pc, #160]	; (3870 <ripPID()+0x1a8>)
    37ce:	edd3 6a00 	vldr	s13, [r3]
    37d2:	4b28      	ldr	r3, [pc, #160]	; (3874 <ripPID()+0x1ac>)
    37d4:	ed93 6a00 	vldr	s12, [r3]
    37d8:	ee66 6a86 	vmul.f32	s13, s13, s12
    37dc:	ee66 6aa5 	vmul.f32	s13, s13, s11
    37e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
							- Kd_betaPitch*dScaleBeta*derivative_betaPitch); 
    37e4:	4b24      	ldr	r3, [pc, #144]	; (3878 <ripPID()+0x1b0>)
    37e6:	edd3 6a00 	vldr	s13, [r3]
    37ea:	4b24      	ldr	r3, [pc, #144]	; (387c <ripPID()+0x1b4>)
    37ec:	ed93 6a00 	vldr	s12, [r3]
    37f0:	ee66 6a86 	vmul.f32	s13, s13, s12
  float derivative_betaPitch = (error_betaPitch - errorOld_beta)/dt;
    37f4:	4b22      	ldr	r3, [pc, #136]	; (3880 <ripPID()+0x1b8>)
    37f6:	ed93 6a00 	vldr	s12, [r3]
    37fa:	ee37 7a46 	vsub.f32	s14, s14, s12
    37fe:	ee87 6a05 	vdiv.f32	s12, s14, s10
							- Kd_betaPitch*dScaleBeta*derivative_betaPitch); 
    3802:	ee26 7a86 	vmul.f32	s14, s13, s12
    3806:	ee77 7ac7 	vsub.f32	s15, s15, s14
  pitch_des = (Kp_betaPitch*pScaleBeta*error_betaPitch 
    380a:	4b1e      	ldr	r3, [pc, #120]	; (3884 <ripPID()+0x1bc>)
    380c:	edc3 7a00 	vstr	s15, [r3]
}
    3810:	4770      	bx	lr
    integral_alphaRoll = 0;
    3812:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 3888 <ripPID()+0x1c0>
    3816:	e770      	b.n	36fa <ripPID()+0x32>
  integral_alphaRoll = constrain(integral_alphaRoll, -i_limit, i_limit);
    3818:	eeb0 6a65 	vmov.f32	s12, s11
    381c:	e77f      	b.n	371e <ripPID()+0x56>
    integral_betaPitch = 0;
    381e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 3888 <ripPID()+0x1c0>
    3822:	e7bb      	b.n	379c <ripPID()+0xd4>
    3824:	20004ed8 	.word	0x20004ed8
    3828:	20004ed4 	.word	0x20004ed4
    382c:	20004fdc 	.word	0x20004fdc
    3830:	20005040 	.word	0x20005040
    3834:	20004f18 	.word	0x20004f18
    3838:	2000383c 	.word	0x2000383c
    383c:	20001c90 	.word	0x20001c90
    3840:	2000389c 	.word	0x2000389c
    3844:	20001c88 	.word	0x20001c88
    3848:	20003828 	.word	0x20003828
    384c:	20001c80 	.word	0x20001c80
    3850:	200037ec 	.word	0x200037ec
    3854:	20004ff4 	.word	0x20004ff4
    3858:	200050e0 	.word	0x200050e0
    385c:	20004eec 	.word	0x20004eec
    3860:	20004ee8 	.word	0x20004ee8
    3864:	20005044 	.word	0x20005044
    3868:	20001c94 	.word	0x20001c94
    386c:	200038a0 	.word	0x200038a0
    3870:	20001c8c 	.word	0x20001c8c
    3874:	2000382c 	.word	0x2000382c
    3878:	20001c84 	.word	0x20001c84
    387c:	200037f0 	.word	0x200037f0
    3880:	20004ff8 	.word	0x20004ff8
    3884:	200050b8 	.word	0x200050b8
    3888:	00000000 	.word	0x00000000

0000388c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3890:	b087      	sub	sp, #28
    3892:	9002      	str	r0, [sp, #8]
    3894:	9103      	str	r1, [sp, #12]
    3896:	461f      	mov	r7, r3
    3898:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    389c:	4b3c      	ldr	r3, [pc, #240]	; (3990 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    389e:	f8d3 9000 	ldr.w	r9, [r3]
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    38a2:	9200      	str	r2, [sp, #0]
    38a4:	2a00      	cmp	r2, #0
    38a6:	d061      	beq.n	396c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe0>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    38a8:	0043      	lsls	r3, r0, #1
    38aa:	b2d9      	uxtb	r1, r3
    38ac:	9101      	str	r1, [sp, #4]
    38ae:	4613      	mov	r3, r2
    38b0:	2a88      	cmp	r2, #136	; 0x88
    38b2:	bf28      	it	cs
    38b4:	2388      	movcs	r3, #136	; 0x88
    38b6:	9304      	str	r3, [sp, #16]
    38b8:	f04f 0800 	mov.w	r8, #0
    int8_t count = 0;
    38bc:	4644      	mov	r4, r8
    38be:	4d35      	ldr	r5, [pc, #212]	; (3994 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x108>)
		transmitting = 1;
    38c0:	f04f 0b01 	mov.w	fp, #1
    38c4:	f88d b017 	strb.w	fp, [sp, #23]
    38c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 3990 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>
    38cc:	e022      	b.n	3914 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x88>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    38ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    38d2:	e006      	b.n	38e2 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x56>
    38d4:	4299      	cmp	r1, r3
    38d6:	d9fa      	bls.n	38ce <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x42>
		return rxBuffer[rxBufferIndex++];
    38d8:	3301      	adds	r3, #1
    38da:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
    38de:	442a      	add	r2, r5
    38e0:	7e93      	ldrb	r3, [r2, #26]
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    38e2:	553b      	strb	r3, [r7, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    38e4:	3401      	adds	r4, #1
    38e6:	b264      	sxtb	r4, r4
		return rxBufferLength - rxBufferIndex;
    38e8:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    38ec:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    38f0:	461a      	mov	r2, r3
    38f2:	4299      	cmp	r1, r3
    38f4:	d007      	beq.n	3906 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    38f6:	2e00      	cmp	r6, #0
    38f8:	d0ec      	beq.n	38d4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
    38fa:	f8da 0000 	ldr.w	r0, [sl]
    38fe:	eba0 0009 	sub.w	r0, r0, r9
    3902:	42b0      	cmp	r0, r6
    3904:	d3e6      	bcc.n	38d4 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3906:	9b04      	ldr	r3, [sp, #16]
    3908:	4498      	add	r8, r3
    390a:	fa5f f888 	uxtb.w	r8, r8
    390e:	9b00      	ldr	r3, [sp, #0]
    3910:	4543      	cmp	r3, r8
    3912:	d92c      	bls.n	396e <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe2>
		txBuffer[0] = (address << 1);
    3914:	9b01      	ldr	r3, [sp, #4]
    3916:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    391a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    391e:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		txBufferLength = 1;
    3922:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
                Wire.write(regAddr);
    3926:	9903      	ldr	r1, [sp, #12]
    3928:	4628      	mov	r0, r5
    392a:	f000 fb2a 	bl	3f82 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    392e:	4659      	mov	r1, fp
    3930:	4628      	mov	r0, r5
    3932:	f000 fc53 	bl	41dc <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    3936:	9b01      	ldr	r3, [sp, #4]
    3938:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    393c:	f885 b130 	strb.w	fp, [r5, #304]	; 0x130
		txBufferLength = 1;
    3940:	f885 b12f 	strb.w	fp, [r5, #303]	; 0x12f
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3944:	9b00      	ldr	r3, [sp, #0]
    3946:	eba3 0208 	sub.w	r2, r3, r8
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    394a:	2a88      	cmp	r2, #136	; 0x88
    394c:	bfa8      	it	ge
    394e:	2288      	movge	r2, #136	; 0x88
		return requestFrom(address, quantity, (uint8_t)1);
    3950:	465b      	mov	r3, fp
    3952:	b2d2      	uxtb	r2, r2
    3954:	9902      	ldr	r1, [sp, #8]
    3956:	4628      	mov	r0, r5
    3958:	f000 fcbc 	bl	42d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    395c:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3960:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3964:	461a      	mov	r2, r3
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3966:	4299      	cmp	r1, r3
    3968:	d1c5      	bne.n	38f6 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x6a>
    396a:	e7cc      	b.n	3906 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    int8_t count = 0;
    396c:	2400      	movs	r4, #0
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    396e:	b156      	cbz	r6, 3986 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3970:	4b07      	ldr	r3, [pc, #28]	; (3990 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	eba3 0309 	sub.w	r3, r3, r9
    3978:	42b3      	cmp	r3, r6
    397a:	d304      	bcc.n	3986 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    397c:	9b00      	ldr	r3, [sp, #0]
    397e:	429c      	cmp	r4, r3
    3980:	bfb8      	it	lt
    3982:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    3986:	4620      	mov	r0, r4
    3988:	b007      	add	sp, #28
    398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    398e:	bf00      	nop
    3990:	200052f0 	.word	0x200052f0
    3994:	20004704 	.word	0x20004704

00003998 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    3998:	b500      	push	{lr}
    399a:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
    399c:	9300      	str	r3, [sp, #0]
    399e:	4613      	mov	r3, r2
    39a0:	2201      	movs	r2, #1
    39a2:	f7ff ff73 	bl	388c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    39a6:	b003      	add	sp, #12
    39a8:	f85d fb04 	ldr.w	pc, [sp], #4

000039ac <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    39ac:	b530      	push	{r4, r5, lr}
    39ae:	b083      	sub	sp, #12
    39b0:	4614      	mov	r4, r2
    39b2:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    39b4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    39b8:	f10d 0207 	add.w	r2, sp, #7
    39bc:	f7ff ffec 	bl	3998 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    39c0:	b160      	cbz	r0, 39dc <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x30>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    39c2:	1b62      	subs	r2, r4, r5
    39c4:	3201      	adds	r2, #1
    39c6:	2101      	movs	r1, #1
    39c8:	fa01 f305 	lsl.w	r3, r1, r5
    39cc:	3b01      	subs	r3, #1
    39ce:	4093      	lsls	r3, r2
        b &= mask;
    39d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
        b >>= (bitStart - length + 1);
    39d4:	400b      	ands	r3, r1
    39d6:	4113      	asrs	r3, r2
    39d8:	9a06      	ldr	r2, [sp, #24]
    39da:	7013      	strb	r3, [r2, #0]
}
    39dc:	b003      	add	sp, #12
    39de:	bd30      	pop	{r4, r5, pc}

000039e0 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    39e0:	b570      	push	{r4, r5, r6, lr}
    39e2:	4615      	mov	r5, r2
    39e4:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    39e6:	4a10      	ldr	r2, [pc, #64]	; (3a28 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    39e8:	0040      	lsls	r0, r0, #1
    39ea:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		transmitting = 1;
    39ee:	2301      	movs	r3, #1
    39f0:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
		txBufferLength = 1;
    39f4:	f882 312f 	strb.w	r3, [r2, #303]	; 0x12f
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
	#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    39f8:	4610      	mov	r0, r2
    39fa:	f000 fac2 	bl	3f82 <TwoWire::write(unsigned char)>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    39fe:	b15d      	cbz	r5, 3a18 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x38>
    3a00:	1e74      	subs	r4, r6, #1
    3a02:	3d01      	subs	r5, #1
    3a04:	fa56 f585 	uxtab	r5, r6, r5
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
			#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
			Wire.write((uint8_t) data[i]);
    3a08:	4e07      	ldr	r6, [pc, #28]	; (3a28 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3a0a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3a0e:	4630      	mov	r0, r6
    3a10:	f000 fab7 	bl	3f82 <TwoWire::write(unsigned char)>
    for (uint8_t i = 0; i < length; i++) {
    3a14:	42ac      	cmp	r4, r5
    3a16:	d1f8      	bne.n	3a0a <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x2a>
		return endTransmission(1);
    3a18:	2101      	movs	r1, #1
    3a1a:	4803      	ldr	r0, [pc, #12]	; (3a28 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3a1c:	f000 fbde 	bl	41dc <TwoWire::endTransmission(unsigned char)>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
    3a20:	fab0 f080 	clz	r0, r0
    3a24:	0940      	lsrs	r0, r0, #5
    3a26:	bd70      	pop	{r4, r5, r6, pc}
    3a28:	20004704 	.word	0x20004704

00003a2c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    3a2c:	b500      	push	{lr}
    3a2e:	b083      	sub	sp, #12
    3a30:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
    3a34:	f10d 0307 	add.w	r3, sp, #7
    3a38:	2201      	movs	r2, #1
    3a3a:	f7ff ffd1 	bl	39e0 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    3a3e:	b003      	add	sp, #12
    3a40:	f85d fb04 	ldr.w	pc, [sp], #4

00003a44 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    3a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a46:	b083      	sub	sp, #12
    3a48:	4604      	mov	r4, r0
    3a4a:	460d      	mov	r5, r1
    3a4c:	4616      	mov	r6, r2
    3a4e:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
    3a50:	4b0c      	ldr	r3, [pc, #48]	; (3a84 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>)
    3a52:	881b      	ldrh	r3, [r3, #0]
    3a54:	f10d 0207 	add.w	r2, sp, #7
    3a58:	f7ff ff9e 	bl	3998 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3a5c:	b15f      	cbz	r7, 3a76 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    3a5e:	2301      	movs	r3, #1
    3a60:	40b3      	lsls	r3, r6
    3a62:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3a66:	431a      	orrs	r2, r3
    3a68:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
    3a6a:	4629      	mov	r1, r5
    3a6c:	4620      	mov	r0, r4
    3a6e:	f7ff ffdd 	bl	3a2c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
}
    3a72:	b003      	add	sp, #12
    3a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3a76:	2301      	movs	r3, #1
    3a78:	40b3      	lsls	r3, r6
    3a7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3a7e:	ea22 0203 	bic.w	r2, r2, r3
    3a82:	e7f2      	b.n	3a6a <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    3a84:	200038d2 	.word	0x200038d2

00003a88 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    3a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a8a:	b083      	sub	sp, #12
    3a8c:	4605      	mov	r5, r0
    3a8e:	460e      	mov	r6, r1
    3a90:	4614      	mov	r4, r2
    3a92:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
    3a94:	4b0f      	ldr	r3, [pc, #60]	; (3ad4 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>)
    3a96:	881b      	ldrh	r3, [r3, #0]
    3a98:	f10d 0207 	add.w	r2, sp, #7
    3a9c:	f7ff ff7c 	bl	3998 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3aa0:	b910      	cbnz	r0, 3aa8 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
        return false;
    3aa2:	2000      	movs	r0, #0
}
    3aa4:	b003      	add	sp, #12
    3aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3aa8:	1be2      	subs	r2, r4, r7
    3aaa:	3201      	adds	r2, #1
    3aac:	2101      	movs	r1, #1
    3aae:	fa01 f307 	lsl.w	r3, r1, r7
    3ab2:	3b01      	subs	r3, #1
    3ab4:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
    3ab6:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3aba:	4091      	lsls	r1, r2
    3abc:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
    3abe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3ac2:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
    3ac6:	400b      	ands	r3, r1
        return writeByte(devAddr, regAddr, b);
    3ac8:	431a      	orrs	r2, r3
    3aca:	4631      	mov	r1, r6
    3acc:	4628      	mov	r0, r5
    3ace:	f7ff ffad 	bl	3a2c <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
    3ad2:	e7e7      	b.n	3aa4 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    3ad4:	200038d2 	.word	0x200038d2

00003ad8 <MPU6050::MPU6050(unsigned char)>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
    3ad8:	7001      	strb	r1, [r0, #0]
}
    3ada:	4770      	bx	lr

00003adc <MPU6050::setFullScaleGyroRange(unsigned char)>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    3adc:	b500      	push	{lr}
    3ade:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    3ae0:	7800      	ldrb	r0, [r0, #0]
    3ae2:	9100      	str	r1, [sp, #0]
    3ae4:	2302      	movs	r3, #2
    3ae6:	2204      	movs	r2, #4
    3ae8:	211b      	movs	r1, #27
    3aea:	f7ff ffcd 	bl	3a88 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3aee:	b003      	add	sp, #12
    3af0:	f85d fb04 	ldr.w	pc, [sp], #4

00003af4 <MPU6050::setFullScaleAccelRange(unsigned char)>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    3af4:	b500      	push	{lr}
    3af6:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    3af8:	7800      	ldrb	r0, [r0, #0]
    3afa:	9100      	str	r1, [sp, #0]
    3afc:	2302      	movs	r3, #2
    3afe:	2204      	movs	r2, #4
    3b00:	211c      	movs	r1, #28
    3b02:	f7ff ffc1 	bl	3a88 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3b06:	b003      	add	sp, #12
    3b08:	f85d fb04 	ldr.w	pc, [sp], #4

00003b0c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    3b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b0e:	b083      	sub	sp, #12
    3b10:	4604      	mov	r4, r0
    3b12:	460f      	mov	r7, r1
    3b14:	4616      	mov	r6, r2
    3b16:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
    3b18:	4603      	mov	r3, r0
    3b1a:	f813 0b01 	ldrb.w	r0, [r3], #1
    3b1e:	4a15      	ldr	r2, [pc, #84]	; (3b74 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)+0x68>)
    3b20:	8812      	ldrh	r2, [r2, #0]
    3b22:	9200      	str	r2, [sp, #0]
    3b24:	220e      	movs	r2, #14
    3b26:	213b      	movs	r1, #59	; 0x3b
    3b28:	f7ff feb0 	bl	388c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    3b2c:	7862      	ldrb	r2, [r4, #1]
    3b2e:	78a3      	ldrb	r3, [r4, #2]
    3b30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b34:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    3b36:	78e2      	ldrb	r2, [r4, #3]
    3b38:	7923      	ldrb	r3, [r4, #4]
    3b3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b3e:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    3b40:	7962      	ldrb	r2, [r4, #5]
    3b42:	79a3      	ldrb	r3, [r4, #6]
    3b44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b48:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    3b4a:	7a62      	ldrb	r2, [r4, #9]
    3b4c:	7aa3      	ldrb	r3, [r4, #10]
    3b4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b52:	9a08      	ldr	r2, [sp, #32]
    3b54:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    3b56:	7ae2      	ldrb	r2, [r4, #11]
    3b58:	7b23      	ldrb	r3, [r4, #12]
    3b5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3b60:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    3b62:	7b62      	ldrb	r2, [r4, #13]
    3b64:	7ba3      	ldrb	r3, [r4, #14]
    3b66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3b6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b6c:	8013      	strh	r3, [r2, #0]
}
    3b6e:	b003      	add	sp, #12
    3b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b72:	bf00      	nop
    3b74:	200038d2 	.word	0x200038d2

00003b78 <MPU6050::setSleepEnabled(bool)>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    3b78:	b508      	push	{r3, lr}
    3b7a:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    3b7c:	2206      	movs	r2, #6
    3b7e:	216b      	movs	r1, #107	; 0x6b
    3b80:	7800      	ldrb	r0, [r0, #0]
    3b82:	f7ff ff5f 	bl	3a44 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3b86:	bd08      	pop	{r3, pc}

00003b88 <MPU6050::setClockSource(unsigned char)>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    3b88:	b500      	push	{lr}
    3b8a:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    3b8c:	7800      	ldrb	r0, [r0, #0]
    3b8e:	9100      	str	r1, [sp, #0]
    3b90:	2303      	movs	r3, #3
    3b92:	2202      	movs	r2, #2
    3b94:	216b      	movs	r1, #107	; 0x6b
    3b96:	f7ff ff77 	bl	3a88 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3b9a:	b003      	add	sp, #12
    3b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba0 <MPU6050::initialize()>:
void MPU6050::initialize() {
    3ba0:	b510      	push	{r4, lr}
    3ba2:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    3ba4:	2101      	movs	r1, #1
    3ba6:	f7ff ffef 	bl	3b88 <MPU6050::setClockSource(unsigned char)>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    3baa:	2100      	movs	r1, #0
    3bac:	4620      	mov	r0, r4
    3bae:	f7ff ff95 	bl	3adc <MPU6050::setFullScaleGyroRange(unsigned char)>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    3bb2:	2100      	movs	r1, #0
    3bb4:	4620      	mov	r0, r4
    3bb6:	f7ff ff9d 	bl	3af4 <MPU6050::setFullScaleAccelRange(unsigned char)>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    3bba:	2100      	movs	r1, #0
    3bbc:	4620      	mov	r0, r4
    3bbe:	f7ff ffdb 	bl	3b78 <MPU6050::setSleepEnabled(bool)>
}
    3bc2:	bd10      	pop	{r4, pc}

00003bc4 <MPU6050::getDeviceID()>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    3bc4:	b510      	push	{r4, lr}
    3bc6:	b082      	sub	sp, #8
    3bc8:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    3bca:	4603      	mov	r3, r0
    3bcc:	f813 0b01 	ldrb.w	r0, [r3], #1
    3bd0:	4a05      	ldr	r2, [pc, #20]	; (3be8 <MPU6050::getDeviceID()+0x24>)
    3bd2:	8812      	ldrh	r2, [r2, #0]
    3bd4:	9201      	str	r2, [sp, #4]
    3bd6:	9300      	str	r3, [sp, #0]
    3bd8:	2306      	movs	r3, #6
    3bda:	461a      	mov	r2, r3
    3bdc:	2175      	movs	r1, #117	; 0x75
    3bde:	f7ff fee5 	bl	39ac <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    return buffer[0];
}
    3be2:	7860      	ldrb	r0, [r4, #1]
    3be4:	b002      	add	sp, #8
    3be6:	bd10      	pop	{r4, pc}
    3be8:	200038d2 	.word	0x200038d2

00003bec <MPU6050::testConnection()>:
bool MPU6050::testConnection() {
    3bec:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
    3bee:	f7ff ffe9 	bl	3bc4 <MPU6050::getDeviceID()>
}
    3bf2:	2834      	cmp	r0, #52	; 0x34
    3bf4:	bf14      	ite	ne
    3bf6:	2000      	movne	r0, #0
    3bf8:	2001      	moveq	r0, #1
    3bfa:	bd08      	pop	{r3, pc}

00003bfc <SBUS::SBUS(HardwareSerial&)>:
	uint8_t PACKET[25];
	volatile int SENDINDEX;
	void sendByte();
#endif
/* SBUS object, input the serial bus */
SBUS::SBUS(HardwareSerial& bus)
    3bfc:	b510      	push	{r4, lr}
    3bfe:	4a10      	ldr	r2, [pc, #64]	; (3c40 <SBUS::SBUS(HardwareSerial&)+0x44>)
    3c00:	6002      	str	r2, [r0, #0]
    3c02:	f04f 0e0f 	mov.w	lr, #15
    3c06:	f880 e004 	strb.w	lr, [r0, #4]
    3c0a:	f04f 0c00 	mov.w	ip, #0
    3c0e:	f880 c005 	strb.w	ip, [r0, #5]
    3c12:	2204      	movs	r2, #4
    3c14:	7182      	strb	r2, [r0, #6]
    3c16:	f880 e007 	strb.w	lr, [r0, #7]
    3c1a:	f641 3458 	movw	r4, #7000	; 0x1b58
    3c1e:	6084      	str	r4, [r0, #8]
    3c20:	f880 c00d 	strb.w	ip, [r0, #13]
    3c24:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    3c28:	2208      	movs	r2, #8
    3c2a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    3c2e:	22ac      	movs	r2, #172	; 0xac
    3c30:	8542      	strh	r2, [r0, #42]	; 0x2a
    3c32:	f240 7213 	movw	r2, #1811	; 0x713
    3c36:	8582      	strh	r2, [r0, #44]	; 0x2c
{
	_bus = &bus;
    3c38:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
    3c3c:	bd10      	pop	{r4, pc}
    3c3e:	bf00      	nop
    3c40:	000186a0 	.word	0x000186a0

00003c44 <SBUS::~SBUS()>:
		}
	}
}

/* destructor, free dynamically allocated memory */
SBUS::~SBUS()
    3c44:	b538      	push	{r3, r4, r5, lr}
    3c46:	4605      	mov	r5, r0
{
	if (_readCoeff) {
    3c48:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    3c4c:	b183      	cbz	r3, 3c70 <SBUS::~SBUS()+0x2c>
    3c4e:	2400      	movs	r4, #0
    3c50:	e004      	b.n	3c5c <SBUS::~SBUS()+0x18>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_readCoeff[i]) {
				free(_readCoeff[i]);
    3c52:	f00c ff13 	bl	10a7c <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    3c56:	3404      	adds	r4, #4
    3c58:	2c40      	cmp	r4, #64	; 0x40
    3c5a:	d005      	beq.n	3c68 <SBUS::~SBUS()+0x24>
			if (_readCoeff[i]) {
    3c5c:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    3c60:	5918      	ldr	r0, [r3, r4]
    3c62:	2800      	cmp	r0, #0
    3c64:	d1f5      	bne.n	3c52 <SBUS::~SBUS()+0xe>
    3c66:	e7f6      	b.n	3c56 <SBUS::~SBUS()+0x12>
			}
		}
		free(_readCoeff);
    3c68:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    3c6c:	f00c ff06 	bl	10a7c <free>
	}
	if (_writeCoeff) {
    3c70:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    3c74:	b183      	cbz	r3, 3c98 <SBUS::~SBUS()+0x54>
    3c76:	2400      	movs	r4, #0
    3c78:	e004      	b.n	3c84 <SBUS::~SBUS()+0x40>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_writeCoeff[i]) {
				free(_writeCoeff[i]);
    3c7a:	f00c feff 	bl	10a7c <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    3c7e:	3404      	adds	r4, #4
    3c80:	2c40      	cmp	r4, #64	; 0x40
    3c82:	d005      	beq.n	3c90 <SBUS::~SBUS()+0x4c>
			if (_writeCoeff[i]) {
    3c84:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    3c88:	5918      	ldr	r0, [r3, r4]
    3c8a:	2800      	cmp	r0, #0
    3c8c:	d1f5      	bne.n	3c7a <SBUS::~SBUS()+0x36>
    3c8e:	e7f6      	b.n	3c7e <SBUS::~SBUS()+0x3a>
			}
		}
		free(_writeCoeff);
    3c90:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    3c94:	f00c fef2 	bl	10a7c <free>
	}
}
    3c98:	4628      	mov	r0, r5
    3c9a:	bd38      	pop	{r3, r4, r5, pc}

00003c9c <SBUS::parse()>:

/* parse the SBUS data */
bool SBUS::parse()
{
    3c9c:	b570      	push	{r4, r5, r6, lr}
    3c9e:	4604      	mov	r4, r0
	// reset the parser state if too much time has passed
	static elapsedMicros _sbusTime = 0;
    3ca0:	4b2b      	ldr	r3, [pc, #172]	; (3d50 <SBUS::parse()+0xb4>)
    3ca2:	681b      	ldr	r3, [r3, #0]
    3ca4:	f013 0f01 	tst.w	r3, #1
    3ca8:	d00c      	beq.n	3cc4 <SBUS::parse()+0x28>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    3caa:	f009 f8e3 	bl	ce74 <micros>
    3cae:	4b29      	ldr	r3, [pc, #164]	; (3d54 <SBUS::parse()+0xb8>)
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	1ac0      	subs	r0, r0, r3
	if (_sbusTime > SBUS_TIMEOUT_US) {_parserState = 0;}
    3cb4:	68a3      	ldr	r3, [r4, #8]
    3cb6:	4283      	cmp	r3, r0
    3cb8:	d201      	bcs.n	3cbe <SBUS::parse()+0x22>
    3cba:	2300      	movs	r3, #0
    3cbc:	7323      	strb	r3, [r4, #12]
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    3cbe:	4d25      	ldr	r5, [pc, #148]	; (3d54 <SBUS::parse()+0xb8>)
		_sbusTime = 0;
		_curByte = _bus->read();
		// find the header
		if (_parserState == 0) {
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
					_parserState++;
    3cc0:	2601      	movs	r6, #1
    3cc2:	e011      	b.n	3ce8 <SBUS::parse()+0x4c>
	elapsedMicros(unsigned long val) { us = micros() - val; }
    3cc4:	f009 f8d6 	bl	ce74 <micros>
    3cc8:	4b22      	ldr	r3, [pc, #136]	; (3d54 <SBUS::parse()+0xb8>)
    3cca:	6018      	str	r0, [r3, #0]
	static elapsedMicros _sbusTime = 0;
    3ccc:	4b20      	ldr	r3, [pc, #128]	; (3d50 <SBUS::parse()+0xb4>)
    3cce:	2201      	movs	r2, #1
    3cd0:	601a      	str	r2, [r3, #0]
    3cd2:	e7ea      	b.n	3caa <SBUS::parse()+0xe>
				} else {
					_parserState = 0;
				}
		} else {
			// strip off the data
			if ((_parserState-1) < _payloadSize) {
    3cd4:	2b18      	cmp	r3, #24
    3cd6:	d803      	bhi.n	3ce0 <SBUS::parse()+0x44>
				_payload[_parserState-1] = _curByte;
    3cd8:	18e2      	adds	r2, r4, r3
    3cda:	7390      	strb	r0, [r2, #14]
				_parserState++;
    3cdc:	3301      	adds	r3, #1
    3cde:	7323      	strb	r3, [r4, #12]
			}
			// check the end byte
			if ((_parserState-1) == _payloadSize) {
    3ce0:	7b23      	ldrb	r3, [r4, #12]
    3ce2:	2b19      	cmp	r3, #25
    3ce4:	d022      	beq.n	3d2c <SBUS::parse()+0x90>
					_parserState = 0;
					return false;
				}
			}
		}
		_prevByte = _curByte;
    3ce6:	7360      	strb	r0, [r4, #13]
	while (_bus->available() > 0) {
    3ce8:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    3cec:	6803      	ldr	r3, [r0, #0]
    3cee:	691b      	ldr	r3, [r3, #16]
    3cf0:	4798      	blx	r3
    3cf2:	2800      	cmp	r0, #0
    3cf4:	dd29      	ble.n	3d4a <SBUS::parse()+0xae>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    3cf6:	f009 f8bd 	bl	ce74 <micros>
    3cfa:	6028      	str	r0, [r5, #0]
		_curByte = _bus->read();
    3cfc:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    3d00:	6803      	ldr	r3, [r0, #0]
    3d02:	695b      	ldr	r3, [r3, #20]
    3d04:	4798      	blx	r3
    3d06:	b2c0      	uxtb	r0, r0
    3d08:	73a0      	strb	r0, [r4, #14]
		if (_parserState == 0) {
    3d0a:	7b23      	ldrb	r3, [r4, #12]
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d1e1      	bne.n	3cd4 <SBUS::parse()+0x38>
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
    3d10:	7923      	ldrb	r3, [r4, #4]
    3d12:	4283      	cmp	r3, r0
    3d14:	d1e7      	bne.n	3ce6 <SBUS::parse()+0x4a>
    3d16:	7b63      	ldrb	r3, [r4, #13]
    3d18:	7962      	ldrb	r2, [r4, #5]
    3d1a:	429a      	cmp	r2, r3
    3d1c:	d004      	beq.n	3d28 <SBUS::parse()+0x8c>
    3d1e:	79e1      	ldrb	r1, [r4, #7]
    3d20:	79a2      	ldrb	r2, [r4, #6]
    3d22:	400b      	ands	r3, r1
    3d24:	429a      	cmp	r2, r3
    3d26:	d1de      	bne.n	3ce6 <SBUS::parse()+0x4a>
					_parserState++;
    3d28:	7326      	strb	r6, [r4, #12]
    3d2a:	e7dc      	b.n	3ce6 <SBUS::parse()+0x4a>
				if ((_curByte == _sbusFooter) || ((_curByte & _sbus2Mask) == _sbus2Footer)) {
    3d2c:	7963      	ldrb	r3, [r4, #5]
    3d2e:	4283      	cmp	r3, r0
    3d30:	d007      	beq.n	3d42 <SBUS::parse()+0xa6>
    3d32:	79e2      	ldrb	r2, [r4, #7]
    3d34:	79a3      	ldrb	r3, [r4, #6]
    3d36:	4010      	ands	r0, r2
    3d38:	4283      	cmp	r3, r0
    3d3a:	d002      	beq.n	3d42 <SBUS::parse()+0xa6>
					_parserState = 0;
    3d3c:	2000      	movs	r0, #0
    3d3e:	7320      	strb	r0, [r4, #12]
					return false;
    3d40:	e004      	b.n	3d4c <SBUS::parse()+0xb0>
					_parserState = 0;
    3d42:	2300      	movs	r3, #0
    3d44:	7323      	strb	r3, [r4, #12]
					return true;
    3d46:	2001      	movs	r0, #1
    3d48:	e000      	b.n	3d4c <SBUS::parse()+0xb0>
	}
	// return false if a partial packet
	return false;
    3d4a:	2000      	movs	r0, #0
}
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
    3d4e:	bf00      	nop
    3d50:	20004ac4 	.word	0x20004ac4
    3d54:	20004bb4 	.word	0x20004bb4

00003d58 <SBUS::read(unsigned short*, bool*, bool*)>:
{
    3d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5a:	4604      	mov	r4, r0
    3d5c:	460d      	mov	r5, r1
    3d5e:	4616      	mov	r6, r2
    3d60:	461f      	mov	r7, r3
	if (parse()) {
    3d62:	f7ff ff9b 	bl	3c9c <SBUS::parse()>
    3d66:	4602      	mov	r2, r0
    3d68:	2800      	cmp	r0, #0
    3d6a:	f000 80a5 	beq.w	3eb8 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
		if (channels) {
    3d6e:	2d00      	cmp	r5, #0
    3d70:	f000 808e 	beq.w	3e90 <SBUS::read(unsigned short*, bool*, bool*)+0x138>
			channels[0]  = (uint16_t) ((_payload[0]    |_payload[1] <<8)                     & 0x07FF);
    3d74:	7c21      	ldrb	r1, [r4, #16]
    3d76:	7be3      	ldrb	r3, [r4, #15]
    3d78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3d7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d80:	802b      	strh	r3, [r5, #0]
			channels[1]  = (uint16_t) ((_payload[1]>>3 |_payload[2] <<5)                     & 0x07FF);
    3d82:	7c21      	ldrb	r1, [r4, #16]
    3d84:	7c63      	ldrb	r3, [r4, #17]
    3d86:	015b      	lsls	r3, r3, #5
    3d88:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    3d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3d90:	806b      	strh	r3, [r5, #2]
			channels[2]  = (uint16_t) ((_payload[2]>>6 |_payload[3] <<2 |_payload[4]<<10)  	 & 0x07FF);
    3d92:	7ca1      	ldrb	r1, [r4, #18]
    3d94:	7ce3      	ldrb	r3, [r4, #19]
    3d96:	029b      	lsls	r3, r3, #10
    3d98:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    3d9c:	7c61      	ldrb	r1, [r4, #17]
    3d9e:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    3da2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3da6:	80ab      	strh	r3, [r5, #4]
			channels[3]  = (uint16_t) ((_payload[4]>>1 |_payload[5] <<7)                     & 0x07FF);
    3da8:	7ce1      	ldrb	r1, [r4, #19]
    3daa:	7d23      	ldrb	r3, [r4, #20]
    3dac:	01db      	lsls	r3, r3, #7
    3dae:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    3db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3db6:	80eb      	strh	r3, [r5, #6]
			channels[4]  = (uint16_t) ((_payload[5]>>4 |_payload[6] <<4)                     & 0x07FF);
    3db8:	7d21      	ldrb	r1, [r4, #20]
    3dba:	7d63      	ldrb	r3, [r4, #21]
    3dbc:	011b      	lsls	r3, r3, #4
    3dbe:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    3dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3dc6:	812b      	strh	r3, [r5, #8]
			channels[5]  = (uint16_t) ((_payload[6]>>7 |_payload[7] <<1 |_payload[8]<<9)   	 & 0x07FF);
    3dc8:	7da1      	ldrb	r1, [r4, #22]
    3dca:	7de3      	ldrb	r3, [r4, #23]
    3dcc:	025b      	lsls	r3, r3, #9
    3dce:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3dd2:	7d61      	ldrb	r1, [r4, #21]
    3dd4:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    3dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3ddc:	816b      	strh	r3, [r5, #10]
			channels[6]  = (uint16_t) ((_payload[8]>>2 |_payload[9] <<6)                     & 0x07FF);
    3dde:	7de1      	ldrb	r1, [r4, #23]
    3de0:	7e23      	ldrb	r3, [r4, #24]
    3de2:	019b      	lsls	r3, r3, #6
    3de4:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    3de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3dec:	81ab      	strh	r3, [r5, #12]
			channels[7]  = (uint16_t) ((_payload[9]>>5 |_payload[10]<<3)                     & 0x07FF);
    3dee:	7e21      	ldrb	r1, [r4, #24]
    3df0:	7e63      	ldrb	r3, [r4, #25]
    3df2:	00db      	lsls	r3, r3, #3
    3df4:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    3df8:	81eb      	strh	r3, [r5, #14]
			channels[8]  = (uint16_t) ((_payload[11]   |_payload[12]<<8)                     & 0x07FF);
    3dfa:	7ee1      	ldrb	r1, [r4, #27]
    3dfc:	7ea3      	ldrb	r3, [r4, #26]
    3dfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e06:	822b      	strh	r3, [r5, #16]
			channels[9]  = (uint16_t) ((_payload[12]>>3|_payload[13]<<5)                     & 0x07FF);
    3e08:	7ee1      	ldrb	r1, [r4, #27]
    3e0a:	7f23      	ldrb	r3, [r4, #28]
    3e0c:	015b      	lsls	r3, r3, #5
    3e0e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    3e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e16:	826b      	strh	r3, [r5, #18]
			channels[10] = (uint16_t) ((_payload[13]>>6|_payload[14]<<2 |_payload[15]<<10) 	 & 0x07FF);
    3e18:	7f61      	ldrb	r1, [r4, #29]
    3e1a:	7fa3      	ldrb	r3, [r4, #30]
    3e1c:	029b      	lsls	r3, r3, #10
    3e1e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    3e22:	7f21      	ldrb	r1, [r4, #28]
    3e24:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    3e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e2c:	82ab      	strh	r3, [r5, #20]
			channels[11] = (uint16_t) ((_payload[15]>>1|_payload[16]<<7)                     & 0x07FF);
    3e2e:	7fa1      	ldrb	r1, [r4, #30]
    3e30:	7fe3      	ldrb	r3, [r4, #31]
    3e32:	01db      	lsls	r3, r3, #7
    3e34:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    3e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e3c:	82eb      	strh	r3, [r5, #22]
			channels[12] = (uint16_t) ((_payload[16]>>4|_payload[17]<<4)                     & 0x07FF);
    3e3e:	7fe1      	ldrb	r1, [r4, #31]
    3e40:	f894 3020 	ldrb.w	r3, [r4, #32]
    3e44:	011b      	lsls	r3, r3, #4
    3e46:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    3e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e4e:	832b      	strh	r3, [r5, #24]
			channels[13] = (uint16_t) ((_payload[17]>>7|_payload[18]<<1 |_payload[19]<<9)  	 & 0x07FF);
    3e50:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    3e54:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    3e58:	025b      	lsls	r3, r3, #9
    3e5a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    3e5e:	f894 1020 	ldrb.w	r1, [r4, #32]
    3e62:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    3e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e6a:	836b      	strh	r3, [r5, #26]
			channels[14] = (uint16_t) ((_payload[19]>>2|_payload[20]<<6)                     & 0x07FF);
    3e6c:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    3e70:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    3e74:	019b      	lsls	r3, r3, #6
    3e76:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    3e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
    3e7e:	83ab      	strh	r3, [r5, #28]
			channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
    3e80:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    3e84:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    3e88:	00db      	lsls	r3, r3, #3
    3e8a:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    3e8e:	83eb      	strh	r3, [r5, #30]
		if (lostFrame) {
    3e90:	b147      	cbz	r7, 3ea4 <SBUS::read(unsigned short*, bool*, bool*)+0x14c>
    	if (_payload[22] & _sbusLostFrame) {
    3e92:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    3e96:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    3e9a:	4219      	tst	r1, r3
      	*lostFrame = true;
    3e9c:	bf14      	ite	ne
    3e9e:	2301      	movne	r3, #1
				*lostFrame = false;
    3ea0:	2300      	moveq	r3, #0
    3ea2:	703b      	strb	r3, [r7, #0]
		if (failsafe) {
    3ea4:	b146      	cbz	r6, 3eb8 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
    	if (_payload[22] & _sbusFailSafe) {
    3ea6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    3eaa:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    3eae:	4219      	tst	r1, r3
      		*failsafe = true;
    3eb0:	bf14      	ite	ne
    3eb2:	2301      	movne	r3, #1
      		*failsafe = false;
    3eb4:	2300      	moveq	r3, #0
    3eb6:	7033      	strb	r3, [r6, #0]
}
    3eb8:	4610      	mov	r0, r2
    3eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003ebc <SBUS::scaleBias(unsigned char)>:

/* compute scale factor and bias from end points */
void SBUS::scaleBias(uint8_t channel)
{
	_sbusScale[channel] = 2.0f / ((float)_sbusMax[channel] - (float)_sbusMin[channel]);
    3ebc:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    3ec0:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    3ec2:	ee07 2a10 	vmov	s14, r2
    3ec6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3eca:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    3ece:	ee07 3a90 	vmov	s15, r3
    3ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3eda:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    3ede:	eec6 6a27 	vdiv.f32	s13, s12, s15
    3ee2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3ee6:	edc0 6a1c 	vstr	s13, [r0, #112]	; 0x70
	_sbusBias[channel] = -1.0f*((float)_sbusMin[channel] + ((float)_sbusMax[channel] - (float)_sbusMin[channel]) / 2.0f) * _sbusScale[channel];
    3eea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    3eee:	ee67 7a86 	vmul.f32	s15, s15, s12
    3ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
    3ef6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    3efa:	edc0 7a2c 	vstr	s15, [r0, #176]	; 0xb0
}
    3efe:	4770      	bx	lr

00003f00 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>:
{
    3f00:	b508      	push	{r3, lr}
	_sbusMin[channel] = min;
    3f02:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
    3f06:	f8ac 202e 	strh.w	r2, [ip, #46]	; 0x2e
	_sbusMax[channel] = max;
    3f0a:	f8ac 304e 	strh.w	r3, [ip, #78]	; 0x4e
	scaleBias(channel);
    3f0e:	f7ff ffd5 	bl	3ebc <SBUS::scaleBias(unsigned char)>
}
    3f12:	bd08      	pop	{r3, pc}

00003f14 <SBUS::begin()>:
{
    3f14:	b538      	push	{r3, r4, r5, lr}
    3f16:	4605      	mov	r5, r0
	_parserState = 0;
    3f18:	2400      	movs	r4, #0
    3f1a:	7304      	strb	r4, [r0, #12]
		setEndPoints(i,_defaultMin,_defaultMax);
    3f1c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3f1e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    3f20:	b2e1      	uxtb	r1, r4
    3f22:	4628      	mov	r0, r5
    3f24:	f7ff ffec 	bl	3f00 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>
	for (uint8_t i = 0; i < _numChannels; i++) {
    3f28:	3401      	adds	r4, #1
    3f2a:	2c10      	cmp	r4, #16
    3f2c:	d1f6      	bne.n	3f1c <SBUS::begin()+0x8>
		_bus->begin(_sbusBaud,SERIAL_8E2_RXINV_TXINV);
    3f2e:	f44f 729b 	mov.w	r2, #310	; 0x136
    3f32:	6829      	ldr	r1, [r5, #0]
    3f34:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    3f38:	f008 f8b2 	bl	c0a0 <HardwareSerial::begin(unsigned long, unsigned short)>
}
    3f3c:	bd38      	pop	{r3, r4, r5, pc}

00003f3e <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    3f3e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    3f42:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    3f46:	1a10      	subs	r0, r2, r0
    3f48:	4770      	bx	lr

00003f4a <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    3f4a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    3f4e:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    3f52:	429a      	cmp	r2, r3
    3f54:	d905      	bls.n	3f62 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    3f56:	1c5a      	adds	r2, r3, #1
    3f58:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    3f5c:	4418      	add	r0, r3
    3f5e:	7e80      	ldrb	r0, [r0, #26]
    3f60:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    3f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    3f66:	4770      	bx	lr

00003f68 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3f68:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    3f6c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    3f70:	429a      	cmp	r2, r3
    3f72:	d902      	bls.n	3f7a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    3f74:	4418      	add	r0, r3
    3f76:	7e80      	ldrb	r0, [r0, #26]
    3f78:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    3f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    3f7e:	4770      	bx	lr

00003f80 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    3f80:	4770      	bx	lr

00003f82 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    3f82:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    3f86:	b17b      	cbz	r3, 3fa8 <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    3f88:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    3f8c:	2b88      	cmp	r3, #136	; 0x88
    3f8e:	d903      	bls.n	3f98 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    3f90:	2301      	movs	r3, #1
    3f92:	6043      	str	r3, [r0, #4]
			return 0;
    3f94:	2000      	movs	r0, #0
    3f96:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    3f98:	1c5a      	adds	r2, r3, #1
    3f9a:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
    3f9e:	4418      	add	r0, r3
    3fa0:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    3fa4:	2001      	movs	r0, #1
    3fa6:	4770      	bx	lr
	return 0;
    3fa8:	2000      	movs	r0, #0
}
    3faa:	4770      	bx	lr

00003fac <TwoWire::write(unsigned char const*, unsigned int)>:
{
    3fac:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    3fae:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    3fb2:	b90b      	cbnz	r3, 3fb8 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
    3fb4:	2000      	movs	r0, #0
}
    3fb6:	bd38      	pop	{r3, r4, r5, pc}
    3fb8:	4605      	mov	r5, r0
    3fba:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    3fbc:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    3fc0:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    3fc4:	42a2      	cmp	r2, r4
    3fc6:	d202      	bcs.n	3fce <TwoWire::write(unsigned char const*, unsigned int)+0x22>
    3fc8:	2001      	movs	r0, #1
    3fca:	6068      	str	r0, [r5, #4]
			quantity = avail;
    3fcc:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    3fce:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    3fd2:	4622      	mov	r2, r4
    3fd4:	4418      	add	r0, r3
    3fd6:	f009 f80b 	bl	cff0 <memcpy>
		txBufferLength += quantity;
    3fda:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    3fde:	4423      	add	r3, r4
    3fe0:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
    3fe4:	4620      	mov	r0, r4
    3fe6:	e7e6      	b.n	3fb6 <TwoWire::write(unsigned char const*, unsigned int)+0xa>

00003fe8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    3fe8:	b538      	push	{r3, r4, r5, lr}
    3fea:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    3fec:	2500      	movs	r5, #0
    3fee:	6045      	str	r5, [r0, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    3ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3ff4:	6083      	str	r3, [r0, #8]
    3ff6:	7305      	strb	r5, [r0, #12]
		: port(myport), hardware(myhardware) {
    3ff8:	4b15      	ldr	r3, [pc, #84]	; (4050 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    3ffa:	6003      	str	r3, [r0, #0]
    3ffc:	6101      	str	r1, [r0, #16]
    3ffe:	6142      	str	r2, [r0, #20]
    4000:	7605      	strb	r5, [r0, #24]
    4002:	7645      	strb	r5, [r0, #25]
    4004:	2288      	movs	r2, #136	; 0x88
    4006:	4629      	mov	r1, r5
    4008:	301a      	adds	r0, #26
    400a:	f00d f8bb 	bl	11184 <memset>
    400e:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    4012:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    4016:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    401a:	2289      	movs	r2, #137	; 0x89
    401c:	4629      	mov	r1, r5
    401e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    4022:	f00d f8af 	bl	11184 <memset>
    4026:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    402a:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    402e:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    4032:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    4036:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    403a:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    403e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    4042:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    4046:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	}
    404a:	4620      	mov	r0, r4
    404c:	bd38      	pop	{r3, r4, r5, pc}
    404e:	bf00      	nop
    4050:	200023a4 	.word	0x200023a4

00004054 <TwoWire::force_clock()>:
{
    4054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4058:	b083      	sub	sp, #12
    405a:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    405c:	6943      	ldr	r3, [r0, #20]
    405e:	7e02      	ldrb	r2, [r0, #24]
    4060:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4064:	7a11      	ldrb	r1, [r2, #8]
    4066:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4068:	7e42      	ldrb	r2, [r0, #25]
    406a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    406e:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4072:	4b47      	ldr	r3, [pc, #284]	; (4190 <TwoWire::force_clock()+0x13c>)
    4074:	ea4f 1e01 	mov.w	lr, r1, lsl #4
    4078:	eb03 1201 	add.w	r2, r3, r1, lsl #4
    407c:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    407e:	ea4f 1108 	mov.w	r1, r8, lsl #4
    4082:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    4086:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4088:	6852      	ldr	r2, [r2, #4]
    408a:	2415      	movs	r4, #21
    408c:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
    408e:	f853 200e 	ldr.w	r2, [r3, lr]
    4092:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4096:	f853 e00e 	ldr.w	lr, [r3, lr]
    409a:	f8de 2004 	ldr.w	r2, [lr, #4]
    409e:	4332      	orrs	r2, r6
    40a0:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    40a4:	686a      	ldr	r2, [r5, #4]
    40a6:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    40a8:	585a      	ldr	r2, [r3, r1]
    40aa:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    40ae:	585a      	ldr	r2, [r3, r1]
    40b0:	6853      	ldr	r3, [r2, #4]
    40b2:	4303      	orrs	r3, r0
    40b4:	6053      	str	r3, [r2, #4]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    40b6:	4b37      	ldr	r3, [pc, #220]	; (4194 <TwoWire::force_clock()+0x140>)
    40b8:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    40ba:	4b37      	ldr	r3, [pc, #220]	; (4198 <TwoWire::force_clock()+0x144>)
    40bc:	681a      	ldr	r2, [r3, #0]
    40be:	4b37      	ldr	r3, [pc, #220]	; (419c <TwoWire::force_clock()+0x148>)
    40c0:	fba3 3202 	umull	r3, r2, r3, r2
    40c4:	0c92      	lsrs	r2, r2, #18
    40c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    40ca:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    40cc:	4931      	ldr	r1, [pc, #196]	; (4194 <TwoWire::force_clock()+0x140>)
    40ce:	684b      	ldr	r3, [r1, #4]
    40d0:	1b1b      	subs	r3, r3, r4
    40d2:	429a      	cmp	r2, r3
    40d4:	d8fb      	bhi.n	40ce <TwoWire::force_clock()+0x7a>
    40d6:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
    40d8:	492d      	ldr	r1, [pc, #180]	; (4190 <TwoWire::force_clock()+0x13c>)
    40da:	9b01      	ldr	r3, [sp, #4]
    40dc:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    40e0:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
    40e4:	4b2b      	ldr	r3, [pc, #172]	; (4194 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    40e6:	4d2c      	ldr	r5, [pc, #176]	; (4198 <TwoWire::force_clock()+0x144>)
    40e8:	4c2c      	ldr	r4, [pc, #176]	; (419c <TwoWire::force_clock()+0x148>)
    40ea:	e025      	b.n	4138 <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
    40ec:	680f      	ldr	r7, [r1, #0]
    40ee:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    40f2:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    40f6:	f8d5 a000 	ldr.w	sl, [r5]
    40fa:	fba4 9a0a 	umull	r9, sl, r4, sl
    40fe:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4102:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4106:	685f      	ldr	r7, [r3, #4]
    4108:	eba7 090b 	sub.w	r9, r7, fp
    410c:	45ca      	cmp	sl, r9
    410e:	d8fa      	bhi.n	4106 <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
    4110:	680f      	ldr	r7, [r1, #0]
    4112:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4116:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    411a:	f8d5 a000 	ldr.w	sl, [r5]
    411e:	fba4 9a0a 	umull	r9, sl, r4, sl
    4122:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4126:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    412a:	685f      	ldr	r7, [r3, #4]
    412c:	eba7 090b 	sub.w	r9, r7, fp
    4130:	45ca      	cmp	sl, r9
    4132:	d8fa      	bhi.n	412a <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
    4134:	3a01      	subs	r2, #1
    4136:	d00e      	beq.n	4156 <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
    4138:	f8de 7000 	ldr.w	r7, [lr]
    413c:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4140:	ea19 0f06 	tst.w	r9, r6
    4144:	d0d2      	beq.n	40ec <TwoWire::force_clock()+0x98>
    4146:	680f      	ldr	r7, [r1, #0]
    4148:	f8d7 9008 	ldr.w	r9, [r7, #8]
    414c:	ea19 0f00 	tst.w	r9, r0
    4150:	d0cc      	beq.n	40ec <TwoWire::force_clock()+0x98>
			ret = true;
    4152:	2001      	movs	r0, #1
    4154:	e000      	b.n	4158 <TwoWire::force_clock()+0x104>
	bool ret = false;
    4156:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4158:	4b0d      	ldr	r3, [pc, #52]	; (4190 <TwoWire::force_clock()+0x13c>)
    415a:	9a01      	ldr	r2, [sp, #4]
    415c:	eb03 1702 	add.w	r7, r3, r2, lsl #4
    4160:	6879      	ldr	r1, [r7, #4]
    4162:	f8dc 2014 	ldr.w	r2, [ip, #20]
    4166:	f89c 4018 	ldrb.w	r4, [ip, #24]
    416a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    416e:	68d2      	ldr	r2, [r2, #12]
    4170:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    4172:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    4176:	685a      	ldr	r2, [r3, #4]
    4178:	f8dc 3014 	ldr.w	r3, [ip, #20]
    417c:	f89c 1019 	ldrb.w	r1, [ip, #25]
    4180:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    4184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4186:	6013      	str	r3, [r2, #0]
}
    4188:	b003      	add	sp, #12
    418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    418e:	bf00      	nop
    4190:	200026e8 	.word	0x200026e8
    4194:	e0001000 	.word	0xe0001000
    4198:	20003144 	.word	0x20003144
    419c:	431bde83 	.word	0x431bde83

000041a0 <TwoWire::wait_idle()>:
{
    41a0:	b538      	push	{r3, r4, r5, lr}
    41a2:	4605      	mov	r5, r0
	return systick_millis_count;
    41a4:	4b0c      	ldr	r3, [pc, #48]	; (41d8 <TwoWire::wait_idle()+0x38>)
    41a6:	681c      	ldr	r4, [r3, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    41a8:	6902      	ldr	r2, [r0, #16]
    41aa:	4619      	mov	r1, r3
    41ac:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    41ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    41b2:	d00a      	beq.n	41ca <TwoWire::wait_idle()+0x2a>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    41b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    41b8:	d107      	bne.n	41ca <TwoWire::wait_idle()+0x2a>
    41ba:	680b      	ldr	r3, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
    41bc:	1b1b      	subs	r3, r3, r4
		if (timeout > 16) {
    41be:	2b10      	cmp	r3, #16
    41c0:	d9f4      	bls.n	41ac <TwoWire::wait_idle()+0xc>
			if (force_clock()) break;
    41c2:	4628      	mov	r0, r5
    41c4:	f7ff ff46 	bl	4054 <TwoWire::force_clock()>
    41c8:	b120      	cbz	r0, 41d4 <TwoWire::wait_idle()+0x34>
	port->MSR = 0x00007F00; // clear all prior flags
    41ca:	692b      	ldr	r3, [r5, #16]
    41cc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    41d0:	615a      	str	r2, [r3, #20]
	return true;
    41d2:	2001      	movs	r0, #1
}
    41d4:	bd38      	pop	{r3, r4, r5, pc}
    41d6:	bf00      	nop
    41d8:	200052f0 	.word	0x200052f0

000041dc <TwoWire::endTransmission(unsigned char)>:
{
    41dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    41e0:	f890 612f 	ldrb.w	r6, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    41e4:	2e00      	cmp	r6, #0
    41e6:	d06e      	beq.n	42c6 <TwoWire::endTransmission(unsigned char)+0xea>
    41e8:	4605      	mov	r5, r0
    41ea:	4689      	mov	r9, r1
	if (!wait_idle()) return 4;
    41ec:	f7ff ffd8 	bl	41a0 <TwoWire::wait_idle()>
    41f0:	2800      	cmp	r0, #0
    41f2:	d06b      	beq.n	42cc <TwoWire::endTransmission(unsigned char)+0xf0>
    41f4:	4b36      	ldr	r3, [pc, #216]	; (42d0 <TwoWire::endTransmission(unsigned char)+0xf4>)
    41f6:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    41fa:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    41fc:	f44f 7a00 	mov.w	sl, #512	; 0x200
    4200:	461f      	mov	r7, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4202:	e040      	b.n	4286 <TwoWire::endTransmission(unsigned char)+0xaa>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4204:	692b      	ldr	r3, [r5, #16]
    4206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4208:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    420c:	f012 0f04 	tst.w	r2, #4
    4210:	d00b      	beq.n	422a <TwoWire::endTransmission(unsigned char)+0x4e>
    4212:	e03a      	b.n	428a <TwoWire::endTransmission(unsigned char)+0xae>
				} else if (tx_index < tx_len) {
    4214:	42a6      	cmp	r6, r4
    4216:	d912      	bls.n	423e <TwoWire::endTransmission(unsigned char)+0x62>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4218:	692a      	ldr	r2, [r5, #16]
    421a:	1929      	adds	r1, r5, r4
    421c:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    4220:	6611      	str	r1, [r2, #96]	; 0x60
    4222:	3401      	adds	r4, #1
				fifo_used++;
    4224:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    4226:	2b03      	cmp	r3, #3
    4228:	d82f      	bhi.n	428a <TwoWire::endTransmission(unsigned char)+0xae>
				if (tx_index == 0) {
    422a:	2c00      	cmp	r4, #0
    422c:	d1f2      	bne.n	4214 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    422e:	6929      	ldr	r1, [r5, #16]
    4230:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    4234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    4238:	660a      	str	r2, [r1, #96]	; 0x60
					tx_index = 1;
    423a:	2401      	movs	r4, #1
    423c:	e7f2      	b.n	4224 <TwoWire::endTransmission(unsigned char)+0x48>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    423e:	f1b9 0f00 	cmp.w	r9, #0
    4242:	d002      	beq.n	424a <TwoWire::endTransmission(unsigned char)+0x6e>
    4244:	692b      	ldr	r3, [r5, #16]
    4246:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    424a:	3401      	adds	r4, #1
					break;
    424c:	e01d      	b.n	428a <TwoWire::endTransmission(unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    424e:	690b      	ldr	r3, [r1, #16]
    4250:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4254:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    4256:	2004      	movs	r0, #4
    4258:	e036      	b.n	42c8 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    425a:	690b      	ldr	r3, [r1, #16]
    425c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4260:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    4262:	692b      	ldr	r3, [r5, #16]
    4264:	f44f 7200 	mov.w	r2, #512	; 0x200
    4268:	661a      	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    426a:	2002      	movs	r0, #2
    426c:	e02c      	b.n	42c8 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    426e:	690b      	ldr	r3, [r1, #16]
    4270:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4274:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4276:	692b      	ldr	r3, [r5, #16]
    4278:	f44f 7200 	mov.w	r2, #512	; 0x200
    427c:	661a      	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    427e:	2004      	movs	r0, #4
    4280:	e022      	b.n	42c8 <TwoWire::endTransmission(unsigned char)+0xec>
		yield();
    4282:	f00a fd15 	bl	ecb0 <yield>
		if (tx_index <= tx_len) {
    4286:	42b4      	cmp	r4, r6
    4288:	d9bc      	bls.n	4204 <TwoWire::endTransmission(unsigned char)+0x28>
		uint32_t status = port->MSR; // pg 2884 & 2891
    428a:	6929      	ldr	r1, [r5, #16]
    428c:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    428e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4292:	d1dc      	bne.n	424e <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    4294:	f413 6f80 	tst.w	r3, #1024	; 0x400
    4298:	d1df      	bne.n	425a <TwoWire::endTransmission(unsigned char)+0x7e>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    429a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    429e:	d1e6      	bne.n	426e <TwoWire::endTransmission(unsigned char)+0x92>
    42a0:	683a      	ldr	r2, [r7, #0]
	operator unsigned long () const { return millis() - ms; }
    42a2:	eba2 0208 	sub.w	r2, r2, r8
    42a6:	2a32      	cmp	r2, #50	; 0x32
    42a8:	d8e1      	bhi.n	426e <TwoWire::endTransmission(unsigned char)+0x92>
		if (tx_index > tx_len) {
    42aa:	42b4      	cmp	r4, r6
    42ac:	d9e9      	bls.n	4282 <TwoWire::endTransmission(unsigned char)+0xa6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    42ae:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    42b0:	f012 0f07 	tst.w	r2, #7
    42b4:	d1e5      	bne.n	4282 <TwoWire::endTransmission(unsigned char)+0xa6>
    42b6:	f413 7f00 	tst.w	r3, #512	; 0x200
    42ba:	d102      	bne.n	42c2 <TwoWire::endTransmission(unsigned char)+0xe6>
    42bc:	f1b9 0f00 	cmp.w	r9, #0
    42c0:	d1df      	bne.n	4282 <TwoWire::endTransmission(unsigned char)+0xa6>
				return 0;
    42c2:	2000      	movs	r0, #0
    42c4:	e000      	b.n	42c8 <TwoWire::endTransmission(unsigned char)+0xec>
	if (!tx_len) return 4; // no address for transmit
    42c6:	2004      	movs	r0, #4
}
    42c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!wait_idle()) return 4;
    42cc:	2004      	movs	r0, #4
    42ce:	e7fb      	b.n	42c8 <TwoWire::endTransmission(unsigned char)+0xec>
    42d0:	200052f0 	.word	0x200052f0

000042d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    42d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42d8:	4604      	mov	r4, r0
    42da:	460d      	mov	r5, r1
    42dc:	4616      	mov	r6, r2
    42de:	4698      	mov	r8, r3
	if (!wait_idle()) return 4;
    42e0:	f7ff ff5e 	bl	41a0 <TwoWire::wait_idle()>
    42e4:	2800      	cmp	r0, #0
    42e6:	f000 8090 	beq.w	440a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    42ea:	0069      	lsls	r1, r5, #1
	if (length < 1) length = 1;
    42ec:	2e01      	cmp	r6, #1
    42ee:	bf38      	it	cc
    42f0:	2601      	movcc	r6, #1
	rxBufferIndex = 0;
    42f2:	2500      	movs	r5, #0
    42f4:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
	rxBufferLength = 0;
    42f8:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    42fc:	4b44      	ldr	r3, [pc, #272]	; (4410 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    42fe:	f8d3 9000 	ldr.w	r9, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4302:	b2c9      	uxtb	r1, r1
    4304:	f240 4701 	movw	r7, #1025	; 0x401
    4308:	430f      	orrs	r7, r1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    430a:	e059      	b.n	43c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    430c:	6923      	ldr	r3, [r4, #16]
    430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4310:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    4314:	f013 0f04 	tst.w	r3, #4
    4318:	d154      	bne.n	43c4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    431a:	462b      	mov	r3, r5
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    431c:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4320:	1e70      	subs	r0, r6, #1
    4322:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4326:	4429      	add	r1, r5
    4328:	e010      	b.n	434c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    432a:	2b01      	cmp	r3, #1
    432c:	d006      	beq.n	433c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    432e:	f1b8 0f00 	cmp.w	r8, #0
    4332:	d005      	beq.n	4340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
    4334:	6922      	ldr	r2, [r4, #16]
    4336:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    433a:	e001      	b.n	4340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    433c:	6922      	ldr	r2, [r4, #16]
    433e:	6610      	str	r0, [r2, #96]	; 0x60
				tx_state++;
    4340:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
    4342:	1aca      	subs	r2, r1, r3
    4344:	2a03      	cmp	r2, #3
    4346:	d806      	bhi.n	4356 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
    4348:	2b02      	cmp	r3, #2
    434a:	d804      	bhi.n	4356 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
				if (tx_state == 0) {
    434c:	2b00      	cmp	r3, #0
    434e:	d1ec      	bne.n	432a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4350:	6922      	ldr	r2, [r4, #16]
    4352:	6617      	str	r7, [r2, #96]	; 0x60
    4354:	e7f4      	b.n	4340 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				tx_state++;
    4356:	461d      	mov	r5, r3
    4358:	e034      	b.n	43c4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    435a:	f8d4 c010 	ldr.w	ip, [r4, #16]
    435e:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
    4362:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4366:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    436a:	d02f      	beq.n	43cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
				rxBuffer[rxBufferLength++] = port->MRDR;
    436c:	f8dc 0070 	ldr.w	r0, [ip, #112]	; 0x70
    4370:	460b      	mov	r3, r1
    4372:	3101      	adds	r1, #1
    4374:	b2c9      	uxtb	r1, r1
    4376:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    437a:	4423      	add	r3, r4
    437c:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    437e:	3a01      	subs	r2, #1
    4380:	d024      	beq.n	43cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
    4382:	2987      	cmp	r1, #135	; 0x87
    4384:	d9f2      	bls.n	436c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x98>
    4386:	e021      	b.n	43cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4388:	690b      	ldr	r3, [r1, #16]
    438a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    438e:	610b      	str	r3, [r1, #16]
			break;
    4390:	e007      	b.n	43a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4392:	690b      	ldr	r3, [r1, #16]
    4394:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4398:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    439a:	6923      	ldr	r3, [r4, #16]
    439c:	f44f 7200 	mov.w	r2, #512	; 0x200
    43a0:	661a      	str	r2, [r3, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    43a2:	6923      	ldr	r3, [r4, #16]
    43a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    43a6:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    43aa:	d003      	beq.n	43b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
    43ac:	691a      	ldr	r2, [r3, #16]
    43ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    43b2:	611a      	str	r2, [r3, #16]
	return rxBufferLength;
    43b4:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
    43b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		yield();
    43bc:	f00a fc78 	bl	ecb0 <yield>
		if (tx_state < 3) {
    43c0:	2d02      	cmp	r5, #2
    43c2:	d9a3      	bls.n	430c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
		if (rxBufferLength < sizeof(rxBuffer)) {
    43c4:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    43c8:	2987      	cmp	r1, #135	; 0x87
    43ca:	d9c6      	bls.n	435a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
		uint32_t status = port->MSR; // pg 2884 & 2891
    43cc:	6921      	ldr	r1, [r4, #16]
    43ce:	694a      	ldr	r2, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    43d0:	f412 6f00 	tst.w	r2, #2048	; 0x800
    43d4:	d1d8      	bne.n	4388 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    43d6:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    43da:	d1da      	bne.n	4392 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
    43dc:	4b0c      	ldr	r3, [pc, #48]	; (4410 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    43de:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
    43e0:	eba3 0309 	sub.w	r3, r3, r9
    43e4:	2b32      	cmp	r3, #50	; 0x32
    43e6:	d8d4      	bhi.n	4392 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		if (rxBufferLength >= length && tx_state >= 3) {
    43e8:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    43ec:	42b3      	cmp	r3, r6
    43ee:	d3e5      	bcc.n	43bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    43f0:	2d02      	cmp	r5, #2
    43f2:	d9e3      	bls.n	43bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
			uint32_t tx_fifo = port->MFSR & 0x07;
    43f4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    43f6:	f013 0f07 	tst.w	r3, #7
    43fa:	d1df      	bne.n	43bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    43fc:	f412 7f00 	tst.w	r2, #512	; 0x200
    4400:	d1cf      	bne.n	43a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
    4402:	f1b8 0f00 	cmp.w	r8, #0
    4406:	d1d9      	bne.n	43bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4408:	e7cb      	b.n	43a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
	if (!wait_idle()) return 4;
    440a:	2004      	movs	r0, #4
    440c:	e7d4      	b.n	43b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
    440e:	bf00      	nop
    4410:	200052f0 	.word	0x200052f0

00004414 <TwoWire::isr()>:
{
    4414:	b538      	push	{r3, r4, r5, lr}
    4416:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    4418:	6903      	ldr	r3, [r0, #16]
    441a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    441e:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    4422:	d001      	beq.n	4428 <TwoWire::isr()+0x14>
    4424:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    4428:	f015 0f02 	tst.w	r5, #2
    442c:	d012      	beq.n	4454 <TwoWire::isr()+0x40>
		int rx = port->SRDR;
    442e:	6923      	ldr	r3, [r4, #16]
    4430:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    4434:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    4438:	d008      	beq.n	444c <TwoWire::isr()+0x38>
			rxBufferIndex = 0;
    443a:	2300      	movs	r3, #0
    443c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    4440:	1c59      	adds	r1, r3, #1
    4442:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    4446:	4423      	add	r3, r4
    4448:	769a      	strb	r2, [r3, #26]
    444a:	e003      	b.n	4454 <TwoWire::isr()+0x40>
		if (rxBufferLength < BUFFER_LENGTH) {
    444c:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    4450:	2b87      	cmp	r3, #135	; 0x87
    4452:	d9f5      	bls.n	4440 <TwoWire::isr()+0x2c>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    4454:	f015 0f01 	tst.w	r5, #1
    4458:	d01b      	beq.n	4492 <TwoWire::isr()+0x7e>
		if (!transmitting) {
    445a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    445e:	b94b      	cbnz	r3, 4474 <TwoWire::isr()+0x60>
			if (user_onRequest != nullptr) {
    4460:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    4464:	b103      	cbz	r3, 4468 <TwoWire::isr()+0x54>
				(*user_onRequest)();
    4466:	4798      	blx	r3
			txBufferIndex = 0;
    4468:	2300      	movs	r3, #0
    446a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    446e:	2301      	movs	r3, #1
    4470:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    4474:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
    4478:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    447c:	429a      	cmp	r2, r3
    447e:	d91e      	bls.n	44be <TwoWire::isr()+0xaa>
			port->STDR = txBuffer[txBufferIndex++];
    4480:	1c5a      	adds	r2, r3, #1
    4482:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    4486:	6922      	ldr	r2, [r4, #16]
    4488:	4423      	add	r3, r4
    448a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    448e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    4492:	f415 7f00 	tst.w	r5, #512	; 0x200
    4496:	d011      	beq.n	44bc <TwoWire::isr()+0xa8>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    4498:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    449c:	b118      	cbz	r0, 44a6 <TwoWire::isr()+0x92>
    449e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    44a2:	b103      	cbz	r3, 44a6 <TwoWire::isr()+0x92>
			(*user_onReceive)(rxBufferLength);
    44a4:	4798      	blx	r3
		rxBufferIndex = 0;
    44a6:	2300      	movs	r3, #0
    44a8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
    44ac:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
    44b0:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
    44b4:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
    44b8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    44bc:	bd38      	pop	{r3, r4, r5, pc}
			port->STDR = 0;
    44be:	6923      	ldr	r3, [r4, #16]
    44c0:	2200      	movs	r2, #0
    44c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    44c6:	e7e4      	b.n	4492 <TwoWire::isr()+0x7e>

000044c8 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    44c8:	b508      	push	{r3, lr}
    44ca:	4802      	ldr	r0, [pc, #8]	; (44d4 <lpi2c1_isr()+0xc>)
    44cc:	f7ff ffa2 	bl	4414 <TwoWire::isr()>
    44d0:	bd08      	pop	{r3, pc}
    44d2:	bf00      	nop
    44d4:	20004704 	.word	0x20004704

000044d8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    44d8:	b508      	push	{r3, lr}
    44da:	4802      	ldr	r0, [pc, #8]	; (44e4 <lpi2c3_isr()+0xc>)
    44dc:	f7ff ff9a 	bl	4414 <TwoWire::isr()>
    44e0:	bd08      	pop	{r3, pc}
    44e2:	bf00      	nop
    44e4:	20004844 	.word	0x20004844

000044e8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    44e8:	b508      	push	{r3, lr}
    44ea:	4802      	ldr	r0, [pc, #8]	; (44f4 <lpi2c4_isr()+0xc>)
    44ec:	f7ff ff92 	bl	4414 <TwoWire::isr()>
    44f0:	bd08      	pop	{r3, pc}
    44f2:	bf00      	nop
    44f4:	20004984 	.word	0x20004984

000044f8 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    44f8:	6903      	ldr	r3, [r0, #16]
    44fa:	2200      	movs	r2, #0
    44fc:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    44fe:	4b1d      	ldr	r3, [pc, #116]	; (4574 <TwoWire::setClock(unsigned long)+0x7c>)
    4500:	4299      	cmp	r1, r3
    4502:	d81a      	bhi.n	453a <TwoWire::setClock(unsigned long)+0x42>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4504:	6903      	ldr	r3, [r0, #16]
    4506:	4a1c      	ldr	r2, [pc, #112]	; (4578 <TwoWire::setClock(unsigned long)+0x80>)
    4508:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    450a:	6903      	ldr	r3, [r0, #16]
    450c:	2201      	movs	r2, #1
    450e:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    4510:	6903      	ldr	r3, [r0, #16]
    4512:	4a1a      	ldr	r2, [pc, #104]	; (457c <TwoWire::setClock(unsigned long)+0x84>)
    4514:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4516:	6903      	ldr	r3, [r0, #16]
    4518:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
    451c:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    451e:	6903      	ldr	r3, [r0, #16]
    4520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4522:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4524:	6903      	ldr	r3, [r0, #16]
    4526:	2200      	movs	r2, #0
    4528:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    452a:	6903      	ldr	r3, [r0, #16]
    452c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4530:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    4532:	6903      	ldr	r3, [r0, #16]
    4534:	2201      	movs	r2, #1
    4536:	611a      	str	r2, [r3, #16]
}
    4538:	4770      	bx	lr
	} else if (frequency < 1000000) {
    453a:	4b11      	ldr	r3, [pc, #68]	; (4580 <TwoWire::setClock(unsigned long)+0x88>)
    453c:	4299      	cmp	r1, r3
    453e:	d80c      	bhi.n	455a <TwoWire::setClock(unsigned long)+0x62>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    4540:	6903      	ldr	r3, [r0, #16]
    4542:	4a10      	ldr	r2, [pc, #64]	; (4584 <TwoWire::setClock(unsigned long)+0x8c>)
    4544:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4546:	6903      	ldr	r3, [r0, #16]
    4548:	2200      	movs	r2, #0
    454a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    454c:	6903      	ldr	r3, [r0, #16]
    454e:	4a0e      	ldr	r2, [pc, #56]	; (4588 <TwoWire::setClock(unsigned long)+0x90>)
    4550:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4552:	6903      	ldr	r3, [r0, #16]
    4554:	4a0d      	ldr	r2, [pc, #52]	; (458c <TwoWire::setClock(unsigned long)+0x94>)
    4556:	62da      	str	r2, [r3, #44]	; 0x2c
    4558:	e7e1      	b.n	451e <TwoWire::setClock(unsigned long)+0x26>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    455a:	6903      	ldr	r3, [r0, #16]
    455c:	4a0c      	ldr	r2, [pc, #48]	; (4590 <TwoWire::setClock(unsigned long)+0x98>)
    455e:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4560:	6903      	ldr	r3, [r0, #16]
    4562:	2200      	movs	r2, #0
    4564:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    4566:	6903      	ldr	r3, [r0, #16]
    4568:	4a0a      	ldr	r2, [pc, #40]	; (4594 <TwoWire::setClock(unsigned long)+0x9c>)
    456a:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    456c:	6903      	ldr	r3, [r0, #16]
    456e:	4a07      	ldr	r2, [pc, #28]	; (458c <TwoWire::setClock(unsigned long)+0x94>)
    4570:	62da      	str	r2, [r3, #44]	; 0x2c
    4572:	e7d4      	b.n	451e <TwoWire::setClock(unsigned long)+0x26>
    4574:	00061a7f 	.word	0x00061a7f
    4578:	1928373b 	.word	0x1928373b
    457c:	05050bb8 	.word	0x05050bb8
    4580:	000f423f 	.word	0x000f423f
    4584:	0c121a1c 	.word	0x0c121a1c
    4588:	02020e10 	.word	0x02020e10
    458c:	00057f00 	.word	0x00057f00
    4590:	0407090a 	.word	0x0407090a
    4594:	01010960 	.word	0x01010960

00004598 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    4598:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    459a:	4c09      	ldr	r4, [pc, #36]	; (45c0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    459c:	4622      	mov	r2, r4
    459e:	4909      	ldr	r1, [pc, #36]	; (45c4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    45a0:	4809      	ldr	r0, [pc, #36]	; (45c8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    45a2:	f7ff fd21 	bl	3fe8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    45a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    45aa:	4908      	ldr	r1, [pc, #32]	; (45cc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    45ac:	4808      	ldr	r0, [pc, #32]	; (45d0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    45ae:	f7ff fd1b 	bl	3fe8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    45b2:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    45b6:	4907      	ldr	r1, [pc, #28]	; (45d4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    45b8:	4807      	ldr	r0, [pc, #28]	; (45d8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    45ba:	f7ff fd15 	bl	3fe8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    45be:	bd10      	pop	{r4, pc}
    45c0:	60001fac 	.word	0x60001fac
    45c4:	403f0000 	.word	0x403f0000
    45c8:	20004704 	.word	0x20004704
    45cc:	403f8000 	.word	0x403f8000
    45d0:	20004844 	.word	0x20004844
    45d4:	403fc000 	.word	0x403fc000
    45d8:	20004984 	.word	0x20004984

000045dc <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    45dc:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    45de:	4b2e      	ldr	r3, [pc, #184]	; (4698 <_spi_dma_rxISR0()+0xbc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    45e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    45e2:	7908      	ldrb	r0, [r1, #4]
    45e4:	4a2d      	ldr	r2, [pc, #180]	; (469c <_spi_dma_rxISR0()+0xc0>)
    45e6:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    45e8:	6c58      	ldr	r0, [r3, #68]	; 0x44
    45ea:	7900      	ldrb	r0, [r0, #4]
    45ec:	7710      	strb	r0, [r2, #28]
    45ee:	7909      	ldrb	r1, [r1, #4]
    45f0:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    45f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45f4:	2b00      	cmp	r3, #0
    45f6:	d03a      	beq.n	466e <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    45f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    45fc:	d30b      	bcc.n	4616 <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    45fe:	4a28      	ldr	r2, [pc, #160]	; (46a0 <_spi_dma_rxISR0()+0xc4>)
    4600:	441a      	add	r2, r3
    4602:	4b25      	ldr	r3, [pc, #148]	; (4698 <_spi_dma_rxISR0()+0xbc>)
    4604:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4606:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4608:	7911      	ldrb	r1, [r2, #4]
    460a:	4a24      	ldr	r2, [pc, #144]	; (469c <_spi_dma_rxISR0()+0xc0>)
    460c:	76d1      	strb	r1, [r2, #27]
    460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4610:	791b      	ldrb	r3, [r3, #4]
    4612:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4614:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4616:	4a20      	ldr	r2, [pc, #128]	; (4698 <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4618:	6c52      	ldr	r2, [r2, #68]	; 0x44
    461a:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    461c:	8bd1      	ldrh	r1, [r2, #30]
    461e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4622:	d114      	bne.n	464e <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    4624:	b29b      	uxth	r3, r3
    4626:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4628:	8bd3      	ldrh	r3, [r2, #30]
    462a:	b29b      	uxth	r3, r3
    462c:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    462e:	4b1a      	ldr	r3, [pc, #104]	; (4698 <_spi_dma_rxISR0()+0xbc>)
    4630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4634:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4636:	8bd9      	ldrh	r1, [r3, #30]
    4638:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    463c:	d10f      	bne.n	465e <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    463e:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4642:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4644:	8bda      	ldrh	r2, [r3, #30]
    4646:	b292      	uxth	r2, r2
    4648:	82da      	strh	r2, [r3, #22]
    464a:	2200      	movs	r2, #0
    464c:	e7d9      	b.n	4602 <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    464e:	8bd1      	ldrh	r1, [r2, #30]
    4650:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4654:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4658:	430b      	orrs	r3, r1
    465a:	83d3      	strh	r3, [r2, #30]
    465c:	e7e4      	b.n	4628 <_spi_dma_rxISR0()+0x4c>
    465e:	8bd9      	ldrh	r1, [r3, #30]
    4660:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4664:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4668:	430a      	orrs	r2, r1
    466a:	83da      	strh	r2, [r3, #30]
    466c:	e7ea      	b.n	4644 <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    466e:	4a0a      	ldr	r2, [pc, #40]	; (4698 <_spi_dma_rxISR0()+0xbc>)
    4670:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4672:	210f      	movs	r1, #15
    4674:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4676:	2100      	movs	r1, #0
    4678:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    467a:	f240 3001 	movw	r0, #769	; 0x301
    467e:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4680:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4684:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4686:	2303      	movs	r3, #3
    4688:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    468c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    468e:	6803      	ldr	r3, [r0, #0]
    4690:	681b      	ldr	r3, [r3, #0]
    4692:	460a      	mov	r2, r1
    4694:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4696:	e7bd      	b.n	4614 <_spi_dma_rxISR0()+0x38>
    4698:	200045b4 	.word	0x200045b4
    469c:	400e8000 	.word	0x400e8000
    46a0:	ffff8001 	.word	0xffff8001

000046a4 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    46a4:	b508      	push	{r3, lr}
	_dmaRX->clearInterrupt();
    46a6:	4b2e      	ldr	r3, [pc, #184]	; (4760 <_spi_dma_rxISR1()+0xbc>)
		DMA_CINT = channel;
    46a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    46aa:	7908      	ldrb	r0, [r1, #4]
    46ac:	4a2d      	ldr	r2, [pc, #180]	; (4764 <_spi_dma_rxISR1()+0xc0>)
    46ae:	77d0      	strb	r0, [r2, #31]
		DMA_CDNE = channel;
    46b0:	6c58      	ldr	r0, [r3, #68]	; 0x44
    46b2:	7900      	ldrb	r0, [r0, #4]
    46b4:	7710      	strb	r0, [r2, #28]
    46b6:	7909      	ldrb	r1, [r1, #4]
    46b8:	7711      	strb	r1, [r2, #28]
	if (_dma_count_remaining) {
    46ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46bc:	2b00      	cmp	r3, #0
    46be:	d03a      	beq.n	4736 <_spi_dma_rxISR1()+0x92>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    46c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    46c4:	d30b      	bcc.n	46de <_spi_dma_rxISR1()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    46c6:	4a28      	ldr	r2, [pc, #160]	; (4768 <_spi_dma_rxISR1()+0xc4>)
    46c8:	441a      	add	r2, r3
    46ca:	4b25      	ldr	r3, [pc, #148]	; (4760 <_spi_dma_rxISR1()+0xbc>)
    46cc:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    46ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    46d0:	7911      	ldrb	r1, [r2, #4]
    46d2:	4a24      	ldr	r2, [pc, #144]	; (4764 <_spi_dma_rxISR1()+0xc0>)
    46d4:	76d1      	strb	r1, [r2, #27]
    46d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46d8:	791b      	ldrb	r3, [r3, #4]
    46da:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    46dc:	bd08      	pop	{r3, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    46de:	4a20      	ldr	r2, [pc, #128]	; (4760 <_spi_dma_rxISR1()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    46e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
    46e2:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    46e4:	8bd1      	ldrh	r1, [r2, #30]
    46e6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    46ea:	d114      	bne.n	4716 <_spi_dma_rxISR1()+0x72>
		tcd->BITER = len & 0x7fff;
    46ec:	b29b      	uxth	r3, r3
    46ee:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    46f0:	8bd3      	ldrh	r3, [r2, #30]
    46f2:	b29b      	uxth	r3, r3
    46f4:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    46f6:	4b1a      	ldr	r3, [pc, #104]	; (4760 <_spi_dma_rxISR1()+0xbc>)
    46f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    46fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46fc:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    46fe:	8bd9      	ldrh	r1, [r3, #30]
    4700:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4704:	d10f      	bne.n	4726 <_spi_dma_rxISR1()+0x82>
		tcd->BITER = len & 0x7fff;
    4706:	f3c2 020e 	ubfx	r2, r2, #0, #15
    470a:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    470c:	8bda      	ldrh	r2, [r3, #30]
    470e:	b292      	uxth	r2, r2
    4710:	82da      	strh	r2, [r3, #22]
    4712:	2200      	movs	r2, #0
    4714:	e7d9      	b.n	46ca <_spi_dma_rxISR1()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4716:	8bd1      	ldrh	r1, [r2, #30]
    4718:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    471c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4720:	430b      	orrs	r3, r1
    4722:	83d3      	strh	r3, [r2, #30]
    4724:	e7e4      	b.n	46f0 <_spi_dma_rxISR1()+0x4c>
    4726:	8bd9      	ldrh	r1, [r3, #30]
    4728:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    472c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4730:	430a      	orrs	r2, r1
    4732:	83da      	strh	r2, [r3, #30]
    4734:	e7ea      	b.n	470c <_spi_dma_rxISR1()+0x68>
    4736:	4a0a      	ldr	r2, [pc, #40]	; (4760 <_spi_dma_rxISR1()+0xbc>)
    4738:	6813      	ldr	r3, [r2, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    473a:	210f      	movs	r1, #15
    473c:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    473e:	2100      	movs	r1, #0
    4740:	61d9      	str	r1, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4742:	f240 3001 	movw	r0, #769	; 0x301
    4746:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4748:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    474c:	6158      	str	r0, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    474e:	2303      	movs	r3, #3
    4750:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4754:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4756:	6803      	ldr	r3, [r0, #0]
    4758:	681b      	ldr	r3, [r3, #0]
    475a:	460a      	mov	r2, r1
    475c:	4798      	blx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    475e:	e7bd      	b.n	46dc <_spi_dma_rxISR1()+0x38>
    4760:	20004604 	.word	0x20004604
    4764:	400e8000 	.word	0x400e8000
    4768:	ffff8001 	.word	0xffff8001

0000476c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    476c:	6001      	str	r1, [r0, #0]
    476e:	6042      	str	r2, [r0, #4]
    4770:	2300      	movs	r3, #0
    4772:	6083      	str	r3, [r0, #8]
    4774:	60c3      	str	r3, [r0, #12]
    4776:	7403      	strb	r3, [r0, #16]
    4778:	7443      	strb	r3, [r0, #17]
    477a:	7483      	strb	r3, [r0, #18]
    477c:	74c3      	strb	r3, [r0, #19]
    477e:	6143      	str	r3, [r0, #20]
    4780:	6183      	str	r3, [r0, #24]
    4782:	61c3      	str	r3, [r0, #28]
    4784:	6203      	str	r3, [r0, #32]
    4786:	6243      	str	r3, [r0, #36]	; 0x24
    4788:	6283      	str	r3, [r0, #40]	; 0x28
    478a:	62c3      	str	r3, [r0, #44]	; 0x2c
    478c:	6303      	str	r3, [r0, #48]	; 0x30
    478e:	6343      	str	r3, [r0, #52]	; 0x34
    4790:	6383      	str	r3, [r0, #56]	; 0x38
    4792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    4796:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    479a:	6403      	str	r3, [r0, #64]	; 0x40
    479c:	6443      	str	r3, [r0, #68]	; 0x44
    479e:	6483      	str	r3, [r0, #72]	; 0x48
    47a0:	64c3      	str	r3, [r0, #76]	; 0x4c
	}
    47a2:	4770      	bx	lr

000047a4 <SPIClass::begin()>:
{
    47a4:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    47a6:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    47a8:	680a      	ldr	r2, [r1, #0]
    47aa:	6813      	ldr	r3, [r2, #0]
    47ac:	6849      	ldr	r1, [r1, #4]
    47ae:	ea23 0301 	bic.w	r3, r3, r1
    47b2:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    47b4:	498f      	ldr	r1, [pc, #572]	; (49f4 <SPIClass::begin()+0x250>)
    47b6:	698b      	ldr	r3, [r1, #24]
    47b8:	4a8f      	ldr	r2, [pc, #572]	; (49f8 <SPIClass::begin()+0x254>)
    47ba:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    47bc:	4b8f      	ldr	r3, [pc, #572]	; (49fc <SPIClass::begin()+0x258>)
    47be:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    47c0:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    47c2:	4b8f      	ldr	r3, [pc, #572]	; (4a00 <SPIClass::begin()+0x25c>)
    47c4:	6842      	ldr	r2, [r0, #4]
    47c6:	7c01      	ldrb	r1, [r0, #16]
    47c8:	440a      	add	r2, r1
    47ca:	7c12      	ldrb	r2, [r2, #16]
    47cc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    47d0:	6891      	ldr	r1, [r2, #8]
    47d2:	22b8      	movs	r2, #184	; 0xb8
    47d4:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    47d6:	6841      	ldr	r1, [r0, #4]
    47d8:	7c44      	ldrb	r4, [r0, #17]
    47da:	4421      	add	r1, r4
    47dc:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    47e0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    47e4:	6889      	ldr	r1, [r1, #8]
    47e6:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    47e8:	6841      	ldr	r1, [r0, #4]
    47ea:	7c84      	ldrb	r4, [r0, #18]
    47ec:	4421      	add	r1, r4
    47ee:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    47f2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    47f6:	6889      	ldr	r1, [r1, #8]
    47f8:	600a      	str	r2, [r1, #0]
    47fa:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    47fc:	6821      	ldr	r1, [r4, #0]
    47fe:	680a      	ldr	r2, [r1, #0]
    4800:	6864      	ldr	r4, [r4, #4]
    4802:	4322      	orrs	r2, r4
    4804:	600a      	str	r2, [r1, #0]
    4806:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4808:	7c04      	ldrb	r4, [r0, #16]
    480a:	1911      	adds	r1, r2, r4
    480c:	7c09      	ldrb	r1, [r1, #16]
    480e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4812:	6849      	ldr	r1, [r1, #4]
    4814:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4818:	6952      	ldr	r2, [r2, #20]
    481a:	600a      	str	r2, [r1, #0]
    481c:	6844      	ldr	r4, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    481e:	7c42      	ldrb	r2, [r0, #17]
    4820:	18a1      	adds	r1, r4, r2
    4822:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4826:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    482a:	6849      	ldr	r1, [r1, #4]
    482c:	320a      	adds	r2, #10
    482e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    4832:	600a      	str	r2, [r1, #0]
    4834:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4836:	7c81      	ldrb	r1, [r0, #18]
    4838:	1854      	adds	r4, r2, r1
    483a:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    483e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4842:	685b      	ldr	r3, [r3, #4]
    4844:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    484a:	601a      	str	r2, [r3, #0]
    484c:	6843      	ldr	r3, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    484e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4850:	7c81      	ldrb	r1, [r0, #18]
    4852:	440b      	add	r3, r1
    4854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4858:	6013      	str	r3, [r2, #0]
    485a:	6843      	ldr	r3, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    485c:	6a1a      	ldr	r2, [r3, #32]
    485e:	7c01      	ldrb	r1, [r0, #16]
    4860:	440b      	add	r3, r1
    4862:	7f1b      	ldrb	r3, [r3, #28]
    4864:	6013      	str	r3, [r2, #0]
    4866:	6843      	ldr	r3, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    486a:	7c41      	ldrb	r1, [r0, #17]
    486c:	440b      	add	r3, r1
    486e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    4872:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4874:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    4876:	2202      	movs	r2, #2
    4878:	611a      	str	r2, [r3, #16]
    487a:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    487c:	220f      	movs	r2, #15
    487e:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    4880:	7cc3      	ldrb	r3, [r0, #19]
    4882:	2b00      	cmp	r3, #0
    4884:	d042      	beq.n	490c <SPIClass::begin()+0x168>
			__disable_irq();
    4886:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4888:	7cc3      	ldrb	r3, [r0, #19]
    488a:	f013 0f01 	tst.w	r3, #1
    488e:	d008      	beq.n	48a2 <SPIClass::begin()+0xfe>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4890:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4894:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    4898:	6941      	ldr	r1, [r0, #20]
    489a:	400b      	ands	r3, r1
    489c:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    489e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    48a2:	7cc3      	ldrb	r3, [r0, #19]
    48a4:	f013 0f02 	tst.w	r3, #2
    48a8:	d008      	beq.n	48bc <SPIClass::begin()+0x118>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    48aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    48ae:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    48b2:	6981      	ldr	r1, [r0, #24]
    48b4:	400b      	ands	r3, r1
    48b6:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    48b8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    48bc:	7cc3      	ldrb	r3, [r0, #19]
    48be:	f013 0f04 	tst.w	r3, #4
    48c2:	d008      	beq.n	48d6 <SPIClass::begin()+0x132>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    48c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    48c8:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    48cc:	69c1      	ldr	r1, [r0, #28]
    48ce:	400b      	ands	r3, r1
    48d0:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    48d2:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    48d6:	7cc3      	ldrb	r3, [r0, #19]
    48d8:	f013 0f08 	tst.w	r3, #8
    48dc:	d008      	beq.n	48f0 <SPIClass::begin()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    48de:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    48e2:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    48e6:	6a01      	ldr	r1, [r0, #32]
    48e8:	400b      	ands	r3, r1
    48ea:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    48ec:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    48f0:	7cc3      	ldrb	r3, [r0, #19]
    48f2:	f013 0f10 	tst.w	r3, #16
    48f6:	d008      	beq.n	490a <SPIClass::begin()+0x166>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    48f8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    48fc:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    4900:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4902:	400b      	ands	r3, r1
    4904:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4906:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    490a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    490c:	6882      	ldr	r2, [r0, #8]
    490e:	4b3d      	ldr	r3, [pc, #244]	; (4a04 <SPIClass::begin()+0x260>)
    4910:	429a      	cmp	r2, r3
    4912:	d029      	beq.n	4968 <SPIClass::begin()+0x1c4>
		    _clock = settings.clock();
    4914:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    4916:	4b37      	ldr	r3, [pc, #220]	; (49f4 <SPIClass::begin()+0x250>)
    4918:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    491a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    491e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    4922:	3301      	adds	r3, #1
    4924:	4a38      	ldr	r2, [pc, #224]	; (4a08 <SPIClass::begin()+0x264>)
    4926:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    492a:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    492e:	4b37      	ldr	r3, [pc, #220]	; (4a0c <SPIClass::begin()+0x268>)
    4930:	429a      	cmp	r2, r3
    4932:	d95d      	bls.n	49f0 <SPIClass::begin()+0x24c>
			d = _clock ? clkhz/_clock : clkhz;
    4934:	4b36      	ldr	r3, [pc, #216]	; (4a10 <SPIClass::begin()+0x26c>)
    4936:	fba3 1302 	umull	r1, r3, r3, r2
    493a:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    493c:	fbb2 f2f3 	udiv	r2, r2, r3
    4940:	4930      	ldr	r1, [pc, #192]	; (4a04 <SPIClass::begin()+0x260>)
    4942:	428a      	cmp	r2, r1
    4944:	bf88      	it	hi
    4946:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    4948:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    494c:	d34c      	bcc.n	49e8 <SPIClass::begin()+0x244>
    494e:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    4952:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4954:	0859      	lsrs	r1, r3, #1
    4956:	020a      	lsls	r2, r1, #8
    4958:	b292      	uxth	r2, r2
    495a:	0409      	lsls	r1, r1, #16
    495c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4960:	430a      	orrs	r2, r1
    4962:	b2db      	uxtb	r3, r3
    4964:	4313      	orrs	r3, r2
    4966:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4968:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    496a:	2200      	movs	r2, #0
    496c:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    496e:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4970:	2203      	movs	r2, #3
    4972:	625a      	str	r2, [r3, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4974:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    4976:	68c2      	ldr	r2, [r0, #12]
    4978:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    497a:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    497c:	2207      	movs	r2, #7
    497e:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4980:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    4982:	2201      	movs	r2, #1
    4984:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    4986:	7cc3      	ldrb	r3, [r0, #19]
    4988:	b35b      	cbz	r3, 49e2 <SPIClass::begin()+0x23e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    498a:	f013 0f01 	tst.w	r3, #1
    498e:	d004      	beq.n	499a <SPIClass::begin()+0x1f6>
    4990:	6a82      	ldr	r2, [r0, #40]	; 0x28
    4992:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4996:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    499a:	7cc3      	ldrb	r3, [r0, #19]
    499c:	f013 0f02 	tst.w	r3, #2
    49a0:	d004      	beq.n	49ac <SPIClass::begin()+0x208>
    49a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    49a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    49ac:	7cc3      	ldrb	r3, [r0, #19]
    49ae:	f013 0f04 	tst.w	r3, #4
    49b2:	d004      	beq.n	49be <SPIClass::begin()+0x21a>
    49b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
    49b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    49be:	7cc3      	ldrb	r3, [r0, #19]
    49c0:	f013 0f08 	tst.w	r3, #8
    49c4:	d004      	beq.n	49d0 <SPIClass::begin()+0x22c>
    49c6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    49c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    49d0:	7cc3      	ldrb	r3, [r0, #19]
    49d2:	f013 0f10 	tst.w	r3, #16
    49d6:	d004      	beq.n	49e2 <SPIClass::begin()+0x23e>
    49d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
    49da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49de:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    49e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    49e6:	4770      	bx	lr
			if (d > 2) {
    49e8:	2b02      	cmp	r3, #2
    49ea:	d8b2      	bhi.n	4952 <SPIClass::begin()+0x1ae>
				div =0;
    49ec:	2300      	movs	r3, #0
    49ee:	e7b1      	b.n	4954 <SPIClass::begin()+0x1b0>
    49f0:	2300      	movs	r3, #0
    49f2:	e7af      	b.n	4954 <SPIClass::begin()+0x1b0>
    49f4:	400fc000 	.word	0x400fc000
    49f8:	e3ffffcf 	.word	0xe3ffffcf
    49fc:	08000010 	.word	0x08000010
    4a00:	200026e8 	.word	0x200026e8
    4a04:	003d0900 	.word	0x003d0900
    4a08:	20002430 	.word	0x20002430
    4a0c:	003d08ff 	.word	0x003d08ff
    4a10:	431bde83 	.word	0x431bde83

00004a14 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    4a14:	2b00      	cmp	r3, #0
    4a16:	d03b      	beq.n	4a90 <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    4a18:	b470      	push	{r4, r5, r6}
    4a1a:	460e      	mov	r6, r1
    4a1c:	4611      	mov	r1, r2
    4a1e:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4a20:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4a22:	f240 2201 	movw	r2, #513	; 0x201
    4a26:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    4a28:	462c      	mov	r4, r5
    4a2a:	e016      	b.n	4a5a <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4a2c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    4a30:	e019      	b.n	4a66 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    4a32:	3c01      	subs	r4, #1
    4a34:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4a36:	695b      	ldr	r3, [r3, #20]
    4a38:	f013 0f01 	tst.w	r3, #1
    4a3c:	d10c      	bne.n	4a58 <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    4a3e:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4a40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4a42:	f012 0f02 	tst.w	r2, #2
    4a46:	d1f5      	bne.n	4a34 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4a4a:	2900      	cmp	r1, #0
    4a4c:	d0f1      	beq.n	4a32 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    4a4e:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a50:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    4a54:	4611      	mov	r1, r2
    4a56:	e7ec      	b.n	4a32 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    4a58:	b155      	cbz	r5, 4a70 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4a5a:	2e00      	cmp	r6, #0
    4a5c:	d0e6      	beq.n	4a2c <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    4a5e:	4633      	mov	r3, r6
    4a60:	f813 2b01 	ldrb.w	r2, [r3], #1
    4a64:	461e      	mov	r6, r3
    4a66:	6803      	ldr	r3, [r0, #0]
    4a68:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    4a6a:	3d01      	subs	r5, #1
    4a6c:	e7e7      	b.n	4a3e <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    4a6e:	3c01      	subs	r4, #1
	while (count_read) {
    4a70:	b164      	cbz	r4, 4a8c <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    4a72:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4a76:	f012 0f02 	tst.w	r2, #2
    4a7a:	d1f9      	bne.n	4a70 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4a7e:	2900      	cmp	r1, #0
    4a80:	d0f5      	beq.n	4a6e <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    4a82:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4a84:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    4a88:	4611      	mov	r1, r2
    4a8a:	e7f0      	b.n	4a6e <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    4a8c:	bc70      	pop	{r4, r5, r6}
    4a8e:	4770      	bx	lr
    4a90:	4770      	bx	lr

00004a92 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4a92:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4a94:	681a      	ldr	r2, [r3, #0]
    4a96:	6812      	ldr	r2, [r2, #0]
    4a98:	685b      	ldr	r3, [r3, #4]
    4a9a:	421a      	tst	r2, r3
    4a9c:	d100      	bne.n	4aa0 <SPIClass::end()+0xe>
    4a9e:	4770      	bx	lr
void SPIClass::end() {
    4aa0:	b510      	push	{r4, lr}
    4aa2:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4aa4:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    4aa6:	2200      	movs	r2, #0
    4aa8:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4aaa:	6843      	ldr	r3, [r0, #4]
    4aac:	7c02      	ldrb	r2, [r0, #16]
    4aae:	4413      	add	r3, r2
    4ab0:	2105      	movs	r1, #5
    4ab2:	7c18      	ldrb	r0, [r3, #16]
    4ab4:	f008 fa56 	bl	cf64 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4ab8:	6863      	ldr	r3, [r4, #4]
    4aba:	7c62      	ldrb	r2, [r4, #17]
    4abc:	4413      	add	r3, r2
    4abe:	2105      	movs	r1, #5
    4ac0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    4ac4:	f008 fa4e 	bl	cf64 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4ac8:	6863      	ldr	r3, [r4, #4]
    4aca:	7ca2      	ldrb	r2, [r4, #18]
    4acc:	4413      	add	r3, r2
    4ace:	2105      	movs	r1, #5
    4ad0:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    4ad4:	f008 fa46 	bl	cf64 <pinMode>
}
    4ad8:	bd10      	pop	{r4, pc}
	...

00004adc <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    4adc:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    4ade:	4a08      	ldr	r2, [pc, #32]	; (4b00 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    4ae0:	4908      	ldr	r1, [pc, #32]	; (4b04 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    4ae2:	4809      	ldr	r0, [pc, #36]	; (4b08 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    4ae4:	f7ff fe42 	bl	476c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    4ae8:	4a08      	ldr	r2, [pc, #32]	; (4b0c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    4aea:	4909      	ldr	r1, [pc, #36]	; (4b10 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    4aec:	4809      	ldr	r0, [pc, #36]	; (4b14 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    4aee:	f7ff fe3d 	bl	476c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    4af2:	4a09      	ldr	r2, [pc, #36]	; (4b18 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    4af4:	4909      	ldr	r1, [pc, #36]	; (4b1c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    4af6:	480a      	ldr	r0, [pc, #40]	; (4b20 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    4af8:	f7ff fe38 	bl	476c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    4afc:	bd08      	pop	{r3, pc}
    4afe:	bf00      	nop
    4b00:	2000214c 	.word	0x2000214c
    4b04:	403a0000 	.word	0x403a0000
    4b08:	200045b4 	.word	0x200045b4
    4b0c:	200020dc 	.word	0x200020dc
    4b10:	4039c000 	.word	0x4039c000
    4b14:	20004604 	.word	0x20004604
    4b18:	2000206c 	.word	0x2000206c
    4b1c:	40394000 	.word	0x40394000
    4b20:	20004654 	.word	0x20004654

00004b24 <PWMServo::PWMServo()>:
PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
    4b24:	22ff      	movs	r2, #255	; 0xff
    4b26:	7002      	strb	r2, [r0, #0]
    4b28:	7042      	strb	r2, [r0, #1]
    4b2a:	4770      	bx	lr

00004b2c <PWMServo::attach(int, int, int)>:
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4b2c:	2936      	cmp	r1, #54	; 0x36
    4b2e:	d840      	bhi.n	4bb2 <PWMServo::attach(int, int, int)+0x86>
{
    4b30:	b570      	push	{r4, r5, r6, lr}
    4b32:	4604      	mov	r4, r0
    4b34:	4616      	mov	r6, r2
    4b36:	461d      	mov	r5, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
    4b38:	290f      	cmp	r1, #15
    4b3a:	dd0b      	ble.n	4b54 <PWMServo::attach(int, int, int)+0x28>
    4b3c:	2912      	cmp	r1, #18
    4b3e:	d009      	beq.n	4b54 <PWMServo::attach(int, int, int)+0x28>
    4b40:	f1a1 0213 	sub.w	r2, r1, #19
    4b44:	2a0a      	cmp	r2, #10
    4b46:	d829      	bhi.n	4b9c <PWMServo::attach(int, int, int)+0x70>
    4b48:	f240 6379 	movw	r3, #1657	; 0x679
    4b4c:	40d3      	lsrs	r3, r2
    4b4e:	f013 0f01 	tst.w	r3, #1
    4b52:	d021      	beq.n	4b98 <PWMServo::attach(int, int, int)+0x6c>
	pin = pinArg;
    4b54:	b2c8      	uxtb	r0, r1
    4b56:	7020      	strb	r0, [r4, #0]
	analogWriteFrequency(pin, 50);
    4b58:	ed9f 0a18 	vldr	s0, [pc, #96]	; 4bbc <PWMServo::attach(int, int, int)+0x90>
    4b5c:	f008 fe7c 	bl	d858 <analogWriteFrequency>
	min16 = min >> 4;
    4b60:	1132      	asrs	r2, r6, #4
    4b62:	70a2      	strb	r2, [r4, #2]
	max16 = max >> 4;
    4b64:	112b      	asrs	r3, r5, #4
    4b66:	70e3      	strb	r3, [r4, #3]
	angle = NO_ANGLE;
    4b68:	23ff      	movs	r3, #255	; 0xff
    4b6a:	7063      	strb	r3, [r4, #1]
	digitalWrite(pin, LOW);
    4b6c:	2100      	movs	r1, #0
    4b6e:	7820      	ldrb	r0, [r4, #0]
    4b70:	f008 f9c0 	bl	cef4 <digitalWrite>
	pinMode(pin, OUTPUT);
    4b74:	2101      	movs	r1, #1
    4b76:	7820      	ldrb	r0, [r4, #0]
    4b78:	f008 f9f4 	bl	cf64 <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
    4b7c:	7823      	ldrb	r3, [r4, #0]
    4b7e:	0959      	lsrs	r1, r3, #5
    4b80:	4a0f      	ldr	r2, [pc, #60]	; (4bc0 <PWMServo::attach(int, int, int)+0x94>)
    4b82:	f003 031f 	and.w	r3, r3, #31
    4b86:	2001      	movs	r0, #1
    4b88:	fa00 f303 	lsl.w	r3, r0, r3
    4b8c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    4b90:	4323      	orrs	r3, r4
    4b92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4b96:	bd70      	pop	{r4, r5, r6, pc}
	if (!digitalPinHasPWM(pinArg)) return 0;
    4b98:	2000      	movs	r0, #0
    4b9a:	e7fc      	b.n	4b96 <PWMServo::attach(int, int, int)+0x6a>
    4b9c:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
    4ba0:	2a15      	cmp	r2, #21
    4ba2:	d808      	bhi.n	4bb6 <PWMServo::attach(int, int, int)+0x8a>
    4ba4:	4b07      	ldr	r3, [pc, #28]	; (4bc4 <PWMServo::attach(int, int, int)+0x98>)
    4ba6:	40d3      	lsrs	r3, r2
    4ba8:	f013 0f01 	tst.w	r3, #1
    4bac:	d1d2      	bne.n	4b54 <PWMServo::attach(int, int, int)+0x28>
    4bae:	2000      	movs	r0, #0
    4bb0:	e7f1      	b.n	4b96 <PWMServo::attach(int, int, int)+0x6a>
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4bb2:	2000      	movs	r0, #0
}
    4bb4:	4770      	bx	lr
	if (!digitalPinHasPWM(pinArg)) return 0;
    4bb6:	2000      	movs	r0, #0
    4bb8:	e7ed      	b.n	4b96 <PWMServo::attach(int, int, int)+0x6a>
    4bba:	bf00      	nop
    4bbc:	42480000 	.word	0x42480000
    4bc0:	20004ba8 	.word	0x20004ba8
    4bc4:	00247e19 	.word	0x00247e19

00004bc8 <PWMServo::write(int)>:
	if (pin >= NUM_DIGITAL_PINS) return;
    4bc8:	7803      	ldrb	r3, [r0, #0]
    4bca:	2b36      	cmp	r3, #54	; 0x36
    4bcc:	d900      	bls.n	4bd0 <PWMServo::write(int)+0x8>
    4bce:	4770      	bx	lr
{
    4bd0:	b570      	push	{r4, r5, r6, lr}
    4bd2:	4604      	mov	r4, r0
	if (angleArg < 0) angleArg = 0;
    4bd4:	29b4      	cmp	r1, #180	; 0xb4
    4bd6:	bfa8      	it	ge
    4bd8:	21b4      	movge	r1, #180	; 0xb4
    4bda:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	angle = angleArg;
    4bde:	7041      	strb	r1, [r0, #1]
	uint32_t us = (((max16 - min16) * 46603 * angle) >> 11) + (min16 << 12); // us*256
    4be0:	7883      	ldrb	r3, [r0, #2]
    4be2:	78c2      	ldrb	r2, [r0, #3]
    4be4:	1ad2      	subs	r2, r2, r3
    4be6:	fb01 f202 	mul.w	r2, r1, r2
    4bea:	f24b 610b 	movw	r1, #46603	; 0xb60b
    4bee:	fb01 f202 	mul.w	r2, r1, r2
    4bf2:	031d      	lsls	r5, r3, #12
    4bf4:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	uint32_t duty = (us * 3355) >> 22;
    4bf8:	f640 531b 	movw	r3, #3355	; 0xd1b
    4bfc:	fb03 f505 	mul.w	r5, r3, r5
    4c00:	0dad      	lsrs	r5, r5, #22
	noInterrupts();
    4c02:	b672      	cpsid	i
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    4c04:	200c      	movs	r0, #12
    4c06:	f008 feff 	bl	da08 <analogWriteRes>
    4c0a:	4606      	mov	r6, r0
	analogWrite(pin, duty);
    4c0c:	4629      	mov	r1, r5
    4c0e:	7820      	ldrb	r0, [r4, #0]
    4c10:	f008 fdca 	bl	d7a8 <analogWrite>
    4c14:	4630      	mov	r0, r6
    4c16:	f008 fef7 	bl	da08 <analogWriteRes>
	interrupts();
    4c1a:	b662      	cpsie	i
}
    4c1c:	bd70      	pop	{r4, r5, r6, pc}

00004c1e <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4c1e:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4c22:	b1e3      	cbz	r3, 4c5e <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    4c24:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4c28:	b163      	cbz	r3, 4c44 <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    4c2a:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    4c2c:	3801      	subs	r0, #1
    4c2e:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4c30:	7999      	ldrb	r1, [r3, #6]
    4c32:	f44f 7300 	mov.w	r3, #512	; 0x200
    4c36:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    4c38:	b29b      	uxth	r3, r3
    4c3a:	fba3 0100 	umull	r0, r1, r3, r0
    4c3e:	fb03 1102 	mla	r1, r3, r2, r1
    4c42:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    4c44:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    4c48:	b12b      	cbz	r3, 4c56 <SDClass::totalSize()+0x38>
    4c4a:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    4c4e:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    4c50:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    4c54:	e7f1      	b.n	4c3a <SDClass::totalSize()+0x1c>
    4c56:	2000      	movs	r0, #0
    4c58:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4c5a:	4603      	mov	r3, r0
    4c5c:	e7ed      	b.n	4c3a <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4c5e:	2000      	movs	r0, #0
    4c60:	4601      	mov	r1, r0
	}
    4c62:	4770      	bx	lr

00004c64 <SDClass::~SDClass()>:
class SDClass : public FS
    4c64:	4770      	bx	lr
	...

00004c68 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    4c68:	b530      	push	{r4, r5, lr}
    4c6a:	b083      	sub	sp, #12
    4c6c:	4605      	mov	r5, r0
    4c6e:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    4c70:	f008 fed8 	bl	da24 <rtc_get>
	if (now < 315532800) { // before 1980
    4c74:	4b1c      	ldr	r3, [pc, #112]	; (4ce8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    4c76:	4298      	cmp	r0, r3
    4c78:	d804      	bhi.n	4c84 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    4c7a:	2300      	movs	r3, #0
    4c7c:	802b      	strh	r3, [r5, #0]
		*time = 0;
    4c7e:	8023      	strh	r3, [r4, #0]
}
    4c80:	b003      	add	sp, #12
    4c82:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    4c84:	4669      	mov	r1, sp
    4c86:	f007 fd6b 	bl	c760 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    4c8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4c8e:	3301      	adds	r3, #1
    4c90:	b2db      	uxtb	r3, r3
    4c92:	f89d 1004 	ldrb.w	r1, [sp, #4]
    4c96:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    4c9a:	3a50      	subs	r2, #80	; 0x50
    4c9c:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    4c9e:	291f      	cmp	r1, #31
    4ca0:	bf98      	it	ls
    4ca2:	2b0c      	cmpls	r3, #12
    4ca4:	d801      	bhi.n	4caa <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    4ca6:	2a7f      	cmp	r2, #127	; 0x7f
    4ca8:	d910      	bls.n	4ccc <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    4caa:	2100      	movs	r1, #0
    4cac:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    4cae:	f89d 2002 	ldrb.w	r2, [sp, #2]
    4cb2:	f89d 3001 	ldrb.w	r3, [sp, #1]
    4cb6:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    4cba:	2a17      	cmp	r2, #23
    4cbc:	bf98      	it	ls
    4cbe:	2b3b      	cmpls	r3, #59	; 0x3b
    4cc0:	d801      	bhi.n	4cc6 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    4cc2:	293b      	cmp	r1, #59	; 0x3b
    4cc4:	d908      	bls.n	4cd8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    4cc6:	2300      	movs	r3, #0
    4cc8:	8023      	strh	r3, [r4, #0]
}
    4cca:	e7d9      	b.n	4c80 <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    4ccc:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    4cd0:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    4cd4:	b289      	uxth	r1, r1
    4cd6:	e7e9      	b.n	4cac <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    4cd8:	015b      	lsls	r3, r3, #5
    4cda:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    4cde:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4ce2:	b29b      	uxth	r3, r3
    4ce4:	e7f0      	b.n	4cc8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    4ce6:	bf00      	nop
    4ce8:	12cea5ff 	.word	0x12cea5ff

00004cec <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    4cec:	b500      	push	{lr}
    4cee:	b08f      	sub	sp, #60	; 0x3c
    4cf0:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    4cf2:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4cf6:	b161      	cbz	r1, 4d12 <SDClass::exists(char const*)+0x26>
    4cf8:	2300      	movs	r3, #0
    4cfa:	f88d 3000 	strb.w	r3, [sp]
    4cfe:	f88d 3001 	strb.w	r3, [sp, #1]
    4d02:	f88d 3002 	strb.w	r3, [sp, #2]
    4d06:	4668      	mov	r0, sp
    4d08:	f002 ff37 	bl	7b7a <FatFile::open(FatVolume*, char const*, int)>
	}
    4d0c:	b00f      	add	sp, #60	; 0x3c
    4d0e:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    4d12:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4d16:	b151      	cbz	r1, 4d2e <SDClass::exists(char const*)+0x42>
    4d18:	2300      	movs	r3, #0
    4d1a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4d1e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4d22:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    4d26:	4668      	mov	r0, sp
    4d28:	f000 ff83 	bl	5c32 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4d2c:	e7ee      	b.n	4d0c <SDClass::exists(char const*)+0x20>
    4d2e:	2000      	movs	r0, #0
    4d30:	e7ec      	b.n	4d0c <SDClass::exists(char const*)+0x20>

00004d32 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    4d32:	b500      	push	{lr}
    4d34:	b08f      	sub	sp, #60	; 0x3c
    4d36:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    4d38:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4d3c:	b189      	cbz	r1, 4d62 <SDClass::rmdir(char const*)+0x30>
    4d3e:	2300      	movs	r3, #0
    4d40:	f88d 3000 	strb.w	r3, [sp]
    4d44:	f88d 3001 	strb.w	r3, [sp, #1]
    4d48:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4d4c:	4668      	mov	r0, sp
    4d4e:	f002 ff14 	bl	7b7a <FatFile::open(FatVolume*, char const*, int)>
    4d52:	b910      	cbnz	r0, 4d5a <SDClass::rmdir(char const*)+0x28>
	}
    4d54:	b00f      	add	sp, #60	; 0x3c
    4d56:	f85d fb04 	ldr.w	pc, [sp], #4
    4d5a:	4668      	mov	r0, sp
    4d5c:	f002 fd52 	bl	7804 <FatFile::rmdir()>
    4d60:	e7f8      	b.n	4d54 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    4d62:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4d66:	b179      	cbz	r1, 4d88 <SDClass::rmdir(char const*)+0x56>
    4d68:	2300      	movs	r3, #0
    4d6a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4d6e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4d72:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    4d76:	4668      	mov	r0, sp
    4d78:	f000 ff5b 	bl	5c32 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d0e9      	beq.n	4d54 <SDClass::rmdir(char const*)+0x22>
    4d80:	4668      	mov	r0, sp
    4d82:	f001 f83d 	bl	5e00 <ExFatFile::rmdir()>
    4d86:	e7e5      	b.n	4d54 <SDClass::rmdir(char const*)+0x22>
    4d88:	2000      	movs	r0, #0
    4d8a:	e7e3      	b.n	4d54 <SDClass::rmdir(char const*)+0x22>

00004d8c <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    4d8c:	b500      	push	{lr}
    4d8e:	b08f      	sub	sp, #60	; 0x3c
    4d90:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    4d92:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4d96:	b191      	cbz	r1, 4dbe <SDClass::remove(char const*)+0x32>
    4d98:	2300      	movs	r3, #0
    4d9a:	f88d 3000 	strb.w	r3, [sp]
    4d9e:	f88d 3001 	strb.w	r3, [sp, #1]
    4da2:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4da6:	2301      	movs	r3, #1
    4da8:	4668      	mov	r0, sp
    4daa:	f002 fee6 	bl	7b7a <FatFile::open(FatVolume*, char const*, int)>
    4dae:	b910      	cbnz	r0, 4db6 <SDClass::remove(char const*)+0x2a>
	}
    4db0:	b00f      	add	sp, #60	; 0x3c
    4db2:	f85d fb04 	ldr.w	pc, [sp], #4
    4db6:	4668      	mov	r0, sp
    4db8:	f003 fec4 	bl	8b44 <FatFile::remove()>
    4dbc:	e7f8      	b.n	4db0 <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    4dbe:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4dc2:	b181      	cbz	r1, 4de6 <SDClass::remove(char const*)+0x5a>
    4dc4:	2300      	movs	r3, #0
    4dc6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4dca:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4dce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4dd2:	2301      	movs	r3, #1
    4dd4:	4668      	mov	r0, sp
    4dd6:	f000 ff2c 	bl	5c32 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4dda:	2800      	cmp	r0, #0
    4ddc:	d0e8      	beq.n	4db0 <SDClass::remove(char const*)+0x24>
    4dde:	4668      	mov	r0, sp
    4de0:	f000 ffb6 	bl	5d50 <ExFatFile::remove()>
    4de4:	e7e4      	b.n	4db0 <SDClass::remove(char const*)+0x24>
    4de6:	2000      	movs	r0, #0
    4de8:	e7e2      	b.n	4db0 <SDClass::remove(char const*)+0x24>

00004dea <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    4dea:	b530      	push	{r4, r5, lr}
    4dec:	b08f      	sub	sp, #60	; 0x3c
    4dee:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    4df0:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    4df4:	b1b4      	cbz	r4, 4e24 <SDClass::rename(char const*, char const*)+0x3a>
    4df6:	2300      	movs	r3, #0
    4df8:	f88d 3000 	strb.w	r3, [sp]
    4dfc:	f88d 3001 	strb.w	r3, [sp, #1]
    4e00:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4e04:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4e08:	460a      	mov	r2, r1
    4e0a:	4621      	mov	r1, r4
    4e0c:	4668      	mov	r0, sp
    4e0e:	f002 fe4f 	bl	7ab0 <FatFile::open(FatFile*, char const*, int)>
    4e12:	b908      	cbnz	r0, 4e18 <SDClass::rename(char const*, char const*)+0x2e>
	}
    4e14:	b00f      	add	sp, #60	; 0x3c
    4e16:	bd30      	pop	{r4, r5, pc}
    4e18:	462a      	mov	r2, r5
    4e1a:	4621      	mov	r1, r4
    4e1c:	4668      	mov	r0, sp
    4e1e:	f003 f80c 	bl	7e3a <FatFile::rename(FatFile*, char const*)>
    4e22:	e7f7      	b.n	4e14 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    4e24:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    4e28:	b1ac      	cbz	r4, 4e56 <SDClass::rename(char const*, char const*)+0x6c>
    4e2a:	2300      	movs	r3, #0
    4e2c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4e30:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4e34:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    4e38:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4e3c:	460a      	mov	r2, r1
    4e3e:	4621      	mov	r1, r4
    4e40:	4668      	mov	r0, sp
    4e42:	f000 fe83 	bl	5b4c <ExFatFile::open(ExFatFile*, char const*, int)>
    4e46:	2800      	cmp	r0, #0
    4e48:	d0e4      	beq.n	4e14 <SDClass::rename(char const*, char const*)+0x2a>
    4e4a:	462a      	mov	r2, r5
    4e4c:	4621      	mov	r1, r4
    4e4e:	4668      	mov	r0, sp
    4e50:	f001 f9bb 	bl	61ca <ExFatFile::rename(ExFatFile*, char const*)>
    4e54:	e7de      	b.n	4e14 <SDClass::rename(char const*, char const*)+0x2a>
    4e56:	2000      	movs	r0, #0
    4e58:	e7dc      	b.n	4e14 <SDClass::rename(char const*, char const*)+0x2a>

00004e5a <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    4e5a:	b500      	push	{lr}
    4e5c:	b08f      	sub	sp, #60	; 0x3c
    4e5e:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    4e60:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    4e64:	b179      	cbz	r1, 4e86 <SDClass::mkdir(char const*)+0x2c>
    4e66:	2300      	movs	r3, #0
    4e68:	f88d 3000 	strb.w	r3, [sp]
    4e6c:	f88d 3001 	strb.w	r3, [sp, #1]
    4e70:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    4e74:	2301      	movs	r3, #1
    4e76:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4e7a:	4668      	mov	r0, sp
    4e7c:	f002 ff74 	bl	7d68 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    4e80:	b00f      	add	sp, #60	; 0x3c
    4e82:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    4e86:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    4e8a:	b169      	cbz	r1, 4ea8 <SDClass::mkdir(char const*)+0x4e>
    4e8c:	2300      	movs	r3, #0
    4e8e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    4e92:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    4e96:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    4e9a:	2301      	movs	r3, #1
    4e9c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4ea0:	4668      	mov	r0, sp
    4ea2:	f001 f91c 	bl	60de <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    4ea6:	e7eb      	b.n	4e80 <SDClass::mkdir(char const*)+0x26>
    4ea8:	2000      	movs	r0, #0
    4eaa:	e7e9      	b.n	4e80 <SDClass::mkdir(char const*)+0x26>

00004eac <SDClass::open(char const*, unsigned char)>:
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    4eac:	b570      	push	{r4, r5, r6, lr}
    4eae:	b094      	sub	sp, #80	; 0x50
    4eb0:	4605      	mov	r5, r0
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    4eb2:	2b01      	cmp	r3, #1
    4eb4:	d036      	beq.n	4f24 <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    4eb6:	2b02      	cmp	r3, #2
    4eb8:	f240 2302 	movw	r3, #514	; 0x202
    4ebc:	bf18      	it	ne
    4ebe:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    4ec0:	3104      	adds	r1, #4
    4ec2:	4668      	mov	r0, sp
    4ec4:	f004 fe98 	bl	9bf8 <FsVolume::open(char const*, int)>
    4ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d02d      	beq.n	4f2a <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    4ece:	205c      	movs	r0, #92	; 0x5c
    4ed0:	f008 f928 	bl	d124 <operator new(unsigned int)>
    4ed4:	4604      	mov	r4, r0
class FileImpl {
    4ed6:	2600      	movs	r6, #0
    4ed8:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    4eda:	4b1a      	ldr	r3, [pc, #104]	; (4f44 <SDClass::open(char const*, unsigned char)+0x98>)
    4edc:	6003      	str	r3, [r0, #0]
class Print
    4ede:	9b01      	ldr	r3, [sp, #4]
    4ee0:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    4ee2:	4b19      	ldr	r3, [pc, #100]	; (4f48 <SDClass::open(char const*, unsigned char)+0x9c>)
    4ee4:	6083      	str	r3, [r0, #8]
    4ee6:	9b02      	ldr	r3, [sp, #8]
    4ee8:	6103      	str	r3, [r0, #16]
    4eea:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4eee:	7503      	strb	r3, [r0, #20]
    4ef0:	a904      	add	r1, sp, #16
    4ef2:	3018      	adds	r0, #24
    4ef4:	f004 fd49 	bl	998a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4ef8:	4b14      	ldr	r3, [pc, #80]	; (4f4c <SDClass::open(char const*, unsigned char)+0xa0>)
    4efa:	60a3      	str	r3, [r4, #8]
    4efc:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    4efe:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    4f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4f04:	60ab      	str	r3, [r5, #8]
    4f06:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    4f08:	4b11      	ldr	r3, [pc, #68]	; (4f50 <SDClass::open(char const*, unsigned char)+0xa4>)
    4f0a:	602b      	str	r3, [r5, #0]
		f = file;
    4f0c:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    4f0e:	6863      	ldr	r3, [r4, #4]
    4f10:	3301      	adds	r3, #1
    4f12:	6063      	str	r3, [r4, #4]
    4f14:	4b0f      	ldr	r3, [pc, #60]	; (4f54 <SDClass::open(char const*, unsigned char)+0xa8>)
    4f16:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    4f18:	a804      	add	r0, sp, #16
    4f1a:	f004 fd77 	bl	9a0c <FsBaseFile::close()>
	}
    4f1e:	4628      	mov	r0, r5
    4f20:	b014      	add	sp, #80	; 0x50
    4f22:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    4f24:	f244 2302 	movw	r3, #16898	; 0x4202
    4f28:	e7ca      	b.n	4ec0 <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    4f2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d1ce      	bne.n	4ece <SDClass::open(char const*, unsigned char)+0x22>
    4f30:	606b      	str	r3, [r5, #4]
    4f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f36:	60aa      	str	r2, [r5, #8]
    4f38:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    4f3a:	4a05      	ldr	r2, [pc, #20]	; (4f50 <SDClass::open(char const*, unsigned char)+0xa4>)
    4f3c:	602a      	str	r2, [r5, #0]
    4f3e:	612b      	str	r3, [r5, #16]
    4f40:	e7e8      	b.n	4f14 <SDClass::open(char const*, unsigned char)+0x68>
    4f42:	bf00      	nop
    4f44:	200022f4 	.word	0x200022f4
    4f48:	20002350 	.word	0x20002350
    4f4c:	200022d0 	.word	0x200022d0
    4f50:	200022a4 	.word	0x200022a4
    4f54:	200021c4 	.word	0x200021c4

00004f58 <SDClass::usedSize()>:
	uint64_t usedSize() {
    4f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    4f5a:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d04d      	beq.n	4ffe <SDClass::usedSize()+0xa6>
    4f62:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    4f64:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    4f68:	b1f3      	cbz	r3, 4fa8 <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    4f6a:	69de      	ldr	r6, [r3, #28]
    4f6c:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4f6e:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    4f72:	2800      	cmp	r0, #0
    4f74:	d05a      	beq.n	502c <SDClass::usedSize()+0xd4>
    4f76:	6803      	ldr	r3, [r0, #0]
    4f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4f7a:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4f7c:	4607      	mov	r7, r0
    4f7e:	b140      	cbz	r0, 4f92 <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4f80:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4f84:	2800      	cmp	r0, #0
    4f86:	d032      	beq.n	4fee <SDClass::usedSize()+0x96>
    4f88:	6803      	ldr	r3, [r0, #0]
    4f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4f8c:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4f8e:	b1b8      	cbz	r0, 4fc0 <SDClass::usedSize()+0x68>
    4f90:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    4f92:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    4f96:	2800      	cmp	r0, #0
    4f98:	d14b      	bne.n	5032 <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4f9a:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    4f9e:	b388      	cbz	r0, 5004 <SDClass::usedSize()+0xac>
    4fa0:	f002 f96b 	bl	727a <ExFatPartition::freeClusterCount()>
    4fa4:	4605      	mov	r5, r0
    4fa6:	e047      	b.n	5038 <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    4fa8:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    4fac:	2b00      	cmp	r3, #0
    4fae:	d055      	beq.n	505c <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    4fb0:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4fb4:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4fb8:	2800      	cmp	r0, #0
    4fba:	d1dc      	bne.n	4f76 <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4fbc:	2700      	movs	r7, #0
    4fbe:	e7ec      	b.n	4f9a <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    4fc0:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4fc4:	b1a8      	cbz	r0, 4ff2 <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    4fc6:	6803      	ldr	r3, [r0, #0]
    4fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fca:	2101      	movs	r1, #1
    4fcc:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4fce:	4607      	mov	r7, r0
    4fd0:	2800      	cmp	r0, #0
    4fd2:	d1de      	bne.n	4f92 <SDClass::usedSize()+0x3a>
      return 0;
    4fd4:	2500      	movs	r5, #0
    4fd6:	e031      	b.n	503c <SDClass::usedSize()+0xe4>
    if (m_card) {
    4fd8:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    4fdc:	b158      	cbz	r0, 4ff6 <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    4fde:	6803      	ldr	r3, [r0, #0]
    4fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4fe2:	2100      	movs	r1, #0
    4fe4:	4798      	blx	r3
      return 0;
    4fe6:	2800      	cmp	r0, #0
    4fe8:	bf08      	it	eq
    4fea:	2500      	moveq	r5, #0
    4fec:	e026      	b.n	503c <SDClass::usedSize()+0xe4>
      return 0;
    4fee:	2500      	movs	r5, #0
    4ff0:	e024      	b.n	503c <SDClass::usedSize()+0xe4>
    4ff2:	2500      	movs	r5, #0
    4ff4:	e022      	b.n	503c <SDClass::usedSize()+0xe4>
      return 0;
    4ff6:	2500      	movs	r5, #0
    4ff8:	e020      	b.n	503c <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4ffa:	2300      	movs	r3, #0
    4ffc:	e029      	b.n	5052 <SDClass::usedSize()+0xfa>
    4ffe:	2000      	movs	r0, #0
    5000:	4601      	mov	r1, r0
    5002:	e02a      	b.n	505a <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    5004:	b967      	cbnz	r7, 5020 <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    5006:	2300      	movs	r3, #0
    5008:	4630      	mov	r0, r6
    500a:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    500c:	e021      	b.n	5052 <SDClass::usedSize()+0xfa>
    500e:	4630      	mov	r0, r6
    5010:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5012:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    5016:	2b00      	cmp	r3, #0
    5018:	d0ef      	beq.n	4ffa <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    501a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    501e:	e018      	b.n	5052 <SDClass::usedSize()+0xfa>
    if (m_card) {
    5020:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5024:	2800      	cmp	r0, #0
    5026:	d0f2      	beq.n	500e <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5028:	2500      	movs	r5, #0
    502a:	e7d8      	b.n	4fde <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    502c:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5030:	2700      	movs	r7, #0
    5032:	f004 fb9b 	bl	976c <FatPartition::freeClusterCount()>
    5036:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5038:	2f00      	cmp	r7, #0
    503a:	d1cd      	bne.n	4fd8 <SDClass::usedSize()+0x80>
    503c:	1b70      	subs	r0, r6, r5
    503e:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    5040:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    5044:	2b00      	cmp	r3, #0
    5046:	d0e4      	beq.n	5012 <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5048:	7999      	ldrb	r1, [r3, #6]
    504a:	f44f 7300 	mov.w	r3, #512	; 0x200
    504e:	408b      	lsls	r3, r1
    5050:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    5052:	fba3 0100 	umull	r0, r1, r3, r0
    5056:	fb03 1102 	mla	r1, r3, r2, r1
	}
    505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    505c:	2600      	movs	r6, #0
    505e:	e7a9      	b.n	4fb4 <SDClass::usedSize()+0x5c>

00005060 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    5060:	b530      	push	{r4, r5, lr}
    5062:	b085      	sub	sp, #20
    5064:	4604      	mov	r4, r0
    5066:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    5068:	4832      	ldr	r0, [pc, #200]	; (5134 <SDClass::begin(unsigned char)+0xd4>)
    506a:	f006 fc49 	bl	b900 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    506e:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    5072:	2dfe      	cmp	r5, #254	; 0xfe
    5074:	d004      	beq.n	5080 <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    5076:	2d36      	cmp	r5, #54	; 0x36
    5078:	d930      	bls.n	50dc <SDClass::begin(unsigned char)+0x7c>
	return false;
    507a:	2000      	movs	r0, #0
}
    507c:	b005      	add	sp, #20
    507e:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    5080:	23ff      	movs	r3, #255	; 0xff
    5082:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    5086:	2100      	movs	r1, #0
    5088:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    508c:	f204 4594 	addw	r5, r4, #1172	; 0x494
    5090:	4628      	mov	r0, r5
    5092:	f005 ff9d 	bl	afd0 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    5096:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    509a:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    509e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    50a0:	4628      	mov	r0, r5
    50a2:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    50a4:	b158      	cbz	r0, 50be <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    50a6:	2300      	movs	r3, #0
    50a8:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    50ac:	232e      	movs	r3, #46	; 0x2e
    50ae:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    50b2:	2103      	movs	r1, #3
    50b4:	202e      	movs	r0, #46	; 0x2e
    50b6:	f007 ff55 	bl	cf64 <pinMode>
		return ret;
    50ba:	2000      	movs	r0, #0
    50bc:	e7de      	b.n	507c <SDClass::begin(unsigned char)+0x1c>
    50be:	2301      	movs	r3, #1
    50c0:	461a      	mov	r2, r3
    50c2:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    50c6:	1d20      	adds	r0, r4, #4
    50c8:	f004 fd20 	bl	9b0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    50cc:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    50d0:	232e      	movs	r3, #46	; 0x2e
    50d2:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    50d6:	2800      	cmp	r0, #0
    50d8:	d1d0      	bne.n	507c <SDClass::begin(unsigned char)+0x1c>
    50da:	e7ea      	b.n	50b2 <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    50dc:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    50e0:	2300      	movs	r3, #0
    50e2:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    50e6:	4a14      	ldr	r2, [pc, #80]	; (5138 <SDClass::begin(unsigned char)+0xd8>)
    50e8:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    50ec:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    50f0:	f88d 5004 	strb.w	r5, [sp, #4]
    50f4:	f88d 3005 	strb.w	r3, [sp, #5]
    50f8:	9202      	str	r2, [sp, #8]
    50fa:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    50fc:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    5100:	ab04      	add	r3, sp, #16
    5102:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    5106:	4628      	mov	r0, r5
    5108:	f005 f9d4 	bl	a4b4 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    510c:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    5110:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    5114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5116:	4628      	mov	r0, r5
    5118:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    511a:	b118      	cbz	r0, 5124 <SDClass::begin(unsigned char)+0xc4>
    511c:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    511e:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    5122:	e7ab      	b.n	507c <SDClass::begin(unsigned char)+0x1c>
    5124:	2301      	movs	r3, #1
    5126:	461a      	mov	r2, r3
    5128:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    512c:	1d20      	adds	r0, r4, #4
    512e:	f004 fced 	bl	9b0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5132:	e7f4      	b.n	511e <SDClass::begin(unsigned char)+0xbe>
    5134:	00004c69 	.word	0x00004c69
    5138:	017d7840 	.word	0x017d7840

0000513c <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    513c:	b530      	push	{r4, r5, lr}
    513e:	b085      	sub	sp, #20
    5140:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    5142:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    5146:	2bff      	cmp	r3, #255	; 0xff
    5148:	d01e      	beq.n	5188 <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    514a:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    514e:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    5152:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    5156:	f88d 3004 	strb.w	r3, [sp, #4]
    515a:	f88d 0005 	strb.w	r0, [sp, #5]
    515e:	9102      	str	r1, [sp, #8]
    5160:	9203      	str	r2, [sp, #12]
    5162:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    5166:	ab04      	add	r3, sp, #16
    5168:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    516c:	4628      	mov	r0, r5
    516e:	f005 f9a1 	bl	a4b4 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    5172:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    5176:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    517c:	4628      	mov	r0, r5
    517e:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    5180:	b1d8      	cbz	r0, 51ba <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    5182:	2000      	movs	r0, #0
  }
    5184:	b005      	add	sp, #20
    5186:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    5188:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    518c:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    5190:	4628      	mov	r0, r5
    5192:	f005 ff1d 	bl	afd0 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    5196:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    519a:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    51a0:	4628      	mov	r0, r5
    51a2:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    51a4:	b108      	cbz	r0, 51aa <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    51a6:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    51a8:	e7ec      	b.n	5184 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    51aa:	2301      	movs	r3, #1
    51ac:	461a      	mov	r2, r3
    51ae:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    51b2:	4620      	mov	r0, r4
    51b4:	f004 fcaa 	bl	9b0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    51b8:	e7e4      	b.n	5184 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    51ba:	2301      	movs	r3, #1
    51bc:	461a      	mov	r2, r3
    51be:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    51c2:	4620      	mov	r0, r4
    51c4:	f004 fca2 	bl	9b0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    51c8:	e7dc      	b.n	5184 <SdBase<FsVolume, FsFormatter>::restart()+0x48>

000051ca <SDClass::format(int, char, Print&)>:
{
    51ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51ce:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    51d0:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    51d4:	b39c      	cbz	r4, 523e <SDClass::format(int, char, Print&)+0x74>
    51d6:	4605      	mov	r5, r0
    51d8:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    51da:	6823      	ldr	r3, [r4, #0]
    51dc:	69db      	ldr	r3, [r3, #28]
    51de:	4620      	mov	r0, r4
    51e0:	4798      	blx	r3
    51e2:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    51e4:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    51e8:	d804      	bhi.n	51f4 <SDClass::format(int, char, Print&)+0x2a>
    51ea:	2600      	movs	r6, #0
}
    51ec:	4630      	mov	r0, r6
    51ee:	b00c      	add	sp, #48	; 0x30
    51f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    51f4:	f44f 7000 	mov.w	r0, #512	; 0x200
    51f8:	f00b fc38 	bl	10a6c <malloc>
	if (!buf) return false; // unable to allocate memory
    51fc:	4680      	mov	r8, r0
    51fe:	b300      	cbz	r0, 5242 <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    5200:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    5204:	d913      	bls.n	522e <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    5206:	463b      	mov	r3, r7
    5208:	4602      	mov	r2, r0
    520a:	4621      	mov	r1, r4
    520c:	a801      	add	r0, sp, #4
    520e:	f001 fb23 	bl	6858 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    5212:	4606      	mov	r6, r0
	free(buf);
    5214:	4640      	mov	r0, r8
    5216:	f00b fc31 	bl	10a7c <free>
	if (ret) {
    521a:	2e00      	cmp	r6, #0
    521c:	d0e6      	beq.n	51ec <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    521e:	6823      	ldr	r3, [r4, #0]
    5220:	6a1b      	ldr	r3, [r3, #32]
    5222:	4620      	mov	r0, r4
    5224:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    5226:	1d28      	adds	r0, r5, #4
    5228:	f7ff ff88 	bl	513c <SdBase<FsVolume, FsFormatter>::restart()>
    522c:	e7de      	b.n	51ec <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    522e:	463b      	mov	r3, r7
    5230:	4602      	mov	r2, r0
    5232:	4621      	mov	r1, r4
    5234:	a801      	add	r0, sp, #4
    5236:	f003 ff7f 	bl	9138 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    523a:	4606      	mov	r6, r0
    523c:	e7ea      	b.n	5214 <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    523e:	2600      	movs	r6, #0
    5240:	e7d4      	b.n	51ec <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    5242:	2600      	movs	r6, #0
    5244:	e7d2      	b.n	51ec <SDClass::format(int, char, Print&)+0x22>
	...

00005248 <SDClass::mediaPresent()>:
{
    5248:	b570      	push	{r4, r5, r6, lr}
    524a:	b084      	sub	sp, #16
    524c:	4604      	mov	r4, r0
    524e:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    5252:	2e00      	cmp	r6, #0
    5254:	d042      	beq.n	52dc <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    5256:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    525a:	b345      	cbz	r5, 52ae <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    525c:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    5260:	2bfe      	cmp	r3, #254	; 0xfe
    5262:	d00a      	beq.n	527a <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5264:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    5268:	2836      	cmp	r0, #54	; 0x36
    526a:	d914      	bls.n	5296 <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    526c:	6833      	ldr	r3, [r6, #0]
    526e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5270:	4669      	mov	r1, sp
    5272:	4630      	mov	r0, r6
    5274:	4798      	blx	r3
    5276:	4605      	mov	r5, r0
    5278:	e031      	b.n	52de <SDClass::mediaPresent()+0x96>
				s = card->status();
    527a:	6833      	ldr	r3, [r6, #0]
    527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    527e:	4630      	mov	r0, r6
    5280:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    5282:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5286:	d0ed      	beq.n	5264 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    5288:	bb48      	cbnz	r0, 52de <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    528a:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    528e:	2bfe      	cmp	r3, #254	; 0xfe
    5290:	d007      	beq.n	52a2 <SDClass::mediaPresent()+0x5a>
				ret = false;
    5292:	2500      	movs	r5, #0
    5294:	e023      	b.n	52de <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5296:	f007 fe53 	bl	cf40 <digitalRead>
    529a:	1e05      	subs	r5, r0, #0
    529c:	bf18      	it	ne
    529e:	2501      	movne	r5, #1
    52a0:	e01d      	b.n	52de <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    52a2:	2103      	movs	r1, #3
    52a4:	202e      	movs	r0, #46	; 0x2e
    52a6:	f007 fe5d 	bl	cf64 <pinMode>
				ret = false;
    52aa:	2500      	movs	r5, #0
    52ac:	e017      	b.n	52de <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    52ae:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    52b2:	2bfe      	cmp	r3, #254	; 0xfe
    52b4:	d008      	beq.n	52c8 <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    52b6:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    52ba:	2836      	cmp	r0, #54	; 0x36
    52bc:	d90a      	bls.n	52d4 <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    52be:	1d20      	adds	r0, r4, #4
    52c0:	f7ff ff3c 	bl	513c <SdBase<FsVolume, FsFormatter>::restart()>
    52c4:	4605      	mov	r5, r0
    52c6:	e00a      	b.n	52de <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    52c8:	4b07      	ldr	r3, [pc, #28]	; (52e8 <SDClass::mediaPresent()+0xa0>)
    52ca:	689b      	ldr	r3, [r3, #8]
			if (ret)
    52cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    52d0:	d1f5      	bne.n	52be <SDClass::mediaPresent()+0x76>
    52d2:	e004      	b.n	52de <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    52d4:	f007 fe34 	bl	cf40 <digitalRead>
			if (ret)
    52d8:	b108      	cbz	r0, 52de <SDClass::mediaPresent()+0x96>
    52da:	e7f0      	b.n	52be <SDClass::mediaPresent()+0x76>
		ret = false;
    52dc:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    52de:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    52e2:	4628      	mov	r0, r5
    52e4:	b004      	add	sp, #16
    52e6:	bd70      	pop	{r4, r5, r6, pc}
    52e8:	42008000 	.word	0x42008000

000052ec <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    52ec:	b508      	push	{r3, lr}
	SDClass() { }
    52ee:	4817      	ldr	r0, [pc, #92]	; (534c <_GLOBAL__sub_I_SD+0x60>)
    52f0:	4b17      	ldr	r3, [pc, #92]	; (5350 <_GLOBAL__sub_I_SD+0x64>)
    52f2:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    52f4:	2300      	movs	r3, #0
    52f6:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    52fa:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    52fe:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5302:	4a14      	ldr	r2, [pc, #80]	; (5354 <_GLOBAL__sub_I_SD+0x68>)
    5304:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    5308:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    530c:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    5310:	4a11      	ldr	r2, [pc, #68]	; (5358 <_GLOBAL__sub_I_SD+0x6c>)
    5312:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5316:	2207      	movs	r2, #7
    5318:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    531c:	2229      	movs	r2, #41	; 0x29
    531e:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    5322:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    5326:	4a0d      	ldr	r2, [pc, #52]	; (535c <_GLOBAL__sub_I_SD+0x70>)
    5328:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    532c:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    5330:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    5334:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    5338:	23ff      	movs	r3, #255	; 0xff
    533a:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    533e:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    5342:	4a07      	ldr	r2, [pc, #28]	; (5360 <_GLOBAL__sub_I_SD+0x74>)
    5344:	4907      	ldr	r1, [pc, #28]	; (5364 <_GLOBAL__sub_I_SD+0x78>)
    5346:	f00b faa9 	bl	1089c <__aeabi_atexit>
}
    534a:	bd08      	pop	{r3, pc}
    534c:	200040e0 	.word	0x200040e0
    5350:	20002374 	.word	0x20002374
    5354:	200023c8 	.word	0x200023c8
    5358:	003d0900 	.word	0x003d0900
    535c:	2000220c 	.word	0x2000220c
    5360:	20003200 	.word	0x20003200
    5364:	00004c65 	.word	0x00004c65

00005368 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5368:	b530      	push	{r4, r5, lr}
    536a:	b085      	sub	sp, #20
    536c:	4604      	mov	r4, r0
    536e:	468c      	mov	ip, r1
    5370:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    5372:	ab01      	add	r3, sp, #4
    5374:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5378:	c907      	ldmia	r1, {r0, r1, r2}
    537a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    537e:	ea4f 124c 	mov.w	r2, ip, lsl #5
    5382:	4619      	mov	r1, r3
    5384:	6a20      	ldr	r0, [r4, #32]
    5386:	f001 fef5 	bl	7174 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    538a:	2801      	cmp	r0, #1
    538c:	d106      	bne.n	539c <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    538e:	462a      	mov	r2, r5
    5390:	a901      	add	r1, sp, #4
    5392:	6a20      	ldr	r0, [r4, #32]
    5394:	f001 fe99 	bl	70ca <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5398:	b005      	add	sp, #20
    539a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    539c:	2000      	movs	r0, #0
    539e:	e7fb      	b.n	5398 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

000053a0 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    53a0:	b510      	push	{r4, lr}
    53a2:	4604      	mov	r4, r0
  bool rtn = sync();
    53a4:	f000 fde8 	bl	5f78 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    53a8:	2300      	movs	r3, #0
    53aa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    53ae:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    53b2:	bd10      	pop	{r4, pc}

000053b4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    53b4:	b538      	push	{r3, r4, r5, lr}
    53b6:	460d      	mov	r5, r1
    53b8:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    53ba:	2200      	movs	r2, #0
    53bc:	f100 0124 	add.w	r1, r0, #36	; 0x24
    53c0:	6a00      	ldr	r0, [r0, #32]
    53c2:	f001 fe82 	bl	70ca <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    53c6:	b128      	cbz	r0, 53d4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    53c8:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    53ca:	802a      	strh	r2, [r5, #0]
    53cc:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    53ce:	8023      	strh	r3, [r4, #0]
  return true;
    53d0:	2001      	movs	r0, #1

 fail:
  return false;
}
    53d2:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    53d4:	2000      	movs	r0, #0
    53d6:	e7fc      	b.n	53d2 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

000053d8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    53d8:	b538      	push	{r3, r4, r5, lr}
    53da:	460d      	mov	r5, r1
    53dc:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    53de:	2200      	movs	r2, #0
    53e0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    53e4:	6a00      	ldr	r0, [r0, #32]
    53e6:	f001 fe70 	bl	70ca <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    53ea:	b128      	cbz	r0, 53f8 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    53ec:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    53ee:	802a      	strh	r2, [r5, #0]
    53f0:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    53f2:	8023      	strh	r3, [r4, #0]
  return true;
    53f4:	2001      	movs	r0, #1

 fail:
  return false;
}
    53f6:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    53f8:	2000      	movs	r0, #0
    53fa:	e7fc      	b.n	53f6 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

000053fc <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    53fc:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    53fe:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5402:	b10b      	cbz	r3, 5408 <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5404:	2000      	movs	r0, #0
}
    5406:	bd38      	pop	{r3, r4, r5, pc}
    5408:	4604      	mov	r4, r0
    540a:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    540c:	2238      	movs	r2, #56	; 0x38
    540e:	2100      	movs	r1, #0
    5410:	f00b feb8 	bl	11184 <memset>
  m_attributes = FILE_ATTR_ROOT;
    5414:	2340      	movs	r3, #64	; 0x40
    5416:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    541a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    541c:	2001      	movs	r0, #1
    541e:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    5422:	e7f0      	b.n	5406 <ExFatFile::openRoot(ExFatVolume*)+0xa>

00005424 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5424:	b570      	push	{r4, r5, r6, lr}
    5426:	460d      	mov	r5, r1
    5428:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    542a:	782a      	ldrb	r2, [r5, #0]
    542c:	2a20      	cmp	r2, #32
    542e:	d103      	bne.n	5438 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    5430:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    5434:	2c20      	cmp	r4, #32
    5436:	d0fb      	beq.n	5430 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    5438:	600d      	str	r5, [r1, #0]
  fname->end = path;
    543a:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    543c:	782c      	ldrb	r4, [r5, #0]
    543e:	b384      	cbz	r4, 54a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5440:	2c2f      	cmp	r4, #47	; 0x2f
    5442:	d02e      	beq.n	54a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5444:	f105 0e01 	add.w	lr, r5, #1
    5448:	4e1f      	ldr	r6, [pc, #124]	; (54c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    544a:	e017      	b.n	547c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    544c:	2c1f      	cmp	r4, #31
    544e:	d823      	bhi.n	5498 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    5450:	2000      	movs	r0, #0
    5452:	e00b      	b.n	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5454:	2c5c      	cmp	r4, #92	; 0x5c
    5456:	d035      	beq.n	54c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    5458:	d903      	bls.n	5462 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    545a:	2c7c      	cmp	r4, #124	; 0x7c
    545c:	d107      	bne.n	546e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    545e:	2000      	movs	r0, #0
    5460:	e004      	b.n	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5462:	3c3e      	subs	r4, #62	; 0x3e
    5464:	b2e4      	uxtb	r4, r4
    5466:	2c01      	cmp	r4, #1
    5468:	d801      	bhi.n	546e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    546a:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    546c:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    546e:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    5470:	782c      	ldrb	r4, [r5, #0]
    5472:	f10e 0e01 	add.w	lr, lr, #1
    5476:	b1a4      	cbz	r4, 54a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5478:	2c2f      	cmp	r4, #47	; 0x2f
    547a:	d012      	beq.n	54a2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    547c:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    547e:	2c3c      	cmp	r4, #60	; 0x3c
    5480:	d8e8      	bhi.n	5454 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    5482:	2c21      	cmp	r4, #33	; 0x21
    5484:	d9e2      	bls.n	544c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    5486:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    548a:	fa5f fc8c 	uxtb.w	ip, ip
    548e:	fa26 fc0c 	lsr.w	ip, r6, ip
    5492:	f01c 0f01 	tst.w	ip, #1
    5496:	d113      	bne.n	54c0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    5498:	2c2e      	cmp	r4, #46	; 0x2e
    549a:	d0e9      	beq.n	5470 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    549c:	2c20      	cmp	r4, #32
    549e:	d0e7      	beq.n	5470 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    54a0:	e7e5      	b.n	546e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    54a2:	782a      	ldrb	r2, [r5, #0]
    54a4:	2a2f      	cmp	r2, #47	; 0x2f
    54a6:	d001      	beq.n	54ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    54a8:	2a20      	cmp	r2, #32
    54aa:	d105      	bne.n	54b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    54ac:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    54b0:	2c20      	cmp	r4, #32
    54b2:	d0fb      	beq.n	54ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    54b4:	2c2f      	cmp	r4, #47	; 0x2f
    54b6:	d0f9      	beq.n	54ac <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    54b8:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    54ba:	f001 fd13 	bl	6ee4 <ExFatFile::hashName(ExName_t*)>
    54be:	e7d5      	b.n	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    54c0:	2000      	movs	r0, #0
    54c2:	e7d3      	b.n	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    54c4:	2000      	movs	r0, #0
    54c6:	e7d1      	b.n	546c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    54c8:	05002101 	.word	0x05002101

000054cc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    54cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d0:	b083      	sub	sp, #12
    54d2:	4604      	mov	r4, r0
    54d4:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    54d6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    54da:	f013 0f01 	tst.w	r3, #1
    54de:	f000 80b3 	beq.w	5648 <ExFatFile::read(void*, unsigned int)+0x17c>
    54e2:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    54e4:	f013 0f40 	tst.w	r3, #64	; 0x40
    54e8:	d104      	bne.n	54f4 <ExFatFile::read(void*, unsigned int)+0x28>
    54ea:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    54ee:	f013 0f08 	tst.w	r3, #8
    54f2:	d00d      	beq.n	5510 <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    54f4:	6822      	ldr	r2, [r4, #0]
    54f6:	6863      	ldr	r3, [r4, #4]
    54f8:	6921      	ldr	r1, [r4, #16]
    54fa:	6960      	ldr	r0, [r4, #20]
    54fc:	9d00      	ldr	r5, [sp, #0]
    54fe:	18ad      	adds	r5, r5, r2
    5500:	f143 0300 	adc.w	r3, r3, #0
    5504:	42a9      	cmp	r1, r5
    5506:	eb70 0303 	sbcs.w	r3, r0, r3
    550a:	d201      	bcs.n	5510 <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    550c:	1a8b      	subs	r3, r1, r2
    550e:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    5510:	9b00      	ldr	r3, [sp, #0]
    5512:	2b00      	cmp	r3, #0
    5514:	f000 80a3 	beq.w	565e <ExFatFile::read(void*, unsigned int)+0x192>
    5518:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    551a:	f104 0318 	add.w	r3, r4, #24
    551e:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5520:	f240 1bff 	movw	fp, #511	; 0x1ff
    5524:	e036      	b.n	5594 <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    5526:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    552a:	f013 0f40 	tst.w	r3, #64	; 0x40
    552e:	d003      	beq.n	5538 <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    5530:	69a3      	ldr	r3, [r4, #24]
    5532:	3301      	adds	r3, #1
    5534:	61a3      	str	r3, [r4, #24]
    5536:	e041      	b.n	55bc <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5538:	9a01      	ldr	r2, [sp, #4]
    553a:	69a1      	ldr	r1, [r4, #24]
    553c:	f001 fde2 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5540:	2800      	cmp	r0, #0
    5542:	f2c0 8081 	blt.w	5648 <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    5546:	2800      	cmp	r0, #0
    5548:	d138      	bne.n	55bc <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    554a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    554e:	f013 0f50 	tst.w	r3, #80	; 0x50
    5552:	d079      	beq.n	5648 <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    5554:	9b00      	ldr	r3, [sp, #0]
    5556:	1bd8      	subs	r0, r3, r7
    5558:	e07e      	b.n	5658 <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    555a:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    555e:	42be      	cmp	r6, r7
    5560:	bf28      	it	cs
    5562:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    5564:	2200      	movs	r2, #0
    5566:	4629      	mov	r1, r5
    5568:	f508 7004 	add.w	r0, r8, #528	; 0x210
    556c:	f006 f995 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5570:	4601      	mov	r1, r0
    5572:	2800      	cmp	r0, #0
    5574:	d068      	beq.n	5648 <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    5576:	4632      	mov	r2, r6
    5578:	4449      	add	r1, r9
    557a:	4650      	mov	r0, sl
    557c:	f007 fd38 	bl	cff0 <memcpy>
    dst += n;
    5580:	44b2      	add	sl, r6
    m_curPosition += n;
    5582:	6823      	ldr	r3, [r4, #0]
    5584:	6862      	ldr	r2, [r4, #4]
    5586:	199b      	adds	r3, r3, r6
    5588:	f142 0200 	adc.w	r2, r2, #0
    558c:	6023      	str	r3, [r4, #0]
    558e:	6062      	str	r2, [r4, #4]
  while (toRead) {
    5590:	1bbf      	subs	r7, r7, r6
    5592:	d0df      	beq.n	5554 <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5594:	6823      	ldr	r3, [r4, #0]
    5596:	6862      	ldr	r2, [r4, #4]
    5598:	6a20      	ldr	r0, [r4, #32]
    559a:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    559e:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    55a0:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    55a4:	b956      	cbnz	r6, 55bc <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    55a6:	4313      	orrs	r3, r2
    55a8:	d1bd      	bne.n	5526 <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    55aa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    55ae:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    55b2:	bf14      	ite	ne
    55b4:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    55b8:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    55ba:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    55bc:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    55c0:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    55c4:	0a72      	lsrs	r2, r6, #9
    55c6:	69a5      	ldr	r5, [r4, #24]
    55c8:	3d02      	subs	r5, #2
    55ca:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    55cc:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    55d0:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    55d4:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    55d6:	f1b9 0f00 	cmp.w	r9, #0
    55da:	d1be      	bne.n	555a <ExFatFile::read(void*, unsigned int)+0x8e>
    55dc:	455f      	cmp	r7, fp
    55de:	d9bc      	bls.n	555a <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    55e0:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    55e4:	428d      	cmp	r5, r1
    55e6:	d0b8      	beq.n	555a <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    55e8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    55ec:	d20a      	bcs.n	5604 <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    55ee:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    55f2:	6803      	ldr	r3, [r0, #0]
    55f4:	691b      	ldr	r3, [r3, #16]
    55f6:	4652      	mov	r2, sl
    55f8:	4629      	mov	r1, r5
    55fa:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    55fc:	b320      	cbz	r0, 5648 <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    55fe:	f44f 7600 	mov.w	r6, #512	; 0x200
    5602:	e7bd      	b.n	5580 <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5604:	f04f 0901 	mov.w	r9, #1
    5608:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    560c:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5610:	0a7b      	lsrs	r3, r7, #9
    5612:	4599      	cmp	r9, r3
    5614:	bf28      	it	cs
    5616:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    5618:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    561c:	428d      	cmp	r5, r1
    561e:	d808      	bhi.n	5632 <ExFatFile::read(void*, unsigned int)+0x166>
    5620:	eb05 0309 	add.w	r3, r5, r9
    5624:	4299      	cmp	r1, r3
    5626:	d204      	bcs.n	5632 <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    5628:	f508 7004 	add.w	r0, r8, #528	; 0x210
    562c:	f006 f90e 	bl	b84c <FsCache::sync()>
    5630:	b150      	cbz	r0, 5648 <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    5632:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5636:	6803      	ldr	r3, [r0, #0]
    5638:	f8d3 8014 	ldr.w	r8, [r3, #20]
    563c:	464b      	mov	r3, r9
    563e:	4652      	mov	r2, sl
    5640:	4629      	mov	r1, r5
    5642:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5644:	2800      	cmp	r0, #0
    5646:	d19b      	bne.n	5580 <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    5648:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    564c:	f043 0302 	orr.w	r3, r3, #2
    5650:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5658:	b003      	add	sp, #12
    565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    565e:	461f      	mov	r7, r3
    5660:	e778      	b.n	5554 <ExFatFile::read(void*, unsigned int)+0x88>

00005662 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5662:	b5f0      	push	{r4, r5, r6, r7, lr}
    5664:	b083      	sub	sp, #12
    5666:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    5668:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    566c:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    566e:	2201      	movs	r2, #1
    5670:	f10d 0107 	add.w	r1, sp, #7
    5674:	f7ff ff2a 	bl	54cc <ExFatFile::read(void*, unsigned int)>
    5678:	2801      	cmp	r0, #1
    567a:	bf0c      	ite	eq
    567c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5680:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    5684:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    5688:	61a5      	str	r5, [r4, #24]
}
    568a:	b003      	add	sp, #12
    568c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000568e <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    568e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5692:	4604      	mov	r4, r0
    5694:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5696:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    569a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    569e:	2a00      	cmp	r2, #0
    56a0:	d054      	beq.n	574c <ExFatFile::seekSet(unsigned long long)+0xbe>
    56a2:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    56a4:	6801      	ldr	r1, [r0, #0]
    56a6:	f8d0 c004 	ldr.w	ip, [r0, #4]
    56aa:	459c      	cmp	ip, r3
    56ac:	bf08      	it	eq
    56ae:	42b1      	cmpeq	r1, r6
    56b0:	d05d      	beq.n	576e <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    56b2:	ea56 0307 	orrs.w	r3, r6, r7
    56b6:	d04e      	beq.n	5756 <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    56b8:	f012 0f08 	tst.w	r2, #8
    56bc:	d004      	beq.n	56c8 <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    56be:	6900      	ldr	r0, [r0, #16]
    56c0:	6963      	ldr	r3, [r4, #20]
    56c2:	42b0      	cmp	r0, r6
    56c4:	41bb      	sbcs	r3, r7
    56c6:	d341      	bcc.n	574c <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    56c8:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    56cc:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    56d0:	3309      	adds	r3, #9
    56d2:	b2db      	uxtb	r3, r3
    56d4:	1e75      	subs	r5, r6, #1
    56d6:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    56da:	f1c3 0920 	rsb	r9, r3, #32
    56de:	f1a3 0020 	sub.w	r0, r3, #32
    56e2:	40dd      	lsrs	r5, r3
    56e4:	fa0a f909 	lsl.w	r9, sl, r9
    56e8:	ea45 0509 	orr.w	r5, r5, r9
    56ec:	fa2a f000 	lsr.w	r0, sl, r0
    56f0:	4305      	orrs	r5, r0
  if (isContiguous()) {
    56f2:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    56f6:	f010 0f40 	tst.w	r0, #64	; 0x40
    56fa:	d132      	bne.n	5762 <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    56fc:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    5700:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    5704:	f1c3 0920 	rsb	r9, r3, #32
    5708:	f1a3 0020 	sub.w	r0, r3, #32
    570c:	fa2b f303 	lsr.w	r3, fp, r3
    5710:	fa0a f909 	lsl.w	r9, sl, r9
    5714:	ea43 0309 	orr.w	r3, r3, r9
    5718:	fa2a f000 	lsr.w	r0, sl, r0
    571c:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    571e:	ea51 0c0c 	orrs.w	ip, r1, ip
    5722:	d001      	beq.n	5728 <ExFatFile::seekSet(unsigned long long)+0x9a>
    5724:	429d      	cmp	r5, r3
    5726:	d220      	bcs.n	576a <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5728:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    572c:	bf14      	ite	ne
    572e:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    5732:	69e3      	ldreq	r3, [r4, #28]
    5734:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5736:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    573a:	b175      	cbz	r5, 575a <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    573c:	464a      	mov	r2, r9
    573e:	69a1      	ldr	r1, [r4, #24]
    5740:	6a20      	ldr	r0, [r4, #32]
    5742:	f001 fcdf 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5746:	3d01      	subs	r5, #1
    5748:	2800      	cmp	r0, #0
    574a:	dcf6      	bgt.n	573a <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    574c:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    5750:	2000      	movs	r0, #0
}
    5752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    5756:	2300      	movs	r3, #0
    5758:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    575a:	6026      	str	r6, [r4, #0]
    575c:	6067      	str	r7, [r4, #4]
  return true;
    575e:	2001      	movs	r0, #1
    5760:	e7f7      	b.n	5752 <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    5762:	69e3      	ldr	r3, [r4, #28]
    5764:	442b      	add	r3, r5
    5766:	61a3      	str	r3, [r4, #24]
    goto done;
    5768:	e7f7      	b.n	575a <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    576a:	1aed      	subs	r5, r5, r3
    576c:	e7e3      	b.n	5736 <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    576e:	2001      	movs	r0, #1
    5770:	e7ef      	b.n	5752 <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

00005774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5778:	b08f      	sub	sp, #60	; 0x3c
    577a:	4607      	mov	r7, r0
    577c:	9302      	str	r3, [sp, #8]
    577e:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    5782:	f1bb 0f00 	cmp.w	fp, #0
    5786:	d10e      	bne.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5788:	460d      	mov	r5, r1
    578a:	4691      	mov	r9, r2
    578c:	461a      	mov	r2, r3
    578e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5792:	f013 0f50 	tst.w	r3, #80	; 0x50
    5796:	d006      	beq.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    5798:	f002 0303 	and.w	r3, r2, #3
    579c:	2b01      	cmp	r3, #1
    579e:	d02b      	beq.n	57f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    57a0:	2b02      	cmp	r3, #2
    57a2:	d02b      	beq.n	57fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    57a4:	b143      	cbz	r3, 57b8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    57a6:	2600      	movs	r6, #0
    57a8:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    57ac:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    57b0:	4630      	mov	r0, r6
    57b2:	b00f      	add	sp, #60	; 0x3c
    57b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    57b8:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    57ba:	9a02      	ldr	r2, [sp, #8]
    57bc:	f002 0208 	and.w	r2, r2, #8
    57c0:	4313      	orrs	r3, r2
    57c2:	9303      	str	r3, [sp, #12]
  if (fname) {
    57c4:	f1b9 0f00 	cmp.w	r9, #0
    57c8:	d01a      	beq.n	5800 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    57ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
    57ce:	f103 080e 	add.w	r8, r3, #14
    57d2:	4bae      	ldr	r3, [pc, #696]	; (5a8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    57d4:	fba3 3808 	umull	r3, r8, r3, r8
    57d8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    57dc:	f108 0802 	add.w	r8, r8, #2
    57e0:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    57e4:	2200      	movs	r2, #0
    57e6:	2300      	movs	r3, #0
    57e8:	4628      	mov	r0, r5
    57ea:	f7ff ff50 	bl	568e <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    57ee:	465c      	mov	r4, fp
    57f0:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    57f2:	f04f 0a20 	mov.w	sl, #32
    57f6:	e00c      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    57f8:	2302      	movs	r3, #2
    57fa:	e7de      	b.n	57ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    57fc:	2303      	movs	r3, #3
    57fe:	e7dc      	b.n	57ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    5800:	f04f 0803 	mov.w	r8, #3
    5804:	e7f3      	b.n	57ee <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    5806:	461e      	mov	r6, r3
    5808:	e003      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    580a:	461e      	mov	r6, r3
    580c:	e001      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    580e:	b1cb      	cbz	r3, 5844 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    5810:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5812:	4652      	mov	r2, sl
    5814:	a906      	add	r1, sp, #24
    5816:	4628      	mov	r0, r5
    5818:	f7ff fe58 	bl	54cc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    581c:	b1a8      	cbz	r0, 584a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    581e:	2820      	cmp	r0, #32
    5820:	d1c1      	bne.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    5822:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5826:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    582a:	2a00      	cmp	r2, #0
    582c:	db20      	blt.n	5870 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    582e:	b924      	cbnz	r4, 583a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5830:	682a      	ldr	r2, [r5, #0]
    5832:	3a20      	subs	r2, #32
    5834:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5836:	69aa      	ldr	r2, [r5, #24]
    5838:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    583a:	4544      	cmp	r4, r8
    583c:	d2e7      	bcs.n	580e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    583e:	3401      	adds	r4, #1
    5840:	b2e4      	uxtb	r4, r4
    5842:	e7e4      	b.n	580e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    5844:	f1b9 0f00 	cmp.w	r9, #0
    5848:	d0ad      	beq.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    584a:	9b02      	ldr	r3, [sp, #8]
    584c:	f413 7f00 	tst.w	r3, #512	; 0x200
    5850:	d0a9      	beq.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5852:	9b03      	ldr	r3, [sp, #12]
    5854:	f013 0f02 	tst.w	r3, #2
    5858:	d0a5      	beq.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    585a:	f1b9 0f00 	cmp.w	r9, #0
    585e:	d0a2      	beq.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    5860:	4544      	cmp	r4, r8
    5862:	f080 80cd 	bcs.w	5a00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    5866:	2620      	movs	r6, #32
    5868:	f8dd a004 	ldr.w	sl, [sp, #4]
    586c:	46bb      	mov	fp, r7
    586e:	e0b2      	b.n	59d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    5870:	bb3e      	cbnz	r6, 58c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    5872:	4544      	cmp	r4, r8
    5874:	bf38      	it	cc
    5876:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    5878:	2b85      	cmp	r3, #133	; 0x85
    587a:	d1ca      	bne.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    587c:	2238      	movs	r2, #56	; 0x38
    587e:	2100      	movs	r1, #0
    5880:	4638      	mov	r0, r7
    5882:	f00b fc7f 	bl	11184 <memset>
      m_setCount = dirFile->setCount;
    5886:	f89d 3019 	ldrb.w	r3, [sp, #25]
    588a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    588e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    5892:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5896:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    589a:	bf08      	it	eq
    589c:	f043 0308 	orreq.w	r3, r3, #8
    58a0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    58a4:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    58a6:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    58a8:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    58aa:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    58ac:	682b      	ldr	r3, [r5, #0]
    58ae:	3b20      	subs	r3, #32
    58b0:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    58b2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    58b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    58ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    58be:	2601      	movs	r6, #1
    58c0:	e7a7      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    58c2:	2bc0      	cmp	r3, #192	; 0xc0
    58c4:	d003      	beq.n	58ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    58c6:	2bc1      	cmp	r3, #193	; 0xc1
    58c8:	d033      	beq.n	5932 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    58ca:	2600      	movs	r6, #0
    58cc:	e7a1      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    58ce:	9a03      	ldr	r2, [sp, #12]
    58d0:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    58d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    58d8:	f013 0f02 	tst.w	r3, #2
    58dc:	d003      	beq.n	58e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    58de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    58e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    58e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    58ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    58ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58f0:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    58f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    58f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    58fa:	f1b9 0f00 	cmp.w	r9, #0
    58fe:	d02e      	beq.n	595e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5900:	f8d9 3000 	ldr.w	r3, [r9]
    5904:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5908:	f04f 0300 	mov.w	r3, #0
    590c:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    5910:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5914:	f8d9 2010 	ldr.w	r2, [r9, #16]
    5918:	429a      	cmp	r2, r3
    591a:	d001      	beq.n	5920 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    591c:	2600      	movs	r6, #0
    591e:	e778      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    5920:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    5924:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5928:	429e      	cmp	r6, r3
    592a:	bf14      	ite	ne
    592c:	2600      	movne	r6, #0
    592e:	2601      	moveq	r6, #1
    5930:	e76f      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    5932:	464a      	mov	r2, r9
    5934:	a906      	add	r1, sp, #24
    5936:	4638      	mov	r0, r7
    5938:	f001 fa4c 	bl	6dd4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    593c:	4603      	mov	r3, r0
    593e:	2800      	cmp	r0, #0
    5940:	f43f af61 	beq.w	5806 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    5944:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    5948:	2a00      	cmp	r2, #0
    594a:	f47f af5e 	bne.w	580a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    594e:	f8d9 1008 	ldr.w	r1, [r9, #8]
    5952:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5956:	4291      	cmp	r1, r2
    5958:	d001      	beq.n	595e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    595a:	461e      	mov	r6, r3
    595c:	e759      	b.n	5812 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    595e:	9b02      	ldr	r3, [sp, #8]
    5960:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5964:	f47f af1f 	bne.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5968:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    596c:	d105      	bne.n	597a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    596e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5972:	f013 0f02 	tst.w	r3, #2
    5976:	f000 80d5 	beq.w	5b24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    597a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    597e:	f013 0f11 	tst.w	r3, #17
    5982:	f47f af10 	bne.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5986:	9b02      	ldr	r3, [sp, #8]
    5988:	f413 6f80 	tst.w	r3, #1024	; 0x400
    598c:	f000 80cf 	beq.w	5b2e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5994:	f013 0f02 	tst.w	r3, #2
    5998:	f43f af05 	beq.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    599c:	2200      	movs	r2, #0
    599e:	2300      	movs	r3, #0
    59a0:	4638      	mov	r0, r7
    59a2:	f7ff fe74 	bl	568e <ExFatFile::seekSet(unsigned long long)>
    59a6:	2800      	cmp	r0, #0
    59a8:	f43f aefd 	beq.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    59ac:	4638      	mov	r0, r7
    59ae:	f000 fd24 	bl	63fa <ExFatFile::truncate()>
    if (!truncate(0)) {
    59b2:	4606      	mov	r6, r0
    59b4:	2800      	cmp	r0, #0
    59b6:	f47f aefb 	bne.w	57b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    59ba:	e6f4      	b.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    59bc:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    59be:	4628      	mov	r0, r5
    59c0:	f000 fb08 	bl	5fd4 <ExFatFile::addDirCluster()>
    59c4:	b908      	cbnz	r0, 59ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    59c6:	465f      	mov	r7, fp
    59c8:	e6ed      	b.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    59ca:	61af      	str	r7, [r5, #24]
      continue;
    59cc:	e001      	b.n	59d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    59ce:	3401      	adds	r4, #1
    59d0:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    59d2:	4544      	cmp	r4, r8
    59d4:	d211      	bcs.n	59fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    59d6:	4632      	mov	r2, r6
    59d8:	a906      	add	r1, sp, #24
    59da:	4628      	mov	r0, r5
    59dc:	f7ff fd76 	bl	54cc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    59e0:	2800      	cmp	r0, #0
    59e2:	d0eb      	beq.n	59bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    59e4:	2820      	cmp	r0, #32
    59e6:	f040 809b 	bne.w	5b20 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    59ea:	2c00      	cmp	r4, #0
    59ec:	d1ef      	bne.n	59ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    59ee:	682b      	ldr	r3, [r5, #0]
    59f0:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    59f4:	69ab      	ldr	r3, [r5, #24]
    59f6:	9300      	str	r3, [sp, #0]
    59f8:	e7e9      	b.n	59ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    59fa:	f8cd a004 	str.w	sl, [sp, #4]
    59fe:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5a00:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    5a04:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    5a08:	2238      	movs	r2, #56	; 0x38
    5a0a:	2100      	movs	r1, #0
    5a0c:	4638      	mov	r0, r7
    5a0e:	f00b fbb9 	bl	11184 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5a12:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    5a14:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    5a16:	2308      	movs	r3, #8
    5a18:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    5a1c:	9b00      	ldr	r3, [sp, #0]
    5a1e:	627b      	str	r3, [r7, #36]	; 0x24
    5a20:	9b01      	ldr	r3, [sp, #4]
    5a22:	62bb      	str	r3, [r7, #40]	; 0x28
    5a24:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    5a28:	f8d9 3000 	ldr.w	r3, [r9]
    5a2c:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5a30:	2300      	movs	r3, #0
    5a32:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5a36:	f1b8 0f00 	cmp.w	r8, #0
    5a3a:	d06c      	beq.n	5b16 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5a3c:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    5a3e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    5a42:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    5a46:	f8df b048 	ldr.w	fp, [pc, #72]	; 5a90 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    5a4a:	e036      	b.n	5aba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    5a4c:	2385      	movs	r3, #133	; 0x85
    5a4e:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    5a50:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5a54:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    5a58:	f8db 3000 	ldr.w	r3, [fp]
    5a5c:	b17b      	cbz	r3, 5a7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    5a5e:	f10d 0213 	add.w	r2, sp, #19
    5a62:	f10d 0116 	add.w	r1, sp, #22
    5a66:	a805      	add	r0, sp, #20
    5a68:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a6a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5a6e:	8163      	strh	r3, [r4, #10]
    5a70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a74:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    5a76:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5a7a:	7523      	strb	r3, [r4, #20]
    5a7c:	e019      	b.n	5ab2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5a7e:	f245 6321 	movw	r3, #22049	; 0x5621
    5a82:	8163      	strh	r3, [r4, #10]
    5a84:	81e3      	strh	r3, [r4, #14]
    5a86:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    5a88:	e013      	b.n	5ab2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5a8a:	bf00      	nop
    5a8c:	88888889 	.word	0x88888889
    5a90:	20004b68 	.word	0x20004b68
      dirStream->type = EXFAT_TYPE_STREAM;
    5a94:	23c0      	movs	r3, #192	; 0xc0
    5a96:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5a98:	2301      	movs	r3, #1
    5a9a:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5a9c:	9b03      	ldr	r3, [sp, #12]
    5a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5aa6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5aaa:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5aac:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    5ab0:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5ab2:	3601      	adds	r6, #1
    5ab4:	b2f3      	uxtb	r3, r6
    5ab6:	4598      	cmp	r8, r3
    5ab8:	d92d      	bls.n	5b16 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5aba:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5abc:	2201      	movs	r2, #1
    5abe:	4629      	mov	r1, r5
    5ac0:	4638      	mov	r0, r7
    5ac2:	f7ff fc51 	bl	5368 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5ac6:	4604      	mov	r4, r0
    5ac8:	2800      	cmp	r0, #0
    5aca:	f43f ae6c 	beq.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5ace:	f990 3000 	ldrsb.w	r3, [r0]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	f6ff ae67 	blt.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    5ad8:	2220      	movs	r2, #32
    5ada:	2100      	movs	r1, #0
    5adc:	f00b fb52 	bl	11184 <memset>
    if (i == 0) {
    5ae0:	2d00      	cmp	r5, #0
    5ae2:	d0b3      	beq.n	5a4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    5ae4:	2d01      	cmp	r5, #1
    5ae6:	d0d5      	beq.n	5a94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    5ae8:	23c1      	movs	r3, #193	; 0xc1
    5aea:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    5aec:	4625      	mov	r5, r4
    5aee:	341e      	adds	r4, #30
    5af0:	e006      	b.n	5b00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    5af2:	4648      	mov	r0, r9
    5af4:	f005 ff10 	bl	b918 <FsName::get16()>
    5af8:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    5afc:	42ac      	cmp	r4, r5
    5afe:	d0d8      	beq.n	5ab2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    5b00:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    5b04:	2b00      	cmp	r3, #0
    5b06:	d1f4      	bne.n	5af2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5b08:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5b0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    5b10:	429a      	cmp	r2, r3
    5b12:	d1ee      	bne.n	5af2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5b14:	e7cd      	b.n	5ab2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    5b16:	4638      	mov	r0, r7
    5b18:	f000 fa2e 	bl	5f78 <ExFatFile::sync()>
    5b1c:	4606      	mov	r6, r0
    5b1e:	e647      	b.n	57b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5b20:	465f      	mov	r7, fp
    5b22:	e640      	b.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5b24:	9b02      	ldr	r3, [sp, #8]
    5b26:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5b2a:	f47f ae3c 	bne.w	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5b2e:	9b02      	ldr	r3, [sp, #8]
    5b30:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    5b34:	f43f ae3c 	beq.w	57b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5b38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5b3c:	4638      	mov	r0, r7
    5b3e:	f7ff fda6 	bl	568e <ExFatFile::seekSet(unsigned long long)>
    5b42:	4606      	mov	r6, r0
    5b44:	2800      	cmp	r0, #0
    5b46:	f47f ae33 	bne.w	57b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5b4a:	e62c      	b.n	57a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

00005b4c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b50:	b096      	sub	sp, #88	; 0x58
    5b52:	9201      	str	r2, [sp, #4]
    5b54:	461f      	mov	r7, r3
  ExFatFile() {}
    5b56:	2300      	movs	r3, #0
    5b58:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    5b5c:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    5b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    5b64:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5b68:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d159      	bne.n	5c24 <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    5b70:	4604      	mov	r4, r0
    5b72:	460d      	mov	r5, r1
    5b74:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5b78:	f013 0f50 	tst.w	r3, #80	; 0x50
    5b7c:	d057      	beq.n	5c2e <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    5b7e:	4613      	mov	r3, r2
    5b80:	7812      	ldrb	r2, [r2, #0]
    5b82:	2a2f      	cmp	r2, #47	; 0x2f
    5b84:	d001      	beq.n	5b8a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5b86:	2600      	movs	r6, #0
    5b88:	e02c      	b.n	5be4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    5b8a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5b8e:	2a2f      	cmp	r2, #47	; 0x2f
    5b90:	d0fb      	beq.n	5b8a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5b92:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    5b94:	b92a      	cbnz	r2, 5ba2 <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    5b96:	6a29      	ldr	r1, [r5, #32]
    5b98:	4620      	mov	r0, r4
    5b9a:	f7ff fc2f 	bl	53fc <ExFatFile::openRoot(ExFatVolume*)>
    5b9e:	4603      	mov	r3, r0
    5ba0:	e041      	b.n	5c26 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5ba2:	6a29      	ldr	r1, [r5, #32]
    5ba4:	a808      	add	r0, sp, #32
    5ba6:	f7ff fc29 	bl	53fc <ExFatFile::openRoot(ExFatVolume*)>
    5baa:	4603      	mov	r3, r0
    5bac:	2800      	cmp	r0, #0
    5bae:	d03a      	beq.n	5c26 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    5bb0:	ad08      	add	r5, sp, #32
    5bb2:	e7e8      	b.n	5b86 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    5bb4:	46ae      	mov	lr, r5
    5bb6:	f8dc 0000 	ldr.w	r0, [ip]
    5bba:	f8dc 1004 	ldr.w	r1, [ip, #4]
    5bbe:	f8dc 2008 	ldr.w	r2, [ip, #8]
    5bc2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    5bc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5bca:	f10c 0c10 	add.w	ip, ip, #16
    5bce:	4675      	mov	r5, lr
    5bd0:	45c4      	cmp	ip, r8
    5bd2:	d1ef      	bne.n	5bb4 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    5bd4:	f8dc 0000 	ldr.w	r0, [ip]
    5bd8:	f8ce 0000 	str.w	r0, [lr]
    close();
    5bdc:	4620      	mov	r0, r4
    5bde:	f7ff fbdf 	bl	53a0 <ExFatFile::close()>
    dirFile = &tmpDir;
    5be2:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    5be4:	ab01      	add	r3, sp, #4
    5be6:	aa02      	add	r2, sp, #8
    5be8:	9901      	ldr	r1, [sp, #4]
    5bea:	4620      	mov	r0, r4
    5bec:	f7ff fc1a 	bl	5424 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5bf0:	4603      	mov	r3, r0
    5bf2:	b1c0      	cbz	r0, 5c26 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    5bf4:	9b01      	ldr	r3, [sp, #4]
    5bf6:	781b      	ldrb	r3, [r3, #0]
    5bf8:	b163      	cbz	r3, 5c14 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5bfa:	4633      	mov	r3, r6
    5bfc:	aa02      	add	r2, sp, #8
    5bfe:	4629      	mov	r1, r5
    5c00:	4620      	mov	r0, r4
    5c02:	f7ff fdb7 	bl	5774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c06:	4603      	mov	r3, r0
    5c08:	b168      	cbz	r0, 5c26 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    5c0a:	46a4      	mov	ip, r4
    5c0c:	ad08      	add	r5, sp, #32
    5c0e:	f104 0830 	add.w	r8, r4, #48	; 0x30
    5c12:	e7cf      	b.n	5bb4 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    5c14:	463b      	mov	r3, r7
    5c16:	aa02      	add	r2, sp, #8
    5c18:	4629      	mov	r1, r5
    5c1a:	4620      	mov	r0, r4
    5c1c:	f7ff fdaa 	bl	5774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c20:	4603      	mov	r3, r0
    5c22:	e000      	b.n	5c26 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    5c24:	2300      	movs	r3, #0
}
    5c26:	4618      	mov	r0, r3
    5c28:	b016      	add	sp, #88	; 0x58
    5c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    5c2e:	2300      	movs	r3, #0
    5c30:	e7f9      	b.n	5c26 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

00005c32 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5c32:	b129      	cbz	r1, 5c40 <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    5c34:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    5c36:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5c3a:	f7ff ff87 	bl	5b4c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5c3e:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    5c40:	2000      	movs	r0, #0
}
    5c42:	4770      	bx	lr

00005c44 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5c44:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5c46:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5c4a:	b97b      	cbnz	r3, 5c6c <ExFatFile::openNext(ExFatFile*, int)+0x28>
    5c4c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5c50:	f013 0f50 	tst.w	r3, #80	; 0x50
    5c54:	d00c      	beq.n	5c70 <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    5c56:	680b      	ldr	r3, [r1, #0]
    5c58:	f013 0f1f 	tst.w	r3, #31
    5c5c:	d001      	beq.n	5c62 <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    5c5e:	2000      	movs	r0, #0
    5c60:	e005      	b.n	5c6e <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    5c62:	4613      	mov	r3, r2
    5c64:	2200      	movs	r2, #0
    5c66:	f7ff fd85 	bl	5774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c6a:	e000      	b.n	5c6e <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    5c6c:	2000      	movs	r0, #0
}
    5c6e:	bd08      	pop	{r3, pc}
  return false;
    5c70:	2000      	movs	r0, #0
    5c72:	e7fc      	b.n	5c6e <ExFatFile::openNext(ExFatFile*, int)+0x2a>

00005c74 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    5c74:	b410      	push	{r4}
    5c76:	4684      	mov	ip, r0
    5c78:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5c7a:	f89c 4000 	ldrb.w	r4, [ip]
    5c7e:	2c85      	cmp	r4, #133	; 0x85
    5c80:	bf14      	ite	ne
    5c82:	2400      	movne	r4, #0
    5c84:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5c86:	2200      	movs	r2, #0
    5c88:	e000      	b.n	5c8c <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    5c8a:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5c8c:	03c3      	lsls	r3, r0, #15
    5c8e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    5c92:	f81c 1002 	ldrb.w	r1, [ip, r2]
    5c96:	fa11 f383 	uxtah	r3, r1, r3
    5c9a:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5c9c:	2a01      	cmp	r2, #1
    5c9e:	d101      	bne.n	5ca4 <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    5ca0:	2c00      	cmp	r4, #0
    5ca2:	d1f2      	bne.n	5c8a <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    5ca4:	3201      	adds	r2, #1
    5ca6:	2a1f      	cmp	r2, #31
    5ca8:	d9f0      	bls.n	5c8c <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
  }
  return checksum;
}
    5caa:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cae:	4770      	bx	lr

00005cb0 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    5cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cb2:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5cb4:	6a00      	ldr	r0, [r0, #32]
    5cb6:	69a1      	ldr	r1, [r4, #24]
    5cb8:	b101      	cbz	r1, 5cbc <ExFatFile::addCluster()+0xc>
    5cba:	3101      	adds	r1, #1
    5cbc:	2201      	movs	r2, #1
    5cbe:	f001 f943 	bl	6f48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    5cc2:	4605      	mov	r5, r0
  if (find < 2) {
    5cc4:	2801      	cmp	r0, #1
    5cc6:	d93c      	bls.n	5d42 <ExFatFile::addCluster()+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    5cc8:	2301      	movs	r3, #1
    5cca:	461a      	mov	r2, r3
    5ccc:	4601      	mov	r1, r0
    5cce:	6a20      	ldr	r0, [r4, #32]
    5cd0:	f001 f993 	bl	6ffa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5cd4:	4607      	mov	r7, r0
    5cd6:	2800      	cmp	r0, #0
    5cd8:	d034      	beq.n	5d44 <ExFatFile::addCluster()+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    5cda:	69a3      	ldr	r3, [r4, #24]
    5cdc:	b1bb      	cbz	r3, 5d0e <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5cde:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    5ce2:	f012 0f40 	tst.w	r2, #64	; 0x40
    5ce6:	d01a      	beq.n	5d1e <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    5ce8:	3301      	adds	r3, #1
    5cea:	42ab      	cmp	r3, r5
    5cec:	d015      	beq.n	5d1a <ExFatFile::addCluster()+0x6a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    5cf2:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5cf6:	69e1      	ldr	r1, [r4, #28]
    5cf8:	69a3      	ldr	r3, [r4, #24]
    5cfa:	428b      	cmp	r3, r1
    5cfc:	d90f      	bls.n	5d1e <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    5cfe:	1c4e      	adds	r6, r1, #1
    5d00:	4632      	mov	r2, r6
    5d02:	6a20      	ldr	r0, [r4, #32]
    5d04:	f001 fa5d 	bl	71c2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5d08:	b1f0      	cbz	r0, 5d48 <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5d0a:	4631      	mov	r1, r6
    5d0c:	e7f4      	b.n	5cf8 <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5d0e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5d16:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    5d1a:	61a5      	str	r5, [r4, #24]
  return true;
    5d1c:	e012      	b.n	5d44 <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    5d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5d22:	4629      	mov	r1, r5
    5d24:	6a20      	ldr	r0, [r4, #32]
    5d26:	f001 fa4c 	bl	71c2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5d2a:	b178      	cbz	r0, 5d4c <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    5d2c:	69a1      	ldr	r1, [r4, #24]
    5d2e:	2900      	cmp	r1, #0
    5d30:	d0f3      	beq.n	5d1a <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    5d32:	462a      	mov	r2, r5
    5d34:	6a20      	ldr	r0, [r4, #32]
    5d36:	f001 fa44 	bl	71c2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5d3a:	2800      	cmp	r0, #0
    5d3c:	d1ed      	bne.n	5d1a <ExFatFile::addCluster()+0x6a>

 fail:
  return false;
    5d3e:	4607      	mov	r7, r0
    5d40:	e000      	b.n	5d44 <ExFatFile::addCluster()+0x94>
    5d42:	2700      	movs	r7, #0
}
    5d44:	4638      	mov	r0, r7
    5d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    5d48:	4607      	mov	r7, r0
    5d4a:	e7fb      	b.n	5d44 <ExFatFile::addCluster()+0x94>
    5d4c:	4607      	mov	r7, r0
    5d4e:	e7f9      	b.n	5d44 <ExFatFile::addCluster()+0x94>

00005d50 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5d50:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    5d54:	f013 0f02 	tst.w	r3, #2
    5d58:	d04e      	beq.n	5df8 <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    5d5a:	b570      	push	{r4, r5, r6, lr}
    5d5c:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    5d5e:	69c1      	ldr	r1, [r0, #28]
    5d60:	b1e9      	cbz	r1, 5d9e <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    5d62:	f013 0f40 	tst.w	r3, #64	; 0x40
    5d66:	d041      	beq.n	5dec <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5d68:	6a00      	ldr	r0, [r0, #32]
    5d6a:	68aa      	ldr	r2, [r5, #8]
    5d6c:	68ec      	ldr	r4, [r5, #12]
    5d6e:	3a01      	subs	r2, #1
    5d70:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5d74:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    5d78:	3309      	adds	r3, #9
    5d7a:	b2db      	uxtb	r3, r3
    5d7c:	f1c3 0c20 	rsb	ip, r3, #32
    5d80:	f1a3 0620 	sub.w	r6, r3, #32
    5d84:	40da      	lsrs	r2, r3
    5d86:	fa04 fc0c 	lsl.w	ip, r4, ip
    5d8a:	ea42 020c 	orr.w	r2, r2, ip
    5d8e:	fa24 f606 	lsr.w	r6, r4, r6
    5d92:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    5d94:	2300      	movs	r3, #0
    5d96:	3201      	adds	r2, #1
    5d98:	f001 f92f 	bl	6ffa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5d9c:	b378      	cbz	r0, 5dfe <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    5d9e:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    5da0:	2601      	movs	r6, #1
    5da2:	4632      	mov	r2, r6
    5da4:	b2e1      	uxtb	r1, r4
    5da6:	4628      	mov	r0, r5
    5da8:	f7ff fade 	bl	5368 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5dac:	b330      	cbz	r0, 5dfc <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    5dae:	7803      	ldrb	r3, [r0, #0]
    5db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5db4:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5db6:	3401      	adds	r4, #1
    5db8:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    5dbc:	b2e3      	uxtb	r3, r4
    5dbe:	429a      	cmp	r2, r3
    5dc0:	d2ef      	bcs.n	5da2 <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    5dc2:	2300      	movs	r3, #0
    5dc4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    5dc8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    5dcc:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5dce:	4620      	mov	r0, r4
    5dd0:	f005 fd3c 	bl	b84c <FsCache::sync()>
    5dd4:	b198      	cbz	r0, 5dfe <ExFatFile::remove()+0xae>
    5dd6:	f504 7004 	add.w	r0, r4, #528	; 0x210
    5dda:	f005 fd37 	bl	b84c <FsCache::sync()>
    5dde:	b170      	cbz	r0, 5dfe <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5de0:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    5de4:	6803      	ldr	r3, [r0, #0]
    5de6:	6a1b      	ldr	r3, [r3, #32]
    5de8:	4798      	blx	r3
    5dea:	e008      	b.n	5dfe <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    5dec:	6a00      	ldr	r0, [r0, #32]
    5dee:	f001 fa08 	bl	7202 <ExFatPartition::freeChain(unsigned long)>
    5df2:	2800      	cmp	r0, #0
    5df4:	d1d3      	bne.n	5d9e <ExFatFile::remove()+0x4e>
    5df6:	e002      	b.n	5dfe <ExFatFile::remove()+0xae>

 fail:
  return false;
    5df8:	2000      	movs	r0, #0
}
    5dfa:	4770      	bx	lr
  return false;
    5dfc:	2000      	movs	r0, #0
}
    5dfe:	bd70      	pop	{r4, r5, r6, pc}

00005e00 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    5e00:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5e04:	f013 0f10 	tst.w	r3, #16
    5e08:	d101      	bne.n	5e0e <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    5e0a:	2000      	movs	r0, #0
}
    5e0c:	4770      	bx	lr
bool ExFatFile::rmdir() {
    5e0e:	b530      	push	{r4, r5, lr}
    5e10:	b089      	sub	sp, #36	; 0x24
    5e12:	4604      	mov	r4, r0
    seekSet(0);
    5e14:	2200      	movs	r2, #0
    5e16:	2300      	movs	r3, #0
    5e18:	f7ff fc39 	bl	568e <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    5e1c:	2520      	movs	r5, #32
    5e1e:	462a      	mov	r2, r5
    5e20:	4669      	mov	r1, sp
    5e22:	4620      	mov	r0, r4
    5e24:	f7ff fb52 	bl	54cc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5e28:	b148      	cbz	r0, 5e3e <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    5e2a:	2820      	cmp	r0, #32
    5e2c:	d115      	bne.n	5e5a <ExFatFile::rmdir()+0x5a>
    5e2e:	f89d 2000 	ldrb.w	r2, [sp]
    5e32:	f99d 3000 	ldrsb.w	r3, [sp]
    5e36:	2b00      	cmp	r3, #0
    5e38:	db11      	blt.n	5e5e <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    5e3a:	2a00      	cmp	r2, #0
    5e3c:	d1ef      	bne.n	5e1e <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    5e3e:	2308      	movs	r3, #8
    5e40:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    5e44:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5e48:	f043 0302 	orr.w	r3, r3, #2
    5e4c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    5e50:	4620      	mov	r0, r4
    5e52:	f7ff ff7d 	bl	5d50 <ExFatFile::remove()>
}
    5e56:	b009      	add	sp, #36	; 0x24
    5e58:	bd30      	pop	{r4, r5, pc}
  return false;
    5e5a:	2000      	movs	r0, #0
    5e5c:	e7fb      	b.n	5e56 <ExFatFile::rmdir()+0x56>
    5e5e:	2000      	movs	r0, #0
    5e60:	e7f9      	b.n	5e56 <ExFatFile::rmdir()+0x56>
	...

00005e64 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5e68:	b083      	sub	sp, #12
    5e6a:	4604      	mov	r4, r0
    5e6c:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    5e6e:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5e70:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5e72:	f8df 9100 	ldr.w	r9, [pc, #256]	; 5f74 <ExFatFile::syncDir()+0x110>
    5e76:	e02a      	b.n	5ece <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5e78:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5e7c:	f003 0337 	and.w	r3, r3, #55	; 0x37
    5e80:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5e82:	f8d9 3000 	ldr.w	r3, [r9]
    5e86:	b183      	cbz	r3, 5eaa <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5e88:	f10d 0203 	add.w	r2, sp, #3
    5e8c:	f10d 0106 	add.w	r1, sp, #6
    5e90:	a801      	add	r0, sp, #4
    5e92:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    5e94:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5e98:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    5e9a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5e9e:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    5ea0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5ea4:	81eb      	strh	r3, [r5, #14]
    5ea6:	822a      	strh	r2, [r5, #16]
    5ea8:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    5eaa:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    5eac:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5eb0:	f043 0301 	orr.w	r3, r3, #1
    5eb4:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    5eb8:	4639      	mov	r1, r7
    5eba:	4628      	mov	r0, r5
    5ebc:	f7ff feda 	bl	5c74 <exFatDirChecksum(unsigned char const*, unsigned short)>
    5ec0:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5ec2:	3601      	adds	r6, #1
    5ec4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    5ec8:	b2f3      	uxtb	r3, r6
    5eca:	429a      	cmp	r2, r3
    5ecc:	d334      	bcc.n	5f38 <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5ece:	4642      	mov	r2, r8
    5ed0:	b2f1      	uxtb	r1, r6
    5ed2:	4620      	mov	r0, r4
    5ed4:	f7ff fa48 	bl	5368 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5ed8:	4605      	mov	r5, r0
    5eda:	b130      	cbz	r0, 5eea <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    5edc:	7803      	ldrb	r3, [r0, #0]
    5ede:	2bc0      	cmp	r3, #192	; 0xc0
    5ee0:	d00d      	beq.n	5efe <ExFatFile::syncDir()+0x9a>
    5ee2:	2bc1      	cmp	r3, #193	; 0xc1
    5ee4:	d0e8      	beq.n	5eb8 <ExFatFile::syncDir()+0x54>
    5ee6:	2b85      	cmp	r3, #133	; 0x85
    5ee8:	d0c6      	beq.n	5e78 <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5eea:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5eee:	f043 0301 	orr.w	r3, r3, #1
    5ef2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5ef6:	2000      	movs	r0, #0
}
    5ef8:	b003      	add	sp, #12
    5efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    5efe:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    5f02:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5f06:	7843      	ldrb	r3, [r0, #1]
    5f08:	bf14      	ite	ne
    5f0a:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    5f0e:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    5f12:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    5f14:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5f18:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    5f1c:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5f1e:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    5f20:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    5f24:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    5f28:	6a22      	ldr	r2, [r4, #32]
    5f2a:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5f2e:	f043 0301 	orr.w	r3, r3, #1
    5f32:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    5f36:	e7bf      	b.n	5eb8 <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5f38:	2201      	movs	r2, #1
    5f3a:	f104 0124 	add.w	r1, r4, #36	; 0x24
    5f3e:	6a20      	ldr	r0, [r4, #32]
    5f40:	f001 f8c3 	bl	70ca <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5f44:	2800      	cmp	r0, #0
    5f46:	d0d0      	beq.n	5eea <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5f48:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    5f4a:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5f4c:	4628      	mov	r0, r5
    5f4e:	f005 fc7d 	bl	b84c <FsCache::sync()>
    5f52:	2800      	cmp	r0, #0
    5f54:	d0c9      	beq.n	5eea <ExFatFile::syncDir()+0x86>
    5f56:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5f5a:	f005 fc77 	bl	b84c <FsCache::sync()>
    5f5e:	2800      	cmp	r0, #0
    5f60:	d0c3      	beq.n	5eea <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    5f62:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    5f66:	6803      	ldr	r3, [r0, #0]
    5f68:	6a1b      	ldr	r3, [r3, #32]
    5f6a:	4798      	blx	r3
    5f6c:	2800      	cmp	r0, #0
    5f6e:	d1c3      	bne.n	5ef8 <ExFatFile::syncDir()+0x94>
    5f70:	e7bb      	b.n	5eea <ExFatFile::syncDir()+0x86>
    5f72:	bf00      	nop
    5f74:	20004b68 	.word	0x20004b68

00005f78 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    5f78:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    5f7a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5f7e:	b33b      	cbz	r3, 5fd0 <ExFatFile::sync()+0x58>
    5f80:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5f82:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    5f86:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    5f8a:	2a00      	cmp	r2, #0
    5f8c:	db0c      	blt.n	5fa8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    5f8e:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5f90:	4628      	mov	r0, r5
    5f92:	f005 fc5b 	bl	b84c <FsCache::sync()>
    5f96:	b970      	cbnz	r0, 5fb6 <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    5f98:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5f9c:	f043 0301 	orr.w	r3, r3, #1
    5fa0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5fa4:	2000      	movs	r0, #0
    5fa6:	e014      	b.n	5fd2 <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5fac:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    5fb0:	f7ff ff58 	bl	5e64 <ExFatFile::syncDir()>
    5fb4:	e00d      	b.n	5fd2 <ExFatFile::sync()+0x5a>
    5fb6:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5fba:	f005 fc47 	bl	b84c <FsCache::sync()>
    5fbe:	2800      	cmp	r0, #0
    5fc0:	d0ea      	beq.n	5f98 <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    5fc2:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    5fc6:	6803      	ldr	r3, [r0, #0]
    5fc8:	6a1b      	ldr	r3, [r3, #32]
    5fca:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    5fcc:	b908      	cbnz	r0, 5fd2 <ExFatFile::sync()+0x5a>
    5fce:	e7e3      	b.n	5f98 <ExFatFile::sync()+0x20>
    return true;
    5fd0:	2001      	movs	r0, #1
}
    5fd2:	bd38      	pop	{r3, r4, r5, pc}

00005fd4 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    5fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fd8:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5fda:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5fde:	f013 0f40 	tst.w	r3, #64	; 0x40
    5fe2:	d10a      	bne.n	5ffa <ExFatFile::addDirCluster()+0x26>
    5fe4:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    5fe6:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    5fe8:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    5fec:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    5fee:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    5ff2:	d306      	bcc.n	6002 <ExFatFile::addDirCluster()+0x2e>
  return false;
    5ff4:	2000      	movs	r0, #0
}
    5ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5ffa:	6a00      	ldr	r0, [r0, #32]
    5ffc:	f001 f9f4 	bl	73e8 <ExFatPartition::rootLength()>
    6000:	e7f1      	b.n	5fe6 <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    6002:	4628      	mov	r0, r5
    6004:	f7ff fe54 	bl	5cb0 <ExFatFile::addCluster()>
    6008:	2800      	cmp	r0, #0
    600a:	d0f4      	beq.n	5ff6 <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    600c:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    600e:	69ae      	ldr	r6, [r5, #24]
    6010:	3e02      	subs	r6, #2
    6012:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6016:	409e      	lsls	r6, r3
    6018:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    601c:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    601e:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    6020:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    6022:	f44f 7900 	mov.w	r9, #512	; 0x200
    6026:	46a0      	mov	r8, r4
    6028:	463a      	mov	r2, r7
    602a:	1931      	adds	r1, r6, r4
    602c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6030:	f005 fc33 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6034:	b360      	cbz	r0, 6090 <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    6036:	464a      	mov	r2, r9
    6038:	4641      	mov	r1, r8
    603a:	f00b f8a3 	bl	11184 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    603e:	3401      	adds	r4, #1
    6040:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6042:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    6046:	2301      	movs	r3, #1
    6048:	4093      	lsls	r3, r2
    604a:	429c      	cmp	r4, r3
    604c:	d3ec      	bcc.n	6028 <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    604e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6052:	f013 0f40 	tst.w	r3, #64	; 0x40
    6056:	d117      	bne.n	6088 <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6058:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    605c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6060:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6064:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    6068:	68ab      	ldr	r3, [r5, #8]
    606a:	68ea      	ldr	r2, [r5, #12]
    606c:	185b      	adds	r3, r3, r1
    606e:	f142 0200 	adc.w	r2, r2, #0
    6072:	60ab      	str	r3, [r5, #8]
    6074:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    6076:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    607a:	692b      	ldr	r3, [r5, #16]
    607c:	696a      	ldr	r2, [r5, #20]
    607e:	185b      	adds	r3, r3, r1
    6080:	f142 0200 	adc.w	r2, r2, #0
    6084:	612b      	str	r3, [r5, #16]
    6086:	616a      	str	r2, [r5, #20]
  return sync();
    6088:	4628      	mov	r0, r5
    608a:	f7ff ff75 	bl	5f78 <ExFatFile::sync()>
    608e:	e7b2      	b.n	5ff6 <ExFatFile::addDirCluster()+0x22>
  return false;
    6090:	2000      	movs	r0, #0
    6092:	e7b0      	b.n	5ff6 <ExFatFile::addDirCluster()+0x22>

00006094 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    6094:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6098:	f013 0f50 	tst.w	r3, #80	; 0x50
    609c:	d101      	bne.n	60a2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    609e:	2000      	movs	r0, #0
}
    60a0:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    60a2:	b510      	push	{r4, lr}
    60a4:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    60a6:	f640 2302 	movw	r3, #2562	; 0xa02
    60aa:	f7ff fb63 	bl	5774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60ae:	b900      	cbnz	r0, 60b2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    60b0:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    60b2:	2310      	movs	r3, #16
    60b4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    60b8:	4620      	mov	r0, r4
    60ba:	f7ff ff8b 	bl	5fd4 <ExFatFile::addDirCluster()>
    60be:	2800      	cmp	r0, #0
    60c0:	d0f6      	beq.n	60b0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    60c2:	69a3      	ldr	r3, [r4, #24]
    60c4:	61e3      	str	r3, [r4, #28]
    60c6:	2200      	movs	r2, #0
    60c8:	2300      	movs	r3, #0
    60ca:	4620      	mov	r0, r4
    60cc:	f7ff fadf 	bl	568e <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    60d0:	23c1      	movs	r3, #193	; 0xc1
    60d2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    60d6:	4620      	mov	r0, r4
    60d8:	f7ff ff4e 	bl	5f78 <ExFatFile::sync()>
    60dc:	e7e8      	b.n	60b0 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

000060de <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    60de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60e2:	b096      	sub	sp, #88	; 0x58
    60e4:	9201      	str	r2, [sp, #4]
    60e6:	461e      	mov	r6, r3
    60e8:	2300      	movs	r3, #0
    60ea:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    60ee:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    60f2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    60f6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    60fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    60fe:	2b00      	cmp	r3, #0
    6100:	d15a      	bne.n	61b8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    6102:	4604      	mov	r4, r0
    6104:	460d      	mov	r5, r1
    6106:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    610a:	f013 0f50 	tst.w	r3, #80	; 0x50
    610e:	d058      	beq.n	61c2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    6110:	4613      	mov	r3, r2
    6112:	7812      	ldrb	r2, [r2, #0]
    6114:	2a2f      	cmp	r2, #47	; 0x2f
    6116:	d001      	beq.n	611c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6118:	2700      	movs	r7, #0
    611a:	e029      	b.n	6170 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    611c:	3301      	adds	r3, #1
    611e:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    6120:	781a      	ldrb	r2, [r3, #0]
    6122:	2a2f      	cmp	r2, #47	; 0x2f
    6124:	d0fa      	beq.n	611c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6126:	6a29      	ldr	r1, [r5, #32]
    6128:	a802      	add	r0, sp, #8
    612a:	f7ff f967 	bl	53fc <ExFatFile::openRoot(ExFatVolume*)>
    612e:	4603      	mov	r3, r0
    6130:	2800      	cmp	r0, #0
    6132:	d042      	beq.n	61ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    6134:	ad02      	add	r5, sp, #8
    6136:	e7ef      	b.n	6118 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    6138:	46a4      	mov	ip, r4
    613a:	ad02      	add	r5, sp, #8
    613c:	f104 0830 	add.w	r8, r4, #48	; 0x30
    6140:	46ae      	mov	lr, r5
    6142:	f8dc 0000 	ldr.w	r0, [ip]
    6146:	f8dc 1004 	ldr.w	r1, [ip, #4]
    614a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    614e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    6152:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6156:	f10c 0c10 	add.w	ip, ip, #16
    615a:	4675      	mov	r5, lr
    615c:	45c4      	cmp	ip, r8
    615e:	d1ef      	bne.n	6140 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    6160:	f8dc 0000 	ldr.w	r0, [ip]
    6164:	f8ce 0000 	str.w	r0, [lr]
    close();
    6168:	4620      	mov	r0, r4
    616a:	f7ff f919 	bl	53a0 <ExFatFile::close()>
    parent = &tmpDir;
    616e:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    6170:	ab01      	add	r3, sp, #4
    6172:	aa10      	add	r2, sp, #64	; 0x40
    6174:	9901      	ldr	r1, [sp, #4]
    6176:	4620      	mov	r0, r4
    6178:	f7ff f954 	bl	5424 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    617c:	4603      	mov	r3, r0
    617e:	b1e0      	cbz	r0, 61ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    6180:	9b01      	ldr	r3, [sp, #4]
    6182:	781b      	ldrb	r3, [r3, #0]
    6184:	b18b      	cbz	r3, 61aa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6186:	463b      	mov	r3, r7
    6188:	aa10      	add	r2, sp, #64	; 0x40
    618a:	4629      	mov	r1, r5
    618c:	4620      	mov	r0, r4
    618e:	f7ff faf1 	bl	5774 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6192:	2800      	cmp	r0, #0
    6194:	d1d0      	bne.n	6138 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    6196:	b1b6      	cbz	r6, 61c6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    6198:	aa10      	add	r2, sp, #64	; 0x40
    619a:	4629      	mov	r1, r5
    619c:	4620      	mov	r0, r4
    619e:	f7ff ff79 	bl	6094 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    61a2:	4603      	mov	r3, r0
    61a4:	2800      	cmp	r0, #0
    61a6:	d1c7      	bne.n	6138 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    61a8:	e007      	b.n	61ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    61aa:	aa10      	add	r2, sp, #64	; 0x40
    61ac:	4629      	mov	r1, r5
    61ae:	4620      	mov	r0, r4
    61b0:	f7ff ff70 	bl	6094 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    61b4:	4603      	mov	r3, r0
    61b6:	e000      	b.n	61ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    61b8:	2300      	movs	r3, #0
}
    61ba:	4618      	mov	r0, r3
    61bc:	b016      	add	sp, #88	; 0x58
    61be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    61c2:	2300      	movs	r3, #0
    61c4:	e7f9      	b.n	61ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    61c6:	4633      	mov	r3, r6
    61c8:	e7f7      	b.n	61ba <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

000061ca <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    61ca:	b570      	push	{r4, r5, r6, lr}
    61cc:	b09c      	sub	sp, #112	; 0x70
    61ce:	2300      	movs	r3, #0
    61d0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    61d4:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    61d8:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    61dc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    61e0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    61e4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    61e8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    61ec:	f013 0f18 	tst.w	r3, #24
    61f0:	d047      	beq.n	6282 <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    61f2:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    61f4:	6a00      	ldr	r0, [r0, #32]
    61f6:	6a0b      	ldr	r3, [r1, #32]
    61f8:	4298      	cmp	r0, r3
    61fa:	d002      	beq.n	6202 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    61fc:	2000      	movs	r0, #0
}
    61fe:	b01c      	add	sp, #112	; 0x70
    6200:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6202:	f640 2301 	movw	r3, #2561	; 0xa01
    6206:	a80e      	add	r0, sp, #56	; 0x38
    6208:	f7ff fca0 	bl	5b4c <ExFatFile::open(ExFatFile*, char const*, int)>
    620c:	2800      	cmp	r0, #0
    620e:	d0f6      	beq.n	61fe <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    6210:	46a4      	mov	ip, r4
    6212:	466d      	mov	r5, sp
    6214:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6218:	46ae      	mov	lr, r5
    621a:	f8dc 0000 	ldr.w	r0, [ip]
    621e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    6222:	f8dc 2008 	ldr.w	r2, [ip, #8]
    6226:	f8dc 300c 	ldr.w	r3, [ip, #12]
    622a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    622e:	f10c 0c10 	add.w	ip, ip, #16
    6232:	4675      	mov	r5, lr
    6234:	45b4      	cmp	ip, r6
    6236:	d1ef      	bne.n	6218 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    6238:	f8dc 0000 	ldr.w	r0, [ip]
    623c:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    6240:	f104 0324 	add.w	r3, r4, #36	; 0x24
    6244:	aa17      	add	r2, sp, #92	; 0x5c
    6246:	ca07      	ldmia	r2, {r0, r1, r2}
    6248:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    624c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    6250:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6254:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6258:	f063 037f 	orn	r3, r3, #127	; 0x7f
    625c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6260:	4620      	mov	r0, r4
    6262:	f7ff fe89 	bl	5f78 <ExFatFile::sync()>
    6266:	2800      	cmp	r0, #0
    6268:	d0c9      	beq.n	61fe <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    626a:	2300      	movs	r3, #0
    626c:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    626e:	2302      	movs	r3, #2
    6270:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    6274:	2308      	movs	r3, #8
    6276:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    627a:	4668      	mov	r0, sp
    627c:	f7ff fd68 	bl	5d50 <ExFatFile::remove()>
    6280:	e7bd      	b.n	61fe <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    6282:	2000      	movs	r0, #0
    6284:	e7bb      	b.n	61fe <ExFatFile::rename(ExFatFile*, char const*)+0x34>

00006286 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    628a:	b083      	sub	sp, #12
    628c:	9100      	str	r1, [sp, #0]
    628e:	461e      	mov	r6, r3
    6290:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    6294:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    6298:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    629c:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    62a0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    62a4:	f013 0f08 	tst.w	r3, #8
    62a8:	f000 809a 	beq.w	63e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    62ac:	4605      	mov	r5, r0
      || year > 2107
    62ae:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    62b2:	b294      	uxth	r4, r2
    62b4:	2c7f      	cmp	r4, #127	; 0x7f
    62b6:	f200 8098 	bhi.w	63ea <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    62ba:	1e73      	subs	r3, r6, #1
    62bc:	b2db      	uxtb	r3, r3
    62be:	2b0b      	cmp	r3, #11
    62c0:	f200 8095 	bhi.w	63ee <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    62c4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    62c8:	b2db      	uxtb	r3, r3
    62ca:	2b1e      	cmp	r3, #30
    62cc:	f200 8091 	bhi.w	63f2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    62d0:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    62d4:	bf98      	it	ls
    62d6:	f1ba 0f17 	cmpls.w	sl, #23
    62da:	bf8c      	ite	hi
    62dc:	2701      	movhi	r7, #1
    62de:	2700      	movls	r7, #0
    62e0:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    62e4:	bf88      	it	hi
    62e6:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    62ea:	b10f      	cbz	r7, 62f0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    62ec:	2700      	movs	r7, #0
    62ee:	e078      	b.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    62f0:	f7ff fe42 	bl	5f78 <ExFatFile::sync()>
    62f4:	2800      	cmp	r0, #0
    62f6:	d07e      	beq.n	63f6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    62f8:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    62fc:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    6300:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    6302:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6306:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    630a:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    630e:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    6312:	f019 0901 	ands.w	r9, r9, #1
    6316:	bf18      	it	ne
    6318:	f04f 0964 	movne.w	r9, #100	; 0x64
    631c:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    631e:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6320:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    6322:	9b00      	ldr	r3, [sp, #0]
    6324:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6328:	4652      	mov	r2, sl
    632a:	b2f1      	uxtb	r1, r6
    632c:	4628      	mov	r0, r5
    632e:	f7ff f81b 	bl	5368 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6332:	4602      	mov	r2, r0
    6334:	2800      	cmp	r0, #0
    6336:	d054      	beq.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    6338:	7803      	ldrb	r3, [r0, #0]
    633a:	2b85      	cmp	r3, #133	; 0x85
    633c:	d02b      	beq.n	6396 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    633e:	3340      	adds	r3, #64	; 0x40
    6340:	b2db      	uxtb	r3, r3
    6342:	2b01      	cmp	r3, #1
    6344:	d84d      	bhi.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    6346:	9901      	ldr	r1, [sp, #4]
    6348:	4610      	mov	r0, r2
    634a:	f7ff fc93 	bl	5c74 <exFatDirChecksum(unsigned char const*, unsigned short)>
    634e:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6350:	3601      	adds	r6, #1
    6352:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    6356:	b2f3      	uxtb	r3, r6
    6358:	429a      	cmp	r2, r3
    635a:	d2e5      	bcs.n	6328 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    635c:	2201      	movs	r2, #1
    635e:	f105 0124 	add.w	r1, r5, #36	; 0x24
    6362:	6a28      	ldr	r0, [r5, #32]
    6364:	f000 feb1 	bl	70ca <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6368:	2800      	cmp	r0, #0
    636a:	d03a      	beq.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    636c:	9a01      	ldr	r2, [sp, #4]
    636e:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    6370:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6372:	4620      	mov	r0, r4
    6374:	f005 fa6a 	bl	b84c <FsCache::sync()>
    6378:	4607      	mov	r7, r0
    637a:	b390      	cbz	r0, 63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    637c:	f504 7004 	add.w	r0, r4, #528	; 0x210
    6380:	f005 fa64 	bl	b84c <FsCache::sync()>
    6384:	4607      	mov	r7, r0
    6386:	b360      	cbz	r0, 63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    6388:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    638c:	6803      	ldr	r3, [r0, #0]
    638e:	6a1b      	ldr	r3, [r3, #32]
    6390:	4798      	blx	r3
    6392:	4607      	mov	r7, r0
    6394:	e025      	b.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6396:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    639a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    639e:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    63a0:	6a29      	ldr	r1, [r5, #32]
    63a2:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    63a6:	f043 0301 	orr.w	r3, r3, #1
    63aa:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    63ae:	f1b8 0f00 	cmp.w	r8, #0
    63b2:	d002      	beq.n	63ba <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    63b4:	f8a0 b010 	strh.w	fp, [r0, #16]
    63b8:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    63ba:	9b00      	ldr	r3, [sp, #0]
    63bc:	f013 0f02 	tst.w	r3, #2
    63c0:	d004      	beq.n	63cc <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    63c2:	f882 9014 	strb.w	r9, [r2, #20]
    63c6:	f8a2 b008 	strh.w	fp, [r2, #8]
    63ca:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    63cc:	9b00      	ldr	r3, [sp, #0]
    63ce:	f013 0f04 	tst.w	r3, #4
    63d2:	d0b8      	beq.n	6346 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    63d4:	f882 9015 	strb.w	r9, [r2, #21]
    63d8:	f8a2 b00c 	strh.w	fp, [r2, #12]
    63dc:	81d4      	strh	r4, [r2, #14]
}
    63de:	e7b2      	b.n	6346 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    63e0:	2700      	movs	r7, #0
}
    63e2:	4638      	mov	r0, r7
    63e4:	b003      	add	sp, #12
    63e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    63ea:	2700      	movs	r7, #0
    63ec:	e7f9      	b.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    63ee:	2700      	movs	r7, #0
    63f0:	e7f7      	b.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    63f2:	2700      	movs	r7, #0
    63f4:	e7f5      	b.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    63f6:	4607      	mov	r7, r0
    63f8:	e7f3      	b.n	63e2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

000063fa <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    63fa:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    63fe:	f013 0f02 	tst.w	r3, #2
    6402:	d066      	beq.n	64d2 <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    6404:	b530      	push	{r4, r5, lr}
    6406:	b083      	sub	sp, #12
    6408:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    640a:	69c5      	ldr	r5, [r0, #28]
    640c:	2d00      	cmp	r5, #0
    640e:	d062      	beq.n	64d6 <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    6410:	f013 0f40 	tst.w	r3, #64	; 0x40
    6414:	d03b      	beq.n	648e <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6416:	6a00      	ldr	r0, [r0, #32]
    6418:	68a2      	ldr	r2, [r4, #8]
    641a:	68e1      	ldr	r1, [r4, #12]
    641c:	3a01      	subs	r2, #1
    641e:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6422:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6426:	3309      	adds	r3, #9
    6428:	b2db      	uxtb	r3, r3
    642a:	f1c3 0e20 	rsb	lr, r3, #32
    642e:	f1a3 0c20 	sub.w	ip, r3, #32
    6432:	40da      	lsrs	r2, r3
    6434:	fa01 fe0e 	lsl.w	lr, r1, lr
    6438:	ea42 020e 	orr.w	r2, r2, lr
    643c:	fa21 fc0c 	lsr.w	ip, r1, ip
    6440:	ea42 020c 	orr.w	r2, r2, ip
    6444:	3201      	adds	r2, #1
    if (m_curCluster) {
    6446:	69a3      	ldr	r3, [r4, #24]
    6448:	b1b3      	cbz	r3, 6478 <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    644a:	1c59      	adds	r1, r3, #1
    644c:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    644e:	3d01      	subs	r5, #1
    6450:	1aed      	subs	r5, r5, r3
    6452:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6454:	b9a2      	cbnz	r2, 6480 <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    6456:	e9d4 2300 	ldrd	r2, r3, [r4]
    645a:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    645e:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6462:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6466:	f063 037f 	orn	r3, r3, #127	; 0x7f
    646a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    646e:	4620      	mov	r0, r4
    6470:	f7ff fd82 	bl	5f78 <ExFatFile::sync()>

 fail:
  return false;
}
    6474:	b003      	add	sp, #12
    6476:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    6478:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    647a:	2300      	movs	r3, #0
    647c:	61e3      	str	r3, [r4, #28]
    647e:	e7e9      	b.n	6454 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6480:	2300      	movs	r3, #0
    6482:	9901      	ldr	r1, [sp, #4]
    6484:	f000 fdb9 	bl	6ffa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6488:	2800      	cmp	r0, #0
    648a:	d1e4      	bne.n	6456 <ExFatFile::truncate()+0x5c>
    648c:	e7f2      	b.n	6474 <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    648e:	6981      	ldr	r1, [r0, #24]
    6490:	b949      	cbnz	r1, 64a6 <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    6492:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6494:	2300      	movs	r3, #0
    6496:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    6498:	4629      	mov	r1, r5
    649a:	6a20      	ldr	r0, [r4, #32]
    649c:	f000 feb1 	bl	7202 <ExFatPartition::freeChain(unsigned long)>
    64a0:	2800      	cmp	r0, #0
    64a2:	d1d8      	bne.n	6456 <ExFatFile::truncate()+0x5c>
    64a4:	e7e6      	b.n	6474 <ExFatFile::truncate()+0x7a>
      toFree = 0;
    64a6:	2300      	movs	r3, #0
    64a8:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    64aa:	aa01      	add	r2, sp, #4
    64ac:	6a00      	ldr	r0, [r0, #32]
    64ae:	f000 fe29 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    64b2:	2800      	cmp	r0, #0
    64b4:	db11      	blt.n	64da <ExFatFile::truncate()+0xe0>
      if (fg) {
    64b6:	b918      	cbnz	r0, 64c0 <ExFatFile::truncate()+0xc6>
    if (toFree) {
    64b8:	9d01      	ldr	r5, [sp, #4]
    64ba:	2d00      	cmp	r5, #0
    64bc:	d0cb      	beq.n	6456 <ExFatFile::truncate()+0x5c>
    64be:	e7eb      	b.n	6498 <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    64c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    64c4:	69a1      	ldr	r1, [r4, #24]
    64c6:	6a20      	ldr	r0, [r4, #32]
    64c8:	f000 fe7b 	bl	71c2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    64cc:	2800      	cmp	r0, #0
    64ce:	d1f3      	bne.n	64b8 <ExFatFile::truncate()+0xbe>
    64d0:	e7d0      	b.n	6474 <ExFatFile::truncate()+0x7a>
  return false;
    64d2:	2000      	movs	r0, #0
}
    64d4:	4770      	bx	lr
      return true;
    64d6:	2001      	movs	r0, #1
    64d8:	e7cc      	b.n	6474 <ExFatFile::truncate()+0x7a>
  return false;
    64da:	2000      	movs	r0, #0
    64dc:	e7ca      	b.n	6474 <ExFatFile::truncate()+0x7a>
	...

000064e0 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    64e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64e4:	b083      	sub	sp, #12
    64e6:	4604      	mov	r4, r0
    64e8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    64ec:	f013 0f02 	tst.w	r3, #2
    64f0:	d014      	beq.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
    64f2:	4688      	mov	r8, r1
    64f4:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    64f6:	f013 0f08 	tst.w	r3, #8
    64fa:	d109      	bne.n	6510 <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    64fc:	f1bb 0f00 	cmp.w	fp, #0
    6500:	f000 80ed 	beq.w	66de <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6504:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6506:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    650a:	f04f 0901 	mov.w	r9, #1
    650e:	e085      	b.n	661c <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    6510:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6514:	f7ff f8bb 	bl	568e <ExFatFile::seekSet(unsigned long long)>
    6518:	2800      	cmp	r0, #0
    651a:	d1ef      	bne.n	64fc <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    651c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6520:	f043 0301 	orr.w	r3, r3, #1
    6524:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6528:	2000      	movs	r0, #0
}
    652a:	b003      	add	sp, #12
    652c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6530:	4652      	mov	r2, sl
    6532:	f000 fde7 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6536:	2800      	cmp	r0, #0
    6538:	dbf0      	blt.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    653a:	b938      	cbnz	r0, 654c <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    653c:	4620      	mov	r0, r4
    653e:	f7ff fbb7 	bl	5cb0 <ExFatFile::addCluster()>
    6542:	b918      	cbnz	r0, 654c <ExFatFile::write(void const*, unsigned int)+0x6c>
    6544:	e7ea      	b.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    6546:	69e3      	ldr	r3, [r4, #28]
    6548:	b323      	cbz	r3, 6594 <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    654a:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    654c:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    654e:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6552:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    6556:	69a1      	ldr	r1, [r4, #24]
    6558:	3902      	subs	r1, #2
    655a:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    655c:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    6560:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6564:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6566:	b916      	cbnz	r6, 656e <ExFatFile::write(void const*, unsigned int)+0x8e>
    6568:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    656c:	d21a      	bcs.n	65a4 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    656e:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    6572:	42bd      	cmp	r5, r7
    6574:	bf28      	it	cs
    6576:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6578:	bb3e      	cbnz	r6, 65ca <ExFatFile::write(void const*, unsigned int)+0xea>
    657a:	6862      	ldr	r2, [r4, #4]
    657c:	9200      	str	r2, [sp, #0]
    657e:	6963      	ldr	r3, [r4, #20]
    6580:	9301      	str	r3, [sp, #4]
    6582:	6823      	ldr	r3, [r4, #0]
    6584:	6922      	ldr	r2, [r4, #16]
    6586:	4293      	cmp	r3, r2
    6588:	9a00      	ldr	r2, [sp, #0]
    658a:	9b01      	ldr	r3, [sp, #4]
    658c:	419a      	sbcs	r2, r3
    658e:	d375      	bcc.n	667c <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6590:	2205      	movs	r2, #5
    6592:	e01b      	b.n	65cc <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    6594:	4620      	mov	r0, r4
    6596:	f7ff fb8b 	bl	5cb0 <ExFatFile::addCluster()>
    659a:	2800      	cmp	r0, #0
    659c:	d0be      	beq.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    659e:	69a3      	ldr	r3, [r4, #24]
    65a0:	61e3      	str	r3, [r4, #28]
    65a2:	e7d3      	b.n	654c <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    65a4:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    65a8:	d271      	bcs.n	668e <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    65aa:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    65ae:	4299      	cmp	r1, r3
    65b0:	f000 808d 	beq.w	66ce <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    65b4:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    65b8:	6803      	ldr	r3, [r0, #0]
    65ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65bc:	4642      	mov	r2, r8
    65be:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    65c0:	2800      	cmp	r0, #0
    65c2:	d0ab      	beq.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    65c4:	f44f 7500 	mov.w	r5, #512	; 0x200
    65c8:	e010      	b.n	65ec <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    65ca:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    65cc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    65d0:	f005 f963 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    65d4:	2800      	cmp	r0, #0
    65d6:	d0a1      	beq.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    65d8:	462a      	mov	r2, r5
    65da:	4641      	mov	r1, r8
    65dc:	4430      	add	r0, r6
    65de:	f006 fd07 	bl	cff0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    65e2:	6a20      	ldr	r0, [r4, #32]
    65e4:	442e      	add	r6, r5
    65e6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    65ea:	d049      	beq.n	6680 <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    65ec:	6823      	ldr	r3, [r4, #0]
    65ee:	6862      	ldr	r2, [r4, #4]
    65f0:	18eb      	adds	r3, r5, r3
    65f2:	f142 0200 	adc.w	r2, r2, #0
    65f6:	6023      	str	r3, [r4, #0]
    65f8:	6062      	str	r2, [r4, #4]
    src += n;
    65fa:	44a8      	add	r8, r5
    toWrite -= n;
    65fc:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    65fe:	6920      	ldr	r0, [r4, #16]
    6600:	6961      	ldr	r1, [r4, #20]
    6602:	4298      	cmp	r0, r3
    6604:	4191      	sbcs	r1, r2
    6606:	d207      	bcs.n	6618 <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6608:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    660c:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6610:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6614:	6123      	str	r3, [r4, #16]
    6616:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    6618:	2f00      	cmp	r7, #0
    661a:	d060      	beq.n	66de <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    661c:	6a20      	ldr	r0, [r4, #32]
    661e:	6825      	ldr	r5, [r4, #0]
    6620:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6624:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6626:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    662a:	2d00      	cmp	r5, #0
    662c:	d18e      	bne.n	654c <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    662e:	69a1      	ldr	r1, [r4, #24]
    6630:	2900      	cmp	r1, #0
    6632:	d088      	beq.n	6546 <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    6634:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6638:	f013 0f40 	tst.w	r3, #64	; 0x40
    663c:	f43f af78 	beq.w	6530 <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6640:	68a3      	ldr	r3, [r4, #8]
    6642:	68e2      	ldr	r2, [r4, #12]
    6644:	3b01      	subs	r3, #1
    6646:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    664a:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    664e:	3009      	adds	r0, #9
    6650:	b2c0      	uxtb	r0, r0
    6652:	f1c0 0e20 	rsb	lr, r0, #32
    6656:	f1a0 0c20 	sub.w	ip, r0, #32
    665a:	40c3      	lsrs	r3, r0
    665c:	fa02 fe0e 	lsl.w	lr, r2, lr
    6660:	ea43 030e 	orr.w	r3, r3, lr
    6664:	fa22 fc0c 	lsr.w	ip, r2, ip
    6668:	ea43 030c 	orr.w	r3, r3, ip
    666c:	69e2      	ldr	r2, [r4, #28]
    666e:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    6670:	4299      	cmp	r1, r3
    6672:	f4bf af63 	bcs.w	653c <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    6676:	3101      	adds	r1, #1
    6678:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    667a:	e767      	b.n	654c <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    667c:	464a      	mov	r2, r9
    667e:	e7a5      	b.n	65cc <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    6680:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6684:	f005 f8e2 	bl	b84c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    6688:	2800      	cmp	r0, #0
    668a:	d1af      	bne.n	65ec <ExFatFile::write(void const*, unsigned int)+0x10c>
    668c:	e746      	b.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    668e:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6692:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6696:	0a7a      	lsrs	r2, r7, #9
    6698:	4293      	cmp	r3, r2
    669a:	bf28      	it	cs
    669c:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    669e:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    66a0:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    66a4:	4291      	cmp	r1, r2
    66a6:	d809      	bhi.n	66bc <ExFatFile::write(void const*, unsigned int)+0x1dc>
    66a8:	18ce      	adds	r6, r1, r3
    66aa:	42b2      	cmp	r2, r6
    66ac:	d206      	bcs.n	66bc <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    66ae:	2200      	movs	r2, #0
    66b0:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    66b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    66b8:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    66bc:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    66c0:	6802      	ldr	r2, [r0, #0]
    66c2:	6a96      	ldr	r6, [r2, #40]	; 0x28
    66c4:	4642      	mov	r2, r8
    66c6:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    66c8:	2800      	cmp	r0, #0
    66ca:	d18f      	bne.n	65ec <ExFatFile::write(void const*, unsigned int)+0x10c>
    66cc:	e726      	b.n	651c <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    66ce:	2300      	movs	r3, #0
    66d0:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    66d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66d8:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    66dc:	e76a      	b.n	65b4 <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    66de:	6821      	ldr	r1, [r4, #0]
    66e0:	6862      	ldr	r2, [r4, #4]
    66e2:	68a0      	ldr	r0, [r4, #8]
    66e4:	68e3      	ldr	r3, [r4, #12]
    66e6:	4288      	cmp	r0, r1
    66e8:	4193      	sbcs	r3, r2
    66ea:	d209      	bcs.n	6700 <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    66ec:	60a1      	str	r1, [r4, #8]
    66ee:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66f0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    66f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    66f8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    66fc:	4658      	mov	r0, fp
    66fe:	e714      	b.n	652a <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    6700:	4b06      	ldr	r3, [pc, #24]	; (671c <ExFatFile::write(void const*, unsigned int)+0x23c>)
    6702:	681b      	ldr	r3, [r3, #0]
    6704:	b13b      	cbz	r3, 6716 <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6706:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    670a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    670e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6712:	4658      	mov	r0, fp
    6714:	e709      	b.n	652a <ExFatFile::write(void const*, unsigned int)+0x4a>
    6716:	4658      	mov	r0, fp
    6718:	e707      	b.n	652a <ExFatFile::write(void const*, unsigned int)+0x4a>
    671a:	bf00      	nop
    671c:	20004b68 	.word	0x20004b68

00006720 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6720:	b161      	cbz	r1, 673c <Print::write(char const*)+0x1c>
    6722:	b538      	push	{r3, r4, r5, lr}
    6724:	4604      	mov	r4, r0
    6726:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    6728:	4608      	mov	r0, r1
    672a:	f00b fb49 	bl	11dc0 <strlen>
    672e:	4602      	mov	r2, r0
    6730:	6823      	ldr	r3, [r4, #0]
    6732:	685b      	ldr	r3, [r3, #4]
    6734:	4629      	mov	r1, r5
    6736:	4620      	mov	r0, r4
    6738:	4798      	blx	r3
    673a:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    673c:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    673e:	4770      	bx	lr

00006740 <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    6740:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6742:	6883      	ldr	r3, [r0, #8]
    6744:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6748:	b173      	cbz	r3, 6768 <ExFatFormatter::syncUpcase()+0x28>
    674a:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    674c:	2000      	movs	r0, #0
    674e:	690a      	ldr	r2, [r1, #16]
    6750:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    6752:	3301      	adds	r3, #1
    6754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6758:	d3f9      	bcc.n	674e <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    675a:	68c8      	ldr	r0, [r1, #12]
    675c:	6803      	ldr	r3, [r0, #0]
    675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6760:	690a      	ldr	r2, [r1, #16]
    6762:	6809      	ldr	r1, [r1, #0]
    6764:	4798      	blx	r3
}
    6766:	bd08      	pop	{r3, pc}
    return true;
    6768:	2001      	movs	r0, #1
    676a:	e7fc      	b.n	6766 <ExFatFormatter::syncUpcase()+0x26>

0000676c <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    676c:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    676e:	6882      	ldr	r2, [r0, #8]
    6770:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    6774:	6900      	ldr	r0, [r0, #16]
    6776:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    6778:	6858      	ldr	r0, [r3, #4]
    677a:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    677e:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    6780:	6899      	ldr	r1, [r3, #8]
    6782:	3101      	adds	r1, #1
    6784:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    6786:	f240 11ff 	movw	r1, #511	; 0x1ff
    678a:	428a      	cmp	r2, r1
    678c:	d001      	beq.n	6792 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    678e:	2001      	movs	r0, #1
}
    6790:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6792:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6794:	68d8      	ldr	r0, [r3, #12]
    6796:	6802      	ldr	r2, [r0, #0]
    6798:	6a54      	ldr	r4, [r2, #36]	; 0x24
    679a:	6819      	ldr	r1, [r3, #0]
    679c:	1c4a      	adds	r2, r1, #1
    679e:	601a      	str	r2, [r3, #0]
    67a0:	691a      	ldr	r2, [r3, #16]
    67a2:	47a0      	blx	r4
}
    67a4:	bd10      	pop	{r4, pc}

000067a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    67a6:	b538      	push	{r3, r4, r5, lr}
    67a8:	4605      	mov	r5, r0
    67aa:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    67ac:	b2c9      	uxtb	r1, r1
    67ae:	f7ff ffdd 	bl	676c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    67b2:	b900      	cbnz	r0, 67b6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    67b4:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    67b6:	0a21      	lsrs	r1, r4, #8
    67b8:	4628      	mov	r0, r5
    67ba:	f7ff ffd7 	bl	676c <ExFatFormatter::writeUpcaseByte(unsigned char)>
    67be:	e7f9      	b.n	67b4 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

000067c0 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    67c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67c4:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    67c6:	2500      	movs	r5, #0
    67c8:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    67ca:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    67cc:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    67ce:	f64f 77ff 	movw	r7, #65535	; 0xffff
    67d2:	e022      	b.n	681a <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    67d4:	1c6c      	adds	r4, r5, #1
    67d6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    67da:	d208      	bcs.n	67ee <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    67dc:	b2a0      	uxth	r0, r4
    67de:	f005 f9b9 	bl	bb54 <toUpcase(unsigned short)>
    67e2:	42a0      	cmp	r0, r4
    67e4:	d103      	bne.n	67ee <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    67e6:	3401      	adds	r4, #1
    67e8:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    67ec:	d1f6      	bne.n	67dc <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    67ee:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    67f2:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    67f6:	d31d      	bcc.n	6834 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    67f8:	4639      	mov	r1, r7
    67fa:	4630      	mov	r0, r6
    67fc:	f7ff ffd3 	bl	67a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6800:	4603      	mov	r3, r0
    6802:	b308      	cbz	r0, 6848 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6804:	fa1f f188 	uxth.w	r1, r8
    6808:	4630      	mov	r0, r6
    680a:	f7ff ffcc 	bl	67a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    680e:	4603      	mov	r3, r0
    6810:	b1d0      	cbz	r0, 6848 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6812:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6814:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6818:	d219      	bcs.n	684e <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    681a:	b2a8      	uxth	r0, r5
    681c:	f005 f99a 	bl	bb54 <toUpcase(unsigned short)>
    6820:	4601      	mov	r1, r0
    if (uc != ch) {
    6822:	42a8      	cmp	r0, r5
    6824:	d0d6      	beq.n	67d4 <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    6826:	4630      	mov	r0, r6
    6828:	f7ff ffbd 	bl	67a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    682c:	4603      	mov	r3, r0
    682e:	b158      	cbz	r0, 6848 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    6830:	3501      	adds	r5, #1
    6832:	e7ef      	b.n	6814 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    6834:	42a5      	cmp	r5, r4
    6836:	d2ed      	bcs.n	6814 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    6838:	b2a9      	uxth	r1, r5
    683a:	4630      	mov	r0, r6
    683c:	f7ff ffb3 	bl	67a6 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6840:	3501      	adds	r5, #1
    6842:	4603      	mov	r3, r0
    6844:	2800      	cmp	r0, #0
    6846:	d1f5      	bne.n	6834 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    6848:	4618      	mov	r0, r3
    684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    684e:	4630      	mov	r0, r6
    6850:	f7ff ff76 	bl	6740 <ExFatFormatter::syncUpcase()>
    6854:	4603      	mov	r3, r0
    6856:	e7f7      	b.n	6848 <ExFatFormatter::writeUpcase(unsigned long)+0x88>

00006858 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    685c:	b08b      	sub	sp, #44	; 0x2c
    685e:	9002      	str	r0, [sp, #8]
    6860:	460e      	mov	r6, r1
    6862:	4614      	mov	r4, r2
    6864:	4699      	mov	r9, r3
  m_dev = dev;
    6866:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    6868:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    686a:	680b      	ldr	r3, [r1, #0]
    686c:	69db      	ldr	r3, [r3, #28]
    686e:	4608      	mov	r0, r1
    6870:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    6872:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    6876:	d369      	bcc.n	694c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    6878:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    687a:	2300      	movs	r3, #0
    687c:	2201      	movs	r2, #1
    687e:	3301      	adds	r3, #1
    6880:	b2db      	uxtb	r3, r3
    6882:	0052      	lsls	r2, r2, #1
    6884:	bf14      	ite	ne
    6886:	2501      	movne	r5, #1
    6888:	2500      	moveq	r5, #0
    688a:	4297      	cmp	r7, r2
    688c:	bf94      	ite	ls
    688e:	2500      	movls	r5, #0
    6890:	f005 0501 	andhi.w	r5, r5, #1
    6894:	2d00      	cmp	r5, #0
    6896:	d1f2      	bne.n	687e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6898:	2b1c      	cmp	r3, #28
    689a:	d963      	bls.n	6964 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    689c:	f1b3 0b0b 	subs.w	fp, r3, #11
    68a0:	bf48      	it	mi
    68a2:	f10b 0b01 	addmi.w	fp, fp, #1
    68a6:	ea4f 016b 	mov.w	r1, fp, asr #1
    68aa:	9101      	str	r1, [sp, #4]
    68ac:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    68b0:	2201      	movs	r2, #1
    68b2:	408a      	lsls	r2, r1
    68b4:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    68b6:	3301      	adds	r3, #1
    68b8:	105b      	asrs	r3, r3, #1
    68ba:	f04f 0a01 	mov.w	sl, #1
    68be:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    68c2:	ea4f 034a 	mov.w	r3, sl, lsl #1
    68c6:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    68c8:	ea4f 028a 	mov.w	r2, sl, lsl #2
    68cc:	9205      	str	r2, [sp, #20]
    68ce:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    68d2:	9901      	ldr	r1, [sp, #4]
    68d4:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    68d8:	9203      	str	r2, [sp, #12]
    68da:	fa02 f801 	lsl.w	r8, r2, r1
    68de:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    68e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    68e6:	2100      	movs	r1, #0
    68e8:	4620      	mov	r0, r4
    68ea:	f00a fc4b 	bl	11184 <memset>
  mbr->part->beginCHS[0] = 1;
    68ee:	2301      	movs	r3, #1
    68f0:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    68f4:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    68f8:	2307      	movs	r3, #7
    68fa:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    68fe:	23fe      	movs	r3, #254	; 0xfe
    6900:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    6904:	23ff      	movs	r3, #255	; 0xff
    6906:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    690a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    690e:	9b00      	ldr	r3, [sp, #0]
    6910:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    6914:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    6918:	f64a 2355 	movw	r3, #43605	; 0xaa55
    691c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    6920:	6833      	ldr	r3, [r6, #0]
    6922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6924:	4622      	mov	r2, r4
    6926:	2100      	movs	r1, #0
    6928:	4630      	mov	r0, r6
    692a:	4798      	blx	r3
    692c:	bb70      	cbnz	r0, 698c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    692e:	f1b9 0f00 	cmp.w	r9, #0
    6932:	d007      	beq.n	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6934:	f8d9 3000 	ldr.w	r3, [r9]
    6938:	685b      	ldr	r3, [r3, #4]
    693a:	220f      	movs	r2, #15
    693c:	49af      	ldr	r1, [pc, #700]	; (6bfc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    693e:	4648      	mov	r0, r9
    6940:	4798      	blx	r3
  return false;
    6942:	2500      	movs	r5, #0
}
    6944:	4628      	mov	r0, r5
    6946:	b00b      	add	sp, #44	; 0x2c
    6948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    694c:	f1b9 0f00 	cmp.w	r9, #0
    6950:	f000 8207 	beq.w	6d62 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    6954:	f8d9 3000 	ldr.w	r3, [r9]
    6958:	685b      	ldr	r3, [r3, #4]
    695a:	2215      	movs	r2, #21
    695c:	49a8      	ldr	r1, [pc, #672]	; (6c00 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    695e:	4648      	mov	r0, r9
    6960:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    6962:	e7e7      	b.n	6934 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6964:	2b1a      	cmp	r3, #26
    6966:	d809      	bhi.n	697c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6968:	f44f 7380 	mov.w	r3, #256	; 0x100
    696c:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    696e:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6972:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6976:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    697a:	e7a2      	b.n	68c2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    697c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6980:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6982:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6986:	f8cd b004 	str.w	fp, [sp, #4]
    698a:	e794      	b.n	68b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    698c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6990:	2100      	movs	r1, #0
    6992:	4620      	mov	r0, r4
    6994:	f00a fbf6 	bl	11184 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    6998:	23eb      	movs	r3, #235	; 0xeb
    699a:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    699c:	2376      	movs	r3, #118	; 0x76
    699e:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    69a0:	2390      	movs	r3, #144	; 0x90
    69a2:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    69a4:	2345      	movs	r3, #69	; 0x45
    69a6:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    69a8:	2358      	movs	r3, #88	; 0x58
    69aa:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    69ac:	2346      	movs	r3, #70	; 0x46
    69ae:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    69b0:	2341      	movs	r3, #65	; 0x41
    69b2:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    69b4:	2354      	movs	r3, #84	; 0x54
    69b6:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    69b8:	2320      	movs	r3, #32
    69ba:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    69bc:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    69be:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    69c0:	9b00      	ldr	r3, [sp, #0]
    69c2:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    69c4:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    69c8:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    69cc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    69d0:	65a3      	str	r3, [r4, #88]	; 0x58
    69d2:	9a03      	ldr	r2, [sp, #12]
    69d4:	65e2      	str	r2, [r4, #92]	; 0x5c
    69d6:	2304      	movs	r3, #4
    69d8:	6623      	str	r3, [r4, #96]	; 0x60
    69da:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    69dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    69e0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    69e4:	2309      	movs	r3, #9
    69e6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    69ea:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    69ee:	2301      	movs	r3, #1
    69f0:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    69f4:	2380      	movs	r3, #128	; 0x80
    69f6:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    69fa:	f104 0377 	add.w	r3, r4, #119	; 0x77
    69fe:	9407      	str	r4, [sp, #28]
    6a00:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    6a04:	22f4      	movs	r2, #244	; 0xf4
    6a06:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6a0a:	428b      	cmp	r3, r1
    6a0c:	d1fb      	bne.n	6a06 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    6a0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6a12:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6a16:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    6a18:	461f      	mov	r7, r3
    6a1a:	e003      	b.n	6a24 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6a1c:	3301      	adds	r3, #1
    6a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6a22:	d009      	beq.n	6a38 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    6a24:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    6a28:	2a01      	cmp	r2, #1
    6a2a:	d9f7      	bls.n	6a1c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    6a2c:	2b70      	cmp	r3, #112	; 0x70
    6a2e:	d0f5      	beq.n	6a1c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    6a30:	5ce2      	ldrb	r2, [r4, r3]
    6a32:	eb02 0777 	add.w	r7, r2, r7, ror #1
    6a36:	e7f1      	b.n	6a1c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    6a38:	6833      	ldr	r3, [r6, #0]
    6a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a3c:	4622      	mov	r2, r4
    6a3e:	f8dd 8000 	ldr.w	r8, [sp]
    6a42:	4641      	mov	r1, r8
    6a44:	4630      	mov	r0, r6
    6a46:	4798      	blx	r3
    6a48:	2800      	cmp	r0, #0
    6a4a:	f43f af70 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6a4e:	6833      	ldr	r3, [r6, #0]
    6a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a52:	4622      	mov	r2, r4
    6a54:	f8cd 8000 	str.w	r8, [sp]
    6a58:	4641      	mov	r1, r8
    6a5a:	310c      	adds	r1, #12
    6a5c:	4630      	mov	r0, r6
    6a5e:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6a60:	2800      	cmp	r0, #0
    6a62:	f43f af64 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    6a66:	9900      	ldr	r1, [sp, #0]
    6a68:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6a70:	2100      	movs	r1, #0
    6a72:	4620      	mov	r0, r4
    6a74:	f00a fb86 	bl	11184 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6a78:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6a7c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    6a80:	9900      	ldr	r1, [sp, #0]
    6a82:	f101 0309 	add.w	r3, r1, #9
    6a86:	1e62      	subs	r2, r4, #1
    6a88:	9206      	str	r2, [sp, #24]
    6a8a:	9a07      	ldr	r2, [sp, #28]
    6a8c:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    6a90:	9508      	str	r5, [sp, #32]
    6a92:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    6a94:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    6a96:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6a9a:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6a9e:	4543      	cmp	r3, r8
    6aa0:	d1f9      	bne.n	6a96 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    6aa2:	6833      	ldr	r3, [r6, #0]
    6aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6aa6:	4622      	mov	r2, r4
    6aa8:	4659      	mov	r1, fp
    6aaa:	4630      	mov	r0, r6
    6aac:	4798      	blx	r3
    6aae:	2800      	cmp	r0, #0
    6ab0:	f000 814f 	beq.w	6d52 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6ab4:	6833      	ldr	r3, [r6, #0]
    6ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ab8:	4622      	mov	r2, r4
    6aba:	f10b 010c 	add.w	r1, fp, #12
    6abe:	4630      	mov	r0, r6
    6ac0:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6ac2:	2800      	cmp	r0, #0
    6ac4:	f000 8147 	beq.w	6d56 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    6ac8:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    6acc:	42ab      	cmp	r3, r5
    6ace:	d001      	beq.n	6ad4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    6ad0:	469b      	mov	fp, r3
    6ad2:	e7df      	b.n	6a94 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6ad4:	9309      	str	r3, [sp, #36]	; 0x24
    6ad6:	9d08      	ldr	r5, [sp, #32]
    6ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
    6adc:	2100      	movs	r1, #0
    6ade:	4620      	mov	r0, r4
    6ae0:	f00a fb50 	bl	11184 <memset>
  for (int j = 0; j < 2; j++) {
    6ae4:	f10b 0b03 	add.w	fp, fp, #3
    6ae8:	9508      	str	r5, [sp, #32]
    6aea:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    6aec:	9b06      	ldr	r3, [sp, #24]
    6aee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6af2:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6af6:	4598      	cmp	r8, r3
    6af8:	d1f9      	bne.n	6aee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    6afa:	6833      	ldr	r3, [r6, #0]
    6afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6afe:	4622      	mov	r2, r4
    6b00:	4629      	mov	r1, r5
    6b02:	4630      	mov	r0, r6
    6b04:	4798      	blx	r3
    6b06:	2800      	cmp	r0, #0
    6b08:	f000 8127 	beq.w	6d5a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6b0c:	6833      	ldr	r3, [r6, #0]
    6b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b10:	4622      	mov	r2, r4
    6b12:	f105 010c 	add.w	r1, r5, #12
    6b16:	4630      	mov	r0, r6
    6b18:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6b1a:	2800      	cmp	r0, #0
    6b1c:	f000 811f 	beq.w	6d5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    6b20:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    6b22:	458b      	cmp	fp, r1
    6b24:	d001      	beq.n	6b2a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    6b26:	460d      	mov	r5, r1
    6b28:	e7e0      	b.n	6aec <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    6b2a:	9509      	str	r5, [sp, #36]	; 0x24
    6b2c:	9d08      	ldr	r5, [sp, #32]
    6b2e:	1f23      	subs	r3, r4, #4
    6b30:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6b34:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    6b38:	429a      	cmp	r2, r3
    6b3a:	d1fb      	bne.n	6b34 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    6b3c:	6833      	ldr	r3, [r6, #0]
    6b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b40:	4622      	mov	r2, r4
    6b42:	4630      	mov	r0, r6
    6b44:	4798      	blx	r3
    6b46:	2800      	cmp	r0, #0
    6b48:	f43f aef1 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6b4c:	6833      	ldr	r3, [r6, #0]
    6b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b50:	4622      	mov	r2, r4
    6b52:	9909      	ldr	r1, [sp, #36]	; 0x24
    6b54:	310d      	adds	r1, #13
    6b56:	4630      	mov	r0, r6
    6b58:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6b5a:	2800      	cmp	r0, #0
    6b5c:	f43f aee7 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    6b60:	f1b9 0f00 	cmp.w	r9, #0
    6b64:	d006      	beq.n	6b74 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    6b66:	f8d9 3000 	ldr.w	r3, [r9]
    6b6a:	685b      	ldr	r3, [r3, #4]
    6b6c:	220c      	movs	r2, #12
    6b6e:	4925      	ldr	r1, [pc, #148]	; (6c04 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    6b70:	4648      	mov	r0, r9
    6b72:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    6b74:	9b00      	ldr	r3, [sp, #0]
    6b76:	4453      	add	r3, sl
    6b78:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6b7a:	9b03      	ldr	r3, [sp, #12]
    6b7c:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6b80:	f208 2807 	addw	r8, r8, #519	; 0x207
    6b84:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6b88:	f44f 7200 	mov.w	r2, #512	; 0x200
    6b8c:	2100      	movs	r1, #0
    6b8e:	4620      	mov	r0, r4
    6b90:	f00a faf8 	bl	11184 <memset>
  secBuf[0] = 0XF8;
    6b94:	4623      	mov	r3, r4
    6b96:	22f8      	movs	r2, #248	; 0xf8
    6b98:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    6b9c:	22ff      	movs	r2, #255	; 0xff
    6b9e:	9907      	ldr	r1, [sp, #28]
    6ba0:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    6ba4:	428b      	cmp	r3, r1
    6ba6:	d1fb      	bne.n	6ba0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    6ba8:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    6bac:	2700      	movs	r7, #0
    6bae:	e00d      	b.n	6bcc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    6bb0:	6833      	ldr	r3, [r6, #0]
    6bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bb4:	4622      	mov	r2, r4
    6bb6:	eb0b 0107 	add.w	r1, fp, r7
    6bba:	4630      	mov	r0, r6
    6bbc:	4798      	blx	r3
    6bbe:	2800      	cmp	r0, #0
    6bc0:	f43f aeb5 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6bc4:	b19f      	cbz	r7, 6bee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    6bc6:	3701      	adds	r7, #1
    6bc8:	45ba      	cmp	sl, r7
    6bca:	d91f      	bls.n	6c0c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    6bcc:	fbb7 f3f8 	udiv	r3, r7, r8
    6bd0:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d1eb      	bne.n	6bb0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    6bd8:	f1b9 0f00 	cmp.w	r9, #0
    6bdc:	d0e8      	beq.n	6bb0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    6bde:	f8d9 3000 	ldr.w	r3, [r9]
    6be2:	685b      	ldr	r3, [r3, #4]
    6be4:	2201      	movs	r2, #1
    6be6:	4908      	ldr	r1, [pc, #32]	; (6c08 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    6be8:	4648      	mov	r0, r9
    6bea:	4798      	blx	r3
    6bec:	e7e0      	b.n	6bb0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    6bee:	f44f 7200 	mov.w	r2, #512	; 0x200
    6bf2:	2100      	movs	r1, #0
    6bf4:	4620      	mov	r0, r4
    6bf6:	f00a fac5 	bl	11184 <memset>
    6bfa:	e7e4      	b.n	6bc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    6bfc:	20002048 	.word	0x20002048
    6c00:	20001fe8 	.word	0x20001fe8
    6c04:	20002000 	.word	0x20002000
    6c08:	20002c68 	.word	0x20002c68
  writeMsg(pr, "\r\n");
    6c0c:	f1b9 0f00 	cmp.w	r9, #0
    6c10:	f000 80ad 	beq.w	6d6e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    6c14:	f8d9 3000 	ldr.w	r3, [r9]
    6c18:	685b      	ldr	r3, [r3, #4]
    6c1a:	2202      	movs	r2, #2
    6c1c:	4969      	ldr	r1, [pc, #420]	; (6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    6c1e:	4648      	mov	r0, r9
    6c20:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    6c22:	9f03      	ldr	r7, [sp, #12]
    6c24:	3707      	adds	r7, #7
    6c26:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6c28:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    6c2c:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    6c30:	9b04      	ldr	r3, [sp, #16]
    6c32:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    6c36:	f4ff ae7d 	bcc.w	6934 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c3e:	2100      	movs	r1, #0
    6c40:	4620      	mov	r0, r4
    6c42:	f00a fa9f 	bl	11184 <memset>
  secBuf[0] = 0X7;
    6c46:	2307      	movs	r3, #7
    6c48:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6c4a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6c4e:	d31b      	bcc.n	6c88 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    6c50:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    6c54:	46c3      	mov	fp, r8
    6c56:	e005      	b.n	6c64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    6c58:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    6c5c:	f108 0801 	add.w	r8, r8, #1
    6c60:	45c2      	cmp	sl, r8
    6c62:	d00d      	beq.n	6c80 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    6c64:	6833      	ldr	r3, [r6, #0]
    6c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6c68:	4622      	mov	r2, r4
    6c6a:	9905      	ldr	r1, [sp, #20]
    6c6c:	4441      	add	r1, r8
    6c6e:	4630      	mov	r0, r6
    6c70:	4798      	blx	r3
    6c72:	2800      	cmp	r0, #0
    6c74:	f43f ae5b 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6c78:	f1b8 0f00 	cmp.w	r8, #0
    6c7c:	d1ee      	bne.n	6c5c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
    6c7e:	e7eb      	b.n	6c58 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
    6c80:	f1b9 0f00 	cmp.w	r9, #0
    6c84:	f000 808b 	beq.w	6d9e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
    6c88:	f8d9 3000 	ldr.w	r3, [r9]
    6c8c:	685b      	ldr	r3, [r3, #4]
    6c8e:	2216      	movs	r2, #22
    6c90:	494d      	ldr	r1, [pc, #308]	; (6dc8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
    6c92:	4648      	mov	r0, r9
    6c94:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6c96:	9b05      	ldr	r3, [sp, #20]
    6c98:	9a04      	ldr	r2, [sp, #16]
    6c9a:	1899      	adds	r1, r3, r2
    6c9c:	9802      	ldr	r0, [sp, #8]
    6c9e:	f7ff fd8f 	bl	67c0 <ExFatFormatter::writeUpcase(unsigned long)>
    6ca2:	2800      	cmp	r0, #0
    6ca4:	f43f ae46 	beq.w	6934 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    6ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
    6cac:	9a01      	ldr	r2, [sp, #4]
    6cae:	4093      	lsls	r3, r2
    6cb0:	9a02      	ldr	r2, [sp, #8]
    6cb2:	6892      	ldr	r2, [r2, #8]
    6cb4:	429a      	cmp	r2, r3
    6cb6:	f63f ae3d 	bhi.w	6934 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
    6cba:	f1b9 0f00 	cmp.w	r9, #0
    6cbe:	d003      	beq.n	6cc8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    6cc0:	4942      	ldr	r1, [pc, #264]	; (6dcc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
    6cc2:	4648      	mov	r0, r9
    6cc4:	f7ff fd2c 	bl	6720 <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    6cc8:	f04f 0a02 	mov.w	sl, #2
    6ccc:	9b01      	ldr	r3, [sp, #4]
    6cce:	fa0a f803 	lsl.w	r8, sl, r3
    6cd2:	9b05      	ldr	r3, [sp, #20]
    6cd4:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
    6cda:	2100      	movs	r1, #0
    6cdc:	4620      	mov	r0, r4
    6cde:	f00a fa51 	bl	11184 <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    6ce2:	2203      	movs	r2, #3
    6ce4:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    6ce6:	2381      	movs	r3, #129	; 0x81
    6ce8:	f884 3020 	strb.w	r3, [r4, #32]
    6cec:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
    6cf0:	2300      	movs	r3, #0
    6cf2:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
    6cf4:	2182      	movs	r1, #130	; 0x82
    6cf6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    6cfa:	9802      	ldr	r0, [sp, #8]
    6cfc:	6841      	ldr	r1, [r0, #4]
    6cfe:	6461      	str	r1, [r4, #68]	; 0x44
    6d00:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    6d02:	6882      	ldr	r2, [r0, #8]
    6d04:	65a2      	str	r2, [r4, #88]	; 0x58
    6d06:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    6d08:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
    6d0a:	f44f 7a00 	mov.w	sl, #512	; 0x200
    6d0e:	469b      	mov	fp, r3
    6d10:	e005      	b.n	6d1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
    6d12:	4652      	mov	r2, sl
    6d14:	4659      	mov	r1, fp
    6d16:	4620      	mov	r0, r4
    6d18:	f00a fa34 	bl	11184 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    6d1c:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    6d1e:	6833      	ldr	r3, [r6, #0]
    6d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d22:	4622      	mov	r2, r4
    6d24:	eb08 0107 	add.w	r1, r8, r7
    6d28:	4630      	mov	r0, r6
    6d2a:	4798      	blx	r3
    6d2c:	9000      	str	r0, [sp, #0]
    6d2e:	2800      	cmp	r0, #0
    6d30:	f43f adfd 	beq.w	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    6d34:	2f00      	cmp	r7, #0
    6d36:	d0ec      	beq.n	6d12 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    6d38:	3701      	adds	r7, #1
    6d3a:	9b04      	ldr	r3, [sp, #16]
    6d3c:	42bb      	cmp	r3, r7
    6d3e:	d1ee      	bne.n	6d1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
    6d40:	f1b9 0f00 	cmp.w	r9, #0
    6d44:	d00f      	beq.n	6d66 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    6d46:	4922      	ldr	r1, [pc, #136]	; (6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
    6d48:	4648      	mov	r0, r9
    6d4a:	f7ff fce9 	bl	6720 <Print::write(char const*)>
  return true;
    6d4e:	9d00      	ldr	r5, [sp, #0]
    6d50:	e5f8      	b.n	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6d52:	9d08      	ldr	r5, [sp, #32]
    6d54:	e5eb      	b.n	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6d56:	9d08      	ldr	r5, [sp, #32]
    6d58:	e5e9      	b.n	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6d5a:	9d08      	ldr	r5, [sp, #32]
    6d5c:	e5e7      	b.n	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    6d5e:	9d08      	ldr	r5, [sp, #32]
    6d60:	e5e5      	b.n	692e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
    6d62:	2500      	movs	r5, #0
    6d64:	e5ee      	b.n	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
    6d66:	9d00      	ldr	r5, [sp, #0]
    6d68:	e5ec      	b.n	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
    6d6a:	4605      	mov	r5, r0
    6d6c:	e5ea      	b.n	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
    6d6e:	9f03      	ldr	r7, [sp, #12]
    6d70:	3707      	adds	r7, #7
    6d72:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6d74:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    6d78:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    6d7c:	9b04      	ldr	r3, [sp, #16]
    6d7e:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    6d82:	f4ff addf 	bcc.w	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6d86:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d8a:	2100      	movs	r1, #0
    6d8c:	4620      	mov	r0, r4
    6d8e:	f00a f9f9 	bl	11184 <memset>
  secBuf[0] = 0X7;
    6d92:	2307      	movs	r3, #7
    6d94:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    6d96:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6d9a:	f4bf af59 	bcs.w	6c50 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    6d9e:	9b05      	ldr	r3, [sp, #20]
    6da0:	9a04      	ldr	r2, [sp, #16]
    6da2:	1899      	adds	r1, r3, r2
    6da4:	9802      	ldr	r0, [sp, #8]
    6da6:	f7ff fd0b 	bl	67c0 <ExFatFormatter::writeUpcase(unsigned long)>
    6daa:	2800      	cmp	r0, #0
    6dac:	d0dd      	beq.n	6d6a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    6dae:	f44f 7300 	mov.w	r3, #512	; 0x200
    6db2:	9a01      	ldr	r2, [sp, #4]
    6db4:	4093      	lsls	r3, r2
    6db6:	9a02      	ldr	r2, [sp, #8]
    6db8:	6892      	ldr	r2, [r2, #8]
    6dba:	429a      	cmp	r2, r3
    6dbc:	f67f af7d 	bls.w	6cba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
    6dc0:	e5c0      	b.n	6944 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6dc2:	bf00      	nop
    6dc4:	20002024 	.word	0x20002024
    6dc8:	20002010 	.word	0x20002010
    6dcc:	20002028 	.word	0x20002028
    6dd0:	20002038 	.word	0x20002038

00006dd4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    6dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dd8:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
    6dda:	460e      	mov	r6, r1
    6ddc:	f101 081e 	add.w	r8, r1, #30
    6de0:	e00c      	b.n	6dfc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    6de2:	4620      	mov	r0, r4
    6de4:	f004 fd98 	bl	b918 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    6de8:	f004 feb4 	bl	bb54 <toUpcase(unsigned short)>
    6dec:	4605      	mov	r5, r0
    6dee:	4638      	mov	r0, r7
    6df0:	f004 feb0 	bl	bb54 <toUpcase(unsigned short)>
    6df4:	4285      	cmp	r5, r0
    6df6:	d111      	bne.n	6e1c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
    6df8:	4546      	cmp	r6, r8
    6dfa:	d00d      	beq.n	6e18 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
    6dfc:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
    6e00:	89a3      	ldrh	r3, [r4, #12]
    6e02:	2b00      	cmp	r3, #0
    6e04:	d1ed      	bne.n	6de2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
    6e06:	6862      	ldr	r2, [r4, #4]
    6e08:	68a3      	ldr	r3, [r4, #8]
    6e0a:	429a      	cmp	r2, r3
    6e0c:	d1e9      	bne.n	6de2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
    6e0e:	fab7 f087 	clz	r0, r7
    6e12:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    6e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    6e18:	2001      	movs	r0, #1
    6e1a:	e7fb      	b.n	6e14 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
    6e1c:	2000      	movs	r0, #0
    6e1e:	e7f9      	b.n	6e14 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

00006e20 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    6e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e24:	b083      	sub	sp, #12
    6e26:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    6e28:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d03e      	beq.n	6eae <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6e30:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6e32:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    6e36:	2b01      	cmp	r3, #1
    6e38:	d94b      	bls.n	6ed2 <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
    6e3a:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6e3c:	2302      	movs	r3, #2
    6e3e:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
    6e40:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6e42:	3a01      	subs	r2, #1
    6e44:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6e46:	f8df b098 	ldr.w	fp, [pc, #152]	; 6ee0 <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    6e4a:	2200      	movs	r2, #0
    6e4c:	9901      	ldr	r1, [sp, #4]
    6e4e:	4648      	mov	r0, r9
    6e50:	f7fe fa8a 	bl	5368 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    6e54:	b358      	cbz	r0, 6eae <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6e56:	7803      	ldrb	r3, [r0, #0]
    6e58:	2bc1      	cmp	r3, #193	; 0xc1
    6e5a:	d128      	bne.n	6eae <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
    6e5c:	4605      	mov	r5, r0
    6e5e:	f100 081e 	add.w	r8, r0, #30
    6e62:	e00f      	b.n	6e84 <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
    6e64:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    6e68:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    6e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6e6e:	d31b      	bcc.n	6ea8 <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
    6e70:	b380      	cbz	r0, 6ed4 <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6e72:	463a      	mov	r2, r7
    6e74:	4631      	mov	r1, r6
    6e76:	f004 fdca 	bl	ba0e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6e7a:	4606      	mov	r6, r0
    6e7c:	b1b8      	cbz	r0, 6eae <ExFatFile::getName8(char*, unsigned int)+0x8e>
    6e7e:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    6e80:	45a8      	cmp	r8, r5
    6e82:	d01c      	beq.n	6ebe <ExFatFile::getName8(char*, unsigned int)+0x9e>
    6e84:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    6e88:	2c00      	cmp	r4, #0
    6e8a:	d0eb      	beq.n	6e64 <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
    6e8c:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6e90:	b29b      	uxth	r3, r3
    6e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6e96:	d20a      	bcs.n	6eae <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6e98:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    6e9c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    6ea0:	4304      	orrs	r4, r0
    6ea2:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
    6ea6:	e7e4      	b.n	6e72 <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
    6ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    6eac:	d305      	bcc.n	6eba <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    6eae:	2000      	movs	r0, #0
    6eb0:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
    6eb4:	b003      	add	sp, #12
    6eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    6eba:	4604      	mov	r4, r0
    6ebc:	e7e0      	b.n	6e80 <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    6ebe:	9b01      	ldr	r3, [sp, #4]
    6ec0:	3301      	adds	r3, #1
    6ec2:	b2db      	uxtb	r3, r3
    6ec4:	461a      	mov	r2, r3
    6ec6:	9301      	str	r3, [sp, #4]
    6ec8:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    6ecc:	4293      	cmp	r3, r2
    6ece:	d2bc      	bcs.n	6e4a <ExFatFile::getName8(char*, unsigned int)+0x2a>
    6ed0:	e000      	b.n	6ed4 <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
    6ed2:	460e      	mov	r6, r1
  *str = '\0';
    6ed4:	2300      	movs	r3, #0
    6ed6:	7033      	strb	r3, [r6, #0]
  return str - name;
    6ed8:	eba6 000a 	sub.w	r0, r6, sl
    6edc:	e7ea      	b.n	6eb4 <ExFatFile::getName8(char*, unsigned int)+0x94>
    6ede:	bf00      	nop
    6ee0:	000ffc00 	.word	0x000ffc00

00006ee4 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    6ee4:	b570      	push	{r4, r5, r6, lr}
    6ee6:	460c      	mov	r4, r1
    next = begin;
    6ee8:	680b      	ldr	r3, [r1, #0]
    6eea:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    6eec:	2600      	movs	r6, #0
    6eee:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    6ef0:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    6ef2:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
    6ef6:	e016      	b.n	6f26 <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
    6ef8:	4620      	mov	r0, r4
    6efa:	f004 fd0d 	bl	b918 <FsName::get16()>
    if (u == 0XFFFF) {
    6efe:	42a8      	cmp	r0, r5
    6f00:	d020      	beq.n	6f44 <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
    6f02:	f004 fe27 	bl	bb54 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    6f06:	03f3      	lsls	r3, r6, #15
    6f08:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
    6f0c:	fa53 f380 	uxtab	r3, r3, r0
    6f10:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    6f12:	f3c3 034e 	ubfx	r3, r3, #1, #15
    6f16:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    6f1a:	0a00      	lsrs	r0, r0, #8
    6f1c:	fa10 f383 	uxtah	r3, r0, r3
    6f20:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    6f22:	6920      	ldr	r0, [r4, #16]
    6f24:	3001      	adds	r0, #1
  fname->nameLength = 0;
    6f26:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
    6f28:	89a3      	ldrh	r3, [r4, #12]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d1e4      	bne.n	6ef8 <ExFatFile::hashName(ExName_t*)+0x14>
    6f2e:	6862      	ldr	r2, [r4, #4]
    6f30:	68a3      	ldr	r3, [r4, #8]
    6f32:	429a      	cmp	r2, r3
    6f34:	d1e0      	bne.n	6ef8 <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    6f36:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    6f38:	3801      	subs	r0, #1
    6f3a:	28fe      	cmp	r0, #254	; 0xfe
    6f3c:	bf8c      	ite	hi
    6f3e:	2000      	movhi	r0, #0
    6f40:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    6f42:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    6f44:	2000      	movs	r0, #0
    6f46:	e7fc      	b.n	6f42 <ExFatFile::hashName(ExName_t*)+0x5e>

00006f48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f4c:	b083      	sub	sp, #12
    6f4e:	4607      	mov	r7, r0
    6f50:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6f52:	9101      	str	r1, [sp, #4]
    6f54:	b1e9      	cbz	r1, 6f92 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    6f56:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
    6f58:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
    6f5c:	42b3      	cmp	r3, r6
    6f5e:	bf98      	it	ls
    6f60:	2600      	movls	r6, #0
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    6f62:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    6f66:	f006 0307 	and.w	r3, r6, #7
    6f6a:	2401      	movs	r4, #1
    6f6c:	409c      	lsls	r4, r3
    6f6e:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
    6f70:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
    6f72:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
    6f74:	f04f 0b00 	mov.w	fp, #0
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    6f78:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    6f7c:	465a      	mov	r2, fp
    6f7e:	eb01 3115 	add.w	r1, r1, r5, lsr #12
    6f82:	4638      	mov	r0, r7
    6f84:	f004 fc89 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6f88:	b388      	cbz	r0, 6fee <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
    6f8a:	4482      	add	sl, r0
    6f8c:	f500 7100 	add.w	r1, r0, #512	; 0x200
    6f90:	e023      	b.n	6fda <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6f92:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
    6f96:	e7df      	b.n	6f58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    6f98:	46a8      	mov	r8, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    6f9a:	42ae      	cmp	r6, r5
    6f9c:	d029      	beq.n	6ff2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    6f9e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    6fa2:	42ab      	cmp	r3, r5
    6fa4:	d91e      	bls.n	6fe4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
    6fa6:	0064      	lsls	r4, r4, #1
    6fa8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    6fac:	d010      	beq.n	6fd0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
    6fae:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
    6fb0:	4222      	tst	r2, r4
    6fb2:	d1f1      	bne.n	6f98 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
    6fb4:	eba5 0308 	sub.w	r3, r5, r8
    6fb8:	454b      	cmp	r3, r9
    6fba:	d1ee      	bne.n	6f9a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
    6fbc:	9b01      	ldr	r3, [sp, #4]
    6fbe:	b923      	cbnz	r3, 6fca <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    6fc0:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    6fc4:	bf08      	it	eq
    6fc6:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    6fca:	f108 0002 	add.w	r0, r8, #2
    6fce:	e011      	b.n	6ff4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
    6fd0:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    6fd4:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
    6fd6:	4551      	cmp	r1, sl
    6fd8:	d007      	beq.n	6fea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
    6fda:	2c00      	cmp	r4, #0
    6fdc:	d0f8      	beq.n	6fd0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
    6fde:	f89a 2000 	ldrb.w	r2, [sl]
    6fe2:	e7e4      	b.n	6fae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
    6fe4:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
    6fe6:	46d8      	mov	r8, fp
    6fe8:	465d      	mov	r5, fp
    }
    i = 0;
    6fea:	46da      	mov	sl, fp
    6fec:	e7c4      	b.n	6f78 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
    6fee:	2000      	movs	r0, #0
    6ff0:	e000      	b.n	6ff4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
    6ff2:	2001      	movs	r0, #1
  }
  return 0;
}
    6ff4:	b003      	add	sp, #12
    6ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006ffa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    6ffa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ffe:	4615      	mov	r5, r2
    7000:	461e      	mov	r6, r3
  uint32_t sector;
  uint32_t start = cluster - 2;
    7002:	3902      	subs	r1, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7004:	188b      	adds	r3, r1, r2
    7006:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    700a:	4293      	cmp	r3, r2
    700c:	d854      	bhi.n	70b8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
    700e:	4607      	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    7010:	b15e      	cbz	r6, 702a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    7012:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    7016:	4283      	cmp	r3, r0
    7018:	d90d      	bls.n	7036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    701a:	4288      	cmp	r0, r1
    701c:	d30b      	bcc.n	7036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    701e:	4293      	cmp	r3, r2
    7020:	bf28      	it	cs
    7022:	2300      	movcs	r3, #0
    7024:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    7028:	e005      	b.n	7036 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    702a:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    702e:	428b      	cmp	r3, r1
      m_bitmapStart = start;
    7030:	bf88      	it	hi
    7032:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    7036:	f001 0307 	and.w	r3, r1, #7
    703a:	2401      	movs	r4, #1
    703c:	409c      	lsls	r4, r3
    703e:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
    7040:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    7044:	eb03 3811 	add.w	r8, r3, r1, lsr #12
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    7048:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
    704c:	f04f 0901 	mov.w	r9, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    7050:	f04f 0a00 	mov.w	sl, #0
    7054:	464a      	mov	r2, r9
    7056:	4641      	mov	r1, r8
    7058:	4638      	mov	r0, r7
    705a:	f004 fc1e 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    705e:	4684      	mov	ip, r0
    7060:	b368      	cbz	r0, 70be <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
    7062:	4458      	add	r0, fp
    7064:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
    7068:	b1e4      	cbz	r4, 70a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    706a:	4603      	mov	r3, r0
    706c:	7802      	ldrb	r2, [r0, #0]
    706e:	4222      	tst	r2, r4
    7070:	bf14      	ite	ne
    7072:	2101      	movne	r1, #1
    7074:	2100      	moveq	r1, #0
    7076:	42b1      	cmp	r1, r6
    7078:	d025      	beq.n	70c6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
    707a:	4062      	eors	r2, r4
    707c:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
    707e:	3d01      	subs	r5, #1
    7080:	d018      	beq.n	70b4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
    7082:	0064      	lsls	r4, r4, #1
    7084:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7088:	d00c      	beq.n	70a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    708a:	7819      	ldrb	r1, [r3, #0]
    708c:	4221      	tst	r1, r4
    708e:	bf14      	ite	ne
    7090:	2201      	movne	r2, #1
    7092:	2200      	moveq	r2, #0
    7094:	42b2      	cmp	r2, r6
    7096:	d014      	beq.n	70c2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
    7098:	4061      	eors	r1, r4
    709a:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
    709c:	3d01      	subs	r5, #1
    709e:	d1f0      	bne.n	7082 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
    70a0:	2001      	movs	r0, #1
    70a2:	e00a      	b.n	70ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
    70a4:	3001      	adds	r0, #1
      mask = 1;
    70a6:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
    70a8:	4560      	cmp	r0, ip
    70aa:	d1dd      	bne.n	7068 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    70ac:	f108 0801 	add.w	r8, r8, #1
    i = 0;
    70b0:	46d3      	mov	fp, sl
    70b2:	e7cf      	b.n	7054 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
    70b4:	2001      	movs	r0, #1
    70b6:	e000      	b.n	70ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  }

 fail:
  return false;
    70b8:	2000      	movs	r0, #0
}
    70ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    70be:	2000      	movs	r0, #0
    70c0:	e7fb      	b.n	70ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    70c2:	2000      	movs	r0, #0
    70c4:	e7f9      	b.n	70ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    70c6:	2000      	movs	r0, #0
    70c8:	e7f7      	b.n	70ba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

000070ca <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    70ca:	b510      	push	{r4, lr}
    70cc:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    70ce:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    70d2:	6849      	ldr	r1, [r1, #4]
    70d4:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
    70d6:	6823      	ldr	r3, [r4, #0]
    70d8:	3b02      	subs	r3, #2
    70da:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    70de:	fa03 f30c 	lsl.w	r3, r3, ip
    70e2:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    70e6:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
    70ea:	4419      	add	r1, r3
    70ec:	f500 7004 	add.w	r0, r0, #528	; 0x210
    70f0:	f004 fbd3 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    70f4:	4603      	mov	r3, r0
    70f6:	b118      	cbz	r0, 7100 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
    70f8:	6862      	ldr	r2, [r4, #4]
    70fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
    70fe:	4413      	add	r3, r2
}
    7100:	4618      	mov	r0, r3
    7102:	bd10      	pop	{r4, pc}

00007104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7104:	b538      	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7106:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    710a:	3301      	adds	r3, #1
    710c:	428b      	cmp	r3, r1
    710e:	d202      	bcs.n	7116 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    DBG_FAIL_MACRO;
    return -1;
    7110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    7114:	bd38      	pop	{r3, r4, r5, pc}
    7116:	460c      	mov	r4, r1
    7118:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    711a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    711e:	2200      	movs	r2, #0
    7120:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7124:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7128:	f004 fbb7 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    712c:	b148      	cbz	r0, 7142 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    712e:	00a4      	lsls	r4, r4, #2
    7130:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    7134:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    7136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    713a:	d005      	beq.n	7148 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
    713c:	602b      	str	r3, [r5, #0]
  return 1;
    713e:	2001      	movs	r0, #1
    7140:	e7e8      	b.n	7114 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
    7142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7146:	e7e5      	b.n	7114 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
    7148:	2000      	movs	r0, #0
    714a:	e7e3      	b.n	7114 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

0000714c <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    714c:	b530      	push	{r4, r5, lr}
    714e:	b083      	sub	sp, #12
    7150:	4605      	mov	r5, r0
    7152:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
    7154:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
    7156:	aa01      	add	r2, sp, #4
    7158:	9901      	ldr	r1, [sp, #4]
    715a:	4628      	mov	r0, r5
    715c:	f7ff ffd2 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    7160:	2800      	cmp	r0, #0
    7162:	db03      	blt.n	716c <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
    7164:	3401      	adds	r4, #1
  } while (status);
    7166:	2800      	cmp	r0, #0
    7168:	d1f5      	bne.n	7156 <ExFatPartition::chainSize(unsigned long)+0xa>
    716a:	e000      	b.n	716e <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
    716c:	2400      	movs	r4, #0
}
    716e:	4620      	mov	r0, r4
    7170:	b003      	add	sp, #12
    7172:	bd30      	pop	{r4, r5, pc}

00007174 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    7174:	b570      	push	{r4, r5, r6, lr}
    7176:	4606      	mov	r6, r0
    7178:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    717a:	6849      	ldr	r1, [r1, #4]
    717c:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7180:	400b      	ands	r3, r1
    7182:	4413      	add	r3, r2
  pos->position += offset;
    7184:	4411      	add	r1, r2
    7186:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7188:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    718c:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
    718e:	b2d2      	uxtb	r2, r2
    7190:	40d3      	lsrs	r3, r2
  while (tmp--) {
    7192:	1e5d      	subs	r5, r3, #1
    7194:	b963      	cbnz	r3, 71b0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
    7196:	2001      	movs	r0, #1
    7198:	e012      	b.n	71c0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
    719a:	4622      	mov	r2, r4
    719c:	6821      	ldr	r1, [r4, #0]
    719e:	4630      	mov	r0, r6
    71a0:	f7ff ffb0 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    71a4:	2801      	cmp	r0, #1
    71a6:	d10b      	bne.n	71c0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
    71a8:	3d01      	subs	r5, #1
    71aa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    71ae:	d006      	beq.n	71be <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
    71b0:	7a23      	ldrb	r3, [r4, #8]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d0f1      	beq.n	719a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
    71b6:	6823      	ldr	r3, [r4, #0]
    71b8:	3301      	adds	r3, #1
    71ba:	6023      	str	r3, [r4, #0]
    71bc:	e7f4      	b.n	71a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
    71be:	2001      	movs	r0, #1
}
    71c0:	bd70      	pop	{r4, r5, r6, pc}

000071c2 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    71c2:	2901      	cmp	r1, #1
    71c4:	d919      	bls.n	71fa <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    71c6:	b538      	push	{r3, r4, r5, lr}
    71c8:	460c      	mov	r4, r1
    71ca:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    71cc:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    71d0:	3301      	adds	r3, #1
    71d2:	428b      	cmp	r3, r1
    71d4:	d201      	bcs.n	71da <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    71d6:	2000      	movs	r0, #0
}
    71d8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    71da:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    71de:	2201      	movs	r2, #1
    71e0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    71e4:	f500 7004 	add.w	r0, r0, #528	; 0x210
    71e8:	f004 fb57 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    71ec:	b138      	cbz	r0, 71fe <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    71ee:	00a4      	lsls	r4, r4, #2
    71f0:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    71f4:	5105      	str	r5, [r0, r4]
  return true;
    71f6:	2001      	movs	r0, #1
    71f8:	e7ee      	b.n	71d8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    71fa:	2000      	movs	r0, #0
}
    71fc:	4770      	bx	lr
  return false;
    71fe:	2000      	movs	r0, #0
    7200:	e7ea      	b.n	71d8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

00007202 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    7202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7206:	b082      	sub	sp, #8
    7208:	4606      	mov	r6, r0
    720a:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    720c:	460f      	mov	r7, r1
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    720e:	f04f 0800 	mov.w	r8, #0
    7212:	e00d      	b.n	7230 <ExFatPartition::freeChain(unsigned long)+0x2e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    }
    cluster = next;
    7214:	461c      	mov	r4, r3
    7216:	e00b      	b.n	7230 <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7218:	1c62      	adds	r2, r4, #1
    721a:	4643      	mov	r3, r8
    721c:	1bd2      	subs	r2, r2, r7
    721e:	4639      	mov	r1, r7
    7220:	4630      	mov	r0, r6
    7222:	f7ff feea 	bl	6ffa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7226:	4603      	mov	r3, r0
    7228:	b318      	cbz	r0, 7272 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    722a:	9f01      	ldr	r7, [sp, #4]
  } while (status);
    722c:	b30d      	cbz	r5, 7272 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    722e:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
    7230:	aa01      	add	r2, sp, #4
    7232:	4621      	mov	r1, r4
    7234:	4630      	mov	r0, r6
    7236:	f7ff ff65 	bl	7104 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    723a:	1e05      	subs	r5, r0, #0
    723c:	db18      	blt.n	7270 <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
    723e:	4642      	mov	r2, r8
    7240:	4621      	mov	r1, r4
    7242:	4630      	mov	r0, r6
    7244:	f7ff ffbd 	bl	71c2 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7248:	4603      	mov	r3, r0
    724a:	b190      	cbz	r0, 7272 <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
    724c:	2d00      	cmp	r5, #0
    724e:	d0e3      	beq.n	7218 <ExFatPartition::freeChain(unsigned long)+0x16>
    7250:	9b01      	ldr	r3, [sp, #4]
    7252:	1c62      	adds	r2, r4, #1
    7254:	429a      	cmp	r2, r3
    7256:	d0dd      	beq.n	7214 <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7258:	1c62      	adds	r2, r4, #1
    725a:	4643      	mov	r3, r8
    725c:	1bd2      	subs	r2, r2, r7
    725e:	4639      	mov	r1, r7
    7260:	4630      	mov	r0, r6
    7262:	f7ff feca 	bl	6ffa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7266:	4603      	mov	r3, r0
    7268:	b118      	cbz	r0, 7272 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    726a:	9f01      	ldr	r7, [sp, #4]
    726c:	463c      	mov	r4, r7
    726e:	e7df      	b.n	7230 <ExFatPartition::freeChain(unsigned long)+0x2e>

  return true;

 fail:
  return false;
    7270:	2300      	movs	r3, #0
}
    7272:	4618      	mov	r0, r3
    7274:	b002      	add	sp, #8
    7276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000727a <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    727a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    727e:	4606      	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    7280:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
    7284:	2500      	movs	r5, #0
  uint32_t nc = 0;
    7286:	462c      	mov	r4, r5
    7288:	f500 7804 	add.w	r8, r0, #528	; 0x210
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    728c:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    728e:	f101 0901 	add.w	r9, r1, #1
    7292:	2200      	movs	r2, #0
    7294:	4640      	mov	r0, r8
    7296:	f004 fb00 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    729a:	b308      	cbz	r0, 72e0 <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    729c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    72a0:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
    72a4:	e007      	b.n	72b6 <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
    72a6:	3508      	adds	r5, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    72a8:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    72aa:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    72ae:	42a0      	cmp	r0, r4
    72b0:	d911      	bls.n	72d6 <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    72b2:	4574      	cmp	r4, lr
    72b4:	d012      	beq.n	72dc <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
    72b6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    72ba:	29ff      	cmp	r1, #255	; 0xff
    72bc:	d0f3      	beq.n	72a6 <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
    72be:	2900      	cmp	r1, #0
    72c0:	d0f2      	beq.n	72a8 <ExFatPartition::freeClusterCount()+0x2e>
    72c2:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    72c4:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
    72c6:	4219      	tst	r1, r3
            usedCount++;
    72c8:	bf18      	it	ne
    72ca:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    72cc:	005b      	lsls	r3, r3, #1
    72ce:	b2db      	uxtb	r3, r3
    72d0:	3a01      	subs	r2, #1
    72d2:	d1f8      	bne.n	72c6 <ExFatPartition::freeClusterCount()+0x4c>
    72d4:	e7e8      	b.n	72a8 <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
    72d6:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    72d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    72dc:	4649      	mov	r1, r9
    72de:	e7d6      	b.n	728e <ExFatPartition::freeClusterCount()+0x14>
      return 0;
    72e0:	2000      	movs	r0, #0
    72e2:	e7f9      	b.n	72d8 <ExFatPartition::freeClusterCount()+0x5e>

000072e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    72e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72e8:	4604      	mov	r4, r0
    72ea:	460b      	mov	r3, r1
    72ec:	4616      	mov	r6, r2
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    72ee:	2100      	movs	r1, #0
    72f0:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
    72f4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    72f8:	6043      	str	r3, [r0, #4]
    m_status = 0;
    72fa:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
    72fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7300:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
    7302:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
    7306:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    730a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    730e:	f500 7704 	add.w	r7, r0, #528	; 0x210
    7312:	460a      	mov	r2, r1
    7314:	4638      	mov	r0, r7
    7316:	f004 fac0 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    731a:	4680      	mov	r8, r0
    731c:	fab0 f080 	clz	r0, r0
    7320:	0940      	lsrs	r0, r0, #5
    7322:	2e04      	cmp	r6, #4
    7324:	bf94      	ite	ls
    7326:	4605      	movls	r5, r0
    7328:	f040 0501 	orrhi.w	r5, r0, #1
    732c:	2d00      	cmp	r5, #0
    732e:	d154      	bne.n	73da <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    7330:	b1ce      	cbz	r6, 7366 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    7332:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7334:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    7338:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
    733c:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    7340:	d14c      	bne.n	73dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    7342:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    7346:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    734a:	2b00      	cmp	r3, #0
    734c:	d046      	beq.n	73dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    734e:	eb08 1606 	add.w	r6, r8, r6, lsl #4
    7352:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
    7356:	2200      	movs	r2, #0
    7358:	4631      	mov	r1, r6
    735a:	4638      	mov	r0, r7
    735c:	f004 fa9d 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7360:	4680      	mov	r8, r0
    7362:	b908      	cbnz	r0, 7368 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
    7364:	e03a      	b.n	73dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
    7366:	2600      	movs	r6, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    7368:	2205      	movs	r2, #5
    736a:	491e      	ldr	r1, [pc, #120]	; (73e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
    736c:	f108 0003 	add.w	r0, r8, #3
    7370:	f009 fae8 	bl	10944 <strncmp>
    7374:	bb90      	cbnz	r0, 73dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    7376:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
    737a:	2b09      	cmp	r3, #9
    737c:	d12e      	bne.n	73dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    737e:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    7382:	4433      	add	r3, r6
    7384:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    7388:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    738c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7390:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    7394:	4433      	add	r3, r6
    7396:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    739a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    739e:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    73a2:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    73a6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    73aa:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    73ae:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    73b2:	3309      	adds	r3, #9
    73b4:	2501      	movs	r5, #1
    73b6:	fa05 f303 	lsl.w	r3, r5, r3
    73ba:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    73be:	3b01      	subs	r3, #1
    73c0:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    73c4:	2100      	movs	r1, #0
    73c6:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    73ca:	462a      	mov	r2, r5
    73cc:	4620      	mov	r0, r4
    73ce:	f7ff fdbb 	bl	6f48 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    73d2:	2340      	movs	r3, #64	; 0x40
    73d4:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    73d8:	e000      	b.n	73dc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>

 fail:
  return false;
    73da:	2500      	movs	r5, #0
}
    73dc:	4628      	mov	r0, r5
    73de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73e2:	bf00      	nop
    73e4:	20002058 	.word	0x20002058

000073e8 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    73e8:	b510      	push	{r4, lr}
    73ea:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    73ec:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    73f0:	f7ff feac 	bl	714c <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    73f4:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    73f8:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    73fa:	b2db      	uxtb	r3, r3
}
    73fc:	4098      	lsls	r0, r3
    73fe:	bd10      	pop	{r4, pc}

00007400 <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    7400:	b538      	push	{r3, r4, r5, lr}
    7402:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7404:	4602      	mov	r2, r0
    7406:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    740a:	4629      	mov	r1, r5
    740c:	6880      	ldr	r0, [r0, #8]
    740e:	f002 f940 	bl	9692 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7412:	b140      	cbz	r0, 7426 <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    7414:	b945      	cbnz	r5, 7428 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7416:	78a3      	ldrb	r3, [r4, #2]
    7418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    741c:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    741e:	78a3      	ldrb	r3, [r4, #2]
    7420:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7424:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    7426:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    7428:	3501      	adds	r5, #1
    742a:	6923      	ldr	r3, [r4, #16]
    742c:	42ab      	cmp	r3, r5
    742e:	d0f6      	beq.n	741e <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7430:	78a3      	ldrb	r3, [r4, #2]
    7432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7436:	70a3      	strb	r3, [r4, #2]
    7438:	e7f1      	b.n	741e <FatFile::addCluster()+0x1e>
	...

0000743c <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    743c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    7440:	7803      	ldrb	r3, [r0, #0]
    7442:	f013 0f20 	tst.w	r3, #32
    7446:	d133      	bne.n	74b0 <FatFile::addDirCluster()+0x74>
    7448:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    744a:	6942      	ldr	r2, [r0, #20]
    744c:	4b1b      	ldr	r3, [pc, #108]	; (74bc <FatFile::addDirCluster()+0x80>)
    744e:	429a      	cmp	r2, r3
    7450:	d301      	bcc.n	7456 <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    7452:	2700      	movs	r7, #0
    7454:	e02d      	b.n	74b2 <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
    7456:	f7ff ffd3 	bl	7400 <FatFile::addCluster()>
    745a:	4607      	mov	r7, r0
    745c:	b348      	cbz	r0, 74b2 <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
    745e:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7460:	692e      	ldr	r6, [r5, #16]
    7462:	3e02      	subs	r6, #2
    7464:	7983      	ldrb	r3, [r0, #6]
    7466:	409e      	lsls	r6, r3
    7468:	6943      	ldr	r3, [r0, #20]
    746a:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    746c:	7903      	ldrb	r3, [r0, #4]
    746e:	b1b3      	cbz	r3, 749e <FatFile::addDirCluster()+0x62>
    7470:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
    7472:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
    7476:	f44f 7a00 	mov.w	sl, #512	; 0x200
    747a:	46a1      	mov	r9, r4
    747c:	4642      	mov	r2, r8
    747e:	fa56 f184 	uxtab	r1, r6, r4
    7482:	3028      	adds	r0, #40	; 0x28
    7484:	f004 fa09 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7488:	b1b0      	cbz	r0, 74b8 <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
    748a:	4652      	mov	r2, sl
    748c:	4649      	mov	r1, r9
    748e:	f009 fe79 	bl	11184 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7492:	68a8      	ldr	r0, [r5, #8]
    7494:	3401      	adds	r4, #1
    7496:	7902      	ldrb	r2, [r0, #4]
    7498:	b2e3      	uxtb	r3, r4
    749a:	429a      	cmp	r2, r3
    749c:	d8ee      	bhi.n	747c <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    749e:	7982      	ldrb	r2, [r0, #6]
    74a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    74a4:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    74a6:	696a      	ldr	r2, [r5, #20]
    74a8:	fa12 f383 	uxtah	r3, r2, r3
    74ac:	616b      	str	r3, [r5, #20]
  return true;
    74ae:	e000      	b.n	74b2 <FatFile::addDirCluster()+0x76>
  return false;
    74b0:	2700      	movs	r7, #0
}
    74b2:	4638      	mov	r0, r7
    74b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
    74b8:	2700      	movs	r7, #0
    74ba:	e7fa      	b.n	74b2 <FatFile::addDirCluster()+0x76>
    74bc:	001ffe00 	.word	0x001ffe00

000074c0 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    74c0:	b510      	push	{r4, lr}
    74c2:	4604      	mov	r4, r0
    74c4:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
    74c6:	6880      	ldr	r0, [r0, #8]
    74c8:	69a1      	ldr	r1, [r4, #24]
    74ca:	3028      	adds	r0, #40	; 0x28
    74cc:	f004 f9e5 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    74d0:	4603      	mov	r3, r0
    74d2:	b120      	cbz	r0, 74de <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    74d4:	88a2      	ldrh	r2, [r4, #4]
    74d6:	f002 020f 	and.w	r2, r2, #15
    74da:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
    74de:	4618      	mov	r0, r3
    74e0:	bd10      	pop	{r4, pc}

000074e2 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    74e2:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
    74e4:	7803      	ldrb	r3, [r0, #0]
    74e6:	b10b      	cbz	r3, 74ec <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    74e8:	2000      	movs	r0, #0
}
    74ea:	bd38      	pop	{r3, r4, r5, pc}
    74ec:	4604      	mov	r4, r0
    74ee:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
    74f0:	2224      	movs	r2, #36	; 0x24
    74f2:	2100      	movs	r1, #0
    74f4:	f009 fe46 	bl	11184 <memset>
  m_vol = vol;
    74f8:	60a5      	str	r5, [r4, #8]
    return m_fatType;
    74fa:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    74fc:	2b10      	cmp	r3, #16
    74fe:	d007      	beq.n	7510 <FatFile::openRoot(FatVolume*)+0x2e>
    7500:	2b20      	cmp	r3, #32
    7502:	d007      	beq.n	7514 <FatFile::openRoot(FatVolume*)+0x32>
    7504:	2b0c      	cmp	r3, #12
    7506:	d001      	beq.n	750c <FatFile::openRoot(FatVolume*)+0x2a>
    7508:	2000      	movs	r0, #0
    750a:	e7ee      	b.n	74ea <FatFile::openRoot(FatVolume*)+0x8>
    750c:	2320      	movs	r3, #32
    750e:	e002      	b.n	7516 <FatFile::openRoot(FatVolume*)+0x34>
    7510:	2320      	movs	r3, #32
    7512:	e000      	b.n	7516 <FatFile::openRoot(FatVolume*)+0x34>
    7514:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7516:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7518:	2001      	movs	r0, #1
    751a:	70a0      	strb	r0, [r4, #2]
  return true;
    751c:	e7e5      	b.n	74ea <FatFile::openRoot(FatVolume*)+0x8>

0000751e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    751e:	b538      	push	{r3, r4, r5, lr}
    7520:	4604      	mov	r4, r0
    7522:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7524:	68cb      	ldr	r3, [r1, #12]
    7526:	b91b      	cbnz	r3, 7530 <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
    7528:	6889      	ldr	r1, [r1, #8]
    752a:	f7ff ffda 	bl	74e2 <FatFile::openRoot(FatVolume*)>
}
    752e:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    7530:	2224      	movs	r2, #36	; 0x24
    7532:	2100      	movs	r1, #0
    7534:	f009 fe26 	bl	11184 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    7538:	2310      	movs	r3, #16
    753a:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    753c:	2001      	movs	r0, #1
    753e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    7540:	68ab      	ldr	r3, [r5, #8]
    7542:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7544:	68eb      	ldr	r3, [r5, #12]
    7546:	6223      	str	r3, [r4, #32]
  return true;
    7548:	e7f1      	b.n	752e <FatFile::openCluster(FatFile*)+0x10>

0000754a <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    754a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    754e:	b083      	sub	sp, #12
    7550:	4604      	mov	r4, r0
    7552:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7554:	7883      	ldrb	r3, [r0, #2]
    7556:	f013 0f01 	tst.w	r3, #1
    755a:	f000 80b4 	beq.w	76c6 <FatFile::read(void*, unsigned int)+0x17c>
    755e:	4689      	mov	r9, r1
    7560:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7562:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    7564:	f013 0f08 	tst.w	r3, #8
    7568:	d012      	beq.n	7590 <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    756a:	69c3      	ldr	r3, [r0, #28]
    756c:	6942      	ldr	r2, [r0, #20]
    756e:	1a9b      	subs	r3, r3, r2
    7570:	460a      	mov	r2, r1
    7572:	4299      	cmp	r1, r3
    7574:	bf28      	it	cs
    7576:	461a      	movcs	r2, r3
    7578:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    757a:	9b00      	ldr	r3, [sp, #0]
    757c:	2b00      	cmp	r3, #0
    757e:	f000 80b7 	beq.w	76f0 <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
    7582:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
    7584:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7588:	f104 0310 	add.w	r3, r4, #16
    758c:	9301      	str	r3, [sp, #4]
    758e:	e05b      	b.n	7648 <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
    7590:	f013 0f20 	tst.w	r3, #32
    7594:	d0f1      	beq.n	757a <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7596:	6883      	ldr	r3, [r0, #8]
    7598:	895a      	ldrh	r2, [r3, #10]
    759a:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    759c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    75a0:	b29b      	uxth	r3, r3
    75a2:	9a00      	ldr	r2, [sp, #0]
    75a4:	429a      	cmp	r2, r3
    75a6:	bf28      	it	cs
    75a8:	461a      	movcs	r2, r3
    75aa:	9200      	str	r2, [sp, #0]
    75ac:	e7e5      	b.n	757a <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
    75ae:	f890 a005 	ldrb.w	sl, [r0, #5]
    75b2:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    75b6:	f1b8 0f00 	cmp.w	r8, #0
    75ba:	d109      	bne.n	75d0 <FatFile::read(void*, unsigned int)+0x86>
    75bc:	f1ba 0f00 	cmp.w	sl, #0
    75c0:	d106      	bne.n	75d0 <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
    75c2:	b973      	cbnz	r3, 75e2 <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    75c4:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
    75c8:	bf14      	ite	ne
    75ca:	6a03      	ldrne	r3, [r0, #32]
    75cc:	6a23      	ldreq	r3, [r4, #32]
    75ce:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    75d0:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    75d2:	6925      	ldr	r5, [r4, #16]
    75d4:	3d02      	subs	r5, #2
    75d6:	799a      	ldrb	r2, [r3, #6]
    75d8:	4095      	lsls	r5, r2
    75da:	695b      	ldr	r3, [r3, #20]
    75dc:	441d      	add	r5, r3
    75de:	4455      	add	r5, sl
    75e0:	e03d      	b.n	765e <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
    75e2:	f012 0f08 	tst.w	r2, #8
    75e6:	d007      	beq.n	75f8 <FatFile::read(void*, unsigned int)+0xae>
    75e8:	78a3      	ldrb	r3, [r4, #2]
    75ea:	f013 0f40 	tst.w	r3, #64	; 0x40
    75ee:	d003      	beq.n	75f8 <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
    75f0:	6923      	ldr	r3, [r4, #16]
    75f2:	3301      	adds	r3, #1
    75f4:	6123      	str	r3, [r4, #16]
    75f6:	e7eb      	b.n	75d0 <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    75f8:	9a01      	ldr	r2, [sp, #4]
    75fa:	6921      	ldr	r1, [r4, #16]
    75fc:	f001 ff27 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7600:	2800      	cmp	r0, #0
    7602:	db60      	blt.n	76c6 <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
    7604:	2800      	cmp	r0, #0
    7606:	d1e3      	bne.n	75d0 <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
    7608:	7823      	ldrb	r3, [r4, #0]
    760a:	f013 0f70 	tst.w	r3, #112	; 0x70
    760e:	d05a      	beq.n	76c6 <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7610:	9b00      	ldr	r3, [sp, #0]
    7612:	1bd8      	subs	r0, r3, r7
    7614:	e05d      	b.n	76d2 <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
    7616:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
    761a:	42be      	cmp	r6, r7
    761c:	bf28      	it	cs
    761e:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
    7620:	68a0      	ldr	r0, [r4, #8]
    7622:	2200      	movs	r2, #0
    7624:	4629      	mov	r1, r5
    7626:	3028      	adds	r0, #40	; 0x28
    7628:	f004 f937 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    762c:	4601      	mov	r1, r0
    762e:	2800      	cmp	r0, #0
    7630:	d049      	beq.n	76c6 <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    7632:	4632      	mov	r2, r6
    7634:	4441      	add	r1, r8
    7636:	4648      	mov	r0, r9
    7638:	f005 fcda 	bl	cff0 <memcpy>
    dst += n;
    763c:	44b1      	add	r9, r6
    m_curPosition += n;
    763e:	6963      	ldr	r3, [r4, #20]
    7640:	4433      	add	r3, r6
    7642:	6163      	str	r3, [r4, #20]
  while (toRead) {
    7644:	1bbf      	subs	r7, r7, r6
    7646:	d0e3      	beq.n	7610 <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7648:	6963      	ldr	r3, [r4, #20]
    764a:	68a0      	ldr	r0, [r4, #8]
    764c:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7650:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
    7652:	f012 0f20 	tst.w	r2, #32
    7656:	d0aa      	beq.n	75ae <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
    7658:	6a05      	ldr	r5, [r0, #32]
    765a:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    765e:	f1b8 0f00 	cmp.w	r8, #0
    7662:	d1d8      	bne.n	7616 <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7664:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7668:	d3d5      	bcc.n	7616 <FatFile::read(void*, unsigned int)+0xcc>
    766a:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    766e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7672:	429d      	cmp	r5, r3
    7674:	d0cf      	beq.n	7616 <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7676:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    767a:	d32d      	bcc.n	76d8 <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    767c:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
    7680:	7822      	ldrb	r2, [r4, #0]
    7682:	f012 0f20 	tst.w	r2, #32
    7686:	d106      	bne.n	7696 <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7688:	f89b 2004 	ldrb.w	r2, [fp, #4]
    768c:	eba2 020a 	sub.w	r2, r2, sl
    7690:	4590      	cmp	r8, r2
    7692:	bf28      	it	cs
    7694:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
    7696:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    769a:	429d      	cmp	r5, r3
    769c:	d808      	bhi.n	76b0 <FatFile::read(void*, unsigned int)+0x166>
    769e:	eb05 0208 	add.w	r2, r5, r8
    76a2:	4293      	cmp	r3, r2
    76a4:	d204      	bcs.n	76b0 <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    76a6:	f10b 0028 	add.w	r0, fp, #40	; 0x28
    76aa:	f004 f8cf 	bl	b84c <FsCache::sync()>
    76ae:	b150      	cbz	r0, 76c6 <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    76b0:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    76b4:	6803      	ldr	r3, [r0, #0]
    76b6:	f8d3 b014 	ldr.w	fp, [r3, #20]
    76ba:	4643      	mov	r3, r8
    76bc:	464a      	mov	r2, r9
    76be:	4629      	mov	r1, r5
    76c0:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    76c2:	2800      	cmp	r0, #0
    76c4:	d1ba      	bne.n	763c <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
    76c6:	7863      	ldrb	r3, [r4, #1]
    76c8:	f043 0302 	orr.w	r3, r3, #2
    76cc:	7063      	strb	r3, [r4, #1]
  return -1;
    76ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    76d2:	b003      	add	sp, #12
    76d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
    76d8:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    76dc:	6803      	ldr	r3, [r0, #0]
    76de:	691b      	ldr	r3, [r3, #16]
    76e0:	464a      	mov	r2, r9
    76e2:	4629      	mov	r1, r5
    76e4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    76e6:	2800      	cmp	r0, #0
    76e8:	d0ed      	beq.n	76c6 <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    76ea:	f44f 7600 	mov.w	r6, #512	; 0x200
    76ee:	e7a5      	b.n	763c <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
    76f0:	9f00      	ldr	r7, [sp, #0]
    76f2:	e78d      	b.n	7610 <FatFile::read(void*, unsigned int)+0xc6>

000076f4 <FatFile::peek()>:
int FatFile::peek() {
    76f4:	b570      	push	{r4, r5, r6, lr}
    76f6:	b082      	sub	sp, #8
    76f8:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    76fa:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    76fc:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
    76fe:	2201      	movs	r2, #1
    7700:	f10d 0107 	add.w	r1, sp, #7
    7704:	f7ff ff21 	bl	754a <FatFile::read(void*, unsigned int)>
    7708:	2801      	cmp	r0, #1
    770a:	bf0c      	ite	eq
    770c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7710:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    7714:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
    7716:	6125      	str	r5, [r4, #16]
}
    7718:	b002      	add	sp, #8
    771a:	bd70      	pop	{r4, r5, r6, pc}

0000771c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    771c:	b530      	push	{r4, r5, lr}
    771e:	b083      	sub	sp, #12
    7720:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7722:	6943      	ldr	r3, [r0, #20]
    7724:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
    7728:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
    772c:	d009      	beq.n	7742 <FatFile::readDirCache(bool)+0x26>
    772e:	2901      	cmp	r1, #1
    7730:	d107      	bne.n	7742 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    7732:	3320      	adds	r3, #32
    7734:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7736:	68a0      	ldr	r0, [r4, #8]
    7738:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    773a:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    773e:	b003      	add	sp, #12
    7740:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7742:	2201      	movs	r2, #1
    7744:	f10d 0107 	add.w	r1, sp, #7
    7748:	4620      	mov	r0, r4
    774a:	f7ff fefe 	bl	754a <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    774e:	b240      	sxtb	r0, r0
    7750:	2801      	cmp	r0, #1
    7752:	d103      	bne.n	775c <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7754:	6963      	ldr	r3, [r4, #20]
    7756:	331f      	adds	r3, #31
    7758:	6163      	str	r3, [r4, #20]
    775a:	e7ec      	b.n	7736 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    775c:	2000      	movs	r0, #0
    775e:	e7ee      	b.n	773e <FatFile::readDirCache(bool)+0x22>

00007760 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7764:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7766:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
    7768:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
    776a:	b36b      	cbz	r3, 77c8 <FatFile::seekSet(unsigned long)+0x68>
    776c:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    776e:	6942      	ldr	r2, [r0, #20]
    7770:	428a      	cmp	r2, r1
    7772:	d045      	beq.n	7800 <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
    7774:	b361      	cbz	r1, 77d0 <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    7776:	f013 0f08 	tst.w	r3, #8
    777a:	d032      	beq.n	77e2 <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
    777c:	69c1      	ldr	r1, [r0, #28]
    777e:	42a9      	cmp	r1, r5
    7780:	d322      	bcc.n	77c8 <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7782:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7786:	f89c 1006 	ldrb.w	r1, [ip, #6]
    778a:	3109      	adds	r1, #9
    778c:	b2c9      	uxtb	r1, r1
    778e:	1e6e      	subs	r6, r5, #1
    7790:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    7792:	78a0      	ldrb	r0, [r4, #2]
    7794:	f010 0f40 	tst.w	r0, #64	; 0x40
    7798:	d12c      	bne.n	77f4 <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    779a:	1e50      	subs	r0, r2, #1
    779c:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
    779e:	b10a      	cbz	r2, 77a4 <FatFile::seekSet(unsigned long)+0x44>
    77a0:	4286      	cmp	r6, r0
    77a2:	d22b      	bcs.n	77fc <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    77a4:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
    77a8:	bf14      	ite	ne
    77aa:	f8dc 3020 	ldrne.w	r3, [ip, #32]
    77ae:	6a23      	ldreq	r3, [r4, #32]
    77b0:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    77b2:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
    77b6:	b16e      	cbz	r6, 77d4 <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    77b8:	4642      	mov	r2, r8
    77ba:	6921      	ldr	r1, [r4, #16]
    77bc:	68a0      	ldr	r0, [r4, #8]
    77be:	f001 fe46 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
    77c2:	3e01      	subs	r6, #1
    77c4:	2800      	cmp	r0, #0
    77c6:	dcf6      	bgt.n	77b6 <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    77c8:	6127      	str	r7, [r4, #16]
  return false;
    77ca:	2000      	movs	r0, #0
}
    77cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
    77d0:	2300      	movs	r3, #0
    77d2:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
    77d4:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    77d6:	78a3      	ldrb	r3, [r4, #2]
    77d8:	f023 0320 	bic.w	r3, r3, #32
    77dc:	70a3      	strb	r3, [r4, #2]
  return true;
    77de:	2001      	movs	r0, #1
    77e0:	e7f4      	b.n	77cc <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
    77e2:	f013 0f20 	tst.w	r3, #32
    77e6:	d0cc      	beq.n	7782 <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
    77e8:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    77ea:	895b      	ldrh	r3, [r3, #10]
    77ec:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    77f0:	d9f0      	bls.n	77d4 <FatFile::seekSet(unsigned long)+0x74>
    77f2:	e7e9      	b.n	77c8 <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
    77f4:	6a23      	ldr	r3, [r4, #32]
    77f6:	4433      	add	r3, r6
    77f8:	6123      	str	r3, [r4, #16]
    goto done;
    77fa:	e7eb      	b.n	77d4 <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
    77fc:	1a36      	subs	r6, r6, r0
    77fe:	e7d8      	b.n	77b2 <FatFile::seekSet(unsigned long)+0x52>
    return true;
    7800:	2001      	movs	r0, #1
    7802:	e7e3      	b.n	77cc <FatFile::seekSet(unsigned long)+0x6c>

00007804 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7804:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7806:	7803      	ldrb	r3, [r0, #0]
    7808:	f013 0f10 	tst.w	r3, #16
    780c:	d101      	bne.n	7812 <FatFile::rmdir()+0xe>
  return false;
    780e:	2000      	movs	r0, #0
}
    7810:	bd38      	pop	{r3, r4, r5, pc}
    7812:	4604      	mov	r4, r0
    seekSet(0);
    7814:	2100      	movs	r1, #0
    7816:	f7ff ffa3 	bl	7760 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    781a:	2501      	movs	r5, #1
    781c:	4629      	mov	r1, r5
    781e:	4620      	mov	r0, r4
    7820:	f7ff ff7c 	bl	771c <FatFile::readDirCache(bool)>
    if (!dir) {
    7824:	4603      	mov	r3, r0
    7826:	b168      	cbz	r0, 7844 <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
    7828:	7800      	ldrb	r0, [r0, #0]
    782a:	b170      	cbz	r0, 784a <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    782c:	282e      	cmp	r0, #46	; 0x2e
    782e:	bf18      	it	ne
    7830:	28e5      	cmpne	r0, #229	; 0xe5
    7832:	bf0c      	ite	eq
    7834:	2001      	moveq	r0, #1
    7836:	2000      	movne	r0, #0
    7838:	d0f0      	beq.n	781c <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
    783a:	7adb      	ldrb	r3, [r3, #11]
    783c:	f013 0f08 	tst.w	r3, #8
    7840:	d1ec      	bne.n	781c <FatFile::rmdir()+0x18>
    7842:	e7e5      	b.n	7810 <FatFile::rmdir()+0xc>
      if (!getError()) {
    7844:	7863      	ldrb	r3, [r4, #1]
    7846:	2b00      	cmp	r3, #0
    7848:	d1e2      	bne.n	7810 <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
    784a:	2308      	movs	r3, #8
    784c:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    784e:	78a3      	ldrb	r3, [r4, #2]
    7850:	f043 0302 	orr.w	r3, r3, #2
    7854:	70a3      	strb	r3, [r4, #2]
  return remove();
    7856:	4620      	mov	r0, r4
    7858:	f001 f974 	bl	8b44 <FatFile::remove()>
    785c:	e7d8      	b.n	7810 <FatFile::rmdir()+0xc>

0000785e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    785e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7860:	4604      	mov	r4, r0
    7862:	460e      	mov	r6, r1
    7864:	4615      	mov	r5, r2
    7866:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
    7868:	2224      	movs	r2, #36	; 0x24
    786a:	2100      	movs	r1, #0
    786c:	f009 fc8a 	bl	11184 <memset>
  m_vol = dirFile->m_vol;
    7870:	68b0      	ldr	r0, [r6, #8]
    7872:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    7874:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
    7876:	6a33      	ldr	r3, [r6, #32]
    7878:	60e3      	str	r3, [r4, #12]
    787a:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
    787e:	f005 050f 	and.w	r5, r5, #15
    7882:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7886:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    7888:	f011 0f08 	tst.w	r1, #8
    788c:	d113      	bne.n	78b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    788e:	f001 0117 	and.w	r1, r1, #23
    7892:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    7894:	7ad3      	ldrb	r3, [r2, #11]
    7896:	f013 0f18 	tst.w	r3, #24
    789a:	d102      	bne.n	78a2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
    789c:	f041 0108 	orr.w	r1, r1, #8
    78a0:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
    78a2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    78a6:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
    78a8:	f007 0303 	and.w	r3, r7, #3
    78ac:	2b01      	cmp	r3, #1
    78ae:	d027      	beq.n	7900 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    78b0:	2b02      	cmp	r3, #2
    78b2:	d027      	beq.n	7904 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    78b4:	b11b      	cbz	r3, 78be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
    78b6:	2000      	movs	r0, #0
    78b8:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
    78ba:	70a0      	strb	r0, [r4, #2]
}
    78bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
    78be:	f417 6f80 	tst.w	r7, #1024	; 0x400
    78c2:	d1f8      	bne.n	78b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    78c4:	f007 0308 	and.w	r3, r7, #8
    78c8:	f043 0301 	orr.w	r3, r3, #1
    78cc:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    78ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    78d0:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    78d2:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    78d4:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    78d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    78da:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    78dc:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    78de:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    78e0:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    78e4:	d105      	bne.n	78f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
    78e6:	2001      	movs	r0, #1
    78e8:	e7e8      	b.n	78bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    78ea:	f001 ff19 	bl	9720 <FatPartition::freeChain(unsigned long)>
    78ee:	b9f0      	cbnz	r0, 792e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    78f0:	e7e1      	b.n	78b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    78f2:	69e1      	ldr	r1, [r4, #28]
    78f4:	4620      	mov	r0, r4
    78f6:	f7ff ff33 	bl	7760 <FatFile::seekSet(unsigned long)>
    78fa:	2800      	cmp	r0, #0
    78fc:	d1de      	bne.n	78bc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    78fe:	e7da      	b.n	78b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
    7900:	2302      	movs	r3, #2
    7902:	e000      	b.n	7906 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
    7904:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
    7906:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    7908:	7821      	ldrb	r1, [r4, #0]
    790a:	f011 0f11 	tst.w	r1, #17
    790e:	d1d2      	bne.n	78b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7910:	f007 0108 	and.w	r1, r7, #8
    7914:	430b      	orrs	r3, r1
    7916:	70a3      	strb	r3, [r4, #2]
    7918:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    791a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    791c:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    791e:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7920:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
    7924:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7928:	d0d7      	beq.n	78da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    792a:	2900      	cmp	r1, #0
    792c:	d1dd      	bne.n	78ea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    792e:	78a3      	ldrb	r3, [r4, #2]
    7930:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7934:	70a3      	strb	r3, [r4, #2]
    7936:	e7d3      	b.n	78e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

00007938 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    793c:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
    793e:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7940:	2d00      	cmp	r5, #0
    7942:	d14f      	bne.n	79e4 <FatFile::openNext(FatFile*, int)+0xac>
    7944:	4606      	mov	r6, r0
    7946:	460c      	mov	r4, r1
    7948:	4692      	mov	sl, r2
    794a:	780b      	ldrb	r3, [r1, #0]
    794c:	f013 0f70 	tst.w	r3, #112	; 0x70
    7950:	d04c      	beq.n	79ec <FatFile::openNext(FatFile*, int)+0xb4>
    7952:	694b      	ldr	r3, [r1, #20]
    7954:	f013 0f1f 	tst.w	r3, #31
    7958:	d14a      	bne.n	79f0 <FatFile::openNext(FatFile*, int)+0xb8>
    795a:	46a9      	mov	r9, r5
    795c:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
    795e:	2700      	movs	r7, #0
    7960:	e000      	b.n	7964 <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
    7962:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
    7964:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
    7968:	4639      	mov	r1, r7
    796a:	4620      	mov	r0, r4
    796c:	f7ff fed6 	bl	771c <FatFile::readDirCache(bool)>
    if (!dir) {
    7970:	4602      	mov	r2, r0
    7972:	2800      	cmp	r0, #0
    7974:	d03e      	beq.n	79f4 <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
    7976:	7803      	ldrb	r3, [r0, #0]
    7978:	2b00      	cmp	r3, #0
    797a:	d03d      	beq.n	79f8 <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    797c:	2be5      	cmp	r3, #229	; 0xe5
    797e:	bf18      	it	ne
    7980:	2b2e      	cmpne	r3, #46	; 0x2e
    7982:	bf0c      	ite	eq
    7984:	2001      	moveq	r0, #1
    7986:	2000      	movne	r0, #0
    7988:	d0eb      	beq.n	7962 <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    798a:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
    798c:	f011 0c08 	ands.w	ip, r1, #8
    7990:	d003      	beq.n	799a <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
    7992:	290f      	cmp	r1, #15
    7994:	d01e      	beq.n	79d4 <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
    7996:	46a9      	mov	r9, r5
    7998:	e7e4      	b.n	7964 <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    799a:	f1b9 0f00 	cmp.w	r9, #0
    799e:	d00f      	beq.n	79c0 <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    79a0:	1e51      	subs	r1, r2, #1
    79a2:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    79a4:	ea4f 13cc 	mov.w	r3, ip, lsl #7
    79a8:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    79ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    79b0:	fa55 f383 	uxtab	r3, r5, r3
    79b4:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
    79b8:	4291      	cmp	r1, r2
    79ba:	d1f3      	bne.n	79a4 <FatFile::openNext(FatFile*, int)+0x6c>
    79bc:	45e3      	cmp	fp, ip
    79be:	d112      	bne.n	79e6 <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    79c0:	f8cd 9000 	str.w	r9, [sp]
    79c4:	4653      	mov	r3, sl
    79c6:	f3c8 124f 	ubfx	r2, r8, #5, #16
    79ca:	4621      	mov	r1, r4
    79cc:	4630      	mov	r0, r6
    79ce:	f7ff ff46 	bl	785e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    79d2:	e008      	b.n	79e6 <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    79d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    79d8:	d0c4      	beq.n	7964 <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
    79da:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
    79de:	f892 b00d 	ldrb.w	fp, [r2, #13]
    79e2:	e7bf      	b.n	7964 <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
    79e4:	2000      	movs	r0, #0
}
    79e6:	b003      	add	sp, #12
    79e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    79ec:	2000      	movs	r0, #0
    79ee:	e7fa      	b.n	79e6 <FatFile::openNext(FatFile*, int)+0xae>
    79f0:	2000      	movs	r0, #0
    79f2:	e7f8      	b.n	79e6 <FatFile::openNext(FatFile*, int)+0xae>
    79f4:	2000      	movs	r0, #0
    79f6:	e7f6      	b.n	79e6 <FatFile::openNext(FatFile*, int)+0xae>
    79f8:	2000      	movs	r0, #0
    79fa:	e7f4      	b.n	79e6 <FatFile::openNext(FatFile*, int)+0xae>

000079fc <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    79fc:	7803      	ldrb	r3, [r0, #0]
    79fe:	2b00      	cmp	r3, #0
    7a00:	d049      	beq.n	7a96 <FatFile::sync()+0x9a>
bool FatFile::sync() {
    7a02:	b530      	push	{r4, r5, lr}
    7a04:	b083      	sub	sp, #12
    7a06:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7a08:	f990 3002 	ldrsb.w	r3, [r0, #2]
    7a0c:	2b00      	cmp	r3, #0
    7a0e:	db0d      	blt.n	7a2c <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7a10:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7a12:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7a16:	f003 ff19 	bl	b84c <FsCache::sync()>
    7a1a:	2800      	cmp	r0, #0
    7a1c:	d12e      	bne.n	7a7c <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7a1e:	7863      	ldrb	r3, [r4, #1]
    7a20:	f043 0301 	orr.w	r3, r3, #1
    7a24:	7063      	strb	r3, [r4, #1]
  return false;
    7a26:	2000      	movs	r0, #0
}
    7a28:	b003      	add	sp, #12
    7a2a:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7a2c:	2101      	movs	r1, #1
    7a2e:	f7ff fd47 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7a32:	4605      	mov	r5, r0
    7a34:	2800      	cmp	r0, #0
    7a36:	d0f2      	beq.n	7a1e <FatFile::sync()+0x22>
    7a38:	7803      	ldrb	r3, [r0, #0]
    7a3a:	2be5      	cmp	r3, #229	; 0xe5
    7a3c:	d0ef      	beq.n	7a1e <FatFile::sync()+0x22>
    if (isFile()) {
    7a3e:	7823      	ldrb	r3, [r4, #0]
    7a40:	f013 0f08 	tst.w	r3, #8
    7a44:	d001      	beq.n	7a4a <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
    7a46:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a48:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7a4a:	6a23      	ldr	r3, [r4, #32]
    7a4c:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7a4e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7a50:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
    7a52:	4b12      	ldr	r3, [pc, #72]	; (7a9c <FatFile::sync()+0xa0>)
    7a54:	681b      	ldr	r3, [r3, #0]
    7a56:	b163      	cbz	r3, 7a72 <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
    7a58:	f10d 0203 	add.w	r2, sp, #3
    7a5c:	a901      	add	r1, sp, #4
    7a5e:	f10d 0006 	add.w	r0, sp, #6
    7a62:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    7a64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7a68:	832b      	strh	r3, [r5, #24]
    7a6a:	826b      	strh	r3, [r5, #18]
    7a6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7a70:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7a72:	78a3      	ldrb	r3, [r4, #2]
    7a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a78:	70a3      	strb	r3, [r4, #2]
    7a7a:	e7c9      	b.n	7a10 <FatFile::sync()+0x14>
    7a7c:	f505 700e 	add.w	r0, r5, #568	; 0x238
    7a80:	f003 fee4 	bl	b84c <FsCache::sync()>
    7a84:	2800      	cmp	r0, #0
    7a86:	d0ca      	beq.n	7a1e <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
    7a88:	6828      	ldr	r0, [r5, #0]
    7a8a:	6803      	ldr	r3, [r0, #0]
    7a8c:	6a1b      	ldr	r3, [r3, #32]
    7a8e:	4798      	blx	r3
  if (m_vol->cacheSync()) {
    7a90:	2800      	cmp	r0, #0
    7a92:	d1c9      	bne.n	7a28 <FatFile::sync()+0x2c>
 fail:
    7a94:	e7c3      	b.n	7a1e <FatFile::sync()+0x22>
    return true;
    7a96:	2001      	movs	r0, #1
}
    7a98:	4770      	bx	lr
    7a9a:	bf00      	nop
    7a9c:	20004b68 	.word	0x20004b68

00007aa0 <FatFile::close()>:
bool FatFile::close() {
    7aa0:	b510      	push	{r4, lr}
    7aa2:	4604      	mov	r4, r0
  bool rtn = sync();
    7aa4:	f7ff ffaa 	bl	79fc <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7aa8:	2300      	movs	r3, #0
    7aaa:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7aac:	70a3      	strb	r3, [r4, #2]
}
    7aae:	bd10      	pop	{r4, pc}

00007ab0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ab2:	b095      	sub	sp, #84	; 0x54
    7ab4:	9201      	str	r2, [sp, #4]
    7ab6:	461f      	mov	r7, r3
  FatFile() {}
    7ab8:	2300      	movs	r3, #0
    7aba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7abe:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    7ac2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    7ac6:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    7aca:	7803      	ldrb	r3, [r0, #0]
    7acc:	2b00      	cmp	r3, #0
    7ace:	d14e      	bne.n	7b6e <FatFile::open(FatFile*, char const*, int)+0xbe>
    7ad0:	4604      	mov	r4, r0
    7ad2:	460d      	mov	r5, r1
    7ad4:	780b      	ldrb	r3, [r1, #0]
    7ad6:	f013 0f70 	tst.w	r3, #112	; 0x70
    7ada:	d04c      	beq.n	7b76 <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
    7adc:	4613      	mov	r3, r2
    7ade:	7812      	ldrb	r2, [r2, #0]
    7ae0:	2a2f      	cmp	r2, #47	; 0x2f
    7ae2:	d028      	beq.n	7b36 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7ae4:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
    7ae6:	ab01      	add	r3, sp, #4
    7ae8:	aa02      	add	r2, sp, #8
    7aea:	9901      	ldr	r1, [sp, #4]
    7aec:	4620      	mov	r0, r4
    7aee:	f000 ffbb 	bl	8a68 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7af2:	4603      	mov	r3, r0
    7af4:	2800      	cmp	r0, #0
    7af6:	d03b      	beq.n	7b70 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
    7af8:	9b01      	ldr	r3, [sp, #4]
    7afa:	781b      	ldrb	r3, [r3, #0]
    7afc:	b37b      	cbz	r3, 7b5e <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7afe:	4633      	mov	r3, r6
    7b00:	aa02      	add	r2, sp, #8
    7b02:	4629      	mov	r1, r5
    7b04:	4620      	mov	r0, r4
    7b06:	f000 fe2f 	bl	8768 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7b0a:	4603      	mov	r3, r0
    7b0c:	b380      	cbz	r0, 7b70 <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
    7b0e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7b12:	46a6      	mov	lr, r4
    7b14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7b1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7b20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7b24:	f8de 3000 	ldr.w	r3, [lr]
    7b28:	f8cc 3000 	str.w	r3, [ip]
    close();
    7b2c:	4620      	mov	r0, r4
    7b2e:	f7ff ffb7 	bl	7aa0 <FatFile::close()>
    dirFile = &tmpDir;
    7b32:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7b34:	e7d7      	b.n	7ae6 <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
    7b36:	3301      	adds	r3, #1
    7b38:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7b3a:	781a      	ldrb	r2, [r3, #0]
    7b3c:	2a2f      	cmp	r2, #47	; 0x2f
    7b3e:	d0fa      	beq.n	7b36 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
    7b40:	b92a      	cbnz	r2, 7b4e <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
    7b42:	68a9      	ldr	r1, [r5, #8]
    7b44:	4620      	mov	r0, r4
    7b46:	f7ff fccc 	bl	74e2 <FatFile::openRoot(FatVolume*)>
    7b4a:	4603      	mov	r3, r0
    7b4c:	e010      	b.n	7b70 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7b4e:	68a9      	ldr	r1, [r5, #8]
    7b50:	a80b      	add	r0, sp, #44	; 0x2c
    7b52:	f7ff fcc6 	bl	74e2 <FatFile::openRoot(FatVolume*)>
    7b56:	4603      	mov	r3, r0
    7b58:	b150      	cbz	r0, 7b70 <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
    7b5a:	ad0b      	add	r5, sp, #44	; 0x2c
    7b5c:	e7c2      	b.n	7ae4 <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
    7b5e:	463b      	mov	r3, r7
    7b60:	aa02      	add	r2, sp, #8
    7b62:	4629      	mov	r1, r5
    7b64:	4620      	mov	r0, r4
    7b66:	f000 fdff 	bl	8768 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7b6a:	4603      	mov	r3, r0
    7b6c:	e000      	b.n	7b70 <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
    7b6e:	2300      	movs	r3, #0
}
    7b70:	4618      	mov	r0, r3
    7b72:	b015      	add	sp, #84	; 0x54
    7b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7b76:	2300      	movs	r3, #0
    7b78:	e7fa      	b.n	7b70 <FatFile::open(FatFile*, char const*, int)+0xc0>

00007b7a <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7b7a:	b129      	cbz	r1, 7b88 <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
    7b7c:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    7b7e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    7b82:	f7ff ff95 	bl	7ab0 <FatFile::open(FatFile*, char const*, int)>
}
    7b86:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    7b88:	2000      	movs	r0, #0
}
    7b8a:	4770      	bx	lr

00007b8c <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7b8c:	b570      	push	{r4, r5, r6, lr}
    7b8e:	4605      	mov	r5, r0
    7b90:	460c      	mov	r4, r1
  if (!sync()) {
    7b92:	f7ff ff33 	bl	79fc <FatFile::sync()>
    7b96:	4606      	mov	r6, r0
    7b98:	b908      	cbnz	r0, 7b9e <FatFile::dirEntry(DirFat_t*)+0x12>
}
    7b9a:	4630      	mov	r0, r6
    7b9c:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7b9e:	2100      	movs	r1, #0
    7ba0:	4628      	mov	r0, r5
    7ba2:	f7ff fc8d 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7ba6:	4603      	mov	r3, r0
    7ba8:	b180      	cbz	r0, 7bcc <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
    7baa:	6805      	ldr	r5, [r0, #0]
    7bac:	6840      	ldr	r0, [r0, #4]
    7bae:	6899      	ldr	r1, [r3, #8]
    7bb0:	68da      	ldr	r2, [r3, #12]
    7bb2:	6025      	str	r5, [r4, #0]
    7bb4:	6060      	str	r0, [r4, #4]
    7bb6:	60a1      	str	r1, [r4, #8]
    7bb8:	60e2      	str	r2, [r4, #12]
    7bba:	691d      	ldr	r5, [r3, #16]
    7bbc:	6958      	ldr	r0, [r3, #20]
    7bbe:	6999      	ldr	r1, [r3, #24]
    7bc0:	69da      	ldr	r2, [r3, #28]
    7bc2:	6125      	str	r5, [r4, #16]
    7bc4:	6160      	str	r0, [r4, #20]
    7bc6:	61a1      	str	r1, [r4, #24]
    7bc8:	61e2      	str	r2, [r4, #28]
  return true;
    7bca:	e7e6      	b.n	7b9a <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
    7bcc:	2600      	movs	r6, #0
    7bce:	e7e4      	b.n	7b9a <FatFile::dirEntry(DirFat_t*)+0xe>

00007bd0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7bd0:	b530      	push	{r4, r5, lr}
    7bd2:	b089      	sub	sp, #36	; 0x24
    7bd4:	460d      	mov	r5, r1
    7bd6:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7bd8:	4669      	mov	r1, sp
    7bda:	f7ff ffd7 	bl	7b8c <FatFile::dirEntry(DirFat_t*)>
    7bde:	b128      	cbz	r0, 7bec <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7be0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7be4:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7be6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bea:	8023      	strh	r3, [r4, #0]
}
    7bec:	b009      	add	sp, #36	; 0x24
    7bee:	bd30      	pop	{r4, r5, pc}

00007bf0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7bf0:	b530      	push	{r4, r5, lr}
    7bf2:	b089      	sub	sp, #36	; 0x24
    7bf4:	460d      	mov	r5, r1
    7bf6:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    7bf8:	4669      	mov	r1, sp
    7bfa:	f7ff ffc7 	bl	7b8c <FatFile::dirEntry(DirFat_t*)>
    7bfe:	b128      	cbz	r0, 7c0c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7c00:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    7c04:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7c06:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7c0a:	8023      	strh	r3, [r4, #0]
}
    7c0c:	b009      	add	sp, #36	; 0x24
    7c0e:	bd30      	pop	{r4, r5, pc}

00007c10 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7c10:	780b      	ldrb	r3, [r1, #0]
    7c12:	f013 0f70 	tst.w	r3, #112	; 0x70
    7c16:	d101      	bne.n	7c1c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
    7c18:	2000      	movs	r0, #0
}
    7c1a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c1e:	b089      	sub	sp, #36	; 0x24
    7c20:	4604      	mov	r4, r0
    7c22:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7c24:	f640 2302 	movw	r3, #2562	; 0xa02
    7c28:	f000 fd9e 	bl	8768 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7c2c:	b908      	cbnz	r0, 7c32 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
    7c2e:	b009      	add	sp, #36	; 0x24
    7c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
    7c32:	2301      	movs	r3, #1
    7c34:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7c36:	2310      	movs	r3, #16
    7c38:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    7c3a:	4620      	mov	r0, r4
    7c3c:	f7ff fbfe 	bl	743c <FatFile::addDirCluster()>
    7c40:	2800      	cmp	r0, #0
    7c42:	d0f4      	beq.n	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
    7c44:	6923      	ldr	r3, [r4, #16]
    7c46:	6223      	str	r3, [r4, #32]
    seekSet(0);
    7c48:	2100      	movs	r1, #0
    7c4a:	4620      	mov	r0, r4
    7c4c:	f7ff fd88 	bl	7760 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    7c50:	4620      	mov	r0, r4
    7c52:	f7ff fed3 	bl	79fc <FatFile::sync()>
    7c56:	2800      	cmp	r0, #0
    7c58:	d0e9      	beq.n	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7c5a:	2101      	movs	r1, #1
    7c5c:	4620      	mov	r0, r4
    7c5e:	f7ff fc2f 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7c62:	4686      	mov	lr, r0
    7c64:	2800      	cmp	r0, #0
    7c66:	d07b      	beq.n	7d60 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7c68:	2310      	movs	r3, #16
    7c6a:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7c6c:	46ec      	mov	ip, sp
    7c6e:	6800      	ldr	r0, [r0, #0]
    7c70:	f8de 1004 	ldr.w	r1, [lr, #4]
    7c74:	f8de 2008 	ldr.w	r2, [lr, #8]
    7c78:	f8de 300c 	ldr.w	r3, [lr, #12]
    7c7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7c80:	f8de 0010 	ldr.w	r0, [lr, #16]
    7c84:	f8de 1014 	ldr.w	r1, [lr, #20]
    7c88:	f8de 2018 	ldr.w	r2, [lr, #24]
    7c8c:	f8de 301c 	ldr.w	r3, [lr, #28]
    7c90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7c94:	f8be 6014 	ldrh.w	r6, [lr, #20]
    7c98:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
    7c9c:	232e      	movs	r3, #46	; 0x2e
    7c9e:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    7ca2:	466b      	mov	r3, sp
    7ca4:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
    7ca8:	2220      	movs	r2, #32
    7caa:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
    7cae:	428b      	cmp	r3, r1
    7cb0:	d1fb      	bne.n	7caa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
    7cb2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7cb4:	6a23      	ldr	r3, [r4, #32]
    7cb6:	3b02      	subs	r3, #2
    7cb8:	7982      	ldrb	r2, [r0, #6]
    7cba:	4093      	lsls	r3, r2
    7cbc:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7cbe:	2201      	movs	r2, #1
    7cc0:	4419      	add	r1, r3
    7cc2:	3028      	adds	r0, #40	; 0x28
    7cc4:	f003 fde9 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7cc8:	4684      	mov	ip, r0
    7cca:	2800      	cmp	r0, #0
    7ccc:	d04a      	beq.n	7d64 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
    7cce:	f8ad 6014 	strh.w	r6, [sp, #20]
    7cd2:	f8ad 701a 	strh.w	r7, [sp, #26]
    7cd6:	46ee      	mov	lr, sp
    7cd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7cdc:	f8cc 0000 	str.w	r0, [ip]
    7ce0:	f8cc 1004 	str.w	r1, [ip, #4]
    7ce4:	f8cc 2008 	str.w	r2, [ip, #8]
    7ce8:	f8cc 300c 	str.w	r3, [ip, #12]
    7cec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7cf0:	f8cc 0010 	str.w	r0, [ip, #16]
    7cf4:	f8cc 1014 	str.w	r1, [ip, #20]
    7cf8:	f8cc 2018 	str.w	r2, [ip, #24]
    7cfc:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
    7d00:	232e      	movs	r3, #46	; 0x2e
    7d02:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7d06:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7d08:	0c1a      	lsrs	r2, r3, #16
    7d0a:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7d0e:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7d12:	466d      	mov	r5, sp
    7d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7d16:	f8cc 0020 	str.w	r0, [ip, #32]
    7d1a:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    7d1e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    7d22:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    7d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7d28:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    7d2c:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    7d30:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    7d34:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    7d38:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7d3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7d3e:	f003 fd85 	bl	b84c <FsCache::sync()>
    7d42:	2800      	cmp	r0, #0
    7d44:	f43f af73 	beq.w	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    7d48:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7d4c:	f003 fd7e 	bl	b84c <FsCache::sync()>
    7d50:	2800      	cmp	r0, #0
    7d52:	f43f af6c 	beq.w	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
    7d56:	6820      	ldr	r0, [r4, #0]
    7d58:	6803      	ldr	r3, [r0, #0]
    7d5a:	6a1b      	ldr	r3, [r3, #32]
    7d5c:	4798      	blx	r3
    7d5e:	e766      	b.n	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
    7d60:	2000      	movs	r0, #0
    7d62:	e764      	b.n	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    7d64:	2000      	movs	r0, #0
    7d66:	e762      	b.n	7c2e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

00007d68 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d6a:	b095      	sub	sp, #84	; 0x54
    7d6c:	9201      	str	r2, [sp, #4]
    7d6e:	461e      	mov	r6, r3
    7d70:	2300      	movs	r3, #0
    7d72:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
    7d76:	f88d 3008 	strb.w	r3, [sp, #8]
    7d7a:	f88d 3009 	strb.w	r3, [sp, #9]
    7d7e:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
    7d82:	7803      	ldrb	r3, [r0, #0]
    7d84:	2b00      	cmp	r3, #0
    7d86:	d150      	bne.n	7e2a <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    7d88:	4604      	mov	r4, r0
    7d8a:	460d      	mov	r5, r1
    7d8c:	780b      	ldrb	r3, [r1, #0]
    7d8e:	f013 0f70 	tst.w	r3, #112	; 0x70
    7d92:	d04e      	beq.n	7e32 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
    7d94:	4613      	mov	r3, r2
    7d96:	7812      	ldrb	r2, [r2, #0]
    7d98:	2a2f      	cmp	r2, #47	; 0x2f
    7d9a:	d001      	beq.n	7da0 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
    7d9c:	2700      	movs	r7, #0
    7d9e:	e020      	b.n	7de2 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
    7da0:	3301      	adds	r3, #1
    7da2:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7da4:	781a      	ldrb	r2, [r3, #0]
    7da6:	2a2f      	cmp	r2, #47	; 0x2f
    7da8:	d0fa      	beq.n	7da0 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7daa:	68a9      	ldr	r1, [r5, #8]
    7dac:	a802      	add	r0, sp, #8
    7dae:	f7ff fb98 	bl	74e2 <FatFile::openRoot(FatVolume*)>
    7db2:	4602      	mov	r2, r0
    7db4:	2800      	cmp	r0, #0
    7db6:	d039      	beq.n	7e2c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
    7db8:	ad02      	add	r5, sp, #8
    7dba:	e7ef      	b.n	7d9c <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
    7dbc:	f10d 0c08 	add.w	ip, sp, #8
    7dc0:	46a6      	mov	lr, r4
    7dc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7dc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7dca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7dce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7dd2:	f8de 3000 	ldr.w	r3, [lr]
    7dd6:	f8cc 3000 	str.w	r3, [ip]
    close();
    7dda:	4620      	mov	r0, r4
    7ddc:	f7ff fe60 	bl	7aa0 <FatFile::close()>
    parent = &tmpDir;
    7de0:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7de2:	ab01      	add	r3, sp, #4
    7de4:	aa0b      	add	r2, sp, #44	; 0x2c
    7de6:	9901      	ldr	r1, [sp, #4]
    7de8:	4620      	mov	r0, r4
    7dea:	f000 fe3d 	bl	8a68 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7dee:	4602      	mov	r2, r0
    7df0:	b1e0      	cbz	r0, 7e2c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
    7df2:	9b01      	ldr	r3, [sp, #4]
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	b18b      	cbz	r3, 7e1c <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
    7df8:	463b      	mov	r3, r7
    7dfa:	aa0b      	add	r2, sp, #44	; 0x2c
    7dfc:	4629      	mov	r1, r5
    7dfe:	4620      	mov	r0, r4
    7e00:	f000 fcb2 	bl	8768 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7e04:	2800      	cmp	r0, #0
    7e06:	d1d9      	bne.n	7dbc <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
    7e08:	b1ae      	cbz	r6, 7e36 <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
    7e0a:	aa0b      	add	r2, sp, #44	; 0x2c
    7e0c:	4629      	mov	r1, r5
    7e0e:	4620      	mov	r0, r4
    7e10:	f7ff fefe 	bl	7c10 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7e14:	4602      	mov	r2, r0
    7e16:	2800      	cmp	r0, #0
    7e18:	d1d0      	bne.n	7dbc <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
    7e1a:	e007      	b.n	7e2c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
    7e1c:	aa0b      	add	r2, sp, #44	; 0x2c
    7e1e:	4629      	mov	r1, r5
    7e20:	4620      	mov	r0, r4
    7e22:	f7ff fef5 	bl	7c10 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7e26:	4602      	mov	r2, r0
    7e28:	e000      	b.n	7e2c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
    7e2a:	2200      	movs	r2, #0
}
    7e2c:	4610      	mov	r0, r2
    7e2e:	b015      	add	sp, #84	; 0x54
    7e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7e32:	2200      	movs	r2, #0
    7e34:	e7fa      	b.n	7e2c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    7e36:	4632      	mov	r2, r6
    7e38:	e7f8      	b.n	7e2c <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

00007e3a <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7e3a:	b570      	push	{r4, r5, r6, lr}
    7e3c:	b09a      	sub	sp, #104	; 0x68
    7e3e:	2300      	movs	r3, #0
    7e40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7e44:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    7e48:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    7e4c:	f88d 3000 	strb.w	r3, [sp]
    7e50:	f88d 3001 	strb.w	r3, [sp, #1]
    7e54:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
    7e58:	7803      	ldrb	r3, [r0, #0]
    7e5a:	f013 0f18 	tst.w	r3, #24
    7e5e:	f000 80e3 	beq.w	8028 <FatFile::rename(FatFile*, char const*)+0x1ee>
    7e62:	4604      	mov	r4, r0
    7e64:	460d      	mov	r5, r1
    7e66:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
    7e68:	6882      	ldr	r2, [r0, #8]
    7e6a:	688b      	ldr	r3, [r1, #8]
    7e6c:	429a      	cmp	r2, r3
    7e6e:	d002      	beq.n	7e76 <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
    7e70:	2000      	movs	r0, #0
}
    7e72:	b01a      	add	sp, #104	; 0x68
    7e74:	bd70      	pop	{r4, r5, r6, pc}
  sync();
    7e76:	f7ff fdc1 	bl	79fc <FatFile::sync()>
  oldFile = *this;
    7e7a:	46ec      	mov	ip, sp
    7e7c:	46a6      	mov	lr, r4
    7e7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7e82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7e86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7e8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7e8e:	f8de 3000 	ldr.w	r3, [lr]
    7e92:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7e96:	2100      	movs	r1, #0
    7e98:	4620      	mov	r0, r4
    7e9a:	f7ff fb11 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7e9e:	4686      	mov	lr, r0
    7ea0:	2800      	cmp	r0, #0
    7ea2:	f000 80c3 	beq.w	802c <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
    7ea6:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    7eaa:	6800      	ldr	r0, [r0, #0]
    7eac:	f8de 1004 	ldr.w	r1, [lr, #4]
    7eb0:	f8de 2008 	ldr.w	r2, [lr, #8]
    7eb4:	f8de 300c 	ldr.w	r3, [lr, #12]
    7eb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7ebc:	f8de 0010 	ldr.w	r0, [lr, #16]
    7ec0:	f8de 1014 	ldr.w	r1, [lr, #20]
    7ec4:	f8de 2018 	ldr.w	r2, [lr, #24]
    7ec8:	f8de 301c 	ldr.w	r3, [lr, #28]
    7ecc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    7ed0:	7823      	ldrb	r3, [r4, #0]
    7ed2:	f013 0f08 	tst.w	r3, #8
    7ed6:	d00a      	beq.n	7eee <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7ed8:	f640 2301 	movw	r3, #2561	; 0xa01
    7edc:	4632      	mov	r2, r6
    7ede:	4629      	mov	r1, r5
    7ee0:	a809      	add	r0, sp, #36	; 0x24
    7ee2:	f7ff fde5 	bl	7ab0 <FatFile::open(FatFile*, char const*, int)>
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d0c3      	beq.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
    7eea:	2600      	movs	r6, #0
    7eec:	e008      	b.n	7f00 <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
    7eee:	2300      	movs	r3, #0
    7ef0:	4632      	mov	r2, r6
    7ef2:	4629      	mov	r1, r5
    7ef4:	a809      	add	r0, sp, #36	; 0x24
    7ef6:	f7ff ff37 	bl	7d68 <FatFile::mkdir(FatFile*, char const*, bool)>
    7efa:	2800      	cmp	r0, #0
    7efc:	d0b9      	beq.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
    7efe:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
    7f00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7f02:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7f04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    7f08:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7f0a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    7f0e:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7f10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7f12:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7f14:	2300      	movs	r3, #0
    7f16:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
    7f1a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7f1e:	2101      	movs	r1, #1
    7f20:	4620      	mov	r0, r4
    7f22:	f7ff facd 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7f26:	4603      	mov	r3, r0
    7f28:	2800      	cmp	r0, #0
    7f2a:	f000 8081 	beq.w	8030 <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7f2e:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
    7f32:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
    7f36:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
    7f3a:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
    7f3e:	f8c3 500d 	str.w	r5, [r3, #13]
    7f42:	f8c3 0011 	str.w	r0, [r3, #17]
    7f46:	f8c3 1015 	str.w	r1, [r3, #21]
    7f4a:	f8c3 2019 	str.w	r2, [r3, #25]
    7f4e:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
    7f52:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    7f56:	f8a3 101d 	strh.w	r1, [r3, #29]
    7f5a:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
    7f5c:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
    7f60:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
    7f62:	2e00      	cmp	r6, #0
    7f64:	d03e      	beq.n	7fe4 <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7f66:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7f68:	1eb3      	subs	r3, r6, #2
    7f6a:	7982      	ldrb	r2, [r0, #6]
    7f6c:	4093      	lsls	r3, r2
    7f6e:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7f70:	2200      	movs	r2, #0
    7f72:	4419      	add	r1, r3
    7f74:	3028      	adds	r0, #40	; 0x28
    7f76:	f003 fc90 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7f7a:	4684      	mov	ip, r0
    7f7c:	2800      	cmp	r0, #0
    7f7e:	d059      	beq.n	8034 <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
    7f80:	ad12      	add	r5, sp, #72	; 0x48
    7f82:	6a00      	ldr	r0, [r0, #32]
    7f84:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
    7f88:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
    7f8c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    7f90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7f92:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
    7f96:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
    7f9a:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
    7f9e:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    7fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    7fa4:	4631      	mov	r1, r6
    7fa6:	68a0      	ldr	r0, [r4, #8]
    7fa8:	f001 fbba 	bl	9720 <FatPartition::freeChain(unsigned long)>
    7fac:	2800      	cmp	r0, #0
    7fae:	f43f af60 	beq.w	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7fb2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7fb4:	6a23      	ldr	r3, [r4, #32]
    7fb6:	3b02      	subs	r3, #2
    7fb8:	7982      	ldrb	r2, [r0, #6]
    7fba:	4093      	lsls	r3, r2
    7fbc:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    7fbe:	2201      	movs	r2, #1
    7fc0:	4419      	add	r1, r3
    7fc2:	3028      	adds	r0, #40	; 0x28
    7fc4:	f003 fc69 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7fc8:	4606      	mov	r6, r0
    7fca:	2800      	cmp	r0, #0
    7fcc:	d034      	beq.n	8038 <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
    7fce:	ad12      	add	r5, sp, #72	; 0x48
    7fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7fd2:	6230      	str	r0, [r6, #32]
    7fd4:	6271      	str	r1, [r6, #36]	; 0x24
    7fd6:	62b2      	str	r2, [r6, #40]	; 0x28
    7fd8:	62f3      	str	r3, [r6, #44]	; 0x2c
    7fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    7fdc:	6330      	str	r0, [r6, #48]	; 0x30
    7fde:	6371      	str	r1, [r6, #52]	; 0x34
    7fe0:	63b2      	str	r2, [r6, #56]	; 0x38
    7fe2:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    7fe4:	2300      	movs	r3, #0
    7fe6:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
    7fe8:	2302      	movs	r3, #2
    7fea:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
    7fee:	2308      	movs	r3, #8
    7ff0:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
    7ff4:	4668      	mov	r0, sp
    7ff6:	f000 fda5 	bl	8b44 <FatFile::remove()>
    7ffa:	2800      	cmp	r0, #0
    7ffc:	f43f af39 	beq.w	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
    8000:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8002:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8006:	f003 fc21 	bl	b84c <FsCache::sync()>
    800a:	2800      	cmp	r0, #0
    800c:	f43f af31 	beq.w	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    8010:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8014:	f003 fc1a 	bl	b84c <FsCache::sync()>
    8018:	2800      	cmp	r0, #0
    801a:	f43f af2a 	beq.w	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
    801e:	6820      	ldr	r0, [r4, #0]
    8020:	6803      	ldr	r3, [r0, #0]
    8022:	6a1b      	ldr	r3, [r3, #32]
    8024:	4798      	blx	r3
    8026:	e724      	b.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
    8028:	2000      	movs	r0, #0
    802a:	e722      	b.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    802c:	2000      	movs	r0, #0
    802e:	e720      	b.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    8030:	2000      	movs	r0, #0
    8032:	e71e      	b.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    8034:	2000      	movs	r0, #0
    8036:	e71c      	b.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>
    8038:	2000      	movs	r0, #0
    803a:	e71a      	b.n	7e72 <FatFile::rename(FatFile*, char const*)+0x38>

0000803c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8040:	b083      	sub	sp, #12
    8042:	9101      	str	r1, [sp, #4]
    8044:	461e      	mov	r6, r3
    8046:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    804a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    804e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    8052:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    8056:	7803      	ldrb	r3, [r0, #0]
    8058:	f013 0f08 	tst.w	r3, #8
    805c:	d060      	beq.n	8120 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
    805e:	4605      	mov	r5, r0
      || year > 2107
    8060:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    8064:	b294      	uxth	r4, r2
    8066:	2c7f      	cmp	r4, #127	; 0x7f
    8068:	d85e      	bhi.n	8128 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
    806a:	1e73      	subs	r3, r6, #1
    806c:	b2db      	uxtb	r3, r3
    806e:	2b0b      	cmp	r3, #11
    8070:	d85c      	bhi.n	812c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
    8072:	1e7b      	subs	r3, r7, #1
    8074:	b2db      	uxtb	r3, r3
    8076:	2b1e      	cmp	r3, #30
    8078:	d85a      	bhi.n	8130 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
    807a:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    807e:	bf98      	it	ls
    8080:	f1b9 0f17 	cmpls.w	r9, #23
    8084:	bf8c      	ite	hi
    8086:	f04f 0b01 	movhi.w	fp, #1
    808a:	f04f 0b00 	movls.w	fp, #0
    808e:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    8092:	bf88      	it	hi
    8094:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
    8098:	f1bb 0f00 	cmp.w	fp, #0
    809c:	d001      	beq.n	80a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    809e:	2000      	movs	r0, #0
    80a0:	e03f      	b.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
    80a2:	f7ff fcab 	bl	79fc <FatFile::sync()>
    80a6:	2800      	cmp	r0, #0
    80a8:	d03b      	beq.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    80aa:	2101      	movs	r1, #1
    80ac:	4628      	mov	r0, r5
    80ae:	f7ff fa07 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    80b2:	4601      	mov	r1, r0
    80b4:	2800      	cmp	r0, #0
    80b6:	d03d      	beq.n	8134 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    80b8:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
    80bc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    80c0:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    80c2:	ea4f 0258 	mov.w	r2, r8, lsr #1
    80c6:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
    80ca:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
    80ce:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
    80d0:	9801      	ldr	r0, [sp, #4]
    80d2:	f010 0f01 	tst.w	r0, #1
    80d6:	bf18      	it	ne
    80d8:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
    80da:	9801      	ldr	r0, [sp, #4]
    80dc:	f010 0f02 	tst.w	r0, #2
    80e0:	d008      	beq.n	80f4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
    80e2:	820b      	strh	r3, [r1, #16]
    80e4:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
    80e6:	f018 0801 	ands.w	r8, r8, #1
    80ea:	bf18      	it	ne
    80ec:	f04f 0864 	movne.w	r8, #100	; 0x64
    80f0:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
    80f4:	9801      	ldr	r0, [sp, #4]
    80f6:	f010 0f04 	tst.w	r0, #4
    80fa:	d001      	beq.n	8100 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
    80fc:	830b      	strh	r3, [r1, #24]
    80fe:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
    8100:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8102:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8106:	f003 fba1 	bl	b84c <FsCache::sync()>
    810a:	b150      	cbz	r0, 8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    810c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8110:	f003 fb9c 	bl	b84c <FsCache::sync()>
    8114:	b128      	cbz	r0, 8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
    8116:	6820      	ldr	r0, [r4, #0]
    8118:	6803      	ldr	r3, [r0, #0]
    811a:	6a1b      	ldr	r3, [r3, #32]
    811c:	4798      	blx	r3
    811e:	e000      	b.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
    8120:	2000      	movs	r0, #0
}
    8122:	b003      	add	sp, #12
    8124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8128:	2000      	movs	r0, #0
    812a:	e7fa      	b.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    812c:	2000      	movs	r0, #0
    812e:	e7f8      	b.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8130:	2000      	movs	r0, #0
    8132:	e7f6      	b.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8134:	4658      	mov	r0, fp
    8136:	e7f4      	b.n	8122 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

00008138 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    8138:	7883      	ldrb	r3, [r0, #2]
    813a:	f013 0f02 	tst.w	r3, #2
    813e:	d02f      	beq.n	81a0 <FatFile::truncate()+0x68>
bool FatFile::truncate() {
    8140:	b510      	push	{r4, lr}
    8142:	b082      	sub	sp, #8
    8144:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    8146:	6a01      	ldr	r1, [r0, #32]
    8148:	b361      	cbz	r1, 81a4 <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
    814a:	6903      	ldr	r3, [r0, #16]
    814c:	b93b      	cbnz	r3, 815e <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    814e:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
    8150:	2300      	movs	r3, #0
    8152:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    8154:	68a0      	ldr	r0, [r4, #8]
    8156:	f001 fae3 	bl	9720 <FatPartition::freeChain(unsigned long)>
    815a:	b968      	cbnz	r0, 8178 <FatFile::truncate()+0x40>
    815c:	e015      	b.n	818a <FatFile::truncate()+0x52>
    toFree = 0;
    815e:	2200      	movs	r2, #0
    8160:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    8162:	aa01      	add	r2, sp, #4
    8164:	4619      	mov	r1, r3
    8166:	6880      	ldr	r0, [r0, #8]
    8168:	f001 f971 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    816c:	2800      	cmp	r0, #0
    816e:	db1b      	blt.n	81a8 <FatFile::truncate()+0x70>
    if (fg) {
    8170:	b968      	cbnz	r0, 818e <FatFile::truncate()+0x56>
  if (toFree) {
    8172:	9901      	ldr	r1, [sp, #4]
    8174:	2900      	cmp	r1, #0
    8176:	d1ed      	bne.n	8154 <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    8178:	6963      	ldr	r3, [r4, #20]
    817a:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    817c:	78a3      	ldrb	r3, [r4, #2]
    817e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8182:	70a3      	strb	r3, [r4, #2]
  return sync();
    8184:	4620      	mov	r0, r4
    8186:	f7ff fc39 	bl	79fc <FatFile::sync()>

 fail:
  return false;
}
    818a:	b002      	add	sp, #8
    818c:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    818e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    8192:	6921      	ldr	r1, [r4, #16]
    8194:	68a0      	ldr	r0, [r4, #8]
    8196:	f001 f9e9 	bl	956c <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    819a:	2800      	cmp	r0, #0
    819c:	d1e9      	bne.n	8172 <FatFile::truncate()+0x3a>
    819e:	e7f4      	b.n	818a <FatFile::truncate()+0x52>
  return false;
    81a0:	2000      	movs	r0, #0
}
    81a2:	4770      	bx	lr
      return true;
    81a4:	2001      	movs	r0, #1
    81a6:	e7f0      	b.n	818a <FatFile::truncate()+0x52>
  return false;
    81a8:	2000      	movs	r0, #0
    81aa:	e7ee      	b.n	818a <FatFile::truncate()+0x52>

000081ac <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    81ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81b0:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    81b2:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    81b4:	f013 0f02 	tst.w	r3, #2
    81b8:	d017      	beq.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
    81ba:	4688      	mov	r8, r1
    81bc:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    81be:	f013 0f08 	tst.w	r3, #8
    81c2:	d10d      	bne.n	81e0 <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    81c4:	6963      	ldr	r3, [r4, #20]
    81c6:	43db      	mvns	r3, r3
    81c8:	454b      	cmp	r3, r9
    81ca:	d30e      	bcc.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    81cc:	f1b9 0f00 	cmp.w	r9, #0
    81d0:	f000 80ac 	beq.w	832c <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
    81d4:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    81d6:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    81da:	f04f 0a01 	mov.w	sl, #1
    81de:	e064      	b.n	82aa <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
    81e0:	69c1      	ldr	r1, [r0, #28]
    81e2:	f7ff fabd 	bl	7760 <FatFile::seekSet(unsigned long)>
    81e6:	2800      	cmp	r0, #0
    81e8:	d1ec      	bne.n	81c4 <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    81ea:	7863      	ldrb	r3, [r4, #1]
    81ec:	f043 0301 	orr.w	r3, r3, #1
    81f0:	7063      	strb	r3, [r4, #1]
  return 0;
    81f2:	2000      	movs	r0, #0
}
    81f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    81f8:	465a      	mov	r2, fp
    81fa:	f001 f928 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    81fe:	2800      	cmp	r0, #0
    8200:	dbf3      	blt.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
    8202:	b938      	cbnz	r0, 8214 <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
    8204:	4620      	mov	r0, r4
    8206:	f7ff f8fb 	bl	7400 <FatFile::addCluster()>
    820a:	b918      	cbnz	r0, 8214 <FatFile::write(void const*, unsigned int)+0x68>
    820c:	e7ed      	b.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
    820e:	6a23      	ldr	r3, [r4, #32]
    8210:	b1eb      	cbz	r3, 824e <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
    8212:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8214:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8216:	6921      	ldr	r1, [r4, #16]
    8218:	3902      	subs	r1, #2
    821a:	7983      	ldrb	r3, [r0, #6]
    821c:	4099      	lsls	r1, r3
    821e:	6943      	ldr	r3, [r0, #20]
    8220:	4419      	add	r1, r3
                      + sectorOfCluster;
    8222:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8224:	b916      	cbnz	r6, 822c <FatFile::write(void const*, unsigned int)+0x80>
    8226:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    822a:	d218      	bcs.n	825e <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
    822c:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    8230:	42bd      	cmp	r5, r7
    8232:	bf28      	it	cs
    8234:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
    8236:	bb16      	cbnz	r6, 827e <FatFile::write(void const*, unsigned int)+0xd2>
    8238:	6962      	ldr	r2, [r4, #20]
    823a:	69e3      	ldr	r3, [r4, #28]
    823c:	429a      	cmp	r2, r3
    823e:	d24b      	bcs.n	82d8 <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    8240:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8242:	f013 0f20 	tst.w	r3, #32
    8246:	bf0c      	ite	eq
    8248:	2201      	moveq	r2, #1
    824a:	2205      	movne	r2, #5
    824c:	e018      	b.n	8280 <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
    824e:	4620      	mov	r0, r4
    8250:	f7ff f8d6 	bl	7400 <FatFile::addCluster()>
    8254:	2800      	cmp	r0, #0
    8256:	d0c8      	beq.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
    8258:	6923      	ldr	r3, [r4, #16]
    825a:	6223      	str	r3, [r4, #32]
    825c:	e7da      	b.n	8214 <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    825e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    8262:	d241      	bcs.n	82e8 <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
    8264:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8266:	4299      	cmp	r1, r3
    8268:	d059      	beq.n	831e <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
    826a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    826c:	6803      	ldr	r3, [r0, #0]
    826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8270:	4642      	mov	r2, r8
    8272:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    8274:	2800      	cmp	r0, #0
    8276:	d0b8      	beq.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
    8278:	f44f 7500 	mov.w	r5, #512	; 0x200
    827c:	e00f      	b.n	829e <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    827e:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
    8280:	3028      	adds	r0, #40	; 0x28
    8282:	f003 fb0a 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8286:	2800      	cmp	r0, #0
    8288:	d0af      	beq.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
    828a:	462a      	mov	r2, r5
    828c:	4641      	mov	r1, r8
    828e:	4430      	add	r0, r6
    8290:	f004 feae 	bl	cff0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8294:	68a0      	ldr	r0, [r4, #8]
    8296:	442e      	add	r6, r5
    8298:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    829c:	d01e      	beq.n	82dc <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
    829e:	6963      	ldr	r3, [r4, #20]
    82a0:	442b      	add	r3, r5
    82a2:	6163      	str	r3, [r4, #20]
    src += n;
    82a4:	44a8      	add	r8, r5
  while (nToWrite) {
    82a6:	1b7f      	subs	r7, r7, r5
    82a8:	d040      	beq.n	832c <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    82aa:	68a0      	ldr	r0, [r4, #8]
    82ac:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
    82ae:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    82b0:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    82b4:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
    82b8:	d1ac      	bne.n	8214 <FatFile::write(void const*, unsigned int)+0x68>
    82ba:	2e00      	cmp	r6, #0
    82bc:	d1aa      	bne.n	8214 <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
    82be:	6921      	ldr	r1, [r4, #16]
    82c0:	2900      	cmp	r1, #0
    82c2:	d0a4      	beq.n	820e <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
    82c4:	78a2      	ldrb	r2, [r4, #2]
    82c6:	f012 0f40 	tst.w	r2, #64	; 0x40
    82ca:	d095      	beq.n	81f8 <FatFile::write(void const*, unsigned int)+0x4c>
    82cc:	69e2      	ldr	r2, [r4, #28]
    82ce:	4293      	cmp	r3, r2
    82d0:	d292      	bcs.n	81f8 <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
    82d2:	3101      	adds	r1, #1
    82d4:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
    82d6:	e79d      	b.n	8214 <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    82d8:	2205      	movs	r2, #5
    82da:	e7d1      	b.n	8280 <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
    82dc:	3028      	adds	r0, #40	; 0x28
    82de:	f003 fab5 	bl	b84c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    82e2:	2800      	cmp	r0, #0
    82e4:	d1db      	bne.n	829e <FatFile::write(void const*, unsigned int)+0xf2>
    82e6:	e780      	b.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    82e8:	7903      	ldrb	r3, [r0, #4]
    82ea:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    82ec:	0a7a      	lsrs	r2, r7, #9
    82ee:	4293      	cmp	r3, r2
    82f0:	bf28      	it	cs
    82f2:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    82f4:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    82f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    82f8:	4291      	cmp	r1, r2
    82fa:	d808      	bhi.n	830e <FatFile::write(void const*, unsigned int)+0x162>
    82fc:	18ce      	adds	r6, r1, r3
    82fe:	42b2      	cmp	r2, r6
    8300:	d205      	bcs.n	830e <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
    8302:	2200      	movs	r2, #0
    8304:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    830c:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    830e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8310:	6802      	ldr	r2, [r0, #0]
    8312:	6a96      	ldr	r6, [r2, #40]	; 0x28
    8314:	4642      	mov	r2, r8
    8316:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8318:	2800      	cmp	r0, #0
    831a:	d1c0      	bne.n	829e <FatFile::write(void const*, unsigned int)+0xf2>
    831c:	e765      	b.n	81ea <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
    831e:	2300      	movs	r3, #0
    8320:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8328:	6343      	str	r3, [r0, #52]	; 0x34
  }
    832a:	e79e      	b.n	826a <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
    832c:	6963      	ldr	r3, [r4, #20]
    832e:	69e2      	ldr	r2, [r4, #28]
    8330:	4293      	cmp	r3, r2
    8332:	d906      	bls.n	8342 <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
    8334:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8336:	78a3      	ldrb	r3, [r4, #2]
    8338:	f063 037f 	orn	r3, r3, #127	; 0x7f
    833c:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    833e:	4648      	mov	r0, r9
    8340:	e758      	b.n	81f4 <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
    8342:	4b05      	ldr	r3, [pc, #20]	; (8358 <FatFile::write(void const*, unsigned int)+0x1ac>)
    8344:	681b      	ldr	r3, [r3, #0]
    8346:	b12b      	cbz	r3, 8354 <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8348:	78a3      	ldrb	r3, [r4, #2]
    834a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    834e:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    8350:	4648      	mov	r0, r9
    8352:	e74f      	b.n	81f4 <FatFile::write(void const*, unsigned int)+0x48>
    8354:	4648      	mov	r0, r9
    8356:	e74d      	b.n	81f4 <FatFile::write(void const*, unsigned int)+0x48>
    8358:	20004b68 	.word	0x20004b68

0000835c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8360:	b08d      	sub	sp, #52	; 0x34
    8362:	4680      	mov	r8, r0
    8364:	9100      	str	r1, [sp, #0]
    8366:	4614      	mov	r4, r2
    8368:	461f      	mov	r7, r3
  FatFile dir = *this;
    836a:	ad03      	add	r5, sp, #12
    836c:	4606      	mov	r6, r0
    836e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8372:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8376:	6833      	ldr	r3, [r6, #0]
    8378:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    837a:	6823      	ldr	r3, [r4, #0]
    837c:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    837e:	2300      	movs	r3, #0
    8380:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8382:	9701      	str	r7, [sp, #4]
    8384:	2f00      	cmp	r7, #0
    8386:	d040      	beq.n	840a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
    8388:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    838c:	9b00      	ldr	r3, [sp, #0]
    838e:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8392:	b289      	uxth	r1, r1
    8394:	0149      	lsls	r1, r1, #5
    8396:	a803      	add	r0, sp, #12
    8398:	f7ff f9e2 	bl	7760 <FatFile::seekSet(unsigned long)>
    839c:	4682      	mov	sl, r0
    839e:	b340      	cbz	r0, 83f2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
    83a0:	2100      	movs	r1, #0
    83a2:	a803      	add	r0, sp, #12
    83a4:	f7ff f9ba 	bl	771c <FatFile::readDirCache(bool)>
    if (!ldir) {
    83a8:	4681      	mov	r9, r0
    83aa:	b388      	cbz	r0, 8410 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
    83ac:	2600      	movs	r6, #0
    83ae:	e00f      	b.n	83d0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    83b0:	4620      	mov	r0, r4
    83b2:	f003 fab1 	bl	b918 <FsName::get16()>
    83b6:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    83b8:	4628      	mov	r0, r5
    83ba:	f003 fbcb 	bl	bb54 <toUpcase(unsigned short)>
    83be:	4605      	mov	r5, r0
    83c0:	4638      	mov	r0, r7
    83c2:	f003 fbc7 	bl	bb54 <toUpcase(unsigned short)>
    83c6:	4285      	cmp	r5, r0
    83c8:	d125      	bne.n	8416 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
    83ca:	3601      	adds	r6, #1
    83cc:	2e0d      	cmp	r6, #13
    83ce:	d014      	beq.n	83fa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
    83d0:	b2f2      	uxtb	r2, r6
    83d2:	4649      	mov	r1, r9
    83d4:	4640      	mov	r0, r8
    83d6:	f000 ff19 	bl	920c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    83da:	4605      	mov	r5, r0
    return !ls && next == end;
    83dc:	89a3      	ldrh	r3, [r4, #12]
    83de:	2b00      	cmp	r3, #0
    83e0:	d1e6      	bne.n	83b0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
    83e2:	6862      	ldr	r2, [r4, #4]
    83e4:	68a3      	ldr	r3, [r4, #8]
    83e6:	429a      	cmp	r2, r3
    83e8:	d1e2      	bne.n	83b0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
    83ea:	fab0 fa80 	clz	sl, r0
    83ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
    83f2:	4650      	mov	r0, sl
    83f4:	b00d      	add	sp, #52	; 0x34
    83f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    83fa:	f10b 0b01 	add.w	fp, fp, #1
    83fe:	fa5f fb8b 	uxtb.w	fp, fp
    8402:	9b01      	ldr	r3, [sp, #4]
    8404:	455b      	cmp	r3, fp
    8406:	d2c1      	bcs.n	838c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
    8408:	e7f3      	b.n	83f2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
    840a:	f04f 0a01 	mov.w	sl, #1
    840e:	e7f0      	b.n	83f2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
    8410:	f04f 0a00 	mov.w	sl, #0
    8414:	e7ed      	b.n	83f2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
    8416:	f04f 0a00 	mov.w	sl, #0
    841a:	e7ea      	b.n	83f2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

0000841c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8420:	b08f      	sub	sp, #60	; 0x3c
    8422:	9102      	str	r1, [sp, #8]
    8424:	4617      	mov	r7, r2
    8426:	461e      	mov	r6, r3
  FatFile dir = *this;
    8428:	ad05      	add	r5, sp, #20
    842a:	4604      	mov	r4, r0
    842c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    842e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8434:	6823      	ldr	r3, [r4, #0]
    8436:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
    8438:	f107 0215 	add.w	r2, r7, #21
    843c:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
    8440:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8444:	ea4f 13ca 	mov.w	r3, sl, lsl #7
    8448:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
    844c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    8450:	fa50 f383 	uxtab	r3, r0, r3
    8454:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
    8458:	428a      	cmp	r2, r1
    845a:	d1f3      	bne.n	8444 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
    845c:	683b      	ldr	r3, [r7, #0]
    845e:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    8460:	2300      	movs	r3, #0
    8462:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8464:	2e00      	cmp	r6, #0
    8466:	d064      	beq.n	8532 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
    8468:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
    846c:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    846e:	f8cd a00c 	str.w	sl, [sp, #12]
    8472:	46b2      	mov	sl, r6
    8474:	e032      	b.n	84dc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    8476:	4638      	mov	r0, r7
    8478:	f003 fa4e 	bl	b918 <FsName::get16()>
  if (i < 5) {
    847c:	f1b8 0f04 	cmp.w	r8, #4
    8480:	d818      	bhi.n	84b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
    8482:	b2f3      	uxtb	r3, r6
    8484:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8488:	f8a3 0001 	strh.w	r0, [r3, #1]
    848c:	3601      	adds	r6, #1
    848e:	3501      	adds	r5, #1
    8490:	b2ed      	uxtb	r5, r5
    8492:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
    8496:	89bb      	ldrh	r3, [r7, #12]
    8498:	2b00      	cmp	r3, #0
    849a:	d1ec      	bne.n	8476 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
    849c:	687a      	ldr	r2, [r7, #4]
    849e:	68bb      	ldr	r3, [r7, #8]
    84a0:	429a      	cmp	r2, r3
    84a2:	d1e8      	bne.n	8476 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
    84a4:	1c63      	adds	r3, r4, #1
    84a6:	1e20      	subs	r0, r4, #0
    84a8:	bf18      	it	ne
    84aa:	2001      	movne	r0, #1
    84ac:	4240      	negs	r0, r0
    84ae:	b280      	uxth	r0, r0
    84b0:	b2dc      	uxtb	r4, r3
    84b2:	e7e3      	b.n	847c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
    84b4:	f1b8 0f0a 	cmp.w	r8, #10
    84b8:	d804      	bhi.n	84c4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
    84ba:	b2f3      	uxtb	r3, r6
    84bc:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    84c0:	8098      	strh	r0, [r3, #4]
}
    84c2:	e7e3      	b.n	848c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
    84c4:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
    84c6:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    84ca:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
    84cc:	2d0c      	cmp	r5, #12
    84ce:	d9dd      	bls.n	848c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    84d0:	f10b 0b01 	add.w	fp, fp, #1
    84d4:	fa5f fb8b 	uxtb.w	fp, fp
    84d8:	45da      	cmp	sl, fp
    84da:	d32c      	bcc.n	8536 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    84dc:	9b02      	ldr	r3, [sp, #8]
    84de:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    84e2:	b289      	uxth	r1, r1
    84e4:	0149      	lsls	r1, r1, #5
    84e6:	a805      	add	r0, sp, #20
    84e8:	f7ff f93a 	bl	7760 <FatFile::seekSet(unsigned long)>
    84ec:	9001      	str	r0, [sp, #4]
    84ee:	b310      	cbz	r0, 8536 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    84f0:	2100      	movs	r1, #0
    84f2:	a805      	add	r0, sp, #20
    84f4:	f7ff f912 	bl	771c <FatFile::readDirCache(bool)>
    if (!ldir) {
    84f8:	4681      	mov	r9, r0
    84fa:	b300      	cbz	r0, 853e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
    84fc:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
    84fe:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8502:	f043 0301 	orr.w	r3, r3, #1
    8506:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    850a:	45da      	cmp	sl, fp
    850c:	bf0c      	ite	eq
    850e:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
    8512:	465b      	movne	r3, fp
    8514:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8516:	f04f 030f 	mov.w	r3, #15
    851a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    851c:	f04f 0300 	mov.w	r3, #0
    8520:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
    8522:	9b03      	ldr	r3, [sp, #12]
    8524:	7343      	strb	r3, [r0, #13]
    8526:	f04f 0300 	mov.w	r3, #0
    852a:	8343      	strh	r3, [r0, #26]
    852c:	2501      	movs	r5, #1
    852e:	2600      	movs	r6, #0
    8530:	e7af      	b.n	8492 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8532:	2301      	movs	r3, #1
    8534:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
    8536:	9801      	ldr	r0, [sp, #4]
    8538:	b00f      	add	sp, #60	; 0x3c
    853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    853e:	2300      	movs	r3, #0
    8540:	9301      	str	r3, [sp, #4]
    8542:	e7f8      	b.n	8536 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

00008544 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    8544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8548:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    854a:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
    854c:	4602      	mov	r2, r0
    854e:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    8552:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
    8554:	2120      	movs	r1, #32
    8556:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
    855a:	4282      	cmp	r2, r0
    855c:	d1fb      	bne.n	8556 <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    855e:	781a      	ldrb	r2, [r3, #0]
    8560:	2a2e      	cmp	r2, #46	; 0x2e
    8562:	bf14      	ite	ne
    8564:	2501      	movne	r5, #1
    8566:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8568:	d103      	bne.n	8572 <FatFile::makeSFN(FatLfn_t*)+0x2e>
    856a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    856e:	2a2e      	cmp	r2, #46	; 0x2e
    8570:	d0fb      	beq.n	856a <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8572:	1e62      	subs	r2, r4, #1
    8574:	429a      	cmp	r2, r3
    8576:	d909      	bls.n	858c <FatFile::makeSFN(FatLfn_t*)+0x48>
    8578:	4611      	mov	r1, r2
    857a:	461e      	mov	r6, r3
    857c:	460a      	mov	r2, r1
    857e:	3901      	subs	r1, #1
    8580:	7810      	ldrb	r0, [r2, #0]
    8582:	282e      	cmp	r0, #46	; 0x2e
    8584:	d002      	beq.n	858c <FatFile::makeSFN(FatLfn_t*)+0x48>
    8586:	460a      	mov	r2, r1
    8588:	42b1      	cmp	r1, r6
    858a:	d1f7      	bne.n	857c <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
    858c:	429c      	cmp	r4, r3
    858e:	d908      	bls.n	85a2 <FatFile::makeSFN(FatLfn_t*)+0x5e>
    8590:	2600      	movs	r6, #0
    8592:	2707      	movs	r7, #7
    8594:	46b4      	mov	ip, r6
    8596:	46b3      	mov	fp, r6
    8598:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    859c:	f04f 0a0a 	mov.w	sl, #10
    85a0:	e061      	b.n	8666 <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
    85a2:	2600      	movs	r6, #0
    85a4:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    85a6:	f89e 3016 	ldrb.w	r3, [lr, #22]
    85aa:	2b20      	cmp	r3, #32
    85ac:	f000 8084 	beq.w	86b8 <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    85b0:	2d00      	cmp	r5, #0
    85b2:	d03b      	beq.n	862c <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    85b4:	ea1b 0f06 	tst.w	fp, r6
    85b8:	bf18      	it	ne
    85ba:	2602      	movne	r6, #2
    85bc:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    85c0:	4628      	mov	r0, r5

 fail:
  return false;
}
    85c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    85c6:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
    85ca:	fa5f f888 	uxtb.w	r8, r8
    85ce:	f1b8 0f05 	cmp.w	r8, #5
    85d2:	d964      	bls.n	869e <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
    85d4:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
    85d8:	fa5f f888 	uxtb.w	r8, r8
    85dc:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    85e0:	d85d      	bhi.n	869e <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
    85e2:	45bc      	cmp	ip, r7
    85e4:	d815      	bhi.n	8612 <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
    85e6:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
    85ea:	b2c0      	uxtb	r0, r0
    85ec:	2819      	cmp	r0, #25
    85ee:	d82a      	bhi.n	8646 <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
    85f0:	3920      	subs	r1, #32
    85f2:	b2c9      	uxtb	r1, r1
        lc |= bit;
    85f4:	ea49 0606 	orr.w	r6, r9, r6
    85f8:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
    85fa:	f10c 0001 	add.w	r0, ip, #1
    85fe:	b2c0      	uxtb	r0, r0
    8600:	44f4      	add	ip, lr
    8602:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
    8606:	2806      	cmp	r0, #6
    8608:	d854      	bhi.n	86b4 <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
    860a:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
    860e:	4684      	mov	ip, r0
    8610:	e026      	b.n	8660 <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
    8612:	429a      	cmp	r2, r3
    8614:	bf2c      	ite	cs
    8616:	2500      	movcs	r5, #0
    8618:	2501      	movcc	r5, #1
    861a:	2f0a      	cmp	r7, #10
    861c:	bf08      	it	eq
    861e:	f045 0501 	orreq.w	r5, r5, #1
    8622:	b175      	cbz	r5, 8642 <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
    8624:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8628:	2b20      	cmp	r3, #32
    862a:	d0ca      	beq.n	85c2 <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    862c:	2001      	movs	r0, #1
    862e:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8632:	f89e 3014 	ldrb.w	r3, [lr, #20]
    8636:	4473      	add	r3, lr
    8638:	227e      	movs	r2, #126	; 0x7e
    863a:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    863c:	2231      	movs	r2, #49	; 0x31
    863e:	75da      	strb	r2, [r3, #23]
    8640:	e7bf      	b.n	85c2 <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
    8642:	1e53      	subs	r3, r2, #1
        continue;
    8644:	e00c      	b.n	8660 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
    8646:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
    864a:	b2c0      	uxtb	r0, r0
    864c:	2819      	cmp	r0, #25
        uc |= bit;
    864e:	bf98      	it	ls
    8650:	ea49 0b0b 	orrls.w	fp, r9, fp
    8654:	e7d1      	b.n	85fa <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
    8656:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
    8658:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    865c:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8660:	3301      	adds	r3, #1
    8662:	429c      	cmp	r4, r3
    8664:	d99f      	bls.n	85a6 <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
    8666:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
    8668:	292e      	cmp	r1, #46	; 0x2e
    866a:	bf08      	it	eq
    866c:	429a      	cmpeq	r2, r3
    866e:	bf0c      	ite	eq
    8670:	2001      	moveq	r0, #1
    8672:	2000      	movne	r0, #0
    8674:	d0ef      	beq.n	8656 <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8676:	2922      	cmp	r1, #34	; 0x22
    8678:	d011      	beq.n	869e <FatFile::makeSFN(FatLfn_t*)+0x15a>
    867a:	297c      	cmp	r1, #124	; 0x7c
    867c:	d00f      	beq.n	869e <FatFile::makeSFN(FatLfn_t*)+0x15a>
    867e:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
    8682:	fa5f f888 	uxtb.w	r8, r8
    8686:	f1b8 0f02 	cmp.w	r8, #2
    868a:	d908      	bls.n	869e <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    868c:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
    8690:	fa5f f888 	uxtb.w	r8, r8
    8694:	f1b8 0f05 	cmp.w	r8, #5
    8698:	d895      	bhi.n	85c6 <FatFile::makeSFN(FatLfn_t*)+0x82>
    869a:	292d      	cmp	r1, #45	; 0x2d
    869c:	d093      	beq.n	85c6 <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
    869e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    86a2:	2980      	cmp	r1, #128	; 0x80
    86a4:	d004      	beq.n	86b0 <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
    86a6:	45bc      	cmp	ip, r7
    86a8:	d8b3      	bhi.n	8612 <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
    86aa:	4605      	mov	r5, r0
        c = '_';
    86ac:	215f      	movs	r1, #95	; 0x5f
    86ae:	e7a4      	b.n	85fa <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
    86b0:	4605      	mov	r5, r0
    86b2:	e7d5      	b.n	8660 <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
    86b4:	4684      	mov	ip, r0
    86b6:	e7d3      	b.n	8660 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
    86b8:	2000      	movs	r0, #0
    86ba:	e782      	b.n	85c2 <FatFile::makeSFN(FatLfn_t*)+0x7e>

000086bc <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    86bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86c0:	b083      	sub	sp, #12
    86c2:	4604      	mov	r4, r0
    86c4:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    86c6:	f891 8014 	ldrb.w	r8, [r1, #20]
    86ca:	2362      	movs	r3, #98	; 0x62
    86cc:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
    86ce:	2500      	movs	r5, #0
	return systick_millis_count;
    86d0:	f8df b090 	ldr.w	fp, [pc, #144]	; 8764 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    86d4:	f101 0a16 	add.w	sl, r1, #22
    86d8:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
    86dc:	442b      	add	r3, r5
    86de:	b29d      	uxth	r5, r3
    if (pos > 3) {
    86e0:	f1b8 0f03 	cmp.w	r8, #3
    86e4:	bf28      	it	cs
    86e6:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    86ea:	f108 0304 	add.w	r3, r8, #4
    86ee:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    86f0:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    86f4:	2a09      	cmp	r2, #9
    86f6:	bf94      	ite	ls
    86f8:	3230      	addls	r2, #48	; 0x30
    86fa:	3237      	addhi	r2, #55	; 0x37
    86fc:	18f9      	adds	r1, r7, r3
    86fe:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
    8700:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8702:	3b01      	subs	r3, #1
    8704:	b2db      	uxtb	r3, r3
    8706:	4598      	cmp	r8, r3
    8708:	d1f2      	bne.n	86f0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    870a:	eb07 0308 	add.w	r3, r7, r8
    870e:	227e      	movs	r2, #126	; 0x7e
    8710:	759a      	strb	r2, [r3, #22]
    seekSet(0);
    8712:	2100      	movs	r1, #0
    8714:	4620      	mov	r0, r4
    8716:	f7ff f823 	bl	7760 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    871a:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    871c:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
    8720:	4631      	mov	r1, r6
    8722:	4620      	mov	r0, r4
    8724:	f7fe fffa 	bl	771c <FatFile::readDirCache(bool)>
      if (!dir) {
    8728:	4601      	mov	r1, r0
    872a:	b190      	cbz	r0, 8752 <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
    872c:	7803      	ldrb	r3, [r0, #0]
    872e:	b1bb      	cbz	r3, 8760 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8730:	7ac3      	ldrb	r3, [r0, #11]
    8732:	f013 0f08 	tst.w	r3, #8
    8736:	d1f3      	bne.n	8720 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8738:	464a      	mov	r2, r9
    873a:	4650      	mov	r0, sl
    873c:	f008 fc56 	bl	10fec <memcmp>
    8740:	2800      	cmp	r0, #0
    8742:	d1ed      	bne.n	8720 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8744:	9b01      	ldr	r3, [sp, #4]
    8746:	3b01      	subs	r3, #1
    8748:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    874c:	9301      	str	r3, [sp, #4]
    874e:	d1c3      	bne.n	86d8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
    8750:	e003      	b.n	875a <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
    8752:	7860      	ldrb	r0, [r4, #1]
    8754:	fab0 f080 	clz	r0, r0
    8758:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    875a:	b003      	add	sp, #12
    875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8760:	2001      	movs	r0, #1
    8762:	e7fa      	b.n	875a <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
    8764:	200052f0 	.word	0x200052f0

00008768 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    876c:	b08f      	sub	sp, #60	; 0x3c
    876e:	900a      	str	r0, [sp, #40]	; 0x28
    8770:	460e      	mov	r6, r1
    8772:	9204      	str	r2, [sp, #16]
    8774:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    8776:	780b      	ldrb	r3, [r1, #0]
    8778:	f013 0f70 	tst.w	r3, #112	; 0x70
    877c:	f000 8158 	beq.w	8a30 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
    8780:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
    8782:	f890 8000 	ldrb.w	r8, [r0]
    8786:	f1b8 0f00 	cmp.w	r8, #0
    878a:	f040 8157 	bne.w	8a3c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    878e:	6913      	ldr	r3, [r2, #16]
    8790:	330c      	adds	r3, #12
    8792:	4ab0      	ldr	r2, [pc, #704]	; (8a54 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
    8794:	fba2 2303 	umull	r2, r3, r2, r3
    8798:	f3c3 0287 	ubfx	r2, r3, #2, #8
    879c:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    879e:	7d4b      	ldrb	r3, [r1, #21]
    87a0:	f013 0f03 	tst.w	r3, #3
    87a4:	d017      	beq.n	87d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
    87a6:	1c57      	adds	r7, r2, #1
    87a8:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
    87aa:	68b3      	ldr	r3, [r6, #8]
    87ac:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
    87ae:	2100      	movs	r1, #0
    87b0:	4630      	mov	r0, r6
    87b2:	f7fe ffd5 	bl	7760 <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
    87b6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
    87ba:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
    87be:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
    87c0:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
    87c4:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
    87c8:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    87cc:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    87ce:	9b04      	ldr	r3, [sp, #16]
    87d0:	3316      	adds	r3, #22
    87d2:	9305      	str	r3, [sp, #20]
  }
    87d4:	e087      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    87d6:	2701      	movs	r7, #1
    87d8:	e7e7      	b.n	87aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
    87da:	f8cd 8008 	str.w	r8, [sp, #8]
    87de:	e082      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
    87e0:	f8cd 8008 	str.w	r8, [sp, #8]
    87e4:	e07f      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    87e6:	f8cd 8008 	str.w	r8, [sp, #8]
    87ea:	e07c      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
    87ec:	7873      	ldrb	r3, [r6, #1]
    87ee:	2b00      	cmp	r3, #0
    87f0:	f040 8127 	bne.w	8a42 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    87f4:	9b06      	ldr	r3, [sp, #24]
    87f6:	f413 7f00 	tst.w	r3, #512	; 0x200
    87fa:	f000 8125 	beq.w	8a48 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    87fe:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8802:	3b01      	subs	r3, #1
    8804:	2b01      	cmp	r3, #1
    8806:	f200 8122 	bhi.w	8a4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    880a:	2c00      	cmp	r4, #0
    880c:	bf08      	it	eq
    880e:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    8810:	42bc      	cmp	r4, r7
    8812:	d20b      	bcs.n	882c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
    8814:	2500      	movs	r5, #0
    8816:	4629      	mov	r1, r5
    8818:	4630      	mov	r0, r6
    881a:	f7fe ff7f 	bl	771c <FatFile::readDirCache(bool)>
    if (!dir) {
    881e:	2800      	cmp	r0, #0
    8820:	f000 80ee 	beq.w	8a00 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    8824:	3401      	adds	r4, #1
    8826:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8828:	42a7      	cmp	r7, r4
    882a:	d1f4      	bne.n	8816 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    882c:	9b08      	ldr	r3, [sp, #32]
    882e:	b13b      	cbz	r3, 8840 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
    8830:	9904      	ldr	r1, [sp, #16]
    8832:	4630      	mov	r0, r6
    8834:	f7ff ff42 	bl	86bc <FatFile::makeUniqueSfn(FatLfn_t*)>
    8838:	4681      	mov	r9, r0
    883a:	2800      	cmp	r0, #0
    883c:	f000 80fa 	beq.w	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    8840:	3f01      	subs	r7, #1
    8842:	b2fb      	uxtb	r3, r7
    8844:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
    8846:	449a      	add	sl, r3
    8848:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    884c:	9f04      	ldr	r7, [sp, #16]
    884e:	463a      	mov	r2, r7
    8850:	4629      	mov	r1, r5
    8852:	4630      	mov	r0, r6
    8854:	f7ff fde2 	bl	841c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8858:	4681      	mov	r9, r0
    885a:	2800      	cmp	r0, #0
    885c:	f000 80ea 	beq.w	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8860:	0169      	lsls	r1, r5, #5
    8862:	4630      	mov	r0, r6
    8864:	f7fe ff7c 	bl	7760 <FatFile::seekSet(unsigned long)>
    8868:	4681      	mov	r9, r0
    886a:	2800      	cmp	r0, #0
    886c:	f000 80e2 	beq.w	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8870:	2100      	movs	r1, #0
    8872:	4630      	mov	r0, r6
    8874:	f7fe ff52 	bl	771c <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    8878:	4604      	mov	r4, r0
    887a:	2800      	cmp	r0, #0
    887c:	f000 80f1 	beq.w	8a62 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    8880:	2220      	movs	r2, #32
    8882:	2100      	movs	r1, #0
    8884:	f008 fc7e 	bl	11184 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8888:	f8d7 2016 	ldr.w	r2, [r7, #22]
    888c:	f8d7 301a 	ldr.w	r3, [r7, #26]
    8890:	6022      	str	r2, [r4, #0]
    8892:	6063      	str	r3, [r4, #4]
    8894:	8bfa      	ldrh	r2, [r7, #30]
    8896:	f897 3020 	ldrb.w	r3, [r7, #32]
    889a:	8122      	strh	r2, [r4, #8]
    889c:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    889e:	7d7b      	ldrb	r3, [r7, #21]
    88a0:	f003 0318 	and.w	r3, r3, #24
    88a4:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    88a6:	4b6c      	ldr	r3, [pc, #432]	; (8a58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
    88a8:	681b      	ldr	r3, [r3, #0]
    88aa:	2b00      	cmp	r3, #0
    88ac:	f000 80ba 	beq.w	8a24 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    88b0:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    88b4:	f10d 0132 	add.w	r1, sp, #50	; 0x32
    88b8:	a80d      	add	r0, sp, #52	; 0x34
    88ba:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    88bc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    88c0:	8223      	strh	r3, [r4, #16]
    88c2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    88c6:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    88c8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    88cc:	7363      	strb	r3, [r4, #13]
    88ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    88d0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    88d4:	f043 0301 	orr.w	r3, r3, #1
    88d8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
    88dc:	e086      	b.n	89ec <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
    88de:	2b00      	cmp	r3, #0
    88e0:	d088      	beq.n	87f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
    88e2:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    88e6:	6975      	ldr	r5, [r6, #20]
    88e8:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    88ec:	4659      	mov	r1, fp
    88ee:	4630      	mov	r0, r6
    88f0:	f7fe ff14 	bl	771c <FatFile::readDirCache(bool)>
    if (!dir) {
    88f4:	2800      	cmp	r0, #0
    88f6:	f43f af79 	beq.w	87ec <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    88fa:	7803      	ldrb	r3, [r0, #0]
    88fc:	2b00      	cmp	r3, #0
    88fe:	bf18      	it	ne
    8900:	2be5      	cmpne	r3, #229	; 0xe5
    8902:	bf0c      	ite	eq
    8904:	f04f 0901 	moveq.w	r9, #1
    8908:	f04f 0900 	movne.w	r9, #0
    890c:	d107      	bne.n	891e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    890e:	2c00      	cmp	r4, #0
    8910:	bf08      	it	eq
    8912:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8914:	42bc      	cmp	r4, r7
    8916:	d2e2      	bcs.n	88de <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
    8918:	3401      	adds	r4, #1
    891a:	b2e4      	uxtb	r4, r4
    891c:	e7df      	b.n	88de <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
    891e:	42bc      	cmp	r4, r7
    8920:	bf38      	it	cc
    8922:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8924:	2b2e      	cmp	r3, #46	; 0x2e
    8926:	f43f af58 	beq.w	87da <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    892a:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
    892c:	2a0f      	cmp	r2, #15
    892e:	d014      	beq.n	895a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
    8930:	f012 0208 	ands.w	r2, r2, #8
    8934:	f47f af57 	bne.w	87e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
    8938:	9b02      	ldr	r3, [sp, #8]
    893a:	2b00      	cmp	r3, #0
    893c:	d13b      	bne.n	89b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    893e:	220b      	movs	r2, #11
    8940:	9905      	ldr	r1, [sp, #20]
    8942:	f008 fb53 	bl	10fec <memcmp>
    8946:	2800      	cmp	r0, #0
    8948:	d1cd      	bne.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    894a:	9b04      	ldr	r3, [sp, #16]
    894c:	7d5b      	ldrb	r3, [r3, #21]
    894e:	f013 0301 	ands.w	r3, r3, #1
    8952:	d046      	beq.n	89e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
    8954:	2301      	movs	r3, #1
    8956:	9308      	str	r3, [sp, #32]
    8958:	e7c5      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
    895a:	9a02      	ldr	r2, [sp, #8]
    895c:	b9ea      	cbnz	r2, 899a <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
    895e:	f003 021f 	and.w	r2, r3, #31
    8962:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
    8964:	9907      	ldr	r1, [sp, #28]
    8966:	4291      	cmp	r1, r2
    8968:	d1bd      	bne.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
    896a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    896e:	9302      	str	r3, [sp, #8]
    8970:	d0b9      	beq.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
    8972:	7b43      	ldrb	r3, [r0, #13]
    8974:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
    8976:	9202      	str	r2, [sp, #8]
      if (order == 1) {
    8978:	9b03      	ldr	r3, [sp, #12]
    897a:	2b01      	cmp	r3, #1
    897c:	d1b3      	bne.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    897e:	1c69      	adds	r1, r5, #1
    8980:	9d02      	ldr	r5, [sp, #8]
    8982:	462b      	mov	r3, r5
    8984:	9a04      	ldr	r2, [sp, #16]
    8986:	b289      	uxth	r1, r1
    8988:	4630      	mov	r0, r6
    898a:	f7ff fce7 	bl	835c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    898e:	462b      	mov	r3, r5
    8990:	2800      	cmp	r0, #0
    8992:	bf08      	it	eq
    8994:	4643      	moveq	r3, r8
    8996:	9302      	str	r3, [sp, #8]
    8998:	e7a5      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    899a:	9a03      	ldr	r2, [sp, #12]
    899c:	3a01      	subs	r2, #1
    899e:	b2d2      	uxtb	r2, r2
    89a0:	9203      	str	r2, [sp, #12]
    89a2:	4293      	cmp	r3, r2
    89a4:	f47f af1c 	bne.w	87e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
    89a8:	7b43      	ldrb	r3, [r0, #13]
    89aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    89ac:	4293      	cmp	r3, r2
    89ae:	d0e3      	beq.n	8978 <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
    89b0:	f8cd 8008 	str.w	r8, [sp, #8]
    89b4:	e797      	b.n	88e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    89b6:	9b03      	ldr	r3, [sp, #12]
    89b8:	2b01      	cmp	r3, #1
    89ba:	d13b      	bne.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
    89bc:	1e41      	subs	r1, r0, #1
    89be:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    89c2:	01d3      	lsls	r3, r2, #7
    89c4:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    89c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    89cc:	fa52 f383 	uxtab	r3, r2, r3
    89d0:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    89d2:	4561      	cmp	r1, ip
    89d4:	d1f5      	bne.n	89c2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
    89d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    89d8:	4293      	cmp	r3, r2
    89da:	d12b      	bne.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    89dc:	9b02      	ldr	r3, [sp, #8]
    89de:	4698      	mov	r8, r3
    89e0:	e000      	b.n	89e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
    89e2:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
    89e4:	9b06      	ldr	r3, [sp, #24]
    89e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    89ea:	d123      	bne.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    89ec:	f8cd 8000 	str.w	r8, [sp]
    89f0:	9b06      	ldr	r3, [sp, #24]
    89f2:	462a      	mov	r2, r5
    89f4:	4631      	mov	r1, r6
    89f6:	980a      	ldr	r0, [sp, #40]	; 0x28
    89f8:	f7fe ff31 	bl	785e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    89fc:	4681      	mov	r9, r0
    89fe:	e019      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
    8a00:	7873      	ldrb	r3, [r6, #1]
    8a02:	bb5b      	cbnz	r3, 8a5c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
    8a04:	42a7      	cmp	r7, r4
    8a06:	f67f af11 	bls.w	882c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    8a0a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
    8a0c:	4630      	mov	r0, r6
    8a0e:	f7fe fd15 	bl	743c <FatFile::addDirCluster()>
    8a12:	4681      	mov	r9, r0
    8a14:	b170      	cbz	r0, 8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8a16:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8a18:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    8a1c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8a1e:	42a7      	cmp	r7, r4
    8a20:	d8f4      	bhi.n	8a0c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
    8a22:	e703      	b.n	882c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8a24:	f245 6321 	movw	r3, #22049	; 0x5621
    8a28:	8223      	strh	r3, [r4, #16]
    8a2a:	8323      	strh	r3, [r4, #24]
    8a2c:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    8a2e:	e74e      	b.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
    8a30:	f04f 0900 	mov.w	r9, #0
}
    8a34:	4648      	mov	r0, r9
    8a36:	b00f      	add	sp, #60	; 0x3c
    8a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8a3c:	f04f 0900 	mov.w	r9, #0
    8a40:	e7f8      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8a42:	f04f 0900 	mov.w	r9, #0
    8a46:	e7f5      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8a48:	f04f 0900 	mov.w	r9, #0
    8a4c:	e7f2      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8a4e:	f04f 0900 	mov.w	r9, #0
    8a52:	e7ef      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8a54:	4ec4ec4f 	.word	0x4ec4ec4f
    8a58:	20004b68 	.word	0x20004b68
    8a5c:	f04f 0900 	mov.w	r9, #0
    8a60:	e7e8      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8a62:	f04f 0900 	mov.w	r9, #0
    8a66:	e7e5      	b.n	8a34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

00008a68 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a6a:	b083      	sub	sp, #12
    8a6c:	4608      	mov	r0, r1
    8a6e:	4615      	mov	r5, r2
    8a70:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8a72:	780b      	ldrb	r3, [r1, #0]
    8a74:	2b20      	cmp	r3, #32
    8a76:	d103      	bne.n	8a80 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    8a78:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8a7c:	2b20      	cmp	r3, #32
    8a7e:	d0fb      	beq.n	8a78 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
    8a80:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8a82:	7803      	ldrb	r3, [r0, #0]
    8a84:	b1d3      	cbz	r3, 8abc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8a86:	2b2f      	cmp	r3, #47	; 0x2f
    8a88:	d018      	beq.n	8abc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
    8a8a:	2400      	movs	r4, #0
    8a8c:	4e2c      	ldr	r6, [pc, #176]	; (8b40 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
    8a8e:	e033      	b.n	8af8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8a90:	f1bc 0f1f 	cmp.w	ip, #31
    8a94:	d90f      	bls.n	8ab6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8a96:	e04d      	b.n	8b34 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8a98:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
    8a9c:	d00b      	beq.n	8ab6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8a9e:	d903      	bls.n	8aa8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
    8aa0:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
    8aa4:	d007      	beq.n	8ab6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8aa6:	e020      	b.n	8aea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8aa8:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
    8aac:	fa5f fc8c 	uxtb.w	ip, ip
    8ab0:	f1bc 0f01 	cmp.w	ip, #1
    8ab4:	d819      	bhi.n	8aea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    8ab6:	2000      	movs	r0, #0
}
    8ab8:	b003      	add	sp, #12
    8aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8abc:	692b      	ldr	r3, [r5, #16]
    8abe:	3b01      	subs	r3, #1
    8ac0:	2bfe      	cmp	r3, #254	; 0xfe
    8ac2:	d80f      	bhi.n	8ae4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8ac4:	7803      	ldrb	r3, [r0, #0]
    8ac6:	2b20      	cmp	r3, #32
    8ac8:	d001      	beq.n	8ace <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8aca:	2b2f      	cmp	r3, #47	; 0x2f
    8acc:	d105      	bne.n	8ada <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8ace:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8ad2:	2b20      	cmp	r3, #32
    8ad4:	d0fb      	beq.n	8ace <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8ad6:	2b2f      	cmp	r3, #47	; 0x2f
    8ad8:	d0f9      	beq.n	8ace <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
    8ada:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
    8adc:	4628      	mov	r0, r5
    8ade:	f7ff fd31 	bl	8544 <FatFile::makeSFN(FatLfn_t*)>
    8ae2:	e7e9      	b.n	8ab8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
    8ae4:	2000      	movs	r0, #0
    8ae6:	e7e7      	b.n	8ab8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
    8ae8:	3402      	adds	r4, #2
      fname->len = len;
    8aea:	612c      	str	r4, [r5, #16]
      fname->end = path;
    8aec:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
    8aee:	7803      	ldrb	r3, [r0, #0]
    8af0:	2b00      	cmp	r3, #0
    8af2:	d0e3      	beq.n	8abc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8af4:	2b2f      	cmp	r3, #47	; 0x2f
    8af6:	d0e1      	beq.n	8abc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8af8:	aa01      	add	r2, sp, #4
    8afa:	1d01      	adds	r1, r0, #4
    8afc:	f002 ffd6 	bl	baac <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8b00:	2800      	cmp	r0, #0
    8b02:	d0d8      	beq.n	8ab6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
    8b04:	9b01      	ldr	r3, [sp, #4]
    8b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8b0a:	d2ed      	bcs.n	8ae8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
    8b0c:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8b0e:	2b7f      	cmp	r3, #127	; 0x7f
    8b10:	d810      	bhi.n	8b34 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8b12:	fa5f fc83 	uxtb.w	ip, r3
    8b16:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    8b1a:	d8bd      	bhi.n	8a98 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
    8b1c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    8b20:	d9b6      	bls.n	8a90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    8b22:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
    8b26:	fa5f fc8c 	uxtb.w	ip, ip
    8b2a:	fa26 fc0c 	lsr.w	ip, r6, ip
    8b2e:	f01c 0f01 	tst.w	ip, #1
    8b32:	d1c0      	bne.n	8ab6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
    8b34:	2b2e      	cmp	r3, #46	; 0x2e
    8b36:	d0da      	beq.n	8aee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8b38:	2b20      	cmp	r3, #32
    8b3a:	d0d8      	beq.n	8aee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8b3c:	e7d5      	b.n	8aea <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8b3e:	bf00      	nop
    8b40:	05002101 	.word	0x05002101

00008b44 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b48:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
    8b4a:	2300      	movs	r3, #0
    8b4c:	f88d 3004 	strb.w	r3, [sp, #4]
    8b50:	f88d 3005 	strb.w	r3, [sp, #5]
    8b54:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8b58:	7883      	ldrb	r3, [r0, #2]
    8b5a:	f013 0f02 	tst.w	r3, #2
    8b5e:	f000 8091 	beq.w	8c84 <FatFile::remove()+0x140>
    8b62:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8b64:	6a01      	ldr	r1, [r0, #32]
    8b66:	b129      	cbz	r1, 8b74 <FatFile::remove()+0x30>
    8b68:	6880      	ldr	r0, [r0, #8]
    8b6a:	f000 fdd9 	bl	9720 <FatPartition::freeChain(unsigned long)>
    8b6e:	4603      	mov	r3, r0
    8b70:	2800      	cmp	r0, #0
    8b72:	d06c      	beq.n	8c4e <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8b74:	2101      	movs	r1, #1
    8b76:	4628      	mov	r0, r5
    8b78:	f7fe fca2 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8b7c:	4606      	mov	r6, r0
    8b7e:	2800      	cmp	r0, #0
    8b80:	f000 8082 	beq.w	8c88 <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
    8b84:	1e42      	subs	r2, r0, #1
    8b86:	300a      	adds	r0, #10
    uint8_t sum = 0;
    8b88:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8b8a:	01e3      	lsls	r3, r4, #7
    8b8c:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    8b90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8b94:	fa51 f383 	uxtab	r3, r1, r3
    8b98:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    8b9a:	4290      	cmp	r0, r2
    8b9c:	d1f5      	bne.n	8b8a <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8b9e:	23e5      	movs	r3, #229	; 0xe5
    8ba0:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8ba2:	2300      	movs	r3, #0
    8ba4:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
    8ba6:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8ba8:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8baa:	f106 0028 	add.w	r0, r6, #40	; 0x28
    8bae:	f002 fe4d 	bl	b84c <FsCache::sync()>
    8bb2:	b908      	cbnz	r0, 8bb8 <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8bb4:	2300      	movs	r3, #0
    8bb6:	e04a      	b.n	8c4e <FatFile::remove()+0x10a>
    8bb8:	f506 700e 	add.w	r0, r6, #568	; 0x238
    8bbc:	f002 fe46 	bl	b84c <FsCache::sync()>
    8bc0:	2800      	cmp	r0, #0
    8bc2:	d0f7      	beq.n	8bb4 <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
    8bc4:	6830      	ldr	r0, [r6, #0]
    8bc6:	6803      	ldr	r3, [r0, #0]
    8bc8:	6a1b      	ldr	r3, [r3, #32]
    8bca:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    8bcc:	4603      	mov	r3, r0
    8bce:	2800      	cmp	r0, #0
    8bd0:	d03d      	beq.n	8c4e <FatFile::remove()+0x10a>
  if (!isLFN()) {
    8bd2:	78ea      	ldrb	r2, [r5, #3]
    8bd4:	2a00      	cmp	r2, #0
    8bd6:	d03a      	beq.n	8c4e <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
    8bd8:	4629      	mov	r1, r5
    8bda:	a801      	add	r0, sp, #4
    8bdc:	f7fe fc9f 	bl	751e <FatFile::openCluster(FatFile*)>
    8be0:	4603      	mov	r3, r0
    8be2:	2800      	cmp	r0, #0
    8be4:	d033      	beq.n	8c4e <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8be6:	78eb      	ldrb	r3, [r5, #3]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d04f      	beq.n	8c8c <FatFile::remove()+0x148>
    8bec:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8bee:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
    8bf0:	f04f 08e5 	mov.w	r8, #229	; 0xe5
    8bf4:	e021      	b.n	8c3a <FatFile::remove()+0xf6>
    8bf6:	4639      	mov	r1, r7
    8bf8:	a801      	add	r0, sp, #4
    8bfa:	f7fe fd8f 	bl	771c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8bfe:	2800      	cmp	r0, #0
    8c00:	d046      	beq.n	8c90 <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8c02:	7ac2      	ldrb	r2, [r0, #11]
    8c04:	2a0f      	cmp	r2, #15
    8c06:	d145      	bne.n	8c94 <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
    8c08:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8c0a:	f002 011f 	and.w	r1, r2, #31
    8c0e:	428e      	cmp	r6, r1
    8c10:	d142      	bne.n	8c98 <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
    8c12:	7b41      	ldrb	r1, [r0, #13]
    8c14:	42a1      	cmp	r1, r4
    8c16:	d141      	bne.n	8c9c <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
    8c18:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
    8c1c:	68a9      	ldr	r1, [r5, #8]
    8c1e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    8c22:	f043 0301 	orr.w	r3, r3, #1
    8c26:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    8c2a:	f012 0f40 	tst.w	r2, #64	; 0x40
    8c2e:	d112      	bne.n	8c56 <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8c30:	3601      	adds	r6, #1
    8c32:	b2f6      	uxtb	r6, r6
    8c34:	78eb      	ldrb	r3, [r5, #3]
    8c36:	42b3      	cmp	r3, r6
    8c38:	d322      	bcc.n	8c80 <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8c3a:	88a9      	ldrh	r1, [r5, #4]
    8c3c:	1b89      	subs	r1, r1, r6
    8c3e:	b289      	uxth	r1, r1
    8c40:	0149      	lsls	r1, r1, #5
    8c42:	a801      	add	r0, sp, #4
    8c44:	f7fe fd8c 	bl	7760 <FatFile::seekSet(unsigned long)>
    8c48:	4603      	mov	r3, r0
    8c4a:	2800      	cmp	r0, #0
    8c4c:	d1d3      	bne.n	8bf6 <FatFile::remove()+0xb2>
}
    8c4e:	4618      	mov	r0, r3
    8c50:	b00a      	add	sp, #40	; 0x28
    8c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
    8c56:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8c58:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8c5c:	f002 fdf6 	bl	b84c <FsCache::sync()>
    8c60:	4603      	mov	r3, r0
    8c62:	2800      	cmp	r0, #0
    8c64:	d0f3      	beq.n	8c4e <FatFile::remove()+0x10a>
    8c66:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8c6a:	f002 fdef 	bl	b84c <FsCache::sync()>
    8c6e:	4603      	mov	r3, r0
    8c70:	2800      	cmp	r0, #0
    8c72:	d0ec      	beq.n	8c4e <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
    8c74:	6820      	ldr	r0, [r4, #0]
    8c76:	6803      	ldr	r3, [r0, #0]
    8c78:	6a1b      	ldr	r3, [r3, #32]
    8c7a:	4798      	blx	r3
    8c7c:	4603      	mov	r3, r0
    8c7e:	e7e6      	b.n	8c4e <FatFile::remove()+0x10a>
  return false;
    8c80:	2300      	movs	r3, #0
 fail:
    8c82:	e7e4      	b.n	8c4e <FatFile::remove()+0x10a>
  return false;
    8c84:	2300      	movs	r3, #0
    8c86:	e7e2      	b.n	8c4e <FatFile::remove()+0x10a>
    8c88:	2300      	movs	r3, #0
    8c8a:	e7e0      	b.n	8c4e <FatFile::remove()+0x10a>
    8c8c:	2300      	movs	r3, #0
    8c8e:	e7de      	b.n	8c4e <FatFile::remove()+0x10a>
    8c90:	2300      	movs	r3, #0
    8c92:	e7dc      	b.n	8c4e <FatFile::remove()+0x10a>
    8c94:	2300      	movs	r3, #0
    8c96:	e7da      	b.n	8c4e <FatFile::remove()+0x10a>
    8c98:	2300      	movs	r3, #0
    8c9a:	e7d8      	b.n	8c4e <FatFile::remove()+0x10a>
    8c9c:	2300      	movs	r3, #0
    8c9e:	e7d6      	b.n	8c4e <FatFile::remove()+0x10a>

00008ca0 <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    8ca0:	b510      	push	{r4, lr}
    8ca2:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    8ca4:	6848      	ldr	r0, [r1, #4]
    8ca6:	b130      	cbz	r0, 8cb6 <initFatDirCallback(unsigned long, void*)+0x16>
    8ca8:	890b      	ldrh	r3, [r1, #8]
    8caa:	3301      	adds	r3, #1
    8cac:	b29b      	uxth	r3, r3
    8cae:	810b      	strh	r3, [r1, #8]
    8cb0:	894a      	ldrh	r2, [r1, #10]
    8cb2:	429a      	cmp	r2, r3
    8cb4:	d901      	bls.n	8cba <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    8cb6:	6820      	ldr	r0, [r4, #0]
    8cb8:	bd10      	pop	{r4, pc}
    8cba:	6803      	ldr	r3, [r0, #0]
    8cbc:	685b      	ldr	r3, [r3, #4]
    8cbe:	2201      	movs	r2, #1
    8cc0:	4902      	ldr	r1, [pc, #8]	; (8ccc <initFatDirCallback(unsigned long, void*)+0x2c>)
    8cc2:	4798      	blx	r3
    state->count = 0;
    8cc4:	2300      	movs	r3, #0
    8cc6:	8123      	strh	r3, [r4, #8]
    8cc8:	e7f5      	b.n	8cb6 <initFatDirCallback(unsigned long, void*)+0x16>
    8cca:	bf00      	nop
    8ccc:	20002c68 	.word	0x20002c68

00008cd0 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    8cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cd2:	b087      	sub	sp, #28
    8cd4:	4604      	mov	r4, r0
    8cd6:	460e      	mov	r6, r1
    8cd8:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8cda:	f44f 7200 	mov.w	r2, #512	; 0x200
    8cde:	2100      	movs	r1, #0
    8ce0:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8ce2:	f008 fa4f 	bl	11184 <memset>
  writeMsg("Writing FAT ");
    8ce6:	6a20      	ldr	r0, [r4, #32]
    8ce8:	b120      	cbz	r0, 8cf4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
    8cea:	6803      	ldr	r3, [r0, #0]
    8cec:	685b      	ldr	r3, [r3, #4]
    8cee:	220c      	movs	r2, #12
    8cf0:	4920      	ldr	r1, [pc, #128]	; (8d74 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    8cf2:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
    8cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8cf6:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
    8cf8:	6a23      	ldr	r3, [r4, #32]
    8cfa:	9304      	str	r3, [sp, #16]
  state.count = 0;
    8cfc:	2300      	movs	r3, #0
    8cfe:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    8d02:	096b      	lsrs	r3, r5, #5
    8d04:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    8d08:	69e0      	ldr	r0, [r4, #28]
    8d0a:	68e1      	ldr	r1, [r4, #12]
    8d0c:	6803      	ldr	r3, [r0, #0]
    8d0e:	aa03      	add	r2, sp, #12
    8d10:	9200      	str	r2, [sp, #0]
    8d12:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    8d14:	4b18      	ldr	r3, [pc, #96]	; (8d78 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    8d16:	1e6a      	subs	r2, r5, #1
    8d18:	3101      	adds	r1, #1
    8d1a:	47b8      	blx	r7
    8d1c:	4603      	mov	r3, r0
    8d1e:	b328      	cbz	r0, 8d6c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
    8d20:	6a20      	ldr	r0, [r4, #32]
    8d22:	b120      	cbz	r0, 8d2e <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    8d24:	6803      	ldr	r3, [r0, #0]
    8d26:	685b      	ldr	r3, [r3, #4]
    8d28:	2202      	movs	r2, #2
    8d2a:	4914      	ldr	r1, [pc, #80]	; (8d7c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    8d2c:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    8d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8d30:	22f8      	movs	r2, #248	; 0xf8
    8d32:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
    8d34:	2e10      	cmp	r6, #16
    8d36:	bf0c      	ite	eq
    8d38:	2004      	moveq	r0, #4
    8d3a:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
    8d3c:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
    8d3e:	21ff      	movs	r1, #255	; 0xff
    8d40:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d42:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    8d44:	3301      	adds	r3, #1
    8d46:	4298      	cmp	r0, r3
    8d48:	d1fa      	bne.n	8d40 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    8d4a:	69e0      	ldr	r0, [r4, #28]
    8d4c:	6803      	ldr	r3, [r0, #0]
    8d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d52:	68e1      	ldr	r1, [r4, #12]
    8d54:	4798      	blx	r3
    8d56:	4603      	mov	r3, r0
    8d58:	b140      	cbz	r0, 8d6c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    8d5a:	69e0      	ldr	r0, [r4, #28]
    8d5c:	68e5      	ldr	r5, [r4, #12]
    8d5e:	68a1      	ldr	r1, [r4, #8]
    8d60:	6803      	ldr	r3, [r0, #0]
    8d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d64:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d66:	4429      	add	r1, r5
    8d68:	4798      	blx	r3
    8d6a:	4603      	mov	r3, r0
}
    8d6c:	4618      	mov	r0, r3
    8d6e:	b007      	add	sp, #28
    8d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d72:	bf00      	nop
    8d74:	20002000 	.word	0x20002000
    8d78:	00008ca1 	.word	0x00008ca1
    8d7c:	20002024 	.word	0x20002024

00008d80 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    8d80:	b570      	push	{r4, r5, r6, lr}
    8d82:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8d84:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8d86:	f44f 7600 	mov.w	r6, #512	; 0x200
    8d8a:	4632      	mov	r2, r6
    8d8c:	2100      	movs	r1, #0
    8d8e:	4620      	mov	r0, r4
    8d90:	f008 f9f8 	bl	11184 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    8d94:	23eb      	movs	r3, #235	; 0xeb
    8d96:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    8d98:	2376      	movs	r3, #118	; 0x76
    8d9a:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    8d9c:	2390      	movs	r3, #144	; 0x90
    8d9e:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    8da0:	2320      	movs	r3, #32
    8da2:	70e3      	strb	r3, [r4, #3]
    8da4:	7123      	strb	r3, [r4, #4]
    8da6:	7163      	strb	r3, [r4, #5]
    8da8:	71a3      	strb	r3, [r4, #6]
    8daa:	71e3      	strb	r3, [r4, #7]
    8dac:	7223      	strb	r3, [r4, #8]
    8dae:	7263      	strb	r3, [r4, #9]
    8db0:	72a3      	strb	r3, [r4, #10]
    8db2:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    8db6:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    8dba:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    8dbc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    8dbe:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    8dc0:	2302      	movs	r3, #2
    8dc2:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    8dc4:	23f8      	movs	r3, #248	; 0xf8
    8dc6:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    8dc8:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8dca:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    8dcc:	69ab      	ldr	r3, [r5, #24]
    8dce:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8dd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8dd4:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    8dd8:	bd70      	pop	{r4, r5, r6, pc}

00008dda <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    8dda:	b538      	push	{r3, r4, r5, lr}
    8ddc:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    8dde:	f44f 7200 	mov.w	r2, #512	; 0x200
    8de2:	2100      	movs	r1, #0
    8de4:	6a40      	ldr	r0, [r0, #36]	; 0x24
    8de6:	f008 f9cd 	bl	11184 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    8dea:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    8dec:	6922      	ldr	r2, [r4, #16]
    8dee:	6821      	ldr	r1, [r4, #0]
    8df0:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    8df4:	f002 fdb6 	bl	b964 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    8df8:	6922      	ldr	r2, [r4, #16]
    8dfa:	69a3      	ldr	r3, [r4, #24]
    8dfc:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    8dfe:	3a01      	subs	r2, #1
    8e00:	6821      	ldr	r1, [r4, #0]
    8e02:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    8e06:	f002 fdad 	bl	b964 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    8e0a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    8e0e:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    8e12:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    8e14:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    8e18:	69a3      	ldr	r3, [r4, #24]
    8e1a:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    8e1e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    8e22:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    8e26:	69e0      	ldr	r0, [r4, #28]
    8e28:	6803      	ldr	r3, [r0, #0]
    8e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8e2e:	2100      	movs	r1, #0
    8e30:	4798      	blx	r3
}
    8e32:	bd38      	pop	{r3, r4, r5, pc}

00008e34 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    8e34:	b570      	push	{r4, r5, r6, lr}
    8e36:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8e38:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
    8e3e:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8e40:	6946      	ldr	r6, [r0, #20]
    8e42:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
    8e46:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    8e4a:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8e4e:	f202 1001 	addw	r0, r2, #257	; 0x101
    8e52:	0a00      	lsrs	r0, r0, #8
    8e54:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8e56:	0040      	lsls	r0, r0, #1
    8e58:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    8e5c:	459c      	cmp	ip, r3
    8e5e:	d90f      	bls.n	8e80 <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8e60:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    8e64:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8e66:	1af2      	subs	r2, r6, r3
    8e68:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    8e6c:	f202 1101 	addw	r1, r2, #257	; 0x101
    8e70:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    8e72:	0048      	lsls	r0, r1, #1
    8e74:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    8e78:	4563      	cmp	r3, ip
    8e7a:	d3f3      	bcc.n	8e64 <FatFormatter::makeFat16()+0x30>
    8e7c:	6063      	str	r3, [r4, #4]
    8e7e:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    8e80:	eba3 030c 	sub.w	r3, r3, ip
    8e84:	f103 0180 	add.w	r1, r3, #128	; 0x80
    8e88:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    8e8a:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
    8e8e:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    8e92:	d213      	bcs.n	8ebc <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
    8e94:	2101      	movs	r1, #1
    8e96:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8e98:	3381      	adds	r3, #129	; 0x81
    8e9a:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    8e9c:	3021      	adds	r0, #33	; 0x21
    8e9e:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
    8ea2:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
    8ea4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    8ea8:	bf34      	ite	cc
    8eaa:	2304      	movcc	r3, #4
    8eac:	2306      	movcs	r3, #6
    8eae:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8eb2:	4620      	mov	r0, r4
    8eb4:	f7ff ff91 	bl	8dda <FatFormatter::writeMbr()>
    8eb8:	b950      	cbnz	r0, 8ed0 <FatFormatter::makeFat16()+0x9c>
}
    8eba:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
    8ebc:	6a20      	ldr	r0, [r4, #32]
    8ebe:	2800      	cmp	r0, #0
    8ec0:	d040      	beq.n	8f44 <FatFormatter::makeFat16()+0x110>
    8ec2:	6803      	ldr	r3, [r0, #0]
    8ec4:	685b      	ldr	r3, [r3, #4]
    8ec6:	2213      	movs	r2, #19
    8ec8:	491f      	ldr	r1, [pc, #124]	; (8f48 <FatFormatter::makeFat16()+0x114>)
    8eca:	4798      	blx	r3
    return false;
    8ecc:	2000      	movs	r0, #0
    8ece:	e7f4      	b.n	8eba <FatFormatter::makeFat16()+0x86>
  initPbs();
    8ed0:	4620      	mov	r0, r4
    8ed2:	f7ff ff55 	bl	8d80 <FatFormatter::initPbs()>
    8ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
    8eda:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    8ede:	68a3      	ldr	r3, [r4, #8]
    8ee0:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    8ee2:	2380      	movs	r3, #128	; 0x80
    8ee4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    8ee8:	2329      	movs	r3, #41	; 0x29
    8eea:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    8eee:	4b17      	ldr	r3, [pc, #92]	; (8f4c <FatFormatter::makeFat16()+0x118>)
    8ef0:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    8ef4:	f105 032a 	add.w	r3, r5, #42	; 0x2a
    8ef8:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    8efc:	2220      	movs	r2, #32
    8efe:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    8f02:	4299      	cmp	r1, r3
    8f04:	d1fb      	bne.n	8efe <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
    8f06:	2346      	movs	r3, #70	; 0x46
    8f08:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    8f0c:	2341      	movs	r3, #65	; 0x41
    8f0e:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    8f12:	2354      	movs	r3, #84	; 0x54
    8f14:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    8f18:	2331      	movs	r3, #49	; 0x31
    8f1a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    8f1e:	2336      	movs	r3, #54	; 0x36
    8f20:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    8f24:	69e0      	ldr	r0, [r4, #28]
    8f26:	6803      	ldr	r3, [r0, #0]
    8f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8f2c:	6921      	ldr	r1, [r4, #16]
    8f2e:	4798      	blx	r3
    8f30:	2800      	cmp	r0, #0
    8f32:	d0c2      	beq.n	8eba <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    8f34:	6862      	ldr	r2, [r4, #4]
    8f36:	68e3      	ldr	r3, [r4, #12]
    8f38:	1ad2      	subs	r2, r2, r3
    8f3a:	2110      	movs	r1, #16
    8f3c:	4620      	mov	r0, r4
    8f3e:	f7ff fec7 	bl	8cd0 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    8f42:	e7ba      	b.n	8eba <FatFormatter::makeFat16()+0x86>
    return false;
    8f44:	2000      	movs	r0, #0
    8f46:	e7b8      	b.n	8eba <FatFormatter::makeFat16()+0x86>
    8f48:	20001fd4 	.word	0x20001fd4
    8f4c:	0012d687 	.word	0x0012d687

00008f50 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    8f50:	b570      	push	{r4, r5, r6, lr}
    8f52:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    8f54:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
    8f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8f5a:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    8f60:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f62:	6946      	ldr	r6, [r0, #20]
    8f64:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
    8f68:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
    8f6c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8f70:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8f74:	09db      	lsrs	r3, r3, #7
    8f76:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8f78:	f242 0209 	movw	r2, #8201	; 0x2009
    8f7c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
    8f80:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    8f84:	d931      	bls.n	8fea <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8f8a:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    8f8e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8f92:	1ab1      	subs	r1, r6, r2
    8f94:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    8f98:	f101 0381 	add.w	r3, r1, #129	; 0x81
    8f9c:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    8f9e:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    8fa2:	4282      	cmp	r2, r0
    8fa4:	d3f3      	bcc.n	8f8e <FatFormatter::makeFat32()+0x3e>
    8fa6:	6062      	str	r2, [r4, #4]
    8fa8:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
    8faa:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    8fae:	4281      	cmp	r1, r0
    8fb0:	d91e      	bls.n	8ff0 <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    8fb2:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
    8fb6:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    8fba:	b29b      	uxth	r3, r3
    8fbc:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    8fbe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    8fc2:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    8fc4:	fb01 220c 	mla	r2, r1, ip, r2
    8fc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    8fcc:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
    8fce:	4b55      	ldr	r3, [pc, #340]	; (9124 <FatFormatter::makeFat32()+0x1d4>)
    8fd0:	429a      	cmp	r2, r3
    8fd2:	bf94      	ite	ls
    8fd4:	220b      	movls	r2, #11
    8fd6:	220c      	movhi	r2, #12
    8fd8:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    8fdc:	4620      	mov	r0, r4
    8fde:	f7ff fefc 	bl	8dda <FatFormatter::writeMbr()>
    8fe2:	4603      	mov	r3, r0
    8fe4:	b978      	cbnz	r0, 9006 <FatFormatter::makeFat32()+0xb6>
}
    8fe6:	4618      	mov	r0, r3
    8fe8:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    8fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8fee:	e7dc      	b.n	8faa <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
    8ff0:	6a20      	ldr	r0, [r4, #32]
    8ff2:	2800      	cmp	r0, #0
    8ff4:	f000 8093 	beq.w	911e <FatFormatter::makeFat32()+0x1ce>
    8ff8:	6803      	ldr	r3, [r0, #0]
    8ffa:	685b      	ldr	r3, [r3, #4]
    8ffc:	2213      	movs	r2, #19
    8ffe:	494a      	ldr	r1, [pc, #296]	; (9128 <FatFormatter::makeFat32()+0x1d8>)
    9000:	4798      	blx	r3
    return false;
    9002:	2300      	movs	r3, #0
    9004:	e7ef      	b.n	8fe6 <FatFormatter::makeFat32()+0x96>
  initPbs();
    9006:	4620      	mov	r0, r4
    9008:	f7ff feba 	bl	8d80 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    900c:	68a3      	ldr	r3, [r4, #8]
    900e:	626b      	str	r3, [r5, #36]	; 0x24
    9010:	2302      	movs	r3, #2
    9012:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
    9014:	2301      	movs	r3, #1
    9016:	862b      	strh	r3, [r5, #48]	; 0x30
    9018:	2306      	movs	r3, #6
    901a:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    901c:	2380      	movs	r3, #128	; 0x80
    901e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    9022:	2329      	movs	r3, #41	; 0x29
    9024:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    9028:	4b40      	ldr	r3, [pc, #256]	; (912c <FatFormatter::makeFat32()+0x1dc>)
    902a:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    902e:	f105 0346 	add.w	r3, r5, #70	; 0x46
    9032:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    9036:	2220      	movs	r2, #32
    9038:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    903c:	4299      	cmp	r1, r3
    903e:	d1fb      	bne.n	9038 <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
    9040:	2346      	movs	r3, #70	; 0x46
    9042:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    9046:	2341      	movs	r3, #65	; 0x41
    9048:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    904c:	2354      	movs	r3, #84	; 0x54
    904e:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    9052:	2333      	movs	r3, #51	; 0x33
    9054:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    9058:	2332      	movs	r3, #50	; 0x32
    905a:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    905e:	69e0      	ldr	r0, [r4, #28]
    9060:	6803      	ldr	r3, [r0, #0]
    9062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9064:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9066:	6921      	ldr	r1, [r4, #16]
    9068:	4798      	blx	r3
    906a:	4603      	mov	r3, r0
    906c:	2800      	cmp	r0, #0
    906e:	d0ba      	beq.n	8fe6 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    9070:	69e0      	ldr	r0, [r4, #28]
    9072:	6921      	ldr	r1, [r4, #16]
    9074:	6803      	ldr	r3, [r0, #0]
    9076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9078:	6a62      	ldr	r2, [r4, #36]	; 0x24
    907a:	3106      	adds	r1, #6
    907c:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    907e:	4603      	mov	r3, r0
    9080:	2800      	cmp	r0, #0
    9082:	d0b0      	beq.n	8fe6 <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    9084:	f44f 7200 	mov.w	r2, #512	; 0x200
    9088:	2100      	movs	r1, #0
    908a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    908c:	f008 f87a 	bl	11184 <memset>
    9090:	4b27      	ldr	r3, [pc, #156]	; (9130 <FatFormatter::makeFat32()+0x1e0>)
    9092:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    9096:	69e0      	ldr	r0, [r4, #28]
    9098:	6921      	ldr	r1, [r4, #16]
    909a:	6803      	ldr	r3, [r0, #0]
    909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    909e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    90a0:	3102      	adds	r1, #2
    90a2:	4798      	blx	r3
    90a4:	4603      	mov	r3, r0
    90a6:	2800      	cmp	r0, #0
    90a8:	d09d      	beq.n	8fe6 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    90aa:	69e0      	ldr	r0, [r4, #28]
    90ac:	6921      	ldr	r1, [r4, #16]
    90ae:	6803      	ldr	r3, [r0, #0]
    90b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    90b4:	3108      	adds	r1, #8
    90b6:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    90b8:	4603      	mov	r3, r0
    90ba:	2800      	cmp	r0, #0
    90bc:	d093      	beq.n	8fe6 <FatFormatter::makeFat32()+0x96>
    90be:	4b1d      	ldr	r3, [pc, #116]	; (9134 <FatFormatter::makeFat32()+0x1e4>)
    90c0:	602b      	str	r3, [r5, #0]
    90c2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
    90c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    90ca:	3320      	adds	r3, #32
    90cc:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    90d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    90d4:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
    90d8:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    90dc:	69e0      	ldr	r0, [r4, #28]
    90de:	6921      	ldr	r1, [r4, #16]
    90e0:	6803      	ldr	r3, [r0, #0]
    90e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    90e6:	3101      	adds	r1, #1
    90e8:	4798      	blx	r3
    90ea:	4603      	mov	r3, r0
    90ec:	2800      	cmp	r0, #0
    90ee:	f43f af7a 	beq.w	8fe6 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    90f2:	69e0      	ldr	r0, [r4, #28]
    90f4:	6921      	ldr	r1, [r4, #16]
    90f6:	6803      	ldr	r3, [r0, #0]
    90f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    90fc:	3107      	adds	r1, #7
    90fe:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9100:	4603      	mov	r3, r0
    9102:	2800      	cmp	r0, #0
    9104:	f43f af6f 	beq.w	8fe6 <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    9108:	68a2      	ldr	r2, [r4, #8]
    910a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    910e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    9112:	2120      	movs	r1, #32
    9114:	4620      	mov	r0, r4
    9116:	f7ff fddb 	bl	8cd0 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    911a:	4603      	mov	r3, r0
    911c:	e763      	b.n	8fe6 <FatFormatter::makeFat32()+0x96>
    return false;
    911e:	2300      	movs	r3, #0
    9120:	e761      	b.n	8fe6 <FatFormatter::makeFat32()+0x96>
    9122:	bf00      	nop
    9124:	00fb0400 	.word	0x00fb0400
    9128:	20001fd4 	.word	0x20001fd4
    912c:	0012d687 	.word	0x0012d687
    9130:	aa550000 	.word	0xaa550000
    9134:	41615252 	.word	0x41615252

00009138 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    9138:	b538      	push	{r3, r4, r5, lr}
    913a:	4604      	mov	r4, r0
    913c:	4608      	mov	r0, r1
  m_dev = dev;
    913e:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
    9140:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    9142:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    9144:	680b      	ldr	r3, [r1, #0]
    9146:	69db      	ldr	r3, [r3, #28]
    9148:	4798      	blx	r3
    914a:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    914c:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
    9150:	0ada      	lsrs	r2, r3, #11
    9152:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
    9154:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    9158:	d31d      	bcc.n	9196 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
    915a:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
    915e:	d333      	bcc.n	91c8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
    9160:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
    9164:	d342      	bcc.n	91ec <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
    9166:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
    916a:	d341      	bcc.n	91f0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
    916c:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
    9170:	d340      	bcc.n	91f4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
    9172:	4a22      	ldr	r2, [pc, #136]	; (91fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    9174:	4293      	cmp	r3, r2
    9176:	d93f      	bls.n	91f8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
    9178:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
    917c:	4293      	cmp	r3, r2
    917e:	d814      	bhi.n	91aa <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
    9180:	2340      	movs	r3, #64	; 0x40
    9182:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    9186:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    918a:	d320      	bcc.n	91ce <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
    918c:	4620      	mov	r0, r4
    918e:	f7ff fedf 	bl	8f50 <FatFormatter::makeFat32()>
    9192:	4605      	mov	r5, r0
    9194:	e01f      	b.n	91d6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
    9196:	6a20      	ldr	r0, [r4, #32]
    9198:	b1a0      	cbz	r0, 91c4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    919a:	6803      	ldr	r3, [r0, #0]
    919c:	685b      	ldr	r3, [r3, #4]
    919e:	2214      	movs	r2, #20
    91a0:	4917      	ldr	r1, [pc, #92]	; (9200 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    91a2:	4798      	blx	r3
    return false;
    91a4:	2500      	movs	r5, #0
}
    91a6:	4628      	mov	r0, r5
    91a8:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
    91aa:	2380      	movs	r3, #128	; 0x80
    91ac:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    91b0:	e7ec      	b.n	918c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
    91b2:	6a20      	ldr	r0, [r4, #32]
    91b4:	2800      	cmp	r0, #0
    91b6:	d0f6      	beq.n	91a6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    91b8:	6803      	ldr	r3, [r0, #0]
    91ba:	685b      	ldr	r3, [r3, #4]
    91bc:	220f      	movs	r2, #15
    91be:	4911      	ldr	r1, [pc, #68]	; (9204 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    91c0:	4798      	blx	r3
    91c2:	e7f0      	b.n	91a6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
    91c4:	2500      	movs	r5, #0
    91c6:	e7ee      	b.n	91a6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    91c8:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
    91ca:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    91ce:	4620      	mov	r0, r4
    91d0:	f7ff fe30 	bl	8e34 <FatFormatter::makeFat16()>
    91d4:	4605      	mov	r5, r0
  if (rtn) {
    91d6:	2d00      	cmp	r5, #0
    91d8:	d0eb      	beq.n	91b2 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    91da:	6a20      	ldr	r0, [r4, #32]
    91dc:	2800      	cmp	r0, #0
    91de:	d0e2      	beq.n	91a6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    91e0:	6803      	ldr	r3, [r0, #0]
    91e2:	685b      	ldr	r3, [r3, #4]
    91e4:	220d      	movs	r2, #13
    91e6:	4908      	ldr	r1, [pc, #32]	; (9208 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
    91e8:	4798      	blx	r3
    91ea:	e7dc      	b.n	91a6 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    91ec:	2304      	movs	r3, #4
    91ee:	e7ec      	b.n	91ca <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    91f0:	2308      	movs	r3, #8
    91f2:	e7ea      	b.n	91ca <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    91f4:	2310      	movs	r3, #16
    91f6:	e7e8      	b.n	91ca <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    91f8:	2320      	movs	r3, #32
    91fa:	e7e6      	b.n	91ca <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    91fc:	002007ff 	.word	0x002007ff
    9200:	20001f9c 	.word	0x20001f9c
    9204:	20001fc4 	.word	0x20001fc4
    9208:	20001fb4 	.word	0x20001fb4

0000920c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    920c:	2a04      	cmp	r2, #4
    920e:	d804      	bhi.n	921a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9210:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9214:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    9218:	4770      	bx	lr
  } else if (i < 11) {
    921a:	2a0a      	cmp	r2, #10
    921c:	d803      	bhi.n	9226 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    921e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9222:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    9224:	4770      	bx	lr
  } else if (i < 13) {
    9226:	2a0c      	cmp	r2, #12
    9228:	d803      	bhi.n	9232 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    922a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    922e:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
    9230:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9232:	2000      	movs	r0, #0
}
    9234:	4770      	bx	lr

00009236 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    9236:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    923a:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    923c:	7804      	ldrb	r4, [r0, #0]
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    923e:	2c00      	cmp	r4, #0
    9240:	d041      	beq.n	92c6 <FatFile::getSFN(char*, unsigned int)+0x90>
    9242:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9244:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9248:	d007      	beq.n	925a <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
    924a:	2a01      	cmp	r2, #1
    924c:	d93b      	bls.n	92c6 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    924e:	232f      	movs	r3, #47	; 0x2f
    9250:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
    9252:	2300      	movs	r3, #0
    9254:	704b      	strb	r3, [r1, #1]
    return 1;
    9256:	2001      	movs	r0, #1
    9258:	e037      	b.n	92ca <FatFile::getSFN(char*, unsigned int)+0x94>
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    925a:	2100      	movs	r1, #0
    925c:	f7fe f930 	bl	74c0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9260:	4686      	mov	lr, r0
    9262:	b380      	cbz	r0, 92c6 <FatFile::getSFN(char*, unsigned int)+0x90>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    9264:	4603      	mov	r3, r0
    9266:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
    9268:	2108      	movs	r1, #8
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    926a:	f04f 0810 	mov.w	r8, #16
      c = '.';
    926e:	272e      	movs	r7, #46	; 0x2e
    9270:	e012      	b.n	9298 <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
    9272:	781a      	ldrb	r2, [r3, #0]
    9274:	2a20      	cmp	r2, #32
    9276:	d022      	beq.n	92be <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
    9278:	4641      	mov	r1, r8
      c = '.';
    927a:	46bc      	mov	ip, r7
    927c:	e002      	b.n	9284 <FatFile::getSFN(char*, unsigned int)+0x4e>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
        c += 'a' - 'A';
      }
      if (c == ' ') {
    927e:	f1bc 0f20 	cmp.w	ip, #32
    9282:	d006      	beq.n	9292 <FatFile::getSFN(char*, unsigned int)+0x5c>
        continue;
      }
    }
    if ((j + 1u) >= size) {
    9284:	46a1      	mov	r9, r4
    9286:	1c62      	adds	r2, r4, #1
    9288:	42b2      	cmp	r2, r6
    928a:	d21c      	bcs.n	92c6 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    928c:	b2d4      	uxtb	r4, r2
    928e:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
    9292:	3001      	adds	r0, #1
    9294:	280c      	cmp	r0, #12
    9296:	d012      	beq.n	92be <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
    9298:	b2c2      	uxtb	r2, r0
    929a:	2a08      	cmp	r2, #8
    929c:	d0e9      	beq.n	9272 <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
    929e:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    92a2:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
    92a6:	b2d2      	uxtb	r2, r2
    92a8:	2a19      	cmp	r2, #25
    92aa:	d8e8      	bhi.n	927e <FatFile::getSFN(char*, unsigned int)+0x48>
    92ac:	f89e 200c 	ldrb.w	r2, [lr, #12]
    92b0:	4211      	tst	r1, r2
    92b2:	d0e7      	beq.n	9284 <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
    92b4:	f10c 0c20 	add.w	ip, ip, #32
    92b8:	fa5f fc8c 	uxtb.w	ip, ip
    92bc:	e7e2      	b.n	9284 <FatFile::getSFN(char*, unsigned int)+0x4e>
  }
  name[j] = '\0';
    92be:	4620      	mov	r0, r4
    92c0:	2300      	movs	r3, #0
    92c2:	552b      	strb	r3, [r5, r4]
  return j;
    92c4:	e001      	b.n	92ca <FatFile::getSFN(char*, unsigned int)+0x94>

 fail:
  name[0] = '\0';
    92c6:	2000      	movs	r0, #0
    92c8:	7028      	strb	r0, [r5, #0]
  return 0;
}
    92ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000092d0 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    92d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92d4:	b08b      	sub	sp, #44	; 0x2c
    92d6:	4689      	mov	r9, r1
  FatFile() {}
    92d8:	2300      	movs	r3, #0
    92da:	f88d 3004 	strb.w	r3, [sp, #4]
    92de:	f88d 3005 	strb.w	r3, [sp, #5]
    92e2:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
    92e6:	7803      	ldrb	r3, [r0, #0]
    92e8:	2b00      	cmp	r3, #0
    92ea:	d05d      	beq.n	93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
    92ec:	4604      	mov	r4, r0
    92ee:	4617      	mov	r7, r2
  if (!isLFN()) {
    92f0:	78c3      	ldrb	r3, [r0, #3]
    92f2:	b913      	cbnz	r3, 92fa <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    92f4:	f7ff ff9f 	bl	9236 <FatFile::getSFN(char*, unsigned int)>
    92f8:	e059      	b.n	93ae <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
    92fa:	4601      	mov	r1, r0
    92fc:	a801      	add	r0, sp, #4
    92fe:	f7fe f90e 	bl	751e <FatFile::openCluster(FatFile*)>
    9302:	2800      	cmp	r0, #0
    9304:	d050      	beq.n	93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9306:	78e3      	ldrb	r3, [r4, #3]
    9308:	2b00      	cmp	r3, #0
    930a:	d05d      	beq.n	93c8 <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
    930c:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    930e:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
    9312:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9314:	3f01      	subs	r7, #1
    9316:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9318:	88a1      	ldrh	r1, [r4, #4]
    931a:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    931e:	b289      	uxth	r1, r1
    9320:	0149      	lsls	r1, r1, #5
    9322:	a801      	add	r0, sp, #4
    9324:	f7fe fa1c 	bl	7760 <FatFile::seekSet(unsigned long)>
    9328:	2800      	cmp	r0, #0
    932a:	d03d      	beq.n	93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
    932c:	2100      	movs	r1, #0
    932e:	a801      	add	r0, sp, #4
    9330:	f7fe f9f4 	bl	771c <FatFile::readDirCache(bool)>
    if (!ldir) {
    9334:	4682      	mov	sl, r0
    9336:	b3b8      	cbz	r0, 93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9338:	7ac3      	ldrb	r3, [r0, #11]
    933a:	2b0f      	cmp	r3, #15
    933c:	d134      	bne.n	93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
    933e:	7803      	ldrb	r3, [r0, #0]
    9340:	f003 031f 	and.w	r3, r3, #31
    9344:	455b      	cmp	r3, fp
    9346:	d12f      	bne.n	93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
    9348:	f04f 0800 	mov.w	r8, #0
    934c:	e012      	b.n	9374 <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    934e:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    9352:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    9354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9358:	d323      	bcc.n	93a2 <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
    935a:	b3b0      	cbz	r0, 93ca <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    935c:	463a      	mov	r2, r7
    935e:	4629      	mov	r1, r5
    9360:	f002 fb55 	bl	ba0e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9364:	4605      	mov	r5, r0
    9366:	b1f8      	cbz	r0, 93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
    9368:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
    936a:	f108 0801 	add.w	r8, r8, #1
    936e:	f1b8 0f0d 	cmp.w	r8, #13
    9372:	d021      	beq.n	93b8 <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
    9374:	fa5f f288 	uxtb.w	r2, r8
    9378:	4651      	mov	r1, sl
    937a:	4620      	mov	r0, r4
    937c:	f7ff ff46 	bl	920c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    9380:	2e00      	cmp	r6, #0
    9382:	d0e4      	beq.n	934e <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    9384:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    9388:	b29b      	uxth	r3, r3
    938a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    938e:	d20b      	bcs.n	93a8 <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    9390:	4b10      	ldr	r3, [pc, #64]	; (93d4 <FatFile::getName8(char*, unsigned int)+0x104>)
    9392:	ea03 2686 	and.w	r6, r3, r6, lsl #10
    9396:	f3c0 0009 	ubfx	r0, r0, #0, #10
    939a:	4306      	orrs	r6, r0
    939c:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
    93a0:	e7dc      	b.n	935c <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
    93a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    93a6:	d305      	bcc.n	93b4 <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
    93a8:	2000      	movs	r0, #0
    93aa:	f889 0000 	strb.w	r0, [r9]
}
    93ae:	b00b      	add	sp, #44	; 0x2c
    93b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    93b4:	4606      	mov	r6, r0
    93b6:	e7d8      	b.n	936a <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    93b8:	f10b 0b01 	add.w	fp, fp, #1
    93bc:	fa5f fb8b 	uxtb.w	fp, fp
    93c0:	78e3      	ldrb	r3, [r4, #3]
    93c2:	455b      	cmp	r3, fp
    93c4:	d2a8      	bcs.n	9318 <FatFile::getName8(char*, unsigned int)+0x48>
    93c6:	e000      	b.n	93ca <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
    93c8:	464d      	mov	r5, r9
  *str = '\0';
    93ca:	2300      	movs	r3, #0
    93cc:	702b      	strb	r3, [r5, #0]
  return str - name;
    93ce:	eba5 0009 	sub.w	r0, r5, r9
    93d2:	e7ec      	b.n	93ae <FatFile::getName8(char*, unsigned int)+0xde>
    93d4:	000ffc00 	.word	0x000ffc00

000093d8 <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    93d8:	b508      	push	{r3, lr}
  return getName8(name, size);
    93da:	f7ff ff79 	bl	92d0 <FatFile::getName8(char*, unsigned int)>
}
    93de:	bd08      	pop	{r3, pc}

000093e0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    93e0:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    93e2:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    93e4:	46a4      	mov	ip, r4
    93e6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    93ea:	bf28      	it	cs
    93ec:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    93f0:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    93f4:	4281      	cmp	r1, r0
    93f6:	d307      	bcc.n	9408 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    93f8:	eba4 040c 	sub.w	r4, r4, ip
    93fc:	6014      	str	r4, [r2, #0]
}
    93fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    9402:	4770      	bx	lr
  while (p < e) {
    9404:	4288      	cmp	r0, r1
    9406:	d9f7      	bls.n	93f8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
    9408:	f831 3b02 	ldrh.w	r3, [r1], #2
    940c:	2b00      	cmp	r3, #0
    940e:	d1f9      	bne.n	9404 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9410:	6853      	ldr	r3, [r2, #4]
    9412:	3301      	adds	r3, #1
    9414:	6053      	str	r3, [r2, #4]
    9416:	e7f5      	b.n	9404 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

00009418 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9418:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    941a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    941c:	46a4      	mov	ip, r4
    941e:	2c80      	cmp	r4, #128	; 0x80
    9420:	bf28      	it	cs
    9422:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    9426:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    942a:	4281      	cmp	r1, r0
    942c:	d307      	bcc.n	943e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    942e:	eba4 040c 	sub.w	r4, r4, ip
    9432:	6014      	str	r4, [r2, #0]
}
    9434:	f85d 4b04 	ldr.w	r4, [sp], #4
    9438:	4770      	bx	lr
  while (p < e) {
    943a:	4288      	cmp	r0, r1
    943c:	d9f7      	bls.n	942e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
    943e:	f851 3b04 	ldr.w	r3, [r1], #4
    9442:	2b00      	cmp	r3, #0
    9444:	d1f9      	bne.n	943a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    9446:	6853      	ldr	r3, [r2, #4]
    9448:	3301      	adds	r3, #1
    944a:	6053      	str	r3, [r2, #4]
    944c:	e7f5      	b.n	943a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

0000944e <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    944e:	2901      	cmp	r1, #1
    9450:	d974      	bls.n	953c <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9456:	4606      	mov	r6, r0
    9458:	460c      	mov	r4, r1
    945a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    945c:	69c3      	ldr	r3, [r0, #28]
    945e:	428b      	cmp	r3, r1
    9460:	d36f      	bcc.n	9542 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
    9462:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9464:	2b20      	cmp	r3, #32
    9466:	d02d      	beq.n	94c4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
    9468:	2b10      	cmp	r3, #16
    946a:	d044      	beq.n	94f6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    946c:	2b0c      	cmp	r3, #12
    946e:	d172      	bne.n	9556 <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
    9470:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9474:	fa13 f381 	uxtah	r3, r3, r1
    9478:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    947a:	f3c3 2346 	ubfx	r3, r3, #9, #7
    947e:	6982      	ldr	r2, [r0, #24]
    9480:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
    9484:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9488:	7a02      	ldrb	r2, [r0, #8]
    948a:	2a02      	cmp	r2, #2
    948c:	bf14      	ite	ne
    948e:	2200      	movne	r2, #0
    9490:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9492:	0052      	lsls	r2, r2, #1
    9494:	4641      	mov	r1, r8
    9496:	4648      	mov	r0, r9
    9498:	f002 f9ff 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    949c:	4602      	mov	r2, r0
    949e:	2800      	cmp	r0, #0
    94a0:	d05c      	beq.n	955c <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
    94a2:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
    94a6:	5cc7      	ldrb	r7, [r0, r3]
    index++;
    94a8:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    94aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    94ae:	d036      	beq.n	951e <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
    94b0:	5cd3      	ldrb	r3, [r2, r3]
    94b2:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    94b6:	f014 0f01 	tst.w	r4, #1
    94ba:	bf14      	ite	ne
    94bc:	091b      	lsrne	r3, r3, #4
    94be:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
    94c2:	e012      	b.n	94ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    94c4:	7a02      	ldrb	r2, [r0, #8]
    94c6:	2a02      	cmp	r2, #2
    94c8:	bf14      	ite	ne
    94ca:	2200      	movne	r2, #0
    94cc:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    94ce:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    94d0:	0052      	lsls	r2, r2, #1
    94d2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    94d6:	f500 700e 	add.w	r0, r0, #568	; 0x238
    94da:	f002 f9de 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    94de:	2800      	cmp	r0, #0
    94e0:	d033      	beq.n	954a <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    94e2:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    94e4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    94e8:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    94ea:	69f2      	ldr	r2, [r6, #28]
    94ec:	4293      	cmp	r3, r2
    94ee:	d83b      	bhi.n	9568 <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
    94f0:	602b      	str	r3, [r5, #0]
  return 1;
    94f2:	2001      	movs	r0, #1
    94f4:	e027      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    94f6:	7a02      	ldrb	r2, [r0, #8]
    94f8:	2a02      	cmp	r2, #2
    94fa:	bf14      	ite	ne
    94fc:	2200      	movne	r2, #0
    94fe:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9500:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9504:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9506:	0052      	lsls	r2, r2, #1
    9508:	4419      	add	r1, r3
    950a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    950e:	f002 f9c4 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9512:	b1e8      	cbz	r0, 9550 <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9514:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    9516:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    951a:	5b03      	ldrh	r3, [r0, r4]
    951c:	e7e5      	b.n	94ea <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    951e:	7a32      	ldrb	r2, [r6, #8]
    9520:	2a02      	cmp	r2, #2
    9522:	bf14      	ite	ne
    9524:	2200      	movne	r2, #0
    9526:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9528:	0052      	lsls	r2, r2, #1
    952a:	f108 0101 	add.w	r1, r8, #1
    952e:	4648      	mov	r0, r9
    9530:	f002 f9b3 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9534:	4602      	mov	r2, r0
    9536:	b1a0      	cbz	r0, 9562 <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
    9538:	2300      	movs	r3, #0
    953a:	e7b9      	b.n	94b0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
    953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9540:	4770      	bx	lr
  return -1;
    9542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
    954a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    954e:	e7fa      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9554:	e7f7      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    955a:	e7f4      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    955c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9560:	e7f1      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    9562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9566:	e7ee      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
    9568:	2000      	movs	r0, #0
    956a:	e7ec      	b.n	9546 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

0000956c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    956c:	2901      	cmp	r1, #1
    956e:	d972      	bls.n	9656 <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9574:	4606      	mov	r6, r0
    9576:	460c      	mov	r4, r1
    9578:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    957a:	69c3      	ldr	r3, [r0, #28]
    957c:	428b      	cmp	r3, r1
    957e:	d36c      	bcc.n	965a <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
    9580:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9582:	2b20      	cmp	r3, #32
    9584:	d02d      	beq.n	95e2 <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
    9586:	2b10      	cmp	r3, #16
    9588:	d03e      	beq.n	9608 <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
    958a:	2b0c      	cmp	r3, #12
    958c:	d16c      	bne.n	9668 <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
    958e:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9592:	fa13 f381 	uxtah	r3, r3, r1
    9596:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9598:	f3c3 2346 	ubfx	r3, r3, #9, #7
    959c:	6982      	ldr	r2, [r0, #24]
    959e:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95a2:	7a03      	ldrb	r3, [r0, #8]
    95a4:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    95a6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    95aa:	bf14      	ite	ne
    95ac:	2201      	movne	r2, #1
    95ae:	2203      	moveq	r2, #3
    95b0:	4641      	mov	r1, r8
    95b2:	4648      	mov	r0, r9
    95b4:	f002 f971 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    95b8:	4601      	mov	r1, r0
    95ba:	2800      	cmp	r0, #0
    95bc:	d056      	beq.n	966c <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
    95be:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
    95c2:	f014 0401 	ands.w	r4, r4, #1
    95c6:	d055      	beq.n	9674 <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
    95c8:	5cc2      	ldrb	r2, [r0, r3]
    95ca:	f002 020f 	and.w	r2, r2, #15
    95ce:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
    95d2:	54c2      	strb	r2, [r0, r3]
    index++;
    95d4:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    95d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    95da:	d029      	beq.n	9630 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    95dc:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    95e0:	e054      	b.n	968c <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    95e2:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95e4:	7a03      	ldrb	r3, [r0, #8]
    95e6:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    95e8:	bf14      	ite	ne
    95ea:	2201      	movne	r2, #1
    95ec:	2203      	moveq	r2, #3
    95ee:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    95f2:	f500 700e 	add.w	r0, r0, #568	; 0x238
    95f6:	f002 f950 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    95fa:	b388      	cbz	r0, 9660 <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    95fc:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    95fe:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9602:	5105      	str	r5, [r0, r4]
    return true;
    9604:	2001      	movs	r0, #1
    9606:	e029      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9608:	f3c1 2107 	ubfx	r1, r1, #8, #8
    960c:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    960e:	7a02      	ldrb	r2, [r0, #8]
    9610:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    9612:	bf14      	ite	ne
    9614:	2201      	movne	r2, #1
    9616:	2203      	moveq	r2, #3
    9618:	4419      	add	r1, r3
    961a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    961e:	f002 f93c 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9622:	b1f8      	cbz	r0, 9664 <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9624:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    9626:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    962a:	5305      	strh	r5, [r0, r4]
    return true;
    962c:	2001      	movs	r0, #1
    962e:	e015      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9630:	7a33      	ldrb	r3, [r6, #8]
    9632:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9634:	bf14      	ite	ne
    9636:	2201      	movne	r2, #1
    9638:	2203      	moveq	r2, #3
    963a:	f108 0101 	add.w	r1, r8, #1
    963e:	4648      	mov	r0, r9
    9640:	f002 f92b 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9644:	4601      	mov	r1, r0
    9646:	b198      	cbz	r0, 9670 <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
    9648:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    964c:	b90c      	cbnz	r4, 9652 <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
    964e:	2300      	movs	r3, #0
    9650:	e017      	b.n	9682 <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
    9652:	2300      	movs	r3, #0
    9654:	e01a      	b.n	968c <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
    9656:	2000      	movs	r0, #0
}
    9658:	4770      	bx	lr
  return false;
    965a:	2000      	movs	r0, #0
}
    965c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9660:	2000      	movs	r0, #0
    9662:	e7fb      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9664:	2000      	movs	r0, #0
    9666:	e7f9      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9668:	2000      	movs	r0, #0
    966a:	e7f7      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    966c:	2000      	movs	r0, #0
    966e:	e7f5      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9670:	2000      	movs	r0, #0
    9672:	e7f3      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
    9674:	54c5      	strb	r5, [r0, r3]
    index++;
    9676:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    967c:	d0d8      	beq.n	9630 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    967e:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9682:	5cc8      	ldrb	r0, [r1, r3]
    9684:	f020 000f 	bic.w	r0, r0, #15
    9688:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
    968c:	54ca      	strb	r2, [r1, r3]
    return true;
    968e:	2001      	movs	r0, #1
    9690:	e7e4      	b.n	965c <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

00009692 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9692:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9696:	b083      	sub	sp, #12
    9698:	4605      	mov	r5, r0
    969a:	460e      	mov	r6, r1
    969c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    969e:	68c4      	ldr	r4, [r0, #12]
    96a0:	428c      	cmp	r4, r1
    96a2:	d30c      	bcc.n	96be <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
    96a4:	2701      	movs	r7, #1
      setStart = true;
    96a6:	f04f 0901 	mov.w	r9, #1
    find++;
    96aa:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    96ac:	69eb      	ldr	r3, [r5, #28]
    96ae:	42a3      	cmp	r3, r4
    96b0:	d20b      	bcs.n	96ca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
    96b2:	b13f      	cbz	r7, 96c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
    96b4:	2700      	movs	r7, #0
}
    96b6:	4638      	mov	r0, r7
    96b8:	b003      	add	sp, #12
    96ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
    96be:	460c      	mov	r4, r1
    setStart = false;
    96c0:	2700      	movs	r7, #0
    96c2:	e7f0      	b.n	96a6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
    96c4:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    96c6:	464f      	mov	r7, r9
    96c8:	e7ef      	b.n	96aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
    96ca:	42a6      	cmp	r6, r4
    96cc:	d0f2      	beq.n	96b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
    96ce:	aa01      	add	r2, sp, #4
    96d0:	4621      	mov	r1, r4
    96d2:	4628      	mov	r0, r5
    96d4:	f7ff febb 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    96d8:	2800      	cmp	r0, #0
    96da:	dbeb      	blt.n	96b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
    96dc:	2800      	cmp	r0, #0
    96de:	d0e4      	beq.n	96aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    96e0:	9b01      	ldr	r3, [sp, #4]
    96e2:	2b00      	cmp	r3, #0
    96e4:	d1e1      	bne.n	96aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    96e6:	b107      	cbz	r7, 96ea <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
    96e8:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
    96ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    96ee:	4621      	mov	r1, r4
    96f0:	4628      	mov	r0, r5
    96f2:	f7ff ff3b 	bl	956c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    96f6:	4607      	mov	r7, r0
    96f8:	2800      	cmp	r0, #0
    96fa:	d0dc      	beq.n	96b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
    96fc:	b93e      	cbnz	r6, 970e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
    96fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9700:	2b00      	cmp	r3, #0
    9702:	db01      	blt.n	9708 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
    9704:	3b01      	subs	r3, #1
    9706:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9708:	f8c8 4000 	str.w	r4, [r8]
  return true;
    970c:	e7d3      	b.n	96b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
    970e:	4622      	mov	r2, r4
    9710:	4631      	mov	r1, r6
    9712:	4628      	mov	r0, r5
    9714:	f7ff ff2a 	bl	956c <FatPartition::fatPut(unsigned long, unsigned long)>
    9718:	2800      	cmp	r0, #0
    971a:	d1f0      	bne.n	96fe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
    971c:	4607      	mov	r7, r0
    971e:	e7ca      	b.n	96b6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00009720 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9720:	b5f0      	push	{r4, r5, r6, r7, lr}
    9722:	b083      	sub	sp, #12
    9724:	4605      	mov	r5, r0
    9726:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
    9728:	2700      	movs	r7, #0
    972a:	e001      	b.n	9730 <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
    972c:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
    972e:	b1ce      	cbz	r6, 9764 <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
    9730:	aa01      	add	r2, sp, #4
    9732:	4621      	mov	r1, r4
    9734:	4628      	mov	r0, r5
    9736:	f7ff fe8a 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    973a:	1e06      	subs	r6, r0, #0
    973c:	db11      	blt.n	9762 <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
    973e:	463a      	mov	r2, r7
    9740:	4621      	mov	r1, r4
    9742:	4628      	mov	r0, r5
    9744:	f7ff ff12 	bl	956c <FatPartition::fatPut(unsigned long, unsigned long)>
    9748:	4602      	mov	r2, r0
    974a:	b158      	cbz	r0, 9764 <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
    974c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    974e:	2b00      	cmp	r3, #0
    9750:	db01      	blt.n	9756 <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
    9752:	3301      	adds	r3, #1
    9754:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9756:	68eb      	ldr	r3, [r5, #12]
    9758:	42a3      	cmp	r3, r4
    975a:	d9e7      	bls.n	972c <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
    975c:	3c01      	subs	r4, #1
    975e:	60ec      	str	r4, [r5, #12]
    9760:	e7e4      	b.n	972c <FatPartition::freeChain(unsigned long)+0xc>
  return false;
    9762:	2200      	movs	r2, #0
}
    9764:	4610      	mov	r0, r2
    9766:	b003      	add	sp, #12
    9768:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000976c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    976c:	b5f0      	push	{r4, r5, r6, r7, lr}
    976e:	b087      	sub	sp, #28
    9770:	4604      	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    9772:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9774:	2800      	cmp	r0, #0
    9776:	da45      	bge.n	9804 <FatPartition::freeClusterCount()+0x98>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    9778:	79e3      	ldrb	r3, [r4, #7]
    977a:	2b0c      	cmp	r3, #12
    977c:	d11e      	bne.n	97bc <FatPartition::freeClusterCount()+0x50>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    977e:	69e7      	ldr	r7, [r4, #28]
    9780:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    9782:	2b02      	cmp	r3, #2
    9784:	d917      	bls.n	97b6 <FatPartition::freeClusterCount()+0x4a>
    9786:	2502      	movs	r5, #2
    uint32_t free = 0;
    9788:	2600      	movs	r6, #0
    978a:	e006      	b.n	979a <FatPartition::freeClusterCount()+0x2e>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
    978c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9790:	e038      	b.n	9804 <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
    9792:	1c6b      	adds	r3, r5, #1
    9794:	42af      	cmp	r7, r5
    9796:	d00f      	beq.n	97b8 <FatPartition::freeClusterCount()+0x4c>
    9798:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
    979a:	aa03      	add	r2, sp, #12
    979c:	4629      	mov	r1, r5
    979e:	4620      	mov	r0, r4
    97a0:	f7ff fe55 	bl	944e <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    97a4:	2800      	cmp	r0, #0
    97a6:	dbf1      	blt.n	978c <FatPartition::freeClusterCount()+0x20>
      }
      if (fg && c == 0) {
    97a8:	2800      	cmp	r0, #0
    97aa:	d0f2      	beq.n	9792 <FatPartition::freeClusterCount()+0x26>
    97ac:	9b03      	ldr	r3, [sp, #12]
    97ae:	2b00      	cmp	r3, #0
    97b0:	d1ef      	bne.n	9792 <FatPartition::freeClusterCount()+0x26>
        free++;
    97b2:	3601      	adds	r6, #1
    97b4:	e7ed      	b.n	9792 <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
    97b6:	2600      	movs	r6, #0
      }
    }
    return free;
    97b8:	4630      	mov	r0, r6
    97ba:	e023      	b.n	9804 <FatPartition::freeClusterCount()+0x98>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    97bc:	2300      	movs	r3, #0
    97be:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
    97c0:	69e3      	ldr	r3, [r4, #28]
    97c2:	3301      	adds	r3, #1
    97c4:	9304      	str	r3, [sp, #16]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    97c6:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
    97c8:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    97cc:	f013 0f01 	tst.w	r3, #1
    97d0:	d11a      	bne.n	9808 <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
    97d2:	2300      	movs	r3, #0
    97d4:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    97d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    97dc:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
    97e0:	f504 7212 	add.w	r2, r4, #584	; 0x248
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    97e4:	79e3      	ldrb	r3, [r4, #7]
    97e6:	2b20      	cmp	r3, #32
    97e8:	d017      	beq.n	981a <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    97ea:	6820      	ldr	r0, [r4, #0]
    97ec:	6803      	ldr	r3, [r0, #0]
    97ee:	a904      	add	r1, sp, #16
    97f0:	9101      	str	r1, [sp, #4]
    97f2:	4913      	ldr	r1, [pc, #76]	; (9840 <FatPartition::freeClusterCount()+0xd4>)
    97f4:	9100      	str	r1, [sp, #0]
    97f6:	699e      	ldr	r6, [r3, #24]
    97f8:	462b      	mov	r3, r5
    97fa:	69a1      	ldr	r1, [r4, #24]
    97fc:	47b0      	blx	r6
    97fe:	b1d8      	cbz	r0, 9838 <FatPartition::freeClusterCount()+0xcc>
  }

  setFreeClusterCount(state.free_count);
    9800:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    9802:	6260      	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    9804:	b007      	add	sp, #28
    9806:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
    9808:	f504 700e 	add.w	r0, r4, #568	; 0x238
    980c:	f002 f81e 	bl	b84c <FsCache::sync()>
    9810:	2800      	cmp	r0, #0
    9812:	d1de      	bne.n	97d2 <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
    9814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9818:	e7f4      	b.n	9804 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    981a:	6820      	ldr	r0, [r4, #0]
    981c:	6803      	ldr	r3, [r0, #0]
    981e:	a904      	add	r1, sp, #16
    9820:	9101      	str	r1, [sp, #4]
    9822:	4908      	ldr	r1, [pc, #32]	; (9844 <FatPartition::freeClusterCount()+0xd8>)
    9824:	9100      	str	r1, [sp, #0]
    9826:	699e      	ldr	r6, [r3, #24]
    9828:	462b      	mov	r3, r5
    982a:	69a1      	ldr	r1, [r4, #24]
    982c:	47b0      	blx	r6
    982e:	2800      	cmp	r0, #0
    9830:	d1e6      	bne.n	9800 <FatPartition::freeClusterCount()+0x94>
    9832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9836:	e7e5      	b.n	9804 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    983c:	e7e2      	b.n	9804 <FatPartition::freeClusterCount()+0x98>
    983e:	bf00      	nop
    9840:	000093e1 	.word	0x000093e1
    9844:	00009419 	.word	0x00009419

00009848 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9848:	b570      	push	{r4, r5, r6, lr}
    984a:	4604      	mov	r4, r0
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    984c:	6001      	str	r1, [r0, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    984e:	2300      	movs	r3, #0
    9850:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    9852:	2001      	movs	r0, #1
    9854:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
    9856:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
    985a:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
    985c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9864:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    9866:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    986a:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    986e:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9872:	b1e2      	cbz	r2, 98ae <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    9874:	4616      	mov	r6, r2
    if (part > 4) {
    9876:	2a04      	cmp	r2, #4
    9878:	d901      	bls.n	987e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    987a:	2000      	movs	r0, #0
}
    987c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    987e:	461a      	mov	r2, r3
    9880:	4619      	mov	r1, r3
    9882:	4628      	mov	r0, r5
    9884:	f002 f809 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    9888:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    988c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9890:	4433      	add	r3, r6
    9892:	011e      	lsls	r6, r3, #4
    9894:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    9898:	2800      	cmp	r0, #0
    989a:	d06a      	beq.n	9972 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
    989c:	7919      	ldrb	r1, [r3, #4]
    989e:	2900      	cmp	r1, #0
    98a0:	d069      	beq.n	9976 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
    98a2:	5d92      	ldrb	r2, [r2, r6]
    98a4:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    98a8:	d167      	bne.n	997a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
    98aa:	689e      	ldr	r6, [r3, #8]
    98ac:	e000      	b.n	98b0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
    98ae:	2600      	movs	r6, #0
    98b0:	2200      	movs	r2, #0
    98b2:	4631      	mov	r1, r6
    98b4:	4628      	mov	r0, r5
    98b6:	f001 fff0 	bl	b89a <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    98ba:	4601      	mov	r1, r0
    98bc:	2800      	cmp	r0, #0
    98be:	d05e      	beq.n	997e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
    98c0:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    98c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    98c8:	d15b      	bne.n	9982 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
    98ca:	7c03      	ldrb	r3, [r0, #16]
    98cc:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    98ce:	3b01      	subs	r3, #1
    98d0:	b2db      	uxtb	r3, r3
    98d2:	2b01      	cmp	r3, #1
    98d4:	d857      	bhi.n	9986 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    98d6:	7b40      	ldrb	r0, [r0, #13]
    98d8:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    98da:	1e43      	subs	r3, r0, #1
    98dc:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    98de:	2300      	movs	r3, #0
    98e0:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    98e2:	2801      	cmp	r0, #1
    98e4:	d00d      	beq.n	9902 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
    98e6:	2200      	movs	r2, #0
    98e8:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
    98ea:	3201      	adds	r2, #1
    98ec:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    98ee:	005b      	lsls	r3, r3, #1
    98f0:	b2db      	uxtb	r3, r3
    98f2:	4298      	cmp	r0, r3
    98f4:	d004      	beq.n	9900 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
    98f6:	2b00      	cmp	r3, #0
    98f8:	d1f7      	bne.n	98ea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    98fa:	71a2      	strb	r2, [r4, #6]
  return false;
    98fc:	2000      	movs	r0, #0
    98fe:	e7bd      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9900:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9902:	8acb      	ldrh	r3, [r1, #22]
    9904:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9906:	b90b      	cbnz	r3, 990c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
    9908:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    990a:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    990c:	89cb      	ldrh	r3, [r1, #14]
    990e:	4433      	add	r3, r6
    9910:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
    9912:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9916:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9918:	6920      	ldr	r0, [r4, #16]
    991a:	7c0d      	ldrb	r5, [r1, #16]
    991c:	fb00 3305 	mla	r3, r0, r5, r3
    9920:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9922:	0152      	lsls	r2, r2, #5
    9924:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
    9928:	eb03 2352 	add.w	r3, r3, r2, lsr #9
    992c:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
    992e:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
    9932:	b902      	cbnz	r2, 9936 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
    9934:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9936:	1af3      	subs	r3, r6, r3
    9938:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
    993a:	79a2      	ldrb	r2, [r4, #6]
    993c:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
    993e:	1c5a      	adds	r2, r3, #1
    9940:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9946:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9948:	f640 72f4 	movw	r2, #4084	; 0xff4
    994c:	4293      	cmp	r3, r2
    994e:	d907      	bls.n	9960 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9950:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    9954:	4293      	cmp	r3, r2
    9956:	d90a      	bls.n	996e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
    9958:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    995a:	6223      	str	r3, [r4, #32]
    995c:	2320      	movs	r3, #32
    995e:	e000      	b.n	9962 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
    9960:	230c      	movs	r3, #12
    m_fatType = 12;
    9962:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9964:	6320      	str	r0, [r4, #48]	; 0x30
    9966:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
    996a:	2001      	movs	r0, #1
    996c:	e786      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    996e:	2310      	movs	r3, #16
    9970:	e7f7      	b.n	9962 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
    9972:	2000      	movs	r0, #0
    9974:	e782      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9976:	2000      	movs	r0, #0
    9978:	e780      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    997a:	2000      	movs	r0, #0
    997c:	e77e      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    997e:	2000      	movs	r0, #0
    9980:	e77c      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9982:	2000      	movs	r0, #0
    9984:	e77a      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9986:	2000      	movs	r0, #0
    9988:	e778      	b.n	987c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

0000998a <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    998a:	b538      	push	{r3, r4, r5, lr}
    998c:	4604      	mov	r4, r0
    998e:	460d      	mov	r5, r1
    9990:	2300      	movs	r3, #0
    9992:	6383      	str	r3, [r0, #56]	; 0x38
    9994:	63c3      	str	r3, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    9996:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    9998:	b1ab      	cbz	r3, 99c6 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
    999a:	4601      	mov	r1, r0
    999c:	2024      	movs	r0, #36	; 0x24
    999e:	f000 f8b3 	bl	9b08 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    99a2:	2300      	movs	r3, #0
    99a4:	7003      	strb	r3, [r0, #0]
    99a6:	7043      	strb	r3, [r0, #1]
    99a8:	7083      	strb	r3, [r0, #2]
    99aa:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    99ac:	4684      	mov	ip, r0
    99ae:	6bad      	ldr	r5, [r5, #56]	; 0x38
    99b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    99b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    99b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    99b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    99bc:	682b      	ldr	r3, [r5, #0]
    99be:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    99c2:	4620      	mov	r0, r4
    99c4:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
    99c6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    99c8:	2b00      	cmp	r3, #0
    99ca:	d0fa      	beq.n	99c2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
    99cc:	4601      	mov	r1, r0
    99ce:	2038      	movs	r0, #56	; 0x38
    99d0:	f000 f89a 	bl	9b08 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    99d4:	2300      	movs	r3, #0
    99d6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    99da:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    99de:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    99e2:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    99e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    99e6:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    99ea:	f8d3 c000 	ldr.w	ip, [r3]
    99ee:	685d      	ldr	r5, [r3, #4]
    99f0:	6899      	ldr	r1, [r3, #8]
    99f2:	68da      	ldr	r2, [r3, #12]
    99f4:	f8c0 c000 	str.w	ip, [r0]
    99f8:	6045      	str	r5, [r0, #4]
    99fa:	6081      	str	r1, [r0, #8]
    99fc:	60c2      	str	r2, [r0, #12]
    99fe:	3310      	adds	r3, #16
    9a00:	3010      	adds	r0, #16
    9a02:	4573      	cmp	r3, lr
    9a04:	d1f1      	bne.n	99ea <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
    9a06:	681b      	ldr	r3, [r3, #0]
    9a08:	6003      	str	r3, [r0, #0]
    9a0a:	e7da      	b.n	99c2 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

00009a0c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    9a0c:	b510      	push	{r4, lr}
    9a0e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9a10:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9a12:	b110      	cbz	r0, 9a1a <FsBaseFile::close()+0xe>
    9a14:	f7fe f844 	bl	7aa0 <FatFile::close()>
    9a18:	b938      	cbnz	r0, 9a2a <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9a1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9a1c:	b140      	cbz	r0, 9a30 <FsBaseFile::close()+0x24>
    9a1e:	f7fb fcbf 	bl	53a0 <ExFatFile::close()>
    9a22:	b130      	cbz	r0, 9a32 <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
    9a24:	2300      	movs	r3, #0
    9a26:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9a28:	e003      	b.n	9a32 <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
    9a2a:	2300      	movs	r3, #0
    9a2c:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9a2e:	e000      	b.n	9a32 <FsBaseFile::close()+0x26>
  }
  return false;
    9a30:	2000      	movs	r0, #0
}
    9a32:	bd10      	pop	{r4, pc}

00009a34 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9a34:	b3a1      	cbz	r1, 9aa0 <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a38:	4604      	mov	r4, r0
    9a3a:	4617      	mov	r7, r2
    9a3c:	461e      	mov	r6, r3
    9a3e:	460d      	mov	r5, r1
    return false;
  }
  close();
    9a40:	f7ff ffe4 	bl	9a0c <FsBaseFile::close()>
  if (vol->m_fVol) {
    9a44:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    9a48:	b18b      	cbz	r3, 9a6e <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    9a4a:	4621      	mov	r1, r4
    9a4c:	2024      	movs	r0, #36	; 0x24
    9a4e:	f000 f85b 	bl	9b08 <operator new(unsigned int, unsigned long*)>
    9a52:	2300      	movs	r3, #0
    9a54:	7003      	strb	r3, [r0, #0]
    9a56:	7043      	strb	r3, [r0, #1]
    9a58:	7083      	strb	r3, [r0, #2]
    9a5a:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9a5c:	4633      	mov	r3, r6
    9a5e:	463a      	mov	r2, r7
    9a60:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9a64:	f7fe f889 	bl	7b7a <FatFile::open(FatVolume*, char const*, int)>
    9a68:	b900      	cbnz	r0, 9a6c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
    9a6a:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
    9a6e:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9a72:	b1bb      	cbz	r3, 9aa4 <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
    9a74:	4621      	mov	r1, r4
    9a76:	2038      	movs	r0, #56	; 0x38
    9a78:	f000 f846 	bl	9b08 <operator new(unsigned int, unsigned long*)>
    9a7c:	2200      	movs	r2, #0
    9a7e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9a82:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9a86:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9a8a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9a8c:	4633      	mov	r3, r6
    9a8e:	463a      	mov	r2, r7
    9a90:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    9a94:	f7fc f8cd 	bl	5c32 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9a98:	2800      	cmp	r0, #0
    9a9a:	d1e7      	bne.n	9a6c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
    9a9c:	63e0      	str	r0, [r4, #60]	; 0x3c
    9a9e:	e7e5      	b.n	9a6c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
    9aa0:	2000      	movs	r0, #0
}
    9aa2:	4770      	bx	lr
  return false;
    9aa4:	2000      	movs	r0, #0
    9aa6:	e7e1      	b.n	9a6c <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

00009aa8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9aa8:	b570      	push	{r4, r5, r6, lr}
    9aaa:	4605      	mov	r5, r0
    9aac:	460c      	mov	r4, r1
    9aae:	4616      	mov	r6, r2
  close();
    9ab0:	f7ff ffac 	bl	9a0c <FsBaseFile::close()>
  if (dir->m_fFile) {
    9ab4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9ab6:	b17b      	cbz	r3, 9ad8 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
    9ab8:	4629      	mov	r1, r5
    9aba:	2024      	movs	r0, #36	; 0x24
    9abc:	f000 f824 	bl	9b08 <operator new(unsigned int, unsigned long*)>
    9ac0:	2100      	movs	r1, #0
    9ac2:	7001      	strb	r1, [r0, #0]
    9ac4:	7041      	strb	r1, [r0, #1]
    9ac6:	7081      	strb	r1, [r0, #2]
    9ac8:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9aca:	4632      	mov	r2, r6
    9acc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9ace:	f7fd ff33 	bl	7938 <FatFile::openNext(FatFile*, int)>
    9ad2:	b900      	cbnz	r0, 9ad6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
    9ad4:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9ad6:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
    9ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9ada:	b19b      	cbz	r3, 9b04 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    9adc:	4629      	mov	r1, r5
    9ade:	2038      	movs	r0, #56	; 0x38
    9ae0:	f000 f812 	bl	9b08 <operator new(unsigned int, unsigned long*)>
    9ae4:	2200      	movs	r2, #0
    9ae6:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9aea:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9aee:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9af2:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9af4:	4632      	mov	r2, r6
    9af6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9af8:	f7fc f8a4 	bl	5c44 <ExFatFile::openNext(ExFatFile*, int)>
    9afc:	2800      	cmp	r0, #0
    9afe:	d1ea      	bne.n	9ad6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
    9b00:	63e8      	str	r0, [r5, #60]	; 0x3c
    9b02:	e7e8      	b.n	9ad6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
    9b04:	2000      	movs	r0, #0
    9b06:	e7e6      	b.n	9ad6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

00009b08 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9b08:	4608      	mov	r0, r1
    9b0a:	4770      	bx	lr

00009b0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b10:	4604      	mov	r4, r0
    9b12:	4690      	mov	r8, r2
    9b14:	461f      	mov	r7, r3
  m_blockDev = blockDev;
    9b16:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9b1a:	2600      	movs	r6, #0
    9b1c:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9b20:	4601      	mov	r1, r0
    9b22:	f44f 6090 	mov.w	r0, #1152	; 0x480
    9b26:	f7ff ffef 	bl	9b08 <operator new(unsigned int, unsigned long*)>
    9b2a:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    9b2c:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9b30:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9b34:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    9b38:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    9b3c:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9b40:	463a      	mov	r2, r7
    9b42:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9b46:	f7fd fbcd 	bl	72e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9b4a:	bb00      	cbnz	r0, 9b8e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9b4c:	2500      	movs	r5, #0
    9b4e:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9b52:	4621      	mov	r1, r4
    9b54:	f240 406c 	movw	r0, #1132	; 0x46c
    9b58:	f7ff ffd6 	bl	9b08 <operator new(unsigned int, unsigned long*)>
    9b5c:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    9b5e:	71c5      	strb	r5, [r0, #7]
    9b60:	2302      	movs	r3, #2
    9b62:	7203      	strb	r3, [r0, #8]
    9b64:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
    9b68:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
    9b6c:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
    9b70:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9b74:	463a      	mov	r2, r7
    9b76:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9b7a:	f7ff fe65 	bl	9848 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9b7e:	b9f8      	cbnz	r0, 9bc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    9b80:	2000      	movs	r0, #0
    9b82:	4b1a      	ldr	r3, [pc, #104]	; (9bec <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9b84:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
    9b86:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    9b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9b8e:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9b92:	4630      	mov	r0, r6
    9b94:	f7fb fc04 	bl	53a0 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    9b98:	4629      	mov	r1, r5
    9b9a:	4630      	mov	r0, r6
    9b9c:	f7fb fc2e 	bl	53fc <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    9ba0:	2800      	cmp	r0, #0
    9ba2:	d0d3      	beq.n	9b4c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
    9ba4:	4b12      	ldr	r3, [pc, #72]	; (9bf0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    9ba6:	681b      	ldr	r3, [r3, #0]
    9ba8:	b13b      	cbz	r3, 9bba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
    9baa:	f1b8 0f00 	cmp.w	r8, #0
    9bae:	d119      	bne.n	9be4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
    9bb0:	4b0e      	ldr	r3, [pc, #56]	; (9bec <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9bb2:	681b      	ldr	r3, [r3, #0]
    9bb4:	b1b3      	cbz	r3, 9be4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
    9bb6:	2001      	movs	r0, #1
    9bb8:	e7e7      	b.n	9b8a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
    9bba:	4b0d      	ldr	r3, [pc, #52]	; (9bf0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    9bbc:	601d      	str	r5, [r3, #0]
    9bbe:	e7f4      	b.n	9baa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    9bc0:	f506 6589 	add.w	r5, r6, #1096	; 0x448
    9bc4:	4628      	mov	r0, r5
    9bc6:	f7fd ff6b 	bl	7aa0 <FatFile::close()>
    return m_vwd.openRoot(this);
    9bca:	4631      	mov	r1, r6
    9bcc:	4628      	mov	r0, r5
    9bce:	f7fd fc88 	bl	74e2 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    9bd2:	2800      	cmp	r0, #0
    9bd4:	d0d4      	beq.n	9b80 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
    9bd6:	4b07      	ldr	r3, [pc, #28]	; (9bf4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    9bd8:	681b      	ldr	r3, [r3, #0]
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d1e5      	bne.n	9baa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
    9bde:	4b05      	ldr	r3, [pc, #20]	; (9bf4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    9be0:	601e      	str	r6, [r3, #0]
    9be2:	e7e2      	b.n	9baa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
    9be4:	4b01      	ldr	r3, [pc, #4]	; (9bec <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9be6:	601c      	str	r4, [r3, #0]
  return true;
    9be8:	2001      	movs	r0, #1
    9bea:	e7ce      	b.n	9b8a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
    9bec:	20004ba4 	.word	0x20004ba4
    9bf0:	20004b70 	.word	0x20004b70
    9bf4:	20004bb0 	.word	0x20004bb0

00009bf8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9bf8:	b538      	push	{r3, r4, r5, lr}
    9bfa:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    9bfc:	2000      	movs	r0, #0
    9bfe:	6060      	str	r0, [r4, #4]
    9c00:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    9c04:	60a5      	str	r5, [r4, #8]
    9c06:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
    9c08:	64a0      	str	r0, [r4, #72]	; 0x48
    9c0a:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9c0c:	4620      	mov	r0, r4
    9c0e:	4d03      	ldr	r5, [pc, #12]	; (9c1c <FsVolume::open(char const*, int)+0x24>)
    9c10:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9c14:	f7ff ff0e 	bl	9a34 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    9c18:	4620      	mov	r0, r4
    9c1a:	bd38      	pop	{r3, r4, r5, pc}
    9c1c:	200022d0 	.word	0x200022d0

00009c20 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c24:	4770      	bx	lr

00009c26 <SharedSpiCard::errorCode() const>:
  }
    9c26:	7c40      	ldrb	r0, [r0, #17]
    9c28:	4770      	bx	lr

00009c2a <SharedSpiCard::errorData() const>:
  }
    9c2a:	7d00      	ldrb	r0, [r0, #20]
    9c2c:	4770      	bx	lr

00009c2e <SharedSpiCard::type() const>:
  }
    9c2e:	7d40      	ldrb	r0, [r0, #21]
    9c30:	4770      	bx	lr

00009c32 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9c32:	2001      	movs	r0, #1
    9c34:	4770      	bx	lr

00009c36 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9c36:	7f00      	ldrb	r0, [r0, #28]
    9c38:	4770      	bx	lr

00009c3a <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    9c3a:	b500      	push	{lr}
    9c3c:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    9c3e:	6803      	ldr	r3, [r0, #0]
    9c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9c42:	4669      	mov	r1, sp
    9c44:	4798      	blx	r3
    9c46:	b3b0      	cbz	r0, 9cb6 <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    9c48:	f89d 3000 	ldrb.w	r3, [sp]
    9c4c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    9c50:	d003      	beq.n	9c5a <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    9c52:	2b40      	cmp	r3, #64	; 0x40
    9c54:	d020      	beq.n	9c98 <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    9c56:	2000      	movs	r0, #0
    9c58:	e02e      	b.n	9cb8 <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9c5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c5e:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9c62:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9c66:	0080      	lsls	r0, r0, #2
    9c68:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    9c6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9c70:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c74:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9c76:	f89d 3009 	ldrb.w	r3, [sp, #9]
    9c7a:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9c7e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    9c82:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c84:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9c88:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c8c:	f002 020f 	and.w	r2, r2, #15
    9c90:	4413      	add	r3, r2
    9c92:	3b07      	subs	r3, #7
    9c94:	4098      	lsls	r0, r3
    9c96:	e00f      	b.n	9cb8 <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9ca0:	f89d 0009 	ldrb.w	r0, [sp, #9]
    9ca4:	3001      	adds	r0, #1
    9ca6:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    9caa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    9cae:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    9cb2:	0280      	lsls	r0, r0, #10
    9cb4:	e000      	b.n	9cb8 <SharedSpiCard::sectorCount()+0x7e>
    9cb6:	2000      	movs	r0, #0
}
    9cb8:	b005      	add	sp, #20
    9cba:	f85d fb04 	ldr.w	pc, [sp], #4

00009cbe <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    9cbe:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
    9cc0:	6803      	ldr	r3, [r0, #0]
    9cc2:	695c      	ldr	r4, [r3, #20]
    9cc4:	2301      	movs	r3, #1
    9cc6:	47a0      	blx	r4
}
    9cc8:	bd10      	pop	{r4, pc}

00009cca <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9cca:	b538      	push	{r3, r4, r5, lr}
    9ccc:	4604      	mov	r4, r0
    9cce:	460d      	mov	r5, r1
  if (!syncDevice()) {
    9cd0:	6803      	ldr	r3, [r0, #0]
    9cd2:	6a1b      	ldr	r3, [r3, #32]
    9cd4:	4798      	blx	r3
    9cd6:	b100      	cbz	r0, 9cda <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    9cd8:	7725      	strb	r5, [r4, #28]
  return true;
}
    9cda:	bd38      	pop	{r3, r4, r5, pc}

00009cdc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    9cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cde:	4605      	mov	r5, r0
    9ce0:	460e      	mov	r6, r1
    9ce2:	4614      	mov	r4, r2
    9ce4:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9ce6:	7cc3      	ldrb	r3, [r0, #19]
    9ce8:	2b02      	cmp	r3, #2
    9cea:	d021      	beq.n	9d30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
    9cec:	682b      	ldr	r3, [r5, #0]
    9cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9cf0:	4631      	mov	r1, r6
    9cf2:	4628      	mov	r0, r5
    9cf4:	4798      	blx	r3
    9cf6:	4603      	mov	r3, r0
    9cf8:	b1c0      	cbz	r0, 9d2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
    9cfa:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    9cfc:	b167      	cbz	r7, 9d18 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
    9cfe:	2600      	movs	r6, #0
    if (!writeData(src)) {
    9d00:	682a      	ldr	r2, [r5, #0]
    9d02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    9d04:	4621      	mov	r1, r4
    9d06:	4628      	mov	r0, r5
    9d08:	4790      	blx	r2
    9d0a:	4603      	mov	r3, r0
    9d0c:	b170      	cbz	r0, 9d2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
    9d0e:	3601      	adds	r6, #1
    9d10:	f504 7400 	add.w	r4, r4, #512	; 0x200
    9d14:	42b7      	cmp	r7, r6
    9d16:	d1f3      	bne.n	9d00 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
    9d18:	69ab      	ldr	r3, [r5, #24]
    9d1a:	443b      	add	r3, r7
    9d1c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9d1e:	7f2b      	ldrb	r3, [r5, #28]
    9d20:	b923      	cbnz	r3, 9d2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    9d22:	682b      	ldr	r3, [r5, #0]
    9d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9d26:	4628      	mov	r0, r5
    9d28:	4798      	blx	r3
    9d2a:	4603      	mov	r3, r0

fail:
  return false;
}
    9d2c:	4618      	mov	r0, r3
    9d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9d30:	6983      	ldr	r3, [r0, #24]
    9d32:	428b      	cmp	r3, r1
    9d34:	d1da      	bne.n	9cec <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    9d36:	e7e1      	b.n	9cfc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009d38 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d3c:	4605      	mov	r5, r0
    9d3e:	460c      	mov	r4, r1
    9d40:	4692      	mov	sl, r2
    9d42:	461f      	mov	r7, r3
    9d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9d48:	7cc3      	ldrb	r3, [r0, #19]
    9d4a:	2b02      	cmp	r3, #2
    9d4c:	d026      	beq.n	9d9c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
    9d4e:	682b      	ldr	r3, [r5, #0]
    9d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9d52:	4621      	mov	r1, r4
    9d54:	4628      	mov	r0, r5
    9d56:	4798      	blx	r3
    9d58:	4603      	mov	r3, r0
    9d5a:	b1e0      	cbz	r0, 9d96 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
    9d5c:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    9d5e:	f1ba 0f00 	cmp.w	sl, #0
    9d62:	d00e      	beq.n	9d82 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    9d64:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
    9d68:	4641      	mov	r1, r8
    9d6a:	4620      	mov	r0, r4
    9d6c:	47b8      	blx	r7
    9d6e:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9d70:	682b      	ldr	r3, [r5, #0]
    9d72:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    9d74:	4628      	mov	r0, r5
    9d76:	47b0      	blx	r6
    9d78:	4603      	mov	r3, r0
    9d7a:	b160      	cbz	r0, 9d96 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
    9d7c:	3401      	adds	r4, #1
    9d7e:	45a1      	cmp	r9, r4
    9d80:	d1f2      	bne.n	9d68 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
    9d82:	69ab      	ldr	r3, [r5, #24]
    9d84:	4453      	add	r3, sl
    9d86:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9d88:	7f2b      	ldrb	r3, [r5, #28]
    9d8a:	b923      	cbnz	r3, 9d96 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
    9d8c:	682b      	ldr	r3, [r5, #0]
    9d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9d90:	4628      	mov	r0, r5
    9d92:	4798      	blx	r3
    9d94:	4603      	mov	r3, r0

 fail:
  return false;
}
    9d96:	4618      	mov	r0, r3
    9d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9d9c:	6983      	ldr	r3, [r0, #24]
    9d9e:	428b      	cmp	r3, r1
    9da0:	d1d5      	bne.n	9d4e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
    9da2:	e7dc      	b.n	9d5e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

00009da4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9da4:	4770      	bx	lr

00009da6 <SharedSpiCard::end()>:
  void end() {
    9da6:	b508      	push	{r3, lr}
    m_spiDriver.end();
    9da8:	3004      	adds	r0, #4
    9daa:	f001 fcfd 	bl	b7a8 <SdSpiArduinoDriver::end()>
  }
    9dae:	bd08      	pop	{r3, pc}

00009db0 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9db0:	b510      	push	{r4, lr}
    9db2:	4604      	mov	r4, r0
    9db4:	2120      	movs	r1, #32
    9db6:	f003 f9b9 	bl	d12c <operator delete(void*, unsigned int)>
    9dba:	4620      	mov	r0, r4
    9dbc:	bd10      	pop	{r4, pc}

00009dbe <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    9dbe:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    9dc0:	7c83      	ldrb	r3, [r0, #18]
    9dc2:	b103      	cbz	r3, 9dc6 <SharedSpiCard::spiStart()+0x8>
}
    9dc4:	bd38      	pop	{r3, r4, r5, pc}
    9dc6:	4604      	mov	r4, r0
    m_spiDriver.activate();
    9dc8:	1d05      	adds	r5, r0, #4
    9dca:	4628      	mov	r0, r5
    9dcc:	f001 fc14 	bl	b5f8 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9dd0:	2100      	movs	r1, #0
    9dd2:	7c20      	ldrb	r0, [r4, #16]
    9dd4:	f001 fc0c 	bl	b5f0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9dd8:	21ff      	movs	r1, #255	; 0xff
    9dda:	4628      	mov	r0, r5
    9ddc:	f001 fd05 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    9de0:	2301      	movs	r3, #1
    9de2:	74a3      	strb	r3, [r4, #18]
}
    9de4:	e7ee      	b.n	9dc4 <SharedSpiCard::spiStart()+0x6>

00009de6 <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    9de6:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    9de8:	7c83      	ldrb	r3, [r0, #18]
    9dea:	b903      	cbnz	r3, 9dee <SharedSpiCard::spiStop()+0x8>
}
    9dec:	bd38      	pop	{r3, r4, r5, pc}
    9dee:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
    9df0:	2101      	movs	r1, #1
    9df2:	7c00      	ldrb	r0, [r0, #16]
    9df4:	f001 fbfc 	bl	b5f0 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9df8:	1d25      	adds	r5, r4, #4
    9dfa:	21ff      	movs	r1, #255	; 0xff
    9dfc:	4628      	mov	r0, r5
    9dfe:	f001 fcf4 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9e02:	4628      	mov	r0, r5
    9e04:	f001 fca0 	bl	b748 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9e08:	2300      	movs	r3, #0
    9e0a:	74a3      	strb	r3, [r4, #18]
}
    9e0c:	e7ee      	b.n	9dec <SharedSpiCard::spiStop()+0x6>

00009e0e <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    9e0e:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    9e10:	7cc3      	ldrb	r3, [r0, #19]
    9e12:	2b01      	cmp	r3, #1
    9e14:	d018      	beq.n	9e48 <SharedSpiCard::isBusy()+0x3a>
    9e16:	4604      	mov	r4, r0
  if (!spiActive) {
    9e18:	7c83      	ldrb	r3, [r0, #18]
    9e1a:	b143      	cbz	r3, 9e2e <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
    9e1c:	3004      	adds	r0, #4
    9e1e:	f001 fcc8 	bl	b7b2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9e22:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9e26:	bf18      	it	ne
    9e28:	2501      	movne	r5, #1
}
    9e2a:	4628      	mov	r0, r5
    9e2c:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
    9e2e:	f7ff ffc6 	bl	9dbe <SharedSpiCard::spiStart()>
    9e32:	1d20      	adds	r0, r4, #4
    9e34:	f001 fcbd 	bl	b7b2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9e38:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9e3c:	bf18      	it	ne
    9e3e:	2501      	movne	r5, #1
    spiStop();
    9e40:	4620      	mov	r0, r4
    9e42:	f7ff ffd0 	bl	9de6 <SharedSpiCard::spiStop()>
    9e46:	e7f0      	b.n	9e2a <SharedSpiCard::isBusy()+0x1c>
    return false;
    9e48:	2500      	movs	r5, #0
    9e4a:	e7ee      	b.n	9e2a <SharedSpiCard::isBusy()+0x1c>

00009e4c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    9e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e50:	4604      	mov	r4, r0
    9e52:	4688      	mov	r8, r1
    9e54:	4691      	mov	r9, r2
    9e56:	4b17      	ldr	r3, [pc, #92]	; (9eb4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
    9e58:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
    9e5a:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    9e5e:	b2ad      	uxth	r5, r5
    9e60:	1d06      	adds	r6, r0, #4
    9e62:	461f      	mov	r7, r3
    9e64:	4630      	mov	r0, r6
    9e66:	f001 fca4 	bl	b7b2 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9e6a:	7520      	strb	r0, [r4, #20]
    9e6c:	28ff      	cmp	r0, #255	; 0xff
    9e6e:	d10c      	bne.n	9e8a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
    9e70:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9e72:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9e74:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9e78:	d0f4      	beq.n	9e64 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    9e7a:	231d      	movs	r3, #29
    m_errorCode = code;
    9e7c:	7463      	strb	r3, [r4, #17]
  spiStop();
    9e7e:	4620      	mov	r0, r4
    9e80:	f7ff ffb1 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    9e84:	2000      	movs	r0, #0
}
    9e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
    9e8a:	28fe      	cmp	r0, #254	; 0xfe
    9e8c:	d001      	beq.n	9e92 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    9e8e:	2318      	movs	r3, #24
    9e90:	e7f4      	b.n	9e7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
    9e92:	464a      	mov	r2, r9
    9e94:	4641      	mov	r1, r8
    9e96:	4630      	mov	r0, r6
    9e98:	f001 fc97 	bl	b7ca <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    9e9c:	7520      	strb	r0, [r4, #20]
    9e9e:	b108      	cbz	r0, 9ea4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
    9ea0:	2325      	movs	r3, #37	; 0x25
    9ea2:	e7eb      	b.n	9e7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
    9ea4:	4630      	mov	r0, r6
    9ea6:	f001 fc84 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    9eaa:	4630      	mov	r0, r6
    9eac:	f001 fc81 	bl	b7b2 <SdSpiArduinoDriver::receive()>
  return true;
    9eb0:	2001      	movs	r0, #1
    9eb2:	e7e8      	b.n	9e86 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
    9eb4:	200052f0 	.word	0x200052f0

00009eb8 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
    9eb8:	b508      	push	{r3, lr}
  return readData(dst, 512);
    9eba:	f44f 7200 	mov.w	r2, #512	; 0x200
    9ebe:	f7ff ffc5 	bl	9e4c <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
    9ec2:	bd08      	pop	{r3, pc}

00009ec4 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    9ec4:	b570      	push	{r4, r5, r6, lr}
    9ec6:	4b0a      	ldr	r3, [pc, #40]	; (9ef0 <SharedSpiCard::waitReady(unsigned short)+0x2c>)
    9ec8:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
    9eca:	440c      	add	r4, r1
    9ecc:	b2a4      	uxth	r4, r4
    9ece:	1d05      	adds	r5, r0, #4
    9ed0:	461e      	mov	r6, r3
    9ed2:	4628      	mov	r0, r5
    9ed4:	f001 fc6d 	bl	b7b2 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9ed8:	28ff      	cmp	r0, #255	; 0xff
    9eda:	d006      	beq.n	9eea <SharedSpiCard::waitReady(unsigned short)+0x26>
    9edc:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9ede:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    9ee0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    9ee4:	d0f5      	beq.n	9ed2 <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
    9ee6:	2000      	movs	r0, #0
    9ee8:	e000      	b.n	9eec <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
    9eea:	2001      	movs	r0, #1
}
    9eec:	bd70      	pop	{r4, r5, r6, pc}
    9eee:	bf00      	nop
    9ef0:	200052f0 	.word	0x200052f0

00009ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ef8:	b082      	sub	sp, #8
    9efa:	4605      	mov	r5, r0
    9efc:	460f      	mov	r7, r1
    9efe:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
    9f00:	6803      	ldr	r3, [r0, #0]
    9f02:	6a1b      	ldr	r3, [r3, #32]
    9f04:	4798      	blx	r3
    9f06:	2800      	cmp	r0, #0
    9f08:	d03b      	beq.n	9f82 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
    9f0a:	7cab      	ldrb	r3, [r5, #18]
    9f0c:	b3ab      	cbz	r3, 9f7a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
    9f0e:	2f0c      	cmp	r7, #12
    9f10:	d00a      	beq.n	9f28 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    9f12:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9f16:	4628      	mov	r0, r5
    9f18:	f7ff ffd4 	bl	9ec4 <SharedSpiCard::waitReady(unsigned short)>
    9f1c:	b127      	cbz	r7, 9f28 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    9f1e:	f080 0001 	eor.w	r0, r0, #1
    9f22:	f010 0fff 	tst.w	r0, #255	; 0xff
    9f26:	d12e      	bne.n	9f86 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
    9f28:	1d2e      	adds	r6, r5, #4
    9f2a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    9f2e:	4630      	mov	r0, r6
    9f30:	f001 fc5b 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    9f34:	f10d 0804 	add.w	r8, sp, #4
    9f38:	ac02      	add	r4, sp, #8
    9f3a:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9f3e:	4630      	mov	r0, r6
    9f40:	f001 fc53 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    9f44:	4544      	cmp	r4, r8
    9f46:	d1f8      	bne.n	9f3a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9f48:	2f00      	cmp	r7, #0
    9f4a:	bf0c      	ite	eq
    9f4c:	2195      	moveq	r1, #149	; 0x95
    9f4e:	2187      	movne	r1, #135	; 0x87
    9f50:	4630      	mov	r0, r6
    9f52:	f001 fc4a 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9f56:	4630      	mov	r0, r6
    9f58:	f001 fc2b 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    9f5c:	240a      	movs	r4, #10
    9f5e:	4630      	mov	r0, r6
    9f60:	f001 fc27 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
    9f64:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
    9f66:	f010 0f80 	tst.w	r0, #128	; 0x80
    9f6a:	d003      	beq.n	9f74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
    9f6c:	3c01      	subs	r4, #1
    9f6e:	b2a4      	uxth	r4, r4
    9f70:	2c00      	cmp	r4, #0
    9f72:	d1f4      	bne.n	9f5e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
    9f74:	b002      	add	sp, #8
    9f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
    9f7a:	4628      	mov	r0, r5
    9f7c:	f7ff ff1f 	bl	9dbe <SharedSpiCard::spiStart()>
    9f80:	e7c5      	b.n	9f0e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
    9f82:	20ff      	movs	r0, #255	; 0xff
    9f84:	e7f6      	b.n	9f74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
    9f86:	20ff      	movs	r0, #255	; 0xff
    9f88:	e7f4      	b.n	9f74 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

00009f8c <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    9f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f90:	b089      	sub	sp, #36	; 0x24
    9f92:	4605      	mov	r5, r0
    9f94:	ac01      	add	r4, sp, #4
    9f96:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    9f9a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9f9e:	4617      	mov	r7, r2
  m_spiActive = false;
    9fa0:	f04f 0800 	mov.w	r8, #0
    9fa4:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    9fa8:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    9fac:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
    9fb0:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    9fb2:	f001 fb18 	bl	b5e6 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    9fb6:	2101      	movs	r1, #1
    9fb8:	7c28      	ldrb	r0, [r5, #16]
    9fba:	f001 fb19 	bl	b5f0 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    9fbe:	4b55      	ldr	r3, [pc, #340]	; (a114 <SharedSpiCard::begin(SdSpiConfig)+0x188>)
    9fc0:	60ab      	str	r3, [r5, #8]
    9fc2:	2307      	movs	r3, #7
    9fc4:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
    9fc6:	ab05      	add	r3, sp, #20
    9fc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    9fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    9fd0:	1d2e      	adds	r6, r5, #4
    9fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
    9fd4:	4630      	mov	r0, r6
    9fd6:	f001 fba3 	bl	b720 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
    9fda:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
    9fde:	4628      	mov	r0, r5
    9fe0:	f7ff feed 	bl	9dbe <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
    9fe4:	2101      	movs	r1, #1
    9fe6:	7c28      	ldrb	r0, [r5, #16]
    9fe8:	f001 fb02 	bl	b5f0 <sdCsWrite(unsigned char, bool)>
    9fec:	240a      	movs	r4, #10
    m_spiDriver.send(data);
    9fee:	f04f 08ff 	mov.w	r8, #255	; 0xff
    9ff2:	4641      	mov	r1, r8
    9ff4:	4630      	mov	r0, r6
    9ff6:	f001 fbf8 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    9ffa:	1e63      	subs	r3, r4, #1
    9ffc:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a000:	d1f7      	bne.n	9ff2 <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
    a002:	2100      	movs	r1, #0
    a004:	7c28      	ldrb	r0, [r5, #16]
    a006:	f001 faf3 	bl	b5f0 <sdCsWrite(unsigned char, bool)>
    a00a:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    a00c:	f04f 0800 	mov.w	r8, #0
    a010:	4642      	mov	r2, r8
    a012:	4641      	mov	r1, r8
    a014:	4628      	mov	r0, r5
    a016:	f7ff ff6d 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a01a:	2801      	cmp	r0, #1
    a01c:	d00c      	beq.n	a038 <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
    a01e:	1e63      	subs	r3, r4, #1
    a020:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a024:	d1f4      	bne.n	a010 <SharedSpiCard::begin(SdSpiConfig)+0x84>
    a026:	2301      	movs	r3, #1
    m_errorCode = code;
    a028:	746b      	strb	r3, [r5, #17]
  spiStop();
    a02a:	4628      	mov	r0, r5
    a02c:	f7ff fedb 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a030:	2000      	movs	r0, #0
}
    a032:	b009      	add	sp, #36	; 0x24
    a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    a038:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    a03c:	2108      	movs	r1, #8
    a03e:	4628      	mov	r0, r5
    a040:	f7ff ff58 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a044:	f010 0f04 	tst.w	r0, #4
    a048:	d10e      	bne.n	a068 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
    a04a:	2302      	movs	r3, #2
    a04c:	756b      	strb	r3, [r5, #21]
    a04e:	2404      	movs	r4, #4
    return m_spiDriver.receive();
    a050:	4630      	mov	r0, r6
    a052:	f001 fbae 	bl	b7b2 <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    a056:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    a058:	1e63      	subs	r3, r4, #1
    a05a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a05e:	d1f7      	bne.n	a050 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
    a060:	28aa      	cmp	r0, #170	; 0xaa
    a062:	d003      	beq.n	a06c <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    a064:	2306      	movs	r3, #6
    a066:	e7df      	b.n	a028 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
    a068:	2301      	movs	r3, #1
    a06a:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    a06c:	682b      	ldr	r3, [r5, #0]
    a06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a070:	4628      	mov	r0, r5
    a072:	4798      	blx	r3
    a074:	2802      	cmp	r0, #2
    a076:	bf14      	ite	ne
    a078:	2400      	movne	r4, #0
    a07a:	2401      	moveq	r4, #1
    a07c:	07a4      	lsls	r4, r4, #30
    a07e:	4b26      	ldr	r3, [pc, #152]	; (a118 <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
    a080:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
    a082:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
    a086:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
    a08a:	f04f 0a00 	mov.w	sl, #0
    a08e:	f04f 0937 	mov.w	r9, #55	; 0x37
    a092:	f8df b084 	ldr.w	fp, [pc, #132]	; a118 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    a096:	4652      	mov	r2, sl
    a098:	4649      	mov	r1, r9
    a09a:	4628      	mov	r0, r5
    a09c:	f7ff ff2a 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    a0a0:	4622      	mov	r2, r4
    a0a2:	2129      	movs	r1, #41	; 0x29
    a0a4:	4628      	mov	r0, r5
    a0a6:	f7ff ff25 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    a0aa:	b140      	cbz	r0, a0be <SharedSpiCard::begin(SdSpiConfig)+0x132>
    a0ac:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
    a0b0:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    a0b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a0b8:	d0ed      	beq.n	a096 <SharedSpiCard::begin(SdSpiConfig)+0x10a>
    a0ba:	2317      	movs	r3, #23
    a0bc:	e7b4      	b.n	a028 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
    a0be:	682b      	ldr	r3, [r5, #0]
    a0c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a0c2:	4628      	mov	r0, r5
    a0c4:	4798      	blx	r3
    a0c6:	2802      	cmp	r0, #2
    a0c8:	d007      	beq.n	a0da <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
    a0ca:	4628      	mov	r0, r5
    a0cc:	f7ff fe8b 	bl	9de6 <SharedSpiCard::spiStop()>
    a0d0:	60af      	str	r7, [r5, #8]
    a0d2:	2307      	movs	r3, #7
    a0d4:	60eb      	str	r3, [r5, #12]
  return true;
    a0d6:	2001      	movs	r0, #1
    a0d8:	e7ab      	b.n	a032 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
    a0da:	2200      	movs	r2, #0
    a0dc:	213a      	movs	r1, #58	; 0x3a
    a0de:	4628      	mov	r0, r5
    a0e0:	f7ff ff08 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a0e4:	b108      	cbz	r0, a0ea <SharedSpiCard::begin(SdSpiConfig)+0x15e>
    a0e6:	2312      	movs	r3, #18
    a0e8:	e79e      	b.n	a028 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
    a0ea:	4630      	mov	r0, r6
    a0ec:	f001 fb61 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a0f0:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    a0f4:	2bc0      	cmp	r3, #192	; 0xc0
    a0f6:	d009      	beq.n	a10c <SharedSpiCard::begin(SdSpiConfig)+0x180>
    a0f8:	4630      	mov	r0, r6
    a0fa:	f001 fb5a 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    a0fe:	4630      	mov	r0, r6
    a100:	f001 fb57 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    a104:	4630      	mov	r0, r6
    a106:	f001 fb54 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a10a:	e7de      	b.n	a0ca <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
    a10c:	2303      	movs	r3, #3
    a10e:	756b      	strb	r3, [r5, #21]
  }
    a110:	e7f2      	b.n	a0f8 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    a112:	bf00      	nop
    a114:	00061a80 	.word	0x00061a80
    a118:	200052f0 	.word	0x200052f0

0000a11c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a11e:	4606      	mov	r6, r0
    a120:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a122:	2200      	movs	r2, #0
    a124:	213a      	movs	r1, #58	; 0x3a
    a126:	f7ff fee5 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a12a:	b968      	cbnz	r0, a148 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a12c:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a12e:	1d37      	adds	r7, r6, #4
    a130:	4638      	mov	r0, r7
    a132:	f001 fb3e 	bl	b7b2 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a136:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a13a:	42ac      	cmp	r4, r5
    a13c:	d1f8      	bne.n	a130 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
    a13e:	4630      	mov	r0, r6
    a140:	f7ff fe51 	bl	9de6 <SharedSpiCard::spiStop()>
  return true;
    a144:	2001      	movs	r0, #1
}
    a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a148:	2312      	movs	r3, #18
    a14a:	7473      	strb	r3, [r6, #17]
  spiStop();
    a14c:	4630      	mov	r0, r6
    a14e:	f7ff fe4a 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a152:	2000      	movs	r0, #0
    a154:	e7f7      	b.n	a146 <SharedSpiCard::readOCR(unsigned long*)+0x2a>

0000a156 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a156:	b538      	push	{r3, r4, r5, lr}
    a158:	4604      	mov	r4, r0
    a15a:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    a15c:	2200      	movs	r2, #0
    a15e:	f7ff fec9 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a162:	b138      	cbz	r0, a174 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    a164:	231b      	movs	r3, #27
    a166:	7463      	strb	r3, [r4, #17]
  spiStop();
    a168:	4620      	mov	r0, r4
    a16a:	f7ff fe3c 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a16e:	2500      	movs	r5, #0
}
    a170:	4628      	mov	r0, r5
    a172:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
    a174:	2210      	movs	r2, #16
    a176:	4629      	mov	r1, r5
    a178:	4620      	mov	r0, r4
    a17a:	f7ff fe67 	bl	9e4c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a17e:	4605      	mov	r5, r0
    a180:	2800      	cmp	r0, #0
    a182:	d0f1      	beq.n	a168 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    a184:	4620      	mov	r0, r4
    a186:	f7ff fe2e 	bl	9de6 <SharedSpiCard::spiStop()>
  return true;
    a18a:	e7f1      	b.n	a170 <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

0000a18c <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a18c:	b508      	push	{r3, lr}
    a18e:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
    a190:	2109      	movs	r1, #9
    a192:	f7ff ffe0 	bl	a156 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a196:	bd08      	pop	{r3, pc}

0000a198 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a198:	b508      	push	{r3, lr}
    a19a:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
    a19c:	210a      	movs	r1, #10
    a19e:	f7ff ffda 	bl	a156 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a1a2:	bd08      	pop	{r3, pc}

0000a1a4 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    a1a4:	b538      	push	{r3, r4, r5, lr}
    a1a6:	4604      	mov	r4, r0
    a1a8:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a1aa:	6803      	ldr	r3, [r0, #0]
    a1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a1ae:	4798      	blx	r3
    a1b0:	2803      	cmp	r0, #3
    sector <<= 9;
    a1b2:	bf18      	it	ne
    a1b4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    a1b6:	462a      	mov	r2, r5
    a1b8:	2112      	movs	r1, #18
    a1ba:	4620      	mov	r0, r4
    a1bc:	f7ff fe9a 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a1c0:	b910      	cbnz	r0, a1c8 <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
    a1c2:	2001      	movs	r0, #1
    a1c4:	74e0      	strb	r0, [r4, #19]
}
    a1c6:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a1c8:	230c      	movs	r3, #12
    a1ca:	7463      	strb	r3, [r4, #17]
  spiStop();
    a1cc:	4620      	mov	r0, r4
    a1ce:	f7ff fe0a 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a1d2:	2000      	movs	r0, #0
    a1d4:	e7f7      	b.n	a1c6 <SharedSpiCard::readStart(unsigned long)+0x22>

0000a1d6 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a1d6:	b510      	push	{r4, lr}
    a1d8:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
    a1da:	2200      	movs	r2, #0
    a1dc:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a1de:	210c      	movs	r1, #12
    a1e0:	f7ff fe88 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a1e4:	b920      	cbnz	r0, a1f0 <SharedSpiCard::readStop()+0x1a>
  spiStop();
    a1e6:	4620      	mov	r0, r4
    a1e8:	f7ff fdfd 	bl	9de6 <SharedSpiCard::spiStop()>
  return true;
    a1ec:	2001      	movs	r0, #1
}
    a1ee:	bd10      	pop	{r4, pc}
    a1f0:	2309      	movs	r3, #9
    a1f2:	7463      	strb	r3, [r4, #17]
  spiStop();
    a1f4:	4620      	mov	r0, r4
    a1f6:	f7ff fdf6 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a1fa:	2000      	movs	r0, #0
    a1fc:	e7f7      	b.n	a1ee <SharedSpiCard::readStop()+0x18>

0000a1fe <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    a1fe:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
    a200:	7cc3      	ldrb	r3, [r0, #19]
    a202:	2b02      	cmp	r3, #2
    a204:	d003      	beq.n	a20e <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
    a206:	2b01      	cmp	r3, #1
    a208:	d005      	beq.n	a216 <SharedSpiCard::syncDevice()+0x18>
  return true;
    a20a:	2001      	movs	r0, #1
}
    a20c:	bd08      	pop	{r3, pc}
    return writeStop();
    a20e:	6803      	ldr	r3, [r0, #0]
    a210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a212:	4798      	blx	r3
    a214:	e7fa      	b.n	a20c <SharedSpiCard::syncDevice()+0xe>
    return readStop();
    a216:	f7ff ffde 	bl	a1d6 <SharedSpiCard::readStop()>
    a21a:	e7f7      	b.n	a20c <SharedSpiCard::syncDevice()+0xe>

0000a21c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a21e:	4606      	mov	r6, r0
    a220:	460d      	mov	r5, r1
    a222:	4614      	mov	r4, r2
    a224:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a226:	7cc3      	ldrb	r3, [r0, #19]
    a228:	2b01      	cmp	r3, #1
    a22a:	d102      	bne.n	a232 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a22c:	6983      	ldr	r3, [r0, #24]
    a22e:	428b      	cmp	r3, r1
    a230:	d006      	beq.n	a240 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    a232:	4629      	mov	r1, r5
    a234:	4630      	mov	r0, r6
    a236:	f7ff ffb5 	bl	a1a4 <SharedSpiCard::readStart(unsigned long)>
    a23a:	4603      	mov	r3, r0
    a23c:	b190      	cbz	r0, a264 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
    a23e:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a240:	b15f      	cbz	r7, a25a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    a242:	2500      	movs	r5, #0
    if (!readData(dst)) {
    a244:	4621      	mov	r1, r4
    a246:	4630      	mov	r0, r6
    a248:	f7ff fe36 	bl	9eb8 <SharedSpiCard::readData(unsigned char*)>
    a24c:	4603      	mov	r3, r0
    a24e:	b148      	cbz	r0, a264 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a250:	3501      	adds	r5, #1
    a252:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a256:	42af      	cmp	r7, r5
    a258:	d1f4      	bne.n	a244 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
    a25a:	69b3      	ldr	r3, [r6, #24]
    a25c:	443b      	add	r3, r7
    a25e:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a260:	7f33      	ldrb	r3, [r6, #28]
    a262:	b10b      	cbz	r3, a268 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
    a264:	4618      	mov	r0, r3
    a266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
    a268:	4630      	mov	r0, r6
    a26a:	f7ff ffb4 	bl	a1d6 <SharedSpiCard::readStop()>
    a26e:	4603      	mov	r3, r0
    a270:	e7f8      	b.n	a264 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0000a272 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a276:	4606      	mov	r6, r0
    a278:	460c      	mov	r4, r1
    a27a:	4615      	mov	r5, r2
    a27c:	469a      	mov	sl, r3
    a27e:	9f08      	ldr	r7, [sp, #32]
    a280:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    a284:	7cc3      	ldrb	r3, [r0, #19]
    a286:	2b01      	cmp	r3, #1
    a288:	d102      	bne.n	a290 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
    a28a:	6983      	ldr	r3, [r0, #24]
    a28c:	428b      	cmp	r3, r1
    a28e:	d006      	beq.n	a29e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a290:	4621      	mov	r1, r4
    a292:	4630      	mov	r0, r6
    a294:	f7ff ff86 	bl	a1a4 <SharedSpiCard::readStart(unsigned long)>
    a298:	4603      	mov	r3, r0
    a29a:	b1b8      	cbz	r0, a2cc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
    a29c:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a29e:	f1ba 0f00 	cmp.w	sl, #0
    a2a2:	d00e      	beq.n	a2c2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
    a2a4:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
    a2a8:	4629      	mov	r1, r5
    a2aa:	4630      	mov	r0, r6
    a2ac:	f7ff fe04 	bl	9eb8 <SharedSpiCard::readData(unsigned char*)>
    a2b0:	4603      	mov	r3, r0
    a2b2:	b158      	cbz	r0, a2cc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
    a2b4:	4642      	mov	r2, r8
    a2b6:	4629      	mov	r1, r5
    a2b8:	4620      	mov	r0, r4
    a2ba:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
    a2bc:	3401      	adds	r4, #1
    a2be:	45a1      	cmp	r9, r4
    a2c0:	d1f2      	bne.n	a2a8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
    a2c2:	69b3      	ldr	r3, [r6, #24]
    a2c4:	4453      	add	r3, sl
    a2c6:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a2c8:	7f33      	ldrb	r3, [r6, #28]
    a2ca:	b113      	cbz	r3, a2d2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
    a2cc:	4618      	mov	r0, r3
    a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
    a2d2:	4630      	mov	r0, r6
    a2d4:	f7ff ff7f 	bl	a1d6 <SharedSpiCard::readStop()>
    a2d8:	4603      	mov	r3, r0
    a2da:	e7f7      	b.n	a2cc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

0000a2dc <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    a2dc:	b538      	push	{r3, r4, r5, lr}
    a2de:	4604      	mov	r4, r0
    a2e0:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a2e2:	6803      	ldr	r3, [r0, #0]
    a2e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a2e6:	4798      	blx	r3
    a2e8:	2803      	cmp	r0, #3
    sector <<= 9;
    a2ea:	bf18      	it	ne
    a2ec:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    a2ee:	462a      	mov	r2, r5
    a2f0:	2119      	movs	r1, #25
    a2f2:	4620      	mov	r0, r4
    a2f4:	f7ff fdfe 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a2f8:	b918      	cbnz	r0, a302 <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
    a2fa:	2302      	movs	r3, #2
    a2fc:	74e3      	strb	r3, [r4, #19]
  return true;
    a2fe:	2001      	movs	r0, #1
}
    a300:	bd38      	pop	{r3, r4, r5, pc}
    a302:	230e      	movs	r3, #14
    a304:	7463      	strb	r3, [r4, #17]
  spiStop();
    a306:	4620      	mov	r0, r4
    a308:	f7ff fd6d 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a30c:	2000      	movs	r0, #0
    a30e:	e7f7      	b.n	a300 <SharedSpiCard::writeStart(unsigned long)+0x24>

0000a310 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a310:	b570      	push	{r4, r5, r6, lr}
    a312:	b084      	sub	sp, #16
    a314:	4604      	mov	r4, r0
    a316:	460d      	mov	r5, r1
    a318:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
    a31a:	6803      	ldr	r3, [r0, #0]
    a31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a31e:	4669      	mov	r1, sp
    a320:	4798      	blx	r3
    a322:	b1f8      	cbz	r0, a364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
    a324:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a328:	f013 0f40 	tst.w	r3, #64	; 0x40
    a32c:	d10d      	bne.n	a34a <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a32e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a332:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a336:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a338:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a33c:	1c72      	adds	r2, r6, #1
    a33e:	432a      	orrs	r2, r5
    a340:	4213      	tst	r3, r2
    a342:	d002      	beq.n	a34a <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    a344:	2327      	movs	r3, #39	; 0x27
    a346:	7463      	strb	r3, [r4, #17]
      goto fail;
    a348:	e00c      	b.n	a364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a34a:	7d63      	ldrb	r3, [r4, #21]
    a34c:	2b03      	cmp	r3, #3
    a34e:	d001      	beq.n	a354 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
    a350:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    a352:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
    a354:	462a      	mov	r2, r5
    a356:	2120      	movs	r1, #32
    a358:	4620      	mov	r0, r4
    a35a:	f7ff fdcb 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a35e:	b140      	cbz	r0, a372 <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
    a360:	2326      	movs	r3, #38	; 0x26
    a362:	7463      	strb	r3, [r4, #17]
  spiStop();
    a364:	4620      	mov	r0, r4
    a366:	f7ff fd3e 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a36a:	2500      	movs	r5, #0
}
    a36c:	4628      	mov	r0, r5
    a36e:	b004      	add	sp, #16
    a370:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
    a372:	4632      	mov	r2, r6
    a374:	2121      	movs	r1, #33	; 0x21
    a376:	4620      	mov	r0, r4
    a378:	f7ff fdbc 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a37c:	2800      	cmp	r0, #0
    a37e:	d1ef      	bne.n	a360 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
    a380:	2200      	movs	r2, #0
    a382:	2126      	movs	r1, #38	; 0x26
    a384:	4620      	mov	r0, r4
    a386:	f7ff fdb5 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a38a:	2800      	cmp	r0, #0
    a38c:	d1e8      	bne.n	a360 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    a38e:	f242 7110 	movw	r1, #10000	; 0x2710
    a392:	4620      	mov	r0, r4
    a394:	f7ff fd96 	bl	9ec4 <SharedSpiCard::waitReady(unsigned short)>
    a398:	4605      	mov	r5, r0
    a39a:	b910      	cbnz	r0, a3a2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
    a39c:	2328      	movs	r3, #40	; 0x28
    a39e:	7463      	strb	r3, [r4, #17]
    goto fail;
    a3a0:	e7e0      	b.n	a364 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
    a3a2:	4620      	mov	r0, r4
    a3a4:	f7ff fd1f 	bl	9de6 <SharedSpiCard::spiStop()>
  return true;
    a3a8:	e7e0      	b.n	a36c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

0000a3aa <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    a3aa:	b538      	push	{r3, r4, r5, lr}
    a3ac:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a3ae:	f44f 7116 	mov.w	r1, #600	; 0x258
    a3b2:	f7ff fd87 	bl	9ec4 <SharedSpiCard::waitReady(unsigned short)>
    a3b6:	4605      	mov	r5, r0
    a3b8:	b150      	cbz	r0, a3d0 <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
    a3ba:	21fd      	movs	r1, #253	; 0xfd
    a3bc:	1d20      	adds	r0, r4, #4
    a3be:	f001 fa14 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    a3c2:	4620      	mov	r0, r4
    a3c4:	f7ff fd0f 	bl	9de6 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    a3c8:	2300      	movs	r3, #0
    a3ca:	74e3      	strb	r3, [r4, #19]
}
    a3cc:	4628      	mov	r0, r5
    a3ce:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a3d0:	231e      	movs	r3, #30
    a3d2:	7463      	strb	r3, [r4, #17]
  spiStop();
    a3d4:	4620      	mov	r0, r4
    a3d6:	f7ff fd06 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a3da:	e7f7      	b.n	a3cc <SharedSpiCard::writeStop()+0x22>

0000a3dc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a3dc:	b570      	push	{r4, r5, r6, lr}
    a3de:	4605      	mov	r5, r0
    a3e0:	4616      	mov	r6, r2
    m_spiDriver.send(data);
    a3e2:	1d04      	adds	r4, r0, #4
    a3e4:	4620      	mov	r0, r4
    a3e6:	f001 fa00 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a3ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    a3ee:	4631      	mov	r1, r6
    a3f0:	4620      	mov	r0, r4
    a3f2:	f001 fa04 	bl	b7fe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a3f6:	21ff      	movs	r1, #255	; 0xff
    a3f8:	4620      	mov	r0, r4
    a3fa:	f001 f9f6 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    a3fe:	21ff      	movs	r1, #255	; 0xff
    a400:	4620      	mov	r0, r4
    a402:	f001 f9f2 	bl	b7ea <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a406:	4620      	mov	r0, r4
    a408:	f001 f9d3 	bl	b7b2 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    a40c:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a40e:	f000 031f 	and.w	r3, r0, #31
    a412:	2b05      	cmp	r3, #5
    a414:	d101      	bne.n	a41a <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
    a416:	2001      	movs	r0, #1
}
    a418:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
    a41a:	2320      	movs	r3, #32
    a41c:	746b      	strb	r3, [r5, #17]
  spiStop();
    a41e:	4628      	mov	r0, r5
    a420:	f7ff fce1 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a424:	2000      	movs	r0, #0
    a426:	e7f7      	b.n	a418 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

0000a428 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a428:	b538      	push	{r3, r4, r5, lr}
    a42a:	4604      	mov	r4, r0
    a42c:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a42e:	f44f 7116 	mov.w	r1, #600	; 0x258
    a432:	f7ff fd47 	bl	9ec4 <SharedSpiCard::waitReady(unsigned short)>
    a436:	b930      	cbnz	r0, a446 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    a438:	2324      	movs	r3, #36	; 0x24
    a43a:	7463      	strb	r3, [r4, #17]
  spiStop();
    a43c:	4620      	mov	r0, r4
    a43e:	f7ff fcd2 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a442:	2000      	movs	r0, #0
}
    a444:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a446:	462a      	mov	r2, r5
    a448:	21fc      	movs	r1, #252	; 0xfc
    a44a:	4620      	mov	r0, r4
    a44c:	f7ff ffc6 	bl	a3dc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a450:	2800      	cmp	r0, #0
    a452:	d1f7      	bne.n	a444 <SharedSpiCard::writeData(unsigned char const*)+0x1c>
    a454:	e7f2      	b.n	a43c <SharedSpiCard::writeData(unsigned char const*)+0x14>

0000a456 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a456:	b570      	push	{r4, r5, r6, lr}
    a458:	4604      	mov	r4, r0
    a45a:	460d      	mov	r5, r1
    a45c:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    a45e:	6803      	ldr	r3, [r0, #0]
    a460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a462:	4798      	blx	r3
    a464:	2803      	cmp	r0, #3
    sector <<= 9;
    a466:	bf18      	it	ne
    a468:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a46a:	462a      	mov	r2, r5
    a46c:	2118      	movs	r1, #24
    a46e:	4620      	mov	r0, r4
    a470:	f7ff fd40 	bl	9ef4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a474:	b138      	cbz	r0, a486 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    a476:	230d      	movs	r3, #13
    a478:	7463      	strb	r3, [r4, #17]
  spiStop();
    a47a:	4620      	mov	r0, r4
    a47c:	f7ff fcb3 	bl	9de6 <SharedSpiCard::spiStop()>
  return false;
    a480:	2500      	movs	r5, #0
}
    a482:	4628      	mov	r0, r5
    a484:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a486:	4632      	mov	r2, r6
    a488:	21fe      	movs	r1, #254	; 0xfe
    a48a:	4620      	mov	r0, r4
    a48c:	f7ff ffa6 	bl	a3dc <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a490:	4605      	mov	r5, r0
    a492:	2800      	cmp	r0, #0
    a494:	d0f1      	beq.n	a47a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
    a496:	4620      	mov	r0, r4
    a498:	f7ff fca5 	bl	9de6 <SharedSpiCard::spiStop()>
  return true;
    a49c:	e7f1      	b.n	a482 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

0000a49e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a49e:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
    a4a0:	7f03      	ldrb	r3, [r0, #28]
    a4a2:	b123      	cbz	r3, a4ae <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
    a4a4:	6803      	ldr	r3, [r0, #0]
    a4a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a4a8:	2301      	movs	r3, #1
    a4aa:	47a0      	blx	r4
}
    a4ac:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
    a4ae:	f7ff ffd2 	bl	a456 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
    a4b2:	e7fb      	b.n	a4ac <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0000a4b4 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a4b4:	b510      	push	{r4, lr}
    a4b6:	b084      	sub	sp, #16
    a4b8:	4604      	mov	r4, r0
    a4ba:	f10d 0c04 	add.w	ip, sp, #4
    a4be:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a4c2:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a4c6:	f7ff fd61 	bl	9f8c <SharedSpiCard::begin(SdSpiConfig)>
    a4ca:	b120      	cbz	r0, a4d6 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a4cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a4d0:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    a4d4:	7723      	strb	r3, [r4, #28]
}
    a4d6:	b004      	add	sp, #16
    a4d8:	bd10      	pop	{r4, pc}

0000a4da <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4de:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a4e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a4e6:	b1b3      	cbz	r3, a516 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a4e8:	4605      	mov	r5, r0
    a4ea:	460c      	mov	r4, r1
    a4ec:	4616      	mov	r6, r2
    a4ee:	461f      	mov	r7, r3
    a4f0:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
    a4f2:	682b      	ldr	r3, [r5, #0]
    a4f4:	691b      	ldr	r3, [r3, #16]
    a4f6:	4632      	mov	r2, r6
    a4f8:	4621      	mov	r1, r4
    a4fa:	4628      	mov	r0, r5
    a4fc:	4798      	blx	r3
    a4fe:	4682      	mov	sl, r0
    a500:	b130      	cbz	r0, a510 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
    a502:	464a      	mov	r2, r9
    a504:	4631      	mov	r1, r6
    a506:	4620      	mov	r0, r4
    a508:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a50a:	3401      	adds	r4, #1
    a50c:	42bc      	cmp	r4, r7
    a50e:	d1f0      	bne.n	a4f2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
    a510:	4650      	mov	r0, sl
    a512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
    a516:	f04f 0a01 	mov.w	sl, #1
    a51a:	e7f9      	b.n	a510 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

0000a51c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a520:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a524:	b1aa      	cbz	r2, a552 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
    a526:	4605      	mov	r5, r0
    a528:	460c      	mov	r4, r1
    a52a:	461f      	mov	r7, r3
    a52c:	4690      	mov	r8, r2
    a52e:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a530:	682b      	ldr	r3, [r5, #0]
    a532:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a534:	4649      	mov	r1, r9
    a536:	4620      	mov	r0, r4
    a538:	47b8      	blx	r7
    a53a:	4602      	mov	r2, r0
    a53c:	4621      	mov	r1, r4
    a53e:	4628      	mov	r0, r5
    a540:	47b0      	blx	r6
    a542:	4603      	mov	r3, r0
    a544:	b110      	cbz	r0, a54c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
    a546:	3401      	adds	r4, #1
    a548:	4544      	cmp	r4, r8
    a54a:	d1f1      	bne.n	a530 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a54c:	4618      	mov	r0, r3
    a54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a552:	2301      	movs	r3, #1
    a554:	e7fa      	b.n	a54c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

0000a556 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a556:	2000      	movs	r0, #0
    a558:	4770      	bx	lr

0000a55a <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a55a:	2000      	movs	r0, #0
    a55c:	4770      	bx	lr

0000a55e <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a55e:	2000      	movs	r0, #0
    a560:	4770      	bx	lr

0000a562 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a562:	4770      	bx	lr

0000a564 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a564:	4b07      	ldr	r3, [pc, #28]	; (a584 <sdIrs()+0x20>)
    a566:	2100      	movs	r1, #0
    a568:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a56a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    a56c:	4a06      	ldr	r2, [pc, #24]	; (a588 <sdIrs()+0x24>)
    a56e:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a570:	6812      	ldr	r2, [r2, #0]
    a572:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a576:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a57a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    a57c:	4b03      	ldr	r3, [pc, #12]	; (a58c <sdIrs()+0x28>)
    a57e:	7019      	strb	r1, [r3, #0]
}
    a580:	4770      	bx	lr
    a582:	bf00      	nop
    a584:	402c0000 	.word	0x402c0000
    a588:	20004b64 	.word	0x20004b64
    a58c:	2000532b 	.word	0x2000532b

0000a590 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a590:	4b06      	ldr	r3, [pc, #24]	; (a5ac <gpioMux(unsigned char)+0x1c>)
    a592:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    a596:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    a59a:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    a59e:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    a5a2:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    a5a6:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
    a5aa:	4770      	bx	lr
    a5ac:	401f8000 	.word	0x401f8000

0000a5b0 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    a5b0:	4b03      	ldr	r3, [pc, #12]	; (a5c0 <isBusyCommandComplete()+0x10>)
    a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a5b4:	4803      	ldr	r0, [pc, #12]	; (a5c4 <isBusyCommandComplete()+0x14>)
    a5b6:	4018      	ands	r0, r3
}
    a5b8:	fab0 f080 	clz	r0, r0
    a5bc:	0940      	lsrs	r0, r0, #5
    a5be:	4770      	bx	lr
    a5c0:	402c0000 	.word	0x402c0000
    a5c4:	000f0001 	.word	0x000f0001

0000a5c8 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    a5c8:	4b02      	ldr	r3, [pc, #8]	; (a5d4 <isBusyCommandInhibit()+0xc>)
    a5ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    a5cc:	f000 0001 	and.w	r0, r0, #1
    a5d0:	4770      	bx	lr
    a5d2:	bf00      	nop
    a5d4:	402c0000 	.word	0x402c0000

0000a5d8 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a5d8:	4b03      	ldr	r3, [pc, #12]	; (a5e8 <isBusyDat()+0x10>)
    a5da:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a5dc:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    a5e0:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a5e4:	4770      	bx	lr
    a5e6:	bf00      	nop
    a5e8:	402c0000 	.word	0x402c0000

0000a5ec <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    a5ec:	4b01      	ldr	r3, [pc, #4]	; (a5f4 <isBusyDMA()+0x8>)
    a5ee:	7818      	ldrb	r0, [r3, #0]
}
    a5f0:	4770      	bx	lr
    a5f2:	bf00      	nop
    a5f4:	2000532b 	.word	0x2000532b

0000a5f8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    a5f8:	4b03      	ldr	r3, [pc, #12]	; (a608 <isBusyFifoRead()+0x10>)
    a5fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a5fc:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    a600:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    a604:	4770      	bx	lr
    a606:	bf00      	nop
    a608:	402c0000 	.word	0x402c0000

0000a60c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    a60c:	4b03      	ldr	r3, [pc, #12]	; (a61c <isBusyFifoWrite()+0x10>)
    a60e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a610:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    a614:	f3c0 2080 	ubfx	r0, r0, #10, #1
    a618:	4770      	bx	lr
    a61a:	bf00      	nop
    a61c:	402c0000 	.word	0x402c0000

0000a620 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    a620:	4b03      	ldr	r3, [pc, #12]	; (a630 <isBusyTransferComplete()+0x10>)
    a622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a624:	4803      	ldr	r0, [pc, #12]	; (a634 <isBusyTransferComplete()+0x14>)
    a626:	4018      	ands	r0, r3
}
    a628:	fab0 f080 	clz	r0, r0
    a62c:	0940      	lsrs	r0, r0, #5
    a62e:	4770      	bx	lr
    a630:	402c0000 	.word	0x402c0000
    a634:	117f0002 	.word	0x117f0002

0000a638 <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a638:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a63a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a63e:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a642:	4b2b      	ldr	r3, [pc, #172]	; (a6f0 <setSdclk(unsigned long)+0xb8>)
    a644:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a646:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
    a64a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    a64e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    a652:	4b28      	ldr	r3, [pc, #160]	; (a6f4 <setSdclk(unsigned long)+0xbc>)
    a654:	fba3 3202 	umull	r3, r2, r3, r2
    a658:	0892      	lsrs	r2, r2, #2
    a65a:	4b27      	ldr	r3, [pc, #156]	; (a6f8 <setSdclk(unsigned long)+0xc0>)
    a65c:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a660:	f3c1 23c2 	ubfx	r3, r1, #11, #3
    a664:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a666:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a66a:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
    a66e:	d239      	bcs.n	a6e4 <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
    a670:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    a672:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a674:	0113      	lsls	r3, r2, #4
    a676:	fbbc f3f3 	udiv	r3, ip, r3
    a67a:	4573      	cmp	r3, lr
    a67c:	d901      	bls.n	a682 <setSdclk(unsigned long)+0x4a>
    a67e:	2aff      	cmp	r2, #255	; 0xff
    a680:	d9f7      	bls.n	a672 <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a682:	fbbc f3f2 	udiv	r3, ip, r2
    a686:	459e      	cmp	lr, r3
    a688:	d22e      	bcs.n	a6e8 <setSdclk(unsigned long)+0xb0>
    a68a:	0051      	lsls	r1, r2, #1
    a68c:	2301      	movs	r3, #1
    dvs++;
    a68e:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a690:	fbbc f0f1 	udiv	r0, ip, r1
    a694:	4570      	cmp	r0, lr
    a696:	bf94      	ite	ls
    a698:	2000      	movls	r0, #0
    a69a:	2001      	movhi	r0, #1
    a69c:	2b0f      	cmp	r3, #15
    a69e:	bf88      	it	hi
    a6a0:	2000      	movhi	r0, #0
    a6a2:	460c      	mov	r4, r1
    a6a4:	4411      	add	r1, r2
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d1f1      	bne.n	a68e <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a6aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a6ae:	fb01 f404 	mul.w	r4, r1, r4
    a6b2:	fbbc f4f4 	udiv	r4, ip, r4
    a6b6:	4811      	ldr	r0, [pc, #68]	; (a6fc <setSdclk(unsigned long)+0xc4>)
    a6b8:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a6ba:	4811      	ldr	r0, [pc, #68]	; (a700 <setSdclk(unsigned long)+0xc8>)
    a6bc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
    a6be:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a6c0:	011b      	lsls	r3, r3, #4
    a6c2:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a6c4:	490f      	ldr	r1, [pc, #60]	; (a704 <setSdclk(unsigned long)+0xcc>)
    a6c6:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a6c8:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a6ca:	01d2      	lsls	r2, r2, #7
    a6cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    a6d0:	4313      	orrs	r3, r2
    a6d2:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a6d6:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a6d8:	4602      	mov	r2, r0
    a6da:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a6dc:	f013 0f08 	tst.w	r3, #8
    a6e0:	d0fb      	beq.n	a6da <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a6e2:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
    a6e4:	2201      	movs	r2, #1
    a6e6:	e7cc      	b.n	a682 <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a6e8:	4614      	mov	r4, r2
    a6ea:	2301      	movs	r3, #1
    a6ec:	e7dd      	b.n	a6aa <setSdclk(unsigned long)+0x72>
    a6ee:	bf00      	nop
    a6f0:	400fc000 	.word	0x400fc000
    a6f4:	aaaaaaab 	.word	0xaaaaaaab
    a6f8:	5e69ec00 	.word	0x5e69ec00
    a6fc:	20004ac8 	.word	0x20004ac8
    a700:	402c0000 	.word	0x402c0000
    a704:	fff0000f 	.word	0xfff0000f

0000a708 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    a708:	4b01      	ldr	r3, [pc, #4]	; (a710 <SdioCard::errorCode() const+0x8>)
    a70a:	7818      	ldrb	r0, [r3, #0]
    a70c:	4770      	bx	lr
    a70e:	bf00      	nop
    a710:	200038d4 	.word	0x200038d4

0000a714 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a714:	4b01      	ldr	r3, [pc, #4]	; (a71c <SdioCard::errorData() const+0x8>)
    a716:	6818      	ldr	r0, [r3, #0]
}
    a718:	4770      	bx	lr
    a71a:	bf00      	nop
    a71c:	20004b64 	.word	0x20004b64

0000a720 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a720:	b410      	push	{r4}
    a722:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    a724:	4c06      	ldr	r4, [pc, #24]	; (a740 <SdioCard::readCID(CID*)+0x20>)
    a726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a728:	f8cc 0000 	str.w	r0, [ip]
    a72c:	f8cc 1004 	str.w	r1, [ip, #4]
    a730:	f8cc 2008 	str.w	r2, [ip, #8]
    a734:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    a738:	2001      	movs	r0, #1
    a73a:	f85d 4b04 	ldr.w	r4, [sp], #4
    a73e:	4770      	bx	lr
    a740:	20004b38 	.word	0x20004b38

0000a744 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a744:	b410      	push	{r4}
    a746:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    a748:	4c06      	ldr	r4, [pc, #24]	; (a764 <SdioCard::readCSD(csd_t*)+0x20>)
    a74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a74c:	f8cc 0000 	str.w	r0, [ip]
    a750:	f8cc 1004 	str.w	r1, [ip, #4]
    a754:	f8cc 2008 	str.w	r2, [ip, #8]
    a758:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    a75c:	2001      	movs	r0, #1
    a75e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a762:	4770      	bx	lr
    a764:	20004b48 	.word	0x20004b48

0000a768 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a768:	4b02      	ldr	r3, [pc, #8]	; (a774 <SdioCard::readOCR(unsigned long*)+0xc>)
    a76a:	681b      	ldr	r3, [r3, #0]
    a76c:	600b      	str	r3, [r1, #0]
  return true;
}
    a76e:	2001      	movs	r0, #1
    a770:	4770      	bx	lr
    a772:	bf00      	nop
    a774:	20004b58 	.word	0x20004b58

0000a778 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    a778:	4b17      	ldr	r3, [pc, #92]	; (a7d8 <SdioCard::sectorCount()+0x60>)
    a77a:	781b      	ldrb	r3, [r3, #0]
    a77c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a780:	d003      	beq.n	a78a <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
    a782:	2b40      	cmp	r3, #64	; 0x40
    a784:	d01b      	beq.n	a7be <SdioCard::sectorCount()+0x46>
    return 0;
    a786:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    a788:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a78a:	4a13      	ldr	r2, [pc, #76]	; (a7d8 <SdioCard::sectorCount()+0x60>)
    a78c:	7993      	ldrb	r3, [r2, #6]
    a78e:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a792:	79d0      	ldrb	r0, [r2, #7]
    a794:	0080      	lsls	r0, r0, #2
    a796:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    a79a:	7a13      	ldrb	r3, [r2, #8]
    a79c:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a7a0:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a7a2:	7a53      	ldrb	r3, [r2, #9]
    a7a4:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    a7a8:	7a91      	ldrb	r1, [r2, #10]
    a7aa:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a7ac:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a7b0:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a7b2:	f002 020f 	and.w	r2, r2, #15
    a7b6:	4413      	add	r3, r2
    a7b8:	3b07      	subs	r3, #7
    a7ba:	4098      	lsls	r0, r3
    a7bc:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a7be:	4b06      	ldr	r3, [pc, #24]	; (a7d8 <SdioCard::sectorCount()+0x60>)
    a7c0:	79da      	ldrb	r2, [r3, #7]
    a7c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a7c6:	7a58      	ldrb	r0, [r3, #9]
    a7c8:	3001      	adds	r0, #1
    a7ca:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    a7ce:	7a1b      	ldrb	r3, [r3, #8]
    a7d0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    a7d4:	0280      	lsls	r0, r0, #10
    a7d6:	4770      	bx	lr
    a7d8:	20004b48 	.word	0x20004b48

0000a7dc <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    a7dc:	4b04      	ldr	r3, [pc, #16]	; (a7f0 <SdioCard::type() const+0x14>)
    a7de:	781b      	ldrb	r3, [r3, #0]
    a7e0:	b123      	cbz	r3, a7ec <SdioCard::type() const+0x10>
    a7e2:	4b04      	ldr	r3, [pc, #16]	; (a7f4 <SdioCard::type() const+0x18>)
    a7e4:	7818      	ldrb	r0, [r3, #0]
    a7e6:	3002      	adds	r0, #2
    a7e8:	b2c0      	uxtb	r0, r0
    a7ea:	4770      	bx	lr
    a7ec:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    a7ee:	4770      	bx	lr
    a7f0:	20005328 	.word	0x20005328
    a7f4:	20005329 	.word	0x20005329

0000a7f8 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    a7f8:	4770      	bx	lr
	...

0000a7fc <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a7fe:	4604      	mov	r4, r0
  uint32_t m = micros();
    a800:	f002 fb38 	bl	ce74 <micros>
    a804:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a806:	4f05      	ldr	r7, [pc, #20]	; (a81c <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
    a808:	47a0      	blx	r4
    a80a:	4606      	mov	r6, r0
    a80c:	b120      	cbz	r0, a818 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    a80e:	f002 fb31 	bl	ce74 <micros>
    a812:	1b40      	subs	r0, r0, r5
    a814:	42b8      	cmp	r0, r7
    a816:	d9f7      	bls.n	a808 <waitTimeout(bool (*)())+0xc>
}
    a818:	4630      	mov	r0, r6
    a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a81c:	000f4240 	.word	0x000f4240

0000a820 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    a820:	b570      	push	{r4, r5, r6, lr}
    a822:	4604      	mov	r4, r0
    a824:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    a826:	4819      	ldr	r0, [pc, #100]	; (a88c <cardCommand(unsigned long, unsigned long)+0x6c>)
    a828:	f7ff ffe8 	bl	a7fc <waitTimeout(bool (*)())>
    a82c:	bb40      	cbnz	r0, a880 <cardCommand(unsigned long, unsigned long)+0x60>
    a82e:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
    a830:	4b17      	ldr	r3, [pc, #92]	; (a890 <cardCommand(unsigned long, unsigned long)+0x70>)
    a832:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    a834:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    a838:	d007      	beq.n	a84a <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    a83a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a83c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    a840:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    a842:	6c99      	ldr	r1, [r3, #72]	; 0x48
    a844:	b2e2      	uxtb	r2, r4
    a846:	430a      	orrs	r2, r1
    a848:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    a84a:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    a84e:	4b10      	ldr	r3, [pc, #64]	; (a890 <cardCommand(unsigned long, unsigned long)+0x70>)
    a850:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    a852:	4810      	ldr	r0, [pc, #64]	; (a894 <cardCommand(unsigned long, unsigned long)+0x74>)
    a854:	f7ff ffd2 	bl	a7fc <waitTimeout(bool (*)())>
    a858:	4601      	mov	r1, r0
    a85a:	b990      	cbnz	r0, a882 <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
    a85c:	4a0c      	ldr	r2, [pc, #48]	; (a890 <cardCommand(unsigned long, unsigned long)+0x70>)
    a85e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    a860:	4b0d      	ldr	r3, [pc, #52]	; (a898 <cardCommand(unsigned long, unsigned long)+0x78>)
    a862:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a864:	6818      	ldr	r0, [r3, #0]
    a866:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a868:	681b      	ldr	r3, [r3, #0]
    a86a:	f013 0f01 	tst.w	r3, #1
    a86e:	d00a      	beq.n	a886 <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    a870:	4b09      	ldr	r3, [pc, #36]	; (a898 <cardCommand(unsigned long, unsigned long)+0x78>)
    a872:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a874:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    a878:	bf0c      	ite	eq
    a87a:	2601      	moveq	r6, #1
    a87c:	2600      	movne	r6, #0
    a87e:	e000      	b.n	a882 <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
    a880:	2600      	movs	r6, #0
}
    a882:	4630      	mov	r0, r6
    a884:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    a886:	460e      	mov	r6, r1
    a888:	e7fb      	b.n	a882 <cardCommand(unsigned long, unsigned long)+0x62>
    a88a:	bf00      	nop
    a88c:	0000a5c9 	.word	0x0000a5c9
    a890:	402c0000 	.word	0x402c0000
    a894:	0000a5b1 	.word	0x0000a5b1
    a898:	20004b64 	.word	0x20004b64

0000a89c <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
    a89c:	b510      	push	{r4, lr}
    a89e:	b084      	sub	sp, #16
    a8a0:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
    a8a2:	4b19      	ldr	r3, [pc, #100]	; (a908 <readReg16(unsigned long, void*)+0x6c>)
    a8a4:	6819      	ldr	r1, [r3, #0]
    a8a6:	f7ff ffbb 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    a8aa:	b350      	cbz	r0, a902 <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    a8ac:	4b17      	ldr	r3, [pc, #92]	; (a90c <readReg16(unsigned long, void*)+0x70>)
    a8ae:	691a      	ldr	r2, [r3, #16]
    a8b0:	9200      	str	r2, [sp, #0]
    a8b2:	695a      	ldr	r2, [r3, #20]
    a8b4:	9201      	str	r2, [sp, #4]
    a8b6:	699a      	ldr	r2, [r3, #24]
    a8b8:	9202      	str	r2, [sp, #8]
    a8ba:	69db      	ldr	r3, [r3, #28]
    a8bc:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    a8be:	f104 0e0f 	add.w	lr, r4, #15
    a8c2:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    a8c4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    a8c8:	461a      	mov	r2, r3
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	bfb8      	it	lt
    a8ce:	1cda      	addlt	r2, r3, #3
    a8d0:	f022 0203 	bic.w	r2, r2, #3
    a8d4:	3210      	adds	r2, #16
    a8d6:	446a      	add	r2, sp
    a8d8:	4259      	negs	r1, r3
    a8da:	f003 0c03 	and.w	ip, r3, #3
    a8de:	f001 0103 	and.w	r1, r1, #3
    a8e2:	bf58      	it	pl
    a8e4:	f1c1 0c00 	rsbpl	ip, r1, #0
    a8e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a8ec:	f852 2c10 	ldr.w	r2, [r2, #-16]
    a8f0:	fa22 f20c 	lsr.w	r2, r2, ip
    a8f4:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
    a8f8:	3301      	adds	r3, #1
    a8fa:	2b0f      	cmp	r3, #15
    a8fc:	d1e2      	bne.n	a8c4 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    a8fe:	2300      	movs	r3, #0
    a900:	73e3      	strb	r3, [r4, #15]
}
    a902:	b004      	add	sp, #16
    a904:	bd10      	pop	{r4, pc}
    a906:	bf00      	nop
    a908:	20004b5c 	.word	0x20004b5c
    a90c:	402c0000 	.word	0x402c0000

0000a910 <statusCMD13()>:
static uint32_t statusCMD13() {
    a910:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a912:	4b05      	ldr	r3, [pc, #20]	; (a928 <statusCMD13()+0x18>)
    a914:	6819      	ldr	r1, [r3, #0]
    a916:	4805      	ldr	r0, [pc, #20]	; (a92c <statusCMD13()+0x1c>)
    a918:	f7ff ff82 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    a91c:	b110      	cbz	r0, a924 <statusCMD13()+0x14>
    a91e:	4b04      	ldr	r3, [pc, #16]	; (a930 <statusCMD13()+0x20>)
    a920:	6918      	ldr	r0, [r3, #16]
}
    a922:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    a924:	2000      	movs	r0, #0
    a926:	e7fc      	b.n	a922 <statusCMD13()+0x12>
    a928:	20004b5c 	.word	0x20004b5c
    a92c:	0d1a0000 	.word	0x0d1a0000
    a930:	402c0000 	.word	0x402c0000

0000a934 <isBusyCMD13()>:
static bool isBusyCMD13() {
    a934:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    a936:	f7ff ffeb 	bl	a910 <statusCMD13()>
    a93a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
    a93e:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a942:	bd08      	pop	{r3, pc}

0000a944 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    a944:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
    a946:	7a03      	ldrb	r3, [r0, #8]
    a948:	f013 0f01 	tst.w	r3, #1
    a94c:	d00b      	beq.n	a966 <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a94e:	4b0c      	ldr	r3, [pc, #48]	; (a980 <SdioCard::isBusy()+0x3c>)
    a950:	681b      	ldr	r3, [r3, #0]
    a952:	b10b      	cbz	r3, a958 <SdioCard::isBusy()+0x14>
    a954:	4798      	blx	r3
}
    a956:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    a958:	4b0a      	ldr	r3, [pc, #40]	; (a984 <SdioCard::isBusy()+0x40>)
    a95a:	7818      	ldrb	r0, [r3, #0]
    a95c:	2800      	cmp	r0, #0
    a95e:	d0fa      	beq.n	a956 <SdioCard::isBusy()+0x12>
    a960:	f7ff ffe8 	bl	a934 <isBusyCMD13()>
    a964:	e7f7      	b.n	a956 <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
    a966:	4b08      	ldr	r3, [pc, #32]	; (a988 <SdioCard::isBusy()+0x44>)
    a968:	781b      	ldrb	r3, [r3, #0]
    a96a:	b933      	cbnz	r3, a97a <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a96c:	4b07      	ldr	r3, [pc, #28]	; (a98c <SdioCard::isBusy()+0x48>)
    a96e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a970:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    a974:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a978:	e7ed      	b.n	a956 <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
    a97a:	f7ff fe51 	bl	a620 <isBusyTransferComplete()>
    a97e:	e7ea      	b.n	a956 <SdioCard::isBusy()+0x12>
    a980:	20004b60 	.word	0x20004b60
    a984:	20005327 	.word	0x20005327
    a988:	2000532a 	.word	0x2000532a
    a98c:	402c0000 	.word	0x402c0000

0000a990 <SdioCard::status()>:
uint32_t SdioCard::status() {
    a990:	b508      	push	{r3, lr}
  return statusCMD13();
    a992:	f7ff ffbd 	bl	a910 <statusCMD13()>
}
    a996:	bd08      	pop	{r3, pc}

0000a998 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a998:	b538      	push	{r3, r4, r5, lr}
    a99a:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    a99c:	4b2a      	ldr	r3, [pc, #168]	; (aa48 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    a99e:	7a9b      	ldrb	r3, [r3, #10]
    a9a0:	f013 0f40 	tst.w	r3, #64	; 0x40
    a9a4:	d113      	bne.n	a9ce <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    a9a6:	4a28      	ldr	r2, [pc, #160]	; (aa48 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    a9a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9ac:	7ad2      	ldrb	r2, [r2, #11]
    a9ae:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a9b0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a9b4:	1c62      	adds	r2, r4, #1
    a9b6:	430a      	orrs	r2, r1
    a9b8:	4213      	tst	r3, r2
    a9ba:	d008      	beq.n	a9ce <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    a9bc:	4b23      	ldr	r3, [pc, #140]	; (aa4c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a9be:	2227      	movs	r2, #39	; 0x27
    a9c0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a9c2:	4b23      	ldr	r3, [pc, #140]	; (aa50 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a9c4:	f240 22e3 	movw	r2, #739	; 0x2e3
    a9c8:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    a9ca:	2500      	movs	r5, #0
    a9cc:	e010      	b.n	a9f0 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
    a9ce:	4b21      	ldr	r3, [pc, #132]	; (aa54 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    a9d0:	781b      	ldrb	r3, [r3, #0]
    a9d2:	b90b      	cbnz	r3, a9d8 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    a9d4:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    a9d6:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    a9d8:	481f      	ldr	r0, [pc, #124]	; (aa58 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    a9da:	f7ff ff21 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    a9de:	4605      	mov	r5, r0
    a9e0:	b940      	cbnz	r0, a9f4 <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
    a9e2:	4b1a      	ldr	r3, [pc, #104]	; (aa4c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    a9e4:	220f      	movs	r2, #15
    a9e6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    a9e8:	4b19      	ldr	r3, [pc, #100]	; (aa50 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    a9ea:	f240 22eb 	movw	r2, #747	; 0x2eb
    a9ee:	601a      	str	r2, [r3, #0]
}
    a9f0:	4628      	mov	r0, r5
    a9f2:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    a9f4:	4621      	mov	r1, r4
    a9f6:	4819      	ldr	r0, [pc, #100]	; (aa5c <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    a9f8:	f7ff ff12 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    a9fc:	4605      	mov	r5, r0
    a9fe:	b938      	cbnz	r0, aa10 <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
    aa00:	4b12      	ldr	r3, [pc, #72]	; (aa4c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aa02:	2210      	movs	r2, #16
    aa04:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aa06:	4b12      	ldr	r3, [pc, #72]	; (aa50 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aa08:	f240 22ee 	movw	r2, #750	; 0x2ee
    aa0c:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
    aa0e:	e7ef      	b.n	a9f0 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    aa10:	2100      	movs	r1, #0
    aa12:	4813      	ldr	r0, [pc, #76]	; (aa60 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    aa14:	f7ff ff04 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    aa18:	4605      	mov	r5, r0
    aa1a:	b938      	cbnz	r0, aa2c <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
    aa1c:	4b0b      	ldr	r3, [pc, #44]	; (aa4c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aa1e:	2211      	movs	r2, #17
    aa20:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aa22:	4b0b      	ldr	r3, [pc, #44]	; (aa50 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aa24:	f240 22f1 	movw	r2, #753	; 0x2f1
    aa28:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    aa2a:	e7e1      	b.n	a9f0 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
    aa2c:	480d      	ldr	r0, [pc, #52]	; (aa64 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    aa2e:	f7ff fee5 	bl	a7fc <waitTimeout(bool (*)())>
    aa32:	2800      	cmp	r0, #0
    aa34:	d0dc      	beq.n	a9f0 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    aa36:	4b05      	ldr	r3, [pc, #20]	; (aa4c <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aa38:	2228      	movs	r2, #40	; 0x28
    aa3a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aa3c:	4b04      	ldr	r3, [pc, #16]	; (aa50 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aa3e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    aa42:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    aa44:	2500      	movs	r5, #0
    aa46:	e7d3      	b.n	a9f0 <SdioCard::erase(unsigned long, unsigned long)+0x58>
    aa48:	20004b48 	.word	0x20004b48
    aa4c:	200038d4 	.word	0x200038d4
    aa50:	20004b34 	.word	0x20004b34
    aa54:	20005329 	.word	0x20005329
    aa58:	201a0000 	.word	0x201a0000
    aa5c:	211a0000 	.word	0x211a0000
    aa60:	261b0000 	.word	0x261b0000
    aa64:	0000a935 	.word	0x0000a935

0000aa68 <waitTransferComplete()>:
static bool waitTransferComplete() {
    aa68:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    aa6a:	4b10      	ldr	r3, [pc, #64]	; (aaac <waitTransferComplete()+0x44>)
    aa6c:	781c      	ldrb	r4, [r3, #0]
    aa6e:	b914      	cbnz	r4, aa76 <waitTransferComplete()+0xe>
    return true;
    aa70:	2401      	movs	r4, #1
}
    aa72:	4620      	mov	r0, r4
    aa74:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    aa76:	480e      	ldr	r0, [pc, #56]	; (aab0 <waitTransferComplete()+0x48>)
    aa78:	f7ff fec0 	bl	a7fc <waitTimeout(bool (*)())>
  m_transferActive = false;
    aa7c:	4b0b      	ldr	r3, [pc, #44]	; (aaac <waitTransferComplete()+0x44>)
    aa7e:	2200      	movs	r2, #0
    aa80:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
    aa82:	4b0c      	ldr	r3, [pc, #48]	; (aab4 <waitTransferComplete()+0x4c>)
    aa84:	6b19      	ldr	r1, [r3, #48]	; 0x30
    aa86:	4a0c      	ldr	r2, [pc, #48]	; (aab8 <waitTransferComplete()+0x50>)
    aa88:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    aa8a:	6812      	ldr	r2, [r2, #0]
    aa8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    aa8e:	b920      	cbnz	r0, aa9a <waitTransferComplete()+0x32>
    aa90:	4b09      	ldr	r3, [pc, #36]	; (aab8 <waitTransferComplete()+0x50>)
    aa92:	681a      	ldr	r2, [r3, #0]
    aa94:	4b09      	ldr	r3, [pc, #36]	; (aabc <waitTransferComplete()+0x54>)
    aa96:	421a      	tst	r2, r3
    aa98:	d0eb      	beq.n	aa72 <waitTransferComplete()+0xa>
  m_errorCode = code;
    aa9a:	4b09      	ldr	r3, [pc, #36]	; (aac0 <waitTransferComplete()+0x58>)
    aa9c:	221f      	movs	r2, #31
    aa9e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aaa0:	4b08      	ldr	r3, [pc, #32]	; (aac4 <waitTransferComplete()+0x5c>)
    aaa2:	f240 227a 	movw	r2, #634	; 0x27a
    aaa6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    aaa8:	2400      	movs	r4, #0
    aaaa:	e7e2      	b.n	aa72 <waitTransferComplete()+0xa>
    aaac:	2000532a 	.word	0x2000532a
    aab0:	0000a621 	.word	0x0000a621
    aab4:	402c0000 	.word	0x402c0000
    aab8:	20004b64 	.word	0x20004b64
    aabc:	117f0000 	.word	0x117f0000
    aac0:	200038d4 	.word	0x200038d4
    aac4:	20004b34 	.word	0x20004b34

0000aac8 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    aac8:	b538      	push	{r3, r4, r5, lr}
    aaca:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    aacc:	f7ff ffcc 	bl	aa68 <waitTransferComplete()>
    aad0:	4604      	mov	r4, r0
    aad2:	b1f0      	cbz	r0, ab12 <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    aad4:	4b1c      	ldr	r3, [pc, #112]	; (ab48 <SdioCard::writeData(unsigned char const*)+0x80>)
    aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aad8:	f413 7f80 	tst.w	r3, #256	; 0x100
    aadc:	d108      	bne.n	aaf0 <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    aade:	4b1a      	ldr	r3, [pc, #104]	; (ab48 <SdioCard::writeData(unsigned char const*)+0x80>)
    aae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    aae6:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    aae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    aaea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    aaee:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    aaf0:	4a15      	ldr	r2, [pc, #84]	; (ab48 <SdioCard::writeData(unsigned char const*)+0x80>)
    aaf2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    aaf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    aaf8:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    aafa:	4814      	ldr	r0, [pc, #80]	; (ab4c <SdioCard::writeData(unsigned char const*)+0x84>)
    aafc:	f7ff fe7e 	bl	a7fc <waitTimeout(bool (*)())>
    ab00:	b148      	cbz	r0, ab16 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
    ab02:	4b13      	ldr	r3, [pc, #76]	; (ab50 <SdioCard::writeData(unsigned char const*)+0x88>)
    ab04:	2221      	movs	r2, #33	; 0x21
    ab06:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ab08:	4b12      	ldr	r3, [pc, #72]	; (ab54 <SdioCard::writeData(unsigned char const*)+0x8c>)
    ab0a:	f240 32d9 	movw	r2, #985	; 0x3d9
    ab0e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    ab10:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    ab12:	4620      	mov	r0, r4
    ab14:	bd38      	pop	{r3, r4, r5, pc}
    ab16:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    ab1a:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    ab1e:	480a      	ldr	r0, [pc, #40]	; (ab48 <SdioCard::writeData(unsigned char const*)+0x80>)
    ab20:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ab22:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ab26:	d0fb      	beq.n	ab20 <SdioCard::writeData(unsigned char const*)+0x58>
    ab28:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
    ab2c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ab30:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ab32:	4563      	cmp	r3, ip
    ab34:	d1fa      	bne.n	ab2c <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    ab36:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    ab3a:	458c      	cmp	ip, r1
    ab3c:	d1f0      	bne.n	ab20 <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
    ab3e:	4b06      	ldr	r3, [pc, #24]	; (ab58 <SdioCard::writeData(unsigned char const*)+0x90>)
    ab40:	2201      	movs	r2, #1
    ab42:	701a      	strb	r2, [r3, #0]
  return true;
    ab44:	e7e5      	b.n	ab12 <SdioCard::writeData(unsigned char const*)+0x4a>
    ab46:	bf00      	nop
    ab48:	402c0000 	.word	0x402c0000
    ab4c:	0000a60d 	.word	0x0000a60d
    ab50:	200038d4 	.word	0x200038d4
    ab54:	20004b34 	.word	0x20004b34
    ab58:	2000532a 	.word	0x2000532a

0000ab5c <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab5e:	4604      	mov	r4, r0
  m_busyFcn = fcn;
    ab60:	4b0a      	ldr	r3, [pc, #40]	; (ab8c <yieldTimeout(bool (*)())+0x30>)
    ab62:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
    ab64:	f002 f986 	bl	ce74 <micros>
    ab68:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab6a:	4f09      	ldr	r7, [pc, #36]	; (ab90 <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
    ab6c:	e001      	b.n	ab72 <yieldTimeout(bool (*)())+0x16>
    yield();
    ab6e:	f004 f89f 	bl	ecb0 <yield>
  while (fcn()) {
    ab72:	47a0      	blx	r4
    ab74:	4606      	mov	r6, r0
    ab76:	b120      	cbz	r0, ab82 <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab78:	f002 f97c 	bl	ce74 <micros>
    ab7c:	1b40      	subs	r0, r0, r5
    ab7e:	42b8      	cmp	r0, r7
    ab80:	d9f5      	bls.n	ab6e <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
    ab82:	4b02      	ldr	r3, [pc, #8]	; (ab8c <yieldTimeout(bool (*)())+0x30>)
    ab84:	2200      	movs	r2, #0
    ab86:	601a      	str	r2, [r3, #0]
}
    ab88:	4630      	mov	r0, r6
    ab8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ab8c:	20004b60 	.word	0x20004b60
    ab90:	000f4240 	.word	0x000f4240

0000ab94 <waitDmaStatus()>:
static bool waitDmaStatus() {
    ab94:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    ab96:	4809      	ldr	r0, [pc, #36]	; (abbc <waitDmaStatus()+0x28>)
    ab98:	f7ff ffe0 	bl	ab5c <yieldTimeout(bool (*)())>
    ab9c:	b960      	cbnz	r0, abb8 <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    ab9e:	4b08      	ldr	r3, [pc, #32]	; (abc0 <waitDmaStatus()+0x2c>)
    aba0:	681b      	ldr	r3, [r3, #0]
    aba2:	f013 0f02 	tst.w	r3, #2
    aba6:	d008      	beq.n	abba <waitDmaStatus()+0x26>
    aba8:	4b05      	ldr	r3, [pc, #20]	; (abc0 <waitDmaStatus()+0x2c>)
    abaa:	681a      	ldr	r2, [r3, #0]
    abac:	4b05      	ldr	r3, [pc, #20]	; (abc4 <waitDmaStatus()+0x30>)
    abae:	421a      	tst	r2, r3
    abb0:	bf0c      	ite	eq
    abb2:	2001      	moveq	r0, #1
    abb4:	2000      	movne	r0, #0
    abb6:	e000      	b.n	abba <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
    abb8:	2000      	movs	r0, #0
}
    abba:	bd08      	pop	{r3, pc}
    abbc:	0000a5ed 	.word	0x0000a5ed
    abc0:	20004b64 	.word	0x20004b64
    abc4:	117f0000 	.word	0x117f0000

0000abc8 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    abc8:	b538      	push	{r3, r4, r5, lr}
    abca:	4605      	mov	r5, r0
    abcc:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
    abce:	4819      	ldr	r0, [pc, #100]	; (ac34 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    abd0:	f7ff fe14 	bl	a7fc <waitTimeout(bool (*)())>
    abd4:	b140      	cbz	r0, abe8 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    abd6:	4b18      	ldr	r3, [pc, #96]	; (ac38 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    abd8:	220a      	movs	r2, #10
    abda:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    abdc:	4b17      	ldr	r3, [pc, #92]	; (ac3c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    abde:	f44f 72cc 	mov.w	r2, #408	; 0x198
    abe2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    abe4:	2000      	movs	r0, #0
}
    abe6:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    abe8:	4b15      	ldr	r3, [pc, #84]	; (ac40 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    abea:	2201      	movs	r2, #1
    abec:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    abee:	4b15      	ldr	r3, [pc, #84]	; (ac44 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    abf0:	2200      	movs	r2, #0
    abf2:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    abf4:	4b14      	ldr	r3, [pc, #80]	; (ac48 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    abf6:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    abf8:	4a14      	ldr	r2, [pc, #80]	; (ac4c <cardCMD6(unsigned long, unsigned char*)+0x84>)
    abfa:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    abfc:	4a14      	ldr	r2, [pc, #80]	; (ac50 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    abfe:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    ac00:	4629      	mov	r1, r5
    ac02:	4814      	ldr	r0, [pc, #80]	; (ac54 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    ac04:	f7ff fe0c 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    ac08:	b938      	cbnz	r0, ac1a <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    ac0a:	4b0b      	ldr	r3, [pc, #44]	; (ac38 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ac0c:	2204      	movs	r2, #4
    ac0e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac10:	4b0a      	ldr	r3, [pc, #40]	; (ac3c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ac12:	f240 129f 	movw	r2, #415	; 0x19f
    ac16:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
    ac18:	e7e5      	b.n	abe6 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    ac1a:	f7ff ffbb 	bl	ab94 <waitDmaStatus()>
    ac1e:	2800      	cmp	r0, #0
    ac20:	d1e1      	bne.n	abe6 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    ac22:	4b05      	ldr	r3, [pc, #20]	; (ac38 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    ac24:	2225      	movs	r2, #37	; 0x25
    ac26:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac28:	4b04      	ldr	r3, [pc, #16]	; (ac3c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    ac2a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    ac2e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    ac30:	e7d9      	b.n	abe6 <cardCMD6(unsigned long, unsigned char*)+0x1e>
    ac32:	bf00      	nop
    ac34:	0000a935 	.word	0x0000a935
    ac38:	200038d4 	.word	0x200038d4
    ac3c:	20004b34 	.word	0x20004b34
    ac40:	2000532b 	.word	0x2000532b
    ac44:	20004b64 	.word	0x20004b64
    ac48:	402c0000 	.word	0x402c0000
    ac4c:	00010040 	.word	0x00010040
    ac50:	117f0002 	.word	0x117f0002
    ac54:	063a0011 	.word	0x063a0011

0000ac58 <transferStop()>:
static bool transferStop() {
    ac58:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ac5a:	4a19      	ldr	r2, [pc, #100]	; (acc0 <transferStop()+0x68>)
    ac5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ac5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ac62:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ac64:	2100      	movs	r1, #0
    ac66:	4817      	ldr	r0, [pc, #92]	; (acc4 <transferStop()+0x6c>)
    ac68:	f7ff fdda 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    ac6c:	4604      	mov	r4, r0
    ac6e:	b940      	cbnz	r0, ac82 <transferStop()+0x2a>
  m_errorCode = code;
    ac70:	4b15      	ldr	r3, [pc, #84]	; (acc8 <transferStop()+0x70>)
    ac72:	2209      	movs	r2, #9
    ac74:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac76:	4b15      	ldr	r3, [pc, #84]	; (accc <transferStop()+0x74>)
    ac78:	f240 223d 	movw	r2, #573	; 0x23d
    ac7c:	601a      	str	r2, [r3, #0]
}
    ac7e:	4620      	mov	r0, r4
    ac80:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
    ac82:	4813      	ldr	r0, [pc, #76]	; (acd0 <transferStop()+0x78>)
    ac84:	f7ff ff6a 	bl	ab5c <yieldTimeout(bool (*)())>
    ac88:	b140      	cbz	r0, ac9c <transferStop()+0x44>
  m_errorCode = code;
    ac8a:	4b0f      	ldr	r3, [pc, #60]	; (acc8 <transferStop()+0x70>)
    ac8c:	220a      	movs	r2, #10
    ac8e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ac90:	4b0e      	ldr	r3, [pc, #56]	; (accc <transferStop()+0x74>)
    ac92:	f44f 7210 	mov.w	r2, #576	; 0x240
    ac96:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    ac98:	2400      	movs	r4, #0
    ac9a:	e7f0      	b.n	ac7e <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    ac9c:	4b08      	ldr	r3, [pc, #32]	; (acc0 <transferStop()+0x68>)
    ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aca0:	f013 0f02 	tst.w	r3, #2
    aca4:	d0eb      	beq.n	ac7e <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    aca6:	4b06      	ldr	r3, [pc, #24]	; (acc0 <transferStop()+0x68>)
    aca8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    acaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    acac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    acb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    acb2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    acb6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    acb8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    acba:	629a      	str	r2, [r3, #40]	; 0x28
    acbc:	e7df      	b.n	ac7e <transferStop()+0x26>
    acbe:	bf00      	nop
    acc0:	402c0000 	.word	0x402c0000
    acc4:	0cdb0000 	.word	0x0cdb0000
    acc8:	200038d4 	.word	0x200038d4
    accc:	20004b34 	.word	0x20004b34
    acd0:	0000a5d9 	.word	0x0000a5d9

0000acd4 <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    acd4:	b508      	push	{r3, lr}
  return transferStop();
    acd6:	f7ff ffbf 	bl	ac58 <transferStop()>
}
    acda:	bd08      	pop	{r3, pc}

0000acdc <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
    acdc:	b510      	push	{r4, lr}
    acde:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    ace0:	4813      	ldr	r0, [pc, #76]	; (ad30 <SdioCard::writeStart(unsigned long)+0x54>)
    ace2:	f7ff ff3b 	bl	ab5c <yieldTimeout(bool (*)())>
    ace6:	b140      	cbz	r0, acfa <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    ace8:	4b12      	ldr	r3, [pc, #72]	; (ad34 <SdioCard::writeStart(unsigned long)+0x58>)
    acea:	220a      	movs	r2, #10
    acec:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    acee:	4b12      	ldr	r3, [pc, #72]	; (ad38 <SdioCard::writeStart(unsigned long)+0x5c>)
    acf0:	f240 422c 	movw	r2, #1068	; 0x42c
    acf4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    acf6:	2000      	movs	r0, #0
}
    acf8:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    acfa:	4b10      	ldr	r3, [pc, #64]	; (ad3c <SdioCard::writeStart(unsigned long)+0x60>)
    acfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    acfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ad02:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ad04:	f44f 7200 	mov.w	r2, #512	; 0x200
    ad08:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ad0a:	4b0d      	ldr	r3, [pc, #52]	; (ad40 <SdioCard::writeStart(unsigned long)+0x64>)
    ad0c:	781b      	ldrb	r3, [r3, #0]
    ad0e:	b903      	cbnz	r3, ad12 <SdioCard::writeStart(unsigned long)+0x36>
    ad10:	0264      	lsls	r4, r4, #9
    ad12:	4621      	mov	r1, r4
    ad14:	480b      	ldr	r0, [pc, #44]	; (ad44 <SdioCard::writeStart(unsigned long)+0x68>)
    ad16:	f7ff fd83 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    ad1a:	2800      	cmp	r0, #0
    ad1c:	d1ec      	bne.n	acf8 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    ad1e:	4b05      	ldr	r3, [pc, #20]	; (ad34 <SdioCard::writeStart(unsigned long)+0x58>)
    ad20:	220e      	movs	r2, #14
    ad22:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ad24:	4b04      	ldr	r3, [pc, #16]	; (ad38 <SdioCard::writeStart(unsigned long)+0x5c>)
    ad26:	f44f 6287 	mov.w	r2, #1080	; 0x438
    ad2a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    ad2c:	e7e4      	b.n	acf8 <SdioCard::writeStart(unsigned long)+0x1c>
    ad2e:	bf00      	nop
    ad30:	0000a935 	.word	0x0000a935
    ad34:	200038d4 	.word	0x200038d4
    ad38:	20004b34 	.word	0x20004b34
    ad3c:	402c0000 	.word	0x402c0000
    ad40:	20005329 	.word	0x20005329
    ad44:	193a0020 	.word	0x193a0020

0000ad48 <SdioCard::~SdioCard()>:
    ad48:	b510      	push	{r4, lr}
    ad4a:	4604      	mov	r4, r0
    ad4c:	210c      	movs	r1, #12
    ad4e:	f002 f9ed 	bl	d12c <operator delete(void*, unsigned int)>
    ad52:	4620      	mov	r0, r4
    ad54:	bd10      	pop	{r4, pc}
	...

0000ad58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad5c:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    ad5e:	f012 0203 	ands.w	r2, r2, #3
    ad62:	bf18      	it	ne
    ad64:	2201      	movne	r2, #1
    ad66:	2b00      	cmp	r3, #0
    ad68:	bf14      	ite	ne
    ad6a:	4615      	movne	r5, r2
    ad6c:	f042 0501 	orreq.w	r5, r2, #1
    ad70:	b155      	cbz	r5, ad88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
    ad72:	4b1c      	ldr	r3, [pc, #112]	; (ade4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    ad74:	2225      	movs	r2, #37	; 0x25
    ad76:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ad78:	4b1b      	ldr	r3, [pc, #108]	; (ade8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    ad7a:	f240 12f5 	movw	r2, #501	; 0x1f5
    ad7e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    ad80:	2500      	movs	r5, #0
}
    ad82:	4628      	mov	r0, r5
    ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad88:	4607      	mov	r7, r0
    ad8a:	460e      	mov	r6, r1
    ad8c:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
    ad8e:	4817      	ldr	r0, [pc, #92]	; (adec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    ad90:	f7ff fee4 	bl	ab5c <yieldTimeout(bool (*)())>
    ad94:	b138      	cbz	r0, ada6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
    ad96:	4b13      	ldr	r3, [pc, #76]	; (ade4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    ad98:	220a      	movs	r2, #10
    ad9a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ad9c:	4b12      	ldr	r3, [pc, #72]	; (ade8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    ad9e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    ada2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    ada4:	e7ed      	b.n	ad82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
    ada6:	4b12      	ldr	r3, [pc, #72]	; (adf0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    ada8:	2201      	movs	r2, #1
    adaa:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    adac:	4b11      	ldr	r3, [pc, #68]	; (adf4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    adae:	2200      	movs	r2, #0
    adb0:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
    adb2:	4a11      	ldr	r2, [pc, #68]	; (adf8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    adb4:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    adb6:	4b11      	ldr	r3, [pc, #68]	; (adfc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    adb8:	ea03 4308 	and.w	r3, r3, r8, lsl #16
    adbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    adc0:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    adc2:	4b0f      	ldr	r3, [pc, #60]	; (ae00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
    adc4:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    adc6:	4b0f      	ldr	r3, [pc, #60]	; (ae04 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    adc8:	781b      	ldrb	r3, [r3, #0]
    adca:	b903      	cbnz	r3, adce <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
    adcc:	0276      	lsls	r6, r6, #9
    adce:	4631      	mov	r1, r6
    add0:	4638      	mov	r0, r7
    add2:	f7ff fd25 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    add6:	4605      	mov	r5, r0
    add8:	2800      	cmp	r0, #0
    adda:	d0d2      	beq.n	ad82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
    addc:	f7ff feda 	bl	ab94 <waitDmaStatus()>
    ade0:	4605      	mov	r5, r0
    ade2:	e7ce      	b.n	ad82 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
    ade4:	200038d4 	.word	0x200038d4
    ade8:	20004b34 	.word	0x20004b34
    adec:	0000a935 	.word	0x0000a935
    adf0:	2000532b 	.word	0x2000532b
    adf4:	20004b64 	.word	0x20004b64
    adf8:	402c0000 	.word	0x402c0000
    adfc:	1fff0000 	.word	0x1fff0000
    ae00:	117f0002 	.word	0x117f0002
    ae04:	20005329 	.word	0x20005329

0000ae08 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae0a:	4606      	mov	r6, r0
    ae0c:	460c      	mov	r4, r1
    ae0e:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    ae10:	7a02      	ldrb	r2, [r0, #8]
    ae12:	f012 0f01 	tst.w	r2, #1
    ae16:	d112      	bne.n	ae3e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    ae18:	b17b      	cbz	r3, ae3a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    ae1a:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
    ae1c:	6833      	ldr	r3, [r6, #0]
    ae1e:	691b      	ldr	r3, [r3, #16]
    ae20:	462a      	mov	r2, r5
    ae22:	4621      	mov	r1, r4
    ae24:	4630      	mov	r0, r6
    ae26:	4798      	blx	r3
    ae28:	4603      	mov	r3, r0
    ae2a:	b120      	cbz	r0, ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    ae2c:	3401      	adds	r4, #1
    ae2e:	f505 7500 	add.w	r5, r5, #512	; 0x200
    ae32:	42a7      	cmp	r7, r4
    ae34:	d1f2      	bne.n	ae1c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
    ae36:	4618      	mov	r0, r3
    ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    ae3a:	2301      	movs	r3, #1
    ae3c:	e7fb      	b.n	ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
    ae3e:	f015 0f03 	tst.w	r5, #3
    ae42:	d010      	beq.n	ae66 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    ae44:	b1f3      	cbz	r3, ae84 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    ae46:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
    ae48:	6833      	ldr	r3, [r6, #0]
    ae4a:	691b      	ldr	r3, [r3, #16]
    ae4c:	462a      	mov	r2, r5
    ae4e:	4621      	mov	r1, r4
    ae50:	4630      	mov	r0, r6
    ae52:	4798      	blx	r3
    ae54:	4603      	mov	r3, r0
    ae56:	2800      	cmp	r0, #0
    ae58:	d0ed      	beq.n	ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    ae5a:	3401      	adds	r4, #1
    ae5c:	f505 7500 	add.w	r5, r5, #512	; 0x200
    ae60:	42bc      	cmp	r4, r7
    ae62:	d1f1      	bne.n	ae48 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
    ae64:	e7e7      	b.n	ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    ae66:	462a      	mov	r2, r5
    ae68:	4807      	ldr	r0, [pc, #28]	; (ae88 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    ae6a:	f7ff ff75 	bl	ad58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ae6e:	4603      	mov	r3, r0
    ae70:	2800      	cmp	r0, #0
    ae72:	d1e0      	bne.n	ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
    ae74:	4a05      	ldr	r2, [pc, #20]	; (ae8c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    ae76:	210c      	movs	r1, #12
    ae78:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ae7a:	4a05      	ldr	r2, [pc, #20]	; (ae90 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
    ae7c:	f240 3182 	movw	r1, #898	; 0x382
    ae80:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    ae82:	e7d8      	b.n	ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
    ae84:	2301      	movs	r3, #1
    ae86:	e7d6      	b.n	ae36 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    ae88:	123a0037 	.word	0x123a0037
    ae8c:	200038d4 	.word	0x200038d4
    ae90:	20004b34 	.word	0x20004b34

0000ae94 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    ae94:	b570      	push	{r4, r5, r6, lr}
    ae96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    ae9a:	460e      	mov	r6, r1
    ae9c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    ae9e:	7a03      	ldrb	r3, [r0, #8]
    aea0:	f013 0f01 	tst.w	r3, #1
    aea4:	d01c      	beq.n	aee0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    aea6:	f012 0f03 	tst.w	r2, #3
    aeaa:	d006      	beq.n	aeba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    aeac:	f44f 7200 	mov.w	r2, #512	; 0x200
    aeb0:	4629      	mov	r1, r5
    aeb2:	4668      	mov	r0, sp
    aeb4:	f002 f89c 	bl	cff0 <memcpy>
      ptr = aligned;
    aeb8:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    aeba:	2301      	movs	r3, #1
    aebc:	462a      	mov	r2, r5
    aebe:	4631      	mov	r1, r6
    aec0:	481d      	ldr	r0, [pc, #116]	; (af38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    aec2:	f7ff ff49 	bl	ad58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    aec6:	4603      	mov	r3, r0
    aec8:	b930      	cbnz	r0, aed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    aeca:	4a1c      	ldr	r2, [pc, #112]	; (af3c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
    aecc:	210d      	movs	r1, #13
    aece:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    aed0:	4a1b      	ldr	r2, [pc, #108]	; (af40 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    aed2:	f240 31f2 	movw	r1, #1010	; 0x3f2
    aed6:	6011      	str	r1, [r2, #0]
}
    aed8:	4618      	mov	r0, r3
    aeda:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    aede:	bd70      	pop	{r4, r5, r6, pc}
    aee0:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    aee2:	f7ff fdc1 	bl	aa68 <waitTransferComplete()>
    aee6:	4603      	mov	r3, r0
    aee8:	2800      	cmp	r0, #0
    aeea:	d0f5      	beq.n	aed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    aeec:	7a63      	ldrb	r3, [r4, #9]
    aeee:	2b02      	cmp	r3, #2
    aef0:	d01d      	beq.n	af2e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    aef2:	6823      	ldr	r3, [r4, #0]
    aef4:	6a1b      	ldr	r3, [r3, #32]
    aef6:	4620      	mov	r0, r4
    aef8:	4798      	blx	r3
    aefa:	4603      	mov	r3, r0
    aefc:	2800      	cmp	r0, #0
    aefe:	d0eb      	beq.n	aed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    af00:	6823      	ldr	r3, [r4, #0]
    af02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    af04:	4631      	mov	r1, r6
    af06:	4620      	mov	r0, r4
    af08:	4798      	blx	r3
    af0a:	4603      	mov	r3, r0
    af0c:	2800      	cmp	r0, #0
    af0e:	d0e3      	beq.n	aed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
    af10:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    af12:	2302      	movs	r3, #2
    af14:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
    af16:	6823      	ldr	r3, [r4, #0]
    af18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    af1a:	4629      	mov	r1, r5
    af1c:	4620      	mov	r0, r4
    af1e:	4798      	blx	r3
    af20:	4603      	mov	r3, r0
    af22:	2800      	cmp	r0, #0
    af24:	d0d8      	beq.n	aed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    af26:	6862      	ldr	r2, [r4, #4]
    af28:	3201      	adds	r2, #1
    af2a:	6062      	str	r2, [r4, #4]
    af2c:	e7d4      	b.n	aed8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    af2e:	6863      	ldr	r3, [r4, #4]
    af30:	42b3      	cmp	r3, r6
    af32:	d1de      	bne.n	aef2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    af34:	e7ef      	b.n	af16 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
    af36:	bf00      	nop
    af38:	183a0001 	.word	0x183a0001
    af3c:	200038d4 	.word	0x200038d4
    af40:	20004b34 	.word	0x20004b34

0000af44 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af46:	4606      	mov	r6, r0
    af48:	460c      	mov	r4, r1
    af4a:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    af4c:	7a02      	ldrb	r2, [r0, #8]
    af4e:	f012 0f01 	tst.w	r2, #1
    af52:	d112      	bne.n	af7a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    af54:	b17b      	cbz	r3, af76 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    af56:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
    af58:	6833      	ldr	r3, [r6, #0]
    af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af5c:	462a      	mov	r2, r5
    af5e:	4621      	mov	r1, r4
    af60:	4630      	mov	r0, r6
    af62:	4798      	blx	r3
    af64:	4603      	mov	r3, r0
    af66:	b120      	cbz	r0, af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    af68:	3401      	adds	r4, #1
    af6a:	f505 7500 	add.w	r5, r5, #512	; 0x200
    af6e:	42a7      	cmp	r7, r4
    af70:	d1f2      	bne.n	af58 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
    af72:	4618      	mov	r0, r3
    af74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    af76:	2301      	movs	r3, #1
    af78:	e7fb      	b.n	af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
    af7a:	f015 0f03 	tst.w	r5, #3
    af7e:	d010      	beq.n	afa2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    af80:	b1f3      	cbz	r3, afc0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
    af82:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
    af84:	6833      	ldr	r3, [r6, #0]
    af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af88:	462a      	mov	r2, r5
    af8a:	4621      	mov	r1, r4
    af8c:	4630      	mov	r0, r6
    af8e:	4798      	blx	r3
    af90:	4603      	mov	r3, r0
    af92:	2800      	cmp	r0, #0
    af94:	d0ed      	beq.n	af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    af96:	3401      	adds	r4, #1
    af98:	f505 7500 	add.w	r5, r5, #512	; 0x200
    af9c:	42bc      	cmp	r4, r7
    af9e:	d1f1      	bne.n	af84 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    afa0:	e7e7      	b.n	af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    afa2:	462a      	mov	r2, r5
    afa4:	4807      	ldr	r0, [pc, #28]	; (afc4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    afa6:	f7ff fed7 	bl	ad58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    afaa:	4603      	mov	r3, r0
    afac:	2800      	cmp	r0, #0
    afae:	d1e0      	bne.n	af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
    afb0:	4a05      	ldr	r2, [pc, #20]	; (afc8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    afb2:	210e      	movs	r1, #14
    afb4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    afb6:	4a05      	ldr	r2, [pc, #20]	; (afcc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
    afb8:	f240 411e 	movw	r1, #1054	; 0x41e
    afbc:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    afbe:	e7d8      	b.n	af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
    afc0:	2301      	movs	r3, #1
    afc2:	e7d6      	b.n	af72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    afc4:	193a0027 	.word	0x193a0027
    afc8:	200038d4 	.word	0x200038d4
    afcc:	20004b34 	.word	0x20004b34

0000afd0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    afd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afd4:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
    afd6:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    afd8:	2300      	movs	r3, #0
    afda:	7243      	strb	r3, [r0, #9]
  m_initDone = false;
    afdc:	4aae      	ldr	r2, [pc, #696]	; (b298 <SdioCard::begin(SdioConfig)+0x2c8>)
    afde:	7013      	strb	r3, [r2, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    afe0:	4aae      	ldr	r2, [pc, #696]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    afe2:	7013      	strb	r3, [r2, #0]
  m_highCapacity = false;
    afe4:	4aae      	ldr	r2, [pc, #696]	; (b2a0 <SdioCard::begin(SdioConfig)+0x2d0>)
    afe6:	7013      	strb	r3, [r2, #0]
  m_version2 = false;
    afe8:	4aae      	ldr	r2, [pc, #696]	; (b2a4 <SdioCard::begin(SdioConfig)+0x2d4>)
    afea:	7013      	strb	r3, [r2, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    afec:	4bae      	ldr	r3, [pc, #696]	; (b2a8 <SdioCard::begin(SdioConfig)+0x2d8>)
    afee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    aff2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    aff6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    affa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    affe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    b002:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b006:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b00a:	f042 0218 	orr.w	r2, r2, #24
    b00e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b012:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b01a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b01e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
    b022:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b026:	f042 020c 	orr.w	r2, r2, #12
    b02a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b030:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b034:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b036:	69da      	ldr	r2, [r3, #28]
    b038:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b03c:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b044:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    b046:	2005      	movs	r0, #5
    b048:	f7ff faa2 	bl	a590 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    b04c:	4b97      	ldr	r3, [pc, #604]	; (b2ac <SdioCard::begin(SdioConfig)+0x2dc>)
    b04e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b050:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b054:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b058:	4a95      	ldr	r2, [pc, #596]	; (b2b0 <SdioCard::begin(SdioConfig)+0x2e0>)
    b05a:	430a      	orrs	r2, r1
    b05c:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b05e:	461a      	mov	r2, r3
    b060:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b062:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    b066:	d1fb      	bne.n	b060 <SdioCard::begin(SdioConfig)+0x90>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b068:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b06c:	f7ff fae4 	bl	a638 <setSdclk(unsigned long)>
    gpioMux(0);
    b070:	2000      	movs	r0, #0
    b072:	f7ff fa8d 	bl	a590 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b076:	4b8f      	ldr	r3, [pc, #572]	; (b2b4 <SdioCard::begin(SdioConfig)+0x2e4>)
    b078:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b07c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b080:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b084:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b088:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b08c:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b090:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b094:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b098:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
    b09c:	4a86      	ldr	r2, [pc, #536]	; (b2b8 <SdioCard::begin(SdioConfig)+0x2e8>)
    b09e:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b0a0:	4a86      	ldr	r2, [pc, #536]	; (b2bc <SdioCard::begin(SdioConfig)+0x2ec>)
    b0a2:	4987      	ldr	r1, [pc, #540]	; (b2c0 <SdioCard::begin(SdioConfig)+0x2f0>)
    b0a4:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b0a8:	4a86      	ldr	r2, [pc, #536]	; (b2c4 <SdioCard::begin(SdioConfig)+0x2f4>)
    b0aa:	2160      	movs	r1, #96	; 0x60
    b0ac:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b0b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b0b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b0b8:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b0be:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    b0c2:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b0c4:	461a      	mov	r2, r3
    b0c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b0c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    b0cc:	d1fb      	bne.n	b0c6 <SdioCard::begin(SdioConfig)+0xf6>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b0ce:	2100      	movs	r1, #0
    b0d0:	4608      	mov	r0, r1
    b0d2:	f7ff fba5 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b0d6:	4604      	mov	r4, r0
    b0d8:	b950      	cbnz	r0, b0f0 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    b0da:	4b70      	ldr	r3, [pc, #448]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b0dc:	2201      	movs	r2, #1
    b0de:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0e0:	4b79      	ldr	r3, [pc, #484]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b0e2:	f240 228e 	movw	r2, #654	; 0x28e
    b0e6:	601a      	str	r2, [r3, #0]
}
    b0e8:	4620      	mov	r0, r4
    b0ea:	b010      	add	sp, #64	; 0x40
    b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b0f0:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b0f2:	4e76      	ldr	r6, [pc, #472]	; (b2cc <SdioCard::begin(SdioConfig)+0x2fc>)
    b0f4:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
    b0f8:	4629      	mov	r1, r5
    b0fa:	4630      	mov	r0, r6
    b0fc:	f7ff fb90 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b100:	b980      	cbnz	r0, b124 <SdioCard::begin(SdioConfig)+0x154>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b102:	3c01      	subs	r4, #1
    b104:	d1f8      	bne.n	b0f8 <SdioCard::begin(SdioConfig)+0x128>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b106:	4b67      	ldr	r3, [pc, #412]	; (b2a4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b108:	781b      	ldrb	r3, [r3, #0]
    b10a:	2b00      	cmp	r3, #0
    b10c:	4d70      	ldr	r5, [pc, #448]	; (b2d0 <SdioCard::begin(SdioConfig)+0x300>)
    b10e:	bf08      	it	eq
    b110:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
    b114:	f001 feae 	bl	ce74 <micros>
    b118:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b11a:	4e6e      	ldr	r6, [pc, #440]	; (b2d4 <SdioCard::begin(SdioConfig)+0x304>)
    b11c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; b308 <SdioCard::begin(SdioConfig)+0x338>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b120:	4f6d      	ldr	r7, [pc, #436]	; (b2d8 <SdioCard::begin(SdioConfig)+0x308>)
    b122:	e020      	b.n	b166 <SdioCard::begin(SdioConfig)+0x196>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b124:	4b61      	ldr	r3, [pc, #388]	; (b2ac <SdioCard::begin(SdioConfig)+0x2dc>)
    b126:	691b      	ldr	r3, [r3, #16]
    b128:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b12c:	d008      	beq.n	b140 <SdioCard::begin(SdioConfig)+0x170>
  m_errorCode = code;
    b12e:	4b5b      	ldr	r3, [pc, #364]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b130:	2206      	movs	r2, #6
    b132:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b134:	4b64      	ldr	r3, [pc, #400]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b136:	f44f 7225 	mov.w	r2, #660	; 0x294
    b13a:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b13c:	2400      	movs	r4, #0
    b13e:	e7d3      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
      m_version2 = true;
    b140:	4b58      	ldr	r3, [pc, #352]	; (b2a4 <SdioCard::begin(SdioConfig)+0x2d4>)
    b142:	2201      	movs	r2, #1
    b144:	701a      	strb	r2, [r3, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b146:	4d62      	ldr	r5, [pc, #392]	; (b2d0 <SdioCard::begin(SdioConfig)+0x300>)
    b148:	e7e4      	b.n	b114 <SdioCard::begin(SdioConfig)+0x144>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b14a:	4629      	mov	r1, r5
    b14c:	4640      	mov	r0, r8
    b14e:	f7ff fb67 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b152:	b170      	cbz	r0, b172 <SdioCard::begin(SdioConfig)+0x1a2>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b154:	f001 fe8e 	bl	ce74 <micros>
    b158:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b15a:	42b8      	cmp	r0, r7
    b15c:	d809      	bhi.n	b172 <SdioCard::begin(SdioConfig)+0x1a2>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b15e:	4b53      	ldr	r3, [pc, #332]	; (b2ac <SdioCard::begin(SdioConfig)+0x2dc>)
    b160:	691b      	ldr	r3, [r3, #16]
    b162:	2b00      	cmp	r3, #0
    b164:	db0e      	blt.n	b184 <SdioCard::begin(SdioConfig)+0x1b4>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b166:	2100      	movs	r1, #0
    b168:	4630      	mov	r0, r6
    b16a:	f7ff fb59 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b16e:	2800      	cmp	r0, #0
    b170:	d1eb      	bne.n	b14a <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    b172:	4b4a      	ldr	r3, [pc, #296]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b174:	2217      	movs	r2, #23
    b176:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b178:	4b53      	ldr	r3, [pc, #332]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b17a:	f240 229f 	movw	r2, #671	; 0x29f
    b17e:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
    b180:	2400      	movs	r4, #0
    b182:	e7b1      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  m_ocr = SDHC_CMDRSP0;
    b184:	4b49      	ldr	r3, [pc, #292]	; (b2ac <SdioCard::begin(SdioConfig)+0x2dc>)
    b186:	6919      	ldr	r1, [r3, #16]
    b188:	4a54      	ldr	r2, [pc, #336]	; (b2dc <SdioCard::begin(SdioConfig)+0x30c>)
    b18a:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b18c:	691b      	ldr	r3, [r3, #16]
    b18e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b192:	d002      	beq.n	b19a <SdioCard::begin(SdioConfig)+0x1ca>
    m_highCapacity = true;
    b194:	4b42      	ldr	r3, [pc, #264]	; (b2a0 <SdioCard::begin(SdioConfig)+0x2d0>)
    b196:	2201      	movs	r2, #1
    b198:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b19a:	2100      	movs	r1, #0
    b19c:	4850      	ldr	r0, [pc, #320]	; (b2e0 <SdioCard::begin(SdioConfig)+0x310>)
    b19e:	f7ff fb3f 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b1a2:	4604      	mov	r4, r0
    b1a4:	b938      	cbnz	r0, b1b6 <SdioCard::begin(SdioConfig)+0x1e6>
  m_errorCode = code;
    b1a6:	4b3d      	ldr	r3, [pc, #244]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b1a8:	2202      	movs	r2, #2
    b1aa:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1ac:	4b46      	ldr	r3, [pc, #280]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b1ae:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    b1b2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b1b4:	e798      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b1b6:	2100      	movs	r1, #0
    b1b8:	484a      	ldr	r0, [pc, #296]	; (b2e4 <SdioCard::begin(SdioConfig)+0x314>)
    b1ba:	f7ff fb31 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b1be:	4604      	mov	r4, r0
    b1c0:	b938      	cbnz	r0, b1d2 <SdioCard::begin(SdioConfig)+0x202>
  m_errorCode = code;
    b1c2:	4b36      	ldr	r3, [pc, #216]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b1c4:	2203      	movs	r2, #3
    b1c6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1c8:	4b3f      	ldr	r3, [pc, #252]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b1ca:	f240 22ab 	movw	r2, #683	; 0x2ab
    b1ce:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b1d0:	e78a      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b1d2:	4b36      	ldr	r3, [pc, #216]	; (b2ac <SdioCard::begin(SdioConfig)+0x2dc>)
    b1d4:	691a      	ldr	r2, [r3, #16]
    b1d6:	4b44      	ldr	r3, [pc, #272]	; (b2e8 <SdioCard::begin(SdioConfig)+0x318>)
    b1d8:	4013      	ands	r3, r2
    b1da:	4a44      	ldr	r2, [pc, #272]	; (b2ec <SdioCard::begin(SdioConfig)+0x31c>)
    b1dc:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b1de:	4944      	ldr	r1, [pc, #272]	; (b2f0 <SdioCard::begin(SdioConfig)+0x320>)
    b1e0:	4844      	ldr	r0, [pc, #272]	; (b2f4 <SdioCard::begin(SdioConfig)+0x324>)
    b1e2:	f7ff fb5b 	bl	a89c <readReg16(unsigned long, void*)>
    b1e6:	4604      	mov	r4, r0
    b1e8:	b938      	cbnz	r0, b1fa <SdioCard::begin(SdioConfig)+0x22a>
  m_errorCode = code;
    b1ea:	4b2c      	ldr	r3, [pc, #176]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b1ec:	2207      	movs	r2, #7
    b1ee:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1f0:	4b35      	ldr	r3, [pc, #212]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b1f2:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    b1f6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b1f8:	e776      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b1fa:	493f      	ldr	r1, [pc, #252]	; (b2f8 <SdioCard::begin(SdioConfig)+0x328>)
    b1fc:	483f      	ldr	r0, [pc, #252]	; (b2fc <SdioCard::begin(SdioConfig)+0x32c>)
    b1fe:	f7ff fb4d 	bl	a89c <readReg16(unsigned long, void*)>
    b202:	4604      	mov	r4, r0
    b204:	b938      	cbnz	r0, b216 <SdioCard::begin(SdioConfig)+0x246>
  m_errorCode = code;
    b206:	4b25      	ldr	r3, [pc, #148]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b208:	2208      	movs	r2, #8
    b20a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b20c:	4b2e      	ldr	r3, [pc, #184]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b20e:	f240 22b3 	movw	r2, #691	; 0x2b3
    b212:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b214:	e768      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b216:	4b35      	ldr	r3, [pc, #212]	; (b2ec <SdioCard::begin(SdioConfig)+0x31c>)
    b218:	6819      	ldr	r1, [r3, #0]
    b21a:	4839      	ldr	r0, [pc, #228]	; (b300 <SdioCard::begin(SdioConfig)+0x330>)
    b21c:	f7ff fb00 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b220:	4604      	mov	r4, r0
    b222:	b938      	cbnz	r0, b234 <SdioCard::begin(SdioConfig)+0x264>
  m_errorCode = code;
    b224:	4b1d      	ldr	r3, [pc, #116]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b226:	2205      	movs	r2, #5
    b228:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b22a:	4b27      	ldr	r3, [pc, #156]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b22c:	f240 22b6 	movw	r2, #694	; 0x2b6
    b230:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b232:	e759      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b234:	4b2d      	ldr	r3, [pc, #180]	; (b2ec <SdioCard::begin(SdioConfig)+0x31c>)
    b236:	6819      	ldr	r1, [r3, #0]
    b238:	4826      	ldr	r0, [pc, #152]	; (b2d4 <SdioCard::begin(SdioConfig)+0x304>)
    b23a:	f7ff faf1 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b23e:	b940      	cbnz	r0, b252 <SdioCard::begin(SdioConfig)+0x282>
  m_errorCode = code;
    b240:	4b16      	ldr	r3, [pc, #88]	; (b29c <SdioCard::begin(SdioConfig)+0x2cc>)
    b242:	2214      	movs	r2, #20
    b244:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b246:	4b20      	ldr	r3, [pc, #128]	; (b2c8 <SdioCard::begin(SdioConfig)+0x2f8>)
    b248:	f240 22ba 	movw	r2, #698	; 0x2ba
    b24c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b24e:	2400      	movs	r4, #0
    b250:	e74a      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b252:	2102      	movs	r1, #2
    b254:	482b      	ldr	r0, [pc, #172]	; (b304 <SdioCard::begin(SdioConfig)+0x334>)
    b256:	f7ff fae3 	bl	a820 <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    b25a:	4604      	mov	r4, r0
    b25c:	2800      	cmp	r0, #0
    b25e:	d0ef      	beq.n	b240 <SdioCard::begin(SdioConfig)+0x270>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b260:	4b12      	ldr	r3, [pc, #72]	; (b2ac <SdioCard::begin(SdioConfig)+0x2dc>)
    b262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b264:	f022 0206 	bic.w	r2, r2, #6
    b268:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b26a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b26c:	f042 0202 	orr.w	r2, r2, #2
    b270:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b272:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    b276:	645a      	str	r2, [r3, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b278:	4669      	mov	r1, sp
    b27a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    b27e:	f7ff fca3 	bl	abc8 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b282:	2800      	cmp	r0, #0
    b284:	d053      	beq.n	b32e <SdioCard::begin(SdioConfig)+0x35e>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b286:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b28a:	f013 0f02 	tst.w	r3, #2
    b28e:	d13d      	bne.n	b30c <SdioCard::begin(SdioConfig)+0x33c>
    kHzSdClk = 25000;
    b290:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b294:	e04d      	b.n	b332 <SdioCard::begin(SdioConfig)+0x362>
    b296:	bf00      	nop
    b298:	20005327 	.word	0x20005327
    b29c:	200038d4 	.word	0x200038d4
    b2a0:	20005329 	.word	0x20005329
    b2a4:	20005328 	.word	0x20005328
    b2a8:	400d8000 	.word	0x400d8000
    b2ac:	402c0000 	.word	0x402c0000
    b2b0:	01008000 	.word	0x01008000
    b2b4:	401f8000 	.word	0x401f8000
    b2b8:	117f000b 	.word	0x117f000b
    b2bc:	20003c00 	.word	0x20003c00
    b2c0:	0000a565 	.word	0x0000a565
    b2c4:	e000e400 	.word	0xe000e400
    b2c8:	20004b34 	.word	0x20004b34
    b2cc:	081a0000 	.word	0x081a0000
    b2d0:	40300000 	.word	0x40300000
    b2d4:	371a0000 	.word	0x371a0000
    b2d8:	000f4240 	.word	0x000f4240
    b2dc:	20004b58 	.word	0x20004b58
    b2e0:	02090000 	.word	0x02090000
    b2e4:	031a0000 	.word	0x031a0000
    b2e8:	ffff0000 	.word	0xffff0000
    b2ec:	20004b5c 	.word	0x20004b5c
    b2f0:	20004b48 	.word	0x20004b48
    b2f4:	09090000 	.word	0x09090000
    b2f8:	20004b38 	.word	0x20004b38
    b2fc:	0a090000 	.word	0x0a090000
    b300:	071b0000 	.word	0x071b0000
    b304:	061a0000 	.word	0x061a0000
    b308:	29020000 	.word	0x29020000
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b30c:	4669      	mov	r1, sp
    b30e:	4819      	ldr	r0, [pc, #100]	; (b374 <SdioCard::begin(SdioConfig)+0x3a4>)
    b310:	f7ff fc5a 	bl	abc8 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b314:	b358      	cbz	r0, b36e <SdioCard::begin(SdioConfig)+0x39e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b316:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b31a:	f003 030f 	and.w	r3, r3, #15
    kHzSdClk = 25000;
    b31e:	f24c 3550 	movw	r5, #50000	; 0xc350
    b322:	f246 12a8 	movw	r2, #25000	; 0x61a8
    b326:	2b01      	cmp	r3, #1
    b328:	bf18      	it	ne
    b32a:	4615      	movne	r5, r2
    b32c:	e001      	b.n	b332 <SdioCard::begin(SdioConfig)+0x362>
    b32e:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
    b332:	2005      	movs	r0, #5
    b334:	f7ff f92c 	bl	a590 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    b338:	4628      	mov	r0, r5
    b33a:	f7ff f97d 	bl	a638 <setSdclk(unsigned long)>
    gpioMux(0);
    b33e:	2000      	movs	r0, #0
    b340:	f7ff f926 	bl	a590 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b344:	4b0c      	ldr	r3, [pc, #48]	; (b378 <SdioCard::begin(SdioConfig)+0x3a8>)
    b346:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b34a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b34e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b352:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b356:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b35a:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b35e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b362:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
    b366:	4b05      	ldr	r3, [pc, #20]	; (b37c <SdioCard::begin(SdioConfig)+0x3ac>)
    b368:	2201      	movs	r2, #1
    b36a:	701a      	strb	r2, [r3, #0]
  return true;
    b36c:	e6bc      	b.n	b0e8 <SdioCard::begin(SdioConfig)+0x118>
    kHzSdClk = 25000;
    b36e:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b372:	e7de      	b.n	b332 <SdioCard::begin(SdioConfig)+0x362>
    b374:	80fffff1 	.word	0x80fffff1
    b378:	401f8000 	.word	0x401f8000
    b37c:	20005327 	.word	0x20005327

0000b380 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    b380:	b538      	push	{r3, r4, r5, lr}
    b382:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b384:	4b2b      	ldr	r3, [pc, #172]	; (b434 <SdioCard::readData(unsigned char*)+0xb4>)
    b386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b388:	f413 7f00 	tst.w	r3, #512	; 0x200
    b38c:	d10e      	bne.n	b3ac <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b38e:	4b29      	ldr	r3, [pc, #164]	; (b434 <SdioCard::readData(unsigned char*)+0xb4>)
    b390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b396:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b398:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b39c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b3a0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b3a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b3a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b3a8:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b3aa:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    b3ac:	4822      	ldr	r0, [pc, #136]	; (b438 <SdioCard::readData(unsigned char*)+0xb8>)
    b3ae:	f7ff fa25 	bl	a7fc <waitTimeout(bool (*)())>
    b3b2:	4605      	mov	r5, r0
    b3b4:	b148      	cbz	r0, b3ca <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
    b3b6:	4b21      	ldr	r3, [pc, #132]	; (b43c <SdioCard::readData(unsigned char*)+0xbc>)
    b3b8:	221a      	movs	r2, #26
    b3ba:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b3bc:	4b20      	ldr	r3, [pc, #128]	; (b440 <SdioCard::readData(unsigned char*)+0xc0>)
    b3be:	f240 3237 	movw	r2, #823	; 0x337
    b3c2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b3c4:	2500      	movs	r5, #0
}
    b3c6:	4628      	mov	r0, r5
    b3c8:	bd38      	pop	{r3, r4, r5, pc}
    b3ca:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
    b3ce:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b3d2:	4818      	ldr	r0, [pc, #96]	; (b434 <SdioCard::readData(unsigned char*)+0xb4>)
    b3d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b3d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    b3da:	d0fb      	beq.n	b3d4 <SdioCard::readData(unsigned char*)+0x54>
    b3dc:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b3e0:	6a02      	ldr	r2, [r0, #32]
    b3e2:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b3e6:	4563      	cmp	r3, ip
    b3e8:	d1fa      	bne.n	b3e0 <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b3ea:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b3ee:	458c      	cmp	ip, r1
    b3f0:	d1f0      	bne.n	b3d4 <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
    b3f2:	4814      	ldr	r0, [pc, #80]	; (b444 <SdioCard::readData(unsigned char*)+0xc4>)
    b3f4:	f7ff fa02 	bl	a7fc <waitTimeout(bool (*)())>
    b3f8:	4601      	mov	r1, r0
    b3fa:	b138      	cbz	r0, b40c <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
    b3fc:	4b0f      	ldr	r3, [pc, #60]	; (b43c <SdioCard::readData(unsigned char*)+0xbc>)
    b3fe:	221d      	movs	r2, #29
    b400:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b402:	4b0f      	ldr	r3, [pc, #60]	; (b440 <SdioCard::readData(unsigned char*)+0xc0>)
    b404:	f240 3242 	movw	r2, #834	; 0x342
    b408:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b40a:	e7dc      	b.n	b3c6 <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
    b40c:	4a09      	ldr	r2, [pc, #36]	; (b434 <SdioCard::readData(unsigned char*)+0xb4>)
    b40e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    b410:	4b0d      	ldr	r3, [pc, #52]	; (b448 <SdioCard::readData(unsigned char*)+0xc8>)
    b412:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b414:	6818      	ldr	r0, [r3, #0]
    b416:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b418:	681b      	ldr	r3, [r3, #0]
    b41a:	f013 0f02 	tst.w	r3, #2
    b41e:	d007      	beq.n	b430 <SdioCard::readData(unsigned char*)+0xb0>
    b420:	4b09      	ldr	r3, [pc, #36]	; (b448 <SdioCard::readData(unsigned char*)+0xc8>)
    b422:	681a      	ldr	r2, [r3, #0]
    b424:	4b09      	ldr	r3, [pc, #36]	; (b44c <SdioCard::readData(unsigned char*)+0xcc>)
    b426:	421a      	tst	r2, r3
    b428:	bf0c      	ite	eq
    b42a:	2501      	moveq	r5, #1
    b42c:	2500      	movne	r5, #0
    b42e:	e7ca      	b.n	b3c6 <SdioCard::readData(unsigned char*)+0x46>
    b430:	460d      	mov	r5, r1
    b432:	e7c8      	b.n	b3c6 <SdioCard::readData(unsigned char*)+0x46>
    b434:	402c0000 	.word	0x402c0000
    b438:	0000a5f9 	.word	0x0000a5f9
    b43c:	200038d4 	.word	0x200038d4
    b440:	20004b34 	.word	0x20004b34
    b444:	0000a621 	.word	0x0000a621
    b448:	20004b64 	.word	0x20004b64
    b44c:	117f0000 	.word	0x117f0000

0000b450 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b450:	b510      	push	{r4, lr}
    b452:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b454:	4813      	ldr	r0, [pc, #76]	; (b4a4 <SdioCard::readStart(unsigned long)+0x54>)
    b456:	f7ff fb81 	bl	ab5c <yieldTimeout(bool (*)())>
    b45a:	b140      	cbz	r0, b46e <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    b45c:	4b12      	ldr	r3, [pc, #72]	; (b4a8 <SdioCard::readStart(unsigned long)+0x58>)
    b45e:	220a      	movs	r2, #10
    b460:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b462:	4b12      	ldr	r3, [pc, #72]	; (b4ac <SdioCard::readStart(unsigned long)+0x5c>)
    b464:	f240 3292 	movw	r2, #914	; 0x392
    b468:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b46a:	2000      	movs	r0, #0
}
    b46c:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b46e:	4b10      	ldr	r3, [pc, #64]	; (b4b0 <SdioCard::readStart(unsigned long)+0x60>)
    b470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b472:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b476:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b478:	f44f 7200 	mov.w	r2, #512	; 0x200
    b47c:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b47e:	4b0d      	ldr	r3, [pc, #52]	; (b4b4 <SdioCard::readStart(unsigned long)+0x64>)
    b480:	781b      	ldrb	r3, [r3, #0]
    b482:	b903      	cbnz	r3, b486 <SdioCard::readStart(unsigned long)+0x36>
    b484:	0264      	lsls	r4, r4, #9
    b486:	4621      	mov	r1, r4
    b488:	480b      	ldr	r0, [pc, #44]	; (b4b8 <SdioCard::readStart(unsigned long)+0x68>)
    b48a:	f7ff f9c9 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b48e:	2800      	cmp	r0, #0
    b490:	d1ec      	bne.n	b46c <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    b492:	4b05      	ldr	r3, [pc, #20]	; (b4a8 <SdioCard::readStart(unsigned long)+0x58>)
    b494:	220c      	movs	r2, #12
    b496:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b498:	4b04      	ldr	r3, [pc, #16]	; (b4ac <SdioCard::readStart(unsigned long)+0x5c>)
    b49a:	f240 329e 	movw	r2, #926	; 0x39e
    b49e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    b4a0:	e7e4      	b.n	b46c <SdioCard::readStart(unsigned long)+0x1c>
    b4a2:	bf00      	nop
    b4a4:	0000a935 	.word	0x0000a935
    b4a8:	200038d4 	.word	0x200038d4
    b4ac:	20004b34 	.word	0x20004b34
    b4b0:	402c0000 	.word	0x402c0000
    b4b4:	20005329 	.word	0x20005329
    b4b8:	123a0030 	.word	0x123a0030

0000b4bc <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b4bc:	b570      	push	{r4, r5, r6, lr}
    b4be:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b4c2:	460e      	mov	r6, r1
    b4c4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b4c6:	7a03      	ldrb	r3, [r0, #8]
    b4c8:	f013 0f01 	tst.w	r3, #1
    b4cc:	d013      	beq.n	b4f6 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b4ce:	f012 0f03 	tst.w	r2, #3
    b4d2:	d135      	bne.n	b540 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b4d4:	2301      	movs	r3, #1
    b4d6:	4822      	ldr	r0, [pc, #136]	; (b560 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b4d8:	f7ff fc3e 	bl	ad58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b4dc:	2800      	cmp	r0, #0
    b4de:	d13c      	bne.n	b55a <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
    b4e0:	4b20      	ldr	r3, [pc, #128]	; (b564 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    b4e2:	220b      	movs	r2, #11
    b4e4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b4e6:	4b20      	ldr	r3, [pc, #128]	; (b568 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    b4e8:	f240 3255 	movw	r2, #853	; 0x355
    b4ec:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    b4ee:	2000      	movs	r0, #0
}
    b4f0:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b4f4:	bd70      	pop	{r4, r5, r6, pc}
    b4f6:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b4f8:	f7ff fab6 	bl	aa68 <waitTransferComplete()>
    b4fc:	2800      	cmp	r0, #0
    b4fe:	d0f7      	beq.n	b4f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b500:	7a63      	ldrb	r3, [r4, #9]
    b502:	2b01      	cmp	r3, #1
    b504:	d018      	beq.n	b538 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    b506:	6823      	ldr	r3, [r4, #0]
    b508:	6a1b      	ldr	r3, [r3, #32]
    b50a:	4620      	mov	r0, r4
    b50c:	4798      	blx	r3
    b50e:	2800      	cmp	r0, #0
    b510:	d0ee      	beq.n	b4f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    b512:	4631      	mov	r1, r6
    b514:	4620      	mov	r0, r4
    b516:	f7ff ff9b 	bl	b450 <SdioCard::readStart(unsigned long)>
    b51a:	2800      	cmp	r0, #0
    b51c:	d0e8      	beq.n	b4f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
    b51e:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    b520:	2301      	movs	r3, #1
    b522:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b524:	4629      	mov	r1, r5
    b526:	4620      	mov	r0, r4
    b528:	f7ff ff2a 	bl	b380 <SdioCard::readData(unsigned char*)>
    b52c:	2800      	cmp	r0, #0
    b52e:	d0df      	beq.n	b4f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    b530:	6863      	ldr	r3, [r4, #4]
    b532:	3301      	adds	r3, #1
    b534:	6063      	str	r3, [r4, #4]
    b536:	e7db      	b.n	b4f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b538:	6863      	ldr	r3, [r4, #4]
    b53a:	42b3      	cmp	r3, r6
    b53c:	d1e3      	bne.n	b506 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    b53e:	e7f1      	b.n	b524 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b540:	2301      	movs	r3, #1
    b542:	466a      	mov	r2, sp
    b544:	4806      	ldr	r0, [pc, #24]	; (b560 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b546:	f7ff fc07 	bl	ad58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b54a:	2800      	cmp	r0, #0
    b54c:	d0c8      	beq.n	b4e0 <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
    b54e:	f44f 7200 	mov.w	r2, #512	; 0x200
    b552:	4669      	mov	r1, sp
    b554:	4628      	mov	r0, r5
    b556:	f001 fd4b 	bl	cff0 <memcpy>
  return true;
    b55a:	2001      	movs	r0, #1
    b55c:	e7c8      	b.n	b4f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    b55e:	bf00      	nop
    b560:	113a0011 	.word	0x113a0011
    b564:	200038d4 	.word	0x200038d4
    b568:	20004b34 	.word	0x20004b34

0000b56c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b56c:	b510      	push	{r4, lr}
    b56e:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
    b570:	2100      	movs	r1, #0
    b572:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b574:	4a10      	ldr	r2, [pc, #64]	; (b5b8 <SdioCard::stopTransmission(bool)+0x4c>)
    b576:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b57c:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b57e:	480f      	ldr	r0, [pc, #60]	; (b5bc <SdioCard::stopTransmission(bool)+0x50>)
    b580:	f7ff f94e 	bl	a820 <cardCommand(unsigned long, unsigned long)>
    b584:	b938      	cbnz	r0, b596 <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
    b586:	4b0e      	ldr	r3, [pc, #56]	; (b5c0 <SdioCard::stopTransmission(bool)+0x54>)
    b588:	2209      	movs	r2, #9
    b58a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b58c:	4b0d      	ldr	r3, [pc, #52]	; (b5c4 <SdioCard::stopTransmission(bool)+0x58>)
    b58e:	f44f 726d 	mov.w	r2, #948	; 0x3b4
    b592:	601a      	str	r2, [r3, #0]
}
    b594:	bd10      	pop	{r4, pc}
  if (blocking) {
    b596:	2c00      	cmp	r4, #0
    b598:	d0fc      	beq.n	b594 <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
    b59a:	480b      	ldr	r0, [pc, #44]	; (b5c8 <SdioCard::stopTransmission(bool)+0x5c>)
    b59c:	f7ff fade 	bl	ab5c <yieldTimeout(bool (*)())>
    b5a0:	b140      	cbz	r0, b5b4 <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
    b5a2:	4b07      	ldr	r3, [pc, #28]	; (b5c0 <SdioCard::stopTransmission(bool)+0x54>)
    b5a4:	220a      	movs	r2, #10
    b5a6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b5a8:	4b06      	ldr	r3, [pc, #24]	; (b5c4 <SdioCard::stopTransmission(bool)+0x58>)
    b5aa:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    b5ae:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    b5b0:	2000      	movs	r0, #0
    b5b2:	e7ef      	b.n	b594 <SdioCard::stopTransmission(bool)+0x28>
  return true;
    b5b4:	4620      	mov	r0, r4
    b5b6:	e7ed      	b.n	b594 <SdioCard::stopTransmission(bool)+0x28>
    b5b8:	402c0000 	.word	0x402c0000
    b5bc:	0cdb0000 	.word	0x0cdb0000
    b5c0:	200038d4 	.word	0x200038d4
    b5c4:	20004b34 	.word	0x20004b34
    b5c8:	0000a5d9 	.word	0x0000a5d9

0000b5cc <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    b5cc:	b510      	push	{r4, lr}
    b5ce:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
    b5d0:	f7ff fa4a 	bl	aa68 <waitTransferComplete()>
    b5d4:	b108      	cbz	r0, b5da <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
    b5d6:	7a63      	ldrb	r3, [r4, #9]
    b5d8:	b903      	cbnz	r3, b5dc <SdioCard::syncDevice()+0x10>
}
    b5da:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
    b5dc:	2101      	movs	r1, #1
    b5de:	4620      	mov	r0, r4
    b5e0:	f7ff ffc4 	bl	b56c <SdioCard::stopTransmission(bool)>
    b5e4:	e7f9      	b.n	b5da <SdioCard::syncDevice()+0xe>

0000b5e6 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
    b5e6:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
    b5e8:	2101      	movs	r1, #1
    b5ea:	f001 fcbb 	bl	cf64 <pinMode>
}
    b5ee:	bd08      	pop	{r3, pc}

0000b5f0 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
    b5f0:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
    b5f2:	f001 fc7f 	bl	cef4 <digitalWrite>
}
    b5f6:	bd08      	pop	{r3, pc}

0000b5f8 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    b5f8:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
    b5fa:	6803      	ldr	r3, [r0, #0]
    b5fc:	6842      	ldr	r2, [r0, #4]
    b5fe:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
    b600:	7cd9      	ldrb	r1, [r3, #19]
    b602:	2900      	cmp	r1, #0
    b604:	d042      	beq.n	b68c <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
    b606:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    b608:	7cd9      	ldrb	r1, [r3, #19]
    b60a:	f011 0f01 	tst.w	r1, #1
    b60e:	d008      	beq.n	b622 <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    b610:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b614:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
    b618:	695d      	ldr	r5, [r3, #20]
    b61a:	4029      	ands	r1, r5
    b61c:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    b61e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    b622:	7cd9      	ldrb	r1, [r3, #19]
    b624:	f011 0f02 	tst.w	r1, #2
    b628:	d008      	beq.n	b63c <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    b62a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b62e:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    b632:	699d      	ldr	r5, [r3, #24]
    b634:	4029      	ands	r1, r5
    b636:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    b638:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    b63c:	7cd9      	ldrb	r1, [r3, #19]
    b63e:	f011 0f04 	tst.w	r1, #4
    b642:	d008      	beq.n	b656 <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    b644:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b648:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    b64c:	69dd      	ldr	r5, [r3, #28]
    b64e:	4029      	ands	r1, r5
    b650:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    b652:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    b656:	7cd9      	ldrb	r1, [r3, #19]
    b658:	f011 0f08 	tst.w	r1, #8
    b65c:	d008      	beq.n	b670 <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    b65e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b662:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    b666:	6a1d      	ldr	r5, [r3, #32]
    b668:	4029      	ands	r1, r5
    b66a:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    b66c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    b670:	7cd9      	ldrb	r1, [r3, #19]
    b672:	f011 0f10 	tst.w	r1, #16
    b676:	d008      	beq.n	b68a <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    b678:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b67c:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    b680:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    b682:	4029      	ands	r1, r5
    b684:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    b686:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
    b68a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    b68c:	6899      	ldr	r1, [r3, #8]
    b68e:	428a      	cmp	r2, r1
    b690:	d025      	beq.n	b6de <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
    b692:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    b694:	4920      	ldr	r1, [pc, #128]	; (b718 <SdSpiArduinoDriver::activate()+0x120>)
    b696:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b698:	f3c1 1501 	ubfx	r5, r1, #4, #2
    b69c:	481f      	ldr	r0, [pc, #124]	; (b71c <SdSpiArduinoDriver::activate()+0x124>)
    b69e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    b6a2:	f3c1 6182 	ubfx	r1, r1, #26, #3
    b6a6:	3101      	adds	r1, #1
    b6a8:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    b6ac:	b37a      	cbz	r2, b70e <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
    b6ae:	4282      	cmp	r2, r0
    b6b0:	d82b      	bhi.n	b70a <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
    b6b2:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
    b6b6:	fbb0 f0f1 	udiv	r0, r0, r1
    b6ba:	4282      	cmp	r2, r0
    b6bc:	d31f      	bcc.n	b6fe <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
    b6be:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    b6c2:	d31e      	bcc.n	b702 <SdSpiArduinoDriver::activate()+0x10a>
    b6c4:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
    b6c8:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b6ca:	0850      	lsrs	r0, r2, #1
    b6cc:	0201      	lsls	r1, r0, #8
    b6ce:	b289      	uxth	r1, r1
    b6d0:	0400      	lsls	r0, r0, #16
    b6d2:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    b6d6:	4301      	orrs	r1, r0
    b6d8:	b2d2      	uxtb	r2, r2
    b6da:	430a      	orrs	r2, r1
    b6dc:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6de:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
    b6e0:	2100      	movs	r1, #0
    b6e2:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6e4:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b6e6:	2103      	movs	r1, #3
    b6e8:	6251      	str	r1, [r2, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6ea:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
    b6ec:	68d9      	ldr	r1, [r3, #12]
    b6ee:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6f0:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
    b6f2:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b6f4:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
    b6f6:	2201      	movs	r2, #1
    b6f8:	611a      	str	r2, [r3, #16]
}
    b6fa:	bc30      	pop	{r4, r5}
    b6fc:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
    b6fe:	4608      	mov	r0, r1
    b700:	e007      	b.n	b712 <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
    b702:	2902      	cmp	r1, #2
    b704:	d8e0      	bhi.n	b6c8 <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
    b706:	2200      	movs	r2, #0
    b708:	e7df      	b.n	b6ca <SdSpiArduinoDriver::activate()+0xd2>
    b70a:	2200      	movs	r2, #0
    b70c:	e7dd      	b.n	b6ca <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
    b70e:	428d      	cmp	r5, r1
    b710:	d3db      	bcc.n	b6ca <SdSpiArduinoDriver::activate()+0xd2>
    b712:	1c41      	adds	r1, r0, #1
    b714:	e7d3      	b.n	b6be <SdSpiArduinoDriver::activate()+0xc6>
    b716:	bf00      	nop
    b718:	400fc000 	.word	0x400fc000
    b71c:	20002430 	.word	0x20002430

0000b720 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    b720:	b500      	push	{lr}
    b722:	b085      	sub	sp, #20
    b724:	4684      	mov	ip, r0
    b726:	a804      	add	r0, sp, #16
    b728:	e900 000e 	stmdb	r0, {r1, r2, r3}
    b72c:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
    b72e:	b133      	cbz	r3, b73e <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    b730:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    b734:	f7f9 f836 	bl	47a4 <SPIClass::begin()>
}
    b738:	b005      	add	sp, #20
    b73a:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
    b73e:	4801      	ldr	r0, [pc, #4]	; (b744 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    b740:	e7f6      	b.n	b730 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    b742:	bf00      	nop
    b744:	200045b4 	.word	0x200045b4

0000b748 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    b748:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    b74a:	7cda      	ldrb	r2, [r3, #19]
    b74c:	b35a      	cbz	r2, b7a6 <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    b74e:	f012 0f01 	tst.w	r2, #1
    b752:	d004      	beq.n	b75e <SdSpiArduinoDriver::deactivate()+0x16>
    b754:	6a99      	ldr	r1, [r3, #40]	; 0x28
    b756:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b75a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    b75e:	7cda      	ldrb	r2, [r3, #19]
    b760:	f012 0f02 	tst.w	r2, #2
    b764:	d004      	beq.n	b770 <SdSpiArduinoDriver::deactivate()+0x28>
    b766:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b768:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b76c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    b770:	7cda      	ldrb	r2, [r3, #19]
    b772:	f012 0f04 	tst.w	r2, #4
    b776:	d004      	beq.n	b782 <SdSpiArduinoDriver::deactivate()+0x3a>
    b778:	6b19      	ldr	r1, [r3, #48]	; 0x30
    b77a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b77e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    b782:	7cda      	ldrb	r2, [r3, #19]
    b784:	f012 0f08 	tst.w	r2, #8
    b788:	d004      	beq.n	b794 <SdSpiArduinoDriver::deactivate()+0x4c>
    b78a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    b78c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b790:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    b794:	7cda      	ldrb	r2, [r3, #19]
    b796:	f012 0f10 	tst.w	r2, #16
    b79a:	d004      	beq.n	b7a6 <SdSpiArduinoDriver::deactivate()+0x5e>
    b79c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b79e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b7a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    b7a6:	4770      	bx	lr

0000b7a8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
    b7a8:	b508      	push	{r3, lr}
  m_spi->end();
    b7aa:	6800      	ldr	r0, [r0, #0]
    b7ac:	f7f9 f971 	bl	4a92 <SPIClass::end()>
}
    b7b0:	bd08      	pop	{r3, pc}

0000b7b2 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    b7b2:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b7b4:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b7b6:	21ff      	movs	r1, #255	; 0xff
    b7b8:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b7ba:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b7bc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b7be:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b7c2:	d0fb      	beq.n	b7bc <SdSpiArduinoDriver::receive()+0xa>
    b7c4:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
    b7c6:	b2c0      	uxtb	r0, r0
    b7c8:	4770      	bx	lr

0000b7ca <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    b7ca:	b570      	push	{r4, r5, r6, lr}
    b7cc:	4605      	mov	r5, r0
    b7ce:	460c      	mov	r4, r1
    b7d0:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    b7d2:	21ff      	movs	r1, #255	; 0xff
    b7d4:	4620      	mov	r0, r4
    b7d6:	f005 fcd5 	bl	11184 <memset>
		transfer(buf, buf, count);
    b7da:	4633      	mov	r3, r6
    b7dc:	4622      	mov	r2, r4
    b7de:	4621      	mov	r1, r4
    b7e0:	6828      	ldr	r0, [r5, #0]
    b7e2:	f7f9 f917 	bl	4a14 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    b7e6:	2000      	movs	r0, #0
    b7e8:	bd70      	pop	{r4, r5, r6, pc}

0000b7ea <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    b7ea:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b7ec:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b7ee:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b7f0:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b7f2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b7f4:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b7f8:	d0fb      	beq.n	b7f2 <SdSpiArduinoDriver::send(unsigned char)+0x8>
    b7fa:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    b7fc:	4770      	bx	lr

0000b7fe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    b7fe:	b530      	push	{r4, r5, lr}
    b800:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    b804:	4604      	mov	r4, r0
    b806:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    b808:	1e53      	subs	r3, r2, #1
    b80a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    b80e:	d313      	bcc.n	b838 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    b810:	b17a      	cbz	r2, b832 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
    b812:	3901      	subs	r1, #1
    b814:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
    b818:	6823      	ldr	r3, [r4, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b81a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    b81c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    b820:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b822:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    b824:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    b826:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    b82a:	d0fb      	beq.n	b824 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
    b82c:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
    b82e:	4561      	cmp	r1, ip
    b830:	d1f2      	bne.n	b818 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
    b832:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    b836:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    b838:	4668      	mov	r0, sp
    b83a:	f001 fbd9 	bl	cff0 <memcpy>
		transfer(buf, buf, count);
    b83e:	462b      	mov	r3, r5
    b840:	466a      	mov	r2, sp
    b842:	4669      	mov	r1, sp
    b844:	6820      	ldr	r0, [r4, #0]
    b846:	f7f9 f8e5 	bl	4a14 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
    b84a:	e7f2      	b.n	b832 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

0000b84c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    b84c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    b84e:	7803      	ldrb	r3, [r0, #0]
    b850:	f013 0f01 	tst.w	r3, #1
    b854:	d01c      	beq.n	b890 <FsCache::sync()+0x44>
    b856:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    b858:	6840      	ldr	r0, [r0, #4]
    b85a:	f104 0610 	add.w	r6, r4, #16
    b85e:	6803      	ldr	r3, [r0, #0]
    b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b862:	4632      	mov	r2, r6
    b864:	68e1      	ldr	r1, [r4, #12]
    b866:	4798      	blx	r3
    b868:	4605      	mov	r5, r0
    b86a:	b190      	cbz	r0, b892 <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    b86c:	7823      	ldrb	r3, [r4, #0]
    b86e:	f013 0f02 	tst.w	r3, #2
    b872:	d008      	beq.n	b886 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    b874:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    b876:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    b878:	6803      	ldr	r3, [r0, #0]
    b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b87c:	4632      	mov	r2, r6
    b87e:	68e6      	ldr	r6, [r4, #12]
    b880:	4431      	add	r1, r6
    b882:	4798      	blx	r3
    b884:	b138      	cbz	r0, b896 <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    b886:	7823      	ldrb	r3, [r4, #0]
    b888:	f023 0301 	bic.w	r3, r3, #1
    b88c:	7023      	strb	r3, [r4, #0]
    b88e:	e000      	b.n	b892 <FsCache::sync()+0x46>
  }
  return true;
    b890:	2501      	movs	r5, #1

 fail:
  return false;
}
    b892:	4628      	mov	r0, r5
    b894:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    b896:	4605      	mov	r5, r0
    b898:	e7fb      	b.n	b892 <FsCache::sync()+0x46>

0000b89a <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    b89a:	b570      	push	{r4, r5, r6, lr}
    b89c:	4604      	mov	r4, r0
  if (!m_blockDev) {
    b89e:	6840      	ldr	r0, [r0, #4]
    b8a0:	b158      	cbz	r0, b8ba <FsCache::prepare(unsigned long, unsigned char)+0x20>
    b8a2:	460e      	mov	r6, r1
    b8a4:	4615      	mov	r5, r2
  if (m_sector != sector) {
    b8a6:	68e3      	ldr	r3, [r4, #12]
    b8a8:	428b      	cmp	r3, r1
    b8aa:	d107      	bne.n	b8bc <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
    b8ac:	f005 0503 	and.w	r5, r5, #3
    b8b0:	7823      	ldrb	r3, [r4, #0]
    b8b2:	432b      	orrs	r3, r5
    b8b4:	4620      	mov	r0, r4
    b8b6:	f800 3b10 	strb.w	r3, [r0], #16
}
    b8ba:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
    b8bc:	4620      	mov	r0, r4
    b8be:	f7ff ffc5 	bl	b84c <FsCache::sync()>
    b8c2:	b170      	cbz	r0, b8e2 <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
    b8c4:	f015 0f04 	tst.w	r5, #4
    b8c8:	d107      	bne.n	b8da <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    b8ca:	6860      	ldr	r0, [r4, #4]
    b8cc:	6803      	ldr	r3, [r0, #0]
    b8ce:	691b      	ldr	r3, [r3, #16]
    b8d0:	f104 0210 	add.w	r2, r4, #16
    b8d4:	4631      	mov	r1, r6
    b8d6:	4798      	blx	r3
    b8d8:	b128      	cbz	r0, b8e6 <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
    b8da:	2300      	movs	r3, #0
    b8dc:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
    b8de:	60e6      	str	r6, [r4, #12]
    b8e0:	e7e4      	b.n	b8ac <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
    b8e2:	2000      	movs	r0, #0
    b8e4:	e7e9      	b.n	b8ba <FsCache::prepare(unsigned long, unsigned char)+0x20>
    b8e6:	2000      	movs	r0, #0
    b8e8:	e7e7      	b.n	b8ba <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

0000b8ec <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
 */
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
    b8ec:	b508      	push	{r3, lr}
  *ms10 = 0;
    b8ee:	2300      	movs	r3, #0
    b8f0:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    b8f2:	4b02      	ldr	r3, [pc, #8]	; (b8fc <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
    b8f4:	681b      	ldr	r3, [r3, #0]
    b8f6:	4798      	blx	r3
}
    b8f8:	bd08      	pop	{r3, pc}
    b8fa:	bf00      	nop
    b8fc:	20004b6c 	.word	0x20004b6c

0000b900 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    b900:	4b02      	ldr	r3, [pc, #8]	; (b90c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    b902:	4a03      	ldr	r2, [pc, #12]	; (b910 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    b904:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
    b906:	4b03      	ldr	r3, [pc, #12]	; (b914 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    b908:	6018      	str	r0, [r3, #0]
  }
    b90a:	4770      	bx	lr
    b90c:	20004b68 	.word	0x20004b68
    b910:	0000b8ed 	.word	0x0000b8ed
    b914:	20004b6c 	.word	0x20004b6c

0000b918 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    b918:	b510      	push	{r4, lr}
    b91a:	b082      	sub	sp, #8
    b91c:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    b91e:	8980      	ldrh	r0, [r0, #12]
    b920:	b118      	cbz	r0, b92a <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    b922:	2300      	movs	r3, #0
    b924:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    b926:	b002      	add	sp, #8
    b928:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    b92a:	6863      	ldr	r3, [r4, #4]
    b92c:	68a1      	ldr	r1, [r4, #8]
    b92e:	428b      	cmp	r3, r1
    b930:	d2f9      	bcs.n	b926 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    b932:	aa01      	add	r2, sp, #4
    b934:	4618      	mov	r0, r3
    b936:	f000 f8b9 	bl	baac <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    b93a:	b130      	cbz	r0, b94a <FsName::get16()+0x32>
    next = ptr;
    b93c:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    b93e:	9801      	ldr	r0, [sp, #4]
    b940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    b944:	d204      	bcs.n	b950 <FsName::get16()+0x38>
      rtn = cp;
    b946:	b280      	uxth	r0, r0
    b948:	e7ed      	b.n	b926 <FsName::get16()+0xe>
  return 0XFFFF;
    b94a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    b94e:	e7ea      	b.n	b926 <FsName::get16()+0xe>
    b950:	f3c0 0309 	ubfx	r3, r0, #0, #10
    b954:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
    b958:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    b95a:	0a80      	lsrs	r0, r0, #10
    b95c:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    b960:	b280      	uxth	r0, r0
    b962:	e7e0      	b.n	b926 <FsName::get16()+0xe>

0000b964 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    b964:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b966:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    b96a:	d82e      	bhi.n	b9ca <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
    b96c:	2910      	cmp	r1, #16
    b96e:	d81f      	bhi.n	b9b0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b970:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
    b974:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    b976:	fb0e f101 	mul.w	r1, lr, r1
    b97a:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
    b97e:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
    b982:	d23f      	bcs.n	ba04 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    b984:	fb01 231c 	mls	r3, r1, ip, r2
    b988:	fbb3 f3fe 	udiv	r3, r3, lr
    b98c:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    b98e:	fbb2 f1fe 	udiv	r1, r2, lr
    b992:	fb0e 2211 	mls	r2, lr, r1, r2
    b996:	3201      	adds	r2, #1
    b998:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    b99a:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    b99c:	ea4f 039c 	mov.w	r3, ip, lsr #2
    b9a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    b9a4:	431a      	orrs	r2, r3
    b9a6:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
    b9a8:	f880 c002 	strb.w	ip, [r0, #2]
}
    b9ac:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
    b9b0:	2920      	cmp	r1, #32
    b9b2:	d803      	bhi.n	b9bc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b9b4:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
    b9b8:	2104      	movs	r1, #4
    b9ba:	e7dc      	b.n	b976 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b9bc:	f04f 0e20 	mov.w	lr, #32
    b9c0:	2980      	cmp	r1, #128	; 0x80
    b9c2:	bf8c      	ite	hi
    b9c4:	2110      	movhi	r1, #16
    b9c6:	2108      	movls	r1, #8
    b9c8:	e7d5      	b.n	b976 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    b9ca:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    b9ce:	d90d      	bls.n	b9ec <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
    b9d0:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    b9d4:	d90e      	bls.n	b9f4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
    b9d6:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    b9da:	d90f      	bls.n	b9fc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b9dc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    b9e0:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
    b9e4:	bf94      	ite	ls
    b9e6:	2180      	movls	r1, #128	; 0x80
    b9e8:	21ff      	movhi	r1, #255	; 0xff
    b9ea:	e7c4      	b.n	b976 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    b9ec:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
    b9f0:	2110      	movs	r1, #16
    b9f2:	e7c0      	b.n	b976 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b9f4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
    b9f8:	2120      	movs	r1, #32
    b9fa:	e7bc      	b.n	b976 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    b9fc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
    ba00:	2140      	movs	r1, #64	; 0x40
    ba02:	e7b8      	b.n	b976 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
    ba04:	223f      	movs	r2, #63	; 0x3f
    h = 254;
    ba06:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
    ba08:	f240 3cff 	movw	ip, #1023	; 0x3ff
    ba0c:	e7c5      	b.n	b99a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

0000ba0e <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    ba0e:	4603      	mov	r3, r0
    size_t n = end - str;
    ba10:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
    ba12:	287f      	cmp	r0, #127	; 0x7f
    ba14:	d805      	bhi.n	ba22 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    ba16:	2a00      	cmp	r2, #0
    ba18:	d040      	beq.n	ba9c <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
    ba1a:	4608      	mov	r0, r1
    ba1c:	f800 3b01 	strb.w	r3, [r0], #1
    ba20:	4770      	bx	lr
    } else if (cp < 0X800) {
    ba22:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ba26:	d20d      	bcs.n	ba44 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    ba28:	2a01      	cmp	r2, #1
    ba2a:	d939      	bls.n	baa0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    ba2c:	0982      	lsrs	r2, r0, #6
    ba2e:	f062 023f 	orn	r2, r2, #63	; 0x3f
    ba32:	4608      	mov	r0, r1
    ba34:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    ba38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ba40:	704b      	strb	r3, [r1, #1]
    ba42:	4770      	bx	lr
    } else if (cp < 0X10000) {
    ba44:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    ba48:	d211      	bcs.n	ba6e <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    ba4a:	2a02      	cmp	r2, #2
    ba4c:	d92a      	bls.n	baa4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    ba4e:	0b02      	lsrs	r2, r0, #12
    ba50:	f062 021f 	orn	r2, r2, #31
    ba54:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    ba56:	f3c0 1285 	ubfx	r2, r0, #6, #6
    ba5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ba5e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    ba60:	1cc8      	adds	r0, r1, #3
    ba62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba66:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ba6a:	708b      	strb	r3, [r1, #2]
    ba6c:	4770      	bx	lr
       if (n < 4) goto fail;
    ba6e:	2a03      	cmp	r2, #3
    ba70:	d91a      	bls.n	baa8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    ba72:	0c82      	lsrs	r2, r0, #18
    ba74:	f062 020f 	orn	r2, r2, #15
    ba78:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    ba7a:	f3c0 3205 	ubfx	r2, r0, #12, #6
    ba7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ba82:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    ba84:	f3c0 1285 	ubfx	r2, r0, #6, #6
    ba88:	f062 027f 	orn	r2, r2, #127	; 0x7f
    ba8c:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    ba8e:	1d08      	adds	r0, r1, #4
    ba90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ba94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ba98:	70cb      	strb	r3, [r1, #3]
    ba9a:	4770      	bx	lr
    return nullptr;
    ba9c:	2000      	movs	r0, #0
    ba9e:	4770      	bx	lr
    baa0:	2000      	movs	r0, #0
    baa2:	4770      	bx	lr
    baa4:	2000      	movs	r0, #0
    baa6:	4770      	bx	lr
    baa8:	2000      	movs	r0, #0
  }
    baaa:	4770      	bx	lr

0000baac <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    baac:	4288      	cmp	r0, r1
    baae:	d242      	bcs.n	bb36 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    bab0:	b510      	push	{r4, lr}
    bab2:	4603      	mov	r3, r0
    uint8_t ch = str[0];
    bab4:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    bab6:	f990 0000 	ldrsb.w	r0, [r0]
    baba:	2800      	cmp	r0, #0
    babc:	da10      	bge.n	bae0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
    babe:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    bac2:	28c0      	cmp	r0, #192	; 0xc0
    bac4:	d00f      	beq.n	bae6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
    bac6:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    baca:	28e0      	cmp	r0, #224	; 0xe0
    bacc:	d02e      	beq.n	bb2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
    bace:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    bad2:	28f0      	cmp	r0, #240	; 0xf0
    bad4:	d131      	bne.n	bb3a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
    bad6:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    bada:	f04f 0c04 	mov.w	ip, #4
    bade:	e006      	b.n	baee <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
    bae0:	6014      	str	r4, [r2, #0]
      return str + 1;
    bae2:	1c58      	adds	r0, r3, #1
  }
    bae4:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
    bae6:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    baea:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
    baee:	eb03 000c 	add.w	r0, r3, ip
    baf2:	4288      	cmp	r0, r1
    baf4:	d823      	bhi.n	bb3e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
    baf6:	1c59      	adds	r1, r3, #1
    baf8:	4684      	mov	ip, r0
      ch = str[i];
    bafa:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    bafe:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
    bb02:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    bb06:	d11c      	bne.n	bb42 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
    bb08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bb0c:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
    bb10:	4561      	cmp	r1, ip
    bb12:	d1f2      	bne.n	bafa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
    bb14:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    bb18:	4b0d      	ldr	r3, [pc, #52]	; (bb50 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
    bb1a:	4299      	cmp	r1, r3
    bb1c:	d813      	bhi.n	bb46 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    bb1e:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    bb22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bb26:	d310      	bcc.n	bb4a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
    bb28:	6014      	str	r4, [r2, #0]
    return str + n;
    bb2a:	e7db      	b.n	bae4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
    bb2c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    bb30:	f04f 0c03 	mov.w	ip, #3
    bb34:	e7db      	b.n	baee <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
    bb36:	2000      	movs	r0, #0
  }
    bb38:	4770      	bx	lr
      return nullptr;
    bb3a:	2000      	movs	r0, #0
    bb3c:	e7d2      	b.n	bae4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bb3e:	2000      	movs	r0, #0
    bb40:	e7d0      	b.n	bae4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
    bb42:	2000      	movs	r0, #0
    bb44:	e7ce      	b.n	bae4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bb46:	2000      	movs	r0, #0
    bb48:	e7cc      	b.n	bae4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bb4a:	2000      	movs	r0, #0
    bb4c:	e7ca      	b.n	bae4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bb4e:	bf00      	nop
    bb50:	0010ff7f 	.word	0x0010ff7f

0000bb54 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    bb54:	287e      	cmp	r0, #126	; 0x7e
    bb56:	d80c      	bhi.n	bb72 <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    bb58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    bb5c:	b29b      	uxth	r3, r3
    bb5e:	2b19      	cmp	r3, #25
    bb60:	bf8c      	ite	hi
    bb62:	2300      	movhi	r3, #0
    bb64:	2301      	movls	r3, #1
    bb66:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    bb6a:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    bb6c:	4770      	bx	lr
    mid = left + (right - left)/2;
    bb6e:	469c      	mov	ip, r3
    bb70:	e004      	b.n	bb7c <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
    bb72:	b430      	push	{r4, r5}
  size_t right = size;
    bb74:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    bb78:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    bb7a:	4c27      	ldr	r4, [pc, #156]	; (bc18 <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
    bb7c:	ebac 0302 	sub.w	r3, ip, r2
    bb80:	2b01      	cmp	r3, #1
    bb82:	d907      	bls.n	bb94 <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
    bb84:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    bb88:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
    bb8c:	4281      	cmp	r1, r0
    bb8e:	d8ee      	bhi.n	bb6e <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
    bb90:	461a      	mov	r2, r3
    bb92:	e7f3      	b.n	bb7c <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
    bb94:	b292      	uxth	r2, r2
    bb96:	4b20      	ldr	r3, [pc, #128]	; (bc18 <toUpcase(unsigned short)+0xc4>)
    bb98:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    bb9c:	4298      	cmp	r0, r3
    bb9e:	d31d      	bcc.n	bbdc <toUpcase(unsigned short)+0x88>
    bba0:	1ac1      	subs	r1, r0, r3
    bba2:	4c1d      	ldr	r4, [pc, #116]	; (bc18 <toUpcase(unsigned short)+0xc4>)
    bba4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    bba8:	78e4      	ldrb	r4, [r4, #3]
    bbaa:	42a1      	cmp	r1, r4
    bbac:	da19      	bge.n	bbe2 <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
    bbae:	491a      	ldr	r1, [pc, #104]	; (bc18 <toUpcase(unsigned short)+0xc4>)
    bbb0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    bbb4:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    bbb8:	2a01      	cmp	r2, #1
    bbba:	d004      	beq.n	bbc6 <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
    bbbc:	b14a      	cbz	r2, bbd2 <toUpcase(unsigned short)+0x7e>
    bbbe:	b293      	uxth	r3, r2
    bbc0:	4403      	add	r3, r0
    bbc2:	b298      	uxth	r0, r3
    bbc4:	e021      	b.n	bc0a <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
    bbc6:	1ac3      	subs	r3, r0, r3
    bbc8:	f003 0301 	and.w	r3, r3, #1
    bbcc:	1ac3      	subs	r3, r0, r3
    bbce:	b298      	uxth	r0, r3
    bbd0:	e01b      	b.n	bc0a <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
    bbd2:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    bbd6:	e7f3      	b.n	bbc0 <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
    bbd8:	461c      	mov	r4, r3
    bbda:	e005      	b.n	bbe8 <toUpcase(unsigned short)+0x94>
    bbdc:	244b      	movs	r4, #75	; 0x4b
    bbde:	2200      	movs	r2, #0
    bbe0:	e001      	b.n	bbe6 <toUpcase(unsigned short)+0x92>
    bbe2:	244b      	movs	r4, #75	; 0x4b
    bbe4:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    bbe6:	4d0d      	ldr	r5, [pc, #52]	; (bc1c <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
    bbe8:	1aa3      	subs	r3, r4, r2
    bbea:	2b01      	cmp	r3, #1
    bbec:	d907      	bls.n	bbfe <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
    bbee:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    bbf2:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
    bbf6:	4281      	cmp	r1, r0
    bbf8:	d8ee      	bhi.n	bbd8 <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
    bbfa:	461a      	mov	r2, r3
    bbfc:	e7f4      	b.n	bbe8 <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
    bbfe:	b292      	uxth	r2, r2
    bc00:	4b06      	ldr	r3, [pc, #24]	; (bc1c <toUpcase(unsigned short)+0xc8>)
    bc02:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
    bc06:	4283      	cmp	r3, r0
    bc08:	d001      	beq.n	bc0e <toUpcase(unsigned short)+0xba>
}
    bc0a:	bc30      	pop	{r4, r5}
    bc0c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    bc0e:	4b03      	ldr	r3, [pc, #12]	; (bc1c <toUpcase(unsigned short)+0xc8>)
    bc10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    bc14:	8858      	ldrh	r0, [r3, #2]
    bc16:	e7f8      	b.n	bc0a <toUpcase(unsigned short)+0xb6>
    bc18:	20001ebc 	.word	0x20001ebc
    bc1c:	20001d90 	.word	0x20001d90

0000bc20 <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bc20:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bc24:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bc26:	4b11      	ldr	r3, [pc, #68]	; (bc6c <EventResponder::runFromInterrupt()+0x4c>)
    bc28:	6818      	ldr	r0, [r3, #0]
		if (first) {
    bc2a:	b1d0      	cbz	r0, bc62 <EventResponder::runFromInterrupt()+0x42>
{
    bc2c:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
    bc2e:	461d      	mov	r5, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    bc30:	4e0f      	ldr	r6, [pc, #60]	; (bc70 <EventResponder::runFromInterrupt()+0x50>)
    bc32:	2400      	movs	r4, #0
    bc34:	e009      	b.n	bc4a <EventResponder::runFromInterrupt()+0x2a>
    bc36:	6034      	str	r4, [r6, #0]
    bc38:	e00c      	b.n	bc54 <EventResponder::runFromInterrupt()+0x34>
			}
			enableInterrupts(irq);
			first->_triggered = false;
    bc3a:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    bc3c:	6883      	ldr	r3, [r0, #8]
    bc3e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bc40:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    bc44:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    bc46:	6828      	ldr	r0, [r5, #0]
		if (first) {
    bc48:	b140      	cbz	r0, bc5c <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
    bc4a:	6943      	ldr	r3, [r0, #20]
    bc4c:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
    bc4e:	2b00      	cmp	r3, #0
    bc50:	d0f1      	beq.n	bc36 <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
    bc52:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bc54:	2a00      	cmp	r2, #0
    bc56:	d1f0      	bne.n	bc3a <EventResponder::runFromInterrupt()+0x1a>
    bc58:	b662      	cpsie	i
    bc5a:	e7ee      	b.n	bc3a <EventResponder::runFromInterrupt()+0x1a>
    bc5c:	b902      	cbnz	r2, bc60 <EventResponder::runFromInterrupt()+0x40>
    bc5e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    bc60:	bd70      	pop	{r4, r5, r6, pc}
    bc62:	b90a      	cbnz	r2, bc68 <EventResponder::runFromInterrupt()+0x48>
    bc64:	b662      	cpsie	i
			break;
    bc66:	4770      	bx	lr
    bc68:	4770      	bx	lr
    bc6a:	bf00      	nop
    bc6c:	20004b7c 	.word	0x20004b7c
    bc70:	20004b78 	.word	0x20004b78

0000bc74 <pendablesrvreq_isr>:
{
    bc74:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    bc76:	f7ff ffd3 	bl	bc20 <EventResponder::runFromInterrupt()>
}
    bc7a:	bd08      	pop	{r3, pc}

0000bc7c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    bc7c:	4b04      	ldr	r3, [pc, #16]	; (bc90 <systick_isr+0x14>)
    bc7e:	685a      	ldr	r2, [r3, #4]
    bc80:	4b04      	ldr	r3, [pc, #16]	; (bc94 <systick_isr+0x18>)
    bc82:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
    bc84:	4a04      	ldr	r2, [pc, #16]	; (bc98 <systick_isr+0x1c>)
    bc86:	6813      	ldr	r3, [r2, #0]
    bc88:	3301      	adds	r3, #1
    bc8a:	6013      	str	r3, [r2, #0]
}
    bc8c:	4770      	bx	lr
    bc8e:	bf00      	nop
    bc90:	e0001000 	.word	0xe0001000
    bc94:	200052ec 	.word	0x200052ec
    bc98:	200052f0 	.word	0x200052f0

0000bc9c <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    bc9c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    bca0:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    bca2:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    bca6:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    bca8:	4293      	cmp	r3, r2
    bcaa:	d202      	bcs.n	bcb2 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    bcac:	3a01      	subs	r2, #1
    bcae:	1ad0      	subs	r0, r2, r3
}
    bcb0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    bcb2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    bcb4:	3901      	subs	r1, #1
    bcb6:	440a      	add	r2, r1
    bcb8:	1ad0      	subs	r0, r2, r3
    bcba:	4770      	bx	lr

0000bcbc <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    bcbc:	b672      	cpsid	i
	head = rx_buffer_head_;
    bcbe:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    bcc2:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    bcc4:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bcc8:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    bcca:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    bccc:	bf3c      	itt	cc
    bcce:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    bcd0:	1852      	addcc	r2, r2, r1
    bcd2:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    bcd4:	6902      	ldr	r2, [r0, #16]
    bcd6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    bcd8:	f3c0 6002 	ubfx	r0, r0, #24, #3
    bcdc:	4418      	add	r0, r3
	__enable_irq();
    bcde:	b662      	cpsie	i
	return avail;
}
    bce0:	4770      	bx	lr

0000bce2 <HardwareSerial::peek()>:
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
}

int HardwareSerial::peek(void)
{
    bce2:	4602      	mov	r2, r0
	uint32_t head, tail;

	head = rx_buffer_head_;
    bce4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bce8:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    bcea:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bcee:	b29b      	uxth	r3, r3
	if (head == tail) {
    bcf0:	4299      	cmp	r1, r3
    bcf2:	d00b      	beq.n	bd0c <HardwareSerial::peek()+0x2a>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bcf4:	3301      	adds	r3, #1
    bcf6:	6b91      	ldr	r1, [r2, #56]	; 0x38
    bcf8:	4299      	cmp	r1, r3
    bcfa:	bf98      	it	ls
    bcfc:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    bcfe:	6b11      	ldr	r1, [r2, #48]	; 0x30
    bd00:	4299      	cmp	r1, r3
    bd02:	d921      	bls.n	bd48 <HardwareSerial::peek()+0x66>
		return rx_buffer_[tail];
    bd04:	6a12      	ldr	r2, [r2, #32]
    bd06:	5cd0      	ldrb	r0, [r2, r3]
    bd08:	b2c0      	uxtb	r0, r0
    bd0a:	4770      	bx	lr
		__disable_irq();
    bd0c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    bd0e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bd12:	b289      	uxth	r1, r1
		if (head == tail) {
    bd14:	428b      	cmp	r3, r1
    bd16:	d001      	beq.n	bd1c <HardwareSerial::peek()+0x3a>
		__enable_irq();
    bd18:	b662      	cpsie	i
    bd1a:	e7eb      	b.n	bcf4 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    bd1c:	6903      	ldr	r3, [r0, #16]
    bd1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    bd20:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    bd24:	d00c      	beq.n	bd40 <HardwareSerial::peek()+0x5e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bd26:	69db      	ldr	r3, [r3, #28]
    bd28:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_head_ = 1;
    bd2c:	2101      	movs	r1, #1
    bd2e:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    bd32:	2100      	movs	r1, #0
    bd34:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    bd38:	6a12      	ldr	r2, [r2, #32]
    bd3a:	b2db      	uxtb	r3, r3
    bd3c:	7053      	strb	r3, [r2, #1]
    bd3e:	e001      	b.n	bd44 <HardwareSerial::peek()+0x62>
			int c = -1;	// assume nothing to return
    bd40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    bd44:	b662      	cpsie	i
			return c;
    bd46:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    bd48:	1a5b      	subs	r3, r3, r1
    bd4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    bd4c:	5cd0      	ldrb	r0, [r2, r3]
    bd4e:	b2c0      	uxtb	r0, r0
	}
}
    bd50:	4770      	bx	lr

0000bd52 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
    bd52:	4602      	mov	r2, r0
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    bd54:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bd58:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    bd5a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    bd5e:	b29b      	uxth	r3, r3
	if (head == tail) {
    bd60:	4299      	cmp	r1, r3
    bd62:	d01b      	beq.n	bd9c <HardwareSerial::read()+0x4a>
{
    bd64:	b430      	push	{r4, r5}
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    bd66:	3301      	adds	r3, #1
    bd68:	6b94      	ldr	r4, [r2, #56]	; 0x38
    bd6a:	429c      	cmp	r4, r3
    bd6c:	bf98      	it	ls
    bd6e:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    bd70:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bd72:	4298      	cmp	r0, r3
    bd74:	d927      	bls.n	bdc6 <HardwareSerial::read()+0x74>
		c = rx_buffer_[tail];
    bd76:	6a10      	ldr	r0, [r2, #32]
    bd78:	5cc0      	ldrb	r0, [r0, r3]
    bd7a:	b2c0      	uxtb	r0, r0
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    bd7c:	b29d      	uxth	r5, r3
    bd7e:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    bd82:	6d95      	ldr	r5, [r2, #88]	; 0x58
    bd84:	b145      	cbz	r5, bd98 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    bd86:	4299      	cmp	r1, r3
    bd88:	d322      	bcc.n	bdd0 <HardwareSerial::read()+0x7e>
    bd8a:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    bd8c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    bd8e:	4299      	cmp	r1, r3
    bd90:	d302      	bcc.n	bd98 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    bd92:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    bd94:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    bd98:	bc30      	pop	{r4, r5}
    bd9a:	4770      	bx	lr
		__disable_irq();
    bd9c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    bd9e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    bda2:	b289      	uxth	r1, r1
		if (head == tail) {
    bda4:	428b      	cmp	r3, r1
    bda6:	d001      	beq.n	bdac <HardwareSerial::read()+0x5a>
		__enable_irq();
    bda8:	b662      	cpsie	i
    bdaa:	e7db      	b.n	bd64 <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    bdac:	6903      	ldr	r3, [r0, #16]
    bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdb0:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    bdb4:	d003      	beq.n	bdbe <HardwareSerial::read()+0x6c>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bdb6:	69d8      	ldr	r0, [r3, #28]
    bdb8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    bdbc:	e001      	b.n	bdc2 <HardwareSerial::read()+0x70>
			c = -1;	// assume nothing to return
    bdbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    bdc2:	b662      	cpsie	i
}	
    bdc4:	4770      	bx	lr
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    bdc6:	1a18      	subs	r0, r3, r0
    bdc8:	6a55      	ldr	r5, [r2, #36]	; 0x24
    bdca:	5c28      	ldrb	r0, [r5, r0]
    bdcc:	b2c0      	uxtb	r0, r0
    bdce:	e7d5      	b.n	bd7c <HardwareSerial::read()+0x2a>
		else avail = rx_buffer_total_size_ + head - tail;
    bdd0:	440c      	add	r4, r1
    bdd2:	1ae3      	subs	r3, r4, r3
    bdd4:	e7da      	b.n	bd8c <HardwareSerial::read()+0x3a>

0000bdd6 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
    bdd6:	b510      	push	{r4, lr}
    bdd8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    bdda:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    bdde:	b12b      	cbz	r3, bdec <HardwareSerial::flush()+0x16>
    bde0:	f002 ff66 	bl	ecb0 <yield>
    bde4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    bde8:	2b00      	cmp	r3, #0
    bdea:	d1f9      	bne.n	bde0 <HardwareSerial::flush()+0xa>
}
    bdec:	bd10      	pop	{r4, pc}
	...

0000bdf0 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    bdf0:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    bdf4:	b99b      	cbnz	r3, be1e <nvic_execution_priority()+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bdf6:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    bdfa:	b998      	cbnz	r0, be24 <nvic_execution_priority()+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    bdfc:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    be00:	b123      	cbz	r3, be0c <nvic_execution_priority()+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    be02:	2b0f      	cmp	r3, #15
    be04:	d904      	bls.n	be10 <nvic_execution_priority()+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    be06:	4a08      	ldr	r2, [pc, #32]	; (be28 <nvic_execution_priority()+0x38>)
    be08:	5cd0      	ldrb	r0, [r2, r3]
    be0a:	e001      	b.n	be10 <nvic_execution_priority()+0x20>
	uint32_t priority=256;
    be0c:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    be10:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    be14:	b13b      	cbz	r3, be26 <nvic_execution_priority()+0x36>
    be16:	4298      	cmp	r0, r3
    be18:	bf28      	it	cs
    be1a:	4618      	movcs	r0, r3
	return priority;
    be1c:	4770      	bx	lr
	if (faultmask) return -1;
    be1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    be22:	4770      	bx	lr
	if (primask) return 0;
    be24:	2000      	movs	r0, #0
}
    be26:	4770      	bx	lr
    be28:	e000e3f0 	.word	0xe000e3f0

0000be2c <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    be2c:	b570      	push	{r4, r5, r6, lr}
    be2e:	4604      	mov	r4, r0
    be30:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    be32:	6d03      	ldr	r3, [r0, #80]	; 0x50
    be34:	b113      	cbz	r3, be3c <HardwareSerial::write9bit(unsigned long)+0x10>
    be36:	6d42      	ldr	r2, [r0, #84]	; 0x54
    be38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    be3c:	7ea3      	ldrb	r3, [r4, #26]
    be3e:	b133      	cbz	r3, be4e <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    be40:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    be42:	6922      	ldr	r2, [r4, #16]
    be44:	6993      	ldr	r3, [r2, #24]
    be46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    be4a:	6193      	str	r3, [r2, #24]
		__enable_irq();
    be4c:	b662      	cpsie	i
		//digitalWriteFast(2, HIGH);
	}

	head = tx_buffer_head_;
    be4e:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    be52:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    be54:	3501      	adds	r5, #1
    be56:	6b63      	ldr	r3, [r4, #52]	; 0x34
    be58:	42ab      	cmp	r3, r5
    be5a:	bf98      	it	ls
    be5c:	2500      	movls	r5, #0
	while (tx_buffer_tail_ == head) {
    be5e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    be62:	b29b      	uxth	r3, r3
    be64:	429d      	cmp	r5, r3
    be66:	d01f      	beq.n	bea8 <HardwareSerial::write9bit(unsigned long)+0x7c>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    be68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    be6a:	42ab      	cmp	r3, r5
    be6c:	d93e      	bls.n	beec <HardwareSerial::write9bit(unsigned long)+0xc0>
		tx_buffer_[head] = c;
    be6e:	69e3      	ldr	r3, [r4, #28]
    be70:	b2f6      	uxtb	r6, r6
    be72:	555e      	strb	r6, [r3, r5]
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
    be74:	b672      	cpsid	i
	transmitting_ = 1;
    be76:	2001      	movs	r0, #1
    be78:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    be7c:	b2ad      	uxth	r5, r5
    be7e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    be82:	6922      	ldr	r2, [r4, #16]
    be84:	6993      	ldr	r3, [r2, #24]
    be86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    be8a:	6193      	str	r3, [r2, #24]
	__enable_irq();
    be8c:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    be8e:	bd70      	pop	{r4, r5, r6, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    be90:	1a59      	subs	r1, r3, r1
    be92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    be94:	5c41      	ldrb	r1, [r0, r1]
    be96:	b2c9      	uxtb	r1, r1
    be98:	e020      	b.n	bedc <HardwareSerial::write9bit(unsigned long)+0xb0>
		} else if (priority >= 256) 
    be9a:	28ff      	cmp	r0, #255	; 0xff
    be9c:	dc23      	bgt.n	bee6 <HardwareSerial::write9bit(unsigned long)+0xba>
	while (tx_buffer_tail_ == head) {
    be9e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bea2:	b29b      	uxth	r3, r3
    bea4:	42ab      	cmp	r3, r5
    bea6:	d1df      	bne.n	be68 <HardwareSerial::write9bit(unsigned long)+0x3c>
		int priority = nvic_execution_priority();
    bea8:	f7ff ffa2 	bl	bdf0 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    beac:	6963      	ldr	r3, [r4, #20]
    beae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    beb2:	4283      	cmp	r3, r0
    beb4:	dbf1      	blt.n	be9a <HardwareSerial::write9bit(unsigned long)+0x6e>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    beb6:	6922      	ldr	r2, [r4, #16]
    beb8:	6953      	ldr	r3, [r2, #20]
    beba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    bebe:	d0ee      	beq.n	be9e <HardwareSerial::write9bit(unsigned long)+0x72>
				uint32_t tail = tx_buffer_tail_;
    bec0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bec4:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    bec6:	3301      	adds	r3, #1
    bec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    beca:	4299      	cmp	r1, r3
    becc:	bf98      	it	ls
    bece:	2300      	movls	r3, #0
				if (tail < tx_buffer_size_) {
    bed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bed2:	4299      	cmp	r1, r3
    bed4:	d9dc      	bls.n	be90 <HardwareSerial::write9bit(unsigned long)+0x64>
					n = tx_buffer_[tail];
    bed6:	69e1      	ldr	r1, [r4, #28]
    bed8:	5cc9      	ldrb	r1, [r1, r3]
    beda:	b2c9      	uxtb	r1, r1
				port->DATA  = n;
    bedc:	61d1      	str	r1, [r2, #28]
				tx_buffer_tail_ = tail;
    bede:	b29b      	uxth	r3, r3
    bee0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    bee4:	e7db      	b.n	be9e <HardwareSerial::write9bit(unsigned long)+0x72>
			yield(); // wait
    bee6:	f002 fee3 	bl	ecb0 <yield>
    beea:	e7d8      	b.n	be9e <HardwareSerial::write9bit(unsigned long)+0x72>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    beec:	1aeb      	subs	r3, r5, r3
    beee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    bef0:	b2f6      	uxtb	r6, r6
    bef2:	54d6      	strb	r6, [r2, r3]
    bef4:	e7be      	b.n	be74 <HardwareSerial::write9bit(unsigned long)+0x48>

0000bef6 <HardwareSerial::write(unsigned char)>:
{
    bef6:	b508      	push	{r3, lr}
	return write9bit(c);
    bef8:	f7ff ff98 	bl	be2c <HardwareSerial::write9bit(unsigned long)>
}
    befc:	bd08      	pop	{r3, pc}

0000befe <HardwareSerial::IRQHandler()>:

void HardwareSerial::IRQHandler() 
{
    befe:	b530      	push	{r4, r5, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    bf00:	6903      	ldr	r3, [r0, #16]
    bf02:	695a      	ldr	r2, [r3, #20]
    bf04:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    bf08:	d047      	beq.n	bf9a <HardwareSerial::IRQHandler()+0x9c>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bf0c:	f3c3 6c02 	ubfx	ip, r3, #24, #3
		if (avail) {
    bf10:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    bf14:	d038      	beq.n	bf88 <HardwareSerial::IRQHandler()+0x8a>
			uint32_t newhead;
			head = rx_buffer_head_;
    bf16:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
    bf1a:	fa1f fe8e 	uxth.w	lr, lr
			tail = rx_buffer_tail_;
    bf1e:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    bf22:	b2a4      	uxth	r4, r4
    bf24:	e009      	b.n	bf3a <HardwareSerial::IRQHandler()+0x3c>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    bf26:	1a59      	subs	r1, r3, r1
    bf28:	6a45      	ldr	r5, [r0, #36]	; 0x24
    bf2a:	b2d2      	uxtb	r2, r2
    bf2c:	546a      	strb	r2, [r5, r1]
					head = newhead;
    bf2e:	469e      	mov	lr, r3
					}
				}
			} while (--avail > 0) ;
    bf30:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    bf34:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    bf38:	d016      	beq.n	bf68 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bf3a:	6903      	ldr	r3, [r0, #16]
    bf3c:	69da      	ldr	r2, [r3, #28]
				newhead = head + 1;
    bf3e:	f10e 0301 	add.w	r3, lr, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    bf42:	6b81      	ldr	r1, [r0, #56]	; 0x38
    bf44:	4299      	cmp	r1, r3
    bf46:	bf98      	it	ls
    bf48:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    bf4a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    bf4e:	b289      	uxth	r1, r1
    bf50:	4299      	cmp	r1, r3
    bf52:	d0ed      	beq.n	bf30 <HardwareSerial::IRQHandler()+0x32>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    bf54:	f3c2 0209 	ubfx	r2, r2, #0, #10
					if (newhead < rx_buffer_size_) {
    bf58:	6b01      	ldr	r1, [r0, #48]	; 0x30
    bf5a:	4299      	cmp	r1, r3
    bf5c:	d9e3      	bls.n	bf26 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_[head] = n;
    bf5e:	6a01      	ldr	r1, [r0, #32]
    bf60:	b2d2      	uxtb	r2, r2
    bf62:	54ca      	strb	r2, [r1, r3]
					head = newhead;
    bf64:	469e      	mov	lr, r3
    bf66:	e7e3      	b.n	bf30 <HardwareSerial::IRQHandler()+0x32>
			rx_buffer_head_ = head;
    bf68:	fa1f f38e 	uxth.w	r3, lr
    bf6c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    bf70:	6d83      	ldr	r3, [r0, #88]	; 0x58
    bf72:	b14b      	cbz	r3, bf88 <HardwareSerial::IRQHandler()+0x8a>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    bf74:	45a6      	cmp	lr, r4
    bf76:	d320      	bcc.n	bfba <HardwareSerial::IRQHandler()+0xbc>
    bf78:	ebae 0e04 	sub.w	lr, lr, r4
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
    bf7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    bf7e:	4572      	cmp	r2, lr
    bf80:	d802      	bhi.n	bf88 <HardwareSerial::IRQHandler()+0x8a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    bf82:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    bf84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    bf88:	6903      	ldr	r3, [r0, #16]
    bf8a:	695a      	ldr	r2, [r3, #20]
    bf8c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    bf90:	d003      	beq.n	bf9a <HardwareSerial::IRQHandler()+0x9c>
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    bf92:	695a      	ldr	r2, [r3, #20]
    bf94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    bf98:	615a      	str	r2, [r3, #20]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    bf9a:	6903      	ldr	r3, [r0, #16]
    bf9c:	699d      	ldr	r5, [r3, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    bf9e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    bfa2:	d02c      	beq.n	bffe <HardwareSerial::IRQHandler()+0x100>
    bfa4:	695b      	ldr	r3, [r3, #20]
    bfa6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    bfaa:	d028      	beq.n	bffe <HardwareSerial::IRQHandler()+0x100>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    bfac:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    bfb0:	b2a4      	uxth	r4, r4
		tail = tx_buffer_tail_;
    bfb2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    bfb6:	b29b      	uxth	r3, r3
    bfb8:	e00e      	b.n	bfd8 <HardwareSerial::IRQHandler()+0xda>
				else avail = rx_buffer_total_size_ + head - tail;
    bfba:	6b82      	ldr	r2, [r0, #56]	; 0x38
    bfbc:	1b12      	subs	r2, r2, r4
    bfbe:	4496      	add	lr, r2
    bfc0:	e7dc      	b.n	bf7c <HardwareSerial::IRQHandler()+0x7e>
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    bfc2:	1a9a      	subs	r2, r3, r2
    bfc4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bfc6:	5c8a      	ldrb	r2, [r1, r2]
    bfc8:	b2d2      	uxtb	r2, r2
			}
			port->DATA = n;
    bfca:	6901      	ldr	r1, [r0, #16]
    bfcc:	61ca      	str	r2, [r1, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    bfce:	6902      	ldr	r2, [r0, #16]
    bfd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    bfd2:	f412 6f80 	tst.w	r2, #1024	; 0x400
    bfd6:	d10d      	bne.n	bff4 <HardwareSerial::IRQHandler()+0xf6>
			if (head == tail) break;
    bfd8:	42a3      	cmp	r3, r4
    bfda:	d02f      	beq.n	c03c <HardwareSerial::IRQHandler()+0x13e>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    bfdc:	3301      	adds	r3, #1
    bfde:	6b42      	ldr	r2, [r0, #52]	; 0x34
    bfe0:	429a      	cmp	r2, r3
    bfe2:	bf98      	it	ls
    bfe4:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    bfe6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    bfe8:	429a      	cmp	r2, r3
    bfea:	d9ea      	bls.n	bfc2 <HardwareSerial::IRQHandler()+0xc4>
				n = tx_buffer_[tail];
    bfec:	69c2      	ldr	r2, [r0, #28]
    bfee:	5cd2      	ldrb	r2, [r2, r3]
    bff0:	b2d2      	uxtb	r2, r2
    bff2:	e7ea      	b.n	bfca <HardwareSerial::IRQHandler()+0xcc>
		tx_buffer_tail_ = tail;
    bff4:	b29a      	uxth	r2, r3
    bff6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		if (head == tail) {
    bffa:	42a3      	cmp	r3, r4
    bffc:	d020      	beq.n	c040 <HardwareSerial::IRQHandler()+0x142>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    bffe:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
    c002:	d01a      	beq.n	c03a <HardwareSerial::IRQHandler()+0x13c>
    c004:	6903      	ldr	r3, [r0, #16]
    c006:	695b      	ldr	r3, [r3, #20]
    c008:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    c00c:	d015      	beq.n	c03a <HardwareSerial::IRQHandler()+0x13c>
	{
		transmitting_ = 0;
    c00e:	2300      	movs	r3, #0
    c010:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c014:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c016:	b113      	cbz	r3, c01e <HardwareSerial::IRQHandler()+0x120>
    c018:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    c01e:	7e83      	ldrb	r3, [r0, #26]
    c020:	b133      	cbz	r3, c030 <HardwareSerial::IRQHandler()+0x132>
			__disable_irq();
    c022:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    c024:	6902      	ldr	r2, [r0, #16]
    c026:	6993      	ldr	r3, [r2, #24]
    c028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    c02c:	6193      	str	r3, [r2, #24]
			__enable_irq();
    c02e:	b662      	cpsie	i
			//digitalWriteFast(2, LOW);
		}

		port->CTRL &= ~LPUART_CTRL_TCIE;
    c030:	6902      	ldr	r2, [r0, #16]
    c032:	6993      	ldr	r3, [r2, #24]
    c034:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    c038:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    c03a:	bd30      	pop	{r4, r5, pc}
		tx_buffer_tail_ = tail;
    c03c:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    c040:	6902      	ldr	r2, [r0, #16]
    c042:	6993      	ldr	r3, [r2, #24]
    c044:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    c048:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    c04a:	6902      	ldr	r2, [r0, #16]
    c04c:	6993      	ldr	r3, [r2, #24]
    c04e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    c052:	6193      	str	r3, [r2, #24]
    c054:	e7d3      	b.n	bffe <HardwareSerial::IRQHandler()+0x100>
	...

0000c058 <HardwareSerial::addToSerialEventsList()>:


void HardwareSerial::addToSerialEventsList() {
    c058:	b410      	push	{r4}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c05a:	4b0e      	ldr	r3, [pc, #56]	; (c094 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c05c:	781c      	ldrb	r4, [r3, #0]
    c05e:	b15c      	cbz	r4, c078 <HardwareSerial::addToSerialEventsList()+0x20>
    c060:	490d      	ldr	r1, [pc, #52]	; (c098 <HardwareSerial::addToSerialEventsList()+0x40>)
    c062:	1f0b      	subs	r3, r1, #4
    c064:	1e62      	subs	r2, r4, #1
    c066:	b2d2      	uxtb	r2, r2
    c068:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c06c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c070:	4282      	cmp	r2, r0
    c072:	d00c      	beq.n	c08e <HardwareSerial::addToSerialEventsList()+0x36>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c074:	428b      	cmp	r3, r1
    c076:	d1f9      	bne.n	c06c <HardwareSerial::addToSerialEventsList()+0x14>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c078:	1c62      	adds	r2, r4, #1
    c07a:	4b06      	ldr	r3, [pc, #24]	; (c094 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c07c:	701a      	strb	r2, [r3, #0]
    c07e:	4b06      	ldr	r3, [pc, #24]	; (c098 <HardwareSerial::addToSerialEventsList()+0x40>)
    c080:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c084:	4a05      	ldr	r2, [pc, #20]	; (c09c <HardwareSerial::addToSerialEventsList()+0x44>)
    c086:	7813      	ldrb	r3, [r2, #0]
    c088:	f043 0302 	orr.w	r3, r3, #2
    c08c:	7013      	strb	r3, [r2, #0]
}
    c08e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c092:	4770      	bx	lr
    c094:	2000532d 	.word	0x2000532d
    c098:	20004b84 	.word	0x20004b84
    c09c:	200038d7 	.word	0x200038d7

0000c0a0 <HardwareSerial::begin(unsigned long, unsigned short)>:
{
    c0a0:	b570      	push	{r4, r5, r6, lr}
    c0a2:	ee07 1a90 	vmov	s15, r1
    c0a6:	4614      	mov	r4, r2
	float base = (float)UART_CLOCK / (float)baud;
    c0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c0ac:	ed9f 7a93 	vldr	s14, [pc, #588]	; c2fc <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>
    c0b0:	ee87 5a27 	vdiv.f32	s10, s14, s15
	for (int osr=4; osr <= 32; osr++) {
    c0b4:	2104      	movs	r1, #4
	int bestosr = 4;
    c0b6:	468e      	mov	lr, r1
	int bestdiv = 1;
    c0b8:	2201      	movs	r2, #1
	float besterr = 1e20;
    c0ba:	ed9f 6a91 	vldr	s12, [pc, #580]	; c300 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>
		int divint = (int)(div + 0.5f);
    c0be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c0c2:	f641 7cff 	movw	ip, #8191	; 0x1fff
    c0c6:	e002      	b.n	c0ce <HardwareSerial::begin(unsigned long, unsigned short)+0x2e>
	for (int osr=4; osr <= 32; osr++) {
    c0c8:	3101      	adds	r1, #1
    c0ca:	2921      	cmp	r1, #33	; 0x21
    c0cc:	d02a      	beq.n	c124 <HardwareSerial::begin(unsigned long, unsigned short)+0x84>
		float div = base / (float)osr;
    c0ce:	ee07 1a90 	vmov	s15, r1
    c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c0d6:	ee85 7a27 	vdiv.f32	s14, s10, s15
		int divint = (int)(div + 0.5f);
    c0da:	ee77 7a25 	vadd.f32	s15, s14, s11
    c0de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c0e2:	ee17 3a90 	vmov	r3, s15
    c0e6:	4563      	cmp	r3, ip
    c0e8:	bfa8      	it	ge
    c0ea:	4663      	movge	r3, ip
    c0ec:	2b01      	cmp	r3, #1
    c0ee:	bfb8      	it	lt
    c0f0:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    c0f2:	ee07 3a90 	vmov	s15, r3
    c0f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    c0fa:	ee76 6ac7 	vsub.f32	s13, s13, s14
    c0fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c102:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    c106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c10a:	bf48      	it	mi
    c10c:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c110:	eef4 7ac6 	vcmpe.f32	s15, s12
    c114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c118:	d8d6      	bhi.n	c0c8 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
    c11a:	468e      	mov	lr, r1
			bestdiv = divint;
    c11c:	461a      	mov	r2, r3
			besterr = err;
    c11e:	eeb0 6a67 	vmov.f32	s12, s15
    c122:	e7d1      	b.n	c0c8 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    c124:	2300      	movs	r3, #0
    c126:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    c12a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
    c12e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c132:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c136:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c138:	6941      	ldr	r1, [r0, #20]
    c13a:	f8b1 605c 	ldrh.w	r6, [r1, #92]	; 0x5c
    c13e:	1bae      	subs	r6, r5, r6
    c140:	63c6      	str	r6, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c142:	f8b1 605e 	ldrh.w	r6, [r1, #94]	; 0x5e
    c146:	1bad      	subs	r5, r5, r6
    c148:	6405      	str	r5, [r0, #64]	; 0x40
	transmitting_ = 0;
    c14a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	hardware->ccm_register |= hardware->ccm_value;
    c14e:	690d      	ldr	r5, [r1, #16]
    c150:	682b      	ldr	r3, [r5, #0]
    c152:	6949      	ldr	r1, [r1, #20]
    c154:	430b      	orrs	r3, r1
    c156:	602b      	str	r3, [r5, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    c158:	f404 7300 	and.w	r3, r4, #512	; 0x200
    c15c:	2b00      	cmp	r3, #0
    c15e:	bf14      	ite	ne
    c160:	2301      	movne	r3, #1
    c162:	2300      	moveq	r3, #0
    c164:	7683      	strb	r3, [r0, #26]
	if (!half_duplex_mode_)  {
    c166:	f040 80aa 	bne.w	c2be <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c16a:	4966      	ldr	r1, [pc, #408]	; (c304 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c16c:	6943      	ldr	r3, [r0, #20]
    c16e:	7e05      	ldrb	r5, [r0, #24]
    c170:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c174:	7e1b      	ldrb	r3, [r3, #24]
    c176:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c17a:	689b      	ldr	r3, [r3, #8]
    c17c:	4d62      	ldr	r5, [pc, #392]	; (c308 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    c17e:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c180:	6943      	ldr	r3, [r0, #20]
    c182:	7e05      	ldrb	r5, [r0, #24]
    c184:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c188:	7e1d      	ldrb	r5, [r3, #24]
    c18a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c18e:	6849      	ldr	r1, [r1, #4]
    c190:	69db      	ldr	r3, [r3, #28]
    c192:	600b      	str	r3, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c194:	7e01      	ldrb	r1, [r0, #24]
    c196:	6943      	ldr	r3, [r0, #20]
    c198:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c19c:	6a19      	ldr	r1, [r3, #32]
    c19e:	b109      	cbz	r1, c1a4 <HardwareSerial::begin(unsigned long, unsigned short)+0x104>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c1a2:	600b      	str	r3, [r1, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c1a4:	4957      	ldr	r1, [pc, #348]	; (c304 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c1a6:	6943      	ldr	r3, [r0, #20]
    c1a8:	7e45      	ldrb	r5, [r0, #25]
    c1aa:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c1ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c1b2:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c1b6:	689b      	ldr	r3, [r3, #8]
    c1b8:	25d9      	movs	r5, #217	; 0xd9
    c1ba:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c1bc:	6943      	ldr	r3, [r0, #20]
    c1be:	7e45      	ldrb	r5, [r0, #25]
    c1c0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c1c4:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c1c8:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c1cc:	6849      	ldr	r1, [r1, #4]
    c1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c1d0:	600b      	str	r3, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    c1d2:	7e41      	ldrb	r1, [r0, #25]
    c1d4:	6943      	ldr	r3, [r0, #20]
    c1d6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c1da:	6c19      	ldr	r1, [r3, #64]	; 0x40
    c1dc:	b109      	cbz	r1, c1e2 <HardwareSerial::begin(unsigned long, unsigned short)+0x142>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    c1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c1e0:	600b      	str	r3, [r1, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c1e2:	6901      	ldr	r1, [r0, #16]
    c1e4:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    c1e8:	061b      	lsls	r3, r3, #24
    c1ea:	f003 5cf8 	and.w	ip, r3, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    c1ee:	f1be 0f08 	cmp.w	lr, #8
    c1f2:	bfcc      	ite	gt
    c1f4:	f04f 0e00 	movgt.w	lr, #0
    c1f8:	f04f 0e01 	movle.w	lr, #1
    c1fc:	ea42 434e 	orr.w	r3, r2, lr, lsl #17
    c200:	ea4c 0303 	orr.w	r3, ip, r3
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c204:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    c206:	6903      	ldr	r3, [r0, #16]
    c208:	2200      	movs	r2, #0
    c20a:	60da      	str	r2, [r3, #12]
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c20c:	6943      	ldr	r3, [r0, #20]
    c20e:	6859      	ldr	r1, [r3, #4]
    c210:	785b      	ldrb	r3, [r3, #1]
    c212:	3310      	adds	r3, #16
    c214:	4a3d      	ldr	r2, [pc, #244]	; (c30c <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    c216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c21a:	6943      	ldr	r3, [r0, #20]
    c21c:	785a      	ldrb	r2, [r3, #1]
    c21e:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
    c222:	4b3b      	ldr	r3, [pc, #236]	; (c310 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    c224:	54d1      	strb	r1, [r2, r3]
	NVIC_ENABLE_IRQ(hardware->irq);
    c226:	6943      	ldr	r3, [r0, #20]
    c228:	785a      	ldrb	r2, [r3, #1]
    c22a:	4b3a      	ldr	r3, [pc, #232]	; (c314 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
    c22c:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c230:	009b      	lsls	r3, r3, #2
    c232:	f002 021f 	and.w	r2, r2, #31
    c236:	2101      	movs	r1, #1
    c238:	fa01 f202 	lsl.w	r2, r1, r2
    c23c:	601a      	str	r2, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c23e:	6903      	ldr	r3, [r0, #16]
    c240:	f04f 1202 	mov.w	r2, #131074	; 0x20002
    c244:	62da      	str	r2, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c246:	6902      	ldr	r2, [r0, #16]
    c248:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c24a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    c24e:	6293      	str	r3, [r2, #40]	; 0x28
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c250:	f004 0203 	and.w	r2, r4, #3
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c254:	f014 0f04 	tst.w	r4, #4
    c258:	d14a      	bne.n	c2f0 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c25a:	f442 1370 	orr.w	r3, r2, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c25e:	f004 020f 	and.w	r2, r4, #15
    c262:	2a04      	cmp	r2, #4
    c264:	bf08      	it	eq
    c266:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c26a:	f014 0f20 	tst.w	r4, #32
    c26e:	bf18      	it	ne
    c270:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    c274:	7e82      	ldrb	r2, [r0, #26]
    c276:	b10a      	cbz	r2, c27c <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    c278:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	port->CTRL = ctrl;
    c27c:	6902      	ldr	r2, [r0, #16]
    c27e:	6193      	str	r3, [r2, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c280:	f014 0f08 	tst.w	r4, #8
    c284:	d004      	beq.n	c290 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f0>
    c286:	6902      	ldr	r2, [r0, #16]
    c288:	6913      	ldr	r3, [r2, #16]
    c28a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c28e:	6113      	str	r3, [r2, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c290:	6902      	ldr	r2, [r0, #16]
    c292:	6953      	ldr	r3, [r2, #20]
    c294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c298:	f014 0f10 	tst.w	r4, #16
    c29c:	bf18      	it	ne
    c29e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    c2a2:	6153      	str	r3, [r2, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    c2a4:	f414 7f80 	tst.w	r4, #256	; 0x100
    c2a8:	d004      	beq.n	c2b4 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    c2aa:	6902      	ldr	r2, [r0, #16]
    c2ac:	6913      	ldr	r3, [r2, #16]
    c2ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c2b2:	6113      	str	r3, [r2, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c2b4:	6943      	ldr	r3, [r0, #20]
    c2b6:	68db      	ldr	r3, [r3, #12]
    c2b8:	781b      	ldrb	r3, [r3, #0]
    c2ba:	b1e3      	cbz	r3, c2f6 <HardwareSerial::begin(unsigned long, unsigned short)+0x256>
};
    c2bc:	bd70      	pop	{r4, r5, r6, pc}
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    c2be:	4911      	ldr	r1, [pc, #68]	; (c304 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c2c0:	6943      	ldr	r3, [r0, #20]
    c2c2:	7e45      	ldrb	r5, [r0, #25]
    c2c4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c2c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c2cc:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c2d0:	689b      	ldr	r3, [r3, #8]
    c2d2:	f24f 05d9 	movw	r5, #61657	; 0xf0d9
    c2d6:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c2d8:	6943      	ldr	r3, [r0, #20]
    c2da:	7e45      	ldrb	r5, [r0, #25]
    c2dc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c2e0:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c2e4:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c2e8:	6849      	ldr	r1, [r1, #4]
    c2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c2ec:	600b      	str	r3, [r1, #0]
    c2ee:	e770      	b.n	c1d2 <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c2f0:	4b09      	ldr	r3, [pc, #36]	; (c318 <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    c2f2:	4313      	orrs	r3, r2
    c2f4:	e7b3      	b.n	c25e <HardwareSerial::begin(unsigned long, unsigned short)+0x1be>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c2f6:	f7ff feaf 	bl	c058 <HardwareSerial::addToSerialEventsList()>
};
    c2fa:	e7df      	b.n	c2bc <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
    c2fc:	4bb71b00 	.word	0x4bb71b00
    c300:	60ad78ec 	.word	0x60ad78ec
    c304:	200026e8 	.word	0x200026e8
    c308:	0001f038 	.word	0x0001f038
    c30c:	20003c00 	.word	0x20003c00
    c310:	e000e400 	.word	0xe000e400
    c314:	38003840 	.word	0x38003840
    c318:	003c0010 	.word	0x003c0010

0000c31c <IRQHandler_Serial5>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
    c31c:	b508      	push	{r3, lr}
	Serial5.IRQHandler();
    c31e:	4802      	ldr	r0, [pc, #8]	; (c328 <IRQHandler_Serial5+0xc>)
    c320:	f7ff fded 	bl	befe <HardwareSerial::IRQHandler()>
}
    c324:	bd08      	pop	{r3, pc}
    c326:	bf00      	nop
    c328:	200046a4 	.word	0x200046a4

0000c32c <_GLOBAL__sub_I_IRQHandler_Serial5>:
    c32c:	4b16      	ldr	r3, [pc, #88]	; (c388 <_GLOBAL__sub_I_IRQHandler_Serial5+0x5c>)
    c32e:	2200      	movs	r2, #0
    c330:	605a      	str	r2, [r3, #4]
    c332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c336:	6099      	str	r1, [r3, #8]
    c338:	731a      	strb	r2, [r3, #12]
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c33a:	4914      	ldr	r1, [pc, #80]	; (c38c <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    c33c:	6019      	str	r1, [r3, #0]
		port(myport), hardware(myhardware),
    c33e:	4914      	ldr	r1, [pc, #80]	; (c390 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    c340:	6119      	str	r1, [r3, #16]
    c342:	4914      	ldr	r1, [pc, #80]	; (c394 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    c344:	6159      	str	r1, [r3, #20]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c346:	761a      	strb	r2, [r3, #24]
    c348:	765a      	strb	r2, [r3, #25]
    c34a:	769a      	strb	r2, [r3, #26]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c34c:	4912      	ldr	r1, [pc, #72]	; (c398 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    c34e:	61d9      	str	r1, [r3, #28]
    c350:	4912      	ldr	r1, [pc, #72]	; (c39c <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    c352:	6219      	str	r1, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c354:	625a      	str	r2, [r3, #36]	; 0x24
    c356:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c358:	2028      	movs	r0, #40	; 0x28
    c35a:	62d8      	str	r0, [r3, #44]	; 0x2c
    c35c:	2140      	movs	r1, #64	; 0x40
    c35e:	6319      	str	r1, [r3, #48]	; 0x30
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c360:	6358      	str	r0, [r3, #52]	; 0x34
    c362:	6399      	str	r1, [r3, #56]	; 0x38
    c364:	63da      	str	r2, [r3, #60]	; 0x3c
    c366:	641a      	str	r2, [r3, #64]	; 0x40
    c368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    c36c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    c370:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    c374:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    c378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    c37c:	651a      	str	r2, [r3, #80]	; 0x50
    c37e:	655a      	str	r2, [r3, #84]	; 0x54
    c380:	659a      	str	r2, [r3, #88]	; 0x58
    c382:	65da      	str	r2, [r3, #92]	; 0x5c
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    c384:	4770      	bx	lr
    c386:	bf00      	nop
    c388:	200046a4 	.word	0x200046a4
    c38c:	200021e8 	.word	0x200021e8
    c390:	401a0000 	.word	0x401a0000
    c394:	20003194 	.word	0x20003194
    c398:	20004b0c 	.word	0x20004b0c
    c39c:	20004acc 	.word	0x20004acc

0000c3a0 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c3a2:	b179      	cbz	r1, c3c4 <Print::write(unsigned char const*, unsigned int)+0x24>
    c3a4:	4606      	mov	r6, r0
    c3a6:	460c      	mov	r4, r1
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c3a8:	b172      	cbz	r2, c3c8 <Print::write(unsigned char const*, unsigned int)+0x28>
    c3aa:	188f      	adds	r7, r1, r2
	size_t count = 0;
    c3ac:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    c3ae:	6833      	ldr	r3, [r6, #0]
    c3b0:	681b      	ldr	r3, [r3, #0]
    c3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
    c3b6:	4630      	mov	r0, r6
    c3b8:	4798      	blx	r3
    c3ba:	4405      	add	r5, r0
    c3bc:	42a7      	cmp	r7, r4
    c3be:	d1f6      	bne.n	c3ae <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    c3c0:	4628      	mov	r0, r5
    c3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    c3c4:	2500      	movs	r5, #0
    c3c6:	e7fb      	b.n	c3c0 <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
    c3c8:	4615      	mov	r5, r2
    c3ca:	e7f9      	b.n	c3c0 <Print::write(unsigned char const*, unsigned int)+0x20>

0000c3cc <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    c3cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c3d0:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
    c3d2:	688c      	ldr	r4, [r1, #8]
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c3d4:	b1ec      	cbz	r4, c412 <Print::print(String const&)+0x46>
    c3d6:	4606      	mov	r6, r0
    c3d8:	4688      	mov	r8, r1
	unsigned int index = 0;
    c3da:	2500      	movs	r5, #0
	size_t count = 0;
    c3dc:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    c3de:	f04f 0921 	mov.w	r9, #33	; 0x21
    c3e2:	462b      	mov	r3, r5
    c3e4:	464a      	mov	r2, r9
    c3e6:	a901      	add	r1, sp, #4
    c3e8:	4640      	mov	r0, r8
    c3ea:	f000 fb8d 	bl	cb08 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    c3ee:	4622      	mov	r2, r4
    c3f0:	2c20      	cmp	r4, #32
    c3f2:	bf28      	it	cs
    c3f4:	2220      	movcs	r2, #32
		index += nbytes;
    c3f6:	4415      	add	r5, r2
		len -= nbytes;
    c3f8:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    c3fa:	6833      	ldr	r3, [r6, #0]
    c3fc:	685b      	ldr	r3, [r3, #4]
    c3fe:	a901      	add	r1, sp, #4
    c400:	4630      	mov	r0, r6
    c402:	4798      	blx	r3
    c404:	4407      	add	r7, r0
	while (len > 0) {
    c406:	2c00      	cmp	r4, #0
    c408:	d1eb      	bne.n	c3e2 <Print::print(String const&)+0x16>
	}
	return count;
}
    c40a:	4638      	mov	r0, r7
    c40c:	b00b      	add	sp, #44	; 0x2c
    c40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
    c412:	4627      	mov	r7, r4
	return count;
    c414:	e7f9      	b.n	c40a <Print::print(String const&)+0x3e>

0000c416 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    c416:	b500      	push	{lr}
    c418:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c41a:	f640 230d 	movw	r3, #2573	; 0xa0d
    c41e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c422:	6803      	ldr	r3, [r0, #0]
    c424:	685b      	ldr	r3, [r3, #4]
    c426:	2202      	movs	r2, #2
    c428:	a901      	add	r1, sp, #4
    c42a:	4798      	blx	r3
}
    c42c:	b003      	add	sp, #12
    c42e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c434 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c434:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c436:	4b04      	ldr	r3, [pc, #16]	; (c448 <_write+0x14>)
    c438:	2802      	cmp	r0, #2
    c43a:	bf88      	it	hi
    c43c:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c43e:	6818      	ldr	r0, [r3, #0]
    c440:	6844      	ldr	r4, [r0, #4]
    c442:	4618      	mov	r0, r3
    c444:	47a0      	blx	r4
}
    c446:	bd10      	pop	{r4, pc}
    c448:	20003184 	.word	0x20003184

0000c44c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c44c:	b530      	push	{r4, r5, lr}
    c44e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c450:	b92a      	cbnz	r2, c45e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    c452:	6803      	ldr	r3, [r0, #0]
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	b2c9      	uxtb	r1, r1
    c458:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c45a:	b00b      	add	sp, #44	; 0x2c
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	4696      	mov	lr, r2
		base = 10;
    c460:	2a01      	cmp	r2, #1
    c462:	bf14      	ite	ne
    c464:	4696      	movne	lr, r2
    c466:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
    c46a:	b9b9      	cbnz	r1, c49c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
    c46c:	2230      	movs	r2, #48	; 0x30
    c46e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c472:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
    c476:	b14b      	cbz	r3, c48c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
    c478:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c47c:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
    c480:	f10c 0328 	add.w	r3, ip, #40	; 0x28
    c484:	446b      	add	r3, sp
    c486:	222d      	movs	r2, #45	; 0x2d
    c488:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    c48c:	6803      	ldr	r3, [r0, #0]
    c48e:	685b      	ldr	r3, [r3, #4]
    c490:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
    c494:	a901      	add	r1, sp, #4
    c496:	4461      	add	r1, ip
    c498:	4798      	blx	r3
    c49a:	e7de      	b.n	c45a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
    c49c:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
    c4a0:	4674      	mov	r4, lr
    c4a2:	e004      	b.n	c4ae <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
    c4a4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c4a8:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
    c4ac:	4611      	mov	r1, r2
			digit = n % base;
    c4ae:	fbb1 f2fe 	udiv	r2, r1, lr
    c4b2:	fb0e 1212 	mls	r2, lr, r2, r1
    c4b6:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c4b8:	2a09      	cmp	r2, #9
    c4ba:	bf94      	ite	ls
    c4bc:	3230      	addls	r2, #48	; 0x30
    c4be:	3237      	addhi	r2, #55	; 0x37
    c4c0:	b2d2      	uxtb	r2, r2
    c4c2:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    c4c6:	446d      	add	r5, sp
    c4c8:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    c4cc:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
    c4d0:	428c      	cmp	r4, r1
    c4d2:	d9e7      	bls.n	c4a4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
    c4d4:	e7cf      	b.n	c476 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>
	...

0000c4d8 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    c4d8:	b570      	push	{r4, r5, r6, lr}
    c4da:	ed2d 8b02 	vpush	{d8}
    c4de:	b086      	sub	sp, #24
    c4e0:	4605      	mov	r5, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c4e2:	eeb4 0b40 	vcmp.f64	d0, d0
    c4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4ea:	d666      	bvs.n	c5ba <Print::printFloat(double, unsigned char)+0xe2>
    c4ec:	460c      	mov	r4, r1
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c4ee:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c4f2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; c620 <Print::printFloat(double, unsigned char)+0x148>
    c4f6:	eeb4 7b46 	vcmp.f64	d7, d6
    c4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4fe:	dc63      	bgt.n	c5c8 <Print::printFloat(double, unsigned char)+0xf0>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c500:	ed9f 7b49 	vldr	d7, [pc, #292]	; c628 <Print::printFloat(double, unsigned char)+0x150>
    c504:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c50c:	dc67      	bgt.n	c5de <Print::printFloat(double, unsigned char)+0x106>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c50e:	ed9f 7b48 	vldr	d7, [pc, #288]	; c630 <Print::printFloat(double, unsigned char)+0x158>
    c512:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c51a:	d467      	bmi.n	c5ec <Print::printFloat(double, unsigned char)+0x114>
	
	// Handle negative numbers
	if (number < 0.0) {
    c51c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c524:	d469      	bmi.n	c5fa <Print::printFloat(double, unsigned char)+0x122>
	uint8_t sign=0;
    c526:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    c528:	2c00      	cmp	r4, #0
    c52a:	d06a      	beq.n	c602 <Print::printFloat(double, unsigned char)+0x12a>
    c52c:	f04f 0c00 	mov.w	ip, #0
	double rounding = 0.5;
    c530:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
		rounding *= 0.1;
    c534:	ed9f 6b40 	vldr	d6, [pc, #256]	; c638 <Print::printFloat(double, unsigned char)+0x160>
    c538:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    c53c:	f10c 0c01 	add.w	ip, ip, #1
    c540:	fa5f f28c 	uxtb.w	r2, ip
    c544:	4294      	cmp	r4, r2
    c546:	d8f7      	bhi.n	c538 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    c548:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    c54c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    c550:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    c554:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    c558:	220a      	movs	r2, #10
    c55a:	ee17 1a90 	vmov	r1, s15
    c55e:	4628      	mov	r0, r5
    c560:	f7ff ff74 	bl	c44c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c564:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    c566:	232e      	movs	r3, #46	; 0x2e
    c568:	f88d 3008 	strb.w	r3, [sp, #8]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    c56c:	2c0f      	cmp	r4, #15
    c56e:	bf28      	it	cs
    c570:	240f      	movcs	r4, #15

		while (digits-- > 0) {
    c572:	aa02      	add	r2, sp, #8
    c574:	1e60      	subs	r0, r4, #1
    c576:	f10d 0309 	add.w	r3, sp, #9
    c57a:	fa53 f080 	uxtab	r0, r3, r0
			remainder *= 10.0;
    c57e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    c582:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    c586:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c58a:	edcd 7a01 	vstr	s15, [sp, #4]
    c58e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
    c592:	f103 0130 	add.w	r1, r3, #48	; 0x30
    c596:	f802 1f01 	strb.w	r1, [r2, #1]!
			remainder -= n; 
    c59a:	ee07 3a90 	vmov	s15, r3
    c59e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    c5a2:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    c5a6:	4282      	cmp	r2, r0
    c5a8:	d1eb      	bne.n	c582 <Print::printFloat(double, unsigned char)+0xaa>
			buf[count++] = '0' + n;
    c5aa:	3401      	adds	r4, #1
		}
		count += write(buf, count);
    c5ac:	682b      	ldr	r3, [r5, #0]
    c5ae:	685b      	ldr	r3, [r3, #4]
    c5b0:	b2e2      	uxtb	r2, r4
    c5b2:	a902      	add	r1, sp, #8
    c5b4:	4628      	mov	r0, r5
    c5b6:	4798      	blx	r3
    c5b8:	e00c      	b.n	c5d4 <Print::printFloat(double, unsigned char)+0xfc>
							  return write((const uint8_t *)str, strlen(str)); }
    c5ba:	6803      	ldr	r3, [r0, #0]
    c5bc:	685b      	ldr	r3, [r3, #4]
    c5be:	2203      	movs	r2, #3
    c5c0:	491f      	ldr	r1, [pc, #124]	; (c640 <Print::printFloat(double, unsigned char)+0x168>)
    c5c2:	4798      	blx	r3
    c5c4:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    c5c6:	e005      	b.n	c5d4 <Print::printFloat(double, unsigned char)+0xfc>
    c5c8:	6803      	ldr	r3, [r0, #0]
    c5ca:	685b      	ldr	r3, [r3, #4]
    c5cc:	2203      	movs	r2, #3
    c5ce:	491d      	ldr	r1, [pc, #116]	; (c644 <Print::printFloat(double, unsigned char)+0x16c>)
    c5d0:	4798      	blx	r3
    c5d2:	4606      	mov	r6, r0
	}
	return count;
}
    c5d4:	4630      	mov	r0, r6
    c5d6:	b006      	add	sp, #24
    c5d8:	ecbd 8b02 	vpop	{d8}
    c5dc:	bd70      	pop	{r4, r5, r6, pc}
    c5de:	6803      	ldr	r3, [r0, #0]
    c5e0:	685b      	ldr	r3, [r3, #4]
    c5e2:	2203      	movs	r2, #3
    c5e4:	4918      	ldr	r1, [pc, #96]	; (c648 <Print::printFloat(double, unsigned char)+0x170>)
    c5e6:	4798      	blx	r3
    c5e8:	4606      	mov	r6, r0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c5ea:	e7f3      	b.n	c5d4 <Print::printFloat(double, unsigned char)+0xfc>
    c5ec:	6803      	ldr	r3, [r0, #0]
    c5ee:	685b      	ldr	r3, [r3, #4]
    c5f0:	2203      	movs	r2, #3
    c5f2:	4915      	ldr	r1, [pc, #84]	; (c648 <Print::printFloat(double, unsigned char)+0x170>)
    c5f4:	4798      	blx	r3
    c5f6:	4606      	mov	r6, r0
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c5f8:	e7ec      	b.n	c5d4 <Print::printFloat(double, unsigned char)+0xfc>
		number = -number;
    c5fa:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    c5fe:	2301      	movs	r3, #1
    c600:	e792      	b.n	c528 <Print::printFloat(double, unsigned char)+0x50>
	number += rounding;
    c602:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    c606:	ee30 0b07 	vadd.f64	d0, d0, d7
	count += printNumber(int_part, 10, sign);
    c60a:	220a      	movs	r2, #10
    c60c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c610:	ee17 1a90 	vmov	r1, s15
    c614:	4628      	mov	r0, r5
    c616:	f7ff ff19 	bl	c44c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c61a:	4606      	mov	r6, r0
	if (digits > 0) {
    c61c:	e7da      	b.n	c5d4 <Print::printFloat(double, unsigned char)+0xfc>
    c61e:	bf00      	nop
    c620:	ffffffff 	.word	0xffffffff
    c624:	7fefffff 	.word	0x7fefffff
    c628:	e0000000 	.word	0xe0000000
    c62c:	41efffff 	.word	0x41efffff
    c630:	e0000000 	.word	0xe0000000
    c634:	c1efffff 	.word	0xc1efffff
    c638:	9999999a 	.word	0x9999999a
    c63c:	3fb99999 	.word	0x3fb99999
    c640:	20002060 	.word	0x20002060
    c644:	20002064 	.word	0x20002064
    c648:	20002068 	.word	0x20002068

0000c64c <Stream::timedPeek()>:
{
    c64c:	b570      	push	{r4, r5, r6, lr}
    c64e:	4604      	mov	r4, r0
    c650:	4b09      	ldr	r3, [pc, #36]	; (c678 <Stream::timedPeek()+0x2c>)
    c652:	681e      	ldr	r6, [r3, #0]
    c654:	461d      	mov	r5, r3
    c = peek();
    c656:	6823      	ldr	r3, [r4, #0]
    c658:	699b      	ldr	r3, [r3, #24]
    c65a:	4620      	mov	r0, r4
    c65c:	4798      	blx	r3
    if (c >= 0) return c;
    c65e:	2800      	cmp	r0, #0
    c660:	da08      	bge.n	c674 <Stream::timedPeek()+0x28>
    yield();
    c662:	f002 fb25 	bl	ecb0 <yield>
    c666:	682b      	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c668:	1b9b      	subs	r3, r3, r6
    c66a:	68a2      	ldr	r2, [r4, #8]
    c66c:	4293      	cmp	r3, r2
    c66e:	d3f2      	bcc.n	c656 <Stream::timedPeek()+0xa>
  return -1;     // -1 indicates timeout
    c670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c674:	bd70      	pop	{r4, r5, r6, pc}
    c676:	bf00      	nop
    c678:	200052f0 	.word	0x200052f0

0000c67c <Stream::peekNextDigit()>:
{
    c67c:	b510      	push	{r4, lr}
    c67e:	4604      	mov	r4, r0
    c680:	e003      	b.n	c68a <Stream::peekNextDigit()+0xe>
    read();  // discard non-numeric
    c682:	6823      	ldr	r3, [r4, #0]
    c684:	695b      	ldr	r3, [r3, #20]
    c686:	4620      	mov	r0, r4
    c688:	4798      	blx	r3
    c = timedPeek();
    c68a:	4620      	mov	r0, r4
    c68c:	f7ff ffde 	bl	c64c <Stream::timedPeek()>
    if (c == '-') return c;
    c690:	282d      	cmp	r0, #45	; 0x2d
    c692:	d005      	beq.n	c6a0 <Stream::peekNextDigit()+0x24>
    c694:	2800      	cmp	r0, #0
    c696:	db03      	blt.n	c6a0 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    c698:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c69c:	2b09      	cmp	r3, #9
    c69e:	d8f0      	bhi.n	c682 <Stream::peekNextDigit()+0x6>
}
    c6a0:	bd10      	pop	{r4, pc}
	...

0000c6a4 <Stream::parseFloat(char)>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    c6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c6a8:	ed2d 8b02 	vpush	{d8}
    c6ac:	4604      	mov	r4, r0
    c6ae:	460d      	mov	r5, r1
  boolean isFraction = false;
  long value = 0;
  int c;
  float fraction = 1.0;

  c = peekNextDigit();
    c6b0:	f7ff ffe4 	bl	c67c <Stream::peekNextDigit()>
    // ignore non numeric leading characters
  if(c < 0)
    c6b4:	2800      	cmp	r0, #0
    c6b6:	db45      	blt.n	c744 <Stream::parseFloat(char)+0xa0>
  float fraction = 1.0;
    c6b8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  long value = 0;
    c6bc:	f04f 0900 	mov.w	r9, #0
  boolean isFraction = false;
    c6c0:	464f      	mov	r7, r9
  boolean isNegative = false;
    c6c2:	46c8      	mov	r8, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    c6c4:	2601      	movs	r6, #1
    else if (c == '.')
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1f;
    c6c6:	eddf 8a21 	vldr	s17, [pc, #132]	; c74c <Stream::parseFloat(char)+0xa8>
    c6ca:	e00f      	b.n	c6ec <Stream::parseFloat(char)+0x48>
      isNegative = true;
    c6cc:	46b0      	mov	r8, r6
    }
    read();  // consume the character we got with peek
    c6ce:	6823      	ldr	r3, [r4, #0]
    c6d0:	695b      	ldr	r3, [r3, #20]
    c6d2:	4620      	mov	r0, r4
    c6d4:	4798      	blx	r3
    c = timedPeek();
    c6d6:	4620      	mov	r0, r4
    c6d8:	f7ff ffb8 	bl	c64c <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
    c6dc:	4285      	cmp	r5, r0
    c6de:	bf18      	it	ne
    c6e0:	282e      	cmpne	r0, #46	; 0x2e
    c6e2:	d003      	beq.n	c6ec <Stream::parseFloat(char)+0x48>
    c6e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c6e8:	2b09      	cmp	r3, #9
    c6ea:	d816      	bhi.n	c71a <Stream::parseFloat(char)+0x76>
    if(c == skipChar)
    c6ec:	4285      	cmp	r5, r0
    c6ee:	d0ee      	beq.n	c6ce <Stream::parseFloat(char)+0x2a>
    else if(c == '-')
    c6f0:	282d      	cmp	r0, #45	; 0x2d
    c6f2:	d0eb      	beq.n	c6cc <Stream::parseFloat(char)+0x28>
    else if (c == '.')
    c6f4:	282e      	cmp	r0, #46	; 0x2e
    c6f6:	d00e      	beq.n	c716 <Stream::parseFloat(char)+0x72>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    c6f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c6fc:	2b09      	cmp	r3, #9
    c6fe:	d8e6      	bhi.n	c6ce <Stream::parseFloat(char)+0x2a>
      value = value * 10 + c - '0';
    c700:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    c704:	eb00 0049 	add.w	r0, r0, r9, lsl #1
    c708:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
      if(isFraction)
    c70c:	2f00      	cmp	r7, #0
    c70e:	d0de      	beq.n	c6ce <Stream::parseFloat(char)+0x2a>
         fraction *= 0.1f;
    c710:	ee28 8a28 	vmul.f32	s16, s16, s17
    c714:	e7db      	b.n	c6ce <Stream::parseFloat(char)+0x2a>
      isFraction = true;
    c716:	4637      	mov	r7, r6
    c718:	e7d9      	b.n	c6ce <Stream::parseFloat(char)+0x2a>

  if(isNegative)
    c71a:	f1b8 0f00 	cmp.w	r8, #0
    c71e:	d001      	beq.n	c724 <Stream::parseFloat(char)+0x80>
    value = -value;
    c720:	f1c9 0900 	rsb	r9, r9, #0
  if(isFraction)
    c724:	b14f      	cbz	r7, c73a <Stream::parseFloat(char)+0x96>
    return value * fraction;
    c726:	ee07 9a90 	vmov	s15, r9
    c72a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    c72e:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
    c732:	ecbd 8b02 	vpop	{d8}
    c736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return value;
    c73a:	ee07 9a90 	vmov	s15, r9
    c73e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    c742:	e7f6      	b.n	c732 <Stream::parseFloat(char)+0x8e>
    return 0; // zero returned if timeout
    c744:	ed9f 0a02 	vldr	s0, [pc, #8]	; c750 <Stream::parseFloat(char)+0xac>
    c748:	e7f3      	b.n	c732 <Stream::parseFloat(char)+0x8e>
    c74a:	bf00      	nop
    c74c:	3dcccccd 	.word	0x3dcccccd
    c750:	00000000 	.word	0x00000000

0000c754 <Stream::parseFloat()>:
{
    c754:	b508      	push	{r3, lr}
  return parseFloat(NO_SKIP_CHAR);
    c756:	2101      	movs	r1, #1
    c758:	f7ff ffa4 	bl	c6a4 <Stream::parseFloat(char)>
}
    c75c:	bd08      	pop	{r3, pc}
	...

0000c760 <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    c764:	4b59      	ldr	r3, [pc, #356]	; (c8cc <breakTime(unsigned long, DateTimeFields&)+0x16c>)
    c766:	fba3 4200 	umull	r4, r2, r3, r0
    c76a:	0952      	lsrs	r2, r2, #5
    c76c:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    c770:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    c774:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.min = time % 60;
    c776:	fba3 0302 	umull	r0, r3, r3, r2
    c77a:	095b      	lsrs	r3, r3, #5
    c77c:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    c780:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
    c784:	704a      	strb	r2, [r1, #1]
  time /= 60; // now it is hours
  tm.hour = time % 24;
    c786:	4a52      	ldr	r2, [pc, #328]	; (c8d0 <breakTime(unsigned long, DateTimeFields&)+0x170>)
    c788:	fba2 2e03 	umull	r2, lr, r2, r3
    c78c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    c790:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
    c794:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    c798:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    c79a:	f10e 0204 	add.w	r2, lr, #4
    c79e:	4b4d      	ldr	r3, [pc, #308]	; (c8d4 <breakTime(unsigned long, DateTimeFields&)+0x174>)
    c7a0:	fba3 0302 	umull	r0, r3, r3, r2
    c7a4:	1ad0      	subs	r0, r2, r3
    c7a6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    c7aa:	089b      	lsrs	r3, r3, #2
    c7ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    c7b0:	1ad2      	subs	r2, r2, r3
    c7b2:	70ca      	strb	r2, [r1, #3]

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c7b4:	2000      	movs	r0, #0
  days = 0;
    c7b6:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    c7b8:	f240 176d 	movw	r7, #365	; 0x16d
    c7bc:	4e46      	ldr	r6, [pc, #280]	; (c8d8 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c7be:	f04f 0864 	mov.w	r8, #100	; 0x64
    c7c2:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
    c7c6:	f44f 79c8 	mov.w	r9, #400	; 0x190
    c7ca:	e004      	b.n	c7d6 <breakTime(unsigned long, DateTimeFields&)+0x76>
    c7cc:	463c      	mov	r4, r7
    c7ce:	4422      	add	r2, r4
    c7d0:	3001      	adds	r0, #1
    c7d2:	4596      	cmp	lr, r2
    c7d4:	d319      	bcc.n	c80a <breakTime(unsigned long, DateTimeFields&)+0xaa>
    c7d6:	fa5f fc80 	uxtb.w	ip, r0
    c7da:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
    c7de:	f013 0503 	ands.w	r5, r3, #3
    c7e2:	d1f3      	bne.n	c7cc <breakTime(unsigned long, DateTimeFields&)+0x6c>
    c7e4:	fb86 b403 	smull	fp, r4, r6, r3
    c7e8:	1164      	asrs	r4, r4, #5
    c7ea:	fb08 3414 	mls	r4, r8, r4, r3
    c7ee:	b954      	cbnz	r4, c806 <breakTime(unsigned long, DateTimeFields&)+0xa6>
    c7f0:	fb86 b403 	smull	fp, r4, r6, r3
    c7f4:	11e4      	asrs	r4, r4, #7
    c7f6:	fb09 3414 	mls	r4, r9, r4, r3
    c7fa:	2c00      	cmp	r4, #0
    c7fc:	bf14      	ite	ne
    c7fe:	463c      	movne	r4, r7
    c800:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    c804:	e7e3      	b.n	c7ce <breakTime(unsigned long, DateTimeFields&)+0x6e>
    c806:	4654      	mov	r4, sl
    c808:	e7e1      	b.n	c7ce <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    c80a:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
    c80e:	f881 c006 	strb.w	ip, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    c812:	b9b5      	cbnz	r5, c842 <breakTime(unsigned long, DateTimeFields&)+0xe2>
    c814:	4830      	ldr	r0, [pc, #192]	; (c8d8 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c816:	fb80 4003 	smull	r4, r0, r0, r3
    c81a:	1140      	asrs	r0, r0, #5
    c81c:	2464      	movs	r4, #100	; 0x64
    c81e:	fb04 3010 	mls	r0, r4, r0, r3
    c822:	bb50      	cbnz	r0, c87a <breakTime(unsigned long, DateTimeFields&)+0x11a>
    c824:	482c      	ldr	r0, [pc, #176]	; (c8d8 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c826:	fb80 4003 	smull	r4, r0, r0, r3
    c82a:	11c0      	asrs	r0, r0, #7
    c82c:	f44f 74c8 	mov.w	r4, #400	; 0x190
    c830:	fb04 3010 	mls	r0, r4, r0, r3
    c834:	2800      	cmp	r0, #0
    c836:	f240 106d 	movw	r0, #365	; 0x16d
    c83a:	bf08      	it	eq
    c83c:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    c840:	e001      	b.n	c846 <breakTime(unsigned long, DateTimeFields&)+0xe6>
    c842:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    c846:	ebae 0e02 	sub.w	lr, lr, r2
    c84a:	eb00 020e 	add.w	r2, r0, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    c84e:	4f22      	ldr	r7, [pc, #136]	; (c8d8 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    c850:	fb87 0703 	smull	r0, r7, r7, r3
    c854:	ea4f 1e67 	mov.w	lr, r7, asr #5
    c858:	2064      	movs	r0, #100	; 0x64
    c85a:	fb00 3e1e 	mls	lr, r0, lr, r3
    c85e:	11ff      	asrs	r7, r7, #7
    c860:	f44f 70c8 	mov.w	r0, #400	; 0x190
    c864:	fb00 3717 	mls	r7, r0, r7, r3
    c868:	2301      	movs	r3, #1
    c86a:	2000      	movs	r0, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    c86c:	f8df c06c 	ldr.w	ip, [pc, #108]	; c8dc <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
    c870:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
    c874:	f04f 091d 	mov.w	r9, #29
    c878:	e014      	b.n	c8a4 <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
    c87a:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    c87e:	e7e2      	b.n	c846 <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
    c880:	b94d      	cbnz	r5, c896 <breakTime(unsigned long, DateTimeFields&)+0x136>
    c882:	f1be 0f00 	cmp.w	lr, #0
    c886:	d11c      	bne.n	c8c2 <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
    c888:	2f00      	cmp	r7, #0
    c88a:	bf14      	ite	ne
    c88c:	241c      	movne	r4, #28
    c88e:	241d      	moveq	r4, #29
    c890:	e002      	b.n	c898 <breakTime(unsigned long, DateTimeFields&)+0x138>
    c892:	4633      	mov	r3, r6
    c894:	e010      	b.n	c8b8 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
    c896:	4644      	mov	r4, r8
    }

    if (time >= monthLength) {
    c898:	4294      	cmp	r4, r2
    c89a:	d814      	bhi.n	c8c6 <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
    c89c:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    c89e:	3001      	adds	r0, #1
    c8a0:	3301      	adds	r3, #1
    c8a2:	b2db      	uxtb	r3, r3
    c8a4:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
    c8a6:	2e01      	cmp	r6, #1
    c8a8:	d0ea      	beq.n	c880 <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
    c8aa:	f810 400c 	ldrb.w	r4, [r0, ip]
    c8ae:	4294      	cmp	r4, r2
    c8b0:	d8ef      	bhi.n	c892 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    c8b2:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    c8b4:	2b0b      	cmp	r3, #11
    c8b6:	d9f2      	bls.n	c89e <breakTime(unsigned long, DateTimeFields&)+0x13e>
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
    c8b8:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
    c8ba:	3201      	adds	r2, #1
    c8bc:	710a      	strb	r2, [r1, #4]
}
    c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
    c8c2:	464c      	mov	r4, r9
    c8c4:	e7e8      	b.n	c898 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
    c8c6:	4633      	mov	r3, r6
    c8c8:	e7f6      	b.n	c8b8 <breakTime(unsigned long, DateTimeFields&)+0x158>
    c8ca:	bf00      	nop
    c8cc:	88888889 	.word	0x88888889
    c8d0:	aaaaaaab 	.word	0xaaaaaaab
    c8d4:	24924925 	.word	0x24924925
    c8d8:	51eb851f 	.word	0x51eb851f
    c8dc:	20001f90 	.word	0x20001f90

0000c8e0 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    c8e0:	b510      	push	{r4, lr}
    c8e2:	4604      	mov	r4, r0
{
	free(buffer);
    c8e4:	6800      	ldr	r0, [r0, #0]
    c8e6:	f004 f8c9 	bl	10a7c <free>
}
    c8ea:	4620      	mov	r0, r4
    c8ec:	bd10      	pop	{r4, pc}

0000c8ee <String::changeBuffer(unsigned int)>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    c8ee:	b538      	push	{r3, r4, r5, lr}
    c8f0:	4604      	mov	r4, r0
    c8f2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    c8f4:	3101      	adds	r1, #1
    c8f6:	6800      	ldr	r0, [r0, #0]
    c8f8:	f005 f936 	bl	11b68 <realloc>
	if (newbuffer) {
    c8fc:	b118      	cbz	r0, c906 <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
    c8fe:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    c900:	6065      	str	r5, [r4, #4]
		return 1;
    c902:	2001      	movs	r0, #1
	}
	return 0;
}
    c904:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    c906:	2000      	movs	r0, #0
    c908:	e7fc      	b.n	c904 <String::changeBuffer(unsigned int)+0x16>

0000c90a <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
    c90a:	6843      	ldr	r3, [r0, #4]
    c90c:	428b      	cmp	r3, r1
    c90e:	d301      	bcc.n	c914 <String::reserve(unsigned int)+0xa>
    c910:	2001      	movs	r0, #1
}
    c912:	4770      	bx	lr
{
    c914:	b510      	push	{r4, lr}
    c916:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
    c918:	f7ff ffe9 	bl	c8ee <String::changeBuffer(unsigned int)>
    c91c:	b900      	cbnz	r0, c920 <String::reserve(unsigned int)+0x16>
}
    c91e:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
    c920:	68a3      	ldr	r3, [r4, #8]
    c922:	b923      	cbnz	r3, c92e <String::reserve(unsigned int)+0x24>
    c924:	6823      	ldr	r3, [r4, #0]
    c926:	2200      	movs	r2, #0
    c928:	701a      	strb	r2, [r3, #0]
		return 1;
    c92a:	2001      	movs	r0, #1
    c92c:	e7f7      	b.n	c91e <String::reserve(unsigned int)+0x14>
    c92e:	2001      	movs	r0, #1
    c930:	e7f5      	b.n	c91e <String::reserve(unsigned int)+0x14>

0000c932 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    c932:	b570      	push	{r4, r5, r6, lr}
    c934:	4604      	mov	r4, r0
	if (length == 0) {
    c936:	b932      	cbnz	r2, c946 <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
    c938:	6803      	ldr	r3, [r0, #0]
    c93a:	b103      	cbz	r3, c93e <String::copy(char const*, unsigned int)+0xc>
    c93c:	701a      	strb	r2, [r3, #0]
		len = 0;
    c93e:	2300      	movs	r3, #0
    c940:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    c942:	4620      	mov	r0, r4
    c944:	bd70      	pop	{r4, r5, r6, pc}
    c946:	460d      	mov	r5, r1
    c948:	4616      	mov	r6, r2
	if (!reserve(length)) {
    c94a:	4611      	mov	r1, r2
    c94c:	f7ff ffdd 	bl	c90a <String::reserve(unsigned int)>
    c950:	b948      	cbnz	r0, c966 <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
    c952:	6820      	ldr	r0, [r4, #0]
    c954:	b118      	cbz	r0, c95e <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    c956:	f004 f891 	bl	10a7c <free>
			buffer = NULL;
    c95a:	2300      	movs	r3, #0
    c95c:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
    c95e:	2300      	movs	r3, #0
    c960:	6063      	str	r3, [r4, #4]
    c962:	60a3      	str	r3, [r4, #8]
		return *this;
    c964:	e7ed      	b.n	c942 <String::copy(char const*, unsigned int)+0x10>
	len = length;
    c966:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    c968:	4629      	mov	r1, r5
    c96a:	6820      	ldr	r0, [r4, #0]
    c96c:	f004 fc9a 	bl	112a4 <strcpy>
	return *this;
    c970:	e7e7      	b.n	c942 <String::copy(char const*, unsigned int)+0x10>

0000c972 <String::String(char const*)>:
String::String(const char *cstr)
    c972:	b538      	push	{r3, r4, r5, lr}
    c974:	4604      	mov	r4, r0
	buffer = NULL;
    c976:	2300      	movs	r3, #0
    c978:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c97a:	6043      	str	r3, [r0, #4]
	len = 0;
    c97c:	6083      	str	r3, [r0, #8]
	flags = 0;
    c97e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    c980:	b141      	cbz	r1, c994 <String::String(char const*)+0x22>
    c982:	460d      	mov	r5, r1
    c984:	4608      	mov	r0, r1
    c986:	f005 fa1b 	bl	11dc0 <strlen>
    c98a:	4602      	mov	r2, r0
    c98c:	4629      	mov	r1, r5
    c98e:	4620      	mov	r0, r4
    c990:	f7ff ffcf 	bl	c932 <String::copy(char const*, unsigned int)>
}
    c994:	4620      	mov	r0, r4
    c996:	bd38      	pop	{r3, r4, r5, pc}

0000c998 <String::move(String&)>:

void String::move(String &rhs)
{
	if (&rhs == this) return;
    c998:	4281      	cmp	r1, r0
    c99a:	d011      	beq.n	c9c0 <String::move(String&)+0x28>
{
    c99c:	b538      	push	{r3, r4, r5, lr}
    c99e:	4605      	mov	r5, r0
    c9a0:	460c      	mov	r4, r1
	if (buffer) free(buffer);
    c9a2:	6800      	ldr	r0, [r0, #0]
    c9a4:	b108      	cbz	r0, c9aa <String::move(String&)+0x12>
    c9a6:	f004 f869 	bl	10a7c <free>
	buffer = rhs.buffer;
    c9aa:	6823      	ldr	r3, [r4, #0]
    c9ac:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    c9ae:	6863      	ldr	r3, [r4, #4]
    c9b0:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    c9b2:	68a3      	ldr	r3, [r4, #8]
    c9b4:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    c9b6:	2300      	movs	r3, #0
    c9b8:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    c9ba:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    c9bc:	60a3      	str	r3, [r4, #8]
}
    c9be:	bd38      	pop	{r3, r4, r5, pc}
    c9c0:	4770      	bx	lr

0000c9c2 <String::operator=(String const&)>:

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    c9c2:	4288      	cmp	r0, r1
    c9c4:	d005      	beq.n	c9d2 <String::operator=(String const&)+0x10>
{
    c9c6:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
    c9c8:	688a      	ldr	r2, [r1, #8]
    c9ca:	6809      	ldr	r1, [r1, #0]
    c9cc:	f7ff ffb1 	bl	c932 <String::copy(char const*, unsigned int)>
}
    c9d0:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
    c9d2:	4608      	mov	r0, r1
}
    c9d4:	4770      	bx	lr

0000c9d6 <String::String(String const&)>:
String::String(const String &value)
    c9d6:	b510      	push	{r4, lr}
    c9d8:	4604      	mov	r4, r0
	buffer = NULL;
    c9da:	2300      	movs	r3, #0
    c9dc:	6003      	str	r3, [r0, #0]
	capacity = 0;
    c9de:	6043      	str	r3, [r0, #4]
	len = 0;
    c9e0:	6083      	str	r3, [r0, #8]
	flags = 0;
    c9e2:	7303      	strb	r3, [r0, #12]
	*this = value;
    c9e4:	f7ff ffed 	bl	c9c2 <String::operator=(String const&)>
}
    c9e8:	4620      	mov	r0, r4
    c9ea:	bd10      	pop	{r4, pc}

0000c9ec <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    c9ec:	b510      	push	{r4, lr}
    c9ee:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    c9f0:	4288      	cmp	r0, r1
    c9f2:	d001      	beq.n	c9f8 <String::operator=(String&&)+0xc>
    c9f4:	f7ff ffd0 	bl	c998 <String::move(String&)>
	return *this;
}
    c9f8:	4620      	mov	r0, r4
    c9fa:	bd10      	pop	{r4, pc}

0000c9fc <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    c9fc:	b538      	push	{r3, r4, r5, lr}
    c9fe:	4604      	mov	r4, r0
	if (cstr) {
    ca00:	b151      	cbz	r1, ca18 <String::operator=(char const*)+0x1c>
    ca02:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
    ca04:	4608      	mov	r0, r1
    ca06:	f005 f9db 	bl	11dc0 <strlen>
    ca0a:	4602      	mov	r2, r0
    ca0c:	4629      	mov	r1, r5
    ca0e:	4620      	mov	r0, r4
    ca10:	f7ff ff8f 	bl	c932 <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    ca14:	4620      	mov	r0, r4
    ca16:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
    ca18:	2300      	movs	r3, #0
    ca1a:	6083      	str	r3, [r0, #8]
    ca1c:	e7fa      	b.n	ca14 <String::operator=(char const*)+0x18>

0000ca1e <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    ca1e:	b510      	push	{r4, lr}
    ca20:	b08a      	sub	sp, #40	; 0x28
    ca22:	4604      	mov	r4, r0
    ca24:	4608      	mov	r0, r1
	buffer = NULL;
    ca26:	2300      	movs	r3, #0
    ca28:	6023      	str	r3, [r4, #0]
	capacity = 0;
    ca2a:	6063      	str	r3, [r4, #4]
	len = 0;
    ca2c:	60a3      	str	r3, [r4, #8]
	flags = 0;
    ca2e:	7323      	strb	r3, [r4, #12]
	itoa(value, buf, base);
    ca30:	a901      	add	r1, sp, #4
    ca32:	f003 ffff 	bl	10a34 <itoa>
	*this = buf;
    ca36:	a901      	add	r1, sp, #4
    ca38:	4620      	mov	r0, r4
    ca3a:	f7ff ffdf 	bl	c9fc <String::operator=(char const*)>
}
    ca3e:	4620      	mov	r0, r4
    ca40:	b00a      	add	sp, #40	; 0x28
    ca42:	bd10      	pop	{r4, pc}

0000ca44 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    ca44:	b510      	push	{r4, lr}
    ca46:	b08a      	sub	sp, #40	; 0x28
    ca48:	4604      	mov	r4, r0
	buffer = NULL;
    ca4a:	2300      	movs	r3, #0
    ca4c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    ca4e:	6043      	str	r3, [r0, #4]
	len = 0;
    ca50:	6083      	str	r3, [r0, #8]
	flags = 0;
    ca52:	7303      	strb	r3, [r0, #12]
	*this = dtostrf(num, digits + 2, digits, buf);
    ca54:	466a      	mov	r2, sp
    ca56:	1c88      	adds	r0, r1, #2
    ca58:	f000 fb9e 	bl	d198 <dtostrf>
    ca5c:	4601      	mov	r1, r0
    ca5e:	4620      	mov	r0, r4
    ca60:	f7ff ffcc 	bl	c9fc <String::operator=(char const*)>
}
    ca64:	4620      	mov	r0, r4
    ca66:	b00a      	add	sp, #40	; 0x28
    ca68:	bd10      	pop	{r4, pc}

0000ca6a <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    ca6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca6e:	4604      	mov	r4, r0
    ca70:	460d      	mov	r5, r1
    ca72:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
    ca74:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    ca76:	6803      	ldr	r3, [r0, #0]
    ca78:	42ab      	cmp	r3, r5
    ca7a:	d806      	bhi.n	ca8a <String::append(char const*, unsigned int)+0x20>
    ca7c:	185a      	adds	r2, r3, r1
    ca7e:	4295      	cmp	r5, r2
    ca80:	d209      	bcs.n	ca96 <String::append(char const*, unsigned int)+0x2c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    ca82:	1aef      	subs	r7, r5, r3
		self = true;
    ca84:	f04f 0901 	mov.w	r9, #1
    ca88:	e001      	b.n	ca8e <String::append(char const*, unsigned int)+0x24>
	bool self = false;
    ca8a:	f04f 0900 	mov.w	r9, #0
	}
	if (length == 0 || !reserve(newlen)) return *this;
    ca8e:	b92e      	cbnz	r6, ca9c <String::append(char const*, unsigned int)+0x32>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    ca90:	4620      	mov	r0, r4
    ca92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    ca96:	f04f 0900 	mov.w	r9, #0
    ca9a:	e7f8      	b.n	ca8e <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
    ca9c:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
    caa0:	4641      	mov	r1, r8
    caa2:	4620      	mov	r0, r4
    caa4:	f7ff ff31 	bl	c90a <String::reserve(unsigned int)>
    caa8:	2800      	cmp	r0, #0
    caaa:	d0f1      	beq.n	ca90 <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
    caac:	f1b9 0f00 	cmp.w	r9, #0
    cab0:	d00d      	beq.n	cace <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
    cab2:	6823      	ldr	r3, [r4, #0]
    cab4:	68a0      	ldr	r0, [r4, #8]
    cab6:	4632      	mov	r2, r6
    cab8:	19d9      	adds	r1, r3, r7
    caba:	4418      	add	r0, r3
    cabc:	f000 fa98 	bl	cff0 <memcpy>
		buffer[newlen] = 0;
    cac0:	6823      	ldr	r3, [r4, #0]
    cac2:	2200      	movs	r2, #0
    cac4:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
    cac8:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
    cacc:	e7e0      	b.n	ca90 <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
    cace:	6820      	ldr	r0, [r4, #0]
    cad0:	68a3      	ldr	r3, [r4, #8]
    cad2:	4629      	mov	r1, r5
    cad4:	4418      	add	r0, r3
    cad6:	f004 fbe5 	bl	112a4 <strcpy>
    cada:	e7f5      	b.n	cac8 <String::append(char const*, unsigned int)+0x5e>

0000cadc <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    cadc:	b510      	push	{r4, lr}
    cade:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    cae0:	688a      	ldr	r2, [r1, #8]
    cae2:	6809      	ldr	r1, [r1, #0]
    cae4:	f7ff ffc1 	bl	ca6a <String::append(char const*, unsigned int)>
	return a;
}
    cae8:	4620      	mov	r0, r4
    caea:	bd10      	pop	{r4, pc}

0000caec <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    caec:	b538      	push	{r3, r4, r5, lr}
    caee:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    caf0:	b141      	cbz	r1, cb04 <operator+(StringSumHelper const&, char const*)+0x18>
    caf2:	460d      	mov	r5, r1
    caf4:	4608      	mov	r0, r1
    caf6:	f005 f963 	bl	11dc0 <strlen>
    cafa:	4602      	mov	r2, r0
    cafc:	4629      	mov	r1, r5
    cafe:	4620      	mov	r0, r4
    cb00:	f7ff ffb3 	bl	ca6a <String::append(char const*, unsigned int)>
	return a;
}
    cb04:	4620      	mov	r0, r4
    cb06:	bd38      	pop	{r3, r4, r5, pc}

0000cb08 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    cb08:	b1b2      	cbz	r2, cb38 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
    cb0a:	b538      	push	{r3, r4, r5, lr}
    cb0c:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    cb0e:	b124      	cbz	r4, cb1a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    cb10:	6885      	ldr	r5, [r0, #8]
    cb12:	429d      	cmp	r5, r3
    cb14:	d802      	bhi.n	cb1c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    cb16:	2300      	movs	r3, #0
    cb18:	7023      	strb	r3, [r4, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    cb1a:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    cb1c:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    cb1e:	1e51      	subs	r1, r2, #1
    cb20:	428d      	cmp	r5, r1
    cb22:	bf28      	it	cs
    cb24:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
    cb26:	6801      	ldr	r1, [r0, #0]
    cb28:	462a      	mov	r2, r5
    cb2a:	4419      	add	r1, r3
    cb2c:	4620      	mov	r0, r4
    cb2e:	f003 ff4f 	bl	109d0 <strncpy>
	buf[n] = 0;
    cb32:	2300      	movs	r3, #0
    cb34:	5563      	strb	r3, [r4, r5]
    cb36:	e7f0      	b.n	cb1a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
    cb38:	4770      	bx	lr
	...

0000cb3c <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    cb3c:	282a      	cmp	r0, #42	; 0x2a
    cb3e:	d83e      	bhi.n	cbbe <analogRead+0x82>
{
    cb40:	b570      	push	{r4, r5, r6, lr}
    cb42:	4604      	mov	r4, r0
	if (calibrating) wait_for_cal();
    cb44:	4b20      	ldr	r3, [pc, #128]	; (cbc8 <analogRead+0x8c>)
    cb46:	781b      	ldrb	r3, [r3, #0]
    cb48:	b9b3      	cbnz	r3, cb78 <analogRead+0x3c>
	uint8_t ch = pin_to_channel[pin];
    cb4a:	4b20      	ldr	r3, [pc, #128]	; (cbcc <analogRead+0x90>)
    cb4c:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    cb4e:	2bff      	cmp	r3, #255	; 0xff
    cb50:	d037      	beq.n	cbc2 <analogRead+0x86>
	if(!(ch & 0x80)) {
    cb52:	f013 0f80 	tst.w	r3, #128	; 0x80
    cb56:	d120      	bne.n	cb9a <analogRead+0x5e>
		ADC1_HC0 = ch;
    cb58:	4a1d      	ldr	r2, [pc, #116]	; (cbd0 <analogRead+0x94>)
    cb5a:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    cb5c:	6a13      	ldr	r3, [r2, #32]
    cb5e:	f013 0f01 	tst.w	r3, #1
    cb62:	d106      	bne.n	cb72 <analogRead+0x36>
    cb64:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    cb66:	f002 f8a3 	bl	ecb0 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    cb6a:	6a23      	ldr	r3, [r4, #32]
    cb6c:	f013 0f01 	tst.w	r3, #1
    cb70:	d0f9      	beq.n	cb66 <analogRead+0x2a>
		return ADC1_R0;
    cb72:	4b17      	ldr	r3, [pc, #92]	; (cbd0 <analogRead+0x94>)
    cb74:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    cb76:	bd70      	pop	{r4, r5, r6, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    cb78:	4d15      	ldr	r5, [pc, #84]	; (cbd0 <analogRead+0x94>)
    cb7a:	4e16      	ldr	r6, [pc, #88]	; (cbd4 <analogRead+0x98>)
    cb7c:	e001      	b.n	cb82 <analogRead+0x46>
		yield();
    cb7e:	f002 f897 	bl	ecb0 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    cb82:	6cab      	ldr	r3, [r5, #72]	; 0x48
    cb84:	f013 0f80 	tst.w	r3, #128	; 0x80
    cb88:	d1f9      	bne.n	cb7e <analogRead+0x42>
    cb8a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    cb8c:	f013 0f80 	tst.w	r3, #128	; 0x80
    cb90:	d1f5      	bne.n	cb7e <analogRead+0x42>
	calibrating = 0;
    cb92:	4b0d      	ldr	r3, [pc, #52]	; (cbc8 <analogRead+0x8c>)
    cb94:	2200      	movs	r2, #0
    cb96:	701a      	strb	r2, [r3, #0]
}
    cb98:	e7d7      	b.n	cb4a <analogRead+0xe>
		ADC2_HC0 = ch & 0x7f;
    cb9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cb9e:	4a0d      	ldr	r2, [pc, #52]	; (cbd4 <analogRead+0x98>)
    cba0:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cba2:	6a13      	ldr	r3, [r2, #32]
    cba4:	f013 0f01 	tst.w	r3, #1
    cba8:	d106      	bne.n	cbb8 <analogRead+0x7c>
    cbaa:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    cbac:	f002 f880 	bl	ecb0 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cbb0:	6a23      	ldr	r3, [r4, #32]
    cbb2:	f013 0f01 	tst.w	r3, #1
    cbb6:	d0f9      	beq.n	cbac <analogRead+0x70>
		return ADC2_R0;
    cbb8:	4b06      	ldr	r3, [pc, #24]	; (cbd4 <analogRead+0x98>)
    cbba:	6a58      	ldr	r0, [r3, #36]	; 0x24
    cbbc:	e7db      	b.n	cb76 <analogRead+0x3a>
	if (pin > sizeof(pin_to_channel)) return 0;
    cbbe:	2000      	movs	r0, #0
}
    cbc0:	4770      	bx	lr
	if (ch == 255) return 0;
    cbc2:	2000      	movs	r0, #0
    cbc4:	e7d7      	b.n	cb76 <analogRead+0x3a>
    cbc6:	bf00      	nop
    cbc8:	20005331 	.word	0x20005331
    cbcc:	20002b18 	.word	0x20002b18
    cbd0:	400c4000 	.word	0x400c4000
    cbd4:	400c8000 	.word	0x400c8000

0000cbd8 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    cbd8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    cbda:	4b8e      	ldr	r3, [pc, #568]	; (ce14 <set_arm_clock+0x23c>)
    cbdc:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    cbde:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    cbe0:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
    cbe4:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    cbe6:	4b8c      	ldr	r3, [pc, #560]	; (ce18 <set_arm_clock+0x240>)
    cbe8:	4298      	cmp	r0, r3
    cbea:	d915      	bls.n	cc18 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    cbec:	4b8b      	ldr	r3, [pc, #556]	; (ce1c <set_arm_clock+0x244>)
    cbee:	4298      	cmp	r0, r3
    cbf0:	d96d      	bls.n	ccce <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    cbf2:	4b8b      	ldr	r3, [pc, #556]	; (ce20 <set_arm_clock+0x248>)
    cbf4:	4403      	add	r3, r0
    cbf6:	0a1b      	lsrs	r3, r3, #8
    cbf8:	498a      	ldr	r1, [pc, #552]	; (ce24 <set_arm_clock+0x24c>)
    cbfa:	fba1 1303 	umull	r1, r3, r1, r3
    cbfe:	09db      	lsrs	r3, r3, #7
    cc00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cc04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cc08:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
    cc0c:	f240 6127 	movw	r1, #1575	; 0x627
    cc10:	428b      	cmp	r3, r1
    cc12:	bf28      	it	cs
    cc14:	460b      	movcs	r3, r1
    cc16:	e007      	b.n	cc28 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    cc18:	4e83      	ldr	r6, [pc, #524]	; (ce28 <set_arm_clock+0x250>)
    cc1a:	f240 437e 	movw	r3, #1150	; 0x47e
    cc1e:	f240 31b6 	movw	r1, #950	; 0x3b6
    cc22:	42b0      	cmp	r0, r6
    cc24:	bf98      	it	ls
    cc26:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cc28:	4e7a      	ldr	r6, [pc, #488]	; (ce14 <set_arm_clock+0x23c>)
    cc2a:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    cc2e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    cc32:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cc36:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    cc3a:	497c      	ldr	r1, [pc, #496]	; (ce2c <set_arm_clock+0x254>)
    cc3c:	fba1 1303 	umull	r1, r3, r1, r3
    cc40:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    cc44:	f004 011f 	and.w	r1, r4, #31
    cc48:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    cc4c:	d209      	bcs.n	cc62 <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cc4e:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cc52:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cc56:	4b76      	ldr	r3, [pc, #472]	; (ce30 <set_arm_clock+0x258>)
    cc58:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cc5a:	4619      	mov	r1, r3
    cc5c:	680b      	ldr	r3, [r1, #0]
    cc5e:	2b00      	cmp	r3, #0
    cc60:	dafc      	bge.n	cc5c <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    cc62:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
    cc66:	d12a      	bne.n	ccbe <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    cc68:	4972      	ldr	r1, [pc, #456]	; (ce34 <set_arm_clock+0x25c>)
    cc6a:	690e      	ldr	r6, [r1, #16]
    cc6c:	4972      	ldr	r1, [pc, #456]	; (ce38 <set_arm_clock+0x260>)
    cc6e:	43b1      	bics	r1, r6
    cc70:	d030      	beq.n	ccd4 <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    cc72:	4619      	mov	r1, r3
			sel = 1;
    cc74:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cc76:	06ce      	lsls	r6, r1, #27
    cc78:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
    cc7c:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
    cc80:	d004      	beq.n	cc8c <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    cc82:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    cc86:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
    cc88:	4962      	ldr	r1, [pc, #392]	; (ce14 <set_arm_clock+0x23c>)
    cc8a:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cc8c:	0319      	lsls	r1, r3, #12
    cc8e:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
    cc92:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    cc96:	d009      	beq.n	ccac <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    cc98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    cc9c:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
    cc9e:	4b5d      	ldr	r3, [pc, #372]	; (ce14 <set_arm_clock+0x23c>)
    cca0:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    cca2:	461a      	mov	r2, r3
    cca4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cca6:	f013 0f08 	tst.w	r3, #8
    ccaa:	d1fb      	bne.n	cca4 <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ccac:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ccb0:	4b58      	ldr	r3, [pc, #352]	; (ce14 <set_arm_clock+0x23c>)
    ccb2:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ccb4:	461a      	mov	r2, r3
    ccb6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    ccb8:	f013 0f20 	tst.w	r3, #32
    ccbc:	d1fb      	bne.n	ccb6 <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    ccbe:	4b5f      	ldr	r3, [pc, #380]	; (ce3c <set_arm_clock+0x264>)
    ccc0:	4298      	cmp	r0, r3
    ccc2:	d817      	bhi.n	ccf4 <set_arm_clock+0x11c>
    ccc4:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    ccc6:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    ccc8:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
    ccca:	4e5c      	ldr	r6, [pc, #368]	; (ce3c <set_arm_clock+0x264>)
    cccc:	e00e      	b.n	ccec <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
    ccce:	f240 43e2 	movw	r3, #1250	; 0x4e2
    ccd2:	e7a9      	b.n	cc28 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
    ccd4:	2103      	movs	r1, #3
    ccd6:	e7ce      	b.n	cc76 <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    ccd8:	2904      	cmp	r1, #4
    ccda:	d80e      	bhi.n	ccfa <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
    ccdc:	3101      	adds	r1, #1
				div_arm = 1;
    ccde:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cce0:	fb01 f302 	mul.w	r3, r1, r2
    cce4:	fb00 f303 	mul.w	r3, r0, r3
    cce8:	42b3      	cmp	r3, r6
    ccea:	d806      	bhi.n	ccfa <set_arm_clock+0x122>
		if (div_arm < 8) {
    ccec:	2a07      	cmp	r2, #7
    ccee:	d8f3      	bhi.n	ccd8 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    ccf0:	3201      	adds	r2, #1
    ccf2:	e7f5      	b.n	cce0 <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
    ccf4:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    ccf6:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    ccf8:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ccfa:	4851      	ldr	r0, [pc, #324]	; (ce40 <set_arm_clock+0x268>)
    ccfc:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
    ccfe:	4b51      	ldr	r3, [pc, #324]	; (ce44 <set_arm_clock+0x26c>)
    cd00:	4298      	cmp	r0, r3
    cd02:	f200 8083 	bhi.w	ce0c <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cd06:	4b50      	ldr	r3, [pc, #320]	; (ce48 <set_arm_clock+0x270>)
    cd08:	fba3 0300 	umull	r0, r3, r3, r0
    cd0c:	0d1b      	lsrs	r3, r3, #20
    cd0e:	2b36      	cmp	r3, #54	; 0x36
    cd10:	bf38      	it	cc
    cd12:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    cd14:	484d      	ldr	r0, [pc, #308]	; (ce4c <set_arm_clock+0x274>)
    cd16:	fb03 f000 	mul.w	r0, r3, r0
    cd1a:	fbb0 f0f2 	udiv	r0, r0, r2
    cd1e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cd22:	4e44      	ldr	r6, [pc, #272]	; (ce34 <set_arm_clock+0x25c>)
    cd24:	6836      	ldr	r6, [r6, #0]
    cd26:	4f4a      	ldr	r7, [pc, #296]	; (ce50 <set_arm_clock+0x278>)
    cd28:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    cd2a:	4e4a      	ldr	r6, [pc, #296]	; (ce54 <set_arm_clock+0x27c>)
    cd2c:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cd2e:	42b7      	cmp	r7, r6
    cd30:	d009      	beq.n	cd46 <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    cd32:	4e40      	ldr	r6, [pc, #256]	; (ce34 <set_arm_clock+0x25c>)
    cd34:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    cd38:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    cd3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    cd3e:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    cd40:	6833      	ldr	r3, [r6, #0]
    cd42:	2b00      	cmp	r3, #0
    cd44:	dafc      	bge.n	cd40 <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    cd46:	4b33      	ldr	r3, [pc, #204]	; (ce14 <set_arm_clock+0x23c>)
    cd48:	691b      	ldr	r3, [r3, #16]
    cd4a:	3a01      	subs	r2, #1
    cd4c:	f003 0307 	and.w	r3, r3, #7
    cd50:	4293      	cmp	r3, r2
    cd52:	d008      	beq.n	cd66 <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    cd54:	f002 0207 	and.w	r2, r2, #7
    cd58:	4b2e      	ldr	r3, [pc, #184]	; (ce14 <set_arm_clock+0x23c>)
    cd5a:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    cd5c:	461a      	mov	r2, r3
    cd5e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cd60:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    cd64:	d1fb      	bne.n	cd5e <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cd66:	3901      	subs	r1, #1
    cd68:	028b      	lsls	r3, r1, #10
    cd6a:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
    cd6e:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    cd72:	d00b      	beq.n	cd8c <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    cd74:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    cd78:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
    cd7c:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
    cd7e:	4b25      	ldr	r3, [pc, #148]	; (ce14 <set_arm_clock+0x23c>)
    cd80:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    cd82:	461a      	mov	r2, r3
    cd84:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cd86:	f013 0f02 	tst.w	r3, #2
    cd8a:	d1fb      	bne.n	cd84 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    cd8c:	4932      	ldr	r1, [pc, #200]	; (ce58 <set_arm_clock+0x280>)
    cd8e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    cd90:	4a32      	ldr	r2, [pc, #200]	; (ce5c <set_arm_clock+0x284>)
    cd92:	4291      	cmp	r1, r2
    cd94:	d83c      	bhi.n	ce10 <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    cd96:	09c9      	lsrs	r1, r1, #7
    cd98:	4b31      	ldr	r3, [pc, #196]	; (ce60 <set_arm_clock+0x288>)
    cd9a:	fba3 3101 	umull	r3, r1, r3, r1
    cd9e:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    cda0:	1e4b      	subs	r3, r1, #1
    cda2:	021a      	lsls	r2, r3, #8
    cda4:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    cda8:	f413 7f40 	tst.w	r3, #768	; 0x300
    cdac:	d006      	beq.n	cdbc <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    cdae:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    cdb2:	f402 7240 	and.w	r2, r2, #768	; 0x300
    cdb6:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    cdb8:	4b16      	ldr	r3, [pc, #88]	; (ce14 <set_arm_clock+0x23c>)
    cdba:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    cdbc:	4a15      	ldr	r2, [pc, #84]	; (ce14 <set_arm_clock+0x23c>)
    cdbe:	6953      	ldr	r3, [r2, #20]
    cdc0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    cdc4:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cdc6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cdc8:	f013 0f20 	tst.w	r3, #32
    cdcc:	d1fb      	bne.n	cdc6 <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
    cdce:	4b25      	ldr	r3, [pc, #148]	; (ce64 <set_arm_clock+0x28c>)
    cdd0:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    cdd2:	fbb0 f1f1 	udiv	r1, r0, r1
    cdd6:	4b24      	ldr	r3, [pc, #144]	; (ce68 <set_arm_clock+0x290>)
    cdd8:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    cdda:	4b24      	ldr	r3, [pc, #144]	; (ce6c <set_arm_clock+0x294>)
    cddc:	fba3 2300 	umull	r2, r3, r3, r0
    cde0:	0c9b      	lsrs	r3, r3, #18
    cde2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cde6:	fbb2 f3f3 	udiv	r3, r2, r3
    cdea:	4a21      	ldr	r2, [pc, #132]	; (ce70 <set_arm_clock+0x298>)
    cdec:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    cdee:	f004 031f 	and.w	r3, r4, #31
    cdf2:	459c      	cmp	ip, r3
    cdf4:	d208      	bcs.n	ce08 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cdf6:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cdfa:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cdfe:	4a0c      	ldr	r2, [pc, #48]	; (ce30 <set_arm_clock+0x258>)
    ce00:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ce02:	6813      	ldr	r3, [r2, #0]
    ce04:	2b00      	cmp	r3, #0
    ce06:	dafc      	bge.n	ce02 <set_arm_clock+0x22a>
	}

	return frequency;
}
    ce08:	bcf0      	pop	{r4, r5, r6, r7}
    ce0a:	4770      	bx	lr
	if (mult > 108) mult = 108;
    ce0c:	236c      	movs	r3, #108	; 0x6c
    ce0e:	e781      	b.n	cd14 <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
    ce10:	2104      	movs	r1, #4
    ce12:	e7c5      	b.n	cda0 <set_arm_clock+0x1c8>
    ce14:	400fc000 	.word	0x400fc000
    ce18:	1f78a400 	.word	0x1f78a400
    ce1c:	23c34600 	.word	0x23c34600
    ce20:	dc3cba00 	.word	0xdc3cba00
    ce24:	004cb223 	.word	0x004cb223
    ce28:	016e3600 	.word	0x016e3600
    ce2c:	51eb851f 	.word	0x51eb851f
    ce30:	40080000 	.word	0x40080000
    ce34:	400d8000 	.word	0x400d8000
    ce38:	80003040 	.word	0x80003040
    ce3c:	269fb1ff 	.word	0x269fb1ff
    ce40:	005b8d80 	.word	0x005b8d80
    ce44:	4df67eff 	.word	0x4df67eff
    ce48:	165e9f81 	.word	0x165e9f81
    ce4c:	00b71b00 	.word	0x00b71b00
    ce50:	8001307f 	.word	0x8001307f
    ce54:	80002000 	.word	0x80002000
    ce58:	08f0d17f 	.word	0x08f0d17f
    ce5c:	2cb4177f 	.word	0x2cb4177f
    ce60:	00e5109f 	.word	0x00e5109f
    ce64:	20003144 	.word	0x20003144
    ce68:	20003140 	.word	0x20003140
    ce6c:	431bde83 	.word	0x431bde83
    ce70:	200052bc 	.word	0x200052bc

0000ce74 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    ce74:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ce76:	4b0f      	ldr	r3, [pc, #60]	; (ceb4 <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    ce78:	4d0f      	ldr	r5, [pc, #60]	; (ceb8 <micros+0x44>)
		scc = systick_cycle_count;
    ce7a:	4c10      	ldr	r4, [pc, #64]	; (cebc <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ce7c:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ce80:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    ce84:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    ce86:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ce88:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    ce8c:	2a00      	cmp	r2, #0
    ce8e:	d1f7      	bne.n	ce80 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ce90:	4b0b      	ldr	r3, [pc, #44]	; (cec0 <micros+0x4c>)
    ce92:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ce94:	4a0b      	ldr	r2, [pc, #44]	; (cec4 <micros+0x50>)
    ce96:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
    ce98:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ce9a:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    ce9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    cea2:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
    cea6:	429a      	cmp	r2, r3
    cea8:	bf94      	ite	ls
    ceaa:	1880      	addls	r0, r0, r2
    ceac:	18c0      	addhi	r0, r0, r3
    ceae:	bc30      	pop	{r4, r5}
    ceb0:	4770      	bx	lr
    ceb2:	bf00      	nop
    ceb4:	200052f4 	.word	0x200052f4
    ceb8:	200052f0 	.word	0x200052f0
    cebc:	200052ec 	.word	0x200052ec
    cec0:	e0001000 	.word	0xe0001000
    cec4:	200052bc 	.word	0x200052bc

0000cec8 <delay>:
	if (msec == 0) return;
    cec8:	b900      	cbnz	r0, cecc <delay+0x4>
    ceca:	4770      	bx	lr
{
    cecc:	b538      	push	{r3, r4, r5, lr}
    cece:	4605      	mov	r5, r0
	start = micros();
    ced0:	f7ff ffd0 	bl	ce74 <micros>
    ced4:	4604      	mov	r4, r0
    ced6:	e001      	b.n	cedc <delay+0x14>
		yield();
    ced8:	f001 feea 	bl	ecb0 <yield>
		while ((micros() - start) >= 1000) {
    cedc:	f7ff ffca 	bl	ce74 <micros>
    cee0:	1b00      	subs	r0, r0, r4
    cee2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    cee6:	d3f7      	bcc.n	ced8 <delay+0x10>
			if (--msec == 0) return;
    cee8:	3d01      	subs	r5, #1
    ceea:	d002      	beq.n	cef2 <delay+0x2a>
			start += 1000;
    ceec:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    cef0:	e7f4      	b.n	cedc <delay+0x14>
}
    cef2:	bd38      	pop	{r3, r4, r5, pc}

0000cef4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    cef4:	2836      	cmp	r0, #54	; 0x36
    cef6:	d81b      	bhi.n	cf30 <digitalWrite+0x3c>
{
    cef8:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    cefa:	4b0e      	ldr	r3, [pc, #56]	; (cf34 <digitalWrite+0x40>)
    cefc:	0102      	lsls	r2, r0, #4
    cefe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    cf02:	589b      	ldr	r3, [r3, r2]
    cf04:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
    cf06:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
    cf08:	4214      	tst	r4, r2
    cf0a:	d008      	beq.n	cf1e <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
    cf0c:	b121      	cbz	r1, cf18 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
    cf0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    cf12:	f85d 4b04 	ldr.w	r4, [sp], #4
    cf16:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
    cf18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    cf1c:	e7f9      	b.n	cf12 <digitalWrite+0x1e>
		if (val) {
    cf1e:	b119      	cbz	r1, cf28 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cf20:	6883      	ldr	r3, [r0, #8]
    cf22:	4a05      	ldr	r2, [pc, #20]	; (cf38 <digitalWrite+0x44>)
    cf24:	601a      	str	r2, [r3, #0]
    cf26:	e7f4      	b.n	cf12 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    cf28:	6883      	ldr	r3, [r0, #8]
    cf2a:	4a04      	ldr	r2, [pc, #16]	; (cf3c <digitalWrite+0x48>)
    cf2c:	601a      	str	r2, [r3, #0]
    cf2e:	e7f0      	b.n	cf12 <digitalWrite+0x1e>
    cf30:	4770      	bx	lr
    cf32:	bf00      	nop
    cf34:	200026e8 	.word	0x200026e8
    cf38:	0001f038 	.word	0x0001f038
    cf3c:	00013038 	.word	0x00013038

0000cf40 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    cf40:	2836      	cmp	r0, #54	; 0x36
    cf42:	d80b      	bhi.n	cf5c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    cf44:	4b06      	ldr	r3, [pc, #24]	; (cf60 <digitalRead+0x20>)
    cf46:	0102      	lsls	r2, r0, #4
    cf48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    cf4c:	589b      	ldr	r3, [r3, r2]
    cf4e:	689a      	ldr	r2, [r3, #8]
    cf50:	68c3      	ldr	r3, [r0, #12]
    cf52:	421a      	tst	r2, r3
    cf54:	bf14      	ite	ne
    cf56:	2001      	movne	r0, #1
    cf58:	2000      	moveq	r0, #0
    cf5a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    cf5c:	2000      	movs	r0, #0
}
    cf5e:	4770      	bx	lr
    cf60:	200026e8 	.word	0x200026e8

0000cf64 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    cf64:	2836      	cmp	r0, #54	; 0x36
    cf66:	d832      	bhi.n	cfce <pinMode+0x6a>
{
    cf68:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    cf6a:	4b19      	ldr	r3, [pc, #100]	; (cfd0 <pinMode+0x6c>)
    cf6c:	0102      	lsls	r2, r0, #4
    cf6e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    cf72:	2901      	cmp	r1, #1
    cf74:	d00c      	beq.n	cf90 <pinMode+0x2c>
    cf76:	2904      	cmp	r1, #4
    cf78:	d00a      	beq.n	cf90 <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    cf7a:	589a      	ldr	r2, [r3, r2]
    cf7c:	6853      	ldr	r3, [r2, #4]
    cf7e:	68c4      	ldr	r4, [r0, #12]
    cf80:	ea23 0304 	bic.w	r3, r3, r4
    cf84:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
    cf86:	b9a9      	cbnz	r1, cfb4 <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    cf88:	6883      	ldr	r3, [r0, #8]
    cf8a:	2238      	movs	r2, #56	; 0x38
    cf8c:	601a      	str	r2, [r3, #0]
    cf8e:	e00b      	b.n	cfa8 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    cf90:	589a      	ldr	r2, [r3, r2]
    cf92:	6853      	ldr	r3, [r2, #4]
    cf94:	68c4      	ldr	r4, [r0, #12]
    cf96:	4323      	orrs	r3, r4
    cf98:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
    cf9a:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
    cf9c:	6883      	ldr	r3, [r0, #8]
    cf9e:	bf0c      	ite	eq
    cfa0:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    cfa2:	f640 0238 	movwne	r2, #2104	; 0x838
    cfa6:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    cfa8:	6843      	ldr	r3, [r0, #4]
    cfaa:	2215      	movs	r2, #21
    cfac:	601a      	str	r2, [r3, #0]
}
    cfae:	f85d 4b04 	ldr.w	r4, [sp], #4
    cfb2:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    cfb4:	2902      	cmp	r1, #2
    cfb6:	d006      	beq.n	cfc6 <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
    cfb8:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    cfba:	6883      	ldr	r3, [r0, #8]
    cfbc:	bf0c      	ite	eq
    cfbe:	4a05      	ldreq	r2, [pc, #20]	; (cfd4 <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    cfc0:	4a05      	ldrne	r2, [pc, #20]	; (cfd8 <pinMode+0x74>)
    cfc2:	601a      	str	r2, [r3, #0]
    cfc4:	e7f0      	b.n	cfa8 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    cfc6:	6883      	ldr	r3, [r0, #8]
    cfc8:	4a04      	ldr	r2, [pc, #16]	; (cfdc <pinMode+0x78>)
    cfca:	601a      	str	r2, [r3, #0]
    cfcc:	e7ec      	b.n	cfa8 <pinMode+0x44>
    cfce:	4770      	bx	lr
    cfd0:	200026e8 	.word	0x200026e8
    cfd4:	00013038 	.word	0x00013038
    cfd8:	00010038 	.word	0x00010038
    cfdc:	0001f038 	.word	0x0001f038

0000cfe0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    cfe0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    cfe2:	f7f5 fec5 	bl	2d70 <setup>
	while (1) {
		loop();
    cfe6:	f7f5 fcd7 	bl	2998 <loop>
		yield();
    cfea:	f001 fe61 	bl	ecb0 <yield>
	while (1) {
    cfee:	e7fa      	b.n	cfe6 <main+0x6>

0000cff0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    cff0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    cff2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    cff6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    cffa:	d16d      	bne.n	d0d8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cffc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    cffe:	d341      	bcc.n	d084 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d000:	f851 3b04 	ldr.w	r3, [r1], #4
    d004:	f840 3b04 	str.w	r3, [r0], #4
    d008:	f851 3b04 	ldr.w	r3, [r1], #4
    d00c:	f840 3b04 	str.w	r3, [r0], #4
    d010:	f851 3b04 	ldr.w	r3, [r1], #4
    d014:	f840 3b04 	str.w	r3, [r0], #4
    d018:	f851 3b04 	ldr.w	r3, [r1], #4
    d01c:	f840 3b04 	str.w	r3, [r0], #4
    d020:	f851 3b04 	ldr.w	r3, [r1], #4
    d024:	f840 3b04 	str.w	r3, [r0], #4
    d028:	f851 3b04 	ldr.w	r3, [r1], #4
    d02c:	f840 3b04 	str.w	r3, [r0], #4
    d030:	f851 3b04 	ldr.w	r3, [r1], #4
    d034:	f840 3b04 	str.w	r3, [r0], #4
    d038:	f851 3b04 	ldr.w	r3, [r1], #4
    d03c:	f840 3b04 	str.w	r3, [r0], #4
    d040:	f851 3b04 	ldr.w	r3, [r1], #4
    d044:	f840 3b04 	str.w	r3, [r0], #4
    d048:	f851 3b04 	ldr.w	r3, [r1], #4
    d04c:	f840 3b04 	str.w	r3, [r0], #4
    d050:	f851 3b04 	ldr.w	r3, [r1], #4
    d054:	f840 3b04 	str.w	r3, [r0], #4
    d058:	f851 3b04 	ldr.w	r3, [r1], #4
    d05c:	f840 3b04 	str.w	r3, [r0], #4
    d060:	f851 3b04 	ldr.w	r3, [r1], #4
    d064:	f840 3b04 	str.w	r3, [r0], #4
    d068:	f851 3b04 	ldr.w	r3, [r1], #4
    d06c:	f840 3b04 	str.w	r3, [r0], #4
    d070:	f851 3b04 	ldr.w	r3, [r1], #4
    d074:	f840 3b04 	str.w	r3, [r0], #4
    d078:	f851 3b04 	ldr.w	r3, [r1], #4
    d07c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d080:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d082:	d2bd      	bcs.n	d000 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d084:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d086:	d311      	bcc.n	d0ac <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d088:	f851 3b04 	ldr.w	r3, [r1], #4
    d08c:	f840 3b04 	str.w	r3, [r0], #4
    d090:	f851 3b04 	ldr.w	r3, [r1], #4
    d094:	f840 3b04 	str.w	r3, [r0], #4
    d098:	f851 3b04 	ldr.w	r3, [r1], #4
    d09c:	f840 3b04 	str.w	r3, [r0], #4
    d0a0:	f851 3b04 	ldr.w	r3, [r1], #4
    d0a4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d0a8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d0aa:	d2ed      	bcs.n	d088 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d0ac:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d0ae:	d305      	bcc.n	d0bc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d0b0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d0b4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d0b8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d0ba:	d2f9      	bcs.n	d0b0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d0bc:	3204      	adds	r2, #4
	beq	.Ldone
    d0be:	d008      	beq.n	d0d2 <memcpy+0xe2>

	lsls	r2, r2, #31
    d0c0:	07d2      	lsls	r2, r2, #31
	itt ne
    d0c2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d0c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d0c8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d0cc:	d301      	bcc.n	d0d2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d0ce:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d0d0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d0d2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d0d4:	4770      	bx	lr
    d0d6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d0d8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d0da:	d313      	bcc.n	d104 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d0dc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d0de:	d08d      	beq.n	cffc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d0e0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d0e4:	d08a      	beq.n	cffc <memcpy+0xc>

	rsb	r3, #4
    d0e6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d0ea:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d0ec:	07db      	lsls	r3, r3, #31
	itt ne
    d0ee:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d0f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d0f4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d0f8:	d380      	bcc.n	cffc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d0fa:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d0fe:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d102:	e77b      	b.n	cffc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d104:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d106:	d3d9      	bcc.n	d0bc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d108:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d10a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d10e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d112:	d2f9      	bcs.n	d108 <memcpy+0x118>

	ldrb	r3, [r1]
    d114:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d116:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d118:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d11a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d11c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d11e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d120:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d122:	4770      	bx	lr

0000d124 <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
    d124:	b508      	push	{r3, lr}
	return malloc(size);
    d126:	f003 fca1 	bl	10a6c <malloc>
}
    d12a:	bd08      	pop	{r3, pc}

0000d12c <operator delete(void*, unsigned int)>:
{
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
    d12c:	b508      	push	{r3, lr}
	free(ptr);
    d12e:	f003 fca5 	bl	10a7c <free>
}
    d132:	bd08      	pop	{r3, pc}

0000d134 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d134:	b530      	push	{r4, r5, lr}
    d136:	4684      	mov	ip, r0
    d138:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
    d13a:	3901      	subs	r1, #1
{
    d13c:	460d      	mov	r5, r1
	int i=0, j;
    d13e:	f04f 0e00 	mov.w	lr, #0
    d142:	e002      	b.n	d14a <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d144:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
    d148:	469c      	mov	ip, r3
		digit = val % radix;
    d14a:	fbbc f3f2 	udiv	r3, ip, r2
    d14e:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d152:	2b09      	cmp	r3, #9
    d154:	bf94      	ite	ls
    d156:	3330      	addls	r3, #48	; 0x30
    d158:	3337      	addhi	r3, #55	; 0x37
    d15a:	b2db      	uxtb	r3, r3
    d15c:	4674      	mov	r4, lr
    d15e:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
    d162:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
    d166:	4562      	cmp	r2, ip
    d168:	d9ec      	bls.n	d144 <ultoa+0x10>
	}
	buf[i + 1] = 0;
    d16a:	1c63      	adds	r3, r4, #1
    d16c:	eb00 0c03 	add.w	ip, r0, r3
    d170:	2200      	movs	r2, #0
    d172:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
    d174:	4596      	cmp	lr, r2
    d176:	dd0e      	ble.n	d196 <ultoa+0x62>
		t = buf[j];
    d178:	460a      	mov	r2, r1
    d17a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
    d17e:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    d182:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
    d184:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
    d188:	3202      	adds	r2, #2
    d18a:	1a12      	subs	r2, r2, r0
    d18c:	1a43      	subs	r3, r0, r1
    d18e:	3b01      	subs	r3, #1
    d190:	4423      	add	r3, r4
    d192:	429a      	cmp	r2, r3
    d194:	dbf0      	blt.n	d178 <ultoa+0x44>
	}
	return buf;
}
    d196:	bd30      	pop	{r4, r5, pc}

0000d198 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d19c:	ed2d 8b02 	vpush	{d8}
    d1a0:	b084      	sub	sp, #16
    d1a2:	eeb0 8a40 	vmov.f32	s16, s0
    d1a6:	4605      	mov	r5, r0
    d1a8:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d1aa:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    d1ae:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
    d1b2:	eeb4 0a40 	vcmp.f32	s0, s0
    d1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1ba:	d62c      	bvs.n	d216 <dtostrf+0x7e>
    d1bc:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d1be:	eef0 7ac0 	vabs.f32	s15, s0
    d1c2:	ed9f 7ab0 	vldr	s14, [pc, #704]	; d484 <dtostrf+0x2ec>
    d1c6:	eef4 7a47 	vcmp.f32	s15, s14
    d1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1ce:	dd52      	ble.n	d276 <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
    d1d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1d8:	bf4c      	ite	mi
    d1da:	2304      	movmi	r3, #4
    d1dc:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d1de:	4293      	cmp	r3, r2
    d1e0:	f280 817c 	bge.w	d4dc <dtostrf+0x344>
    d1e4:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d1e6:	2800      	cmp	r0, #0
    d1e8:	f280 817b 	bge.w	d4e2 <dtostrf+0x34a>
			while (awidth) {
    d1ec:	2a00      	cmp	r2, #0
    d1ee:	f000 813b 	beq.w	d468 <dtostrf+0x2d0>
    d1f2:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d1f4:	2220      	movs	r2, #32
    d1f6:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d1fa:	42a3      	cmp	r3, r4
    d1fc:	d1fb      	bne.n	d1f6 <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d1fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d206:	f140 8127 	bpl.w	d458 <dtostrf+0x2c0>
    d20a:	2200      	movs	r2, #0
    d20c:	461c      	mov	r4, r3
    d20e:	232d      	movs	r3, #45	; 0x2d
    d210:	f804 3b01 	strb.w	r3, [r4], #1
    d214:	e16b      	b.n	d4ee <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
    d216:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d21e:	bf4c      	ite	mi
    d220:	2304      	movmi	r3, #4
    d222:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d224:	4293      	cmp	r3, r2
    d226:	f280 8133 	bge.w	d490 <dtostrf+0x2f8>
    d22a:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d22c:	2800      	cmp	r0, #0
    d22e:	f280 8132 	bge.w	d496 <dtostrf+0x2fe>
			while (awidth) {
    d232:	2a00      	cmp	r2, #0
    d234:	f000 810c 	beq.w	d450 <dtostrf+0x2b8>
    d238:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d23a:	2220      	movs	r2, #32
    d23c:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d240:	429c      	cmp	r4, r3
    d242:	d1fb      	bne.n	d23c <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d244:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d248:	ee18 2a10 	vmov	r2, s16
    d24c:	2a00      	cmp	r2, #0
    d24e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d252:	fe67 7a87 	vselge.f32	s15, s15, s14
    d256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d25e:	f140 80f0 	bpl.w	d442 <dtostrf+0x2aa>
    d262:	2200      	movs	r2, #0
    d264:	461c      	mov	r4, r3
    d266:	232d      	movs	r3, #45	; 0x2d
    d268:	f804 3b01 	strb.w	r3, [r4], #1
    d26c:	e122      	b.n	d4b4 <dtostrf+0x31c>
    d26e:	4623      	mov	r3, r4
    d270:	e7f8      	b.n	d264 <dtostrf+0xcc>
    d272:	4623      	mov	r3, r4
    d274:	e7ca      	b.n	d20c <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d276:	468a      	mov	sl, r1
    d278:	aa02      	add	r2, sp, #8
    d27a:	a903      	add	r1, sp, #12
    d27c:	4640      	mov	r0, r8
    d27e:	f003 ffd9 	bl	11234 <fcvtf>
    d282:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d284:	9b03      	ldr	r3, [sp, #12]
    d286:	ea58 0203 	orrs.w	r2, r8, r3
    d28a:	d131      	bne.n	d2f0 <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d28c:	7802      	ldrb	r2, [r0, #0]
    d28e:	487e      	ldr	r0, [pc, #504]	; (d488 <dtostrf+0x2f0>)
    d290:	4f7e      	ldr	r7, [pc, #504]	; (d48c <dtostrf+0x2f4>)
    d292:	2a34      	cmp	r2, #52	; 0x34
    d294:	bf98      	it	ls
    d296:	4607      	movls	r7, r0
		decpt++;
    d298:	2301      	movs	r3, #1
    d29a:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
    d29c:	461e      	mov	r6, r3
    d29e:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    d2a0:	f1b8 0e00 	subs.w	lr, r8, #0
    d2a4:	bf18      	it	ne
    d2a6:	f04f 0e01 	movne.w	lr, #1
    d2aa:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
    d2ae:	d036      	beq.n	d31e <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    d2b0:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
    d2b4:	4443      	add	r3, r8
    d2b6:	4283      	cmp	r3, r0
    d2b8:	d26d      	bcs.n	d396 <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d2ba:	f1b8 0f00 	cmp.w	r8, #0
    d2be:	dd06      	ble.n	d2ce <dtostrf+0x136>
				val *= 10.0f;
    d2c0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    d2c4:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    d2c8:	f1ba 0a01 	subs.w	sl, sl, #1
    d2cc:	d1fa      	bne.n	d2c4 <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d2ce:	aa02      	add	r2, sp, #8
    d2d0:	a901      	add	r1, sp, #4
    d2d2:	4650      	mov	r0, sl
    d2d4:	eeb0 0a48 	vmov.f32	s0, s16
    d2d8:	f003 ffac 	bl	11234 <fcvtf>
    d2dc:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d2de:	9903      	ldr	r1, [sp, #12]
    d2e0:	9b01      	ldr	r3, [sp, #4]
    d2e2:	1a5a      	subs	r2, r3, r1
    d2e4:	f108 0301 	add.w	r3, r8, #1
    d2e8:	429a      	cmp	r2, r3
    d2ea:	d051      	beq.n	d390 <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
    d2ec:	46ce      	mov	lr, r9
    d2ee:	e016      	b.n	d31e <dtostrf+0x186>
	if (-decpt  > (int)precision) {
    d2f0:	425b      	negs	r3, r3
    d2f2:	4598      	cmp	r8, r3
    d2f4:	da03      	bge.n	d2fe <dtostrf+0x166>
		decpt = -precision;
    d2f6:	f1c8 0300 	rsb	r3, r8, #0
    d2fa:	9303      	str	r3, [sp, #12]
		s = "0";
    d2fc:	4f62      	ldr	r7, [pc, #392]	; (d488 <dtostrf+0x2f0>)
	reqd = strlen(s);
    d2fe:	4638      	mov	r0, r7
    d300:	f004 fd5e 	bl	11dc0 <strlen>
    d304:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
    d306:	9b03      	ldr	r3, [sp, #12]
    d308:	4283      	cmp	r3, r0
    d30a:	bfb8      	it	lt
    d30c:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
    d30e:	2b00      	cmp	r3, #0
    d310:	d1c6      	bne.n	d2a0 <dtostrf+0x108>
    d312:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
    d314:	f1b8 0e00 	subs.w	lr, r8, #0
    d318:	bf18      	it	ne
    d31a:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    d31e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d322:	f1b8 0f00 	cmp.w	r8, #0
    d326:	f000 80a3 	beq.w	d470 <dtostrf+0x2d8>
    d32a:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
    d32c:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d32e:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d332:	f1b9 0f00 	cmp.w	r9, #0
    d336:	dd30      	ble.n	d39a <dtostrf+0x202>
		e += pad;
    d338:	464b      	mov	r3, r9
    d33a:	444a      	add	r2, r9
	p = buf;
    d33c:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
    d33e:	f04f 0c20 	mov.w	ip, #32
    d342:	f800 cb01 	strb.w	ip, [r0], #1
    d346:	1a21      	subs	r1, r4, r0
    d348:	4419      	add	r1, r3
    d34a:	2900      	cmp	r1, #0
    d34c:	dcf9      	bgt.n	d342 <dtostrf+0x1aa>
    d34e:	f1b9 0f00 	cmp.w	r9, #0
    d352:	bfd8      	it	le
    d354:	2301      	movle	r3, #1
    d356:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    d358:	f1b8 0f00 	cmp.w	r8, #0
    d35c:	d002      	beq.n	d364 <dtostrf+0x1cc>
    d35e:	212d      	movs	r1, #45	; 0x2d
    d360:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
    d364:	9803      	ldr	r0, [sp, #12]
    d366:	b910      	cbnz	r0, d36e <dtostrf+0x1d6>
    d368:	f1be 0f00 	cmp.w	lr, #0
    d36c:	d117      	bne.n	d39e <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    d36e:	2800      	cmp	r0, #0
    d370:	da02      	bge.n	d378 <dtostrf+0x1e0>
    d372:	f1be 0f00 	cmp.w	lr, #0
    d376:	d11a      	bne.n	d3ae <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d378:	4293      	cmp	r3, r2
    d37a:	d24d      	bcs.n	d418 <dtostrf+0x280>
		*p++ = *s++;
    d37c:	4638      	mov	r0, r7
    d37e:	469c      	mov	ip, r3
    d380:	f810 1b01 	ldrb.w	r1, [r0], #1
    d384:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d388:	4594      	cmp	ip, r2
    d38a:	d03f      	beq.n	d40c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d38c:	272e      	movs	r7, #46	; 0x2e
    d38e:	e034      	b.n	d3fa <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d390:	3101      	adds	r1, #1
    d392:	9103      	str	r1, [sp, #12]
    d394:	e7aa      	b.n	d2ec <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
    d396:	46ce      	mov	lr, r9
    d398:	e7c1      	b.n	d31e <dtostrf+0x186>
	p = buf;
    d39a:	4623      	mov	r3, r4
    d39c:	e7df      	b.n	d35e <dtostrf+0x1c6>
		*p++ = '0';
    d39e:	4619      	mov	r1, r3
    d3a0:	2030      	movs	r0, #48	; 0x30
    d3a2:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
    d3a6:	202e      	movs	r0, #46	; 0x2e
    d3a8:	7058      	strb	r0, [r3, #1]
    d3aa:	460b      	mov	r3, r1
    d3ac:	e7e4      	b.n	d378 <dtostrf+0x1e0>
		*p++ = '0';
    d3ae:	469e      	mov	lr, r3
    d3b0:	2130      	movs	r1, #48	; 0x30
    d3b2:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
    d3b6:	212e      	movs	r1, #46	; 0x2e
    d3b8:	7059      	strb	r1, [r3, #1]
    d3ba:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
    d3bc:	4601      	mov	r1, r0
			*p++ = '0';
    d3be:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d3c2:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
    d3c6:	3101      	adds	r1, #1
    d3c8:	d4fb      	bmi.n	d3c2 <dtostrf+0x22a>
			*p++ = '0';
    d3ca:	4243      	negs	r3, r0
    d3cc:	2800      	cmp	r0, #0
    d3ce:	bfa8      	it	ge
    d3d0:	2301      	movge	r3, #1
    d3d2:	4473      	add	r3, lr
    d3d4:	9103      	str	r1, [sp, #12]
    d3d6:	ea6f 0000 	mvn.w	r0, r0
    d3da:	bfa8      	it	ge
    d3dc:	2000      	movge	r0, #0
    d3de:	2130      	movs	r1, #48	; 0x30
    d3e0:	f80e 1000 	strb.w	r1, [lr, r0]
    d3e4:	e7c8      	b.n	d378 <dtostrf+0x1e0>
    d3e6:	4663      	mov	r3, ip
	while (p < e) {
    d3e8:	4293      	cmp	r3, r2
    d3ea:	d20e      	bcs.n	d40a <dtostrf+0x272>
		*p++ = *s++;
    d3ec:	469c      	mov	ip, r3
    d3ee:	f810 1b01 	ldrb.w	r1, [r0], #1
    d3f2:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d3f6:	4594      	cmp	ip, r2
    d3f8:	d008      	beq.n	d40c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d3fa:	9903      	ldr	r1, [sp, #12]
    d3fc:	3901      	subs	r1, #1
    d3fe:	9103      	str	r1, [sp, #12]
    d400:	2900      	cmp	r1, #0
    d402:	d1f0      	bne.n	d3e6 <dtostrf+0x24e>
    d404:	705f      	strb	r7, [r3, #1]
    d406:	3302      	adds	r3, #2
    d408:	e7ee      	b.n	d3e8 <dtostrf+0x250>
    d40a:	461a      	mov	r2, r3
	}
	if (width < 0) {
    d40c:	2d00      	cmp	r5, #0
    d40e:	db05      	blt.n	d41c <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d410:	2300      	movs	r3, #0
    d412:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    d414:	4620      	mov	r0, r4
    d416:	e07e      	b.n	d516 <dtostrf+0x37e>
	while (p < e) {
    d418:	461a      	mov	r2, r3
    d41a:	e7f7      	b.n	d40c <dtostrf+0x274>
		pad = (reqd + width) * -1;
    d41c:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
    d41e:	43f0      	mvns	r0, r6
    d420:	2e00      	cmp	r6, #0
    d422:	daf5      	bge.n	d410 <dtostrf+0x278>
    d424:	4611      	mov	r1, r2
    d426:	2520      	movs	r5, #32
    d428:	f801 5b01 	strb.w	r5, [r1], #1
    d42c:	f1c1 0301 	rsb	r3, r1, #1
    d430:	4403      	add	r3, r0
    d432:	4413      	add	r3, r2
    d434:	2b00      	cmp	r3, #0
    d436:	dcf7      	bgt.n	d428 <dtostrf+0x290>
    d438:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d43c:	3001      	adds	r0, #1
    d43e:	4402      	add	r2, r0
    d440:	e7e6      	b.n	d410 <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d442:	224e      	movs	r2, #78	; 0x4e
    d444:	701a      	strb	r2, [r3, #0]
    d446:	2141      	movs	r1, #65	; 0x41
    d448:	7059      	strb	r1, [r3, #1]
    d44a:	1cd8      	adds	r0, r3, #3
    d44c:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d44e:	e042      	b.n	d4d6 <dtostrf+0x33e>
			while (awidth) {
    d450:	4623      	mov	r3, r4
    d452:	e6f7      	b.n	d244 <dtostrf+0xac>
		if (width<0) {
    d454:	4623      	mov	r3, r4
    d456:	e6f5      	b.n	d244 <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d458:	2249      	movs	r2, #73	; 0x49
    d45a:	701a      	strb	r2, [r3, #0]
    d45c:	224e      	movs	r2, #78	; 0x4e
    d45e:	705a      	strb	r2, [r3, #1]
    d460:	1cd8      	adds	r0, r3, #3
    d462:	2246      	movs	r2, #70	; 0x46
    d464:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d466:	e054      	b.n	d512 <dtostrf+0x37a>
			while (awidth) {
    d468:	4623      	mov	r3, r4
    d46a:	e6c8      	b.n	d1fe <dtostrf+0x66>
		if (width<0) {
    d46c:	4623      	mov	r3, r4
    d46e:	e6c6      	b.n	d1fe <dtostrf+0x66>
	e = p + reqd;
    d470:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d472:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d476:	f1b9 0f00 	cmp.w	r9, #0
    d47a:	f73f af5d 	bgt.w	d338 <dtostrf+0x1a0>
	p = buf;
    d47e:	4623      	mov	r3, r4
    d480:	e770      	b.n	d364 <dtostrf+0x1cc>
    d482:	bf00      	nop
    d484:	7f7fffff 	.word	0x7f7fffff
    d488:	20002a58 	.word	0x20002a58
    d48c:	20002a5c 	.word	0x20002a5c
		if (width<0) {
    d490:	2800      	cmp	r0, #0
    d492:	dbdf      	blt.n	d454 <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d494:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d496:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d49a:	ee18 3a10 	vmov	r3, s16
    d49e:	2b00      	cmp	r3, #0
    d4a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d4a4:	fe67 7a87 	vselge.f32	s15, s15, s14
    d4a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4b0:	f53f aedd 	bmi.w	d26e <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d4b4:	234e      	movs	r3, #78	; 0x4e
    d4b6:	7023      	strb	r3, [r4, #0]
    d4b8:	2141      	movs	r1, #65	; 0x41
    d4ba:	7061      	strb	r1, [r4, #1]
    d4bc:	1ce0      	adds	r0, r4, #3
    d4be:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d4c0:	b14a      	cbz	r2, d4d6 <dtostrf+0x33e>
    d4c2:	4615      	mov	r5, r2
    d4c4:	3203      	adds	r2, #3
    d4c6:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d4c8:	4602      	mov	r2, r0
			*buf++ = ' ';
    d4ca:	2120      	movs	r1, #32
    d4cc:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
    d4d0:	4293      	cmp	r3, r2
    d4d2:	d1fb      	bne.n	d4cc <dtostrf+0x334>
			*buf++ = ' ';
    d4d4:	4428      	add	r0, r5
		*buf = 0;
    d4d6:	2300      	movs	r3, #0
    d4d8:	7003      	strb	r3, [r0, #0]
		return buf;
    d4da:	e01c      	b.n	d516 <dtostrf+0x37e>
		if (width<0) {
    d4dc:	2800      	cmp	r0, #0
    d4de:	dbc5      	blt.n	d46c <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d4e0:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
    d4e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4ea:	f53f aec2 	bmi.w	d272 <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d4ee:	2349      	movs	r3, #73	; 0x49
    d4f0:	7023      	strb	r3, [r4, #0]
    d4f2:	234e      	movs	r3, #78	; 0x4e
    d4f4:	7063      	strb	r3, [r4, #1]
    d4f6:	1ce0      	adds	r0, r4, #3
    d4f8:	2346      	movs	r3, #70	; 0x46
    d4fa:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d4fc:	b14a      	cbz	r2, d512 <dtostrf+0x37a>
    d4fe:	4615      	mov	r5, r2
    d500:	3203      	adds	r2, #3
    d502:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d504:	4603      	mov	r3, r0
			*buf++ = ' ';
    d506:	2120      	movs	r1, #32
    d508:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
    d50c:	429a      	cmp	r2, r3
    d50e:	d1fb      	bne.n	d508 <dtostrf+0x370>
			*buf++ = ' ';
    d510:	4428      	add	r0, r5
		*buf = 0;
    d512:	2300      	movs	r3, #0
    d514:	7003      	strb	r3, [r0, #0]
}
    d516:	b004      	add	sp, #16
    d518:	ecbd 8b02 	vpop	{d8}
    d51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d520 <flexpwmWrite>:
{
    d520:	b570      	push	{r4, r5, r6, lr}
	uint16_t mask = 1 << submodule;
    d522:	f04f 0c01 	mov.w	ip, #1
    d526:	fa0c fc01 	lsl.w	ip, ip, r1
    d52a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t modulo = p->SM[submodule].VAL1;
    d52e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    d532:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    d536:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    d53a:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    d53e:	fb0e 3303 	mla	r3, lr, r3, r3
    d542:	4c27      	ldr	r4, [pc, #156]	; (d5e0 <flexpwmWrite+0xc0>)
    d544:	7824      	ldrb	r4, [r4, #0]
    d546:	40e3      	lsrs	r3, r4
    d548:	4573      	cmp	r3, lr
    d54a:	bf28      	it	cs
    d54c:	4673      	movcs	r3, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d54e:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    d552:	b2a4      	uxth	r4, r4
    d554:	012e      	lsls	r6, r5, #4
    d556:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    d55a:	4334      	orrs	r4, r6
    d55c:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    d560:	2a01      	cmp	r2, #1
    d562:	d01f      	beq.n	d5a4 <flexpwmWrite+0x84>
    d564:	2a02      	cmp	r2, #2
    d566:	d02d      	beq.n	d5c4 <flexpwmWrite+0xa4>
    d568:	b14a      	cbz	r2, d57e <flexpwmWrite+0x5e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d56a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d56e:	b29b      	uxth	r3, r3
    d570:	f00c 0c0f 	and.w	ip, ip, #15
    d574:	ea43 0c0c 	orr.w	ip, r3, ip
    d578:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    d57c:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL0 = modulo - cval;
    d57e:	ebae 0e03 	sub.w	lr, lr, r3
    d582:	fa1f fe8e 	uxth.w	lr, lr
    d586:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d58a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d58e:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    d592:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d596:	b29b      	uxth	r3, r3
    d598:	f00c 020f 	and.w	r2, ip, #15
    d59c:	4313      	orrs	r3, r2
    d59e:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d5a2:	e7e2      	b.n	d56a <flexpwmWrite+0x4a>
		p->SM[submodule].VAL3 = cval;
    d5a4:	b29b      	uxth	r3, r3
    d5a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d5aa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d5ae:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    d5b0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d5b4:	b29b      	uxth	r3, r3
    d5b6:	022d      	lsls	r5, r5, #8
    d5b8:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    d5bc:	432b      	orrs	r3, r5
    d5be:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d5c2:	e7d2      	b.n	d56a <flexpwmWrite+0x4a>
		p->SM[submodule].VAL5 = cval;
    d5c4:	b29b      	uxth	r3, r3
    d5c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d5ca:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d5ce:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    d5d0:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d5d4:	b29b      	uxth	r3, r3
    d5d6:	431e      	orrs	r6, r3
    d5d8:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    d5dc:	e7c5      	b.n	d56a <flexpwmWrite+0x4a>
    d5de:	bf00      	nop
    d5e0:	200038d5 	.word	0x200038d5

0000d5e4 <flexpwmFrequency>:
{
    d5e4:	b530      	push	{r4, r5, lr}
	uint16_t mask = 1 << submodule;
    d5e6:	f04f 0c01 	mov.w	ip, #1
    d5ea:	fa0c fc01 	lsl.w	ip, ip, r1
    d5ee:	fa1f f58c 	uxth.w	r5, ip
	uint32_t olddiv = p->SM[submodule].VAL1;
    d5f2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    d5f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d5fa:	89dc      	ldrh	r4, [r3, #14]
    d5fc:	b2a4      	uxth	r4, r4
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d5fe:	4b32      	ldr	r3, [pc, #200]	; (d6c8 <flexpwmFrequency+0xe4>)
    d600:	ed93 7a00 	vldr	s14, [r3]
    d604:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d608:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d60c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d610:	ee77 7a87 	vadd.f32	s15, s15, s14
    d614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d618:	ee17 2a90 	vmov	r2, s15
	while (newdiv > 65535 && prescale < 7) {
    d61c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    d620:	d350      	bcc.n	d6c4 <flexpwmFrequency+0xe0>
	uint32_t prescale = 0;
    d622:	2300      	movs	r3, #0
	while (newdiv > 65535 && prescale < 7) {
    d624:	f64f 7eff 	movw	lr, #65535	; 0xffff
		newdiv = newdiv >> 1;
    d628:	0852      	lsrs	r2, r2, #1
		prescale = prescale + 1;
    d62a:	3301      	adds	r3, #1
	while (newdiv > 65535 && prescale < 7) {
    d62c:	4572      	cmp	r2, lr
    d62e:	d901      	bls.n	d634 <flexpwmFrequency+0x50>
    d630:	2b06      	cmp	r3, #6
    d632:	d9f9      	bls.n	d628 <flexpwmFrequency+0x44>
	if (newdiv > 65535) {
    d634:	2a02      	cmp	r2, #2
    d636:	bf38      	it	cc
    d638:	2202      	movcc	r2, #2
    d63a:	f64f 7eff 	movw	lr, #65535	; 0xffff
    d63e:	4572      	cmp	r2, lr
    d640:	bf28      	it	cs
    d642:	4672      	movcs	r2, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d644:	f8b0 e188 	ldrh.w	lr, [r0, #392]	; 0x188
    d648:	fa1f fe8e 	uxth.w	lr, lr
    d64c:	012d      	lsls	r5, r5, #4
    d64e:	b2ed      	uxtb	r5, r5
    d650:	ea4e 0e05 	orr.w	lr, lr, r5
    d654:	f8a0 e188 	strh.w	lr, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    d658:	011b      	lsls	r3, r3, #4
    d65a:	b2db      	uxtb	r3, r3
    d65c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d660:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    d664:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5
    d668:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    d66c:	1e53      	subs	r3, r2, #1
    d66e:	b29b      	uxth	r3, r3
    d670:	f8ae 300e 	strh.w	r3, [lr, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    d674:	f8be 300a 	ldrh.w	r3, [lr, #10]
    d678:	b29b      	uxth	r3, r3
    d67a:	fb02 f303 	mul.w	r3, r2, r3
    d67e:	fbb3 f3f4 	udiv	r3, r3, r4
    d682:	b29b      	uxth	r3, r3
    d684:	f8ae 300a 	strh.w	r3, [lr, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    d688:	f8be 3016 	ldrh.w	r3, [lr, #22]
    d68c:	b29b      	uxth	r3, r3
    d68e:	fb02 f303 	mul.w	r3, r2, r3
    d692:	fbb3 f3f4 	udiv	r3, r3, r4
    d696:	b29b      	uxth	r3, r3
    d698:	f8ae 3016 	strh.w	r3, [lr, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    d69c:	f8be 301e 	ldrh.w	r3, [lr, #30]
    d6a0:	b29b      	uxth	r3, r3
    d6a2:	fb02 f303 	mul.w	r3, r2, r3
    d6a6:	fbb3 f3f4 	udiv	r3, r3, r4
    d6aa:	b29b      	uxth	r3, r3
    d6ac:	f8ae 301e 	strh.w	r3, [lr, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d6b0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d6b4:	b29b      	uxth	r3, r3
    d6b6:	f00c 0c0f 	and.w	ip, ip, #15
    d6ba:	ea43 030c 	orr.w	r3, r3, ip
    d6be:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d6c2:	bd30      	pop	{r4, r5, pc}
	uint32_t prescale = 0;
    d6c4:	2300      	movs	r3, #0
    d6c6:	e7b5      	b.n	d634 <flexpwmFrequency+0x50>
    d6c8:	20003140 	.word	0x20003140

0000d6cc <quadtimerWrite>:
{
    d6cc:	b510      	push	{r4, lr}
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    d6ce:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
    d6d2:	f8be c006 	ldrh.w	ip, [lr, #6]
    d6d6:	fa1f fc8c 	uxth.w	ip, ip
    d6da:	f8be 3010 	ldrh.w	r3, [lr, #16]
    d6de:	f1cc 1c01 	rsb	ip, ip, #65537	; 0x10001
    d6e2:	fa1c f383 	uxtah	r3, ip, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    d6e6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    d6ea:	fb0c f202 	mul.w	r2, ip, r2
    d6ee:	4c08      	ldr	r4, [pc, #32]	; (d710 <quadtimerWrite+0x44>)
    d6f0:	7824      	ldrb	r4, [r4, #0]
    d6f2:	40e2      	lsrs	r2, r4
	if (high >= modulo - 1) high = modulo - 2;
    d6f4:	4594      	cmp	ip, r2
    d6f6:	bf98      	it	ls
    d6f8:	1e9a      	subls	r2, r3, #2
	uint32_t low = modulo - high; // low must 2 or higher
    d6fa:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].LOAD = 65537 - low;
    d6fc:	f1c3 0301 	rsb	r3, r3, #1
    d700:	b29b      	uxth	r3, r3
    d702:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->CH[submodule].CMPLD1 = high;
    d706:	b292      	uxth	r2, r2
    d708:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    d70c:	8202      	strh	r2, [r0, #16]
}
    d70e:	bd10      	pop	{r4, pc}
    d710:	200038d5 	.word	0x200038d5

0000d714 <quadtimerFrequency>:
{
    d714:	b500      	push	{lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d716:	4b23      	ldr	r3, [pc, #140]	; (d7a4 <quadtimerFrequency+0x90>)
    d718:	ed93 7a00 	vldr	s14, [r3]
    d71c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d720:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d724:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d728:	ee77 7a87 	vadd.f32	s15, s15, s14
    d72c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d730:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    d734:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    d738:	4293      	cmp	r3, r2
    d73a:	d930      	bls.n	d79e <quadtimerFrequency+0x8a>
	uint32_t prescale = 0;
    d73c:	2200      	movs	r2, #0
	while (newdiv > 65534 && prescale < 7) {
    d73e:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = newdiv >> 1; 
    d742:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    d744:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    d746:	4563      	cmp	r3, ip
    d748:	d901      	bls.n	d74e <quadtimerFrequency+0x3a>
    d74a:	2a06      	cmp	r2, #6
    d74c:	d9f9      	bls.n	d742 <quadtimerFrequency+0x2e>
	if (newdiv > 65534) {
    d74e:	2b02      	cmp	r3, #2
    d750:	bf38      	it	cc
    d752:	2302      	movcc	r3, #2
    d754:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
    d758:	4563      	cmp	r3, ip
    d75a:	bf28      	it	cs
    d75c:	4663      	movcs	r3, ip
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    d75e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d762:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    d766:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    d76a:	88c8      	ldrh	r0, [r1, #6]
    d76c:	b280      	uxth	r0, r0
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    d76e:	fb0e fc03 	mul.w	ip, lr, r3
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    d772:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    d776:	4470      	add	r0, lr
    d778:	fbbc f0f0 	udiv	r0, ip, r0
	uint32_t low = newdiv - high;
    d77c:	1a1b      	subs	r3, r3, r0
	p->CH[submodule].LOAD = 65537 - low;
    d77e:	f1c3 0301 	rsb	r3, r3, #1
    d782:	b29b      	uxth	r3, r3
    d784:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    d786:	b280      	uxth	r0, r0
    d788:	8208      	strh	r0, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    d78a:	3208      	adds	r2, #8
    d78c:	0252      	lsls	r2, r2, #9
    d78e:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    d792:	f242 0326 	movw	r3, #8230	; 0x2026
    d796:	4313      	orrs	r3, r2
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    d798:	818b      	strh	r3, [r1, #12]
}
    d79a:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t prescale = 0;
    d79e:	2200      	movs	r2, #0
    d7a0:	e7d5      	b.n	d74e <quadtimerFrequency+0x3a>
    d7a2:	bf00      	nop
    d7a4:	20003140 	.word	0x20003140

0000d7a8 <analogWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    d7a8:	2836      	cmp	r0, #54	; 0x36
    d7aa:	d83f      	bhi.n	d82c <analogWrite+0x84>
{
    d7ac:	b538      	push	{r3, r4, r5, lr}
    d7ae:	4604      	mov	r4, r0
	info = pwm_pin_info + pin;
    d7b0:	4b1f      	ldr	r3, [pc, #124]	; (d830 <analogWrite+0x88>)
    d7b2:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	if (info->type == 1) {
    d7b6:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    d7ba:	2b01      	cmp	r3, #1
    d7bc:	d014      	beq.n	d7e8 <analogWrite+0x40>
	} else if (info->type == 2) {
    d7be:	2b02      	cmp	r3, #2
    d7c0:	d12b      	bne.n	d81a <analogWrite+0x72>
		switch ((info->module >> 4) & 3) {
    d7c2:	f895 c001 	ldrb.w	ip, [r5, #1]
    d7c6:	f3cc 1301 	ubfx	r3, ip, #4, #2
    d7ca:	2b01      	cmp	r3, #1
    d7cc:	d02a      	beq.n	d824 <analogWrite+0x7c>
    d7ce:	2b02      	cmp	r3, #2
    d7d0:	d02a      	beq.n	d828 <analogWrite+0x80>
		  case 0: qtimer = &IMXRT_TMR1; break;
    d7d2:	4818      	ldr	r0, [pc, #96]	; (d834 <analogWrite+0x8c>)
    d7d4:	4a18      	ldr	r2, [pc, #96]	; (d838 <analogWrite+0x90>)
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	bf08      	it	eq
    d7da:	4610      	moveq	r0, r2
		quadtimerWrite(qtimer, info->module & 0x03, val);
    d7dc:	b28a      	uxth	r2, r1
    d7de:	f00c 0103 	and.w	r1, ip, #3
    d7e2:	f7ff ff73 	bl	d6cc <quadtimerWrite>
    d7e6:	e012      	b.n	d80e <analogWrite+0x66>
		switch ((info->module >> 4) & 3) {
    d7e8:	f895 c001 	ldrb.w	ip, [r5, #1]
    d7ec:	f3cc 1301 	ubfx	r3, ip, #4, #2
    d7f0:	2b01      	cmp	r3, #1
    d7f2:	d013      	beq.n	d81c <analogWrite+0x74>
    d7f4:	2b02      	cmp	r3, #2
    d7f6:	d013      	beq.n	d820 <analogWrite+0x78>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    d7f8:	4810      	ldr	r0, [pc, #64]	; (d83c <analogWrite+0x94>)
    d7fa:	4a11      	ldr	r2, [pc, #68]	; (d840 <analogWrite+0x98>)
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	bf08      	it	eq
    d800:	4610      	moveq	r0, r2
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    d802:	b28b      	uxth	r3, r1
    d804:	78aa      	ldrb	r2, [r5, #2]
    d806:	f00c 0103 	and.w	r1, ip, #3
    d80a:	f7ff fe89 	bl	d520 <flexpwmWrite>
	*(portConfigRegister(pin)) = info->muxval;
    d80e:	4b0d      	ldr	r3, [pc, #52]	; (d844 <analogWrite+0x9c>)
    d810:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    d814:	685b      	ldr	r3, [r3, #4]
    d816:	78ea      	ldrb	r2, [r5, #3]
    d818:	601a      	str	r2, [r3, #0]
}
    d81a:	bd38      	pop	{r3, r4, r5, pc}
		switch ((info->module >> 4) & 3) {
    d81c:	480a      	ldr	r0, [pc, #40]	; (d848 <analogWrite+0xa0>)
    d81e:	e7f0      	b.n	d802 <analogWrite+0x5a>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    d820:	480a      	ldr	r0, [pc, #40]	; (d84c <analogWrite+0xa4>)
    d822:	e7ee      	b.n	d802 <analogWrite+0x5a>
		switch ((info->module >> 4) & 3) {
    d824:	480a      	ldr	r0, [pc, #40]	; (d850 <analogWrite+0xa8>)
    d826:	e7d9      	b.n	d7dc <analogWrite+0x34>
		  case 2: qtimer = &IMXRT_TMR3; break;
    d828:	480a      	ldr	r0, [pc, #40]	; (d854 <analogWrite+0xac>)
    d82a:	e7d7      	b.n	d7dc <analogWrite+0x34>
    d82c:	4770      	bx	lr
    d82e:	bf00      	nop
    d830:	20002b44 	.word	0x20002b44
    d834:	401e8000 	.word	0x401e8000
    d838:	401dc000 	.word	0x401dc000
    d83c:	403e8000 	.word	0x403e8000
    d840:	403dc000 	.word	0x403dc000
    d844:	200026e8 	.word	0x200026e8
    d848:	403e0000 	.word	0x403e0000
    d84c:	403e4000 	.word	0x403e4000
    d850:	401e0000 	.word	0x401e0000
    d854:	401e4000 	.word	0x401e4000

0000d858 <analogWriteFrequency>:
	if (pin >= CORE_NUM_DIGITAL) return;
    d858:	2836      	cmp	r0, #54	; 0x36
    d85a:	d835      	bhi.n	d8c8 <analogWriteFrequency+0x70>
{
    d85c:	b510      	push	{r4, lr}
	info = pwm_pin_info + pin;
    d85e:	4b1b      	ldr	r3, [pc, #108]	; (d8cc <analogWriteFrequency+0x74>)
    d860:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	if (info->type == 1) {
    d864:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    d868:	2b01      	cmp	r3, #1
    d86a:	d002      	beq.n	d872 <analogWriteFrequency+0x1a>
	} else if (info->type == 2) {
    d86c:	2b02      	cmp	r3, #2
    d86e:	d016      	beq.n	d89e <analogWriteFrequency+0x46>
}
    d870:	bd10      	pop	{r4, pc}
		switch ((info->module >> 4) & 3) {
    d872:	7851      	ldrb	r1, [r2, #1]
    d874:	f3c1 1301 	ubfx	r3, r1, #4, #2
    d878:	2b01      	cmp	r3, #1
    d87a:	d00c      	beq.n	d896 <analogWriteFrequency+0x3e>
    d87c:	2b02      	cmp	r3, #2
    d87e:	d00c      	beq.n	d89a <analogWriteFrequency+0x42>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    d880:	4813      	ldr	r0, [pc, #76]	; (d8d0 <analogWriteFrequency+0x78>)
    d882:	4c14      	ldr	r4, [pc, #80]	; (d8d4 <analogWriteFrequency+0x7c>)
    d884:	2b00      	cmp	r3, #0
    d886:	bf08      	it	eq
    d888:	4620      	moveq	r0, r4
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    d88a:	7892      	ldrb	r2, [r2, #2]
    d88c:	f001 0103 	and.w	r1, r1, #3
    d890:	f7ff fea8 	bl	d5e4 <flexpwmFrequency>
    d894:	e7ec      	b.n	d870 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    d896:	4810      	ldr	r0, [pc, #64]	; (d8d8 <analogWriteFrequency+0x80>)
    d898:	e7f7      	b.n	d88a <analogWriteFrequency+0x32>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    d89a:	4810      	ldr	r0, [pc, #64]	; (d8dc <analogWriteFrequency+0x84>)
    d89c:	e7f5      	b.n	d88a <analogWriteFrequency+0x32>
		switch ((info->module >> 4) & 3) {
    d89e:	7851      	ldrb	r1, [r2, #1]
    d8a0:	f3c1 1301 	ubfx	r3, r1, #4, #2
    d8a4:	2b01      	cmp	r3, #1
    d8a6:	d00b      	beq.n	d8c0 <analogWriteFrequency+0x68>
    d8a8:	2b02      	cmp	r3, #2
    d8aa:	d00b      	beq.n	d8c4 <analogWriteFrequency+0x6c>
		  case 0: qtimer = &IMXRT_TMR1; break;
    d8ac:	480c      	ldr	r0, [pc, #48]	; (d8e0 <analogWriteFrequency+0x88>)
    d8ae:	4a0d      	ldr	r2, [pc, #52]	; (d8e4 <analogWriteFrequency+0x8c>)
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	bf08      	it	eq
    d8b4:	4610      	moveq	r0, r2
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    d8b6:	f001 0103 	and.w	r1, r1, #3
    d8ba:	f7ff ff2b 	bl	d714 <quadtimerFrequency>
    d8be:	e7d7      	b.n	d870 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    d8c0:	4809      	ldr	r0, [pc, #36]	; (d8e8 <analogWriteFrequency+0x90>)
    d8c2:	e7f8      	b.n	d8b6 <analogWriteFrequency+0x5e>
		  case 2: qtimer = &IMXRT_TMR3; break;
    d8c4:	4809      	ldr	r0, [pc, #36]	; (d8ec <analogWriteFrequency+0x94>)
    d8c6:	e7f6      	b.n	d8b6 <analogWriteFrequency+0x5e>
    d8c8:	4770      	bx	lr
    d8ca:	bf00      	nop
    d8cc:	20002b44 	.word	0x20002b44
    d8d0:	403e8000 	.word	0x403e8000
    d8d4:	403dc000 	.word	0x403dc000
    d8d8:	403e0000 	.word	0x403e0000
    d8dc:	403e4000 	.word	0x403e4000
    d8e0:	401e8000 	.word	0x401e8000
    d8e4:	401dc000 	.word	0x401dc000
    d8e8:	401e0000 	.word	0x401e0000
    d8ec:	401e4000 	.word	0x401e4000

0000d8f0 <flexpwm_init>:
{
    d8f0:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    d8f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    d8f6:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    d8fa:	230f      	movs	r3, #15
    d8fc:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    d900:	2100      	movs	r1, #0
    d902:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    d906:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d90a:	b29b      	uxth	r3, r3
    d90c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    d910:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d914:	f44f 4460 	mov.w	r4, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d918:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
    d91c:	460a      	mov	r2, r1
		p->SM[i].VAL1 = 33464;
    d91e:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    d922:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    d926:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d92a:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    d92c:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    d930:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    d932:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    d934:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    d936:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    d938:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    d93c:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    d93e:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    d940:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    d942:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    d944:	3101      	adds	r1, #1
    d946:	2904      	cmp	r1, #4
    d948:	d1eb      	bne.n	d922 <flexpwm_init+0x32>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    d94a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d94e:	b29b      	uxth	r3, r3
    d950:	f043 030f 	orr.w	r3, r3, #15
    d954:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    d958:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d95c:	b29b      	uxth	r3, r3
    d95e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    d962:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d966:	bd10      	pop	{r4, pc}

0000d968 <quadtimer_init>:
{
    d968:	b570      	push	{r4, r5, r6, lr}
	for (i=0; i < 4; i++) {
    d96a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    d96c:	4611      	mov	r1, r2
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d96e:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d970:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d974:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d978:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    d97c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    d980:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    d984:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    d986:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    d988:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    d98a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    d98c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    d98e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    d992:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    d994:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    d998:	3201      	adds	r2, #1
    d99a:	2a04      	cmp	r2, #4
    d99c:	d1ee      	bne.n	d97c <quadtimer_init+0x14>
}
    d99e:	bd70      	pop	{r4, r5, r6, pc}

0000d9a0 <pwm_init>:
{
    d9a0:	b508      	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    d9a2:	4b10      	ldr	r3, [pc, #64]	; (d9e4 <pwm_init+0x44>)
    d9a4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    d9a6:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    d9aa:	679a      	str	r2, [r3, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    d9ac:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    d9b0:	4a0d      	ldr	r2, [pc, #52]	; (d9e8 <pwm_init+0x48>)
    d9b2:	430a      	orrs	r2, r1
    d9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    d9b8:	480c      	ldr	r0, [pc, #48]	; (d9ec <pwm_init+0x4c>)
    d9ba:	f7ff ff99 	bl	d8f0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    d9be:	480c      	ldr	r0, [pc, #48]	; (d9f0 <pwm_init+0x50>)
    d9c0:	f7ff ff96 	bl	d8f0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    d9c4:	480b      	ldr	r0, [pc, #44]	; (d9f4 <pwm_init+0x54>)
    d9c6:	f7ff ff93 	bl	d8f0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    d9ca:	480b      	ldr	r0, [pc, #44]	; (d9f8 <pwm_init+0x58>)
    d9cc:	f7ff ff90 	bl	d8f0 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    d9d0:	480a      	ldr	r0, [pc, #40]	; (d9fc <pwm_init+0x5c>)
    d9d2:	f7ff ffc9 	bl	d968 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    d9d6:	480a      	ldr	r0, [pc, #40]	; (da00 <pwm_init+0x60>)
    d9d8:	f7ff ffc6 	bl	d968 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    d9dc:	4809      	ldr	r0, [pc, #36]	; (da04 <pwm_init+0x64>)
    d9de:	f7ff ffc3 	bl	d968 <quadtimer_init>
}
    d9e2:	bd08      	pop	{r3, pc}
    d9e4:	400fc000 	.word	0x400fc000
    d9e8:	fc030000 	.word	0xfc030000
    d9ec:	403dc000 	.word	0x403dc000
    d9f0:	403e0000 	.word	0x403e0000
    d9f4:	403e4000 	.word	0x403e4000
    d9f8:	403e8000 	.word	0x403e8000
    d9fc:	401dc000 	.word	0x401dc000
    da00:	401e0000 	.word	0x401e0000
    da04:	401e4000 	.word	0x401e4000

0000da08 <analogWriteRes>:
	xbar[output] = input;
#endif
}

uint32_t analogWriteRes(uint32_t bits)
{
    da08:	4603      	mov	r3, r0
	if (bits < 1) {
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
    da0a:	4a05      	ldr	r2, [pc, #20]	; (da20 <analogWriteRes+0x18>)
    da0c:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    da0e:	2b10      	cmp	r3, #16
    da10:	bf28      	it	cs
    da12:	2310      	movcs	r3, #16
    da14:	2b01      	cmp	r3, #1
    da16:	bf38      	it	cc
    da18:	2301      	movcc	r3, #1
    da1a:	7013      	strb	r3, [r2, #0]
	return prior;
}
    da1c:	4770      	bx	lr
    da1e:	bf00      	nop
    da20:	200038d5 	.word	0x200038d5

0000da24 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    da24:	4b07      	ldr	r3, [pc, #28]	; (da44 <rtc_get+0x20>)
    da26:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    da28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    da2a:	4a06      	ldr	r2, [pc, #24]	; (da44 <rtc_get+0x20>)
    da2c:	4684      	mov	ip, r0
    da2e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    da30:	4619      	mov	r1, r3
    da32:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    da34:	4299      	cmp	r1, r3
    da36:	d1f9      	bne.n	da2c <rtc_get+0x8>
    da38:	4584      	cmp	ip, r0
    da3a:	d1f7      	bne.n	da2c <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    da3c:	0bdb      	lsrs	r3, r3, #15
}
    da3e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    da42:	4770      	bx	lr
    da44:	400d4000 	.word	0x400d4000

0000da48 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    da48:	4770      	bx	lr
	...

0000da4c <unused_interrupt_vector>:
	__disable_irq();
    da4c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    da4e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    da52:	4c52      	ldr	r4, [pc, #328]	; (db9c <unused_interrupt_vector+0x150>)
    da54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    da58:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    da5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    da60:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
    da64:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    da68:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    da6c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    da70:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
    da74:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    da78:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    da7c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    da80:	6993      	ldr	r3, [r2, #24]
    da82:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    da86:	69d3      	ldr	r3, [r2, #28]
    da88:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    da8c:	f000 f8d2 	bl	dc34 <tempmonGetTemp>
    da90:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    da94:	f7ff ffc6 	bl	da24 <rtc_get>
    da98:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    da9c:	230b      	movs	r3, #11
    da9e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
    daa2:	483f      	ldr	r0, [pc, #252]	; (dba0 <unused_interrupt_vector+0x154>)
	crc = 0xFFFFFFFF;
    daa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    daa8:	493e      	ldr	r1, [pc, #248]	; (dba4 <unused_interrupt_vector+0x158>)
	while (p < end) {
    daaa:	4d3f      	ldr	r5, [pc, #252]	; (dba8 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    daac:	6803      	ldr	r3, [r0, #0]
    daae:	3004      	adds	r0, #4
    dab0:	405a      	eors	r2, r3
    dab2:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    dab4:	f002 0301 	and.w	r3, r2, #1
    dab8:	fb01 f303 	mul.w	r3, r1, r3
    dabc:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    dac0:	3c01      	subs	r4, #1
    dac2:	d1f7      	bne.n	dab4 <unused_interrupt_vector+0x68>
	while (p < end) {
    dac4:	42a8      	cmp	r0, r5
    dac6:	d1f1      	bne.n	daac <unused_interrupt_vector+0x60>
	info->crc = crc;
    dac8:	4b34      	ldr	r3, [pc, #208]	; (db9c <unused_interrupt_vector+0x150>)
    daca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    dace:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    dad2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dad6:	4a32      	ldr	r2, [pc, #200]	; (dba0 <unused_interrupt_vector+0x154>)
    dad8:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
    dadc:	3220      	adds	r2, #32
    dade:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    dae2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    dae6:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    daea:	4a30      	ldr	r2, [pc, #192]	; (dbac <unused_interrupt_vector+0x160>)
    daec:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    daee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    daf2:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    daf4:	4b2e      	ldr	r3, [pc, #184]	; (dbb0 <unused_interrupt_vector+0x164>)
    daf6:	2102      	movs	r1, #2
    daf8:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    dafa:	69d3      	ldr	r3, [r2, #28]
    dafc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    db00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db04:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    db06:	4b2b      	ldr	r3, [pc, #172]	; (dbb4 <unused_interrupt_vector+0x168>)
    db08:	681a      	ldr	r2, [r3, #0]
    db0a:	4b2b      	ldr	r3, [pc, #172]	; (dbb8 <unused_interrupt_vector+0x16c>)
    db0c:	429a      	cmp	r2, r3
    db0e:	d81b      	bhi.n	db48 <unused_interrupt_vector+0xfc>
	PIT_MCR = 0;
    db10:	4b27      	ldr	r3, [pc, #156]	; (dbb0 <unused_interrupt_vector+0x164>)
    db12:	2200      	movs	r2, #0
    db14:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
    db16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    db1a:	4a28      	ldr	r2, [pc, #160]	; (dbbc <unused_interrupt_vector+0x170>)
    db1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    db20:	2201      	movs	r2, #1
    db22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    db26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    db2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    db2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    db32:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    db36:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    db3a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    db3e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    db42:	4d1b      	ldr	r5, [pc, #108]	; (dbb0 <unused_interrupt_vector+0x164>)
			PIT_TFLG0 = 1;
    db44:	2601      	movs	r6, #1
    db46:	e005      	b.n	db54 <unused_interrupt_vector+0x108>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    db48:	4618      	mov	r0, r3
    db4a:	f7ff f845 	bl	cbd8 <set_arm_clock>
    db4e:	e7df      	b.n	db10 <unused_interrupt_vector+0xc4>
		usb_isr();
    db50:	f000 f9e8 	bl	df24 <usb_isr>
		if (PIT_TFLG0) {
    db54:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    db58:	2b00      	cmp	r3, #0
    db5a:	d0f9      	beq.n	db50 <unused_interrupt_vector+0x104>
			PIT_TFLG0 = 1;
    db5c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    db60:	3401      	adds	r4, #1
    db62:	2c4f      	cmp	r4, #79	; 0x4f
    db64:	d9f4      	bls.n	db50 <unused_interrupt_vector+0x104>
	USB1_USBCMD = USB_USBCMD_RST;
    db66:	4b16      	ldr	r3, [pc, #88]	; (dbc0 <unused_interrupt_vector+0x174>)
    db68:	2202      	movs	r2, #2
    db6a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    db6e:	4b15      	ldr	r3, [pc, #84]	; (dbc4 <unused_interrupt_vector+0x178>)
    db70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    db74:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    db76:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
    db7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    db7e:	b93b      	cbnz	r3, db90 <unused_interrupt_vector+0x144>
	SRC_GPR5 = 0x0BAD00F1;
    db80:	4811      	ldr	r0, [pc, #68]	; (dbc8 <unused_interrupt_vector+0x17c>)
    db82:	4912      	ldr	r1, [pc, #72]	; (dbcc <unused_interrupt_vector+0x180>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    db84:	4a0a      	ldr	r2, [pc, #40]	; (dbb0 <unused_interrupt_vector+0x164>)
	SRC_GPR5 = 0x0BAD00F1;
    db86:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    db88:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    db8c:	2b00      	cmp	r3, #0
    db8e:	d0fa      	beq.n	db86 <unused_interrupt_vector+0x13a>
	SCB_AIRCR = 0x05FA0004;
    db90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    db94:	4a0e      	ldr	r2, [pc, #56]	; (dbd0 <unused_interrupt_vector+0x184>)
    db96:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    db9a:	e7fe      	b.n	db9a <unused_interrupt_vector+0x14e>
    db9c:	2027ff00 	.word	0x2027ff00
    dba0:	2027ff80 	.word	0x2027ff80
    dba4:	edb88320 	.word	0xedb88320
    dba8:	2027ffa8 	.word	0x2027ffa8
    dbac:	400fc000 	.word	0x400fc000
    dbb0:	40084000 	.word	0x40084000
    dbb4:	20003144 	.word	0x20003144
    dbb8:	0bcd3d80 	.word	0x0bcd3d80
    dbbc:	00249f00 	.word	0x00249f00
    dbc0:	402e0000 	.word	0x402e0000
    dbc4:	400d9000 	.word	0x400d9000
    dbc8:	400f8000 	.word	0x400f8000
    dbcc:	0bad00f1 	.word	0x0bad00f1
    dbd0:	05fa0004 	.word	0x05fa0004

0000dbd4 <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    dbd4:	b508      	push	{r3, lr}
    dbd6:	4603      	mov	r3, r0
        char *prev = __brkval;
    dbd8:	4a08      	ldr	r2, [pc, #32]	; (dbfc <_sbrk+0x28>)
    dbda:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
    dbdc:	b133      	cbz	r3, dbec <_sbrk+0x18>
    dbde:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
    dbe0:	4402      	add	r2, r0
    dbe2:	4b07      	ldr	r3, [pc, #28]	; (dc00 <_sbrk+0x2c>)
    dbe4:	429a      	cmp	r2, r3
    dbe6:	d802      	bhi.n	dbee <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    dbe8:	4b04      	ldr	r3, [pc, #16]	; (dbfc <_sbrk+0x28>)
    dbea:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
    dbec:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
    dbee:	f002 ff37 	bl	10a60 <__errno>
    dbf2:	230c      	movs	r3, #12
    dbf4:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
    dbf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dbfa:	e7f7      	b.n	dbec <_sbrk+0x18>
    dbfc:	200031fc 	.word	0x200031fc
    dc00:	20280000 	.word	0x20280000

0000dc04 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    dc04:	2000      	movs	r0, #0
    dc06:	4770      	bx	lr

0000dc08 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    dc08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dc0c:	4770      	bx	lr

0000dc0e <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    dc0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    dc12:	604b      	str	r3, [r1, #4]
	return 0;
}
    dc14:	2000      	movs	r0, #0
    dc16:	4770      	bx	lr

0000dc18 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    dc18:	2001      	movs	r0, #1
    dc1a:	4770      	bx	lr

0000dc1c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    dc1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dc20:	4770      	bx	lr

0000dc22 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    dc22:	bf30      	wfi
    dc24:	e7fd      	b.n	dc22 <__cxa_pure_virtual>

0000dc26 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    dc26:	bf30      	wfi
    dc28:	e7fd      	b.n	dc26 <abort>

0000dc2a <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
    dc2a:	b508      	push	{r3, lr}
  unused_interrupt_vector();
    dc2c:	f7ff ff0e 	bl	da4c <unused_interrupt_vector>
}
    dc30:	bd08      	pop	{r3, pc}
	...

0000dc34 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    dc34:	4a13      	ldr	r2, [pc, #76]	; (dc84 <tempmonGetTemp+0x50>)
    dc36:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    dc3a:	f013 0f04 	tst.w	r3, #4
    dc3e:	d0fa      	beq.n	dc36 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    dc40:	4b10      	ldr	r3, [pc, #64]	; (dc84 <tempmonGetTemp+0x50>)
    dc42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    dc46:	4a10      	ldr	r2, [pc, #64]	; (dc88 <tempmonGetTemp+0x54>)
    dc48:	ed92 7a00 	vldr	s14, [r2]
    dc4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    dc50:	f3c3 230b 	ubfx	r3, r3, #8, #12
    dc54:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    dc58:	eef8 7a67 	vcvt.f32.u32	s15, s15
    dc5c:	4b0b      	ldr	r3, [pc, #44]	; (dc8c <tempmonGetTemp+0x58>)
    dc5e:	edd3 6a00 	vldr	s13, [r3]
    dc62:	eef8 6a66 	vcvt.f32.u32	s13, s13
    dc66:	ee77 7ae6 	vsub.f32	s15, s15, s13
    dc6a:	4b09      	ldr	r3, [pc, #36]	; (dc90 <tempmonGetTemp+0x5c>)
    dc6c:	edd3 6a00 	vldr	s13, [r3]
    dc70:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dc74:	4b07      	ldr	r3, [pc, #28]	; (dc94 <tempmonGetTemp+0x60>)
    dc76:	edd3 6a00 	vldr	s13, [r3]
    dc7a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    dc7e:	ee37 0a40 	vsub.f32	s0, s14, s0
    dc82:	4770      	bx	lr
    dc84:	400d8100 	.word	0x400d8100
    dc88:	20005154 	.word	0x20005154
    dc8c:	20005150 	.word	0x20005150
    dc90:	20005158 	.word	0x20005158
    dc94:	2000515c 	.word	0x2000515c

0000dc98 <endpoint0_transmit>:
	if (len > 0) {
    dc98:	468c      	mov	ip, r1
    dc9a:	b319      	cbz	r1, dce4 <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
    dc9c:	4b23      	ldr	r3, [pc, #140]	; (dd2c <endpoint0_transmit+0x94>)
    dc9e:	2101      	movs	r1, #1
    dca0:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dca2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    dca6:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    dcaa:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dcac:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dcae:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    dcb2:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dcb4:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    dcb8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dcba:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    dcbe:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dcc0:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    dcc4:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    dcc6:	491a      	ldr	r1, [pc, #104]	; (dd30 <endpoint0_transmit+0x98>)
    dcc8:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
    dcca:	2300      	movs	r3, #0
    dccc:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    dcce:	4919      	ldr	r1, [pc, #100]	; (dd34 <endpoint0_transmit+0x9c>)
    dcd0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dcd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    dcd8:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    dcdc:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dce0:	2b00      	cmp	r3, #0
    dce2:	d1fb      	bne.n	dcdc <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
    dce4:	4b14      	ldr	r3, [pc, #80]	; (dd38 <endpoint0_transmit+0xa0>)
    dce6:	2101      	movs	r1, #1
    dce8:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dcea:	2a00      	cmp	r2, #0
    dcec:	f248 0180 	movw	r1, #32896	; 0x8080
    dcf0:	bf08      	it	eq
    dcf2:	2180      	moveq	r1, #128	; 0x80
    dcf4:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    dcf6:	2000      	movs	r0, #0
    dcf8:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    dcfa:	490d      	ldr	r1, [pc, #52]	; (dd30 <endpoint0_transmit+0x98>)
    dcfc:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
    dcfe:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dd00:	4b0c      	ldr	r3, [pc, #48]	; (dd34 <endpoint0_transmit+0x9c>)
    dd02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    dd06:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    dd0a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    dd0e:	f041 0101 	orr.w	r1, r1, #1
    dd12:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    dd16:	1a12      	subs	r2, r2, r0
    dd18:	bf18      	it	ne
    dd1a:	2201      	movne	r2, #1
    dd1c:	4b07      	ldr	r3, [pc, #28]	; (dd3c <endpoint0_transmit+0xa4>)
    dd1e:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    dd20:	4a04      	ldr	r2, [pc, #16]	; (dd34 <endpoint0_transmit+0x9c>)
    dd22:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    dd26:	2b00      	cmp	r3, #0
    dd28:	d1fb      	bne.n	dd22 <endpoint0_transmit+0x8a>
}
    dd2a:	4770      	bx	lr
    dd2c:	20003ee0 	.word	0x20003ee0
    dd30:	20000000 	.word	0x20000000
    dd34:	402e0000 	.word	0x402e0000
    dd38:	20003ec0 	.word	0x20003ec0
    dd3c:	20004fe8 	.word	0x20004fe8

0000dd40 <endpoint0_receive>:
	if (len > 0) {
    dd40:	468c      	mov	ip, r1
    dd42:	b319      	cbz	r1, dd8c <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
    dd44:	4b24      	ldr	r3, [pc, #144]	; (ddd8 <endpoint0_receive+0x98>)
    dd46:	2101      	movs	r1, #1
    dd48:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dd4a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    dd4e:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    dd52:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dd54:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dd56:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    dd5a:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dd5c:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    dd60:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dd62:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    dd66:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dd68:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    dd6c:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    dd6e:	491b      	ldr	r1, [pc, #108]	; (dddc <endpoint0_receive+0x9c>)
    dd70:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
    dd72:	2300      	movs	r3, #0
    dd74:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
    dd76:	491a      	ldr	r1, [pc, #104]	; (dde0 <endpoint0_receive+0xa0>)
    dd78:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dd7c:	f043 0301 	orr.w	r3, r3, #1
    dd80:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    dd84:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d1fb      	bne.n	dd84 <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
    dd8c:	4b15      	ldr	r3, [pc, #84]	; (dde4 <endpoint0_receive+0xa4>)
    dd8e:	2101      	movs	r1, #1
    dd90:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    dd92:	2a00      	cmp	r2, #0
    dd94:	f248 0180 	movw	r1, #32896	; 0x8080
    dd98:	bf08      	it	eq
    dd9a:	2180      	moveq	r1, #128	; 0x80
    dd9c:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    dd9e:	2000      	movs	r0, #0
    dda0:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    dda2:	490e      	ldr	r1, [pc, #56]	; (dddc <endpoint0_receive+0x9c>)
    dda4:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
    dda6:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    dda8:	4b0d      	ldr	r3, [pc, #52]	; (dde0 <endpoint0_receive+0xa0>)
    ddaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    ddae:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ddb2:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    ddb6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    ddba:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ddbe:	1a12      	subs	r2, r2, r0
    ddc0:	bf18      	it	ne
    ddc2:	2201      	movne	r2, #1
    ddc4:	0412      	lsls	r2, r2, #16
    ddc6:	4b08      	ldr	r3, [pc, #32]	; (dde8 <endpoint0_receive+0xa8>)
    ddc8:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    ddca:	4a05      	ldr	r2, [pc, #20]	; (dde0 <endpoint0_receive+0xa0>)
    ddcc:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ddd0:	2b00      	cmp	r3, #0
    ddd2:	d1fb      	bne.n	ddcc <endpoint0_receive+0x8c>
}
    ddd4:	4770      	bx	lr
    ddd6:	bf00      	nop
    ddd8:	20003ee0 	.word	0x20003ee0
    dddc:	20000000 	.word	0x20000000
    dde0:	402e0000 	.word	0x402e0000
    dde4:	20003ec0 	.word	0x20003ec0
    dde8:	20004fe8 	.word	0x20004fe8

0000ddec <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    ddec:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ddee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ddf0:	b11b      	cbz	r3, ddfa <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ddf2:	6853      	ldr	r3, [r2, #4]
    ddf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ddf8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    ddfa:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ddfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
    ddfe:	b33b      	cbz	r3, de50 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
    de00:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    de02:	4b1a      	ldr	r3, [pc, #104]	; (de6c <schedule_transfer+0x80>)
    de04:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    de08:	420b      	tst	r3, r1
    de0a:	d12b      	bne.n	de64 <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    de0c:	4b18      	ldr	r3, [pc, #96]	; (de70 <schedule_transfer+0x84>)
    de0e:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    de10:	4b16      	ldr	r3, [pc, #88]	; (de6c <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    de12:	4e17      	ldr	r6, [pc, #92]	; (de70 <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    de14:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    de18:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    de1c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    de20:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    de24:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    de28:	f414 4f80 	tst.w	r4, #16384	; 0x4000
    de2c:	d104      	bne.n	de38 <schedule_transfer+0x4c>
    de2e:	6874      	ldr	r4, [r6, #4]
    de30:	1be4      	subs	r4, r4, r7
    de32:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    de36:	d3ed      	bcc.n	de14 <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    de38:	4229      	tst	r1, r5
    de3a:	d113      	bne.n	de64 <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    de3c:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    de3e:	2300      	movs	r3, #0
    de40:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    de42:	4c0a      	ldr	r4, [pc, #40]	; (de6c <schedule_transfer+0x80>)
    de44:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    de48:	430b      	orrs	r3, r1
    de4a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
    de4e:	e009      	b.n	de64 <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    de50:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    de52:	2300      	movs	r3, #0
    de54:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    de56:	4c05      	ldr	r4, [pc, #20]	; (de6c <schedule_transfer+0x80>)
    de58:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    de5c:	430b      	orrs	r3, r1
    de5e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    de62:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    de64:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    de66:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    de68:	bcf0      	pop	{r4, r5, r6, r7}
    de6a:	4770      	bx	lr
    de6c:	402e0000 	.word	0x402e0000
    de70:	e0001000 	.word	0xe0001000

0000de74 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    de74:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    de76:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    de78:	b1b5      	cbz	r5, dea8 <run_callbacks+0x34>
    de7a:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    de7c:	462b      	mov	r3, r5
	uint32_t count = 0;
    de7e:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
    de80:	685a      	ldr	r2, [r3, #4]
    de82:	f012 0f80 	tst.w	r2, #128	; 0x80
    de86:	d107      	bne.n	de98 <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    de88:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
    de8a:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
    de8c:	2b01      	cmp	r3, #1
    de8e:	d1f7      	bne.n	de80 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    de90:	2300      	movs	r3, #0
    de92:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    de94:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    de96:	e000      	b.n	de9a <run_callbacks+0x26>
			ep->first_transfer = t;
    de98:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
    de9a:	b12c      	cbz	r4, dea8 <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
    de9c:	4628      	mov	r0, r5
    de9e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    dea0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    dea2:	4798      	blx	r3
	while (count) {
    dea4:	3c01      	subs	r4, #1
    dea6:	d1f9      	bne.n	de9c <run_callbacks+0x28>
		first = next;
		count--;
	}
}
    dea8:	bd70      	pop	{r4, r5, r6, pc}

0000deaa <usb_endpoint_config>:
{
    deaa:	b570      	push	{r4, r5, r6, lr}
    deac:	4604      	mov	r4, r0
    deae:	460e      	mov	r6, r1
    deb0:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    deb2:	223c      	movs	r2, #60	; 0x3c
    deb4:	2100      	movs	r1, #0
    deb6:	3004      	adds	r0, #4
    deb8:	f003 f964 	bl	11184 <memset>
	qh->config = config;
    debc:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    debe:	2301      	movs	r3, #1
    dec0:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
    dec2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    dec4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000dec8 <usb_start_sof_interrupts>:
	__disable_irq();
    dec8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    deca:	4a0a      	ldr	r2, [pc, #40]	; (def4 <usb_start_sof_interrupts+0x2c>)
    decc:	2301      	movs	r3, #1
    dece:	4083      	lsls	r3, r0
    ded0:	7810      	ldrb	r0, [r2, #0]
    ded2:	4318      	orrs	r0, r3
    ded4:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    ded6:	4b08      	ldr	r3, [pc, #32]	; (def8 <usb_start_sof_interrupts+0x30>)
    ded8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    dedc:	f013 0f80 	tst.w	r3, #128	; 0x80
    dee0:	d106      	bne.n	def0 <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    dee2:	4a05      	ldr	r2, [pc, #20]	; (def8 <usb_start_sof_interrupts+0x30>)
    dee4:	2180      	movs	r1, #128	; 0x80
    dee6:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    deea:	430b      	orrs	r3, r1
    deec:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    def0:	b662      	cpsie	i
}
    def2:	4770      	bx	lr
    def4:	2000533b 	.word	0x2000533b
    def8:	402e0000 	.word	0x402e0000

0000defc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    defc:	2301      	movs	r3, #1
    defe:	4083      	lsls	r3, r0
    df00:	4a06      	ldr	r2, [pc, #24]	; (df1c <usb_stop_sof_interrupts+0x20>)
    df02:	7810      	ldrb	r0, [r2, #0]
    df04:	ea20 0003 	bic.w	r0, r0, r3
    df08:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    df0a:	b930      	cbnz	r0, df1a <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    df0c:	4a04      	ldr	r2, [pc, #16]	; (df20 <usb_stop_sof_interrupts+0x24>)
    df0e:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    df12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    df16:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    df1a:	4770      	bx	lr
    df1c:	2000533b 	.word	0x2000533b
    df20:	402e0000 	.word	0x402e0000

0000df24 <usb_isr>:
{
    df24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    df28:	4bb5      	ldr	r3, [pc, #724]	; (e200 <usb_isr+0x2dc>)
    df2a:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
    df2e:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    df32:	f017 0f01 	tst.w	r7, #1
    df36:	f000 81c9 	beq.w	e2cc <usb_isr+0x3a8>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    df3a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
    df3e:	2b00      	cmp	r3, #0
    df40:	f000 8192 	beq.w	e268 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    df44:	4cae      	ldr	r4, [pc, #696]	; (e200 <usb_isr+0x2dc>)
				s.word1 = endpoint_queue_head[0].setup0;
    df46:	4eaf      	ldr	r6, [pc, #700]	; (e204 <usb_isr+0x2e0>)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    df48:	f106 0b80 	add.w	fp, r6, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    df4c:	f8df a2ec 	ldr.w	sl, [pc, #748]	; e23c <usb_isr+0x318>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    df50:	f8df 92ec 	ldr.w	r9, [pc, #748]	; e240 <usb_isr+0x31c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    df54:	f8df 82ec 	ldr.w	r8, [pc, #748]	; e244 <usb_isr+0x320>
    df58:	e01b      	b.n	df92 <usb_isr+0x6e>
	switch (setup.wRequestAndType) {
    df5a:	2b80      	cmp	r3, #128	; 0x80
    df5c:	d110      	bne.n	df80 <usb_isr+0x5c>
		reply_buffer[0] = 0;
    df5e:	48aa      	ldr	r0, [pc, #680]	; (e208 <usb_isr+0x2e4>)
    df60:	2200      	movs	r2, #0
    df62:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
    df64:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    df66:	2102      	movs	r1, #2
    df68:	f7ff fe96 	bl	dc98 <endpoint0_transmit>
		return;
    df6c:	e00c      	b.n	df88 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    df6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    df72:	f000 8089 	beq.w	e088 <usb_isr+0x164>
    df76:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    df7a:	b29b      	uxth	r3, r3
    df7c:	2b01      	cmp	r3, #1
    df7e:	d967      	bls.n	e050 <usb_isr+0x12c>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    df80:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    df84:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    df88:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    df8c:	2b00      	cmp	r3, #0
    df8e:	f000 816b 	beq.w	e268 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    df92:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    df96:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    df98:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
    df9a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    df9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    dfa2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    dfa6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    dfaa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    dfae:	d0f4      	beq.n	df9a <usb_isr+0x76>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    dfb0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    dfb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    dfb8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    dfbc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    dfc0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    dfc4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    dfc8:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    dfcc:	d1fa      	bne.n	dfc4 <usb_isr+0xa0>
			endpoint0_notify_mask = 0;
    dfce:	4b8f      	ldr	r3, [pc, #572]	; (e20c <usb_isr+0x2e8>)
    dfd0:	2100      	movs	r1, #0
    dfd2:	6019      	str	r1, [r3, #0]
	setup.bothwords = setupdata;
    dfd4:	4610      	mov	r0, r2
	switch (setup.wRequestAndType) {
    dfd6:	b2ab      	uxth	r3, r5
    dfd8:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    dfdc:	d07e      	beq.n	e0dc <usb_isr+0x1b8>
    dfde:	d820      	bhi.n	e022 <usb_isr+0xfe>
    dfe0:	f240 3102 	movw	r1, #770	; 0x302
    dfe4:	428b      	cmp	r3, r1
    dfe6:	f000 80a1 	beq.w	e12c <usb_isr+0x208>
    dfea:	d8c0      	bhi.n	df6e <usb_isr+0x4a>
    dfec:	2b82      	cmp	r3, #130	; 0x82
    dfee:	d07e      	beq.n	e0ee <usb_isr+0x1ca>
    dff0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    dff4:	d1b1      	bne.n	df5a <usb_isr+0x36>
		endpoint = setup.wIndex & 0x7F;
    dff6:	b293      	uxth	r3, r2
    dff8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    dffc:	2a07      	cmp	r2, #7
    dffe:	d8bf      	bhi.n	df80 <usb_isr+0x5c>
		if (dir) {
    e000:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e004:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e008:	bf14      	ite	ne
    e00a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e00e:	f023 0301 	biceq.w	r3, r3, #1
    e012:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e016:	2200      	movs	r2, #0
    e018:	4611      	mov	r1, r2
    e01a:	4610      	mov	r0, r2
    e01c:	f7ff fe90 	bl	dd40 <endpoint0_receive>
		return;
    e020:	e7b2      	b.n	df88 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e022:	f242 2121 	movw	r1, #8737	; 0x2221
    e026:	428b      	cmp	r3, r1
    e028:	f000 810e 	beq.w	e248 <usb_isr+0x324>
    e02c:	d919      	bls.n	e062 <usb_isr+0x13e>
    e02e:	f242 3121 	movw	r1, #8993	; 0x2321
    e032:	428b      	cmp	r3, r1
    e034:	f000 8112 	beq.w	e25c <usb_isr+0x338>
    e038:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    e03c:	428b      	cmp	r3, r1
    e03e:	d19f      	bne.n	df80 <usb_isr+0x5c>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    e040:	b293      	uxth	r3, r2
    e042:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    e046:	d19b      	bne.n	df80 <usb_isr+0x5c>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    e048:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    e04c:	f363 000f 	bfi	r0, r3, #0, #16
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e050:	4b6f      	ldr	r3, [pc, #444]	; (e210 <usb_isr+0x2ec>)
    e052:	6859      	ldr	r1, [r3, #4]
    e054:	2900      	cmp	r1, #0
    e056:	d093      	beq.n	df80 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e058:	fa1f fe80 	uxth.w	lr, r0
    e05c:	f3c5 450f 	ubfx	r5, r5, #16, #16
    e060:	e0a7      	b.n	e1b2 <usb_isr+0x28e>
	switch (setup.wRequestAndType) {
    e062:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e066:	d01b      	beq.n	e0a0 <usb_isr+0x17c>
    e068:	f242 0121 	movw	r1, #8225	; 0x2021
    e06c:	428b      	cmp	r3, r1
    e06e:	d187      	bne.n	df80 <usb_isr+0x5c>
		if (setup.wLength != 7) break;
    e070:	0c13      	lsrs	r3, r2, #16
    e072:	2b07      	cmp	r3, #7
    e074:	d184      	bne.n	df80 <usb_isr+0x5c>
		endpoint0_setupdata.bothwords = setupdata;
    e076:	4b67      	ldr	r3, [pc, #412]	; (e214 <usb_isr+0x2f0>)
    e078:	601d      	str	r5, [r3, #0]
    e07a:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    e07c:	2201      	movs	r2, #1
    e07e:	2107      	movs	r1, #7
    e080:	4865      	ldr	r0, [pc, #404]	; (e218 <usb_isr+0x2f4>)
    e082:	f7ff fe5d 	bl	dd40 <endpoint0_receive>
		return;
    e086:	e77f      	b.n	df88 <usb_isr+0x64>
		endpoint0_receive(NULL, 0, 0);
    e088:	2200      	movs	r2, #0
    e08a:	4611      	mov	r1, r2
    e08c:	4610      	mov	r0, r2
    e08e:	f7ff fe57 	bl	dd40 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    e092:	0c2b      	lsrs	r3, r5, #16
    e094:	065b      	lsls	r3, r3, #25
    e096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e09a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    e09e:	e773      	b.n	df88 <usb_isr+0x64>
		usb_configuration = setup.wValue;
    e0a0:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e0a4:	4b5d      	ldr	r3, [pc, #372]	; (e21c <usb_isr+0x2f8>)
    e0a6:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e0a8:	4b5d      	ldr	r3, [pc, #372]	; (e220 <usb_isr+0x2fc>)
    e0aa:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e0ae:	4b5d      	ldr	r3, [pc, #372]	; (e224 <usb_isr+0x300>)
    e0b0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e0b4:	4b5c      	ldr	r3, [pc, #368]	; (e228 <usb_isr+0x304>)
    e0b6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    e0ba:	f000 fb45 	bl	e748 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e0be:	2280      	movs	r2, #128	; 0x80
    e0c0:	2100      	movs	r1, #0
    e0c2:	4658      	mov	r0, fp
    e0c4:	f003 f85e 	bl	11184 <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e0c8:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e0cc:	f8c6 90e0 	str.w	r9, [r6, #224]	; 0xe0
		endpoint0_receive(NULL, 0, 0);
    e0d0:	2200      	movs	r2, #0
    e0d2:	4611      	mov	r1, r2
    e0d4:	4610      	mov	r0, r2
    e0d6:	f7ff fe33 	bl	dd40 <endpoint0_receive>
		return;
    e0da:	e755      	b.n	df88 <usb_isr+0x64>
		reply_buffer[0] = usb_configuration;
    e0dc:	4b4f      	ldr	r3, [pc, #316]	; (e21c <usb_isr+0x2f8>)
    e0de:	781b      	ldrb	r3, [r3, #0]
    e0e0:	4849      	ldr	r0, [pc, #292]	; (e208 <usb_isr+0x2e4>)
    e0e2:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e0e4:	2200      	movs	r2, #0
    e0e6:	2101      	movs	r1, #1
    e0e8:	f7ff fdd6 	bl	dc98 <endpoint0_transmit>
		return;
    e0ec:	e74c      	b.n	df88 <usb_isr+0x64>
		endpoint = setup.wIndex & 0x7F;
    e0ee:	b293      	uxth	r3, r2
    e0f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e0f4:	2a07      	cmp	r2, #7
    e0f6:	f63f af43 	bhi.w	df80 <usb_isr+0x5c>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e0fa:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    e0fe:	4a42      	ldr	r2, [pc, #264]	; (e208 <usb_isr+0x2e4>)
    e100:	2100      	movs	r1, #0
    e102:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    e104:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e106:	f013 0f80 	tst.w	r3, #128	; 0x80
    e10a:	d00b      	beq.n	e124 <usb_isr+0x200>
    e10c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e110:	d002      	beq.n	e118 <usb_isr+0x1f4>
			reply_buffer[0] = 1;
    e112:	4b3d      	ldr	r3, [pc, #244]	; (e208 <usb_isr+0x2e4>)
    e114:	2201      	movs	r2, #1
    e116:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e118:	2200      	movs	r2, #0
    e11a:	2102      	movs	r1, #2
    e11c:	483a      	ldr	r0, [pc, #232]	; (e208 <usb_isr+0x2e4>)
    e11e:	f7ff fdbb 	bl	dc98 <endpoint0_transmit>
		return;
    e122:	e731      	b.n	df88 <usb_isr+0x64>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e124:	f010 0f01 	tst.w	r0, #1
    e128:	d0f6      	beq.n	e118 <usb_isr+0x1f4>
    e12a:	e7f2      	b.n	e112 <usb_isr+0x1ee>
		endpoint = setup.wIndex & 0x7F;
    e12c:	b293      	uxth	r3, r2
    e12e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e132:	2a07      	cmp	r2, #7
    e134:	f63f af24 	bhi.w	df80 <usb_isr+0x5c>
		if (dir) {
    e138:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e13c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e140:	bf14      	ite	ne
    e142:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e146:	f043 0301 	orreq.w	r3, r3, #1
    e14a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e14e:	2200      	movs	r2, #0
    e150:	4611      	mov	r1, r2
    e152:	4610      	mov	r0, r2
    e154:	f7ff fdf4 	bl	dd40 <endpoint0_receive>
		return;
    e158:	e716      	b.n	df88 <usb_isr+0x64>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e15a:	4b34      	ldr	r3, [pc, #208]	; (e22c <usb_isr+0x308>)
    e15c:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e15e:	462a      	mov	r2, r5
    e160:	4933      	ldr	r1, [pc, #204]	; (e230 <usb_isr+0x30c>)
    e162:	4b34      	ldr	r3, [pc, #208]	; (e234 <usb_isr+0x310>)
    e164:	2800      	cmp	r0, #0
    e166:	bf18      	it	ne
    e168:	4619      	movne	r1, r3
    e16a:	4833      	ldr	r0, [pc, #204]	; (e238 <usb_isr+0x314>)
    e16c:	f7fe ff40 	bl	cff0 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e170:	4a31      	ldr	r2, [pc, #196]	; (e238 <usb_isr+0x314>)
    e172:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e176:	442a      	add	r2, r5
	asm("dsb");
    e178:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e17c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e180:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e184:	3320      	adds	r3, #32
	} while (location < end_addr);
    e186:	429a      	cmp	r2, r3
    e188:	d8fa      	bhi.n	e180 <usb_isr+0x25c>
	asm("dsb");
    e18a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e18e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e192:	2200      	movs	r2, #0
    e194:	4629      	mov	r1, r5
    e196:	4828      	ldr	r0, [pc, #160]	; (e238 <usb_isr+0x314>)
    e198:	f7ff fd7e 	bl	dc98 <endpoint0_transmit>
				return;
    e19c:	e6f4      	b.n	df88 <usb_isr+0x64>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e19e:	462a      	mov	r2, r5
    e1a0:	4825      	ldr	r0, [pc, #148]	; (e238 <usb_isr+0x314>)
    e1a2:	f7fe ff25 	bl	cff0 <memcpy>
    e1a6:	e7e3      	b.n	e170 <usb_isr+0x24c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e1a8:	330c      	adds	r3, #12
    e1aa:	6859      	ldr	r1, [r3, #4]
    e1ac:	2900      	cmp	r1, #0
    e1ae:	f43f aee7 	beq.w	df80 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e1b2:	4628      	mov	r0, r5
    e1b4:	f8b3 c000 	ldrh.w	ip, [r3]
    e1b8:	45ac      	cmp	ip, r5
    e1ba:	d1f5      	bne.n	e1a8 <usb_isr+0x284>
    e1bc:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    e1c0:	45f4      	cmp	ip, lr
    e1c2:	d1f1      	bne.n	e1a8 <usb_isr+0x284>
				if ((setup.wValue >> 8) == 3) {
    e1c4:	0a2d      	lsrs	r5, r5, #8
    e1c6:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
    e1c8:	bf0c      	ite	eq
    e1ca:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
    e1cc:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e1ce:	0c15      	lsrs	r5, r2, #16
    e1d0:	429d      	cmp	r5, r3
    e1d2:	bf28      	it	cs
    e1d4:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
    e1d6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e1da:	d0be      	beq.n	e15a <usb_isr+0x236>
				} else if (setup.wValue == 0x700) {
    e1dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    e1e0:	d1dd      	bne.n	e19e <usb_isr+0x27a>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e1e2:	4b12      	ldr	r3, [pc, #72]	; (e22c <usb_isr+0x308>)
    e1e4:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e1e6:	462a      	mov	r2, r5
    e1e8:	4912      	ldr	r1, [pc, #72]	; (e234 <usb_isr+0x310>)
    e1ea:	4b11      	ldr	r3, [pc, #68]	; (e230 <usb_isr+0x30c>)
    e1ec:	2800      	cmp	r0, #0
    e1ee:	bf18      	it	ne
    e1f0:	4619      	movne	r1, r3
    e1f2:	4811      	ldr	r0, [pc, #68]	; (e238 <usb_isr+0x314>)
    e1f4:	f7fe fefc 	bl	cff0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e1f8:	2307      	movs	r3, #7
    e1fa:	4a0f      	ldr	r2, [pc, #60]	; (e238 <usb_isr+0x314>)
    e1fc:	7053      	strb	r3, [r2, #1]
    e1fe:	e7b7      	b.n	e170 <usb_isr+0x24c>
    e200:	402e0000 	.word	0x402e0000
    e204:	20000000 	.word	0x20000000
    e208:	200050d0 	.word	0x200050d0
    e20c:	20004fe8 	.word	0x20004fe8
    e210:	20002f6c 	.word	0x20002f6c
    e214:	20004080 	.word	0x20004080
    e218:	20004fe0 	.word	0x20004fe0
    e21c:	20005340 	.word	0x20005340
    e220:	00cc0002 	.word	0x00cc0002
    e224:	000200c8 	.word	0x000200c8
    e228:	00c80002 	.word	0x00c80002
    e22c:	20005341 	.word	0x20005341
    e230:	600020d4 	.word	0x600020d4
    e234:	60002138 	.word	0x60002138
    e238:	20200000 	.word	0x20200000
    e23c:	b8c6cf5d 	.word	0xb8c6cf5d
    e240:	74d59319 	.word	0x74d59319
    e244:	402e01c0 	.word	0x402e01c0
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e248:	b292      	uxth	r2, r2
    e24a:	b93a      	cbnz	r2, e25c <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e24c:	4b57      	ldr	r3, [pc, #348]	; (e3ac <usb_isr+0x488>)
    e24e:	681a      	ldr	r2, [r3, #0]
    e250:	4b57      	ldr	r3, [pc, #348]	; (e3b0 <usb_isr+0x48c>)
    e252:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e254:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e258:	4b56      	ldr	r3, [pc, #344]	; (e3b4 <usb_isr+0x490>)
    e25a:	701d      	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    e25c:	2200      	movs	r2, #0
    e25e:	4611      	mov	r1, r2
    e260:	4610      	mov	r0, r2
    e262:	f7ff fd6d 	bl	dd40 <endpoint0_receive>
		return;
    e266:	e68f      	b.n	df88 <usb_isr+0x64>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e268:	4b53      	ldr	r3, [pc, #332]	; (e3b8 <usb_isr+0x494>)
    e26a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    e26e:	b36c      	cbz	r4, e2cc <usb_isr+0x3a8>
			USB1_ENDPTCOMPLETE = completestatus;
    e270:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e274:	4b51      	ldr	r3, [pc, #324]	; (e3bc <usb_isr+0x498>)
    e276:	681b      	ldr	r3, [r3, #0]
    e278:	421c      	tst	r4, r3
    e27a:	d172      	bne.n	e362 <usb_isr+0x43e>
			completestatus &= endpointN_notify_mask;
    e27c:	4b50      	ldr	r3, [pc, #320]	; (e3c0 <usb_isr+0x49c>)
    e27e:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    e280:	401c      	ands	r4, r3
    e282:	d023      	beq.n	e2cc <usb_isr+0x3a8>
				while (tx) {
    e284:	0c26      	lsrs	r6, r4, #16
    e286:	d010      	beq.n	e2aa <usb_isr+0x386>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e288:	f8df 9154 	ldr.w	r9, [pc, #340]	; e3e0 <usb_isr+0x4bc>
					tx &= ~(1<<p);
    e28c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
    e290:	fa96 f5a6 	rbit	r5, r6
    e294:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e298:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
    e29c:	3040      	adds	r0, #64	; 0x40
    e29e:	f7ff fde9 	bl	de74 <run_callbacks>
					tx &= ~(1<<p);
    e2a2:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
    e2a6:	43ae      	bics	r6, r5
    e2a8:	d1f2      	bne.n	e290 <usb_isr+0x36c>
				uint32_t rx = completestatus & 0xffff;
    e2aa:	b2a4      	uxth	r4, r4
				while(rx) {
    e2ac:	b174      	cbz	r4, e2cc <usb_isr+0x3a8>
					run_callbacks(endpoint_queue_head + p * 2);
    e2ae:	f8df 8130 	ldr.w	r8, [pc, #304]	; e3e0 <usb_isr+0x4bc>
					rx &= ~(1<<p);
    e2b2:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
    e2b4:	fa94 f5a4 	rbit	r5, r4
    e2b8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    e2bc:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
    e2c0:	f7ff fdd8 	bl	de74 <run_callbacks>
					rx &= ~(1<<p);
    e2c4:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
    e2c8:	43ac      	bics	r4, r5
    e2ca:	d1f3      	bne.n	e2b4 <usb_isr+0x390>
	if (status & USB_USBSTS_URI) { // page 3164
    e2cc:	f017 0f40 	tst.w	r7, #64	; 0x40
    e2d0:	d019      	beq.n	e306 <usb_isr+0x3e2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e2d2:	4b39      	ldr	r3, [pc, #228]	; (e3b8 <usb_isr+0x494>)
    e2d4:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e2d8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e2dc:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e2e0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e2e4:	461a      	mov	r2, r3
    e2e6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d1fb      	bne.n	e2e6 <usb_isr+0x3c2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e2ee:	4b32      	ldr	r3, [pc, #200]	; (e3b8 <usb_isr+0x494>)
    e2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e2f4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e2f8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e2fc:	f000 fa22 	bl	e744 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e300:	4b2f      	ldr	r3, [pc, #188]	; (e3c0 <usb_isr+0x49c>)
    e302:	2200      	movs	r2, #0
    e304:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e306:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
    e30a:	d003      	beq.n	e314 <usb_isr+0x3f0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e30c:	4b2d      	ldr	r3, [pc, #180]	; (e3c4 <usb_isr+0x4a0>)
    e30e:	681b      	ldr	r3, [r3, #0]
    e310:	b103      	cbz	r3, e314 <usb_isr+0x3f0>
    e312:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e314:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
    e318:	d003      	beq.n	e322 <usb_isr+0x3fe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e31a:	4b2b      	ldr	r3, [pc, #172]	; (e3c8 <usb_isr+0x4a4>)
    e31c:	681b      	ldr	r3, [r3, #0]
    e31e:	b103      	cbz	r3, e322 <usb_isr+0x3fe>
    e320:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e322:	f017 0f04 	tst.w	r7, #4
    e326:	d009      	beq.n	e33c <usb_isr+0x418>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e328:	4b23      	ldr	r3, [pc, #140]	; (e3b8 <usb_isr+0x494>)
    e32a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e32e:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
    e332:	4b26      	ldr	r3, [pc, #152]	; (e3cc <usb_isr+0x4a8>)
    e334:	bf14      	ite	ne
    e336:	2201      	movne	r2, #1
			usb_high_speed = 0;
    e338:	2200      	moveq	r2, #0
    e33a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e33c:	4b1e      	ldr	r3, [pc, #120]	; (e3b8 <usb_isr+0x494>)
    e33e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e342:	f013 0f80 	tst.w	r3, #128	; 0x80
    e346:	d00a      	beq.n	e35e <usb_isr+0x43a>
    e348:	f017 0f80 	tst.w	r7, #128	; 0x80
    e34c:	d007      	beq.n	e35e <usb_isr+0x43a>
		if (usb_reboot_timer) {
    e34e:	4b20      	ldr	r3, [pc, #128]	; (e3d0 <usb_isr+0x4ac>)
    e350:	781b      	ldrb	r3, [r3, #0]
    e352:	b123      	cbz	r3, e35e <usb_isr+0x43a>
			if (--usb_reboot_timer == 0) {
    e354:	3b01      	subs	r3, #1
    e356:	b2db      	uxtb	r3, r3
    e358:	4a1d      	ldr	r2, [pc, #116]	; (e3d0 <usb_isr+0x4ac>)
    e35a:	7013      	strb	r3, [r2, #0]
    e35c:	b30b      	cbz	r3, e3a2 <usb_isr+0x47e>
}
    e35e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				endpoint0_notify_mask = 0;
    e362:	4b16      	ldr	r3, [pc, #88]	; (e3bc <usb_isr+0x498>)
    e364:	2200      	movs	r2, #0
    e366:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    e368:	4b1a      	ldr	r3, [pc, #104]	; (e3d4 <usb_isr+0x4b0>)
    e36a:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e36c:	8819      	ldrh	r1, [r3, #0]
    e36e:	f242 0321 	movw	r3, #8225	; 0x2021
    e372:	4299      	cmp	r1, r3
    e374:	d182      	bne.n	e27c <usb_isr+0x358>
    e376:	b292      	uxth	r2, r2
    e378:	2a00      	cmp	r2, #0
    e37a:	f47f af7f 	bne.w	e27c <usb_isr+0x358>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e37e:	4b16      	ldr	r3, [pc, #88]	; (e3d8 <usb_isr+0x4b4>)
    e380:	4a16      	ldr	r2, [pc, #88]	; (e3dc <usb_isr+0x4b8>)
    e382:	e892 0003 	ldmia.w	r2, {r0, r1}
    e386:	6018      	str	r0, [r3, #0]
    e388:	8099      	strh	r1, [r3, #4]
    e38a:	0c09      	lsrs	r1, r1, #16
    e38c:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e38e:	2886      	cmp	r0, #134	; 0x86
    e390:	f47f af74 	bne.w	e27c <usb_isr+0x358>
			usb_start_sof_interrupts(NUM_INTERFACE);
    e394:	2003      	movs	r0, #3
    e396:	f7ff fd97 	bl	dec8 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e39a:	4b0d      	ldr	r3, [pc, #52]	; (e3d0 <usb_isr+0x4ac>)
    e39c:	2250      	movs	r2, #80	; 0x50
    e39e:	701a      	strb	r2, [r3, #0]
    e3a0:	e76c      	b.n	e27c <usb_isr+0x358>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e3a2:	2003      	movs	r0, #3
    e3a4:	f7ff fdaa 	bl	defc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e3a8:	f006 fef2 	bl	15190 <___reboot_Teensyduino__veneer>
    e3ac:	200052f0 	.word	0x200052f0
    e3b0:	20005304 	.word	0x20005304
    e3b4:	2000533f 	.word	0x2000533f
    e3b8:	402e0000 	.word	0x402e0000
    e3bc:	20004fe8 	.word	0x20004fe8
    e3c0:	20004fec 	.word	0x20004fec
    e3c4:	20005308 	.word	0x20005308
    e3c8:	2000530c 	.word	0x2000530c
    e3cc:	20005341 	.word	0x20005341
    e3d0:	20005342 	.word	0x20005342
    e3d4:	20004080 	.word	0x20004080
    e3d8:	200052fc 	.word	0x200052fc
    e3dc:	20004fe0 	.word	0x20004fe0
    e3e0:	20000000 	.word	0x20000000

0000e3e4 <usb_config_rx>:
{
    e3e4:	b538      	push	{r3, r4, r5, lr}
    e3e6:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e3e8:	1e83      	subs	r3, r0, #2
    e3ea:	2b02      	cmp	r3, #2
    e3ec:	d900      	bls.n	e3f0 <usb_config_rx+0xc>
}
    e3ee:	bd38      	pop	{r3, r4, r5, pc}
    e3f0:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e3f2:	fab2 fc82 	clz	ip, r2
    e3f6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e3fa:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e3fc:	462a      	mov	r2, r5
    e3fe:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e402:	4807      	ldr	r0, [pc, #28]	; (e420 <usb_config_rx+0x3c>)
    e404:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e408:	f7ff fd4f 	bl	deaa <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    e40c:	2d00      	cmp	r5, #0
    e40e:	d0ee      	beq.n	e3ee <usb_config_rx+0xa>
    e410:	4a04      	ldr	r2, [pc, #16]	; (e424 <usb_config_rx+0x40>)
    e412:	2301      	movs	r3, #1
    e414:	40a3      	lsls	r3, r4
    e416:	6811      	ldr	r1, [r2, #0]
    e418:	430b      	orrs	r3, r1
    e41a:	6013      	str	r3, [r2, #0]
    e41c:	e7e7      	b.n	e3ee <usb_config_rx+0xa>
    e41e:	bf00      	nop
    e420:	20000000 	.word	0x20000000
    e424:	20004fec 	.word	0x20004fec

0000e428 <usb_config_tx>:
{
    e428:	b538      	push	{r3, r4, r5, lr}
    e42a:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e42c:	3802      	subs	r0, #2
    e42e:	2802      	cmp	r0, #2
    e430:	d900      	bls.n	e434 <usb_config_tx+0xc>
}
    e432:	bd38      	pop	{r3, r4, r5, pc}
    e434:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e436:	fab2 fc82 	clz	ip, r2
    e43a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e43e:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e440:	4809      	ldr	r0, [pc, #36]	; (e468 <usb_config_tx+0x40>)
    e442:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e446:	461a      	mov	r2, r3
    e448:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e44c:	3040      	adds	r0, #64	; 0x40
    e44e:	f7ff fd2c 	bl	deaa <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e452:	2d00      	cmp	r5, #0
    e454:	d0ed      	beq.n	e432 <usb_config_tx+0xa>
    e456:	4a05      	ldr	r2, [pc, #20]	; (e46c <usb_config_tx+0x44>)
    e458:	3410      	adds	r4, #16
    e45a:	2301      	movs	r3, #1
    e45c:	40a3      	lsls	r3, r4
    e45e:	6811      	ldr	r1, [r2, #0]
    e460:	430b      	orrs	r3, r1
    e462:	6013      	str	r3, [r2, #0]
    e464:	e7e5      	b.n	e432 <usb_config_tx+0xa>
    e466:	bf00      	nop
    e468:	20000000 	.word	0x20000000
    e46c:	20004fec 	.word	0x20004fec

0000e470 <usb_prepare_transfer>:
{
    e470:	b410      	push	{r4}
	transfer->next = 1;
    e472:	2401      	movs	r4, #1
    e474:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
    e476:	0412      	lsls	r2, r2, #16
    e478:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e47c:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
    e47e:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    e480:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    e484:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    e486:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
    e48a:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    e48c:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
    e490:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    e492:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    e496:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
    e498:	61c3      	str	r3, [r0, #28]
}
    e49a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e49e:	4770      	bx	lr

0000e4a0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    e4a0:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e4a2:	1e83      	subs	r3, r0, #2
    e4a4:	2b02      	cmp	r3, #2
    e4a6:	d900      	bls.n	e4aa <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e4a8:	bd08      	pop	{r3, pc}
    e4aa:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
    e4ac:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e4b0:	4b04      	ldr	r3, [pc, #16]	; (e4c4 <usb_transmit+0x24>)
    e4b2:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e4b6:	2301      	movs	r3, #1
    e4b8:	fa03 f101 	lsl.w	r1, r3, r1
    e4bc:	3040      	adds	r0, #64	; 0x40
    e4be:	f7ff fc95 	bl	ddec <schedule_transfer>
    e4c2:	e7f1      	b.n	e4a8 <usb_transmit+0x8>
    e4c4:	20000000 	.word	0x20000000

0000e4c8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    e4c8:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e4ca:	1e83      	subs	r3, r0, #2
    e4cc:	2b02      	cmp	r3, #2
    e4ce:	d900      	bls.n	e4d2 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e4d0:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
    e4d2:	460a      	mov	r2, r1
    e4d4:	2101      	movs	r1, #1
    e4d6:	4081      	lsls	r1, r0
    e4d8:	4b02      	ldr	r3, [pc, #8]	; (e4e4 <usb_receive+0x1c>)
    e4da:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e4de:	f7ff fc85 	bl	ddec <schedule_transfer>
    e4e2:	e7f5      	b.n	e4d0 <usb_receive+0x8>
    e4e4:	20000000 	.word	0x20000000

0000e4e8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    e4e8:	6840      	ldr	r0, [r0, #4]
#endif
}
    e4ea:	4770      	bx	lr

0000e4ec <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e4ec:	b500      	push	{lr}
    e4ee:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e4f0:	4b10      	ldr	r3, [pc, #64]	; (e534 <usb_init_serialnumber+0x48>)
    e4f2:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
    e4f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e4fa:	4b0f      	ldr	r3, [pc, #60]	; (e538 <usb_init_serialnumber+0x4c>)
    e4fc:	4298      	cmp	r0, r3
    e4fe:	d202      	bcs.n	e506 <usb_init_serialnumber+0x1a>
    e500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e504:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e506:	220a      	movs	r2, #10
    e508:	a901      	add	r1, sp, #4
    e50a:	f7fe fe13 	bl	d134 <ultoa>
	for (i=0; i<10; i++) {
    e50e:	a901      	add	r1, sp, #4
    e510:	480a      	ldr	r0, [pc, #40]	; (e53c <usb_init_serialnumber+0x50>)
    e512:	2300      	movs	r3, #0
		char c = buf[i];
    e514:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
    e518:	b122      	cbz	r2, e524 <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
    e51a:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e51e:	3301      	adds	r3, #1
    e520:	2b0a      	cmp	r3, #10
    e522:	d1f7      	bne.n	e514 <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e524:	3301      	adds	r3, #1
    e526:	005b      	lsls	r3, r3, #1
    e528:	4a04      	ldr	r2, [pc, #16]	; (e53c <usb_init_serialnumber+0x50>)
    e52a:	7013      	strb	r3, [r2, #0]
}
    e52c:	b005      	add	sp, #20
    e52e:	f85d fb04 	ldr.w	pc, [sp], #4
    e532:	bf00      	nop
    e534:	401f4400 	.word	0x401f4400
    e538:	00989680 	.word	0x00989680
    e53c:	200038bc 	.word	0x200038bc

0000e540 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e540:	b508      	push	{r3, lr}
    e542:	f000 fa15 	bl	e970 <usb_serial_flush_input>
    e546:	bd08      	pop	{r3, pc}

0000e548 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    e548:	b508      	push	{r3, lr}
    e54a:	f000 f9e1 	bl	e910 <usb_serial_peekchar>
    e54e:	bd08      	pop	{r3, pc}

0000e550 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    e550:	b508      	push	{r3, lr}
    e552:	f000 fa3f 	bl	e9d4 <usb_serial_getchar>
    e556:	bd08      	pop	{r3, pc}

0000e558 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e558:	b508      	push	{r3, lr}
    e55a:	f000 f9fd 	bl	e958 <usb_serial_available>
    e55e:	bd08      	pop	{r3, pc}

0000e560 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e560:	b508      	push	{r3, lr}
    e562:	f000 fb55 	bl	ec10 <usb_serial_flush_output>
    e566:	bd08      	pop	{r3, pc}

0000e568 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e568:	b508      	push	{r3, lr}
    e56a:	f000 fb2b 	bl	ebc4 <usb_serial_write_buffer_free>
    e56e:	bd08      	pop	{r3, pc}

0000e570 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e570:	b508      	push	{r3, lr}
    e572:	4608      	mov	r0, r1
    e574:	4611      	mov	r1, r2
    e576:	f000 fa3d 	bl	e9f4 <usb_serial_write>
    e57a:	bd08      	pop	{r3, pc}

0000e57c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e57c:	b508      	push	{r3, lr}
    e57e:	4608      	mov	r0, r1
    e580:	f000 fb14 	bl	ebac <usb_serial_putchar>
    e584:	bd08      	pop	{r3, pc}
	...

0000e588 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    e588:	4b20      	ldr	r3, [pc, #128]	; (e60c <usb_serial_flush_callback+0x84>)
    e58a:	781b      	ldrb	r3, [r3, #0]
    e58c:	2b00      	cmp	r3, #0
    e58e:	d13b      	bne.n	e608 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
    e590:	4b1f      	ldr	r3, [pc, #124]	; (e610 <usb_serial_flush_callback+0x88>)
    e592:	781b      	ldrb	r3, [r3, #0]
    e594:	2b00      	cmp	r3, #0
    e596:	d037      	beq.n	e608 <usb_serial_flush_callback+0x80>
{
    e598:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    e59a:	4b1e      	ldr	r3, [pc, #120]	; (e614 <usb_serial_flush_callback+0x8c>)
    e59c:	881d      	ldrh	r5, [r3, #0]
    e59e:	b905      	cbnz	r5, e5a2 <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
    e5a0:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    e5a2:	4a1d      	ldr	r2, [pc, #116]	; (e618 <usb_serial_flush_callback+0x90>)
    e5a4:	7811      	ldrb	r1, [r2, #0]
    e5a6:	4e1d      	ldr	r6, [pc, #116]	; (e61c <usb_serial_flush_callback+0x94>)
    e5a8:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e5ac:	4c1c      	ldr	r4, [pc, #112]	; (e620 <usb_serial_flush_callback+0x98>)
    e5ae:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    e5b2:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e5b6:	2300      	movs	r3, #0
    e5b8:	462a      	mov	r2, r5
    e5ba:	4621      	mov	r1, r4
    e5bc:	4630      	mov	r0, r6
    e5be:	f7ff ff57 	bl	e470 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e5c2:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    e5c4:	1962      	adds	r2, r4, r5
	asm("dsb");
    e5c6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e5ca:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e5ce:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    e5d2:	3320      	adds	r3, #32
	} while (location < end_addr);
    e5d4:	429a      	cmp	r2, r3
    e5d6:	d8fa      	bhi.n	e5ce <usb_serial_flush_callback+0x46>
	asm("dsb");
    e5d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e5dc:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e5e0:	4631      	mov	r1, r6
    e5e2:	2004      	movs	r0, #4
    e5e4:	f7ff ff5c 	bl	e4a0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e5e8:	4b0b      	ldr	r3, [pc, #44]	; (e618 <usb_serial_flush_callback+0x90>)
    e5ea:	781b      	ldrb	r3, [r3, #0]
    e5ec:	3301      	adds	r3, #1
    e5ee:	b2db      	uxtb	r3, r3
    e5f0:	2b03      	cmp	r3, #3
    e5f2:	d805      	bhi.n	e600 <usb_serial_flush_callback+0x78>
    e5f4:	4a08      	ldr	r2, [pc, #32]	; (e618 <usb_serial_flush_callback+0x90>)
    e5f6:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    e5f8:	4b06      	ldr	r3, [pc, #24]	; (e614 <usb_serial_flush_callback+0x8c>)
    e5fa:	2200      	movs	r2, #0
    e5fc:	801a      	strh	r2, [r3, #0]
    e5fe:	e7cf      	b.n	e5a0 <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e600:	4b05      	ldr	r3, [pc, #20]	; (e618 <usb_serial_flush_callback+0x90>)
    e602:	2200      	movs	r2, #0
    e604:	701a      	strb	r2, [r3, #0]
    e606:	e7f7      	b.n	e5f8 <usb_serial_flush_callback+0x70>
    e608:	4770      	bx	lr
    e60a:	bf00      	nop
    e60c:	2000533e 	.word	0x2000533e
    e610:	20005340 	.word	0x20005340
    e614:	20005322 	.word	0x20005322
    e618:	2000533d 	.word	0x2000533d
    e61c:	20004000 	.word	0x20004000
    e620:	20201080 	.word	0x20201080

0000e624 <rx_queue_transfer>:
{
    e624:	b570      	push	{r4, r5, r6, lr}
    e626:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e628:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e62c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    e630:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    e634:	4c13      	ldr	r4, [pc, #76]	; (e684 <rx_queue_transfer+0x60>)
    e636:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e63a:	4d13      	ldr	r5, [pc, #76]	; (e688 <rx_queue_transfer+0x64>)
    e63c:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    e640:	4e12      	ldr	r6, [pc, #72]	; (e68c <rx_queue_transfer+0x68>)
    e642:	8832      	ldrh	r2, [r6, #0]
    e644:	4621      	mov	r1, r4
    e646:	4628      	mov	r0, r5
    e648:	f7ff ff12 	bl	e470 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e64c:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
    e64e:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    e650:	4422      	add	r2, r4
	asm("dsb");
    e652:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e656:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e65a:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
    e65e:	3320      	adds	r3, #32
	} while (location < end_addr);
    e660:	429a      	cmp	r2, r3
    e662:	d8fa      	bhi.n	e65a <rx_queue_transfer+0x36>
	asm("dsb");
    e664:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e668:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    e66c:	4629      	mov	r1, r5
    e66e:	2003      	movs	r0, #3
    e670:	f7ff ff2a 	bl	e4c8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e674:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e678:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e67c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e680:	bd70      	pop	{r4, r5, r6, pc}
    e682:	bf00      	nop
    e684:	20200080 	.word	0x20200080
    e688:	20003f00 	.word	0x20003f00
    e68c:	20005320 	.word	0x20005320

0000e690 <rx_event>:
{
    e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e692:	6843      	ldr	r3, [r0, #4]
    e694:	4a23      	ldr	r2, [pc, #140]	; (e724 <rx_event+0x94>)
    e696:	8814      	ldrh	r4, [r2, #0]
    e698:	f3c3 430e 	ubfx	r3, r3, #16, #15
    e69c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
    e69e:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
    e6a0:	2c00      	cmp	r4, #0
    e6a2:	dd3a      	ble.n	e71a <rx_event+0x8a>
		uint32_t head = rx_head;
    e6a4:	4b20      	ldr	r3, [pc, #128]	; (e728 <rx_event+0x98>)
    e6a6:	781b      	ldrb	r3, [r3, #0]
    e6a8:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
    e6aa:	4a20      	ldr	r2, [pc, #128]	; (e72c <rx_event+0x9c>)
    e6ac:	7812      	ldrb	r2, [r2, #0]
    e6ae:	b2d2      	uxtb	r2, r2
    e6b0:	4293      	cmp	r3, r2
    e6b2:	d008      	beq.n	e6c6 <rx_event+0x36>
			uint32_t ii = rx_list[head];
    e6b4:	4a1e      	ldr	r2, [pc, #120]	; (e730 <rx_event+0xa0>)
    e6b6:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
    e6b8:	4a1e      	ldr	r2, [pc, #120]	; (e734 <rx_event+0xa4>)
    e6ba:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    e6be:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
    e6c2:	4294      	cmp	r4, r2
    e6c4:	d914      	bls.n	e6f0 <rx_event+0x60>
		rx_count[i] = len;
    e6c6:	4a1b      	ldr	r2, [pc, #108]	; (e734 <rx_event+0xa4>)
    e6c8:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
    e6cc:	4a1a      	ldr	r2, [pc, #104]	; (e738 <rx_event+0xa8>)
    e6ce:	2100      	movs	r1, #0
    e6d0:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    e6d4:	3301      	adds	r3, #1
    e6d6:	2b09      	cmp	r3, #9
    e6d8:	bf28      	it	cs
    e6da:	460b      	movcs	r3, r1
		rx_list[head] = i;
    e6dc:	4a14      	ldr	r2, [pc, #80]	; (e730 <rx_event+0xa0>)
    e6de:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
    e6e0:	b2db      	uxtb	r3, r3
    e6e2:	4a11      	ldr	r2, [pc, #68]	; (e728 <rx_event+0x98>)
    e6e4:	7013      	strb	r3, [r2, #0]
		rx_available += len;
    e6e6:	4b15      	ldr	r3, [pc, #84]	; (e73c <rx_event+0xac>)
    e6e8:	681a      	ldr	r2, [r3, #0]
    e6ea:	4414      	add	r4, r2
    e6ec:	601c      	str	r4, [r3, #0]
}
    e6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e6f0:	eb06 2047 	add.w	r0, r6, r7, lsl #9
    e6f4:	4b12      	ldr	r3, [pc, #72]	; (e740 <rx_event+0xb0>)
    e6f6:	4622      	mov	r2, r4
    e6f8:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    e6fc:	4418      	add	r0, r3
    e6fe:	f7fe fc77 	bl	cff0 <memcpy>
				rx_count[ii] = count + len;
    e702:	4426      	add	r6, r4
    e704:	4b0b      	ldr	r3, [pc, #44]	; (e734 <rx_event+0xa4>)
    e706:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
    e70a:	4a0c      	ldr	r2, [pc, #48]	; (e73c <rx_event+0xac>)
    e70c:	6813      	ldr	r3, [r2, #0]
    e70e:	4423      	add	r3, r4
    e710:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    e712:	4628      	mov	r0, r5
    e714:	f7ff ff86 	bl	e624 <rx_queue_transfer>
				return;
    e718:	e7e9      	b.n	e6ee <rx_event+0x5e>
		rx_queue_transfer(i);
    e71a:	4628      	mov	r0, r5
    e71c:	f7ff ff82 	bl	e624 <rx_queue_transfer>
    e720:	e7e5      	b.n	e6ee <rx_event+0x5e>
    e722:	bf00      	nop
    e724:	20005320 	.word	0x20005320
    e728:	20005337 	.word	0x20005337
    e72c:	20005338 	.word	0x20005338
    e730:	2000510c 	.word	0x2000510c
    e734:	200050ec 	.word	0x200050ec
    e738:	200050fc 	.word	0x200050fc
    e73c:	200050e8 	.word	0x200050e8
    e740:	20200080 	.word	0x20200080

0000e744 <usb_serial_reset>:
}
    e744:	4770      	bx	lr
	...

0000e748 <usb_serial_configure>:
{
    e748:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    e74a:	4b2a      	ldr	r3, [pc, #168]	; (e7f4 <usb_serial_configure+0xac>)
    e74c:	781b      	ldrb	r3, [r3, #0]
    e74e:	f013 0fff 	tst.w	r3, #255	; 0xff
    e752:	bf0c      	ite	eq
    e754:	2340      	moveq	r3, #64	; 0x40
    e756:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    e75a:	4d27      	ldr	r5, [pc, #156]	; (e7f8 <usb_serial_configure+0xb0>)
    e75c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    e75e:	4e27      	ldr	r6, [pc, #156]	; (e7fc <usb_serial_configure+0xb4>)
    e760:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e762:	2280      	movs	r2, #128	; 0x80
    e764:	2100      	movs	r1, #0
    e766:	4826      	ldr	r0, [pc, #152]	; (e800 <usb_serial_configure+0xb8>)
    e768:	f002 fd0c 	bl	11184 <memset>
	tx_head = 0;
    e76c:	2400      	movs	r4, #0
    e76e:	4b25      	ldr	r3, [pc, #148]	; (e804 <usb_serial_configure+0xbc>)
    e770:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
    e772:	4b25      	ldr	r3, [pc, #148]	; (e808 <usb_serial_configure+0xc0>)
    e774:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e776:	f44f 7280 	mov.w	r2, #256	; 0x100
    e77a:	4621      	mov	r1, r4
    e77c:	4823      	ldr	r0, [pc, #140]	; (e80c <usb_serial_configure+0xc4>)
    e77e:	f002 fd01 	bl	11184 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    e782:	4b23      	ldr	r3, [pc, #140]	; (e810 <usb_serial_configure+0xc8>)
    e784:	601c      	str	r4, [r3, #0]
    e786:	605c      	str	r4, [r3, #4]
    e788:	609c      	str	r4, [r3, #8]
    e78a:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
    e78c:	4b21      	ldr	r3, [pc, #132]	; (e814 <usb_serial_configure+0xcc>)
    e78e:	601c      	str	r4, [r3, #0]
    e790:	605c      	str	r4, [r3, #4]
    e792:	609c      	str	r4, [r3, #8]
    e794:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
    e796:	4b20      	ldr	r3, [pc, #128]	; (e818 <usb_serial_configure+0xd0>)
    e798:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
    e79a:	4b20      	ldr	r3, [pc, #128]	; (e81c <usb_serial_configure+0xd4>)
    e79c:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
    e79e:	4b20      	ldr	r3, [pc, #128]	; (e820 <usb_serial_configure+0xd8>)
    e7a0:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e7a2:	4623      	mov	r3, r4
    e7a4:	4622      	mov	r2, r4
    e7a6:	2110      	movs	r1, #16
    e7a8:	2002      	movs	r0, #2
    e7aa:	f7ff fe3d 	bl	e428 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    e7ae:	4b1d      	ldr	r3, [pc, #116]	; (e824 <usb_serial_configure+0xdc>)
    e7b0:	4622      	mov	r2, r4
    e7b2:	8831      	ldrh	r1, [r6, #0]
    e7b4:	2003      	movs	r0, #3
    e7b6:	f7ff fe15 	bl	e3e4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    e7ba:	4623      	mov	r3, r4
    e7bc:	2201      	movs	r2, #1
    e7be:	8829      	ldrh	r1, [r5, #0]
    e7c0:	2004      	movs	r0, #4
    e7c2:	f7ff fe31 	bl	e428 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    e7c6:	4620      	mov	r0, r4
    e7c8:	f7ff ff2c 	bl	e624 <rx_queue_transfer>
    e7cc:	3401      	adds	r4, #1
    e7ce:	2c08      	cmp	r4, #8
    e7d0:	d1f9      	bne.n	e7c6 <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
    e7d2:	4b15      	ldr	r3, [pc, #84]	; (e828 <usb_serial_configure+0xe0>)
    e7d4:	4a15      	ldr	r2, [pc, #84]	; (e82c <usb_serial_configure+0xe4>)
    e7d6:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    e7d8:	4b15      	ldr	r3, [pc, #84]	; (e830 <usb_serial_configure+0xe8>)
    e7da:	2200      	movs	r2, #0
    e7dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e7e0:	224a      	movs	r2, #74	; 0x4a
    e7e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e7e6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    e7ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e7ee:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    e7f2:	bd70      	pop	{r4, r5, r6, pc}
    e7f4:	20005341 	.word	0x20005341
    e7f8:	20005324 	.word	0x20005324
    e7fc:	20005320 	.word	0x20005320
    e800:	20004000 	.word	0x20004000
    e804:	2000533d 	.word	0x2000533d
    e808:	20005322 	.word	0x20005322
    e80c:	20003f00 	.word	0x20003f00
    e810:	200050ec 	.word	0x200050ec
    e814:	200050fc 	.word	0x200050fc
    e818:	20005337 	.word	0x20005337
    e81c:	20005338 	.word	0x20005338
    e820:	200050e8 	.word	0x200050e8
    e824:	0000e691 	.word	0x0000e691
    e828:	20005308 	.word	0x20005308
    e82c:	0000e589 	.word	0x0000e589
    e830:	402e0000 	.word	0x402e0000

0000e834 <usb_serial_read>:
{
    e834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e838:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e83c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e840:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
    e844:	4b2b      	ldr	r3, [pc, #172]	; (e8f4 <usb_serial_read+0xc0>)
    e846:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    e848:	468a      	mov	sl, r1
    e84a:	2900      	cmp	r1, #0
    e84c:	d045      	beq.n	e8da <usb_serial_read+0xa6>
    e84e:	4681      	mov	r9, r0
    e850:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    e852:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
    e854:	f8df b0b4 	ldr.w	fp, [pc, #180]	; e90c <usb_serial_read+0xd8>
    e858:	e015      	b.n	e886 <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e85a:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    e85e:	462a      	mov	r2, r5
    e860:	4b25      	ldr	r3, [pc, #148]	; (e8f8 <usb_serial_read+0xc4>)
    e862:	4419      	add	r1, r3
    e864:	4648      	mov	r0, r9
    e866:	f7fe fbc3 	bl	cff0 <memcpy>
			p += avail;
    e86a:	44a9      	add	r9, r5
			rx_available -= avail;
    e86c:	4a23      	ldr	r2, [pc, #140]	; (e8fc <usb_serial_read+0xc8>)
    e86e:	6813      	ldr	r3, [r2, #0]
    e870:	1b5b      	subs	r3, r3, r5
    e872:	6013      	str	r3, [r2, #0]
			count += avail;
    e874:	442f      	add	r7, r5
			rx_tail = tail;
    e876:	b2e3      	uxtb	r3, r4
    e878:	4a1e      	ldr	r2, [pc, #120]	; (e8f4 <usb_serial_read+0xc0>)
    e87a:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    e87c:	4630      	mov	r0, r6
    e87e:	f7ff fed1 	bl	e624 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    e882:	45ba      	cmp	sl, r7
    e884:	d934      	bls.n	e8f0 <usb_serial_read+0xbc>
    e886:	f89b 3000 	ldrb.w	r3, [fp]
    e88a:	b2db      	uxtb	r3, r3
    e88c:	42a3      	cmp	r3, r4
    e88e:	d02d      	beq.n	e8ec <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
    e890:	3401      	adds	r4, #1
    e892:	2c09      	cmp	r4, #9
    e894:	bf28      	it	cs
    e896:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e898:	4b19      	ldr	r3, [pc, #100]	; (e900 <usb_serial_read+0xcc>)
    e89a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
    e89c:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
    e8a0:	4b18      	ldr	r3, [pc, #96]	; (e904 <usb_serial_read+0xd0>)
    e8a2:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
    e8a6:	4b18      	ldr	r3, [pc, #96]	; (e908 <usb_serial_read+0xd4>)
    e8a8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    e8ac:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
    e8ae:	45a8      	cmp	r8, r5
    e8b0:	d2d3      	bcs.n	e85a <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e8b2:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    e8b6:	4642      	mov	r2, r8
    e8b8:	4b0f      	ldr	r3, [pc, #60]	; (e8f8 <usb_serial_read+0xc4>)
    e8ba:	4419      	add	r1, r3
    e8bc:	4648      	mov	r0, r9
    e8be:	f7fe fb97 	bl	cff0 <memcpy>
			rx_available -= len;
    e8c2:	4a0e      	ldr	r2, [pc, #56]	; (e8fc <usb_serial_read+0xc8>)
    e8c4:	6813      	ldr	r3, [r2, #0]
    e8c6:	eba3 030a 	sub.w	r3, r3, sl
    e8ca:	443b      	add	r3, r7
    e8cc:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
    e8ce:	4b0d      	ldr	r3, [pc, #52]	; (e904 <usb_serial_read+0xd0>)
    e8d0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    e8d4:	4490      	add	r8, r2
    e8d6:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e8da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e8de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e8e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e8e6:	4650      	mov	r0, sl
    e8e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8ec:	46ba      	mov	sl, r7
    e8ee:	e7f4      	b.n	e8da <usb_serial_read+0xa6>
			count += avail;
    e8f0:	46ba      	mov	sl, r7
    e8f2:	e7f2      	b.n	e8da <usb_serial_read+0xa6>
    e8f4:	20005338 	.word	0x20005338
    e8f8:	20200080 	.word	0x20200080
    e8fc:	200050e8 	.word	0x200050e8
    e900:	2000510c 	.word	0x2000510c
    e904:	200050fc 	.word	0x200050fc
    e908:	200050ec 	.word	0x200050ec
    e90c:	20005337 	.word	0x20005337

0000e910 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    e910:	4b0c      	ldr	r3, [pc, #48]	; (e944 <usb_serial_peekchar+0x34>)
    e912:	781b      	ldrb	r3, [r3, #0]
    e914:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    e916:	4a0c      	ldr	r2, [pc, #48]	; (e948 <usb_serial_peekchar+0x38>)
    e918:	7812      	ldrb	r2, [r2, #0]
    e91a:	b2d2      	uxtb	r2, r2
    e91c:	4293      	cmp	r3, r2
    e91e:	d00d      	beq.n	e93c <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
    e920:	3301      	adds	r3, #1
    e922:	2b09      	cmp	r3, #9
    e924:	bf28      	it	cs
    e926:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    e928:	4a08      	ldr	r2, [pc, #32]	; (e94c <usb_serial_peekchar+0x3c>)
    e92a:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e92c:	4b08      	ldr	r3, [pc, #32]	; (e950 <usb_serial_peekchar+0x40>)
    e92e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    e932:	4b08      	ldr	r3, [pc, #32]	; (e954 <usb_serial_peekchar+0x44>)
    e934:	eb03 2342 	add.w	r3, r3, r2, lsl #9
    e938:	5c58      	ldrb	r0, [r3, r1]
    e93a:	4770      	bx	lr
	if (tail == rx_head) return -1;
    e93c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e940:	4770      	bx	lr
    e942:	bf00      	nop
    e944:	20005338 	.word	0x20005338
    e948:	20005337 	.word	0x20005337
    e94c:	2000510c 	.word	0x2000510c
    e950:	200050fc 	.word	0x200050fc
    e954:	20200080 	.word	0x20200080

0000e958 <usb_serial_available>:
{
    e958:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    e95a:	4b04      	ldr	r3, [pc, #16]	; (e96c <usb_serial_available+0x14>)
    e95c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    e95e:	b10c      	cbz	r4, e964 <usb_serial_available+0xc>
}
    e960:	4620      	mov	r0, r4
    e962:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    e964:	f000 f9a4 	bl	ecb0 <yield>
    e968:	e7fa      	b.n	e960 <usb_serial_available+0x8>
    e96a:	bf00      	nop
    e96c:	200050e8 	.word	0x200050e8

0000e970 <usb_serial_flush_input>:
{
    e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    e972:	4b12      	ldr	r3, [pc, #72]	; (e9bc <usb_serial_flush_input+0x4c>)
    e974:	781c      	ldrb	r4, [r3, #0]
    e976:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    e978:	4b11      	ldr	r3, [pc, #68]	; (e9c0 <usb_serial_flush_input+0x50>)
    e97a:	781b      	ldrb	r3, [r3, #0]
    e97c:	b2db      	uxtb	r3, r3
    e97e:	429c      	cmp	r4, r3
    e980:	d01a      	beq.n	e9b8 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
    e982:	4f10      	ldr	r7, [pc, #64]	; (e9c4 <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
    e984:	4d10      	ldr	r5, [pc, #64]	; (e9c8 <usb_serial_flush_input+0x58>)
    e986:	4e11      	ldr	r6, [pc, #68]	; (e9cc <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
    e988:	3401      	adds	r4, #1
    e98a:	2c09      	cmp	r4, #9
    e98c:	bf28      	it	cs
    e98e:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e990:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
    e992:	682b      	ldr	r3, [r5, #0]
    e994:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
    e998:	490d      	ldr	r1, [pc, #52]	; (e9d0 <usb_serial_flush_input+0x60>)
    e99a:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    e99e:	1a52      	subs	r2, r2, r1
    e9a0:	1a9b      	subs	r3, r3, r2
    e9a2:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
    e9a4:	f7ff fe3e 	bl	e624 <rx_queue_transfer>
		rx_tail = tail;
    e9a8:	b2e2      	uxtb	r2, r4
    e9aa:	4b04      	ldr	r3, [pc, #16]	; (e9bc <usb_serial_flush_input+0x4c>)
    e9ac:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
    e9ae:	4b04      	ldr	r3, [pc, #16]	; (e9c0 <usb_serial_flush_input+0x50>)
    e9b0:	781b      	ldrb	r3, [r3, #0]
    e9b2:	b2db      	uxtb	r3, r3
    e9b4:	42a3      	cmp	r3, r4
    e9b6:	d1e7      	bne.n	e988 <usb_serial_flush_input+0x18>
}
    e9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e9ba:	bf00      	nop
    e9bc:	20005338 	.word	0x20005338
    e9c0:	20005337 	.word	0x20005337
    e9c4:	2000510c 	.word	0x2000510c
    e9c8:	200050e8 	.word	0x200050e8
    e9cc:	200050ec 	.word	0x200050ec
    e9d0:	200050fc 	.word	0x200050fc

0000e9d4 <usb_serial_getchar>:
{
    e9d4:	b500      	push	{lr}
    e9d6:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    e9d8:	2101      	movs	r1, #1
    e9da:	f10d 0007 	add.w	r0, sp, #7
    e9de:	f7ff ff29 	bl	e834 <usb_serial_read>
    e9e2:	b120      	cbz	r0, e9ee <usb_serial_getchar+0x1a>
    e9e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    e9e8:	b003      	add	sp, #12
    e9ea:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    e9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e9f2:	e7f9      	b.n	e9e8 <usb_serial_getchar+0x14>

0000e9f4 <usb_serial_write>:
{
    e9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9f8:	b085      	sub	sp, #20
    e9fa:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
    e9fc:	4b62      	ldr	r3, [pc, #392]	; (eb88 <usb_serial_write+0x194>)
    e9fe:	781b      	ldrb	r3, [r3, #0]
    ea00:	2b00      	cmp	r3, #0
    ea02:	f000 80bd 	beq.w	eb80 <usb_serial_write+0x18c>
    ea06:	468b      	mov	fp, r1
	while (size > 0) {
    ea08:	2900      	cmp	r1, #0
    ea0a:	d047      	beq.n	ea9c <usb_serial_write+0xa8>
	uint32_t sent=0;
    ea0c:	2300      	movs	r3, #0
    ea0e:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    ea10:	4c5e      	ldr	r4, [pc, #376]	; (eb8c <usb_serial_write+0x198>)
    ea12:	2601      	movs	r6, #1
    ea14:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
    ea18:	f8df 818c 	ldr.w	r8, [pc, #396]	; eba8 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
    ea1c:	f8df a184 	ldr.w	sl, [pc, #388]	; eba4 <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
    ea20:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ea24:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    ea26:	4b5a      	ldr	r3, [pc, #360]	; (eb90 <usb_serial_write+0x19c>)
    ea28:	f893 9000 	ldrb.w	r9, [r3]
    ea2c:	4b59      	ldr	r3, [pc, #356]	; (eb94 <usb_serial_write+0x1a0>)
    ea2e:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
    ea32:	4b59      	ldr	r3, [pc, #356]	; (eb98 <usb_serial_write+0x1a4>)
    ea34:	881b      	ldrh	r3, [r3, #0]
    ea36:	b94b      	cbnz	r3, ea4c <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
    ea38:	2700      	movs	r7, #0
		int waiting=0;
    ea3a:	463d      	mov	r5, r7
    ea3c:	e043      	b.n	eac6 <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
    ea3e:	4b56      	ldr	r3, [pc, #344]	; (eb98 <usb_serial_write+0x1a4>)
    ea40:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ea44:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
    ea46:	2300      	movs	r3, #0
    ea48:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ea4c:	4b50      	ldr	r3, [pc, #320]	; (eb90 <usb_serial_write+0x19c>)
    ea4e:	781b      	ldrb	r3, [r3, #0]
    ea50:	02df      	lsls	r7, r3, #11
    ea52:	4a51      	ldr	r2, [pc, #324]	; (eb98 <usb_serial_write+0x1a4>)
    ea54:	8815      	ldrh	r5, [r2, #0]
    ea56:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
    ea5a:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
    ea5e:	4b4f      	ldr	r3, [pc, #316]	; (eb9c <usb_serial_write+0x1a8>)
    ea60:	4418      	add	r0, r3
		if (size >= tx_available) {
    ea62:	455d      	cmp	r5, fp
    ea64:	d947      	bls.n	eaf6 <usb_serial_write+0x102>
			memcpy(txdata, data, size);
    ea66:	465a      	mov	r2, fp
    ea68:	9903      	ldr	r1, [sp, #12]
    ea6a:	f7fe fac1 	bl	cff0 <memcpy>
			tx_available -= size;
    ea6e:	eba5 050b 	sub.w	r5, r5, fp
    ea72:	4b49      	ldr	r3, [pc, #292]	; (eb98 <usb_serial_write+0x1a4>)
    ea74:	801d      	strh	r5, [r3, #0]
			sent += size;
    ea76:	9b01      	ldr	r3, [sp, #4]
    ea78:	445b      	add	r3, fp
    ea7a:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ea7c:	4b48      	ldr	r3, [pc, #288]	; (eba0 <usb_serial_write+0x1ac>)
    ea7e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    ea82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
    ea86:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
    ea8a:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    ea8e:	2300      	movs	r3, #0
    ea90:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    ea92:	f1bb 0f00 	cmp.w	fp, #0
    ea96:	d1c3      	bne.n	ea20 <usb_serial_write+0x2c>
    ea98:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
    ea9c:	4658      	mov	r0, fp
    ea9e:	e070      	b.n	eb82 <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
    eaa0:	f89a 3000 	ldrb.w	r3, [sl]
    eaa4:	b9f3      	cbnz	r3, eae4 <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    eaa6:	f8d8 3000 	ldr.w	r3, [r8]
    eaaa:	1bdb      	subs	r3, r3, r7
    eaac:	2b78      	cmp	r3, #120	; 0x78
    eaae:	d81b      	bhi.n	eae8 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
    eab0:	4b35      	ldr	r3, [pc, #212]	; (eb88 <usb_serial_write+0x194>)
    eab2:	781b      	ldrb	r3, [r3, #0]
    eab4:	b1eb      	cbz	r3, eaf2 <usb_serial_write+0xfe>
			yield();
    eab6:	f000 f8fb 	bl	ecb0 <yield>
			tx_noautoflush = 1;
    eaba:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
    eabc:	4635      	mov	r5, r6
    eabe:	4b36      	ldr	r3, [pc, #216]	; (eb98 <usb_serial_write+0x1a4>)
    eac0:	881b      	ldrh	r3, [r3, #0]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d1c2      	bne.n	ea4c <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
    eac6:	4648      	mov	r0, r9
    eac8:	f7ff fd0e 	bl	e4e8 <usb_transfer_status>
			if (!(status & 0x80)) {
    eacc:	f010 0f80 	tst.w	r0, #128	; 0x80
    ead0:	d0b5      	beq.n	ea3e <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
    ead2:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
    ead6:	2300      	movs	r3, #0
    ead8:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
    eada:	2d00      	cmp	r5, #0
    eadc:	d1e0      	bne.n	eaa0 <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
    eade:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
    eae2:	e7dd      	b.n	eaa0 <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
    eae4:	9801      	ldr	r0, [sp, #4]
    eae6:	e04c      	b.n	eb82 <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
    eae8:	4b2e      	ldr	r3, [pc, #184]	; (eba4 <usb_serial_write+0x1b0>)
    eaea:	2201      	movs	r2, #1
    eaec:	701a      	strb	r2, [r3, #0]
				return sent;
    eaee:	9801      	ldr	r0, [sp, #4]
    eaf0:	e047      	b.n	eb82 <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
    eaf2:	9801      	ldr	r0, [sp, #4]
    eaf4:	e045      	b.n	eb82 <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
    eaf6:	462a      	mov	r2, r5
    eaf8:	9903      	ldr	r1, [sp, #12]
    eafa:	f7fe fa79 	bl	cff0 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    eafe:	4d27      	ldr	r5, [pc, #156]	; (eb9c <usb_serial_write+0x1a8>)
    eb00:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    eb02:	2300      	movs	r3, #0
    eb04:	f44f 6200 	mov.w	r2, #2048	; 0x800
    eb08:	4629      	mov	r1, r5
    eb0a:	4648      	mov	r0, r9
    eb0c:	f7ff fcb0 	bl	e470 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    eb10:	462b      	mov	r3, r5
	asm("dsb");
    eb12:	f3bf 8f4f 	dsb	sy
    eb16:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    eb1a:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    eb1e:	428a      	cmp	r2, r1
    eb20:	bf8c      	ite	hi
    eb22:	2201      	movhi	r2, #1
    eb24:	2240      	movls	r2, #64	; 0x40
    eb26:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    eb2a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    eb2e:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    eb32:	3320      	adds	r3, #32
	} while (location < end_addr);
    eb34:	429d      	cmp	r5, r3
    eb36:	d1fa      	bne.n	eb2e <usb_serial_write+0x13a>
	asm("dsb");
    eb38:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eb3c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    eb40:	4649      	mov	r1, r9
    eb42:	2004      	movs	r0, #4
    eb44:	f7ff fcac 	bl	e4a0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eb48:	4b11      	ldr	r3, [pc, #68]	; (eb90 <usb_serial_write+0x19c>)
    eb4a:	781b      	ldrb	r3, [r3, #0]
    eb4c:	3301      	adds	r3, #1
    eb4e:	b2db      	uxtb	r3, r3
    eb50:	2b03      	cmp	r3, #3
    eb52:	d811      	bhi.n	eb78 <usb_serial_write+0x184>
    eb54:	4a0e      	ldr	r2, [pc, #56]	; (eb90 <usb_serial_write+0x19c>)
    eb56:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    eb58:	4a0f      	ldr	r2, [pc, #60]	; (eb98 <usb_serial_write+0x1a4>)
    eb5a:	8813      	ldrh	r3, [r2, #0]
    eb5c:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
    eb60:	9901      	ldr	r1, [sp, #4]
    eb62:	4419      	add	r1, r3
    eb64:	9101      	str	r1, [sp, #4]
			data += tx_available;
    eb66:	9903      	ldr	r1, [sp, #12]
    eb68:	4419      	add	r1, r3
    eb6a:	9103      	str	r1, [sp, #12]
			tx_available = 0;
    eb6c:	2300      	movs	r3, #0
    eb6e:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
    eb70:	4a0b      	ldr	r2, [pc, #44]	; (eba0 <usb_serial_write+0x1ac>)
    eb72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
    eb76:	e788      	b.n	ea8a <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eb78:	4b05      	ldr	r3, [pc, #20]	; (eb90 <usb_serial_write+0x19c>)
    eb7a:	2200      	movs	r2, #0
    eb7c:	701a      	strb	r2, [r3, #0]
    eb7e:	e7eb      	b.n	eb58 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
    eb80:	2000      	movs	r0, #0
}
    eb82:	b005      	add	sp, #20
    eb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb88:	20005340 	.word	0x20005340
    eb8c:	2000533e 	.word	0x2000533e
    eb90:	2000533d 	.word	0x2000533d
    eb94:	20004000 	.word	0x20004000
    eb98:	20005322 	.word	0x20005322
    eb9c:	20201080 	.word	0x20201080
    eba0:	402e0000 	.word	0x402e0000
    eba4:	2000533c 	.word	0x2000533c
    eba8:	200052f0 	.word	0x200052f0

0000ebac <usb_serial_putchar>:
{
    ebac:	b500      	push	{lr}
    ebae:	b083      	sub	sp, #12
    ebb0:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    ebb4:	2101      	movs	r1, #1
    ebb6:	f10d 0007 	add.w	r0, sp, #7
    ebba:	f7ff ff1b 	bl	e9f4 <usb_serial_write>
}
    ebbe:	b003      	add	sp, #12
    ebc0:	f85d fb04 	ldr.w	pc, [sp], #4

0000ebc4 <usb_serial_write_buffer_free>:
{
    ebc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
    ebc6:	4b0f      	ldr	r3, [pc, #60]	; (ec04 <usb_serial_write_buffer_free+0x40>)
    ebc8:	2201      	movs	r2, #1
    ebca:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
    ebcc:	4d0e      	ldr	r5, [pc, #56]	; (ec08 <usb_serial_write_buffer_free+0x44>)
    ebce:	2400      	movs	r4, #0
	uint32_t sum = 0;
    ebd0:	4627      	mov	r7, r4
		if (i == tx_head) continue;
    ebd2:	4e0e      	ldr	r6, [pc, #56]	; (ec0c <usb_serial_write_buffer_free+0x48>)
    ebd4:	e003      	b.n	ebde <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
    ebd6:	3401      	adds	r4, #1
    ebd8:	3520      	adds	r5, #32
    ebda:	2c04      	cmp	r4, #4
    ebdc:	d00b      	beq.n	ebf6 <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
    ebde:	7833      	ldrb	r3, [r6, #0]
    ebe0:	42a3      	cmp	r3, r4
    ebe2:	d0f8      	beq.n	ebd6 <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    ebe4:	4628      	mov	r0, r5
    ebe6:	f7ff fc7f 	bl	e4e8 <usb_transfer_status>
    ebea:	f010 0f80 	tst.w	r0, #128	; 0x80
    ebee:	bf08      	it	eq
    ebf0:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
    ebf4:	e7ef      	b.n	ebd6 <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
    ebf6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ebfa:	4b02      	ldr	r3, [pc, #8]	; (ec04 <usb_serial_write_buffer_free+0x40>)
    ebfc:	2200      	movs	r2, #0
    ebfe:	701a      	strb	r2, [r3, #0]
}
    ec00:	4638      	mov	r0, r7
    ec02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec04:	2000533e 	.word	0x2000533e
    ec08:	20004000 	.word	0x20004000
    ec0c:	2000533d 	.word	0x2000533d

0000ec10 <usb_serial_flush_output>:
	if (!usb_configuration) return;
    ec10:	4b21      	ldr	r3, [pc, #132]	; (ec98 <usb_serial_flush_output+0x88>)
    ec12:	781b      	ldrb	r3, [r3, #0]
    ec14:	2b00      	cmp	r3, #0
    ec16:	d03e      	beq.n	ec96 <usb_serial_flush_output+0x86>
{
    ec18:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    ec1a:	4b20      	ldr	r3, [pc, #128]	; (ec9c <usb_serial_flush_output+0x8c>)
    ec1c:	881d      	ldrh	r5, [r3, #0]
    ec1e:	b905      	cbnz	r5, ec22 <usb_serial_flush_output+0x12>
}
    ec20:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
    ec22:	4a1f      	ldr	r2, [pc, #124]	; (eca0 <usb_serial_flush_output+0x90>)
    ec24:	2101      	movs	r1, #1
    ec26:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    ec28:	4a1e      	ldr	r2, [pc, #120]	; (eca4 <usb_serial_flush_output+0x94>)
    ec2a:	7811      	ldrb	r1, [r2, #0]
    ec2c:	4e1e      	ldr	r6, [pc, #120]	; (eca8 <usb_serial_flush_output+0x98>)
    ec2e:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ec32:	4c1e      	ldr	r4, [pc, #120]	; (ecac <usb_serial_flush_output+0x9c>)
    ec34:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    ec38:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ec3c:	2300      	movs	r3, #0
    ec3e:	462a      	mov	r2, r5
    ec40:	4621      	mov	r1, r4
    ec42:	4630      	mov	r0, r6
    ec44:	f7ff fc14 	bl	e470 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ec48:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    ec4a:	1962      	adds	r2, r4, r5
	asm("dsb");
    ec4c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ec50:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ec54:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    ec58:	3320      	adds	r3, #32
	} while (location < end_addr);
    ec5a:	429a      	cmp	r2, r3
    ec5c:	d8fa      	bhi.n	ec54 <usb_serial_flush_output+0x44>
	asm("dsb");
    ec5e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ec62:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ec66:	4631      	mov	r1, r6
    ec68:	2004      	movs	r0, #4
    ec6a:	f7ff fc19 	bl	e4a0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ec6e:	4b0d      	ldr	r3, [pc, #52]	; (eca4 <usb_serial_flush_output+0x94>)
    ec70:	781b      	ldrb	r3, [r3, #0]
    ec72:	3301      	adds	r3, #1
    ec74:	b2db      	uxtb	r3, r3
    ec76:	2b03      	cmp	r3, #3
    ec78:	d809      	bhi.n	ec8e <usb_serial_flush_output+0x7e>
    ec7a:	4a0a      	ldr	r2, [pc, #40]	; (eca4 <usb_serial_flush_output+0x94>)
    ec7c:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    ec7e:	2300      	movs	r3, #0
    ec80:	4a06      	ldr	r2, [pc, #24]	; (ec9c <usb_serial_flush_output+0x8c>)
    ec82:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
    ec84:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ec88:	4a05      	ldr	r2, [pc, #20]	; (eca0 <usb_serial_flush_output+0x90>)
    ec8a:	7013      	strb	r3, [r2, #0]
    ec8c:	e7c8      	b.n	ec20 <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ec8e:	4b05      	ldr	r3, [pc, #20]	; (eca4 <usb_serial_flush_output+0x94>)
    ec90:	2200      	movs	r2, #0
    ec92:	701a      	strb	r2, [r3, #0]
    ec94:	e7f3      	b.n	ec7e <usb_serial_flush_output+0x6e>
    ec96:	4770      	bx	lr
    ec98:	20005340 	.word	0x20005340
    ec9c:	20005322 	.word	0x20005322
    eca0:	2000533e 	.word	0x2000533e
    eca4:	2000533d 	.word	0x2000533d
    eca8:	20004000 	.word	0x20004000
    ecac:	20201080 	.word	0x20201080

0000ecb0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    ecb2:	4b39      	ldr	r3, [pc, #228]	; (ed98 <yield+0xe8>)
    ecb4:	781b      	ldrb	r3, [r3, #0]
    ecb6:	b1ab      	cbz	r3, ece4 <yield+0x34>
	if (running) return; // TODO: does this need to be atomic?
    ecb8:	4a38      	ldr	r2, [pc, #224]	; (ed9c <yield+0xec>)
    ecba:	7812      	ldrb	r2, [r2, #0]
    ecbc:	b992      	cbnz	r2, ece4 <yield+0x34>
	running = 1;
    ecbe:	4a37      	ldr	r2, [pc, #220]	; (ed9c <yield+0xec>)
    ecc0:	2101      	movs	r1, #1
    ecc2:	7011      	strb	r1, [r2, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    ecc4:	f013 0f01 	tst.w	r3, #1
    ecc8:	d10d      	bne.n	ece6 <yield+0x36>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    ecca:	4b33      	ldr	r3, [pc, #204]	; (ed98 <yield+0xe8>)
    eccc:	781b      	ldrb	r3, [r3, #0]
    ecce:	f013 0f02 	tst.w	r3, #2
    ecd2:	d118      	bne.n	ed06 <yield+0x56>

	running = 0;
    ecd4:	4b31      	ldr	r3, [pc, #196]	; (ed9c <yield+0xec>)
    ecd6:	2200      	movs	r2, #0
    ecd8:	701a      	strb	r2, [r3, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    ecda:	4b2f      	ldr	r3, [pc, #188]	; (ed98 <yield+0xe8>)
    ecdc:	781b      	ldrb	r3, [r3, #0]
    ecde:	f013 0f04 	tst.w	r3, #4
    ece2:	d12a      	bne.n	ed3a <yield+0x8a>
	
};
    ece4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        virtual int available() { return usb_serial_available(); }
    ece6:	f7ff fe37 	bl	e958 <usb_serial_available>
		if (Serial.available()) serialEvent();
    ecea:	b948      	cbnz	r0, ed00 <yield+0x50>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    ecec:	4b2c      	ldr	r3, [pc, #176]	; (eda0 <yield+0xf0>)
    ecee:	781b      	ldrb	r3, [r3, #0]
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	d0ea      	beq.n	ecca <yield+0x1a>
    ecf4:	4a28      	ldr	r2, [pc, #160]	; (ed98 <yield+0xe8>)
    ecf6:	7813      	ldrb	r3, [r2, #0]
    ecf8:	f023 0301 	bic.w	r3, r3, #1
    ecfc:	7013      	strb	r3, [r2, #0]
    ecfe:	e7e4      	b.n	ecca <yield+0x1a>
		if (Serial.available()) serialEvent();
    ed00:	f000 f85a 	bl	edb8 <serialEvent()>
    ed04:	e7f2      	b.n	ecec <yield+0x3c>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ed06:	4b27      	ldr	r3, [pc, #156]	; (eda4 <yield+0xf4>)
    ed08:	781b      	ldrb	r3, [r3, #0]
    ed0a:	2b00      	cmp	r3, #0
    ed0c:	d0e2      	beq.n	ecd4 <yield+0x24>
    ed0e:	2400      	movs	r4, #0
			s_serials_with_serial_events[i]->doYieldCode();
    ed10:	4f25      	ldr	r7, [pc, #148]	; (eda8 <yield+0xf8>)
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ed12:	4e24      	ldr	r6, [pc, #144]	; (eda4 <yield+0xf4>)
    ed14:	e004      	b.n	ed20 <yield+0x70>
    ed16:	3401      	adds	r4, #1
    ed18:	7832      	ldrb	r2, [r6, #0]
    ed1a:	b2e3      	uxtb	r3, r4
    ed1c:	429a      	cmp	r2, r3
    ed1e:	d9d9      	bls.n	ecd4 <yield+0x24>
			s_serials_with_serial_events[i]->doYieldCode();
    ed20:	b2e3      	uxtb	r3, r4
    ed22:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    ed26:	682b      	ldr	r3, [r5, #0]
    ed28:	691b      	ldr	r3, [r3, #16]
    ed2a:	4628      	mov	r0, r5
    ed2c:	4798      	blx	r3
    ed2e:	2800      	cmp	r0, #0
    ed30:	d0f1      	beq.n	ed16 <yield+0x66>
    ed32:	696b      	ldr	r3, [r5, #20]
    ed34:	689b      	ldr	r3, [r3, #8]
    ed36:	4798      	blx	r3
    ed38:	e7ed      	b.n	ed16 <yield+0x66>
		if (!firstYield) return;  
    ed3a:	4b1c      	ldr	r3, [pc, #112]	; (edac <yield+0xfc>)
    ed3c:	681b      	ldr	r3, [r3, #0]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d0d0      	beq.n	ece4 <yield+0x34>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ed42:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    ed46:	2b00      	cmp	r3, #0
    ed48:	d1cc      	bne.n	ece4 <yield+0x34>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ed4a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    ed4e:	b672      	cpsid	i
		EventResponder *first = firstYield;
    ed50:	4b16      	ldr	r3, [pc, #88]	; (edac <yield+0xfc>)
    ed52:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ed54:	b1a0      	cbz	r0, ed80 <yield+0xd0>
		if (runningFromYield) {
    ed56:	4b16      	ldr	r3, [pc, #88]	; (edb0 <yield+0x100>)
    ed58:	781b      	ldrb	r3, [r3, #0]
    ed5a:	b9ab      	cbnz	r3, ed88 <yield+0xd8>
		runningFromYield = true;
    ed5c:	4b14      	ldr	r3, [pc, #80]	; (edb0 <yield+0x100>)
    ed5e:	2101      	movs	r1, #1
    ed60:	7019      	strb	r1, [r3, #0]
		firstYield = first->_next;
    ed62:	6943      	ldr	r3, [r0, #20]
    ed64:	4911      	ldr	r1, [pc, #68]	; (edac <yield+0xfc>)
    ed66:	600b      	str	r3, [r1, #0]
		if (firstYield) {
    ed68:	b193      	cbz	r3, ed90 <yield+0xe0>
			firstYield->_prev = nullptr;
    ed6a:	2100      	movs	r1, #0
    ed6c:	6199      	str	r1, [r3, #24]
		if (doit) __enable_irq();
    ed6e:	b902      	cbnz	r2, ed72 <yield+0xc2>
    ed70:	b662      	cpsie	i
		first->_triggered = false;
    ed72:	2400      	movs	r4, #0
    ed74:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    ed76:	6883      	ldr	r3, [r0, #8]
    ed78:	4798      	blx	r3
		runningFromYield = false;
    ed7a:	4b0d      	ldr	r3, [pc, #52]	; (edb0 <yield+0x100>)
    ed7c:	701c      	strb	r4, [r3, #0]
    ed7e:	e7b1      	b.n	ece4 <yield+0x34>
		if (doit) __enable_irq();
    ed80:	2a00      	cmp	r2, #0
    ed82:	d1af      	bne.n	ece4 <yield+0x34>
    ed84:	b662      	cpsie	i
    ed86:	e7ad      	b.n	ece4 <yield+0x34>
    ed88:	2a00      	cmp	r2, #0
    ed8a:	d1ab      	bne.n	ece4 <yield+0x34>
    ed8c:	b662      	cpsie	i
    ed8e:	e7a9      	b.n	ece4 <yield+0x34>
			lastYield = nullptr;
    ed90:	4b08      	ldr	r3, [pc, #32]	; (edb4 <yield+0x104>)
    ed92:	2100      	movs	r1, #0
    ed94:	6019      	str	r1, [r3, #0]
    ed96:	e7ea      	b.n	ed6e <yield+0xbe>
    ed98:	200038d7 	.word	0x200038d7
    ed9c:	2000532e 	.word	0x2000532e
    eda0:	6000209e 	.word	0x6000209e
    eda4:	2000532d 	.word	0x2000532d
    eda8:	20004b84 	.word	0x20004b84
    edac:	20004b74 	.word	0x20004b74
    edb0:	2000532c 	.word	0x2000532c
    edb4:	20004b80 	.word	0x20004b80

0000edb8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    edb8:	4770      	bx	lr
	...

0000edbc <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    edbc:	6803      	ldr	r3, [r0, #0]
    edbe:	b16b      	cbz	r3, eddc <smalloc_verify_pool+0x20>
    edc0:	6842      	ldr	r2, [r0, #4]
    edc2:	b16a      	cbz	r2, ede0 <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
    edc4:	4b07      	ldr	r3, [pc, #28]	; (ede4 <smalloc_verify_pool+0x28>)
    edc6:	fba3 1302 	umull	r1, r3, r3, r2
    edca:	08db      	lsrs	r3, r3, #3
    edcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    edd0:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    edd4:	bf0c      	ite	eq
    edd6:	2001      	moveq	r0, #1
    edd8:	2000      	movne	r0, #0
    edda:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    eddc:	2000      	movs	r0, #0
    edde:	4770      	bx	lr
    ede0:	2000      	movs	r0, #0
	return 1;
}
    ede2:	4770      	bx	lr
    ede4:	aaaaaaab 	.word	0xaaaaaaab

0000ede8 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    ede8:	b538      	push	{r3, r4, r5, lr}
    edea:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    edec:	f7ff ffe6 	bl	edbc <smalloc_verify_pool>
    edf0:	b9b8      	cbnz	r0, ee22 <sm_align_pool+0x3a>
    edf2:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
    edf4:	6862      	ldr	r2, [r4, #4]
    edf6:	4b0c      	ldr	r3, [pc, #48]	; (ee28 <sm_align_pool+0x40>)
    edf8:	fba3 1302 	umull	r1, r3, r3, r2
    edfc:	08db      	lsrs	r3, r3, #3
    edfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    ee02:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    ee06:	d001      	beq.n	ee0c <sm_align_pool+0x24>
    ee08:	1ad2      	subs	r2, r2, r3
    ee0a:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ee0c:	6863      	ldr	r3, [r4, #4]
    ee0e:	2bf0      	cmp	r3, #240	; 0xf0
    ee10:	d902      	bls.n	ee18 <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
    ee12:	2501      	movs	r5, #1
}
    ee14:	4628      	mov	r0, r5
    ee16:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
    ee18:	f001 fe22 	bl	10a60 <__errno>
    ee1c:	231c      	movs	r3, #28
    ee1e:	6003      	str	r3, [r0, #0]
		return 0;
    ee20:	e7f8      	b.n	ee14 <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
    ee22:	2501      	movs	r5, #1
    ee24:	e7f6      	b.n	ee14 <sm_align_pool+0x2c>
    ee26:	bf00      	nop
    ee28:	aaaaaaab 	.word	0xaaaaaaab

0000ee2c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    ee2c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    ee2e:	b190      	cbz	r0, ee56 <sm_set_pool+0x2a>
    ee30:	461d      	mov	r5, r3
    ee32:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    ee34:	b101      	cbz	r1, ee38 <sm_set_pool+0xc>
    ee36:	b9fa      	cbnz	r2, ee78 <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
    ee38:	4620      	mov	r0, r4
    ee3a:	f7ff ffbf 	bl	edbc <smalloc_verify_pool>
    ee3e:	4606      	mov	r6, r0
    ee40:	b1a8      	cbz	r0, ee6e <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ee42:	68a3      	ldr	r3, [r4, #8]
    ee44:	b96b      	cbnz	r3, ee62 <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
    ee46:	2300      	movs	r3, #0
    ee48:	6023      	str	r3, [r4, #0]
    ee4a:	6063      	str	r3, [r4, #4]
    ee4c:	60a3      	str	r3, [r4, #8]
    ee4e:	60e3      	str	r3, [r4, #12]
			return 1;
    ee50:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ee52:	4630      	mov	r0, r6
    ee54:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    ee56:	f001 fe03 	bl	10a60 <__errno>
    ee5a:	2316      	movs	r3, #22
    ee5c:	6003      	str	r3, [r0, #0]
		return 0;
    ee5e:	2600      	movs	r6, #0
    ee60:	e7f7      	b.n	ee52 <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ee62:	6862      	ldr	r2, [r4, #4]
    ee64:	2100      	movs	r1, #0
    ee66:	6820      	ldr	r0, [r4, #0]
    ee68:	f002 f98c 	bl	11184 <memset>
    ee6c:	e7eb      	b.n	ee46 <sm_set_pool+0x1a>
		errno = EINVAL;
    ee6e:	f001 fdf7 	bl	10a60 <__errno>
    ee72:	2316      	movs	r3, #22
    ee74:	6003      	str	r3, [r0, #0]
		return 0;
    ee76:	e7ec      	b.n	ee52 <sm_set_pool+0x26>
	spool->pool = new_pool;
    ee78:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
    ee7a:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
    ee7c:	9b04      	ldr	r3, [sp, #16]
    ee7e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    ee80:	f7ff ffb2 	bl	ede8 <sm_align_pool>
    ee84:	4606      	mov	r6, r0
    ee86:	2800      	cmp	r0, #0
    ee88:	d0e3      	beq.n	ee52 <sm_set_pool+0x26>
	if (do_zero) {
    ee8a:	b90d      	cbnz	r5, ee90 <sm_set_pool+0x64>
	return 1;
    ee8c:	2601      	movs	r6, #1
    ee8e:	e7e0      	b.n	ee52 <sm_set_pool+0x26>
		spool->do_zero = do_zero;
    ee90:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    ee92:	6862      	ldr	r2, [r4, #4]
    ee94:	2100      	movs	r1, #0
    ee96:	6820      	ldr	r0, [r4, #0]
    ee98:	f002 f974 	bl	11184 <memset>
	return 1;
    ee9c:	2601      	movs	r6, #1
    ee9e:	e7d8      	b.n	ee52 <sm_set_pool+0x26>

0000eea0 <sqrtf>:
    eea0:	b508      	push	{r3, lr}
    eea2:	ed2d 8b02 	vpush	{d8}
    eea6:	eeb0 8a40 	vmov.f32	s16, s0
    eeaa:	f000 fb11 	bl	f4d0 <__ieee754_sqrtf>
    eeae:	eeb4 8a48 	vcmp.f32	s16, s16
    eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eeb6:	d606      	bvs.n	eec6 <sqrtf+0x26>
    eeb8:	eddf 8a09 	vldr	s17, [pc, #36]	; eee0 <sqrtf+0x40>
    eebc:	eeb4 8ae8 	vcmpe.f32	s16, s17
    eec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    eec4:	d402      	bmi.n	eecc <sqrtf+0x2c>
    eec6:	ecbd 8b02 	vpop	{d8}
    eeca:	bd08      	pop	{r3, pc}
    eecc:	f001 fdc8 	bl	10a60 <__errno>
    eed0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    eed4:	ecbd 8b02 	vpop	{d8}
    eed8:	2321      	movs	r3, #33	; 0x21
    eeda:	6003      	str	r3, [r0, #0]
    eedc:	bd08      	pop	{r3, pc}
    eede:	bf00      	nop
	...

0000eee8 <pow>:
    eee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eeec:	ec5b ab10 	vmov	sl, fp, d0
    eef0:	ed2d 8b0a 	vpush	{d8-d12}
    eef4:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    eef8:	ee11 ea90 	vmov	lr, s3
    eefc:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    ef00:	f240 70fd 	movw	r0, #2045	; 0x7fd
    ef04:	4286      	cmp	r6, r0
    ef06:	ee10 1a10 	vmov	r1, s0
    ef0a:	ee11 3a10 	vmov	r3, s2
    ef0e:	b089      	sub	sp, #36	; 0x24
    ef10:	465a      	mov	r2, fp
    ef12:	4665      	mov	r5, ip
    ef14:	ea4f 541e 	mov.w	r4, lr, lsr #20
    ef18:	f200 80c6 	bhi.w	f0a8 <pow+0x1c0>
    ef1c:	f3c4 060a 	ubfx	r6, r4, #0, #11
    ef20:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    ef24:	2e7f      	cmp	r6, #127	; 0x7f
    ef26:	bf98      	it	ls
    ef28:	2000      	movls	r0, #0
    ef2a:	f200 80bd 	bhi.w	f0a8 <pow+0x1c0>
    ef2e:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    ef32:	4ce1      	ldr	r4, [pc, #900]	; (f2b8 <pow+0x3d0>)
    ef34:	4be1      	ldr	r3, [pc, #900]	; (f2bc <pow+0x3d4>)
    ef36:	4414      	add	r4, r2
    ef38:	f3c4 3546 	ubfx	r5, r4, #13, #7
    ef3c:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    ef40:	ed93 6b00 	vldr	d6, [r3]
    ef44:	ed93 7b02 	vldr	d7, [r3, #8]
    ef48:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    ef4c:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    ef50:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    ef54:	0d26      	lsrs	r6, r4, #20
    ef56:	1524      	asrs	r4, r4, #20
    ef58:	ee05 4a90 	vmov	s11, r4
    ef5c:	0536      	lsls	r6, r6, #20
    ef5e:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    ef62:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    ef66:	1b95      	subs	r5, r2, r6
    ef68:	eea5 2b06 	vfma.f64	d2, d5, d6
    ef6c:	eea5 9b07 	vfma.f64	d9, d5, d7
    ef70:	ed93 ab04 	vldr	d10, [r3, #16]
    ef74:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    ef78:	ed93 bb08 	vldr	d11, [r3, #32]
    ef7c:	ed93 7b06 	vldr	d7, [r3, #24]
    ef80:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    ef84:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    ef88:	1e0c      	subs	r4, r1, #0
    ef8a:	ec45 4b1c 	vmov	d12, r4, r5
    ef8e:	eeac 0b08 	vfma.f64	d0, d12, d8
    ef92:	eea0 3b05 	vfma.f64	d3, d0, d5
    ef96:	eea0 6b04 	vfma.f64	d6, d0, d4
    ef9a:	ee20 5b0a 	vmul.f64	d5, d0, d10
    ef9e:	ee30 4b02 	vadd.f64	d4, d0, d2
    efa2:	ee20 8b05 	vmul.f64	d8, d0, d5
    efa6:	eea0 7b0b 	vfma.f64	d7, d0, d11
    efaa:	eea8 6b03 	vfma.f64	d6, d8, d3
    efae:	ee32 2b44 	vsub.f64	d2, d2, d4
    efb2:	eea8 7b06 	vfma.f64	d7, d8, d6
    efb6:	ee32 2b00 	vadd.f64	d2, d2, d0
    efba:	eeb0 3b48 	vmov.f64	d3, d8
    efbe:	ee39 2b02 	vadd.f64	d2, d9, d2
    efc2:	ee95 3b00 	vfnms.f64	d3, d5, d0
    efc6:	ee34 5b08 	vadd.f64	d5, d4, d8
    efca:	ee20 0b08 	vmul.f64	d0, d0, d8
    efce:	ee34 4b45 	vsub.f64	d4, d4, d5
    efd2:	ee32 6b03 	vadd.f64	d6, d2, d3
    efd6:	ee34 4b08 	vadd.f64	d4, d4, d8
    efda:	ee36 6b04 	vadd.f64	d6, d6, d4
    efde:	eea0 6b07 	vfma.f64	d6, d0, d7
    efe2:	ee35 4b06 	vadd.f64	d4, d5, d6
    efe6:	ee21 8b04 	vmul.f64	d8, d1, d4
    efea:	ee18 2a90 	vmov	r2, s17
    efee:	eeb0 7b48 	vmov.f64	d7, d8
    eff2:	f3c2 550a 	ubfx	r5, r2, #20, #11
    eff6:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    effa:	18eb      	adds	r3, r5, r3
    effc:	2b3e      	cmp	r3, #62	; 0x3e
    effe:	ee91 7b04 	vfnms.f64	d7, d1, d4
    f002:	ee35 5b44 	vsub.f64	d5, d5, d4
    f006:	ee35 5b06 	vadd.f64	d5, d5, d6
    f00a:	eea1 7b05 	vfma.f64	d7, d1, d5
    f00e:	f200 8093 	bhi.w	f138 <pow+0x250>
    f012:	4bab      	ldr	r3, [pc, #684]	; (f2c0 <pow+0x3d8>)
    f014:	ed93 4b02 	vldr	d4, [r3, #8]
    f018:	ed93 5b00 	vldr	d5, [r3]
    f01c:	eeb0 1b44 	vmov.f64	d1, d4
    f020:	ed93 2b04 	vldr	d2, [r3, #16]
    f024:	eea8 1b05 	vfma.f64	d1, d8, d5
    f028:	ed93 6b06 	vldr	d6, [r3, #24]
    f02c:	ee11 1a10 	vmov	r1, s2
    f030:	ee31 1b44 	vsub.f64	d1, d1, d4
    f034:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    f038:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    f03c:	eea1 8b02 	vfma.f64	d8, d1, d2
    f040:	eea1 8b06 	vfma.f64	d8, d1, d6
    f044:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    f048:	ee37 7b08 	vadd.f64	d7, d7, d8
    f04c:	ee27 2b07 	vmul.f64	d2, d7, d7
    f050:	1892      	adds	r2, r2, r2
    f052:	f102 040f 	add.w	r4, r2, #15
    f056:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f05a:	eea7 6b04 	vfma.f64	d6, d7, d4
    f05e:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    f062:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    f066:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    f06a:	ed93 5b08 	vldr	d5, [r3, #32]
    f06e:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    f072:	6857      	ldr	r7, [r2, #4]
    f074:	eea7 5b03 	vfma.f64	d5, d7, d3
    f078:	1840      	adds	r0, r0, r1
    f07a:	2400      	movs	r4, #0
    f07c:	ee22 3b02 	vmul.f64	d3, d2, d2
    f080:	ee37 7b04 	vadd.f64	d7, d7, d4
    f084:	19a2      	adds	r2, r4, r6
    f086:	eea2 7b05 	vfma.f64	d7, d2, d5
    f08a:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    f08e:	eea3 7b06 	vfma.f64	d7, d3, d6
    f092:	2d00      	cmp	r5, #0
    f094:	d05f      	beq.n	f156 <pow+0x26e>
    f096:	ec43 2b10 	vmov	d0, r2, r3
    f09a:	eea7 0b00 	vfma.f64	d0, d7, d0
    f09e:	b009      	add	sp, #36	; 0x24
    f0a0:	ecbd 8b0a 	vpop	{d8-d12}
    f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0a8:	18d8      	adds	r0, r3, r3
    f0aa:	eb4e 090e 	adc.w	r9, lr, lr
    f0ae:	1e46      	subs	r6, r0, #1
    f0b0:	4637      	mov	r7, r6
    f0b2:	f06f 0801 	mvn.w	r8, #1
    f0b6:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
    f0ba:	45b8      	cmp	r8, r7
    f0bc:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f0c0:	eb77 0606 	sbcs.w	r6, r7, r6
    f0c4:	f0c0 8120 	bcc.w	f308 <pow+0x420>
    f0c8:	1848      	adds	r0, r1, r1
    f0ca:	eb42 0902 	adc.w	r9, r2, r2
    f0ce:	1e46      	subs	r6, r0, #1
    f0d0:	4637      	mov	r7, r6
    f0d2:	f169 0600 	sbc.w	r6, r9, #0
    f0d6:	45b8      	cmp	r8, r7
    f0d8:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f0dc:	eb77 0606 	sbcs.w	r6, r7, r6
    f0e0:	f0c0 8139 	bcc.w	f356 <pow+0x46e>
    f0e4:	2a00      	cmp	r2, #0
    f0e6:	db6a      	blt.n	f1be <pow+0x2d6>
    f0e8:	2000      	movs	r0, #0
    f0ea:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f0ee:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    f0f2:	2b7f      	cmp	r3, #127	; 0x7f
    f0f4:	f240 77ff 	movw	r7, #2047	; 0x7ff
    f0f8:	d94f      	bls.n	f19a <pow+0x2b2>
    f0fa:	4b72      	ldr	r3, [pc, #456]	; (f2c4 <pow+0x3dc>)
    f0fc:	2000      	movs	r0, #0
    f0fe:	429a      	cmp	r2, r3
    f100:	bf08      	it	eq
    f102:	4281      	cmpeq	r1, r0
    f104:	f000 80fd 	beq.w	f302 <pow+0x41a>
    f108:	f240 35bd 	movw	r5, #957	; 0x3bd
    f10c:	42ae      	cmp	r6, r5
    f10e:	f240 8091 	bls.w	f234 <pow+0x34c>
    f112:	2901      	cmp	r1, #1
    f114:	eb72 0303 	sbcs.w	r3, r2, r3
    f118:	bf34      	ite	cc
    f11a:	2301      	movcc	r3, #1
    f11c:	2300      	movcs	r3, #0
    f11e:	42bc      	cmp	r4, r7
    f120:	bf8c      	ite	hi
    f122:	2400      	movhi	r4, #0
    f124:	2401      	movls	r4, #1
    f126:	42a3      	cmp	r3, r4
    f128:	d10e      	bne.n	f148 <pow+0x260>
    f12a:	b009      	add	sp, #36	; 0x24
    f12c:	ecbd 8b0a 	vpop	{d8-d12}
    f130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f134:	f000 ba30 	b.w	f598 <__math_uflow>
    f138:	2b00      	cmp	r3, #0
    f13a:	f2c0 80ce 	blt.w	f2da <pow+0x3f2>
    f13e:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    f142:	d975      	bls.n	f230 <pow+0x348>
    f144:	2a00      	cmp	r2, #0
    f146:	dbf0      	blt.n	f12a <pow+0x242>
    f148:	b009      	add	sp, #36	; 0x24
    f14a:	ecbd 8b0a 	vpop	{d8-d12}
    f14e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f152:	f000 ba29 	b.w	f5a8 <__math_oflow>
    f156:	42a1      	cmp	r1, r4
    f158:	f280 8113 	bge.w	f382 <pow+0x49a>
    f15c:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f160:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    f164:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    f168:	4610      	mov	r0, r2
    f16a:	ec41 0b15 	vmov	d5, r0, r1
    f16e:	ee27 7b05 	vmul.f64	d7, d7, d5
    f172:	ee35 6b07 	vadd.f64	d6, d5, d7
    f176:	eeb0 4bc6 	vabs.f64	d4, d6
    f17a:	eeb4 4bc3 	vcmpe.f64	d4, d3
    f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f182:	d461      	bmi.n	f248 <pow+0x360>
    f184:	ed9f 0b48 	vldr	d0, [pc, #288]	; f2a8 <pow+0x3c0>
    f188:	ee26 0b00 	vmul.f64	d0, d6, d0
    f18c:	b009      	add	sp, #36	; 0x24
    f18e:	ecbd 8b0a 	vpop	{d8-d12}
    f192:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f196:	f000 ba37 	b.w	f608 <__math_check_uflow>
    f19a:	2d00      	cmp	r5, #0
    f19c:	f47f aec7 	bne.w	ef2e <pow+0x46>
    f1a0:	ed9f 7b43 	vldr	d7, [pc, #268]	; f2b0 <pow+0x3c8>
    f1a4:	ec4b ab16 	vmov	d6, sl, fp
    f1a8:	ee26 7b07 	vmul.f64	d7, d6, d7
    f1ac:	ec53 2b17 	vmov	r2, r3, d7
    f1b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f1b4:	ee17 1a10 	vmov	r1, s14
    f1b8:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    f1bc:	e6b7      	b.n	ef2e <pow+0x46>
    f1be:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f1c2:	f240 30fe 	movw	r0, #1022	; 0x3fe
    f1c6:	4286      	cmp	r6, r0
    f1c8:	dd7e      	ble.n	f2c8 <pow+0x3e0>
    f1ca:	f240 4033 	movw	r0, #1075	; 0x433
    f1ce:	4286      	cmp	r6, r0
    f1d0:	f300 80fa 	bgt.w	f3c8 <pow+0x4e0>
    f1d4:	1b80      	subs	r0, r0, r6
    f1d6:	f1a0 0520 	sub.w	r5, r0, #32
    f1da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f1de:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f1e2:	4087      	lsls	r7, r0
    f1e4:	fa09 f905 	lsl.w	r9, r9, r5
    f1e8:	f1c0 0820 	rsb	r8, r0, #32
    f1ec:	9501      	str	r5, [sp, #4]
    f1ee:	ea47 0509 	orr.w	r5, r7, r9
    f1f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f1f6:	fa27 f908 	lsr.w	r9, r7, r8
    f1fa:	ea45 0509 	orr.w	r5, r5, r9
    f1fe:	4087      	lsls	r7, r0
    f200:	ea23 0707 	bic.w	r7, r3, r7
    f204:	ea2e 0505 	bic.w	r5, lr, r5
    f208:	433d      	orrs	r5, r7
    f20a:	d15d      	bne.n	f2c8 <pow+0x3e0>
    f20c:	9d01      	ldr	r5, [sp, #4]
    f20e:	40c3      	lsrs	r3, r0
    f210:	fa0e f808 	lsl.w	r8, lr, r8
    f214:	ea43 0308 	orr.w	r3, r3, r8
    f218:	fa2e fe05 	lsr.w	lr, lr, r5
    f21c:	ea43 030e 	orr.w	r3, r3, lr
    f220:	f003 0301 	and.w	r3, r3, #1
    f224:	0498      	lsls	r0, r3, #18
    f226:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f22a:	f3cc 050a 	ubfx	r5, ip, #0, #11
    f22e:	e75e      	b.n	f0ee <pow+0x206>
    f230:	2500      	movs	r5, #0
    f232:	e6ee      	b.n	f012 <pow+0x12a>
    f234:	4288      	cmp	r0, r1
    f236:	4193      	sbcs	r3, r2
    f238:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f23c:	bf34      	ite	cc
    f23e:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    f242:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    f246:	e72a      	b.n	f09e <pow+0x1b6>
    f248:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f250:	ee35 5b46 	vsub.f64	d5, d5, d6
    f254:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    f258:	ee35 5b07 	vadd.f64	d5, d5, d7
    f25c:	bf58      	it	pl
    f25e:	eeb0 4b43 	vmovpl.f64	d4, d3
    f262:	ee36 3b04 	vadd.f64	d3, d6, d4
    f266:	ee34 7b43 	vsub.f64	d7, d4, d3
    f26a:	ee37 7b06 	vadd.f64	d7, d7, d6
    f26e:	ee37 7b05 	vadd.f64	d7, d7, d5
    f272:	ee37 7b03 	vadd.f64	d7, d7, d3
    f276:	ee37 6b44 	vsub.f64	d6, d7, d4
    f27a:	eeb5 6b40 	vcmp.f64	d6, #0.0
    f27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f282:	d104      	bne.n	f28e <pow+0x3a6>
    f284:	462a      	mov	r2, r5
    f286:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f28a:	ec43 2b16 	vmov	d6, r2, r3
    f28e:	ed9f 5b06 	vldr	d5, [pc, #24]	; f2a8 <pow+0x3c0>
    f292:	ed8d 5b04 	vstr	d5, [sp, #16]
    f296:	ed9d 7b04 	vldr	d7, [sp, #16]
    f29a:	ee27 7b05 	vmul.f64	d7, d7, d5
    f29e:	ed8d 7b06 	vstr	d7, [sp, #24]
    f2a2:	e76f      	b.n	f184 <pow+0x29c>
    f2a4:	f3af 8000 	nop.w
    f2a8:	00000000 	.word	0x00000000
    f2ac:	00100000 	.word	0x00100000
    f2b0:	00000000 	.word	0x00000000
    f2b4:	43300000 	.word	0x43300000
    f2b8:	c0196aab 	.word	0xc0196aab
    f2bc:	20000c20 	.word	0x20000c20
    f2c0:	200002c0 	.word	0x200002c0
    f2c4:	3ff00000 	.word	0x3ff00000
    f2c8:	ec4b ab10 	vmov	d0, sl, fp
    f2cc:	b009      	add	sp, #36	; 0x24
    f2ce:	ecbd 8b0a 	vpop	{d8-d12}
    f2d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2d6:	f000 b987 	b.w	f5e8 <__math_invalid>
    f2da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f2de:	ee38 0b00 	vadd.f64	d0, d8, d0
    f2e2:	2800      	cmp	r0, #0
    f2e4:	f43f aedb 	beq.w	f09e <pow+0x1b6>
    f2e8:	eeb1 0b40 	vneg.f64	d0, d0
    f2ec:	e6d7      	b.n	f09e <pow+0x1b6>
    f2ee:	1849      	adds	r1, r1, r1
    f2f0:	4b59      	ldr	r3, [pc, #356]	; (f458 <pow+0x570>)
    f2f2:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    f2f6:	f04f 0000 	mov.w	r0, #0
    f2fa:	4152      	adcs	r2, r2
    f2fc:	4288      	cmp	r0, r1
    f2fe:	4193      	sbcs	r3, r2
    f300:	d35d      	bcc.n	f3be <pow+0x4d6>
    f302:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f306:	e6ca      	b.n	f09e <pow+0x1b6>
    f308:	ea50 0409 	orrs.w	r4, r0, r9
    f30c:	d0ef      	beq.n	f2ee <pow+0x406>
    f30e:	4c53      	ldr	r4, [pc, #332]	; (f45c <pow+0x574>)
    f310:	2500      	movs	r5, #0
    f312:	42a2      	cmp	r2, r4
    f314:	bf08      	it	eq
    f316:	42a9      	cmpeq	r1, r5
    f318:	d047      	beq.n	f3aa <pow+0x4c2>
    f31a:	1849      	adds	r1, r1, r1
    f31c:	4b50      	ldr	r3, [pc, #320]	; (f460 <pow+0x578>)
    f31e:	4152      	adcs	r2, r2
    f320:	428d      	cmp	r5, r1
    f322:	eb73 0402 	sbcs.w	r4, r3, r2
    f326:	d34a      	bcc.n	f3be <pow+0x4d6>
    f328:	4599      	cmp	r9, r3
    f32a:	bf08      	it	eq
    f32c:	42a8      	cmpeq	r0, r5
    f32e:	d146      	bne.n	f3be <pow+0x4d6>
    f330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    f334:	429a      	cmp	r2, r3
    f336:	bf08      	it	eq
    f338:	42a9      	cmpeq	r1, r5
    f33a:	d0e2      	beq.n	f302 <pow+0x41a>
    f33c:	429a      	cmp	r2, r3
    f33e:	ea6f 0e0e 	mvn.w	lr, lr
    f342:	bf34      	ite	cc
    f344:	2200      	movcc	r2, #0
    f346:	2201      	movcs	r2, #1
    f348:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    f34c:	4572      	cmp	r2, lr
    f34e:	d077      	beq.n	f440 <pow+0x558>
    f350:	ed9f 0b3d 	vldr	d0, [pc, #244]	; f448 <pow+0x560>
    f354:	e6a3      	b.n	f09e <pow+0x1b6>
    f356:	ec4b ab17 	vmov	d7, sl, fp
    f35a:	2a00      	cmp	r2, #0
    f35c:	ee27 0b07 	vmul.f64	d0, d7, d7
    f360:	db34      	blt.n	f3cc <pow+0x4e4>
    f362:	2200      	movs	r2, #0
    f364:	ea50 0909 	orrs.w	r9, r0, r9
    f368:	d15d      	bne.n	f426 <pow+0x53e>
    f36a:	f1be 0f00 	cmp.w	lr, #0
    f36e:	f6bf ae96 	bge.w	f09e <pow+0x1b6>
    f372:	4610      	mov	r0, r2
    f374:	b009      	add	sp, #36	; 0x24
    f376:	ecbd 8b0a 	vpop	{d8-d12}
    f37a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f37e:	f000 b91b 	b.w	f5b8 <__math_divzero>
    f382:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    f386:	ed9f 6b32 	vldr	d6, [pc, #200]	; f450 <pow+0x568>
    f38a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    f38e:	4610      	mov	r0, r2
    f390:	ec41 0b10 	vmov	d0, r0, r1
    f394:	eea7 0b00 	vfma.f64	d0, d7, d0
    f398:	ee20 0b06 	vmul.f64	d0, d0, d6
    f39c:	b009      	add	sp, #36	; 0x24
    f39e:	ecbd 8b0a 	vpop	{d8-d12}
    f3a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3a6:	f000 b93b 	b.w	f620 <__math_check_oflow>
    f3aa:	18db      	adds	r3, r3, r3
    f3ac:	4a2a      	ldr	r2, [pc, #168]	; (f458 <pow+0x570>)
    f3ae:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    f3b2:	eb4e 0e0e 	adc.w	lr, lr, lr
    f3b6:	429d      	cmp	r5, r3
    f3b8:	eb72 020e 	sbcs.w	r2, r2, lr
    f3bc:	d2a1      	bcs.n	f302 <pow+0x41a>
    f3be:	ec4b ab17 	vmov	d7, sl, fp
    f3c2:	ee37 0b01 	vadd.f64	d0, d7, d1
    f3c6:	e66a      	b.n	f09e <pow+0x1b6>
    f3c8:	2000      	movs	r0, #0
    f3ca:	e72c      	b.n	f226 <pow+0x33e>
    f3cc:	f3c4 020a 	ubfx	r2, r4, #0, #11
    f3d0:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    f3d4:	2934      	cmp	r1, #52	; 0x34
    f3d6:	d8c4      	bhi.n	f362 <pow+0x47a>
    f3d8:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    f3dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f3e0:	f1a2 051d 	sub.w	r5, r2, #29
    f3e4:	3203      	adds	r2, #3
    f3e6:	fa01 f705 	lsl.w	r7, r1, r5
    f3ea:	fa01 f402 	lsl.w	r4, r1, r2
    f3ee:	f1c2 0620 	rsb	r6, r2, #32
    f3f2:	433c      	orrs	r4, r7
    f3f4:	fa21 f706 	lsr.w	r7, r1, r6
    f3f8:	433c      	orrs	r4, r7
    f3fa:	4091      	lsls	r1, r2
    f3fc:	ea23 0101 	bic.w	r1, r3, r1
    f400:	ea2e 0404 	bic.w	r4, lr, r4
    f404:	4321      	orrs	r1, r4
    f406:	d1ac      	bne.n	f362 <pow+0x47a>
    f408:	fa23 f202 	lsr.w	r2, r3, r2
    f40c:	fa0e f606 	lsl.w	r6, lr, r6
    f410:	4332      	orrs	r2, r6
    f412:	fa2e f505 	lsr.w	r5, lr, r5
    f416:	432a      	orrs	r2, r5
    f418:	f012 0201 	ands.w	r2, r2, #1
    f41c:	d0a2      	beq.n	f364 <pow+0x47c>
    f41e:	eeb1 0b40 	vneg.f64	d0, d0
    f422:	2201      	movs	r2, #1
    f424:	e79e      	b.n	f364 <pow+0x47c>
    f426:	f1be 0f00 	cmp.w	lr, #0
    f42a:	f6bf ae38 	bge.w	f09e <pow+0x1b6>
    f42e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f432:	ee86 7b00 	vdiv.f64	d7, d6, d0
    f436:	ed8d 7b02 	vstr	d7, [sp, #8]
    f43a:	ed9d 0b02 	vldr	d0, [sp, #8]
    f43e:	e62e      	b.n	f09e <pow+0x1b6>
    f440:	ee21 0b01 	vmul.f64	d0, d1, d1
    f444:	e62b      	b.n	f09e <pow+0x1b6>
    f446:	bf00      	nop
	...
    f454:	7f000000 	.word	0x7f000000
    f458:	fff00000 	.word	0xfff00000
    f45c:	3ff00000 	.word	0x3ff00000
    f460:	ffe00000 	.word	0xffe00000

0000f464 <asinf>:
    f464:	b508      	push	{r3, lr}
    f466:	ed2d 8b02 	vpush	{d8}
    f46a:	eeb0 8a40 	vmov.f32	s16, s0
    f46e:	f000 f9e3 	bl	f838 <__ieee754_asinf>
    f472:	eeb4 8a48 	vcmp.f32	s16, s16
    f476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f47a:	eef0 8a40 	vmov.f32	s17, s0
    f47e:	d60a      	bvs.n	f496 <asinf+0x32>
    f480:	eeb0 0a48 	vmov.f32	s0, s16
    f484:	f000 f81c 	bl	f4c0 <fabsf>
    f488:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f48c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    f490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f494:	dc04      	bgt.n	f4a0 <asinf+0x3c>
    f496:	eeb0 0a68 	vmov.f32	s0, s17
    f49a:	ecbd 8b02 	vpop	{d8}
    f49e:	bd08      	pop	{r3, pc}
    f4a0:	f001 fade 	bl	10a60 <__errno>
    f4a4:	ecbd 8b02 	vpop	{d8}
    f4a8:	4603      	mov	r3, r0
    f4aa:	2221      	movs	r2, #33	; 0x21
    f4ac:	601a      	str	r2, [r3, #0]
    f4ae:	4802      	ldr	r0, [pc, #8]	; (f4b8 <asinf+0x54>)
    f4b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f4b4:	f000 b8c8 	b.w	f648 <nanf>
    f4b8:	20001fb0 	.word	0x20001fb0

0000f4bc <atan2f>:
    f4bc:	f000 bac2 	b.w	fa44 <__ieee754_atan2f>

0000f4c0 <fabsf>:
    f4c0:	ee10 3a10 	vmov	r3, s0
    f4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f4c8:	ee00 3a10 	vmov	s0, r3
    f4cc:	4770      	bx	lr
    f4ce:	bf00      	nop

0000f4d0 <__ieee754_sqrtf>:
    f4d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
    f4d4:	4770      	bx	lr
    f4d6:	bf00      	nop

0000f4d8 <sin>:
    f4d8:	eeb0 7b40 	vmov.f64	d7, d0
    f4dc:	ee17 3a90 	vmov	r3, s15
    f4e0:	4a1b      	ldr	r2, [pc, #108]	; (f550 <sin+0x78>)
    f4e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f4e6:	4293      	cmp	r3, r2
    f4e8:	dd1c      	ble.n	f524 <sin+0x4c>
    f4ea:	4a1a      	ldr	r2, [pc, #104]	; (f554 <sin+0x7c>)
    f4ec:	4293      	cmp	r3, r2
    f4ee:	dd02      	ble.n	f4f6 <sin+0x1e>
    f4f0:	ee30 0b40 	vsub.f64	d0, d0, d0
    f4f4:	4770      	bx	lr
    f4f6:	b500      	push	{lr}
    f4f8:	b085      	sub	sp, #20
    f4fa:	4668      	mov	r0, sp
    f4fc:	f000 fc20 	bl	fd40 <__ieee754_rem_pio2>
    f500:	f000 0003 	and.w	r0, r0, #3
    f504:	2801      	cmp	r0, #1
    f506:	ed9d 1b02 	vldr	d1, [sp, #8]
    f50a:	ed9d 0b00 	vldr	d0, [sp]
    f50e:	d00e      	beq.n	f52e <sin+0x56>
    f510:	2802      	cmp	r0, #2
    f512:	d013      	beq.n	f53c <sin+0x64>
    f514:	b170      	cbz	r0, f534 <sin+0x5c>
    f516:	f000 f89f 	bl	f658 <__kernel_cos>
    f51a:	eeb1 0b40 	vneg.f64	d0, d0
    f51e:	b005      	add	sp, #20
    f520:	f85d fb04 	ldr.w	pc, [sp], #4
    f524:	ed9f 1b08 	vldr	d1, [pc, #32]	; f548 <sin+0x70>
    f528:	2000      	movs	r0, #0
    f52a:	f000 b92d 	b.w	f788 <__kernel_sin>
    f52e:	f000 f893 	bl	f658 <__kernel_cos>
    f532:	e7f4      	b.n	f51e <sin+0x46>
    f534:	2001      	movs	r0, #1
    f536:	f000 f927 	bl	f788 <__kernel_sin>
    f53a:	e7f0      	b.n	f51e <sin+0x46>
    f53c:	2001      	movs	r0, #1
    f53e:	f000 f923 	bl	f788 <__kernel_sin>
    f542:	eeb1 0b40 	vneg.f64	d0, d0
    f546:	e7ea      	b.n	f51e <sin+0x46>
	...
    f550:	3fe921fb 	.word	0x3fe921fb
    f554:	7fefffff 	.word	0x7fefffff

0000f558 <with_errno>:
    f558:	b510      	push	{r4, lr}
    f55a:	b082      	sub	sp, #8
    f55c:	ed8d 0b00 	vstr	d0, [sp]
    f560:	4604      	mov	r4, r0
    f562:	f001 fa7d 	bl	10a60 <__errno>
    f566:	ed9d 0b00 	vldr	d0, [sp]
    f56a:	6004      	str	r4, [r0, #0]
    f56c:	b002      	add	sp, #8
    f56e:	bd10      	pop	{r4, pc}

0000f570 <xflow>:
    f570:	b082      	sub	sp, #8
    f572:	b158      	cbz	r0, f58c <xflow+0x1c>
    f574:	eeb1 7b40 	vneg.f64	d7, d0
    f578:	ed8d 7b00 	vstr	d7, [sp]
    f57c:	ed9d 7b00 	vldr	d7, [sp]
    f580:	2022      	movs	r0, #34	; 0x22
    f582:	ee20 0b07 	vmul.f64	d0, d0, d7
    f586:	b002      	add	sp, #8
    f588:	f7ff bfe6 	b.w	f558 <with_errno>
    f58c:	eeb0 7b40 	vmov.f64	d7, d0
    f590:	e7f2      	b.n	f578 <xflow+0x8>
    f592:	bf00      	nop
    f594:	0000      	movs	r0, r0
	...

0000f598 <__math_uflow>:
    f598:	ed9f 0b01 	vldr	d0, [pc, #4]	; f5a0 <__math_uflow+0x8>
    f59c:	f7ff bfe8 	b.w	f570 <xflow>
    f5a0:	00000000 	.word	0x00000000
    f5a4:	10000000 	.word	0x10000000

0000f5a8 <__math_oflow>:
    f5a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; f5b0 <__math_oflow+0x8>
    f5ac:	f7ff bfe0 	b.w	f570 <xflow>
    f5b0:	00000000 	.word	0x00000000
    f5b4:	70000000 	.word	0x70000000

0000f5b8 <__math_divzero>:
    f5b8:	b082      	sub	sp, #8
    f5ba:	2800      	cmp	r0, #0
    f5bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f5c0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    f5c4:	fe06 7b07 	vseleq.f64	d7, d6, d7
    f5c8:	ed8d 7b00 	vstr	d7, [sp]
    f5cc:	ed9d 0b00 	vldr	d0, [sp]
    f5d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; f5e0 <__math_divzero+0x28>
    f5d4:	2022      	movs	r0, #34	; 0x22
    f5d6:	ee80 0b07 	vdiv.f64	d0, d0, d7
    f5da:	b002      	add	sp, #8
    f5dc:	f7ff bfbc 	b.w	f558 <with_errno>
	...

0000f5e8 <__math_invalid>:
    f5e8:	eeb4 0b40 	vcmp.f64	d0, d0
    f5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5f0:	ee30 7b40 	vsub.f64	d7, d0, d0
    f5f4:	ee87 6b07 	vdiv.f64	d6, d7, d7
    f5f8:	eeb0 0b46 	vmov.f64	d0, d6
    f5fc:	d602      	bvs.n	f604 <__math_invalid+0x1c>
    f5fe:	2021      	movs	r0, #33	; 0x21
    f600:	f7ff bfaa 	b.w	f558 <with_errno>
    f604:	4770      	bx	lr
    f606:	bf00      	nop

0000f608 <__math_check_uflow>:
    f608:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f610:	d000      	beq.n	f614 <__math_check_uflow+0xc>
    f612:	4770      	bx	lr
    f614:	2022      	movs	r0, #34	; 0x22
    f616:	f7ff bf9f 	b.w	f558 <with_errno>
    f61a:	bf00      	nop
    f61c:	0000      	movs	r0, r0
	...

0000f620 <__math_check_oflow>:
    f620:	ed9f 6b07 	vldr	d6, [pc, #28]	; f640 <__math_check_oflow+0x20>
    f624:	eeb0 7bc0 	vabs.f64	d7, d0
    f628:	eeb4 7b46 	vcmp.f64	d7, d6
    f62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f630:	dc00      	bgt.n	f634 <__math_check_oflow+0x14>
    f632:	4770      	bx	lr
    f634:	2022      	movs	r0, #34	; 0x22
    f636:	f7ff bf8f 	b.w	f558 <with_errno>
    f63a:	bf00      	nop
    f63c:	f3af 8000 	nop.w
    f640:	ffffffff 	.word	0xffffffff
    f644:	7fefffff 	.word	0x7fefffff

0000f648 <nanf>:
    f648:	ed9f 0a01 	vldr	s0, [pc, #4]	; f650 <nanf+0x8>
    f64c:	4770      	bx	lr
    f64e:	bf00      	nop
    f650:	7fc00000 	.word	0x7fc00000
    f654:	00000000 	.word	0x00000000

0000f658 <__kernel_cos>:
    f658:	ee10 3a90 	vmov	r3, s1
    f65c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f660:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    f664:	ed2d 8b02 	vpush	{d8}
    f668:	da2e      	bge.n	f6c8 <__kernel_cos+0x70>
    f66a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f66e:	ee17 3a90 	vmov	r3, s15
    f672:	2b00      	cmp	r3, #0
    f674:	d065      	beq.n	f742 <__kernel_cos+0xea>
    f676:	ee20 4b00 	vmul.f64	d4, d0, d0
    f67a:	ed9f 8b35 	vldr	d8, [pc, #212]	; f750 <__kernel_cos+0xf8>
    f67e:	ed9f 2b36 	vldr	d2, [pc, #216]	; f758 <__kernel_cos+0x100>
    f682:	ed9f 3b37 	vldr	d3, [pc, #220]	; f760 <__kernel_cos+0x108>
    f686:	eea4 2b08 	vfma.f64	d2, d4, d8
    f68a:	ed9f 5b37 	vldr	d5, [pc, #220]	; f768 <__kernel_cos+0x110>
    f68e:	eea4 3b02 	vfma.f64	d3, d4, d2
    f692:	ed9f 6b37 	vldr	d6, [pc, #220]	; f770 <__kernel_cos+0x118>
    f696:	eea4 5b03 	vfma.f64	d5, d4, d3
    f69a:	ed9f 7b37 	vldr	d7, [pc, #220]	; f778 <__kernel_cos+0x120>
    f69e:	eea4 6b05 	vfma.f64	d6, d4, d5
    f6a2:	eea4 7b06 	vfma.f64	d7, d4, d6
    f6a6:	ee24 7b07 	vmul.f64	d7, d4, d7
    f6aa:	ee21 1b40 	vnmul.f64	d1, d1, d0
    f6ae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f6b2:	eea4 1b07 	vfma.f64	d1, d4, d7
    f6b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f6ba:	ee94 1b06 	vfnms.f64	d1, d4, d6
    f6be:	ecbd 8b02 	vpop	{d8}
    f6c2:	ee30 0b41 	vsub.f64	d0, d0, d1
    f6c6:	4770      	bx	lr
    f6c8:	ed9f 8b21 	vldr	d8, [pc, #132]	; f750 <__kernel_cos+0xf8>
    f6cc:	ee20 4b00 	vmul.f64	d4, d0, d0
    f6d0:	ed9f 2b21 	vldr	d2, [pc, #132]	; f758 <__kernel_cos+0x100>
    f6d4:	ed9f 3b22 	vldr	d3, [pc, #136]	; f760 <__kernel_cos+0x108>
    f6d8:	eea4 2b08 	vfma.f64	d2, d4, d8
    f6dc:	ed9f 5b22 	vldr	d5, [pc, #136]	; f768 <__kernel_cos+0x110>
    f6e0:	eea2 3b04 	vfma.f64	d3, d2, d4
    f6e4:	ed9f 6b22 	vldr	d6, [pc, #136]	; f770 <__kernel_cos+0x118>
    f6e8:	eea3 5b04 	vfma.f64	d5, d3, d4
    f6ec:	ed9f 7b22 	vldr	d7, [pc, #136]	; f778 <__kernel_cos+0x120>
    f6f0:	eea5 6b04 	vfma.f64	d6, d5, d4
    f6f4:	4a22      	ldr	r2, [pc, #136]	; (f780 <__kernel_cos+0x128>)
    f6f6:	eea6 7b04 	vfma.f64	d7, d6, d4
    f6fa:	4293      	cmp	r3, r2
    f6fc:	ee27 7b04 	vmul.f64	d7, d7, d4
    f700:	ddd3      	ble.n	f6aa <__kernel_cos+0x52>
    f702:	4a20      	ldr	r2, [pc, #128]	; (f784 <__kernel_cos+0x12c>)
    f704:	4293      	cmp	r3, r2
    f706:	dc17      	bgt.n	f738 <__kernel_cos+0xe0>
    f708:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f70c:	2000      	movs	r0, #0
    f70e:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
    f712:	ec41 0b15 	vmov	d5, r0, r1
    f716:	ee36 6b45 	vsub.f64	d6, d6, d5
    f71a:	ee21 1b40 	vnmul.f64	d1, d1, d0
    f71e:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f722:	eea4 1b07 	vfma.f64	d1, d4, d7
    f726:	ee94 5b03 	vfnms.f64	d5, d4, d3
    f72a:	ecbd 8b02 	vpop	{d8}
    f72e:	ee35 0b41 	vsub.f64	d0, d5, d1
    f732:	ee36 0b40 	vsub.f64	d0, d6, d0
    f736:	4770      	bx	lr
    f738:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
    f73c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    f740:	e7eb      	b.n	f71a <__kernel_cos+0xc2>
    f742:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f746:	ecbd 8b02 	vpop	{d8}
    f74a:	4770      	bx	lr
    f74c:	f3af 8000 	nop.w
    f750:	be8838d4 	.word	0xbe8838d4
    f754:	bda8fae9 	.word	0xbda8fae9
    f758:	bdb4b1c4 	.word	0xbdb4b1c4
    f75c:	3e21ee9e 	.word	0x3e21ee9e
    f760:	809c52ad 	.word	0x809c52ad
    f764:	be927e4f 	.word	0xbe927e4f
    f768:	19cb1590 	.word	0x19cb1590
    f76c:	3efa01a0 	.word	0x3efa01a0
    f770:	16c15177 	.word	0x16c15177
    f774:	bf56c16c 	.word	0xbf56c16c
    f778:	5555554c 	.word	0x5555554c
    f77c:	3fa55555 	.word	0x3fa55555
    f780:	3fd33332 	.word	0x3fd33332
    f784:	3fe90000 	.word	0x3fe90000

0000f788 <__kernel_sin>:
    f788:	ee10 3a90 	vmov	r3, s1
    f78c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f790:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    f794:	da04      	bge.n	f7a0 <__kernel_sin+0x18>
    f796:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f79a:	ee17 3a90 	vmov	r3, s15
    f79e:	b35b      	cbz	r3, f7f8 <__kernel_sin+0x70>
    f7a0:	ee20 7b00 	vmul.f64	d7, d0, d0
    f7a4:	ed9f 2b16 	vldr	d2, [pc, #88]	; f800 <__kernel_sin+0x78>
    f7a8:	ed9f 3b17 	vldr	d3, [pc, #92]	; f808 <__kernel_sin+0x80>
    f7ac:	ed9f 4b18 	vldr	d4, [pc, #96]	; f810 <__kernel_sin+0x88>
    f7b0:	eea7 3b02 	vfma.f64	d3, d7, d2
    f7b4:	ed9f 5b18 	vldr	d5, [pc, #96]	; f818 <__kernel_sin+0x90>
    f7b8:	eea3 4b07 	vfma.f64	d4, d3, d7
    f7bc:	ed9f 6b18 	vldr	d6, [pc, #96]	; f820 <__kernel_sin+0x98>
    f7c0:	eea4 5b07 	vfma.f64	d5, d4, d7
    f7c4:	eea5 6b07 	vfma.f64	d6, d5, d7
    f7c8:	ee20 5b07 	vmul.f64	d5, d0, d7
    f7cc:	b930      	cbnz	r0, f7dc <__kernel_sin+0x54>
    f7ce:	ed9f 4b16 	vldr	d4, [pc, #88]	; f828 <__kernel_sin+0xa0>
    f7d2:	eea7 4b06 	vfma.f64	d4, d7, d6
    f7d6:	eea4 0b05 	vfma.f64	d0, d4, d5
    f7da:	4770      	bx	lr
    f7dc:	ed9f 4b14 	vldr	d4, [pc, #80]	; f830 <__kernel_sin+0xa8>
    f7e0:	ee26 6b45 	vnmul.f64	d6, d6, d5
    f7e4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    f7e8:	eea1 6b03 	vfma.f64	d6, d1, d3
    f7ec:	ee96 1b07 	vfnms.f64	d1, d6, d7
    f7f0:	eea5 1b04 	vfma.f64	d1, d5, d4
    f7f4:	ee30 0b41 	vsub.f64	d0, d0, d1
    f7f8:	4770      	bx	lr
    f7fa:	bf00      	nop
    f7fc:	f3af 8000 	nop.w
    f800:	5acfd57c 	.word	0x5acfd57c
    f804:	3de5d93a 	.word	0x3de5d93a
    f808:	8a2b9ceb 	.word	0x8a2b9ceb
    f80c:	be5ae5e6 	.word	0xbe5ae5e6
    f810:	57b1fe7d 	.word	0x57b1fe7d
    f814:	3ec71de3 	.word	0x3ec71de3
    f818:	19c161d5 	.word	0x19c161d5
    f81c:	bf2a01a0 	.word	0xbf2a01a0
    f820:	1110f8a6 	.word	0x1110f8a6
    f824:	3f811111 	.word	0x3f811111
    f828:	55555549 	.word	0x55555549
    f82c:	bfc55555 	.word	0xbfc55555
    f830:	55555549 	.word	0x55555549
    f834:	3fc55555 	.word	0x3fc55555

0000f838 <__ieee754_asinf>:
    f838:	b538      	push	{r3, r4, r5, lr}
    f83a:	ee10 5a10 	vmov	r5, s0
    f83e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    f842:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
    f846:	ed2d 8b04 	vpush	{d8-d9}
    f84a:	f000 8085 	beq.w	f958 <__ieee754_asinf+0x120>
    f84e:	dc7a      	bgt.n	f946 <__ieee754_asinf+0x10e>
    f850:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    f854:	da0f      	bge.n	f876 <__ieee754_asinf+0x3e>
    f856:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
    f85a:	f280 809c 	bge.w	f996 <__ieee754_asinf+0x15e>
    f85e:	eddf 7a69 	vldr	s15, [pc, #420]	; fa04 <__ieee754_asinf+0x1cc>
    f862:	ee70 7a27 	vadd.f32	s15, s0, s15
    f866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f86a:	eef4 7ac7 	vcmpe.f32	s15, s14
    f86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f872:	f300 808d 	bgt.w	f990 <__ieee754_asinf+0x158>
    f876:	f7ff fe23 	bl	f4c0 <fabsf>
    f87a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f87e:	ee37 0ac0 	vsub.f32	s0, s15, s0
    f882:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    f886:	ee20 8a07 	vmul.f32	s16, s0, s14
    f88a:	eddf 6a5f 	vldr	s13, [pc, #380]	; fa08 <__ieee754_asinf+0x1d0>
    f88e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; fa0c <__ieee754_asinf+0x1d4>
    f892:	ed9f 6a5f 	vldr	s12, [pc, #380]	; fa10 <__ieee754_asinf+0x1d8>
    f896:	ed9f 5a5f 	vldr	s10, [pc, #380]	; fa14 <__ieee754_asinf+0x1dc>
    f89a:	eddf 5a5f 	vldr	s11, [pc, #380]	; fa18 <__ieee754_asinf+0x1e0>
    f89e:	eddf 8a5f 	vldr	s17, [pc, #380]	; fa1c <__ieee754_asinf+0x1e4>
    f8a2:	eee8 6a07 	vfma.f32	s13, s16, s14
    f8a6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; fa20 <__ieee754_asinf+0x1e8>
    f8aa:	eea8 7a06 	vfma.f32	s14, s16, s12
    f8ae:	ed9f 6a5d 	vldr	s12, [pc, #372]	; fa24 <__ieee754_asinf+0x1ec>
    f8b2:	eea6 5a88 	vfma.f32	s10, s13, s16
    f8b6:	eea7 6a08 	vfma.f32	s12, s14, s16
    f8ba:	ed9f 7a5b 	vldr	s14, [pc, #364]	; fa28 <__ieee754_asinf+0x1f0>
    f8be:	eddf 6a5b 	vldr	s13, [pc, #364]	; fa2c <__ieee754_asinf+0x1f4>
    f8c2:	eee5 5a08 	vfma.f32	s11, s10, s16
    f8c6:	eea6 7a08 	vfma.f32	s14, s12, s16
    f8ca:	eee5 6a88 	vfma.f32	s13, s11, s16
    f8ce:	eee7 7a08 	vfma.f32	s15, s14, s16
    f8d2:	eee6 8a88 	vfma.f32	s17, s13, s16
    f8d6:	eeb0 0a48 	vmov.f32	s0, s16
    f8da:	eeb0 9a67 	vmov.f32	s18, s15
    f8de:	f7ff fdf7 	bl	f4d0 <__ieee754_sqrtf>
    f8e2:	4b53      	ldr	r3, [pc, #332]	; (fa30 <__ieee754_asinf+0x1f8>)
    f8e4:	429c      	cmp	r4, r3
    f8e6:	ee68 8a88 	vmul.f32	s17, s17, s16
    f8ea:	dc42      	bgt.n	f972 <__ieee754_asinf+0x13a>
    f8ec:	ee10 3a10 	vmov	r3, s0
    f8f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    f8f4:	f023 030f 	bic.w	r3, r3, #15
    f8f8:	ee06 3a90 	vmov	s13, r3
    f8fc:	eea6 8ae6 	vfms.f32	s16, s13, s13
    f900:	ee30 7a26 	vadd.f32	s14, s0, s13
    f904:	ee88 5a89 	vdiv.f32	s10, s17, s18
    f908:	eec8 4a07 	vdiv.f32	s9, s16, s14
    f90c:	eddf 7a49 	vldr	s15, [pc, #292]	; fa34 <__ieee754_asinf+0x1fc>
    f910:	ed9f 7a49 	vldr	s14, [pc, #292]	; fa38 <__ieee754_asinf+0x200>
    f914:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    f918:	eee4 7ac6 	vfms.f32	s15, s9, s12
    f91c:	ee30 0a00 	vadd.f32	s0, s0, s0
    f920:	eef0 5a47 	vmov.f32	s11, s14
    f924:	eee6 5ac6 	vfms.f32	s11, s13, s12
    f928:	eed0 7a05 	vfnms.f32	s15, s0, s10
    f92c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    f930:	ee37 7a67 	vsub.f32	s14, s14, s15
    f934:	2d00      	cmp	r5, #0
    f936:	dc0a      	bgt.n	f94e <__ieee754_asinf+0x116>
    f938:	ecbd 8b04 	vpop	{d8-d9}
    f93c:	eeb1 7a47 	vneg.f32	s14, s14
    f940:	eeb0 0a47 	vmov.f32	s0, s14
    f944:	bd38      	pop	{r3, r4, r5, pc}
    f946:	ee70 7a40 	vsub.f32	s15, s0, s0
    f94a:	ee87 7aa7 	vdiv.f32	s14, s15, s15
    f94e:	ecbd 8b04 	vpop	{d8-d9}
    f952:	eeb0 0a47 	vmov.f32	s0, s14
    f956:	bd38      	pop	{r3, r4, r5, pc}
    f958:	ed9f 7a36 	vldr	s14, [pc, #216]	; fa34 <__ieee754_asinf+0x1fc>
    f95c:	eddf 7a37 	vldr	s15, [pc, #220]	; fa3c <__ieee754_asinf+0x204>
    f960:	ee20 7a07 	vmul.f32	s14, s0, s14
    f964:	ecbd 8b04 	vpop	{d8-d9}
    f968:	eea0 7a27 	vfma.f32	s14, s0, s15
    f96c:	eeb0 0a47 	vmov.f32	s0, s14
    f970:	bd38      	pop	{r3, r4, r5, pc}
    f972:	ee88 6a89 	vdiv.f32	s12, s17, s18
    f976:	eddf 7a32 	vldr	s15, [pc, #200]	; fa40 <__ieee754_asinf+0x208>
    f97a:	ed9f 7a30 	vldr	s14, [pc, #192]	; fa3c <__ieee754_asinf+0x204>
    f97e:	eea0 0a06 	vfma.f32	s0, s0, s12
    f982:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    f986:	eee0 7a26 	vfma.f32	s15, s0, s13
    f98a:	ee37 7a67 	vsub.f32	s14, s14, s15
    f98e:	e7d1      	b.n	f934 <__ieee754_asinf+0xfc>
    f990:	eeb0 7a40 	vmov.f32	s14, s0
    f994:	e7db      	b.n	f94e <__ieee754_asinf+0x116>
    f996:	ee60 7a00 	vmul.f32	s15, s0, s0
    f99a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; fa0c <__ieee754_asinf+0x1d4>
    f99e:	eddf 6a1a 	vldr	s13, [pc, #104]	; fa08 <__ieee754_asinf+0x1d0>
    f9a2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; fa14 <__ieee754_asinf+0x1dc>
    f9a6:	eddf 5a1a 	vldr	s11, [pc, #104]	; fa10 <__ieee754_asinf+0x1d8>
    f9aa:	ed9f 5a1b 	vldr	s10, [pc, #108]	; fa18 <__ieee754_asinf+0x1e0>
    f9ae:	eee7 6a87 	vfma.f32	s13, s15, s14
    f9b2:	ecbd 8b04 	vpop	{d8-d9}
    f9b6:	eea6 6aa7 	vfma.f32	s12, s13, s15
    f9ba:	ed9f 7a19 	vldr	s14, [pc, #100]	; fa20 <__ieee754_asinf+0x1e8>
    f9be:	eddf 6a19 	vldr	s13, [pc, #100]	; fa24 <__ieee754_asinf+0x1ec>
    f9c2:	eea7 7aa5 	vfma.f32	s14, s15, s11
    f9c6:	eea6 5a27 	vfma.f32	s10, s12, s15
    f9ca:	eee7 6a27 	vfma.f32	s13, s14, s15
    f9ce:	eddf 5a17 	vldr	s11, [pc, #92]	; fa2c <__ieee754_asinf+0x1f4>
    f9d2:	ed9f 6a15 	vldr	s12, [pc, #84]	; fa28 <__ieee754_asinf+0x1f0>
    f9d6:	ed9f 7a11 	vldr	s14, [pc, #68]	; fa1c <__ieee754_asinf+0x1e4>
    f9da:	eee5 5a27 	vfma.f32	s11, s10, s15
    f9de:	eea6 6aa7 	vfma.f32	s12, s13, s15
    f9e2:	eea5 7aa7 	vfma.f32	s14, s11, s15
    f9e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f9ea:	eee6 6a27 	vfma.f32	s13, s12, s15
    f9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
    f9f2:	eeb0 7a40 	vmov.f32	s14, s0
    f9f6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
    f9fa:	eea0 7a06 	vfma.f32	s14, s0, s12
    f9fe:	eeb0 0a47 	vmov.f32	s0, s14
    fa02:	bd38      	pop	{r3, r4, r5, pc}
    fa04:	7149f2ca 	.word	0x7149f2ca
    fa08:	3a4f7f04 	.word	0x3a4f7f04
    fa0c:	3811ef08 	.word	0x3811ef08
    fa10:	3d9dc62e 	.word	0x3d9dc62e
    fa14:	bd241146 	.word	0xbd241146
    fa18:	3e4e0aa8 	.word	0x3e4e0aa8
    fa1c:	3e2aaaab 	.word	0x3e2aaaab
    fa20:	bf303361 	.word	0xbf303361
    fa24:	4001572d 	.word	0x4001572d
    fa28:	c019d139 	.word	0xc019d139
    fa2c:	bea6b090 	.word	0xbea6b090
    fa30:	3f799999 	.word	0x3f799999
    fa34:	b33bbd2e 	.word	0xb33bbd2e
    fa38:	3f490fdb 	.word	0x3f490fdb
    fa3c:	3fc90fdb 	.word	0x3fc90fdb
    fa40:	333bbd2e 	.word	0x333bbd2e

0000fa44 <__ieee754_atan2f>:
    fa44:	b510      	push	{r4, lr}
    fa46:	b082      	sub	sp, #8
    fa48:	edcd 0a01 	vstr	s1, [sp, #4]
    fa4c:	9b01      	ldr	r3, [sp, #4]
    fa4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    fa52:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fa56:	eef0 7a40 	vmov.f32	s15, s0
    fa5a:	dc30      	bgt.n	fabe <__ieee754_atan2f+0x7a>
    fa5c:	ee10 0a10 	vmov	r0, s0
    fa60:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    fa64:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fa68:	dc29      	bgt.n	fabe <__ieee754_atan2f+0x7a>
    fa6a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
    fa6e:	d040      	beq.n	faf2 <__ieee754_atan2f+0xae>
    fa70:	179c      	asrs	r4, r3, #30
    fa72:	f004 0402 	and.w	r4, r4, #2
    fa76:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    fa7a:	b331      	cbz	r1, faca <__ieee754_atan2f+0x86>
    fa7c:	b372      	cbz	r2, fadc <__ieee754_atan2f+0x98>
    fa7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fa82:	d03e      	beq.n	fb02 <__ieee754_atan2f+0xbe>
    fa84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fa88:	d028      	beq.n	fadc <__ieee754_atan2f+0x98>
    fa8a:	1a89      	subs	r1, r1, r2
    fa8c:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
    fa90:	ea4f 52e1 	mov.w	r2, r1, asr #23
    fa94:	da32      	bge.n	fafc <__ieee754_atan2f+0xb8>
    fa96:	2b00      	cmp	r3, #0
    fa98:	da40      	bge.n	fb1c <__ieee754_atan2f+0xd8>
    fa9a:	323c      	adds	r2, #60	; 0x3c
    fa9c:	da3e      	bge.n	fb1c <__ieee754_atan2f+0xd8>
    fa9e:	ed9f 0a33 	vldr	s0, [pc, #204]	; fb6c <__ieee754_atan2f+0x128>
    faa2:	2c01      	cmp	r4, #1
    faa4:	d04c      	beq.n	fb40 <__ieee754_atan2f+0xfc>
    faa6:	2c02      	cmp	r4, #2
    faa8:	d041      	beq.n	fb2e <__ieee754_atan2f+0xea>
    faaa:	b164      	cbz	r4, fac6 <__ieee754_atan2f+0x82>
    faac:	ed9f 7a30 	vldr	s14, [pc, #192]	; fb70 <__ieee754_atan2f+0x12c>
    fab0:	eddf 7a30 	vldr	s15, [pc, #192]	; fb74 <__ieee754_atan2f+0x130>
    fab4:	ee30 0a07 	vadd.f32	s0, s0, s14
    fab8:	ee30 0a67 	vsub.f32	s0, s0, s15
    fabc:	e003      	b.n	fac6 <__ieee754_atan2f+0x82>
    fabe:	ed9d 7a01 	vldr	s14, [sp, #4]
    fac2:	ee37 0a27 	vadd.f32	s0, s14, s15
    fac6:	b002      	add	sp, #8
    fac8:	bd10      	pop	{r4, pc}
    faca:	2c02      	cmp	r4, #2
    facc:	d00e      	beq.n	faec <__ieee754_atan2f+0xa8>
    face:	ed9f 7a2a 	vldr	s14, [pc, #168]	; fb78 <__ieee754_atan2f+0x134>
    fad2:	2c03      	cmp	r4, #3
    fad4:	fe07 0a00 	vseleq.f32	s0, s14, s0
    fad8:	b002      	add	sp, #8
    fada:	bd10      	pop	{r4, pc}
    fadc:	ed9f 0a27 	vldr	s0, [pc, #156]	; fb7c <__ieee754_atan2f+0x138>
    fae0:	eddf 7a27 	vldr	s15, [pc, #156]	; fb80 <__ieee754_atan2f+0x13c>
    fae4:	2800      	cmp	r0, #0
    fae6:	fe20 0a27 	vselge.f32	s0, s0, s15
    faea:	e7ec      	b.n	fac6 <__ieee754_atan2f+0x82>
    faec:	ed9f 0a21 	vldr	s0, [pc, #132]	; fb74 <__ieee754_atan2f+0x130>
    faf0:	e7e9      	b.n	fac6 <__ieee754_atan2f+0x82>
    faf2:	b002      	add	sp, #8
    faf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    faf8:	f000 b84a 	b.w	fb90 <atanf>
    fafc:	ed9f 0a1f 	vldr	s0, [pc, #124]	; fb7c <__ieee754_atan2f+0x138>
    fb00:	e7cf      	b.n	faa2 <__ieee754_atan2f+0x5e>
    fb02:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fb06:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    fb0a:	d020      	beq.n	fb4e <__ieee754_atan2f+0x10a>
    fb0c:	2c02      	cmp	r4, #2
    fb0e:	d826      	bhi.n	fb5e <__ieee754_atan2f+0x11a>
    fb10:	4b1c      	ldr	r3, [pc, #112]	; (fb84 <__ieee754_atan2f+0x140>)
    fb12:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fb16:	ed93 0a00 	vldr	s0, [r3]
    fb1a:	e7d4      	b.n	fac6 <__ieee754_atan2f+0x82>
    fb1c:	ed9d 7a01 	vldr	s14, [sp, #4]
    fb20:	ee87 0a87 	vdiv.f32	s0, s15, s14
    fb24:	f7ff fccc 	bl	f4c0 <fabsf>
    fb28:	f000 f832 	bl	fb90 <atanf>
    fb2c:	e7b9      	b.n	faa2 <__ieee754_atan2f+0x5e>
    fb2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; fb70 <__ieee754_atan2f+0x12c>
    fb32:	eddf 7a10 	vldr	s15, [pc, #64]	; fb74 <__ieee754_atan2f+0x130>
    fb36:	ee30 0a07 	vadd.f32	s0, s0, s14
    fb3a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fb3e:	e7c2      	b.n	fac6 <__ieee754_atan2f+0x82>
    fb40:	ee10 3a10 	vmov	r3, s0
    fb44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    fb48:	ee00 3a10 	vmov	s0, r3
    fb4c:	e7bb      	b.n	fac6 <__ieee754_atan2f+0x82>
    fb4e:	2c02      	cmp	r4, #2
    fb50:	d808      	bhi.n	fb64 <__ieee754_atan2f+0x120>
    fb52:	4b0d      	ldr	r3, [pc, #52]	; (fb88 <__ieee754_atan2f+0x144>)
    fb54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fb58:	ed93 0a00 	vldr	s0, [r3]
    fb5c:	e7b3      	b.n	fac6 <__ieee754_atan2f+0x82>
    fb5e:	ed9f 0a03 	vldr	s0, [pc, #12]	; fb6c <__ieee754_atan2f+0x128>
    fb62:	e7b0      	b.n	fac6 <__ieee754_atan2f+0x82>
    fb64:	ed9f 0a09 	vldr	s0, [pc, #36]	; fb8c <__ieee754_atan2f+0x148>
    fb68:	e7ad      	b.n	fac6 <__ieee754_atan2f+0x82>
    fb6a:	bf00      	nop
    fb6c:	00000000 	.word	0x00000000
    fb70:	33bbbd2e 	.word	0x33bbbd2e
    fb74:	40490fdb 	.word	0x40490fdb
    fb78:	c0490fdb 	.word	0xc0490fdb
    fb7c:	3fc90fdb 	.word	0x3fc90fdb
    fb80:	bfc90fdb 	.word	0xbfc90fdb
    fb84:	20001c74 	.word	0x20001c74
    fb88:	20001c68 	.word	0x20001c68
    fb8c:	3f490fdb 	.word	0x3f490fdb

0000fb90 <atanf>:
    fb90:	b538      	push	{r3, r4, r5, lr}
    fb92:	ee10 5a10 	vmov	r5, s0
    fb96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    fb9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
    fb9e:	eef0 7a40 	vmov.f32	s15, s0
    fba2:	db0a      	blt.n	fbba <atanf+0x2a>
    fba4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    fba8:	dc58      	bgt.n	fc5c <atanf+0xcc>
    fbaa:	eddf 7a51 	vldr	s15, [pc, #324]	; fcf0 <atanf+0x160>
    fbae:	ed9f 7a51 	vldr	s14, [pc, #324]	; fcf4 <atanf+0x164>
    fbb2:	2d00      	cmp	r5, #0
    fbb4:	fe37 0a87 	vselgt.f32	s0, s15, s14
    fbb8:	bd38      	pop	{r3, r4, r5, pc}
    fbba:	4b4f      	ldr	r3, [pc, #316]	; (fcf8 <atanf+0x168>)
    fbbc:	429c      	cmp	r4, r3
    fbbe:	dc5c      	bgt.n	fc7a <atanf+0xea>
    fbc0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
    fbc4:	db4d      	blt.n	fc62 <atanf+0xd2>
    fbc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fbca:	ee27 6aa7 	vmul.f32	s12, s15, s15
    fbce:	eddf 6a4b 	vldr	s13, [pc, #300]	; fcfc <atanf+0x16c>
    fbd2:	eddf 5a4b 	vldr	s11, [pc, #300]	; fd00 <atanf+0x170>
    fbd6:	eddf 4a4b 	vldr	s9, [pc, #300]	; fd04 <atanf+0x174>
    fbda:	ed9f 5a4b 	vldr	s10, [pc, #300]	; fd08 <atanf+0x178>
    fbde:	ed9f 4a4b 	vldr	s8, [pc, #300]	; fd0c <atanf+0x17c>
    fbe2:	ee26 7a06 	vmul.f32	s14, s12, s12
    fbe6:	1c5a      	adds	r2, r3, #1
    fbe8:	eee7 5a26 	vfma.f32	s11, s14, s13
    fbec:	eddf 6a48 	vldr	s13, [pc, #288]	; fd10 <atanf+0x180>
    fbf0:	eea5 5a87 	vfma.f32	s10, s11, s14
    fbf4:	eee7 6a24 	vfma.f32	s13, s14, s9
    fbf8:	eddf 5a46 	vldr	s11, [pc, #280]	; fd14 <atanf+0x184>
    fbfc:	eddf 4a46 	vldr	s9, [pc, #280]	; fd18 <atanf+0x188>
    fc00:	eee6 5a87 	vfma.f32	s11, s13, s14
    fc04:	eea5 4a07 	vfma.f32	s8, s10, s14
    fc08:	ed9f 5a44 	vldr	s10, [pc, #272]	; fd1c <atanf+0x18c>
    fc0c:	eddf 6a44 	vldr	s13, [pc, #272]	; fd20 <atanf+0x190>
    fc10:	eea5 5a87 	vfma.f32	s10, s11, s14
    fc14:	eee4 4a07 	vfma.f32	s9, s8, s14
    fc18:	eddf 5a42 	vldr	s11, [pc, #264]	; fd24 <atanf+0x194>
    fc1c:	eee4 6a87 	vfma.f32	s13, s9, s14
    fc20:	eee5 5a07 	vfma.f32	s11, s10, s14
    fc24:	ee66 6a86 	vmul.f32	s13, s13, s12
    fc28:	ee65 5a87 	vmul.f32	s11, s11, s14
    fc2c:	d03a      	beq.n	fca4 <atanf+0x114>
    fc2e:	4a3e      	ldr	r2, [pc, #248]	; (fd28 <atanf+0x198>)
    fc30:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    fc34:	ee76 6aa5 	vadd.f32	s13, s13, s11
    fc38:	ed92 7a00 	vldr	s14, [r2]
    fc3c:	4a3b      	ldr	r2, [pc, #236]	; (fd2c <atanf+0x19c>)
    fc3e:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    fc42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    fc46:	2d00      	cmp	r5, #0
    fc48:	edd3 6a00 	vldr	s13, [r3]
    fc4c:	ee77 7a67 	vsub.f32	s15, s14, s15
    fc50:	ee36 0ae7 	vsub.f32	s0, s13, s15
    fc54:	dab0      	bge.n	fbb8 <atanf+0x28>
    fc56:	eeb1 0a40 	vneg.f32	s0, s0
    fc5a:	bd38      	pop	{r3, r4, r5, pc}
    fc5c:	ee30 0a00 	vadd.f32	s0, s0, s0
    fc60:	bd38      	pop	{r3, r4, r5, pc}
    fc62:	ed9f 7a33 	vldr	s14, [pc, #204]	; fd30 <atanf+0x1a0>
    fc66:	ee30 7a07 	vadd.f32	s14, s0, s14
    fc6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    fc6e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    fc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc76:	dda6      	ble.n	fbc6 <atanf+0x36>
    fc78:	bd38      	pop	{r3, r4, r5, pc}
    fc7a:	f7ff fc21 	bl	f4c0 <fabsf>
    fc7e:	4b2d      	ldr	r3, [pc, #180]	; (fd34 <atanf+0x1a4>)
    fc80:	429c      	cmp	r4, r3
    fc82:	dc16      	bgt.n	fcb2 <atanf+0x122>
    fc84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
    fc88:	429c      	cmp	r4, r3
    fc8a:	dc27      	bgt.n	fcdc <atanf+0x14c>
    fc8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    fc90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    fc94:	eea0 7a27 	vfma.f32	s14, s0, s15
    fc98:	2300      	movs	r3, #0
    fc9a:	ee30 0a27 	vadd.f32	s0, s0, s15
    fc9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    fca2:	e792      	b.n	fbca <atanf+0x3a>
    fca4:	ee76 6aa5 	vadd.f32	s13, s13, s11
    fca8:	eee6 7ae7 	vfms.f32	s15, s13, s15
    fcac:	eeb0 0a67 	vmov.f32	s0, s15
    fcb0:	bd38      	pop	{r3, r4, r5, pc}
    fcb2:	4b21      	ldr	r3, [pc, #132]	; (fd38 <atanf+0x1a8>)
    fcb4:	429c      	cmp	r4, r3
    fcb6:	dc0b      	bgt.n	fcd0 <atanf+0x140>
    fcb8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    fcbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    fcc0:	eea0 7a27 	vfma.f32	s14, s0, s15
    fcc4:	2302      	movs	r3, #2
    fcc6:	ee30 0a67 	vsub.f32	s0, s0, s15
    fcca:	eec0 7a07 	vdiv.f32	s15, s0, s14
    fcce:	e77c      	b.n	fbca <atanf+0x3a>
    fcd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    fcd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    fcd8:	2303      	movs	r3, #3
    fcda:	e776      	b.n	fbca <atanf+0x3a>
    fcdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fce0:	ee30 7a67 	vsub.f32	s14, s0, s15
    fce4:	ee30 0a27 	vadd.f32	s0, s0, s15
    fce8:	2301      	movs	r3, #1
    fcea:	eec7 7a00 	vdiv.f32	s15, s14, s0
    fcee:	e76c      	b.n	fbca <atanf+0x3a>
    fcf0:	3fc90fdb 	.word	0x3fc90fdb
    fcf4:	bfc90fdb 	.word	0xbfc90fdb
    fcf8:	3edfffff 	.word	0x3edfffff
    fcfc:	3c8569d7 	.word	0x3c8569d7
    fd00:	3d4bda59 	.word	0x3d4bda59
    fd04:	bd15a221 	.word	0xbd15a221
    fd08:	3d886b35 	.word	0x3d886b35
    fd0c:	3dba2e6e 	.word	0x3dba2e6e
    fd10:	bd6ef16b 	.word	0xbd6ef16b
    fd14:	bd9d8795 	.word	0xbd9d8795
    fd18:	3e124925 	.word	0x3e124925
    fd1c:	bde38e38 	.word	0xbde38e38
    fd20:	3eaaaaab 	.word	0x3eaaaaab
    fd24:	be4ccccd 	.word	0xbe4ccccd
    fd28:	200026c8 	.word	0x200026c8
    fd2c:	200026b8 	.word	0x200026b8
    fd30:	7149f2ca 	.word	0x7149f2ca
    fd34:	3f97ffff 	.word	0x3f97ffff
    fd38:	401bffff 	.word	0x401bffff
    fd3c:	00000000 	.word	0x00000000

0000fd40 <__ieee754_rem_pio2>:
    fd40:	b570      	push	{r4, r5, r6, lr}
    fd42:	ec53 2b10 	vmov	r2, r3, d0
    fd46:	499c      	ldr	r1, [pc, #624]	; (ffb8 <__ieee754_rem_pio2+0x278>)
    fd48:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    fd4c:	428d      	cmp	r5, r1
    fd4e:	b088      	sub	sp, #32
    fd50:	4604      	mov	r4, r0
    fd52:	dd6a      	ble.n	fe2a <__ieee754_rem_pio2+0xea>
    fd54:	4999      	ldr	r1, [pc, #612]	; (ffbc <__ieee754_rem_pio2+0x27c>)
    fd56:	428d      	cmp	r5, r1
    fd58:	461e      	mov	r6, r3
    fd5a:	dc1b      	bgt.n	fd94 <__ieee754_rem_pio2+0x54>
    fd5c:	2b00      	cmp	r3, #0
    fd5e:	ed9f 7b86 	vldr	d7, [pc, #536]	; ff78 <__ieee754_rem_pio2+0x238>
    fd62:	f340 80eb 	ble.w	ff3c <__ieee754_rem_pio2+0x1fc>
    fd66:	ee30 7b47 	vsub.f64	d7, d0, d7
    fd6a:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
    fd6e:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
    fd72:	428d      	cmp	r5, r1
    fd74:	d06a      	beq.n	fe4c <__ieee754_rem_pio2+0x10c>
    fd76:	ed9f 6b82 	vldr	d6, [pc, #520]	; ff80 <__ieee754_rem_pio2+0x240>
    fd7a:	2001      	movs	r0, #1
    fd7c:	ee37 5b46 	vsub.f64	d5, d7, d6
    fd80:	ee37 7b45 	vsub.f64	d7, d7, d5
    fd84:	ed84 5b00 	vstr	d5, [r4]
    fd88:	ee37 7b46 	vsub.f64	d7, d7, d6
    fd8c:	ed84 7b02 	vstr	d7, [r4, #8]
    fd90:	b008      	add	sp, #32
    fd92:	bd70      	pop	{r4, r5, r6, pc}
    fd94:	498a      	ldr	r1, [pc, #552]	; (ffc0 <__ieee754_rem_pio2+0x280>)
    fd96:	428d      	cmp	r5, r1
    fd98:	dd60      	ble.n	fe5c <__ieee754_rem_pio2+0x11c>
    fd9a:	498a      	ldr	r1, [pc, #552]	; (ffc4 <__ieee754_rem_pio2+0x284>)
    fd9c:	428d      	cmp	r5, r1
    fd9e:	dc4d      	bgt.n	fe3c <__ieee754_rem_pio2+0xfc>
    fda0:	152a      	asrs	r2, r5, #20
    fda2:	ee10 0a10 	vmov	r0, s0
    fda6:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
    fdaa:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
    fdae:	ec41 0b17 	vmov	d7, r0, r1
    fdb2:	ed9f 5b75 	vldr	d5, [pc, #468]	; ff88 <__ieee754_rem_pio2+0x248>
    fdb6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    fdba:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    fdbe:	ee37 7b46 	vsub.f64	d7, d7, d6
    fdc2:	ee27 7b05 	vmul.f64	d7, d7, d5
    fdc6:	eefd 4bc7 	vcvt.s32.f64	s9, d7
    fdca:	ed8d 6b02 	vstr	d6, [sp, #8]
    fdce:	eeb8 6be4 	vcvt.f64.s32	d6, s9
    fdd2:	ee37 7b46 	vsub.f64	d7, d7, d6
    fdd6:	ee27 7b05 	vmul.f64	d7, d7, d5
    fdda:	eeb5 7b40 	vcmp.f64	d7, #0.0
    fdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fde2:	ed8d 6b04 	vstr	d6, [sp, #16]
    fde6:	ed8d 7b06 	vstr	d7, [sp, #24]
    fdea:	f040 8096 	bne.w	ff1a <__ieee754_rem_pio2+0x1da>
    fdee:	ee14 3a90 	vmov	r3, s9
    fdf2:	2b00      	cmp	r3, #0
    fdf4:	bf0c      	ite	eq
    fdf6:	2301      	moveq	r3, #1
    fdf8:	2302      	movne	r3, #2
    fdfa:	4973      	ldr	r1, [pc, #460]	; (ffc8 <__ieee754_rem_pio2+0x288>)
    fdfc:	9101      	str	r1, [sp, #4]
    fdfe:	2102      	movs	r1, #2
    fe00:	9100      	str	r1, [sp, #0]
    fe02:	a802      	add	r0, sp, #8
    fe04:	4621      	mov	r1, r4
    fe06:	f000 f8e7 	bl	ffd8 <__kernel_rem_pio2>
    fe0a:	2e00      	cmp	r6, #0
    fe0c:	dac0      	bge.n	fd90 <__ieee754_rem_pio2+0x50>
    fe0e:	ed94 6b00 	vldr	d6, [r4]
    fe12:	ed94 7b02 	vldr	d7, [r4, #8]
    fe16:	eeb1 6b46 	vneg.f64	d6, d6
    fe1a:	eeb1 7b47 	vneg.f64	d7, d7
    fe1e:	ed84 6b00 	vstr	d6, [r4]
    fe22:	ed84 7b02 	vstr	d7, [r4, #8]
    fe26:	4240      	negs	r0, r0
    fe28:	e7b2      	b.n	fd90 <__ieee754_rem_pio2+0x50>
    fe2a:	2000      	movs	r0, #0
    fe2c:	2100      	movs	r1, #0
    fe2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    fe32:	2000      	movs	r0, #0
    fe34:	ed84 0b00 	vstr	d0, [r4]
    fe38:	b008      	add	sp, #32
    fe3a:	bd70      	pop	{r4, r5, r6, pc}
    fe3c:	ee30 7b40 	vsub.f64	d7, d0, d0
    fe40:	2000      	movs	r0, #0
    fe42:	ed84 7b02 	vstr	d7, [r4, #8]
    fe46:	ed84 7b00 	vstr	d7, [r4]
    fe4a:	e7a1      	b.n	fd90 <__ieee754_rem_pio2+0x50>
    fe4c:	ed9f 5b50 	vldr	d5, [pc, #320]	; ff90 <__ieee754_rem_pio2+0x250>
    fe50:	ed9f 6b51 	vldr	d6, [pc, #324]	; ff98 <__ieee754_rem_pio2+0x258>
    fe54:	ee37 7b45 	vsub.f64	d7, d7, d5
    fe58:	2001      	movs	r0, #1
    fe5a:	e78f      	b.n	fd7c <__ieee754_rem_pio2+0x3c>
    fe5c:	f000 fc04 	bl	10668 <fabs>
    fe60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    fe64:	ed9f 5b4e 	vldr	d5, [pc, #312]	; ffa0 <__ieee754_rem_pio2+0x260>
    fe68:	eea0 7b05 	vfma.f64	d7, d0, d5
    fe6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    fe70:	ed9f 3b41 	vldr	d3, [pc, #260]	; ff78 <__ieee754_rem_pio2+0x238>
    fe74:	ee17 0a90 	vmov	r0, s15
    fe78:	ed9f 6b41 	vldr	d6, [pc, #260]	; ff80 <__ieee754_rem_pio2+0x240>
    fe7c:	281f      	cmp	r0, #31
    fe7e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    fe82:	eeb1 4b45 	vneg.f64	d4, d5
    fe86:	eea5 0b43 	vfms.f64	d0, d5, d3
    fe8a:	ee25 7b06 	vmul.f64	d7, d5, d6
    fe8e:	dc1c      	bgt.n	feca <__ieee754_rem_pio2+0x18a>
    fe90:	4b4e      	ldr	r3, [pc, #312]	; (ffcc <__ieee754_rem_pio2+0x28c>)
    fe92:	1e42      	subs	r2, r0, #1
    fe94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    fe98:	42ab      	cmp	r3, r5
    fe9a:	d016      	beq.n	feca <__ieee754_rem_pio2+0x18a>
    fe9c:	ee30 6b47 	vsub.f64	d6, d0, d7
    fea0:	ed84 6b00 	vstr	d6, [r4]
    fea4:	ee30 0b46 	vsub.f64	d0, d0, d6
    fea8:	ee30 0b47 	vsub.f64	d0, d0, d7
    feac:	2e00      	cmp	r6, #0
    feae:	ed84 0b02 	vstr	d0, [r4, #8]
    feb2:	f6bf af6d 	bge.w	fd90 <__ieee754_rem_pio2+0x50>
    feb6:	eeb1 6b46 	vneg.f64	d6, d6
    feba:	eeb1 0b40 	vneg.f64	d0, d0
    febe:	ed84 6b00 	vstr	d6, [r4]
    fec2:	ed84 0b02 	vstr	d0, [r4, #8]
    fec6:	4240      	negs	r0, r0
    fec8:	e762      	b.n	fd90 <__ieee754_rem_pio2+0x50>
    feca:	ee30 6b47 	vsub.f64	d6, d0, d7
    fece:	ee16 3a90 	vmov	r3, s13
    fed2:	f3c3 530a 	ubfx	r3, r3, #20, #11
    fed6:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
    feda:	2b10      	cmp	r3, #16
    fedc:	ea4f 5225 	mov.w	r2, r5, asr #20
    fee0:	ddde      	ble.n	fea0 <__ieee754_rem_pio2+0x160>
    fee2:	eeb0 3b40 	vmov.f64	d3, d0
    fee6:	ed9f 6b2a 	vldr	d6, [pc, #168]	; ff90 <__ieee754_rem_pio2+0x250>
    feea:	ed9f 2b2b 	vldr	d2, [pc, #172]	; ff98 <__ieee754_rem_pio2+0x258>
    feee:	eea4 3b06 	vfma.f64	d3, d4, d6
    fef2:	ee30 7b43 	vsub.f64	d7, d0, d3
    fef6:	eea4 7b06 	vfma.f64	d7, d4, d6
    fefa:	ee95 7b02 	vfnms.f64	d7, d5, d2
    fefe:	ee33 6b47 	vsub.f64	d6, d3, d7
    ff02:	ee16 3a90 	vmov	r3, s13
    ff06:	f3c3 530a 	ubfx	r3, r3, #20, #11
    ff0a:	1ad2      	subs	r2, r2, r3
    ff0c:	2a31      	cmp	r2, #49	; 0x31
    ff0e:	dc06      	bgt.n	ff1e <__ieee754_rem_pio2+0x1de>
    ff10:	eeb0 0b43 	vmov.f64	d0, d3
    ff14:	ed84 6b00 	vstr	d6, [r4]
    ff18:	e7c4      	b.n	fea4 <__ieee754_rem_pio2+0x164>
    ff1a:	2303      	movs	r3, #3
    ff1c:	e76d      	b.n	fdfa <__ieee754_rem_pio2+0xba>
    ff1e:	ed9f 6b22 	vldr	d6, [pc, #136]	; ffa8 <__ieee754_rem_pio2+0x268>
    ff22:	eeb0 0b43 	vmov.f64	d0, d3
    ff26:	ed9f 2b22 	vldr	d2, [pc, #136]	; ffb0 <__ieee754_rem_pio2+0x270>
    ff2a:	eea4 0b06 	vfma.f64	d0, d4, d6
    ff2e:	ee33 7b40 	vsub.f64	d7, d3, d0
    ff32:	eea4 7b06 	vfma.f64	d7, d4, d6
    ff36:	ee95 7b02 	vfnms.f64	d7, d5, d2
    ff3a:	e7af      	b.n	fe9c <__ieee754_rem_pio2+0x15c>
    ff3c:	4924      	ldr	r1, [pc, #144]	; (ffd0 <__ieee754_rem_pio2+0x290>)
    ff3e:	ee30 7b07 	vadd.f64	d7, d0, d7
    ff42:	428d      	cmp	r5, r1
    ff44:	d00e      	beq.n	ff64 <__ieee754_rem_pio2+0x224>
    ff46:	ed9f 6b0e 	vldr	d6, [pc, #56]	; ff80 <__ieee754_rem_pio2+0x240>
    ff4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff4e:	ee37 5b06 	vadd.f64	d5, d7, d6
    ff52:	ee37 7b45 	vsub.f64	d7, d7, d5
    ff56:	ed84 5b00 	vstr	d5, [r4]
    ff5a:	ee37 7b06 	vadd.f64	d7, d7, d6
    ff5e:	ed84 7b02 	vstr	d7, [r4, #8]
    ff62:	e715      	b.n	fd90 <__ieee754_rem_pio2+0x50>
    ff64:	ed9f 5b0a 	vldr	d5, [pc, #40]	; ff90 <__ieee754_rem_pio2+0x250>
    ff68:	ed9f 6b0b 	vldr	d6, [pc, #44]	; ff98 <__ieee754_rem_pio2+0x258>
    ff6c:	ee37 7b05 	vadd.f64	d7, d7, d5
    ff70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff74:	e7eb      	b.n	ff4e <__ieee754_rem_pio2+0x20e>
    ff76:	bf00      	nop
    ff78:	54400000 	.word	0x54400000
    ff7c:	3ff921fb 	.word	0x3ff921fb
    ff80:	1a626331 	.word	0x1a626331
    ff84:	3dd0b461 	.word	0x3dd0b461
    ff88:	00000000 	.word	0x00000000
    ff8c:	41700000 	.word	0x41700000
    ff90:	1a600000 	.word	0x1a600000
    ff94:	3dd0b461 	.word	0x3dd0b461
    ff98:	2e037073 	.word	0x2e037073
    ff9c:	3ba3198a 	.word	0x3ba3198a
    ffa0:	6dc9c883 	.word	0x6dc9c883
    ffa4:	3fe45f30 	.word	0x3fe45f30
    ffa8:	2e000000 	.word	0x2e000000
    ffac:	3ba3198a 	.word	0x3ba3198a
    ffb0:	252049c1 	.word	0x252049c1
    ffb4:	397b839a 	.word	0x397b839a
    ffb8:	3fe921fb 	.word	0x3fe921fb
    ffbc:	4002d97b 	.word	0x4002d97b
    ffc0:	413921fb 	.word	0x413921fb
    ffc4:	7fefffff 	.word	0x7fefffff
    ffc8:	20002e64 	.word	0x20002e64
    ffcc:	20002a8c 	.word	0x20002a8c
    ffd0:	3ff921fb 	.word	0x3ff921fb
    ffd4:	00000000 	.word	0x00000000

0000ffd8 <__kernel_rem_pio2>:
    ffd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffdc:	ed2d 8b08 	vpush	{d8-d11}
    ffe0:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    ffe4:	461c      	mov	r4, r3
    ffe6:	9304      	str	r3, [sp, #16]
    ffe8:	9107      	str	r1, [sp, #28]
    ffea:	4bab      	ldr	r3, [pc, #684]	; (10298 <__kernel_rem_pio2+0x2c0>)
    ffec:	99a6      	ldr	r1, [sp, #664]	; 0x298
    ffee:	f112 0f14 	cmn.w	r2, #20
    fff2:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    fff6:	4682      	mov	sl, r0
    fff8:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    fffc:	f2c0 8299 	blt.w	10532 <__kernel_rem_pio2+0x55a>
   10000:	49a6      	ldr	r1, [pc, #664]	; (1029c <__kernel_rem_pio2+0x2c4>)
   10002:	1ed3      	subs	r3, r2, #3
   10004:	fb81 0103 	smull	r0, r1, r1, r3
   10008:	17db      	asrs	r3, r3, #31
   1000a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1000e:	9303      	str	r3, [sp, #12]
   10010:	3301      	adds	r3, #1
   10012:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   10016:	00db      	lsls	r3, r3, #3
   10018:	18d3      	adds	r3, r2, r3
   1001a:	9306      	str	r3, [sp, #24]
   1001c:	9b03      	ldr	r3, [sp, #12]
   1001e:	eb15 0108 	adds.w	r1, r5, r8
   10022:	eba3 0308 	sub.w	r3, r3, r8
   10026:	d41a      	bmi.n	1005e <__kernel_rem_pio2+0x86>
   10028:	3101      	adds	r1, #1
   1002a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 10280 <__kernel_rem_pio2+0x2a8>
   1002e:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   10030:	4419      	add	r1, r3
   10032:	aa1c      	add	r2, sp, #112	; 0x70
   10034:	e00a      	b.n	1004c <__kernel_rem_pio2+0x74>
   10036:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1003a:	ee07 4a90 	vmov	s15, r4
   1003e:	3301      	adds	r3, #1
   10040:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   10044:	428b      	cmp	r3, r1
   10046:	eca2 7b02 	vstmia	r2!, {d7}
   1004a:	d008      	beq.n	1005e <__kernel_rem_pio2+0x86>
   1004c:	2b00      	cmp	r3, #0
   1004e:	daf2      	bge.n	10036 <__kernel_rem_pio2+0x5e>
   10050:	eeb0 7b46 	vmov.f64	d7, d6
   10054:	3301      	adds	r3, #1
   10056:	428b      	cmp	r3, r1
   10058:	eca2 7b02 	vstmia	r2!, {d7}
   1005c:	d1f6      	bne.n	1004c <__kernel_rem_pio2+0x74>
   1005e:	2d00      	cmp	r5, #0
   10060:	f2c0 82c9 	blt.w	105f6 <__kernel_rem_pio2+0x61e>
   10064:	9b04      	ldr	r3, [sp, #16]
   10066:	aa1c      	add	r2, sp, #112	; 0x70
   10068:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1006c:	ae6c      	add	r6, sp, #432	; 0x1b0
   1006e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   10072:	4640      	mov	r0, r8
   10074:	18ef      	adds	r7, r5, r3
   10076:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   1007a:	f1b8 0f00 	cmp.w	r8, #0
   1007e:	ed9f 7b80 	vldr	d7, [pc, #512]	; 10280 <__kernel_rem_pio2+0x2a8>
   10082:	db09      	blt.n	10098 <__kernel_rem_pio2+0xc0>
   10084:	4622      	mov	r2, r4
   10086:	4653      	mov	r3, sl
   10088:	ecb3 5b02 	vldmia	r3!, {d5}
   1008c:	ed32 6b02 	vldmdb	r2!, {d6}
   10090:	428b      	cmp	r3, r1
   10092:	eea5 7b06 	vfma.f64	d7, d5, d6
   10096:	d1f7      	bne.n	10088 <__kernel_rem_pio2+0xb0>
   10098:	3001      	adds	r0, #1
   1009a:	42b8      	cmp	r0, r7
   1009c:	eca6 7b02 	vstmia	r6!, {d7}
   100a0:	f104 0408 	add.w	r4, r4, #8
   100a4:	d1e9      	bne.n	1007a <__kernel_rem_pio2+0xa2>
   100a6:	af08      	add	r7, sp, #32
   100a8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   100ac:	ed9f 9b76 	vldr	d9, [pc, #472]	; 10288 <__kernel_rem_pio2+0x2b0>
   100b0:	ed9f 8b77 	vldr	d8, [pc, #476]	; 10290 <__kernel_rem_pio2+0x2b8>
   100b4:	3b04      	subs	r3, #4
   100b6:	f8dd b018 	ldr.w	fp, [sp, #24]
   100ba:	9305      	str	r3, [sp, #20]
   100bc:	eb0a 040c 	add.w	r4, sl, ip
   100c0:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   100c4:	ae6c      	add	r6, sp, #432	; 0x1b0
   100c6:	4629      	mov	r1, r5
   100c8:	9501      	str	r5, [sp, #4]
   100ca:	ab94      	add	r3, sp, #592	; 0x250
   100cc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   100d0:	2900      	cmp	r1, #0
   100d2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   100d6:	dd16      	ble.n	10106 <__kernel_rem_pio2+0x12e>
   100d8:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   100dc:	463a      	mov	r2, r7
   100de:	ee20 7b09 	vmul.f64	d7, d0, d9
   100e2:	ed33 5b02 	vldmdb	r3!, {d5}
   100e6:	eeb0 6b40 	vmov.f64	d6, d0
   100ea:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   100ee:	42b3      	cmp	r3, r6
   100f0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   100f4:	eea7 6b48 	vfms.f64	d6, d7, d8
   100f8:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   100fc:	ee37 0b05 	vadd.f64	d0, d7, d5
   10100:	eca2 6a01 	vstmia	r2!, {s12}
   10104:	d1eb      	bne.n	100de <__kernel_rem_pio2+0x106>
   10106:	4658      	mov	r0, fp
   10108:	9102      	str	r1, [sp, #8]
   1010a:	f000 fb41 	bl	10790 <scalbn>
   1010e:	eeb0 ab40 	vmov.f64	d10, d0
   10112:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   10116:	ee2a 0b00 	vmul.f64	d0, d10, d0
   1011a:	f000 fab1 	bl	10680 <floor>
   1011e:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   10122:	eea0 ab47 	vfms.f64	d10, d0, d7
   10126:	eebd bbca 	vcvt.s32.f64	s22, d10
   1012a:	f1bb 0f00 	cmp.w	fp, #0
   1012e:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   10132:	9902      	ldr	r1, [sp, #8]
   10134:	ee3a ab47 	vsub.f64	d10, d10, d7
   10138:	dd74      	ble.n	10224 <__kernel_rem_pio2+0x24c>
   1013a:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1013e:	f1cb 0318 	rsb	r3, fp, #24
   10142:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   10146:	fa42 fc03 	asr.w	ip, r2, r3
   1014a:	fa0c f303 	lsl.w	r3, ip, r3
   1014e:	1ad2      	subs	r2, r2, r3
   10150:	f1cb 0017 	rsb	r0, fp, #23
   10154:	ee1b 3a10 	vmov	r3, s22
   10158:	fa42 f500 	asr.w	r5, r2, r0
   1015c:	4463      	add	r3, ip
   1015e:	2d00      	cmp	r5, #0
   10160:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   10164:	ee0b 3a10 	vmov	s22, r3
   10168:	dc64      	bgt.n	10234 <__kernel_rem_pio2+0x25c>
   1016a:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1016e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10172:	f040 80c4 	bne.w	102fe <__kernel_rem_pio2+0x326>
   10176:	9b01      	ldr	r3, [sp, #4]
   10178:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   1017c:	4573      	cmp	r3, lr
   1017e:	dc0d      	bgt.n	1019c <__kernel_rem_pio2+0x1c4>
   10180:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   10184:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   10188:	2000      	movs	r0, #0
   1018a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1018e:	454b      	cmp	r3, r9
   10190:	ea40 0002 	orr.w	r0, r0, r2
   10194:	d1f9      	bne.n	1018a <__kernel_rem_pio2+0x1b2>
   10196:	2800      	cmp	r0, #0
   10198:	f040 80f2 	bne.w	10380 <__kernel_rem_pio2+0x3a8>
   1019c:	9b01      	ldr	r3, [sp, #4]
   1019e:	3b01      	subs	r3, #1
   101a0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   101a4:	2b00      	cmp	r3, #0
   101a6:	f040 80e6 	bne.w	10376 <__kernel_rem_pio2+0x39e>
   101aa:	9b05      	ldr	r3, [sp, #20]
   101ac:	2501      	movs	r5, #1
   101ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   101b2:	3501      	adds	r5, #1
   101b4:	2a00      	cmp	r2, #0
   101b6:	d0fa      	beq.n	101ae <__kernel_rem_pio2+0x1d6>
   101b8:	f101 0e01 	add.w	lr, r1, #1
   101bc:	440d      	add	r5, r1
   101be:	4670      	mov	r0, lr
   101c0:	9b04      	ldr	r3, [sp, #16]
   101c2:	4419      	add	r1, r3
   101c4:	9b03      	ldr	r3, [sp, #12]
   101c6:	eb03 0c0e 	add.w	ip, r3, lr
   101ca:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   101ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   101d0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   101d4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   101d8:	ab1c      	add	r3, sp, #112	; 0x70
   101da:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   101de:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   101e2:	ed9c 7a01 	vldr	s14, [ip, #4]
   101e6:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   101ea:	f1b8 0f00 	cmp.w	r8, #0
   101ee:	ed81 7b00 	vstr	d7, [r1]
   101f2:	f10c 0c04 	add.w	ip, ip, #4
   101f6:	460a      	mov	r2, r1
   101f8:	ed9f 6b21 	vldr	d6, [pc, #132]	; 10280 <__kernel_rem_pio2+0x2a8>
   101fc:	f101 0108 	add.w	r1, r1, #8
   10200:	db09      	blt.n	10216 <__kernel_rem_pio2+0x23e>
   10202:	4653      	mov	r3, sl
   10204:	e001      	b.n	1020a <__kernel_rem_pio2+0x232>
   10206:	ed32 7b02 	vldmdb	r2!, {d7}
   1020a:	ecb3 5b02 	vldmia	r3!, {d5}
   1020e:	42a3      	cmp	r3, r4
   10210:	eea5 6b07 	vfma.f64	d6, d5, d7
   10214:	d1f7      	bne.n	10206 <__kernel_rem_pio2+0x22e>
   10216:	3001      	adds	r0, #1
   10218:	42a8      	cmp	r0, r5
   1021a:	ecae 6b02 	vstmia	lr!, {d6}
   1021e:	dde0      	ble.n	101e2 <__kernel_rem_pio2+0x20a>
   10220:	4629      	mov	r1, r5
   10222:	e752      	b.n	100ca <__kernel_rem_pio2+0xf2>
   10224:	f040 809d 	bne.w	10362 <__kernel_rem_pio2+0x38a>
   10228:	1e4b      	subs	r3, r1, #1
   1022a:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   1022e:	15ed      	asrs	r5, r5, #23
   10230:	2d00      	cmp	r5, #0
   10232:	dd9a      	ble.n	1016a <__kernel_rem_pio2+0x192>
   10234:	ee1b 3a10 	vmov	r3, s22
   10238:	2900      	cmp	r1, #0
   1023a:	f103 0301 	add.w	r3, r3, #1
   1023e:	ee0b 3a10 	vmov	s22, r3
   10242:	f340 818c 	ble.w	1055e <__kernel_rem_pio2+0x586>
   10246:	683a      	ldr	r2, [r7, #0]
   10248:	2a00      	cmp	r2, #0
   1024a:	f040 8082 	bne.w	10352 <__kernel_rem_pio2+0x37a>
   1024e:	2901      	cmp	r1, #1
   10250:	d02d      	beq.n	102ae <__kernel_rem_pio2+0x2d6>
   10252:	463b      	mov	r3, r7
   10254:	2001      	movs	r0, #1
   10256:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1025a:	2a00      	cmp	r2, #0
   1025c:	d07c      	beq.n	10358 <__kernel_rem_pio2+0x380>
   1025e:	1c43      	adds	r3, r0, #1
   10260:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   10264:	4299      	cmp	r1, r3
   10266:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   1026a:	dd1f      	ble.n	102ac <__kernel_rem_pio2+0x2d4>
   1026c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   10270:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   10274:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   10278:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   1027c:	e011      	b.n	102a2 <__kernel_rem_pio2+0x2ca>
   1027e:	bf00      	nop
	...
   1028c:	3e700000 	.word	0x3e700000
   10290:	00000000 	.word	0x00000000
   10294:	41700000 	.word	0x41700000
   10298:	20002a60 	.word	0x20002a60
   1029c:	2aaaaaab 	.word	0x2aaaaaab
   102a0:	681a      	ldr	r2, [r3, #0]
   102a2:	1a82      	subs	r2, r0, r2
   102a4:	f843 2b04 	str.w	r2, [r3], #4
   102a8:	4563      	cmp	r3, ip
   102aa:	d1f9      	bne.n	102a0 <__kernel_rem_pio2+0x2c8>
   102ac:	2201      	movs	r2, #1
   102ae:	f1bb 0f00 	cmp.w	fp, #0
   102b2:	dd0d      	ble.n	102d0 <__kernel_rem_pio2+0x2f8>
   102b4:	f1bb 0f01 	cmp.w	fp, #1
   102b8:	f000 8133 	beq.w	10522 <__kernel_rem_pio2+0x54a>
   102bc:	f1bb 0f02 	cmp.w	fp, #2
   102c0:	d106      	bne.n	102d0 <__kernel_rem_pio2+0x2f8>
   102c2:	1e48      	subs	r0, r1, #1
   102c4:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   102c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
   102cc:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   102d0:	2d02      	cmp	r5, #2
   102d2:	f47f af4a 	bne.w	1016a <__kernel_rem_pio2+0x192>
   102d6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   102da:	ee30 ab4a 	vsub.f64	d10, d0, d10
   102de:	2a00      	cmp	r2, #0
   102e0:	f43f af43 	beq.w	1016a <__kernel_rem_pio2+0x192>
   102e4:	4658      	mov	r0, fp
   102e6:	9102      	str	r1, [sp, #8]
   102e8:	f000 fa52 	bl	10790 <scalbn>
   102ec:	ee3a ab40 	vsub.f64	d10, d10, d0
   102f0:	eeb5 ab40 	vcmp.f64	d10, #0.0
   102f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   102f8:	9902      	ldr	r1, [sp, #8]
   102fa:	f43f af3c 	beq.w	10176 <__kernel_rem_pio2+0x19e>
   102fe:	9c06      	ldr	r4, [sp, #24]
   10300:	eeb0 0b4a 	vmov.f64	d0, d10
   10304:	4260      	negs	r0, r4
   10306:	46a8      	mov	r8, r5
   10308:	468b      	mov	fp, r1
   1030a:	9d01      	ldr	r5, [sp, #4]
   1030c:	f000 fa40 	bl	10790 <scalbn>
   10310:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 10618 <__kernel_rem_pio2+0x640>
   10314:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1031c:	f2c0 8147 	blt.w	105ae <__kernel_rem_pio2+0x5d6>
   10320:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 10620 <__kernel_rem_pio2+0x648>
   10324:	ee20 7b07 	vmul.f64	d7, d0, d7
   10328:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1032c:	f10b 0201 	add.w	r2, fp, #1
   10330:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   10334:	eea5 0b46 	vfms.f64	d0, d5, d6
   10338:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   1033c:	3418      	adds	r4, #24
   1033e:	ee10 3a10 	vmov	r3, s0
   10342:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   10346:	ee17 3a10 	vmov	r3, s14
   1034a:	9406      	str	r4, [sp, #24]
   1034c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   10350:	e02a      	b.n	103a8 <__kernel_rem_pio2+0x3d0>
   10352:	2301      	movs	r3, #1
   10354:	2000      	movs	r0, #0
   10356:	e783      	b.n	10260 <__kernel_rem_pio2+0x288>
   10358:	3001      	adds	r0, #1
   1035a:	4288      	cmp	r0, r1
   1035c:	f47f af7b 	bne.w	10256 <__kernel_rem_pio2+0x27e>
   10360:	e7a5      	b.n	102ae <__kernel_rem_pio2+0x2d6>
   10362:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   10366:	eeb4 abc7 	vcmpe.f64	d10, d7
   1036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1036e:	f280 80e5 	bge.w	1053c <__kernel_rem_pio2+0x564>
   10372:	2500      	movs	r5, #0
   10374:	e6f9      	b.n	1016a <__kernel_rem_pio2+0x192>
   10376:	f101 0e01 	add.w	lr, r1, #1
   1037a:	4670      	mov	r0, lr
   1037c:	4675      	mov	r5, lr
   1037e:	e71f      	b.n	101c0 <__kernel_rem_pio2+0x1e8>
   10380:	9b06      	ldr	r3, [sp, #24]
   10382:	f1a3 0118 	sub.w	r1, r3, #24
   10386:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   1038a:	9106      	str	r1, [sp, #24]
   1038c:	46a8      	mov	r8, r5
   1038e:	4672      	mov	r2, lr
   10390:	9d01      	ldr	r5, [sp, #4]
   10392:	b94b      	cbnz	r3, 103a8 <__kernel_rem_pio2+0x3d0>
   10394:	f1ac 0304 	sub.w	r3, ip, #4
   10398:	443b      	add	r3, r7
   1039a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   1039e:	3a01      	subs	r2, #1
   103a0:	3918      	subs	r1, #24
   103a2:	2800      	cmp	r0, #0
   103a4:	d0f9      	beq.n	1039a <__kernel_rem_pio2+0x3c2>
   103a6:	9106      	str	r1, [sp, #24]
   103a8:	9806      	ldr	r0, [sp, #24]
   103aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   103ae:	9201      	str	r2, [sp, #4]
   103b0:	f000 f9ee 	bl	10790 <scalbn>
   103b4:	9a01      	ldr	r2, [sp, #4]
   103b6:	2a00      	cmp	r2, #0
   103b8:	f2c0 8121 	blt.w	105fe <__kernel_rem_pio2+0x626>
   103bc:	ed9f 6b98 	vldr	d6, [pc, #608]	; 10620 <__kernel_rem_pio2+0x648>
   103c0:	f102 0c01 	add.w	ip, r2, #1
   103c4:	a96c      	add	r1, sp, #432	; 0x1b0
   103c6:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   103ca:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   103ce:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   103d2:	ed33 7a01 	vldmdb	r3!, {s14}
   103d6:	42bb      	cmp	r3, r7
   103d8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   103dc:	ee27 7b00 	vmul.f64	d7, d7, d0
   103e0:	ee20 0b06 	vmul.f64	d0, d0, d6
   103e4:	ed21 7b02 	vstmdb	r1!, {d7}
   103e8:	d1f3      	bne.n	103d2 <__kernel_rem_pio2+0x3fa>
   103ea:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 10628 <__kernel_rem_pio2+0x650>
   103ee:	f1ae 0308 	sub.w	r3, lr, #8
   103f2:	a96c      	add	r1, sp, #432	; 0x1b0
   103f4:	18ce      	adds	r6, r1, r3
   103f6:	2400      	movs	r4, #0
   103f8:	af44      	add	r7, sp, #272	; 0x110
   103fa:	2d00      	cmp	r5, #0
   103fc:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 10630 <__kernel_rem_pio2+0x658>
   10400:	db10      	blt.n	10424 <__kernel_rem_pio2+0x44c>
   10402:	eeb0 6b44 	vmov.f64	d6, d4
   10406:	488c      	ldr	r0, [pc, #560]	; (10638 <__kernel_rem_pio2+0x660>)
   10408:	4631      	mov	r1, r6
   1040a:	2300      	movs	r3, #0
   1040c:	e003      	b.n	10416 <__kernel_rem_pio2+0x43e>
   1040e:	429c      	cmp	r4, r3
   10410:	db08      	blt.n	10424 <__kernel_rem_pio2+0x44c>
   10412:	ecb0 6b02 	vldmia	r0!, {d6}
   10416:	ecb1 5b02 	vldmia	r1!, {d5}
   1041a:	3301      	adds	r3, #1
   1041c:	429d      	cmp	r5, r3
   1041e:	eea5 7b06 	vfma.f64	d7, d5, d6
   10422:	daf4      	bge.n	1040e <__kernel_rem_pio2+0x436>
   10424:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   10428:	4294      	cmp	r4, r2
   1042a:	ed83 7b00 	vstr	d7, [r3]
   1042e:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   10432:	f104 0301 	add.w	r3, r4, #1
   10436:	f1a6 0608 	sub.w	r6, r6, #8
   1043a:	d001      	beq.n	10440 <__kernel_rem_pio2+0x468>
   1043c:	461c      	mov	r4, r3
   1043e:	e7dc      	b.n	103fa <__kernel_rem_pio2+0x422>
   10440:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10442:	2b02      	cmp	r3, #2
   10444:	dc1d      	bgt.n	10482 <__kernel_rem_pio2+0x4aa>
   10446:	2b00      	cmp	r3, #0
   10448:	f300 808b 	bgt.w	10562 <__kernel_rem_pio2+0x58a>
   1044c:	d10f      	bne.n	1046e <__kernel_rem_pio2+0x496>
   1044e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 10630 <__kernel_rem_pio2+0x658>
   10452:	44be      	add	lr, r7
   10454:	ed3e 6b02 	vldmdb	lr!, {d6}
   10458:	4577      	cmp	r7, lr
   1045a:	ee37 7b06 	vadd.f64	d7, d7, d6
   1045e:	d1f9      	bne.n	10454 <__kernel_rem_pio2+0x47c>
   10460:	4643      	mov	r3, r8
   10462:	b10b      	cbz	r3, 10468 <__kernel_rem_pio2+0x490>
   10464:	eeb1 7b47 	vneg.f64	d7, d7
   10468:	9b07      	ldr	r3, [sp, #28]
   1046a:	ed83 7b00 	vstr	d7, [r3]
   1046e:	ee1b 3a10 	vmov	r3, s22
   10472:	f003 0007 	and.w	r0, r3, #7
   10476:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   1047a:	ecbd 8b08 	vpop	{d8-d11}
   1047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10482:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10484:	2b03      	cmp	r3, #3
   10486:	d1f2      	bne.n	1046e <__kernel_rem_pio2+0x496>
   10488:	2a00      	cmp	r2, #0
   1048a:	f000 80e3 	beq.w	10654 <__kernel_rem_pio2+0x67c>
   1048e:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   10492:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   10496:	ed30 6b02 	vldmdb	r0!, {d6}
   1049a:	eeb0 5b47 	vmov.f64	d5, d7
   1049e:	4287      	cmp	r7, r0
   104a0:	ee37 7b06 	vadd.f64	d7, d7, d6
   104a4:	ee36 6b47 	vsub.f64	d6, d6, d7
   104a8:	ed80 7b00 	vstr	d7, [r0]
   104ac:	ee36 6b05 	vadd.f64	d6, d6, d5
   104b0:	ed80 6b02 	vstr	d6, [r0, #8]
   104b4:	d1ef      	bne.n	10496 <__kernel_rem_pio2+0x4be>
   104b6:	2a01      	cmp	r2, #1
   104b8:	f340 80cc 	ble.w	10654 <__kernel_rem_pio2+0x67c>
   104bc:	4439      	add	r1, r7
   104be:	ed91 6b00 	vldr	d6, [r1]
   104c2:	00da      	lsls	r2, r3, #3
   104c4:	a946      	add	r1, sp, #280	; 0x118
   104c6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   104ca:	ed33 7b02 	vldmdb	r3!, {d7}
   104ce:	eeb0 5b46 	vmov.f64	d5, d6
   104d2:	4299      	cmp	r1, r3
   104d4:	ee36 6b07 	vadd.f64	d6, d6, d7
   104d8:	ee37 7b46 	vsub.f64	d7, d7, d6
   104dc:	ed83 6b00 	vstr	d6, [r3]
   104e0:	ee37 7b05 	vadd.f64	d7, d7, d5
   104e4:	ed83 7b02 	vstr	d7, [r3, #8]
   104e8:	d1ef      	bne.n	104ca <__kernel_rem_pio2+0x4f2>
   104ea:	ed9f 7b51 	vldr	d7, [pc, #324]	; 10630 <__kernel_rem_pio2+0x658>
   104ee:	f102 0308 	add.w	r3, r2, #8
   104f2:	443b      	add	r3, r7
   104f4:	f107 0210 	add.w	r2, r7, #16
   104f8:	ed33 6b02 	vldmdb	r3!, {d6}
   104fc:	429a      	cmp	r2, r3
   104fe:	ee37 7b06 	vadd.f64	d7, d7, d6
   10502:	d1f9      	bne.n	104f8 <__kernel_rem_pio2+0x520>
   10504:	4643      	mov	r3, r8
   10506:	2b00      	cmp	r3, #0
   10508:	d159      	bne.n	105be <__kernel_rem_pio2+0x5e6>
   1050a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1050e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10512:	9c07      	ldr	r4, [sp, #28]
   10514:	ed84 7b04 	vstr	d7, [r4, #16]
   10518:	e9c4 0100 	strd	r0, r1, [r4]
   1051c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   10520:	e7a5      	b.n	1046e <__kernel_rem_pio2+0x496>
   10522:	1e48      	subs	r0, r1, #1
   10524:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10528:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1052c:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10530:	e6ce      	b.n	102d0 <__kernel_rem_pio2+0x2f8>
   10532:	2100      	movs	r1, #0
   10534:	f06f 0317 	mvn.w	r3, #23
   10538:	9103      	str	r1, [sp, #12]
   1053a:	e56d      	b.n	10018 <__kernel_rem_pio2+0x40>
   1053c:	ee1b 3a10 	vmov	r3, s22
   10540:	2900      	cmp	r1, #0
   10542:	f103 0301 	add.w	r3, r3, #1
   10546:	ee0b 3a10 	vmov	s22, r3
   1054a:	bfc8      	it	gt
   1054c:	2502      	movgt	r5, #2
   1054e:	f73f ae7a 	bgt.w	10246 <__kernel_rem_pio2+0x26e>
   10552:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10556:	ee37 ab4a 	vsub.f64	d10, d7, d10
   1055a:	2502      	movs	r5, #2
   1055c:	e605      	b.n	1016a <__kernel_rem_pio2+0x192>
   1055e:	2200      	movs	r2, #0
   10560:	e6a5      	b.n	102ae <__kernel_rem_pio2+0x2d6>
   10562:	ed9f 7b33 	vldr	d7, [pc, #204]	; 10630 <__kernel_rem_pio2+0x658>
   10566:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   1056a:	ed3c 6b02 	vldmdb	ip!, {d6}
   1056e:	4567      	cmp	r7, ip
   10570:	ee37 7b06 	vadd.f64	d7, d7, d6
   10574:	d1f9      	bne.n	1056a <__kernel_rem_pio2+0x592>
   10576:	4643      	mov	r3, r8
   10578:	ed97 6b00 	vldr	d6, [r7]
   1057c:	bb8b      	cbnz	r3, 105e2 <__kernel_rem_pio2+0x60a>
   1057e:	9b07      	ldr	r3, [sp, #28]
   10580:	2a00      	cmp	r2, #0
   10582:	ed83 7b00 	vstr	d7, [r3]
   10586:	ee36 7b47 	vsub.f64	d7, d6, d7
   1058a:	dd0c      	ble.n	105a6 <__kernel_rem_pio2+0x5ce>
   1058c:	a946      	add	r1, sp, #280	; 0x118
   1058e:	2301      	movs	r3, #1
   10590:	ecb1 6b02 	vldmia	r1!, {d6}
   10594:	3301      	adds	r3, #1
   10596:	429a      	cmp	r2, r3
   10598:	ee37 7b06 	vadd.f64	d7, d7, d6
   1059c:	daf8      	bge.n	10590 <__kernel_rem_pio2+0x5b8>
   1059e:	4643      	mov	r3, r8
   105a0:	b10b      	cbz	r3, 105a6 <__kernel_rem_pio2+0x5ce>
   105a2:	eeb1 7b47 	vneg.f64	d7, d7
   105a6:	9b07      	ldr	r3, [sp, #28]
   105a8:	ed83 7b02 	vstr	d7, [r3, #8]
   105ac:	e75f      	b.n	1046e <__kernel_rem_pio2+0x496>
   105ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   105b2:	465a      	mov	r2, fp
   105b4:	ee10 3a10 	vmov	r3, s0
   105b8:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   105bc:	e6f4      	b.n	103a8 <__kernel_rem_pio2+0x3d0>
   105be:	ed97 5b00 	vldr	d5, [r7]
   105c2:	eeb1 7b47 	vneg.f64	d7, d7
   105c6:	ed97 6b02 	vldr	d6, [r7, #8]
   105ca:	eeb1 5b45 	vneg.f64	d5, d5
   105ce:	9b07      	ldr	r3, [sp, #28]
   105d0:	eeb1 6b46 	vneg.f64	d6, d6
   105d4:	ed83 5b00 	vstr	d5, [r3]
   105d8:	ed83 6b02 	vstr	d6, [r3, #8]
   105dc:	ed83 7b04 	vstr	d7, [r3, #16]
   105e0:	e745      	b.n	1046e <__kernel_rem_pio2+0x496>
   105e2:	9b07      	ldr	r3, [sp, #28]
   105e4:	eeb1 5b47 	vneg.f64	d5, d7
   105e8:	2a00      	cmp	r2, #0
   105ea:	ed83 5b00 	vstr	d5, [r3]
   105ee:	ee36 7b47 	vsub.f64	d7, d6, d7
   105f2:	dccb      	bgt.n	1058c <__kernel_rem_pio2+0x5b4>
   105f4:	e7d5      	b.n	105a2 <__kernel_rem_pio2+0x5ca>
   105f6:	9b04      	ldr	r3, [sp, #16]
   105f8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   105fc:	e553      	b.n	100a6 <__kernel_rem_pio2+0xce>
   105fe:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10600:	2b02      	cmp	r3, #2
   10602:	dc1b      	bgt.n	1063c <__kernel_rem_pio2+0x664>
   10604:	2b00      	cmp	r3, #0
   10606:	dc21      	bgt.n	1064c <__kernel_rem_pio2+0x674>
   10608:	f47f af31 	bne.w	1046e <__kernel_rem_pio2+0x496>
   1060c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 10630 <__kernel_rem_pio2+0x658>
   10610:	e726      	b.n	10460 <__kernel_rem_pio2+0x488>
   10612:	bf00      	nop
   10614:	f3af 8000 	nop.w
   10618:	00000000 	.word	0x00000000
   1061c:	41700000 	.word	0x41700000
   10620:	00000000 	.word	0x00000000
   10624:	3e700000 	.word	0x3e700000
   10628:	40000000 	.word	0x40000000
   1062c:	3ff921fb 	.word	0x3ff921fb
	...
   10638:	20000288 	.word	0x20000288
   1063c:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1063e:	2b03      	cmp	r3, #3
   10640:	f47f af15 	bne.w	1046e <__kernel_rem_pio2+0x496>
   10644:	ed9f 7b06 	vldr	d7, [pc, #24]	; 10660 <__kernel_rem_pio2+0x688>
   10648:	af44      	add	r7, sp, #272	; 0x110
   1064a:	e75b      	b.n	10504 <__kernel_rem_pio2+0x52c>
   1064c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 10660 <__kernel_rem_pio2+0x688>
   10650:	af44      	add	r7, sp, #272	; 0x110
   10652:	e790      	b.n	10576 <__kernel_rem_pio2+0x59e>
   10654:	ed9f 7b02 	vldr	d7, [pc, #8]	; 10660 <__kernel_rem_pio2+0x688>
   10658:	e754      	b.n	10504 <__kernel_rem_pio2+0x52c>
   1065a:	bf00      	nop
   1065c:	f3af 8000 	nop.w
	...

00010668 <fabs>:
   10668:	ec51 0b10 	vmov	r0, r1, d0
   1066c:	ee10 2a10 	vmov	r2, s0
   10670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10674:	ec43 2b10 	vmov	d0, r2, r3
   10678:	4770      	bx	lr
   1067a:	bf00      	nop
   1067c:	0000      	movs	r0, r0
	...

00010680 <floor>:
   10680:	b510      	push	{r4, lr}
   10682:	b082      	sub	sp, #8
   10684:	ed8d 0b00 	vstr	d0, [sp]
   10688:	9901      	ldr	r1, [sp, #4]
   1068a:	9800      	ldr	r0, [sp, #0]
   1068c:	f3c1 520a 	ubfx	r2, r1, #20, #11
   10690:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   10694:	2b13      	cmp	r3, #19
   10696:	4684      	mov	ip, r0
   10698:	dc31      	bgt.n	106fe <floor+0x7e>
   1069a:	2b00      	cmp	r3, #0
   1069c:	db21      	blt.n	106e2 <floor+0x62>
   1069e:	4a3a      	ldr	r2, [pc, #232]	; (10788 <floor+0x108>)
   106a0:	411a      	asrs	r2, r3
   106a2:	ea01 0402 	and.w	r4, r1, r2
   106a6:	4304      	orrs	r4, r0
   106a8:	468e      	mov	lr, r1
   106aa:	d02d      	beq.n	10708 <floor+0x88>
   106ac:	ed9f 7b34 	vldr	d7, [pc, #208]	; 10780 <floor+0x100>
   106b0:	ed9d 6b00 	vldr	d6, [sp]
   106b4:	ee36 7b07 	vadd.f64	d7, d6, d7
   106b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   106bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   106c0:	dd09      	ble.n	106d6 <floor+0x56>
   106c2:	2900      	cmp	r1, #0
   106c4:	da04      	bge.n	106d0 <floor+0x50>
   106c6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   106ca:	fa41 f303 	asr.w	r3, r1, r3
   106ce:	449e      	add	lr, r3
   106d0:	ea2e 0102 	bic.w	r1, lr, r2
   106d4:	2000      	movs	r0, #0
   106d6:	460b      	mov	r3, r1
   106d8:	4602      	mov	r2, r0
   106da:	ec43 2b10 	vmov	d0, r2, r3
   106de:	b002      	add	sp, #8
   106e0:	bd10      	pop	{r4, pc}
   106e2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 10780 <floor+0x100>
   106e6:	ee30 7b07 	vadd.f64	d7, d0, d7
   106ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   106f2:	ddf0      	ble.n	106d6 <floor+0x56>
   106f4:	2900      	cmp	r1, #0
   106f6:	db28      	blt.n	1074a <floor+0xca>
   106f8:	2000      	movs	r0, #0
   106fa:	4601      	mov	r1, r0
   106fc:	e7eb      	b.n	106d6 <floor+0x56>
   106fe:	2b33      	cmp	r3, #51	; 0x33
   10700:	dd06      	ble.n	10710 <floor+0x90>
   10702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10706:	d01b      	beq.n	10740 <floor+0xc0>
   10708:	ed9d 0b00 	vldr	d0, [sp]
   1070c:	b002      	add	sp, #8
   1070e:	bd10      	pop	{r4, pc}
   10710:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   10714:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   10718:	fa2e f202 	lsr.w	r2, lr, r2
   1071c:	4210      	tst	r0, r2
   1071e:	d0f3      	beq.n	10708 <floor+0x88>
   10720:	ed9f 7b17 	vldr	d7, [pc, #92]	; 10780 <floor+0x100>
   10724:	ed9d 6b00 	vldr	d6, [sp]
   10728:	ee36 7b07 	vadd.f64	d7, d6, d7
   1072c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10734:	ddcf      	ble.n	106d6 <floor+0x56>
   10736:	2900      	cmp	r1, #0
   10738:	db13      	blt.n	10762 <floor+0xe2>
   1073a:	ea2c 0002 	bic.w	r0, ip, r2
   1073e:	e7ca      	b.n	106d6 <floor+0x56>
   10740:	ed9d 7b00 	vldr	d7, [sp]
   10744:	ee37 0b07 	vadd.f64	d0, d7, d7
   10748:	e7e0      	b.n	1070c <floor+0x8c>
   1074a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1074e:	4301      	orrs	r1, r0
   10750:	4b0e      	ldr	r3, [pc, #56]	; (1078c <floor+0x10c>)
   10752:	2900      	cmp	r1, #0
   10754:	f04f 0000 	mov.w	r0, #0
   10758:	bf0c      	ite	eq
   1075a:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   1075e:	4619      	movne	r1, r3
   10760:	e7b9      	b.n	106d6 <floor+0x56>
   10762:	2b14      	cmp	r3, #20
   10764:	d009      	beq.n	1077a <floor+0xfa>
   10766:	2401      	movs	r4, #1
   10768:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1076c:	fa04 f303 	lsl.w	r3, r4, r3
   10770:	449c      	add	ip, r3
   10772:	4560      	cmp	r0, ip
   10774:	bf88      	it	hi
   10776:	1909      	addhi	r1, r1, r4
   10778:	e7df      	b.n	1073a <floor+0xba>
   1077a:	3101      	adds	r1, #1
   1077c:	e7dd      	b.n	1073a <floor+0xba>
   1077e:	bf00      	nop
   10780:	8800759c 	.word	0x8800759c
   10784:	7e37e43c 	.word	0x7e37e43c
   10788:	000fffff 	.word	0x000fffff
   1078c:	bff00000 	.word	0xbff00000

00010790 <scalbn>:
   10790:	ec53 2b10 	vmov	r2, r3, d0
   10794:	b410      	push	{r4}
   10796:	f3c3 540a 	ubfx	r4, r3, #20, #11
   1079a:	4619      	mov	r1, r3
   1079c:	bb74      	cbnz	r4, 107fc <scalbn+0x6c>
   1079e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   107a2:	4311      	orrs	r1, r2
   107a4:	d027      	beq.n	107f6 <scalbn+0x66>
   107a6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 10868 <scalbn+0xd8>
   107aa:	493b      	ldr	r1, [pc, #236]	; (10898 <scalbn+0x108>)
   107ac:	ee20 7b07 	vmul.f64	d7, d0, d7
   107b0:	4288      	cmp	r0, r1
   107b2:	ec53 2b17 	vmov	r2, r3, d7
   107b6:	db43      	blt.n	10840 <scalbn+0xb0>
   107b8:	f3c3 540a 	ubfx	r4, r3, #20, #11
   107bc:	4619      	mov	r1, r3
   107be:	3c36      	subs	r4, #54	; 0x36
   107c0:	f24c 3c50 	movw	ip, #50000	; 0xc350
   107c4:	4560      	cmp	r0, ip
   107c6:	dc22      	bgt.n	1080e <scalbn+0x7e>
   107c8:	4420      	add	r0, r4
   107ca:	f240 74fe 	movw	r4, #2046	; 0x7fe
   107ce:	42a0      	cmp	r0, r4
   107d0:	dc1d      	bgt.n	1080e <scalbn+0x7e>
   107d2:	2800      	cmp	r0, #0
   107d4:	dc29      	bgt.n	1082a <scalbn+0x9a>
   107d6:	f110 0f35 	cmn.w	r0, #53	; 0x35
   107da:	db38      	blt.n	1084e <scalbn+0xbe>
   107dc:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   107e0:	3036      	adds	r0, #54	; 0x36
   107e2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   107e6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 10870 <scalbn+0xe0>
   107ea:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   107ee:	ec43 2b10 	vmov	d0, r2, r3
   107f2:	ee20 0b07 	vmul.f64	d0, d0, d7
   107f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   107fa:	4770      	bx	lr
   107fc:	f240 7cff 	movw	ip, #2047	; 0x7ff
   10800:	4564      	cmp	r4, ip
   10802:	d1dd      	bne.n	107c0 <scalbn+0x30>
   10804:	ee30 0b00 	vadd.f64	d0, d0, d0
   10808:	f85d 4b04 	ldr.w	r4, [sp], #4
   1080c:	4770      	bx	lr
   1080e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 10878 <scalbn+0xe8>
   10812:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 10880 <scalbn+0xf0>
   10816:	eeb0 0b47 	vmov.f64	d0, d7
   1081a:	2b00      	cmp	r3, #0
   1081c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10820:	fe27 7b05 	vselge.f64	d7, d7, d5
   10824:	ee27 0b00 	vmul.f64	d0, d7, d0
   10828:	4770      	bx	lr
   1082a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   1082e:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10832:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10836:	ec43 2b10 	vmov	d0, r2, r3
   1083a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1083e:	4770      	bx	lr
   10840:	ed9f 0b11 	vldr	d0, [pc, #68]	; 10888 <scalbn+0xf8>
   10844:	f85d 4b04 	ldr.w	r4, [sp], #4
   10848:	ee27 0b00 	vmul.f64	d0, d7, d0
   1084c:	4770      	bx	lr
   1084e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 10888 <scalbn+0xf8>
   10852:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 10890 <scalbn+0x100>
   10856:	eeb0 0b47 	vmov.f64	d0, d7
   1085a:	2b00      	cmp	r3, #0
   1085c:	fe27 7b05 	vselge.f64	d7, d7, d5
   10860:	ee27 0b00 	vmul.f64	d0, d7, d0
   10864:	e7c7      	b.n	107f6 <scalbn+0x66>
   10866:	bf00      	nop
   10868:	00000000 	.word	0x00000000
   1086c:	43500000 	.word	0x43500000
   10870:	00000000 	.word	0x00000000
   10874:	3c900000 	.word	0x3c900000
   10878:	8800759c 	.word	0x8800759c
   1087c:	7e37e43c 	.word	0x7e37e43c
   10880:	8800759c 	.word	0x8800759c
   10884:	fe37e43c 	.word	0xfe37e43c
   10888:	c2f8f359 	.word	0xc2f8f359
   1088c:	01a56e1f 	.word	0x01a56e1f
   10890:	c2f8f359 	.word	0xc2f8f359
   10894:	81a56e1f 	.word	0x81a56e1f
   10898:	ffff3cb0 	.word	0xffff3cb0

0001089c <__aeabi_atexit>:
   1089c:	4603      	mov	r3, r0
   1089e:	4608      	mov	r0, r1
   108a0:	4619      	mov	r1, r3
   108a2:	f000 bcc1 	b.w	11228 <__cxa_atexit>
   108a6:	bf00      	nop

000108a8 <__utoa>:
   108a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108aa:	4f25      	ldr	r7, [pc, #148]	; (10940 <__utoa+0x98>)
   108ac:	f1a2 0e02 	sub.w	lr, r2, #2
   108b0:	4616      	mov	r6, r2
   108b2:	4605      	mov	r5, r0
   108b4:	460c      	mov	r4, r1
   108b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   108b8:	b08b      	sub	sp, #44	; 0x2c
   108ba:	46ec      	mov	ip, sp
   108bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   108c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   108c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   108c6:	e897 0003 	ldmia.w	r7, {r0, r1}
   108ca:	f84c 0b04 	str.w	r0, [ip], #4
   108ce:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   108d2:	f88c 1000 	strb.w	r1, [ip]
   108d6:	d82e      	bhi.n	10936 <__utoa+0x8e>
   108d8:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   108dc:	4670      	mov	r0, lr
   108de:	f04f 0c00 	mov.w	ip, #0
   108e2:	fbb5 f2f6 	udiv	r2, r5, r6
   108e6:	fb06 5312 	mls	r3, r6, r2, r5
   108ea:	3328      	adds	r3, #40	; 0x28
   108ec:	446b      	add	r3, sp
   108ee:	4661      	mov	r1, ip
   108f0:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   108f4:	f800 cf01 	strb.w	ip, [r0, #1]!
   108f8:	462b      	mov	r3, r5
   108fa:	429e      	cmp	r6, r3
   108fc:	f101 0c01 	add.w	ip, r1, #1
   10900:	4615      	mov	r5, r2
   10902:	d9ee      	bls.n	108e2 <__utoa+0x3a>
   10904:	2300      	movs	r3, #0
   10906:	f804 300c 	strb.w	r3, [r4, ip]
   1090a:	b189      	cbz	r1, 10930 <__utoa+0x88>
   1090c:	44a4      	add	ip, r4
   1090e:	4672      	mov	r2, lr
   10910:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10914:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   10918:	f88e 5000 	strb.w	r5, [lr]
   1091c:	eba4 030e 	sub.w	r3, r4, lr
   10920:	3202      	adds	r2, #2
   10922:	3b01      	subs	r3, #1
   10924:	1b12      	subs	r2, r2, r4
   10926:	440b      	add	r3, r1
   10928:	429a      	cmp	r2, r3
   1092a:	f88c 0000 	strb.w	r0, [ip]
   1092e:	dbee      	blt.n	1090e <__utoa+0x66>
   10930:	4620      	mov	r0, r4
   10932:	b00b      	add	sp, #44	; 0x2c
   10934:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10936:	2300      	movs	r3, #0
   10938:	4618      	mov	r0, r3
   1093a:	7023      	strb	r3, [r4, #0]
   1093c:	b00b      	add	sp, #44	; 0x2c
   1093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10940:	200024f0 	.word	0x200024f0

00010944 <strncmp>:
   10944:	2a00      	cmp	r2, #0
   10946:	d03e      	beq.n	109c6 <strncmp+0x82>
   10948:	ea40 0301 	orr.w	r3, r0, r1
   1094c:	079b      	lsls	r3, r3, #30
   1094e:	b530      	push	{r4, r5, lr}
   10950:	4684      	mov	ip, r0
   10952:	d12f      	bne.n	109b4 <strncmp+0x70>
   10954:	2a03      	cmp	r2, #3
   10956:	d92d      	bls.n	109b4 <strncmp+0x70>
   10958:	460b      	mov	r3, r1
   1095a:	e008      	b.n	1096e <strncmp+0x2a>
   1095c:	3a04      	subs	r2, #4
   1095e:	4684      	mov	ip, r0
   10960:	4619      	mov	r1, r3
   10962:	d025      	beq.n	109b0 <strncmp+0x6c>
   10964:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   10968:	d122      	bne.n	109b0 <strncmp+0x6c>
   1096a:	2a03      	cmp	r2, #3
   1096c:	d922      	bls.n	109b4 <strncmp+0x70>
   1096e:	6804      	ldr	r4, [r0, #0]
   10970:	4619      	mov	r1, r3
   10972:	f853 5b04 	ldr.w	r5, [r3], #4
   10976:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1097a:	42ac      	cmp	r4, r5
   1097c:	4684      	mov	ip, r0
   1097e:	ea2e 0e04 	bic.w	lr, lr, r4
   10982:	f100 0004 	add.w	r0, r0, #4
   10986:	d0e9      	beq.n	1095c <strncmp+0x18>
   10988:	f89c 0000 	ldrb.w	r0, [ip]
   1098c:	780c      	ldrb	r4, [r1, #0]
   1098e:	42a0      	cmp	r0, r4
   10990:	d11b      	bne.n	109ca <strncmp+0x86>
   10992:	46e6      	mov	lr, ip
   10994:	b168      	cbz	r0, 109b2 <strncmp+0x6e>
   10996:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1099a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1099e:	eba2 030e 	sub.w	r3, r2, lr
   109a2:	42a0      	cmp	r0, r4
   109a4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   109a8:	d10f      	bne.n	109ca <strncmp+0x86>
   109aa:	eb1c 0303 	adds.w	r3, ip, r3
   109ae:	d1f1      	bne.n	10994 <strncmp+0x50>
   109b0:	2000      	movs	r0, #0
   109b2:	bd30      	pop	{r4, r5, pc}
   109b4:	f89c 0000 	ldrb.w	r0, [ip]
   109b8:	780c      	ldrb	r4, [r1, #0]
   109ba:	4284      	cmp	r4, r0
   109bc:	d105      	bne.n	109ca <strncmp+0x86>
   109be:	2a01      	cmp	r2, #1
   109c0:	d0f6      	beq.n	109b0 <strncmp+0x6c>
   109c2:	46e6      	mov	lr, ip
   109c4:	e7e6      	b.n	10994 <strncmp+0x50>
   109c6:	4610      	mov	r0, r2
   109c8:	4770      	bx	lr
   109ca:	1b00      	subs	r0, r0, r4
   109cc:	bd30      	pop	{r4, r5, pc}
   109ce:	bf00      	nop

000109d0 <strncpy>:
   109d0:	ea40 0301 	orr.w	r3, r0, r1
   109d4:	079b      	lsls	r3, r3, #30
   109d6:	b530      	push	{r4, r5, lr}
   109d8:	d101      	bne.n	109de <strncpy+0xe>
   109da:	2a03      	cmp	r2, #3
   109dc:	d80f      	bhi.n	109fe <strncpy+0x2e>
   109de:	4684      	mov	ip, r0
   109e0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   109e4:	e007      	b.n	109f6 <strncpy+0x26>
   109e6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   109ea:	f803 1b01 	strb.w	r1, [r3], #1
   109ee:	1e54      	subs	r4, r2, #1
   109f0:	b1c1      	cbz	r1, 10a24 <strncpy+0x54>
   109f2:	469c      	mov	ip, r3
   109f4:	4622      	mov	r2, r4
   109f6:	4663      	mov	r3, ip
   109f8:	2a00      	cmp	r2, #0
   109fa:	d1f4      	bne.n	109e6 <strncpy+0x16>
   109fc:	bd30      	pop	{r4, r5, pc}
   109fe:	460b      	mov	r3, r1
   10a00:	4684      	mov	ip, r0
   10a02:	4619      	mov	r1, r3
   10a04:	f853 5b04 	ldr.w	r5, [r3], #4
   10a08:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10a0c:	ea24 0405 	bic.w	r4, r4, r5
   10a10:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10a14:	d1e4      	bne.n	109e0 <strncpy+0x10>
   10a16:	3a04      	subs	r2, #4
   10a18:	2a03      	cmp	r2, #3
   10a1a:	f84c 5b04 	str.w	r5, [ip], #4
   10a1e:	4619      	mov	r1, r3
   10a20:	d8ef      	bhi.n	10a02 <strncpy+0x32>
   10a22:	e7dd      	b.n	109e0 <strncpy+0x10>
   10a24:	4494      	add	ip, r2
   10a26:	2c00      	cmp	r4, #0
   10a28:	d0e8      	beq.n	109fc <strncpy+0x2c>
   10a2a:	f803 1b01 	strb.w	r1, [r3], #1
   10a2e:	4563      	cmp	r3, ip
   10a30:	d1fb      	bne.n	10a2a <strncpy+0x5a>
   10a32:	bd30      	pop	{r4, r5, pc}

00010a34 <itoa>:
   10a34:	1e93      	subs	r3, r2, #2
   10a36:	2b22      	cmp	r3, #34	; 0x22
   10a38:	b510      	push	{r4, lr}
   10a3a:	460c      	mov	r4, r1
   10a3c:	d80c      	bhi.n	10a58 <itoa+0x24>
   10a3e:	2a0a      	cmp	r2, #10
   10a40:	d003      	beq.n	10a4a <itoa+0x16>
   10a42:	f7ff ff31 	bl	108a8 <__utoa>
   10a46:	4620      	mov	r0, r4
   10a48:	bd10      	pop	{r4, pc}
   10a4a:	2800      	cmp	r0, #0
   10a4c:	daf9      	bge.n	10a42 <itoa+0xe>
   10a4e:	232d      	movs	r3, #45	; 0x2d
   10a50:	f801 3b01 	strb.w	r3, [r1], #1
   10a54:	4240      	negs	r0, r0
   10a56:	e7f4      	b.n	10a42 <itoa+0xe>
   10a58:	2300      	movs	r3, #0
   10a5a:	700b      	strb	r3, [r1, #0]
   10a5c:	4618      	mov	r0, r3
   10a5e:	bd10      	pop	{r4, pc}

00010a60 <__errno>:
   10a60:	4b01      	ldr	r3, [pc, #4]	; (10a68 <__errno+0x8>)
   10a62:	6818      	ldr	r0, [r3, #0]
   10a64:	4770      	bx	lr
   10a66:	bf00      	nop
   10a68:	2000378c 	.word	0x2000378c

00010a6c <malloc>:
   10a6c:	4b02      	ldr	r3, [pc, #8]	; (10a78 <malloc+0xc>)
   10a6e:	4601      	mov	r1, r0
   10a70:	6818      	ldr	r0, [r3, #0]
   10a72:	f000 b80b 	b.w	10a8c <_malloc_r>
   10a76:	bf00      	nop
   10a78:	2000378c 	.word	0x2000378c

00010a7c <free>:
   10a7c:	4b02      	ldr	r3, [pc, #8]	; (10a88 <free+0xc>)
   10a7e:	4601      	mov	r1, r0
   10a80:	6818      	ldr	r0, [r3, #0]
   10a82:	f001 bc47 	b.w	12314 <_free_r>
   10a86:	bf00      	nop
   10a88:	2000378c 	.word	0x2000378c

00010a8c <_malloc_r>:
   10a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a90:	f101 060b 	add.w	r6, r1, #11
   10a94:	2e16      	cmp	r6, #22
   10a96:	b083      	sub	sp, #12
   10a98:	4604      	mov	r4, r0
   10a9a:	d824      	bhi.n	10ae6 <_malloc_r+0x5a>
   10a9c:	2910      	cmp	r1, #16
   10a9e:	f200 80ba 	bhi.w	10c16 <_malloc_r+0x18a>
   10aa2:	f000 fc5d 	bl	11360 <__malloc_lock>
   10aa6:	2610      	movs	r6, #16
   10aa8:	2218      	movs	r2, #24
   10aaa:	2002      	movs	r0, #2
   10aac:	4fb5      	ldr	r7, [pc, #724]	; (10d84 <_malloc_r+0x2f8>)
   10aae:	443a      	add	r2, r7
   10ab0:	f1a2 0108 	sub.w	r1, r2, #8
   10ab4:	6853      	ldr	r3, [r2, #4]
   10ab6:	428b      	cmp	r3, r1
   10ab8:	f000 80ba 	beq.w	10c30 <_malloc_r+0x1a4>
   10abc:	685a      	ldr	r2, [r3, #4]
   10abe:	68d9      	ldr	r1, [r3, #12]
   10ac0:	f022 0203 	bic.w	r2, r2, #3
   10ac4:	441a      	add	r2, r3
   10ac6:	689d      	ldr	r5, [r3, #8]
   10ac8:	60e9      	str	r1, [r5, #12]
   10aca:	608d      	str	r5, [r1, #8]
   10acc:	6851      	ldr	r1, [r2, #4]
   10ace:	f041 0101 	orr.w	r1, r1, #1
   10ad2:	4620      	mov	r0, r4
   10ad4:	6051      	str	r1, [r2, #4]
   10ad6:	f103 0508 	add.w	r5, r3, #8
   10ada:	f000 fc47 	bl	1136c <__malloc_unlock>
   10ade:	4628      	mov	r0, r5
   10ae0:	b003      	add	sp, #12
   10ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ae6:	f036 0607 	bics.w	r6, r6, #7
   10aea:	f100 8094 	bmi.w	10c16 <_malloc_r+0x18a>
   10aee:	42b1      	cmp	r1, r6
   10af0:	f200 8091 	bhi.w	10c16 <_malloc_r+0x18a>
   10af4:	f000 fc34 	bl	11360 <__malloc_lock>
   10af8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   10afc:	f0c0 819a 	bcc.w	10e34 <_malloc_r+0x3a8>
   10b00:	0a73      	lsrs	r3, r6, #9
   10b02:	f000 808f 	beq.w	10c24 <_malloc_r+0x198>
   10b06:	2b04      	cmp	r3, #4
   10b08:	f200 816f 	bhi.w	10dea <_malloc_r+0x35e>
   10b0c:	09b3      	lsrs	r3, r6, #6
   10b0e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   10b12:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   10b16:	00c3      	lsls	r3, r0, #3
   10b18:	4f9a      	ldr	r7, [pc, #616]	; (10d84 <_malloc_r+0x2f8>)
   10b1a:	443b      	add	r3, r7
   10b1c:	f1a3 0508 	sub.w	r5, r3, #8
   10b20:	685b      	ldr	r3, [r3, #4]
   10b22:	429d      	cmp	r5, r3
   10b24:	d106      	bne.n	10b34 <_malloc_r+0xa8>
   10b26:	e00c      	b.n	10b42 <_malloc_r+0xb6>
   10b28:	2900      	cmp	r1, #0
   10b2a:	f280 8127 	bge.w	10d7c <_malloc_r+0x2f0>
   10b2e:	68db      	ldr	r3, [r3, #12]
   10b30:	429d      	cmp	r5, r3
   10b32:	d006      	beq.n	10b42 <_malloc_r+0xb6>
   10b34:	685a      	ldr	r2, [r3, #4]
   10b36:	f022 0203 	bic.w	r2, r2, #3
   10b3a:	1b91      	subs	r1, r2, r6
   10b3c:	290f      	cmp	r1, #15
   10b3e:	ddf3      	ble.n	10b28 <_malloc_r+0x9c>
   10b40:	4660      	mov	r0, ip
   10b42:	693d      	ldr	r5, [r7, #16]
   10b44:	f8df c250 	ldr.w	ip, [pc, #592]	; 10d98 <_malloc_r+0x30c>
   10b48:	4565      	cmp	r5, ip
   10b4a:	d07c      	beq.n	10c46 <_malloc_r+0x1ba>
   10b4c:	686a      	ldr	r2, [r5, #4]
   10b4e:	f022 0203 	bic.w	r2, r2, #3
   10b52:	1b93      	subs	r3, r2, r6
   10b54:	2b0f      	cmp	r3, #15
   10b56:	f300 817b 	bgt.w	10e50 <_malloc_r+0x3c4>
   10b5a:	2b00      	cmp	r3, #0
   10b5c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10b60:	f280 816c 	bge.w	10e3c <_malloc_r+0x3b0>
   10b64:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10b68:	f080 811a 	bcs.w	10da0 <_malloc_r+0x314>
   10b6c:	08d3      	lsrs	r3, r2, #3
   10b6e:	6879      	ldr	r1, [r7, #4]
   10b70:	3301      	adds	r3, #1
   10b72:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   10b76:	2201      	movs	r2, #1
   10b78:	fa02 f20e 	lsl.w	r2, r2, lr
   10b7c:	430a      	orrs	r2, r1
   10b7e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   10b82:	f8c5 e008 	str.w	lr, [r5, #8]
   10b86:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   10b8a:	3908      	subs	r1, #8
   10b8c:	60e9      	str	r1, [r5, #12]
   10b8e:	607a      	str	r2, [r7, #4]
   10b90:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   10b94:	f8ce 500c 	str.w	r5, [lr, #12]
   10b98:	1083      	asrs	r3, r0, #2
   10b9a:	2101      	movs	r1, #1
   10b9c:	4099      	lsls	r1, r3
   10b9e:	4291      	cmp	r1, r2
   10ba0:	d857      	bhi.n	10c52 <_malloc_r+0x1c6>
   10ba2:	4211      	tst	r1, r2
   10ba4:	d106      	bne.n	10bb4 <_malloc_r+0x128>
   10ba6:	f020 0003 	bic.w	r0, r0, #3
   10baa:	0049      	lsls	r1, r1, #1
   10bac:	4211      	tst	r1, r2
   10bae:	f100 0004 	add.w	r0, r0, #4
   10bb2:	d0fa      	beq.n	10baa <_malloc_r+0x11e>
   10bb4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   10bb8:	464d      	mov	r5, r9
   10bba:	4686      	mov	lr, r0
   10bbc:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10bc0:	4545      	cmp	r5, r8
   10bc2:	d108      	bne.n	10bd6 <_malloc_r+0x14a>
   10bc4:	e11d      	b.n	10e02 <_malloc_r+0x376>
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	f280 8124 	bge.w	10e14 <_malloc_r+0x388>
   10bcc:	f8d8 800c 	ldr.w	r8, [r8, #12]
   10bd0:	4545      	cmp	r5, r8
   10bd2:	f000 8116 	beq.w	10e02 <_malloc_r+0x376>
   10bd6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10bda:	f022 0203 	bic.w	r2, r2, #3
   10bde:	1b93      	subs	r3, r2, r6
   10be0:	2b0f      	cmp	r3, #15
   10be2:	ddf0      	ble.n	10bc6 <_malloc_r+0x13a>
   10be4:	4620      	mov	r0, r4
   10be6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   10bea:	eb08 0106 	add.w	r1, r8, r6
   10bee:	f046 0601 	orr.w	r6, r6, #1
   10bf2:	f8c8 6004 	str.w	r6, [r8, #4]
   10bf6:	60ec      	str	r4, [r5, #12]
   10bf8:	60a5      	str	r5, [r4, #8]
   10bfa:	f043 0401 	orr.w	r4, r3, #1
   10bfe:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10c02:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10c06:	604c      	str	r4, [r1, #4]
   10c08:	f848 3002 	str.w	r3, [r8, r2]
   10c0c:	f000 fbae 	bl	1136c <__malloc_unlock>
   10c10:	f108 0508 	add.w	r5, r8, #8
   10c14:	e002      	b.n	10c1c <_malloc_r+0x190>
   10c16:	230c      	movs	r3, #12
   10c18:	6023      	str	r3, [r4, #0]
   10c1a:	2500      	movs	r5, #0
   10c1c:	4628      	mov	r0, r5
   10c1e:	b003      	add	sp, #12
   10c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c24:	f44f 7300 	mov.w	r3, #512	; 0x200
   10c28:	2040      	movs	r0, #64	; 0x40
   10c2a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   10c2e:	e773      	b.n	10b18 <_malloc_r+0x8c>
   10c30:	68d3      	ldr	r3, [r2, #12]
   10c32:	429a      	cmp	r2, r3
   10c34:	bf08      	it	eq
   10c36:	3002      	addeq	r0, #2
   10c38:	f47f af40 	bne.w	10abc <_malloc_r+0x30>
   10c3c:	693d      	ldr	r5, [r7, #16]
   10c3e:	f8df c158 	ldr.w	ip, [pc, #344]	; 10d98 <_malloc_r+0x30c>
   10c42:	4565      	cmp	r5, ip
   10c44:	d182      	bne.n	10b4c <_malloc_r+0xc0>
   10c46:	687a      	ldr	r2, [r7, #4]
   10c48:	1083      	asrs	r3, r0, #2
   10c4a:	2101      	movs	r1, #1
   10c4c:	4099      	lsls	r1, r3
   10c4e:	4291      	cmp	r1, r2
   10c50:	d9a7      	bls.n	10ba2 <_malloc_r+0x116>
   10c52:	68bd      	ldr	r5, [r7, #8]
   10c54:	686b      	ldr	r3, [r5, #4]
   10c56:	f023 0903 	bic.w	r9, r3, #3
   10c5a:	454e      	cmp	r6, r9
   10c5c:	d803      	bhi.n	10c66 <_malloc_r+0x1da>
   10c5e:	eba9 0306 	sub.w	r3, r9, r6
   10c62:	2b0f      	cmp	r3, #15
   10c64:	dc7a      	bgt.n	10d5c <_malloc_r+0x2d0>
   10c66:	f8df b134 	ldr.w	fp, [pc, #308]	; 10d9c <_malloc_r+0x310>
   10c6a:	4b47      	ldr	r3, [pc, #284]	; (10d88 <_malloc_r+0x2fc>)
   10c6c:	f8db 2000 	ldr.w	r2, [fp]
   10c70:	681b      	ldr	r3, [r3, #0]
   10c72:	3201      	adds	r2, #1
   10c74:	4433      	add	r3, r6
   10c76:	eb05 0a09 	add.w	sl, r5, r9
   10c7a:	f000 8133 	beq.w	10ee4 <_malloc_r+0x458>
   10c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10c82:	330f      	adds	r3, #15
   10c84:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   10c88:	f028 080f 	bic.w	r8, r8, #15
   10c8c:	4641      	mov	r1, r8
   10c8e:	4620      	mov	r0, r4
   10c90:	f001 fcae 	bl	125f0 <_sbrk_r>
   10c94:	1c41      	adds	r1, r0, #1
   10c96:	4602      	mov	r2, r0
   10c98:	f000 80f3 	beq.w	10e82 <_malloc_r+0x3f6>
   10c9c:	4582      	cmp	sl, r0
   10c9e:	f200 80ee 	bhi.w	10e7e <_malloc_r+0x3f2>
   10ca2:	4b3a      	ldr	r3, [pc, #232]	; (10d8c <_malloc_r+0x300>)
   10ca4:	6819      	ldr	r1, [r3, #0]
   10ca6:	4441      	add	r1, r8
   10ca8:	6019      	str	r1, [r3, #0]
   10caa:	4608      	mov	r0, r1
   10cac:	f000 814e 	beq.w	10f4c <_malloc_r+0x4c0>
   10cb0:	f8db 1000 	ldr.w	r1, [fp]
   10cb4:	9301      	str	r3, [sp, #4]
   10cb6:	3101      	adds	r1, #1
   10cb8:	bf1b      	ittet	ne
   10cba:	eba2 010a 	subne.w	r1, r2, sl
   10cbe:	1809      	addne	r1, r1, r0
   10cc0:	f8cb 2000 	streq.w	r2, [fp]
   10cc4:	6019      	strne	r1, [r3, #0]
   10cc6:	f012 0b07 	ands.w	fp, r2, #7
   10cca:	f000 8117 	beq.w	10efc <_malloc_r+0x470>
   10cce:	f1cb 0108 	rsb	r1, fp, #8
   10cd2:	440a      	add	r2, r1
   10cd4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   10cd8:	4490      	add	r8, r2
   10cda:	3108      	adds	r1, #8
   10cdc:	eba1 0108 	sub.w	r1, r1, r8
   10ce0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10ce4:	4651      	mov	r1, sl
   10ce6:	4620      	mov	r0, r4
   10ce8:	9200      	str	r2, [sp, #0]
   10cea:	f001 fc81 	bl	125f0 <_sbrk_r>
   10cee:	1c42      	adds	r2, r0, #1
   10cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
   10cf4:	f000 814f 	beq.w	10f96 <_malloc_r+0x50a>
   10cf8:	1a80      	subs	r0, r0, r2
   10cfa:	eb00 080a 	add.w	r8, r0, sl
   10cfe:	6819      	ldr	r1, [r3, #0]
   10d00:	60ba      	str	r2, [r7, #8]
   10d02:	f048 0001 	orr.w	r0, r8, #1
   10d06:	4451      	add	r1, sl
   10d08:	42bd      	cmp	r5, r7
   10d0a:	6050      	str	r0, [r2, #4]
   10d0c:	6019      	str	r1, [r3, #0]
   10d0e:	f000 8129 	beq.w	10f64 <_malloc_r+0x4d8>
   10d12:	f1b9 0f0f 	cmp.w	r9, #15
   10d16:	f240 8127 	bls.w	10f68 <_malloc_r+0x4dc>
   10d1a:	6868      	ldr	r0, [r5, #4]
   10d1c:	f1a9 0c0c 	sub.w	ip, r9, #12
   10d20:	f02c 0c07 	bic.w	ip, ip, #7
   10d24:	f000 0001 	and.w	r0, r0, #1
   10d28:	ea40 000c 	orr.w	r0, r0, ip
   10d2c:	6068      	str	r0, [r5, #4]
   10d2e:	f04f 0e05 	mov.w	lr, #5
   10d32:	eb05 000c 	add.w	r0, r5, ip
   10d36:	f1bc 0f0f 	cmp.w	ip, #15
   10d3a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   10d3e:	f200 8132 	bhi.w	10fa6 <_malloc_r+0x51a>
   10d42:	6850      	ldr	r0, [r2, #4]
   10d44:	4615      	mov	r5, r2
   10d46:	4b12      	ldr	r3, [pc, #72]	; (10d90 <_malloc_r+0x304>)
   10d48:	681a      	ldr	r2, [r3, #0]
   10d4a:	428a      	cmp	r2, r1
   10d4c:	bf38      	it	cc
   10d4e:	6019      	strcc	r1, [r3, #0]
   10d50:	4b10      	ldr	r3, [pc, #64]	; (10d94 <_malloc_r+0x308>)
   10d52:	681a      	ldr	r2, [r3, #0]
   10d54:	428a      	cmp	r2, r1
   10d56:	bf38      	it	cc
   10d58:	6019      	strcc	r1, [r3, #0]
   10d5a:	e094      	b.n	10e86 <_malloc_r+0x3fa>
   10d5c:	19aa      	adds	r2, r5, r6
   10d5e:	f043 0301 	orr.w	r3, r3, #1
   10d62:	f046 0601 	orr.w	r6, r6, #1
   10d66:	606e      	str	r6, [r5, #4]
   10d68:	4620      	mov	r0, r4
   10d6a:	60ba      	str	r2, [r7, #8]
   10d6c:	6053      	str	r3, [r2, #4]
   10d6e:	f000 fafd 	bl	1136c <__malloc_unlock>
   10d72:	3508      	adds	r5, #8
   10d74:	4628      	mov	r0, r5
   10d76:	b003      	add	sp, #12
   10d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d7c:	68d9      	ldr	r1, [r3, #12]
   10d7e:	441a      	add	r2, r3
   10d80:	e6a1      	b.n	10ac6 <_malloc_r+0x3a>
   10d82:	bf00      	nop
   10d84:	20003370 	.word	0x20003370
   10d88:	20004d88 	.word	0x20004d88
   10d8c:	20004d58 	.word	0x20004d58
   10d90:	20004d80 	.word	0x20004d80
   10d94:	20004d84 	.word	0x20004d84
   10d98:	20003378 	.word	0x20003378
   10d9c:	20003778 	.word	0x20003778
   10da0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   10da4:	ea4f 2352 	mov.w	r3, r2, lsr #9
   10da8:	d363      	bcc.n	10e72 <_malloc_r+0x3e6>
   10daa:	2b14      	cmp	r3, #20
   10dac:	f200 80b7 	bhi.w	10f1e <_malloc_r+0x492>
   10db0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   10db4:	00c9      	lsls	r1, r1, #3
   10db6:	335b      	adds	r3, #91	; 0x5b
   10db8:	eb07 0e01 	add.w	lr, r7, r1
   10dbc:	5879      	ldr	r1, [r7, r1]
   10dbe:	f1ae 0e08 	sub.w	lr, lr, #8
   10dc2:	458e      	cmp	lr, r1
   10dc4:	f000 8091 	beq.w	10eea <_malloc_r+0x45e>
   10dc8:	684b      	ldr	r3, [r1, #4]
   10dca:	f023 0303 	bic.w	r3, r3, #3
   10dce:	4293      	cmp	r3, r2
   10dd0:	d902      	bls.n	10dd8 <_malloc_r+0x34c>
   10dd2:	6889      	ldr	r1, [r1, #8]
   10dd4:	458e      	cmp	lr, r1
   10dd6:	d1f7      	bne.n	10dc8 <_malloc_r+0x33c>
   10dd8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   10ddc:	687a      	ldr	r2, [r7, #4]
   10dde:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   10de2:	f8ce 5008 	str.w	r5, [lr, #8]
   10de6:	60cd      	str	r5, [r1, #12]
   10de8:	e6d6      	b.n	10b98 <_malloc_r+0x10c>
   10dea:	2b14      	cmp	r3, #20
   10dec:	d959      	bls.n	10ea2 <_malloc_r+0x416>
   10dee:	2b54      	cmp	r3, #84	; 0x54
   10df0:	f200 809d 	bhi.w	10f2e <_malloc_r+0x4a2>
   10df4:	0b33      	lsrs	r3, r6, #12
   10df6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   10dfa:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   10dfe:	00c3      	lsls	r3, r0, #3
   10e00:	e68a      	b.n	10b18 <_malloc_r+0x8c>
   10e02:	f10e 0e01 	add.w	lr, lr, #1
   10e06:	f01e 0f03 	tst.w	lr, #3
   10e0a:	f105 0508 	add.w	r5, r5, #8
   10e0e:	f47f aed5 	bne.w	10bbc <_malloc_r+0x130>
   10e12:	e051      	b.n	10eb8 <_malloc_r+0x42c>
   10e14:	4442      	add	r2, r8
   10e16:	4645      	mov	r5, r8
   10e18:	6853      	ldr	r3, [r2, #4]
   10e1a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   10e1e:	f043 0301 	orr.w	r3, r3, #1
   10e22:	6053      	str	r3, [r2, #4]
   10e24:	f855 3f08 	ldr.w	r3, [r5, #8]!
   10e28:	4620      	mov	r0, r4
   10e2a:	60d9      	str	r1, [r3, #12]
   10e2c:	608b      	str	r3, [r1, #8]
   10e2e:	f000 fa9d 	bl	1136c <__malloc_unlock>
   10e32:	e6f3      	b.n	10c1c <_malloc_r+0x190>
   10e34:	08f0      	lsrs	r0, r6, #3
   10e36:	f106 0208 	add.w	r2, r6, #8
   10e3a:	e637      	b.n	10aac <_malloc_r+0x20>
   10e3c:	442a      	add	r2, r5
   10e3e:	4620      	mov	r0, r4
   10e40:	6853      	ldr	r3, [r2, #4]
   10e42:	f043 0301 	orr.w	r3, r3, #1
   10e46:	6053      	str	r3, [r2, #4]
   10e48:	3508      	adds	r5, #8
   10e4a:	f000 fa8f 	bl	1136c <__malloc_unlock>
   10e4e:	e6e5      	b.n	10c1c <_malloc_r+0x190>
   10e50:	19a9      	adds	r1, r5, r6
   10e52:	4620      	mov	r0, r4
   10e54:	f046 0601 	orr.w	r6, r6, #1
   10e58:	f043 0401 	orr.w	r4, r3, #1
   10e5c:	606e      	str	r6, [r5, #4]
   10e5e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10e62:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10e66:	604c      	str	r4, [r1, #4]
   10e68:	50ab      	str	r3, [r5, r2]
   10e6a:	f000 fa7f 	bl	1136c <__malloc_unlock>
   10e6e:	3508      	adds	r5, #8
   10e70:	e6d4      	b.n	10c1c <_malloc_r+0x190>
   10e72:	0993      	lsrs	r3, r2, #6
   10e74:	f103 0139 	add.w	r1, r3, #57	; 0x39
   10e78:	00c9      	lsls	r1, r1, #3
   10e7a:	3338      	adds	r3, #56	; 0x38
   10e7c:	e79c      	b.n	10db8 <_malloc_r+0x32c>
   10e7e:	42bd      	cmp	r5, r7
   10e80:	d05f      	beq.n	10f42 <_malloc_r+0x4b6>
   10e82:	68bd      	ldr	r5, [r7, #8]
   10e84:	6868      	ldr	r0, [r5, #4]
   10e86:	f020 0803 	bic.w	r8, r0, #3
   10e8a:	4546      	cmp	r6, r8
   10e8c:	eba8 0306 	sub.w	r3, r8, r6
   10e90:	d802      	bhi.n	10e98 <_malloc_r+0x40c>
   10e92:	2b0f      	cmp	r3, #15
   10e94:	f73f af62 	bgt.w	10d5c <_malloc_r+0x2d0>
   10e98:	4620      	mov	r0, r4
   10e9a:	f000 fa67 	bl	1136c <__malloc_unlock>
   10e9e:	2500      	movs	r5, #0
   10ea0:	e6bc      	b.n	10c1c <_malloc_r+0x190>
   10ea2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   10ea6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   10eaa:	00c3      	lsls	r3, r0, #3
   10eac:	e634      	b.n	10b18 <_malloc_r+0x8c>
   10eae:	f859 3908 	ldr.w	r3, [r9], #-8
   10eb2:	454b      	cmp	r3, r9
   10eb4:	f040 8096 	bne.w	10fe4 <_malloc_r+0x558>
   10eb8:	f010 0f03 	tst.w	r0, #3
   10ebc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   10ec0:	d1f5      	bne.n	10eae <_malloc_r+0x422>
   10ec2:	687b      	ldr	r3, [r7, #4]
   10ec4:	ea23 0301 	bic.w	r3, r3, r1
   10ec8:	607b      	str	r3, [r7, #4]
   10eca:	0049      	lsls	r1, r1, #1
   10ecc:	4299      	cmp	r1, r3
   10ece:	f63f aec0 	bhi.w	10c52 <_malloc_r+0x1c6>
   10ed2:	b919      	cbnz	r1, 10edc <_malloc_r+0x450>
   10ed4:	e6bd      	b.n	10c52 <_malloc_r+0x1c6>
   10ed6:	0049      	lsls	r1, r1, #1
   10ed8:	f10e 0e04 	add.w	lr, lr, #4
   10edc:	4219      	tst	r1, r3
   10ede:	d0fa      	beq.n	10ed6 <_malloc_r+0x44a>
   10ee0:	4670      	mov	r0, lr
   10ee2:	e667      	b.n	10bb4 <_malloc_r+0x128>
   10ee4:	f103 0810 	add.w	r8, r3, #16
   10ee8:	e6d0      	b.n	10c8c <_malloc_r+0x200>
   10eea:	109a      	asrs	r2, r3, #2
   10eec:	f04f 0801 	mov.w	r8, #1
   10ef0:	687b      	ldr	r3, [r7, #4]
   10ef2:	fa08 f202 	lsl.w	r2, r8, r2
   10ef6:	431a      	orrs	r2, r3
   10ef8:	607a      	str	r2, [r7, #4]
   10efa:	e770      	b.n	10dde <_malloc_r+0x352>
   10efc:	eb02 0108 	add.w	r1, r2, r8
   10f00:	4249      	negs	r1, r1
   10f02:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10f06:	4651      	mov	r1, sl
   10f08:	4620      	mov	r0, r4
   10f0a:	9200      	str	r2, [sp, #0]
   10f0c:	f001 fb70 	bl	125f0 <_sbrk_r>
   10f10:	1c43      	adds	r3, r0, #1
   10f12:	e9dd 2300 	ldrd	r2, r3, [sp]
   10f16:	f47f aeef 	bne.w	10cf8 <_malloc_r+0x26c>
   10f1a:	46da      	mov	sl, fp
   10f1c:	e6ef      	b.n	10cfe <_malloc_r+0x272>
   10f1e:	2b54      	cmp	r3, #84	; 0x54
   10f20:	d825      	bhi.n	10f6e <_malloc_r+0x4e2>
   10f22:	0b13      	lsrs	r3, r2, #12
   10f24:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   10f28:	00c9      	lsls	r1, r1, #3
   10f2a:	336e      	adds	r3, #110	; 0x6e
   10f2c:	e744      	b.n	10db8 <_malloc_r+0x32c>
   10f2e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10f32:	d825      	bhi.n	10f80 <_malloc_r+0x4f4>
   10f34:	0bf3      	lsrs	r3, r6, #15
   10f36:	f103 0078 	add.w	r0, r3, #120	; 0x78
   10f3a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   10f3e:	00c3      	lsls	r3, r0, #3
   10f40:	e5ea      	b.n	10b18 <_malloc_r+0x8c>
   10f42:	4b29      	ldr	r3, [pc, #164]	; (10fe8 <_malloc_r+0x55c>)
   10f44:	6818      	ldr	r0, [r3, #0]
   10f46:	4440      	add	r0, r8
   10f48:	6018      	str	r0, [r3, #0]
   10f4a:	e6b1      	b.n	10cb0 <_malloc_r+0x224>
   10f4c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   10f50:	f1bc 0f00 	cmp.w	ip, #0
   10f54:	f47f aeac 	bne.w	10cb0 <_malloc_r+0x224>
   10f58:	68bd      	ldr	r5, [r7, #8]
   10f5a:	44c8      	add	r8, r9
   10f5c:	f048 0001 	orr.w	r0, r8, #1
   10f60:	6068      	str	r0, [r5, #4]
   10f62:	e6f0      	b.n	10d46 <_malloc_r+0x2ba>
   10f64:	4615      	mov	r5, r2
   10f66:	e6ee      	b.n	10d46 <_malloc_r+0x2ba>
   10f68:	2301      	movs	r3, #1
   10f6a:	6053      	str	r3, [r2, #4]
   10f6c:	e794      	b.n	10e98 <_malloc_r+0x40c>
   10f6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10f72:	d823      	bhi.n	10fbc <_malloc_r+0x530>
   10f74:	0bd3      	lsrs	r3, r2, #15
   10f76:	f103 0178 	add.w	r1, r3, #120	; 0x78
   10f7a:	00c9      	lsls	r1, r1, #3
   10f7c:	3377      	adds	r3, #119	; 0x77
   10f7e:	e71b      	b.n	10db8 <_malloc_r+0x32c>
   10f80:	f240 5254 	movw	r2, #1364	; 0x554
   10f84:	4293      	cmp	r3, r2
   10f86:	d823      	bhi.n	10fd0 <_malloc_r+0x544>
   10f88:	0cb3      	lsrs	r3, r6, #18
   10f8a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   10f8e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   10f92:	00c3      	lsls	r3, r0, #3
   10f94:	e5c0      	b.n	10b18 <_malloc_r+0x8c>
   10f96:	f1ab 0b08 	sub.w	fp, fp, #8
   10f9a:	44d8      	add	r8, fp
   10f9c:	eba8 0802 	sub.w	r8, r8, r2
   10fa0:	f04f 0a00 	mov.w	sl, #0
   10fa4:	e6ab      	b.n	10cfe <_malloc_r+0x272>
   10fa6:	f105 0108 	add.w	r1, r5, #8
   10faa:	4620      	mov	r0, r4
   10fac:	9300      	str	r3, [sp, #0]
   10fae:	f001 f9b1 	bl	12314 <_free_r>
   10fb2:	68bd      	ldr	r5, [r7, #8]
   10fb4:	9b00      	ldr	r3, [sp, #0]
   10fb6:	6868      	ldr	r0, [r5, #4]
   10fb8:	6819      	ldr	r1, [r3, #0]
   10fba:	e6c4      	b.n	10d46 <_malloc_r+0x2ba>
   10fbc:	f240 5154 	movw	r1, #1364	; 0x554
   10fc0:	428b      	cmp	r3, r1
   10fc2:	d80b      	bhi.n	10fdc <_malloc_r+0x550>
   10fc4:	0c93      	lsrs	r3, r2, #18
   10fc6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   10fca:	00c9      	lsls	r1, r1, #3
   10fcc:	337c      	adds	r3, #124	; 0x7c
   10fce:	e6f3      	b.n	10db8 <_malloc_r+0x32c>
   10fd0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   10fd4:	207f      	movs	r0, #127	; 0x7f
   10fd6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   10fda:	e59d      	b.n	10b18 <_malloc_r+0x8c>
   10fdc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   10fe0:	237e      	movs	r3, #126	; 0x7e
   10fe2:	e6e9      	b.n	10db8 <_malloc_r+0x32c>
   10fe4:	687b      	ldr	r3, [r7, #4]
   10fe6:	e770      	b.n	10eca <_malloc_r+0x43e>
   10fe8:	20004d58 	.word	0x20004d58

00010fec <memcmp>:
   10fec:	2a03      	cmp	r2, #3
   10fee:	b570      	push	{r4, r5, r6, lr}
   10ff0:	d914      	bls.n	1101c <memcmp+0x30>
   10ff2:	ea40 0301 	orr.w	r3, r0, r1
   10ff6:	079b      	lsls	r3, r3, #30
   10ff8:	d122      	bne.n	11040 <memcmp+0x54>
   10ffa:	4604      	mov	r4, r0
   10ffc:	460b      	mov	r3, r1
   10ffe:	4619      	mov	r1, r3
   11000:	4620      	mov	r0, r4
   11002:	680e      	ldr	r6, [r1, #0]
   11004:	6805      	ldr	r5, [r0, #0]
   11006:	42b5      	cmp	r5, r6
   11008:	f104 0404 	add.w	r4, r4, #4
   1100c:	f103 0304 	add.w	r3, r3, #4
   11010:	d116      	bne.n	11040 <memcmp+0x54>
   11012:	3a04      	subs	r2, #4
   11014:	2a03      	cmp	r2, #3
   11016:	4620      	mov	r0, r4
   11018:	4619      	mov	r1, r3
   1101a:	d8f0      	bhi.n	10ffe <memcmp+0x12>
   1101c:	1e54      	subs	r4, r2, #1
   1101e:	b19a      	cbz	r2, 11048 <memcmp+0x5c>
   11020:	1e42      	subs	r2, r0, #1
   11022:	3901      	subs	r1, #1
   11024:	e001      	b.n	1102a <memcmp+0x3e>
   11026:	18c3      	adds	r3, r0, r3
   11028:	d00c      	beq.n	11044 <memcmp+0x58>
   1102a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1102e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   11032:	45e6      	cmp	lr, ip
   11034:	eba4 0302 	sub.w	r3, r4, r2
   11038:	d0f5      	beq.n	11026 <memcmp+0x3a>
   1103a:	ebae 000c 	sub.w	r0, lr, ip
   1103e:	bd70      	pop	{r4, r5, r6, pc}
   11040:	1e54      	subs	r4, r2, #1
   11042:	e7ed      	b.n	11020 <memcmp+0x34>
   11044:	4618      	mov	r0, r3
   11046:	bd70      	pop	{r4, r5, r6, pc}
   11048:	4610      	mov	r0, r2
   1104a:	bd70      	pop	{r4, r5, r6, pc}

0001104c <memmove>:
   1104c:	4288      	cmp	r0, r1
   1104e:	d90d      	bls.n	1106c <memmove+0x20>
   11050:	188b      	adds	r3, r1, r2
   11052:	4283      	cmp	r3, r0
   11054:	d90a      	bls.n	1106c <memmove+0x20>
   11056:	eb00 0c02 	add.w	ip, r0, r2
   1105a:	b1ba      	cbz	r2, 1108c <memmove+0x40>
   1105c:	4662      	mov	r2, ip
   1105e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   11062:	f802 cd01 	strb.w	ip, [r2, #-1]!
   11066:	4299      	cmp	r1, r3
   11068:	d1f9      	bne.n	1105e <memmove+0x12>
   1106a:	4770      	bx	lr
   1106c:	2a0f      	cmp	r2, #15
   1106e:	d80e      	bhi.n	1108e <memmove+0x42>
   11070:	4603      	mov	r3, r0
   11072:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11076:	b14a      	cbz	r2, 1108c <memmove+0x40>
   11078:	f10c 0c01 	add.w	ip, ip, #1
   1107c:	3b01      	subs	r3, #1
   1107e:	448c      	add	ip, r1
   11080:	f811 2b01 	ldrb.w	r2, [r1], #1
   11084:	f803 2f01 	strb.w	r2, [r3, #1]!
   11088:	4561      	cmp	r1, ip
   1108a:	d1f9      	bne.n	11080 <memmove+0x34>
   1108c:	4770      	bx	lr
   1108e:	ea40 0301 	orr.w	r3, r0, r1
   11092:	079b      	lsls	r3, r3, #30
   11094:	d150      	bne.n	11138 <memmove+0xec>
   11096:	f1a2 0310 	sub.w	r3, r2, #16
   1109a:	b570      	push	{r4, r5, r6, lr}
   1109c:	f101 0c20 	add.w	ip, r1, #32
   110a0:	f023 050f 	bic.w	r5, r3, #15
   110a4:	f101 0e10 	add.w	lr, r1, #16
   110a8:	f100 0410 	add.w	r4, r0, #16
   110ac:	44ac      	add	ip, r5
   110ae:	091b      	lsrs	r3, r3, #4
   110b0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   110b4:	f844 5c10 	str.w	r5, [r4, #-16]
   110b8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   110bc:	f844 5c0c 	str.w	r5, [r4, #-12]
   110c0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   110c4:	f844 5c08 	str.w	r5, [r4, #-8]
   110c8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   110cc:	f844 5c04 	str.w	r5, [r4, #-4]
   110d0:	f10e 0e10 	add.w	lr, lr, #16
   110d4:	45e6      	cmp	lr, ip
   110d6:	f104 0410 	add.w	r4, r4, #16
   110da:	d1e9      	bne.n	110b0 <memmove+0x64>
   110dc:	3301      	adds	r3, #1
   110de:	f012 0f0c 	tst.w	r2, #12
   110e2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   110e6:	f002 040f 	and.w	r4, r2, #15
   110ea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   110ee:	d027      	beq.n	11140 <memmove+0xf4>
   110f0:	3c04      	subs	r4, #4
   110f2:	f024 0603 	bic.w	r6, r4, #3
   110f6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   110fa:	441e      	add	r6, r3
   110fc:	1f1c      	subs	r4, r3, #4
   110fe:	468e      	mov	lr, r1
   11100:	f85e 5b04 	ldr.w	r5, [lr], #4
   11104:	f844 5f04 	str.w	r5, [r4, #4]!
   11108:	42b4      	cmp	r4, r6
   1110a:	d1f9      	bne.n	11100 <memmove+0xb4>
   1110c:	f10c 0401 	add.w	r4, ip, #1
   11110:	f002 0203 	and.w	r2, r2, #3
   11114:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11118:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1111c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11120:	b14a      	cbz	r2, 11136 <memmove+0xea>
   11122:	f10c 0c01 	add.w	ip, ip, #1
   11126:	3b01      	subs	r3, #1
   11128:	448c      	add	ip, r1
   1112a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1112e:	f803 2f01 	strb.w	r2, [r3, #1]!
   11132:	4561      	cmp	r1, ip
   11134:	d1f9      	bne.n	1112a <memmove+0xde>
   11136:	bd70      	pop	{r4, r5, r6, pc}
   11138:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1113c:	4603      	mov	r3, r0
   1113e:	e79b      	b.n	11078 <memmove+0x2c>
   11140:	4622      	mov	r2, r4
   11142:	e7eb      	b.n	1111c <memmove+0xd0>

00011144 <__assert_func>:
   11144:	b500      	push	{lr}
   11146:	4c0b      	ldr	r4, [pc, #44]	; (11174 <__assert_func+0x30>)
   11148:	6825      	ldr	r5, [r4, #0]
   1114a:	4614      	mov	r4, r2
   1114c:	68ee      	ldr	r6, [r5, #12]
   1114e:	461a      	mov	r2, r3
   11150:	b085      	sub	sp, #20
   11152:	4603      	mov	r3, r0
   11154:	460d      	mov	r5, r1
   11156:	b14c      	cbz	r4, 1116c <__assert_func+0x28>
   11158:	4907      	ldr	r1, [pc, #28]	; (11178 <__assert_func+0x34>)
   1115a:	9500      	str	r5, [sp, #0]
   1115c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   11160:	4630      	mov	r0, r6
   11162:	4906      	ldr	r1, [pc, #24]	; (1117c <__assert_func+0x38>)
   11164:	f001 f9dc 	bl	12520 <fiprintf>
   11168:	f7fc fd5d 	bl	dc26 <abort>
   1116c:	4904      	ldr	r1, [pc, #16]	; (11180 <__assert_func+0x3c>)
   1116e:	460c      	mov	r4, r1
   11170:	e7f3      	b.n	1115a <__assert_func+0x16>
   11172:	bf00      	nop
   11174:	2000378c 	.word	0x2000378c
   11178:	20002440 	.word	0x20002440
   1117c:	20002450 	.word	0x20002450
   11180:	20001fb0 	.word	0x20001fb0

00011184 <memset>:
   11184:	0783      	lsls	r3, r0, #30
   11186:	b530      	push	{r4, r5, lr}
   11188:	d048      	beq.n	1121c <memset+0x98>
   1118a:	1e54      	subs	r4, r2, #1
   1118c:	2a00      	cmp	r2, #0
   1118e:	d03f      	beq.n	11210 <memset+0x8c>
   11190:	b2ca      	uxtb	r2, r1
   11192:	4603      	mov	r3, r0
   11194:	e001      	b.n	1119a <memset+0x16>
   11196:	3c01      	subs	r4, #1
   11198:	d33a      	bcc.n	11210 <memset+0x8c>
   1119a:	f803 2b01 	strb.w	r2, [r3], #1
   1119e:	079d      	lsls	r5, r3, #30
   111a0:	d1f9      	bne.n	11196 <memset+0x12>
   111a2:	2c03      	cmp	r4, #3
   111a4:	d92d      	bls.n	11202 <memset+0x7e>
   111a6:	b2cd      	uxtb	r5, r1
   111a8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   111ac:	2c0f      	cmp	r4, #15
   111ae:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   111b2:	d936      	bls.n	11222 <memset+0x9e>
   111b4:	f1a4 0210 	sub.w	r2, r4, #16
   111b8:	f022 0c0f 	bic.w	ip, r2, #15
   111bc:	f103 0e20 	add.w	lr, r3, #32
   111c0:	44e6      	add	lr, ip
   111c2:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   111c6:	f103 0210 	add.w	r2, r3, #16
   111ca:	e942 5504 	strd	r5, r5, [r2, #-16]
   111ce:	e942 5502 	strd	r5, r5, [r2, #-8]
   111d2:	3210      	adds	r2, #16
   111d4:	4572      	cmp	r2, lr
   111d6:	d1f8      	bne.n	111ca <memset+0x46>
   111d8:	f10c 0201 	add.w	r2, ip, #1
   111dc:	f014 0f0c 	tst.w	r4, #12
   111e0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   111e4:	f004 0c0f 	and.w	ip, r4, #15
   111e8:	d013      	beq.n	11212 <memset+0x8e>
   111ea:	f1ac 0304 	sub.w	r3, ip, #4
   111ee:	f023 0303 	bic.w	r3, r3, #3
   111f2:	3304      	adds	r3, #4
   111f4:	4413      	add	r3, r2
   111f6:	f842 5b04 	str.w	r5, [r2], #4
   111fa:	4293      	cmp	r3, r2
   111fc:	d1fb      	bne.n	111f6 <memset+0x72>
   111fe:	f00c 0403 	and.w	r4, ip, #3
   11202:	b12c      	cbz	r4, 11210 <memset+0x8c>
   11204:	b2c9      	uxtb	r1, r1
   11206:	441c      	add	r4, r3
   11208:	f803 1b01 	strb.w	r1, [r3], #1
   1120c:	429c      	cmp	r4, r3
   1120e:	d1fb      	bne.n	11208 <memset+0x84>
   11210:	bd30      	pop	{r4, r5, pc}
   11212:	4664      	mov	r4, ip
   11214:	4613      	mov	r3, r2
   11216:	2c00      	cmp	r4, #0
   11218:	d1f4      	bne.n	11204 <memset+0x80>
   1121a:	e7f9      	b.n	11210 <memset+0x8c>
   1121c:	4603      	mov	r3, r0
   1121e:	4614      	mov	r4, r2
   11220:	e7bf      	b.n	111a2 <memset+0x1e>
   11222:	461a      	mov	r2, r3
   11224:	46a4      	mov	ip, r4
   11226:	e7e0      	b.n	111ea <memset+0x66>

00011228 <__cxa_atexit>:
   11228:	4613      	mov	r3, r2
   1122a:	460a      	mov	r2, r1
   1122c:	4601      	mov	r1, r0
   1122e:	2002      	movs	r0, #2
   11230:	f002 ba6c 	b.w	1370c <__register_exitproc>

00011234 <fcvtf>:
   11234:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   11238:	2300      	movs	r3, #0
   1123a:	f002 bac1 	b.w	137c0 <fcvtbuf>
   1123e:	bf00      	nop

00011240 <__libc_init_array>:
   11240:	b570      	push	{r4, r5, r6, lr}
   11242:	4e0d      	ldr	r6, [pc, #52]	; (11278 <__libc_init_array+0x38>)
   11244:	4d0d      	ldr	r5, [pc, #52]	; (1127c <__libc_init_array+0x3c>)
   11246:	1b76      	subs	r6, r6, r5
   11248:	10b6      	asrs	r6, r6, #2
   1124a:	d006      	beq.n	1125a <__libc_init_array+0x1a>
   1124c:	2400      	movs	r4, #0
   1124e:	f855 3b04 	ldr.w	r3, [r5], #4
   11252:	3401      	adds	r4, #1
   11254:	4798      	blx	r3
   11256:	42a6      	cmp	r6, r4
   11258:	d1f9      	bne.n	1124e <__libc_init_array+0xe>
   1125a:	4e09      	ldr	r6, [pc, #36]	; (11280 <__libc_init_array+0x40>)
   1125c:	4d09      	ldr	r5, [pc, #36]	; (11284 <__libc_init_array+0x44>)
   1125e:	1b76      	subs	r6, r6, r5
   11260:	f003 ff9a 	bl	15198 <___init_veneer>
   11264:	10b6      	asrs	r6, r6, #2
   11266:	d006      	beq.n	11276 <__libc_init_array+0x36>
   11268:	2400      	movs	r4, #0
   1126a:	f855 3b04 	ldr.w	r3, [r5], #4
   1126e:	3401      	adds	r4, #1
   11270:	4798      	blx	r3
   11272:	42a6      	cmp	r6, r4
   11274:	d1f9      	bne.n	1126a <__libc_init_array+0x2a>
   11276:	bd70      	pop	{r4, r5, r6, pc}
   11278:	60001f90 	.word	0x60001f90
   1127c:	60001f90 	.word	0x60001f90
   11280:	60001fac 	.word	0x60001fac
   11284:	60001f90 	.word	0x60001f90

00011288 <__retarget_lock_init_recursive>:
   11288:	4770      	bx	lr
   1128a:	bf00      	nop

0001128c <__retarget_lock_close_recursive>:
   1128c:	4770      	bx	lr
   1128e:	bf00      	nop

00011290 <__retarget_lock_acquire_recursive>:
   11290:	4770      	bx	lr
   11292:	bf00      	nop

00011294 <__retarget_lock_release_recursive>:
   11294:	4770      	bx	lr
   11296:	bf00      	nop

00011298 <__locale_mb_cur_max>:
   11298:	4b01      	ldr	r3, [pc, #4]	; (112a0 <__locale_mb_cur_max+0x8>)
   1129a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1129e:	4770      	bx	lr
   112a0:	20003204 	.word	0x20003204

000112a4 <strcpy>:
   112a4:	ea80 0201 	eor.w	r2, r0, r1
   112a8:	4684      	mov	ip, r0
   112aa:	f012 0f03 	tst.w	r2, #3
   112ae:	d14f      	bne.n	11350 <strcpy+0xac>
   112b0:	f011 0f03 	tst.w	r1, #3
   112b4:	d132      	bne.n	1131c <strcpy+0x78>
   112b6:	f84d 4d04 	str.w	r4, [sp, #-4]!
   112ba:	f011 0f04 	tst.w	r1, #4
   112be:	f851 3b04 	ldr.w	r3, [r1], #4
   112c2:	d00b      	beq.n	112dc <strcpy+0x38>
   112c4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   112c8:	439a      	bics	r2, r3
   112ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   112ce:	bf04      	itt	eq
   112d0:	f84c 3b04 	streq.w	r3, [ip], #4
   112d4:	f851 3b04 	ldreq.w	r3, [r1], #4
   112d8:	d116      	bne.n	11308 <strcpy+0x64>
   112da:	bf00      	nop
   112dc:	f851 4b04 	ldr.w	r4, [r1], #4
   112e0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   112e4:	439a      	bics	r2, r3
   112e6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   112ea:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   112ee:	d10b      	bne.n	11308 <strcpy+0x64>
   112f0:	f84c 3b04 	str.w	r3, [ip], #4
   112f4:	43a2      	bics	r2, r4
   112f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   112fa:	bf04      	itt	eq
   112fc:	f851 3b04 	ldreq.w	r3, [r1], #4
   11300:	f84c 4b04 	streq.w	r4, [ip], #4
   11304:	d0ea      	beq.n	112dc <strcpy+0x38>
   11306:	4623      	mov	r3, r4
   11308:	f80c 3b01 	strb.w	r3, [ip], #1
   1130c:	f013 0fff 	tst.w	r3, #255	; 0xff
   11310:	ea4f 2333 	mov.w	r3, r3, ror #8
   11314:	d1f8      	bne.n	11308 <strcpy+0x64>
   11316:	f85d 4b04 	ldr.w	r4, [sp], #4
   1131a:	4770      	bx	lr
   1131c:	f011 0f01 	tst.w	r1, #1
   11320:	d006      	beq.n	11330 <strcpy+0x8c>
   11322:	f811 2b01 	ldrb.w	r2, [r1], #1
   11326:	f80c 2b01 	strb.w	r2, [ip], #1
   1132a:	2a00      	cmp	r2, #0
   1132c:	bf08      	it	eq
   1132e:	4770      	bxeq	lr
   11330:	f011 0f02 	tst.w	r1, #2
   11334:	d0bf      	beq.n	112b6 <strcpy+0x12>
   11336:	f831 2b02 	ldrh.w	r2, [r1], #2
   1133a:	f012 0fff 	tst.w	r2, #255	; 0xff
   1133e:	bf16      	itet	ne
   11340:	f82c 2b02 	strhne.w	r2, [ip], #2
   11344:	f88c 2000 	strbeq.w	r2, [ip]
   11348:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   1134c:	d1b3      	bne.n	112b6 <strcpy+0x12>
   1134e:	4770      	bx	lr
   11350:	f811 2b01 	ldrb.w	r2, [r1], #1
   11354:	f80c 2b01 	strb.w	r2, [ip], #1
   11358:	2a00      	cmp	r2, #0
   1135a:	d1f9      	bne.n	11350 <strcpy+0xac>
   1135c:	4770      	bx	lr
   1135e:	bf00      	nop

00011360 <__malloc_lock>:
   11360:	4801      	ldr	r0, [pc, #4]	; (11368 <__malloc_lock+0x8>)
   11362:	f7ff bf95 	b.w	11290 <__retarget_lock_acquire_recursive>
   11366:	bf00      	nop
   11368:	20004d50 	.word	0x20004d50

0001136c <__malloc_unlock>:
   1136c:	4801      	ldr	r0, [pc, #4]	; (11374 <__malloc_unlock+0x8>)
   1136e:	f7ff bf91 	b.w	11294 <__retarget_lock_release_recursive>
   11372:	bf00      	nop
   11374:	20004d50 	.word	0x20004d50

00011378 <_Balloc>:
   11378:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1137a:	b570      	push	{r4, r5, r6, lr}
   1137c:	4605      	mov	r5, r0
   1137e:	460c      	mov	r4, r1
   11380:	b14b      	cbz	r3, 11396 <_Balloc+0x1e>
   11382:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11386:	b180      	cbz	r0, 113aa <_Balloc+0x32>
   11388:	6802      	ldr	r2, [r0, #0]
   1138a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1138e:	2300      	movs	r3, #0
   11390:	e9c0 3303 	strd	r3, r3, [r0, #12]
   11394:	bd70      	pop	{r4, r5, r6, pc}
   11396:	2221      	movs	r2, #33	; 0x21
   11398:	2104      	movs	r1, #4
   1139a:	f000 fba9 	bl	11af0 <_calloc_r>
   1139e:	4603      	mov	r3, r0
   113a0:	6468      	str	r0, [r5, #68]	; 0x44
   113a2:	2800      	cmp	r0, #0
   113a4:	d1ed      	bne.n	11382 <_Balloc+0xa>
   113a6:	2000      	movs	r0, #0
   113a8:	bd70      	pop	{r4, r5, r6, pc}
   113aa:	2101      	movs	r1, #1
   113ac:	fa01 f604 	lsl.w	r6, r1, r4
   113b0:	1d72      	adds	r2, r6, #5
   113b2:	0092      	lsls	r2, r2, #2
   113b4:	4628      	mov	r0, r5
   113b6:	f000 fb9b 	bl	11af0 <_calloc_r>
   113ba:	2800      	cmp	r0, #0
   113bc:	d0f3      	beq.n	113a6 <_Balloc+0x2e>
   113be:	e9c0 4601 	strd	r4, r6, [r0, #4]
   113c2:	e7e4      	b.n	1138e <_Balloc+0x16>

000113c4 <_Bfree>:
   113c4:	b131      	cbz	r1, 113d4 <_Bfree+0x10>
   113c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   113c8:	684a      	ldr	r2, [r1, #4]
   113ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   113ce:	6008      	str	r0, [r1, #0]
   113d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   113d4:	4770      	bx	lr
   113d6:	bf00      	nop

000113d8 <__multadd>:
   113d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113dc:	690e      	ldr	r6, [r1, #16]
   113de:	4680      	mov	r8, r0
   113e0:	460f      	mov	r7, r1
   113e2:	461d      	mov	r5, r3
   113e4:	f101 0e14 	add.w	lr, r1, #20
   113e8:	2000      	movs	r0, #0
   113ea:	f8de 1000 	ldr.w	r1, [lr]
   113ee:	b28c      	uxth	r4, r1
   113f0:	fb02 5304 	mla	r3, r2, r4, r5
   113f4:	0c09      	lsrs	r1, r1, #16
   113f6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   113fa:	fb02 cc01 	mla	ip, r2, r1, ip
   113fe:	3001      	adds	r0, #1
   11400:	b29c      	uxth	r4, r3
   11402:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   11406:	4286      	cmp	r6, r0
   11408:	f84e 4b04 	str.w	r4, [lr], #4
   1140c:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11410:	dceb      	bgt.n	113ea <__multadd+0x12>
   11412:	b13d      	cbz	r5, 11424 <__multadd+0x4c>
   11414:	68bb      	ldr	r3, [r7, #8]
   11416:	42b3      	cmp	r3, r6
   11418:	dd07      	ble.n	1142a <__multadd+0x52>
   1141a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1141e:	3601      	adds	r6, #1
   11420:	615d      	str	r5, [r3, #20]
   11422:	613e      	str	r6, [r7, #16]
   11424:	4638      	mov	r0, r7
   11426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1142a:	6879      	ldr	r1, [r7, #4]
   1142c:	4640      	mov	r0, r8
   1142e:	3101      	adds	r1, #1
   11430:	f7ff ffa2 	bl	11378 <_Balloc>
   11434:	4604      	mov	r4, r0
   11436:	b1b0      	cbz	r0, 11466 <__multadd+0x8e>
   11438:	693a      	ldr	r2, [r7, #16]
   1143a:	3202      	adds	r2, #2
   1143c:	f107 010c 	add.w	r1, r7, #12
   11440:	0092      	lsls	r2, r2, #2
   11442:	300c      	adds	r0, #12
   11444:	f7fb fdd4 	bl	cff0 <memcpy>
   11448:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1144c:	687a      	ldr	r2, [r7, #4]
   1144e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11452:	6039      	str	r1, [r7, #0]
   11454:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11458:	4627      	mov	r7, r4
   1145a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1145e:	3601      	adds	r6, #1
   11460:	615d      	str	r5, [r3, #20]
   11462:	613e      	str	r6, [r7, #16]
   11464:	e7de      	b.n	11424 <__multadd+0x4c>
   11466:	4b03      	ldr	r3, [pc, #12]	; (11474 <__multadd+0x9c>)
   11468:	4803      	ldr	r0, [pc, #12]	; (11478 <__multadd+0xa0>)
   1146a:	4622      	mov	r2, r4
   1146c:	21ba      	movs	r1, #186	; 0xba
   1146e:	f7ff fe69 	bl	11144 <__assert_func>
   11472:	bf00      	nop
   11474:	20002480 	.word	0x20002480
   11478:	20002494 	.word	0x20002494

0001147c <__hi0bits>:
   1147c:	0c03      	lsrs	r3, r0, #16
   1147e:	041b      	lsls	r3, r3, #16
   11480:	b9d3      	cbnz	r3, 114b8 <__hi0bits+0x3c>
   11482:	0400      	lsls	r0, r0, #16
   11484:	2310      	movs	r3, #16
   11486:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   1148a:	bf04      	itt	eq
   1148c:	0200      	lsleq	r0, r0, #8
   1148e:	3308      	addeq	r3, #8
   11490:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11494:	bf04      	itt	eq
   11496:	0100      	lsleq	r0, r0, #4
   11498:	3304      	addeq	r3, #4
   1149a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   1149e:	bf04      	itt	eq
   114a0:	0080      	lsleq	r0, r0, #2
   114a2:	3302      	addeq	r3, #2
   114a4:	2800      	cmp	r0, #0
   114a6:	db05      	blt.n	114b4 <__hi0bits+0x38>
   114a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   114ac:	f103 0301 	add.w	r3, r3, #1
   114b0:	bf08      	it	eq
   114b2:	2320      	moveq	r3, #32
   114b4:	4618      	mov	r0, r3
   114b6:	4770      	bx	lr
   114b8:	2300      	movs	r3, #0
   114ba:	e7e4      	b.n	11486 <__hi0bits+0xa>

000114bc <__lo0bits>:
   114bc:	6803      	ldr	r3, [r0, #0]
   114be:	f013 0207 	ands.w	r2, r3, #7
   114c2:	d008      	beq.n	114d6 <__lo0bits+0x1a>
   114c4:	07d9      	lsls	r1, r3, #31
   114c6:	d41f      	bmi.n	11508 <__lo0bits+0x4c>
   114c8:	079a      	lsls	r2, r3, #30
   114ca:	d522      	bpl.n	11512 <__lo0bits+0x56>
   114cc:	085b      	lsrs	r3, r3, #1
   114ce:	6003      	str	r3, [r0, #0]
   114d0:	2201      	movs	r2, #1
   114d2:	4610      	mov	r0, r2
   114d4:	4770      	bx	lr
   114d6:	b299      	uxth	r1, r3
   114d8:	b909      	cbnz	r1, 114de <__lo0bits+0x22>
   114da:	0c1b      	lsrs	r3, r3, #16
   114dc:	2210      	movs	r2, #16
   114de:	b2d9      	uxtb	r1, r3
   114e0:	b909      	cbnz	r1, 114e6 <__lo0bits+0x2a>
   114e2:	3208      	adds	r2, #8
   114e4:	0a1b      	lsrs	r3, r3, #8
   114e6:	0719      	lsls	r1, r3, #28
   114e8:	bf04      	itt	eq
   114ea:	091b      	lsreq	r3, r3, #4
   114ec:	3204      	addeq	r2, #4
   114ee:	0799      	lsls	r1, r3, #30
   114f0:	bf04      	itt	eq
   114f2:	089b      	lsreq	r3, r3, #2
   114f4:	3202      	addeq	r2, #2
   114f6:	07d9      	lsls	r1, r3, #31
   114f8:	d403      	bmi.n	11502 <__lo0bits+0x46>
   114fa:	085b      	lsrs	r3, r3, #1
   114fc:	f102 0201 	add.w	r2, r2, #1
   11500:	d005      	beq.n	1150e <__lo0bits+0x52>
   11502:	6003      	str	r3, [r0, #0]
   11504:	4610      	mov	r0, r2
   11506:	4770      	bx	lr
   11508:	2200      	movs	r2, #0
   1150a:	4610      	mov	r0, r2
   1150c:	4770      	bx	lr
   1150e:	2220      	movs	r2, #32
   11510:	e7df      	b.n	114d2 <__lo0bits+0x16>
   11512:	089b      	lsrs	r3, r3, #2
   11514:	2202      	movs	r2, #2
   11516:	6003      	str	r3, [r0, #0]
   11518:	4610      	mov	r0, r2
   1151a:	4770      	bx	lr

0001151c <__i2b>:
   1151c:	b538      	push	{r3, r4, r5, lr}
   1151e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11520:	4604      	mov	r4, r0
   11522:	460d      	mov	r5, r1
   11524:	b14b      	cbz	r3, 1153a <__i2b+0x1e>
   11526:	6858      	ldr	r0, [r3, #4]
   11528:	b1b0      	cbz	r0, 11558 <__i2b+0x3c>
   1152a:	6802      	ldr	r2, [r0, #0]
   1152c:	605a      	str	r2, [r3, #4]
   1152e:	2200      	movs	r2, #0
   11530:	2301      	movs	r3, #1
   11532:	e9c0 3504 	strd	r3, r5, [r0, #16]
   11536:	60c2      	str	r2, [r0, #12]
   11538:	bd38      	pop	{r3, r4, r5, pc}
   1153a:	2221      	movs	r2, #33	; 0x21
   1153c:	2104      	movs	r1, #4
   1153e:	f000 fad7 	bl	11af0 <_calloc_r>
   11542:	4603      	mov	r3, r0
   11544:	6460      	str	r0, [r4, #68]	; 0x44
   11546:	2800      	cmp	r0, #0
   11548:	d1ed      	bne.n	11526 <__i2b+0xa>
   1154a:	4b09      	ldr	r3, [pc, #36]	; (11570 <__i2b+0x54>)
   1154c:	4809      	ldr	r0, [pc, #36]	; (11574 <__i2b+0x58>)
   1154e:	2200      	movs	r2, #0
   11550:	f240 1145 	movw	r1, #325	; 0x145
   11554:	f7ff fdf6 	bl	11144 <__assert_func>
   11558:	221c      	movs	r2, #28
   1155a:	2101      	movs	r1, #1
   1155c:	4620      	mov	r0, r4
   1155e:	f000 fac7 	bl	11af0 <_calloc_r>
   11562:	2800      	cmp	r0, #0
   11564:	d0f1      	beq.n	1154a <__i2b+0x2e>
   11566:	2201      	movs	r2, #1
   11568:	2302      	movs	r3, #2
   1156a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   1156e:	e7de      	b.n	1152e <__i2b+0x12>
   11570:	20002480 	.word	0x20002480
   11574:	20002494 	.word	0x20002494

00011578 <__multiply>:
   11578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1157c:	690e      	ldr	r6, [r1, #16]
   1157e:	6915      	ldr	r5, [r2, #16]
   11580:	42ae      	cmp	r6, r5
   11582:	b085      	sub	sp, #20
   11584:	4688      	mov	r8, r1
   11586:	4614      	mov	r4, r2
   11588:	db05      	blt.n	11596 <__multiply+0x1e>
   1158a:	462a      	mov	r2, r5
   1158c:	4623      	mov	r3, r4
   1158e:	4635      	mov	r5, r6
   11590:	460c      	mov	r4, r1
   11592:	4616      	mov	r6, r2
   11594:	4698      	mov	r8, r3
   11596:	68a3      	ldr	r3, [r4, #8]
   11598:	6861      	ldr	r1, [r4, #4]
   1159a:	19af      	adds	r7, r5, r6
   1159c:	42bb      	cmp	r3, r7
   1159e:	bfb8      	it	lt
   115a0:	3101      	addlt	r1, #1
   115a2:	f7ff fee9 	bl	11378 <_Balloc>
   115a6:	9001      	str	r0, [sp, #4]
   115a8:	2800      	cmp	r0, #0
   115aa:	f000 8087 	beq.w	116bc <__multiply+0x144>
   115ae:	9b01      	ldr	r3, [sp, #4]
   115b0:	f103 0914 	add.w	r9, r3, #20
   115b4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   115b8:	45d1      	cmp	r9, sl
   115ba:	d205      	bcs.n	115c8 <__multiply+0x50>
   115bc:	464b      	mov	r3, r9
   115be:	2200      	movs	r2, #0
   115c0:	f843 2b04 	str.w	r2, [r3], #4
   115c4:	459a      	cmp	sl, r3
   115c6:	d8fb      	bhi.n	115c0 <__multiply+0x48>
   115c8:	f108 0814 	add.w	r8, r8, #20
   115cc:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   115d0:	f104 0314 	add.w	r3, r4, #20
   115d4:	45d8      	cmp	r8, fp
   115d6:	461a      	mov	r2, r3
   115d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   115dc:	d25f      	bcs.n	1169e <__multiply+0x126>
   115de:	1b2b      	subs	r3, r5, r4
   115e0:	3b15      	subs	r3, #21
   115e2:	f023 0303 	bic.w	r3, r3, #3
   115e6:	3304      	adds	r3, #4
   115e8:	3415      	adds	r4, #21
   115ea:	42a5      	cmp	r5, r4
   115ec:	bf38      	it	cc
   115ee:	2304      	movcc	r3, #4
   115f0:	e9cd a702 	strd	sl, r7, [sp, #8]
   115f4:	46ac      	mov	ip, r5
   115f6:	461f      	mov	r7, r3
   115f8:	4692      	mov	sl, r2
   115fa:	e005      	b.n	11608 <__multiply+0x90>
   115fc:	0c09      	lsrs	r1, r1, #16
   115fe:	d129      	bne.n	11654 <__multiply+0xdc>
   11600:	45c3      	cmp	fp, r8
   11602:	f109 0904 	add.w	r9, r9, #4
   11606:	d948      	bls.n	1169a <__multiply+0x122>
   11608:	f858 1b04 	ldr.w	r1, [r8], #4
   1160c:	b28d      	uxth	r5, r1
   1160e:	2d00      	cmp	r5, #0
   11610:	d0f4      	beq.n	115fc <__multiply+0x84>
   11612:	4656      	mov	r6, sl
   11614:	464c      	mov	r4, r9
   11616:	2300      	movs	r3, #0
   11618:	f856 1b04 	ldr.w	r1, [r6], #4
   1161c:	6822      	ldr	r2, [r4, #0]
   1161e:	fa1f fe81 	uxth.w	lr, r1
   11622:	b290      	uxth	r0, r2
   11624:	0c09      	lsrs	r1, r1, #16
   11626:	fb05 000e 	mla	r0, r5, lr, r0
   1162a:	0c12      	lsrs	r2, r2, #16
   1162c:	4403      	add	r3, r0
   1162e:	fb05 2201 	mla	r2, r5, r1, r2
   11632:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11636:	b29b      	uxth	r3, r3
   11638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1163c:	45b4      	cmp	ip, r6
   1163e:	f844 3b04 	str.w	r3, [r4], #4
   11642:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11646:	d8e7      	bhi.n	11618 <__multiply+0xa0>
   11648:	f849 3007 	str.w	r3, [r9, r7]
   1164c:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11650:	0c09      	lsrs	r1, r1, #16
   11652:	d0d5      	beq.n	11600 <__multiply+0x88>
   11654:	f8d9 3000 	ldr.w	r3, [r9]
   11658:	4650      	mov	r0, sl
   1165a:	461a      	mov	r2, r3
   1165c:	464c      	mov	r4, r9
   1165e:	2600      	movs	r6, #0
   11660:	8805      	ldrh	r5, [r0, #0]
   11662:	0c12      	lsrs	r2, r2, #16
   11664:	fb01 2205 	mla	r2, r1, r5, r2
   11668:	4416      	add	r6, r2
   1166a:	b29b      	uxth	r3, r3
   1166c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   11670:	f844 3b04 	str.w	r3, [r4], #4
   11674:	f850 5b04 	ldr.w	r5, [r0], #4
   11678:	6822      	ldr	r2, [r4, #0]
   1167a:	0c2d      	lsrs	r5, r5, #16
   1167c:	b293      	uxth	r3, r2
   1167e:	fb01 3305 	mla	r3, r1, r5, r3
   11682:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   11686:	4584      	cmp	ip, r0
   11688:	ea4f 4613 	mov.w	r6, r3, lsr #16
   1168c:	d8e8      	bhi.n	11660 <__multiply+0xe8>
   1168e:	45c3      	cmp	fp, r8
   11690:	f849 3007 	str.w	r3, [r9, r7]
   11694:	f109 0904 	add.w	r9, r9, #4
   11698:	d8b6      	bhi.n	11608 <__multiply+0x90>
   1169a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   1169e:	2f00      	cmp	r7, #0
   116a0:	dc02      	bgt.n	116a8 <__multiply+0x130>
   116a2:	e005      	b.n	116b0 <__multiply+0x138>
   116a4:	3f01      	subs	r7, #1
   116a6:	d003      	beq.n	116b0 <__multiply+0x138>
   116a8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   116ac:	2b00      	cmp	r3, #0
   116ae:	d0f9      	beq.n	116a4 <__multiply+0x12c>
   116b0:	9b01      	ldr	r3, [sp, #4]
   116b2:	4618      	mov	r0, r3
   116b4:	611f      	str	r7, [r3, #16]
   116b6:	b005      	add	sp, #20
   116b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116bc:	4b03      	ldr	r3, [pc, #12]	; (116cc <__multiply+0x154>)
   116be:	4804      	ldr	r0, [pc, #16]	; (116d0 <__multiply+0x158>)
   116c0:	9a01      	ldr	r2, [sp, #4]
   116c2:	f44f 71b1 	mov.w	r1, #354	; 0x162
   116c6:	f7ff fd3d 	bl	11144 <__assert_func>
   116ca:	bf00      	nop
   116cc:	20002480 	.word	0x20002480
   116d0:	20002494 	.word	0x20002494

000116d4 <__pow5mult>:
   116d4:	f012 0303 	ands.w	r3, r2, #3
   116d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116dc:	4614      	mov	r4, r2
   116de:	4606      	mov	r6, r0
   116e0:	d132      	bne.n	11748 <__pow5mult+0x74>
   116e2:	460d      	mov	r5, r1
   116e4:	10a4      	asrs	r4, r4, #2
   116e6:	d020      	beq.n	1172a <__pow5mult+0x56>
   116e8:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   116ec:	f1b8 0f00 	cmp.w	r8, #0
   116f0:	d033      	beq.n	1175a <__pow5mult+0x86>
   116f2:	07e3      	lsls	r3, r4, #31
   116f4:	f04f 0700 	mov.w	r7, #0
   116f8:	d407      	bmi.n	1170a <__pow5mult+0x36>
   116fa:	1064      	asrs	r4, r4, #1
   116fc:	d015      	beq.n	1172a <__pow5mult+0x56>
   116fe:	f8d8 0000 	ldr.w	r0, [r8]
   11702:	b1a8      	cbz	r0, 11730 <__pow5mult+0x5c>
   11704:	4680      	mov	r8, r0
   11706:	07e3      	lsls	r3, r4, #31
   11708:	d5f7      	bpl.n	116fa <__pow5mult+0x26>
   1170a:	4642      	mov	r2, r8
   1170c:	4629      	mov	r1, r5
   1170e:	4630      	mov	r0, r6
   11710:	f7ff ff32 	bl	11578 <__multiply>
   11714:	b1b5      	cbz	r5, 11744 <__pow5mult+0x70>
   11716:	6869      	ldr	r1, [r5, #4]
   11718:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1171a:	1064      	asrs	r4, r4, #1
   1171c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   11720:	602a      	str	r2, [r5, #0]
   11722:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   11726:	4605      	mov	r5, r0
   11728:	d1e9      	bne.n	116fe <__pow5mult+0x2a>
   1172a:	4628      	mov	r0, r5
   1172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11730:	4642      	mov	r2, r8
   11732:	4641      	mov	r1, r8
   11734:	4630      	mov	r0, r6
   11736:	f7ff ff1f 	bl	11578 <__multiply>
   1173a:	f8c8 0000 	str.w	r0, [r8]
   1173e:	6007      	str	r7, [r0, #0]
   11740:	4680      	mov	r8, r0
   11742:	e7e0      	b.n	11706 <__pow5mult+0x32>
   11744:	4605      	mov	r5, r0
   11746:	e7d8      	b.n	116fa <__pow5mult+0x26>
   11748:	3b01      	subs	r3, #1
   1174a:	4a0f      	ldr	r2, [pc, #60]	; (11788 <__pow5mult+0xb4>)
   1174c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11750:	2300      	movs	r3, #0
   11752:	f7ff fe41 	bl	113d8 <__multadd>
   11756:	4605      	mov	r5, r0
   11758:	e7c4      	b.n	116e4 <__pow5mult+0x10>
   1175a:	2101      	movs	r1, #1
   1175c:	4630      	mov	r0, r6
   1175e:	f7ff fe0b 	bl	11378 <_Balloc>
   11762:	4680      	mov	r8, r0
   11764:	b140      	cbz	r0, 11778 <__pow5mult+0xa4>
   11766:	2301      	movs	r3, #1
   11768:	f240 2271 	movw	r2, #625	; 0x271
   1176c:	e9c0 3204 	strd	r3, r2, [r0, #16]
   11770:	2300      	movs	r3, #0
   11772:	6430      	str	r0, [r6, #64]	; 0x40
   11774:	6003      	str	r3, [r0, #0]
   11776:	e7bc      	b.n	116f2 <__pow5mult+0x1e>
   11778:	4b04      	ldr	r3, [pc, #16]	; (1178c <__pow5mult+0xb8>)
   1177a:	4805      	ldr	r0, [pc, #20]	; (11790 <__pow5mult+0xbc>)
   1177c:	4642      	mov	r2, r8
   1177e:	f240 1145 	movw	r1, #325	; 0x145
   11782:	f7ff fcdf 	bl	11144 <__assert_func>
   11786:	bf00      	nop
   11788:	20002b0c 	.word	0x20002b0c
   1178c:	20002480 	.word	0x20002480
   11790:	20002494 	.word	0x20002494

00011794 <__lshift>:
   11794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11798:	460d      	mov	r5, r1
   1179a:	4614      	mov	r4, r2
   1179c:	692f      	ldr	r7, [r5, #16]
   1179e:	68ab      	ldr	r3, [r5, #8]
   117a0:	6849      	ldr	r1, [r1, #4]
   117a2:	eb07 1762 	add.w	r7, r7, r2, asr #5
   117a6:	1c7e      	adds	r6, r7, #1
   117a8:	429e      	cmp	r6, r3
   117aa:	4680      	mov	r8, r0
   117ac:	ea4f 1962 	mov.w	r9, r2, asr #5
   117b0:	dd04      	ble.n	117bc <__lshift+0x28>
   117b2:	005b      	lsls	r3, r3, #1
   117b4:	429e      	cmp	r6, r3
   117b6:	f101 0101 	add.w	r1, r1, #1
   117ba:	dcfa      	bgt.n	117b2 <__lshift+0x1e>
   117bc:	4640      	mov	r0, r8
   117be:	f7ff fddb 	bl	11378 <_Balloc>
   117c2:	4684      	mov	ip, r0
   117c4:	2800      	cmp	r0, #0
   117c6:	d052      	beq.n	1186e <__lshift+0xda>
   117c8:	f1b9 0f00 	cmp.w	r9, #0
   117cc:	f100 0214 	add.w	r2, r0, #20
   117d0:	dd0e      	ble.n	117f0 <__lshift+0x5c>
   117d2:	f109 0105 	add.w	r1, r9, #5
   117d6:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   117da:	4613      	mov	r3, r2
   117dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   117e0:	2000      	movs	r0, #0
   117e2:	f843 0b04 	str.w	r0, [r3], #4
   117e6:	428b      	cmp	r3, r1
   117e8:	d1fb      	bne.n	117e2 <__lshift+0x4e>
   117ea:	f1ae 0314 	sub.w	r3, lr, #20
   117ee:	441a      	add	r2, r3
   117f0:	6929      	ldr	r1, [r5, #16]
   117f2:	f105 0314 	add.w	r3, r5, #20
   117f6:	f014 0e1f 	ands.w	lr, r4, #31
   117fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   117fe:	d02e      	beq.n	1185e <__lshift+0xca>
   11800:	f1ce 0920 	rsb	r9, lr, #32
   11804:	4610      	mov	r0, r2
   11806:	f04f 0a00 	mov.w	sl, #0
   1180a:	681c      	ldr	r4, [r3, #0]
   1180c:	fa04 f40e 	lsl.w	r4, r4, lr
   11810:	ea44 040a 	orr.w	r4, r4, sl
   11814:	f840 4b04 	str.w	r4, [r0], #4
   11818:	f853 4b04 	ldr.w	r4, [r3], #4
   1181c:	4299      	cmp	r1, r3
   1181e:	fa24 fa09 	lsr.w	sl, r4, r9
   11822:	d8f2      	bhi.n	1180a <__lshift+0x76>
   11824:	1b4b      	subs	r3, r1, r5
   11826:	3b15      	subs	r3, #21
   11828:	f023 0303 	bic.w	r3, r3, #3
   1182c:	3304      	adds	r3, #4
   1182e:	f105 0015 	add.w	r0, r5, #21
   11832:	4281      	cmp	r1, r0
   11834:	bf38      	it	cc
   11836:	2304      	movcc	r3, #4
   11838:	f1ba 0f00 	cmp.w	sl, #0
   1183c:	bf18      	it	ne
   1183e:	4637      	movne	r7, r6
   11840:	f842 a003 	str.w	sl, [r2, r3]
   11844:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11848:	686a      	ldr	r2, [r5, #4]
   1184a:	f8cc 7010 	str.w	r7, [ip, #16]
   1184e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11852:	6029      	str	r1, [r5, #0]
   11854:	4660      	mov	r0, ip
   11856:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1185a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1185e:	3a04      	subs	r2, #4
   11860:	f853 0b04 	ldr.w	r0, [r3], #4
   11864:	f842 0f04 	str.w	r0, [r2, #4]!
   11868:	4299      	cmp	r1, r3
   1186a:	d8f9      	bhi.n	11860 <__lshift+0xcc>
   1186c:	e7ea      	b.n	11844 <__lshift+0xb0>
   1186e:	4b03      	ldr	r3, [pc, #12]	; (1187c <__lshift+0xe8>)
   11870:	4803      	ldr	r0, [pc, #12]	; (11880 <__lshift+0xec>)
   11872:	4662      	mov	r2, ip
   11874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   11878:	f7ff fc64 	bl	11144 <__assert_func>
   1187c:	20002480 	.word	0x20002480
   11880:	20002494 	.word	0x20002494

00011884 <__mcmp>:
   11884:	690b      	ldr	r3, [r1, #16]
   11886:	4684      	mov	ip, r0
   11888:	6900      	ldr	r0, [r0, #16]
   1188a:	1ac0      	subs	r0, r0, r3
   1188c:	d116      	bne.n	118bc <__mcmp+0x38>
   1188e:	f10c 0c14 	add.w	ip, ip, #20
   11892:	3114      	adds	r1, #20
   11894:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   11898:	b410      	push	{r4}
   1189a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1189e:	e001      	b.n	118a4 <__mcmp+0x20>
   118a0:	4594      	cmp	ip, r2
   118a2:	d208      	bcs.n	118b6 <__mcmp+0x32>
   118a4:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   118a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   118ac:	428c      	cmp	r4, r1
   118ae:	d0f7      	beq.n	118a0 <__mcmp+0x1c>
   118b0:	d205      	bcs.n	118be <__mcmp+0x3a>
   118b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   118b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   118ba:	4770      	bx	lr
   118bc:	4770      	bx	lr
   118be:	2001      	movs	r0, #1
   118c0:	f85d 4b04 	ldr.w	r4, [sp], #4
   118c4:	4770      	bx	lr
   118c6:	bf00      	nop

000118c8 <__mdiff>:
   118c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118cc:	690f      	ldr	r7, [r1, #16]
   118ce:	6913      	ldr	r3, [r2, #16]
   118d0:	1aff      	subs	r7, r7, r3
   118d2:	2f00      	cmp	r7, #0
   118d4:	460e      	mov	r6, r1
   118d6:	4690      	mov	r8, r2
   118d8:	d17f      	bne.n	119da <__mdiff+0x112>
   118da:	f101 0514 	add.w	r5, r1, #20
   118de:	3214      	adds	r2, #20
   118e0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   118e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   118e8:	e001      	b.n	118ee <__mdiff+0x26>
   118ea:	429d      	cmp	r5, r3
   118ec:	d278      	bcs.n	119e0 <__mdiff+0x118>
   118ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   118f2:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   118f6:	42a1      	cmp	r1, r4
   118f8:	d0f7      	beq.n	118ea <__mdiff+0x22>
   118fa:	d369      	bcc.n	119d0 <__mdiff+0x108>
   118fc:	6871      	ldr	r1, [r6, #4]
   118fe:	f7ff fd3b 	bl	11378 <_Balloc>
   11902:	4681      	mov	r9, r0
   11904:	2800      	cmp	r0, #0
   11906:	d077      	beq.n	119f8 <__mdiff+0x130>
   11908:	6935      	ldr	r5, [r6, #16]
   1190a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   1190e:	60c7      	str	r7, [r0, #12]
   11910:	f108 0e14 	add.w	lr, r8, #20
   11914:	f106 0014 	add.w	r0, r6, #20
   11918:	f109 0a14 	add.w	sl, r9, #20
   1191c:	f106 0110 	add.w	r1, r6, #16
   11920:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   11924:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   11928:	4656      	mov	r6, sl
   1192a:	f04f 0c00 	mov.w	ip, #0
   1192e:	f85e 4b04 	ldr.w	r4, [lr], #4
   11932:	f851 bf04 	ldr.w	fp, [r1, #4]!
   11936:	b2a3      	uxth	r3, r4
   11938:	fa1c fc8b 	uxtah	ip, ip, fp
   1193c:	ebac 0303 	sub.w	r3, ip, r3
   11940:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11944:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   11948:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   1194c:	b29b      	uxth	r3, r3
   1194e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   11952:	4572      	cmp	r2, lr
   11954:	f846 3b04 	str.w	r3, [r6], #4
   11958:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   1195c:	d8e7      	bhi.n	1192e <__mdiff+0x66>
   1195e:	eba2 0108 	sub.w	r1, r2, r8
   11962:	3915      	subs	r1, #21
   11964:	f108 0815 	add.w	r8, r8, #21
   11968:	4542      	cmp	r2, r8
   1196a:	f021 0403 	bic.w	r4, r1, #3
   1196e:	f104 0404 	add.w	r4, r4, #4
   11972:	bf38      	it	cc
   11974:	2404      	movcc	r4, #4
   11976:	4420      	add	r0, r4
   11978:	f021 0203 	bic.w	r2, r1, #3
   1197c:	bf38      	it	cc
   1197e:	2200      	movcc	r2, #0
   11980:	4287      	cmp	r7, r0
   11982:	4452      	add	r2, sl
   11984:	4454      	add	r4, sl
   11986:	d918      	bls.n	119ba <__mdiff+0xf2>
   11988:	4626      	mov	r6, r4
   1198a:	4601      	mov	r1, r0
   1198c:	f851 3b04 	ldr.w	r3, [r1], #4
   11990:	fa1c fc83 	uxtah	ip, ip, r3
   11994:	ea4f 422c 	mov.w	r2, ip, asr #16
   11998:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1199c:	fa1f fc8c 	uxth.w	ip, ip
   119a0:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   119a4:	428f      	cmp	r7, r1
   119a6:	f846 3b04 	str.w	r3, [r6], #4
   119aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
   119ae:	d8ed      	bhi.n	1198c <__mdiff+0xc4>
   119b0:	3f01      	subs	r7, #1
   119b2:	1a3f      	subs	r7, r7, r0
   119b4:	f027 0703 	bic.w	r7, r7, #3
   119b8:	19e2      	adds	r2, r4, r7
   119ba:	b923      	cbnz	r3, 119c6 <__mdiff+0xfe>
   119bc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   119c0:	3d01      	subs	r5, #1
   119c2:	2b00      	cmp	r3, #0
   119c4:	d0fa      	beq.n	119bc <__mdiff+0xf4>
   119c6:	f8c9 5010 	str.w	r5, [r9, #16]
   119ca:	4648      	mov	r0, r9
   119cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d0:	4633      	mov	r3, r6
   119d2:	2701      	movs	r7, #1
   119d4:	4646      	mov	r6, r8
   119d6:	4698      	mov	r8, r3
   119d8:	e790      	b.n	118fc <__mdiff+0x34>
   119da:	dbf9      	blt.n	119d0 <__mdiff+0x108>
   119dc:	2700      	movs	r7, #0
   119de:	e78d      	b.n	118fc <__mdiff+0x34>
   119e0:	2100      	movs	r1, #0
   119e2:	f7ff fcc9 	bl	11378 <_Balloc>
   119e6:	4681      	mov	r9, r0
   119e8:	b168      	cbz	r0, 11a06 <__mdiff+0x13e>
   119ea:	2201      	movs	r2, #1
   119ec:	2300      	movs	r3, #0
   119ee:	e9c9 2304 	strd	r2, r3, [r9, #16]
   119f2:	4648      	mov	r0, r9
   119f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119f8:	4b06      	ldr	r3, [pc, #24]	; (11a14 <__mdiff+0x14c>)
   119fa:	4807      	ldr	r0, [pc, #28]	; (11a18 <__mdiff+0x150>)
   119fc:	464a      	mov	r2, r9
   119fe:	f240 2145 	movw	r1, #581	; 0x245
   11a02:	f7ff fb9f 	bl	11144 <__assert_func>
   11a06:	4b03      	ldr	r3, [pc, #12]	; (11a14 <__mdiff+0x14c>)
   11a08:	4803      	ldr	r0, [pc, #12]	; (11a18 <__mdiff+0x150>)
   11a0a:	464a      	mov	r2, r9
   11a0c:	f240 2137 	movw	r1, #567	; 0x237
   11a10:	f7ff fb98 	bl	11144 <__assert_func>
   11a14:	20002480 	.word	0x20002480
   11a18:	20002494 	.word	0x20002494

00011a1c <__d2b>:
   11a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11a20:	4688      	mov	r8, r1
   11a22:	b083      	sub	sp, #12
   11a24:	2101      	movs	r1, #1
   11a26:	ec57 6b10 	vmov	r6, r7, d0
   11a2a:	4615      	mov	r5, r2
   11a2c:	f7ff fca4 	bl	11378 <_Balloc>
   11a30:	4604      	mov	r4, r0
   11a32:	2800      	cmp	r0, #0
   11a34:	d051      	beq.n	11ada <__d2b+0xbe>
   11a36:	f3c7 590a 	ubfx	r9, r7, #20, #11
   11a3a:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11a3e:	f1b9 0f00 	cmp.w	r9, #0
   11a42:	d001      	beq.n	11a48 <__d2b+0x2c>
   11a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11a48:	2e00      	cmp	r6, #0
   11a4a:	9301      	str	r3, [sp, #4]
   11a4c:	d118      	bne.n	11a80 <__d2b+0x64>
   11a4e:	a801      	add	r0, sp, #4
   11a50:	f7ff fd34 	bl	114bc <__lo0bits>
   11a54:	9a01      	ldr	r2, [sp, #4]
   11a56:	6162      	str	r2, [r4, #20]
   11a58:	2201      	movs	r2, #1
   11a5a:	f100 0320 	add.w	r3, r0, #32
   11a5e:	6122      	str	r2, [r4, #16]
   11a60:	f1b9 0f00 	cmp.w	r9, #0
   11a64:	d025      	beq.n	11ab2 <__d2b+0x96>
   11a66:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   11a6a:	eb09 0203 	add.w	r2, r9, r3
   11a6e:	4620      	mov	r0, r4
   11a70:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   11a74:	f8c8 2000 	str.w	r2, [r8]
   11a78:	602b      	str	r3, [r5, #0]
   11a7a:	b003      	add	sp, #12
   11a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11a80:	4668      	mov	r0, sp
   11a82:	9600      	str	r6, [sp, #0]
   11a84:	f7ff fd1a 	bl	114bc <__lo0bits>
   11a88:	4603      	mov	r3, r0
   11a8a:	b310      	cbz	r0, 11ad2 <__d2b+0xb6>
   11a8c:	e9dd 0200 	ldrd	r0, r2, [sp]
   11a90:	f1c3 0120 	rsb	r1, r3, #32
   11a94:	fa02 f101 	lsl.w	r1, r2, r1
   11a98:	4301      	orrs	r1, r0
   11a9a:	40da      	lsrs	r2, r3
   11a9c:	6161      	str	r1, [r4, #20]
   11a9e:	9201      	str	r2, [sp, #4]
   11aa0:	2a00      	cmp	r2, #0
   11aa2:	61a2      	str	r2, [r4, #24]
   11aa4:	bf14      	ite	ne
   11aa6:	2202      	movne	r2, #2
   11aa8:	2201      	moveq	r2, #1
   11aaa:	6122      	str	r2, [r4, #16]
   11aac:	f1b9 0f00 	cmp.w	r9, #0
   11ab0:	d1d9      	bne.n	11a66 <__d2b+0x4a>
   11ab2:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   11ab6:	f8c8 3000 	str.w	r3, [r8]
   11aba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   11abe:	6918      	ldr	r0, [r3, #16]
   11ac0:	f7ff fcdc 	bl	1147c <__hi0bits>
   11ac4:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   11ac8:	4620      	mov	r0, r4
   11aca:	602b      	str	r3, [r5, #0]
   11acc:	b003      	add	sp, #12
   11ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11ad2:	9a00      	ldr	r2, [sp, #0]
   11ad4:	6162      	str	r2, [r4, #20]
   11ad6:	9a01      	ldr	r2, [sp, #4]
   11ad8:	e7e2      	b.n	11aa0 <__d2b+0x84>
   11ada:	4b03      	ldr	r3, [pc, #12]	; (11ae8 <__d2b+0xcc>)
   11adc:	4803      	ldr	r0, [pc, #12]	; (11aec <__d2b+0xd0>)
   11ade:	4622      	mov	r2, r4
   11ae0:	f240 310f 	movw	r1, #783	; 0x30f
   11ae4:	f7ff fb2e 	bl	11144 <__assert_func>
   11ae8:	20002480 	.word	0x20002480
   11aec:	20002494 	.word	0x20002494

00011af0 <_calloc_r>:
   11af0:	b538      	push	{r3, r4, r5, lr}
   11af2:	fba1 1402 	umull	r1, r4, r1, r2
   11af6:	bb8c      	cbnz	r4, 11b5c <_calloc_r+0x6c>
   11af8:	f7fe ffc8 	bl	10a8c <_malloc_r>
   11afc:	4605      	mov	r5, r0
   11afe:	b1e0      	cbz	r0, 11b3a <_calloc_r+0x4a>
   11b00:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11b04:	f022 0203 	bic.w	r2, r2, #3
   11b08:	3a04      	subs	r2, #4
   11b0a:	2a24      	cmp	r2, #36	; 0x24
   11b0c:	d817      	bhi.n	11b3e <_calloc_r+0x4e>
   11b0e:	2a13      	cmp	r2, #19
   11b10:	d91a      	bls.n	11b48 <_calloc_r+0x58>
   11b12:	2a1b      	cmp	r2, #27
   11b14:	e9c0 4400 	strd	r4, r4, [r0]
   11b18:	d91d      	bls.n	11b56 <_calloc_r+0x66>
   11b1a:	2a24      	cmp	r2, #36	; 0x24
   11b1c:	bf14      	ite	ne
   11b1e:	f100 0210 	addne.w	r2, r0, #16
   11b22:	f100 0218 	addeq.w	r2, r0, #24
   11b26:	f04f 0300 	mov.w	r3, #0
   11b2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11b2e:	bf04      	itt	eq
   11b30:	6104      	streq	r4, [r0, #16]
   11b32:	6144      	streq	r4, [r0, #20]
   11b34:	e9c2 3300 	strd	r3, r3, [r2]
   11b38:	6093      	str	r3, [r2, #8]
   11b3a:	4628      	mov	r0, r5
   11b3c:	bd38      	pop	{r3, r4, r5, pc}
   11b3e:	4621      	mov	r1, r4
   11b40:	f7ff fb20 	bl	11184 <memset>
   11b44:	4628      	mov	r0, r5
   11b46:	bd38      	pop	{r3, r4, r5, pc}
   11b48:	4602      	mov	r2, r0
   11b4a:	2300      	movs	r3, #0
   11b4c:	e9c2 3300 	strd	r3, r3, [r2]
   11b50:	6093      	str	r3, [r2, #8]
   11b52:	4628      	mov	r0, r5
   11b54:	bd38      	pop	{r3, r4, r5, pc}
   11b56:	f100 0208 	add.w	r2, r0, #8
   11b5a:	e7f6      	b.n	11b4a <_calloc_r+0x5a>
   11b5c:	f7fe ff80 	bl	10a60 <__errno>
   11b60:	230c      	movs	r3, #12
   11b62:	2500      	movs	r5, #0
   11b64:	6003      	str	r3, [r0, #0]
   11b66:	e7e8      	b.n	11b3a <_calloc_r+0x4a>

00011b68 <realloc>:
   11b68:	b410      	push	{r4}
   11b6a:	4c04      	ldr	r4, [pc, #16]	; (11b7c <realloc+0x14>)
   11b6c:	4603      	mov	r3, r0
   11b6e:	460a      	mov	r2, r1
   11b70:	6820      	ldr	r0, [r4, #0]
   11b72:	f85d 4b04 	ldr.w	r4, [sp], #4
   11b76:	4619      	mov	r1, r3
   11b78:	f000 b990 	b.w	11e9c <_realloc_r>
   11b7c:	2000378c 	.word	0x2000378c

00011b80 <stdio_exit_handler>:
   11b80:	4a02      	ldr	r2, [pc, #8]	; (11b8c <stdio_exit_handler+0xc>)
   11b82:	4903      	ldr	r1, [pc, #12]	; (11b90 <stdio_exit_handler+0x10>)
   11b84:	4803      	ldr	r0, [pc, #12]	; (11b94 <stdio_exit_handler+0x14>)
   11b86:	f000 bd45 	b.w	12614 <_fwalk_sglue>
   11b8a:	bf00      	nop
   11b8c:	20003780 	.word	0x20003780
   11b90:	000138b9 	.word	0x000138b9
   11b94:	20003008 	.word	0x20003008

00011b98 <cleanup_stdio>:
   11b98:	4b0c      	ldr	r3, [pc, #48]	; (11bcc <cleanup_stdio+0x34>)
   11b9a:	6841      	ldr	r1, [r0, #4]
   11b9c:	4299      	cmp	r1, r3
   11b9e:	b510      	push	{r4, lr}
   11ba0:	4604      	mov	r4, r0
   11ba2:	d001      	beq.n	11ba8 <cleanup_stdio+0x10>
   11ba4:	f001 fe88 	bl	138b8 <_fclose_r>
   11ba8:	68a1      	ldr	r1, [r4, #8]
   11baa:	4b09      	ldr	r3, [pc, #36]	; (11bd0 <cleanup_stdio+0x38>)
   11bac:	4299      	cmp	r1, r3
   11bae:	d002      	beq.n	11bb6 <cleanup_stdio+0x1e>
   11bb0:	4620      	mov	r0, r4
   11bb2:	f001 fe81 	bl	138b8 <_fclose_r>
   11bb6:	68e1      	ldr	r1, [r4, #12]
   11bb8:	4b06      	ldr	r3, [pc, #24]	; (11bd4 <cleanup_stdio+0x3c>)
   11bba:	4299      	cmp	r1, r3
   11bbc:	d004      	beq.n	11bc8 <cleanup_stdio+0x30>
   11bbe:	4620      	mov	r0, r4
   11bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11bc4:	f001 be78 	b.w	138b8 <_fclose_r>
   11bc8:	bd10      	pop	{r4, pc}
   11bca:	bf00      	nop
   11bcc:	20004d8c 	.word	0x20004d8c
   11bd0:	20004df4 	.word	0x20004df4
   11bd4:	20004e5c 	.word	0x20004e5c

00011bd8 <global_stdio_init.part.0>:
   11bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11bdc:	4c2a      	ldr	r4, [pc, #168]	; (11c88 <global_stdio_init.part.0+0xb0>)
   11bde:	4b2b      	ldr	r3, [pc, #172]	; (11c8c <global_stdio_init.part.0+0xb4>)
   11be0:	482b      	ldr	r0, [pc, #172]	; (11c90 <global_stdio_init.part.0+0xb8>)
   11be2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 11ca4 <global_stdio_init.part.0+0xcc>
   11be6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11ca8 <global_stdio_init.part.0+0xd0>
   11bea:	4f2a      	ldr	r7, [pc, #168]	; (11c94 <global_stdio_init.part.0+0xbc>)
   11bec:	6018      	str	r0, [r3, #0]
   11bee:	2500      	movs	r5, #0
   11bf0:	2304      	movs	r3, #4
   11bf2:	2208      	movs	r2, #8
   11bf4:	4629      	mov	r1, r5
   11bf6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11bfa:	4e27      	ldr	r6, [pc, #156]	; (11c98 <global_stdio_init.part.0+0xc0>)
   11bfc:	6665      	str	r5, [r4, #100]	; 0x64
   11bfe:	e9c4 5302 	strd	r5, r3, [r4, #8]
   11c02:	e9c4 5500 	strd	r5, r5, [r4]
   11c06:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11c0a:	61a5      	str	r5, [r4, #24]
   11c0c:	f7ff faba 	bl	11184 <memset>
   11c10:	4b22      	ldr	r3, [pc, #136]	; (11c9c <global_stdio_init.part.0+0xc4>)
   11c12:	6763      	str	r3, [r4, #116]	; 0x74
   11c14:	2208      	movs	r2, #8
   11c16:	4629      	mov	r1, r5
   11c18:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   11c1c:	e9c4 4907 	strd	r4, r9, [r4, #28]
   11c20:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   11c24:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   11c28:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   11c2c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   11c30:	6725      	str	r5, [r4, #112]	; 0x70
   11c32:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   11c36:	62e6      	str	r6, [r4, #44]	; 0x2c
   11c38:	f7ff faa4 	bl	11184 <memset>
   11c3c:	4b18      	ldr	r3, [pc, #96]	; (11ca0 <global_stdio_init.part.0+0xc8>)
   11c3e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   11c42:	4629      	mov	r1, r5
   11c44:	f104 0368 	add.w	r3, r4, #104	; 0x68
   11c48:	2208      	movs	r2, #8
   11c4a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   11c4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   11c52:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   11c56:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   11c5a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   11c5e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   11c62:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11c66:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   11c6a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   11c6e:	f7ff fa89 	bl	11184 <memset>
   11c72:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   11c76:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   11c7a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   11c7e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   11c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11c86:	bf00      	nop
   11c88:	20004d8c 	.word	0x20004d8c
   11c8c:	20004ec4 	.word	0x20004ec4
   11c90:	00011b81 	.word	0x00011b81
   11c94:	000125ad 	.word	0x000125ad
   11c98:	000125cd 	.word	0x000125cd
   11c9c:	00010009 	.word	0x00010009
   11ca0:	00020012 	.word	0x00020012
   11ca4:	00012549 	.word	0x00012549
   11ca8:	0001256d 	.word	0x0001256d

00011cac <__sinit>:
   11cac:	b510      	push	{r4, lr}
   11cae:	4604      	mov	r4, r0
   11cb0:	480a      	ldr	r0, [pc, #40]	; (11cdc <__sinit+0x30>)
   11cb2:	f7ff faed 	bl	11290 <__retarget_lock_acquire_recursive>
   11cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11cb8:	b923      	cbnz	r3, 11cc4 <__sinit+0x18>
   11cba:	4b09      	ldr	r3, [pc, #36]	; (11ce0 <__sinit+0x34>)
   11cbc:	4a09      	ldr	r2, [pc, #36]	; (11ce4 <__sinit+0x38>)
   11cbe:	681b      	ldr	r3, [r3, #0]
   11cc0:	6362      	str	r2, [r4, #52]	; 0x34
   11cc2:	b123      	cbz	r3, 11cce <__sinit+0x22>
   11cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cc8:	4804      	ldr	r0, [pc, #16]	; (11cdc <__sinit+0x30>)
   11cca:	f7ff bae3 	b.w	11294 <__retarget_lock_release_recursive>
   11cce:	f7ff ff83 	bl	11bd8 <global_stdio_init.part.0>
   11cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11cd6:	4801      	ldr	r0, [pc, #4]	; (11cdc <__sinit+0x30>)
   11cd8:	f7ff badc 	b.w	11294 <__retarget_lock_release_recursive>
   11cdc:	20004d54 	.word	0x20004d54
   11ce0:	20004ec4 	.word	0x20004ec4
   11ce4:	00011b99 	.word	0x00011b99

00011ce8 <__sfp_lock_acquire>:
   11ce8:	4801      	ldr	r0, [pc, #4]	; (11cf0 <__sfp_lock_acquire+0x8>)
   11cea:	f7ff bad1 	b.w	11290 <__retarget_lock_acquire_recursive>
   11cee:	bf00      	nop
   11cf0:	20004d54 	.word	0x20004d54

00011cf4 <__sfp_lock_release>:
   11cf4:	4801      	ldr	r0, [pc, #4]	; (11cfc <__sfp_lock_release+0x8>)
   11cf6:	f7ff bacd 	b.w	11294 <__retarget_lock_release_recursive>
   11cfa:	bf00      	nop
   11cfc:	20004d54 	.word	0x20004d54

00011d00 <memchr>:
   11d00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11d04:	2a10      	cmp	r2, #16
   11d06:	db2b      	blt.n	11d60 <memchr+0x60>
   11d08:	f010 0f07 	tst.w	r0, #7
   11d0c:	d008      	beq.n	11d20 <memchr+0x20>
   11d0e:	f810 3b01 	ldrb.w	r3, [r0], #1
   11d12:	3a01      	subs	r2, #1
   11d14:	428b      	cmp	r3, r1
   11d16:	d02d      	beq.n	11d74 <memchr+0x74>
   11d18:	f010 0f07 	tst.w	r0, #7
   11d1c:	b342      	cbz	r2, 11d70 <memchr+0x70>
   11d1e:	d1f6      	bne.n	11d0e <memchr+0xe>
   11d20:	b4f0      	push	{r4, r5, r6, r7}
   11d22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11d26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   11d2a:	f022 0407 	bic.w	r4, r2, #7
   11d2e:	f07f 0700 	mvns.w	r7, #0
   11d32:	2300      	movs	r3, #0
   11d34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11d38:	3c08      	subs	r4, #8
   11d3a:	ea85 0501 	eor.w	r5, r5, r1
   11d3e:	ea86 0601 	eor.w	r6, r6, r1
   11d42:	fa85 f547 	uadd8	r5, r5, r7
   11d46:	faa3 f587 	sel	r5, r3, r7
   11d4a:	fa86 f647 	uadd8	r6, r6, r7
   11d4e:	faa5 f687 	sel	r6, r5, r7
   11d52:	b98e      	cbnz	r6, 11d78 <memchr+0x78>
   11d54:	d1ee      	bne.n	11d34 <memchr+0x34>
   11d56:	bcf0      	pop	{r4, r5, r6, r7}
   11d58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11d5c:	f002 0207 	and.w	r2, r2, #7
   11d60:	b132      	cbz	r2, 11d70 <memchr+0x70>
   11d62:	f810 3b01 	ldrb.w	r3, [r0], #1
   11d66:	3a01      	subs	r2, #1
   11d68:	ea83 0301 	eor.w	r3, r3, r1
   11d6c:	b113      	cbz	r3, 11d74 <memchr+0x74>
   11d6e:	d1f8      	bne.n	11d62 <memchr+0x62>
   11d70:	2000      	movs	r0, #0
   11d72:	4770      	bx	lr
   11d74:	3801      	subs	r0, #1
   11d76:	4770      	bx	lr
   11d78:	2d00      	cmp	r5, #0
   11d7a:	bf06      	itte	eq
   11d7c:	4635      	moveq	r5, r6
   11d7e:	3803      	subeq	r0, #3
   11d80:	3807      	subne	r0, #7
   11d82:	f015 0f01 	tst.w	r5, #1
   11d86:	d107      	bne.n	11d98 <memchr+0x98>
   11d88:	3001      	adds	r0, #1
   11d8a:	f415 7f80 	tst.w	r5, #256	; 0x100
   11d8e:	bf02      	ittt	eq
   11d90:	3001      	addeq	r0, #1
   11d92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   11d96:	3001      	addeq	r0, #1
   11d98:	bcf0      	pop	{r4, r5, r6, r7}
   11d9a:	3801      	subs	r0, #1
   11d9c:	4770      	bx	lr
   11d9e:	bf00      	nop
	...

00011dc0 <strlen>:
   11dc0:	f890 f000 	pld	[r0]
   11dc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   11dc8:	f020 0107 	bic.w	r1, r0, #7
   11dcc:	f06f 0c00 	mvn.w	ip, #0
   11dd0:	f010 0407 	ands.w	r4, r0, #7
   11dd4:	f891 f020 	pld	[r1, #32]
   11dd8:	f040 8049 	bne.w	11e6e <strlen+0xae>
   11ddc:	f04f 0400 	mov.w	r4, #0
   11de0:	f06f 0007 	mvn.w	r0, #7
   11de4:	e9d1 2300 	ldrd	r2, r3, [r1]
   11de8:	f891 f040 	pld	[r1, #64]	; 0x40
   11dec:	f100 0008 	add.w	r0, r0, #8
   11df0:	fa82 f24c 	uadd8	r2, r2, ip
   11df4:	faa4 f28c 	sel	r2, r4, ip
   11df8:	fa83 f34c 	uadd8	r3, r3, ip
   11dfc:	faa2 f38c 	sel	r3, r2, ip
   11e00:	bb4b      	cbnz	r3, 11e56 <strlen+0x96>
   11e02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11e06:	fa82 f24c 	uadd8	r2, r2, ip
   11e0a:	f100 0008 	add.w	r0, r0, #8
   11e0e:	faa4 f28c 	sel	r2, r4, ip
   11e12:	fa83 f34c 	uadd8	r3, r3, ip
   11e16:	faa2 f38c 	sel	r3, r2, ip
   11e1a:	b9e3      	cbnz	r3, 11e56 <strlen+0x96>
   11e1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11e20:	fa82 f24c 	uadd8	r2, r2, ip
   11e24:	f100 0008 	add.w	r0, r0, #8
   11e28:	faa4 f28c 	sel	r2, r4, ip
   11e2c:	fa83 f34c 	uadd8	r3, r3, ip
   11e30:	faa2 f38c 	sel	r3, r2, ip
   11e34:	b97b      	cbnz	r3, 11e56 <strlen+0x96>
   11e36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   11e3a:	f101 0120 	add.w	r1, r1, #32
   11e3e:	fa82 f24c 	uadd8	r2, r2, ip
   11e42:	f100 0008 	add.w	r0, r0, #8
   11e46:	faa4 f28c 	sel	r2, r4, ip
   11e4a:	fa83 f34c 	uadd8	r3, r3, ip
   11e4e:	faa2 f38c 	sel	r3, r2, ip
   11e52:	2b00      	cmp	r3, #0
   11e54:	d0c6      	beq.n	11de4 <strlen+0x24>
   11e56:	2a00      	cmp	r2, #0
   11e58:	bf04      	itt	eq
   11e5a:	3004      	addeq	r0, #4
   11e5c:	461a      	moveq	r2, r3
   11e5e:	ba12      	rev	r2, r2
   11e60:	fab2 f282 	clz	r2, r2
   11e64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   11e68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   11e6c:	4770      	bx	lr
   11e6e:	e9d1 2300 	ldrd	r2, r3, [r1]
   11e72:	f004 0503 	and.w	r5, r4, #3
   11e76:	f1c4 0000 	rsb	r0, r4, #0
   11e7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   11e7e:	f014 0f04 	tst.w	r4, #4
   11e82:	f891 f040 	pld	[r1, #64]	; 0x40
   11e86:	fa0c f505 	lsl.w	r5, ip, r5
   11e8a:	ea62 0205 	orn	r2, r2, r5
   11e8e:	bf1c      	itt	ne
   11e90:	ea63 0305 	ornne	r3, r3, r5
   11e94:	4662      	movne	r2, ip
   11e96:	f04f 0400 	mov.w	r4, #0
   11e9a:	e7a9      	b.n	11df0 <strlen+0x30>

00011e9c <_realloc_r>:
   11e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea0:	4617      	mov	r7, r2
   11ea2:	2900      	cmp	r1, #0
   11ea4:	f000 8098 	beq.w	11fd8 <_realloc_r+0x13c>
   11ea8:	460c      	mov	r4, r1
   11eaa:	f107 050b 	add.w	r5, r7, #11
   11eae:	4680      	mov	r8, r0
   11eb0:	f7ff fa56 	bl	11360 <__malloc_lock>
   11eb4:	2d16      	cmp	r5, #22
   11eb6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   11eba:	d85b      	bhi.n	11f74 <_realloc_r+0xd8>
   11ebc:	2510      	movs	r5, #16
   11ebe:	462a      	mov	r2, r5
   11ec0:	42af      	cmp	r7, r5
   11ec2:	d85c      	bhi.n	11f7e <_realloc_r+0xe2>
   11ec4:	f021 0603 	bic.w	r6, r1, #3
   11ec8:	4296      	cmp	r6, r2
   11eca:	f1a4 0908 	sub.w	r9, r4, #8
   11ece:	da62      	bge.n	11f96 <_realloc_r+0xfa>
   11ed0:	4bbc      	ldr	r3, [pc, #752]	; (121c4 <_realloc_r+0x328>)
   11ed2:	f8d3 c008 	ldr.w	ip, [r3, #8]
   11ed6:	eb09 0006 	add.w	r0, r9, r6
   11eda:	4584      	cmp	ip, r0
   11edc:	f000 8097 	beq.w	1200e <_realloc_r+0x172>
   11ee0:	f8d0 c004 	ldr.w	ip, [r0, #4]
   11ee4:	f02c 0301 	bic.w	r3, ip, #1
   11ee8:	4403      	add	r3, r0
   11eea:	685b      	ldr	r3, [r3, #4]
   11eec:	07db      	lsls	r3, r3, #31
   11eee:	d468      	bmi.n	11fc2 <_realloc_r+0x126>
   11ef0:	f02c 0c03 	bic.w	ip, ip, #3
   11ef4:	eb06 030c 	add.w	r3, r6, ip
   11ef8:	4293      	cmp	r3, r2
   11efa:	da47      	bge.n	11f8c <_realloc_r+0xf0>
   11efc:	07cb      	lsls	r3, r1, #31
   11efe:	d410      	bmi.n	11f22 <_realloc_r+0x86>
   11f00:	f854 3c08 	ldr.w	r3, [r4, #-8]
   11f04:	eba9 0a03 	sub.w	sl, r9, r3
   11f08:	f8da 3004 	ldr.w	r3, [sl, #4]
   11f0c:	f023 0103 	bic.w	r1, r3, #3
   11f10:	448c      	add	ip, r1
   11f12:	44b4      	add	ip, r6
   11f14:	4594      	cmp	ip, r2
   11f16:	f280 8111 	bge.w	1213c <_realloc_r+0x2a0>
   11f1a:	1873      	adds	r3, r6, r1
   11f1c:	4293      	cmp	r3, r2
   11f1e:	f280 80e8 	bge.w	120f2 <_realloc_r+0x256>
   11f22:	4639      	mov	r1, r7
   11f24:	4640      	mov	r0, r8
   11f26:	f7fe fdb1 	bl	10a8c <_malloc_r>
   11f2a:	4607      	mov	r7, r0
   11f2c:	b1e0      	cbz	r0, 11f68 <_realloc_r+0xcc>
   11f2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   11f32:	f023 0301 	bic.w	r3, r3, #1
   11f36:	444b      	add	r3, r9
   11f38:	f1a0 0208 	sub.w	r2, r0, #8
   11f3c:	4293      	cmp	r3, r2
   11f3e:	f000 80d2 	beq.w	120e6 <_realloc_r+0x24a>
   11f42:	1f32      	subs	r2, r6, #4
   11f44:	2a24      	cmp	r2, #36	; 0x24
   11f46:	f200 80f5 	bhi.w	12134 <_realloc_r+0x298>
   11f4a:	2a13      	cmp	r2, #19
   11f4c:	f200 80ac 	bhi.w	120a8 <_realloc_r+0x20c>
   11f50:	4603      	mov	r3, r0
   11f52:	4622      	mov	r2, r4
   11f54:	6811      	ldr	r1, [r2, #0]
   11f56:	6019      	str	r1, [r3, #0]
   11f58:	6851      	ldr	r1, [r2, #4]
   11f5a:	6059      	str	r1, [r3, #4]
   11f5c:	6892      	ldr	r2, [r2, #8]
   11f5e:	609a      	str	r2, [r3, #8]
   11f60:	4621      	mov	r1, r4
   11f62:	4640      	mov	r0, r8
   11f64:	f000 f9d6 	bl	12314 <_free_r>
   11f68:	4640      	mov	r0, r8
   11f6a:	f7ff f9ff 	bl	1136c <__malloc_unlock>
   11f6e:	4638      	mov	r0, r7
   11f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f74:	f025 0507 	bic.w	r5, r5, #7
   11f78:	2d00      	cmp	r5, #0
   11f7a:	462a      	mov	r2, r5
   11f7c:	daa0      	bge.n	11ec0 <_realloc_r+0x24>
   11f7e:	230c      	movs	r3, #12
   11f80:	f8c8 3000 	str.w	r3, [r8]
   11f84:	2700      	movs	r7, #0
   11f86:	4638      	mov	r0, r7
   11f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f8c:	461e      	mov	r6, r3
   11f8e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   11f92:	60d3      	str	r3, [r2, #12]
   11f94:	609a      	str	r2, [r3, #8]
   11f96:	1b73      	subs	r3, r6, r5
   11f98:	2b0f      	cmp	r3, #15
   11f9a:	d822      	bhi.n	11fe2 <_realloc_r+0x146>
   11f9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   11fa0:	f003 0301 	and.w	r3, r3, #1
   11fa4:	4333      	orrs	r3, r6
   11fa6:	444e      	add	r6, r9
   11fa8:	f8c9 3004 	str.w	r3, [r9, #4]
   11fac:	6873      	ldr	r3, [r6, #4]
   11fae:	f043 0301 	orr.w	r3, r3, #1
   11fb2:	6073      	str	r3, [r6, #4]
   11fb4:	4640      	mov	r0, r8
   11fb6:	4627      	mov	r7, r4
   11fb8:	f7ff f9d8 	bl	1136c <__malloc_unlock>
   11fbc:	4638      	mov	r0, r7
   11fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fc2:	07c9      	lsls	r1, r1, #31
   11fc4:	d4ad      	bmi.n	11f22 <_realloc_r+0x86>
   11fc6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   11fca:	eba9 0a03 	sub.w	sl, r9, r3
   11fce:	f8da 1004 	ldr.w	r1, [sl, #4]
   11fd2:	f021 0103 	bic.w	r1, r1, #3
   11fd6:	e7a0      	b.n	11f1a <_realloc_r+0x7e>
   11fd8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fdc:	4611      	mov	r1, r2
   11fde:	f7fe bd55 	b.w	10a8c <_malloc_r>
   11fe2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   11fe6:	eb09 0105 	add.w	r1, r9, r5
   11fea:	f002 0201 	and.w	r2, r2, #1
   11fee:	444e      	add	r6, r9
   11ff0:	f043 0301 	orr.w	r3, r3, #1
   11ff4:	432a      	orrs	r2, r5
   11ff6:	f8c9 2004 	str.w	r2, [r9, #4]
   11ffa:	604b      	str	r3, [r1, #4]
   11ffc:	6873      	ldr	r3, [r6, #4]
   11ffe:	f043 0301 	orr.w	r3, r3, #1
   12002:	3108      	adds	r1, #8
   12004:	6073      	str	r3, [r6, #4]
   12006:	4640      	mov	r0, r8
   12008:	f000 f984 	bl	12314 <_free_r>
   1200c:	e7d2      	b.n	11fb4 <_realloc_r+0x118>
   1200e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12012:	f020 0b03 	bic.w	fp, r0, #3
   12016:	eb06 0c0b 	add.w	ip, r6, fp
   1201a:	f105 0010 	add.w	r0, r5, #16
   1201e:	4584      	cmp	ip, r0
   12020:	da4d      	bge.n	120be <_realloc_r+0x222>
   12022:	07c9      	lsls	r1, r1, #31
   12024:	f53f af7d 	bmi.w	11f22 <_realloc_r+0x86>
   12028:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1202c:	eba9 0a01 	sub.w	sl, r9, r1
   12030:	f8da 1004 	ldr.w	r1, [sl, #4]
   12034:	f021 0103 	bic.w	r1, r1, #3
   12038:	448b      	add	fp, r1
   1203a:	44b3      	add	fp, r6
   1203c:	4558      	cmp	r0, fp
   1203e:	f73f af6c 	bgt.w	11f1a <_realloc_r+0x7e>
   12042:	4657      	mov	r7, sl
   12044:	f8da 100c 	ldr.w	r1, [sl, #12]
   12048:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1204c:	1f32      	subs	r2, r6, #4
   1204e:	2a24      	cmp	r2, #36	; 0x24
   12050:	60c1      	str	r1, [r0, #12]
   12052:	6088      	str	r0, [r1, #8]
   12054:	f200 80db 	bhi.w	1220e <_realloc_r+0x372>
   12058:	2a13      	cmp	r2, #19
   1205a:	f240 80d6 	bls.w	1220a <_realloc_r+0x36e>
   1205e:	6821      	ldr	r1, [r4, #0]
   12060:	f8ca 1008 	str.w	r1, [sl, #8]
   12064:	6861      	ldr	r1, [r4, #4]
   12066:	f8ca 100c 	str.w	r1, [sl, #12]
   1206a:	2a1b      	cmp	r2, #27
   1206c:	f200 80df 	bhi.w	1222e <_realloc_r+0x392>
   12070:	3408      	adds	r4, #8
   12072:	f10a 0210 	add.w	r2, sl, #16
   12076:	6821      	ldr	r1, [r4, #0]
   12078:	6011      	str	r1, [r2, #0]
   1207a:	6861      	ldr	r1, [r4, #4]
   1207c:	6051      	str	r1, [r2, #4]
   1207e:	68a1      	ldr	r1, [r4, #8]
   12080:	6091      	str	r1, [r2, #8]
   12082:	eb0a 0105 	add.w	r1, sl, r5
   12086:	ebab 0205 	sub.w	r2, fp, r5
   1208a:	f042 0201 	orr.w	r2, r2, #1
   1208e:	6099      	str	r1, [r3, #8]
   12090:	604a      	str	r2, [r1, #4]
   12092:	f8da 3004 	ldr.w	r3, [sl, #4]
   12096:	f003 0301 	and.w	r3, r3, #1
   1209a:	432b      	orrs	r3, r5
   1209c:	4640      	mov	r0, r8
   1209e:	f8ca 3004 	str.w	r3, [sl, #4]
   120a2:	f7ff f963 	bl	1136c <__malloc_unlock>
   120a6:	e76e      	b.n	11f86 <_realloc_r+0xea>
   120a8:	6823      	ldr	r3, [r4, #0]
   120aa:	6003      	str	r3, [r0, #0]
   120ac:	6863      	ldr	r3, [r4, #4]
   120ae:	6043      	str	r3, [r0, #4]
   120b0:	2a1b      	cmp	r2, #27
   120b2:	d868      	bhi.n	12186 <_realloc_r+0x2ea>
   120b4:	f104 0208 	add.w	r2, r4, #8
   120b8:	f100 0308 	add.w	r3, r0, #8
   120bc:	e74a      	b.n	11f54 <_realloc_r+0xb8>
   120be:	eb09 0205 	add.w	r2, r9, r5
   120c2:	609a      	str	r2, [r3, #8]
   120c4:	ebac 0305 	sub.w	r3, ip, r5
   120c8:	f043 0301 	orr.w	r3, r3, #1
   120cc:	6053      	str	r3, [r2, #4]
   120ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
   120d2:	f003 0301 	and.w	r3, r3, #1
   120d6:	432b      	orrs	r3, r5
   120d8:	4640      	mov	r0, r8
   120da:	f844 3c04 	str.w	r3, [r4, #-4]
   120de:	f7ff f945 	bl	1136c <__malloc_unlock>
   120e2:	4627      	mov	r7, r4
   120e4:	e74f      	b.n	11f86 <_realloc_r+0xea>
   120e6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   120ea:	f023 0303 	bic.w	r3, r3, #3
   120ee:	441e      	add	r6, r3
   120f0:	e751      	b.n	11f96 <_realloc_r+0xfa>
   120f2:	4657      	mov	r7, sl
   120f4:	f8da 100c 	ldr.w	r1, [sl, #12]
   120f8:	f857 0f08 	ldr.w	r0, [r7, #8]!
   120fc:	1f32      	subs	r2, r6, #4
   120fe:	2a24      	cmp	r2, #36	; 0x24
   12100:	60c1      	str	r1, [r0, #12]
   12102:	6088      	str	r0, [r1, #8]
   12104:	d84c      	bhi.n	121a0 <_realloc_r+0x304>
   12106:	2a13      	cmp	r2, #19
   12108:	d948      	bls.n	1219c <_realloc_r+0x300>
   1210a:	6821      	ldr	r1, [r4, #0]
   1210c:	f8ca 1008 	str.w	r1, [sl, #8]
   12110:	6861      	ldr	r1, [r4, #4]
   12112:	f8ca 100c 	str.w	r1, [sl, #12]
   12116:	2a1b      	cmp	r2, #27
   12118:	d856      	bhi.n	121c8 <_realloc_r+0x32c>
   1211a:	3408      	adds	r4, #8
   1211c:	f10a 0210 	add.w	r2, sl, #16
   12120:	461e      	mov	r6, r3
   12122:	6823      	ldr	r3, [r4, #0]
   12124:	6013      	str	r3, [r2, #0]
   12126:	6863      	ldr	r3, [r4, #4]
   12128:	6053      	str	r3, [r2, #4]
   1212a:	68a3      	ldr	r3, [r4, #8]
   1212c:	6093      	str	r3, [r2, #8]
   1212e:	46d1      	mov	r9, sl
   12130:	463c      	mov	r4, r7
   12132:	e730      	b.n	11f96 <_realloc_r+0xfa>
   12134:	4621      	mov	r1, r4
   12136:	f7fe ff89 	bl	1104c <memmove>
   1213a:	e711      	b.n	11f60 <_realloc_r+0xc4>
   1213c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   12140:	4657      	mov	r7, sl
   12142:	60cb      	str	r3, [r1, #12]
   12144:	6099      	str	r1, [r3, #8]
   12146:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1214a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1214e:	60cb      	str	r3, [r1, #12]
   12150:	1f32      	subs	r2, r6, #4
   12152:	2a24      	cmp	r2, #36	; 0x24
   12154:	6099      	str	r1, [r3, #8]
   12156:	d82d      	bhi.n	121b4 <_realloc_r+0x318>
   12158:	2a13      	cmp	r2, #19
   1215a:	d929      	bls.n	121b0 <_realloc_r+0x314>
   1215c:	6823      	ldr	r3, [r4, #0]
   1215e:	f8ca 3008 	str.w	r3, [sl, #8]
   12162:	6863      	ldr	r3, [r4, #4]
   12164:	f8ca 300c 	str.w	r3, [sl, #12]
   12168:	2a1b      	cmp	r2, #27
   1216a:	d842      	bhi.n	121f2 <_realloc_r+0x356>
   1216c:	3408      	adds	r4, #8
   1216e:	f10a 0310 	add.w	r3, sl, #16
   12172:	6822      	ldr	r2, [r4, #0]
   12174:	601a      	str	r2, [r3, #0]
   12176:	6862      	ldr	r2, [r4, #4]
   12178:	605a      	str	r2, [r3, #4]
   1217a:	68a2      	ldr	r2, [r4, #8]
   1217c:	609a      	str	r2, [r3, #8]
   1217e:	4666      	mov	r6, ip
   12180:	46d1      	mov	r9, sl
   12182:	463c      	mov	r4, r7
   12184:	e707      	b.n	11f96 <_realloc_r+0xfa>
   12186:	68a3      	ldr	r3, [r4, #8]
   12188:	6083      	str	r3, [r0, #8]
   1218a:	68e3      	ldr	r3, [r4, #12]
   1218c:	60c3      	str	r3, [r0, #12]
   1218e:	2a24      	cmp	r2, #36	; 0x24
   12190:	d026      	beq.n	121e0 <_realloc_r+0x344>
   12192:	f104 0210 	add.w	r2, r4, #16
   12196:	f100 0310 	add.w	r3, r0, #16
   1219a:	e6db      	b.n	11f54 <_realloc_r+0xb8>
   1219c:	463a      	mov	r2, r7
   1219e:	e7bf      	b.n	12120 <_realloc_r+0x284>
   121a0:	4621      	mov	r1, r4
   121a2:	4638      	mov	r0, r7
   121a4:	461e      	mov	r6, r3
   121a6:	46d1      	mov	r9, sl
   121a8:	f7fe ff50 	bl	1104c <memmove>
   121ac:	463c      	mov	r4, r7
   121ae:	e6f2      	b.n	11f96 <_realloc_r+0xfa>
   121b0:	463b      	mov	r3, r7
   121b2:	e7de      	b.n	12172 <_realloc_r+0x2d6>
   121b4:	4621      	mov	r1, r4
   121b6:	4638      	mov	r0, r7
   121b8:	4666      	mov	r6, ip
   121ba:	46d1      	mov	r9, sl
   121bc:	f7fe ff46 	bl	1104c <memmove>
   121c0:	463c      	mov	r4, r7
   121c2:	e6e8      	b.n	11f96 <_realloc_r+0xfa>
   121c4:	20003370 	.word	0x20003370
   121c8:	68a1      	ldr	r1, [r4, #8]
   121ca:	f8ca 1010 	str.w	r1, [sl, #16]
   121ce:	68e1      	ldr	r1, [r4, #12]
   121d0:	f8ca 1014 	str.w	r1, [sl, #20]
   121d4:	2a24      	cmp	r2, #36	; 0x24
   121d6:	d020      	beq.n	1221a <_realloc_r+0x37e>
   121d8:	3410      	adds	r4, #16
   121da:	f10a 0218 	add.w	r2, sl, #24
   121de:	e79f      	b.n	12120 <_realloc_r+0x284>
   121e0:	6923      	ldr	r3, [r4, #16]
   121e2:	6103      	str	r3, [r0, #16]
   121e4:	6961      	ldr	r1, [r4, #20]
   121e6:	6141      	str	r1, [r0, #20]
   121e8:	f104 0218 	add.w	r2, r4, #24
   121ec:	f100 0318 	add.w	r3, r0, #24
   121f0:	e6b0      	b.n	11f54 <_realloc_r+0xb8>
   121f2:	68a3      	ldr	r3, [r4, #8]
   121f4:	f8ca 3010 	str.w	r3, [sl, #16]
   121f8:	68e3      	ldr	r3, [r4, #12]
   121fa:	f8ca 3014 	str.w	r3, [sl, #20]
   121fe:	2a24      	cmp	r2, #36	; 0x24
   12200:	d021      	beq.n	12246 <_realloc_r+0x3aa>
   12202:	3410      	adds	r4, #16
   12204:	f10a 0318 	add.w	r3, sl, #24
   12208:	e7b3      	b.n	12172 <_realloc_r+0x2d6>
   1220a:	463a      	mov	r2, r7
   1220c:	e733      	b.n	12076 <_realloc_r+0x1da>
   1220e:	4621      	mov	r1, r4
   12210:	4638      	mov	r0, r7
   12212:	f7fe ff1b 	bl	1104c <memmove>
   12216:	4b16      	ldr	r3, [pc, #88]	; (12270 <_realloc_r+0x3d4>)
   12218:	e733      	b.n	12082 <_realloc_r+0x1e6>
   1221a:	6922      	ldr	r2, [r4, #16]
   1221c:	f8ca 2018 	str.w	r2, [sl, #24]
   12220:	6962      	ldr	r2, [r4, #20]
   12222:	f8ca 201c 	str.w	r2, [sl, #28]
   12226:	3418      	adds	r4, #24
   12228:	f10a 0220 	add.w	r2, sl, #32
   1222c:	e778      	b.n	12120 <_realloc_r+0x284>
   1222e:	68a1      	ldr	r1, [r4, #8]
   12230:	f8ca 1010 	str.w	r1, [sl, #16]
   12234:	68e1      	ldr	r1, [r4, #12]
   12236:	f8ca 1014 	str.w	r1, [sl, #20]
   1223a:	2a24      	cmp	r2, #36	; 0x24
   1223c:	d00d      	beq.n	1225a <_realloc_r+0x3be>
   1223e:	3410      	adds	r4, #16
   12240:	f10a 0218 	add.w	r2, sl, #24
   12244:	e717      	b.n	12076 <_realloc_r+0x1da>
   12246:	6923      	ldr	r3, [r4, #16]
   12248:	f8ca 3018 	str.w	r3, [sl, #24]
   1224c:	6963      	ldr	r3, [r4, #20]
   1224e:	f8ca 301c 	str.w	r3, [sl, #28]
   12252:	3418      	adds	r4, #24
   12254:	f10a 0320 	add.w	r3, sl, #32
   12258:	e78b      	b.n	12172 <_realloc_r+0x2d6>
   1225a:	6922      	ldr	r2, [r4, #16]
   1225c:	f8ca 2018 	str.w	r2, [sl, #24]
   12260:	6962      	ldr	r2, [r4, #20]
   12262:	f8ca 201c 	str.w	r2, [sl, #28]
   12266:	3418      	adds	r4, #24
   12268:	f10a 0220 	add.w	r2, sl, #32
   1226c:	e703      	b.n	12076 <_realloc_r+0x1da>
   1226e:	bf00      	nop
   12270:	20003370 	.word	0x20003370

00012274 <_malloc_trim_r>:
   12274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12276:	4f24      	ldr	r7, [pc, #144]	; (12308 <_malloc_trim_r+0x94>)
   12278:	460c      	mov	r4, r1
   1227a:	4606      	mov	r6, r0
   1227c:	f7ff f870 	bl	11360 <__malloc_lock>
   12280:	68bb      	ldr	r3, [r7, #8]
   12282:	685d      	ldr	r5, [r3, #4]
   12284:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12288:	310f      	adds	r1, #15
   1228a:	f025 0503 	bic.w	r5, r5, #3
   1228e:	194b      	adds	r3, r1, r5
   12290:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12294:	f023 030f 	bic.w	r3, r3, #15
   12298:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1229c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   122a0:	db07      	blt.n	122b2 <_malloc_trim_r+0x3e>
   122a2:	2100      	movs	r1, #0
   122a4:	4630      	mov	r0, r6
   122a6:	f000 f9a3 	bl	125f0 <_sbrk_r>
   122aa:	68bb      	ldr	r3, [r7, #8]
   122ac:	442b      	add	r3, r5
   122ae:	4298      	cmp	r0, r3
   122b0:	d004      	beq.n	122bc <_malloc_trim_r+0x48>
   122b2:	4630      	mov	r0, r6
   122b4:	f7ff f85a 	bl	1136c <__malloc_unlock>
   122b8:	2000      	movs	r0, #0
   122ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122bc:	4261      	negs	r1, r4
   122be:	4630      	mov	r0, r6
   122c0:	f000 f996 	bl	125f0 <_sbrk_r>
   122c4:	3001      	adds	r0, #1
   122c6:	d00d      	beq.n	122e4 <_malloc_trim_r+0x70>
   122c8:	4a10      	ldr	r2, [pc, #64]	; (1230c <_malloc_trim_r+0x98>)
   122ca:	68bb      	ldr	r3, [r7, #8]
   122cc:	1b2d      	subs	r5, r5, r4
   122ce:	f045 0501 	orr.w	r5, r5, #1
   122d2:	605d      	str	r5, [r3, #4]
   122d4:	6813      	ldr	r3, [r2, #0]
   122d6:	4630      	mov	r0, r6
   122d8:	1b1b      	subs	r3, r3, r4
   122da:	6013      	str	r3, [r2, #0]
   122dc:	f7ff f846 	bl	1136c <__malloc_unlock>
   122e0:	2001      	movs	r0, #1
   122e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122e4:	2100      	movs	r1, #0
   122e6:	4630      	mov	r0, r6
   122e8:	f000 f982 	bl	125f0 <_sbrk_r>
   122ec:	68ba      	ldr	r2, [r7, #8]
   122ee:	1a83      	subs	r3, r0, r2
   122f0:	2b0f      	cmp	r3, #15
   122f2:	ddde      	ble.n	122b2 <_malloc_trim_r+0x3e>
   122f4:	f043 0301 	orr.w	r3, r3, #1
   122f8:	6053      	str	r3, [r2, #4]
   122fa:	4b05      	ldr	r3, [pc, #20]	; (12310 <_malloc_trim_r+0x9c>)
   122fc:	4903      	ldr	r1, [pc, #12]	; (1230c <_malloc_trim_r+0x98>)
   122fe:	681b      	ldr	r3, [r3, #0]
   12300:	1ac0      	subs	r0, r0, r3
   12302:	6008      	str	r0, [r1, #0]
   12304:	e7d5      	b.n	122b2 <_malloc_trim_r+0x3e>
   12306:	bf00      	nop
   12308:	20003370 	.word	0x20003370
   1230c:	20004d58 	.word	0x20004d58
   12310:	20003778 	.word	0x20003778

00012314 <_free_r>:
   12314:	2900      	cmp	r1, #0
   12316:	d061      	beq.n	123dc <_free_r+0xc8>
   12318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1231a:	460c      	mov	r4, r1
   1231c:	4606      	mov	r6, r0
   1231e:	f7ff f81f 	bl	11360 <__malloc_lock>
   12322:	f854 2c04 	ldr.w	r2, [r4, #-4]
   12326:	4f7b      	ldr	r7, [pc, #492]	; (12514 <_free_r+0x200>)
   12328:	f1a4 0508 	sub.w	r5, r4, #8
   1232c:	f022 0101 	bic.w	r1, r2, #1
   12330:	eb05 0c01 	add.w	ip, r5, r1
   12334:	68b8      	ldr	r0, [r7, #8]
   12336:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1233a:	4560      	cmp	r0, ip
   1233c:	f023 0303 	bic.w	r3, r3, #3
   12340:	f000 808b 	beq.w	1245a <_free_r+0x146>
   12344:	07d2      	lsls	r2, r2, #31
   12346:	f8cc 3004 	str.w	r3, [ip, #4]
   1234a:	d432      	bmi.n	123b2 <_free_r+0x9e>
   1234c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12350:	1aad      	subs	r5, r5, r2
   12352:	4411      	add	r1, r2
   12354:	68aa      	ldr	r2, [r5, #8]
   12356:	f107 0008 	add.w	r0, r7, #8
   1235a:	4282      	cmp	r2, r0
   1235c:	d06a      	beq.n	12434 <_free_r+0x120>
   1235e:	eb0c 0403 	add.w	r4, ip, r3
   12362:	f8d4 e004 	ldr.w	lr, [r4, #4]
   12366:	68ec      	ldr	r4, [r5, #12]
   12368:	60d4      	str	r4, [r2, #12]
   1236a:	f01e 0f01 	tst.w	lr, #1
   1236e:	60a2      	str	r2, [r4, #8]
   12370:	f000 8097 	beq.w	124a2 <_free_r+0x18e>
   12374:	f041 0301 	orr.w	r3, r1, #1
   12378:	606b      	str	r3, [r5, #4]
   1237a:	f8cc 1000 	str.w	r1, [ip]
   1237e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12382:	d235      	bcs.n	123f0 <_free_r+0xdc>
   12384:	6878      	ldr	r0, [r7, #4]
   12386:	08cb      	lsrs	r3, r1, #3
   12388:	2201      	movs	r2, #1
   1238a:	0949      	lsrs	r1, r1, #5
   1238c:	3301      	adds	r3, #1
   1238e:	408a      	lsls	r2, r1
   12390:	4302      	orrs	r2, r0
   12392:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12396:	607a      	str	r2, [r7, #4]
   12398:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1239c:	3a08      	subs	r2, #8
   1239e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   123a2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   123a6:	60cd      	str	r5, [r1, #12]
   123a8:	4630      	mov	r0, r6
   123aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   123ae:	f7fe bfdd 	b.w	1136c <__malloc_unlock>
   123b2:	eb0c 0203 	add.w	r2, ip, r3
   123b6:	6852      	ldr	r2, [r2, #4]
   123b8:	07d0      	lsls	r0, r2, #31
   123ba:	d410      	bmi.n	123de <_free_r+0xca>
   123bc:	4419      	add	r1, r3
   123be:	f107 0008 	add.w	r0, r7, #8
   123c2:	f8dc 3008 	ldr.w	r3, [ip, #8]
   123c6:	4283      	cmp	r3, r0
   123c8:	d073      	beq.n	124b2 <_free_r+0x19e>
   123ca:	f8dc 200c 	ldr.w	r2, [ip, #12]
   123ce:	60da      	str	r2, [r3, #12]
   123d0:	6093      	str	r3, [r2, #8]
   123d2:	f041 0301 	orr.w	r3, r1, #1
   123d6:	606b      	str	r3, [r5, #4]
   123d8:	5069      	str	r1, [r5, r1]
   123da:	e7d0      	b.n	1237e <_free_r+0x6a>
   123dc:	4770      	bx	lr
   123de:	f041 0301 	orr.w	r3, r1, #1
   123e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   123e6:	f844 3c04 	str.w	r3, [r4, #-4]
   123ea:	f8cc 1000 	str.w	r1, [ip]
   123ee:	d3c9      	bcc.n	12384 <_free_r+0x70>
   123f0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   123f4:	ea4f 2351 	mov.w	r3, r1, lsr #9
   123f8:	d248      	bcs.n	1248c <_free_r+0x178>
   123fa:	098b      	lsrs	r3, r1, #6
   123fc:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12400:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12404:	00c3      	lsls	r3, r0, #3
   12406:	18f8      	adds	r0, r7, r3
   12408:	58fb      	ldr	r3, [r7, r3]
   1240a:	3808      	subs	r0, #8
   1240c:	4298      	cmp	r0, r3
   1240e:	d059      	beq.n	124c4 <_free_r+0x1b0>
   12410:	685a      	ldr	r2, [r3, #4]
   12412:	f022 0203 	bic.w	r2, r2, #3
   12416:	428a      	cmp	r2, r1
   12418:	d902      	bls.n	12420 <_free_r+0x10c>
   1241a:	689b      	ldr	r3, [r3, #8]
   1241c:	4298      	cmp	r0, r3
   1241e:	d1f7      	bne.n	12410 <_free_r+0xfc>
   12420:	68d8      	ldr	r0, [r3, #12]
   12422:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12426:	6085      	str	r5, [r0, #8]
   12428:	60dd      	str	r5, [r3, #12]
   1242a:	4630      	mov	r0, r6
   1242c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12430:	f7fe bf9c 	b.w	1136c <__malloc_unlock>
   12434:	eb0c 0203 	add.w	r2, ip, r3
   12438:	6852      	ldr	r2, [r2, #4]
   1243a:	07d2      	lsls	r2, r2, #31
   1243c:	d463      	bmi.n	12506 <_free_r+0x1f2>
   1243e:	440b      	add	r3, r1
   12440:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12444:	60ca      	str	r2, [r1, #12]
   12446:	6091      	str	r1, [r2, #8]
   12448:	f043 0201 	orr.w	r2, r3, #1
   1244c:	606a      	str	r2, [r5, #4]
   1244e:	4630      	mov	r0, r6
   12450:	50eb      	str	r3, [r5, r3]
   12452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12456:	f7fe bf89 	b.w	1136c <__malloc_unlock>
   1245a:	440b      	add	r3, r1
   1245c:	07d1      	lsls	r1, r2, #31
   1245e:	d407      	bmi.n	12470 <_free_r+0x15c>
   12460:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12464:	1aad      	subs	r5, r5, r2
   12466:	4413      	add	r3, r2
   12468:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   1246c:	60ca      	str	r2, [r1, #12]
   1246e:	6091      	str	r1, [r2, #8]
   12470:	f043 0201 	orr.w	r2, r3, #1
   12474:	606a      	str	r2, [r5, #4]
   12476:	4a28      	ldr	r2, [pc, #160]	; (12518 <_free_r+0x204>)
   12478:	60bd      	str	r5, [r7, #8]
   1247a:	6812      	ldr	r2, [r2, #0]
   1247c:	429a      	cmp	r2, r3
   1247e:	d893      	bhi.n	123a8 <_free_r+0x94>
   12480:	4b26      	ldr	r3, [pc, #152]	; (1251c <_free_r+0x208>)
   12482:	4630      	mov	r0, r6
   12484:	6819      	ldr	r1, [r3, #0]
   12486:	f7ff fef5 	bl	12274 <_malloc_trim_r>
   1248a:	e78d      	b.n	123a8 <_free_r+0x94>
   1248c:	2b14      	cmp	r3, #20
   1248e:	d90a      	bls.n	124a6 <_free_r+0x192>
   12490:	2b54      	cmp	r3, #84	; 0x54
   12492:	d81f      	bhi.n	124d4 <_free_r+0x1c0>
   12494:	0b0b      	lsrs	r3, r1, #12
   12496:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1249a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1249e:	00c3      	lsls	r3, r0, #3
   124a0:	e7b1      	b.n	12406 <_free_r+0xf2>
   124a2:	4419      	add	r1, r3
   124a4:	e78d      	b.n	123c2 <_free_r+0xae>
   124a6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   124aa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   124ae:	00c3      	lsls	r3, r0, #3
   124b0:	e7a9      	b.n	12406 <_free_r+0xf2>
   124b2:	f041 0301 	orr.w	r3, r1, #1
   124b6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   124ba:	e9c5 0002 	strd	r0, r0, [r5, #8]
   124be:	606b      	str	r3, [r5, #4]
   124c0:	5069      	str	r1, [r5, r1]
   124c2:	e771      	b.n	123a8 <_free_r+0x94>
   124c4:	6879      	ldr	r1, [r7, #4]
   124c6:	1092      	asrs	r2, r2, #2
   124c8:	2401      	movs	r4, #1
   124ca:	fa04 f202 	lsl.w	r2, r4, r2
   124ce:	430a      	orrs	r2, r1
   124d0:	607a      	str	r2, [r7, #4]
   124d2:	e7a6      	b.n	12422 <_free_r+0x10e>
   124d4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   124d8:	d806      	bhi.n	124e8 <_free_r+0x1d4>
   124da:	0bcb      	lsrs	r3, r1, #15
   124dc:	f103 0078 	add.w	r0, r3, #120	; 0x78
   124e0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   124e4:	00c3      	lsls	r3, r0, #3
   124e6:	e78e      	b.n	12406 <_free_r+0xf2>
   124e8:	f240 5254 	movw	r2, #1364	; 0x554
   124ec:	4293      	cmp	r3, r2
   124ee:	d806      	bhi.n	124fe <_free_r+0x1ea>
   124f0:	0c8b      	lsrs	r3, r1, #18
   124f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   124f6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   124fa:	00c3      	lsls	r3, r0, #3
   124fc:	e783      	b.n	12406 <_free_r+0xf2>
   124fe:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12502:	227e      	movs	r2, #126	; 0x7e
   12504:	e77f      	b.n	12406 <_free_r+0xf2>
   12506:	f041 0301 	orr.w	r3, r1, #1
   1250a:	606b      	str	r3, [r5, #4]
   1250c:	f8cc 1000 	str.w	r1, [ip]
   12510:	e74a      	b.n	123a8 <_free_r+0x94>
   12512:	bf00      	nop
   12514:	20003370 	.word	0x20003370
   12518:	2000377c 	.word	0x2000377c
   1251c:	20004d88 	.word	0x20004d88

00012520 <fiprintf>:
   12520:	b40e      	push	{r1, r2, r3}
   12522:	b510      	push	{r4, lr}
   12524:	b083      	sub	sp, #12
   12526:	ab05      	add	r3, sp, #20
   12528:	4c06      	ldr	r4, [pc, #24]	; (12544 <fiprintf+0x24>)
   1252a:	f853 2b04 	ldr.w	r2, [r3], #4
   1252e:	9301      	str	r3, [sp, #4]
   12530:	4601      	mov	r1, r0
   12532:	6820      	ldr	r0, [r4, #0]
   12534:	f000 f8e4 	bl	12700 <_vfiprintf_r>
   12538:	b003      	add	sp, #12
   1253a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1253e:	b003      	add	sp, #12
   12540:	4770      	bx	lr
   12542:	bf00      	nop
   12544:	2000378c 	.word	0x2000378c

00012548 <__sread>:
   12548:	b510      	push	{r4, lr}
   1254a:	460c      	mov	r4, r1
   1254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12550:	f002 fb12 	bl	14b78 <_read_r>
   12554:	2800      	cmp	r0, #0
   12556:	db03      	blt.n	12560 <__sread+0x18>
   12558:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1255a:	4403      	add	r3, r0
   1255c:	6523      	str	r3, [r4, #80]	; 0x50
   1255e:	bd10      	pop	{r4, pc}
   12560:	89a3      	ldrh	r3, [r4, #12]
   12562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   12566:	81a3      	strh	r3, [r4, #12]
   12568:	bd10      	pop	{r4, pc}
   1256a:	bf00      	nop

0001256c <__swrite>:
   1256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12570:	460c      	mov	r4, r1
   12572:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   12576:	461f      	mov	r7, r3
   12578:	05cb      	lsls	r3, r1, #23
   1257a:	4605      	mov	r5, r0
   1257c:	4616      	mov	r6, r2
   1257e:	d40b      	bmi.n	12598 <__swrite+0x2c>
   12580:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   12584:	81a1      	strh	r1, [r4, #12]
   12586:	463b      	mov	r3, r7
   12588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1258c:	4632      	mov	r2, r6
   1258e:	4628      	mov	r0, r5
   12590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12594:	f000 b862 	b.w	1265c <_write_r>
   12598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1259c:	2302      	movs	r3, #2
   1259e:	2200      	movs	r2, #0
   125a0:	f002 fad4 	bl	14b4c <_lseek_r>
   125a4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   125a8:	e7ea      	b.n	12580 <__swrite+0x14>
   125aa:	bf00      	nop

000125ac <__sseek>:
   125ac:	b510      	push	{r4, lr}
   125ae:	460c      	mov	r4, r1
   125b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   125b4:	f002 faca 	bl	14b4c <_lseek_r>
   125b8:	89a3      	ldrh	r3, [r4, #12]
   125ba:	1c42      	adds	r2, r0, #1
   125bc:	bf0e      	itee	eq
   125be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   125c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   125c6:	6520      	strne	r0, [r4, #80]	; 0x50
   125c8:	81a3      	strh	r3, [r4, #12]
   125ca:	bd10      	pop	{r4, pc}

000125cc <__sclose>:
   125cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   125d0:	f002 b9c0 	b.w	14954 <_close_r>

000125d4 <__ascii_wctomb>:
   125d4:	b149      	cbz	r1, 125ea <__ascii_wctomb+0x16>
   125d6:	2aff      	cmp	r2, #255	; 0xff
   125d8:	d802      	bhi.n	125e0 <__ascii_wctomb+0xc>
   125da:	700a      	strb	r2, [r1, #0]
   125dc:	2001      	movs	r0, #1
   125de:	4770      	bx	lr
   125e0:	238a      	movs	r3, #138	; 0x8a
   125e2:	6003      	str	r3, [r0, #0]
   125e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   125e8:	4770      	bx	lr
   125ea:	4608      	mov	r0, r1
   125ec:	4770      	bx	lr
   125ee:	bf00      	nop

000125f0 <_sbrk_r>:
   125f0:	b538      	push	{r3, r4, r5, lr}
   125f2:	4d07      	ldr	r5, [pc, #28]	; (12610 <_sbrk_r+0x20>)
   125f4:	2200      	movs	r2, #0
   125f6:	4604      	mov	r4, r0
   125f8:	4608      	mov	r0, r1
   125fa:	602a      	str	r2, [r5, #0]
   125fc:	f7fb faea 	bl	dbd4 <_sbrk>
   12600:	1c43      	adds	r3, r0, #1
   12602:	d000      	beq.n	12606 <_sbrk_r+0x16>
   12604:	bd38      	pop	{r3, r4, r5, pc}
   12606:	682b      	ldr	r3, [r5, #0]
   12608:	2b00      	cmp	r3, #0
   1260a:	d0fb      	beq.n	12604 <_sbrk_r+0x14>
   1260c:	6023      	str	r3, [r4, #0]
   1260e:	bd38      	pop	{r3, r4, r5, pc}
   12610:	20004ff0 	.word	0x20004ff0

00012614 <_fwalk_sglue>:
   12614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12618:	4680      	mov	r8, r0
   1261a:	460f      	mov	r7, r1
   1261c:	4616      	mov	r6, r2
   1261e:	f04f 0900 	mov.w	r9, #0
   12622:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12626:	3d01      	subs	r5, #1
   12628:	d411      	bmi.n	1264e <_fwalk_sglue+0x3a>
   1262a:	89a3      	ldrh	r3, [r4, #12]
   1262c:	2b01      	cmp	r3, #1
   1262e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12632:	d908      	bls.n	12646 <_fwalk_sglue+0x32>
   12634:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12638:	3301      	adds	r3, #1
   1263a:	4621      	mov	r1, r4
   1263c:	d003      	beq.n	12646 <_fwalk_sglue+0x32>
   1263e:	4640      	mov	r0, r8
   12640:	47b8      	blx	r7
   12642:	ea49 0900 	orr.w	r9, r9, r0
   12646:	1c6b      	adds	r3, r5, #1
   12648:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1264c:	d1ed      	bne.n	1262a <_fwalk_sglue+0x16>
   1264e:	6836      	ldr	r6, [r6, #0]
   12650:	2e00      	cmp	r6, #0
   12652:	d1e6      	bne.n	12622 <_fwalk_sglue+0xe>
   12654:	4648      	mov	r0, r9
   12656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1265a:	bf00      	nop

0001265c <_write_r>:
   1265c:	b538      	push	{r3, r4, r5, lr}
   1265e:	460c      	mov	r4, r1
   12660:	4d08      	ldr	r5, [pc, #32]	; (12684 <_write_r+0x28>)
   12662:	4684      	mov	ip, r0
   12664:	4611      	mov	r1, r2
   12666:	4620      	mov	r0, r4
   12668:	461a      	mov	r2, r3
   1266a:	2300      	movs	r3, #0
   1266c:	602b      	str	r3, [r5, #0]
   1266e:	4664      	mov	r4, ip
   12670:	f7f9 fee0 	bl	c434 <_write>
   12674:	1c43      	adds	r3, r0, #1
   12676:	d000      	beq.n	1267a <_write_r+0x1e>
   12678:	bd38      	pop	{r3, r4, r5, pc}
   1267a:	682b      	ldr	r3, [r5, #0]
   1267c:	2b00      	cmp	r3, #0
   1267e:	d0fb      	beq.n	12678 <_write_r+0x1c>
   12680:	6023      	str	r3, [r4, #0]
   12682:	bd38      	pop	{r3, r4, r5, pc}
   12684:	20004ff0 	.word	0x20004ff0

00012688 <__sprint_r.part.0>:
   12688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1268c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1268e:	049c      	lsls	r4, r3, #18
   12690:	4690      	mov	r8, r2
   12692:	d52d      	bpl.n	126f0 <__sprint_r.part.0+0x68>
   12694:	6893      	ldr	r3, [r2, #8]
   12696:	6812      	ldr	r2, [r2, #0]
   12698:	b343      	cbz	r3, 126ec <__sprint_r.part.0+0x64>
   1269a:	468b      	mov	fp, r1
   1269c:	4606      	mov	r6, r0
   1269e:	f102 0908 	add.w	r9, r2, #8
   126a2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   126a6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   126aa:	d015      	beq.n	126d8 <__sprint_r.part.0+0x50>
   126ac:	3d04      	subs	r5, #4
   126ae:	2400      	movs	r4, #0
   126b0:	e001      	b.n	126b6 <__sprint_r.part.0+0x2e>
   126b2:	42a7      	cmp	r7, r4
   126b4:	d00e      	beq.n	126d4 <__sprint_r.part.0+0x4c>
   126b6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   126ba:	465a      	mov	r2, fp
   126bc:	4630      	mov	r0, r6
   126be:	f002 fac7 	bl	14c50 <_fputwc_r>
   126c2:	1c43      	adds	r3, r0, #1
   126c4:	f104 0401 	add.w	r4, r4, #1
   126c8:	d1f3      	bne.n	126b2 <__sprint_r.part.0+0x2a>
   126ca:	2300      	movs	r3, #0
   126cc:	e9c8 3301 	strd	r3, r3, [r8, #4]
   126d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   126d8:	f02a 0a03 	bic.w	sl, sl, #3
   126dc:	eba3 030a 	sub.w	r3, r3, sl
   126e0:	f8c8 3008 	str.w	r3, [r8, #8]
   126e4:	f109 0908 	add.w	r9, r9, #8
   126e8:	2b00      	cmp	r3, #0
   126ea:	d1da      	bne.n	126a2 <__sprint_r.part.0+0x1a>
   126ec:	2000      	movs	r0, #0
   126ee:	e7ec      	b.n	126ca <__sprint_r.part.0+0x42>
   126f0:	f002 fae2 	bl	14cb8 <__sfvwrite_r>
   126f4:	2300      	movs	r3, #0
   126f6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   126fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126fe:	bf00      	nop

00012700 <_vfiprintf_r>:
   12700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12704:	ed2d 8b02 	vpush	{d8}
   12708:	b0c5      	sub	sp, #276	; 0x114
   1270a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1270e:	4683      	mov	fp, r0
   12710:	ee08 1a10 	vmov	s16, r1
   12714:	4616      	mov	r6, r2
   12716:	2100      	movs	r1, #0
   12718:	2208      	movs	r2, #8
   1271a:	4650      	mov	r0, sl
   1271c:	461c      	mov	r4, r3
   1271e:	9307      	str	r3, [sp, #28]
   12720:	f7fe fd30 	bl	11184 <memset>
   12724:	f1bb 0f00 	cmp.w	fp, #0
   12728:	d004      	beq.n	12734 <_vfiprintf_r+0x34>
   1272a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1272e:	2b00      	cmp	r3, #0
   12730:	f000 86a0 	beq.w	13474 <_vfiprintf_r+0xd74>
   12734:	ee18 2a10 	vmov	r2, s16
   12738:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1273a:	07db      	lsls	r3, r3, #31
   1273c:	f140 8513 	bpl.w	13166 <_vfiprintf_r+0xa66>
   12740:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12744:	b28a      	uxth	r2, r1
   12746:	0495      	lsls	r5, r2, #18
   12748:	d40b      	bmi.n	12762 <_vfiprintf_r+0x62>
   1274a:	ee18 3a10 	vmov	r3, s16
   1274e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12752:	8199      	strh	r1, [r3, #12]
   12754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12756:	b28a      	uxth	r2, r1
   12758:	ee18 1a10 	vmov	r1, s16
   1275c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12760:	664b      	str	r3, [r1, #100]	; 0x64
   12762:	0710      	lsls	r0, r2, #28
   12764:	f140 8105 	bpl.w	12972 <_vfiprintf_r+0x272>
   12768:	ee18 3a10 	vmov	r3, s16
   1276c:	691b      	ldr	r3, [r3, #16]
   1276e:	2b00      	cmp	r3, #0
   12770:	f000 80ff 	beq.w	12972 <_vfiprintf_r+0x272>
   12774:	f002 031a 	and.w	r3, r2, #26
   12778:	2b0a      	cmp	r3, #10
   1277a:	f000 810a 	beq.w	12992 <_vfiprintf_r+0x292>
   1277e:	2300      	movs	r3, #0
   12780:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12784:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12788:	aa1b      	add	r2, sp, #108	; 0x6c
   1278a:	930c      	str	r3, [sp, #48]	; 0x30
   1278c:	9218      	str	r2, [sp, #96]	; 0x60
   1278e:	4691      	mov	r9, r2
   12790:	930b      	str	r3, [sp, #44]	; 0x2c
   12792:	9305      	str	r3, [sp, #20]
   12794:	46b0      	mov	r8, r6
   12796:	4644      	mov	r4, r8
   12798:	4ba8      	ldr	r3, [pc, #672]	; (12a3c <_vfiprintf_r+0x33c>)
   1279a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1279e:	f7fe fd7b 	bl	11298 <__locale_mb_cur_max>
   127a2:	4622      	mov	r2, r4
   127a4:	4603      	mov	r3, r0
   127a6:	a912      	add	r1, sp, #72	; 0x48
   127a8:	f8cd a000 	str.w	sl, [sp]
   127ac:	4658      	mov	r0, fp
   127ae:	47a8      	blx	r5
   127b0:	2800      	cmp	r0, #0
   127b2:	f000 8145 	beq.w	12a40 <_vfiprintf_r+0x340>
   127b6:	f2c0 8139 	blt.w	12a2c <_vfiprintf_r+0x32c>
   127ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
   127bc:	2a25      	cmp	r2, #37	; 0x25
   127be:	4603      	mov	r3, r0
   127c0:	d001      	beq.n	127c6 <_vfiprintf_r+0xc6>
   127c2:	441c      	add	r4, r3
   127c4:	e7e8      	b.n	12798 <_vfiprintf_r+0x98>
   127c6:	ebb4 0608 	subs.w	r6, r4, r8
   127ca:	4605      	mov	r5, r0
   127cc:	f040 813c 	bne.w	12a48 <_vfiprintf_r+0x348>
   127d0:	2300      	movs	r3, #0
   127d2:	7861      	ldrb	r1, [r4, #1]
   127d4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   127d8:	f104 0801 	add.w	r8, r4, #1
   127dc:	9306      	str	r3, [sp, #24]
   127de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   127e2:	461e      	mov	r6, r3
   127e4:	242b      	movs	r4, #43	; 0x2b
   127e6:	f108 0801 	add.w	r8, r8, #1
   127ea:	f1a1 0320 	sub.w	r3, r1, #32
   127ee:	2b5a      	cmp	r3, #90	; 0x5a
   127f0:	f200 8178 	bhi.w	12ae4 <_vfiprintf_r+0x3e4>
   127f4:	e8df f013 	tbh	[pc, r3, lsl #1]
   127f8:	017602b5 	.word	0x017602b5
   127fc:	02b00176 	.word	0x02b00176
   12800:	01760176 	.word	0x01760176
   12804:	006a0176 	.word	0x006a0176
   12808:	01760176 	.word	0x01760176
   1280c:	028d027d 	.word	0x028d027d
   12810:	02880176 	.word	0x02880176
   12814:	01760297 	.word	0x01760297
   12818:	005b0292 	.word	0x005b0292
   1281c:	005b005b 	.word	0x005b005b
   12820:	005b005b 	.word	0x005b005b
   12824:	005b005b 	.word	0x005b005b
   12828:	005b005b 	.word	0x005b005b
   1282c:	01760176 	.word	0x01760176
   12830:	01760176 	.word	0x01760176
   12834:	01760176 	.word	0x01760176
   12838:	01760176 	.word	0x01760176
   1283c:	025c0176 	.word	0x025c0176
   12840:	01760084 	.word	0x01760084
   12844:	01760176 	.word	0x01760176
   12848:	01760176 	.word	0x01760176
   1284c:	01760176 	.word	0x01760176
   12850:	01760176 	.word	0x01760176
   12854:	00e80176 	.word	0x00e80176
   12858:	01760176 	.word	0x01760176
   1285c:	02330176 	.word	0x02330176
   12860:	02da0176 	.word	0x02da0176
   12864:	01760176 	.word	0x01760176
   12868:	0176058b 	.word	0x0176058b
   1286c:	01760176 	.word	0x01760176
   12870:	01760176 	.word	0x01760176
   12874:	01760176 	.word	0x01760176
   12878:	01760176 	.word	0x01760176
   1287c:	025c0176 	.word	0x025c0176
   12880:	01760086 	.word	0x01760086
   12884:	01760176 	.word	0x01760176
   12888:	008602cd 	.word	0x008602cd
   1288c:	0176007f 	.word	0x0176007f
   12890:	017602c0 	.word	0x017602c0
   12894:	00ea02fd 	.word	0x00ea02fd
   12898:	007f02ed 	.word	0x007f02ed
   1289c:	02330176 	.word	0x02330176
   128a0:	0569007c 	.word	0x0569007c
   128a4:	01760176 	.word	0x01760176
   128a8:	0176056b 	.word	0x0176056b
   128ac:	007c      	.short	0x007c
   128ae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   128b2:	2200      	movs	r2, #0
   128b4:	f818 1b01 	ldrb.w	r1, [r8], #1
   128b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   128bc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   128c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   128c4:	2b09      	cmp	r3, #9
   128c6:	d9f5      	bls.n	128b4 <_vfiprintf_r+0x1b4>
   128c8:	9206      	str	r2, [sp, #24]
   128ca:	e78e      	b.n	127ea <_vfiprintf_r+0xea>
   128cc:	4658      	mov	r0, fp
   128ce:	f000 ffef 	bl	138b0 <_localeconv_r>
   128d2:	6843      	ldr	r3, [r0, #4]
   128d4:	930d      	str	r3, [sp, #52]	; 0x34
   128d6:	4618      	mov	r0, r3
   128d8:	f7ff fa72 	bl	11dc0 <strlen>
   128dc:	900e      	str	r0, [sp, #56]	; 0x38
   128de:	4605      	mov	r5, r0
   128e0:	4658      	mov	r0, fp
   128e2:	f000 ffe5 	bl	138b0 <_localeconv_r>
   128e6:	6883      	ldr	r3, [r0, #8]
   128e8:	930b      	str	r3, [sp, #44]	; 0x2c
   128ea:	2d00      	cmp	r5, #0
   128ec:	f040 84d6 	bne.w	1329c <_vfiprintf_r+0xb9c>
   128f0:	f898 1000 	ldrb.w	r1, [r8]
   128f4:	e777      	b.n	127e6 <_vfiprintf_r+0xe6>
   128f6:	f898 1000 	ldrb.w	r1, [r8]
   128fa:	f046 0620 	orr.w	r6, r6, #32
   128fe:	e772      	b.n	127e6 <_vfiprintf_r+0xe6>
   12900:	f046 0610 	orr.w	r6, r6, #16
   12904:	06b4      	lsls	r4, r6, #26
   12906:	f140 818e 	bpl.w	12c26 <_vfiprintf_r+0x526>
   1290a:	9b07      	ldr	r3, [sp, #28]
   1290c:	3307      	adds	r3, #7
   1290e:	f023 0307 	bic.w	r3, r3, #7
   12912:	461a      	mov	r2, r3
   12914:	6859      	ldr	r1, [r3, #4]
   12916:	f852 3b08 	ldr.w	r3, [r2], #8
   1291a:	9207      	str	r2, [sp, #28]
   1291c:	460a      	mov	r2, r1
   1291e:	2900      	cmp	r1, #0
   12920:	f2c0 8470 	blt.w	13204 <_vfiprintf_r+0xb04>
   12924:	1c79      	adds	r1, r7, #1
   12926:	f000 85a2 	beq.w	1346e <_vfiprintf_r+0xd6e>
   1292a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   1292e:	9103      	str	r1, [sp, #12]
   12930:	ea53 0102 	orrs.w	r1, r3, r2
   12934:	f000 843f 	beq.w	131b6 <_vfiprintf_r+0xab6>
   12938:	2b0a      	cmp	r3, #10
   1293a:	f172 0100 	sbcs.w	r1, r2, #0
   1293e:	f080 8541 	bcs.w	133c4 <_vfiprintf_r+0xcc4>
   12942:	3330      	adds	r3, #48	; 0x30
   12944:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12948:	9e03      	ldr	r6, [sp, #12]
   1294a:	2301      	movs	r3, #1
   1294c:	9304      	str	r3, [sp, #16]
   1294e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12952:	9b04      	ldr	r3, [sp, #16]
   12954:	42bb      	cmp	r3, r7
   12956:	bfb8      	it	lt
   12958:	463b      	movlt	r3, r7
   1295a:	9303      	str	r3, [sp, #12]
   1295c:	2300      	movs	r3, #0
   1295e:	9308      	str	r3, [sp, #32]
   12960:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12964:	2b00      	cmp	r3, #0
   12966:	f000 80cb 	beq.w	12b00 <_vfiprintf_r+0x400>
   1296a:	9b03      	ldr	r3, [sp, #12]
   1296c:	3301      	adds	r3, #1
   1296e:	9303      	str	r3, [sp, #12]
   12970:	e0c6      	b.n	12b00 <_vfiprintf_r+0x400>
   12972:	ee18 1a10 	vmov	r1, s16
   12976:	4658      	mov	r0, fp
   12978:	ee18 5a10 	vmov	r5, s16
   1297c:	f001 f800 	bl	13980 <__swsetup_r>
   12980:	2800      	cmp	r0, #0
   12982:	f040 8652 	bne.w	1362a <_vfiprintf_r+0xf2a>
   12986:	89aa      	ldrh	r2, [r5, #12]
   12988:	f002 031a 	and.w	r3, r2, #26
   1298c:	2b0a      	cmp	r3, #10
   1298e:	f47f aef6 	bne.w	1277e <_vfiprintf_r+0x7e>
   12992:	ee18 1a10 	vmov	r1, s16
   12996:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1299a:	2b00      	cmp	r3, #0
   1299c:	f6ff aeef 	blt.w	1277e <_vfiprintf_r+0x7e>
   129a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   129a2:	07db      	lsls	r3, r3, #31
   129a4:	d402      	bmi.n	129ac <_vfiprintf_r+0x2ac>
   129a6:	0597      	lsls	r7, r2, #22
   129a8:	f140 8612 	bpl.w	135d0 <_vfiprintf_r+0xed0>
   129ac:	ee18 1a10 	vmov	r1, s16
   129b0:	4623      	mov	r3, r4
   129b2:	4632      	mov	r2, r6
   129b4:	4658      	mov	r0, fp
   129b6:	f000 fe69 	bl	1368c <__sbprintf>
   129ba:	9005      	str	r0, [sp, #20]
   129bc:	9805      	ldr	r0, [sp, #20]
   129be:	b045      	add	sp, #276	; 0x114
   129c0:	ecbd 8b02 	vpop	{d8}
   129c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c8:	f046 0610 	orr.w	r6, r6, #16
   129cc:	f016 0220 	ands.w	r2, r6, #32
   129d0:	f000 8136 	beq.w	12c40 <_vfiprintf_r+0x540>
   129d4:	9b07      	ldr	r3, [sp, #28]
   129d6:	3307      	adds	r3, #7
   129d8:	f023 0307 	bic.w	r3, r3, #7
   129dc:	4619      	mov	r1, r3
   129de:	685a      	ldr	r2, [r3, #4]
   129e0:	f851 3b08 	ldr.w	r3, [r1], #8
   129e4:	9107      	str	r1, [sp, #28]
   129e6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   129ea:	9103      	str	r1, [sp, #12]
   129ec:	2100      	movs	r1, #0
   129ee:	2000      	movs	r0, #0
   129f0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   129f4:	1c78      	adds	r0, r7, #1
   129f6:	f000 8210 	beq.w	12e1a <_vfiprintf_r+0x71a>
   129fa:	9803      	ldr	r0, [sp, #12]
   129fc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12a00:	ea53 0002 	orrs.w	r0, r3, r2
   12a04:	f040 8208 	bne.w	12e18 <_vfiprintf_r+0x718>
   12a08:	2f00      	cmp	r7, #0
   12a0a:	f040 8538 	bne.w	1347e <_vfiprintf_r+0xd7e>
   12a0e:	2900      	cmp	r1, #0
   12a10:	f040 83d5 	bne.w	131be <_vfiprintf_r+0xabe>
   12a14:	9b03      	ldr	r3, [sp, #12]
   12a16:	f013 0301 	ands.w	r3, r3, #1
   12a1a:	9304      	str	r3, [sp, #16]
   12a1c:	f000 8411 	beq.w	13242 <_vfiprintf_r+0xb42>
   12a20:	2330      	movs	r3, #48	; 0x30
   12a22:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12a26:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12a2a:	e792      	b.n	12952 <_vfiprintf_r+0x252>
   12a2c:	2208      	movs	r2, #8
   12a2e:	2100      	movs	r1, #0
   12a30:	4650      	mov	r0, sl
   12a32:	f7fe fba7 	bl	11184 <memset>
   12a36:	2301      	movs	r3, #1
   12a38:	441c      	add	r4, r3
   12a3a:	e6ad      	b.n	12798 <_vfiprintf_r+0x98>
   12a3c:	20003204 	.word	0x20003204
   12a40:	ebb4 0608 	subs.w	r6, r4, r8
   12a44:	4605      	mov	r5, r0
   12a46:	d01b      	beq.n	12a80 <_vfiprintf_r+0x380>
   12a48:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12a4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12a4c:	3301      	adds	r3, #1
   12a4e:	4432      	add	r2, r6
   12a50:	2b07      	cmp	r3, #7
   12a52:	e9c9 8600 	strd	r8, r6, [r9]
   12a56:	921a      	str	r2, [sp, #104]	; 0x68
   12a58:	9319      	str	r3, [sp, #100]	; 0x64
   12a5a:	dd1c      	ble.n	12a96 <_vfiprintf_r+0x396>
   12a5c:	2a00      	cmp	r2, #0
   12a5e:	f000 83a6 	beq.w	131ae <_vfiprintf_r+0xaae>
   12a62:	ee18 1a10 	vmov	r1, s16
   12a66:	aa18      	add	r2, sp, #96	; 0x60
   12a68:	4658      	mov	r0, fp
   12a6a:	f7ff fe0d 	bl	12688 <__sprint_r.part.0>
   12a6e:	bb20      	cbnz	r0, 12aba <_vfiprintf_r+0x3ba>
   12a70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a74:	9b05      	ldr	r3, [sp, #20]
   12a76:	4433      	add	r3, r6
   12a78:	9305      	str	r3, [sp, #20]
   12a7a:	2d00      	cmp	r5, #0
   12a7c:	f47f aea8 	bne.w	127d0 <_vfiprintf_r+0xd0>
   12a80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12a82:	2b00      	cmp	r3, #0
   12a84:	f040 85c1 	bne.w	1360a <_vfiprintf_r+0xf0a>
   12a88:	ee18 3a10 	vmov	r3, s16
   12a8c:	2200      	movs	r2, #0
   12a8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12a92:	9219      	str	r2, [sp, #100]	; 0x64
   12a94:	e015      	b.n	12ac2 <_vfiprintf_r+0x3c2>
   12a96:	f109 0908 	add.w	r9, r9, #8
   12a9a:	e7eb      	b.n	12a74 <_vfiprintf_r+0x374>
   12a9c:	ee18 1a10 	vmov	r1, s16
   12aa0:	aa18      	add	r2, sp, #96	; 0x60
   12aa2:	4658      	mov	r0, fp
   12aa4:	f7ff fdf0 	bl	12688 <__sprint_r.part.0>
   12aa8:	2800      	cmp	r0, #0
   12aaa:	f000 80a6 	beq.w	12bfa <_vfiprintf_r+0x4fa>
   12aae:	9b08      	ldr	r3, [sp, #32]
   12ab0:	b11b      	cbz	r3, 12aba <_vfiprintf_r+0x3ba>
   12ab2:	9908      	ldr	r1, [sp, #32]
   12ab4:	4658      	mov	r0, fp
   12ab6:	f7ff fc2d 	bl	12314 <_free_r>
   12aba:	ee18 3a10 	vmov	r3, s16
   12abe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12ac2:	ee18 2a10 	vmov	r2, s16
   12ac6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12ac8:	f012 0f01 	tst.w	r2, #1
   12acc:	b29a      	uxth	r2, r3
   12ace:	f000 80a0 	beq.w	12c12 <_vfiprintf_r+0x512>
   12ad2:	0650      	lsls	r0, r2, #25
   12ad4:	f100 85b2 	bmi.w	1363c <_vfiprintf_r+0xf3c>
   12ad8:	9805      	ldr	r0, [sp, #20]
   12ada:	b045      	add	sp, #276	; 0x114
   12adc:	ecbd 8b02 	vpop	{d8}
   12ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae4:	2900      	cmp	r1, #0
   12ae6:	d0cb      	beq.n	12a80 <_vfiprintf_r+0x380>
   12ae8:	2300      	movs	r3, #0
   12aea:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12aee:	2301      	movs	r3, #1
   12af0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12af4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12af8:	ac2b      	add	r4, sp, #172	; 0xac
   12afa:	2300      	movs	r3, #0
   12afc:	9308      	str	r3, [sp, #32]
   12afe:	461f      	mov	r7, r3
   12b00:	f016 0302 	ands.w	r3, r6, #2
   12b04:	9309      	str	r3, [sp, #36]	; 0x24
   12b06:	d002      	beq.n	12b0e <_vfiprintf_r+0x40e>
   12b08:	9b03      	ldr	r3, [sp, #12]
   12b0a:	3302      	adds	r3, #2
   12b0c:	9303      	str	r3, [sp, #12]
   12b0e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12b12:	930a      	str	r3, [sp, #40]	; 0x28
   12b14:	d105      	bne.n	12b22 <_vfiprintf_r+0x422>
   12b16:	9b06      	ldr	r3, [sp, #24]
   12b18:	9a03      	ldr	r2, [sp, #12]
   12b1a:	1a9d      	subs	r5, r3, r2
   12b1c:	2d00      	cmp	r5, #0
   12b1e:	f300 827b 	bgt.w	13018 <_vfiprintf_r+0x918>
   12b22:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12b26:	1c41      	adds	r1, r0, #1
   12b28:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12b2c:	b182      	cbz	r2, 12b50 <_vfiprintf_r+0x450>
   12b2e:	2201      	movs	r2, #1
   12b30:	3301      	adds	r3, #1
   12b32:	f8c9 2004 	str.w	r2, [r9, #4]
   12b36:	2907      	cmp	r1, #7
   12b38:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12b3c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12b40:	f8c9 2000 	str.w	r2, [r9]
   12b44:	f300 824a 	bgt.w	12fdc <_vfiprintf_r+0x8dc>
   12b48:	4608      	mov	r0, r1
   12b4a:	f109 0908 	add.w	r9, r9, #8
   12b4e:	3101      	adds	r1, #1
   12b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b52:	b1e2      	cbz	r2, 12b8e <_vfiprintf_r+0x48e>
   12b54:	aa11      	add	r2, sp, #68	; 0x44
   12b56:	3302      	adds	r3, #2
   12b58:	f8c9 2000 	str.w	r2, [r9]
   12b5c:	2907      	cmp	r1, #7
   12b5e:	f04f 0202 	mov.w	r2, #2
   12b62:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12b66:	f8c9 2004 	str.w	r2, [r9, #4]
   12b6a:	f340 8250 	ble.w	1300e <_vfiprintf_r+0x90e>
   12b6e:	2b00      	cmp	r3, #0
   12b70:	f000 8343 	beq.w	131fa <_vfiprintf_r+0xafa>
   12b74:	ee18 1a10 	vmov	r1, s16
   12b78:	aa18      	add	r2, sp, #96	; 0x60
   12b7a:	4658      	mov	r0, fp
   12b7c:	f7ff fd84 	bl	12688 <__sprint_r.part.0>
   12b80:	2800      	cmp	r0, #0
   12b82:	d194      	bne.n	12aae <_vfiprintf_r+0x3ae>
   12b84:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12b88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b8c:	1c41      	adds	r1, r0, #1
   12b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12b90:	2a80      	cmp	r2, #128	; 0x80
   12b92:	f000 8184 	beq.w	12e9e <_vfiprintf_r+0x79e>
   12b96:	9a04      	ldr	r2, [sp, #16]
   12b98:	1abd      	subs	r5, r7, r2
   12b9a:	2d00      	cmp	r5, #0
   12b9c:	f300 81d7 	bgt.w	12f4e <_vfiprintf_r+0x84e>
   12ba0:	9a04      	ldr	r2, [sp, #16]
   12ba2:	f8c9 4000 	str.w	r4, [r9]
   12ba6:	4413      	add	r3, r2
   12ba8:	2907      	cmp	r1, #7
   12baa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12bae:	f8c9 2004 	str.w	r2, [r9, #4]
   12bb2:	f340 816e 	ble.w	12e92 <_vfiprintf_r+0x792>
   12bb6:	2b00      	cmp	r3, #0
   12bb8:	f000 8275 	beq.w	130a6 <_vfiprintf_r+0x9a6>
   12bbc:	ee18 1a10 	vmov	r1, s16
   12bc0:	aa18      	add	r2, sp, #96	; 0x60
   12bc2:	4658      	mov	r0, fp
   12bc4:	f7ff fd60 	bl	12688 <__sprint_r.part.0>
   12bc8:	2800      	cmp	r0, #0
   12bca:	f47f af70 	bne.w	12aae <_vfiprintf_r+0x3ae>
   12bce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12bd0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bd4:	0775      	lsls	r5, r6, #29
   12bd6:	d505      	bpl.n	12be4 <_vfiprintf_r+0x4e4>
   12bd8:	9a06      	ldr	r2, [sp, #24]
   12bda:	9903      	ldr	r1, [sp, #12]
   12bdc:	1a54      	subs	r4, r2, r1
   12bde:	2c00      	cmp	r4, #0
   12be0:	f300 826b 	bgt.w	130ba <_vfiprintf_r+0x9ba>
   12be4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12be8:	9803      	ldr	r0, [sp, #12]
   12bea:	4281      	cmp	r1, r0
   12bec:	bfac      	ite	ge
   12bee:	1852      	addge	r2, r2, r1
   12bf0:	1812      	addlt	r2, r2, r0
   12bf2:	9205      	str	r2, [sp, #20]
   12bf4:	2b00      	cmp	r3, #0
   12bf6:	f47f af51 	bne.w	12a9c <_vfiprintf_r+0x39c>
   12bfa:	9908      	ldr	r1, [sp, #32]
   12bfc:	2300      	movs	r3, #0
   12bfe:	9319      	str	r3, [sp, #100]	; 0x64
   12c00:	2900      	cmp	r1, #0
   12c02:	f000 8149 	beq.w	12e98 <_vfiprintf_r+0x798>
   12c06:	4658      	mov	r0, fp
   12c08:	f7ff fb84 	bl	12314 <_free_r>
   12c0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c10:	e5c1      	b.n	12796 <_vfiprintf_r+0x96>
   12c12:	059c      	lsls	r4, r3, #22
   12c14:	f53f af5d 	bmi.w	12ad2 <_vfiprintf_r+0x3d2>
   12c18:	ee18 4a10 	vmov	r4, s16
   12c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12c1e:	f7fe fb39 	bl	11294 <__retarget_lock_release_recursive>
   12c22:	89a2      	ldrh	r2, [r4, #12]
   12c24:	e755      	b.n	12ad2 <_vfiprintf_r+0x3d2>
   12c26:	06f0      	lsls	r0, r6, #27
   12c28:	9a07      	ldr	r2, [sp, #28]
   12c2a:	f100 831f 	bmi.w	1326c <_vfiprintf_r+0xb6c>
   12c2e:	0671      	lsls	r1, r6, #25
   12c30:	f140 8319 	bpl.w	13266 <_vfiprintf_r+0xb66>
   12c34:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12c38:	9207      	str	r2, [sp, #28]
   12c3a:	17da      	asrs	r2, r3, #31
   12c3c:	4611      	mov	r1, r2
   12c3e:	e66e      	b.n	1291e <_vfiprintf_r+0x21e>
   12c40:	f016 0310 	ands.w	r3, r6, #16
   12c44:	9907      	ldr	r1, [sp, #28]
   12c46:	f040 8309 	bne.w	1325c <_vfiprintf_r+0xb5c>
   12c4a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12c4e:	f000 8301 	beq.w	13254 <_vfiprintf_r+0xb54>
   12c52:	461a      	mov	r2, r3
   12c54:	f851 3b04 	ldr.w	r3, [r1], #4
   12c58:	9107      	str	r1, [sp, #28]
   12c5a:	b29b      	uxth	r3, r3
   12c5c:	e6c3      	b.n	129e6 <_vfiprintf_r+0x2e6>
   12c5e:	9b07      	ldr	r3, [sp, #28]
   12c60:	461a      	mov	r2, r3
   12c62:	2300      	movs	r3, #0
   12c64:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c68:	4613      	mov	r3, r2
   12c6a:	f853 4b04 	ldr.w	r4, [r3], #4
   12c6e:	9303      	str	r3, [sp, #12]
   12c70:	2c00      	cmp	r4, #0
   12c72:	f000 8412 	beq.w	1349a <_vfiprintf_r+0xd9a>
   12c76:	2953      	cmp	r1, #83	; 0x53
   12c78:	f000 8365 	beq.w	13346 <_vfiprintf_r+0xc46>
   12c7c:	f016 0510 	ands.w	r5, r6, #16
   12c80:	f040 8361 	bne.w	13346 <_vfiprintf_r+0xc46>
   12c84:	1c7b      	adds	r3, r7, #1
   12c86:	f000 84b3 	beq.w	135f0 <_vfiprintf_r+0xef0>
   12c8a:	463a      	mov	r2, r7
   12c8c:	4629      	mov	r1, r5
   12c8e:	4620      	mov	r0, r4
   12c90:	f7ff f836 	bl	11d00 <memchr>
   12c94:	9008      	str	r0, [sp, #32]
   12c96:	2800      	cmp	r0, #0
   12c98:	f000 849f 	beq.w	135da <_vfiprintf_r+0xeda>
   12c9c:	1b03      	subs	r3, r0, r4
   12c9e:	9a03      	ldr	r2, [sp, #12]
   12ca0:	9304      	str	r3, [sp, #16]
   12ca2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12ca6:	462f      	mov	r7, r5
   12ca8:	9207      	str	r2, [sp, #28]
   12caa:	9303      	str	r3, [sp, #12]
   12cac:	9508      	str	r5, [sp, #32]
   12cae:	e657      	b.n	12960 <_vfiprintf_r+0x260>
   12cb0:	2943      	cmp	r1, #67	; 0x43
   12cb2:	d002      	beq.n	12cba <_vfiprintf_r+0x5ba>
   12cb4:	06f5      	lsls	r5, r6, #27
   12cb6:	f140 832d 	bpl.w	13314 <_vfiprintf_r+0xc14>
   12cba:	9d07      	ldr	r5, [sp, #28]
   12cbc:	2208      	movs	r2, #8
   12cbe:	2100      	movs	r1, #0
   12cc0:	a816      	add	r0, sp, #88	; 0x58
   12cc2:	ac2b      	add	r4, sp, #172	; 0xac
   12cc4:	f7fe fa5e 	bl	11184 <memset>
   12cc8:	ab16      	add	r3, sp, #88	; 0x58
   12cca:	f855 2b04 	ldr.w	r2, [r5], #4
   12cce:	4621      	mov	r1, r4
   12cd0:	4658      	mov	r0, fp
   12cd2:	f000 fdc7 	bl	13864 <_wcrtomb_r>
   12cd6:	4603      	mov	r3, r0
   12cd8:	3301      	adds	r3, #1
   12cda:	9004      	str	r0, [sp, #16]
   12cdc:	f000 84b3 	beq.w	13646 <_vfiprintf_r+0xf46>
   12ce0:	9b04      	ldr	r3, [sp, #16]
   12ce2:	9507      	str	r5, [sp, #28]
   12ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12ce8:	9303      	str	r3, [sp, #12]
   12cea:	2300      	movs	r3, #0
   12cec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12cf0:	e703      	b.n	12afa <_vfiprintf_r+0x3fa>
   12cf2:	9b07      	ldr	r3, [sp, #28]
   12cf4:	f853 2b04 	ldr.w	r2, [r3], #4
   12cf8:	9206      	str	r2, [sp, #24]
   12cfa:	2a00      	cmp	r2, #0
   12cfc:	f280 829c 	bge.w	13238 <_vfiprintf_r+0xb38>
   12d00:	9a06      	ldr	r2, [sp, #24]
   12d02:	4252      	negs	r2, r2
   12d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12d08:	f898 1000 	ldrb.w	r1, [r8]
   12d0c:	f046 0604 	orr.w	r6, r6, #4
   12d10:	e569      	b.n	127e6 <_vfiprintf_r+0xe6>
   12d12:	f898 1000 	ldrb.w	r1, [r8]
   12d16:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12d1a:	e564      	b.n	127e6 <_vfiprintf_r+0xe6>
   12d1c:	f898 1000 	ldrb.w	r1, [r8]
   12d20:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12d24:	e55f      	b.n	127e6 <_vfiprintf_r+0xe6>
   12d26:	4642      	mov	r2, r8
   12d28:	f812 1b01 	ldrb.w	r1, [r2], #1
   12d2c:	292a      	cmp	r1, #42	; 0x2a
   12d2e:	f000 8496 	beq.w	1365e <_vfiprintf_r+0xf5e>
   12d32:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12d36:	2b09      	cmp	r3, #9
   12d38:	4690      	mov	r8, r2
   12d3a:	f04f 0700 	mov.w	r7, #0
   12d3e:	f63f ad54 	bhi.w	127ea <_vfiprintf_r+0xea>
   12d42:	f818 1b01 	ldrb.w	r1, [r8], #1
   12d46:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12d4a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   12d4e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12d52:	2b09      	cmp	r3, #9
   12d54:	d9f5      	bls.n	12d42 <_vfiprintf_r+0x642>
   12d56:	e548      	b.n	127ea <_vfiprintf_r+0xea>
   12d58:	f898 1000 	ldrb.w	r1, [r8]
   12d5c:	f046 0601 	orr.w	r6, r6, #1
   12d60:	e541      	b.n	127e6 <_vfiprintf_r+0xe6>
   12d62:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12d66:	2b00      	cmp	r3, #0
   12d68:	f47f adc2 	bne.w	128f0 <_vfiprintf_r+0x1f0>
   12d6c:	2320      	movs	r3, #32
   12d6e:	f898 1000 	ldrb.w	r1, [r8]
   12d72:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12d76:	e536      	b.n	127e6 <_vfiprintf_r+0xe6>
   12d78:	f898 1000 	ldrb.w	r1, [r8]
   12d7c:	296c      	cmp	r1, #108	; 0x6c
   12d7e:	bf03      	ittte	eq
   12d80:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12d84:	f046 0620 	orreq.w	r6, r6, #32
   12d88:	f108 0801 	addeq.w	r8, r8, #1
   12d8c:	f046 0610 	orrne.w	r6, r6, #16
   12d90:	e529      	b.n	127e6 <_vfiprintf_r+0xe6>
   12d92:	f898 1000 	ldrb.w	r1, [r8]
   12d96:	2968      	cmp	r1, #104	; 0x68
   12d98:	bf03      	ittte	eq
   12d9a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12d9e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12da2:	f108 0801 	addeq.w	r8, r8, #1
   12da6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12daa:	e51c      	b.n	127e6 <_vfiprintf_r+0xe6>
   12dac:	f046 0310 	orr.w	r3, r6, #16
   12db0:	9303      	str	r3, [sp, #12]
   12db2:	9b03      	ldr	r3, [sp, #12]
   12db4:	f013 0220 	ands.w	r2, r3, #32
   12db8:	f000 8206 	beq.w	131c8 <_vfiprintf_r+0xac8>
   12dbc:	9b07      	ldr	r3, [sp, #28]
   12dbe:	3307      	adds	r3, #7
   12dc0:	f023 0307 	bic.w	r3, r3, #7
   12dc4:	4619      	mov	r1, r3
   12dc6:	685a      	ldr	r2, [r3, #4]
   12dc8:	f851 3b08 	ldr.w	r3, [r1], #8
   12dcc:	9107      	str	r1, [sp, #28]
   12dce:	2101      	movs	r1, #1
   12dd0:	e60d      	b.n	129ee <_vfiprintf_r+0x2ee>
   12dd2:	9a07      	ldr	r2, [sp, #28]
   12dd4:	f046 0302 	orr.w	r3, r6, #2
   12dd8:	9303      	str	r3, [sp, #12]
   12dda:	f852 3b04 	ldr.w	r3, [r2], #4
   12dde:	9207      	str	r2, [sp, #28]
   12de0:	f647 0230 	movw	r2, #30768	; 0x7830
   12de4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12de8:	4ab8      	ldr	r2, [pc, #736]	; (130cc <_vfiprintf_r+0x9cc>)
   12dea:	920c      	str	r2, [sp, #48]	; 0x30
   12dec:	2102      	movs	r1, #2
   12dee:	2200      	movs	r2, #0
   12df0:	e5fd      	b.n	129ee <_vfiprintf_r+0x2ee>
   12df2:	06b7      	lsls	r7, r6, #26
   12df4:	f100 8248 	bmi.w	13288 <_vfiprintf_r+0xb88>
   12df8:	06f5      	lsls	r5, r6, #27
   12dfa:	f100 8346 	bmi.w	1348a <_vfiprintf_r+0xd8a>
   12dfe:	0674      	lsls	r4, r6, #25
   12e00:	f100 83d5 	bmi.w	135ae <_vfiprintf_r+0xeae>
   12e04:	05b0      	lsls	r0, r6, #22
   12e06:	f140 8340 	bpl.w	1348a <_vfiprintf_r+0xd8a>
   12e0a:	9b07      	ldr	r3, [sp, #28]
   12e0c:	9905      	ldr	r1, [sp, #20]
   12e0e:	f853 2b04 	ldr.w	r2, [r3], #4
   12e12:	9307      	str	r3, [sp, #28]
   12e14:	7011      	strb	r1, [r2, #0]
   12e16:	e4be      	b.n	12796 <_vfiprintf_r+0x96>
   12e18:	9603      	str	r6, [sp, #12]
   12e1a:	2901      	cmp	r1, #1
   12e1c:	f43f ad8c 	beq.w	12938 <_vfiprintf_r+0x238>
   12e20:	2902      	cmp	r1, #2
   12e22:	ac44      	add	r4, sp, #272	; 0x110
   12e24:	d111      	bne.n	12e4a <_vfiprintf_r+0x74a>
   12e26:	980c      	ldr	r0, [sp, #48]	; 0x30
   12e28:	f003 010f 	and.w	r1, r3, #15
   12e2c:	091b      	lsrs	r3, r3, #4
   12e2e:	5c41      	ldrb	r1, [r0, r1]
   12e30:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12e34:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12e38:	0912      	lsrs	r2, r2, #4
   12e3a:	ea53 0102 	orrs.w	r1, r3, r2
   12e3e:	d1f3      	bne.n	12e28 <_vfiprintf_r+0x728>
   12e40:	9e03      	ldr	r6, [sp, #12]
   12e42:	ab44      	add	r3, sp, #272	; 0x110
   12e44:	1b1b      	subs	r3, r3, r4
   12e46:	9304      	str	r3, [sp, #16]
   12e48:	e583      	b.n	12952 <_vfiprintf_r+0x252>
   12e4a:	f003 0107 	and.w	r1, r3, #7
   12e4e:	08db      	lsrs	r3, r3, #3
   12e50:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12e54:	08d2      	lsrs	r2, r2, #3
   12e56:	3130      	adds	r1, #48	; 0x30
   12e58:	ea53 0502 	orrs.w	r5, r3, r2
   12e5c:	4620      	mov	r0, r4
   12e5e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12e62:	d1f2      	bne.n	12e4a <_vfiprintf_r+0x74a>
   12e64:	9e03      	ldr	r6, [sp, #12]
   12e66:	07f3      	lsls	r3, r6, #31
   12e68:	d5eb      	bpl.n	12e42 <_vfiprintf_r+0x742>
   12e6a:	2930      	cmp	r1, #48	; 0x30
   12e6c:	d0e8      	beq.n	12e40 <_vfiprintf_r+0x740>
   12e6e:	2330      	movs	r3, #48	; 0x30
   12e70:	3802      	subs	r0, #2
   12e72:	f804 3c01 	strb.w	r3, [r4, #-1]
   12e76:	ab44      	add	r3, sp, #272	; 0x110
   12e78:	1a1b      	subs	r3, r3, r0
   12e7a:	9e03      	ldr	r6, [sp, #12]
   12e7c:	9304      	str	r3, [sp, #16]
   12e7e:	4604      	mov	r4, r0
   12e80:	e567      	b.n	12952 <_vfiprintf_r+0x252>
   12e82:	9b04      	ldr	r3, [sp, #16]
   12e84:	941b      	str	r4, [sp, #108]	; 0x6c
   12e86:	2201      	movs	r2, #1
   12e88:	931c      	str	r3, [sp, #112]	; 0x70
   12e8a:	931a      	str	r3, [sp, #104]	; 0x68
   12e8c:	9219      	str	r2, [sp, #100]	; 0x64
   12e8e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e92:	f109 0908 	add.w	r9, r9, #8
   12e96:	e69d      	b.n	12bd4 <_vfiprintf_r+0x4d4>
   12e98:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12e9c:	e47b      	b.n	12796 <_vfiprintf_r+0x96>
   12e9e:	9a06      	ldr	r2, [sp, #24]
   12ea0:	9d03      	ldr	r5, [sp, #12]
   12ea2:	1b55      	subs	r5, r2, r5
   12ea4:	2d00      	cmp	r5, #0
   12ea6:	f77f ae76 	ble.w	12b96 <_vfiprintf_r+0x496>
   12eaa:	2d10      	cmp	r5, #16
   12eac:	f340 83bb 	ble.w	13626 <_vfiprintf_r+0xf26>
   12eb0:	9409      	str	r4, [sp, #36]	; 0x24
   12eb2:	ee18 4a10 	vmov	r4, s16
   12eb6:	e007      	b.n	12ec8 <_vfiprintf_r+0x7c8>
   12eb8:	f100 0c02 	add.w	ip, r0, #2
   12ebc:	f109 0908 	add.w	r9, r9, #8
   12ec0:	4610      	mov	r0, r2
   12ec2:	3d10      	subs	r5, #16
   12ec4:	2d10      	cmp	r5, #16
   12ec6:	dd1e      	ble.n	12f06 <_vfiprintf_r+0x806>
   12ec8:	4981      	ldr	r1, [pc, #516]	; (130d0 <_vfiprintf_r+0x9d0>)
   12eca:	f8c9 1000 	str.w	r1, [r9]
   12ece:	1c42      	adds	r2, r0, #1
   12ed0:	3310      	adds	r3, #16
   12ed2:	2110      	movs	r1, #16
   12ed4:	2a07      	cmp	r2, #7
   12ed6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12eda:	f8c9 1004 	str.w	r1, [r9, #4]
   12ede:	ddeb      	ble.n	12eb8 <_vfiprintf_r+0x7b8>
   12ee0:	aa18      	add	r2, sp, #96	; 0x60
   12ee2:	2b00      	cmp	r3, #0
   12ee4:	d074      	beq.n	12fd0 <_vfiprintf_r+0x8d0>
   12ee6:	4621      	mov	r1, r4
   12ee8:	4658      	mov	r0, fp
   12eea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12eee:	f7ff fbcb 	bl	12688 <__sprint_r.part.0>
   12ef2:	2800      	cmp	r0, #0
   12ef4:	f47f addb 	bne.w	12aae <_vfiprintf_r+0x3ae>
   12ef8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12efc:	3d10      	subs	r5, #16
   12efe:	2d10      	cmp	r5, #16
   12f00:	f100 0c01 	add.w	ip, r0, #1
   12f04:	dce0      	bgt.n	12ec8 <_vfiprintf_r+0x7c8>
   12f06:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12f08:	4a71      	ldr	r2, [pc, #452]	; (130d0 <_vfiprintf_r+0x9d0>)
   12f0a:	f8c9 5004 	str.w	r5, [r9, #4]
   12f0e:	442b      	add	r3, r5
   12f10:	f1bc 0f07 	cmp.w	ip, #7
   12f14:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   12f18:	f8c9 2000 	str.w	r2, [r9]
   12f1c:	f340 8194 	ble.w	13248 <_vfiprintf_r+0xb48>
   12f20:	2b00      	cmp	r3, #0
   12f22:	f000 831f 	beq.w	13564 <_vfiprintf_r+0xe64>
   12f26:	ee18 1a10 	vmov	r1, s16
   12f2a:	aa18      	add	r2, sp, #96	; 0x60
   12f2c:	4658      	mov	r0, fp
   12f2e:	f7ff fbab 	bl	12688 <__sprint_r.part.0>
   12f32:	2800      	cmp	r0, #0
   12f34:	f47f adbb 	bne.w	12aae <_vfiprintf_r+0x3ae>
   12f38:	9a04      	ldr	r2, [sp, #16]
   12f3a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12f3e:	1abd      	subs	r5, r7, r2
   12f40:	2d00      	cmp	r5, #0
   12f42:	f100 0101 	add.w	r1, r0, #1
   12f46:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f4a:	f77f ae29 	ble.w	12ba0 <_vfiprintf_r+0x4a0>
   12f4e:	2d10      	cmp	r5, #16
   12f50:	dd29      	ble.n	12fa6 <_vfiprintf_r+0x8a6>
   12f52:	9409      	str	r4, [sp, #36]	; 0x24
   12f54:	2710      	movs	r7, #16
   12f56:	ee18 4a10 	vmov	r4, s16
   12f5a:	e007      	b.n	12f6c <_vfiprintf_r+0x86c>
   12f5c:	f100 0c02 	add.w	ip, r0, #2
   12f60:	f109 0908 	add.w	r9, r9, #8
   12f64:	4610      	mov	r0, r2
   12f66:	3d10      	subs	r5, #16
   12f68:	2d10      	cmp	r5, #16
   12f6a:	dd1a      	ble.n	12fa2 <_vfiprintf_r+0x8a2>
   12f6c:	1c42      	adds	r2, r0, #1
   12f6e:	4958      	ldr	r1, [pc, #352]	; (130d0 <_vfiprintf_r+0x9d0>)
   12f70:	3310      	adds	r3, #16
   12f72:	2a07      	cmp	r2, #7
   12f74:	e9c9 1700 	strd	r1, r7, [r9]
   12f78:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12f7c:	ddee      	ble.n	12f5c <_vfiprintf_r+0x85c>
   12f7e:	aa18      	add	r2, sp, #96	; 0x60
   12f80:	b303      	cbz	r3, 12fc4 <_vfiprintf_r+0x8c4>
   12f82:	4621      	mov	r1, r4
   12f84:	4658      	mov	r0, fp
   12f86:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f8a:	f7ff fb7d 	bl	12688 <__sprint_r.part.0>
   12f8e:	2800      	cmp	r0, #0
   12f90:	f47f ad8d 	bne.w	12aae <_vfiprintf_r+0x3ae>
   12f94:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12f98:	3d10      	subs	r5, #16
   12f9a:	2d10      	cmp	r5, #16
   12f9c:	f100 0c01 	add.w	ip, r0, #1
   12fa0:	dce4      	bgt.n	12f6c <_vfiprintf_r+0x86c>
   12fa2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12fa4:	4661      	mov	r1, ip
   12fa6:	4a4a      	ldr	r2, [pc, #296]	; (130d0 <_vfiprintf_r+0x9d0>)
   12fa8:	f8c9 5004 	str.w	r5, [r9, #4]
   12fac:	442b      	add	r3, r5
   12fae:	2907      	cmp	r1, #7
   12fb0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12fb4:	f8c9 2000 	str.w	r2, [r9]
   12fb8:	f300 80e7 	bgt.w	1318a <_vfiprintf_r+0xa8a>
   12fbc:	f109 0908 	add.w	r9, r9, #8
   12fc0:	3101      	adds	r1, #1
   12fc2:	e5ed      	b.n	12ba0 <_vfiprintf_r+0x4a0>
   12fc4:	f04f 0c01 	mov.w	ip, #1
   12fc8:	4618      	mov	r0, r3
   12fca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fce:	e7ca      	b.n	12f66 <_vfiprintf_r+0x866>
   12fd0:	f04f 0c01 	mov.w	ip, #1
   12fd4:	4618      	mov	r0, r3
   12fd6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12fda:	e772      	b.n	12ec2 <_vfiprintf_r+0x7c2>
   12fdc:	2b00      	cmp	r3, #0
   12fde:	f000 8104 	beq.w	131ea <_vfiprintf_r+0xaea>
   12fe2:	ee18 1a10 	vmov	r1, s16
   12fe6:	aa18      	add	r2, sp, #96	; 0x60
   12fe8:	4658      	mov	r0, fp
   12fea:	f7ff fb4d 	bl	12688 <__sprint_r.part.0>
   12fee:	2800      	cmp	r0, #0
   12ff0:	f47f ad5d 	bne.w	12aae <_vfiprintf_r+0x3ae>
   12ff4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12ff8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ffc:	1c41      	adds	r1, r0, #1
   12ffe:	e5a7      	b.n	12b50 <_vfiprintf_r+0x450>
   13000:	2302      	movs	r3, #2
   13002:	aa11      	add	r2, sp, #68	; 0x44
   13004:	931c      	str	r3, [sp, #112]	; 0x70
   13006:	921b      	str	r2, [sp, #108]	; 0x6c
   13008:	2101      	movs	r1, #1
   1300a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1300e:	4608      	mov	r0, r1
   13010:	f109 0908 	add.w	r9, r9, #8
   13014:	1c41      	adds	r1, r0, #1
   13016:	e5ba      	b.n	12b8e <_vfiprintf_r+0x48e>
   13018:	2d10      	cmp	r5, #16
   1301a:	f340 82e5 	ble.w	135e8 <_vfiprintf_r+0xee8>
   1301e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13022:	940f      	str	r4, [sp, #60]	; 0x3c
   13024:	4608      	mov	r0, r1
   13026:	ee18 4a10 	vmov	r4, s16
   1302a:	e007      	b.n	1303c <_vfiprintf_r+0x93c>
   1302c:	f100 0c02 	add.w	ip, r0, #2
   13030:	f109 0908 	add.w	r9, r9, #8
   13034:	4610      	mov	r0, r2
   13036:	3d10      	subs	r5, #16
   13038:	2d10      	cmp	r5, #16
   1303a:	dd1d      	ble.n	13078 <_vfiprintf_r+0x978>
   1303c:	4925      	ldr	r1, [pc, #148]	; (130d4 <_vfiprintf_r+0x9d4>)
   1303e:	f8c9 1000 	str.w	r1, [r9]
   13042:	1c42      	adds	r2, r0, #1
   13044:	3310      	adds	r3, #16
   13046:	2110      	movs	r1, #16
   13048:	2a07      	cmp	r2, #7
   1304a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1304e:	f8c9 1004 	str.w	r1, [r9, #4]
   13052:	ddeb      	ble.n	1302c <_vfiprintf_r+0x92c>
   13054:	aa18      	add	r2, sp, #96	; 0x60
   13056:	b303      	cbz	r3, 1309a <_vfiprintf_r+0x99a>
   13058:	4621      	mov	r1, r4
   1305a:	4658      	mov	r0, fp
   1305c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13060:	f7ff fb12 	bl	12688 <__sprint_r.part.0>
   13064:	2800      	cmp	r0, #0
   13066:	f47f ad22 	bne.w	12aae <_vfiprintf_r+0x3ae>
   1306a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1306e:	3d10      	subs	r5, #16
   13070:	2d10      	cmp	r5, #16
   13072:	f100 0c01 	add.w	ip, r0, #1
   13076:	dce1      	bgt.n	1303c <_vfiprintf_r+0x93c>
   13078:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1307a:	4660      	mov	r0, ip
   1307c:	4a15      	ldr	r2, [pc, #84]	; (130d4 <_vfiprintf_r+0x9d4>)
   1307e:	f8c9 5004 	str.w	r5, [r9, #4]
   13082:	442b      	add	r3, r5
   13084:	2807      	cmp	r0, #7
   13086:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1308a:	f8c9 2000 	str.w	r2, [r9]
   1308e:	f300 80c1 	bgt.w	13214 <_vfiprintf_r+0xb14>
   13092:	f109 0908 	add.w	r9, r9, #8
   13096:	1c41      	adds	r1, r0, #1
   13098:	e546      	b.n	12b28 <_vfiprintf_r+0x428>
   1309a:	4618      	mov	r0, r3
   1309c:	f04f 0c01 	mov.w	ip, #1
   130a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130a4:	e7c7      	b.n	13036 <_vfiprintf_r+0x936>
   130a6:	0776      	lsls	r6, r6, #29
   130a8:	9319      	str	r3, [sp, #100]	; 0x64
   130aa:	d553      	bpl.n	13154 <_vfiprintf_r+0xa54>
   130ac:	9a06      	ldr	r2, [sp, #24]
   130ae:	9903      	ldr	r1, [sp, #12]
   130b0:	1a54      	subs	r4, r2, r1
   130b2:	2c00      	cmp	r4, #0
   130b4:	dd4e      	ble.n	13154 <_vfiprintf_r+0xa54>
   130b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   130ba:	2c10      	cmp	r4, #16
   130bc:	f340 82b0 	ble.w	13620 <_vfiprintf_r+0xf20>
   130c0:	9919      	ldr	r1, [sp, #100]	; 0x64
   130c2:	ee18 6a10 	vmov	r6, s16
   130c6:	2510      	movs	r5, #16
   130c8:	e00d      	b.n	130e6 <_vfiprintf_r+0x9e6>
   130ca:	bf00      	nop
   130cc:	2000269c 	.word	0x2000269c
   130d0:	20002ff0 	.word	0x20002ff0
   130d4:	200026d8 	.word	0x200026d8
   130d8:	1c88      	adds	r0, r1, #2
   130da:	f109 0908 	add.w	r9, r9, #8
   130de:	4611      	mov	r1, r2
   130e0:	3c10      	subs	r4, #16
   130e2:	2c10      	cmp	r4, #16
   130e4:	dd1a      	ble.n	1311c <_vfiprintf_r+0xa1c>
   130e6:	1c4a      	adds	r2, r1, #1
   130e8:	48b3      	ldr	r0, [pc, #716]	; (133b8 <_vfiprintf_r+0xcb8>)
   130ea:	3310      	adds	r3, #16
   130ec:	2a07      	cmp	r2, #7
   130ee:	e9c9 0500 	strd	r0, r5, [r9]
   130f2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   130f6:	ddef      	ble.n	130d8 <_vfiprintf_r+0x9d8>
   130f8:	aa18      	add	r2, sp, #96	; 0x60
   130fa:	b333      	cbz	r3, 1314a <_vfiprintf_r+0xa4a>
   130fc:	4631      	mov	r1, r6
   130fe:	4658      	mov	r0, fp
   13100:	f7ff fac2 	bl	12688 <__sprint_r.part.0>
   13104:	2800      	cmp	r0, #0
   13106:	f47f acd2 	bne.w	12aae <_vfiprintf_r+0x3ae>
   1310a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1310e:	3c10      	subs	r4, #16
   13110:	2c10      	cmp	r4, #16
   13112:	f101 0001 	add.w	r0, r1, #1
   13116:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1311a:	dce4      	bgt.n	130e6 <_vfiprintf_r+0x9e6>
   1311c:	4aa6      	ldr	r2, [pc, #664]	; (133b8 <_vfiprintf_r+0xcb8>)
   1311e:	f8c9 4004 	str.w	r4, [r9, #4]
   13122:	4423      	add	r3, r4
   13124:	2807      	cmp	r0, #7
   13126:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1312a:	f8c9 2000 	str.w	r2, [r9]
   1312e:	f77f ad59 	ble.w	12be4 <_vfiprintf_r+0x4e4>
   13132:	b17b      	cbz	r3, 13154 <_vfiprintf_r+0xa54>
   13134:	ee18 1a10 	vmov	r1, s16
   13138:	aa18      	add	r2, sp, #96	; 0x60
   1313a:	4658      	mov	r0, fp
   1313c:	f7ff faa4 	bl	12688 <__sprint_r.part.0>
   13140:	2800      	cmp	r0, #0
   13142:	f47f acb4 	bne.w	12aae <_vfiprintf_r+0x3ae>
   13146:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13148:	e54c      	b.n	12be4 <_vfiprintf_r+0x4e4>
   1314a:	2001      	movs	r0, #1
   1314c:	4619      	mov	r1, r3
   1314e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13152:	e7c5      	b.n	130e0 <_vfiprintf_r+0x9e0>
   13154:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13158:	9903      	ldr	r1, [sp, #12]
   1315a:	428a      	cmp	r2, r1
   1315c:	bfac      	ite	ge
   1315e:	189b      	addge	r3, r3, r2
   13160:	185b      	addlt	r3, r3, r1
   13162:	9305      	str	r3, [sp, #20]
   13164:	e549      	b.n	12bfa <_vfiprintf_r+0x4fa>
   13166:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1316a:	058f      	lsls	r7, r1, #22
   1316c:	ee18 3a10 	vmov	r3, s16
   13170:	b28a      	uxth	r2, r1
   13172:	f53f aae8 	bmi.w	12746 <_vfiprintf_r+0x46>
   13176:	ee18 5a10 	vmov	r5, s16
   1317a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1317c:	f7fe f888 	bl	11290 <__retarget_lock_acquire_recursive>
   13180:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13184:	b28a      	uxth	r2, r1
   13186:	f7ff bade 	b.w	12746 <_vfiprintf_r+0x46>
   1318a:	2b00      	cmp	r3, #0
   1318c:	f43f ae79 	beq.w	12e82 <_vfiprintf_r+0x782>
   13190:	ee18 1a10 	vmov	r1, s16
   13194:	aa18      	add	r2, sp, #96	; 0x60
   13196:	4658      	mov	r0, fp
   13198:	f7ff fa76 	bl	12688 <__sprint_r.part.0>
   1319c:	2800      	cmp	r0, #0
   1319e:	f47f ac86 	bne.w	12aae <_vfiprintf_r+0x3ae>
   131a2:	9919      	ldr	r1, [sp, #100]	; 0x64
   131a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   131a6:	3101      	adds	r1, #1
   131a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131ac:	e4f8      	b.n	12ba0 <_vfiprintf_r+0x4a0>
   131ae:	9219      	str	r2, [sp, #100]	; 0x64
   131b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131b4:	e45e      	b.n	12a74 <_vfiprintf_r+0x374>
   131b6:	2f00      	cmp	r7, #0
   131b8:	f47f abc3 	bne.w	12942 <_vfiprintf_r+0x242>
   131bc:	9e03      	ldr	r6, [sp, #12]
   131be:	2700      	movs	r7, #0
   131c0:	9704      	str	r7, [sp, #16]
   131c2:	ac44      	add	r4, sp, #272	; 0x110
   131c4:	f7ff bbc5 	b.w	12952 <_vfiprintf_r+0x252>
   131c8:	9b03      	ldr	r3, [sp, #12]
   131ca:	f013 0310 	ands.w	r3, r3, #16
   131ce:	d154      	bne.n	1327a <_vfiprintf_r+0xb7a>
   131d0:	9a03      	ldr	r2, [sp, #12]
   131d2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   131d6:	f000 816b 	beq.w	134b0 <_vfiprintf_r+0xdb0>
   131da:	9907      	ldr	r1, [sp, #28]
   131dc:	461a      	mov	r2, r3
   131de:	f851 3b04 	ldr.w	r3, [r1], #4
   131e2:	9107      	str	r1, [sp, #28]
   131e4:	b29b      	uxth	r3, r3
   131e6:	2101      	movs	r1, #1
   131e8:	e401      	b.n	129ee <_vfiprintf_r+0x2ee>
   131ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   131ec:	2a00      	cmp	r2, #0
   131ee:	d164      	bne.n	132ba <_vfiprintf_r+0xbba>
   131f0:	4618      	mov	r0, r3
   131f2:	2101      	movs	r1, #1
   131f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131f8:	e4c9      	b.n	12b8e <_vfiprintf_r+0x48e>
   131fa:	2101      	movs	r1, #1
   131fc:	4618      	mov	r0, r3
   131fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13202:	e4c4      	b.n	12b8e <_vfiprintf_r+0x48e>
   13204:	425b      	negs	r3, r3
   13206:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1320a:	9603      	str	r6, [sp, #12]
   1320c:	202d      	movs	r0, #45	; 0x2d
   1320e:	2101      	movs	r1, #1
   13210:	f7ff bbee 	b.w	129f0 <_vfiprintf_r+0x2f0>
   13214:	2b00      	cmp	r3, #0
   13216:	f000 8088 	beq.w	1332a <_vfiprintf_r+0xc2a>
   1321a:	ee18 1a10 	vmov	r1, s16
   1321e:	aa18      	add	r2, sp, #96	; 0x60
   13220:	4658      	mov	r0, fp
   13222:	f7ff fa31 	bl	12688 <__sprint_r.part.0>
   13226:	2800      	cmp	r0, #0
   13228:	f47f ac41 	bne.w	12aae <_vfiprintf_r+0x3ae>
   1322c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13230:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13234:	1c41      	adds	r1, r0, #1
   13236:	e477      	b.n	12b28 <_vfiprintf_r+0x428>
   13238:	f898 1000 	ldrb.w	r1, [r8]
   1323c:	9307      	str	r3, [sp, #28]
   1323e:	f7ff bad2 	b.w	127e6 <_vfiprintf_r+0xe6>
   13242:	ac44      	add	r4, sp, #272	; 0x110
   13244:	f7ff bb85 	b.w	12952 <_vfiprintf_r+0x252>
   13248:	f109 0908 	add.w	r9, r9, #8
   1324c:	f10c 0101 	add.w	r1, ip, #1
   13250:	4660      	mov	r0, ip
   13252:	e4a0      	b.n	12b96 <_vfiprintf_r+0x496>
   13254:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13258:	f040 8197 	bne.w	1358a <_vfiprintf_r+0xe8a>
   1325c:	f851 3b04 	ldr.w	r3, [r1], #4
   13260:	9107      	str	r1, [sp, #28]
   13262:	f7ff bbc0 	b.w	129e6 <_vfiprintf_r+0x2e6>
   13266:	05b3      	lsls	r3, r6, #22
   13268:	f100 8188 	bmi.w	1357c <_vfiprintf_r+0xe7c>
   1326c:	f852 3b04 	ldr.w	r3, [r2], #4
   13270:	9207      	str	r2, [sp, #28]
   13272:	17da      	asrs	r2, r3, #31
   13274:	4611      	mov	r1, r2
   13276:	f7ff bb52 	b.w	1291e <_vfiprintf_r+0x21e>
   1327a:	9907      	ldr	r1, [sp, #28]
   1327c:	f851 3b04 	ldr.w	r3, [r1], #4
   13280:	9107      	str	r1, [sp, #28]
   13282:	2101      	movs	r1, #1
   13284:	f7ff bbb3 	b.w	129ee <_vfiprintf_r+0x2ee>
   13288:	9b07      	ldr	r3, [sp, #28]
   1328a:	9805      	ldr	r0, [sp, #20]
   1328c:	f853 1b04 	ldr.w	r1, [r3], #4
   13290:	9307      	str	r3, [sp, #28]
   13292:	17c2      	asrs	r2, r0, #31
   13294:	e9c1 0200 	strd	r0, r2, [r1]
   13298:	f7ff ba7d 	b.w	12796 <_vfiprintf_r+0x96>
   1329c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1329e:	2b00      	cmp	r3, #0
   132a0:	f43f ab26 	beq.w	128f0 <_vfiprintf_r+0x1f0>
   132a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   132a6:	781b      	ldrb	r3, [r3, #0]
   132a8:	2b00      	cmp	r3, #0
   132aa:	f43f ab21 	beq.w	128f0 <_vfiprintf_r+0x1f0>
   132ae:	f898 1000 	ldrb.w	r1, [r8]
   132b2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   132b6:	f7ff ba96 	b.w	127e6 <_vfiprintf_r+0xe6>
   132ba:	2302      	movs	r3, #2
   132bc:	aa11      	add	r2, sp, #68	; 0x44
   132be:	931c      	str	r3, [sp, #112]	; 0x70
   132c0:	921b      	str	r2, [sp, #108]	; 0x6c
   132c2:	2001      	movs	r0, #1
   132c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132c8:	e6a2      	b.n	13010 <_vfiprintf_r+0x910>
   132ca:	9603      	str	r6, [sp, #12]
   132cc:	e571      	b.n	12db2 <_vfiprintf_r+0x6b2>
   132ce:	4b3b      	ldr	r3, [pc, #236]	; (133bc <_vfiprintf_r+0xcbc>)
   132d0:	930c      	str	r3, [sp, #48]	; 0x30
   132d2:	f016 0220 	ands.w	r2, r6, #32
   132d6:	d059      	beq.n	1338c <_vfiprintf_r+0xc8c>
   132d8:	9b07      	ldr	r3, [sp, #28]
   132da:	3307      	adds	r3, #7
   132dc:	f023 0307 	bic.w	r3, r3, #7
   132e0:	4618      	mov	r0, r3
   132e2:	685a      	ldr	r2, [r3, #4]
   132e4:	f850 3b08 	ldr.w	r3, [r0], #8
   132e8:	9007      	str	r0, [sp, #28]
   132ea:	07f4      	lsls	r4, r6, #31
   132ec:	d509      	bpl.n	13302 <_vfiprintf_r+0xc02>
   132ee:	ea53 0002 	orrs.w	r0, r3, r2
   132f2:	d006      	beq.n	13302 <_vfiprintf_r+0xc02>
   132f4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   132f8:	2130      	movs	r1, #48	; 0x30
   132fa:	f046 0602 	orr.w	r6, r6, #2
   132fe:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13302:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13306:	9103      	str	r1, [sp, #12]
   13308:	2102      	movs	r1, #2
   1330a:	f7ff bb70 	b.w	129ee <_vfiprintf_r+0x2ee>
   1330e:	4b2c      	ldr	r3, [pc, #176]	; (133c0 <_vfiprintf_r+0xcc0>)
   13310:	930c      	str	r3, [sp, #48]	; 0x30
   13312:	e7de      	b.n	132d2 <_vfiprintf_r+0xbd2>
   13314:	9b07      	ldr	r3, [sp, #28]
   13316:	2101      	movs	r1, #1
   13318:	f853 2b04 	ldr.w	r2, [r3], #4
   1331c:	9103      	str	r1, [sp, #12]
   1331e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13322:	9307      	str	r3, [sp, #28]
   13324:	9104      	str	r1, [sp, #16]
   13326:	ac2b      	add	r4, sp, #172	; 0xac
   13328:	e4df      	b.n	12cea <_vfiprintf_r+0x5ea>
   1332a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1332e:	2a00      	cmp	r2, #0
   13330:	f040 8132 	bne.w	13598 <_vfiprintf_r+0xe98>
   13334:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13336:	2a00      	cmp	r2, #0
   13338:	f47f ae62 	bne.w	13000 <_vfiprintf_r+0x900>
   1333c:	4618      	mov	r0, r3
   1333e:	2101      	movs	r1, #1
   13340:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13344:	e427      	b.n	12b96 <_vfiprintf_r+0x496>
   13346:	2100      	movs	r1, #0
   13348:	2208      	movs	r2, #8
   1334a:	a816      	add	r0, sp, #88	; 0x58
   1334c:	9413      	str	r4, [sp, #76]	; 0x4c
   1334e:	f7fd ff19 	bl	11184 <memset>
   13352:	1c79      	adds	r1, r7, #1
   13354:	f000 80bc 	beq.w	134d0 <_vfiprintf_r+0xdd0>
   13358:	2500      	movs	r5, #0
   1335a:	9407      	str	r4, [sp, #28]
   1335c:	462c      	mov	r4, r5
   1335e:	e00c      	b.n	1337a <_vfiprintf_r+0xc7a>
   13360:	a92b      	add	r1, sp, #172	; 0xac
   13362:	4658      	mov	r0, fp
   13364:	f000 fa7e 	bl	13864 <_wcrtomb_r>
   13368:	1c42      	adds	r2, r0, #1
   1336a:	4420      	add	r0, r4
   1336c:	f000 816b 	beq.w	13646 <_vfiprintf_r+0xf46>
   13370:	42b8      	cmp	r0, r7
   13372:	dc08      	bgt.n	13386 <_vfiprintf_r+0xc86>
   13374:	f000 8170 	beq.w	13658 <_vfiprintf_r+0xf58>
   13378:	4604      	mov	r4, r0
   1337a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1337c:	5952      	ldr	r2, [r2, r5]
   1337e:	ab16      	add	r3, sp, #88	; 0x58
   13380:	3504      	adds	r5, #4
   13382:	2a00      	cmp	r2, #0
   13384:	d1ec      	bne.n	13360 <_vfiprintf_r+0xc60>
   13386:	9404      	str	r4, [sp, #16]
   13388:	9c07      	ldr	r4, [sp, #28]
   1338a:	e0af      	b.n	134ec <_vfiprintf_r+0xdec>
   1338c:	f016 0310 	ands.w	r3, r6, #16
   13390:	9807      	ldr	r0, [sp, #28]
   13392:	d10c      	bne.n	133ae <_vfiprintf_r+0xcae>
   13394:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13398:	d005      	beq.n	133a6 <_vfiprintf_r+0xca6>
   1339a:	461a      	mov	r2, r3
   1339c:	f850 3b04 	ldr.w	r3, [r0], #4
   133a0:	9007      	str	r0, [sp, #28]
   133a2:	b29b      	uxth	r3, r3
   133a4:	e7a1      	b.n	132ea <_vfiprintf_r+0xbea>
   133a6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   133aa:	f040 80e1 	bne.w	13570 <_vfiprintf_r+0xe70>
   133ae:	f850 3b04 	ldr.w	r3, [r0], #4
   133b2:	9007      	str	r0, [sp, #28]
   133b4:	e799      	b.n	132ea <_vfiprintf_r+0xbea>
   133b6:	bf00      	nop
   133b8:	200026d8 	.word	0x200026d8
   133bc:	2000269c 	.word	0x2000269c
   133c0:	20002688 	.word	0x20002688
   133c4:	9903      	ldr	r1, [sp, #12]
   133c6:	9704      	str	r7, [sp, #16]
   133c8:	ac44      	add	r4, sp, #272	; 0x110
   133ca:	469e      	mov	lr, r3
   133cc:	ee08 ba90 	vmov	s17, fp
   133d0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   133d4:	f04f 0c00 	mov.w	ip, #0
   133d8:	4623      	mov	r3, r4
   133da:	e006      	b.n	133ea <_vfiprintf_r+0xcea>
   133dc:	f1be 0f0a 	cmp.w	lr, #10
   133e0:	f172 0200 	sbcs.w	r2, r2, #0
   133e4:	d339      	bcc.n	1345a <_vfiprintf_r+0xd5a>
   133e6:	46a6      	mov	lr, r4
   133e8:	462a      	mov	r2, r5
   133ea:	49a6      	ldr	r1, [pc, #664]	; (13684 <_vfiprintf_r+0xf84>)
   133ec:	eb1e 0002 	adds.w	r0, lr, r2
   133f0:	f140 0000 	adc.w	r0, r0, #0
   133f4:	460f      	mov	r7, r1
   133f6:	fba1 1400 	umull	r1, r4, r1, r0
   133fa:	f024 0103 	bic.w	r1, r4, #3
   133fe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13402:	1a40      	subs	r0, r0, r1
   13404:	ebbe 0100 	subs.w	r1, lr, r0
   13408:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1340c:	f162 0400 	sbc.w	r4, r2, #0
   13410:	fb05 f501 	mul.w	r5, r5, r1
   13414:	fb07 5504 	mla	r5, r7, r4, r5
   13418:	fba1 4107 	umull	r4, r1, r1, r7
   1341c:	440d      	add	r5, r1
   1341e:	2705      	movs	r7, #5
   13420:	f004 0101 	and.w	r1, r4, #1
   13424:	fba1 1b07 	umull	r1, fp, r1, r7
   13428:	1809      	adds	r1, r1, r0
   1342a:	0864      	lsrs	r4, r4, #1
   1342c:	3130      	adds	r1, #48	; 0x30
   1342e:	f803 1c01 	strb.w	r1, [r3, #-1]
   13432:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13436:	f10c 0c01 	add.w	ip, ip, #1
   1343a:	3b01      	subs	r3, #1
   1343c:	086d      	lsrs	r5, r5, #1
   1343e:	2e00      	cmp	r6, #0
   13440:	d0cc      	beq.n	133dc <_vfiprintf_r+0xcdc>
   13442:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13444:	7809      	ldrb	r1, [r1, #0]
   13446:	4561      	cmp	r1, ip
   13448:	d1c8      	bne.n	133dc <_vfiprintf_r+0xcdc>
   1344a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1344e:	d0c5      	beq.n	133dc <_vfiprintf_r+0xcdc>
   13450:	f1be 0f0a 	cmp.w	lr, #10
   13454:	f172 0200 	sbcs.w	r2, r2, #0
   13458:	d26c      	bcs.n	13534 <_vfiprintf_r+0xe34>
   1345a:	461c      	mov	r4, r3
   1345c:	ab44      	add	r3, sp, #272	; 0x110
   1345e:	1b1b      	subs	r3, r3, r4
   13460:	9f04      	ldr	r7, [sp, #16]
   13462:	9e03      	ldr	r6, [sp, #12]
   13464:	9304      	str	r3, [sp, #16]
   13466:	ee18 ba90 	vmov	fp, s17
   1346a:	f7ff ba72 	b.w	12952 <_vfiprintf_r+0x252>
   1346e:	9603      	str	r6, [sp, #12]
   13470:	f7ff ba62 	b.w	12938 <_vfiprintf_r+0x238>
   13474:	4658      	mov	r0, fp
   13476:	f7fe fc19 	bl	11cac <__sinit>
   1347a:	f7ff b95b 	b.w	12734 <_vfiprintf_r+0x34>
   1347e:	2901      	cmp	r1, #1
   13480:	9603      	str	r6, [sp, #12]
   13482:	f47f accd 	bne.w	12e20 <_vfiprintf_r+0x720>
   13486:	f7ff ba5c 	b.w	12942 <_vfiprintf_r+0x242>
   1348a:	9b07      	ldr	r3, [sp, #28]
   1348c:	9905      	ldr	r1, [sp, #20]
   1348e:	f853 2b04 	ldr.w	r2, [r3], #4
   13492:	6011      	str	r1, [r2, #0]
   13494:	9307      	str	r3, [sp, #28]
   13496:	f7ff b97e 	b.w	12796 <_vfiprintf_r+0x96>
   1349a:	2f06      	cmp	r7, #6
   1349c:	463b      	mov	r3, r7
   1349e:	9a03      	ldr	r2, [sp, #12]
   134a0:	4c79      	ldr	r4, [pc, #484]	; (13688 <_vfiprintf_r+0xf88>)
   134a2:	9207      	str	r2, [sp, #28]
   134a4:	bf28      	it	cs
   134a6:	2306      	movcs	r3, #6
   134a8:	9304      	str	r3, [sp, #16]
   134aa:	9303      	str	r3, [sp, #12]
   134ac:	f7ff bb25 	b.w	12afa <_vfiprintf_r+0x3fa>
   134b0:	9b03      	ldr	r3, [sp, #12]
   134b2:	9907      	ldr	r1, [sp, #28]
   134b4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   134b8:	bf14      	ite	ne
   134ba:	f851 3b04 	ldrne.w	r3, [r1], #4
   134be:	f851 3b04 	ldreq.w	r3, [r1], #4
   134c2:	9107      	str	r1, [sp, #28]
   134c4:	bf1c      	itt	ne
   134c6:	4602      	movne	r2, r0
   134c8:	b2db      	uxtbne	r3, r3
   134ca:	2101      	movs	r1, #1
   134cc:	f7ff ba8f 	b.w	129ee <_vfiprintf_r+0x2ee>
   134d0:	ab16      	add	r3, sp, #88	; 0x58
   134d2:	9300      	str	r3, [sp, #0]
   134d4:	2300      	movs	r3, #0
   134d6:	4619      	mov	r1, r3
   134d8:	aa13      	add	r2, sp, #76	; 0x4c
   134da:	4658      	mov	r0, fp
   134dc:	f000 fb22 	bl	13b24 <_wcsrtombs_r>
   134e0:	4603      	mov	r3, r0
   134e2:	3301      	adds	r3, #1
   134e4:	9004      	str	r0, [sp, #16]
   134e6:	f000 80ae 	beq.w	13646 <_vfiprintf_r+0xf46>
   134ea:	9413      	str	r4, [sp, #76]	; 0x4c
   134ec:	9b04      	ldr	r3, [sp, #16]
   134ee:	2b00      	cmp	r3, #0
   134f0:	d030      	beq.n	13554 <_vfiprintf_r+0xe54>
   134f2:	2b63      	cmp	r3, #99	; 0x63
   134f4:	dc63      	bgt.n	135be <_vfiprintf_r+0xebe>
   134f6:	2300      	movs	r3, #0
   134f8:	9308      	str	r3, [sp, #32]
   134fa:	ac2b      	add	r4, sp, #172	; 0xac
   134fc:	2208      	movs	r2, #8
   134fe:	2100      	movs	r1, #0
   13500:	a816      	add	r0, sp, #88	; 0x58
   13502:	f7fd fe3f 	bl	11184 <memset>
   13506:	9d04      	ldr	r5, [sp, #16]
   13508:	ab16      	add	r3, sp, #88	; 0x58
   1350a:	9300      	str	r3, [sp, #0]
   1350c:	aa13      	add	r2, sp, #76	; 0x4c
   1350e:	462b      	mov	r3, r5
   13510:	4621      	mov	r1, r4
   13512:	4658      	mov	r0, fp
   13514:	f000 fb06 	bl	13b24 <_wcsrtombs_r>
   13518:	4285      	cmp	r5, r0
   1351a:	f040 80ab 	bne.w	13674 <_vfiprintf_r+0xf74>
   1351e:	9b03      	ldr	r3, [sp, #12]
   13520:	9a04      	ldr	r2, [sp, #16]
   13522:	9307      	str	r3, [sp, #28]
   13524:	2300      	movs	r3, #0
   13526:	54a3      	strb	r3, [r4, r2]
   13528:	461f      	mov	r7, r3
   1352a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1352e:	9303      	str	r3, [sp, #12]
   13530:	f7ff ba16 	b.w	12960 <_vfiprintf_r+0x260>
   13534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13536:	990d      	ldr	r1, [sp, #52]	; 0x34
   13538:	1a9b      	subs	r3, r3, r2
   1353a:	4618      	mov	r0, r3
   1353c:	9308      	str	r3, [sp, #32]
   1353e:	f7fd fa47 	bl	109d0 <strncpy>
   13542:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13544:	9b08      	ldr	r3, [sp, #32]
   13546:	784a      	ldrb	r2, [r1, #1]
   13548:	b10a      	cbz	r2, 1354e <_vfiprintf_r+0xe4e>
   1354a:	3101      	adds	r1, #1
   1354c:	910b      	str	r1, [sp, #44]	; 0x2c
   1354e:	f04f 0c00 	mov.w	ip, #0
   13552:	e748      	b.n	133e6 <_vfiprintf_r+0xce6>
   13554:	9b03      	ldr	r3, [sp, #12]
   13556:	9307      	str	r3, [sp, #28]
   13558:	9b04      	ldr	r3, [sp, #16]
   1355a:	9303      	str	r3, [sp, #12]
   1355c:	461f      	mov	r7, r3
   1355e:	9308      	str	r3, [sp, #32]
   13560:	f7ff b9fe 	b.w	12960 <_vfiprintf_r+0x260>
   13564:	2101      	movs	r1, #1
   13566:	4618      	mov	r0, r3
   13568:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1356c:	f7ff bb13 	b.w	12b96 <_vfiprintf_r+0x496>
   13570:	f850 3b04 	ldr.w	r3, [r0], #4
   13574:	9007      	str	r0, [sp, #28]
   13576:	4622      	mov	r2, r4
   13578:	b2db      	uxtb	r3, r3
   1357a:	e6b6      	b.n	132ea <_vfiprintf_r+0xbea>
   1357c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13580:	9207      	str	r2, [sp, #28]
   13582:	17da      	asrs	r2, r3, #31
   13584:	4611      	mov	r1, r2
   13586:	f7ff b9ca 	b.w	1291e <_vfiprintf_r+0x21e>
   1358a:	f851 3b04 	ldr.w	r3, [r1], #4
   1358e:	9107      	str	r1, [sp, #28]
   13590:	4602      	mov	r2, r0
   13592:	b2db      	uxtb	r3, r3
   13594:	f7ff ba27 	b.w	129e6 <_vfiprintf_r+0x2e6>
   13598:	2301      	movs	r3, #1
   1359a:	931c      	str	r3, [sp, #112]	; 0x70
   1359c:	2101      	movs	r1, #1
   1359e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   135a2:	931b      	str	r3, [sp, #108]	; 0x6c
   135a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   135a8:	460b      	mov	r3, r1
   135aa:	f7ff bacd 	b.w	12b48 <_vfiprintf_r+0x448>
   135ae:	9b07      	ldr	r3, [sp, #28]
   135b0:	9905      	ldr	r1, [sp, #20]
   135b2:	f853 2b04 	ldr.w	r2, [r3], #4
   135b6:	9307      	str	r3, [sp, #28]
   135b8:	8011      	strh	r1, [r2, #0]
   135ba:	f7ff b8ec 	b.w	12796 <_vfiprintf_r+0x96>
   135be:	1c59      	adds	r1, r3, #1
   135c0:	4658      	mov	r0, fp
   135c2:	f7fd fa63 	bl	10a8c <_malloc_r>
   135c6:	4604      	mov	r4, r0
   135c8:	2800      	cmp	r0, #0
   135ca:	d03c      	beq.n	13646 <_vfiprintf_r+0xf46>
   135cc:	9008      	str	r0, [sp, #32]
   135ce:	e795      	b.n	134fc <_vfiprintf_r+0xdfc>
   135d0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   135d2:	f7fd fe5f 	bl	11294 <__retarget_lock_release_recursive>
   135d6:	f7ff b9e9 	b.w	129ac <_vfiprintf_r+0x2ac>
   135da:	9b03      	ldr	r3, [sp, #12]
   135dc:	9307      	str	r3, [sp, #28]
   135de:	e9cd 7703 	strd	r7, r7, [sp, #12]
   135e2:	9f08      	ldr	r7, [sp, #32]
   135e4:	f7ff b9bc 	b.w	12960 <_vfiprintf_r+0x260>
   135e8:	9819      	ldr	r0, [sp, #100]	; 0x64
   135ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   135ec:	3001      	adds	r0, #1
   135ee:	e545      	b.n	1307c <_vfiprintf_r+0x97c>
   135f0:	9b03      	ldr	r3, [sp, #12]
   135f2:	9307      	str	r3, [sp, #28]
   135f4:	4620      	mov	r0, r4
   135f6:	f7fe fbe3 	bl	11dc0 <strlen>
   135fa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   135fe:	462f      	mov	r7, r5
   13600:	9004      	str	r0, [sp, #16]
   13602:	9303      	str	r3, [sp, #12]
   13604:	9508      	str	r5, [sp, #32]
   13606:	f7ff b9ab 	b.w	12960 <_vfiprintf_r+0x260>
   1360a:	ee18 1a10 	vmov	r1, s16
   1360e:	aa18      	add	r2, sp, #96	; 0x60
   13610:	4658      	mov	r0, fp
   13612:	f7ff f839 	bl	12688 <__sprint_r.part.0>
   13616:	2800      	cmp	r0, #0
   13618:	f43f aa36 	beq.w	12a88 <_vfiprintf_r+0x388>
   1361c:	f7ff ba4d 	b.w	12aba <_vfiprintf_r+0x3ba>
   13620:	9819      	ldr	r0, [sp, #100]	; 0x64
   13622:	3001      	adds	r0, #1
   13624:	e57a      	b.n	1311c <_vfiprintf_r+0xa1c>
   13626:	468c      	mov	ip, r1
   13628:	e46e      	b.n	12f08 <_vfiprintf_r+0x808>
   1362a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1362c:	07d9      	lsls	r1, r3, #31
   1362e:	d405      	bmi.n	1363c <_vfiprintf_r+0xf3c>
   13630:	89ab      	ldrh	r3, [r5, #12]
   13632:	059a      	lsls	r2, r3, #22
   13634:	d402      	bmi.n	1363c <_vfiprintf_r+0xf3c>
   13636:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13638:	f7fd fe2c 	bl	11294 <__retarget_lock_release_recursive>
   1363c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13640:	9305      	str	r3, [sp, #20]
   13642:	f7ff ba49 	b.w	12ad8 <_vfiprintf_r+0x3d8>
   13646:	ee18 2a10 	vmov	r2, s16
   1364a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1364e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13652:	8193      	strh	r3, [r2, #12]
   13654:	f7ff ba35 	b.w	12ac2 <_vfiprintf_r+0x3c2>
   13658:	9c07      	ldr	r4, [sp, #28]
   1365a:	9704      	str	r7, [sp, #16]
   1365c:	e746      	b.n	134ec <_vfiprintf_r+0xdec>
   1365e:	9b07      	ldr	r3, [sp, #28]
   13660:	f898 1001 	ldrb.w	r1, [r8, #1]
   13664:	f853 7b04 	ldr.w	r7, [r3], #4
   13668:	9307      	str	r3, [sp, #28]
   1366a:	4690      	mov	r8, r2
   1366c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13670:	f7ff b8b9 	b.w	127e6 <_vfiprintf_r+0xe6>
   13674:	ee18 2a10 	vmov	r2, s16
   13678:	8993      	ldrh	r3, [r2, #12]
   1367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1367e:	8193      	strh	r3, [r2, #12]
   13680:	f7ff ba15 	b.w	12aae <_vfiprintf_r+0x3ae>
   13684:	cccccccd 	.word	0xcccccccd
   13688:	200026b0 	.word	0x200026b0

0001368c <__sbprintf>:
   1368c:	b570      	push	{r4, r5, r6, lr}
   1368e:	460c      	mov	r4, r1
   13690:	8989      	ldrh	r1, [r1, #12]
   13692:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13696:	f021 0102 	bic.w	r1, r1, #2
   1369a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1369e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   136a0:	911b      	str	r1, [sp, #108]	; 0x6c
   136a2:	89e1      	ldrh	r1, [r4, #14]
   136a4:	f8ad 1016 	strh.w	r1, [sp, #22]
   136a8:	69e1      	ldr	r1, [r4, #28]
   136aa:	9109      	str	r1, [sp, #36]	; 0x24
   136ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   136ae:	910b      	str	r1, [sp, #44]	; 0x2c
   136b0:	a91c      	add	r1, sp, #112	; 0x70
   136b2:	9102      	str	r1, [sp, #8]
   136b4:	9106      	str	r1, [sp, #24]
   136b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   136ba:	4606      	mov	r6, r0
   136bc:	9104      	str	r1, [sp, #16]
   136be:	9107      	str	r1, [sp, #28]
   136c0:	a818      	add	r0, sp, #96	; 0x60
   136c2:	2100      	movs	r1, #0
   136c4:	e9cd 3200 	strd	r3, r2, [sp]
   136c8:	9108      	str	r1, [sp, #32]
   136ca:	f7fd fddd 	bl	11288 <__retarget_lock_init_recursive>
   136ce:	e9dd 3200 	ldrd	r3, r2, [sp]
   136d2:	a902      	add	r1, sp, #8
   136d4:	4630      	mov	r0, r6
   136d6:	f7ff f813 	bl	12700 <_vfiprintf_r>
   136da:	1e05      	subs	r5, r0, #0
   136dc:	db07      	blt.n	136ee <__sbprintf+0x62>
   136de:	a902      	add	r1, sp, #8
   136e0:	4630      	mov	r0, r6
   136e2:	f001 f9e1 	bl	14aa8 <_fflush_r>
   136e6:	2800      	cmp	r0, #0
   136e8:	bf18      	it	ne
   136ea:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   136ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   136f2:	065b      	lsls	r3, r3, #25
   136f4:	d503      	bpl.n	136fe <__sbprintf+0x72>
   136f6:	89a3      	ldrh	r3, [r4, #12]
   136f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   136fc:	81a3      	strh	r3, [r4, #12]
   136fe:	9818      	ldr	r0, [sp, #96]	; 0x60
   13700:	f7fd fdc4 	bl	1128c <__retarget_lock_close_recursive>
   13704:	4628      	mov	r0, r5
   13706:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1370a:	bd70      	pop	{r4, r5, r6, pc}

0001370c <__register_exitproc>:
   1370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13710:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13790 <__register_exitproc+0x84>
   13714:	4606      	mov	r6, r0
   13716:	f8da 0000 	ldr.w	r0, [sl]
   1371a:	4698      	mov	r8, r3
   1371c:	460f      	mov	r7, r1
   1371e:	4691      	mov	r9, r2
   13720:	f7fd fdb6 	bl	11290 <__retarget_lock_acquire_recursive>
   13724:	4b18      	ldr	r3, [pc, #96]	; (13788 <__register_exitproc+0x7c>)
   13726:	681c      	ldr	r4, [r3, #0]
   13728:	b324      	cbz	r4, 13774 <__register_exitproc+0x68>
   1372a:	6865      	ldr	r5, [r4, #4]
   1372c:	2d1f      	cmp	r5, #31
   1372e:	dc24      	bgt.n	1377a <__register_exitproc+0x6e>
   13730:	b95e      	cbnz	r6, 1374a <__register_exitproc+0x3e>
   13732:	1c6b      	adds	r3, r5, #1
   13734:	3502      	adds	r5, #2
   13736:	f8da 0000 	ldr.w	r0, [sl]
   1373a:	6063      	str	r3, [r4, #4]
   1373c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13740:	f7fd fda8 	bl	11294 <__retarget_lock_release_recursive>
   13744:	2000      	movs	r0, #0
   13746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1374a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1374e:	2301      	movs	r3, #1
   13750:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13754:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13758:	40ab      	lsls	r3, r5
   1375a:	431a      	orrs	r2, r3
   1375c:	2e02      	cmp	r6, #2
   1375e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   13762:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13766:	d1e4      	bne.n	13732 <__register_exitproc+0x26>
   13768:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1376c:	431a      	orrs	r2, r3
   1376e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   13772:	e7de      	b.n	13732 <__register_exitproc+0x26>
   13774:	4c05      	ldr	r4, [pc, #20]	; (1378c <__register_exitproc+0x80>)
   13776:	601c      	str	r4, [r3, #0]
   13778:	e7d7      	b.n	1372a <__register_exitproc+0x1e>
   1377a:	f8da 0000 	ldr.w	r0, [sl]
   1377e:	f7fd fd89 	bl	11294 <__retarget_lock_release_recursive>
   13782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13786:	e7de      	b.n	13746 <__register_exitproc+0x3a>
   13788:	20004bb8 	.word	0x20004bb8
   1378c:	20004bbc 	.word	0x20004bbc
   13790:	200031f8 	.word	0x200031f8

00013794 <__ascii_mbtowc>:
   13794:	b082      	sub	sp, #8
   13796:	b149      	cbz	r1, 137ac <__ascii_mbtowc+0x18>
   13798:	b15a      	cbz	r2, 137b2 <__ascii_mbtowc+0x1e>
   1379a:	b16b      	cbz	r3, 137b8 <__ascii_mbtowc+0x24>
   1379c:	7813      	ldrb	r3, [r2, #0]
   1379e:	600b      	str	r3, [r1, #0]
   137a0:	7812      	ldrb	r2, [r2, #0]
   137a2:	1e10      	subs	r0, r2, #0
   137a4:	bf18      	it	ne
   137a6:	2001      	movne	r0, #1
   137a8:	b002      	add	sp, #8
   137aa:	4770      	bx	lr
   137ac:	a901      	add	r1, sp, #4
   137ae:	2a00      	cmp	r2, #0
   137b0:	d1f3      	bne.n	1379a <__ascii_mbtowc+0x6>
   137b2:	4610      	mov	r0, r2
   137b4:	b002      	add	sp, #8
   137b6:	4770      	bx	lr
   137b8:	f06f 0001 	mvn.w	r0, #1
   137bc:	e7f4      	b.n	137a8 <__ascii_mbtowc+0x14>
   137be:	bf00      	nop

000137c0 <fcvtbuf>:
   137c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   137c4:	460e      	mov	r6, r1
   137c6:	4926      	ldr	r1, [pc, #152]	; (13860 <fcvtbuf+0xa0>)
   137c8:	b087      	sub	sp, #28
   137ca:	680f      	ldr	r7, [r1, #0]
   137cc:	4604      	mov	r4, r0
   137ce:	4690      	mov	r8, r2
   137d0:	461d      	mov	r5, r3
   137d2:	b353      	cbz	r3, 1382a <fcvtbuf+0x6a>
   137d4:	aa05      	add	r2, sp, #20
   137d6:	4633      	mov	r3, r6
   137d8:	9201      	str	r2, [sp, #4]
   137da:	2103      	movs	r1, #3
   137dc:	4622      	mov	r2, r4
   137de:	f8cd 8000 	str.w	r8, [sp]
   137e2:	4638      	mov	r0, r7
   137e4:	f000 fa40 	bl	13c68 <_dtoa_r>
   137e8:	9b05      	ldr	r3, [sp, #20]
   137ea:	6832      	ldr	r2, [r6, #0]
   137ec:	4298      	cmp	r0, r3
   137ee:	4684      	mov	ip, r0
   137f0:	f1c2 0200 	rsb	r2, r2, #0
   137f4:	4629      	mov	r1, r5
   137f6:	d209      	bcs.n	1380c <fcvtbuf+0x4c>
   137f8:	1a10      	subs	r0, r2, r0
   137fa:	f81c 3b01 	ldrb.w	r3, [ip], #1
   137fe:	f801 3b01 	strb.w	r3, [r1], #1
   13802:	9b05      	ldr	r3, [sp, #20]
   13804:	4563      	cmp	r3, ip
   13806:	eb00 020c 	add.w	r2, r0, ip
   1380a:	d8f6      	bhi.n	137fa <fcvtbuf+0x3a>
   1380c:	4294      	cmp	r4, r2
   1380e:	dd24      	ble.n	1385a <fcvtbuf+0x9a>
   13810:	1aa2      	subs	r2, r4, r2
   13812:	440a      	add	r2, r1
   13814:	2330      	movs	r3, #48	; 0x30
   13816:	f801 3b01 	strb.w	r3, [r1], #1
   1381a:	4291      	cmp	r1, r2
   1381c:	d1fb      	bne.n	13816 <fcvtbuf+0x56>
   1381e:	2300      	movs	r3, #0
   13820:	7013      	strb	r3, [r2, #0]
   13822:	4628      	mov	r0, r5
   13824:	b007      	add	sp, #28
   13826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1382a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1382c:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13830:	429a      	cmp	r2, r3
   13832:	dd01      	ble.n	13838 <fcvtbuf+0x78>
   13834:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13836:	e7cd      	b.n	137d4 <fcvtbuf+0x14>
   13838:	f100 0924 	add.w	r9, r0, #36	; 0x24
   1383c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1383e:	464a      	mov	r2, r9
   13840:	4638      	mov	r0, r7
   13842:	ed8d 0b02 	vstr	d0, [sp, #8]
   13846:	f7fe fb29 	bl	11e9c <_realloc_r>
   1384a:	4605      	mov	r5, r0
   1384c:	2800      	cmp	r0, #0
   1384e:	d0e8      	beq.n	13822 <fcvtbuf+0x62>
   13850:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13854:	ed9d 0b02 	vldr	d0, [sp, #8]
   13858:	e7bc      	b.n	137d4 <fcvtbuf+0x14>
   1385a:	460a      	mov	r2, r1
   1385c:	e7df      	b.n	1381e <fcvtbuf+0x5e>
   1385e:	bf00      	nop
   13860:	2000378c 	.word	0x2000378c

00013864 <_wcrtomb_r>:
   13864:	b570      	push	{r4, r5, r6, lr}
   13866:	4605      	mov	r5, r0
   13868:	b084      	sub	sp, #16
   1386a:	b15b      	cbz	r3, 13884 <_wcrtomb_r+0x20>
   1386c:	461c      	mov	r4, r3
   1386e:	b169      	cbz	r1, 1388c <_wcrtomb_r+0x28>
   13870:	4b0e      	ldr	r3, [pc, #56]	; (138ac <_wcrtomb_r+0x48>)
   13872:	4628      	mov	r0, r5
   13874:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13878:	4623      	mov	r3, r4
   1387a:	47b0      	blx	r6
   1387c:	1c43      	adds	r3, r0, #1
   1387e:	d00f      	beq.n	138a0 <_wcrtomb_r+0x3c>
   13880:	b004      	add	sp, #16
   13882:	bd70      	pop	{r4, r5, r6, pc}
   13884:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13888:	2900      	cmp	r1, #0
   1388a:	d1f1      	bne.n	13870 <_wcrtomb_r+0xc>
   1388c:	4a07      	ldr	r2, [pc, #28]	; (138ac <_wcrtomb_r+0x48>)
   1388e:	4623      	mov	r3, r4
   13890:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13894:	4628      	mov	r0, r5
   13896:	460a      	mov	r2, r1
   13898:	a901      	add	r1, sp, #4
   1389a:	47b0      	blx	r6
   1389c:	1c43      	adds	r3, r0, #1
   1389e:	d1ef      	bne.n	13880 <_wcrtomb_r+0x1c>
   138a0:	2200      	movs	r2, #0
   138a2:	238a      	movs	r3, #138	; 0x8a
   138a4:	6022      	str	r2, [r4, #0]
   138a6:	602b      	str	r3, [r5, #0]
   138a8:	b004      	add	sp, #16
   138aa:	bd70      	pop	{r4, r5, r6, pc}
   138ac:	20003204 	.word	0x20003204

000138b0 <_localeconv_r>:
   138b0:	4800      	ldr	r0, [pc, #0]	; (138b4 <_localeconv_r+0x4>)
   138b2:	4770      	bx	lr
   138b4:	200032f4 	.word	0x200032f4

000138b8 <_fclose_r>:
   138b8:	b570      	push	{r4, r5, r6, lr}
   138ba:	2900      	cmp	r1, #0
   138bc:	d04b      	beq.n	13956 <_fclose_r+0x9e>
   138be:	4606      	mov	r6, r0
   138c0:	460c      	mov	r4, r1
   138c2:	b110      	cbz	r0, 138ca <_fclose_r+0x12>
   138c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   138c6:	2b00      	cmp	r3, #0
   138c8:	d048      	beq.n	1395c <_fclose_r+0xa4>
   138ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   138cc:	07d8      	lsls	r0, r3, #31
   138ce:	d534      	bpl.n	1393a <_fclose_r+0x82>
   138d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   138d4:	2b00      	cmp	r3, #0
   138d6:	d03e      	beq.n	13956 <_fclose_r+0x9e>
   138d8:	4621      	mov	r1, r4
   138da:	4630      	mov	r0, r6
   138dc:	f001 f84c 	bl	14978 <__sflush_r>
   138e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   138e2:	4605      	mov	r5, r0
   138e4:	b133      	cbz	r3, 138f4 <_fclose_r+0x3c>
   138e6:	69e1      	ldr	r1, [r4, #28]
   138e8:	4630      	mov	r0, r6
   138ea:	4798      	blx	r3
   138ec:	2800      	cmp	r0, #0
   138ee:	bfb8      	it	lt
   138f0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   138f4:	89a3      	ldrh	r3, [r4, #12]
   138f6:	061a      	lsls	r2, r3, #24
   138f8:	d43c      	bmi.n	13974 <_fclose_r+0xbc>
   138fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   138fc:	b141      	cbz	r1, 13910 <_fclose_r+0x58>
   138fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13902:	4299      	cmp	r1, r3
   13904:	d002      	beq.n	1390c <_fclose_r+0x54>
   13906:	4630      	mov	r0, r6
   13908:	f7fe fd04 	bl	12314 <_free_r>
   1390c:	2300      	movs	r3, #0
   1390e:	6323      	str	r3, [r4, #48]	; 0x30
   13910:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13912:	b121      	cbz	r1, 1391e <_fclose_r+0x66>
   13914:	4630      	mov	r0, r6
   13916:	f7fe fcfd 	bl	12314 <_free_r>
   1391a:	2300      	movs	r3, #0
   1391c:	6463      	str	r3, [r4, #68]	; 0x44
   1391e:	f7fe f9e3 	bl	11ce8 <__sfp_lock_acquire>
   13922:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13924:	2200      	movs	r2, #0
   13926:	07db      	lsls	r3, r3, #31
   13928:	81a2      	strh	r2, [r4, #12]
   1392a:	d51f      	bpl.n	1396c <_fclose_r+0xb4>
   1392c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1392e:	f7fd fcad 	bl	1128c <__retarget_lock_close_recursive>
   13932:	f7fe f9df 	bl	11cf4 <__sfp_lock_release>
   13936:	4628      	mov	r0, r5
   13938:	bd70      	pop	{r4, r5, r6, pc}
   1393a:	89a3      	ldrh	r3, [r4, #12]
   1393c:	0599      	lsls	r1, r3, #22
   1393e:	d4cb      	bmi.n	138d8 <_fclose_r+0x20>
   13940:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13942:	f7fd fca5 	bl	11290 <__retarget_lock_acquire_recursive>
   13946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1394a:	2b00      	cmp	r3, #0
   1394c:	d1c4      	bne.n	138d8 <_fclose_r+0x20>
   1394e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   13950:	f015 0501 	ands.w	r5, r5, #1
   13954:	d005      	beq.n	13962 <_fclose_r+0xaa>
   13956:	2500      	movs	r5, #0
   13958:	4628      	mov	r0, r5
   1395a:	bd70      	pop	{r4, r5, r6, pc}
   1395c:	f7fe f9a6 	bl	11cac <__sinit>
   13960:	e7b3      	b.n	138ca <_fclose_r+0x12>
   13962:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13964:	f7fd fc96 	bl	11294 <__retarget_lock_release_recursive>
   13968:	4628      	mov	r0, r5
   1396a:	bd70      	pop	{r4, r5, r6, pc}
   1396c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1396e:	f7fd fc91 	bl	11294 <__retarget_lock_release_recursive>
   13972:	e7db      	b.n	1392c <_fclose_r+0x74>
   13974:	6921      	ldr	r1, [r4, #16]
   13976:	4630      	mov	r0, r6
   13978:	f7fe fccc 	bl	12314 <_free_r>
   1397c:	e7bd      	b.n	138fa <_fclose_r+0x42>
   1397e:	bf00      	nop

00013980 <__swsetup_r>:
   13980:	b538      	push	{r3, r4, r5, lr}
   13982:	4b31      	ldr	r3, [pc, #196]	; (13a48 <__swsetup_r+0xc8>)
   13984:	681b      	ldr	r3, [r3, #0]
   13986:	4605      	mov	r5, r0
   13988:	460c      	mov	r4, r1
   1398a:	b113      	cbz	r3, 13992 <__swsetup_r+0x12>
   1398c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1398e:	2a00      	cmp	r2, #0
   13990:	d04e      	beq.n	13a30 <__swsetup_r+0xb0>
   13992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13996:	0718      	lsls	r0, r3, #28
   13998:	b29a      	uxth	r2, r3
   1399a:	d51c      	bpl.n	139d6 <__swsetup_r+0x56>
   1399c:	6921      	ldr	r1, [r4, #16]
   1399e:	b329      	cbz	r1, 139ec <__swsetup_r+0x6c>
   139a0:	f012 0001 	ands.w	r0, r2, #1
   139a4:	d007      	beq.n	139b6 <__swsetup_r+0x36>
   139a6:	2000      	movs	r0, #0
   139a8:	60a0      	str	r0, [r4, #8]
   139aa:	6960      	ldr	r0, [r4, #20]
   139ac:	4240      	negs	r0, r0
   139ae:	61a0      	str	r0, [r4, #24]
   139b0:	b139      	cbz	r1, 139c2 <__swsetup_r+0x42>
   139b2:	2000      	movs	r0, #0
   139b4:	bd38      	pop	{r3, r4, r5, pc}
   139b6:	0795      	lsls	r5, r2, #30
   139b8:	bf58      	it	pl
   139ba:	6960      	ldrpl	r0, [r4, #20]
   139bc:	60a0      	str	r0, [r4, #8]
   139be:	2900      	cmp	r1, #0
   139c0:	d1f7      	bne.n	139b2 <__swsetup_r+0x32>
   139c2:	0612      	lsls	r2, r2, #24
   139c4:	bf58      	it	pl
   139c6:	4608      	movpl	r0, r1
   139c8:	d5f4      	bpl.n	139b4 <__swsetup_r+0x34>
   139ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139ce:	81a3      	strh	r3, [r4, #12]
   139d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   139d4:	bd38      	pop	{r3, r4, r5, pc}
   139d6:	06d1      	lsls	r1, r2, #27
   139d8:	d52e      	bpl.n	13a38 <__swsetup_r+0xb8>
   139da:	0752      	lsls	r2, r2, #29
   139dc:	d414      	bmi.n	13a08 <__swsetup_r+0x88>
   139de:	6921      	ldr	r1, [r4, #16]
   139e0:	f043 0308 	orr.w	r3, r3, #8
   139e4:	81a3      	strh	r3, [r4, #12]
   139e6:	b29a      	uxth	r2, r3
   139e8:	2900      	cmp	r1, #0
   139ea:	d1d9      	bne.n	139a0 <__swsetup_r+0x20>
   139ec:	f402 7020 	and.w	r0, r2, #640	; 0x280
   139f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   139f4:	d0d4      	beq.n	139a0 <__swsetup_r+0x20>
   139f6:	4621      	mov	r1, r4
   139f8:	4628      	mov	r0, r5
   139fa:	f000 f827 	bl	13a4c <__smakebuf_r>
   139fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a02:	6921      	ldr	r1, [r4, #16]
   13a04:	b29a      	uxth	r2, r3
   13a06:	e7cb      	b.n	139a0 <__swsetup_r+0x20>
   13a08:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13a0a:	b151      	cbz	r1, 13a22 <__swsetup_r+0xa2>
   13a0c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13a10:	4291      	cmp	r1, r2
   13a12:	d004      	beq.n	13a1e <__swsetup_r+0x9e>
   13a14:	4628      	mov	r0, r5
   13a16:	f7fe fc7d 	bl	12314 <_free_r>
   13a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13a1e:	2200      	movs	r2, #0
   13a20:	6322      	str	r2, [r4, #48]	; 0x30
   13a22:	6921      	ldr	r1, [r4, #16]
   13a24:	2200      	movs	r2, #0
   13a26:	e9c4 1200 	strd	r1, r2, [r4]
   13a2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13a2e:	e7d7      	b.n	139e0 <__swsetup_r+0x60>
   13a30:	4618      	mov	r0, r3
   13a32:	f7fe f93b 	bl	11cac <__sinit>
   13a36:	e7ac      	b.n	13992 <__swsetup_r+0x12>
   13a38:	2209      	movs	r2, #9
   13a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a3e:	602a      	str	r2, [r5, #0]
   13a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13a44:	81a3      	strh	r3, [r4, #12]
   13a46:	bd38      	pop	{r3, r4, r5, pc}
   13a48:	2000378c 	.word	0x2000378c

00013a4c <__smakebuf_r>:
   13a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a50:	898b      	ldrh	r3, [r1, #12]
   13a52:	460c      	mov	r4, r1
   13a54:	0799      	lsls	r1, r3, #30
   13a56:	b096      	sub	sp, #88	; 0x58
   13a58:	d508      	bpl.n	13a6c <__smakebuf_r+0x20>
   13a5a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13a5e:	2201      	movs	r2, #1
   13a60:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13a64:	6023      	str	r3, [r4, #0]
   13a66:	b016      	add	sp, #88	; 0x58
   13a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13a70:	2900      	cmp	r1, #0
   13a72:	4606      	mov	r6, r0
   13a74:	db25      	blt.n	13ac2 <__smakebuf_r+0x76>
   13a76:	466a      	mov	r2, sp
   13a78:	f001 f840 	bl	14afc <_fstat_r>
   13a7c:	2800      	cmp	r0, #0
   13a7e:	db1f      	blt.n	13ac0 <__smakebuf_r+0x74>
   13a80:	9d01      	ldr	r5, [sp, #4]
   13a82:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13a86:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13a8a:	fab5 f585 	clz	r5, r5
   13a8e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13a92:	096d      	lsrs	r5, r5, #5
   13a94:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13a98:	4641      	mov	r1, r8
   13a9a:	4630      	mov	r0, r6
   13a9c:	f7fc fff6 	bl	10a8c <_malloc_r>
   13aa0:	b1e0      	cbz	r0, 13adc <__smakebuf_r+0x90>
   13aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13aa6:	f8c4 8014 	str.w	r8, [r4, #20]
   13aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13aae:	6020      	str	r0, [r4, #0]
   13ab0:	6120      	str	r0, [r4, #16]
   13ab2:	81a3      	strh	r3, [r4, #12]
   13ab4:	bb35      	cbnz	r5, 13b04 <__smakebuf_r+0xb8>
   13ab6:	433b      	orrs	r3, r7
   13ab8:	81a3      	strh	r3, [r4, #12]
   13aba:	b016      	add	sp, #88	; 0x58
   13abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ac0:	89a3      	ldrh	r3, [r4, #12]
   13ac2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13ac6:	d019      	beq.n	13afc <__smakebuf_r+0xb0>
   13ac8:	f04f 0840 	mov.w	r8, #64	; 0x40
   13acc:	2500      	movs	r5, #0
   13ace:	4641      	mov	r1, r8
   13ad0:	4630      	mov	r0, r6
   13ad2:	462f      	mov	r7, r5
   13ad4:	f7fc ffda 	bl	10a8c <_malloc_r>
   13ad8:	2800      	cmp	r0, #0
   13ada:	d1e2      	bne.n	13aa2 <__smakebuf_r+0x56>
   13adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13ae0:	059a      	lsls	r2, r3, #22
   13ae2:	d4c0      	bmi.n	13a66 <__smakebuf_r+0x1a>
   13ae4:	f023 0303 	bic.w	r3, r3, #3
   13ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13aec:	f043 0302 	orr.w	r3, r3, #2
   13af0:	2101      	movs	r1, #1
   13af2:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13af6:	81a3      	strh	r3, [r4, #12]
   13af8:	6022      	str	r2, [r4, #0]
   13afa:	e7b4      	b.n	13a66 <__smakebuf_r+0x1a>
   13afc:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13b00:	462f      	mov	r7, r5
   13b02:	e7c9      	b.n	13a98 <__smakebuf_r+0x4c>
   13b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13b08:	4630      	mov	r0, r6
   13b0a:	f001 f80d 	bl	14b28 <_isatty_r>
   13b0e:	b910      	cbnz	r0, 13b16 <__smakebuf_r+0xca>
   13b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13b14:	e7cf      	b.n	13ab6 <__smakebuf_r+0x6a>
   13b16:	89a3      	ldrh	r3, [r4, #12]
   13b18:	f023 0303 	bic.w	r3, r3, #3
   13b1c:	f043 0301 	orr.w	r3, r3, #1
   13b20:	b21b      	sxth	r3, r3
   13b22:	e7c8      	b.n	13ab6 <__smakebuf_r+0x6a>

00013b24 <_wcsrtombs_r>:
   13b24:	b510      	push	{r4, lr}
   13b26:	b082      	sub	sp, #8
   13b28:	9c04      	ldr	r4, [sp, #16]
   13b2a:	e9cd 3400 	strd	r3, r4, [sp]
   13b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b32:	f001 fb17 	bl	15164 <_wcsnrtombs_r>
   13b36:	b002      	add	sp, #8
   13b38:	bd10      	pop	{r4, pc}
   13b3a:	bf00      	nop

00013b3c <quorem>:
   13b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b40:	6903      	ldr	r3, [r0, #16]
   13b42:	690c      	ldr	r4, [r1, #16]
   13b44:	42a3      	cmp	r3, r4
   13b46:	b083      	sub	sp, #12
   13b48:	f2c0 8087 	blt.w	13c5a <quorem+0x11e>
   13b4c:	3c01      	subs	r4, #1
   13b4e:	f101 0514 	add.w	r5, r1, #20
   13b52:	00a3      	lsls	r3, r4, #2
   13b54:	f100 0814 	add.w	r8, r0, #20
   13b58:	9300      	str	r3, [sp, #0]
   13b5a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13b5e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13b62:	3301      	adds	r3, #1
   13b64:	4681      	mov	r9, r0
   13b66:	429a      	cmp	r2, r3
   13b68:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   13b6c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   13b70:	9001      	str	r0, [sp, #4]
   13b72:	fbb2 f6f3 	udiv	r6, r2, r3
   13b76:	d33b      	bcc.n	13bf0 <quorem+0xb4>
   13b78:	f04f 0c00 	mov.w	ip, #0
   13b7c:	46ae      	mov	lr, r5
   13b7e:	4640      	mov	r0, r8
   13b80:	46e2      	mov	sl, ip
   13b82:	4663      	mov	r3, ip
   13b84:	f85e bb04 	ldr.w	fp, [lr], #4
   13b88:	6802      	ldr	r2, [r0, #0]
   13b8a:	fa1f fc8b 	uxth.w	ip, fp
   13b8e:	fb06 330c 	mla	r3, r6, ip, r3
   13b92:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13b96:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   13b9a:	fb06 cc0b 	mla	ip, r6, fp, ip
   13b9e:	b29b      	uxth	r3, r3
   13ba0:	ebaa 0303 	sub.w	r3, sl, r3
   13ba4:	fa1f fa8c 	uxth.w	sl, ip
   13ba8:	fa13 f382 	uxtah	r3, r3, r2
   13bac:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   13bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   13bb4:	b29b      	uxth	r3, r3
   13bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13bba:	4577      	cmp	r7, lr
   13bbc:	f840 3b04 	str.w	r3, [r0], #4
   13bc0:	ea4f 4a22 	mov.w	sl, r2, asr #16
   13bc4:	ea4f 431c 	mov.w	r3, ip, lsr #16
   13bc8:	d2dc      	bcs.n	13b84 <quorem+0x48>
   13bca:	9b00      	ldr	r3, [sp, #0]
   13bcc:	f858 3003 	ldr.w	r3, [r8, r3]
   13bd0:	b973      	cbnz	r3, 13bf0 <quorem+0xb4>
   13bd2:	9b01      	ldr	r3, [sp, #4]
   13bd4:	3b04      	subs	r3, #4
   13bd6:	4598      	cmp	r8, r3
   13bd8:	d304      	bcc.n	13be4 <quorem+0xa8>
   13bda:	e007      	b.n	13bec <quorem+0xb0>
   13bdc:	4598      	cmp	r8, r3
   13bde:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   13be2:	d203      	bcs.n	13bec <quorem+0xb0>
   13be4:	f853 2904 	ldr.w	r2, [r3], #-4
   13be8:	2a00      	cmp	r2, #0
   13bea:	d0f7      	beq.n	13bdc <quorem+0xa0>
   13bec:	f8c9 4010 	str.w	r4, [r9, #16]
   13bf0:	4648      	mov	r0, r9
   13bf2:	f7fd fe47 	bl	11884 <__mcmp>
   13bf6:	2800      	cmp	r0, #0
   13bf8:	db2b      	blt.n	13c52 <quorem+0x116>
   13bfa:	3601      	adds	r6, #1
   13bfc:	4641      	mov	r1, r8
   13bfe:	2300      	movs	r3, #0
   13c00:	f855 0b04 	ldr.w	r0, [r5], #4
   13c04:	f8d1 c000 	ldr.w	ip, [r1]
   13c08:	b282      	uxth	r2, r0
   13c0a:	1a9a      	subs	r2, r3, r2
   13c0c:	0c03      	lsrs	r3, r0, #16
   13c0e:	fa12 f28c 	uxtah	r2, r2, ip
   13c12:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   13c16:	eb03 4322 	add.w	r3, r3, r2, asr #16
   13c1a:	b292      	uxth	r2, r2
   13c1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   13c20:	42af      	cmp	r7, r5
   13c22:	f841 2b04 	str.w	r2, [r1], #4
   13c26:	ea4f 4323 	mov.w	r3, r3, asr #16
   13c2a:	d2e9      	bcs.n	13c00 <quorem+0xc4>
   13c2c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13c30:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   13c34:	b96a      	cbnz	r2, 13c52 <quorem+0x116>
   13c36:	3b04      	subs	r3, #4
   13c38:	4598      	cmp	r8, r3
   13c3a:	d304      	bcc.n	13c46 <quorem+0x10a>
   13c3c:	e007      	b.n	13c4e <quorem+0x112>
   13c3e:	4598      	cmp	r8, r3
   13c40:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   13c44:	d203      	bcs.n	13c4e <quorem+0x112>
   13c46:	f853 2904 	ldr.w	r2, [r3], #-4
   13c4a:	2a00      	cmp	r2, #0
   13c4c:	d0f7      	beq.n	13c3e <quorem+0x102>
   13c4e:	f8c9 4010 	str.w	r4, [r9, #16]
   13c52:	4630      	mov	r0, r6
   13c54:	b003      	add	sp, #12
   13c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c5a:	2000      	movs	r0, #0
   13c5c:	b003      	add	sp, #12
   13c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c62:	bf00      	nop
   13c64:	0000      	movs	r0, r0
	...

00013c68 <_dtoa_r>:
   13c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c6c:	ed2d 8b02 	vpush	{d8}
   13c70:	b08f      	sub	sp, #60	; 0x3c
   13c72:	ed8d 0b02 	vstr	d0, [sp, #8]
   13c76:	9101      	str	r1, [sp, #4]
   13c78:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13c7a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   13c7c:	9305      	str	r3, [sp, #20]
   13c7e:	ec57 6b10 	vmov	r6, r7, d0
   13c82:	4604      	mov	r4, r0
   13c84:	4693      	mov	fp, r2
   13c86:	b141      	cbz	r1, 13c9a <_dtoa_r+0x32>
   13c88:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   13c8a:	604a      	str	r2, [r1, #4]
   13c8c:	2301      	movs	r3, #1
   13c8e:	4093      	lsls	r3, r2
   13c90:	608b      	str	r3, [r1, #8]
   13c92:	f7fd fb97 	bl	113c4 <_Bfree>
   13c96:	2300      	movs	r3, #0
   13c98:	63a3      	str	r3, [r4, #56]	; 0x38
   13c9a:	f1b7 0800 	subs.w	r8, r7, #0
   13c9e:	bfb4      	ite	lt
   13ca0:	2301      	movlt	r3, #1
   13ca2:	2300      	movge	r3, #0
   13ca4:	602b      	str	r3, [r5, #0]
   13ca6:	4bbe      	ldr	r3, [pc, #760]	; (13fa0 <_dtoa_r+0x338>)
   13ca8:	bfbc      	itt	lt
   13caa:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   13cae:	f8cd 800c 	strlt.w	r8, [sp, #12]
   13cb2:	ea33 0308 	bics.w	r3, r3, r8
   13cb6:	f000 809f 	beq.w	13df8 <_dtoa_r+0x190>
   13cba:	ed9d 8b02 	vldr	d8, [sp, #8]
   13cbe:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13cc6:	d111      	bne.n	13cec <_dtoa_r+0x84>
   13cc8:	9a05      	ldr	r2, [sp, #20]
   13cca:	2301      	movs	r3, #1
   13ccc:	6013      	str	r3, [r2, #0]
   13cce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13cd0:	2b00      	cmp	r3, #0
   13cd2:	f000 823f 	beq.w	14154 <_dtoa_r+0x4ec>
   13cd6:	4bb3      	ldr	r3, [pc, #716]	; (13fa4 <_dtoa_r+0x33c>)
   13cd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13cda:	6013      	str	r3, [r2, #0]
   13cdc:	3b01      	subs	r3, #1
   13cde:	9300      	str	r3, [sp, #0]
   13ce0:	9800      	ldr	r0, [sp, #0]
   13ce2:	b00f      	add	sp, #60	; 0x3c
   13ce4:	ecbd 8b02 	vpop	{d8}
   13ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cec:	aa0c      	add	r2, sp, #48	; 0x30
   13cee:	a90d      	add	r1, sp, #52	; 0x34
   13cf0:	4620      	mov	r0, r4
   13cf2:	eeb0 0b48 	vmov.f64	d0, d8
   13cf6:	f7fd fe91 	bl	11a1c <__d2b>
   13cfa:	ea5f 5318 	movs.w	r3, r8, lsr #20
   13cfe:	4605      	mov	r5, r0
   13d00:	f040 8092 	bne.w	13e28 <_dtoa_r+0x1c0>
   13d04:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   13d08:	440b      	add	r3, r1
   13d0a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   13d0e:	2a20      	cmp	r2, #32
   13d10:	f340 82fa 	ble.w	14308 <_dtoa_r+0x6a0>
   13d14:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   13d18:	fa08 f802 	lsl.w	r8, r8, r2
   13d1c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   13d20:	40d6      	lsrs	r6, r2
   13d22:	ea48 0206 	orr.w	r2, r8, r6
   13d26:	ee07 2a10 	vmov	s14, r2
   13d2a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   13d2e:	1e58      	subs	r0, r3, #1
   13d30:	ee17 6a90 	vmov	r6, s15
   13d34:	ec53 2b17 	vmov	r2, r3, d7
   13d38:	f04f 0a01 	mov.w	sl, #1
   13d3c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   13d40:	ed9f 3b91 	vldr	d3, [pc, #580]	; 13f88 <_dtoa_r+0x320>
   13d44:	ed9f 7b92 	vldr	d7, [pc, #584]	; 13f90 <_dtoa_r+0x328>
   13d48:	ed9f 5b93 	vldr	d5, [pc, #588]	; 13f98 <_dtoa_r+0x330>
   13d4c:	ee06 0a90 	vmov	s13, r0
   13d50:	ec43 2b12 	vmov	d2, r2, r3
   13d54:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   13d58:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   13d5c:	ee32 6b46 	vsub.f64	d6, d2, d6
   13d60:	eea6 7b03 	vfma.f64	d7, d6, d3
   13d64:	eea4 7b05 	vfma.f64	d7, d4, d5
   13d68:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   13d6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   13d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13d74:	ee16 7a90 	vmov	r7, s13
   13d78:	d508      	bpl.n	13d8c <_dtoa_r+0x124>
   13d7a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   13d7e:	eeb4 6b47 	vcmp.f64	d6, d7
   13d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13d86:	bf18      	it	ne
   13d88:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   13d8c:	2f16      	cmp	r7, #22
   13d8e:	f200 8145 	bhi.w	1401c <_dtoa_r+0x3b4>
   13d92:	4b85      	ldr	r3, [pc, #532]	; (13fa8 <_dtoa_r+0x340>)
   13d94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   13d98:	ed93 7b00 	vldr	d7, [r3]
   13d9c:	eeb4 8bc7 	vcmpe.f64	d8, d7
   13da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13da4:	d557      	bpl.n	13e56 <_dtoa_r+0x1ee>
   13da6:	1a09      	subs	r1, r1, r0
   13da8:	2300      	movs	r3, #0
   13daa:	f1b1 0801 	subs.w	r8, r1, #1
   13dae:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   13db2:	930a      	str	r3, [sp, #40]	; 0x28
   13db4:	f100 8139 	bmi.w	1402a <_dtoa_r+0x3c2>
   13db8:	2300      	movs	r3, #0
   13dba:	9306      	str	r3, [sp, #24]
   13dbc:	2f00      	cmp	r7, #0
   13dbe:	da52      	bge.n	13e66 <_dtoa_r+0x1fe>
   13dc0:	9b06      	ldr	r3, [sp, #24]
   13dc2:	9704      	str	r7, [sp, #16]
   13dc4:	1bdb      	subs	r3, r3, r7
   13dc6:	9306      	str	r3, [sp, #24]
   13dc8:	427b      	negs	r3, r7
   13dca:	9308      	str	r3, [sp, #32]
   13dcc:	9b01      	ldr	r3, [sp, #4]
   13dce:	2b09      	cmp	r3, #9
   13dd0:	f04f 0700 	mov.w	r7, #0
   13dd4:	d84e      	bhi.n	13e74 <_dtoa_r+0x20c>
   13dd6:	2b05      	cmp	r3, #5
   13dd8:	f340 829d 	ble.w	14316 <_dtoa_r+0x6ae>
   13ddc:	3b04      	subs	r3, #4
   13dde:	9301      	str	r3, [sp, #4]
   13de0:	2600      	movs	r6, #0
   13de2:	9b01      	ldr	r3, [sp, #4]
   13de4:	1e9a      	subs	r2, r3, #2
   13de6:	2a03      	cmp	r2, #3
   13de8:	f200 8125 	bhi.w	14036 <_dtoa_r+0x3ce>
   13dec:	e8df f012 	tbh	[pc, r2, lsl #1]
   13df0:	03a703aa 	.word	0x03a703aa
   13df4:	037e039d 	.word	0x037e039d
   13df8:	9a05      	ldr	r2, [sp, #20]
   13dfa:	f3c8 0813 	ubfx	r8, r8, #0, #20
   13dfe:	f242 730f 	movw	r3, #9999	; 0x270f
   13e02:	ea58 0806 	orrs.w	r8, r8, r6
   13e06:	6013      	str	r3, [r2, #0]
   13e08:	d11e      	bne.n	13e48 <_dtoa_r+0x1e0>
   13e0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	f000 8591 	beq.w	14934 <_dtoa_r+0xccc>
   13e12:	4b66      	ldr	r3, [pc, #408]	; (13fac <_dtoa_r+0x344>)
   13e14:	9300      	str	r3, [sp, #0]
   13e16:	3308      	adds	r3, #8
   13e18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   13e1a:	9800      	ldr	r0, [sp, #0]
   13e1c:	6013      	str	r3, [r2, #0]
   13e1e:	b00f      	add	sp, #60	; 0x3c
   13e20:	ecbd 8b02 	vpop	{d8}
   13e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e28:	ee18 6a90 	vmov	r6, s17
   13e2c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   13e30:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   13e34:	ec53 2b18 	vmov	r2, r3, d8
   13e38:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   13e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e3e:	f04f 0a00 	mov.w	sl, #0
   13e42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   13e46:	e77b      	b.n	13d40 <_dtoa_r+0xd8>
   13e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	f040 833b 	bne.w	144c6 <_dtoa_r+0x85e>
   13e50:	4b57      	ldr	r3, [pc, #348]	; (13fb0 <_dtoa_r+0x348>)
   13e52:	9300      	str	r3, [sp, #0]
   13e54:	e744      	b.n	13ce0 <_dtoa_r+0x78>
   13e56:	1a09      	subs	r1, r1, r0
   13e58:	2300      	movs	r3, #0
   13e5a:	f1b1 0801 	subs.w	r8, r1, #1
   13e5e:	930a      	str	r3, [sp, #40]	; 0x28
   13e60:	f100 80e3 	bmi.w	1402a <_dtoa_r+0x3c2>
   13e64:	9306      	str	r3, [sp, #24]
   13e66:	2300      	movs	r3, #0
   13e68:	9308      	str	r3, [sp, #32]
   13e6a:	9b01      	ldr	r3, [sp, #4]
   13e6c:	9704      	str	r7, [sp, #16]
   13e6e:	2b09      	cmp	r3, #9
   13e70:	44b8      	add	r8, r7
   13e72:	d9b0      	bls.n	13dd6 <_dtoa_r+0x16e>
   13e74:	2300      	movs	r3, #0
   13e76:	2601      	movs	r6, #1
   13e78:	9301      	str	r3, [sp, #4]
   13e7a:	9607      	str	r6, [sp, #28]
   13e7c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   13e80:	469b      	mov	fp, r3
   13e82:	2100      	movs	r1, #0
   13e84:	63e1      	str	r1, [r4, #60]	; 0x3c
   13e86:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   13e8a:	4620      	mov	r0, r4
   13e8c:	f7fd fa74 	bl	11378 <_Balloc>
   13e90:	9000      	str	r0, [sp, #0]
   13e92:	2800      	cmp	r0, #0
   13e94:	f000 8540 	beq.w	14918 <_dtoa_r+0xcb0>
   13e98:	9b00      	ldr	r3, [sp, #0]
   13e9a:	63a3      	str	r3, [r4, #56]	; 0x38
   13e9c:	f1b9 0f0e 	cmp.w	r9, #14
   13ea0:	f200 80dc 	bhi.w	1405c <_dtoa_r+0x3f4>
   13ea4:	2e00      	cmp	r6, #0
   13ea6:	f000 80d9 	beq.w	1405c <_dtoa_r+0x3f4>
   13eaa:	9b04      	ldr	r3, [sp, #16]
   13eac:	2b00      	cmp	r3, #0
   13eae:	f340 83de 	ble.w	1466e <_dtoa_r+0xa06>
   13eb2:	4a3d      	ldr	r2, [pc, #244]	; (13fa8 <_dtoa_r+0x340>)
   13eb4:	f003 010f 	and.w	r1, r3, #15
   13eb8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   13ebc:	ed92 7b00 	vldr	d7, [r2]
   13ec0:	111a      	asrs	r2, r3, #4
   13ec2:	05db      	lsls	r3, r3, #23
   13ec4:	f140 8382 	bpl.w	145cc <_dtoa_r+0x964>
   13ec8:	493a      	ldr	r1, [pc, #232]	; (13fb4 <_dtoa_r+0x34c>)
   13eca:	ed91 6b08 	vldr	d6, [r1, #32]
   13ece:	f002 020f 	and.w	r2, r2, #15
   13ed2:	2003      	movs	r0, #3
   13ed4:	ee88 5b06 	vdiv.f64	d5, d8, d6
   13ed8:	b15a      	cbz	r2, 13ef2 <_dtoa_r+0x28a>
   13eda:	4936      	ldr	r1, [pc, #216]	; (13fb4 <_dtoa_r+0x34c>)
   13edc:	07d6      	lsls	r6, r2, #31
   13ede:	d504      	bpl.n	13eea <_dtoa_r+0x282>
   13ee0:	ed91 6b00 	vldr	d6, [r1]
   13ee4:	3001      	adds	r0, #1
   13ee6:	ee27 7b06 	vmul.f64	d7, d7, d6
   13eea:	1052      	asrs	r2, r2, #1
   13eec:	f101 0108 	add.w	r1, r1, #8
   13ef0:	d1f4      	bne.n	13edc <_dtoa_r+0x274>
   13ef2:	ee85 6b07 	vdiv.f64	d6, d5, d7
   13ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ef8:	b13b      	cbz	r3, 13f0a <_dtoa_r+0x2a2>
   13efa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   13efe:	eeb4 6bc7 	vcmpe.f64	d6, d7
   13f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f06:	f100 84ae 	bmi.w	14866 <_dtoa_r+0xbfe>
   13f0a:	ee07 0a90 	vmov	s15, r0
   13f0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   13f12:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   13f16:	eea5 7b06 	vfma.f64	d7, d5, d6
   13f1a:	ee17 2a90 	vmov	r2, s15
   13f1e:	ec51 0b17 	vmov	r0, r1, d7
   13f22:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   13f26:	f1b9 0f00 	cmp.w	r9, #0
   13f2a:	f000 8388 	beq.w	1463e <_dtoa_r+0x9d6>
   13f2e:	9e04      	ldr	r6, [sp, #16]
   13f30:	464a      	mov	r2, r9
   13f32:	9b07      	ldr	r3, [sp, #28]
   13f34:	2b00      	cmp	r3, #0
   13f36:	f000 8447 	beq.w	147c8 <_dtoa_r+0xb60>
   13f3a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   13f3e:	4b1a      	ldr	r3, [pc, #104]	; (13fa8 <_dtoa_r+0x340>)
   13f40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   13f44:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   13f48:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   13f4c:	ee36 7b47 	vsub.f64	d7, d6, d7
   13f50:	ed1c 6b02 	vldr	d6, [ip, #-8]
   13f54:	ee83 5b06 	vdiv.f64	d5, d3, d6
   13f58:	ec41 0b16 	vmov	d6, r0, r1
   13f5c:	ee14 0a90 	vmov	r0, s9
   13f60:	ee35 5b46 	vsub.f64	d5, d5, d6
   13f64:	9900      	ldr	r1, [sp, #0]
   13f66:	eeb4 5bc7 	vcmpe.f64	d5, d7
   13f6a:	3030      	adds	r0, #48	; 0x30
   13f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f70:	f801 0b01 	strb.w	r0, [r1], #1
   13f74:	f300 84ac 	bgt.w	148d0 <_dtoa_r+0xc68>
   13f78:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   13f7c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   13f80:	f04f 0c00 	mov.w	ip, #0
   13f84:	e031      	b.n	13fea <_dtoa_r+0x382>
   13f86:	bf00      	nop
   13f88:	636f4361 	.word	0x636f4361
   13f8c:	3fd287a7 	.word	0x3fd287a7
   13f90:	8b60c8b3 	.word	0x8b60c8b3
   13f94:	3fc68a28 	.word	0x3fc68a28
   13f98:	509f79fb 	.word	0x509f79fb
   13f9c:	3fd34413 	.word	0x3fd34413
   13fa0:	7ff00000 	.word	0x7ff00000
   13fa4:	20002a59 	.word	0x20002a59
   13fa8:	20000b58 	.word	0x20000b58
   13fac:	2000261c 	.word	0x2000261c
   13fb0:	20002628 	.word	0x20002628
   13fb4:	20000b30 	.word	0x20000b30
   13fb8:	f10c 0c01 	add.w	ip, ip, #1
   13fbc:	4594      	cmp	ip, r2
   13fbe:	da4d      	bge.n	1405c <_dtoa_r+0x3f4>
   13fc0:	ee27 7b04 	vmul.f64	d7, d7, d4
   13fc4:	ee25 5b04 	vmul.f64	d5, d5, d4
   13fc8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   13fcc:	ee16 3a90 	vmov	r3, s13
   13fd0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   13fd4:	3330      	adds	r3, #48	; 0x30
   13fd6:	ee37 7b43 	vsub.f64	d7, d7, d3
   13fda:	eeb4 7bc5 	vcmpe.f64	d7, d5
   13fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13fe2:	f801 3b01 	strb.w	r3, [r1], #1
   13fe6:	f100 8473 	bmi.w	148d0 <_dtoa_r+0xc68>
   13fea:	ee32 6b47 	vsub.f64	d6, d2, d7
   13fee:	eeb4 6bc5 	vcmpe.f64	d6, d5
   13ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13ff6:	d5df      	bpl.n	13fb8 <_dtoa_r+0x350>
   13ff8:	9a00      	ldr	r2, [sp, #0]
   13ffa:	9604      	str	r6, [sp, #16]
   13ffc:	e002      	b.n	14004 <_dtoa_r+0x39c>
   13ffe:	428a      	cmp	r2, r1
   14000:	f000 8450 	beq.w	148a4 <_dtoa_r+0xc3c>
   14004:	4689      	mov	r9, r1
   14006:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1400a:	2b39      	cmp	r3, #57	; 0x39
   1400c:	d0f7      	beq.n	13ffe <_dtoa_r+0x396>
   1400e:	3301      	adds	r3, #1
   14010:	b2db      	uxtb	r3, r3
   14012:	700b      	strb	r3, [r1, #0]
   14014:	9b04      	ldr	r3, [sp, #16]
   14016:	3301      	adds	r3, #1
   14018:	9304      	str	r3, [sp, #16]
   1401a:	e155      	b.n	142c8 <_dtoa_r+0x660>
   1401c:	1a09      	subs	r1, r1, r0
   1401e:	2301      	movs	r3, #1
   14020:	f1b1 0801 	subs.w	r8, r1, #1
   14024:	930a      	str	r3, [sp, #40]	; 0x28
   14026:	f57f aec7 	bpl.w	13db8 <_dtoa_r+0x150>
   1402a:	f1c1 0301 	rsb	r3, r1, #1
   1402e:	9306      	str	r3, [sp, #24]
   14030:	f04f 0800 	mov.w	r8, #0
   14034:	e6c2      	b.n	13dbc <_dtoa_r+0x154>
   14036:	2600      	movs	r6, #0
   14038:	63e6      	str	r6, [r4, #60]	; 0x3c
   1403a:	4631      	mov	r1, r6
   1403c:	4620      	mov	r0, r4
   1403e:	f7fd f99b 	bl	11378 <_Balloc>
   14042:	9000      	str	r0, [sp, #0]
   14044:	2800      	cmp	r0, #0
   14046:	f000 8467 	beq.w	14918 <_dtoa_r+0xcb0>
   1404a:	9b00      	ldr	r3, [sp, #0]
   1404c:	63a3      	str	r3, [r4, #56]	; 0x38
   1404e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14052:	930b      	str	r3, [sp, #44]	; 0x2c
   14054:	4699      	mov	r9, r3
   14056:	2301      	movs	r3, #1
   14058:	46b3      	mov	fp, r6
   1405a:	9307      	str	r3, [sp, #28]
   1405c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1405e:	2a00      	cmp	r2, #0
   14060:	db55      	blt.n	1410e <_dtoa_r+0x4a6>
   14062:	9904      	ldr	r1, [sp, #16]
   14064:	290e      	cmp	r1, #14
   14066:	dc52      	bgt.n	1410e <_dtoa_r+0x4a6>
   14068:	4bb7      	ldr	r3, [pc, #732]	; (14348 <_dtoa_r+0x6e0>)
   1406a:	f1bb 0f00 	cmp.w	fp, #0
   1406e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   14072:	ed93 6b00 	vldr	d6, [r3]
   14076:	da15      	bge.n	140a4 <_dtoa_r+0x43c>
   14078:	f1b9 0f00 	cmp.w	r9, #0
   1407c:	dc12      	bgt.n	140a4 <_dtoa_r+0x43c>
   1407e:	f040 82f2 	bne.w	14666 <_dtoa_r+0x9fe>
   14082:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14086:	ee26 7b07 	vmul.f64	d7, d6, d7
   1408a:	eeb4 8bc7 	vcmpe.f64	d8, d7
   1408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14092:	46ca      	mov	sl, r9
   14094:	464e      	mov	r6, r9
   14096:	f200 826d 	bhi.w	14574 <_dtoa_r+0x90c>
   1409a:	f8dd 8000 	ldr.w	r8, [sp]
   1409e:	ea6f 0b0b 	mvn.w	fp, fp
   140a2:	e270      	b.n	14586 <_dtoa_r+0x91e>
   140a4:	ee88 7b06 	vdiv.f64	d7, d8, d6
   140a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   140ac:	9900      	ldr	r1, [sp, #0]
   140ae:	ee17 3a10 	vmov	r3, s14
   140b2:	f1b9 0f01 	cmp.w	r9, #1
   140b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   140ba:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   140be:	f801 3b01 	strb.w	r3, [r1], #1
   140c2:	eea5 8b46 	vfms.f64	d8, d5, d6
   140c6:	f000 8334 	beq.w	14732 <_dtoa_r+0xaca>
   140ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   140ce:	2301      	movs	r3, #1
   140d0:	e011      	b.n	140f6 <_dtoa_r+0x48e>
   140d2:	ee88 7b06 	vdiv.f64	d7, d8, d6
   140d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   140da:	3301      	adds	r3, #1
   140dc:	ee17 2a10 	vmov	r2, s14
   140e0:	454b      	cmp	r3, r9
   140e2:	f102 0230 	add.w	r2, r2, #48	; 0x30
   140e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   140ea:	f801 2b01 	strb.w	r2, [r1], #1
   140ee:	eea5 8b46 	vfms.f64	d8, d5, d6
   140f2:	f000 831e 	beq.w	14732 <_dtoa_r+0xaca>
   140f6:	ee28 8b04 	vmul.f64	d8, d8, d4
   140fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
   140fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14102:	d1e6      	bne.n	140d2 <_dtoa_r+0x46a>
   14104:	9b04      	ldr	r3, [sp, #16]
   14106:	3301      	adds	r3, #1
   14108:	9304      	str	r3, [sp, #16]
   1410a:	4689      	mov	r9, r1
   1410c:	e0dc      	b.n	142c8 <_dtoa_r+0x660>
   1410e:	9b07      	ldr	r3, [sp, #28]
   14110:	b343      	cbz	r3, 14164 <_dtoa_r+0x4fc>
   14112:	9b01      	ldr	r3, [sp, #4]
   14114:	2b01      	cmp	r3, #1
   14116:	f340 8276 	ble.w	14606 <_dtoa_r+0x99e>
   1411a:	9b08      	ldr	r3, [sp, #32]
   1411c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   14120:	4553      	cmp	r3, sl
   14122:	f280 823f 	bge.w	145a4 <_dtoa_r+0x93c>
   14126:	9b08      	ldr	r3, [sp, #32]
   14128:	f8cd a020 	str.w	sl, [sp, #32]
   1412c:	ebaa 0203 	sub.w	r2, sl, r3
   14130:	4417      	add	r7, r2
   14132:	f04f 0a00 	mov.w	sl, #0
   14136:	f1b9 0f00 	cmp.w	r9, #0
   1413a:	f2c0 8325 	blt.w	14788 <_dtoa_r+0xb20>
   1413e:	9b06      	ldr	r3, [sp, #24]
   14140:	9309      	str	r3, [sp, #36]	; 0x24
   14142:	444b      	add	r3, r9
   14144:	44c8      	add	r8, r9
   14146:	9306      	str	r3, [sp, #24]
   14148:	2101      	movs	r1, #1
   1414a:	4620      	mov	r0, r4
   1414c:	f7fd f9e6 	bl	1151c <__i2b>
   14150:	4606      	mov	r6, r0
   14152:	e00c      	b.n	1416e <_dtoa_r+0x506>
   14154:	4b7d      	ldr	r3, [pc, #500]	; (1434c <_dtoa_r+0x6e4>)
   14156:	9300      	str	r3, [sp, #0]
   14158:	9800      	ldr	r0, [sp, #0]
   1415a:	b00f      	add	sp, #60	; 0x3c
   1415c:	ecbd 8b02 	vpop	{d8}
   14160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14164:	9b06      	ldr	r3, [sp, #24]
   14166:	f8dd a020 	ldr.w	sl, [sp, #32]
   1416a:	9e07      	ldr	r6, [sp, #28]
   1416c:	9309      	str	r3, [sp, #36]	; 0x24
   1416e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14170:	b16b      	cbz	r3, 1418e <_dtoa_r+0x526>
   14172:	f1b8 0f00 	cmp.w	r8, #0
   14176:	dd0a      	ble.n	1418e <_dtoa_r+0x526>
   14178:	4543      	cmp	r3, r8
   1417a:	9906      	ldr	r1, [sp, #24]
   1417c:	461a      	mov	r2, r3
   1417e:	bfa8      	it	ge
   14180:	4642      	movge	r2, r8
   14182:	1a89      	subs	r1, r1, r2
   14184:	1a9b      	subs	r3, r3, r2
   14186:	9106      	str	r1, [sp, #24]
   14188:	9309      	str	r3, [sp, #36]	; 0x24
   1418a:	eba8 0802 	sub.w	r8, r8, r2
   1418e:	9b08      	ldr	r3, [sp, #32]
   14190:	b163      	cbz	r3, 141ac <_dtoa_r+0x544>
   14192:	9b07      	ldr	r3, [sp, #28]
   14194:	2b00      	cmp	r3, #0
   14196:	f000 82a7 	beq.w	146e8 <_dtoa_r+0xa80>
   1419a:	f1ba 0f00 	cmp.w	sl, #0
   1419e:	f300 8204 	bgt.w	145aa <_dtoa_r+0x942>
   141a2:	9b08      	ldr	r3, [sp, #32]
   141a4:	ebb3 020a 	subs.w	r2, r3, sl
   141a8:	f040 82ff 	bne.w	147aa <_dtoa_r+0xb42>
   141ac:	2101      	movs	r1, #1
   141ae:	4620      	mov	r0, r4
   141b0:	f7fd f9b4 	bl	1151c <__i2b>
   141b4:	2f00      	cmp	r7, #0
   141b6:	4682      	mov	sl, r0
   141b8:	f300 80af 	bgt.w	1431a <_dtoa_r+0x6b2>
   141bc:	9b01      	ldr	r3, [sp, #4]
   141be:	2b01      	cmp	r3, #1
   141c0:	f340 8187 	ble.w	144d2 <_dtoa_r+0x86a>
   141c4:	2300      	movs	r3, #0
   141c6:	9308      	str	r3, [sp, #32]
   141c8:	2001      	movs	r0, #1
   141ca:	2f00      	cmp	r7, #0
   141cc:	f040 80b1 	bne.w	14332 <_dtoa_r+0x6ca>
   141d0:	4440      	add	r0, r8
   141d2:	f010 001f 	ands.w	r0, r0, #31
   141d6:	f000 817a 	beq.w	144ce <_dtoa_r+0x866>
   141da:	f1c0 0220 	rsb	r2, r0, #32
   141de:	2a04      	cmp	r2, #4
   141e0:	f300 8088 	bgt.w	142f4 <_dtoa_r+0x68c>
   141e4:	f040 81f6 	bne.w	145d4 <_dtoa_r+0x96c>
   141e8:	9b06      	ldr	r3, [sp, #24]
   141ea:	2b00      	cmp	r3, #0
   141ec:	dd05      	ble.n	141fa <_dtoa_r+0x592>
   141ee:	4629      	mov	r1, r5
   141f0:	461a      	mov	r2, r3
   141f2:	4620      	mov	r0, r4
   141f4:	f7fd face 	bl	11794 <__lshift>
   141f8:	4605      	mov	r5, r0
   141fa:	f1b8 0f00 	cmp.w	r8, #0
   141fe:	dd05      	ble.n	1420c <_dtoa_r+0x5a4>
   14200:	4651      	mov	r1, sl
   14202:	4642      	mov	r2, r8
   14204:	4620      	mov	r0, r4
   14206:	f7fd fac5 	bl	11794 <__lshift>
   1420a:	4682      	mov	sl, r0
   1420c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1420e:	2b00      	cmp	r3, #0
   14210:	f040 813f 	bne.w	14492 <_dtoa_r+0x82a>
   14214:	f1b9 0f00 	cmp.w	r9, #0
   14218:	f340 8125 	ble.w	14466 <_dtoa_r+0x7fe>
   1421c:	9b07      	ldr	r3, [sp, #28]
   1421e:	2b00      	cmp	r3, #0
   14220:	f040 80a3 	bne.w	1436a <_dtoa_r+0x702>
   14224:	9b04      	ldr	r3, [sp, #16]
   14226:	3301      	adds	r3, #1
   14228:	9304      	str	r3, [sp, #16]
   1422a:	f8dd 8000 	ldr.w	r8, [sp]
   1422e:	2701      	movs	r7, #1
   14230:	e007      	b.n	14242 <_dtoa_r+0x5da>
   14232:	4629      	mov	r1, r5
   14234:	2300      	movs	r3, #0
   14236:	220a      	movs	r2, #10
   14238:	4620      	mov	r0, r4
   1423a:	f7fd f8cd 	bl	113d8 <__multadd>
   1423e:	3701      	adds	r7, #1
   14240:	4605      	mov	r5, r0
   14242:	4651      	mov	r1, sl
   14244:	4628      	mov	r0, r5
   14246:	f7ff fc79 	bl	13b3c <quorem>
   1424a:	45b9      	cmp	r9, r7
   1424c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   14250:	f808 0b01 	strb.w	r0, [r8], #1
   14254:	dced      	bgt.n	14232 <_dtoa_r+0x5ca>
   14256:	f1b9 0f00 	cmp.w	r9, #0
   1425a:	9a00      	ldr	r2, [sp, #0]
   1425c:	bfcc      	ite	gt
   1425e:	46cb      	movgt	fp, r9
   14260:	f04f 0b01 	movle.w	fp, #1
   14264:	4603      	mov	r3, r0
   14266:	4493      	add	fp, r2
   14268:	2700      	movs	r7, #0
   1426a:	4629      	mov	r1, r5
   1426c:	2201      	movs	r2, #1
   1426e:	4620      	mov	r0, r4
   14270:	9301      	str	r3, [sp, #4]
   14272:	f7fd fa8f 	bl	11794 <__lshift>
   14276:	4651      	mov	r1, sl
   14278:	4605      	mov	r5, r0
   1427a:	f7fd fb03 	bl	11884 <__mcmp>
   1427e:	2800      	cmp	r0, #0
   14280:	f340 81af 	ble.w	145e2 <_dtoa_r+0x97a>
   14284:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   14288:	9a00      	ldr	r2, [sp, #0]
   1428a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1428e:	e004      	b.n	1429a <_dtoa_r+0x632>
   14290:	455a      	cmp	r2, fp
   14292:	f000 81b1 	beq.w	145f8 <_dtoa_r+0x990>
   14296:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1429a:	2b39      	cmp	r3, #57	; 0x39
   1429c:	f10b 0901 	add.w	r9, fp, #1
   142a0:	d0f6      	beq.n	14290 <_dtoa_r+0x628>
   142a2:	3301      	adds	r3, #1
   142a4:	f88b 3000 	strb.w	r3, [fp]
   142a8:	4651      	mov	r1, sl
   142aa:	4620      	mov	r0, r4
   142ac:	f7fd f88a 	bl	113c4 <_Bfree>
   142b0:	b156      	cbz	r6, 142c8 <_dtoa_r+0x660>
   142b2:	b12f      	cbz	r7, 142c0 <_dtoa_r+0x658>
   142b4:	42b7      	cmp	r7, r6
   142b6:	d003      	beq.n	142c0 <_dtoa_r+0x658>
   142b8:	4639      	mov	r1, r7
   142ba:	4620      	mov	r0, r4
   142bc:	f7fd f882 	bl	113c4 <_Bfree>
   142c0:	4631      	mov	r1, r6
   142c2:	4620      	mov	r0, r4
   142c4:	f7fd f87e 	bl	113c4 <_Bfree>
   142c8:	4629      	mov	r1, r5
   142ca:	4620      	mov	r0, r4
   142cc:	f7fd f87a 	bl	113c4 <_Bfree>
   142d0:	2300      	movs	r3, #0
   142d2:	f889 3000 	strb.w	r3, [r9]
   142d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   142da:	601a      	str	r2, [r3, #0]
   142dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   142de:	2b00      	cmp	r3, #0
   142e0:	f43f acfe 	beq.w	13ce0 <_dtoa_r+0x78>
   142e4:	9800      	ldr	r0, [sp, #0]
   142e6:	f8c3 9000 	str.w	r9, [r3]
   142ea:	b00f      	add	sp, #60	; 0x3c
   142ec:	ecbd 8b02 	vpop	{d8}
   142f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f4:	f1c0 001c 	rsb	r0, r0, #28
   142f8:	9b06      	ldr	r3, [sp, #24]
   142fa:	4403      	add	r3, r0
   142fc:	9306      	str	r3, [sp, #24]
   142fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14300:	4403      	add	r3, r0
   14302:	9309      	str	r3, [sp, #36]	; 0x24
   14304:	4480      	add	r8, r0
   14306:	e76f      	b.n	141e8 <_dtoa_r+0x580>
   14308:	f1c2 0220 	rsb	r2, r2, #32
   1430c:	fa06 f202 	lsl.w	r2, r6, r2
   14310:	ee07 2a10 	vmov	s14, r2
   14314:	e509      	b.n	13d2a <_dtoa_r+0xc2>
   14316:	2601      	movs	r6, #1
   14318:	e563      	b.n	13de2 <_dtoa_r+0x17a>
   1431a:	4601      	mov	r1, r0
   1431c:	463a      	mov	r2, r7
   1431e:	4620      	mov	r0, r4
   14320:	f7fd f9d8 	bl	116d4 <__pow5mult>
   14324:	9b01      	ldr	r3, [sp, #4]
   14326:	2b01      	cmp	r3, #1
   14328:	4682      	mov	sl, r0
   1432a:	f340 81c5 	ble.w	146b8 <_dtoa_r+0xa50>
   1432e:	2300      	movs	r3, #0
   14330:	9308      	str	r3, [sp, #32]
   14332:	f8da 2010 	ldr.w	r2, [sl, #16]
   14336:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   1433a:	6910      	ldr	r0, [r2, #16]
   1433c:	f7fd f89e 	bl	1147c <__hi0bits>
   14340:	f1c0 0020 	rsb	r0, r0, #32
   14344:	e744      	b.n	141d0 <_dtoa_r+0x568>
   14346:	bf00      	nop
   14348:	20000b58 	.word	0x20000b58
   1434c:	20002a58 	.word	0x20002a58
   14350:	4631      	mov	r1, r6
   14352:	2300      	movs	r3, #0
   14354:	220a      	movs	r2, #10
   14356:	4620      	mov	r0, r4
   14358:	f7fd f83e 	bl	113d8 <__multadd>
   1435c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1435e:	2b00      	cmp	r3, #0
   14360:	4606      	mov	r6, r0
   14362:	f340 82ce 	ble.w	14902 <_dtoa_r+0xc9a>
   14366:	9704      	str	r7, [sp, #16]
   14368:	4699      	mov	r9, r3
   1436a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1436c:	2b00      	cmp	r3, #0
   1436e:	dd05      	ble.n	1437c <_dtoa_r+0x714>
   14370:	4631      	mov	r1, r6
   14372:	461a      	mov	r2, r3
   14374:	4620      	mov	r0, r4
   14376:	f7fd fa0d 	bl	11794 <__lshift>
   1437a:	4606      	mov	r6, r0
   1437c:	9b08      	ldr	r3, [sp, #32]
   1437e:	2b00      	cmp	r3, #0
   14380:	f040 81eb 	bne.w	1475a <_dtoa_r+0xaf2>
   14384:	46b0      	mov	r8, r6
   14386:	9b02      	ldr	r3, [sp, #8]
   14388:	9f00      	ldr	r7, [sp, #0]
   1438a:	f003 0201 	and.w	r2, r3, #1
   1438e:	1e7b      	subs	r3, r7, #1
   14390:	444b      	add	r3, r9
   14392:	9308      	str	r3, [sp, #32]
   14394:	9b01      	ldr	r3, [sp, #4]
   14396:	920a      	str	r2, [sp, #40]	; 0x28
   14398:	4313      	orrs	r3, r2
   1439a:	9309      	str	r3, [sp, #36]	; 0x24
   1439c:	4651      	mov	r1, sl
   1439e:	4628      	mov	r0, r5
   143a0:	f7ff fbcc 	bl	13b3c <quorem>
   143a4:	4631      	mov	r1, r6
   143a6:	4683      	mov	fp, r0
   143a8:	4628      	mov	r0, r5
   143aa:	f7fd fa6b 	bl	11884 <__mcmp>
   143ae:	4642      	mov	r2, r8
   143b0:	4651      	mov	r1, sl
   143b2:	4681      	mov	r9, r0
   143b4:	4620      	mov	r0, r4
   143b6:	f7fd fa87 	bl	118c8 <__mdiff>
   143ba:	68c2      	ldr	r2, [r0, #12]
   143bc:	4601      	mov	r1, r0
   143be:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   143c2:	2a00      	cmp	r2, #0
   143c4:	d142      	bne.n	1444c <_dtoa_r+0x7e4>
   143c6:	e9cd 0306 	strd	r0, r3, [sp, #24]
   143ca:	4628      	mov	r0, r5
   143cc:	f7fd fa5a 	bl	11884 <__mcmp>
   143d0:	9906      	ldr	r1, [sp, #24]
   143d2:	9002      	str	r0, [sp, #8]
   143d4:	4620      	mov	r0, r4
   143d6:	f7fc fff5 	bl	113c4 <_Bfree>
   143da:	9a02      	ldr	r2, [sp, #8]
   143dc:	9b07      	ldr	r3, [sp, #28]
   143de:	b91a      	cbnz	r2, 143e8 <_dtoa_r+0x780>
   143e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   143e2:	2900      	cmp	r1, #0
   143e4:	f000 827e 	beq.w	148e4 <_dtoa_r+0xc7c>
   143e8:	f1b9 0f00 	cmp.w	r9, #0
   143ec:	f2c0 8183 	blt.w	146f6 <_dtoa_r+0xa8e>
   143f0:	9901      	ldr	r1, [sp, #4]
   143f2:	ea49 0901 	orr.w	r9, r9, r1
   143f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   143f8:	ea51 0909 	orrs.w	r9, r1, r9
   143fc:	f000 817b 	beq.w	146f6 <_dtoa_r+0xa8e>
   14400:	2a00      	cmp	r2, #0
   14402:	f300 81c6 	bgt.w	14792 <_dtoa_r+0xb2a>
   14406:	9a08      	ldr	r2, [sp, #32]
   14408:	703b      	strb	r3, [r7, #0]
   1440a:	f107 0901 	add.w	r9, r7, #1
   1440e:	4297      	cmp	r7, r2
   14410:	46cb      	mov	fp, r9
   14412:	f000 81c4 	beq.w	1479e <_dtoa_r+0xb36>
   14416:	4629      	mov	r1, r5
   14418:	2300      	movs	r3, #0
   1441a:	220a      	movs	r2, #10
   1441c:	4620      	mov	r0, r4
   1441e:	f7fc ffdb 	bl	113d8 <__multadd>
   14422:	4546      	cmp	r6, r8
   14424:	4605      	mov	r5, r0
   14426:	4631      	mov	r1, r6
   14428:	f04f 0300 	mov.w	r3, #0
   1442c:	f04f 020a 	mov.w	r2, #10
   14430:	4620      	mov	r0, r4
   14432:	d012      	beq.n	1445a <_dtoa_r+0x7f2>
   14434:	f7fc ffd0 	bl	113d8 <__multadd>
   14438:	4641      	mov	r1, r8
   1443a:	4606      	mov	r6, r0
   1443c:	2300      	movs	r3, #0
   1443e:	220a      	movs	r2, #10
   14440:	4620      	mov	r0, r4
   14442:	f7fc ffc9 	bl	113d8 <__multadd>
   14446:	464f      	mov	r7, r9
   14448:	4680      	mov	r8, r0
   1444a:	e7a7      	b.n	1439c <_dtoa_r+0x734>
   1444c:	4620      	mov	r0, r4
   1444e:	9302      	str	r3, [sp, #8]
   14450:	f7fc ffb8 	bl	113c4 <_Bfree>
   14454:	9b02      	ldr	r3, [sp, #8]
   14456:	2201      	movs	r2, #1
   14458:	e7c6      	b.n	143e8 <_dtoa_r+0x780>
   1445a:	f7fc ffbd 	bl	113d8 <__multadd>
   1445e:	464f      	mov	r7, r9
   14460:	4606      	mov	r6, r0
   14462:	4680      	mov	r8, r0
   14464:	e79a      	b.n	1439c <_dtoa_r+0x734>
   14466:	9b01      	ldr	r3, [sp, #4]
   14468:	2b02      	cmp	r3, #2
   1446a:	dc71      	bgt.n	14550 <_dtoa_r+0x8e8>
   1446c:	9b07      	ldr	r3, [sp, #28]
   1446e:	2b00      	cmp	r3, #0
   14470:	f47f af7b 	bne.w	1436a <_dtoa_r+0x702>
   14474:	9b04      	ldr	r3, [sp, #16]
   14476:	4651      	mov	r1, sl
   14478:	3301      	adds	r3, #1
   1447a:	4628      	mov	r0, r5
   1447c:	9304      	str	r3, [sp, #16]
   1447e:	f7ff fb5d 	bl	13b3c <quorem>
   14482:	f8dd b000 	ldr.w	fp, [sp]
   14486:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1448a:	f80b 3b01 	strb.w	r3, [fp], #1
   1448e:	2700      	movs	r7, #0
   14490:	e6eb      	b.n	1426a <_dtoa_r+0x602>
   14492:	4651      	mov	r1, sl
   14494:	4628      	mov	r0, r5
   14496:	f7fd f9f5 	bl	11884 <__mcmp>
   1449a:	2800      	cmp	r0, #0
   1449c:	f6bf aeba 	bge.w	14214 <_dtoa_r+0x5ac>
   144a0:	4629      	mov	r1, r5
   144a2:	2300      	movs	r3, #0
   144a4:	220a      	movs	r2, #10
   144a6:	4620      	mov	r0, r4
   144a8:	f7fc ff96 	bl	113d8 <__multadd>
   144ac:	9b04      	ldr	r3, [sp, #16]
   144ae:	1e5f      	subs	r7, r3, #1
   144b0:	9b07      	ldr	r3, [sp, #28]
   144b2:	4605      	mov	r5, r0
   144b4:	2b00      	cmp	r3, #0
   144b6:	f47f af4b 	bne.w	14350 <_dtoa_r+0x6e8>
   144ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   144bc:	2b00      	cmp	r3, #0
   144be:	f340 8218 	ble.w	148f2 <_dtoa_r+0xc8a>
   144c2:	4699      	mov	r9, r3
   144c4:	e6b1      	b.n	1422a <_dtoa_r+0x5c2>
   144c6:	4bbc      	ldr	r3, [pc, #752]	; (147b8 <_dtoa_r+0xb50>)
   144c8:	9300      	str	r3, [sp, #0]
   144ca:	3303      	adds	r3, #3
   144cc:	e4a4      	b.n	13e18 <_dtoa_r+0x1b0>
   144ce:	201c      	movs	r0, #28
   144d0:	e712      	b.n	142f8 <_dtoa_r+0x690>
   144d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   144d6:	2800      	cmp	r0, #0
   144d8:	f47f ae74 	bne.w	141c4 <_dtoa_r+0x55c>
   144dc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   144e0:	2a00      	cmp	r2, #0
   144e2:	f000 80f4 	beq.w	146ce <_dtoa_r+0xa66>
   144e6:	9b02      	ldr	r3, [sp, #8]
   144e8:	9308      	str	r3, [sp, #32]
   144ea:	e66d      	b.n	141c8 <_dtoa_r+0x560>
   144ec:	2301      	movs	r3, #1
   144ee:	9307      	str	r3, [sp, #28]
   144f0:	9b04      	ldr	r3, [sp, #16]
   144f2:	445b      	add	r3, fp
   144f4:	f103 0901 	add.w	r9, r3, #1
   144f8:	f1b9 0f01 	cmp.w	r9, #1
   144fc:	46cc      	mov	ip, r9
   144fe:	930b      	str	r3, [sp, #44]	; 0x2c
   14500:	bfb8      	it	lt
   14502:	f04f 0c01 	movlt.w	ip, #1
   14506:	2100      	movs	r1, #0
   14508:	f1bc 0f17 	cmp.w	ip, #23
   1450c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1450e:	f77f acbc 	ble.w	13e8a <_dtoa_r+0x222>
   14512:	2001      	movs	r0, #1
   14514:	2204      	movs	r2, #4
   14516:	0052      	lsls	r2, r2, #1
   14518:	f102 0314 	add.w	r3, r2, #20
   1451c:	4563      	cmp	r3, ip
   1451e:	4601      	mov	r1, r0
   14520:	f100 0001 	add.w	r0, r0, #1
   14524:	d9f7      	bls.n	14516 <_dtoa_r+0x8ae>
   14526:	63e1      	str	r1, [r4, #60]	; 0x3c
   14528:	e4af      	b.n	13e8a <_dtoa_r+0x222>
   1452a:	2301      	movs	r3, #1
   1452c:	9307      	str	r3, [sp, #28]
   1452e:	f1bb 0f00 	cmp.w	fp, #0
   14532:	dd52      	ble.n	145da <_dtoa_r+0x972>
   14534:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   14538:	46d9      	mov	r9, fp
   1453a:	46dc      	mov	ip, fp
   1453c:	e7e3      	b.n	14506 <_dtoa_r+0x89e>
   1453e:	2300      	movs	r3, #0
   14540:	9307      	str	r3, [sp, #28]
   14542:	e7d5      	b.n	144f0 <_dtoa_r+0x888>
   14544:	2300      	movs	r3, #0
   14546:	9307      	str	r3, [sp, #28]
   14548:	e7f1      	b.n	1452e <_dtoa_r+0x8c6>
   1454a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1454e:	9704      	str	r7, [sp, #16]
   14550:	f1b9 0f00 	cmp.w	r9, #0
   14554:	f47f ada1 	bne.w	1409a <_dtoa_r+0x432>
   14558:	4651      	mov	r1, sl
   1455a:	464b      	mov	r3, r9
   1455c:	2205      	movs	r2, #5
   1455e:	4620      	mov	r0, r4
   14560:	f7fc ff3a 	bl	113d8 <__multadd>
   14564:	4601      	mov	r1, r0
   14566:	4682      	mov	sl, r0
   14568:	4628      	mov	r0, r5
   1456a:	f7fd f98b 	bl	11884 <__mcmp>
   1456e:	2800      	cmp	r0, #0
   14570:	f77f ad93 	ble.w	1409a <_dtoa_r+0x432>
   14574:	9b04      	ldr	r3, [sp, #16]
   14576:	f103 0b01 	add.w	fp, r3, #1
   1457a:	9b00      	ldr	r3, [sp, #0]
   1457c:	2231      	movs	r2, #49	; 0x31
   1457e:	4698      	mov	r8, r3
   14580:	f803 2b01 	strb.w	r2, [r3], #1
   14584:	9300      	str	r3, [sp, #0]
   14586:	4651      	mov	r1, sl
   14588:	4620      	mov	r0, r4
   1458a:	f7fc ff1b 	bl	113c4 <_Bfree>
   1458e:	f10b 0301 	add.w	r3, fp, #1
   14592:	f8dd 9000 	ldr.w	r9, [sp]
   14596:	9304      	str	r3, [sp, #16]
   14598:	f8cd 8000 	str.w	r8, [sp]
   1459c:	2e00      	cmp	r6, #0
   1459e:	f47f ae8f 	bne.w	142c0 <_dtoa_r+0x658>
   145a2:	e691      	b.n	142c8 <_dtoa_r+0x660>
   145a4:	eba3 0a0a 	sub.w	sl, r3, sl
   145a8:	e5c5      	b.n	14136 <_dtoa_r+0x4ce>
   145aa:	4631      	mov	r1, r6
   145ac:	4652      	mov	r2, sl
   145ae:	4620      	mov	r0, r4
   145b0:	f7fd f890 	bl	116d4 <__pow5mult>
   145b4:	462a      	mov	r2, r5
   145b6:	4601      	mov	r1, r0
   145b8:	4606      	mov	r6, r0
   145ba:	4620      	mov	r0, r4
   145bc:	f7fc ffdc 	bl	11578 <__multiply>
   145c0:	4629      	mov	r1, r5
   145c2:	4605      	mov	r5, r0
   145c4:	4620      	mov	r0, r4
   145c6:	f7fc fefd 	bl	113c4 <_Bfree>
   145ca:	e5ea      	b.n	141a2 <_dtoa_r+0x53a>
   145cc:	2002      	movs	r0, #2
   145ce:	eeb0 5b48 	vmov.f64	d5, d8
   145d2:	e481      	b.n	13ed8 <_dtoa_r+0x270>
   145d4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   145d8:	e68e      	b.n	142f8 <_dtoa_r+0x690>
   145da:	f04f 0b01 	mov.w	fp, #1
   145de:	46d9      	mov	r9, fp
   145e0:	e44f      	b.n	13e82 <_dtoa_r+0x21a>
   145e2:	d103      	bne.n	145ec <_dtoa_r+0x984>
   145e4:	9b01      	ldr	r3, [sp, #4]
   145e6:	07db      	lsls	r3, r3, #31
   145e8:	f53f ae4c 	bmi.w	14284 <_dtoa_r+0x61c>
   145ec:	46d9      	mov	r9, fp
   145ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   145f2:	2b30      	cmp	r3, #48	; 0x30
   145f4:	d0fa      	beq.n	145ec <_dtoa_r+0x984>
   145f6:	e657      	b.n	142a8 <_dtoa_r+0x640>
   145f8:	9b04      	ldr	r3, [sp, #16]
   145fa:	9a00      	ldr	r2, [sp, #0]
   145fc:	3301      	adds	r3, #1
   145fe:	9304      	str	r3, [sp, #16]
   14600:	2331      	movs	r3, #49	; 0x31
   14602:	7013      	strb	r3, [r2, #0]
   14604:	e650      	b.n	142a8 <_dtoa_r+0x640>
   14606:	f1ba 0f00 	cmp.w	sl, #0
   1460a:	f000 8123 	beq.w	14854 <_dtoa_r+0xbec>
   1460e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   14612:	9b06      	ldr	r3, [sp, #24]
   14614:	9309      	str	r3, [sp, #36]	; 0x24
   14616:	4413      	add	r3, r2
   14618:	f8dd a020 	ldr.w	sl, [sp, #32]
   1461c:	9306      	str	r3, [sp, #24]
   1461e:	4490      	add	r8, r2
   14620:	e592      	b.n	14148 <_dtoa_r+0x4e0>
   14622:	ee07 0a90 	vmov	s15, r0
   14626:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   1462a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1462e:	eea6 5b07 	vfma.f64	d5, d6, d7
   14632:	ee15 2a90 	vmov	r2, s11
   14636:	ec51 0b15 	vmov	r0, r1, d5
   1463a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1463e:	ec41 0b15 	vmov	d5, r0, r1
   14642:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14646:	ee36 7b47 	vsub.f64	d7, d6, d7
   1464a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14652:	f300 8137 	bgt.w	148c4 <_dtoa_r+0xc5c>
   14656:	eeb1 5b45 	vneg.f64	d5, d5
   1465a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1465e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14662:	f57f acfb 	bpl.w	1405c <_dtoa_r+0x3f4>
   14666:	f04f 0a00 	mov.w	sl, #0
   1466a:	4656      	mov	r6, sl
   1466c:	e515      	b.n	1409a <_dtoa_r+0x432>
   1466e:	f000 80f5 	beq.w	1485c <_dtoa_r+0xbf4>
   14672:	9b04      	ldr	r3, [sp, #16]
   14674:	4951      	ldr	r1, [pc, #324]	; (147bc <_dtoa_r+0xb54>)
   14676:	425a      	negs	r2, r3
   14678:	f002 000f 	and.w	r0, r2, #15
   1467c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   14680:	ed91 6b00 	vldr	d6, [r1]
   14684:	1112      	asrs	r2, r2, #4
   14686:	ee28 6b06 	vmul.f64	d6, d8, d6
   1468a:	f000 8142 	beq.w	14912 <_dtoa_r+0xcaa>
   1468e:	eeb0 7b46 	vmov.f64	d7, d6
   14692:	494b      	ldr	r1, [pc, #300]	; (147c0 <_dtoa_r+0xb58>)
   14694:	2600      	movs	r6, #0
   14696:	2002      	movs	r0, #2
   14698:	07d3      	lsls	r3, r2, #31
   1469a:	d505      	bpl.n	146a8 <_dtoa_r+0xa40>
   1469c:	ed91 5b00 	vldr	d5, [r1]
   146a0:	3001      	adds	r0, #1
   146a2:	2601      	movs	r6, #1
   146a4:	ee27 7b05 	vmul.f64	d7, d7, d5
   146a8:	1052      	asrs	r2, r2, #1
   146aa:	f101 0108 	add.w	r1, r1, #8
   146ae:	d1f3      	bne.n	14698 <_dtoa_r+0xa30>
   146b0:	2e00      	cmp	r6, #0
   146b2:	fe06 6b07 	vseleq.f64	d6, d6, d7
   146b6:	e41e      	b.n	13ef6 <_dtoa_r+0x28e>
   146b8:	9b02      	ldr	r3, [sp, #8]
   146ba:	2b00      	cmp	r3, #0
   146bc:	f47f ae37 	bne.w	1432e <_dtoa_r+0x6c6>
   146c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   146c4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   146c8:	2a00      	cmp	r2, #0
   146ca:	f040 8137 	bne.w	1493c <_dtoa_r+0xcd4>
   146ce:	4a3d      	ldr	r2, [pc, #244]	; (147c4 <_dtoa_r+0xb5c>)
   146d0:	400a      	ands	r2, r1
   146d2:	2a00      	cmp	r2, #0
   146d4:	f000 80fa 	beq.w	148cc <_dtoa_r+0xc64>
   146d8:	9b06      	ldr	r3, [sp, #24]
   146da:	3301      	adds	r3, #1
   146dc:	9306      	str	r3, [sp, #24]
   146de:	2301      	movs	r3, #1
   146e0:	f108 0801 	add.w	r8, r8, #1
   146e4:	9308      	str	r3, [sp, #32]
   146e6:	e56f      	b.n	141c8 <_dtoa_r+0x560>
   146e8:	4629      	mov	r1, r5
   146ea:	9a08      	ldr	r2, [sp, #32]
   146ec:	4620      	mov	r0, r4
   146ee:	f7fc fff1 	bl	116d4 <__pow5mult>
   146f2:	4605      	mov	r5, r0
   146f4:	e55a      	b.n	141ac <_dtoa_r+0x544>
   146f6:	2a00      	cmp	r2, #0
   146f8:	dd12      	ble.n	14720 <_dtoa_r+0xab8>
   146fa:	4629      	mov	r1, r5
   146fc:	2201      	movs	r2, #1
   146fe:	4620      	mov	r0, r4
   14700:	9301      	str	r3, [sp, #4]
   14702:	f7fd f847 	bl	11794 <__lshift>
   14706:	4651      	mov	r1, sl
   14708:	4605      	mov	r5, r0
   1470a:	f7fd f8bb 	bl	11884 <__mcmp>
   1470e:	2800      	cmp	r0, #0
   14710:	9b01      	ldr	r3, [sp, #4]
   14712:	f340 80e1 	ble.w	148d8 <_dtoa_r+0xc70>
   14716:	2b39      	cmp	r3, #57	; 0x39
   14718:	f000 80ca 	beq.w	148b0 <_dtoa_r+0xc48>
   1471c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   14720:	46b9      	mov	r9, r7
   14722:	f809 3b01 	strb.w	r3, [r9], #1
   14726:	9b04      	ldr	r3, [sp, #16]
   14728:	3301      	adds	r3, #1
   1472a:	4637      	mov	r7, r6
   1472c:	9304      	str	r3, [sp, #16]
   1472e:	4646      	mov	r6, r8
   14730:	e5ba      	b.n	142a8 <_dtoa_r+0x640>
   14732:	ee38 8b08 	vadd.f64	d8, d8, d8
   14736:	eeb4 8bc6 	vcmpe.f64	d8, d6
   1473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1473e:	dc0a      	bgt.n	14756 <_dtoa_r+0xaee>
   14740:	eeb4 8b46 	vcmp.f64	d8, d6
   14744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14748:	f47f acdc 	bne.w	14104 <_dtoa_r+0x49c>
   1474c:	ee17 3a10 	vmov	r3, s14
   14750:	07d8      	lsls	r0, r3, #31
   14752:	f57f acd7 	bpl.w	14104 <_dtoa_r+0x49c>
   14756:	9a00      	ldr	r2, [sp, #0]
   14758:	e454      	b.n	14004 <_dtoa_r+0x39c>
   1475a:	6871      	ldr	r1, [r6, #4]
   1475c:	4620      	mov	r0, r4
   1475e:	f7fc fe0b 	bl	11378 <_Balloc>
   14762:	4607      	mov	r7, r0
   14764:	2800      	cmp	r0, #0
   14766:	f000 80de 	beq.w	14926 <_dtoa_r+0xcbe>
   1476a:	6933      	ldr	r3, [r6, #16]
   1476c:	3302      	adds	r3, #2
   1476e:	009a      	lsls	r2, r3, #2
   14770:	f106 010c 	add.w	r1, r6, #12
   14774:	300c      	adds	r0, #12
   14776:	f7f8 fc3b 	bl	cff0 <memcpy>
   1477a:	4639      	mov	r1, r7
   1477c:	2201      	movs	r2, #1
   1477e:	4620      	mov	r0, r4
   14780:	f7fd f808 	bl	11794 <__lshift>
   14784:	4680      	mov	r8, r0
   14786:	e5fe      	b.n	14386 <_dtoa_r+0x71e>
   14788:	9b06      	ldr	r3, [sp, #24]
   1478a:	eba3 0309 	sub.w	r3, r3, r9
   1478e:	9309      	str	r3, [sp, #36]	; 0x24
   14790:	e4da      	b.n	14148 <_dtoa_r+0x4e0>
   14792:	2b39      	cmp	r3, #57	; 0x39
   14794:	f000 808c 	beq.w	148b0 <_dtoa_r+0xc48>
   14798:	46b9      	mov	r9, r7
   1479a:	3301      	adds	r3, #1
   1479c:	e7c1      	b.n	14722 <_dtoa_r+0xaba>
   1479e:	9a04      	ldr	r2, [sp, #16]
   147a0:	3201      	adds	r2, #1
   147a2:	4637      	mov	r7, r6
   147a4:	9204      	str	r2, [sp, #16]
   147a6:	4646      	mov	r6, r8
   147a8:	e55f      	b.n	1426a <_dtoa_r+0x602>
   147aa:	4629      	mov	r1, r5
   147ac:	4620      	mov	r0, r4
   147ae:	f7fc ff91 	bl	116d4 <__pow5mult>
   147b2:	4605      	mov	r5, r0
   147b4:	e4fa      	b.n	141ac <_dtoa_r+0x544>
   147b6:	bf00      	nop
   147b8:	20002628 	.word	0x20002628
   147bc:	20000b58 	.word	0x20000b58
   147c0:	20000b30 	.word	0x20000b30
   147c4:	7ff00000 	.word	0x7ff00000
   147c8:	4b5e      	ldr	r3, [pc, #376]	; (14944 <_dtoa_r+0xcdc>)
   147ca:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   147ce:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   147d2:	ed1c 3b02 	vldr	d3, [ip, #-8]
   147d6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   147da:	ee36 7b47 	vsub.f64	d7, d6, d7
   147de:	ec41 0b16 	vmov	d6, r0, r1
   147e2:	ee15 1a90 	vmov	r1, s11
   147e6:	ee23 3b06 	vmul.f64	d3, d3, d6
   147ea:	9800      	ldr	r0, [sp, #0]
   147ec:	3130      	adds	r1, #48	; 0x30
   147ee:	2a01      	cmp	r2, #1
   147f0:	f800 1b01 	strb.w	r1, [r0], #1
   147f4:	f000 8083 	beq.w	148fe <_dtoa_r+0xc96>
   147f8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   147fc:	9b00      	ldr	r3, [sp, #0]
   147fe:	1899      	adds	r1, r3, r2
   14800:	ee27 7b04 	vmul.f64	d7, d7, d4
   14804:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   14808:	ee16 3a90 	vmov	r3, s13
   1480c:	3330      	adds	r3, #48	; 0x30
   1480e:	f800 3b01 	strb.w	r3, [r0], #1
   14812:	4281      	cmp	r1, r0
   14814:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   14818:	ee37 7b45 	vsub.f64	d7, d7, d5
   1481c:	d1f0      	bne.n	14800 <_dtoa_r+0xb98>
   1481e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14822:	ee33 5b06 	vadd.f64	d5, d3, d6
   14826:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1482a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1482e:	f53f abe3 	bmi.w	13ff8 <_dtoa_r+0x390>
   14832:	ee36 6b43 	vsub.f64	d6, d6, d3
   14836:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1483a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1483e:	f77f ac0d 	ble.w	1405c <_dtoa_r+0x3f4>
   14842:	4689      	mov	r9, r1
   14844:	3901      	subs	r1, #1
   14846:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   1484a:	2b30      	cmp	r3, #48	; 0x30
   1484c:	d0f9      	beq.n	14842 <_dtoa_r+0xbda>
   1484e:	1c73      	adds	r3, r6, #1
   14850:	9304      	str	r3, [sp, #16]
   14852:	e539      	b.n	142c8 <_dtoa_r+0x660>
   14854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14856:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1485a:	e6da      	b.n	14612 <_dtoa_r+0x9aa>
   1485c:	2002      	movs	r0, #2
   1485e:	eeb0 6b48 	vmov.f64	d6, d8
   14862:	f7ff bb48 	b.w	13ef6 <_dtoa_r+0x28e>
   14866:	f1b9 0f00 	cmp.w	r9, #0
   1486a:	f43f aeda 	beq.w	14622 <_dtoa_r+0x9ba>
   1486e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14870:	2a00      	cmp	r2, #0
   14872:	f77f abf3 	ble.w	1405c <_dtoa_r+0x3f4>
   14876:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1487a:	ee26 6b04 	vmul.f64	d6, d6, d4
   1487e:	3001      	adds	r0, #1
   14880:	ee07 0a90 	vmov	s15, r0
   14884:	9b04      	ldr	r3, [sp, #16]
   14886:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1488a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1488e:	eea6 7b05 	vfma.f64	d7, d6, d5
   14892:	ee17 ca90 	vmov	ip, s15
   14896:	ec51 0b17 	vmov	r0, r1, d7
   1489a:	1e5e      	subs	r6, r3, #1
   1489c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   148a0:	f7ff bb47 	b.w	13f32 <_dtoa_r+0x2ca>
   148a4:	9b04      	ldr	r3, [sp, #16]
   148a6:	3301      	adds	r3, #1
   148a8:	9304      	str	r3, [sp, #16]
   148aa:	2331      	movs	r3, #49	; 0x31
   148ac:	f7ff bbb1 	b.w	14012 <_dtoa_r+0x3aa>
   148b0:	9b04      	ldr	r3, [sp, #16]
   148b2:	46bb      	mov	fp, r7
   148b4:	3301      	adds	r3, #1
   148b6:	9304      	str	r3, [sp, #16]
   148b8:	2339      	movs	r3, #57	; 0x39
   148ba:	4637      	mov	r7, r6
   148bc:	f80b 3b01 	strb.w	r3, [fp], #1
   148c0:	4646      	mov	r6, r8
   148c2:	e4e1      	b.n	14288 <_dtoa_r+0x620>
   148c4:	f04f 0a00 	mov.w	sl, #0
   148c8:	4656      	mov	r6, sl
   148ca:	e653      	b.n	14574 <_dtoa_r+0x90c>
   148cc:	9208      	str	r2, [sp, #32]
   148ce:	e47b      	b.n	141c8 <_dtoa_r+0x560>
   148d0:	1c73      	adds	r3, r6, #1
   148d2:	9304      	str	r3, [sp, #16]
   148d4:	4689      	mov	r9, r1
   148d6:	e4f7      	b.n	142c8 <_dtoa_r+0x660>
   148d8:	f47f af22 	bne.w	14720 <_dtoa_r+0xab8>
   148dc:	07da      	lsls	r2, r3, #31
   148de:	f57f af1f 	bpl.w	14720 <_dtoa_r+0xab8>
   148e2:	e718      	b.n	14716 <_dtoa_r+0xaae>
   148e4:	2b39      	cmp	r3, #57	; 0x39
   148e6:	d0e3      	beq.n	148b0 <_dtoa_r+0xc48>
   148e8:	f1b9 0f00 	cmp.w	r9, #0
   148ec:	f73f af16 	bgt.w	1471c <_dtoa_r+0xab4>
   148f0:	e716      	b.n	14720 <_dtoa_r+0xab8>
   148f2:	9b01      	ldr	r3, [sp, #4]
   148f4:	2b02      	cmp	r3, #2
   148f6:	f73f ae28 	bgt.w	1454a <_dtoa_r+0x8e2>
   148fa:	9704      	str	r7, [sp, #16]
   148fc:	e5ba      	b.n	14474 <_dtoa_r+0x80c>
   148fe:	4601      	mov	r1, r0
   14900:	e78d      	b.n	1481e <_dtoa_r+0xbb6>
   14902:	9b01      	ldr	r3, [sp, #4]
   14904:	2b02      	cmp	r3, #2
   14906:	f73f ae20 	bgt.w	1454a <_dtoa_r+0x8e2>
   1490a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1490e:	9704      	str	r7, [sp, #16]
   14910:	e52b      	b.n	1436a <_dtoa_r+0x702>
   14912:	2002      	movs	r0, #2
   14914:	f7ff baef 	b.w	13ef6 <_dtoa_r+0x28e>
   14918:	4b0b      	ldr	r3, [pc, #44]	; (14948 <_dtoa_r+0xce0>)
   1491a:	480c      	ldr	r0, [pc, #48]	; (1494c <_dtoa_r+0xce4>)
   1491c:	2200      	movs	r2, #0
   1491e:	f240 11af 	movw	r1, #431	; 0x1af
   14922:	f7fc fc0f 	bl	11144 <__assert_func>
   14926:	4b08      	ldr	r3, [pc, #32]	; (14948 <_dtoa_r+0xce0>)
   14928:	4808      	ldr	r0, [pc, #32]	; (1494c <_dtoa_r+0xce4>)
   1492a:	463a      	mov	r2, r7
   1492c:	f240 21ef 	movw	r1, #751	; 0x2ef
   14930:	f7fc fc08 	bl	11144 <__assert_func>
   14934:	4b06      	ldr	r3, [pc, #24]	; (14950 <_dtoa_r+0xce8>)
   14936:	9300      	str	r3, [sp, #0]
   14938:	f7ff b9d2 	b.w	13ce0 <_dtoa_r+0x78>
   1493c:	9b02      	ldr	r3, [sp, #8]
   1493e:	9308      	str	r3, [sp, #32]
   14940:	e4f7      	b.n	14332 <_dtoa_r+0x6ca>
   14942:	bf00      	nop
   14944:	20000b58 	.word	0x20000b58
   14948:	20002480 	.word	0x20002480
   1494c:	2000262c 	.word	0x2000262c
   14950:	2000261c 	.word	0x2000261c

00014954 <_close_r>:
   14954:	b538      	push	{r3, r4, r5, lr}
   14956:	4d07      	ldr	r5, [pc, #28]	; (14974 <_close_r+0x20>)
   14958:	2200      	movs	r2, #0
   1495a:	4604      	mov	r4, r0
   1495c:	4608      	mov	r0, r1
   1495e:	602a      	str	r2, [r5, #0]
   14960:	f7f9 f952 	bl	dc08 <_close>
   14964:	1c43      	adds	r3, r0, #1
   14966:	d000      	beq.n	1496a <_close_r+0x16>
   14968:	bd38      	pop	{r3, r4, r5, pc}
   1496a:	682b      	ldr	r3, [r5, #0]
   1496c:	2b00      	cmp	r3, #0
   1496e:	d0fb      	beq.n	14968 <_close_r+0x14>
   14970:	6023      	str	r3, [r4, #0]
   14972:	bd38      	pop	{r3, r4, r5, pc}
   14974:	20004ff0 	.word	0x20004ff0

00014978 <__sflush_r>:
   14978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14980:	460c      	mov	r4, r1
   14982:	0711      	lsls	r1, r2, #28
   14984:	4680      	mov	r8, r0
   14986:	d447      	bmi.n	14a18 <__sflush_r+0xa0>
   14988:	6863      	ldr	r3, [r4, #4]
   1498a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1498e:	2b00      	cmp	r3, #0
   14990:	81a2      	strh	r2, [r4, #12]
   14992:	dd5e      	ble.n	14a52 <__sflush_r+0xda>
   14994:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14996:	2d00      	cmp	r5, #0
   14998:	d058      	beq.n	14a4c <__sflush_r+0xd4>
   1499a:	2300      	movs	r3, #0
   1499c:	f8d8 6000 	ldr.w	r6, [r8]
   149a0:	f8c8 3000 	str.w	r3, [r8]
   149a4:	b293      	uxth	r3, r2
   149a6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   149aa:	d156      	bne.n	14a5a <__sflush_r+0xe2>
   149ac:	2301      	movs	r3, #1
   149ae:	69e1      	ldr	r1, [r4, #28]
   149b0:	4640      	mov	r0, r8
   149b2:	47a8      	blx	r5
   149b4:	1c43      	adds	r3, r0, #1
   149b6:	d067      	beq.n	14a88 <__sflush_r+0x110>
   149b8:	89a3      	ldrh	r3, [r4, #12]
   149ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   149bc:	075f      	lsls	r7, r3, #29
   149be:	d505      	bpl.n	149cc <__sflush_r+0x54>
   149c0:	6863      	ldr	r3, [r4, #4]
   149c2:	1ac0      	subs	r0, r0, r3
   149c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   149c6:	b10b      	cbz	r3, 149cc <__sflush_r+0x54>
   149c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   149ca:	1ac0      	subs	r0, r0, r3
   149cc:	69e1      	ldr	r1, [r4, #28]
   149ce:	4602      	mov	r2, r0
   149d0:	2300      	movs	r3, #0
   149d2:	4640      	mov	r0, r8
   149d4:	47a8      	blx	r5
   149d6:	1c41      	adds	r1, r0, #1
   149d8:	d141      	bne.n	14a5e <__sflush_r+0xe6>
   149da:	f8d8 3000 	ldr.w	r3, [r8]
   149de:	2b00      	cmp	r3, #0
   149e0:	d03d      	beq.n	14a5e <__sflush_r+0xe6>
   149e2:	2b1d      	cmp	r3, #29
   149e4:	d001      	beq.n	149ea <__sflush_r+0x72>
   149e6:	2b16      	cmp	r3, #22
   149e8:	d156      	bne.n	14a98 <__sflush_r+0x120>
   149ea:	89a3      	ldrh	r3, [r4, #12]
   149ec:	6922      	ldr	r2, [r4, #16]
   149ee:	6022      	str	r2, [r4, #0]
   149f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   149f4:	2100      	movs	r1, #0
   149f6:	6061      	str	r1, [r4, #4]
   149f8:	81a3      	strh	r3, [r4, #12]
   149fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   149fc:	f8c8 6000 	str.w	r6, [r8]
   14a00:	b321      	cbz	r1, 14a4c <__sflush_r+0xd4>
   14a02:	f104 0340 	add.w	r3, r4, #64	; 0x40
   14a06:	4299      	cmp	r1, r3
   14a08:	d002      	beq.n	14a10 <__sflush_r+0x98>
   14a0a:	4640      	mov	r0, r8
   14a0c:	f7fd fc82 	bl	12314 <_free_r>
   14a10:	2000      	movs	r0, #0
   14a12:	6320      	str	r0, [r4, #48]	; 0x30
   14a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a18:	6926      	ldr	r6, [r4, #16]
   14a1a:	b1be      	cbz	r6, 14a4c <__sflush_r+0xd4>
   14a1c:	b293      	uxth	r3, r2
   14a1e:	6825      	ldr	r5, [r4, #0]
   14a20:	6026      	str	r6, [r4, #0]
   14a22:	079a      	lsls	r2, r3, #30
   14a24:	bf0c      	ite	eq
   14a26:	6963      	ldreq	r3, [r4, #20]
   14a28:	2300      	movne	r3, #0
   14a2a:	1bad      	subs	r5, r5, r6
   14a2c:	60a3      	str	r3, [r4, #8]
   14a2e:	e00b      	b.n	14a48 <__sflush_r+0xd0>
   14a30:	462b      	mov	r3, r5
   14a32:	4632      	mov	r2, r6
   14a34:	69e1      	ldr	r1, [r4, #28]
   14a36:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14a38:	4640      	mov	r0, r8
   14a3a:	47b8      	blx	r7
   14a3c:	f1b0 0c00 	subs.w	ip, r0, #0
   14a40:	eba5 050c 	sub.w	r5, r5, ip
   14a44:	4466      	add	r6, ip
   14a46:	dd17      	ble.n	14a78 <__sflush_r+0x100>
   14a48:	2d00      	cmp	r5, #0
   14a4a:	dcf1      	bgt.n	14a30 <__sflush_r+0xb8>
   14a4c:	2000      	movs	r0, #0
   14a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14a54:	2b00      	cmp	r3, #0
   14a56:	dc9d      	bgt.n	14994 <__sflush_r+0x1c>
   14a58:	e7f8      	b.n	14a4c <__sflush_r+0xd4>
   14a5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14a5c:	e7ae      	b.n	149bc <__sflush_r+0x44>
   14a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14a62:	6922      	ldr	r2, [r4, #16]
   14a64:	6022      	str	r2, [r4, #0]
   14a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14a6a:	81a3      	strh	r3, [r4, #12]
   14a6c:	2200      	movs	r2, #0
   14a6e:	04db      	lsls	r3, r3, #19
   14a70:	6062      	str	r2, [r4, #4]
   14a72:	d5c2      	bpl.n	149fa <__sflush_r+0x82>
   14a74:	6520      	str	r0, [r4, #80]	; 0x50
   14a76:	e7c0      	b.n	149fa <__sflush_r+0x82>
   14a78:	89a3      	ldrh	r3, [r4, #12]
   14a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14a82:	81a3      	strh	r3, [r4, #12]
   14a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a88:	f8d8 3000 	ldr.w	r3, [r8]
   14a8c:	2b00      	cmp	r3, #0
   14a8e:	d093      	beq.n	149b8 <__sflush_r+0x40>
   14a90:	2b1d      	cmp	r3, #29
   14a92:	d006      	beq.n	14aa2 <__sflush_r+0x12a>
   14a94:	2b16      	cmp	r3, #22
   14a96:	d004      	beq.n	14aa2 <__sflush_r+0x12a>
   14a98:	89a3      	ldrh	r3, [r4, #12]
   14a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14a9e:	81a3      	strh	r3, [r4, #12]
   14aa0:	e7d5      	b.n	14a4e <__sflush_r+0xd6>
   14aa2:	f8c8 6000 	str.w	r6, [r8]
   14aa6:	e7d1      	b.n	14a4c <__sflush_r+0xd4>

00014aa8 <_fflush_r>:
   14aa8:	b538      	push	{r3, r4, r5, lr}
   14aaa:	460c      	mov	r4, r1
   14aac:	4605      	mov	r5, r0
   14aae:	b108      	cbz	r0, 14ab4 <_fflush_r+0xc>
   14ab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14ab2:	b303      	cbz	r3, 14af6 <_fflush_r+0x4e>
   14ab4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14ab8:	b188      	cbz	r0, 14ade <_fflush_r+0x36>
   14aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14abc:	07db      	lsls	r3, r3, #31
   14abe:	d401      	bmi.n	14ac4 <_fflush_r+0x1c>
   14ac0:	0581      	lsls	r1, r0, #22
   14ac2:	d50f      	bpl.n	14ae4 <_fflush_r+0x3c>
   14ac4:	4628      	mov	r0, r5
   14ac6:	4621      	mov	r1, r4
   14ac8:	f7ff ff56 	bl	14978 <__sflush_r>
   14acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14ace:	07da      	lsls	r2, r3, #31
   14ad0:	4605      	mov	r5, r0
   14ad2:	d402      	bmi.n	14ada <_fflush_r+0x32>
   14ad4:	89a3      	ldrh	r3, [r4, #12]
   14ad6:	059b      	lsls	r3, r3, #22
   14ad8:	d508      	bpl.n	14aec <_fflush_r+0x44>
   14ada:	4628      	mov	r0, r5
   14adc:	bd38      	pop	{r3, r4, r5, pc}
   14ade:	4605      	mov	r5, r0
   14ae0:	4628      	mov	r0, r5
   14ae2:	bd38      	pop	{r3, r4, r5, pc}
   14ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14ae6:	f7fc fbd3 	bl	11290 <__retarget_lock_acquire_recursive>
   14aea:	e7eb      	b.n	14ac4 <_fflush_r+0x1c>
   14aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14aee:	f7fc fbd1 	bl	11294 <__retarget_lock_release_recursive>
   14af2:	4628      	mov	r0, r5
   14af4:	bd38      	pop	{r3, r4, r5, pc}
   14af6:	f7fd f8d9 	bl	11cac <__sinit>
   14afa:	e7db      	b.n	14ab4 <_fflush_r+0xc>

00014afc <_fstat_r>:
   14afc:	b570      	push	{r4, r5, r6, lr}
   14afe:	460c      	mov	r4, r1
   14b00:	4d08      	ldr	r5, [pc, #32]	; (14b24 <_fstat_r+0x28>)
   14b02:	4603      	mov	r3, r0
   14b04:	2600      	movs	r6, #0
   14b06:	4620      	mov	r0, r4
   14b08:	4611      	mov	r1, r2
   14b0a:	461c      	mov	r4, r3
   14b0c:	602e      	str	r6, [r5, #0]
   14b0e:	f7f9 f87e 	bl	dc0e <_fstat>
   14b12:	1c43      	adds	r3, r0, #1
   14b14:	d000      	beq.n	14b18 <_fstat_r+0x1c>
   14b16:	bd70      	pop	{r4, r5, r6, pc}
   14b18:	682b      	ldr	r3, [r5, #0]
   14b1a:	2b00      	cmp	r3, #0
   14b1c:	d0fb      	beq.n	14b16 <_fstat_r+0x1a>
   14b1e:	6023      	str	r3, [r4, #0]
   14b20:	bd70      	pop	{r4, r5, r6, pc}
   14b22:	bf00      	nop
   14b24:	20004ff0 	.word	0x20004ff0

00014b28 <_isatty_r>:
   14b28:	b538      	push	{r3, r4, r5, lr}
   14b2a:	4d07      	ldr	r5, [pc, #28]	; (14b48 <_isatty_r+0x20>)
   14b2c:	2200      	movs	r2, #0
   14b2e:	4604      	mov	r4, r0
   14b30:	4608      	mov	r0, r1
   14b32:	602a      	str	r2, [r5, #0]
   14b34:	f7f9 f870 	bl	dc18 <_isatty>
   14b38:	1c43      	adds	r3, r0, #1
   14b3a:	d000      	beq.n	14b3e <_isatty_r+0x16>
   14b3c:	bd38      	pop	{r3, r4, r5, pc}
   14b3e:	682b      	ldr	r3, [r5, #0]
   14b40:	2b00      	cmp	r3, #0
   14b42:	d0fb      	beq.n	14b3c <_isatty_r+0x14>
   14b44:	6023      	str	r3, [r4, #0]
   14b46:	bd38      	pop	{r3, r4, r5, pc}
   14b48:	20004ff0 	.word	0x20004ff0

00014b4c <_lseek_r>:
   14b4c:	b538      	push	{r3, r4, r5, lr}
   14b4e:	460c      	mov	r4, r1
   14b50:	4d08      	ldr	r5, [pc, #32]	; (14b74 <_lseek_r+0x28>)
   14b52:	4684      	mov	ip, r0
   14b54:	4611      	mov	r1, r2
   14b56:	4620      	mov	r0, r4
   14b58:	461a      	mov	r2, r3
   14b5a:	2300      	movs	r3, #0
   14b5c:	602b      	str	r3, [r5, #0]
   14b5e:	4664      	mov	r4, ip
   14b60:	f7f9 f85c 	bl	dc1c <_lseek>
   14b64:	1c43      	adds	r3, r0, #1
   14b66:	d000      	beq.n	14b6a <_lseek_r+0x1e>
   14b68:	bd38      	pop	{r3, r4, r5, pc}
   14b6a:	682b      	ldr	r3, [r5, #0]
   14b6c:	2b00      	cmp	r3, #0
   14b6e:	d0fb      	beq.n	14b68 <_lseek_r+0x1c>
   14b70:	6023      	str	r3, [r4, #0]
   14b72:	bd38      	pop	{r3, r4, r5, pc}
   14b74:	20004ff0 	.word	0x20004ff0

00014b78 <_read_r>:
   14b78:	b538      	push	{r3, r4, r5, lr}
   14b7a:	460c      	mov	r4, r1
   14b7c:	4d08      	ldr	r5, [pc, #32]	; (14ba0 <_read_r+0x28>)
   14b7e:	4684      	mov	ip, r0
   14b80:	4611      	mov	r1, r2
   14b82:	4620      	mov	r0, r4
   14b84:	461a      	mov	r2, r3
   14b86:	2300      	movs	r3, #0
   14b88:	602b      	str	r3, [r5, #0]
   14b8a:	4664      	mov	r4, ip
   14b8c:	f7f9 f83a 	bl	dc04 <_read>
   14b90:	1c43      	adds	r3, r0, #1
   14b92:	d000      	beq.n	14b96 <_read_r+0x1e>
   14b94:	bd38      	pop	{r3, r4, r5, pc}
   14b96:	682b      	ldr	r3, [r5, #0]
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d0fb      	beq.n	14b94 <_read_r+0x1c>
   14b9c:	6023      	str	r3, [r4, #0]
   14b9e:	bd38      	pop	{r3, r4, r5, pc}
   14ba0:	20004ff0 	.word	0x20004ff0

00014ba4 <__fputwc>:
   14ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ba8:	b082      	sub	sp, #8
   14baa:	4682      	mov	sl, r0
   14bac:	4688      	mov	r8, r1
   14bae:	4614      	mov	r4, r2
   14bb0:	f7fc fb72 	bl	11298 <__locale_mb_cur_max>
   14bb4:	2801      	cmp	r0, #1
   14bb6:	d103      	bne.n	14bc0 <__fputwc+0x1c>
   14bb8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   14bbc:	2bfe      	cmp	r3, #254	; 0xfe
   14bbe:	d936      	bls.n	14c2e <__fputwc+0x8a>
   14bc0:	f10d 0904 	add.w	r9, sp, #4
   14bc4:	4642      	mov	r2, r8
   14bc6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   14bca:	4649      	mov	r1, r9
   14bcc:	4650      	mov	r0, sl
   14bce:	f7fe fe49 	bl	13864 <_wcrtomb_r>
   14bd2:	1c42      	adds	r2, r0, #1
   14bd4:	4606      	mov	r6, r0
   14bd6:	d032      	beq.n	14c3e <__fputwc+0x9a>
   14bd8:	b320      	cbz	r0, 14c24 <__fputwc+0x80>
   14bda:	f89d c004 	ldrb.w	ip, [sp, #4]
   14bde:	2500      	movs	r5, #0
   14be0:	e009      	b.n	14bf6 <__fputwc+0x52>
   14be2:	6823      	ldr	r3, [r4, #0]
   14be4:	1c5a      	adds	r2, r3, #1
   14be6:	6022      	str	r2, [r4, #0]
   14be8:	f883 c000 	strb.w	ip, [r3]
   14bec:	3501      	adds	r5, #1
   14bee:	42b5      	cmp	r5, r6
   14bf0:	d218      	bcs.n	14c24 <__fputwc+0x80>
   14bf2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14bf6:	68a3      	ldr	r3, [r4, #8]
   14bf8:	3b01      	subs	r3, #1
   14bfa:	2b00      	cmp	r3, #0
   14bfc:	60a3      	str	r3, [r4, #8]
   14bfe:	daf0      	bge.n	14be2 <__fputwc+0x3e>
   14c00:	69a7      	ldr	r7, [r4, #24]
   14c02:	42bb      	cmp	r3, r7
   14c04:	4661      	mov	r1, ip
   14c06:	4622      	mov	r2, r4
   14c08:	4650      	mov	r0, sl
   14c0a:	db02      	blt.n	14c12 <__fputwc+0x6e>
   14c0c:	f1bc 0f0a 	cmp.w	ip, #10
   14c10:	d1e7      	bne.n	14be2 <__fputwc+0x3e>
   14c12:	f000 f9cb 	bl	14fac <__swbuf_r>
   14c16:	1c43      	adds	r3, r0, #1
   14c18:	d1e8      	bne.n	14bec <__fputwc+0x48>
   14c1a:	4606      	mov	r6, r0
   14c1c:	4630      	mov	r0, r6
   14c1e:	b002      	add	sp, #8
   14c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c24:	4646      	mov	r6, r8
   14c26:	4630      	mov	r0, r6
   14c28:	b002      	add	sp, #8
   14c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c2e:	fa5f fc88 	uxtb.w	ip, r8
   14c32:	f88d c004 	strb.w	ip, [sp, #4]
   14c36:	4606      	mov	r6, r0
   14c38:	f10d 0904 	add.w	r9, sp, #4
   14c3c:	e7cf      	b.n	14bde <__fputwc+0x3a>
   14c3e:	89a3      	ldrh	r3, [r4, #12]
   14c40:	4630      	mov	r0, r6
   14c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14c46:	81a3      	strh	r3, [r4, #12]
   14c48:	b002      	add	sp, #8
   14c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c4e:	bf00      	nop

00014c50 <_fputwc_r>:
   14c50:	b530      	push	{r4, r5, lr}
   14c52:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14c54:	f013 0f01 	tst.w	r3, #1
   14c58:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14c5c:	4614      	mov	r4, r2
   14c5e:	b083      	sub	sp, #12
   14c60:	4605      	mov	r5, r0
   14c62:	b29a      	uxth	r2, r3
   14c64:	d101      	bne.n	14c6a <_fputwc_r+0x1a>
   14c66:	0598      	lsls	r0, r3, #22
   14c68:	d51c      	bpl.n	14ca4 <_fputwc_r+0x54>
   14c6a:	0490      	lsls	r0, r2, #18
   14c6c:	d406      	bmi.n	14c7c <_fputwc_r+0x2c>
   14c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14c70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14c78:	81a3      	strh	r3, [r4, #12]
   14c7a:	6662      	str	r2, [r4, #100]	; 0x64
   14c7c:	4622      	mov	r2, r4
   14c7e:	4628      	mov	r0, r5
   14c80:	f7ff ff90 	bl	14ba4 <__fputwc>
   14c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14c86:	07da      	lsls	r2, r3, #31
   14c88:	4605      	mov	r5, r0
   14c8a:	d402      	bmi.n	14c92 <_fputwc_r+0x42>
   14c8c:	89a3      	ldrh	r3, [r4, #12]
   14c8e:	059b      	lsls	r3, r3, #22
   14c90:	d502      	bpl.n	14c98 <_fputwc_r+0x48>
   14c92:	4628      	mov	r0, r5
   14c94:	b003      	add	sp, #12
   14c96:	bd30      	pop	{r4, r5, pc}
   14c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14c9a:	f7fc fafb 	bl	11294 <__retarget_lock_release_recursive>
   14c9e:	4628      	mov	r0, r5
   14ca0:	b003      	add	sp, #12
   14ca2:	bd30      	pop	{r4, r5, pc}
   14ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14ca6:	9101      	str	r1, [sp, #4]
   14ca8:	f7fc faf2 	bl	11290 <__retarget_lock_acquire_recursive>
   14cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14cb0:	9901      	ldr	r1, [sp, #4]
   14cb2:	b29a      	uxth	r2, r3
   14cb4:	e7d9      	b.n	14c6a <_fputwc_r+0x1a>
   14cb6:	bf00      	nop

00014cb8 <__sfvwrite_r>:
   14cb8:	6893      	ldr	r3, [r2, #8]
   14cba:	2b00      	cmp	r3, #0
   14cbc:	f000 8085 	beq.w	14dca <__sfvwrite_r+0x112>
   14cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cc4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   14cc8:	460c      	mov	r4, r1
   14cca:	0719      	lsls	r1, r3, #28
   14ccc:	4680      	mov	r8, r0
   14cce:	b083      	sub	sp, #12
   14cd0:	4617      	mov	r7, r2
   14cd2:	b298      	uxth	r0, r3
   14cd4:	d525      	bpl.n	14d22 <__sfvwrite_r+0x6a>
   14cd6:	6923      	ldr	r3, [r4, #16]
   14cd8:	b31b      	cbz	r3, 14d22 <__sfvwrite_r+0x6a>
   14cda:	f010 0302 	ands.w	r3, r0, #2
   14cde:	683d      	ldr	r5, [r7, #0]
   14ce0:	d02d      	beq.n	14d3e <__sfvwrite_r+0x86>
   14ce2:	f04f 0a00 	mov.w	sl, #0
   14ce6:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 14fa8 <__sfvwrite_r+0x2f0>
   14cea:	4656      	mov	r6, sl
   14cec:	46b9      	mov	r9, r7
   14cee:	455e      	cmp	r6, fp
   14cf0:	4633      	mov	r3, r6
   14cf2:	4652      	mov	r2, sl
   14cf4:	bf28      	it	cs
   14cf6:	465b      	movcs	r3, fp
   14cf8:	4640      	mov	r0, r8
   14cfa:	2e00      	cmp	r6, #0
   14cfc:	d052      	beq.n	14da4 <__sfvwrite_r+0xec>
   14cfe:	69e1      	ldr	r1, [r4, #28]
   14d00:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14d02:	47b8      	blx	r7
   14d04:	2800      	cmp	r0, #0
   14d06:	dd56      	ble.n	14db6 <__sfvwrite_r+0xfe>
   14d08:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14d0c:	1a1b      	subs	r3, r3, r0
   14d0e:	4482      	add	sl, r0
   14d10:	1a36      	subs	r6, r6, r0
   14d12:	f8c9 3008 	str.w	r3, [r9, #8]
   14d16:	2b00      	cmp	r3, #0
   14d18:	d1e9      	bne.n	14cee <__sfvwrite_r+0x36>
   14d1a:	2000      	movs	r0, #0
   14d1c:	b003      	add	sp, #12
   14d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d22:	4621      	mov	r1, r4
   14d24:	4640      	mov	r0, r8
   14d26:	f7fe fe2b 	bl	13980 <__swsetup_r>
   14d2a:	2800      	cmp	r0, #0
   14d2c:	f040 8138 	bne.w	14fa0 <__sfvwrite_r+0x2e8>
   14d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14d34:	683d      	ldr	r5, [r7, #0]
   14d36:	b298      	uxth	r0, r3
   14d38:	f010 0302 	ands.w	r3, r0, #2
   14d3c:	d1d1      	bne.n	14ce2 <__sfvwrite_r+0x2a>
   14d3e:	f010 0901 	ands.w	r9, r0, #1
   14d42:	d144      	bne.n	14dce <__sfvwrite_r+0x116>
   14d44:	464e      	mov	r6, r9
   14d46:	9700      	str	r7, [sp, #0]
   14d48:	b346      	cbz	r6, 14d9c <__sfvwrite_r+0xe4>
   14d4a:	0582      	lsls	r2, r0, #22
   14d4c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   14d50:	f140 8085 	bpl.w	14e5e <__sfvwrite_r+0x1a6>
   14d54:	45b3      	cmp	fp, r6
   14d56:	465a      	mov	r2, fp
   14d58:	f200 80b4 	bhi.w	14ec4 <__sfvwrite_r+0x20c>
   14d5c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   14d60:	f040 80c1 	bne.w	14ee6 <__sfvwrite_r+0x22e>
   14d64:	6820      	ldr	r0, [r4, #0]
   14d66:	9201      	str	r2, [sp, #4]
   14d68:	4649      	mov	r1, r9
   14d6a:	f7fc f96f 	bl	1104c <memmove>
   14d6e:	68a3      	ldr	r3, [r4, #8]
   14d70:	9a01      	ldr	r2, [sp, #4]
   14d72:	eba3 010b 	sub.w	r1, r3, fp
   14d76:	6823      	ldr	r3, [r4, #0]
   14d78:	60a1      	str	r1, [r4, #8]
   14d7a:	4413      	add	r3, r2
   14d7c:	46b2      	mov	sl, r6
   14d7e:	6023      	str	r3, [r4, #0]
   14d80:	2600      	movs	r6, #0
   14d82:	9a00      	ldr	r2, [sp, #0]
   14d84:	6893      	ldr	r3, [r2, #8]
   14d86:	eba3 030a 	sub.w	r3, r3, sl
   14d8a:	44d1      	add	r9, sl
   14d8c:	6093      	str	r3, [r2, #8]
   14d8e:	2b00      	cmp	r3, #0
   14d90:	d0c3      	beq.n	14d1a <__sfvwrite_r+0x62>
   14d92:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14d96:	b280      	uxth	r0, r0
   14d98:	2e00      	cmp	r6, #0
   14d9a:	d1d6      	bne.n	14d4a <__sfvwrite_r+0x92>
   14d9c:	e9d5 9600 	ldrd	r9, r6, [r5]
   14da0:	3508      	adds	r5, #8
   14da2:	e7d1      	b.n	14d48 <__sfvwrite_r+0x90>
   14da4:	e9d5 a600 	ldrd	sl, r6, [r5]
   14da8:	3508      	adds	r5, #8
   14daa:	e7a0      	b.n	14cee <__sfvwrite_r+0x36>
   14dac:	4621      	mov	r1, r4
   14dae:	4640      	mov	r0, r8
   14db0:	f7ff fe7a 	bl	14aa8 <_fflush_r>
   14db4:	b388      	cbz	r0, 14e1a <__sfvwrite_r+0x162>
   14db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14dc2:	81a3      	strh	r3, [r4, #12]
   14dc4:	b003      	add	sp, #12
   14dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dca:	2000      	movs	r0, #0
   14dcc:	4770      	bx	lr
   14dce:	461e      	mov	r6, r3
   14dd0:	46ba      	mov	sl, r7
   14dd2:	4699      	mov	r9, r3
   14dd4:	4618      	mov	r0, r3
   14dd6:	9500      	str	r5, [sp, #0]
   14dd8:	461f      	mov	r7, r3
   14dda:	b366      	cbz	r6, 14e36 <__sfvwrite_r+0x17e>
   14ddc:	2800      	cmp	r0, #0
   14dde:	d032      	beq.n	14e46 <__sfvwrite_r+0x18e>
   14de0:	464a      	mov	r2, r9
   14de2:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   14de6:	6820      	ldr	r0, [r4, #0]
   14de8:	68a5      	ldr	r5, [r4, #8]
   14dea:	42b2      	cmp	r2, r6
   14dec:	bf28      	it	cs
   14dee:	4632      	movcs	r2, r6
   14df0:	4288      	cmp	r0, r1
   14df2:	d904      	bls.n	14dfe <__sfvwrite_r+0x146>
   14df4:	eb05 0b03 	add.w	fp, r5, r3
   14df8:	455a      	cmp	r2, fp
   14dfa:	f300 80a7 	bgt.w	14f4c <__sfvwrite_r+0x294>
   14dfe:	4293      	cmp	r3, r2
   14e00:	dc64      	bgt.n	14ecc <__sfvwrite_r+0x214>
   14e02:	69e1      	ldr	r1, [r4, #28]
   14e04:	6a65      	ldr	r5, [r4, #36]	; 0x24
   14e06:	463a      	mov	r2, r7
   14e08:	4640      	mov	r0, r8
   14e0a:	47a8      	blx	r5
   14e0c:	f1b0 0b00 	subs.w	fp, r0, #0
   14e10:	ddd1      	ble.n	14db6 <__sfvwrite_r+0xfe>
   14e12:	ebb9 090b 	subs.w	r9, r9, fp
   14e16:	d0c9      	beq.n	14dac <__sfvwrite_r+0xf4>
   14e18:	2001      	movs	r0, #1
   14e1a:	f8da 3008 	ldr.w	r3, [sl, #8]
   14e1e:	eba3 030b 	sub.w	r3, r3, fp
   14e22:	445f      	add	r7, fp
   14e24:	eba6 060b 	sub.w	r6, r6, fp
   14e28:	f8ca 3008 	str.w	r3, [sl, #8]
   14e2c:	2b00      	cmp	r3, #0
   14e2e:	f43f af74 	beq.w	14d1a <__sfvwrite_r+0x62>
   14e32:	2e00      	cmp	r6, #0
   14e34:	d1d2      	bne.n	14ddc <__sfvwrite_r+0x124>
   14e36:	9a00      	ldr	r2, [sp, #0]
   14e38:	6856      	ldr	r6, [r2, #4]
   14e3a:	4613      	mov	r3, r2
   14e3c:	3208      	adds	r2, #8
   14e3e:	9200      	str	r2, [sp, #0]
   14e40:	2e00      	cmp	r6, #0
   14e42:	d0f8      	beq.n	14e36 <__sfvwrite_r+0x17e>
   14e44:	681f      	ldr	r7, [r3, #0]
   14e46:	4632      	mov	r2, r6
   14e48:	210a      	movs	r1, #10
   14e4a:	4638      	mov	r0, r7
   14e4c:	f7fc ff58 	bl	11d00 <memchr>
   14e50:	2800      	cmp	r0, #0
   14e52:	f000 809c 	beq.w	14f8e <__sfvwrite_r+0x2d6>
   14e56:	3001      	adds	r0, #1
   14e58:	eba0 0907 	sub.w	r9, r0, r7
   14e5c:	e7c0      	b.n	14de0 <__sfvwrite_r+0x128>
   14e5e:	6820      	ldr	r0, [r4, #0]
   14e60:	6923      	ldr	r3, [r4, #16]
   14e62:	4298      	cmp	r0, r3
   14e64:	d816      	bhi.n	14e94 <__sfvwrite_r+0x1dc>
   14e66:	6962      	ldr	r2, [r4, #20]
   14e68:	42b2      	cmp	r2, r6
   14e6a:	d813      	bhi.n	14e94 <__sfvwrite_r+0x1dc>
   14e6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   14e70:	42b3      	cmp	r3, r6
   14e72:	bf28      	it	cs
   14e74:	4633      	movcs	r3, r6
   14e76:	69e1      	ldr	r1, [r4, #28]
   14e78:	fb93 f3f2 	sdiv	r3, r3, r2
   14e7c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14e7e:	fb02 f303 	mul.w	r3, r2, r3
   14e82:	4640      	mov	r0, r8
   14e84:	464a      	mov	r2, r9
   14e86:	47b8      	blx	r7
   14e88:	f1b0 0a00 	subs.w	sl, r0, #0
   14e8c:	dd93      	ble.n	14db6 <__sfvwrite_r+0xfe>
   14e8e:	eba6 060a 	sub.w	r6, r6, sl
   14e92:	e776      	b.n	14d82 <__sfvwrite_r+0xca>
   14e94:	45b3      	cmp	fp, r6
   14e96:	46da      	mov	sl, fp
   14e98:	bf28      	it	cs
   14e9a:	46b2      	movcs	sl, r6
   14e9c:	4652      	mov	r2, sl
   14e9e:	4649      	mov	r1, r9
   14ea0:	f7fc f8d4 	bl	1104c <memmove>
   14ea4:	68a3      	ldr	r3, [r4, #8]
   14ea6:	6822      	ldr	r2, [r4, #0]
   14ea8:	eba3 030a 	sub.w	r3, r3, sl
   14eac:	4452      	add	r2, sl
   14eae:	60a3      	str	r3, [r4, #8]
   14eb0:	6022      	str	r2, [r4, #0]
   14eb2:	2b00      	cmp	r3, #0
   14eb4:	d1eb      	bne.n	14e8e <__sfvwrite_r+0x1d6>
   14eb6:	4621      	mov	r1, r4
   14eb8:	4640      	mov	r0, r8
   14eba:	f7ff fdf5 	bl	14aa8 <_fflush_r>
   14ebe:	2800      	cmp	r0, #0
   14ec0:	d0e5      	beq.n	14e8e <__sfvwrite_r+0x1d6>
   14ec2:	e778      	b.n	14db6 <__sfvwrite_r+0xfe>
   14ec4:	6820      	ldr	r0, [r4, #0]
   14ec6:	46b3      	mov	fp, r6
   14ec8:	4632      	mov	r2, r6
   14eca:	e74c      	b.n	14d66 <__sfvwrite_r+0xae>
   14ecc:	4639      	mov	r1, r7
   14ece:	9201      	str	r2, [sp, #4]
   14ed0:	f7fc f8bc 	bl	1104c <memmove>
   14ed4:	9a01      	ldr	r2, [sp, #4]
   14ed6:	68a3      	ldr	r3, [r4, #8]
   14ed8:	1a9b      	subs	r3, r3, r2
   14eda:	60a3      	str	r3, [r4, #8]
   14edc:	6823      	ldr	r3, [r4, #0]
   14ede:	4413      	add	r3, r2
   14ee0:	6023      	str	r3, [r4, #0]
   14ee2:	4693      	mov	fp, r2
   14ee4:	e795      	b.n	14e12 <__sfvwrite_r+0x15a>
   14ee6:	6823      	ldr	r3, [r4, #0]
   14ee8:	6921      	ldr	r1, [r4, #16]
   14eea:	eba3 0b01 	sub.w	fp, r3, r1
   14eee:	6963      	ldr	r3, [r4, #20]
   14ef0:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   14ef4:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   14ef8:	f10b 0301 	add.w	r3, fp, #1
   14efc:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   14f00:	4433      	add	r3, r6
   14f02:	4553      	cmp	r3, sl
   14f04:	4652      	mov	r2, sl
   14f06:	bf84      	itt	hi
   14f08:	469a      	movhi	sl, r3
   14f0a:	4652      	movhi	r2, sl
   14f0c:	0543      	lsls	r3, r0, #21
   14f0e:	d52c      	bpl.n	14f6a <__sfvwrite_r+0x2b2>
   14f10:	4611      	mov	r1, r2
   14f12:	4640      	mov	r0, r8
   14f14:	f7fb fdba 	bl	10a8c <_malloc_r>
   14f18:	2800      	cmp	r0, #0
   14f1a:	d03b      	beq.n	14f94 <__sfvwrite_r+0x2dc>
   14f1c:	465a      	mov	r2, fp
   14f1e:	6921      	ldr	r1, [r4, #16]
   14f20:	9001      	str	r0, [sp, #4]
   14f22:	f7f8 f865 	bl	cff0 <memcpy>
   14f26:	89a2      	ldrh	r2, [r4, #12]
   14f28:	9b01      	ldr	r3, [sp, #4]
   14f2a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   14f2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14f32:	81a2      	strh	r2, [r4, #12]
   14f34:	eb03 000b 	add.w	r0, r3, fp
   14f38:	6123      	str	r3, [r4, #16]
   14f3a:	ebaa 030b 	sub.w	r3, sl, fp
   14f3e:	f8c4 a014 	str.w	sl, [r4, #20]
   14f42:	60a3      	str	r3, [r4, #8]
   14f44:	6020      	str	r0, [r4, #0]
   14f46:	46b3      	mov	fp, r6
   14f48:	4632      	mov	r2, r6
   14f4a:	e70c      	b.n	14d66 <__sfvwrite_r+0xae>
   14f4c:	4639      	mov	r1, r7
   14f4e:	465a      	mov	r2, fp
   14f50:	f7fc f87c 	bl	1104c <memmove>
   14f54:	6823      	ldr	r3, [r4, #0]
   14f56:	445b      	add	r3, fp
   14f58:	6023      	str	r3, [r4, #0]
   14f5a:	4621      	mov	r1, r4
   14f5c:	4640      	mov	r0, r8
   14f5e:	f7ff fda3 	bl	14aa8 <_fflush_r>
   14f62:	2800      	cmp	r0, #0
   14f64:	f43f af55 	beq.w	14e12 <__sfvwrite_r+0x15a>
   14f68:	e725      	b.n	14db6 <__sfvwrite_r+0xfe>
   14f6a:	4640      	mov	r0, r8
   14f6c:	f7fc ff96 	bl	11e9c <_realloc_r>
   14f70:	4603      	mov	r3, r0
   14f72:	2800      	cmp	r0, #0
   14f74:	d1de      	bne.n	14f34 <__sfvwrite_r+0x27c>
   14f76:	6921      	ldr	r1, [r4, #16]
   14f78:	4640      	mov	r0, r8
   14f7a:	f7fd f9cb 	bl	12314 <_free_r>
   14f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14f82:	220c      	movs	r2, #12
   14f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14f88:	f8c8 2000 	str.w	r2, [r8]
   14f8c:	e715      	b.n	14dba <__sfvwrite_r+0x102>
   14f8e:	1c72      	adds	r2, r6, #1
   14f90:	4691      	mov	r9, r2
   14f92:	e726      	b.n	14de2 <__sfvwrite_r+0x12a>
   14f94:	220c      	movs	r2, #12
   14f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14f9a:	f8c8 2000 	str.w	r2, [r8]
   14f9e:	e70c      	b.n	14dba <__sfvwrite_r+0x102>
   14fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14fa4:	e6ba      	b.n	14d1c <__sfvwrite_r+0x64>
   14fa6:	bf00      	nop
   14fa8:	7ffffc00 	.word	0x7ffffc00

00014fac <__swbuf_r>:
   14fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fae:	460d      	mov	r5, r1
   14fb0:	4614      	mov	r4, r2
   14fb2:	4606      	mov	r6, r0
   14fb4:	b110      	cbz	r0, 14fbc <__swbuf_r+0x10>
   14fb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14fb8:	2b00      	cmp	r3, #0
   14fba:	d04c      	beq.n	15056 <__swbuf_r+0xaa>
   14fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   14fc0:	69a3      	ldr	r3, [r4, #24]
   14fc2:	60a3      	str	r3, [r4, #8]
   14fc4:	0717      	lsls	r7, r2, #28
   14fc6:	b290      	uxth	r0, r2
   14fc8:	d51b      	bpl.n	15002 <__swbuf_r+0x56>
   14fca:	6923      	ldr	r3, [r4, #16]
   14fcc:	b1cb      	cbz	r3, 15002 <__swbuf_r+0x56>
   14fce:	b2ed      	uxtb	r5, r5
   14fd0:	0481      	lsls	r1, r0, #18
   14fd2:	462f      	mov	r7, r5
   14fd4:	d522      	bpl.n	1501c <__swbuf_r+0x70>
   14fd6:	6822      	ldr	r2, [r4, #0]
   14fd8:	6961      	ldr	r1, [r4, #20]
   14fda:	1ad3      	subs	r3, r2, r3
   14fdc:	4299      	cmp	r1, r3
   14fde:	dd29      	ble.n	15034 <__swbuf_r+0x88>
   14fe0:	3301      	adds	r3, #1
   14fe2:	68a1      	ldr	r1, [r4, #8]
   14fe4:	3901      	subs	r1, #1
   14fe6:	60a1      	str	r1, [r4, #8]
   14fe8:	1c51      	adds	r1, r2, #1
   14fea:	6021      	str	r1, [r4, #0]
   14fec:	7015      	strb	r5, [r2, #0]
   14fee:	6962      	ldr	r2, [r4, #20]
   14ff0:	429a      	cmp	r2, r3
   14ff2:	d027      	beq.n	15044 <__swbuf_r+0x98>
   14ff4:	89a3      	ldrh	r3, [r4, #12]
   14ff6:	07db      	lsls	r3, r3, #31
   14ff8:	d501      	bpl.n	14ffe <__swbuf_r+0x52>
   14ffa:	2d0a      	cmp	r5, #10
   14ffc:	d022      	beq.n	15044 <__swbuf_r+0x98>
   14ffe:	4638      	mov	r0, r7
   15000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15002:	4621      	mov	r1, r4
   15004:	4630      	mov	r0, r6
   15006:	f7fe fcbb 	bl	13980 <__swsetup_r>
   1500a:	bb08      	cbnz	r0, 15050 <__swbuf_r+0xa4>
   1500c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15010:	6923      	ldr	r3, [r4, #16]
   15012:	b290      	uxth	r0, r2
   15014:	b2ed      	uxtb	r5, r5
   15016:	0481      	lsls	r1, r0, #18
   15018:	462f      	mov	r7, r5
   1501a:	d4dc      	bmi.n	14fd6 <__swbuf_r+0x2a>
   1501c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15020:	81a2      	strh	r2, [r4, #12]
   15022:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15024:	6961      	ldr	r1, [r4, #20]
   15026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1502a:	6662      	str	r2, [r4, #100]	; 0x64
   1502c:	6822      	ldr	r2, [r4, #0]
   1502e:	1ad3      	subs	r3, r2, r3
   15030:	4299      	cmp	r1, r3
   15032:	dcd5      	bgt.n	14fe0 <__swbuf_r+0x34>
   15034:	4621      	mov	r1, r4
   15036:	4630      	mov	r0, r6
   15038:	f7ff fd36 	bl	14aa8 <_fflush_r>
   1503c:	b940      	cbnz	r0, 15050 <__swbuf_r+0xa4>
   1503e:	6822      	ldr	r2, [r4, #0]
   15040:	2301      	movs	r3, #1
   15042:	e7ce      	b.n	14fe2 <__swbuf_r+0x36>
   15044:	4621      	mov	r1, r4
   15046:	4630      	mov	r0, r6
   15048:	f7ff fd2e 	bl	14aa8 <_fflush_r>
   1504c:	2800      	cmp	r0, #0
   1504e:	d0d6      	beq.n	14ffe <__swbuf_r+0x52>
   15050:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15054:	e7d3      	b.n	14ffe <__swbuf_r+0x52>
   15056:	f7fc fe29 	bl	11cac <__sinit>
   1505a:	e7af      	b.n	14fbc <__swbuf_r+0x10>

0001505c <_wcsnrtombs_l>:
   1505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15060:	b08b      	sub	sp, #44	; 0x2c
   15062:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   15066:	9f14      	ldr	r7, [sp, #80]	; 0x50
   15068:	9103      	str	r1, [sp, #12]
   1506a:	4681      	mov	r9, r0
   1506c:	9205      	str	r2, [sp, #20]
   1506e:	461e      	mov	r6, r3
   15070:	f1b8 0f00 	cmp.w	r8, #0
   15074:	d05c      	beq.n	15130 <_wcsnrtombs_l+0xd4>
   15076:	9b03      	ldr	r3, [sp, #12]
   15078:	2b00      	cmp	r3, #0
   1507a:	d05e      	beq.n	1513a <_wcsnrtombs_l+0xde>
   1507c:	9b05      	ldr	r3, [sp, #20]
   1507e:	681d      	ldr	r5, [r3, #0]
   15080:	2f00      	cmp	r7, #0
   15082:	d06a      	beq.n	1515a <_wcsnrtombs_l+0xfe>
   15084:	1e74      	subs	r4, r6, #1
   15086:	b34e      	cbz	r6, 150dc <_wcsnrtombs_l+0x80>
   15088:	9b03      	ldr	r3, [sp, #12]
   1508a:	9304      	str	r3, [sp, #16]
   1508c:	3d04      	subs	r5, #4
   1508e:	2600      	movs	r6, #0
   15090:	9501      	str	r5, [sp, #4]
   15092:	e00b      	b.n	150ac <_wcsnrtombs_l+0x50>
   15094:	9b03      	ldr	r3, [sp, #12]
   15096:	bb2b      	cbnz	r3, 150e4 <_wcsnrtombs_l+0x88>
   15098:	9b01      	ldr	r3, [sp, #4]
   1509a:	681a      	ldr	r2, [r3, #0]
   1509c:	2a00      	cmp	r2, #0
   1509e:	d03a      	beq.n	15116 <_wcsnrtombs_l+0xba>
   150a0:	45bc      	cmp	ip, r7
   150a2:	d25c      	bcs.n	1515e <_wcsnrtombs_l+0x102>
   150a4:	3c01      	subs	r4, #1
   150a6:	1c63      	adds	r3, r4, #1
   150a8:	4666      	mov	r6, ip
   150aa:	d017      	beq.n	150dc <_wcsnrtombs_l+0x80>
   150ac:	f8d8 3000 	ldr.w	r3, [r8]
   150b0:	9302      	str	r3, [sp, #8]
   150b2:	9b01      	ldr	r3, [sp, #4]
   150b4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   150b8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   150bc:	9301      	str	r3, [sp, #4]
   150be:	a907      	add	r1, sp, #28
   150c0:	4643      	mov	r3, r8
   150c2:	4648      	mov	r0, r9
   150c4:	f8d8 b004 	ldr.w	fp, [r8, #4]
   150c8:	47a8      	blx	r5
   150ca:	1c42      	adds	r2, r0, #1
   150cc:	d03a      	beq.n	15144 <_wcsnrtombs_l+0xe8>
   150ce:	eb00 0c06 	add.w	ip, r0, r6
   150d2:	45bc      	cmp	ip, r7
   150d4:	d9de      	bls.n	15094 <_wcsnrtombs_l+0x38>
   150d6:	9b02      	ldr	r3, [sp, #8]
   150d8:	e9c8 3b00 	strd	r3, fp, [r8]
   150dc:	4630      	mov	r0, r6
   150de:	b00b      	add	sp, #44	; 0x2c
   150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e4:	2800      	cmp	r0, #0
   150e6:	dd0e      	ble.n	15106 <_wcsnrtombs_l+0xaa>
   150e8:	9b04      	ldr	r3, [sp, #16]
   150ea:	9d01      	ldr	r5, [sp, #4]
   150ec:	4418      	add	r0, r3
   150ee:	1e5a      	subs	r2, r3, #1
   150f0:	a907      	add	r1, sp, #28
   150f2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   150f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   150fa:	f802 3f01 	strb.w	r3, [r2, #1]!
   150fe:	4572      	cmp	r2, lr
   15100:	d1f9      	bne.n	150f6 <_wcsnrtombs_l+0x9a>
   15102:	9501      	str	r5, [sp, #4]
   15104:	9004      	str	r0, [sp, #16]
   15106:	9b05      	ldr	r3, [sp, #20]
   15108:	681a      	ldr	r2, [r3, #0]
   1510a:	3204      	adds	r2, #4
   1510c:	601a      	str	r2, [r3, #0]
   1510e:	9b01      	ldr	r3, [sp, #4]
   15110:	681a      	ldr	r2, [r3, #0]
   15112:	2a00      	cmp	r2, #0
   15114:	d1c4      	bne.n	150a0 <_wcsnrtombs_l+0x44>
   15116:	9b03      	ldr	r3, [sp, #12]
   15118:	b10b      	cbz	r3, 1511e <_wcsnrtombs_l+0xc2>
   1511a:	9b05      	ldr	r3, [sp, #20]
   1511c:	601a      	str	r2, [r3, #0]
   1511e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   15122:	2200      	movs	r2, #0
   15124:	4630      	mov	r0, r6
   15126:	f8c8 2000 	str.w	r2, [r8]
   1512a:	b00b      	add	sp, #44	; 0x2c
   1512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15130:	9b03      	ldr	r3, [sp, #12]
   15132:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   15136:	2b00      	cmp	r3, #0
   15138:	d1a0      	bne.n	1507c <_wcsnrtombs_l+0x20>
   1513a:	9b05      	ldr	r3, [sp, #20]
   1513c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15140:	681d      	ldr	r5, [r3, #0]
   15142:	e79f      	b.n	15084 <_wcsnrtombs_l+0x28>
   15144:	4606      	mov	r6, r0
   15146:	218a      	movs	r1, #138	; 0x8a
   15148:	2200      	movs	r2, #0
   1514a:	4630      	mov	r0, r6
   1514c:	f8c9 1000 	str.w	r1, [r9]
   15150:	f8c8 2000 	str.w	r2, [r8]
   15154:	b00b      	add	sp, #44	; 0x2c
   15156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1515a:	463e      	mov	r6, r7
   1515c:	e7be      	b.n	150dc <_wcsnrtombs_l+0x80>
   1515e:	4666      	mov	r6, ip
   15160:	e7bc      	b.n	150dc <_wcsnrtombs_l+0x80>
   15162:	bf00      	nop

00015164 <_wcsnrtombs_r>:
   15164:	b510      	push	{r4, lr}
   15166:	b084      	sub	sp, #16
   15168:	4c05      	ldr	r4, [pc, #20]	; (15180 <_wcsnrtombs_r+0x1c>)
   1516a:	9806      	ldr	r0, [sp, #24]
   1516c:	9000      	str	r0, [sp, #0]
   1516e:	9807      	ldr	r0, [sp, #28]
   15170:	9001      	str	r0, [sp, #4]
   15172:	4804      	ldr	r0, [pc, #16]	; (15184 <_wcsnrtombs_r+0x20>)
   15174:	6800      	ldr	r0, [r0, #0]
   15176:	9402      	str	r4, [sp, #8]
   15178:	f7ff ff70 	bl	1505c <_wcsnrtombs_l>
   1517c:	b004      	add	sp, #16
   1517e:	bd10      	pop	{r4, pc}
   15180:	20003204 	.word	0x20003204
   15184:	2000378c 	.word	0x2000378c

00015188 <___ZN7TwoWire5beginEv_veneer>:
   15188:	f85f f000 	ldr.w	pc, [pc]	; 1518c <___ZN7TwoWire5beginEv_veneer+0x4>
   1518c:	600017c9 	.word	0x600017c9

00015190 <___reboot_Teensyduino__veneer>:
   15190:	f85f f000 	ldr.w	pc, [pc]	; 15194 <___reboot_Teensyduino__veneer+0x4>
   15194:	60001ee5 	.word	0x60001ee5

00015198 <___init_veneer>:
   15198:	f85f f000 	ldr.w	pc, [pc]	; 1519c <___init_veneer+0x4>
   1519c:	60001f39 	.word	0x60001f39

Disassembly of section .fini:

000151a0 <_fini>:
   151a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   151a2:	bf00      	nop
