
/home/james/Documents/dRehmFlight/Versions/dRehmFlight_quad/build/dRehmFlight_quad.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001400:	b580      	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001402:	f000 fa5d 	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <ResetHandler2+0x1e0>)
60001408:	2208      	movs	r2, #8
6000140a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000140e:	4a75      	ldr	r2, [pc, #468]	; (600015e4 <ResetHandler2+0x1e4>)
60001410:	4b75      	ldr	r3, [pc, #468]	; (600015e8 <ResetHandler2+0x1e8>)
60001412:	429a      	cmp	r2, r3
60001414:	d00f      	beq.n	60001436 <ResetHandler2+0x36>
	while (dest < dest_end) {
60001416:	4b75      	ldr	r3, [pc, #468]	; (600015ec <ResetHandler2+0x1ec>)
60001418:	429a      	cmp	r2, r3
6000141a:	d20c      	bcs.n	60001436 <ResetHandler2+0x36>
6000141c:	1e58      	subs	r0, r3, #1
6000141e:	1a80      	subs	r0, r0, r2
60001420:	f020 0003 	bic.w	r0, r0, #3
60001424:	3004      	adds	r0, #4
60001426:	4b70      	ldr	r3, [pc, #448]	; (600015e8 <ResetHandler2+0x1e8>)
60001428:	4418      	add	r0, r3
		*dest++ = *src++;
6000142a:	f853 1b04 	ldr.w	r1, [r3], #4
6000142e:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
60001432:	4283      	cmp	r3, r0
60001434:	d1f9      	bne.n	6000142a <ResetHandler2+0x2a>
	if (dest == src) return;
60001436:	4a6e      	ldr	r2, [pc, #440]	; (600015f0 <ResetHandler2+0x1f0>)
60001438:	4b6e      	ldr	r3, [pc, #440]	; (600015f4 <ResetHandler2+0x1f4>)
6000143a:	429a      	cmp	r2, r3
6000143c:	d010      	beq.n	60001460 <ResetHandler2+0x60>
	while (dest < dest_end) {
6000143e:	4b6e      	ldr	r3, [pc, #440]	; (600015f8 <ResetHandler2+0x1f8>)
60001440:	429a      	cmp	r2, r3
60001442:	d20d      	bcs.n	60001460 <ResetHandler2+0x60>
60001444:	4a6a      	ldr	r2, [pc, #424]	; (600015f0 <ResetHandler2+0x1f0>)
60001446:	486d      	ldr	r0, [pc, #436]	; (600015fc <ResetHandler2+0x1fc>)
60001448:	1a80      	subs	r0, r0, r2
6000144a:	f020 0003 	bic.w	r0, r0, #3
6000144e:	3004      	adds	r0, #4
60001450:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <ResetHandler2+0x1f4>)
60001452:	4418      	add	r0, r3
		*dest++ = *src++;
60001454:	f853 1b04 	ldr.w	r1, [r3], #4
60001458:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
6000145c:	4283      	cmp	r3, r0
6000145e:	d1f9      	bne.n	60001454 <ResetHandler2+0x54>
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001460:	4a67      	ldr	r2, [pc, #412]	; (60001600 <ResetHandler2+0x200>)
60001462:	4b68      	ldr	r3, [pc, #416]	; (60001604 <ResetHandler2+0x204>)
60001464:	429a      	cmp	r2, r3
60001466:	d20b      	bcs.n	60001480 <ResetHandler2+0x80>
60001468:	4b65      	ldr	r3, [pc, #404]	; (60001600 <ResetHandler2+0x200>)
6000146a:	4a67      	ldr	r2, [pc, #412]	; (60001608 <ResetHandler2+0x208>)
6000146c:	1ad2      	subs	r2, r2, r3
6000146e:	f022 0203 	bic.w	r2, r2, #3
60001472:	3204      	adds	r2, #4
60001474:	441a      	add	r2, r3
		*dest++ = 0;
60001476:	2100      	movs	r1, #0
60001478:	f843 1b04 	str.w	r1, [r3], #4
	while (dest < dest_end) {
6000147c:	4293      	cmp	r3, r2
6000147e:	d1fb      	bne.n	60001478 <ResetHandler2+0x78>
	SCB_CPACR = 0x00F00000;
60001480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001484:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
60001488:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	2300      	movs	r3, #0
6000148e:	495f      	ldr	r1, [pc, #380]	; (6000160c <ResetHandler2+0x20c>)
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler2+0x210>)
60001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
60001496:	3301      	adds	r3, #1
60001498:	2bb0      	cmp	r3, #176	; 0xb0
6000149a:	d1fa      	bne.n	60001492 <ResetHandler2+0x92>
6000149c:	4b5d      	ldr	r3, [pc, #372]	; (60001614 <ResetHandler2+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149e:	2180      	movs	r1, #128	; 0x80
600014a0:	4a5d      	ldr	r2, [pc, #372]	; (60001618 <ResetHandler2+0x218>)
600014a2:	f803 1b01 	strb.w	r1, [r3], #1
600014a6:	4293      	cmp	r3, r2
600014a8:	d1fb      	bne.n	600014a2 <ResetHandler2+0xa2>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014aa:	4e58      	ldr	r6, [pc, #352]	; (6000160c <ResetHandler2+0x20c>)
600014ac:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014b0:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b4:	4d4a      	ldr	r5, [pc, #296]	; (600015e0 <ResetHandler2+0x1e0>)
600014b6:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014ba:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000164c <ResetHandler2+0x24c>
600014c2:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014c6:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ca:	f8df 9184 	ldr.w	r9, [pc, #388]	; 60001650 <ResetHandler2+0x250>
600014ce:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014da:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	4f4f      	ldr	r7, [pc, #316]	; (6000161c <ResetHandler2+0x21c>)
600014e0:	69fb      	ldr	r3, [r7, #28]
600014e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ea:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f6:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	4b49      	ldr	r3, [pc, #292]	; (60001620 <ResetHandler2+0x220>)
600014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014fe:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001500:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001502:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001504:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001506:	f000 f9e0 	bl	600018ca <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
6000150a:	4b46      	ldr	r3, [pc, #280]	; (60001624 <ResetHandler2+0x224>)
6000150c:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150e:	4b46      	ldr	r3, [pc, #280]	; (60001628 <ResetHandler2+0x228>)
60001510:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	2363      	movs	r3, #99	; 0x63
60001514:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
60001516:	2600      	movs	r6, #0
60001518:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151a:	2303      	movs	r3, #3
6000151c:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151e:	4b43      	ldr	r3, [pc, #268]	; (6000162c <ResetHandler2+0x22c>)
60001520:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001524:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
60001528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000152c:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001530:	4b3f      	ldr	r3, [pc, #252]	; (60001630 <ResetHandler2+0x230>)
60001532:	681a      	ldr	r2, [r3, #0]
60001534:	f042 0201 	orr.w	r2, r2, #1
60001538:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153a:	685a      	ldr	r2, [r3, #4]
6000153c:	4b3d      	ldr	r3, [pc, #244]	; (60001634 <ResetHandler2+0x234>)
6000153e:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001540:	f000 fb86 	bl	60001c50 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001544:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001548:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154c:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001550:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001554:	4838      	ldr	r0, [pc, #224]	; (60001638 <ResetHandler2+0x238>)
60001556:	f000 fd17 	bl	60001f88 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
6000155c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001560:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	4b36      	ldr	r3, [pc, #216]	; (6000163c <ResetHandler2+0x23c>)
60001564:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
60001566:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000156a:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001572:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001576:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
6000157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
6000157c:	f013 0f01 	tst.w	r3, #1
60001580:	d109      	bne.n	60001596 <ResetHandler2+0x196>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001582:	4b2f      	ldr	r3, [pc, #188]	; (60001640 <ResetHandler2+0x240>)
60001584:	4a2f      	ldr	r2, [pc, #188]	; (60001644 <ResetHandler2+0x244>)
60001586:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001588:	f642 6215 	movw	r2, #11797	; 0x2e15
6000158c:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000158e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001590:	f042 0201 	orr.w	r2, r2, #1
60001594:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001596:	4a2a      	ldr	r2, [pc, #168]	; (60001640 <ResetHandler2+0x240>)
60001598:	6893      	ldr	r3, [r2, #8]
6000159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000159e:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015a0:	f000 fa0c 	bl	600019bc <configure_external_ram>
	analog_init();
600015a4:	f000 f932 	bl	6000180c <analog_init>
	pwm_init();
600015a8:	f000 fcde 	bl	60001f68 <__pwm_init_veneer>
	tempmon_init();
600015ac:	f000 fb80 	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
600015b0:	f000 f987 	bl	600018c2 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b4:	4a24      	ldr	r2, [pc, #144]	; (60001648 <ResetHandler2+0x248>)
600015b6:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	2b13      	cmp	r3, #19
600015ba:	d9fc      	bls.n	600015b6 <ResetHandler2+0x1b6>
	usb_init();
600015bc:	f000 fc1c 	bl	60001df8 <usb_init>
600015c0:	4a21      	ldr	r2, [pc, #132]	; (60001648 <ResetHandler2+0x248>)
600015c2:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015c8:	d3fb      	bcc.n	600015c2 <ResetHandler2+0x1c2>
	startup_debug_reset();
600015ca:	f000 f97c 	bl	600018c6 <startup_debug_reset>
	startup_late_hook();
600015ce:	f000 f979 	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015d2:	f000 fcbd 	bl	60001f50 <____libc_init_array_veneer>
	main();
600015d6:	f000 fcbf 	bl	60001f58 <__main_veneer>
	while (1) asm("WFI");
600015da:	bf30      	wfi
600015dc:	e7fd      	b.n	600015da <ResetHandler2+0x1da>
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00000000 	.word	0x00000000
600015e8:	600021a4 	.word	0x600021a4
600015ec:	000154e8 	.word	0x000154e8
600015f0:	20000000 	.word	0x20000000
600015f4:	60017690 	.word	0x60017690
600015f8:	20003ec0 	.word	0x20003ec0
600015fc:	20003ebf 	.word	0x20003ebf
60001600:	20003ec0 	.word	0x20003ec0
60001604:	20005400 	.word	0x20005400
60001608:	200053ff 	.word	0x200053ff
6000160c:	20003c00 	.word	0x20003c00
60001610:	0000dd79 	.word	0x0000dd79
60001614:	e000e400 	.word	0xe000e400
60001618:	e000e4a0 	.word	0xe000e4a0
6000161c:	400fc000 	.word	0x400fc000
60001620:	400ac000 	.word	0x400ac000
60001624:	0000c101 	.word	0x0000c101
60001628:	0000c109 	.word	0x0000c109
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	20005384 	.word	0x20005384
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	20005388 	.word	0x20005388
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001654:	4b07      	ldr	r3, [pc, #28]	; (60001674 <ResetHandler+0x20>)
60001656:	4a08      	ldr	r2, [pc, #32]	; (60001678 <ResetHandler+0x24>)
60001658:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000165a:	4a08      	ldr	r2, [pc, #32]	; (6000167c <ResetHandler+0x28>)
6000165c:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165e:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
60001662:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001664:	4b06      	ldr	r3, [pc, #24]	; (60001680 <ResetHandler+0x2c>)
60001666:	469d      	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
60001668:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000166c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001670:	f7ff fec6 	bl	60001400 <ResetHandler2>
60001674:	400ac000 	.word	0x400ac000
60001678:	aaaaaabf 	.word	0xaaaaaabf
6000167c:	00200007 	.word	0x00200007
60001680:	20068000 	.word	0x20068000

60001684 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
60001684:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	4a0f      	ldr	r2, [pc, #60]	; (600016c4 <TwoWire::configSDApin(unsigned char)+0x40>)
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000168e:	7a1b      	ldrb	r3, [r3, #8]
60001690:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001694:	689b      	ldr	r3, [r3, #8]
60001696:	4c0c      	ldr	r4, [pc, #48]	; (600016c8 <TwoWire::configSDApin(unsigned char)+0x44>)
60001698:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000169a:	6943      	ldr	r3, [r0, #20]
6000169c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016a0:	f893 c008 	ldrb.w	ip, [r3, #8]
600016a4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016a8:	6852      	ldr	r2, [r2, #4]
600016aa:	68db      	ldr	r3, [r3, #12]
600016ac:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ae:	6943      	ldr	r3, [r0, #20]
600016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016b4:	690b      	ldr	r3, [r1, #16]
600016b6:	b10b      	cbz	r3, 600016bc <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016b8:	694a      	ldr	r2, [r1, #20]
600016ba:	601a      	str	r2, [r3, #0]
	}
}
600016bc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016c0:	4770      	bx	lr
600016c2:	bf00      	nop
600016c4:	2000293c 	.word	0x2000293c
600016c8:	0001f861 	.word	0x0001f861

600016cc <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016cc:	b538      	push	{r3, r4, r5, lr}
600016ce:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016d0:	6943      	ldr	r3, [r0, #20]
600016d2:	7e02      	ldrb	r2, [r0, #24]
600016d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016d8:	7a10      	ldrb	r0, [r2, #8]
600016da:	4288      	cmp	r0, r1
600016dc:	d009      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016de:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016e0:	2aff      	cmp	r2, #255	; 0xff
600016e2:	d006      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016e4:	4291      	cmp	r1, r2
600016e6:	d007      	beq.n	600016f8 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016e8:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
600016ea:	2aff      	cmp	r2, #255	; 0xff
600016ec:	d001      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016ee:	428a      	cmp	r2, r1
600016f0:	d000      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x28>
}
600016f2:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016f4:	2501      	movs	r5, #1
600016f6:	e000      	b.n	600016fa <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
600016f8:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016fa:	681a      	ldr	r2, [r3, #0]
600016fc:	6812      	ldr	r2, [r2, #0]
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	421a      	tst	r2, r3
60001702:	d101      	bne.n	60001708 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001704:	7625      	strb	r5, [r4, #24]
60001706:	e7f4      	b.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001708:	4b05      	ldr	r3, [pc, #20]	; (60001720 <TwoWire::setSDA(unsigned char)+0x54>)
6000170a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000170e:	685b      	ldr	r3, [r3, #4]
60001710:	2205      	movs	r2, #5
60001712:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001714:	4629      	mov	r1, r5
60001716:	4620      	mov	r0, r4
60001718:	f7ff ffb4 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
6000171c:	e7f2      	b.n	60001704 <TwoWire::setSDA(unsigned char)+0x38>
6000171e:	bf00      	nop
60001720:	2000293c 	.word	0x2000293c

60001724 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001724:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001726:	4a0f      	ldr	r2, [pc, #60]	; (60001764 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
60001732:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001736:	689b      	ldr	r3, [r3, #8]
60001738:	4c0b      	ldr	r4, [pc, #44]	; (60001768 <TwoWire::configSCLpin(unsigned char)+0x44>)
6000173a:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000173c:	6943      	ldr	r3, [r0, #20]
6000173e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
60001742:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001746:	eb02 120c 	add.w	r2, r2, ip, lsl #4
6000174a:	6852      	ldr	r2, [r2, #4]
6000174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000174e:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001750:	6943      	ldr	r3, [r0, #20]
60001752:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001758:	b10b      	cbz	r3, 6000175e <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000175a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
6000175c:	601a      	str	r2, [r3, #0]
	}
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001762:	4770      	bx	lr
60001764:	2000293c 	.word	0x2000293c
60001768:	0001f861 	.word	0x0001f861

6000176c <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000176c:	b538      	push	{r3, r4, r5, lr}
6000176e:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001770:	6943      	ldr	r3, [r0, #20]
60001772:	7e42      	ldrb	r2, [r0, #25]
60001774:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001778:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
6000177c:	4288      	cmp	r0, r1
6000177e:	d00b      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001780:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001784:	2aff      	cmp	r2, #255	; 0xff
60001786:	d007      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001788:	4291      	cmp	r1, r2
6000178a:	d008      	beq.n	6000179e <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
60001790:	2aff      	cmp	r2, #255	; 0xff
60001792:	d001      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001794:	428a      	cmp	r2, r1
60001796:	d000      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x2e>
}
60001798:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000179a:	2501      	movs	r5, #1
6000179c:	e000      	b.n	600017a0 <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
6000179e:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a0:	681a      	ldr	r2, [r3, #0]
600017a2:	6812      	ldr	r2, [r2, #0]
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	421a      	tst	r2, r3
600017a8:	d101      	bne.n	600017ae <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017aa:	7665      	strb	r5, [r4, #25]
600017ac:	e7f4      	b.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	4b05      	ldr	r3, [pc, #20]	; (600017c4 <TwoWire::setSCL(unsigned char)+0x58>)
600017b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	2205      	movs	r2, #5
600017b8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017ba:	4629      	mov	r1, r5
600017bc:	4620      	mov	r0, r4
600017be:	f7ff ffb1 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
600017c2:	e7f2      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x3e>
600017c4:	2000293c 	.word	0x2000293c

600017c8 <TwoWire::begin()>:
{
600017c8:	b510      	push	{r4, lr}
600017ca:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	4a0d      	ldr	r2, [pc, #52]	; (60001804 <TwoWire::begin()+0x3c>)
600017ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
600017d0:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600017d8:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6941      	ldr	r1, [r0, #20]
600017dc:	680a      	ldr	r2, [r1, #0]
600017de:	6813      	ldr	r3, [r2, #0]
600017e0:	6849      	ldr	r1, [r1, #4]
600017e2:	430b      	orrs	r3, r1
600017e4:	6013      	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017e6:	6903      	ldr	r3, [r0, #16]
600017e8:	2202      	movs	r2, #2
600017ea:	611a      	str	r2, [r3, #16]
	setClock(100000);
600017ec:	4906      	ldr	r1, [pc, #24]	; (60001808 <TwoWire::begin()+0x40>)
600017ee:	f000 fbab 	bl	60001f48 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017f2:	7e21      	ldrb	r1, [r4, #24]
600017f4:	4620      	mov	r0, r4
600017f6:	f7ff ff45 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017fa:	7e61      	ldrb	r1, [r4, #25]
600017fc:	4620      	mov	r0, r4
600017fe:	f7ff ff91 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
}
60001802:	bd10      	pop	{r4, pc}
60001804:	400fc000 	.word	0x400fc000
60001808:	000186a0 	.word	0x000186a0

6000180c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000180c:	4b11      	ldr	r3, [pc, #68]	; (60001854 <analog_init+0x48>)
6000180e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001810:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001814:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001818:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000181c:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000181e:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
60001822:	f240 6237 	movw	r2, #1591	; 0x637
60001826:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001828:	22a0      	movs	r2, #160	; 0xa0
6000182a:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000182c:	461a      	mov	r2, r3
6000182e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001830:	f013 0f80 	tst.w	r3, #128	; 0x80
60001834:	d1fb      	bne.n	6000182e <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001836:	4b08      	ldr	r3, [pc, #32]	; (60001858 <analog_init+0x4c>)
60001838:	f240 6237 	movw	r2, #1591	; 0x637
6000183c:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000183e:	22a0      	movs	r2, #160	; 0xa0
60001840:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001842:	461a      	mov	r2, r3
60001844:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001846:	f013 0f80 	tst.w	r3, #128	; 0x80
6000184a:	d1fb      	bne.n	60001844 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
6000184c:	4b03      	ldr	r3, [pc, #12]	; (6000185c <analog_init+0x50>)
6000184e:	2200      	movs	r2, #0
60001850:	701a      	strb	r2, [r3, #0]
}
60001852:	4770      	bx	lr
60001854:	400fc000 	.word	0x400fc000
60001858:	400c8000 	.word	0x400c8000
6000185c:	200053c9 	.word	0x200053c9

60001860 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001860:	4b09      	ldr	r3, [pc, #36]	; (60001888 <flexspi2_command+0x28>)
60001862:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001866:	0400      	lsls	r0, r0, #16
60001868:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
6000186c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001870:	2201      	movs	r2, #1
60001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001876:	461a      	mov	r2, r3
60001878:	6953      	ldr	r3, [r2, #20]
6000187a:	f013 0f01 	tst.w	r3, #1
6000187e:	d0fb      	beq.n	60001878 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001880:	4b01      	ldr	r3, [pc, #4]	; (60001888 <flexspi2_command+0x28>)
60001882:	2201      	movs	r2, #1
60001884:	615a      	str	r2, [r3, #20]
}
60001886:	4770      	bx	lr
60001888:	402a4000 	.word	0x402a4000

6000188c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000188c:	4b0a      	ldr	r3, [pc, #40]	; (600018b8 <flexspi2_psram_id+0x2c>)
6000188e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001892:	4a0a      	ldr	r2, [pc, #40]	; (600018bc <flexspi2_psram_id+0x30>)
60001894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001898:	2201      	movs	r2, #1
6000189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000189e:	461a      	mov	r2, r3
600018a0:	6953      	ldr	r3, [r2, #20]
600018a2:	f013 0f01 	tst.w	r3, #1
600018a6:	d0fb      	beq.n	600018a0 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
600018a8:	4b03      	ldr	r3, [pc, #12]	; (600018b8 <flexspi2_psram_id+0x2c>)
600018aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600018ae:	2221      	movs	r2, #33	; 0x21
600018b0:	615a      	str	r2, [r3, #20]
}
600018b2:	b280      	uxth	r0, r0
600018b4:	4770      	bx	lr
600018b6:	bf00      	nop
600018b8:	402a4000 	.word	0x402a4000
600018bc:	00030004 	.word	0x00030004

600018c0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018c0:	4770      	bx	lr

600018c2 <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
600018c2:	4770      	bx	lr

600018c4 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	4770      	bx	lr

600018c6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018c6:	bf00      	nop
600018c8:	4770      	bx	lr

600018ca <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018ce:	2100      	movs	r1, #0
600018d0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	2210      	movs	r2, #16
600018d6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018da:	4a28      	ldr	r2, [pc, #160]	; (6000197c <configure_cache+0xb2>)
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018e0:	2211      	movs	r2, #17
600018e2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018e6:	4a26      	ldr	r2, [pc, #152]	; (60001980 <configure_cache+0xb6>)
600018e8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018ec:	2212      	movs	r2, #18
600018ee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018f2:	4a24      	ldr	r2, [pc, #144]	; (60001984 <configure_cache+0xba>)
600018f4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018f8:	4a23      	ldr	r2, [pc, #140]	; (60001988 <configure_cache+0xbe>)
600018fa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018fe:	4a23      	ldr	r2, [pc, #140]	; (6000198c <configure_cache+0xc2>)
60001900:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001904:	4a22      	ldr	r2, [pc, #136]	; (60001990 <configure_cache+0xc6>)
60001906:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000190a:	4a22      	ldr	r2, [pc, #136]	; (60001994 <configure_cache+0xca>)
6000190c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001910:	4a21      	ldr	r2, [pc, #132]	; (60001998 <configure_cache+0xce>)
60001912:	f042 0215 	orr.w	r2, r2, #21
60001916:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000191a:	4a20      	ldr	r2, [pc, #128]	; (6000199c <configure_cache+0xd2>)
6000191c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001920:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
60001924:	320d      	adds	r2, #13
60001926:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000192a:	4a1d      	ldr	r2, [pc, #116]	; (600019a0 <configure_cache+0xd6>)
6000192c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001930:	4a1c      	ldr	r2, [pc, #112]	; (600019a4 <configure_cache+0xda>)
60001932:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001936:	4a1c      	ldr	r2, [pc, #112]	; (600019a8 <configure_cache+0xde>)
60001938:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000193c:	4a1b      	ldr	r2, [pc, #108]	; (600019ac <configure_cache+0xe2>)
6000193e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001942:	4a1b      	ldr	r2, [pc, #108]	; (600019b0 <configure_cache+0xe6>)
60001944:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001948:	4a1a      	ldr	r2, [pc, #104]	; (600019b4 <configure_cache+0xea>)
6000194a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000194e:	4a1a      	ldr	r2, [pc, #104]	; (600019b8 <configure_cache+0xee>)
60001950:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001954:	2201      	movs	r2, #1
60001956:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000195a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000195e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001962:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000196e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60001972:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001976:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000197a:	4770      	bx	lr
6000197c:	1000003f 	.word	0x1000003f
60001980:	03080025 	.word	0x03080025
60001984:	00100009 	.word	0x00100009
60001988:	00200013 	.word	0x00200013
6000198c:	07020021 	.word	0x07020021
60001990:	20000014 	.word	0x20000014
60001994:	13080025 	.word	0x13080025
60001998:	20005400 	.word	0x20005400
6000199c:	10000009 	.word	0x10000009
600019a0:	130b0027 	.word	0x130b0027
600019a4:	40000017 	.word	0x40000017
600019a8:	13100033 	.word	0x13100033
600019ac:	60000018 	.word	0x60000018
600019b0:	070b002f 	.word	0x070b002f
600019b4:	70000019 	.word	0x70000019
600019b8:	130b002f 	.word	0x130b002f

600019bc <configure_external_ram>:
{
600019bc:	b510      	push	{r4, lr}
600019be:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019c0:	4b8c      	ldr	r3, [pc, #560]	; (60001bf4 <configure_external_ram+0x238>)
600019c2:	4a8d      	ldr	r2, [pc, #564]	; (60001bf8 <configure_external_ram+0x23c>)
600019c4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019c8:	498c      	ldr	r1, [pc, #560]	; (60001bfc <configure_external_ram+0x240>)
600019ca:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600019d2:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
600019d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019da:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
600019de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019ea:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019ee:	2218      	movs	r2, #24
600019f0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019f2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019f4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019f6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019f8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
60001a0a:	2201      	movs	r2, #1
60001a0c:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a10:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a14:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a18:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a1c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a20:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a24:	4b76      	ldr	r3, [pc, #472]	; (60001c00 <configure_external_ram+0x244>)
60001a26:	699a      	ldr	r2, [r3, #24]
60001a28:	4976      	ldr	r1, [pc, #472]	; (60001c04 <configure_external_ram+0x248>)
60001a2a:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a2c:	4a76      	ldr	r2, [pc, #472]	; (60001c08 <configure_external_ram+0x24c>)
60001a2e:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a30:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
60001a36:	f042 020c 	orr.w	r2, r2, #12
60001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a3e:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
60001a42:	681a      	ldr	r2, [r3, #0]
60001a44:	f042 0202 	orr.w	r2, r2, #2
60001a48:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a4a:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a4c:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
60001a50:	f021 0173 	bic.w	r1, r1, #115	; 0x73
60001a54:	0409      	lsls	r1, r1, #16
60001a56:	0c09      	lsrs	r1, r1, #16
60001a58:	4a6c      	ldr	r2, [pc, #432]	; (60001c0c <configure_external_ram+0x250>)
60001a5a:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a5c:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60001a62:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a64:	496a      	ldr	r1, [pc, #424]	; (60001c10 <configure_external_ram+0x254>)
60001a66:	6888      	ldr	r0, [r1, #8]
60001a68:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60001a6c:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60001a70:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a76:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a78:	68da      	ldr	r2, [r3, #12]
60001a7a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60001a7e:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a80:	6a1a      	ldr	r2, [r3, #32]
60001a82:	4c64      	ldr	r4, [pc, #400]	; (60001c14 <configure_external_ram+0x258>)
60001a84:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a86:	4864      	ldr	r0, [pc, #400]	; (60001c18 <configure_external_ram+0x25c>)
60001a88:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8a:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8c:	6a1a      	ldr	r2, [r3, #32]
60001a8e:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a90:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a92:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a94:	4a61      	ldr	r2, [pc, #388]	; (60001c1c <configure_external_ram+0x260>)
60001a96:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a9a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60001a9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001aa2:	f042 0201 	orr.w	r2, r2, #1
60001aa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aaa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60001aae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001ab2:	f042 0201 	orr.w	r2, r2, #1
60001ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001aba:	2200      	movs	r2, #0
60001abc:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
60001ac2:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ac4:	4956      	ldr	r1, [pc, #344]	; (60001c20 <configure_external_ram+0x264>)
60001ac6:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ac8:	f240 6205 	movw	r2, #1541	; 0x605
60001acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001ad0:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001ad8:	681a      	ldr	r2, [r3, #0]
60001ada:	f022 0202 	bic.w	r2, r2, #2
60001ade:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ae0:	4a50      	ldr	r2, [pc, #320]	; (60001c24 <configure_external_ram+0x268>)
60001ae2:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ae4:	2202      	movs	r2, #2
60001ae6:	61da      	str	r2, [r3, #28]
60001ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001aec:	2100      	movs	r1, #0
60001aee:	4a4e      	ldr	r2, [pc, #312]	; (60001c28 <configure_external_ram+0x26c>)
60001af0:	f843 1b04 	str.w	r1, [r3], #4
60001af4:	4293      	cmp	r3, r2
60001af6:	d1fb      	bne.n	60001af0 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001af8:	4a4c      	ldr	r2, [pc, #304]	; (60001c2c <configure_external_ram+0x270>)
60001afa:	6813      	ldr	r3, [r2, #0]
60001afc:	f043 0301 	orr.w	r3, r3, #1
60001b00:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b02:	6813      	ldr	r3, [r2, #0]
60001b04:	f013 0f01 	tst.w	r3, #1
60001b08:	d1fb      	bne.n	60001b02 <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	4b48      	ldr	r3, [pc, #288]	; (60001c2c <configure_external_ram+0x270>)
60001b0c:	4a45      	ldr	r2, [pc, #276]	; (60001c24 <configure_external_ram+0x268>)
60001b0e:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
60001b12:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b14:	f240 62f5 	movw	r2, #1781	; 0x6f5
60001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b1c:	f240 4266 	movw	r2, #1126	; 0x466
60001b20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b24:	f240 4299 	movw	r2, #1177	; 0x499
60001b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b2c:	4a40      	ldr	r2, [pc, #256]	; (60001c30 <configure_external_ram+0x274>)
60001b2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b32:	f242 4201 	movw	r2, #9217	; 0x2401
60001b36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b3a:	f240 4235 	movw	r2, #1077	; 0x435
60001b3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b42:	4a3c      	ldr	r2, [pc, #240]	; (60001c34 <configure_external_ram+0x278>)
60001b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b48:	4a3b      	ldr	r2, [pc, #236]	; (60001c38 <configure_external_ram+0x27c>)
60001b4a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b4e:	4a3b      	ldr	r2, [pc, #236]	; (60001c3c <configure_external_ram+0x280>)
60001b50:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b54:	f242 2201 	movw	r2, #8705	; 0x2201
60001b58:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b5c:	2100      	movs	r1, #0
60001b5e:	4608      	mov	r0, r1
60001b60:	f7ff fe7e 	bl	60001860 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b64:	2100      	movs	r1, #0
60001b66:	2001      	movs	r0, #1
60001b68:	f7ff fe7a 	bl	60001860 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b6c:	2100      	movs	r1, #0
60001b6e:	4620      	mov	r0, r4
60001b70:	f7ff fe76 	bl	60001860 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b74:	2000      	movs	r0, #0
60001b76:	f7ff fe89 	bl	6000188c <flexspi2_psram_id>
60001b7a:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001b7e:	4298      	cmp	r0, r3
60001b80:	d007      	beq.n	60001b92 <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b82:	4b2f      	ldr	r3, [pc, #188]	; (60001c40 <configure_external_ram+0x284>)
60001b84:	2200      	movs	r2, #0
60001b86:	601a      	str	r2, [r3, #0]
60001b88:	605a      	str	r2, [r3, #4]
60001b8a:	609a      	str	r2, [r3, #8]
60001b8c:	60da      	str	r2, [r3, #12]
}
60001b8e:	b002      	add	sp, #8
60001b90:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
60001b92:	2100      	movs	r1, #0
60001b94:	2004      	movs	r0, #4
60001b96:	f7ff fe63 	bl	60001860 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b9a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001b9e:	2000      	movs	r0, #0
60001ba0:	f7ff fe5e 	bl	60001860 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001ba8:	2001      	movs	r0, #1
60001baa:	f7ff fe59 	bl	60001860 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001bae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bb2:	4620      	mov	r0, r4
60001bb4:	f7ff fe54 	bl	60001860 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60001bbc:	f7ff fe66 	bl	6000188c <flexspi2_psram_id>
60001bc0:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001bc4:	4298      	cmp	r0, r3
60001bc6:	d00e      	beq.n	60001be6 <configure_external_ram+0x22a>
60001bc8:	2008      	movs	r0, #8
			external_psram_size = 16;
60001bca:	4b1e      	ldr	r3, [pc, #120]	; (60001c44 <configure_external_ram+0x288>)
60001bcc:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60001bce:	491e      	ldr	r1, [pc, #120]	; (60001c48 <configure_external_ram+0x28c>)
60001bd0:	4a1e      	ldr	r2, [pc, #120]	; (60001c4c <configure_external_ram+0x290>)
60001bd2:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd4:	2300      	movs	r3, #0
60001bd6:	9300      	str	r3, [sp, #0]
60001bd8:	2301      	movs	r3, #1
60001bda:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60001bde:	4818      	ldr	r0, [pc, #96]	; (60001c40 <configure_external_ram+0x284>)
60001be0:	f000 f9be 	bl	60001f60 <__sm_set_pool_veneer>
60001be4:	e7d3      	b.n	60001b8e <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
60001be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bea:	2004      	movs	r0, #4
60001bec:	f7ff fe38 	bl	60001860 <flexspi2_command>
			external_psram_size = 16;
60001bf0:	2010      	movs	r0, #16
60001bf2:	e7ea      	b.n	60001bca <configure_external_ram+0x20e>
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	400fc000 	.word	0x400fc000
60001c04:	1ffffcff 	.word	0x1ffffcff
60001c08:	a0000300 	.word	0xa0000300
60001c0c:	ffff0012 	.word	0xffff0012
60001c10:	402a8000 	.word	0x402a8000
60001c14:	7cf0ff00 	.word	0x7cf0ff00
60001c18:	80000040 	.word	0x80000040
60001c1c:	830f00ff 	.word	0x830f00ff
60001c20:	00020063 	.word	0x00020063
60001c24:	5af05af0 	.word	0x5af05af0
60001c28:	402a4300 	.word	0x402a4300
60001c2c:	402a4000 	.word	0x402a4000
60001c30:	3018049f 	.word	0x3018049f
60001c34:	0a1806eb 	.word	0x0a1806eb
60001c38:	26013206 	.word	0x26013206
60001c3c:	0a180638 	.word	0x0a180638
60001c40:	2000509c 	.word	0x2000509c
60001c44:	200053cc 	.word	0x200053cc
60001c48:	70000000 	.word	0x70000000
60001c4c:	70000000 	.word	0x70000000

60001c50 <usb_pll_start>:
{
60001c50:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c52:	4a16      	ldr	r2, [pc, #88]	; (60001cac <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c54:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	f243 0042 	movw	r0, #12354	; 0x3042
60001c6a:	e002      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c6e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c70:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c74:	f013 0f02 	tst.w	r3, #2
60001c78:	d1f8      	bne.n	60001c6c <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c7e:	d00c      	beq.n	60001c9a <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c84:	d00b      	beq.n	60001c9e <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c86:	2b00      	cmp	r3, #0
60001c88:	daf3      	bge.n	60001c72 <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c8e:	d108      	bne.n	60001ca2 <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
60001c94:	d007      	beq.n	60001ca6 <usb_pll_start+0x56>
}
60001c96:	bcf0      	pop	{r4, r5, r6, r7}
60001c98:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c9a:	6155      	str	r5, [r2, #20]
			continue;
60001c9c:	e7e9      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	6156      	str	r6, [r2, #20]
			continue;
60001ca0:	e7e7      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ca2:	6191      	str	r1, [r2, #24]
			continue;
60001ca4:	e7e5      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca6:	6157      	str	r7, [r2, #20]
			continue;
60001ca8:	e7e3      	b.n	60001c72 <usb_pll_start+0x22>
60001caa:	bf00      	nop
60001cac:	400d8000 	.word	0x400d8000

60001cb0 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cb0:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb2:	4b45      	ldr	r3, [pc, #276]	; (60001dc8 <tempmon_init+0x118>)
60001cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001cb8:	f022 0201 	bic.w	r2, r2, #1
60001cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc0:	2203      	movs	r2, #3
60001cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc6:	4a41      	ldr	r2, [pc, #260]	; (60001dcc <tempmon_init+0x11c>)
60001cc8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ccc:	b2d1      	uxtb	r1, r2
60001cce:	4c40      	ldr	r4, [pc, #256]	; (60001dd0 <tempmon_init+0x120>)
60001cd0:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd2:	f3c2 200b 	ubfx	r0, r2, #8, #12
60001cd6:	4d3f      	ldr	r5, [pc, #252]	; (60001dd4 <tempmon_init+0x124>)
60001cd8:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cda:	ee07 1a90 	vmov	s15, r1
60001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
60001ce2:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
60001ce6:	ee37 6a64 	vsub.f32	s12, s14, s9
60001cea:	493b      	ldr	r1, [pc, #236]	; (60001dd8 <tempmon_init+0x128>)
60001cec:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cf0:	ee07 0a90 	vmov	s15, r0
60001cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf8:	0d12      	lsrs	r2, r2, #20
60001cfa:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d02:	ee77 7ae6 	vsub.f32	s15, s15, s13
60001d06:	4835      	ldr	r0, [pc, #212]	; (60001ddc <tempmon_init+0x12c>)
60001d08:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 60001de0 <tempmon_init+0x130>
60001d14:	ee37 7a65 	vsub.f32	s14, s14, s11
60001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
60001d1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
60001d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
60001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d28:	ee17 ca90 	vmov	ip, s15
60001d2c:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
60001d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	ed95 6a00 	vldr	s12, [r5]
60001d38:	eeb8 6a46 	vcvt.f32.u32	s12, s12
60001d3c:	edd4 7a00 	vldr	s15, [r4]
60001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d44:	ed90 5a00 	vldr	s10, [r0]
60001d48:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	eddf 6a24 	vldr	s13, [pc, #144]	; 60001de4 <tempmon_init+0x134>
60001d54:	ee77 6ae6 	vsub.f32	s13, s15, s13
60001d58:	ee66 6a85 	vmul.f32	s13, s13, s10
60001d5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
60001d60:	ee37 7a06 	vadd.f32	s14, s14, s12
60001d64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	4a1f      	ldr	r2, [pc, #124]	; (60001de8 <tempmon_init+0x138>)
60001d6a:	ee17 0a10 	vmov	r0, s14
60001d6e:	ea02 4200 	and.w	r2, r2, r0, lsl #16
60001d72:	430a      	orrs	r2, r1
60001d74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d78:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
60001d80:	ee27 7a85 	vmul.f32	s14, s15, s10
60001d84:	eec7 7a25 	vdiv.f32	s15, s14, s11
60001d88:	ee77 7a86 	vadd.f32	s15, s15, s12
60001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60001d90:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d94:	f3c2 020b 	ubfx	r2, r2, #0, #12
60001d98:	430a      	orrs	r2, r1
60001d9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001da2:	f042 0202 	orr.w	r2, r2, #2
60001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001daa:	4b10      	ldr	r3, [pc, #64]	; (60001dec <tempmon_init+0x13c>)
60001dac:	2200      	movs	r2, #0
60001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001db2:	4b0f      	ldr	r3, [pc, #60]	; (60001df0 <tempmon_init+0x140>)
60001db4:	4a0f      	ldr	r2, [pc, #60]	; (60001df4 <tempmon_init+0x144>)
60001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dbe:	2201      	movs	r2, #1
60001dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dc4:	bc30      	pop	{r4, r5}
60001dc6:	4770      	bx	lr
60001dc8:	400d8100 	.word	0x400d8100
60001dcc:	401f4400 	.word	0x401f4400
60001dd0:	200051ec 	.word	0x200051ec
60001dd4:	200051e8 	.word	0x200051e8
60001dd8:	200051f0 	.word	0x200051f0
60001ddc:	200051f4 	.word	0x200051f4
60001de0:	42aa0000 	.word	0x42aa0000
60001de4:	42b40000 	.word	0x42b40000
60001de8:	0fff0000 	.word	0x0fff0000
60001dec:	e000e400 	.word	0xe000e400
60001df0:	20003c00 	.word	0x20003c00
60001df4:	0000df57 	.word	0x0000df57

60001df8 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001df8:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001dfa:	4b32      	ldr	r3, [pc, #200]	; (60001ec4 <usb_init+0xcc>)
60001dfc:	f640 7261 	movw	r2, #3937	; 0xf61
60001e00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001e04:	f000 f8b4 	bl	60001f70 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e08:	4a2f      	ldr	r2, [pc, #188]	; (60001ec8 <usb_init+0xd0>)
60001e0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e0e:	f043 0303 	orr.w	r3, r3, #3
60001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e16:	4b2d      	ldr	r3, [pc, #180]	; (60001ecc <usb_init+0xd4>)
60001e18:	f240 4204 	movw	r2, #1028	; 0x404
60001e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e20:	4b2b      	ldr	r3, [pc, #172]	; (60001ed0 <usb_init+0xd8>)
60001e22:	681a      	ldr	r2, [r3, #0]
60001e24:	4b2b      	ldr	r3, [pc, #172]	; (60001ed4 <usb_init+0xdc>)
60001e26:	421a      	tst	r2, r3
60001e28:	d105      	bne.n	60001e36 <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e2a:	4b28      	ldr	r3, [pc, #160]	; (60001ecc <usb_init+0xd4>)
60001e2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
60001e30:	f013 0f03 	tst.w	r3, #3
60001e34:	d01c      	beq.n	60001e70 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e36:	4b26      	ldr	r3, [pc, #152]	; (60001ed0 <usb_init+0xd8>)
60001e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e3c:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e3e:	4a23      	ldr	r2, [pc, #140]	; (60001ecc <usb_init+0xd4>)
60001e40:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e44:	f043 0302 	orr.w	r3, r3, #2
60001e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e4c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e50:	f013 0f02 	tst.w	r3, #2
60001e54:	d1fa      	bne.n	60001e4c <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001e5e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e62:	4b1b      	ldr	r3, [pc, #108]	; (60001ed0 <usb_init+0xd8>)
60001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e68:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e6a:	2019      	movs	r0, #25
60001e6c:	f000 f884 	bl	60001f78 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e70:	4b17      	ldr	r3, [pc, #92]	; (60001ed0 <usb_init+0xd8>)
60001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
60001e76:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60001e78:	2100      	movs	r1, #0
60001e7a:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e7c:	4c13      	ldr	r4, [pc, #76]	; (60001ecc <usb_init+0xd4>)
60001e7e:	230a      	movs	r3, #10
60001e80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e84:	4d14      	ldr	r5, [pc, #80]	; (60001ed8 <usb_init+0xe0>)
60001e86:	f44f 7220 	mov.w	r2, #640	; 0x280
60001e8a:	4628      	mov	r0, r5
60001e8c:	f000 f878 	bl	60001f80 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e90:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
60001e94:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60001e9a:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ea0:	f240 1343 	movw	r3, #323	; 0x143
60001ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60001ea8:	4b0c      	ldr	r3, [pc, #48]	; (60001edc <usb_init+0xe4>)
60001eaa:	4a0d      	ldr	r2, [pc, #52]	; (60001ee0 <usb_init+0xe8>)
60001eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ebc:	2301      	movs	r3, #1
60001ebe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ec2:	bd38      	pop	{r3, r4, r5, pc}
60001ec4:	400d8000 	.word	0x400d8000
60001ec8:	400fc000 	.word	0x400fc000
60001ecc:	402e0000 	.word	0x402e0000
60001ed0:	400d9000 	.word	0x400d9000
60001ed4:	001e1c00 	.word	0x001e1c00
60001ed8:	20000000 	.word	0x20000000
60001edc:	20003c00 	.word	0x20003c00
60001ee0:	0000e251 	.word	0x0000e251

60001ee4 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ee4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ee6:	4b0f      	ldr	r3, [pc, #60]	; (60001f24 <_reboot_Teensyduino_+0x40>)
60001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001eea:	f013 0f02 	tst.w	r3, #2
60001eee:	d100      	bne.n	60001ef2 <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001ef0:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ef2:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ef4:	4b0c      	ldr	r3, [pc, #48]	; (60001f28 <_reboot_Teensyduino_+0x44>)
60001ef6:	2200      	movs	r2, #0
60001ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001efc:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60001f00:	4a0a      	ldr	r2, [pc, #40]	; (60001f2c <_reboot_Teensyduino_+0x48>)
60001f02:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f04:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
60001f08:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
60001f0c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f0e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001f12:	4807      	ldr	r0, [pc, #28]	; (60001f30 <_reboot_Teensyduino_+0x4c>)
60001f14:	4b07      	ldr	r3, [pc, #28]	; (60001f34 <_reboot_Teensyduino_+0x50>)
60001f16:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
60001f1c:	69db      	ldr	r3, [r3, #28]
60001f1e:	689b      	ldr	r3, [r3, #8]
60001f20:	4798      	blx	r3
60001f22:	e7e6      	b.n	60001ef2 <_reboot_Teensyduino_+0xe>
60001f24:	401f4400 	.word	0x401f4400
60001f28:	402e0000 	.word	0x402e0000
60001f2c:	00200003 	.word	0x00200003
60001f30:	20208000 	.word	0x20208000
60001f34:	eb120000 	.word	0xeb120000

60001f38 <_init>:
60001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f3a:	bf00      	nop
60001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f3e:	bc08      	pop	{r3}
60001f40:	469e      	mov	lr, r3
60001f42:	4770      	bx	lr
60001f44:	0000      	movs	r0, r0
	...

60001f48 <___ZN7TwoWire8setClockEm_veneer>:
60001f48:	f85f f000 	ldr.w	pc, [pc]	; 60001f4c <___ZN7TwoWire8setClockEm_veneer+0x4>
60001f4c:	00004985 	.word	0x00004985

60001f50 <____libc_init_array_veneer>:
60001f50:	f85f f000 	ldr.w	pc, [pc]	; 60001f54 <____libc_init_array_veneer+0x4>
60001f54:	00011569 	.word	0x00011569

60001f58 <__main_veneer>:
60001f58:	f85f f000 	ldr.w	pc, [pc]	; 60001f5c <__main_veneer+0x4>
60001f5c:	0000d30d 	.word	0x0000d30d

60001f60 <__sm_set_pool_veneer>:
60001f60:	f85f f000 	ldr.w	pc, [pc]	; 60001f64 <__sm_set_pool_veneer+0x4>
60001f64:	0000f159 	.word	0x0000f159

60001f68 <__pwm_init_veneer>:
60001f68:	f85f f000 	ldr.w	pc, [pc]	; 60001f6c <__pwm_init_veneer+0x4>
60001f6c:	0000dccd 	.word	0x0000dccd

60001f70 <__usb_init_serialnumber_veneer>:
60001f70:	f85f f000 	ldr.w	pc, [pc]	; 60001f74 <__usb_init_serialnumber_veneer+0x4>
60001f74:	0000e819 	.word	0x0000e819

60001f78 <__delay_veneer>:
60001f78:	f85f f000 	ldr.w	pc, [pc]	; 60001f7c <__delay_veneer+0x4>
60001f7c:	0000d1f5 	.word	0x0000d1f5

60001f80 <__memset_veneer>:
60001f80:	f85f f000 	ldr.w	pc, [pc]	; 60001f84 <__memset_veneer+0x4>
60001f84:	000114ad 	.word	0x000114ad

60001f88 <__set_arm_clock_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <__set_arm_clock_veneer+0x4>
60001f8c:	0000cf05 	.word	0x0000cf05

60001f90 <__frame_dummy_init_array_entry>:
60001f90:	00000045 00003d09 00004a25 00004f69     E....=..%J..iO..
60001fa0:	00005779 0000c7b9                       yW......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
#endif
}

uint8_t PWMServo::attached()
{
	if (pin >= NUM_DIGITAL_PINS) return 0;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	return (attachedpins[pin >> 5] & (1 << (pin & 31))) ? 1 : 0;
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
      36:	4770      	bx	lr
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	20003ec0 	.word	0x20003ec0
      3c:	20003ec0 	.word	0x20003ec0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    }
  }
  return readStop();
 fail:
  return false;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	f3af 8000 	nop.w
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
  return false;
      60:	20005120 	.word	0x20005120
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( target == nullptr) return true;
      64:	6001c400 	.word	0x6001c400

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	4770      	bx	lr

0000006e <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6e:	6900      	ldr	r0, [r0, #16]
      70:	b120      	cbz	r0, 7c <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
      72:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
      74:	6803      	ldr	r3, [r0, #0]
      76:	68db      	ldr	r3, [r3, #12]
      78:	4798      	blx	r3
	}
      7a:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
      7c:	2000      	movs	r0, #0
	}
      7e:	4770      	bx	lr

00000080 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      80:	6900      	ldr	r0, [r0, #16]
      82:	b120      	cbz	r0, 8e <File::available()+0xe>
	int available() {
      84:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
      86:	6803      	ldr	r3, [r0, #0]
      88:	691b      	ldr	r3, [r3, #16]
      8a:	4798      	blx	r3
	}
      8c:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
      8e:	2000      	movs	r0, #0
	}
      90:	4770      	bx	lr

00000092 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      92:	6900      	ldr	r0, [r0, #16]
      94:	b120      	cbz	r0, a0 <File::peek()+0xe>
	int peek() {
      96:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
      98:	6803      	ldr	r3, [r0, #0]
      9a:	695b      	ldr	r3, [r3, #20]
      9c:	4798      	blx	r3
	}
      9e:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
      a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      a4:	4770      	bx	lr

000000a6 <File::flush()>:
	void flush() {
		if (f) f->flush();
      a6:	6900      	ldr	r0, [r0, #16]
      a8:	b120      	cbz	r0, b4 <File::flush()+0xe>
	void flush() {
      aa:	b508      	push	{r3, lr}
		if (f) f->flush();
      ac:	6803      	ldr	r3, [r0, #0]
      ae:	699b      	ldr	r3, [r3, #24]
      b0:	4798      	blx	r3
	}
      b2:	bd08      	pop	{r3, pc}
      b4:	4770      	bx	lr

000000b6 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
      b6:	6900      	ldr	r0, [r0, #16]
      b8:	b168      	cbz	r0, d6 <File::read()+0x20>
	int read() {
      ba:	b500      	push	{lr}
      bc:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
      be:	6803      	ldr	r3, [r0, #0]
      c0:	689b      	ldr	r3, [r3, #8]
      c2:	2201      	movs	r2, #1
      c4:	f10d 0107 	add.w	r1, sp, #7
      c8:	4798      	blx	r3
      ca:	b138      	cbz	r0, dc <File::read()+0x26>
		return b;
      cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
      d0:	b003      	add	sp, #12
      d2:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
      d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      da:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
      dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      e0:	e7f6      	b.n	d0 <File::read()+0x1a>

000000e2 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      e2:	b500      	push	{lr}
      e4:	b083      	sub	sp, #12
      e6:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      ea:	6900      	ldr	r0, [r0, #16]
      ec:	b140      	cbz	r0, 100 <File::write(unsigned char)+0x1e>
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	68db      	ldr	r3, [r3, #12]
      f2:	2201      	movs	r2, #1
      f4:	f10d 0107 	add.w	r1, sp, #7
      f8:	4798      	blx	r3
	}
      fa:	b003      	add	sp, #12
      fc:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     100:	2000      	movs	r0, #0
     102:	e7fa      	b.n	fa <File::write(unsigned char)+0x18>

00000104 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     104:	6d03      	ldr	r3, [r0, #80]	; 0x50
     106:	b113      	cbz	r3, 10e <SDFile::position()+0xa>
     108:	6958      	ldr	r0, [r3, #20]
     10a:	2100      	movs	r1, #0
     10c:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     10e:	6d43      	ldr	r3, [r0, #84]	; 0x54
     110:	b113      	cbz	r3, 118 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     112:	6818      	ldr	r0, [r3, #0]
     114:	6859      	ldr	r1, [r3, #4]
     116:	4770      	bx	lr
     118:	2000      	movs	r0, #0
     11a:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     11c:	4770      	bx	lr

0000011e <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     11e:	6d03      	ldr	r3, [r0, #80]	; 0x50
     120:	b113      	cbz	r3, 128 <SDFile::size()+0xa>
     122:	69d8      	ldr	r0, [r3, #28]
     124:	2100      	movs	r1, #0
     126:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     128:	6d43      	ldr	r3, [r0, #84]	; 0x54
     12a:	b113      	cbz	r3, 132 <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     12c:	6918      	ldr	r0, [r3, #16]
     12e:	6959      	ldr	r1, [r3, #20]
     130:	4770      	bx	lr
     132:	2000      	movs	r0, #0
     134:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     136:	4770      	bx	lr

00000138 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     138:	6d03      	ldr	r3, [r0, #80]	; 0x50
     13a:	b10b      	cbz	r3, 140 <SDFile::isOpen()+0x8>
     13c:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     13e:	4770      	bx	lr
     140:	6d40      	ldr	r0, [r0, #84]	; 0x54
     142:	3800      	subs	r0, #0
     144:	bf18      	it	ne
     146:	2001      	movne	r0, #1
     148:	4770      	bx	lr

0000014a <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     14a:	6c83      	ldr	r3, [r0, #72]	; 0x48
     14c:	b153      	cbz	r3, 164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     14e:	781a      	ldrb	r2, [r3, #0]
     150:	f012 0f08 	tst.w	r2, #8
     154:	d020      	beq.n	198 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     156:	69d8      	ldr	r0, [r3, #28]
     158:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     15a:	1ac0      	subs	r0, r0, r3
     15c:	bf48      	it	mi
     15e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     162:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     164:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     166:	b1cb      	cbz	r3, 19c <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     168:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     16c:	f012 0f08 	tst.w	r2, #8
     170:	d016      	beq.n	1a0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     172:	b410      	push	{r4}
     174:	691a      	ldr	r2, [r3, #16]
     176:	6959      	ldr	r1, [r3, #20]
     178:	6818      	ldr	r0, [r3, #0]
     17a:	685c      	ldr	r4, [r3, #4]
     17c:	1a13      	subs	r3, r2, r0
     17e:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     182:	4618      	mov	r0, r3
     184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     188:	f172 0200 	sbcs.w	r2, r2, #0
     18c:	d301      	bcc.n	192 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     18e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    return BaseFile::available();
  }
     192:	f85d 4b04 	ldr.w	r4, [sp], #4
     196:	4770      	bx	lr
     198:	2000      	movs	r0, #0
     19a:	4770      	bx	lr
     19c:	2000      	movs	r0, #0
    return BaseFile::available();
     19e:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     1a0:	2300      	movs	r3, #0
     1a2:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     1a4:	4618      	mov	r0, r3
     1a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     1aa:	f172 0200 	sbcs.w	r2, r2, #0
     1ae:	bf28      	it	cs
     1b0:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     1b4:	4770      	bx	lr

000001b6 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     1b6:	798a      	ldrb	r2, [r1, #6]
     1b8:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     1bc:	f013 0f80 	tst.w	r3, #128	; 0x80
     1c0:	d120      	bne.n	204 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c4:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     1c6:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     1ca:	794b      	ldrb	r3, [r1, #5]
     1cc:	3301      	adds	r3, #1
     1ce:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     1d0:	790d      	ldrb	r5, [r1, #4]
     1d2:	788e      	ldrb	r6, [r1, #2]
     1d4:	784f      	ldrb	r7, [r1, #1]
     1d6:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     1d8:	6d04      	ldr	r4, [r0, #80]	; 0x50
     1da:	b14c      	cbz	r4, 1f0 <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     1dc:	9103      	str	r1, [sp, #12]
     1de:	9702      	str	r7, [sp, #8]
     1e0:	9601      	str	r6, [sp, #4]
     1e2:	9500      	str	r5, [sp, #0]
     1e4:	2104      	movs	r1, #4
     1e6:	4620      	mov	r0, r4
     1e8:	f008 f96e 	bl	84c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     1ec:	b005      	add	sp, #20
     1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     1f0:	6d40      	ldr	r0, [r0, #84]	; 0x54
     1f2:	b148      	cbz	r0, 208 <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     1f4:	9103      	str	r1, [sp, #12]
     1f6:	9702      	str	r7, [sp, #8]
     1f8:	9601      	str	r6, [sp, #4]
     1fa:	9500      	str	r5, [sp, #0]
     1fc:	2104      	movs	r1, #4
     1fe:	f006 fa88 	bl	6712 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     202:	e7f3      	b.n	1ec <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     204:	2000      	movs	r0, #0
	}
     206:	4770      	bx	lr
           m_xFile ?
     208:	2000      	movs	r0, #0
     20a:	e7ef      	b.n	1ec <SDFile::setModifyTime(DateTimeFields const&)+0x36>

0000020c <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     20c:	b510      	push	{r4, lr}
     20e:	b082      	sub	sp, #8
     210:	4603      	mov	r3, r0
     212:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     214:	6d00      	ldr	r0, [r0, #80]	; 0x50
     216:	b310      	cbz	r0, 25e <SDFile::getModifyTime(DateTimeFields&)+0x52>
     218:	aa01      	add	r2, sp, #4
     21a:	f10d 0106 	add.w	r1, sp, #6
     21e:	f007 ff2d 	bl	807c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     222:	b1d0      	cbz	r0, 25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     224:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     228:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     22c:	ea53 0102 	orrs.w	r1, r3, r2
     230:	d01f      	beq.n	272 <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     232:	f002 011f 	and.w	r1, r2, #31
     236:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     238:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     23a:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     23e:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     240:	0ad2      	lsrs	r2, r2, #11
     242:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     244:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     248:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     24a:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     24e:	3a01      	subs	r2, #1
     250:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     252:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     254:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     258:	71a3      	strb	r3, [r4, #6]
	}
     25a:	b002      	add	sp, #8
     25c:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     25e:	6d58      	ldr	r0, [r3, #84]	; 0x54
     260:	b128      	cbz	r0, 26e <SDFile::getModifyTime(DateTimeFields&)+0x62>
     262:	aa01      	add	r2, sp, #4
     264:	f10d 0106 	add.w	r1, sp, #6
     268:	f005 fafc 	bl	5864 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     26c:	e7d9      	b.n	222 <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     26e:	2000      	movs	r0, #0
     270:	e7f3      	b.n	25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     272:	2000      	movs	r0, #0
     274:	e7f1      	b.n	25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>

00000276 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     276:	b510      	push	{r4, lr}
     278:	b082      	sub	sp, #8
     27a:	4603      	mov	r3, r0
     27c:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     27e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     280:	b310      	cbz	r0, 2c8 <SDFile::getCreateTime(DateTimeFields&)+0x52>
     282:	aa01      	add	r2, sp, #4
     284:	f10d 0106 	add.w	r1, sp, #6
     288:	f007 fee8 	bl	805c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     28c:	b1d0      	cbz	r0, 2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     28e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     292:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     296:	ea53 0102 	orrs.w	r1, r3, r2
     29a:	d01f      	beq.n	2dc <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     29c:	f002 011f 	and.w	r1, r2, #31
     2a0:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     2a2:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     2a4:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     2a8:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     2aa:	0ad2      	lsrs	r2, r2, #11
     2ac:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     2ae:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     2b2:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     2b4:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     2b8:	3a01      	subs	r2, #1
     2ba:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     2bc:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     2be:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     2c2:	71a3      	strb	r3, [r4, #6]
	}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     2c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
     2ca:	b128      	cbz	r0, 2d8 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     2cc:	aa01      	add	r2, sp, #4
     2ce:	f10d 0106 	add.w	r1, sp, #6
     2d2:	f005 fab5 	bl	5840 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     2d6:	e7d9      	b.n	28c <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     2d8:	2000      	movs	r0, #0
     2da:	e7f3      	b.n	2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     2dc:	2000      	movs	r0, #0
     2de:	e7f1      	b.n	2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

000002e0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     2e0:	b510      	push	{r4, lr}
     2e2:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     2e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
     2e6:	b120      	cbz	r0, 2f2 <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     2e8:	7803      	ldrb	r3, [r0, #0]
     2ea:	f013 0f70 	tst.w	r3, #112	; 0x70
     2ee:	d10e      	bne.n	30e <SDFile::rewindDirectory()+0x2e>
	}
     2f0:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     2f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
     2f4:	2b00      	cmp	r3, #0
     2f6:	d0fb      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
     2f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     2fc:	f013 0f50 	tst.w	r3, #80	; 0x50
     300:	d0f6      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     302:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     304:	2200      	movs	r2, #0
     306:	2300      	movs	r3, #0
     308:	f005 fc07 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
     30c:	e7f0      	b.n	2f0 <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     30e:	2100      	movs	r1, #0
     310:	f007 fc6c 	bl	7bec <FatFile::seekSet(unsigned long)>
     314:	6d60      	ldr	r0, [r4, #84]	; 0x54
     316:	2800      	cmp	r0, #0
     318:	d0ea      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
     31a:	e7f3      	b.n	304 <SDFile::rewindDirectory()+0x24>

0000031c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     31c:	b508      	push	{r3, lr}
     31e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     320:	6c80      	ldr	r0, [r0, #72]	; 0x48
     322:	b110      	cbz	r0, 32a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     324:	f007 fc2c 	bl	7b80 <FatFile::peek()>
  }
     328:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     32a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     32c:	b110      	cbz	r0, 334 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     32e:	f005 fbde 	bl	5aee <ExFatFile::peek()>
     332:	e7f9      	b.n	328 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     338:	e7f6      	b.n	328 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

0000033a <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     33a:	b500      	push	{lr}
     33c:	b083      	sub	sp, #12
     33e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     340:	6c80      	ldr	r0, [r0, #72]	; 0x48
     342:	b158      	cbz	r0, 35c <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     344:	2201      	movs	r2, #1
     346:	f10d 0107 	add.w	r1, sp, #7
     34a:	f007 fb44 	bl	79d6 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     34e:	2801      	cmp	r0, #1
     350:	d10f      	bne.n	372 <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     352:	f89d 0007 	ldrb.w	r0, [sp, #7]
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return BaseFile::read();
  }
     356:	b003      	add	sp, #12
     358:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     35c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     35e:	b128      	cbz	r0, 36c <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     360:	2201      	movs	r2, #1
     362:	f10d 0107 	add.w	r1, sp, #7
     366:	f005 faf7 	bl	5958 <ExFatFile::read(void*, unsigned int)>
     36a:	e7f0      	b.n	34e <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     370:	e7f1      	b.n	356 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     376:	e7ee      	b.n	356 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000378 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     378:	b508      	push	{r3, lr}
     37a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     37c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     37e:	b110      	cbz	r0, 386 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     380:	f007 fd82 	bl	7e88 <FatFile::sync()>
  }
     384:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     386:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     388:	2800      	cmp	r0, #0
     38a:	d0fb      	beq.n	384 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     38c:	f006 f83a 	bl	6404 <ExFatFile::sync()>
     390:	e7f8      	b.n	384 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

00000392 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     392:	b500      	push	{lr}
     394:	b083      	sub	sp, #12
     396:	4603      	mov	r3, r0
     398:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     39c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     39e:	b138      	cbz	r0, 3b0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     3a0:	2201      	movs	r2, #1
     3a2:	f10d 0107 	add.w	r1, sp, #7
     3a6:	f008 f947 	bl	8638 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     3aa:	b003      	add	sp, #12
     3ac:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     3b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     3b2:	b128      	cbz	r0, 3c0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     3b4:	2201      	movs	r2, #1
     3b6:	f10d 0107 	add.w	r1, sp, #7
     3ba:	f006 fad7 	bl	696c <ExFatFile::write(void const*, unsigned int)>
     3be:	e7f4      	b.n	3aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     3c0:	2000      	movs	r0, #0
    return BaseFile::write(b);
     3c2:	e7f2      	b.n	3aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>

000003c4 <SDFile::name()>:
	virtual const char * name() {
     3c4:	b510      	push	{r4, lr}
     3c6:	4604      	mov	r4, r0
		if (!filename) {
     3c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
     3ca:	b10b      	cbz	r3, 3d0 <SDFile::name()+0xc>
	}
     3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
     3ce:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     3d0:	f44f 7080 	mov.w	r0, #256	; 0x100
     3d4:	f010 fcde 	bl	10d94 <malloc>
     3d8:	4601      	mov	r1, r0
     3da:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     3dc:	b180      	cbz	r0, 400 <SDFile::name()+0x3c>
    *name = 0;
     3de:	2300      	movs	r3, #0
     3e0:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     3e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
     3e4:	b120      	cbz	r0, 3f0 <SDFile::name()+0x2c>
     3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
     3ea:	f009 fa3b 	bl	9864 <FatFile::getName(char*, unsigned int)>
     3ee:	e7ed      	b.n	3cc <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     3f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
     3f2:	2800      	cmp	r0, #0
     3f4:	d0ea      	beq.n	3cc <SDFile::name()+0x8>
    return getName8(name, size);
     3f6:	f44f 7280 	mov.w	r2, #256	; 0x100
     3fa:	f006 ff57 	bl	72ac <ExFatFile::getName8(char*, unsigned int)>
     3fe:	e7e5      	b.n	3cc <SDFile::name()+0x8>
				filename = &zeroterm;
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <SDFile::name()+0x44>)
     402:	65a3      	str	r3, [r4, #88]	; 0x58
     404:	e7e2      	b.n	3cc <SDFile::name()+0x8>
     406:	bf00      	nop
     408:	200053c7 	.word	0x200053c7

0000040c <SDFile::close()>:
	virtual void close() {
     40c:	b510      	push	{r4, lr}
     40e:	4604      	mov	r4, r0
		if (filename) {
     410:	6d80      	ldr	r0, [r0, #88]	; 0x58
     412:	b118      	cbz	r0, 41c <SDFile::close()+0x10>
			free(filename);
     414:	f010 fcc6 	bl	10da4 <free>
			filename = nullptr;
     418:	2300      	movs	r3, #0
     41a:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     41c:	6d23      	ldr	r3, [r4, #80]	; 0x50
     41e:	b123      	cbz	r3, 42a <SDFile::close()+0x1e>
			sdfatfile.close();
     420:	f104 0018 	add.w	r0, r4, #24
     424:	f009 fd38 	bl	9e98 <FsBaseFile::close()>
	}
     428:	bd10      	pop	{r4, pc}
     42a:	6d63      	ldr	r3, [r4, #84]	; 0x54
     42c:	2b00      	cmp	r3, #0
     42e:	d1f7      	bne.n	420 <SDFile::close()+0x14>
     430:	e7fa      	b.n	428 <SDFile::close()+0x1c>

00000432 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     432:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     434:	6d04      	ldr	r4, [r0, #80]	; 0x50
     436:	b194      	cbz	r4, 45e <SDFile::truncate(unsigned long long)+0x2c>
     438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     43c:	4291      	cmp	r1, r2
     43e:	f04f 0100 	mov.w	r1, #0
     442:	4199      	sbcs	r1, r3
     444:	d201      	bcs.n	44a <SDFile::truncate(unsigned long long)+0x18>
     446:	2000      	movs	r0, #0
	}
     448:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     44a:	4611      	mov	r1, r2
     44c:	4620      	mov	r0, r4
     44e:	f007 fbcd 	bl	7bec <FatFile::seekSet(unsigned long)>
     452:	2800      	cmp	r0, #0
     454:	d0f8      	beq.n	448 <SDFile::truncate(unsigned long long)+0x16>
     456:	4620      	mov	r0, r4
     458:	f008 f8b4 	bl	85c4 <FatFile::truncate()>
     45c:	e7f4      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     45e:	6d44      	ldr	r4, [r0, #84]	; 0x54
     460:	b144      	cbz	r4, 474 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     462:	4620      	mov	r0, r4
     464:	f005 fb59 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
     468:	2800      	cmp	r0, #0
     46a:	d0ed      	beq.n	448 <SDFile::truncate(unsigned long long)+0x16>
     46c:	4620      	mov	r0, r4
     46e:	f006 fa0a 	bl	6886 <ExFatFile::truncate()>
     472:	e7e9      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>
     474:	2000      	movs	r0, #0
     476:	e7e7      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>

00000478 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	b094      	sub	sp, #80	; 0x50
     47c:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
     47e:	2200      	movs	r2, #0
     480:	9201      	str	r2, [sp, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     486:	9302      	str	r3, [sp, #8]
     488:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     48c:	9212      	str	r2, [sp, #72]	; 0x48
     48e:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     490:	4b1f      	ldr	r3, [pc, #124]	; (510 <SDFile::openNextFile(unsigned char)+0x98>)
     492:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     494:	3118      	adds	r1, #24
     496:	a804      	add	r0, sp, #16
     498:	f009 fd4c 	bl	9f34 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
     49e:	2b00      	cmp	r3, #0
     4a0:	d02a      	beq.n	4f8 <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     4a2:	205c      	movs	r0, #92	; 0x5c
     4a4:	f00c ffd4 	bl	d450 <operator new(unsigned int)>
     4a8:	4604      	mov	r4, r0
class FileImpl {
     4aa:	2600      	movs	r6, #0
     4ac:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     4ae:	4b19      	ldr	r3, [pc, #100]	; (514 <SDFile::openNextFile(unsigned char)+0x9c>)
     4b0:	6003      	str	r3, [r0, #0]
class Print
     4b2:	9b01      	ldr	r3, [sp, #4]
     4b4:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     4b6:	4b18      	ldr	r3, [pc, #96]	; (518 <SDFile::openNextFile(unsigned char)+0xa0>)
     4b8:	6083      	str	r3, [r0, #8]
     4ba:	9b02      	ldr	r3, [sp, #8]
     4bc:	6103      	str	r3, [r0, #16]
     4be:	f89d 300c 	ldrb.w	r3, [sp, #12]
     4c2:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     4c4:	a904      	add	r1, sp, #16
     4c6:	3018      	adds	r0, #24
     4c8:	f009 fca5 	bl	9e16 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     4cc:	4b10      	ldr	r3, [pc, #64]	; (510 <SDFile::openNextFile(unsigned char)+0x98>)
     4ce:	60a3      	str	r3, [r4, #8]
     4d0:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     4d2:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     4d8:	60ab      	str	r3, [r5, #8]
     4da:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     4dc:	4b0f      	ldr	r3, [pc, #60]	; (51c <SDFile::openNextFile(unsigned char)+0xa4>)
     4de:	602b      	str	r3, [r5, #0]
		f = file;
     4e0:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     4e2:	6863      	ldr	r3, [r4, #4]
     4e4:	3301      	adds	r3, #1
     4e6:	6063      	str	r3, [r4, #4]
     4e8:	4b0d      	ldr	r3, [pc, #52]	; (520 <SDFile::openNextFile(unsigned char)+0xa8>)
     4ea:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     4ec:	a804      	add	r0, sp, #16
     4ee:	f009 fcd3 	bl	9e98 <FsBaseFile::close()>
	}
     4f2:	4628      	mov	r0, r5
     4f4:	b014      	add	sp, #80	; 0x50
     4f6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     4fa:	2b00      	cmp	r3, #0
     4fc:	d1d1      	bne.n	4a2 <SDFile::openNextFile(unsigned char)+0x2a>
     4fe:	606b      	str	r3, [r5, #4]
     500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     504:	60aa      	str	r2, [r5, #8]
     506:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     508:	4a04      	ldr	r2, [pc, #16]	; (51c <SDFile::openNextFile(unsigned char)+0xa4>)
     50a:	602a      	str	r2, [r5, #0]
     50c:	612b      	str	r3, [r5, #16]
     50e:	e7eb      	b.n	4e8 <SDFile::openNextFile(unsigned char)+0x70>
     510:	20002524 	.word	0x20002524
     514:	20002548 	.word	0x20002548
     518:	200025a4 	.word	0x200025a4
     51c:	200024f8 	.word	0x200024f8
     520:	20002418 	.word	0x20002418

00000524 <SDFile::peek()>:
	virtual int peek() {
     524:	b508      	push	{r3, lr}
     526:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     528:	6d00      	ldr	r0, [r0, #80]	; 0x50
     52a:	b110      	cbz	r0, 532 <SDFile::peek()+0xe>
     52c:	f007 fb28 	bl	7b80 <FatFile::peek()>
	}
     530:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     532:	6d58      	ldr	r0, [r3, #84]	; 0x54
     534:	b110      	cbz	r0, 53c <SDFile::peek()+0x18>
     536:	f005 fada 	bl	5aee <ExFatFile::peek()>
     53a:	e7f9      	b.n	530 <SDFile::peek()+0xc>
     53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     540:	e7f6      	b.n	530 <SDFile::peek()+0xc>

00000542 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     542:	6d03      	ldr	r3, [r0, #80]	; 0x50
     544:	b133      	cbz	r3, 554 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     546:	781b      	ldrb	r3, [r3, #0]
     548:	f013 0f70 	tst.w	r3, #112	; 0x70
     54c:	bf14      	ite	ne
     54e:	2001      	movne	r0, #1
     550:	2000      	moveq	r0, #0
     552:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     554:	6d43      	ldr	r3, [r0, #84]	; 0x54
     556:	b13b      	cbz	r3, 568 <SDFile::isDirectory()+0x26>
     558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     55c:	f013 0f50 	tst.w	r3, #80	; 0x50
     560:	bf14      	ite	ne
     562:	2001      	movne	r0, #1
     564:	2000      	moveq	r0, #0
     566:	4770      	bx	lr
     568:	2000      	movs	r0, #0
	}
     56a:	4770      	bx	lr

0000056c <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     56c:	b508      	push	{r3, lr}
     56e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     570:	6d00      	ldr	r0, [r0, #80]	; 0x50
     572:	b110      	cbz	r0, 57a <SDFile::read(void*, unsigned int)+0xe>
     574:	f007 fa2f 	bl	79d6 <FatFile::read(void*, unsigned int)>
	}
     578:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     57a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     57c:	b110      	cbz	r0, 584 <SDFile::read(void*, unsigned int)+0x18>
     57e:	f005 f9eb 	bl	5958 <ExFatFile::read(void*, unsigned int)>
     582:	e7f9      	b.n	578 <SDFile::read(void*, unsigned int)+0xc>
     584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     588:	e7f6      	b.n	578 <SDFile::read(void*, unsigned int)+0xc>

0000058a <SDFile::flush()>:
	virtual void flush() {
     58a:	b508      	push	{r3, lr}
     58c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     58e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     590:	b110      	cbz	r0, 598 <SDFile::flush()+0xe>
     592:	f007 fc79 	bl	7e88 <FatFile::sync()>
	}
     596:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     598:	6d58      	ldr	r0, [r3, #84]	; 0x54
     59a:	2800      	cmp	r0, #0
     59c:	d0fb      	beq.n	596 <SDFile::flush()+0xc>
     59e:	f005 ff31 	bl	6404 <ExFatFile::sync()>
     5a2:	e7f8      	b.n	596 <SDFile::flush()+0xc>

000005a4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     5a4:	b510      	push	{r4, lr}
     5a6:	4604      	mov	r4, r0
     5a8:	4b0c      	ldr	r3, [pc, #48]	; (5dc <SDFile::~SDFile()+0x38>)
     5aa:	6003      	str	r3, [r0, #0]
		if (filename) {
     5ac:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ae:	b118      	cbz	r0, 5b8 <SDFile::~SDFile()+0x14>
			free(filename);
     5b0:	f010 fbf8 	bl	10da4 <free>
			filename = nullptr;
     5b4:	2300      	movs	r3, #0
     5b6:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     5b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     5ba:	b15b      	cbz	r3, 5d4 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     5bc:	f104 0018 	add.w	r0, r4, #24
     5c0:	f009 fc6a 	bl	9e98 <FsBaseFile::close()>
     5c4:	4b06      	ldr	r3, [pc, #24]	; (5e0 <SDFile::~SDFile()+0x3c>)
     5c6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     5c8:	f104 0018 	add.w	r0, r4, #24
     5cc:	f009 fc64 	bl	9e98 <FsBaseFile::close()>
	}
     5d0:	4620      	mov	r0, r4
     5d2:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     5d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     5d6:	2b00      	cmp	r3, #0
     5d8:	d1f0      	bne.n	5bc <SDFile::~SDFile()+0x18>
     5da:	e7f3      	b.n	5c4 <SDFile::~SDFile()+0x20>
     5dc:	20002548 	.word	0x20002548
     5e0:	20002418 	.word	0x20002418

000005e4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     5e4:	b510      	push	{r4, lr}
     5e6:	4604      	mov	r4, r0
     5e8:	4b0e      	ldr	r3, [pc, #56]	; (624 <SDFile::~SDFile()+0x40>)
     5ea:	6003      	str	r3, [r0, #0]
		if (filename) {
     5ec:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ee:	b118      	cbz	r0, 5f8 <SDFile::~SDFile()+0x14>
			free(filename);
     5f0:	f010 fbd8 	bl	10da4 <free>
			filename = nullptr;
     5f4:	2300      	movs	r3, #0
     5f6:	65a3      	str	r3, [r4, #88]	; 0x58
     5f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     5fa:	b17b      	cbz	r3, 61c <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     5fc:	f104 0018 	add.w	r0, r4, #24
     600:	f009 fc4a 	bl	9e98 <FsBaseFile::close()>
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <SDFile::~SDFile()+0x44>)
     606:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     608:	f104 0018 	add.w	r0, r4, #24
     60c:	f009 fc44 	bl	9e98 <FsBaseFile::close()>
	}
     610:	215c      	movs	r1, #92	; 0x5c
     612:	4620      	mov	r0, r4
     614:	f00c ff20 	bl	d458 <operator delete(void*, unsigned int)>
     618:	4620      	mov	r0, r4
     61a:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     61c:	6d63      	ldr	r3, [r4, #84]	; 0x54
     61e:	2b00      	cmp	r3, #0
     620:	d1ec      	bne.n	5fc <SDFile::~SDFile()+0x18>
     622:	e7ef      	b.n	604 <SDFile::~SDFile()+0x20>
     624:	20002548 	.word	0x20002548
     628:	20002418 	.word	0x20002418

0000062c <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     62c:	b508      	push	{r3, lr}
     62e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     630:	6d00      	ldr	r0, [r0, #80]	; 0x50
     632:	b110      	cbz	r0, 63a <SDFile::write(void const*, unsigned int)+0xe>
     634:	f008 f800 	bl	8638 <FatFile::write(void const*, unsigned int)>
	}
     638:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     63a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     63c:	b110      	cbz	r0, 644 <SDFile::write(void const*, unsigned int)+0x18>
     63e:	f006 f995 	bl	696c <ExFatFile::write(void const*, unsigned int)>
     642:	e7f9      	b.n	638 <SDFile::write(void const*, unsigned int)+0xc>
     644:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     646:	e7f7      	b.n	638 <SDFile::write(void const*, unsigned int)+0xc>

00000648 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     648:	b508      	push	{r3, lr}
     64a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     64c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     64e:	b110      	cbz	r0, 656 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     650:	f007 fff2 	bl	8638 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     654:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     656:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     658:	b110      	cbz	r0, 660 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     65a:	f006 f987 	bl	696c <ExFatFile::write(void const*, unsigned int)>
     65e:	e7f9      	b.n	654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     660:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     662:	e7f7      	b.n	654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000664 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     664:	798a      	ldrb	r2, [r1, #6]
     666:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     66a:	f013 0f80 	tst.w	r3, #128	; 0x80
     66e:	d120      	bne.n	6b2 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     670:	b5f0      	push	{r4, r5, r6, r7, lr}
     672:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     674:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     678:	794b      	ldrb	r3, [r1, #5]
     67a:	3301      	adds	r3, #1
     67c:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     67e:	790d      	ldrb	r5, [r1, #4]
     680:	788e      	ldrb	r6, [r1, #2]
     682:	784f      	ldrb	r7, [r1, #1]
     684:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     686:	6d04      	ldr	r4, [r0, #80]	; 0x50
     688:	b14c      	cbz	r4, 69e <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     68a:	9103      	str	r1, [sp, #12]
     68c:	9702      	str	r7, [sp, #8]
     68e:	9601      	str	r6, [sp, #4]
     690:	9500      	str	r5, [sp, #0]
     692:	2102      	movs	r1, #2
     694:	4620      	mov	r0, r4
     696:	f007 ff17 	bl	84c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     69a:	b005      	add	sp, #20
     69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     69e:	6d40      	ldr	r0, [r0, #84]	; 0x54
     6a0:	b148      	cbz	r0, 6b6 <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     6a2:	9103      	str	r1, [sp, #12]
     6a4:	9702      	str	r7, [sp, #8]
     6a6:	9601      	str	r6, [sp, #4]
     6a8:	9500      	str	r5, [sp, #0]
     6aa:	2102      	movs	r1, #2
     6ac:	f006 f831 	bl	6712 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     6b0:	e7f3      	b.n	69a <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     6b2:	2000      	movs	r0, #0
	}
     6b4:	4770      	bx	lr
           m_xFile ?
     6b6:	2000      	movs	r0, #0
     6b8:	e7ef      	b.n	69a <SDFile::setCreateTime(DateTimeFields const&)+0x36>

000006ba <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     6ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
     6bc:	b153      	cbz	r3, 6d4 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     6be:	781a      	ldrb	r2, [r3, #0]
     6c0:	f012 0f08 	tst.w	r2, #8
     6c4:	d020      	beq.n	708 <SDFile::available()+0x4e>
     6c6:	69d8      	ldr	r0, [r3, #28]
     6c8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     6ca:	1ac0      	subs	r0, r0, r3
     6cc:	bf48      	it	mi
     6ce:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     6d2:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     6d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
     6d6:	b1cb      	cbz	r3, 70c <SDFile::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     6d8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     6dc:	f012 0f08 	tst.w	r2, #8
     6e0:	d016      	beq.n	710 <SDFile::available()+0x56>
	virtual int available() {
     6e2:	b410      	push	{r4}
     6e4:	691a      	ldr	r2, [r3, #16]
     6e6:	6959      	ldr	r1, [r3, #20]
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	685c      	ldr	r4, [r3, #4]
     6ec:	1a13      	subs	r3, r2, r0
     6ee:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     6f2:	4618      	mov	r0, r3
     6f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     6f8:	f172 0200 	sbcs.w	r2, r2, #0
     6fc:	d301      	bcc.n	702 <SDFile::available()+0x48>
     6fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}
     702:	f85d 4b04 	ldr.w	r4, [sp], #4
     706:	4770      	bx	lr
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr
     70c:	2000      	movs	r0, #0
		return sdfatfile.available();
     70e:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     710:	2300      	movs	r3, #0
     712:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     714:	4618      	mov	r0, r3
     716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     71a:	f172 0200 	sbcs.w	r2, r2, #0
     71e:	bf28      	it	cs
     720:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     724:	4770      	bx	lr

00000726 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     726:	b510      	push	{r4, lr}
     728:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     72a:	b12c      	cbz	r4, 738 <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     72c:	2c01      	cmp	r4, #1
     72e:	d019      	beq.n	764 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     730:	2c02      	cmp	r4, #2
     732:	d034      	beq.n	79e <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     734:	2000      	movs	r0, #0
	}
     736:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     738:	6d04      	ldr	r4, [r0, #80]	; 0x50
     73a:	b16c      	cbz	r4, 758 <SDFile::seek(unsigned long long, int)+0x32>
     73c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     740:	4291      	cmp	r1, r2
     742:	f04f 0100 	mov.w	r1, #0
     746:	4199      	sbcs	r1, r3
     748:	d201      	bcs.n	74e <SDFile::seek(unsigned long long, int)+0x28>
     74a:	2000      	movs	r0, #0
     74c:	e7f3      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     74e:	4611      	mov	r1, r2
     750:	4620      	mov	r0, r4
     752:	f007 fa4b 	bl	7bec <FatFile::seekSet(unsigned long)>
     756:	e7ee      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     758:	6d40      	ldr	r0, [r0, #84]	; 0x54
     75a:	2800      	cmp	r0, #0
     75c:	d03c      	beq.n	7d8 <SDFile::seek(unsigned long long, int)+0xb2>
     75e:	f005 f9dc 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
     762:	e7e8      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     764:	6d04      	ldr	r4, [r0, #80]	; 0x50
     766:	b164      	cbz	r4, 782 <SDFile::seek(unsigned long long, int)+0x5c>
     768:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     76a:	1889      	adds	r1, r1, r2
     76c:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     774:	428a      	cmp	r2, r1
     776:	f04f 0200 	mov.w	r2, #0
     77a:	419a      	sbcs	r2, r3
     77c:	d20b      	bcs.n	796 <SDFile::seek(unsigned long long, int)+0x70>
     77e:	2000      	movs	r0, #0
     780:	e7d9      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     782:	6d40      	ldr	r0, [r0, #84]	; 0x54
     784:	b350      	cbz	r0, 7dc <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     786:	6801      	ldr	r1, [r0, #0]
     788:	6844      	ldr	r4, [r0, #4]
     78a:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     78c:	eb43 0304 	adc.w	r3, r3, r4
     790:	f005 f9c3 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
     794:	e7cf      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     796:	4620      	mov	r0, r4
     798:	f007 fa28 	bl	7bec <FatFile::seekSet(unsigned long)>
     79c:	e7cb      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     79e:	6d04      	ldr	r4, [r0, #80]	; 0x50
     7a0:	b164      	cbz	r4, 7bc <SDFile::seek(unsigned long long, int)+0x96>
     7a2:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     7a4:	1889      	adds	r1, r1, r2
     7a6:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7ae:	428a      	cmp	r2, r1
     7b0:	f04f 0200 	mov.w	r2, #0
     7b4:	419a      	sbcs	r2, r3
     7b6:	d20b      	bcs.n	7d0 <SDFile::seek(unsigned long long, int)+0xaa>
     7b8:	2000      	movs	r0, #0
     7ba:	e7bc      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     7bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
     7be:	b178      	cbz	r0, 7e0 <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
     7c0:	6901      	ldr	r1, [r0, #16]
     7c2:	6944      	ldr	r4, [r0, #20]
     7c4:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     7c6:	eb43 0304 	adc.w	r3, r3, r4
     7ca:	f005 f9a6 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
     7ce:	e7b2      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     7d0:	4620      	mov	r0, r4
     7d2:	f007 fa0b 	bl	7bec <FatFile::seekSet(unsigned long)>
     7d6:	e7ae      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     7d8:	2000      	movs	r0, #0
     7da:	e7ac      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     7dc:	2000      	movs	r0, #0
     7de:	e7aa      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     7e0:	2000      	movs	r0, #0
     7e2:	e7a8      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>

000007e4 <File::~File()>:
	virtual ~File() {
     7e4:	b510      	push	{r4, lr}
     7e6:	4604      	mov	r4, r0
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <File::~File()+0x2c>)
     7ea:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     7ec:	6903      	ldr	r3, [r0, #16]
     7ee:	b163      	cbz	r3, 80a <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     7f0:	685a      	ldr	r2, [r3, #4]
     7f2:	3a01      	subs	r2, #1
     7f4:	605a      	str	r2, [r3, #4]
     7f6:	b942      	cbnz	r2, 80a <File::~File()+0x26>
			f->close();
     7f8:	6900      	ldr	r0, [r0, #16]
     7fa:	6803      	ldr	r3, [r0, #0]
     7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     7fe:	4798      	blx	r3
			delete f;
     800:	6920      	ldr	r0, [r4, #16]
     802:	b110      	cbz	r0, 80a <File::~File()+0x26>
     804:	6803      	ldr	r3, [r0, #0]
     806:	685b      	ldr	r3, [r3, #4]
     808:	4798      	blx	r3
	}
     80a:	4620      	mov	r0, r4
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	200024f8 	.word	0x200024f8

00000814 <File::~File()>:
	virtual ~File() {
     814:	b510      	push	{r4, lr}
     816:	4604      	mov	r4, r0
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <File::~File()+0x34>)
     81a:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     81c:	6903      	ldr	r3, [r0, #16]
     81e:	b163      	cbz	r3, 83a <File::~File()+0x26>
		if (--(f->refcount) == 0) {
     820:	685a      	ldr	r2, [r3, #4]
     822:	3a01      	subs	r2, #1
     824:	605a      	str	r2, [r3, #4]
     826:	b942      	cbnz	r2, 83a <File::~File()+0x26>
			f->close();
     828:	6900      	ldr	r0, [r0, #16]
     82a:	6803      	ldr	r3, [r0, #0]
     82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     82e:	4798      	blx	r3
			delete f;
     830:	6920      	ldr	r0, [r4, #16]
     832:	b110      	cbz	r0, 83a <File::~File()+0x26>
     834:	6803      	ldr	r3, [r0, #0]
     836:	685b      	ldr	r3, [r3, #4]
     838:	4798      	blx	r3
	}
     83a:	2114      	movs	r1, #20
     83c:	4620      	mov	r0, r4
     83e:	f00c fe0b 	bl	d458 <operator delete(void*, unsigned int)>
     842:	4620      	mov	r0, r4
     844:	bd10      	pop	{r4, pc}
     846:	bf00      	nop
     848:	200024f8 	.word	0x200024f8

0000084c <controlMixer()>:
   *roll_passthru, pitch_passthru, yaw_passthru - direct unstabilized command passthrough
   *channel_6_pwm - free auxillary channel, can be used to toggle things with an 'if' statement
   */
   
  //Quad mixing - EXAMPLE
  m1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     84c:	4b21      	ldr	r3, [pc, #132]	; (8d4 <controlMixer()+0x88>)
     84e:	edd3 6a00 	vldr	s13, [r3]
     852:	4b21      	ldr	r3, [pc, #132]	; (8d8 <controlMixer()+0x8c>)
     854:	ed93 6a00 	vldr	s12, [r3]
     858:	ee36 7ac6 	vsub.f32	s14, s13, s12
     85c:	4b1f      	ldr	r3, [pc, #124]	; (8dc <controlMixer()+0x90>)
     85e:	edd3 7a00 	vldr	s15, [r3]
     862:	4b1f      	ldr	r3, [pc, #124]	; (8e0 <controlMixer()+0x94>)
     864:	ed93 5a00 	vldr	s10, [r3]
     868:	ee77 5a27 	vadd.f32	s11, s14, s15
     86c:	ee75 5a85 	vadd.f32	s11, s11, s10
     870:	4b1c      	ldr	r3, [pc, #112]	; (8e4 <controlMixer()+0x98>)
     872:	edc3 5a00 	vstr	s11, [r3]
  m2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     876:	ee37 7a67 	vsub.f32	s14, s14, s15
     87a:	ee37 7a45 	vsub.f32	s14, s14, s10
     87e:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <controlMixer()+0x9c>)
     880:	ed83 7a00 	vstr	s14, [r3]
  m3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     884:	ee76 6a86 	vadd.f32	s13, s13, s12
     888:	ee36 6ae7 	vsub.f32	s12, s13, s15
     88c:	ee36 6a05 	vadd.f32	s12, s12, s10
     890:	4b16      	ldr	r3, [pc, #88]	; (8ec <controlMixer()+0xa0>)
     892:	ed83 6a00 	vstr	s12, [r3]
  m4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     896:	ee77 7aa6 	vadd.f32	s15, s15, s13
     89a:	ee77 7ac5 	vsub.f32	s15, s15, s10
     89e:	4b14      	ldr	r3, [pc, #80]	; (8f0 <controlMixer()+0xa4>)
     8a0:	edc3 7a00 	vstr	s15, [r3]
  m5_command_scaled = 0;
     8a4:	2300      	movs	r3, #0
     8a6:	4a13      	ldr	r2, [pc, #76]	; (8f4 <controlMixer()+0xa8>)
     8a8:	6013      	str	r3, [r2, #0]
  m6_command_scaled = 0;
     8aa:	4a13      	ldr	r2, [pc, #76]	; (8f8 <controlMixer()+0xac>)
     8ac:	6013      	str	r3, [r2, #0]

  //0.5 is centered servo, 0.0 is zero throttle if connecting to ESC for conventional PWM, 1.0 is max throttle
  s1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     8ae:	4a13      	ldr	r2, [pc, #76]	; (8fc <controlMixer()+0xb0>)
     8b0:	edc2 5a00 	vstr	s11, [r2]
  s2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     8b4:	4a12      	ldr	r2, [pc, #72]	; (900 <controlMixer()+0xb4>)
     8b6:	ed82 7a00 	vstr	s14, [r2]
  s3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     8ba:	4a12      	ldr	r2, [pc, #72]	; (904 <controlMixer()+0xb8>)
     8bc:	ed82 6a00 	vstr	s12, [r2]
  s4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     8c0:	4a11      	ldr	r2, [pc, #68]	; (908 <controlMixer()+0xbc>)
     8c2:	edc2 7a00 	vstr	s15, [r2]
  s5_command_scaled = 0;
     8c6:	4a11      	ldr	r2, [pc, #68]	; (90c <controlMixer()+0xc0>)
     8c8:	6013      	str	r3, [r2, #0]
  s6_command_scaled = 0;
     8ca:	4a11      	ldr	r2, [pc, #68]	; (910 <controlMixer()+0xc4>)
     8cc:	6013      	str	r3, [r2, #0]
  s7_command_scaled = 0;
     8ce:	4a11      	ldr	r2, [pc, #68]	; (914 <controlMixer()+0xc8>)
     8d0:	6013      	str	r3, [r2, #0]
}
     8d2:	4770      	bx	lr
     8d4:	20005390 	.word	0x20005390
     8d8:	20005148 	.word	0x20005148
     8dc:	20005174 	.word	0x20005174
     8e0:	200053ac 	.word	0x200053ac
     8e4:	200050e4 	.word	0x200050e4
     8e8:	200050ec 	.word	0x200050ec
     8ec:	200050f4 	.word	0x200050f4
     8f0:	200050fc 	.word	0x200050fc
     8f4:	20005104 	.word	0x20005104
     8f8:	2000510c 	.word	0x2000510c
     8fc:	200051b4 	.word	0x200051b4
     900:	200051bc 	.word	0x200051bc
     904:	200051c4 	.word	0x200051c4
     908:	200051cc 	.word	0x200051cc
     90c:	200051d4 	.word	0x200051d4
     910:	200051dc 	.word	0x200051dc
     914:	200051e4 	.word	0x200051e4

00000918 <IMUinit()>:

void IMUinit() {
     918:	b510      	push	{r4, lr}
  //DESCRIPTION: Initialize IMU
  /*
   * Don't worry about how this works.
   */
  #if defined USE_MPU6050_I2C
    Wire.begin();
     91a:	4c17      	ldr	r4, [pc, #92]	; (978 <IMUinit()+0x60>)
     91c:	4620      	mov	r0, r4
     91e:	f014 fddb 	bl	154d8 <___ZN7TwoWire5beginEv_veneer>
    Wire.setClock(1000000); //Note this is 2.5 times the spec sheet 400 kHz max...
     922:	4916      	ldr	r1, [pc, #88]	; (97c <IMUinit()+0x64>)
     924:	4620      	mov	r0, r4
     926:	f004 f82d 	bl	4984 <TwoWire::setClock(unsigned long)>
    
    mpu6050.initialize();
     92a:	4c15      	ldr	r4, [pc, #84]	; (980 <IMUinit()+0x68>)
     92c:	4620      	mov	r0, r4
     92e:	f003 fb7d 	bl	402c <MPU6050::initialize()>
    
    if (mpu6050.testConnection() == false) {
     932:	4620      	mov	r0, r4
     934:	f003 fba0 	bl	4078 <MPU6050::testConnection()>
     938:	b998      	cbnz	r0, 962 <IMUinit()+0x4a>
							  return write((const uint8_t *)str, strlen(str)); }
     93a:	4c12      	ldr	r4, [pc, #72]	; (984 <IMUinit()+0x6c>)
     93c:	6823      	ldr	r3, [r4, #0]
     93e:	685b      	ldr	r3, [r3, #4]
     940:	2223      	movs	r2, #35	; 0x23
     942:	4911      	ldr	r1, [pc, #68]	; (988 <IMUinit()+0x70>)
     944:	4620      	mov	r0, r4
     946:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     948:	4620      	mov	r0, r4
     94a:	f00b ffaa 	bl	c8a2 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     94e:	6823      	ldr	r3, [r4, #0]
     950:	685b      	ldr	r3, [r3, #4]
     952:	2229      	movs	r2, #41	; 0x29
     954:	490d      	ldr	r1, [pc, #52]	; (98c <IMUinit()+0x74>)
     956:	4620      	mov	r0, r4
     958:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     95a:	4620      	mov	r0, r4
     95c:	f00b ffa1 	bl	c8a2 <Print::println()>
      Serial.println("MPU6050 initialization unsuccessful");
      Serial.println("Check MPU6050 wiring or try cycling power");
      while(1) {}
     960:	e7fe      	b.n	960 <IMUinit()+0x48>
    }

    //From the reset state all registers should be 0x00, so we should be at
    //max sample rate with digital low pass filter(s) off.  All we need to
    //do is set the desired fullscale ranges
    mpu6050.setFullScaleGyroRange(GYRO_SCALE);
     962:	4c07      	ldr	r4, [pc, #28]	; (980 <IMUinit()+0x68>)
     964:	2100      	movs	r1, #0
     966:	4620      	mov	r0, r4
     968:	f003 fafe 	bl	3f68 <MPU6050::setFullScaleGyroRange(unsigned char)>
    mpu6050.setFullScaleAccelRange(ACCEL_SCALE);
     96c:	2100      	movs	r1, #0
     96e:	4620      	mov	r0, r4
     970:	f003 fb06 	bl	3f80 <MPU6050::setFullScaleAccelRange(unsigned char)>
    mpu9250.setMagCalX(MagErrorX, MagScaleX);
    mpu9250.setMagCalY(MagErrorY, MagScaleY);
    mpu9250.setMagCalZ(MagErrorZ, MagScaleZ);
    mpu9250.setSrd(0); //sets gyro and accel read to 1khz, magnetometer read to 100hz
  #endif
}
     974:	bd10      	pop	{r4, pc}
     976:	bf00      	nop
     978:	20004784 	.word	0x20004784
     97c:	000f4240 	.word	0x000f4240
     980:	20005110 	.word	0x20005110
     984:	2000336c 	.word	0x2000336c
     988:	20001d90 	.word	0x20001d90
     98c:	20001db4 	.word	0x20001db4

00000990 <getIMUdata()>:

void getIMUdata() {
     990:	b500      	push	{lr}
     992:	b089      	sub	sp, #36	; 0x24
   * the constant errors found in calculate_IMU_error() on startup are subtracted from the accelerometer and gyro readings.
   */
  int16_t AcX,AcY,AcZ,GyX,GyY,GyZ,MgX,MgY,MgZ;

  #if defined USE_MPU6050_I2C
    mpu6050.getMotion6(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ);
     994:	ab05      	add	r3, sp, #20
     996:	9302      	str	r3, [sp, #8]
     998:	f10d 0316 	add.w	r3, sp, #22
     99c:	9301      	str	r3, [sp, #4]
     99e:	ab06      	add	r3, sp, #24
     9a0:	9300      	str	r3, [sp, #0]
     9a2:	f10d 031a 	add.w	r3, sp, #26
     9a6:	aa07      	add	r2, sp, #28
     9a8:	f10d 011e 	add.w	r1, sp, #30
     9ac:	48a2      	ldr	r0, [pc, #648]	; (c38 <getIMUdata()+0x2a8>)
     9ae:	f003 faf3 	bl	3f98 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>
    mpu9250.getMotion9(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ, &MgX, &MgY, &MgZ);
  #endif

 //Accelerometer
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
  AccY = AcY / ACCEL_SCALE_FACTOR;
     9b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
     9b6:	ee03 3a10 	vmov	s6, r3
     9ba:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
     9be:	ed9f 2b9a 	vldr	d2, [pc, #616]	; c28 <getIMUdata()+0x298>
     9c2:	ee23 3b02 	vmul.f64	d3, d3, d2
     9c6:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  AccX = AccX - AccErrorX;
  AccY = AccY - AccErrorY;
     9ca:	4b9c      	ldr	r3, [pc, #624]	; (c3c <getIMUdata()+0x2ac>)
     9cc:	edd3 7a00 	vldr	s15, [r3]
     9d0:	ee33 3a67 	vsub.f32	s6, s6, s15
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
     9d4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
     9d8:	ee06 3a10 	vmov	s12, r3
     9dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     9e0:	ee26 6b02 	vmul.f64	d6, d6, d2
     9e4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  AccZ = AccZ - AccErrorZ;
     9e8:	4b95      	ldr	r3, [pc, #596]	; (c40 <getIMUdata()+0x2b0>)
     9ea:	edd3 7a00 	vldr	s15, [r3]
     9ee:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter accelerometer data
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     9f2:	4b94      	ldr	r3, [pc, #592]	; (c44 <getIMUdata()+0x2b4>)
     9f4:	edd3 6a00 	vldr	s13, [r3]
     9f8:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     9fc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     a00:	ee35 4b44 	vsub.f64	d4, d5, d4
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
     a04:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     a08:	ee07 3a10 	vmov	s14, r3
     a0c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a10:	ee27 7b02 	vmul.f64	d7, d7, d2
     a14:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  AccX = AccX - AccErrorX;
     a18:	4b8b      	ldr	r3, [pc, #556]	; (c48 <getIMUdata()+0x2b8>)
     a1a:	edd3 7a00 	vldr	s15, [r3]
     a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a22:	ee27 7a26 	vmul.f32	s14, s14, s13
     a26:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     a2a:	4988      	ldr	r1, [pc, #544]	; (c4c <getIMUdata()+0x2bc>)
     a2c:	ed91 2a00 	vldr	s4, [r1]
     a30:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a34:	ee02 7b04 	vmla.f64	d7, d2, d4
     a38:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     a3c:	4b84      	ldr	r3, [pc, #528]	; (c50 <getIMUdata()+0x2c0>)
     a3e:	ed83 7a00 	vstr	s14, [r3]
  AccY = (1.0 - B_accel)*AccY_prev + B_accel*AccY;
     a42:	4a84      	ldr	r2, [pc, #528]	; (c54 <getIMUdata()+0x2c4>)
     a44:	ed92 2a00 	vldr	s4, [r2]
     a48:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a4c:	ee23 3a26 	vmul.f32	s6, s6, s13
     a50:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     a54:	ee02 3b04 	vmla.f64	d3, d2, d4
     a58:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     a5c:	4b7e      	ldr	r3, [pc, #504]	; (c58 <getIMUdata()+0x2c8>)
     a5e:	ed83 3a00 	vstr	s6, [r3]
  AccZ = (1.0 - B_accel)*AccZ_prev + B_accel*AccZ;
     a62:	4b7e      	ldr	r3, [pc, #504]	; (c5c <getIMUdata()+0x2cc>)
     a64:	ed93 2a00 	vldr	s4, [r3]
     a68:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a6c:	ee26 6a26 	vmul.f32	s12, s12, s13
     a70:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     a74:	ee02 6b04 	vmla.f64	d6, d2, d4
     a78:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     a7c:	4878      	ldr	r0, [pc, #480]	; (c60 <getIMUdata()+0x2d0>)
     a7e:	ed80 6a00 	vstr	s12, [r0]
  AccX_prev = AccX;
     a82:	ed81 7a00 	vstr	s14, [r1]
  AccY_prev = AccY;
     a86:	ed82 3a00 	vstr	s6, [r2]
  AccZ_prev = AccZ;
     a8a:	ed83 6a00 	vstr	s12, [r3]

  //Gyro
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
  GyroY = GyY / GYRO_SCALE_FACTOR;
     a8e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
     a92:	ee07 3a10 	vmov	s14, r3
     a96:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a9a:	ed9f 2b65 	vldr	d2, [pc, #404]	; c30 <getIMUdata()+0x2a0>
     a9e:	ee87 3b02 	vdiv.f64	d3, d7, d2
     aa2:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  GyroX = GyroX - GyroErrorX;
  GyroY = GyroY - GyroErrorY;
     aa6:	4b6f      	ldr	r3, [pc, #444]	; (c64 <getIMUdata()+0x2d4>)
     aa8:	edd3 7a00 	vldr	s15, [r3]
     aac:	ee33 3a67 	vsub.f32	s6, s6, s15
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
     ab0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
     ab4:	ee07 3a10 	vmov	s14, r3
     ab8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     abc:	ee87 6b02 	vdiv.f64	d6, d7, d2
     ac0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  GyroZ = GyroZ - GyroErrorZ;
     ac4:	4b68      	ldr	r3, [pc, #416]	; (c68 <getIMUdata()+0x2d8>)
     ac6:	edd3 7a00 	vldr	s15, [r3]
     aca:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter gyro data
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     ace:	4b67      	ldr	r3, [pc, #412]	; (c6c <getIMUdata()+0x2dc>)
     ad0:	edd3 6a00 	vldr	s13, [r3]
     ad4:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     ad8:	ee35 4b44 	vsub.f64	d4, d5, d4
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
     adc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     ae0:	ee01 3a10 	vmov	s2, r3
     ae4:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
     ae8:	ee81 7b02 	vdiv.f64	d7, d1, d2
     aec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  GyroX = GyroX - GyroErrorX;
     af0:	4b5f      	ldr	r3, [pc, #380]	; (c70 <getIMUdata()+0x2e0>)
     af2:	edd3 7a00 	vldr	s15, [r3]
     af6:	ee37 7a67 	vsub.f32	s14, s14, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     afa:	ee27 7a26 	vmul.f32	s14, s14, s13
     afe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     b02:	495c      	ldr	r1, [pc, #368]	; (c74 <getIMUdata()+0x2e4>)
     b04:	ed91 2a00 	vldr	s4, [r1]
     b08:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b0c:	ee02 7b04 	vmla.f64	d7, d2, d4
     b10:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     b14:	4b58      	ldr	r3, [pc, #352]	; (c78 <getIMUdata()+0x2e8>)
     b16:	ed83 7a00 	vstr	s14, [r3]
  GyroY = (1.0 - B_gyro)*GyroY_prev + B_gyro*GyroY;
     b1a:	4a58      	ldr	r2, [pc, #352]	; (c7c <getIMUdata()+0x2ec>)
     b1c:	ed92 2a00 	vldr	s4, [r2]
     b20:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b24:	ee23 3a26 	vmul.f32	s6, s6, s13
     b28:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     b2c:	ee02 3b04 	vmla.f64	d3, d2, d4
     b30:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     b34:	4b52      	ldr	r3, [pc, #328]	; (c80 <getIMUdata()+0x2f0>)
     b36:	ed83 3a00 	vstr	s6, [r3]
  GyroZ = (1.0 - B_gyro)*GyroZ_prev + B_gyro*GyroZ;
     b3a:	4b52      	ldr	r3, [pc, #328]	; (c84 <getIMUdata()+0x2f4>)
     b3c:	ed93 2a00 	vldr	s4, [r3]
     b40:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b44:	ee26 6a26 	vmul.f32	s12, s12, s13
     b48:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     b4c:	ee02 6b04 	vmla.f64	d6, d2, d4
     b50:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     b54:	484c      	ldr	r0, [pc, #304]	; (c88 <getIMUdata()+0x2f8>)
     b56:	ed80 6a00 	vstr	s12, [r0]
  GyroX_prev = GyroX;
     b5a:	ed81 7a00 	vstr	s14, [r1]
  GyroY_prev = GyroY;
     b5e:	ed82 3a00 	vstr	s6, [r2]
  GyroZ_prev = GyroZ;
     b62:	ed83 6a00 	vstr	s12, [r3]

  //Magnetometer
  MagX = MgX/6.0; //uT
  MagY = MgY/6.0;
     b66:	ed9f 7a49 	vldr	s14, [pc, #292]	; c8c <getIMUdata()+0x2fc>
  MagZ = MgZ/6.0;
  //Correct the outputs with the calculated error values
  MagX = (MagX - MagErrorX)*MagScaleX;
  MagY = (MagY - MagErrorY)*MagScaleY;
     b6a:	4b49      	ldr	r3, [pc, #292]	; (c90 <getIMUdata()+0x300>)
     b6c:	ed93 6a00 	vldr	s12, [r3]
     b70:	ee37 6a46 	vsub.f32	s12, s14, s12
     b74:	4b47      	ldr	r3, [pc, #284]	; (c94 <getIMUdata()+0x304>)
     b76:	edd3 7a00 	vldr	s15, [r3]
     b7a:	ee26 6a27 	vmul.f32	s12, s12, s15
  MagZ = (MagZ - MagErrorZ)*MagScaleZ;
     b7e:	4b46      	ldr	r3, [pc, #280]	; (c98 <getIMUdata()+0x308>)
     b80:	ed93 4a00 	vldr	s8, [r3]
     b84:	ee37 4a44 	vsub.f32	s8, s14, s8
     b88:	4b44      	ldr	r3, [pc, #272]	; (c9c <getIMUdata()+0x30c>)
     b8a:	edd3 7a00 	vldr	s15, [r3]
     b8e:	ee24 4a27 	vmul.f32	s8, s8, s15
  //LP filter magnetometer data
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     b92:	4b43      	ldr	r3, [pc, #268]	; (ca0 <getIMUdata()+0x310>)
     b94:	edd3 4a00 	vldr	s9, [r3]
     b98:	eeb7 3ae4 	vcvt.f64.f32	d3, s9
     b9c:	ee35 5b43 	vsub.f64	d5, d5, d3
  MagX = (MagX - MagErrorX)*MagScaleX;
     ba0:	4b40      	ldr	r3, [pc, #256]	; (ca4 <getIMUdata()+0x314>)
     ba2:	edd3 7a00 	vldr	s15, [r3]
     ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
     baa:	4b3f      	ldr	r3, [pc, #252]	; (ca8 <getIMUdata()+0x318>)
     bac:	edd3 7a00 	vldr	s15, [r3]
     bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     bb4:	ee27 7a24 	vmul.f32	s14, s14, s9
     bb8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     bbc:	493b      	ldr	r1, [pc, #236]	; (cac <getIMUdata()+0x31c>)
     bbe:	ed91 3a00 	vldr	s6, [r1]
     bc2:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bc6:	ee03 7b05 	vmla.f64	d7, d3, d5
     bca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     bce:	4b38      	ldr	r3, [pc, #224]	; (cb0 <getIMUdata()+0x320>)
     bd0:	ed83 7a00 	vstr	s14, [r3]
  MagY = (1.0 - B_mag)*MagY_prev + B_mag*MagY;
     bd4:	4a37      	ldr	r2, [pc, #220]	; (cb4 <getIMUdata()+0x324>)
     bd6:	ed92 3a00 	vldr	s6, [r2]
     bda:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bde:	ee26 6a24 	vmul.f32	s12, s12, s9
     be2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     be6:	ee03 6b05 	vmla.f64	d6, d3, d5
     bea:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     bee:	4b32      	ldr	r3, [pc, #200]	; (cb8 <getIMUdata()+0x328>)
     bf0:	ed83 6a00 	vstr	s12, [r3]
  MagZ = (1.0 - B_mag)*MagZ_prev + B_mag*MagZ;
     bf4:	4b31      	ldr	r3, [pc, #196]	; (cbc <getIMUdata()+0x32c>)
     bf6:	ed93 3a00 	vldr	s6, [r3]
     bfa:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bfe:	ee24 4a24 	vmul.f32	s8, s8, s9
     c02:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     c06:	ee03 4b05 	vmla.f64	d4, d3, d5
     c0a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     c0e:	482c      	ldr	r0, [pc, #176]	; (cc0 <getIMUdata()+0x330>)
     c10:	ed80 4a00 	vstr	s8, [r0]
  MagX_prev = MagX;
     c14:	ed81 7a00 	vstr	s14, [r1]
  MagY_prev = MagY;
     c18:	ed82 6a00 	vstr	s12, [r2]
  MagZ_prev = MagZ;
     c1c:	ed83 4a00 	vstr	s8, [r3]
}
     c20:	b009      	add	sp, #36	; 0x24
     c22:	f85d fb04 	ldr.w	pc, [sp], #4
     c26:	bf00      	nop
     c28:	00000000 	.word	0x00000000
     c2c:	3f100000 	.word	0x3f100000
     c30:	00000000 	.word	0x00000000
     c34:	40606000 	.word	0x40606000
     c38:	20005110 	.word	0x20005110
     c3c:	2000331c 	.word	0x2000331c
     c40:	20003320 	.word	0x20003320
     c44:	20003324 	.word	0x20003324
     c48:	20003318 	.word	0x20003318
     c4c:	2000408c 	.word	0x2000408c
     c50:	20004088 	.word	0x20004088
     c54:	20004094 	.word	0x20004094
     c58:	20004090 	.word	0x20004090
     c5c:	2000409c 	.word	0x2000409c
     c60:	20004098 	.word	0x20004098
     c64:	20003340 	.word	0x20003340
     c68:	20003344 	.word	0x20003344
     c6c:	20003328 	.word	0x20003328
     c70:	2000333c 	.word	0x2000333c
     c74:	200040c8 	.word	0x200040c8
     c78:	200040c4 	.word	0x200040c4
     c7c:	200040d0 	.word	0x200040d0
     c80:	200040cc 	.word	0x200040cc
     c84:	200040d8 	.word	0x200040d8
     c88:	200040d4 	.word	0x200040d4
     c8c:	00000000 	.word	0x00000000
     c90:	2000411c 	.word	0x2000411c
     c94:	20003364 	.word	0x20003364
     c98:	20004120 	.word	0x20004120
     c9c:	20003368 	.word	0x20003368
     ca0:	20003330 	.word	0x20003330
     ca4:	20004118 	.word	0x20004118
     ca8:	20003360 	.word	0x20003360
     cac:	20004128 	.word	0x20004128
     cb0:	20004124 	.word	0x20004124
     cb4:	20004130 	.word	0x20004130
     cb8:	2000412c 	.word	0x2000412c
     cbc:	20004138 	.word	0x20004138
     cc0:	20004134 	.word	0x20004134
     cc4:	00000000 	.word	0x00000000

00000cc8 <setDesStateSerial(int)>:
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
}

void setDesStateSerial(int controlledAxis) {
     cc8:	b538      	push	{r3, r4, r5, lr}
     cca:	ed2d 8b02 	vpush	{d8}
     cce:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     cd0:	f00d ffd8 	bl	ec84 <usb_serial_available>
			===     					====		=====
			controlledAxis 		int 		The axis about which the user's serial inputs set the desired angle.
																1: roll
																2: pitch
	*/
	if (Serial.available()) {
     cd4:	bb50      	cbnz	r0, d2c <setDesStateSerial(int)+0x64>
		}
	}
	
	float desiredAngle = 0;

	if (useSineWave) {
     cd6:	4b24      	ldr	r3, [pc, #144]	; (d68 <setDesStateSerial(int)+0xa0>)
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	b3ab      	cbz	r3, d48 <setDesStateSerial(int)+0x80>
		sineFrequency = static_cast<float>(serialInputValue);
     cdc:	4b23      	ldr	r3, [pc, #140]	; (d6c <setDesStateSerial(int)+0xa4>)
     cde:	ed93 7a00 	vldr	s14, [r3]
     ce2:	4b23      	ldr	r3, [pc, #140]	; (d70 <setDesStateSerial(int)+0xa8>)
     ce4:	ed83 7a00 	vstr	s14, [r3]
		desiredAngle = 10*sin(2*PI*sineFrequency*sineTime);    // Set the output to be a sin wave between -5 and 5 degrees
     ce8:	4d22      	ldr	r5, [pc, #136]	; (d74 <setDesStateSerial(int)+0xac>)
     cea:	ed95 8a00 	vldr	s16, [r5]
     cee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     cf2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; d60 <setDesStateSerial(int)+0x98>
     cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
     cfa:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     cfe:	ee27 0b00 	vmul.f64	d0, d7, d0
     d02:	f00e fd7d 	bl	f800 <sin>
     d06:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     d0a:	ee20 0b07 	vmul.f64	d0, d0, d7
     d0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		sineTime = sineTime + 1/2000.0f;
     d12:	eddf 7a19 	vldr	s15, [pc, #100]	; d78 <setDesStateSerial(int)+0xb0>
     d16:	ee78 7a27 	vadd.f32	s15, s16, s15
     d1a:	edc5 7a00 	vstr	s15, [r5]
	}
	else {
		desiredAngle = static_cast<float>(serialInputValue);
	}

	switch (controlledAxis) {
     d1e:	2c01      	cmp	r4, #1
     d20:	d016      	beq.n	d50 <setDesStateSerial(int)+0x88>
     d22:	2c02      	cmp	r4, #2
     d24:	d018      	beq.n	d58 <setDesStateSerial(int)+0x90>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     d26:	ecbd 8b02 	vpop	{d8}
     d2a:	bd38      	pop	{r3, r4, r5, pc}
		serialInputValue = Serial.parseFloat();
     d2c:	4813      	ldr	r0, [pc, #76]	; (d7c <setDesStateSerial(int)+0xb4>)
     d2e:	f00b fea7 	bl	ca80 <Stream::parseFloat()>
     d32:	4b0e      	ldr	r3, [pc, #56]	; (d6c <setDesStateSerial(int)+0xa4>)
     d34:	ed83 0a00 	vstr	s0, [r3]
		while (Serial.available() !=0) {
     d38:	e001      	b.n	d3e <setDesStateSerial(int)+0x76>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     d3a:	f00d ffe1 	bl	ed00 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
     d3e:	f00d ffa1 	bl	ec84 <usb_serial_available>
     d42:	2800      	cmp	r0, #0
     d44:	d1f9      	bne.n	d3a <setDesStateSerial(int)+0x72>
     d46:	e7c6      	b.n	cd6 <setDesStateSerial(int)+0xe>
		desiredAngle = static_cast<float>(serialInputValue);
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <setDesStateSerial(int)+0xa4>)
     d4a:	ed93 0a00 	vldr	s0, [r3]
     d4e:	e7e6      	b.n	d1e <setDesStateSerial(int)+0x56>
			roll_des = desiredAngle;
     d50:	4b0b      	ldr	r3, [pc, #44]	; (d80 <setDesStateSerial(int)+0xb8>)
     d52:	ed83 0a00 	vstr	s0, [r3]
			break;
     d56:	e7e6      	b.n	d26 <setDesStateSerial(int)+0x5e>
			pitch_des = desiredAngle;
     d58:	4b0a      	ldr	r3, [pc, #40]	; (d84 <setDesStateSerial(int)+0xbc>)
     d5a:	ed83 0a00 	vstr	s0, [r3]
}
     d5e:	e7e2      	b.n	d26 <setDesStateSerial(int)+0x5e>
     d60:	54442d18 	.word	0x54442d18
     d64:	401921fb 	.word	0x401921fb
     d68:	20003a5a 	.word	0x20003a5a
     d6c:	20005358 	.word	0x20005358
     d70:	2000537c 	.word	0x2000537c
     d74:	20005380 	.word	0x20005380
     d78:	3a03126f 	.word	0x3a03126f
     d7c:	2000336c 	.word	0x2000336c
     d80:	20005178 	.word	0x20005178
     d84:	2000514c 	.word	0x2000514c

00000d88 <performSineSweep(int)>:

void performSineSweep(int controlledAxis) {
     d88:	b510      	push	{r4, lr}
     d8a:	ed2d 8b06 	vpush	{d8-d10}
     d8e:	4604      	mov	r4, r0
  //  while (Serial.available() !=0) {
  //      Serial.read();
  //    }
	//}
  //if (sweepFlag){
    desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     d90:	4b2d      	ldr	r3, [pc, #180]	; (e48 <performSineSweep(int)+0xc0>)
     d92:	edd3 aa00 	vldr	s21, [r3]
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <performSineSweep(int)+0xc4>)
     d98:	edd3 8a00 	vldr	s17, [r3]
     d9c:	4b2c      	ldr	r3, [pc, #176]	; (e50 <performSineSweep(int)+0xc8>)
     d9e:	ed93 aa00 	vldr	s20, [r3]
     da2:	4b2c      	ldr	r3, [pc, #176]	; (e54 <performSineSweep(int)+0xcc>)
     da4:	ed93 8a00 	vldr	s16, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     da8:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
     dac:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
     db0:	eeb0 0b49 	vmov.f64	d0, d9
     db4:	f00e fa2c 	bl	f210 <pow>
    if (sineTime > sweepTime) {
     db8:	eeb4 aac8 	vcmpe.f32	s20, s16
     dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dc0:	d42f      	bmi.n	e22 <performSineSweep(int)+0x9a>
     dc2:	eeb0 5b40 	vmov.f64	d5, d0
     dc6:	eeb7 7aca 	vcvt.f64.f32	d7, s20
    desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     dca:	ee3a 6ae8 	vsub.f32	s12, s21, s17
     dce:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     dd2:	ed9f 4b19 	vldr	d4, [pc, #100]	; e38 <performSineSweep(int)+0xb0>
     dd6:	ee26 6b04 	vmul.f64	d6, d6, d4
     dda:	ee27 7b07 	vmul.f64	d7, d7, d7
     dde:	ee86 4b07 	vdiv.f64	d4, d6, d7
     de2:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
     de6:	ed9f 6b16 	vldr	d6, [pc, #88]	; e40 <performSineSweep(int)+0xb8>
     dea:	ee27 7b06 	vmul.f64	d7, d7, d6
     dee:	ee27 0b09 	vmul.f64	d0, d7, d9
     df2:	ee04 0b05 	vmla.f64	d0, d4, d5
     df6:	f00e fd03 	bl	f800 <sin>
     dfa:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     dfe:	ee20 0b07 	vmul.f64	d0, d0, d7
     e02:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
      desiredAngle = 0;
    }
    sineTime = sineTime + 1/2000.0f;
     e06:	eddf 7a14 	vldr	s15, [pc, #80]	; e58 <performSineSweep(int)+0xd0>
     e0a:	ee38 8a27 	vadd.f32	s16, s16, s15
     e0e:	4b11      	ldr	r3, [pc, #68]	; (e54 <performSineSweep(int)+0xcc>)
     e10:	ed83 8a00 	vstr	s16, [r3]
  //}

	switch (controlledAxis) {
     e14:	2c01      	cmp	r4, #1
     e16:	d007      	beq.n	e28 <performSineSweep(int)+0xa0>
     e18:	2c02      	cmp	r4, #2
     e1a:	d009      	beq.n	e30 <performSineSweep(int)+0xa8>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     e1c:	ecbd 8b06 	vpop	{d8-d10}
     e20:	bd10      	pop	{r4, pc}
      desiredAngle = 0;
     e22:	ed9f 0a0e 	vldr	s0, [pc, #56]	; e5c <performSineSweep(int)+0xd4>
     e26:	e7ee      	b.n	e06 <performSineSweep(int)+0x7e>
			roll_des = desiredAngle;
     e28:	4b0d      	ldr	r3, [pc, #52]	; (e60 <performSineSweep(int)+0xd8>)
     e2a:	ed83 0a00 	vstr	s0, [r3]
			break;
     e2e:	e7f5      	b.n	e1c <performSineSweep(int)+0x94>
			pitch_des = desiredAngle;
     e30:	4b0c      	ldr	r3, [pc, #48]	; (e64 <performSineSweep(int)+0xdc>)
     e32:	ed83 0a00 	vstr	s0, [r3]
}
     e36:	e7f1      	b.n	e1c <performSineSweep(int)+0x94>
     e38:	54442d18 	.word	0x54442d18
     e3c:	400921fb 	.word	0x400921fb
     e40:	54442d18 	.word	0x54442d18
     e44:	401921fb 	.word	0x401921fb
     e48:	200039e4 	.word	0x200039e4
     e4c:	20003a30 	.word	0x20003a30
     e50:	20003a3c 	.word	0x20003a3c
     e54:	20005380 	.word	0x20005380
     e58:	3a03126f 	.word	0x3a03126f
     e5c:	00000000 	.word	0x00000000
     e60:	20005178 	.word	0x20005178
     e64:	2000514c 	.word	0x2000514c

00000e68 <rollStep()>:

void rollStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     e68:	4b0a      	ldr	r3, [pc, #40]	; (e94 <rollStep()+0x2c>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	f240 42e1 	movw	r2, #1249	; 0x4e1
     e70:	4293      	cmp	r3, r2
     e72:	dd0c      	ble.n	e8e <rollStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     e74:	f240 62d6 	movw	r2, #1750	; 0x6d6
     e78:	4293      	cmp	r3, r2
     e7a:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     e7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; e98 <rollStep()+0x30>
     e82:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	roll_des = desiredAngle;
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <rollStep()+0x34>)
     e88:	edc3 7a00 	vstr	s15, [r3]
}
     e8c:	4770      	bx	lr
		desiredAngle = 15.0f;
     e8e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     e92:	e7f8      	b.n	e86 <rollStep()+0x1e>
     e94:	20005054 	.word	0x20005054
     e98:	00000000 	.word	0x00000000
     e9c:	20005178 	.word	0x20005178

00000ea0 <pitchStep()>:
void pitchStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <pitchStep()+0x2c>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	f240 42e1 	movw	r2, #1249	; 0x4e1
     ea8:	4293      	cmp	r3, r2
     eaa:	dd0c      	ble.n	ec6 <pitchStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     eac:	f240 62d6 	movw	r2, #1750	; 0x6d6
     eb0:	4293      	cmp	r3, r2
     eb2:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     eb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; ed0 <pitchStep()+0x30>
     eba:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	pitch_des = desiredAngle;
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <pitchStep()+0x34>)
     ec0:	edc3 7a00 	vstr	s15, [r3]
}
     ec4:	4770      	bx	lr
		desiredAngle = 15.0f;
     ec6:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     eca:	e7f8      	b.n	ebe <pitchStep()+0x1e>
     ecc:	20005054 	.word	0x20005054
     ed0:	00000000 	.word	0x00000000
     ed4:	2000514c 	.word	0x2000514c

00000ed8 <getDesState()>:
   * RC pwm commands and scaling them to be within our limits defined in setup. thro_des stays within 0 to 1 range.
   * roll_des and pitch_des are scaled to be within max roll/pitch amount in either degrees (angle mode) or degrees/sec
   * (rate mode). yaw_des is scaled to be within max yaw in degrees/sec. Also creates roll_passthru, pitch_passthru, and
   * yaw_passthru variables, to be used in commanding motors/servos with direct unstabilized commands in controlMixer().
   */
  thro_des = (channel_1_pwm - 1000.0)/1000.0; //Between 0 and 1
     ed8:	4b99      	ldr	r3, [pc, #612]	; (1140 <getDesState()+0x268>)
     eda:	ed93 7a00 	vldr	s14, [r3]
     ede:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     ee2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 1120 <getDesState()+0x248>
     ee6:	ee37 7b46 	vsub.f64	d7, d7, d6
     eea:	ee87 4b06 	vdiv.f64	d4, d7, d6
     eee:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
  roll_des = (channel_2_pwm - 1500.0)/500.0; //Between -1 and 1
     ef2:	4b94      	ldr	r3, [pc, #592]	; (1144 <getDesState()+0x26c>)
     ef4:	ed93 7a00 	vldr	s14, [r3]
     ef8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     efc:	ed9f 2b8a 	vldr	d2, [pc, #552]	; 1128 <getDesState()+0x250>
     f00:	ee37 7b42 	vsub.f64	d7, d7, d2
     f04:	ed9f 3b8a 	vldr	d3, [pc, #552]	; 1130 <getDesState()+0x258>
     f08:	ee87 5b03 	vdiv.f64	d5, d7, d3
     f0c:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  pitch_des = (channel_3_pwm - 1500.0)/500.0; //Between -1 and 1
     f10:	4b8d      	ldr	r3, [pc, #564]	; (1148 <getDesState()+0x270>)
     f12:	ed93 7a00 	vldr	s14, [r3]
     f16:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f1a:	ee37 7b42 	vsub.f64	d7, d7, d2
     f1e:	ee87 6b03 	vdiv.f64	d6, d7, d3
     f22:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  yaw_des = (channel_4_pwm - 1500.0)/500.0; //Between -1 and 1
     f26:	4b89      	ldr	r3, [pc, #548]	; (114c <getDesState()+0x274>)
     f28:	ed93 7a00 	vldr	s14, [r3]
     f2c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f30:	ee37 7b42 	vsub.f64	d7, d7, d2
     f34:	ee87 2b03 	vdiv.f64	d2, d7, d3
     f38:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  roll_passthru = roll_des/2.0; //Between -0.5 and 0.5
     f3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     f40:	ee65 3a27 	vmul.f32	s7, s10, s15
  pitch_passthru = pitch_des/2.0; //Between -0.5 and 0.5
     f44:	ee26 7a27 	vmul.f32	s14, s12, s15
  yaw_passthru = yaw_des/2.0; //Between -0.5 and 0.5
     f48:	ee62 7a27 	vmul.f32	s15, s4, s15
	//beta_des = -pitch_IMU/beta_max; // Between -1 and 1
	alpha_des = roll_des;
	beta_des = pitch_des;

  //Constrain within normalized bounds
  thro_des = constrain(thro_des, 0.0, 1.0); //Between 0 and 1
     f4c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
     f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f54:	d40c      	bmi.n	f70 <getDesState()+0x98>
     f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     f5a:	eeb4 4ae6 	vcmpe.f32	s8, s13
     f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f62:	dd02      	ble.n	f6a <getDesState()+0x92>
     f64:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
     f68:	e004      	b.n	f74 <getDesState()+0x9c>
     f6a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     f6e:	e001      	b.n	f74 <getDesState()+0x9c>
     f70:	ed9f 4b71 	vldr	d4, [pc, #452]	; 1138 <getDesState()+0x260>
     f74:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     f78:	4b75      	ldr	r3, [pc, #468]	; (1150 <getDesState()+0x278>)
     f7a:	ed83 4a00 	vstr	s8, [r3]
  roll_des = constrain(roll_des, -1.0, 1.0)*maxRoll; //Between -maxRoll and +maxRoll
     f7e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
     f82:	eeb4 5ae6 	vcmpe.f32	s10, s13
     f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f8a:	d40c      	bmi.n	fa6 <getDesState()+0xce>
     f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     f90:	eeb4 5ae6 	vcmpe.f32	s10, s13
     f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f98:	dd02      	ble.n	fa0 <getDesState()+0xc8>
     f9a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     f9e:	e004      	b.n	faa <getDesState()+0xd2>
     fa0:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
     fa4:	e001      	b.n	faa <getDesState()+0xd2>
     fa6:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
     faa:	4b6a      	ldr	r3, [pc, #424]	; (1154 <getDesState()+0x27c>)
     fac:	ed93 4a00 	vldr	s8, [r3]
     fb0:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     fb4:	ee24 4b05 	vmul.f64	d4, d4, d5
     fb8:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     fbc:	4b66      	ldr	r3, [pc, #408]	; (1158 <getDesState()+0x280>)
     fbe:	ed83 4a00 	vstr	s8, [r3]
  pitch_des = constrain(pitch_des, -1.0, 1.0)*maxPitch; //Between -maxPitch and +maxPitch
     fc2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
     fc6:	eeb4 6ae6 	vcmpe.f32	s12, s13
     fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fce:	d40c      	bmi.n	fea <getDesState()+0x112>
     fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     fd4:	eeb4 6ae6 	vcmpe.f32	s12, s13
     fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fdc:	dd02      	ble.n	fe4 <getDesState()+0x10c>
     fde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     fe2:	e004      	b.n	fee <getDesState()+0x116>
     fe4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     fe8:	e001      	b.n	fee <getDesState()+0x116>
     fea:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
     fee:	4b5b      	ldr	r3, [pc, #364]	; (115c <getDesState()+0x284>)
     ff0:	ed93 4a00 	vldr	s8, [r3]
     ff4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     ff8:	ee24 4b06 	vmul.f64	d4, d4, d6
     ffc:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1000:	4b57      	ldr	r3, [pc, #348]	; (1160 <getDesState()+0x288>)
    1002:	ed83 4a00 	vstr	s8, [r3]
  yaw_des = constrain(yaw_des, -1.0, 1.0)*maxYaw; //Between -maxYaw and +maxYaw
    1006:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    100a:	eeb4 2ae4 	vcmpe.f32	s4, s9
    100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1012:	d40c      	bmi.n	102e <getDesState()+0x156>
    1014:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    1018:	eeb4 2ae4 	vcmpe.f32	s4, s9
    101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1020:	dd02      	ble.n	1028 <getDesState()+0x150>
    1022:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    1026:	e004      	b.n	1032 <getDesState()+0x15a>
    1028:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    102c:	e001      	b.n	1032 <getDesState()+0x15a>
    102e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    1032:	4b4c      	ldr	r3, [pc, #304]	; (1164 <getDesState()+0x28c>)
    1034:	ed93 4a00 	vldr	s8, [r3]
    1038:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    103c:	ee24 4b02 	vmul.f64	d4, d4, d2
    1040:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1044:	4b48      	ldr	r3, [pc, #288]	; (1168 <getDesState()+0x290>)
    1046:	ed83 4a00 	vstr	s8, [r3]
	alpha_des = constrain(alpha_des, -1.0, 1.0)*alpha_max;
    104a:	4b48      	ldr	r3, [pc, #288]	; (116c <getDesState()+0x294>)
    104c:	ed93 4a00 	vldr	s8, [r3]
    1050:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1054:	ee24 5b05 	vmul.f64	d5, d4, d5
    1058:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    105c:	4b44      	ldr	r3, [pc, #272]	; (1170 <getDesState()+0x298>)
    105e:	ed83 5a00 	vstr	s10, [r3]
	beta_des = constrain(beta_des, -1.0, 1.0)*beta_max;
    1062:	4b44      	ldr	r3, [pc, #272]	; (1174 <getDesState()+0x29c>)
    1064:	ed93 5a00 	vldr	s10, [r3]
    1068:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    106c:	ee25 6b06 	vmul.f64	d6, d5, d6
    1070:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    1074:	4b40      	ldr	r3, [pc, #256]	; (1178 <getDesState()+0x2a0>)
    1076:	ed83 6a00 	vstr	s12, [r3]
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    107a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
    107e:	eef4 3ae6 	vcmpe.f32	s7, s13
    1082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1086:	d409      	bmi.n	109c <getDesState()+0x1c4>
    1088:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    108c:	eef4 3ae6 	vcmpe.f32	s7, s13
    1090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1094:	dc1a      	bgt.n	10cc <getDesState()+0x1f4>
    1096:	eeb7 6ae3 	vcvt.f64.f32	d6, s7
    109a:	e001      	b.n	10a0 <getDesState()+0x1c8>
    109c:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    10a0:	eef7 3bc6 	vcvt.f32.f64	s7, d6
    10a4:	4b35      	ldr	r3, [pc, #212]	; (117c <getDesState()+0x2a4>)
    10a6:	edc3 3a00 	vstr	s7, [r3]
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10aa:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
    10ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
    10b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10b6:	d40c      	bmi.n	10d2 <getDesState()+0x1fa>
    10b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    10bc:	eeb4 7ae6 	vcmpe.f32	s14, s13
    10c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10c4:	dc1d      	bgt.n	1102 <getDesState()+0x22a>
    10c6:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
    10ca:	e004      	b.n	10d6 <getDesState()+0x1fe>
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    10cc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    10d0:	e7e6      	b.n	10a0 <getDesState()+0x1c8>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10d2:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    10d6:	eeb7 7bc6 	vcvt.f32.f64	s14, d6
    10da:	4b29      	ldr	r3, [pc, #164]	; (1180 <getDesState()+0x2a8>)
    10dc:	ed83 7a00 	vstr	s14, [r3]
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    10e0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
    10e4:	eef4 7ac7 	vcmpe.f32	s15, s14
    10e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ec:	d40c      	bmi.n	1108 <getDesState()+0x230>
    10ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    10f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    10f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10fa:	dc0d      	bgt.n	1118 <getDesState()+0x240>
    10fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1100:	e004      	b.n	110c <getDesState()+0x234>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    1102:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1106:	e7e6      	b.n	10d6 <getDesState()+0x1fe>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1108:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    110c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    1110:	4b1c      	ldr	r3, [pc, #112]	; (1184 <getDesState()+0x2ac>)
    1112:	edc3 7a00 	vstr	s15, [r3]
}
    1116:	4770      	bx	lr
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1118:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    111c:	e7f6      	b.n	110c <getDesState()+0x234>
    111e:	bf00      	nop
    1120:	00000000 	.word	0x00000000
    1124:	408f4000 	.word	0x408f4000
    1128:	00000000 	.word	0x00000000
    112c:	40977000 	.word	0x40977000
    1130:	00000000 	.word	0x00000000
    1134:	407f4000 	.word	0x407f4000
	...
    1140:	20005014 	.word	0x20005014
    1144:	20005020 	.word	0x20005020
    1148:	2000502c 	.word	0x2000502c
    114c:	20005038 	.word	0x20005038
    1150:	20005390 	.word	0x20005390
    1154:	200039ec 	.word	0x200039ec
    1158:	20005178 	.word	0x20005178
    115c:	200039e8 	.word	0x200039e8
    1160:	2000514c 	.word	0x2000514c
    1164:	200039f0 	.word	0x200039f0
    1168:	200053b0 	.word	0x200053b0
    116c:	20003978 	.word	0x20003978
    1170:	20004fdc 	.word	0x20004fdc
    1174:	20003980 	.word	0x20003980
    1178:	20004fe8 	.word	0x20004fe8
    117c:	2000517c 	.word	0x2000517c
    1180:	20005150 	.word	0x20005150
    1184:	200053b4 	.word	0x200053b4

00001188 <scaleCommands()>:
  //Update yaw variables
  error_yaw_prev = error_yaw;
  integral_yaw_prev = integral_yaw;
}

void scaleCommands() {
    1188:	b4f0      	push	{r4, r5, r6, r7}
   * mX_command_PWM are updated here which are used to command the motors in commandMotors(). sX_command_PWM are updated 
   * which are used to command the servos.
   */
  //Scaled to 125us - 250us for oneshot125 protocol
  m1_command_PWM = m1_command_scaled*125 + 125;
  m2_command_PWM = m2_command_scaled*125 + 125;
    118a:	4b74      	ldr	r3, [pc, #464]	; (135c <scaleCommands()+0x1d4>)
    118c:	ed93 7a00 	vldr	s14, [r3]
    1190:	eddf 7a73 	vldr	s15, [pc, #460]	; 1360 <scaleCommands()+0x1d8>
    1194:	ee27 7a27 	vmul.f32	s14, s14, s15
    1198:	ee37 7a27 	vadd.f32	s14, s14, s15
    119c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11a0:	ee17 4a10 	vmov	r4, s14
  m3_command_PWM = m3_command_scaled*125 + 125;
    11a4:	4b6f      	ldr	r3, [pc, #444]	; (1364 <scaleCommands()+0x1dc>)
    11a6:	ed93 7a00 	vldr	s14, [r3]
    11aa:	ee27 7a27 	vmul.f32	s14, s14, s15
    11ae:	ee37 7a27 	vadd.f32	s14, s14, s15
    11b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11b6:	ee17 0a10 	vmov	r0, s14
  m4_command_PWM = m4_command_scaled*125 + 125;
    11ba:	4b6b      	ldr	r3, [pc, #428]	; (1368 <scaleCommands()+0x1e0>)
    11bc:	ed93 7a00 	vldr	s14, [r3]
    11c0:	ee27 7a27 	vmul.f32	s14, s14, s15
    11c4:	ee37 7a27 	vadd.f32	s14, s14, s15
    11c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11cc:	ee17 1a10 	vmov	r1, s14
  m5_command_PWM = m5_command_scaled*125 + 125;
    11d0:	4b66      	ldr	r3, [pc, #408]	; (136c <scaleCommands()+0x1e4>)
    11d2:	ed93 7a00 	vldr	s14, [r3]
    11d6:	ee27 7a27 	vmul.f32	s14, s14, s15
    11da:	ee37 7a27 	vadd.f32	s14, s14, s15
    11de:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11e2:	ee17 2a10 	vmov	r2, s14
  m6_command_PWM = m6_command_scaled*125 + 125;
    11e6:	4b62      	ldr	r3, [pc, #392]	; (1370 <scaleCommands()+0x1e8>)
    11e8:	ed93 7a00 	vldr	s14, [r3]
    11ec:	ee27 7a27 	vmul.f32	s14, s14, s15
    11f0:	ee37 7a27 	vadd.f32	s14, s14, s15
    11f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11f8:	ee17 3a10 	vmov	r3, s14
  m1_command_PWM = m1_command_scaled*125 + 125;
    11fc:	4d5d      	ldr	r5, [pc, #372]	; (1374 <scaleCommands()+0x1ec>)
    11fe:	ed95 7a00 	vldr	s14, [r5]
    1202:	ee27 7a27 	vmul.f32	s14, s14, s15
    1206:	ee77 7a27 	vadd.f32	s15, s14, s15
    120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    120e:	ee17 5a90 	vmov	r5, s15
  //Constrain commands to motors within oneshot125 bounds
  m1_command_PWM = constrain(m1_command_PWM, 125, 250);
    1212:	2dfa      	cmp	r5, #250	; 0xfa
    1214:	bfa8      	it	ge
    1216:	25fa      	movge	r5, #250	; 0xfa
    1218:	2d7d      	cmp	r5, #125	; 0x7d
    121a:	bfb8      	it	lt
    121c:	257d      	movlt	r5, #125	; 0x7d
    121e:	4e56      	ldr	r6, [pc, #344]	; (1378 <scaleCommands()+0x1f0>)
    1220:	6035      	str	r5, [r6, #0]
  m2_command_PWM = constrain(m2_command_PWM, 125, 250);
    1222:	2cfa      	cmp	r4, #250	; 0xfa
    1224:	bfa8      	it	ge
    1226:	24fa      	movge	r4, #250	; 0xfa
    1228:	2c7d      	cmp	r4, #125	; 0x7d
    122a:	bfb8      	it	lt
    122c:	247d      	movlt	r4, #125	; 0x7d
    122e:	4d53      	ldr	r5, [pc, #332]	; (137c <scaleCommands()+0x1f4>)
    1230:	602c      	str	r4, [r5, #0]
  m3_command_PWM = constrain(m3_command_PWM, 125, 250);
    1232:	28fa      	cmp	r0, #250	; 0xfa
    1234:	bfa8      	it	ge
    1236:	20fa      	movge	r0, #250	; 0xfa
    1238:	287d      	cmp	r0, #125	; 0x7d
    123a:	bfb8      	it	lt
    123c:	207d      	movlt	r0, #125	; 0x7d
    123e:	4c50      	ldr	r4, [pc, #320]	; (1380 <scaleCommands()+0x1f8>)
    1240:	6020      	str	r0, [r4, #0]
  m4_command_PWM = constrain(m4_command_PWM, 125, 250);
    1242:	29fa      	cmp	r1, #250	; 0xfa
    1244:	bfa8      	it	ge
    1246:	21fa      	movge	r1, #250	; 0xfa
    1248:	297d      	cmp	r1, #125	; 0x7d
    124a:	bfb8      	it	lt
    124c:	217d      	movlt	r1, #125	; 0x7d
    124e:	484d      	ldr	r0, [pc, #308]	; (1384 <scaleCommands()+0x1fc>)
    1250:	6001      	str	r1, [r0, #0]
  m5_command_PWM = constrain(m5_command_PWM, 125, 250);
    1252:	2afa      	cmp	r2, #250	; 0xfa
    1254:	bfa8      	it	ge
    1256:	22fa      	movge	r2, #250	; 0xfa
    1258:	2a7d      	cmp	r2, #125	; 0x7d
    125a:	bfb8      	it	lt
    125c:	227d      	movlt	r2, #125	; 0x7d
    125e:	494a      	ldr	r1, [pc, #296]	; (1388 <scaleCommands()+0x200>)
    1260:	600a      	str	r2, [r1, #0]
  m6_command_PWM = constrain(m6_command_PWM, 125, 250);
    1262:	2bfa      	cmp	r3, #250	; 0xfa
    1264:	bfa8      	it	ge
    1266:	23fa      	movge	r3, #250	; 0xfa
    1268:	2b7d      	cmp	r3, #125	; 0x7d
    126a:	bfb8      	it	lt
    126c:	237d      	movlt	r3, #125	; 0x7d
    126e:	4a47      	ldr	r2, [pc, #284]	; (138c <scaleCommands()+0x204>)
    1270:	6013      	str	r3, [r2, #0]

  //Scaled to 0-180 for servo library
  s1_command_PWM = s1_command_scaled*180;
  s2_command_PWM = s2_command_scaled*180;
    1272:	4b47      	ldr	r3, [pc, #284]	; (1390 <scaleCommands()+0x208>)
    1274:	edd3 7a00 	vldr	s15, [r3]
    1278:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1394 <scaleCommands()+0x20c>
    127c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1284:	ee17 5a90 	vmov	r5, s15
  s3_command_PWM = s3_command_scaled*180;
    1288:	4b43      	ldr	r3, [pc, #268]	; (1398 <scaleCommands()+0x210>)
    128a:	edd3 7a00 	vldr	s15, [r3]
    128e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1296:	ee17 4a90 	vmov	r4, s15
  s4_command_PWM = s4_command_scaled*180;
    129a:	4b40      	ldr	r3, [pc, #256]	; (139c <scaleCommands()+0x214>)
    129c:	edd3 7a00 	vldr	s15, [r3]
    12a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    12a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12a8:	ee17 0a90 	vmov	r0, s15
  s5_command_PWM = s5_command_scaled*180;
    12ac:	4b3c      	ldr	r3, [pc, #240]	; (13a0 <scaleCommands()+0x218>)
    12ae:	edd3 7a00 	vldr	s15, [r3]
    12b2:	ee67 7a87 	vmul.f32	s15, s15, s14
    12b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12ba:	ee17 1a90 	vmov	r1, s15
  s6_command_PWM = s6_command_scaled*180;
    12be:	4b39      	ldr	r3, [pc, #228]	; (13a4 <scaleCommands()+0x21c>)
    12c0:	edd3 7a00 	vldr	s15, [r3]
    12c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    12c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12cc:	ee17 2a90 	vmov	r2, s15
  s7_command_PWM = s7_command_scaled*180;
    12d0:	4b35      	ldr	r3, [pc, #212]	; (13a8 <scaleCommands()+0x220>)
    12d2:	edd3 7a00 	vldr	s15, [r3]
    12d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    12da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12de:	ee17 3a90 	vmov	r3, s15
  s1_command_PWM = s1_command_scaled*180;
    12e2:	4e32      	ldr	r6, [pc, #200]	; (13ac <scaleCommands()+0x224>)
    12e4:	edd6 7a00 	vldr	s15, [r6]
    12e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    12ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12f0:	ee17 6a90 	vmov	r6, s15
  //Constrain commands to servos within servo library bounds
  s1_command_PWM = constrain(s1_command_PWM, 0, 180);
    12f4:	2eb4      	cmp	r6, #180	; 0xb4
    12f6:	bfa8      	it	ge
    12f8:	26b4      	movge	r6, #180	; 0xb4
    12fa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    12fe:	4f2c      	ldr	r7, [pc, #176]	; (13b0 <scaleCommands()+0x228>)
    1300:	603e      	str	r6, [r7, #0]
  s2_command_PWM = constrain(s2_command_PWM, 0, 180);
    1302:	2db4      	cmp	r5, #180	; 0xb4
    1304:	bfa8      	it	ge
    1306:	25b4      	movge	r5, #180	; 0xb4
    1308:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    130c:	4e29      	ldr	r6, [pc, #164]	; (13b4 <scaleCommands()+0x22c>)
    130e:	6035      	str	r5, [r6, #0]
  s3_command_PWM = constrain(s3_command_PWM, 0, 180);
    1310:	2cb4      	cmp	r4, #180	; 0xb4
    1312:	bfa8      	it	ge
    1314:	24b4      	movge	r4, #180	; 0xb4
    1316:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    131a:	4d27      	ldr	r5, [pc, #156]	; (13b8 <scaleCommands()+0x230>)
    131c:	602c      	str	r4, [r5, #0]
  s4_command_PWM = constrain(s4_command_PWM, 0, 180);
    131e:	28b4      	cmp	r0, #180	; 0xb4
    1320:	bfa8      	it	ge
    1322:	20b4      	movge	r0, #180	; 0xb4
    1324:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1328:	4c24      	ldr	r4, [pc, #144]	; (13bc <scaleCommands()+0x234>)
    132a:	6020      	str	r0, [r4, #0]
  s5_command_PWM = constrain(s5_command_PWM, 0, 180);
    132c:	29b4      	cmp	r1, #180	; 0xb4
    132e:	bfa8      	it	ge
    1330:	21b4      	movge	r1, #180	; 0xb4
    1332:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    1336:	4822      	ldr	r0, [pc, #136]	; (13c0 <scaleCommands()+0x238>)
    1338:	6001      	str	r1, [r0, #0]
  s6_command_PWM = constrain(s6_command_PWM, 0, 180);
    133a:	2ab4      	cmp	r2, #180	; 0xb4
    133c:	bfa8      	it	ge
    133e:	22b4      	movge	r2, #180	; 0xb4
    1340:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1344:	491f      	ldr	r1, [pc, #124]	; (13c4 <scaleCommands()+0x23c>)
    1346:	600a      	str	r2, [r1, #0]
  s7_command_PWM = constrain(s7_command_PWM, 0, 180);
    1348:	2bb4      	cmp	r3, #180	; 0xb4
    134a:	bfa8      	it	ge
    134c:	23b4      	movge	r3, #180	; 0xb4
    134e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1352:	4a1d      	ldr	r2, [pc, #116]	; (13c8 <scaleCommands()+0x240>)
    1354:	6013      	str	r3, [r2, #0]

}
    1356:	bcf0      	pop	{r4, r5, r6, r7}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	200050ec 	.word	0x200050ec
    1360:	42fa0000 	.word	0x42fa0000
    1364:	200050f4 	.word	0x200050f4
    1368:	200050fc 	.word	0x200050fc
    136c:	20005104 	.word	0x20005104
    1370:	2000510c 	.word	0x2000510c
    1374:	200050e4 	.word	0x200050e4
    1378:	200050e0 	.word	0x200050e0
    137c:	200050e8 	.word	0x200050e8
    1380:	200050f0 	.word	0x200050f0
    1384:	200050f8 	.word	0x200050f8
    1388:	20005100 	.word	0x20005100
    138c:	20005108 	.word	0x20005108
    1390:	200051bc 	.word	0x200051bc
    1394:	43340000 	.word	0x43340000
    1398:	200051c4 	.word	0x200051c4
    139c:	200051cc 	.word	0x200051cc
    13a0:	200051d4 	.word	0x200051d4
    13a4:	200051dc 	.word	0x200051dc
    13a8:	200051e4 	.word	0x200051e4
    13ac:	200051b4 	.word	0x200051b4
    13b0:	200051b0 	.word	0x200051b0
    13b4:	200051b8 	.word	0x200051b8
    13b8:	200051c0 	.word	0x200051c0
    13bc:	200051c8 	.word	0x200051c8
    13c0:	200051d0 	.word	0x200051d0
    13c4:	200051d8 	.word	0x200051d8
    13c8:	200051e0 	.word	0x200051e0
    13cc:	00000000 	.word	0x00000000

000013d0 <getCommands()>:

void getCommands() {
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //  channel_4_pwm = getRadioPWM(4);
  //  channel_5_pwm = getRadioPWM(5);
  //  channel_6_pwm = getRadioPWM(6);
    
  #if defined USE_SBUS_RX
    if (sbus.read(&sbusChannels[0], &sbusFailSafe, &sbusLostFrame))
    13d2:	4bc5      	ldr	r3, [pc, #788]	; (16e8 <getCommands()+0x318>)
    13d4:	4ac5      	ldr	r2, [pc, #788]	; (16ec <getCommands()+0x31c>)
    13d6:	49c6      	ldr	r1, [pc, #792]	; (16f0 <getCommands()+0x320>)
    13d8:	48c6      	ldr	r0, [pc, #792]	; (16f4 <getCommands()+0x324>)
    13da:	f002 ff03 	bl	41e4 <SBUS::read(unsigned short*, bool*, bool*)>
    13de:	2800      	cmp	r0, #0
    13e0:	f000 80bb 	beq.w	155a <getCommands()+0x18a>
    {
      //sBus scaling below is for Taranis-Plus and X4R-SB
      float scale = 0.615;  
      float bias  = 895.0; 
      channel_1_pwm_pre = sbusChannels[0] * scale + bias;
    13e4:	4bc2      	ldr	r3, [pc, #776]	; (16f0 <getCommands()+0x320>)
    13e6:	881a      	ldrh	r2, [r3, #0]
    13e8:	ee06 2a90 	vmov	s13, r2
    13ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    13f0:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 16f8 <getCommands()+0x328>
    13f4:	ee66 6a87 	vmul.f32	s13, s13, s14
    13f8:	eddf 7ac0 	vldr	s15, [pc, #768]	; 16fc <getCommands()+0x32c>
    13fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1400:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1404:	4abe      	ldr	r2, [pc, #760]	; (1700 <getCommands()+0x330>)
    1406:	edc2 6a00 	vstr	s13, [r2]
      channel_2_pwm_pre = sbusChannels[1] * scale + bias;
    140a:	885a      	ldrh	r2, [r3, #2]
    140c:	ee06 2a90 	vmov	s13, r2
    1410:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1414:	ee66 6a87 	vmul.f32	s13, s13, s14
    1418:	ee76 6aa7 	vadd.f32	s13, s13, s15
    141c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1420:	4ab8      	ldr	r2, [pc, #736]	; (1704 <getCommands()+0x334>)
    1422:	edc2 6a00 	vstr	s13, [r2]
      channel_3_pwm_pre = sbusChannels[2] * scale + bias;
    1426:	889a      	ldrh	r2, [r3, #4]
    1428:	ee06 2a90 	vmov	s13, r2
    142c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1430:	ee66 6a87 	vmul.f32	s13, s13, s14
    1434:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1438:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    143c:	4ab2      	ldr	r2, [pc, #712]	; (1708 <getCommands()+0x338>)
    143e:	edc2 6a00 	vstr	s13, [r2]
      channel_4_pwm_pre = sbusChannels[3] * scale + bias;
    1442:	88da      	ldrh	r2, [r3, #6]
    1444:	ee06 2a90 	vmov	s13, r2
    1448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    144c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1450:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1454:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1458:	4aac      	ldr	r2, [pc, #688]	; (170c <getCommands()+0x33c>)
    145a:	edc2 6a00 	vstr	s13, [r2]
      channel_5_pwm = sbusChannels[4] * scale + bias;
    145e:	891a      	ldrh	r2, [r3, #8]
    1460:	ee06 2a90 	vmov	s13, r2
    1464:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1468:	ee66 6a87 	vmul.f32	s13, s13, s14
    146c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1470:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1474:	4aa6      	ldr	r2, [pc, #664]	; (1710 <getCommands()+0x340>)
    1476:	edc2 6a00 	vstr	s13, [r2]
      channel_6_pwm = sbusChannels[5] * scale + bias; 
    147a:	895a      	ldrh	r2, [r3, #10]
    147c:	ee06 2a90 	vmov	s13, r2
    1480:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1484:	ee66 6a87 	vmul.f32	s13, s13, s14
    1488:	ee76 6aa7 	vadd.f32	s13, s13, s15
    148c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1490:	4aa0      	ldr	r2, [pc, #640]	; (1714 <getCommands()+0x344>)
    1492:	edc2 6a00 	vstr	s13, [r2]
			channel_7_pwm = sbusChannels[6] * scale + bias;
    1496:	899a      	ldrh	r2, [r3, #12]
    1498:	ee06 2a90 	vmov	s13, r2
    149c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14a0:	ee66 6a87 	vmul.f32	s13, s13, s14
    14a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14a8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14ac:	4a9a      	ldr	r2, [pc, #616]	; (1718 <getCommands()+0x348>)
    14ae:	edc2 6a00 	vstr	s13, [r2]
			channel_8_pwm = sbusChannels[7] * scale + bias;
    14b2:	89da      	ldrh	r2, [r3, #14]
    14b4:	ee06 2a90 	vmov	s13, r2
    14b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14bc:	ee66 6a87 	vmul.f32	s13, s13, s14
    14c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14c4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14c8:	4a94      	ldr	r2, [pc, #592]	; (171c <getCommands()+0x34c>)
    14ca:	edc2 6a00 	vstr	s13, [r2]
			channel_9_pwm = sbusChannels[8] * scale + bias;
    14ce:	8a1a      	ldrh	r2, [r3, #16]
    14d0:	ee06 2a90 	vmov	s13, r2
    14d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14d8:	ee66 6a87 	vmul.f32	s13, s13, s14
    14dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14e0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14e4:	4a8e      	ldr	r2, [pc, #568]	; (1720 <getCommands()+0x350>)
    14e6:	edc2 6a00 	vstr	s13, [r2]
			channel_10_pwm = sbusChannels[9] * scale + bias;
    14ea:	8a5a      	ldrh	r2, [r3, #18]
    14ec:	ee06 2a90 	vmov	s13, r2
    14f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14f4:	ee66 6a87 	vmul.f32	s13, s13, s14
    14f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14fc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1500:	4a88      	ldr	r2, [pc, #544]	; (1724 <getCommands()+0x354>)
    1502:	edc2 6a00 	vstr	s13, [r2]
			channel_11_pwm = sbusChannels[10] * scale + bias;
    1506:	8a9a      	ldrh	r2, [r3, #20]
    1508:	ee06 2a90 	vmov	s13, r2
    150c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1510:	ee66 6a87 	vmul.f32	s13, s13, s14
    1514:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1518:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    151c:	4a82      	ldr	r2, [pc, #520]	; (1728 <getCommands()+0x358>)
    151e:	edc2 6a00 	vstr	s13, [r2]
			channel_12_pwm = sbusChannels[11] * scale + bias;
    1522:	8ada      	ldrh	r2, [r3, #22]
    1524:	ee06 2a90 	vmov	s13, r2
    1528:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    152c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1530:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1534:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1538:	4a7c      	ldr	r2, [pc, #496]	; (172c <getCommands()+0x35c>)
    153a:	edc2 6a00 	vstr	s13, [r2]
			channel_13_pwm = sbusChannels[12] * scale + bias;
    153e:	8b1b      	ldrh	r3, [r3, #24]
    1540:	ee06 3a90 	vmov	s13, r3
    1544:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1548:	ee26 7a87 	vmul.f32	s14, s13, s14
    154c:	ee77 7a27 	vadd.f32	s15, s14, s15
    1550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1554:	4b76      	ldr	r3, [pc, #472]	; (1730 <getCommands()+0x360>)
    1556:	edc3 7a00 	vstr	s15, [r3]
  //  }
  #endif
  
  //Low-pass the critical commands and update previous values
  float b = 0.7; //Lower=slower, higher=noiser
  channel_1_pwm_pre = (1.0 - b)*channel_1_pwm_prev + b*channel_1_pwm_pre;
    155a:	4b76      	ldr	r3, [pc, #472]	; (1734 <getCommands()+0x364>)
    155c:	681d      	ldr	r5, [r3, #0]
    155e:	4b68      	ldr	r3, [pc, #416]	; (1700 <getCommands()+0x330>)
    1560:	edd3 7a00 	vldr	s15, [r3]
    1564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1568:	eddf 5a73 	vldr	s11, [pc, #460]	; 1738 <getCommands()+0x368>
    156c:	ee27 7a25 	vmul.f32	s14, s14, s11
    1570:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1574:	ee06 5a90 	vmov	s13, r5
    1578:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    157c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 16e0 <getCommands()+0x310>
    1580:	ee04 7b06 	vmla.f64	d7, d4, d6
    1584:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1588:	ee17 0a90 	vmov	r0, s15
    158c:	edc3 7a00 	vstr	s15, [r3]
  channel_2_pwm_pre = (1.0 - b)*channel_2_pwm_prev + b*channel_2_pwm_pre;
    1590:	4b6a      	ldr	r3, [pc, #424]	; (173c <getCommands()+0x36c>)
    1592:	f8d3 c000 	ldr.w	ip, [r3]
    1596:	4b5b      	ldr	r3, [pc, #364]	; (1704 <getCommands()+0x334>)
    1598:	edd3 7a00 	vldr	s15, [r3]
    159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    15a0:	ee27 7a25 	vmul.f32	s14, s14, s11
    15a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    15a8:	ee05 ca10 	vmov	s10, ip
    15ac:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    15b0:	ee04 7b06 	vmla.f64	d7, d4, d6
    15b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    15b8:	ee17 1a90 	vmov	r1, s15
    15bc:	edc3 7a00 	vstr	s15, [r3]
  channel_3_pwm_pre = (1.0 - b)*channel_3_pwm_prev + b*channel_3_pwm_pre;
    15c0:	4b5f      	ldr	r3, [pc, #380]	; (1740 <getCommands()+0x370>)
    15c2:	681f      	ldr	r7, [r3, #0]
    15c4:	4b50      	ldr	r3, [pc, #320]	; (1708 <getCommands()+0x338>)
    15c6:	edd3 7a00 	vldr	s15, [r3]
    15ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    15ce:	ee27 7a25 	vmul.f32	s14, s14, s11
    15d2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    15d6:	ee05 7a10 	vmov	s10, r7
    15da:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    15de:	ee04 7b06 	vmla.f64	d7, d4, d6
    15e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    15e6:	ee17 2a90 	vmov	r2, s15
    15ea:	edc3 7a00 	vstr	s15, [r3]
  channel_4_pwm_pre = (1.0 - b)*channel_4_pwm_prev + b*channel_4_pwm_pre;
    15ee:	4b55      	ldr	r3, [pc, #340]	; (1744 <getCommands()+0x374>)
    15f0:	681e      	ldr	r6, [r3, #0]
    15f2:	4c46      	ldr	r4, [pc, #280]	; (170c <getCommands()+0x33c>)
    15f4:	edd4 7a00 	vldr	s15, [r4]
    15f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    15fc:	ee27 7a25 	vmul.f32	s14, s14, s11
    1600:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1604:	ee05 6a90 	vmov	s11, r6
    1608:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    160c:	ee05 7b06 	vmla.f64	d7, d5, d6
    1610:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1614:	ee17 3a90 	vmov	r3, s15
    1618:	edc4 7a00 	vstr	s15, [r4]

	// Additional cutoff to deal with occasional spikes in recieved radio commands
	d_ch1 = channel_1_pwm_pre - channel_1_pwm_prev;
    161c:	1b44      	subs	r4, r0, r5
    161e:	f8df e154 	ldr.w	lr, [pc, #340]	; 1774 <getCommands()+0x3a4>
    1622:	f8ce 4000 	str.w	r4, [lr]
	d_ch2 = channel_2_pwm_pre - channel_2_pwm_prev;
    1626:	eba1 010c 	sub.w	r1, r1, ip
    162a:	f8df c134 	ldr.w	ip, [pc, #308]	; 1760 <getCommands()+0x390>
    162e:	f8cc 1000 	str.w	r1, [ip]
	d_ch3 = channel_3_pwm_pre - channel_3_pwm_prev;
    1632:	1bd2      	subs	r2, r2, r7
    1634:	4944      	ldr	r1, [pc, #272]	; (1748 <getCommands()+0x378>)
    1636:	600a      	str	r2, [r1, #0]
	d_ch4 = channel_4_pwm_pre - channel_4_pwm_prev;
    1638:	1b9b      	subs	r3, r3, r6
    163a:	4a44      	ldr	r2, [pc, #272]	; (174c <getCommands()+0x37c>)
    163c:	6013      	str	r3, [r2, #0]
	
	if (abs(d_ch1) > cutoff_val && ch1_CutCounter < 5 && doneWithSetup) {
    163e:	2c00      	cmp	r4, #0
    1640:	bfb8      	it	lt
    1642:	4264      	neglt	r4, r4
    1644:	4b42      	ldr	r3, [pc, #264]	; (1750 <getCommands()+0x380>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	429c      	cmp	r4, r3
    164a:	dd08      	ble.n	165e <getCommands()+0x28e>
    164c:	4b41      	ldr	r3, [pc, #260]	; (1754 <getCommands()+0x384>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	2b04      	cmp	r3, #4
    1652:	dc04      	bgt.n	165e <getCommands()+0x28e>
    1654:	4b40      	ldr	r3, [pc, #256]	; (1758 <getCommands()+0x388>)
    1656:	781b      	ldrb	r3, [r3, #0]
    1658:	2b00      	cmp	r3, #0
    165a:	f040 80ad 	bne.w	17b8 <getCommands()+0x3e8>
		channel_1_pwm = channel_1_pwm_prev;
		Serial.println("Radio command spike detected (CH1)");
		ch1_CutCounter++;
	} else {
		channel_1_pwm = channel_1_pwm_pre;
    165e:	4b3f      	ldr	r3, [pc, #252]	; (175c <getCommands()+0x38c>)
    1660:	6018      	str	r0, [r3, #0]
    1662:	2300      	movs	r3, #0
		ch1_CutCounter++;
    1664:	4a3b      	ldr	r2, [pc, #236]	; (1754 <getCommands()+0x384>)
    1666:	6013      	str	r3, [r2, #0]
		ch1_CutCounter = 0;
	}
	if (abs(d_ch2) > cutoff_val && ch2_CutCounter < 5 && doneWithSetup) {
    1668:	4b3d      	ldr	r3, [pc, #244]	; (1760 <getCommands()+0x390>)
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	2b00      	cmp	r3, #0
    166e:	bfb8      	it	lt
    1670:	425b      	neglt	r3, r3
    1672:	4a37      	ldr	r2, [pc, #220]	; (1750 <getCommands()+0x380>)
    1674:	6812      	ldr	r2, [r2, #0]
    1676:	4293      	cmp	r3, r2
    1678:	dd08      	ble.n	168c <getCommands()+0x2bc>
    167a:	4b3a      	ldr	r3, [pc, #232]	; (1764 <getCommands()+0x394>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	2b04      	cmp	r3, #4
    1680:	dc04      	bgt.n	168c <getCommands()+0x2bc>
    1682:	4b35      	ldr	r3, [pc, #212]	; (1758 <getCommands()+0x388>)
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	2b00      	cmp	r3, #0
    1688:	f040 80a6 	bne.w	17d8 <getCommands()+0x408>
		channel_2_pwm = channel_2_pwm_prev;
		Serial.println("Radio command spike detected (CH2)");
		ch2_CutCounter++;
	} else {
		channel_2_pwm = channel_2_pwm_pre;
    168c:	4b1d      	ldr	r3, [pc, #116]	; (1704 <getCommands()+0x334>)
    168e:	681a      	ldr	r2, [r3, #0]
    1690:	4b35      	ldr	r3, [pc, #212]	; (1768 <getCommands()+0x398>)
    1692:	601a      	str	r2, [r3, #0]
    1694:	2300      	movs	r3, #0
		ch2_CutCounter++;
    1696:	4a33      	ldr	r2, [pc, #204]	; (1764 <getCommands()+0x394>)
    1698:	6013      	str	r3, [r2, #0]
		ch2_CutCounter = 0;
	}
	if (abs(d_ch3) > cutoff_val && ch3_CutCounter < 5 && doneWithSetup) {
    169a:	4b2b      	ldr	r3, [pc, #172]	; (1748 <getCommands()+0x378>)
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	2b00      	cmp	r3, #0
    16a0:	bfb8      	it	lt
    16a2:	425b      	neglt	r3, r3
    16a4:	4a2a      	ldr	r2, [pc, #168]	; (1750 <getCommands()+0x380>)
    16a6:	6812      	ldr	r2, [r2, #0]
    16a8:	4293      	cmp	r3, r2
    16aa:	dd08      	ble.n	16be <getCommands()+0x2ee>
    16ac:	4b2f      	ldr	r3, [pc, #188]	; (176c <getCommands()+0x39c>)
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	2b04      	cmp	r3, #4
    16b2:	dc04      	bgt.n	16be <getCommands()+0x2ee>
    16b4:	4b28      	ldr	r3, [pc, #160]	; (1758 <getCommands()+0x388>)
    16b6:	781b      	ldrb	r3, [r3, #0]
    16b8:	2b00      	cmp	r3, #0
    16ba:	f040 809f 	bne.w	17fc <getCommands()+0x42c>
		channel_3_pwm = channel_3_pwm_prev;
		Serial.println("Radio command spike detected (CH3)");
		ch3_CutCounter++;
	} else {
		channel_3_pwm = channel_3_pwm_pre;
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <getCommands()+0x338>)
    16c0:	681a      	ldr	r2, [r3, #0]
    16c2:	4b2b      	ldr	r3, [pc, #172]	; (1770 <getCommands()+0x3a0>)
    16c4:	601a      	str	r2, [r3, #0]
    16c6:	2300      	movs	r3, #0
		ch3_CutCounter++;
    16c8:	4a28      	ldr	r2, [pc, #160]	; (176c <getCommands()+0x39c>)
    16ca:	6013      	str	r3, [r2, #0]
		ch3_CutCounter = 0;
	}
	if (abs(d_ch4) > cutoff_val && ch4_CutCounter < 5 && doneWithSetup) {
    16cc:	4b1f      	ldr	r3, [pc, #124]	; (174c <getCommands()+0x37c>)
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	bfb8      	it	lt
    16d4:	425b      	neglt	r3, r3
    16d6:	4a1e      	ldr	r2, [pc, #120]	; (1750 <getCommands()+0x380>)
    16d8:	6812      	ldr	r2, [r2, #0]
    16da:	4293      	cmp	r3, r2
    16dc:	dd54      	ble.n	1788 <getCommands()+0x3b8>
    16de:	e04b      	b.n	1778 <getCommands()+0x3a8>
    16e0:	40000000 	.word	0x40000000
    16e4:	3fd33333 	.word	0x3fd33333
    16e8:	200053d2 	.word	0x200053d2
    16ec:	200053d1 	.word	0x200053d1
    16f0:	20005334 	.word	0x20005334
    16f4:	200051f8 	.word	0x200051f8
    16f8:	3f1d70a4 	.word	0x3f1d70a4
    16fc:	445fc000 	.word	0x445fc000
    1700:	20005018 	.word	0x20005018
    1704:	20005024 	.word	0x20005024
    1708:	20005030 	.word	0x20005030
    170c:	2000503c 	.word	0x2000503c
    1710:	20005044 	.word	0x20005044
    1714:	20005048 	.word	0x20005048
    1718:	2000504c 	.word	0x2000504c
    171c:	20005050 	.word	0x20005050
    1720:	20005054 	.word	0x20005054
    1724:	20005004 	.word	0x20005004
    1728:	20005008 	.word	0x20005008
    172c:	2000500c 	.word	0x2000500c
    1730:	20005010 	.word	0x20005010
    1734:	2000501c 	.word	0x2000501c
    1738:	3f333333 	.word	0x3f333333
    173c:	20005028 	.word	0x20005028
    1740:	20005034 	.word	0x20005034
    1744:	20005040 	.word	0x20005040
    1748:	20005070 	.word	0x20005070
    174c:	20005074 	.word	0x20005074
    1750:	200039b8 	.word	0x200039b8
    1754:	20004ff4 	.word	0x20004ff4
    1758:	200053cb 	.word	0x200053cb
    175c:	20005014 	.word	0x20005014
    1760:	2000506c 	.word	0x2000506c
    1764:	20004ff8 	.word	0x20004ff8
    1768:	20005020 	.word	0x20005020
    176c:	20004ffc 	.word	0x20004ffc
    1770:	2000502c 	.word	0x2000502c
    1774:	20005068 	.word	0x20005068
    1778:	4b32      	ldr	r3, [pc, #200]	; (1844 <getCommands()+0x474>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	2b04      	cmp	r3, #4
    177e:	dc03      	bgt.n	1788 <getCommands()+0x3b8>
    1780:	4b31      	ldr	r3, [pc, #196]	; (1848 <getCommands()+0x478>)
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	2b00      	cmp	r3, #0
    1786:	d14b      	bne.n	1820 <getCommands()+0x450>
		channel_4_pwm = channel_4_pwm_prev;
		Serial.println("Radio command spike detected (CH4)");
		ch4_CutCounter++;
	} else {
		channel_4_pwm = channel_4_pwm_pre;
    1788:	4b30      	ldr	r3, [pc, #192]	; (184c <getCommands()+0x47c>)
    178a:	681a      	ldr	r2, [r3, #0]
    178c:	4b30      	ldr	r3, [pc, #192]	; (1850 <getCommands()+0x480>)
    178e:	601a      	str	r2, [r3, #0]
    1790:	2300      	movs	r3, #0
		ch4_CutCounter++;
    1792:	4a2c      	ldr	r2, [pc, #176]	; (1844 <getCommands()+0x474>)
    1794:	6013      	str	r3, [r2, #0]
		ch4_CutCounter = 0;
	}

	// Update prev values
  channel_1_pwm_prev = channel_1_pwm;
    1796:	4b2f      	ldr	r3, [pc, #188]	; (1854 <getCommands()+0x484>)
    1798:	681a      	ldr	r2, [r3, #0]
    179a:	4b2f      	ldr	r3, [pc, #188]	; (1858 <getCommands()+0x488>)
    179c:	601a      	str	r2, [r3, #0]
  channel_2_pwm_prev = channel_2_pwm;
    179e:	4b2f      	ldr	r3, [pc, #188]	; (185c <getCommands()+0x48c>)
    17a0:	681a      	ldr	r2, [r3, #0]
    17a2:	4b2f      	ldr	r3, [pc, #188]	; (1860 <getCommands()+0x490>)
    17a4:	601a      	str	r2, [r3, #0]
  channel_3_pwm_prev = channel_3_pwm;
    17a6:	4b2f      	ldr	r3, [pc, #188]	; (1864 <getCommands()+0x494>)
    17a8:	681a      	ldr	r2, [r3, #0]
    17aa:	4b2f      	ldr	r3, [pc, #188]	; (1868 <getCommands()+0x498>)
    17ac:	601a      	str	r2, [r3, #0]
  channel_4_pwm_prev = channel_4_pwm;
    17ae:	4b28      	ldr	r3, [pc, #160]	; (1850 <getCommands()+0x480>)
    17b0:	681a      	ldr	r2, [r3, #0]
    17b2:	4b2e      	ldr	r3, [pc, #184]	; (186c <getCommands()+0x49c>)
    17b4:	601a      	str	r2, [r3, #0]

	

}
    17b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		channel_1_pwm = channel_1_pwm_prev;
    17b8:	4b26      	ldr	r3, [pc, #152]	; (1854 <getCommands()+0x484>)
    17ba:	601d      	str	r5, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    17bc:	4c2c      	ldr	r4, [pc, #176]	; (1870 <getCommands()+0x4a0>)
    17be:	6823      	ldr	r3, [r4, #0]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	2222      	movs	r2, #34	; 0x22
    17c4:	492b      	ldr	r1, [pc, #172]	; (1874 <getCommands()+0x4a4>)
    17c6:	4620      	mov	r0, r4
    17c8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    17ca:	4620      	mov	r0, r4
    17cc:	f00b f869 	bl	c8a2 <Print::println()>
		ch1_CutCounter++;
    17d0:	4b29      	ldr	r3, [pc, #164]	; (1878 <getCommands()+0x4a8>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	3301      	adds	r3, #1
    17d6:	e745      	b.n	1664 <getCommands()+0x294>
		channel_2_pwm = channel_2_pwm_prev;
    17d8:	4b21      	ldr	r3, [pc, #132]	; (1860 <getCommands()+0x490>)
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	4b1f      	ldr	r3, [pc, #124]	; (185c <getCommands()+0x48c>)
    17de:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    17e0:	4c23      	ldr	r4, [pc, #140]	; (1870 <getCommands()+0x4a0>)
    17e2:	6823      	ldr	r3, [r4, #0]
    17e4:	685b      	ldr	r3, [r3, #4]
    17e6:	2222      	movs	r2, #34	; 0x22
    17e8:	4924      	ldr	r1, [pc, #144]	; (187c <getCommands()+0x4ac>)
    17ea:	4620      	mov	r0, r4
    17ec:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    17ee:	4620      	mov	r0, r4
    17f0:	f00b f857 	bl	c8a2 <Print::println()>
		ch2_CutCounter++;
    17f4:	4b22      	ldr	r3, [pc, #136]	; (1880 <getCommands()+0x4b0>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	3301      	adds	r3, #1
    17fa:	e74c      	b.n	1696 <getCommands()+0x2c6>
		channel_3_pwm = channel_3_pwm_prev;
    17fc:	4b1a      	ldr	r3, [pc, #104]	; (1868 <getCommands()+0x498>)
    17fe:	681a      	ldr	r2, [r3, #0]
    1800:	4b18      	ldr	r3, [pc, #96]	; (1864 <getCommands()+0x494>)
    1802:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1804:	4c1a      	ldr	r4, [pc, #104]	; (1870 <getCommands()+0x4a0>)
    1806:	6823      	ldr	r3, [r4, #0]
    1808:	685b      	ldr	r3, [r3, #4]
    180a:	2222      	movs	r2, #34	; 0x22
    180c:	491d      	ldr	r1, [pc, #116]	; (1884 <getCommands()+0x4b4>)
    180e:	4620      	mov	r0, r4
    1810:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1812:	4620      	mov	r0, r4
    1814:	f00b f845 	bl	c8a2 <Print::println()>
		ch3_CutCounter++;
    1818:	4b1b      	ldr	r3, [pc, #108]	; (1888 <getCommands()+0x4b8>)
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	3301      	adds	r3, #1
    181e:	e753      	b.n	16c8 <getCommands()+0x2f8>
		channel_4_pwm = channel_4_pwm_prev;
    1820:	4b12      	ldr	r3, [pc, #72]	; (186c <getCommands()+0x49c>)
    1822:	681a      	ldr	r2, [r3, #0]
    1824:	4b0a      	ldr	r3, [pc, #40]	; (1850 <getCommands()+0x480>)
    1826:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1828:	4c11      	ldr	r4, [pc, #68]	; (1870 <getCommands()+0x4a0>)
    182a:	6823      	ldr	r3, [r4, #0]
    182c:	685b      	ldr	r3, [r3, #4]
    182e:	2222      	movs	r2, #34	; 0x22
    1830:	4916      	ldr	r1, [pc, #88]	; (188c <getCommands()+0x4bc>)
    1832:	4620      	mov	r0, r4
    1834:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1836:	4620      	mov	r0, r4
    1838:	f00b f833 	bl	c8a2 <Print::println()>
		ch4_CutCounter++;
    183c:	4b01      	ldr	r3, [pc, #4]	; (1844 <getCommands()+0x474>)
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	3301      	adds	r3, #1
    1842:	e7a6      	b.n	1792 <getCommands()+0x3c2>
    1844:	20005000 	.word	0x20005000
    1848:	200053cb 	.word	0x200053cb
    184c:	2000503c 	.word	0x2000503c
    1850:	20005038 	.word	0x20005038
    1854:	20005014 	.word	0x20005014
    1858:	2000501c 	.word	0x2000501c
    185c:	20005020 	.word	0x20005020
    1860:	20005028 	.word	0x20005028
    1864:	2000502c 	.word	0x2000502c
    1868:	20005034 	.word	0x20005034
    186c:	20005040 	.word	0x20005040
    1870:	2000336c 	.word	0x2000336c
    1874:	20001c80 	.word	0x20001c80
    1878:	20004ff4 	.word	0x20004ff4
    187c:	20001ca4 	.word	0x20001ca4
    1880:	20004ff8 	.word	0x20004ff8
    1884:	20001cc8 	.word	0x20001cc8
    1888:	20004ffc 	.word	0x20004ffc
    188c:	20001cec 	.word	0x20001cec

00001890 <failSafe()>:
  int check2 = 0;
  int check3 = 0;
  int check4 = 0;
  int check5 = 0;
  int check6 = 0;
	failureFlag = 0;
    1890:	4b28      	ldr	r3, [pc, #160]	; (1934 <failSafe()+0xa4>)
    1892:	2200      	movs	r2, #0
    1894:	701a      	strb	r2, [r3, #0]

  //Triggers for failure criteria
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
  if (channel_2_pwm > maxVal || channel_2_pwm < minVal) check2 = 1;
    1896:	4b28      	ldr	r3, [pc, #160]	; (1938 <failSafe()+0xa8>)
    1898:	681a      	ldr	r2, [r3, #0]
    189a:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
    189e:	4b27      	ldr	r3, [pc, #156]	; (193c <failSafe()+0xac>)
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    18a6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    18aa:	bf94      	ite	ls
    18ac:	2300      	movls	r3, #0
    18ae:	2301      	movhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;

  //If any failures, set to default failsafe values
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18b0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18b4:	bf88      	it	hi
    18b6:	3301      	addhi	r3, #1
  if (channel_3_pwm > maxVal || channel_3_pwm < minVal) check3 = 1;
    18b8:	4a21      	ldr	r2, [pc, #132]	; (1940 <failSafe()+0xb0>)
    18ba:	6812      	ldr	r2, [r2, #0]
    18bc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18c0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18c4:	bf88      	it	hi
    18c6:	3301      	addhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
    18c8:	4a1e      	ldr	r2, [pc, #120]	; (1944 <failSafe()+0xb4>)
    18ca:	6812      	ldr	r2, [r2, #0]
    18cc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18d0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18d4:	bf88      	it	hi
    18d6:	3301      	addhi	r3, #1
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
    18d8:	4a1b      	ldr	r2, [pc, #108]	; (1948 <failSafe()+0xb8>)
    18da:	6812      	ldr	r2, [r2, #0]
    18dc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18e0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18e4:	bf88      	it	hi
    18e6:	3301      	addhi	r3, #1
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;
    18e8:	4a18      	ldr	r2, [pc, #96]	; (194c <failSafe()+0xbc>)
    18ea:	6812      	ldr	r2, [r2, #0]
    18ec:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18f0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18f4:	bf88      	it	hi
    18f6:	3301      	addhi	r3, #1
    18f8:	b1d3      	cbz	r3, 1930 <failSafe()+0xa0>
    channel_1_pwm = channel_1_fs;
    18fa:	4b15      	ldr	r3, [pc, #84]	; (1950 <failSafe()+0xc0>)
    18fc:	681a      	ldr	r2, [r3, #0]
    18fe:	4b0f      	ldr	r3, [pc, #60]	; (193c <failSafe()+0xac>)
    1900:	601a      	str	r2, [r3, #0]
    channel_2_pwm = channel_2_fs;
    1902:	4b14      	ldr	r3, [pc, #80]	; (1954 <failSafe()+0xc4>)
    1904:	681a      	ldr	r2, [r3, #0]
    1906:	4b0c      	ldr	r3, [pc, #48]	; (1938 <failSafe()+0xa8>)
    1908:	601a      	str	r2, [r3, #0]
    channel_3_pwm = channel_3_fs;
    190a:	4b13      	ldr	r3, [pc, #76]	; (1958 <failSafe()+0xc8>)
    190c:	681a      	ldr	r2, [r3, #0]
    190e:	4b0c      	ldr	r3, [pc, #48]	; (1940 <failSafe()+0xb0>)
    1910:	601a      	str	r2, [r3, #0]
    channel_4_pwm = channel_4_fs;
    1912:	4b12      	ldr	r3, [pc, #72]	; (195c <failSafe()+0xcc>)
    1914:	681a      	ldr	r2, [r3, #0]
    1916:	4b0b      	ldr	r3, [pc, #44]	; (1944 <failSafe()+0xb4>)
    1918:	601a      	str	r2, [r3, #0]
    channel_5_pwm = channel_5_fs;
    191a:	4b11      	ldr	r3, [pc, #68]	; (1960 <failSafe()+0xd0>)
    191c:	681a      	ldr	r2, [r3, #0]
    191e:	4b0a      	ldr	r3, [pc, #40]	; (1948 <failSafe()+0xb8>)
    1920:	601a      	str	r2, [r3, #0]
    channel_6_pwm = channel_6_fs;
    1922:	4b10      	ldr	r3, [pc, #64]	; (1964 <failSafe()+0xd4>)
    1924:	681a      	ldr	r2, [r3, #0]
    1926:	4b09      	ldr	r3, [pc, #36]	; (194c <failSafe()+0xbc>)
    1928:	601a      	str	r2, [r3, #0]
		failureFlag = 1;
    192a:	4b02      	ldr	r3, [pc, #8]	; (1934 <failSafe()+0xa4>)
    192c:	2201      	movs	r2, #1
    192e:	701a      	strb	r2, [r3, #0]
  }
}
    1930:	4770      	bx	lr
    1932:	bf00      	nop
    1934:	200053cd 	.word	0x200053cd
    1938:	20005020 	.word	0x20005020
    193c:	20005014 	.word	0x20005014
    1940:	2000502c 	.word	0x2000502c
    1944:	20005038 	.word	0x20005038
    1948:	20005044 	.word	0x20005044
    194c:	20005048 	.word	0x20005048
    1950:	20003994 	.word	0x20003994
    1954:	20003998 	.word	0x20003998
    1958:	2000399c 	.word	0x2000399c
    195c:	200039a0 	.word	0x200039a0
    1960:	200039a4 	.word	0x200039a4
    1964:	200039a8 	.word	0x200039a8

00001968 <commandMotors()>:

void commandMotors() {
    1968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    196c:	b085      	sub	sp, #20
  int flagM4 = 0;
  int flagM5 = 0;
  int flagM6 = 0;
  
  //Write all motor pins high
  digitalWrite(m1Pin, HIGH);
    196e:	2101      	movs	r1, #1
    1970:	2000      	movs	r0, #0
    1972:	f00b fc55 	bl	d220 <digitalWrite>
  digitalWrite(m2Pin, HIGH);
    1976:	2101      	movs	r1, #1
    1978:	4608      	mov	r0, r1
    197a:	f00b fc51 	bl	d220 <digitalWrite>
  digitalWrite(m3Pin, HIGH);
    197e:	2101      	movs	r1, #1
    1980:	2002      	movs	r0, #2
    1982:	f00b fc4d 	bl	d220 <digitalWrite>
  digitalWrite(m4Pin, HIGH);
    1986:	2101      	movs	r1, #1
    1988:	2003      	movs	r0, #3
    198a:	f00b fc49 	bl	d220 <digitalWrite>
  digitalWrite(m5Pin, HIGH);
    198e:	2101      	movs	r1, #1
    1990:	2004      	movs	r0, #4
    1992:	f00b fc45 	bl	d220 <digitalWrite>
  digitalWrite(m6Pin, HIGH);
    1996:	2101      	movs	r1, #1
    1998:	2005      	movs	r0, #5
    199a:	f00b fc41 	bl	d220 <digitalWrite>
  pulseStart = micros();
    199e:	f00b fbff 	bl	d1a0 <micros>
    19a2:	4606      	mov	r6, r0
  int flagM6 = 0;
    19a4:	f04f 0a00 	mov.w	sl, #0
  int flagM5 = 0;
    19a8:	46d3      	mov	fp, sl
  int flagM4 = 0;
    19aa:	f8cd a00c 	str.w	sl, [sp, #12]
  int flagM3 = 0;
    19ae:	f8cd a008 	str.w	sl, [sp, #8]
  int flagM2 = 0;
    19b2:	f8cd a004 	str.w	sl, [sp, #4]
  int flagM1 = 0;
    19b6:	f8cd a000 	str.w	sl, [sp]
  int wentLow = 0;
    19ba:	4655      	mov	r5, sl

  //Write each motor pin low as correct pulse length is reached
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    timer = micros();
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    19bc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1a9c <commandMotors()+0x134>
      digitalWrite(m1Pin, LOW);
      wentLow = wentLow + 1;
      flagM1 = 1;
    }
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    19c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1aa0 <commandMotors()+0x138>
      digitalWrite(m2Pin, LOW);
      wentLow = wentLow + 1;
      flagM2 = 1;
    }
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    19c4:	4f31      	ldr	r7, [pc, #196]	; (1a8c <commandMotors()+0x124>)
    19c6:	e029      	b.n	1a1c <commandMotors()+0xb4>
      digitalWrite(m1Pin, LOW);
    19c8:	2100      	movs	r1, #0
    19ca:	4608      	mov	r0, r1
    19cc:	f00b fc28 	bl	d220 <digitalWrite>
      wentLow = wentLow + 1;
    19d0:	3501      	adds	r5, #1
      flagM1 = 1;
    19d2:	2301      	movs	r3, #1
    19d4:	9300      	str	r3, [sp, #0]
    19d6:	e02b      	b.n	1a30 <commandMotors()+0xc8>
      digitalWrite(m2Pin, LOW);
    19d8:	2100      	movs	r1, #0
    19da:	2001      	movs	r0, #1
    19dc:	f00b fc20 	bl	d220 <digitalWrite>
      wentLow = wentLow + 1;
    19e0:	3501      	adds	r5, #1
      flagM2 = 1;
    19e2:	2301      	movs	r3, #1
    19e4:	9301      	str	r3, [sp, #4]
    19e6:	e02a      	b.n	1a3e <commandMotors()+0xd6>
      digitalWrite(m3Pin, LOW);
    19e8:	2100      	movs	r1, #0
    19ea:	2002      	movs	r0, #2
    19ec:	f00b fc18 	bl	d220 <digitalWrite>
      wentLow = wentLow + 1;
    19f0:	3501      	adds	r5, #1
      flagM3 = 1;
    19f2:	2301      	movs	r3, #1
    19f4:	9302      	str	r3, [sp, #8]
    19f6:	e028      	b.n	1a4a <commandMotors()+0xe2>
    }
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
      digitalWrite(m4Pin, LOW);
    19f8:	2100      	movs	r1, #0
    19fa:	2003      	movs	r0, #3
    19fc:	f00b fc10 	bl	d220 <digitalWrite>
      wentLow = wentLow + 1;
    1a00:	3501      	adds	r5, #1
      flagM4 = 1;
    1a02:	2301      	movs	r3, #1
    1a04:	9303      	str	r3, [sp, #12]
    1a06:	e027      	b.n	1a58 <commandMotors()+0xf0>
    } 
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
      digitalWrite(m5Pin, LOW);
    1a08:	2100      	movs	r1, #0
    1a0a:	2004      	movs	r0, #4
    1a0c:	f00b fc08 	bl	d220 <digitalWrite>
      wentLow = wentLow + 1;
    1a10:	3501      	adds	r5, #1
      flagM5 = 1;
    1a12:	f04f 0b01 	mov.w	fp, #1
    1a16:	e026      	b.n	1a66 <commandMotors()+0xfe>
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    1a18:	2d05      	cmp	r5, #5
    1a1a:	dc33      	bgt.n	1a84 <commandMotors()+0x11c>
    timer = micros();
    1a1c:	f00b fbc0 	bl	d1a0 <micros>
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    1a20:	1b84      	subs	r4, r0, r6
    1a22:	f8d9 3000 	ldr.w	r3, [r9]
    1a26:	429c      	cmp	r4, r3
    1a28:	db02      	blt.n	1a30 <commandMotors()+0xc8>
    1a2a:	9b00      	ldr	r3, [sp, #0]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d0cb      	beq.n	19c8 <commandMotors()+0x60>
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    1a30:	f8d8 3000 	ldr.w	r3, [r8]
    1a34:	429c      	cmp	r4, r3
    1a36:	db02      	blt.n	1a3e <commandMotors()+0xd6>
    1a38:	9b01      	ldr	r3, [sp, #4]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d0cc      	beq.n	19d8 <commandMotors()+0x70>
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    1a3e:	683b      	ldr	r3, [r7, #0]
    1a40:	429c      	cmp	r4, r3
    1a42:	db02      	blt.n	1a4a <commandMotors()+0xe2>
    1a44:	9b02      	ldr	r3, [sp, #8]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d0ce      	beq.n	19e8 <commandMotors()+0x80>
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
    1a4a:	4b11      	ldr	r3, [pc, #68]	; (1a90 <commandMotors()+0x128>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	429c      	cmp	r4, r3
    1a50:	db02      	blt.n	1a58 <commandMotors()+0xf0>
    1a52:	9b03      	ldr	r3, [sp, #12]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d0cf      	beq.n	19f8 <commandMotors()+0x90>
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
    1a58:	4b0e      	ldr	r3, [pc, #56]	; (1a94 <commandMotors()+0x12c>)
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	429c      	cmp	r4, r3
    1a5e:	db02      	blt.n	1a66 <commandMotors()+0xfe>
    1a60:	f1bb 0f00 	cmp.w	fp, #0
    1a64:	d0d0      	beq.n	1a08 <commandMotors()+0xa0>
    } 
    if ((m6_command_PWM <= timer - pulseStart) && (flagM6==0)) {
    1a66:	4b0c      	ldr	r3, [pc, #48]	; (1a98 <commandMotors()+0x130>)
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	429c      	cmp	r4, r3
    1a6c:	dbd4      	blt.n	1a18 <commandMotors()+0xb0>
    1a6e:	f1ba 0f00 	cmp.w	sl, #0
    1a72:	d1d1      	bne.n	1a18 <commandMotors()+0xb0>
      digitalWrite(m6Pin, LOW);
    1a74:	2100      	movs	r1, #0
    1a76:	2005      	movs	r0, #5
    1a78:	f00b fbd2 	bl	d220 <digitalWrite>
      wentLow = wentLow + 1;
    1a7c:	3501      	adds	r5, #1
      flagM6 = 1;
    1a7e:	f04f 0a01 	mov.w	sl, #1
    1a82:	e7c9      	b.n	1a18 <commandMotors()+0xb0>
    } 
  }
}
    1a84:	b005      	add	sp, #20
    1a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8a:	bf00      	nop
    1a8c:	200050f0 	.word	0x200050f0
    1a90:	200050f8 	.word	0x200050f8
    1a94:	20005100 	.word	0x20005100
    1a98:	20005108 	.word	0x20005108
    1a9c:	200050e0 	.word	0x200050e0
    1aa0:	200050e8 	.word	0x200050e8

00001aa4 <armMotors()>:

void armMotors() {
    1aa4:	b538      	push	{r3, r4, r5, lr}
    1aa6:	2433      	movs	r4, #51	; 0x33
   *  function is used in the main loop. Ensures motors arm within the void setup() where there are some delays
   *  for other processes that sometimes prevent motors from arming.
   */
  for (int i = 0; i <= 50; i++) {
    commandMotors();
    delay(2);
    1aa8:	2502      	movs	r5, #2
    commandMotors();
    1aaa:	f7ff ff5d 	bl	1968 <commandMotors()>
    delay(2);
    1aae:	4628      	mov	r0, r5
    1ab0:	f00b fba0 	bl	d1f4 <delay>
  for (int i = 0; i <= 50; i++) {
    1ab4:	3c01      	subs	r4, #1
    1ab6:	d1f8      	bne.n	1aaa <armMotors()+0x6>
  }
}
    1ab8:	bd38      	pop	{r3, r4, r5, pc}
	...

00001abc <throttleCut()>:
   * Monitors the state of radio command channel_5_pwm and directly sets the mx_command_PWM values to minimum (120 is
   * minimum for oneshot125 protocol, 0 is minimum for standard PWM servo library used) if channel 5 is high. This is the last function 
   * called before commandMotors() is called so that the last thing checked is if the user is giving permission to command
   * the motors to anything other than minimum value. Safety first. 
   */
  if (channel_5_pwm > 1500) {
    1abc:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <throttleCut()+0x2c>)
    1abe:	681a      	ldr	r2, [r3, #0]
    1ac0:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1ac4:	429a      	cmp	r2, r3
    1ac6:	dd0e      	ble.n	1ae6 <throttleCut()+0x2a>
    // m4_command_PWM = 120;
    // m5_command_PWM = 120;
    // m6_command_PWM = 120;
    
    //Uncomment if using servo PWM variables to control motor ESCs
    s1_command_PWM = 0;
    1ac8:	2300      	movs	r3, #0
    1aca:	4a08      	ldr	r2, [pc, #32]	; (1aec <throttleCut()+0x30>)
    1acc:	6013      	str	r3, [r2, #0]
    s2_command_PWM = 0;
    1ace:	4a08      	ldr	r2, [pc, #32]	; (1af0 <throttleCut()+0x34>)
    1ad0:	6013      	str	r3, [r2, #0]
    s3_command_PWM = 0;
    1ad2:	4a08      	ldr	r2, [pc, #32]	; (1af4 <throttleCut()+0x38>)
    1ad4:	6013      	str	r3, [r2, #0]
    s4_command_PWM = 0;
    1ad6:	4a08      	ldr	r2, [pc, #32]	; (1af8 <throttleCut()+0x3c>)
    1ad8:	6013      	str	r3, [r2, #0]
    s5_command_PWM = 0;
    1ada:	4a08      	ldr	r2, [pc, #32]	; (1afc <throttleCut()+0x40>)
    1adc:	6013      	str	r3, [r2, #0]
    s6_command_PWM = 0;
    1ade:	4a08      	ldr	r2, [pc, #32]	; (1b00 <throttleCut()+0x44>)
    1ae0:	6013      	str	r3, [r2, #0]
    s7_command_PWM = 0;
    1ae2:	4a08      	ldr	r2, [pc, #32]	; (1b04 <throttleCut()+0x48>)
    1ae4:	6013      	str	r3, [r2, #0]
  }
}
    1ae6:	4770      	bx	lr
    1ae8:	20005044 	.word	0x20005044
    1aec:	200051b0 	.word	0x200051b0
    1af0:	200051b8 	.word	0x200051b8
    1af4:	200051c0 	.word	0x200051c0
    1af8:	200051c8 	.word	0x200051c8
    1afc:	200051d0 	.word	0x200051d0
    1b00:	200051d8 	.word	0x200051d8
    1b04:	200051e0 	.word	0x200051e0

00001b08 <loopRate(int)>:
  #endif
  Serial.println("Error: MPU9250 not selected. Cannot calibrate non-existent magnetometer.");
  while(1); //Halt code so it won't enter main loop until this function commented out
}

void loopRate(int freq) {
    1b08:	b510      	push	{r4, lr}
    1b0a:	ed2d 8b02 	vpush	{d8}
    1b0e:	ee06 0a10 	vmov	s12, r0
   * background cause the loop rate to fluctuate. This function basically just waits at the end of every loop iteration until 
   * the correct time has passed since the start of the current loop for the desired loop rate in Hz. 2kHz is a good rate to 
   * be at because the loop nominally will run between 2.8kHz - 4.2kHz. This lets us have a little room to add extra computations
   * and remain above 2kHz, without needing to retune all of our filtering parameters.
   */
  float invFreq = 1.0/freq*1000000.0;
    1b12:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1b16:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    1b1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1b1e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 1b68 <loopRate(int)+0x60>
    1b22:	ee27 7b06 	vmul.f64	d7, d7, d6
    1b26:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  unsigned long checker = micros();
    1b2a:	f00b fb39 	bl	d1a0 <micros>
  
  //Sit in loop until appropriate time has passed
  while (invFreq > (checker - current_time)) {
    1b2e:	4b10      	ldr	r3, [pc, #64]	; (1b70 <loopRate(int)+0x68>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	1ac0      	subs	r0, r0, r3
    1b34:	ee07 0a90 	vmov	s15, r0
    1b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1b3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b44:	dd0d      	ble.n	1b62 <loopRate(int)+0x5a>
    1b46:	4c0a      	ldr	r4, [pc, #40]	; (1b70 <loopRate(int)+0x68>)
    checker = micros();
    1b48:	f00b fb2a 	bl	d1a0 <micros>
  while (invFreq > (checker - current_time)) {
    1b4c:	6823      	ldr	r3, [r4, #0]
    1b4e:	1ac0      	subs	r0, r0, r3
    1b50:	ee07 0a90 	vmov	s15, r0
    1b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1b58:	eef4 7ac8 	vcmpe.f32	s15, s16
    1b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b60:	d4f2      	bmi.n	1b48 <loopRate(int)+0x40>
  }
}
    1b62:	ecbd 8b02 	vpop	{d8}
    1b66:	bd10      	pop	{r4, pc}
    1b68:	00000000 	.word	0x00000000
    1b6c:	412e8480 	.word	0x412e8480
    1b70:	20005064 	.word	0x20005064

00001b74 <loopBlink()>:
void loopBlink() {
  //DESCRIPTION: Blink LED on board to indicate main loop is running
  /*
   * It looks cool.
   */
  if (current_time - blink_counter > blink_delay) {
    1b74:	4b11      	ldr	r3, [pc, #68]	; (1bbc <loopBlink()+0x48>)
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	4a11      	ldr	r2, [pc, #68]	; (1bc0 <loopBlink()+0x4c>)
    1b7a:	6812      	ldr	r2, [r2, #0]
    1b7c:	1a9b      	subs	r3, r3, r2
    1b7e:	4a11      	ldr	r2, [pc, #68]	; (1bc4 <loopBlink()+0x50>)
    1b80:	6812      	ldr	r2, [r2, #0]
    1b82:	4293      	cmp	r3, r2
    1b84:	d800      	bhi.n	1b88 <loopBlink()+0x14>
    1b86:	4770      	bx	lr
void loopBlink() {
    1b88:	b510      	push	{r4, lr}
    blink_counter = micros();
    1b8a:	f00b fb09 	bl	d1a0 <micros>
    1b8e:	4b0c      	ldr	r3, [pc, #48]	; (1bc0 <loopBlink()+0x4c>)
    1b90:	6018      	str	r0, [r3, #0]
    digitalWrite(13, blinkAlternate); //Pin 13 is built in LED
    1b92:	4c0d      	ldr	r4, [pc, #52]	; (1bc8 <loopBlink()+0x54>)
    1b94:	7821      	ldrb	r1, [r4, #0]
    1b96:	200d      	movs	r0, #13
    1b98:	f00b fb42 	bl	d220 <digitalWrite>
    
    if (blinkAlternate == 1) {
    1b9c:	7823      	ldrb	r3, [r4, #0]
    1b9e:	b12b      	cbz	r3, 1bac <loopBlink()+0x38>
      blinkAlternate = 0;
    1ba0:	2200      	movs	r2, #0
    1ba2:	7022      	strb	r2, [r4, #0]
      blink_delay = 100000;
    1ba4:	4b07      	ldr	r3, [pc, #28]	; (1bc4 <loopBlink()+0x50>)
    1ba6:	4a09      	ldr	r2, [pc, #36]	; (1bcc <loopBlink()+0x58>)
    1ba8:	601a      	str	r2, [r3, #0]
    else if (blinkAlternate == 0) {
      blinkAlternate = 1;
      blink_delay = 2000000;
      }
  }
}
    1baa:	bd10      	pop	{r4, pc}
      blinkAlternate = 1;
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <loopBlink()+0x54>)
    1bae:	2201      	movs	r2, #1
    1bb0:	701a      	strb	r2, [r3, #0]
      blink_delay = 2000000;
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <loopBlink()+0x50>)
    1bb4:	4a06      	ldr	r2, [pc, #24]	; (1bd0 <loopBlink()+0x5c>)
    1bb6:	601a      	str	r2, [r3, #0]
}
    1bb8:	e7f7      	b.n	1baa <loopBlink()+0x36>
    1bba:	bf00      	nop
    1bbc:	20005064 	.word	0x20005064
    1bc0:	20004fec 	.word	0x20004fec
    1bc4:	20004ff0 	.word	0x20004ff0
    1bc8:	200053c8 	.word	0x200053c8
    1bcc:	000186a0 	.word	0x000186a0
    1bd0:	001e8480 	.word	0x001e8480

00001bd4 <setupBlink(int, int, int)>:

void setupBlink(int numBlinks,int upTime, int downTime) {
    1bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //DESCRIPTION: Simple function to make LED on board blink as desired
  for (int j = 1; j<= numBlinks; j++) {
    1bd8:	1e06      	subs	r6, r0, #0
    1bda:	dd17      	ble.n	1c0c <setupBlink(int, int, int)+0x38>
    1bdc:	460f      	mov	r7, r1
    1bde:	4690      	mov	r8, r2
    1be0:	2401      	movs	r4, #1
    digitalWrite(13, LOW);
    1be2:	f04f 0a00 	mov.w	sl, #0
    1be6:	250d      	movs	r5, #13
    delay(downTime);
    digitalWrite(13, HIGH);
    1be8:	46a1      	mov	r9, r4
    digitalWrite(13, LOW);
    1bea:	4651      	mov	r1, sl
    1bec:	4628      	mov	r0, r5
    1bee:	f00b fb17 	bl	d220 <digitalWrite>
    delay(downTime);
    1bf2:	4640      	mov	r0, r8
    1bf4:	f00b fafe 	bl	d1f4 <delay>
    digitalWrite(13, HIGH);
    1bf8:	4649      	mov	r1, r9
    1bfa:	4628      	mov	r0, r5
    1bfc:	f00b fb10 	bl	d220 <digitalWrite>
    delay(upTime);
    1c00:	4638      	mov	r0, r7
    1c02:	f00b faf7 	bl	d1f4 <delay>
  for (int j = 1; j<= numBlinks; j++) {
    1c06:	3401      	adds	r4, #1
    1c08:	42a6      	cmp	r6, r4
    1c0a:	daee      	bge.n	1bea <setupBlink(int, int, int)+0x16>
  }
}
    1c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001c10 <printRadioData()>:

void printRadioData() {
  if (current_time - print_counter > 10000) {
    1c10:	4b51      	ldr	r3, [pc, #324]	; (1d58 <printRadioData()+0x148>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	4a51      	ldr	r2, [pc, #324]	; (1d5c <printRadioData()+0x14c>)
    1c16:	6812      	ldr	r2, [r2, #0]
    1c18:	1a9b      	subs	r3, r3, r2
    1c1a:	f242 7210 	movw	r2, #10000	; 0x2710
    1c1e:	4293      	cmp	r3, r2
    1c20:	d800      	bhi.n	1c24 <printRadioData()+0x14>
    1c22:	4770      	bx	lr
void printRadioData() {
    1c24:	b510      	push	{r4, lr}
    print_counter = micros();
    1c26:	f00b fabb 	bl	d1a0 <micros>
    1c2a:	4b4c      	ldr	r3, [pc, #304]	; (1d5c <printRadioData()+0x14c>)
    1c2c:	6018      	str	r0, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1c2e:	4c4c      	ldr	r4, [pc, #304]	; (1d60 <printRadioData()+0x150>)
    1c30:	6823      	ldr	r3, [r4, #0]
    1c32:	685b      	ldr	r3, [r3, #4]
    1c34:	2206      	movs	r2, #6
    1c36:	494b      	ldr	r1, [pc, #300]	; (1d64 <printRadioData()+0x154>)
    1c38:	4620      	mov	r0, r4
    1c3a:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1c3c:	4b4a      	ldr	r3, [pc, #296]	; (1d68 <printRadioData()+0x158>)
    1c3e:	6819      	ldr	r1, [r3, #0]
    1c40:	4620      	mov	r0, r4
    1c42:	f00a fe8e 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1c46:	6823      	ldr	r3, [r4, #0]
    1c48:	685b      	ldr	r3, [r3, #4]
    1c4a:	2206      	movs	r2, #6
    1c4c:	4947      	ldr	r1, [pc, #284]	; (1d6c <printRadioData()+0x15c>)
    1c4e:	4620      	mov	r0, r4
    1c50:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1c52:	4b47      	ldr	r3, [pc, #284]	; (1d70 <printRadioData()+0x160>)
    1c54:	6819      	ldr	r1, [r3, #0]
    1c56:	4620      	mov	r0, r4
    1c58:	f00a fe83 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1c5c:	6823      	ldr	r3, [r4, #0]
    1c5e:	685b      	ldr	r3, [r3, #4]
    1c60:	2206      	movs	r2, #6
    1c62:	4944      	ldr	r1, [pc, #272]	; (1d74 <printRadioData()+0x164>)
    1c64:	4620      	mov	r0, r4
    1c66:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1c68:	4b43      	ldr	r3, [pc, #268]	; (1d78 <printRadioData()+0x168>)
    1c6a:	6819      	ldr	r1, [r3, #0]
    1c6c:	4620      	mov	r0, r4
    1c6e:	f00a fe78 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1c72:	6823      	ldr	r3, [r4, #0]
    1c74:	685b      	ldr	r3, [r3, #4]
    1c76:	2206      	movs	r2, #6
    1c78:	4940      	ldr	r1, [pc, #256]	; (1d7c <printRadioData()+0x16c>)
    1c7a:	4620      	mov	r0, r4
    1c7c:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1c7e:	4b40      	ldr	r3, [pc, #256]	; (1d80 <printRadioData()+0x170>)
    1c80:	6819      	ldr	r1, [r3, #0]
    1c82:	4620      	mov	r0, r4
    1c84:	f00a fe6d 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1c88:	6823      	ldr	r3, [r4, #0]
    1c8a:	685b      	ldr	r3, [r3, #4]
    1c8c:	2206      	movs	r2, #6
    1c8e:	493d      	ldr	r1, [pc, #244]	; (1d84 <printRadioData()+0x174>)
    1c90:	4620      	mov	r0, r4
    1c92:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1c94:	4b3c      	ldr	r3, [pc, #240]	; (1d88 <printRadioData()+0x178>)
    1c96:	6819      	ldr	r1, [r3, #0]
    1c98:	4620      	mov	r0, r4
    1c9a:	f00a fe62 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1c9e:	6823      	ldr	r3, [r4, #0]
    1ca0:	685b      	ldr	r3, [r3, #4]
    1ca2:	2206      	movs	r2, #6
    1ca4:	4939      	ldr	r1, [pc, #228]	; (1d8c <printRadioData()+0x17c>)
    1ca6:	4620      	mov	r0, r4
    1ca8:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1caa:	4b39      	ldr	r3, [pc, #228]	; (1d90 <printRadioData()+0x180>)
    1cac:	6819      	ldr	r1, [r3, #0]
    1cae:	4620      	mov	r0, r4
    1cb0:	f00a fe57 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	685b      	ldr	r3, [r3, #4]
    1cb8:	2206      	movs	r2, #6
    1cba:	4936      	ldr	r1, [pc, #216]	; (1d94 <printRadioData()+0x184>)
    1cbc:	4620      	mov	r0, r4
    1cbe:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1cc0:	4b35      	ldr	r3, [pc, #212]	; (1d98 <printRadioData()+0x188>)
    1cc2:	6819      	ldr	r1, [r3, #0]
    1cc4:	4620      	mov	r0, r4
    1cc6:	f00a fe4c 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1cca:	6823      	ldr	r3, [r4, #0]
    1ccc:	685b      	ldr	r3, [r3, #4]
    1cce:	2206      	movs	r2, #6
    1cd0:	4932      	ldr	r1, [pc, #200]	; (1d9c <printRadioData()+0x18c>)
    1cd2:	4620      	mov	r0, r4
    1cd4:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1cd6:	4b32      	ldr	r3, [pc, #200]	; (1da0 <printRadioData()+0x190>)
    1cd8:	6819      	ldr	r1, [r3, #0]
    1cda:	4620      	mov	r0, r4
    1cdc:	f00a fe41 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1ce0:	6823      	ldr	r3, [r4, #0]
    1ce2:	685b      	ldr	r3, [r3, #4]
    1ce4:	2206      	movs	r2, #6
    1ce6:	492f      	ldr	r1, [pc, #188]	; (1da4 <printRadioData()+0x194>)
    1ce8:	4620      	mov	r0, r4
    1cea:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1cec:	4b2e      	ldr	r3, [pc, #184]	; (1da8 <printRadioData()+0x198>)
    1cee:	6819      	ldr	r1, [r3, #0]
    1cf0:	4620      	mov	r0, r4
    1cf2:	f00a fe36 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1cf6:	6823      	ldr	r3, [r4, #0]
    1cf8:	685b      	ldr	r3, [r3, #4]
    1cfa:	2207      	movs	r2, #7
    1cfc:	492b      	ldr	r1, [pc, #172]	; (1dac <printRadioData()+0x19c>)
    1cfe:	4620      	mov	r0, r4
    1d00:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1d02:	4b2b      	ldr	r3, [pc, #172]	; (1db0 <printRadioData()+0x1a0>)
    1d04:	6819      	ldr	r1, [r3, #0]
    1d06:	4620      	mov	r0, r4
    1d08:	f00a fe2b 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1d0c:	6823      	ldr	r3, [r4, #0]
    1d0e:	685b      	ldr	r3, [r3, #4]
    1d10:	2207      	movs	r2, #7
    1d12:	4928      	ldr	r1, [pc, #160]	; (1db4 <printRadioData()+0x1a4>)
    1d14:	4620      	mov	r0, r4
    1d16:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1d18:	4b27      	ldr	r3, [pc, #156]	; (1db8 <printRadioData()+0x1a8>)
    1d1a:	6819      	ldr	r1, [r3, #0]
    1d1c:	4620      	mov	r0, r4
    1d1e:	f00a fe20 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	685b      	ldr	r3, [r3, #4]
    1d26:	2207      	movs	r2, #7
    1d28:	4924      	ldr	r1, [pc, #144]	; (1dbc <printRadioData()+0x1ac>)
    1d2a:	4620      	mov	r0, r4
    1d2c:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1d2e:	4b24      	ldr	r3, [pc, #144]	; (1dc0 <printRadioData()+0x1b0>)
    1d30:	6819      	ldr	r1, [r3, #0]
    1d32:	4620      	mov	r0, r4
    1d34:	f00a fe15 	bl	c962 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    1d38:	6823      	ldr	r3, [r4, #0]
    1d3a:	685b      	ldr	r3, [r3, #4]
    1d3c:	2207      	movs	r2, #7
    1d3e:	4921      	ldr	r1, [pc, #132]	; (1dc4 <printRadioData()+0x1b4>)
    1d40:	4620      	mov	r0, r4
    1d42:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    1d44:	4b20      	ldr	r3, [pc, #128]	; (1dc8 <printRadioData()+0x1b8>)
    1d46:	6819      	ldr	r1, [r3, #0]
    1d48:	4620      	mov	r0, r4
    1d4a:	f00a fe0a 	bl	c962 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
    1d4e:	4620      	mov	r0, r4
    1d50:	f00a fda7 	bl	c8a2 <Print::println()>
    Serial.print(F(" CH12: "));
    Serial.print(channel_12_pwm);
    Serial.print(F(" CH13: "));
    Serial.println(channel_13_pwm);
  }
}
    1d54:	bd10      	pop	{r4, pc}
    1d56:	bf00      	nop
    1d58:	20005064 	.word	0x20005064
    1d5c:	20005158 	.word	0x20005158
    1d60:	2000336c 	.word	0x2000336c
    1d64:	20001d14 	.word	0x20001d14
    1d68:	20005014 	.word	0x20005014
    1d6c:	20001d1c 	.word	0x20001d1c
    1d70:	20005020 	.word	0x20005020
    1d74:	20001d24 	.word	0x20001d24
    1d78:	2000502c 	.word	0x2000502c
    1d7c:	20001d2c 	.word	0x20001d2c
    1d80:	20005038 	.word	0x20005038
    1d84:	20001d34 	.word	0x20001d34
    1d88:	20005044 	.word	0x20005044
    1d8c:	20001d3c 	.word	0x20001d3c
    1d90:	20005048 	.word	0x20005048
    1d94:	20001d44 	.word	0x20001d44
    1d98:	2000504c 	.word	0x2000504c
    1d9c:	20001d4c 	.word	0x20001d4c
    1da0:	20005050 	.word	0x20005050
    1da4:	20001d54 	.word	0x20001d54
    1da8:	20005054 	.word	0x20005054
    1dac:	20001d5c 	.word	0x20001d5c
    1db0:	20005004 	.word	0x20005004
    1db4:	20001d64 	.word	0x20001d64
    1db8:	20005008 	.word	0x20005008
    1dbc:	20001d6c 	.word	0x20001d6c
    1dc0:	2000500c 	.word	0x2000500c
    1dc4:	20001d74 	.word	0x20001d74
    1dc8:	20005010 	.word	0x20005010

00001dcc <getJoyAngle()>:
    Serial.print(F("dt = "));
    Serial.println(dt*1000000.0);
  }
}

void getJoyAngle() {
    1dcc:	b510      	push	{r4, lr}
	alphaCounts = analogRead(joyAlphaPin);
    1dce:	2029      	movs	r0, #41	; 0x29
    1dd0:	f00b f84a 	bl	ce68 <analogRead>
    1dd4:	4c12      	ldr	r4, [pc, #72]	; (1e20 <getJoyAngle()+0x54>)
    1dd6:	6020      	str	r0, [r4, #0]
	betaCounts = analogRead(joyBetaPin);
    1dd8:	2028      	movs	r0, #40	; 0x28
    1dda:	f00b f845 	bl	ce68 <analogRead>
    1dde:	4b11      	ldr	r3, [pc, #68]	; (1e24 <getJoyAngle()+0x58>)
    1de0:	6018      	str	r0, [r3, #0]
	alpha = alphaCounts*0.06577f - 40.0f;
    1de2:	edd4 7a00 	vldr	s15, [r4]
    1de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1dea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1e28 <getJoyAngle()+0x5c>
    1dee:	ee67 7a87 	vmul.f32	s15, s15, s14
    1df2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 1e2c <getJoyAngle()+0x60>
    1df6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1dfa:	4b0d      	ldr	r3, [pc, #52]	; (1e30 <getJoyAngle()+0x64>)
    1dfc:	edc3 7a00 	vstr	s15, [r3]
	beta = betaCounts*(-0.05971f) + 36.0f;
    1e00:	ee07 0a90 	vmov	s15, r0
    1e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1e08:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1e34 <getJoyAngle()+0x68>
    1e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e10:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1e38 <getJoyAngle()+0x6c>
    1e14:	ee77 7a87 	vadd.f32	s15, s15, s14
    1e18:	4b08      	ldr	r3, [pc, #32]	; (1e3c <getJoyAngle()+0x70>)
    1e1a:	edc3 7a00 	vstr	s15, [r3]
}
    1e1e:	bd10      	pop	{r4, pc}
    1e20:	20004fd8 	.word	0x20004fd8
    1e24:	20004fe4 	.word	0x20004fe4
    1e28:	3d86b26c 	.word	0x3d86b26c
    1e2c:	42200000 	.word	0x42200000
    1e30:	20004fd4 	.word	0x20004fd4
    1e34:	bd749279 	.word	0xbd749279
    1e38:	42100000 	.word	0x42100000
    1e3c:	20004fe0 	.word	0x20004fe0

00001e40 <openIris()>:

void openIris() {
    1e40:	b508      	push	{r3, lr}
	iris.write(60);
    1e42:	213c      	movs	r1, #60	; 0x3c
    1e44:	4803      	ldr	r0, [pc, #12]	; (1e54 <openIris()+0x14>)
    1e46:	f003 f905 	bl	5054 <PWMServo::write(int)>
	servoLoopCounter = 0;
    1e4a:	4b03      	ldr	r3, [pc, #12]	; (1e58 <openIris()+0x18>)
    1e4c:	2200      	movs	r2, #0
    1e4e:	601a      	str	r2, [r3, #0]
}
    1e50:	bd08      	pop	{r3, pc}
    1e52:	bf00      	nop
    1e54:	200050dc 	.word	0x200050dc
    1e58:	20005378 	.word	0x20005378

00001e5c <closeIris()>:

void closeIris() {
    1e5c:	b508      	push	{r3, lr}
	if (servoLoopCounter < 500) {
    1e5e:	4b09      	ldr	r3, [pc, #36]	; (1e84 <closeIris()+0x28>)
    1e60:	681b      	ldr	r3, [r3, #0]
    1e62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1e66:	da08      	bge.n	1e7a <closeIris()+0x1e>
		iris.write(138);
    1e68:	218a      	movs	r1, #138	; 0x8a
    1e6a:	4807      	ldr	r0, [pc, #28]	; (1e88 <closeIris()+0x2c>)
    1e6c:	f003 f8f2 	bl	5054 <PWMServo::write(int)>
		servoLoopCounter++;
    1e70:	4a04      	ldr	r2, [pc, #16]	; (1e84 <closeIris()+0x28>)
    1e72:	6813      	ldr	r3, [r2, #0]
    1e74:	3301      	adds	r3, #1
    1e76:	6013      	str	r3, [r2, #0]
	} else {
		iris.write(135);
	}
}
    1e78:	bd08      	pop	{r3, pc}
		iris.write(135);
    1e7a:	2187      	movs	r1, #135	; 0x87
    1e7c:	4802      	ldr	r0, [pc, #8]	; (1e88 <closeIris()+0x2c>)
    1e7e:	f003 f8e9 	bl	5054 <PWMServo::write(int)>
}
    1e82:	e7f9      	b.n	1e78 <closeIris()+0x1c>
    1e84:	20005378 	.word	0x20005378
    1e88:	200050dc 	.word	0x200050dc

00001e8c <getDataString()>:
		//Serial.print("BetaCounts: ");
		//Serial.println(betaCounts);
	}
}

String getDataString() {
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
    1e92:	4605      	mov	r5, r0
	String csvDataString;
    1e94:	2100      	movs	r1, #0
    1e96:	f00a ff02 	bl	cc9e <String::String(char const*)>
	csvDataString = String(roll_IMU)
    1e9a:	2102      	movs	r1, #2
    1e9c:	4bcc      	ldr	r3, [pc, #816]	; (21d0 <getDataString()+0x344>)
    1e9e:	ed93 0a00 	vldr	s0, [r3]
    1ea2:	a804      	add	r0, sp, #16
    1ea4:	f00a ff64 	bl	cd70 <String::String(float, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1ea8:	a904      	add	r1, sp, #16
    1eaa:	4668      	mov	r0, sp
    1eac:	f00a ff29 	bl	cd02 <String::String(String const&)>
									+ ","
    1eb0:	4cc8      	ldr	r4, [pc, #800]	; (21d4 <getDataString()+0x348>)
    1eb2:	4621      	mov	r1, r4
    1eb4:	4668      	mov	r0, sp
    1eb6:	f00a ffaf 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1eba:	4606      	mov	r6, r0
									+ String(pitch_IMU)
    1ebc:	2102      	movs	r1, #2
    1ebe:	4bc6      	ldr	r3, [pc, #792]	; (21d8 <getDataString()+0x34c>)
    1ec0:	ed93 0a00 	vldr	s0, [r3]
    1ec4:	a808      	add	r0, sp, #32
    1ec6:	f00a ff53 	bl	cd70 <String::String(float, unsigned char)>
    1eca:	a908      	add	r1, sp, #32
    1ecc:	4630      	mov	r0, r6
    1ece:	f00a ff9b 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ed2:	4621      	mov	r1, r4
    1ed4:	f00a ffa0 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1ed8:	4606      	mov	r6, r0
									+ String(yaw_IMU)
    1eda:	2102      	movs	r1, #2
    1edc:	4bbf      	ldr	r3, [pc, #764]	; (21dc <getDataString()+0x350>)
    1ede:	ed93 0a00 	vldr	s0, [r3]
    1ee2:	a80c      	add	r0, sp, #48	; 0x30
    1ee4:	f00a ff44 	bl	cd70 <String::String(float, unsigned char)>
    1ee8:	a90c      	add	r1, sp, #48	; 0x30
    1eea:	4630      	mov	r0, r6
    1eec:	f00a ff8c 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ef0:	4621      	mov	r1, r4
    1ef2:	f00a ff91 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1ef6:	4606      	mov	r6, r0
									+ String(alpha)
    1ef8:	2102      	movs	r1, #2
    1efa:	4bb9      	ldr	r3, [pc, #740]	; (21e0 <getDataString()+0x354>)
    1efc:	ed93 0a00 	vldr	s0, [r3]
    1f00:	a810      	add	r0, sp, #64	; 0x40
    1f02:	f00a ff35 	bl	cd70 <String::String(float, unsigned char)>
    1f06:	a910      	add	r1, sp, #64	; 0x40
    1f08:	4630      	mov	r0, r6
    1f0a:	f00a ff7d 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f0e:	4621      	mov	r1, r4
    1f10:	f00a ff82 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1f14:	4606      	mov	r6, r0
									+ String(beta)
    1f16:	2102      	movs	r1, #2
    1f18:	4bb2      	ldr	r3, [pc, #712]	; (21e4 <getDataString()+0x358>)
    1f1a:	ed93 0a00 	vldr	s0, [r3]
    1f1e:	a814      	add	r0, sp, #80	; 0x50
    1f20:	f00a ff26 	bl	cd70 <String::String(float, unsigned char)>
    1f24:	a914      	add	r1, sp, #80	; 0x50
    1f26:	4630      	mov	r0, r6
    1f28:	f00a ff6e 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f2c:	4621      	mov	r1, r4
    1f2e:	f00a ff73 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1f32:	4606      	mov	r6, r0
									+ String(roll_des)
    1f34:	2102      	movs	r1, #2
    1f36:	4bac      	ldr	r3, [pc, #688]	; (21e8 <getDataString()+0x35c>)
    1f38:	ed93 0a00 	vldr	s0, [r3]
    1f3c:	a818      	add	r0, sp, #96	; 0x60
    1f3e:	f00a ff17 	bl	cd70 <String::String(float, unsigned char)>
    1f42:	a918      	add	r1, sp, #96	; 0x60
    1f44:	4630      	mov	r0, r6
    1f46:	f00a ff5f 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f4a:	4621      	mov	r1, r4
    1f4c:	f00a ff64 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1f50:	4606      	mov	r6, r0
									+ String(pitch_des)
    1f52:	2102      	movs	r1, #2
    1f54:	4ba5      	ldr	r3, [pc, #660]	; (21ec <getDataString()+0x360>)
    1f56:	ed93 0a00 	vldr	s0, [r3]
    1f5a:	a81c      	add	r0, sp, #112	; 0x70
    1f5c:	f00a ff08 	bl	cd70 <String::String(float, unsigned char)>
    1f60:	a91c      	add	r1, sp, #112	; 0x70
    1f62:	4630      	mov	r0, r6
    1f64:	f00a ff50 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f68:	4621      	mov	r1, r4
    1f6a:	f00a ff55 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1f6e:	4606      	mov	r6, r0
									+ String(yaw_des)
    1f70:	2102      	movs	r1, #2
    1f72:	4b9f      	ldr	r3, [pc, #636]	; (21f0 <getDataString()+0x364>)
    1f74:	ed93 0a00 	vldr	s0, [r3]
    1f78:	a820      	add	r0, sp, #128	; 0x80
    1f7a:	f00a fef9 	bl	cd70 <String::String(float, unsigned char)>
    1f7e:	a920      	add	r1, sp, #128	; 0x80
    1f80:	4630      	mov	r0, r6
    1f82:	f00a ff41 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f86:	4621      	mov	r1, r4
    1f88:	f00a ff46 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1f8c:	4606      	mov	r6, r0
									+ String(thro_des)
    1f8e:	2102      	movs	r1, #2
    1f90:	4b98      	ldr	r3, [pc, #608]	; (21f4 <getDataString()+0x368>)
    1f92:	ed93 0a00 	vldr	s0, [r3]
    1f96:	a824      	add	r0, sp, #144	; 0x90
    1f98:	f00a feea 	bl	cd70 <String::String(float, unsigned char)>
    1f9c:	a924      	add	r1, sp, #144	; 0x90
    1f9e:	4630      	mov	r0, r6
    1fa0:	f00a ff32 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fa4:	4621      	mov	r1, r4
    1fa6:	f00a ff37 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1faa:	4606      	mov	r6, r0
									+ String(roll_PID)
    1fac:	2102      	movs	r1, #2
    1fae:	4b92      	ldr	r3, [pc, #584]	; (21f8 <getDataString()+0x36c>)
    1fb0:	ed93 0a00 	vldr	s0, [r3]
    1fb4:	a828      	add	r0, sp, #160	; 0xa0
    1fb6:	f00a fedb 	bl	cd70 <String::String(float, unsigned char)>
    1fba:	a928      	add	r1, sp, #160	; 0xa0
    1fbc:	4630      	mov	r0, r6
    1fbe:	f00a ff23 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fc2:	4621      	mov	r1, r4
    1fc4:	f00a ff28 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1fc8:	4606      	mov	r6, r0
									+ String(pitch_PID)
    1fca:	2102      	movs	r1, #2
    1fcc:	4b8b      	ldr	r3, [pc, #556]	; (21fc <getDataString()+0x370>)
    1fce:	ed93 0a00 	vldr	s0, [r3]
    1fd2:	a82c      	add	r0, sp, #176	; 0xb0
    1fd4:	f00a fecc 	bl	cd70 <String::String(float, unsigned char)>
    1fd8:	a92c      	add	r1, sp, #176	; 0xb0
    1fda:	4630      	mov	r0, r6
    1fdc:	f00a ff14 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fe0:	4621      	mov	r1, r4
    1fe2:	f00a ff19 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    1fe6:	4606      	mov	r6, r0
									+ String(yaw_PID)
    1fe8:	2102      	movs	r1, #2
    1fea:	4b85      	ldr	r3, [pc, #532]	; (2200 <getDataString()+0x374>)
    1fec:	ed93 0a00 	vldr	s0, [r3]
    1ff0:	a830      	add	r0, sp, #192	; 0xc0
    1ff2:	f00a febd 	bl	cd70 <String::String(float, unsigned char)>
    1ff6:	a930      	add	r1, sp, #192	; 0xc0
    1ff8:	4630      	mov	r0, r6
    1ffa:	f00a ff05 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ffe:	4621      	mov	r1, r4
    2000:	f00a ff0a 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2004:	4606      	mov	r6, r0
									+ String(channel_1_pwm)
    2006:	220a      	movs	r2, #10
    2008:	4b7e      	ldr	r3, [pc, #504]	; (2204 <getDataString()+0x378>)
    200a:	6819      	ldr	r1, [r3, #0]
    200c:	a834      	add	r0, sp, #208	; 0xd0
    200e:	f00a fe9c 	bl	cd4a <String::String(int, unsigned char)>
    2012:	a934      	add	r1, sp, #208	; 0xd0
    2014:	4630      	mov	r0, r6
    2016:	f00a fef7 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    201a:	4621      	mov	r1, r4
    201c:	f00a fefc 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2020:	4606      	mov	r6, r0
									+ String(channel_2_pwm)
    2022:	220a      	movs	r2, #10
    2024:	4b78      	ldr	r3, [pc, #480]	; (2208 <getDataString()+0x37c>)
    2026:	6819      	ldr	r1, [r3, #0]
    2028:	a838      	add	r0, sp, #224	; 0xe0
    202a:	f00a fe8e 	bl	cd4a <String::String(int, unsigned char)>
    202e:	a938      	add	r1, sp, #224	; 0xe0
    2030:	4630      	mov	r0, r6
    2032:	f00a fee9 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2036:	4621      	mov	r1, r4
    2038:	f00a feee 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    203c:	4606      	mov	r6, r0
									+ String(channel_3_pwm)
    203e:	220a      	movs	r2, #10
    2040:	4b72      	ldr	r3, [pc, #456]	; (220c <getDataString()+0x380>)
    2042:	6819      	ldr	r1, [r3, #0]
    2044:	a83c      	add	r0, sp, #240	; 0xf0
    2046:	f00a fe80 	bl	cd4a <String::String(int, unsigned char)>
    204a:	a93c      	add	r1, sp, #240	; 0xf0
    204c:	4630      	mov	r0, r6
    204e:	f00a fedb 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2052:	4621      	mov	r1, r4
    2054:	f00a fee0 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2058:	4606      	mov	r6, r0
									+ String(channel_4_pwm)
    205a:	220a      	movs	r2, #10
    205c:	4b6c      	ldr	r3, [pc, #432]	; (2210 <getDataString()+0x384>)
    205e:	6819      	ldr	r1, [r3, #0]
    2060:	a840      	add	r0, sp, #256	; 0x100
    2062:	f00a fe72 	bl	cd4a <String::String(int, unsigned char)>
    2066:	a940      	add	r1, sp, #256	; 0x100
    2068:	4630      	mov	r0, r6
    206a:	f00a fecd 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    206e:	4621      	mov	r1, r4
    2070:	f00a fed2 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2074:	4606      	mov	r6, r0
									+ String(channel_5_pwm)
    2076:	220a      	movs	r2, #10
    2078:	4b66      	ldr	r3, [pc, #408]	; (2214 <getDataString()+0x388>)
    207a:	6819      	ldr	r1, [r3, #0]
    207c:	a844      	add	r0, sp, #272	; 0x110
    207e:	f00a fe64 	bl	cd4a <String::String(int, unsigned char)>
    2082:	a944      	add	r1, sp, #272	; 0x110
    2084:	4630      	mov	r0, r6
    2086:	f00a febf 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    208a:	4621      	mov	r1, r4
    208c:	f00a fec4 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2090:	4606      	mov	r6, r0
									+ String(channel_6_pwm)
    2092:	220a      	movs	r2, #10
    2094:	4b60      	ldr	r3, [pc, #384]	; (2218 <getDataString()+0x38c>)
    2096:	6819      	ldr	r1, [r3, #0]
    2098:	a848      	add	r0, sp, #288	; 0x120
    209a:	f00a fe56 	bl	cd4a <String::String(int, unsigned char)>
    209e:	a948      	add	r1, sp, #288	; 0x120
    20a0:	4630      	mov	r0, r6
    20a2:	f00a feb1 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    20a6:	4621      	mov	r1, r4
    20a8:	f00a feb6 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    20ac:	4606      	mov	r6, r0
									+ String(channel_7_pwm)
    20ae:	220a      	movs	r2, #10
    20b0:	4b5a      	ldr	r3, [pc, #360]	; (221c <getDataString()+0x390>)
    20b2:	6819      	ldr	r1, [r3, #0]
    20b4:	a84c      	add	r0, sp, #304	; 0x130
    20b6:	f00a fe48 	bl	cd4a <String::String(int, unsigned char)>
    20ba:	a94c      	add	r1, sp, #304	; 0x130
    20bc:	4630      	mov	r0, r6
    20be:	f00a fea3 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    20c2:	4621      	mov	r1, r4
    20c4:	f00a fea8 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    20c8:	4606      	mov	r6, r0
									+ String(channel_8_pwm)
    20ca:	220a      	movs	r2, #10
    20cc:	4b54      	ldr	r3, [pc, #336]	; (2220 <getDataString()+0x394>)
    20ce:	6819      	ldr	r1, [r3, #0]
    20d0:	a850      	add	r0, sp, #320	; 0x140
    20d2:	f00a fe3a 	bl	cd4a <String::String(int, unsigned char)>
    20d6:	a950      	add	r1, sp, #320	; 0x140
    20d8:	4630      	mov	r0, r6
    20da:	f00a fe95 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    20de:	4621      	mov	r1, r4
    20e0:	f00a fe9a 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    20e4:	4606      	mov	r6, r0
									+ String(channel_9_pwm)
    20e6:	220a      	movs	r2, #10
    20e8:	4b4e      	ldr	r3, [pc, #312]	; (2224 <getDataString()+0x398>)
    20ea:	6819      	ldr	r1, [r3, #0]
    20ec:	a854      	add	r0, sp, #336	; 0x150
    20ee:	f00a fe2c 	bl	cd4a <String::String(int, unsigned char)>
    20f2:	a954      	add	r1, sp, #336	; 0x150
    20f4:	4630      	mov	r0, r6
    20f6:	f00a fe87 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    20fa:	4621      	mov	r1, r4
    20fc:	f00a fe8c 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2100:	4606      	mov	r6, r0
									+ String(channel_10_pwm)
    2102:	220a      	movs	r2, #10
    2104:	4b48      	ldr	r3, [pc, #288]	; (2228 <getDataString()+0x39c>)
    2106:	6819      	ldr	r1, [r3, #0]
    2108:	a858      	add	r0, sp, #352	; 0x160
    210a:	f00a fe1e 	bl	cd4a <String::String(int, unsigned char)>
    210e:	a958      	add	r1, sp, #352	; 0x160
    2110:	4630      	mov	r0, r6
    2112:	f00a fe79 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2116:	4621      	mov	r1, r4
    2118:	f00a fe7e 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    211c:	4606      	mov	r6, r0
									+ String(channel_11_pwm)
    211e:	220a      	movs	r2, #10
    2120:	4b42      	ldr	r3, [pc, #264]	; (222c <getDataString()+0x3a0>)
    2122:	6819      	ldr	r1, [r3, #0]
    2124:	a85c      	add	r0, sp, #368	; 0x170
    2126:	f00a fe10 	bl	cd4a <String::String(int, unsigned char)>
    212a:	a95c      	add	r1, sp, #368	; 0x170
    212c:	4630      	mov	r0, r6
    212e:	f00a fe6b 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2132:	4621      	mov	r1, r4
    2134:	f00a fe70 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2138:	4606      	mov	r6, r0
									+ String(channel_12_pwm)
    213a:	220a      	movs	r2, #10
    213c:	4b3c      	ldr	r3, [pc, #240]	; (2230 <getDataString()+0x3a4>)
    213e:	6819      	ldr	r1, [r3, #0]
    2140:	a860      	add	r0, sp, #384	; 0x180
    2142:	f00a fe02 	bl	cd4a <String::String(int, unsigned char)>
    2146:	a960      	add	r1, sp, #384	; 0x180
    2148:	4630      	mov	r0, r6
    214a:	f00a fe5d 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    214e:	4621      	mov	r1, r4
    2150:	f00a fe62 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2154:	4606      	mov	r6, r0
									+ String(channel_13_pwm)
    2156:	220a      	movs	r2, #10
    2158:	4b36      	ldr	r3, [pc, #216]	; (2234 <getDataString()+0x3a8>)
    215a:	6819      	ldr	r1, [r3, #0]
    215c:	a864      	add	r0, sp, #400	; 0x190
    215e:	f00a fdf4 	bl	cd4a <String::String(int, unsigned char)>
    2162:	a964      	add	r1, sp, #400	; 0x190
    2164:	4630      	mov	r0, r6
    2166:	f00a fe4f 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    216a:	4621      	mov	r1, r4
    216c:	f00a fe54 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2170:	4606      	mov	r6, r0
									+ String(GyroX)
    2172:	2102      	movs	r1, #2
    2174:	4b30      	ldr	r3, [pc, #192]	; (2238 <getDataString()+0x3ac>)
    2176:	ed93 0a00 	vldr	s0, [r3]
    217a:	a868      	add	r0, sp, #416	; 0x1a0
    217c:	f00a fdf8 	bl	cd70 <String::String(float, unsigned char)>
    2180:	a968      	add	r1, sp, #416	; 0x1a0
    2182:	4630      	mov	r0, r6
    2184:	f00a fe40 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2188:	4621      	mov	r1, r4
    218a:	f00a fe45 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    218e:	4606      	mov	r6, r0
									+ String(GyroY)
    2190:	2102      	movs	r1, #2
    2192:	4b2a      	ldr	r3, [pc, #168]	; (223c <getDataString()+0x3b0>)
    2194:	ed93 0a00 	vldr	s0, [r3]
    2198:	a86c      	add	r0, sp, #432	; 0x1b0
    219a:	f00a fde9 	bl	cd70 <String::String(float, unsigned char)>
    219e:	a96c      	add	r1, sp, #432	; 0x1b0
    21a0:	4630      	mov	r0, r6
    21a2:	f00a fe31 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    21a6:	4621      	mov	r1, r4
    21a8:	f00a fe36 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    21ac:	4606      	mov	r6, r0
									+ String(GyroZ)
    21ae:	2102      	movs	r1, #2
    21b0:	4b23      	ldr	r3, [pc, #140]	; (2240 <getDataString()+0x3b4>)
    21b2:	ed93 0a00 	vldr	s0, [r3]
    21b6:	a870      	add	r0, sp, #448	; 0x1c0
    21b8:	f00a fdda 	bl	cd70 <String::String(float, unsigned char)>
    21bc:	a970      	add	r1, sp, #448	; 0x1c0
    21be:	4630      	mov	r0, r6
    21c0:	f00a fe22 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    21c4:	4621      	mov	r1, r4
    21c6:	f00a fe27 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    21ca:	4606      	mov	r6, r0
									+ String(AccX)
    21cc:	2102      	movs	r1, #2
    21ce:	e039      	b.n	2244 <getDataString()+0x3b8>
    21d0:	20005170 	.word	0x20005170
    21d4:	20001d10 	.word	0x20001d10
    21d8:	20005144 	.word	0x20005144
    21dc:	200053a8 	.word	0x200053a8
    21e0:	20004fd4 	.word	0x20004fd4
    21e4:	20004fe0 	.word	0x20004fe0
    21e8:	20005178 	.word	0x20005178
    21ec:	2000514c 	.word	0x2000514c
    21f0:	200053b0 	.word	0x200053b0
    21f4:	20005390 	.word	0x20005390
    21f8:	20005174 	.word	0x20005174
    21fc:	20005148 	.word	0x20005148
    2200:	200053ac 	.word	0x200053ac
    2204:	20005014 	.word	0x20005014
    2208:	20005020 	.word	0x20005020
    220c:	2000502c 	.word	0x2000502c
    2210:	20005038 	.word	0x20005038
    2214:	20005044 	.word	0x20005044
    2218:	20005048 	.word	0x20005048
    221c:	2000504c 	.word	0x2000504c
    2220:	20005050 	.word	0x20005050
    2224:	20005054 	.word	0x20005054
    2228:	20005004 	.word	0x20005004
    222c:	20005008 	.word	0x20005008
    2230:	2000500c 	.word	0x2000500c
    2234:	20005010 	.word	0x20005010
    2238:	200040c4 	.word	0x200040c4
    223c:	200040cc 	.word	0x200040cc
    2240:	200040d4 	.word	0x200040d4
    2244:	4bc5      	ldr	r3, [pc, #788]	; (255c <getDataString()+0x6d0>)
    2246:	ed93 0a00 	vldr	s0, [r3]
    224a:	a874      	add	r0, sp, #464	; 0x1d0
    224c:	f00a fd90 	bl	cd70 <String::String(float, unsigned char)>
    2250:	a974      	add	r1, sp, #464	; 0x1d0
    2252:	4630      	mov	r0, r6
    2254:	f00a fdd8 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2258:	4621      	mov	r1, r4
    225a:	f00a fddd 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    225e:	4606      	mov	r6, r0
									+ String(AccY)
    2260:	2102      	movs	r1, #2
    2262:	4bbf      	ldr	r3, [pc, #764]	; (2560 <getDataString()+0x6d4>)
    2264:	ed93 0a00 	vldr	s0, [r3]
    2268:	a878      	add	r0, sp, #480	; 0x1e0
    226a:	f00a fd81 	bl	cd70 <String::String(float, unsigned char)>
    226e:	a978      	add	r1, sp, #480	; 0x1e0
    2270:	4630      	mov	r0, r6
    2272:	f00a fdc9 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2276:	4621      	mov	r1, r4
    2278:	f00a fdce 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    227c:	4606      	mov	r6, r0
									+ String(AccZ)
    227e:	2102      	movs	r1, #2
    2280:	4bb8      	ldr	r3, [pc, #736]	; (2564 <getDataString()+0x6d8>)
    2282:	ed93 0a00 	vldr	s0, [r3]
    2286:	a87c      	add	r0, sp, #496	; 0x1f0
    2288:	f00a fd72 	bl	cd70 <String::String(float, unsigned char)>
    228c:	a97c      	add	r1, sp, #496	; 0x1f0
    228e:	4630      	mov	r0, r6
    2290:	f00a fdba 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2294:	4621      	mov	r1, r4
    2296:	f00a fdbf 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    229a:	4606      	mov	r6, r0
									+ String(s1_command_scaled)
    229c:	2102      	movs	r1, #2
    229e:	4bb2      	ldr	r3, [pc, #712]	; (2568 <getDataString()+0x6dc>)
    22a0:	ed93 0a00 	vldr	s0, [r3]
    22a4:	a880      	add	r0, sp, #512	; 0x200
    22a6:	f00a fd63 	bl	cd70 <String::String(float, unsigned char)>
    22aa:	a980      	add	r1, sp, #512	; 0x200
    22ac:	4630      	mov	r0, r6
    22ae:	f00a fdab 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22b2:	4621      	mov	r1, r4
    22b4:	f00a fdb0 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    22b8:	4606      	mov	r6, r0
									+ String(s2_command_scaled)
    22ba:	2102      	movs	r1, #2
    22bc:	4bab      	ldr	r3, [pc, #684]	; (256c <getDataString()+0x6e0>)
    22be:	ed93 0a00 	vldr	s0, [r3]
    22c2:	a884      	add	r0, sp, #528	; 0x210
    22c4:	f00a fd54 	bl	cd70 <String::String(float, unsigned char)>
    22c8:	a984      	add	r1, sp, #528	; 0x210
    22ca:	4630      	mov	r0, r6
    22cc:	f00a fd9c 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22d0:	4621      	mov	r1, r4
    22d2:	f00a fda1 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    22d6:	4606      	mov	r6, r0
									+ String(s3_command_scaled)
    22d8:	2102      	movs	r1, #2
    22da:	4ba5      	ldr	r3, [pc, #660]	; (2570 <getDataString()+0x6e4>)
    22dc:	ed93 0a00 	vldr	s0, [r3]
    22e0:	a888      	add	r0, sp, #544	; 0x220
    22e2:	f00a fd45 	bl	cd70 <String::String(float, unsigned char)>
    22e6:	a988      	add	r1, sp, #544	; 0x220
    22e8:	4630      	mov	r0, r6
    22ea:	f00a fd8d 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    22ee:	4621      	mov	r1, r4
    22f0:	f00a fd92 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    22f4:	4606      	mov	r6, r0
									+ String(s4_command_scaled)
    22f6:	2102      	movs	r1, #2
    22f8:	4b9e      	ldr	r3, [pc, #632]	; (2574 <getDataString()+0x6e8>)
    22fa:	ed93 0a00 	vldr	s0, [r3]
    22fe:	a88c      	add	r0, sp, #560	; 0x230
    2300:	f00a fd36 	bl	cd70 <String::String(float, unsigned char)>
    2304:	a98c      	add	r1, sp, #560	; 0x230
    2306:	4630      	mov	r0, r6
    2308:	f00a fd7e 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    230c:	4621      	mov	r1, r4
    230e:	f00a fd83 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2312:	4606      	mov	r6, r0
									+ String(Kp_roll_angle)
    2314:	2102      	movs	r1, #2
    2316:	4b98      	ldr	r3, [pc, #608]	; (2578 <getDataString()+0x6ec>)
    2318:	ed93 0a00 	vldr	s0, [r3]
    231c:	a890      	add	r0, sp, #576	; 0x240
    231e:	f00a fd27 	bl	cd70 <String::String(float, unsigned char)>
    2322:	a990      	add	r1, sp, #576	; 0x240
    2324:	4630      	mov	r0, r6
    2326:	f00a fd6f 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    232a:	4621      	mov	r1, r4
    232c:	f00a fd74 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2330:	4606      	mov	r6, r0
									+ String(Ki_roll_angle)
    2332:	2102      	movs	r1, #2
    2334:	4b91      	ldr	r3, [pc, #580]	; (257c <getDataString()+0x6f0>)
    2336:	ed93 0a00 	vldr	s0, [r3]
    233a:	a894      	add	r0, sp, #592	; 0x250
    233c:	f00a fd18 	bl	cd70 <String::String(float, unsigned char)>
    2340:	a994      	add	r1, sp, #592	; 0x250
    2342:	4630      	mov	r0, r6
    2344:	f00a fd60 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2348:	4621      	mov	r1, r4
    234a:	f00a fd65 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    234e:	4606      	mov	r6, r0
									+ String(Kd_roll_angle)	
    2350:	2102      	movs	r1, #2
    2352:	4b8b      	ldr	r3, [pc, #556]	; (2580 <getDataString()+0x6f4>)
    2354:	ed93 0a00 	vldr	s0, [r3]
    2358:	a898      	add	r0, sp, #608	; 0x260
    235a:	f00a fd09 	bl	cd70 <String::String(float, unsigned char)>
    235e:	a998      	add	r1, sp, #608	; 0x260
    2360:	4630      	mov	r0, r6
    2362:	f00a fd51 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2366:	4621      	mov	r1, r4
    2368:	f00a fd56 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    236c:	4606      	mov	r6, r0
									+ String(Kp_pitch_angle)
    236e:	2102      	movs	r1, #2
    2370:	4b84      	ldr	r3, [pc, #528]	; (2584 <getDataString()+0x6f8>)
    2372:	ed93 0a00 	vldr	s0, [r3]
    2376:	a89c      	add	r0, sp, #624	; 0x270
    2378:	f00a fcfa 	bl	cd70 <String::String(float, unsigned char)>
    237c:	a99c      	add	r1, sp, #624	; 0x270
    237e:	4630      	mov	r0, r6
    2380:	f00a fd42 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    2384:	4621      	mov	r1, r4
    2386:	f00a fd47 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    238a:	4606      	mov	r6, r0
									+ String(Ki_pitch_angle)
    238c:	2102      	movs	r1, #2
    238e:	4b7e      	ldr	r3, [pc, #504]	; (2588 <getDataString()+0x6fc>)
    2390:	ed93 0a00 	vldr	s0, [r3]
    2394:	a8a0      	add	r0, sp, #640	; 0x280
    2396:	f00a fceb 	bl	cd70 <String::String(float, unsigned char)>
    239a:	a9a0      	add	r1, sp, #640	; 0x280
    239c:	4630      	mov	r0, r6
    239e:	f00a fd33 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23a2:	4621      	mov	r1, r4
    23a4:	f00a fd38 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    23a8:	4606      	mov	r6, r0
									+ String(Kd_pitch_angle)	
    23aa:	2102      	movs	r1, #2
    23ac:	4b77      	ldr	r3, [pc, #476]	; (258c <getDataString()+0x700>)
    23ae:	ed93 0a00 	vldr	s0, [r3]
    23b2:	a8a4      	add	r0, sp, #656	; 0x290
    23b4:	f00a fcdc 	bl	cd70 <String::String(float, unsigned char)>
    23b8:	a9a4      	add	r1, sp, #656	; 0x290
    23ba:	4630      	mov	r0, r6
    23bc:	f00a fd24 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23c0:	4621      	mov	r1, r4
    23c2:	f00a fd29 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    23c6:	4606      	mov	r6, r0
									+ String(Kp_yaw)
    23c8:	2102      	movs	r1, #2
    23ca:	4b71      	ldr	r3, [pc, #452]	; (2590 <getDataString()+0x704>)
    23cc:	ed93 0a00 	vldr	s0, [r3]
    23d0:	a8a8      	add	r0, sp, #672	; 0x2a0
    23d2:	f00a fccd 	bl	cd70 <String::String(float, unsigned char)>
    23d6:	a9a8      	add	r1, sp, #672	; 0x2a0
    23d8:	4630      	mov	r0, r6
    23da:	f00a fd15 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23de:	4621      	mov	r1, r4
    23e0:	f00a fd1a 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    23e4:	4606      	mov	r6, r0
									+ String(Ki_yaw)
    23e6:	2102      	movs	r1, #2
    23e8:	4b6a      	ldr	r3, [pc, #424]	; (2594 <getDataString()+0x708>)
    23ea:	ed93 0a00 	vldr	s0, [r3]
    23ee:	a8ac      	add	r0, sp, #688	; 0x2b0
    23f0:	f00a fcbe 	bl	cd70 <String::String(float, unsigned char)>
    23f4:	a9ac      	add	r1, sp, #688	; 0x2b0
    23f6:	4630      	mov	r0, r6
    23f8:	f00a fd06 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    23fc:	4621      	mov	r1, r4
    23fe:	f00a fd0b 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2402:	4606      	mov	r6, r0
									+ String(Kd_yaw)
    2404:	2102      	movs	r1, #2
    2406:	4b64      	ldr	r3, [pc, #400]	; (2598 <getDataString()+0x70c>)
    2408:	ed93 0a00 	vldr	s0, [r3]
    240c:	a8b0      	add	r0, sp, #704	; 0x2c0
    240e:	f00a fcaf 	bl	cd70 <String::String(float, unsigned char)>
    2412:	a9b0      	add	r1, sp, #704	; 0x2c0
    2414:	4630      	mov	r0, r6
    2416:	f00a fcf7 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
									+ ","
    241a:	4621      	mov	r1, r4
    241c:	f00a fcfc 	bl	ce18 <operator+(StringSumHelper const&, char const*)>
    2420:	4604      	mov	r4, r0
									+ String(failureFlag);	
    2422:	220a      	movs	r2, #10
    2424:	4b5d      	ldr	r3, [pc, #372]	; (259c <getDataString()+0x710>)
    2426:	7819      	ldrb	r1, [r3, #0]
    2428:	a8b4      	add	r0, sp, #720	; 0x2d0
    242a:	f00a fc8e 	bl	cd4a <String::String(int, unsigned char)>
    242e:	a9b4      	add	r1, sp, #720	; 0x2d0
    2430:	4620      	mov	r0, r4
    2432:	f00a fce9 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
    2436:	4601      	mov	r1, r0
    2438:	4628      	mov	r0, r5
    243a:	f00a fc58 	bl	ccee <String::operator=(String const&)>
    243e:	a8b4      	add	r0, sp, #720	; 0x2d0
    2440:	f00a fbe4 	bl	cc0c <String::~String()>
									+ String(Kd_yaw)
    2444:	a8b0      	add	r0, sp, #704	; 0x2c0
    2446:	f00a fbe1 	bl	cc0c <String::~String()>
									+ String(Ki_yaw)
    244a:	a8ac      	add	r0, sp, #688	; 0x2b0
    244c:	f00a fbde 	bl	cc0c <String::~String()>
									+ String(Kp_yaw)
    2450:	a8a8      	add	r0, sp, #672	; 0x2a0
    2452:	f00a fbdb 	bl	cc0c <String::~String()>
									+ String(Kd_pitch_angle)	
    2456:	a8a4      	add	r0, sp, #656	; 0x290
    2458:	f00a fbd8 	bl	cc0c <String::~String()>
									+ String(Ki_pitch_angle)
    245c:	a8a0      	add	r0, sp, #640	; 0x280
    245e:	f00a fbd5 	bl	cc0c <String::~String()>
									+ String(Kp_pitch_angle)
    2462:	a89c      	add	r0, sp, #624	; 0x270
    2464:	f00a fbd2 	bl	cc0c <String::~String()>
									+ String(Kd_roll_angle)	
    2468:	a898      	add	r0, sp, #608	; 0x260
    246a:	f00a fbcf 	bl	cc0c <String::~String()>
									+ String(Ki_roll_angle)
    246e:	a894      	add	r0, sp, #592	; 0x250
    2470:	f00a fbcc 	bl	cc0c <String::~String()>
									+ String(Kp_roll_angle)
    2474:	a890      	add	r0, sp, #576	; 0x240
    2476:	f00a fbc9 	bl	cc0c <String::~String()>
									+ String(s4_command_scaled)
    247a:	a88c      	add	r0, sp, #560	; 0x230
    247c:	f00a fbc6 	bl	cc0c <String::~String()>
									+ String(s3_command_scaled)
    2480:	a888      	add	r0, sp, #544	; 0x220
    2482:	f00a fbc3 	bl	cc0c <String::~String()>
									+ String(s2_command_scaled)
    2486:	a884      	add	r0, sp, #528	; 0x210
    2488:	f00a fbc0 	bl	cc0c <String::~String()>
									+ String(s1_command_scaled)
    248c:	a880      	add	r0, sp, #512	; 0x200
    248e:	f00a fbbd 	bl	cc0c <String::~String()>
									+ String(AccZ)
    2492:	a87c      	add	r0, sp, #496	; 0x1f0
    2494:	f00a fbba 	bl	cc0c <String::~String()>
									+ String(AccY)
    2498:	a878      	add	r0, sp, #480	; 0x1e0
    249a:	f00a fbb7 	bl	cc0c <String::~String()>
									+ String(AccX)
    249e:	a874      	add	r0, sp, #464	; 0x1d0
    24a0:	f00a fbb4 	bl	cc0c <String::~String()>
									+ String(GyroZ)
    24a4:	a870      	add	r0, sp, #448	; 0x1c0
    24a6:	f00a fbb1 	bl	cc0c <String::~String()>
									+ String(GyroY)
    24aa:	a86c      	add	r0, sp, #432	; 0x1b0
    24ac:	f00a fbae 	bl	cc0c <String::~String()>
									+ String(GyroX)
    24b0:	a868      	add	r0, sp, #416	; 0x1a0
    24b2:	f00a fbab 	bl	cc0c <String::~String()>
									+ String(channel_13_pwm)
    24b6:	a864      	add	r0, sp, #400	; 0x190
    24b8:	f00a fba8 	bl	cc0c <String::~String()>
									+ String(channel_12_pwm)
    24bc:	a860      	add	r0, sp, #384	; 0x180
    24be:	f00a fba5 	bl	cc0c <String::~String()>
									+ String(channel_11_pwm)
    24c2:	a85c      	add	r0, sp, #368	; 0x170
    24c4:	f00a fba2 	bl	cc0c <String::~String()>
									+ String(channel_10_pwm)
    24c8:	a858      	add	r0, sp, #352	; 0x160
    24ca:	f00a fb9f 	bl	cc0c <String::~String()>
									+ String(channel_9_pwm)
    24ce:	a854      	add	r0, sp, #336	; 0x150
    24d0:	f00a fb9c 	bl	cc0c <String::~String()>
									+ String(channel_8_pwm)
    24d4:	a850      	add	r0, sp, #320	; 0x140
    24d6:	f00a fb99 	bl	cc0c <String::~String()>
									+ String(channel_7_pwm)
    24da:	a84c      	add	r0, sp, #304	; 0x130
    24dc:	f00a fb96 	bl	cc0c <String::~String()>
									+ String(channel_6_pwm)
    24e0:	a848      	add	r0, sp, #288	; 0x120
    24e2:	f00a fb93 	bl	cc0c <String::~String()>
									+ String(channel_5_pwm)
    24e6:	a844      	add	r0, sp, #272	; 0x110
    24e8:	f00a fb90 	bl	cc0c <String::~String()>
									+ String(channel_4_pwm)
    24ec:	a840      	add	r0, sp, #256	; 0x100
    24ee:	f00a fb8d 	bl	cc0c <String::~String()>
									+ String(channel_3_pwm)
    24f2:	a83c      	add	r0, sp, #240	; 0xf0
    24f4:	f00a fb8a 	bl	cc0c <String::~String()>
									+ String(channel_2_pwm)
    24f8:	a838      	add	r0, sp, #224	; 0xe0
    24fa:	f00a fb87 	bl	cc0c <String::~String()>
									+ String(channel_1_pwm)
    24fe:	a834      	add	r0, sp, #208	; 0xd0
    2500:	f00a fb84 	bl	cc0c <String::~String()>
									+ String(yaw_PID)
    2504:	a830      	add	r0, sp, #192	; 0xc0
    2506:	f00a fb81 	bl	cc0c <String::~String()>
									+ String(pitch_PID)
    250a:	a82c      	add	r0, sp, #176	; 0xb0
    250c:	f00a fb7e 	bl	cc0c <String::~String()>
									+ String(roll_PID)
    2510:	a828      	add	r0, sp, #160	; 0xa0
    2512:	f00a fb7b 	bl	cc0c <String::~String()>
									+ String(thro_des)
    2516:	a824      	add	r0, sp, #144	; 0x90
    2518:	f00a fb78 	bl	cc0c <String::~String()>
									+ String(yaw_des)
    251c:	a820      	add	r0, sp, #128	; 0x80
    251e:	f00a fb75 	bl	cc0c <String::~String()>
									+ String(pitch_des)
    2522:	a81c      	add	r0, sp, #112	; 0x70
    2524:	f00a fb72 	bl	cc0c <String::~String()>
									+ String(roll_des)
    2528:	a818      	add	r0, sp, #96	; 0x60
    252a:	f00a fb6f 	bl	cc0c <String::~String()>
									+ String(beta)
    252e:	a814      	add	r0, sp, #80	; 0x50
    2530:	f00a fb6c 	bl	cc0c <String::~String()>
									+ String(alpha)
    2534:	a810      	add	r0, sp, #64	; 0x40
    2536:	f00a fb69 	bl	cc0c <String::~String()>
									+ String(yaw_IMU)
    253a:	a80c      	add	r0, sp, #48	; 0x30
    253c:	f00a fb66 	bl	cc0c <String::~String()>
									+ String(pitch_IMU)
    2540:	a808      	add	r0, sp, #32
    2542:	f00a fb63 	bl	cc0c <String::~String()>
class StringSumHelper : public String
    2546:	4668      	mov	r0, sp
    2548:	f00a fb60 	bl	cc0c <String::~String()>
	csvDataString = String(roll_IMU)
    254c:	a804      	add	r0, sp, #16
    254e:	f00a fb5d 	bl	cc0c <String::~String()>
	return csvDataString;
}
    2552:	4628      	mov	r0, r5
    2554:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    2558:	bd70      	pop	{r4, r5, r6, pc}
    255a:	bf00      	nop
    255c:	20004088 	.word	0x20004088
    2560:	20004090 	.word	0x20004090
    2564:	20004098 	.word	0x20004098
    2568:	200051b4 	.word	0x200051b4
    256c:	200051bc 	.word	0x200051bc
    2570:	200051c4 	.word	0x200051c4
    2574:	200051cc 	.word	0x200051cc
    2578:	20004114 	.word	0x20004114
    257c:	2000410c 	.word	0x2000410c
    2580:	20004104 	.word	0x20004104
    2584:	20004110 	.word	0x20004110
    2588:	20004108 	.word	0x20004108
    258c:	20004100 	.word	0x20004100
    2590:	2000335c 	.word	0x2000335c
    2594:	20003354 	.word	0x20003354
    2598:	2000334c 	.word	0x2000334c
    259c:	200053cd 	.word	0x200053cd

000025a0 <invSqrt(float)>:
  unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
  float tmp = *(float*)&i;
  float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
  return y;
  */
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    25a0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    25a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    25a8:	d406      	bmi.n	25b8 <invSqrt(float)+0x18>
    25aa:	eef1 7ac0 	vsqrt.f32	s15, s0
}
    25ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    25b2:	ee80 0a27 	vdiv.f32	s0, s0, s15
    25b6:	4770      	bx	lr
float invSqrt(float x) {
    25b8:	b508      	push	{r3, lr}
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    25ba:	f00c fe07 	bl	f1cc <sqrtf>
    25be:	eef0 7a40 	vmov.f32	s15, s0
}
    25c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    25c6:	ee80 0a27 	vdiv.f32	s0, s0, s15
    25ca:	bd08      	pop	{r3, pc}
    25cc:	0000      	movs	r0, r0
	...

000025d0 <Madgwick6DOF(float, float, float, float, float, float, float)>:
void Madgwick6DOF(float gx, float gy, float gz, float ax, float ay, float az, float invSampleFreq) {
    25d0:	b508      	push	{r3, lr}
    25d2:	ed2d 8b0e 	vpush	{d8-d14}
    25d6:	eeb0 ba61 	vmov.f32	s22, s3
    25da:	eef0 8a42 	vmov.f32	s17, s4
    25de:	eeb0 ea62 	vmov.f32	s28, s5
    25e2:	eeb0 da43 	vmov.f32	s26, s6
  gx *= 0.0174533f;
    25e6:	eddf 7acc 	vldr	s15, [pc, #816]	; 2918 <Madgwick6DOF(float, float, float, float, float, float, float)+0x348>
    25ea:	ee20 0a27 	vmul.f32	s0, s0, s15
  gy *= 0.0174533f;
    25ee:	ee60 0aa7 	vmul.f32	s1, s1, s15
  gz *= 0.0174533f;
    25f2:	ee21 1a27 	vmul.f32	s2, s2, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    25f6:	4bc9      	ldr	r3, [pc, #804]	; (291c <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    25f8:	ed93 ca00 	vldr	s24, [r3]
    25fc:	4bc8      	ldr	r3, [pc, #800]	; (2920 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    25fe:	edd3 ba00 	vldr	s23, [r3]
    2602:	4bc8      	ldr	r3, [pc, #800]	; (2924 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    2604:	edd3 ca00 	vldr	s25, [r3]
    2608:	ee2c aa40 	vnmul.f32	s20, s24, s0
    260c:	ee6b 7aa0 	vmul.f32	s15, s23, s1
    2610:	ee3a aa67 	vsub.f32	s20, s20, s15
    2614:	ee6c 7a81 	vmul.f32	s15, s25, s2
    2618:	ee3a aa67 	vsub.f32	s20, s20, s15
    261c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2620:	ee2a aa27 	vmul.f32	s20, s20, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    2624:	4bc0      	ldr	r3, [pc, #768]	; (2928 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    2626:	edd3 da00 	vldr	s27, [r3]
    262a:	ee6d 9a80 	vmul.f32	s19, s27, s0
    262e:	ee2b 7a81 	vmul.f32	s14, s23, s2
    2632:	ee79 9a87 	vadd.f32	s19, s19, s14
    2636:	ee2c 7aa0 	vmul.f32	s14, s25, s1
    263a:	ee79 9ac7 	vsub.f32	s19, s19, s14
    263e:	ee69 9aa7 	vmul.f32	s19, s19, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    2642:	ee6d aaa0 	vmul.f32	s21, s27, s1
    2646:	ee2c 7a01 	vmul.f32	s14, s24, s2
    264a:	ee7a aac7 	vsub.f32	s21, s21, s14
    264e:	ee2c 7a80 	vmul.f32	s14, s25, s0
    2652:	ee7a aa87 	vadd.f32	s21, s21, s14
    2656:	ee6a aaa7 	vmul.f32	s21, s21, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    265a:	ee2d 9a81 	vmul.f32	s18, s27, s2
    265e:	ee6c 0a20 	vmul.f32	s1, s24, s1
    2662:	ee39 9a20 	vadd.f32	s18, s18, s1
    2666:	ee2b 0a80 	vmul.f32	s0, s23, s0
    266a:	ee39 9a40 	vsub.f32	s18, s18, s0
    266e:	ee29 9a27 	vmul.f32	s18, s18, s15
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    2672:	eeb5 2a40 	vcmp.f32	s4, #0.0
    2676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    267a:	bf14      	ite	ne
    267c:	2301      	movne	r3, #1
    267e:	2300      	moveq	r3, #0
    2680:	eef5 2a40 	vcmp.f32	s5, #0.0
    2684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2688:	bf18      	it	ne
    268a:	f043 0301 	orrne.w	r3, r3, #1
    268e:	b92b      	cbnz	r3, 269c <Madgwick6DOF(float, float, float, float, float, float, float)+0xcc>
    2690:	eef5 1a40 	vcmp.f32	s3, #0.0
    2694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2698:	f000 80b5 	beq.w	2806 <Madgwick6DOF(float, float, float, float, float, float, float)+0x236>
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    269c:	ee6b 7a0b 	vmul.f32	s15, s22, s22
    26a0:	ee28 7aa8 	vmul.f32	s14, s17, s17
    26a4:	ee77 7a87 	vadd.f32	s15, s15, s14
    26a8:	ee2e 0a0e 	vmul.f32	s0, s28, s28
    26ac:	ee37 0a80 	vadd.f32	s0, s15, s0
    26b0:	f7ff ff76 	bl	25a0 <invSqrt(float)>
    ax *= recipNorm;
    26b4:	ee2b ba00 	vmul.f32	s22, s22, s0
    ay *= recipNorm;
    26b8:	ee28 6a80 	vmul.f32	s12, s17, s0
    az *= recipNorm;
    26bc:	ee2e 0a00 	vmul.f32	s0, s28, s0
    _2q0 = 2.0f * q0;
    26c0:	ee3d 2aad 	vadd.f32	s4, s27, s27
    _2q1 = 2.0f * q1;
    26c4:	ee7c 4a0c 	vadd.f32	s9, s24, s24
    _2q2 = 2.0f * q2;
    26c8:	ee3b 5aab 	vadd.f32	s10, s23, s23
    _2q3 = 2.0f * q3;
    26cc:	ee3c 3aac 	vadd.f32	s6, s25, s25
    _4q0 = 4.0f * q0;
    26d0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    26d4:	ee6d 7aa5 	vmul.f32	s15, s27, s11
    _4q1 = 4.0f * q1;
    26d8:	ee6c 1a25 	vmul.f32	s3, s24, s11
    _4q2 = 4.0f * q2;
    26dc:	ee2b 4aa5 	vmul.f32	s8, s23, s11
    _8q1 = 8.0f * q1;
    26e0:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    26e4:	ee2c 1a23 	vmul.f32	s2, s24, s7
    _8q2 = 8.0f * q2;
    26e8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    q1q1 = q1 * q1;
    26ec:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    q2q2 = q2 * q2;
    26f0:	ee6b 6aab 	vmul.f32	s13, s23, s23
    q3q3 = q3 * q3;
    26f4:	ee6c 2aac 	vmul.f32	s5, s25, s25
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    26f8:	ee67 eaa6 	vmul.f32	s29, s15, s13
    26fc:	ee6b 0a05 	vmul.f32	s1, s22, s10
    2700:	ee7e eaa0 	vadd.f32	s29, s29, s1
    2704:	ee67 7a87 	vmul.f32	s15, s15, s14
    2708:	ee7e eaa7 	vadd.f32	s29, s29, s15
    270c:	ee66 7a24 	vmul.f32	s15, s12, s9
    2710:	ee7e eae7 	vsub.f32	s29, s29, s15
    q0q0 = q0 * q0;
    2714:	ee6d 7aad 	vmul.f32	s15, s27, s27
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    2718:	ee67 7aa5 	vmul.f32	s15, s15, s11
    271c:	ee21 eaa2 	vmul.f32	s28, s3, s5
    2720:	ee6b 0a03 	vmul.f32	s1, s22, s6
    2724:	ee3e ea60 	vsub.f32	s28, s28, s1
    2728:	ee6c 0a27 	vmul.f32	s1, s24, s15
    272c:	ee3e ea20 	vadd.f32	s28, s28, s1
    2730:	ee66 0a02 	vmul.f32	s1, s12, s4
    2734:	ee3e ea60 	vsub.f32	s28, s28, s1
    2738:	ee3e ea61 	vsub.f32	s28, s28, s3
    273c:	ee61 0a07 	vmul.f32	s1, s2, s14
    2740:	ee3e ea20 	vadd.f32	s28, s28, s1
    2744:	ee21 1a26 	vmul.f32	s2, s2, s13
    2748:	ee3e ea01 	vadd.f32	s28, s28, s2
    274c:	ee60 1a21 	vmul.f32	s3, s0, s3
    2750:	ee3e ea21 	vadd.f32	s28, s28, s3
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    2754:	ee2b 8aa7 	vmul.f32	s16, s23, s15
    2758:	ee2b 2a02 	vmul.f32	s4, s22, s4
    275c:	ee38 8a02 	vadd.f32	s16, s16, s4
    2760:	ee64 2a22 	vmul.f32	s5, s8, s5
    2764:	ee38 8a22 	vadd.f32	s16, s16, s5
    2768:	ee26 3a03 	vmul.f32	s6, s12, s6
    276c:	ee38 8a43 	vsub.f32	s16, s16, s6
    2770:	ee38 8a44 	vsub.f32	s16, s16, s8
    2774:	ee63 7a87 	vmul.f32	s15, s7, s14
    2778:	ee38 8a27 	vadd.f32	s16, s16, s15
    277c:	ee63 3aa6 	vmul.f32	s7, s7, s13
    2780:	ee38 8a23 	vadd.f32	s16, s16, s7
    2784:	ee20 0a04 	vmul.f32	s0, s0, s8
    2788:	ee38 8a00 	vadd.f32	s16, s16, s0
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    278c:	ee27 7a25 	vmul.f32	s14, s14, s11
    2790:	ee27 7a2c 	vmul.f32	s14, s14, s25
    2794:	ee2b ba24 	vmul.f32	s22, s22, s9
    2798:	ee77 8a4b 	vsub.f32	s17, s14, s22
    279c:	ee66 6aa5 	vmul.f32	s13, s13, s11
    27a0:	ee66 6aac 	vmul.f32	s13, s13, s25
    27a4:	ee38 7aa6 	vadd.f32	s14, s17, s13
    27a8:	ee66 8a05 	vmul.f32	s17, s12, s10
    27ac:	ee77 8a68 	vsub.f32	s17, s14, s17
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); //normalise step magnitude
    27b0:	ee6e 7aae 	vmul.f32	s15, s29, s29
    27b4:	ee2e 7a0e 	vmul.f32	s14, s28, s28
    27b8:	ee77 7a87 	vadd.f32	s15, s15, s14
    27bc:	ee28 7a08 	vmul.f32	s14, s16, s16
    27c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    27c4:	ee28 0aa8 	vmul.f32	s0, s17, s17
    27c8:	ee37 0a80 	vadd.f32	s0, s15, s0
    27cc:	f7ff fee8 	bl	25a0 <invSqrt(float)>
    qDot1 -= B_madgwick * s0;
    27d0:	4b56      	ldr	r3, [pc, #344]	; (292c <Madgwick6DOF(float, float, float, float, float, float, float)+0x35c>)
    27d2:	edd3 7a00 	vldr	s15, [r3]
    s0 *= recipNorm;
    27d6:	ee6e ea80 	vmul.f32	s29, s29, s0
    qDot1 -= B_madgwick * s0;
    27da:	ee6e eaa7 	vmul.f32	s29, s29, s15
    27de:	ee3a aa6e 	vsub.f32	s20, s20, s29
    s1 *= recipNorm;
    27e2:	ee2e ea00 	vmul.f32	s28, s28, s0
    qDot2 -= B_madgwick * s1;
    27e6:	ee2e ea27 	vmul.f32	s28, s28, s15
    27ea:	ee79 9ace 	vsub.f32	s19, s19, s28
    s2 *= recipNorm;
    27ee:	ee28 8a00 	vmul.f32	s16, s16, s0
    qDot3 -= B_madgwick * s2;
    27f2:	ee28 8a27 	vmul.f32	s16, s16, s15
    27f6:	ee7a aac8 	vsub.f32	s21, s21, s16
    s3 *= recipNorm;
    27fa:	ee68 8a80 	vmul.f32	s17, s17, s0
    qDot4 -= B_madgwick * s3;
    27fe:	ee68 8aa7 	vmul.f32	s17, s17, s15
    2802:	ee39 9a68 	vsub.f32	s18, s18, s17
  q0 += qDot1 * invSampleFreq;
    2806:	ee2a aa0d 	vmul.f32	s20, s20, s26
    280a:	ee3a aa2d 	vadd.f32	s20, s20, s27
  q1 += qDot2 * invSampleFreq;
    280e:	ee29 8a8d 	vmul.f32	s16, s19, s26
    2812:	ee38 8a0c 	vadd.f32	s16, s16, s24
  q2 += qDot3 * invSampleFreq;
    2816:	ee6a aa8d 	vmul.f32	s21, s21, s26
    281a:	ee7a aaab 	vadd.f32	s21, s21, s23
  q3 += qDot4 * invSampleFreq;
    281e:	ee69 8a0d 	vmul.f32	s17, s18, s26
    2822:	ee78 8aac 	vadd.f32	s17, s17, s25
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    2826:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    282a:	ee28 7a08 	vmul.f32	s14, s16, s16
    282e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2832:	ee2a 7aaa 	vmul.f32	s14, s21, s21
    2836:	ee77 7a87 	vadd.f32	s15, s15, s14
    283a:	ee28 0aa8 	vmul.f32	s0, s17, s17
    283e:	ee37 0a80 	vadd.f32	s0, s15, s0
    2842:	f7ff fead 	bl	25a0 <invSqrt(float)>
  q0 *= recipNorm;
    2846:	ee2a aa00 	vmul.f32	s20, s20, s0
    284a:	4b37      	ldr	r3, [pc, #220]	; (2928 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    284c:	ed83 aa00 	vstr	s20, [r3]
  q1 *= recipNorm;
    2850:	ee28 8a00 	vmul.f32	s16, s16, s0
    2854:	4b31      	ldr	r3, [pc, #196]	; (291c <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    2856:	ed83 8a00 	vstr	s16, [r3]
  q2 *= recipNorm;
    285a:	ee6a aa80 	vmul.f32	s21, s21, s0
    285e:	4b30      	ldr	r3, [pc, #192]	; (2920 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2860:	edc3 aa00 	vstr	s21, [r3]
  q3 *= recipNorm;
    2864:	ee68 8a80 	vmul.f32	s17, s17, s0
    2868:	4b2e      	ldr	r3, [pc, #184]	; (2924 <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    286a:	edc3 8a00 	vstr	s17, [r3]
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
    286e:	ee6a baaa 	vmul.f32	s23, s21, s21
    2872:	ee68 0a08 	vmul.f32	s1, s16, s16
    2876:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    287a:	ee7b 0a60 	vsub.f32	s1, s22, s1
    287e:	ee2a 0a08 	vmul.f32	s0, s20, s16
    2882:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  { return __builtin_atan2f(__y, __x); }
    2886:	ee70 0aeb 	vsub.f32	s1, s1, s23
    288a:	ee30 0a27 	vadd.f32	s0, s0, s15
    288e:	f00c ffa9 	bl	f7e4 <atan2f>
    2892:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2896:	ed9f 9b1e 	vldr	d9, [pc, #120]	; 2910 <Madgwick6DOF(float, float, float, float, float, float, float)+0x340>
    289a:	ee20 0b09 	vmul.f64	d0, d0, d9
    289e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    28a2:	4b23      	ldr	r3, [pc, #140]	; (2930 <Madgwick6DOF(float, float, float, float, float, float, float)+0x360>)
    28a4:	ed83 0a00 	vstr	s0, [r3]
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
    28a8:	ee68 7a28 	vmul.f32	s15, s16, s17
    28ac:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    28b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_asinf(__x); }
    28b4:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    28b8:	ee27 0a80 	vmul.f32	s0, s15, s0
    28bc:	f00c ff66 	bl	f78c <asinf>
    28c0:	eeb1 7a40 	vneg.f32	s14, s0
    28c4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    28c8:	ee27 7b09 	vmul.f64	d7, d7, d9
    28cc:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    28d0:	4b18      	ldr	r3, [pc, #96]	; (2934 <Madgwick6DOF(float, float, float, float, float, float, float)+0x364>)
    28d2:	ed83 7a00 	vstr	s14, [r3]
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
    28d6:	ee3b ba6b 	vsub.f32	s22, s22, s23
    28da:	ee68 0aa8 	vmul.f32	s1, s17, s17
    28de:	ee28 8a2a 	vmul.f32	s16, s16, s21
    28e2:	ee2a 0a28 	vmul.f32	s0, s20, s17
  { return __builtin_atan2f(__y, __x); }
    28e6:	ee7b 0a60 	vsub.f32	s1, s22, s1
    28ea:	ee38 0a00 	vadd.f32	s0, s16, s0
    28ee:	f00c ff79 	bl	f7e4 <atan2f>
    28f2:	eeb1 0a40 	vneg.f32	s0, s0
    28f6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    28fa:	ee20 0b09 	vmul.f64	d0, d0, d9
    28fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    2902:	4b0d      	ldr	r3, [pc, #52]	; (2938 <Madgwick6DOF(float, float, float, float, float, float, float)+0x368>)
    2904:	ed83 0a00 	vstr	s0, [r3]
}
    2908:	ecbd 8b0e 	vpop	{d8-d14}
    290c:	bd08      	pop	{r3, pc}
    290e:	bf00      	nop
    2910:	1a5d2372 	.word	0x1a5d2372
    2914:	404ca5dc 	.word	0x404ca5dc
    2918:	3c8efa39 	.word	0x3c8efa39
    291c:	2000515c 	.word	0x2000515c
    2920:	20005160 	.word	0x20005160
    2924:	20005164 	.word	0x20005164
    2928:	20003a38 	.word	0x20003a38
    292c:	2000332c 	.word	0x2000332c
    2930:	20005170 	.word	0x20005170
    2934:	20005144 	.word	0x20005144
    2938:	200053a8 	.word	0x200053a8

0000293c <radioSetup()>:
unsigned long channel_1_raw, channel_2_raw, channel_3_raw, channel_4_raw, channel_5_raw, 
							channel_6_raw, channel_7_raw, channel_8_raw, channel_9_raw;
int ppm_counter = 0;
unsigned long time_ms = 0;

void radioSetup() {
    293c:	b508      	push	{r3, lr}
    attachInterrupt(digitalPinToInterrupt(ch6Pin), getCh6, CHANGE);
    delay(20);

  //SBUS Recevier 
  #elif defined USE_SBUS_RX
    sbus.begin();
    293e:	4802      	ldr	r0, [pc, #8]	; (2948 <radioSetup()+0xc>)
    2940:	f001 fd2e 	bl	43a0 <SBUS::begin()>
  #elif defined USE_DSM_RX
    Serial3.begin(115000);
  #else
    #error No RX type defined...
  #endif
}
    2944:	bd08      	pop	{r3, pc}
    2946:	bf00      	nop
    2948:	200051f8 	.word	0x200051f8

0000294c <setup>:
void setup() {
    294c:	b5f0      	push	{r4, r5, r6, r7, lr}
    294e:	b0a5      	sub	sp, #148	; 0x94
		uint32_t millis_begin = systick_millis_count;
    2950:	4b7d      	ldr	r3, [pc, #500]	; (2b48 <setup+0x1fc>)
    2952:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2954:	4c7d      	ldr	r4, [pc, #500]	; (2b4c <setup+0x200>)
    2956:	4f7e      	ldr	r7, [pc, #504]	; (2b50 <setup+0x204>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2958:	461d      	mov	r5, r3
		while (!(*this)) {
    295a:	e004      	b.n	2966 <setup+0x1a>
				if (elapsed > 2000) break;
    295c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2960:	d813      	bhi.n	298a <setup+0x3e>
			yield();
    2962:	f00c fb3b 	bl	efdc <yield>
		yield();
    2966:	f00c fb39 	bl	efdc <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    296a:	7823      	ldrb	r3, [r4, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	f000 8203 	beq.w	2d78 <setup+0x42c>
    2972:	783b      	ldrb	r3, [r7, #0]
    2974:	f013 0f01 	tst.w	r3, #1
    2978:	f000 81fe 	beq.w	2d78 <setup+0x42c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    297c:	682b      	ldr	r3, [r5, #0]
    297e:	4a75      	ldr	r2, [pc, #468]	; (2b54 <setup+0x208>)
    2980:	6812      	ldr	r2, [r2, #0]
    2982:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2984:	2b0e      	cmp	r3, #14
    2986:	f240 81f7 	bls.w	2d78 <setup+0x42c>
  delay(500);
    298a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    298e:	f00a fc31 	bl	d1f4 <delay>
  pinMode(13, OUTPUT); //Pin 13 LED blinker on board, do not modify 
    2992:	2101      	movs	r1, #1
    2994:	200d      	movs	r0, #13
    2996:	f00a fc7b 	bl	d290 <pinMode>
  pinMode(m1Pin, OUTPUT);
    299a:	2101      	movs	r1, #1
    299c:	2000      	movs	r0, #0
    299e:	f00a fc77 	bl	d290 <pinMode>
  pinMode(m2Pin, OUTPUT);
    29a2:	2101      	movs	r1, #1
    29a4:	4608      	mov	r0, r1
    29a6:	f00a fc73 	bl	d290 <pinMode>
  pinMode(m3Pin, OUTPUT);
    29aa:	2101      	movs	r1, #1
    29ac:	2002      	movs	r0, #2
    29ae:	f00a fc6f 	bl	d290 <pinMode>
  pinMode(m4Pin, OUTPUT);
    29b2:	2101      	movs	r1, #1
    29b4:	2003      	movs	r0, #3
    29b6:	f00a fc6b 	bl	d290 <pinMode>
  pinMode(m5Pin, OUTPUT);
    29ba:	2101      	movs	r1, #1
    29bc:	2004      	movs	r0, #4
    29be:	f00a fc67 	bl	d290 <pinMode>
  pinMode(m6Pin, OUTPUT);
    29c2:	2101      	movs	r1, #1
    29c4:	2005      	movs	r0, #5
    29c6:	f00a fc63 	bl	d290 <pinMode>
  servo1.attach(servo1Pin, 1000, 2100); //Pin, min PWM value, max PWM value
    29ca:	f640 0334 	movw	r3, #2100	; 0x834
    29ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29d2:	2106      	movs	r1, #6
    29d4:	4860      	ldr	r0, [pc, #384]	; (2b58 <setup+0x20c>)
    29d6:	f002 faef 	bl	4fb8 <PWMServo::attach(int, int, int)>
  servo2.attach(servo2Pin, 1000, 2100);
    29da:	f640 0334 	movw	r3, #2100	; 0x834
    29de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29e2:	2107      	movs	r1, #7
    29e4:	485d      	ldr	r0, [pc, #372]	; (2b5c <setup+0x210>)
    29e6:	f002 fae7 	bl	4fb8 <PWMServo::attach(int, int, int)>
  servo3.attach(servo3Pin, 1000, 2100);
    29ea:	f640 0334 	movw	r3, #2100	; 0x834
    29ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29f2:	210a      	movs	r1, #10
    29f4:	485a      	ldr	r0, [pc, #360]	; (2b60 <setup+0x214>)
    29f6:	f002 fadf 	bl	4fb8 <PWMServo::attach(int, int, int)>
  servo4.attach(servo4Pin, 1000, 2100);
    29fa:	f640 0334 	movw	r3, #2100	; 0x834
    29fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a02:	2109      	movs	r1, #9
    2a04:	4857      	ldr	r0, [pc, #348]	; (2b64 <setup+0x218>)
    2a06:	f002 fad7 	bl	4fb8 <PWMServo::attach(int, int, int)>
  servo5.attach(servo5Pin, 1000, 2100);
    2a0a:	f640 0334 	movw	r3, #2100	; 0x834
    2a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a12:	2108      	movs	r1, #8
    2a14:	4854      	ldr	r0, [pc, #336]	; (2b68 <setup+0x21c>)
    2a16:	f002 facf 	bl	4fb8 <PWMServo::attach(int, int, int)>
  servo6.attach(servo6Pin, 1000, 2100);
    2a1a:	f640 0334 	movw	r3, #2100	; 0x834
    2a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a22:	210b      	movs	r1, #11
    2a24:	4851      	ldr	r0, [pc, #324]	; (2b6c <setup+0x220>)
    2a26:	f002 fac7 	bl	4fb8 <PWMServo::attach(int, int, int)>
  servo7.attach(servo7Pin, 1000, 2100);
    2a2a:	f640 0334 	movw	r3, #2100	; 0x834
    2a2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a32:	210c      	movs	r1, #12
    2a34:	484e      	ldr	r0, [pc, #312]	; (2b70 <setup+0x224>)
    2a36:	f002 fabf 	bl	4fb8 <PWMServo::attach(int, int, int)>
#elif defined(__arm__) && defined(TEENSYDUINO)
    static uint32_t attachedpins[]; // 1 bit per digital pin
#endif
  public:
    PWMServo();
    uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
    2a3a:	f44f 6316 	mov.w	r3, #2400	; 0x960
    2a3e:	f44f 7208 	mov.w	r2, #544	; 0x220
    2a42:	2118      	movs	r1, #24
    2a44:	484b      	ldr	r0, [pc, #300]	; (2b74 <setup+0x228>)
    2a46:	f002 fab7 	bl	4fb8 <PWMServo::attach(int, int, int)>
  digitalWrite(13, HIGH);
    2a4a:	2101      	movs	r1, #1
    2a4c:	200d      	movs	r0, #13
    2a4e:	f00a fbe7 	bl	d220 <digitalWrite>
  delay(5);
    2a52:	2005      	movs	r0, #5
    2a54:	f00a fbce 	bl	d1f4 <delay>
							  return write((const uint8_t *)str, strlen(str)); }
    2a58:	4847      	ldr	r0, [pc, #284]	; (2b78 <setup+0x22c>)
    2a5a:	6803      	ldr	r3, [r0, #0]
    2a5c:	685b      	ldr	r3, [r3, #4]
    2a5e:	2217      	movs	r2, #23
    2a60:	4946      	ldr	r1, [pc, #280]	; (2b7c <setup+0x230>)
    2a62:	4798      	blx	r3
  if (SD.begin(chipSelect)) {
    2a64:	21fe      	movs	r1, #254	; 0xfe
    2a66:	4846      	ldr	r0, [pc, #280]	; (2b80 <setup+0x234>)
    2a68:	f002 fd40 	bl	54ec <SDClass::begin(unsigned char)>
    2a6c:	2800      	cmp	r0, #0
    2a6e:	f000 8175 	beq.w	2d5c <setup+0x410>
    2a72:	4c41      	ldr	r4, [pc, #260]	; (2b78 <setup+0x22c>)
    2a74:	6823      	ldr	r3, [r4, #0]
    2a76:	685b      	ldr	r3, [r3, #4]
    2a78:	2211      	movs	r2, #17
    2a7a:	4942      	ldr	r1, [pc, #264]	; (2b84 <setup+0x238>)
    2a7c:	4620      	mov	r0, r4
    2a7e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2a80:	4620      	mov	r0, r4
    2a82:	f009 ff0e 	bl	c8a2 <Print::println()>
		SD_is_present = 1;
    2a86:	4b40      	ldr	r3, [pc, #256]	; (2b88 <setup+0x23c>)
    2a88:	2201      	movs	r2, #1
    2a8a:	701a      	strb	r2, [r3, #0]
	StringSumHelper(const String &s) : String(s) {}
    2a8c:	493f      	ldr	r1, [pc, #252]	; (2b8c <setup+0x240>)
    2a8e:	a814      	add	r0, sp, #80	; 0x50
    2a90:	f00a f937 	bl	cd02 <String::String(String const&)>
		fileName = filePrefix + String(fileIncrement) + fileExtension;
    2a94:	220a      	movs	r2, #10
    2a96:	2100      	movs	r1, #0
    2a98:	a818      	add	r0, sp, #96	; 0x60
    2a9a:	f00a f956 	bl	cd4a <String::String(int, unsigned char)>
    2a9e:	a918      	add	r1, sp, #96	; 0x60
    2aa0:	a814      	add	r0, sp, #80	; 0x50
    2aa2:	f00a f9b1 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
    2aa6:	493a      	ldr	r1, [pc, #232]	; (2b90 <setup+0x244>)
    2aa8:	f00a f9ae 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
    2aac:	4601      	mov	r1, r0
    2aae:	4839      	ldr	r0, [pc, #228]	; (2b94 <setup+0x248>)
    2ab0:	f00a f91d 	bl	ccee <String::operator=(String const&)>
    2ab4:	a818      	add	r0, sp, #96	; 0x60
    2ab6:	f00a f8a9 	bl	cc0c <String::~String()>
class StringSumHelper : public String
    2aba:	a814      	add	r0, sp, #80	; 0x50
    2abc:	f00a f8a6 	bl	cc0c <String::~String()>
		int fileIncrement = 0;
    2ac0:	2400      	movs	r4, #0
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2ac2:	4d34      	ldr	r5, [pc, #208]	; (2b94 <setup+0x248>)
    2ac4:	4f34      	ldr	r7, [pc, #208]	; (2b98 <setup+0x24c>)
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    2ac6:	4e2e      	ldr	r6, [pc, #184]	; (2b80 <setup+0x234>)
		while(SD.exists(fileName.c_str())) {
    2ac8:	e02a      	b.n	2b20 <setup+0x1d4>
           m_xVol ? m_xVol->exists(path) : false;
    2aca:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
    2ace:	2900      	cmp	r1, #0
    2ad0:	d064      	beq.n	2b9c <setup+0x250>
  ExFatFile() {}
    2ad2:	2300      	movs	r3, #0
    2ad4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2ad8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    2adc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2ae0:	4668      	mov	r0, sp
    2ae2:	f003 faec 	bl	60be <ExFatFile::open(ExFatVolume*, char const*, int)>
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d058      	beq.n	2b9c <setup+0x250>
			fileIncrement++;
    2aea:	3401      	adds	r4, #1
	StringSumHelper(const String &s) : String(s) {}
    2aec:	4927      	ldr	r1, [pc, #156]	; (2b8c <setup+0x240>)
    2aee:	a81c      	add	r0, sp, #112	; 0x70
    2af0:	f00a f907 	bl	cd02 <String::String(String const&)>
			fileName = filePrefix + String(fileIncrement) + fileExtension;
    2af4:	220a      	movs	r2, #10
    2af6:	4621      	mov	r1, r4
    2af8:	a820      	add	r0, sp, #128	; 0x80
    2afa:	f00a f926 	bl	cd4a <String::String(int, unsigned char)>
    2afe:	a920      	add	r1, sp, #128	; 0x80
    2b00:	a81c      	add	r0, sp, #112	; 0x70
    2b02:	f00a f981 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
    2b06:	4922      	ldr	r1, [pc, #136]	; (2b90 <setup+0x244>)
    2b08:	f00a f97e 	bl	ce08 <operator+(StringSumHelper const&, String const&)>
    2b0c:	4601      	mov	r1, r0
    2b0e:	4628      	mov	r0, r5
    2b10:	f00a f8ed 	bl	ccee <String::operator=(String const&)>
    2b14:	a820      	add	r0, sp, #128	; 0x80
    2b16:	f00a f879 	bl	cc0c <String::~String()>
class StringSumHelper : public String
    2b1a:	a81c      	add	r0, sp, #112	; 0x70
    2b1c:	f00a f876 	bl	cc0c <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2b20:	682a      	ldr	r2, [r5, #0]
    2b22:	2a00      	cmp	r2, #0
    2b24:	bf08      	it	eq
    2b26:	463a      	moveq	r2, r7
    return m_fVol ? m_fVol->exists(path) :
    2b28:	f8d6 1484 	ldr.w	r1, [r6, #1156]	; 0x484
    2b2c:	2900      	cmp	r1, #0
    2b2e:	d0cc      	beq.n	2aca <setup+0x17e>
  FatFile() {}
    2b30:	2300      	movs	r3, #0
    2b32:	f88d 3000 	strb.w	r3, [sp]
    2b36:	f88d 3001 	strb.w	r3, [sp, #1]
    2b3a:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2b3e:	4668      	mov	r0, sp
    2b40:	f005 fa61 	bl	8006 <FatFile::open(FatVolume*, char const*, int)>
    2b44:	e7cf      	b.n	2ae6 <setup+0x19a>
    2b46:	bf00      	nop
    2b48:	20005388 	.word	0x20005388
    2b4c:	200053d8 	.word	0x200053d8
    2b50:	200053d7 	.word	0x200053d7
    2b54:	2000539c 	.word	0x2000539c
    2b58:	2000535c 	.word	0x2000535c
    2b5c:	20005360 	.word	0x20005360
    2b60:	20005364 	.word	0x20005364
    2b64:	20005368 	.word	0x20005368
    2b68:	2000536c 	.word	0x2000536c
    2b6c:	20005370 	.word	0x20005370
    2b70:	20005374 	.word	0x20005374
    2b74:	200050dc 	.word	0x200050dc
    2b78:	2000336c 	.word	0x2000336c
    2b7c:	20002e74 	.word	0x20002e74
    2b80:	20004160 	.word	0x20004160
    2b84:	20002e8c 	.word	0x20002e8c
    2b88:	200053be 	.word	0x200053be
    2b8c:	200050cc 	.word	0x200050cc
    2b90:	200050ac 	.word	0x200050ac
    2b94:	200050bc 	.word	0x200050bc
    2b98:	200031f4 	.word	0x200031f4
    2b9c:	4b7c      	ldr	r3, [pc, #496]	; (2d90 <setup+0x444>)
    2b9e:	681a      	ldr	r2, [r3, #0]
    2ba0:	2a00      	cmp	r2, #0
    2ba2:	f000 80d4 	beq.w	2d4e <setup+0x402>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2ba6:	f244 2302 	movw	r3, #16898	; 0x4202
    2baa:	497a      	ldr	r1, [pc, #488]	; (2d94 <setup+0x448>)
    2bac:	4668      	mov	r0, sp
    2bae:	f007 fa69 	bl	a084 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2bb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	f000 80cc 	beq.w	2d52 <setup+0x406>
		if (file) return File(new SDFile(file));
    2bba:	205c      	movs	r0, #92	; 0x5c
    2bbc:	f00a fc48 	bl	d450 <operator new(unsigned int)>
    2bc0:	4604      	mov	r4, r0
class FileImpl {
    2bc2:	2500      	movs	r5, #0
    2bc4:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2bc6:	4b74      	ldr	r3, [pc, #464]	; (2d98 <setup+0x44c>)
    2bc8:	6003      	str	r3, [r0, #0]
class Print
    2bca:	9b01      	ldr	r3, [sp, #4]
    2bcc:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    2bce:	4b73      	ldr	r3, [pc, #460]	; (2d9c <setup+0x450>)
    2bd0:	6083      	str	r3, [r0, #8]
    2bd2:	9b02      	ldr	r3, [sp, #8]
    2bd4:	6103      	str	r3, [r0, #16]
    2bd6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2bda:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    2bdc:	a904      	add	r1, sp, #16
    2bde:	3018      	adds	r0, #24
    2be0:	f007 f919 	bl	9e16 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2be4:	4b6e      	ldr	r3, [pc, #440]	; (2da0 <setup+0x454>)
    2be6:	60a3      	str	r3, [r4, #8]
    2be8:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    2bea:	6863      	ldr	r3, [r4, #4]
    2bec:	3301      	adds	r3, #1
    2bee:	6063      	str	r3, [r4, #4]
    2bf0:	4b6c      	ldr	r3, [pc, #432]	; (2da4 <setup+0x458>)
    2bf2:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    2bf4:	a804      	add	r0, sp, #16
    2bf6:	f007 f94f 	bl	9e98 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    2bfa:	4b6b      	ldr	r3, [pc, #428]	; (2da8 <setup+0x45c>)
    2bfc:	691b      	ldr	r3, [r3, #16]
    2bfe:	b16b      	cbz	r3, 2c1c <setup+0x2d0>
		if (--(f->refcount) == 0) {
    2c00:	685a      	ldr	r2, [r3, #4]
    2c02:	3a01      	subs	r2, #1
    2c04:	605a      	str	r2, [r3, #4]
    2c06:	b94a      	cbnz	r2, 2c1c <setup+0x2d0>
			f->close();
    2c08:	4d67      	ldr	r5, [pc, #412]	; (2da8 <setup+0x45c>)
    2c0a:	6928      	ldr	r0, [r5, #16]
    2c0c:	6803      	ldr	r3, [r0, #0]
    2c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c10:	4798      	blx	r3
			delete f;
    2c12:	6928      	ldr	r0, [r5, #16]
    2c14:	b110      	cbz	r0, 2c1c <setup+0x2d0>
    2c16:	6803      	ldr	r3, [r0, #0]
    2c18:	685b      	ldr	r3, [r3, #4]
    2c1a:	4798      	blx	r3
		f = file.f;
    2c1c:	4d62      	ldr	r5, [pc, #392]	; (2da8 <setup+0x45c>)
    2c1e:	612c      	str	r4, [r5, #16]
			"roll_imu,pitch_imu,yaw_imu,alpha,beta,roll_des,pitch_des,yaw_des,throttle_des,roll_pid,pitch_pid,yaw_pid,radio_ch1,radio_ch2,radio_ch3,radio_ch4,radio_ch5,radio_ch6,radio_ch7,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,s1_command,s2_command,s3_command,s4_command,kp_roll,ki_roll,kd_roll,kp_pitch,ki_pitch,kd_pitch,kp_yaw,ki_yaw,kd_yaw,failsafeTriggered";
    2c20:	4962      	ldr	r1, [pc, #392]	; (2dac <setup+0x460>)
    2c22:	4668      	mov	r0, sp
    2c24:	f00a f83b 	bl	cc9e <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    2c28:	4669      	mov	r1, sp
    2c2a:	4628      	mov	r0, r5
    2c2c:	f009 fe14 	bl	c858 <Print::print(String const&)>
    2c30:	4628      	mov	r0, r5
    2c32:	f009 fe36 	bl	c8a2 <Print::println()>
		if (f) {
    2c36:	6928      	ldr	r0, [r5, #16]
    2c38:	b198      	cbz	r0, 2c62 <setup+0x316>
			f->close();
    2c3a:	6803      	ldr	r3, [r0, #0]
    2c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c3e:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    2c40:	692a      	ldr	r2, [r5, #16]
    2c42:	6853      	ldr	r3, [r2, #4]
    2c44:	3b01      	subs	r3, #1
    2c46:	6053      	str	r3, [r2, #4]
    2c48:	b943      	cbnz	r3, 2c5c <setup+0x310>
			f->close();
    2c4a:	6928      	ldr	r0, [r5, #16]
    2c4c:	6803      	ldr	r3, [r0, #0]
    2c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c50:	4798      	blx	r3
			delete f;
    2c52:	6928      	ldr	r0, [r5, #16]
    2c54:	b110      	cbz	r0, 2c5c <setup+0x310>
    2c56:	6803      	ldr	r3, [r0, #0]
    2c58:	685b      	ldr	r3, [r3, #4]
    2c5a:	4798      	blx	r3
		}
		f = nullptr;
    2c5c:	4b52      	ldr	r3, [pc, #328]	; (2da8 <setup+0x45c>)
    2c5e:	2200      	movs	r2, #0
    2c60:	611a      	str	r2, [r3, #16]
  }
    2c62:	4668      	mov	r0, sp
    2c64:	f009 ffd2 	bl	cc0c <String::~String()>
  radioSetup();
    2c68:	f7ff fe68 	bl	293c <radioSetup()>
  channel_1_pwm = channel_1_fs;
    2c6c:	4b50      	ldr	r3, [pc, #320]	; (2db0 <setup+0x464>)
    2c6e:	681a      	ldr	r2, [r3, #0]
    2c70:	4b50      	ldr	r3, [pc, #320]	; (2db4 <setup+0x468>)
    2c72:	601a      	str	r2, [r3, #0]
  channel_2_pwm = channel_2_fs;
    2c74:	4b50      	ldr	r3, [pc, #320]	; (2db8 <setup+0x46c>)
    2c76:	681a      	ldr	r2, [r3, #0]
    2c78:	4b50      	ldr	r3, [pc, #320]	; (2dbc <setup+0x470>)
    2c7a:	601a      	str	r2, [r3, #0]
  channel_3_pwm = channel_3_fs;
    2c7c:	4b50      	ldr	r3, [pc, #320]	; (2dc0 <setup+0x474>)
    2c7e:	681a      	ldr	r2, [r3, #0]
    2c80:	4b50      	ldr	r3, [pc, #320]	; (2dc4 <setup+0x478>)
    2c82:	601a      	str	r2, [r3, #0]
  channel_4_pwm = channel_4_fs;
    2c84:	4b50      	ldr	r3, [pc, #320]	; (2dc8 <setup+0x47c>)
    2c86:	681a      	ldr	r2, [r3, #0]
    2c88:	4b50      	ldr	r3, [pc, #320]	; (2dcc <setup+0x480>)
    2c8a:	601a      	str	r2, [r3, #0]
  channel_5_pwm = channel_5_fs;
    2c8c:	4b50      	ldr	r3, [pc, #320]	; (2dd0 <setup+0x484>)
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	4b50      	ldr	r3, [pc, #320]	; (2dd4 <setup+0x488>)
    2c92:	601a      	str	r2, [r3, #0]
  channel_6_pwm = channel_6_fs;
    2c94:	4b50      	ldr	r3, [pc, #320]	; (2dd8 <setup+0x48c>)
    2c96:	681a      	ldr	r2, [r3, #0]
    2c98:	4b50      	ldr	r3, [pc, #320]	; (2ddc <setup+0x490>)
    2c9a:	601a      	str	r2, [r3, #0]
	channel_7_pwm = channel_7_fs;
    2c9c:	4b50      	ldr	r3, [pc, #320]	; (2de0 <setup+0x494>)
    2c9e:	681a      	ldr	r2, [r3, #0]
    2ca0:	4b50      	ldr	r3, [pc, #320]	; (2de4 <setup+0x498>)
    2ca2:	601a      	str	r2, [r3, #0]
	channel_8_pwm = channel_8_fs;
    2ca4:	4b50      	ldr	r3, [pc, #320]	; (2de8 <setup+0x49c>)
    2ca6:	681a      	ldr	r2, [r3, #0]
    2ca8:	4b50      	ldr	r3, [pc, #320]	; (2dec <setup+0x4a0>)
    2caa:	601a      	str	r2, [r3, #0]
	channel_9_pwm = channel_9_fs;
    2cac:	4b50      	ldr	r3, [pc, #320]	; (2df0 <setup+0x4a4>)
    2cae:	681a      	ldr	r2, [r3, #0]
    2cb0:	4b50      	ldr	r3, [pc, #320]	; (2df4 <setup+0x4a8>)
    2cb2:	601a      	str	r2, [r3, #0]
	channel_10_pwm = channel_10_fs;
    2cb4:	4b50      	ldr	r3, [pc, #320]	; (2df8 <setup+0x4ac>)
    2cb6:	681a      	ldr	r2, [r3, #0]
    2cb8:	4b50      	ldr	r3, [pc, #320]	; (2dfc <setup+0x4b0>)
    2cba:	601a      	str	r2, [r3, #0]
	channel_11_pwm = channel_11_fs;
    2cbc:	4b50      	ldr	r3, [pc, #320]	; (2e00 <setup+0x4b4>)
    2cbe:	681a      	ldr	r2, [r3, #0]
    2cc0:	4b50      	ldr	r3, [pc, #320]	; (2e04 <setup+0x4b8>)
    2cc2:	601a      	str	r2, [r3, #0]
	channel_12_pwm = channel_12_fs;
    2cc4:	4b50      	ldr	r3, [pc, #320]	; (2e08 <setup+0x4bc>)
    2cc6:	681a      	ldr	r2, [r3, #0]
    2cc8:	4b50      	ldr	r3, [pc, #320]	; (2e0c <setup+0x4c0>)
    2cca:	601a      	str	r2, [r3, #0]
	channel_13_pwm = channel_13_fs;
    2ccc:	4b50      	ldr	r3, [pc, #320]	; (2e10 <setup+0x4c4>)
    2cce:	681a      	ldr	r2, [r3, #0]
    2cd0:	4b50      	ldr	r3, [pc, #320]	; (2e14 <setup+0x4c8>)
    2cd2:	601a      	str	r2, [r3, #0]
  IMUinit();
    2cd4:	f7fd fe20 	bl	918 <IMUinit()>
  delay(5);
    2cd8:	2005      	movs	r0, #5
    2cda:	f00a fa8b 	bl	d1f4 <delay>
  servo1.write(0); //Command servo angle from 0-180 degrees (1000 to 2000 PWM)
    2cde:	2100      	movs	r1, #0
    2ce0:	484d      	ldr	r0, [pc, #308]	; (2e18 <setup+0x4cc>)
    2ce2:	f002 f9b7 	bl	5054 <PWMServo::write(int)>
  servo2.write(0); //Set these to 90 for servos if you do not want them to briefly max out on startup
    2ce6:	2100      	movs	r1, #0
    2ce8:	484c      	ldr	r0, [pc, #304]	; (2e1c <setup+0x4d0>)
    2cea:	f002 f9b3 	bl	5054 <PWMServo::write(int)>
  servo3.write(0); //Keep these at 0 if you are using servo outputs for motors
    2cee:	2100      	movs	r1, #0
    2cf0:	484b      	ldr	r0, [pc, #300]	; (2e20 <setup+0x4d4>)
    2cf2:	f002 f9af 	bl	5054 <PWMServo::write(int)>
  servo4.write(0);
    2cf6:	2100      	movs	r1, #0
    2cf8:	484a      	ldr	r0, [pc, #296]	; (2e24 <setup+0x4d8>)
    2cfa:	f002 f9ab 	bl	5054 <PWMServo::write(int)>
  servo5.write(0);
    2cfe:	2100      	movs	r1, #0
    2d00:	4849      	ldr	r0, [pc, #292]	; (2e28 <setup+0x4dc>)
    2d02:	f002 f9a7 	bl	5054 <PWMServo::write(int)>
  servo6.write(0);
    2d06:	2100      	movs	r1, #0
    2d08:	4848      	ldr	r0, [pc, #288]	; (2e2c <setup+0x4e0>)
    2d0a:	f002 f9a3 	bl	5054 <PWMServo::write(int)>
  servo7.write(0);
    2d0e:	2100      	movs	r1, #0
    2d10:	4847      	ldr	r0, [pc, #284]	; (2e30 <setup+0x4e4>)
    2d12:	f002 f99f 	bl	5054 <PWMServo::write(int)>
  delay(5);
    2d16:	2005      	movs	r0, #5
    2d18:	f00a fa6c 	bl	d1f4 <delay>
  m1_command_PWM = 125; //Command OneShot125 ESC from 125 to 250us pulse length
    2d1c:	237d      	movs	r3, #125	; 0x7d
    2d1e:	4a45      	ldr	r2, [pc, #276]	; (2e34 <setup+0x4e8>)
    2d20:	6013      	str	r3, [r2, #0]
  m2_command_PWM = 125;
    2d22:	4a45      	ldr	r2, [pc, #276]	; (2e38 <setup+0x4ec>)
    2d24:	6013      	str	r3, [r2, #0]
  m3_command_PWM = 125;
    2d26:	4a45      	ldr	r2, [pc, #276]	; (2e3c <setup+0x4f0>)
    2d28:	6013      	str	r3, [r2, #0]
  m4_command_PWM = 125;
    2d2a:	4a45      	ldr	r2, [pc, #276]	; (2e40 <setup+0x4f4>)
    2d2c:	6013      	str	r3, [r2, #0]
  m5_command_PWM = 125;
    2d2e:	4a45      	ldr	r2, [pc, #276]	; (2e44 <setup+0x4f8>)
    2d30:	6013      	str	r3, [r2, #0]
  m6_command_PWM = 125;
    2d32:	4a45      	ldr	r2, [pc, #276]	; (2e48 <setup+0x4fc>)
    2d34:	6013      	str	r3, [r2, #0]
  armMotors(); //Loop over commandMotors() until ESCs happily arm
    2d36:	f7fe feb5 	bl	1aa4 <armMotors()>
  setupBlink(3,160,70); //numBlinks, upTime (ms), downTime (ms)
    2d3a:	2246      	movs	r2, #70	; 0x46
    2d3c:	21a0      	movs	r1, #160	; 0xa0
    2d3e:	2003      	movs	r0, #3
    2d40:	f7fe ff48 	bl	1bd4 <setupBlink(int, int, int)>
	doneWithSetup = 1;
    2d44:	4b41      	ldr	r3, [pc, #260]	; (2e4c <setup+0x500>)
    2d46:	2201      	movs	r2, #1
    2d48:	701a      	strb	r2, [r3, #0]
}
    2d4a:	b025      	add	sp, #148	; 0x94
    2d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d4e:	4a40      	ldr	r2, [pc, #256]	; (2e50 <setup+0x504>)
    2d50:	e729      	b.n	2ba6 <setup+0x25a>
  bool isOpen() const {return m_fFile || m_xFile;}
    2d52:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    2d54:	2c00      	cmp	r4, #0
    2d56:	f47f af30 	bne.w	2bba <setup+0x26e>
    2d5a:	e749      	b.n	2bf0 <setup+0x2a4>
							  return write((const uint8_t *)str, strlen(str)); }
    2d5c:	4c3d      	ldr	r4, [pc, #244]	; (2e54 <setup+0x508>)
    2d5e:	6823      	ldr	r3, [r4, #0]
    2d60:	685b      	ldr	r3, [r3, #4]
    2d62:	221b      	movs	r2, #27
    2d64:	493c      	ldr	r1, [pc, #240]	; (2e58 <setup+0x50c>)
    2d66:	4620      	mov	r0, r4
    2d68:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2d6a:	4620      	mov	r0, r4
    2d6c:	f009 fd99 	bl	c8a2 <Print::println()>
		SD_is_present = 0;
    2d70:	4b3a      	ldr	r3, [pc, #232]	; (2e5c <setup+0x510>)
    2d72:	2200      	movs	r2, #0
    2d74:	701a      	strb	r2, [r3, #0]
    2d76:	e777      	b.n	2c68 <setup+0x31c>
			uint32_t elapsed = systick_millis_count - millis_begin;
    2d78:	682b      	ldr	r3, [r5, #0]
    2d7a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2d7c:	7822      	ldrb	r2, [r4, #0]
    2d7e:	2a00      	cmp	r2, #0
    2d80:	f47f adec 	bne.w	295c <setup+0x10>
				if (elapsed > 750) break;
    2d84:	f240 22ee 	movw	r2, #750	; 0x2ee
    2d88:	4293      	cmp	r3, r2
    2d8a:	f67f adea 	bls.w	2962 <setup+0x16>
    2d8e:	e5fc      	b.n	298a <setup+0x3e>
    2d90:	200050bc 	.word	0x200050bc
    2d94:	20004164 	.word	0x20004164
    2d98:	20002548 	.word	0x20002548
    2d9c:	200025a4 	.word	0x200025a4
    2da0:	20002524 	.word	0x20002524
    2da4:	20002418 	.word	0x20002418
    2da8:	200039bc 	.word	0x200039bc
    2dac:	20002ea0 	.word	0x20002ea0
    2db0:	20003994 	.word	0x20003994
    2db4:	20005014 	.word	0x20005014
    2db8:	20003998 	.word	0x20003998
    2dbc:	20005020 	.word	0x20005020
    2dc0:	2000399c 	.word	0x2000399c
    2dc4:	2000502c 	.word	0x2000502c
    2dc8:	200039a0 	.word	0x200039a0
    2dcc:	20005038 	.word	0x20005038
    2dd0:	200039a4 	.word	0x200039a4
    2dd4:	20005044 	.word	0x20005044
    2dd8:	200039a8 	.word	0x200039a8
    2ddc:	20005048 	.word	0x20005048
    2de0:	200039ac 	.word	0x200039ac
    2de4:	2000504c 	.word	0x2000504c
    2de8:	200039b0 	.word	0x200039b0
    2dec:	20005050 	.word	0x20005050
    2df0:	200039b4 	.word	0x200039b4
    2df4:	20005054 	.word	0x20005054
    2df8:	20003984 	.word	0x20003984
    2dfc:	20005004 	.word	0x20005004
    2e00:	20003988 	.word	0x20003988
    2e04:	20005008 	.word	0x20005008
    2e08:	2000398c 	.word	0x2000398c
    2e0c:	2000500c 	.word	0x2000500c
    2e10:	20003990 	.word	0x20003990
    2e14:	20005010 	.word	0x20005010
    2e18:	2000535c 	.word	0x2000535c
    2e1c:	20005360 	.word	0x20005360
    2e20:	20005364 	.word	0x20005364
    2e24:	20005368 	.word	0x20005368
    2e28:	2000536c 	.word	0x2000536c
    2e2c:	20005370 	.word	0x20005370
    2e30:	20005374 	.word	0x20005374
    2e34:	200050e0 	.word	0x200050e0
    2e38:	200050e8 	.word	0x200050e8
    2e3c:	200050f0 	.word	0x200050f0
    2e40:	200050f8 	.word	0x200050f8
    2e44:	20005100 	.word	0x20005100
    2e48:	20005108 	.word	0x20005108
    2e4c:	200053cb 	.word	0x200053cb
    2e50:	200031f4 	.word	0x200031f4
    2e54:	2000336c 	.word	0x2000336c
    2e58:	20002ff8 	.word	0x20002ff8
    2e5c:	200053be 	.word	0x200053be

00002e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>:

    /** \brief Constructs a Matrix or Array and initializes it by elements given by an initializer list of initializer
      * lists \cpp11
      */
    EIGEN_DEVICE_FUNC
    explicit EIGEN_STRONG_INLINE PlainObjectBase(const std::initializer_list<std::initializer_list<Scalar>>& list)
    2e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
    2e62:	680e      	ldr	r6, [r1, #0]
      size() const noexcept { return _M_len; }
    2e64:	684b      	ldr	r3, [r1, #4]

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    2e66:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
      : m_storage()
    {
      _check_template_params();

      size_t list_size = 0;
      if (list.begin() != list.end()) {
    2e6a:	42be      	cmp	r6, r7
    2e6c:	d02c      	beq.n	2ec8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x68>
      size() const noexcept { return _M_len; }
    2e6e:	6872      	ldr	r2, [r6, #4]
      if (ColsAtCompileTime == 1 && list.size() == 1) {
        eigen_assert(list_size == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
        resize(list_size, ColsAtCompileTime);
        std::copy(list.begin()->begin(), list.begin()->end(), m_storage.data());
      } else {
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
    2e70:	2b03      	cmp	r3, #3
    2e72:	d12b      	bne.n	2ecc <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x6c>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
    2e74:	2a03      	cmp	r2, #3
    2e76:	d103      	bne.n	2e80 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
        resize(list.size(), list_size);

        Index row_index = 0;
        for (const std::initializer_list<Scalar>& row : list) {
    2e78:	4605      	mov	r5, r0
    2e7a:	46b6      	mov	lr, r6
        Index row_index = 0;
    2e7c:	2400      	movs	r4, #0
    2e7e:	e013      	b.n	2ea8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x48>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
    2e80:	4b16      	ldr	r3, [pc, #88]	; (2edc <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7c>)
    2e82:	4a17      	ldr	r2, [pc, #92]	; (2ee0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
    2e84:	f240 2139 	movw	r1, #569	; 0x239
    2e88:	4816      	ldr	r0, [pc, #88]	; (2ee4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
    2e8a:	f00e faef 	bl	1146c <__assert_func>
          eigen_assert(list_size == row.size());
    2e8e:	4b16      	ldr	r3, [pc, #88]	; (2ee8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x88>)
    2e90:	4a13      	ldr	r2, [pc, #76]	; (2ee0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
    2e92:	f240 213e 	movw	r1, #574	; 0x23e
    2e96:	4813      	ldr	r0, [pc, #76]	; (2ee4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
    2e98:	f00e fae8 	bl	1146c <__assert_func>
          Index col_index = 0;
          for (const Scalar& e : row) {
            coeffRef(row_index, col_index) = e;
            ++col_index;
          }
          ++row_index;
    2e9c:	3401      	adds	r4, #1
        for (const std::initializer_list<Scalar>& row : list) {
    2e9e:	f10e 0e08 	add.w	lr, lr, #8
    2ea2:	3504      	adds	r5, #4
    2ea4:	4577      	cmp	r7, lr
    2ea6:	d018      	beq.n	2eda <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7a>
          eigen_assert(list_size == row.size());
    2ea8:	f8de 3004 	ldr.w	r3, [lr, #4]
    2eac:	2b03      	cmp	r3, #3
    2eae:	d1ee      	bne.n	2e8e <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x2e>
          for (const Scalar& e : row) {
    2eb0:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
    2eb4:	f103 0c0c 	add.w	ip, r3, #12
      begin() const noexcept { return _M_array; }
    2eb8:	462a      	mov	r2, r5
            coeffRef(row_index, col_index) = e;
    2eba:	f853 1b04 	ldr.w	r1, [r3], #4
    2ebe:	f842 1b0c 	str.w	r1, [r2], #12
          for (const Scalar& e : row) {
    2ec2:	4563      	cmp	r3, ip
    2ec4:	d1f9      	bne.n	2eba <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x5a>
    2ec6:	e7e9      	b.n	2e9c <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x3c>
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
    2ec8:	2b03      	cmp	r3, #3
    2eca:	d0d9      	beq.n	2e80 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
    2ecc:	4b07      	ldr	r3, [pc, #28]	; (2eec <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x8c>)
    2ece:	4a04      	ldr	r2, [pc, #16]	; (2ee0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
    2ed0:	f44f 710e 	mov.w	r1, #568	; 0x238
    2ed4:	4803      	ldr	r0, [pc, #12]	; (2ee4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
    2ed6:	f00e fac9 	bl	1146c <__assert_func>
        }
      }
    }
    2eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2edc:	20002254 	.word	0x20002254
    2ee0:	20002108 	.word	0x20002108
    2ee4:	20002200 	.word	0x20002200
    2ee8:	200022a8 	.word	0x200022a8
    2eec:	200020b0 	.word	0x200020b0

00002ef0 <__static_initialization_and_destruction_0(int, int)>:
    rising_edge_start_6 = micros();
  }
  else if(trigger == 0) {
    channel_6_raw = micros() - rising_edge_start_6;
  }
}
    2ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2ef4:	4299      	cmp	r1, r3
    2ef6:	d101      	bne.n	2efc <__static_initialization_and_destruction_0(int, int)+0xc>
    2ef8:	2801      	cmp	r0, #1
    2efa:	d000      	beq.n	2efe <__static_initialization_and_destruction_0(int, int)+0xe>
    2efc:	4770      	bx	lr
    2efe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2f02:	b0e7      	sub	sp, #412	; 0x19c
  MPU6050 mpu6050;
    2f04:	2168      	movs	r1, #104	; 0x68
    2f06:	48aa      	ldr	r0, [pc, #680]	; (31b0 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    2f08:	f001 f82c 	bl	3f64 <MPU6050::MPU6050(unsigned char)>
float Kp_roll_angle = 0.2*Kp_scale*0.95;
    2f0c:	4ba9      	ldr	r3, [pc, #676]	; (31b4 <__static_initialization_and_destruction_0(int, int)+0x2c4>)
    2f0e:	ed93 7a00 	vldr	s14, [r3]
    2f12:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2f16:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 3188 <__static_initialization_and_destruction_0(int, int)+0x298>
    2f1a:	ee27 7b06 	vmul.f64	d7, d7, d6
    2f1e:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 3190 <__static_initialization_and_destruction_0(int, int)+0x2a0>
    2f22:	ee27 6b06 	vmul.f64	d6, d7, d6
    2f26:	eef7 4bc6 	vcvt.f32.f64	s9, d6
    2f2a:	4ba3      	ldr	r3, [pc, #652]	; (31b8 <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    2f2c:	edc3 4a00 	vstr	s9, [r3]
float Ki_roll_angle = 0.3*Ki_scale*1.01;
    2f30:	4ba2      	ldr	r3, [pc, #648]	; (31bc <__static_initialization_and_destruction_0(int, int)+0x2cc>)
    2f32:	ed93 5a00 	vldr	s10, [r3]
    2f36:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    2f3a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 3198 <__static_initialization_and_destruction_0(int, int)+0x2a8>
    2f3e:	ee25 5b06 	vmul.f64	d5, d5, d6
    2f42:	f8df 8300 	ldr.w	r8, [pc, #768]	; 3244 <__static_initialization_and_destruction_0(int, int)+0x354>
    2f46:	ed9f 3b96 	vldr	d3, [pc, #600]	; 31a0 <__static_initialization_and_destruction_0(int, int)+0x2b0>
    2f4a:	ee25 6b03 	vmul.f64	d6, d5, d3
    2f4e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    2f52:	ed88 6a00 	vstr	s12, [r8]
float Kd_roll_angle = 0.05*Kd_scale*1.01;
    2f56:	4b9a      	ldr	r3, [pc, #616]	; (31c0 <__static_initialization_and_destruction_0(int, int)+0x2d0>)
    2f58:	ed93 6a00 	vldr	s12, [r3]
    2f5c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2f60:	ed9f 2b91 	vldr	d2, [pc, #580]	; 31a8 <__static_initialization_and_destruction_0(int, int)+0x2b8>
    2f64:	ee26 6b02 	vmul.f64	d6, d6, d2
    2f68:	4e96      	ldr	r6, [pc, #600]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x2d4>)
    2f6a:	ee26 3b03 	vmul.f64	d3, d6, d3
    2f6e:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
    2f72:	ed86 3a00 	vstr	s6, [r6]
float Kp_pitch_angle = 0.2*Kp_scale;
    2f76:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2f7a:	4b93      	ldr	r3, [pc, #588]	; (31c8 <__static_initialization_and_destruction_0(int, int)+0x2d8>)
    2f7c:	ed83 7a00 	vstr	s14, [r3]
float Ki_pitch_angle = 0.3*Ki_scale;
    2f80:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 3248 <__static_initialization_and_destruction_0(int, int)+0x358>
    2f84:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    2f88:	ed89 5a00 	vstr	s10, [r9]
float Kd_pitch_angle = 0.05*Kd_scale;
    2f8c:	4f8f      	ldr	r7, [pc, #572]	; (31cc <__static_initialization_and_destruction_0(int, int)+0x2dc>)
    2f8e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    2f92:	ed87 6a00 	vstr	s12, [r7]
												{0, 0, Kp_roll_angle}};
    2f96:	aa08      	add	r2, sp, #32
    2f98:	ed8d 7a08 	vstr	s14, [sp, #32]
    2f9c:	2400      	movs	r4, #0
    2f9e:	9409      	str	r4, [sp, #36]	; 0x24
    2fa0:	940a      	str	r4, [sp, #40]	; 0x28
    2fa2:	ab02      	add	r3, sp, #8
    2fa4:	9202      	str	r2, [sp, #8]
    2fa6:	2503      	movs	r5, #3
    2fa8:	9503      	str	r5, [sp, #12]
    2faa:	aa0b      	add	r2, sp, #44	; 0x2c
    2fac:	940b      	str	r4, [sp, #44]	; 0x2c
    2fae:	4988      	ldr	r1, [pc, #544]	; (31d0 <__static_initialization_and_destruction_0(int, int)+0x2e0>)
    2fb0:	6809      	ldr	r1, [r1, #0]
    2fb2:	910c      	str	r1, [sp, #48]	; 0x30
    2fb4:	940d      	str	r4, [sp, #52]	; 0x34
    2fb6:	9204      	str	r2, [sp, #16]
    2fb8:	9505      	str	r5, [sp, #20]
    2fba:	aa0e      	add	r2, sp, #56	; 0x38
    2fbc:	940e      	str	r4, [sp, #56]	; 0x38
    2fbe:	940f      	str	r4, [sp, #60]	; 0x3c
    2fc0:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
    2fc4:	9206      	str	r2, [sp, #24]
    2fc6:	9507      	str	r5, [sp, #28]
    2fc8:	9300      	str	r3, [sp, #0]
    2fca:	9501      	str	r5, [sp, #4]
      * and implicit transposition is allowed for compile-time vectors only.
      *
      * \sa Matrix(const Scalar& a0, const Scalar& a1, const Scalar& a2,  const Scalar& a3, const ArgTypes&... args)
      */
    EIGEN_DEVICE_FUNC
    explicit EIGEN_STRONG_INLINE Matrix(const std::initializer_list<std::initializer_list<Scalar>>& list) : Base(list) {}
    2fcc:	4669      	mov	r1, sp
    2fce:	4881      	ldr	r0, [pc, #516]	; (31d4 <__static_initialization_and_destruction_0(int, int)+0x2e4>)
    2fd0:	f7ff ff46 	bl	2e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
												{0, 0, Ki_roll_angle}};
    2fd4:	aa19      	add	r2, sp, #100	; 0x64
    2fd6:	f8d9 3000 	ldr.w	r3, [r9]
    2fda:	9319      	str	r3, [sp, #100]	; 0x64
    2fdc:	941a      	str	r4, [sp, #104]	; 0x68
    2fde:	941b      	str	r4, [sp, #108]	; 0x6c
    2fe0:	ab13      	add	r3, sp, #76	; 0x4c
    2fe2:	9213      	str	r2, [sp, #76]	; 0x4c
    2fe4:	9514      	str	r5, [sp, #80]	; 0x50
    2fe6:	aa1c      	add	r2, sp, #112	; 0x70
    2fe8:	941c      	str	r4, [sp, #112]	; 0x70
    2fea:	497b      	ldr	r1, [pc, #492]	; (31d8 <__static_initialization_and_destruction_0(int, int)+0x2e8>)
    2fec:	6809      	ldr	r1, [r1, #0]
    2fee:	911d      	str	r1, [sp, #116]	; 0x74
    2ff0:	941e      	str	r4, [sp, #120]	; 0x78
    2ff2:	9215      	str	r2, [sp, #84]	; 0x54
    2ff4:	9516      	str	r5, [sp, #88]	; 0x58
    2ff6:	aa1f      	add	r2, sp, #124	; 0x7c
    2ff8:	941f      	str	r4, [sp, #124]	; 0x7c
    2ffa:	9420      	str	r4, [sp, #128]	; 0x80
    2ffc:	f8d8 1000 	ldr.w	r1, [r8]
    3000:	9121      	str	r1, [sp, #132]	; 0x84
    3002:	9217      	str	r2, [sp, #92]	; 0x5c
    3004:	9518      	str	r5, [sp, #96]	; 0x60
    3006:	9311      	str	r3, [sp, #68]	; 0x44
    3008:	9512      	str	r5, [sp, #72]	; 0x48
    300a:	a911      	add	r1, sp, #68	; 0x44
    300c:	4873      	ldr	r0, [pc, #460]	; (31dc <__static_initialization_and_destruction_0(int, int)+0x2ec>)
    300e:	f7ff ff27 	bl	2e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
const Matrix3f D_gains {{-Kd_pitch_angle, 0, 0},
    3012:	edd7 7a00 	vldr	s15, [r7]
    3016:	eef1 7a67 	vneg.f32	s15, s15
												{0, 0, -Kd_roll_angle}};
    301a:	edcd 7a2a 	vstr	s15, [sp, #168]	; 0xa8
    301e:	942b      	str	r4, [sp, #172]	; 0xac
    3020:	942c      	str	r4, [sp, #176]	; 0xb0
    3022:	ab24      	add	r3, sp, #144	; 0x90
    3024:	aa2a      	add	r2, sp, #168	; 0xa8
    3026:	9224      	str	r2, [sp, #144]	; 0x90
    3028:	9525      	str	r5, [sp, #148]	; 0x94
    302a:	942d      	str	r4, [sp, #180]	; 0xb4
    302c:	4a6c      	ldr	r2, [pc, #432]	; (31e0 <__static_initialization_and_destruction_0(int, int)+0x2f0>)
    302e:	6812      	ldr	r2, [r2, #0]
    3030:	922e      	str	r2, [sp, #184]	; 0xb8
    3032:	942f      	str	r4, [sp, #188]	; 0xbc
    3034:	aa2d      	add	r2, sp, #180	; 0xb4
    3036:	9226      	str	r2, [sp, #152]	; 0x98
    3038:	9527      	str	r5, [sp, #156]	; 0x9c
    303a:	9430      	str	r4, [sp, #192]	; 0xc0
    303c:	9431      	str	r4, [sp, #196]	; 0xc4
    303e:	edd6 7a00 	vldr	s15, [r6]
    3042:	eef1 7a67 	vneg.f32	s15, s15
    3046:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
    304a:	aa30      	add	r2, sp, #192	; 0xc0
    304c:	9228      	str	r2, [sp, #160]	; 0xa0
    304e:	9529      	str	r5, [sp, #164]	; 0xa4
    3050:	9322      	str	r3, [sp, #136]	; 0x88
    3052:	9523      	str	r5, [sp, #140]	; 0x8c
    3054:	a922      	add	r1, sp, #136	; 0x88
    3056:	4863      	ldr	r0, [pc, #396]	; (31e4 <__static_initialization_and_destruction_0(int, int)+0x2f4>)
    3058:	f7ff ff02 	bl	2e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
											{0, 0, 1}};
    305c:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    3060:	963b      	str	r6, [sp, #236]	; 0xec
    3062:	943c      	str	r4, [sp, #240]	; 0xf0
    3064:	943d      	str	r4, [sp, #244]	; 0xf4
    3066:	ab3b      	add	r3, sp, #236	; 0xec
    3068:	9335      	str	r3, [sp, #212]	; 0xd4
    306a:	9536      	str	r5, [sp, #216]	; 0xd8
    306c:	943e      	str	r4, [sp, #248]	; 0xf8
    306e:	963f      	str	r6, [sp, #252]	; 0xfc
    3070:	9440      	str	r4, [sp, #256]	; 0x100
    3072:	ab3e      	add	r3, sp, #248	; 0xf8
    3074:	9337      	str	r3, [sp, #220]	; 0xdc
    3076:	9538      	str	r5, [sp, #224]	; 0xe0
    3078:	9441      	str	r4, [sp, #260]	; 0x104
    307a:	9442      	str	r4, [sp, #264]	; 0x108
    307c:	9643      	str	r6, [sp, #268]	; 0x10c
    307e:	ab41      	add	r3, sp, #260	; 0x104
    3080:	9339      	str	r3, [sp, #228]	; 0xe4
    3082:	953a      	str	r5, [sp, #232]	; 0xe8
    3084:	ab35      	add	r3, sp, #212	; 0xd4
    3086:	9333      	str	r3, [sp, #204]	; 0xcc
    3088:	9534      	str	r5, [sp, #208]	; 0xd0
    308a:	a933      	add	r1, sp, #204	; 0xcc
    308c:	4856      	ldr	r0, [pc, #344]	; (31e8 <__static_initialization_and_destruction_0(int, int)+0x2f8>)
    308e:	f7ff fee7 	bl	2e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
											{0, 0, 1}};
    3092:	964c      	str	r6, [sp, #304]	; 0x130
    3094:	944d      	str	r4, [sp, #308]	; 0x134
    3096:	944e      	str	r4, [sp, #312]	; 0x138
    3098:	ab4c      	add	r3, sp, #304	; 0x130
    309a:	9346      	str	r3, [sp, #280]	; 0x118
    309c:	9547      	str	r5, [sp, #284]	; 0x11c
    309e:	944f      	str	r4, [sp, #316]	; 0x13c
    30a0:	9650      	str	r6, [sp, #320]	; 0x140
    30a2:	9451      	str	r4, [sp, #324]	; 0x144
    30a4:	ab4f      	add	r3, sp, #316	; 0x13c
    30a6:	9348      	str	r3, [sp, #288]	; 0x120
    30a8:	9549      	str	r5, [sp, #292]	; 0x124
    30aa:	9452      	str	r4, [sp, #328]	; 0x148
    30ac:	9453      	str	r4, [sp, #332]	; 0x14c
    30ae:	9654      	str	r6, [sp, #336]	; 0x150
    30b0:	ab52      	add	r3, sp, #328	; 0x148
    30b2:	934a      	str	r3, [sp, #296]	; 0x128
    30b4:	954b      	str	r5, [sp, #300]	; 0x12c
    30b6:	ab46      	add	r3, sp, #280	; 0x118
    30b8:	9344      	str	r3, [sp, #272]	; 0x110
    30ba:	9545      	str	r5, [sp, #276]	; 0x114
    30bc:	a944      	add	r1, sp, #272	; 0x110
    30be:	484b      	ldr	r0, [pc, #300]	; (31ec <__static_initialization_and_destruction_0(int, int)+0x2fc>)
    30c0:	f7ff fece 	bl	2e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
											{0, 0, 1}};
    30c4:	965d      	str	r6, [sp, #372]	; 0x174
    30c6:	945e      	str	r4, [sp, #376]	; 0x178
    30c8:	945f      	str	r4, [sp, #380]	; 0x17c
    30ca:	ab5d      	add	r3, sp, #372	; 0x174
    30cc:	9357      	str	r3, [sp, #348]	; 0x15c
    30ce:	9558      	str	r5, [sp, #352]	; 0x160
    30d0:	9460      	str	r4, [sp, #384]	; 0x180
    30d2:	9661      	str	r6, [sp, #388]	; 0x184
    30d4:	9462      	str	r4, [sp, #392]	; 0x188
    30d6:	ab60      	add	r3, sp, #384	; 0x180
    30d8:	9359      	str	r3, [sp, #356]	; 0x164
    30da:	955a      	str	r5, [sp, #360]	; 0x168
    30dc:	9463      	str	r4, [sp, #396]	; 0x18c
    30de:	9464      	str	r4, [sp, #400]	; 0x190
    30e0:	9665      	str	r6, [sp, #404]	; 0x194
    30e2:	ab63      	add	r3, sp, #396	; 0x18c
    30e4:	935b      	str	r3, [sp, #364]	; 0x16c
    30e6:	955c      	str	r5, [sp, #368]	; 0x170
    30e8:	ab57      	add	r3, sp, #348	; 0x15c
    30ea:	9355      	str	r3, [sp, #340]	; 0x154
    30ec:	9556      	str	r5, [sp, #344]	; 0x158
    30ee:	a955      	add	r1, sp, #340	; 0x154
    30f0:	483f      	ldr	r0, [pc, #252]	; (31f0 <__static_initialization_and_destruction_0(int, int)+0x300>)
    30f2:	f7ff feb5 	bl	2e60 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
PWMServo iris;
    30f6:	483f      	ldr	r0, [pc, #252]	; (31f4 <__static_initialization_and_destruction_0(int, int)+0x304>)
    30f8:	f001 ff5a 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo1;
    30fc:	483e      	ldr	r0, [pc, #248]	; (31f8 <__static_initialization_and_destruction_0(int, int)+0x308>)
    30fe:	f001 ff57 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo2;
    3102:	483e      	ldr	r0, [pc, #248]	; (31fc <__static_initialization_and_destruction_0(int, int)+0x30c>)
    3104:	f001 ff54 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo3;
    3108:	483d      	ldr	r0, [pc, #244]	; (3200 <__static_initialization_and_destruction_0(int, int)+0x310>)
    310a:	f001 ff51 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo4;
    310e:	483d      	ldr	r0, [pc, #244]	; (3204 <__static_initialization_and_destruction_0(int, int)+0x314>)
    3110:	f001 ff4e 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo5;
    3114:	483c      	ldr	r0, [pc, #240]	; (3208 <__static_initialization_and_destruction_0(int, int)+0x318>)
    3116:	f001 ff4b 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo6;
    311a:	483c      	ldr	r0, [pc, #240]	; (320c <__static_initialization_and_destruction_0(int, int)+0x31c>)
    311c:	f001 ff48 	bl	4fb0 <PWMServo::PWMServo()>
PWMServo servo7;
    3120:	483b      	ldr	r0, [pc, #236]	; (3210 <__static_initialization_and_destruction_0(int, int)+0x320>)
    3122:	f001 ff45 	bl	4fb0 <PWMServo::PWMServo()>
  SBUS sbus(Serial5);
    3126:	4e3b      	ldr	r6, [pc, #236]	; (3214 <__static_initialization_and_destruction_0(int, int)+0x324>)
    3128:	493b      	ldr	r1, [pc, #236]	; (3218 <__static_initialization_and_destruction_0(int, int)+0x328>)
    312a:	4630      	mov	r0, r6
    312c:	f000 ffac 	bl	4088 <SBUS::SBUS(HardwareSerial&)>
    3130:	4d3a      	ldr	r5, [pc, #232]	; (321c <__static_initialization_and_destruction_0(int, int)+0x32c>)
    3132:	462a      	mov	r2, r5
    3134:	493a      	ldr	r1, [pc, #232]	; (3220 <__static_initialization_and_destruction_0(int, int)+0x330>)
    3136:	4630      	mov	r0, r6
    3138:	f00d fd44 	bl	10bc4 <__aeabi_atexit>
String filePrefix = "flight_data";
    313c:	4f39      	ldr	r7, [pc, #228]	; (3224 <__static_initialization_and_destruction_0(int, int)+0x334>)
    313e:	493a      	ldr	r1, [pc, #232]	; (3228 <__static_initialization_and_destruction_0(int, int)+0x338>)
    3140:	4638      	mov	r0, r7
    3142:	f009 fdac 	bl	cc9e <String::String(char const*)>
    3146:	4e39      	ldr	r6, [pc, #228]	; (322c <__static_initialization_and_destruction_0(int, int)+0x33c>)
    3148:	462a      	mov	r2, r5
    314a:	4631      	mov	r1, r6
    314c:	4638      	mov	r0, r7
    314e:	f00d fd39 	bl	10bc4 <__aeabi_atexit>
String fileExtension = ".csv";
    3152:	4f37      	ldr	r7, [pc, #220]	; (3230 <__static_initialization_and_destruction_0(int, int)+0x340>)
    3154:	4937      	ldr	r1, [pc, #220]	; (3234 <__static_initialization_and_destruction_0(int, int)+0x344>)
    3156:	4638      	mov	r0, r7
    3158:	f009 fda1 	bl	cc9e <String::String(char const*)>
    315c:	462a      	mov	r2, r5
    315e:	4631      	mov	r1, r6
    3160:	4638      	mov	r0, r7
    3162:	f00d fd2f 	bl	10bc4 <__aeabi_atexit>
String fileName;
    3166:	4f34      	ldr	r7, [pc, #208]	; (3238 <__static_initialization_and_destruction_0(int, int)+0x348>)
    3168:	2100      	movs	r1, #0
    316a:	4638      	mov	r0, r7
    316c:	f009 fd97 	bl	cc9e <String::String(char const*)>
    3170:	462a      	mov	r2, r5
    3172:	4631      	mov	r1, r6
    3174:	4638      	mov	r0, r7
    3176:	f00d fd25 	bl	10bc4 <__aeabi_atexit>
File dataFile;
    317a:	462a      	mov	r2, r5
    317c:	492f      	ldr	r1, [pc, #188]	; (323c <__static_initialization_and_destruction_0(int, int)+0x34c>)
    317e:	4830      	ldr	r0, [pc, #192]	; (3240 <__static_initialization_and_destruction_0(int, int)+0x350>)
    3180:	f00d fd20 	bl	10bc4 <__aeabi_atexit>
    3184:	e062      	b.n	324c <__static_initialization_and_destruction_0(int, int)+0x35c>
    3186:	bf00      	nop
    3188:	9999999a 	.word	0x9999999a
    318c:	3fc99999 	.word	0x3fc99999
    3190:	66666666 	.word	0x66666666
    3194:	3fee6666 	.word	0x3fee6666
    3198:	33333333 	.word	0x33333333
    319c:	3fd33333 	.word	0x3fd33333
    31a0:	c28f5c29 	.word	0xc28f5c29
    31a4:	3ff028f5 	.word	0x3ff028f5
    31a8:	9999999a 	.word	0x9999999a
    31ac:	3fa99999 	.word	0x3fa99999
    31b0:	20005110 	.word	0x20005110
    31b4:	20003358 	.word	0x20003358
    31b8:	20004114 	.word	0x20004114
    31bc:	20003350 	.word	0x20003350
    31c0:	20003348 	.word	0x20003348
    31c4:	20004104 	.word	0x20004104
    31c8:	20004110 	.word	0x20004110
    31cc:	20004100 	.word	0x20004100
    31d0:	2000335c 	.word	0x2000335c
    31d4:	20004c30 	.word	0x20004c30
    31d8:	20003354 	.word	0x20003354
    31dc:	20004c0c 	.word	0x20004c0c
    31e0:	2000334c 	.word	0x2000334c
    31e4:	20004be8 	.word	0x20004be8
    31e8:	2000413c 	.word	0x2000413c
    31ec:	200040dc 	.word	0x200040dc
    31f0:	200040a0 	.word	0x200040a0
    31f4:	200050dc 	.word	0x200050dc
    31f8:	2000535c 	.word	0x2000535c
    31fc:	20005360 	.word	0x20005360
    3200:	20005364 	.word	0x20005364
    3204:	20005368 	.word	0x20005368
    3208:	2000536c 	.word	0x2000536c
    320c:	20005370 	.word	0x20005370
    3210:	20005374 	.word	0x20005374
    3214:	200051f8 	.word	0x200051f8
    3218:	20004724 	.word	0x20004724
    321c:	200033e8 	.word	0x200033e8
    3220:	000040d1 	.word	0x000040d1
    3224:	200050cc 	.word	0x200050cc
    3228:	20001d7c 	.word	0x20001d7c
    322c:	0000cc0d 	.word	0x0000cc0d
    3230:	200050ac 	.word	0x200050ac
    3234:	20001d88 	.word	0x20001d88
    3238:	200050bc 	.word	0x200050bc
    323c:	000007e5 	.word	0x000007e5
    3240:	200039bc 	.word	0x200039bc
    3244:	2000410c 	.word	0x2000410c
    3248:	20004108 	.word	0x20004108
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
    324c:	4b07      	ldr	r3, [pc, #28]	; (326c <__static_initialization_and_destruction_0(int, int)+0x37c>)
    324e:	601c      	str	r4, [r3, #0]
      m_storage.data()[1] = y;
    3250:	605c      	str	r4, [r3, #4]
      m_storage.data()[2] = z;
    3252:	609c      	str	r4, [r3, #8]
      m_storage.data()[0] = x;
    3254:	4b06      	ldr	r3, [pc, #24]	; (3270 <__static_initialization_and_destruction_0(int, int)+0x380>)
    3256:	601c      	str	r4, [r3, #0]
      m_storage.data()[1] = y;
    3258:	605c      	str	r4, [r3, #4]
      m_storage.data()[2] = z;
    325a:	609c      	str	r4, [r3, #8]
      m_storage.data()[0] = x;
    325c:	4b05      	ldr	r3, [pc, #20]	; (3274 <__static_initialization_and_destruction_0(int, int)+0x384>)
    325e:	601c      	str	r4, [r3, #0]
      m_storage.data()[1] = y;
    3260:	605c      	str	r4, [r3, #4]
      m_storage.data()[2] = z;
    3262:	609c      	str	r4, [r3, #8]
    3264:	b067      	add	sp, #412	; 0x19c
    3266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    326a:	bf00      	nop
    326c:	20005078 	.word	0x20005078
    3270:	20005058 	.word	0x20005058
    3274:	20005138 	.word	0x20005138

00003278 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>:
    Flags = Base::Flags | EvalBeforeNestingBit
  };

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
    : m_result(xpr.rows(), xpr.cols())
    3278:	1d03      	adds	r3, r0, #4

// this helper permits to completely eliminate m_outerStride if it is known at compiletime.
template<typename Scalar,int OuterStride> class plainobjectbase_evaluator_data {
public:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
    327a:	6003      	str	r3, [r0, #0]
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const LhsNestedCleaned& lhs() const { return m_lhs; }
    327c:	680a      	ldr	r2, [r1, #0]
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const RhsNestedCleaned& rhs() const { return m_rhs; }
    327e:	684b      	ldr	r3, [r1, #4]
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3280:	edd2 7a06 	vldr	s15, [r2, #24]
    3284:	ed93 7a02 	vldr	s14, [r3, #8]
    3288:	ee67 7a87 	vmul.f32	s15, s15, s14
    328c:	ed92 7a03 	vldr	s14, [r2, #12]
    3290:	edd3 6a01 	vldr	s13, [r3, #4]
    3294:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3298:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    329c:	ed92 7a00 	vldr	s14, [r2]
    32a0:	edd3 6a00 	vldr	s13, [r3]
    32a4:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32a8:	ee77 7a87 	vadd.f32	s15, s15, s14
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
    32ac:	edc0 7a01 	vstr	s15, [r0, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32b0:	edd2 7a07 	vldr	s15, [r2, #28]
    32b4:	ed93 7a02 	vldr	s14, [r3, #8]
    32b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    32bc:	ed92 7a04 	vldr	s14, [r2, #16]
    32c0:	edd3 6a01 	vldr	s13, [r3, #4]
    32c4:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32c8:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32cc:	ed92 7a01 	vldr	s14, [r2, #4]
    32d0:	edd3 6a00 	vldr	s13, [r3]
    32d4:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    32dc:	edc0 7a02 	vstr	s15, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32e0:	edd2 7a08 	vldr	s15, [r2, #32]
    32e4:	ed93 7a02 	vldr	s14, [r3, #8]
    32e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    32ec:	ed92 7a05 	vldr	s14, [r2, #20]
    32f0:	edd3 6a01 	vldr	s13, [r3, #4]
    32f4:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32f8:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32fc:	ed92 7a02 	vldr	s14, [r2, #8]
    3300:	edd3 6a00 	vldr	s13, [r3]
    3304:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3308:	ee77 7a87 	vadd.f32	s15, s15, s14
    330c:	edc0 7a03 	vstr	s15, [r0, #12]
//     const RhsNested rhs(xpr.rhs());
//
//     generic_product_impl<LhsNestedCleaned, RhsNestedCleaned>::evalTo(m_result, lhs, rhs);

    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
  }
    3310:	4770      	bx	lr
	...

00003314 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)>:
using namespace Eigen;


Vector3f pidOutput(Vector3f refState, Vector3f currState, Matrix3f P_gains, 
									 Matrix3f I_gains, Matrix3f D_gains, float dt, bool lowThrottle,
									 float GyroX, float GyroY, float GyroZ) {
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	ed2d 8b02 	vpush	{d8}
    331a:	b0a8      	sub	sp, #160	; 0xa0
    331c:	4604      	mov	r4, r0
    331e:	f89d 50c0 	ldrb.w	r5, [sp, #192]	; 0xc0

	//----- DECLARATIONS -----//
	static const float i_limit = 25.0f;
	// Declared as static so that the variables remain in memory while the program is running, even
	// outside of this function.
	static Vector3f integralOld(0,0,0);
    3322:	4870      	ldr	r0, [pc, #448]	; (34e4 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d0>)
    3324:	6800      	ldr	r0, [r0, #0]
    3326:	f010 0f01 	tst.w	r0, #1
    332a:	d10b      	bne.n	3344 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x30>
      m_storage.data()[0] = x;
    332c:	486e      	ldr	r0, [pc, #440]	; (34e8 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d4>)
    332e:	f04f 0c00 	mov.w	ip, #0
    3332:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = y;
    3336:	f8c0 c004 	str.w	ip, [r0, #4]
      m_storage.data()[2] = z;
    333a:	f8c0 c008 	str.w	ip, [r0, #8]
    333e:	4869      	ldr	r0, [pc, #420]	; (34e4 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d0>)
    3340:	2601      	movs	r6, #1
    3342:	6006      	str	r6, [r0, #0]
	static Vector3f errorOld(0,0,0);
    3344:	4869      	ldr	r0, [pc, #420]	; (34ec <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d8>)
    3346:	6800      	ldr	r0, [r0, #0]
    3348:	f010 0f01 	tst.w	r0, #1
    334c:	d10b      	bne.n	3366 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x52>
      m_storage.data()[0] = x;
    334e:	4868      	ldr	r0, [pc, #416]	; (34f0 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1dc>)
    3350:	f04f 0c00 	mov.w	ip, #0
    3354:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = y;
    3358:	f8c0 c004 	str.w	ip, [r0, #4]
      m_storage.data()[2] = z;
    335c:	f8c0 c008 	str.w	ip, [r0, #8]
    3360:	4862      	ldr	r0, [pc, #392]	; (34ec <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d8>)
    3362:	2601      	movs	r6, #1
    3364:	6006      	str	r6, [r0, #0]
      m_storage.data()[0] = x;
    3366:	2000      	movs	r0, #0
    3368:	9022      	str	r0, [sp, #136]	; 0x88
      m_storage.data()[1] = y;
    336a:	9023      	str	r0, [sp, #140]	; 0x8c
      m_storage.data()[2] = z;
    336c:	9024      	str	r0, [sp, #144]	; 0x90
      m_storage.data()[0] = x;
    336e:	901f      	str	r0, [sp, #124]	; 0x7c
      m_storage.data()[1] = y;
    3370:	9020      	str	r0, [sp, #128]	; 0x80
      m_storage.data()[2] = z;
    3372:	9021      	str	r0, [sp, #132]	; 0x84
      m_storage.data()[0] = x;
    3374:	6020      	str	r0, [r4, #0]
      m_storage.data()[1] = y;
    3376:	6060      	str	r0, [r4, #4]
      m_storage.data()[2] = z;
    3378:	60a0      	str	r0, [r4, #8]
#else
  scalar_difference_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    337a:	edd1 6a00 	vldr	s13, [r1]
    337e:	edd2 7a00 	vldr	s15, [r2]
    3382:	ee76 6ae7 	vsub.f32	s13, s13, s15
    3386:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
    338a:	edd1 7a01 	vldr	s15, [r1, #4]
    338e:	ed91 7a02 	vldr	s14, [r1, #8]
    3392:	ed92 6a02 	vldr	s12, [r2, #8]
    3396:	ee37 7a46 	vsub.f32	s14, s14, s12
    339a:	ed8d 7a27 	vstr	s14, [sp, #156]	; 0x9c
	Vector3f derivative(0,0,0);
	Vector3f PIDValues(0,0,0);
	//----- END DECLARATIONS -----//
	
  error    = refState - currState;
	error[1] = refState[1] - GyroZ;
    339e:	ee77 1ae1 	vsub.f32	s3, s15, s3
    33a2:	edcd 1a26 	vstr	s3, [sp, #152]	; 0x98

	// Prevent integral buildup with low throttle
	if (!lowThrottle) {
    33a6:	b135      	cbz	r5, 33b6 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xa2>
      * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator[](Index index)
    33a8:	aa22      	add	r2, sp, #136	; 0x88
    33aa:	a925      	add	r1, sp, #148	; 0x94
		integral = integralOld + error*dt;
	}

	// Saturate integral to prevent buildup
	for (int lv1=0; lv1<3; lv1++) {
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    33ac:	eebb 6a09 	vmov.f32	s12, #185	; 0xc1c80000 -25.0
    33b0:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
    33b4:	e01f      	b.n	33f6 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xe2>
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33b6:	ee60 7a26 	vmul.f32	s15, s0, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33ba:	4a4b      	ldr	r2, [pc, #300]	; (34e8 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d4>)
    33bc:	ed92 6a00 	vldr	s12, [r2]
    33c0:	ee77 7a86 	vadd.f32	s15, s15, s12
    33c4:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33c8:	ee61 7a80 	vmul.f32	s15, s3, s0
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33cc:	ed92 6a01 	vldr	s12, [r2, #4]
    33d0:	ee77 7a86 	vadd.f32	s15, s15, s12
    33d4:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33d8:	ee60 7a07 	vmul.f32	s15, s0, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33dc:	ed92 6a02 	vldr	s12, [r2, #8]
    33e0:	ee77 7a86 	vadd.f32	s15, s15, s12
    33e4:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
    33e8:	e7de      	b.n	33a8 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x94>
    33ea:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    33ee:	ed42 7a01 	vstr	s15, [r2, #-4]
	for (int lv1=0; lv1<3; lv1++) {
    33f2:	428a      	cmp	r2, r1
    33f4:	d00d      	beq.n	3412 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xfe>
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    33f6:	ecf2 7a01 	vldmia	r2!, {s15}
    33fa:	eef4 7ac6 	vcmpe.f32	s15, s12
    33fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3402:	d4f2      	bmi.n	33ea <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xd6>
    3404:	eef4 7a65 	vcmp.f32	s15, s11
    3408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    340c:	fe75 7aa7 	vselgt.f32	s15, s11, s15
    3410:	e7ed      	b.n	33ee <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xda>
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3412:	4a37      	ldr	r2, [pc, #220]	; (34f0 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1dc>)
    3414:	edd2 7a01 	vldr	s15, [r2, #4]
    3418:	ee71 7ae7 	vsub.f32	s15, s3, s15
#else
  scalar_quotient_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
    341c:	ee87 6a80 	vdiv.f32	s12, s15, s0
    3420:	ed8d 6a20 	vstr	s12, [sp, #128]	; 0x80
	}

	derivative    = (error - errorOld) / dt;
	derivative[0] = GyroY;
    3424:	ed8d 1a1f 	vstr	s2, [sp, #124]	; 0x7c
	derivative[2] = GyroX;
    3428:	edcd 0a21 	vstr	s1, [sp, #132]	; 0x84
    342c:	492e      	ldr	r1, [pc, #184]	; (34e8 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d4>)
    342e:	9822      	ldr	r0, [sp, #136]	; 0x88
    3430:	6008      	str	r0, [r1, #0]
    3432:	9823      	ldr	r0, [sp, #140]	; 0x8c
    3434:	6048      	str	r0, [r1, #4]
    3436:	9824      	ldr	r0, [sp, #144]	; 0x90
    3438:	6088      	str	r0, [r1, #8]
    343a:	edc2 6a00 	vstr	s13, [r2]
    343e:	edc2 1a01 	vstr	s3, [r2, #4]
    3442:	ed82 7a02 	vstr	s14, [r2, #8]

namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
    3446:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 34f4 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1e0>
    344a:	ed8d 8a03 	vstr	s16, [sp, #12]
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
    344e:	9305      	str	r3, [sp, #20]
    3450:	ab25      	add	r3, sp, #148	; 0x94
    3452:	9306      	str	r3, [sp, #24]
    3454:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3456:	9307      	str	r3, [sp, #28]
    3458:	ab22      	add	r3, sp, #136	; 0x88
    345a:	9308      	str	r3, [sp, #32]
    345c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    345e:	930a      	str	r3, [sp, #40]	; 0x28
    3460:	ab1f      	add	r3, sp, #124	; 0x7c
    3462:	930b      	str	r3, [sp, #44]	; 0x2c
    3464:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
    3468:	a905      	add	r1, sp, #20
    346a:	a813      	add	r0, sp, #76	; 0x4c
    346c:	f7ff ff04 	bl	3278 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
    3470:	a907      	add	r1, sp, #28
    3472:	a817      	add	r0, sp, #92	; 0x5c
    3474:	f7ff ff00 	bl	3278 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
    3478:	a90a      	add	r1, sp, #40	; 0x28
    347a:	a81b      	add	r0, sp, #108	; 0x6c
    347c:	f7ff fefc 	bl	3278 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index index) const
  {
    return m_d.data[index];
    3480:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    3484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3486:	edd1 7a00 	vldr	s15, [r1]
    348a:	ed92 7a00 	vldr	s14, [r2]
    348e:	ee77 7a87 	vadd.f32	s15, s15, s14
    3492:	ed93 7a00 	vldr	s14, [r3]
    3496:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    349a:	ee67 7a88 	vmul.f32	s15, s15, s16
    349e:	edc4 7a00 	vstr	s15, [r4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34a2:	edd1 7a01 	vldr	s15, [r1, #4]
    34a6:	ed92 7a01 	vldr	s14, [r2, #4]
    34aa:	ee77 7a87 	vadd.f32	s15, s15, s14
    34ae:	ed93 7a01 	vldr	s14, [r3, #4]
    34b2:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34b6:	ee67 7a88 	vmul.f32	s15, s15, s16
    34ba:	edc4 7a01 	vstr	s15, [r4, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34be:	edd1 7a02 	vldr	s15, [r1, #8]
    34c2:	ed92 7a02 	vldr	s14, [r2, #8]
    34c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    34ca:	ed93 7a02 	vldr	s14, [r3, #8]
    34ce:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34d2:	ee67 7a88 	vmul.f32	s15, s15, s16
    34d6:	edc4 7a02 	vstr	s15, [r4, #8]
	integralOld   = integral;
	errorOld      = error;
	PIDValues     = 0.01f * (P_gains*error + I_gains*integral + D_gains*derivative);
	return PIDValues;
}
    34da:	4620      	mov	r0, r4
    34dc:	b028      	add	sp, #160	; 0xa0
    34de:	ecbd 8b02 	vpop	{d8}
    34e2:	bd70      	pop	{r4, r5, r6, pc}
    34e4:	20004b44 	.word	0x20004b44
    34e8:	20004ca8 	.word	0x20004ca8
    34ec:	20004b48 	.word	0x20004b48
    34f0:	20004cb4 	.word	0x20004cb4
    34f4:	3c23d70a 	.word	0x3c23d70a

000034f8 <loop>:
void loop() {
    34f8:	b530      	push	{r4, r5, lr}
    34fa:	b0b9      	sub	sp, #228	; 0xe4
  prev_time = current_time;      
    34fc:	4cda      	ldr	r4, [pc, #872]	; (3868 <loop+0x370>)
    34fe:	4ddb      	ldr	r5, [pc, #876]	; (386c <loop+0x374>)
    3500:	682b      	ldr	r3, [r5, #0]
    3502:	6023      	str	r3, [r4, #0]
  current_time = micros();      
    3504:	f009 fe4c 	bl	d1a0 <micros>
    3508:	6028      	str	r0, [r5, #0]
  dt = (current_time - prev_time)/1000000.0;
    350a:	6823      	ldr	r3, [r4, #0]
    350c:	1ac0      	subs	r0, r0, r3
    350e:	ee07 0a90 	vmov	s15, r0
    3512:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    3516:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 3860 <loop+0x368>
    351a:	ee87 6b05 	vdiv.f64	d6, d7, d5
    351e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    3522:	4bd3      	ldr	r3, [pc, #844]	; (3870 <loop+0x378>)
    3524:	ed83 6a00 	vstr	s12, [r3]
  loopBlink(); //Indicate we are in main loop with short blink every 1.5 seconds
    3528:	f7fe fb24 	bl	1b74 <loopBlink()>
  printRadioData();     
    352c:	f7fe fb70 	bl	1c10 <printRadioData()>
	if (channel_6_pwm < 1500) {
    3530:	4bd0      	ldr	r3, [pc, #832]	; (3874 <loop+0x37c>)
    3532:	681a      	ldr	r2, [r3, #0]
    3534:	f240 53db 	movw	r3, #1499	; 0x5db
    3538:	429a      	cmp	r2, r3
    353a:	f300 82d0 	bgt.w	3ade <loop+0x5e6>
		irisFlag = 0;
    353e:	4bce      	ldr	r3, [pc, #824]	; (3878 <loop+0x380>)
    3540:	2200      	movs	r2, #0
    3542:	701a      	strb	r2, [r3, #0]
		closeIris();
    3544:	f7fe fc8a 	bl	1e5c <closeIris()>
	if (channel_7_pwm > 1750) {
    3548:	4bcc      	ldr	r3, [pc, #816]	; (387c <loop+0x384>)
    354a:	681a      	ldr	r2, [r3, #0]
    354c:	f240 63d6 	movw	r3, #1750	; 0x6d6
    3550:	429a      	cmp	r2, r3
    3552:	f340 82ca 	ble.w	3aea <loop+0x5f2>
		conductSineSweep = 1;
    3556:	4bca      	ldr	r3, [pc, #808]	; (3880 <loop+0x388>)
    3558:	2201      	movs	r2, #1
    355a:	701a      	strb	r2, [r3, #0]
	if (SD_is_present && current_time - print_counterSD > 10000) {
    355c:	4bc9      	ldr	r3, [pc, #804]	; (3884 <loop+0x38c>)
    355e:	781b      	ldrb	r3, [r3, #0]
    3560:	b14b      	cbz	r3, 3576 <loop+0x7e>
    3562:	4bc2      	ldr	r3, [pc, #776]	; (386c <loop+0x374>)
    3564:	681b      	ldr	r3, [r3, #0]
    3566:	4ac8      	ldr	r2, [pc, #800]	; (3888 <loop+0x390>)
    3568:	6812      	ldr	r2, [r2, #0]
    356a:	1a9b      	subs	r3, r3, r2
    356c:	f242 7210 	movw	r2, #10000	; 0x2710
    3570:	4293      	cmp	r3, r2
    3572:	f200 82c1 	bhi.w	3af8 <loop+0x600>
  getIMUdata(); //Pulls raw gyro, accelerometer, and magnetometer data from IMU and LP filters to remove noise
    3576:	f7fd fa0b 	bl	990 <getIMUdata()>
  Madgwick(GyroX, -GyroY, -GyroZ, -AccX, AccY, AccZ, MagY, -MagX, MagZ, dt); //Updates roll_IMU, pitch_IMU, and yaw_IMU angle estimates (degrees)
    357a:	4bc4      	ldr	r3, [pc, #784]	; (388c <loop+0x394>)
    357c:	edd3 1a00 	vldr	s3, [r3]
    3580:	4bc3      	ldr	r3, [pc, #780]	; (3890 <loop+0x398>)
    3582:	ed93 1a00 	vldr	s2, [r3]
    3586:	4bc3      	ldr	r3, [pc, #780]	; (3894 <loop+0x39c>)
    3588:	edd3 0a00 	vldr	s1, [r3]
    Madgwick6DOF(gx, gy, gz, ax, ay, az, invSampleFreq);
    358c:	4bb8      	ldr	r3, [pc, #736]	; (3870 <loop+0x378>)
    358e:	ed93 3a00 	vldr	s6, [r3]
    3592:	4bc1      	ldr	r3, [pc, #772]	; (3898 <loop+0x3a0>)
    3594:	edd3 2a00 	vldr	s5, [r3]
    3598:	4bc0      	ldr	r3, [pc, #768]	; (389c <loop+0x3a4>)
    359a:	ed93 2a00 	vldr	s4, [r3]
    359e:	eef1 1a61 	vneg.f32	s3, s3
    35a2:	eeb1 1a41 	vneg.f32	s2, s2
    35a6:	eef1 0a60 	vneg.f32	s1, s1
    35aa:	4bbd      	ldr	r3, [pc, #756]	; (38a0 <loop+0x3a8>)
    35ac:	ed93 0a00 	vldr	s0, [r3]
    35b0:	f7ff f80e 	bl	25d0 <Madgwick6DOF(float, float, float, float, float, float, float)>
  getDesState(); //Convert raw commands to normalized values based on saturated control limits
    35b4:	f7fd fc90 	bl	ed8 <getDesState()>
	if (useSerialAngleCommands) {
    35b8:	4bba      	ldr	r3, [pc, #744]	; (38a4 <loop+0x3ac>)
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	2b00      	cmp	r3, #0
    35be:	f040 8362 	bne.w	3c86 <loop+0x78e>
	if (conductSineSweep) {
    35c2:	4baf      	ldr	r3, [pc, #700]	; (3880 <loop+0x388>)
    35c4:	781b      	ldrb	r3, [r3, #0]
    35c6:	2b00      	cmp	r3, #0
    35c8:	f040 8362 	bne.w	3c90 <loop+0x798>
	if (channel_8_pwm > 1250 && channel_8_pwm < 1750) {
    35cc:	4bb6      	ldr	r3, [pc, #728]	; (38a8 <loop+0x3b0>)
    35ce:	681b      	ldr	r3, [r3, #0]
    35d0:	f2a3 43e3 	subw	r3, r3, #1251	; 0x4e3
    35d4:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
    35d8:	f240 835f 	bls.w	3c9a <loop+0x7a2>
	if (channel_8_pwm > 1750) {
    35dc:	4bb2      	ldr	r3, [pc, #712]	; (38a8 <loop+0x3b0>)
    35de:	681a      	ldr	r2, [r3, #0]
    35e0:	f240 63d6 	movw	r3, #1750	; 0x6d6
    35e4:	429a      	cmp	r2, r3
    35e6:	f300 835b 	bgt.w	3ca0 <loop+0x7a8>
	desState[0] = pitch_des; 
    35ea:	4ab0      	ldr	r2, [pc, #704]	; (38ac <loop+0x3b4>)
    35ec:	4bb0      	ldr	r3, [pc, #704]	; (38b0 <loop+0x3b8>)
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	6013      	str	r3, [r2, #0]
	desState[1] = yaw_des; 
    35f2:	4bb0      	ldr	r3, [pc, #704]	; (38b4 <loop+0x3bc>)
    35f4:	681b      	ldr	r3, [r3, #0]
    35f6:	6053      	str	r3, [r2, #4]
	desState[2] = roll_des;
    35f8:	4baf      	ldr	r3, [pc, #700]	; (38b8 <loop+0x3c0>)
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	6093      	str	r3, [r2, #8]
	currState[0] = pitch_IMU; 
    35fe:	4baf      	ldr	r3, [pc, #700]	; (38bc <loop+0x3c4>)
    3600:	49af      	ldr	r1, [pc, #700]	; (38c0 <loop+0x3c8>)
    3602:	6809      	ldr	r1, [r1, #0]
    3604:	6019      	str	r1, [r3, #0]
	currState[1] = yaw_IMU; 
    3606:	49af      	ldr	r1, [pc, #700]	; (38c4 <loop+0x3cc>)
    3608:	6809      	ldr	r1, [r1, #0]
    360a:	6059      	str	r1, [r3, #4]
	currState[2] = roll_IMU;
    360c:	49ae      	ldr	r1, [pc, #696]	; (38c8 <loop+0x3d0>)
    360e:	6809      	ldr	r1, [r1, #0]
    3610:	6099      	str	r1, [r3, #8]
      : Base(), m_storage(other.m_storage) { }
    3612:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
    3616:	ca07      	ldmia	r2, {r0, r1, r2}
    3618:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    361c:	f10d 0ed4 	add.w	lr, sp, #212	; 0xd4
    3620:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3624:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index row, Index col) const
  {
    return m_data[col * colStride() + row * rowStride()];
    3628:	4aa8      	ldr	r2, [pc, #672]	; (38cc <loop+0x3d4>)
    362a:	edd2 3a00 	vldr	s7, [r2]
    362e:	4ba8      	ldr	r3, [pc, #672]	; (38d0 <loop+0x3d8>)
    3630:	edd3 2a00 	vldr	s5, [r3]
    3634:	ed92 3a03 	vldr	s6, [r2, #12]
    3638:	ed93 2a01 	vldr	s4, [r3, #4]
    363c:	edd2 6a06 	vldr	s13, [r2, #24]
    3640:	ed93 6a02 	vldr	s12, [r3, #8]
    3644:	ee66 7a86 	vmul.f32	s15, s13, s12
    3648:	ee23 7a02 	vmul.f32	s14, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    364c:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3650:	ee23 7aa2 	vmul.f32	s14, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3654:	ee77 7a87 	vadd.f32	s15, s15, s14
    3658:	edcd 7a05 	vstr	s15, [sp, #20]
    365c:	edd2 4a01 	vldr	s9, [r2, #4]
    3660:	ed92 4a04 	vldr	s8, [r2, #16]
    3664:	ed92 7a07 	vldr	s14, [r2, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3668:	ee66 7a07 	vmul.f32	s15, s12, s14
    366c:	ee62 5a04 	vmul.f32	s11, s4, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3670:	ee77 7aa5 	vadd.f32	s15, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3674:	ee62 5aa4 	vmul.f32	s11, s5, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3678:	ee77 7aa5 	vadd.f32	s15, s15, s11
    367c:	edcd 7a06 	vstr	s15, [sp, #24]
    3680:	edd2 5a02 	vldr	s11, [r2, #8]
    3684:	ed92 5a05 	vldr	s10, [r2, #20]
    3688:	edd2 7a08 	vldr	s15, [r2, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    368c:	ee26 6a27 	vmul.f32	s12, s12, s15
    3690:	ee22 2a05 	vmul.f32	s4, s4, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3694:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3698:	ee62 2aa5 	vmul.f32	s5, s5, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    369c:	ee36 6a22 	vadd.f32	s12, s12, s5
    36a0:	ed8d 6a07 	vstr	s12, [sp, #28]
    36a4:	edd3 2a03 	vldr	s5, [r3, #12]
    36a8:	ed93 2a04 	vldr	s4, [r3, #16]
    36ac:	ed93 6a05 	vldr	s12, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36b0:	ee66 1a86 	vmul.f32	s3, s13, s12
    36b4:	ee23 1a02 	vmul.f32	s2, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36b8:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36bc:	ee23 1aa2 	vmul.f32	s2, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36c0:	ee71 1a81 	vadd.f32	s3, s3, s2
    36c4:	edcd 1a08 	vstr	s3, [sp, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36c8:	ee67 1a06 	vmul.f32	s3, s14, s12
    36cc:	ee24 1a02 	vmul.f32	s2, s8, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36d0:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36d4:	ee24 1aa2 	vmul.f32	s2, s9, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36d8:	ee71 1a81 	vadd.f32	s3, s3, s2
    36dc:	edcd 1a09 	vstr	s3, [sp, #36]	; 0x24
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36e0:	ee27 6a86 	vmul.f32	s12, s15, s12
    36e4:	ee25 2a02 	vmul.f32	s4, s10, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36e8:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36ec:	ee65 2aa2 	vmul.f32	s5, s11, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36f0:	ee36 6a22 	vadd.f32	s12, s12, s5
    36f4:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
    36f8:	ed93 6a06 	vldr	s12, [r3, #24]
    36fc:	edd3 2a07 	vldr	s5, [r3, #28]
    3700:	ed93 2a08 	vldr	s4, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3704:	ee66 6a82 	vmul.f32	s13, s13, s4
    3708:	ee23 3a22 	vmul.f32	s6, s6, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    370c:	ee76 6a83 	vadd.f32	s13, s13, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3710:	ee63 3a86 	vmul.f32	s7, s7, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3714:	ee76 6aa3 	vadd.f32	s13, s13, s7
    3718:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    371c:	ee27 7a02 	vmul.f32	s14, s14, s4
    3720:	ee24 4a22 	vmul.f32	s8, s8, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3724:	ee37 7a04 	vadd.f32	s14, s14, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3728:	ee64 4a86 	vmul.f32	s9, s9, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    372c:	ee37 7a24 	vadd.f32	s14, s14, s9
    3730:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3734:	ee67 7a82 	vmul.f32	s15, s15, s4
    3738:	ee25 5a22 	vmul.f32	s10, s10, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    373c:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3740:	ee65 5a86 	vmul.f32	s11, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3744:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3748:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
    374c:	4a61      	ldr	r2, [pc, #388]	; (38d4 <loop+0x3dc>)
    374e:	edd2 3a00 	vldr	s7, [r2]
    3752:	4b61      	ldr	r3, [pc, #388]	; (38d8 <loop+0x3e0>)
    3754:	edd3 2a00 	vldr	s5, [r3]
    3758:	ed92 3a03 	vldr	s6, [r2, #12]
    375c:	ed93 2a01 	vldr	s4, [r3, #4]
    3760:	edd2 6a06 	vldr	s13, [r2, #24]
    3764:	ed93 6a02 	vldr	s12, [r3, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3768:	ee66 7a86 	vmul.f32	s15, s13, s12
    376c:	ee23 7a02 	vmul.f32	s14, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3770:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3774:	ee23 7aa2 	vmul.f32	s14, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3778:	ee77 7a87 	vadd.f32	s15, s15, s14
    377c:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
    3780:	edd2 4a01 	vldr	s9, [r2, #4]
    3784:	ed92 4a04 	vldr	s8, [r2, #16]
    3788:	ed92 7a07 	vldr	s14, [r2, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    378c:	ee66 7a07 	vmul.f32	s15, s12, s14
    3790:	ee62 5a04 	vmul.f32	s11, s4, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3794:	ee77 7aa5 	vadd.f32	s15, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3798:	ee62 5aa4 	vmul.f32	s11, s5, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    379c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    37a0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
    37a4:	edd2 5a02 	vldr	s11, [r2, #8]
    37a8:	ed92 5a05 	vldr	s10, [r2, #20]
    37ac:	edd2 7a08 	vldr	s15, [r2, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37b0:	ee26 6a27 	vmul.f32	s12, s12, s15
    37b4:	ee22 2a05 	vmul.f32	s4, s4, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37b8:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37bc:	ee62 2aa5 	vmul.f32	s5, s5, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37c0:	ee36 6a22 	vadd.f32	s12, s12, s5
    37c4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
    37c8:	edd3 2a03 	vldr	s5, [r3, #12]
    37cc:	ed93 2a04 	vldr	s4, [r3, #16]
    37d0:	ed93 6a05 	vldr	s12, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37d4:	ee66 1a86 	vmul.f32	s3, s13, s12
    37d8:	ee23 1a02 	vmul.f32	s2, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37dc:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37e0:	ee23 1aa2 	vmul.f32	s2, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37e4:	ee71 1a81 	vadd.f32	s3, s3, s2
    37e8:	edcd 1a11 	vstr	s3, [sp, #68]	; 0x44
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37ec:	ee67 1a06 	vmul.f32	s3, s14, s12
    37f0:	ee24 1a02 	vmul.f32	s2, s8, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37f4:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37f8:	ee24 1aa2 	vmul.f32	s2, s9, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37fc:	ee71 1a81 	vadd.f32	s3, s3, s2
    3800:	edcd 1a12 	vstr	s3, [sp, #72]	; 0x48
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3804:	ee27 6a86 	vmul.f32	s12, s15, s12
    3808:	ee25 2a02 	vmul.f32	s4, s10, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    380c:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3810:	ee65 2aa2 	vmul.f32	s5, s11, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3814:	ee36 6a22 	vadd.f32	s12, s12, s5
    3818:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
    381c:	ed93 6a06 	vldr	s12, [r3, #24]
    3820:	edd3 2a07 	vldr	s5, [r3, #28]
    3824:	ed93 2a08 	vldr	s4, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3828:	ee66 6a82 	vmul.f32	s13, s13, s4
    382c:	ee23 3a22 	vmul.f32	s6, s6, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3830:	ee76 6a83 	vadd.f32	s13, s13, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3834:	ee63 3a86 	vmul.f32	s7, s7, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3838:	ee76 6aa3 	vadd.f32	s13, s13, s7
    383c:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3840:	ee27 7a02 	vmul.f32	s14, s14, s4
    3844:	ee24 4a22 	vmul.f32	s8, s8, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3848:	ee37 7a04 	vadd.f32	s14, s14, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    384c:	ee64 4a86 	vmul.f32	s9, s9, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3850:	ee37 7a24 	vadd.f32	s14, s14, s9
    3854:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3858:	ee67 7a82 	vmul.f32	s15, s15, s4
    385c:	e03e      	b.n	38dc <loop+0x3e4>
    385e:	bf00      	nop
    3860:	00000000 	.word	0x00000000
    3864:	412e8480 	.word	0x412e8480
    3868:	20005154 	.word	0x20005154
    386c:	20005064 	.word	0x20005064
    3870:	20005084 	.word	0x20005084
    3874:	20005048 	.word	0x20005048
    3878:	200053ce 	.word	0x200053ce
    387c:	2000504c 	.word	0x2000504c
    3880:	200053ca 	.word	0x200053ca
    3884:	200053be 	.word	0x200053be
    3888:	20003a34 	.word	0x20003a34
    388c:	20004088 	.word	0x20004088
    3890:	200040d4 	.word	0x200040d4
    3894:	200040cc 	.word	0x200040cc
    3898:	20004098 	.word	0x20004098
    389c:	20004090 	.word	0x20004090
    38a0:	200040c4 	.word	0x200040c4
    38a4:	200053db 	.word	0x200053db
    38a8:	20005050 	.word	0x20005050
    38ac:	20005078 	.word	0x20005078
    38b0:	2000514c 	.word	0x2000514c
    38b4:	200053b0 	.word	0x200053b0
    38b8:	20005178 	.word	0x20005178
    38bc:	20005058 	.word	0x20005058
    38c0:	20005144 	.word	0x20005144
    38c4:	200053a8 	.word	0x200053a8
    38c8:	20005170 	.word	0x20005170
    38cc:	20004c30 	.word	0x20004c30
    38d0:	2000413c 	.word	0x2000413c
    38d4:	20004c0c 	.word	0x20004c0c
    38d8:	200040dc 	.word	0x200040dc
    38dc:	ee25 5a22 	vmul.f32	s10, s10, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    38e0:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    38e4:	ee65 5a86 	vmul.f32	s11, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    38e8:	ee77 7aa5 	vadd.f32	s15, s15, s11
    38ec:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
    38f0:	4ab5      	ldr	r2, [pc, #724]	; (3bc8 <loop+0x6d0>)
    38f2:	edd2 3a00 	vldr	s7, [r2]
    38f6:	4bb5      	ldr	r3, [pc, #724]	; (3bcc <loop+0x6d4>)
    38f8:	edd3 2a00 	vldr	s5, [r3]
    38fc:	ed92 3a03 	vldr	s6, [r2, #12]
    3900:	ed93 2a01 	vldr	s4, [r3, #4]
    3904:	edd2 6a06 	vldr	s13, [r2, #24]
    3908:	ed93 6a02 	vldr	s12, [r3, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    390c:	ee66 7a86 	vmul.f32	s15, s13, s12
    3910:	ee23 7a02 	vmul.f32	s14, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3914:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3918:	ee23 7aa2 	vmul.f32	s14, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    391c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3920:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
    3924:	edd2 4a01 	vldr	s9, [r2, #4]
    3928:	ed92 4a04 	vldr	s8, [r2, #16]
    392c:	ed92 7a07 	vldr	s14, [r2, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3930:	ee66 7a07 	vmul.f32	s15, s12, s14
    3934:	ee62 5a04 	vmul.f32	s11, s4, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3938:	ee77 7aa5 	vadd.f32	s15, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    393c:	ee62 5aa4 	vmul.f32	s11, s5, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3940:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3944:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
    3948:	edd2 5a02 	vldr	s11, [r2, #8]
    394c:	ed92 5a05 	vldr	s10, [r2, #20]
    3950:	edd2 7a08 	vldr	s15, [r2, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3954:	ee26 6a27 	vmul.f32	s12, s12, s15
    3958:	ee22 2a05 	vmul.f32	s4, s4, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    395c:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3960:	ee62 2aa5 	vmul.f32	s5, s5, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3964:	ee36 6a22 	vadd.f32	s12, s12, s5
    3968:	ed8d 6a19 	vstr	s12, [sp, #100]	; 0x64
    396c:	edd3 2a03 	vldr	s5, [r3, #12]
    3970:	ed93 2a04 	vldr	s4, [r3, #16]
    3974:	ed93 6a05 	vldr	s12, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3978:	ee66 1a86 	vmul.f32	s3, s13, s12
    397c:	ee23 1a02 	vmul.f32	s2, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3980:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3984:	ee23 1aa2 	vmul.f32	s2, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3988:	ee71 1a81 	vadd.f32	s3, s3, s2
    398c:	edcd 1a1a 	vstr	s3, [sp, #104]	; 0x68
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3990:	ee67 1a06 	vmul.f32	s3, s14, s12
    3994:	ee24 1a02 	vmul.f32	s2, s8, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3998:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    399c:	ee24 1aa2 	vmul.f32	s2, s9, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39a0:	ee71 1a81 	vadd.f32	s3, s3, s2
    39a4:	edcd 1a1b 	vstr	s3, [sp, #108]	; 0x6c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39a8:	ee27 6a86 	vmul.f32	s12, s15, s12
    39ac:	ee25 2a02 	vmul.f32	s4, s10, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39b0:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39b4:	ee65 2aa2 	vmul.f32	s5, s11, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39b8:	ee36 6a22 	vadd.f32	s12, s12, s5
    39bc:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
    39c0:	ed93 6a06 	vldr	s12, [r3, #24]
    39c4:	edd3 2a07 	vldr	s5, [r3, #28]
    39c8:	ed93 2a08 	vldr	s4, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39cc:	ee66 6a82 	vmul.f32	s13, s13, s4
    39d0:	ee23 3a22 	vmul.f32	s6, s6, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39d4:	ee76 6a83 	vadd.f32	s13, s13, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39d8:	ee63 3a86 	vmul.f32	s7, s7, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39dc:	ee76 6aa3 	vadd.f32	s13, s13, s7
    39e0:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39e4:	ee27 7a02 	vmul.f32	s14, s14, s4
    39e8:	ee24 4a22 	vmul.f32	s8, s8, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39ec:	ee37 7a04 	vadd.f32	s14, s14, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39f0:	ee64 4a86 	vmul.f32	s9, s9, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39f4:	ee37 7a24 	vadd.f32	s14, s14, s9
    39f8:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39fc:	ee67 7a82 	vmul.f32	s15, s15, s4
    3a00:	ee25 5a22 	vmul.f32	s10, s10, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3a04:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3a08:	ee65 5a86 	vmul.f32	s11, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3a0c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3a10:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
	pidOutputVals = pidOutput(desState, currState, (P_gains*P_gainScale), (I_gains*I_gainScale), (D_gains*D_gainScale), dt, channel_1_pwm <
    3a14:	ac2f      	add	r4, sp, #188	; 0xbc
    3a16:	4b6e      	ldr	r3, [pc, #440]	; (3bd0 <loop+0x6d8>)
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	f240 4223 	movw	r2, #1059	; 0x423
    3a1e:	4293      	cmp	r3, r2
    3a20:	bfcc      	ite	gt
    3a22:	2300      	movgt	r3, #0
    3a24:	2301      	movle	r3, #1
    3a26:	9302      	str	r3, [sp, #8]
    3a28:	ab17      	add	r3, sp, #92	; 0x5c
    3a2a:	9301      	str	r3, [sp, #4]
    3a2c:	ab0e      	add	r3, sp, #56	; 0x38
    3a2e:	9300      	str	r3, [sp, #0]
    3a30:	4b68      	ldr	r3, [pc, #416]	; (3bd4 <loop+0x6dc>)
    3a32:	edd3 1a00 	vldr	s3, [r3]
    3a36:	4b68      	ldr	r3, [pc, #416]	; (3bd8 <loop+0x6e0>)
    3a38:	ed93 1a00 	vldr	s2, [r3]
    3a3c:	4b67      	ldr	r3, [pc, #412]	; (3bdc <loop+0x6e4>)
    3a3e:	edd3 0a00 	vldr	s1, [r3]
    3a42:	4b67      	ldr	r3, [pc, #412]	; (3be0 <loop+0x6e8>)
    3a44:	ed93 0a00 	vldr	s0, [r3]
    3a48:	ab05      	add	r3, sp, #20
    3a4a:	4672      	mov	r2, lr
    3a4c:	4661      	mov	r1, ip
    3a4e:	4620      	mov	r0, r4
    3a50:	f7ff fc60 	bl	3314 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)>
      m_storage = std::move(other.m_storage);
    3a54:	4b63      	ldr	r3, [pc, #396]	; (3be4 <loop+0x6ec>)
    3a56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    3a5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pitch_PID = pidOutputVals[0];
    3a5e:	6819      	ldr	r1, [r3, #0]
    3a60:	4a61      	ldr	r2, [pc, #388]	; (3be8 <loop+0x6f0>)
    3a62:	6011      	str	r1, [r2, #0]
	yaw_PID = pidOutputVals[1];
    3a64:	6859      	ldr	r1, [r3, #4]
    3a66:	4a61      	ldr	r2, [pc, #388]	; (3bec <loop+0x6f4>)
    3a68:	6011      	str	r1, [r2, #0]
	roll_PID = pidOutputVals[2];
    3a6a:	689a      	ldr	r2, [r3, #8]
    3a6c:	4b60      	ldr	r3, [pc, #384]	; (3bf0 <loop+0x6f8>)
    3a6e:	601a      	str	r2, [r3, #0]
  controlMixer(); //Mixes PID outputs to scaled actuator commands -- custom mixing assignments done here
    3a70:	f7fc feec 	bl	84c <controlMixer()>
  scaleCommands(); //Scales motor commands to 125 to 250 range (oneshot125 protocol) and servo PWM commands to 0 to 180 (for servo library)
    3a74:	f7fd fb88 	bl	1188 <scaleCommands()>
  throttleCut(); //Directly sets motor commands to low based on state of ch5
    3a78:	f7fe f820 	bl	1abc <throttleCut()>
  commandMotors(); //Sends command pulses to each motor pin using OneShot125 protocol
    3a7c:	f7fd ff74 	bl	1968 <commandMotors()>
  servo1.write(s1_command_PWM); //Writes PWM value to servo object
    3a80:	4b5c      	ldr	r3, [pc, #368]	; (3bf4 <loop+0x6fc>)
    3a82:	6819      	ldr	r1, [r3, #0]
    3a84:	485c      	ldr	r0, [pc, #368]	; (3bf8 <loop+0x700>)
    3a86:	f001 fae5 	bl	5054 <PWMServo::write(int)>
  servo2.write(s2_command_PWM);
    3a8a:	4b5c      	ldr	r3, [pc, #368]	; (3bfc <loop+0x704>)
    3a8c:	6819      	ldr	r1, [r3, #0]
    3a8e:	485c      	ldr	r0, [pc, #368]	; (3c00 <loop+0x708>)
    3a90:	f001 fae0 	bl	5054 <PWMServo::write(int)>
  servo3.write(s3_command_PWM);
    3a94:	4b5b      	ldr	r3, [pc, #364]	; (3c04 <loop+0x70c>)
    3a96:	6819      	ldr	r1, [r3, #0]
    3a98:	485b      	ldr	r0, [pc, #364]	; (3c08 <loop+0x710>)
    3a9a:	f001 fadb 	bl	5054 <PWMServo::write(int)>
  servo4.write(s4_command_PWM);
    3a9e:	4b5b      	ldr	r3, [pc, #364]	; (3c0c <loop+0x714>)
    3aa0:	6819      	ldr	r1, [r3, #0]
    3aa2:	485b      	ldr	r0, [pc, #364]	; (3c10 <loop+0x718>)
    3aa4:	f001 fad6 	bl	5054 <PWMServo::write(int)>
  servo5.write(s5_command_PWM);
    3aa8:	4b5a      	ldr	r3, [pc, #360]	; (3c14 <loop+0x71c>)
    3aaa:	6819      	ldr	r1, [r3, #0]
    3aac:	485a      	ldr	r0, [pc, #360]	; (3c18 <loop+0x720>)
    3aae:	f001 fad1 	bl	5054 <PWMServo::write(int)>
  servo6.write(s6_command_PWM);
    3ab2:	4b5a      	ldr	r3, [pc, #360]	; (3c1c <loop+0x724>)
    3ab4:	6819      	ldr	r1, [r3, #0]
    3ab6:	485a      	ldr	r0, [pc, #360]	; (3c20 <loop+0x728>)
    3ab8:	f001 facc 	bl	5054 <PWMServo::write(int)>
  servo7.write(s7_command_PWM);
    3abc:	4b59      	ldr	r3, [pc, #356]	; (3c24 <loop+0x72c>)
    3abe:	6819      	ldr	r1, [r3, #0]
    3ac0:	4859      	ldr	r0, [pc, #356]	; (3c28 <loop+0x730>)
    3ac2:	f001 fac7 	bl	5054 <PWMServo::write(int)>
  getCommands(); //Pulls current available radio commands
    3ac6:	f7fd fc83 	bl	13d0 <getCommands()>
  failSafe(); //Prevent failures in event of bad receiver connection, defaults to failsafe values assigned in setup
    3aca:	f7fd fee1 	bl	1890 <failSafe()>
  getJoyAngle();
    3ace:	f7fe f97d 	bl	1dcc <getJoyAngle()>
  loopRate(2000); //Do not exceed 2000Hz, all filter parameters tuned to 2000Hz by default
    3ad2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    3ad6:	f7fe f817 	bl	1b08 <loopRate(int)>
}
    3ada:	b039      	add	sp, #228	; 0xe4
    3adc:	bd30      	pop	{r4, r5, pc}
		irisFlag = 1;
    3ade:	4b53      	ldr	r3, [pc, #332]	; (3c2c <loop+0x734>)
    3ae0:	2201      	movs	r2, #1
    3ae2:	701a      	strb	r2, [r3, #0]
		openIris();
    3ae4:	f7fe f9ac 	bl	1e40 <openIris()>
    3ae8:	e52e      	b.n	3548 <loop+0x50>
		conductSineSweep = 0;
    3aea:	4b51      	ldr	r3, [pc, #324]	; (3c30 <loop+0x738>)
    3aec:	2200      	movs	r2, #0
    3aee:	701a      	strb	r2, [r3, #0]
		sineTime = 0;
    3af0:	4b50      	ldr	r3, [pc, #320]	; (3c34 <loop+0x73c>)
    3af2:	2200      	movs	r2, #0
    3af4:	601a      	str	r2, [r3, #0]
    3af6:	e531      	b.n	355c <loop+0x64>
    print_counterSD = micros();
    3af8:	f009 fb52 	bl	d1a0 <micros>
    3afc:	4b4e      	ldr	r3, [pc, #312]	; (3c38 <loop+0x740>)
    3afe:	6018      	str	r0, [r3, #0]
    String dataString;
    3b00:	2100      	movs	r1, #0
    3b02:	a80e      	add	r0, sp, #56	; 0x38
    3b04:	f009 f8cb 	bl	cc9e <String::String(char const*)>
    dataString = getDataString();
    3b08:	a82b      	add	r0, sp, #172	; 0xac
    3b0a:	f7fe f9bf 	bl	1e8c <getDataString()>
    3b0e:	a92b      	add	r1, sp, #172	; 0xac
    3b10:	a80e      	add	r0, sp, #56	; 0x38
    3b12:	f009 f901 	bl	cd18 <String::operator=(String&&)>
    3b16:	a82b      	add	r0, sp, #172	; 0xac
    3b18:	f009 f878 	bl	cc0c <String::~String()>
    3b1c:	4b47      	ldr	r3, [pc, #284]	; (3c3c <loop+0x744>)
    3b1e:	681a      	ldr	r2, [r3, #0]
    3b20:	2a00      	cmp	r2, #0
    3b22:	d04f      	beq.n	3bc4 <loop+0x6cc>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3b24:	f244 2302 	movw	r3, #16898	; 0x4202
    3b28:	4945      	ldr	r1, [pc, #276]	; (3c40 <loop+0x748>)
    3b2a:	a817      	add	r0, sp, #92	; 0x5c
    3b2c:	f006 faaa 	bl	a084 <FsVolume::open(char const*, int)>
    3b30:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3b32:	2b00      	cmp	r3, #0
    3b34:	f000 8096 	beq.w	3c64 <loop+0x76c>
		if (file) return File(new SDFile(file));
    3b38:	205c      	movs	r0, #92	; 0x5c
    3b3a:	f009 fc89 	bl	d450 <operator new(unsigned int)>
    3b3e:	4604      	mov	r4, r0
class FileImpl {
    3b40:	2500      	movs	r5, #0
    3b42:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3b44:	4b3f      	ldr	r3, [pc, #252]	; (3c44 <loop+0x74c>)
    3b46:	6003      	str	r3, [r0, #0]
class Print
    3b48:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3b4a:	60c3      	str	r3, [r0, #12]
    3b4c:	4b3e      	ldr	r3, [pc, #248]	; (3c48 <loop+0x750>)
    3b4e:	6083      	str	r3, [r0, #8]
    3b50:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3b52:	6103      	str	r3, [r0, #16]
    3b54:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    3b58:	7503      	strb	r3, [r0, #20]
    3b5a:	a91b      	add	r1, sp, #108	; 0x6c
    3b5c:	3018      	adds	r0, #24
    3b5e:	f006 f95a 	bl	9e16 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3b62:	4b3a      	ldr	r3, [pc, #232]	; (3c4c <loop+0x754>)
    3b64:	60a3      	str	r3, [r4, #8]
    3b66:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    3b68:	6863      	ldr	r3, [r4, #4]
    3b6a:	3301      	adds	r3, #1
    3b6c:	6063      	str	r3, [r4, #4]
    3b6e:	4b38      	ldr	r3, [pc, #224]	; (3c50 <loop+0x758>)
    3b70:	9317      	str	r3, [sp, #92]	; 0x5c
  ~FsBaseFile() {close();}
    3b72:	a81b      	add	r0, sp, #108	; 0x6c
    3b74:	f006 f990 	bl	9e98 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3b78:	4b36      	ldr	r3, [pc, #216]	; (3c54 <loop+0x75c>)
    3b7a:	691b      	ldr	r3, [r3, #16]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	f000 8092 	beq.w	3ca6 <loop+0x7ae>
		if (--(f->refcount) == 0) {
    3b82:	685a      	ldr	r2, [r3, #4]
    3b84:	3a01      	subs	r2, #1
    3b86:	605a      	str	r2, [r3, #4]
    3b88:	b94a      	cbnz	r2, 3b9e <loop+0x6a6>
			f->close();
    3b8a:	4d32      	ldr	r5, [pc, #200]	; (3c54 <loop+0x75c>)
    3b8c:	6928      	ldr	r0, [r5, #16]
    3b8e:	6803      	ldr	r3, [r0, #0]
    3b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b92:	4798      	blx	r3
			delete f;
    3b94:	6928      	ldr	r0, [r5, #16]
    3b96:	b110      	cbz	r0, 3b9e <loop+0x6a6>
    3b98:	6803      	ldr	r3, [r0, #0]
    3b9a:	685b      	ldr	r3, [r3, #4]
    3b9c:	4798      	blx	r3
		f = file.f;
    3b9e:	4b2d      	ldr	r3, [pc, #180]	; (3c54 <loop+0x75c>)
    3ba0:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    3ba2:	2c00      	cmp	r4, #0
    3ba4:	f040 8081 	bne.w	3caa <loop+0x7b2>
							  return write((const uint8_t *)str, strlen(str)); }
    3ba8:	4c2b      	ldr	r4, [pc, #172]	; (3c58 <loop+0x760>)
    3baa:	6823      	ldr	r3, [r4, #0]
    3bac:	685b      	ldr	r3, [r3, #4]
    3bae:	2219      	movs	r2, #25
    3bb0:	492a      	ldr	r1, [pc, #168]	; (3c5c <loop+0x764>)
    3bb2:	4620      	mov	r0, r4
    3bb4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    3bb6:	4620      	mov	r0, r4
    3bb8:	f008 fe73 	bl	c8a2 <Print::println()>
  }
    3bbc:	a80e      	add	r0, sp, #56	; 0x38
    3bbe:	f009 f825 	bl	cc0c <String::~String()>
    3bc2:	e4d8      	b.n	3576 <loop+0x7e>
    3bc4:	4a26      	ldr	r2, [pc, #152]	; (3c60 <loop+0x768>)
    3bc6:	e7ad      	b.n	3b24 <loop+0x62c>
    3bc8:	20004be8 	.word	0x20004be8
    3bcc:	200040a0 	.word	0x200040a0
    3bd0:	20005014 	.word	0x20005014
    3bd4:	200040d4 	.word	0x200040d4
    3bd8:	200040cc 	.word	0x200040cc
    3bdc:	200040c4 	.word	0x200040c4
    3be0:	20005084 	.word	0x20005084
    3be4:	20005138 	.word	0x20005138
    3be8:	20005148 	.word	0x20005148
    3bec:	200053ac 	.word	0x200053ac
    3bf0:	20005174 	.word	0x20005174
    3bf4:	200051b0 	.word	0x200051b0
    3bf8:	2000535c 	.word	0x2000535c
    3bfc:	200051b8 	.word	0x200051b8
    3c00:	20005360 	.word	0x20005360
    3c04:	200051c0 	.word	0x200051c0
    3c08:	20005364 	.word	0x20005364
    3c0c:	200051c8 	.word	0x200051c8
    3c10:	20005368 	.word	0x20005368
    3c14:	200051d0 	.word	0x200051d0
    3c18:	2000536c 	.word	0x2000536c
    3c1c:	200051d8 	.word	0x200051d8
    3c20:	20005370 	.word	0x20005370
    3c24:	200051e0 	.word	0x200051e0
    3c28:	20005374 	.word	0x20005374
    3c2c:	200053ce 	.word	0x200053ce
    3c30:	200053ca 	.word	0x200053ca
    3c34:	20005380 	.word	0x20005380
    3c38:	20003a34 	.word	0x20003a34
    3c3c:	200050bc 	.word	0x200050bc
    3c40:	20004164 	.word	0x20004164
    3c44:	20002548 	.word	0x20002548
    3c48:	200025a4 	.word	0x200025a4
    3c4c:	20002524 	.word	0x20002524
    3c50:	20002418 	.word	0x20002418
    3c54:	200039bc 	.word	0x200039bc
    3c58:	2000336c 	.word	0x2000336c
    3c5c:	20002cc4 	.word	0x20002cc4
    3c60:	200031f4 	.word	0x200031f4
  bool isOpen() const {return m_fFile || m_xFile;}
    3c64:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    3c66:	2c00      	cmp	r4, #0
    3c68:	f47f af66 	bne.w	3b38 <loop+0x640>
    3c6c:	4b23      	ldr	r3, [pc, #140]	; (3cfc <loop+0x804>)
    3c6e:	9317      	str	r3, [sp, #92]	; 0x5c
  ~FsBaseFile() {close();}
    3c70:	a81b      	add	r0, sp, #108	; 0x6c
    3c72:	f006 f911 	bl	9e98 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3c76:	4b22      	ldr	r3, [pc, #136]	; (3d00 <loop+0x808>)
    3c78:	691b      	ldr	r3, [r3, #16]
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d181      	bne.n	3b82 <loop+0x68a>
		f = file.f;
    3c7e:	4b20      	ldr	r3, [pc, #128]	; (3d00 <loop+0x808>)
    3c80:	2200      	movs	r2, #0
    3c82:	611a      	str	r2, [r3, #16]
		return (f) ? f->isOpen() : false;
    3c84:	e790      	b.n	3ba8 <loop+0x6b0>
		setDesStateSerial(axisToRotate);
    3c86:	4b1f      	ldr	r3, [pc, #124]	; (3d04 <loop+0x80c>)
    3c88:	6818      	ldr	r0, [r3, #0]
    3c8a:	f7fd f81d 	bl	cc8 <setDesStateSerial(int)>
    3c8e:	e498      	b.n	35c2 <loop+0xca>
  	performSineSweep(axisToRotate);
    3c90:	4b1c      	ldr	r3, [pc, #112]	; (3d04 <loop+0x80c>)
    3c92:	6818      	ldr	r0, [r3, #0]
    3c94:	f7fd f878 	bl	d88 <performSineSweep(int)>
    3c98:	e498      	b.n	35cc <loop+0xd4>
		rollStep();
    3c9a:	f7fd f8e5 	bl	e68 <rollStep()>
    3c9e:	e49d      	b.n	35dc <loop+0xe4>
		pitchStep();
    3ca0:	f7fd f8fe 	bl	ea0 <pitchStep()>
    3ca4:	e4a1      	b.n	35ea <loop+0xf2>
		f = file.f;
    3ca6:	4b16      	ldr	r3, [pc, #88]	; (3d00 <loop+0x808>)
    3ca8:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    3caa:	6823      	ldr	r3, [r4, #0]
    3cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3cae:	4620      	mov	r0, r4
    3cb0:	4798      	blx	r3
    if (dataFile) {
    3cb2:	2800      	cmp	r0, #0
    3cb4:	f43f af78 	beq.w	3ba8 <loop+0x6b0>
	size_t println(const String &s)			{ return print(s) + println(); }
    3cb8:	4c11      	ldr	r4, [pc, #68]	; (3d00 <loop+0x808>)
    3cba:	a90e      	add	r1, sp, #56	; 0x38
    3cbc:	4620      	mov	r0, r4
    3cbe:	f008 fdcb 	bl	c858 <Print::print(String const&)>
    3cc2:	4620      	mov	r0, r4
    3cc4:	f008 fded 	bl	c8a2 <Print::println()>
		if (f) {
    3cc8:	6920      	ldr	r0, [r4, #16]
    3cca:	2800      	cmp	r0, #0
    3ccc:	f43f af76 	beq.w	3bbc <loop+0x6c4>
			f->close();
    3cd0:	6803      	ldr	r3, [r0, #0]
    3cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cd4:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    3cd6:	6922      	ldr	r2, [r4, #16]
    3cd8:	6853      	ldr	r3, [r2, #4]
    3cda:	3b01      	subs	r3, #1
    3cdc:	6053      	str	r3, [r2, #4]
    3cde:	b943      	cbnz	r3, 3cf2 <loop+0x7fa>
			f->close();
    3ce0:	6920      	ldr	r0, [r4, #16]
    3ce2:	6803      	ldr	r3, [r0, #0]
    3ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ce6:	4798      	blx	r3
			delete f;
    3ce8:	6920      	ldr	r0, [r4, #16]
    3cea:	b110      	cbz	r0, 3cf2 <loop+0x7fa>
    3cec:	6803      	ldr	r3, [r0, #0]
    3cee:	685b      	ldr	r3, [r3, #4]
    3cf0:	4798      	blx	r3
		f = nullptr;
    3cf2:	4b03      	ldr	r3, [pc, #12]	; (3d00 <loop+0x808>)
    3cf4:	2200      	movs	r2, #0
    3cf6:	611a      	str	r2, [r3, #16]
	}
    3cf8:	e760      	b.n	3bbc <loop+0x6c4>
    3cfa:	bf00      	nop
    3cfc:	20002418 	.word	0x20002418
    3d00:	200039bc 	.word	0x200039bc
    3d04:	2000397c 	.word	0x2000397c

00003d08 <_GLOBAL__sub_I__Z9pidOutputN5Eigen6MatrixIfLi3ELi1ELi0ELi3ELi1EEES1_NS0_IfLi3ELi3ELi0ELi3ELi3EEES2_S2_fbfff>:
    3d08:	b508      	push	{r3, lr}
    3d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3d0e:	2001      	movs	r0, #1
    3d10:	f7ff f8ee 	bl	2ef0 <__static_initialization_and_destruction_0(int, int)>
    3d14:	bd08      	pop	{r3, pc}
	...

00003d18 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    3d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d1c:	b087      	sub	sp, #28
    3d1e:	9002      	str	r0, [sp, #8]
    3d20:	9103      	str	r1, [sp, #12]
    3d22:	461f      	mov	r7, r3
    3d24:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    3d28:	4b3c      	ldr	r3, [pc, #240]	; (3e1c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    3d2a:	f8d3 9000 	ldr.w	r9, [r3]
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3d2e:	9200      	str	r2, [sp, #0]
    3d30:	2a00      	cmp	r2, #0
    3d32:	d061      	beq.n	3df8 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe0>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    3d34:	0043      	lsls	r3, r0, #1
    3d36:	b2d9      	uxtb	r1, r3
    3d38:	9101      	str	r1, [sp, #4]
    3d3a:	4613      	mov	r3, r2
    3d3c:	2a88      	cmp	r2, #136	; 0x88
    3d3e:	bf28      	it	cs
    3d40:	2388      	movcs	r3, #136	; 0x88
    3d42:	9304      	str	r3, [sp, #16]
    3d44:	f04f 0800 	mov.w	r8, #0
    int8_t count = 0;
    3d48:	4644      	mov	r4, r8
    3d4a:	4d35      	ldr	r5, [pc, #212]	; (3e20 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x108>)
		transmitting = 1;
    3d4c:	f04f 0b01 	mov.w	fp, #1
    3d50:	f88d b017 	strb.w	fp, [sp, #23]
    3d54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 3e1c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>
    3d58:	e022      	b.n	3da0 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x88>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d5e:	e006      	b.n	3d6e <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x56>
    3d60:	4299      	cmp	r1, r3
    3d62:	d9fa      	bls.n	3d5a <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x42>
		return rxBuffer[rxBufferIndex++];
    3d64:	3301      	adds	r3, #1
    3d66:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
    3d6a:	442a      	add	r2, r5
    3d6c:	7e93      	ldrb	r3, [r2, #26]
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    3d6e:	553b      	strb	r3, [r7, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3d70:	3401      	adds	r4, #1
    3d72:	b264      	sxtb	r4, r4
		return rxBufferLength - rxBufferIndex;
    3d74:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3d78:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3d7c:	461a      	mov	r2, r3
    3d7e:	4299      	cmp	r1, r3
    3d80:	d007      	beq.n	3d92 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    3d82:	2e00      	cmp	r6, #0
    3d84:	d0ec      	beq.n	3d60 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
    3d86:	f8da 0000 	ldr.w	r0, [sl]
    3d8a:	eba0 0009 	sub.w	r0, r0, r9
    3d8e:	42b0      	cmp	r0, r6
    3d90:	d3e6      	bcc.n	3d60 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3d92:	9b04      	ldr	r3, [sp, #16]
    3d94:	4498      	add	r8, r3
    3d96:	fa5f f888 	uxtb.w	r8, r8
    3d9a:	9b00      	ldr	r3, [sp, #0]
    3d9c:	4543      	cmp	r3, r8
    3d9e:	d92c      	bls.n	3dfa <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe2>
		txBuffer[0] = (address << 1);
    3da0:	9b01      	ldr	r3, [sp, #4]
    3da2:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    3da6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3daa:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		txBufferLength = 1;
    3dae:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
                Wire.write(regAddr);
    3db2:	9903      	ldr	r1, [sp, #12]
    3db4:	4628      	mov	r0, r5
    3db6:	f000 fb2a 	bl	440e <TwoWire::write(unsigned char)>
		return endTransmission(1);
    3dba:	4659      	mov	r1, fp
    3dbc:	4628      	mov	r0, r5
    3dbe:	f000 fc53 	bl	4668 <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    3dc2:	9b01      	ldr	r3, [sp, #4]
    3dc4:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    3dc8:	f885 b130 	strb.w	fp, [r5, #304]	; 0x130
		txBufferLength = 1;
    3dcc:	f885 b12f 	strb.w	fp, [r5, #303]	; 0x12f
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3dd0:	9b00      	ldr	r3, [sp, #0]
    3dd2:	eba3 0208 	sub.w	r2, r3, r8
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3dd6:	2a88      	cmp	r2, #136	; 0x88
    3dd8:	bfa8      	it	ge
    3dda:	2288      	movge	r2, #136	; 0x88
		return requestFrom(address, quantity, (uint8_t)1);
    3ddc:	465b      	mov	r3, fp
    3dde:	b2d2      	uxtb	r2, r2
    3de0:	9902      	ldr	r1, [sp, #8]
    3de2:	4628      	mov	r0, r5
    3de4:	f000 fcbc 	bl	4760 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    3de8:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3dec:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3df0:	461a      	mov	r2, r3
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3df2:	4299      	cmp	r1, r3
    3df4:	d1c5      	bne.n	3d82 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x6a>
    3df6:	e7cc      	b.n	3d92 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    int8_t count = 0;
    3df8:	2400      	movs	r4, #0
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    3dfa:	b156      	cbz	r6, 3e12 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3dfc:	4b07      	ldr	r3, [pc, #28]	; (3e1c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    3dfe:	681b      	ldr	r3, [r3, #0]
    3e00:	eba3 0309 	sub.w	r3, r3, r9
    3e04:	42b3      	cmp	r3, r6
    3e06:	d304      	bcc.n	3e12 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3e08:	9b00      	ldr	r3, [sp, #0]
    3e0a:	429c      	cmp	r4, r3
    3e0c:	bfb8      	it	lt
    3e0e:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    3e12:	4620      	mov	r0, r4
    3e14:	b007      	add	sp, #28
    3e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e1a:	bf00      	nop
    3e1c:	20005388 	.word	0x20005388
    3e20:	20004784 	.word	0x20004784

00003e24 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    3e24:	b500      	push	{lr}
    3e26:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
    3e28:	9300      	str	r3, [sp, #0]
    3e2a:	4613      	mov	r3, r2
    3e2c:	2201      	movs	r2, #1
    3e2e:	f7ff ff73 	bl	3d18 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    3e32:	b003      	add	sp, #12
    3e34:	f85d fb04 	ldr.w	pc, [sp], #4

00003e38 <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    3e38:	b530      	push	{r4, r5, lr}
    3e3a:	b083      	sub	sp, #12
    3e3c:	4614      	mov	r4, r2
    3e3e:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    3e40:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3e44:	f10d 0207 	add.w	r2, sp, #7
    3e48:	f7ff ffec 	bl	3e24 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3e4c:	b160      	cbz	r0, 3e68 <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x30>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3e4e:	1b62      	subs	r2, r4, r5
    3e50:	3201      	adds	r2, #1
    3e52:	2101      	movs	r1, #1
    3e54:	fa01 f305 	lsl.w	r3, r1, r5
    3e58:	3b01      	subs	r3, #1
    3e5a:	4093      	lsls	r3, r2
        b &= mask;
    3e5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
        b >>= (bitStart - length + 1);
    3e60:	400b      	ands	r3, r1
    3e62:	4113      	asrs	r3, r2
    3e64:	9a06      	ldr	r2, [sp, #24]
    3e66:	7013      	strb	r3, [r2, #0]
}
    3e68:	b003      	add	sp, #12
    3e6a:	bd30      	pop	{r4, r5, pc}

00003e6c <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    3e6c:	b570      	push	{r4, r5, r6, lr}
    3e6e:	4615      	mov	r5, r2
    3e70:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    3e72:	4a10      	ldr	r2, [pc, #64]	; (3eb4 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3e74:	0040      	lsls	r0, r0, #1
    3e76:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		transmitting = 1;
    3e7a:	2301      	movs	r3, #1
    3e7c:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
		txBufferLength = 1;
    3e80:	f882 312f 	strb.w	r3, [r2, #303]	; 0x12f
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
	#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    3e84:	4610      	mov	r0, r2
    3e86:	f000 fac2 	bl	440e <TwoWire::write(unsigned char)>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    3e8a:	b15d      	cbz	r5, 3ea4 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x38>
    3e8c:	1e74      	subs	r4, r6, #1
    3e8e:	3d01      	subs	r5, #1
    3e90:	fa56 f585 	uxtab	r5, r6, r5
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
			#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
			Wire.write((uint8_t) data[i]);
    3e94:	4e07      	ldr	r6, [pc, #28]	; (3eb4 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3e96:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3e9a:	4630      	mov	r0, r6
    3e9c:	f000 fab7 	bl	440e <TwoWire::write(unsigned char)>
    for (uint8_t i = 0; i < length; i++) {
    3ea0:	42ac      	cmp	r4, r5
    3ea2:	d1f8      	bne.n	3e96 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x2a>
		return endTransmission(1);
    3ea4:	2101      	movs	r1, #1
    3ea6:	4803      	ldr	r0, [pc, #12]	; (3eb4 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3ea8:	f000 fbde 	bl	4668 <TwoWire::endTransmission(unsigned char)>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
    3eac:	fab0 f080 	clz	r0, r0
    3eb0:	0940      	lsrs	r0, r0, #5
    3eb2:	bd70      	pop	{r4, r5, r6, pc}
    3eb4:	20004784 	.word	0x20004784

00003eb8 <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    3eb8:	b500      	push	{lr}
    3eba:	b083      	sub	sp, #12
    3ebc:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
    3ec0:	f10d 0307 	add.w	r3, sp, #7
    3ec4:	2201      	movs	r2, #1
    3ec6:	f7ff ffd1 	bl	3e6c <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    3eca:	b003      	add	sp, #12
    3ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ed0 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    3ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ed2:	b083      	sub	sp, #12
    3ed4:	4604      	mov	r4, r0
    3ed6:	460d      	mov	r5, r1
    3ed8:	4616      	mov	r6, r2
    3eda:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
    3edc:	4b0c      	ldr	r3, [pc, #48]	; (3f10 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>)
    3ede:	881b      	ldrh	r3, [r3, #0]
    3ee0:	f10d 0207 	add.w	r2, sp, #7
    3ee4:	f7ff ff9e 	bl	3e24 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3ee8:	b15f      	cbz	r7, 3f02 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    3eea:	2301      	movs	r3, #1
    3eec:	40b3      	lsls	r3, r6
    3eee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3ef2:	431a      	orrs	r2, r3
    3ef4:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
    3ef6:	4629      	mov	r1, r5
    3ef8:	4620      	mov	r0, r4
    3efa:	f7ff ffdd 	bl	3eb8 <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
}
    3efe:	b003      	add	sp, #12
    3f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3f02:	2301      	movs	r3, #1
    3f04:	40b3      	lsls	r3, r6
    3f06:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3f0a:	ea22 0203 	bic.w	r2, r2, r3
    3f0e:	e7f2      	b.n	3ef6 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    3f10:	20003a56 	.word	0x20003a56

00003f14 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    3f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f16:	b083      	sub	sp, #12
    3f18:	4605      	mov	r5, r0
    3f1a:	460e      	mov	r6, r1
    3f1c:	4614      	mov	r4, r2
    3f1e:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
    3f20:	4b0f      	ldr	r3, [pc, #60]	; (3f60 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>)
    3f22:	881b      	ldrh	r3, [r3, #0]
    3f24:	f10d 0207 	add.w	r2, sp, #7
    3f28:	f7ff ff7c 	bl	3e24 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3f2c:	b910      	cbnz	r0, 3f34 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
        return false;
    3f2e:	2000      	movs	r0, #0
}
    3f30:	b003      	add	sp, #12
    3f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3f34:	1be2      	subs	r2, r4, r7
    3f36:	3201      	adds	r2, #1
    3f38:	2101      	movs	r1, #1
    3f3a:	fa01 f307 	lsl.w	r3, r1, r7
    3f3e:	3b01      	subs	r3, #1
    3f40:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
    3f42:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3f46:	4091      	lsls	r1, r2
    3f48:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
    3f4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3f4e:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
    3f52:	400b      	ands	r3, r1
        return writeByte(devAddr, regAddr, b);
    3f54:	431a      	orrs	r2, r3
    3f56:	4631      	mov	r1, r6
    3f58:	4628      	mov	r0, r5
    3f5a:	f7ff ffad 	bl	3eb8 <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
    3f5e:	e7e7      	b.n	3f30 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    3f60:	20003a56 	.word	0x20003a56

00003f64 <MPU6050::MPU6050(unsigned char)>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
    3f64:	7001      	strb	r1, [r0, #0]
}
    3f66:	4770      	bx	lr

00003f68 <MPU6050::setFullScaleGyroRange(unsigned char)>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    3f68:	b500      	push	{lr}
    3f6a:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    3f6c:	7800      	ldrb	r0, [r0, #0]
    3f6e:	9100      	str	r1, [sp, #0]
    3f70:	2302      	movs	r3, #2
    3f72:	2204      	movs	r2, #4
    3f74:	211b      	movs	r1, #27
    3f76:	f7ff ffcd 	bl	3f14 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3f7a:	b003      	add	sp, #12
    3f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f80 <MPU6050::setFullScaleAccelRange(unsigned char)>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    3f80:	b500      	push	{lr}
    3f82:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    3f84:	7800      	ldrb	r0, [r0, #0]
    3f86:	9100      	str	r1, [sp, #0]
    3f88:	2302      	movs	r3, #2
    3f8a:	2204      	movs	r2, #4
    3f8c:	211c      	movs	r1, #28
    3f8e:	f7ff ffc1 	bl	3f14 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3f92:	b003      	add	sp, #12
    3f94:	f85d fb04 	ldr.w	pc, [sp], #4

00003f98 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    3f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f9a:	b083      	sub	sp, #12
    3f9c:	4604      	mov	r4, r0
    3f9e:	460f      	mov	r7, r1
    3fa0:	4616      	mov	r6, r2
    3fa2:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
    3fa4:	4603      	mov	r3, r0
    3fa6:	f813 0b01 	ldrb.w	r0, [r3], #1
    3faa:	4a15      	ldr	r2, [pc, #84]	; (4000 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)+0x68>)
    3fac:	8812      	ldrh	r2, [r2, #0]
    3fae:	9200      	str	r2, [sp, #0]
    3fb0:	220e      	movs	r2, #14
    3fb2:	213b      	movs	r1, #59	; 0x3b
    3fb4:	f7ff feb0 	bl	3d18 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    3fb8:	7862      	ldrb	r2, [r4, #1]
    3fba:	78a3      	ldrb	r3, [r4, #2]
    3fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fc0:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    3fc2:	78e2      	ldrb	r2, [r4, #3]
    3fc4:	7923      	ldrb	r3, [r4, #4]
    3fc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fca:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    3fcc:	7962      	ldrb	r2, [r4, #5]
    3fce:	79a3      	ldrb	r3, [r4, #6]
    3fd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fd4:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    3fd6:	7a62      	ldrb	r2, [r4, #9]
    3fd8:	7aa3      	ldrb	r3, [r4, #10]
    3fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fde:	9a08      	ldr	r2, [sp, #32]
    3fe0:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    3fe2:	7ae2      	ldrb	r2, [r4, #11]
    3fe4:	7b23      	ldrb	r3, [r4, #12]
    3fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3fec:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    3fee:	7b62      	ldrb	r2, [r4, #13]
    3ff0:	7ba3      	ldrb	r3, [r4, #14]
    3ff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3ff8:	8013      	strh	r3, [r2, #0]
}
    3ffa:	b003      	add	sp, #12
    3ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ffe:	bf00      	nop
    4000:	20003a56 	.word	0x20003a56

00004004 <MPU6050::setSleepEnabled(bool)>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    4004:	b508      	push	{r3, lr}
    4006:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    4008:	2206      	movs	r2, #6
    400a:	216b      	movs	r1, #107	; 0x6b
    400c:	7800      	ldrb	r0, [r0, #0]
    400e:	f7ff ff5f 	bl	3ed0 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>
}
    4012:	bd08      	pop	{r3, pc}

00004014 <MPU6050::setClockSource(unsigned char)>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    4014:	b500      	push	{lr}
    4016:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    4018:	7800      	ldrb	r0, [r0, #0]
    401a:	9100      	str	r1, [sp, #0]
    401c:	2303      	movs	r3, #3
    401e:	2202      	movs	r2, #2
    4020:	216b      	movs	r1, #107	; 0x6b
    4022:	f7ff ff77 	bl	3f14 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    4026:	b003      	add	sp, #12
    4028:	f85d fb04 	ldr.w	pc, [sp], #4

0000402c <MPU6050::initialize()>:
void MPU6050::initialize() {
    402c:	b510      	push	{r4, lr}
    402e:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    4030:	2101      	movs	r1, #1
    4032:	f7ff ffef 	bl	4014 <MPU6050::setClockSource(unsigned char)>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    4036:	2100      	movs	r1, #0
    4038:	4620      	mov	r0, r4
    403a:	f7ff ff95 	bl	3f68 <MPU6050::setFullScaleGyroRange(unsigned char)>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    403e:	2100      	movs	r1, #0
    4040:	4620      	mov	r0, r4
    4042:	f7ff ff9d 	bl	3f80 <MPU6050::setFullScaleAccelRange(unsigned char)>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    4046:	2100      	movs	r1, #0
    4048:	4620      	mov	r0, r4
    404a:	f7ff ffdb 	bl	4004 <MPU6050::setSleepEnabled(bool)>
}
    404e:	bd10      	pop	{r4, pc}

00004050 <MPU6050::getDeviceID()>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    4050:	b510      	push	{r4, lr}
    4052:	b082      	sub	sp, #8
    4054:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    4056:	4603      	mov	r3, r0
    4058:	f813 0b01 	ldrb.w	r0, [r3], #1
    405c:	4a05      	ldr	r2, [pc, #20]	; (4074 <MPU6050::getDeviceID()+0x24>)
    405e:	8812      	ldrh	r2, [r2, #0]
    4060:	9201      	str	r2, [sp, #4]
    4062:	9300      	str	r3, [sp, #0]
    4064:	2306      	movs	r3, #6
    4066:	461a      	mov	r2, r3
    4068:	2175      	movs	r1, #117	; 0x75
    406a:	f7ff fee5 	bl	3e38 <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    return buffer[0];
}
    406e:	7860      	ldrb	r0, [r4, #1]
    4070:	b002      	add	sp, #8
    4072:	bd10      	pop	{r4, pc}
    4074:	20003a56 	.word	0x20003a56

00004078 <MPU6050::testConnection()>:
bool MPU6050::testConnection() {
    4078:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
    407a:	f7ff ffe9 	bl	4050 <MPU6050::getDeviceID()>
}
    407e:	2834      	cmp	r0, #52	; 0x34
    4080:	bf14      	ite	ne
    4082:	2000      	movne	r0, #0
    4084:	2001      	moveq	r0, #1
    4086:	bd08      	pop	{r3, pc}

00004088 <SBUS::SBUS(HardwareSerial&)>:
	uint8_t PACKET[25];
	volatile int SENDINDEX;
	void sendByte();
#endif
/* SBUS object, input the serial bus */
SBUS::SBUS(HardwareSerial& bus)
    4088:	b510      	push	{r4, lr}
    408a:	4a10      	ldr	r2, [pc, #64]	; (40cc <SBUS::SBUS(HardwareSerial&)+0x44>)
    408c:	6002      	str	r2, [r0, #0]
    408e:	f04f 0e0f 	mov.w	lr, #15
    4092:	f880 e004 	strb.w	lr, [r0, #4]
    4096:	f04f 0c00 	mov.w	ip, #0
    409a:	f880 c005 	strb.w	ip, [r0, #5]
    409e:	2204      	movs	r2, #4
    40a0:	7182      	strb	r2, [r0, #6]
    40a2:	f880 e007 	strb.w	lr, [r0, #7]
    40a6:	f641 3458 	movw	r4, #7000	; 0x1b58
    40aa:	6084      	str	r4, [r0, #8]
    40ac:	f880 c00d 	strb.w	ip, [r0, #13]
    40b0:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    40b4:	2208      	movs	r2, #8
    40b6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    40ba:	22ac      	movs	r2, #172	; 0xac
    40bc:	8542      	strh	r2, [r0, #42]	; 0x2a
    40be:	f240 7213 	movw	r2, #1811	; 0x713
    40c2:	8582      	strh	r2, [r0, #44]	; 0x2c
{
	_bus = &bus;
    40c4:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
    40c8:	bd10      	pop	{r4, pc}
    40ca:	bf00      	nop
    40cc:	000186a0 	.word	0x000186a0

000040d0 <SBUS::~SBUS()>:
		}
	}
}

/* destructor, free dynamically allocated memory */
SBUS::~SBUS()
    40d0:	b538      	push	{r3, r4, r5, lr}
    40d2:	4605      	mov	r5, r0
{
	if (_readCoeff) {
    40d4:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    40d8:	b183      	cbz	r3, 40fc <SBUS::~SBUS()+0x2c>
    40da:	2400      	movs	r4, #0
    40dc:	e004      	b.n	40e8 <SBUS::~SBUS()+0x18>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_readCoeff[i]) {
				free(_readCoeff[i]);
    40de:	f00c fe61 	bl	10da4 <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    40e2:	3404      	adds	r4, #4
    40e4:	2c40      	cmp	r4, #64	; 0x40
    40e6:	d005      	beq.n	40f4 <SBUS::~SBUS()+0x24>
			if (_readCoeff[i]) {
    40e8:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    40ec:	5918      	ldr	r0, [r3, r4]
    40ee:	2800      	cmp	r0, #0
    40f0:	d1f5      	bne.n	40de <SBUS::~SBUS()+0xe>
    40f2:	e7f6      	b.n	40e2 <SBUS::~SBUS()+0x12>
			}
		}
		free(_readCoeff);
    40f4:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    40f8:	f00c fe54 	bl	10da4 <free>
	}
	if (_writeCoeff) {
    40fc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    4100:	b183      	cbz	r3, 4124 <SBUS::~SBUS()+0x54>
    4102:	2400      	movs	r4, #0
    4104:	e004      	b.n	4110 <SBUS::~SBUS()+0x40>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_writeCoeff[i]) {
				free(_writeCoeff[i]);
    4106:	f00c fe4d 	bl	10da4 <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    410a:	3404      	adds	r4, #4
    410c:	2c40      	cmp	r4, #64	; 0x40
    410e:	d005      	beq.n	411c <SBUS::~SBUS()+0x4c>
			if (_writeCoeff[i]) {
    4110:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    4114:	5918      	ldr	r0, [r3, r4]
    4116:	2800      	cmp	r0, #0
    4118:	d1f5      	bne.n	4106 <SBUS::~SBUS()+0x36>
    411a:	e7f6      	b.n	410a <SBUS::~SBUS()+0x3a>
			}
		}
		free(_writeCoeff);
    411c:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    4120:	f00c fe40 	bl	10da4 <free>
	}
}
    4124:	4628      	mov	r0, r5
    4126:	bd38      	pop	{r3, r4, r5, pc}

00004128 <SBUS::parse()>:

/* parse the SBUS data */
bool SBUS::parse()
{
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4604      	mov	r4, r0
	// reset the parser state if too much time has passed
	static elapsedMicros _sbusTime = 0;
    412c:	4b2b      	ldr	r3, [pc, #172]	; (41dc <SBUS::parse()+0xb4>)
    412e:	681b      	ldr	r3, [r3, #0]
    4130:	f013 0f01 	tst.w	r3, #1
    4134:	d00c      	beq.n	4150 <SBUS::parse()+0x28>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    4136:	f009 f833 	bl	d1a0 <micros>
    413a:	4b29      	ldr	r3, [pc, #164]	; (41e0 <SBUS::parse()+0xb8>)
    413c:	681b      	ldr	r3, [r3, #0]
    413e:	1ac0      	subs	r0, r0, r3
	if (_sbusTime > SBUS_TIMEOUT_US) {_parserState = 0;}
    4140:	68a3      	ldr	r3, [r4, #8]
    4142:	4283      	cmp	r3, r0
    4144:	d201      	bcs.n	414a <SBUS::parse()+0x22>
    4146:	2300      	movs	r3, #0
    4148:	7323      	strb	r3, [r4, #12]
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    414a:	4d25      	ldr	r5, [pc, #148]	; (41e0 <SBUS::parse()+0xb8>)
		_sbusTime = 0;
		_curByte = _bus->read();
		// find the header
		if (_parserState == 0) {
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
					_parserState++;
    414c:	2601      	movs	r6, #1
    414e:	e011      	b.n	4174 <SBUS::parse()+0x4c>
	elapsedMicros(unsigned long val) { us = micros() - val; }
    4150:	f009 f826 	bl	d1a0 <micros>
    4154:	4b22      	ldr	r3, [pc, #136]	; (41e0 <SBUS::parse()+0xb8>)
    4156:	6018      	str	r0, [r3, #0]
	static elapsedMicros _sbusTime = 0;
    4158:	4b20      	ldr	r3, [pc, #128]	; (41dc <SBUS::parse()+0xb4>)
    415a:	2201      	movs	r2, #1
    415c:	601a      	str	r2, [r3, #0]
    415e:	e7ea      	b.n	4136 <SBUS::parse()+0xe>
				} else {
					_parserState = 0;
				}
		} else {
			// strip off the data
			if ((_parserState-1) < _payloadSize) {
    4160:	2b18      	cmp	r3, #24
    4162:	d803      	bhi.n	416c <SBUS::parse()+0x44>
				_payload[_parserState-1] = _curByte;
    4164:	18e2      	adds	r2, r4, r3
    4166:	7390      	strb	r0, [r2, #14]
				_parserState++;
    4168:	3301      	adds	r3, #1
    416a:	7323      	strb	r3, [r4, #12]
			}
			// check the end byte
			if ((_parserState-1) == _payloadSize) {
    416c:	7b23      	ldrb	r3, [r4, #12]
    416e:	2b19      	cmp	r3, #25
    4170:	d022      	beq.n	41b8 <SBUS::parse()+0x90>
					_parserState = 0;
					return false;
				}
			}
		}
		_prevByte = _curByte;
    4172:	7360      	strb	r0, [r4, #13]
	while (_bus->available() > 0) {
    4174:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    4178:	6803      	ldr	r3, [r0, #0]
    417a:	691b      	ldr	r3, [r3, #16]
    417c:	4798      	blx	r3
    417e:	2800      	cmp	r0, #0
    4180:	dd29      	ble.n	41d6 <SBUS::parse()+0xae>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    4182:	f009 f80d 	bl	d1a0 <micros>
    4186:	6028      	str	r0, [r5, #0]
		_curByte = _bus->read();
    4188:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    418c:	6803      	ldr	r3, [r0, #0]
    418e:	695b      	ldr	r3, [r3, #20]
    4190:	4798      	blx	r3
    4192:	b2c0      	uxtb	r0, r0
    4194:	73a0      	strb	r0, [r4, #14]
		if (_parserState == 0) {
    4196:	7b23      	ldrb	r3, [r4, #12]
    4198:	2b00      	cmp	r3, #0
    419a:	d1e1      	bne.n	4160 <SBUS::parse()+0x38>
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
    419c:	7923      	ldrb	r3, [r4, #4]
    419e:	4283      	cmp	r3, r0
    41a0:	d1e7      	bne.n	4172 <SBUS::parse()+0x4a>
    41a2:	7b63      	ldrb	r3, [r4, #13]
    41a4:	7962      	ldrb	r2, [r4, #5]
    41a6:	429a      	cmp	r2, r3
    41a8:	d004      	beq.n	41b4 <SBUS::parse()+0x8c>
    41aa:	79e1      	ldrb	r1, [r4, #7]
    41ac:	79a2      	ldrb	r2, [r4, #6]
    41ae:	400b      	ands	r3, r1
    41b0:	429a      	cmp	r2, r3
    41b2:	d1de      	bne.n	4172 <SBUS::parse()+0x4a>
					_parserState++;
    41b4:	7326      	strb	r6, [r4, #12]
    41b6:	e7dc      	b.n	4172 <SBUS::parse()+0x4a>
				if ((_curByte == _sbusFooter) || ((_curByte & _sbus2Mask) == _sbus2Footer)) {
    41b8:	7963      	ldrb	r3, [r4, #5]
    41ba:	4283      	cmp	r3, r0
    41bc:	d007      	beq.n	41ce <SBUS::parse()+0xa6>
    41be:	79e2      	ldrb	r2, [r4, #7]
    41c0:	79a3      	ldrb	r3, [r4, #6]
    41c2:	4010      	ands	r0, r2
    41c4:	4283      	cmp	r3, r0
    41c6:	d002      	beq.n	41ce <SBUS::parse()+0xa6>
					_parserState = 0;
    41c8:	2000      	movs	r0, #0
    41ca:	7320      	strb	r0, [r4, #12]
					return false;
    41cc:	e004      	b.n	41d8 <SBUS::parse()+0xb0>
					_parserState = 0;
    41ce:	2300      	movs	r3, #0
    41d0:	7323      	strb	r3, [r4, #12]
					return true;
    41d2:	2001      	movs	r0, #1
    41d4:	e000      	b.n	41d8 <SBUS::parse()+0xb0>
	}
	// return false if a partial packet
	return false;
    41d6:	2000      	movs	r0, #0
}
    41d8:	bd70      	pop	{r4, r5, r6, pc}
    41da:	bf00      	nop
    41dc:	20004b4c 	.word	0x20004b4c
    41e0:	20004cc0 	.word	0x20004cc0

000041e4 <SBUS::read(unsigned short*, bool*, bool*)>:
{
    41e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41e6:	4604      	mov	r4, r0
    41e8:	460d      	mov	r5, r1
    41ea:	4616      	mov	r6, r2
    41ec:	461f      	mov	r7, r3
	if (parse()) {
    41ee:	f7ff ff9b 	bl	4128 <SBUS::parse()>
    41f2:	4602      	mov	r2, r0
    41f4:	2800      	cmp	r0, #0
    41f6:	f000 80a5 	beq.w	4344 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
		if (channels) {
    41fa:	2d00      	cmp	r5, #0
    41fc:	f000 808e 	beq.w	431c <SBUS::read(unsigned short*, bool*, bool*)+0x138>
			channels[0]  = (uint16_t) ((_payload[0]    |_payload[1] <<8)                     & 0x07FF);
    4200:	7c21      	ldrb	r1, [r4, #16]
    4202:	7be3      	ldrb	r3, [r4, #15]
    4204:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4208:	f3c3 030a 	ubfx	r3, r3, #0, #11
    420c:	802b      	strh	r3, [r5, #0]
			channels[1]  = (uint16_t) ((_payload[1]>>3 |_payload[2] <<5)                     & 0x07FF);
    420e:	7c21      	ldrb	r1, [r4, #16]
    4210:	7c63      	ldrb	r3, [r4, #17]
    4212:	015b      	lsls	r3, r3, #5
    4214:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    4218:	f3c3 030a 	ubfx	r3, r3, #0, #11
    421c:	806b      	strh	r3, [r5, #2]
			channels[2]  = (uint16_t) ((_payload[2]>>6 |_payload[3] <<2 |_payload[4]<<10)  	 & 0x07FF);
    421e:	7ca1      	ldrb	r1, [r4, #18]
    4220:	7ce3      	ldrb	r3, [r4, #19]
    4222:	029b      	lsls	r3, r3, #10
    4224:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    4228:	7c61      	ldrb	r1, [r4, #17]
    422a:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    422e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4232:	80ab      	strh	r3, [r5, #4]
			channels[3]  = (uint16_t) ((_payload[4]>>1 |_payload[5] <<7)                     & 0x07FF);
    4234:	7ce1      	ldrb	r1, [r4, #19]
    4236:	7d23      	ldrb	r3, [r4, #20]
    4238:	01db      	lsls	r3, r3, #7
    423a:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    423e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4242:	80eb      	strh	r3, [r5, #6]
			channels[4]  = (uint16_t) ((_payload[5]>>4 |_payload[6] <<4)                     & 0x07FF);
    4244:	7d21      	ldrb	r1, [r4, #20]
    4246:	7d63      	ldrb	r3, [r4, #21]
    4248:	011b      	lsls	r3, r3, #4
    424a:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    424e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4252:	812b      	strh	r3, [r5, #8]
			channels[5]  = (uint16_t) ((_payload[6]>>7 |_payload[7] <<1 |_payload[8]<<9)   	 & 0x07FF);
    4254:	7da1      	ldrb	r1, [r4, #22]
    4256:	7de3      	ldrb	r3, [r4, #23]
    4258:	025b      	lsls	r3, r3, #9
    425a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    425e:	7d61      	ldrb	r1, [r4, #21]
    4260:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    4264:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4268:	816b      	strh	r3, [r5, #10]
			channels[6]  = (uint16_t) ((_payload[8]>>2 |_payload[9] <<6)                     & 0x07FF);
    426a:	7de1      	ldrb	r1, [r4, #23]
    426c:	7e23      	ldrb	r3, [r4, #24]
    426e:	019b      	lsls	r3, r3, #6
    4270:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    4274:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4278:	81ab      	strh	r3, [r5, #12]
			channels[7]  = (uint16_t) ((_payload[9]>>5 |_payload[10]<<3)                     & 0x07FF);
    427a:	7e21      	ldrb	r1, [r4, #24]
    427c:	7e63      	ldrb	r3, [r4, #25]
    427e:	00db      	lsls	r3, r3, #3
    4280:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    4284:	81eb      	strh	r3, [r5, #14]
			channels[8]  = (uint16_t) ((_payload[11]   |_payload[12]<<8)                     & 0x07FF);
    4286:	7ee1      	ldrb	r1, [r4, #27]
    4288:	7ea3      	ldrb	r3, [r4, #26]
    428a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    428e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4292:	822b      	strh	r3, [r5, #16]
			channels[9]  = (uint16_t) ((_payload[12]>>3|_payload[13]<<5)                     & 0x07FF);
    4294:	7ee1      	ldrb	r1, [r4, #27]
    4296:	7f23      	ldrb	r3, [r4, #28]
    4298:	015b      	lsls	r3, r3, #5
    429a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    429e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42a2:	826b      	strh	r3, [r5, #18]
			channels[10] = (uint16_t) ((_payload[13]>>6|_payload[14]<<2 |_payload[15]<<10) 	 & 0x07FF);
    42a4:	7f61      	ldrb	r1, [r4, #29]
    42a6:	7fa3      	ldrb	r3, [r4, #30]
    42a8:	029b      	lsls	r3, r3, #10
    42aa:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    42ae:	7f21      	ldrb	r1, [r4, #28]
    42b0:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    42b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42b8:	82ab      	strh	r3, [r5, #20]
			channels[11] = (uint16_t) ((_payload[15]>>1|_payload[16]<<7)                     & 0x07FF);
    42ba:	7fa1      	ldrb	r1, [r4, #30]
    42bc:	7fe3      	ldrb	r3, [r4, #31]
    42be:	01db      	lsls	r3, r3, #7
    42c0:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    42c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42c8:	82eb      	strh	r3, [r5, #22]
			channels[12] = (uint16_t) ((_payload[16]>>4|_payload[17]<<4)                     & 0x07FF);
    42ca:	7fe1      	ldrb	r1, [r4, #31]
    42cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    42d0:	011b      	lsls	r3, r3, #4
    42d2:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    42d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42da:	832b      	strh	r3, [r5, #24]
			channels[13] = (uint16_t) ((_payload[17]>>7|_payload[18]<<1 |_payload[19]<<9)  	 & 0x07FF);
    42dc:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    42e0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    42e4:	025b      	lsls	r3, r3, #9
    42e6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    42ea:	f894 1020 	ldrb.w	r1, [r4, #32]
    42ee:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    42f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42f6:	836b      	strh	r3, [r5, #26]
			channels[14] = (uint16_t) ((_payload[19]>>2|_payload[20]<<6)                     & 0x07FF);
    42f8:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    42fc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    4300:	019b      	lsls	r3, r3, #6
    4302:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    4306:	f3c3 030a 	ubfx	r3, r3, #0, #11
    430a:	83ab      	strh	r3, [r5, #28]
			channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
    430c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    4310:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    4314:	00db      	lsls	r3, r3, #3
    4316:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    431a:	83eb      	strh	r3, [r5, #30]
		if (lostFrame) {
    431c:	b147      	cbz	r7, 4330 <SBUS::read(unsigned short*, bool*, bool*)+0x14c>
    	if (_payload[22] & _sbusLostFrame) {
    431e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    4322:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    4326:	4219      	tst	r1, r3
      	*lostFrame = true;
    4328:	bf14      	ite	ne
    432a:	2301      	movne	r3, #1
				*lostFrame = false;
    432c:	2300      	moveq	r3, #0
    432e:	703b      	strb	r3, [r7, #0]
		if (failsafe) {
    4330:	b146      	cbz	r6, 4344 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
    	if (_payload[22] & _sbusFailSafe) {
    4332:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    4336:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    433a:	4219      	tst	r1, r3
      		*failsafe = true;
    433c:	bf14      	ite	ne
    433e:	2301      	movne	r3, #1
      		*failsafe = false;
    4340:	2300      	moveq	r3, #0
    4342:	7033      	strb	r3, [r6, #0]
}
    4344:	4610      	mov	r0, r2
    4346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004348 <SBUS::scaleBias(unsigned char)>:

/* compute scale factor and bias from end points */
void SBUS::scaleBias(uint8_t channel)
{
	_sbusScale[channel] = 2.0f / ((float)_sbusMax[channel] - (float)_sbusMin[channel]);
    4348:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    434c:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    434e:	ee07 2a10 	vmov	s14, r2
    4352:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    4356:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    435a:	ee07 3a90 	vmov	s15, r3
    435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4362:	ee77 7ac7 	vsub.f32	s15, s15, s14
    4366:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    436a:	eec6 6a27 	vdiv.f32	s13, s12, s15
    436e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    4372:	edc0 6a1c 	vstr	s13, [r0, #112]	; 0x70
	_sbusBias[channel] = -1.0f*((float)_sbusMin[channel] + ((float)_sbusMax[channel] - (float)_sbusMin[channel]) / 2.0f) * _sbusScale[channel];
    4376:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    437a:	ee67 7a86 	vmul.f32	s15, s15, s12
    437e:	ee77 7a87 	vadd.f32	s15, s15, s14
    4382:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    4386:	edc0 7a2c 	vstr	s15, [r0, #176]	; 0xb0
}
    438a:	4770      	bx	lr

0000438c <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>:
{
    438c:	b508      	push	{r3, lr}
	_sbusMin[channel] = min;
    438e:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
    4392:	f8ac 202e 	strh.w	r2, [ip, #46]	; 0x2e
	_sbusMax[channel] = max;
    4396:	f8ac 304e 	strh.w	r3, [ip, #78]	; 0x4e
	scaleBias(channel);
    439a:	f7ff ffd5 	bl	4348 <SBUS::scaleBias(unsigned char)>
}
    439e:	bd08      	pop	{r3, pc}

000043a0 <SBUS::begin()>:
{
    43a0:	b538      	push	{r3, r4, r5, lr}
    43a2:	4605      	mov	r5, r0
	_parserState = 0;
    43a4:	2400      	movs	r4, #0
    43a6:	7304      	strb	r4, [r0, #12]
		setEndPoints(i,_defaultMin,_defaultMax);
    43a8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    43aa:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    43ac:	b2e1      	uxtb	r1, r4
    43ae:	4628      	mov	r0, r5
    43b0:	f7ff ffec 	bl	438c <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>
	for (uint8_t i = 0; i < _numChannels; i++) {
    43b4:	3401      	adds	r4, #1
    43b6:	2c10      	cmp	r4, #16
    43b8:	d1f6      	bne.n	43a8 <SBUS::begin()+0x8>
		_bus->begin(_sbusBaud,SERIAL_8E2_RXINV_TXINV);
    43ba:	f44f 729b 	mov.w	r2, #310	; 0x136
    43be:	6829      	ldr	r1, [r5, #0]
    43c0:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    43c4:	f008 f8b2 	bl	c52c <HardwareSerial::begin(unsigned long, unsigned short)>
}
    43c8:	bd38      	pop	{r3, r4, r5, pc}

000043ca <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    43ca:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    43ce:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    43d2:	1a10      	subs	r0, r2, r0
    43d4:	4770      	bx	lr

000043d6 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    43d6:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    43da:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    43de:	429a      	cmp	r2, r3
    43e0:	d905      	bls.n	43ee <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    43e2:	1c5a      	adds	r2, r3, #1
    43e4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    43e8:	4418      	add	r0, r3
    43ea:	7e80      	ldrb	r0, [r0, #26]
    43ec:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    43ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    43f2:	4770      	bx	lr

000043f4 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    43f4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    43f8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    43fc:	429a      	cmp	r2, r3
    43fe:	d902      	bls.n	4406 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    4400:	4418      	add	r0, r3
    4402:	7e80      	ldrb	r0, [r0, #26]
    4404:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    4406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    440a:	4770      	bx	lr

0000440c <TwoWire::flush()>:
	virtual void flush(void) {
	}
    440c:	4770      	bx	lr

0000440e <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    440e:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    4412:	b17b      	cbz	r3, 4434 <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    4414:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    4418:	2b88      	cmp	r3, #136	; 0x88
    441a:	d903      	bls.n	4424 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    441c:	2301      	movs	r3, #1
    441e:	6043      	str	r3, [r0, #4]
			return 0;
    4420:	2000      	movs	r0, #0
    4422:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    4424:	1c5a      	adds	r2, r3, #1
    4426:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
    442a:	4418      	add	r0, r3
    442c:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    4430:	2001      	movs	r0, #1
    4432:	4770      	bx	lr
	return 0;
    4434:	2000      	movs	r0, #0
}
    4436:	4770      	bx	lr

00004438 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    4438:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    443a:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    443e:	b90b      	cbnz	r3, 4444 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
    4440:	2000      	movs	r0, #0
}
    4442:	bd38      	pop	{r3, r4, r5, pc}
    4444:	4605      	mov	r5, r0
    4446:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    4448:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    444c:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    4450:	42a2      	cmp	r2, r4
    4452:	d202      	bcs.n	445a <TwoWire::write(unsigned char const*, unsigned int)+0x22>
    4454:	2001      	movs	r0, #1
    4456:	6068      	str	r0, [r5, #4]
			quantity = avail;
    4458:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    445a:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    445e:	4622      	mov	r2, r4
    4460:	4418      	add	r0, r3
    4462:	f008 ff5b 	bl	d31c <memcpy>
		txBufferLength += quantity;
    4466:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    446a:	4423      	add	r3, r4
    446c:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
    4470:	4620      	mov	r0, r4
    4472:	e7e6      	b.n	4442 <TwoWire::write(unsigned char const*, unsigned int)+0xa>

00004474 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    4474:	b538      	push	{r3, r4, r5, lr}
    4476:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    4478:	2500      	movs	r5, #0
    447a:	6045      	str	r5, [r0, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    447c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4480:	6083      	str	r3, [r0, #8]
    4482:	7305      	strb	r5, [r0, #12]
		: port(myport), hardware(myhardware) {
    4484:	4b15      	ldr	r3, [pc, #84]	; (44dc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    4486:	6003      	str	r3, [r0, #0]
    4488:	6101      	str	r1, [r0, #16]
    448a:	6142      	str	r2, [r0, #20]
    448c:	7605      	strb	r5, [r0, #24]
    448e:	7645      	strb	r5, [r0, #25]
    4490:	2288      	movs	r2, #136	; 0x88
    4492:	4629      	mov	r1, r5
    4494:	301a      	adds	r0, #26
    4496:	f00d f809 	bl	114ac <memset>
    449a:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    449e:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    44a2:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    44a6:	2289      	movs	r2, #137	; 0x89
    44a8:	4629      	mov	r1, r5
    44aa:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    44ae:	f00c fffd 	bl	114ac <memset>
    44b2:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    44b6:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    44ba:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    44be:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    44c2:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    44c6:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    44ca:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    44ce:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    44d2:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	}
    44d6:	4620      	mov	r0, r4
    44d8:	bd38      	pop	{r3, r4, r5, pc}
    44da:	bf00      	nop
    44dc:	200025f8 	.word	0x200025f8

000044e0 <TwoWire::force_clock()>:
{
    44e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44e4:	b083      	sub	sp, #12
    44e6:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    44e8:	6943      	ldr	r3, [r0, #20]
    44ea:	7e02      	ldrb	r2, [r0, #24]
    44ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    44f0:	7a11      	ldrb	r1, [r2, #8]
    44f2:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    44f4:	7e42      	ldrb	r2, [r0, #25]
    44f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    44fa:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    44fe:	4b47      	ldr	r3, [pc, #284]	; (461c <TwoWire::force_clock()+0x13c>)
    4500:	ea4f 1e01 	mov.w	lr, r1, lsl #4
    4504:	eb03 1201 	add.w	r2, r3, r1, lsl #4
    4508:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    450a:	ea4f 1108 	mov.w	r1, r8, lsl #4
    450e:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    4512:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4514:	6852      	ldr	r2, [r2, #4]
    4516:	2415      	movs	r4, #21
    4518:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
    451a:	f853 200e 	ldr.w	r2, [r3, lr]
    451e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4522:	f853 e00e 	ldr.w	lr, [r3, lr]
    4526:	f8de 2004 	ldr.w	r2, [lr, #4]
    452a:	4332      	orrs	r2, r6
    452c:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4530:	686a      	ldr	r2, [r5, #4]
    4532:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    4534:	585a      	ldr	r2, [r3, r1]
    4536:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    453a:	585a      	ldr	r2, [r3, r1]
    453c:	6853      	ldr	r3, [r2, #4]
    453e:	4303      	orrs	r3, r0
    4540:	6053      	str	r3, [r2, #4]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    4542:	4b37      	ldr	r3, [pc, #220]	; (4620 <TwoWire::force_clock()+0x140>)
    4544:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4546:	4b37      	ldr	r3, [pc, #220]	; (4624 <TwoWire::force_clock()+0x144>)
    4548:	681a      	ldr	r2, [r3, #0]
    454a:	4b37      	ldr	r3, [pc, #220]	; (4628 <TwoWire::force_clock()+0x148>)
    454c:	fba3 3202 	umull	r3, r2, r3, r2
    4550:	0c92      	lsrs	r2, r2, #18
    4552:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4556:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4558:	4931      	ldr	r1, [pc, #196]	; (4620 <TwoWire::force_clock()+0x140>)
    455a:	684b      	ldr	r3, [r1, #4]
    455c:	1b1b      	subs	r3, r3, r4
    455e:	429a      	cmp	r2, r3
    4560:	d8fb      	bhi.n	455a <TwoWire::force_clock()+0x7a>
    4562:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
    4564:	492d      	ldr	r1, [pc, #180]	; (461c <TwoWire::force_clock()+0x13c>)
    4566:	9b01      	ldr	r3, [sp, #4]
    4568:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    456c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
    4570:	4b2b      	ldr	r3, [pc, #172]	; (4620 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4572:	4d2c      	ldr	r5, [pc, #176]	; (4624 <TwoWire::force_clock()+0x144>)
    4574:	4c2c      	ldr	r4, [pc, #176]	; (4628 <TwoWire::force_clock()+0x148>)
    4576:	e025      	b.n	45c4 <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
    4578:	680f      	ldr	r7, [r1, #0]
    457a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    457e:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4582:	f8d5 a000 	ldr.w	sl, [r5]
    4586:	fba4 9a0a 	umull	r9, sl, r4, sl
    458a:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    458e:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4592:	685f      	ldr	r7, [r3, #4]
    4594:	eba7 090b 	sub.w	r9, r7, fp
    4598:	45ca      	cmp	sl, r9
    459a:	d8fa      	bhi.n	4592 <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
    459c:	680f      	ldr	r7, [r1, #0]
    459e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    45a2:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    45a6:	f8d5 a000 	ldr.w	sl, [r5]
    45aa:	fba4 9a0a 	umull	r9, sl, r4, sl
    45ae:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    45b2:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    45b6:	685f      	ldr	r7, [r3, #4]
    45b8:	eba7 090b 	sub.w	r9, r7, fp
    45bc:	45ca      	cmp	sl, r9
    45be:	d8fa      	bhi.n	45b6 <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
    45c0:	3a01      	subs	r2, #1
    45c2:	d00e      	beq.n	45e2 <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
    45c4:	f8de 7000 	ldr.w	r7, [lr]
    45c8:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    45cc:	ea19 0f06 	tst.w	r9, r6
    45d0:	d0d2      	beq.n	4578 <TwoWire::force_clock()+0x98>
    45d2:	680f      	ldr	r7, [r1, #0]
    45d4:	f8d7 9008 	ldr.w	r9, [r7, #8]
    45d8:	ea19 0f00 	tst.w	r9, r0
    45dc:	d0cc      	beq.n	4578 <TwoWire::force_clock()+0x98>
			ret = true;
    45de:	2001      	movs	r0, #1
    45e0:	e000      	b.n	45e4 <TwoWire::force_clock()+0x104>
	bool ret = false;
    45e2:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    45e4:	4b0d      	ldr	r3, [pc, #52]	; (461c <TwoWire::force_clock()+0x13c>)
    45e6:	9a01      	ldr	r2, [sp, #4]
    45e8:	eb03 1702 	add.w	r7, r3, r2, lsl #4
    45ec:	6879      	ldr	r1, [r7, #4]
    45ee:	f8dc 2014 	ldr.w	r2, [ip, #20]
    45f2:	f89c 4018 	ldrb.w	r4, [ip, #24]
    45f6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    45fa:	68d2      	ldr	r2, [r2, #12]
    45fc:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    45fe:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    4602:	685a      	ldr	r2, [r3, #4]
    4604:	f8dc 3014 	ldr.w	r3, [ip, #20]
    4608:	f89c 1019 	ldrb.w	r1, [ip, #25]
    460c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    4610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4612:	6013      	str	r3, [r2, #0]
}
    4614:	b003      	add	sp, #12
    4616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    461a:	bf00      	nop
    461c:	2000293c 	.word	0x2000293c
    4620:	e0001000 	.word	0xe0001000
    4624:	20003338 	.word	0x20003338
    4628:	431bde83 	.word	0x431bde83

0000462c <TwoWire::wait_idle()>:
{
    462c:	b538      	push	{r3, r4, r5, lr}
    462e:	4605      	mov	r5, r0
	return systick_millis_count;
    4630:	4b0c      	ldr	r3, [pc, #48]	; (4664 <TwoWire::wait_idle()+0x38>)
    4632:	681c      	ldr	r4, [r3, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    4634:	6902      	ldr	r2, [r0, #16]
    4636:	4619      	mov	r1, r3
    4638:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    463a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    463e:	d00a      	beq.n	4656 <TwoWire::wait_idle()+0x2a>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    4640:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    4644:	d107      	bne.n	4656 <TwoWire::wait_idle()+0x2a>
    4646:	680b      	ldr	r3, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
    4648:	1b1b      	subs	r3, r3, r4
		if (timeout > 16) {
    464a:	2b10      	cmp	r3, #16
    464c:	d9f4      	bls.n	4638 <TwoWire::wait_idle()+0xc>
			if (force_clock()) break;
    464e:	4628      	mov	r0, r5
    4650:	f7ff ff46 	bl	44e0 <TwoWire::force_clock()>
    4654:	b120      	cbz	r0, 4660 <TwoWire::wait_idle()+0x34>
	port->MSR = 0x00007F00; // clear all prior flags
    4656:	692b      	ldr	r3, [r5, #16]
    4658:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    465c:	615a      	str	r2, [r3, #20]
	return true;
    465e:	2001      	movs	r0, #1
}
    4660:	bd38      	pop	{r3, r4, r5, pc}
    4662:	bf00      	nop
    4664:	20005388 	.word	0x20005388

00004668 <TwoWire::endTransmission(unsigned char)>:
{
    4668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    466c:	f890 612f 	ldrb.w	r6, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    4670:	2e00      	cmp	r6, #0
    4672:	d06e      	beq.n	4752 <TwoWire::endTransmission(unsigned char)+0xea>
    4674:	4605      	mov	r5, r0
    4676:	4689      	mov	r9, r1
	if (!wait_idle()) return 4;
    4678:	f7ff ffd8 	bl	462c <TwoWire::wait_idle()>
    467c:	2800      	cmp	r0, #0
    467e:	d06b      	beq.n	4758 <TwoWire::endTransmission(unsigned char)+0xf0>
    4680:	4b36      	ldr	r3, [pc, #216]	; (475c <TwoWire::endTransmission(unsigned char)+0xf4>)
    4682:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    4686:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4688:	f44f 7a00 	mov.w	sl, #512	; 0x200
    468c:	461f      	mov	r7, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    468e:	e040      	b.n	4712 <TwoWire::endTransmission(unsigned char)+0xaa>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4690:	692b      	ldr	r3, [r5, #16]
    4692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4694:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    4698:	f012 0f04 	tst.w	r2, #4
    469c:	d00b      	beq.n	46b6 <TwoWire::endTransmission(unsigned char)+0x4e>
    469e:	e03a      	b.n	4716 <TwoWire::endTransmission(unsigned char)+0xae>
				} else if (tx_index < tx_len) {
    46a0:	42a6      	cmp	r6, r4
    46a2:	d912      	bls.n	46ca <TwoWire::endTransmission(unsigned char)+0x62>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    46a4:	692a      	ldr	r2, [r5, #16]
    46a6:	1929      	adds	r1, r5, r4
    46a8:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    46ac:	6611      	str	r1, [r2, #96]	; 0x60
    46ae:	3401      	adds	r4, #1
				fifo_used++;
    46b0:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    46b2:	2b03      	cmp	r3, #3
    46b4:	d82f      	bhi.n	4716 <TwoWire::endTransmission(unsigned char)+0xae>
				if (tx_index == 0) {
    46b6:	2c00      	cmp	r4, #0
    46b8:	d1f2      	bne.n	46a0 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    46ba:	6929      	ldr	r1, [r5, #16]
    46bc:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    46c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    46c4:	660a      	str	r2, [r1, #96]	; 0x60
					tx_index = 1;
    46c6:	2401      	movs	r4, #1
    46c8:	e7f2      	b.n	46b0 <TwoWire::endTransmission(unsigned char)+0x48>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    46ca:	f1b9 0f00 	cmp.w	r9, #0
    46ce:	d002      	beq.n	46d6 <TwoWire::endTransmission(unsigned char)+0x6e>
    46d0:	692b      	ldr	r3, [r5, #16]
    46d2:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    46d6:	3401      	adds	r4, #1
					break;
    46d8:	e01d      	b.n	4716 <TwoWire::endTransmission(unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    46da:	690b      	ldr	r3, [r1, #16]
    46dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    46e0:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    46e2:	2004      	movs	r0, #4
    46e4:	e036      	b.n	4754 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    46e6:	690b      	ldr	r3, [r1, #16]
    46e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    46ec:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    46ee:	692b      	ldr	r3, [r5, #16]
    46f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    46f4:	661a      	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    46f6:	2002      	movs	r0, #2
    46f8:	e02c      	b.n	4754 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    46fa:	690b      	ldr	r3, [r1, #16]
    46fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4700:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4702:	692b      	ldr	r3, [r5, #16]
    4704:	f44f 7200 	mov.w	r2, #512	; 0x200
    4708:	661a      	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    470a:	2004      	movs	r0, #4
    470c:	e022      	b.n	4754 <TwoWire::endTransmission(unsigned char)+0xec>
		yield();
    470e:	f00a fc65 	bl	efdc <yield>
		if (tx_index <= tx_len) {
    4712:	42b4      	cmp	r4, r6
    4714:	d9bc      	bls.n	4690 <TwoWire::endTransmission(unsigned char)+0x28>
		uint32_t status = port->MSR; // pg 2884 & 2891
    4716:	6929      	ldr	r1, [r5, #16]
    4718:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    471a:	f413 6f00 	tst.w	r3, #2048	; 0x800
    471e:	d1dc      	bne.n	46da <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    4720:	f413 6f80 	tst.w	r3, #1024	; 0x400
    4724:	d1df      	bne.n	46e6 <TwoWire::endTransmission(unsigned char)+0x7e>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    4726:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    472a:	d1e6      	bne.n	46fa <TwoWire::endTransmission(unsigned char)+0x92>
    472c:	683a      	ldr	r2, [r7, #0]
	operator unsigned long () const { return millis() - ms; }
    472e:	eba2 0208 	sub.w	r2, r2, r8
    4732:	2a32      	cmp	r2, #50	; 0x32
    4734:	d8e1      	bhi.n	46fa <TwoWire::endTransmission(unsigned char)+0x92>
		if (tx_index > tx_len) {
    4736:	42b4      	cmp	r4, r6
    4738:	d9e9      	bls.n	470e <TwoWire::endTransmission(unsigned char)+0xa6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    473a:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    473c:	f012 0f07 	tst.w	r2, #7
    4740:	d1e5      	bne.n	470e <TwoWire::endTransmission(unsigned char)+0xa6>
    4742:	f413 7f00 	tst.w	r3, #512	; 0x200
    4746:	d102      	bne.n	474e <TwoWire::endTransmission(unsigned char)+0xe6>
    4748:	f1b9 0f00 	cmp.w	r9, #0
    474c:	d1df      	bne.n	470e <TwoWire::endTransmission(unsigned char)+0xa6>
				return 0;
    474e:	2000      	movs	r0, #0
    4750:	e000      	b.n	4754 <TwoWire::endTransmission(unsigned char)+0xec>
	if (!tx_len) return 4; // no address for transmit
    4752:	2004      	movs	r0, #4
}
    4754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!wait_idle()) return 4;
    4758:	2004      	movs	r0, #4
    475a:	e7fb      	b.n	4754 <TwoWire::endTransmission(unsigned char)+0xec>
    475c:	20005388 	.word	0x20005388

00004760 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4764:	4604      	mov	r4, r0
    4766:	460d      	mov	r5, r1
    4768:	4616      	mov	r6, r2
    476a:	4698      	mov	r8, r3
	if (!wait_idle()) return 4;
    476c:	f7ff ff5e 	bl	462c <TwoWire::wait_idle()>
    4770:	2800      	cmp	r0, #0
    4772:	f000 8090 	beq.w	4896 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    4776:	0069      	lsls	r1, r5, #1
	if (length < 1) length = 1;
    4778:	2e01      	cmp	r6, #1
    477a:	bf38      	it	cc
    477c:	2601      	movcc	r6, #1
	rxBufferIndex = 0;
    477e:	2500      	movs	r5, #0
    4780:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
	rxBufferLength = 0;
    4784:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    4788:	4b44      	ldr	r3, [pc, #272]	; (489c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    478a:	f8d3 9000 	ldr.w	r9, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    478e:	b2c9      	uxtb	r1, r1
    4790:	f240 4701 	movw	r7, #1025	; 0x401
    4794:	430f      	orrs	r7, r1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4796:	e059      	b.n	484c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    4798:	6923      	ldr	r3, [r4, #16]
    479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    479c:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    47a0:	f013 0f04 	tst.w	r3, #4
    47a4:	d154      	bne.n	4850 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    47a6:	462b      	mov	r3, r5
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    47a8:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    47ac:	1e70      	subs	r0, r6, #1
    47ae:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    47b2:	4429      	add	r1, r5
    47b4:	e010      	b.n	47d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    47b6:	2b01      	cmp	r3, #1
    47b8:	d006      	beq.n	47c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    47ba:	f1b8 0f00 	cmp.w	r8, #0
    47be:	d005      	beq.n	47cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
    47c0:	6922      	ldr	r2, [r4, #16]
    47c2:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    47c6:	e001      	b.n	47cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    47c8:	6922      	ldr	r2, [r4, #16]
    47ca:	6610      	str	r0, [r2, #96]	; 0x60
				tx_state++;
    47cc:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
    47ce:	1aca      	subs	r2, r1, r3
    47d0:	2a03      	cmp	r2, #3
    47d2:	d806      	bhi.n	47e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
    47d4:	2b02      	cmp	r3, #2
    47d6:	d804      	bhi.n	47e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
				if (tx_state == 0) {
    47d8:	2b00      	cmp	r3, #0
    47da:	d1ec      	bne.n	47b6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    47dc:	6922      	ldr	r2, [r4, #16]
    47de:	6617      	str	r7, [r2, #96]	; 0x60
    47e0:	e7f4      	b.n	47cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				tx_state++;
    47e2:	461d      	mov	r5, r3
    47e4:	e034      	b.n	4850 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    47e6:	f8d4 c010 	ldr.w	ip, [r4, #16]
    47ea:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
    47ee:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    47f2:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    47f6:	d02f      	beq.n	4858 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
				rxBuffer[rxBufferLength++] = port->MRDR;
    47f8:	f8dc 0070 	ldr.w	r0, [ip, #112]	; 0x70
    47fc:	460b      	mov	r3, r1
    47fe:	3101      	adds	r1, #1
    4800:	b2c9      	uxtb	r1, r1
    4802:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    4806:	4423      	add	r3, r4
    4808:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    480a:	3a01      	subs	r2, #1
    480c:	d024      	beq.n	4858 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
    480e:	2987      	cmp	r1, #135	; 0x87
    4810:	d9f2      	bls.n	47f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x98>
    4812:	e021      	b.n	4858 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4814:	690b      	ldr	r3, [r1, #16]
    4816:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    481a:	610b      	str	r3, [r1, #16]
			break;
    481c:	e007      	b.n	482e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    481e:	690b      	ldr	r3, [r1, #16]
    4820:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4824:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4826:	6923      	ldr	r3, [r4, #16]
    4828:	f44f 7200 	mov.w	r2, #512	; 0x200
    482c:	661a      	str	r2, [r3, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    482e:	6923      	ldr	r3, [r4, #16]
    4830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    4832:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    4836:	d003      	beq.n	4840 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
    4838:	691a      	ldr	r2, [r3, #16]
    483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    483e:	611a      	str	r2, [r3, #16]
	return rxBufferLength;
    4840:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
    4844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		yield();
    4848:	f00a fbc8 	bl	efdc <yield>
		if (tx_state < 3) {
    484c:	2d02      	cmp	r5, #2
    484e:	d9a3      	bls.n	4798 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
		if (rxBufferLength < sizeof(rxBuffer)) {
    4850:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    4854:	2987      	cmp	r1, #135	; 0x87
    4856:	d9c6      	bls.n	47e6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
		uint32_t status = port->MSR; // pg 2884 & 2891
    4858:	6921      	ldr	r1, [r4, #16]
    485a:	694a      	ldr	r2, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    485c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4860:	d1d8      	bne.n	4814 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4862:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    4866:	d1da      	bne.n	481e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
    4868:	4b0c      	ldr	r3, [pc, #48]	; (489c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    486a:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
    486c:	eba3 0309 	sub.w	r3, r3, r9
    4870:	2b32      	cmp	r3, #50	; 0x32
    4872:	d8d4      	bhi.n	481e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		if (rxBufferLength >= length && tx_state >= 3) {
    4874:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    4878:	42b3      	cmp	r3, r6
    487a:	d3e5      	bcc.n	4848 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    487c:	2d02      	cmp	r5, #2
    487e:	d9e3      	bls.n	4848 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4880:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4882:	f013 0f07 	tst.w	r3, #7
    4886:	d1df      	bne.n	4848 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4888:	f412 7f00 	tst.w	r2, #512	; 0x200
    488c:	d1cf      	bne.n	482e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
    488e:	f1b8 0f00 	cmp.w	r8, #0
    4892:	d1d9      	bne.n	4848 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4894:	e7cb      	b.n	482e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
	if (!wait_idle()) return 4;
    4896:	2004      	movs	r0, #4
    4898:	e7d4      	b.n	4844 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
    489a:	bf00      	nop
    489c:	20005388 	.word	0x20005388

000048a0 <TwoWire::isr()>:
{
    48a0:	b538      	push	{r3, r4, r5, lr}
    48a2:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    48a4:	6903      	ldr	r3, [r0, #16]
    48a6:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    48aa:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    48ae:	d001      	beq.n	48b4 <TwoWire::isr()+0x14>
    48b0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    48b4:	f015 0f02 	tst.w	r5, #2
    48b8:	d012      	beq.n	48e0 <TwoWire::isr()+0x40>
		int rx = port->SRDR;
    48ba:	6923      	ldr	r3, [r4, #16]
    48bc:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    48c0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    48c4:	d008      	beq.n	48d8 <TwoWire::isr()+0x38>
			rxBufferIndex = 0;
    48c6:	2300      	movs	r3, #0
    48c8:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    48cc:	1c59      	adds	r1, r3, #1
    48ce:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    48d2:	4423      	add	r3, r4
    48d4:	769a      	strb	r2, [r3, #26]
    48d6:	e003      	b.n	48e0 <TwoWire::isr()+0x40>
		if (rxBufferLength < BUFFER_LENGTH) {
    48d8:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    48dc:	2b87      	cmp	r3, #135	; 0x87
    48de:	d9f5      	bls.n	48cc <TwoWire::isr()+0x2c>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    48e0:	f015 0f01 	tst.w	r5, #1
    48e4:	d01b      	beq.n	491e <TwoWire::isr()+0x7e>
		if (!transmitting) {
    48e6:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    48ea:	b94b      	cbnz	r3, 4900 <TwoWire::isr()+0x60>
			if (user_onRequest != nullptr) {
    48ec:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    48f0:	b103      	cbz	r3, 48f4 <TwoWire::isr()+0x54>
				(*user_onRequest)();
    48f2:	4798      	blx	r3
			txBufferIndex = 0;
    48f4:	2300      	movs	r3, #0
    48f6:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    48fa:	2301      	movs	r3, #1
    48fc:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    4900:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
    4904:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    4908:	429a      	cmp	r2, r3
    490a:	d91e      	bls.n	494a <TwoWire::isr()+0xaa>
			port->STDR = txBuffer[txBufferIndex++];
    490c:	1c5a      	adds	r2, r3, #1
    490e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    4912:	6922      	ldr	r2, [r4, #16]
    4914:	4423      	add	r3, r4
    4916:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    491a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    491e:	f415 7f00 	tst.w	r5, #512	; 0x200
    4922:	d011      	beq.n	4948 <TwoWire::isr()+0xa8>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    4924:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    4928:	b118      	cbz	r0, 4932 <TwoWire::isr()+0x92>
    492a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    492e:	b103      	cbz	r3, 4932 <TwoWire::isr()+0x92>
			(*user_onReceive)(rxBufferLength);
    4930:	4798      	blx	r3
		rxBufferIndex = 0;
    4932:	2300      	movs	r3, #0
    4934:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
    4938:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
    493c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
    4940:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
    4944:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    4948:	bd38      	pop	{r3, r4, r5, pc}
			port->STDR = 0;
    494a:	6923      	ldr	r3, [r4, #16]
    494c:	2200      	movs	r2, #0
    494e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    4952:	e7e4      	b.n	491e <TwoWire::isr()+0x7e>

00004954 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    4954:	b508      	push	{r3, lr}
    4956:	4802      	ldr	r0, [pc, #8]	; (4960 <lpi2c1_isr()+0xc>)
    4958:	f7ff ffa2 	bl	48a0 <TwoWire::isr()>
    495c:	bd08      	pop	{r3, pc}
    495e:	bf00      	nop
    4960:	20004784 	.word	0x20004784

00004964 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    4964:	b508      	push	{r3, lr}
    4966:	4802      	ldr	r0, [pc, #8]	; (4970 <lpi2c3_isr()+0xc>)
    4968:	f7ff ff9a 	bl	48a0 <TwoWire::isr()>
    496c:	bd08      	pop	{r3, pc}
    496e:	bf00      	nop
    4970:	200048c4 	.word	0x200048c4

00004974 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    4974:	b508      	push	{r3, lr}
    4976:	4802      	ldr	r0, [pc, #8]	; (4980 <lpi2c4_isr()+0xc>)
    4978:	f7ff ff92 	bl	48a0 <TwoWire::isr()>
    497c:	bd08      	pop	{r3, pc}
    497e:	bf00      	nop
    4980:	20004a04 	.word	0x20004a04

00004984 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    4984:	6903      	ldr	r3, [r0, #16]
    4986:	2200      	movs	r2, #0
    4988:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    498a:	4b1d      	ldr	r3, [pc, #116]	; (4a00 <TwoWire::setClock(unsigned long)+0x7c>)
    498c:	4299      	cmp	r1, r3
    498e:	d81a      	bhi.n	49c6 <TwoWire::setClock(unsigned long)+0x42>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4990:	6903      	ldr	r3, [r0, #16]
    4992:	4a1c      	ldr	r2, [pc, #112]	; (4a04 <TwoWire::setClock(unsigned long)+0x80>)
    4994:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    4996:	6903      	ldr	r3, [r0, #16]
    4998:	2201      	movs	r2, #1
    499a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    499c:	6903      	ldr	r3, [r0, #16]
    499e:	4a1a      	ldr	r2, [pc, #104]	; (4a08 <TwoWire::setClock(unsigned long)+0x84>)
    49a0:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    49a2:	6903      	ldr	r3, [r0, #16]
    49a4:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
    49a8:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    49aa:	6903      	ldr	r3, [r0, #16]
    49ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    49ae:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    49b0:	6903      	ldr	r3, [r0, #16]
    49b2:	2200      	movs	r2, #0
    49b4:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    49b6:	6903      	ldr	r3, [r0, #16]
    49b8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    49bc:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    49be:	6903      	ldr	r3, [r0, #16]
    49c0:	2201      	movs	r2, #1
    49c2:	611a      	str	r2, [r3, #16]
}
    49c4:	4770      	bx	lr
	} else if (frequency < 1000000) {
    49c6:	4b11      	ldr	r3, [pc, #68]	; (4a0c <TwoWire::setClock(unsigned long)+0x88>)
    49c8:	4299      	cmp	r1, r3
    49ca:	d80c      	bhi.n	49e6 <TwoWire::setClock(unsigned long)+0x62>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    49cc:	6903      	ldr	r3, [r0, #16]
    49ce:	4a10      	ldr	r2, [pc, #64]	; (4a10 <TwoWire::setClock(unsigned long)+0x8c>)
    49d0:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    49d2:	6903      	ldr	r3, [r0, #16]
    49d4:	2200      	movs	r2, #0
    49d6:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    49d8:	6903      	ldr	r3, [r0, #16]
    49da:	4a0e      	ldr	r2, [pc, #56]	; (4a14 <TwoWire::setClock(unsigned long)+0x90>)
    49dc:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    49de:	6903      	ldr	r3, [r0, #16]
    49e0:	4a0d      	ldr	r2, [pc, #52]	; (4a18 <TwoWire::setClock(unsigned long)+0x94>)
    49e2:	62da      	str	r2, [r3, #44]	; 0x2c
    49e4:	e7e1      	b.n	49aa <TwoWire::setClock(unsigned long)+0x26>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    49e6:	6903      	ldr	r3, [r0, #16]
    49e8:	4a0c      	ldr	r2, [pc, #48]	; (4a1c <TwoWire::setClock(unsigned long)+0x98>)
    49ea:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    49ec:	6903      	ldr	r3, [r0, #16]
    49ee:	2200      	movs	r2, #0
    49f0:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    49f2:	6903      	ldr	r3, [r0, #16]
    49f4:	4a0a      	ldr	r2, [pc, #40]	; (4a20 <TwoWire::setClock(unsigned long)+0x9c>)
    49f6:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    49f8:	6903      	ldr	r3, [r0, #16]
    49fa:	4a07      	ldr	r2, [pc, #28]	; (4a18 <TwoWire::setClock(unsigned long)+0x94>)
    49fc:	62da      	str	r2, [r3, #44]	; 0x2c
    49fe:	e7d4      	b.n	49aa <TwoWire::setClock(unsigned long)+0x26>
    4a00:	00061a7f 	.word	0x00061a7f
    4a04:	1928373b 	.word	0x1928373b
    4a08:	05050bb8 	.word	0x05050bb8
    4a0c:	000f423f 	.word	0x000f423f
    4a10:	0c121a1c 	.word	0x0c121a1c
    4a14:	02020e10 	.word	0x02020e10
    4a18:	00057f00 	.word	0x00057f00
    4a1c:	0407090a 	.word	0x0407090a
    4a20:	01010960 	.word	0x01010960

00004a24 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    4a24:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    4a26:	4c09      	ldr	r4, [pc, #36]	; (4a4c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    4a28:	4622      	mov	r2, r4
    4a2a:	4909      	ldr	r1, [pc, #36]	; (4a50 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    4a2c:	4809      	ldr	r0, [pc, #36]	; (4a54 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    4a2e:	f7ff fd21 	bl	4474 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    4a32:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4a36:	4908      	ldr	r1, [pc, #32]	; (4a58 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    4a38:	4808      	ldr	r0, [pc, #32]	; (4a5c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    4a3a:	f7ff fd1b 	bl	4474 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    4a3e:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    4a42:	4907      	ldr	r1, [pc, #28]	; (4a60 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    4a44:	4807      	ldr	r0, [pc, #28]	; (4a64 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    4a46:	f7ff fd15 	bl	4474 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    4a4a:	bd10      	pop	{r4, pc}
    4a4c:	60001fa8 	.word	0x60001fa8
    4a50:	403f0000 	.word	0x403f0000
    4a54:	20004784 	.word	0x20004784
    4a58:	403f8000 	.word	0x403f8000
    4a5c:	200048c4 	.word	0x200048c4
    4a60:	403fc000 	.word	0x403fc000
    4a64:	20004a04 	.word	0x20004a04

00004a68 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4a68:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    4a6a:	4b2e      	ldr	r3, [pc, #184]	; (4b24 <_spi_dma_rxISR0()+0xbc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    4a6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4a6e:	7908      	ldrb	r0, [r1, #4]
    4a70:	4a2d      	ldr	r2, [pc, #180]	; (4b28 <_spi_dma_rxISR0()+0xc0>)
    4a72:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4a74:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4a76:	7900      	ldrb	r0, [r0, #4]
    4a78:	7710      	strb	r0, [r2, #28]
    4a7a:	7909      	ldrb	r1, [r1, #4]
    4a7c:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    4a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a80:	2b00      	cmp	r3, #0
    4a82:	d03a      	beq.n	4afa <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4a88:	d30b      	bcc.n	4aa2 <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    4a8a:	4a28      	ldr	r2, [pc, #160]	; (4b2c <_spi_dma_rxISR0()+0xc4>)
    4a8c:	441a      	add	r2, r3
    4a8e:	4b25      	ldr	r3, [pc, #148]	; (4b24 <_spi_dma_rxISR0()+0xbc>)
    4a90:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4a94:	7911      	ldrb	r1, [r2, #4]
    4a96:	4a24      	ldr	r2, [pc, #144]	; (4b28 <_spi_dma_rxISR0()+0xc0>)
    4a98:	76d1      	strb	r1, [r2, #27]
    4a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a9c:	791b      	ldrb	r3, [r3, #4]
    4a9e:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4aa0:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4aa2:	4a20      	ldr	r2, [pc, #128]	; (4b24 <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4aa4:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4aa6:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4aa8:	8bd1      	ldrh	r1, [r2, #30]
    4aaa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4aae:	d114      	bne.n	4ada <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    4ab0:	b29b      	uxth	r3, r3
    4ab2:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4ab4:	8bd3      	ldrh	r3, [r2, #30]
    4ab6:	b29b      	uxth	r3, r3
    4ab8:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4aba:	4b1a      	ldr	r3, [pc, #104]	; (4b24 <_spi_dma_rxISR0()+0xbc>)
    4abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4ac0:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4ac2:	8bd9      	ldrh	r1, [r3, #30]
    4ac4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4ac8:	d10f      	bne.n	4aea <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    4aca:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4ace:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4ad0:	8bda      	ldrh	r2, [r3, #30]
    4ad2:	b292      	uxth	r2, r2
    4ad4:	82da      	strh	r2, [r3, #22]
    4ad6:	2200      	movs	r2, #0
    4ad8:	e7d9      	b.n	4a8e <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4ada:	8bd1      	ldrh	r1, [r2, #30]
    4adc:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4ae4:	430b      	orrs	r3, r1
    4ae6:	83d3      	strh	r3, [r2, #30]
    4ae8:	e7e4      	b.n	4ab4 <_spi_dma_rxISR0()+0x4c>
    4aea:	8bd9      	ldrh	r1, [r3, #30]
    4aec:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4af4:	430a      	orrs	r2, r1
    4af6:	83da      	strh	r2, [r3, #30]
    4af8:	e7ea      	b.n	4ad0 <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4afa:	4a0a      	ldr	r2, [pc, #40]	; (4b24 <_spi_dma_rxISR0()+0xbc>)
    4afc:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4afe:	210f      	movs	r1, #15
    4b00:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4b02:	2100      	movs	r1, #0
    4b04:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4b06:	f240 3001 	movw	r0, #769	; 0x301
    4b0a:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4b0c:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4b10:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4b12:	2303      	movs	r3, #3
    4b14:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4b18:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4b1a:	6803      	ldr	r3, [r0, #0]
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	460a      	mov	r2, r1
    4b20:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4b22:	e7bd      	b.n	4aa0 <_spi_dma_rxISR0()+0x38>
    4b24:	20004634 	.word	0x20004634
    4b28:	400e8000 	.word	0x400e8000
    4b2c:	ffff8001 	.word	0xffff8001

00004b30 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4b30:	b508      	push	{r3, lr}
	_dmaRX->clearInterrupt();
    4b32:	4b2e      	ldr	r3, [pc, #184]	; (4bec <_spi_dma_rxISR1()+0xbc>)
		DMA_CINT = channel;
    4b34:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4b36:	7908      	ldrb	r0, [r1, #4]
    4b38:	4a2d      	ldr	r2, [pc, #180]	; (4bf0 <_spi_dma_rxISR1()+0xc0>)
    4b3a:	77d0      	strb	r0, [r2, #31]
		DMA_CDNE = channel;
    4b3c:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4b3e:	7900      	ldrb	r0, [r0, #4]
    4b40:	7710      	strb	r0, [r2, #28]
    4b42:	7909      	ldrb	r1, [r1, #4]
    4b44:	7711      	strb	r1, [r2, #28]
	if (_dma_count_remaining) {
    4b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b48:	2b00      	cmp	r3, #0
    4b4a:	d03a      	beq.n	4bc2 <_spi_dma_rxISR1()+0x92>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4b50:	d30b      	bcc.n	4b6a <_spi_dma_rxISR1()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    4b52:	4a28      	ldr	r2, [pc, #160]	; (4bf4 <_spi_dma_rxISR1()+0xc4>)
    4b54:	441a      	add	r2, r3
    4b56:	4b25      	ldr	r3, [pc, #148]	; (4bec <_spi_dma_rxISR1()+0xbc>)
    4b58:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4b5c:	7911      	ldrb	r1, [r2, #4]
    4b5e:	4a24      	ldr	r2, [pc, #144]	; (4bf0 <_spi_dma_rxISR1()+0xc0>)
    4b60:	76d1      	strb	r1, [r2, #27]
    4b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b64:	791b      	ldrb	r3, [r3, #4]
    4b66:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4b68:	bd08      	pop	{r3, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4b6a:	4a20      	ldr	r2, [pc, #128]	; (4bec <_spi_dma_rxISR1()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4b6c:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4b6e:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4b70:	8bd1      	ldrh	r1, [r2, #30]
    4b72:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4b76:	d114      	bne.n	4ba2 <_spi_dma_rxISR1()+0x72>
		tcd->BITER = len & 0x7fff;
    4b78:	b29b      	uxth	r3, r3
    4b7a:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4b7c:	8bd3      	ldrh	r3, [r2, #30]
    4b7e:	b29b      	uxth	r3, r3
    4b80:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4b82:	4b1a      	ldr	r3, [pc, #104]	; (4bec <_spi_dma_rxISR1()+0xbc>)
    4b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4b88:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4b8a:	8bd9      	ldrh	r1, [r3, #30]
    4b8c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4b90:	d10f      	bne.n	4bb2 <_spi_dma_rxISR1()+0x82>
		tcd->BITER = len & 0x7fff;
    4b92:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4b96:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4b98:	8bda      	ldrh	r2, [r3, #30]
    4b9a:	b292      	uxth	r2, r2
    4b9c:	82da      	strh	r2, [r3, #22]
    4b9e:	2200      	movs	r2, #0
    4ba0:	e7d9      	b.n	4b56 <_spi_dma_rxISR1()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4ba2:	8bd1      	ldrh	r1, [r2, #30]
    4ba4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4bac:	430b      	orrs	r3, r1
    4bae:	83d3      	strh	r3, [r2, #30]
    4bb0:	e7e4      	b.n	4b7c <_spi_dma_rxISR1()+0x4c>
    4bb2:	8bd9      	ldrh	r1, [r3, #30]
    4bb4:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4bbc:	430a      	orrs	r2, r1
    4bbe:	83da      	strh	r2, [r3, #30]
    4bc0:	e7ea      	b.n	4b98 <_spi_dma_rxISR1()+0x68>
    4bc2:	4a0a      	ldr	r2, [pc, #40]	; (4bec <_spi_dma_rxISR1()+0xbc>)
    4bc4:	6813      	ldr	r3, [r2, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4bc6:	210f      	movs	r1, #15
    4bc8:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4bca:	2100      	movs	r1, #0
    4bcc:	61d9      	str	r1, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4bce:	f240 3001 	movw	r0, #769	; 0x301
    4bd2:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4bd4:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4bd8:	6158      	str	r0, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4bda:	2303      	movs	r3, #3
    4bdc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4be0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4be2:	6803      	ldr	r3, [r0, #0]
    4be4:	681b      	ldr	r3, [r3, #0]
    4be6:	460a      	mov	r2, r1
    4be8:	4798      	blx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4bea:	e7bd      	b.n	4b68 <_spi_dma_rxISR1()+0x38>
    4bec:	20004684 	.word	0x20004684
    4bf0:	400e8000 	.word	0x400e8000
    4bf4:	ffff8001 	.word	0xffff8001

00004bf8 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    4bf8:	6001      	str	r1, [r0, #0]
    4bfa:	6042      	str	r2, [r0, #4]
    4bfc:	2300      	movs	r3, #0
    4bfe:	6083      	str	r3, [r0, #8]
    4c00:	60c3      	str	r3, [r0, #12]
    4c02:	7403      	strb	r3, [r0, #16]
    4c04:	7443      	strb	r3, [r0, #17]
    4c06:	7483      	strb	r3, [r0, #18]
    4c08:	74c3      	strb	r3, [r0, #19]
    4c0a:	6143      	str	r3, [r0, #20]
    4c0c:	6183      	str	r3, [r0, #24]
    4c0e:	61c3      	str	r3, [r0, #28]
    4c10:	6203      	str	r3, [r0, #32]
    4c12:	6243      	str	r3, [r0, #36]	; 0x24
    4c14:	6283      	str	r3, [r0, #40]	; 0x28
    4c16:	62c3      	str	r3, [r0, #44]	; 0x2c
    4c18:	6303      	str	r3, [r0, #48]	; 0x30
    4c1a:	6343      	str	r3, [r0, #52]	; 0x34
    4c1c:	6383      	str	r3, [r0, #56]	; 0x38
    4c1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    4c22:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    4c26:	6403      	str	r3, [r0, #64]	; 0x40
    4c28:	6443      	str	r3, [r0, #68]	; 0x44
    4c2a:	6483      	str	r3, [r0, #72]	; 0x48
    4c2c:	64c3      	str	r3, [r0, #76]	; 0x4c
	}
    4c2e:	4770      	bx	lr

00004c30 <SPIClass::begin()>:
{
    4c30:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4c32:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4c34:	680a      	ldr	r2, [r1, #0]
    4c36:	6813      	ldr	r3, [r2, #0]
    4c38:	6849      	ldr	r1, [r1, #4]
    4c3a:	ea23 0301 	bic.w	r3, r3, r1
    4c3e:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4c40:	498f      	ldr	r1, [pc, #572]	; (4e80 <SPIClass::begin()+0x250>)
    4c42:	698b      	ldr	r3, [r1, #24]
    4c44:	4a8f      	ldr	r2, [pc, #572]	; (4e84 <SPIClass::begin()+0x254>)
    4c46:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4c48:	4b8f      	ldr	r3, [pc, #572]	; (4e88 <SPIClass::begin()+0x258>)
    4c4a:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4c4c:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4c4e:	4b8f      	ldr	r3, [pc, #572]	; (4e8c <SPIClass::begin()+0x25c>)
    4c50:	6842      	ldr	r2, [r0, #4]
    4c52:	7c01      	ldrb	r1, [r0, #16]
    4c54:	440a      	add	r2, r1
    4c56:	7c12      	ldrb	r2, [r2, #16]
    4c58:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4c5c:	6891      	ldr	r1, [r2, #8]
    4c5e:	22b8      	movs	r2, #184	; 0xb8
    4c60:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4c62:	6841      	ldr	r1, [r0, #4]
    4c64:	7c44      	ldrb	r4, [r0, #17]
    4c66:	4421      	add	r1, r4
    4c68:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4c6c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4c70:	6889      	ldr	r1, [r1, #8]
    4c72:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    4c74:	6841      	ldr	r1, [r0, #4]
    4c76:	7c84      	ldrb	r4, [r0, #18]
    4c78:	4421      	add	r1, r4
    4c7a:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    4c7e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4c82:	6889      	ldr	r1, [r1, #8]
    4c84:	600a      	str	r2, [r1, #0]
    4c86:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    4c88:	6821      	ldr	r1, [r4, #0]
    4c8a:	680a      	ldr	r2, [r1, #0]
    4c8c:	6864      	ldr	r4, [r4, #4]
    4c8e:	4322      	orrs	r2, r4
    4c90:	600a      	str	r2, [r1, #0]
    4c92:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4c94:	7c04      	ldrb	r4, [r0, #16]
    4c96:	1911      	adds	r1, r2, r4
    4c98:	7c09      	ldrb	r1, [r1, #16]
    4c9a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4c9e:	6849      	ldr	r1, [r1, #4]
    4ca0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4ca4:	6952      	ldr	r2, [r2, #20]
    4ca6:	600a      	str	r2, [r1, #0]
    4ca8:	6844      	ldr	r4, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    4caa:	7c42      	ldrb	r2, [r0, #17]
    4cac:	18a1      	adds	r1, r4, r2
    4cae:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4cb2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4cb6:	6849      	ldr	r1, [r1, #4]
    4cb8:	320a      	adds	r2, #10
    4cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    4cbe:	600a      	str	r2, [r1, #0]
    4cc0:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4cc2:	7c81      	ldrb	r1, [r0, #18]
    4cc4:	1854      	adds	r4, r2, r1
    4cc6:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    4cca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4cce:	685b      	ldr	r3, [r3, #4]
    4cd0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    4cd6:	601a      	str	r2, [r3, #0]
    4cd8:	6843      	ldr	r3, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    4cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4cdc:	7c81      	ldrb	r1, [r0, #18]
    4cde:	440b      	add	r3, r1
    4ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4ce4:	6013      	str	r3, [r2, #0]
    4ce6:	6843      	ldr	r3, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    4ce8:	6a1a      	ldr	r2, [r3, #32]
    4cea:	7c01      	ldrb	r1, [r0, #16]
    4cec:	440b      	add	r3, r1
    4cee:	7f1b      	ldrb	r3, [r3, #28]
    4cf0:	6013      	str	r3, [r2, #0]
    4cf2:	6843      	ldr	r3, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4cf6:	7c41      	ldrb	r1, [r0, #17]
    4cf8:	440b      	add	r3, r1
    4cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    4cfe:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4d00:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    4d02:	2202      	movs	r2, #2
    4d04:	611a      	str	r2, [r3, #16]
    4d06:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    4d08:	220f      	movs	r2, #15
    4d0a:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    4d0c:	7cc3      	ldrb	r3, [r0, #19]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d042      	beq.n	4d98 <SPIClass::begin()+0x168>
			__disable_irq();
    4d12:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4d14:	7cc3      	ldrb	r3, [r0, #19]
    4d16:	f013 0f01 	tst.w	r3, #1
    4d1a:	d008      	beq.n	4d2e <SPIClass::begin()+0xfe>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4d1c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d20:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    4d24:	6941      	ldr	r1, [r0, #20]
    4d26:	400b      	ands	r3, r1
    4d28:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    4d2a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    4d2e:	7cc3      	ldrb	r3, [r0, #19]
    4d30:	f013 0f02 	tst.w	r3, #2
    4d34:	d008      	beq.n	4d48 <SPIClass::begin()+0x118>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    4d36:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d3a:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    4d3e:	6981      	ldr	r1, [r0, #24]
    4d40:	400b      	ands	r3, r1
    4d42:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    4d44:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    4d48:	7cc3      	ldrb	r3, [r0, #19]
    4d4a:	f013 0f04 	tst.w	r3, #4
    4d4e:	d008      	beq.n	4d62 <SPIClass::begin()+0x132>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4d50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d54:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    4d58:	69c1      	ldr	r1, [r0, #28]
    4d5a:	400b      	ands	r3, r1
    4d5c:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    4d5e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    4d62:	7cc3      	ldrb	r3, [r0, #19]
    4d64:	f013 0f08 	tst.w	r3, #8
    4d68:	d008      	beq.n	4d7c <SPIClass::begin()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    4d6a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d6e:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    4d72:	6a01      	ldr	r1, [r0, #32]
    4d74:	400b      	ands	r3, r1
    4d76:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    4d78:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    4d7c:	7cc3      	ldrb	r3, [r0, #19]
    4d7e:	f013 0f10 	tst.w	r3, #16
    4d82:	d008      	beq.n	4d96 <SPIClass::begin()+0x166>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    4d84:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d88:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    4d8c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4d8e:	400b      	ands	r3, r1
    4d90:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4d92:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    4d96:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    4d98:	6882      	ldr	r2, [r0, #8]
    4d9a:	4b3d      	ldr	r3, [pc, #244]	; (4e90 <SPIClass::begin()+0x260>)
    4d9c:	429a      	cmp	r2, r3
    4d9e:	d029      	beq.n	4df4 <SPIClass::begin()+0x1c4>
		    _clock = settings.clock();
    4da0:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    4da2:	4b37      	ldr	r3, [pc, #220]	; (4e80 <SPIClass::begin()+0x250>)
    4da4:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    4da6:	f3c3 1101 	ubfx	r1, r3, #4, #2
    4daa:	f3c3 6382 	ubfx	r3, r3, #26, #3
    4dae:	3301      	adds	r3, #1
    4db0:	4a38      	ldr	r2, [pc, #224]	; (4e94 <SPIClass::begin()+0x264>)
    4db2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4db6:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    4dba:	4b37      	ldr	r3, [pc, #220]	; (4e98 <SPIClass::begin()+0x268>)
    4dbc:	429a      	cmp	r2, r3
    4dbe:	d95d      	bls.n	4e7c <SPIClass::begin()+0x24c>
			d = _clock ? clkhz/_clock : clkhz;
    4dc0:	4b36      	ldr	r3, [pc, #216]	; (4e9c <SPIClass::begin()+0x26c>)
    4dc2:	fba3 1302 	umull	r1, r3, r3, r2
    4dc6:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    4dc8:	fbb2 f2f3 	udiv	r2, r2, r3
    4dcc:	4930      	ldr	r1, [pc, #192]	; (4e90 <SPIClass::begin()+0x260>)
    4dce:	428a      	cmp	r2, r1
    4dd0:	bf88      	it	hi
    4dd2:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    4dd4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4dd8:	d34c      	bcc.n	4e74 <SPIClass::begin()+0x244>
    4dda:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    4dde:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4de0:	0859      	lsrs	r1, r3, #1
    4de2:	020a      	lsls	r2, r1, #8
    4de4:	b292      	uxth	r2, r2
    4de6:	0409      	lsls	r1, r1, #16
    4de8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4dec:	430a      	orrs	r2, r1
    4dee:	b2db      	uxtb	r3, r3
    4df0:	4313      	orrs	r3, r2
    4df2:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4df4:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    4df6:	2200      	movs	r2, #0
    4df8:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4dfa:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4dfc:	2203      	movs	r2, #3
    4dfe:	625a      	str	r2, [r3, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4e00:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    4e02:	68c2      	ldr	r2, [r0, #12]
    4e04:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4e06:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    4e08:	2207      	movs	r2, #7
    4e0a:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4e0c:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    4e0e:	2201      	movs	r2, #1
    4e10:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    4e12:	7cc3      	ldrb	r3, [r0, #19]
    4e14:	b35b      	cbz	r3, 4e6e <SPIClass::begin()+0x23e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4e16:	f013 0f01 	tst.w	r3, #1
    4e1a:	d004      	beq.n	4e26 <SPIClass::begin()+0x1f6>
    4e1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    4e1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    4e26:	7cc3      	ldrb	r3, [r0, #19]
    4e28:	f013 0f02 	tst.w	r3, #2
    4e2c:	d004      	beq.n	4e38 <SPIClass::begin()+0x208>
    4e2e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4e30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    4e38:	7cc3      	ldrb	r3, [r0, #19]
    4e3a:	f013 0f04 	tst.w	r3, #4
    4e3e:	d004      	beq.n	4e4a <SPIClass::begin()+0x21a>
    4e40:	6b02      	ldr	r2, [r0, #48]	; 0x30
    4e42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    4e4a:	7cc3      	ldrb	r3, [r0, #19]
    4e4c:	f013 0f08 	tst.w	r3, #8
    4e50:	d004      	beq.n	4e5c <SPIClass::begin()+0x22c>
    4e52:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4e54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e58:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    4e5c:	7cc3      	ldrb	r3, [r0, #19]
    4e5e:	f013 0f10 	tst.w	r3, #16
    4e62:	d004      	beq.n	4e6e <SPIClass::begin()+0x23e>
    4e64:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4e66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    4e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e72:	4770      	bx	lr
			if (d > 2) {
    4e74:	2b02      	cmp	r3, #2
    4e76:	d8b2      	bhi.n	4dde <SPIClass::begin()+0x1ae>
				div =0;
    4e78:	2300      	movs	r3, #0
    4e7a:	e7b1      	b.n	4de0 <SPIClass::begin()+0x1b0>
    4e7c:	2300      	movs	r3, #0
    4e7e:	e7af      	b.n	4de0 <SPIClass::begin()+0x1b0>
    4e80:	400fc000 	.word	0x400fc000
    4e84:	e3ffffcf 	.word	0xe3ffffcf
    4e88:	08000010 	.word	0x08000010
    4e8c:	2000293c 	.word	0x2000293c
    4e90:	003d0900 	.word	0x003d0900
    4e94:	20002684 	.word	0x20002684
    4e98:	003d08ff 	.word	0x003d08ff
    4e9c:	431bde83 	.word	0x431bde83

00004ea0 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	d03b      	beq.n	4f1c <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    4ea4:	b470      	push	{r4, r5, r6}
    4ea6:	460e      	mov	r6, r1
    4ea8:	4611      	mov	r1, r2
    4eaa:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4eac:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4eae:	f240 2201 	movw	r2, #513	; 0x201
    4eb2:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    4eb4:	462c      	mov	r4, r5
    4eb6:	e016      	b.n	4ee6 <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4eb8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    4ebc:	e019      	b.n	4ef2 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    4ebe:	3c01      	subs	r4, #1
    4ec0:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4ec2:	695b      	ldr	r3, [r3, #20]
    4ec4:	f013 0f01 	tst.w	r3, #1
    4ec8:	d10c      	bne.n	4ee4 <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    4eca:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4ecc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4ece:	f012 0f02 	tst.w	r2, #2
    4ed2:	d1f5      	bne.n	4ec0 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4ed6:	2900      	cmp	r1, #0
    4ed8:	d0f1      	beq.n	4ebe <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    4eda:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4edc:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    4ee0:	4611      	mov	r1, r2
    4ee2:	e7ec      	b.n	4ebe <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    4ee4:	b155      	cbz	r5, 4efc <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4ee6:	2e00      	cmp	r6, #0
    4ee8:	d0e6      	beq.n	4eb8 <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    4eea:	4633      	mov	r3, r6
    4eec:	f813 2b01 	ldrb.w	r2, [r3], #1
    4ef0:	461e      	mov	r6, r3
    4ef2:	6803      	ldr	r3, [r0, #0]
    4ef4:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    4ef6:	3d01      	subs	r5, #1
    4ef8:	e7e7      	b.n	4eca <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    4efa:	3c01      	subs	r4, #1
	while (count_read) {
    4efc:	b164      	cbz	r4, 4f18 <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    4efe:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4f02:	f012 0f02 	tst.w	r2, #2
    4f06:	d1f9      	bne.n	4efc <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4f0a:	2900      	cmp	r1, #0
    4f0c:	d0f5      	beq.n	4efa <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    4f0e:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f10:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    4f14:	4611      	mov	r1, r2
    4f16:	e7f0      	b.n	4efa <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    4f18:	bc70      	pop	{r4, r5, r6}
    4f1a:	4770      	bx	lr
    4f1c:	4770      	bx	lr

00004f1e <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4f1e:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4f20:	681a      	ldr	r2, [r3, #0]
    4f22:	6812      	ldr	r2, [r2, #0]
    4f24:	685b      	ldr	r3, [r3, #4]
    4f26:	421a      	tst	r2, r3
    4f28:	d100      	bne.n	4f2c <SPIClass::end()+0xe>
    4f2a:	4770      	bx	lr
void SPIClass::end() {
    4f2c:	b510      	push	{r4, lr}
    4f2e:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4f30:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    4f32:	2200      	movs	r2, #0
    4f34:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4f36:	6843      	ldr	r3, [r0, #4]
    4f38:	7c02      	ldrb	r2, [r0, #16]
    4f3a:	4413      	add	r3, r2
    4f3c:	2105      	movs	r1, #5
    4f3e:	7c18      	ldrb	r0, [r3, #16]
    4f40:	f008 f9a6 	bl	d290 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4f44:	6863      	ldr	r3, [r4, #4]
    4f46:	7c62      	ldrb	r2, [r4, #17]
    4f48:	4413      	add	r3, r2
    4f4a:	2105      	movs	r1, #5
    4f4c:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    4f50:	f008 f99e 	bl	d290 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4f54:	6863      	ldr	r3, [r4, #4]
    4f56:	7ca2      	ldrb	r2, [r4, #18]
    4f58:	4413      	add	r3, r2
    4f5a:	2105      	movs	r1, #5
    4f5c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    4f60:	f008 f996 	bl	d290 <pinMode>
}
    4f64:	bd10      	pop	{r4, pc}
	...

00004f68 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    4f68:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    4f6a:	4a08      	ldr	r2, [pc, #32]	; (4f8c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    4f6c:	4908      	ldr	r1, [pc, #32]	; (4f90 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    4f6e:	4809      	ldr	r0, [pc, #36]	; (4f94 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    4f70:	f7ff fe42 	bl	4bf8 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    4f74:	4a08      	ldr	r2, [pc, #32]	; (4f98 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    4f76:	4909      	ldr	r1, [pc, #36]	; (4f9c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    4f78:	4809      	ldr	r0, [pc, #36]	; (4fa0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    4f7a:	f7ff fe3d 	bl	4bf8 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    4f7e:	4a09      	ldr	r2, [pc, #36]	; (4fa4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    4f80:	4909      	ldr	r1, [pc, #36]	; (4fa8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    4f82:	480a      	ldr	r0, [pc, #40]	; (4fac <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    4f84:	f7ff fe38 	bl	4bf8 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    4f88:	bd08      	pop	{r3, pc}
    4f8a:	bf00      	nop
    4f8c:	200023a0 	.word	0x200023a0
    4f90:	403a0000 	.word	0x403a0000
    4f94:	20004634 	.word	0x20004634
    4f98:	20002330 	.word	0x20002330
    4f9c:	4039c000 	.word	0x4039c000
    4fa0:	20004684 	.word	0x20004684
    4fa4:	200022c0 	.word	0x200022c0
    4fa8:	40394000 	.word	0x40394000
    4fac:	200046d4 	.word	0x200046d4

00004fb0 <PWMServo::PWMServo()>:
PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
    4fb0:	22ff      	movs	r2, #255	; 0xff
    4fb2:	7002      	strb	r2, [r0, #0]
    4fb4:	7042      	strb	r2, [r0, #1]
    4fb6:	4770      	bx	lr

00004fb8 <PWMServo::attach(int, int, int)>:
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4fb8:	2936      	cmp	r1, #54	; 0x36
    4fba:	d840      	bhi.n	503e <PWMServo::attach(int, int, int)+0x86>
{
    4fbc:	b570      	push	{r4, r5, r6, lr}
    4fbe:	4604      	mov	r4, r0
    4fc0:	4616      	mov	r6, r2
    4fc2:	461d      	mov	r5, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
    4fc4:	290f      	cmp	r1, #15
    4fc6:	dd0b      	ble.n	4fe0 <PWMServo::attach(int, int, int)+0x28>
    4fc8:	2912      	cmp	r1, #18
    4fca:	d009      	beq.n	4fe0 <PWMServo::attach(int, int, int)+0x28>
    4fcc:	f1a1 0213 	sub.w	r2, r1, #19
    4fd0:	2a0a      	cmp	r2, #10
    4fd2:	d829      	bhi.n	5028 <PWMServo::attach(int, int, int)+0x70>
    4fd4:	f240 6379 	movw	r3, #1657	; 0x679
    4fd8:	40d3      	lsrs	r3, r2
    4fda:	f013 0f01 	tst.w	r3, #1
    4fde:	d021      	beq.n	5024 <PWMServo::attach(int, int, int)+0x6c>
	pin = pinArg;
    4fe0:	b2c8      	uxtb	r0, r1
    4fe2:	7020      	strb	r0, [r4, #0]
	analogWriteFrequency(pin, 50);
    4fe4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 5048 <PWMServo::attach(int, int, int)+0x90>
    4fe8:	f008 fdcc 	bl	db84 <analogWriteFrequency>
	min16 = min >> 4;
    4fec:	1132      	asrs	r2, r6, #4
    4fee:	70a2      	strb	r2, [r4, #2]
	max16 = max >> 4;
    4ff0:	112b      	asrs	r3, r5, #4
    4ff2:	70e3      	strb	r3, [r4, #3]
	angle = NO_ANGLE;
    4ff4:	23ff      	movs	r3, #255	; 0xff
    4ff6:	7063      	strb	r3, [r4, #1]
	digitalWrite(pin, LOW);
    4ff8:	2100      	movs	r1, #0
    4ffa:	7820      	ldrb	r0, [r4, #0]
    4ffc:	f008 f910 	bl	d220 <digitalWrite>
	pinMode(pin, OUTPUT);
    5000:	2101      	movs	r1, #1
    5002:	7820      	ldrb	r0, [r4, #0]
    5004:	f008 f944 	bl	d290 <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
    5008:	7823      	ldrb	r3, [r4, #0]
    500a:	0959      	lsrs	r1, r3, #5
    500c:	4a0f      	ldr	r2, [pc, #60]	; (504c <PWMServo::attach(int, int, int)+0x94>)
    500e:	f003 031f 	and.w	r3, r3, #31
    5012:	2001      	movs	r0, #1
    5014:	fa00 f303 	lsl.w	r3, r0, r3
    5018:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    501c:	4323      	orrs	r3, r4
    501e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    5022:	bd70      	pop	{r4, r5, r6, pc}
	if (!digitalPinHasPWM(pinArg)) return 0;
    5024:	2000      	movs	r0, #0
    5026:	e7fc      	b.n	5022 <PWMServo::attach(int, int, int)+0x6a>
    5028:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
    502c:	2a15      	cmp	r2, #21
    502e:	d808      	bhi.n	5042 <PWMServo::attach(int, int, int)+0x8a>
    5030:	4b07      	ldr	r3, [pc, #28]	; (5050 <PWMServo::attach(int, int, int)+0x98>)
    5032:	40d3      	lsrs	r3, r2
    5034:	f013 0f01 	tst.w	r3, #1
    5038:	d1d2      	bne.n	4fe0 <PWMServo::attach(int, int, int)+0x28>
    503a:	2000      	movs	r0, #0
    503c:	e7f1      	b.n	5022 <PWMServo::attach(int, int, int)+0x6a>
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    503e:	2000      	movs	r0, #0
}
    5040:	4770      	bx	lr
	if (!digitalPinHasPWM(pinArg)) return 0;
    5042:	2000      	movs	r0, #0
    5044:	e7ed      	b.n	5022 <PWMServo::attach(int, int, int)+0x6a>
    5046:	bf00      	nop
    5048:	42480000 	.word	0x42480000
    504c:	20004c9c 	.word	0x20004c9c
    5050:	00247e19 	.word	0x00247e19

00005054 <PWMServo::write(int)>:
	if (pin >= NUM_DIGITAL_PINS) return;
    5054:	7803      	ldrb	r3, [r0, #0]
    5056:	2b36      	cmp	r3, #54	; 0x36
    5058:	d900      	bls.n	505c <PWMServo::write(int)+0x8>
    505a:	4770      	bx	lr
{
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	4604      	mov	r4, r0
	if (angleArg < 0) angleArg = 0;
    5060:	29b4      	cmp	r1, #180	; 0xb4
    5062:	bfa8      	it	ge
    5064:	21b4      	movge	r1, #180	; 0xb4
    5066:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	angle = angleArg;
    506a:	7041      	strb	r1, [r0, #1]
	uint32_t us = (((max16 - min16) * 46603 * angle) >> 11) + (min16 << 12); // us*256
    506c:	7883      	ldrb	r3, [r0, #2]
    506e:	78c2      	ldrb	r2, [r0, #3]
    5070:	1ad2      	subs	r2, r2, r3
    5072:	fb01 f202 	mul.w	r2, r1, r2
    5076:	f24b 610b 	movw	r1, #46603	; 0xb60b
    507a:	fb01 f202 	mul.w	r2, r1, r2
    507e:	031d      	lsls	r5, r3, #12
    5080:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	uint32_t duty = (us * 3355) >> 22;
    5084:	f640 531b 	movw	r3, #3355	; 0xd1b
    5088:	fb03 f505 	mul.w	r5, r3, r5
    508c:	0dad      	lsrs	r5, r5, #22
	noInterrupts();
    508e:	b672      	cpsid	i
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    5090:	200c      	movs	r0, #12
    5092:	f008 fe4f 	bl	dd34 <analogWriteRes>
    5096:	4606      	mov	r6, r0
	analogWrite(pin, duty);
    5098:	4629      	mov	r1, r5
    509a:	7820      	ldrb	r0, [r4, #0]
    509c:	f008 fd1a 	bl	dad4 <analogWrite>
    50a0:	4630      	mov	r0, r6
    50a2:	f008 fe47 	bl	dd34 <analogWriteRes>
	interrupts();
    50a6:	b662      	cpsie	i
}
    50a8:	bd70      	pop	{r4, r5, r6, pc}

000050aa <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    50aa:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    50ae:	b1e3      	cbz	r3, 50ea <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    50b0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    50b4:	b163      	cbz	r3, 50d0 <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    50b6:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    50b8:	3801      	subs	r0, #1
    50ba:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    50bc:	7999      	ldrb	r1, [r3, #6]
    50be:	f44f 7300 	mov.w	r3, #512	; 0x200
    50c2:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    50c4:	b29b      	uxth	r3, r3
    50c6:	fba3 0100 	umull	r0, r1, r3, r0
    50ca:	fb03 1102 	mla	r1, r3, r2, r1
    50ce:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    50d0:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    50d4:	b12b      	cbz	r3, 50e2 <SDClass::totalSize()+0x38>
    50d6:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    50da:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    50dc:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    50e0:	e7f1      	b.n	50c6 <SDClass::totalSize()+0x1c>
    50e2:	2000      	movs	r0, #0
    50e4:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    50e6:	4603      	mov	r3, r0
    50e8:	e7ed      	b.n	50c6 <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    50ea:	2000      	movs	r0, #0
    50ec:	4601      	mov	r1, r0
	}
    50ee:	4770      	bx	lr

000050f0 <SDClass::~SDClass()>:
class SDClass : public FS
    50f0:	4770      	bx	lr
	...

000050f4 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    50f4:	b530      	push	{r4, r5, lr}
    50f6:	b083      	sub	sp, #12
    50f8:	4605      	mov	r5, r0
    50fa:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    50fc:	f008 fe28 	bl	dd50 <rtc_get>
	if (now < 315532800) { // before 1980
    5100:	4b1c      	ldr	r3, [pc, #112]	; (5174 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    5102:	4298      	cmp	r0, r3
    5104:	d804      	bhi.n	5110 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    5106:	2300      	movs	r3, #0
    5108:	802b      	strh	r3, [r5, #0]
		*time = 0;
    510a:	8023      	strh	r3, [r4, #0]
}
    510c:	b003      	add	sp, #12
    510e:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    5110:	4669      	mov	r1, sp
    5112:	f007 fcbb 	bl	ca8c <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    5116:	f89d 3005 	ldrb.w	r3, [sp, #5]
    511a:	3301      	adds	r3, #1
    511c:	b2db      	uxtb	r3, r3
    511e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5122:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    5126:	3a50      	subs	r2, #80	; 0x50
    5128:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    512a:	291f      	cmp	r1, #31
    512c:	bf98      	it	ls
    512e:	2b0c      	cmpls	r3, #12
    5130:	d801      	bhi.n	5136 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    5132:	2a7f      	cmp	r2, #127	; 0x7f
    5134:	d910      	bls.n	5158 <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    5136:	2100      	movs	r1, #0
    5138:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    513a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    513e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    5142:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    5146:	2a17      	cmp	r2, #23
    5148:	bf98      	it	ls
    514a:	2b3b      	cmpls	r3, #59	; 0x3b
    514c:	d801      	bhi.n	5152 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    514e:	293b      	cmp	r1, #59	; 0x3b
    5150:	d908      	bls.n	5164 <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    5152:	2300      	movs	r3, #0
    5154:	8023      	strh	r3, [r4, #0]
}
    5156:	e7d9      	b.n	510c <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    5158:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    515c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    5160:	b289      	uxth	r1, r1
    5162:	e7e9      	b.n	5138 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    5164:	015b      	lsls	r3, r3, #5
    5166:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    516a:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    516e:	b29b      	uxth	r3, r3
    5170:	e7f0      	b.n	5154 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    5172:	bf00      	nop
    5174:	12cea5ff 	.word	0x12cea5ff

00005178 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    5178:	b500      	push	{lr}
    517a:	b08f      	sub	sp, #60	; 0x3c
    517c:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    517e:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    5182:	b161      	cbz	r1, 519e <SDClass::exists(char const*)+0x26>
    5184:	2300      	movs	r3, #0
    5186:	f88d 3000 	strb.w	r3, [sp]
    518a:	f88d 3001 	strb.w	r3, [sp, #1]
    518e:	f88d 3002 	strb.w	r3, [sp, #2]
    5192:	4668      	mov	r0, sp
    5194:	f002 ff37 	bl	8006 <FatFile::open(FatVolume*, char const*, int)>
	}
    5198:	b00f      	add	sp, #60	; 0x3c
    519a:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    519e:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    51a2:	b151      	cbz	r1, 51ba <SDClass::exists(char const*)+0x42>
    51a4:	2300      	movs	r3, #0
    51a6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    51aa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    51ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    51b2:	4668      	mov	r0, sp
    51b4:	f000 ff83 	bl	60be <ExFatFile::open(ExFatVolume*, char const*, int)>
    51b8:	e7ee      	b.n	5198 <SDClass::exists(char const*)+0x20>
    51ba:	2000      	movs	r0, #0
    51bc:	e7ec      	b.n	5198 <SDClass::exists(char const*)+0x20>

000051be <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    51be:	b500      	push	{lr}
    51c0:	b08f      	sub	sp, #60	; 0x3c
    51c2:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    51c4:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    51c8:	b189      	cbz	r1, 51ee <SDClass::rmdir(char const*)+0x30>
    51ca:	2300      	movs	r3, #0
    51cc:	f88d 3000 	strb.w	r3, [sp]
    51d0:	f88d 3001 	strb.w	r3, [sp, #1]
    51d4:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    51d8:	4668      	mov	r0, sp
    51da:	f002 ff14 	bl	8006 <FatFile::open(FatVolume*, char const*, int)>
    51de:	b910      	cbnz	r0, 51e6 <SDClass::rmdir(char const*)+0x28>
	}
    51e0:	b00f      	add	sp, #60	; 0x3c
    51e2:	f85d fb04 	ldr.w	pc, [sp], #4
    51e6:	4668      	mov	r0, sp
    51e8:	f002 fd52 	bl	7c90 <FatFile::rmdir()>
    51ec:	e7f8      	b.n	51e0 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    51ee:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    51f2:	b179      	cbz	r1, 5214 <SDClass::rmdir(char const*)+0x56>
    51f4:	2300      	movs	r3, #0
    51f6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    51fa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    51fe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5202:	4668      	mov	r0, sp
    5204:	f000 ff5b 	bl	60be <ExFatFile::open(ExFatVolume*, char const*, int)>
    5208:	2800      	cmp	r0, #0
    520a:	d0e9      	beq.n	51e0 <SDClass::rmdir(char const*)+0x22>
    520c:	4668      	mov	r0, sp
    520e:	f001 f83d 	bl	628c <ExFatFile::rmdir()>
    5212:	e7e5      	b.n	51e0 <SDClass::rmdir(char const*)+0x22>
    5214:	2000      	movs	r0, #0
    5216:	e7e3      	b.n	51e0 <SDClass::rmdir(char const*)+0x22>

00005218 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    5218:	b500      	push	{lr}
    521a:	b08f      	sub	sp, #60	; 0x3c
    521c:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    521e:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    5222:	b191      	cbz	r1, 524a <SDClass::remove(char const*)+0x32>
    5224:	2300      	movs	r3, #0
    5226:	f88d 3000 	strb.w	r3, [sp]
    522a:	f88d 3001 	strb.w	r3, [sp, #1]
    522e:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5232:	2301      	movs	r3, #1
    5234:	4668      	mov	r0, sp
    5236:	f002 fee6 	bl	8006 <FatFile::open(FatVolume*, char const*, int)>
    523a:	b910      	cbnz	r0, 5242 <SDClass::remove(char const*)+0x2a>
	}
    523c:	b00f      	add	sp, #60	; 0x3c
    523e:	f85d fb04 	ldr.w	pc, [sp], #4
    5242:	4668      	mov	r0, sp
    5244:	f003 fec4 	bl	8fd0 <FatFile::remove()>
    5248:	e7f8      	b.n	523c <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    524a:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    524e:	b181      	cbz	r1, 5272 <SDClass::remove(char const*)+0x5a>
    5250:	2300      	movs	r3, #0
    5252:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    5256:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    525a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    525e:	2301      	movs	r3, #1
    5260:	4668      	mov	r0, sp
    5262:	f000 ff2c 	bl	60be <ExFatFile::open(ExFatVolume*, char const*, int)>
    5266:	2800      	cmp	r0, #0
    5268:	d0e8      	beq.n	523c <SDClass::remove(char const*)+0x24>
    526a:	4668      	mov	r0, sp
    526c:	f000 ffb6 	bl	61dc <ExFatFile::remove()>
    5270:	e7e4      	b.n	523c <SDClass::remove(char const*)+0x24>
    5272:	2000      	movs	r0, #0
    5274:	e7e2      	b.n	523c <SDClass::remove(char const*)+0x24>

00005276 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    5276:	b530      	push	{r4, r5, lr}
    5278:	b08f      	sub	sp, #60	; 0x3c
    527a:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    527c:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    5280:	b1b4      	cbz	r4, 52b0 <SDClass::rename(char const*, char const*)+0x3a>
    5282:	2300      	movs	r3, #0
    5284:	f88d 3000 	strb.w	r3, [sp]
    5288:	f88d 3001 	strb.w	r3, [sp, #1]
    528c:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    5290:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5294:	460a      	mov	r2, r1
    5296:	4621      	mov	r1, r4
    5298:	4668      	mov	r0, sp
    529a:	f002 fe4f 	bl	7f3c <FatFile::open(FatFile*, char const*, int)>
    529e:	b908      	cbnz	r0, 52a4 <SDClass::rename(char const*, char const*)+0x2e>
	}
    52a0:	b00f      	add	sp, #60	; 0x3c
    52a2:	bd30      	pop	{r4, r5, pc}
    52a4:	462a      	mov	r2, r5
    52a6:	4621      	mov	r1, r4
    52a8:	4668      	mov	r0, sp
    52aa:	f003 f80c 	bl	82c6 <FatFile::rename(FatFile*, char const*)>
    52ae:	e7f7      	b.n	52a0 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    52b0:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    52b4:	b1ac      	cbz	r4, 52e2 <SDClass::rename(char const*, char const*)+0x6c>
    52b6:	2300      	movs	r3, #0
    52b8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    52bc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    52c0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    52c4:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    52c8:	460a      	mov	r2, r1
    52ca:	4621      	mov	r1, r4
    52cc:	4668      	mov	r0, sp
    52ce:	f000 fe83 	bl	5fd8 <ExFatFile::open(ExFatFile*, char const*, int)>
    52d2:	2800      	cmp	r0, #0
    52d4:	d0e4      	beq.n	52a0 <SDClass::rename(char const*, char const*)+0x2a>
    52d6:	462a      	mov	r2, r5
    52d8:	4621      	mov	r1, r4
    52da:	4668      	mov	r0, sp
    52dc:	f001 f9bb 	bl	6656 <ExFatFile::rename(ExFatFile*, char const*)>
    52e0:	e7de      	b.n	52a0 <SDClass::rename(char const*, char const*)+0x2a>
    52e2:	2000      	movs	r0, #0
    52e4:	e7dc      	b.n	52a0 <SDClass::rename(char const*, char const*)+0x2a>

000052e6 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    52e6:	b500      	push	{lr}
    52e8:	b08f      	sub	sp, #60	; 0x3c
    52ea:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    52ec:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    52f0:	b179      	cbz	r1, 5312 <SDClass::mkdir(char const*)+0x2c>
    52f2:	2300      	movs	r3, #0
    52f4:	f88d 3000 	strb.w	r3, [sp]
    52f8:	f88d 3001 	strb.w	r3, [sp, #1]
    52fc:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    5300:	2301      	movs	r3, #1
    5302:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5306:	4668      	mov	r0, sp
    5308:	f002 ff74 	bl	81f4 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    530c:	b00f      	add	sp, #60	; 0x3c
    530e:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5312:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    5316:	b169      	cbz	r1, 5334 <SDClass::mkdir(char const*)+0x4e>
    5318:	2300      	movs	r3, #0
    531a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    531e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    5322:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    5326:	2301      	movs	r3, #1
    5328:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    532c:	4668      	mov	r0, sp
    532e:	f001 f91c 	bl	656a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5332:	e7eb      	b.n	530c <SDClass::mkdir(char const*)+0x26>
    5334:	2000      	movs	r0, #0
    5336:	e7e9      	b.n	530c <SDClass::mkdir(char const*)+0x26>

00005338 <SDClass::open(char const*, unsigned char)>:
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    5338:	b570      	push	{r4, r5, r6, lr}
    533a:	b094      	sub	sp, #80	; 0x50
    533c:	4605      	mov	r5, r0
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    533e:	2b01      	cmp	r3, #1
    5340:	d036      	beq.n	53b0 <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    5342:	2b02      	cmp	r3, #2
    5344:	f240 2302 	movw	r3, #514	; 0x202
    5348:	bf18      	it	ne
    534a:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    534c:	3104      	adds	r1, #4
    534e:	4668      	mov	r0, sp
    5350:	f004 fe98 	bl	a084 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5354:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5356:	2b00      	cmp	r3, #0
    5358:	d02d      	beq.n	53b6 <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    535a:	205c      	movs	r0, #92	; 0x5c
    535c:	f008 f878 	bl	d450 <operator new(unsigned int)>
    5360:	4604      	mov	r4, r0
class FileImpl {
    5362:	2600      	movs	r6, #0
    5364:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    5366:	4b1a      	ldr	r3, [pc, #104]	; (53d0 <SDClass::open(char const*, unsigned char)+0x98>)
    5368:	6003      	str	r3, [r0, #0]
class Print
    536a:	9b01      	ldr	r3, [sp, #4]
    536c:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    536e:	4b19      	ldr	r3, [pc, #100]	; (53d4 <SDClass::open(char const*, unsigned char)+0x9c>)
    5370:	6083      	str	r3, [r0, #8]
    5372:	9b02      	ldr	r3, [sp, #8]
    5374:	6103      	str	r3, [r0, #16]
    5376:	f89d 300c 	ldrb.w	r3, [sp, #12]
    537a:	7503      	strb	r3, [r0, #20]
    537c:	a904      	add	r1, sp, #16
    537e:	3018      	adds	r0, #24
    5380:	f004 fd49 	bl	9e16 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5384:	4b14      	ldr	r3, [pc, #80]	; (53d8 <SDClass::open(char const*, unsigned char)+0xa0>)
    5386:	60a3      	str	r3, [r4, #8]
    5388:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    538a:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    538c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5390:	60ab      	str	r3, [r5, #8]
    5392:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    5394:	4b11      	ldr	r3, [pc, #68]	; (53dc <SDClass::open(char const*, unsigned char)+0xa4>)
    5396:	602b      	str	r3, [r5, #0]
		f = file;
    5398:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    539a:	6863      	ldr	r3, [r4, #4]
    539c:	3301      	adds	r3, #1
    539e:	6063      	str	r3, [r4, #4]
    53a0:	4b0f      	ldr	r3, [pc, #60]	; (53e0 <SDClass::open(char const*, unsigned char)+0xa8>)
    53a2:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    53a4:	a804      	add	r0, sp, #16
    53a6:	f004 fd77 	bl	9e98 <FsBaseFile::close()>
	}
    53aa:	4628      	mov	r0, r5
    53ac:	b014      	add	sp, #80	; 0x50
    53ae:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    53b0:	f244 2302 	movw	r3, #16898	; 0x4202
    53b4:	e7ca      	b.n	534c <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    53b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    53b8:	2b00      	cmp	r3, #0
    53ba:	d1ce      	bne.n	535a <SDClass::open(char const*, unsigned char)+0x22>
    53bc:	606b      	str	r3, [r5, #4]
    53be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    53c2:	60aa      	str	r2, [r5, #8]
    53c4:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    53c6:	4a05      	ldr	r2, [pc, #20]	; (53dc <SDClass::open(char const*, unsigned char)+0xa4>)
    53c8:	602a      	str	r2, [r5, #0]
    53ca:	612b      	str	r3, [r5, #16]
    53cc:	e7e8      	b.n	53a0 <SDClass::open(char const*, unsigned char)+0x68>
    53ce:	bf00      	nop
    53d0:	20002548 	.word	0x20002548
    53d4:	200025a4 	.word	0x200025a4
    53d8:	20002524 	.word	0x20002524
    53dc:	200024f8 	.word	0x200024f8
    53e0:	20002418 	.word	0x20002418

000053e4 <SDClass::usedSize()>:
	uint64_t usedSize() {
    53e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    53e6:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    53ea:	2b00      	cmp	r3, #0
    53ec:	d04d      	beq.n	548a <SDClass::usedSize()+0xa6>
    53ee:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    53f0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    53f4:	b1f3      	cbz	r3, 5434 <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    53f6:	69de      	ldr	r6, [r3, #28]
    53f8:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    53fa:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    53fe:	2800      	cmp	r0, #0
    5400:	d05a      	beq.n	54b8 <SDClass::usedSize()+0xd4>
    5402:	6803      	ldr	r3, [r0, #0]
    5404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5406:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5408:	4607      	mov	r7, r0
    540a:	b140      	cbz	r0, 541e <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    540c:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5410:	2800      	cmp	r0, #0
    5412:	d032      	beq.n	547a <SDClass::usedSize()+0x96>
    5414:	6803      	ldr	r3, [r0, #0]
    5416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5418:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    541a:	b1b8      	cbz	r0, 544c <SDClass::usedSize()+0x68>
    541c:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    541e:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    5422:	2800      	cmp	r0, #0
    5424:	d14b      	bne.n	54be <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5426:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    542a:	b388      	cbz	r0, 5490 <SDClass::usedSize()+0xac>
    542c:	f002 f96b 	bl	7706 <ExFatPartition::freeClusterCount()>
    5430:	4605      	mov	r5, r0
    5432:	e047      	b.n	54c4 <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    5434:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    5438:	2b00      	cmp	r3, #0
    543a:	d055      	beq.n	54e8 <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    543c:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5440:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5444:	2800      	cmp	r0, #0
    5446:	d1dc      	bne.n	5402 <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5448:	2700      	movs	r7, #0
    544a:	e7ec      	b.n	5426 <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    544c:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5450:	b1a8      	cbz	r0, 547e <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    5452:	6803      	ldr	r3, [r0, #0]
    5454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5456:	2101      	movs	r1, #1
    5458:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    545a:	4607      	mov	r7, r0
    545c:	2800      	cmp	r0, #0
    545e:	d1de      	bne.n	541e <SDClass::usedSize()+0x3a>
      return 0;
    5460:	2500      	movs	r5, #0
    5462:	e031      	b.n	54c8 <SDClass::usedSize()+0xe4>
    if (m_card) {
    5464:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5468:	b158      	cbz	r0, 5482 <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    546a:	6803      	ldr	r3, [r0, #0]
    546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    546e:	2100      	movs	r1, #0
    5470:	4798      	blx	r3
      return 0;
    5472:	2800      	cmp	r0, #0
    5474:	bf08      	it	eq
    5476:	2500      	moveq	r5, #0
    5478:	e026      	b.n	54c8 <SDClass::usedSize()+0xe4>
      return 0;
    547a:	2500      	movs	r5, #0
    547c:	e024      	b.n	54c8 <SDClass::usedSize()+0xe4>
    547e:	2500      	movs	r5, #0
    5480:	e022      	b.n	54c8 <SDClass::usedSize()+0xe4>
      return 0;
    5482:	2500      	movs	r5, #0
    5484:	e020      	b.n	54c8 <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5486:	2300      	movs	r3, #0
    5488:	e029      	b.n	54de <SDClass::usedSize()+0xfa>
    548a:	2000      	movs	r0, #0
    548c:	4601      	mov	r1, r0
    548e:	e02a      	b.n	54e6 <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    5490:	b967      	cbnz	r7, 54ac <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    5492:	2300      	movs	r3, #0
    5494:	4630      	mov	r0, r6
    5496:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    5498:	e021      	b.n	54de <SDClass::usedSize()+0xfa>
    549a:	4630      	mov	r0, r6
    549c:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    549e:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    54a2:	2b00      	cmp	r3, #0
    54a4:	d0ef      	beq.n	5486 <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    54a6:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    54aa:	e018      	b.n	54de <SDClass::usedSize()+0xfa>
    if (m_card) {
    54ac:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    54b0:	2800      	cmp	r0, #0
    54b2:	d0f2      	beq.n	549a <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    54b4:	2500      	movs	r5, #0
    54b6:	e7d8      	b.n	546a <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    54b8:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    54bc:	2700      	movs	r7, #0
    54be:	f004 fb9b 	bl	9bf8 <FatPartition::freeClusterCount()>
    54c2:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    54c4:	2f00      	cmp	r7, #0
    54c6:	d1cd      	bne.n	5464 <SDClass::usedSize()+0x80>
    54c8:	1b70      	subs	r0, r6, r5
    54ca:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    54cc:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    54d0:	2b00      	cmp	r3, #0
    54d2:	d0e4      	beq.n	549e <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    54d4:	7999      	ldrb	r1, [r3, #6]
    54d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    54da:	408b      	lsls	r3, r1
    54dc:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    54de:	fba3 0100 	umull	r0, r1, r3, r0
    54e2:	fb03 1102 	mla	r1, r3, r2, r1
	}
    54e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    54e8:	2600      	movs	r6, #0
    54ea:	e7a9      	b.n	5440 <SDClass::usedSize()+0x5c>

000054ec <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    54ec:	b530      	push	{r4, r5, lr}
    54ee:	b085      	sub	sp, #20
    54f0:	4604      	mov	r4, r0
    54f2:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    54f4:	4832      	ldr	r0, [pc, #200]	; (55c0 <SDClass::begin(unsigned char)+0xd4>)
    54f6:	f006 fc49 	bl	bd8c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    54fa:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    54fe:	2dfe      	cmp	r5, #254	; 0xfe
    5500:	d004      	beq.n	550c <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    5502:	2d36      	cmp	r5, #54	; 0x36
    5504:	d930      	bls.n	5568 <SDClass::begin(unsigned char)+0x7c>
	return false;
    5506:	2000      	movs	r0, #0
}
    5508:	b005      	add	sp, #20
    550a:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    550c:	23ff      	movs	r3, #255	; 0xff
    550e:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    5512:	2100      	movs	r1, #0
    5514:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    5518:	f204 4594 	addw	r5, r4, #1172	; 0x494
    551c:	4628      	mov	r0, r5
    551e:	f005 ff9d 	bl	b45c <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    5522:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    5526:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    552c:	4628      	mov	r0, r5
    552e:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5530:	b158      	cbz	r0, 554a <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    5532:	2300      	movs	r3, #0
    5534:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    5538:	232e      	movs	r3, #46	; 0x2e
    553a:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    553e:	2103      	movs	r1, #3
    5540:	202e      	movs	r0, #46	; 0x2e
    5542:	f007 fea5 	bl	d290 <pinMode>
		return ret;
    5546:	2000      	movs	r0, #0
    5548:	e7de      	b.n	5508 <SDClass::begin(unsigned char)+0x1c>
    554a:	2301      	movs	r3, #1
    554c:	461a      	mov	r2, r3
    554e:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    5552:	1d20      	adds	r0, r4, #4
    5554:	f004 fd20 	bl	9f98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    5558:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    555c:	232e      	movs	r3, #46	; 0x2e
    555e:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5562:	2800      	cmp	r0, #0
    5564:	d1d0      	bne.n	5508 <SDClass::begin(unsigned char)+0x1c>
    5566:	e7ea      	b.n	553e <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    5568:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    556c:	2300      	movs	r3, #0
    556e:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    5572:	4a14      	ldr	r2, [pc, #80]	; (55c4 <SDClass::begin(unsigned char)+0xd8>)
    5574:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    5578:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    557c:	f88d 5004 	strb.w	r5, [sp, #4]
    5580:	f88d 3005 	strb.w	r3, [sp, #5]
    5584:	9202      	str	r2, [sp, #8]
    5586:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    5588:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    558c:	ab04      	add	r3, sp, #16
    558e:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    5592:	4628      	mov	r0, r5
    5594:	f005 f9d4 	bl	a940 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    5598:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    559c:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    55a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    55a2:	4628      	mov	r0, r5
    55a4:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    55a6:	b118      	cbz	r0, 55b0 <SDClass::begin(unsigned char)+0xc4>
    55a8:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    55aa:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    55ae:	e7ab      	b.n	5508 <SDClass::begin(unsigned char)+0x1c>
    55b0:	2301      	movs	r3, #1
    55b2:	461a      	mov	r2, r3
    55b4:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    55b8:	1d20      	adds	r0, r4, #4
    55ba:	f004 fced 	bl	9f98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    55be:	e7f4      	b.n	55aa <SDClass::begin(unsigned char)+0xbe>
    55c0:	000050f5 	.word	0x000050f5
    55c4:	017d7840 	.word	0x017d7840

000055c8 <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    55c8:	b530      	push	{r4, r5, lr}
    55ca:	b085      	sub	sp, #20
    55cc:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    55ce:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    55d2:	2bff      	cmp	r3, #255	; 0xff
    55d4:	d01e      	beq.n	5614 <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    55d6:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    55da:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    55de:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    55e2:	f88d 3004 	strb.w	r3, [sp, #4]
    55e6:	f88d 0005 	strb.w	r0, [sp, #5]
    55ea:	9102      	str	r1, [sp, #8]
    55ec:	9203      	str	r2, [sp, #12]
    55ee:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    55f2:	ab04      	add	r3, sp, #16
    55f4:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    55f8:	4628      	mov	r0, r5
    55fa:	f005 f9a1 	bl	a940 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    55fe:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    5602:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    5606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5608:	4628      	mov	r0, r5
    560a:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    560c:	b1d8      	cbz	r0, 5646 <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    560e:	2000      	movs	r0, #0
  }
    5610:	b005      	add	sp, #20
    5612:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    5614:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    5618:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    561c:	4628      	mov	r0, r5
    561e:	f005 ff1d 	bl	b45c <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    5622:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    5626:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    562c:	4628      	mov	r0, r5
    562e:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5630:	b108      	cbz	r0, 5636 <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    5632:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    5634:	e7ec      	b.n	5610 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5636:	2301      	movs	r3, #1
    5638:	461a      	mov	r2, r3
    563a:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    563e:	4620      	mov	r0, r4
    5640:	f004 fcaa 	bl	9f98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5644:	e7e4      	b.n	5610 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    5646:	2301      	movs	r3, #1
    5648:	461a      	mov	r2, r3
    564a:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    564e:	4620      	mov	r0, r4
    5650:	f004 fca2 	bl	9f98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5654:	e7dc      	b.n	5610 <SdBase<FsVolume, FsFormatter>::restart()+0x48>

00005656 <SDClass::format(int, char, Print&)>:
{
    5656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    565a:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    565c:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    5660:	b39c      	cbz	r4, 56ca <SDClass::format(int, char, Print&)+0x74>
    5662:	4605      	mov	r5, r0
    5664:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    5666:	6823      	ldr	r3, [r4, #0]
    5668:	69db      	ldr	r3, [r3, #28]
    566a:	4620      	mov	r0, r4
    566c:	4798      	blx	r3
    566e:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    5670:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    5674:	d804      	bhi.n	5680 <SDClass::format(int, char, Print&)+0x2a>
    5676:	2600      	movs	r6, #0
}
    5678:	4630      	mov	r0, r6
    567a:	b00c      	add	sp, #48	; 0x30
    567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    5680:	f44f 7000 	mov.w	r0, #512	; 0x200
    5684:	f00b fb86 	bl	10d94 <malloc>
	if (!buf) return false; // unable to allocate memory
    5688:	4680      	mov	r8, r0
    568a:	b300      	cbz	r0, 56ce <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    568c:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    5690:	d913      	bls.n	56ba <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    5692:	463b      	mov	r3, r7
    5694:	4602      	mov	r2, r0
    5696:	4621      	mov	r1, r4
    5698:	a801      	add	r0, sp, #4
    569a:	f001 fb23 	bl	6ce4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    569e:	4606      	mov	r6, r0
	free(buf);
    56a0:	4640      	mov	r0, r8
    56a2:	f00b fb7f 	bl	10da4 <free>
	if (ret) {
    56a6:	2e00      	cmp	r6, #0
    56a8:	d0e6      	beq.n	5678 <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    56aa:	6823      	ldr	r3, [r4, #0]
    56ac:	6a1b      	ldr	r3, [r3, #32]
    56ae:	4620      	mov	r0, r4
    56b0:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    56b2:	1d28      	adds	r0, r5, #4
    56b4:	f7ff ff88 	bl	55c8 <SdBase<FsVolume, FsFormatter>::restart()>
    56b8:	e7de      	b.n	5678 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    56ba:	463b      	mov	r3, r7
    56bc:	4602      	mov	r2, r0
    56be:	4621      	mov	r1, r4
    56c0:	a801      	add	r0, sp, #4
    56c2:	f003 ff7f 	bl	95c4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    56c6:	4606      	mov	r6, r0
    56c8:	e7ea      	b.n	56a0 <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    56ca:	2600      	movs	r6, #0
    56cc:	e7d4      	b.n	5678 <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    56ce:	2600      	movs	r6, #0
    56d0:	e7d2      	b.n	5678 <SDClass::format(int, char, Print&)+0x22>
	...

000056d4 <SDClass::mediaPresent()>:
{
    56d4:	b570      	push	{r4, r5, r6, lr}
    56d6:	b084      	sub	sp, #16
    56d8:	4604      	mov	r4, r0
    56da:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    56de:	2e00      	cmp	r6, #0
    56e0:	d042      	beq.n	5768 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    56e2:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    56e6:	b345      	cbz	r5, 573a <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    56e8:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    56ec:	2bfe      	cmp	r3, #254	; 0xfe
    56ee:	d00a      	beq.n	5706 <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    56f0:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    56f4:	2836      	cmp	r0, #54	; 0x36
    56f6:	d914      	bls.n	5722 <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    56f8:	6833      	ldr	r3, [r6, #0]
    56fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    56fc:	4669      	mov	r1, sp
    56fe:	4630      	mov	r0, r6
    5700:	4798      	blx	r3
    5702:	4605      	mov	r5, r0
    5704:	e031      	b.n	576a <SDClass::mediaPresent()+0x96>
				s = card->status();
    5706:	6833      	ldr	r3, [r6, #0]
    5708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    570a:	4630      	mov	r0, r6
    570c:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    570e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5712:	d0ed      	beq.n	56f0 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    5714:	bb48      	cbnz	r0, 576a <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    5716:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    571a:	2bfe      	cmp	r3, #254	; 0xfe
    571c:	d007      	beq.n	572e <SDClass::mediaPresent()+0x5a>
				ret = false;
    571e:	2500      	movs	r5, #0
    5720:	e023      	b.n	576a <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5722:	f007 fda3 	bl	d26c <digitalRead>
    5726:	1e05      	subs	r5, r0, #0
    5728:	bf18      	it	ne
    572a:	2501      	movne	r5, #1
    572c:	e01d      	b.n	576a <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    572e:	2103      	movs	r1, #3
    5730:	202e      	movs	r0, #46	; 0x2e
    5732:	f007 fdad 	bl	d290 <pinMode>
				ret = false;
    5736:	2500      	movs	r5, #0
    5738:	e017      	b.n	576a <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    573a:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    573e:	2bfe      	cmp	r3, #254	; 0xfe
    5740:	d008      	beq.n	5754 <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5742:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    5746:	2836      	cmp	r0, #54	; 0x36
    5748:	d90a      	bls.n	5760 <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    574a:	1d20      	adds	r0, r4, #4
    574c:	f7ff ff3c 	bl	55c8 <SdBase<FsVolume, FsFormatter>::restart()>
    5750:	4605      	mov	r5, r0
    5752:	e00a      	b.n	576a <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    5754:	4b07      	ldr	r3, [pc, #28]	; (5774 <SDClass::mediaPresent()+0xa0>)
    5756:	689b      	ldr	r3, [r3, #8]
			if (ret)
    5758:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    575c:	d1f5      	bne.n	574a <SDClass::mediaPresent()+0x76>
    575e:	e004      	b.n	576a <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5760:	f007 fd84 	bl	d26c <digitalRead>
			if (ret)
    5764:	b108      	cbz	r0, 576a <SDClass::mediaPresent()+0x96>
    5766:	e7f0      	b.n	574a <SDClass::mediaPresent()+0x76>
		ret = false;
    5768:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    576a:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    576e:	4628      	mov	r0, r5
    5770:	b004      	add	sp, #16
    5772:	bd70      	pop	{r4, r5, r6, pc}
    5774:	42008000 	.word	0x42008000

00005778 <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    5778:	b508      	push	{r3, lr}
	SDClass() { }
    577a:	4817      	ldr	r0, [pc, #92]	; (57d8 <_GLOBAL__sub_I_SD+0x60>)
    577c:	4b17      	ldr	r3, [pc, #92]	; (57dc <_GLOBAL__sub_I_SD+0x64>)
    577e:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    5780:	2300      	movs	r3, #0
    5782:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    5786:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    578a:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    578e:	4a14      	ldr	r2, [pc, #80]	; (57e0 <_GLOBAL__sub_I_SD+0x68>)
    5790:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    5794:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    5798:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    579c:	4a11      	ldr	r2, [pc, #68]	; (57e4 <_GLOBAL__sub_I_SD+0x6c>)
    579e:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    57a2:	2207      	movs	r2, #7
    57a4:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    57a8:	2229      	movs	r2, #41	; 0x29
    57aa:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    57ae:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    57b2:	4a0d      	ldr	r2, [pc, #52]	; (57e8 <_GLOBAL__sub_I_SD+0x70>)
    57b4:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    57b8:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    57bc:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    57c0:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    57c4:	23ff      	movs	r3, #255	; 0xff
    57c6:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    57ca:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    57ce:	4a07      	ldr	r2, [pc, #28]	; (57ec <_GLOBAL__sub_I_SD+0x74>)
    57d0:	4907      	ldr	r1, [pc, #28]	; (57f0 <_GLOBAL__sub_I_SD+0x78>)
    57d2:	f00b f9f7 	bl	10bc4 <__aeabi_atexit>
}
    57d6:	bd08      	pop	{r3, pc}
    57d8:	20004160 	.word	0x20004160
    57dc:	200025c8 	.word	0x200025c8
    57e0:	2000261c 	.word	0x2000261c
    57e4:	003d0900 	.word	0x003d0900
    57e8:	20002460 	.word	0x20002460
    57ec:	200033e8 	.word	0x200033e8
    57f0:	000050f1 	.word	0x000050f1

000057f4 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    57f4:	b530      	push	{r4, r5, lr}
    57f6:	b085      	sub	sp, #20
    57f8:	4604      	mov	r4, r0
    57fa:	468c      	mov	ip, r1
    57fc:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    57fe:	ab01      	add	r3, sp, #4
    5800:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5804:	c907      	ldmia	r1, {r0, r1, r2}
    5806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    580a:	ea4f 124c 	mov.w	r2, ip, lsl #5
    580e:	4619      	mov	r1, r3
    5810:	6a20      	ldr	r0, [r4, #32]
    5812:	f001 fef5 	bl	7600 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5816:	2801      	cmp	r0, #1
    5818:	d106      	bne.n	5828 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    581a:	462a      	mov	r2, r5
    581c:	a901      	add	r1, sp, #4
    581e:	6a20      	ldr	r0, [r4, #32]
    5820:	f001 fe99 	bl	7556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5824:	b005      	add	sp, #20
    5826:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    5828:	2000      	movs	r0, #0
    582a:	e7fb      	b.n	5824 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

0000582c <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    582c:	b510      	push	{r4, lr}
    582e:	4604      	mov	r4, r0
  bool rtn = sync();
    5830:	f000 fde8 	bl	6404 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5834:	2300      	movs	r3, #0
    5836:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    583a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    583e:	bd10      	pop	{r4, pc}

00005840 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5840:	b538      	push	{r3, r4, r5, lr}
    5842:	460d      	mov	r5, r1
    5844:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5846:	2200      	movs	r2, #0
    5848:	f100 0124 	add.w	r1, r0, #36	; 0x24
    584c:	6a00      	ldr	r0, [r0, #32]
    584e:	f001 fe82 	bl	7556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5852:	b128      	cbz	r0, 5860 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5854:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5856:	802a      	strh	r2, [r5, #0]
    5858:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    585a:	8023      	strh	r3, [r4, #0]
  return true;
    585c:	2001      	movs	r0, #1

 fail:
  return false;
}
    585e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5860:	2000      	movs	r0, #0
    5862:	e7fc      	b.n	585e <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

00005864 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5864:	b538      	push	{r3, r4, r5, lr}
    5866:	460d      	mov	r5, r1
    5868:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    586a:	2200      	movs	r2, #0
    586c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5870:	6a00      	ldr	r0, [r0, #32]
    5872:	f001 fe70 	bl	7556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5876:	b128      	cbz	r0, 5884 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    5878:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    587a:	802a      	strh	r2, [r5, #0]
    587c:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    587e:	8023      	strh	r3, [r4, #0]
  return true;
    5880:	2001      	movs	r0, #1

 fail:
  return false;
}
    5882:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5884:	2000      	movs	r0, #0
    5886:	e7fc      	b.n	5882 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

00005888 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5888:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    588a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    588e:	b10b      	cbz	r3, 5894 <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5890:	2000      	movs	r0, #0
}
    5892:	bd38      	pop	{r3, r4, r5, pc}
    5894:	4604      	mov	r4, r0
    5896:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    5898:	2238      	movs	r2, #56	; 0x38
    589a:	2100      	movs	r1, #0
    589c:	f00b fe06 	bl	114ac <memset>
  m_attributes = FILE_ATTR_ROOT;
    58a0:	2340      	movs	r3, #64	; 0x40
    58a2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    58a6:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    58a8:	2001      	movs	r0, #1
    58aa:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    58ae:	e7f0      	b.n	5892 <ExFatFile::openRoot(ExFatVolume*)+0xa>

000058b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    58b0:	b570      	push	{r4, r5, r6, lr}
    58b2:	460d      	mov	r5, r1
    58b4:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    58b6:	782a      	ldrb	r2, [r5, #0]
    58b8:	2a20      	cmp	r2, #32
    58ba:	d103      	bne.n	58c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    58bc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    58c0:	2c20      	cmp	r4, #32
    58c2:	d0fb      	beq.n	58bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    58c4:	600d      	str	r5, [r1, #0]
  fname->end = path;
    58c6:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    58c8:	782c      	ldrb	r4, [r5, #0]
    58ca:	b384      	cbz	r4, 592e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    58cc:	2c2f      	cmp	r4, #47	; 0x2f
    58ce:	d02e      	beq.n	592e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    58d0:	f105 0e01 	add.w	lr, r5, #1
    58d4:	4e1f      	ldr	r6, [pc, #124]	; (5954 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    58d6:	e017      	b.n	5908 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    58d8:	2c1f      	cmp	r4, #31
    58da:	d823      	bhi.n	5924 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    58dc:	2000      	movs	r0, #0
    58de:	e00b      	b.n	58f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    58e0:	2c5c      	cmp	r4, #92	; 0x5c
    58e2:	d035      	beq.n	5950 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    58e4:	d903      	bls.n	58ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    58e6:	2c7c      	cmp	r4, #124	; 0x7c
    58e8:	d107      	bne.n	58fa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    58ea:	2000      	movs	r0, #0
    58ec:	e004      	b.n	58f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    58ee:	3c3e      	subs	r4, #62	; 0x3e
    58f0:	b2e4      	uxtb	r4, r4
    58f2:	2c01      	cmp	r4, #1
    58f4:	d801      	bhi.n	58fa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    58f6:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    58f8:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    58fa:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    58fc:	782c      	ldrb	r4, [r5, #0]
    58fe:	f10e 0e01 	add.w	lr, lr, #1
    5902:	b1a4      	cbz	r4, 592e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    5904:	2c2f      	cmp	r4, #47	; 0x2f
    5906:	d012      	beq.n	592e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    5908:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    590a:	2c3c      	cmp	r4, #60	; 0x3c
    590c:	d8e8      	bhi.n	58e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    590e:	2c21      	cmp	r4, #33	; 0x21
    5910:	d9e2      	bls.n	58d8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    5912:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    5916:	fa5f fc8c 	uxtb.w	ip, ip
    591a:	fa26 fc0c 	lsr.w	ip, r6, ip
    591e:	f01c 0f01 	tst.w	ip, #1
    5922:	d113      	bne.n	594c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    5924:	2c2e      	cmp	r4, #46	; 0x2e
    5926:	d0e9      	beq.n	58fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5928:	2c20      	cmp	r4, #32
    592a:	d0e7      	beq.n	58fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    592c:	e7e5      	b.n	58fa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    592e:	782a      	ldrb	r2, [r5, #0]
    5930:	2a2f      	cmp	r2, #47	; 0x2f
    5932:	d001      	beq.n	5938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    5934:	2a20      	cmp	r2, #32
    5936:	d105      	bne.n	5944 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    5938:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    593c:	2c20      	cmp	r4, #32
    593e:	d0fb      	beq.n	5938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    5940:	2c2f      	cmp	r4, #47	; 0x2f
    5942:	d0f9      	beq.n	5938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    5944:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    5946:	f001 fd13 	bl	7370 <ExFatFile::hashName(ExName_t*)>
    594a:	e7d5      	b.n	58f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    594c:	2000      	movs	r0, #0
    594e:	e7d3      	b.n	58f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5950:	2000      	movs	r0, #0
    5952:	e7d1      	b.n	58f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5954:	05002101 	.word	0x05002101

00005958 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    595c:	b083      	sub	sp, #12
    595e:	4604      	mov	r4, r0
    5960:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5962:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5966:	f013 0f01 	tst.w	r3, #1
    596a:	f000 80b3 	beq.w	5ad4 <ExFatFile::read(void*, unsigned int)+0x17c>
    596e:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5970:	f013 0f40 	tst.w	r3, #64	; 0x40
    5974:	d104      	bne.n	5980 <ExFatFile::read(void*, unsigned int)+0x28>
    5976:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    597a:	f013 0f08 	tst.w	r3, #8
    597e:	d00d      	beq.n	599c <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    5980:	6822      	ldr	r2, [r4, #0]
    5982:	6863      	ldr	r3, [r4, #4]
    5984:	6921      	ldr	r1, [r4, #16]
    5986:	6960      	ldr	r0, [r4, #20]
    5988:	9d00      	ldr	r5, [sp, #0]
    598a:	18ad      	adds	r5, r5, r2
    598c:	f143 0300 	adc.w	r3, r3, #0
    5990:	42a9      	cmp	r1, r5
    5992:	eb70 0303 	sbcs.w	r3, r0, r3
    5996:	d201      	bcs.n	599c <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    5998:	1a8b      	subs	r3, r1, r2
    599a:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    599c:	9b00      	ldr	r3, [sp, #0]
    599e:	2b00      	cmp	r3, #0
    59a0:	f000 80a3 	beq.w	5aea <ExFatFile::read(void*, unsigned int)+0x192>
    59a4:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    59a6:	f104 0318 	add.w	r3, r4, #24
    59aa:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    59ac:	f240 1bff 	movw	fp, #511	; 0x1ff
    59b0:	e036      	b.n	5a20 <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    59b2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    59b6:	f013 0f40 	tst.w	r3, #64	; 0x40
    59ba:	d003      	beq.n	59c4 <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    59bc:	69a3      	ldr	r3, [r4, #24]
    59be:	3301      	adds	r3, #1
    59c0:	61a3      	str	r3, [r4, #24]
    59c2:	e041      	b.n	5a48 <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    59c4:	9a01      	ldr	r2, [sp, #4]
    59c6:	69a1      	ldr	r1, [r4, #24]
    59c8:	f001 fde2 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    59cc:	2800      	cmp	r0, #0
    59ce:	f2c0 8081 	blt.w	5ad4 <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    59d2:	2800      	cmp	r0, #0
    59d4:	d138      	bne.n	5a48 <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    59d6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    59da:	f013 0f50 	tst.w	r3, #80	; 0x50
    59de:	d079      	beq.n	5ad4 <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    59e0:	9b00      	ldr	r3, [sp, #0]
    59e2:	1bd8      	subs	r0, r3, r7
    59e4:	e07e      	b.n	5ae4 <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    59e6:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    59ea:	42be      	cmp	r6, r7
    59ec:	bf28      	it	cs
    59ee:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    59f0:	2200      	movs	r2, #0
    59f2:	4629      	mov	r1, r5
    59f4:	f508 7004 	add.w	r0, r8, #528	; 0x210
    59f8:	f006 f995 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    59fc:	4601      	mov	r1, r0
    59fe:	2800      	cmp	r0, #0
    5a00:	d068      	beq.n	5ad4 <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    5a02:	4632      	mov	r2, r6
    5a04:	4449      	add	r1, r9
    5a06:	4650      	mov	r0, sl
    5a08:	f007 fc88 	bl	d31c <memcpy>
    dst += n;
    5a0c:	44b2      	add	sl, r6
    m_curPosition += n;
    5a0e:	6823      	ldr	r3, [r4, #0]
    5a10:	6862      	ldr	r2, [r4, #4]
    5a12:	199b      	adds	r3, r3, r6
    5a14:	f142 0200 	adc.w	r2, r2, #0
    5a18:	6023      	str	r3, [r4, #0]
    5a1a:	6062      	str	r2, [r4, #4]
  while (toRead) {
    5a1c:	1bbf      	subs	r7, r7, r6
    5a1e:	d0df      	beq.n	59e0 <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5a20:	6823      	ldr	r3, [r4, #0]
    5a22:	6862      	ldr	r2, [r4, #4]
    5a24:	6a20      	ldr	r0, [r4, #32]
    5a26:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    5a2a:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5a2c:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    5a30:	b956      	cbnz	r6, 5a48 <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    5a32:	4313      	orrs	r3, r2
    5a34:	d1bd      	bne.n	59b2 <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5a36:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5a3a:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5a3e:	bf14      	ite	ne
    5a40:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    5a44:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    5a46:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5a48:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5a4c:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5a50:	0a72      	lsrs	r2, r6, #9
    5a52:	69a5      	ldr	r5, [r4, #24]
    5a54:	3d02      	subs	r5, #2
    5a56:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    5a58:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    5a5c:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    5a60:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5a62:	f1b9 0f00 	cmp.w	r9, #0
    5a66:	d1be      	bne.n	59e6 <ExFatFile::read(void*, unsigned int)+0x8e>
    5a68:	455f      	cmp	r7, fp
    5a6a:	d9bc      	bls.n	59e6 <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5a6c:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5a70:	428d      	cmp	r5, r1
    5a72:	d0b8      	beq.n	59e6 <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5a74:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    5a78:	d20a      	bcs.n	5a90 <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    5a7a:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5a7e:	6803      	ldr	r3, [r0, #0]
    5a80:	691b      	ldr	r3, [r3, #16]
    5a82:	4652      	mov	r2, sl
    5a84:	4629      	mov	r1, r5
    5a86:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5a88:	b320      	cbz	r0, 5ad4 <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    5a8a:	f44f 7600 	mov.w	r6, #512	; 0x200
    5a8e:	e7bd      	b.n	5a0c <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5a90:	f04f 0901 	mov.w	r9, #1
    5a94:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5a98:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5a9c:	0a7b      	lsrs	r3, r7, #9
    5a9e:	4599      	cmp	r9, r3
    5aa0:	bf28      	it	cs
    5aa2:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    5aa4:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    5aa8:	428d      	cmp	r5, r1
    5aaa:	d808      	bhi.n	5abe <ExFatFile::read(void*, unsigned int)+0x166>
    5aac:	eb05 0309 	add.w	r3, r5, r9
    5ab0:	4299      	cmp	r1, r3
    5ab2:	d204      	bcs.n	5abe <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    5ab4:	f508 7004 	add.w	r0, r8, #528	; 0x210
    5ab8:	f006 f90e 	bl	bcd8 <FsCache::sync()>
    5abc:	b150      	cbz	r0, 5ad4 <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    5abe:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5ac2:	6803      	ldr	r3, [r0, #0]
    5ac4:	f8d3 8014 	ldr.w	r8, [r3, #20]
    5ac8:	464b      	mov	r3, r9
    5aca:	4652      	mov	r2, sl
    5acc:	4629      	mov	r1, r5
    5ace:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5ad0:	2800      	cmp	r0, #0
    5ad2:	d19b      	bne.n	5a0c <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    5ad4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5ad8:	f043 0302 	orr.w	r3, r3, #2
    5adc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ae4:	b003      	add	sp, #12
    5ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    5aea:	461f      	mov	r7, r3
    5aec:	e778      	b.n	59e0 <ExFatFile::read(void*, unsigned int)+0x88>

00005aee <ExFatFile::peek()>:
int ExFatFile::peek() {
    5aee:	b5f0      	push	{r4, r5, r6, r7, lr}
    5af0:	b083      	sub	sp, #12
    5af2:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    5af4:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    5af8:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    5afa:	2201      	movs	r2, #1
    5afc:	f10d 0107 	add.w	r1, sp, #7
    5b00:	f7ff ff2a 	bl	5958 <ExFatFile::read(void*, unsigned int)>
    5b04:	2801      	cmp	r0, #1
    5b06:	bf0c      	ite	eq
    5b08:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    5b10:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    5b14:	61a5      	str	r5, [r4, #24]
}
    5b16:	b003      	add	sp, #12
    5b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b1a <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5b1a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b1e:	4604      	mov	r4, r0
    5b20:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5b22:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    5b26:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    5b2a:	2a00      	cmp	r2, #0
    5b2c:	d054      	beq.n	5bd8 <ExFatFile::seekSet(unsigned long long)+0xbe>
    5b2e:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5b30:	6801      	ldr	r1, [r0, #0]
    5b32:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5b36:	459c      	cmp	ip, r3
    5b38:	bf08      	it	eq
    5b3a:	42b1      	cmpeq	r1, r6
    5b3c:	d05d      	beq.n	5bfa <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    5b3e:	ea56 0307 	orrs.w	r3, r6, r7
    5b42:	d04e      	beq.n	5be2 <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5b44:	f012 0f08 	tst.w	r2, #8
    5b48:	d004      	beq.n	5b54 <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    5b4a:	6900      	ldr	r0, [r0, #16]
    5b4c:	6963      	ldr	r3, [r4, #20]
    5b4e:	42b0      	cmp	r0, r6
    5b50:	41bb      	sbcs	r3, r7
    5b52:	d341      	bcc.n	5bd8 <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5b54:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5b58:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    5b5c:	3309      	adds	r3, #9
    5b5e:	b2db      	uxtb	r3, r3
    5b60:	1e75      	subs	r5, r6, #1
    5b62:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    5b66:	f1c3 0920 	rsb	r9, r3, #32
    5b6a:	f1a3 0020 	sub.w	r0, r3, #32
    5b6e:	40dd      	lsrs	r5, r3
    5b70:	fa0a f909 	lsl.w	r9, sl, r9
    5b74:	ea45 0509 	orr.w	r5, r5, r9
    5b78:	fa2a f000 	lsr.w	r0, sl, r0
    5b7c:	4305      	orrs	r5, r0
  if (isContiguous()) {
    5b7e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5b82:	f010 0f40 	tst.w	r0, #64	; 0x40
    5b86:	d132      	bne.n	5bee <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5b88:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    5b8c:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    5b90:	f1c3 0920 	rsb	r9, r3, #32
    5b94:	f1a3 0020 	sub.w	r0, r3, #32
    5b98:	fa2b f303 	lsr.w	r3, fp, r3
    5b9c:	fa0a f909 	lsl.w	r9, sl, r9
    5ba0:	ea43 0309 	orr.w	r3, r3, r9
    5ba4:	fa2a f000 	lsr.w	r0, sl, r0
    5ba8:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    5baa:	ea51 0c0c 	orrs.w	ip, r1, ip
    5bae:	d001      	beq.n	5bb4 <ExFatFile::seekSet(unsigned long long)+0x9a>
    5bb0:	429d      	cmp	r5, r3
    5bb2:	d220      	bcs.n	5bf6 <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5bb4:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5bb8:	bf14      	ite	ne
    5bba:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    5bbe:	69e3      	ldreq	r3, [r4, #28]
    5bc0:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5bc2:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    5bc6:	b175      	cbz	r5, 5be6 <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5bc8:	464a      	mov	r2, r9
    5bca:	69a1      	ldr	r1, [r4, #24]
    5bcc:	6a20      	ldr	r0, [r4, #32]
    5bce:	f001 fcdf 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5bd2:	3d01      	subs	r5, #1
    5bd4:	2800      	cmp	r0, #0
    5bd6:	dcf6      	bgt.n	5bc6 <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    5bd8:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    5bdc:	2000      	movs	r0, #0
}
    5bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    5be2:	2300      	movs	r3, #0
    5be4:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    5be6:	6026      	str	r6, [r4, #0]
    5be8:	6067      	str	r7, [r4, #4]
  return true;
    5bea:	2001      	movs	r0, #1
    5bec:	e7f7      	b.n	5bde <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    5bee:	69e3      	ldr	r3, [r4, #28]
    5bf0:	442b      	add	r3, r5
    5bf2:	61a3      	str	r3, [r4, #24]
    goto done;
    5bf4:	e7f7      	b.n	5be6 <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    5bf6:	1aed      	subs	r5, r5, r3
    5bf8:	e7e3      	b.n	5bc2 <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    5bfa:	2001      	movs	r0, #1
    5bfc:	e7ef      	b.n	5bde <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

00005c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c04:	b08f      	sub	sp, #60	; 0x3c
    5c06:	4607      	mov	r7, r0
    5c08:	9302      	str	r3, [sp, #8]
    5c0a:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    5c0e:	f1bb 0f00 	cmp.w	fp, #0
    5c12:	d10e      	bne.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5c14:	460d      	mov	r5, r1
    5c16:	4691      	mov	r9, r2
    5c18:	461a      	mov	r2, r3
    5c1a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5c1e:	f013 0f50 	tst.w	r3, #80	; 0x50
    5c22:	d006      	beq.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    5c24:	f002 0303 	and.w	r3, r2, #3
    5c28:	2b01      	cmp	r3, #1
    5c2a:	d02b      	beq.n	5c84 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    5c2c:	2b02      	cmp	r3, #2
    5c2e:	d02b      	beq.n	5c88 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    5c30:	b143      	cbz	r3, 5c44 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    5c32:	2600      	movs	r6, #0
    5c34:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    5c38:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    5c3c:	4630      	mov	r0, r6
    5c3e:	b00f      	add	sp, #60	; 0x3c
    5c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    5c44:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5c46:	9a02      	ldr	r2, [sp, #8]
    5c48:	f002 0208 	and.w	r2, r2, #8
    5c4c:	4313      	orrs	r3, r2
    5c4e:	9303      	str	r3, [sp, #12]
  if (fname) {
    5c50:	f1b9 0f00 	cmp.w	r9, #0
    5c54:	d01a      	beq.n	5c8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5c56:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5c5a:	f103 080e 	add.w	r8, r3, #14
    5c5e:	4bae      	ldr	r3, [pc, #696]	; (5f18 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    5c60:	fba3 3808 	umull	r3, r8, r3, r8
    5c64:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    5c68:	f108 0802 	add.w	r8, r8, #2
    5c6c:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    5c70:	2200      	movs	r2, #0
    5c72:	2300      	movs	r3, #0
    5c74:	4628      	mov	r0, r5
    5c76:	f7ff ff50 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5c7a:	465c      	mov	r4, fp
    5c7c:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5c7e:	f04f 0a20 	mov.w	sl, #32
    5c82:	e00c      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5c84:	2302      	movs	r3, #2
    5c86:	e7de      	b.n	5c46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5c88:	2303      	movs	r3, #3
    5c8a:	e7dc      	b.n	5c46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    5c8c:	f04f 0803 	mov.w	r8, #3
    5c90:	e7f3      	b.n	5c7a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    5c92:	461e      	mov	r6, r3
    5c94:	e003      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c96:	461e      	mov	r6, r3
    5c98:	e001      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    5c9a:	b1cb      	cbz	r3, 5cd0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    5c9c:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5c9e:	4652      	mov	r2, sl
    5ca0:	a906      	add	r1, sp, #24
    5ca2:	4628      	mov	r0, r5
    5ca4:	f7ff fe58 	bl	5958 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5ca8:	b1a8      	cbz	r0, 5cd6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    5caa:	2820      	cmp	r0, #32
    5cac:	d1c1      	bne.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    5cae:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5cb2:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    5cb6:	2a00      	cmp	r2, #0
    5cb8:	db20      	blt.n	5cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    5cba:	b924      	cbnz	r4, 5cc6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5cbc:	682a      	ldr	r2, [r5, #0]
    5cbe:	3a20      	subs	r2, #32
    5cc0:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5cc2:	69aa      	ldr	r2, [r5, #24]
    5cc4:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    5cc6:	4544      	cmp	r4, r8
    5cc8:	d2e7      	bcs.n	5c9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    5cca:	3401      	adds	r4, #1
    5ccc:	b2e4      	uxtb	r4, r4
    5cce:	e7e4      	b.n	5c9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    5cd0:	f1b9 0f00 	cmp.w	r9, #0
    5cd4:	d0ad      	beq.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5cd6:	9b02      	ldr	r3, [sp, #8]
    5cd8:	f413 7f00 	tst.w	r3, #512	; 0x200
    5cdc:	d0a9      	beq.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5cde:	9b03      	ldr	r3, [sp, #12]
    5ce0:	f013 0f02 	tst.w	r3, #2
    5ce4:	d0a5      	beq.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5ce6:	f1b9 0f00 	cmp.w	r9, #0
    5cea:	d0a2      	beq.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    5cec:	4544      	cmp	r4, r8
    5cee:	f080 80cd 	bcs.w	5e8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    5cf2:	2620      	movs	r6, #32
    5cf4:	f8dd a004 	ldr.w	sl, [sp, #4]
    5cf8:	46bb      	mov	fp, r7
    5cfa:	e0b2      	b.n	5e62 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    5cfc:	bb3e      	cbnz	r6, 5d4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    5cfe:	4544      	cmp	r4, r8
    5d00:	bf38      	it	cc
    5d02:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    5d04:	2b85      	cmp	r3, #133	; 0x85
    5d06:	d1ca      	bne.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    5d08:	2238      	movs	r2, #56	; 0x38
    5d0a:	2100      	movs	r1, #0
    5d0c:	4638      	mov	r0, r7
    5d0e:	f00b fbcd 	bl	114ac <memset>
      m_setCount = dirFile->setCount;
    5d12:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5d16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5d1a:	f89d 201c 	ldrb.w	r2, [sp, #28]
    5d1e:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5d22:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    5d26:	bf08      	it	eq
    5d28:	f043 0308 	orreq.w	r3, r3, #8
    5d2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5d30:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    5d32:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    5d34:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    5d36:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5d38:	682b      	ldr	r3, [r5, #0]
    5d3a:	3b20      	subs	r3, #32
    5d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5d3e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    5d42:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5d46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    5d4a:	2601      	movs	r6, #1
    5d4c:	e7a7      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5d4e:	2bc0      	cmp	r3, #192	; 0xc0
    5d50:	d003      	beq.n	5d5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5d52:	2bc1      	cmp	r3, #193	; 0xc1
    5d54:	d033      	beq.n	5dbe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    5d56:	2600      	movs	r6, #0
    5d58:	e7a1      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    5d5a:	9a03      	ldr	r2, [sp, #12]
    5d5c:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5d60:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5d64:	f013 0f02 	tst.w	r3, #2
    5d68:	d003      	beq.n	5d72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5d6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    5d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    5d72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5d76:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    5d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d7c:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5d7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    5d82:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    5d86:	f1b9 0f00 	cmp.w	r9, #0
    5d8a:	d02e      	beq.n	5dea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5d8c:	f8d9 3000 	ldr.w	r3, [r9]
    5d90:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5d94:	f04f 0300 	mov.w	r3, #0
    5d98:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    5d9c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5da0:	f8d9 2010 	ldr.w	r2, [r9, #16]
    5da4:	429a      	cmp	r2, r3
    5da6:	d001      	beq.n	5dac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    5da8:	2600      	movs	r6, #0
    5daa:	e778      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    5dac:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    5db0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5db4:	429e      	cmp	r6, r3
    5db6:	bf14      	ite	ne
    5db8:	2600      	movne	r6, #0
    5dba:	2601      	moveq	r6, #1
    5dbc:	e76f      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    5dbe:	464a      	mov	r2, r9
    5dc0:	a906      	add	r1, sp, #24
    5dc2:	4638      	mov	r0, r7
    5dc4:	f001 fa4c 	bl	7260 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5dc8:	4603      	mov	r3, r0
    5dca:	2800      	cmp	r0, #0
    5dcc:	f43f af61 	beq.w	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    5dd0:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    5dd4:	2a00      	cmp	r2, #0
    5dd6:	f47f af5e 	bne.w	5c96 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    5dda:	f8d9 1008 	ldr.w	r1, [r9, #8]
    5dde:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5de2:	4291      	cmp	r1, r2
    5de4:	d001      	beq.n	5dea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    5de6:	461e      	mov	r6, r3
    5de8:	e759      	b.n	5c9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    5dea:	9b02      	ldr	r3, [sp, #8]
    5dec:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5df0:	f47f af1f 	bne.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5df4:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    5df8:	d105      	bne.n	5e06 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    5dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5dfe:	f013 0f02 	tst.w	r3, #2
    5e02:	f000 80d5 	beq.w	5fb0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5e06:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    5e0a:	f013 0f11 	tst.w	r3, #17
    5e0e:	f47f af10 	bne.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5e12:	9b02      	ldr	r3, [sp, #8]
    5e14:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5e18:	f000 80cf 	beq.w	5fba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5e20:	f013 0f02 	tst.w	r3, #2
    5e24:	f43f af05 	beq.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    5e28:	2200      	movs	r2, #0
    5e2a:	2300      	movs	r3, #0
    5e2c:	4638      	mov	r0, r7
    5e2e:	f7ff fe74 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
    5e32:	2800      	cmp	r0, #0
    5e34:	f43f aefd 	beq.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5e38:	4638      	mov	r0, r7
    5e3a:	f000 fd24 	bl	6886 <ExFatFile::truncate()>
    if (!truncate(0)) {
    5e3e:	4606      	mov	r6, r0
    5e40:	2800      	cmp	r0, #0
    5e42:	f47f aefb 	bne.w	5c3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5e46:	e6f4      	b.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    5e48:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    5e4a:	4628      	mov	r0, r5
    5e4c:	f000 fb08 	bl	6460 <ExFatFile::addDirCluster()>
    5e50:	b908      	cbnz	r0, 5e56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    5e52:	465f      	mov	r7, fp
    5e54:	e6ed      	b.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    5e56:	61af      	str	r7, [r5, #24]
      continue;
    5e58:	e001      	b.n	5e5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    5e5a:	3401      	adds	r4, #1
    5e5c:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    5e5e:	4544      	cmp	r4, r8
    5e60:	d211      	bcs.n	5e86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    5e62:	4632      	mov	r2, r6
    5e64:	a906      	add	r1, sp, #24
    5e66:	4628      	mov	r0, r5
    5e68:	f7ff fd76 	bl	5958 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5e6c:	2800      	cmp	r0, #0
    5e6e:	d0eb      	beq.n	5e48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    5e70:	2820      	cmp	r0, #32
    5e72:	f040 809b 	bne.w	5fac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    5e76:	2c00      	cmp	r4, #0
    5e78:	d1ef      	bne.n	5e5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5e7a:	682b      	ldr	r3, [r5, #0]
    5e7c:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    5e80:	69ab      	ldr	r3, [r5, #24]
    5e82:	9300      	str	r3, [sp, #0]
    5e84:	e7e9      	b.n	5e5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    5e86:	f8cd a004 	str.w	sl, [sp, #4]
    5e8a:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5e8c:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    5e90:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    5e94:	2238      	movs	r2, #56	; 0x38
    5e96:	2100      	movs	r1, #0
    5e98:	4638      	mov	r0, r7
    5e9a:	f00b fb07 	bl	114ac <memset>
  ExFatVolume* volume() const {return m_vol;}
    5e9e:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    5ea0:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    5ea2:	2308      	movs	r3, #8
    5ea4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    5ea8:	9b00      	ldr	r3, [sp, #0]
    5eaa:	627b      	str	r3, [r7, #36]	; 0x24
    5eac:	9b01      	ldr	r3, [sp, #4]
    5eae:	62bb      	str	r3, [r7, #40]	; 0x28
    5eb0:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    5eb4:	f8d9 3000 	ldr.w	r3, [r9]
    5eb8:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5ebc:	2300      	movs	r3, #0
    5ebe:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5ec2:	f1b8 0f00 	cmp.w	r8, #0
    5ec6:	d06c      	beq.n	5fa2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5ec8:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    5eca:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    5ece:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    5ed2:	f8df b048 	ldr.w	fp, [pc, #72]	; 5f1c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    5ed6:	e036      	b.n	5f46 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    5ed8:	2385      	movs	r3, #133	; 0x85
    5eda:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    5edc:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5ee0:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    5ee4:	f8db 3000 	ldr.w	r3, [fp]
    5ee8:	b17b      	cbz	r3, 5f0a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    5eea:	f10d 0213 	add.w	r2, sp, #19
    5eee:	f10d 0116 	add.w	r1, sp, #22
    5ef2:	a805      	add	r0, sp, #20
    5ef4:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5ef6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5efa:	8163      	strh	r3, [r4, #10]
    5efc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5f00:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    5f02:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5f06:	7523      	strb	r3, [r4, #20]
    5f08:	e019      	b.n	5f3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5f0a:	f245 6321 	movw	r3, #22049	; 0x5621
    5f0e:	8163      	strh	r3, [r4, #10]
    5f10:	81e3      	strh	r3, [r4, #14]
    5f12:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    5f14:	e013      	b.n	5f3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5f16:	bf00      	nop
    5f18:	88888889 	.word	0x88888889
    5f1c:	20004c5c 	.word	0x20004c5c
      dirStream->type = EXFAT_TYPE_STREAM;
    5f20:	23c0      	movs	r3, #192	; 0xc0
    5f22:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5f24:	2301      	movs	r3, #1
    5f26:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5f28:	9b03      	ldr	r3, [sp, #12]
    5f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5f32:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5f36:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5f38:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    5f3c:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5f3e:	3601      	adds	r6, #1
    5f40:	b2f3      	uxtb	r3, r6
    5f42:	4598      	cmp	r8, r3
    5f44:	d92d      	bls.n	5fa2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5f46:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5f48:	2201      	movs	r2, #1
    5f4a:	4629      	mov	r1, r5
    5f4c:	4638      	mov	r0, r7
    5f4e:	f7ff fc51 	bl	57f4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5f52:	4604      	mov	r4, r0
    5f54:	2800      	cmp	r0, #0
    5f56:	f43f ae6c 	beq.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5f5a:	f990 3000 	ldrsb.w	r3, [r0]
    5f5e:	2b00      	cmp	r3, #0
    5f60:	f6ff ae67 	blt.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    5f64:	2220      	movs	r2, #32
    5f66:	2100      	movs	r1, #0
    5f68:	f00b faa0 	bl	114ac <memset>
    if (i == 0) {
    5f6c:	2d00      	cmp	r5, #0
    5f6e:	d0b3      	beq.n	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    5f70:	2d01      	cmp	r5, #1
    5f72:	d0d5      	beq.n	5f20 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    5f74:	23c1      	movs	r3, #193	; 0xc1
    5f76:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    5f78:	4625      	mov	r5, r4
    5f7a:	341e      	adds	r4, #30
    5f7c:	e006      	b.n	5f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    5f7e:	4648      	mov	r0, r9
    5f80:	f005 ff10 	bl	bda4 <FsName::get16()>
    5f84:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    5f88:	42ac      	cmp	r4, r5
    5f8a:	d0d8      	beq.n	5f3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    5f8c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    5f90:	2b00      	cmp	r3, #0
    5f92:	d1f4      	bne.n	5f7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5f94:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5f98:	f8d9 3008 	ldr.w	r3, [r9, #8]
    5f9c:	429a      	cmp	r2, r3
    5f9e:	d1ee      	bne.n	5f7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5fa0:	e7cd      	b.n	5f3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    5fa2:	4638      	mov	r0, r7
    5fa4:	f000 fa2e 	bl	6404 <ExFatFile::sync()>
    5fa8:	4606      	mov	r6, r0
    5faa:	e647      	b.n	5c3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5fac:	465f      	mov	r7, fp
    5fae:	e640      	b.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5fb0:	9b02      	ldr	r3, [sp, #8]
    5fb2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5fb6:	f47f ae3c 	bne.w	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5fba:	9b02      	ldr	r3, [sp, #8]
    5fbc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    5fc0:	f43f ae3c 	beq.w	5c3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5fc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5fc8:	4638      	mov	r0, r7
    5fca:	f7ff fda6 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
    5fce:	4606      	mov	r6, r0
    5fd0:	2800      	cmp	r0, #0
    5fd2:	f47f ae33 	bne.w	5c3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5fd6:	e62c      	b.n	5c32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

00005fd8 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fdc:	b096      	sub	sp, #88	; 0x58
    5fde:	9201      	str	r2, [sp, #4]
    5fe0:	461f      	mov	r7, r3
  ExFatFile() {}
    5fe2:	2300      	movs	r3, #0
    5fe4:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    5fe8:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    5fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    5ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5ff4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d159      	bne.n	60b0 <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    5ffc:	4604      	mov	r4, r0
    5ffe:	460d      	mov	r5, r1
    6000:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6004:	f013 0f50 	tst.w	r3, #80	; 0x50
    6008:	d057      	beq.n	60ba <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    600a:	4613      	mov	r3, r2
    600c:	7812      	ldrb	r2, [r2, #0]
    600e:	2a2f      	cmp	r2, #47	; 0x2f
    6010:	d001      	beq.n	6016 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6012:	2600      	movs	r6, #0
    6014:	e02c      	b.n	6070 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    6016:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    601a:	2a2f      	cmp	r2, #47	; 0x2f
    601c:	d0fb      	beq.n	6016 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    601e:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    6020:	b92a      	cbnz	r2, 602e <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    6022:	6a29      	ldr	r1, [r5, #32]
    6024:	4620      	mov	r0, r4
    6026:	f7ff fc2f 	bl	5888 <ExFatFile::openRoot(ExFatVolume*)>
    602a:	4603      	mov	r3, r0
    602c:	e041      	b.n	60b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    602e:	6a29      	ldr	r1, [r5, #32]
    6030:	a808      	add	r0, sp, #32
    6032:	f7ff fc29 	bl	5888 <ExFatFile::openRoot(ExFatVolume*)>
    6036:	4603      	mov	r3, r0
    6038:	2800      	cmp	r0, #0
    603a:	d03a      	beq.n	60b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    603c:	ad08      	add	r5, sp, #32
    603e:	e7e8      	b.n	6012 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    6040:	46ae      	mov	lr, r5
    6042:	f8dc 0000 	ldr.w	r0, [ip]
    6046:	f8dc 1004 	ldr.w	r1, [ip, #4]
    604a:	f8dc 2008 	ldr.w	r2, [ip, #8]
    604e:	f8dc 300c 	ldr.w	r3, [ip, #12]
    6052:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6056:	f10c 0c10 	add.w	ip, ip, #16
    605a:	4675      	mov	r5, lr
    605c:	45c4      	cmp	ip, r8
    605e:	d1ef      	bne.n	6040 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    6060:	f8dc 0000 	ldr.w	r0, [ip]
    6064:	f8ce 0000 	str.w	r0, [lr]
    close();
    6068:	4620      	mov	r0, r4
    606a:	f7ff fbdf 	bl	582c <ExFatFile::close()>
    dirFile = &tmpDir;
    606e:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6070:	ab01      	add	r3, sp, #4
    6072:	aa02      	add	r2, sp, #8
    6074:	9901      	ldr	r1, [sp, #4]
    6076:	4620      	mov	r0, r4
    6078:	f7ff fc1a 	bl	58b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    607c:	4603      	mov	r3, r0
    607e:	b1c0      	cbz	r0, 60b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    6080:	9b01      	ldr	r3, [sp, #4]
    6082:	781b      	ldrb	r3, [r3, #0]
    6084:	b163      	cbz	r3, 60a0 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6086:	4633      	mov	r3, r6
    6088:	aa02      	add	r2, sp, #8
    608a:	4629      	mov	r1, r5
    608c:	4620      	mov	r0, r4
    608e:	f7ff fdb7 	bl	5c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6092:	4603      	mov	r3, r0
    6094:	b168      	cbz	r0, 60b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    6096:	46a4      	mov	ip, r4
    6098:	ad08      	add	r5, sp, #32
    609a:	f104 0830 	add.w	r8, r4, #48	; 0x30
    609e:	e7cf      	b.n	6040 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    60a0:	463b      	mov	r3, r7
    60a2:	aa02      	add	r2, sp, #8
    60a4:	4629      	mov	r1, r5
    60a6:	4620      	mov	r0, r4
    60a8:	f7ff fdaa 	bl	5c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60ac:	4603      	mov	r3, r0
    60ae:	e000      	b.n	60b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    60b0:	2300      	movs	r3, #0
}
    60b2:	4618      	mov	r0, r3
    60b4:	b016      	add	sp, #88	; 0x58
    60b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    60ba:	2300      	movs	r3, #0
    60bc:	e7f9      	b.n	60b2 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

000060be <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    60be:	b129      	cbz	r1, 60cc <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    60c0:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    60c2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    60c6:	f7ff ff87 	bl	5fd8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    60ca:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    60cc:	2000      	movs	r0, #0
}
    60ce:	4770      	bx	lr

000060d0 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    60d0:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    60d2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    60d6:	b97b      	cbnz	r3, 60f8 <ExFatFile::openNext(ExFatFile*, int)+0x28>
    60d8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    60dc:	f013 0f50 	tst.w	r3, #80	; 0x50
    60e0:	d00c      	beq.n	60fc <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    60e2:	680b      	ldr	r3, [r1, #0]
    60e4:	f013 0f1f 	tst.w	r3, #31
    60e8:	d001      	beq.n	60ee <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    60ea:	2000      	movs	r0, #0
    60ec:	e005      	b.n	60fa <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    60ee:	4613      	mov	r3, r2
    60f0:	2200      	movs	r2, #0
    60f2:	f7ff fd85 	bl	5c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60f6:	e000      	b.n	60fa <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    60f8:	2000      	movs	r0, #0
}
    60fa:	bd08      	pop	{r3, pc}
  return false;
    60fc:	2000      	movs	r0, #0
    60fe:	e7fc      	b.n	60fa <ExFatFile::openNext(ExFatFile*, int)+0x2a>

00006100 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6100:	b410      	push	{r4}
    6102:	4684      	mov	ip, r0
    6104:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6106:	f89c 4000 	ldrb.w	r4, [ip]
    610a:	2c85      	cmp	r4, #133	; 0x85
    610c:	bf14      	ite	ne
    610e:	2400      	movne	r4, #0
    6110:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6112:	2200      	movs	r2, #0
    6114:	e000      	b.n	6118 <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    6116:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6118:	03c3      	lsls	r3, r0, #15
    611a:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    611e:	f81c 1002 	ldrb.w	r1, [ip, r2]
    6122:	fa11 f383 	uxtah	r3, r1, r3
    6126:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6128:	2a01      	cmp	r2, #1
    612a:	d101      	bne.n	6130 <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    612c:	2c00      	cmp	r4, #0
    612e:	d1f2      	bne.n	6116 <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    6130:	3201      	adds	r2, #1
    6132:	2a1f      	cmp	r2, #31
    6134:	d9f0      	bls.n	6118 <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
  }
  return checksum;
}
    6136:	f85d 4b04 	ldr.w	r4, [sp], #4
    613a:	4770      	bx	lr

0000613c <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    613e:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6140:	6a00      	ldr	r0, [r0, #32]
    6142:	69a1      	ldr	r1, [r4, #24]
    6144:	b101      	cbz	r1, 6148 <ExFatFile::addCluster()+0xc>
    6146:	3101      	adds	r1, #1
    6148:	2201      	movs	r2, #1
    614a:	f001 f943 	bl	73d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    614e:	4605      	mov	r5, r0
  if (find < 2) {
    6150:	2801      	cmp	r0, #1
    6152:	d93c      	bls.n	61ce <ExFatFile::addCluster()+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6154:	2301      	movs	r3, #1
    6156:	461a      	mov	r2, r3
    6158:	4601      	mov	r1, r0
    615a:	6a20      	ldr	r0, [r4, #32]
    615c:	f001 f993 	bl	7486 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6160:	4607      	mov	r7, r0
    6162:	2800      	cmp	r0, #0
    6164:	d034      	beq.n	61d0 <ExFatFile::addCluster()+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6166:	69a3      	ldr	r3, [r4, #24]
    6168:	b1bb      	cbz	r3, 619a <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    616a:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    616e:	f012 0f40 	tst.w	r2, #64	; 0x40
    6172:	d01a      	beq.n	61aa <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    6174:	3301      	adds	r3, #1
    6176:	42ab      	cmp	r3, r5
    6178:	d015      	beq.n	61a6 <ExFatFile::addCluster()+0x6a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    617a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    617e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6182:	69e1      	ldr	r1, [r4, #28]
    6184:	69a3      	ldr	r3, [r4, #24]
    6186:	428b      	cmp	r3, r1
    6188:	d90f      	bls.n	61aa <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    618a:	1c4e      	adds	r6, r1, #1
    618c:	4632      	mov	r2, r6
    618e:	6a20      	ldr	r0, [r4, #32]
    6190:	f001 fa5d 	bl	764e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6194:	b1f0      	cbz	r0, 61d4 <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6196:	4631      	mov	r1, r6
    6198:	e7f4      	b.n	6184 <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    619a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    619e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    61a2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    61a6:	61a5      	str	r5, [r4, #24]
  return true;
    61a8:	e012      	b.n	61d0 <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    61aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    61ae:	4629      	mov	r1, r5
    61b0:	6a20      	ldr	r0, [r4, #32]
    61b2:	f001 fa4c 	bl	764e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    61b6:	b178      	cbz	r0, 61d8 <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    61b8:	69a1      	ldr	r1, [r4, #24]
    61ba:	2900      	cmp	r1, #0
    61bc:	d0f3      	beq.n	61a6 <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    61be:	462a      	mov	r2, r5
    61c0:	6a20      	ldr	r0, [r4, #32]
    61c2:	f001 fa44 	bl	764e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    61c6:	2800      	cmp	r0, #0
    61c8:	d1ed      	bne.n	61a6 <ExFatFile::addCluster()+0x6a>

 fail:
  return false;
    61ca:	4607      	mov	r7, r0
    61cc:	e000      	b.n	61d0 <ExFatFile::addCluster()+0x94>
    61ce:	2700      	movs	r7, #0
}
    61d0:	4638      	mov	r0, r7
    61d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    61d4:	4607      	mov	r7, r0
    61d6:	e7fb      	b.n	61d0 <ExFatFile::addCluster()+0x94>
    61d8:	4607      	mov	r7, r0
    61da:	e7f9      	b.n	61d0 <ExFatFile::addCluster()+0x94>

000061dc <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    61dc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    61e0:	f013 0f02 	tst.w	r3, #2
    61e4:	d04e      	beq.n	6284 <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    61e6:	b570      	push	{r4, r5, r6, lr}
    61e8:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    61ea:	69c1      	ldr	r1, [r0, #28]
    61ec:	b1e9      	cbz	r1, 622a <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    61ee:	f013 0f40 	tst.w	r3, #64	; 0x40
    61f2:	d041      	beq.n	6278 <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    61f4:	6a00      	ldr	r0, [r0, #32]
    61f6:	68aa      	ldr	r2, [r5, #8]
    61f8:	68ec      	ldr	r4, [r5, #12]
    61fa:	3a01      	subs	r2, #1
    61fc:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6200:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6204:	3309      	adds	r3, #9
    6206:	b2db      	uxtb	r3, r3
    6208:	f1c3 0c20 	rsb	ip, r3, #32
    620c:	f1a3 0620 	sub.w	r6, r3, #32
    6210:	40da      	lsrs	r2, r3
    6212:	fa04 fc0c 	lsl.w	ip, r4, ip
    6216:	ea42 020c 	orr.w	r2, r2, ip
    621a:	fa24 f606 	lsr.w	r6, r4, r6
    621e:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6220:	2300      	movs	r3, #0
    6222:	3201      	adds	r2, #1
    6224:	f001 f92f 	bl	7486 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6228:	b378      	cbz	r0, 628a <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    622a:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    622c:	2601      	movs	r6, #1
    622e:	4632      	mov	r2, r6
    6230:	b2e1      	uxtb	r1, r4
    6232:	4628      	mov	r0, r5
    6234:	f7ff fade 	bl	57f4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6238:	b330      	cbz	r0, 6288 <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    623a:	7803      	ldrb	r3, [r0, #0]
    623c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6240:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6242:	3401      	adds	r4, #1
    6244:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    6248:	b2e3      	uxtb	r3, r4
    624a:	429a      	cmp	r2, r3
    624c:	d2ef      	bcs.n	622e <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    624e:	2300      	movs	r3, #0
    6250:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    6254:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    6258:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    625a:	4620      	mov	r0, r4
    625c:	f005 fd3c 	bl	bcd8 <FsCache::sync()>
    6260:	b198      	cbz	r0, 628a <ExFatFile::remove()+0xae>
    6262:	f504 7004 	add.w	r0, r4, #528	; 0x210
    6266:	f005 fd37 	bl	bcd8 <FsCache::sync()>
    626a:	b170      	cbz	r0, 628a <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    626c:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    6270:	6803      	ldr	r3, [r0, #0]
    6272:	6a1b      	ldr	r3, [r3, #32]
    6274:	4798      	blx	r3
    6276:	e008      	b.n	628a <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    6278:	6a00      	ldr	r0, [r0, #32]
    627a:	f001 fa08 	bl	768e <ExFatPartition::freeChain(unsigned long)>
    627e:	2800      	cmp	r0, #0
    6280:	d1d3      	bne.n	622a <ExFatFile::remove()+0x4e>
    6282:	e002      	b.n	628a <ExFatFile::remove()+0xae>

 fail:
  return false;
    6284:	2000      	movs	r0, #0
}
    6286:	4770      	bx	lr
  return false;
    6288:	2000      	movs	r0, #0
}
    628a:	bd70      	pop	{r4, r5, r6, pc}

0000628c <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    628c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6290:	f013 0f10 	tst.w	r3, #16
    6294:	d101      	bne.n	629a <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6296:	2000      	movs	r0, #0
}
    6298:	4770      	bx	lr
bool ExFatFile::rmdir() {
    629a:	b530      	push	{r4, r5, lr}
    629c:	b089      	sub	sp, #36	; 0x24
    629e:	4604      	mov	r4, r0
    seekSet(0);
    62a0:	2200      	movs	r2, #0
    62a2:	2300      	movs	r3, #0
    62a4:	f7ff fc39 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    62a8:	2520      	movs	r5, #32
    62aa:	462a      	mov	r2, r5
    62ac:	4669      	mov	r1, sp
    62ae:	4620      	mov	r0, r4
    62b0:	f7ff fb52 	bl	5958 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    62b4:	b148      	cbz	r0, 62ca <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    62b6:	2820      	cmp	r0, #32
    62b8:	d115      	bne.n	62e6 <ExFatFile::rmdir()+0x5a>
    62ba:	f89d 2000 	ldrb.w	r2, [sp]
    62be:	f99d 3000 	ldrsb.w	r3, [sp]
    62c2:	2b00      	cmp	r3, #0
    62c4:	db11      	blt.n	62ea <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    62c6:	2a00      	cmp	r2, #0
    62c8:	d1ef      	bne.n	62aa <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    62ca:	2308      	movs	r3, #8
    62cc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    62d0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    62d4:	f043 0302 	orr.w	r3, r3, #2
    62d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    62dc:	4620      	mov	r0, r4
    62de:	f7ff ff7d 	bl	61dc <ExFatFile::remove()>
}
    62e2:	b009      	add	sp, #36	; 0x24
    62e4:	bd30      	pop	{r4, r5, pc}
  return false;
    62e6:	2000      	movs	r0, #0
    62e8:	e7fb      	b.n	62e2 <ExFatFile::rmdir()+0x56>
    62ea:	2000      	movs	r0, #0
    62ec:	e7f9      	b.n	62e2 <ExFatFile::rmdir()+0x56>
	...

000062f0 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    62f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62f4:	b083      	sub	sp, #12
    62f6:	4604      	mov	r4, r0
    62f8:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    62fa:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    62fc:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    62fe:	f8df 9100 	ldr.w	r9, [pc, #256]	; 6400 <ExFatFile::syncDir()+0x110>
    6302:	e02a      	b.n	635a <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6304:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    6308:	f003 0337 	and.w	r3, r3, #55	; 0x37
    630c:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    630e:	f8d9 3000 	ldr.w	r3, [r9]
    6312:	b183      	cbz	r3, 6336 <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6314:	f10d 0203 	add.w	r2, sp, #3
    6318:	f10d 0106 	add.w	r1, sp, #6
    631c:	a801      	add	r0, sp, #4
    631e:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    6320:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6324:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    6326:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    632a:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    632c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6330:	81eb      	strh	r3, [r5, #14]
    6332:	822a      	strh	r2, [r5, #16]
    6334:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    6336:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6338:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    633c:	f043 0301 	orr.w	r3, r3, #1
    6340:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6344:	4639      	mov	r1, r7
    6346:	4628      	mov	r0, r5
    6348:	f7ff feda 	bl	6100 <exFatDirChecksum(unsigned char const*, unsigned short)>
    634c:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    634e:	3601      	adds	r6, #1
    6350:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    6354:	b2f3      	uxtb	r3, r6
    6356:	429a      	cmp	r2, r3
    6358:	d334      	bcc.n	63c4 <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    635a:	4642      	mov	r2, r8
    635c:	b2f1      	uxtb	r1, r6
    635e:	4620      	mov	r0, r4
    6360:	f7ff fa48 	bl	57f4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6364:	4605      	mov	r5, r0
    6366:	b130      	cbz	r0, 6376 <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    6368:	7803      	ldrb	r3, [r0, #0]
    636a:	2bc0      	cmp	r3, #192	; 0xc0
    636c:	d00d      	beq.n	638a <ExFatFile::syncDir()+0x9a>
    636e:	2bc1      	cmp	r3, #193	; 0xc1
    6370:	d0e8      	beq.n	6344 <ExFatFile::syncDir()+0x54>
    6372:	2b85      	cmp	r3, #133	; 0x85
    6374:	d0c6      	beq.n	6304 <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6376:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    637a:	f043 0301 	orr.w	r3, r3, #1
    637e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6382:	2000      	movs	r0, #0
}
    6384:	b003      	add	sp, #12
    6386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    638a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    638e:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6392:	7843      	ldrb	r3, [r0, #1]
    6394:	bf14      	ite	ne
    6396:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    639a:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    639e:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    63a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    63a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    63a8:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    63aa:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    63ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    63b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    63b4:	6a22      	ldr	r2, [r4, #32]
    63b6:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    63ba:	f043 0301 	orr.w	r3, r3, #1
    63be:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    63c2:	e7bf      	b.n	6344 <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    63c4:	2201      	movs	r2, #1
    63c6:	f104 0124 	add.w	r1, r4, #36	; 0x24
    63ca:	6a20      	ldr	r0, [r4, #32]
    63cc:	f001 f8c3 	bl	7556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    63d0:	2800      	cmp	r0, #0
    63d2:	d0d0      	beq.n	6376 <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    63d4:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    63d6:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    63d8:	4628      	mov	r0, r5
    63da:	f005 fc7d 	bl	bcd8 <FsCache::sync()>
    63de:	2800      	cmp	r0, #0
    63e0:	d0c9      	beq.n	6376 <ExFatFile::syncDir()+0x86>
    63e2:	f505 7004 	add.w	r0, r5, #528	; 0x210
    63e6:	f005 fc77 	bl	bcd8 <FsCache::sync()>
    63ea:	2800      	cmp	r0, #0
    63ec:	d0c3      	beq.n	6376 <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    63ee:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    63f2:	6803      	ldr	r3, [r0, #0]
    63f4:	6a1b      	ldr	r3, [r3, #32]
    63f6:	4798      	blx	r3
    63f8:	2800      	cmp	r0, #0
    63fa:	d1c3      	bne.n	6384 <ExFatFile::syncDir()+0x94>
    63fc:	e7bb      	b.n	6376 <ExFatFile::syncDir()+0x86>
    63fe:	bf00      	nop
    6400:	20004c5c 	.word	0x20004c5c

00006404 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6404:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    6406:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    640a:	b33b      	cbz	r3, 645c <ExFatFile::sync()+0x58>
    640c:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    640e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6412:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    6416:	2a00      	cmp	r2, #0
    6418:	db0c      	blt.n	6434 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    641a:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    641c:	4628      	mov	r0, r5
    641e:	f005 fc5b 	bl	bcd8 <FsCache::sync()>
    6422:	b970      	cbnz	r0, 6442 <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    6424:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    6428:	f043 0301 	orr.w	r3, r3, #1
    642c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6430:	2000      	movs	r0, #0
    6432:	e014      	b.n	645e <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6438:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    643c:	f7ff ff58 	bl	62f0 <ExFatFile::syncDir()>
    6440:	e00d      	b.n	645e <ExFatFile::sync()+0x5a>
    6442:	f505 7004 	add.w	r0, r5, #528	; 0x210
    6446:	f005 fc47 	bl	bcd8 <FsCache::sync()>
    644a:	2800      	cmp	r0, #0
    644c:	d0ea      	beq.n	6424 <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    644e:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    6452:	6803      	ldr	r3, [r0, #0]
    6454:	6a1b      	ldr	r3, [r3, #32]
    6456:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    6458:	b908      	cbnz	r0, 645e <ExFatFile::sync()+0x5a>
    645a:	e7e3      	b.n	6424 <ExFatFile::sync()+0x20>
    return true;
    645c:	2001      	movs	r0, #1
}
    645e:	bd38      	pop	{r3, r4, r5, pc}

00006460 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6464:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6466:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    646a:	f013 0f40 	tst.w	r3, #64	; 0x40
    646e:	d10a      	bne.n	6486 <ExFatFile::addDirCluster()+0x26>
    6470:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6472:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    6474:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    6478:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    647a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    647e:	d306      	bcc.n	648e <ExFatFile::addDirCluster()+0x2e>
  return false;
    6480:	2000      	movs	r0, #0
}
    6482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6486:	6a00      	ldr	r0, [r0, #32]
    6488:	f001 f9f4 	bl	7874 <ExFatPartition::rootLength()>
    648c:	e7f1      	b.n	6472 <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    648e:	4628      	mov	r0, r5
    6490:	f7ff fe54 	bl	613c <ExFatFile::addCluster()>
    6494:	2800      	cmp	r0, #0
    6496:	d0f4      	beq.n	6482 <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    6498:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    649a:	69ae      	ldr	r6, [r5, #24]
    649c:	3e02      	subs	r6, #2
    649e:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    64a2:	409e      	lsls	r6, r3
    64a4:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    64a8:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    64aa:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    64ac:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    64ae:	f44f 7900 	mov.w	r9, #512	; 0x200
    64b2:	46a0      	mov	r8, r4
    64b4:	463a      	mov	r2, r7
    64b6:	1931      	adds	r1, r6, r4
    64b8:	f500 7004 	add.w	r0, r0, #528	; 0x210
    64bc:	f005 fc33 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    64c0:	b360      	cbz	r0, 651c <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    64c2:	464a      	mov	r2, r9
    64c4:	4641      	mov	r1, r8
    64c6:	f00a fff1 	bl	114ac <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    64ca:	3401      	adds	r4, #1
    64cc:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    64ce:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    64d2:	2301      	movs	r3, #1
    64d4:	4093      	lsls	r3, r2
    64d6:	429c      	cmp	r4, r3
    64d8:	d3ec      	bcc.n	64b4 <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    64da:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    64de:	f013 0f40 	tst.w	r3, #64	; 0x40
    64e2:	d117      	bne.n	6514 <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    64e4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    64e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    64ec:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    64f0:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    64f4:	68ab      	ldr	r3, [r5, #8]
    64f6:	68ea      	ldr	r2, [r5, #12]
    64f8:	185b      	adds	r3, r3, r1
    64fa:	f142 0200 	adc.w	r2, r2, #0
    64fe:	60ab      	str	r3, [r5, #8]
    6500:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    6502:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    6506:	692b      	ldr	r3, [r5, #16]
    6508:	696a      	ldr	r2, [r5, #20]
    650a:	185b      	adds	r3, r3, r1
    650c:	f142 0200 	adc.w	r2, r2, #0
    6510:	612b      	str	r3, [r5, #16]
    6512:	616a      	str	r2, [r5, #20]
  return sync();
    6514:	4628      	mov	r0, r5
    6516:	f7ff ff75 	bl	6404 <ExFatFile::sync()>
    651a:	e7b2      	b.n	6482 <ExFatFile::addDirCluster()+0x22>
  return false;
    651c:	2000      	movs	r0, #0
    651e:	e7b0      	b.n	6482 <ExFatFile::addDirCluster()+0x22>

00006520 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    6520:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6524:	f013 0f50 	tst.w	r3, #80	; 0x50
    6528:	d101      	bne.n	652e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    652a:	2000      	movs	r0, #0
}
    652c:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    652e:	b510      	push	{r4, lr}
    6530:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6532:	f640 2302 	movw	r3, #2562	; 0xa02
    6536:	f7ff fb63 	bl	5c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    653a:	b900      	cbnz	r0, 653e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    653c:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    653e:	2310      	movs	r3, #16
    6540:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6544:	4620      	mov	r0, r4
    6546:	f7ff ff8b 	bl	6460 <ExFatFile::addDirCluster()>
    654a:	2800      	cmp	r0, #0
    654c:	d0f6      	beq.n	653c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    654e:	69a3      	ldr	r3, [r4, #24]
    6550:	61e3      	str	r3, [r4, #28]
    6552:	2200      	movs	r2, #0
    6554:	2300      	movs	r3, #0
    6556:	4620      	mov	r0, r4
    6558:	f7ff fadf 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    655c:	23c1      	movs	r3, #193	; 0xc1
    655e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6562:	4620      	mov	r0, r4
    6564:	f7ff ff4e 	bl	6404 <ExFatFile::sync()>
    6568:	e7e8      	b.n	653c <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

0000656a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    656a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    656e:	b096      	sub	sp, #88	; 0x58
    6570:	9201      	str	r2, [sp, #4]
    6572:	461e      	mov	r6, r3
    6574:	2300      	movs	r3, #0
    6576:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    657a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    657e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    6582:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    6586:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    658a:	2b00      	cmp	r3, #0
    658c:	d15a      	bne.n	6644 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    658e:	4604      	mov	r4, r0
    6590:	460d      	mov	r5, r1
    6592:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6596:	f013 0f50 	tst.w	r3, #80	; 0x50
    659a:	d058      	beq.n	664e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    659c:	4613      	mov	r3, r2
    659e:	7812      	ldrb	r2, [r2, #0]
    65a0:	2a2f      	cmp	r2, #47	; 0x2f
    65a2:	d001      	beq.n	65a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    65a4:	2700      	movs	r7, #0
    65a6:	e029      	b.n	65fc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    65a8:	3301      	adds	r3, #1
    65aa:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    65ac:	781a      	ldrb	r2, [r3, #0]
    65ae:	2a2f      	cmp	r2, #47	; 0x2f
    65b0:	d0fa      	beq.n	65a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    65b2:	6a29      	ldr	r1, [r5, #32]
    65b4:	a802      	add	r0, sp, #8
    65b6:	f7ff f967 	bl	5888 <ExFatFile::openRoot(ExFatVolume*)>
    65ba:	4603      	mov	r3, r0
    65bc:	2800      	cmp	r0, #0
    65be:	d042      	beq.n	6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    65c0:	ad02      	add	r5, sp, #8
    65c2:	e7ef      	b.n	65a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    65c4:	46a4      	mov	ip, r4
    65c6:	ad02      	add	r5, sp, #8
    65c8:	f104 0830 	add.w	r8, r4, #48	; 0x30
    65cc:	46ae      	mov	lr, r5
    65ce:	f8dc 0000 	ldr.w	r0, [ip]
    65d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    65d6:	f8dc 2008 	ldr.w	r2, [ip, #8]
    65da:	f8dc 300c 	ldr.w	r3, [ip, #12]
    65de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    65e2:	f10c 0c10 	add.w	ip, ip, #16
    65e6:	4675      	mov	r5, lr
    65e8:	45c4      	cmp	ip, r8
    65ea:	d1ef      	bne.n	65cc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    65ec:	f8dc 0000 	ldr.w	r0, [ip]
    65f0:	f8ce 0000 	str.w	r0, [lr]
    close();
    65f4:	4620      	mov	r0, r4
    65f6:	f7ff f919 	bl	582c <ExFatFile::close()>
    parent = &tmpDir;
    65fa:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    65fc:	ab01      	add	r3, sp, #4
    65fe:	aa10      	add	r2, sp, #64	; 0x40
    6600:	9901      	ldr	r1, [sp, #4]
    6602:	4620      	mov	r0, r4
    6604:	f7ff f954 	bl	58b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6608:	4603      	mov	r3, r0
    660a:	b1e0      	cbz	r0, 6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    660c:	9b01      	ldr	r3, [sp, #4]
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	b18b      	cbz	r3, 6636 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6612:	463b      	mov	r3, r7
    6614:	aa10      	add	r2, sp, #64	; 0x40
    6616:	4629      	mov	r1, r5
    6618:	4620      	mov	r0, r4
    661a:	f7ff faf1 	bl	5c00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    661e:	2800      	cmp	r0, #0
    6620:	d1d0      	bne.n	65c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    6622:	b1b6      	cbz	r6, 6652 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    6624:	aa10      	add	r2, sp, #64	; 0x40
    6626:	4629      	mov	r1, r5
    6628:	4620      	mov	r0, r4
    662a:	f7ff ff79 	bl	6520 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    662e:	4603      	mov	r3, r0
    6630:	2800      	cmp	r0, #0
    6632:	d1c7      	bne.n	65c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    6634:	e007      	b.n	6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    6636:	aa10      	add	r2, sp, #64	; 0x40
    6638:	4629      	mov	r1, r5
    663a:	4620      	mov	r0, r4
    663c:	f7ff ff70 	bl	6520 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6640:	4603      	mov	r3, r0
    6642:	e000      	b.n	6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    6644:	2300      	movs	r3, #0
}
    6646:	4618      	mov	r0, r3
    6648:	b016      	add	sp, #88	; 0x58
    664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    664e:	2300      	movs	r3, #0
    6650:	e7f9      	b.n	6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    6652:	4633      	mov	r3, r6
    6654:	e7f7      	b.n	6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

00006656 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6656:	b570      	push	{r4, r5, r6, lr}
    6658:	b09c      	sub	sp, #112	; 0x70
    665a:	2300      	movs	r3, #0
    665c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6660:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    6664:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    6668:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    666c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6670:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    6674:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6678:	f013 0f18 	tst.w	r3, #24
    667c:	d047      	beq.n	670e <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    667e:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    6680:	6a00      	ldr	r0, [r0, #32]
    6682:	6a0b      	ldr	r3, [r1, #32]
    6684:	4298      	cmp	r0, r3
    6686:	d002      	beq.n	668e <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    6688:	2000      	movs	r0, #0
}
    668a:	b01c      	add	sp, #112	; 0x70
    668c:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    668e:	f640 2301 	movw	r3, #2561	; 0xa01
    6692:	a80e      	add	r0, sp, #56	; 0x38
    6694:	f7ff fca0 	bl	5fd8 <ExFatFile::open(ExFatFile*, char const*, int)>
    6698:	2800      	cmp	r0, #0
    669a:	d0f6      	beq.n	668a <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    669c:	46a4      	mov	ip, r4
    669e:	466d      	mov	r5, sp
    66a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
    66a4:	46ae      	mov	lr, r5
    66a6:	f8dc 0000 	ldr.w	r0, [ip]
    66aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
    66ae:	f8dc 2008 	ldr.w	r2, [ip, #8]
    66b2:	f8dc 300c 	ldr.w	r3, [ip, #12]
    66b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    66ba:	f10c 0c10 	add.w	ip, ip, #16
    66be:	4675      	mov	r5, lr
    66c0:	45b4      	cmp	ip, r6
    66c2:	d1ef      	bne.n	66a4 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    66c4:	f8dc 0000 	ldr.w	r0, [ip]
    66c8:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    66cc:	f104 0324 	add.w	r3, r4, #36	; 0x24
    66d0:	aa17      	add	r2, sp, #92	; 0x5c
    66d2:	ca07      	ldmia	r2, {r0, r1, r2}
    66d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    66d8:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    66dc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    66e0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    66e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    66e8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    66ec:	4620      	mov	r0, r4
    66ee:	f7ff fe89 	bl	6404 <ExFatFile::sync()>
    66f2:	2800      	cmp	r0, #0
    66f4:	d0c9      	beq.n	668a <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    66f6:	2300      	movs	r3, #0
    66f8:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    66fa:	2302      	movs	r3, #2
    66fc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    6700:	2308      	movs	r3, #8
    6702:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    6706:	4668      	mov	r0, sp
    6708:	f7ff fd68 	bl	61dc <ExFatFile::remove()>
    670c:	e7bd      	b.n	668a <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    670e:	2000      	movs	r0, #0
    6710:	e7bb      	b.n	668a <ExFatFile::rename(ExFatFile*, char const*)+0x34>

00006712 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6716:	b083      	sub	sp, #12
    6718:	9100      	str	r1, [sp, #0]
    671a:	461e      	mov	r6, r3
    671c:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    6720:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    6724:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    6728:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    672c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6730:	f013 0f08 	tst.w	r3, #8
    6734:	f000 809a 	beq.w	686c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    6738:	4605      	mov	r5, r0
      || year > 2107
    673a:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    673e:	b294      	uxth	r4, r2
    6740:	2c7f      	cmp	r4, #127	; 0x7f
    6742:	f200 8098 	bhi.w	6876 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    6746:	1e73      	subs	r3, r6, #1
    6748:	b2db      	uxtb	r3, r3
    674a:	2b0b      	cmp	r3, #11
    674c:	f200 8095 	bhi.w	687a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    6750:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    6754:	b2db      	uxtb	r3, r3
    6756:	2b1e      	cmp	r3, #30
    6758:	f200 8091 	bhi.w	687e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    675c:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    6760:	bf98      	it	ls
    6762:	f1ba 0f17 	cmpls.w	sl, #23
    6766:	bf8c      	ite	hi
    6768:	2701      	movhi	r7, #1
    676a:	2700      	movls	r7, #0
    676c:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    6770:	bf88      	it	hi
    6772:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    6776:	b10f      	cbz	r7, 677c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    6778:	2700      	movs	r7, #0
    677a:	e078      	b.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    677c:	f7ff fe42 	bl	6404 <ExFatFile::sync()>
    6780:	2800      	cmp	r0, #0
    6782:	d07e      	beq.n	6882 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    6784:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    6788:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    678c:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    678e:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6792:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    6796:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    679a:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    679e:	f019 0901 	ands.w	r9, r9, #1
    67a2:	bf18      	it	ne
    67a4:	f04f 0964 	movne.w	r9, #100	; 0x64
    67a8:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    67aa:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    67ac:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    67ae:	9b00      	ldr	r3, [sp, #0]
    67b0:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    67b4:	4652      	mov	r2, sl
    67b6:	b2f1      	uxtb	r1, r6
    67b8:	4628      	mov	r0, r5
    67ba:	f7ff f81b 	bl	57f4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    67be:	4602      	mov	r2, r0
    67c0:	2800      	cmp	r0, #0
    67c2:	d054      	beq.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    67c4:	7803      	ldrb	r3, [r0, #0]
    67c6:	2b85      	cmp	r3, #133	; 0x85
    67c8:	d02b      	beq.n	6822 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    67ca:	3340      	adds	r3, #64	; 0x40
    67cc:	b2db      	uxtb	r3, r3
    67ce:	2b01      	cmp	r3, #1
    67d0:	d84d      	bhi.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    67d2:	9901      	ldr	r1, [sp, #4]
    67d4:	4610      	mov	r0, r2
    67d6:	f7ff fc93 	bl	6100 <exFatDirChecksum(unsigned char const*, unsigned short)>
    67da:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    67dc:	3601      	adds	r6, #1
    67de:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    67e2:	b2f3      	uxtb	r3, r6
    67e4:	429a      	cmp	r2, r3
    67e6:	d2e5      	bcs.n	67b4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    67e8:	2201      	movs	r2, #1
    67ea:	f105 0124 	add.w	r1, r5, #36	; 0x24
    67ee:	6a28      	ldr	r0, [r5, #32]
    67f0:	f000 feb1 	bl	7556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    67f4:	2800      	cmp	r0, #0
    67f6:	d03a      	beq.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    67f8:	9a01      	ldr	r2, [sp, #4]
    67fa:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    67fc:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    67fe:	4620      	mov	r0, r4
    6800:	f005 fa6a 	bl	bcd8 <FsCache::sync()>
    6804:	4607      	mov	r7, r0
    6806:	b390      	cbz	r0, 686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6808:	f504 7004 	add.w	r0, r4, #528	; 0x210
    680c:	f005 fa64 	bl	bcd8 <FsCache::sync()>
    6810:	4607      	mov	r7, r0
    6812:	b360      	cbz	r0, 686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    6814:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    6818:	6803      	ldr	r3, [r0, #0]
    681a:	6a1b      	ldr	r3, [r3, #32]
    681c:	4798      	blx	r3
    681e:	4607      	mov	r7, r0
    6820:	e025      	b.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6822:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6826:	f003 0337 	and.w	r3, r3, #55	; 0x37
    682a:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    682c:	6a29      	ldr	r1, [r5, #32]
    682e:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    6832:	f043 0301 	orr.w	r3, r3, #1
    6836:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    683a:	f1b8 0f00 	cmp.w	r8, #0
    683e:	d002      	beq.n	6846 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    6840:	f8a0 b010 	strh.w	fp, [r0, #16]
    6844:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    6846:	9b00      	ldr	r3, [sp, #0]
    6848:	f013 0f02 	tst.w	r3, #2
    684c:	d004      	beq.n	6858 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    684e:	f882 9014 	strb.w	r9, [r2, #20]
    6852:	f8a2 b008 	strh.w	fp, [r2, #8]
    6856:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    6858:	9b00      	ldr	r3, [sp, #0]
    685a:	f013 0f04 	tst.w	r3, #4
    685e:	d0b8      	beq.n	67d2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    6860:	f882 9015 	strb.w	r9, [r2, #21]
    6864:	f8a2 b00c 	strh.w	fp, [r2, #12]
    6868:	81d4      	strh	r4, [r2, #14]
}
    686a:	e7b2      	b.n	67d2 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    686c:	2700      	movs	r7, #0
}
    686e:	4638      	mov	r0, r7
    6870:	b003      	add	sp, #12
    6872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    6876:	2700      	movs	r7, #0
    6878:	e7f9      	b.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    687a:	2700      	movs	r7, #0
    687c:	e7f7      	b.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    687e:	2700      	movs	r7, #0
    6880:	e7f5      	b.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6882:	4607      	mov	r7, r0
    6884:	e7f3      	b.n	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

00006886 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6886:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    688a:	f013 0f02 	tst.w	r3, #2
    688e:	d066      	beq.n	695e <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    6890:	b530      	push	{r4, r5, lr}
    6892:	b083      	sub	sp, #12
    6894:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6896:	69c5      	ldr	r5, [r0, #28]
    6898:	2d00      	cmp	r5, #0
    689a:	d062      	beq.n	6962 <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    689c:	f013 0f40 	tst.w	r3, #64	; 0x40
    68a0:	d03b      	beq.n	691a <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    68a2:	6a00      	ldr	r0, [r0, #32]
    68a4:	68a2      	ldr	r2, [r4, #8]
    68a6:	68e1      	ldr	r1, [r4, #12]
    68a8:	3a01      	subs	r2, #1
    68aa:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    68ae:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    68b2:	3309      	adds	r3, #9
    68b4:	b2db      	uxtb	r3, r3
    68b6:	f1c3 0e20 	rsb	lr, r3, #32
    68ba:	f1a3 0c20 	sub.w	ip, r3, #32
    68be:	40da      	lsrs	r2, r3
    68c0:	fa01 fe0e 	lsl.w	lr, r1, lr
    68c4:	ea42 020e 	orr.w	r2, r2, lr
    68c8:	fa21 fc0c 	lsr.w	ip, r1, ip
    68cc:	ea42 020c 	orr.w	r2, r2, ip
    68d0:	3201      	adds	r2, #1
    if (m_curCluster) {
    68d2:	69a3      	ldr	r3, [r4, #24]
    68d4:	b1b3      	cbz	r3, 6904 <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    68d6:	1c59      	adds	r1, r3, #1
    68d8:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    68da:	3d01      	subs	r5, #1
    68dc:	1aed      	subs	r5, r5, r3
    68de:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    68e0:	b9a2      	cbnz	r2, 690c <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    68e2:	e9d4 2300 	ldrd	r2, r3, [r4]
    68e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    68ea:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68ee:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    68f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    68f6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    68fa:	4620      	mov	r0, r4
    68fc:	f7ff fd82 	bl	6404 <ExFatFile::sync()>

 fail:
  return false;
}
    6900:	b003      	add	sp, #12
    6902:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    6904:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6906:	2300      	movs	r3, #0
    6908:	61e3      	str	r3, [r4, #28]
    690a:	e7e9      	b.n	68e0 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    690c:	2300      	movs	r3, #0
    690e:	9901      	ldr	r1, [sp, #4]
    6910:	f000 fdb9 	bl	7486 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6914:	2800      	cmp	r0, #0
    6916:	d1e4      	bne.n	68e2 <ExFatFile::truncate()+0x5c>
    6918:	e7f2      	b.n	6900 <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    691a:	6981      	ldr	r1, [r0, #24]
    691c:	b949      	cbnz	r1, 6932 <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    691e:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6920:	2300      	movs	r3, #0
    6922:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    6924:	4629      	mov	r1, r5
    6926:	6a20      	ldr	r0, [r4, #32]
    6928:	f000 feb1 	bl	768e <ExFatPartition::freeChain(unsigned long)>
    692c:	2800      	cmp	r0, #0
    692e:	d1d8      	bne.n	68e2 <ExFatFile::truncate()+0x5c>
    6930:	e7e6      	b.n	6900 <ExFatFile::truncate()+0x7a>
      toFree = 0;
    6932:	2300      	movs	r3, #0
    6934:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6936:	aa01      	add	r2, sp, #4
    6938:	6a00      	ldr	r0, [r0, #32]
    693a:	f000 fe29 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    693e:	2800      	cmp	r0, #0
    6940:	db11      	blt.n	6966 <ExFatFile::truncate()+0xe0>
      if (fg) {
    6942:	b918      	cbnz	r0, 694c <ExFatFile::truncate()+0xc6>
    if (toFree) {
    6944:	9d01      	ldr	r5, [sp, #4]
    6946:	2d00      	cmp	r5, #0
    6948:	d0cb      	beq.n	68e2 <ExFatFile::truncate()+0x5c>
    694a:	e7eb      	b.n	6924 <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    694c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6950:	69a1      	ldr	r1, [r4, #24]
    6952:	6a20      	ldr	r0, [r4, #32]
    6954:	f000 fe7b 	bl	764e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6958:	2800      	cmp	r0, #0
    695a:	d1f3      	bne.n	6944 <ExFatFile::truncate()+0xbe>
    695c:	e7d0      	b.n	6900 <ExFatFile::truncate()+0x7a>
  return false;
    695e:	2000      	movs	r0, #0
}
    6960:	4770      	bx	lr
      return true;
    6962:	2001      	movs	r0, #1
    6964:	e7cc      	b.n	6900 <ExFatFile::truncate()+0x7a>
  return false;
    6966:	2000      	movs	r0, #0
    6968:	e7ca      	b.n	6900 <ExFatFile::truncate()+0x7a>
	...

0000696c <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6970:	b083      	sub	sp, #12
    6972:	4604      	mov	r4, r0
    6974:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6978:	f013 0f02 	tst.w	r3, #2
    697c:	d014      	beq.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
    697e:	4688      	mov	r8, r1
    6980:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6982:	f013 0f08 	tst.w	r3, #8
    6986:	d109      	bne.n	699c <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    6988:	f1bb 0f00 	cmp.w	fp, #0
    698c:	f000 80ed 	beq.w	6b6a <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6990:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6992:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6996:	f04f 0901 	mov.w	r9, #1
    699a:	e085      	b.n	6aa8 <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    699c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    69a0:	f7ff f8bb 	bl	5b1a <ExFatFile::seekSet(unsigned long long)>
    69a4:	2800      	cmp	r0, #0
    69a6:	d1ef      	bne.n	6988 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    69a8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    69ac:	f043 0301 	orr.w	r3, r3, #1
    69b0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    69b4:	2000      	movs	r0, #0
}
    69b6:	b003      	add	sp, #12
    69b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    69bc:	4652      	mov	r2, sl
    69be:	f000 fde7 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    69c2:	2800      	cmp	r0, #0
    69c4:	dbf0      	blt.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    69c6:	b938      	cbnz	r0, 69d8 <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    69c8:	4620      	mov	r0, r4
    69ca:	f7ff fbb7 	bl	613c <ExFatFile::addCluster()>
    69ce:	b918      	cbnz	r0, 69d8 <ExFatFile::write(void const*, unsigned int)+0x6c>
    69d0:	e7ea      	b.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    69d2:	69e3      	ldr	r3, [r4, #28]
    69d4:	b323      	cbz	r3, 6a20 <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    69d6:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    69d8:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    69da:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    69de:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    69e2:	69a1      	ldr	r1, [r4, #24]
    69e4:	3902      	subs	r1, #2
    69e6:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    69e8:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    69ec:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    69f0:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    69f2:	b916      	cbnz	r6, 69fa <ExFatFile::write(void const*, unsigned int)+0x8e>
    69f4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    69f8:	d21a      	bcs.n	6a30 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    69fa:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    69fe:	42bd      	cmp	r5, r7
    6a00:	bf28      	it	cs
    6a02:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6a04:	bb3e      	cbnz	r6, 6a56 <ExFatFile::write(void const*, unsigned int)+0xea>
    6a06:	6862      	ldr	r2, [r4, #4]
    6a08:	9200      	str	r2, [sp, #0]
    6a0a:	6963      	ldr	r3, [r4, #20]
    6a0c:	9301      	str	r3, [sp, #4]
    6a0e:	6823      	ldr	r3, [r4, #0]
    6a10:	6922      	ldr	r2, [r4, #16]
    6a12:	4293      	cmp	r3, r2
    6a14:	9a00      	ldr	r2, [sp, #0]
    6a16:	9b01      	ldr	r3, [sp, #4]
    6a18:	419a      	sbcs	r2, r3
    6a1a:	d375      	bcc.n	6b08 <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6a1c:	2205      	movs	r2, #5
    6a1e:	e01b      	b.n	6a58 <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    6a20:	4620      	mov	r0, r4
    6a22:	f7ff fb8b 	bl	613c <ExFatFile::addCluster()>
    6a26:	2800      	cmp	r0, #0
    6a28:	d0be      	beq.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    6a2a:	69a3      	ldr	r3, [r4, #24]
    6a2c:	61e3      	str	r3, [r4, #28]
    6a2e:	e7d3      	b.n	69d8 <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6a30:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    6a34:	d271      	bcs.n	6b1a <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    6a36:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    6a3a:	4299      	cmp	r1, r3
    6a3c:	f000 808d 	beq.w	6b5a <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    6a40:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6a44:	6803      	ldr	r3, [r0, #0]
    6a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a48:	4642      	mov	r2, r8
    6a4a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a4c:	2800      	cmp	r0, #0
    6a4e:	d0ab      	beq.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    6a50:	f44f 7500 	mov.w	r5, #512	; 0x200
    6a54:	e010      	b.n	6a78 <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a56:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    6a58:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6a5c:	f005 f963 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6a60:	2800      	cmp	r0, #0
    6a62:	d0a1      	beq.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    6a64:	462a      	mov	r2, r5
    6a66:	4641      	mov	r1, r8
    6a68:	4430      	add	r0, r6
    6a6a:	f006 fc57 	bl	d31c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6a6e:	6a20      	ldr	r0, [r4, #32]
    6a70:	442e      	add	r6, r5
    6a72:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6a76:	d049      	beq.n	6b0c <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    6a78:	6823      	ldr	r3, [r4, #0]
    6a7a:	6862      	ldr	r2, [r4, #4]
    6a7c:	18eb      	adds	r3, r5, r3
    6a7e:	f142 0200 	adc.w	r2, r2, #0
    6a82:	6023      	str	r3, [r4, #0]
    6a84:	6062      	str	r2, [r4, #4]
    src += n;
    6a86:	44a8      	add	r8, r5
    toWrite -= n;
    6a88:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    6a8a:	6920      	ldr	r0, [r4, #16]
    6a8c:	6961      	ldr	r1, [r4, #20]
    6a8e:	4298      	cmp	r0, r3
    6a90:	4191      	sbcs	r1, r2
    6a92:	d207      	bcs.n	6aa4 <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6a94:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    6a98:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6a9c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6aa0:	6123      	str	r3, [r4, #16]
    6aa2:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    6aa4:	2f00      	cmp	r7, #0
    6aa6:	d060      	beq.n	6b6a <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6aa8:	6a20      	ldr	r0, [r4, #32]
    6aaa:	6825      	ldr	r5, [r4, #0]
    6aac:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6ab0:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6ab2:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6ab6:	2d00      	cmp	r5, #0
    6ab8:	d18e      	bne.n	69d8 <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    6aba:	69a1      	ldr	r1, [r4, #24]
    6abc:	2900      	cmp	r1, #0
    6abe:	d088      	beq.n	69d2 <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    6ac0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6ac4:	f013 0f40 	tst.w	r3, #64	; 0x40
    6ac8:	f43f af78 	beq.w	69bc <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6acc:	68a3      	ldr	r3, [r4, #8]
    6ace:	68e2      	ldr	r2, [r4, #12]
    6ad0:	3b01      	subs	r3, #1
    6ad2:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6ad6:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    6ada:	3009      	adds	r0, #9
    6adc:	b2c0      	uxtb	r0, r0
    6ade:	f1c0 0e20 	rsb	lr, r0, #32
    6ae2:	f1a0 0c20 	sub.w	ip, r0, #32
    6ae6:	40c3      	lsrs	r3, r0
    6ae8:	fa02 fe0e 	lsl.w	lr, r2, lr
    6aec:	ea43 030e 	orr.w	r3, r3, lr
    6af0:	fa22 fc0c 	lsr.w	ip, r2, ip
    6af4:	ea43 030c 	orr.w	r3, r3, ip
    6af8:	69e2      	ldr	r2, [r4, #28]
    6afa:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    6afc:	4299      	cmp	r1, r3
    6afe:	f4bf af63 	bcs.w	69c8 <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    6b02:	3101      	adds	r1, #1
    6b04:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    6b06:	e767      	b.n	69d8 <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6b08:	464a      	mov	r2, r9
    6b0a:	e7a5      	b.n	6a58 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    6b0c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6b10:	f005 f8e2 	bl	bcd8 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    6b14:	2800      	cmp	r0, #0
    6b16:	d1af      	bne.n	6a78 <ExFatFile::write(void const*, unsigned int)+0x10c>
    6b18:	e746      	b.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6b1a:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6b1e:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6b22:	0a7a      	lsrs	r2, r7, #9
    6b24:	4293      	cmp	r3, r2
    6b26:	bf28      	it	cs
    6b28:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    6b2a:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    6b2c:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    6b30:	4291      	cmp	r1, r2
    6b32:	d809      	bhi.n	6b48 <ExFatFile::write(void const*, unsigned int)+0x1dc>
    6b34:	18ce      	adds	r6, r1, r3
    6b36:	42b2      	cmp	r2, r6
    6b38:	d206      	bcs.n	6b48 <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    6b3a:	2200      	movs	r2, #0
    6b3c:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b44:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6b48:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6b4c:	6802      	ldr	r2, [r0, #0]
    6b4e:	6a96      	ldr	r6, [r2, #40]	; 0x28
    6b50:	4642      	mov	r2, r8
    6b52:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6b54:	2800      	cmp	r0, #0
    6b56:	d18f      	bne.n	6a78 <ExFatFile::write(void const*, unsigned int)+0x10c>
    6b58:	e726      	b.n	69a8 <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    6b5a:	2300      	movs	r3, #0
    6b5c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b64:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    6b68:	e76a      	b.n	6a40 <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    6b6a:	6821      	ldr	r1, [r4, #0]
    6b6c:	6862      	ldr	r2, [r4, #4]
    6b6e:	68a0      	ldr	r0, [r4, #8]
    6b70:	68e3      	ldr	r3, [r4, #12]
    6b72:	4288      	cmp	r0, r1
    6b74:	4193      	sbcs	r3, r2
    6b76:	d209      	bcs.n	6b8c <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    6b78:	60a1      	str	r1, [r4, #8]
    6b7a:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6b7c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6b80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b84:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6b88:	4658      	mov	r0, fp
    6b8a:	e714      	b.n	69b6 <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    6b8c:	4b06      	ldr	r3, [pc, #24]	; (6ba8 <ExFatFile::write(void const*, unsigned int)+0x23c>)
    6b8e:	681b      	ldr	r3, [r3, #0]
    6b90:	b13b      	cbz	r3, 6ba2 <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6b92:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b9a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6b9e:	4658      	mov	r0, fp
    6ba0:	e709      	b.n	69b6 <ExFatFile::write(void const*, unsigned int)+0x4a>
    6ba2:	4658      	mov	r0, fp
    6ba4:	e707      	b.n	69b6 <ExFatFile::write(void const*, unsigned int)+0x4a>
    6ba6:	bf00      	nop
    6ba8:	20004c5c 	.word	0x20004c5c

00006bac <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6bac:	b161      	cbz	r1, 6bc8 <Print::write(char const*)+0x1c>
    6bae:	b538      	push	{r3, r4, r5, lr}
    6bb0:	4604      	mov	r4, r0
    6bb2:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    6bb4:	4608      	mov	r0, r1
    6bb6:	f00b faa3 	bl	12100 <strlen>
    6bba:	4602      	mov	r2, r0
    6bbc:	6823      	ldr	r3, [r4, #0]
    6bbe:	685b      	ldr	r3, [r3, #4]
    6bc0:	4629      	mov	r1, r5
    6bc2:	4620      	mov	r0, r4
    6bc4:	4798      	blx	r3
    6bc6:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6bc8:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    6bca:	4770      	bx	lr

00006bcc <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    6bcc:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6bce:	6883      	ldr	r3, [r0, #8]
    6bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6bd4:	b173      	cbz	r3, 6bf4 <ExFatFormatter::syncUpcase()+0x28>
    6bd6:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    6bd8:	2000      	movs	r0, #0
    6bda:	690a      	ldr	r2, [r1, #16]
    6bdc:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    6bde:	3301      	adds	r3, #1
    6be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6be4:	d3f9      	bcc.n	6bda <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6be6:	68c8      	ldr	r0, [r1, #12]
    6be8:	6803      	ldr	r3, [r0, #0]
    6bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bec:	690a      	ldr	r2, [r1, #16]
    6bee:	6809      	ldr	r1, [r1, #0]
    6bf0:	4798      	blx	r3
}
    6bf2:	bd08      	pop	{r3, pc}
    return true;
    6bf4:	2001      	movs	r0, #1
    6bf6:	e7fc      	b.n	6bf2 <ExFatFormatter::syncUpcase()+0x26>

00006bf8 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6bf8:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6bfa:	6882      	ldr	r2, [r0, #8]
    6bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    6c00:	6900      	ldr	r0, [r0, #16]
    6c02:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    6c04:	6858      	ldr	r0, [r3, #4]
    6c06:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    6c0a:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    6c0c:	6899      	ldr	r1, [r3, #8]
    6c0e:	3101      	adds	r1, #1
    6c10:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    6c12:	f240 11ff 	movw	r1, #511	; 0x1ff
    6c16:	428a      	cmp	r2, r1
    6c18:	d001      	beq.n	6c1e <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    6c1a:	2001      	movs	r0, #1
}
    6c1c:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6c1e:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6c20:	68d8      	ldr	r0, [r3, #12]
    6c22:	6802      	ldr	r2, [r0, #0]
    6c24:	6a54      	ldr	r4, [r2, #36]	; 0x24
    6c26:	6819      	ldr	r1, [r3, #0]
    6c28:	1c4a      	adds	r2, r1, #1
    6c2a:	601a      	str	r2, [r3, #0]
    6c2c:	691a      	ldr	r2, [r3, #16]
    6c2e:	47a0      	blx	r4
}
    6c30:	bd10      	pop	{r4, pc}

00006c32 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    6c32:	b538      	push	{r3, r4, r5, lr}
    6c34:	4605      	mov	r5, r0
    6c36:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6c38:	b2c9      	uxtb	r1, r1
    6c3a:	f7ff ffdd 	bl	6bf8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6c3e:	b900      	cbnz	r0, 6c42 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    6c40:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6c42:	0a21      	lsrs	r1, r4, #8
    6c44:	4628      	mov	r0, r5
    6c46:	f7ff ffd7 	bl	6bf8 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6c4a:	e7f9      	b.n	6c40 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

00006c4c <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    6c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c50:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    6c52:	2500      	movs	r5, #0
    6c54:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    6c56:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    6c58:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6c5a:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6c5e:	e022      	b.n	6ca6 <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    6c60:	1c6c      	adds	r4, r5, #1
    6c62:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6c66:	d208      	bcs.n	6c7a <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6c68:	b2a0      	uxth	r0, r4
    6c6a:	f005 f9b9 	bl	bfe0 <toUpcase(unsigned short)>
    6c6e:	42a0      	cmp	r0, r4
    6c70:	d103      	bne.n	6c7a <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6c72:	3401      	adds	r4, #1
    6c74:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6c78:	d1f6      	bne.n	6c68 <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    6c7a:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    6c7e:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6c82:	d31d      	bcc.n	6cc0 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6c84:	4639      	mov	r1, r7
    6c86:	4630      	mov	r0, r6
    6c88:	f7ff ffd3 	bl	6c32 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6c8c:	4603      	mov	r3, r0
    6c8e:	b308      	cbz	r0, 6cd4 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6c90:	fa1f f188 	uxth.w	r1, r8
    6c94:	4630      	mov	r0, r6
    6c96:	f7ff ffcc 	bl	6c32 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6c9a:	4603      	mov	r3, r0
    6c9c:	b1d0      	cbz	r0, 6cd4 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6c9e:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6ca0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6ca4:	d219      	bcs.n	6cda <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    6ca6:	b2a8      	uxth	r0, r5
    6ca8:	f005 f99a 	bl	bfe0 <toUpcase(unsigned short)>
    6cac:	4601      	mov	r1, r0
    if (uc != ch) {
    6cae:	42a8      	cmp	r0, r5
    6cb0:	d0d6      	beq.n	6c60 <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    6cb2:	4630      	mov	r0, r6
    6cb4:	f7ff ffbd 	bl	6c32 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6cb8:	4603      	mov	r3, r0
    6cba:	b158      	cbz	r0, 6cd4 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    6cbc:	3501      	adds	r5, #1
    6cbe:	e7ef      	b.n	6ca0 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    6cc0:	42a5      	cmp	r5, r4
    6cc2:	d2ed      	bcs.n	6ca0 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    6cc4:	b2a9      	uxth	r1, r5
    6cc6:	4630      	mov	r0, r6
    6cc8:	f7ff ffb3 	bl	6c32 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6ccc:	3501      	adds	r5, #1
    6cce:	4603      	mov	r3, r0
    6cd0:	2800      	cmp	r0, #0
    6cd2:	d1f5      	bne.n	6cc0 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    6cd4:	4618      	mov	r0, r3
    6cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    6cda:	4630      	mov	r0, r6
    6cdc:	f7ff ff76 	bl	6bcc <ExFatFormatter::syncUpcase()>
    6ce0:	4603      	mov	r3, r0
    6ce2:	e7f7      	b.n	6cd4 <ExFatFormatter::writeUpcase(unsigned long)+0x88>

00006ce4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ce8:	b08b      	sub	sp, #44	; 0x2c
    6cea:	9002      	str	r0, [sp, #8]
    6cec:	460e      	mov	r6, r1
    6cee:	4614      	mov	r4, r2
    6cf0:	4699      	mov	r9, r3
  m_dev = dev;
    6cf2:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    6cf4:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    6cf6:	680b      	ldr	r3, [r1, #0]
    6cf8:	69db      	ldr	r3, [r3, #28]
    6cfa:	4608      	mov	r0, r1
    6cfc:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    6cfe:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    6d02:	d369      	bcc.n	6dd8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    6d04:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    6d06:	2300      	movs	r3, #0
    6d08:	2201      	movs	r2, #1
    6d0a:	3301      	adds	r3, #1
    6d0c:	b2db      	uxtb	r3, r3
    6d0e:	0052      	lsls	r2, r2, #1
    6d10:	bf14      	ite	ne
    6d12:	2501      	movne	r5, #1
    6d14:	2500      	moveq	r5, #0
    6d16:	4297      	cmp	r7, r2
    6d18:	bf94      	ite	ls
    6d1a:	2500      	movls	r5, #0
    6d1c:	f005 0501 	andhi.w	r5, r5, #1
    6d20:	2d00      	cmp	r5, #0
    6d22:	d1f2      	bne.n	6d0a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6d24:	2b1c      	cmp	r3, #28
    6d26:	d963      	bls.n	6df0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    6d28:	f1b3 0b0b 	subs.w	fp, r3, #11
    6d2c:	bf48      	it	mi
    6d2e:	f10b 0b01 	addmi.w	fp, fp, #1
    6d32:	ea4f 016b 	mov.w	r1, fp, asr #1
    6d36:	9101      	str	r1, [sp, #4]
    6d38:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6d3c:	2201      	movs	r2, #1
    6d3e:	408a      	lsls	r2, r1
    6d40:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6d42:	3301      	adds	r3, #1
    6d44:	105b      	asrs	r3, r3, #1
    6d46:	f04f 0a01 	mov.w	sl, #1
    6d4a:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    6d4e:	ea4f 034a 	mov.w	r3, sl, lsl #1
    6d52:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    6d54:	ea4f 028a 	mov.w	r2, sl, lsl #2
    6d58:	9205      	str	r2, [sp, #20]
    6d5a:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    6d5e:	9901      	ldr	r1, [sp, #4]
    6d60:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    6d64:	9203      	str	r2, [sp, #12]
    6d66:	fa02 f801 	lsl.w	r8, r2, r1
    6d6a:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d72:	2100      	movs	r1, #0
    6d74:	4620      	mov	r0, r4
    6d76:	f00a fb99 	bl	114ac <memset>
  mbr->part->beginCHS[0] = 1;
    6d7a:	2301      	movs	r3, #1
    6d7c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    6d80:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    6d84:	2307      	movs	r3, #7
    6d86:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    6d8a:	23fe      	movs	r3, #254	; 0xfe
    6d8c:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    6d90:	23ff      	movs	r3, #255	; 0xff
    6d92:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    6d96:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    6d9a:	9b00      	ldr	r3, [sp, #0]
    6d9c:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    6da0:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    6da4:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6da8:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    6dac:	6833      	ldr	r3, [r6, #0]
    6dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6db0:	4622      	mov	r2, r4
    6db2:	2100      	movs	r1, #0
    6db4:	4630      	mov	r0, r6
    6db6:	4798      	blx	r3
    6db8:	bb70      	cbnz	r0, 6e18 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    6dba:	f1b9 0f00 	cmp.w	r9, #0
    6dbe:	d007      	beq.n	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6dc0:	f8d9 3000 	ldr.w	r3, [r9]
    6dc4:	685b      	ldr	r3, [r3, #4]
    6dc6:	220f      	movs	r2, #15
    6dc8:	49af      	ldr	r1, [pc, #700]	; (7088 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    6dca:	4648      	mov	r0, r9
    6dcc:	4798      	blx	r3
  return false;
    6dce:	2500      	movs	r5, #0
}
    6dd0:	4628      	mov	r0, r5
    6dd2:	b00b      	add	sp, #44	; 0x2c
    6dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    6dd8:	f1b9 0f00 	cmp.w	r9, #0
    6ddc:	f000 8207 	beq.w	71ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    6de0:	f8d9 3000 	ldr.w	r3, [r9]
    6de4:	685b      	ldr	r3, [r3, #4]
    6de6:	2215      	movs	r2, #21
    6de8:	49a8      	ldr	r1, [pc, #672]	; (708c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    6dea:	4648      	mov	r0, r9
    6dec:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    6dee:	e7e7      	b.n	6dc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6df0:	2b1a      	cmp	r3, #26
    6df2:	d809      	bhi.n	6e08 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6df4:	f44f 7380 	mov.w	r3, #256	; 0x100
    6df8:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6dfa:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6dfe:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6e02:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    6e06:	e7a2      	b.n	6d4e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6e08:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e0c:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6e0e:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6e12:	f8cd b004 	str.w	fp, [sp, #4]
    6e16:	e794      	b.n	6d42 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6e18:	f44f 7200 	mov.w	r2, #512	; 0x200
    6e1c:	2100      	movs	r1, #0
    6e1e:	4620      	mov	r0, r4
    6e20:	f00a fb44 	bl	114ac <memset>
  pbs->jmpInstruction[0] = 0XEB;
    6e24:	23eb      	movs	r3, #235	; 0xeb
    6e26:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    6e28:	2376      	movs	r3, #118	; 0x76
    6e2a:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    6e2c:	2390      	movs	r3, #144	; 0x90
    6e2e:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    6e30:	2345      	movs	r3, #69	; 0x45
    6e32:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    6e34:	2358      	movs	r3, #88	; 0x58
    6e36:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    6e38:	2346      	movs	r3, #70	; 0x46
    6e3a:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    6e3c:	2341      	movs	r3, #65	; 0x41
    6e3e:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    6e40:	2354      	movs	r3, #84	; 0x54
    6e42:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    6e44:	2320      	movs	r3, #32
    6e46:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    6e48:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    6e4a:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    6e4c:	9b00      	ldr	r3, [sp, #0]
    6e4e:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    6e50:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e54:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    6e58:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    6e5c:	65a3      	str	r3, [r4, #88]	; 0x58
    6e5e:	9a03      	ldr	r2, [sp, #12]
    6e60:	65e2      	str	r2, [r4, #92]	; 0x5c
    6e62:	2304      	movs	r3, #4
    6e64:	6623      	str	r3, [r4, #96]	; 0x60
    6e66:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    6e68:	f44f 7380 	mov.w	r3, #256	; 0x100
    6e6c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    6e70:	2309      	movs	r3, #9
    6e72:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    6e76:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    6e7a:	2301      	movs	r3, #1
    6e7c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    6e80:	2380      	movs	r3, #128	; 0x80
    6e82:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6e86:	f104 0377 	add.w	r3, r4, #119	; 0x77
    6e8a:	9407      	str	r4, [sp, #28]
    6e8c:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    6e90:	22f4      	movs	r2, #244	; 0xf4
    6e92:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6e96:	428b      	cmp	r3, r1
    6e98:	d1fb      	bne.n	6e92 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    6e9a:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6e9e:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6ea2:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    6ea4:	461f      	mov	r7, r3
    6ea6:	e003      	b.n	6eb0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6ea8:	3301      	adds	r3, #1
    6eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6eae:	d009      	beq.n	6ec4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    6eb0:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    6eb4:	2a01      	cmp	r2, #1
    6eb6:	d9f7      	bls.n	6ea8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    6eb8:	2b70      	cmp	r3, #112	; 0x70
    6eba:	d0f5      	beq.n	6ea8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    6ebc:	5ce2      	ldrb	r2, [r4, r3]
    6ebe:	eb02 0777 	add.w	r7, r2, r7, ror #1
    6ec2:	e7f1      	b.n	6ea8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    6ec4:	6833      	ldr	r3, [r6, #0]
    6ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ec8:	4622      	mov	r2, r4
    6eca:	f8dd 8000 	ldr.w	r8, [sp]
    6ece:	4641      	mov	r1, r8
    6ed0:	4630      	mov	r0, r6
    6ed2:	4798      	blx	r3
    6ed4:	2800      	cmp	r0, #0
    6ed6:	f43f af70 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6eda:	6833      	ldr	r3, [r6, #0]
    6edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ede:	4622      	mov	r2, r4
    6ee0:	f8cd 8000 	str.w	r8, [sp]
    6ee4:	4641      	mov	r1, r8
    6ee6:	310c      	adds	r1, #12
    6ee8:	4630      	mov	r0, r6
    6eea:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6eec:	2800      	cmp	r0, #0
    6eee:	f43f af64 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    6ef2:	9900      	ldr	r1, [sp, #0]
    6ef4:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
    6efc:	2100      	movs	r1, #0
    6efe:	4620      	mov	r0, r4
    6f00:	f00a fad4 	bl	114ac <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6f04:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6f08:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    6f0c:	9900      	ldr	r1, [sp, #0]
    6f0e:	f101 0309 	add.w	r3, r1, #9
    6f12:	1e62      	subs	r2, r4, #1
    6f14:	9206      	str	r2, [sp, #24]
    6f16:	9a07      	ldr	r2, [sp, #28]
    6f18:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    6f1c:	9508      	str	r5, [sp, #32]
    6f1e:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    6f20:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    6f22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6f26:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6f2a:	4543      	cmp	r3, r8
    6f2c:	d1f9      	bne.n	6f22 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    6f2e:	6833      	ldr	r3, [r6, #0]
    6f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f32:	4622      	mov	r2, r4
    6f34:	4659      	mov	r1, fp
    6f36:	4630      	mov	r0, r6
    6f38:	4798      	blx	r3
    6f3a:	2800      	cmp	r0, #0
    6f3c:	f000 814f 	beq.w	71de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6f40:	6833      	ldr	r3, [r6, #0]
    6f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f44:	4622      	mov	r2, r4
    6f46:	f10b 010c 	add.w	r1, fp, #12
    6f4a:	4630      	mov	r0, r6
    6f4c:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6f4e:	2800      	cmp	r0, #0
    6f50:	f000 8147 	beq.w	71e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    6f54:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    6f58:	42ab      	cmp	r3, r5
    6f5a:	d001      	beq.n	6f60 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    6f5c:	469b      	mov	fp, r3
    6f5e:	e7df      	b.n	6f20 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6f60:	9309      	str	r3, [sp, #36]	; 0x24
    6f62:	9d08      	ldr	r5, [sp, #32]
    6f64:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f68:	2100      	movs	r1, #0
    6f6a:	4620      	mov	r0, r4
    6f6c:	f00a fa9e 	bl	114ac <memset>
  for (int j = 0; j < 2; j++) {
    6f70:	f10b 0b03 	add.w	fp, fp, #3
    6f74:	9508      	str	r5, [sp, #32]
    6f76:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    6f78:	9b06      	ldr	r3, [sp, #24]
    6f7a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6f7e:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6f82:	4598      	cmp	r8, r3
    6f84:	d1f9      	bne.n	6f7a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    6f86:	6833      	ldr	r3, [r6, #0]
    6f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f8a:	4622      	mov	r2, r4
    6f8c:	4629      	mov	r1, r5
    6f8e:	4630      	mov	r0, r6
    6f90:	4798      	blx	r3
    6f92:	2800      	cmp	r0, #0
    6f94:	f000 8127 	beq.w	71e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6f98:	6833      	ldr	r3, [r6, #0]
    6f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f9c:	4622      	mov	r2, r4
    6f9e:	f105 010c 	add.w	r1, r5, #12
    6fa2:	4630      	mov	r0, r6
    6fa4:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6fa6:	2800      	cmp	r0, #0
    6fa8:	f000 811f 	beq.w	71ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    6fac:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    6fae:	458b      	cmp	fp, r1
    6fb0:	d001      	beq.n	6fb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    6fb2:	460d      	mov	r5, r1
    6fb4:	e7e0      	b.n	6f78 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    6fb6:	9509      	str	r5, [sp, #36]	; 0x24
    6fb8:	9d08      	ldr	r5, [sp, #32]
    6fba:	1f23      	subs	r3, r4, #4
    6fbc:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6fc0:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    6fc4:	429a      	cmp	r2, r3
    6fc6:	d1fb      	bne.n	6fc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    6fc8:	6833      	ldr	r3, [r6, #0]
    6fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fcc:	4622      	mov	r2, r4
    6fce:	4630      	mov	r0, r6
    6fd0:	4798      	blx	r3
    6fd2:	2800      	cmp	r0, #0
    6fd4:	f43f aef1 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6fd8:	6833      	ldr	r3, [r6, #0]
    6fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fdc:	4622      	mov	r2, r4
    6fde:	9909      	ldr	r1, [sp, #36]	; 0x24
    6fe0:	310d      	adds	r1, #13
    6fe2:	4630      	mov	r0, r6
    6fe4:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6fe6:	2800      	cmp	r0, #0
    6fe8:	f43f aee7 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    6fec:	f1b9 0f00 	cmp.w	r9, #0
    6ff0:	d006      	beq.n	7000 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    6ff2:	f8d9 3000 	ldr.w	r3, [r9]
    6ff6:	685b      	ldr	r3, [r3, #4]
    6ff8:	220c      	movs	r2, #12
    6ffa:	4925      	ldr	r1, [pc, #148]	; (7090 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    6ffc:	4648      	mov	r0, r9
    6ffe:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    7000:	9b00      	ldr	r3, [sp, #0]
    7002:	4453      	add	r3, sl
    7004:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    7006:	9b03      	ldr	r3, [sp, #12]
    7008:	ea4f 0883 	mov.w	r8, r3, lsl #2
    700c:	f208 2807 	addw	r8, r8, #519	; 0x207
    7010:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7014:	f44f 7200 	mov.w	r2, #512	; 0x200
    7018:	2100      	movs	r1, #0
    701a:	4620      	mov	r0, r4
    701c:	f00a fa46 	bl	114ac <memset>
  secBuf[0] = 0XF8;
    7020:	4623      	mov	r3, r4
    7022:	22f8      	movs	r2, #248	; 0xf8
    7024:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    7028:	22ff      	movs	r2, #255	; 0xff
    702a:	9907      	ldr	r1, [sp, #28]
    702c:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    7030:	428b      	cmp	r3, r1
    7032:	d1fb      	bne.n	702c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    7034:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    7038:	2700      	movs	r7, #0
    703a:	e00d      	b.n	7058 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    703c:	6833      	ldr	r3, [r6, #0]
    703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7040:	4622      	mov	r2, r4
    7042:	eb0b 0107 	add.w	r1, fp, r7
    7046:	4630      	mov	r0, r6
    7048:	4798      	blx	r3
    704a:	2800      	cmp	r0, #0
    704c:	f43f aeb5 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    7050:	b19f      	cbz	r7, 707a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    7052:	3701      	adds	r7, #1
    7054:	45ba      	cmp	sl, r7
    7056:	d91f      	bls.n	7098 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    7058:	fbb7 f3f8 	udiv	r3, r7, r8
    705c:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    7060:	2b00      	cmp	r3, #0
    7062:	d1eb      	bne.n	703c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    7064:	f1b9 0f00 	cmp.w	r9, #0
    7068:	d0e8      	beq.n	703c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    706a:	f8d9 3000 	ldr.w	r3, [r9]
    706e:	685b      	ldr	r3, [r3, #4]
    7070:	2201      	movs	r2, #1
    7072:	4908      	ldr	r1, [pc, #32]	; (7094 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    7074:	4648      	mov	r0, r9
    7076:	4798      	blx	r3
    7078:	e7e0      	b.n	703c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    707a:	f44f 7200 	mov.w	r2, #512	; 0x200
    707e:	2100      	movs	r1, #0
    7080:	4620      	mov	r0, r4
    7082:	f00a fa13 	bl	114ac <memset>
    7086:	e7e4      	b.n	7052 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    7088:	20002098 	.word	0x20002098
    708c:	20002038 	.word	0x20002038
    7090:	20002050 	.word	0x20002050
    7094:	20002e9c 	.word	0x20002e9c
  writeMsg(pr, "\r\n");
    7098:	f1b9 0f00 	cmp.w	r9, #0
    709c:	f000 80ad 	beq.w	71fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    70a0:	f8d9 3000 	ldr.w	r3, [r9]
    70a4:	685b      	ldr	r3, [r3, #4]
    70a6:	2202      	movs	r2, #2
    70a8:	4969      	ldr	r1, [pc, #420]	; (7250 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    70aa:	4648      	mov	r0, r9
    70ac:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    70ae:	9f03      	ldr	r7, [sp, #12]
    70b0:	3707      	adds	r7, #7
    70b2:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    70b4:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    70b8:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    70bc:	9b04      	ldr	r3, [sp, #16]
    70be:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    70c2:	f4ff ae7d 	bcc.w	6dc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    70c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    70ca:	2100      	movs	r1, #0
    70cc:	4620      	mov	r0, r4
    70ce:	f00a f9ed 	bl	114ac <memset>
  secBuf[0] = 0X7;
    70d2:	2307      	movs	r3, #7
    70d4:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    70d6:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    70da:	d31b      	bcc.n	7114 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    70dc:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    70e0:	46c3      	mov	fp, r8
    70e2:	e005      	b.n	70f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    70e4:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    70e8:	f108 0801 	add.w	r8, r8, #1
    70ec:	45c2      	cmp	sl, r8
    70ee:	d00d      	beq.n	710c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    70f0:	6833      	ldr	r3, [r6, #0]
    70f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70f4:	4622      	mov	r2, r4
    70f6:	9905      	ldr	r1, [sp, #20]
    70f8:	4441      	add	r1, r8
    70fa:	4630      	mov	r0, r6
    70fc:	4798      	blx	r3
    70fe:	2800      	cmp	r0, #0
    7100:	f43f ae5b 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    7104:	f1b8 0f00 	cmp.w	r8, #0
    7108:	d1ee      	bne.n	70e8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
    710a:	e7eb      	b.n	70e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
    710c:	f1b9 0f00 	cmp.w	r9, #0
    7110:	f000 808b 	beq.w	722a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
    7114:	f8d9 3000 	ldr.w	r3, [r9]
    7118:	685b      	ldr	r3, [r3, #4]
    711a:	2216      	movs	r2, #22
    711c:	494d      	ldr	r1, [pc, #308]	; (7254 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
    711e:	4648      	mov	r0, r9
    7120:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    7122:	9b05      	ldr	r3, [sp, #20]
    7124:	9a04      	ldr	r2, [sp, #16]
    7126:	1899      	adds	r1, r3, r2
    7128:	9802      	ldr	r0, [sp, #8]
    712a:	f7ff fd8f 	bl	6c4c <ExFatFormatter::writeUpcase(unsigned long)>
    712e:	2800      	cmp	r0, #0
    7130:	f43f ae46 	beq.w	6dc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    7134:	f44f 7300 	mov.w	r3, #512	; 0x200
    7138:	9a01      	ldr	r2, [sp, #4]
    713a:	4093      	lsls	r3, r2
    713c:	9a02      	ldr	r2, [sp, #8]
    713e:	6892      	ldr	r2, [r2, #8]
    7140:	429a      	cmp	r2, r3
    7142:	f63f ae3d 	bhi.w	6dc0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
    7146:	f1b9 0f00 	cmp.w	r9, #0
    714a:	d003      	beq.n	7154 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    714c:	4942      	ldr	r1, [pc, #264]	; (7258 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
    714e:	4648      	mov	r0, r9
    7150:	f7ff fd2c 	bl	6bac <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    7154:	f04f 0a02 	mov.w	sl, #2
    7158:	9b01      	ldr	r3, [sp, #4]
    715a:	fa0a f803 	lsl.w	r8, sl, r3
    715e:	9b05      	ldr	r3, [sp, #20]
    7160:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7162:	f44f 7200 	mov.w	r2, #512	; 0x200
    7166:	2100      	movs	r1, #0
    7168:	4620      	mov	r0, r4
    716a:	f00a f99f 	bl	114ac <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    716e:	2203      	movs	r2, #3
    7170:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    7172:	2381      	movs	r3, #129	; 0x81
    7174:	f884 3020 	strb.w	r3, [r4, #32]
    7178:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
    717c:	2300      	movs	r3, #0
    717e:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
    7180:	2182      	movs	r1, #130	; 0x82
    7182:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    7186:	9802      	ldr	r0, [sp, #8]
    7188:	6841      	ldr	r1, [r0, #4]
    718a:	6461      	str	r1, [r4, #68]	; 0x44
    718c:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    718e:	6882      	ldr	r2, [r0, #8]
    7190:	65a2      	str	r2, [r4, #88]	; 0x58
    7192:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    7194:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
    7196:	f44f 7a00 	mov.w	sl, #512	; 0x200
    719a:	469b      	mov	fp, r3
    719c:	e005      	b.n	71aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
    719e:	4652      	mov	r2, sl
    71a0:	4659      	mov	r1, fp
    71a2:	4620      	mov	r0, r4
    71a4:	f00a f982 	bl	114ac <memset>
  for (uint32_t i = 0; i < ns; i++) {
    71a8:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    71aa:	6833      	ldr	r3, [r6, #0]
    71ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71ae:	4622      	mov	r2, r4
    71b0:	eb08 0107 	add.w	r1, r8, r7
    71b4:	4630      	mov	r0, r6
    71b6:	4798      	blx	r3
    71b8:	9000      	str	r0, [sp, #0]
    71ba:	2800      	cmp	r0, #0
    71bc:	f43f adfd 	beq.w	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    71c0:	2f00      	cmp	r7, #0
    71c2:	d0ec      	beq.n	719e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    71c4:	3701      	adds	r7, #1
    71c6:	9b04      	ldr	r3, [sp, #16]
    71c8:	42bb      	cmp	r3, r7
    71ca:	d1ee      	bne.n	71aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
    71cc:	f1b9 0f00 	cmp.w	r9, #0
    71d0:	d00f      	beq.n	71f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    71d2:	4922      	ldr	r1, [pc, #136]	; (725c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
    71d4:	4648      	mov	r0, r9
    71d6:	f7ff fce9 	bl	6bac <Print::write(char const*)>
  return true;
    71da:	9d00      	ldr	r5, [sp, #0]
    71dc:	e5f8      	b.n	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    71de:	9d08      	ldr	r5, [sp, #32]
    71e0:	e5eb      	b.n	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    71e2:	9d08      	ldr	r5, [sp, #32]
    71e4:	e5e9      	b.n	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    71e6:	9d08      	ldr	r5, [sp, #32]
    71e8:	e5e7      	b.n	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    71ea:	9d08      	ldr	r5, [sp, #32]
    71ec:	e5e5      	b.n	6dba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
    71ee:	2500      	movs	r5, #0
    71f0:	e5ee      	b.n	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
    71f2:	9d00      	ldr	r5, [sp, #0]
    71f4:	e5ec      	b.n	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
    71f6:	4605      	mov	r5, r0
    71f8:	e5ea      	b.n	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
    71fa:	9f03      	ldr	r7, [sp, #12]
    71fc:	3707      	adds	r7, #7
    71fe:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    7200:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    7204:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    7208:	9b04      	ldr	r3, [sp, #16]
    720a:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    720e:	f4ff addf 	bcc.w	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7212:	f44f 7200 	mov.w	r2, #512	; 0x200
    7216:	2100      	movs	r1, #0
    7218:	4620      	mov	r0, r4
    721a:	f00a f947 	bl	114ac <memset>
  secBuf[0] = 0X7;
    721e:	2307      	movs	r3, #7
    7220:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    7222:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    7226:	f4bf af59 	bcs.w	70dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    722a:	9b05      	ldr	r3, [sp, #20]
    722c:	9a04      	ldr	r2, [sp, #16]
    722e:	1899      	adds	r1, r3, r2
    7230:	9802      	ldr	r0, [sp, #8]
    7232:	f7ff fd0b 	bl	6c4c <ExFatFormatter::writeUpcase(unsigned long)>
    7236:	2800      	cmp	r0, #0
    7238:	d0dd      	beq.n	71f6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    723a:	f44f 7300 	mov.w	r3, #512	; 0x200
    723e:	9a01      	ldr	r2, [sp, #4]
    7240:	4093      	lsls	r3, r2
    7242:	9a02      	ldr	r2, [sp, #8]
    7244:	6892      	ldr	r2, [r2, #8]
    7246:	429a      	cmp	r2, r3
    7248:	f67f af7d 	bls.w	7146 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
    724c:	e5c0      	b.n	6dd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    724e:	bf00      	nop
    7250:	20002074 	.word	0x20002074
    7254:	20002060 	.word	0x20002060
    7258:	20002078 	.word	0x20002078
    725c:	20002088 	.word	0x20002088

00007260 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    7260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7264:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
    7266:	460e      	mov	r6, r1
    7268:	f101 081e 	add.w	r8, r1, #30
    726c:	e00c      	b.n	7288 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    726e:	4620      	mov	r0, r4
    7270:	f004 fd98 	bl	bda4 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    7274:	f004 feb4 	bl	bfe0 <toUpcase(unsigned short)>
    7278:	4605      	mov	r5, r0
    727a:	4638      	mov	r0, r7
    727c:	f004 feb0 	bl	bfe0 <toUpcase(unsigned short)>
    7280:	4285      	cmp	r5, r0
    7282:	d111      	bne.n	72a8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
    7284:	4546      	cmp	r6, r8
    7286:	d00d      	beq.n	72a4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
    7288:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
    728c:	89a3      	ldrh	r3, [r4, #12]
    728e:	2b00      	cmp	r3, #0
    7290:	d1ed      	bne.n	726e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
    7292:	6862      	ldr	r2, [r4, #4]
    7294:	68a3      	ldr	r3, [r4, #8]
    7296:	429a      	cmp	r2, r3
    7298:	d1e9      	bne.n	726e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
    729a:	fab7 f087 	clz	r0, r7
    729e:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    72a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    72a4:	2001      	movs	r0, #1
    72a6:	e7fb      	b.n	72a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
    72a8:	2000      	movs	r0, #0
    72aa:	e7f9      	b.n	72a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

000072ac <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    72ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72b0:	b083      	sub	sp, #12
    72b2:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    72b4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    72b8:	2b00      	cmp	r3, #0
    72ba:	d03e      	beq.n	733a <ExFatFile::getName8(char*, unsigned int)+0x8e>
    72bc:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    72be:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    72c2:	2b01      	cmp	r3, #1
    72c4:	d94b      	bls.n	735e <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
    72c6:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    72c8:	2302      	movs	r3, #2
    72ca:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
    72cc:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72ce:	3a01      	subs	r2, #1
    72d0:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    72d2:	f8df b098 	ldr.w	fp, [pc, #152]	; 736c <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    72d6:	2200      	movs	r2, #0
    72d8:	9901      	ldr	r1, [sp, #4]
    72da:	4648      	mov	r0, r9
    72dc:	f7fe fa8a 	bl	57f4 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    72e0:	b358      	cbz	r0, 733a <ExFatFile::getName8(char*, unsigned int)+0x8e>
    72e2:	7803      	ldrb	r3, [r0, #0]
    72e4:	2bc1      	cmp	r3, #193	; 0xc1
    72e6:	d128      	bne.n	733a <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
    72e8:	4605      	mov	r5, r0
    72ea:	f100 081e 	add.w	r8, r0, #30
    72ee:	e00f      	b.n	7310 <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
    72f0:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    72f4:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    72f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    72fa:	d31b      	bcc.n	7334 <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
    72fc:	b380      	cbz	r0, 7360 <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72fe:	463a      	mov	r2, r7
    7300:	4631      	mov	r1, r6
    7302:	f004 fdca 	bl	be9a <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7306:	4606      	mov	r6, r0
    7308:	b1b8      	cbz	r0, 733a <ExFatFile::getName8(char*, unsigned int)+0x8e>
    730a:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    730c:	45a8      	cmp	r8, r5
    730e:	d01c      	beq.n	734a <ExFatFile::getName8(char*, unsigned int)+0x9e>
    7310:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    7314:	2c00      	cmp	r4, #0
    7316:	d0eb      	beq.n	72f0 <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
    7318:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    731c:	b29b      	uxth	r3, r3
    731e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    7322:	d20a      	bcs.n	733a <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7324:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    7328:	f3c0 0009 	ubfx	r0, r0, #0, #10
    732c:	4304      	orrs	r4, r0
    732e:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
    7332:	e7e4      	b.n	72fe <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
    7334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    7338:	d305      	bcc.n	7346 <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    733a:	2000      	movs	r0, #0
    733c:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
    7340:	b003      	add	sp, #12
    7342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    7346:	4604      	mov	r4, r0
    7348:	e7e0      	b.n	730c <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    734a:	9b01      	ldr	r3, [sp, #4]
    734c:	3301      	adds	r3, #1
    734e:	b2db      	uxtb	r3, r3
    7350:	461a      	mov	r2, r3
    7352:	9301      	str	r3, [sp, #4]
    7354:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    7358:	4293      	cmp	r3, r2
    735a:	d2bc      	bcs.n	72d6 <ExFatFile::getName8(char*, unsigned int)+0x2a>
    735c:	e000      	b.n	7360 <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
    735e:	460e      	mov	r6, r1
  *str = '\0';
    7360:	2300      	movs	r3, #0
    7362:	7033      	strb	r3, [r6, #0]
  return str - name;
    7364:	eba6 000a 	sub.w	r0, r6, sl
    7368:	e7ea      	b.n	7340 <ExFatFile::getName8(char*, unsigned int)+0x94>
    736a:	bf00      	nop
    736c:	000ffc00 	.word	0x000ffc00

00007370 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    7370:	b570      	push	{r4, r5, r6, lr}
    7372:	460c      	mov	r4, r1
    next = begin;
    7374:	680b      	ldr	r3, [r1, #0]
    7376:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    7378:	2600      	movs	r6, #0
    737a:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    737c:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    737e:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
    7382:	e016      	b.n	73b2 <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
    7384:	4620      	mov	r0, r4
    7386:	f004 fd0d 	bl	bda4 <FsName::get16()>
    if (u == 0XFFFF) {
    738a:	42a8      	cmp	r0, r5
    738c:	d020      	beq.n	73d0 <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
    738e:	f004 fe27 	bl	bfe0 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7392:	03f3      	lsls	r3, r6, #15
    7394:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
    7398:	fa53 f380 	uxtab	r3, r3, r0
    739c:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    739e:	f3c3 034e 	ubfx	r3, r3, #1, #15
    73a2:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    73a6:	0a00      	lsrs	r0, r0, #8
    73a8:	fa10 f383 	uxtah	r3, r0, r3
    73ac:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    73ae:	6920      	ldr	r0, [r4, #16]
    73b0:	3001      	adds	r0, #1
  fname->nameLength = 0;
    73b2:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
    73b4:	89a3      	ldrh	r3, [r4, #12]
    73b6:	2b00      	cmp	r3, #0
    73b8:	d1e4      	bne.n	7384 <ExFatFile::hashName(ExName_t*)+0x14>
    73ba:	6862      	ldr	r2, [r4, #4]
    73bc:	68a3      	ldr	r3, [r4, #8]
    73be:	429a      	cmp	r2, r3
    73c0:	d1e0      	bne.n	7384 <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    73c2:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    73c4:	3801      	subs	r0, #1
    73c6:	28fe      	cmp	r0, #254	; 0xfe
    73c8:	bf8c      	ite	hi
    73ca:	2000      	movhi	r0, #0
    73cc:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    73ce:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    73d0:	2000      	movs	r0, #0
    73d2:	e7fc      	b.n	73ce <ExFatFile::hashName(ExName_t*)+0x5e>

000073d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    73d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73d8:	b083      	sub	sp, #12
    73da:	4607      	mov	r7, r0
    73dc:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    73de:	9101      	str	r1, [sp, #4]
    73e0:	b1e9      	cbz	r1, 741e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    73e2:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
    73e4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
    73e8:	42b3      	cmp	r3, r6
    73ea:	bf98      	it	ls
    73ec:	2600      	movls	r6, #0
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    73ee:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    73f2:	f006 0307 	and.w	r3, r6, #7
    73f6:	2401      	movs	r4, #1
    73f8:	409c      	lsls	r4, r3
    73fa:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
    73fc:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
    73fe:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
    7400:	f04f 0b00 	mov.w	fp, #0
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    7404:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    7408:	465a      	mov	r2, fp
    740a:	eb01 3115 	add.w	r1, r1, r5, lsr #12
    740e:	4638      	mov	r0, r7
    7410:	f004 fc89 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7414:	b388      	cbz	r0, 747a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
    7416:	4482      	add	sl, r0
    7418:	f500 7100 	add.w	r1, r0, #512	; 0x200
    741c:	e023      	b.n	7466 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    741e:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
    7422:	e7df      	b.n	73e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    7424:	46a8      	mov	r8, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    7426:	42ae      	cmp	r6, r5
    7428:	d029      	beq.n	747e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    742a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    742e:	42ab      	cmp	r3, r5
    7430:	d91e      	bls.n	7470 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
    7432:	0064      	lsls	r4, r4, #1
    7434:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7438:	d010      	beq.n	745c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
    743a:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
    743c:	4222      	tst	r2, r4
    743e:	d1f1      	bne.n	7424 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
    7440:	eba5 0308 	sub.w	r3, r5, r8
    7444:	454b      	cmp	r3, r9
    7446:	d1ee      	bne.n	7426 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
    7448:	9b01      	ldr	r3, [sp, #4]
    744a:	b923      	cbnz	r3, 7456 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    744c:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    7450:	bf08      	it	eq
    7452:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    7456:	f108 0002 	add.w	r0, r8, #2
    745a:	e011      	b.n	7480 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
    745c:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    7460:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
    7462:	4551      	cmp	r1, sl
    7464:	d007      	beq.n	7476 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
    7466:	2c00      	cmp	r4, #0
    7468:	d0f8      	beq.n	745c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
    746a:	f89a 2000 	ldrb.w	r2, [sl]
    746e:	e7e4      	b.n	743a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
    7470:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
    7472:	46d8      	mov	r8, fp
    7474:	465d      	mov	r5, fp
    }
    i = 0;
    7476:	46da      	mov	sl, fp
    7478:	e7c4      	b.n	7404 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
    747a:	2000      	movs	r0, #0
    747c:	e000      	b.n	7480 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
    747e:	2001      	movs	r0, #1
  }
  return 0;
}
    7480:	b003      	add	sp, #12
    7482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007486 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    7486:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    748a:	4615      	mov	r5, r2
    748c:	461e      	mov	r6, r3
  uint32_t sector;
  uint32_t start = cluster - 2;
    748e:	3902      	subs	r1, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7490:	188b      	adds	r3, r1, r2
    7492:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    7496:	4293      	cmp	r3, r2
    7498:	d854      	bhi.n	7544 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
    749a:	4607      	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    749c:	b15e      	cbz	r6, 74b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    749e:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    74a2:	4283      	cmp	r3, r0
    74a4:	d90d      	bls.n	74c2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    74a6:	4288      	cmp	r0, r1
    74a8:	d30b      	bcc.n	74c2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    74aa:	4293      	cmp	r3, r2
    74ac:	bf28      	it	cs
    74ae:	2300      	movcs	r3, #0
    74b0:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    74b4:	e005      	b.n	74c2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    74b6:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    74ba:	428b      	cmp	r3, r1
      m_bitmapStart = start;
    74bc:	bf88      	it	hi
    74be:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    74c2:	f001 0307 	and.w	r3, r1, #7
    74c6:	2401      	movs	r4, #1
    74c8:	409c      	lsls	r4, r3
    74ca:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
    74cc:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    74d0:	eb03 3811 	add.w	r8, r3, r1, lsr #12
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    74d4:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
    74d8:	f04f 0901 	mov.w	r9, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    74dc:	f04f 0a00 	mov.w	sl, #0
    74e0:	464a      	mov	r2, r9
    74e2:	4641      	mov	r1, r8
    74e4:	4638      	mov	r0, r7
    74e6:	f004 fc1e 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    74ea:	4684      	mov	ip, r0
    74ec:	b368      	cbz	r0, 754a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
    74ee:	4458      	add	r0, fp
    74f0:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
    74f4:	b1e4      	cbz	r4, 7530 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    74f6:	4603      	mov	r3, r0
    74f8:	7802      	ldrb	r2, [r0, #0]
    74fa:	4222      	tst	r2, r4
    74fc:	bf14      	ite	ne
    74fe:	2101      	movne	r1, #1
    7500:	2100      	moveq	r1, #0
    7502:	42b1      	cmp	r1, r6
    7504:	d025      	beq.n	7552 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
    7506:	4062      	eors	r2, r4
    7508:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
    750a:	3d01      	subs	r5, #1
    750c:	d018      	beq.n	7540 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
    750e:	0064      	lsls	r4, r4, #1
    7510:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7514:	d00c      	beq.n	7530 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    7516:	7819      	ldrb	r1, [r3, #0]
    7518:	4221      	tst	r1, r4
    751a:	bf14      	ite	ne
    751c:	2201      	movne	r2, #1
    751e:	2200      	moveq	r2, #0
    7520:	42b2      	cmp	r2, r6
    7522:	d014      	beq.n	754e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
    7524:	4061      	eors	r1, r4
    7526:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
    7528:	3d01      	subs	r5, #1
    752a:	d1f0      	bne.n	750e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
    752c:	2001      	movs	r0, #1
    752e:	e00a      	b.n	7546 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
    7530:	3001      	adds	r0, #1
      mask = 1;
    7532:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
    7534:	4560      	cmp	r0, ip
    7536:	d1dd      	bne.n	74f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    7538:	f108 0801 	add.w	r8, r8, #1
    i = 0;
    753c:	46d3      	mov	fp, sl
    753e:	e7cf      	b.n	74e0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
    7540:	2001      	movs	r0, #1
    7542:	e000      	b.n	7546 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  }

 fail:
  return false;
    7544:	2000      	movs	r0, #0
}
    7546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    754a:	2000      	movs	r0, #0
    754c:	e7fb      	b.n	7546 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    754e:	2000      	movs	r0, #0
    7550:	e7f9      	b.n	7546 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    7552:	2000      	movs	r0, #0
    7554:	e7f7      	b.n	7546 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

00007556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    7556:	b510      	push	{r4, lr}
    7558:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    755a:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    755e:	6849      	ldr	r1, [r1, #4]
    7560:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
    7562:	6823      	ldr	r3, [r4, #0]
    7564:	3b02      	subs	r3, #2
    7566:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    756a:	fa03 f30c 	lsl.w	r3, r3, ip
    756e:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    7572:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
    7576:	4419      	add	r1, r3
    7578:	f500 7004 	add.w	r0, r0, #528	; 0x210
    757c:	f004 fbd3 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    7580:	4603      	mov	r3, r0
    7582:	b118      	cbz	r0, 758c <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
    7584:	6862      	ldr	r2, [r4, #4]
    7586:	f3c2 0208 	ubfx	r2, r2, #0, #9
    758a:	4413      	add	r3, r2
}
    758c:	4618      	mov	r0, r3
    758e:	bd10      	pop	{r4, pc}

00007590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7590:	b538      	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7592:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7596:	3301      	adds	r3, #1
    7598:	428b      	cmp	r3, r1
    759a:	d202      	bcs.n	75a2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    DBG_FAIL_MACRO;
    return -1;
    759c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    75a0:	bd38      	pop	{r3, r4, r5, pc}
    75a2:	460c      	mov	r4, r1
    75a4:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    75a6:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    75aa:	2200      	movs	r2, #0
    75ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    75b0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    75b4:	f004 fbb7 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    75b8:	b148      	cbz	r0, 75ce <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    75ba:	00a4      	lsls	r4, r4, #2
    75bc:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    75c0:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    75c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    75c6:	d005      	beq.n	75d4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
    75c8:	602b      	str	r3, [r5, #0]
  return 1;
    75ca:	2001      	movs	r0, #1
    75cc:	e7e8      	b.n	75a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
    75ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    75d2:	e7e5      	b.n	75a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
    75d4:	2000      	movs	r0, #0
    75d6:	e7e3      	b.n	75a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

000075d8 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    75d8:	b530      	push	{r4, r5, lr}
    75da:	b083      	sub	sp, #12
    75dc:	4605      	mov	r5, r0
    75de:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
    75e0:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
    75e2:	aa01      	add	r2, sp, #4
    75e4:	9901      	ldr	r1, [sp, #4]
    75e6:	4628      	mov	r0, r5
    75e8:	f7ff ffd2 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    75ec:	2800      	cmp	r0, #0
    75ee:	db03      	blt.n	75f8 <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
    75f0:	3401      	adds	r4, #1
  } while (status);
    75f2:	2800      	cmp	r0, #0
    75f4:	d1f5      	bne.n	75e2 <ExFatPartition::chainSize(unsigned long)+0xa>
    75f6:	e000      	b.n	75fa <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
    75f8:	2400      	movs	r4, #0
}
    75fa:	4620      	mov	r0, r4
    75fc:	b003      	add	sp, #12
    75fe:	bd30      	pop	{r4, r5, pc}

00007600 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    7600:	b570      	push	{r4, r5, r6, lr}
    7602:	4606      	mov	r6, r0
    7604:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    7606:	6849      	ldr	r1, [r1, #4]
    7608:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    760c:	400b      	ands	r3, r1
    760e:	4413      	add	r3, r2
  pos->position += offset;
    7610:	4411      	add	r1, r2
    7612:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7614:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7618:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
    761a:	b2d2      	uxtb	r2, r2
    761c:	40d3      	lsrs	r3, r2
  while (tmp--) {
    761e:	1e5d      	subs	r5, r3, #1
    7620:	b963      	cbnz	r3, 763c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
    7622:	2001      	movs	r0, #1
    7624:	e012      	b.n	764c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
    7626:	4622      	mov	r2, r4
    7628:	6821      	ldr	r1, [r4, #0]
    762a:	4630      	mov	r0, r6
    762c:	f7ff ffb0 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    7630:	2801      	cmp	r0, #1
    7632:	d10b      	bne.n	764c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
    7634:	3d01      	subs	r5, #1
    7636:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    763a:	d006      	beq.n	764a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
    763c:	7a23      	ldrb	r3, [r4, #8]
    763e:	2b00      	cmp	r3, #0
    7640:	d0f1      	beq.n	7626 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
    7642:	6823      	ldr	r3, [r4, #0]
    7644:	3301      	adds	r3, #1
    7646:	6023      	str	r3, [r4, #0]
    7648:	e7f4      	b.n	7634 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
    764a:	2001      	movs	r0, #1
}
    764c:	bd70      	pop	{r4, r5, r6, pc}

0000764e <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    764e:	2901      	cmp	r1, #1
    7650:	d919      	bls.n	7686 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7652:	b538      	push	{r3, r4, r5, lr}
    7654:	460c      	mov	r4, r1
    7656:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7658:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    765c:	3301      	adds	r3, #1
    765e:	428b      	cmp	r3, r1
    7660:	d201      	bcs.n	7666 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    7662:	2000      	movs	r0, #0
}
    7664:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7666:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    766a:	2201      	movs	r2, #1
    766c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7670:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7674:	f004 fb57 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    7678:	b138      	cbz	r0, 768a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    767a:	00a4      	lsls	r4, r4, #2
    767c:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    7680:	5105      	str	r5, [r0, r4]
  return true;
    7682:	2001      	movs	r0, #1
    7684:	e7ee      	b.n	7664 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    7686:	2000      	movs	r0, #0
}
    7688:	4770      	bx	lr
  return false;
    768a:	2000      	movs	r0, #0
    768c:	e7ea      	b.n	7664 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

0000768e <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    768e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7692:	b082      	sub	sp, #8
    7694:	4606      	mov	r6, r0
    7696:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    7698:	460f      	mov	r7, r1
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    769a:	f04f 0800 	mov.w	r8, #0
    769e:	e00d      	b.n	76bc <ExFatPartition::freeChain(unsigned long)+0x2e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    }
    cluster = next;
    76a0:	461c      	mov	r4, r3
    76a2:	e00b      	b.n	76bc <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    76a4:	1c62      	adds	r2, r4, #1
    76a6:	4643      	mov	r3, r8
    76a8:	1bd2      	subs	r2, r2, r7
    76aa:	4639      	mov	r1, r7
    76ac:	4630      	mov	r0, r6
    76ae:	f7ff feea 	bl	7486 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    76b2:	4603      	mov	r3, r0
    76b4:	b318      	cbz	r0, 76fe <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    76b6:	9f01      	ldr	r7, [sp, #4]
  } while (status);
    76b8:	b30d      	cbz	r5, 76fe <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    76ba:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
    76bc:	aa01      	add	r2, sp, #4
    76be:	4621      	mov	r1, r4
    76c0:	4630      	mov	r0, r6
    76c2:	f7ff ff65 	bl	7590 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    76c6:	1e05      	subs	r5, r0, #0
    76c8:	db18      	blt.n	76fc <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
    76ca:	4642      	mov	r2, r8
    76cc:	4621      	mov	r1, r4
    76ce:	4630      	mov	r0, r6
    76d0:	f7ff ffbd 	bl	764e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    76d4:	4603      	mov	r3, r0
    76d6:	b190      	cbz	r0, 76fe <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
    76d8:	2d00      	cmp	r5, #0
    76da:	d0e3      	beq.n	76a4 <ExFatPartition::freeChain(unsigned long)+0x16>
    76dc:	9b01      	ldr	r3, [sp, #4]
    76de:	1c62      	adds	r2, r4, #1
    76e0:	429a      	cmp	r2, r3
    76e2:	d0dd      	beq.n	76a0 <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    76e4:	1c62      	adds	r2, r4, #1
    76e6:	4643      	mov	r3, r8
    76e8:	1bd2      	subs	r2, r2, r7
    76ea:	4639      	mov	r1, r7
    76ec:	4630      	mov	r0, r6
    76ee:	f7ff feca 	bl	7486 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    76f2:	4603      	mov	r3, r0
    76f4:	b118      	cbz	r0, 76fe <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    76f6:	9f01      	ldr	r7, [sp, #4]
    76f8:	463c      	mov	r4, r7
    76fa:	e7df      	b.n	76bc <ExFatPartition::freeChain(unsigned long)+0x2e>

  return true;

 fail:
  return false;
    76fc:	2300      	movs	r3, #0
}
    76fe:	4618      	mov	r0, r3
    7700:	b002      	add	sp, #8
    7702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007706 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    7706:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    770a:	4606      	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    770c:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
    7710:	2500      	movs	r5, #0
  uint32_t nc = 0;
    7712:	462c      	mov	r4, r5
    7714:	f500 7804 	add.w	r8, r0, #528	; 0x210
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7718:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    771a:	f101 0901 	add.w	r9, r1, #1
    771e:	2200      	movs	r2, #0
    7720:	4640      	mov	r0, r8
    7722:	f004 fb00 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    7726:	b308      	cbz	r0, 776c <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7728:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    772c:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
    7730:	e007      	b.n	7742 <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
    7732:	3508      	adds	r5, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    7734:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    7736:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    773a:	42a0      	cmp	r0, r4
    773c:	d911      	bls.n	7762 <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    773e:	4574      	cmp	r4, lr
    7740:	d012      	beq.n	7768 <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
    7742:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    7746:	29ff      	cmp	r1, #255	; 0xff
    7748:	d0f3      	beq.n	7732 <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
    774a:	2900      	cmp	r1, #0
    774c:	d0f2      	beq.n	7734 <ExFatPartition::freeClusterCount()+0x2e>
    774e:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7750:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
    7752:	4219      	tst	r1, r3
            usedCount++;
    7754:	bf18      	it	ne
    7756:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7758:	005b      	lsls	r3, r3, #1
    775a:	b2db      	uxtb	r3, r3
    775c:	3a01      	subs	r2, #1
    775e:	d1f8      	bne.n	7752 <ExFatPartition::freeClusterCount()+0x4c>
    7760:	e7e8      	b.n	7734 <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
    7762:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    7764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    7768:	4649      	mov	r1, r9
    776a:	e7d6      	b.n	771a <ExFatPartition::freeClusterCount()+0x14>
      return 0;
    776c:	2000      	movs	r0, #0
    776e:	e7f9      	b.n	7764 <ExFatPartition::freeClusterCount()+0x5e>

00007770 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7774:	4604      	mov	r4, r0
    7776:	460b      	mov	r3, r1
    7778:	4616      	mov	r6, r2
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    777a:	2100      	movs	r1, #0
    777c:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
    7780:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    7784:	6043      	str	r3, [r0, #4]
    m_status = 0;
    7786:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
    7788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    778c:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
    778e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
    7792:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7796:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    779a:	f500 7704 	add.w	r7, r0, #528	; 0x210
    779e:	460a      	mov	r2, r1
    77a0:	4638      	mov	r0, r7
    77a2:	f004 fac0 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    77a6:	4680      	mov	r8, r0
    77a8:	fab0 f080 	clz	r0, r0
    77ac:	0940      	lsrs	r0, r0, #5
    77ae:	2e04      	cmp	r6, #4
    77b0:	bf94      	ite	ls
    77b2:	4605      	movls	r5, r0
    77b4:	f040 0501 	orrhi.w	r5, r0, #1
    77b8:	2d00      	cmp	r5, #0
    77ba:	d154      	bne.n	7866 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    77bc:	b1ce      	cbz	r6, 77f2 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    77be:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    77c0:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    77c4:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
    77c8:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    77cc:	d14c      	bne.n	7868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    77ce:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    77d2:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    77d6:	2b00      	cmp	r3, #0
    77d8:	d046      	beq.n	7868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    77da:	eb08 1606 	add.w	r6, r8, r6, lsl #4
    77de:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
    77e2:	2200      	movs	r2, #0
    77e4:	4631      	mov	r1, r6
    77e6:	4638      	mov	r0, r7
    77e8:	f004 fa9d 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    77ec:	4680      	mov	r8, r0
    77ee:	b908      	cbnz	r0, 77f4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
    77f0:	e03a      	b.n	7868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
    77f2:	2600      	movs	r6, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    77f4:	2205      	movs	r2, #5
    77f6:	491e      	ldr	r1, [pc, #120]	; (7870 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
    77f8:	f108 0003 	add.w	r0, r8, #3
    77fc:	f009 fa36 	bl	10c6c <strncmp>
    7800:	bb90      	cbnz	r0, 7868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    7802:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
    7806:	2b09      	cmp	r3, #9
    7808:	d12e      	bne.n	7868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    780a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    780e:	4433      	add	r3, r6
    7810:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    7814:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    7818:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    781c:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    7820:	4433      	add	r3, r6
    7822:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    7826:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    782a:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    782e:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    7832:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7836:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    783a:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    783e:	3309      	adds	r3, #9
    7840:	2501      	movs	r5, #1
    7842:	fa05 f303 	lsl.w	r3, r5, r3
    7846:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    784a:	3b01      	subs	r3, #1
    784c:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    7850:	2100      	movs	r1, #0
    7852:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    7856:	462a      	mov	r2, r5
    7858:	4620      	mov	r0, r4
    785a:	f7ff fdbb 	bl	73d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    785e:	2340      	movs	r3, #64	; 0x40
    7860:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    7864:	e000      	b.n	7868 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>

 fail:
  return false;
    7866:	2500      	movs	r5, #0
}
    7868:	4628      	mov	r0, r5
    786a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    786e:	bf00      	nop
    7870:	200020a8 	.word	0x200020a8

00007874 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7874:	b510      	push	{r4, lr}
    7876:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    7878:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    787c:	f7ff feac 	bl	75d8 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7880:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    7884:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    7886:	b2db      	uxtb	r3, r3
}
    7888:	4098      	lsls	r0, r3
    788a:	bd10      	pop	{r4, pc}

0000788c <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    788c:	b538      	push	{r3, r4, r5, lr}
    788e:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7890:	4602      	mov	r2, r0
    7892:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7896:	4629      	mov	r1, r5
    7898:	6880      	ldr	r0, [r0, #8]
    789a:	f002 f940 	bl	9b1e <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    789e:	b140      	cbz	r0, 78b2 <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    78a0:	b945      	cbnz	r5, 78b4 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    78a2:	78a3      	ldrb	r3, [r4, #2]
    78a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    78a8:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    78aa:	78a3      	ldrb	r3, [r4, #2]
    78ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    78b0:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    78b2:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    78b4:	3501      	adds	r5, #1
    78b6:	6923      	ldr	r3, [r4, #16]
    78b8:	42ab      	cmp	r3, r5
    78ba:	d0f6      	beq.n	78aa <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    78bc:	78a3      	ldrb	r3, [r4, #2]
    78be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    78c2:	70a3      	strb	r3, [r4, #2]
    78c4:	e7f1      	b.n	78aa <FatFile::addCluster()+0x1e>
	...

000078c8 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    78c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    78cc:	7803      	ldrb	r3, [r0, #0]
    78ce:	f013 0f20 	tst.w	r3, #32
    78d2:	d133      	bne.n	793c <FatFile::addDirCluster()+0x74>
    78d4:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    78d6:	6942      	ldr	r2, [r0, #20]
    78d8:	4b1b      	ldr	r3, [pc, #108]	; (7948 <FatFile::addDirCluster()+0x80>)
    78da:	429a      	cmp	r2, r3
    78dc:	d301      	bcc.n	78e2 <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    78de:	2700      	movs	r7, #0
    78e0:	e02d      	b.n	793e <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
    78e2:	f7ff ffd3 	bl	788c <FatFile::addCluster()>
    78e6:	4607      	mov	r7, r0
    78e8:	b348      	cbz	r0, 793e <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
    78ea:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    78ec:	692e      	ldr	r6, [r5, #16]
    78ee:	3e02      	subs	r6, #2
    78f0:	7983      	ldrb	r3, [r0, #6]
    78f2:	409e      	lsls	r6, r3
    78f4:	6943      	ldr	r3, [r0, #20]
    78f6:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    78f8:	7903      	ldrb	r3, [r0, #4]
    78fa:	b1b3      	cbz	r3, 792a <FatFile::addDirCluster()+0x62>
    78fc:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
    78fe:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
    7902:	f44f 7a00 	mov.w	sl, #512	; 0x200
    7906:	46a1      	mov	r9, r4
    7908:	4642      	mov	r2, r8
    790a:	fa56 f184 	uxtab	r1, r6, r4
    790e:	3028      	adds	r0, #40	; 0x28
    7910:	f004 fa09 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7914:	b1b0      	cbz	r0, 7944 <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
    7916:	4652      	mov	r2, sl
    7918:	4649      	mov	r1, r9
    791a:	f009 fdc7 	bl	114ac <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    791e:	68a8      	ldr	r0, [r5, #8]
    7920:	3401      	adds	r4, #1
    7922:	7902      	ldrb	r2, [r0, #4]
    7924:	b2e3      	uxtb	r3, r4
    7926:	429a      	cmp	r2, r3
    7928:	d8ee      	bhi.n	7908 <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    792a:	7982      	ldrb	r2, [r0, #6]
    792c:	f44f 7300 	mov.w	r3, #512	; 0x200
    7930:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7932:	696a      	ldr	r2, [r5, #20]
    7934:	fa12 f383 	uxtah	r3, r2, r3
    7938:	616b      	str	r3, [r5, #20]
  return true;
    793a:	e000      	b.n	793e <FatFile::addDirCluster()+0x76>
  return false;
    793c:	2700      	movs	r7, #0
}
    793e:	4638      	mov	r0, r7
    7940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
    7944:	2700      	movs	r7, #0
    7946:	e7fa      	b.n	793e <FatFile::addDirCluster()+0x76>
    7948:	001ffe00 	.word	0x001ffe00

0000794c <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    794c:	b510      	push	{r4, lr}
    794e:	4604      	mov	r4, r0
    7950:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
    7952:	6880      	ldr	r0, [r0, #8]
    7954:	69a1      	ldr	r1, [r4, #24]
    7956:	3028      	adds	r0, #40	; 0x28
    7958:	f004 f9e5 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    795c:	4603      	mov	r3, r0
    795e:	b120      	cbz	r0, 796a <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    7960:	88a2      	ldrh	r2, [r4, #4]
    7962:	f002 020f 	and.w	r2, r2, #15
    7966:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
    796a:	4618      	mov	r0, r3
    796c:	bd10      	pop	{r4, pc}

0000796e <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    796e:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
    7970:	7803      	ldrb	r3, [r0, #0]
    7972:	b10b      	cbz	r3, 7978 <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7974:	2000      	movs	r0, #0
}
    7976:	bd38      	pop	{r3, r4, r5, pc}
    7978:	4604      	mov	r4, r0
    797a:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
    797c:	2224      	movs	r2, #36	; 0x24
    797e:	2100      	movs	r1, #0
    7980:	f009 fd94 	bl	114ac <memset>
  m_vol = vol;
    7984:	60a5      	str	r5, [r4, #8]
    return m_fatType;
    7986:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7988:	2b10      	cmp	r3, #16
    798a:	d007      	beq.n	799c <FatFile::openRoot(FatVolume*)+0x2e>
    798c:	2b20      	cmp	r3, #32
    798e:	d007      	beq.n	79a0 <FatFile::openRoot(FatVolume*)+0x32>
    7990:	2b0c      	cmp	r3, #12
    7992:	d001      	beq.n	7998 <FatFile::openRoot(FatVolume*)+0x2a>
    7994:	2000      	movs	r0, #0
    7996:	e7ee      	b.n	7976 <FatFile::openRoot(FatVolume*)+0x8>
    7998:	2320      	movs	r3, #32
    799a:	e002      	b.n	79a2 <FatFile::openRoot(FatVolume*)+0x34>
    799c:	2320      	movs	r3, #32
    799e:	e000      	b.n	79a2 <FatFile::openRoot(FatVolume*)+0x34>
    79a0:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    79a2:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    79a4:	2001      	movs	r0, #1
    79a6:	70a0      	strb	r0, [r4, #2]
  return true;
    79a8:	e7e5      	b.n	7976 <FatFile::openRoot(FatVolume*)+0x8>

000079aa <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    79aa:	b538      	push	{r3, r4, r5, lr}
    79ac:	4604      	mov	r4, r0
    79ae:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
    79b0:	68cb      	ldr	r3, [r1, #12]
    79b2:	b91b      	cbnz	r3, 79bc <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
    79b4:	6889      	ldr	r1, [r1, #8]
    79b6:	f7ff ffda 	bl	796e <FatFile::openRoot(FatVolume*)>
}
    79ba:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    79bc:	2224      	movs	r2, #36	; 0x24
    79be:	2100      	movs	r1, #0
    79c0:	f009 fd74 	bl	114ac <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    79c4:	2310      	movs	r3, #16
    79c6:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    79c8:	2001      	movs	r0, #1
    79ca:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    79cc:	68ab      	ldr	r3, [r5, #8]
    79ce:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    79d0:	68eb      	ldr	r3, [r5, #12]
    79d2:	6223      	str	r3, [r4, #32]
  return true;
    79d4:	e7f1      	b.n	79ba <FatFile::openCluster(FatFile*)+0x10>

000079d6 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    79d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79da:	b083      	sub	sp, #12
    79dc:	4604      	mov	r4, r0
    79de:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    79e0:	7883      	ldrb	r3, [r0, #2]
    79e2:	f013 0f01 	tst.w	r3, #1
    79e6:	f000 80b4 	beq.w	7b52 <FatFile::read(void*, unsigned int)+0x17c>
    79ea:	4689      	mov	r9, r1
    79ec:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    79ee:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    79f0:	f013 0f08 	tst.w	r3, #8
    79f4:	d012      	beq.n	7a1c <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    79f6:	69c3      	ldr	r3, [r0, #28]
    79f8:	6942      	ldr	r2, [r0, #20]
    79fa:	1a9b      	subs	r3, r3, r2
    79fc:	460a      	mov	r2, r1
    79fe:	4299      	cmp	r1, r3
    7a00:	bf28      	it	cs
    7a02:	461a      	movcs	r2, r3
    7a04:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    7a06:	9b00      	ldr	r3, [sp, #0]
    7a08:	2b00      	cmp	r3, #0
    7a0a:	f000 80b7 	beq.w	7b7c <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
    7a0e:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
    7a10:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7a14:	f104 0310 	add.w	r3, r4, #16
    7a18:	9301      	str	r3, [sp, #4]
    7a1a:	e05b      	b.n	7ad4 <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
    7a1c:	f013 0f20 	tst.w	r3, #32
    7a20:	d0f1      	beq.n	7a06 <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7a22:	6883      	ldr	r3, [r0, #8]
    7a24:	895a      	ldrh	r2, [r3, #10]
    7a26:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    7a28:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    7a2c:	b29b      	uxth	r3, r3
    7a2e:	9a00      	ldr	r2, [sp, #0]
    7a30:	429a      	cmp	r2, r3
    7a32:	bf28      	it	cs
    7a34:	461a      	movcs	r2, r3
    7a36:	9200      	str	r2, [sp, #0]
    7a38:	e7e5      	b.n	7a06 <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
    7a3a:	f890 a005 	ldrb.w	sl, [r0, #5]
    7a3e:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    7a42:	f1b8 0f00 	cmp.w	r8, #0
    7a46:	d109      	bne.n	7a5c <FatFile::read(void*, unsigned int)+0x86>
    7a48:	f1ba 0f00 	cmp.w	sl, #0
    7a4c:	d106      	bne.n	7a5c <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
    7a4e:	b973      	cbnz	r3, 7a6e <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7a50:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
    7a54:	bf14      	ite	ne
    7a56:	6a03      	ldrne	r3, [r0, #32]
    7a58:	6a23      	ldreq	r3, [r4, #32]
    7a5a:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7a5c:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a5e:	6925      	ldr	r5, [r4, #16]
    7a60:	3d02      	subs	r5, #2
    7a62:	799a      	ldrb	r2, [r3, #6]
    7a64:	4095      	lsls	r5, r2
    7a66:	695b      	ldr	r3, [r3, #20]
    7a68:	441d      	add	r5, r3
    7a6a:	4455      	add	r5, sl
    7a6c:	e03d      	b.n	7aea <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
    7a6e:	f012 0f08 	tst.w	r2, #8
    7a72:	d007      	beq.n	7a84 <FatFile::read(void*, unsigned int)+0xae>
    7a74:	78a3      	ldrb	r3, [r4, #2]
    7a76:	f013 0f40 	tst.w	r3, #64	; 0x40
    7a7a:	d003      	beq.n	7a84 <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
    7a7c:	6923      	ldr	r3, [r4, #16]
    7a7e:	3301      	adds	r3, #1
    7a80:	6123      	str	r3, [r4, #16]
    7a82:	e7eb      	b.n	7a5c <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7a84:	9a01      	ldr	r2, [sp, #4]
    7a86:	6921      	ldr	r1, [r4, #16]
    7a88:	f001 ff27 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7a8c:	2800      	cmp	r0, #0
    7a8e:	db60      	blt.n	7b52 <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
    7a90:	2800      	cmp	r0, #0
    7a92:	d1e3      	bne.n	7a5c <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
    7a94:	7823      	ldrb	r3, [r4, #0]
    7a96:	f013 0f70 	tst.w	r3, #112	; 0x70
    7a9a:	d05a      	beq.n	7b52 <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7a9c:	9b00      	ldr	r3, [sp, #0]
    7a9e:	1bd8      	subs	r0, r3, r7
    7aa0:	e05d      	b.n	7b5e <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
    7aa2:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
    7aa6:	42be      	cmp	r6, r7
    7aa8:	bf28      	it	cs
    7aaa:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
    7aac:	68a0      	ldr	r0, [r4, #8]
    7aae:	2200      	movs	r2, #0
    7ab0:	4629      	mov	r1, r5
    7ab2:	3028      	adds	r0, #40	; 0x28
    7ab4:	f004 f937 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7ab8:	4601      	mov	r1, r0
    7aba:	2800      	cmp	r0, #0
    7abc:	d049      	beq.n	7b52 <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    7abe:	4632      	mov	r2, r6
    7ac0:	4441      	add	r1, r8
    7ac2:	4648      	mov	r0, r9
    7ac4:	f005 fc2a 	bl	d31c <memcpy>
    dst += n;
    7ac8:	44b1      	add	r9, r6
    m_curPosition += n;
    7aca:	6963      	ldr	r3, [r4, #20]
    7acc:	4433      	add	r3, r6
    7ace:	6163      	str	r3, [r4, #20]
  while (toRead) {
    7ad0:	1bbf      	subs	r7, r7, r6
    7ad2:	d0e3      	beq.n	7a9c <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7ad4:	6963      	ldr	r3, [r4, #20]
    7ad6:	68a0      	ldr	r0, [r4, #8]
    7ad8:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7adc:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
    7ade:	f012 0f20 	tst.w	r2, #32
    7ae2:	d0aa      	beq.n	7a3a <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
    7ae4:	6a05      	ldr	r5, [r0, #32]
    7ae6:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    7aea:	f1b8 0f00 	cmp.w	r8, #0
    7aee:	d1d8      	bne.n	7aa2 <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7af0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7af4:	d3d5      	bcc.n	7aa2 <FatFile::read(void*, unsigned int)+0xcc>
    7af6:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    7afa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7afe:	429d      	cmp	r5, r3
    7b00:	d0cf      	beq.n	7aa2 <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7b02:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    7b06:	d32d      	bcc.n	7b64 <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7b08:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
    7b0c:	7822      	ldrb	r2, [r4, #0]
    7b0e:	f012 0f20 	tst.w	r2, #32
    7b12:	d106      	bne.n	7b22 <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7b14:	f89b 2004 	ldrb.w	r2, [fp, #4]
    7b18:	eba2 020a 	sub.w	r2, r2, sl
    7b1c:	4590      	cmp	r8, r2
    7b1e:	bf28      	it	cs
    7b20:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
    7b22:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    7b26:	429d      	cmp	r5, r3
    7b28:	d808      	bhi.n	7b3c <FatFile::read(void*, unsigned int)+0x166>
    7b2a:	eb05 0208 	add.w	r2, r5, r8
    7b2e:	4293      	cmp	r3, r2
    7b30:	d204      	bcs.n	7b3c <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    7b32:	f10b 0028 	add.w	r0, fp, #40	; 0x28
    7b36:	f004 f8cf 	bl	bcd8 <FsCache::sync()>
    7b3a:	b150      	cbz	r0, 7b52 <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    7b3c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    7b40:	6803      	ldr	r3, [r0, #0]
    7b42:	f8d3 b014 	ldr.w	fp, [r3, #20]
    7b46:	4643      	mov	r3, r8
    7b48:	464a      	mov	r2, r9
    7b4a:	4629      	mov	r1, r5
    7b4c:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7b4e:	2800      	cmp	r0, #0
    7b50:	d1ba      	bne.n	7ac8 <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
    7b52:	7863      	ldrb	r3, [r4, #1]
    7b54:	f043 0302 	orr.w	r3, r3, #2
    7b58:	7063      	strb	r3, [r4, #1]
  return -1;
    7b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7b5e:	b003      	add	sp, #12
    7b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
    7b64:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    7b68:	6803      	ldr	r3, [r0, #0]
    7b6a:	691b      	ldr	r3, [r3, #16]
    7b6c:	464a      	mov	r2, r9
    7b6e:	4629      	mov	r1, r5
    7b70:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7b72:	2800      	cmp	r0, #0
    7b74:	d0ed      	beq.n	7b52 <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    7b76:	f44f 7600 	mov.w	r6, #512	; 0x200
    7b7a:	e7a5      	b.n	7ac8 <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
    7b7c:	9f00      	ldr	r7, [sp, #0]
    7b7e:	e78d      	b.n	7a9c <FatFile::read(void*, unsigned int)+0xc6>

00007b80 <FatFile::peek()>:
int FatFile::peek() {
    7b80:	b570      	push	{r4, r5, r6, lr}
    7b82:	b082      	sub	sp, #8
    7b84:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    7b86:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    7b88:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
    7b8a:	2201      	movs	r2, #1
    7b8c:	f10d 0107 	add.w	r1, sp, #7
    7b90:	f7ff ff21 	bl	79d6 <FatFile::read(void*, unsigned int)>
    7b94:	2801      	cmp	r0, #1
    7b96:	bf0c      	ite	eq
    7b98:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    7ba0:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
    7ba2:	6125      	str	r5, [r4, #16]
}
    7ba4:	b002      	add	sp, #8
    7ba6:	bd70      	pop	{r4, r5, r6, pc}

00007ba8 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7ba8:	b530      	push	{r4, r5, lr}
    7baa:	b083      	sub	sp, #12
    7bac:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7bae:	6943      	ldr	r3, [r0, #20]
    7bb0:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
    7bb4:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
    7bb8:	d009      	beq.n	7bce <FatFile::readDirCache(bool)+0x26>
    7bba:	2901      	cmp	r1, #1
    7bbc:	d107      	bne.n	7bce <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    7bbe:	3320      	adds	r3, #32
    7bc0:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7bc2:	68a0      	ldr	r0, [r4, #8]
    7bc4:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7bc6:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    7bca:	b003      	add	sp, #12
    7bcc:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7bce:	2201      	movs	r2, #1
    7bd0:	f10d 0107 	add.w	r1, sp, #7
    7bd4:	4620      	mov	r0, r4
    7bd6:	f7ff fefe 	bl	79d6 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7bda:	b240      	sxtb	r0, r0
    7bdc:	2801      	cmp	r0, #1
    7bde:	d103      	bne.n	7be8 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7be0:	6963      	ldr	r3, [r4, #20]
    7be2:	331f      	adds	r3, #31
    7be4:	6163      	str	r3, [r4, #20]
    7be6:	e7ec      	b.n	7bc2 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    7be8:	2000      	movs	r0, #0
    7bea:	e7ee      	b.n	7bca <FatFile::readDirCache(bool)+0x22>

00007bec <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bf0:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7bf2:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
    7bf4:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
    7bf6:	b36b      	cbz	r3, 7c54 <FatFile::seekSet(unsigned long)+0x68>
    7bf8:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7bfa:	6942      	ldr	r2, [r0, #20]
    7bfc:	428a      	cmp	r2, r1
    7bfe:	d045      	beq.n	7c8c <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
    7c00:	b361      	cbz	r1, 7c5c <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    7c02:	f013 0f08 	tst.w	r3, #8
    7c06:	d032      	beq.n	7c6e <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
    7c08:	69c1      	ldr	r1, [r0, #28]
    7c0a:	42a9      	cmp	r1, r5
    7c0c:	d322      	bcc.n	7c54 <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7c0e:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7c12:	f89c 1006 	ldrb.w	r1, [ip, #6]
    7c16:	3109      	adds	r1, #9
    7c18:	b2c9      	uxtb	r1, r1
    7c1a:	1e6e      	subs	r6, r5, #1
    7c1c:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    7c1e:	78a0      	ldrb	r0, [r4, #2]
    7c20:	f010 0f40 	tst.w	r0, #64	; 0x40
    7c24:	d12c      	bne.n	7c80 <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7c26:	1e50      	subs	r0, r2, #1
    7c28:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
    7c2a:	b10a      	cbz	r2, 7c30 <FatFile::seekSet(unsigned long)+0x44>
    7c2c:	4286      	cmp	r6, r0
    7c2e:	d22b      	bcs.n	7c88 <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7c30:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
    7c34:	bf14      	ite	ne
    7c36:	f8dc 3020 	ldrne.w	r3, [ip, #32]
    7c3a:	6a23      	ldreq	r3, [r4, #32]
    7c3c:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7c3e:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
    7c42:	b16e      	cbz	r6, 7c60 <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7c44:	4642      	mov	r2, r8
    7c46:	6921      	ldr	r1, [r4, #16]
    7c48:	68a0      	ldr	r0, [r4, #8]
    7c4a:	f001 fe46 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
    7c4e:	3e01      	subs	r6, #1
    7c50:	2800      	cmp	r0, #0
    7c52:	dcf6      	bgt.n	7c42 <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    7c54:	6127      	str	r7, [r4, #16]
  return false;
    7c56:	2000      	movs	r0, #0
}
    7c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
    7c5c:	2300      	movs	r3, #0
    7c5e:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
    7c60:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7c62:	78a3      	ldrb	r3, [r4, #2]
    7c64:	f023 0320 	bic.w	r3, r3, #32
    7c68:	70a3      	strb	r3, [r4, #2]
  return true;
    7c6a:	2001      	movs	r0, #1
    7c6c:	e7f4      	b.n	7c58 <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
    7c6e:	f013 0f20 	tst.w	r3, #32
    7c72:	d0cc      	beq.n	7c0e <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
    7c74:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7c76:	895b      	ldrh	r3, [r3, #10]
    7c78:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7c7c:	d9f0      	bls.n	7c60 <FatFile::seekSet(unsigned long)+0x74>
    7c7e:	e7e9      	b.n	7c54 <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
    7c80:	6a23      	ldr	r3, [r4, #32]
    7c82:	4433      	add	r3, r6
    7c84:	6123      	str	r3, [r4, #16]
    goto done;
    7c86:	e7eb      	b.n	7c60 <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
    7c88:	1a36      	subs	r6, r6, r0
    7c8a:	e7d8      	b.n	7c3e <FatFile::seekSet(unsigned long)+0x52>
    return true;
    7c8c:	2001      	movs	r0, #1
    7c8e:	e7e3      	b.n	7c58 <FatFile::seekSet(unsigned long)+0x6c>

00007c90 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7c90:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7c92:	7803      	ldrb	r3, [r0, #0]
    7c94:	f013 0f10 	tst.w	r3, #16
    7c98:	d101      	bne.n	7c9e <FatFile::rmdir()+0xe>
  return false;
    7c9a:	2000      	movs	r0, #0
}
    7c9c:	bd38      	pop	{r3, r4, r5, pc}
    7c9e:	4604      	mov	r4, r0
    seekSet(0);
    7ca0:	2100      	movs	r1, #0
    7ca2:	f7ff ffa3 	bl	7bec <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    7ca6:	2501      	movs	r5, #1
    7ca8:	4629      	mov	r1, r5
    7caa:	4620      	mov	r0, r4
    7cac:	f7ff ff7c 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!dir) {
    7cb0:	4603      	mov	r3, r0
    7cb2:	b168      	cbz	r0, 7cd0 <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
    7cb4:	7800      	ldrb	r0, [r0, #0]
    7cb6:	b170      	cbz	r0, 7cd6 <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7cb8:	282e      	cmp	r0, #46	; 0x2e
    7cba:	bf18      	it	ne
    7cbc:	28e5      	cmpne	r0, #229	; 0xe5
    7cbe:	bf0c      	ite	eq
    7cc0:	2001      	moveq	r0, #1
    7cc2:	2000      	movne	r0, #0
    7cc4:	d0f0      	beq.n	7ca8 <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
    7cc6:	7adb      	ldrb	r3, [r3, #11]
    7cc8:	f013 0f08 	tst.w	r3, #8
    7ccc:	d1ec      	bne.n	7ca8 <FatFile::rmdir()+0x18>
    7cce:	e7e5      	b.n	7c9c <FatFile::rmdir()+0xc>
      if (!getError()) {
    7cd0:	7863      	ldrb	r3, [r4, #1]
    7cd2:	2b00      	cmp	r3, #0
    7cd4:	d1e2      	bne.n	7c9c <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
    7cd6:	2308      	movs	r3, #8
    7cd8:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7cda:	78a3      	ldrb	r3, [r4, #2]
    7cdc:	f043 0302 	orr.w	r3, r3, #2
    7ce0:	70a3      	strb	r3, [r4, #2]
  return remove();
    7ce2:	4620      	mov	r0, r4
    7ce4:	f001 f974 	bl	8fd0 <FatFile::remove()>
    7ce8:	e7d8      	b.n	7c9c <FatFile::rmdir()+0xc>

00007cea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cec:	4604      	mov	r4, r0
    7cee:	460e      	mov	r6, r1
    7cf0:	4615      	mov	r5, r2
    7cf2:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
    7cf4:	2224      	movs	r2, #36	; 0x24
    7cf6:	2100      	movs	r1, #0
    7cf8:	f009 fbd8 	bl	114ac <memset>
  m_vol = dirFile->m_vol;
    7cfc:	68b0      	ldr	r0, [r6, #8]
    7cfe:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    7d00:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
    7d02:	6a33      	ldr	r3, [r6, #32]
    7d04:	60e3      	str	r3, [r4, #12]
    7d06:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
    7d0a:	f005 050f 	and.w	r5, r5, #15
    7d0e:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7d12:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    7d14:	f011 0f08 	tst.w	r1, #8
    7d18:	d113      	bne.n	7d42 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7d1a:	f001 0117 	and.w	r1, r1, #23
    7d1e:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    7d20:	7ad3      	ldrb	r3, [r2, #11]
    7d22:	f013 0f18 	tst.w	r3, #24
    7d26:	d102      	bne.n	7d2e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
    7d28:	f041 0108 	orr.w	r1, r1, #8
    7d2c:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
    7d2e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7d32:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7d34:	f007 0303 	and.w	r3, r7, #3
    7d38:	2b01      	cmp	r3, #1
    7d3a:	d027      	beq.n	7d8c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    7d3c:	2b02      	cmp	r3, #2
    7d3e:	d027      	beq.n	7d90 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    7d40:	b11b      	cbz	r3, 7d4a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
    7d42:	2000      	movs	r0, #0
    7d44:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
    7d46:	70a0      	strb	r0, [r4, #2]
}
    7d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
    7d4a:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7d4e:	d1f8      	bne.n	7d42 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7d50:	f007 0308 	and.w	r3, r7, #8
    7d54:	f043 0301 	orr.w	r3, r3, #1
    7d58:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    7d5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7d5c:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7d5e:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7d60:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    7d66:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7d68:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    7d6a:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7d6c:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    7d70:	d105      	bne.n	7d7e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
    7d72:	2001      	movs	r0, #1
    7d74:	e7e8      	b.n	7d48 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7d76:	f001 ff19 	bl	9bac <FatPartition::freeChain(unsigned long)>
    7d7a:	b9f0      	cbnz	r0, 7dba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    7d7c:	e7e1      	b.n	7d42 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7d7e:	69e1      	ldr	r1, [r4, #28]
    7d80:	4620      	mov	r0, r4
    7d82:	f7ff ff33 	bl	7bec <FatFile::seekSet(unsigned long)>
    7d86:	2800      	cmp	r0, #0
    7d88:	d1de      	bne.n	7d48 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    7d8a:	e7da      	b.n	7d42 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
    7d8c:	2302      	movs	r3, #2
    7d8e:	e000      	b.n	7d92 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
    7d90:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
    7d92:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    7d94:	7821      	ldrb	r1, [r4, #0]
    7d96:	f011 0f11 	tst.w	r1, #17
    7d9a:	d1d2      	bne.n	7d42 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7d9c:	f007 0108 	and.w	r1, r7, #8
    7da0:	430b      	orrs	r3, r1
    7da2:	70a3      	strb	r3, [r4, #2]
    7da4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7da6:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7da8:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7daa:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7dac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
    7db0:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7db4:	d0d7      	beq.n	7d66 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7db6:	2900      	cmp	r1, #0
    7db8:	d1dd      	bne.n	7d76 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7dba:	78a3      	ldrb	r3, [r4, #2]
    7dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7dc0:	70a3      	strb	r3, [r4, #2]
    7dc2:	e7d3      	b.n	7d6c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

00007dc4 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dc8:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
    7dca:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7dcc:	2d00      	cmp	r5, #0
    7dce:	d14f      	bne.n	7e70 <FatFile::openNext(FatFile*, int)+0xac>
    7dd0:	4606      	mov	r6, r0
    7dd2:	460c      	mov	r4, r1
    7dd4:	4692      	mov	sl, r2
    7dd6:	780b      	ldrb	r3, [r1, #0]
    7dd8:	f013 0f70 	tst.w	r3, #112	; 0x70
    7ddc:	d04c      	beq.n	7e78 <FatFile::openNext(FatFile*, int)+0xb4>
    7dde:	694b      	ldr	r3, [r1, #20]
    7de0:	f013 0f1f 	tst.w	r3, #31
    7de4:	d14a      	bne.n	7e7c <FatFile::openNext(FatFile*, int)+0xb8>
    7de6:	46a9      	mov	r9, r5
    7de8:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
    7dea:	2700      	movs	r7, #0
    7dec:	e000      	b.n	7df0 <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
    7dee:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
    7df0:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
    7df4:	4639      	mov	r1, r7
    7df6:	4620      	mov	r0, r4
    7df8:	f7ff fed6 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!dir) {
    7dfc:	4602      	mov	r2, r0
    7dfe:	2800      	cmp	r0, #0
    7e00:	d03e      	beq.n	7e80 <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
    7e02:	7803      	ldrb	r3, [r0, #0]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d03d      	beq.n	7e84 <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7e08:	2be5      	cmp	r3, #229	; 0xe5
    7e0a:	bf18      	it	ne
    7e0c:	2b2e      	cmpne	r3, #46	; 0x2e
    7e0e:	bf0c      	ite	eq
    7e10:	2001      	moveq	r0, #1
    7e12:	2000      	movne	r0, #0
    7e14:	d0eb      	beq.n	7dee <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7e16:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
    7e18:	f011 0c08 	ands.w	ip, r1, #8
    7e1c:	d003      	beq.n	7e26 <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
    7e1e:	290f      	cmp	r1, #15
    7e20:	d01e      	beq.n	7e60 <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
    7e22:	46a9      	mov	r9, r5
    7e24:	e7e4      	b.n	7df0 <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7e26:	f1b9 0f00 	cmp.w	r9, #0
    7e2a:	d00f      	beq.n	7e4c <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7e2c:	1e51      	subs	r1, r2, #1
    7e2e:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7e30:	ea4f 13cc 	mov.w	r3, ip, lsl #7
    7e34:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    7e38:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    7e3c:	fa55 f383 	uxtab	r3, r5, r3
    7e40:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
    7e44:	4291      	cmp	r1, r2
    7e46:	d1f3      	bne.n	7e30 <FatFile::openNext(FatFile*, int)+0x6c>
    7e48:	45e3      	cmp	fp, ip
    7e4a:	d112      	bne.n	7e72 <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7e4c:	f8cd 9000 	str.w	r9, [sp]
    7e50:	4653      	mov	r3, sl
    7e52:	f3c8 124f 	ubfx	r2, r8, #5, #16
    7e56:	4621      	mov	r1, r4
    7e58:	4630      	mov	r0, r6
    7e5a:	f7ff ff46 	bl	7cea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7e5e:	e008      	b.n	7e72 <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7e60:	f013 0f40 	tst.w	r3, #64	; 0x40
    7e64:	d0c4      	beq.n	7df0 <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
    7e66:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
    7e6a:	f892 b00d 	ldrb.w	fp, [r2, #13]
    7e6e:	e7bf      	b.n	7df0 <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
    7e70:	2000      	movs	r0, #0
}
    7e72:	b003      	add	sp, #12
    7e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    7e78:	2000      	movs	r0, #0
    7e7a:	e7fa      	b.n	7e72 <FatFile::openNext(FatFile*, int)+0xae>
    7e7c:	2000      	movs	r0, #0
    7e7e:	e7f8      	b.n	7e72 <FatFile::openNext(FatFile*, int)+0xae>
    7e80:	2000      	movs	r0, #0
    7e82:	e7f6      	b.n	7e72 <FatFile::openNext(FatFile*, int)+0xae>
    7e84:	2000      	movs	r0, #0
    7e86:	e7f4      	b.n	7e72 <FatFile::openNext(FatFile*, int)+0xae>

00007e88 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7e88:	7803      	ldrb	r3, [r0, #0]
    7e8a:	2b00      	cmp	r3, #0
    7e8c:	d049      	beq.n	7f22 <FatFile::sync()+0x9a>
bool FatFile::sync() {
    7e8e:	b530      	push	{r4, r5, lr}
    7e90:	b083      	sub	sp, #12
    7e92:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7e94:	f990 3002 	ldrsb.w	r3, [r0, #2]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	db0d      	blt.n	7eb8 <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7e9c:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7e9e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7ea2:	f003 ff19 	bl	bcd8 <FsCache::sync()>
    7ea6:	2800      	cmp	r0, #0
    7ea8:	d12e      	bne.n	7f08 <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7eaa:	7863      	ldrb	r3, [r4, #1]
    7eac:	f043 0301 	orr.w	r3, r3, #1
    7eb0:	7063      	strb	r3, [r4, #1]
  return false;
    7eb2:	2000      	movs	r0, #0
}
    7eb4:	b003      	add	sp, #12
    7eb6:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7eb8:	2101      	movs	r1, #1
    7eba:	f7ff fd47 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7ebe:	4605      	mov	r5, r0
    7ec0:	2800      	cmp	r0, #0
    7ec2:	d0f2      	beq.n	7eaa <FatFile::sync()+0x22>
    7ec4:	7803      	ldrb	r3, [r0, #0]
    7ec6:	2be5      	cmp	r3, #229	; 0xe5
    7ec8:	d0ef      	beq.n	7eaa <FatFile::sync()+0x22>
    if (isFile()) {
    7eca:	7823      	ldrb	r3, [r4, #0]
    7ecc:	f013 0f08 	tst.w	r3, #8
    7ed0:	d001      	beq.n	7ed6 <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
    7ed2:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7ed4:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7ed6:	6a23      	ldr	r3, [r4, #32]
    7ed8:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7eda:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7edc:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
    7ede:	4b12      	ldr	r3, [pc, #72]	; (7f28 <FatFile::sync()+0xa0>)
    7ee0:	681b      	ldr	r3, [r3, #0]
    7ee2:	b163      	cbz	r3, 7efe <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
    7ee4:	f10d 0203 	add.w	r2, sp, #3
    7ee8:	a901      	add	r1, sp, #4
    7eea:	f10d 0006 	add.w	r0, sp, #6
    7eee:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    7ef0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7ef4:	832b      	strh	r3, [r5, #24]
    7ef6:	826b      	strh	r3, [r5, #18]
    7ef8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7efc:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7efe:	78a3      	ldrb	r3, [r4, #2]
    7f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7f04:	70a3      	strb	r3, [r4, #2]
    7f06:	e7c9      	b.n	7e9c <FatFile::sync()+0x14>
    7f08:	f505 700e 	add.w	r0, r5, #568	; 0x238
    7f0c:	f003 fee4 	bl	bcd8 <FsCache::sync()>
    7f10:	2800      	cmp	r0, #0
    7f12:	d0ca      	beq.n	7eaa <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
    7f14:	6828      	ldr	r0, [r5, #0]
    7f16:	6803      	ldr	r3, [r0, #0]
    7f18:	6a1b      	ldr	r3, [r3, #32]
    7f1a:	4798      	blx	r3
  if (m_vol->cacheSync()) {
    7f1c:	2800      	cmp	r0, #0
    7f1e:	d1c9      	bne.n	7eb4 <FatFile::sync()+0x2c>
 fail:
    7f20:	e7c3      	b.n	7eaa <FatFile::sync()+0x22>
    return true;
    7f22:	2001      	movs	r0, #1
}
    7f24:	4770      	bx	lr
    7f26:	bf00      	nop
    7f28:	20004c5c 	.word	0x20004c5c

00007f2c <FatFile::close()>:
bool FatFile::close() {
    7f2c:	b510      	push	{r4, lr}
    7f2e:	4604      	mov	r4, r0
  bool rtn = sync();
    7f30:	f7ff ffaa 	bl	7e88 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7f34:	2300      	movs	r3, #0
    7f36:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7f38:	70a3      	strb	r3, [r4, #2]
}
    7f3a:	bd10      	pop	{r4, pc}

00007f3c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f3e:	b095      	sub	sp, #84	; 0x54
    7f40:	9201      	str	r2, [sp, #4]
    7f42:	461f      	mov	r7, r3
  FatFile() {}
    7f44:	2300      	movs	r3, #0
    7f46:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7f4a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    7f4e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    7f52:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    7f56:	7803      	ldrb	r3, [r0, #0]
    7f58:	2b00      	cmp	r3, #0
    7f5a:	d14e      	bne.n	7ffa <FatFile::open(FatFile*, char const*, int)+0xbe>
    7f5c:	4604      	mov	r4, r0
    7f5e:	460d      	mov	r5, r1
    7f60:	780b      	ldrb	r3, [r1, #0]
    7f62:	f013 0f70 	tst.w	r3, #112	; 0x70
    7f66:	d04c      	beq.n	8002 <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
    7f68:	4613      	mov	r3, r2
    7f6a:	7812      	ldrb	r2, [r2, #0]
    7f6c:	2a2f      	cmp	r2, #47	; 0x2f
    7f6e:	d028      	beq.n	7fc2 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7f70:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
    7f72:	ab01      	add	r3, sp, #4
    7f74:	aa02      	add	r2, sp, #8
    7f76:	9901      	ldr	r1, [sp, #4]
    7f78:	4620      	mov	r0, r4
    7f7a:	f000 ffbb 	bl	8ef4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7f7e:	4603      	mov	r3, r0
    7f80:	2800      	cmp	r0, #0
    7f82:	d03b      	beq.n	7ffc <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
    7f84:	9b01      	ldr	r3, [sp, #4]
    7f86:	781b      	ldrb	r3, [r3, #0]
    7f88:	b37b      	cbz	r3, 7fea <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7f8a:	4633      	mov	r3, r6
    7f8c:	aa02      	add	r2, sp, #8
    7f8e:	4629      	mov	r1, r5
    7f90:	4620      	mov	r0, r4
    7f92:	f000 fe2f 	bl	8bf4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7f96:	4603      	mov	r3, r0
    7f98:	b380      	cbz	r0, 7ffc <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
    7f9a:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7f9e:	46a6      	mov	lr, r4
    7fa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7fa8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7fac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7fb0:	f8de 3000 	ldr.w	r3, [lr]
    7fb4:	f8cc 3000 	str.w	r3, [ip]
    close();
    7fb8:	4620      	mov	r0, r4
    7fba:	f7ff ffb7 	bl	7f2c <FatFile::close()>
    dirFile = &tmpDir;
    7fbe:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7fc0:	e7d7      	b.n	7f72 <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
    7fc2:	3301      	adds	r3, #1
    7fc4:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7fc6:	781a      	ldrb	r2, [r3, #0]
    7fc8:	2a2f      	cmp	r2, #47	; 0x2f
    7fca:	d0fa      	beq.n	7fc2 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
    7fcc:	b92a      	cbnz	r2, 7fda <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
    7fce:	68a9      	ldr	r1, [r5, #8]
    7fd0:	4620      	mov	r0, r4
    7fd2:	f7ff fccc 	bl	796e <FatFile::openRoot(FatVolume*)>
    7fd6:	4603      	mov	r3, r0
    7fd8:	e010      	b.n	7ffc <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7fda:	68a9      	ldr	r1, [r5, #8]
    7fdc:	a80b      	add	r0, sp, #44	; 0x2c
    7fde:	f7ff fcc6 	bl	796e <FatFile::openRoot(FatVolume*)>
    7fe2:	4603      	mov	r3, r0
    7fe4:	b150      	cbz	r0, 7ffc <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
    7fe6:	ad0b      	add	r5, sp, #44	; 0x2c
    7fe8:	e7c2      	b.n	7f70 <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
    7fea:	463b      	mov	r3, r7
    7fec:	aa02      	add	r2, sp, #8
    7fee:	4629      	mov	r1, r5
    7ff0:	4620      	mov	r0, r4
    7ff2:	f000 fdff 	bl	8bf4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7ff6:	4603      	mov	r3, r0
    7ff8:	e000      	b.n	7ffc <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
    7ffa:	2300      	movs	r3, #0
}
    7ffc:	4618      	mov	r0, r3
    7ffe:	b015      	add	sp, #84	; 0x54
    8000:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    8002:	2300      	movs	r3, #0
    8004:	e7fa      	b.n	7ffc <FatFile::open(FatFile*, char const*, int)+0xc0>

00008006 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    8006:	b129      	cbz	r1, 8014 <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
    8008:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    800a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    800e:	f7ff ff95 	bl	7f3c <FatFile::open(FatFile*, char const*, int)>
}
    8012:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    8014:	2000      	movs	r0, #0
}
    8016:	4770      	bx	lr

00008018 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    8018:	b570      	push	{r4, r5, r6, lr}
    801a:	4605      	mov	r5, r0
    801c:	460c      	mov	r4, r1
  if (!sync()) {
    801e:	f7ff ff33 	bl	7e88 <FatFile::sync()>
    8022:	4606      	mov	r6, r0
    8024:	b908      	cbnz	r0, 802a <FatFile::dirEntry(DirFat_t*)+0x12>
}
    8026:	4630      	mov	r0, r6
    8028:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    802a:	2100      	movs	r1, #0
    802c:	4628      	mov	r0, r5
    802e:	f7ff fc8d 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8032:	4603      	mov	r3, r0
    8034:	b180      	cbz	r0, 8058 <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
    8036:	6805      	ldr	r5, [r0, #0]
    8038:	6840      	ldr	r0, [r0, #4]
    803a:	6899      	ldr	r1, [r3, #8]
    803c:	68da      	ldr	r2, [r3, #12]
    803e:	6025      	str	r5, [r4, #0]
    8040:	6060      	str	r0, [r4, #4]
    8042:	60a1      	str	r1, [r4, #8]
    8044:	60e2      	str	r2, [r4, #12]
    8046:	691d      	ldr	r5, [r3, #16]
    8048:	6958      	ldr	r0, [r3, #20]
    804a:	6999      	ldr	r1, [r3, #24]
    804c:	69da      	ldr	r2, [r3, #28]
    804e:	6125      	str	r5, [r4, #16]
    8050:	6160      	str	r0, [r4, #20]
    8052:	61a1      	str	r1, [r4, #24]
    8054:	61e2      	str	r2, [r4, #28]
  return true;
    8056:	e7e6      	b.n	8026 <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
    8058:	2600      	movs	r6, #0
    805a:	e7e4      	b.n	8026 <FatFile::dirEntry(DirFat_t*)+0xe>

0000805c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    805c:	b530      	push	{r4, r5, lr}
    805e:	b089      	sub	sp, #36	; 0x24
    8060:	460d      	mov	r5, r1
    8062:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8064:	4669      	mov	r1, sp
    8066:	f7ff ffd7 	bl	8018 <FatFile::dirEntry(DirFat_t*)>
    806a:	b128      	cbz	r0, 8078 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    806c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8070:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    8072:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8076:	8023      	strh	r3, [r4, #0]
}
    8078:	b009      	add	sp, #36	; 0x24
    807a:	bd30      	pop	{r4, r5, pc}

0000807c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    807c:	b530      	push	{r4, r5, lr}
    807e:	b089      	sub	sp, #36	; 0x24
    8080:	460d      	mov	r5, r1
    8082:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8084:	4669      	mov	r1, sp
    8086:	f7ff ffc7 	bl	8018 <FatFile::dirEntry(DirFat_t*)>
    808a:	b128      	cbz	r0, 8098 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    808c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    8090:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    8092:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8096:	8023      	strh	r3, [r4, #0]
}
    8098:	b009      	add	sp, #36	; 0x24
    809a:	bd30      	pop	{r4, r5, pc}

0000809c <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    809c:	780b      	ldrb	r3, [r1, #0]
    809e:	f013 0f70 	tst.w	r3, #112	; 0x70
    80a2:	d101      	bne.n	80a8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
    80a4:	2000      	movs	r0, #0
}
    80a6:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    80a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    80aa:	b089      	sub	sp, #36	; 0x24
    80ac:	4604      	mov	r4, r0
    80ae:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    80b0:	f640 2302 	movw	r3, #2562	; 0xa02
    80b4:	f000 fd9e 	bl	8bf4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    80b8:	b908      	cbnz	r0, 80be <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
    80ba:	b009      	add	sp, #36	; 0x24
    80bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
    80be:	2301      	movs	r3, #1
    80c0:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    80c2:	2310      	movs	r3, #16
    80c4:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    80c6:	4620      	mov	r0, r4
    80c8:	f7ff fbfe 	bl	78c8 <FatFile::addDirCluster()>
    80cc:	2800      	cmp	r0, #0
    80ce:	d0f4      	beq.n	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
    80d0:	6923      	ldr	r3, [r4, #16]
    80d2:	6223      	str	r3, [r4, #32]
    seekSet(0);
    80d4:	2100      	movs	r1, #0
    80d6:	4620      	mov	r0, r4
    80d8:	f7ff fd88 	bl	7bec <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    80dc:	4620      	mov	r0, r4
    80de:	f7ff fed3 	bl	7e88 <FatFile::sync()>
    80e2:	2800      	cmp	r0, #0
    80e4:	d0e9      	beq.n	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    80e6:	2101      	movs	r1, #1
    80e8:	4620      	mov	r0, r4
    80ea:	f7ff fc2f 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    80ee:	4686      	mov	lr, r0
    80f0:	2800      	cmp	r0, #0
    80f2:	d07b      	beq.n	81ec <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    80f4:	2310      	movs	r3, #16
    80f6:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    80f8:	46ec      	mov	ip, sp
    80fa:	6800      	ldr	r0, [r0, #0]
    80fc:	f8de 1004 	ldr.w	r1, [lr, #4]
    8100:	f8de 2008 	ldr.w	r2, [lr, #8]
    8104:	f8de 300c 	ldr.w	r3, [lr, #12]
    8108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    810c:	f8de 0010 	ldr.w	r0, [lr, #16]
    8110:	f8de 1014 	ldr.w	r1, [lr, #20]
    8114:	f8de 2018 	ldr.w	r2, [lr, #24]
    8118:	f8de 301c 	ldr.w	r3, [lr, #28]
    811c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8120:	f8be 6014 	ldrh.w	r6, [lr, #20]
    8124:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
    8128:	232e      	movs	r3, #46	; 0x2e
    812a:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    812e:	466b      	mov	r3, sp
    8130:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
    8134:	2220      	movs	r2, #32
    8136:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
    813a:	428b      	cmp	r3, r1
    813c:	d1fb      	bne.n	8136 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
    813e:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8140:	6a23      	ldr	r3, [r4, #32]
    8142:	3b02      	subs	r3, #2
    8144:	7982      	ldrb	r2, [r0, #6]
    8146:	4093      	lsls	r3, r2
    8148:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    814a:	2201      	movs	r2, #1
    814c:	4419      	add	r1, r3
    814e:	3028      	adds	r0, #40	; 0x28
    8150:	f003 fde9 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8154:	4684      	mov	ip, r0
    8156:	2800      	cmp	r0, #0
    8158:	d04a      	beq.n	81f0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
    815a:	f8ad 6014 	strh.w	r6, [sp, #20]
    815e:	f8ad 701a 	strh.w	r7, [sp, #26]
    8162:	46ee      	mov	lr, sp
    8164:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8168:	f8cc 0000 	str.w	r0, [ip]
    816c:	f8cc 1004 	str.w	r1, [ip, #4]
    8170:	f8cc 2008 	str.w	r2, [ip, #8]
    8174:	f8cc 300c 	str.w	r3, [ip, #12]
    8178:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    817c:	f8cc 0010 	str.w	r0, [ip, #16]
    8180:	f8cc 1014 	str.w	r1, [ip, #20]
    8184:	f8cc 2018 	str.w	r2, [ip, #24]
    8188:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
    818c:	232e      	movs	r3, #46	; 0x2e
    818e:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8192:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8194:	0c1a      	lsrs	r2, r3, #16
    8196:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    819a:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    819e:	466d      	mov	r5, sp
    81a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81a2:	f8cc 0020 	str.w	r0, [ip, #32]
    81a6:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    81aa:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    81ae:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    81b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81b4:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    81b8:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    81bc:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    81c0:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    81c4:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    81c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    81ca:	f003 fd85 	bl	bcd8 <FsCache::sync()>
    81ce:	2800      	cmp	r0, #0
    81d0:	f43f af73 	beq.w	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    81d4:	f504 700e 	add.w	r0, r4, #568	; 0x238
    81d8:	f003 fd7e 	bl	bcd8 <FsCache::sync()>
    81dc:	2800      	cmp	r0, #0
    81de:	f43f af6c 	beq.w	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
    81e2:	6820      	ldr	r0, [r4, #0]
    81e4:	6803      	ldr	r3, [r0, #0]
    81e6:	6a1b      	ldr	r3, [r3, #32]
    81e8:	4798      	blx	r3
    81ea:	e766      	b.n	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
    81ec:	2000      	movs	r0, #0
    81ee:	e764      	b.n	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    81f0:	2000      	movs	r0, #0
    81f2:	e762      	b.n	80ba <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

000081f4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    81f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    81f6:	b095      	sub	sp, #84	; 0x54
    81f8:	9201      	str	r2, [sp, #4]
    81fa:	461e      	mov	r6, r3
    81fc:	2300      	movs	r3, #0
    81fe:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
    8202:	f88d 3008 	strb.w	r3, [sp, #8]
    8206:	f88d 3009 	strb.w	r3, [sp, #9]
    820a:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
    820e:	7803      	ldrb	r3, [r0, #0]
    8210:	2b00      	cmp	r3, #0
    8212:	d150      	bne.n	82b6 <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    8214:	4604      	mov	r4, r0
    8216:	460d      	mov	r5, r1
    8218:	780b      	ldrb	r3, [r1, #0]
    821a:	f013 0f70 	tst.w	r3, #112	; 0x70
    821e:	d04e      	beq.n	82be <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
    8220:	4613      	mov	r3, r2
    8222:	7812      	ldrb	r2, [r2, #0]
    8224:	2a2f      	cmp	r2, #47	; 0x2f
    8226:	d001      	beq.n	822c <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
    8228:	2700      	movs	r7, #0
    822a:	e020      	b.n	826e <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
    822c:	3301      	adds	r3, #1
    822e:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    8230:	781a      	ldrb	r2, [r3, #0]
    8232:	2a2f      	cmp	r2, #47	; 0x2f
    8234:	d0fa      	beq.n	822c <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
    8236:	68a9      	ldr	r1, [r5, #8]
    8238:	a802      	add	r0, sp, #8
    823a:	f7ff fb98 	bl	796e <FatFile::openRoot(FatVolume*)>
    823e:	4602      	mov	r2, r0
    8240:	2800      	cmp	r0, #0
    8242:	d039      	beq.n	82b8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
    8244:	ad02      	add	r5, sp, #8
    8246:	e7ef      	b.n	8228 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
    8248:	f10d 0c08 	add.w	ip, sp, #8
    824c:	46a6      	mov	lr, r4
    824e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8252:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8256:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    825a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    825e:	f8de 3000 	ldr.w	r3, [lr]
    8262:	f8cc 3000 	str.w	r3, [ip]
    close();
    8266:	4620      	mov	r0, r4
    8268:	f7ff fe60 	bl	7f2c <FatFile::close()>
    parent = &tmpDir;
    826c:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    826e:	ab01      	add	r3, sp, #4
    8270:	aa0b      	add	r2, sp, #44	; 0x2c
    8272:	9901      	ldr	r1, [sp, #4]
    8274:	4620      	mov	r0, r4
    8276:	f000 fe3d 	bl	8ef4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    827a:	4602      	mov	r2, r0
    827c:	b1e0      	cbz	r0, 82b8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
    827e:	9b01      	ldr	r3, [sp, #4]
    8280:	781b      	ldrb	r3, [r3, #0]
    8282:	b18b      	cbz	r3, 82a8 <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
    8284:	463b      	mov	r3, r7
    8286:	aa0b      	add	r2, sp, #44	; 0x2c
    8288:	4629      	mov	r1, r5
    828a:	4620      	mov	r0, r4
    828c:	f000 fcb2 	bl	8bf4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8290:	2800      	cmp	r0, #0
    8292:	d1d9      	bne.n	8248 <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
    8294:	b1ae      	cbz	r6, 82c2 <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
    8296:	aa0b      	add	r2, sp, #44	; 0x2c
    8298:	4629      	mov	r1, r5
    829a:	4620      	mov	r0, r4
    829c:	f7ff fefe 	bl	809c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    82a0:	4602      	mov	r2, r0
    82a2:	2800      	cmp	r0, #0
    82a4:	d1d0      	bne.n	8248 <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
    82a6:	e007      	b.n	82b8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
    82a8:	aa0b      	add	r2, sp, #44	; 0x2c
    82aa:	4629      	mov	r1, r5
    82ac:	4620      	mov	r0, r4
    82ae:	f7ff fef5 	bl	809c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    82b2:	4602      	mov	r2, r0
    82b4:	e000      	b.n	82b8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
    82b6:	2200      	movs	r2, #0
}
    82b8:	4610      	mov	r0, r2
    82ba:	b015      	add	sp, #84	; 0x54
    82bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    82be:	2200      	movs	r2, #0
    82c0:	e7fa      	b.n	82b8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    82c2:	4632      	mov	r2, r6
    82c4:	e7f8      	b.n	82b8 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

000082c6 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    82c6:	b570      	push	{r4, r5, r6, lr}
    82c8:	b09a      	sub	sp, #104	; 0x68
    82ca:	2300      	movs	r3, #0
    82cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    82d0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    82d4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    82d8:	f88d 3000 	strb.w	r3, [sp]
    82dc:	f88d 3001 	strb.w	r3, [sp, #1]
    82e0:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
    82e4:	7803      	ldrb	r3, [r0, #0]
    82e6:	f013 0f18 	tst.w	r3, #24
    82ea:	f000 80e3 	beq.w	84b4 <FatFile::rename(FatFile*, char const*)+0x1ee>
    82ee:	4604      	mov	r4, r0
    82f0:	460d      	mov	r5, r1
    82f2:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
    82f4:	6882      	ldr	r2, [r0, #8]
    82f6:	688b      	ldr	r3, [r1, #8]
    82f8:	429a      	cmp	r2, r3
    82fa:	d002      	beq.n	8302 <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
    82fc:	2000      	movs	r0, #0
}
    82fe:	b01a      	add	sp, #104	; 0x68
    8300:	bd70      	pop	{r4, r5, r6, pc}
  sync();
    8302:	f7ff fdc1 	bl	7e88 <FatFile::sync()>
  oldFile = *this;
    8306:	46ec      	mov	ip, sp
    8308:	46a6      	mov	lr, r4
    830a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    830e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8312:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8316:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    831a:	f8de 3000 	ldr.w	r3, [lr]
    831e:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    8322:	2100      	movs	r1, #0
    8324:	4620      	mov	r0, r4
    8326:	f7ff fb11 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    832a:	4686      	mov	lr, r0
    832c:	2800      	cmp	r0, #0
    832e:	f000 80c3 	beq.w	84b8 <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
    8332:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    8336:	6800      	ldr	r0, [r0, #0]
    8338:	f8de 1004 	ldr.w	r1, [lr, #4]
    833c:	f8de 2008 	ldr.w	r2, [lr, #8]
    8340:	f8de 300c 	ldr.w	r3, [lr, #12]
    8344:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8348:	f8de 0010 	ldr.w	r0, [lr, #16]
    834c:	f8de 1014 	ldr.w	r1, [lr, #20]
    8350:	f8de 2018 	ldr.w	r2, [lr, #24]
    8354:	f8de 301c 	ldr.w	r3, [lr, #28]
    8358:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    835c:	7823      	ldrb	r3, [r4, #0]
    835e:	f013 0f08 	tst.w	r3, #8
    8362:	d00a      	beq.n	837a <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8364:	f640 2301 	movw	r3, #2561	; 0xa01
    8368:	4632      	mov	r2, r6
    836a:	4629      	mov	r1, r5
    836c:	a809      	add	r0, sp, #36	; 0x24
    836e:	f7ff fde5 	bl	7f3c <FatFile::open(FatFile*, char const*, int)>
    8372:	2800      	cmp	r0, #0
    8374:	d0c3      	beq.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
    8376:	2600      	movs	r6, #0
    8378:	e008      	b.n	838c <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
    837a:	2300      	movs	r3, #0
    837c:	4632      	mov	r2, r6
    837e:	4629      	mov	r1, r5
    8380:	a809      	add	r0, sp, #36	; 0x24
    8382:	f7ff ff37 	bl	81f4 <FatFile::mkdir(FatFile*, char const*, bool)>
    8386:	2800      	cmp	r0, #0
    8388:	d0b9      	beq.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
    838a:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
    838c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    838e:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    8390:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8394:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    8396:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    839a:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    839c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    839e:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    83a0:	2300      	movs	r3, #0
    83a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
    83a6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    83aa:	2101      	movs	r1, #1
    83ac:	4620      	mov	r0, r4
    83ae:	f7ff facd 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    83b2:	4603      	mov	r3, r0
    83b4:	2800      	cmp	r0, #0
    83b6:	f000 8081 	beq.w	84bc <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    83ba:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
    83be:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
    83c2:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
    83c6:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
    83ca:	f8c3 500d 	str.w	r5, [r3, #13]
    83ce:	f8c3 0011 	str.w	r0, [r3, #17]
    83d2:	f8c3 1015 	str.w	r1, [r3, #21]
    83d6:	f8c3 2019 	str.w	r2, [r3, #25]
    83da:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
    83de:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    83e2:	f8a3 101d 	strh.w	r1, [r3, #29]
    83e6:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
    83e8:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
    83ec:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
    83ee:	2e00      	cmp	r6, #0
    83f0:	d03e      	beq.n	8470 <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    83f2:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    83f4:	1eb3      	subs	r3, r6, #2
    83f6:	7982      	ldrb	r2, [r0, #6]
    83f8:	4093      	lsls	r3, r2
    83fa:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    83fc:	2200      	movs	r2, #0
    83fe:	4419      	add	r1, r3
    8400:	3028      	adds	r0, #40	; 0x28
    8402:	f003 fc90 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8406:	4684      	mov	ip, r0
    8408:	2800      	cmp	r0, #0
    840a:	d059      	beq.n	84c0 <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
    840c:	ad12      	add	r5, sp, #72	; 0x48
    840e:	6a00      	ldr	r0, [r0, #32]
    8410:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
    8414:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
    8418:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    841c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    841e:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
    8422:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
    8426:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
    842a:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    842e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    8430:	4631      	mov	r1, r6
    8432:	68a0      	ldr	r0, [r4, #8]
    8434:	f001 fbba 	bl	9bac <FatPartition::freeChain(unsigned long)>
    8438:	2800      	cmp	r0, #0
    843a:	f43f af60 	beq.w	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
    843e:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8440:	6a23      	ldr	r3, [r4, #32]
    8442:	3b02      	subs	r3, #2
    8444:	7982      	ldrb	r2, [r0, #6]
    8446:	4093      	lsls	r3, r2
    8448:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    844a:	2201      	movs	r2, #1
    844c:	4419      	add	r1, r3
    844e:	3028      	adds	r0, #40	; 0x28
    8450:	f003 fc69 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8454:	4606      	mov	r6, r0
    8456:	2800      	cmp	r0, #0
    8458:	d034      	beq.n	84c4 <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
    845a:	ad12      	add	r5, sp, #72	; 0x48
    845c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    845e:	6230      	str	r0, [r6, #32]
    8460:	6271      	str	r1, [r6, #36]	; 0x24
    8462:	62b2      	str	r2, [r6, #40]	; 0x28
    8464:	62f3      	str	r3, [r6, #44]	; 0x2c
    8466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8468:	6330      	str	r0, [r6, #48]	; 0x30
    846a:	6371      	str	r1, [r6, #52]	; 0x34
    846c:	63b2      	str	r2, [r6, #56]	; 0x38
    846e:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8470:	2300      	movs	r3, #0
    8472:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
    8474:	2302      	movs	r3, #2
    8476:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
    847a:	2308      	movs	r3, #8
    847c:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
    8480:	4668      	mov	r0, sp
    8482:	f000 fda5 	bl	8fd0 <FatFile::remove()>
    8486:	2800      	cmp	r0, #0
    8488:	f43f af39 	beq.w	82fe <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
    848c:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    848e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8492:	f003 fc21 	bl	bcd8 <FsCache::sync()>
    8496:	2800      	cmp	r0, #0
    8498:	f43f af31 	beq.w	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    849c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    84a0:	f003 fc1a 	bl	bcd8 <FsCache::sync()>
    84a4:	2800      	cmp	r0, #0
    84a6:	f43f af2a 	beq.w	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
    84aa:	6820      	ldr	r0, [r4, #0]
    84ac:	6803      	ldr	r3, [r0, #0]
    84ae:	6a1b      	ldr	r3, [r3, #32]
    84b0:	4798      	blx	r3
    84b2:	e724      	b.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
    84b4:	2000      	movs	r0, #0
    84b6:	e722      	b.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    84b8:	2000      	movs	r0, #0
    84ba:	e720      	b.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    84bc:	2000      	movs	r0, #0
    84be:	e71e      	b.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    84c0:	2000      	movs	r0, #0
    84c2:	e71c      	b.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>
    84c4:	2000      	movs	r0, #0
    84c6:	e71a      	b.n	82fe <FatFile::rename(FatFile*, char const*)+0x38>

000084c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    84c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84cc:	b083      	sub	sp, #12
    84ce:	9101      	str	r1, [sp, #4]
    84d0:	461e      	mov	r6, r3
    84d2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    84d6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    84da:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    84de:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    84e2:	7803      	ldrb	r3, [r0, #0]
    84e4:	f013 0f08 	tst.w	r3, #8
    84e8:	d060      	beq.n	85ac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
    84ea:	4605      	mov	r5, r0
      || year > 2107
    84ec:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    84f0:	b294      	uxth	r4, r2
    84f2:	2c7f      	cmp	r4, #127	; 0x7f
    84f4:	d85e      	bhi.n	85b4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
    84f6:	1e73      	subs	r3, r6, #1
    84f8:	b2db      	uxtb	r3, r3
    84fa:	2b0b      	cmp	r3, #11
    84fc:	d85c      	bhi.n	85b8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
    84fe:	1e7b      	subs	r3, r7, #1
    8500:	b2db      	uxtb	r3, r3
    8502:	2b1e      	cmp	r3, #30
    8504:	d85a      	bhi.n	85bc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
    8506:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    850a:	bf98      	it	ls
    850c:	f1b9 0f17 	cmpls.w	r9, #23
    8510:	bf8c      	ite	hi
    8512:	f04f 0b01 	movhi.w	fp, #1
    8516:	f04f 0b00 	movls.w	fp, #0
    851a:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    851e:	bf88      	it	hi
    8520:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
    8524:	f1bb 0f00 	cmp.w	fp, #0
    8528:	d001      	beq.n	852e <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    852a:	2000      	movs	r0, #0
    852c:	e03f      	b.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
    852e:	f7ff fcab 	bl	7e88 <FatFile::sync()>
    8532:	2800      	cmp	r0, #0
    8534:	d03b      	beq.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8536:	2101      	movs	r1, #1
    8538:	4628      	mov	r0, r5
    853a:	f7ff fa07 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    853e:	4601      	mov	r1, r0
    8540:	2800      	cmp	r0, #0
    8542:	d03d      	beq.n	85c0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    8544:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
    8548:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    854c:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    854e:	ea4f 0258 	mov.w	r2, r8, lsr #1
    8552:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
    8556:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
    855a:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
    855c:	9801      	ldr	r0, [sp, #4]
    855e:	f010 0f01 	tst.w	r0, #1
    8562:	bf18      	it	ne
    8564:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
    8566:	9801      	ldr	r0, [sp, #4]
    8568:	f010 0f02 	tst.w	r0, #2
    856c:	d008      	beq.n	8580 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
    856e:	820b      	strh	r3, [r1, #16]
    8570:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
    8572:	f018 0801 	ands.w	r8, r8, #1
    8576:	bf18      	it	ne
    8578:	f04f 0864 	movne.w	r8, #100	; 0x64
    857c:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
    8580:	9801      	ldr	r0, [sp, #4]
    8582:	f010 0f04 	tst.w	r0, #4
    8586:	d001      	beq.n	858c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
    8588:	830b      	strh	r3, [r1, #24]
    858a:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
    858c:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    858e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8592:	f003 fba1 	bl	bcd8 <FsCache::sync()>
    8596:	b150      	cbz	r0, 85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    8598:	f504 700e 	add.w	r0, r4, #568	; 0x238
    859c:	f003 fb9c 	bl	bcd8 <FsCache::sync()>
    85a0:	b128      	cbz	r0, 85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
    85a2:	6820      	ldr	r0, [r4, #0]
    85a4:	6803      	ldr	r3, [r0, #0]
    85a6:	6a1b      	ldr	r3, [r3, #32]
    85a8:	4798      	blx	r3
    85aa:	e000      	b.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
    85ac:	2000      	movs	r0, #0
}
    85ae:	b003      	add	sp, #12
    85b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    85b4:	2000      	movs	r0, #0
    85b6:	e7fa      	b.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    85b8:	2000      	movs	r0, #0
    85ba:	e7f8      	b.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    85bc:	2000      	movs	r0, #0
    85be:	e7f6      	b.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    85c0:	4658      	mov	r0, fp
    85c2:	e7f4      	b.n	85ae <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

000085c4 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    85c4:	7883      	ldrb	r3, [r0, #2]
    85c6:	f013 0f02 	tst.w	r3, #2
    85ca:	d02f      	beq.n	862c <FatFile::truncate()+0x68>
bool FatFile::truncate() {
    85cc:	b510      	push	{r4, lr}
    85ce:	b082      	sub	sp, #8
    85d0:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    85d2:	6a01      	ldr	r1, [r0, #32]
    85d4:	b361      	cbz	r1, 8630 <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
    85d6:	6903      	ldr	r3, [r0, #16]
    85d8:	b93b      	cbnz	r3, 85ea <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    85da:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
    85dc:	2300      	movs	r3, #0
    85de:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    85e0:	68a0      	ldr	r0, [r4, #8]
    85e2:	f001 fae3 	bl	9bac <FatPartition::freeChain(unsigned long)>
    85e6:	b968      	cbnz	r0, 8604 <FatFile::truncate()+0x40>
    85e8:	e015      	b.n	8616 <FatFile::truncate()+0x52>
    toFree = 0;
    85ea:	2200      	movs	r2, #0
    85ec:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    85ee:	aa01      	add	r2, sp, #4
    85f0:	4619      	mov	r1, r3
    85f2:	6880      	ldr	r0, [r0, #8]
    85f4:	f001 f971 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    85f8:	2800      	cmp	r0, #0
    85fa:	db1b      	blt.n	8634 <FatFile::truncate()+0x70>
    if (fg) {
    85fc:	b968      	cbnz	r0, 861a <FatFile::truncate()+0x56>
  if (toFree) {
    85fe:	9901      	ldr	r1, [sp, #4]
    8600:	2900      	cmp	r1, #0
    8602:	d1ed      	bne.n	85e0 <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    8604:	6963      	ldr	r3, [r4, #20]
    8606:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8608:	78a3      	ldrb	r3, [r4, #2]
    860a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    860e:	70a3      	strb	r3, [r4, #2]
  return sync();
    8610:	4620      	mov	r0, r4
    8612:	f7ff fc39 	bl	7e88 <FatFile::sync()>

 fail:
  return false;
}
    8616:	b002      	add	sp, #8
    8618:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    861a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    861e:	6921      	ldr	r1, [r4, #16]
    8620:	68a0      	ldr	r0, [r4, #8]
    8622:	f001 f9e9 	bl	99f8 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    8626:	2800      	cmp	r0, #0
    8628:	d1e9      	bne.n	85fe <FatFile::truncate()+0x3a>
    862a:	e7f4      	b.n	8616 <FatFile::truncate()+0x52>
  return false;
    862c:	2000      	movs	r0, #0
}
    862e:	4770      	bx	lr
      return true;
    8630:	2001      	movs	r0, #1
    8632:	e7f0      	b.n	8616 <FatFile::truncate()+0x52>
  return false;
    8634:	2000      	movs	r0, #0
    8636:	e7ee      	b.n	8616 <FatFile::truncate()+0x52>

00008638 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    8638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    863c:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    863e:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    8640:	f013 0f02 	tst.w	r3, #2
    8644:	d017      	beq.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
    8646:	4688      	mov	r8, r1
    8648:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    864a:	f013 0f08 	tst.w	r3, #8
    864e:	d10d      	bne.n	866c <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    8650:	6963      	ldr	r3, [r4, #20]
    8652:	43db      	mvns	r3, r3
    8654:	454b      	cmp	r3, r9
    8656:	d30e      	bcc.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    8658:	f1b9 0f00 	cmp.w	r9, #0
    865c:	f000 80ac 	beq.w	87b8 <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
    8660:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8662:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    8666:	f04f 0a01 	mov.w	sl, #1
    866a:	e064      	b.n	8736 <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
    866c:	69c1      	ldr	r1, [r0, #28]
    866e:	f7ff fabd 	bl	7bec <FatFile::seekSet(unsigned long)>
    8672:	2800      	cmp	r0, #0
    8674:	d1ec      	bne.n	8650 <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    8676:	7863      	ldrb	r3, [r4, #1]
    8678:	f043 0301 	orr.w	r3, r3, #1
    867c:	7063      	strb	r3, [r4, #1]
  return 0;
    867e:	2000      	movs	r0, #0
}
    8680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8684:	465a      	mov	r2, fp
    8686:	f001 f928 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    868a:	2800      	cmp	r0, #0
    868c:	dbf3      	blt.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
    868e:	b938      	cbnz	r0, 86a0 <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
    8690:	4620      	mov	r0, r4
    8692:	f7ff f8fb 	bl	788c <FatFile::addCluster()>
    8696:	b918      	cbnz	r0, 86a0 <FatFile::write(void const*, unsigned int)+0x68>
    8698:	e7ed      	b.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
    869a:	6a23      	ldr	r3, [r4, #32]
    869c:	b1eb      	cbz	r3, 86da <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
    869e:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    86a0:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    86a2:	6921      	ldr	r1, [r4, #16]
    86a4:	3902      	subs	r1, #2
    86a6:	7983      	ldrb	r3, [r0, #6]
    86a8:	4099      	lsls	r1, r3
    86aa:	6943      	ldr	r3, [r0, #20]
    86ac:	4419      	add	r1, r3
                      + sectorOfCluster;
    86ae:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    86b0:	b916      	cbnz	r6, 86b8 <FatFile::write(void const*, unsigned int)+0x80>
    86b2:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    86b6:	d218      	bcs.n	86ea <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
    86b8:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    86bc:	42bd      	cmp	r5, r7
    86be:	bf28      	it	cs
    86c0:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
    86c2:	bb16      	cbnz	r6, 870a <FatFile::write(void const*, unsigned int)+0xd2>
    86c4:	6962      	ldr	r2, [r4, #20]
    86c6:	69e3      	ldr	r3, [r4, #28]
    86c8:	429a      	cmp	r2, r3
    86ca:	d24b      	bcs.n	8764 <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    86cc:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    86ce:	f013 0f20 	tst.w	r3, #32
    86d2:	bf0c      	ite	eq
    86d4:	2201      	moveq	r2, #1
    86d6:	2205      	movne	r2, #5
    86d8:	e018      	b.n	870c <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
    86da:	4620      	mov	r0, r4
    86dc:	f7ff f8d6 	bl	788c <FatFile::addCluster()>
    86e0:	2800      	cmp	r0, #0
    86e2:	d0c8      	beq.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
    86e4:	6923      	ldr	r3, [r4, #16]
    86e6:	6223      	str	r3, [r4, #32]
    86e8:	e7da      	b.n	86a0 <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    86ea:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    86ee:	d241      	bcs.n	8774 <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
    86f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    86f2:	4299      	cmp	r1, r3
    86f4:	d059      	beq.n	87aa <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
    86f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    86f8:	6803      	ldr	r3, [r0, #0]
    86fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    86fc:	4642      	mov	r2, r8
    86fe:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    8700:	2800      	cmp	r0, #0
    8702:	d0b8      	beq.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
    8704:	f44f 7500 	mov.w	r5, #512	; 0x200
    8708:	e00f      	b.n	872a <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    870a:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
    870c:	3028      	adds	r0, #40	; 0x28
    870e:	f003 fb0a 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8712:	2800      	cmp	r0, #0
    8714:	d0af      	beq.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
    8716:	462a      	mov	r2, r5
    8718:	4641      	mov	r1, r8
    871a:	4430      	add	r0, r6
    871c:	f004 fdfe 	bl	d31c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8720:	68a0      	ldr	r0, [r4, #8]
    8722:	442e      	add	r6, r5
    8724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8728:	d01e      	beq.n	8768 <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
    872a:	6963      	ldr	r3, [r4, #20]
    872c:	442b      	add	r3, r5
    872e:	6163      	str	r3, [r4, #20]
    src += n;
    8730:	44a8      	add	r8, r5
  while (nToWrite) {
    8732:	1b7f      	subs	r7, r7, r5
    8734:	d040      	beq.n	87b8 <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    8736:	68a0      	ldr	r0, [r4, #8]
    8738:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
    873a:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    873c:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    8740:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
    8744:	d1ac      	bne.n	86a0 <FatFile::write(void const*, unsigned int)+0x68>
    8746:	2e00      	cmp	r6, #0
    8748:	d1aa      	bne.n	86a0 <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
    874a:	6921      	ldr	r1, [r4, #16]
    874c:	2900      	cmp	r1, #0
    874e:	d0a4      	beq.n	869a <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
    8750:	78a2      	ldrb	r2, [r4, #2]
    8752:	f012 0f40 	tst.w	r2, #64	; 0x40
    8756:	d095      	beq.n	8684 <FatFile::write(void const*, unsigned int)+0x4c>
    8758:	69e2      	ldr	r2, [r4, #28]
    875a:	4293      	cmp	r3, r2
    875c:	d292      	bcs.n	8684 <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
    875e:	3101      	adds	r1, #1
    8760:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
    8762:	e79d      	b.n	86a0 <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8764:	2205      	movs	r2, #5
    8766:	e7d1      	b.n	870c <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
    8768:	3028      	adds	r0, #40	; 0x28
    876a:	f003 fab5 	bl	bcd8 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    876e:	2800      	cmp	r0, #0
    8770:	d1db      	bne.n	872a <FatFile::write(void const*, unsigned int)+0xf2>
    8772:	e780      	b.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8774:	7903      	ldrb	r3, [r0, #4]
    8776:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    8778:	0a7a      	lsrs	r2, r7, #9
    877a:	4293      	cmp	r3, r2
    877c:	bf28      	it	cs
    877e:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    8780:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    8782:	6b42      	ldr	r2, [r0, #52]	; 0x34
    8784:	4291      	cmp	r1, r2
    8786:	d808      	bhi.n	879a <FatFile::write(void const*, unsigned int)+0x162>
    8788:	18ce      	adds	r6, r1, r3
    878a:	42b2      	cmp	r2, r6
    878c:	d205      	bcs.n	879a <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
    878e:	2200      	movs	r2, #0
    8790:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8798:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    879a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    879c:	6802      	ldr	r2, [r0, #0]
    879e:	6a96      	ldr	r6, [r2, #40]	; 0x28
    87a0:	4642      	mov	r2, r8
    87a2:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    87a4:	2800      	cmp	r0, #0
    87a6:	d1c0      	bne.n	872a <FatFile::write(void const*, unsigned int)+0xf2>
    87a8:	e765      	b.n	8676 <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
    87aa:	2300      	movs	r3, #0
    87ac:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    87b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    87b4:	6343      	str	r3, [r0, #52]	; 0x34
  }
    87b6:	e79e      	b.n	86f6 <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
    87b8:	6963      	ldr	r3, [r4, #20]
    87ba:	69e2      	ldr	r2, [r4, #28]
    87bc:	4293      	cmp	r3, r2
    87be:	d906      	bls.n	87ce <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
    87c0:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    87c2:	78a3      	ldrb	r3, [r4, #2]
    87c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87c8:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    87ca:	4648      	mov	r0, r9
    87cc:	e758      	b.n	8680 <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
    87ce:	4b05      	ldr	r3, [pc, #20]	; (87e4 <FatFile::write(void const*, unsigned int)+0x1ac>)
    87d0:	681b      	ldr	r3, [r3, #0]
    87d2:	b12b      	cbz	r3, 87e0 <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    87d4:	78a3      	ldrb	r3, [r4, #2]
    87d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87da:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    87dc:	4648      	mov	r0, r9
    87de:	e74f      	b.n	8680 <FatFile::write(void const*, unsigned int)+0x48>
    87e0:	4648      	mov	r0, r9
    87e2:	e74d      	b.n	8680 <FatFile::write(void const*, unsigned int)+0x48>
    87e4:	20004c5c 	.word	0x20004c5c

000087e8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    87e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87ec:	b08d      	sub	sp, #52	; 0x34
    87ee:	4680      	mov	r8, r0
    87f0:	9100      	str	r1, [sp, #0]
    87f2:	4614      	mov	r4, r2
    87f4:	461f      	mov	r7, r3
  FatFile dir = *this;
    87f6:	ad03      	add	r5, sp, #12
    87f8:	4606      	mov	r6, r0
    87fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    87fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    87fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8802:	6833      	ldr	r3, [r6, #0]
    8804:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    8806:	6823      	ldr	r3, [r4, #0]
    8808:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    880a:	2300      	movs	r3, #0
    880c:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    880e:	9701      	str	r7, [sp, #4]
    8810:	2f00      	cmp	r7, #0
    8812:	d040      	beq.n	8896 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
    8814:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8818:	9b00      	ldr	r3, [sp, #0]
    881a:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    881e:	b289      	uxth	r1, r1
    8820:	0149      	lsls	r1, r1, #5
    8822:	a803      	add	r0, sp, #12
    8824:	f7ff f9e2 	bl	7bec <FatFile::seekSet(unsigned long)>
    8828:	4682      	mov	sl, r0
    882a:	b340      	cbz	r0, 887e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
    882c:	2100      	movs	r1, #0
    882e:	a803      	add	r0, sp, #12
    8830:	f7ff f9ba 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    8834:	4681      	mov	r9, r0
    8836:	b388      	cbz	r0, 889c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
    8838:	2600      	movs	r6, #0
    883a:	e00f      	b.n	885c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    883c:	4620      	mov	r0, r4
    883e:	f003 fab1 	bl	bda4 <FsName::get16()>
    8842:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    8844:	4628      	mov	r0, r5
    8846:	f003 fbcb 	bl	bfe0 <toUpcase(unsigned short)>
    884a:	4605      	mov	r5, r0
    884c:	4638      	mov	r0, r7
    884e:	f003 fbc7 	bl	bfe0 <toUpcase(unsigned short)>
    8852:	4285      	cmp	r5, r0
    8854:	d125      	bne.n	88a2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
    8856:	3601      	adds	r6, #1
    8858:	2e0d      	cmp	r6, #13
    885a:	d014      	beq.n	8886 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
    885c:	b2f2      	uxtb	r2, r6
    885e:	4649      	mov	r1, r9
    8860:	4640      	mov	r0, r8
    8862:	f000 ff19 	bl	9698 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    8866:	4605      	mov	r5, r0
    return !ls && next == end;
    8868:	89a3      	ldrh	r3, [r4, #12]
    886a:	2b00      	cmp	r3, #0
    886c:	d1e6      	bne.n	883c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
    886e:	6862      	ldr	r2, [r4, #4]
    8870:	68a3      	ldr	r3, [r4, #8]
    8872:	429a      	cmp	r2, r3
    8874:	d1e2      	bne.n	883c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
    8876:	fab0 fa80 	clz	sl, r0
    887a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
    887e:	4650      	mov	r0, sl
    8880:	b00d      	add	sp, #52	; 0x34
    8882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8886:	f10b 0b01 	add.w	fp, fp, #1
    888a:	fa5f fb8b 	uxtb.w	fp, fp
    888e:	9b01      	ldr	r3, [sp, #4]
    8890:	455b      	cmp	r3, fp
    8892:	d2c1      	bcs.n	8818 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
    8894:	e7f3      	b.n	887e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
    8896:	f04f 0a01 	mov.w	sl, #1
    889a:	e7f0      	b.n	887e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
    889c:	f04f 0a00 	mov.w	sl, #0
    88a0:	e7ed      	b.n	887e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
    88a2:	f04f 0a00 	mov.w	sl, #0
    88a6:	e7ea      	b.n	887e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

000088a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    88a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88ac:	b08f      	sub	sp, #60	; 0x3c
    88ae:	9102      	str	r1, [sp, #8]
    88b0:	4617      	mov	r7, r2
    88b2:	461e      	mov	r6, r3
  FatFile dir = *this;
    88b4:	ad05      	add	r5, sp, #20
    88b6:	4604      	mov	r4, r0
    88b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    88ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    88bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    88be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    88c0:	6823      	ldr	r3, [r4, #0]
    88c2:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
    88c4:	f107 0215 	add.w	r2, r7, #21
    88c8:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
    88cc:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    88d0:	ea4f 13ca 	mov.w	r3, sl, lsl #7
    88d4:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
    88d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    88dc:	fa50 f383 	uxtab	r3, r0, r3
    88e0:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
    88e4:	428a      	cmp	r2, r1
    88e6:	d1f3      	bne.n	88d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
    88e8:	683b      	ldr	r3, [r7, #0]
    88ea:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    88ec:	2300      	movs	r3, #0
    88ee:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    88f0:	2e00      	cmp	r6, #0
    88f2:	d064      	beq.n	89be <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
    88f4:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
    88f8:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    88fa:	f8cd a00c 	str.w	sl, [sp, #12]
    88fe:	46b2      	mov	sl, r6
    8900:	e032      	b.n	8968 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    8902:	4638      	mov	r0, r7
    8904:	f003 fa4e 	bl	bda4 <FsName::get16()>
  if (i < 5) {
    8908:	f1b8 0f04 	cmp.w	r8, #4
    890c:	d818      	bhi.n	8940 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
    890e:	b2f3      	uxtb	r3, r6
    8910:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8914:	f8a3 0001 	strh.w	r0, [r3, #1]
    8918:	3601      	adds	r6, #1
    891a:	3501      	adds	r5, #1
    891c:	b2ed      	uxtb	r5, r5
    891e:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
    8922:	89bb      	ldrh	r3, [r7, #12]
    8924:	2b00      	cmp	r3, #0
    8926:	d1ec      	bne.n	8902 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
    8928:	687a      	ldr	r2, [r7, #4]
    892a:	68bb      	ldr	r3, [r7, #8]
    892c:	429a      	cmp	r2, r3
    892e:	d1e8      	bne.n	8902 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
    8930:	1c63      	adds	r3, r4, #1
    8932:	1e20      	subs	r0, r4, #0
    8934:	bf18      	it	ne
    8936:	2001      	movne	r0, #1
    8938:	4240      	negs	r0, r0
    893a:	b280      	uxth	r0, r0
    893c:	b2dc      	uxtb	r4, r3
    893e:	e7e3      	b.n	8908 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
    8940:	f1b8 0f0a 	cmp.w	r8, #10
    8944:	d804      	bhi.n	8950 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
    8946:	b2f3      	uxtb	r3, r6
    8948:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    894c:	8098      	strh	r0, [r3, #4]
}
    894e:	e7e3      	b.n	8918 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
    8950:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
    8952:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8956:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
    8958:	2d0c      	cmp	r5, #12
    895a:	d9dd      	bls.n	8918 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    895c:	f10b 0b01 	add.w	fp, fp, #1
    8960:	fa5f fb8b 	uxtb.w	fp, fp
    8964:	45da      	cmp	sl, fp
    8966:	d32c      	bcc.n	89c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8968:	9b02      	ldr	r3, [sp, #8]
    896a:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    896e:	b289      	uxth	r1, r1
    8970:	0149      	lsls	r1, r1, #5
    8972:	a805      	add	r0, sp, #20
    8974:	f7ff f93a 	bl	7bec <FatFile::seekSet(unsigned long)>
    8978:	9001      	str	r0, [sp, #4]
    897a:	b310      	cbz	r0, 89c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    897c:	2100      	movs	r1, #0
    897e:	a805      	add	r0, sp, #20
    8980:	f7ff f912 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    8984:	4681      	mov	r9, r0
    8986:	b300      	cbz	r0, 89ca <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
    8988:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
    898a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    898e:	f043 0301 	orr.w	r3, r3, #1
    8992:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8996:	45da      	cmp	sl, fp
    8998:	bf0c      	ite	eq
    899a:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
    899e:	465b      	movne	r3, fp
    89a0:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    89a2:	f04f 030f 	mov.w	r3, #15
    89a6:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    89a8:	f04f 0300 	mov.w	r3, #0
    89ac:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
    89ae:	9b03      	ldr	r3, [sp, #12]
    89b0:	7343      	strb	r3, [r0, #13]
    89b2:	f04f 0300 	mov.w	r3, #0
    89b6:	8343      	strh	r3, [r0, #26]
    89b8:	2501      	movs	r5, #1
    89ba:	2600      	movs	r6, #0
    89bc:	e7af      	b.n	891e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    89be:	2301      	movs	r3, #1
    89c0:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
    89c2:	9801      	ldr	r0, [sp, #4]
    89c4:	b00f      	add	sp, #60	; 0x3c
    89c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    89ca:	2300      	movs	r3, #0
    89cc:	9301      	str	r3, [sp, #4]
    89ce:	e7f8      	b.n	89c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

000089d0 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    89d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89d4:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    89d6:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
    89d8:	4602      	mov	r2, r0
    89da:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    89de:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
    89e0:	2120      	movs	r1, #32
    89e2:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
    89e6:	4282      	cmp	r2, r0
    89e8:	d1fb      	bne.n	89e2 <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    89ea:	781a      	ldrb	r2, [r3, #0]
    89ec:	2a2e      	cmp	r2, #46	; 0x2e
    89ee:	bf14      	ite	ne
    89f0:	2501      	movne	r5, #1
    89f2:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    89f4:	d103      	bne.n	89fe <FatFile::makeSFN(FatLfn_t*)+0x2e>
    89f6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    89fa:	2a2e      	cmp	r2, #46	; 0x2e
    89fc:	d0fb      	beq.n	89f6 <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    89fe:	1e62      	subs	r2, r4, #1
    8a00:	429a      	cmp	r2, r3
    8a02:	d909      	bls.n	8a18 <FatFile::makeSFN(FatLfn_t*)+0x48>
    8a04:	4611      	mov	r1, r2
    8a06:	461e      	mov	r6, r3
    8a08:	460a      	mov	r2, r1
    8a0a:	3901      	subs	r1, #1
    8a0c:	7810      	ldrb	r0, [r2, #0]
    8a0e:	282e      	cmp	r0, #46	; 0x2e
    8a10:	d002      	beq.n	8a18 <FatFile::makeSFN(FatLfn_t*)+0x48>
    8a12:	460a      	mov	r2, r1
    8a14:	42b1      	cmp	r1, r6
    8a16:	d1f7      	bne.n	8a08 <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
    8a18:	429c      	cmp	r4, r3
    8a1a:	d908      	bls.n	8a2e <FatFile::makeSFN(FatLfn_t*)+0x5e>
    8a1c:	2600      	movs	r6, #0
    8a1e:	2707      	movs	r7, #7
    8a20:	46b4      	mov	ip, r6
    8a22:	46b3      	mov	fp, r6
    8a24:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    8a28:	f04f 0a0a 	mov.w	sl, #10
    8a2c:	e061      	b.n	8af2 <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
    8a2e:	2600      	movs	r6, #0
    8a30:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8a32:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8a36:	2b20      	cmp	r3, #32
    8a38:	f000 8084 	beq.w	8b44 <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    8a3c:	2d00      	cmp	r5, #0
    8a3e:	d03b      	beq.n	8ab8 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8a40:	ea1b 0f06 	tst.w	fp, r6
    8a44:	bf18      	it	ne
    8a46:	2602      	movne	r6, #2
    8a48:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    8a4c:	4628      	mov	r0, r5

 fail:
  return false;
}
    8a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8a52:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
    8a56:	fa5f f888 	uxtb.w	r8, r8
    8a5a:	f1b8 0f05 	cmp.w	r8, #5
    8a5e:	d964      	bls.n	8b2a <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
    8a60:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
    8a64:	fa5f f888 	uxtb.w	r8, r8
    8a68:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    8a6c:	d85d      	bhi.n	8b2a <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
    8a6e:	45bc      	cmp	ip, r7
    8a70:	d815      	bhi.n	8a9e <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
    8a72:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
    8a76:	b2c0      	uxtb	r0, r0
    8a78:	2819      	cmp	r0, #25
    8a7a:	d82a      	bhi.n	8ad2 <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
    8a7c:	3920      	subs	r1, #32
    8a7e:	b2c9      	uxtb	r1, r1
        lc |= bit;
    8a80:	ea49 0606 	orr.w	r6, r9, r6
    8a84:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
    8a86:	f10c 0001 	add.w	r0, ip, #1
    8a8a:	b2c0      	uxtb	r0, r0
    8a8c:	44f4      	add	ip, lr
    8a8e:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
    8a92:	2806      	cmp	r0, #6
    8a94:	d854      	bhi.n	8b40 <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
    8a96:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
    8a9a:	4684      	mov	ip, r0
    8a9c:	e026      	b.n	8aec <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
    8a9e:	429a      	cmp	r2, r3
    8aa0:	bf2c      	ite	cs
    8aa2:	2500      	movcs	r5, #0
    8aa4:	2501      	movcc	r5, #1
    8aa6:	2f0a      	cmp	r7, #10
    8aa8:	bf08      	it	eq
    8aaa:	f045 0501 	orreq.w	r5, r5, #1
    8aae:	b175      	cbz	r5, 8ace <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
    8ab0:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8ab4:	2b20      	cmp	r3, #32
    8ab6:	d0ca      	beq.n	8a4e <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8ab8:	2001      	movs	r0, #1
    8aba:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8abe:	f89e 3014 	ldrb.w	r3, [lr, #20]
    8ac2:	4473      	add	r3, lr
    8ac4:	227e      	movs	r2, #126	; 0x7e
    8ac6:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    8ac8:	2231      	movs	r2, #49	; 0x31
    8aca:	75da      	strb	r2, [r3, #23]
    8acc:	e7bf      	b.n	8a4e <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
    8ace:	1e53      	subs	r3, r2, #1
        continue;
    8ad0:	e00c      	b.n	8aec <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
    8ad2:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
    8ad6:	b2c0      	uxtb	r0, r0
    8ad8:	2819      	cmp	r0, #25
        uc |= bit;
    8ada:	bf98      	it	ls
    8adc:	ea49 0b0b 	orrls.w	fp, r9, fp
    8ae0:	e7d1      	b.n	8a86 <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
    8ae2:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
    8ae4:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8ae8:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8aec:	3301      	adds	r3, #1
    8aee:	429c      	cmp	r4, r3
    8af0:	d99f      	bls.n	8a32 <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
    8af2:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
    8af4:	292e      	cmp	r1, #46	; 0x2e
    8af6:	bf08      	it	eq
    8af8:	429a      	cmpeq	r2, r3
    8afa:	bf0c      	ite	eq
    8afc:	2001      	moveq	r0, #1
    8afe:	2000      	movne	r0, #0
    8b00:	d0ef      	beq.n	8ae2 <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8b02:	2922      	cmp	r1, #34	; 0x22
    8b04:	d011      	beq.n	8b2a <FatFile::makeSFN(FatLfn_t*)+0x15a>
    8b06:	297c      	cmp	r1, #124	; 0x7c
    8b08:	d00f      	beq.n	8b2a <FatFile::makeSFN(FatLfn_t*)+0x15a>
    8b0a:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
    8b0e:	fa5f f888 	uxtb.w	r8, r8
    8b12:	f1b8 0f02 	cmp.w	r8, #2
    8b16:	d908      	bls.n	8b2a <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8b18:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
    8b1c:	fa5f f888 	uxtb.w	r8, r8
    8b20:	f1b8 0f05 	cmp.w	r8, #5
    8b24:	d895      	bhi.n	8a52 <FatFile::makeSFN(FatLfn_t*)+0x82>
    8b26:	292d      	cmp	r1, #45	; 0x2d
    8b28:	d093      	beq.n	8a52 <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
    8b2a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8b2e:	2980      	cmp	r1, #128	; 0x80
    8b30:	d004      	beq.n	8b3c <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
    8b32:	45bc      	cmp	ip, r7
    8b34:	d8b3      	bhi.n	8a9e <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
    8b36:	4605      	mov	r5, r0
        c = '_';
    8b38:	215f      	movs	r1, #95	; 0x5f
    8b3a:	e7a4      	b.n	8a86 <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
    8b3c:	4605      	mov	r5, r0
    8b3e:	e7d5      	b.n	8aec <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
    8b40:	4684      	mov	ip, r0
    8b42:	e7d3      	b.n	8aec <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
    8b44:	2000      	movs	r0, #0
    8b46:	e782      	b.n	8a4e <FatFile::makeSFN(FatLfn_t*)+0x7e>

00008b48 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b4c:	b083      	sub	sp, #12
    8b4e:	4604      	mov	r4, r0
    8b50:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8b52:	f891 8014 	ldrb.w	r8, [r1, #20]
    8b56:	2362      	movs	r3, #98	; 0x62
    8b58:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
    8b5a:	2500      	movs	r5, #0
	return systick_millis_count;
    8b5c:	f8df b090 	ldr.w	fp, [pc, #144]	; 8bf0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8b60:	f101 0a16 	add.w	sl, r1, #22
    8b64:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
    8b68:	442b      	add	r3, r5
    8b6a:	b29d      	uxth	r5, r3
    if (pos > 3) {
    8b6c:	f1b8 0f03 	cmp.w	r8, #3
    8b70:	bf28      	it	cs
    8b72:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8b76:	f108 0304 	add.w	r3, r8, #4
    8b7a:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8b7c:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8b80:	2a09      	cmp	r2, #9
    8b82:	bf94      	ite	ls
    8b84:	3230      	addls	r2, #48	; 0x30
    8b86:	3237      	addhi	r2, #55	; 0x37
    8b88:	18f9      	adds	r1, r7, r3
    8b8a:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
    8b8c:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8b8e:	3b01      	subs	r3, #1
    8b90:	b2db      	uxtb	r3, r3
    8b92:	4598      	cmp	r8, r3
    8b94:	d1f2      	bne.n	8b7c <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    8b96:	eb07 0308 	add.w	r3, r7, r8
    8b9a:	227e      	movs	r2, #126	; 0x7e
    8b9c:	759a      	strb	r2, [r3, #22]
    seekSet(0);
    8b9e:	2100      	movs	r1, #0
    8ba0:	4620      	mov	r0, r4
    8ba2:	f7ff f823 	bl	7bec <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8ba6:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8ba8:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
    8bac:	4631      	mov	r1, r6
    8bae:	4620      	mov	r0, r4
    8bb0:	f7fe fffa 	bl	7ba8 <FatFile::readDirCache(bool)>
      if (!dir) {
    8bb4:	4601      	mov	r1, r0
    8bb6:	b190      	cbz	r0, 8bde <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
    8bb8:	7803      	ldrb	r3, [r0, #0]
    8bba:	b1bb      	cbz	r3, 8bec <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8bbc:	7ac3      	ldrb	r3, [r0, #11]
    8bbe:	f013 0f08 	tst.w	r3, #8
    8bc2:	d1f3      	bne.n	8bac <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8bc4:	464a      	mov	r2, r9
    8bc6:	4650      	mov	r0, sl
    8bc8:	f008 fba4 	bl	11314 <memcmp>
    8bcc:	2800      	cmp	r0, #0
    8bce:	d1ed      	bne.n	8bac <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8bd0:	9b01      	ldr	r3, [sp, #4]
    8bd2:	3b01      	subs	r3, #1
    8bd4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8bd8:	9301      	str	r3, [sp, #4]
    8bda:	d1c3      	bne.n	8b64 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
    8bdc:	e003      	b.n	8be6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
    8bde:	7860      	ldrb	r0, [r4, #1]
    8be0:	fab0 f080 	clz	r0, r0
    8be4:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    8be6:	b003      	add	sp, #12
    8be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8bec:	2001      	movs	r0, #1
    8bee:	e7fa      	b.n	8be6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
    8bf0:	20005388 	.word	0x20005388

00008bf4 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bf8:	b08f      	sub	sp, #60	; 0x3c
    8bfa:	900a      	str	r0, [sp, #40]	; 0x28
    8bfc:	460e      	mov	r6, r1
    8bfe:	9204      	str	r2, [sp, #16]
    8c00:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    8c02:	780b      	ldrb	r3, [r1, #0]
    8c04:	f013 0f70 	tst.w	r3, #112	; 0x70
    8c08:	f000 8158 	beq.w	8ebc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
    8c0c:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
    8c0e:	f890 8000 	ldrb.w	r8, [r0]
    8c12:	f1b8 0f00 	cmp.w	r8, #0
    8c16:	f040 8157 	bne.w	8ec8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8c1a:	6913      	ldr	r3, [r2, #16]
    8c1c:	330c      	adds	r3, #12
    8c1e:	4ab0      	ldr	r2, [pc, #704]	; (8ee0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
    8c20:	fba2 2303 	umull	r2, r3, r2, r3
    8c24:	f3c3 0287 	ubfx	r2, r3, #2, #8
    8c28:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8c2a:	7d4b      	ldrb	r3, [r1, #21]
    8c2c:	f013 0f03 	tst.w	r3, #3
    8c30:	d017      	beq.n	8c62 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
    8c32:	1c57      	adds	r7, r2, #1
    8c34:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
    8c36:	68b3      	ldr	r3, [r6, #8]
    8c38:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
    8c3a:	2100      	movs	r1, #0
    8c3c:	4630      	mov	r0, r6
    8c3e:	f7fe ffd5 	bl	7bec <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
    8c42:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
    8c46:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
    8c4a:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
    8c4c:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
    8c50:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
    8c54:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    8c58:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8c5a:	9b04      	ldr	r3, [sp, #16]
    8c5c:	3316      	adds	r3, #22
    8c5e:	9305      	str	r3, [sp, #20]
  }
    8c60:	e087      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8c62:	2701      	movs	r7, #1
    8c64:	e7e7      	b.n	8c36 <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
    8c66:	f8cd 8008 	str.w	r8, [sp, #8]
    8c6a:	e082      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
    8c6c:	f8cd 8008 	str.w	r8, [sp, #8]
    8c70:	e07f      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    8c72:	f8cd 8008 	str.w	r8, [sp, #8]
    8c76:	e07c      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
    8c78:	7873      	ldrb	r3, [r6, #1]
    8c7a:	2b00      	cmp	r3, #0
    8c7c:	f040 8127 	bne.w	8ece <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8c80:	9b06      	ldr	r3, [sp, #24]
    8c82:	f413 7f00 	tst.w	r3, #512	; 0x200
    8c86:	f000 8125 	beq.w	8ed4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8c8a:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8c8e:	3b01      	subs	r3, #1
    8c90:	2b01      	cmp	r3, #1
    8c92:	f200 8122 	bhi.w	8eda <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    8c96:	2c00      	cmp	r4, #0
    8c98:	bf08      	it	eq
    8c9a:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    8c9c:	42bc      	cmp	r4, r7
    8c9e:	d20b      	bcs.n	8cb8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
    8ca0:	2500      	movs	r5, #0
    8ca2:	4629      	mov	r1, r5
    8ca4:	4630      	mov	r0, r6
    8ca6:	f7fe ff7f 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!dir) {
    8caa:	2800      	cmp	r0, #0
    8cac:	f000 80ee 	beq.w	8e8c <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    8cb0:	3401      	adds	r4, #1
    8cb2:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8cb4:	42a7      	cmp	r7, r4
    8cb6:	d1f4      	bne.n	8ca2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    8cb8:	9b08      	ldr	r3, [sp, #32]
    8cba:	b13b      	cbz	r3, 8ccc <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
    8cbc:	9904      	ldr	r1, [sp, #16]
    8cbe:	4630      	mov	r0, r6
    8cc0:	f7ff ff42 	bl	8b48 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8cc4:	4681      	mov	r9, r0
    8cc6:	2800      	cmp	r0, #0
    8cc8:	f000 80fa 	beq.w	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    8ccc:	3f01      	subs	r7, #1
    8cce:	b2fb      	uxtb	r3, r7
    8cd0:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
    8cd2:	449a      	add	sl, r3
    8cd4:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8cd8:	9f04      	ldr	r7, [sp, #16]
    8cda:	463a      	mov	r2, r7
    8cdc:	4629      	mov	r1, r5
    8cde:	4630      	mov	r0, r6
    8ce0:	f7ff fde2 	bl	88a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8ce4:	4681      	mov	r9, r0
    8ce6:	2800      	cmp	r0, #0
    8ce8:	f000 80ea 	beq.w	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8cec:	0169      	lsls	r1, r5, #5
    8cee:	4630      	mov	r0, r6
    8cf0:	f7fe ff7c 	bl	7bec <FatFile::seekSet(unsigned long)>
    8cf4:	4681      	mov	r9, r0
    8cf6:	2800      	cmp	r0, #0
    8cf8:	f000 80e2 	beq.w	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8cfc:	2100      	movs	r1, #0
    8cfe:	4630      	mov	r0, r6
    8d00:	f7fe ff52 	bl	7ba8 <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    8d04:	4604      	mov	r4, r0
    8d06:	2800      	cmp	r0, #0
    8d08:	f000 80f1 	beq.w	8eee <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    8d0c:	2220      	movs	r2, #32
    8d0e:	2100      	movs	r1, #0
    8d10:	f008 fbcc 	bl	114ac <memset>
  memcpy(dir->name, fname->sfn, 11);
    8d14:	f8d7 2016 	ldr.w	r2, [r7, #22]
    8d18:	f8d7 301a 	ldr.w	r3, [r7, #26]
    8d1c:	6022      	str	r2, [r4, #0]
    8d1e:	6063      	str	r3, [r4, #4]
    8d20:	8bfa      	ldrh	r2, [r7, #30]
    8d22:	f897 3020 	ldrb.w	r3, [r7, #32]
    8d26:	8122      	strh	r2, [r4, #8]
    8d28:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8d2a:	7d7b      	ldrb	r3, [r7, #21]
    8d2c:	f003 0318 	and.w	r3, r3, #24
    8d30:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    8d32:	4b6c      	ldr	r3, [pc, #432]	; (8ee4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
    8d34:	681b      	ldr	r3, [r3, #0]
    8d36:	2b00      	cmp	r3, #0
    8d38:	f000 80ba 	beq.w	8eb0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    8d3c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    8d40:	f10d 0132 	add.w	r1, sp, #50	; 0x32
    8d44:	a80d      	add	r0, sp, #52	; 0x34
    8d46:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d48:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    8d4c:	8223      	strh	r3, [r4, #16]
    8d4e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    8d52:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    8d54:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    8d58:	7363      	strb	r3, [r4, #13]
    8d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8d5c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8d60:	f043 0301 	orr.w	r3, r3, #1
    8d64:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
    8d68:	e086      	b.n	8e78 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d088      	beq.n	8c80 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
    8d6e:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8d72:	6975      	ldr	r5, [r6, #20]
    8d74:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    8d78:	4659      	mov	r1, fp
    8d7a:	4630      	mov	r0, r6
    8d7c:	f7fe ff14 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!dir) {
    8d80:	2800      	cmp	r0, #0
    8d82:	f43f af79 	beq.w	8c78 <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8d86:	7803      	ldrb	r3, [r0, #0]
    8d88:	2b00      	cmp	r3, #0
    8d8a:	bf18      	it	ne
    8d8c:	2be5      	cmpne	r3, #229	; 0xe5
    8d8e:	bf0c      	ite	eq
    8d90:	f04f 0901 	moveq.w	r9, #1
    8d94:	f04f 0900 	movne.w	r9, #0
    8d98:	d107      	bne.n	8daa <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8d9a:	2c00      	cmp	r4, #0
    8d9c:	bf08      	it	eq
    8d9e:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8da0:	42bc      	cmp	r4, r7
    8da2:	d2e2      	bcs.n	8d6a <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
    8da4:	3401      	adds	r4, #1
    8da6:	b2e4      	uxtb	r4, r4
    8da8:	e7df      	b.n	8d6a <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
    8daa:	42bc      	cmp	r4, r7
    8dac:	bf38      	it	cc
    8dae:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8db0:	2b2e      	cmp	r3, #46	; 0x2e
    8db2:	f43f af58 	beq.w	8c66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8db6:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
    8db8:	2a0f      	cmp	r2, #15
    8dba:	d014      	beq.n	8de6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
    8dbc:	f012 0208 	ands.w	r2, r2, #8
    8dc0:	f47f af57 	bne.w	8c72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
    8dc4:	9b02      	ldr	r3, [sp, #8]
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d13b      	bne.n	8e42 <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8dca:	220b      	movs	r2, #11
    8dcc:	9905      	ldr	r1, [sp, #20]
    8dce:	f008 faa1 	bl	11314 <memcmp>
    8dd2:	2800      	cmp	r0, #0
    8dd4:	d1cd      	bne.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8dd6:	9b04      	ldr	r3, [sp, #16]
    8dd8:	7d5b      	ldrb	r3, [r3, #21]
    8dda:	f013 0301 	ands.w	r3, r3, #1
    8dde:	d046      	beq.n	8e6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
    8de0:	2301      	movs	r3, #1
    8de2:	9308      	str	r3, [sp, #32]
    8de4:	e7c5      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
    8de6:	9a02      	ldr	r2, [sp, #8]
    8de8:	b9ea      	cbnz	r2, 8e26 <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
    8dea:	f003 021f 	and.w	r2, r3, #31
    8dee:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
    8df0:	9907      	ldr	r1, [sp, #28]
    8df2:	4291      	cmp	r1, r2
    8df4:	d1bd      	bne.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
    8df6:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    8dfa:	9302      	str	r3, [sp, #8]
    8dfc:	d0b9      	beq.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
    8dfe:	7b43      	ldrb	r3, [r0, #13]
    8e00:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
    8e02:	9202      	str	r2, [sp, #8]
      if (order == 1) {
    8e04:	9b03      	ldr	r3, [sp, #12]
    8e06:	2b01      	cmp	r3, #1
    8e08:	d1b3      	bne.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8e0a:	1c69      	adds	r1, r5, #1
    8e0c:	9d02      	ldr	r5, [sp, #8]
    8e0e:	462b      	mov	r3, r5
    8e10:	9a04      	ldr	r2, [sp, #16]
    8e12:	b289      	uxth	r1, r1
    8e14:	4630      	mov	r0, r6
    8e16:	f7ff fce7 	bl	87e8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8e1a:	462b      	mov	r3, r5
    8e1c:	2800      	cmp	r0, #0
    8e1e:	bf08      	it	eq
    8e20:	4643      	moveq	r3, r8
    8e22:	9302      	str	r3, [sp, #8]
    8e24:	e7a5      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8e26:	9a03      	ldr	r2, [sp, #12]
    8e28:	3a01      	subs	r2, #1
    8e2a:	b2d2      	uxtb	r2, r2
    8e2c:	9203      	str	r2, [sp, #12]
    8e2e:	4293      	cmp	r3, r2
    8e30:	f47f af1c 	bne.w	8c6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
    8e34:	7b43      	ldrb	r3, [r0, #13]
    8e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e38:	4293      	cmp	r3, r2
    8e3a:	d0e3      	beq.n	8e04 <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
    8e3c:	f8cd 8008 	str.w	r8, [sp, #8]
    8e40:	e797      	b.n	8d72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8e42:	9b03      	ldr	r3, [sp, #12]
    8e44:	2b01      	cmp	r3, #1
    8e46:	d13b      	bne.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
    8e48:	1e41      	subs	r1, r0, #1
    8e4a:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8e4e:	01d3      	lsls	r3, r2, #7
    8e50:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    8e54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8e58:	fa52 f383 	uxtab	r3, r2, r3
    8e5c:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    8e5e:	4561      	cmp	r1, ip
    8e60:	d1f5      	bne.n	8e4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
    8e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e64:	4293      	cmp	r3, r2
    8e66:	d12b      	bne.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8e68:	9b02      	ldr	r3, [sp, #8]
    8e6a:	4698      	mov	r8, r3
    8e6c:	e000      	b.n	8e70 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
    8e6e:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
    8e70:	9b06      	ldr	r3, [sp, #24]
    8e72:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8e76:	d123      	bne.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8e78:	f8cd 8000 	str.w	r8, [sp]
    8e7c:	9b06      	ldr	r3, [sp, #24]
    8e7e:	462a      	mov	r2, r5
    8e80:	4631      	mov	r1, r6
    8e82:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e84:	f7fe ff31 	bl	7cea <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8e88:	4681      	mov	r9, r0
    8e8a:	e019      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
    8e8c:	7873      	ldrb	r3, [r6, #1]
    8e8e:	bb5b      	cbnz	r3, 8ee8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
    8e90:	42a7      	cmp	r7, r4
    8e92:	f67f af11 	bls.w	8cb8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    8e96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
    8e98:	4630      	mov	r0, r6
    8e9a:	f7fe fd15 	bl	78c8 <FatFile::addDirCluster()>
    8e9e:	4681      	mov	r9, r0
    8ea0:	b170      	cbz	r0, 8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8ea2:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8ea4:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    8ea8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8eaa:	42a7      	cmp	r7, r4
    8eac:	d8f4      	bhi.n	8e98 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
    8eae:	e703      	b.n	8cb8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8eb0:	f245 6321 	movw	r3, #22049	; 0x5621
    8eb4:	8223      	strh	r3, [r4, #16]
    8eb6:	8323      	strh	r3, [r4, #24]
    8eb8:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    8eba:	e74e      	b.n	8d5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
    8ebc:	f04f 0900 	mov.w	r9, #0
}
    8ec0:	4648      	mov	r0, r9
    8ec2:	b00f      	add	sp, #60	; 0x3c
    8ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8ec8:	f04f 0900 	mov.w	r9, #0
    8ecc:	e7f8      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ece:	f04f 0900 	mov.w	r9, #0
    8ed2:	e7f5      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ed4:	f04f 0900 	mov.w	r9, #0
    8ed8:	e7f2      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8eda:	f04f 0900 	mov.w	r9, #0
    8ede:	e7ef      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ee0:	4ec4ec4f 	.word	0x4ec4ec4f
    8ee4:	20004c5c 	.word	0x20004c5c
    8ee8:	f04f 0900 	mov.w	r9, #0
    8eec:	e7e8      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8eee:	f04f 0900 	mov.w	r9, #0
    8ef2:	e7e5      	b.n	8ec0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

00008ef4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ef6:	b083      	sub	sp, #12
    8ef8:	4608      	mov	r0, r1
    8efa:	4615      	mov	r5, r2
    8efc:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8efe:	780b      	ldrb	r3, [r1, #0]
    8f00:	2b20      	cmp	r3, #32
    8f02:	d103      	bne.n	8f0c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    8f04:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8f08:	2b20      	cmp	r3, #32
    8f0a:	d0fb      	beq.n	8f04 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
    8f0c:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8f0e:	7803      	ldrb	r3, [r0, #0]
    8f10:	b1d3      	cbz	r3, 8f48 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8f12:	2b2f      	cmp	r3, #47	; 0x2f
    8f14:	d018      	beq.n	8f48 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
    8f16:	2400      	movs	r4, #0
    8f18:	4e2c      	ldr	r6, [pc, #176]	; (8fcc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
    8f1a:	e033      	b.n	8f84 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8f1c:	f1bc 0f1f 	cmp.w	ip, #31
    8f20:	d90f      	bls.n	8f42 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8f22:	e04d      	b.n	8fc0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8f24:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
    8f28:	d00b      	beq.n	8f42 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8f2a:	d903      	bls.n	8f34 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
    8f2c:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
    8f30:	d007      	beq.n	8f42 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8f32:	e020      	b.n	8f76 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8f34:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
    8f38:	fa5f fc8c 	uxtb.w	ip, ip
    8f3c:	f1bc 0f01 	cmp.w	ip, #1
    8f40:	d819      	bhi.n	8f76 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    8f42:	2000      	movs	r0, #0
}
    8f44:	b003      	add	sp, #12
    8f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8f48:	692b      	ldr	r3, [r5, #16]
    8f4a:	3b01      	subs	r3, #1
    8f4c:	2bfe      	cmp	r3, #254	; 0xfe
    8f4e:	d80f      	bhi.n	8f70 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8f50:	7803      	ldrb	r3, [r0, #0]
    8f52:	2b20      	cmp	r3, #32
    8f54:	d001      	beq.n	8f5a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8f56:	2b2f      	cmp	r3, #47	; 0x2f
    8f58:	d105      	bne.n	8f66 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8f5a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8f5e:	2b20      	cmp	r3, #32
    8f60:	d0fb      	beq.n	8f5a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8f62:	2b2f      	cmp	r3, #47	; 0x2f
    8f64:	d0f9      	beq.n	8f5a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
    8f66:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
    8f68:	4628      	mov	r0, r5
    8f6a:	f7ff fd31 	bl	89d0 <FatFile::makeSFN(FatLfn_t*)>
    8f6e:	e7e9      	b.n	8f44 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
    8f70:	2000      	movs	r0, #0
    8f72:	e7e7      	b.n	8f44 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
    8f74:	3402      	adds	r4, #2
      fname->len = len;
    8f76:	612c      	str	r4, [r5, #16]
      fname->end = path;
    8f78:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
    8f7a:	7803      	ldrb	r3, [r0, #0]
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d0e3      	beq.n	8f48 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8f80:	2b2f      	cmp	r3, #47	; 0x2f
    8f82:	d0e1      	beq.n	8f48 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8f84:	aa01      	add	r2, sp, #4
    8f86:	1d01      	adds	r1, r0, #4
    8f88:	f002 ffd6 	bl	bf38 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d0d8      	beq.n	8f42 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
    8f90:	9b01      	ldr	r3, [sp, #4]
    8f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8f96:	d2ed      	bcs.n	8f74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
    8f98:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8f9a:	2b7f      	cmp	r3, #127	; 0x7f
    8f9c:	d810      	bhi.n	8fc0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8f9e:	fa5f fc83 	uxtb.w	ip, r3
    8fa2:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    8fa6:	d8bd      	bhi.n	8f24 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
    8fa8:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    8fac:	d9b6      	bls.n	8f1c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    8fae:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
    8fb2:	fa5f fc8c 	uxtb.w	ip, ip
    8fb6:	fa26 fc0c 	lsr.w	ip, r6, ip
    8fba:	f01c 0f01 	tst.w	ip, #1
    8fbe:	d1c0      	bne.n	8f42 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
    8fc0:	2b2e      	cmp	r3, #46	; 0x2e
    8fc2:	d0da      	beq.n	8f7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8fc4:	2b20      	cmp	r3, #32
    8fc6:	d0d8      	beq.n	8f7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8fc8:	e7d5      	b.n	8f76 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8fca:	bf00      	nop
    8fcc:	05002101 	.word	0x05002101

00008fd0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fd4:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
    8fd6:	2300      	movs	r3, #0
    8fd8:	f88d 3004 	strb.w	r3, [sp, #4]
    8fdc:	f88d 3005 	strb.w	r3, [sp, #5]
    8fe0:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8fe4:	7883      	ldrb	r3, [r0, #2]
    8fe6:	f013 0f02 	tst.w	r3, #2
    8fea:	f000 8091 	beq.w	9110 <FatFile::remove()+0x140>
    8fee:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8ff0:	6a01      	ldr	r1, [r0, #32]
    8ff2:	b129      	cbz	r1, 9000 <FatFile::remove()+0x30>
    8ff4:	6880      	ldr	r0, [r0, #8]
    8ff6:	f000 fdd9 	bl	9bac <FatPartition::freeChain(unsigned long)>
    8ffa:	4603      	mov	r3, r0
    8ffc:	2800      	cmp	r0, #0
    8ffe:	d06c      	beq.n	90da <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    9000:	2101      	movs	r1, #1
    9002:	4628      	mov	r0, r5
    9004:	f7fe fca2 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9008:	4606      	mov	r6, r0
    900a:	2800      	cmp	r0, #0
    900c:	f000 8082 	beq.w	9114 <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
    9010:	1e42      	subs	r2, r0, #1
    9012:	300a      	adds	r0, #10
    uint8_t sum = 0;
    9014:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9016:	01e3      	lsls	r3, r4, #7
    9018:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    901c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9020:	fa51 f383 	uxtab	r3, r1, r3
    9024:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    9026:	4290      	cmp	r0, r2
    9028:	d1f5      	bne.n	9016 <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    902a:	23e5      	movs	r3, #229	; 0xe5
    902c:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    902e:	2300      	movs	r3, #0
    9030:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
    9032:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    9034:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9036:	f106 0028 	add.w	r0, r6, #40	; 0x28
    903a:	f002 fe4d 	bl	bcd8 <FsCache::sync()>
    903e:	b908      	cbnz	r0, 9044 <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9040:	2300      	movs	r3, #0
    9042:	e04a      	b.n	90da <FatFile::remove()+0x10a>
    9044:	f506 700e 	add.w	r0, r6, #568	; 0x238
    9048:	f002 fe46 	bl	bcd8 <FsCache::sync()>
    904c:	2800      	cmp	r0, #0
    904e:	d0f7      	beq.n	9040 <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
    9050:	6830      	ldr	r0, [r6, #0]
    9052:	6803      	ldr	r3, [r0, #0]
    9054:	6a1b      	ldr	r3, [r3, #32]
    9056:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    9058:	4603      	mov	r3, r0
    905a:	2800      	cmp	r0, #0
    905c:	d03d      	beq.n	90da <FatFile::remove()+0x10a>
  if (!isLFN()) {
    905e:	78ea      	ldrb	r2, [r5, #3]
    9060:	2a00      	cmp	r2, #0
    9062:	d03a      	beq.n	90da <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
    9064:	4629      	mov	r1, r5
    9066:	a801      	add	r0, sp, #4
    9068:	f7fe fc9f 	bl	79aa <FatFile::openCluster(FatFile*)>
    906c:	4603      	mov	r3, r0
    906e:	2800      	cmp	r0, #0
    9070:	d033      	beq.n	90da <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9072:	78eb      	ldrb	r3, [r5, #3]
    9074:	2b00      	cmp	r3, #0
    9076:	d04f      	beq.n	9118 <FatFile::remove()+0x148>
    9078:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    907a:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
    907c:	f04f 08e5 	mov.w	r8, #229	; 0xe5
    9080:	e021      	b.n	90c6 <FatFile::remove()+0xf6>
    9082:	4639      	mov	r1, r7
    9084:	a801      	add	r0, sp, #4
    9086:	f7fe fd8f 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    908a:	2800      	cmp	r0, #0
    908c:	d046      	beq.n	911c <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    908e:	7ac2      	ldrb	r2, [r0, #11]
    9090:	2a0f      	cmp	r2, #15
    9092:	d145      	bne.n	9120 <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
    9094:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9096:	f002 011f 	and.w	r1, r2, #31
    909a:	428e      	cmp	r6, r1
    909c:	d142      	bne.n	9124 <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
    909e:	7b41      	ldrb	r1, [r0, #13]
    90a0:	42a1      	cmp	r1, r4
    90a2:	d141      	bne.n	9128 <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
    90a4:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
    90a8:	68a9      	ldr	r1, [r5, #8]
    90aa:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    90ae:	f043 0301 	orr.w	r3, r3, #1
    90b2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    90b6:	f012 0f40 	tst.w	r2, #64	; 0x40
    90ba:	d112      	bne.n	90e2 <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    90bc:	3601      	adds	r6, #1
    90be:	b2f6      	uxtb	r6, r6
    90c0:	78eb      	ldrb	r3, [r5, #3]
    90c2:	42b3      	cmp	r3, r6
    90c4:	d322      	bcc.n	910c <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    90c6:	88a9      	ldrh	r1, [r5, #4]
    90c8:	1b89      	subs	r1, r1, r6
    90ca:	b289      	uxth	r1, r1
    90cc:	0149      	lsls	r1, r1, #5
    90ce:	a801      	add	r0, sp, #4
    90d0:	f7fe fd8c 	bl	7bec <FatFile::seekSet(unsigned long)>
    90d4:	4603      	mov	r3, r0
    90d6:	2800      	cmp	r0, #0
    90d8:	d1d3      	bne.n	9082 <FatFile::remove()+0xb2>
}
    90da:	4618      	mov	r0, r3
    90dc:	b00a      	add	sp, #40	; 0x28
    90de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
    90e2:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    90e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    90e8:	f002 fdf6 	bl	bcd8 <FsCache::sync()>
    90ec:	4603      	mov	r3, r0
    90ee:	2800      	cmp	r0, #0
    90f0:	d0f3      	beq.n	90da <FatFile::remove()+0x10a>
    90f2:	f504 700e 	add.w	r0, r4, #568	; 0x238
    90f6:	f002 fdef 	bl	bcd8 <FsCache::sync()>
    90fa:	4603      	mov	r3, r0
    90fc:	2800      	cmp	r0, #0
    90fe:	d0ec      	beq.n	90da <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
    9100:	6820      	ldr	r0, [r4, #0]
    9102:	6803      	ldr	r3, [r0, #0]
    9104:	6a1b      	ldr	r3, [r3, #32]
    9106:	4798      	blx	r3
    9108:	4603      	mov	r3, r0
    910a:	e7e6      	b.n	90da <FatFile::remove()+0x10a>
  return false;
    910c:	2300      	movs	r3, #0
 fail:
    910e:	e7e4      	b.n	90da <FatFile::remove()+0x10a>
  return false;
    9110:	2300      	movs	r3, #0
    9112:	e7e2      	b.n	90da <FatFile::remove()+0x10a>
    9114:	2300      	movs	r3, #0
    9116:	e7e0      	b.n	90da <FatFile::remove()+0x10a>
    9118:	2300      	movs	r3, #0
    911a:	e7de      	b.n	90da <FatFile::remove()+0x10a>
    911c:	2300      	movs	r3, #0
    911e:	e7dc      	b.n	90da <FatFile::remove()+0x10a>
    9120:	2300      	movs	r3, #0
    9122:	e7da      	b.n	90da <FatFile::remove()+0x10a>
    9124:	2300      	movs	r3, #0
    9126:	e7d8      	b.n	90da <FatFile::remove()+0x10a>
    9128:	2300      	movs	r3, #0
    912a:	e7d6      	b.n	90da <FatFile::remove()+0x10a>

0000912c <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    912c:	b510      	push	{r4, lr}
    912e:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    9130:	6848      	ldr	r0, [r1, #4]
    9132:	b130      	cbz	r0, 9142 <initFatDirCallback(unsigned long, void*)+0x16>
    9134:	890b      	ldrh	r3, [r1, #8]
    9136:	3301      	adds	r3, #1
    9138:	b29b      	uxth	r3, r3
    913a:	810b      	strh	r3, [r1, #8]
    913c:	894a      	ldrh	r2, [r1, #10]
    913e:	429a      	cmp	r2, r3
    9140:	d901      	bls.n	9146 <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    9142:	6820      	ldr	r0, [r4, #0]
    9144:	bd10      	pop	{r4, pc}
    9146:	6803      	ldr	r3, [r0, #0]
    9148:	685b      	ldr	r3, [r3, #4]
    914a:	2201      	movs	r2, #1
    914c:	4902      	ldr	r1, [pc, #8]	; (9158 <initFatDirCallback(unsigned long, void*)+0x2c>)
    914e:	4798      	blx	r3
    state->count = 0;
    9150:	2300      	movs	r3, #0
    9152:	8123      	strh	r3, [r4, #8]
    9154:	e7f5      	b.n	9142 <initFatDirCallback(unsigned long, void*)+0x16>
    9156:	bf00      	nop
    9158:	20002e9c 	.word	0x20002e9c

0000915c <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    915c:	b5f0      	push	{r4, r5, r6, r7, lr}
    915e:	b087      	sub	sp, #28
    9160:	4604      	mov	r4, r0
    9162:	460e      	mov	r6, r1
    9164:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    9166:	f44f 7200 	mov.w	r2, #512	; 0x200
    916a:	2100      	movs	r1, #0
    916c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    916e:	f008 f99d 	bl	114ac <memset>
  writeMsg("Writing FAT ");
    9172:	6a20      	ldr	r0, [r4, #32]
    9174:	b120      	cbz	r0, 9180 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
    9176:	6803      	ldr	r3, [r0, #0]
    9178:	685b      	ldr	r3, [r3, #4]
    917a:	220c      	movs	r2, #12
    917c:	4920      	ldr	r1, [pc, #128]	; (9200 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    917e:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
    9180:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9182:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
    9184:	6a23      	ldr	r3, [r4, #32]
    9186:	9304      	str	r3, [sp, #16]
  state.count = 0;
    9188:	2300      	movs	r3, #0
    918a:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    918e:	096b      	lsrs	r3, r5, #5
    9190:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    9194:	69e0      	ldr	r0, [r4, #28]
    9196:	68e1      	ldr	r1, [r4, #12]
    9198:	6803      	ldr	r3, [r0, #0]
    919a:	aa03      	add	r2, sp, #12
    919c:	9200      	str	r2, [sp, #0]
    919e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    91a0:	4b18      	ldr	r3, [pc, #96]	; (9204 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    91a2:	1e6a      	subs	r2, r5, #1
    91a4:	3101      	adds	r1, #1
    91a6:	47b8      	blx	r7
    91a8:	4603      	mov	r3, r0
    91aa:	b328      	cbz	r0, 91f8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
    91ac:	6a20      	ldr	r0, [r4, #32]
    91ae:	b120      	cbz	r0, 91ba <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    91b0:	6803      	ldr	r3, [r0, #0]
    91b2:	685b      	ldr	r3, [r3, #4]
    91b4:	2202      	movs	r2, #2
    91b6:	4914      	ldr	r1, [pc, #80]	; (9208 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    91b8:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    91ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    91bc:	22f8      	movs	r2, #248	; 0xf8
    91be:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
    91c0:	2e10      	cmp	r6, #16
    91c2:	bf0c      	ite	eq
    91c4:	2004      	moveq	r0, #4
    91c6:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
    91c8:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
    91ca:	21ff      	movs	r1, #255	; 0xff
    91cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91ce:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    91d0:	3301      	adds	r3, #1
    91d2:	4298      	cmp	r0, r3
    91d4:	d1fa      	bne.n	91cc <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    91d6:	69e0      	ldr	r0, [r4, #28]
    91d8:	6803      	ldr	r3, [r0, #0]
    91da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91de:	68e1      	ldr	r1, [r4, #12]
    91e0:	4798      	blx	r3
    91e2:	4603      	mov	r3, r0
    91e4:	b140      	cbz	r0, 91f8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    91e6:	69e0      	ldr	r0, [r4, #28]
    91e8:	68e5      	ldr	r5, [r4, #12]
    91ea:	68a1      	ldr	r1, [r4, #8]
    91ec:	6803      	ldr	r3, [r0, #0]
    91ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91f2:	4429      	add	r1, r5
    91f4:	4798      	blx	r3
    91f6:	4603      	mov	r3, r0
}
    91f8:	4618      	mov	r0, r3
    91fa:	b007      	add	sp, #28
    91fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91fe:	bf00      	nop
    9200:	20002050 	.word	0x20002050
    9204:	0000912d 	.word	0x0000912d
    9208:	20002074 	.word	0x20002074

0000920c <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    920c:	b570      	push	{r4, r5, r6, lr}
    920e:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    9210:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    9212:	f44f 7600 	mov.w	r6, #512	; 0x200
    9216:	4632      	mov	r2, r6
    9218:	2100      	movs	r1, #0
    921a:	4620      	mov	r0, r4
    921c:	f008 f946 	bl	114ac <memset>
  pbs->jmpInstruction[0] = 0XEB;
    9220:	23eb      	movs	r3, #235	; 0xeb
    9222:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    9224:	2376      	movs	r3, #118	; 0x76
    9226:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    9228:	2390      	movs	r3, #144	; 0x90
    922a:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    922c:	2320      	movs	r3, #32
    922e:	70e3      	strb	r3, [r4, #3]
    9230:	7123      	strb	r3, [r4, #4]
    9232:	7163      	strb	r3, [r4, #5]
    9234:	71a3      	strb	r3, [r4, #6]
    9236:	71e3      	strb	r3, [r4, #7]
    9238:	7223      	strb	r3, [r4, #8]
    923a:	7263      	strb	r3, [r4, #9]
    923c:	72a3      	strb	r3, [r4, #10]
    923e:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    9242:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    9246:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    9248:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    924a:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    924c:	2302      	movs	r3, #2
    924e:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    9250:	23f8      	movs	r3, #248	; 0xf8
    9252:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    9254:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    9256:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    9258:	69ab      	ldr	r3, [r5, #24]
    925a:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    925c:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9260:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    9264:	bd70      	pop	{r4, r5, r6, pc}

00009266 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    9266:	b538      	push	{r3, r4, r5, lr}
    9268:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    926a:	f44f 7200 	mov.w	r2, #512	; 0x200
    926e:	2100      	movs	r1, #0
    9270:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9272:	f008 f91b 	bl	114ac <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    9276:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    9278:	6922      	ldr	r2, [r4, #16]
    927a:	6821      	ldr	r1, [r4, #0]
    927c:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    9280:	f002 fdb6 	bl	bdf0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    9284:	6922      	ldr	r2, [r4, #16]
    9286:	69a3      	ldr	r3, [r4, #24]
    9288:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    928a:	3a01      	subs	r2, #1
    928c:	6821      	ldr	r1, [r4, #0]
    928e:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    9292:	f002 fdad 	bl	bdf0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    9296:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    929a:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    929e:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    92a0:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    92a4:	69a3      	ldr	r3, [r4, #24]
    92a6:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    92aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
    92ae:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    92b2:	69e0      	ldr	r0, [r4, #28]
    92b4:	6803      	ldr	r3, [r0, #0]
    92b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    92b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    92ba:	2100      	movs	r1, #0
    92bc:	4798      	blx	r3
}
    92be:	bd38      	pop	{r3, r4, r5, pc}

000092c0 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    92c0:	b570      	push	{r4, r5, r6, lr}
    92c2:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    92c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    92c6:	f44f 7380 	mov.w	r3, #256	; 0x100
    92ca:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    92cc:	6946      	ldr	r6, [r0, #20]
    92ce:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
    92d2:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    92d6:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    92da:	f202 1001 	addw	r0, r2, #257	; 0x101
    92de:	0a00      	lsrs	r0, r0, #8
    92e0:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    92e2:	0040      	lsls	r0, r0, #1
    92e4:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    92e8:	459c      	cmp	ip, r3
    92ea:	d90f      	bls.n	930c <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    92ec:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    92f0:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    92f2:	1af2      	subs	r2, r6, r3
    92f4:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    92f8:	f202 1101 	addw	r1, r2, #257	; 0x101
    92fc:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    92fe:	0048      	lsls	r0, r1, #1
    9300:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    9304:	4563      	cmp	r3, ip
    9306:	d3f3      	bcc.n	92f0 <FatFormatter::makeFat16()+0x30>
    9308:	6063      	str	r3, [r4, #4]
    930a:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    930c:	eba3 030c 	sub.w	r3, r3, ip
    9310:	f103 0180 	add.w	r1, r3, #128	; 0x80
    9314:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    9316:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
    931a:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    931e:	d213      	bcs.n	9348 <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
    9320:	2101      	movs	r1, #1
    9322:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    9324:	3381      	adds	r3, #129	; 0x81
    9326:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    9328:	3021      	adds	r0, #33	; 0x21
    932a:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
    932e:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
    9330:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    9334:	bf34      	ite	cc
    9336:	2304      	movcc	r3, #4
    9338:	2306      	movcs	r3, #6
    933a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    933e:	4620      	mov	r0, r4
    9340:	f7ff ff91 	bl	9266 <FatFormatter::writeMbr()>
    9344:	b950      	cbnz	r0, 935c <FatFormatter::makeFat16()+0x9c>
}
    9346:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
    9348:	6a20      	ldr	r0, [r4, #32]
    934a:	2800      	cmp	r0, #0
    934c:	d040      	beq.n	93d0 <FatFormatter::makeFat16()+0x110>
    934e:	6803      	ldr	r3, [r0, #0]
    9350:	685b      	ldr	r3, [r3, #4]
    9352:	2213      	movs	r2, #19
    9354:	491f      	ldr	r1, [pc, #124]	; (93d4 <FatFormatter::makeFat16()+0x114>)
    9356:	4798      	blx	r3
    return false;
    9358:	2000      	movs	r0, #0
    935a:	e7f4      	b.n	9346 <FatFormatter::makeFat16()+0x86>
  initPbs();
    935c:	4620      	mov	r0, r4
    935e:	f7ff ff55 	bl	920c <FatFormatter::initPbs()>
    9362:	f44f 7300 	mov.w	r3, #512	; 0x200
    9366:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    936a:	68a3      	ldr	r3, [r4, #8]
    936c:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    936e:	2380      	movs	r3, #128	; 0x80
    9370:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    9374:	2329      	movs	r3, #41	; 0x29
    9376:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    937a:	4b17      	ldr	r3, [pc, #92]	; (93d8 <FatFormatter::makeFat16()+0x118>)
    937c:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9380:	f105 032a 	add.w	r3, r5, #42	; 0x2a
    9384:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    9388:	2220      	movs	r2, #32
    938a:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    938e:	4299      	cmp	r1, r3
    9390:	d1fb      	bne.n	938a <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
    9392:	2346      	movs	r3, #70	; 0x46
    9394:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    9398:	2341      	movs	r3, #65	; 0x41
    939a:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    939e:	2354      	movs	r3, #84	; 0x54
    93a0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    93a4:	2331      	movs	r3, #49	; 0x31
    93a6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    93aa:	2336      	movs	r3, #54	; 0x36
    93ac:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    93b0:	69e0      	ldr	r0, [r4, #28]
    93b2:	6803      	ldr	r3, [r0, #0]
    93b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    93b8:	6921      	ldr	r1, [r4, #16]
    93ba:	4798      	blx	r3
    93bc:	2800      	cmp	r0, #0
    93be:	d0c2      	beq.n	9346 <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    93c0:	6862      	ldr	r2, [r4, #4]
    93c2:	68e3      	ldr	r3, [r4, #12]
    93c4:	1ad2      	subs	r2, r2, r3
    93c6:	2110      	movs	r1, #16
    93c8:	4620      	mov	r0, r4
    93ca:	f7ff fec7 	bl	915c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    93ce:	e7ba      	b.n	9346 <FatFormatter::makeFat16()+0x86>
    return false;
    93d0:	2000      	movs	r0, #0
    93d2:	e7b8      	b.n	9346 <FatFormatter::makeFat16()+0x86>
    93d4:	20002024 	.word	0x20002024
    93d8:	0012d687 	.word	0x0012d687

000093dc <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    93dc:	b570      	push	{r4, r5, r6, lr}
    93de:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    93e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
    93e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    93e6:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    93e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    93ec:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    93ee:	6946      	ldr	r6, [r0, #20]
    93f0:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
    93f4:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
    93f8:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    93fc:	f101 0381 	add.w	r3, r1, #129	; 0x81
    9400:	09db      	lsrs	r3, r3, #7
    9402:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    9404:	f242 0209 	movw	r2, #8201	; 0x2009
    9408:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
    940c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    9410:	d931      	bls.n	9476 <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    9412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
    9416:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    941a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    941e:	1ab1      	subs	r1, r6, r2
    9420:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    9424:	f101 0381 	add.w	r3, r1, #129	; 0x81
    9428:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    942a:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    942e:	4282      	cmp	r2, r0
    9430:	d3f3      	bcc.n	941a <FatFormatter::makeFat32()+0x3e>
    9432:	6062      	str	r2, [r4, #4]
    9434:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
    9436:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    943a:	4281      	cmp	r1, r0
    943c:	d91e      	bls.n	947c <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    943e:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
    9442:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    9446:	b29b      	uxth	r3, r3
    9448:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    944a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    944e:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    9450:	fb01 220c 	mla	r2, r1, ip, r2
    9454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    9458:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
    945a:	4b55      	ldr	r3, [pc, #340]	; (95b0 <FatFormatter::makeFat32()+0x1d4>)
    945c:	429a      	cmp	r2, r3
    945e:	bf94      	ite	ls
    9460:	220b      	movls	r2, #11
    9462:	220c      	movhi	r2, #12
    9464:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    9468:	4620      	mov	r0, r4
    946a:	f7ff fefc 	bl	9266 <FatFormatter::writeMbr()>
    946e:	4603      	mov	r3, r0
    9470:	b978      	cbnz	r0, 9492 <FatFormatter::makeFat32()+0xb6>
}
    9472:	4618      	mov	r0, r3
    9474:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    9476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    947a:	e7dc      	b.n	9436 <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
    947c:	6a20      	ldr	r0, [r4, #32]
    947e:	2800      	cmp	r0, #0
    9480:	f000 8093 	beq.w	95aa <FatFormatter::makeFat32()+0x1ce>
    9484:	6803      	ldr	r3, [r0, #0]
    9486:	685b      	ldr	r3, [r3, #4]
    9488:	2213      	movs	r2, #19
    948a:	494a      	ldr	r1, [pc, #296]	; (95b4 <FatFormatter::makeFat32()+0x1d8>)
    948c:	4798      	blx	r3
    return false;
    948e:	2300      	movs	r3, #0
    9490:	e7ef      	b.n	9472 <FatFormatter::makeFat32()+0x96>
  initPbs();
    9492:	4620      	mov	r0, r4
    9494:	f7ff feba 	bl	920c <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    9498:	68a3      	ldr	r3, [r4, #8]
    949a:	626b      	str	r3, [r5, #36]	; 0x24
    949c:	2302      	movs	r3, #2
    949e:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
    94a0:	2301      	movs	r3, #1
    94a2:	862b      	strh	r3, [r5, #48]	; 0x30
    94a4:	2306      	movs	r3, #6
    94a6:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    94a8:	2380      	movs	r3, #128	; 0x80
    94aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    94ae:	2329      	movs	r3, #41	; 0x29
    94b0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    94b4:	4b40      	ldr	r3, [pc, #256]	; (95b8 <FatFormatter::makeFat32()+0x1dc>)
    94b6:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    94ba:	f105 0346 	add.w	r3, r5, #70	; 0x46
    94be:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    94c2:	2220      	movs	r2, #32
    94c4:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    94c8:	4299      	cmp	r1, r3
    94ca:	d1fb      	bne.n	94c4 <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
    94cc:	2346      	movs	r3, #70	; 0x46
    94ce:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    94d2:	2341      	movs	r3, #65	; 0x41
    94d4:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    94d8:	2354      	movs	r3, #84	; 0x54
    94da:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    94de:	2333      	movs	r3, #51	; 0x33
    94e0:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    94e4:	2332      	movs	r3, #50	; 0x32
    94e6:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    94ea:	69e0      	ldr	r0, [r4, #28]
    94ec:	6803      	ldr	r3, [r0, #0]
    94ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94f2:	6921      	ldr	r1, [r4, #16]
    94f4:	4798      	blx	r3
    94f6:	4603      	mov	r3, r0
    94f8:	2800      	cmp	r0, #0
    94fa:	d0ba      	beq.n	9472 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    94fc:	69e0      	ldr	r0, [r4, #28]
    94fe:	6921      	ldr	r1, [r4, #16]
    9500:	6803      	ldr	r3, [r0, #0]
    9502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9504:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9506:	3106      	adds	r1, #6
    9508:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    950a:	4603      	mov	r3, r0
    950c:	2800      	cmp	r0, #0
    950e:	d0b0      	beq.n	9472 <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    9510:	f44f 7200 	mov.w	r2, #512	; 0x200
    9514:	2100      	movs	r1, #0
    9516:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9518:	f007 ffc8 	bl	114ac <memset>
    951c:	4b27      	ldr	r3, [pc, #156]	; (95bc <FatFormatter::makeFat32()+0x1e0>)
    951e:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    9522:	69e0      	ldr	r0, [r4, #28]
    9524:	6921      	ldr	r1, [r4, #16]
    9526:	6803      	ldr	r3, [r0, #0]
    9528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    952a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    952c:	3102      	adds	r1, #2
    952e:	4798      	blx	r3
    9530:	4603      	mov	r3, r0
    9532:	2800      	cmp	r0, #0
    9534:	d09d      	beq.n	9472 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    9536:	69e0      	ldr	r0, [r4, #28]
    9538:	6921      	ldr	r1, [r4, #16]
    953a:	6803      	ldr	r3, [r0, #0]
    953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    953e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9540:	3108      	adds	r1, #8
    9542:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    9544:	4603      	mov	r3, r0
    9546:	2800      	cmp	r0, #0
    9548:	d093      	beq.n	9472 <FatFormatter::makeFat32()+0x96>
    954a:	4b1d      	ldr	r3, [pc, #116]	; (95c0 <FatFormatter::makeFat32()+0x1e4>)
    954c:	602b      	str	r3, [r5, #0]
    954e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
    9552:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    9556:	3320      	adds	r3, #32
    9558:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    955c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9560:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
    9564:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9568:	69e0      	ldr	r0, [r4, #28]
    956a:	6921      	ldr	r1, [r4, #16]
    956c:	6803      	ldr	r3, [r0, #0]
    956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9570:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9572:	3101      	adds	r1, #1
    9574:	4798      	blx	r3
    9576:	4603      	mov	r3, r0
    9578:	2800      	cmp	r0, #0
    957a:	f43f af7a 	beq.w	9472 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    957e:	69e0      	ldr	r0, [r4, #28]
    9580:	6921      	ldr	r1, [r4, #16]
    9582:	6803      	ldr	r3, [r0, #0]
    9584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9586:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9588:	3107      	adds	r1, #7
    958a:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    958c:	4603      	mov	r3, r0
    958e:	2800      	cmp	r0, #0
    9590:	f43f af6f 	beq.w	9472 <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    9594:	68a2      	ldr	r2, [r4, #8]
    9596:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    959a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    959e:	2120      	movs	r1, #32
    95a0:	4620      	mov	r0, r4
    95a2:	f7ff fddb 	bl	915c <FatFormatter::initFatDir(unsigned char, unsigned long)>
    95a6:	4603      	mov	r3, r0
    95a8:	e763      	b.n	9472 <FatFormatter::makeFat32()+0x96>
    return false;
    95aa:	2300      	movs	r3, #0
    95ac:	e761      	b.n	9472 <FatFormatter::makeFat32()+0x96>
    95ae:	bf00      	nop
    95b0:	00fb0400 	.word	0x00fb0400
    95b4:	20002024 	.word	0x20002024
    95b8:	0012d687 	.word	0x0012d687
    95bc:	aa550000 	.word	0xaa550000
    95c0:	41615252 	.word	0x41615252

000095c4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    95c4:	b538      	push	{r3, r4, r5, lr}
    95c6:	4604      	mov	r4, r0
    95c8:	4608      	mov	r0, r1
  m_dev = dev;
    95ca:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
    95cc:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    95ce:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    95d0:	680b      	ldr	r3, [r1, #0]
    95d2:	69db      	ldr	r3, [r3, #28]
    95d4:	4798      	blx	r3
    95d6:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    95d8:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
    95dc:	0ada      	lsrs	r2, r3, #11
    95de:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
    95e0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    95e4:	d31d      	bcc.n	9622 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
    95e6:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
    95ea:	d333      	bcc.n	9654 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
    95ec:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
    95f0:	d342      	bcc.n	9678 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
    95f2:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
    95f6:	d341      	bcc.n	967c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
    95f8:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
    95fc:	d340      	bcc.n	9680 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
    95fe:	4a22      	ldr	r2, [pc, #136]	; (9688 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    9600:	4293      	cmp	r3, r2
    9602:	d93f      	bls.n	9684 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
    9604:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
    9608:	4293      	cmp	r3, r2
    960a:	d814      	bhi.n	9636 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
    960c:	2340      	movs	r3, #64	; 0x40
    960e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    9612:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    9616:	d320      	bcc.n	965a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
    9618:	4620      	mov	r0, r4
    961a:	f7ff fedf 	bl	93dc <FatFormatter::makeFat32()>
    961e:	4605      	mov	r5, r0
    9620:	e01f      	b.n	9662 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
    9622:	6a20      	ldr	r0, [r4, #32]
    9624:	b1a0      	cbz	r0, 9650 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    9626:	6803      	ldr	r3, [r0, #0]
    9628:	685b      	ldr	r3, [r3, #4]
    962a:	2214      	movs	r2, #20
    962c:	4917      	ldr	r1, [pc, #92]	; (968c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    962e:	4798      	blx	r3
    return false;
    9630:	2500      	movs	r5, #0
}
    9632:	4628      	mov	r0, r5
    9634:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
    9636:	2380      	movs	r3, #128	; 0x80
    9638:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    963c:	e7ec      	b.n	9618 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
    963e:	6a20      	ldr	r0, [r4, #32]
    9640:	2800      	cmp	r0, #0
    9642:	d0f6      	beq.n	9632 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9644:	6803      	ldr	r3, [r0, #0]
    9646:	685b      	ldr	r3, [r3, #4]
    9648:	220f      	movs	r2, #15
    964a:	4911      	ldr	r1, [pc, #68]	; (9690 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    964c:	4798      	blx	r3
    964e:	e7f0      	b.n	9632 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
    9650:	2500      	movs	r5, #0
    9652:	e7ee      	b.n	9632 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9654:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
    9656:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    965a:	4620      	mov	r0, r4
    965c:	f7ff fe30 	bl	92c0 <FatFormatter::makeFat16()>
    9660:	4605      	mov	r5, r0
  if (rtn) {
    9662:	2d00      	cmp	r5, #0
    9664:	d0eb      	beq.n	963e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    9666:	6a20      	ldr	r0, [r4, #32]
    9668:	2800      	cmp	r0, #0
    966a:	d0e2      	beq.n	9632 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    966c:	6803      	ldr	r3, [r0, #0]
    966e:	685b      	ldr	r3, [r3, #4]
    9670:	220d      	movs	r2, #13
    9672:	4908      	ldr	r1, [pc, #32]	; (9694 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
    9674:	4798      	blx	r3
    9676:	e7dc      	b.n	9632 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9678:	2304      	movs	r3, #4
    967a:	e7ec      	b.n	9656 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    967c:	2308      	movs	r3, #8
    967e:	e7ea      	b.n	9656 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9680:	2310      	movs	r3, #16
    9682:	e7e8      	b.n	9656 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9684:	2320      	movs	r3, #32
    9686:	e7e6      	b.n	9656 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9688:	002007ff 	.word	0x002007ff
    968c:	20001fec 	.word	0x20001fec
    9690:	20002014 	.word	0x20002014
    9694:	20002004 	.word	0x20002004

00009698 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    9698:	2a04      	cmp	r2, #4
    969a:	d804      	bhi.n	96a6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    969c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    96a0:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    96a4:	4770      	bx	lr
  } else if (i < 11) {
    96a6:	2a0a      	cmp	r2, #10
    96a8:	d803      	bhi.n	96b2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    96aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    96ae:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    96b0:	4770      	bx	lr
  } else if (i < 13) {
    96b2:	2a0c      	cmp	r2, #12
    96b4:	d803      	bhi.n	96be <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    96b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    96ba:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
    96bc:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    96be:	2000      	movs	r0, #0
}
    96c0:	4770      	bx	lr

000096c2 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    96c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96c6:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    96c8:	7804      	ldrb	r4, [r0, #0]
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    96ca:	2c00      	cmp	r4, #0
    96cc:	d041      	beq.n	9752 <FatFile::getSFN(char*, unsigned int)+0x90>
    96ce:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    96d0:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    96d4:	d007      	beq.n	96e6 <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
    96d6:	2a01      	cmp	r2, #1
    96d8:	d93b      	bls.n	9752 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    96da:	232f      	movs	r3, #47	; 0x2f
    96dc:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
    96de:	2300      	movs	r3, #0
    96e0:	704b      	strb	r3, [r1, #1]
    return 1;
    96e2:	2001      	movs	r0, #1
    96e4:	e037      	b.n	9756 <FatFile::getSFN(char*, unsigned int)+0x94>
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    96e6:	2100      	movs	r1, #0
    96e8:	f7fe f930 	bl	794c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    96ec:	4686      	mov	lr, r0
    96ee:	b380      	cbz	r0, 9752 <FatFile::getSFN(char*, unsigned int)+0x90>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    96f0:	4603      	mov	r3, r0
    96f2:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
    96f4:	2108      	movs	r1, #8
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    96f6:	f04f 0810 	mov.w	r8, #16
      c = '.';
    96fa:	272e      	movs	r7, #46	; 0x2e
    96fc:	e012      	b.n	9724 <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
    96fe:	781a      	ldrb	r2, [r3, #0]
    9700:	2a20      	cmp	r2, #32
    9702:	d022      	beq.n	974a <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
    9704:	4641      	mov	r1, r8
      c = '.';
    9706:	46bc      	mov	ip, r7
    9708:	e002      	b.n	9710 <FatFile::getSFN(char*, unsigned int)+0x4e>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
        c += 'a' - 'A';
      }
      if (c == ' ') {
    970a:	f1bc 0f20 	cmp.w	ip, #32
    970e:	d006      	beq.n	971e <FatFile::getSFN(char*, unsigned int)+0x5c>
        continue;
      }
    }
    if ((j + 1u) >= size) {
    9710:	46a1      	mov	r9, r4
    9712:	1c62      	adds	r2, r4, #1
    9714:	42b2      	cmp	r2, r6
    9716:	d21c      	bcs.n	9752 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    9718:	b2d4      	uxtb	r4, r2
    971a:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
    971e:	3001      	adds	r0, #1
    9720:	280c      	cmp	r0, #12
    9722:	d012      	beq.n	974a <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
    9724:	b2c2      	uxtb	r2, r0
    9726:	2a08      	cmp	r2, #8
    9728:	d0e9      	beq.n	96fe <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
    972a:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    972e:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
    9732:	b2d2      	uxtb	r2, r2
    9734:	2a19      	cmp	r2, #25
    9736:	d8e8      	bhi.n	970a <FatFile::getSFN(char*, unsigned int)+0x48>
    9738:	f89e 200c 	ldrb.w	r2, [lr, #12]
    973c:	4211      	tst	r1, r2
    973e:	d0e7      	beq.n	9710 <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
    9740:	f10c 0c20 	add.w	ip, ip, #32
    9744:	fa5f fc8c 	uxtb.w	ip, ip
    9748:	e7e2      	b.n	9710 <FatFile::getSFN(char*, unsigned int)+0x4e>
  }
  name[j] = '\0';
    974a:	4620      	mov	r0, r4
    974c:	2300      	movs	r3, #0
    974e:	552b      	strb	r3, [r5, r4]
  return j;
    9750:	e001      	b.n	9756 <FatFile::getSFN(char*, unsigned int)+0x94>

 fail:
  name[0] = '\0';
    9752:	2000      	movs	r0, #0
    9754:	7028      	strb	r0, [r5, #0]
  return 0;
}
    9756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000975c <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9760:	b08b      	sub	sp, #44	; 0x2c
    9762:	4689      	mov	r9, r1
  FatFile() {}
    9764:	2300      	movs	r3, #0
    9766:	f88d 3004 	strb.w	r3, [sp, #4]
    976a:	f88d 3005 	strb.w	r3, [sp, #5]
    976e:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
    9772:	7803      	ldrb	r3, [r0, #0]
    9774:	2b00      	cmp	r3, #0
    9776:	d05d      	beq.n	9834 <FatFile::getName8(char*, unsigned int)+0xd8>
    9778:	4604      	mov	r4, r0
    977a:	4617      	mov	r7, r2
  if (!isLFN()) {
    977c:	78c3      	ldrb	r3, [r0, #3]
    977e:	b913      	cbnz	r3, 9786 <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    9780:	f7ff ff9f 	bl	96c2 <FatFile::getSFN(char*, unsigned int)>
    9784:	e059      	b.n	983a <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
    9786:	4601      	mov	r1, r0
    9788:	a801      	add	r0, sp, #4
    978a:	f7fe f90e 	bl	79aa <FatFile::openCluster(FatFile*)>
    978e:	2800      	cmp	r0, #0
    9790:	d050      	beq.n	9834 <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9792:	78e3      	ldrb	r3, [r4, #3]
    9794:	2b00      	cmp	r3, #0
    9796:	d05d      	beq.n	9854 <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
    9798:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    979a:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
    979e:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    97a0:	3f01      	subs	r7, #1
    97a2:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    97a4:	88a1      	ldrh	r1, [r4, #4]
    97a6:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    97aa:	b289      	uxth	r1, r1
    97ac:	0149      	lsls	r1, r1, #5
    97ae:	a801      	add	r0, sp, #4
    97b0:	f7fe fa1c 	bl	7bec <FatFile::seekSet(unsigned long)>
    97b4:	2800      	cmp	r0, #0
    97b6:	d03d      	beq.n	9834 <FatFile::getName8(char*, unsigned int)+0xd8>
    97b8:	2100      	movs	r1, #0
    97ba:	a801      	add	r0, sp, #4
    97bc:	f7fe f9f4 	bl	7ba8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    97c0:	4682      	mov	sl, r0
    97c2:	b3b8      	cbz	r0, 9834 <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    97c4:	7ac3      	ldrb	r3, [r0, #11]
    97c6:	2b0f      	cmp	r3, #15
    97c8:	d134      	bne.n	9834 <FatFile::getName8(char*, unsigned int)+0xd8>
    97ca:	7803      	ldrb	r3, [r0, #0]
    97cc:	f003 031f 	and.w	r3, r3, #31
    97d0:	455b      	cmp	r3, fp
    97d2:	d12f      	bne.n	9834 <FatFile::getName8(char*, unsigned int)+0xd8>
    97d4:	f04f 0800 	mov.w	r8, #0
    97d8:	e012      	b.n	9800 <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    97da:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    97de:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    97e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    97e4:	d323      	bcc.n	982e <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
    97e6:	b3b0      	cbz	r0, 9856 <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    97e8:	463a      	mov	r2, r7
    97ea:	4629      	mov	r1, r5
    97ec:	f002 fb55 	bl	be9a <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    97f0:	4605      	mov	r5, r0
    97f2:	b1f8      	cbz	r0, 9834 <FatFile::getName8(char*, unsigned int)+0xd8>
    97f4:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
    97f6:	f108 0801 	add.w	r8, r8, #1
    97fa:	f1b8 0f0d 	cmp.w	r8, #13
    97fe:	d021      	beq.n	9844 <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
    9800:	fa5f f288 	uxtb.w	r2, r8
    9804:	4651      	mov	r1, sl
    9806:	4620      	mov	r0, r4
    9808:	f7ff ff46 	bl	9698 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    980c:	2e00      	cmp	r6, #0
    980e:	d0e4      	beq.n	97da <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    9810:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    9814:	b29b      	uxth	r3, r3
    9816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    981a:	d20b      	bcs.n	9834 <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    981c:	4b10      	ldr	r3, [pc, #64]	; (9860 <FatFile::getName8(char*, unsigned int)+0x104>)
    981e:	ea03 2686 	and.w	r6, r3, r6, lsl #10
    9822:	f3c0 0009 	ubfx	r0, r0, #0, #10
    9826:	4306      	orrs	r6, r0
    9828:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
    982c:	e7dc      	b.n	97e8 <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
    982e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9832:	d305      	bcc.n	9840 <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
    9834:	2000      	movs	r0, #0
    9836:	f889 0000 	strb.w	r0, [r9]
}
    983a:	b00b      	add	sp, #44	; 0x2c
    983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    9840:	4606      	mov	r6, r0
    9842:	e7d8      	b.n	97f6 <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9844:	f10b 0b01 	add.w	fp, fp, #1
    9848:	fa5f fb8b 	uxtb.w	fp, fp
    984c:	78e3      	ldrb	r3, [r4, #3]
    984e:	455b      	cmp	r3, fp
    9850:	d2a8      	bcs.n	97a4 <FatFile::getName8(char*, unsigned int)+0x48>
    9852:	e000      	b.n	9856 <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
    9854:	464d      	mov	r5, r9
  *str = '\0';
    9856:	2300      	movs	r3, #0
    9858:	702b      	strb	r3, [r5, #0]
  return str - name;
    985a:	eba5 0009 	sub.w	r0, r5, r9
    985e:	e7ec      	b.n	983a <FatFile::getName8(char*, unsigned int)+0xde>
    9860:	000ffc00 	.word	0x000ffc00

00009864 <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    9864:	b508      	push	{r3, lr}
  return getName8(name, size);
    9866:	f7ff ff79 	bl	975c <FatFile::getName8(char*, unsigned int)>
}
    986a:	bd08      	pop	{r3, pc}

0000986c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    986c:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    986e:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    9870:	46a4      	mov	ip, r4
    9872:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    9876:	bf28      	it	cs
    9878:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    987c:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9880:	4281      	cmp	r1, r0
    9882:	d307      	bcc.n	9894 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    9884:	eba4 040c 	sub.w	r4, r4, ip
    9888:	6014      	str	r4, [r2, #0]
}
    988a:	f85d 4b04 	ldr.w	r4, [sp], #4
    988e:	4770      	bx	lr
  while (p < e) {
    9890:	4288      	cmp	r0, r1
    9892:	d9f7      	bls.n	9884 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
    9894:	f831 3b02 	ldrh.w	r3, [r1], #2
    9898:	2b00      	cmp	r3, #0
    989a:	d1f9      	bne.n	9890 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    989c:	6853      	ldr	r3, [r2, #4]
    989e:	3301      	adds	r3, #1
    98a0:	6053      	str	r3, [r2, #4]
    98a2:	e7f5      	b.n	9890 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

000098a4 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    98a4:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    98a6:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    98a8:	46a4      	mov	ip, r4
    98aa:	2c80      	cmp	r4, #128	; 0x80
    98ac:	bf28      	it	cs
    98ae:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    98b2:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    98b6:	4281      	cmp	r1, r0
    98b8:	d307      	bcc.n	98ca <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    98ba:	eba4 040c 	sub.w	r4, r4, ip
    98be:	6014      	str	r4, [r2, #0]
}
    98c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    98c4:	4770      	bx	lr
  while (p < e) {
    98c6:	4288      	cmp	r0, r1
    98c8:	d9f7      	bls.n	98ba <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
    98ca:	f851 3b04 	ldr.w	r3, [r1], #4
    98ce:	2b00      	cmp	r3, #0
    98d0:	d1f9      	bne.n	98c6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    98d2:	6853      	ldr	r3, [r2, #4]
    98d4:	3301      	adds	r3, #1
    98d6:	6053      	str	r3, [r2, #4]
    98d8:	e7f5      	b.n	98c6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

000098da <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    98da:	2901      	cmp	r1, #1
    98dc:	d974      	bls.n	99c8 <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    98de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    98e2:	4606      	mov	r6, r0
    98e4:	460c      	mov	r4, r1
    98e6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    98e8:	69c3      	ldr	r3, [r0, #28]
    98ea:	428b      	cmp	r3, r1
    98ec:	d36f      	bcc.n	99ce <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
    98ee:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    98f0:	2b20      	cmp	r3, #32
    98f2:	d02d      	beq.n	9950 <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
    98f4:	2b10      	cmp	r3, #16
    98f6:	d044      	beq.n	9982 <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    98f8:	2b0c      	cmp	r3, #12
    98fa:	d172      	bne.n	99e2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
    98fc:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9900:	fa13 f381 	uxtah	r3, r3, r1
    9904:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9906:	f3c3 2346 	ubfx	r3, r3, #9, #7
    990a:	6982      	ldr	r2, [r0, #24]
    990c:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
    9910:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9914:	7a02      	ldrb	r2, [r0, #8]
    9916:	2a02      	cmp	r2, #2
    9918:	bf14      	ite	ne
    991a:	2200      	movne	r2, #0
    991c:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    991e:	0052      	lsls	r2, r2, #1
    9920:	4641      	mov	r1, r8
    9922:	4648      	mov	r0, r9
    9924:	f002 f9ff 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9928:	4602      	mov	r2, r0
    992a:	2800      	cmp	r0, #0
    992c:	d05c      	beq.n	99e8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
    992e:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
    9932:	5cc7      	ldrb	r7, [r0, r3]
    index++;
    9934:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    993a:	d036      	beq.n	99aa <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
    993c:	5cd3      	ldrb	r3, [r2, r3]
    993e:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    9942:	f014 0f01 	tst.w	r4, #1
    9946:	bf14      	ite	ne
    9948:	091b      	lsrne	r3, r3, #4
    994a:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
    994e:	e012      	b.n	9976 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9950:	7a02      	ldrb	r2, [r0, #8]
    9952:	2a02      	cmp	r2, #2
    9954:	bf14      	ite	ne
    9956:	2200      	movne	r2, #0
    9958:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    995a:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    995c:	0052      	lsls	r2, r2, #1
    995e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9962:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9966:	f002 f9de 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    996a:	2800      	cmp	r0, #0
    996c:	d033      	beq.n	99d6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    996e:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    9970:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    9974:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    9976:	69f2      	ldr	r2, [r6, #28]
    9978:	4293      	cmp	r3, r2
    997a:	d83b      	bhi.n	99f4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
    997c:	602b      	str	r3, [r5, #0]
  return 1;
    997e:	2001      	movs	r0, #1
    9980:	e027      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9982:	7a02      	ldrb	r2, [r0, #8]
    9984:	2a02      	cmp	r2, #2
    9986:	bf14      	ite	ne
    9988:	2200      	movne	r2, #0
    998a:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    998c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9990:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9992:	0052      	lsls	r2, r2, #1
    9994:	4419      	add	r1, r3
    9996:	f500 700e 	add.w	r0, r0, #568	; 0x238
    999a:	f002 f9c4 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    999e:	b1e8      	cbz	r0, 99dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    99a0:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    99a2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    99a6:	5b03      	ldrh	r3, [r0, r4]
    99a8:	e7e5      	b.n	9976 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    99aa:	7a32      	ldrb	r2, [r6, #8]
    99ac:	2a02      	cmp	r2, #2
    99ae:	bf14      	ite	ne
    99b0:	2200      	movne	r2, #0
    99b2:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    99b4:	0052      	lsls	r2, r2, #1
    99b6:	f108 0101 	add.w	r1, r8, #1
    99ba:	4648      	mov	r0, r9
    99bc:	f002 f9b3 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    99c0:	4602      	mov	r2, r0
    99c2:	b1a0      	cbz	r0, 99ee <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
    99c4:	2300      	movs	r3, #0
    99c6:	e7b9      	b.n	993c <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
    99c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    99cc:	4770      	bx	lr
  return -1;
    99ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    99d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
    99d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99da:	e7fa      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99e0:	e7f7      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99e6:	e7f4      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99ec:	e7f1      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99f2:	e7ee      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
    99f4:	2000      	movs	r0, #0
    99f6:	e7ec      	b.n	99d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

000099f8 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    99f8:	2901      	cmp	r1, #1
    99fa:	d972      	bls.n	9ae2 <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    99fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a00:	4606      	mov	r6, r0
    9a02:	460c      	mov	r4, r1
    9a04:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    9a06:	69c3      	ldr	r3, [r0, #28]
    9a08:	428b      	cmp	r3, r1
    9a0a:	d36c      	bcc.n	9ae6 <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
    9a0c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9a0e:	2b20      	cmp	r3, #32
    9a10:	d02d      	beq.n	9a6e <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
    9a12:	2b10      	cmp	r3, #16
    9a14:	d03e      	beq.n	9a94 <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
    9a16:	2b0c      	cmp	r3, #12
    9a18:	d16c      	bne.n	9af4 <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
    9a1a:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9a1e:	fa13 f381 	uxtah	r3, r3, r1
    9a22:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9a24:	f3c3 2346 	ubfx	r3, r3, #9, #7
    9a28:	6982      	ldr	r2, [r0, #24]
    9a2a:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9a2e:	7a03      	ldrb	r3, [r0, #8]
    9a30:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9a32:	f500 790e 	add.w	r9, r0, #568	; 0x238
    9a36:	bf14      	ite	ne
    9a38:	2201      	movne	r2, #1
    9a3a:	2203      	moveq	r2, #3
    9a3c:	4641      	mov	r1, r8
    9a3e:	4648      	mov	r0, r9
    9a40:	f002 f971 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9a44:	4601      	mov	r1, r0
    9a46:	2800      	cmp	r0, #0
    9a48:	d056      	beq.n	9af8 <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
    9a4a:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
    9a4e:	f014 0401 	ands.w	r4, r4, #1
    9a52:	d055      	beq.n	9b00 <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
    9a54:	5cc2      	ldrb	r2, [r0, r3]
    9a56:	f002 020f 	and.w	r2, r2, #15
    9a5a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
    9a5e:	54c2      	strb	r2, [r0, r3]
    index++;
    9a60:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9a66:	d029      	beq.n	9abc <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    9a68:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9a6c:	e054      	b.n	9b18 <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9a6e:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9a70:	7a03      	ldrb	r3, [r0, #8]
    9a72:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9a74:	bf14      	ite	ne
    9a76:	2201      	movne	r2, #1
    9a78:	2203      	moveq	r2, #3
    9a7a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9a7e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9a82:	f002 f950 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9a86:	b388      	cbz	r0, 9aec <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9a88:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    9a8a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9a8e:	5105      	str	r5, [r0, r4]
    return true;
    9a90:	2001      	movs	r0, #1
    9a92:	e029      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9a94:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9a98:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9a9a:	7a02      	ldrb	r2, [r0, #8]
    9a9c:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    9a9e:	bf14      	ite	ne
    9aa0:	2201      	movne	r2, #1
    9aa2:	2203      	moveq	r2, #3
    9aa4:	4419      	add	r1, r3
    9aa6:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9aaa:	f002 f93c 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9aae:	b1f8      	cbz	r0, 9af0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9ab0:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    9ab2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    9ab6:	5305      	strh	r5, [r0, r4]
    return true;
    9ab8:	2001      	movs	r0, #1
    9aba:	e015      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9abc:	7a33      	ldrb	r3, [r6, #8]
    9abe:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9ac0:	bf14      	ite	ne
    9ac2:	2201      	movne	r2, #1
    9ac4:	2203      	moveq	r2, #3
    9ac6:	f108 0101 	add.w	r1, r8, #1
    9aca:	4648      	mov	r0, r9
    9acc:	f002 f92b 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9ad0:	4601      	mov	r1, r0
    9ad2:	b198      	cbz	r0, 9afc <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
    9ad4:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9ad8:	b90c      	cbnz	r4, 9ade <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
    9ada:	2300      	movs	r3, #0
    9adc:	e017      	b.n	9b0e <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
    9ade:	2300      	movs	r3, #0
    9ae0:	e01a      	b.n	9b18 <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
    9ae2:	2000      	movs	r0, #0
}
    9ae4:	4770      	bx	lr
  return false;
    9ae6:	2000      	movs	r0, #0
}
    9ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9aec:	2000      	movs	r0, #0
    9aee:	e7fb      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9af0:	2000      	movs	r0, #0
    9af2:	e7f9      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9af4:	2000      	movs	r0, #0
    9af6:	e7f7      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9af8:	2000      	movs	r0, #0
    9afa:	e7f5      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9afc:	2000      	movs	r0, #0
    9afe:	e7f3      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
    9b00:	54c5      	strb	r5, [r0, r3]
    index++;
    9b02:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9b08:	d0d8      	beq.n	9abc <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    9b0a:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9b0e:	5cc8      	ldrb	r0, [r1, r3]
    9b10:	f020 000f 	bic.w	r0, r0, #15
    9b14:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
    9b18:	54ca      	strb	r2, [r1, r3]
    return true;
    9b1a:	2001      	movs	r0, #1
    9b1c:	e7e4      	b.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

00009b1e <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9b1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9b22:	b083      	sub	sp, #12
    9b24:	4605      	mov	r5, r0
    9b26:	460e      	mov	r6, r1
    9b28:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    9b2a:	68c4      	ldr	r4, [r0, #12]
    9b2c:	428c      	cmp	r4, r1
    9b2e:	d30c      	bcc.n	9b4a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
    9b30:	2701      	movs	r7, #1
      setStart = true;
    9b32:	f04f 0901 	mov.w	r9, #1
    find++;
    9b36:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    9b38:	69eb      	ldr	r3, [r5, #28]
    9b3a:	42a3      	cmp	r3, r4
    9b3c:	d20b      	bcs.n	9b56 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
    9b3e:	b13f      	cbz	r7, 9b50 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
    9b40:	2700      	movs	r7, #0
}
    9b42:	4638      	mov	r0, r7
    9b44:	b003      	add	sp, #12
    9b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
    9b4a:	460c      	mov	r4, r1
    setStart = false;
    9b4c:	2700      	movs	r7, #0
    9b4e:	e7f0      	b.n	9b32 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
    9b50:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    9b52:	464f      	mov	r7, r9
    9b54:	e7ef      	b.n	9b36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
    9b56:	42a6      	cmp	r6, r4
    9b58:	d0f2      	beq.n	9b40 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
    9b5a:	aa01      	add	r2, sp, #4
    9b5c:	4621      	mov	r1, r4
    9b5e:	4628      	mov	r0, r5
    9b60:	f7ff febb 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9b64:	2800      	cmp	r0, #0
    9b66:	dbeb      	blt.n	9b40 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
    9b68:	2800      	cmp	r0, #0
    9b6a:	d0e4      	beq.n	9b36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    9b6c:	9b01      	ldr	r3, [sp, #4]
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d1e1      	bne.n	9b36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    9b72:	b107      	cbz	r7, 9b76 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
    9b74:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
    9b76:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9b7a:	4621      	mov	r1, r4
    9b7c:	4628      	mov	r0, r5
    9b7e:	f7ff ff3b 	bl	99f8 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    9b82:	4607      	mov	r7, r0
    9b84:	2800      	cmp	r0, #0
    9b86:	d0dc      	beq.n	9b42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
    9b88:	b93e      	cbnz	r6, 9b9a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
    9b8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	db01      	blt.n	9b94 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
    9b90:	3b01      	subs	r3, #1
    9b92:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9b94:	f8c8 4000 	str.w	r4, [r8]
  return true;
    9b98:	e7d3      	b.n	9b42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
    9b9a:	4622      	mov	r2, r4
    9b9c:	4631      	mov	r1, r6
    9b9e:	4628      	mov	r0, r5
    9ba0:	f7ff ff2a 	bl	99f8 <FatPartition::fatPut(unsigned long, unsigned long)>
    9ba4:	2800      	cmp	r0, #0
    9ba6:	d1f0      	bne.n	9b8a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
    9ba8:	4607      	mov	r7, r0
    9baa:	e7ca      	b.n	9b42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00009bac <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bae:	b083      	sub	sp, #12
    9bb0:	4605      	mov	r5, r0
    9bb2:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
    9bb4:	2700      	movs	r7, #0
    9bb6:	e001      	b.n	9bbc <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
    9bb8:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
    9bba:	b1ce      	cbz	r6, 9bf0 <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
    9bbc:	aa01      	add	r2, sp, #4
    9bbe:	4621      	mov	r1, r4
    9bc0:	4628      	mov	r0, r5
    9bc2:	f7ff fe8a 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9bc6:	1e06      	subs	r6, r0, #0
    9bc8:	db11      	blt.n	9bee <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
    9bca:	463a      	mov	r2, r7
    9bcc:	4621      	mov	r1, r4
    9bce:	4628      	mov	r0, r5
    9bd0:	f7ff ff12 	bl	99f8 <FatPartition::fatPut(unsigned long, unsigned long)>
    9bd4:	4602      	mov	r2, r0
    9bd6:	b158      	cbz	r0, 9bf0 <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
    9bd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9bda:	2b00      	cmp	r3, #0
    9bdc:	db01      	blt.n	9be2 <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
    9bde:	3301      	adds	r3, #1
    9be0:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9be2:	68eb      	ldr	r3, [r5, #12]
    9be4:	42a3      	cmp	r3, r4
    9be6:	d9e7      	bls.n	9bb8 <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
    9be8:	3c01      	subs	r4, #1
    9bea:	60ec      	str	r4, [r5, #12]
    9bec:	e7e4      	b.n	9bb8 <FatPartition::freeChain(unsigned long)+0xc>
  return false;
    9bee:	2200      	movs	r2, #0
}
    9bf0:	4610      	mov	r0, r2
    9bf2:	b003      	add	sp, #12
    9bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00009bf8 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    9bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bfa:	b087      	sub	sp, #28
    9bfc:	4604      	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    9bfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9c00:	2800      	cmp	r0, #0
    9c02:	da45      	bge.n	9c90 <FatPartition::freeClusterCount()+0x98>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    9c04:	79e3      	ldrb	r3, [r4, #7]
    9c06:	2b0c      	cmp	r3, #12
    9c08:	d11e      	bne.n	9c48 <FatPartition::freeClusterCount()+0x50>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    9c0a:	69e7      	ldr	r7, [r4, #28]
    9c0c:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    9c0e:	2b02      	cmp	r3, #2
    9c10:	d917      	bls.n	9c42 <FatPartition::freeClusterCount()+0x4a>
    9c12:	2502      	movs	r5, #2
    uint32_t free = 0;
    9c14:	2600      	movs	r6, #0
    9c16:	e006      	b.n	9c26 <FatPartition::freeClusterCount()+0x2e>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
    9c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c1c:	e038      	b.n	9c90 <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
    9c1e:	1c6b      	adds	r3, r5, #1
    9c20:	42af      	cmp	r7, r5
    9c22:	d00f      	beq.n	9c44 <FatPartition::freeClusterCount()+0x4c>
    9c24:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
    9c26:	aa03      	add	r2, sp, #12
    9c28:	4629      	mov	r1, r5
    9c2a:	4620      	mov	r0, r4
    9c2c:	f7ff fe55 	bl	98da <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    9c30:	2800      	cmp	r0, #0
    9c32:	dbf1      	blt.n	9c18 <FatPartition::freeClusterCount()+0x20>
      }
      if (fg && c == 0) {
    9c34:	2800      	cmp	r0, #0
    9c36:	d0f2      	beq.n	9c1e <FatPartition::freeClusterCount()+0x26>
    9c38:	9b03      	ldr	r3, [sp, #12]
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d1ef      	bne.n	9c1e <FatPartition::freeClusterCount()+0x26>
        free++;
    9c3e:	3601      	adds	r6, #1
    9c40:	e7ed      	b.n	9c1e <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
    9c42:	2600      	movs	r6, #0
      }
    }
    return free;
    9c44:	4630      	mov	r0, r6
    9c46:	e023      	b.n	9c90 <FatPartition::freeClusterCount()+0x98>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    9c48:	2300      	movs	r3, #0
    9c4a:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
    9c4c:	69e3      	ldr	r3, [r4, #28]
    9c4e:	3301      	adds	r3, #1
    9c50:	9304      	str	r3, [sp, #16]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    9c52:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
    9c54:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    9c58:	f013 0f01 	tst.w	r3, #1
    9c5c:	d11a      	bne.n	9c94 <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
    9c5e:	2300      	movs	r3, #0
    9c60:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c68:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
    9c6c:	f504 7212 	add.w	r2, r4, #584	; 0x248
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    9c70:	79e3      	ldrb	r3, [r4, #7]
    9c72:	2b20      	cmp	r3, #32
    9c74:	d017      	beq.n	9ca6 <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9c76:	6820      	ldr	r0, [r4, #0]
    9c78:	6803      	ldr	r3, [r0, #0]
    9c7a:	a904      	add	r1, sp, #16
    9c7c:	9101      	str	r1, [sp, #4]
    9c7e:	4913      	ldr	r1, [pc, #76]	; (9ccc <FatPartition::freeClusterCount()+0xd4>)
    9c80:	9100      	str	r1, [sp, #0]
    9c82:	699e      	ldr	r6, [r3, #24]
    9c84:	462b      	mov	r3, r5
    9c86:	69a1      	ldr	r1, [r4, #24]
    9c88:	47b0      	blx	r6
    9c8a:	b1d8      	cbz	r0, 9cc4 <FatPartition::freeClusterCount()+0xcc>
  }

  setFreeClusterCount(state.free_count);
    9c8c:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    9c8e:	6260      	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    9c90:	b007      	add	sp, #28
    9c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
    9c94:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9c98:	f002 f81e 	bl	bcd8 <FsCache::sync()>
    9c9c:	2800      	cmp	r0, #0
    9c9e:	d1de      	bne.n	9c5e <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
    9ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9ca4:	e7f4      	b.n	9c90 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9ca6:	6820      	ldr	r0, [r4, #0]
    9ca8:	6803      	ldr	r3, [r0, #0]
    9caa:	a904      	add	r1, sp, #16
    9cac:	9101      	str	r1, [sp, #4]
    9cae:	4908      	ldr	r1, [pc, #32]	; (9cd0 <FatPartition::freeClusterCount()+0xd8>)
    9cb0:	9100      	str	r1, [sp, #0]
    9cb2:	699e      	ldr	r6, [r3, #24]
    9cb4:	462b      	mov	r3, r5
    9cb6:	69a1      	ldr	r1, [r4, #24]
    9cb8:	47b0      	blx	r6
    9cba:	2800      	cmp	r0, #0
    9cbc:	d1e6      	bne.n	9c8c <FatPartition::freeClusterCount()+0x94>
    9cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cc2:	e7e5      	b.n	9c90 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cc8:	e7e2      	b.n	9c90 <FatPartition::freeClusterCount()+0x98>
    9cca:	bf00      	nop
    9ccc:	0000986d 	.word	0x0000986d
    9cd0:	000098a5 	.word	0x000098a5

00009cd4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9cd4:	b570      	push	{r4, r5, r6, lr}
    9cd6:	4604      	mov	r4, r0
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    9cd8:	6001      	str	r1, [r0, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    9cda:	2300      	movs	r3, #0
    9cdc:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    9cde:	2001      	movs	r0, #1
    9ce0:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
    9ce2:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
    9ce6:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
    9ce8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cf0:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    9cf2:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    9cf6:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9cfa:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9cfe:	b1e2      	cbz	r2, 9d3a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    9d00:	4616      	mov	r6, r2
    if (part > 4) {
    9d02:	2a04      	cmp	r2, #4
    9d04:	d901      	bls.n	9d0a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    9d06:	2000      	movs	r0, #0
}
    9d08:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    9d0a:	461a      	mov	r2, r3
    9d0c:	4619      	mov	r1, r3
    9d0e:	4628      	mov	r0, r5
    9d10:	f002 f809 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    9d14:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    9d18:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9d1c:	4433      	add	r3, r6
    9d1e:	011e      	lsls	r6, r3, #4
    9d20:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    9d24:	2800      	cmp	r0, #0
    9d26:	d06a      	beq.n	9dfe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
    9d28:	7919      	ldrb	r1, [r3, #4]
    9d2a:	2900      	cmp	r1, #0
    9d2c:	d069      	beq.n	9e02 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
    9d2e:	5d92      	ldrb	r2, [r2, r6]
    9d30:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    9d34:	d167      	bne.n	9e06 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
    9d36:	689e      	ldr	r6, [r3, #8]
    9d38:	e000      	b.n	9d3c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
    9d3a:	2600      	movs	r6, #0
    9d3c:	2200      	movs	r2, #0
    9d3e:	4631      	mov	r1, r6
    9d40:	4628      	mov	r0, r5
    9d42:	f001 fff0 	bl	bd26 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    9d46:	4601      	mov	r1, r0
    9d48:	2800      	cmp	r0, #0
    9d4a:	d05e      	beq.n	9e0a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
    9d4c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    9d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9d54:	d15b      	bne.n	9e0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
    9d56:	7c03      	ldrb	r3, [r0, #16]
    9d58:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    9d5a:	3b01      	subs	r3, #1
    9d5c:	b2db      	uxtb	r3, r3
    9d5e:	2b01      	cmp	r3, #1
    9d60:	d857      	bhi.n	9e12 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9d62:	7b40      	ldrb	r0, [r0, #13]
    9d64:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9d66:	1e43      	subs	r3, r0, #1
    9d68:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    9d6a:	2300      	movs	r3, #0
    9d6c:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9d6e:	2801      	cmp	r0, #1
    9d70:	d00d      	beq.n	9d8e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
    9d72:	2200      	movs	r2, #0
    9d74:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
    9d76:	3201      	adds	r2, #1
    9d78:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9d7a:	005b      	lsls	r3, r3, #1
    9d7c:	b2db      	uxtb	r3, r3
    9d7e:	4298      	cmp	r0, r3
    9d80:	d004      	beq.n	9d8c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
    9d82:	2b00      	cmp	r3, #0
    9d84:	d1f7      	bne.n	9d76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    9d86:	71a2      	strb	r2, [r4, #6]
  return false;
    9d88:	2000      	movs	r0, #0
    9d8a:	e7bd      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9d8c:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9d8e:	8acb      	ldrh	r3, [r1, #22]
    9d90:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9d92:	b90b      	cbnz	r3, 9d98 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
    9d94:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9d96:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9d98:	89cb      	ldrh	r3, [r1, #14]
    9d9a:	4433      	add	r3, r6
    9d9c:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
    9d9e:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9da2:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9da4:	6920      	ldr	r0, [r4, #16]
    9da6:	7c0d      	ldrb	r5, [r1, #16]
    9da8:	fb00 3305 	mla	r3, r0, r5, r3
    9dac:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9dae:	0152      	lsls	r2, r2, #5
    9db0:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
    9db4:	eb03 2352 	add.w	r3, r3, r2, lsr #9
    9db8:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
    9dba:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
    9dbe:	b902      	cbnz	r2, 9dc2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
    9dc0:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9dc2:	1af3      	subs	r3, r6, r3
    9dc4:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9dc6:	79a2      	ldrb	r2, [r4, #6]
    9dc8:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
    9dca:	1c5a      	adds	r2, r3, #1
    9dcc:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9dd2:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9dd4:	f640 72f4 	movw	r2, #4084	; 0xff4
    9dd8:	4293      	cmp	r3, r2
    9dda:	d907      	bls.n	9dec <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9ddc:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    9de0:	4293      	cmp	r3, r2
    9de2:	d90a      	bls.n	9dfa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
    9de4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9de6:	6223      	str	r3, [r4, #32]
    9de8:	2320      	movs	r3, #32
    9dea:	e000      	b.n	9dee <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
    9dec:	230c      	movs	r3, #12
    m_fatType = 12;
    9dee:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9df0:	6320      	str	r0, [r4, #48]	; 0x30
    9df2:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
    9df6:	2001      	movs	r0, #1
    9df8:	e786      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9dfa:	2310      	movs	r3, #16
    9dfc:	e7f7      	b.n	9dee <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
    9dfe:	2000      	movs	r0, #0
    9e00:	e782      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e02:	2000      	movs	r0, #0
    9e04:	e780      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e06:	2000      	movs	r0, #0
    9e08:	e77e      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e0a:	2000      	movs	r0, #0
    9e0c:	e77c      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e0e:	2000      	movs	r0, #0
    9e10:	e77a      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e12:	2000      	movs	r0, #0
    9e14:	e778      	b.n	9d08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

00009e16 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9e16:	b538      	push	{r3, r4, r5, lr}
    9e18:	4604      	mov	r4, r0
    9e1a:	460d      	mov	r5, r1
    9e1c:	2300      	movs	r3, #0
    9e1e:	6383      	str	r3, [r0, #56]	; 0x38
    9e20:	63c3      	str	r3, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    9e22:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    9e24:	b1ab      	cbz	r3, 9e52 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
    9e26:	4601      	mov	r1, r0
    9e28:	2024      	movs	r0, #36	; 0x24
    9e2a:	f000 f8b3 	bl	9f94 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    9e2e:	2300      	movs	r3, #0
    9e30:	7003      	strb	r3, [r0, #0]
    9e32:	7043      	strb	r3, [r0, #1]
    9e34:	7083      	strb	r3, [r0, #2]
    9e36:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9e38:	4684      	mov	ip, r0
    9e3a:	6bad      	ldr	r5, [r5, #56]	; 0x38
    9e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9e3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9e44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9e48:	682b      	ldr	r3, [r5, #0]
    9e4a:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    9e4e:	4620      	mov	r0, r4
    9e50:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
    9e52:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    9e54:	2b00      	cmp	r3, #0
    9e56:	d0fa      	beq.n	9e4e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
    9e58:	4601      	mov	r1, r0
    9e5a:	2038      	movs	r0, #56	; 0x38
    9e5c:	f000 f89a 	bl	9f94 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9e60:	2300      	movs	r3, #0
    9e62:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    9e66:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    9e6a:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    9e6e:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    9e70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9e72:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    9e76:	f8d3 c000 	ldr.w	ip, [r3]
    9e7a:	685d      	ldr	r5, [r3, #4]
    9e7c:	6899      	ldr	r1, [r3, #8]
    9e7e:	68da      	ldr	r2, [r3, #12]
    9e80:	f8c0 c000 	str.w	ip, [r0]
    9e84:	6045      	str	r5, [r0, #4]
    9e86:	6081      	str	r1, [r0, #8]
    9e88:	60c2      	str	r2, [r0, #12]
    9e8a:	3310      	adds	r3, #16
    9e8c:	3010      	adds	r0, #16
    9e8e:	4573      	cmp	r3, lr
    9e90:	d1f1      	bne.n	9e76 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	6003      	str	r3, [r0, #0]
    9e96:	e7da      	b.n	9e4e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

00009e98 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    9e98:	b510      	push	{r4, lr}
    9e9a:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9e9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9e9e:	b110      	cbz	r0, 9ea6 <FsBaseFile::close()+0xe>
    9ea0:	f7fe f844 	bl	7f2c <FatFile::close()>
    9ea4:	b938      	cbnz	r0, 9eb6 <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9ea6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9ea8:	b140      	cbz	r0, 9ebc <FsBaseFile::close()+0x24>
    9eaa:	f7fb fcbf 	bl	582c <ExFatFile::close()>
    9eae:	b130      	cbz	r0, 9ebe <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
    9eb0:	2300      	movs	r3, #0
    9eb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9eb4:	e003      	b.n	9ebe <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
    9eb6:	2300      	movs	r3, #0
    9eb8:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9eba:	e000      	b.n	9ebe <FsBaseFile::close()+0x26>
  }
  return false;
    9ebc:	2000      	movs	r0, #0
}
    9ebe:	bd10      	pop	{r4, pc}

00009ec0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9ec0:	b3a1      	cbz	r1, 9f2c <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ec4:	4604      	mov	r4, r0
    9ec6:	4617      	mov	r7, r2
    9ec8:	461e      	mov	r6, r3
    9eca:	460d      	mov	r5, r1
    return false;
  }
  close();
    9ecc:	f7ff ffe4 	bl	9e98 <FsBaseFile::close()>
  if (vol->m_fVol) {
    9ed0:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    9ed4:	b18b      	cbz	r3, 9efa <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    9ed6:	4621      	mov	r1, r4
    9ed8:	2024      	movs	r0, #36	; 0x24
    9eda:	f000 f85b 	bl	9f94 <operator new(unsigned int, unsigned long*)>
    9ede:	2300      	movs	r3, #0
    9ee0:	7003      	strb	r3, [r0, #0]
    9ee2:	7043      	strb	r3, [r0, #1]
    9ee4:	7083      	strb	r3, [r0, #2]
    9ee6:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9ee8:	4633      	mov	r3, r6
    9eea:	463a      	mov	r2, r7
    9eec:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9ef0:	f7fe f889 	bl	8006 <FatFile::open(FatVolume*, char const*, int)>
    9ef4:	b900      	cbnz	r0, 9ef8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
    9ef6:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
    9efa:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9efe:	b1bb      	cbz	r3, 9f30 <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
    9f00:	4621      	mov	r1, r4
    9f02:	2038      	movs	r0, #56	; 0x38
    9f04:	f000 f846 	bl	9f94 <operator new(unsigned int, unsigned long*)>
    9f08:	2200      	movs	r2, #0
    9f0a:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9f0e:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9f12:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9f16:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9f18:	4633      	mov	r3, r6
    9f1a:	463a      	mov	r2, r7
    9f1c:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    9f20:	f7fc f8cd 	bl	60be <ExFatFile::open(ExFatVolume*, char const*, int)>
    9f24:	2800      	cmp	r0, #0
    9f26:	d1e7      	bne.n	9ef8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
    9f28:	63e0      	str	r0, [r4, #60]	; 0x3c
    9f2a:	e7e5      	b.n	9ef8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
    9f2c:	2000      	movs	r0, #0
}
    9f2e:	4770      	bx	lr
  return false;
    9f30:	2000      	movs	r0, #0
    9f32:	e7e1      	b.n	9ef8 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

00009f34 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9f34:	b570      	push	{r4, r5, r6, lr}
    9f36:	4605      	mov	r5, r0
    9f38:	460c      	mov	r4, r1
    9f3a:	4616      	mov	r6, r2
  close();
    9f3c:	f7ff ffac 	bl	9e98 <FsBaseFile::close()>
  if (dir->m_fFile) {
    9f40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9f42:	b17b      	cbz	r3, 9f64 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
    9f44:	4629      	mov	r1, r5
    9f46:	2024      	movs	r0, #36	; 0x24
    9f48:	f000 f824 	bl	9f94 <operator new(unsigned int, unsigned long*)>
    9f4c:	2100      	movs	r1, #0
    9f4e:	7001      	strb	r1, [r0, #0]
    9f50:	7041      	strb	r1, [r0, #1]
    9f52:	7081      	strb	r1, [r0, #2]
    9f54:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9f56:	4632      	mov	r2, r6
    9f58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9f5a:	f7fd ff33 	bl	7dc4 <FatFile::openNext(FatFile*, int)>
    9f5e:	b900      	cbnz	r0, 9f62 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
    9f60:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9f62:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
    9f64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9f66:	b19b      	cbz	r3, 9f90 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    9f68:	4629      	mov	r1, r5
    9f6a:	2038      	movs	r0, #56	; 0x38
    9f6c:	f000 f812 	bl	9f94 <operator new(unsigned int, unsigned long*)>
    9f70:	2200      	movs	r2, #0
    9f72:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9f76:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9f7a:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9f7e:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9f80:	4632      	mov	r2, r6
    9f82:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9f84:	f7fc f8a4 	bl	60d0 <ExFatFile::openNext(ExFatFile*, int)>
    9f88:	2800      	cmp	r0, #0
    9f8a:	d1ea      	bne.n	9f62 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
    9f8c:	63e8      	str	r0, [r5, #60]	; 0x3c
    9f8e:	e7e8      	b.n	9f62 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
    9f90:	2000      	movs	r0, #0
    9f92:	e7e6      	b.n	9f62 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

00009f94 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9f94:	4608      	mov	r0, r1
    9f96:	4770      	bx	lr

00009f98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f9c:	4604      	mov	r4, r0
    9f9e:	4690      	mov	r8, r2
    9fa0:	461f      	mov	r7, r3
  m_blockDev = blockDev;
    9fa2:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9fa6:	2600      	movs	r6, #0
    9fa8:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9fac:	4601      	mov	r1, r0
    9fae:	f44f 6090 	mov.w	r0, #1152	; 0x480
    9fb2:	f7ff ffef 	bl	9f94 <operator new(unsigned int, unsigned long*)>
    9fb6:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    9fb8:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9fbc:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9fc0:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    9fc4:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    9fc8:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9fcc:	463a      	mov	r2, r7
    9fce:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9fd2:	f7fd fbcd 	bl	7770 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9fd6:	bb00      	cbnz	r0, a01a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9fd8:	2500      	movs	r5, #0
    9fda:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9fde:	4621      	mov	r1, r4
    9fe0:	f240 406c 	movw	r0, #1132	; 0x46c
    9fe4:	f7ff ffd6 	bl	9f94 <operator new(unsigned int, unsigned long*)>
    9fe8:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    9fea:	71c5      	strb	r5, [r0, #7]
    9fec:	2302      	movs	r3, #2
    9fee:	7203      	strb	r3, [r0, #8]
    9ff0:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
    9ff4:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
    9ff8:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
    9ffc:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    a000:	463a      	mov	r2, r7
    a002:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a006:	f7ff fe65 	bl	9cd4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a00a:	b9f8      	cbnz	r0, a04c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    a00c:	2000      	movs	r0, #0
    a00e:	4b1a      	ldr	r3, [pc, #104]	; (a078 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a010:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
    a012:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    a016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a01a:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    a01e:	4630      	mov	r0, r6
    a020:	f7fb fc04 	bl	582c <ExFatFile::close()>
    return m_vwd.openRoot(this);
    a024:	4629      	mov	r1, r5
    a026:	4630      	mov	r0, r6
    a028:	f7fb fc2e 	bl	5888 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    a02c:	2800      	cmp	r0, #0
    a02e:	d0d3      	beq.n	9fd8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
    a030:	4b12      	ldr	r3, [pc, #72]	; (a07c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	b13b      	cbz	r3, a046 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
    a036:	f1b8 0f00 	cmp.w	r8, #0
    a03a:	d119      	bne.n	a070 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
    a03c:	4b0e      	ldr	r3, [pc, #56]	; (a078 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a03e:	681b      	ldr	r3, [r3, #0]
    a040:	b1b3      	cbz	r3, a070 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
    a042:	2001      	movs	r0, #1
    a044:	e7e7      	b.n	a016 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
    a046:	4b0d      	ldr	r3, [pc, #52]	; (a07c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    a048:	601d      	str	r5, [r3, #0]
    a04a:	e7f4      	b.n	a036 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a04c:	f506 6589 	add.w	r5, r6, #1096	; 0x448
    a050:	4628      	mov	r0, r5
    a052:	f7fd ff6b 	bl	7f2c <FatFile::close()>
    return m_vwd.openRoot(this);
    a056:	4631      	mov	r1, r6
    a058:	4628      	mov	r0, r5
    a05a:	f7fd fc88 	bl	796e <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    a05e:	2800      	cmp	r0, #0
    a060:	d0d4      	beq.n	a00c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
    a062:	4b07      	ldr	r3, [pc, #28]	; (a080 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    a064:	681b      	ldr	r3, [r3, #0]
    a066:	2b00      	cmp	r3, #0
    a068:	d1e5      	bne.n	a036 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
    a06a:	4b05      	ldr	r3, [pc, #20]	; (a080 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    a06c:	601e      	str	r6, [r3, #0]
    a06e:	e7e2      	b.n	a036 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
    a070:	4b01      	ldr	r3, [pc, #4]	; (a078 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a072:	601c      	str	r4, [r3, #0]
  return true;
    a074:	2001      	movs	r0, #1
    a076:	e7ce      	b.n	a016 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
    a078:	20004c98 	.word	0x20004c98
    a07c:	20004c64 	.word	0x20004c64
    a080:	20004ca4 	.word	0x20004ca4

0000a084 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    a084:	b538      	push	{r3, r4, r5, lr}
    a086:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    a088:	2000      	movs	r0, #0
    a08a:	6060      	str	r0, [r4, #4]
    a08c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    a090:	60a5      	str	r5, [r4, #8]
    a092:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
    a094:	64a0      	str	r0, [r4, #72]	; 0x48
    a096:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    a098:	4620      	mov	r0, r4
    a09a:	4d03      	ldr	r5, [pc, #12]	; (a0a8 <FsVolume::open(char const*, int)+0x24>)
    a09c:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    a0a0:	f7ff ff0e 	bl	9ec0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    a0a4:	4620      	mov	r0, r4
    a0a6:	bd38      	pop	{r3, r4, r5, pc}
    a0a8:	20002524 	.word	0x20002524

0000a0ac <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    a0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a0b0:	4770      	bx	lr

0000a0b2 <SharedSpiCard::errorCode() const>:
  }
    a0b2:	7c40      	ldrb	r0, [r0, #17]
    a0b4:	4770      	bx	lr

0000a0b6 <SharedSpiCard::errorData() const>:
  }
    a0b6:	7d00      	ldrb	r0, [r0, #20]
    a0b8:	4770      	bx	lr

0000a0ba <SharedSpiCard::type() const>:
  }
    a0ba:	7d40      	ldrb	r0, [r0, #21]
    a0bc:	4770      	bx	lr

0000a0be <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    a0be:	2001      	movs	r0, #1
    a0c0:	4770      	bx	lr

0000a0c2 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    a0c2:	7f00      	ldrb	r0, [r0, #28]
    a0c4:	4770      	bx	lr

0000a0c6 <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    a0c6:	b500      	push	{lr}
    a0c8:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a0ca:	6803      	ldr	r3, [r0, #0]
    a0cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a0ce:	4669      	mov	r1, sp
    a0d0:	4798      	blx	r3
    a0d2:	b3b0      	cbz	r0, a142 <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a0d4:	f89d 3000 	ldrb.w	r3, [sp]
    a0d8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a0dc:	d003      	beq.n	a0e6 <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a0de:	2b40      	cmp	r3, #64	; 0x40
    a0e0:	d020      	beq.n	a124 <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    a0e2:	2000      	movs	r0, #0
    a0e4:	e02e      	b.n	a144 <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a0e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0ea:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a0ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a0f2:	0080      	lsls	r0, r0, #2
    a0f4:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    a0f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a0fc:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a100:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a102:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a106:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    a10a:	f89d 200a 	ldrb.w	r2, [sp, #10]
    a10e:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a110:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a114:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a118:	f002 020f 	and.w	r2, r2, #15
    a11c:	4413      	add	r3, r2
    a11e:	3b07      	subs	r3, #7
    a120:	4098      	lsls	r0, r3
    a122:	e00f      	b.n	a144 <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a124:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a12c:	f89d 0009 	ldrb.w	r0, [sp, #9]
    a130:	3001      	adds	r0, #1
    a132:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a136:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a13a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    a13e:	0280      	lsls	r0, r0, #10
    a140:	e000      	b.n	a144 <SharedSpiCard::sectorCount()+0x7e>
    a142:	2000      	movs	r0, #0
}
    a144:	b005      	add	sp, #20
    a146:	f85d fb04 	ldr.w	pc, [sp], #4

0000a14a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a14a:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
    a14c:	6803      	ldr	r3, [r0, #0]
    a14e:	695c      	ldr	r4, [r3, #20]
    a150:	2301      	movs	r3, #1
    a152:	47a0      	blx	r4
}
    a154:	bd10      	pop	{r4, pc}

0000a156 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    a156:	b538      	push	{r3, r4, r5, lr}
    a158:	4604      	mov	r4, r0
    a15a:	460d      	mov	r5, r1
  if (!syncDevice()) {
    a15c:	6803      	ldr	r3, [r0, #0]
    a15e:	6a1b      	ldr	r3, [r3, #32]
    a160:	4798      	blx	r3
    a162:	b100      	cbz	r0, a166 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    a164:	7725      	strb	r5, [r4, #28]
  return true;
}
    a166:	bd38      	pop	{r3, r4, r5, pc}

0000a168 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a16a:	4605      	mov	r5, r0
    a16c:	460e      	mov	r6, r1
    a16e:	4614      	mov	r4, r2
    a170:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a172:	7cc3      	ldrb	r3, [r0, #19]
    a174:	2b02      	cmp	r3, #2
    a176:	d021      	beq.n	a1bc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
    a178:	682b      	ldr	r3, [r5, #0]
    a17a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a17c:	4631      	mov	r1, r6
    a17e:	4628      	mov	r0, r5
    a180:	4798      	blx	r3
    a182:	4603      	mov	r3, r0
    a184:	b1c0      	cbz	r0, a1b8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
    a186:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    a188:	b167      	cbz	r7, a1a4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
    a18a:	2600      	movs	r6, #0
    if (!writeData(src)) {
    a18c:	682a      	ldr	r2, [r5, #0]
    a18e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    a190:	4621      	mov	r1, r4
    a192:	4628      	mov	r0, r5
    a194:	4790      	blx	r2
    a196:	4603      	mov	r3, r0
    a198:	b170      	cbz	r0, a1b8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
    a19a:	3601      	adds	r6, #1
    a19c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a1a0:	42b7      	cmp	r7, r6
    a1a2:	d1f3      	bne.n	a18c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
    a1a4:	69ab      	ldr	r3, [r5, #24]
    a1a6:	443b      	add	r3, r7
    a1a8:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    a1aa:	7f2b      	ldrb	r3, [r5, #28]
    a1ac:	b923      	cbnz	r3, a1b8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    a1ae:	682b      	ldr	r3, [r5, #0]
    a1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a1b2:	4628      	mov	r0, r5
    a1b4:	4798      	blx	r3
    a1b6:	4603      	mov	r3, r0

fail:
  return false;
}
    a1b8:	4618      	mov	r0, r3
    a1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a1bc:	6983      	ldr	r3, [r0, #24]
    a1be:	428b      	cmp	r3, r1
    a1c0:	d1da      	bne.n	a178 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    a1c2:	e7e1      	b.n	a188 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000a1c4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    a1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1c8:	4605      	mov	r5, r0
    a1ca:	460c      	mov	r4, r1
    a1cc:	4692      	mov	sl, r2
    a1ce:	461f      	mov	r7, r3
    a1d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a1d4:	7cc3      	ldrb	r3, [r0, #19]
    a1d6:	2b02      	cmp	r3, #2
    a1d8:	d026      	beq.n	a228 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
    a1da:	682b      	ldr	r3, [r5, #0]
    a1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a1de:	4621      	mov	r1, r4
    a1e0:	4628      	mov	r0, r5
    a1e2:	4798      	blx	r3
    a1e4:	4603      	mov	r3, r0
    a1e6:	b1e0      	cbz	r0, a222 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
    a1e8:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    a1ea:	f1ba 0f00 	cmp.w	sl, #0
    a1ee:	d00e      	beq.n	a20e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    a1f0:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
    a1f4:	4641      	mov	r1, r8
    a1f6:	4620      	mov	r0, r4
    a1f8:	47b8      	blx	r7
    a1fa:	4601      	mov	r1, r0
    if (!writeData(src)) {
    a1fc:	682b      	ldr	r3, [r5, #0]
    a1fe:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    a200:	4628      	mov	r0, r5
    a202:	47b0      	blx	r6
    a204:	4603      	mov	r3, r0
    a206:	b160      	cbz	r0, a222 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
    a208:	3401      	adds	r4, #1
    a20a:	45a1      	cmp	r9, r4
    a20c:	d1f2      	bne.n	a1f4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
    a20e:	69ab      	ldr	r3, [r5, #24]
    a210:	4453      	add	r3, sl
    a212:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    a214:	7f2b      	ldrb	r3, [r5, #28]
    a216:	b923      	cbnz	r3, a222 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
    a218:	682b      	ldr	r3, [r5, #0]
    a21a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a21c:	4628      	mov	r0, r5
    a21e:	4798      	blx	r3
    a220:	4603      	mov	r3, r0

 fail:
  return false;
}
    a222:	4618      	mov	r0, r3
    a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a228:	6983      	ldr	r3, [r0, #24]
    a22a:	428b      	cmp	r3, r1
    a22c:	d1d5      	bne.n	a1da <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
    a22e:	e7dc      	b.n	a1ea <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

0000a230 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    a230:	4770      	bx	lr

0000a232 <SharedSpiCard::end()>:
  void end() {
    a232:	b508      	push	{r3, lr}
    m_spiDriver.end();
    a234:	3004      	adds	r0, #4
    a236:	f001 fcfd 	bl	bc34 <SdSpiArduinoDriver::end()>
  }
    a23a:	bd08      	pop	{r3, pc}

0000a23c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    a23c:	b510      	push	{r4, lr}
    a23e:	4604      	mov	r4, r0
    a240:	2120      	movs	r1, #32
    a242:	f003 f909 	bl	d458 <operator delete(void*, unsigned int)>
    a246:	4620      	mov	r0, r4
    a248:	bd10      	pop	{r4, pc}

0000a24a <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    a24a:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    a24c:	7c83      	ldrb	r3, [r0, #18]
    a24e:	b103      	cbz	r3, a252 <SharedSpiCard::spiStart()+0x8>
}
    a250:	bd38      	pop	{r3, r4, r5, pc}
    a252:	4604      	mov	r4, r0
    m_spiDriver.activate();
    a254:	1d05      	adds	r5, r0, #4
    a256:	4628      	mov	r0, r5
    a258:	f001 fc14 	bl	ba84 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    a25c:	2100      	movs	r1, #0
    a25e:	7c20      	ldrb	r0, [r4, #16]
    a260:	f001 fc0c 	bl	ba7c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a264:	21ff      	movs	r1, #255	; 0xff
    a266:	4628      	mov	r0, r5
    a268:	f001 fd05 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    a26c:	2301      	movs	r3, #1
    a26e:	74a3      	strb	r3, [r4, #18]
}
    a270:	e7ee      	b.n	a250 <SharedSpiCard::spiStart()+0x6>

0000a272 <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    a272:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    a274:	7c83      	ldrb	r3, [r0, #18]
    a276:	b903      	cbnz	r3, a27a <SharedSpiCard::spiStop()+0x8>
}
    a278:	bd38      	pop	{r3, r4, r5, pc}
    a27a:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
    a27c:	2101      	movs	r1, #1
    a27e:	7c00      	ldrb	r0, [r0, #16]
    a280:	f001 fbfc 	bl	ba7c <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a284:	1d25      	adds	r5, r4, #4
    a286:	21ff      	movs	r1, #255	; 0xff
    a288:	4628      	mov	r0, r5
    a28a:	f001 fcf4 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a28e:	4628      	mov	r0, r5
    a290:	f001 fca0 	bl	bbd4 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a294:	2300      	movs	r3, #0
    a296:	74a3      	strb	r3, [r4, #18]
}
    a298:	e7ee      	b.n	a278 <SharedSpiCard::spiStop()+0x6>

0000a29a <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    a29a:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    a29c:	7cc3      	ldrb	r3, [r0, #19]
    a29e:	2b01      	cmp	r3, #1
    a2a0:	d018      	beq.n	a2d4 <SharedSpiCard::isBusy()+0x3a>
    a2a2:	4604      	mov	r4, r0
  if (!spiActive) {
    a2a4:	7c83      	ldrb	r3, [r0, #18]
    a2a6:	b143      	cbz	r3, a2ba <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
    a2a8:	3004      	adds	r0, #4
    a2aa:	f001 fcc8 	bl	bc3e <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a2ae:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a2b2:	bf18      	it	ne
    a2b4:	2501      	movne	r5, #1
}
    a2b6:	4628      	mov	r0, r5
    a2b8:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
    a2ba:	f7ff ffc6 	bl	a24a <SharedSpiCard::spiStart()>
    a2be:	1d20      	adds	r0, r4, #4
    a2c0:	f001 fcbd 	bl	bc3e <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a2c4:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a2c8:	bf18      	it	ne
    a2ca:	2501      	movne	r5, #1
    spiStop();
    a2cc:	4620      	mov	r0, r4
    a2ce:	f7ff ffd0 	bl	a272 <SharedSpiCard::spiStop()>
    a2d2:	e7f0      	b.n	a2b6 <SharedSpiCard::isBusy()+0x1c>
    return false;
    a2d4:	2500      	movs	r5, #0
    a2d6:	e7ee      	b.n	a2b6 <SharedSpiCard::isBusy()+0x1c>

0000a2d8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    a2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2dc:	4604      	mov	r4, r0
    a2de:	4688      	mov	r8, r1
    a2e0:	4691      	mov	r9, r2
    a2e2:	4b17      	ldr	r3, [pc, #92]	; (a340 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
    a2e4:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
    a2e6:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    a2ea:	b2ad      	uxth	r5, r5
    a2ec:	1d06      	adds	r6, r0, #4
    a2ee:	461f      	mov	r7, r3
    a2f0:	4630      	mov	r0, r6
    a2f2:	f001 fca4 	bl	bc3e <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    a2f6:	7520      	strb	r0, [r4, #20]
    a2f8:	28ff      	cmp	r0, #255	; 0xff
    a2fa:	d10c      	bne.n	a316 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
    a2fc:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a2fe:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    a300:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a304:	d0f4      	beq.n	a2f0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    a306:	231d      	movs	r3, #29
    m_errorCode = code;
    a308:	7463      	strb	r3, [r4, #17]
  spiStop();
    a30a:	4620      	mov	r0, r4
    a30c:	f7ff ffb1 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a310:	2000      	movs	r0, #0
}
    a312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
    a316:	28fe      	cmp	r0, #254	; 0xfe
    a318:	d001      	beq.n	a31e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    a31a:	2318      	movs	r3, #24
    a31c:	e7f4      	b.n	a308 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
    a31e:	464a      	mov	r2, r9
    a320:	4641      	mov	r1, r8
    a322:	4630      	mov	r0, r6
    a324:	f001 fc97 	bl	bc56 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    a328:	7520      	strb	r0, [r4, #20]
    a32a:	b108      	cbz	r0, a330 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
    a32c:	2325      	movs	r3, #37	; 0x25
    a32e:	e7eb      	b.n	a308 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
    a330:	4630      	mov	r0, r6
    a332:	f001 fc84 	bl	bc3e <SdSpiArduinoDriver::receive()>
    a336:	4630      	mov	r0, r6
    a338:	f001 fc81 	bl	bc3e <SdSpiArduinoDriver::receive()>
  return true;
    a33c:	2001      	movs	r0, #1
    a33e:	e7e8      	b.n	a312 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
    a340:	20005388 	.word	0x20005388

0000a344 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
    a344:	b508      	push	{r3, lr}
  return readData(dst, 512);
    a346:	f44f 7200 	mov.w	r2, #512	; 0x200
    a34a:	f7ff ffc5 	bl	a2d8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
    a34e:	bd08      	pop	{r3, pc}

0000a350 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    a350:	b570      	push	{r4, r5, r6, lr}
    a352:	4b0a      	ldr	r3, [pc, #40]	; (a37c <SharedSpiCard::waitReady(unsigned short)+0x2c>)
    a354:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
    a356:	440c      	add	r4, r1
    a358:	b2a4      	uxth	r4, r4
    a35a:	1d05      	adds	r5, r0, #4
    a35c:	461e      	mov	r6, r3
    a35e:	4628      	mov	r0, r5
    a360:	f001 fc6d 	bl	bc3e <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a364:	28ff      	cmp	r0, #255	; 0xff
    a366:	d006      	beq.n	a376 <SharedSpiCard::waitReady(unsigned short)+0x26>
    a368:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a36a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a36c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a370:	d0f5      	beq.n	a35e <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
    a372:	2000      	movs	r0, #0
    a374:	e000      	b.n	a378 <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
    a376:	2001      	movs	r0, #1
}
    a378:	bd70      	pop	{r4, r5, r6, pc}
    a37a:	bf00      	nop
    a37c:	20005388 	.word	0x20005388

0000a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    a380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a384:	b082      	sub	sp, #8
    a386:	4605      	mov	r5, r0
    a388:	460f      	mov	r7, r1
    a38a:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
    a38c:	6803      	ldr	r3, [r0, #0]
    a38e:	6a1b      	ldr	r3, [r3, #32]
    a390:	4798      	blx	r3
    a392:	2800      	cmp	r0, #0
    a394:	d03b      	beq.n	a40e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
    a396:	7cab      	ldrb	r3, [r5, #18]
    a398:	b3ab      	cbz	r3, a406 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
    a39a:	2f0c      	cmp	r7, #12
    a39c:	d00a      	beq.n	a3b4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    a39e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    a3a2:	4628      	mov	r0, r5
    a3a4:	f7ff ffd4 	bl	a350 <SharedSpiCard::waitReady(unsigned short)>
    a3a8:	b127      	cbz	r7, a3b4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    a3aa:	f080 0001 	eor.w	r0, r0, #1
    a3ae:	f010 0fff 	tst.w	r0, #255	; 0xff
    a3b2:	d12e      	bne.n	a412 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
    a3b4:	1d2e      	adds	r6, r5, #4
    a3b6:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    a3ba:	4630      	mov	r0, r6
    a3bc:	f001 fc5b 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    a3c0:	f10d 0804 	add.w	r8, sp, #4
    a3c4:	ac02      	add	r4, sp, #8
    a3c6:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a3ca:	4630      	mov	r0, r6
    a3cc:	f001 fc53 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    a3d0:	4544      	cmp	r4, r8
    a3d2:	d1f8      	bne.n	a3c6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    a3d4:	2f00      	cmp	r7, #0
    a3d6:	bf0c      	ite	eq
    a3d8:	2195      	moveq	r1, #149	; 0x95
    a3da:	2187      	movne	r1, #135	; 0x87
    a3dc:	4630      	mov	r0, r6
    a3de:	f001 fc4a 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a3e2:	4630      	mov	r0, r6
    a3e4:	f001 fc2b 	bl	bc3e <SdSpiArduinoDriver::receive()>
    a3e8:	240a      	movs	r4, #10
    a3ea:	4630      	mov	r0, r6
    a3ec:	f001 fc27 	bl	bc3e <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
    a3f0:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
    a3f2:	f010 0f80 	tst.w	r0, #128	; 0x80
    a3f6:	d003      	beq.n	a400 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
    a3f8:	3c01      	subs	r4, #1
    a3fa:	b2a4      	uxth	r4, r4
    a3fc:	2c00      	cmp	r4, #0
    a3fe:	d1f4      	bne.n	a3ea <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
    a400:	b002      	add	sp, #8
    a402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
    a406:	4628      	mov	r0, r5
    a408:	f7ff ff1f 	bl	a24a <SharedSpiCard::spiStart()>
    a40c:	e7c5      	b.n	a39a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
    a40e:	20ff      	movs	r0, #255	; 0xff
    a410:	e7f6      	b.n	a400 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
    a412:	20ff      	movs	r0, #255	; 0xff
    a414:	e7f4      	b.n	a400 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

0000a418 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a41c:	b089      	sub	sp, #36	; 0x24
    a41e:	4605      	mov	r5, r0
    a420:	ac01      	add	r4, sp, #4
    a422:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    a426:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a42a:	4617      	mov	r7, r2
  m_spiActive = false;
    a42c:	f04f 0800 	mov.w	r8, #0
    a430:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    a434:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    a438:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
    a43c:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    a43e:	f001 fb18 	bl	ba72 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    a442:	2101      	movs	r1, #1
    a444:	7c28      	ldrb	r0, [r5, #16]
    a446:	f001 fb19 	bl	ba7c <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    a44a:	4b55      	ldr	r3, [pc, #340]	; (a5a0 <SharedSpiCard::begin(SdSpiConfig)+0x188>)
    a44c:	60ab      	str	r3, [r5, #8]
    a44e:	2307      	movs	r3, #7
    a450:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
    a452:	ab05      	add	r3, sp, #20
    a454:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    a458:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    a45c:	1d2e      	adds	r6, r5, #4
    a45e:	cb0e      	ldmia	r3, {r1, r2, r3}
    a460:	4630      	mov	r0, r6
    a462:	f001 fba3 	bl	bbac <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
    a466:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
    a46a:	4628      	mov	r0, r5
    a46c:	f7ff feed 	bl	a24a <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
    a470:	2101      	movs	r1, #1
    a472:	7c28      	ldrb	r0, [r5, #16]
    a474:	f001 fb02 	bl	ba7c <sdCsWrite(unsigned char, bool)>
    a478:	240a      	movs	r4, #10
    m_spiDriver.send(data);
    a47a:	f04f 08ff 	mov.w	r8, #255	; 0xff
    a47e:	4641      	mov	r1, r8
    a480:	4630      	mov	r0, r6
    a482:	f001 fbf8 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    a486:	1e63      	subs	r3, r4, #1
    a488:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a48c:	d1f7      	bne.n	a47e <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
    a48e:	2100      	movs	r1, #0
    a490:	7c28      	ldrb	r0, [r5, #16]
    a492:	f001 faf3 	bl	ba7c <sdCsWrite(unsigned char, bool)>
    a496:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    a498:	f04f 0800 	mov.w	r8, #0
    a49c:	4642      	mov	r2, r8
    a49e:	4641      	mov	r1, r8
    a4a0:	4628      	mov	r0, r5
    a4a2:	f7ff ff6d 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4a6:	2801      	cmp	r0, #1
    a4a8:	d00c      	beq.n	a4c4 <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
    a4aa:	1e63      	subs	r3, r4, #1
    a4ac:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a4b0:	d1f4      	bne.n	a49c <SharedSpiCard::begin(SdSpiConfig)+0x84>
    a4b2:	2301      	movs	r3, #1
    m_errorCode = code;
    a4b4:	746b      	strb	r3, [r5, #17]
  spiStop();
    a4b6:	4628      	mov	r0, r5
    a4b8:	f7ff fedb 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a4bc:	2000      	movs	r0, #0
}
    a4be:	b009      	add	sp, #36	; 0x24
    a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    a4c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    a4c8:	2108      	movs	r1, #8
    a4ca:	4628      	mov	r0, r5
    a4cc:	f7ff ff58 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4d0:	f010 0f04 	tst.w	r0, #4
    a4d4:	d10e      	bne.n	a4f4 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
    a4d6:	2302      	movs	r3, #2
    a4d8:	756b      	strb	r3, [r5, #21]
    a4da:	2404      	movs	r4, #4
    return m_spiDriver.receive();
    a4dc:	4630      	mov	r0, r6
    a4de:	f001 fbae 	bl	bc3e <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    a4e2:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    a4e4:	1e63      	subs	r3, r4, #1
    a4e6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a4ea:	d1f7      	bne.n	a4dc <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
    a4ec:	28aa      	cmp	r0, #170	; 0xaa
    a4ee:	d003      	beq.n	a4f8 <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    a4f0:	2306      	movs	r3, #6
    a4f2:	e7df      	b.n	a4b4 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
    a4f4:	2301      	movs	r3, #1
    a4f6:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    a4f8:	682b      	ldr	r3, [r5, #0]
    a4fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a4fc:	4628      	mov	r0, r5
    a4fe:	4798      	blx	r3
    a500:	2802      	cmp	r0, #2
    a502:	bf14      	ite	ne
    a504:	2400      	movne	r4, #0
    a506:	2401      	moveq	r4, #1
    a508:	07a4      	lsls	r4, r4, #30
    a50a:	4b26      	ldr	r3, [pc, #152]	; (a5a4 <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
    a50c:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
    a50e:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
    a512:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
    a516:	f04f 0a00 	mov.w	sl, #0
    a51a:	f04f 0937 	mov.w	r9, #55	; 0x37
    a51e:	f8df b084 	ldr.w	fp, [pc, #132]	; a5a4 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    a522:	4652      	mov	r2, sl
    a524:	4649      	mov	r1, r9
    a526:	4628      	mov	r0, r5
    a528:	f7ff ff2a 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    a52c:	4622      	mov	r2, r4
    a52e:	2129      	movs	r1, #41	; 0x29
    a530:	4628      	mov	r0, r5
    a532:	f7ff ff25 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    a536:	b140      	cbz	r0, a54a <SharedSpiCard::begin(SdSpiConfig)+0x132>
    a538:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
    a53c:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    a540:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a544:	d0ed      	beq.n	a522 <SharedSpiCard::begin(SdSpiConfig)+0x10a>
    a546:	2317      	movs	r3, #23
    a548:	e7b4      	b.n	a4b4 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
    a54a:	682b      	ldr	r3, [r5, #0]
    a54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a54e:	4628      	mov	r0, r5
    a550:	4798      	blx	r3
    a552:	2802      	cmp	r0, #2
    a554:	d007      	beq.n	a566 <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
    a556:	4628      	mov	r0, r5
    a558:	f7ff fe8b 	bl	a272 <SharedSpiCard::spiStop()>
    a55c:	60af      	str	r7, [r5, #8]
    a55e:	2307      	movs	r3, #7
    a560:	60eb      	str	r3, [r5, #12]
  return true;
    a562:	2001      	movs	r0, #1
    a564:	e7ab      	b.n	a4be <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
    a566:	2200      	movs	r2, #0
    a568:	213a      	movs	r1, #58	; 0x3a
    a56a:	4628      	mov	r0, r5
    a56c:	f7ff ff08 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a570:	b108      	cbz	r0, a576 <SharedSpiCard::begin(SdSpiConfig)+0x15e>
    a572:	2312      	movs	r3, #18
    a574:	e79e      	b.n	a4b4 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
    a576:	4630      	mov	r0, r6
    a578:	f001 fb61 	bl	bc3e <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a57c:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    a580:	2bc0      	cmp	r3, #192	; 0xc0
    a582:	d009      	beq.n	a598 <SharedSpiCard::begin(SdSpiConfig)+0x180>
    a584:	4630      	mov	r0, r6
    a586:	f001 fb5a 	bl	bc3e <SdSpiArduinoDriver::receive()>
    a58a:	4630      	mov	r0, r6
    a58c:	f001 fb57 	bl	bc3e <SdSpiArduinoDriver::receive()>
    a590:	4630      	mov	r0, r6
    a592:	f001 fb54 	bl	bc3e <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a596:	e7de      	b.n	a556 <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
    a598:	2303      	movs	r3, #3
    a59a:	756b      	strb	r3, [r5, #21]
  }
    a59c:	e7f2      	b.n	a584 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    a59e:	bf00      	nop
    a5a0:	00061a80 	.word	0x00061a80
    a5a4:	20005388 	.word	0x20005388

0000a5a8 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5aa:	4606      	mov	r6, r0
    a5ac:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a5ae:	2200      	movs	r2, #0
    a5b0:	213a      	movs	r1, #58	; 0x3a
    a5b2:	f7ff fee5 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a5b6:	b968      	cbnz	r0, a5d4 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a5b8:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a5ba:	1d37      	adds	r7, r6, #4
    a5bc:	4638      	mov	r0, r7
    a5be:	f001 fb3e 	bl	bc3e <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a5c2:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a5c6:	42ac      	cmp	r4, r5
    a5c8:	d1f8      	bne.n	a5bc <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
    a5ca:	4630      	mov	r0, r6
    a5cc:	f7ff fe51 	bl	a272 <SharedSpiCard::spiStop()>
  return true;
    a5d0:	2001      	movs	r0, #1
}
    a5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a5d4:	2312      	movs	r3, #18
    a5d6:	7473      	strb	r3, [r6, #17]
  spiStop();
    a5d8:	4630      	mov	r0, r6
    a5da:	f7ff fe4a 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a5de:	2000      	movs	r0, #0
    a5e0:	e7f7      	b.n	a5d2 <SharedSpiCard::readOCR(unsigned long*)+0x2a>

0000a5e2 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a5e2:	b538      	push	{r3, r4, r5, lr}
    a5e4:	4604      	mov	r4, r0
    a5e6:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    a5e8:	2200      	movs	r2, #0
    a5ea:	f7ff fec9 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a5ee:	b138      	cbz	r0, a600 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    a5f0:	231b      	movs	r3, #27
    a5f2:	7463      	strb	r3, [r4, #17]
  spiStop();
    a5f4:	4620      	mov	r0, r4
    a5f6:	f7ff fe3c 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a5fa:	2500      	movs	r5, #0
}
    a5fc:	4628      	mov	r0, r5
    a5fe:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
    a600:	2210      	movs	r2, #16
    a602:	4629      	mov	r1, r5
    a604:	4620      	mov	r0, r4
    a606:	f7ff fe67 	bl	a2d8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a60a:	4605      	mov	r5, r0
    a60c:	2800      	cmp	r0, #0
    a60e:	d0f1      	beq.n	a5f4 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    a610:	4620      	mov	r0, r4
    a612:	f7ff fe2e 	bl	a272 <SharedSpiCard::spiStop()>
  return true;
    a616:	e7f1      	b.n	a5fc <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

0000a618 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a618:	b508      	push	{r3, lr}
    a61a:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
    a61c:	2109      	movs	r1, #9
    a61e:	f7ff ffe0 	bl	a5e2 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a622:	bd08      	pop	{r3, pc}

0000a624 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a624:	b508      	push	{r3, lr}
    a626:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
    a628:	210a      	movs	r1, #10
    a62a:	f7ff ffda 	bl	a5e2 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a62e:	bd08      	pop	{r3, pc}

0000a630 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    a630:	b538      	push	{r3, r4, r5, lr}
    a632:	4604      	mov	r4, r0
    a634:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a636:	6803      	ldr	r3, [r0, #0]
    a638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a63a:	4798      	blx	r3
    a63c:	2803      	cmp	r0, #3
    sector <<= 9;
    a63e:	bf18      	it	ne
    a640:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    a642:	462a      	mov	r2, r5
    a644:	2112      	movs	r1, #18
    a646:	4620      	mov	r0, r4
    a648:	f7ff fe9a 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a64c:	b910      	cbnz	r0, a654 <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
    a64e:	2001      	movs	r0, #1
    a650:	74e0      	strb	r0, [r4, #19]
}
    a652:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a654:	230c      	movs	r3, #12
    a656:	7463      	strb	r3, [r4, #17]
  spiStop();
    a658:	4620      	mov	r0, r4
    a65a:	f7ff fe0a 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a65e:	2000      	movs	r0, #0
    a660:	e7f7      	b.n	a652 <SharedSpiCard::readStart(unsigned long)+0x22>

0000a662 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a662:	b510      	push	{r4, lr}
    a664:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
    a666:	2200      	movs	r2, #0
    a668:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a66a:	210c      	movs	r1, #12
    a66c:	f7ff fe88 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a670:	b920      	cbnz	r0, a67c <SharedSpiCard::readStop()+0x1a>
  spiStop();
    a672:	4620      	mov	r0, r4
    a674:	f7ff fdfd 	bl	a272 <SharedSpiCard::spiStop()>
  return true;
    a678:	2001      	movs	r0, #1
}
    a67a:	bd10      	pop	{r4, pc}
    a67c:	2309      	movs	r3, #9
    a67e:	7463      	strb	r3, [r4, #17]
  spiStop();
    a680:	4620      	mov	r0, r4
    a682:	f7ff fdf6 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a686:	2000      	movs	r0, #0
    a688:	e7f7      	b.n	a67a <SharedSpiCard::readStop()+0x18>

0000a68a <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    a68a:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
    a68c:	7cc3      	ldrb	r3, [r0, #19]
    a68e:	2b02      	cmp	r3, #2
    a690:	d003      	beq.n	a69a <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
    a692:	2b01      	cmp	r3, #1
    a694:	d005      	beq.n	a6a2 <SharedSpiCard::syncDevice()+0x18>
  return true;
    a696:	2001      	movs	r0, #1
}
    a698:	bd08      	pop	{r3, pc}
    return writeStop();
    a69a:	6803      	ldr	r3, [r0, #0]
    a69c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a69e:	4798      	blx	r3
    a6a0:	e7fa      	b.n	a698 <SharedSpiCard::syncDevice()+0xe>
    return readStop();
    a6a2:	f7ff ffde 	bl	a662 <SharedSpiCard::readStop()>
    a6a6:	e7f7      	b.n	a698 <SharedSpiCard::syncDevice()+0xe>

0000a6a8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6aa:	4606      	mov	r6, r0
    a6ac:	460d      	mov	r5, r1
    a6ae:	4614      	mov	r4, r2
    a6b0:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a6b2:	7cc3      	ldrb	r3, [r0, #19]
    a6b4:	2b01      	cmp	r3, #1
    a6b6:	d102      	bne.n	a6be <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a6b8:	6983      	ldr	r3, [r0, #24]
    a6ba:	428b      	cmp	r3, r1
    a6bc:	d006      	beq.n	a6cc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    a6be:	4629      	mov	r1, r5
    a6c0:	4630      	mov	r0, r6
    a6c2:	f7ff ffb5 	bl	a630 <SharedSpiCard::readStart(unsigned long)>
    a6c6:	4603      	mov	r3, r0
    a6c8:	b190      	cbz	r0, a6f0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
    a6ca:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a6cc:	b15f      	cbz	r7, a6e6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    a6ce:	2500      	movs	r5, #0
    if (!readData(dst)) {
    a6d0:	4621      	mov	r1, r4
    a6d2:	4630      	mov	r0, r6
    a6d4:	f7ff fe36 	bl	a344 <SharedSpiCard::readData(unsigned char*)>
    a6d8:	4603      	mov	r3, r0
    a6da:	b148      	cbz	r0, a6f0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a6dc:	3501      	adds	r5, #1
    a6de:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a6e2:	42af      	cmp	r7, r5
    a6e4:	d1f4      	bne.n	a6d0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
    a6e6:	69b3      	ldr	r3, [r6, #24]
    a6e8:	443b      	add	r3, r7
    a6ea:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a6ec:	7f33      	ldrb	r3, [r6, #28]
    a6ee:	b10b      	cbz	r3, a6f4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
    a6f0:	4618      	mov	r0, r3
    a6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
    a6f4:	4630      	mov	r0, r6
    a6f6:	f7ff ffb4 	bl	a662 <SharedSpiCard::readStop()>
    a6fa:	4603      	mov	r3, r0
    a6fc:	e7f8      	b.n	a6f0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0000a6fe <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a6fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a702:	4606      	mov	r6, r0
    a704:	460c      	mov	r4, r1
    a706:	4615      	mov	r5, r2
    a708:	469a      	mov	sl, r3
    a70a:	9f08      	ldr	r7, [sp, #32]
    a70c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    a710:	7cc3      	ldrb	r3, [r0, #19]
    a712:	2b01      	cmp	r3, #1
    a714:	d102      	bne.n	a71c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
    a716:	6983      	ldr	r3, [r0, #24]
    a718:	428b      	cmp	r3, r1
    a71a:	d006      	beq.n	a72a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a71c:	4621      	mov	r1, r4
    a71e:	4630      	mov	r0, r6
    a720:	f7ff ff86 	bl	a630 <SharedSpiCard::readStart(unsigned long)>
    a724:	4603      	mov	r3, r0
    a726:	b1b8      	cbz	r0, a758 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
    a728:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a72a:	f1ba 0f00 	cmp.w	sl, #0
    a72e:	d00e      	beq.n	a74e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
    a730:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
    a734:	4629      	mov	r1, r5
    a736:	4630      	mov	r0, r6
    a738:	f7ff fe04 	bl	a344 <SharedSpiCard::readData(unsigned char*)>
    a73c:	4603      	mov	r3, r0
    a73e:	b158      	cbz	r0, a758 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
    a740:	4642      	mov	r2, r8
    a742:	4629      	mov	r1, r5
    a744:	4620      	mov	r0, r4
    a746:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
    a748:	3401      	adds	r4, #1
    a74a:	45a1      	cmp	r9, r4
    a74c:	d1f2      	bne.n	a734 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
    a74e:	69b3      	ldr	r3, [r6, #24]
    a750:	4453      	add	r3, sl
    a752:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a754:	7f33      	ldrb	r3, [r6, #28]
    a756:	b113      	cbz	r3, a75e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
    a758:	4618      	mov	r0, r3
    a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
    a75e:	4630      	mov	r0, r6
    a760:	f7ff ff7f 	bl	a662 <SharedSpiCard::readStop()>
    a764:	4603      	mov	r3, r0
    a766:	e7f7      	b.n	a758 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

0000a768 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    a768:	b538      	push	{r3, r4, r5, lr}
    a76a:	4604      	mov	r4, r0
    a76c:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a76e:	6803      	ldr	r3, [r0, #0]
    a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a772:	4798      	blx	r3
    a774:	2803      	cmp	r0, #3
    sector <<= 9;
    a776:	bf18      	it	ne
    a778:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    a77a:	462a      	mov	r2, r5
    a77c:	2119      	movs	r1, #25
    a77e:	4620      	mov	r0, r4
    a780:	f7ff fdfe 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a784:	b918      	cbnz	r0, a78e <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
    a786:	2302      	movs	r3, #2
    a788:	74e3      	strb	r3, [r4, #19]
  return true;
    a78a:	2001      	movs	r0, #1
}
    a78c:	bd38      	pop	{r3, r4, r5, pc}
    a78e:	230e      	movs	r3, #14
    a790:	7463      	strb	r3, [r4, #17]
  spiStop();
    a792:	4620      	mov	r0, r4
    a794:	f7ff fd6d 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a798:	2000      	movs	r0, #0
    a79a:	e7f7      	b.n	a78c <SharedSpiCard::writeStart(unsigned long)+0x24>

0000a79c <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a79c:	b570      	push	{r4, r5, r6, lr}
    a79e:	b084      	sub	sp, #16
    a7a0:	4604      	mov	r4, r0
    a7a2:	460d      	mov	r5, r1
    a7a4:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
    a7a6:	6803      	ldr	r3, [r0, #0]
    a7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a7aa:	4669      	mov	r1, sp
    a7ac:	4798      	blx	r3
    a7ae:	b1f8      	cbz	r0, a7f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
    a7b0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a7b4:	f013 0f40 	tst.w	r3, #64	; 0x40
    a7b8:	d10d      	bne.n	a7d6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a7ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a7be:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a7c2:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a7c4:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a7c8:	1c72      	adds	r2, r6, #1
    a7ca:	432a      	orrs	r2, r5
    a7cc:	4213      	tst	r3, r2
    a7ce:	d002      	beq.n	a7d6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    a7d0:	2327      	movs	r3, #39	; 0x27
    a7d2:	7463      	strb	r3, [r4, #17]
      goto fail;
    a7d4:	e00c      	b.n	a7f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a7d6:	7d63      	ldrb	r3, [r4, #21]
    a7d8:	2b03      	cmp	r3, #3
    a7da:	d001      	beq.n	a7e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
    a7dc:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    a7de:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
    a7e0:	462a      	mov	r2, r5
    a7e2:	2120      	movs	r1, #32
    a7e4:	4620      	mov	r0, r4
    a7e6:	f7ff fdcb 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a7ea:	b140      	cbz	r0, a7fe <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
    a7ec:	2326      	movs	r3, #38	; 0x26
    a7ee:	7463      	strb	r3, [r4, #17]
  spiStop();
    a7f0:	4620      	mov	r0, r4
    a7f2:	f7ff fd3e 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a7f6:	2500      	movs	r5, #0
}
    a7f8:	4628      	mov	r0, r5
    a7fa:	b004      	add	sp, #16
    a7fc:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
    a7fe:	4632      	mov	r2, r6
    a800:	2121      	movs	r1, #33	; 0x21
    a802:	4620      	mov	r0, r4
    a804:	f7ff fdbc 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a808:	2800      	cmp	r0, #0
    a80a:	d1ef      	bne.n	a7ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
    a80c:	2200      	movs	r2, #0
    a80e:	2126      	movs	r1, #38	; 0x26
    a810:	4620      	mov	r0, r4
    a812:	f7ff fdb5 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a816:	2800      	cmp	r0, #0
    a818:	d1e8      	bne.n	a7ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    a81a:	f242 7110 	movw	r1, #10000	; 0x2710
    a81e:	4620      	mov	r0, r4
    a820:	f7ff fd96 	bl	a350 <SharedSpiCard::waitReady(unsigned short)>
    a824:	4605      	mov	r5, r0
    a826:	b910      	cbnz	r0, a82e <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
    a828:	2328      	movs	r3, #40	; 0x28
    a82a:	7463      	strb	r3, [r4, #17]
    goto fail;
    a82c:	e7e0      	b.n	a7f0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
    a82e:	4620      	mov	r0, r4
    a830:	f7ff fd1f 	bl	a272 <SharedSpiCard::spiStop()>
  return true;
    a834:	e7e0      	b.n	a7f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

0000a836 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    a836:	b538      	push	{r3, r4, r5, lr}
    a838:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a83a:	f44f 7116 	mov.w	r1, #600	; 0x258
    a83e:	f7ff fd87 	bl	a350 <SharedSpiCard::waitReady(unsigned short)>
    a842:	4605      	mov	r5, r0
    a844:	b150      	cbz	r0, a85c <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
    a846:	21fd      	movs	r1, #253	; 0xfd
    a848:	1d20      	adds	r0, r4, #4
    a84a:	f001 fa14 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    a84e:	4620      	mov	r0, r4
    a850:	f7ff fd0f 	bl	a272 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    a854:	2300      	movs	r3, #0
    a856:	74e3      	strb	r3, [r4, #19]
}
    a858:	4628      	mov	r0, r5
    a85a:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a85c:	231e      	movs	r3, #30
    a85e:	7463      	strb	r3, [r4, #17]
  spiStop();
    a860:	4620      	mov	r0, r4
    a862:	f7ff fd06 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a866:	e7f7      	b.n	a858 <SharedSpiCard::writeStop()+0x22>

0000a868 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a868:	b570      	push	{r4, r5, r6, lr}
    a86a:	4605      	mov	r5, r0
    a86c:	4616      	mov	r6, r2
    m_spiDriver.send(data);
    a86e:	1d04      	adds	r4, r0, #4
    a870:	4620      	mov	r0, r4
    a872:	f001 fa00 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a876:	f44f 7200 	mov.w	r2, #512	; 0x200
    a87a:	4631      	mov	r1, r6
    a87c:	4620      	mov	r0, r4
    a87e:	f001 fa04 	bl	bc8a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a882:	21ff      	movs	r1, #255	; 0xff
    a884:	4620      	mov	r0, r4
    a886:	f001 f9f6 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    a88a:	21ff      	movs	r1, #255	; 0xff
    a88c:	4620      	mov	r0, r4
    a88e:	f001 f9f2 	bl	bc76 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a892:	4620      	mov	r0, r4
    a894:	f001 f9d3 	bl	bc3e <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    a898:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a89a:	f000 031f 	and.w	r3, r0, #31
    a89e:	2b05      	cmp	r3, #5
    a8a0:	d101      	bne.n	a8a6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
    a8a2:	2001      	movs	r0, #1
}
    a8a4:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
    a8a6:	2320      	movs	r3, #32
    a8a8:	746b      	strb	r3, [r5, #17]
  spiStop();
    a8aa:	4628      	mov	r0, r5
    a8ac:	f7ff fce1 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a8b0:	2000      	movs	r0, #0
    a8b2:	e7f7      	b.n	a8a4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

0000a8b4 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a8b4:	b538      	push	{r3, r4, r5, lr}
    a8b6:	4604      	mov	r4, r0
    a8b8:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a8ba:	f44f 7116 	mov.w	r1, #600	; 0x258
    a8be:	f7ff fd47 	bl	a350 <SharedSpiCard::waitReady(unsigned short)>
    a8c2:	b930      	cbnz	r0, a8d2 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    a8c4:	2324      	movs	r3, #36	; 0x24
    a8c6:	7463      	strb	r3, [r4, #17]
  spiStop();
    a8c8:	4620      	mov	r0, r4
    a8ca:	f7ff fcd2 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a8ce:	2000      	movs	r0, #0
}
    a8d0:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a8d2:	462a      	mov	r2, r5
    a8d4:	21fc      	movs	r1, #252	; 0xfc
    a8d6:	4620      	mov	r0, r4
    a8d8:	f7ff ffc6 	bl	a868 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a8dc:	2800      	cmp	r0, #0
    a8de:	d1f7      	bne.n	a8d0 <SharedSpiCard::writeData(unsigned char const*)+0x1c>
    a8e0:	e7f2      	b.n	a8c8 <SharedSpiCard::writeData(unsigned char const*)+0x14>

0000a8e2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a8e2:	b570      	push	{r4, r5, r6, lr}
    a8e4:	4604      	mov	r4, r0
    a8e6:	460d      	mov	r5, r1
    a8e8:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    a8ea:	6803      	ldr	r3, [r0, #0]
    a8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a8ee:	4798      	blx	r3
    a8f0:	2803      	cmp	r0, #3
    sector <<= 9;
    a8f2:	bf18      	it	ne
    a8f4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a8f6:	462a      	mov	r2, r5
    a8f8:	2118      	movs	r1, #24
    a8fa:	4620      	mov	r0, r4
    a8fc:	f7ff fd40 	bl	a380 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a900:	b138      	cbz	r0, a912 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    a902:	230d      	movs	r3, #13
    a904:	7463      	strb	r3, [r4, #17]
  spiStop();
    a906:	4620      	mov	r0, r4
    a908:	f7ff fcb3 	bl	a272 <SharedSpiCard::spiStop()>
  return false;
    a90c:	2500      	movs	r5, #0
}
    a90e:	4628      	mov	r0, r5
    a910:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a912:	4632      	mov	r2, r6
    a914:	21fe      	movs	r1, #254	; 0xfe
    a916:	4620      	mov	r0, r4
    a918:	f7ff ffa6 	bl	a868 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a91c:	4605      	mov	r5, r0
    a91e:	2800      	cmp	r0, #0
    a920:	d0f1      	beq.n	a906 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
    a922:	4620      	mov	r0, r4
    a924:	f7ff fca5 	bl	a272 <SharedSpiCard::spiStop()>
  return true;
    a928:	e7f1      	b.n	a90e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

0000a92a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a92a:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
    a92c:	7f03      	ldrb	r3, [r0, #28]
    a92e:	b123      	cbz	r3, a93a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
    a930:	6803      	ldr	r3, [r0, #0]
    a932:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a934:	2301      	movs	r3, #1
    a936:	47a0      	blx	r4
}
    a938:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
    a93a:	f7ff ffd2 	bl	a8e2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
    a93e:	e7fb      	b.n	a938 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0000a940 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a940:	b510      	push	{r4, lr}
    a942:	b084      	sub	sp, #16
    a944:	4604      	mov	r4, r0
    a946:	f10d 0c04 	add.w	ip, sp, #4
    a94a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a94e:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a952:	f7ff fd61 	bl	a418 <SharedSpiCard::begin(SdSpiConfig)>
    a956:	b120      	cbz	r0, a962 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a958:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a95c:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    a960:	7723      	strb	r3, [r4, #28]
}
    a962:	b004      	add	sp, #16
    a964:	bd10      	pop	{r4, pc}

0000a966 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a96a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a96e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a972:	b1b3      	cbz	r3, a9a2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a974:	4605      	mov	r5, r0
    a976:	460c      	mov	r4, r1
    a978:	4616      	mov	r6, r2
    a97a:	461f      	mov	r7, r3
    a97c:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
    a97e:	682b      	ldr	r3, [r5, #0]
    a980:	691b      	ldr	r3, [r3, #16]
    a982:	4632      	mov	r2, r6
    a984:	4621      	mov	r1, r4
    a986:	4628      	mov	r0, r5
    a988:	4798      	blx	r3
    a98a:	4682      	mov	sl, r0
    a98c:	b130      	cbz	r0, a99c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
    a98e:	464a      	mov	r2, r9
    a990:	4631      	mov	r1, r6
    a992:	4620      	mov	r0, r4
    a994:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a996:	3401      	adds	r4, #1
    a998:	42bc      	cmp	r4, r7
    a99a:	d1f0      	bne.n	a97e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
    a99c:	4650      	mov	r0, sl
    a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
    a9a2:	f04f 0a01 	mov.w	sl, #1
    a9a6:	e7f9      	b.n	a99c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

0000a9a8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a9ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a9b0:	b1aa      	cbz	r2, a9de <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
    a9b2:	4605      	mov	r5, r0
    a9b4:	460c      	mov	r4, r1
    a9b6:	461f      	mov	r7, r3
    a9b8:	4690      	mov	r8, r2
    a9ba:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a9bc:	682b      	ldr	r3, [r5, #0]
    a9be:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a9c0:	4649      	mov	r1, r9
    a9c2:	4620      	mov	r0, r4
    a9c4:	47b8      	blx	r7
    a9c6:	4602      	mov	r2, r0
    a9c8:	4621      	mov	r1, r4
    a9ca:	4628      	mov	r0, r5
    a9cc:	47b0      	blx	r6
    a9ce:	4603      	mov	r3, r0
    a9d0:	b110      	cbz	r0, a9d8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
    a9d2:	3401      	adds	r4, #1
    a9d4:	4544      	cmp	r4, r8
    a9d6:	d1f1      	bne.n	a9bc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a9d8:	4618      	mov	r0, r3
    a9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a9de:	2301      	movs	r3, #1
    a9e0:	e7fa      	b.n	a9d8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

0000a9e2 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a9e2:	2000      	movs	r0, #0
    a9e4:	4770      	bx	lr

0000a9e6 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a9e6:	2000      	movs	r0, #0
    a9e8:	4770      	bx	lr

0000a9ea <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a9ea:	2000      	movs	r0, #0
    a9ec:	4770      	bx	lr

0000a9ee <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a9ee:	4770      	bx	lr

0000a9f0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a9f0:	4b07      	ldr	r3, [pc, #28]	; (aa10 <sdIrs()+0x20>)
    a9f2:	2100      	movs	r1, #0
    a9f4:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a9f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
    a9f8:	4a06      	ldr	r2, [pc, #24]	; (aa14 <sdIrs()+0x24>)
    a9fa:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a9fc:	6812      	ldr	r2, [r2, #0]
    a9fe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    aa00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    aa02:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    aa06:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    aa08:	4b03      	ldr	r3, [pc, #12]	; (aa18 <sdIrs()+0x28>)
    aa0a:	7019      	strb	r1, [r3, #0]
}
    aa0c:	4770      	bx	lr
    aa0e:	bf00      	nop
    aa10:	402c0000 	.word	0x402c0000
    aa14:	20004c58 	.word	0x20004c58
    aa18:	200053c3 	.word	0x200053c3

0000aa1c <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa1c:	4b06      	ldr	r3, [pc, #24]	; (aa38 <gpioMux(unsigned char)+0x1c>)
    aa1e:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aa22:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aa26:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aa2a:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aa2e:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aa32:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
    aa36:	4770      	bx	lr
    aa38:	401f8000 	.word	0x401f8000

0000aa3c <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    aa3c:	4b03      	ldr	r3, [pc, #12]	; (aa4c <isBusyCommandComplete()+0x10>)
    aa3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    aa40:	4803      	ldr	r0, [pc, #12]	; (aa50 <isBusyCommandComplete()+0x14>)
    aa42:	4018      	ands	r0, r3
}
    aa44:	fab0 f080 	clz	r0, r0
    aa48:	0940      	lsrs	r0, r0, #5
    aa4a:	4770      	bx	lr
    aa4c:	402c0000 	.word	0x402c0000
    aa50:	000f0001 	.word	0x000f0001

0000aa54 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    aa54:	4b02      	ldr	r3, [pc, #8]	; (aa60 <isBusyCommandInhibit()+0xc>)
    aa56:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    aa58:	f000 0001 	and.w	r0, r0, #1
    aa5c:	4770      	bx	lr
    aa5e:	bf00      	nop
    aa60:	402c0000 	.word	0x402c0000

0000aa64 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    aa64:	4b03      	ldr	r3, [pc, #12]	; (aa74 <isBusyDat()+0x10>)
    aa66:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa68:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    aa6c:	f3c0 6000 	ubfx	r0, r0, #24, #1
    aa70:	4770      	bx	lr
    aa72:	bf00      	nop
    aa74:	402c0000 	.word	0x402c0000

0000aa78 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    aa78:	4b01      	ldr	r3, [pc, #4]	; (aa80 <isBusyDMA()+0x8>)
    aa7a:	7818      	ldrb	r0, [r3, #0]
}
    aa7c:	4770      	bx	lr
    aa7e:	bf00      	nop
    aa80:	200053c3 	.word	0x200053c3

0000aa84 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    aa84:	4b03      	ldr	r3, [pc, #12]	; (aa94 <isBusyFifoRead()+0x10>)
    aa86:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa88:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    aa8c:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    aa90:	4770      	bx	lr
    aa92:	bf00      	nop
    aa94:	402c0000 	.word	0x402c0000

0000aa98 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    aa98:	4b03      	ldr	r3, [pc, #12]	; (aaa8 <isBusyFifoWrite()+0x10>)
    aa9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa9c:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    aaa0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    aaa4:	4770      	bx	lr
    aaa6:	bf00      	nop
    aaa8:	402c0000 	.word	0x402c0000

0000aaac <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aaac:	4b03      	ldr	r3, [pc, #12]	; (aabc <isBusyTransferComplete()+0x10>)
    aaae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    aab0:	4803      	ldr	r0, [pc, #12]	; (aac0 <isBusyTransferComplete()+0x14>)
    aab2:	4018      	ands	r0, r3
}
    aab4:	fab0 f080 	clz	r0, r0
    aab8:	0940      	lsrs	r0, r0, #5
    aaba:	4770      	bx	lr
    aabc:	402c0000 	.word	0x402c0000
    aac0:	117f0002 	.word	0x117f0002

0000aac4 <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    aac4:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    aac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    aaca:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aace:	4b2b      	ldr	r3, [pc, #172]	; (ab7c <setSdclk(unsigned long)+0xb8>)
    aad0:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aad2:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
    aad6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    aada:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    aade:	4b28      	ldr	r3, [pc, #160]	; (ab80 <setSdclk(unsigned long)+0xbc>)
    aae0:	fba3 3202 	umull	r3, r2, r3, r2
    aae4:	0892      	lsrs	r2, r2, #2
    aae6:	4b27      	ldr	r3, [pc, #156]	; (ab84 <setSdclk(unsigned long)+0xc0>)
    aae8:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aaec:	f3c1 23c2 	ubfx	r3, r1, #11, #3
    aaf0:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aaf2:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    aaf6:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
    aafa:	d239      	bcs.n	ab70 <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
    aafc:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    aafe:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ab00:	0113      	lsls	r3, r2, #4
    ab02:	fbbc f3f3 	udiv	r3, ip, r3
    ab06:	4573      	cmp	r3, lr
    ab08:	d901      	bls.n	ab0e <setSdclk(unsigned long)+0x4a>
    ab0a:	2aff      	cmp	r2, #255	; 0xff
    ab0c:	d9f7      	bls.n	aafe <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab0e:	fbbc f3f2 	udiv	r3, ip, r2
    ab12:	459e      	cmp	lr, r3
    ab14:	d22e      	bcs.n	ab74 <setSdclk(unsigned long)+0xb0>
    ab16:	0051      	lsls	r1, r2, #1
    ab18:	2301      	movs	r3, #1
    dvs++;
    ab1a:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab1c:	fbbc f0f1 	udiv	r0, ip, r1
    ab20:	4570      	cmp	r0, lr
    ab22:	bf94      	ite	ls
    ab24:	2000      	movls	r0, #0
    ab26:	2001      	movhi	r0, #1
    ab28:	2b0f      	cmp	r3, #15
    ab2a:	bf88      	it	hi
    ab2c:	2000      	movhi	r0, #0
    ab2e:	460c      	mov	r4, r1
    ab30:	4411      	add	r1, r2
    ab32:	2800      	cmp	r0, #0
    ab34:	d1f1      	bne.n	ab1a <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ab36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab3a:	fb01 f404 	mul.w	r4, r1, r4
    ab3e:	fbbc f4f4 	udiv	r4, ip, r4
    ab42:	4811      	ldr	r0, [pc, #68]	; (ab88 <setSdclk(unsigned long)+0xc4>)
    ab44:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    ab46:	4811      	ldr	r0, [pc, #68]	; (ab8c <setSdclk(unsigned long)+0xc8>)
    ab48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
    ab4a:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab4c:	011b      	lsls	r3, r3, #4
    ab4e:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    ab50:	490f      	ldr	r1, [pc, #60]	; (ab90 <setSdclk(unsigned long)+0xcc>)
    ab52:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab54:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    ab56:	01d2      	lsls	r2, r2, #7
    ab58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    ab5c:	4313      	orrs	r3, r2
    ab5e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab62:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ab64:	4602      	mov	r2, r0
    ab66:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ab68:	f013 0f08 	tst.w	r3, #8
    ab6c:	d0fb      	beq.n	ab66 <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    ab6e:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
    ab70:	2201      	movs	r2, #1
    ab72:	e7cc      	b.n	ab0e <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab74:	4614      	mov	r4, r2
    ab76:	2301      	movs	r3, #1
    ab78:	e7dd      	b.n	ab36 <setSdclk(unsigned long)+0x72>
    ab7a:	bf00      	nop
    ab7c:	400fc000 	.word	0x400fc000
    ab80:	aaaaaaab 	.word	0xaaaaaaab
    ab84:	5e69ec00 	.word	0x5e69ec00
    ab88:	20004b50 	.word	0x20004b50
    ab8c:	402c0000 	.word	0x402c0000
    ab90:	fff0000f 	.word	0xfff0000f

0000ab94 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    ab94:	4b01      	ldr	r3, [pc, #4]	; (ab9c <SdioCard::errorCode() const+0x8>)
    ab96:	7818      	ldrb	r0, [r3, #0]
    ab98:	4770      	bx	lr
    ab9a:	bf00      	nop
    ab9c:	20003a58 	.word	0x20003a58

0000aba0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    aba0:	4b01      	ldr	r3, [pc, #4]	; (aba8 <SdioCard::errorData() const+0x8>)
    aba2:	6818      	ldr	r0, [r3, #0]
}
    aba4:	4770      	bx	lr
    aba6:	bf00      	nop
    aba8:	20004c58 	.word	0x20004c58

0000abac <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    abac:	b410      	push	{r4}
    abae:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    abb0:	4c06      	ldr	r4, [pc, #24]	; (abcc <SdioCard::readCID(CID*)+0x20>)
    abb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    abb4:	f8cc 0000 	str.w	r0, [ip]
    abb8:	f8cc 1004 	str.w	r1, [ip, #4]
    abbc:	f8cc 2008 	str.w	r2, [ip, #8]
    abc0:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    abc4:	2001      	movs	r0, #1
    abc6:	f85d 4b04 	ldr.w	r4, [sp], #4
    abca:	4770      	bx	lr
    abcc:	20004bc0 	.word	0x20004bc0

0000abd0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    abd0:	b410      	push	{r4}
    abd2:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    abd4:	4c06      	ldr	r4, [pc, #24]	; (abf0 <SdioCard::readCSD(csd_t*)+0x20>)
    abd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    abd8:	f8cc 0000 	str.w	r0, [ip]
    abdc:	f8cc 1004 	str.w	r1, [ip, #4]
    abe0:	f8cc 2008 	str.w	r2, [ip, #8]
    abe4:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    abe8:	2001      	movs	r0, #1
    abea:	f85d 4b04 	ldr.w	r4, [sp], #4
    abee:	4770      	bx	lr
    abf0:	20004bd0 	.word	0x20004bd0

0000abf4 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    abf4:	4b02      	ldr	r3, [pc, #8]	; (ac00 <SdioCard::readOCR(unsigned long*)+0xc>)
    abf6:	681b      	ldr	r3, [r3, #0]
    abf8:	600b      	str	r3, [r1, #0]
  return true;
}
    abfa:	2001      	movs	r0, #1
    abfc:	4770      	bx	lr
    abfe:	bf00      	nop
    ac00:	20004be0 	.word	0x20004be0

0000ac04 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    ac04:	4b17      	ldr	r3, [pc, #92]	; (ac64 <SdioCard::sectorCount()+0x60>)
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    ac0c:	d003      	beq.n	ac16 <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
    ac0e:	2b40      	cmp	r3, #64	; 0x40
    ac10:	d01b      	beq.n	ac4a <SdioCard::sectorCount()+0x46>
    return 0;
    ac12:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    ac14:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ac16:	4a13      	ldr	r2, [pc, #76]	; (ac64 <SdioCard::sectorCount()+0x60>)
    ac18:	7993      	ldrb	r3, [r2, #6]
    ac1a:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac1e:	79d0      	ldrb	r0, [r2, #7]
    ac20:	0080      	lsls	r0, r0, #2
    ac22:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    ac26:	7a13      	ldrb	r3, [r2, #8]
    ac28:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac2c:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ac2e:	7a53      	ldrb	r3, [r2, #9]
    ac30:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    ac34:	7a91      	ldrb	r1, [r2, #10]
    ac36:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac38:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    ac3c:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac3e:	f002 020f 	and.w	r2, r2, #15
    ac42:	4413      	add	r3, r2
    ac44:	3b07      	subs	r3, #7
    ac46:	4098      	lsls	r0, r3
    ac48:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ac4a:	4b06      	ldr	r3, [pc, #24]	; (ac64 <SdioCard::sectorCount()+0x60>)
    ac4c:	79da      	ldrb	r2, [r3, #7]
    ac4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ac52:	7a58      	ldrb	r0, [r3, #9]
    ac54:	3001      	adds	r0, #1
    ac56:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    ac5a:	7a1b      	ldrb	r3, [r3, #8]
    ac5c:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    ac60:	0280      	lsls	r0, r0, #10
    ac62:	4770      	bx	lr
    ac64:	20004bd0 	.word	0x20004bd0

0000ac68 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    ac68:	4b04      	ldr	r3, [pc, #16]	; (ac7c <SdioCard::type() const+0x14>)
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	b123      	cbz	r3, ac78 <SdioCard::type() const+0x10>
    ac6e:	4b04      	ldr	r3, [pc, #16]	; (ac80 <SdioCard::type() const+0x18>)
    ac70:	7818      	ldrb	r0, [r3, #0]
    ac72:	3002      	adds	r0, #2
    ac74:	b2c0      	uxtb	r0, r0
    ac76:	4770      	bx	lr
    ac78:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    ac7a:	4770      	bx	lr
    ac7c:	200053c0 	.word	0x200053c0
    ac80:	200053c1 	.word	0x200053c1

0000ac84 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    ac84:	4770      	bx	lr
	...

0000ac88 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac8a:	4604      	mov	r4, r0
  uint32_t m = micros();
    ac8c:	f002 fa88 	bl	d1a0 <micros>
    ac90:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac92:	4f05      	ldr	r7, [pc, #20]	; (aca8 <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
    ac94:	47a0      	blx	r4
    ac96:	4606      	mov	r6, r0
    ac98:	b120      	cbz	r0, aca4 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac9a:	f002 fa81 	bl	d1a0 <micros>
    ac9e:	1b40      	subs	r0, r0, r5
    aca0:	42b8      	cmp	r0, r7
    aca2:	d9f7      	bls.n	ac94 <waitTimeout(bool (*)())+0xc>
}
    aca4:	4630      	mov	r0, r6
    aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aca8:	000f4240 	.word	0x000f4240

0000acac <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    acac:	b570      	push	{r4, r5, r6, lr}
    acae:	4604      	mov	r4, r0
    acb0:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    acb2:	4819      	ldr	r0, [pc, #100]	; (ad18 <cardCommand(unsigned long, unsigned long)+0x6c>)
    acb4:	f7ff ffe8 	bl	ac88 <waitTimeout(bool (*)())>
    acb8:	bb40      	cbnz	r0, ad0c <cardCommand(unsigned long, unsigned long)+0x60>
    acba:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
    acbc:	4b17      	ldr	r3, [pc, #92]	; (ad1c <cardCommand(unsigned long, unsigned long)+0x70>)
    acbe:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    acc0:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    acc4:	d007      	beq.n	acd6 <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    acc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    acc8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    accc:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    acce:	6c99      	ldr	r1, [r3, #72]	; 0x48
    acd0:	b2e2      	uxtb	r2, r4
    acd2:	430a      	orrs	r2, r1
    acd4:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    acd6:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    acda:	4b10      	ldr	r3, [pc, #64]	; (ad1c <cardCommand(unsigned long, unsigned long)+0x70>)
    acdc:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    acde:	4810      	ldr	r0, [pc, #64]	; (ad20 <cardCommand(unsigned long, unsigned long)+0x74>)
    ace0:	f7ff ffd2 	bl	ac88 <waitTimeout(bool (*)())>
    ace4:	4601      	mov	r1, r0
    ace6:	b990      	cbnz	r0, ad0e <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
    ace8:	4a0c      	ldr	r2, [pc, #48]	; (ad1c <cardCommand(unsigned long, unsigned long)+0x70>)
    acea:	6b10      	ldr	r0, [r2, #48]	; 0x30
    acec:	4b0d      	ldr	r3, [pc, #52]	; (ad24 <cardCommand(unsigned long, unsigned long)+0x78>)
    acee:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    acf0:	6818      	ldr	r0, [r3, #0]
    acf2:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    acf4:	681b      	ldr	r3, [r3, #0]
    acf6:	f013 0f01 	tst.w	r3, #1
    acfa:	d00a      	beq.n	ad12 <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    acfc:	4b09      	ldr	r3, [pc, #36]	; (ad24 <cardCommand(unsigned long, unsigned long)+0x78>)
    acfe:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ad00:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    ad04:	bf0c      	ite	eq
    ad06:	2601      	moveq	r6, #1
    ad08:	2600      	movne	r6, #0
    ad0a:	e000      	b.n	ad0e <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
    ad0c:	2600      	movs	r6, #0
}
    ad0e:	4630      	mov	r0, r6
    ad10:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ad12:	460e      	mov	r6, r1
    ad14:	e7fb      	b.n	ad0e <cardCommand(unsigned long, unsigned long)+0x62>
    ad16:	bf00      	nop
    ad18:	0000aa55 	.word	0x0000aa55
    ad1c:	402c0000 	.word	0x402c0000
    ad20:	0000aa3d 	.word	0x0000aa3d
    ad24:	20004c58 	.word	0x20004c58

0000ad28 <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
    ad28:	b510      	push	{r4, lr}
    ad2a:	b084      	sub	sp, #16
    ad2c:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
    ad2e:	4b19      	ldr	r3, [pc, #100]	; (ad94 <readReg16(unsigned long, void*)+0x6c>)
    ad30:	6819      	ldr	r1, [r3, #0]
    ad32:	f7ff ffbb 	bl	acac <cardCommand(unsigned long, unsigned long)>
    ad36:	b350      	cbz	r0, ad8e <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    ad38:	4b17      	ldr	r3, [pc, #92]	; (ad98 <readReg16(unsigned long, void*)+0x70>)
    ad3a:	691a      	ldr	r2, [r3, #16]
    ad3c:	9200      	str	r2, [sp, #0]
    ad3e:	695a      	ldr	r2, [r3, #20]
    ad40:	9201      	str	r2, [sp, #4]
    ad42:	699a      	ldr	r2, [r3, #24]
    ad44:	9202      	str	r2, [sp, #8]
    ad46:	69db      	ldr	r3, [r3, #28]
    ad48:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    ad4a:	f104 0e0f 	add.w	lr, r4, #15
    ad4e:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ad50:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    ad54:	461a      	mov	r2, r3
    ad56:	2b00      	cmp	r3, #0
    ad58:	bfb8      	it	lt
    ad5a:	1cda      	addlt	r2, r3, #3
    ad5c:	f022 0203 	bic.w	r2, r2, #3
    ad60:	3210      	adds	r2, #16
    ad62:	446a      	add	r2, sp
    ad64:	4259      	negs	r1, r3
    ad66:	f003 0c03 	and.w	ip, r3, #3
    ad6a:	f001 0103 	and.w	r1, r1, #3
    ad6e:	bf58      	it	pl
    ad70:	f1c1 0c00 	rsbpl	ip, r1, #0
    ad74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ad78:	f852 2c10 	ldr.w	r2, [r2, #-16]
    ad7c:	fa22 f20c 	lsr.w	r2, r2, ip
    ad80:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
    ad84:	3301      	adds	r3, #1
    ad86:	2b0f      	cmp	r3, #15
    ad88:	d1e2      	bne.n	ad50 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    ad8a:	2300      	movs	r3, #0
    ad8c:	73e3      	strb	r3, [r4, #15]
}
    ad8e:	b004      	add	sp, #16
    ad90:	bd10      	pop	{r4, pc}
    ad92:	bf00      	nop
    ad94:	20004be4 	.word	0x20004be4
    ad98:	402c0000 	.word	0x402c0000

0000ad9c <statusCMD13()>:
static uint32_t statusCMD13() {
    ad9c:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad9e:	4b05      	ldr	r3, [pc, #20]	; (adb4 <statusCMD13()+0x18>)
    ada0:	6819      	ldr	r1, [r3, #0]
    ada2:	4805      	ldr	r0, [pc, #20]	; (adb8 <statusCMD13()+0x1c>)
    ada4:	f7ff ff82 	bl	acac <cardCommand(unsigned long, unsigned long)>
    ada8:	b110      	cbz	r0, adb0 <statusCMD13()+0x14>
    adaa:	4b04      	ldr	r3, [pc, #16]	; (adbc <statusCMD13()+0x20>)
    adac:	6918      	ldr	r0, [r3, #16]
}
    adae:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    adb0:	2000      	movs	r0, #0
    adb2:	e7fc      	b.n	adae <statusCMD13()+0x12>
    adb4:	20004be4 	.word	0x20004be4
    adb8:	0d1a0000 	.word	0x0d1a0000
    adbc:	402c0000 	.word	0x402c0000

0000adc0 <isBusyCMD13()>:
static bool isBusyCMD13() {
    adc0:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    adc2:	f7ff ffeb 	bl	ad9c <statusCMD13()>
    adc6:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
    adca:	f3c0 2000 	ubfx	r0, r0, #8, #1
    adce:	bd08      	pop	{r3, pc}

0000add0 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    add0:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
    add2:	7a03      	ldrb	r3, [r0, #8]
    add4:	f013 0f01 	tst.w	r3, #1
    add8:	d00b      	beq.n	adf2 <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    adda:	4b0c      	ldr	r3, [pc, #48]	; (ae0c <SdioCard::isBusy()+0x3c>)
    addc:	681b      	ldr	r3, [r3, #0]
    adde:	b10b      	cbz	r3, ade4 <SdioCard::isBusy()+0x14>
    ade0:	4798      	blx	r3
}
    ade2:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ade4:	4b0a      	ldr	r3, [pc, #40]	; (ae10 <SdioCard::isBusy()+0x40>)
    ade6:	7818      	ldrb	r0, [r3, #0]
    ade8:	2800      	cmp	r0, #0
    adea:	d0fa      	beq.n	ade2 <SdioCard::isBusy()+0x12>
    adec:	f7ff ffe8 	bl	adc0 <isBusyCMD13()>
    adf0:	e7f7      	b.n	ade2 <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
    adf2:	4b08      	ldr	r3, [pc, #32]	; (ae14 <SdioCard::isBusy()+0x44>)
    adf4:	781b      	ldrb	r3, [r3, #0]
    adf6:	b933      	cbnz	r3, ae06 <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    adf8:	4b07      	ldr	r3, [pc, #28]	; (ae18 <SdioCard::isBusy()+0x48>)
    adfa:	6a58      	ldr	r0, [r3, #36]	; 0x24
    adfc:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    ae00:	f3c0 6000 	ubfx	r0, r0, #24, #1
    ae04:	e7ed      	b.n	ade2 <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
    ae06:	f7ff fe51 	bl	aaac <isBusyTransferComplete()>
    ae0a:	e7ea      	b.n	ade2 <SdioCard::isBusy()+0x12>
    ae0c:	20004c54 	.word	0x20004c54
    ae10:	200053bf 	.word	0x200053bf
    ae14:	200053c2 	.word	0x200053c2
    ae18:	402c0000 	.word	0x402c0000

0000ae1c <SdioCard::status()>:
uint32_t SdioCard::status() {
    ae1c:	b508      	push	{r3, lr}
  return statusCMD13();
    ae1e:	f7ff ffbd 	bl	ad9c <statusCMD13()>
}
    ae22:	bd08      	pop	{r3, pc}

0000ae24 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    ae24:	b538      	push	{r3, r4, r5, lr}
    ae26:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    ae28:	4b2a      	ldr	r3, [pc, #168]	; (aed4 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    ae2a:	7a9b      	ldrb	r3, [r3, #10]
    ae2c:	f013 0f40 	tst.w	r3, #64	; 0x40
    ae30:	d113      	bne.n	ae5a <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    ae32:	4a28      	ldr	r2, [pc, #160]	; (aed4 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    ae34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ae38:	7ad2      	ldrb	r2, [r2, #11]
    ae3a:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    ae3c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    ae40:	1c62      	adds	r2, r4, #1
    ae42:	430a      	orrs	r2, r1
    ae44:	4213      	tst	r3, r2
    ae46:	d008      	beq.n	ae5a <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    ae48:	4b23      	ldr	r3, [pc, #140]	; (aed8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae4a:	2227      	movs	r2, #39	; 0x27
    ae4c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae4e:	4b23      	ldr	r3, [pc, #140]	; (aedc <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ae50:	f240 22e3 	movw	r2, #739	; 0x2e3
    ae54:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    ae56:	2500      	movs	r5, #0
    ae58:	e010      	b.n	ae7c <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
    ae5a:	4b21      	ldr	r3, [pc, #132]	; (aee0 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    ae5c:	781b      	ldrb	r3, [r3, #0]
    ae5e:	b90b      	cbnz	r3, ae64 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    ae60:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    ae62:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    ae64:	481f      	ldr	r0, [pc, #124]	; (aee4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    ae66:	f7ff ff21 	bl	acac <cardCommand(unsigned long, unsigned long)>
    ae6a:	4605      	mov	r5, r0
    ae6c:	b940      	cbnz	r0, ae80 <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
    ae6e:	4b1a      	ldr	r3, [pc, #104]	; (aed8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae70:	220f      	movs	r2, #15
    ae72:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae74:	4b19      	ldr	r3, [pc, #100]	; (aedc <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ae76:	f240 22eb 	movw	r2, #747	; 0x2eb
    ae7a:	601a      	str	r2, [r3, #0]
}
    ae7c:	4628      	mov	r0, r5
    ae7e:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    ae80:	4621      	mov	r1, r4
    ae82:	4819      	ldr	r0, [pc, #100]	; (aee8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    ae84:	f7ff ff12 	bl	acac <cardCommand(unsigned long, unsigned long)>
    ae88:	4605      	mov	r5, r0
    ae8a:	b938      	cbnz	r0, ae9c <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
    ae8c:	4b12      	ldr	r3, [pc, #72]	; (aed8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae8e:	2210      	movs	r2, #16
    ae90:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae92:	4b12      	ldr	r3, [pc, #72]	; (aedc <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ae94:	f240 22ee 	movw	r2, #750	; 0x2ee
    ae98:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
    ae9a:	e7ef      	b.n	ae7c <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    ae9c:	2100      	movs	r1, #0
    ae9e:	4813      	ldr	r0, [pc, #76]	; (aeec <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    aea0:	f7ff ff04 	bl	acac <cardCommand(unsigned long, unsigned long)>
    aea4:	4605      	mov	r5, r0
    aea6:	b938      	cbnz	r0, aeb8 <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
    aea8:	4b0b      	ldr	r3, [pc, #44]	; (aed8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aeaa:	2211      	movs	r2, #17
    aeac:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aeae:	4b0b      	ldr	r3, [pc, #44]	; (aedc <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aeb0:	f240 22f1 	movw	r2, #753	; 0x2f1
    aeb4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    aeb6:	e7e1      	b.n	ae7c <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
    aeb8:	480d      	ldr	r0, [pc, #52]	; (aef0 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    aeba:	f7ff fee5 	bl	ac88 <waitTimeout(bool (*)())>
    aebe:	2800      	cmp	r0, #0
    aec0:	d0dc      	beq.n	ae7c <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    aec2:	4b05      	ldr	r3, [pc, #20]	; (aed8 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aec4:	2228      	movs	r2, #40	; 0x28
    aec6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aec8:	4b04      	ldr	r3, [pc, #16]	; (aedc <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aeca:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    aece:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    aed0:	2500      	movs	r5, #0
    aed2:	e7d3      	b.n	ae7c <SdioCard::erase(unsigned long, unsigned long)+0x58>
    aed4:	20004bd0 	.word	0x20004bd0
    aed8:	20003a58 	.word	0x20003a58
    aedc:	20004bbc 	.word	0x20004bbc
    aee0:	200053c1 	.word	0x200053c1
    aee4:	201a0000 	.word	0x201a0000
    aee8:	211a0000 	.word	0x211a0000
    aeec:	261b0000 	.word	0x261b0000
    aef0:	0000adc1 	.word	0x0000adc1

0000aef4 <waitTransferComplete()>:
static bool waitTransferComplete() {
    aef4:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    aef6:	4b10      	ldr	r3, [pc, #64]	; (af38 <waitTransferComplete()+0x44>)
    aef8:	781c      	ldrb	r4, [r3, #0]
    aefa:	b914      	cbnz	r4, af02 <waitTransferComplete()+0xe>
    return true;
    aefc:	2401      	movs	r4, #1
}
    aefe:	4620      	mov	r0, r4
    af00:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    af02:	480e      	ldr	r0, [pc, #56]	; (af3c <waitTransferComplete()+0x48>)
    af04:	f7ff fec0 	bl	ac88 <waitTimeout(bool (*)())>
  m_transferActive = false;
    af08:	4b0b      	ldr	r3, [pc, #44]	; (af38 <waitTransferComplete()+0x44>)
    af0a:	2200      	movs	r2, #0
    af0c:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
    af0e:	4b0c      	ldr	r3, [pc, #48]	; (af40 <waitTransferComplete()+0x4c>)
    af10:	6b19      	ldr	r1, [r3, #48]	; 0x30
    af12:	4a0c      	ldr	r2, [pc, #48]	; (af44 <waitTransferComplete()+0x50>)
    af14:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    af16:	6812      	ldr	r2, [r2, #0]
    af18:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    af1a:	b920      	cbnz	r0, af26 <waitTransferComplete()+0x32>
    af1c:	4b09      	ldr	r3, [pc, #36]	; (af44 <waitTransferComplete()+0x50>)
    af1e:	681a      	ldr	r2, [r3, #0]
    af20:	4b09      	ldr	r3, [pc, #36]	; (af48 <waitTransferComplete()+0x54>)
    af22:	421a      	tst	r2, r3
    af24:	d0eb      	beq.n	aefe <waitTransferComplete()+0xa>
  m_errorCode = code;
    af26:	4b09      	ldr	r3, [pc, #36]	; (af4c <waitTransferComplete()+0x58>)
    af28:	221f      	movs	r2, #31
    af2a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    af2c:	4b08      	ldr	r3, [pc, #32]	; (af50 <waitTransferComplete()+0x5c>)
    af2e:	f240 227a 	movw	r2, #634	; 0x27a
    af32:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    af34:	2400      	movs	r4, #0
    af36:	e7e2      	b.n	aefe <waitTransferComplete()+0xa>
    af38:	200053c2 	.word	0x200053c2
    af3c:	0000aaad 	.word	0x0000aaad
    af40:	402c0000 	.word	0x402c0000
    af44:	20004c58 	.word	0x20004c58
    af48:	117f0000 	.word	0x117f0000
    af4c:	20003a58 	.word	0x20003a58
    af50:	20004bbc 	.word	0x20004bbc

0000af54 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    af54:	b538      	push	{r3, r4, r5, lr}
    af56:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    af58:	f7ff ffcc 	bl	aef4 <waitTransferComplete()>
    af5c:	4604      	mov	r4, r0
    af5e:	b1f0      	cbz	r0, af9e <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    af60:	4b1c      	ldr	r3, [pc, #112]	; (afd4 <SdioCard::writeData(unsigned char const*)+0x80>)
    af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af64:	f413 7f80 	tst.w	r3, #256	; 0x100
    af68:	d108      	bne.n	af7c <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    af6a:	4b1a      	ldr	r3, [pc, #104]	; (afd4 <SdioCard::writeData(unsigned char const*)+0x80>)
    af6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    af6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    af72:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    af74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    af76:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    af7a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    af7c:	4a15      	ldr	r2, [pc, #84]	; (afd4 <SdioCard::writeData(unsigned char const*)+0x80>)
    af7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    af80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    af84:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    af86:	4814      	ldr	r0, [pc, #80]	; (afd8 <SdioCard::writeData(unsigned char const*)+0x84>)
    af88:	f7ff fe7e 	bl	ac88 <waitTimeout(bool (*)())>
    af8c:	b148      	cbz	r0, afa2 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
    af8e:	4b13      	ldr	r3, [pc, #76]	; (afdc <SdioCard::writeData(unsigned char const*)+0x88>)
    af90:	2221      	movs	r2, #33	; 0x21
    af92:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    af94:	4b12      	ldr	r3, [pc, #72]	; (afe0 <SdioCard::writeData(unsigned char const*)+0x8c>)
    af96:	f240 32d9 	movw	r2, #985	; 0x3d9
    af9a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    af9c:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    af9e:	4620      	mov	r0, r4
    afa0:	bd38      	pop	{r3, r4, r5, pc}
    afa2:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    afa6:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    afaa:	480a      	ldr	r0, [pc, #40]	; (afd4 <SdioCard::writeData(unsigned char const*)+0x80>)
    afac:	6a43      	ldr	r3, [r0, #36]	; 0x24
    afae:	f413 6f80 	tst.w	r3, #1024	; 0x400
    afb2:	d0fb      	beq.n	afac <SdioCard::writeData(unsigned char const*)+0x58>
    afb4:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
    afb8:	f853 2f04 	ldr.w	r2, [r3, #4]!
    afbc:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    afbe:	4563      	cmp	r3, ip
    afc0:	d1fa      	bne.n	afb8 <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    afc2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    afc6:	458c      	cmp	ip, r1
    afc8:	d1f0      	bne.n	afac <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
    afca:	4b06      	ldr	r3, [pc, #24]	; (afe4 <SdioCard::writeData(unsigned char const*)+0x90>)
    afcc:	2201      	movs	r2, #1
    afce:	701a      	strb	r2, [r3, #0]
  return true;
    afd0:	e7e5      	b.n	af9e <SdioCard::writeData(unsigned char const*)+0x4a>
    afd2:	bf00      	nop
    afd4:	402c0000 	.word	0x402c0000
    afd8:	0000aa99 	.word	0x0000aa99
    afdc:	20003a58 	.word	0x20003a58
    afe0:	20004bbc 	.word	0x20004bbc
    afe4:	200053c2 	.word	0x200053c2

0000afe8 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afea:	4604      	mov	r4, r0
  m_busyFcn = fcn;
    afec:	4b0a      	ldr	r3, [pc, #40]	; (b018 <yieldTimeout(bool (*)())+0x30>)
    afee:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
    aff0:	f002 f8d6 	bl	d1a0 <micros>
    aff4:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aff6:	4f09      	ldr	r7, [pc, #36]	; (b01c <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
    aff8:	e001      	b.n	affe <yieldTimeout(bool (*)())+0x16>
    yield();
    affa:	f003 ffef 	bl	efdc <yield>
  while (fcn()) {
    affe:	47a0      	blx	r4
    b000:	4606      	mov	r6, r0
    b002:	b120      	cbz	r0, b00e <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b004:	f002 f8cc 	bl	d1a0 <micros>
    b008:	1b40      	subs	r0, r0, r5
    b00a:	42b8      	cmp	r0, r7
    b00c:	d9f5      	bls.n	affa <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
    b00e:	4b02      	ldr	r3, [pc, #8]	; (b018 <yieldTimeout(bool (*)())+0x30>)
    b010:	2200      	movs	r2, #0
    b012:	601a      	str	r2, [r3, #0]
}
    b014:	4630      	mov	r0, r6
    b016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b018:	20004c54 	.word	0x20004c54
    b01c:	000f4240 	.word	0x000f4240

0000b020 <waitDmaStatus()>:
static bool waitDmaStatus() {
    b020:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    b022:	4809      	ldr	r0, [pc, #36]	; (b048 <waitDmaStatus()+0x28>)
    b024:	f7ff ffe0 	bl	afe8 <yieldTimeout(bool (*)())>
    b028:	b960      	cbnz	r0, b044 <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b02a:	4b08      	ldr	r3, [pc, #32]	; (b04c <waitDmaStatus()+0x2c>)
    b02c:	681b      	ldr	r3, [r3, #0]
    b02e:	f013 0f02 	tst.w	r3, #2
    b032:	d008      	beq.n	b046 <waitDmaStatus()+0x26>
    b034:	4b05      	ldr	r3, [pc, #20]	; (b04c <waitDmaStatus()+0x2c>)
    b036:	681a      	ldr	r2, [r3, #0]
    b038:	4b05      	ldr	r3, [pc, #20]	; (b050 <waitDmaStatus()+0x30>)
    b03a:	421a      	tst	r2, r3
    b03c:	bf0c      	ite	eq
    b03e:	2001      	moveq	r0, #1
    b040:	2000      	movne	r0, #0
    b042:	e000      	b.n	b046 <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
    b044:	2000      	movs	r0, #0
}
    b046:	bd08      	pop	{r3, pc}
    b048:	0000aa79 	.word	0x0000aa79
    b04c:	20004c58 	.word	0x20004c58
    b050:	117f0000 	.word	0x117f0000

0000b054 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    b054:	b538      	push	{r3, r4, r5, lr}
    b056:	4605      	mov	r5, r0
    b058:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
    b05a:	4819      	ldr	r0, [pc, #100]	; (b0c0 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    b05c:	f7ff fe14 	bl	ac88 <waitTimeout(bool (*)())>
    b060:	b140      	cbz	r0, b074 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    b062:	4b18      	ldr	r3, [pc, #96]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b064:	220a      	movs	r2, #10
    b066:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b068:	4b17      	ldr	r3, [pc, #92]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b06a:	f44f 72cc 	mov.w	r2, #408	; 0x198
    b06e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b070:	2000      	movs	r0, #0
}
    b072:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    b074:	4b15      	ldr	r3, [pc, #84]	; (b0cc <cardCMD6(unsigned long, unsigned char*)+0x78>)
    b076:	2201      	movs	r2, #1
    b078:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    b07a:	4b15      	ldr	r3, [pc, #84]	; (b0d0 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    b07c:	2200      	movs	r2, #0
    b07e:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    b080:	4b14      	ldr	r3, [pc, #80]	; (b0d4 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    b082:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b084:	4a14      	ldr	r2, [pc, #80]	; (b0d8 <cardCMD6(unsigned long, unsigned char*)+0x84>)
    b086:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b088:	4a14      	ldr	r2, [pc, #80]	; (b0dc <cardCMD6(unsigned long, unsigned char*)+0x88>)
    b08a:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b08c:	4629      	mov	r1, r5
    b08e:	4814      	ldr	r0, [pc, #80]	; (b0e0 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    b090:	f7ff fe0c 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b094:	b938      	cbnz	r0, b0a6 <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    b096:	4b0b      	ldr	r3, [pc, #44]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b098:	2204      	movs	r2, #4
    b09a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b09c:	4b0a      	ldr	r3, [pc, #40]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b09e:	f240 129f 	movw	r2, #415	; 0x19f
    b0a2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
    b0a4:	e7e5      	b.n	b072 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    b0a6:	f7ff ffbb 	bl	b020 <waitDmaStatus()>
    b0aa:	2800      	cmp	r0, #0
    b0ac:	d1e1      	bne.n	b072 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    b0ae:	4b05      	ldr	r3, [pc, #20]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b0b0:	2225      	movs	r2, #37	; 0x25
    b0b2:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0b4:	4b04      	ldr	r3, [pc, #16]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b0b6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    b0ba:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b0bc:	e7d9      	b.n	b072 <cardCMD6(unsigned long, unsigned char*)+0x1e>
    b0be:	bf00      	nop
    b0c0:	0000adc1 	.word	0x0000adc1
    b0c4:	20003a58 	.word	0x20003a58
    b0c8:	20004bbc 	.word	0x20004bbc
    b0cc:	200053c3 	.word	0x200053c3
    b0d0:	20004c58 	.word	0x20004c58
    b0d4:	402c0000 	.word	0x402c0000
    b0d8:	00010040 	.word	0x00010040
    b0dc:	117f0002 	.word	0x117f0002
    b0e0:	063a0011 	.word	0x063a0011

0000b0e4 <transferStop()>:
static bool transferStop() {
    b0e4:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b0e6:	4a19      	ldr	r2, [pc, #100]	; (b14c <transferStop()+0x68>)
    b0e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b0ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b0ee:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b0f0:	2100      	movs	r1, #0
    b0f2:	4817      	ldr	r0, [pc, #92]	; (b150 <transferStop()+0x6c>)
    b0f4:	f7ff fdda 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b0f8:	4604      	mov	r4, r0
    b0fa:	b940      	cbnz	r0, b10e <transferStop()+0x2a>
  m_errorCode = code;
    b0fc:	4b15      	ldr	r3, [pc, #84]	; (b154 <transferStop()+0x70>)
    b0fe:	2209      	movs	r2, #9
    b100:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b102:	4b15      	ldr	r3, [pc, #84]	; (b158 <transferStop()+0x74>)
    b104:	f240 223d 	movw	r2, #573	; 0x23d
    b108:	601a      	str	r2, [r3, #0]
}
    b10a:	4620      	mov	r0, r4
    b10c:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
    b10e:	4813      	ldr	r0, [pc, #76]	; (b15c <transferStop()+0x78>)
    b110:	f7ff ff6a 	bl	afe8 <yieldTimeout(bool (*)())>
    b114:	b140      	cbz	r0, b128 <transferStop()+0x44>
  m_errorCode = code;
    b116:	4b0f      	ldr	r3, [pc, #60]	; (b154 <transferStop()+0x70>)
    b118:	220a      	movs	r2, #10
    b11a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b11c:	4b0e      	ldr	r3, [pc, #56]	; (b158 <transferStop()+0x74>)
    b11e:	f44f 7210 	mov.w	r2, #576	; 0x240
    b122:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b124:	2400      	movs	r4, #0
    b126:	e7f0      	b.n	b10a <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    b128:	4b08      	ldr	r3, [pc, #32]	; (b14c <transferStop()+0x68>)
    b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b12c:	f013 0f02 	tst.w	r3, #2
    b130:	d0eb      	beq.n	b10a <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    b132:	4b06      	ldr	r3, [pc, #24]	; (b14c <transferStop()+0x68>)
    b134:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b138:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b13c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b13e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    b142:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    b144:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    b146:	629a      	str	r2, [r3, #40]	; 0x28
    b148:	e7df      	b.n	b10a <transferStop()+0x26>
    b14a:	bf00      	nop
    b14c:	402c0000 	.word	0x402c0000
    b150:	0cdb0000 	.word	0x0cdb0000
    b154:	20003a58 	.word	0x20003a58
    b158:	20004bbc 	.word	0x20004bbc
    b15c:	0000aa65 	.word	0x0000aa65

0000b160 <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    b160:	b508      	push	{r3, lr}
  return transferStop();
    b162:	f7ff ffbf 	bl	b0e4 <transferStop()>
}
    b166:	bd08      	pop	{r3, pc}

0000b168 <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
    b168:	b510      	push	{r4, lr}
    b16a:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b16c:	4813      	ldr	r0, [pc, #76]	; (b1bc <SdioCard::writeStart(unsigned long)+0x54>)
    b16e:	f7ff ff3b 	bl	afe8 <yieldTimeout(bool (*)())>
    b172:	b140      	cbz	r0, b186 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    b174:	4b12      	ldr	r3, [pc, #72]	; (b1c0 <SdioCard::writeStart(unsigned long)+0x58>)
    b176:	220a      	movs	r2, #10
    b178:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b17a:	4b12      	ldr	r3, [pc, #72]	; (b1c4 <SdioCard::writeStart(unsigned long)+0x5c>)
    b17c:	f240 422c 	movw	r2, #1068	; 0x42c
    b180:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b182:	2000      	movs	r0, #0
}
    b184:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b186:	4b10      	ldr	r3, [pc, #64]	; (b1c8 <SdioCard::writeStart(unsigned long)+0x60>)
    b188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b18a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b18e:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b190:	f44f 7200 	mov.w	r2, #512	; 0x200
    b194:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b196:	4b0d      	ldr	r3, [pc, #52]	; (b1cc <SdioCard::writeStart(unsigned long)+0x64>)
    b198:	781b      	ldrb	r3, [r3, #0]
    b19a:	b903      	cbnz	r3, b19e <SdioCard::writeStart(unsigned long)+0x36>
    b19c:	0264      	lsls	r4, r4, #9
    b19e:	4621      	mov	r1, r4
    b1a0:	480b      	ldr	r0, [pc, #44]	; (b1d0 <SdioCard::writeStart(unsigned long)+0x68>)
    b1a2:	f7ff fd83 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b1a6:	2800      	cmp	r0, #0
    b1a8:	d1ec      	bne.n	b184 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    b1aa:	4b05      	ldr	r3, [pc, #20]	; (b1c0 <SdioCard::writeStart(unsigned long)+0x58>)
    b1ac:	220e      	movs	r2, #14
    b1ae:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1b0:	4b04      	ldr	r3, [pc, #16]	; (b1c4 <SdioCard::writeStart(unsigned long)+0x5c>)
    b1b2:	f44f 6287 	mov.w	r2, #1080	; 0x438
    b1b6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    b1b8:	e7e4      	b.n	b184 <SdioCard::writeStart(unsigned long)+0x1c>
    b1ba:	bf00      	nop
    b1bc:	0000adc1 	.word	0x0000adc1
    b1c0:	20003a58 	.word	0x20003a58
    b1c4:	20004bbc 	.word	0x20004bbc
    b1c8:	402c0000 	.word	0x402c0000
    b1cc:	200053c1 	.word	0x200053c1
    b1d0:	193a0020 	.word	0x193a0020

0000b1d4 <SdioCard::~SdioCard()>:
    b1d4:	b510      	push	{r4, lr}
    b1d6:	4604      	mov	r4, r0
    b1d8:	210c      	movs	r1, #12
    b1da:	f002 f93d 	bl	d458 <operator delete(void*, unsigned int)>
    b1de:	4620      	mov	r0, r4
    b1e0:	bd10      	pop	{r4, pc}
	...

0000b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1e8:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    b1ea:	f012 0203 	ands.w	r2, r2, #3
    b1ee:	bf18      	it	ne
    b1f0:	2201      	movne	r2, #1
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	bf14      	ite	ne
    b1f6:	4615      	movne	r5, r2
    b1f8:	f042 0501 	orreq.w	r5, r2, #1
    b1fc:	b155      	cbz	r5, b214 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
    b1fe:	4b1c      	ldr	r3, [pc, #112]	; (b270 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    b200:	2225      	movs	r2, #37	; 0x25
    b202:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b204:	4b1b      	ldr	r3, [pc, #108]	; (b274 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b206:	f240 12f5 	movw	r2, #501	; 0x1f5
    b20a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b20c:	2500      	movs	r5, #0
}
    b20e:	4628      	mov	r0, r5
    b210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b214:	4607      	mov	r7, r0
    b216:	460e      	mov	r6, r1
    b218:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
    b21a:	4817      	ldr	r0, [pc, #92]	; (b278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    b21c:	f7ff fee4 	bl	afe8 <yieldTimeout(bool (*)())>
    b220:	b138      	cbz	r0, b232 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
    b222:	4b13      	ldr	r3, [pc, #76]	; (b270 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    b224:	220a      	movs	r2, #10
    b226:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b228:	4b12      	ldr	r3, [pc, #72]	; (b274 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b22a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b22e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b230:	e7ed      	b.n	b20e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
    b232:	4b12      	ldr	r3, [pc, #72]	; (b27c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    b234:	2201      	movs	r2, #1
    b236:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    b238:	4b11      	ldr	r3, [pc, #68]	; (b280 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    b23a:	2200      	movs	r2, #0
    b23c:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
    b23e:	4a11      	ldr	r2, [pc, #68]	; (b284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    b240:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b242:	4b11      	ldr	r3, [pc, #68]	; (b288 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    b244:	ea03 4308 	and.w	r3, r3, r8, lsl #16
    b248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b24c:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b24e:	4b0f      	ldr	r3, [pc, #60]	; (b28c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
    b250:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b252:	4b0f      	ldr	r3, [pc, #60]	; (b290 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    b254:	781b      	ldrb	r3, [r3, #0]
    b256:	b903      	cbnz	r3, b25a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
    b258:	0276      	lsls	r6, r6, #9
    b25a:	4631      	mov	r1, r6
    b25c:	4638      	mov	r0, r7
    b25e:	f7ff fd25 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b262:	4605      	mov	r5, r0
    b264:	2800      	cmp	r0, #0
    b266:	d0d2      	beq.n	b20e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
    b268:	f7ff feda 	bl	b020 <waitDmaStatus()>
    b26c:	4605      	mov	r5, r0
    b26e:	e7ce      	b.n	b20e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
    b270:	20003a58 	.word	0x20003a58
    b274:	20004bbc 	.word	0x20004bbc
    b278:	0000adc1 	.word	0x0000adc1
    b27c:	200053c3 	.word	0x200053c3
    b280:	20004c58 	.word	0x20004c58
    b284:	402c0000 	.word	0x402c0000
    b288:	1fff0000 	.word	0x1fff0000
    b28c:	117f0002 	.word	0x117f0002
    b290:	200053c1 	.word	0x200053c1

0000b294 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b296:	4606      	mov	r6, r0
    b298:	460c      	mov	r4, r1
    b29a:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b29c:	7a02      	ldrb	r2, [r0, #8]
    b29e:	f012 0f01 	tst.w	r2, #1
    b2a2:	d112      	bne.n	b2ca <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b2a4:	b17b      	cbz	r3, b2c6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    b2a6:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
    b2a8:	6833      	ldr	r3, [r6, #0]
    b2aa:	691b      	ldr	r3, [r3, #16]
    b2ac:	462a      	mov	r2, r5
    b2ae:	4621      	mov	r1, r4
    b2b0:	4630      	mov	r0, r6
    b2b2:	4798      	blx	r3
    b2b4:	4603      	mov	r3, r0
    b2b6:	b120      	cbz	r0, b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b2b8:	3401      	adds	r4, #1
    b2ba:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b2be:	42a7      	cmp	r7, r4
    b2c0:	d1f2      	bne.n	b2a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
    b2c2:	4618      	mov	r0, r3
    b2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b2c6:	2301      	movs	r3, #1
    b2c8:	e7fb      	b.n	b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
    b2ca:	f015 0f03 	tst.w	r5, #3
    b2ce:	d010      	beq.n	b2f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b2d0:	b1f3      	cbz	r3, b310 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    b2d2:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
    b2d4:	6833      	ldr	r3, [r6, #0]
    b2d6:	691b      	ldr	r3, [r3, #16]
    b2d8:	462a      	mov	r2, r5
    b2da:	4621      	mov	r1, r4
    b2dc:	4630      	mov	r0, r6
    b2de:	4798      	blx	r3
    b2e0:	4603      	mov	r3, r0
    b2e2:	2800      	cmp	r0, #0
    b2e4:	d0ed      	beq.n	b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b2e6:	3401      	adds	r4, #1
    b2e8:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b2ec:	42bc      	cmp	r4, r7
    b2ee:	d1f1      	bne.n	b2d4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
    b2f0:	e7e7      	b.n	b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b2f2:	462a      	mov	r2, r5
    b2f4:	4807      	ldr	r0, [pc, #28]	; (b314 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b2f6:	f7ff ff75 	bl	b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b2fa:	4603      	mov	r3, r0
    b2fc:	2800      	cmp	r0, #0
    b2fe:	d1e0      	bne.n	b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
    b300:	4a05      	ldr	r2, [pc, #20]	; (b318 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b302:	210c      	movs	r1, #12
    b304:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b306:	4a05      	ldr	r2, [pc, #20]	; (b31c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
    b308:	f240 3182 	movw	r1, #898	; 0x382
    b30c:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    b30e:	e7d8      	b.n	b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
    b310:	2301      	movs	r3, #1
    b312:	e7d6      	b.n	b2c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    b314:	123a0037 	.word	0x123a0037
    b318:	20003a58 	.word	0x20003a58
    b31c:	20004bbc 	.word	0x20004bbc

0000b320 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b320:	b570      	push	{r4, r5, r6, lr}
    b322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b326:	460e      	mov	r6, r1
    b328:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b32a:	7a03      	ldrb	r3, [r0, #8]
    b32c:	f013 0f01 	tst.w	r3, #1
    b330:	d01c      	beq.n	b36c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    b332:	f012 0f03 	tst.w	r2, #3
    b336:	d006      	beq.n	b346 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    b338:	f44f 7200 	mov.w	r2, #512	; 0x200
    b33c:	4629      	mov	r1, r5
    b33e:	4668      	mov	r0, sp
    b340:	f001 ffec 	bl	d31c <memcpy>
      ptr = aligned;
    b344:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    b346:	2301      	movs	r3, #1
    b348:	462a      	mov	r2, r5
    b34a:	4631      	mov	r1, r6
    b34c:	481d      	ldr	r0, [pc, #116]	; (b3c4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    b34e:	f7ff ff49 	bl	b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b352:	4603      	mov	r3, r0
    b354:	b930      	cbnz	r0, b364 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    b356:	4a1c      	ldr	r2, [pc, #112]	; (b3c8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
    b358:	210d      	movs	r1, #13
    b35a:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b35c:	4a1b      	ldr	r2, [pc, #108]	; (b3cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    b35e:	f240 31f2 	movw	r1, #1010	; 0x3f2
    b362:	6011      	str	r1, [r2, #0]
}
    b364:	4618      	mov	r0, r3
    b366:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b36a:	bd70      	pop	{r4, r5, r6, pc}
    b36c:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b36e:	f7ff fdc1 	bl	aef4 <waitTransferComplete()>
    b372:	4603      	mov	r3, r0
    b374:	2800      	cmp	r0, #0
    b376:	d0f5      	beq.n	b364 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b378:	7a63      	ldrb	r3, [r4, #9]
    b37a:	2b02      	cmp	r3, #2
    b37c:	d01d      	beq.n	b3ba <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    b37e:	6823      	ldr	r3, [r4, #0]
    b380:	6a1b      	ldr	r3, [r3, #32]
    b382:	4620      	mov	r0, r4
    b384:	4798      	blx	r3
    b386:	4603      	mov	r3, r0
    b388:	2800      	cmp	r0, #0
    b38a:	d0eb      	beq.n	b364 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    b38c:	6823      	ldr	r3, [r4, #0]
    b38e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b390:	4631      	mov	r1, r6
    b392:	4620      	mov	r0, r4
    b394:	4798      	blx	r3
    b396:	4603      	mov	r3, r0
    b398:	2800      	cmp	r0, #0
    b39a:	d0e3      	beq.n	b364 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
    b39c:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    b39e:	2302      	movs	r3, #2
    b3a0:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
    b3a2:	6823      	ldr	r3, [r4, #0]
    b3a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b3a6:	4629      	mov	r1, r5
    b3a8:	4620      	mov	r0, r4
    b3aa:	4798      	blx	r3
    b3ac:	4603      	mov	r3, r0
    b3ae:	2800      	cmp	r0, #0
    b3b0:	d0d8      	beq.n	b364 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    b3b2:	6862      	ldr	r2, [r4, #4]
    b3b4:	3201      	adds	r2, #1
    b3b6:	6062      	str	r2, [r4, #4]
    b3b8:	e7d4      	b.n	b364 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b3ba:	6863      	ldr	r3, [r4, #4]
    b3bc:	42b3      	cmp	r3, r6
    b3be:	d1de      	bne.n	b37e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    b3c0:	e7ef      	b.n	b3a2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
    b3c2:	bf00      	nop
    b3c4:	183a0001 	.word	0x183a0001
    b3c8:	20003a58 	.word	0x20003a58
    b3cc:	20004bbc 	.word	0x20004bbc

0000b3d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3d2:	4606      	mov	r6, r0
    b3d4:	460c      	mov	r4, r1
    b3d6:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b3d8:	7a02      	ldrb	r2, [r0, #8]
    b3da:	f012 0f01 	tst.w	r2, #1
    b3de:	d112      	bne.n	b406 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b3e0:	b17b      	cbz	r3, b402 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    b3e2:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
    b3e4:	6833      	ldr	r3, [r6, #0]
    b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b3e8:	462a      	mov	r2, r5
    b3ea:	4621      	mov	r1, r4
    b3ec:	4630      	mov	r0, r6
    b3ee:	4798      	blx	r3
    b3f0:	4603      	mov	r3, r0
    b3f2:	b120      	cbz	r0, b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b3f4:	3401      	adds	r4, #1
    b3f6:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b3fa:	42a7      	cmp	r7, r4
    b3fc:	d1f2      	bne.n	b3e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
    b3fe:	4618      	mov	r0, r3
    b400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b402:	2301      	movs	r3, #1
    b404:	e7fb      	b.n	b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
    b406:	f015 0f03 	tst.w	r5, #3
    b40a:	d010      	beq.n	b42e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b40c:	b1f3      	cbz	r3, b44c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
    b40e:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
    b410:	6833      	ldr	r3, [r6, #0]
    b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b414:	462a      	mov	r2, r5
    b416:	4621      	mov	r1, r4
    b418:	4630      	mov	r0, r6
    b41a:	4798      	blx	r3
    b41c:	4603      	mov	r3, r0
    b41e:	2800      	cmp	r0, #0
    b420:	d0ed      	beq.n	b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b422:	3401      	adds	r4, #1
    b424:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b428:	42bc      	cmp	r4, r7
    b42a:	d1f1      	bne.n	b410 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    b42c:	e7e7      	b.n	b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b42e:	462a      	mov	r2, r5
    b430:	4807      	ldr	r0, [pc, #28]	; (b450 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b432:	f7ff fed7 	bl	b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b436:	4603      	mov	r3, r0
    b438:	2800      	cmp	r0, #0
    b43a:	d1e0      	bne.n	b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
    b43c:	4a05      	ldr	r2, [pc, #20]	; (b454 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b43e:	210e      	movs	r1, #14
    b440:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b442:	4a05      	ldr	r2, [pc, #20]	; (b458 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
    b444:	f240 411e 	movw	r1, #1054	; 0x41e
    b448:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    b44a:	e7d8      	b.n	b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
    b44c:	2301      	movs	r3, #1
    b44e:	e7d6      	b.n	b3fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    b450:	193a0027 	.word	0x193a0027
    b454:	20003a58 	.word	0x20003a58
    b458:	20004bbc 	.word	0x20004bbc

0000b45c <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b460:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
    b462:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b464:	2300      	movs	r3, #0
    b466:	7243      	strb	r3, [r0, #9]
  m_initDone = false;
    b468:	4aae      	ldr	r2, [pc, #696]	; (b724 <SdioCard::begin(SdioConfig)+0x2c8>)
    b46a:	7013      	strb	r3, [r2, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    b46c:	4aae      	ldr	r2, [pc, #696]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b46e:	7013      	strb	r3, [r2, #0]
  m_highCapacity = false;
    b470:	4aae      	ldr	r2, [pc, #696]	; (b72c <SdioCard::begin(SdioConfig)+0x2d0>)
    b472:	7013      	strb	r3, [r2, #0]
  m_version2 = false;
    b474:	4aae      	ldr	r2, [pc, #696]	; (b730 <SdioCard::begin(SdioConfig)+0x2d4>)
    b476:	7013      	strb	r3, [r2, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b478:	4bae      	ldr	r3, [pc, #696]	; (b734 <SdioCard::begin(SdioConfig)+0x2d8>)
    b47a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b47e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b482:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    b486:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b48a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    b48e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b492:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b496:	f042 0218 	orr.w	r2, r2, #24
    b49a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b49e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b4a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b4a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b4aa:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
    b4ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b4b2:	f042 020c 	orr.w	r2, r2, #12
    b4b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b4ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b4bc:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b4c0:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b4c2:	69da      	ldr	r2, [r3, #28]
    b4c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b4c8:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b4ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b4cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b4d0:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    b4d2:	2005      	movs	r0, #5
    b4d4:	f7ff faa2 	bl	aa1c <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    b4d8:	4b97      	ldr	r3, [pc, #604]	; (b738 <SdioCard::begin(SdioConfig)+0x2dc>)
    b4da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b4dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b4e0:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b4e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b4e4:	4a95      	ldr	r2, [pc, #596]	; (b73c <SdioCard::begin(SdioConfig)+0x2e0>)
    b4e6:	430a      	orrs	r2, r1
    b4e8:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b4ea:	461a      	mov	r2, r3
    b4ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b4ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    b4f2:	d1fb      	bne.n	b4ec <SdioCard::begin(SdioConfig)+0x90>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b4f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b4f8:	f7ff fae4 	bl	aac4 <setSdclk(unsigned long)>
    gpioMux(0);
    b4fc:	2000      	movs	r0, #0
    b4fe:	f7ff fa8d 	bl	aa1c <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b502:	4b8f      	ldr	r3, [pc, #572]	; (b740 <SdioCard::begin(SdioConfig)+0x2e4>)
    b504:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b508:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b50c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b510:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b514:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b518:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b51c:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b520:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b524:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
    b528:	4a86      	ldr	r2, [pc, #536]	; (b744 <SdioCard::begin(SdioConfig)+0x2e8>)
    b52a:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b52c:	4a86      	ldr	r2, [pc, #536]	; (b748 <SdioCard::begin(SdioConfig)+0x2ec>)
    b52e:	4987      	ldr	r1, [pc, #540]	; (b74c <SdioCard::begin(SdioConfig)+0x2f0>)
    b530:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b534:	4a86      	ldr	r2, [pc, #536]	; (b750 <SdioCard::begin(SdioConfig)+0x2f4>)
    b536:	2160      	movs	r1, #96	; 0x60
    b538:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b53c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b544:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b54a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    b54e:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b550:	461a      	mov	r2, r3
    b552:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b554:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    b558:	d1fb      	bne.n	b552 <SdioCard::begin(SdioConfig)+0xf6>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b55a:	2100      	movs	r1, #0
    b55c:	4608      	mov	r0, r1
    b55e:	f7ff fba5 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b562:	4604      	mov	r4, r0
    b564:	b950      	cbnz	r0, b57c <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    b566:	4b70      	ldr	r3, [pc, #448]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b568:	2201      	movs	r2, #1
    b56a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b56c:	4b79      	ldr	r3, [pc, #484]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b56e:	f240 228e 	movw	r2, #654	; 0x28e
    b572:	601a      	str	r2, [r3, #0]
}
    b574:	4620      	mov	r0, r4
    b576:	b010      	add	sp, #64	; 0x40
    b578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b57c:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b57e:	4e76      	ldr	r6, [pc, #472]	; (b758 <SdioCard::begin(SdioConfig)+0x2fc>)
    b580:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
    b584:	4629      	mov	r1, r5
    b586:	4630      	mov	r0, r6
    b588:	f7ff fb90 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b58c:	b980      	cbnz	r0, b5b0 <SdioCard::begin(SdioConfig)+0x154>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b58e:	3c01      	subs	r4, #1
    b590:	d1f8      	bne.n	b584 <SdioCard::begin(SdioConfig)+0x128>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b592:	4b67      	ldr	r3, [pc, #412]	; (b730 <SdioCard::begin(SdioConfig)+0x2d4>)
    b594:	781b      	ldrb	r3, [r3, #0]
    b596:	2b00      	cmp	r3, #0
    b598:	4d70      	ldr	r5, [pc, #448]	; (b75c <SdioCard::begin(SdioConfig)+0x300>)
    b59a:	bf08      	it	eq
    b59c:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
    b5a0:	f001 fdfe 	bl	d1a0 <micros>
    b5a4:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5a6:	4e6e      	ldr	r6, [pc, #440]	; (b760 <SdioCard::begin(SdioConfig)+0x304>)
    b5a8:	f8df 81e8 	ldr.w	r8, [pc, #488]	; b794 <SdioCard::begin(SdioConfig)+0x338>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b5ac:	4f6d      	ldr	r7, [pc, #436]	; (b764 <SdioCard::begin(SdioConfig)+0x308>)
    b5ae:	e020      	b.n	b5f2 <SdioCard::begin(SdioConfig)+0x196>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b5b0:	4b61      	ldr	r3, [pc, #388]	; (b738 <SdioCard::begin(SdioConfig)+0x2dc>)
    b5b2:	691b      	ldr	r3, [r3, #16]
    b5b4:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b5b8:	d008      	beq.n	b5cc <SdioCard::begin(SdioConfig)+0x170>
  m_errorCode = code;
    b5ba:	4b5b      	ldr	r3, [pc, #364]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b5bc:	2206      	movs	r2, #6
    b5be:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b5c0:	4b64      	ldr	r3, [pc, #400]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b5c2:	f44f 7225 	mov.w	r2, #660	; 0x294
    b5c6:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b5c8:	2400      	movs	r4, #0
    b5ca:	e7d3      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
      m_version2 = true;
    b5cc:	4b58      	ldr	r3, [pc, #352]	; (b730 <SdioCard::begin(SdioConfig)+0x2d4>)
    b5ce:	2201      	movs	r2, #1
    b5d0:	701a      	strb	r2, [r3, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b5d2:	4d62      	ldr	r5, [pc, #392]	; (b75c <SdioCard::begin(SdioConfig)+0x300>)
    b5d4:	e7e4      	b.n	b5a0 <SdioCard::begin(SdioConfig)+0x144>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5d6:	4629      	mov	r1, r5
    b5d8:	4640      	mov	r0, r8
    b5da:	f7ff fb67 	bl	acac <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b5de:	b170      	cbz	r0, b5fe <SdioCard::begin(SdioConfig)+0x1a2>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b5e0:	f001 fdde 	bl	d1a0 <micros>
    b5e4:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b5e6:	42b8      	cmp	r0, r7
    b5e8:	d809      	bhi.n	b5fe <SdioCard::begin(SdioConfig)+0x1a2>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b5ea:	4b53      	ldr	r3, [pc, #332]	; (b738 <SdioCard::begin(SdioConfig)+0x2dc>)
    b5ec:	691b      	ldr	r3, [r3, #16]
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	db0e      	blt.n	b610 <SdioCard::begin(SdioConfig)+0x1b4>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5f2:	2100      	movs	r1, #0
    b5f4:	4630      	mov	r0, r6
    b5f6:	f7ff fb59 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b5fa:	2800      	cmp	r0, #0
    b5fc:	d1eb      	bne.n	b5d6 <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    b5fe:	4b4a      	ldr	r3, [pc, #296]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b600:	2217      	movs	r2, #23
    b602:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b604:	4b53      	ldr	r3, [pc, #332]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b606:	f240 229f 	movw	r2, #671	; 0x29f
    b60a:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
    b60c:	2400      	movs	r4, #0
    b60e:	e7b1      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  m_ocr = SDHC_CMDRSP0;
    b610:	4b49      	ldr	r3, [pc, #292]	; (b738 <SdioCard::begin(SdioConfig)+0x2dc>)
    b612:	6919      	ldr	r1, [r3, #16]
    b614:	4a54      	ldr	r2, [pc, #336]	; (b768 <SdioCard::begin(SdioConfig)+0x30c>)
    b616:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b618:	691b      	ldr	r3, [r3, #16]
    b61a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b61e:	d002      	beq.n	b626 <SdioCard::begin(SdioConfig)+0x1ca>
    m_highCapacity = true;
    b620:	4b42      	ldr	r3, [pc, #264]	; (b72c <SdioCard::begin(SdioConfig)+0x2d0>)
    b622:	2201      	movs	r2, #1
    b624:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b626:	2100      	movs	r1, #0
    b628:	4850      	ldr	r0, [pc, #320]	; (b76c <SdioCard::begin(SdioConfig)+0x310>)
    b62a:	f7ff fb3f 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b62e:	4604      	mov	r4, r0
    b630:	b938      	cbnz	r0, b642 <SdioCard::begin(SdioConfig)+0x1e6>
  m_errorCode = code;
    b632:	4b3d      	ldr	r3, [pc, #244]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b634:	2202      	movs	r2, #2
    b636:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b638:	4b46      	ldr	r3, [pc, #280]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b63a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    b63e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b640:	e798      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b642:	2100      	movs	r1, #0
    b644:	484a      	ldr	r0, [pc, #296]	; (b770 <SdioCard::begin(SdioConfig)+0x314>)
    b646:	f7ff fb31 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b64a:	4604      	mov	r4, r0
    b64c:	b938      	cbnz	r0, b65e <SdioCard::begin(SdioConfig)+0x202>
  m_errorCode = code;
    b64e:	4b36      	ldr	r3, [pc, #216]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b650:	2203      	movs	r2, #3
    b652:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b654:	4b3f      	ldr	r3, [pc, #252]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b656:	f240 22ab 	movw	r2, #683	; 0x2ab
    b65a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b65c:	e78a      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b65e:	4b36      	ldr	r3, [pc, #216]	; (b738 <SdioCard::begin(SdioConfig)+0x2dc>)
    b660:	691a      	ldr	r2, [r3, #16]
    b662:	4b44      	ldr	r3, [pc, #272]	; (b774 <SdioCard::begin(SdioConfig)+0x318>)
    b664:	4013      	ands	r3, r2
    b666:	4a44      	ldr	r2, [pc, #272]	; (b778 <SdioCard::begin(SdioConfig)+0x31c>)
    b668:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b66a:	4944      	ldr	r1, [pc, #272]	; (b77c <SdioCard::begin(SdioConfig)+0x320>)
    b66c:	4844      	ldr	r0, [pc, #272]	; (b780 <SdioCard::begin(SdioConfig)+0x324>)
    b66e:	f7ff fb5b 	bl	ad28 <readReg16(unsigned long, void*)>
    b672:	4604      	mov	r4, r0
    b674:	b938      	cbnz	r0, b686 <SdioCard::begin(SdioConfig)+0x22a>
  m_errorCode = code;
    b676:	4b2c      	ldr	r3, [pc, #176]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b678:	2207      	movs	r2, #7
    b67a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b67c:	4b35      	ldr	r3, [pc, #212]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b67e:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    b682:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b684:	e776      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b686:	493f      	ldr	r1, [pc, #252]	; (b784 <SdioCard::begin(SdioConfig)+0x328>)
    b688:	483f      	ldr	r0, [pc, #252]	; (b788 <SdioCard::begin(SdioConfig)+0x32c>)
    b68a:	f7ff fb4d 	bl	ad28 <readReg16(unsigned long, void*)>
    b68e:	4604      	mov	r4, r0
    b690:	b938      	cbnz	r0, b6a2 <SdioCard::begin(SdioConfig)+0x246>
  m_errorCode = code;
    b692:	4b25      	ldr	r3, [pc, #148]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b694:	2208      	movs	r2, #8
    b696:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b698:	4b2e      	ldr	r3, [pc, #184]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b69a:	f240 22b3 	movw	r2, #691	; 0x2b3
    b69e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b6a0:	e768      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b6a2:	4b35      	ldr	r3, [pc, #212]	; (b778 <SdioCard::begin(SdioConfig)+0x31c>)
    b6a4:	6819      	ldr	r1, [r3, #0]
    b6a6:	4839      	ldr	r0, [pc, #228]	; (b78c <SdioCard::begin(SdioConfig)+0x330>)
    b6a8:	f7ff fb00 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b6ac:	4604      	mov	r4, r0
    b6ae:	b938      	cbnz	r0, b6c0 <SdioCard::begin(SdioConfig)+0x264>
  m_errorCode = code;
    b6b0:	4b1d      	ldr	r3, [pc, #116]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b6b2:	2205      	movs	r2, #5
    b6b4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b6b6:	4b27      	ldr	r3, [pc, #156]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b6b8:	f240 22b6 	movw	r2, #694	; 0x2b6
    b6bc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b6be:	e759      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b6c0:	4b2d      	ldr	r3, [pc, #180]	; (b778 <SdioCard::begin(SdioConfig)+0x31c>)
    b6c2:	6819      	ldr	r1, [r3, #0]
    b6c4:	4826      	ldr	r0, [pc, #152]	; (b760 <SdioCard::begin(SdioConfig)+0x304>)
    b6c6:	f7ff faf1 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b6ca:	b940      	cbnz	r0, b6de <SdioCard::begin(SdioConfig)+0x282>
  m_errorCode = code;
    b6cc:	4b16      	ldr	r3, [pc, #88]	; (b728 <SdioCard::begin(SdioConfig)+0x2cc>)
    b6ce:	2214      	movs	r2, #20
    b6d0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b6d2:	4b20      	ldr	r3, [pc, #128]	; (b754 <SdioCard::begin(SdioConfig)+0x2f8>)
    b6d4:	f240 22ba 	movw	r2, #698	; 0x2ba
    b6d8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b6da:	2400      	movs	r4, #0
    b6dc:	e74a      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b6de:	2102      	movs	r1, #2
    b6e0:	482b      	ldr	r0, [pc, #172]	; (b790 <SdioCard::begin(SdioConfig)+0x334>)
    b6e2:	f7ff fae3 	bl	acac <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    b6e6:	4604      	mov	r4, r0
    b6e8:	2800      	cmp	r0, #0
    b6ea:	d0ef      	beq.n	b6cc <SdioCard::begin(SdioConfig)+0x270>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b6ec:	4b12      	ldr	r3, [pc, #72]	; (b738 <SdioCard::begin(SdioConfig)+0x2dc>)
    b6ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6f0:	f022 0206 	bic.w	r2, r2, #6
    b6f4:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b6f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6f8:	f042 0202 	orr.w	r2, r2, #2
    b6fc:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b6fe:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    b702:	645a      	str	r2, [r3, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b704:	4669      	mov	r1, sp
    b706:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    b70a:	f7ff fca3 	bl	b054 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b70e:	2800      	cmp	r0, #0
    b710:	d053      	beq.n	b7ba <SdioCard::begin(SdioConfig)+0x35e>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b712:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b716:	f013 0f02 	tst.w	r3, #2
    b71a:	d13d      	bne.n	b798 <SdioCard::begin(SdioConfig)+0x33c>
    kHzSdClk = 25000;
    b71c:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b720:	e04d      	b.n	b7be <SdioCard::begin(SdioConfig)+0x362>
    b722:	bf00      	nop
    b724:	200053bf 	.word	0x200053bf
    b728:	20003a58 	.word	0x20003a58
    b72c:	200053c1 	.word	0x200053c1
    b730:	200053c0 	.word	0x200053c0
    b734:	400d8000 	.word	0x400d8000
    b738:	402c0000 	.word	0x402c0000
    b73c:	01008000 	.word	0x01008000
    b740:	401f8000 	.word	0x401f8000
    b744:	117f000b 	.word	0x117f000b
    b748:	20003c00 	.word	0x20003c00
    b74c:	0000a9f1 	.word	0x0000a9f1
    b750:	e000e400 	.word	0xe000e400
    b754:	20004bbc 	.word	0x20004bbc
    b758:	081a0000 	.word	0x081a0000
    b75c:	40300000 	.word	0x40300000
    b760:	371a0000 	.word	0x371a0000
    b764:	000f4240 	.word	0x000f4240
    b768:	20004be0 	.word	0x20004be0
    b76c:	02090000 	.word	0x02090000
    b770:	031a0000 	.word	0x031a0000
    b774:	ffff0000 	.word	0xffff0000
    b778:	20004be4 	.word	0x20004be4
    b77c:	20004bd0 	.word	0x20004bd0
    b780:	09090000 	.word	0x09090000
    b784:	20004bc0 	.word	0x20004bc0
    b788:	0a090000 	.word	0x0a090000
    b78c:	071b0000 	.word	0x071b0000
    b790:	061a0000 	.word	0x061a0000
    b794:	29020000 	.word	0x29020000
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b798:	4669      	mov	r1, sp
    b79a:	4819      	ldr	r0, [pc, #100]	; (b800 <SdioCard::begin(SdioConfig)+0x3a4>)
    b79c:	f7ff fc5a 	bl	b054 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b7a0:	b358      	cbz	r0, b7fa <SdioCard::begin(SdioConfig)+0x39e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b7a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b7a6:	f003 030f 	and.w	r3, r3, #15
    kHzSdClk = 25000;
    b7aa:	f24c 3550 	movw	r5, #50000	; 0xc350
    b7ae:	f246 12a8 	movw	r2, #25000	; 0x61a8
    b7b2:	2b01      	cmp	r3, #1
    b7b4:	bf18      	it	ne
    b7b6:	4615      	movne	r5, r2
    b7b8:	e001      	b.n	b7be <SdioCard::begin(SdioConfig)+0x362>
    b7ba:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
    b7be:	2005      	movs	r0, #5
    b7c0:	f7ff f92c 	bl	aa1c <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    b7c4:	4628      	mov	r0, r5
    b7c6:	f7ff f97d 	bl	aac4 <setSdclk(unsigned long)>
    gpioMux(0);
    b7ca:	2000      	movs	r0, #0
    b7cc:	f7ff f926 	bl	aa1c <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b7d0:	4b0c      	ldr	r3, [pc, #48]	; (b804 <SdioCard::begin(SdioConfig)+0x3a8>)
    b7d2:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b7d6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b7da:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b7de:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b7e2:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b7e6:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b7ea:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b7ee:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
    b7f2:	4b05      	ldr	r3, [pc, #20]	; (b808 <SdioCard::begin(SdioConfig)+0x3ac>)
    b7f4:	2201      	movs	r2, #1
    b7f6:	701a      	strb	r2, [r3, #0]
  return true;
    b7f8:	e6bc      	b.n	b574 <SdioCard::begin(SdioConfig)+0x118>
    kHzSdClk = 25000;
    b7fa:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b7fe:	e7de      	b.n	b7be <SdioCard::begin(SdioConfig)+0x362>
    b800:	80fffff1 	.word	0x80fffff1
    b804:	401f8000 	.word	0x401f8000
    b808:	200053bf 	.word	0x200053bf

0000b80c <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    b80c:	b538      	push	{r3, r4, r5, lr}
    b80e:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b810:	4b2b      	ldr	r3, [pc, #172]	; (b8c0 <SdioCard::readData(unsigned char*)+0xb4>)
    b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b814:	f413 7f00 	tst.w	r3, #512	; 0x200
    b818:	d10e      	bne.n	b838 <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b81a:	4b29      	ldr	r3, [pc, #164]	; (b8c0 <SdioCard::readData(unsigned char*)+0xb4>)
    b81c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b81e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b822:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b824:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b828:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b82c:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b82e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b830:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b834:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b836:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    b838:	4822      	ldr	r0, [pc, #136]	; (b8c4 <SdioCard::readData(unsigned char*)+0xb8>)
    b83a:	f7ff fa25 	bl	ac88 <waitTimeout(bool (*)())>
    b83e:	4605      	mov	r5, r0
    b840:	b148      	cbz	r0, b856 <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
    b842:	4b21      	ldr	r3, [pc, #132]	; (b8c8 <SdioCard::readData(unsigned char*)+0xbc>)
    b844:	221a      	movs	r2, #26
    b846:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b848:	4b20      	ldr	r3, [pc, #128]	; (b8cc <SdioCard::readData(unsigned char*)+0xc0>)
    b84a:	f240 3237 	movw	r2, #823	; 0x337
    b84e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b850:	2500      	movs	r5, #0
}
    b852:	4628      	mov	r0, r5
    b854:	bd38      	pop	{r3, r4, r5, pc}
    b856:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
    b85a:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b85e:	4818      	ldr	r0, [pc, #96]	; (b8c0 <SdioCard::readData(unsigned char*)+0xb4>)
    b860:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b862:	f413 6f00 	tst.w	r3, #2048	; 0x800
    b866:	d0fb      	beq.n	b860 <SdioCard::readData(unsigned char*)+0x54>
    b868:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b86c:	6a02      	ldr	r2, [r0, #32]
    b86e:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b872:	4563      	cmp	r3, ip
    b874:	d1fa      	bne.n	b86c <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b876:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b87a:	458c      	cmp	ip, r1
    b87c:	d1f0      	bne.n	b860 <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
    b87e:	4814      	ldr	r0, [pc, #80]	; (b8d0 <SdioCard::readData(unsigned char*)+0xc4>)
    b880:	f7ff fa02 	bl	ac88 <waitTimeout(bool (*)())>
    b884:	4601      	mov	r1, r0
    b886:	b138      	cbz	r0, b898 <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
    b888:	4b0f      	ldr	r3, [pc, #60]	; (b8c8 <SdioCard::readData(unsigned char*)+0xbc>)
    b88a:	221d      	movs	r2, #29
    b88c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b88e:	4b0f      	ldr	r3, [pc, #60]	; (b8cc <SdioCard::readData(unsigned char*)+0xc0>)
    b890:	f240 3242 	movw	r2, #834	; 0x342
    b894:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b896:	e7dc      	b.n	b852 <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
    b898:	4a09      	ldr	r2, [pc, #36]	; (b8c0 <SdioCard::readData(unsigned char*)+0xb4>)
    b89a:	6b10      	ldr	r0, [r2, #48]	; 0x30
    b89c:	4b0d      	ldr	r3, [pc, #52]	; (b8d4 <SdioCard::readData(unsigned char*)+0xc8>)
    b89e:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b8a0:	6818      	ldr	r0, [r3, #0]
    b8a2:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b8a4:	681b      	ldr	r3, [r3, #0]
    b8a6:	f013 0f02 	tst.w	r3, #2
    b8aa:	d007      	beq.n	b8bc <SdioCard::readData(unsigned char*)+0xb0>
    b8ac:	4b09      	ldr	r3, [pc, #36]	; (b8d4 <SdioCard::readData(unsigned char*)+0xc8>)
    b8ae:	681a      	ldr	r2, [r3, #0]
    b8b0:	4b09      	ldr	r3, [pc, #36]	; (b8d8 <SdioCard::readData(unsigned char*)+0xcc>)
    b8b2:	421a      	tst	r2, r3
    b8b4:	bf0c      	ite	eq
    b8b6:	2501      	moveq	r5, #1
    b8b8:	2500      	movne	r5, #0
    b8ba:	e7ca      	b.n	b852 <SdioCard::readData(unsigned char*)+0x46>
    b8bc:	460d      	mov	r5, r1
    b8be:	e7c8      	b.n	b852 <SdioCard::readData(unsigned char*)+0x46>
    b8c0:	402c0000 	.word	0x402c0000
    b8c4:	0000aa85 	.word	0x0000aa85
    b8c8:	20003a58 	.word	0x20003a58
    b8cc:	20004bbc 	.word	0x20004bbc
    b8d0:	0000aaad 	.word	0x0000aaad
    b8d4:	20004c58 	.word	0x20004c58
    b8d8:	117f0000 	.word	0x117f0000

0000b8dc <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b8dc:	b510      	push	{r4, lr}
    b8de:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b8e0:	4813      	ldr	r0, [pc, #76]	; (b930 <SdioCard::readStart(unsigned long)+0x54>)
    b8e2:	f7ff fb81 	bl	afe8 <yieldTimeout(bool (*)())>
    b8e6:	b140      	cbz	r0, b8fa <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    b8e8:	4b12      	ldr	r3, [pc, #72]	; (b934 <SdioCard::readStart(unsigned long)+0x58>)
    b8ea:	220a      	movs	r2, #10
    b8ec:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b8ee:	4b12      	ldr	r3, [pc, #72]	; (b938 <SdioCard::readStart(unsigned long)+0x5c>)
    b8f0:	f240 3292 	movw	r2, #914	; 0x392
    b8f4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b8f6:	2000      	movs	r0, #0
}
    b8f8:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b8fa:	4b10      	ldr	r3, [pc, #64]	; (b93c <SdioCard::readStart(unsigned long)+0x60>)
    b8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b8fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b902:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b904:	f44f 7200 	mov.w	r2, #512	; 0x200
    b908:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b90a:	4b0d      	ldr	r3, [pc, #52]	; (b940 <SdioCard::readStart(unsigned long)+0x64>)
    b90c:	781b      	ldrb	r3, [r3, #0]
    b90e:	b903      	cbnz	r3, b912 <SdioCard::readStart(unsigned long)+0x36>
    b910:	0264      	lsls	r4, r4, #9
    b912:	4621      	mov	r1, r4
    b914:	480b      	ldr	r0, [pc, #44]	; (b944 <SdioCard::readStart(unsigned long)+0x68>)
    b916:	f7ff f9c9 	bl	acac <cardCommand(unsigned long, unsigned long)>
    b91a:	2800      	cmp	r0, #0
    b91c:	d1ec      	bne.n	b8f8 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    b91e:	4b05      	ldr	r3, [pc, #20]	; (b934 <SdioCard::readStart(unsigned long)+0x58>)
    b920:	220c      	movs	r2, #12
    b922:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b924:	4b04      	ldr	r3, [pc, #16]	; (b938 <SdioCard::readStart(unsigned long)+0x5c>)
    b926:	f240 329e 	movw	r2, #926	; 0x39e
    b92a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    b92c:	e7e4      	b.n	b8f8 <SdioCard::readStart(unsigned long)+0x1c>
    b92e:	bf00      	nop
    b930:	0000adc1 	.word	0x0000adc1
    b934:	20003a58 	.word	0x20003a58
    b938:	20004bbc 	.word	0x20004bbc
    b93c:	402c0000 	.word	0x402c0000
    b940:	200053c1 	.word	0x200053c1
    b944:	123a0030 	.word	0x123a0030

0000b948 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b948:	b570      	push	{r4, r5, r6, lr}
    b94a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b94e:	460e      	mov	r6, r1
    b950:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b952:	7a03      	ldrb	r3, [r0, #8]
    b954:	f013 0f01 	tst.w	r3, #1
    b958:	d013      	beq.n	b982 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b95a:	f012 0f03 	tst.w	r2, #3
    b95e:	d135      	bne.n	b9cc <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b960:	2301      	movs	r3, #1
    b962:	4822      	ldr	r0, [pc, #136]	; (b9ec <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b964:	f7ff fc3e 	bl	b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b968:	2800      	cmp	r0, #0
    b96a:	d13c      	bne.n	b9e6 <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
    b96c:	4b20      	ldr	r3, [pc, #128]	; (b9f0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    b96e:	220b      	movs	r2, #11
    b970:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b972:	4b20      	ldr	r3, [pc, #128]	; (b9f4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    b974:	f240 3255 	movw	r2, #853	; 0x355
    b978:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    b97a:	2000      	movs	r0, #0
}
    b97c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b980:	bd70      	pop	{r4, r5, r6, pc}
    b982:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b984:	f7ff fab6 	bl	aef4 <waitTransferComplete()>
    b988:	2800      	cmp	r0, #0
    b98a:	d0f7      	beq.n	b97c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b98c:	7a63      	ldrb	r3, [r4, #9]
    b98e:	2b01      	cmp	r3, #1
    b990:	d018      	beq.n	b9c4 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    b992:	6823      	ldr	r3, [r4, #0]
    b994:	6a1b      	ldr	r3, [r3, #32]
    b996:	4620      	mov	r0, r4
    b998:	4798      	blx	r3
    b99a:	2800      	cmp	r0, #0
    b99c:	d0ee      	beq.n	b97c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    b99e:	4631      	mov	r1, r6
    b9a0:	4620      	mov	r0, r4
    b9a2:	f7ff ff9b 	bl	b8dc <SdioCard::readStart(unsigned long)>
    b9a6:	2800      	cmp	r0, #0
    b9a8:	d0e8      	beq.n	b97c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
    b9aa:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    b9ac:	2301      	movs	r3, #1
    b9ae:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b9b0:	4629      	mov	r1, r5
    b9b2:	4620      	mov	r0, r4
    b9b4:	f7ff ff2a 	bl	b80c <SdioCard::readData(unsigned char*)>
    b9b8:	2800      	cmp	r0, #0
    b9ba:	d0df      	beq.n	b97c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    b9bc:	6863      	ldr	r3, [r4, #4]
    b9be:	3301      	adds	r3, #1
    b9c0:	6063      	str	r3, [r4, #4]
    b9c2:	e7db      	b.n	b97c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b9c4:	6863      	ldr	r3, [r4, #4]
    b9c6:	42b3      	cmp	r3, r6
    b9c8:	d1e3      	bne.n	b992 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    b9ca:	e7f1      	b.n	b9b0 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b9cc:	2301      	movs	r3, #1
    b9ce:	466a      	mov	r2, sp
    b9d0:	4806      	ldr	r0, [pc, #24]	; (b9ec <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b9d2:	f7ff fc07 	bl	b1e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b9d6:	2800      	cmp	r0, #0
    b9d8:	d0c8      	beq.n	b96c <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
    b9da:	f44f 7200 	mov.w	r2, #512	; 0x200
    b9de:	4669      	mov	r1, sp
    b9e0:	4628      	mov	r0, r5
    b9e2:	f001 fc9b 	bl	d31c <memcpy>
  return true;
    b9e6:	2001      	movs	r0, #1
    b9e8:	e7c8      	b.n	b97c <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    b9ea:	bf00      	nop
    b9ec:	113a0011 	.word	0x113a0011
    b9f0:	20003a58 	.word	0x20003a58
    b9f4:	20004bbc 	.word	0x20004bbc

0000b9f8 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b9f8:	b510      	push	{r4, lr}
    b9fa:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
    b9fc:	2100      	movs	r1, #0
    b9fe:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ba00:	4a10      	ldr	r2, [pc, #64]	; (ba44 <SdioCard::stopTransmission(bool)+0x4c>)
    ba02:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ba04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ba08:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    ba0a:	480f      	ldr	r0, [pc, #60]	; (ba48 <SdioCard::stopTransmission(bool)+0x50>)
    ba0c:	f7ff f94e 	bl	acac <cardCommand(unsigned long, unsigned long)>
    ba10:	b938      	cbnz	r0, ba22 <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
    ba12:	4b0e      	ldr	r3, [pc, #56]	; (ba4c <SdioCard::stopTransmission(bool)+0x54>)
    ba14:	2209      	movs	r2, #9
    ba16:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ba18:	4b0d      	ldr	r3, [pc, #52]	; (ba50 <SdioCard::stopTransmission(bool)+0x58>)
    ba1a:	f44f 726d 	mov.w	r2, #948	; 0x3b4
    ba1e:	601a      	str	r2, [r3, #0]
}
    ba20:	bd10      	pop	{r4, pc}
  if (blocking) {
    ba22:	2c00      	cmp	r4, #0
    ba24:	d0fc      	beq.n	ba20 <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
    ba26:	480b      	ldr	r0, [pc, #44]	; (ba54 <SdioCard::stopTransmission(bool)+0x5c>)
    ba28:	f7ff fade 	bl	afe8 <yieldTimeout(bool (*)())>
    ba2c:	b140      	cbz	r0, ba40 <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
    ba2e:	4b07      	ldr	r3, [pc, #28]	; (ba4c <SdioCard::stopTransmission(bool)+0x54>)
    ba30:	220a      	movs	r2, #10
    ba32:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ba34:	4b06      	ldr	r3, [pc, #24]	; (ba50 <SdioCard::stopTransmission(bool)+0x58>)
    ba36:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    ba3a:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    ba3c:	2000      	movs	r0, #0
    ba3e:	e7ef      	b.n	ba20 <SdioCard::stopTransmission(bool)+0x28>
  return true;
    ba40:	4620      	mov	r0, r4
    ba42:	e7ed      	b.n	ba20 <SdioCard::stopTransmission(bool)+0x28>
    ba44:	402c0000 	.word	0x402c0000
    ba48:	0cdb0000 	.word	0x0cdb0000
    ba4c:	20003a58 	.word	0x20003a58
    ba50:	20004bbc 	.word	0x20004bbc
    ba54:	0000aa65 	.word	0x0000aa65

0000ba58 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    ba58:	b510      	push	{r4, lr}
    ba5a:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
    ba5c:	f7ff fa4a 	bl	aef4 <waitTransferComplete()>
    ba60:	b108      	cbz	r0, ba66 <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
    ba62:	7a63      	ldrb	r3, [r4, #9]
    ba64:	b903      	cbnz	r3, ba68 <SdioCard::syncDevice()+0x10>
}
    ba66:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
    ba68:	2101      	movs	r1, #1
    ba6a:	4620      	mov	r0, r4
    ba6c:	f7ff ffc4 	bl	b9f8 <SdioCard::stopTransmission(bool)>
    ba70:	e7f9      	b.n	ba66 <SdioCard::syncDevice()+0xe>

0000ba72 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
    ba72:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
    ba74:	2101      	movs	r1, #1
    ba76:	f001 fc0b 	bl	d290 <pinMode>
}
    ba7a:	bd08      	pop	{r3, pc}

0000ba7c <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
    ba7c:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
    ba7e:	f001 fbcf 	bl	d220 <digitalWrite>
}
    ba82:	bd08      	pop	{r3, pc}

0000ba84 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    ba84:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
    ba86:	6803      	ldr	r3, [r0, #0]
    ba88:	6842      	ldr	r2, [r0, #4]
    ba8a:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
    ba8c:	7cd9      	ldrb	r1, [r3, #19]
    ba8e:	2900      	cmp	r1, #0
    ba90:	d042      	beq.n	bb18 <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
    ba92:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ba94:	7cd9      	ldrb	r1, [r3, #19]
    ba96:	f011 0f01 	tst.w	r1, #1
    ba9a:	d008      	beq.n	baae <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ba9c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    baa0:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
    baa4:	695d      	ldr	r5, [r3, #20]
    baa6:	4029      	ands	r1, r5
    baa8:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    baaa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    baae:	7cd9      	ldrb	r1, [r3, #19]
    bab0:	f011 0f02 	tst.w	r1, #2
    bab4:	d008      	beq.n	bac8 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    bab6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    baba:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    babe:	699d      	ldr	r5, [r3, #24]
    bac0:	4029      	ands	r1, r5
    bac2:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    bac4:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    bac8:	7cd9      	ldrb	r1, [r3, #19]
    baca:	f011 0f04 	tst.w	r1, #4
    bace:	d008      	beq.n	bae2 <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    bad0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bad4:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    bad8:	69dd      	ldr	r5, [r3, #28]
    bada:	4029      	ands	r1, r5
    badc:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    bade:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    bae2:	7cd9      	ldrb	r1, [r3, #19]
    bae4:	f011 0f08 	tst.w	r1, #8
    bae8:	d008      	beq.n	bafc <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    baea:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    baee:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    baf2:	6a1d      	ldr	r5, [r3, #32]
    baf4:	4029      	ands	r1, r5
    baf6:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    baf8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    bafc:	7cd9      	ldrb	r1, [r3, #19]
    bafe:	f011 0f10 	tst.w	r1, #16
    bb02:	d008      	beq.n	bb16 <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    bb04:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bb08:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    bb0c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bb0e:	4029      	ands	r1, r5
    bb10:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    bb12:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
    bb16:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    bb18:	6899      	ldr	r1, [r3, #8]
    bb1a:	428a      	cmp	r2, r1
    bb1c:	d025      	beq.n	bb6a <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
    bb1e:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    bb20:	4920      	ldr	r1, [pc, #128]	; (bba4 <SdSpiArduinoDriver::activate()+0x120>)
    bb22:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    bb24:	f3c1 1501 	ubfx	r5, r1, #4, #2
    bb28:	481f      	ldr	r0, [pc, #124]	; (bba8 <SdSpiArduinoDriver::activate()+0x124>)
    bb2a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    bb2e:	f3c1 6182 	ubfx	r1, r1, #26, #3
    bb32:	3101      	adds	r1, #1
    bb34:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    bb38:	b37a      	cbz	r2, bb9a <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
    bb3a:	4282      	cmp	r2, r0
    bb3c:	d82b      	bhi.n	bb96 <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
    bb3e:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
    bb42:	fbb0 f0f1 	udiv	r0, r0, r1
    bb46:	4282      	cmp	r2, r0
    bb48:	d31f      	bcc.n	bb8a <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
    bb4a:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    bb4e:	d31e      	bcc.n	bb8e <SdSpiArduinoDriver::activate()+0x10a>
    bb50:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
    bb54:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bb56:	0850      	lsrs	r0, r2, #1
    bb58:	0201      	lsls	r1, r0, #8
    bb5a:	b289      	uxth	r1, r1
    bb5c:	0400      	lsls	r0, r0, #16
    bb5e:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    bb62:	4301      	orrs	r1, r0
    bb64:	b2d2      	uxtb	r2, r2
    bb66:	430a      	orrs	r2, r1
    bb68:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb6a:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
    bb6c:	2100      	movs	r1, #0
    bb6e:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb70:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bb72:	2103      	movs	r1, #3
    bb74:	6251      	str	r1, [r2, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb76:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
    bb78:	68d9      	ldr	r1, [r3, #12]
    bb7a:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb7c:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
    bb7e:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb80:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
    bb82:	2201      	movs	r2, #1
    bb84:	611a      	str	r2, [r3, #16]
}
    bb86:	bc30      	pop	{r4, r5}
    bb88:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
    bb8a:	4608      	mov	r0, r1
    bb8c:	e007      	b.n	bb9e <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
    bb8e:	2902      	cmp	r1, #2
    bb90:	d8e0      	bhi.n	bb54 <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
    bb92:	2200      	movs	r2, #0
    bb94:	e7df      	b.n	bb56 <SdSpiArduinoDriver::activate()+0xd2>
    bb96:	2200      	movs	r2, #0
    bb98:	e7dd      	b.n	bb56 <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
    bb9a:	428d      	cmp	r5, r1
    bb9c:	d3db      	bcc.n	bb56 <SdSpiArduinoDriver::activate()+0xd2>
    bb9e:	1c41      	adds	r1, r0, #1
    bba0:	e7d3      	b.n	bb4a <SdSpiArduinoDriver::activate()+0xc6>
    bba2:	bf00      	nop
    bba4:	400fc000 	.word	0x400fc000
    bba8:	20002684 	.word	0x20002684

0000bbac <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    bbac:	b500      	push	{lr}
    bbae:	b085      	sub	sp, #20
    bbb0:	4684      	mov	ip, r0
    bbb2:	a804      	add	r0, sp, #16
    bbb4:	e900 000e 	stmdb	r0, {r1, r2, r3}
    bbb8:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
    bbba:	b133      	cbz	r3, bbca <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    bbbc:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    bbc0:	f7f9 f836 	bl	4c30 <SPIClass::begin()>
}
    bbc4:	b005      	add	sp, #20
    bbc6:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
    bbca:	4801      	ldr	r0, [pc, #4]	; (bbd0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    bbcc:	e7f6      	b.n	bbbc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    bbce:	bf00      	nop
    bbd0:	20004634 	.word	0x20004634

0000bbd4 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    bbd4:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    bbd6:	7cda      	ldrb	r2, [r3, #19]
    bbd8:	b35a      	cbz	r2, bc32 <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    bbda:	f012 0f01 	tst.w	r2, #1
    bbde:	d004      	beq.n	bbea <SdSpiArduinoDriver::deactivate()+0x16>
    bbe0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    bbe2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bbe6:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    bbea:	7cda      	ldrb	r2, [r3, #19]
    bbec:	f012 0f02 	tst.w	r2, #2
    bbf0:	d004      	beq.n	bbfc <SdSpiArduinoDriver::deactivate()+0x28>
    bbf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    bbf4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bbf8:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bbfc:	7cda      	ldrb	r2, [r3, #19]
    bbfe:	f012 0f04 	tst.w	r2, #4
    bc02:	d004      	beq.n	bc0e <SdSpiArduinoDriver::deactivate()+0x3a>
    bc04:	6b19      	ldr	r1, [r3, #48]	; 0x30
    bc06:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc0a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bc0e:	7cda      	ldrb	r2, [r3, #19]
    bc10:	f012 0f08 	tst.w	r2, #8
    bc14:	d004      	beq.n	bc20 <SdSpiArduinoDriver::deactivate()+0x4c>
    bc16:	6b59      	ldr	r1, [r3, #52]	; 0x34
    bc18:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc1c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bc20:	7cda      	ldrb	r2, [r3, #19]
    bc22:	f012 0f10 	tst.w	r2, #16
    bc26:	d004      	beq.n	bc32 <SdSpiArduinoDriver::deactivate()+0x5e>
    bc28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bc2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bc2e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bc32:	4770      	bx	lr

0000bc34 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
    bc34:	b508      	push	{r3, lr}
  m_spi->end();
    bc36:	6800      	ldr	r0, [r0, #0]
    bc38:	f7f9 f971 	bl	4f1e <SPIClass::end()>
}
    bc3c:	bd08      	pop	{r3, pc}

0000bc3e <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    bc3e:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc40:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bc42:	21ff      	movs	r1, #255	; 0xff
    bc44:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc46:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bc48:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bc4a:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bc4e:	d0fb      	beq.n	bc48 <SdSpiArduinoDriver::receive()+0xa>
    bc50:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
    bc52:	b2c0      	uxtb	r0, r0
    bc54:	4770      	bx	lr

0000bc56 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bc56:	b570      	push	{r4, r5, r6, lr}
    bc58:	4605      	mov	r5, r0
    bc5a:	460c      	mov	r4, r1
    bc5c:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bc5e:	21ff      	movs	r1, #255	; 0xff
    bc60:	4620      	mov	r0, r4
    bc62:	f005 fc23 	bl	114ac <memset>
		transfer(buf, buf, count);
    bc66:	4633      	mov	r3, r6
    bc68:	4622      	mov	r2, r4
    bc6a:	4621      	mov	r1, r4
    bc6c:	6828      	ldr	r0, [r5, #0]
    bc6e:	f7f9 f917 	bl	4ea0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bc72:	2000      	movs	r0, #0
    bc74:	bd70      	pop	{r4, r5, r6, pc}

0000bc76 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    bc76:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc78:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bc7a:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc7c:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bc7e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bc80:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bc84:	d0fb      	beq.n	bc7e <SdSpiArduinoDriver::send(unsigned char)+0x8>
    bc86:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    bc88:	4770      	bx	lr

0000bc8a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bc8a:	b530      	push	{r4, r5, lr}
    bc8c:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bc90:	4604      	mov	r4, r0
    bc92:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bc94:	1e53      	subs	r3, r2, #1
    bc96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bc9a:	d313      	bcc.n	bcc4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bc9c:	b17a      	cbz	r2, bcbe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
    bc9e:	3901      	subs	r1, #1
    bca0:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
    bca4:	6823      	ldr	r3, [r4, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bca6:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bca8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    bcac:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bcae:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bcb0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bcb2:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bcb6:	d0fb      	beq.n	bcb0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
    bcb8:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
    bcba:	4561      	cmp	r1, ip
    bcbc:	d1f2      	bne.n	bca4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
    bcbe:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bcc2:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    bcc4:	4668      	mov	r0, sp
    bcc6:	f001 fb29 	bl	d31c <memcpy>
		transfer(buf, buf, count);
    bcca:	462b      	mov	r3, r5
    bccc:	466a      	mov	r2, sp
    bcce:	4669      	mov	r1, sp
    bcd0:	6820      	ldr	r0, [r4, #0]
    bcd2:	f7f9 f8e5 	bl	4ea0 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
    bcd6:	e7f2      	b.n	bcbe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

0000bcd8 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    bcd8:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    bcda:	7803      	ldrb	r3, [r0, #0]
    bcdc:	f013 0f01 	tst.w	r3, #1
    bce0:	d01c      	beq.n	bd1c <FsCache::sync()+0x44>
    bce2:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    bce4:	6840      	ldr	r0, [r0, #4]
    bce6:	f104 0610 	add.w	r6, r4, #16
    bcea:	6803      	ldr	r3, [r0, #0]
    bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bcee:	4632      	mov	r2, r6
    bcf0:	68e1      	ldr	r1, [r4, #12]
    bcf2:	4798      	blx	r3
    bcf4:	4605      	mov	r5, r0
    bcf6:	b190      	cbz	r0, bd1e <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    bcf8:	7823      	ldrb	r3, [r4, #0]
    bcfa:	f013 0f02 	tst.w	r3, #2
    bcfe:	d008      	beq.n	bd12 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bd00:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    bd02:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bd04:	6803      	ldr	r3, [r0, #0]
    bd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd08:	4632      	mov	r2, r6
    bd0a:	68e6      	ldr	r6, [r4, #12]
    bd0c:	4431      	add	r1, r6
    bd0e:	4798      	blx	r3
    bd10:	b138      	cbz	r0, bd22 <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    bd12:	7823      	ldrb	r3, [r4, #0]
    bd14:	f023 0301 	bic.w	r3, r3, #1
    bd18:	7023      	strb	r3, [r4, #0]
    bd1a:	e000      	b.n	bd1e <FsCache::sync()+0x46>
  }
  return true;
    bd1c:	2501      	movs	r5, #1

 fail:
  return false;
}
    bd1e:	4628      	mov	r0, r5
    bd20:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    bd22:	4605      	mov	r5, r0
    bd24:	e7fb      	b.n	bd1e <FsCache::sync()+0x46>

0000bd26 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    bd26:	b570      	push	{r4, r5, r6, lr}
    bd28:	4604      	mov	r4, r0
  if (!m_blockDev) {
    bd2a:	6840      	ldr	r0, [r0, #4]
    bd2c:	b158      	cbz	r0, bd46 <FsCache::prepare(unsigned long, unsigned char)+0x20>
    bd2e:	460e      	mov	r6, r1
    bd30:	4615      	mov	r5, r2
  if (m_sector != sector) {
    bd32:	68e3      	ldr	r3, [r4, #12]
    bd34:	428b      	cmp	r3, r1
    bd36:	d107      	bne.n	bd48 <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
    bd38:	f005 0503 	and.w	r5, r5, #3
    bd3c:	7823      	ldrb	r3, [r4, #0]
    bd3e:	432b      	orrs	r3, r5
    bd40:	4620      	mov	r0, r4
    bd42:	f800 3b10 	strb.w	r3, [r0], #16
}
    bd46:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
    bd48:	4620      	mov	r0, r4
    bd4a:	f7ff ffc5 	bl	bcd8 <FsCache::sync()>
    bd4e:	b170      	cbz	r0, bd6e <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
    bd50:	f015 0f04 	tst.w	r5, #4
    bd54:	d107      	bne.n	bd66 <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    bd56:	6860      	ldr	r0, [r4, #4]
    bd58:	6803      	ldr	r3, [r0, #0]
    bd5a:	691b      	ldr	r3, [r3, #16]
    bd5c:	f104 0210 	add.w	r2, r4, #16
    bd60:	4631      	mov	r1, r6
    bd62:	4798      	blx	r3
    bd64:	b128      	cbz	r0, bd72 <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
    bd66:	2300      	movs	r3, #0
    bd68:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
    bd6a:	60e6      	str	r6, [r4, #12]
    bd6c:	e7e4      	b.n	bd38 <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
    bd6e:	2000      	movs	r0, #0
    bd70:	e7e9      	b.n	bd46 <FsCache::prepare(unsigned long, unsigned char)+0x20>
    bd72:	2000      	movs	r0, #0
    bd74:	e7e7      	b.n	bd46 <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

0000bd78 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
 */
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
    bd78:	b508      	push	{r3, lr}
  *ms10 = 0;
    bd7a:	2300      	movs	r3, #0
    bd7c:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    bd7e:	4b02      	ldr	r3, [pc, #8]	; (bd88 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
    bd80:	681b      	ldr	r3, [r3, #0]
    bd82:	4798      	blx	r3
}
    bd84:	bd08      	pop	{r3, pc}
    bd86:	bf00      	nop
    bd88:	20004c60 	.word	0x20004c60

0000bd8c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    bd8c:	4b02      	ldr	r3, [pc, #8]	; (bd98 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    bd8e:	4a03      	ldr	r2, [pc, #12]	; (bd9c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    bd90:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
    bd92:	4b03      	ldr	r3, [pc, #12]	; (bda0 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    bd94:	6018      	str	r0, [r3, #0]
  }
    bd96:	4770      	bx	lr
    bd98:	20004c5c 	.word	0x20004c5c
    bd9c:	0000bd79 	.word	0x0000bd79
    bda0:	20004c60 	.word	0x20004c60

0000bda4 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    bda4:	b510      	push	{r4, lr}
    bda6:	b082      	sub	sp, #8
    bda8:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    bdaa:	8980      	ldrh	r0, [r0, #12]
    bdac:	b118      	cbz	r0, bdb6 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    bdae:	2300      	movs	r3, #0
    bdb0:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    bdb2:	b002      	add	sp, #8
    bdb4:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    bdb6:	6863      	ldr	r3, [r4, #4]
    bdb8:	68a1      	ldr	r1, [r4, #8]
    bdba:	428b      	cmp	r3, r1
    bdbc:	d2f9      	bcs.n	bdb2 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    bdbe:	aa01      	add	r2, sp, #4
    bdc0:	4618      	mov	r0, r3
    bdc2:	f000 f8b9 	bl	bf38 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    bdc6:	b130      	cbz	r0, bdd6 <FsName::get16()+0x32>
    next = ptr;
    bdc8:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    bdca:	9801      	ldr	r0, [sp, #4]
    bdcc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bdd0:	d204      	bcs.n	bddc <FsName::get16()+0x38>
      rtn = cp;
    bdd2:	b280      	uxth	r0, r0
    bdd4:	e7ed      	b.n	bdb2 <FsName::get16()+0xe>
  return 0XFFFF;
    bdd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bdda:	e7ea      	b.n	bdb2 <FsName::get16()+0xe>
    bddc:	f3c0 0309 	ubfx	r3, r0, #0, #10
    bde0:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
    bde4:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bde6:	0a80      	lsrs	r0, r0, #10
    bde8:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    bdec:	b280      	uxth	r0, r0
    bdee:	e7e0      	b.n	bdb2 <FsName::get16()+0xe>

0000bdf0 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    bdf0:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bdf2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    bdf6:	d82e      	bhi.n	be56 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
    bdf8:	2910      	cmp	r1, #16
    bdfa:	d81f      	bhi.n	be3c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bdfc:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
    be00:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    be02:	fb0e f101 	mul.w	r1, lr, r1
    be06:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
    be0a:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
    be0e:	d23f      	bcs.n	be90 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    be10:	fb01 231c 	mls	r3, r1, ip, r2
    be14:	fbb3 f3fe 	udiv	r3, r3, lr
    be18:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    be1a:	fbb2 f1fe 	udiv	r1, r2, lr
    be1e:	fb0e 2211 	mls	r2, lr, r1, r2
    be22:	3201      	adds	r2, #1
    be24:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    be26:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    be28:	ea4f 039c 	mov.w	r3, ip, lsr #2
    be2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    be30:	431a      	orrs	r2, r3
    be32:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
    be34:	f880 c002 	strb.w	ip, [r0, #2]
}
    be38:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
    be3c:	2920      	cmp	r1, #32
    be3e:	d803      	bhi.n	be48 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be40:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
    be44:	2104      	movs	r1, #4
    be46:	e7dc      	b.n	be02 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be48:	f04f 0e20 	mov.w	lr, #32
    be4c:	2980      	cmp	r1, #128	; 0x80
    be4e:	bf8c      	ite	hi
    be50:	2110      	movhi	r1, #16
    be52:	2108      	movls	r1, #8
    be54:	e7d5      	b.n	be02 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    be56:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    be5a:	d90d      	bls.n	be78 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
    be5c:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    be60:	d90e      	bls.n	be80 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
    be62:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    be66:	d90f      	bls.n	be88 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be68:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    be6c:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
    be70:	bf94      	ite	ls
    be72:	2180      	movls	r1, #128	; 0x80
    be74:	21ff      	movhi	r1, #255	; 0xff
    be76:	e7c4      	b.n	be02 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    be78:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
    be7c:	2110      	movs	r1, #16
    be7e:	e7c0      	b.n	be02 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be80:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
    be84:	2120      	movs	r1, #32
    be86:	e7bc      	b.n	be02 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be88:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
    be8c:	2140      	movs	r1, #64	; 0x40
    be8e:	e7b8      	b.n	be02 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
    be90:	223f      	movs	r2, #63	; 0x3f
    h = 254;
    be92:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
    be94:	f240 3cff 	movw	ip, #1023	; 0x3ff
    be98:	e7c5      	b.n	be26 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

0000be9a <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    be9a:	4603      	mov	r3, r0
    size_t n = end - str;
    be9c:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
    be9e:	287f      	cmp	r0, #127	; 0x7f
    bea0:	d805      	bhi.n	beae <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    bea2:	2a00      	cmp	r2, #0
    bea4:	d040      	beq.n	bf28 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
    bea6:	4608      	mov	r0, r1
    bea8:	f800 3b01 	strb.w	r3, [r0], #1
    beac:	4770      	bx	lr
    } else if (cp < 0X800) {
    beae:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    beb2:	d20d      	bcs.n	bed0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    beb4:	2a01      	cmp	r2, #1
    beb6:	d939      	bls.n	bf2c <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    beb8:	0982      	lsrs	r2, r0, #6
    beba:	f062 023f 	orn	r2, r2, #63	; 0x3f
    bebe:	4608      	mov	r0, r1
    bec0:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    becc:	704b      	strb	r3, [r1, #1]
    bece:	4770      	bx	lr
    } else if (cp < 0X10000) {
    bed0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bed4:	d211      	bcs.n	befa <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    bed6:	2a02      	cmp	r2, #2
    bed8:	d92a      	bls.n	bf30 <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    beda:	0b02      	lsrs	r2, r0, #12
    bedc:	f062 021f 	orn	r2, r2, #31
    bee0:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bee2:	f3c0 1285 	ubfx	r2, r0, #6, #6
    bee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    beea:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    beec:	1cc8      	adds	r0, r1, #3
    beee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bef6:	708b      	strb	r3, [r1, #2]
    bef8:	4770      	bx	lr
       if (n < 4) goto fail;
    befa:	2a03      	cmp	r2, #3
    befc:	d91a      	bls.n	bf34 <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    befe:	0c82      	lsrs	r2, r0, #18
    bf00:	f062 020f 	orn	r2, r2, #15
    bf04:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    bf06:	f3c0 3205 	ubfx	r2, r0, #12, #6
    bf0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bf0e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bf10:	f3c0 1285 	ubfx	r2, r0, #6, #6
    bf14:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bf18:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bf1a:	1d08      	adds	r0, r1, #4
    bf1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bf20:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bf24:	70cb      	strb	r3, [r1, #3]
    bf26:	4770      	bx	lr
    return nullptr;
    bf28:	2000      	movs	r0, #0
    bf2a:	4770      	bx	lr
    bf2c:	2000      	movs	r0, #0
    bf2e:	4770      	bx	lr
    bf30:	2000      	movs	r0, #0
    bf32:	4770      	bx	lr
    bf34:	2000      	movs	r0, #0
  }
    bf36:	4770      	bx	lr

0000bf38 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    bf38:	4288      	cmp	r0, r1
    bf3a:	d242      	bcs.n	bfc2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    bf3c:	b510      	push	{r4, lr}
    bf3e:	4603      	mov	r3, r0
    uint8_t ch = str[0];
    bf40:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    bf42:	f990 0000 	ldrsb.w	r0, [r0]
    bf46:	2800      	cmp	r0, #0
    bf48:	da10      	bge.n	bf6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
    bf4a:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    bf4e:	28c0      	cmp	r0, #192	; 0xc0
    bf50:	d00f      	beq.n	bf72 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
    bf52:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    bf56:	28e0      	cmp	r0, #224	; 0xe0
    bf58:	d02e      	beq.n	bfb8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
    bf5a:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    bf5e:	28f0      	cmp	r0, #240	; 0xf0
    bf60:	d131      	bne.n	bfc6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
    bf62:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    bf66:	f04f 0c04 	mov.w	ip, #4
    bf6a:	e006      	b.n	bf7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
    bf6c:	6014      	str	r4, [r2, #0]
      return str + 1;
    bf6e:	1c58      	adds	r0, r3, #1
  }
    bf70:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
    bf72:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    bf76:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
    bf7a:	eb03 000c 	add.w	r0, r3, ip
    bf7e:	4288      	cmp	r0, r1
    bf80:	d823      	bhi.n	bfca <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
    bf82:	1c59      	adds	r1, r3, #1
    bf84:	4684      	mov	ip, r0
      ch = str[i];
    bf86:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    bf8a:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
    bf8e:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    bf92:	d11c      	bne.n	bfce <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
    bf94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bf98:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
    bf9c:	4561      	cmp	r1, ip
    bf9e:	d1f2      	bne.n	bf86 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
    bfa0:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    bfa4:	4b0d      	ldr	r3, [pc, #52]	; (bfdc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
    bfa6:	4299      	cmp	r1, r3
    bfa8:	d813      	bhi.n	bfd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    bfaa:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    bfae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bfb2:	d310      	bcc.n	bfd6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
    bfb4:	6014      	str	r4, [r2, #0]
    return str + n;
    bfb6:	e7db      	b.n	bf70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
    bfb8:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    bfbc:	f04f 0c03 	mov.w	ip, #3
    bfc0:	e7db      	b.n	bf7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
    bfc2:	2000      	movs	r0, #0
  }
    bfc4:	4770      	bx	lr
      return nullptr;
    bfc6:	2000      	movs	r0, #0
    bfc8:	e7d2      	b.n	bf70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bfca:	2000      	movs	r0, #0
    bfcc:	e7d0      	b.n	bf70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
    bfce:	2000      	movs	r0, #0
    bfd0:	e7ce      	b.n	bf70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bfd2:	2000      	movs	r0, #0
    bfd4:	e7cc      	b.n	bf70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bfd6:	2000      	movs	r0, #0
    bfd8:	e7ca      	b.n	bf70 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bfda:	bf00      	nop
    bfdc:	0010ff7f 	.word	0x0010ff7f

0000bfe0 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    bfe0:	287e      	cmp	r0, #126	; 0x7e
    bfe2:	d80c      	bhi.n	bffe <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    bfe4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    bfe8:	b29b      	uxth	r3, r3
    bfea:	2b19      	cmp	r3, #25
    bfec:	bf8c      	ite	hi
    bfee:	2300      	movhi	r3, #0
    bff0:	2301      	movls	r3, #1
    bff2:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    bff6:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    bff8:	4770      	bx	lr
    mid = left + (right - left)/2;
    bffa:	469c      	mov	ip, r3
    bffc:	e004      	b.n	c008 <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
    bffe:	b430      	push	{r4, r5}
  size_t right = size;
    c000:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    c004:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    c006:	4c27      	ldr	r4, [pc, #156]	; (c0a4 <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
    c008:	ebac 0302 	sub.w	r3, ip, r2
    c00c:	2b01      	cmp	r3, #1
    c00e:	d907      	bls.n	c020 <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
    c010:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    c014:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
    c018:	4281      	cmp	r1, r0
    c01a:	d8ee      	bhi.n	bffa <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
    c01c:	461a      	mov	r2, r3
    c01e:	e7f3      	b.n	c008 <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
    c020:	b292      	uxth	r2, r2
    c022:	4b20      	ldr	r3, [pc, #128]	; (c0a4 <toUpcase(unsigned short)+0xc4>)
    c024:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c028:	4298      	cmp	r0, r3
    c02a:	d31d      	bcc.n	c068 <toUpcase(unsigned short)+0x88>
    c02c:	1ac1      	subs	r1, r0, r3
    c02e:	4c1d      	ldr	r4, [pc, #116]	; (c0a4 <toUpcase(unsigned short)+0xc4>)
    c030:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    c034:	78e4      	ldrb	r4, [r4, #3]
    c036:	42a1      	cmp	r1, r4
    c038:	da19      	bge.n	c06e <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
    c03a:	491a      	ldr	r1, [pc, #104]	; (c0a4 <toUpcase(unsigned short)+0xc4>)
    c03c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    c040:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    c044:	2a01      	cmp	r2, #1
    c046:	d004      	beq.n	c052 <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
    c048:	b14a      	cbz	r2, c05e <toUpcase(unsigned short)+0x7e>
    c04a:	b293      	uxth	r3, r2
    c04c:	4403      	add	r3, r0
    c04e:	b298      	uxth	r0, r3
    c050:	e021      	b.n	c096 <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
    c052:	1ac3      	subs	r3, r0, r3
    c054:	f003 0301 	and.w	r3, r3, #1
    c058:	1ac3      	subs	r3, r0, r3
    c05a:	b298      	uxth	r0, r3
    c05c:	e01b      	b.n	c096 <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
    c05e:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    c062:	e7f3      	b.n	c04c <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
    c064:	461c      	mov	r4, r3
    c066:	e005      	b.n	c074 <toUpcase(unsigned short)+0x94>
    c068:	244b      	movs	r4, #75	; 0x4b
    c06a:	2200      	movs	r2, #0
    c06c:	e001      	b.n	c072 <toUpcase(unsigned short)+0x92>
    c06e:	244b      	movs	r4, #75	; 0x4b
    c070:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    c072:	4d0d      	ldr	r5, [pc, #52]	; (c0a8 <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
    c074:	1aa3      	subs	r3, r4, r2
    c076:	2b01      	cmp	r3, #1
    c078:	d907      	bls.n	c08a <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
    c07a:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    c07e:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
    c082:	4281      	cmp	r1, r0
    c084:	d8ee      	bhi.n	c064 <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
    c086:	461a      	mov	r2, r3
    c088:	e7f4      	b.n	c074 <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
    c08a:	b292      	uxth	r2, r2
    c08c:	4b06      	ldr	r3, [pc, #24]	; (c0a8 <toUpcase(unsigned short)+0xc8>)
    c08e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
    c092:	4283      	cmp	r3, r0
    c094:	d001      	beq.n	c09a <toUpcase(unsigned short)+0xba>
}
    c096:	bc30      	pop	{r4, r5}
    c098:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    c09a:	4b03      	ldr	r3, [pc, #12]	; (c0a8 <toUpcase(unsigned short)+0xc8>)
    c09c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c0a0:	8858      	ldrh	r0, [r3, #2]
    c0a2:	e7f8      	b.n	c096 <toUpcase(unsigned short)+0xb6>
    c0a4:	20001f0c 	.word	0x20001f0c
    c0a8:	20001de0 	.word	0x20001de0

0000c0ac <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0ac:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c0b0:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c0b2:	4b11      	ldr	r3, [pc, #68]	; (c0f8 <EventResponder::runFromInterrupt()+0x4c>)
    c0b4:	6818      	ldr	r0, [r3, #0]
		if (first) {
    c0b6:	b1d0      	cbz	r0, c0ee <EventResponder::runFromInterrupt()+0x42>
{
    c0b8:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
    c0ba:	461d      	mov	r5, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c0bc:	4e0f      	ldr	r6, [pc, #60]	; (c0fc <EventResponder::runFromInterrupt()+0x50>)
    c0be:	2400      	movs	r4, #0
    c0c0:	e009      	b.n	c0d6 <EventResponder::runFromInterrupt()+0x2a>
    c0c2:	6034      	str	r4, [r6, #0]
    c0c4:	e00c      	b.n	c0e0 <EventResponder::runFromInterrupt()+0x34>
			}
			enableInterrupts(irq);
			first->_triggered = false;
    c0c6:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c0c8:	6883      	ldr	r3, [r0, #8]
    c0ca:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0cc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c0d0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    c0d2:	6828      	ldr	r0, [r5, #0]
		if (first) {
    c0d4:	b140      	cbz	r0, c0e8 <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
    c0d6:	6943      	ldr	r3, [r0, #20]
    c0d8:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
    c0da:	2b00      	cmp	r3, #0
    c0dc:	d0f1      	beq.n	c0c2 <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
    c0de:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c0e0:	2a00      	cmp	r2, #0
    c0e2:	d1f0      	bne.n	c0c6 <EventResponder::runFromInterrupt()+0x1a>
    c0e4:	b662      	cpsie	i
    c0e6:	e7ee      	b.n	c0c6 <EventResponder::runFromInterrupt()+0x1a>
    c0e8:	b902      	cbnz	r2, c0ec <EventResponder::runFromInterrupt()+0x40>
    c0ea:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    c0ec:	bd70      	pop	{r4, r5, r6, pc}
    c0ee:	b90a      	cbnz	r2, c0f4 <EventResponder::runFromInterrupt()+0x48>
    c0f0:	b662      	cpsie	i
			break;
    c0f2:	4770      	bx	lr
    c0f4:	4770      	bx	lr
    c0f6:	bf00      	nop
    c0f8:	20004c70 	.word	0x20004c70
    c0fc:	20004c6c 	.word	0x20004c6c

0000c100 <pendablesrvreq_isr>:
{
    c100:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    c102:	f7ff ffd3 	bl	c0ac <EventResponder::runFromInterrupt()>
}
    c106:	bd08      	pop	{r3, pc}

0000c108 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c108:	4b04      	ldr	r3, [pc, #16]	; (c11c <systick_isr+0x14>)
    c10a:	685a      	ldr	r2, [r3, #4]
    c10c:	4b04      	ldr	r3, [pc, #16]	; (c120 <systick_isr+0x18>)
    c10e:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
    c110:	4a04      	ldr	r2, [pc, #16]	; (c124 <systick_isr+0x1c>)
    c112:	6813      	ldr	r3, [r2, #0]
    c114:	3301      	adds	r3, #1
    c116:	6013      	str	r3, [r2, #0]
}
    c118:	4770      	bx	lr
    c11a:	bf00      	nop
    c11c:	e0001000 	.word	0xe0001000
    c120:	20005384 	.word	0x20005384
    c124:	20005388 	.word	0x20005388

0000c128 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    c128:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    c12c:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    c12e:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    c132:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c134:	4293      	cmp	r3, r2
    c136:	d202      	bcs.n	c13e <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    c138:	3a01      	subs	r2, #1
    c13a:	1ad0      	subs	r0, r2, r3
}
    c13c:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c13e:	6b41      	ldr	r1, [r0, #52]	; 0x34
    c140:	3901      	subs	r1, #1
    c142:	440a      	add	r2, r1
    c144:	1ad0      	subs	r0, r2, r3
    c146:	4770      	bx	lr

0000c148 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    c148:	b672      	cpsid	i
	head = rx_buffer_head_;
    c14a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    c14e:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    c150:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c154:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    c156:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    c158:	bf3c      	itt	cc
    c15a:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    c15c:	1852      	addcc	r2, r2, r1
    c15e:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    c160:	6902      	ldr	r2, [r0, #16]
    c162:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    c164:	f3c0 6002 	ubfx	r0, r0, #24, #3
    c168:	4418      	add	r0, r3
	__enable_irq();
    c16a:	b662      	cpsie	i
	return avail;
}
    c16c:	4770      	bx	lr

0000c16e <HardwareSerial::peek()>:
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
}

int HardwareSerial::peek(void)
{
    c16e:	4602      	mov	r2, r0
	uint32_t head, tail;

	head = rx_buffer_head_;
    c170:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c174:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    c176:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c17a:	b29b      	uxth	r3, r3
	if (head == tail) {
    c17c:	4299      	cmp	r1, r3
    c17e:	d00b      	beq.n	c198 <HardwareSerial::peek()+0x2a>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c180:	3301      	adds	r3, #1
    c182:	6b91      	ldr	r1, [r2, #56]	; 0x38
    c184:	4299      	cmp	r1, r3
    c186:	bf98      	it	ls
    c188:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    c18a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    c18c:	4299      	cmp	r1, r3
    c18e:	d921      	bls.n	c1d4 <HardwareSerial::peek()+0x66>
		return rx_buffer_[tail];
    c190:	6a12      	ldr	r2, [r2, #32]
    c192:	5cd0      	ldrb	r0, [r2, r3]
    c194:	b2c0      	uxtb	r0, r0
    c196:	4770      	bx	lr
		__disable_irq();
    c198:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    c19a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c19e:	b289      	uxth	r1, r1
		if (head == tail) {
    c1a0:	428b      	cmp	r3, r1
    c1a2:	d001      	beq.n	c1a8 <HardwareSerial::peek()+0x3a>
		__enable_irq();
    c1a4:	b662      	cpsie	i
    c1a6:	e7eb      	b.n	c180 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    c1a8:	6903      	ldr	r3, [r0, #16]
    c1aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    c1ac:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    c1b0:	d00c      	beq.n	c1cc <HardwareSerial::peek()+0x5e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c1b2:	69db      	ldr	r3, [r3, #28]
    c1b4:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_head_ = 1;
    c1b8:	2101      	movs	r1, #1
    c1ba:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    c1be:	2100      	movs	r1, #0
    c1c0:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    c1c4:	6a12      	ldr	r2, [r2, #32]
    c1c6:	b2db      	uxtb	r3, r3
    c1c8:	7053      	strb	r3, [r2, #1]
    c1ca:	e001      	b.n	c1d0 <HardwareSerial::peek()+0x62>
			int c = -1;	// assume nothing to return
    c1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    c1d0:	b662      	cpsie	i
			return c;
    c1d2:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    c1d4:	1a5b      	subs	r3, r3, r1
    c1d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    c1d8:	5cd0      	ldrb	r0, [r2, r3]
    c1da:	b2c0      	uxtb	r0, r0
	}
}
    c1dc:	4770      	bx	lr

0000c1de <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
    c1de:	4602      	mov	r2, r0
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    c1e0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c1e4:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    c1e6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c1ea:	b29b      	uxth	r3, r3
	if (head == tail) {
    c1ec:	4299      	cmp	r1, r3
    c1ee:	d01b      	beq.n	c228 <HardwareSerial::read()+0x4a>
{
    c1f0:	b430      	push	{r4, r5}
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c1f2:	3301      	adds	r3, #1
    c1f4:	6b94      	ldr	r4, [r2, #56]	; 0x38
    c1f6:	429c      	cmp	r4, r3
    c1f8:	bf98      	it	ls
    c1fa:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    c1fc:	6b10      	ldr	r0, [r2, #48]	; 0x30
    c1fe:	4298      	cmp	r0, r3
    c200:	d927      	bls.n	c252 <HardwareSerial::read()+0x74>
		c = rx_buffer_[tail];
    c202:	6a10      	ldr	r0, [r2, #32]
    c204:	5cc0      	ldrb	r0, [r0, r3]
    c206:	b2c0      	uxtb	r0, r0
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    c208:	b29d      	uxth	r5, r3
    c20a:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    c20e:	6d95      	ldr	r5, [r2, #88]	; 0x58
    c210:	b145      	cbz	r5, c224 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    c212:	4299      	cmp	r1, r3
    c214:	d322      	bcc.n	c25c <HardwareSerial::read()+0x7e>
    c216:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    c218:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    c21a:	4299      	cmp	r1, r3
    c21c:	d302      	bcc.n	c224 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    c21e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    c220:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    c224:	bc30      	pop	{r4, r5}
    c226:	4770      	bx	lr
		__disable_irq();
    c228:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    c22a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c22e:	b289      	uxth	r1, r1
		if (head == tail) {
    c230:	428b      	cmp	r3, r1
    c232:	d001      	beq.n	c238 <HardwareSerial::read()+0x5a>
		__enable_irq();
    c234:	b662      	cpsie	i
    c236:	e7db      	b.n	c1f0 <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    c238:	6903      	ldr	r3, [r0, #16]
    c23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c23c:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    c240:	d003      	beq.n	c24a <HardwareSerial::read()+0x6c>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c242:	69d8      	ldr	r0, [r3, #28]
    c244:	f3c0 0009 	ubfx	r0, r0, #0, #10
    c248:	e001      	b.n	c24e <HardwareSerial::read()+0x70>
			c = -1;	// assume nothing to return
    c24a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    c24e:	b662      	cpsie	i
}	
    c250:	4770      	bx	lr
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    c252:	1a18      	subs	r0, r3, r0
    c254:	6a55      	ldr	r5, [r2, #36]	; 0x24
    c256:	5c28      	ldrb	r0, [r5, r0]
    c258:	b2c0      	uxtb	r0, r0
    c25a:	e7d5      	b.n	c208 <HardwareSerial::read()+0x2a>
		else avail = rx_buffer_total_size_ + head - tail;
    c25c:	440c      	add	r4, r1
    c25e:	1ae3      	subs	r3, r4, r3
    c260:	e7da      	b.n	c218 <HardwareSerial::read()+0x3a>

0000c262 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
    c262:	b510      	push	{r4, lr}
    c264:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    c266:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    c26a:	b12b      	cbz	r3, c278 <HardwareSerial::flush()+0x16>
    c26c:	f002 feb6 	bl	efdc <yield>
    c270:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    c274:	2b00      	cmp	r3, #0
    c276:	d1f9      	bne.n	c26c <HardwareSerial::flush()+0xa>
}
    c278:	bd10      	pop	{r4, pc}
	...

0000c27c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    c27c:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    c280:	b99b      	cbnz	r3, c2aa <nvic_execution_priority()+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c282:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    c286:	b998      	cbnz	r0, c2b0 <nvic_execution_priority()+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c288:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    c28c:	b123      	cbz	r3, c298 <nvic_execution_priority()+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    c28e:	2b0f      	cmp	r3, #15
    c290:	d904      	bls.n	c29c <nvic_execution_priority()+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    c292:	4a08      	ldr	r2, [pc, #32]	; (c2b4 <nvic_execution_priority()+0x38>)
    c294:	5cd0      	ldrb	r0, [r2, r3]
    c296:	e001      	b.n	c29c <nvic_execution_priority()+0x20>
	uint32_t priority=256;
    c298:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    c29c:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    c2a0:	b13b      	cbz	r3, c2b2 <nvic_execution_priority()+0x36>
    c2a2:	4298      	cmp	r0, r3
    c2a4:	bf28      	it	cs
    c2a6:	4618      	movcs	r0, r3
	return priority;
    c2a8:	4770      	bx	lr
	if (faultmask) return -1;
    c2aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c2ae:	4770      	bx	lr
	if (primask) return 0;
    c2b0:	2000      	movs	r0, #0
}
    c2b2:	4770      	bx	lr
    c2b4:	e000e3f0 	.word	0xe000e3f0

0000c2b8 <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    c2b8:	b570      	push	{r4, r5, r6, lr}
    c2ba:	4604      	mov	r4, r0
    c2bc:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c2be:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c2c0:	b113      	cbz	r3, c2c8 <HardwareSerial::write9bit(unsigned long)+0x10>
    c2c2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c2c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    c2c8:	7ea3      	ldrb	r3, [r4, #26]
    c2ca:	b133      	cbz	r3, c2da <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    c2cc:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    c2ce:	6922      	ldr	r2, [r4, #16]
    c2d0:	6993      	ldr	r3, [r2, #24]
    c2d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c2d6:	6193      	str	r3, [r2, #24]
		__enable_irq();
    c2d8:	b662      	cpsie	i
		//digitalWriteFast(2, HIGH);
	}

	head = tx_buffer_head_;
    c2da:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    c2de:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    c2e0:	3501      	adds	r5, #1
    c2e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c2e4:	42ab      	cmp	r3, r5
    c2e6:	bf98      	it	ls
    c2e8:	2500      	movls	r5, #0
	while (tx_buffer_tail_ == head) {
    c2ea:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c2ee:	b29b      	uxth	r3, r3
    c2f0:	429d      	cmp	r5, r3
    c2f2:	d01f      	beq.n	c334 <HardwareSerial::write9bit(unsigned long)+0x7c>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    c2f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c2f6:	42ab      	cmp	r3, r5
    c2f8:	d93e      	bls.n	c378 <HardwareSerial::write9bit(unsigned long)+0xc0>
		tx_buffer_[head] = c;
    c2fa:	69e3      	ldr	r3, [r4, #28]
    c2fc:	b2f6      	uxtb	r6, r6
    c2fe:	555e      	strb	r6, [r3, r5]
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
    c300:	b672      	cpsid	i
	transmitting_ = 1;
    c302:	2001      	movs	r0, #1
    c304:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    c308:	b2ad      	uxth	r5, r5
    c30a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    c30e:	6922      	ldr	r2, [r4, #16]
    c310:	6993      	ldr	r3, [r2, #24]
    c312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c316:	6193      	str	r3, [r2, #24]
	__enable_irq();
    c318:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    c31a:	bd70      	pop	{r4, r5, r6, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    c31c:	1a59      	subs	r1, r3, r1
    c31e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c320:	5c41      	ldrb	r1, [r0, r1]
    c322:	b2c9      	uxtb	r1, r1
    c324:	e020      	b.n	c368 <HardwareSerial::write9bit(unsigned long)+0xb0>
		} else if (priority >= 256) 
    c326:	28ff      	cmp	r0, #255	; 0xff
    c328:	dc23      	bgt.n	c372 <HardwareSerial::write9bit(unsigned long)+0xba>
	while (tx_buffer_tail_ == head) {
    c32a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c32e:	b29b      	uxth	r3, r3
    c330:	42ab      	cmp	r3, r5
    c332:	d1df      	bne.n	c2f4 <HardwareSerial::write9bit(unsigned long)+0x3c>
		int priority = nvic_execution_priority();
    c334:	f7ff ffa2 	bl	c27c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    c338:	6963      	ldr	r3, [r4, #20]
    c33a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    c33e:	4283      	cmp	r3, r0
    c340:	dbf1      	blt.n	c326 <HardwareSerial::write9bit(unsigned long)+0x6e>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    c342:	6922      	ldr	r2, [r4, #16]
    c344:	6953      	ldr	r3, [r2, #20]
    c346:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c34a:	d0ee      	beq.n	c32a <HardwareSerial::write9bit(unsigned long)+0x72>
				uint32_t tail = tx_buffer_tail_;
    c34c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c350:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    c352:	3301      	adds	r3, #1
    c354:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c356:	4299      	cmp	r1, r3
    c358:	bf98      	it	ls
    c35a:	2300      	movls	r3, #0
				if (tail < tx_buffer_size_) {
    c35c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    c35e:	4299      	cmp	r1, r3
    c360:	d9dc      	bls.n	c31c <HardwareSerial::write9bit(unsigned long)+0x64>
					n = tx_buffer_[tail];
    c362:	69e1      	ldr	r1, [r4, #28]
    c364:	5cc9      	ldrb	r1, [r1, r3]
    c366:	b2c9      	uxtb	r1, r1
				port->DATA  = n;
    c368:	61d1      	str	r1, [r2, #28]
				tx_buffer_tail_ = tail;
    c36a:	b29b      	uxth	r3, r3
    c36c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    c370:	e7db      	b.n	c32a <HardwareSerial::write9bit(unsigned long)+0x72>
			yield(); // wait
    c372:	f002 fe33 	bl	efdc <yield>
    c376:	e7d8      	b.n	c32a <HardwareSerial::write9bit(unsigned long)+0x72>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    c378:	1aeb      	subs	r3, r5, r3
    c37a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c37c:	b2f6      	uxtb	r6, r6
    c37e:	54d6      	strb	r6, [r2, r3]
    c380:	e7be      	b.n	c300 <HardwareSerial::write9bit(unsigned long)+0x48>

0000c382 <HardwareSerial::write(unsigned char)>:
{
    c382:	b508      	push	{r3, lr}
	return write9bit(c);
    c384:	f7ff ff98 	bl	c2b8 <HardwareSerial::write9bit(unsigned long)>
}
    c388:	bd08      	pop	{r3, pc}

0000c38a <HardwareSerial::IRQHandler()>:

void HardwareSerial::IRQHandler() 
{
    c38a:	b530      	push	{r4, r5, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    c38c:	6903      	ldr	r3, [r0, #16]
    c38e:	695a      	ldr	r2, [r3, #20]
    c390:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    c394:	d047      	beq.n	c426 <HardwareSerial::IRQHandler()+0x9c>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    c396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c398:	f3c3 6c02 	ubfx	ip, r3, #24, #3
		if (avail) {
    c39c:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    c3a0:	d038      	beq.n	c414 <HardwareSerial::IRQHandler()+0x8a>
			uint32_t newhead;
			head = rx_buffer_head_;
    c3a2:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
    c3a6:	fa1f fe8e 	uxth.w	lr, lr
			tail = rx_buffer_tail_;
    c3aa:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    c3ae:	b2a4      	uxth	r4, r4
    c3b0:	e009      	b.n	c3c6 <HardwareSerial::IRQHandler()+0x3c>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c3b2:	1a59      	subs	r1, r3, r1
    c3b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c3b6:	b2d2      	uxtb	r2, r2
    c3b8:	546a      	strb	r2, [r5, r1]
					head = newhead;
    c3ba:	469e      	mov	lr, r3
					}
				}
			} while (--avail > 0) ;
    c3bc:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c3c0:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    c3c4:	d016      	beq.n	c3f4 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c3c6:	6903      	ldr	r3, [r0, #16]
    c3c8:	69da      	ldr	r2, [r3, #28]
				newhead = head + 1;
    c3ca:	f10e 0301 	add.w	r3, lr, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    c3ce:	6b81      	ldr	r1, [r0, #56]	; 0x38
    c3d0:	4299      	cmp	r1, r3
    c3d2:	bf98      	it	ls
    c3d4:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    c3d6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    c3da:	b289      	uxth	r1, r1
    c3dc:	4299      	cmp	r1, r3
    c3de:	d0ed      	beq.n	c3bc <HardwareSerial::IRQHandler()+0x32>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c3e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
					if (newhead < rx_buffer_size_) {
    c3e4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c3e6:	4299      	cmp	r1, r3
    c3e8:	d9e3      	bls.n	c3b2 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_[head] = n;
    c3ea:	6a01      	ldr	r1, [r0, #32]
    c3ec:	b2d2      	uxtb	r2, r2
    c3ee:	54ca      	strb	r2, [r1, r3]
					head = newhead;
    c3f0:	469e      	mov	lr, r3
    c3f2:	e7e3      	b.n	c3bc <HardwareSerial::IRQHandler()+0x32>
			rx_buffer_head_ = head;
    c3f4:	fa1f f38e 	uxth.w	r3, lr
    c3f8:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    c3fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
    c3fe:	b14b      	cbz	r3, c414 <HardwareSerial::IRQHandler()+0x8a>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    c400:	45a6      	cmp	lr, r4
    c402:	d320      	bcc.n	c446 <HardwareSerial::IRQHandler()+0xbc>
    c404:	ebae 0e04 	sub.w	lr, lr, r4
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
    c408:	6c02      	ldr	r2, [r0, #64]	; 0x40
    c40a:	4572      	cmp	r2, lr
    c40c:	d802      	bhi.n	c414 <HardwareSerial::IRQHandler()+0x8a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    c40e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    c410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    c414:	6903      	ldr	r3, [r0, #16]
    c416:	695a      	ldr	r2, [r3, #20]
    c418:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    c41c:	d003      	beq.n	c426 <HardwareSerial::IRQHandler()+0x9c>
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    c41e:	695a      	ldr	r2, [r3, #20]
    c420:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c424:	615a      	str	r2, [r3, #20]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    c426:	6903      	ldr	r3, [r0, #16]
    c428:	699d      	ldr	r5, [r3, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    c42a:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    c42e:	d02c      	beq.n	c48a <HardwareSerial::IRQHandler()+0x100>
    c430:	695b      	ldr	r3, [r3, #20]
    c432:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c436:	d028      	beq.n	c48a <HardwareSerial::IRQHandler()+0x100>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    c438:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    c43c:	b2a4      	uxth	r4, r4
		tail = tx_buffer_tail_;
    c43e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    c442:	b29b      	uxth	r3, r3
    c444:	e00e      	b.n	c464 <HardwareSerial::IRQHandler()+0xda>
				else avail = rx_buffer_total_size_ + head - tail;
    c446:	6b82      	ldr	r2, [r0, #56]	; 0x38
    c448:	1b12      	subs	r2, r2, r4
    c44a:	4496      	add	lr, r2
    c44c:	e7dc      	b.n	c408 <HardwareSerial::IRQHandler()+0x7e>
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    c44e:	1a9a      	subs	r2, r3, r2
    c450:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c452:	5c8a      	ldrb	r2, [r1, r2]
    c454:	b2d2      	uxtb	r2, r2
			}
			port->DATA = n;
    c456:	6901      	ldr	r1, [r0, #16]
    c458:	61ca      	str	r2, [r1, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    c45a:	6902      	ldr	r2, [r0, #16]
    c45c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c45e:	f412 6f80 	tst.w	r2, #1024	; 0x400
    c462:	d10d      	bne.n	c480 <HardwareSerial::IRQHandler()+0xf6>
			if (head == tail) break;
    c464:	42a3      	cmp	r3, r4
    c466:	d02f      	beq.n	c4c8 <HardwareSerial::IRQHandler()+0x13e>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c468:	3301      	adds	r3, #1
    c46a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    c46c:	429a      	cmp	r2, r3
    c46e:	bf98      	it	ls
    c470:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    c472:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    c474:	429a      	cmp	r2, r3
    c476:	d9ea      	bls.n	c44e <HardwareSerial::IRQHandler()+0xc4>
				n = tx_buffer_[tail];
    c478:	69c2      	ldr	r2, [r0, #28]
    c47a:	5cd2      	ldrb	r2, [r2, r3]
    c47c:	b2d2      	uxtb	r2, r2
    c47e:	e7ea      	b.n	c456 <HardwareSerial::IRQHandler()+0xcc>
		tx_buffer_tail_ = tail;
    c480:	b29a      	uxth	r2, r3
    c482:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		if (head == tail) {
    c486:	42a3      	cmp	r3, r4
    c488:	d020      	beq.n	c4cc <HardwareSerial::IRQHandler()+0x142>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    c48a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
    c48e:	d01a      	beq.n	c4c6 <HardwareSerial::IRQHandler()+0x13c>
    c490:	6903      	ldr	r3, [r0, #16]
    c492:	695b      	ldr	r3, [r3, #20]
    c494:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    c498:	d015      	beq.n	c4c6 <HardwareSerial::IRQHandler()+0x13c>
	{
		transmitting_ = 0;
    c49a:	2300      	movs	r3, #0
    c49c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c4a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c4a2:	b113      	cbz	r3, c4aa <HardwareSerial::IRQHandler()+0x120>
    c4a4:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    c4aa:	7e83      	ldrb	r3, [r0, #26]
    c4ac:	b133      	cbz	r3, c4bc <HardwareSerial::IRQHandler()+0x132>
			__disable_irq();
    c4ae:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    c4b0:	6902      	ldr	r2, [r0, #16]
    c4b2:	6993      	ldr	r3, [r2, #24]
    c4b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    c4b8:	6193      	str	r3, [r2, #24]
			__enable_irq();
    c4ba:	b662      	cpsie	i
			//digitalWriteFast(2, LOW);
		}

		port->CTRL &= ~LPUART_CTRL_TCIE;
    c4bc:	6902      	ldr	r2, [r0, #16]
    c4be:	6993      	ldr	r3, [r2, #24]
    c4c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    c4c4:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    c4c6:	bd30      	pop	{r4, r5, pc}
		tx_buffer_tail_ = tail;
    c4c8:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    c4cc:	6902      	ldr	r2, [r0, #16]
    c4ce:	6993      	ldr	r3, [r2, #24]
    c4d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    c4d4:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    c4d6:	6902      	ldr	r2, [r0, #16]
    c4d8:	6993      	ldr	r3, [r2, #24]
    c4da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    c4de:	6193      	str	r3, [r2, #24]
    c4e0:	e7d3      	b.n	c48a <HardwareSerial::IRQHandler()+0x100>
	...

0000c4e4 <HardwareSerial::addToSerialEventsList()>:


void HardwareSerial::addToSerialEventsList() {
    c4e4:	b410      	push	{r4}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4e6:	4b0e      	ldr	r3, [pc, #56]	; (c520 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c4e8:	781c      	ldrb	r4, [r3, #0]
    c4ea:	b15c      	cbz	r4, c504 <HardwareSerial::addToSerialEventsList()+0x20>
    c4ec:	490d      	ldr	r1, [pc, #52]	; (c524 <HardwareSerial::addToSerialEventsList()+0x40>)
    c4ee:	1f0b      	subs	r3, r1, #4
    c4f0:	1e62      	subs	r2, r4, #1
    c4f2:	b2d2      	uxtb	r2, r2
    c4f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c4f8:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c4fc:	4282      	cmp	r2, r0
    c4fe:	d00c      	beq.n	c51a <HardwareSerial::addToSerialEventsList()+0x36>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c500:	428b      	cmp	r3, r1
    c502:	d1f9      	bne.n	c4f8 <HardwareSerial::addToSerialEventsList()+0x14>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c504:	1c62      	adds	r2, r4, #1
    c506:	4b06      	ldr	r3, [pc, #24]	; (c520 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c508:	701a      	strb	r2, [r3, #0]
    c50a:	4b06      	ldr	r3, [pc, #24]	; (c524 <HardwareSerial::addToSerialEventsList()+0x40>)
    c50c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c510:	4a05      	ldr	r2, [pc, #20]	; (c528 <HardwareSerial::addToSerialEventsList()+0x44>)
    c512:	7813      	ldrb	r3, [r2, #0]
    c514:	f043 0302 	orr.w	r3, r3, #2
    c518:	7013      	strb	r3, [r2, #0]
}
    c51a:	f85d 4b04 	ldr.w	r4, [sp], #4
    c51e:	4770      	bx	lr
    c520:	200053c5 	.word	0x200053c5
    c524:	20004c78 	.word	0x20004c78
    c528:	20003a5b 	.word	0x20003a5b

0000c52c <HardwareSerial::begin(unsigned long, unsigned short)>:
{
    c52c:	b570      	push	{r4, r5, r6, lr}
    c52e:	ee07 1a90 	vmov	s15, r1
    c532:	4614      	mov	r4, r2
	float base = (float)UART_CLOCK / (float)baud;
    c534:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c538:	ed9f 7a93 	vldr	s14, [pc, #588]	; c788 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>
    c53c:	ee87 5a27 	vdiv.f32	s10, s14, s15
	for (int osr=4; osr <= 32; osr++) {
    c540:	2104      	movs	r1, #4
	int bestosr = 4;
    c542:	468e      	mov	lr, r1
	int bestdiv = 1;
    c544:	2201      	movs	r2, #1
	float besterr = 1e20;
    c546:	ed9f 6a91 	vldr	s12, [pc, #580]	; c78c <HardwareSerial::begin(unsigned long, unsigned short)+0x260>
		int divint = (int)(div + 0.5f);
    c54a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c54e:	f641 7cff 	movw	ip, #8191	; 0x1fff
    c552:	e002      	b.n	c55a <HardwareSerial::begin(unsigned long, unsigned short)+0x2e>
	for (int osr=4; osr <= 32; osr++) {
    c554:	3101      	adds	r1, #1
    c556:	2921      	cmp	r1, #33	; 0x21
    c558:	d02a      	beq.n	c5b0 <HardwareSerial::begin(unsigned long, unsigned short)+0x84>
		float div = base / (float)osr;
    c55a:	ee07 1a90 	vmov	s15, r1
    c55e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c562:	ee85 7a27 	vdiv.f32	s14, s10, s15
		int divint = (int)(div + 0.5f);
    c566:	ee77 7a25 	vadd.f32	s15, s14, s11
    c56a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c56e:	ee17 3a90 	vmov	r3, s15
    c572:	4563      	cmp	r3, ip
    c574:	bfa8      	it	ge
    c576:	4663      	movge	r3, ip
    c578:	2b01      	cmp	r3, #1
    c57a:	bfb8      	it	lt
    c57c:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    c57e:	ee07 3a90 	vmov	s15, r3
    c582:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    c586:	ee76 6ac7 	vsub.f32	s13, s13, s14
    c58a:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c58e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    c592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c596:	bf48      	it	mi
    c598:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c59c:	eef4 7ac6 	vcmpe.f32	s15, s12
    c5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c5a4:	d8d6      	bhi.n	c554 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
    c5a6:	468e      	mov	lr, r1
			bestdiv = divint;
    c5a8:	461a      	mov	r2, r3
			besterr = err;
    c5aa:	eeb0 6a67 	vmov.f32	s12, s15
    c5ae:	e7d1      	b.n	c554 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    c5b0:	2300      	movs	r3, #0
    c5b2:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    c5b6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
    c5ba:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c5be:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c5c2:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c5c4:	6941      	ldr	r1, [r0, #20]
    c5c6:	f8b1 605c 	ldrh.w	r6, [r1, #92]	; 0x5c
    c5ca:	1bae      	subs	r6, r5, r6
    c5cc:	63c6      	str	r6, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c5ce:	f8b1 605e 	ldrh.w	r6, [r1, #94]	; 0x5e
    c5d2:	1bad      	subs	r5, r5, r6
    c5d4:	6405      	str	r5, [r0, #64]	; 0x40
	transmitting_ = 0;
    c5d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	hardware->ccm_register |= hardware->ccm_value;
    c5da:	690d      	ldr	r5, [r1, #16]
    c5dc:	682b      	ldr	r3, [r5, #0]
    c5de:	6949      	ldr	r1, [r1, #20]
    c5e0:	430b      	orrs	r3, r1
    c5e2:	602b      	str	r3, [r5, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    c5e4:	f404 7300 	and.w	r3, r4, #512	; 0x200
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	bf14      	ite	ne
    c5ec:	2301      	movne	r3, #1
    c5ee:	2300      	moveq	r3, #0
    c5f0:	7683      	strb	r3, [r0, #26]
	if (!half_duplex_mode_)  {
    c5f2:	f040 80aa 	bne.w	c74a <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c5f6:	4966      	ldr	r1, [pc, #408]	; (c790 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c5f8:	6943      	ldr	r3, [r0, #20]
    c5fa:	7e05      	ldrb	r5, [r0, #24]
    c5fc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c600:	7e1b      	ldrb	r3, [r3, #24]
    c602:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c606:	689b      	ldr	r3, [r3, #8]
    c608:	4d62      	ldr	r5, [pc, #392]	; (c794 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    c60a:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c60c:	6943      	ldr	r3, [r0, #20]
    c60e:	7e05      	ldrb	r5, [r0, #24]
    c610:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c614:	7e1d      	ldrb	r5, [r3, #24]
    c616:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c61a:	6849      	ldr	r1, [r1, #4]
    c61c:	69db      	ldr	r3, [r3, #28]
    c61e:	600b      	str	r3, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c620:	7e01      	ldrb	r1, [r0, #24]
    c622:	6943      	ldr	r3, [r0, #20]
    c624:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c628:	6a19      	ldr	r1, [r3, #32]
    c62a:	b109      	cbz	r1, c630 <HardwareSerial::begin(unsigned long, unsigned short)+0x104>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c62e:	600b      	str	r3, [r1, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c630:	4957      	ldr	r1, [pc, #348]	; (c790 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c632:	6943      	ldr	r3, [r0, #20]
    c634:	7e45      	ldrb	r5, [r0, #25]
    c636:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c63a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c63e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c642:	689b      	ldr	r3, [r3, #8]
    c644:	25d9      	movs	r5, #217	; 0xd9
    c646:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c648:	6943      	ldr	r3, [r0, #20]
    c64a:	7e45      	ldrb	r5, [r0, #25]
    c64c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c650:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c654:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c658:	6849      	ldr	r1, [r1, #4]
    c65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c65c:	600b      	str	r3, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    c65e:	7e41      	ldrb	r1, [r0, #25]
    c660:	6943      	ldr	r3, [r0, #20]
    c662:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c666:	6c19      	ldr	r1, [r3, #64]	; 0x40
    c668:	b109      	cbz	r1, c66e <HardwareSerial::begin(unsigned long, unsigned short)+0x142>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    c66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c66c:	600b      	str	r3, [r1, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c66e:	6901      	ldr	r1, [r0, #16]
    c670:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    c674:	061b      	lsls	r3, r3, #24
    c676:	f003 5cf8 	and.w	ip, r3, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    c67a:	f1be 0f08 	cmp.w	lr, #8
    c67e:	bfcc      	ite	gt
    c680:	f04f 0e00 	movgt.w	lr, #0
    c684:	f04f 0e01 	movle.w	lr, #1
    c688:	ea42 434e 	orr.w	r3, r2, lr, lsl #17
    c68c:	ea4c 0303 	orr.w	r3, ip, r3
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c690:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    c692:	6903      	ldr	r3, [r0, #16]
    c694:	2200      	movs	r2, #0
    c696:	60da      	str	r2, [r3, #12]
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c698:	6943      	ldr	r3, [r0, #20]
    c69a:	6859      	ldr	r1, [r3, #4]
    c69c:	785b      	ldrb	r3, [r3, #1]
    c69e:	3310      	adds	r3, #16
    c6a0:	4a3d      	ldr	r2, [pc, #244]	; (c798 <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    c6a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c6a6:	6943      	ldr	r3, [r0, #20]
    c6a8:	785a      	ldrb	r2, [r3, #1]
    c6aa:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
    c6ae:	4b3b      	ldr	r3, [pc, #236]	; (c79c <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    c6b0:	54d1      	strb	r1, [r2, r3]
	NVIC_ENABLE_IRQ(hardware->irq);
    c6b2:	6943      	ldr	r3, [r0, #20]
    c6b4:	785a      	ldrb	r2, [r3, #1]
    c6b6:	4b3a      	ldr	r3, [pc, #232]	; (c7a0 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
    c6b8:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c6bc:	009b      	lsls	r3, r3, #2
    c6be:	f002 021f 	and.w	r2, r2, #31
    c6c2:	2101      	movs	r1, #1
    c6c4:	fa01 f202 	lsl.w	r2, r1, r2
    c6c8:	601a      	str	r2, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c6ca:	6903      	ldr	r3, [r0, #16]
    c6cc:	f04f 1202 	mov.w	r2, #131074	; 0x20002
    c6d0:	62da      	str	r2, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c6d2:	6902      	ldr	r2, [r0, #16]
    c6d4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c6d6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    c6da:	6293      	str	r3, [r2, #40]	; 0x28
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c6dc:	f004 0203 	and.w	r2, r4, #3
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c6e0:	f014 0f04 	tst.w	r4, #4
    c6e4:	d14a      	bne.n	c77c <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c6e6:	f442 1370 	orr.w	r3, r2, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c6ea:	f004 020f 	and.w	r2, r4, #15
    c6ee:	2a04      	cmp	r2, #4
    c6f0:	bf08      	it	eq
    c6f2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c6f6:	f014 0f20 	tst.w	r4, #32
    c6fa:	bf18      	it	ne
    c6fc:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    c700:	7e82      	ldrb	r2, [r0, #26]
    c702:	b10a      	cbz	r2, c708 <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    c704:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	port->CTRL = ctrl;
    c708:	6902      	ldr	r2, [r0, #16]
    c70a:	6193      	str	r3, [r2, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c70c:	f014 0f08 	tst.w	r4, #8
    c710:	d004      	beq.n	c71c <HardwareSerial::begin(unsigned long, unsigned short)+0x1f0>
    c712:	6902      	ldr	r2, [r0, #16]
    c714:	6913      	ldr	r3, [r2, #16]
    c716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c71a:	6113      	str	r3, [r2, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c71c:	6902      	ldr	r2, [r0, #16]
    c71e:	6953      	ldr	r3, [r2, #20]
    c720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c724:	f014 0f10 	tst.w	r4, #16
    c728:	bf18      	it	ne
    c72a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    c72e:	6153      	str	r3, [r2, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    c730:	f414 7f80 	tst.w	r4, #256	; 0x100
    c734:	d004      	beq.n	c740 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    c736:	6902      	ldr	r2, [r0, #16]
    c738:	6913      	ldr	r3, [r2, #16]
    c73a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c73e:	6113      	str	r3, [r2, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c740:	6943      	ldr	r3, [r0, #20]
    c742:	68db      	ldr	r3, [r3, #12]
    c744:	781b      	ldrb	r3, [r3, #0]
    c746:	b1e3      	cbz	r3, c782 <HardwareSerial::begin(unsigned long, unsigned short)+0x256>
};
    c748:	bd70      	pop	{r4, r5, r6, pc}
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    c74a:	4911      	ldr	r1, [pc, #68]	; (c790 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c74c:	6943      	ldr	r3, [r0, #20]
    c74e:	7e45      	ldrb	r5, [r0, #25]
    c750:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c758:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c75c:	689b      	ldr	r3, [r3, #8]
    c75e:	f24f 05d9 	movw	r5, #61657	; 0xf0d9
    c762:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c764:	6943      	ldr	r3, [r0, #20]
    c766:	7e45      	ldrb	r5, [r0, #25]
    c768:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c76c:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c770:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c774:	6849      	ldr	r1, [r1, #4]
    c776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c778:	600b      	str	r3, [r1, #0]
    c77a:	e770      	b.n	c65e <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c77c:	4b09      	ldr	r3, [pc, #36]	; (c7a4 <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    c77e:	4313      	orrs	r3, r2
    c780:	e7b3      	b.n	c6ea <HardwareSerial::begin(unsigned long, unsigned short)+0x1be>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c782:	f7ff feaf 	bl	c4e4 <HardwareSerial::addToSerialEventsList()>
};
    c786:	e7df      	b.n	c748 <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
    c788:	4bb71b00 	.word	0x4bb71b00
    c78c:	60ad78ec 	.word	0x60ad78ec
    c790:	2000293c 	.word	0x2000293c
    c794:	0001f038 	.word	0x0001f038
    c798:	20003c00 	.word	0x20003c00
    c79c:	e000e400 	.word	0xe000e400
    c7a0:	38003840 	.word	0x38003840
    c7a4:	003c0010 	.word	0x003c0010

0000c7a8 <IRQHandler_Serial5>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
    c7a8:	b508      	push	{r3, lr}
	Serial5.IRQHandler();
    c7aa:	4802      	ldr	r0, [pc, #8]	; (c7b4 <IRQHandler_Serial5+0xc>)
    c7ac:	f7ff fded 	bl	c38a <HardwareSerial::IRQHandler()>
}
    c7b0:	bd08      	pop	{r3, pc}
    c7b2:	bf00      	nop
    c7b4:	20004724 	.word	0x20004724

0000c7b8 <_GLOBAL__sub_I_IRQHandler_Serial5>:
    c7b8:	4b16      	ldr	r3, [pc, #88]	; (c814 <_GLOBAL__sub_I_IRQHandler_Serial5+0x5c>)
    c7ba:	2200      	movs	r2, #0
    c7bc:	605a      	str	r2, [r3, #4]
    c7be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c7c2:	6099      	str	r1, [r3, #8]
    c7c4:	731a      	strb	r2, [r3, #12]
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7c6:	4914      	ldr	r1, [pc, #80]	; (c818 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    c7c8:	6019      	str	r1, [r3, #0]
		port(myport), hardware(myhardware),
    c7ca:	4914      	ldr	r1, [pc, #80]	; (c81c <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    c7cc:	6119      	str	r1, [r3, #16]
    c7ce:	4914      	ldr	r1, [pc, #80]	; (c820 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    c7d0:	6159      	str	r1, [r3, #20]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7d2:	761a      	strb	r2, [r3, #24]
    c7d4:	765a      	strb	r2, [r3, #25]
    c7d6:	769a      	strb	r2, [r3, #26]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c7d8:	4912      	ldr	r1, [pc, #72]	; (c824 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    c7da:	61d9      	str	r1, [r3, #28]
    c7dc:	4912      	ldr	r1, [pc, #72]	; (c828 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    c7de:	6219      	str	r1, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7e0:	625a      	str	r2, [r3, #36]	; 0x24
    c7e2:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c7e4:	2028      	movs	r0, #40	; 0x28
    c7e6:	62d8      	str	r0, [r3, #44]	; 0x2c
    c7e8:	2140      	movs	r1, #64	; 0x40
    c7ea:	6319      	str	r1, [r3, #48]	; 0x30
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7ec:	6358      	str	r0, [r3, #52]	; 0x34
    c7ee:	6399      	str	r1, [r3, #56]	; 0x38
    c7f0:	63da      	str	r2, [r3, #60]	; 0x3c
    c7f2:	641a      	str	r2, [r3, #64]	; 0x40
    c7f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    c7f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    c7fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    c800:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    c804:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    c808:	651a      	str	r2, [r3, #80]	; 0x50
    c80a:	655a      	str	r2, [r3, #84]	; 0x54
    c80c:	659a      	str	r2, [r3, #88]	; 0x58
    c80e:	65da      	str	r2, [r3, #92]	; 0x5c
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    c810:	4770      	bx	lr
    c812:	bf00      	nop
    c814:	20004724 	.word	0x20004724
    c818:	2000243c 	.word	0x2000243c
    c81c:	401a0000 	.word	0x401a0000
    c820:	2000337c 	.word	0x2000337c
    c824:	20004b94 	.word	0x20004b94
    c828:	20004b54 	.word	0x20004b54

0000c82c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c82e:	b179      	cbz	r1, c850 <Print::write(unsigned char const*, unsigned int)+0x24>
    c830:	4606      	mov	r6, r0
    c832:	460c      	mov	r4, r1
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c834:	b172      	cbz	r2, c854 <Print::write(unsigned char const*, unsigned int)+0x28>
    c836:	188f      	adds	r7, r1, r2
	size_t count = 0;
    c838:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    c83a:	6833      	ldr	r3, [r6, #0]
    c83c:	681b      	ldr	r3, [r3, #0]
    c83e:	f814 1b01 	ldrb.w	r1, [r4], #1
    c842:	4630      	mov	r0, r6
    c844:	4798      	blx	r3
    c846:	4405      	add	r5, r0
    c848:	42a7      	cmp	r7, r4
    c84a:	d1f6      	bne.n	c83a <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    c84c:	4628      	mov	r0, r5
    c84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    c850:	2500      	movs	r5, #0
    c852:	e7fb      	b.n	c84c <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
    c854:	4615      	mov	r5, r2
    c856:	e7f9      	b.n	c84c <Print::write(unsigned char const*, unsigned int)+0x20>

0000c858 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    c858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c85c:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
    c85e:	688c      	ldr	r4, [r1, #8]
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c860:	b1ec      	cbz	r4, c89e <Print::print(String const&)+0x46>
    c862:	4606      	mov	r6, r0
    c864:	4688      	mov	r8, r1
	unsigned int index = 0;
    c866:	2500      	movs	r5, #0
	size_t count = 0;
    c868:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    c86a:	f04f 0921 	mov.w	r9, #33	; 0x21
    c86e:	462b      	mov	r3, r5
    c870:	464a      	mov	r2, r9
    c872:	a901      	add	r1, sp, #4
    c874:	4640      	mov	r0, r8
    c876:	f000 fadd 	bl	ce34 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    c87a:	4622      	mov	r2, r4
    c87c:	2c20      	cmp	r4, #32
    c87e:	bf28      	it	cs
    c880:	2220      	movcs	r2, #32
		index += nbytes;
    c882:	4415      	add	r5, r2
		len -= nbytes;
    c884:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    c886:	6833      	ldr	r3, [r6, #0]
    c888:	685b      	ldr	r3, [r3, #4]
    c88a:	a901      	add	r1, sp, #4
    c88c:	4630      	mov	r0, r6
    c88e:	4798      	blx	r3
    c890:	4407      	add	r7, r0
	while (len > 0) {
    c892:	2c00      	cmp	r4, #0
    c894:	d1eb      	bne.n	c86e <Print::print(String const&)+0x16>
	}
	return count;
}
    c896:	4638      	mov	r0, r7
    c898:	b00b      	add	sp, #44	; 0x2c
    c89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
    c89e:	4627      	mov	r7, r4
	return count;
    c8a0:	e7f9      	b.n	c896 <Print::print(String const&)+0x3e>

0000c8a2 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    c8a2:	b500      	push	{lr}
    c8a4:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c8a6:	f640 230d 	movw	r3, #2573	; 0xa0d
    c8aa:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c8ae:	6803      	ldr	r3, [r0, #0]
    c8b0:	685b      	ldr	r3, [r3, #4]
    c8b2:	2202      	movs	r2, #2
    c8b4:	a901      	add	r1, sp, #4
    c8b6:	4798      	blx	r3
}
    c8b8:	b003      	add	sp, #12
    c8ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c8c0 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c8c0:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c8c2:	4b04      	ldr	r3, [pc, #16]	; (c8d4 <_write+0x14>)
    c8c4:	2802      	cmp	r0, #2
    c8c6:	bf88      	it	hi
    c8c8:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c8ca:	6818      	ldr	r0, [r3, #0]
    c8cc:	6844      	ldr	r4, [r0, #4]
    c8ce:	4618      	mov	r0, r3
    c8d0:	47a0      	blx	r4
}
    c8d2:	bd10      	pop	{r4, pc}
    c8d4:	2000336c 	.word	0x2000336c

0000c8d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c8d8:	b530      	push	{r4, r5, lr}
    c8da:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c8dc:	b92a      	cbnz	r2, c8ea <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    c8de:	6803      	ldr	r3, [r0, #0]
    c8e0:	681b      	ldr	r3, [r3, #0]
    c8e2:	b2c9      	uxtb	r1, r1
    c8e4:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c8e6:	b00b      	add	sp, #44	; 0x2c
    c8e8:	bd30      	pop	{r4, r5, pc}
    c8ea:	4696      	mov	lr, r2
		base = 10;
    c8ec:	2a01      	cmp	r2, #1
    c8ee:	bf14      	ite	ne
    c8f0:	4696      	movne	lr, r2
    c8f2:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
    c8f6:	b9b9      	cbnz	r1, c928 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
    c8f8:	2230      	movs	r2, #48	; 0x30
    c8fa:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c8fe:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
    c902:	b14b      	cbz	r3, c918 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
    c904:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c908:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
    c90c:	f10c 0328 	add.w	r3, ip, #40	; 0x28
    c910:	446b      	add	r3, sp
    c912:	222d      	movs	r2, #45	; 0x2d
    c914:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    c918:	6803      	ldr	r3, [r0, #0]
    c91a:	685b      	ldr	r3, [r3, #4]
    c91c:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
    c920:	a901      	add	r1, sp, #4
    c922:	4461      	add	r1, ip
    c924:	4798      	blx	r3
    c926:	e7de      	b.n	c8e6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
    c928:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
    c92c:	4674      	mov	r4, lr
    c92e:	e004      	b.n	c93a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
    c930:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c934:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
    c938:	4611      	mov	r1, r2
			digit = n % base;
    c93a:	fbb1 f2fe 	udiv	r2, r1, lr
    c93e:	fb0e 1212 	mls	r2, lr, r2, r1
    c942:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c944:	2a09      	cmp	r2, #9
    c946:	bf94      	ite	ls
    c948:	3230      	addls	r2, #48	; 0x30
    c94a:	3237      	addhi	r2, #55	; 0x37
    c94c:	b2d2      	uxtb	r2, r2
    c94e:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    c952:	446d      	add	r5, sp
    c954:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    c958:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
    c95c:	428c      	cmp	r4, r1
    c95e:	d9e7      	bls.n	c930 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
    c960:	e7cf      	b.n	c902 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>

0000c962 <Print::print(long)>:
{
    c962:	b508      	push	{r3, lr}
	if (n < 0) {
    c964:	2900      	cmp	r1, #0
    c966:	db04      	blt.n	c972 <Print::print(long)+0x10>
	uint8_t sign=0;
    c968:	2300      	movs	r3, #0
	return printNumber(n, 10, sign);
    c96a:	220a      	movs	r2, #10
    c96c:	f7ff ffb4 	bl	c8d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}
    c970:	bd08      	pop	{r3, pc}
		n = -n;
    c972:	4249      	negs	r1, r1
		sign = '-';
    c974:	232d      	movs	r3, #45	; 0x2d
    c976:	e7f8      	b.n	c96a <Print::print(long)+0x8>

0000c978 <Stream::timedPeek()>:
{
    c978:	b570      	push	{r4, r5, r6, lr}
    c97a:	4604      	mov	r4, r0
    c97c:	4b09      	ldr	r3, [pc, #36]	; (c9a4 <Stream::timedPeek()+0x2c>)
    c97e:	681e      	ldr	r6, [r3, #0]
    c980:	461d      	mov	r5, r3
    c = peek();
    c982:	6823      	ldr	r3, [r4, #0]
    c984:	699b      	ldr	r3, [r3, #24]
    c986:	4620      	mov	r0, r4
    c988:	4798      	blx	r3
    if (c >= 0) return c;
    c98a:	2800      	cmp	r0, #0
    c98c:	da08      	bge.n	c9a0 <Stream::timedPeek()+0x28>
    yield();
    c98e:	f002 fb25 	bl	efdc <yield>
    c992:	682b      	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c994:	1b9b      	subs	r3, r3, r6
    c996:	68a2      	ldr	r2, [r4, #8]
    c998:	4293      	cmp	r3, r2
    c99a:	d3f2      	bcc.n	c982 <Stream::timedPeek()+0xa>
  return -1;     // -1 indicates timeout
    c99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    c9a0:	bd70      	pop	{r4, r5, r6, pc}
    c9a2:	bf00      	nop
    c9a4:	20005388 	.word	0x20005388

0000c9a8 <Stream::peekNextDigit()>:
{
    c9a8:	b510      	push	{r4, lr}
    c9aa:	4604      	mov	r4, r0
    c9ac:	e003      	b.n	c9b6 <Stream::peekNextDigit()+0xe>
    read();  // discard non-numeric
    c9ae:	6823      	ldr	r3, [r4, #0]
    c9b0:	695b      	ldr	r3, [r3, #20]
    c9b2:	4620      	mov	r0, r4
    c9b4:	4798      	blx	r3
    c = timedPeek();
    c9b6:	4620      	mov	r0, r4
    c9b8:	f7ff ffde 	bl	c978 <Stream::timedPeek()>
    if (c == '-') return c;
    c9bc:	282d      	cmp	r0, #45	; 0x2d
    c9be:	d005      	beq.n	c9cc <Stream::peekNextDigit()+0x24>
    c9c0:	2800      	cmp	r0, #0
    c9c2:	db03      	blt.n	c9cc <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    c9c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c9c8:	2b09      	cmp	r3, #9
    c9ca:	d8f0      	bhi.n	c9ae <Stream::peekNextDigit()+0x6>
}
    c9cc:	bd10      	pop	{r4, pc}
	...

0000c9d0 <Stream::parseFloat(char)>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    c9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9d4:	ed2d 8b02 	vpush	{d8}
    c9d8:	4604      	mov	r4, r0
    c9da:	460d      	mov	r5, r1
  boolean isFraction = false;
  long value = 0;
  int c;
  float fraction = 1.0;

  c = peekNextDigit();
    c9dc:	f7ff ffe4 	bl	c9a8 <Stream::peekNextDigit()>
    // ignore non numeric leading characters
  if(c < 0)
    c9e0:	2800      	cmp	r0, #0
    c9e2:	db45      	blt.n	ca70 <Stream::parseFloat(char)+0xa0>
  float fraction = 1.0;
    c9e4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  long value = 0;
    c9e8:	f04f 0900 	mov.w	r9, #0
  boolean isFraction = false;
    c9ec:	464f      	mov	r7, r9
  boolean isNegative = false;
    c9ee:	46c8      	mov	r8, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    c9f0:	2601      	movs	r6, #1
    else if (c == '.')
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1f;
    c9f2:	eddf 8a21 	vldr	s17, [pc, #132]	; ca78 <Stream::parseFloat(char)+0xa8>
    c9f6:	e00f      	b.n	ca18 <Stream::parseFloat(char)+0x48>
      isNegative = true;
    c9f8:	46b0      	mov	r8, r6
    }
    read();  // consume the character we got with peek
    c9fa:	6823      	ldr	r3, [r4, #0]
    c9fc:	695b      	ldr	r3, [r3, #20]
    c9fe:	4620      	mov	r0, r4
    ca00:	4798      	blx	r3
    c = timedPeek();
    ca02:	4620      	mov	r0, r4
    ca04:	f7ff ffb8 	bl	c978 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
    ca08:	4285      	cmp	r5, r0
    ca0a:	bf18      	it	ne
    ca0c:	282e      	cmpne	r0, #46	; 0x2e
    ca0e:	d003      	beq.n	ca18 <Stream::parseFloat(char)+0x48>
    ca10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ca14:	2b09      	cmp	r3, #9
    ca16:	d816      	bhi.n	ca46 <Stream::parseFloat(char)+0x76>
    if(c == skipChar)
    ca18:	4285      	cmp	r5, r0
    ca1a:	d0ee      	beq.n	c9fa <Stream::parseFloat(char)+0x2a>
    else if(c == '-')
    ca1c:	282d      	cmp	r0, #45	; 0x2d
    ca1e:	d0eb      	beq.n	c9f8 <Stream::parseFloat(char)+0x28>
    else if (c == '.')
    ca20:	282e      	cmp	r0, #46	; 0x2e
    ca22:	d00e      	beq.n	ca42 <Stream::parseFloat(char)+0x72>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    ca24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ca28:	2b09      	cmp	r3, #9
    ca2a:	d8e6      	bhi.n	c9fa <Stream::parseFloat(char)+0x2a>
      value = value * 10 + c - '0';
    ca2c:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    ca30:	eb00 0049 	add.w	r0, r0, r9, lsl #1
    ca34:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
      if(isFraction)
    ca38:	2f00      	cmp	r7, #0
    ca3a:	d0de      	beq.n	c9fa <Stream::parseFloat(char)+0x2a>
         fraction *= 0.1f;
    ca3c:	ee28 8a28 	vmul.f32	s16, s16, s17
    ca40:	e7db      	b.n	c9fa <Stream::parseFloat(char)+0x2a>
      isFraction = true;
    ca42:	4637      	mov	r7, r6
    ca44:	e7d9      	b.n	c9fa <Stream::parseFloat(char)+0x2a>

  if(isNegative)
    ca46:	f1b8 0f00 	cmp.w	r8, #0
    ca4a:	d001      	beq.n	ca50 <Stream::parseFloat(char)+0x80>
    value = -value;
    ca4c:	f1c9 0900 	rsb	r9, r9, #0
  if(isFraction)
    ca50:	b14f      	cbz	r7, ca66 <Stream::parseFloat(char)+0x96>
    return value * fraction;
    ca52:	ee07 9a90 	vmov	s15, r9
    ca56:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    ca5a:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
    ca5e:	ecbd 8b02 	vpop	{d8}
    ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return value;
    ca66:	ee07 9a90 	vmov	s15, r9
    ca6a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    ca6e:	e7f6      	b.n	ca5e <Stream::parseFloat(char)+0x8e>
    return 0; // zero returned if timeout
    ca70:	ed9f 0a02 	vldr	s0, [pc, #8]	; ca7c <Stream::parseFloat(char)+0xac>
    ca74:	e7f3      	b.n	ca5e <Stream::parseFloat(char)+0x8e>
    ca76:	bf00      	nop
    ca78:	3dcccccd 	.word	0x3dcccccd
    ca7c:	00000000 	.word	0x00000000

0000ca80 <Stream::parseFloat()>:
{
    ca80:	b508      	push	{r3, lr}
  return parseFloat(NO_SKIP_CHAR);
    ca82:	2101      	movs	r1, #1
    ca84:	f7ff ffa4 	bl	c9d0 <Stream::parseFloat(char)>
}
    ca88:	bd08      	pop	{r3, pc}
	...

0000ca8c <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    ca90:	4b59      	ldr	r3, [pc, #356]	; (cbf8 <breakTime(unsigned long, DateTimeFields&)+0x16c>)
    ca92:	fba3 4200 	umull	r4, r2, r3, r0
    ca96:	0952      	lsrs	r2, r2, #5
    ca98:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    ca9c:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    caa0:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.min = time % 60;
    caa2:	fba3 0302 	umull	r0, r3, r3, r2
    caa6:	095b      	lsrs	r3, r3, #5
    caa8:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    caac:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
    cab0:	704a      	strb	r2, [r1, #1]
  time /= 60; // now it is hours
  tm.hour = time % 24;
    cab2:	4a52      	ldr	r2, [pc, #328]	; (cbfc <breakTime(unsigned long, DateTimeFields&)+0x170>)
    cab4:	fba2 2e03 	umull	r2, lr, r2, r3
    cab8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    cabc:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
    cac0:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    cac4:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    cac6:	f10e 0204 	add.w	r2, lr, #4
    caca:	4b4d      	ldr	r3, [pc, #308]	; (cc00 <breakTime(unsigned long, DateTimeFields&)+0x174>)
    cacc:	fba3 0302 	umull	r0, r3, r3, r2
    cad0:	1ad0      	subs	r0, r2, r3
    cad2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    cad6:	089b      	lsrs	r3, r3, #2
    cad8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    cadc:	1ad2      	subs	r2, r2, r3
    cade:	70ca      	strb	r2, [r1, #3]

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cae0:	2000      	movs	r0, #0
  days = 0;
    cae2:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cae4:	f240 176d 	movw	r7, #365	; 0x16d
    cae8:	4e46      	ldr	r6, [pc, #280]	; (cc04 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    caea:	f04f 0864 	mov.w	r8, #100	; 0x64
    caee:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
    caf2:	f44f 79c8 	mov.w	r9, #400	; 0x190
    caf6:	e004      	b.n	cb02 <breakTime(unsigned long, DateTimeFields&)+0x76>
    caf8:	463c      	mov	r4, r7
    cafa:	4422      	add	r2, r4
    cafc:	3001      	adds	r0, #1
    cafe:	4596      	cmp	lr, r2
    cb00:	d319      	bcc.n	cb36 <breakTime(unsigned long, DateTimeFields&)+0xaa>
    cb02:	fa5f fc80 	uxtb.w	ip, r0
    cb06:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
    cb0a:	f013 0503 	ands.w	r5, r3, #3
    cb0e:	d1f3      	bne.n	caf8 <breakTime(unsigned long, DateTimeFields&)+0x6c>
    cb10:	fb86 b403 	smull	fp, r4, r6, r3
    cb14:	1164      	asrs	r4, r4, #5
    cb16:	fb08 3414 	mls	r4, r8, r4, r3
    cb1a:	b954      	cbnz	r4, cb32 <breakTime(unsigned long, DateTimeFields&)+0xa6>
    cb1c:	fb86 b403 	smull	fp, r4, r6, r3
    cb20:	11e4      	asrs	r4, r4, #7
    cb22:	fb09 3414 	mls	r4, r9, r4, r3
    cb26:	2c00      	cmp	r4, #0
    cb28:	bf14      	ite	ne
    cb2a:	463c      	movne	r4, r7
    cb2c:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    cb30:	e7e3      	b.n	cafa <breakTime(unsigned long, DateTimeFields&)+0x6e>
    cb32:	4654      	mov	r4, sl
    cb34:	e7e1      	b.n	cafa <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    cb36:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
    cb3a:	f881 c006 	strb.w	ip, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    cb3e:	b9b5      	cbnz	r5, cb6e <breakTime(unsigned long, DateTimeFields&)+0xe2>
    cb40:	4830      	ldr	r0, [pc, #192]	; (cc04 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cb42:	fb80 4003 	smull	r4, r0, r0, r3
    cb46:	1140      	asrs	r0, r0, #5
    cb48:	2464      	movs	r4, #100	; 0x64
    cb4a:	fb04 3010 	mls	r0, r4, r0, r3
    cb4e:	bb50      	cbnz	r0, cba6 <breakTime(unsigned long, DateTimeFields&)+0x11a>
    cb50:	482c      	ldr	r0, [pc, #176]	; (cc04 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cb52:	fb80 4003 	smull	r4, r0, r0, r3
    cb56:	11c0      	asrs	r0, r0, #7
    cb58:	f44f 74c8 	mov.w	r4, #400	; 0x190
    cb5c:	fb04 3010 	mls	r0, r4, r0, r3
    cb60:	2800      	cmp	r0, #0
    cb62:	f240 106d 	movw	r0, #365	; 0x16d
    cb66:	bf08      	it	eq
    cb68:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    cb6c:	e001      	b.n	cb72 <breakTime(unsigned long, DateTimeFields&)+0xe6>
    cb6e:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    cb72:	ebae 0e02 	sub.w	lr, lr, r2
    cb76:	eb00 020e 	add.w	r2, r0, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    cb7a:	4f22      	ldr	r7, [pc, #136]	; (cc04 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cb7c:	fb87 0703 	smull	r0, r7, r7, r3
    cb80:	ea4f 1e67 	mov.w	lr, r7, asr #5
    cb84:	2064      	movs	r0, #100	; 0x64
    cb86:	fb00 3e1e 	mls	lr, r0, lr, r3
    cb8a:	11ff      	asrs	r7, r7, #7
    cb8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cb90:	fb00 3717 	mls	r7, r0, r7, r3
    cb94:	2301      	movs	r3, #1
    cb96:	2000      	movs	r0, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    cb98:	f8df c06c 	ldr.w	ip, [pc, #108]	; cc08 <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
    cb9c:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
    cba0:	f04f 091d 	mov.w	r9, #29
    cba4:	e014      	b.n	cbd0 <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
    cba6:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    cbaa:	e7e2      	b.n	cb72 <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
    cbac:	b94d      	cbnz	r5, cbc2 <breakTime(unsigned long, DateTimeFields&)+0x136>
    cbae:	f1be 0f00 	cmp.w	lr, #0
    cbb2:	d11c      	bne.n	cbee <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
    cbb4:	2f00      	cmp	r7, #0
    cbb6:	bf14      	ite	ne
    cbb8:	241c      	movne	r4, #28
    cbba:	241d      	moveq	r4, #29
    cbbc:	e002      	b.n	cbc4 <breakTime(unsigned long, DateTimeFields&)+0x138>
    cbbe:	4633      	mov	r3, r6
    cbc0:	e010      	b.n	cbe4 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
    cbc2:	4644      	mov	r4, r8
    }

    if (time >= monthLength) {
    cbc4:	4294      	cmp	r4, r2
    cbc6:	d814      	bhi.n	cbf2 <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
    cbc8:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    cbca:	3001      	adds	r0, #1
    cbcc:	3301      	adds	r3, #1
    cbce:	b2db      	uxtb	r3, r3
    cbd0:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
    cbd2:	2e01      	cmp	r6, #1
    cbd4:	d0ea      	beq.n	cbac <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
    cbd6:	f810 400c 	ldrb.w	r4, [r0, ip]
    cbda:	4294      	cmp	r4, r2
    cbdc:	d8ef      	bhi.n	cbbe <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    cbde:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    cbe0:	2b0b      	cmp	r3, #11
    cbe2:	d9f2      	bls.n	cbca <breakTime(unsigned long, DateTimeFields&)+0x13e>
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
    cbe4:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
    cbe6:	3201      	adds	r2, #1
    cbe8:	710a      	strb	r2, [r1, #4]
}
    cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
    cbee:	464c      	mov	r4, r9
    cbf0:	e7e8      	b.n	cbc4 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
    cbf2:	4633      	mov	r3, r6
    cbf4:	e7f6      	b.n	cbe4 <breakTime(unsigned long, DateTimeFields&)+0x158>
    cbf6:	bf00      	nop
    cbf8:	88888889 	.word	0x88888889
    cbfc:	aaaaaaab 	.word	0xaaaaaaab
    cc00:	24924925 	.word	0x24924925
    cc04:	51eb851f 	.word	0x51eb851f
    cc08:	20001fe0 	.word	0x20001fe0

0000cc0c <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    cc0c:	b510      	push	{r4, lr}
    cc0e:	4604      	mov	r4, r0
{
	free(buffer);
    cc10:	6800      	ldr	r0, [r0, #0]
    cc12:	f004 f8c7 	bl	10da4 <free>
}
    cc16:	4620      	mov	r0, r4
    cc18:	bd10      	pop	{r4, pc}

0000cc1a <String::changeBuffer(unsigned int)>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    cc1a:	b538      	push	{r3, r4, r5, lr}
    cc1c:	4604      	mov	r4, r0
    cc1e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    cc20:	3101      	adds	r1, #1
    cc22:	6800      	ldr	r0, [r0, #0]
    cc24:	f005 f934 	bl	11e90 <realloc>
	if (newbuffer) {
    cc28:	b118      	cbz	r0, cc32 <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
    cc2a:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    cc2c:	6065      	str	r5, [r4, #4]
		return 1;
    cc2e:	2001      	movs	r0, #1
	}
	return 0;
}
    cc30:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    cc32:	2000      	movs	r0, #0
    cc34:	e7fc      	b.n	cc30 <String::changeBuffer(unsigned int)+0x16>

0000cc36 <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
    cc36:	6843      	ldr	r3, [r0, #4]
    cc38:	428b      	cmp	r3, r1
    cc3a:	d301      	bcc.n	cc40 <String::reserve(unsigned int)+0xa>
    cc3c:	2001      	movs	r0, #1
}
    cc3e:	4770      	bx	lr
{
    cc40:	b510      	push	{r4, lr}
    cc42:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
    cc44:	f7ff ffe9 	bl	cc1a <String::changeBuffer(unsigned int)>
    cc48:	b900      	cbnz	r0, cc4c <String::reserve(unsigned int)+0x16>
}
    cc4a:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
    cc4c:	68a3      	ldr	r3, [r4, #8]
    cc4e:	b923      	cbnz	r3, cc5a <String::reserve(unsigned int)+0x24>
    cc50:	6823      	ldr	r3, [r4, #0]
    cc52:	2200      	movs	r2, #0
    cc54:	701a      	strb	r2, [r3, #0]
		return 1;
    cc56:	2001      	movs	r0, #1
    cc58:	e7f7      	b.n	cc4a <String::reserve(unsigned int)+0x14>
    cc5a:	2001      	movs	r0, #1
    cc5c:	e7f5      	b.n	cc4a <String::reserve(unsigned int)+0x14>

0000cc5e <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    cc5e:	b570      	push	{r4, r5, r6, lr}
    cc60:	4604      	mov	r4, r0
	if (length == 0) {
    cc62:	b932      	cbnz	r2, cc72 <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
    cc64:	6803      	ldr	r3, [r0, #0]
    cc66:	b103      	cbz	r3, cc6a <String::copy(char const*, unsigned int)+0xc>
    cc68:	701a      	strb	r2, [r3, #0]
		len = 0;
    cc6a:	2300      	movs	r3, #0
    cc6c:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    cc6e:	4620      	mov	r0, r4
    cc70:	bd70      	pop	{r4, r5, r6, pc}
    cc72:	460d      	mov	r5, r1
    cc74:	4616      	mov	r6, r2
	if (!reserve(length)) {
    cc76:	4611      	mov	r1, r2
    cc78:	f7ff ffdd 	bl	cc36 <String::reserve(unsigned int)>
    cc7c:	b948      	cbnz	r0, cc92 <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
    cc7e:	6820      	ldr	r0, [r4, #0]
    cc80:	b118      	cbz	r0, cc8a <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    cc82:	f004 f88f 	bl	10da4 <free>
			buffer = NULL;
    cc86:	2300      	movs	r3, #0
    cc88:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
    cc8a:	2300      	movs	r3, #0
    cc8c:	6063      	str	r3, [r4, #4]
    cc8e:	60a3      	str	r3, [r4, #8]
		return *this;
    cc90:	e7ed      	b.n	cc6e <String::copy(char const*, unsigned int)+0x10>
	len = length;
    cc92:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    cc94:	4629      	mov	r1, r5
    cc96:	6820      	ldr	r0, [r4, #0]
    cc98:	f004 fc98 	bl	115cc <strcpy>
	return *this;
    cc9c:	e7e7      	b.n	cc6e <String::copy(char const*, unsigned int)+0x10>

0000cc9e <String::String(char const*)>:
String::String(const char *cstr)
    cc9e:	b538      	push	{r3, r4, r5, lr}
    cca0:	4604      	mov	r4, r0
	buffer = NULL;
    cca2:	2300      	movs	r3, #0
    cca4:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cca6:	6043      	str	r3, [r0, #4]
	len = 0;
    cca8:	6083      	str	r3, [r0, #8]
	flags = 0;
    ccaa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    ccac:	b141      	cbz	r1, ccc0 <String::String(char const*)+0x22>
    ccae:	460d      	mov	r5, r1
    ccb0:	4608      	mov	r0, r1
    ccb2:	f005 fa25 	bl	12100 <strlen>
    ccb6:	4602      	mov	r2, r0
    ccb8:	4629      	mov	r1, r5
    ccba:	4620      	mov	r0, r4
    ccbc:	f7ff ffcf 	bl	cc5e <String::copy(char const*, unsigned int)>
}
    ccc0:	4620      	mov	r0, r4
    ccc2:	bd38      	pop	{r3, r4, r5, pc}

0000ccc4 <String::move(String&)>:

void String::move(String &rhs)
{
	if (&rhs == this) return;
    ccc4:	4281      	cmp	r1, r0
    ccc6:	d011      	beq.n	ccec <String::move(String&)+0x28>
{
    ccc8:	b538      	push	{r3, r4, r5, lr}
    ccca:	4605      	mov	r5, r0
    cccc:	460c      	mov	r4, r1
	if (buffer) free(buffer);
    ccce:	6800      	ldr	r0, [r0, #0]
    ccd0:	b108      	cbz	r0, ccd6 <String::move(String&)+0x12>
    ccd2:	f004 f867 	bl	10da4 <free>
	buffer = rhs.buffer;
    ccd6:	6823      	ldr	r3, [r4, #0]
    ccd8:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    ccda:	6863      	ldr	r3, [r4, #4]
    ccdc:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    ccde:	68a3      	ldr	r3, [r4, #8]
    cce0:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    cce2:	2300      	movs	r3, #0
    cce4:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    cce6:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    cce8:	60a3      	str	r3, [r4, #8]
}
    ccea:	bd38      	pop	{r3, r4, r5, pc}
    ccec:	4770      	bx	lr

0000ccee <String::operator=(String const&)>:

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    ccee:	4288      	cmp	r0, r1
    ccf0:	d005      	beq.n	ccfe <String::operator=(String const&)+0x10>
{
    ccf2:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
    ccf4:	688a      	ldr	r2, [r1, #8]
    ccf6:	6809      	ldr	r1, [r1, #0]
    ccf8:	f7ff ffb1 	bl	cc5e <String::copy(char const*, unsigned int)>
}
    ccfc:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
    ccfe:	4608      	mov	r0, r1
}
    cd00:	4770      	bx	lr

0000cd02 <String::String(String const&)>:
String::String(const String &value)
    cd02:	b510      	push	{r4, lr}
    cd04:	4604      	mov	r4, r0
	buffer = NULL;
    cd06:	2300      	movs	r3, #0
    cd08:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cd0a:	6043      	str	r3, [r0, #4]
	len = 0;
    cd0c:	6083      	str	r3, [r0, #8]
	flags = 0;
    cd0e:	7303      	strb	r3, [r0, #12]
	*this = value;
    cd10:	f7ff ffed 	bl	ccee <String::operator=(String const&)>
}
    cd14:	4620      	mov	r0, r4
    cd16:	bd10      	pop	{r4, pc}

0000cd18 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    cd18:	b510      	push	{r4, lr}
    cd1a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    cd1c:	4288      	cmp	r0, r1
    cd1e:	d001      	beq.n	cd24 <String::operator=(String&&)+0xc>
    cd20:	f7ff ffd0 	bl	ccc4 <String::move(String&)>
	return *this;
}
    cd24:	4620      	mov	r0, r4
    cd26:	bd10      	pop	{r4, pc}

0000cd28 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    cd28:	b538      	push	{r3, r4, r5, lr}
    cd2a:	4604      	mov	r4, r0
	if (cstr) {
    cd2c:	b151      	cbz	r1, cd44 <String::operator=(char const*)+0x1c>
    cd2e:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
    cd30:	4608      	mov	r0, r1
    cd32:	f005 f9e5 	bl	12100 <strlen>
    cd36:	4602      	mov	r2, r0
    cd38:	4629      	mov	r1, r5
    cd3a:	4620      	mov	r0, r4
    cd3c:	f7ff ff8f 	bl	cc5e <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    cd40:	4620      	mov	r0, r4
    cd42:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
    cd44:	2300      	movs	r3, #0
    cd46:	6083      	str	r3, [r0, #8]
    cd48:	e7fa      	b.n	cd40 <String::operator=(char const*)+0x18>

0000cd4a <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    cd4a:	b510      	push	{r4, lr}
    cd4c:	b08a      	sub	sp, #40	; 0x28
    cd4e:	4604      	mov	r4, r0
    cd50:	4608      	mov	r0, r1
	buffer = NULL;
    cd52:	2300      	movs	r3, #0
    cd54:	6023      	str	r3, [r4, #0]
	capacity = 0;
    cd56:	6063      	str	r3, [r4, #4]
	len = 0;
    cd58:	60a3      	str	r3, [r4, #8]
	flags = 0;
    cd5a:	7323      	strb	r3, [r4, #12]
	itoa(value, buf, base);
    cd5c:	a901      	add	r1, sp, #4
    cd5e:	f003 fffd 	bl	10d5c <itoa>
	*this = buf;
    cd62:	a901      	add	r1, sp, #4
    cd64:	4620      	mov	r0, r4
    cd66:	f7ff ffdf 	bl	cd28 <String::operator=(char const*)>
}
    cd6a:	4620      	mov	r0, r4
    cd6c:	b00a      	add	sp, #40	; 0x28
    cd6e:	bd10      	pop	{r4, pc}

0000cd70 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    cd70:	b510      	push	{r4, lr}
    cd72:	b08a      	sub	sp, #40	; 0x28
    cd74:	4604      	mov	r4, r0
	buffer = NULL;
    cd76:	2300      	movs	r3, #0
    cd78:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cd7a:	6043      	str	r3, [r0, #4]
	len = 0;
    cd7c:	6083      	str	r3, [r0, #8]
	flags = 0;
    cd7e:	7303      	strb	r3, [r0, #12]
	*this = dtostrf(num, digits + 2, digits, buf);
    cd80:	466a      	mov	r2, sp
    cd82:	1c88      	adds	r0, r1, #2
    cd84:	f000 fb9e 	bl	d4c4 <dtostrf>
    cd88:	4601      	mov	r1, r0
    cd8a:	4620      	mov	r0, r4
    cd8c:	f7ff ffcc 	bl	cd28 <String::operator=(char const*)>
}
    cd90:	4620      	mov	r0, r4
    cd92:	b00a      	add	sp, #40	; 0x28
    cd94:	bd10      	pop	{r4, pc}

0000cd96 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    cd96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cd9a:	4604      	mov	r4, r0
    cd9c:	460d      	mov	r5, r1
    cd9e:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
    cda0:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    cda2:	6803      	ldr	r3, [r0, #0]
    cda4:	42ab      	cmp	r3, r5
    cda6:	d806      	bhi.n	cdb6 <String::append(char const*, unsigned int)+0x20>
    cda8:	185a      	adds	r2, r3, r1
    cdaa:	4295      	cmp	r5, r2
    cdac:	d209      	bcs.n	cdc2 <String::append(char const*, unsigned int)+0x2c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    cdae:	1aef      	subs	r7, r5, r3
		self = true;
    cdb0:	f04f 0901 	mov.w	r9, #1
    cdb4:	e001      	b.n	cdba <String::append(char const*, unsigned int)+0x24>
	bool self = false;
    cdb6:	f04f 0900 	mov.w	r9, #0
	}
	if (length == 0 || !reserve(newlen)) return *this;
    cdba:	b92e      	cbnz	r6, cdc8 <String::append(char const*, unsigned int)+0x32>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    cdbc:	4620      	mov	r0, r4
    cdbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    cdc2:	f04f 0900 	mov.w	r9, #0
    cdc6:	e7f8      	b.n	cdba <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
    cdc8:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
    cdcc:	4641      	mov	r1, r8
    cdce:	4620      	mov	r0, r4
    cdd0:	f7ff ff31 	bl	cc36 <String::reserve(unsigned int)>
    cdd4:	2800      	cmp	r0, #0
    cdd6:	d0f1      	beq.n	cdbc <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
    cdd8:	f1b9 0f00 	cmp.w	r9, #0
    cddc:	d00d      	beq.n	cdfa <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
    cdde:	6823      	ldr	r3, [r4, #0]
    cde0:	68a0      	ldr	r0, [r4, #8]
    cde2:	4632      	mov	r2, r6
    cde4:	19d9      	adds	r1, r3, r7
    cde6:	4418      	add	r0, r3
    cde8:	f000 fa98 	bl	d31c <memcpy>
		buffer[newlen] = 0;
    cdec:	6823      	ldr	r3, [r4, #0]
    cdee:	2200      	movs	r2, #0
    cdf0:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
    cdf4:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
    cdf8:	e7e0      	b.n	cdbc <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
    cdfa:	6820      	ldr	r0, [r4, #0]
    cdfc:	68a3      	ldr	r3, [r4, #8]
    cdfe:	4629      	mov	r1, r5
    ce00:	4418      	add	r0, r3
    ce02:	f004 fbe3 	bl	115cc <strcpy>
    ce06:	e7f5      	b.n	cdf4 <String::append(char const*, unsigned int)+0x5e>

0000ce08 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    ce08:	b510      	push	{r4, lr}
    ce0a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    ce0c:	688a      	ldr	r2, [r1, #8]
    ce0e:	6809      	ldr	r1, [r1, #0]
    ce10:	f7ff ffc1 	bl	cd96 <String::append(char const*, unsigned int)>
	return a;
}
    ce14:	4620      	mov	r0, r4
    ce16:	bd10      	pop	{r4, pc}

0000ce18 <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    ce18:	b538      	push	{r3, r4, r5, lr}
    ce1a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    ce1c:	b141      	cbz	r1, ce30 <operator+(StringSumHelper const&, char const*)+0x18>
    ce1e:	460d      	mov	r5, r1
    ce20:	4608      	mov	r0, r1
    ce22:	f005 f96d 	bl	12100 <strlen>
    ce26:	4602      	mov	r2, r0
    ce28:	4629      	mov	r1, r5
    ce2a:	4620      	mov	r0, r4
    ce2c:	f7ff ffb3 	bl	cd96 <String::append(char const*, unsigned int)>
	return a;
}
    ce30:	4620      	mov	r0, r4
    ce32:	bd38      	pop	{r3, r4, r5, pc}

0000ce34 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    ce34:	b1b2      	cbz	r2, ce64 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
    ce36:	b538      	push	{r3, r4, r5, lr}
    ce38:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    ce3a:	b124      	cbz	r4, ce46 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    ce3c:	6885      	ldr	r5, [r0, #8]
    ce3e:	429d      	cmp	r5, r3
    ce40:	d802      	bhi.n	ce48 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    ce42:	2300      	movs	r3, #0
    ce44:	7023      	strb	r3, [r4, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    ce46:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    ce48:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    ce4a:	1e51      	subs	r1, r2, #1
    ce4c:	428d      	cmp	r5, r1
    ce4e:	bf28      	it	cs
    ce50:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
    ce52:	6801      	ldr	r1, [r0, #0]
    ce54:	462a      	mov	r2, r5
    ce56:	4419      	add	r1, r3
    ce58:	4620      	mov	r0, r4
    ce5a:	f003 ff4d 	bl	10cf8 <strncpy>
	buf[n] = 0;
    ce5e:	2300      	movs	r3, #0
    ce60:	5563      	strb	r3, [r4, r5]
    ce62:	e7f0      	b.n	ce46 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
    ce64:	4770      	bx	lr
	...

0000ce68 <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    ce68:	282a      	cmp	r0, #42	; 0x2a
    ce6a:	d83e      	bhi.n	ceea <analogRead+0x82>
{
    ce6c:	b570      	push	{r4, r5, r6, lr}
    ce6e:	4604      	mov	r4, r0
	if (calibrating) wait_for_cal();
    ce70:	4b20      	ldr	r3, [pc, #128]	; (cef4 <analogRead+0x8c>)
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	b9b3      	cbnz	r3, cea4 <analogRead+0x3c>
	uint8_t ch = pin_to_channel[pin];
    ce76:	4b20      	ldr	r3, [pc, #128]	; (cef8 <analogRead+0x90>)
    ce78:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    ce7a:	2bff      	cmp	r3, #255	; 0xff
    ce7c:	d037      	beq.n	ceee <analogRead+0x86>
	if(!(ch & 0x80)) {
    ce7e:	f013 0f80 	tst.w	r3, #128	; 0x80
    ce82:	d120      	bne.n	cec6 <analogRead+0x5e>
		ADC1_HC0 = ch;
    ce84:	4a1d      	ldr	r2, [pc, #116]	; (cefc <analogRead+0x94>)
    ce86:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    ce88:	6a13      	ldr	r3, [r2, #32]
    ce8a:	f013 0f01 	tst.w	r3, #1
    ce8e:	d106      	bne.n	ce9e <analogRead+0x36>
    ce90:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    ce92:	f002 f8a3 	bl	efdc <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    ce96:	6a23      	ldr	r3, [r4, #32]
    ce98:	f013 0f01 	tst.w	r3, #1
    ce9c:	d0f9      	beq.n	ce92 <analogRead+0x2a>
		return ADC1_R0;
    ce9e:	4b17      	ldr	r3, [pc, #92]	; (cefc <analogRead+0x94>)
    cea0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    cea2:	bd70      	pop	{r4, r5, r6, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    cea4:	4d15      	ldr	r5, [pc, #84]	; (cefc <analogRead+0x94>)
    cea6:	4e16      	ldr	r6, [pc, #88]	; (cf00 <analogRead+0x98>)
    cea8:	e001      	b.n	ceae <analogRead+0x46>
		yield();
    ceaa:	f002 f897 	bl	efdc <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    ceae:	6cab      	ldr	r3, [r5, #72]	; 0x48
    ceb0:	f013 0f80 	tst.w	r3, #128	; 0x80
    ceb4:	d1f9      	bne.n	ceaa <analogRead+0x42>
    ceb6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    ceb8:	f013 0f80 	tst.w	r3, #128	; 0x80
    cebc:	d1f5      	bne.n	ceaa <analogRead+0x42>
	calibrating = 0;
    cebe:	4b0d      	ldr	r3, [pc, #52]	; (cef4 <analogRead+0x8c>)
    cec0:	2200      	movs	r2, #0
    cec2:	701a      	strb	r2, [r3, #0]
}
    cec4:	e7d7      	b.n	ce76 <analogRead+0xe>
		ADC2_HC0 = ch & 0x7f;
    cec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ceca:	4a0d      	ldr	r2, [pc, #52]	; (cf00 <analogRead+0x98>)
    cecc:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cece:	6a13      	ldr	r3, [r2, #32]
    ced0:	f013 0f01 	tst.w	r3, #1
    ced4:	d106      	bne.n	cee4 <analogRead+0x7c>
    ced6:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    ced8:	f002 f880 	bl	efdc <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    cedc:	6a23      	ldr	r3, [r4, #32]
    cede:	f013 0f01 	tst.w	r3, #1
    cee2:	d0f9      	beq.n	ced8 <analogRead+0x70>
		return ADC2_R0;
    cee4:	4b06      	ldr	r3, [pc, #24]	; (cf00 <analogRead+0x98>)
    cee6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    cee8:	e7db      	b.n	cea2 <analogRead+0x3a>
	if (pin > sizeof(pin_to_channel)) return 0;
    ceea:	2000      	movs	r0, #0
}
    ceec:	4770      	bx	lr
	if (ch == 255) return 0;
    ceee:	2000      	movs	r0, #0
    cef0:	e7d7      	b.n	cea2 <analogRead+0x3a>
    cef2:	bf00      	nop
    cef4:	200053c9 	.word	0x200053c9
    cef8:	20002d6c 	.word	0x20002d6c
    cefc:	400c4000 	.word	0x400c4000
    cf00:	400c8000 	.word	0x400c8000

0000cf04 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    cf04:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    cf06:	4b8e      	ldr	r3, [pc, #568]	; (d140 <set_arm_clock+0x23c>)
    cf08:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    cf0a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    cf0c:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
    cf10:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    cf12:	4b8c      	ldr	r3, [pc, #560]	; (d144 <set_arm_clock+0x240>)
    cf14:	4298      	cmp	r0, r3
    cf16:	d915      	bls.n	cf44 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    cf18:	4b8b      	ldr	r3, [pc, #556]	; (d148 <set_arm_clock+0x244>)
    cf1a:	4298      	cmp	r0, r3
    cf1c:	d96d      	bls.n	cffa <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    cf1e:	4b8b      	ldr	r3, [pc, #556]	; (d14c <set_arm_clock+0x248>)
    cf20:	4403      	add	r3, r0
    cf22:	0a1b      	lsrs	r3, r3, #8
    cf24:	498a      	ldr	r1, [pc, #552]	; (d150 <set_arm_clock+0x24c>)
    cf26:	fba1 1303 	umull	r1, r3, r1, r3
    cf2a:	09db      	lsrs	r3, r3, #7
    cf2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cf30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    cf34:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
    cf38:	f240 6127 	movw	r1, #1575	; 0x627
    cf3c:	428b      	cmp	r3, r1
    cf3e:	bf28      	it	cs
    cf40:	460b      	movcs	r3, r1
    cf42:	e007      	b.n	cf54 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    cf44:	4e83      	ldr	r6, [pc, #524]	; (d154 <set_arm_clock+0x250>)
    cf46:	f240 437e 	movw	r3, #1150	; 0x47e
    cf4a:	f240 31b6 	movw	r1, #950	; 0x3b6
    cf4e:	42b0      	cmp	r0, r6
    cf50:	bf98      	it	ls
    cf52:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    cf54:	4e7a      	ldr	r6, [pc, #488]	; (d140 <set_arm_clock+0x23c>)
    cf56:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    cf5a:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    cf5e:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cf62:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    cf66:	497c      	ldr	r1, [pc, #496]	; (d158 <set_arm_clock+0x254>)
    cf68:	fba1 1303 	umull	r1, r3, r1, r3
    cf6c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    cf70:	f004 011f 	and.w	r1, r4, #31
    cf74:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    cf78:	d209      	bcs.n	cf8e <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cf7a:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    cf7e:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    cf82:	4b76      	ldr	r3, [pc, #472]	; (d15c <set_arm_clock+0x258>)
    cf84:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    cf86:	4619      	mov	r1, r3
    cf88:	680b      	ldr	r3, [r1, #0]
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	dafc      	bge.n	cf88 <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    cf8e:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
    cf92:	d12a      	bne.n	cfea <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    cf94:	4972      	ldr	r1, [pc, #456]	; (d160 <set_arm_clock+0x25c>)
    cf96:	690e      	ldr	r6, [r1, #16]
    cf98:	4972      	ldr	r1, [pc, #456]	; (d164 <set_arm_clock+0x260>)
    cf9a:	43b1      	bics	r1, r6
    cf9c:	d030      	beq.n	d000 <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    cf9e:	4619      	mov	r1, r3
			sel = 1;
    cfa0:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cfa2:	06ce      	lsls	r6, r1, #27
    cfa4:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
    cfa8:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
    cfac:	d004      	beq.n	cfb8 <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    cfae:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    cfb2:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
    cfb4:	4962      	ldr	r1, [pc, #392]	; (d140 <set_arm_clock+0x23c>)
    cfb6:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cfb8:	0319      	lsls	r1, r3, #12
    cfba:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
    cfbe:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    cfc2:	d009      	beq.n	cfd8 <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    cfc4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    cfc8:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
    cfca:	4b5d      	ldr	r3, [pc, #372]	; (d140 <set_arm_clock+0x23c>)
    cfcc:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    cfce:	461a      	mov	r2, r3
    cfd0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cfd2:	f013 0f08 	tst.w	r3, #8
    cfd6:	d1fb      	bne.n	cfd0 <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    cfd8:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    cfdc:	4b58      	ldr	r3, [pc, #352]	; (d140 <set_arm_clock+0x23c>)
    cfde:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cfe0:	461a      	mov	r2, r3
    cfe2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cfe4:	f013 0f20 	tst.w	r3, #32
    cfe8:	d1fb      	bne.n	cfe2 <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    cfea:	4b5f      	ldr	r3, [pc, #380]	; (d168 <set_arm_clock+0x264>)
    cfec:	4298      	cmp	r0, r3
    cfee:	d817      	bhi.n	d020 <set_arm_clock+0x11c>
    cff0:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    cff2:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    cff4:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
    cff6:	4e5c      	ldr	r6, [pc, #368]	; (d168 <set_arm_clock+0x264>)
    cff8:	e00e      	b.n	d018 <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
    cffa:	f240 43e2 	movw	r3, #1250	; 0x4e2
    cffe:	e7a9      	b.n	cf54 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
    d000:	2103      	movs	r1, #3
    d002:	e7ce      	b.n	cfa2 <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    d004:	2904      	cmp	r1, #4
    d006:	d80e      	bhi.n	d026 <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
    d008:	3101      	adds	r1, #1
				div_arm = 1;
    d00a:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d00c:	fb01 f302 	mul.w	r3, r1, r2
    d010:	fb00 f303 	mul.w	r3, r0, r3
    d014:	42b3      	cmp	r3, r6
    d016:	d806      	bhi.n	d026 <set_arm_clock+0x122>
		if (div_arm < 8) {
    d018:	2a07      	cmp	r2, #7
    d01a:	d8f3      	bhi.n	d004 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    d01c:	3201      	adds	r2, #1
    d01e:	e7f5      	b.n	d00c <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
    d020:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    d022:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    d024:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d026:	4851      	ldr	r0, [pc, #324]	; (d16c <set_arm_clock+0x268>)
    d028:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
    d02a:	4b51      	ldr	r3, [pc, #324]	; (d170 <set_arm_clock+0x26c>)
    d02c:	4298      	cmp	r0, r3
    d02e:	f200 8083 	bhi.w	d138 <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d032:	4b50      	ldr	r3, [pc, #320]	; (d174 <set_arm_clock+0x270>)
    d034:	fba3 0300 	umull	r0, r3, r3, r0
    d038:	0d1b      	lsrs	r3, r3, #20
    d03a:	2b36      	cmp	r3, #54	; 0x36
    d03c:	bf38      	it	cc
    d03e:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    d040:	484d      	ldr	r0, [pc, #308]	; (d178 <set_arm_clock+0x274>)
    d042:	fb03 f000 	mul.w	r0, r3, r0
    d046:	fbb0 f0f2 	udiv	r0, r0, r2
    d04a:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d04e:	4e44      	ldr	r6, [pc, #272]	; (d160 <set_arm_clock+0x25c>)
    d050:	6836      	ldr	r6, [r6, #0]
    d052:	4f4a      	ldr	r7, [pc, #296]	; (d17c <set_arm_clock+0x278>)
    d054:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d056:	4e4a      	ldr	r6, [pc, #296]	; (d180 <set_arm_clock+0x27c>)
    d058:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d05a:	42b7      	cmp	r7, r6
    d05c:	d009      	beq.n	d072 <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    d05e:	4e40      	ldr	r6, [pc, #256]	; (d160 <set_arm_clock+0x25c>)
    d060:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    d064:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    d066:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    d06a:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    d06c:	6833      	ldr	r3, [r6, #0]
    d06e:	2b00      	cmp	r3, #0
    d070:	dafc      	bge.n	d06c <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    d072:	4b33      	ldr	r3, [pc, #204]	; (d140 <set_arm_clock+0x23c>)
    d074:	691b      	ldr	r3, [r3, #16]
    d076:	3a01      	subs	r2, #1
    d078:	f003 0307 	and.w	r3, r3, #7
    d07c:	4293      	cmp	r3, r2
    d07e:	d008      	beq.n	d092 <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    d080:	f002 0207 	and.w	r2, r2, #7
    d084:	4b2e      	ldr	r3, [pc, #184]	; (d140 <set_arm_clock+0x23c>)
    d086:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    d088:	461a      	mov	r2, r3
    d08a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d08c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d090:	d1fb      	bne.n	d08a <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d092:	3901      	subs	r1, #1
    d094:	028b      	lsls	r3, r1, #10
    d096:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
    d09a:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    d09e:	d00b      	beq.n	d0b8 <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    d0a0:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    d0a4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
    d0a8:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
    d0aa:	4b25      	ldr	r3, [pc, #148]	; (d140 <set_arm_clock+0x23c>)
    d0ac:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    d0ae:	461a      	mov	r2, r3
    d0b0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d0b2:	f013 0f02 	tst.w	r3, #2
    d0b6:	d1fb      	bne.n	d0b0 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d0b8:	4932      	ldr	r1, [pc, #200]	; (d184 <set_arm_clock+0x280>)
    d0ba:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    d0bc:	4a32      	ldr	r2, [pc, #200]	; (d188 <set_arm_clock+0x284>)
    d0be:	4291      	cmp	r1, r2
    d0c0:	d83c      	bhi.n	d13c <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d0c2:	09c9      	lsrs	r1, r1, #7
    d0c4:	4b31      	ldr	r3, [pc, #196]	; (d18c <set_arm_clock+0x288>)
    d0c6:	fba3 3101 	umull	r3, r1, r3, r1
    d0ca:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    d0cc:	1e4b      	subs	r3, r1, #1
    d0ce:	021a      	lsls	r2, r3, #8
    d0d0:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    d0d4:	f413 7f40 	tst.w	r3, #768	; 0x300
    d0d8:	d006      	beq.n	d0e8 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    d0da:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d0de:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d0e2:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    d0e4:	4b16      	ldr	r3, [pc, #88]	; (d140 <set_arm_clock+0x23c>)
    d0e6:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    d0e8:	4a15      	ldr	r2, [pc, #84]	; (d140 <set_arm_clock+0x23c>)
    d0ea:	6953      	ldr	r3, [r2, #20]
    d0ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    d0f0:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d0f2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d0f4:	f013 0f20 	tst.w	r3, #32
    d0f8:	d1fb      	bne.n	d0f2 <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
    d0fa:	4b25      	ldr	r3, [pc, #148]	; (d190 <set_arm_clock+0x28c>)
    d0fc:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    d0fe:	fbb0 f1f1 	udiv	r1, r0, r1
    d102:	4b24      	ldr	r3, [pc, #144]	; (d194 <set_arm_clock+0x290>)
    d104:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d106:	4b24      	ldr	r3, [pc, #144]	; (d198 <set_arm_clock+0x294>)
    d108:	fba3 2300 	umull	r2, r3, r3, r0
    d10c:	0c9b      	lsrs	r3, r3, #18
    d10e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d112:	fbb2 f3f3 	udiv	r3, r2, r3
    d116:	4a21      	ldr	r2, [pc, #132]	; (d19c <set_arm_clock+0x298>)
    d118:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d11a:	f004 031f 	and.w	r3, r4, #31
    d11e:	459c      	cmp	ip, r3
    d120:	d208      	bcs.n	d134 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d122:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d126:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    d12a:	4a0c      	ldr	r2, [pc, #48]	; (d15c <set_arm_clock+0x258>)
    d12c:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d12e:	6813      	ldr	r3, [r2, #0]
    d130:	2b00      	cmp	r3, #0
    d132:	dafc      	bge.n	d12e <set_arm_clock+0x22a>
	}

	return frequency;
}
    d134:	bcf0      	pop	{r4, r5, r6, r7}
    d136:	4770      	bx	lr
	if (mult > 108) mult = 108;
    d138:	236c      	movs	r3, #108	; 0x6c
    d13a:	e781      	b.n	d040 <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
    d13c:	2104      	movs	r1, #4
    d13e:	e7c5      	b.n	d0cc <set_arm_clock+0x1c8>
    d140:	400fc000 	.word	0x400fc000
    d144:	1f78a400 	.word	0x1f78a400
    d148:	23c34600 	.word	0x23c34600
    d14c:	dc3cba00 	.word	0xdc3cba00
    d150:	004cb223 	.word	0x004cb223
    d154:	016e3600 	.word	0x016e3600
    d158:	51eb851f 	.word	0x51eb851f
    d15c:	40080000 	.word	0x40080000
    d160:	400d8000 	.word	0x400d8000
    d164:	80003040 	.word	0x80003040
    d168:	269fb1ff 	.word	0x269fb1ff
    d16c:	005b8d80 	.word	0x005b8d80
    d170:	4df67eff 	.word	0x4df67eff
    d174:	165e9f81 	.word	0x165e9f81
    d178:	00b71b00 	.word	0x00b71b00
    d17c:	8001307f 	.word	0x8001307f
    d180:	80002000 	.word	0x80002000
    d184:	08f0d17f 	.word	0x08f0d17f
    d188:	2cb4177f 	.word	0x2cb4177f
    d18c:	00e5109f 	.word	0x00e5109f
    d190:	20003338 	.word	0x20003338
    d194:	20003334 	.word	0x20003334
    d198:	431bde83 	.word	0x431bde83
    d19c:	20005354 	.word	0x20005354

0000d1a0 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    d1a0:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d1a2:	4b0f      	ldr	r3, [pc, #60]	; (d1e0 <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d1a4:	4d0f      	ldr	r5, [pc, #60]	; (d1e4 <micros+0x44>)
		scc = systick_cycle_count;
    d1a6:	4c10      	ldr	r4, [pc, #64]	; (d1e8 <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d1a8:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d1ac:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    d1b0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    d1b2:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d1b4:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    d1b8:	2a00      	cmp	r2, #0
    d1ba:	d1f7      	bne.n	d1ac <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d1bc:	4b0b      	ldr	r3, [pc, #44]	; (d1ec <micros+0x4c>)
    d1be:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d1c0:	4a0b      	ldr	r2, [pc, #44]	; (d1f0 <micros+0x50>)
    d1c2:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
    d1c4:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d1c6:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    d1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d1ce:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
    d1d2:	429a      	cmp	r2, r3
    d1d4:	bf94      	ite	ls
    d1d6:	1880      	addls	r0, r0, r2
    d1d8:	18c0      	addhi	r0, r0, r3
    d1da:	bc30      	pop	{r4, r5}
    d1dc:	4770      	bx	lr
    d1de:	bf00      	nop
    d1e0:	2000538c 	.word	0x2000538c
    d1e4:	20005388 	.word	0x20005388
    d1e8:	20005384 	.word	0x20005384
    d1ec:	e0001000 	.word	0xe0001000
    d1f0:	20005354 	.word	0x20005354

0000d1f4 <delay>:
	if (msec == 0) return;
    d1f4:	b900      	cbnz	r0, d1f8 <delay+0x4>
    d1f6:	4770      	bx	lr
{
    d1f8:	b538      	push	{r3, r4, r5, lr}
    d1fa:	4605      	mov	r5, r0
	start = micros();
    d1fc:	f7ff ffd0 	bl	d1a0 <micros>
    d200:	4604      	mov	r4, r0
    d202:	e001      	b.n	d208 <delay+0x14>
		yield();
    d204:	f001 feea 	bl	efdc <yield>
		while ((micros() - start) >= 1000) {
    d208:	f7ff ffca 	bl	d1a0 <micros>
    d20c:	1b00      	subs	r0, r0, r4
    d20e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    d212:	d3f7      	bcc.n	d204 <delay+0x10>
			if (--msec == 0) return;
    d214:	3d01      	subs	r5, #1
    d216:	d002      	beq.n	d21e <delay+0x2a>
			start += 1000;
    d218:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    d21c:	e7f4      	b.n	d208 <delay+0x14>
}
    d21e:	bd38      	pop	{r3, r4, r5, pc}

0000d220 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d220:	2836      	cmp	r0, #54	; 0x36
    d222:	d81b      	bhi.n	d25c <digitalWrite+0x3c>
{
    d224:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d226:	4b0e      	ldr	r3, [pc, #56]	; (d260 <digitalWrite+0x40>)
    d228:	0102      	lsls	r2, r0, #4
    d22a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d22e:	589b      	ldr	r3, [r3, r2]
    d230:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
    d232:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
    d234:	4214      	tst	r4, r2
    d236:	d008      	beq.n	d24a <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
    d238:	b121      	cbz	r1, d244 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
    d23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d23e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d242:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
    d244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    d248:	e7f9      	b.n	d23e <digitalWrite+0x1e>
		if (val) {
    d24a:	b119      	cbz	r1, d254 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d24c:	6883      	ldr	r3, [r0, #8]
    d24e:	4a05      	ldr	r2, [pc, #20]	; (d264 <digitalWrite+0x44>)
    d250:	601a      	str	r2, [r3, #0]
    d252:	e7f4      	b.n	d23e <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d254:	6883      	ldr	r3, [r0, #8]
    d256:	4a04      	ldr	r2, [pc, #16]	; (d268 <digitalWrite+0x48>)
    d258:	601a      	str	r2, [r3, #0]
    d25a:	e7f0      	b.n	d23e <digitalWrite+0x1e>
    d25c:	4770      	bx	lr
    d25e:	bf00      	nop
    d260:	2000293c 	.word	0x2000293c
    d264:	0001f038 	.word	0x0001f038
    d268:	00013038 	.word	0x00013038

0000d26c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    d26c:	2836      	cmp	r0, #54	; 0x36
    d26e:	d80b      	bhi.n	d288 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    d270:	4b06      	ldr	r3, [pc, #24]	; (d28c <digitalRead+0x20>)
    d272:	0102      	lsls	r2, r0, #4
    d274:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    d278:	589b      	ldr	r3, [r3, r2]
    d27a:	689a      	ldr	r2, [r3, #8]
    d27c:	68c3      	ldr	r3, [r0, #12]
    d27e:	421a      	tst	r2, r3
    d280:	bf14      	ite	ne
    d282:	2001      	movne	r0, #1
    d284:	2000      	moveq	r0, #0
    d286:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    d288:	2000      	movs	r0, #0
}
    d28a:	4770      	bx	lr
    d28c:	2000293c 	.word	0x2000293c

0000d290 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d290:	2836      	cmp	r0, #54	; 0x36
    d292:	d832      	bhi.n	d2fa <pinMode+0x6a>
{
    d294:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d296:	4b19      	ldr	r3, [pc, #100]	; (d2fc <pinMode+0x6c>)
    d298:	0102      	lsls	r2, r0, #4
    d29a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d29e:	2901      	cmp	r1, #1
    d2a0:	d00c      	beq.n	d2bc <pinMode+0x2c>
    d2a2:	2904      	cmp	r1, #4
    d2a4:	d00a      	beq.n	d2bc <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d2a6:	589a      	ldr	r2, [r3, r2]
    d2a8:	6853      	ldr	r3, [r2, #4]
    d2aa:	68c4      	ldr	r4, [r0, #12]
    d2ac:	ea23 0304 	bic.w	r3, r3, r4
    d2b0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
    d2b2:	b9a9      	cbnz	r1, d2e0 <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d2b4:	6883      	ldr	r3, [r0, #8]
    d2b6:	2238      	movs	r2, #56	; 0x38
    d2b8:	601a      	str	r2, [r3, #0]
    d2ba:	e00b      	b.n	d2d4 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d2bc:	589a      	ldr	r2, [r3, r2]
    d2be:	6853      	ldr	r3, [r2, #4]
    d2c0:	68c4      	ldr	r4, [r0, #12]
    d2c2:	4323      	orrs	r3, r4
    d2c4:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
    d2c6:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d2c8:	6883      	ldr	r3, [r0, #8]
    d2ca:	bf0c      	ite	eq
    d2cc:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d2ce:	f640 0238 	movwne	r2, #2104	; 0x838
    d2d2:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d2d4:	6843      	ldr	r3, [r0, #4]
    d2d6:	2215      	movs	r2, #21
    d2d8:	601a      	str	r2, [r3, #0]
}
    d2da:	f85d 4b04 	ldr.w	r4, [sp], #4
    d2de:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    d2e0:	2902      	cmp	r1, #2
    d2e2:	d006      	beq.n	d2f2 <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
    d2e4:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d2e6:	6883      	ldr	r3, [r0, #8]
    d2e8:	bf0c      	ite	eq
    d2ea:	4a05      	ldreq	r2, [pc, #20]	; (d300 <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d2ec:	4a05      	ldrne	r2, [pc, #20]	; (d304 <pinMode+0x74>)
    d2ee:	601a      	str	r2, [r3, #0]
    d2f0:	e7f0      	b.n	d2d4 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d2f2:	6883      	ldr	r3, [r0, #8]
    d2f4:	4a04      	ldr	r2, [pc, #16]	; (d308 <pinMode+0x78>)
    d2f6:	601a      	str	r2, [r3, #0]
    d2f8:	e7ec      	b.n	d2d4 <pinMode+0x44>
    d2fa:	4770      	bx	lr
    d2fc:	2000293c 	.word	0x2000293c
    d300:	00013038 	.word	0x00013038
    d304:	00010038 	.word	0x00010038
    d308:	0001f038 	.word	0x0001f038

0000d30c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    d30c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    d30e:	f7f5 fb1d 	bl	294c <setup>
	while (1) {
		loop();
    d312:	f7f6 f8f1 	bl	34f8 <loop>
		yield();
    d316:	f001 fe61 	bl	efdc <yield>
	while (1) {
    d31a:	e7fa      	b.n	d312 <main+0x6>

0000d31c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d31c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d31e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d322:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d326:	d16d      	bne.n	d404 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d328:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d32a:	d341      	bcc.n	d3b0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d32c:	f851 3b04 	ldr.w	r3, [r1], #4
    d330:	f840 3b04 	str.w	r3, [r0], #4
    d334:	f851 3b04 	ldr.w	r3, [r1], #4
    d338:	f840 3b04 	str.w	r3, [r0], #4
    d33c:	f851 3b04 	ldr.w	r3, [r1], #4
    d340:	f840 3b04 	str.w	r3, [r0], #4
    d344:	f851 3b04 	ldr.w	r3, [r1], #4
    d348:	f840 3b04 	str.w	r3, [r0], #4
    d34c:	f851 3b04 	ldr.w	r3, [r1], #4
    d350:	f840 3b04 	str.w	r3, [r0], #4
    d354:	f851 3b04 	ldr.w	r3, [r1], #4
    d358:	f840 3b04 	str.w	r3, [r0], #4
    d35c:	f851 3b04 	ldr.w	r3, [r1], #4
    d360:	f840 3b04 	str.w	r3, [r0], #4
    d364:	f851 3b04 	ldr.w	r3, [r1], #4
    d368:	f840 3b04 	str.w	r3, [r0], #4
    d36c:	f851 3b04 	ldr.w	r3, [r1], #4
    d370:	f840 3b04 	str.w	r3, [r0], #4
    d374:	f851 3b04 	ldr.w	r3, [r1], #4
    d378:	f840 3b04 	str.w	r3, [r0], #4
    d37c:	f851 3b04 	ldr.w	r3, [r1], #4
    d380:	f840 3b04 	str.w	r3, [r0], #4
    d384:	f851 3b04 	ldr.w	r3, [r1], #4
    d388:	f840 3b04 	str.w	r3, [r0], #4
    d38c:	f851 3b04 	ldr.w	r3, [r1], #4
    d390:	f840 3b04 	str.w	r3, [r0], #4
    d394:	f851 3b04 	ldr.w	r3, [r1], #4
    d398:	f840 3b04 	str.w	r3, [r0], #4
    d39c:	f851 3b04 	ldr.w	r3, [r1], #4
    d3a0:	f840 3b04 	str.w	r3, [r0], #4
    d3a4:	f851 3b04 	ldr.w	r3, [r1], #4
    d3a8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d3ac:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d3ae:	d2bd      	bcs.n	d32c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d3b0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d3b2:	d311      	bcc.n	d3d8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d3b4:	f851 3b04 	ldr.w	r3, [r1], #4
    d3b8:	f840 3b04 	str.w	r3, [r0], #4
    d3bc:	f851 3b04 	ldr.w	r3, [r1], #4
    d3c0:	f840 3b04 	str.w	r3, [r0], #4
    d3c4:	f851 3b04 	ldr.w	r3, [r1], #4
    d3c8:	f840 3b04 	str.w	r3, [r0], #4
    d3cc:	f851 3b04 	ldr.w	r3, [r1], #4
    d3d0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d3d4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d3d6:	d2ed      	bcs.n	d3b4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d3d8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d3da:	d305      	bcc.n	d3e8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d3dc:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d3e0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d3e4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d3e6:	d2f9      	bcs.n	d3dc <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d3e8:	3204      	adds	r2, #4
	beq	.Ldone
    d3ea:	d008      	beq.n	d3fe <memcpy+0xe2>

	lsls	r2, r2, #31
    d3ec:	07d2      	lsls	r2, r2, #31
	itt ne
    d3ee:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d3f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d3f4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d3f8:	d301      	bcc.n	d3fe <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d3fa:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d3fc:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d3fe:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d400:	4770      	bx	lr
    d402:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d404:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d406:	d313      	bcc.n	d430 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d408:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d40a:	d08d      	beq.n	d328 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d40c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d410:	d08a      	beq.n	d328 <memcpy+0xc>

	rsb	r3, #4
    d412:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d416:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d418:	07db      	lsls	r3, r3, #31
	itt ne
    d41a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d41c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d420:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d424:	d380      	bcc.n	d328 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d426:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d42a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d42e:	e77b      	b.n	d328 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d430:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d432:	d3d9      	bcc.n	d3e8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d434:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d436:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d43a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d43e:	d2f9      	bcs.n	d434 <memcpy+0x118>

	ldrb	r3, [r1]
    d440:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d442:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d444:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d446:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d448:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d44a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d44c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d44e:	4770      	bx	lr

0000d450 <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
    d450:	b508      	push	{r3, lr}
	return malloc(size);
    d452:	f003 fc9f 	bl	10d94 <malloc>
}
    d456:	bd08      	pop	{r3, pc}

0000d458 <operator delete(void*, unsigned int)>:
{
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
    d458:	b508      	push	{r3, lr}
	free(ptr);
    d45a:	f003 fca3 	bl	10da4 <free>
}
    d45e:	bd08      	pop	{r3, pc}

0000d460 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d460:	b530      	push	{r4, r5, lr}
    d462:	4684      	mov	ip, r0
    d464:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
    d466:	3901      	subs	r1, #1
{
    d468:	460d      	mov	r5, r1
	int i=0, j;
    d46a:	f04f 0e00 	mov.w	lr, #0
    d46e:	e002      	b.n	d476 <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d470:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
    d474:	469c      	mov	ip, r3
		digit = val % radix;
    d476:	fbbc f3f2 	udiv	r3, ip, r2
    d47a:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d47e:	2b09      	cmp	r3, #9
    d480:	bf94      	ite	ls
    d482:	3330      	addls	r3, #48	; 0x30
    d484:	3337      	addhi	r3, #55	; 0x37
    d486:	b2db      	uxtb	r3, r3
    d488:	4674      	mov	r4, lr
    d48a:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
    d48e:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
    d492:	4562      	cmp	r2, ip
    d494:	d9ec      	bls.n	d470 <ultoa+0x10>
	}
	buf[i + 1] = 0;
    d496:	1c63      	adds	r3, r4, #1
    d498:	eb00 0c03 	add.w	ip, r0, r3
    d49c:	2200      	movs	r2, #0
    d49e:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
    d4a0:	4596      	cmp	lr, r2
    d4a2:	dd0e      	ble.n	d4c2 <ultoa+0x62>
		t = buf[j];
    d4a4:	460a      	mov	r2, r1
    d4a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
    d4aa:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    d4ae:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
    d4b0:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
    d4b4:	3202      	adds	r2, #2
    d4b6:	1a12      	subs	r2, r2, r0
    d4b8:	1a43      	subs	r3, r0, r1
    d4ba:	3b01      	subs	r3, #1
    d4bc:	4423      	add	r3, r4
    d4be:	429a      	cmp	r2, r3
    d4c0:	dbf0      	blt.n	d4a4 <ultoa+0x44>
	}
	return buf;
}
    d4c2:	bd30      	pop	{r4, r5, pc}

0000d4c4 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4c8:	ed2d 8b02 	vpush	{d8}
    d4cc:	b084      	sub	sp, #16
    d4ce:	eeb0 8a40 	vmov.f32	s16, s0
    d4d2:	4605      	mov	r5, r0
    d4d4:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d4d6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    d4da:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
    d4de:	eeb4 0a40 	vcmp.f32	s0, s0
    d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4e6:	d62c      	bvs.n	d542 <dtostrf+0x7e>
    d4e8:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d4ea:	eef0 7ac0 	vabs.f32	s15, s0
    d4ee:	ed9f 7ab0 	vldr	s14, [pc, #704]	; d7b0 <dtostrf+0x2ec>
    d4f2:	eef4 7a47 	vcmp.f32	s15, s14
    d4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4fa:	dd52      	ble.n	d5a2 <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
    d4fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d504:	bf4c      	ite	mi
    d506:	2304      	movmi	r3, #4
    d508:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d50a:	4293      	cmp	r3, r2
    d50c:	f280 817c 	bge.w	d808 <dtostrf+0x344>
    d510:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d512:	2800      	cmp	r0, #0
    d514:	f280 817b 	bge.w	d80e <dtostrf+0x34a>
			while (awidth) {
    d518:	2a00      	cmp	r2, #0
    d51a:	f000 813b 	beq.w	d794 <dtostrf+0x2d0>
    d51e:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d520:	2220      	movs	r2, #32
    d522:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d526:	42a3      	cmp	r3, r4
    d528:	d1fb      	bne.n	d522 <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d52a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d532:	f140 8127 	bpl.w	d784 <dtostrf+0x2c0>
    d536:	2200      	movs	r2, #0
    d538:	461c      	mov	r4, r3
    d53a:	232d      	movs	r3, #45	; 0x2d
    d53c:	f804 3b01 	strb.w	r3, [r4], #1
    d540:	e16b      	b.n	d81a <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
    d542:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d54a:	bf4c      	ite	mi
    d54c:	2304      	movmi	r3, #4
    d54e:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d550:	4293      	cmp	r3, r2
    d552:	f280 8133 	bge.w	d7bc <dtostrf+0x2f8>
    d556:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d558:	2800      	cmp	r0, #0
    d55a:	f280 8132 	bge.w	d7c2 <dtostrf+0x2fe>
			while (awidth) {
    d55e:	2a00      	cmp	r2, #0
    d560:	f000 810c 	beq.w	d77c <dtostrf+0x2b8>
    d564:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d566:	2220      	movs	r2, #32
    d568:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d56c:	429c      	cmp	r4, r3
    d56e:	d1fb      	bne.n	d568 <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d570:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d574:	ee18 2a10 	vmov	r2, s16
    d578:	2a00      	cmp	r2, #0
    d57a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d57e:	fe67 7a87 	vselge.f32	s15, s15, s14
    d582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d58a:	f140 80f0 	bpl.w	d76e <dtostrf+0x2aa>
    d58e:	2200      	movs	r2, #0
    d590:	461c      	mov	r4, r3
    d592:	232d      	movs	r3, #45	; 0x2d
    d594:	f804 3b01 	strb.w	r3, [r4], #1
    d598:	e122      	b.n	d7e0 <dtostrf+0x31c>
    d59a:	4623      	mov	r3, r4
    d59c:	e7f8      	b.n	d590 <dtostrf+0xcc>
    d59e:	4623      	mov	r3, r4
    d5a0:	e7ca      	b.n	d538 <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d5a2:	468a      	mov	sl, r1
    d5a4:	aa02      	add	r2, sp, #8
    d5a6:	a903      	add	r1, sp, #12
    d5a8:	4640      	mov	r0, r8
    d5aa:	f003 ffd7 	bl	1155c <fcvtf>
    d5ae:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d5b0:	9b03      	ldr	r3, [sp, #12]
    d5b2:	ea58 0203 	orrs.w	r2, r8, r3
    d5b6:	d131      	bne.n	d61c <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d5b8:	7802      	ldrb	r2, [r0, #0]
    d5ba:	487e      	ldr	r0, [pc, #504]	; (d7b4 <dtostrf+0x2f0>)
    d5bc:	4f7e      	ldr	r7, [pc, #504]	; (d7b8 <dtostrf+0x2f4>)
    d5be:	2a34      	cmp	r2, #52	; 0x34
    d5c0:	bf98      	it	ls
    d5c2:	4607      	movls	r7, r0
		decpt++;
    d5c4:	2301      	movs	r3, #1
    d5c6:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
    d5c8:	461e      	mov	r6, r3
    d5ca:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    d5cc:	f1b8 0e00 	subs.w	lr, r8, #0
    d5d0:	bf18      	it	ne
    d5d2:	f04f 0e01 	movne.w	lr, #1
    d5d6:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
    d5da:	d036      	beq.n	d64a <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    d5dc:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
    d5e0:	4443      	add	r3, r8
    d5e2:	4283      	cmp	r3, r0
    d5e4:	d26d      	bcs.n	d6c2 <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d5e6:	f1b8 0f00 	cmp.w	r8, #0
    d5ea:	dd06      	ble.n	d5fa <dtostrf+0x136>
				val *= 10.0f;
    d5ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    d5f0:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    d5f4:	f1ba 0a01 	subs.w	sl, sl, #1
    d5f8:	d1fa      	bne.n	d5f0 <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d5fa:	aa02      	add	r2, sp, #8
    d5fc:	a901      	add	r1, sp, #4
    d5fe:	4650      	mov	r0, sl
    d600:	eeb0 0a48 	vmov.f32	s0, s16
    d604:	f003 ffaa 	bl	1155c <fcvtf>
    d608:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d60a:	9903      	ldr	r1, [sp, #12]
    d60c:	9b01      	ldr	r3, [sp, #4]
    d60e:	1a5a      	subs	r2, r3, r1
    d610:	f108 0301 	add.w	r3, r8, #1
    d614:	429a      	cmp	r2, r3
    d616:	d051      	beq.n	d6bc <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
    d618:	46ce      	mov	lr, r9
    d61a:	e016      	b.n	d64a <dtostrf+0x186>
	if (-decpt  > (int)precision) {
    d61c:	425b      	negs	r3, r3
    d61e:	4598      	cmp	r8, r3
    d620:	da03      	bge.n	d62a <dtostrf+0x166>
		decpt = -precision;
    d622:	f1c8 0300 	rsb	r3, r8, #0
    d626:	9303      	str	r3, [sp, #12]
		s = "0";
    d628:	4f62      	ldr	r7, [pc, #392]	; (d7b4 <dtostrf+0x2f0>)
	reqd = strlen(s);
    d62a:	4638      	mov	r0, r7
    d62c:	f004 fd68 	bl	12100 <strlen>
    d630:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
    d632:	9b03      	ldr	r3, [sp, #12]
    d634:	4283      	cmp	r3, r0
    d636:	bfb8      	it	lt
    d638:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
    d63a:	2b00      	cmp	r3, #0
    d63c:	d1c6      	bne.n	d5cc <dtostrf+0x108>
    d63e:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
    d640:	f1b8 0e00 	subs.w	lr, r8, #0
    d644:	bf18      	it	ne
    d646:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    d64a:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d64e:	f1b8 0f00 	cmp.w	r8, #0
    d652:	f000 80a3 	beq.w	d79c <dtostrf+0x2d8>
    d656:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
    d658:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d65a:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d65e:	f1b9 0f00 	cmp.w	r9, #0
    d662:	dd30      	ble.n	d6c6 <dtostrf+0x202>
		e += pad;
    d664:	464b      	mov	r3, r9
    d666:	444a      	add	r2, r9
	p = buf;
    d668:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
    d66a:	f04f 0c20 	mov.w	ip, #32
    d66e:	f800 cb01 	strb.w	ip, [r0], #1
    d672:	1a21      	subs	r1, r4, r0
    d674:	4419      	add	r1, r3
    d676:	2900      	cmp	r1, #0
    d678:	dcf9      	bgt.n	d66e <dtostrf+0x1aa>
    d67a:	f1b9 0f00 	cmp.w	r9, #0
    d67e:	bfd8      	it	le
    d680:	2301      	movle	r3, #1
    d682:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    d684:	f1b8 0f00 	cmp.w	r8, #0
    d688:	d002      	beq.n	d690 <dtostrf+0x1cc>
    d68a:	212d      	movs	r1, #45	; 0x2d
    d68c:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
    d690:	9803      	ldr	r0, [sp, #12]
    d692:	b910      	cbnz	r0, d69a <dtostrf+0x1d6>
    d694:	f1be 0f00 	cmp.w	lr, #0
    d698:	d117      	bne.n	d6ca <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    d69a:	2800      	cmp	r0, #0
    d69c:	da02      	bge.n	d6a4 <dtostrf+0x1e0>
    d69e:	f1be 0f00 	cmp.w	lr, #0
    d6a2:	d11a      	bne.n	d6da <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d6a4:	4293      	cmp	r3, r2
    d6a6:	d24d      	bcs.n	d744 <dtostrf+0x280>
		*p++ = *s++;
    d6a8:	4638      	mov	r0, r7
    d6aa:	469c      	mov	ip, r3
    d6ac:	f810 1b01 	ldrb.w	r1, [r0], #1
    d6b0:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d6b4:	4594      	cmp	ip, r2
    d6b6:	d03f      	beq.n	d738 <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d6b8:	272e      	movs	r7, #46	; 0x2e
    d6ba:	e034      	b.n	d726 <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d6bc:	3101      	adds	r1, #1
    d6be:	9103      	str	r1, [sp, #12]
    d6c0:	e7aa      	b.n	d618 <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
    d6c2:	46ce      	mov	lr, r9
    d6c4:	e7c1      	b.n	d64a <dtostrf+0x186>
	p = buf;
    d6c6:	4623      	mov	r3, r4
    d6c8:	e7df      	b.n	d68a <dtostrf+0x1c6>
		*p++ = '0';
    d6ca:	4619      	mov	r1, r3
    d6cc:	2030      	movs	r0, #48	; 0x30
    d6ce:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
    d6d2:	202e      	movs	r0, #46	; 0x2e
    d6d4:	7058      	strb	r0, [r3, #1]
    d6d6:	460b      	mov	r3, r1
    d6d8:	e7e4      	b.n	d6a4 <dtostrf+0x1e0>
		*p++ = '0';
    d6da:	469e      	mov	lr, r3
    d6dc:	2130      	movs	r1, #48	; 0x30
    d6de:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
    d6e2:	212e      	movs	r1, #46	; 0x2e
    d6e4:	7059      	strb	r1, [r3, #1]
    d6e6:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
    d6e8:	4601      	mov	r1, r0
			*p++ = '0';
    d6ea:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d6ee:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
    d6f2:	3101      	adds	r1, #1
    d6f4:	d4fb      	bmi.n	d6ee <dtostrf+0x22a>
			*p++ = '0';
    d6f6:	4243      	negs	r3, r0
    d6f8:	2800      	cmp	r0, #0
    d6fa:	bfa8      	it	ge
    d6fc:	2301      	movge	r3, #1
    d6fe:	4473      	add	r3, lr
    d700:	9103      	str	r1, [sp, #12]
    d702:	ea6f 0000 	mvn.w	r0, r0
    d706:	bfa8      	it	ge
    d708:	2000      	movge	r0, #0
    d70a:	2130      	movs	r1, #48	; 0x30
    d70c:	f80e 1000 	strb.w	r1, [lr, r0]
    d710:	e7c8      	b.n	d6a4 <dtostrf+0x1e0>
    d712:	4663      	mov	r3, ip
	while (p < e) {
    d714:	4293      	cmp	r3, r2
    d716:	d20e      	bcs.n	d736 <dtostrf+0x272>
		*p++ = *s++;
    d718:	469c      	mov	ip, r3
    d71a:	f810 1b01 	ldrb.w	r1, [r0], #1
    d71e:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d722:	4594      	cmp	ip, r2
    d724:	d008      	beq.n	d738 <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d726:	9903      	ldr	r1, [sp, #12]
    d728:	3901      	subs	r1, #1
    d72a:	9103      	str	r1, [sp, #12]
    d72c:	2900      	cmp	r1, #0
    d72e:	d1f0      	bne.n	d712 <dtostrf+0x24e>
    d730:	705f      	strb	r7, [r3, #1]
    d732:	3302      	adds	r3, #2
    d734:	e7ee      	b.n	d714 <dtostrf+0x250>
    d736:	461a      	mov	r2, r3
	}
	if (width < 0) {
    d738:	2d00      	cmp	r5, #0
    d73a:	db05      	blt.n	d748 <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d73c:	2300      	movs	r3, #0
    d73e:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    d740:	4620      	mov	r0, r4
    d742:	e07e      	b.n	d842 <dtostrf+0x37e>
	while (p < e) {
    d744:	461a      	mov	r2, r3
    d746:	e7f7      	b.n	d738 <dtostrf+0x274>
		pad = (reqd + width) * -1;
    d748:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
    d74a:	43f0      	mvns	r0, r6
    d74c:	2e00      	cmp	r6, #0
    d74e:	daf5      	bge.n	d73c <dtostrf+0x278>
    d750:	4611      	mov	r1, r2
    d752:	2520      	movs	r5, #32
    d754:	f801 5b01 	strb.w	r5, [r1], #1
    d758:	f1c1 0301 	rsb	r3, r1, #1
    d75c:	4403      	add	r3, r0
    d75e:	4413      	add	r3, r2
    d760:	2b00      	cmp	r3, #0
    d762:	dcf7      	bgt.n	d754 <dtostrf+0x290>
    d764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d768:	3001      	adds	r0, #1
    d76a:	4402      	add	r2, r0
    d76c:	e7e6      	b.n	d73c <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d76e:	224e      	movs	r2, #78	; 0x4e
    d770:	701a      	strb	r2, [r3, #0]
    d772:	2141      	movs	r1, #65	; 0x41
    d774:	7059      	strb	r1, [r3, #1]
    d776:	1cd8      	adds	r0, r3, #3
    d778:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d77a:	e042      	b.n	d802 <dtostrf+0x33e>
			while (awidth) {
    d77c:	4623      	mov	r3, r4
    d77e:	e6f7      	b.n	d570 <dtostrf+0xac>
		if (width<0) {
    d780:	4623      	mov	r3, r4
    d782:	e6f5      	b.n	d570 <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d784:	2249      	movs	r2, #73	; 0x49
    d786:	701a      	strb	r2, [r3, #0]
    d788:	224e      	movs	r2, #78	; 0x4e
    d78a:	705a      	strb	r2, [r3, #1]
    d78c:	1cd8      	adds	r0, r3, #3
    d78e:	2246      	movs	r2, #70	; 0x46
    d790:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d792:	e054      	b.n	d83e <dtostrf+0x37a>
			while (awidth) {
    d794:	4623      	mov	r3, r4
    d796:	e6c8      	b.n	d52a <dtostrf+0x66>
		if (width<0) {
    d798:	4623      	mov	r3, r4
    d79a:	e6c6      	b.n	d52a <dtostrf+0x66>
	e = p + reqd;
    d79c:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d79e:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d7a2:	f1b9 0f00 	cmp.w	r9, #0
    d7a6:	f73f af5d 	bgt.w	d664 <dtostrf+0x1a0>
	p = buf;
    d7aa:	4623      	mov	r3, r4
    d7ac:	e770      	b.n	d690 <dtostrf+0x1cc>
    d7ae:	bf00      	nop
    d7b0:	7f7fffff 	.word	0x7f7fffff
    d7b4:	20002cac 	.word	0x20002cac
    d7b8:	20002cb0 	.word	0x20002cb0
		if (width<0) {
    d7bc:	2800      	cmp	r0, #0
    d7be:	dbdf      	blt.n	d780 <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d7c0:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d7c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d7c6:	ee18 3a10 	vmov	r3, s16
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d7d0:	fe67 7a87 	vselge.f32	s15, s15, s14
    d7d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d7dc:	f53f aedd 	bmi.w	d59a <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d7e0:	234e      	movs	r3, #78	; 0x4e
    d7e2:	7023      	strb	r3, [r4, #0]
    d7e4:	2141      	movs	r1, #65	; 0x41
    d7e6:	7061      	strb	r1, [r4, #1]
    d7e8:	1ce0      	adds	r0, r4, #3
    d7ea:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d7ec:	b14a      	cbz	r2, d802 <dtostrf+0x33e>
    d7ee:	4615      	mov	r5, r2
    d7f0:	3203      	adds	r2, #3
    d7f2:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d7f4:	4602      	mov	r2, r0
			*buf++ = ' ';
    d7f6:	2120      	movs	r1, #32
    d7f8:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
    d7fc:	4293      	cmp	r3, r2
    d7fe:	d1fb      	bne.n	d7f8 <dtostrf+0x334>
			*buf++ = ' ';
    d800:	4428      	add	r0, r5
		*buf = 0;
    d802:	2300      	movs	r3, #0
    d804:	7003      	strb	r3, [r0, #0]
		return buf;
    d806:	e01c      	b.n	d842 <dtostrf+0x37e>
		if (width<0) {
    d808:	2800      	cmp	r0, #0
    d80a:	dbc5      	blt.n	d798 <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d80c:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
    d80e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d816:	f53f aec2 	bmi.w	d59e <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d81a:	2349      	movs	r3, #73	; 0x49
    d81c:	7023      	strb	r3, [r4, #0]
    d81e:	234e      	movs	r3, #78	; 0x4e
    d820:	7063      	strb	r3, [r4, #1]
    d822:	1ce0      	adds	r0, r4, #3
    d824:	2346      	movs	r3, #70	; 0x46
    d826:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d828:	b14a      	cbz	r2, d83e <dtostrf+0x37a>
    d82a:	4615      	mov	r5, r2
    d82c:	3203      	adds	r2, #3
    d82e:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d830:	4603      	mov	r3, r0
			*buf++ = ' ';
    d832:	2120      	movs	r1, #32
    d834:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
    d838:	429a      	cmp	r2, r3
    d83a:	d1fb      	bne.n	d834 <dtostrf+0x370>
			*buf++ = ' ';
    d83c:	4428      	add	r0, r5
		*buf = 0;
    d83e:	2300      	movs	r3, #0
    d840:	7003      	strb	r3, [r0, #0]
}
    d842:	b004      	add	sp, #16
    d844:	ecbd 8b02 	vpop	{d8}
    d848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d84c <flexpwmWrite>:
{
    d84c:	b570      	push	{r4, r5, r6, lr}
	uint16_t mask = 1 << submodule;
    d84e:	f04f 0c01 	mov.w	ip, #1
    d852:	fa0c fc01 	lsl.w	ip, ip, r1
    d856:	fa1f f58c 	uxth.w	r5, ip
	uint32_t modulo = p->SM[submodule].VAL1;
    d85a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    d85e:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    d862:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    d866:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    d86a:	fb0e 3303 	mla	r3, lr, r3, r3
    d86e:	4c27      	ldr	r4, [pc, #156]	; (d90c <flexpwmWrite+0xc0>)
    d870:	7824      	ldrb	r4, [r4, #0]
    d872:	40e3      	lsrs	r3, r4
    d874:	4573      	cmp	r3, lr
    d876:	bf28      	it	cs
    d878:	4673      	movcs	r3, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d87a:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    d87e:	b2a4      	uxth	r4, r4
    d880:	012e      	lsls	r6, r5, #4
    d882:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    d886:	4334      	orrs	r4, r6
    d888:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    d88c:	2a01      	cmp	r2, #1
    d88e:	d01f      	beq.n	d8d0 <flexpwmWrite+0x84>
    d890:	2a02      	cmp	r2, #2
    d892:	d02d      	beq.n	d8f0 <flexpwmWrite+0xa4>
    d894:	b14a      	cbz	r2, d8aa <flexpwmWrite+0x5e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d896:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d89a:	b29b      	uxth	r3, r3
    d89c:	f00c 0c0f 	and.w	ip, ip, #15
    d8a0:	ea43 0c0c 	orr.w	ip, r3, ip
    d8a4:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    d8a8:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL0 = modulo - cval;
    d8aa:	ebae 0e03 	sub.w	lr, lr, r3
    d8ae:	fa1f fe8e 	uxth.w	lr, lr
    d8b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d8b6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d8ba:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    d8be:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d8c2:	b29b      	uxth	r3, r3
    d8c4:	f00c 020f 	and.w	r2, ip, #15
    d8c8:	4313      	orrs	r3, r2
    d8ca:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d8ce:	e7e2      	b.n	d896 <flexpwmWrite+0x4a>
		p->SM[submodule].VAL3 = cval;
    d8d0:	b29b      	uxth	r3, r3
    d8d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d8d6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d8da:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    d8dc:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d8e0:	b29b      	uxth	r3, r3
    d8e2:	022d      	lsls	r5, r5, #8
    d8e4:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    d8e8:	432b      	orrs	r3, r5
    d8ea:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    d8ee:	e7d2      	b.n	d896 <flexpwmWrite+0x4a>
		p->SM[submodule].VAL5 = cval;
    d8f0:	b29b      	uxth	r3, r3
    d8f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d8f6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    d8fa:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    d8fc:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    d900:	b29b      	uxth	r3, r3
    d902:	431e      	orrs	r6, r3
    d904:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    d908:	e7c5      	b.n	d896 <flexpwmWrite+0x4a>
    d90a:	bf00      	nop
    d90c:	20003a59 	.word	0x20003a59

0000d910 <flexpwmFrequency>:
{
    d910:	b530      	push	{r4, r5, lr}
	uint16_t mask = 1 << submodule;
    d912:	f04f 0c01 	mov.w	ip, #1
    d916:	fa0c fc01 	lsl.w	ip, ip, r1
    d91a:	fa1f f58c 	uxth.w	r5, ip
	uint32_t olddiv = p->SM[submodule].VAL1;
    d91e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    d922:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    d926:	89dc      	ldrh	r4, [r3, #14]
    d928:	b2a4      	uxth	r4, r4
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    d92a:	4b32      	ldr	r3, [pc, #200]	; (d9f4 <flexpwmFrequency+0xe4>)
    d92c:	ed93 7a00 	vldr	s14, [r3]
    d930:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d934:	eec7 7a00 	vdiv.f32	s15, s14, s0
    d938:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    d93c:	ee77 7a87 	vadd.f32	s15, s15, s14
    d940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    d944:	ee17 2a90 	vmov	r2, s15
	while (newdiv > 65535 && prescale < 7) {
    d948:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    d94c:	d350      	bcc.n	d9f0 <flexpwmFrequency+0xe0>
	uint32_t prescale = 0;
    d94e:	2300      	movs	r3, #0
	while (newdiv > 65535 && prescale < 7) {
    d950:	f64f 7eff 	movw	lr, #65535	; 0xffff
		newdiv = newdiv >> 1;
    d954:	0852      	lsrs	r2, r2, #1
		prescale = prescale + 1;
    d956:	3301      	adds	r3, #1
	while (newdiv > 65535 && prescale < 7) {
    d958:	4572      	cmp	r2, lr
    d95a:	d901      	bls.n	d960 <flexpwmFrequency+0x50>
    d95c:	2b06      	cmp	r3, #6
    d95e:	d9f9      	bls.n	d954 <flexpwmFrequency+0x44>
	if (newdiv > 65535) {
    d960:	2a02      	cmp	r2, #2
    d962:	bf38      	it	cc
    d964:	2202      	movcc	r2, #2
    d966:	f64f 7eff 	movw	lr, #65535	; 0xffff
    d96a:	4572      	cmp	r2, lr
    d96c:	bf28      	it	cs
    d96e:	4672      	movcs	r2, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d970:	f8b0 e188 	ldrh.w	lr, [r0, #392]	; 0x188
    d974:	fa1f fe8e 	uxth.w	lr, lr
    d978:	012d      	lsls	r5, r5, #4
    d97a:	b2ed      	uxtb	r5, r5
    d97c:	ea4e 0e05 	orr.w	lr, lr, r5
    d980:	f8a0 e188 	strh.w	lr, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    d984:	011b      	lsls	r3, r3, #4
    d986:	b2db      	uxtb	r3, r3
    d988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    d98c:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    d990:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5
    d994:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    d998:	1e53      	subs	r3, r2, #1
    d99a:	b29b      	uxth	r3, r3
    d99c:	f8ae 300e 	strh.w	r3, [lr, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    d9a0:	f8be 300a 	ldrh.w	r3, [lr, #10]
    d9a4:	b29b      	uxth	r3, r3
    d9a6:	fb02 f303 	mul.w	r3, r2, r3
    d9aa:	fbb3 f3f4 	udiv	r3, r3, r4
    d9ae:	b29b      	uxth	r3, r3
    d9b0:	f8ae 300a 	strh.w	r3, [lr, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    d9b4:	f8be 3016 	ldrh.w	r3, [lr, #22]
    d9b8:	b29b      	uxth	r3, r3
    d9ba:	fb02 f303 	mul.w	r3, r2, r3
    d9be:	fbb3 f3f4 	udiv	r3, r3, r4
    d9c2:	b29b      	uxth	r3, r3
    d9c4:	f8ae 3016 	strh.w	r3, [lr, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    d9c8:	f8be 301e 	ldrh.w	r3, [lr, #30]
    d9cc:	b29b      	uxth	r3, r3
    d9ce:	fb02 f303 	mul.w	r3, r2, r3
    d9d2:	fbb3 f3f4 	udiv	r3, r3, r4
    d9d6:	b29b      	uxth	r3, r3
    d9d8:	f8ae 301e 	strh.w	r3, [lr, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d9dc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d9e0:	b29b      	uxth	r3, r3
    d9e2:	f00c 0c0f 	and.w	ip, ip, #15
    d9e6:	ea43 030c 	orr.w	r3, r3, ip
    d9ea:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    d9ee:	bd30      	pop	{r4, r5, pc}
	uint32_t prescale = 0;
    d9f0:	2300      	movs	r3, #0
    d9f2:	e7b5      	b.n	d960 <flexpwmFrequency+0x50>
    d9f4:	20003334 	.word	0x20003334

0000d9f8 <quadtimerWrite>:
{
    d9f8:	b510      	push	{r4, lr}
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    d9fa:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
    d9fe:	f8be c006 	ldrh.w	ip, [lr, #6]
    da02:	fa1f fc8c 	uxth.w	ip, ip
    da06:	f8be 3010 	ldrh.w	r3, [lr, #16]
    da0a:	f1cc 1c01 	rsb	ip, ip, #65537	; 0x10001
    da0e:	fa1c f383 	uxtah	r3, ip, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    da12:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    da16:	fb0c f202 	mul.w	r2, ip, r2
    da1a:	4c08      	ldr	r4, [pc, #32]	; (da3c <quadtimerWrite+0x44>)
    da1c:	7824      	ldrb	r4, [r4, #0]
    da1e:	40e2      	lsrs	r2, r4
	if (high >= modulo - 1) high = modulo - 2;
    da20:	4594      	cmp	ip, r2
    da22:	bf98      	it	ls
    da24:	1e9a      	subls	r2, r3, #2
	uint32_t low = modulo - high; // low must 2 or higher
    da26:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].LOAD = 65537 - low;
    da28:	f1c3 0301 	rsb	r3, r3, #1
    da2c:	b29b      	uxth	r3, r3
    da2e:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->CH[submodule].CMPLD1 = high;
    da32:	b292      	uxth	r2, r2
    da34:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    da38:	8202      	strh	r2, [r0, #16]
}
    da3a:	bd10      	pop	{r4, pc}
    da3c:	20003a59 	.word	0x20003a59

0000da40 <quadtimerFrequency>:
{
    da40:	b500      	push	{lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    da42:	4b23      	ldr	r3, [pc, #140]	; (dad0 <quadtimerFrequency+0x90>)
    da44:	ed93 7a00 	vldr	s14, [r3]
    da48:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    da4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    da50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    da54:	ee77 7a87 	vadd.f32	s15, s15, s14
    da58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    da5c:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    da60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    da64:	4293      	cmp	r3, r2
    da66:	d930      	bls.n	daca <quadtimerFrequency+0x8a>
	uint32_t prescale = 0;
    da68:	2200      	movs	r2, #0
	while (newdiv > 65534 && prescale < 7) {
    da6a:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = newdiv >> 1; 
    da6e:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    da70:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    da72:	4563      	cmp	r3, ip
    da74:	d901      	bls.n	da7a <quadtimerFrequency+0x3a>
    da76:	2a06      	cmp	r2, #6
    da78:	d9f9      	bls.n	da6e <quadtimerFrequency+0x2e>
	if (newdiv > 65534) {
    da7a:	2b02      	cmp	r3, #2
    da7c:	bf38      	it	cc
    da7e:	2302      	movcc	r3, #2
    da80:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
    da84:	4563      	cmp	r3, ip
    da86:	bf28      	it	cs
    da88:	4663      	movcs	r3, ip
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    da8a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    da8e:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    da92:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    da96:	88c8      	ldrh	r0, [r1, #6]
    da98:	b280      	uxth	r0, r0
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    da9a:	fb0e fc03 	mul.w	ip, lr, r3
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    da9e:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    daa2:	4470      	add	r0, lr
    daa4:	fbbc f0f0 	udiv	r0, ip, r0
	uint32_t low = newdiv - high;
    daa8:	1a1b      	subs	r3, r3, r0
	p->CH[submodule].LOAD = 65537 - low;
    daaa:	f1c3 0301 	rsb	r3, r3, #1
    daae:	b29b      	uxth	r3, r3
    dab0:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    dab2:	b280      	uxth	r0, r0
    dab4:	8208      	strh	r0, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    dab6:	3208      	adds	r2, #8
    dab8:	0252      	lsls	r2, r2, #9
    daba:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    dabe:	f242 0326 	movw	r3, #8230	; 0x2026
    dac2:	4313      	orrs	r3, r2
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    dac4:	818b      	strh	r3, [r1, #12]
}
    dac6:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t prescale = 0;
    daca:	2200      	movs	r2, #0
    dacc:	e7d5      	b.n	da7a <quadtimerFrequency+0x3a>
    dace:	bf00      	nop
    dad0:	20003334 	.word	0x20003334

0000dad4 <analogWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    dad4:	2836      	cmp	r0, #54	; 0x36
    dad6:	d83f      	bhi.n	db58 <analogWrite+0x84>
{
    dad8:	b538      	push	{r3, r4, r5, lr}
    dada:	4604      	mov	r4, r0
	info = pwm_pin_info + pin;
    dadc:	4b1f      	ldr	r3, [pc, #124]	; (db5c <analogWrite+0x88>)
    dade:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	if (info->type == 1) {
    dae2:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    dae6:	2b01      	cmp	r3, #1
    dae8:	d014      	beq.n	db14 <analogWrite+0x40>
	} else if (info->type == 2) {
    daea:	2b02      	cmp	r3, #2
    daec:	d12b      	bne.n	db46 <analogWrite+0x72>
		switch ((info->module >> 4) & 3) {
    daee:	f895 c001 	ldrb.w	ip, [r5, #1]
    daf2:	f3cc 1301 	ubfx	r3, ip, #4, #2
    daf6:	2b01      	cmp	r3, #1
    daf8:	d02a      	beq.n	db50 <analogWrite+0x7c>
    dafa:	2b02      	cmp	r3, #2
    dafc:	d02a      	beq.n	db54 <analogWrite+0x80>
		  case 0: qtimer = &IMXRT_TMR1; break;
    dafe:	4818      	ldr	r0, [pc, #96]	; (db60 <analogWrite+0x8c>)
    db00:	4a18      	ldr	r2, [pc, #96]	; (db64 <analogWrite+0x90>)
    db02:	2b00      	cmp	r3, #0
    db04:	bf08      	it	eq
    db06:	4610      	moveq	r0, r2
		quadtimerWrite(qtimer, info->module & 0x03, val);
    db08:	b28a      	uxth	r2, r1
    db0a:	f00c 0103 	and.w	r1, ip, #3
    db0e:	f7ff ff73 	bl	d9f8 <quadtimerWrite>
    db12:	e012      	b.n	db3a <analogWrite+0x66>
		switch ((info->module >> 4) & 3) {
    db14:	f895 c001 	ldrb.w	ip, [r5, #1]
    db18:	f3cc 1301 	ubfx	r3, ip, #4, #2
    db1c:	2b01      	cmp	r3, #1
    db1e:	d013      	beq.n	db48 <analogWrite+0x74>
    db20:	2b02      	cmp	r3, #2
    db22:	d013      	beq.n	db4c <analogWrite+0x78>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    db24:	4810      	ldr	r0, [pc, #64]	; (db68 <analogWrite+0x94>)
    db26:	4a11      	ldr	r2, [pc, #68]	; (db6c <analogWrite+0x98>)
    db28:	2b00      	cmp	r3, #0
    db2a:	bf08      	it	eq
    db2c:	4610      	moveq	r0, r2
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    db2e:	b28b      	uxth	r3, r1
    db30:	78aa      	ldrb	r2, [r5, #2]
    db32:	f00c 0103 	and.w	r1, ip, #3
    db36:	f7ff fe89 	bl	d84c <flexpwmWrite>
	*(portConfigRegister(pin)) = info->muxval;
    db3a:	4b0d      	ldr	r3, [pc, #52]	; (db70 <analogWrite+0x9c>)
    db3c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    db40:	685b      	ldr	r3, [r3, #4]
    db42:	78ea      	ldrb	r2, [r5, #3]
    db44:	601a      	str	r2, [r3, #0]
}
    db46:	bd38      	pop	{r3, r4, r5, pc}
		switch ((info->module >> 4) & 3) {
    db48:	480a      	ldr	r0, [pc, #40]	; (db74 <analogWrite+0xa0>)
    db4a:	e7f0      	b.n	db2e <analogWrite+0x5a>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    db4c:	480a      	ldr	r0, [pc, #40]	; (db78 <analogWrite+0xa4>)
    db4e:	e7ee      	b.n	db2e <analogWrite+0x5a>
		switch ((info->module >> 4) & 3) {
    db50:	480a      	ldr	r0, [pc, #40]	; (db7c <analogWrite+0xa8>)
    db52:	e7d9      	b.n	db08 <analogWrite+0x34>
		  case 2: qtimer = &IMXRT_TMR3; break;
    db54:	480a      	ldr	r0, [pc, #40]	; (db80 <analogWrite+0xac>)
    db56:	e7d7      	b.n	db08 <analogWrite+0x34>
    db58:	4770      	bx	lr
    db5a:	bf00      	nop
    db5c:	20002d98 	.word	0x20002d98
    db60:	401e8000 	.word	0x401e8000
    db64:	401dc000 	.word	0x401dc000
    db68:	403e8000 	.word	0x403e8000
    db6c:	403dc000 	.word	0x403dc000
    db70:	2000293c 	.word	0x2000293c
    db74:	403e0000 	.word	0x403e0000
    db78:	403e4000 	.word	0x403e4000
    db7c:	401e0000 	.word	0x401e0000
    db80:	401e4000 	.word	0x401e4000

0000db84 <analogWriteFrequency>:
	if (pin >= CORE_NUM_DIGITAL) return;
    db84:	2836      	cmp	r0, #54	; 0x36
    db86:	d835      	bhi.n	dbf4 <analogWriteFrequency+0x70>
{
    db88:	b510      	push	{r4, lr}
	info = pwm_pin_info + pin;
    db8a:	4b1b      	ldr	r3, [pc, #108]	; (dbf8 <analogWriteFrequency+0x74>)
    db8c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	if (info->type == 1) {
    db90:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    db94:	2b01      	cmp	r3, #1
    db96:	d002      	beq.n	db9e <analogWriteFrequency+0x1a>
	} else if (info->type == 2) {
    db98:	2b02      	cmp	r3, #2
    db9a:	d016      	beq.n	dbca <analogWriteFrequency+0x46>
}
    db9c:	bd10      	pop	{r4, pc}
		switch ((info->module >> 4) & 3) {
    db9e:	7851      	ldrb	r1, [r2, #1]
    dba0:	f3c1 1301 	ubfx	r3, r1, #4, #2
    dba4:	2b01      	cmp	r3, #1
    dba6:	d00c      	beq.n	dbc2 <analogWriteFrequency+0x3e>
    dba8:	2b02      	cmp	r3, #2
    dbaa:	d00c      	beq.n	dbc6 <analogWriteFrequency+0x42>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    dbac:	4813      	ldr	r0, [pc, #76]	; (dbfc <analogWriteFrequency+0x78>)
    dbae:	4c14      	ldr	r4, [pc, #80]	; (dc00 <analogWriteFrequency+0x7c>)
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	bf08      	it	eq
    dbb4:	4620      	moveq	r0, r4
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    dbb6:	7892      	ldrb	r2, [r2, #2]
    dbb8:	f001 0103 	and.w	r1, r1, #3
    dbbc:	f7ff fea8 	bl	d910 <flexpwmFrequency>
    dbc0:	e7ec      	b.n	db9c <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    dbc2:	4810      	ldr	r0, [pc, #64]	; (dc04 <analogWriteFrequency+0x80>)
    dbc4:	e7f7      	b.n	dbb6 <analogWriteFrequency+0x32>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    dbc6:	4810      	ldr	r0, [pc, #64]	; (dc08 <analogWriteFrequency+0x84>)
    dbc8:	e7f5      	b.n	dbb6 <analogWriteFrequency+0x32>
		switch ((info->module >> 4) & 3) {
    dbca:	7851      	ldrb	r1, [r2, #1]
    dbcc:	f3c1 1301 	ubfx	r3, r1, #4, #2
    dbd0:	2b01      	cmp	r3, #1
    dbd2:	d00b      	beq.n	dbec <analogWriteFrequency+0x68>
    dbd4:	2b02      	cmp	r3, #2
    dbd6:	d00b      	beq.n	dbf0 <analogWriteFrequency+0x6c>
		  case 0: qtimer = &IMXRT_TMR1; break;
    dbd8:	480c      	ldr	r0, [pc, #48]	; (dc0c <analogWriteFrequency+0x88>)
    dbda:	4a0d      	ldr	r2, [pc, #52]	; (dc10 <analogWriteFrequency+0x8c>)
    dbdc:	2b00      	cmp	r3, #0
    dbde:	bf08      	it	eq
    dbe0:	4610      	moveq	r0, r2
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    dbe2:	f001 0103 	and.w	r1, r1, #3
    dbe6:	f7ff ff2b 	bl	da40 <quadtimerFrequency>
    dbea:	e7d7      	b.n	db9c <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    dbec:	4809      	ldr	r0, [pc, #36]	; (dc14 <analogWriteFrequency+0x90>)
    dbee:	e7f8      	b.n	dbe2 <analogWriteFrequency+0x5e>
		  case 2: qtimer = &IMXRT_TMR3; break;
    dbf0:	4809      	ldr	r0, [pc, #36]	; (dc18 <analogWriteFrequency+0x94>)
    dbf2:	e7f6      	b.n	dbe2 <analogWriteFrequency+0x5e>
    dbf4:	4770      	bx	lr
    dbf6:	bf00      	nop
    dbf8:	20002d98 	.word	0x20002d98
    dbfc:	403e8000 	.word	0x403e8000
    dc00:	403dc000 	.word	0x403dc000
    dc04:	403e0000 	.word	0x403e0000
    dc08:	403e4000 	.word	0x403e4000
    dc0c:	401e8000 	.word	0x401e8000
    dc10:	401dc000 	.word	0x401dc000
    dc14:	401e0000 	.word	0x401e0000
    dc18:	401e4000 	.word	0x401e4000

0000dc1c <flexpwm_init>:
{
    dc1c:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    dc1e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    dc22:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    dc26:	230f      	movs	r3, #15
    dc28:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    dc2c:	2100      	movs	r1, #0
    dc2e:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    dc32:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    dc36:	b29b      	uxth	r3, r3
    dc38:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    dc3c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dc40:	f44f 4460 	mov.w	r4, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dc44:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
    dc48:	460a      	mov	r2, r1
		p->SM[i].VAL1 = 33464;
    dc4a:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dc4e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    dc52:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    dc56:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dc58:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    dc5c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    dc5e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    dc60:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    dc62:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    dc64:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    dc68:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    dc6a:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    dc6c:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    dc6e:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    dc70:	3101      	adds	r1, #1
    dc72:	2904      	cmp	r1, #4
    dc74:	d1eb      	bne.n	dc4e <flexpwm_init+0x32>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    dc76:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    dc7a:	b29b      	uxth	r3, r3
    dc7c:	f043 030f 	orr.w	r3, r3, #15
    dc80:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    dc84:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    dc88:	b29b      	uxth	r3, r3
    dc8a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    dc8e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    dc92:	bd10      	pop	{r4, pc}

0000dc94 <quadtimer_init>:
{
    dc94:	b570      	push	{r4, r5, r6, lr}
	for (i=0; i < 4; i++) {
    dc96:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    dc98:	4611      	mov	r1, r2
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    dc9a:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    dc9c:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    dca0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    dca4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    dca8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    dcac:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    dcb0:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    dcb2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    dcb4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    dcb6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    dcb8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    dcba:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    dcbe:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    dcc0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    dcc4:	3201      	adds	r2, #1
    dcc6:	2a04      	cmp	r2, #4
    dcc8:	d1ee      	bne.n	dca8 <quadtimer_init+0x14>
}
    dcca:	bd70      	pop	{r4, r5, r6, pc}

0000dccc <pwm_init>:
{
    dccc:	b508      	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    dcce:	4b10      	ldr	r3, [pc, #64]	; (dd10 <pwm_init+0x44>)
    dcd0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    dcd2:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    dcd6:	679a      	str	r2, [r3, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    dcd8:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    dcdc:	4a0d      	ldr	r2, [pc, #52]	; (dd14 <pwm_init+0x48>)
    dcde:	430a      	orrs	r2, r1
    dce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    dce4:	480c      	ldr	r0, [pc, #48]	; (dd18 <pwm_init+0x4c>)
    dce6:	f7ff ff99 	bl	dc1c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    dcea:	480c      	ldr	r0, [pc, #48]	; (dd1c <pwm_init+0x50>)
    dcec:	f7ff ff96 	bl	dc1c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    dcf0:	480b      	ldr	r0, [pc, #44]	; (dd20 <pwm_init+0x54>)
    dcf2:	f7ff ff93 	bl	dc1c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    dcf6:	480b      	ldr	r0, [pc, #44]	; (dd24 <pwm_init+0x58>)
    dcf8:	f7ff ff90 	bl	dc1c <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    dcfc:	480a      	ldr	r0, [pc, #40]	; (dd28 <pwm_init+0x5c>)
    dcfe:	f7ff ffc9 	bl	dc94 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    dd02:	480a      	ldr	r0, [pc, #40]	; (dd2c <pwm_init+0x60>)
    dd04:	f7ff ffc6 	bl	dc94 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    dd08:	4809      	ldr	r0, [pc, #36]	; (dd30 <pwm_init+0x64>)
    dd0a:	f7ff ffc3 	bl	dc94 <quadtimer_init>
}
    dd0e:	bd08      	pop	{r3, pc}
    dd10:	400fc000 	.word	0x400fc000
    dd14:	fc030000 	.word	0xfc030000
    dd18:	403dc000 	.word	0x403dc000
    dd1c:	403e0000 	.word	0x403e0000
    dd20:	403e4000 	.word	0x403e4000
    dd24:	403e8000 	.word	0x403e8000
    dd28:	401dc000 	.word	0x401dc000
    dd2c:	401e0000 	.word	0x401e0000
    dd30:	401e4000 	.word	0x401e4000

0000dd34 <analogWriteRes>:
	xbar[output] = input;
#endif
}

uint32_t analogWriteRes(uint32_t bits)
{
    dd34:	4603      	mov	r3, r0
	if (bits < 1) {
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
    dd36:	4a05      	ldr	r2, [pc, #20]	; (dd4c <analogWriteRes+0x18>)
    dd38:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    dd3a:	2b10      	cmp	r3, #16
    dd3c:	bf28      	it	cs
    dd3e:	2310      	movcs	r3, #16
    dd40:	2b01      	cmp	r3, #1
    dd42:	bf38      	it	cc
    dd44:	2301      	movcc	r3, #1
    dd46:	7013      	strb	r3, [r2, #0]
	return prior;
}
    dd48:	4770      	bx	lr
    dd4a:	bf00      	nop
    dd4c:	20003a59 	.word	0x20003a59

0000dd50 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    dd50:	4b07      	ldr	r3, [pc, #28]	; (dd70 <rtc_get+0x20>)
    dd52:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    dd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    dd56:	4a06      	ldr	r2, [pc, #24]	; (dd70 <rtc_get+0x20>)
    dd58:	4684      	mov	ip, r0
    dd5a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    dd5c:	4619      	mov	r1, r3
    dd5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    dd60:	4299      	cmp	r1, r3
    dd62:	d1f9      	bne.n	dd58 <rtc_get+0x8>
    dd64:	4584      	cmp	ip, r0
    dd66:	d1f7      	bne.n	dd58 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    dd68:	0bdb      	lsrs	r3, r3, #15
}
    dd6a:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    dd6e:	4770      	bx	lr
    dd70:	400d4000 	.word	0x400d4000

0000dd74 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    dd74:	4770      	bx	lr
	...

0000dd78 <unused_interrupt_vector>:
	__disable_irq();
    dd78:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    dd7a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    dd7e:	4c52      	ldr	r4, [pc, #328]	; (dec8 <unused_interrupt_vector+0x150>)
    dd80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    dd84:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    dd88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dd8c:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
    dd90:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    dd94:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    dd98:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    dd9c:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
    dda0:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    dda4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    dda8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    ddac:	6993      	ldr	r3, [r2, #24]
    ddae:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    ddb2:	69d3      	ldr	r3, [r2, #28]
    ddb4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    ddb8:	f000 f8d2 	bl	df60 <tempmonGetTemp>
    ddbc:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    ddc0:	f7ff ffc6 	bl	dd50 <rtc_get>
    ddc4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    ddc8:	230b      	movs	r3, #11
    ddca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
    ddce:	483f      	ldr	r0, [pc, #252]	; (decc <unused_interrupt_vector+0x154>)
	crc = 0xFFFFFFFF;
    ddd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    ddd4:	493e      	ldr	r1, [pc, #248]	; (ded0 <unused_interrupt_vector+0x158>)
	while (p < end) {
    ddd6:	4d3f      	ldr	r5, [pc, #252]	; (ded4 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    ddd8:	6803      	ldr	r3, [r0, #0]
    ddda:	3004      	adds	r0, #4
    dddc:	405a      	eors	r2, r3
    ddde:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    dde0:	f002 0301 	and.w	r3, r2, #1
    dde4:	fb01 f303 	mul.w	r3, r1, r3
    dde8:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    ddec:	3c01      	subs	r4, #1
    ddee:	d1f7      	bne.n	dde0 <unused_interrupt_vector+0x68>
	while (p < end) {
    ddf0:	42a8      	cmp	r0, r5
    ddf2:	d1f1      	bne.n	ddd8 <unused_interrupt_vector+0x60>
	info->crc = crc;
    ddf4:	4b34      	ldr	r3, [pc, #208]	; (dec8 <unused_interrupt_vector+0x150>)
    ddf6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    ddfa:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    ddfe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    de02:	4a32      	ldr	r2, [pc, #200]	; (decc <unused_interrupt_vector+0x154>)
    de04:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
    de08:	3220      	adds	r2, #32
    de0a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    de0e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    de12:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    de16:	4a30      	ldr	r2, [pc, #192]	; (ded8 <unused_interrupt_vector+0x160>)
    de18:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    de1a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    de1e:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    de20:	4b2e      	ldr	r3, [pc, #184]	; (dedc <unused_interrupt_vector+0x164>)
    de22:	2102      	movs	r1, #2
    de24:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    de26:	69d3      	ldr	r3, [r2, #28]
    de28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    de2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    de30:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    de32:	4b2b      	ldr	r3, [pc, #172]	; (dee0 <unused_interrupt_vector+0x168>)
    de34:	681a      	ldr	r2, [r3, #0]
    de36:	4b2b      	ldr	r3, [pc, #172]	; (dee4 <unused_interrupt_vector+0x16c>)
    de38:	429a      	cmp	r2, r3
    de3a:	d81b      	bhi.n	de74 <unused_interrupt_vector+0xfc>
	PIT_MCR = 0;
    de3c:	4b27      	ldr	r3, [pc, #156]	; (dedc <unused_interrupt_vector+0x164>)
    de3e:	2200      	movs	r2, #0
    de40:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
    de42:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    de46:	4a28      	ldr	r2, [pc, #160]	; (dee8 <unused_interrupt_vector+0x170>)
    de48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    de4c:	2201      	movs	r2, #1
    de4e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    de52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    de56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    de5a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    de5e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    de62:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    de66:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    de6a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    de6e:	4d1b      	ldr	r5, [pc, #108]	; (dedc <unused_interrupt_vector+0x164>)
			PIT_TFLG0 = 1;
    de70:	2601      	movs	r6, #1
    de72:	e005      	b.n	de80 <unused_interrupt_vector+0x108>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    de74:	4618      	mov	r0, r3
    de76:	f7ff f845 	bl	cf04 <set_arm_clock>
    de7a:	e7df      	b.n	de3c <unused_interrupt_vector+0xc4>
		usb_isr();
    de7c:	f000 f9e8 	bl	e250 <usb_isr>
		if (PIT_TFLG0) {
    de80:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    de84:	2b00      	cmp	r3, #0
    de86:	d0f9      	beq.n	de7c <unused_interrupt_vector+0x104>
			PIT_TFLG0 = 1;
    de88:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    de8c:	3401      	adds	r4, #1
    de8e:	2c4f      	cmp	r4, #79	; 0x4f
    de90:	d9f4      	bls.n	de7c <unused_interrupt_vector+0x104>
	USB1_USBCMD = USB_USBCMD_RST;
    de92:	4b16      	ldr	r3, [pc, #88]	; (deec <unused_interrupt_vector+0x174>)
    de94:	2202      	movs	r2, #2
    de96:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    de9a:	4b15      	ldr	r3, [pc, #84]	; (def0 <unused_interrupt_vector+0x178>)
    de9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    dea0:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dea2:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
    dea6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    deaa:	b93b      	cbnz	r3, debc <unused_interrupt_vector+0x144>
	SRC_GPR5 = 0x0BAD00F1;
    deac:	4811      	ldr	r0, [pc, #68]	; (def4 <unused_interrupt_vector+0x17c>)
    deae:	4912      	ldr	r1, [pc, #72]	; (def8 <unused_interrupt_vector+0x180>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    deb0:	4a0a      	ldr	r2, [pc, #40]	; (dedc <unused_interrupt_vector+0x164>)
	SRC_GPR5 = 0x0BAD00F1;
    deb2:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    deb4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    deb8:	2b00      	cmp	r3, #0
    deba:	d0fa      	beq.n	deb2 <unused_interrupt_vector+0x13a>
	SCB_AIRCR = 0x05FA0004;
    debc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dec0:	4a0e      	ldr	r2, [pc, #56]	; (defc <unused_interrupt_vector+0x184>)
    dec2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    dec6:	e7fe      	b.n	dec6 <unused_interrupt_vector+0x14e>
    dec8:	2027ff00 	.word	0x2027ff00
    decc:	2027ff80 	.word	0x2027ff80
    ded0:	edb88320 	.word	0xedb88320
    ded4:	2027ffa8 	.word	0x2027ffa8
    ded8:	400fc000 	.word	0x400fc000
    dedc:	40084000 	.word	0x40084000
    dee0:	20003338 	.word	0x20003338
    dee4:	0bcd3d80 	.word	0x0bcd3d80
    dee8:	00249f00 	.word	0x00249f00
    deec:	402e0000 	.word	0x402e0000
    def0:	400d9000 	.word	0x400d9000
    def4:	400f8000 	.word	0x400f8000
    def8:	0bad00f1 	.word	0x0bad00f1
    defc:	05fa0004 	.word	0x05fa0004

0000df00 <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    df00:	b508      	push	{r3, lr}
    df02:	4603      	mov	r3, r0
        char *prev = __brkval;
    df04:	4a08      	ldr	r2, [pc, #32]	; (df28 <_sbrk+0x28>)
    df06:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
    df08:	b133      	cbz	r3, df18 <_sbrk+0x18>
    df0a:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
    df0c:	4402      	add	r2, r0
    df0e:	4b07      	ldr	r3, [pc, #28]	; (df2c <_sbrk+0x2c>)
    df10:	429a      	cmp	r2, r3
    df12:	d802      	bhi.n	df1a <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    df14:	4b04      	ldr	r3, [pc, #16]	; (df28 <_sbrk+0x28>)
    df16:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
    df18:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
    df1a:	f002 ff35 	bl	10d88 <__errno>
    df1e:	230c      	movs	r3, #12
    df20:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
    df22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    df26:	e7f7      	b.n	df18 <_sbrk+0x18>
    df28:	200033e4 	.word	0x200033e4
    df2c:	20280000 	.word	0x20280000

0000df30 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    df30:	2000      	movs	r0, #0
    df32:	4770      	bx	lr

0000df34 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    df34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    df38:	4770      	bx	lr

0000df3a <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    df3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    df3e:	604b      	str	r3, [r1, #4]
	return 0;
}
    df40:	2000      	movs	r0, #0
    df42:	4770      	bx	lr

0000df44 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    df44:	2001      	movs	r0, #1
    df46:	4770      	bx	lr

0000df48 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    df48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    df4c:	4770      	bx	lr

0000df4e <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    df4e:	bf30      	wfi
    df50:	e7fd      	b.n	df4e <__cxa_pure_virtual>

0000df52 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    df52:	bf30      	wfi
    df54:	e7fd      	b.n	df52 <abort>

0000df56 <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
    df56:	b508      	push	{r3, lr}
  unused_interrupt_vector();
    df58:	f7ff ff0e 	bl	dd78 <unused_interrupt_vector>
}
    df5c:	bd08      	pop	{r3, pc}
	...

0000df60 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    df60:	4a13      	ldr	r2, [pc, #76]	; (dfb0 <tempmonGetTemp+0x50>)
    df62:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    df66:	f013 0f04 	tst.w	r3, #4
    df6a:	d0fa      	beq.n	df62 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    df6c:	4b10      	ldr	r3, [pc, #64]	; (dfb0 <tempmonGetTemp+0x50>)
    df6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    df72:	4a10      	ldr	r2, [pc, #64]	; (dfb4 <tempmonGetTemp+0x54>)
    df74:	ed92 7a00 	vldr	s14, [r2]
    df78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    df7c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    df80:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    df84:	eef8 7a67 	vcvt.f32.u32	s15, s15
    df88:	4b0b      	ldr	r3, [pc, #44]	; (dfb8 <tempmonGetTemp+0x58>)
    df8a:	edd3 6a00 	vldr	s13, [r3]
    df8e:	eef8 6a66 	vcvt.f32.u32	s13, s13
    df92:	ee77 7ae6 	vsub.f32	s15, s15, s13
    df96:	4b09      	ldr	r3, [pc, #36]	; (dfbc <tempmonGetTemp+0x5c>)
    df98:	edd3 6a00 	vldr	s13, [r3]
    df9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    dfa0:	4b07      	ldr	r3, [pc, #28]	; (dfc0 <tempmonGetTemp+0x60>)
    dfa2:	edd3 6a00 	vldr	s13, [r3]
    dfa6:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    dfaa:	ee37 0a40 	vsub.f32	s0, s14, s0
    dfae:	4770      	bx	lr
    dfb0:	400d8100 	.word	0x400d8100
    dfb4:	200051ec 	.word	0x200051ec
    dfb8:	200051e8 	.word	0x200051e8
    dfbc:	200051f0 	.word	0x200051f0
    dfc0:	200051f4 	.word	0x200051f4

0000dfc4 <endpoint0_transmit>:
	if (len > 0) {
    dfc4:	468c      	mov	ip, r1
    dfc6:	b319      	cbz	r1, e010 <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
    dfc8:	4b23      	ldr	r3, [pc, #140]	; (e058 <endpoint0_transmit+0x94>)
    dfca:	2101      	movs	r1, #1
    dfcc:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    dfce:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    dfd2:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    dfd6:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    dfd8:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    dfda:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    dfde:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    dfe0:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    dfe4:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    dfe6:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    dfea:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    dfec:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    dff0:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    dff2:	491a      	ldr	r1, [pc, #104]	; (e05c <endpoint0_transmit+0x98>)
    dff4:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
    dff6:	2300      	movs	r3, #0
    dff8:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    dffa:	4919      	ldr	r1, [pc, #100]	; (e060 <endpoint0_transmit+0x9c>)
    dffc:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e004:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e008:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e00c:	2b00      	cmp	r3, #0
    e00e:	d1fb      	bne.n	e008 <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
    e010:	4b14      	ldr	r3, [pc, #80]	; (e064 <endpoint0_transmit+0xa0>)
    e012:	2101      	movs	r1, #1
    e014:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e016:	2a00      	cmp	r2, #0
    e018:	f248 0180 	movw	r1, #32896	; 0x8080
    e01c:	bf08      	it	eq
    e01e:	2180      	moveq	r1, #128	; 0x80
    e020:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    e022:	2000      	movs	r0, #0
    e024:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    e026:	490d      	ldr	r1, [pc, #52]	; (e05c <endpoint0_transmit+0x98>)
    e028:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
    e02a:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e02c:	4b0c      	ldr	r3, [pc, #48]	; (e060 <endpoint0_transmit+0x9c>)
    e02e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    e032:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    e036:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    e03a:	f041 0101 	orr.w	r1, r1, #1
    e03e:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e042:	1a12      	subs	r2, r2, r0
    e044:	bf18      	it	ne
    e046:	2201      	movne	r2, #1
    e048:	4b07      	ldr	r3, [pc, #28]	; (e068 <endpoint0_transmit+0xa4>)
    e04a:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e04c:	4a04      	ldr	r2, [pc, #16]	; (e060 <endpoint0_transmit+0x9c>)
    e04e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e052:	2b00      	cmp	r3, #0
    e054:	d1fb      	bne.n	e04e <endpoint0_transmit+0x8a>
}
    e056:	4770      	bx	lr
    e058:	20003ee0 	.word	0x20003ee0
    e05c:	20000000 	.word	0x20000000
    e060:	402e0000 	.word	0x402e0000
    e064:	20003ec0 	.word	0x20003ec0
    e068:	20005090 	.word	0x20005090

0000e06c <endpoint0_receive>:
	if (len > 0) {
    e06c:	468c      	mov	ip, r1
    e06e:	b319      	cbz	r1, e0b8 <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
    e070:	4b24      	ldr	r3, [pc, #144]	; (e104 <endpoint0_receive+0x98>)
    e072:	2101      	movs	r1, #1
    e074:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e076:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    e07a:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    e07e:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e080:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e082:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    e086:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e088:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    e08c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e08e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    e092:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e094:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e098:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    e09a:	491b      	ldr	r1, [pc, #108]	; (e108 <endpoint0_receive+0x9c>)
    e09c:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
    e09e:	2300      	movs	r3, #0
    e0a0:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
    e0a2:	491a      	ldr	r1, [pc, #104]	; (e10c <endpoint0_receive+0xa0>)
    e0a4:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e0a8:	f043 0301 	orr.w	r3, r3, #1
    e0ac:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e0b0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e0b4:	2b00      	cmp	r3, #0
    e0b6:	d1fb      	bne.n	e0b0 <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
    e0b8:	4b15      	ldr	r3, [pc, #84]	; (e110 <endpoint0_receive+0xa4>)
    e0ba:	2101      	movs	r1, #1
    e0bc:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e0be:	2a00      	cmp	r2, #0
    e0c0:	f248 0180 	movw	r1, #32896	; 0x8080
    e0c4:	bf08      	it	eq
    e0c6:	2180      	moveq	r1, #128	; 0x80
    e0c8:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    e0ca:	2000      	movs	r0, #0
    e0cc:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e0ce:	490e      	ldr	r1, [pc, #56]	; (e108 <endpoint0_receive+0x9c>)
    e0d0:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
    e0d2:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e0d4:	4b0d      	ldr	r3, [pc, #52]	; (e10c <endpoint0_receive+0xa0>)
    e0d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    e0da:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e0de:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    e0e2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    e0e6:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e0ea:	1a12      	subs	r2, r2, r0
    e0ec:	bf18      	it	ne
    e0ee:	2201      	movne	r2, #1
    e0f0:	0412      	lsls	r2, r2, #16
    e0f2:	4b08      	ldr	r3, [pc, #32]	; (e114 <endpoint0_receive+0xa8>)
    e0f4:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e0f6:	4a05      	ldr	r2, [pc, #20]	; (e10c <endpoint0_receive+0xa0>)
    e0f8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d1fb      	bne.n	e0f8 <endpoint0_receive+0x8c>
}
    e100:	4770      	bx	lr
    e102:	bf00      	nop
    e104:	20003ee0 	.word	0x20003ee0
    e108:	20000000 	.word	0x20000000
    e10c:	402e0000 	.word	0x402e0000
    e110:	20003ec0 	.word	0x20003ec0
    e114:	20005090 	.word	0x20005090

0000e118 <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    e118:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e11a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e11c:	b11b      	cbz	r3, e126 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    e11e:	6853      	ldr	r3, [r2, #4]
    e120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    e124:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    e126:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    e128:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
    e12a:	b33b      	cbz	r3, e17c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
    e12c:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    e12e:	4b1a      	ldr	r3, [pc, #104]	; (e198 <schedule_transfer+0x80>)
    e130:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    e134:	420b      	tst	r3, r1
    e136:	d12b      	bne.n	e190 <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    e138:	4b18      	ldr	r3, [pc, #96]	; (e19c <schedule_transfer+0x84>)
    e13a:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e13c:	4b16      	ldr	r3, [pc, #88]	; (e198 <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e13e:	4e17      	ldr	r6, [pc, #92]	; (e19c <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e140:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e144:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    e148:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    e14c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e150:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e154:	f414 4f80 	tst.w	r4, #16384	; 0x4000
    e158:	d104      	bne.n	e164 <schedule_transfer+0x4c>
    e15a:	6874      	ldr	r4, [r6, #4]
    e15c:	1be4      	subs	r4, r4, r7
    e15e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    e162:	d3ed      	bcc.n	e140 <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    e164:	4229      	tst	r1, r5
    e166:	d113      	bne.n	e190 <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    e168:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    e16a:	2300      	movs	r3, #0
    e16c:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    e16e:	4c0a      	ldr	r4, [pc, #40]	; (e198 <schedule_transfer+0x80>)
    e170:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e174:	430b      	orrs	r3, r1
    e176:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
    e17a:	e009      	b.n	e190 <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    e17c:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    e17e:	2300      	movs	r3, #0
    e180:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    e182:	4c05      	ldr	r4, [pc, #20]	; (e198 <schedule_transfer+0x80>)
    e184:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e188:	430b      	orrs	r3, r1
    e18a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e18e:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    e190:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e192:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e194:	bcf0      	pop	{r4, r5, r6, r7}
    e196:	4770      	bx	lr
    e198:	402e0000 	.word	0x402e0000
    e19c:	e0001000 	.word	0xe0001000

0000e1a0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e1a0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    e1a2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    e1a4:	b1b5      	cbz	r5, e1d4 <run_callbacks+0x34>
    e1a6:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    e1a8:	462b      	mov	r3, r5
	uint32_t count = 0;
    e1aa:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
    e1ac:	685a      	ldr	r2, [r3, #4]
    e1ae:	f012 0f80 	tst.w	r2, #128	; 0x80
    e1b2:	d107      	bne.n	e1c4 <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    e1b4:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
    e1b6:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
    e1b8:	2b01      	cmp	r3, #1
    e1ba:	d1f7      	bne.n	e1ac <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    e1bc:	2300      	movs	r3, #0
    e1be:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    e1c0:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    e1c2:	e000      	b.n	e1c6 <run_callbacks+0x26>
			ep->first_transfer = t;
    e1c4:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
    e1c6:	b12c      	cbz	r4, e1d4 <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
    e1c8:	4628      	mov	r0, r5
    e1ca:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    e1cc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e1ce:	4798      	blx	r3
	while (count) {
    e1d0:	3c01      	subs	r4, #1
    e1d2:	d1f9      	bne.n	e1c8 <run_callbacks+0x28>
		first = next;
		count--;
	}
}
    e1d4:	bd70      	pop	{r4, r5, r6, pc}

0000e1d6 <usb_endpoint_config>:
{
    e1d6:	b570      	push	{r4, r5, r6, lr}
    e1d8:	4604      	mov	r4, r0
    e1da:	460e      	mov	r6, r1
    e1dc:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    e1de:	223c      	movs	r2, #60	; 0x3c
    e1e0:	2100      	movs	r1, #0
    e1e2:	3004      	adds	r0, #4
    e1e4:	f003 f962 	bl	114ac <memset>
	qh->config = config;
    e1e8:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    e1ea:	2301      	movs	r3, #1
    e1ec:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
    e1ee:	63a5      	str	r5, [r4, #56]	; 0x38
}
    e1f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e1f4 <usb_start_sof_interrupts>:
	__disable_irq();
    e1f4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    e1f6:	4a0a      	ldr	r2, [pc, #40]	; (e220 <usb_start_sof_interrupts+0x2c>)
    e1f8:	2301      	movs	r3, #1
    e1fa:	4083      	lsls	r3, r0
    e1fc:	7810      	ldrb	r0, [r2, #0]
    e1fe:	4318      	orrs	r0, r3
    e200:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    e202:	4b08      	ldr	r3, [pc, #32]	; (e224 <usb_start_sof_interrupts+0x30>)
    e204:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e208:	f013 0f80 	tst.w	r3, #128	; 0x80
    e20c:	d106      	bne.n	e21c <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e20e:	4a05      	ldr	r2, [pc, #20]	; (e224 <usb_start_sof_interrupts+0x30>)
    e210:	2180      	movs	r1, #128	; 0x80
    e212:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e216:	430b      	orrs	r3, r1
    e218:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    e21c:	b662      	cpsie	i
}
    e21e:	4770      	bx	lr
    e220:	200053d3 	.word	0x200053d3
    e224:	402e0000 	.word	0x402e0000

0000e228 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    e228:	2301      	movs	r3, #1
    e22a:	4083      	lsls	r3, r0
    e22c:	4a06      	ldr	r2, [pc, #24]	; (e248 <usb_stop_sof_interrupts+0x20>)
    e22e:	7810      	ldrb	r0, [r2, #0]
    e230:	ea20 0003 	bic.w	r0, r0, r3
    e234:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    e236:	b930      	cbnz	r0, e246 <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e238:	4a04      	ldr	r2, [pc, #16]	; (e24c <usb_stop_sof_interrupts+0x24>)
    e23a:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    e23e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e242:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    e246:	4770      	bx	lr
    e248:	200053d3 	.word	0x200053d3
    e24c:	402e0000 	.word	0x402e0000

0000e250 <usb_isr>:
{
    e250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    e254:	4bb5      	ldr	r3, [pc, #724]	; (e52c <usb_isr+0x2dc>)
    e256:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
    e25a:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e25e:	f017 0f01 	tst.w	r7, #1
    e262:	f000 81c9 	beq.w	e5f8 <usb_isr+0x3a8>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e266:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
    e26a:	2b00      	cmp	r3, #0
    e26c:	f000 8192 	beq.w	e594 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e270:	4cae      	ldr	r4, [pc, #696]	; (e52c <usb_isr+0x2dc>)
				s.word1 = endpoint_queue_head[0].setup0;
    e272:	4eaf      	ldr	r6, [pc, #700]	; (e530 <usb_isr+0x2e0>)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e274:	f106 0b80 	add.w	fp, r6, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e278:	f8df a2ec 	ldr.w	sl, [pc, #748]	; e568 <usb_isr+0x318>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e27c:	f8df 92ec 	ldr.w	r9, [pc, #748]	; e56c <usb_isr+0x31c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e280:	f8df 82ec 	ldr.w	r8, [pc, #748]	; e570 <usb_isr+0x320>
    e284:	e01b      	b.n	e2be <usb_isr+0x6e>
	switch (setup.wRequestAndType) {
    e286:	2b80      	cmp	r3, #128	; 0x80
    e288:	d110      	bne.n	e2ac <usb_isr+0x5c>
		reply_buffer[0] = 0;
    e28a:	48aa      	ldr	r0, [pc, #680]	; (e534 <usb_isr+0x2e4>)
    e28c:	2200      	movs	r2, #0
    e28e:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
    e290:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    e292:	2102      	movs	r1, #2
    e294:	f7ff fe96 	bl	dfc4 <endpoint0_transmit>
		return;
    e298:	e00c      	b.n	e2b4 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e29a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    e29e:	f000 8089 	beq.w	e3b4 <usb_isr+0x164>
    e2a2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    e2a6:	b29b      	uxth	r3, r3
    e2a8:	2b01      	cmp	r3, #1
    e2aa:	d967      	bls.n	e37c <usb_isr+0x12c>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e2ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e2b0:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e2b4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e2b8:	2b00      	cmp	r3, #0
    e2ba:	f000 816b 	beq.w	e594 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e2be:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    e2c2:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    e2c4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e2c6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e2ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e2ce:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e2d2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e2d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    e2da:	d0f4      	beq.n	e2c6 <usb_isr+0x76>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e2dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e2e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e2e4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e2e8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e2ec:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e2f0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    e2f4:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    e2f8:	d1fa      	bne.n	e2f0 <usb_isr+0xa0>
			endpoint0_notify_mask = 0;
    e2fa:	4b8f      	ldr	r3, [pc, #572]	; (e538 <usb_isr+0x2e8>)
    e2fc:	2100      	movs	r1, #0
    e2fe:	6019      	str	r1, [r3, #0]
	setup.bothwords = setupdata;
    e300:	4610      	mov	r0, r2
	switch (setup.wRequestAndType) {
    e302:	b2ab      	uxth	r3, r5
    e304:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    e308:	d07e      	beq.n	e408 <usb_isr+0x1b8>
    e30a:	d820      	bhi.n	e34e <usb_isr+0xfe>
    e30c:	f240 3102 	movw	r1, #770	; 0x302
    e310:	428b      	cmp	r3, r1
    e312:	f000 80a1 	beq.w	e458 <usb_isr+0x208>
    e316:	d8c0      	bhi.n	e29a <usb_isr+0x4a>
    e318:	2b82      	cmp	r3, #130	; 0x82
    e31a:	d07e      	beq.n	e41a <usb_isr+0x1ca>
    e31c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    e320:	d1b1      	bne.n	e286 <usb_isr+0x36>
		endpoint = setup.wIndex & 0x7F;
    e322:	b293      	uxth	r3, r2
    e324:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e328:	2a07      	cmp	r2, #7
    e32a:	d8bf      	bhi.n	e2ac <usb_isr+0x5c>
		if (dir) {
    e32c:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e330:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e334:	bf14      	ite	ne
    e336:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e33a:	f023 0301 	biceq.w	r3, r3, #1
    e33e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e342:	2200      	movs	r2, #0
    e344:	4611      	mov	r1, r2
    e346:	4610      	mov	r0, r2
    e348:	f7ff fe90 	bl	e06c <endpoint0_receive>
		return;
    e34c:	e7b2      	b.n	e2b4 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e34e:	f242 2121 	movw	r1, #8737	; 0x2221
    e352:	428b      	cmp	r3, r1
    e354:	f000 810e 	beq.w	e574 <usb_isr+0x324>
    e358:	d919      	bls.n	e38e <usb_isr+0x13e>
    e35a:	f242 3121 	movw	r1, #8993	; 0x2321
    e35e:	428b      	cmp	r3, r1
    e360:	f000 8112 	beq.w	e588 <usb_isr+0x338>
    e364:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    e368:	428b      	cmp	r3, r1
    e36a:	d19f      	bne.n	e2ac <usb_isr+0x5c>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    e36c:	b293      	uxth	r3, r2
    e36e:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    e372:	d19b      	bne.n	e2ac <usb_isr+0x5c>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    e374:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    e378:	f363 000f 	bfi	r0, r3, #0, #16
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e37c:	4b6f      	ldr	r3, [pc, #444]	; (e53c <usb_isr+0x2ec>)
    e37e:	6859      	ldr	r1, [r3, #4]
    e380:	2900      	cmp	r1, #0
    e382:	d093      	beq.n	e2ac <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e384:	fa1f fe80 	uxth.w	lr, r0
    e388:	f3c5 450f 	ubfx	r5, r5, #16, #16
    e38c:	e0a7      	b.n	e4de <usb_isr+0x28e>
	switch (setup.wRequestAndType) {
    e38e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e392:	d01b      	beq.n	e3cc <usb_isr+0x17c>
    e394:	f242 0121 	movw	r1, #8225	; 0x2021
    e398:	428b      	cmp	r3, r1
    e39a:	d187      	bne.n	e2ac <usb_isr+0x5c>
		if (setup.wLength != 7) break;
    e39c:	0c13      	lsrs	r3, r2, #16
    e39e:	2b07      	cmp	r3, #7
    e3a0:	d184      	bne.n	e2ac <usb_isr+0x5c>
		endpoint0_setupdata.bothwords = setupdata;
    e3a2:	4b67      	ldr	r3, [pc, #412]	; (e540 <usb_isr+0x2f0>)
    e3a4:	601d      	str	r5, [r3, #0]
    e3a6:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    e3a8:	2201      	movs	r2, #1
    e3aa:	2107      	movs	r1, #7
    e3ac:	4865      	ldr	r0, [pc, #404]	; (e544 <usb_isr+0x2f4>)
    e3ae:	f7ff fe5d 	bl	e06c <endpoint0_receive>
		return;
    e3b2:	e77f      	b.n	e2b4 <usb_isr+0x64>
		endpoint0_receive(NULL, 0, 0);
    e3b4:	2200      	movs	r2, #0
    e3b6:	4611      	mov	r1, r2
    e3b8:	4610      	mov	r0, r2
    e3ba:	f7ff fe57 	bl	e06c <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    e3be:	0c2b      	lsrs	r3, r5, #16
    e3c0:	065b      	lsls	r3, r3, #25
    e3c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e3c6:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    e3ca:	e773      	b.n	e2b4 <usb_isr+0x64>
		usb_configuration = setup.wValue;
    e3cc:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e3d0:	4b5d      	ldr	r3, [pc, #372]	; (e548 <usb_isr+0x2f8>)
    e3d2:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e3d4:	4b5d      	ldr	r3, [pc, #372]	; (e54c <usb_isr+0x2fc>)
    e3d6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e3da:	4b5d      	ldr	r3, [pc, #372]	; (e550 <usb_isr+0x300>)
    e3dc:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e3e0:	4b5c      	ldr	r3, [pc, #368]	; (e554 <usb_isr+0x304>)
    e3e2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    e3e6:	f000 fb45 	bl	ea74 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e3ea:	2280      	movs	r2, #128	; 0x80
    e3ec:	2100      	movs	r1, #0
    e3ee:	4658      	mov	r0, fp
    e3f0:	f003 f85c 	bl	114ac <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e3f4:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e3f8:	f8c6 90e0 	str.w	r9, [r6, #224]	; 0xe0
		endpoint0_receive(NULL, 0, 0);
    e3fc:	2200      	movs	r2, #0
    e3fe:	4611      	mov	r1, r2
    e400:	4610      	mov	r0, r2
    e402:	f7ff fe33 	bl	e06c <endpoint0_receive>
		return;
    e406:	e755      	b.n	e2b4 <usb_isr+0x64>
		reply_buffer[0] = usb_configuration;
    e408:	4b4f      	ldr	r3, [pc, #316]	; (e548 <usb_isr+0x2f8>)
    e40a:	781b      	ldrb	r3, [r3, #0]
    e40c:	4849      	ldr	r0, [pc, #292]	; (e534 <usb_isr+0x2e4>)
    e40e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e410:	2200      	movs	r2, #0
    e412:	2101      	movs	r1, #1
    e414:	f7ff fdd6 	bl	dfc4 <endpoint0_transmit>
		return;
    e418:	e74c      	b.n	e2b4 <usb_isr+0x64>
		endpoint = setup.wIndex & 0x7F;
    e41a:	b293      	uxth	r3, r2
    e41c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e420:	2a07      	cmp	r2, #7
    e422:	f63f af43 	bhi.w	e2ac <usb_isr+0x5c>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e426:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    e42a:	4a42      	ldr	r2, [pc, #264]	; (e534 <usb_isr+0x2e4>)
    e42c:	2100      	movs	r1, #0
    e42e:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    e430:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e432:	f013 0f80 	tst.w	r3, #128	; 0x80
    e436:	d00b      	beq.n	e450 <usb_isr+0x200>
    e438:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e43c:	d002      	beq.n	e444 <usb_isr+0x1f4>
			reply_buffer[0] = 1;
    e43e:	4b3d      	ldr	r3, [pc, #244]	; (e534 <usb_isr+0x2e4>)
    e440:	2201      	movs	r2, #1
    e442:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e444:	2200      	movs	r2, #0
    e446:	2102      	movs	r1, #2
    e448:	483a      	ldr	r0, [pc, #232]	; (e534 <usb_isr+0x2e4>)
    e44a:	f7ff fdbb 	bl	dfc4 <endpoint0_transmit>
		return;
    e44e:	e731      	b.n	e2b4 <usb_isr+0x64>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e450:	f010 0f01 	tst.w	r0, #1
    e454:	d0f6      	beq.n	e444 <usb_isr+0x1f4>
    e456:	e7f2      	b.n	e43e <usb_isr+0x1ee>
		endpoint = setup.wIndex & 0x7F;
    e458:	b293      	uxth	r3, r2
    e45a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e45e:	2a07      	cmp	r2, #7
    e460:	f63f af24 	bhi.w	e2ac <usb_isr+0x5c>
		if (dir) {
    e464:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e468:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e46c:	bf14      	ite	ne
    e46e:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e472:	f043 0301 	orreq.w	r3, r3, #1
    e476:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e47a:	2200      	movs	r2, #0
    e47c:	4611      	mov	r1, r2
    e47e:	4610      	mov	r0, r2
    e480:	f7ff fdf4 	bl	e06c <endpoint0_receive>
		return;
    e484:	e716      	b.n	e2b4 <usb_isr+0x64>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e486:	4b34      	ldr	r3, [pc, #208]	; (e558 <usb_isr+0x308>)
    e488:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e48a:	462a      	mov	r2, r5
    e48c:	4933      	ldr	r1, [pc, #204]	; (e55c <usb_isr+0x30c>)
    e48e:	4b34      	ldr	r3, [pc, #208]	; (e560 <usb_isr+0x310>)
    e490:	2800      	cmp	r0, #0
    e492:	bf18      	it	ne
    e494:	4619      	movne	r1, r3
    e496:	4833      	ldr	r0, [pc, #204]	; (e564 <usb_isr+0x314>)
    e498:	f7fe ff40 	bl	d31c <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e49c:	4a31      	ldr	r2, [pc, #196]	; (e564 <usb_isr+0x314>)
    e49e:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e4a2:	442a      	add	r2, r5
	asm("dsb");
    e4a4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e4a8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e4ac:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e4b0:	3320      	adds	r3, #32
	} while (location < end_addr);
    e4b2:	429a      	cmp	r2, r3
    e4b4:	d8fa      	bhi.n	e4ac <usb_isr+0x25c>
	asm("dsb");
    e4b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e4ba:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e4be:	2200      	movs	r2, #0
    e4c0:	4629      	mov	r1, r5
    e4c2:	4828      	ldr	r0, [pc, #160]	; (e564 <usb_isr+0x314>)
    e4c4:	f7ff fd7e 	bl	dfc4 <endpoint0_transmit>
				return;
    e4c8:	e6f4      	b.n	e2b4 <usb_isr+0x64>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e4ca:	462a      	mov	r2, r5
    e4cc:	4825      	ldr	r0, [pc, #148]	; (e564 <usb_isr+0x314>)
    e4ce:	f7fe ff25 	bl	d31c <memcpy>
    e4d2:	e7e3      	b.n	e49c <usb_isr+0x24c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e4d4:	330c      	adds	r3, #12
    e4d6:	6859      	ldr	r1, [r3, #4]
    e4d8:	2900      	cmp	r1, #0
    e4da:	f43f aee7 	beq.w	e2ac <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e4de:	4628      	mov	r0, r5
    e4e0:	f8b3 c000 	ldrh.w	ip, [r3]
    e4e4:	45ac      	cmp	ip, r5
    e4e6:	d1f5      	bne.n	e4d4 <usb_isr+0x284>
    e4e8:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    e4ec:	45f4      	cmp	ip, lr
    e4ee:	d1f1      	bne.n	e4d4 <usb_isr+0x284>
				if ((setup.wValue >> 8) == 3) {
    e4f0:	0a2d      	lsrs	r5, r5, #8
    e4f2:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
    e4f4:	bf0c      	ite	eq
    e4f6:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
    e4f8:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e4fa:	0c15      	lsrs	r5, r2, #16
    e4fc:	429d      	cmp	r5, r3
    e4fe:	bf28      	it	cs
    e500:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
    e502:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e506:	d0be      	beq.n	e486 <usb_isr+0x236>
				} else if (setup.wValue == 0x700) {
    e508:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    e50c:	d1dd      	bne.n	e4ca <usb_isr+0x27a>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e50e:	4b12      	ldr	r3, [pc, #72]	; (e558 <usb_isr+0x308>)
    e510:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e512:	462a      	mov	r2, r5
    e514:	4912      	ldr	r1, [pc, #72]	; (e560 <usb_isr+0x310>)
    e516:	4b11      	ldr	r3, [pc, #68]	; (e55c <usb_isr+0x30c>)
    e518:	2800      	cmp	r0, #0
    e51a:	bf18      	it	ne
    e51c:	4619      	movne	r1, r3
    e51e:	4811      	ldr	r0, [pc, #68]	; (e564 <usb_isr+0x314>)
    e520:	f7fe fefc 	bl	d31c <memcpy>
					usb_descriptor_buffer[1] = 7;
    e524:	2307      	movs	r3, #7
    e526:	4a0f      	ldr	r2, [pc, #60]	; (e564 <usb_isr+0x314>)
    e528:	7053      	strb	r3, [r2, #1]
    e52a:	e7b7      	b.n	e49c <usb_isr+0x24c>
    e52c:	402e0000 	.word	0x402e0000
    e530:	20000000 	.word	0x20000000
    e534:	20005168 	.word	0x20005168
    e538:	20005090 	.word	0x20005090
    e53c:	20003160 	.word	0x20003160
    e540:	20004080 	.word	0x20004080
    e544:	20005088 	.word	0x20005088
    e548:	200053d8 	.word	0x200053d8
    e54c:	00cc0002 	.word	0x00cc0002
    e550:	000200c8 	.word	0x000200c8
    e554:	00c80002 	.word	0x00c80002
    e558:	200053d9 	.word	0x200053d9
    e55c:	600020d0 	.word	0x600020d0
    e560:	60002134 	.word	0x60002134
    e564:	20200000 	.word	0x20200000
    e568:	b8c6cf5d 	.word	0xb8c6cf5d
    e56c:	74d59319 	.word	0x74d59319
    e570:	402e01c0 	.word	0x402e01c0
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e574:	b292      	uxth	r2, r2
    e576:	b93a      	cbnz	r2, e588 <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e578:	4b57      	ldr	r3, [pc, #348]	; (e6d8 <usb_isr+0x488>)
    e57a:	681a      	ldr	r2, [r3, #0]
    e57c:	4b57      	ldr	r3, [pc, #348]	; (e6dc <usb_isr+0x48c>)
    e57e:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e580:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e584:	4b56      	ldr	r3, [pc, #344]	; (e6e0 <usb_isr+0x490>)
    e586:	701d      	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    e588:	2200      	movs	r2, #0
    e58a:	4611      	mov	r1, r2
    e58c:	4610      	mov	r0, r2
    e58e:	f7ff fd6d 	bl	e06c <endpoint0_receive>
		return;
    e592:	e68f      	b.n	e2b4 <usb_isr+0x64>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e594:	4b53      	ldr	r3, [pc, #332]	; (e6e4 <usb_isr+0x494>)
    e596:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    e59a:	b36c      	cbz	r4, e5f8 <usb_isr+0x3a8>
			USB1_ENDPTCOMPLETE = completestatus;
    e59c:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e5a0:	4b51      	ldr	r3, [pc, #324]	; (e6e8 <usb_isr+0x498>)
    e5a2:	681b      	ldr	r3, [r3, #0]
    e5a4:	421c      	tst	r4, r3
    e5a6:	d172      	bne.n	e68e <usb_isr+0x43e>
			completestatus &= endpointN_notify_mask;
    e5a8:	4b50      	ldr	r3, [pc, #320]	; (e6ec <usb_isr+0x49c>)
    e5aa:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    e5ac:	401c      	ands	r4, r3
    e5ae:	d023      	beq.n	e5f8 <usb_isr+0x3a8>
				while (tx) {
    e5b0:	0c26      	lsrs	r6, r4, #16
    e5b2:	d010      	beq.n	e5d6 <usb_isr+0x386>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e5b4:	f8df 9154 	ldr.w	r9, [pc, #340]	; e70c <usb_isr+0x4bc>
					tx &= ~(1<<p);
    e5b8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
    e5bc:	fa96 f5a6 	rbit	r5, r6
    e5c0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e5c4:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
    e5c8:	3040      	adds	r0, #64	; 0x40
    e5ca:	f7ff fde9 	bl	e1a0 <run_callbacks>
					tx &= ~(1<<p);
    e5ce:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
    e5d2:	43ae      	bics	r6, r5
    e5d4:	d1f2      	bne.n	e5bc <usb_isr+0x36c>
				uint32_t rx = completestatus & 0xffff;
    e5d6:	b2a4      	uxth	r4, r4
				while(rx) {
    e5d8:	b174      	cbz	r4, e5f8 <usb_isr+0x3a8>
					run_callbacks(endpoint_queue_head + p * 2);
    e5da:	f8df 8130 	ldr.w	r8, [pc, #304]	; e70c <usb_isr+0x4bc>
					rx &= ~(1<<p);
    e5de:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
    e5e0:	fa94 f5a4 	rbit	r5, r4
    e5e4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    e5e8:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
    e5ec:	f7ff fdd8 	bl	e1a0 <run_callbacks>
					rx &= ~(1<<p);
    e5f0:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
    e5f4:	43ac      	bics	r4, r5
    e5f6:	d1f3      	bne.n	e5e0 <usb_isr+0x390>
	if (status & USB_USBSTS_URI) { // page 3164
    e5f8:	f017 0f40 	tst.w	r7, #64	; 0x40
    e5fc:	d019      	beq.n	e632 <usb_isr+0x3e2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e5fe:	4b39      	ldr	r3, [pc, #228]	; (e6e4 <usb_isr+0x494>)
    e600:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e604:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e608:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e60c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e610:	461a      	mov	r2, r3
    e612:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e616:	2b00      	cmp	r3, #0
    e618:	d1fb      	bne.n	e612 <usb_isr+0x3c2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e61a:	4b32      	ldr	r3, [pc, #200]	; (e6e4 <usb_isr+0x494>)
    e61c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e620:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e624:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e628:	f000 fa22 	bl	ea70 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e62c:	4b2f      	ldr	r3, [pc, #188]	; (e6ec <usb_isr+0x49c>)
    e62e:	2200      	movs	r2, #0
    e630:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e632:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
    e636:	d003      	beq.n	e640 <usb_isr+0x3f0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e638:	4b2d      	ldr	r3, [pc, #180]	; (e6f0 <usb_isr+0x4a0>)
    e63a:	681b      	ldr	r3, [r3, #0]
    e63c:	b103      	cbz	r3, e640 <usb_isr+0x3f0>
    e63e:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e640:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
    e644:	d003      	beq.n	e64e <usb_isr+0x3fe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e646:	4b2b      	ldr	r3, [pc, #172]	; (e6f4 <usb_isr+0x4a4>)
    e648:	681b      	ldr	r3, [r3, #0]
    e64a:	b103      	cbz	r3, e64e <usb_isr+0x3fe>
    e64c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e64e:	f017 0f04 	tst.w	r7, #4
    e652:	d009      	beq.n	e668 <usb_isr+0x418>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e654:	4b23      	ldr	r3, [pc, #140]	; (e6e4 <usb_isr+0x494>)
    e656:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e65a:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
    e65e:	4b26      	ldr	r3, [pc, #152]	; (e6f8 <usb_isr+0x4a8>)
    e660:	bf14      	ite	ne
    e662:	2201      	movne	r2, #1
			usb_high_speed = 0;
    e664:	2200      	moveq	r2, #0
    e666:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e668:	4b1e      	ldr	r3, [pc, #120]	; (e6e4 <usb_isr+0x494>)
    e66a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e66e:	f013 0f80 	tst.w	r3, #128	; 0x80
    e672:	d00a      	beq.n	e68a <usb_isr+0x43a>
    e674:	f017 0f80 	tst.w	r7, #128	; 0x80
    e678:	d007      	beq.n	e68a <usb_isr+0x43a>
		if (usb_reboot_timer) {
    e67a:	4b20      	ldr	r3, [pc, #128]	; (e6fc <usb_isr+0x4ac>)
    e67c:	781b      	ldrb	r3, [r3, #0]
    e67e:	b123      	cbz	r3, e68a <usb_isr+0x43a>
			if (--usb_reboot_timer == 0) {
    e680:	3b01      	subs	r3, #1
    e682:	b2db      	uxtb	r3, r3
    e684:	4a1d      	ldr	r2, [pc, #116]	; (e6fc <usb_isr+0x4ac>)
    e686:	7013      	strb	r3, [r2, #0]
    e688:	b30b      	cbz	r3, e6ce <usb_isr+0x47e>
}
    e68a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				endpoint0_notify_mask = 0;
    e68e:	4b16      	ldr	r3, [pc, #88]	; (e6e8 <usb_isr+0x498>)
    e690:	2200      	movs	r2, #0
    e692:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    e694:	4b1a      	ldr	r3, [pc, #104]	; (e700 <usb_isr+0x4b0>)
    e696:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e698:	8819      	ldrh	r1, [r3, #0]
    e69a:	f242 0321 	movw	r3, #8225	; 0x2021
    e69e:	4299      	cmp	r1, r3
    e6a0:	d182      	bne.n	e5a8 <usb_isr+0x358>
    e6a2:	b292      	uxth	r2, r2
    e6a4:	2a00      	cmp	r2, #0
    e6a6:	f47f af7f 	bne.w	e5a8 <usb_isr+0x358>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e6aa:	4b16      	ldr	r3, [pc, #88]	; (e704 <usb_isr+0x4b4>)
    e6ac:	4a16      	ldr	r2, [pc, #88]	; (e708 <usb_isr+0x4b8>)
    e6ae:	e892 0003 	ldmia.w	r2, {r0, r1}
    e6b2:	6018      	str	r0, [r3, #0]
    e6b4:	8099      	strh	r1, [r3, #4]
    e6b6:	0c09      	lsrs	r1, r1, #16
    e6b8:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e6ba:	2886      	cmp	r0, #134	; 0x86
    e6bc:	f47f af74 	bne.w	e5a8 <usb_isr+0x358>
			usb_start_sof_interrupts(NUM_INTERFACE);
    e6c0:	2003      	movs	r0, #3
    e6c2:	f7ff fd97 	bl	e1f4 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e6c6:	4b0d      	ldr	r3, [pc, #52]	; (e6fc <usb_isr+0x4ac>)
    e6c8:	2250      	movs	r2, #80	; 0x50
    e6ca:	701a      	strb	r2, [r3, #0]
    e6cc:	e76c      	b.n	e5a8 <usb_isr+0x358>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e6ce:	2003      	movs	r0, #3
    e6d0:	f7ff fdaa 	bl	e228 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e6d4:	f006 fef8 	bl	154c8 <___reboot_Teensyduino__veneer>
    e6d8:	20005388 	.word	0x20005388
    e6dc:	2000539c 	.word	0x2000539c
    e6e0:	200053d7 	.word	0x200053d7
    e6e4:	402e0000 	.word	0x402e0000
    e6e8:	20005090 	.word	0x20005090
    e6ec:	20005094 	.word	0x20005094
    e6f0:	200053a0 	.word	0x200053a0
    e6f4:	200053a4 	.word	0x200053a4
    e6f8:	200053d9 	.word	0x200053d9
    e6fc:	200053da 	.word	0x200053da
    e700:	20004080 	.word	0x20004080
    e704:	20005394 	.word	0x20005394
    e708:	20005088 	.word	0x20005088
    e70c:	20000000 	.word	0x20000000

0000e710 <usb_config_rx>:
{
    e710:	b538      	push	{r3, r4, r5, lr}
    e712:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e714:	1e83      	subs	r3, r0, #2
    e716:	2b02      	cmp	r3, #2
    e718:	d900      	bls.n	e71c <usb_config_rx+0xc>
}
    e71a:	bd38      	pop	{r3, r4, r5, pc}
    e71c:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e71e:	fab2 fc82 	clz	ip, r2
    e722:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e726:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e728:	462a      	mov	r2, r5
    e72a:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e72e:	4807      	ldr	r0, [pc, #28]	; (e74c <usb_config_rx+0x3c>)
    e730:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e734:	f7ff fd4f 	bl	e1d6 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    e738:	2d00      	cmp	r5, #0
    e73a:	d0ee      	beq.n	e71a <usb_config_rx+0xa>
    e73c:	4a04      	ldr	r2, [pc, #16]	; (e750 <usb_config_rx+0x40>)
    e73e:	2301      	movs	r3, #1
    e740:	40a3      	lsls	r3, r4
    e742:	6811      	ldr	r1, [r2, #0]
    e744:	430b      	orrs	r3, r1
    e746:	6013      	str	r3, [r2, #0]
    e748:	e7e7      	b.n	e71a <usb_config_rx+0xa>
    e74a:	bf00      	nop
    e74c:	20000000 	.word	0x20000000
    e750:	20005094 	.word	0x20005094

0000e754 <usb_config_tx>:
{
    e754:	b538      	push	{r3, r4, r5, lr}
    e756:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e758:	3802      	subs	r0, #2
    e75a:	2802      	cmp	r0, #2
    e75c:	d900      	bls.n	e760 <usb_config_tx+0xc>
}
    e75e:	bd38      	pop	{r3, r4, r5, pc}
    e760:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e762:	fab2 fc82 	clz	ip, r2
    e766:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e76a:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e76c:	4809      	ldr	r0, [pc, #36]	; (e794 <usb_config_tx+0x40>)
    e76e:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e772:	461a      	mov	r2, r3
    e774:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e778:	3040      	adds	r0, #64	; 0x40
    e77a:	f7ff fd2c 	bl	e1d6 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e77e:	2d00      	cmp	r5, #0
    e780:	d0ed      	beq.n	e75e <usb_config_tx+0xa>
    e782:	4a05      	ldr	r2, [pc, #20]	; (e798 <usb_config_tx+0x44>)
    e784:	3410      	adds	r4, #16
    e786:	2301      	movs	r3, #1
    e788:	40a3      	lsls	r3, r4
    e78a:	6811      	ldr	r1, [r2, #0]
    e78c:	430b      	orrs	r3, r1
    e78e:	6013      	str	r3, [r2, #0]
    e790:	e7e5      	b.n	e75e <usb_config_tx+0xa>
    e792:	bf00      	nop
    e794:	20000000 	.word	0x20000000
    e798:	20005094 	.word	0x20005094

0000e79c <usb_prepare_transfer>:
{
    e79c:	b410      	push	{r4}
	transfer->next = 1;
    e79e:	2401      	movs	r4, #1
    e7a0:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
    e7a2:	0412      	lsls	r2, r2, #16
    e7a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e7a8:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
    e7aa:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    e7ac:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    e7b0:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    e7b2:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
    e7b6:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    e7b8:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
    e7bc:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    e7be:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    e7c2:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
    e7c4:	61c3      	str	r3, [r0, #28]
}
    e7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e7ca:	4770      	bx	lr

0000e7cc <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    e7cc:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e7ce:	1e83      	subs	r3, r0, #2
    e7d0:	2b02      	cmp	r3, #2
    e7d2:	d900      	bls.n	e7d6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e7d4:	bd08      	pop	{r3, pc}
    e7d6:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
    e7d8:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e7dc:	4b04      	ldr	r3, [pc, #16]	; (e7f0 <usb_transmit+0x24>)
    e7de:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e7e2:	2301      	movs	r3, #1
    e7e4:	fa03 f101 	lsl.w	r1, r3, r1
    e7e8:	3040      	adds	r0, #64	; 0x40
    e7ea:	f7ff fc95 	bl	e118 <schedule_transfer>
    e7ee:	e7f1      	b.n	e7d4 <usb_transmit+0x8>
    e7f0:	20000000 	.word	0x20000000

0000e7f4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    e7f4:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e7f6:	1e83      	subs	r3, r0, #2
    e7f8:	2b02      	cmp	r3, #2
    e7fa:	d900      	bls.n	e7fe <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e7fc:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
    e7fe:	460a      	mov	r2, r1
    e800:	2101      	movs	r1, #1
    e802:	4081      	lsls	r1, r0
    e804:	4b02      	ldr	r3, [pc, #8]	; (e810 <usb_receive+0x1c>)
    e806:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e80a:	f7ff fc85 	bl	e118 <schedule_transfer>
    e80e:	e7f5      	b.n	e7fc <usb_receive+0x8>
    e810:	20000000 	.word	0x20000000

0000e814 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    e814:	6840      	ldr	r0, [r0, #4]
#endif
}
    e816:	4770      	bx	lr

0000e818 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e818:	b500      	push	{lr}
    e81a:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e81c:	4b10      	ldr	r3, [pc, #64]	; (e860 <usb_init_serialnumber+0x48>)
    e81e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
    e822:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e826:	4b0f      	ldr	r3, [pc, #60]	; (e864 <usb_init_serialnumber+0x4c>)
    e828:	4298      	cmp	r0, r3
    e82a:	d202      	bcs.n	e832 <usb_init_serialnumber+0x1a>
    e82c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e830:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e832:	220a      	movs	r2, #10
    e834:	a901      	add	r1, sp, #4
    e836:	f7fe fe13 	bl	d460 <ultoa>
	for (i=0; i<10; i++) {
    e83a:	a901      	add	r1, sp, #4
    e83c:	480a      	ldr	r0, [pc, #40]	; (e868 <usb_init_serialnumber+0x50>)
    e83e:	2300      	movs	r3, #0
		char c = buf[i];
    e840:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
    e844:	b122      	cbz	r2, e850 <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
    e846:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e84a:	3301      	adds	r3, #1
    e84c:	2b0a      	cmp	r3, #10
    e84e:	d1f7      	bne.n	e840 <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e850:	3301      	adds	r3, #1
    e852:	005b      	lsls	r3, r3, #1
    e854:	4a04      	ldr	r2, [pc, #16]	; (e868 <usb_init_serialnumber+0x50>)
    e856:	7013      	strb	r3, [r2, #0]
}
    e858:	b005      	add	sp, #20
    e85a:	f85d fb04 	ldr.w	pc, [sp], #4
    e85e:	bf00      	nop
    e860:	401f4400 	.word	0x401f4400
    e864:	00989680 	.word	0x00989680
    e868:	20003a40 	.word	0x20003a40

0000e86c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e86c:	b508      	push	{r3, lr}
    e86e:	f000 fa15 	bl	ec9c <usb_serial_flush_input>
    e872:	bd08      	pop	{r3, pc}

0000e874 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    e874:	b508      	push	{r3, lr}
    e876:	f000 f9e1 	bl	ec3c <usb_serial_peekchar>
    e87a:	bd08      	pop	{r3, pc}

0000e87c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    e87c:	b508      	push	{r3, lr}
    e87e:	f000 fa3f 	bl	ed00 <usb_serial_getchar>
    e882:	bd08      	pop	{r3, pc}

0000e884 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e884:	b508      	push	{r3, lr}
    e886:	f000 f9fd 	bl	ec84 <usb_serial_available>
    e88a:	bd08      	pop	{r3, pc}

0000e88c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e88c:	b508      	push	{r3, lr}
    e88e:	f000 fb55 	bl	ef3c <usb_serial_flush_output>
    e892:	bd08      	pop	{r3, pc}

0000e894 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e894:	b508      	push	{r3, lr}
    e896:	f000 fb2b 	bl	eef0 <usb_serial_write_buffer_free>
    e89a:	bd08      	pop	{r3, pc}

0000e89c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e89c:	b508      	push	{r3, lr}
    e89e:	4608      	mov	r0, r1
    e8a0:	4611      	mov	r1, r2
    e8a2:	f000 fa3d 	bl	ed20 <usb_serial_write>
    e8a6:	bd08      	pop	{r3, pc}

0000e8a8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e8a8:	b508      	push	{r3, lr}
    e8aa:	4608      	mov	r0, r1
    e8ac:	f000 fb14 	bl	eed8 <usb_serial_putchar>
    e8b0:	bd08      	pop	{r3, pc}
	...

0000e8b4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    e8b4:	4b20      	ldr	r3, [pc, #128]	; (e938 <usb_serial_flush_callback+0x84>)
    e8b6:	781b      	ldrb	r3, [r3, #0]
    e8b8:	2b00      	cmp	r3, #0
    e8ba:	d13b      	bne.n	e934 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
    e8bc:	4b1f      	ldr	r3, [pc, #124]	; (e93c <usb_serial_flush_callback+0x88>)
    e8be:	781b      	ldrb	r3, [r3, #0]
    e8c0:	2b00      	cmp	r3, #0
    e8c2:	d037      	beq.n	e934 <usb_serial_flush_callback+0x80>
{
    e8c4:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    e8c6:	4b1e      	ldr	r3, [pc, #120]	; (e940 <usb_serial_flush_callback+0x8c>)
    e8c8:	881d      	ldrh	r5, [r3, #0]
    e8ca:	b905      	cbnz	r5, e8ce <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
    e8cc:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    e8ce:	4a1d      	ldr	r2, [pc, #116]	; (e944 <usb_serial_flush_callback+0x90>)
    e8d0:	7811      	ldrb	r1, [r2, #0]
    e8d2:	4e1d      	ldr	r6, [pc, #116]	; (e948 <usb_serial_flush_callback+0x94>)
    e8d4:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e8d8:	4c1c      	ldr	r4, [pc, #112]	; (e94c <usb_serial_flush_callback+0x98>)
    e8da:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    e8de:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e8e2:	2300      	movs	r3, #0
    e8e4:	462a      	mov	r2, r5
    e8e6:	4621      	mov	r1, r4
    e8e8:	4630      	mov	r0, r6
    e8ea:	f7ff ff57 	bl	e79c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e8ee:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    e8f0:	1962      	adds	r2, r4, r5
	asm("dsb");
    e8f2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e8f6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e8fa:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    e8fe:	3320      	adds	r3, #32
	} while (location < end_addr);
    e900:	429a      	cmp	r2, r3
    e902:	d8fa      	bhi.n	e8fa <usb_serial_flush_callback+0x46>
	asm("dsb");
    e904:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e908:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e90c:	4631      	mov	r1, r6
    e90e:	2004      	movs	r0, #4
    e910:	f7ff ff5c 	bl	e7cc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e914:	4b0b      	ldr	r3, [pc, #44]	; (e944 <usb_serial_flush_callback+0x90>)
    e916:	781b      	ldrb	r3, [r3, #0]
    e918:	3301      	adds	r3, #1
    e91a:	b2db      	uxtb	r3, r3
    e91c:	2b03      	cmp	r3, #3
    e91e:	d805      	bhi.n	e92c <usb_serial_flush_callback+0x78>
    e920:	4a08      	ldr	r2, [pc, #32]	; (e944 <usb_serial_flush_callback+0x90>)
    e922:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    e924:	4b06      	ldr	r3, [pc, #24]	; (e940 <usb_serial_flush_callback+0x8c>)
    e926:	2200      	movs	r2, #0
    e928:	801a      	strh	r2, [r3, #0]
    e92a:	e7cf      	b.n	e8cc <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e92c:	4b05      	ldr	r3, [pc, #20]	; (e944 <usb_serial_flush_callback+0x90>)
    e92e:	2200      	movs	r2, #0
    e930:	701a      	strb	r2, [r3, #0]
    e932:	e7f7      	b.n	e924 <usb_serial_flush_callback+0x70>
    e934:	4770      	bx	lr
    e936:	bf00      	nop
    e938:	200053d6 	.word	0x200053d6
    e93c:	200053d8 	.word	0x200053d8
    e940:	200053ba 	.word	0x200053ba
    e944:	200053d5 	.word	0x200053d5
    e948:	20004000 	.word	0x20004000
    e94c:	20201080 	.word	0x20201080

0000e950 <rx_queue_transfer>:
{
    e950:	b570      	push	{r4, r5, r6, lr}
    e952:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e954:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e958:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    e95c:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    e960:	4c13      	ldr	r4, [pc, #76]	; (e9b0 <rx_queue_transfer+0x60>)
    e962:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e966:	4d13      	ldr	r5, [pc, #76]	; (e9b4 <rx_queue_transfer+0x64>)
    e968:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    e96c:	4e12      	ldr	r6, [pc, #72]	; (e9b8 <rx_queue_transfer+0x68>)
    e96e:	8832      	ldrh	r2, [r6, #0]
    e970:	4621      	mov	r1, r4
    e972:	4628      	mov	r0, r5
    e974:	f7ff ff12 	bl	e79c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e978:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
    e97a:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    e97c:	4422      	add	r2, r4
	asm("dsb");
    e97e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e982:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    e986:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
    e98a:	3320      	adds	r3, #32
	} while (location < end_addr);
    e98c:	429a      	cmp	r2, r3
    e98e:	d8fa      	bhi.n	e986 <rx_queue_transfer+0x36>
	asm("dsb");
    e990:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e994:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    e998:	4629      	mov	r1, r5
    e99a:	2003      	movs	r0, #3
    e99c:	f7ff ff2a 	bl	e7f4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e9a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e9a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e9a8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e9ac:	bd70      	pop	{r4, r5, r6, pc}
    e9ae:	bf00      	nop
    e9b0:	20200080 	.word	0x20200080
    e9b4:	20003f00 	.word	0x20003f00
    e9b8:	200053b8 	.word	0x200053b8

0000e9bc <rx_event>:
{
    e9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e9be:	6843      	ldr	r3, [r0, #4]
    e9c0:	4a23      	ldr	r2, [pc, #140]	; (ea50 <rx_event+0x94>)
    e9c2:	8814      	ldrh	r4, [r2, #0]
    e9c4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    e9c8:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
    e9ca:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
    e9cc:	2c00      	cmp	r4, #0
    e9ce:	dd3a      	ble.n	ea46 <rx_event+0x8a>
		uint32_t head = rx_head;
    e9d0:	4b20      	ldr	r3, [pc, #128]	; (ea54 <rx_event+0x98>)
    e9d2:	781b      	ldrb	r3, [r3, #0]
    e9d4:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
    e9d6:	4a20      	ldr	r2, [pc, #128]	; (ea58 <rx_event+0x9c>)
    e9d8:	7812      	ldrb	r2, [r2, #0]
    e9da:	b2d2      	uxtb	r2, r2
    e9dc:	4293      	cmp	r3, r2
    e9de:	d008      	beq.n	e9f2 <rx_event+0x36>
			uint32_t ii = rx_list[head];
    e9e0:	4a1e      	ldr	r2, [pc, #120]	; (ea5c <rx_event+0xa0>)
    e9e2:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
    e9e4:	4a1e      	ldr	r2, [pc, #120]	; (ea60 <rx_event+0xa4>)
    e9e6:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    e9ea:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
    e9ee:	4294      	cmp	r4, r2
    e9f0:	d914      	bls.n	ea1c <rx_event+0x60>
		rx_count[i] = len;
    e9f2:	4a1b      	ldr	r2, [pc, #108]	; (ea60 <rx_event+0xa4>)
    e9f4:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
    e9f8:	4a1a      	ldr	r2, [pc, #104]	; (ea64 <rx_event+0xa8>)
    e9fa:	2100      	movs	r1, #0
    e9fc:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    ea00:	3301      	adds	r3, #1
    ea02:	2b09      	cmp	r3, #9
    ea04:	bf28      	it	cs
    ea06:	460b      	movcs	r3, r1
		rx_list[head] = i;
    ea08:	4a14      	ldr	r2, [pc, #80]	; (ea5c <rx_event+0xa0>)
    ea0a:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
    ea0c:	b2db      	uxtb	r3, r3
    ea0e:	4a11      	ldr	r2, [pc, #68]	; (ea54 <rx_event+0x98>)
    ea10:	7013      	strb	r3, [r2, #0]
		rx_available += len;
    ea12:	4b15      	ldr	r3, [pc, #84]	; (ea68 <rx_event+0xac>)
    ea14:	681a      	ldr	r2, [r3, #0]
    ea16:	4414      	add	r4, r2
    ea18:	601c      	str	r4, [r3, #0]
}
    ea1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    ea1c:	eb06 2047 	add.w	r0, r6, r7, lsl #9
    ea20:	4b12      	ldr	r3, [pc, #72]	; (ea6c <rx_event+0xb0>)
    ea22:	4622      	mov	r2, r4
    ea24:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    ea28:	4418      	add	r0, r3
    ea2a:	f7fe fc77 	bl	d31c <memcpy>
				rx_count[ii] = count + len;
    ea2e:	4426      	add	r6, r4
    ea30:	4b0b      	ldr	r3, [pc, #44]	; (ea60 <rx_event+0xa4>)
    ea32:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
    ea36:	4a0c      	ldr	r2, [pc, #48]	; (ea68 <rx_event+0xac>)
    ea38:	6813      	ldr	r3, [r2, #0]
    ea3a:	4423      	add	r3, r4
    ea3c:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    ea3e:	4628      	mov	r0, r5
    ea40:	f7ff ff86 	bl	e950 <rx_queue_transfer>
				return;
    ea44:	e7e9      	b.n	ea1a <rx_event+0x5e>
		rx_queue_transfer(i);
    ea46:	4628      	mov	r0, r5
    ea48:	f7ff ff82 	bl	e950 <rx_queue_transfer>
    ea4c:	e7e5      	b.n	ea1a <rx_event+0x5e>
    ea4e:	bf00      	nop
    ea50:	200053b8 	.word	0x200053b8
    ea54:	200053cf 	.word	0x200053cf
    ea58:	200053d0 	.word	0x200053d0
    ea5c:	200051a4 	.word	0x200051a4
    ea60:	20005184 	.word	0x20005184
    ea64:	20005194 	.word	0x20005194
    ea68:	20005180 	.word	0x20005180
    ea6c:	20200080 	.word	0x20200080

0000ea70 <usb_serial_reset>:
}
    ea70:	4770      	bx	lr
	...

0000ea74 <usb_serial_configure>:
{
    ea74:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    ea76:	4b2a      	ldr	r3, [pc, #168]	; (eb20 <usb_serial_configure+0xac>)
    ea78:	781b      	ldrb	r3, [r3, #0]
    ea7a:	f013 0fff 	tst.w	r3, #255	; 0xff
    ea7e:	bf0c      	ite	eq
    ea80:	2340      	moveq	r3, #64	; 0x40
    ea82:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    ea86:	4d27      	ldr	r5, [pc, #156]	; (eb24 <usb_serial_configure+0xb0>)
    ea88:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    ea8a:	4e27      	ldr	r6, [pc, #156]	; (eb28 <usb_serial_configure+0xb4>)
    ea8c:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ea8e:	2280      	movs	r2, #128	; 0x80
    ea90:	2100      	movs	r1, #0
    ea92:	4826      	ldr	r0, [pc, #152]	; (eb2c <usb_serial_configure+0xb8>)
    ea94:	f002 fd0a 	bl	114ac <memset>
	tx_head = 0;
    ea98:	2400      	movs	r4, #0
    ea9a:	4b25      	ldr	r3, [pc, #148]	; (eb30 <usb_serial_configure+0xbc>)
    ea9c:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
    ea9e:	4b25      	ldr	r3, [pc, #148]	; (eb34 <usb_serial_configure+0xc0>)
    eaa0:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    eaa2:	f44f 7280 	mov.w	r2, #256	; 0x100
    eaa6:	4621      	mov	r1, r4
    eaa8:	4823      	ldr	r0, [pc, #140]	; (eb38 <usb_serial_configure+0xc4>)
    eaaa:	f002 fcff 	bl	114ac <memset>
	memset(rx_count, 0, sizeof(rx_count));
    eaae:	4b23      	ldr	r3, [pc, #140]	; (eb3c <usb_serial_configure+0xc8>)
    eab0:	601c      	str	r4, [r3, #0]
    eab2:	605c      	str	r4, [r3, #4]
    eab4:	609c      	str	r4, [r3, #8]
    eab6:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
    eab8:	4b21      	ldr	r3, [pc, #132]	; (eb40 <usb_serial_configure+0xcc>)
    eaba:	601c      	str	r4, [r3, #0]
    eabc:	605c      	str	r4, [r3, #4]
    eabe:	609c      	str	r4, [r3, #8]
    eac0:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
    eac2:	4b20      	ldr	r3, [pc, #128]	; (eb44 <usb_serial_configure+0xd0>)
    eac4:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
    eac6:	4b20      	ldr	r3, [pc, #128]	; (eb48 <usb_serial_configure+0xd4>)
    eac8:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
    eaca:	4b20      	ldr	r3, [pc, #128]	; (eb4c <usb_serial_configure+0xd8>)
    eacc:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    eace:	4623      	mov	r3, r4
    ead0:	4622      	mov	r2, r4
    ead2:	2110      	movs	r1, #16
    ead4:	2002      	movs	r0, #2
    ead6:	f7ff fe3d 	bl	e754 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    eada:	4b1d      	ldr	r3, [pc, #116]	; (eb50 <usb_serial_configure+0xdc>)
    eadc:	4622      	mov	r2, r4
    eade:	8831      	ldrh	r1, [r6, #0]
    eae0:	2003      	movs	r0, #3
    eae2:	f7ff fe15 	bl	e710 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    eae6:	4623      	mov	r3, r4
    eae8:	2201      	movs	r2, #1
    eaea:	8829      	ldrh	r1, [r5, #0]
    eaec:	2004      	movs	r0, #4
    eaee:	f7ff fe31 	bl	e754 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    eaf2:	4620      	mov	r0, r4
    eaf4:	f7ff ff2c 	bl	e950 <rx_queue_transfer>
    eaf8:	3401      	adds	r4, #1
    eafa:	2c08      	cmp	r4, #8
    eafc:	d1f9      	bne.n	eaf2 <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
    eafe:	4b15      	ldr	r3, [pc, #84]	; (eb54 <usb_serial_configure+0xe0>)
    eb00:	4a15      	ldr	r2, [pc, #84]	; (eb58 <usb_serial_configure+0xe4>)
    eb02:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    eb04:	4b15      	ldr	r3, [pc, #84]	; (eb5c <usb_serial_configure+0xe8>)
    eb06:	2200      	movs	r2, #0
    eb08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    eb0c:	224a      	movs	r2, #74	; 0x4a
    eb0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    eb12:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    eb16:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    eb1a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    eb1e:	bd70      	pop	{r4, r5, r6, pc}
    eb20:	200053d9 	.word	0x200053d9
    eb24:	200053bc 	.word	0x200053bc
    eb28:	200053b8 	.word	0x200053b8
    eb2c:	20004000 	.word	0x20004000
    eb30:	200053d5 	.word	0x200053d5
    eb34:	200053ba 	.word	0x200053ba
    eb38:	20003f00 	.word	0x20003f00
    eb3c:	20005184 	.word	0x20005184
    eb40:	20005194 	.word	0x20005194
    eb44:	200053cf 	.word	0x200053cf
    eb48:	200053d0 	.word	0x200053d0
    eb4c:	20005180 	.word	0x20005180
    eb50:	0000e9bd 	.word	0x0000e9bd
    eb54:	200053a0 	.word	0x200053a0
    eb58:	0000e8b5 	.word	0x0000e8b5
    eb5c:	402e0000 	.word	0x402e0000

0000eb60 <usb_serial_read>:
{
    eb60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    eb64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    eb68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    eb6c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
    eb70:	4b2b      	ldr	r3, [pc, #172]	; (ec20 <usb_serial_read+0xc0>)
    eb72:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    eb74:	468a      	mov	sl, r1
    eb76:	2900      	cmp	r1, #0
    eb78:	d045      	beq.n	ec06 <usb_serial_read+0xa6>
    eb7a:	4681      	mov	r9, r0
    eb7c:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    eb7e:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
    eb80:	f8df b0b4 	ldr.w	fp, [pc, #180]	; ec38 <usb_serial_read+0xd8>
    eb84:	e015      	b.n	ebb2 <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    eb86:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    eb8a:	462a      	mov	r2, r5
    eb8c:	4b25      	ldr	r3, [pc, #148]	; (ec24 <usb_serial_read+0xc4>)
    eb8e:	4419      	add	r1, r3
    eb90:	4648      	mov	r0, r9
    eb92:	f7fe fbc3 	bl	d31c <memcpy>
			p += avail;
    eb96:	44a9      	add	r9, r5
			rx_available -= avail;
    eb98:	4a23      	ldr	r2, [pc, #140]	; (ec28 <usb_serial_read+0xc8>)
    eb9a:	6813      	ldr	r3, [r2, #0]
    eb9c:	1b5b      	subs	r3, r3, r5
    eb9e:	6013      	str	r3, [r2, #0]
			count += avail;
    eba0:	442f      	add	r7, r5
			rx_tail = tail;
    eba2:	b2e3      	uxtb	r3, r4
    eba4:	4a1e      	ldr	r2, [pc, #120]	; (ec20 <usb_serial_read+0xc0>)
    eba6:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    eba8:	4630      	mov	r0, r6
    ebaa:	f7ff fed1 	bl	e950 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    ebae:	45ba      	cmp	sl, r7
    ebb0:	d934      	bls.n	ec1c <usb_serial_read+0xbc>
    ebb2:	f89b 3000 	ldrb.w	r3, [fp]
    ebb6:	b2db      	uxtb	r3, r3
    ebb8:	42a3      	cmp	r3, r4
    ebba:	d02d      	beq.n	ec18 <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
    ebbc:	3401      	adds	r4, #1
    ebbe:	2c09      	cmp	r4, #9
    ebc0:	bf28      	it	cs
    ebc2:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ebc4:	4b19      	ldr	r3, [pc, #100]	; (ec2c <usb_serial_read+0xcc>)
    ebc6:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
    ebc8:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
    ebcc:	4b18      	ldr	r3, [pc, #96]	; (ec30 <usb_serial_read+0xd0>)
    ebce:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
    ebd2:	4b18      	ldr	r3, [pc, #96]	; (ec34 <usb_serial_read+0xd4>)
    ebd4:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    ebd8:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
    ebda:	45a8      	cmp	r8, r5
    ebdc:	d2d3      	bcs.n	eb86 <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ebde:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    ebe2:	4642      	mov	r2, r8
    ebe4:	4b0f      	ldr	r3, [pc, #60]	; (ec24 <usb_serial_read+0xc4>)
    ebe6:	4419      	add	r1, r3
    ebe8:	4648      	mov	r0, r9
    ebea:	f7fe fb97 	bl	d31c <memcpy>
			rx_available -= len;
    ebee:	4a0e      	ldr	r2, [pc, #56]	; (ec28 <usb_serial_read+0xc8>)
    ebf0:	6813      	ldr	r3, [r2, #0]
    ebf2:	eba3 030a 	sub.w	r3, r3, sl
    ebf6:	443b      	add	r3, r7
    ebf8:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
    ebfa:	4b0d      	ldr	r3, [pc, #52]	; (ec30 <usb_serial_read+0xd0>)
    ebfc:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    ec00:	4490      	add	r8, r2
    ec02:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ec06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ec0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ec0e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    ec12:	4650      	mov	r0, sl
    ec14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec18:	46ba      	mov	sl, r7
    ec1a:	e7f4      	b.n	ec06 <usb_serial_read+0xa6>
			count += avail;
    ec1c:	46ba      	mov	sl, r7
    ec1e:	e7f2      	b.n	ec06 <usb_serial_read+0xa6>
    ec20:	200053d0 	.word	0x200053d0
    ec24:	20200080 	.word	0x20200080
    ec28:	20005180 	.word	0x20005180
    ec2c:	200051a4 	.word	0x200051a4
    ec30:	20005194 	.word	0x20005194
    ec34:	20005184 	.word	0x20005184
    ec38:	200053cf 	.word	0x200053cf

0000ec3c <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    ec3c:	4b0c      	ldr	r3, [pc, #48]	; (ec70 <usb_serial_peekchar+0x34>)
    ec3e:	781b      	ldrb	r3, [r3, #0]
    ec40:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    ec42:	4a0c      	ldr	r2, [pc, #48]	; (ec74 <usb_serial_peekchar+0x38>)
    ec44:	7812      	ldrb	r2, [r2, #0]
    ec46:	b2d2      	uxtb	r2, r2
    ec48:	4293      	cmp	r3, r2
    ec4a:	d00d      	beq.n	ec68 <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
    ec4c:	3301      	adds	r3, #1
    ec4e:	2b09      	cmp	r3, #9
    ec50:	bf28      	it	cs
    ec52:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ec54:	4a08      	ldr	r2, [pc, #32]	; (ec78 <usb_serial_peekchar+0x3c>)
    ec56:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ec58:	4b08      	ldr	r3, [pc, #32]	; (ec7c <usb_serial_peekchar+0x40>)
    ec5a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    ec5e:	4b08      	ldr	r3, [pc, #32]	; (ec80 <usb_serial_peekchar+0x44>)
    ec60:	eb03 2342 	add.w	r3, r3, r2, lsl #9
    ec64:	5c58      	ldrb	r0, [r3, r1]
    ec66:	4770      	bx	lr
	if (tail == rx_head) return -1;
    ec68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ec6c:	4770      	bx	lr
    ec6e:	bf00      	nop
    ec70:	200053d0 	.word	0x200053d0
    ec74:	200053cf 	.word	0x200053cf
    ec78:	200051a4 	.word	0x200051a4
    ec7c:	20005194 	.word	0x20005194
    ec80:	20200080 	.word	0x20200080

0000ec84 <usb_serial_available>:
{
    ec84:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    ec86:	4b04      	ldr	r3, [pc, #16]	; (ec98 <usb_serial_available+0x14>)
    ec88:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    ec8a:	b10c      	cbz	r4, ec90 <usb_serial_available+0xc>
}
    ec8c:	4620      	mov	r0, r4
    ec8e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    ec90:	f000 f9a4 	bl	efdc <yield>
    ec94:	e7fa      	b.n	ec8c <usb_serial_available+0x8>
    ec96:	bf00      	nop
    ec98:	20005180 	.word	0x20005180

0000ec9c <usb_serial_flush_input>:
{
    ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    ec9e:	4b12      	ldr	r3, [pc, #72]	; (ece8 <usb_serial_flush_input+0x4c>)
    eca0:	781c      	ldrb	r4, [r3, #0]
    eca2:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    eca4:	4b11      	ldr	r3, [pc, #68]	; (ecec <usb_serial_flush_input+0x50>)
    eca6:	781b      	ldrb	r3, [r3, #0]
    eca8:	b2db      	uxtb	r3, r3
    ecaa:	429c      	cmp	r4, r3
    ecac:	d01a      	beq.n	ece4 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
    ecae:	4f10      	ldr	r7, [pc, #64]	; (ecf0 <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
    ecb0:	4d10      	ldr	r5, [pc, #64]	; (ecf4 <usb_serial_flush_input+0x58>)
    ecb2:	4e11      	ldr	r6, [pc, #68]	; (ecf8 <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
    ecb4:	3401      	adds	r4, #1
    ecb6:	2c09      	cmp	r4, #9
    ecb8:	bf28      	it	cs
    ecba:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ecbc:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
    ecbe:	682b      	ldr	r3, [r5, #0]
    ecc0:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
    ecc4:	490d      	ldr	r1, [pc, #52]	; (ecfc <usb_serial_flush_input+0x60>)
    ecc6:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    ecca:	1a52      	subs	r2, r2, r1
    eccc:	1a9b      	subs	r3, r3, r2
    ecce:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
    ecd0:	f7ff fe3e 	bl	e950 <rx_queue_transfer>
		rx_tail = tail;
    ecd4:	b2e2      	uxtb	r2, r4
    ecd6:	4b04      	ldr	r3, [pc, #16]	; (ece8 <usb_serial_flush_input+0x4c>)
    ecd8:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
    ecda:	4b04      	ldr	r3, [pc, #16]	; (ecec <usb_serial_flush_input+0x50>)
    ecdc:	781b      	ldrb	r3, [r3, #0]
    ecde:	b2db      	uxtb	r3, r3
    ece0:	42a3      	cmp	r3, r4
    ece2:	d1e7      	bne.n	ecb4 <usb_serial_flush_input+0x18>
}
    ece4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ece6:	bf00      	nop
    ece8:	200053d0 	.word	0x200053d0
    ecec:	200053cf 	.word	0x200053cf
    ecf0:	200051a4 	.word	0x200051a4
    ecf4:	20005180 	.word	0x20005180
    ecf8:	20005184 	.word	0x20005184
    ecfc:	20005194 	.word	0x20005194

0000ed00 <usb_serial_getchar>:
{
    ed00:	b500      	push	{lr}
    ed02:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    ed04:	2101      	movs	r1, #1
    ed06:	f10d 0007 	add.w	r0, sp, #7
    ed0a:	f7ff ff29 	bl	eb60 <usb_serial_read>
    ed0e:	b120      	cbz	r0, ed1a <usb_serial_getchar+0x1a>
    ed10:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    ed14:	b003      	add	sp, #12
    ed16:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    ed1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ed1e:	e7f9      	b.n	ed14 <usb_serial_getchar+0x14>

0000ed20 <usb_serial_write>:
{
    ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed24:	b085      	sub	sp, #20
    ed26:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
    ed28:	4b62      	ldr	r3, [pc, #392]	; (eeb4 <usb_serial_write+0x194>)
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	f000 80bd 	beq.w	eeac <usb_serial_write+0x18c>
    ed32:	468b      	mov	fp, r1
	while (size > 0) {
    ed34:	2900      	cmp	r1, #0
    ed36:	d047      	beq.n	edc8 <usb_serial_write+0xa8>
	uint32_t sent=0;
    ed38:	2300      	movs	r3, #0
    ed3a:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    ed3c:	4c5e      	ldr	r4, [pc, #376]	; (eeb8 <usb_serial_write+0x198>)
    ed3e:	2601      	movs	r6, #1
    ed40:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
    ed44:	f8df 818c 	ldr.w	r8, [pc, #396]	; eed4 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
    ed48:	f8df a184 	ldr.w	sl, [pc, #388]	; eed0 <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
    ed4c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ed50:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    ed52:	4b5a      	ldr	r3, [pc, #360]	; (eebc <usb_serial_write+0x19c>)
    ed54:	f893 9000 	ldrb.w	r9, [r3]
    ed58:	4b59      	ldr	r3, [pc, #356]	; (eec0 <usb_serial_write+0x1a0>)
    ed5a:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
    ed5e:	4b59      	ldr	r3, [pc, #356]	; (eec4 <usb_serial_write+0x1a4>)
    ed60:	881b      	ldrh	r3, [r3, #0]
    ed62:	b94b      	cbnz	r3, ed78 <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
    ed64:	2700      	movs	r7, #0
		int waiting=0;
    ed66:	463d      	mov	r5, r7
    ed68:	e043      	b.n	edf2 <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
    ed6a:	4b56      	ldr	r3, [pc, #344]	; (eec4 <usb_serial_write+0x1a4>)
    ed6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ed70:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
    ed72:	2300      	movs	r3, #0
    ed74:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ed78:	4b50      	ldr	r3, [pc, #320]	; (eebc <usb_serial_write+0x19c>)
    ed7a:	781b      	ldrb	r3, [r3, #0]
    ed7c:	02df      	lsls	r7, r3, #11
    ed7e:	4a51      	ldr	r2, [pc, #324]	; (eec4 <usb_serial_write+0x1a4>)
    ed80:	8815      	ldrh	r5, [r2, #0]
    ed82:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
    ed86:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
    ed8a:	4b4f      	ldr	r3, [pc, #316]	; (eec8 <usb_serial_write+0x1a8>)
    ed8c:	4418      	add	r0, r3
		if (size >= tx_available) {
    ed8e:	455d      	cmp	r5, fp
    ed90:	d947      	bls.n	ee22 <usb_serial_write+0x102>
			memcpy(txdata, data, size);
    ed92:	465a      	mov	r2, fp
    ed94:	9903      	ldr	r1, [sp, #12]
    ed96:	f7fe fac1 	bl	d31c <memcpy>
			tx_available -= size;
    ed9a:	eba5 050b 	sub.w	r5, r5, fp
    ed9e:	4b49      	ldr	r3, [pc, #292]	; (eec4 <usb_serial_write+0x1a4>)
    eda0:	801d      	strh	r5, [r3, #0]
			sent += size;
    eda2:	9b01      	ldr	r3, [sp, #4]
    eda4:	445b      	add	r3, fp
    eda6:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    eda8:	4b48      	ldr	r3, [pc, #288]	; (eecc <usb_serial_write+0x1ac>)
    edaa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    edae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
    edb2:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
    edb6:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    edba:	2300      	movs	r3, #0
    edbc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    edbe:	f1bb 0f00 	cmp.w	fp, #0
    edc2:	d1c3      	bne.n	ed4c <usb_serial_write+0x2c>
    edc4:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
    edc8:	4658      	mov	r0, fp
    edca:	e070      	b.n	eeae <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
    edcc:	f89a 3000 	ldrb.w	r3, [sl]
    edd0:	b9f3      	cbnz	r3, ee10 <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    edd2:	f8d8 3000 	ldr.w	r3, [r8]
    edd6:	1bdb      	subs	r3, r3, r7
    edd8:	2b78      	cmp	r3, #120	; 0x78
    edda:	d81b      	bhi.n	ee14 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
    eddc:	4b35      	ldr	r3, [pc, #212]	; (eeb4 <usb_serial_write+0x194>)
    edde:	781b      	ldrb	r3, [r3, #0]
    ede0:	b1eb      	cbz	r3, ee1e <usb_serial_write+0xfe>
			yield();
    ede2:	f000 f8fb 	bl	efdc <yield>
			tx_noautoflush = 1;
    ede6:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
    ede8:	4635      	mov	r5, r6
    edea:	4b36      	ldr	r3, [pc, #216]	; (eec4 <usb_serial_write+0x1a4>)
    edec:	881b      	ldrh	r3, [r3, #0]
    edee:	2b00      	cmp	r3, #0
    edf0:	d1c2      	bne.n	ed78 <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
    edf2:	4648      	mov	r0, r9
    edf4:	f7ff fd0e 	bl	e814 <usb_transfer_status>
			if (!(status & 0x80)) {
    edf8:	f010 0f80 	tst.w	r0, #128	; 0x80
    edfc:	d0b5      	beq.n	ed6a <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
    edfe:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
    ee02:	2300      	movs	r3, #0
    ee04:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
    ee06:	2d00      	cmp	r5, #0
    ee08:	d1e0      	bne.n	edcc <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
    ee0a:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
    ee0e:	e7dd      	b.n	edcc <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
    ee10:	9801      	ldr	r0, [sp, #4]
    ee12:	e04c      	b.n	eeae <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
    ee14:	4b2e      	ldr	r3, [pc, #184]	; (eed0 <usb_serial_write+0x1b0>)
    ee16:	2201      	movs	r2, #1
    ee18:	701a      	strb	r2, [r3, #0]
				return sent;
    ee1a:	9801      	ldr	r0, [sp, #4]
    ee1c:	e047      	b.n	eeae <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
    ee1e:	9801      	ldr	r0, [sp, #4]
    ee20:	e045      	b.n	eeae <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
    ee22:	462a      	mov	r2, r5
    ee24:	9903      	ldr	r1, [sp, #12]
    ee26:	f7fe fa79 	bl	d31c <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ee2a:	4d27      	ldr	r5, [pc, #156]	; (eec8 <usb_serial_write+0x1a8>)
    ee2c:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ee2e:	2300      	movs	r3, #0
    ee30:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ee34:	4629      	mov	r1, r5
    ee36:	4648      	mov	r0, r9
    ee38:	f7ff fcb0 	bl	e79c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ee3c:	462b      	mov	r3, r5
	asm("dsb");
    ee3e:	f3bf 8f4f 	dsb	sy
    ee42:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    ee46:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    ee4a:	428a      	cmp	r2, r1
    ee4c:	bf8c      	ite	hi
    ee4e:	2201      	movhi	r2, #1
    ee50:	2240      	movls	r2, #64	; 0x40
    ee52:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    ee56:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ee5a:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    ee5e:	3320      	adds	r3, #32
	} while (location < end_addr);
    ee60:	429d      	cmp	r5, r3
    ee62:	d1fa      	bne.n	ee5a <usb_serial_write+0x13a>
	asm("dsb");
    ee64:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ee68:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    ee6c:	4649      	mov	r1, r9
    ee6e:	2004      	movs	r0, #4
    ee70:	f7ff fcac 	bl	e7cc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    ee74:	4b11      	ldr	r3, [pc, #68]	; (eebc <usb_serial_write+0x19c>)
    ee76:	781b      	ldrb	r3, [r3, #0]
    ee78:	3301      	adds	r3, #1
    ee7a:	b2db      	uxtb	r3, r3
    ee7c:	2b03      	cmp	r3, #3
    ee7e:	d811      	bhi.n	eea4 <usb_serial_write+0x184>
    ee80:	4a0e      	ldr	r2, [pc, #56]	; (eebc <usb_serial_write+0x19c>)
    ee82:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    ee84:	4a0f      	ldr	r2, [pc, #60]	; (eec4 <usb_serial_write+0x1a4>)
    ee86:	8813      	ldrh	r3, [r2, #0]
    ee88:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
    ee8c:	9901      	ldr	r1, [sp, #4]
    ee8e:	4419      	add	r1, r3
    ee90:	9101      	str	r1, [sp, #4]
			data += tx_available;
    ee92:	9903      	ldr	r1, [sp, #12]
    ee94:	4419      	add	r1, r3
    ee96:	9103      	str	r1, [sp, #12]
			tx_available = 0;
    ee98:	2300      	movs	r3, #0
    ee9a:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
    ee9c:	4a0b      	ldr	r2, [pc, #44]	; (eecc <usb_serial_write+0x1ac>)
    ee9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
    eea2:	e788      	b.n	edb6 <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eea4:	4b05      	ldr	r3, [pc, #20]	; (eebc <usb_serial_write+0x19c>)
    eea6:	2200      	movs	r2, #0
    eea8:	701a      	strb	r2, [r3, #0]
    eeaa:	e7eb      	b.n	ee84 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
    eeac:	2000      	movs	r0, #0
}
    eeae:	b005      	add	sp, #20
    eeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eeb4:	200053d8 	.word	0x200053d8
    eeb8:	200053d6 	.word	0x200053d6
    eebc:	200053d5 	.word	0x200053d5
    eec0:	20004000 	.word	0x20004000
    eec4:	200053ba 	.word	0x200053ba
    eec8:	20201080 	.word	0x20201080
    eecc:	402e0000 	.word	0x402e0000
    eed0:	200053d4 	.word	0x200053d4
    eed4:	20005388 	.word	0x20005388

0000eed8 <usb_serial_putchar>:
{
    eed8:	b500      	push	{lr}
    eeda:	b083      	sub	sp, #12
    eedc:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    eee0:	2101      	movs	r1, #1
    eee2:	f10d 0007 	add.w	r0, sp, #7
    eee6:	f7ff ff1b 	bl	ed20 <usb_serial_write>
}
    eeea:	b003      	add	sp, #12
    eeec:	f85d fb04 	ldr.w	pc, [sp], #4

0000eef0 <usb_serial_write_buffer_free>:
{
    eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
    eef2:	4b0f      	ldr	r3, [pc, #60]	; (ef30 <usb_serial_write_buffer_free+0x40>)
    eef4:	2201      	movs	r2, #1
    eef6:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
    eef8:	4d0e      	ldr	r5, [pc, #56]	; (ef34 <usb_serial_write_buffer_free+0x44>)
    eefa:	2400      	movs	r4, #0
	uint32_t sum = 0;
    eefc:	4627      	mov	r7, r4
		if (i == tx_head) continue;
    eefe:	4e0e      	ldr	r6, [pc, #56]	; (ef38 <usb_serial_write_buffer_free+0x48>)
    ef00:	e003      	b.n	ef0a <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
    ef02:	3401      	adds	r4, #1
    ef04:	3520      	adds	r5, #32
    ef06:	2c04      	cmp	r4, #4
    ef08:	d00b      	beq.n	ef22 <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
    ef0a:	7833      	ldrb	r3, [r6, #0]
    ef0c:	42a3      	cmp	r3, r4
    ef0e:	d0f8      	beq.n	ef02 <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    ef10:	4628      	mov	r0, r5
    ef12:	f7ff fc7f 	bl	e814 <usb_transfer_status>
    ef16:	f010 0f80 	tst.w	r0, #128	; 0x80
    ef1a:	bf08      	it	eq
    ef1c:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
    ef20:	e7ef      	b.n	ef02 <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
    ef22:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    ef26:	4b02      	ldr	r3, [pc, #8]	; (ef30 <usb_serial_write_buffer_free+0x40>)
    ef28:	2200      	movs	r2, #0
    ef2a:	701a      	strb	r2, [r3, #0]
}
    ef2c:	4638      	mov	r0, r7
    ef2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ef30:	200053d6 	.word	0x200053d6
    ef34:	20004000 	.word	0x20004000
    ef38:	200053d5 	.word	0x200053d5

0000ef3c <usb_serial_flush_output>:
	if (!usb_configuration) return;
    ef3c:	4b21      	ldr	r3, [pc, #132]	; (efc4 <usb_serial_flush_output+0x88>)
    ef3e:	781b      	ldrb	r3, [r3, #0]
    ef40:	2b00      	cmp	r3, #0
    ef42:	d03e      	beq.n	efc2 <usb_serial_flush_output+0x86>
{
    ef44:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    ef46:	4b20      	ldr	r3, [pc, #128]	; (efc8 <usb_serial_flush_output+0x8c>)
    ef48:	881d      	ldrh	r5, [r3, #0]
    ef4a:	b905      	cbnz	r5, ef4e <usb_serial_flush_output+0x12>
}
    ef4c:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
    ef4e:	4a1f      	ldr	r2, [pc, #124]	; (efcc <usb_serial_flush_output+0x90>)
    ef50:	2101      	movs	r1, #1
    ef52:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    ef54:	4a1e      	ldr	r2, [pc, #120]	; (efd0 <usb_serial_flush_output+0x94>)
    ef56:	7811      	ldrb	r1, [r2, #0]
    ef58:	4e1e      	ldr	r6, [pc, #120]	; (efd4 <usb_serial_flush_output+0x98>)
    ef5a:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ef5e:	4c1e      	ldr	r4, [pc, #120]	; (efd8 <usb_serial_flush_output+0x9c>)
    ef60:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    ef64:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ef68:	2300      	movs	r3, #0
    ef6a:	462a      	mov	r2, r5
    ef6c:	4621      	mov	r1, r4
    ef6e:	4630      	mov	r0, r6
    ef70:	f7ff fc14 	bl	e79c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ef74:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    ef76:	1962      	adds	r2, r4, r5
	asm("dsb");
    ef78:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ef7c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ef80:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    ef84:	3320      	adds	r3, #32
	} while (location < end_addr);
    ef86:	429a      	cmp	r2, r3
    ef88:	d8fa      	bhi.n	ef80 <usb_serial_flush_output+0x44>
	asm("dsb");
    ef8a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ef8e:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ef92:	4631      	mov	r1, r6
    ef94:	2004      	movs	r0, #4
    ef96:	f7ff fc19 	bl	e7cc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ef9a:	4b0d      	ldr	r3, [pc, #52]	; (efd0 <usb_serial_flush_output+0x94>)
    ef9c:	781b      	ldrb	r3, [r3, #0]
    ef9e:	3301      	adds	r3, #1
    efa0:	b2db      	uxtb	r3, r3
    efa2:	2b03      	cmp	r3, #3
    efa4:	d809      	bhi.n	efba <usb_serial_flush_output+0x7e>
    efa6:	4a0a      	ldr	r2, [pc, #40]	; (efd0 <usb_serial_flush_output+0x94>)
    efa8:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    efaa:	2300      	movs	r3, #0
    efac:	4a06      	ldr	r2, [pc, #24]	; (efc8 <usb_serial_flush_output+0x8c>)
    efae:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
    efb0:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    efb4:	4a05      	ldr	r2, [pc, #20]	; (efcc <usb_serial_flush_output+0x90>)
    efb6:	7013      	strb	r3, [r2, #0]
    efb8:	e7c8      	b.n	ef4c <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
    efba:	4b05      	ldr	r3, [pc, #20]	; (efd0 <usb_serial_flush_output+0x94>)
    efbc:	2200      	movs	r2, #0
    efbe:	701a      	strb	r2, [r3, #0]
    efc0:	e7f3      	b.n	efaa <usb_serial_flush_output+0x6e>
    efc2:	4770      	bx	lr
    efc4:	200053d8 	.word	0x200053d8
    efc8:	200053ba 	.word	0x200053ba
    efcc:	200053d6 	.word	0x200053d6
    efd0:	200053d5 	.word	0x200053d5
    efd4:	20004000 	.word	0x20004000
    efd8:	20201080 	.word	0x20201080

0000efdc <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    efdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    efde:	4b39      	ldr	r3, [pc, #228]	; (f0c4 <yield+0xe8>)
    efe0:	781b      	ldrb	r3, [r3, #0]
    efe2:	b1ab      	cbz	r3, f010 <yield+0x34>
	if (running) return; // TODO: does this need to be atomic?
    efe4:	4a38      	ldr	r2, [pc, #224]	; (f0c8 <yield+0xec>)
    efe6:	7812      	ldrb	r2, [r2, #0]
    efe8:	b992      	cbnz	r2, f010 <yield+0x34>
	running = 1;
    efea:	4a37      	ldr	r2, [pc, #220]	; (f0c8 <yield+0xec>)
    efec:	2101      	movs	r1, #1
    efee:	7011      	strb	r1, [r2, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    eff0:	f013 0f01 	tst.w	r3, #1
    eff4:	d10d      	bne.n	f012 <yield+0x36>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    eff6:	4b33      	ldr	r3, [pc, #204]	; (f0c4 <yield+0xe8>)
    eff8:	781b      	ldrb	r3, [r3, #0]
    effa:	f013 0f02 	tst.w	r3, #2
    effe:	d118      	bne.n	f032 <yield+0x56>

	running = 0;
    f000:	4b31      	ldr	r3, [pc, #196]	; (f0c8 <yield+0xec>)
    f002:	2200      	movs	r2, #0
    f004:	701a      	strb	r2, [r3, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f006:	4b2f      	ldr	r3, [pc, #188]	; (f0c4 <yield+0xe8>)
    f008:	781b      	ldrb	r3, [r3, #0]
    f00a:	f013 0f04 	tst.w	r3, #4
    f00e:	d12a      	bne.n	f066 <yield+0x8a>
	
};
    f010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        virtual int available() { return usb_serial_available(); }
    f012:	f7ff fe37 	bl	ec84 <usb_serial_available>
		if (Serial.available()) serialEvent();
    f016:	b948      	cbnz	r0, f02c <yield+0x50>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    f018:	4b2c      	ldr	r3, [pc, #176]	; (f0cc <yield+0xf0>)
    f01a:	781b      	ldrb	r3, [r3, #0]
    f01c:	2b00      	cmp	r3, #0
    f01e:	d0ea      	beq.n	eff6 <yield+0x1a>
    f020:	4a28      	ldr	r2, [pc, #160]	; (f0c4 <yield+0xe8>)
    f022:	7813      	ldrb	r3, [r2, #0]
    f024:	f023 0301 	bic.w	r3, r3, #1
    f028:	7013      	strb	r3, [r2, #0]
    f02a:	e7e4      	b.n	eff6 <yield+0x1a>
		if (Serial.available()) serialEvent();
    f02c:	f000 f85a 	bl	f0e4 <serialEvent()>
    f030:	e7f2      	b.n	f018 <yield+0x3c>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f032:	4b27      	ldr	r3, [pc, #156]	; (f0d0 <yield+0xf4>)
    f034:	781b      	ldrb	r3, [r3, #0]
    f036:	2b00      	cmp	r3, #0
    f038:	d0e2      	beq.n	f000 <yield+0x24>
    f03a:	2400      	movs	r4, #0
			s_serials_with_serial_events[i]->doYieldCode();
    f03c:	4f25      	ldr	r7, [pc, #148]	; (f0d4 <yield+0xf8>)
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f03e:	4e24      	ldr	r6, [pc, #144]	; (f0d0 <yield+0xf4>)
    f040:	e004      	b.n	f04c <yield+0x70>
    f042:	3401      	adds	r4, #1
    f044:	7832      	ldrb	r2, [r6, #0]
    f046:	b2e3      	uxtb	r3, r4
    f048:	429a      	cmp	r2, r3
    f04a:	d9d9      	bls.n	f000 <yield+0x24>
			s_serials_with_serial_events[i]->doYieldCode();
    f04c:	b2e3      	uxtb	r3, r4
    f04e:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    f052:	682b      	ldr	r3, [r5, #0]
    f054:	691b      	ldr	r3, [r3, #16]
    f056:	4628      	mov	r0, r5
    f058:	4798      	blx	r3
    f05a:	2800      	cmp	r0, #0
    f05c:	d0f1      	beq.n	f042 <yield+0x66>
    f05e:	696b      	ldr	r3, [r5, #20]
    f060:	689b      	ldr	r3, [r3, #8]
    f062:	4798      	blx	r3
    f064:	e7ed      	b.n	f042 <yield+0x66>
		if (!firstYield) return;  
    f066:	4b1c      	ldr	r3, [pc, #112]	; (f0d8 <yield+0xfc>)
    f068:	681b      	ldr	r3, [r3, #0]
    f06a:	2b00      	cmp	r3, #0
    f06c:	d0d0      	beq.n	f010 <yield+0x34>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f06e:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    f072:	2b00      	cmp	r3, #0
    f074:	d1cc      	bne.n	f010 <yield+0x34>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f076:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    f07a:	b672      	cpsid	i
		EventResponder *first = firstYield;
    f07c:	4b16      	ldr	r3, [pc, #88]	; (f0d8 <yield+0xfc>)
    f07e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f080:	b1a0      	cbz	r0, f0ac <yield+0xd0>
		if (runningFromYield) {
    f082:	4b16      	ldr	r3, [pc, #88]	; (f0dc <yield+0x100>)
    f084:	781b      	ldrb	r3, [r3, #0]
    f086:	b9ab      	cbnz	r3, f0b4 <yield+0xd8>
		runningFromYield = true;
    f088:	4b14      	ldr	r3, [pc, #80]	; (f0dc <yield+0x100>)
    f08a:	2101      	movs	r1, #1
    f08c:	7019      	strb	r1, [r3, #0]
		firstYield = first->_next;
    f08e:	6943      	ldr	r3, [r0, #20]
    f090:	4911      	ldr	r1, [pc, #68]	; (f0d8 <yield+0xfc>)
    f092:	600b      	str	r3, [r1, #0]
		if (firstYield) {
    f094:	b193      	cbz	r3, f0bc <yield+0xe0>
			firstYield->_prev = nullptr;
    f096:	2100      	movs	r1, #0
    f098:	6199      	str	r1, [r3, #24]
		if (doit) __enable_irq();
    f09a:	b902      	cbnz	r2, f09e <yield+0xc2>
    f09c:	b662      	cpsie	i
		first->_triggered = false;
    f09e:	2400      	movs	r4, #0
    f0a0:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    f0a2:	6883      	ldr	r3, [r0, #8]
    f0a4:	4798      	blx	r3
		runningFromYield = false;
    f0a6:	4b0d      	ldr	r3, [pc, #52]	; (f0dc <yield+0x100>)
    f0a8:	701c      	strb	r4, [r3, #0]
    f0aa:	e7b1      	b.n	f010 <yield+0x34>
		if (doit) __enable_irq();
    f0ac:	2a00      	cmp	r2, #0
    f0ae:	d1af      	bne.n	f010 <yield+0x34>
    f0b0:	b662      	cpsie	i
    f0b2:	e7ad      	b.n	f010 <yield+0x34>
    f0b4:	2a00      	cmp	r2, #0
    f0b6:	d1ab      	bne.n	f010 <yield+0x34>
    f0b8:	b662      	cpsie	i
    f0ba:	e7a9      	b.n	f010 <yield+0x34>
			lastYield = nullptr;
    f0bc:	4b08      	ldr	r3, [pc, #32]	; (f0e0 <yield+0x104>)
    f0be:	2100      	movs	r1, #0
    f0c0:	6019      	str	r1, [r3, #0]
    f0c2:	e7ea      	b.n	f09a <yield+0xbe>
    f0c4:	20003a5b 	.word	0x20003a5b
    f0c8:	200053c6 	.word	0x200053c6
    f0cc:	6000209a 	.word	0x6000209a
    f0d0:	200053c5 	.word	0x200053c5
    f0d4:	20004c78 	.word	0x20004c78
    f0d8:	20004c68 	.word	0x20004c68
    f0dc:	200053c4 	.word	0x200053c4
    f0e0:	20004c74 	.word	0x20004c74

0000f0e4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    f0e4:	4770      	bx	lr
	...

0000f0e8 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    f0e8:	6803      	ldr	r3, [r0, #0]
    f0ea:	b16b      	cbz	r3, f108 <smalloc_verify_pool+0x20>
    f0ec:	6842      	ldr	r2, [r0, #4]
    f0ee:	b16a      	cbz	r2, f10c <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
    f0f0:	4b07      	ldr	r3, [pc, #28]	; (f110 <smalloc_verify_pool+0x28>)
    f0f2:	fba3 1302 	umull	r1, r3, r3, r2
    f0f6:	08db      	lsrs	r3, r3, #3
    f0f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f0fc:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    f100:	bf0c      	ite	eq
    f102:	2001      	moveq	r0, #1
    f104:	2000      	movne	r0, #0
    f106:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    f108:	2000      	movs	r0, #0
    f10a:	4770      	bx	lr
    f10c:	2000      	movs	r0, #0
	return 1;
}
    f10e:	4770      	bx	lr
    f110:	aaaaaaab 	.word	0xaaaaaaab

0000f114 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    f114:	b538      	push	{r3, r4, r5, lr}
    f116:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    f118:	f7ff ffe6 	bl	f0e8 <smalloc_verify_pool>
    f11c:	b9b8      	cbnz	r0, f14e <sm_align_pool+0x3a>
    f11e:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
    f120:	6862      	ldr	r2, [r4, #4]
    f122:	4b0c      	ldr	r3, [pc, #48]	; (f154 <sm_align_pool+0x40>)
    f124:	fba3 1302 	umull	r1, r3, r3, r2
    f128:	08db      	lsrs	r3, r3, #3
    f12a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    f12e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    f132:	d001      	beq.n	f138 <sm_align_pool+0x24>
    f134:	1ad2      	subs	r2, r2, r3
    f136:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    f138:	6863      	ldr	r3, [r4, #4]
    f13a:	2bf0      	cmp	r3, #240	; 0xf0
    f13c:	d902      	bls.n	f144 <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
    f13e:	2501      	movs	r5, #1
}
    f140:	4628      	mov	r0, r5
    f142:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
    f144:	f001 fe20 	bl	10d88 <__errno>
    f148:	231c      	movs	r3, #28
    f14a:	6003      	str	r3, [r0, #0]
		return 0;
    f14c:	e7f8      	b.n	f140 <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
    f14e:	2501      	movs	r5, #1
    f150:	e7f6      	b.n	f140 <sm_align_pool+0x2c>
    f152:	bf00      	nop
    f154:	aaaaaaab 	.word	0xaaaaaaab

0000f158 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    f158:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    f15a:	b190      	cbz	r0, f182 <sm_set_pool+0x2a>
    f15c:	461d      	mov	r5, r3
    f15e:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    f160:	b101      	cbz	r1, f164 <sm_set_pool+0xc>
    f162:	b9fa      	cbnz	r2, f1a4 <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
    f164:	4620      	mov	r0, r4
    f166:	f7ff ffbf 	bl	f0e8 <smalloc_verify_pool>
    f16a:	4606      	mov	r6, r0
    f16c:	b1a8      	cbz	r0, f19a <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f16e:	68a3      	ldr	r3, [r4, #8]
    f170:	b96b      	cbnz	r3, f18e <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
    f172:	2300      	movs	r3, #0
    f174:	6023      	str	r3, [r4, #0]
    f176:	6063      	str	r3, [r4, #4]
    f178:	60a3      	str	r3, [r4, #8]
    f17a:	60e3      	str	r3, [r4, #12]
			return 1;
    f17c:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    f17e:	4630      	mov	r0, r6
    f180:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    f182:	f001 fe01 	bl	10d88 <__errno>
    f186:	2316      	movs	r3, #22
    f188:	6003      	str	r3, [r0, #0]
		return 0;
    f18a:	2600      	movs	r6, #0
    f18c:	e7f7      	b.n	f17e <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f18e:	6862      	ldr	r2, [r4, #4]
    f190:	2100      	movs	r1, #0
    f192:	6820      	ldr	r0, [r4, #0]
    f194:	f002 f98a 	bl	114ac <memset>
    f198:	e7eb      	b.n	f172 <sm_set_pool+0x1a>
		errno = EINVAL;
    f19a:	f001 fdf5 	bl	10d88 <__errno>
    f19e:	2316      	movs	r3, #22
    f1a0:	6003      	str	r3, [r0, #0]
		return 0;
    f1a2:	e7ec      	b.n	f17e <sm_set_pool+0x26>
	spool->pool = new_pool;
    f1a4:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
    f1a6:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
    f1a8:	9b04      	ldr	r3, [sp, #16]
    f1aa:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    f1ac:	f7ff ffb2 	bl	f114 <sm_align_pool>
    f1b0:	4606      	mov	r6, r0
    f1b2:	2800      	cmp	r0, #0
    f1b4:	d0e3      	beq.n	f17e <sm_set_pool+0x26>
	if (do_zero) {
    f1b6:	b90d      	cbnz	r5, f1bc <sm_set_pool+0x64>
	return 1;
    f1b8:	2601      	movs	r6, #1
    f1ba:	e7e0      	b.n	f17e <sm_set_pool+0x26>
		spool->do_zero = do_zero;
    f1bc:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    f1be:	6862      	ldr	r2, [r4, #4]
    f1c0:	2100      	movs	r1, #0
    f1c2:	6820      	ldr	r0, [r4, #0]
    f1c4:	f002 f972 	bl	114ac <memset>
	return 1;
    f1c8:	2601      	movs	r6, #1
    f1ca:	e7d8      	b.n	f17e <sm_set_pool+0x26>

0000f1cc <sqrtf>:
    f1cc:	b508      	push	{r3, lr}
    f1ce:	ed2d 8b02 	vpush	{d8}
    f1d2:	eeb0 8a40 	vmov.f32	s16, s0
    f1d6:	f000 fb0f 	bl	f7f8 <__ieee754_sqrtf>
    f1da:	eeb4 8a48 	vcmp.f32	s16, s16
    f1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1e2:	d606      	bvs.n	f1f2 <sqrtf+0x26>
    f1e4:	eddf 8a09 	vldr	s17, [pc, #36]	; f20c <sqrtf+0x40>
    f1e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
    f1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f1f0:	d402      	bmi.n	f1f8 <sqrtf+0x2c>
    f1f2:	ecbd 8b02 	vpop	{d8}
    f1f6:	bd08      	pop	{r3, pc}
    f1f8:	f001 fdc6 	bl	10d88 <__errno>
    f1fc:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    f200:	ecbd 8b02 	vpop	{d8}
    f204:	2321      	movs	r3, #33	; 0x21
    f206:	6003      	str	r3, [r0, #0]
    f208:	bd08      	pop	{r3, pc}
    f20a:	bf00      	nop
    f20c:	00000000 	.word	0x00000000

0000f210 <pow>:
    f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f214:	ec5b ab10 	vmov	sl, fp, d0
    f218:	ed2d 8b0a 	vpush	{d8-d12}
    f21c:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    f220:	ee11 ea90 	vmov	lr, s3
    f224:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    f228:	f240 70fd 	movw	r0, #2045	; 0x7fd
    f22c:	4286      	cmp	r6, r0
    f22e:	ee10 1a10 	vmov	r1, s0
    f232:	ee11 3a10 	vmov	r3, s2
    f236:	b089      	sub	sp, #36	; 0x24
    f238:	465a      	mov	r2, fp
    f23a:	4665      	mov	r5, ip
    f23c:	ea4f 541e 	mov.w	r4, lr, lsr #20
    f240:	f200 80c6 	bhi.w	f3d0 <pow+0x1c0>
    f244:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f248:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    f24c:	2e7f      	cmp	r6, #127	; 0x7f
    f24e:	bf98      	it	ls
    f250:	2000      	movls	r0, #0
    f252:	f200 80bd 	bhi.w	f3d0 <pow+0x1c0>
    f256:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    f25a:	4ce1      	ldr	r4, [pc, #900]	; (f5e0 <pow+0x3d0>)
    f25c:	4be1      	ldr	r3, [pc, #900]	; (f5e4 <pow+0x3d4>)
    f25e:	4414      	add	r4, r2
    f260:	f3c4 3546 	ubfx	r5, r4, #13, #7
    f264:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    f268:	ed93 6b00 	vldr	d6, [r3]
    f26c:	ed93 7b02 	vldr	d7, [r3, #8]
    f270:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    f274:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    f278:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    f27c:	0d26      	lsrs	r6, r4, #20
    f27e:	1524      	asrs	r4, r4, #20
    f280:	ee05 4a90 	vmov	s11, r4
    f284:	0536      	lsls	r6, r6, #20
    f286:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    f28a:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    f28e:	1b95      	subs	r5, r2, r6
    f290:	eea5 2b06 	vfma.f64	d2, d5, d6
    f294:	eea5 9b07 	vfma.f64	d9, d5, d7
    f298:	ed93 ab04 	vldr	d10, [r3, #16]
    f29c:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    f2a0:	ed93 bb08 	vldr	d11, [r3, #32]
    f2a4:	ed93 7b06 	vldr	d7, [r3, #24]
    f2a8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    f2ac:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f2b0:	1e0c      	subs	r4, r1, #0
    f2b2:	ec45 4b1c 	vmov	d12, r4, r5
    f2b6:	eeac 0b08 	vfma.f64	d0, d12, d8
    f2ba:	eea0 3b05 	vfma.f64	d3, d0, d5
    f2be:	eea0 6b04 	vfma.f64	d6, d0, d4
    f2c2:	ee20 5b0a 	vmul.f64	d5, d0, d10
    f2c6:	ee30 4b02 	vadd.f64	d4, d0, d2
    f2ca:	ee20 8b05 	vmul.f64	d8, d0, d5
    f2ce:	eea0 7b0b 	vfma.f64	d7, d0, d11
    f2d2:	eea8 6b03 	vfma.f64	d6, d8, d3
    f2d6:	ee32 2b44 	vsub.f64	d2, d2, d4
    f2da:	eea8 7b06 	vfma.f64	d7, d8, d6
    f2de:	ee32 2b00 	vadd.f64	d2, d2, d0
    f2e2:	eeb0 3b48 	vmov.f64	d3, d8
    f2e6:	ee39 2b02 	vadd.f64	d2, d9, d2
    f2ea:	ee95 3b00 	vfnms.f64	d3, d5, d0
    f2ee:	ee34 5b08 	vadd.f64	d5, d4, d8
    f2f2:	ee20 0b08 	vmul.f64	d0, d0, d8
    f2f6:	ee34 4b45 	vsub.f64	d4, d4, d5
    f2fa:	ee32 6b03 	vadd.f64	d6, d2, d3
    f2fe:	ee34 4b08 	vadd.f64	d4, d4, d8
    f302:	ee36 6b04 	vadd.f64	d6, d6, d4
    f306:	eea0 6b07 	vfma.f64	d6, d0, d7
    f30a:	ee35 4b06 	vadd.f64	d4, d5, d6
    f30e:	ee21 8b04 	vmul.f64	d8, d1, d4
    f312:	ee18 2a90 	vmov	r2, s17
    f316:	eeb0 7b48 	vmov.f64	d7, d8
    f31a:	f3c2 550a 	ubfx	r5, r2, #20, #11
    f31e:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    f322:	18eb      	adds	r3, r5, r3
    f324:	2b3e      	cmp	r3, #62	; 0x3e
    f326:	ee91 7b04 	vfnms.f64	d7, d1, d4
    f32a:	ee35 5b44 	vsub.f64	d5, d5, d4
    f32e:	ee35 5b06 	vadd.f64	d5, d5, d6
    f332:	eea1 7b05 	vfma.f64	d7, d1, d5
    f336:	f200 8093 	bhi.w	f460 <pow+0x250>
    f33a:	4bab      	ldr	r3, [pc, #684]	; (f5e8 <pow+0x3d8>)
    f33c:	ed93 4b02 	vldr	d4, [r3, #8]
    f340:	ed93 5b00 	vldr	d5, [r3]
    f344:	eeb0 1b44 	vmov.f64	d1, d4
    f348:	ed93 2b04 	vldr	d2, [r3, #16]
    f34c:	eea8 1b05 	vfma.f64	d1, d8, d5
    f350:	ed93 6b06 	vldr	d6, [r3, #24]
    f354:	ee11 1a10 	vmov	r1, s2
    f358:	ee31 1b44 	vsub.f64	d1, d1, d4
    f35c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    f360:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    f364:	eea1 8b02 	vfma.f64	d8, d1, d2
    f368:	eea1 8b06 	vfma.f64	d8, d1, d6
    f36c:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    f370:	ee37 7b08 	vadd.f64	d7, d7, d8
    f374:	ee27 2b07 	vmul.f64	d2, d7, d7
    f378:	1892      	adds	r2, r2, r2
    f37a:	f102 040f 	add.w	r4, r2, #15
    f37e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f382:	eea7 6b04 	vfma.f64	d6, d7, d4
    f386:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    f38a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    f38e:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    f392:	ed93 5b08 	vldr	d5, [r3, #32]
    f396:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    f39a:	6857      	ldr	r7, [r2, #4]
    f39c:	eea7 5b03 	vfma.f64	d5, d7, d3
    f3a0:	1840      	adds	r0, r0, r1
    f3a2:	2400      	movs	r4, #0
    f3a4:	ee22 3b02 	vmul.f64	d3, d2, d2
    f3a8:	ee37 7b04 	vadd.f64	d7, d7, d4
    f3ac:	19a2      	adds	r2, r4, r6
    f3ae:	eea2 7b05 	vfma.f64	d7, d2, d5
    f3b2:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    f3b6:	eea3 7b06 	vfma.f64	d7, d3, d6
    f3ba:	2d00      	cmp	r5, #0
    f3bc:	d05f      	beq.n	f47e <pow+0x26e>
    f3be:	ec43 2b10 	vmov	d0, r2, r3
    f3c2:	eea7 0b00 	vfma.f64	d0, d7, d0
    f3c6:	b009      	add	sp, #36	; 0x24
    f3c8:	ecbd 8b0a 	vpop	{d8-d12}
    f3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3d0:	18d8      	adds	r0, r3, r3
    f3d2:	eb4e 090e 	adc.w	r9, lr, lr
    f3d6:	1e46      	subs	r6, r0, #1
    f3d8:	4637      	mov	r7, r6
    f3da:	f06f 0801 	mvn.w	r8, #1
    f3de:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
    f3e2:	45b8      	cmp	r8, r7
    f3e4:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f3e8:	eb77 0606 	sbcs.w	r6, r7, r6
    f3ec:	f0c0 8120 	bcc.w	f630 <pow+0x420>
    f3f0:	1848      	adds	r0, r1, r1
    f3f2:	eb42 0902 	adc.w	r9, r2, r2
    f3f6:	1e46      	subs	r6, r0, #1
    f3f8:	4637      	mov	r7, r6
    f3fa:	f169 0600 	sbc.w	r6, r9, #0
    f3fe:	45b8      	cmp	r8, r7
    f400:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f404:	eb77 0606 	sbcs.w	r6, r7, r6
    f408:	f0c0 8139 	bcc.w	f67e <pow+0x46e>
    f40c:	2a00      	cmp	r2, #0
    f40e:	db6a      	blt.n	f4e6 <pow+0x2d6>
    f410:	2000      	movs	r0, #0
    f412:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f416:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    f41a:	2b7f      	cmp	r3, #127	; 0x7f
    f41c:	f240 77ff 	movw	r7, #2047	; 0x7ff
    f420:	d94f      	bls.n	f4c2 <pow+0x2b2>
    f422:	4b72      	ldr	r3, [pc, #456]	; (f5ec <pow+0x3dc>)
    f424:	2000      	movs	r0, #0
    f426:	429a      	cmp	r2, r3
    f428:	bf08      	it	eq
    f42a:	4281      	cmpeq	r1, r0
    f42c:	f000 80fd 	beq.w	f62a <pow+0x41a>
    f430:	f240 35bd 	movw	r5, #957	; 0x3bd
    f434:	42ae      	cmp	r6, r5
    f436:	f240 8091 	bls.w	f55c <pow+0x34c>
    f43a:	2901      	cmp	r1, #1
    f43c:	eb72 0303 	sbcs.w	r3, r2, r3
    f440:	bf34      	ite	cc
    f442:	2301      	movcc	r3, #1
    f444:	2300      	movcs	r3, #0
    f446:	42bc      	cmp	r4, r7
    f448:	bf8c      	ite	hi
    f44a:	2400      	movhi	r4, #0
    f44c:	2401      	movls	r4, #1
    f44e:	42a3      	cmp	r3, r4
    f450:	d10e      	bne.n	f470 <pow+0x260>
    f452:	b009      	add	sp, #36	; 0x24
    f454:	ecbd 8b0a 	vpop	{d8-d12}
    f458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f45c:	f000 ba30 	b.w	f8c0 <__math_uflow>
    f460:	2b00      	cmp	r3, #0
    f462:	f2c0 80ce 	blt.w	f602 <pow+0x3f2>
    f466:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    f46a:	d975      	bls.n	f558 <pow+0x348>
    f46c:	2a00      	cmp	r2, #0
    f46e:	dbf0      	blt.n	f452 <pow+0x242>
    f470:	b009      	add	sp, #36	; 0x24
    f472:	ecbd 8b0a 	vpop	{d8-d12}
    f476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f47a:	f000 ba29 	b.w	f8d0 <__math_oflow>
    f47e:	42a1      	cmp	r1, r4
    f480:	f280 8113 	bge.w	f6aa <pow+0x49a>
    f484:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f488:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    f48c:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    f490:	4610      	mov	r0, r2
    f492:	ec41 0b15 	vmov	d5, r0, r1
    f496:	ee27 7b05 	vmul.f64	d7, d7, d5
    f49a:	ee35 6b07 	vadd.f64	d6, d5, d7
    f49e:	eeb0 4bc6 	vabs.f64	d4, d6
    f4a2:	eeb4 4bc3 	vcmpe.f64	d4, d3
    f4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f4aa:	d461      	bmi.n	f570 <pow+0x360>
    f4ac:	ed9f 0b48 	vldr	d0, [pc, #288]	; f5d0 <pow+0x3c0>
    f4b0:	ee26 0b00 	vmul.f64	d0, d6, d0
    f4b4:	b009      	add	sp, #36	; 0x24
    f4b6:	ecbd 8b0a 	vpop	{d8-d12}
    f4ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4be:	f000 ba37 	b.w	f930 <__math_check_uflow>
    f4c2:	2d00      	cmp	r5, #0
    f4c4:	f47f aec7 	bne.w	f256 <pow+0x46>
    f4c8:	ed9f 7b43 	vldr	d7, [pc, #268]	; f5d8 <pow+0x3c8>
    f4cc:	ec4b ab16 	vmov	d6, sl, fp
    f4d0:	ee26 7b07 	vmul.f64	d7, d6, d7
    f4d4:	ec53 2b17 	vmov	r2, r3, d7
    f4d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f4dc:	ee17 1a10 	vmov	r1, s14
    f4e0:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    f4e4:	e6b7      	b.n	f256 <pow+0x46>
    f4e6:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f4ea:	f240 30fe 	movw	r0, #1022	; 0x3fe
    f4ee:	4286      	cmp	r6, r0
    f4f0:	dd7e      	ble.n	f5f0 <pow+0x3e0>
    f4f2:	f240 4033 	movw	r0, #1075	; 0x433
    f4f6:	4286      	cmp	r6, r0
    f4f8:	f300 80fa 	bgt.w	f6f0 <pow+0x4e0>
    f4fc:	1b80      	subs	r0, r0, r6
    f4fe:	f1a0 0520 	sub.w	r5, r0, #32
    f502:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f506:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f50a:	4087      	lsls	r7, r0
    f50c:	fa09 f905 	lsl.w	r9, r9, r5
    f510:	f1c0 0820 	rsb	r8, r0, #32
    f514:	9501      	str	r5, [sp, #4]
    f516:	ea47 0509 	orr.w	r5, r7, r9
    f51a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f51e:	fa27 f908 	lsr.w	r9, r7, r8
    f522:	ea45 0509 	orr.w	r5, r5, r9
    f526:	4087      	lsls	r7, r0
    f528:	ea23 0707 	bic.w	r7, r3, r7
    f52c:	ea2e 0505 	bic.w	r5, lr, r5
    f530:	433d      	orrs	r5, r7
    f532:	d15d      	bne.n	f5f0 <pow+0x3e0>
    f534:	9d01      	ldr	r5, [sp, #4]
    f536:	40c3      	lsrs	r3, r0
    f538:	fa0e f808 	lsl.w	r8, lr, r8
    f53c:	ea43 0308 	orr.w	r3, r3, r8
    f540:	fa2e fe05 	lsr.w	lr, lr, r5
    f544:	ea43 030e 	orr.w	r3, r3, lr
    f548:	f003 0301 	and.w	r3, r3, #1
    f54c:	0498      	lsls	r0, r3, #18
    f54e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f552:	f3cc 050a 	ubfx	r5, ip, #0, #11
    f556:	e75e      	b.n	f416 <pow+0x206>
    f558:	2500      	movs	r5, #0
    f55a:	e6ee      	b.n	f33a <pow+0x12a>
    f55c:	4288      	cmp	r0, r1
    f55e:	4193      	sbcs	r3, r2
    f560:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f564:	bf34      	ite	cc
    f566:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    f56a:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    f56e:	e72a      	b.n	f3c6 <pow+0x1b6>
    f570:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    f574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f578:	ee35 5b46 	vsub.f64	d5, d5, d6
    f57c:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    f580:	ee35 5b07 	vadd.f64	d5, d5, d7
    f584:	bf58      	it	pl
    f586:	eeb0 4b43 	vmovpl.f64	d4, d3
    f58a:	ee36 3b04 	vadd.f64	d3, d6, d4
    f58e:	ee34 7b43 	vsub.f64	d7, d4, d3
    f592:	ee37 7b06 	vadd.f64	d7, d7, d6
    f596:	ee37 7b05 	vadd.f64	d7, d7, d5
    f59a:	ee37 7b03 	vadd.f64	d7, d7, d3
    f59e:	ee37 6b44 	vsub.f64	d6, d7, d4
    f5a2:	eeb5 6b40 	vcmp.f64	d6, #0.0
    f5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5aa:	d104      	bne.n	f5b6 <pow+0x3a6>
    f5ac:	462a      	mov	r2, r5
    f5ae:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f5b2:	ec43 2b16 	vmov	d6, r2, r3
    f5b6:	ed9f 5b06 	vldr	d5, [pc, #24]	; f5d0 <pow+0x3c0>
    f5ba:	ed8d 5b04 	vstr	d5, [sp, #16]
    f5be:	ed9d 7b04 	vldr	d7, [sp, #16]
    f5c2:	ee27 7b05 	vmul.f64	d7, d7, d5
    f5c6:	ed8d 7b06 	vstr	d7, [sp, #24]
    f5ca:	e76f      	b.n	f4ac <pow+0x29c>
    f5cc:	f3af 8000 	nop.w
    f5d0:	00000000 	.word	0x00000000
    f5d4:	00100000 	.word	0x00100000
    f5d8:	00000000 	.word	0x00000000
    f5dc:	43300000 	.word	0x43300000
    f5e0:	c0196aab 	.word	0xc0196aab
    f5e4:	20000c20 	.word	0x20000c20
    f5e8:	200002c0 	.word	0x200002c0
    f5ec:	3ff00000 	.word	0x3ff00000
    f5f0:	ec4b ab10 	vmov	d0, sl, fp
    f5f4:	b009      	add	sp, #36	; 0x24
    f5f6:	ecbd 8b0a 	vpop	{d8-d12}
    f5fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5fe:	f000 b987 	b.w	f910 <__math_invalid>
    f602:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f606:	ee38 0b00 	vadd.f64	d0, d8, d0
    f60a:	2800      	cmp	r0, #0
    f60c:	f43f aedb 	beq.w	f3c6 <pow+0x1b6>
    f610:	eeb1 0b40 	vneg.f64	d0, d0
    f614:	e6d7      	b.n	f3c6 <pow+0x1b6>
    f616:	1849      	adds	r1, r1, r1
    f618:	4b59      	ldr	r3, [pc, #356]	; (f780 <pow+0x570>)
    f61a:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    f61e:	f04f 0000 	mov.w	r0, #0
    f622:	4152      	adcs	r2, r2
    f624:	4288      	cmp	r0, r1
    f626:	4193      	sbcs	r3, r2
    f628:	d35d      	bcc.n	f6e6 <pow+0x4d6>
    f62a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f62e:	e6ca      	b.n	f3c6 <pow+0x1b6>
    f630:	ea50 0409 	orrs.w	r4, r0, r9
    f634:	d0ef      	beq.n	f616 <pow+0x406>
    f636:	4c53      	ldr	r4, [pc, #332]	; (f784 <pow+0x574>)
    f638:	2500      	movs	r5, #0
    f63a:	42a2      	cmp	r2, r4
    f63c:	bf08      	it	eq
    f63e:	42a9      	cmpeq	r1, r5
    f640:	d047      	beq.n	f6d2 <pow+0x4c2>
    f642:	1849      	adds	r1, r1, r1
    f644:	4b50      	ldr	r3, [pc, #320]	; (f788 <pow+0x578>)
    f646:	4152      	adcs	r2, r2
    f648:	428d      	cmp	r5, r1
    f64a:	eb73 0402 	sbcs.w	r4, r3, r2
    f64e:	d34a      	bcc.n	f6e6 <pow+0x4d6>
    f650:	4599      	cmp	r9, r3
    f652:	bf08      	it	eq
    f654:	42a8      	cmpeq	r0, r5
    f656:	d146      	bne.n	f6e6 <pow+0x4d6>
    f658:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    f65c:	429a      	cmp	r2, r3
    f65e:	bf08      	it	eq
    f660:	42a9      	cmpeq	r1, r5
    f662:	d0e2      	beq.n	f62a <pow+0x41a>
    f664:	429a      	cmp	r2, r3
    f666:	ea6f 0e0e 	mvn.w	lr, lr
    f66a:	bf34      	ite	cc
    f66c:	2200      	movcc	r2, #0
    f66e:	2201      	movcs	r2, #1
    f670:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    f674:	4572      	cmp	r2, lr
    f676:	d077      	beq.n	f768 <pow+0x558>
    f678:	ed9f 0b3d 	vldr	d0, [pc, #244]	; f770 <pow+0x560>
    f67c:	e6a3      	b.n	f3c6 <pow+0x1b6>
    f67e:	ec4b ab17 	vmov	d7, sl, fp
    f682:	2a00      	cmp	r2, #0
    f684:	ee27 0b07 	vmul.f64	d0, d7, d7
    f688:	db34      	blt.n	f6f4 <pow+0x4e4>
    f68a:	2200      	movs	r2, #0
    f68c:	ea50 0909 	orrs.w	r9, r0, r9
    f690:	d15d      	bne.n	f74e <pow+0x53e>
    f692:	f1be 0f00 	cmp.w	lr, #0
    f696:	f6bf ae96 	bge.w	f3c6 <pow+0x1b6>
    f69a:	4610      	mov	r0, r2
    f69c:	b009      	add	sp, #36	; 0x24
    f69e:	ecbd 8b0a 	vpop	{d8-d12}
    f6a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6a6:	f000 b91b 	b.w	f8e0 <__math_divzero>
    f6aa:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    f6ae:	ed9f 6b32 	vldr	d6, [pc, #200]	; f778 <pow+0x568>
    f6b2:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    f6b6:	4610      	mov	r0, r2
    f6b8:	ec41 0b10 	vmov	d0, r0, r1
    f6bc:	eea7 0b00 	vfma.f64	d0, d7, d0
    f6c0:	ee20 0b06 	vmul.f64	d0, d0, d6
    f6c4:	b009      	add	sp, #36	; 0x24
    f6c6:	ecbd 8b0a 	vpop	{d8-d12}
    f6ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f6ce:	f000 b93b 	b.w	f948 <__math_check_oflow>
    f6d2:	18db      	adds	r3, r3, r3
    f6d4:	4a2a      	ldr	r2, [pc, #168]	; (f780 <pow+0x570>)
    f6d6:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    f6da:	eb4e 0e0e 	adc.w	lr, lr, lr
    f6de:	429d      	cmp	r5, r3
    f6e0:	eb72 020e 	sbcs.w	r2, r2, lr
    f6e4:	d2a1      	bcs.n	f62a <pow+0x41a>
    f6e6:	ec4b ab17 	vmov	d7, sl, fp
    f6ea:	ee37 0b01 	vadd.f64	d0, d7, d1
    f6ee:	e66a      	b.n	f3c6 <pow+0x1b6>
    f6f0:	2000      	movs	r0, #0
    f6f2:	e72c      	b.n	f54e <pow+0x33e>
    f6f4:	f3c4 020a 	ubfx	r2, r4, #0, #11
    f6f8:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    f6fc:	2934      	cmp	r1, #52	; 0x34
    f6fe:	d8c4      	bhi.n	f68a <pow+0x47a>
    f700:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    f704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f708:	f1a2 051d 	sub.w	r5, r2, #29
    f70c:	3203      	adds	r2, #3
    f70e:	fa01 f705 	lsl.w	r7, r1, r5
    f712:	fa01 f402 	lsl.w	r4, r1, r2
    f716:	f1c2 0620 	rsb	r6, r2, #32
    f71a:	433c      	orrs	r4, r7
    f71c:	fa21 f706 	lsr.w	r7, r1, r6
    f720:	433c      	orrs	r4, r7
    f722:	4091      	lsls	r1, r2
    f724:	ea23 0101 	bic.w	r1, r3, r1
    f728:	ea2e 0404 	bic.w	r4, lr, r4
    f72c:	4321      	orrs	r1, r4
    f72e:	d1ac      	bne.n	f68a <pow+0x47a>
    f730:	fa23 f202 	lsr.w	r2, r3, r2
    f734:	fa0e f606 	lsl.w	r6, lr, r6
    f738:	4332      	orrs	r2, r6
    f73a:	fa2e f505 	lsr.w	r5, lr, r5
    f73e:	432a      	orrs	r2, r5
    f740:	f012 0201 	ands.w	r2, r2, #1
    f744:	d0a2      	beq.n	f68c <pow+0x47c>
    f746:	eeb1 0b40 	vneg.f64	d0, d0
    f74a:	2201      	movs	r2, #1
    f74c:	e79e      	b.n	f68c <pow+0x47c>
    f74e:	f1be 0f00 	cmp.w	lr, #0
    f752:	f6bf ae38 	bge.w	f3c6 <pow+0x1b6>
    f756:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f75a:	ee86 7b00 	vdiv.f64	d7, d6, d0
    f75e:	ed8d 7b02 	vstr	d7, [sp, #8]
    f762:	ed9d 0b02 	vldr	d0, [sp, #8]
    f766:	e62e      	b.n	f3c6 <pow+0x1b6>
    f768:	ee21 0b01 	vmul.f64	d0, d1, d1
    f76c:	e62b      	b.n	f3c6 <pow+0x1b6>
    f76e:	bf00      	nop
	...
    f77c:	7f000000 	.word	0x7f000000
    f780:	fff00000 	.word	0xfff00000
    f784:	3ff00000 	.word	0x3ff00000
    f788:	ffe00000 	.word	0xffe00000

0000f78c <asinf>:
    f78c:	b508      	push	{r3, lr}
    f78e:	ed2d 8b02 	vpush	{d8}
    f792:	eeb0 8a40 	vmov.f32	s16, s0
    f796:	f000 f9e3 	bl	fb60 <__ieee754_asinf>
    f79a:	eeb4 8a48 	vcmp.f32	s16, s16
    f79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7a2:	eef0 8a40 	vmov.f32	s17, s0
    f7a6:	d60a      	bvs.n	f7be <asinf+0x32>
    f7a8:	eeb0 0a48 	vmov.f32	s0, s16
    f7ac:	f000 f81c 	bl	f7e8 <fabsf>
    f7b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f7b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    f7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f7bc:	dc04      	bgt.n	f7c8 <asinf+0x3c>
    f7be:	eeb0 0a68 	vmov.f32	s0, s17
    f7c2:	ecbd 8b02 	vpop	{d8}
    f7c6:	bd08      	pop	{r3, pc}
    f7c8:	f001 fade 	bl	10d88 <__errno>
    f7cc:	ecbd 8b02 	vpop	{d8}
    f7d0:	4603      	mov	r3, r0
    f7d2:	2221      	movs	r2, #33	; 0x21
    f7d4:	601a      	str	r2, [r3, #0]
    f7d6:	4802      	ldr	r0, [pc, #8]	; (f7e0 <asinf+0x54>)
    f7d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f7dc:	f000 b8c8 	b.w	f970 <nanf>
    f7e0:	20002000 	.word	0x20002000

0000f7e4 <atan2f>:
    f7e4:	f000 bac2 	b.w	fd6c <__ieee754_atan2f>

0000f7e8 <fabsf>:
    f7e8:	ee10 3a10 	vmov	r3, s0
    f7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f7f0:	ee00 3a10 	vmov	s0, r3
    f7f4:	4770      	bx	lr
    f7f6:	bf00      	nop

0000f7f8 <__ieee754_sqrtf>:
    f7f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
    f7fc:	4770      	bx	lr
    f7fe:	bf00      	nop

0000f800 <sin>:
    f800:	eeb0 7b40 	vmov.f64	d7, d0
    f804:	ee17 3a90 	vmov	r3, s15
    f808:	4a1b      	ldr	r2, [pc, #108]	; (f878 <sin+0x78>)
    f80a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f80e:	4293      	cmp	r3, r2
    f810:	dd1c      	ble.n	f84c <sin+0x4c>
    f812:	4a1a      	ldr	r2, [pc, #104]	; (f87c <sin+0x7c>)
    f814:	4293      	cmp	r3, r2
    f816:	dd02      	ble.n	f81e <sin+0x1e>
    f818:	ee30 0b40 	vsub.f64	d0, d0, d0
    f81c:	4770      	bx	lr
    f81e:	b500      	push	{lr}
    f820:	b085      	sub	sp, #20
    f822:	4668      	mov	r0, sp
    f824:	f000 fc20 	bl	10068 <__ieee754_rem_pio2>
    f828:	f000 0003 	and.w	r0, r0, #3
    f82c:	2801      	cmp	r0, #1
    f82e:	ed9d 1b02 	vldr	d1, [sp, #8]
    f832:	ed9d 0b00 	vldr	d0, [sp]
    f836:	d00e      	beq.n	f856 <sin+0x56>
    f838:	2802      	cmp	r0, #2
    f83a:	d013      	beq.n	f864 <sin+0x64>
    f83c:	b170      	cbz	r0, f85c <sin+0x5c>
    f83e:	f000 f89f 	bl	f980 <__kernel_cos>
    f842:	eeb1 0b40 	vneg.f64	d0, d0
    f846:	b005      	add	sp, #20
    f848:	f85d fb04 	ldr.w	pc, [sp], #4
    f84c:	ed9f 1b08 	vldr	d1, [pc, #32]	; f870 <sin+0x70>
    f850:	2000      	movs	r0, #0
    f852:	f000 b92d 	b.w	fab0 <__kernel_sin>
    f856:	f000 f893 	bl	f980 <__kernel_cos>
    f85a:	e7f4      	b.n	f846 <sin+0x46>
    f85c:	2001      	movs	r0, #1
    f85e:	f000 f927 	bl	fab0 <__kernel_sin>
    f862:	e7f0      	b.n	f846 <sin+0x46>
    f864:	2001      	movs	r0, #1
    f866:	f000 f923 	bl	fab0 <__kernel_sin>
    f86a:	eeb1 0b40 	vneg.f64	d0, d0
    f86e:	e7ea      	b.n	f846 <sin+0x46>
	...
    f878:	3fe921fb 	.word	0x3fe921fb
    f87c:	7fefffff 	.word	0x7fefffff

0000f880 <with_errno>:
    f880:	b510      	push	{r4, lr}
    f882:	b082      	sub	sp, #8
    f884:	ed8d 0b00 	vstr	d0, [sp]
    f888:	4604      	mov	r4, r0
    f88a:	f001 fa7d 	bl	10d88 <__errno>
    f88e:	ed9d 0b00 	vldr	d0, [sp]
    f892:	6004      	str	r4, [r0, #0]
    f894:	b002      	add	sp, #8
    f896:	bd10      	pop	{r4, pc}

0000f898 <xflow>:
    f898:	b082      	sub	sp, #8
    f89a:	b158      	cbz	r0, f8b4 <xflow+0x1c>
    f89c:	eeb1 7b40 	vneg.f64	d7, d0
    f8a0:	ed8d 7b00 	vstr	d7, [sp]
    f8a4:	ed9d 7b00 	vldr	d7, [sp]
    f8a8:	2022      	movs	r0, #34	; 0x22
    f8aa:	ee20 0b07 	vmul.f64	d0, d0, d7
    f8ae:	b002      	add	sp, #8
    f8b0:	f7ff bfe6 	b.w	f880 <with_errno>
    f8b4:	eeb0 7b40 	vmov.f64	d7, d0
    f8b8:	e7f2      	b.n	f8a0 <xflow+0x8>
    f8ba:	bf00      	nop
    f8bc:	0000      	movs	r0, r0
	...

0000f8c0 <__math_uflow>:
    f8c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; f8c8 <__math_uflow+0x8>
    f8c4:	f7ff bfe8 	b.w	f898 <xflow>
    f8c8:	00000000 	.word	0x00000000
    f8cc:	10000000 	.word	0x10000000

0000f8d0 <__math_oflow>:
    f8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; f8d8 <__math_oflow+0x8>
    f8d4:	f7ff bfe0 	b.w	f898 <xflow>
    f8d8:	00000000 	.word	0x00000000
    f8dc:	70000000 	.word	0x70000000

0000f8e0 <__math_divzero>:
    f8e0:	b082      	sub	sp, #8
    f8e2:	2800      	cmp	r0, #0
    f8e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f8e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    f8ec:	fe06 7b07 	vseleq.f64	d7, d6, d7
    f8f0:	ed8d 7b00 	vstr	d7, [sp]
    f8f4:	ed9d 0b00 	vldr	d0, [sp]
    f8f8:	ed9f 7b03 	vldr	d7, [pc, #12]	; f908 <__math_divzero+0x28>
    f8fc:	2022      	movs	r0, #34	; 0x22
    f8fe:	ee80 0b07 	vdiv.f64	d0, d0, d7
    f902:	b002      	add	sp, #8
    f904:	f7ff bfbc 	b.w	f880 <with_errno>
	...

0000f910 <__math_invalid>:
    f910:	eeb4 0b40 	vcmp.f64	d0, d0
    f914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f918:	ee30 7b40 	vsub.f64	d7, d0, d0
    f91c:	ee87 6b07 	vdiv.f64	d6, d7, d7
    f920:	eeb0 0b46 	vmov.f64	d0, d6
    f924:	d602      	bvs.n	f92c <__math_invalid+0x1c>
    f926:	2021      	movs	r0, #33	; 0x21
    f928:	f7ff bfaa 	b.w	f880 <with_errno>
    f92c:	4770      	bx	lr
    f92e:	bf00      	nop

0000f930 <__math_check_uflow>:
    f930:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f938:	d000      	beq.n	f93c <__math_check_uflow+0xc>
    f93a:	4770      	bx	lr
    f93c:	2022      	movs	r0, #34	; 0x22
    f93e:	f7ff bf9f 	b.w	f880 <with_errno>
    f942:	bf00      	nop
    f944:	0000      	movs	r0, r0
	...

0000f948 <__math_check_oflow>:
    f948:	ed9f 6b07 	vldr	d6, [pc, #28]	; f968 <__math_check_oflow+0x20>
    f94c:	eeb0 7bc0 	vabs.f64	d7, d0
    f950:	eeb4 7b46 	vcmp.f64	d7, d6
    f954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f958:	dc00      	bgt.n	f95c <__math_check_oflow+0x14>
    f95a:	4770      	bx	lr
    f95c:	2022      	movs	r0, #34	; 0x22
    f95e:	f7ff bf8f 	b.w	f880 <with_errno>
    f962:	bf00      	nop
    f964:	f3af 8000 	nop.w
    f968:	ffffffff 	.word	0xffffffff
    f96c:	7fefffff 	.word	0x7fefffff

0000f970 <nanf>:
    f970:	ed9f 0a01 	vldr	s0, [pc, #4]	; f978 <nanf+0x8>
    f974:	4770      	bx	lr
    f976:	bf00      	nop
    f978:	7fc00000 	.word	0x7fc00000
    f97c:	00000000 	.word	0x00000000

0000f980 <__kernel_cos>:
    f980:	ee10 3a90 	vmov	r3, s1
    f984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f988:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    f98c:	ed2d 8b02 	vpush	{d8}
    f990:	da2e      	bge.n	f9f0 <__kernel_cos+0x70>
    f992:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f996:	ee17 3a90 	vmov	r3, s15
    f99a:	2b00      	cmp	r3, #0
    f99c:	d065      	beq.n	fa6a <__kernel_cos+0xea>
    f99e:	ee20 4b00 	vmul.f64	d4, d0, d0
    f9a2:	ed9f 8b35 	vldr	d8, [pc, #212]	; fa78 <__kernel_cos+0xf8>
    f9a6:	ed9f 2b36 	vldr	d2, [pc, #216]	; fa80 <__kernel_cos+0x100>
    f9aa:	ed9f 3b37 	vldr	d3, [pc, #220]	; fa88 <__kernel_cos+0x108>
    f9ae:	eea4 2b08 	vfma.f64	d2, d4, d8
    f9b2:	ed9f 5b37 	vldr	d5, [pc, #220]	; fa90 <__kernel_cos+0x110>
    f9b6:	eea4 3b02 	vfma.f64	d3, d4, d2
    f9ba:	ed9f 6b37 	vldr	d6, [pc, #220]	; fa98 <__kernel_cos+0x118>
    f9be:	eea4 5b03 	vfma.f64	d5, d4, d3
    f9c2:	ed9f 7b37 	vldr	d7, [pc, #220]	; faa0 <__kernel_cos+0x120>
    f9c6:	eea4 6b05 	vfma.f64	d6, d4, d5
    f9ca:	eea4 7b06 	vfma.f64	d7, d4, d6
    f9ce:	ee24 7b07 	vmul.f64	d7, d4, d7
    f9d2:	ee21 1b40 	vnmul.f64	d1, d1, d0
    f9d6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f9da:	eea4 1b07 	vfma.f64	d1, d4, d7
    f9de:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f9e2:	ee94 1b06 	vfnms.f64	d1, d4, d6
    f9e6:	ecbd 8b02 	vpop	{d8}
    f9ea:	ee30 0b41 	vsub.f64	d0, d0, d1
    f9ee:	4770      	bx	lr
    f9f0:	ed9f 8b21 	vldr	d8, [pc, #132]	; fa78 <__kernel_cos+0xf8>
    f9f4:	ee20 4b00 	vmul.f64	d4, d0, d0
    f9f8:	ed9f 2b21 	vldr	d2, [pc, #132]	; fa80 <__kernel_cos+0x100>
    f9fc:	ed9f 3b22 	vldr	d3, [pc, #136]	; fa88 <__kernel_cos+0x108>
    fa00:	eea4 2b08 	vfma.f64	d2, d4, d8
    fa04:	ed9f 5b22 	vldr	d5, [pc, #136]	; fa90 <__kernel_cos+0x110>
    fa08:	eea2 3b04 	vfma.f64	d3, d2, d4
    fa0c:	ed9f 6b22 	vldr	d6, [pc, #136]	; fa98 <__kernel_cos+0x118>
    fa10:	eea3 5b04 	vfma.f64	d5, d3, d4
    fa14:	ed9f 7b22 	vldr	d7, [pc, #136]	; faa0 <__kernel_cos+0x120>
    fa18:	eea5 6b04 	vfma.f64	d6, d5, d4
    fa1c:	4a22      	ldr	r2, [pc, #136]	; (faa8 <__kernel_cos+0x128>)
    fa1e:	eea6 7b04 	vfma.f64	d7, d6, d4
    fa22:	4293      	cmp	r3, r2
    fa24:	ee27 7b04 	vmul.f64	d7, d7, d4
    fa28:	ddd3      	ble.n	f9d2 <__kernel_cos+0x52>
    fa2a:	4a20      	ldr	r2, [pc, #128]	; (faac <__kernel_cos+0x12c>)
    fa2c:	4293      	cmp	r3, r2
    fa2e:	dc17      	bgt.n	fa60 <__kernel_cos+0xe0>
    fa30:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fa34:	2000      	movs	r0, #0
    fa36:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
    fa3a:	ec41 0b15 	vmov	d5, r0, r1
    fa3e:	ee36 6b45 	vsub.f64	d6, d6, d5
    fa42:	ee21 1b40 	vnmul.f64	d1, d1, d0
    fa46:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fa4a:	eea4 1b07 	vfma.f64	d1, d4, d7
    fa4e:	ee94 5b03 	vfnms.f64	d5, d4, d3
    fa52:	ecbd 8b02 	vpop	{d8}
    fa56:	ee35 0b41 	vsub.f64	d0, d5, d1
    fa5a:	ee36 0b40 	vsub.f64	d0, d6, d0
    fa5e:	4770      	bx	lr
    fa60:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
    fa64:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    fa68:	e7eb      	b.n	fa42 <__kernel_cos+0xc2>
    fa6a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fa6e:	ecbd 8b02 	vpop	{d8}
    fa72:	4770      	bx	lr
    fa74:	f3af 8000 	nop.w
    fa78:	be8838d4 	.word	0xbe8838d4
    fa7c:	bda8fae9 	.word	0xbda8fae9
    fa80:	bdb4b1c4 	.word	0xbdb4b1c4
    fa84:	3e21ee9e 	.word	0x3e21ee9e
    fa88:	809c52ad 	.word	0x809c52ad
    fa8c:	be927e4f 	.word	0xbe927e4f
    fa90:	19cb1590 	.word	0x19cb1590
    fa94:	3efa01a0 	.word	0x3efa01a0
    fa98:	16c15177 	.word	0x16c15177
    fa9c:	bf56c16c 	.word	0xbf56c16c
    faa0:	5555554c 	.word	0x5555554c
    faa4:	3fa55555 	.word	0x3fa55555
    faa8:	3fd33332 	.word	0x3fd33332
    faac:	3fe90000 	.word	0x3fe90000

0000fab0 <__kernel_sin>:
    fab0:	ee10 3a90 	vmov	r3, s1
    fab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fab8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    fabc:	da04      	bge.n	fac8 <__kernel_sin+0x18>
    fabe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    fac2:	ee17 3a90 	vmov	r3, s15
    fac6:	b35b      	cbz	r3, fb20 <__kernel_sin+0x70>
    fac8:	ee20 7b00 	vmul.f64	d7, d0, d0
    facc:	ed9f 2b16 	vldr	d2, [pc, #88]	; fb28 <__kernel_sin+0x78>
    fad0:	ed9f 3b17 	vldr	d3, [pc, #92]	; fb30 <__kernel_sin+0x80>
    fad4:	ed9f 4b18 	vldr	d4, [pc, #96]	; fb38 <__kernel_sin+0x88>
    fad8:	eea7 3b02 	vfma.f64	d3, d7, d2
    fadc:	ed9f 5b18 	vldr	d5, [pc, #96]	; fb40 <__kernel_sin+0x90>
    fae0:	eea3 4b07 	vfma.f64	d4, d3, d7
    fae4:	ed9f 6b18 	vldr	d6, [pc, #96]	; fb48 <__kernel_sin+0x98>
    fae8:	eea4 5b07 	vfma.f64	d5, d4, d7
    faec:	eea5 6b07 	vfma.f64	d6, d5, d7
    faf0:	ee20 5b07 	vmul.f64	d5, d0, d7
    faf4:	b930      	cbnz	r0, fb04 <__kernel_sin+0x54>
    faf6:	ed9f 4b16 	vldr	d4, [pc, #88]	; fb50 <__kernel_sin+0xa0>
    fafa:	eea7 4b06 	vfma.f64	d4, d7, d6
    fafe:	eea4 0b05 	vfma.f64	d0, d4, d5
    fb02:	4770      	bx	lr
    fb04:	ed9f 4b14 	vldr	d4, [pc, #80]	; fb58 <__kernel_sin+0xa8>
    fb08:	ee26 6b45 	vnmul.f64	d6, d6, d5
    fb0c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fb10:	eea1 6b03 	vfma.f64	d6, d1, d3
    fb14:	ee96 1b07 	vfnms.f64	d1, d6, d7
    fb18:	eea5 1b04 	vfma.f64	d1, d5, d4
    fb1c:	ee30 0b41 	vsub.f64	d0, d0, d1
    fb20:	4770      	bx	lr
    fb22:	bf00      	nop
    fb24:	f3af 8000 	nop.w
    fb28:	5acfd57c 	.word	0x5acfd57c
    fb2c:	3de5d93a 	.word	0x3de5d93a
    fb30:	8a2b9ceb 	.word	0x8a2b9ceb
    fb34:	be5ae5e6 	.word	0xbe5ae5e6
    fb38:	57b1fe7d 	.word	0x57b1fe7d
    fb3c:	3ec71de3 	.word	0x3ec71de3
    fb40:	19c161d5 	.word	0x19c161d5
    fb44:	bf2a01a0 	.word	0xbf2a01a0
    fb48:	1110f8a6 	.word	0x1110f8a6
    fb4c:	3f811111 	.word	0x3f811111
    fb50:	55555549 	.word	0x55555549
    fb54:	bfc55555 	.word	0xbfc55555
    fb58:	55555549 	.word	0x55555549
    fb5c:	3fc55555 	.word	0x3fc55555

0000fb60 <__ieee754_asinf>:
    fb60:	b538      	push	{r3, r4, r5, lr}
    fb62:	ee10 5a10 	vmov	r5, s0
    fb66:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    fb6a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
    fb6e:	ed2d 8b04 	vpush	{d8-d9}
    fb72:	f000 8085 	beq.w	fc80 <__ieee754_asinf+0x120>
    fb76:	dc7a      	bgt.n	fc6e <__ieee754_asinf+0x10e>
    fb78:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    fb7c:	da0f      	bge.n	fb9e <__ieee754_asinf+0x3e>
    fb7e:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
    fb82:	f280 809c 	bge.w	fcbe <__ieee754_asinf+0x15e>
    fb86:	eddf 7a69 	vldr	s15, [pc, #420]	; fd2c <__ieee754_asinf+0x1cc>
    fb8a:	ee70 7a27 	vadd.f32	s15, s0, s15
    fb8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    fb92:	eef4 7ac7 	vcmpe.f32	s15, s14
    fb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fb9a:	f300 808d 	bgt.w	fcb8 <__ieee754_asinf+0x158>
    fb9e:	f7ff fe23 	bl	f7e8 <fabsf>
    fba2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fba6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fbaa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    fbae:	ee20 8a07 	vmul.f32	s16, s0, s14
    fbb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; fd30 <__ieee754_asinf+0x1d0>
    fbb6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; fd34 <__ieee754_asinf+0x1d4>
    fbba:	ed9f 6a5f 	vldr	s12, [pc, #380]	; fd38 <__ieee754_asinf+0x1d8>
    fbbe:	ed9f 5a5f 	vldr	s10, [pc, #380]	; fd3c <__ieee754_asinf+0x1dc>
    fbc2:	eddf 5a5f 	vldr	s11, [pc, #380]	; fd40 <__ieee754_asinf+0x1e0>
    fbc6:	eddf 8a5f 	vldr	s17, [pc, #380]	; fd44 <__ieee754_asinf+0x1e4>
    fbca:	eee8 6a07 	vfma.f32	s13, s16, s14
    fbce:	ed9f 7a5e 	vldr	s14, [pc, #376]	; fd48 <__ieee754_asinf+0x1e8>
    fbd2:	eea8 7a06 	vfma.f32	s14, s16, s12
    fbd6:	ed9f 6a5d 	vldr	s12, [pc, #372]	; fd4c <__ieee754_asinf+0x1ec>
    fbda:	eea6 5a88 	vfma.f32	s10, s13, s16
    fbde:	eea7 6a08 	vfma.f32	s12, s14, s16
    fbe2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; fd50 <__ieee754_asinf+0x1f0>
    fbe6:	eddf 6a5b 	vldr	s13, [pc, #364]	; fd54 <__ieee754_asinf+0x1f4>
    fbea:	eee5 5a08 	vfma.f32	s11, s10, s16
    fbee:	eea6 7a08 	vfma.f32	s14, s12, s16
    fbf2:	eee5 6a88 	vfma.f32	s13, s11, s16
    fbf6:	eee7 7a08 	vfma.f32	s15, s14, s16
    fbfa:	eee6 8a88 	vfma.f32	s17, s13, s16
    fbfe:	eeb0 0a48 	vmov.f32	s0, s16
    fc02:	eeb0 9a67 	vmov.f32	s18, s15
    fc06:	f7ff fdf7 	bl	f7f8 <__ieee754_sqrtf>
    fc0a:	4b53      	ldr	r3, [pc, #332]	; (fd58 <__ieee754_asinf+0x1f8>)
    fc0c:	429c      	cmp	r4, r3
    fc0e:	ee68 8a88 	vmul.f32	s17, s17, s16
    fc12:	dc42      	bgt.n	fc9a <__ieee754_asinf+0x13a>
    fc14:	ee10 3a10 	vmov	r3, s0
    fc18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    fc1c:	f023 030f 	bic.w	r3, r3, #15
    fc20:	ee06 3a90 	vmov	s13, r3
    fc24:	eea6 8ae6 	vfms.f32	s16, s13, s13
    fc28:	ee30 7a26 	vadd.f32	s14, s0, s13
    fc2c:	ee88 5a89 	vdiv.f32	s10, s17, s18
    fc30:	eec8 4a07 	vdiv.f32	s9, s16, s14
    fc34:	eddf 7a49 	vldr	s15, [pc, #292]	; fd5c <__ieee754_asinf+0x1fc>
    fc38:	ed9f 7a49 	vldr	s14, [pc, #292]	; fd60 <__ieee754_asinf+0x200>
    fc3c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    fc40:	eee4 7ac6 	vfms.f32	s15, s9, s12
    fc44:	ee30 0a00 	vadd.f32	s0, s0, s0
    fc48:	eef0 5a47 	vmov.f32	s11, s14
    fc4c:	eee6 5ac6 	vfms.f32	s11, s13, s12
    fc50:	eed0 7a05 	vfnms.f32	s15, s0, s10
    fc54:	ee77 7ae5 	vsub.f32	s15, s15, s11
    fc58:	ee37 7a67 	vsub.f32	s14, s14, s15
    fc5c:	2d00      	cmp	r5, #0
    fc5e:	dc0a      	bgt.n	fc76 <__ieee754_asinf+0x116>
    fc60:	ecbd 8b04 	vpop	{d8-d9}
    fc64:	eeb1 7a47 	vneg.f32	s14, s14
    fc68:	eeb0 0a47 	vmov.f32	s0, s14
    fc6c:	bd38      	pop	{r3, r4, r5, pc}
    fc6e:	ee70 7a40 	vsub.f32	s15, s0, s0
    fc72:	ee87 7aa7 	vdiv.f32	s14, s15, s15
    fc76:	ecbd 8b04 	vpop	{d8-d9}
    fc7a:	eeb0 0a47 	vmov.f32	s0, s14
    fc7e:	bd38      	pop	{r3, r4, r5, pc}
    fc80:	ed9f 7a36 	vldr	s14, [pc, #216]	; fd5c <__ieee754_asinf+0x1fc>
    fc84:	eddf 7a37 	vldr	s15, [pc, #220]	; fd64 <__ieee754_asinf+0x204>
    fc88:	ee20 7a07 	vmul.f32	s14, s0, s14
    fc8c:	ecbd 8b04 	vpop	{d8-d9}
    fc90:	eea0 7a27 	vfma.f32	s14, s0, s15
    fc94:	eeb0 0a47 	vmov.f32	s0, s14
    fc98:	bd38      	pop	{r3, r4, r5, pc}
    fc9a:	ee88 6a89 	vdiv.f32	s12, s17, s18
    fc9e:	eddf 7a32 	vldr	s15, [pc, #200]	; fd68 <__ieee754_asinf+0x208>
    fca2:	ed9f 7a30 	vldr	s14, [pc, #192]	; fd64 <__ieee754_asinf+0x204>
    fca6:	eea0 0a06 	vfma.f32	s0, s0, s12
    fcaa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    fcae:	eee0 7a26 	vfma.f32	s15, s0, s13
    fcb2:	ee37 7a67 	vsub.f32	s14, s14, s15
    fcb6:	e7d1      	b.n	fc5c <__ieee754_asinf+0xfc>
    fcb8:	eeb0 7a40 	vmov.f32	s14, s0
    fcbc:	e7db      	b.n	fc76 <__ieee754_asinf+0x116>
    fcbe:	ee60 7a00 	vmul.f32	s15, s0, s0
    fcc2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; fd34 <__ieee754_asinf+0x1d4>
    fcc6:	eddf 6a1a 	vldr	s13, [pc, #104]	; fd30 <__ieee754_asinf+0x1d0>
    fcca:	ed9f 6a1c 	vldr	s12, [pc, #112]	; fd3c <__ieee754_asinf+0x1dc>
    fcce:	eddf 5a1a 	vldr	s11, [pc, #104]	; fd38 <__ieee754_asinf+0x1d8>
    fcd2:	ed9f 5a1b 	vldr	s10, [pc, #108]	; fd40 <__ieee754_asinf+0x1e0>
    fcd6:	eee7 6a87 	vfma.f32	s13, s15, s14
    fcda:	ecbd 8b04 	vpop	{d8-d9}
    fcde:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fce2:	ed9f 7a19 	vldr	s14, [pc, #100]	; fd48 <__ieee754_asinf+0x1e8>
    fce6:	eddf 6a19 	vldr	s13, [pc, #100]	; fd4c <__ieee754_asinf+0x1ec>
    fcea:	eea7 7aa5 	vfma.f32	s14, s15, s11
    fcee:	eea6 5a27 	vfma.f32	s10, s12, s15
    fcf2:	eee7 6a27 	vfma.f32	s13, s14, s15
    fcf6:	eddf 5a17 	vldr	s11, [pc, #92]	; fd54 <__ieee754_asinf+0x1f4>
    fcfa:	ed9f 6a15 	vldr	s12, [pc, #84]	; fd50 <__ieee754_asinf+0x1f0>
    fcfe:	ed9f 7a11 	vldr	s14, [pc, #68]	; fd44 <__ieee754_asinf+0x1e4>
    fd02:	eee5 5a27 	vfma.f32	s11, s10, s15
    fd06:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fd0a:	eea5 7aa7 	vfma.f32	s14, s11, s15
    fd0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    fd12:	eee6 6a27 	vfma.f32	s13, s12, s15
    fd16:	ee67 7a27 	vmul.f32	s15, s14, s15
    fd1a:	eeb0 7a40 	vmov.f32	s14, s0
    fd1e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
    fd22:	eea0 7a06 	vfma.f32	s14, s0, s12
    fd26:	eeb0 0a47 	vmov.f32	s0, s14
    fd2a:	bd38      	pop	{r3, r4, r5, pc}
    fd2c:	7149f2ca 	.word	0x7149f2ca
    fd30:	3a4f7f04 	.word	0x3a4f7f04
    fd34:	3811ef08 	.word	0x3811ef08
    fd38:	3d9dc62e 	.word	0x3d9dc62e
    fd3c:	bd241146 	.word	0xbd241146
    fd40:	3e4e0aa8 	.word	0x3e4e0aa8
    fd44:	3e2aaaab 	.word	0x3e2aaaab
    fd48:	bf303361 	.word	0xbf303361
    fd4c:	4001572d 	.word	0x4001572d
    fd50:	c019d139 	.word	0xc019d139
    fd54:	bea6b090 	.word	0xbea6b090
    fd58:	3f799999 	.word	0x3f799999
    fd5c:	b33bbd2e 	.word	0xb33bbd2e
    fd60:	3f490fdb 	.word	0x3f490fdb
    fd64:	3fc90fdb 	.word	0x3fc90fdb
    fd68:	333bbd2e 	.word	0x333bbd2e

0000fd6c <__ieee754_atan2f>:
    fd6c:	b510      	push	{r4, lr}
    fd6e:	b082      	sub	sp, #8
    fd70:	edcd 0a01 	vstr	s1, [sp, #4]
    fd74:	9b01      	ldr	r3, [sp, #4]
    fd76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    fd7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fd7e:	eef0 7a40 	vmov.f32	s15, s0
    fd82:	dc30      	bgt.n	fde6 <__ieee754_atan2f+0x7a>
    fd84:	ee10 0a10 	vmov	r0, s0
    fd88:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    fd8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fd90:	dc29      	bgt.n	fde6 <__ieee754_atan2f+0x7a>
    fd92:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
    fd96:	d040      	beq.n	fe1a <__ieee754_atan2f+0xae>
    fd98:	179c      	asrs	r4, r3, #30
    fd9a:	f004 0402 	and.w	r4, r4, #2
    fd9e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    fda2:	b331      	cbz	r1, fdf2 <__ieee754_atan2f+0x86>
    fda4:	b372      	cbz	r2, fe04 <__ieee754_atan2f+0x98>
    fda6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fdaa:	d03e      	beq.n	fe2a <__ieee754_atan2f+0xbe>
    fdac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fdb0:	d028      	beq.n	fe04 <__ieee754_atan2f+0x98>
    fdb2:	1a89      	subs	r1, r1, r2
    fdb4:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
    fdb8:	ea4f 52e1 	mov.w	r2, r1, asr #23
    fdbc:	da32      	bge.n	fe24 <__ieee754_atan2f+0xb8>
    fdbe:	2b00      	cmp	r3, #0
    fdc0:	da40      	bge.n	fe44 <__ieee754_atan2f+0xd8>
    fdc2:	323c      	adds	r2, #60	; 0x3c
    fdc4:	da3e      	bge.n	fe44 <__ieee754_atan2f+0xd8>
    fdc6:	ed9f 0a33 	vldr	s0, [pc, #204]	; fe94 <__ieee754_atan2f+0x128>
    fdca:	2c01      	cmp	r4, #1
    fdcc:	d04c      	beq.n	fe68 <__ieee754_atan2f+0xfc>
    fdce:	2c02      	cmp	r4, #2
    fdd0:	d041      	beq.n	fe56 <__ieee754_atan2f+0xea>
    fdd2:	b164      	cbz	r4, fdee <__ieee754_atan2f+0x82>
    fdd4:	ed9f 7a30 	vldr	s14, [pc, #192]	; fe98 <__ieee754_atan2f+0x12c>
    fdd8:	eddf 7a30 	vldr	s15, [pc, #192]	; fe9c <__ieee754_atan2f+0x130>
    fddc:	ee30 0a07 	vadd.f32	s0, s0, s14
    fde0:	ee30 0a67 	vsub.f32	s0, s0, s15
    fde4:	e003      	b.n	fdee <__ieee754_atan2f+0x82>
    fde6:	ed9d 7a01 	vldr	s14, [sp, #4]
    fdea:	ee37 0a27 	vadd.f32	s0, s14, s15
    fdee:	b002      	add	sp, #8
    fdf0:	bd10      	pop	{r4, pc}
    fdf2:	2c02      	cmp	r4, #2
    fdf4:	d00e      	beq.n	fe14 <__ieee754_atan2f+0xa8>
    fdf6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; fea0 <__ieee754_atan2f+0x134>
    fdfa:	2c03      	cmp	r4, #3
    fdfc:	fe07 0a00 	vseleq.f32	s0, s14, s0
    fe00:	b002      	add	sp, #8
    fe02:	bd10      	pop	{r4, pc}
    fe04:	ed9f 0a27 	vldr	s0, [pc, #156]	; fea4 <__ieee754_atan2f+0x138>
    fe08:	eddf 7a27 	vldr	s15, [pc, #156]	; fea8 <__ieee754_atan2f+0x13c>
    fe0c:	2800      	cmp	r0, #0
    fe0e:	fe20 0a27 	vselge.f32	s0, s0, s15
    fe12:	e7ec      	b.n	fdee <__ieee754_atan2f+0x82>
    fe14:	ed9f 0a21 	vldr	s0, [pc, #132]	; fe9c <__ieee754_atan2f+0x130>
    fe18:	e7e9      	b.n	fdee <__ieee754_atan2f+0x82>
    fe1a:	b002      	add	sp, #8
    fe1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe20:	f000 b84a 	b.w	feb8 <atanf>
    fe24:	ed9f 0a1f 	vldr	s0, [pc, #124]	; fea4 <__ieee754_atan2f+0x138>
    fe28:	e7cf      	b.n	fdca <__ieee754_atan2f+0x5e>
    fe2a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fe2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    fe32:	d020      	beq.n	fe76 <__ieee754_atan2f+0x10a>
    fe34:	2c02      	cmp	r4, #2
    fe36:	d826      	bhi.n	fe86 <__ieee754_atan2f+0x11a>
    fe38:	4b1c      	ldr	r3, [pc, #112]	; (feac <__ieee754_atan2f+0x140>)
    fe3a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fe3e:	ed93 0a00 	vldr	s0, [r3]
    fe42:	e7d4      	b.n	fdee <__ieee754_atan2f+0x82>
    fe44:	ed9d 7a01 	vldr	s14, [sp, #4]
    fe48:	ee87 0a87 	vdiv.f32	s0, s15, s14
    fe4c:	f7ff fccc 	bl	f7e8 <fabsf>
    fe50:	f000 f832 	bl	feb8 <atanf>
    fe54:	e7b9      	b.n	fdca <__ieee754_atan2f+0x5e>
    fe56:	ed9f 7a10 	vldr	s14, [pc, #64]	; fe98 <__ieee754_atan2f+0x12c>
    fe5a:	eddf 7a10 	vldr	s15, [pc, #64]	; fe9c <__ieee754_atan2f+0x130>
    fe5e:	ee30 0a07 	vadd.f32	s0, s0, s14
    fe62:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fe66:	e7c2      	b.n	fdee <__ieee754_atan2f+0x82>
    fe68:	ee10 3a10 	vmov	r3, s0
    fe6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    fe70:	ee00 3a10 	vmov	s0, r3
    fe74:	e7bb      	b.n	fdee <__ieee754_atan2f+0x82>
    fe76:	2c02      	cmp	r4, #2
    fe78:	d808      	bhi.n	fe8c <__ieee754_atan2f+0x120>
    fe7a:	4b0d      	ldr	r3, [pc, #52]	; (feb0 <__ieee754_atan2f+0x144>)
    fe7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    fe80:	ed93 0a00 	vldr	s0, [r3]
    fe84:	e7b3      	b.n	fdee <__ieee754_atan2f+0x82>
    fe86:	ed9f 0a03 	vldr	s0, [pc, #12]	; fe94 <__ieee754_atan2f+0x128>
    fe8a:	e7b0      	b.n	fdee <__ieee754_atan2f+0x82>
    fe8c:	ed9f 0a09 	vldr	s0, [pc, #36]	; feb4 <__ieee754_atan2f+0x148>
    fe90:	e7ad      	b.n	fdee <__ieee754_atan2f+0x82>
    fe92:	bf00      	nop
    fe94:	00000000 	.word	0x00000000
    fe98:	33bbbd2e 	.word	0x33bbbd2e
    fe9c:	40490fdb 	.word	0x40490fdb
    fea0:	c0490fdb 	.word	0xc0490fdb
    fea4:	3fc90fdb 	.word	0x3fc90fdb
    fea8:	bfc90fdb 	.word	0xbfc90fdb
    feac:	20001c74 	.word	0x20001c74
    feb0:	20001c68 	.word	0x20001c68
    feb4:	3f490fdb 	.word	0x3f490fdb

0000feb8 <atanf>:
    feb8:	b538      	push	{r3, r4, r5, lr}
    feba:	ee10 5a10 	vmov	r5, s0
    febe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    fec2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
    fec6:	eef0 7a40 	vmov.f32	s15, s0
    feca:	db0a      	blt.n	fee2 <atanf+0x2a>
    fecc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    fed0:	dc58      	bgt.n	ff84 <atanf+0xcc>
    fed2:	eddf 7a51 	vldr	s15, [pc, #324]	; 10018 <atanf+0x160>
    fed6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 1001c <atanf+0x164>
    feda:	2d00      	cmp	r5, #0
    fedc:	fe37 0a87 	vselgt.f32	s0, s15, s14
    fee0:	bd38      	pop	{r3, r4, r5, pc}
    fee2:	4b4f      	ldr	r3, [pc, #316]	; (10020 <atanf+0x168>)
    fee4:	429c      	cmp	r4, r3
    fee6:	dc5c      	bgt.n	ffa2 <atanf+0xea>
    fee8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
    feec:	db4d      	blt.n	ff8a <atanf+0xd2>
    feee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fef2:	ee27 6aa7 	vmul.f32	s12, s15, s15
    fef6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 10024 <atanf+0x16c>
    fefa:	eddf 5a4b 	vldr	s11, [pc, #300]	; 10028 <atanf+0x170>
    fefe:	eddf 4a4b 	vldr	s9, [pc, #300]	; 1002c <atanf+0x174>
    ff02:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 10030 <atanf+0x178>
    ff06:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 10034 <atanf+0x17c>
    ff0a:	ee26 7a06 	vmul.f32	s14, s12, s12
    ff0e:	1c5a      	adds	r2, r3, #1
    ff10:	eee7 5a26 	vfma.f32	s11, s14, s13
    ff14:	eddf 6a48 	vldr	s13, [pc, #288]	; 10038 <atanf+0x180>
    ff18:	eea5 5a87 	vfma.f32	s10, s11, s14
    ff1c:	eee7 6a24 	vfma.f32	s13, s14, s9
    ff20:	eddf 5a46 	vldr	s11, [pc, #280]	; 1003c <atanf+0x184>
    ff24:	eddf 4a46 	vldr	s9, [pc, #280]	; 10040 <atanf+0x188>
    ff28:	eee6 5a87 	vfma.f32	s11, s13, s14
    ff2c:	eea5 4a07 	vfma.f32	s8, s10, s14
    ff30:	ed9f 5a44 	vldr	s10, [pc, #272]	; 10044 <atanf+0x18c>
    ff34:	eddf 6a44 	vldr	s13, [pc, #272]	; 10048 <atanf+0x190>
    ff38:	eea5 5a87 	vfma.f32	s10, s11, s14
    ff3c:	eee4 4a07 	vfma.f32	s9, s8, s14
    ff40:	eddf 5a42 	vldr	s11, [pc, #264]	; 1004c <atanf+0x194>
    ff44:	eee4 6a87 	vfma.f32	s13, s9, s14
    ff48:	eee5 5a07 	vfma.f32	s11, s10, s14
    ff4c:	ee66 6a86 	vmul.f32	s13, s13, s12
    ff50:	ee65 5a87 	vmul.f32	s11, s11, s14
    ff54:	d03a      	beq.n	ffcc <atanf+0x114>
    ff56:	4a3e      	ldr	r2, [pc, #248]	; (10050 <atanf+0x198>)
    ff58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ff5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
    ff60:	ed92 7a00 	vldr	s14, [r2]
    ff64:	4a3b      	ldr	r2, [pc, #236]	; (10054 <atanf+0x19c>)
    ff66:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    ff6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ff6e:	2d00      	cmp	r5, #0
    ff70:	edd3 6a00 	vldr	s13, [r3]
    ff74:	ee77 7a67 	vsub.f32	s15, s14, s15
    ff78:	ee36 0ae7 	vsub.f32	s0, s13, s15
    ff7c:	dab0      	bge.n	fee0 <atanf+0x28>
    ff7e:	eeb1 0a40 	vneg.f32	s0, s0
    ff82:	bd38      	pop	{r3, r4, r5, pc}
    ff84:	ee30 0a00 	vadd.f32	s0, s0, s0
    ff88:	bd38      	pop	{r3, r4, r5, pc}
    ff8a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 10058 <atanf+0x1a0>
    ff8e:	ee30 7a07 	vadd.f32	s14, s0, s14
    ff92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    ff96:	eeb4 7ae6 	vcmpe.f32	s14, s13
    ff9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff9e:	dda6      	ble.n	feee <atanf+0x36>
    ffa0:	bd38      	pop	{r3, r4, r5, pc}
    ffa2:	f7ff fc21 	bl	f7e8 <fabsf>
    ffa6:	4b2d      	ldr	r3, [pc, #180]	; (1005c <atanf+0x1a4>)
    ffa8:	429c      	cmp	r4, r3
    ffaa:	dc16      	bgt.n	ffda <atanf+0x122>
    ffac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
    ffb0:	429c      	cmp	r4, r3
    ffb2:	dc27      	bgt.n	10004 <atanf+0x14c>
    ffb4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    ffb8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    ffbc:	eea0 7a27 	vfma.f32	s14, s0, s15
    ffc0:	2300      	movs	r3, #0
    ffc2:	ee30 0a27 	vadd.f32	s0, s0, s15
    ffc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
    ffca:	e792      	b.n	fef2 <atanf+0x3a>
    ffcc:	ee76 6aa5 	vadd.f32	s13, s13, s11
    ffd0:	eee6 7ae7 	vfms.f32	s15, s13, s15
    ffd4:	eeb0 0a67 	vmov.f32	s0, s15
    ffd8:	bd38      	pop	{r3, r4, r5, pc}
    ffda:	4b21      	ldr	r3, [pc, #132]	; (10060 <atanf+0x1a8>)
    ffdc:	429c      	cmp	r4, r3
    ffde:	dc0b      	bgt.n	fff8 <atanf+0x140>
    ffe0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    ffe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    ffe8:	eea0 7a27 	vfma.f32	s14, s0, s15
    ffec:	2302      	movs	r3, #2
    ffee:	ee30 0a67 	vsub.f32	s0, s0, s15
    fff2:	eec0 7a07 	vdiv.f32	s15, s0, s14
    fff6:	e77c      	b.n	fef2 <atanf+0x3a>
    fff8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    fffc:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10000:	2303      	movs	r3, #3
   10002:	e776      	b.n	fef2 <atanf+0x3a>
   10004:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10008:	ee30 7a67 	vsub.f32	s14, s0, s15
   1000c:	ee30 0a27 	vadd.f32	s0, s0, s15
   10010:	2301      	movs	r3, #1
   10012:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10016:	e76c      	b.n	fef2 <atanf+0x3a>
   10018:	3fc90fdb 	.word	0x3fc90fdb
   1001c:	bfc90fdb 	.word	0xbfc90fdb
   10020:	3edfffff 	.word	0x3edfffff
   10024:	3c8569d7 	.word	0x3c8569d7
   10028:	3d4bda59 	.word	0x3d4bda59
   1002c:	bd15a221 	.word	0xbd15a221
   10030:	3d886b35 	.word	0x3d886b35
   10034:	3dba2e6e 	.word	0x3dba2e6e
   10038:	bd6ef16b 	.word	0xbd6ef16b
   1003c:	bd9d8795 	.word	0xbd9d8795
   10040:	3e124925 	.word	0x3e124925
   10044:	bde38e38 	.word	0xbde38e38
   10048:	3eaaaaab 	.word	0x3eaaaaab
   1004c:	be4ccccd 	.word	0xbe4ccccd
   10050:	2000291c 	.word	0x2000291c
   10054:	2000290c 	.word	0x2000290c
   10058:	7149f2ca 	.word	0x7149f2ca
   1005c:	3f97ffff 	.word	0x3f97ffff
   10060:	401bffff 	.word	0x401bffff
   10064:	00000000 	.word	0x00000000

00010068 <__ieee754_rem_pio2>:
   10068:	b570      	push	{r4, r5, r6, lr}
   1006a:	ec53 2b10 	vmov	r2, r3, d0
   1006e:	499c      	ldr	r1, [pc, #624]	; (102e0 <__ieee754_rem_pio2+0x278>)
   10070:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   10074:	428d      	cmp	r5, r1
   10076:	b088      	sub	sp, #32
   10078:	4604      	mov	r4, r0
   1007a:	dd6a      	ble.n	10152 <__ieee754_rem_pio2+0xea>
   1007c:	4999      	ldr	r1, [pc, #612]	; (102e4 <__ieee754_rem_pio2+0x27c>)
   1007e:	428d      	cmp	r5, r1
   10080:	461e      	mov	r6, r3
   10082:	dc1b      	bgt.n	100bc <__ieee754_rem_pio2+0x54>
   10084:	2b00      	cmp	r3, #0
   10086:	ed9f 7b86 	vldr	d7, [pc, #536]	; 102a0 <__ieee754_rem_pio2+0x238>
   1008a:	f340 80eb 	ble.w	10264 <__ieee754_rem_pio2+0x1fc>
   1008e:	ee30 7b47 	vsub.f64	d7, d0, d7
   10092:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
   10096:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
   1009a:	428d      	cmp	r5, r1
   1009c:	d06a      	beq.n	10174 <__ieee754_rem_pio2+0x10c>
   1009e:	ed9f 6b82 	vldr	d6, [pc, #520]	; 102a8 <__ieee754_rem_pio2+0x240>
   100a2:	2001      	movs	r0, #1
   100a4:	ee37 5b46 	vsub.f64	d5, d7, d6
   100a8:	ee37 7b45 	vsub.f64	d7, d7, d5
   100ac:	ed84 5b00 	vstr	d5, [r4]
   100b0:	ee37 7b46 	vsub.f64	d7, d7, d6
   100b4:	ed84 7b02 	vstr	d7, [r4, #8]
   100b8:	b008      	add	sp, #32
   100ba:	bd70      	pop	{r4, r5, r6, pc}
   100bc:	498a      	ldr	r1, [pc, #552]	; (102e8 <__ieee754_rem_pio2+0x280>)
   100be:	428d      	cmp	r5, r1
   100c0:	dd60      	ble.n	10184 <__ieee754_rem_pio2+0x11c>
   100c2:	498a      	ldr	r1, [pc, #552]	; (102ec <__ieee754_rem_pio2+0x284>)
   100c4:	428d      	cmp	r5, r1
   100c6:	dc4d      	bgt.n	10164 <__ieee754_rem_pio2+0xfc>
   100c8:	152a      	asrs	r2, r5, #20
   100ca:	ee10 0a10 	vmov	r0, s0
   100ce:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
   100d2:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
   100d6:	ec41 0b17 	vmov	d7, r0, r1
   100da:	ed9f 5b75 	vldr	d5, [pc, #468]	; 102b0 <__ieee754_rem_pio2+0x248>
   100de:	eebd 6bc7 	vcvt.s32.f64	s12, d7
   100e2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
   100e6:	ee37 7b46 	vsub.f64	d7, d7, d6
   100ea:	ee27 7b05 	vmul.f64	d7, d7, d5
   100ee:	eefd 4bc7 	vcvt.s32.f64	s9, d7
   100f2:	ed8d 6b02 	vstr	d6, [sp, #8]
   100f6:	eeb8 6be4 	vcvt.f64.s32	d6, s9
   100fa:	ee37 7b46 	vsub.f64	d7, d7, d6
   100fe:	ee27 7b05 	vmul.f64	d7, d7, d5
   10102:	eeb5 7b40 	vcmp.f64	d7, #0.0
   10106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1010a:	ed8d 6b04 	vstr	d6, [sp, #16]
   1010e:	ed8d 7b06 	vstr	d7, [sp, #24]
   10112:	f040 8096 	bne.w	10242 <__ieee754_rem_pio2+0x1da>
   10116:	ee14 3a90 	vmov	r3, s9
   1011a:	2b00      	cmp	r3, #0
   1011c:	bf0c      	ite	eq
   1011e:	2301      	moveq	r3, #1
   10120:	2302      	movne	r3, #2
   10122:	4973      	ldr	r1, [pc, #460]	; (102f0 <__ieee754_rem_pio2+0x288>)
   10124:	9101      	str	r1, [sp, #4]
   10126:	2102      	movs	r1, #2
   10128:	9100      	str	r1, [sp, #0]
   1012a:	a802      	add	r0, sp, #8
   1012c:	4621      	mov	r1, r4
   1012e:	f000 f8e7 	bl	10300 <__kernel_rem_pio2>
   10132:	2e00      	cmp	r6, #0
   10134:	dac0      	bge.n	100b8 <__ieee754_rem_pio2+0x50>
   10136:	ed94 6b00 	vldr	d6, [r4]
   1013a:	ed94 7b02 	vldr	d7, [r4, #8]
   1013e:	eeb1 6b46 	vneg.f64	d6, d6
   10142:	eeb1 7b47 	vneg.f64	d7, d7
   10146:	ed84 6b00 	vstr	d6, [r4]
   1014a:	ed84 7b02 	vstr	d7, [r4, #8]
   1014e:	4240      	negs	r0, r0
   10150:	e7b2      	b.n	100b8 <__ieee754_rem_pio2+0x50>
   10152:	2000      	movs	r0, #0
   10154:	2100      	movs	r1, #0
   10156:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1015a:	2000      	movs	r0, #0
   1015c:	ed84 0b00 	vstr	d0, [r4]
   10160:	b008      	add	sp, #32
   10162:	bd70      	pop	{r4, r5, r6, pc}
   10164:	ee30 7b40 	vsub.f64	d7, d0, d0
   10168:	2000      	movs	r0, #0
   1016a:	ed84 7b02 	vstr	d7, [r4, #8]
   1016e:	ed84 7b00 	vstr	d7, [r4]
   10172:	e7a1      	b.n	100b8 <__ieee754_rem_pio2+0x50>
   10174:	ed9f 5b50 	vldr	d5, [pc, #320]	; 102b8 <__ieee754_rem_pio2+0x250>
   10178:	ed9f 6b51 	vldr	d6, [pc, #324]	; 102c0 <__ieee754_rem_pio2+0x258>
   1017c:	ee37 7b45 	vsub.f64	d7, d7, d5
   10180:	2001      	movs	r0, #1
   10182:	e78f      	b.n	100a4 <__ieee754_rem_pio2+0x3c>
   10184:	f000 fc04 	bl	10990 <fabs>
   10188:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   1018c:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 102c8 <__ieee754_rem_pio2+0x260>
   10190:	eea0 7b05 	vfma.f64	d7, d0, d5
   10194:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   10198:	ed9f 3b41 	vldr	d3, [pc, #260]	; 102a0 <__ieee754_rem_pio2+0x238>
   1019c:	ee17 0a90 	vmov	r0, s15
   101a0:	ed9f 6b41 	vldr	d6, [pc, #260]	; 102a8 <__ieee754_rem_pio2+0x240>
   101a4:	281f      	cmp	r0, #31
   101a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   101aa:	eeb1 4b45 	vneg.f64	d4, d5
   101ae:	eea5 0b43 	vfms.f64	d0, d5, d3
   101b2:	ee25 7b06 	vmul.f64	d7, d5, d6
   101b6:	dc1c      	bgt.n	101f2 <__ieee754_rem_pio2+0x18a>
   101b8:	4b4e      	ldr	r3, [pc, #312]	; (102f4 <__ieee754_rem_pio2+0x28c>)
   101ba:	1e42      	subs	r2, r0, #1
   101bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   101c0:	42ab      	cmp	r3, r5
   101c2:	d016      	beq.n	101f2 <__ieee754_rem_pio2+0x18a>
   101c4:	ee30 6b47 	vsub.f64	d6, d0, d7
   101c8:	ed84 6b00 	vstr	d6, [r4]
   101cc:	ee30 0b46 	vsub.f64	d0, d0, d6
   101d0:	ee30 0b47 	vsub.f64	d0, d0, d7
   101d4:	2e00      	cmp	r6, #0
   101d6:	ed84 0b02 	vstr	d0, [r4, #8]
   101da:	f6bf af6d 	bge.w	100b8 <__ieee754_rem_pio2+0x50>
   101de:	eeb1 6b46 	vneg.f64	d6, d6
   101e2:	eeb1 0b40 	vneg.f64	d0, d0
   101e6:	ed84 6b00 	vstr	d6, [r4]
   101ea:	ed84 0b02 	vstr	d0, [r4, #8]
   101ee:	4240      	negs	r0, r0
   101f0:	e762      	b.n	100b8 <__ieee754_rem_pio2+0x50>
   101f2:	ee30 6b47 	vsub.f64	d6, d0, d7
   101f6:	ee16 3a90 	vmov	r3, s13
   101fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
   101fe:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   10202:	2b10      	cmp	r3, #16
   10204:	ea4f 5225 	mov.w	r2, r5, asr #20
   10208:	ddde      	ble.n	101c8 <__ieee754_rem_pio2+0x160>
   1020a:	eeb0 3b40 	vmov.f64	d3, d0
   1020e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 102b8 <__ieee754_rem_pio2+0x250>
   10212:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 102c0 <__ieee754_rem_pio2+0x258>
   10216:	eea4 3b06 	vfma.f64	d3, d4, d6
   1021a:	ee30 7b43 	vsub.f64	d7, d0, d3
   1021e:	eea4 7b06 	vfma.f64	d7, d4, d6
   10222:	ee95 7b02 	vfnms.f64	d7, d5, d2
   10226:	ee33 6b47 	vsub.f64	d6, d3, d7
   1022a:	ee16 3a90 	vmov	r3, s13
   1022e:	f3c3 530a 	ubfx	r3, r3, #20, #11
   10232:	1ad2      	subs	r2, r2, r3
   10234:	2a31      	cmp	r2, #49	; 0x31
   10236:	dc06      	bgt.n	10246 <__ieee754_rem_pio2+0x1de>
   10238:	eeb0 0b43 	vmov.f64	d0, d3
   1023c:	ed84 6b00 	vstr	d6, [r4]
   10240:	e7c4      	b.n	101cc <__ieee754_rem_pio2+0x164>
   10242:	2303      	movs	r3, #3
   10244:	e76d      	b.n	10122 <__ieee754_rem_pio2+0xba>
   10246:	ed9f 6b22 	vldr	d6, [pc, #136]	; 102d0 <__ieee754_rem_pio2+0x268>
   1024a:	eeb0 0b43 	vmov.f64	d0, d3
   1024e:	ed9f 2b22 	vldr	d2, [pc, #136]	; 102d8 <__ieee754_rem_pio2+0x270>
   10252:	eea4 0b06 	vfma.f64	d0, d4, d6
   10256:	ee33 7b40 	vsub.f64	d7, d3, d0
   1025a:	eea4 7b06 	vfma.f64	d7, d4, d6
   1025e:	ee95 7b02 	vfnms.f64	d7, d5, d2
   10262:	e7af      	b.n	101c4 <__ieee754_rem_pio2+0x15c>
   10264:	4924      	ldr	r1, [pc, #144]	; (102f8 <__ieee754_rem_pio2+0x290>)
   10266:	ee30 7b07 	vadd.f64	d7, d0, d7
   1026a:	428d      	cmp	r5, r1
   1026c:	d00e      	beq.n	1028c <__ieee754_rem_pio2+0x224>
   1026e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 102a8 <__ieee754_rem_pio2+0x240>
   10272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10276:	ee37 5b06 	vadd.f64	d5, d7, d6
   1027a:	ee37 7b45 	vsub.f64	d7, d7, d5
   1027e:	ed84 5b00 	vstr	d5, [r4]
   10282:	ee37 7b06 	vadd.f64	d7, d7, d6
   10286:	ed84 7b02 	vstr	d7, [r4, #8]
   1028a:	e715      	b.n	100b8 <__ieee754_rem_pio2+0x50>
   1028c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 102b8 <__ieee754_rem_pio2+0x250>
   10290:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 102c0 <__ieee754_rem_pio2+0x258>
   10294:	ee37 7b05 	vadd.f64	d7, d7, d5
   10298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1029c:	e7eb      	b.n	10276 <__ieee754_rem_pio2+0x20e>
   1029e:	bf00      	nop
   102a0:	54400000 	.word	0x54400000
   102a4:	3ff921fb 	.word	0x3ff921fb
   102a8:	1a626331 	.word	0x1a626331
   102ac:	3dd0b461 	.word	0x3dd0b461
   102b0:	00000000 	.word	0x00000000
   102b4:	41700000 	.word	0x41700000
   102b8:	1a600000 	.word	0x1a600000
   102bc:	3dd0b461 	.word	0x3dd0b461
   102c0:	2e037073 	.word	0x2e037073
   102c4:	3ba3198a 	.word	0x3ba3198a
   102c8:	6dc9c883 	.word	0x6dc9c883
   102cc:	3fe45f30 	.word	0x3fe45f30
   102d0:	2e000000 	.word	0x2e000000
   102d4:	3ba3198a 	.word	0x3ba3198a
   102d8:	252049c1 	.word	0x252049c1
   102dc:	397b839a 	.word	0x397b839a
   102e0:	3fe921fb 	.word	0x3fe921fb
   102e4:	4002d97b 	.word	0x4002d97b
   102e8:	413921fb 	.word	0x413921fb
   102ec:	7fefffff 	.word	0x7fefffff
   102f0:	20003058 	.word	0x20003058
   102f4:	20002ce0 	.word	0x20002ce0
   102f8:	3ff921fb 	.word	0x3ff921fb
   102fc:	00000000 	.word	0x00000000

00010300 <__kernel_rem_pio2>:
   10300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10304:	ed2d 8b08 	vpush	{d8-d11}
   10308:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   1030c:	461c      	mov	r4, r3
   1030e:	9304      	str	r3, [sp, #16]
   10310:	9107      	str	r1, [sp, #28]
   10312:	4bab      	ldr	r3, [pc, #684]	; (105c0 <__kernel_rem_pio2+0x2c0>)
   10314:	99a6      	ldr	r1, [sp, #664]	; 0x298
   10316:	f112 0f14 	cmn.w	r2, #20
   1031a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   1031e:	4682      	mov	sl, r0
   10320:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   10324:	f2c0 8299 	blt.w	1085a <__kernel_rem_pio2+0x55a>
   10328:	49a6      	ldr	r1, [pc, #664]	; (105c4 <__kernel_rem_pio2+0x2c4>)
   1032a:	1ed3      	subs	r3, r2, #3
   1032c:	fb81 0103 	smull	r0, r1, r1, r3
   10330:	17db      	asrs	r3, r3, #31
   10332:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   10336:	9303      	str	r3, [sp, #12]
   10338:	3301      	adds	r3, #1
   1033a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1033e:	00db      	lsls	r3, r3, #3
   10340:	18d3      	adds	r3, r2, r3
   10342:	9306      	str	r3, [sp, #24]
   10344:	9b03      	ldr	r3, [sp, #12]
   10346:	eb15 0108 	adds.w	r1, r5, r8
   1034a:	eba3 0308 	sub.w	r3, r3, r8
   1034e:	d41a      	bmi.n	10386 <__kernel_rem_pio2+0x86>
   10350:	3101      	adds	r1, #1
   10352:	ed9f 6b95 	vldr	d6, [pc, #596]	; 105a8 <__kernel_rem_pio2+0x2a8>
   10356:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   10358:	4419      	add	r1, r3
   1035a:	aa1c      	add	r2, sp, #112	; 0x70
   1035c:	e00a      	b.n	10374 <__kernel_rem_pio2+0x74>
   1035e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   10362:	ee07 4a90 	vmov	s15, r4
   10366:	3301      	adds	r3, #1
   10368:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1036c:	428b      	cmp	r3, r1
   1036e:	eca2 7b02 	vstmia	r2!, {d7}
   10372:	d008      	beq.n	10386 <__kernel_rem_pio2+0x86>
   10374:	2b00      	cmp	r3, #0
   10376:	daf2      	bge.n	1035e <__kernel_rem_pio2+0x5e>
   10378:	eeb0 7b46 	vmov.f64	d7, d6
   1037c:	3301      	adds	r3, #1
   1037e:	428b      	cmp	r3, r1
   10380:	eca2 7b02 	vstmia	r2!, {d7}
   10384:	d1f6      	bne.n	10374 <__kernel_rem_pio2+0x74>
   10386:	2d00      	cmp	r5, #0
   10388:	f2c0 82c9 	blt.w	1091e <__kernel_rem_pio2+0x61e>
   1038c:	9b04      	ldr	r3, [sp, #16]
   1038e:	aa1c      	add	r2, sp, #112	; 0x70
   10390:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   10394:	ae6c      	add	r6, sp, #432	; 0x1b0
   10396:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   1039a:	4640      	mov	r0, r8
   1039c:	18ef      	adds	r7, r5, r3
   1039e:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   103a2:	f1b8 0f00 	cmp.w	r8, #0
   103a6:	ed9f 7b80 	vldr	d7, [pc, #512]	; 105a8 <__kernel_rem_pio2+0x2a8>
   103aa:	db09      	blt.n	103c0 <__kernel_rem_pio2+0xc0>
   103ac:	4622      	mov	r2, r4
   103ae:	4653      	mov	r3, sl
   103b0:	ecb3 5b02 	vldmia	r3!, {d5}
   103b4:	ed32 6b02 	vldmdb	r2!, {d6}
   103b8:	428b      	cmp	r3, r1
   103ba:	eea5 7b06 	vfma.f64	d7, d5, d6
   103be:	d1f7      	bne.n	103b0 <__kernel_rem_pio2+0xb0>
   103c0:	3001      	adds	r0, #1
   103c2:	42b8      	cmp	r0, r7
   103c4:	eca6 7b02 	vstmia	r6!, {d7}
   103c8:	f104 0408 	add.w	r4, r4, #8
   103cc:	d1e9      	bne.n	103a2 <__kernel_rem_pio2+0xa2>
   103ce:	af08      	add	r7, sp, #32
   103d0:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   103d4:	ed9f 9b76 	vldr	d9, [pc, #472]	; 105b0 <__kernel_rem_pio2+0x2b0>
   103d8:	ed9f 8b77 	vldr	d8, [pc, #476]	; 105b8 <__kernel_rem_pio2+0x2b8>
   103dc:	3b04      	subs	r3, #4
   103de:	f8dd b018 	ldr.w	fp, [sp, #24]
   103e2:	9305      	str	r3, [sp, #20]
   103e4:	eb0a 040c 	add.w	r4, sl, ip
   103e8:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   103ec:	ae6c      	add	r6, sp, #432	; 0x1b0
   103ee:	4629      	mov	r1, r5
   103f0:	9501      	str	r5, [sp, #4]
   103f2:	ab94      	add	r3, sp, #592	; 0x250
   103f4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   103f8:	2900      	cmp	r1, #0
   103fa:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   103fe:	dd16      	ble.n	1042e <__kernel_rem_pio2+0x12e>
   10400:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   10404:	463a      	mov	r2, r7
   10406:	ee20 7b09 	vmul.f64	d7, d0, d9
   1040a:	ed33 5b02 	vldmdb	r3!, {d5}
   1040e:	eeb0 6b40 	vmov.f64	d6, d0
   10412:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   10416:	42b3      	cmp	r3, r6
   10418:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1041c:	eea7 6b48 	vfms.f64	d6, d7, d8
   10420:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   10424:	ee37 0b05 	vadd.f64	d0, d7, d5
   10428:	eca2 6a01 	vstmia	r2!, {s12}
   1042c:	d1eb      	bne.n	10406 <__kernel_rem_pio2+0x106>
   1042e:	4658      	mov	r0, fp
   10430:	9102      	str	r1, [sp, #8]
   10432:	f000 fb41 	bl	10ab8 <scalbn>
   10436:	eeb0 ab40 	vmov.f64	d10, d0
   1043a:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   1043e:	ee2a 0b00 	vmul.f64	d0, d10, d0
   10442:	f000 fab1 	bl	109a8 <floor>
   10446:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   1044a:	eea0 ab47 	vfms.f64	d10, d0, d7
   1044e:	eebd bbca 	vcvt.s32.f64	s22, d10
   10452:	f1bb 0f00 	cmp.w	fp, #0
   10456:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   1045a:	9902      	ldr	r1, [sp, #8]
   1045c:	ee3a ab47 	vsub.f64	d10, d10, d7
   10460:	dd74      	ble.n	1054c <__kernel_rem_pio2+0x24c>
   10462:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   10466:	f1cb 0318 	rsb	r3, fp, #24
   1046a:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   1046e:	fa42 fc03 	asr.w	ip, r2, r3
   10472:	fa0c f303 	lsl.w	r3, ip, r3
   10476:	1ad2      	subs	r2, r2, r3
   10478:	f1cb 0017 	rsb	r0, fp, #23
   1047c:	ee1b 3a10 	vmov	r3, s22
   10480:	fa42 f500 	asr.w	r5, r2, r0
   10484:	4463      	add	r3, ip
   10486:	2d00      	cmp	r5, #0
   10488:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   1048c:	ee0b 3a10 	vmov	s22, r3
   10490:	dc64      	bgt.n	1055c <__kernel_rem_pio2+0x25c>
   10492:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1049a:	f040 80c4 	bne.w	10626 <__kernel_rem_pio2+0x326>
   1049e:	9b01      	ldr	r3, [sp, #4]
   104a0:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   104a4:	4573      	cmp	r3, lr
   104a6:	dc0d      	bgt.n	104c4 <__kernel_rem_pio2+0x1c4>
   104a8:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   104ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   104b0:	2000      	movs	r0, #0
   104b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   104b6:	454b      	cmp	r3, r9
   104b8:	ea40 0002 	orr.w	r0, r0, r2
   104bc:	d1f9      	bne.n	104b2 <__kernel_rem_pio2+0x1b2>
   104be:	2800      	cmp	r0, #0
   104c0:	f040 80f2 	bne.w	106a8 <__kernel_rem_pio2+0x3a8>
   104c4:	9b01      	ldr	r3, [sp, #4]
   104c6:	3b01      	subs	r3, #1
   104c8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   104cc:	2b00      	cmp	r3, #0
   104ce:	f040 80e6 	bne.w	1069e <__kernel_rem_pio2+0x39e>
   104d2:	9b05      	ldr	r3, [sp, #20]
   104d4:	2501      	movs	r5, #1
   104d6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   104da:	3501      	adds	r5, #1
   104dc:	2a00      	cmp	r2, #0
   104de:	d0fa      	beq.n	104d6 <__kernel_rem_pio2+0x1d6>
   104e0:	f101 0e01 	add.w	lr, r1, #1
   104e4:	440d      	add	r5, r1
   104e6:	4670      	mov	r0, lr
   104e8:	9b04      	ldr	r3, [sp, #16]
   104ea:	4419      	add	r1, r3
   104ec:	9b03      	ldr	r3, [sp, #12]
   104ee:	eb03 0c0e 	add.w	ip, r3, lr
   104f2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   104f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   104f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   104fc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   10500:	ab1c      	add	r3, sp, #112	; 0x70
   10502:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   10506:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   1050a:	ed9c 7a01 	vldr	s14, [ip, #4]
   1050e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10512:	f1b8 0f00 	cmp.w	r8, #0
   10516:	ed81 7b00 	vstr	d7, [r1]
   1051a:	f10c 0c04 	add.w	ip, ip, #4
   1051e:	460a      	mov	r2, r1
   10520:	ed9f 6b21 	vldr	d6, [pc, #132]	; 105a8 <__kernel_rem_pio2+0x2a8>
   10524:	f101 0108 	add.w	r1, r1, #8
   10528:	db09      	blt.n	1053e <__kernel_rem_pio2+0x23e>
   1052a:	4653      	mov	r3, sl
   1052c:	e001      	b.n	10532 <__kernel_rem_pio2+0x232>
   1052e:	ed32 7b02 	vldmdb	r2!, {d7}
   10532:	ecb3 5b02 	vldmia	r3!, {d5}
   10536:	42a3      	cmp	r3, r4
   10538:	eea5 6b07 	vfma.f64	d6, d5, d7
   1053c:	d1f7      	bne.n	1052e <__kernel_rem_pio2+0x22e>
   1053e:	3001      	adds	r0, #1
   10540:	42a8      	cmp	r0, r5
   10542:	ecae 6b02 	vstmia	lr!, {d6}
   10546:	dde0      	ble.n	1050a <__kernel_rem_pio2+0x20a>
   10548:	4629      	mov	r1, r5
   1054a:	e752      	b.n	103f2 <__kernel_rem_pio2+0xf2>
   1054c:	f040 809d 	bne.w	1068a <__kernel_rem_pio2+0x38a>
   10550:	1e4b      	subs	r3, r1, #1
   10552:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   10556:	15ed      	asrs	r5, r5, #23
   10558:	2d00      	cmp	r5, #0
   1055a:	dd9a      	ble.n	10492 <__kernel_rem_pio2+0x192>
   1055c:	ee1b 3a10 	vmov	r3, s22
   10560:	2900      	cmp	r1, #0
   10562:	f103 0301 	add.w	r3, r3, #1
   10566:	ee0b 3a10 	vmov	s22, r3
   1056a:	f340 818c 	ble.w	10886 <__kernel_rem_pio2+0x586>
   1056e:	683a      	ldr	r2, [r7, #0]
   10570:	2a00      	cmp	r2, #0
   10572:	f040 8082 	bne.w	1067a <__kernel_rem_pio2+0x37a>
   10576:	2901      	cmp	r1, #1
   10578:	d02d      	beq.n	105d6 <__kernel_rem_pio2+0x2d6>
   1057a:	463b      	mov	r3, r7
   1057c:	2001      	movs	r0, #1
   1057e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   10582:	2a00      	cmp	r2, #0
   10584:	d07c      	beq.n	10680 <__kernel_rem_pio2+0x380>
   10586:	1c43      	adds	r3, r0, #1
   10588:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   1058c:	4299      	cmp	r1, r3
   1058e:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   10592:	dd1f      	ble.n	105d4 <__kernel_rem_pio2+0x2d4>
   10594:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   10598:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   1059c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   105a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   105a4:	e011      	b.n	105ca <__kernel_rem_pio2+0x2ca>
   105a6:	bf00      	nop
	...
   105b4:	3e700000 	.word	0x3e700000
   105b8:	00000000 	.word	0x00000000
   105bc:	41700000 	.word	0x41700000
   105c0:	20002cb4 	.word	0x20002cb4
   105c4:	2aaaaaab 	.word	0x2aaaaaab
   105c8:	681a      	ldr	r2, [r3, #0]
   105ca:	1a82      	subs	r2, r0, r2
   105cc:	f843 2b04 	str.w	r2, [r3], #4
   105d0:	4563      	cmp	r3, ip
   105d2:	d1f9      	bne.n	105c8 <__kernel_rem_pio2+0x2c8>
   105d4:	2201      	movs	r2, #1
   105d6:	f1bb 0f00 	cmp.w	fp, #0
   105da:	dd0d      	ble.n	105f8 <__kernel_rem_pio2+0x2f8>
   105dc:	f1bb 0f01 	cmp.w	fp, #1
   105e0:	f000 8133 	beq.w	1084a <__kernel_rem_pio2+0x54a>
   105e4:	f1bb 0f02 	cmp.w	fp, #2
   105e8:	d106      	bne.n	105f8 <__kernel_rem_pio2+0x2f8>
   105ea:	1e48      	subs	r0, r1, #1
   105ec:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   105f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
   105f4:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   105f8:	2d02      	cmp	r5, #2
   105fa:	f47f af4a 	bne.w	10492 <__kernel_rem_pio2+0x192>
   105fe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   10602:	ee30 ab4a 	vsub.f64	d10, d0, d10
   10606:	2a00      	cmp	r2, #0
   10608:	f43f af43 	beq.w	10492 <__kernel_rem_pio2+0x192>
   1060c:	4658      	mov	r0, fp
   1060e:	9102      	str	r1, [sp, #8]
   10610:	f000 fa52 	bl	10ab8 <scalbn>
   10614:	ee3a ab40 	vsub.f64	d10, d10, d0
   10618:	eeb5 ab40 	vcmp.f64	d10, #0.0
   1061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10620:	9902      	ldr	r1, [sp, #8]
   10622:	f43f af3c 	beq.w	1049e <__kernel_rem_pio2+0x19e>
   10626:	9c06      	ldr	r4, [sp, #24]
   10628:	eeb0 0b4a 	vmov.f64	d0, d10
   1062c:	4260      	negs	r0, r4
   1062e:	46a8      	mov	r8, r5
   10630:	468b      	mov	fp, r1
   10632:	9d01      	ldr	r5, [sp, #4]
   10634:	f000 fa40 	bl	10ab8 <scalbn>
   10638:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 10940 <__kernel_rem_pio2+0x640>
   1063c:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10644:	f2c0 8147 	blt.w	108d6 <__kernel_rem_pio2+0x5d6>
   10648:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 10948 <__kernel_rem_pio2+0x648>
   1064c:	ee20 7b07 	vmul.f64	d7, d0, d7
   10650:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   10654:	f10b 0201 	add.w	r2, fp, #1
   10658:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1065c:	eea5 0b46 	vfms.f64	d0, d5, d6
   10660:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   10664:	3418      	adds	r4, #24
   10666:	ee10 3a10 	vmov	r3, s0
   1066a:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   1066e:	ee17 3a10 	vmov	r3, s14
   10672:	9406      	str	r4, [sp, #24]
   10674:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   10678:	e02a      	b.n	106d0 <__kernel_rem_pio2+0x3d0>
   1067a:	2301      	movs	r3, #1
   1067c:	2000      	movs	r0, #0
   1067e:	e783      	b.n	10588 <__kernel_rem_pio2+0x288>
   10680:	3001      	adds	r0, #1
   10682:	4288      	cmp	r0, r1
   10684:	f47f af7b 	bne.w	1057e <__kernel_rem_pio2+0x27e>
   10688:	e7a5      	b.n	105d6 <__kernel_rem_pio2+0x2d6>
   1068a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   1068e:	eeb4 abc7 	vcmpe.f64	d10, d7
   10692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10696:	f280 80e5 	bge.w	10864 <__kernel_rem_pio2+0x564>
   1069a:	2500      	movs	r5, #0
   1069c:	e6f9      	b.n	10492 <__kernel_rem_pio2+0x192>
   1069e:	f101 0e01 	add.w	lr, r1, #1
   106a2:	4670      	mov	r0, lr
   106a4:	4675      	mov	r5, lr
   106a6:	e71f      	b.n	104e8 <__kernel_rem_pio2+0x1e8>
   106a8:	9b06      	ldr	r3, [sp, #24]
   106aa:	f1a3 0118 	sub.w	r1, r3, #24
   106ae:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   106b2:	9106      	str	r1, [sp, #24]
   106b4:	46a8      	mov	r8, r5
   106b6:	4672      	mov	r2, lr
   106b8:	9d01      	ldr	r5, [sp, #4]
   106ba:	b94b      	cbnz	r3, 106d0 <__kernel_rem_pio2+0x3d0>
   106bc:	f1ac 0304 	sub.w	r3, ip, #4
   106c0:	443b      	add	r3, r7
   106c2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   106c6:	3a01      	subs	r2, #1
   106c8:	3918      	subs	r1, #24
   106ca:	2800      	cmp	r0, #0
   106cc:	d0f9      	beq.n	106c2 <__kernel_rem_pio2+0x3c2>
   106ce:	9106      	str	r1, [sp, #24]
   106d0:	9806      	ldr	r0, [sp, #24]
   106d2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   106d6:	9201      	str	r2, [sp, #4]
   106d8:	f000 f9ee 	bl	10ab8 <scalbn>
   106dc:	9a01      	ldr	r2, [sp, #4]
   106de:	2a00      	cmp	r2, #0
   106e0:	f2c0 8121 	blt.w	10926 <__kernel_rem_pio2+0x626>
   106e4:	ed9f 6b98 	vldr	d6, [pc, #608]	; 10948 <__kernel_rem_pio2+0x648>
   106e8:	f102 0c01 	add.w	ip, r2, #1
   106ec:	a96c      	add	r1, sp, #432	; 0x1b0
   106ee:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   106f2:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   106f6:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   106fa:	ed33 7a01 	vldmdb	r3!, {s14}
   106fe:	42bb      	cmp	r3, r7
   10700:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10704:	ee27 7b00 	vmul.f64	d7, d7, d0
   10708:	ee20 0b06 	vmul.f64	d0, d0, d6
   1070c:	ed21 7b02 	vstmdb	r1!, {d7}
   10710:	d1f3      	bne.n	106fa <__kernel_rem_pio2+0x3fa>
   10712:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 10950 <__kernel_rem_pio2+0x650>
   10716:	f1ae 0308 	sub.w	r3, lr, #8
   1071a:	a96c      	add	r1, sp, #432	; 0x1b0
   1071c:	18ce      	adds	r6, r1, r3
   1071e:	2400      	movs	r4, #0
   10720:	af44      	add	r7, sp, #272	; 0x110
   10722:	2d00      	cmp	r5, #0
   10724:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 10958 <__kernel_rem_pio2+0x658>
   10728:	db10      	blt.n	1074c <__kernel_rem_pio2+0x44c>
   1072a:	eeb0 6b44 	vmov.f64	d6, d4
   1072e:	488c      	ldr	r0, [pc, #560]	; (10960 <__kernel_rem_pio2+0x660>)
   10730:	4631      	mov	r1, r6
   10732:	2300      	movs	r3, #0
   10734:	e003      	b.n	1073e <__kernel_rem_pio2+0x43e>
   10736:	429c      	cmp	r4, r3
   10738:	db08      	blt.n	1074c <__kernel_rem_pio2+0x44c>
   1073a:	ecb0 6b02 	vldmia	r0!, {d6}
   1073e:	ecb1 5b02 	vldmia	r1!, {d5}
   10742:	3301      	adds	r3, #1
   10744:	429d      	cmp	r5, r3
   10746:	eea5 7b06 	vfma.f64	d7, d5, d6
   1074a:	daf4      	bge.n	10736 <__kernel_rem_pio2+0x436>
   1074c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   10750:	4294      	cmp	r4, r2
   10752:	ed83 7b00 	vstr	d7, [r3]
   10756:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   1075a:	f104 0301 	add.w	r3, r4, #1
   1075e:	f1a6 0608 	sub.w	r6, r6, #8
   10762:	d001      	beq.n	10768 <__kernel_rem_pio2+0x468>
   10764:	461c      	mov	r4, r3
   10766:	e7dc      	b.n	10722 <__kernel_rem_pio2+0x422>
   10768:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   1076a:	2b02      	cmp	r3, #2
   1076c:	dc1d      	bgt.n	107aa <__kernel_rem_pio2+0x4aa>
   1076e:	2b00      	cmp	r3, #0
   10770:	f300 808b 	bgt.w	1088a <__kernel_rem_pio2+0x58a>
   10774:	d10f      	bne.n	10796 <__kernel_rem_pio2+0x496>
   10776:	ed9f 7b78 	vldr	d7, [pc, #480]	; 10958 <__kernel_rem_pio2+0x658>
   1077a:	44be      	add	lr, r7
   1077c:	ed3e 6b02 	vldmdb	lr!, {d6}
   10780:	4577      	cmp	r7, lr
   10782:	ee37 7b06 	vadd.f64	d7, d7, d6
   10786:	d1f9      	bne.n	1077c <__kernel_rem_pio2+0x47c>
   10788:	4643      	mov	r3, r8
   1078a:	b10b      	cbz	r3, 10790 <__kernel_rem_pio2+0x490>
   1078c:	eeb1 7b47 	vneg.f64	d7, d7
   10790:	9b07      	ldr	r3, [sp, #28]
   10792:	ed83 7b00 	vstr	d7, [r3]
   10796:	ee1b 3a10 	vmov	r3, s22
   1079a:	f003 0007 	and.w	r0, r3, #7
   1079e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   107a2:	ecbd 8b08 	vpop	{d8-d11}
   107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   107aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   107ac:	2b03      	cmp	r3, #3
   107ae:	d1f2      	bne.n	10796 <__kernel_rem_pio2+0x496>
   107b0:	2a00      	cmp	r2, #0
   107b2:	f000 80e3 	beq.w	1097c <__kernel_rem_pio2+0x67c>
   107b6:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   107ba:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   107be:	ed30 6b02 	vldmdb	r0!, {d6}
   107c2:	eeb0 5b47 	vmov.f64	d5, d7
   107c6:	4287      	cmp	r7, r0
   107c8:	ee37 7b06 	vadd.f64	d7, d7, d6
   107cc:	ee36 6b47 	vsub.f64	d6, d6, d7
   107d0:	ed80 7b00 	vstr	d7, [r0]
   107d4:	ee36 6b05 	vadd.f64	d6, d6, d5
   107d8:	ed80 6b02 	vstr	d6, [r0, #8]
   107dc:	d1ef      	bne.n	107be <__kernel_rem_pio2+0x4be>
   107de:	2a01      	cmp	r2, #1
   107e0:	f340 80cc 	ble.w	1097c <__kernel_rem_pio2+0x67c>
   107e4:	4439      	add	r1, r7
   107e6:	ed91 6b00 	vldr	d6, [r1]
   107ea:	00da      	lsls	r2, r3, #3
   107ec:	a946      	add	r1, sp, #280	; 0x118
   107ee:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   107f2:	ed33 7b02 	vldmdb	r3!, {d7}
   107f6:	eeb0 5b46 	vmov.f64	d5, d6
   107fa:	4299      	cmp	r1, r3
   107fc:	ee36 6b07 	vadd.f64	d6, d6, d7
   10800:	ee37 7b46 	vsub.f64	d7, d7, d6
   10804:	ed83 6b00 	vstr	d6, [r3]
   10808:	ee37 7b05 	vadd.f64	d7, d7, d5
   1080c:	ed83 7b02 	vstr	d7, [r3, #8]
   10810:	d1ef      	bne.n	107f2 <__kernel_rem_pio2+0x4f2>
   10812:	ed9f 7b51 	vldr	d7, [pc, #324]	; 10958 <__kernel_rem_pio2+0x658>
   10816:	f102 0308 	add.w	r3, r2, #8
   1081a:	443b      	add	r3, r7
   1081c:	f107 0210 	add.w	r2, r7, #16
   10820:	ed33 6b02 	vldmdb	r3!, {d6}
   10824:	429a      	cmp	r2, r3
   10826:	ee37 7b06 	vadd.f64	d7, d7, d6
   1082a:	d1f9      	bne.n	10820 <__kernel_rem_pio2+0x520>
   1082c:	4643      	mov	r3, r8
   1082e:	2b00      	cmp	r3, #0
   10830:	d159      	bne.n	108e6 <__kernel_rem_pio2+0x5e6>
   10832:	e9d7 0100 	ldrd	r0, r1, [r7]
   10836:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1083a:	9c07      	ldr	r4, [sp, #28]
   1083c:	ed84 7b04 	vstr	d7, [r4, #16]
   10840:	e9c4 0100 	strd	r0, r1, [r4]
   10844:	e9c4 2302 	strd	r2, r3, [r4, #8]
   10848:	e7a5      	b.n	10796 <__kernel_rem_pio2+0x496>
   1084a:	1e48      	subs	r0, r1, #1
   1084c:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10850:	f3c3 0316 	ubfx	r3, r3, #0, #23
   10854:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10858:	e6ce      	b.n	105f8 <__kernel_rem_pio2+0x2f8>
   1085a:	2100      	movs	r1, #0
   1085c:	f06f 0317 	mvn.w	r3, #23
   10860:	9103      	str	r1, [sp, #12]
   10862:	e56d      	b.n	10340 <__kernel_rem_pio2+0x40>
   10864:	ee1b 3a10 	vmov	r3, s22
   10868:	2900      	cmp	r1, #0
   1086a:	f103 0301 	add.w	r3, r3, #1
   1086e:	ee0b 3a10 	vmov	s22, r3
   10872:	bfc8      	it	gt
   10874:	2502      	movgt	r5, #2
   10876:	f73f ae7a 	bgt.w	1056e <__kernel_rem_pio2+0x26e>
   1087a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1087e:	ee37 ab4a 	vsub.f64	d10, d7, d10
   10882:	2502      	movs	r5, #2
   10884:	e605      	b.n	10492 <__kernel_rem_pio2+0x192>
   10886:	2200      	movs	r2, #0
   10888:	e6a5      	b.n	105d6 <__kernel_rem_pio2+0x2d6>
   1088a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 10958 <__kernel_rem_pio2+0x658>
   1088e:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   10892:	ed3c 6b02 	vldmdb	ip!, {d6}
   10896:	4567      	cmp	r7, ip
   10898:	ee37 7b06 	vadd.f64	d7, d7, d6
   1089c:	d1f9      	bne.n	10892 <__kernel_rem_pio2+0x592>
   1089e:	4643      	mov	r3, r8
   108a0:	ed97 6b00 	vldr	d6, [r7]
   108a4:	bb8b      	cbnz	r3, 1090a <__kernel_rem_pio2+0x60a>
   108a6:	9b07      	ldr	r3, [sp, #28]
   108a8:	2a00      	cmp	r2, #0
   108aa:	ed83 7b00 	vstr	d7, [r3]
   108ae:	ee36 7b47 	vsub.f64	d7, d6, d7
   108b2:	dd0c      	ble.n	108ce <__kernel_rem_pio2+0x5ce>
   108b4:	a946      	add	r1, sp, #280	; 0x118
   108b6:	2301      	movs	r3, #1
   108b8:	ecb1 6b02 	vldmia	r1!, {d6}
   108bc:	3301      	adds	r3, #1
   108be:	429a      	cmp	r2, r3
   108c0:	ee37 7b06 	vadd.f64	d7, d7, d6
   108c4:	daf8      	bge.n	108b8 <__kernel_rem_pio2+0x5b8>
   108c6:	4643      	mov	r3, r8
   108c8:	b10b      	cbz	r3, 108ce <__kernel_rem_pio2+0x5ce>
   108ca:	eeb1 7b47 	vneg.f64	d7, d7
   108ce:	9b07      	ldr	r3, [sp, #28]
   108d0:	ed83 7b02 	vstr	d7, [r3, #8]
   108d4:	e75f      	b.n	10796 <__kernel_rem_pio2+0x496>
   108d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   108da:	465a      	mov	r2, fp
   108dc:	ee10 3a10 	vmov	r3, s0
   108e0:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   108e4:	e6f4      	b.n	106d0 <__kernel_rem_pio2+0x3d0>
   108e6:	ed97 5b00 	vldr	d5, [r7]
   108ea:	eeb1 7b47 	vneg.f64	d7, d7
   108ee:	ed97 6b02 	vldr	d6, [r7, #8]
   108f2:	eeb1 5b45 	vneg.f64	d5, d5
   108f6:	9b07      	ldr	r3, [sp, #28]
   108f8:	eeb1 6b46 	vneg.f64	d6, d6
   108fc:	ed83 5b00 	vstr	d5, [r3]
   10900:	ed83 6b02 	vstr	d6, [r3, #8]
   10904:	ed83 7b04 	vstr	d7, [r3, #16]
   10908:	e745      	b.n	10796 <__kernel_rem_pio2+0x496>
   1090a:	9b07      	ldr	r3, [sp, #28]
   1090c:	eeb1 5b47 	vneg.f64	d5, d7
   10910:	2a00      	cmp	r2, #0
   10912:	ed83 5b00 	vstr	d5, [r3]
   10916:	ee36 7b47 	vsub.f64	d7, d6, d7
   1091a:	dccb      	bgt.n	108b4 <__kernel_rem_pio2+0x5b4>
   1091c:	e7d5      	b.n	108ca <__kernel_rem_pio2+0x5ca>
   1091e:	9b04      	ldr	r3, [sp, #16]
   10920:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   10924:	e553      	b.n	103ce <__kernel_rem_pio2+0xce>
   10926:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10928:	2b02      	cmp	r3, #2
   1092a:	dc1b      	bgt.n	10964 <__kernel_rem_pio2+0x664>
   1092c:	2b00      	cmp	r3, #0
   1092e:	dc21      	bgt.n	10974 <__kernel_rem_pio2+0x674>
   10930:	f47f af31 	bne.w	10796 <__kernel_rem_pio2+0x496>
   10934:	ed9f 7b08 	vldr	d7, [pc, #32]	; 10958 <__kernel_rem_pio2+0x658>
   10938:	e726      	b.n	10788 <__kernel_rem_pio2+0x488>
   1093a:	bf00      	nop
   1093c:	f3af 8000 	nop.w
   10940:	00000000 	.word	0x00000000
   10944:	41700000 	.word	0x41700000
   10948:	00000000 	.word	0x00000000
   1094c:	3e700000 	.word	0x3e700000
   10950:	40000000 	.word	0x40000000
   10954:	3ff921fb 	.word	0x3ff921fb
	...
   10960:	20000288 	.word	0x20000288
   10964:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10966:	2b03      	cmp	r3, #3
   10968:	f47f af15 	bne.w	10796 <__kernel_rem_pio2+0x496>
   1096c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 10988 <__kernel_rem_pio2+0x688>
   10970:	af44      	add	r7, sp, #272	; 0x110
   10972:	e75b      	b.n	1082c <__kernel_rem_pio2+0x52c>
   10974:	ed9f 7b04 	vldr	d7, [pc, #16]	; 10988 <__kernel_rem_pio2+0x688>
   10978:	af44      	add	r7, sp, #272	; 0x110
   1097a:	e790      	b.n	1089e <__kernel_rem_pio2+0x59e>
   1097c:	ed9f 7b02 	vldr	d7, [pc, #8]	; 10988 <__kernel_rem_pio2+0x688>
   10980:	e754      	b.n	1082c <__kernel_rem_pio2+0x52c>
   10982:	bf00      	nop
   10984:	f3af 8000 	nop.w
	...

00010990 <fabs>:
   10990:	ec51 0b10 	vmov	r0, r1, d0
   10994:	ee10 2a10 	vmov	r2, s0
   10998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1099c:	ec43 2b10 	vmov	d0, r2, r3
   109a0:	4770      	bx	lr
   109a2:	bf00      	nop
   109a4:	0000      	movs	r0, r0
	...

000109a8 <floor>:
   109a8:	b510      	push	{r4, lr}
   109aa:	b082      	sub	sp, #8
   109ac:	ed8d 0b00 	vstr	d0, [sp]
   109b0:	9901      	ldr	r1, [sp, #4]
   109b2:	9800      	ldr	r0, [sp, #0]
   109b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
   109b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   109bc:	2b13      	cmp	r3, #19
   109be:	4684      	mov	ip, r0
   109c0:	dc31      	bgt.n	10a26 <floor+0x7e>
   109c2:	2b00      	cmp	r3, #0
   109c4:	db21      	blt.n	10a0a <floor+0x62>
   109c6:	4a3a      	ldr	r2, [pc, #232]	; (10ab0 <floor+0x108>)
   109c8:	411a      	asrs	r2, r3
   109ca:	ea01 0402 	and.w	r4, r1, r2
   109ce:	4304      	orrs	r4, r0
   109d0:	468e      	mov	lr, r1
   109d2:	d02d      	beq.n	10a30 <floor+0x88>
   109d4:	ed9f 7b34 	vldr	d7, [pc, #208]	; 10aa8 <floor+0x100>
   109d8:	ed9d 6b00 	vldr	d6, [sp]
   109dc:	ee36 7b07 	vadd.f64	d7, d6, d7
   109e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   109e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109e8:	dd09      	ble.n	109fe <floor+0x56>
   109ea:	2900      	cmp	r1, #0
   109ec:	da04      	bge.n	109f8 <floor+0x50>
   109ee:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   109f2:	fa41 f303 	asr.w	r3, r1, r3
   109f6:	449e      	add	lr, r3
   109f8:	ea2e 0102 	bic.w	r1, lr, r2
   109fc:	2000      	movs	r0, #0
   109fe:	460b      	mov	r3, r1
   10a00:	4602      	mov	r2, r0
   10a02:	ec43 2b10 	vmov	d0, r2, r3
   10a06:	b002      	add	sp, #8
   10a08:	bd10      	pop	{r4, pc}
   10a0a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 10aa8 <floor+0x100>
   10a0e:	ee30 7b07 	vadd.f64	d7, d0, d7
   10a12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a1a:	ddf0      	ble.n	109fe <floor+0x56>
   10a1c:	2900      	cmp	r1, #0
   10a1e:	db28      	blt.n	10a72 <floor+0xca>
   10a20:	2000      	movs	r0, #0
   10a22:	4601      	mov	r1, r0
   10a24:	e7eb      	b.n	109fe <floor+0x56>
   10a26:	2b33      	cmp	r3, #51	; 0x33
   10a28:	dd06      	ble.n	10a38 <floor+0x90>
   10a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10a2e:	d01b      	beq.n	10a68 <floor+0xc0>
   10a30:	ed9d 0b00 	vldr	d0, [sp]
   10a34:	b002      	add	sp, #8
   10a36:	bd10      	pop	{r4, pc}
   10a38:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   10a3c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   10a40:	fa2e f202 	lsr.w	r2, lr, r2
   10a44:	4210      	tst	r0, r2
   10a46:	d0f3      	beq.n	10a30 <floor+0x88>
   10a48:	ed9f 7b17 	vldr	d7, [pc, #92]	; 10aa8 <floor+0x100>
   10a4c:	ed9d 6b00 	vldr	d6, [sp]
   10a50:	ee36 7b07 	vadd.f64	d7, d6, d7
   10a54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a5c:	ddcf      	ble.n	109fe <floor+0x56>
   10a5e:	2900      	cmp	r1, #0
   10a60:	db13      	blt.n	10a8a <floor+0xe2>
   10a62:	ea2c 0002 	bic.w	r0, ip, r2
   10a66:	e7ca      	b.n	109fe <floor+0x56>
   10a68:	ed9d 7b00 	vldr	d7, [sp]
   10a6c:	ee37 0b07 	vadd.f64	d0, d7, d7
   10a70:	e7e0      	b.n	10a34 <floor+0x8c>
   10a72:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10a76:	4301      	orrs	r1, r0
   10a78:	4b0e      	ldr	r3, [pc, #56]	; (10ab4 <floor+0x10c>)
   10a7a:	2900      	cmp	r1, #0
   10a7c:	f04f 0000 	mov.w	r0, #0
   10a80:	bf0c      	ite	eq
   10a82:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   10a86:	4619      	movne	r1, r3
   10a88:	e7b9      	b.n	109fe <floor+0x56>
   10a8a:	2b14      	cmp	r3, #20
   10a8c:	d009      	beq.n	10aa2 <floor+0xfa>
   10a8e:	2401      	movs	r4, #1
   10a90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   10a94:	fa04 f303 	lsl.w	r3, r4, r3
   10a98:	449c      	add	ip, r3
   10a9a:	4560      	cmp	r0, ip
   10a9c:	bf88      	it	hi
   10a9e:	1909      	addhi	r1, r1, r4
   10aa0:	e7df      	b.n	10a62 <floor+0xba>
   10aa2:	3101      	adds	r1, #1
   10aa4:	e7dd      	b.n	10a62 <floor+0xba>
   10aa6:	bf00      	nop
   10aa8:	8800759c 	.word	0x8800759c
   10aac:	7e37e43c 	.word	0x7e37e43c
   10ab0:	000fffff 	.word	0x000fffff
   10ab4:	bff00000 	.word	0xbff00000

00010ab8 <scalbn>:
   10ab8:	ec53 2b10 	vmov	r2, r3, d0
   10abc:	b410      	push	{r4}
   10abe:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10ac2:	4619      	mov	r1, r3
   10ac4:	bb74      	cbnz	r4, 10b24 <scalbn+0x6c>
   10ac6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   10aca:	4311      	orrs	r1, r2
   10acc:	d027      	beq.n	10b1e <scalbn+0x66>
   10ace:	ed9f 7b30 	vldr	d7, [pc, #192]	; 10b90 <scalbn+0xd8>
   10ad2:	493b      	ldr	r1, [pc, #236]	; (10bc0 <scalbn+0x108>)
   10ad4:	ee20 7b07 	vmul.f64	d7, d0, d7
   10ad8:	4288      	cmp	r0, r1
   10ada:	ec53 2b17 	vmov	r2, r3, d7
   10ade:	db43      	blt.n	10b68 <scalbn+0xb0>
   10ae0:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10ae4:	4619      	mov	r1, r3
   10ae6:	3c36      	subs	r4, #54	; 0x36
   10ae8:	f24c 3c50 	movw	ip, #50000	; 0xc350
   10aec:	4560      	cmp	r0, ip
   10aee:	dc22      	bgt.n	10b36 <scalbn+0x7e>
   10af0:	4420      	add	r0, r4
   10af2:	f240 74fe 	movw	r4, #2046	; 0x7fe
   10af6:	42a0      	cmp	r0, r4
   10af8:	dc1d      	bgt.n	10b36 <scalbn+0x7e>
   10afa:	2800      	cmp	r0, #0
   10afc:	dc29      	bgt.n	10b52 <scalbn+0x9a>
   10afe:	f110 0f35 	cmn.w	r0, #53	; 0x35
   10b02:	db38      	blt.n	10b76 <scalbn+0xbe>
   10b04:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10b08:	3036      	adds	r0, #54	; 0x36
   10b0a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10b0e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 10b98 <scalbn+0xe0>
   10b12:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10b16:	ec43 2b10 	vmov	d0, r2, r3
   10b1a:	ee20 0b07 	vmul.f64	d0, d0, d7
   10b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b22:	4770      	bx	lr
   10b24:	f240 7cff 	movw	ip, #2047	; 0x7ff
   10b28:	4564      	cmp	r4, ip
   10b2a:	d1dd      	bne.n	10ae8 <scalbn+0x30>
   10b2c:	ee30 0b00 	vadd.f64	d0, d0, d0
   10b30:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b34:	4770      	bx	lr
   10b36:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 10ba0 <scalbn+0xe8>
   10b3a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 10ba8 <scalbn+0xf0>
   10b3e:	eeb0 0b47 	vmov.f64	d0, d7
   10b42:	2b00      	cmp	r3, #0
   10b44:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b48:	fe27 7b05 	vselge.f64	d7, d7, d5
   10b4c:	ee27 0b00 	vmul.f64	d0, d7, d0
   10b50:	4770      	bx	lr
   10b52:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10b56:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10b5a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10b5e:	ec43 2b10 	vmov	d0, r2, r3
   10b62:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b66:	4770      	bx	lr
   10b68:	ed9f 0b11 	vldr	d0, [pc, #68]	; 10bb0 <scalbn+0xf8>
   10b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10b70:	ee27 0b00 	vmul.f64	d0, d7, d0
   10b74:	4770      	bx	lr
   10b76:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 10bb0 <scalbn+0xf8>
   10b7a:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 10bb8 <scalbn+0x100>
   10b7e:	eeb0 0b47 	vmov.f64	d0, d7
   10b82:	2b00      	cmp	r3, #0
   10b84:	fe27 7b05 	vselge.f64	d7, d7, d5
   10b88:	ee27 0b00 	vmul.f64	d0, d7, d0
   10b8c:	e7c7      	b.n	10b1e <scalbn+0x66>
   10b8e:	bf00      	nop
   10b90:	00000000 	.word	0x00000000
   10b94:	43500000 	.word	0x43500000
   10b98:	00000000 	.word	0x00000000
   10b9c:	3c900000 	.word	0x3c900000
   10ba0:	8800759c 	.word	0x8800759c
   10ba4:	7e37e43c 	.word	0x7e37e43c
   10ba8:	8800759c 	.word	0x8800759c
   10bac:	fe37e43c 	.word	0xfe37e43c
   10bb0:	c2f8f359 	.word	0xc2f8f359
   10bb4:	01a56e1f 	.word	0x01a56e1f
   10bb8:	c2f8f359 	.word	0xc2f8f359
   10bbc:	81a56e1f 	.word	0x81a56e1f
   10bc0:	ffff3cb0 	.word	0xffff3cb0

00010bc4 <__aeabi_atexit>:
   10bc4:	4603      	mov	r3, r0
   10bc6:	4608      	mov	r0, r1
   10bc8:	4619      	mov	r1, r3
   10bca:	f000 bcc1 	b.w	11550 <__cxa_atexit>
   10bce:	bf00      	nop

00010bd0 <__utoa>:
   10bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bd2:	4f25      	ldr	r7, [pc, #148]	; (10c68 <__utoa+0x98>)
   10bd4:	f1a2 0e02 	sub.w	lr, r2, #2
   10bd8:	4616      	mov	r6, r2
   10bda:	4605      	mov	r5, r0
   10bdc:	460c      	mov	r4, r1
   10bde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10be0:	b08b      	sub	sp, #44	; 0x2c
   10be2:	46ec      	mov	ip, sp
   10be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10be8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10bea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10bee:	e897 0003 	ldmia.w	r7, {r0, r1}
   10bf2:	f84c 0b04 	str.w	r0, [ip], #4
   10bf6:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   10bfa:	f88c 1000 	strb.w	r1, [ip]
   10bfe:	d82e      	bhi.n	10c5e <__utoa+0x8e>
   10c00:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   10c04:	4670      	mov	r0, lr
   10c06:	f04f 0c00 	mov.w	ip, #0
   10c0a:	fbb5 f2f6 	udiv	r2, r5, r6
   10c0e:	fb06 5312 	mls	r3, r6, r2, r5
   10c12:	3328      	adds	r3, #40	; 0x28
   10c14:	446b      	add	r3, sp
   10c16:	4661      	mov	r1, ip
   10c18:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   10c1c:	f800 cf01 	strb.w	ip, [r0, #1]!
   10c20:	462b      	mov	r3, r5
   10c22:	429e      	cmp	r6, r3
   10c24:	f101 0c01 	add.w	ip, r1, #1
   10c28:	4615      	mov	r5, r2
   10c2a:	d9ee      	bls.n	10c0a <__utoa+0x3a>
   10c2c:	2300      	movs	r3, #0
   10c2e:	f804 300c 	strb.w	r3, [r4, ip]
   10c32:	b189      	cbz	r1, 10c58 <__utoa+0x88>
   10c34:	44a4      	add	ip, r4
   10c36:	4672      	mov	r2, lr
   10c38:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10c3c:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   10c40:	f88e 5000 	strb.w	r5, [lr]
   10c44:	eba4 030e 	sub.w	r3, r4, lr
   10c48:	3202      	adds	r2, #2
   10c4a:	3b01      	subs	r3, #1
   10c4c:	1b12      	subs	r2, r2, r4
   10c4e:	440b      	add	r3, r1
   10c50:	429a      	cmp	r2, r3
   10c52:	f88c 0000 	strb.w	r0, [ip]
   10c56:	dbee      	blt.n	10c36 <__utoa+0x66>
   10c58:	4620      	mov	r0, r4
   10c5a:	b00b      	add	sp, #44	; 0x2c
   10c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c5e:	2300      	movs	r3, #0
   10c60:	4618      	mov	r0, r3
   10c62:	7023      	strb	r3, [r4, #0]
   10c64:	b00b      	add	sp, #44	; 0x2c
   10c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c68:	20002744 	.word	0x20002744

00010c6c <strncmp>:
   10c6c:	2a00      	cmp	r2, #0
   10c6e:	d03e      	beq.n	10cee <strncmp+0x82>
   10c70:	ea40 0301 	orr.w	r3, r0, r1
   10c74:	079b      	lsls	r3, r3, #30
   10c76:	b530      	push	{r4, r5, lr}
   10c78:	4684      	mov	ip, r0
   10c7a:	d12f      	bne.n	10cdc <strncmp+0x70>
   10c7c:	2a03      	cmp	r2, #3
   10c7e:	d92d      	bls.n	10cdc <strncmp+0x70>
   10c80:	460b      	mov	r3, r1
   10c82:	e008      	b.n	10c96 <strncmp+0x2a>
   10c84:	3a04      	subs	r2, #4
   10c86:	4684      	mov	ip, r0
   10c88:	4619      	mov	r1, r3
   10c8a:	d025      	beq.n	10cd8 <strncmp+0x6c>
   10c8c:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   10c90:	d122      	bne.n	10cd8 <strncmp+0x6c>
   10c92:	2a03      	cmp	r2, #3
   10c94:	d922      	bls.n	10cdc <strncmp+0x70>
   10c96:	6804      	ldr	r4, [r0, #0]
   10c98:	4619      	mov	r1, r3
   10c9a:	f853 5b04 	ldr.w	r5, [r3], #4
   10c9e:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   10ca2:	42ac      	cmp	r4, r5
   10ca4:	4684      	mov	ip, r0
   10ca6:	ea2e 0e04 	bic.w	lr, lr, r4
   10caa:	f100 0004 	add.w	r0, r0, #4
   10cae:	d0e9      	beq.n	10c84 <strncmp+0x18>
   10cb0:	f89c 0000 	ldrb.w	r0, [ip]
   10cb4:	780c      	ldrb	r4, [r1, #0]
   10cb6:	42a0      	cmp	r0, r4
   10cb8:	d11b      	bne.n	10cf2 <strncmp+0x86>
   10cba:	46e6      	mov	lr, ip
   10cbc:	b168      	cbz	r0, 10cda <strncmp+0x6e>
   10cbe:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10cc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   10cc6:	eba2 030e 	sub.w	r3, r2, lr
   10cca:	42a0      	cmp	r0, r4
   10ccc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10cd0:	d10f      	bne.n	10cf2 <strncmp+0x86>
   10cd2:	eb1c 0303 	adds.w	r3, ip, r3
   10cd6:	d1f1      	bne.n	10cbc <strncmp+0x50>
   10cd8:	2000      	movs	r0, #0
   10cda:	bd30      	pop	{r4, r5, pc}
   10cdc:	f89c 0000 	ldrb.w	r0, [ip]
   10ce0:	780c      	ldrb	r4, [r1, #0]
   10ce2:	4284      	cmp	r4, r0
   10ce4:	d105      	bne.n	10cf2 <strncmp+0x86>
   10ce6:	2a01      	cmp	r2, #1
   10ce8:	d0f6      	beq.n	10cd8 <strncmp+0x6c>
   10cea:	46e6      	mov	lr, ip
   10cec:	e7e6      	b.n	10cbc <strncmp+0x50>
   10cee:	4610      	mov	r0, r2
   10cf0:	4770      	bx	lr
   10cf2:	1b00      	subs	r0, r0, r4
   10cf4:	bd30      	pop	{r4, r5, pc}
   10cf6:	bf00      	nop

00010cf8 <strncpy>:
   10cf8:	ea40 0301 	orr.w	r3, r0, r1
   10cfc:	079b      	lsls	r3, r3, #30
   10cfe:	b530      	push	{r4, r5, lr}
   10d00:	d101      	bne.n	10d06 <strncpy+0xe>
   10d02:	2a03      	cmp	r2, #3
   10d04:	d80f      	bhi.n	10d26 <strncpy+0x2e>
   10d06:	4684      	mov	ip, r0
   10d08:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   10d0c:	e007      	b.n	10d1e <strncpy+0x26>
   10d0e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   10d12:	f803 1b01 	strb.w	r1, [r3], #1
   10d16:	1e54      	subs	r4, r2, #1
   10d18:	b1c1      	cbz	r1, 10d4c <strncpy+0x54>
   10d1a:	469c      	mov	ip, r3
   10d1c:	4622      	mov	r2, r4
   10d1e:	4663      	mov	r3, ip
   10d20:	2a00      	cmp	r2, #0
   10d22:	d1f4      	bne.n	10d0e <strncpy+0x16>
   10d24:	bd30      	pop	{r4, r5, pc}
   10d26:	460b      	mov	r3, r1
   10d28:	4684      	mov	ip, r0
   10d2a:	4619      	mov	r1, r3
   10d2c:	f853 5b04 	ldr.w	r5, [r3], #4
   10d30:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10d34:	ea24 0405 	bic.w	r4, r4, r5
   10d38:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10d3c:	d1e4      	bne.n	10d08 <strncpy+0x10>
   10d3e:	3a04      	subs	r2, #4
   10d40:	2a03      	cmp	r2, #3
   10d42:	f84c 5b04 	str.w	r5, [ip], #4
   10d46:	4619      	mov	r1, r3
   10d48:	d8ef      	bhi.n	10d2a <strncpy+0x32>
   10d4a:	e7dd      	b.n	10d08 <strncpy+0x10>
   10d4c:	4494      	add	ip, r2
   10d4e:	2c00      	cmp	r4, #0
   10d50:	d0e8      	beq.n	10d24 <strncpy+0x2c>
   10d52:	f803 1b01 	strb.w	r1, [r3], #1
   10d56:	4563      	cmp	r3, ip
   10d58:	d1fb      	bne.n	10d52 <strncpy+0x5a>
   10d5a:	bd30      	pop	{r4, r5, pc}

00010d5c <itoa>:
   10d5c:	1e93      	subs	r3, r2, #2
   10d5e:	2b22      	cmp	r3, #34	; 0x22
   10d60:	b510      	push	{r4, lr}
   10d62:	460c      	mov	r4, r1
   10d64:	d80c      	bhi.n	10d80 <itoa+0x24>
   10d66:	2a0a      	cmp	r2, #10
   10d68:	d003      	beq.n	10d72 <itoa+0x16>
   10d6a:	f7ff ff31 	bl	10bd0 <__utoa>
   10d6e:	4620      	mov	r0, r4
   10d70:	bd10      	pop	{r4, pc}
   10d72:	2800      	cmp	r0, #0
   10d74:	daf9      	bge.n	10d6a <itoa+0xe>
   10d76:	232d      	movs	r3, #45	; 0x2d
   10d78:	f801 3b01 	strb.w	r3, [r1], #1
   10d7c:	4240      	negs	r0, r0
   10d7e:	e7f4      	b.n	10d6a <itoa+0xe>
   10d80:	2300      	movs	r3, #0
   10d82:	700b      	strb	r3, [r1, #0]
   10d84:	4618      	mov	r0, r3
   10d86:	bd10      	pop	{r4, pc}

00010d88 <__errno>:
   10d88:	4b01      	ldr	r3, [pc, #4]	; (10d90 <__errno+0x8>)
   10d8a:	6818      	ldr	r0, [r3, #0]
   10d8c:	4770      	bx	lr
   10d8e:	bf00      	nop
   10d90:	20003974 	.word	0x20003974

00010d94 <malloc>:
   10d94:	4b02      	ldr	r3, [pc, #8]	; (10da0 <malloc+0xc>)
   10d96:	4601      	mov	r1, r0
   10d98:	6818      	ldr	r0, [r3, #0]
   10d9a:	f000 b80b 	b.w	10db4 <_malloc_r>
   10d9e:	bf00      	nop
   10da0:	20003974 	.word	0x20003974

00010da4 <free>:
   10da4:	4b02      	ldr	r3, [pc, #8]	; (10db0 <free+0xc>)
   10da6:	4601      	mov	r1, r0
   10da8:	6818      	ldr	r0, [r3, #0]
   10daa:	f001 bc53 	b.w	12654 <_free_r>
   10dae:	bf00      	nop
   10db0:	20003974 	.word	0x20003974

00010db4 <_malloc_r>:
   10db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10db8:	f101 060b 	add.w	r6, r1, #11
   10dbc:	2e16      	cmp	r6, #22
   10dbe:	b083      	sub	sp, #12
   10dc0:	4604      	mov	r4, r0
   10dc2:	d824      	bhi.n	10e0e <_malloc_r+0x5a>
   10dc4:	2910      	cmp	r1, #16
   10dc6:	f200 80ba 	bhi.w	10f3e <_malloc_r+0x18a>
   10dca:	f000 fc5d 	bl	11688 <__malloc_lock>
   10dce:	2610      	movs	r6, #16
   10dd0:	2218      	movs	r2, #24
   10dd2:	2002      	movs	r0, #2
   10dd4:	4fb5      	ldr	r7, [pc, #724]	; (110ac <_malloc_r+0x2f8>)
   10dd6:	443a      	add	r2, r7
   10dd8:	f1a2 0108 	sub.w	r1, r2, #8
   10ddc:	6853      	ldr	r3, [r2, #4]
   10dde:	428b      	cmp	r3, r1
   10de0:	f000 80ba 	beq.w	10f58 <_malloc_r+0x1a4>
   10de4:	685a      	ldr	r2, [r3, #4]
   10de6:	68d9      	ldr	r1, [r3, #12]
   10de8:	f022 0203 	bic.w	r2, r2, #3
   10dec:	441a      	add	r2, r3
   10dee:	689d      	ldr	r5, [r3, #8]
   10df0:	60e9      	str	r1, [r5, #12]
   10df2:	608d      	str	r5, [r1, #8]
   10df4:	6851      	ldr	r1, [r2, #4]
   10df6:	f041 0101 	orr.w	r1, r1, #1
   10dfa:	4620      	mov	r0, r4
   10dfc:	6051      	str	r1, [r2, #4]
   10dfe:	f103 0508 	add.w	r5, r3, #8
   10e02:	f000 fc47 	bl	11694 <__malloc_unlock>
   10e06:	4628      	mov	r0, r5
   10e08:	b003      	add	sp, #12
   10e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e0e:	f036 0607 	bics.w	r6, r6, #7
   10e12:	f100 8094 	bmi.w	10f3e <_malloc_r+0x18a>
   10e16:	42b1      	cmp	r1, r6
   10e18:	f200 8091 	bhi.w	10f3e <_malloc_r+0x18a>
   10e1c:	f000 fc34 	bl	11688 <__malloc_lock>
   10e20:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   10e24:	f0c0 819a 	bcc.w	1115c <_malloc_r+0x3a8>
   10e28:	0a73      	lsrs	r3, r6, #9
   10e2a:	f000 808f 	beq.w	10f4c <_malloc_r+0x198>
   10e2e:	2b04      	cmp	r3, #4
   10e30:	f200 816f 	bhi.w	11112 <_malloc_r+0x35e>
   10e34:	09b3      	lsrs	r3, r6, #6
   10e36:	f103 0039 	add.w	r0, r3, #57	; 0x39
   10e3a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   10e3e:	00c3      	lsls	r3, r0, #3
   10e40:	4f9a      	ldr	r7, [pc, #616]	; (110ac <_malloc_r+0x2f8>)
   10e42:	443b      	add	r3, r7
   10e44:	f1a3 0508 	sub.w	r5, r3, #8
   10e48:	685b      	ldr	r3, [r3, #4]
   10e4a:	429d      	cmp	r5, r3
   10e4c:	d106      	bne.n	10e5c <_malloc_r+0xa8>
   10e4e:	e00c      	b.n	10e6a <_malloc_r+0xb6>
   10e50:	2900      	cmp	r1, #0
   10e52:	f280 8127 	bge.w	110a4 <_malloc_r+0x2f0>
   10e56:	68db      	ldr	r3, [r3, #12]
   10e58:	429d      	cmp	r5, r3
   10e5a:	d006      	beq.n	10e6a <_malloc_r+0xb6>
   10e5c:	685a      	ldr	r2, [r3, #4]
   10e5e:	f022 0203 	bic.w	r2, r2, #3
   10e62:	1b91      	subs	r1, r2, r6
   10e64:	290f      	cmp	r1, #15
   10e66:	ddf3      	ble.n	10e50 <_malloc_r+0x9c>
   10e68:	4660      	mov	r0, ip
   10e6a:	693d      	ldr	r5, [r7, #16]
   10e6c:	f8df c250 	ldr.w	ip, [pc, #592]	; 110c0 <_malloc_r+0x30c>
   10e70:	4565      	cmp	r5, ip
   10e72:	d07c      	beq.n	10f6e <_malloc_r+0x1ba>
   10e74:	686a      	ldr	r2, [r5, #4]
   10e76:	f022 0203 	bic.w	r2, r2, #3
   10e7a:	1b93      	subs	r3, r2, r6
   10e7c:	2b0f      	cmp	r3, #15
   10e7e:	f300 817b 	bgt.w	11178 <_malloc_r+0x3c4>
   10e82:	2b00      	cmp	r3, #0
   10e84:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10e88:	f280 816c 	bge.w	11164 <_malloc_r+0x3b0>
   10e8c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10e90:	f080 811a 	bcs.w	110c8 <_malloc_r+0x314>
   10e94:	08d3      	lsrs	r3, r2, #3
   10e96:	6879      	ldr	r1, [r7, #4]
   10e98:	3301      	adds	r3, #1
   10e9a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   10e9e:	2201      	movs	r2, #1
   10ea0:	fa02 f20e 	lsl.w	r2, r2, lr
   10ea4:	430a      	orrs	r2, r1
   10ea6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   10eaa:	f8c5 e008 	str.w	lr, [r5, #8]
   10eae:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   10eb2:	3908      	subs	r1, #8
   10eb4:	60e9      	str	r1, [r5, #12]
   10eb6:	607a      	str	r2, [r7, #4]
   10eb8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   10ebc:	f8ce 500c 	str.w	r5, [lr, #12]
   10ec0:	1083      	asrs	r3, r0, #2
   10ec2:	2101      	movs	r1, #1
   10ec4:	4099      	lsls	r1, r3
   10ec6:	4291      	cmp	r1, r2
   10ec8:	d857      	bhi.n	10f7a <_malloc_r+0x1c6>
   10eca:	4211      	tst	r1, r2
   10ecc:	d106      	bne.n	10edc <_malloc_r+0x128>
   10ece:	f020 0003 	bic.w	r0, r0, #3
   10ed2:	0049      	lsls	r1, r1, #1
   10ed4:	4211      	tst	r1, r2
   10ed6:	f100 0004 	add.w	r0, r0, #4
   10eda:	d0fa      	beq.n	10ed2 <_malloc_r+0x11e>
   10edc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   10ee0:	464d      	mov	r5, r9
   10ee2:	4686      	mov	lr, r0
   10ee4:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10ee8:	4545      	cmp	r5, r8
   10eea:	d108      	bne.n	10efe <_malloc_r+0x14a>
   10eec:	e11d      	b.n	1112a <_malloc_r+0x376>
   10eee:	2b00      	cmp	r3, #0
   10ef0:	f280 8124 	bge.w	1113c <_malloc_r+0x388>
   10ef4:	f8d8 800c 	ldr.w	r8, [r8, #12]
   10ef8:	4545      	cmp	r5, r8
   10efa:	f000 8116 	beq.w	1112a <_malloc_r+0x376>
   10efe:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10f02:	f022 0203 	bic.w	r2, r2, #3
   10f06:	1b93      	subs	r3, r2, r6
   10f08:	2b0f      	cmp	r3, #15
   10f0a:	ddf0      	ble.n	10eee <_malloc_r+0x13a>
   10f0c:	4620      	mov	r0, r4
   10f0e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   10f12:	eb08 0106 	add.w	r1, r8, r6
   10f16:	f046 0601 	orr.w	r6, r6, #1
   10f1a:	f8c8 6004 	str.w	r6, [r8, #4]
   10f1e:	60ec      	str	r4, [r5, #12]
   10f20:	60a5      	str	r5, [r4, #8]
   10f22:	f043 0401 	orr.w	r4, r3, #1
   10f26:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10f2a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10f2e:	604c      	str	r4, [r1, #4]
   10f30:	f848 3002 	str.w	r3, [r8, r2]
   10f34:	f000 fbae 	bl	11694 <__malloc_unlock>
   10f38:	f108 0508 	add.w	r5, r8, #8
   10f3c:	e002      	b.n	10f44 <_malloc_r+0x190>
   10f3e:	230c      	movs	r3, #12
   10f40:	6023      	str	r3, [r4, #0]
   10f42:	2500      	movs	r5, #0
   10f44:	4628      	mov	r0, r5
   10f46:	b003      	add	sp, #12
   10f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
   10f50:	2040      	movs	r0, #64	; 0x40
   10f52:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   10f56:	e773      	b.n	10e40 <_malloc_r+0x8c>
   10f58:	68d3      	ldr	r3, [r2, #12]
   10f5a:	429a      	cmp	r2, r3
   10f5c:	bf08      	it	eq
   10f5e:	3002      	addeq	r0, #2
   10f60:	f47f af40 	bne.w	10de4 <_malloc_r+0x30>
   10f64:	693d      	ldr	r5, [r7, #16]
   10f66:	f8df c158 	ldr.w	ip, [pc, #344]	; 110c0 <_malloc_r+0x30c>
   10f6a:	4565      	cmp	r5, ip
   10f6c:	d182      	bne.n	10e74 <_malloc_r+0xc0>
   10f6e:	687a      	ldr	r2, [r7, #4]
   10f70:	1083      	asrs	r3, r0, #2
   10f72:	2101      	movs	r1, #1
   10f74:	4099      	lsls	r1, r3
   10f76:	4291      	cmp	r1, r2
   10f78:	d9a7      	bls.n	10eca <_malloc_r+0x116>
   10f7a:	68bd      	ldr	r5, [r7, #8]
   10f7c:	686b      	ldr	r3, [r5, #4]
   10f7e:	f023 0903 	bic.w	r9, r3, #3
   10f82:	454e      	cmp	r6, r9
   10f84:	d803      	bhi.n	10f8e <_malloc_r+0x1da>
   10f86:	eba9 0306 	sub.w	r3, r9, r6
   10f8a:	2b0f      	cmp	r3, #15
   10f8c:	dc7a      	bgt.n	11084 <_malloc_r+0x2d0>
   10f8e:	f8df b134 	ldr.w	fp, [pc, #308]	; 110c4 <_malloc_r+0x310>
   10f92:	4b47      	ldr	r3, [pc, #284]	; (110b0 <_malloc_r+0x2fc>)
   10f94:	f8db 2000 	ldr.w	r2, [fp]
   10f98:	681b      	ldr	r3, [r3, #0]
   10f9a:	3201      	adds	r2, #1
   10f9c:	4433      	add	r3, r6
   10f9e:	eb05 0a09 	add.w	sl, r5, r9
   10fa2:	f000 8133 	beq.w	1120c <_malloc_r+0x458>
   10fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10faa:	330f      	adds	r3, #15
   10fac:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   10fb0:	f028 080f 	bic.w	r8, r8, #15
   10fb4:	4641      	mov	r1, r8
   10fb6:	4620      	mov	r0, r4
   10fb8:	f001 fcba 	bl	12930 <_sbrk_r>
   10fbc:	1c41      	adds	r1, r0, #1
   10fbe:	4602      	mov	r2, r0
   10fc0:	f000 80f3 	beq.w	111aa <_malloc_r+0x3f6>
   10fc4:	4582      	cmp	sl, r0
   10fc6:	f200 80ee 	bhi.w	111a6 <_malloc_r+0x3f2>
   10fca:	4b3a      	ldr	r3, [pc, #232]	; (110b4 <_malloc_r+0x300>)
   10fcc:	6819      	ldr	r1, [r3, #0]
   10fce:	4441      	add	r1, r8
   10fd0:	6019      	str	r1, [r3, #0]
   10fd2:	4608      	mov	r0, r1
   10fd4:	f000 814e 	beq.w	11274 <_malloc_r+0x4c0>
   10fd8:	f8db 1000 	ldr.w	r1, [fp]
   10fdc:	9301      	str	r3, [sp, #4]
   10fde:	3101      	adds	r1, #1
   10fe0:	bf1b      	ittet	ne
   10fe2:	eba2 010a 	subne.w	r1, r2, sl
   10fe6:	1809      	addne	r1, r1, r0
   10fe8:	f8cb 2000 	streq.w	r2, [fp]
   10fec:	6019      	strne	r1, [r3, #0]
   10fee:	f012 0b07 	ands.w	fp, r2, #7
   10ff2:	f000 8117 	beq.w	11224 <_malloc_r+0x470>
   10ff6:	f1cb 0108 	rsb	r1, fp, #8
   10ffa:	440a      	add	r2, r1
   10ffc:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   11000:	4490      	add	r8, r2
   11002:	3108      	adds	r1, #8
   11004:	eba1 0108 	sub.w	r1, r1, r8
   11008:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1100c:	4651      	mov	r1, sl
   1100e:	4620      	mov	r0, r4
   11010:	9200      	str	r2, [sp, #0]
   11012:	f001 fc8d 	bl	12930 <_sbrk_r>
   11016:	1c42      	adds	r2, r0, #1
   11018:	e9dd 2300 	ldrd	r2, r3, [sp]
   1101c:	f000 814f 	beq.w	112be <_malloc_r+0x50a>
   11020:	1a80      	subs	r0, r0, r2
   11022:	eb00 080a 	add.w	r8, r0, sl
   11026:	6819      	ldr	r1, [r3, #0]
   11028:	60ba      	str	r2, [r7, #8]
   1102a:	f048 0001 	orr.w	r0, r8, #1
   1102e:	4451      	add	r1, sl
   11030:	42bd      	cmp	r5, r7
   11032:	6050      	str	r0, [r2, #4]
   11034:	6019      	str	r1, [r3, #0]
   11036:	f000 8129 	beq.w	1128c <_malloc_r+0x4d8>
   1103a:	f1b9 0f0f 	cmp.w	r9, #15
   1103e:	f240 8127 	bls.w	11290 <_malloc_r+0x4dc>
   11042:	6868      	ldr	r0, [r5, #4]
   11044:	f1a9 0c0c 	sub.w	ip, r9, #12
   11048:	f02c 0c07 	bic.w	ip, ip, #7
   1104c:	f000 0001 	and.w	r0, r0, #1
   11050:	ea40 000c 	orr.w	r0, r0, ip
   11054:	6068      	str	r0, [r5, #4]
   11056:	f04f 0e05 	mov.w	lr, #5
   1105a:	eb05 000c 	add.w	r0, r5, ip
   1105e:	f1bc 0f0f 	cmp.w	ip, #15
   11062:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   11066:	f200 8132 	bhi.w	112ce <_malloc_r+0x51a>
   1106a:	6850      	ldr	r0, [r2, #4]
   1106c:	4615      	mov	r5, r2
   1106e:	4b12      	ldr	r3, [pc, #72]	; (110b8 <_malloc_r+0x304>)
   11070:	681a      	ldr	r2, [r3, #0]
   11072:	428a      	cmp	r2, r1
   11074:	bf38      	it	cc
   11076:	6019      	strcc	r1, [r3, #0]
   11078:	4b10      	ldr	r3, [pc, #64]	; (110bc <_malloc_r+0x308>)
   1107a:	681a      	ldr	r2, [r3, #0]
   1107c:	428a      	cmp	r2, r1
   1107e:	bf38      	it	cc
   11080:	6019      	strcc	r1, [r3, #0]
   11082:	e094      	b.n	111ae <_malloc_r+0x3fa>
   11084:	19aa      	adds	r2, r5, r6
   11086:	f043 0301 	orr.w	r3, r3, #1
   1108a:	f046 0601 	orr.w	r6, r6, #1
   1108e:	606e      	str	r6, [r5, #4]
   11090:	4620      	mov	r0, r4
   11092:	60ba      	str	r2, [r7, #8]
   11094:	6053      	str	r3, [r2, #4]
   11096:	f000 fafd 	bl	11694 <__malloc_unlock>
   1109a:	3508      	adds	r5, #8
   1109c:	4628      	mov	r0, r5
   1109e:	b003      	add	sp, #12
   110a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110a4:	68d9      	ldr	r1, [r3, #12]
   110a6:	441a      	add	r2, r3
   110a8:	e6a1      	b.n	10dee <_malloc_r+0x3a>
   110aa:	bf00      	nop
   110ac:	20003558 	.word	0x20003558
   110b0:	20004e94 	.word	0x20004e94
   110b4:	20004e64 	.word	0x20004e64
   110b8:	20004e8c 	.word	0x20004e8c
   110bc:	20004e90 	.word	0x20004e90
   110c0:	20003560 	.word	0x20003560
   110c4:	20003960 	.word	0x20003960
   110c8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   110cc:	ea4f 2352 	mov.w	r3, r2, lsr #9
   110d0:	d363      	bcc.n	1119a <_malloc_r+0x3e6>
   110d2:	2b14      	cmp	r3, #20
   110d4:	f200 80b7 	bhi.w	11246 <_malloc_r+0x492>
   110d8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   110dc:	00c9      	lsls	r1, r1, #3
   110de:	335b      	adds	r3, #91	; 0x5b
   110e0:	eb07 0e01 	add.w	lr, r7, r1
   110e4:	5879      	ldr	r1, [r7, r1]
   110e6:	f1ae 0e08 	sub.w	lr, lr, #8
   110ea:	458e      	cmp	lr, r1
   110ec:	f000 8091 	beq.w	11212 <_malloc_r+0x45e>
   110f0:	684b      	ldr	r3, [r1, #4]
   110f2:	f023 0303 	bic.w	r3, r3, #3
   110f6:	4293      	cmp	r3, r2
   110f8:	d902      	bls.n	11100 <_malloc_r+0x34c>
   110fa:	6889      	ldr	r1, [r1, #8]
   110fc:	458e      	cmp	lr, r1
   110fe:	d1f7      	bne.n	110f0 <_malloc_r+0x33c>
   11100:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   11104:	687a      	ldr	r2, [r7, #4]
   11106:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   1110a:	f8ce 5008 	str.w	r5, [lr, #8]
   1110e:	60cd      	str	r5, [r1, #12]
   11110:	e6d6      	b.n	10ec0 <_malloc_r+0x10c>
   11112:	2b14      	cmp	r3, #20
   11114:	d959      	bls.n	111ca <_malloc_r+0x416>
   11116:	2b54      	cmp	r3, #84	; 0x54
   11118:	f200 809d 	bhi.w	11256 <_malloc_r+0x4a2>
   1111c:	0b33      	lsrs	r3, r6, #12
   1111e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   11122:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   11126:	00c3      	lsls	r3, r0, #3
   11128:	e68a      	b.n	10e40 <_malloc_r+0x8c>
   1112a:	f10e 0e01 	add.w	lr, lr, #1
   1112e:	f01e 0f03 	tst.w	lr, #3
   11132:	f105 0508 	add.w	r5, r5, #8
   11136:	f47f aed5 	bne.w	10ee4 <_malloc_r+0x130>
   1113a:	e051      	b.n	111e0 <_malloc_r+0x42c>
   1113c:	4442      	add	r2, r8
   1113e:	4645      	mov	r5, r8
   11140:	6853      	ldr	r3, [r2, #4]
   11142:	f8d8 100c 	ldr.w	r1, [r8, #12]
   11146:	f043 0301 	orr.w	r3, r3, #1
   1114a:	6053      	str	r3, [r2, #4]
   1114c:	f855 3f08 	ldr.w	r3, [r5, #8]!
   11150:	4620      	mov	r0, r4
   11152:	60d9      	str	r1, [r3, #12]
   11154:	608b      	str	r3, [r1, #8]
   11156:	f000 fa9d 	bl	11694 <__malloc_unlock>
   1115a:	e6f3      	b.n	10f44 <_malloc_r+0x190>
   1115c:	08f0      	lsrs	r0, r6, #3
   1115e:	f106 0208 	add.w	r2, r6, #8
   11162:	e637      	b.n	10dd4 <_malloc_r+0x20>
   11164:	442a      	add	r2, r5
   11166:	4620      	mov	r0, r4
   11168:	6853      	ldr	r3, [r2, #4]
   1116a:	f043 0301 	orr.w	r3, r3, #1
   1116e:	6053      	str	r3, [r2, #4]
   11170:	3508      	adds	r5, #8
   11172:	f000 fa8f 	bl	11694 <__malloc_unlock>
   11176:	e6e5      	b.n	10f44 <_malloc_r+0x190>
   11178:	19a9      	adds	r1, r5, r6
   1117a:	4620      	mov	r0, r4
   1117c:	f046 0601 	orr.w	r6, r6, #1
   11180:	f043 0401 	orr.w	r4, r3, #1
   11184:	606e      	str	r6, [r5, #4]
   11186:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1118a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1118e:	604c      	str	r4, [r1, #4]
   11190:	50ab      	str	r3, [r5, r2]
   11192:	f000 fa7f 	bl	11694 <__malloc_unlock>
   11196:	3508      	adds	r5, #8
   11198:	e6d4      	b.n	10f44 <_malloc_r+0x190>
   1119a:	0993      	lsrs	r3, r2, #6
   1119c:	f103 0139 	add.w	r1, r3, #57	; 0x39
   111a0:	00c9      	lsls	r1, r1, #3
   111a2:	3338      	adds	r3, #56	; 0x38
   111a4:	e79c      	b.n	110e0 <_malloc_r+0x32c>
   111a6:	42bd      	cmp	r5, r7
   111a8:	d05f      	beq.n	1126a <_malloc_r+0x4b6>
   111aa:	68bd      	ldr	r5, [r7, #8]
   111ac:	6868      	ldr	r0, [r5, #4]
   111ae:	f020 0803 	bic.w	r8, r0, #3
   111b2:	4546      	cmp	r6, r8
   111b4:	eba8 0306 	sub.w	r3, r8, r6
   111b8:	d802      	bhi.n	111c0 <_malloc_r+0x40c>
   111ba:	2b0f      	cmp	r3, #15
   111bc:	f73f af62 	bgt.w	11084 <_malloc_r+0x2d0>
   111c0:	4620      	mov	r0, r4
   111c2:	f000 fa67 	bl	11694 <__malloc_unlock>
   111c6:	2500      	movs	r5, #0
   111c8:	e6bc      	b.n	10f44 <_malloc_r+0x190>
   111ca:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   111ce:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   111d2:	00c3      	lsls	r3, r0, #3
   111d4:	e634      	b.n	10e40 <_malloc_r+0x8c>
   111d6:	f859 3908 	ldr.w	r3, [r9], #-8
   111da:	454b      	cmp	r3, r9
   111dc:	f040 8096 	bne.w	1130c <_malloc_r+0x558>
   111e0:	f010 0f03 	tst.w	r0, #3
   111e4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   111e8:	d1f5      	bne.n	111d6 <_malloc_r+0x422>
   111ea:	687b      	ldr	r3, [r7, #4]
   111ec:	ea23 0301 	bic.w	r3, r3, r1
   111f0:	607b      	str	r3, [r7, #4]
   111f2:	0049      	lsls	r1, r1, #1
   111f4:	4299      	cmp	r1, r3
   111f6:	f63f aec0 	bhi.w	10f7a <_malloc_r+0x1c6>
   111fa:	b919      	cbnz	r1, 11204 <_malloc_r+0x450>
   111fc:	e6bd      	b.n	10f7a <_malloc_r+0x1c6>
   111fe:	0049      	lsls	r1, r1, #1
   11200:	f10e 0e04 	add.w	lr, lr, #4
   11204:	4219      	tst	r1, r3
   11206:	d0fa      	beq.n	111fe <_malloc_r+0x44a>
   11208:	4670      	mov	r0, lr
   1120a:	e667      	b.n	10edc <_malloc_r+0x128>
   1120c:	f103 0810 	add.w	r8, r3, #16
   11210:	e6d0      	b.n	10fb4 <_malloc_r+0x200>
   11212:	109a      	asrs	r2, r3, #2
   11214:	f04f 0801 	mov.w	r8, #1
   11218:	687b      	ldr	r3, [r7, #4]
   1121a:	fa08 f202 	lsl.w	r2, r8, r2
   1121e:	431a      	orrs	r2, r3
   11220:	607a      	str	r2, [r7, #4]
   11222:	e770      	b.n	11106 <_malloc_r+0x352>
   11224:	eb02 0108 	add.w	r1, r2, r8
   11228:	4249      	negs	r1, r1
   1122a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1122e:	4651      	mov	r1, sl
   11230:	4620      	mov	r0, r4
   11232:	9200      	str	r2, [sp, #0]
   11234:	f001 fb7c 	bl	12930 <_sbrk_r>
   11238:	1c43      	adds	r3, r0, #1
   1123a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1123e:	f47f aeef 	bne.w	11020 <_malloc_r+0x26c>
   11242:	46da      	mov	sl, fp
   11244:	e6ef      	b.n	11026 <_malloc_r+0x272>
   11246:	2b54      	cmp	r3, #84	; 0x54
   11248:	d825      	bhi.n	11296 <_malloc_r+0x4e2>
   1124a:	0b13      	lsrs	r3, r2, #12
   1124c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   11250:	00c9      	lsls	r1, r1, #3
   11252:	336e      	adds	r3, #110	; 0x6e
   11254:	e744      	b.n	110e0 <_malloc_r+0x32c>
   11256:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1125a:	d825      	bhi.n	112a8 <_malloc_r+0x4f4>
   1125c:	0bf3      	lsrs	r3, r6, #15
   1125e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   11262:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   11266:	00c3      	lsls	r3, r0, #3
   11268:	e5ea      	b.n	10e40 <_malloc_r+0x8c>
   1126a:	4b29      	ldr	r3, [pc, #164]	; (11310 <_malloc_r+0x55c>)
   1126c:	6818      	ldr	r0, [r3, #0]
   1126e:	4440      	add	r0, r8
   11270:	6018      	str	r0, [r3, #0]
   11272:	e6b1      	b.n	10fd8 <_malloc_r+0x224>
   11274:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   11278:	f1bc 0f00 	cmp.w	ip, #0
   1127c:	f47f aeac 	bne.w	10fd8 <_malloc_r+0x224>
   11280:	68bd      	ldr	r5, [r7, #8]
   11282:	44c8      	add	r8, r9
   11284:	f048 0001 	orr.w	r0, r8, #1
   11288:	6068      	str	r0, [r5, #4]
   1128a:	e6f0      	b.n	1106e <_malloc_r+0x2ba>
   1128c:	4615      	mov	r5, r2
   1128e:	e6ee      	b.n	1106e <_malloc_r+0x2ba>
   11290:	2301      	movs	r3, #1
   11292:	6053      	str	r3, [r2, #4]
   11294:	e794      	b.n	111c0 <_malloc_r+0x40c>
   11296:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1129a:	d823      	bhi.n	112e4 <_malloc_r+0x530>
   1129c:	0bd3      	lsrs	r3, r2, #15
   1129e:	f103 0178 	add.w	r1, r3, #120	; 0x78
   112a2:	00c9      	lsls	r1, r1, #3
   112a4:	3377      	adds	r3, #119	; 0x77
   112a6:	e71b      	b.n	110e0 <_malloc_r+0x32c>
   112a8:	f240 5254 	movw	r2, #1364	; 0x554
   112ac:	4293      	cmp	r3, r2
   112ae:	d823      	bhi.n	112f8 <_malloc_r+0x544>
   112b0:	0cb3      	lsrs	r3, r6, #18
   112b2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   112b6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   112ba:	00c3      	lsls	r3, r0, #3
   112bc:	e5c0      	b.n	10e40 <_malloc_r+0x8c>
   112be:	f1ab 0b08 	sub.w	fp, fp, #8
   112c2:	44d8      	add	r8, fp
   112c4:	eba8 0802 	sub.w	r8, r8, r2
   112c8:	f04f 0a00 	mov.w	sl, #0
   112cc:	e6ab      	b.n	11026 <_malloc_r+0x272>
   112ce:	f105 0108 	add.w	r1, r5, #8
   112d2:	4620      	mov	r0, r4
   112d4:	9300      	str	r3, [sp, #0]
   112d6:	f001 f9bd 	bl	12654 <_free_r>
   112da:	68bd      	ldr	r5, [r7, #8]
   112dc:	9b00      	ldr	r3, [sp, #0]
   112de:	6868      	ldr	r0, [r5, #4]
   112e0:	6819      	ldr	r1, [r3, #0]
   112e2:	e6c4      	b.n	1106e <_malloc_r+0x2ba>
   112e4:	f240 5154 	movw	r1, #1364	; 0x554
   112e8:	428b      	cmp	r3, r1
   112ea:	d80b      	bhi.n	11304 <_malloc_r+0x550>
   112ec:	0c93      	lsrs	r3, r2, #18
   112ee:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   112f2:	00c9      	lsls	r1, r1, #3
   112f4:	337c      	adds	r3, #124	; 0x7c
   112f6:	e6f3      	b.n	110e0 <_malloc_r+0x32c>
   112f8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   112fc:	207f      	movs	r0, #127	; 0x7f
   112fe:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   11302:	e59d      	b.n	10e40 <_malloc_r+0x8c>
   11304:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   11308:	237e      	movs	r3, #126	; 0x7e
   1130a:	e6e9      	b.n	110e0 <_malloc_r+0x32c>
   1130c:	687b      	ldr	r3, [r7, #4]
   1130e:	e770      	b.n	111f2 <_malloc_r+0x43e>
   11310:	20004e64 	.word	0x20004e64

00011314 <memcmp>:
   11314:	2a03      	cmp	r2, #3
   11316:	b570      	push	{r4, r5, r6, lr}
   11318:	d914      	bls.n	11344 <memcmp+0x30>
   1131a:	ea40 0301 	orr.w	r3, r0, r1
   1131e:	079b      	lsls	r3, r3, #30
   11320:	d122      	bne.n	11368 <memcmp+0x54>
   11322:	4604      	mov	r4, r0
   11324:	460b      	mov	r3, r1
   11326:	4619      	mov	r1, r3
   11328:	4620      	mov	r0, r4
   1132a:	680e      	ldr	r6, [r1, #0]
   1132c:	6805      	ldr	r5, [r0, #0]
   1132e:	42b5      	cmp	r5, r6
   11330:	f104 0404 	add.w	r4, r4, #4
   11334:	f103 0304 	add.w	r3, r3, #4
   11338:	d116      	bne.n	11368 <memcmp+0x54>
   1133a:	3a04      	subs	r2, #4
   1133c:	2a03      	cmp	r2, #3
   1133e:	4620      	mov	r0, r4
   11340:	4619      	mov	r1, r3
   11342:	d8f0      	bhi.n	11326 <memcmp+0x12>
   11344:	1e54      	subs	r4, r2, #1
   11346:	b19a      	cbz	r2, 11370 <memcmp+0x5c>
   11348:	1e42      	subs	r2, r0, #1
   1134a:	3901      	subs	r1, #1
   1134c:	e001      	b.n	11352 <memcmp+0x3e>
   1134e:	18c3      	adds	r3, r0, r3
   11350:	d00c      	beq.n	1136c <memcmp+0x58>
   11352:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   11356:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1135a:	45e6      	cmp	lr, ip
   1135c:	eba4 0302 	sub.w	r3, r4, r2
   11360:	d0f5      	beq.n	1134e <memcmp+0x3a>
   11362:	ebae 000c 	sub.w	r0, lr, ip
   11366:	bd70      	pop	{r4, r5, r6, pc}
   11368:	1e54      	subs	r4, r2, #1
   1136a:	e7ed      	b.n	11348 <memcmp+0x34>
   1136c:	4618      	mov	r0, r3
   1136e:	bd70      	pop	{r4, r5, r6, pc}
   11370:	4610      	mov	r0, r2
   11372:	bd70      	pop	{r4, r5, r6, pc}

00011374 <memmove>:
   11374:	4288      	cmp	r0, r1
   11376:	d90d      	bls.n	11394 <memmove+0x20>
   11378:	188b      	adds	r3, r1, r2
   1137a:	4283      	cmp	r3, r0
   1137c:	d90a      	bls.n	11394 <memmove+0x20>
   1137e:	eb00 0c02 	add.w	ip, r0, r2
   11382:	b1ba      	cbz	r2, 113b4 <memmove+0x40>
   11384:	4662      	mov	r2, ip
   11386:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1138a:	f802 cd01 	strb.w	ip, [r2, #-1]!
   1138e:	4299      	cmp	r1, r3
   11390:	d1f9      	bne.n	11386 <memmove+0x12>
   11392:	4770      	bx	lr
   11394:	2a0f      	cmp	r2, #15
   11396:	d80e      	bhi.n	113b6 <memmove+0x42>
   11398:	4603      	mov	r3, r0
   1139a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   1139e:	b14a      	cbz	r2, 113b4 <memmove+0x40>
   113a0:	f10c 0c01 	add.w	ip, ip, #1
   113a4:	3b01      	subs	r3, #1
   113a6:	448c      	add	ip, r1
   113a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   113ac:	f803 2f01 	strb.w	r2, [r3, #1]!
   113b0:	4561      	cmp	r1, ip
   113b2:	d1f9      	bne.n	113a8 <memmove+0x34>
   113b4:	4770      	bx	lr
   113b6:	ea40 0301 	orr.w	r3, r0, r1
   113ba:	079b      	lsls	r3, r3, #30
   113bc:	d150      	bne.n	11460 <memmove+0xec>
   113be:	f1a2 0310 	sub.w	r3, r2, #16
   113c2:	b570      	push	{r4, r5, r6, lr}
   113c4:	f101 0c20 	add.w	ip, r1, #32
   113c8:	f023 050f 	bic.w	r5, r3, #15
   113cc:	f101 0e10 	add.w	lr, r1, #16
   113d0:	f100 0410 	add.w	r4, r0, #16
   113d4:	44ac      	add	ip, r5
   113d6:	091b      	lsrs	r3, r3, #4
   113d8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   113dc:	f844 5c10 	str.w	r5, [r4, #-16]
   113e0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   113e4:	f844 5c0c 	str.w	r5, [r4, #-12]
   113e8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   113ec:	f844 5c08 	str.w	r5, [r4, #-8]
   113f0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   113f4:	f844 5c04 	str.w	r5, [r4, #-4]
   113f8:	f10e 0e10 	add.w	lr, lr, #16
   113fc:	45e6      	cmp	lr, ip
   113fe:	f104 0410 	add.w	r4, r4, #16
   11402:	d1e9      	bne.n	113d8 <memmove+0x64>
   11404:	3301      	adds	r3, #1
   11406:	f012 0f0c 	tst.w	r2, #12
   1140a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1140e:	f002 040f 	and.w	r4, r2, #15
   11412:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   11416:	d027      	beq.n	11468 <memmove+0xf4>
   11418:	3c04      	subs	r4, #4
   1141a:	f024 0603 	bic.w	r6, r4, #3
   1141e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   11422:	441e      	add	r6, r3
   11424:	1f1c      	subs	r4, r3, #4
   11426:	468e      	mov	lr, r1
   11428:	f85e 5b04 	ldr.w	r5, [lr], #4
   1142c:	f844 5f04 	str.w	r5, [r4, #4]!
   11430:	42b4      	cmp	r4, r6
   11432:	d1f9      	bne.n	11428 <memmove+0xb4>
   11434:	f10c 0401 	add.w	r4, ip, #1
   11438:	f002 0203 	and.w	r2, r2, #3
   1143c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11440:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   11444:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11448:	b14a      	cbz	r2, 1145e <memmove+0xea>
   1144a:	f10c 0c01 	add.w	ip, ip, #1
   1144e:	3b01      	subs	r3, #1
   11450:	448c      	add	ip, r1
   11452:	f811 2b01 	ldrb.w	r2, [r1], #1
   11456:	f803 2f01 	strb.w	r2, [r3, #1]!
   1145a:	4561      	cmp	r1, ip
   1145c:	d1f9      	bne.n	11452 <memmove+0xde>
   1145e:	bd70      	pop	{r4, r5, r6, pc}
   11460:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   11464:	4603      	mov	r3, r0
   11466:	e79b      	b.n	113a0 <memmove+0x2c>
   11468:	4622      	mov	r2, r4
   1146a:	e7eb      	b.n	11444 <memmove+0xd0>

0001146c <__assert_func>:
   1146c:	b500      	push	{lr}
   1146e:	4c0b      	ldr	r4, [pc, #44]	; (1149c <__assert_func+0x30>)
   11470:	6825      	ldr	r5, [r4, #0]
   11472:	4614      	mov	r4, r2
   11474:	68ee      	ldr	r6, [r5, #12]
   11476:	461a      	mov	r2, r3
   11478:	b085      	sub	sp, #20
   1147a:	4603      	mov	r3, r0
   1147c:	460d      	mov	r5, r1
   1147e:	b14c      	cbz	r4, 11494 <__assert_func+0x28>
   11480:	4907      	ldr	r1, [pc, #28]	; (114a0 <__assert_func+0x34>)
   11482:	9500      	str	r5, [sp, #0]
   11484:	e9cd 1401 	strd	r1, r4, [sp, #4]
   11488:	4630      	mov	r0, r6
   1148a:	4906      	ldr	r1, [pc, #24]	; (114a4 <__assert_func+0x38>)
   1148c:	f001 f9e8 	bl	12860 <fiprintf>
   11490:	f7fc fd5f 	bl	df52 <abort>
   11494:	4904      	ldr	r1, [pc, #16]	; (114a8 <__assert_func+0x3c>)
   11496:	460c      	mov	r4, r1
   11498:	e7f3      	b.n	11482 <__assert_func+0x16>
   1149a:	bf00      	nop
   1149c:	20003974 	.word	0x20003974
   114a0:	20002694 	.word	0x20002694
   114a4:	200026a4 	.word	0x200026a4
   114a8:	20002000 	.word	0x20002000

000114ac <memset>:
   114ac:	0783      	lsls	r3, r0, #30
   114ae:	b530      	push	{r4, r5, lr}
   114b0:	d048      	beq.n	11544 <memset+0x98>
   114b2:	1e54      	subs	r4, r2, #1
   114b4:	2a00      	cmp	r2, #0
   114b6:	d03f      	beq.n	11538 <memset+0x8c>
   114b8:	b2ca      	uxtb	r2, r1
   114ba:	4603      	mov	r3, r0
   114bc:	e001      	b.n	114c2 <memset+0x16>
   114be:	3c01      	subs	r4, #1
   114c0:	d33a      	bcc.n	11538 <memset+0x8c>
   114c2:	f803 2b01 	strb.w	r2, [r3], #1
   114c6:	079d      	lsls	r5, r3, #30
   114c8:	d1f9      	bne.n	114be <memset+0x12>
   114ca:	2c03      	cmp	r4, #3
   114cc:	d92d      	bls.n	1152a <memset+0x7e>
   114ce:	b2cd      	uxtb	r5, r1
   114d0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   114d4:	2c0f      	cmp	r4, #15
   114d6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   114da:	d936      	bls.n	1154a <memset+0x9e>
   114dc:	f1a4 0210 	sub.w	r2, r4, #16
   114e0:	f022 0c0f 	bic.w	ip, r2, #15
   114e4:	f103 0e20 	add.w	lr, r3, #32
   114e8:	44e6      	add	lr, ip
   114ea:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   114ee:	f103 0210 	add.w	r2, r3, #16
   114f2:	e942 5504 	strd	r5, r5, [r2, #-16]
   114f6:	e942 5502 	strd	r5, r5, [r2, #-8]
   114fa:	3210      	adds	r2, #16
   114fc:	4572      	cmp	r2, lr
   114fe:	d1f8      	bne.n	114f2 <memset+0x46>
   11500:	f10c 0201 	add.w	r2, ip, #1
   11504:	f014 0f0c 	tst.w	r4, #12
   11508:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   1150c:	f004 0c0f 	and.w	ip, r4, #15
   11510:	d013      	beq.n	1153a <memset+0x8e>
   11512:	f1ac 0304 	sub.w	r3, ip, #4
   11516:	f023 0303 	bic.w	r3, r3, #3
   1151a:	3304      	adds	r3, #4
   1151c:	4413      	add	r3, r2
   1151e:	f842 5b04 	str.w	r5, [r2], #4
   11522:	4293      	cmp	r3, r2
   11524:	d1fb      	bne.n	1151e <memset+0x72>
   11526:	f00c 0403 	and.w	r4, ip, #3
   1152a:	b12c      	cbz	r4, 11538 <memset+0x8c>
   1152c:	b2c9      	uxtb	r1, r1
   1152e:	441c      	add	r4, r3
   11530:	f803 1b01 	strb.w	r1, [r3], #1
   11534:	429c      	cmp	r4, r3
   11536:	d1fb      	bne.n	11530 <memset+0x84>
   11538:	bd30      	pop	{r4, r5, pc}
   1153a:	4664      	mov	r4, ip
   1153c:	4613      	mov	r3, r2
   1153e:	2c00      	cmp	r4, #0
   11540:	d1f4      	bne.n	1152c <memset+0x80>
   11542:	e7f9      	b.n	11538 <memset+0x8c>
   11544:	4603      	mov	r3, r0
   11546:	4614      	mov	r4, r2
   11548:	e7bf      	b.n	114ca <memset+0x1e>
   1154a:	461a      	mov	r2, r3
   1154c:	46a4      	mov	ip, r4
   1154e:	e7e0      	b.n	11512 <memset+0x66>

00011550 <__cxa_atexit>:
   11550:	4613      	mov	r3, r2
   11552:	460a      	mov	r2, r1
   11554:	4601      	mov	r1, r0
   11556:	2002      	movs	r0, #2
   11558:	f002 ba78 	b.w	13a4c <__register_exitproc>

0001155c <fcvtf>:
   1155c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   11560:	2300      	movs	r3, #0
   11562:	f002 bacd 	b.w	13b00 <fcvtbuf>
   11566:	bf00      	nop

00011568 <__libc_init_array>:
   11568:	b570      	push	{r4, r5, r6, lr}
   1156a:	4e0d      	ldr	r6, [pc, #52]	; (115a0 <__libc_init_array+0x38>)
   1156c:	4d0d      	ldr	r5, [pc, #52]	; (115a4 <__libc_init_array+0x3c>)
   1156e:	1b76      	subs	r6, r6, r5
   11570:	10b6      	asrs	r6, r6, #2
   11572:	d006      	beq.n	11582 <__libc_init_array+0x1a>
   11574:	2400      	movs	r4, #0
   11576:	f855 3b04 	ldr.w	r3, [r5], #4
   1157a:	3401      	adds	r4, #1
   1157c:	4798      	blx	r3
   1157e:	42a6      	cmp	r6, r4
   11580:	d1f9      	bne.n	11576 <__libc_init_array+0xe>
   11582:	4e09      	ldr	r6, [pc, #36]	; (115a8 <__libc_init_array+0x40>)
   11584:	4d09      	ldr	r5, [pc, #36]	; (115ac <__libc_init_array+0x44>)
   11586:	1b76      	subs	r6, r6, r5
   11588:	f003 ffa2 	bl	154d0 <___init_veneer>
   1158c:	10b6      	asrs	r6, r6, #2
   1158e:	d006      	beq.n	1159e <__libc_init_array+0x36>
   11590:	2400      	movs	r4, #0
   11592:	f855 3b04 	ldr.w	r3, [r5], #4
   11596:	3401      	adds	r4, #1
   11598:	4798      	blx	r3
   1159a:	42a6      	cmp	r6, r4
   1159c:	d1f9      	bne.n	11592 <__libc_init_array+0x2a>
   1159e:	bd70      	pop	{r4, r5, r6, pc}
   115a0:	60001f90 	.word	0x60001f90
   115a4:	60001f90 	.word	0x60001f90
   115a8:	60001fa8 	.word	0x60001fa8
   115ac:	60001f90 	.word	0x60001f90

000115b0 <__retarget_lock_init_recursive>:
   115b0:	4770      	bx	lr
   115b2:	bf00      	nop

000115b4 <__retarget_lock_close_recursive>:
   115b4:	4770      	bx	lr
   115b6:	bf00      	nop

000115b8 <__retarget_lock_acquire_recursive>:
   115b8:	4770      	bx	lr
   115ba:	bf00      	nop

000115bc <__retarget_lock_release_recursive>:
   115bc:	4770      	bx	lr
   115be:	bf00      	nop

000115c0 <__locale_mb_cur_max>:
   115c0:	4b01      	ldr	r3, [pc, #4]	; (115c8 <__locale_mb_cur_max+0x8>)
   115c2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   115c6:	4770      	bx	lr
   115c8:	200033ec 	.word	0x200033ec

000115cc <strcpy>:
   115cc:	ea80 0201 	eor.w	r2, r0, r1
   115d0:	4684      	mov	ip, r0
   115d2:	f012 0f03 	tst.w	r2, #3
   115d6:	d14f      	bne.n	11678 <strcpy+0xac>
   115d8:	f011 0f03 	tst.w	r1, #3
   115dc:	d132      	bne.n	11644 <strcpy+0x78>
   115de:	f84d 4d04 	str.w	r4, [sp, #-4]!
   115e2:	f011 0f04 	tst.w	r1, #4
   115e6:	f851 3b04 	ldr.w	r3, [r1], #4
   115ea:	d00b      	beq.n	11604 <strcpy+0x38>
   115ec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   115f0:	439a      	bics	r2, r3
   115f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   115f6:	bf04      	itt	eq
   115f8:	f84c 3b04 	streq.w	r3, [ip], #4
   115fc:	f851 3b04 	ldreq.w	r3, [r1], #4
   11600:	d116      	bne.n	11630 <strcpy+0x64>
   11602:	bf00      	nop
   11604:	f851 4b04 	ldr.w	r4, [r1], #4
   11608:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1160c:	439a      	bics	r2, r3
   1160e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11612:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   11616:	d10b      	bne.n	11630 <strcpy+0x64>
   11618:	f84c 3b04 	str.w	r3, [ip], #4
   1161c:	43a2      	bics	r2, r4
   1161e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11622:	bf04      	itt	eq
   11624:	f851 3b04 	ldreq.w	r3, [r1], #4
   11628:	f84c 4b04 	streq.w	r4, [ip], #4
   1162c:	d0ea      	beq.n	11604 <strcpy+0x38>
   1162e:	4623      	mov	r3, r4
   11630:	f80c 3b01 	strb.w	r3, [ip], #1
   11634:	f013 0fff 	tst.w	r3, #255	; 0xff
   11638:	ea4f 2333 	mov.w	r3, r3, ror #8
   1163c:	d1f8      	bne.n	11630 <strcpy+0x64>
   1163e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11642:	4770      	bx	lr
   11644:	f011 0f01 	tst.w	r1, #1
   11648:	d006      	beq.n	11658 <strcpy+0x8c>
   1164a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1164e:	f80c 2b01 	strb.w	r2, [ip], #1
   11652:	2a00      	cmp	r2, #0
   11654:	bf08      	it	eq
   11656:	4770      	bxeq	lr
   11658:	f011 0f02 	tst.w	r1, #2
   1165c:	d0bf      	beq.n	115de <strcpy+0x12>
   1165e:	f831 2b02 	ldrh.w	r2, [r1], #2
   11662:	f012 0fff 	tst.w	r2, #255	; 0xff
   11666:	bf16      	itet	ne
   11668:	f82c 2b02 	strhne.w	r2, [ip], #2
   1166c:	f88c 2000 	strbeq.w	r2, [ip]
   11670:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   11674:	d1b3      	bne.n	115de <strcpy+0x12>
   11676:	4770      	bx	lr
   11678:	f811 2b01 	ldrb.w	r2, [r1], #1
   1167c:	f80c 2b01 	strb.w	r2, [ip], #1
   11680:	2a00      	cmp	r2, #0
   11682:	d1f9      	bne.n	11678 <strcpy+0xac>
   11684:	4770      	bx	lr
   11686:	bf00      	nop

00011688 <__malloc_lock>:
   11688:	4801      	ldr	r0, [pc, #4]	; (11690 <__malloc_lock+0x8>)
   1168a:	f7ff bf95 	b.w	115b8 <__retarget_lock_acquire_recursive>
   1168e:	bf00      	nop
   11690:	20004e5c 	.word	0x20004e5c

00011694 <__malloc_unlock>:
   11694:	4801      	ldr	r0, [pc, #4]	; (1169c <__malloc_unlock+0x8>)
   11696:	f7ff bf91 	b.w	115bc <__retarget_lock_release_recursive>
   1169a:	bf00      	nop
   1169c:	20004e5c 	.word	0x20004e5c

000116a0 <_Balloc>:
   116a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   116a2:	b570      	push	{r4, r5, r6, lr}
   116a4:	4605      	mov	r5, r0
   116a6:	460c      	mov	r4, r1
   116a8:	b14b      	cbz	r3, 116be <_Balloc+0x1e>
   116aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   116ae:	b180      	cbz	r0, 116d2 <_Balloc+0x32>
   116b0:	6802      	ldr	r2, [r0, #0]
   116b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   116b6:	2300      	movs	r3, #0
   116b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   116bc:	bd70      	pop	{r4, r5, r6, pc}
   116be:	2221      	movs	r2, #33	; 0x21
   116c0:	2104      	movs	r1, #4
   116c2:	f000 fba9 	bl	11e18 <_calloc_r>
   116c6:	4603      	mov	r3, r0
   116c8:	6468      	str	r0, [r5, #68]	; 0x44
   116ca:	2800      	cmp	r0, #0
   116cc:	d1ed      	bne.n	116aa <_Balloc+0xa>
   116ce:	2000      	movs	r0, #0
   116d0:	bd70      	pop	{r4, r5, r6, pc}
   116d2:	2101      	movs	r1, #1
   116d4:	fa01 f604 	lsl.w	r6, r1, r4
   116d8:	1d72      	adds	r2, r6, #5
   116da:	0092      	lsls	r2, r2, #2
   116dc:	4628      	mov	r0, r5
   116de:	f000 fb9b 	bl	11e18 <_calloc_r>
   116e2:	2800      	cmp	r0, #0
   116e4:	d0f3      	beq.n	116ce <_Balloc+0x2e>
   116e6:	e9c0 4601 	strd	r4, r6, [r0, #4]
   116ea:	e7e4      	b.n	116b6 <_Balloc+0x16>

000116ec <_Bfree>:
   116ec:	b131      	cbz	r1, 116fc <_Bfree+0x10>
   116ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
   116f0:	684a      	ldr	r2, [r1, #4]
   116f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   116f6:	6008      	str	r0, [r1, #0]
   116f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   116fc:	4770      	bx	lr
   116fe:	bf00      	nop

00011700 <__multadd>:
   11700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11704:	690e      	ldr	r6, [r1, #16]
   11706:	4680      	mov	r8, r0
   11708:	460f      	mov	r7, r1
   1170a:	461d      	mov	r5, r3
   1170c:	f101 0e14 	add.w	lr, r1, #20
   11710:	2000      	movs	r0, #0
   11712:	f8de 1000 	ldr.w	r1, [lr]
   11716:	b28c      	uxth	r4, r1
   11718:	fb02 5304 	mla	r3, r2, r4, r5
   1171c:	0c09      	lsrs	r1, r1, #16
   1171e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11722:	fb02 cc01 	mla	ip, r2, r1, ip
   11726:	3001      	adds	r0, #1
   11728:	b29c      	uxth	r4, r3
   1172a:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   1172e:	4286      	cmp	r6, r0
   11730:	f84e 4b04 	str.w	r4, [lr], #4
   11734:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11738:	dceb      	bgt.n	11712 <__multadd+0x12>
   1173a:	b13d      	cbz	r5, 1174c <__multadd+0x4c>
   1173c:	68bb      	ldr	r3, [r7, #8]
   1173e:	42b3      	cmp	r3, r6
   11740:	dd07      	ble.n	11752 <__multadd+0x52>
   11742:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11746:	3601      	adds	r6, #1
   11748:	615d      	str	r5, [r3, #20]
   1174a:	613e      	str	r6, [r7, #16]
   1174c:	4638      	mov	r0, r7
   1174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11752:	6879      	ldr	r1, [r7, #4]
   11754:	4640      	mov	r0, r8
   11756:	3101      	adds	r1, #1
   11758:	f7ff ffa2 	bl	116a0 <_Balloc>
   1175c:	4604      	mov	r4, r0
   1175e:	b1b0      	cbz	r0, 1178e <__multadd+0x8e>
   11760:	693a      	ldr	r2, [r7, #16]
   11762:	3202      	adds	r2, #2
   11764:	f107 010c 	add.w	r1, r7, #12
   11768:	0092      	lsls	r2, r2, #2
   1176a:	300c      	adds	r0, #12
   1176c:	f7fb fdd6 	bl	d31c <memcpy>
   11770:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11774:	687a      	ldr	r2, [r7, #4]
   11776:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1177a:	6039      	str	r1, [r7, #0]
   1177c:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   11780:	4627      	mov	r7, r4
   11782:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   11786:	3601      	adds	r6, #1
   11788:	615d      	str	r5, [r3, #20]
   1178a:	613e      	str	r6, [r7, #16]
   1178c:	e7de      	b.n	1174c <__multadd+0x4c>
   1178e:	4b03      	ldr	r3, [pc, #12]	; (1179c <__multadd+0x9c>)
   11790:	4803      	ldr	r0, [pc, #12]	; (117a0 <__multadd+0xa0>)
   11792:	4622      	mov	r2, r4
   11794:	21ba      	movs	r1, #186	; 0xba
   11796:	f7ff fe69 	bl	1146c <__assert_func>
   1179a:	bf00      	nop
   1179c:	200026d4 	.word	0x200026d4
   117a0:	200026e8 	.word	0x200026e8

000117a4 <__hi0bits>:
   117a4:	0c03      	lsrs	r3, r0, #16
   117a6:	041b      	lsls	r3, r3, #16
   117a8:	b9d3      	cbnz	r3, 117e0 <__hi0bits+0x3c>
   117aa:	0400      	lsls	r0, r0, #16
   117ac:	2310      	movs	r3, #16
   117ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   117b2:	bf04      	itt	eq
   117b4:	0200      	lsleq	r0, r0, #8
   117b6:	3308      	addeq	r3, #8
   117b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   117bc:	bf04      	itt	eq
   117be:	0100      	lsleq	r0, r0, #4
   117c0:	3304      	addeq	r3, #4
   117c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   117c6:	bf04      	itt	eq
   117c8:	0080      	lsleq	r0, r0, #2
   117ca:	3302      	addeq	r3, #2
   117cc:	2800      	cmp	r0, #0
   117ce:	db05      	blt.n	117dc <__hi0bits+0x38>
   117d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   117d4:	f103 0301 	add.w	r3, r3, #1
   117d8:	bf08      	it	eq
   117da:	2320      	moveq	r3, #32
   117dc:	4618      	mov	r0, r3
   117de:	4770      	bx	lr
   117e0:	2300      	movs	r3, #0
   117e2:	e7e4      	b.n	117ae <__hi0bits+0xa>

000117e4 <__lo0bits>:
   117e4:	6803      	ldr	r3, [r0, #0]
   117e6:	f013 0207 	ands.w	r2, r3, #7
   117ea:	d008      	beq.n	117fe <__lo0bits+0x1a>
   117ec:	07d9      	lsls	r1, r3, #31
   117ee:	d41f      	bmi.n	11830 <__lo0bits+0x4c>
   117f0:	079a      	lsls	r2, r3, #30
   117f2:	d522      	bpl.n	1183a <__lo0bits+0x56>
   117f4:	085b      	lsrs	r3, r3, #1
   117f6:	6003      	str	r3, [r0, #0]
   117f8:	2201      	movs	r2, #1
   117fa:	4610      	mov	r0, r2
   117fc:	4770      	bx	lr
   117fe:	b299      	uxth	r1, r3
   11800:	b909      	cbnz	r1, 11806 <__lo0bits+0x22>
   11802:	0c1b      	lsrs	r3, r3, #16
   11804:	2210      	movs	r2, #16
   11806:	b2d9      	uxtb	r1, r3
   11808:	b909      	cbnz	r1, 1180e <__lo0bits+0x2a>
   1180a:	3208      	adds	r2, #8
   1180c:	0a1b      	lsrs	r3, r3, #8
   1180e:	0719      	lsls	r1, r3, #28
   11810:	bf04      	itt	eq
   11812:	091b      	lsreq	r3, r3, #4
   11814:	3204      	addeq	r2, #4
   11816:	0799      	lsls	r1, r3, #30
   11818:	bf04      	itt	eq
   1181a:	089b      	lsreq	r3, r3, #2
   1181c:	3202      	addeq	r2, #2
   1181e:	07d9      	lsls	r1, r3, #31
   11820:	d403      	bmi.n	1182a <__lo0bits+0x46>
   11822:	085b      	lsrs	r3, r3, #1
   11824:	f102 0201 	add.w	r2, r2, #1
   11828:	d005      	beq.n	11836 <__lo0bits+0x52>
   1182a:	6003      	str	r3, [r0, #0]
   1182c:	4610      	mov	r0, r2
   1182e:	4770      	bx	lr
   11830:	2200      	movs	r2, #0
   11832:	4610      	mov	r0, r2
   11834:	4770      	bx	lr
   11836:	2220      	movs	r2, #32
   11838:	e7df      	b.n	117fa <__lo0bits+0x16>
   1183a:	089b      	lsrs	r3, r3, #2
   1183c:	2202      	movs	r2, #2
   1183e:	6003      	str	r3, [r0, #0]
   11840:	4610      	mov	r0, r2
   11842:	4770      	bx	lr

00011844 <__i2b>:
   11844:	b538      	push	{r3, r4, r5, lr}
   11846:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11848:	4604      	mov	r4, r0
   1184a:	460d      	mov	r5, r1
   1184c:	b14b      	cbz	r3, 11862 <__i2b+0x1e>
   1184e:	6858      	ldr	r0, [r3, #4]
   11850:	b1b0      	cbz	r0, 11880 <__i2b+0x3c>
   11852:	6802      	ldr	r2, [r0, #0]
   11854:	605a      	str	r2, [r3, #4]
   11856:	2200      	movs	r2, #0
   11858:	2301      	movs	r3, #1
   1185a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   1185e:	60c2      	str	r2, [r0, #12]
   11860:	bd38      	pop	{r3, r4, r5, pc}
   11862:	2221      	movs	r2, #33	; 0x21
   11864:	2104      	movs	r1, #4
   11866:	f000 fad7 	bl	11e18 <_calloc_r>
   1186a:	4603      	mov	r3, r0
   1186c:	6460      	str	r0, [r4, #68]	; 0x44
   1186e:	2800      	cmp	r0, #0
   11870:	d1ed      	bne.n	1184e <__i2b+0xa>
   11872:	4b09      	ldr	r3, [pc, #36]	; (11898 <__i2b+0x54>)
   11874:	4809      	ldr	r0, [pc, #36]	; (1189c <__i2b+0x58>)
   11876:	2200      	movs	r2, #0
   11878:	f240 1145 	movw	r1, #325	; 0x145
   1187c:	f7ff fdf6 	bl	1146c <__assert_func>
   11880:	221c      	movs	r2, #28
   11882:	2101      	movs	r1, #1
   11884:	4620      	mov	r0, r4
   11886:	f000 fac7 	bl	11e18 <_calloc_r>
   1188a:	2800      	cmp	r0, #0
   1188c:	d0f1      	beq.n	11872 <__i2b+0x2e>
   1188e:	2201      	movs	r2, #1
   11890:	2302      	movs	r3, #2
   11892:	e9c0 2301 	strd	r2, r3, [r0, #4]
   11896:	e7de      	b.n	11856 <__i2b+0x12>
   11898:	200026d4 	.word	0x200026d4
   1189c:	200026e8 	.word	0x200026e8

000118a0 <__multiply>:
   118a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	690e      	ldr	r6, [r1, #16]
   118a6:	6915      	ldr	r5, [r2, #16]
   118a8:	42ae      	cmp	r6, r5
   118aa:	b085      	sub	sp, #20
   118ac:	4688      	mov	r8, r1
   118ae:	4614      	mov	r4, r2
   118b0:	db05      	blt.n	118be <__multiply+0x1e>
   118b2:	462a      	mov	r2, r5
   118b4:	4623      	mov	r3, r4
   118b6:	4635      	mov	r5, r6
   118b8:	460c      	mov	r4, r1
   118ba:	4616      	mov	r6, r2
   118bc:	4698      	mov	r8, r3
   118be:	68a3      	ldr	r3, [r4, #8]
   118c0:	6861      	ldr	r1, [r4, #4]
   118c2:	19af      	adds	r7, r5, r6
   118c4:	42bb      	cmp	r3, r7
   118c6:	bfb8      	it	lt
   118c8:	3101      	addlt	r1, #1
   118ca:	f7ff fee9 	bl	116a0 <_Balloc>
   118ce:	9001      	str	r0, [sp, #4]
   118d0:	2800      	cmp	r0, #0
   118d2:	f000 8087 	beq.w	119e4 <__multiply+0x144>
   118d6:	9b01      	ldr	r3, [sp, #4]
   118d8:	f103 0914 	add.w	r9, r3, #20
   118dc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   118e0:	45d1      	cmp	r9, sl
   118e2:	d205      	bcs.n	118f0 <__multiply+0x50>
   118e4:	464b      	mov	r3, r9
   118e6:	2200      	movs	r2, #0
   118e8:	f843 2b04 	str.w	r2, [r3], #4
   118ec:	459a      	cmp	sl, r3
   118ee:	d8fb      	bhi.n	118e8 <__multiply+0x48>
   118f0:	f108 0814 	add.w	r8, r8, #20
   118f4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   118f8:	f104 0314 	add.w	r3, r4, #20
   118fc:	45d8      	cmp	r8, fp
   118fe:	461a      	mov	r2, r3
   11900:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   11904:	d25f      	bcs.n	119c6 <__multiply+0x126>
   11906:	1b2b      	subs	r3, r5, r4
   11908:	3b15      	subs	r3, #21
   1190a:	f023 0303 	bic.w	r3, r3, #3
   1190e:	3304      	adds	r3, #4
   11910:	3415      	adds	r4, #21
   11912:	42a5      	cmp	r5, r4
   11914:	bf38      	it	cc
   11916:	2304      	movcc	r3, #4
   11918:	e9cd a702 	strd	sl, r7, [sp, #8]
   1191c:	46ac      	mov	ip, r5
   1191e:	461f      	mov	r7, r3
   11920:	4692      	mov	sl, r2
   11922:	e005      	b.n	11930 <__multiply+0x90>
   11924:	0c09      	lsrs	r1, r1, #16
   11926:	d129      	bne.n	1197c <__multiply+0xdc>
   11928:	45c3      	cmp	fp, r8
   1192a:	f109 0904 	add.w	r9, r9, #4
   1192e:	d948      	bls.n	119c2 <__multiply+0x122>
   11930:	f858 1b04 	ldr.w	r1, [r8], #4
   11934:	b28d      	uxth	r5, r1
   11936:	2d00      	cmp	r5, #0
   11938:	d0f4      	beq.n	11924 <__multiply+0x84>
   1193a:	4656      	mov	r6, sl
   1193c:	464c      	mov	r4, r9
   1193e:	2300      	movs	r3, #0
   11940:	f856 1b04 	ldr.w	r1, [r6], #4
   11944:	6822      	ldr	r2, [r4, #0]
   11946:	fa1f fe81 	uxth.w	lr, r1
   1194a:	b290      	uxth	r0, r2
   1194c:	0c09      	lsrs	r1, r1, #16
   1194e:	fb05 000e 	mla	r0, r5, lr, r0
   11952:	0c12      	lsrs	r2, r2, #16
   11954:	4403      	add	r3, r0
   11956:	fb05 2201 	mla	r2, r5, r1, r2
   1195a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1195e:	b29b      	uxth	r3, r3
   11960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11964:	45b4      	cmp	ip, r6
   11966:	f844 3b04 	str.w	r3, [r4], #4
   1196a:	ea4f 4312 	mov.w	r3, r2, lsr #16
   1196e:	d8e7      	bhi.n	11940 <__multiply+0xa0>
   11970:	f849 3007 	str.w	r3, [r9, r7]
   11974:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11978:	0c09      	lsrs	r1, r1, #16
   1197a:	d0d5      	beq.n	11928 <__multiply+0x88>
   1197c:	f8d9 3000 	ldr.w	r3, [r9]
   11980:	4650      	mov	r0, sl
   11982:	461a      	mov	r2, r3
   11984:	464c      	mov	r4, r9
   11986:	2600      	movs	r6, #0
   11988:	8805      	ldrh	r5, [r0, #0]
   1198a:	0c12      	lsrs	r2, r2, #16
   1198c:	fb01 2205 	mla	r2, r1, r5, r2
   11990:	4416      	add	r6, r2
   11992:	b29b      	uxth	r3, r3
   11994:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   11998:	f844 3b04 	str.w	r3, [r4], #4
   1199c:	f850 5b04 	ldr.w	r5, [r0], #4
   119a0:	6822      	ldr	r2, [r4, #0]
   119a2:	0c2d      	lsrs	r5, r5, #16
   119a4:	b293      	uxth	r3, r2
   119a6:	fb01 3305 	mla	r3, r1, r5, r3
   119aa:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   119ae:	4584      	cmp	ip, r0
   119b0:	ea4f 4613 	mov.w	r6, r3, lsr #16
   119b4:	d8e8      	bhi.n	11988 <__multiply+0xe8>
   119b6:	45c3      	cmp	fp, r8
   119b8:	f849 3007 	str.w	r3, [r9, r7]
   119bc:	f109 0904 	add.w	r9, r9, #4
   119c0:	d8b6      	bhi.n	11930 <__multiply+0x90>
   119c2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   119c6:	2f00      	cmp	r7, #0
   119c8:	dc02      	bgt.n	119d0 <__multiply+0x130>
   119ca:	e005      	b.n	119d8 <__multiply+0x138>
   119cc:	3f01      	subs	r7, #1
   119ce:	d003      	beq.n	119d8 <__multiply+0x138>
   119d0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   119d4:	2b00      	cmp	r3, #0
   119d6:	d0f9      	beq.n	119cc <__multiply+0x12c>
   119d8:	9b01      	ldr	r3, [sp, #4]
   119da:	4618      	mov	r0, r3
   119dc:	611f      	str	r7, [r3, #16]
   119de:	b005      	add	sp, #20
   119e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119e4:	4b03      	ldr	r3, [pc, #12]	; (119f4 <__multiply+0x154>)
   119e6:	4804      	ldr	r0, [pc, #16]	; (119f8 <__multiply+0x158>)
   119e8:	9a01      	ldr	r2, [sp, #4]
   119ea:	f44f 71b1 	mov.w	r1, #354	; 0x162
   119ee:	f7ff fd3d 	bl	1146c <__assert_func>
   119f2:	bf00      	nop
   119f4:	200026d4 	.word	0x200026d4
   119f8:	200026e8 	.word	0x200026e8

000119fc <__pow5mult>:
   119fc:	f012 0303 	ands.w	r3, r2, #3
   11a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a04:	4614      	mov	r4, r2
   11a06:	4606      	mov	r6, r0
   11a08:	d132      	bne.n	11a70 <__pow5mult+0x74>
   11a0a:	460d      	mov	r5, r1
   11a0c:	10a4      	asrs	r4, r4, #2
   11a0e:	d020      	beq.n	11a52 <__pow5mult+0x56>
   11a10:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   11a14:	f1b8 0f00 	cmp.w	r8, #0
   11a18:	d033      	beq.n	11a82 <__pow5mult+0x86>
   11a1a:	07e3      	lsls	r3, r4, #31
   11a1c:	f04f 0700 	mov.w	r7, #0
   11a20:	d407      	bmi.n	11a32 <__pow5mult+0x36>
   11a22:	1064      	asrs	r4, r4, #1
   11a24:	d015      	beq.n	11a52 <__pow5mult+0x56>
   11a26:	f8d8 0000 	ldr.w	r0, [r8]
   11a2a:	b1a8      	cbz	r0, 11a58 <__pow5mult+0x5c>
   11a2c:	4680      	mov	r8, r0
   11a2e:	07e3      	lsls	r3, r4, #31
   11a30:	d5f7      	bpl.n	11a22 <__pow5mult+0x26>
   11a32:	4642      	mov	r2, r8
   11a34:	4629      	mov	r1, r5
   11a36:	4630      	mov	r0, r6
   11a38:	f7ff ff32 	bl	118a0 <__multiply>
   11a3c:	b1b5      	cbz	r5, 11a6c <__pow5mult+0x70>
   11a3e:	6869      	ldr	r1, [r5, #4]
   11a40:	6c73      	ldr	r3, [r6, #68]	; 0x44
   11a42:	1064      	asrs	r4, r4, #1
   11a44:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   11a48:	602a      	str	r2, [r5, #0]
   11a4a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   11a4e:	4605      	mov	r5, r0
   11a50:	d1e9      	bne.n	11a26 <__pow5mult+0x2a>
   11a52:	4628      	mov	r0, r5
   11a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a58:	4642      	mov	r2, r8
   11a5a:	4641      	mov	r1, r8
   11a5c:	4630      	mov	r0, r6
   11a5e:	f7ff ff1f 	bl	118a0 <__multiply>
   11a62:	f8c8 0000 	str.w	r0, [r8]
   11a66:	6007      	str	r7, [r0, #0]
   11a68:	4680      	mov	r8, r0
   11a6a:	e7e0      	b.n	11a2e <__pow5mult+0x32>
   11a6c:	4605      	mov	r5, r0
   11a6e:	e7d8      	b.n	11a22 <__pow5mult+0x26>
   11a70:	3b01      	subs	r3, #1
   11a72:	4a0f      	ldr	r2, [pc, #60]	; (11ab0 <__pow5mult+0xb4>)
   11a74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11a78:	2300      	movs	r3, #0
   11a7a:	f7ff fe41 	bl	11700 <__multadd>
   11a7e:	4605      	mov	r5, r0
   11a80:	e7c4      	b.n	11a0c <__pow5mult+0x10>
   11a82:	2101      	movs	r1, #1
   11a84:	4630      	mov	r0, r6
   11a86:	f7ff fe0b 	bl	116a0 <_Balloc>
   11a8a:	4680      	mov	r8, r0
   11a8c:	b140      	cbz	r0, 11aa0 <__pow5mult+0xa4>
   11a8e:	2301      	movs	r3, #1
   11a90:	f240 2271 	movw	r2, #625	; 0x271
   11a94:	e9c0 3204 	strd	r3, r2, [r0, #16]
   11a98:	2300      	movs	r3, #0
   11a9a:	6430      	str	r0, [r6, #64]	; 0x40
   11a9c:	6003      	str	r3, [r0, #0]
   11a9e:	e7bc      	b.n	11a1a <__pow5mult+0x1e>
   11aa0:	4b04      	ldr	r3, [pc, #16]	; (11ab4 <__pow5mult+0xb8>)
   11aa2:	4805      	ldr	r0, [pc, #20]	; (11ab8 <__pow5mult+0xbc>)
   11aa4:	4642      	mov	r2, r8
   11aa6:	f240 1145 	movw	r1, #325	; 0x145
   11aaa:	f7ff fcdf 	bl	1146c <__assert_func>
   11aae:	bf00      	nop
   11ab0:	20002d60 	.word	0x20002d60
   11ab4:	200026d4 	.word	0x200026d4
   11ab8:	200026e8 	.word	0x200026e8

00011abc <__lshift>:
   11abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ac0:	460d      	mov	r5, r1
   11ac2:	4614      	mov	r4, r2
   11ac4:	692f      	ldr	r7, [r5, #16]
   11ac6:	68ab      	ldr	r3, [r5, #8]
   11ac8:	6849      	ldr	r1, [r1, #4]
   11aca:	eb07 1762 	add.w	r7, r7, r2, asr #5
   11ace:	1c7e      	adds	r6, r7, #1
   11ad0:	429e      	cmp	r6, r3
   11ad2:	4680      	mov	r8, r0
   11ad4:	ea4f 1962 	mov.w	r9, r2, asr #5
   11ad8:	dd04      	ble.n	11ae4 <__lshift+0x28>
   11ada:	005b      	lsls	r3, r3, #1
   11adc:	429e      	cmp	r6, r3
   11ade:	f101 0101 	add.w	r1, r1, #1
   11ae2:	dcfa      	bgt.n	11ada <__lshift+0x1e>
   11ae4:	4640      	mov	r0, r8
   11ae6:	f7ff fddb 	bl	116a0 <_Balloc>
   11aea:	4684      	mov	ip, r0
   11aec:	2800      	cmp	r0, #0
   11aee:	d052      	beq.n	11b96 <__lshift+0xda>
   11af0:	f1b9 0f00 	cmp.w	r9, #0
   11af4:	f100 0214 	add.w	r2, r0, #20
   11af8:	dd0e      	ble.n	11b18 <__lshift+0x5c>
   11afa:	f109 0105 	add.w	r1, r9, #5
   11afe:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   11b02:	4613      	mov	r3, r2
   11b04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   11b08:	2000      	movs	r0, #0
   11b0a:	f843 0b04 	str.w	r0, [r3], #4
   11b0e:	428b      	cmp	r3, r1
   11b10:	d1fb      	bne.n	11b0a <__lshift+0x4e>
   11b12:	f1ae 0314 	sub.w	r3, lr, #20
   11b16:	441a      	add	r2, r3
   11b18:	6929      	ldr	r1, [r5, #16]
   11b1a:	f105 0314 	add.w	r3, r5, #20
   11b1e:	f014 0e1f 	ands.w	lr, r4, #31
   11b22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11b26:	d02e      	beq.n	11b86 <__lshift+0xca>
   11b28:	f1ce 0920 	rsb	r9, lr, #32
   11b2c:	4610      	mov	r0, r2
   11b2e:	f04f 0a00 	mov.w	sl, #0
   11b32:	681c      	ldr	r4, [r3, #0]
   11b34:	fa04 f40e 	lsl.w	r4, r4, lr
   11b38:	ea44 040a 	orr.w	r4, r4, sl
   11b3c:	f840 4b04 	str.w	r4, [r0], #4
   11b40:	f853 4b04 	ldr.w	r4, [r3], #4
   11b44:	4299      	cmp	r1, r3
   11b46:	fa24 fa09 	lsr.w	sl, r4, r9
   11b4a:	d8f2      	bhi.n	11b32 <__lshift+0x76>
   11b4c:	1b4b      	subs	r3, r1, r5
   11b4e:	3b15      	subs	r3, #21
   11b50:	f023 0303 	bic.w	r3, r3, #3
   11b54:	3304      	adds	r3, #4
   11b56:	f105 0015 	add.w	r0, r5, #21
   11b5a:	4281      	cmp	r1, r0
   11b5c:	bf38      	it	cc
   11b5e:	2304      	movcc	r3, #4
   11b60:	f1ba 0f00 	cmp.w	sl, #0
   11b64:	bf18      	it	ne
   11b66:	4637      	movne	r7, r6
   11b68:	f842 a003 	str.w	sl, [r2, r3]
   11b6c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11b70:	686a      	ldr	r2, [r5, #4]
   11b72:	f8cc 7010 	str.w	r7, [ip, #16]
   11b76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11b7a:	6029      	str	r1, [r5, #0]
   11b7c:	4660      	mov	r0, ip
   11b7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   11b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b86:	3a04      	subs	r2, #4
   11b88:	f853 0b04 	ldr.w	r0, [r3], #4
   11b8c:	f842 0f04 	str.w	r0, [r2, #4]!
   11b90:	4299      	cmp	r1, r3
   11b92:	d8f9      	bhi.n	11b88 <__lshift+0xcc>
   11b94:	e7ea      	b.n	11b6c <__lshift+0xb0>
   11b96:	4b03      	ldr	r3, [pc, #12]	; (11ba4 <__lshift+0xe8>)
   11b98:	4803      	ldr	r0, [pc, #12]	; (11ba8 <__lshift+0xec>)
   11b9a:	4662      	mov	r2, ip
   11b9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   11ba0:	f7ff fc64 	bl	1146c <__assert_func>
   11ba4:	200026d4 	.word	0x200026d4
   11ba8:	200026e8 	.word	0x200026e8

00011bac <__mcmp>:
   11bac:	690b      	ldr	r3, [r1, #16]
   11bae:	4684      	mov	ip, r0
   11bb0:	6900      	ldr	r0, [r0, #16]
   11bb2:	1ac0      	subs	r0, r0, r3
   11bb4:	d116      	bne.n	11be4 <__mcmp+0x38>
   11bb6:	f10c 0c14 	add.w	ip, ip, #20
   11bba:	3114      	adds	r1, #20
   11bbc:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   11bc0:	b410      	push	{r4}
   11bc2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   11bc6:	e001      	b.n	11bcc <__mcmp+0x20>
   11bc8:	4594      	cmp	ip, r2
   11bca:	d208      	bcs.n	11bde <__mcmp+0x32>
   11bcc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11bd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11bd4:	428c      	cmp	r4, r1
   11bd6:	d0f7      	beq.n	11bc8 <__mcmp+0x1c>
   11bd8:	d205      	bcs.n	11be6 <__mcmp+0x3a>
   11bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11bde:	f85d 4b04 	ldr.w	r4, [sp], #4
   11be2:	4770      	bx	lr
   11be4:	4770      	bx	lr
   11be6:	2001      	movs	r0, #1
   11be8:	f85d 4b04 	ldr.w	r4, [sp], #4
   11bec:	4770      	bx	lr
   11bee:	bf00      	nop

00011bf0 <__mdiff>:
   11bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bf4:	690f      	ldr	r7, [r1, #16]
   11bf6:	6913      	ldr	r3, [r2, #16]
   11bf8:	1aff      	subs	r7, r7, r3
   11bfa:	2f00      	cmp	r7, #0
   11bfc:	460e      	mov	r6, r1
   11bfe:	4690      	mov	r8, r2
   11c00:	d17f      	bne.n	11d02 <__mdiff+0x112>
   11c02:	f101 0514 	add.w	r5, r1, #20
   11c06:	3214      	adds	r2, #20
   11c08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11c0c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11c10:	e001      	b.n	11c16 <__mdiff+0x26>
   11c12:	429d      	cmp	r5, r3
   11c14:	d278      	bcs.n	11d08 <__mdiff+0x118>
   11c16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11c1a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11c1e:	42a1      	cmp	r1, r4
   11c20:	d0f7      	beq.n	11c12 <__mdiff+0x22>
   11c22:	d369      	bcc.n	11cf8 <__mdiff+0x108>
   11c24:	6871      	ldr	r1, [r6, #4]
   11c26:	f7ff fd3b 	bl	116a0 <_Balloc>
   11c2a:	4681      	mov	r9, r0
   11c2c:	2800      	cmp	r0, #0
   11c2e:	d077      	beq.n	11d20 <__mdiff+0x130>
   11c30:	6935      	ldr	r5, [r6, #16]
   11c32:	f8d8 2010 	ldr.w	r2, [r8, #16]
   11c36:	60c7      	str	r7, [r0, #12]
   11c38:	f108 0e14 	add.w	lr, r8, #20
   11c3c:	f106 0014 	add.w	r0, r6, #20
   11c40:	f109 0a14 	add.w	sl, r9, #20
   11c44:	f106 0110 	add.w	r1, r6, #16
   11c48:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   11c4c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   11c50:	4656      	mov	r6, sl
   11c52:	f04f 0c00 	mov.w	ip, #0
   11c56:	f85e 4b04 	ldr.w	r4, [lr], #4
   11c5a:	f851 bf04 	ldr.w	fp, [r1, #4]!
   11c5e:	b2a3      	uxth	r3, r4
   11c60:	fa1c fc8b 	uxtah	ip, ip, fp
   11c64:	ebac 0303 	sub.w	r3, ip, r3
   11c68:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11c6c:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   11c70:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   11c74:	b29b      	uxth	r3, r3
   11c76:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   11c7a:	4572      	cmp	r2, lr
   11c7c:	f846 3b04 	str.w	r3, [r6], #4
   11c80:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   11c84:	d8e7      	bhi.n	11c56 <__mdiff+0x66>
   11c86:	eba2 0108 	sub.w	r1, r2, r8
   11c8a:	3915      	subs	r1, #21
   11c8c:	f108 0815 	add.w	r8, r8, #21
   11c90:	4542      	cmp	r2, r8
   11c92:	f021 0403 	bic.w	r4, r1, #3
   11c96:	f104 0404 	add.w	r4, r4, #4
   11c9a:	bf38      	it	cc
   11c9c:	2404      	movcc	r4, #4
   11c9e:	4420      	add	r0, r4
   11ca0:	f021 0203 	bic.w	r2, r1, #3
   11ca4:	bf38      	it	cc
   11ca6:	2200      	movcc	r2, #0
   11ca8:	4287      	cmp	r7, r0
   11caa:	4452      	add	r2, sl
   11cac:	4454      	add	r4, sl
   11cae:	d918      	bls.n	11ce2 <__mdiff+0xf2>
   11cb0:	4626      	mov	r6, r4
   11cb2:	4601      	mov	r1, r0
   11cb4:	f851 3b04 	ldr.w	r3, [r1], #4
   11cb8:	fa1c fc83 	uxtah	ip, ip, r3
   11cbc:	ea4f 422c 	mov.w	r2, ip, asr #16
   11cc0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11cc4:	fa1f fc8c 	uxth.w	ip, ip
   11cc8:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   11ccc:	428f      	cmp	r7, r1
   11cce:	f846 3b04 	str.w	r3, [r6], #4
   11cd2:	ea4f 4c22 	mov.w	ip, r2, asr #16
   11cd6:	d8ed      	bhi.n	11cb4 <__mdiff+0xc4>
   11cd8:	3f01      	subs	r7, #1
   11cda:	1a3f      	subs	r7, r7, r0
   11cdc:	f027 0703 	bic.w	r7, r7, #3
   11ce0:	19e2      	adds	r2, r4, r7
   11ce2:	b923      	cbnz	r3, 11cee <__mdiff+0xfe>
   11ce4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   11ce8:	3d01      	subs	r5, #1
   11cea:	2b00      	cmp	r3, #0
   11cec:	d0fa      	beq.n	11ce4 <__mdiff+0xf4>
   11cee:	f8c9 5010 	str.w	r5, [r9, #16]
   11cf2:	4648      	mov	r0, r9
   11cf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cf8:	4633      	mov	r3, r6
   11cfa:	2701      	movs	r7, #1
   11cfc:	4646      	mov	r6, r8
   11cfe:	4698      	mov	r8, r3
   11d00:	e790      	b.n	11c24 <__mdiff+0x34>
   11d02:	dbf9      	blt.n	11cf8 <__mdiff+0x108>
   11d04:	2700      	movs	r7, #0
   11d06:	e78d      	b.n	11c24 <__mdiff+0x34>
   11d08:	2100      	movs	r1, #0
   11d0a:	f7ff fcc9 	bl	116a0 <_Balloc>
   11d0e:	4681      	mov	r9, r0
   11d10:	b168      	cbz	r0, 11d2e <__mdiff+0x13e>
   11d12:	2201      	movs	r2, #1
   11d14:	2300      	movs	r3, #0
   11d16:	e9c9 2304 	strd	r2, r3, [r9, #16]
   11d1a:	4648      	mov	r0, r9
   11d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d20:	4b06      	ldr	r3, [pc, #24]	; (11d3c <__mdiff+0x14c>)
   11d22:	4807      	ldr	r0, [pc, #28]	; (11d40 <__mdiff+0x150>)
   11d24:	464a      	mov	r2, r9
   11d26:	f240 2145 	movw	r1, #581	; 0x245
   11d2a:	f7ff fb9f 	bl	1146c <__assert_func>
   11d2e:	4b03      	ldr	r3, [pc, #12]	; (11d3c <__mdiff+0x14c>)
   11d30:	4803      	ldr	r0, [pc, #12]	; (11d40 <__mdiff+0x150>)
   11d32:	464a      	mov	r2, r9
   11d34:	f240 2137 	movw	r1, #567	; 0x237
   11d38:	f7ff fb98 	bl	1146c <__assert_func>
   11d3c:	200026d4 	.word	0x200026d4
   11d40:	200026e8 	.word	0x200026e8

00011d44 <__d2b>:
   11d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11d48:	4688      	mov	r8, r1
   11d4a:	b083      	sub	sp, #12
   11d4c:	2101      	movs	r1, #1
   11d4e:	ec57 6b10 	vmov	r6, r7, d0
   11d52:	4615      	mov	r5, r2
   11d54:	f7ff fca4 	bl	116a0 <_Balloc>
   11d58:	4604      	mov	r4, r0
   11d5a:	2800      	cmp	r0, #0
   11d5c:	d051      	beq.n	11e02 <__d2b+0xbe>
   11d5e:	f3c7 590a 	ubfx	r9, r7, #20, #11
   11d62:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11d66:	f1b9 0f00 	cmp.w	r9, #0
   11d6a:	d001      	beq.n	11d70 <__d2b+0x2c>
   11d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11d70:	2e00      	cmp	r6, #0
   11d72:	9301      	str	r3, [sp, #4]
   11d74:	d118      	bne.n	11da8 <__d2b+0x64>
   11d76:	a801      	add	r0, sp, #4
   11d78:	f7ff fd34 	bl	117e4 <__lo0bits>
   11d7c:	9a01      	ldr	r2, [sp, #4]
   11d7e:	6162      	str	r2, [r4, #20]
   11d80:	2201      	movs	r2, #1
   11d82:	f100 0320 	add.w	r3, r0, #32
   11d86:	6122      	str	r2, [r4, #16]
   11d88:	f1b9 0f00 	cmp.w	r9, #0
   11d8c:	d025      	beq.n	11dda <__d2b+0x96>
   11d8e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   11d92:	eb09 0203 	add.w	r2, r9, r3
   11d96:	4620      	mov	r0, r4
   11d98:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   11d9c:	f8c8 2000 	str.w	r2, [r8]
   11da0:	602b      	str	r3, [r5, #0]
   11da2:	b003      	add	sp, #12
   11da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11da8:	4668      	mov	r0, sp
   11daa:	9600      	str	r6, [sp, #0]
   11dac:	f7ff fd1a 	bl	117e4 <__lo0bits>
   11db0:	4603      	mov	r3, r0
   11db2:	b310      	cbz	r0, 11dfa <__d2b+0xb6>
   11db4:	e9dd 0200 	ldrd	r0, r2, [sp]
   11db8:	f1c3 0120 	rsb	r1, r3, #32
   11dbc:	fa02 f101 	lsl.w	r1, r2, r1
   11dc0:	4301      	orrs	r1, r0
   11dc2:	40da      	lsrs	r2, r3
   11dc4:	6161      	str	r1, [r4, #20]
   11dc6:	9201      	str	r2, [sp, #4]
   11dc8:	2a00      	cmp	r2, #0
   11dca:	61a2      	str	r2, [r4, #24]
   11dcc:	bf14      	ite	ne
   11dce:	2202      	movne	r2, #2
   11dd0:	2201      	moveq	r2, #1
   11dd2:	6122      	str	r2, [r4, #16]
   11dd4:	f1b9 0f00 	cmp.w	r9, #0
   11dd8:	d1d9      	bne.n	11d8e <__d2b+0x4a>
   11dda:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   11dde:	f8c8 3000 	str.w	r3, [r8]
   11de2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   11de6:	6918      	ldr	r0, [r3, #16]
   11de8:	f7ff fcdc 	bl	117a4 <__hi0bits>
   11dec:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   11df0:	4620      	mov	r0, r4
   11df2:	602b      	str	r3, [r5, #0]
   11df4:	b003      	add	sp, #12
   11df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11dfa:	9a00      	ldr	r2, [sp, #0]
   11dfc:	6162      	str	r2, [r4, #20]
   11dfe:	9a01      	ldr	r2, [sp, #4]
   11e00:	e7e2      	b.n	11dc8 <__d2b+0x84>
   11e02:	4b03      	ldr	r3, [pc, #12]	; (11e10 <__d2b+0xcc>)
   11e04:	4803      	ldr	r0, [pc, #12]	; (11e14 <__d2b+0xd0>)
   11e06:	4622      	mov	r2, r4
   11e08:	f240 310f 	movw	r1, #783	; 0x30f
   11e0c:	f7ff fb2e 	bl	1146c <__assert_func>
   11e10:	200026d4 	.word	0x200026d4
   11e14:	200026e8 	.word	0x200026e8

00011e18 <_calloc_r>:
   11e18:	b538      	push	{r3, r4, r5, lr}
   11e1a:	fba1 1402 	umull	r1, r4, r1, r2
   11e1e:	bb8c      	cbnz	r4, 11e84 <_calloc_r+0x6c>
   11e20:	f7fe ffc8 	bl	10db4 <_malloc_r>
   11e24:	4605      	mov	r5, r0
   11e26:	b1e0      	cbz	r0, 11e62 <_calloc_r+0x4a>
   11e28:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11e2c:	f022 0203 	bic.w	r2, r2, #3
   11e30:	3a04      	subs	r2, #4
   11e32:	2a24      	cmp	r2, #36	; 0x24
   11e34:	d817      	bhi.n	11e66 <_calloc_r+0x4e>
   11e36:	2a13      	cmp	r2, #19
   11e38:	d91a      	bls.n	11e70 <_calloc_r+0x58>
   11e3a:	2a1b      	cmp	r2, #27
   11e3c:	e9c0 4400 	strd	r4, r4, [r0]
   11e40:	d91d      	bls.n	11e7e <_calloc_r+0x66>
   11e42:	2a24      	cmp	r2, #36	; 0x24
   11e44:	bf14      	ite	ne
   11e46:	f100 0210 	addne.w	r2, r0, #16
   11e4a:	f100 0218 	addeq.w	r2, r0, #24
   11e4e:	f04f 0300 	mov.w	r3, #0
   11e52:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11e56:	bf04      	itt	eq
   11e58:	6104      	streq	r4, [r0, #16]
   11e5a:	6144      	streq	r4, [r0, #20]
   11e5c:	e9c2 3300 	strd	r3, r3, [r2]
   11e60:	6093      	str	r3, [r2, #8]
   11e62:	4628      	mov	r0, r5
   11e64:	bd38      	pop	{r3, r4, r5, pc}
   11e66:	4621      	mov	r1, r4
   11e68:	f7ff fb20 	bl	114ac <memset>
   11e6c:	4628      	mov	r0, r5
   11e6e:	bd38      	pop	{r3, r4, r5, pc}
   11e70:	4602      	mov	r2, r0
   11e72:	2300      	movs	r3, #0
   11e74:	e9c2 3300 	strd	r3, r3, [r2]
   11e78:	6093      	str	r3, [r2, #8]
   11e7a:	4628      	mov	r0, r5
   11e7c:	bd38      	pop	{r3, r4, r5, pc}
   11e7e:	f100 0208 	add.w	r2, r0, #8
   11e82:	e7f6      	b.n	11e72 <_calloc_r+0x5a>
   11e84:	f7fe ff80 	bl	10d88 <__errno>
   11e88:	230c      	movs	r3, #12
   11e8a:	2500      	movs	r5, #0
   11e8c:	6003      	str	r3, [r0, #0]
   11e8e:	e7e8      	b.n	11e62 <_calloc_r+0x4a>

00011e90 <realloc>:
   11e90:	b410      	push	{r4}
   11e92:	4c04      	ldr	r4, [pc, #16]	; (11ea4 <realloc+0x14>)
   11e94:	4603      	mov	r3, r0
   11e96:	460a      	mov	r2, r1
   11e98:	6820      	ldr	r0, [r4, #0]
   11e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11e9e:	4619      	mov	r1, r3
   11ea0:	f000 b99c 	b.w	121dc <_realloc_r>
   11ea4:	20003974 	.word	0x20003974

00011ea8 <stdio_exit_handler>:
   11ea8:	4a02      	ldr	r2, [pc, #8]	; (11eb4 <stdio_exit_handler+0xc>)
   11eaa:	4903      	ldr	r1, [pc, #12]	; (11eb8 <stdio_exit_handler+0x10>)
   11eac:	4803      	ldr	r0, [pc, #12]	; (11ebc <stdio_exit_handler+0x14>)
   11eae:	f000 bd51 	b.w	12954 <_fwalk_sglue>
   11eb2:	bf00      	nop
   11eb4:	20003968 	.word	0x20003968
   11eb8:	00013bf9 	.word	0x00013bf9
   11ebc:	200031f8 	.word	0x200031f8

00011ec0 <cleanup_stdio>:
   11ec0:	4b0c      	ldr	r3, [pc, #48]	; (11ef4 <cleanup_stdio+0x34>)
   11ec2:	6841      	ldr	r1, [r0, #4]
   11ec4:	4299      	cmp	r1, r3
   11ec6:	b510      	push	{r4, lr}
   11ec8:	4604      	mov	r4, r0
   11eca:	d001      	beq.n	11ed0 <cleanup_stdio+0x10>
   11ecc:	f001 fe94 	bl	13bf8 <_fclose_r>
   11ed0:	68a1      	ldr	r1, [r4, #8]
   11ed2:	4b09      	ldr	r3, [pc, #36]	; (11ef8 <cleanup_stdio+0x38>)
   11ed4:	4299      	cmp	r1, r3
   11ed6:	d002      	beq.n	11ede <cleanup_stdio+0x1e>
   11ed8:	4620      	mov	r0, r4
   11eda:	f001 fe8d 	bl	13bf8 <_fclose_r>
   11ede:	68e1      	ldr	r1, [r4, #12]
   11ee0:	4b06      	ldr	r3, [pc, #24]	; (11efc <cleanup_stdio+0x3c>)
   11ee2:	4299      	cmp	r1, r3
   11ee4:	d004      	beq.n	11ef0 <cleanup_stdio+0x30>
   11ee6:	4620      	mov	r0, r4
   11ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11eec:	f001 be84 	b.w	13bf8 <_fclose_r>
   11ef0:	bd10      	pop	{r4, pc}
   11ef2:	bf00      	nop
   11ef4:	20004e98 	.word	0x20004e98
   11ef8:	20004f00 	.word	0x20004f00
   11efc:	20004f68 	.word	0x20004f68

00011f00 <global_stdio_init.part.0>:
   11f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f04:	4c2a      	ldr	r4, [pc, #168]	; (11fb0 <global_stdio_init.part.0+0xb0>)
   11f06:	4b2b      	ldr	r3, [pc, #172]	; (11fb4 <global_stdio_init.part.0+0xb4>)
   11f08:	482b      	ldr	r0, [pc, #172]	; (11fb8 <global_stdio_init.part.0+0xb8>)
   11f0a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 11fcc <global_stdio_init.part.0+0xcc>
   11f0e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11fd0 <global_stdio_init.part.0+0xd0>
   11f12:	4f2a      	ldr	r7, [pc, #168]	; (11fbc <global_stdio_init.part.0+0xbc>)
   11f14:	6018      	str	r0, [r3, #0]
   11f16:	2500      	movs	r5, #0
   11f18:	2304      	movs	r3, #4
   11f1a:	2208      	movs	r2, #8
   11f1c:	4629      	mov	r1, r5
   11f1e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11f22:	4e27      	ldr	r6, [pc, #156]	; (11fc0 <global_stdio_init.part.0+0xc0>)
   11f24:	6665      	str	r5, [r4, #100]	; 0x64
   11f26:	e9c4 5302 	strd	r5, r3, [r4, #8]
   11f2a:	e9c4 5500 	strd	r5, r5, [r4]
   11f2e:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11f32:	61a5      	str	r5, [r4, #24]
   11f34:	f7ff faba 	bl	114ac <memset>
   11f38:	4b22      	ldr	r3, [pc, #136]	; (11fc4 <global_stdio_init.part.0+0xc4>)
   11f3a:	6763      	str	r3, [r4, #116]	; 0x74
   11f3c:	2208      	movs	r2, #8
   11f3e:	4629      	mov	r1, r5
   11f40:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   11f44:	e9c4 4907 	strd	r4, r9, [r4, #28]
   11f48:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   11f4c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   11f50:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   11f54:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   11f58:	6725      	str	r5, [r4, #112]	; 0x70
   11f5a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   11f5e:	62e6      	str	r6, [r4, #44]	; 0x2c
   11f60:	f7ff faa4 	bl	114ac <memset>
   11f64:	4b18      	ldr	r3, [pc, #96]	; (11fc8 <global_stdio_init.part.0+0xc8>)
   11f66:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   11f6a:	4629      	mov	r1, r5
   11f6c:	f104 0368 	add.w	r3, r4, #104	; 0x68
   11f70:	2208      	movs	r2, #8
   11f72:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   11f76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   11f7a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   11f7e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   11f82:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   11f86:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   11f8a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11f8e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   11f92:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   11f96:	f7ff fa89 	bl	114ac <memset>
   11f9a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   11f9e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   11fa2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   11fa6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   11faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11fae:	bf00      	nop
   11fb0:	20004e98 	.word	0x20004e98
   11fb4:	20004fd0 	.word	0x20004fd0
   11fb8:	00011ea9 	.word	0x00011ea9
   11fbc:	000128ed 	.word	0x000128ed
   11fc0:	0001290d 	.word	0x0001290d
   11fc4:	00010009 	.word	0x00010009
   11fc8:	00020012 	.word	0x00020012
   11fcc:	00012889 	.word	0x00012889
   11fd0:	000128ad 	.word	0x000128ad

00011fd4 <__sinit>:
   11fd4:	b510      	push	{r4, lr}
   11fd6:	4604      	mov	r4, r0
   11fd8:	480a      	ldr	r0, [pc, #40]	; (12004 <__sinit+0x30>)
   11fda:	f7ff faed 	bl	115b8 <__retarget_lock_acquire_recursive>
   11fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11fe0:	b923      	cbnz	r3, 11fec <__sinit+0x18>
   11fe2:	4b09      	ldr	r3, [pc, #36]	; (12008 <__sinit+0x34>)
   11fe4:	4a09      	ldr	r2, [pc, #36]	; (1200c <__sinit+0x38>)
   11fe6:	681b      	ldr	r3, [r3, #0]
   11fe8:	6362      	str	r2, [r4, #52]	; 0x34
   11fea:	b123      	cbz	r3, 11ff6 <__sinit+0x22>
   11fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ff0:	4804      	ldr	r0, [pc, #16]	; (12004 <__sinit+0x30>)
   11ff2:	f7ff bae3 	b.w	115bc <__retarget_lock_release_recursive>
   11ff6:	f7ff ff83 	bl	11f00 <global_stdio_init.part.0>
   11ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ffe:	4801      	ldr	r0, [pc, #4]	; (12004 <__sinit+0x30>)
   12000:	f7ff badc 	b.w	115bc <__retarget_lock_release_recursive>
   12004:	20004e60 	.word	0x20004e60
   12008:	20004fd0 	.word	0x20004fd0
   1200c:	00011ec1 	.word	0x00011ec1

00012010 <__sfp_lock_acquire>:
   12010:	4801      	ldr	r0, [pc, #4]	; (12018 <__sfp_lock_acquire+0x8>)
   12012:	f7ff bad1 	b.w	115b8 <__retarget_lock_acquire_recursive>
   12016:	bf00      	nop
   12018:	20004e60 	.word	0x20004e60

0001201c <__sfp_lock_release>:
   1201c:	4801      	ldr	r0, [pc, #4]	; (12024 <__sfp_lock_release+0x8>)
   1201e:	f7ff bacd 	b.w	115bc <__retarget_lock_release_recursive>
   12022:	bf00      	nop
   12024:	20004e60 	.word	0x20004e60
	...

00012030 <memchr>:
   12030:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12034:	2a10      	cmp	r2, #16
   12036:	db2b      	blt.n	12090 <memchr+0x60>
   12038:	f010 0f07 	tst.w	r0, #7
   1203c:	d008      	beq.n	12050 <memchr+0x20>
   1203e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12042:	3a01      	subs	r2, #1
   12044:	428b      	cmp	r3, r1
   12046:	d02d      	beq.n	120a4 <memchr+0x74>
   12048:	f010 0f07 	tst.w	r0, #7
   1204c:	b342      	cbz	r2, 120a0 <memchr+0x70>
   1204e:	d1f6      	bne.n	1203e <memchr+0xe>
   12050:	b4f0      	push	{r4, r5, r6, r7}
   12052:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12056:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1205a:	f022 0407 	bic.w	r4, r2, #7
   1205e:	f07f 0700 	mvns.w	r7, #0
   12062:	2300      	movs	r3, #0
   12064:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12068:	3c08      	subs	r4, #8
   1206a:	ea85 0501 	eor.w	r5, r5, r1
   1206e:	ea86 0601 	eor.w	r6, r6, r1
   12072:	fa85 f547 	uadd8	r5, r5, r7
   12076:	faa3 f587 	sel	r5, r3, r7
   1207a:	fa86 f647 	uadd8	r6, r6, r7
   1207e:	faa5 f687 	sel	r6, r5, r7
   12082:	b98e      	cbnz	r6, 120a8 <memchr+0x78>
   12084:	d1ee      	bne.n	12064 <memchr+0x34>
   12086:	bcf0      	pop	{r4, r5, r6, r7}
   12088:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1208c:	f002 0207 	and.w	r2, r2, #7
   12090:	b132      	cbz	r2, 120a0 <memchr+0x70>
   12092:	f810 3b01 	ldrb.w	r3, [r0], #1
   12096:	3a01      	subs	r2, #1
   12098:	ea83 0301 	eor.w	r3, r3, r1
   1209c:	b113      	cbz	r3, 120a4 <memchr+0x74>
   1209e:	d1f8      	bne.n	12092 <memchr+0x62>
   120a0:	2000      	movs	r0, #0
   120a2:	4770      	bx	lr
   120a4:	3801      	subs	r0, #1
   120a6:	4770      	bx	lr
   120a8:	2d00      	cmp	r5, #0
   120aa:	bf06      	itte	eq
   120ac:	4635      	moveq	r5, r6
   120ae:	3803      	subeq	r0, #3
   120b0:	3807      	subne	r0, #7
   120b2:	f015 0f01 	tst.w	r5, #1
   120b6:	d107      	bne.n	120c8 <memchr+0x98>
   120b8:	3001      	adds	r0, #1
   120ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   120be:	bf02      	ittt	eq
   120c0:	3001      	addeq	r0, #1
   120c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   120c6:	3001      	addeq	r0, #1
   120c8:	bcf0      	pop	{r4, r5, r6, r7}
   120ca:	3801      	subs	r0, #1
   120cc:	4770      	bx	lr
   120ce:	bf00      	nop
	...

00012100 <strlen>:
   12100:	f890 f000 	pld	[r0]
   12104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12108:	f020 0107 	bic.w	r1, r0, #7
   1210c:	f06f 0c00 	mvn.w	ip, #0
   12110:	f010 0407 	ands.w	r4, r0, #7
   12114:	f891 f020 	pld	[r1, #32]
   12118:	f040 8049 	bne.w	121ae <strlen+0xae>
   1211c:	f04f 0400 	mov.w	r4, #0
   12120:	f06f 0007 	mvn.w	r0, #7
   12124:	e9d1 2300 	ldrd	r2, r3, [r1]
   12128:	f891 f040 	pld	[r1, #64]	; 0x40
   1212c:	f100 0008 	add.w	r0, r0, #8
   12130:	fa82 f24c 	uadd8	r2, r2, ip
   12134:	faa4 f28c 	sel	r2, r4, ip
   12138:	fa83 f34c 	uadd8	r3, r3, ip
   1213c:	faa2 f38c 	sel	r3, r2, ip
   12140:	bb4b      	cbnz	r3, 12196 <strlen+0x96>
   12142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12146:	fa82 f24c 	uadd8	r2, r2, ip
   1214a:	f100 0008 	add.w	r0, r0, #8
   1214e:	faa4 f28c 	sel	r2, r4, ip
   12152:	fa83 f34c 	uadd8	r3, r3, ip
   12156:	faa2 f38c 	sel	r3, r2, ip
   1215a:	b9e3      	cbnz	r3, 12196 <strlen+0x96>
   1215c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12160:	fa82 f24c 	uadd8	r2, r2, ip
   12164:	f100 0008 	add.w	r0, r0, #8
   12168:	faa4 f28c 	sel	r2, r4, ip
   1216c:	fa83 f34c 	uadd8	r3, r3, ip
   12170:	faa2 f38c 	sel	r3, r2, ip
   12174:	b97b      	cbnz	r3, 12196 <strlen+0x96>
   12176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1217a:	f101 0120 	add.w	r1, r1, #32
   1217e:	fa82 f24c 	uadd8	r2, r2, ip
   12182:	f100 0008 	add.w	r0, r0, #8
   12186:	faa4 f28c 	sel	r2, r4, ip
   1218a:	fa83 f34c 	uadd8	r3, r3, ip
   1218e:	faa2 f38c 	sel	r3, r2, ip
   12192:	2b00      	cmp	r3, #0
   12194:	d0c6      	beq.n	12124 <strlen+0x24>
   12196:	2a00      	cmp	r2, #0
   12198:	bf04      	itt	eq
   1219a:	3004      	addeq	r0, #4
   1219c:	461a      	moveq	r2, r3
   1219e:	ba12      	rev	r2, r2
   121a0:	fab2 f282 	clz	r2, r2
   121a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   121a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   121ac:	4770      	bx	lr
   121ae:	e9d1 2300 	ldrd	r2, r3, [r1]
   121b2:	f004 0503 	and.w	r5, r4, #3
   121b6:	f1c4 0000 	rsb	r0, r4, #0
   121ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   121be:	f014 0f04 	tst.w	r4, #4
   121c2:	f891 f040 	pld	[r1, #64]	; 0x40
   121c6:	fa0c f505 	lsl.w	r5, ip, r5
   121ca:	ea62 0205 	orn	r2, r2, r5
   121ce:	bf1c      	itt	ne
   121d0:	ea63 0305 	ornne	r3, r3, r5
   121d4:	4662      	movne	r2, ip
   121d6:	f04f 0400 	mov.w	r4, #0
   121da:	e7a9      	b.n	12130 <strlen+0x30>

000121dc <_realloc_r>:
   121dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121e0:	4617      	mov	r7, r2
   121e2:	2900      	cmp	r1, #0
   121e4:	f000 8098 	beq.w	12318 <_realloc_r+0x13c>
   121e8:	460c      	mov	r4, r1
   121ea:	f107 050b 	add.w	r5, r7, #11
   121ee:	4680      	mov	r8, r0
   121f0:	f7ff fa4a 	bl	11688 <__malloc_lock>
   121f4:	2d16      	cmp	r5, #22
   121f6:	f854 1c04 	ldr.w	r1, [r4, #-4]
   121fa:	d85b      	bhi.n	122b4 <_realloc_r+0xd8>
   121fc:	2510      	movs	r5, #16
   121fe:	462a      	mov	r2, r5
   12200:	42af      	cmp	r7, r5
   12202:	d85c      	bhi.n	122be <_realloc_r+0xe2>
   12204:	f021 0603 	bic.w	r6, r1, #3
   12208:	4296      	cmp	r6, r2
   1220a:	f1a4 0908 	sub.w	r9, r4, #8
   1220e:	da62      	bge.n	122d6 <_realloc_r+0xfa>
   12210:	4bbc      	ldr	r3, [pc, #752]	; (12504 <_realloc_r+0x328>)
   12212:	f8d3 c008 	ldr.w	ip, [r3, #8]
   12216:	eb09 0006 	add.w	r0, r9, r6
   1221a:	4584      	cmp	ip, r0
   1221c:	f000 8097 	beq.w	1234e <_realloc_r+0x172>
   12220:	f8d0 c004 	ldr.w	ip, [r0, #4]
   12224:	f02c 0301 	bic.w	r3, ip, #1
   12228:	4403      	add	r3, r0
   1222a:	685b      	ldr	r3, [r3, #4]
   1222c:	07db      	lsls	r3, r3, #31
   1222e:	d468      	bmi.n	12302 <_realloc_r+0x126>
   12230:	f02c 0c03 	bic.w	ip, ip, #3
   12234:	eb06 030c 	add.w	r3, r6, ip
   12238:	4293      	cmp	r3, r2
   1223a:	da47      	bge.n	122cc <_realloc_r+0xf0>
   1223c:	07cb      	lsls	r3, r1, #31
   1223e:	d410      	bmi.n	12262 <_realloc_r+0x86>
   12240:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12244:	eba9 0a03 	sub.w	sl, r9, r3
   12248:	f8da 3004 	ldr.w	r3, [sl, #4]
   1224c:	f023 0103 	bic.w	r1, r3, #3
   12250:	448c      	add	ip, r1
   12252:	44b4      	add	ip, r6
   12254:	4594      	cmp	ip, r2
   12256:	f280 8111 	bge.w	1247c <_realloc_r+0x2a0>
   1225a:	1873      	adds	r3, r6, r1
   1225c:	4293      	cmp	r3, r2
   1225e:	f280 80e8 	bge.w	12432 <_realloc_r+0x256>
   12262:	4639      	mov	r1, r7
   12264:	4640      	mov	r0, r8
   12266:	f7fe fda5 	bl	10db4 <_malloc_r>
   1226a:	4607      	mov	r7, r0
   1226c:	b1e0      	cbz	r0, 122a8 <_realloc_r+0xcc>
   1226e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12272:	f023 0301 	bic.w	r3, r3, #1
   12276:	444b      	add	r3, r9
   12278:	f1a0 0208 	sub.w	r2, r0, #8
   1227c:	4293      	cmp	r3, r2
   1227e:	f000 80d2 	beq.w	12426 <_realloc_r+0x24a>
   12282:	1f32      	subs	r2, r6, #4
   12284:	2a24      	cmp	r2, #36	; 0x24
   12286:	f200 80f5 	bhi.w	12474 <_realloc_r+0x298>
   1228a:	2a13      	cmp	r2, #19
   1228c:	f200 80ac 	bhi.w	123e8 <_realloc_r+0x20c>
   12290:	4603      	mov	r3, r0
   12292:	4622      	mov	r2, r4
   12294:	6811      	ldr	r1, [r2, #0]
   12296:	6019      	str	r1, [r3, #0]
   12298:	6851      	ldr	r1, [r2, #4]
   1229a:	6059      	str	r1, [r3, #4]
   1229c:	6892      	ldr	r2, [r2, #8]
   1229e:	609a      	str	r2, [r3, #8]
   122a0:	4621      	mov	r1, r4
   122a2:	4640      	mov	r0, r8
   122a4:	f000 f9d6 	bl	12654 <_free_r>
   122a8:	4640      	mov	r0, r8
   122aa:	f7ff f9f3 	bl	11694 <__malloc_unlock>
   122ae:	4638      	mov	r0, r7
   122b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122b4:	f025 0507 	bic.w	r5, r5, #7
   122b8:	2d00      	cmp	r5, #0
   122ba:	462a      	mov	r2, r5
   122bc:	daa0      	bge.n	12200 <_realloc_r+0x24>
   122be:	230c      	movs	r3, #12
   122c0:	f8c8 3000 	str.w	r3, [r8]
   122c4:	2700      	movs	r7, #0
   122c6:	4638      	mov	r0, r7
   122c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122cc:	461e      	mov	r6, r3
   122ce:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   122d2:	60d3      	str	r3, [r2, #12]
   122d4:	609a      	str	r2, [r3, #8]
   122d6:	1b73      	subs	r3, r6, r5
   122d8:	2b0f      	cmp	r3, #15
   122da:	d822      	bhi.n	12322 <_realloc_r+0x146>
   122dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   122e0:	f003 0301 	and.w	r3, r3, #1
   122e4:	4333      	orrs	r3, r6
   122e6:	444e      	add	r6, r9
   122e8:	f8c9 3004 	str.w	r3, [r9, #4]
   122ec:	6873      	ldr	r3, [r6, #4]
   122ee:	f043 0301 	orr.w	r3, r3, #1
   122f2:	6073      	str	r3, [r6, #4]
   122f4:	4640      	mov	r0, r8
   122f6:	4627      	mov	r7, r4
   122f8:	f7ff f9cc 	bl	11694 <__malloc_unlock>
   122fc:	4638      	mov	r0, r7
   122fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12302:	07c9      	lsls	r1, r1, #31
   12304:	d4ad      	bmi.n	12262 <_realloc_r+0x86>
   12306:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1230a:	eba9 0a03 	sub.w	sl, r9, r3
   1230e:	f8da 1004 	ldr.w	r1, [sl, #4]
   12312:	f021 0103 	bic.w	r1, r1, #3
   12316:	e7a0      	b.n	1225a <_realloc_r+0x7e>
   12318:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1231c:	4611      	mov	r1, r2
   1231e:	f7fe bd49 	b.w	10db4 <_malloc_r>
   12322:	f8d9 2004 	ldr.w	r2, [r9, #4]
   12326:	eb09 0105 	add.w	r1, r9, r5
   1232a:	f002 0201 	and.w	r2, r2, #1
   1232e:	444e      	add	r6, r9
   12330:	f043 0301 	orr.w	r3, r3, #1
   12334:	432a      	orrs	r2, r5
   12336:	f8c9 2004 	str.w	r2, [r9, #4]
   1233a:	604b      	str	r3, [r1, #4]
   1233c:	6873      	ldr	r3, [r6, #4]
   1233e:	f043 0301 	orr.w	r3, r3, #1
   12342:	3108      	adds	r1, #8
   12344:	6073      	str	r3, [r6, #4]
   12346:	4640      	mov	r0, r8
   12348:	f000 f984 	bl	12654 <_free_r>
   1234c:	e7d2      	b.n	122f4 <_realloc_r+0x118>
   1234e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12352:	f020 0b03 	bic.w	fp, r0, #3
   12356:	eb06 0c0b 	add.w	ip, r6, fp
   1235a:	f105 0010 	add.w	r0, r5, #16
   1235e:	4584      	cmp	ip, r0
   12360:	da4d      	bge.n	123fe <_realloc_r+0x222>
   12362:	07c9      	lsls	r1, r1, #31
   12364:	f53f af7d 	bmi.w	12262 <_realloc_r+0x86>
   12368:	f854 1c08 	ldr.w	r1, [r4, #-8]
   1236c:	eba9 0a01 	sub.w	sl, r9, r1
   12370:	f8da 1004 	ldr.w	r1, [sl, #4]
   12374:	f021 0103 	bic.w	r1, r1, #3
   12378:	448b      	add	fp, r1
   1237a:	44b3      	add	fp, r6
   1237c:	4558      	cmp	r0, fp
   1237e:	f73f af6c 	bgt.w	1225a <_realloc_r+0x7e>
   12382:	4657      	mov	r7, sl
   12384:	f8da 100c 	ldr.w	r1, [sl, #12]
   12388:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1238c:	1f32      	subs	r2, r6, #4
   1238e:	2a24      	cmp	r2, #36	; 0x24
   12390:	60c1      	str	r1, [r0, #12]
   12392:	6088      	str	r0, [r1, #8]
   12394:	f200 80db 	bhi.w	1254e <_realloc_r+0x372>
   12398:	2a13      	cmp	r2, #19
   1239a:	f240 80d6 	bls.w	1254a <_realloc_r+0x36e>
   1239e:	6821      	ldr	r1, [r4, #0]
   123a0:	f8ca 1008 	str.w	r1, [sl, #8]
   123a4:	6861      	ldr	r1, [r4, #4]
   123a6:	f8ca 100c 	str.w	r1, [sl, #12]
   123aa:	2a1b      	cmp	r2, #27
   123ac:	f200 80df 	bhi.w	1256e <_realloc_r+0x392>
   123b0:	3408      	adds	r4, #8
   123b2:	f10a 0210 	add.w	r2, sl, #16
   123b6:	6821      	ldr	r1, [r4, #0]
   123b8:	6011      	str	r1, [r2, #0]
   123ba:	6861      	ldr	r1, [r4, #4]
   123bc:	6051      	str	r1, [r2, #4]
   123be:	68a1      	ldr	r1, [r4, #8]
   123c0:	6091      	str	r1, [r2, #8]
   123c2:	eb0a 0105 	add.w	r1, sl, r5
   123c6:	ebab 0205 	sub.w	r2, fp, r5
   123ca:	f042 0201 	orr.w	r2, r2, #1
   123ce:	6099      	str	r1, [r3, #8]
   123d0:	604a      	str	r2, [r1, #4]
   123d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   123d6:	f003 0301 	and.w	r3, r3, #1
   123da:	432b      	orrs	r3, r5
   123dc:	4640      	mov	r0, r8
   123de:	f8ca 3004 	str.w	r3, [sl, #4]
   123e2:	f7ff f957 	bl	11694 <__malloc_unlock>
   123e6:	e76e      	b.n	122c6 <_realloc_r+0xea>
   123e8:	6823      	ldr	r3, [r4, #0]
   123ea:	6003      	str	r3, [r0, #0]
   123ec:	6863      	ldr	r3, [r4, #4]
   123ee:	6043      	str	r3, [r0, #4]
   123f0:	2a1b      	cmp	r2, #27
   123f2:	d868      	bhi.n	124c6 <_realloc_r+0x2ea>
   123f4:	f104 0208 	add.w	r2, r4, #8
   123f8:	f100 0308 	add.w	r3, r0, #8
   123fc:	e74a      	b.n	12294 <_realloc_r+0xb8>
   123fe:	eb09 0205 	add.w	r2, r9, r5
   12402:	609a      	str	r2, [r3, #8]
   12404:	ebac 0305 	sub.w	r3, ip, r5
   12408:	f043 0301 	orr.w	r3, r3, #1
   1240c:	6053      	str	r3, [r2, #4]
   1240e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12412:	f003 0301 	and.w	r3, r3, #1
   12416:	432b      	orrs	r3, r5
   12418:	4640      	mov	r0, r8
   1241a:	f844 3c04 	str.w	r3, [r4, #-4]
   1241e:	f7ff f939 	bl	11694 <__malloc_unlock>
   12422:	4627      	mov	r7, r4
   12424:	e74f      	b.n	122c6 <_realloc_r+0xea>
   12426:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1242a:	f023 0303 	bic.w	r3, r3, #3
   1242e:	441e      	add	r6, r3
   12430:	e751      	b.n	122d6 <_realloc_r+0xfa>
   12432:	4657      	mov	r7, sl
   12434:	f8da 100c 	ldr.w	r1, [sl, #12]
   12438:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1243c:	1f32      	subs	r2, r6, #4
   1243e:	2a24      	cmp	r2, #36	; 0x24
   12440:	60c1      	str	r1, [r0, #12]
   12442:	6088      	str	r0, [r1, #8]
   12444:	d84c      	bhi.n	124e0 <_realloc_r+0x304>
   12446:	2a13      	cmp	r2, #19
   12448:	d948      	bls.n	124dc <_realloc_r+0x300>
   1244a:	6821      	ldr	r1, [r4, #0]
   1244c:	f8ca 1008 	str.w	r1, [sl, #8]
   12450:	6861      	ldr	r1, [r4, #4]
   12452:	f8ca 100c 	str.w	r1, [sl, #12]
   12456:	2a1b      	cmp	r2, #27
   12458:	d856      	bhi.n	12508 <_realloc_r+0x32c>
   1245a:	3408      	adds	r4, #8
   1245c:	f10a 0210 	add.w	r2, sl, #16
   12460:	461e      	mov	r6, r3
   12462:	6823      	ldr	r3, [r4, #0]
   12464:	6013      	str	r3, [r2, #0]
   12466:	6863      	ldr	r3, [r4, #4]
   12468:	6053      	str	r3, [r2, #4]
   1246a:	68a3      	ldr	r3, [r4, #8]
   1246c:	6093      	str	r3, [r2, #8]
   1246e:	46d1      	mov	r9, sl
   12470:	463c      	mov	r4, r7
   12472:	e730      	b.n	122d6 <_realloc_r+0xfa>
   12474:	4621      	mov	r1, r4
   12476:	f7fe ff7d 	bl	11374 <memmove>
   1247a:	e711      	b.n	122a0 <_realloc_r+0xc4>
   1247c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   12480:	4657      	mov	r7, sl
   12482:	60cb      	str	r3, [r1, #12]
   12484:	6099      	str	r1, [r3, #8]
   12486:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1248a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1248e:	60cb      	str	r3, [r1, #12]
   12490:	1f32      	subs	r2, r6, #4
   12492:	2a24      	cmp	r2, #36	; 0x24
   12494:	6099      	str	r1, [r3, #8]
   12496:	d82d      	bhi.n	124f4 <_realloc_r+0x318>
   12498:	2a13      	cmp	r2, #19
   1249a:	d929      	bls.n	124f0 <_realloc_r+0x314>
   1249c:	6823      	ldr	r3, [r4, #0]
   1249e:	f8ca 3008 	str.w	r3, [sl, #8]
   124a2:	6863      	ldr	r3, [r4, #4]
   124a4:	f8ca 300c 	str.w	r3, [sl, #12]
   124a8:	2a1b      	cmp	r2, #27
   124aa:	d842      	bhi.n	12532 <_realloc_r+0x356>
   124ac:	3408      	adds	r4, #8
   124ae:	f10a 0310 	add.w	r3, sl, #16
   124b2:	6822      	ldr	r2, [r4, #0]
   124b4:	601a      	str	r2, [r3, #0]
   124b6:	6862      	ldr	r2, [r4, #4]
   124b8:	605a      	str	r2, [r3, #4]
   124ba:	68a2      	ldr	r2, [r4, #8]
   124bc:	609a      	str	r2, [r3, #8]
   124be:	4666      	mov	r6, ip
   124c0:	46d1      	mov	r9, sl
   124c2:	463c      	mov	r4, r7
   124c4:	e707      	b.n	122d6 <_realloc_r+0xfa>
   124c6:	68a3      	ldr	r3, [r4, #8]
   124c8:	6083      	str	r3, [r0, #8]
   124ca:	68e3      	ldr	r3, [r4, #12]
   124cc:	60c3      	str	r3, [r0, #12]
   124ce:	2a24      	cmp	r2, #36	; 0x24
   124d0:	d026      	beq.n	12520 <_realloc_r+0x344>
   124d2:	f104 0210 	add.w	r2, r4, #16
   124d6:	f100 0310 	add.w	r3, r0, #16
   124da:	e6db      	b.n	12294 <_realloc_r+0xb8>
   124dc:	463a      	mov	r2, r7
   124de:	e7bf      	b.n	12460 <_realloc_r+0x284>
   124e0:	4621      	mov	r1, r4
   124e2:	4638      	mov	r0, r7
   124e4:	461e      	mov	r6, r3
   124e6:	46d1      	mov	r9, sl
   124e8:	f7fe ff44 	bl	11374 <memmove>
   124ec:	463c      	mov	r4, r7
   124ee:	e6f2      	b.n	122d6 <_realloc_r+0xfa>
   124f0:	463b      	mov	r3, r7
   124f2:	e7de      	b.n	124b2 <_realloc_r+0x2d6>
   124f4:	4621      	mov	r1, r4
   124f6:	4638      	mov	r0, r7
   124f8:	4666      	mov	r6, ip
   124fa:	46d1      	mov	r9, sl
   124fc:	f7fe ff3a 	bl	11374 <memmove>
   12500:	463c      	mov	r4, r7
   12502:	e6e8      	b.n	122d6 <_realloc_r+0xfa>
   12504:	20003558 	.word	0x20003558
   12508:	68a1      	ldr	r1, [r4, #8]
   1250a:	f8ca 1010 	str.w	r1, [sl, #16]
   1250e:	68e1      	ldr	r1, [r4, #12]
   12510:	f8ca 1014 	str.w	r1, [sl, #20]
   12514:	2a24      	cmp	r2, #36	; 0x24
   12516:	d020      	beq.n	1255a <_realloc_r+0x37e>
   12518:	3410      	adds	r4, #16
   1251a:	f10a 0218 	add.w	r2, sl, #24
   1251e:	e79f      	b.n	12460 <_realloc_r+0x284>
   12520:	6923      	ldr	r3, [r4, #16]
   12522:	6103      	str	r3, [r0, #16]
   12524:	6961      	ldr	r1, [r4, #20]
   12526:	6141      	str	r1, [r0, #20]
   12528:	f104 0218 	add.w	r2, r4, #24
   1252c:	f100 0318 	add.w	r3, r0, #24
   12530:	e6b0      	b.n	12294 <_realloc_r+0xb8>
   12532:	68a3      	ldr	r3, [r4, #8]
   12534:	f8ca 3010 	str.w	r3, [sl, #16]
   12538:	68e3      	ldr	r3, [r4, #12]
   1253a:	f8ca 3014 	str.w	r3, [sl, #20]
   1253e:	2a24      	cmp	r2, #36	; 0x24
   12540:	d021      	beq.n	12586 <_realloc_r+0x3aa>
   12542:	3410      	adds	r4, #16
   12544:	f10a 0318 	add.w	r3, sl, #24
   12548:	e7b3      	b.n	124b2 <_realloc_r+0x2d6>
   1254a:	463a      	mov	r2, r7
   1254c:	e733      	b.n	123b6 <_realloc_r+0x1da>
   1254e:	4621      	mov	r1, r4
   12550:	4638      	mov	r0, r7
   12552:	f7fe ff0f 	bl	11374 <memmove>
   12556:	4b16      	ldr	r3, [pc, #88]	; (125b0 <_realloc_r+0x3d4>)
   12558:	e733      	b.n	123c2 <_realloc_r+0x1e6>
   1255a:	6922      	ldr	r2, [r4, #16]
   1255c:	f8ca 2018 	str.w	r2, [sl, #24]
   12560:	6962      	ldr	r2, [r4, #20]
   12562:	f8ca 201c 	str.w	r2, [sl, #28]
   12566:	3418      	adds	r4, #24
   12568:	f10a 0220 	add.w	r2, sl, #32
   1256c:	e778      	b.n	12460 <_realloc_r+0x284>
   1256e:	68a1      	ldr	r1, [r4, #8]
   12570:	f8ca 1010 	str.w	r1, [sl, #16]
   12574:	68e1      	ldr	r1, [r4, #12]
   12576:	f8ca 1014 	str.w	r1, [sl, #20]
   1257a:	2a24      	cmp	r2, #36	; 0x24
   1257c:	d00d      	beq.n	1259a <_realloc_r+0x3be>
   1257e:	3410      	adds	r4, #16
   12580:	f10a 0218 	add.w	r2, sl, #24
   12584:	e717      	b.n	123b6 <_realloc_r+0x1da>
   12586:	6923      	ldr	r3, [r4, #16]
   12588:	f8ca 3018 	str.w	r3, [sl, #24]
   1258c:	6963      	ldr	r3, [r4, #20]
   1258e:	f8ca 301c 	str.w	r3, [sl, #28]
   12592:	3418      	adds	r4, #24
   12594:	f10a 0320 	add.w	r3, sl, #32
   12598:	e78b      	b.n	124b2 <_realloc_r+0x2d6>
   1259a:	6922      	ldr	r2, [r4, #16]
   1259c:	f8ca 2018 	str.w	r2, [sl, #24]
   125a0:	6962      	ldr	r2, [r4, #20]
   125a2:	f8ca 201c 	str.w	r2, [sl, #28]
   125a6:	3418      	adds	r4, #24
   125a8:	f10a 0220 	add.w	r2, sl, #32
   125ac:	e703      	b.n	123b6 <_realloc_r+0x1da>
   125ae:	bf00      	nop
   125b0:	20003558 	.word	0x20003558

000125b4 <_malloc_trim_r>:
   125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125b6:	4f24      	ldr	r7, [pc, #144]	; (12648 <_malloc_trim_r+0x94>)
   125b8:	460c      	mov	r4, r1
   125ba:	4606      	mov	r6, r0
   125bc:	f7ff f864 	bl	11688 <__malloc_lock>
   125c0:	68bb      	ldr	r3, [r7, #8]
   125c2:	685d      	ldr	r5, [r3, #4]
   125c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   125c8:	310f      	adds	r1, #15
   125ca:	f025 0503 	bic.w	r5, r5, #3
   125ce:	194b      	adds	r3, r1, r5
   125d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   125d4:	f023 030f 	bic.w	r3, r3, #15
   125d8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   125dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   125e0:	db07      	blt.n	125f2 <_malloc_trim_r+0x3e>
   125e2:	2100      	movs	r1, #0
   125e4:	4630      	mov	r0, r6
   125e6:	f000 f9a3 	bl	12930 <_sbrk_r>
   125ea:	68bb      	ldr	r3, [r7, #8]
   125ec:	442b      	add	r3, r5
   125ee:	4298      	cmp	r0, r3
   125f0:	d004      	beq.n	125fc <_malloc_trim_r+0x48>
   125f2:	4630      	mov	r0, r6
   125f4:	f7ff f84e 	bl	11694 <__malloc_unlock>
   125f8:	2000      	movs	r0, #0
   125fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125fc:	4261      	negs	r1, r4
   125fe:	4630      	mov	r0, r6
   12600:	f000 f996 	bl	12930 <_sbrk_r>
   12604:	3001      	adds	r0, #1
   12606:	d00d      	beq.n	12624 <_malloc_trim_r+0x70>
   12608:	4a10      	ldr	r2, [pc, #64]	; (1264c <_malloc_trim_r+0x98>)
   1260a:	68bb      	ldr	r3, [r7, #8]
   1260c:	1b2d      	subs	r5, r5, r4
   1260e:	f045 0501 	orr.w	r5, r5, #1
   12612:	605d      	str	r5, [r3, #4]
   12614:	6813      	ldr	r3, [r2, #0]
   12616:	4630      	mov	r0, r6
   12618:	1b1b      	subs	r3, r3, r4
   1261a:	6013      	str	r3, [r2, #0]
   1261c:	f7ff f83a 	bl	11694 <__malloc_unlock>
   12620:	2001      	movs	r0, #1
   12622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12624:	2100      	movs	r1, #0
   12626:	4630      	mov	r0, r6
   12628:	f000 f982 	bl	12930 <_sbrk_r>
   1262c:	68ba      	ldr	r2, [r7, #8]
   1262e:	1a83      	subs	r3, r0, r2
   12630:	2b0f      	cmp	r3, #15
   12632:	ddde      	ble.n	125f2 <_malloc_trim_r+0x3e>
   12634:	f043 0301 	orr.w	r3, r3, #1
   12638:	6053      	str	r3, [r2, #4]
   1263a:	4b05      	ldr	r3, [pc, #20]	; (12650 <_malloc_trim_r+0x9c>)
   1263c:	4903      	ldr	r1, [pc, #12]	; (1264c <_malloc_trim_r+0x98>)
   1263e:	681b      	ldr	r3, [r3, #0]
   12640:	1ac0      	subs	r0, r0, r3
   12642:	6008      	str	r0, [r1, #0]
   12644:	e7d5      	b.n	125f2 <_malloc_trim_r+0x3e>
   12646:	bf00      	nop
   12648:	20003558 	.word	0x20003558
   1264c:	20004e64 	.word	0x20004e64
   12650:	20003960 	.word	0x20003960

00012654 <_free_r>:
   12654:	2900      	cmp	r1, #0
   12656:	d061      	beq.n	1271c <_free_r+0xc8>
   12658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1265a:	460c      	mov	r4, r1
   1265c:	4606      	mov	r6, r0
   1265e:	f7ff f813 	bl	11688 <__malloc_lock>
   12662:	f854 2c04 	ldr.w	r2, [r4, #-4]
   12666:	4f7b      	ldr	r7, [pc, #492]	; (12854 <_free_r+0x200>)
   12668:	f1a4 0508 	sub.w	r5, r4, #8
   1266c:	f022 0101 	bic.w	r1, r2, #1
   12670:	eb05 0c01 	add.w	ip, r5, r1
   12674:	68b8      	ldr	r0, [r7, #8]
   12676:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1267a:	4560      	cmp	r0, ip
   1267c:	f023 0303 	bic.w	r3, r3, #3
   12680:	f000 808b 	beq.w	1279a <_free_r+0x146>
   12684:	07d2      	lsls	r2, r2, #31
   12686:	f8cc 3004 	str.w	r3, [ip, #4]
   1268a:	d432      	bmi.n	126f2 <_free_r+0x9e>
   1268c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12690:	1aad      	subs	r5, r5, r2
   12692:	4411      	add	r1, r2
   12694:	68aa      	ldr	r2, [r5, #8]
   12696:	f107 0008 	add.w	r0, r7, #8
   1269a:	4282      	cmp	r2, r0
   1269c:	d06a      	beq.n	12774 <_free_r+0x120>
   1269e:	eb0c 0403 	add.w	r4, ip, r3
   126a2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   126a6:	68ec      	ldr	r4, [r5, #12]
   126a8:	60d4      	str	r4, [r2, #12]
   126aa:	f01e 0f01 	tst.w	lr, #1
   126ae:	60a2      	str	r2, [r4, #8]
   126b0:	f000 8097 	beq.w	127e2 <_free_r+0x18e>
   126b4:	f041 0301 	orr.w	r3, r1, #1
   126b8:	606b      	str	r3, [r5, #4]
   126ba:	f8cc 1000 	str.w	r1, [ip]
   126be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   126c2:	d235      	bcs.n	12730 <_free_r+0xdc>
   126c4:	6878      	ldr	r0, [r7, #4]
   126c6:	08cb      	lsrs	r3, r1, #3
   126c8:	2201      	movs	r2, #1
   126ca:	0949      	lsrs	r1, r1, #5
   126cc:	3301      	adds	r3, #1
   126ce:	408a      	lsls	r2, r1
   126d0:	4302      	orrs	r2, r0
   126d2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   126d6:	607a      	str	r2, [r7, #4]
   126d8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   126dc:	3a08      	subs	r2, #8
   126de:	e9c5 1202 	strd	r1, r2, [r5, #8]
   126e2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   126e6:	60cd      	str	r5, [r1, #12]
   126e8:	4630      	mov	r0, r6
   126ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   126ee:	f7fe bfd1 	b.w	11694 <__malloc_unlock>
   126f2:	eb0c 0203 	add.w	r2, ip, r3
   126f6:	6852      	ldr	r2, [r2, #4]
   126f8:	07d0      	lsls	r0, r2, #31
   126fa:	d410      	bmi.n	1271e <_free_r+0xca>
   126fc:	4419      	add	r1, r3
   126fe:	f107 0008 	add.w	r0, r7, #8
   12702:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12706:	4283      	cmp	r3, r0
   12708:	d073      	beq.n	127f2 <_free_r+0x19e>
   1270a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1270e:	60da      	str	r2, [r3, #12]
   12710:	6093      	str	r3, [r2, #8]
   12712:	f041 0301 	orr.w	r3, r1, #1
   12716:	606b      	str	r3, [r5, #4]
   12718:	5069      	str	r1, [r5, r1]
   1271a:	e7d0      	b.n	126be <_free_r+0x6a>
   1271c:	4770      	bx	lr
   1271e:	f041 0301 	orr.w	r3, r1, #1
   12722:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12726:	f844 3c04 	str.w	r3, [r4, #-4]
   1272a:	f8cc 1000 	str.w	r1, [ip]
   1272e:	d3c9      	bcc.n	126c4 <_free_r+0x70>
   12730:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12734:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12738:	d248      	bcs.n	127cc <_free_r+0x178>
   1273a:	098b      	lsrs	r3, r1, #6
   1273c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12740:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12744:	00c3      	lsls	r3, r0, #3
   12746:	18f8      	adds	r0, r7, r3
   12748:	58fb      	ldr	r3, [r7, r3]
   1274a:	3808      	subs	r0, #8
   1274c:	4298      	cmp	r0, r3
   1274e:	d059      	beq.n	12804 <_free_r+0x1b0>
   12750:	685a      	ldr	r2, [r3, #4]
   12752:	f022 0203 	bic.w	r2, r2, #3
   12756:	428a      	cmp	r2, r1
   12758:	d902      	bls.n	12760 <_free_r+0x10c>
   1275a:	689b      	ldr	r3, [r3, #8]
   1275c:	4298      	cmp	r0, r3
   1275e:	d1f7      	bne.n	12750 <_free_r+0xfc>
   12760:	68d8      	ldr	r0, [r3, #12]
   12762:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12766:	6085      	str	r5, [r0, #8]
   12768:	60dd      	str	r5, [r3, #12]
   1276a:	4630      	mov	r0, r6
   1276c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12770:	f7fe bf90 	b.w	11694 <__malloc_unlock>
   12774:	eb0c 0203 	add.w	r2, ip, r3
   12778:	6852      	ldr	r2, [r2, #4]
   1277a:	07d2      	lsls	r2, r2, #31
   1277c:	d463      	bmi.n	12846 <_free_r+0x1f2>
   1277e:	440b      	add	r3, r1
   12780:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12784:	60ca      	str	r2, [r1, #12]
   12786:	6091      	str	r1, [r2, #8]
   12788:	f043 0201 	orr.w	r2, r3, #1
   1278c:	606a      	str	r2, [r5, #4]
   1278e:	4630      	mov	r0, r6
   12790:	50eb      	str	r3, [r5, r3]
   12792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12796:	f7fe bf7d 	b.w	11694 <__malloc_unlock>
   1279a:	440b      	add	r3, r1
   1279c:	07d1      	lsls	r1, r2, #31
   1279e:	d407      	bmi.n	127b0 <_free_r+0x15c>
   127a0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   127a4:	1aad      	subs	r5, r5, r2
   127a6:	4413      	add	r3, r2
   127a8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   127ac:	60ca      	str	r2, [r1, #12]
   127ae:	6091      	str	r1, [r2, #8]
   127b0:	f043 0201 	orr.w	r2, r3, #1
   127b4:	606a      	str	r2, [r5, #4]
   127b6:	4a28      	ldr	r2, [pc, #160]	; (12858 <_free_r+0x204>)
   127b8:	60bd      	str	r5, [r7, #8]
   127ba:	6812      	ldr	r2, [r2, #0]
   127bc:	429a      	cmp	r2, r3
   127be:	d893      	bhi.n	126e8 <_free_r+0x94>
   127c0:	4b26      	ldr	r3, [pc, #152]	; (1285c <_free_r+0x208>)
   127c2:	4630      	mov	r0, r6
   127c4:	6819      	ldr	r1, [r3, #0]
   127c6:	f7ff fef5 	bl	125b4 <_malloc_trim_r>
   127ca:	e78d      	b.n	126e8 <_free_r+0x94>
   127cc:	2b14      	cmp	r3, #20
   127ce:	d90a      	bls.n	127e6 <_free_r+0x192>
   127d0:	2b54      	cmp	r3, #84	; 0x54
   127d2:	d81f      	bhi.n	12814 <_free_r+0x1c0>
   127d4:	0b0b      	lsrs	r3, r1, #12
   127d6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   127da:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   127de:	00c3      	lsls	r3, r0, #3
   127e0:	e7b1      	b.n	12746 <_free_r+0xf2>
   127e2:	4419      	add	r1, r3
   127e4:	e78d      	b.n	12702 <_free_r+0xae>
   127e6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   127ea:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   127ee:	00c3      	lsls	r3, r0, #3
   127f0:	e7a9      	b.n	12746 <_free_r+0xf2>
   127f2:	f041 0301 	orr.w	r3, r1, #1
   127f6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   127fa:	e9c5 0002 	strd	r0, r0, [r5, #8]
   127fe:	606b      	str	r3, [r5, #4]
   12800:	5069      	str	r1, [r5, r1]
   12802:	e771      	b.n	126e8 <_free_r+0x94>
   12804:	6879      	ldr	r1, [r7, #4]
   12806:	1092      	asrs	r2, r2, #2
   12808:	2401      	movs	r4, #1
   1280a:	fa04 f202 	lsl.w	r2, r4, r2
   1280e:	430a      	orrs	r2, r1
   12810:	607a      	str	r2, [r7, #4]
   12812:	e7a6      	b.n	12762 <_free_r+0x10e>
   12814:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12818:	d806      	bhi.n	12828 <_free_r+0x1d4>
   1281a:	0bcb      	lsrs	r3, r1, #15
   1281c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12820:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12824:	00c3      	lsls	r3, r0, #3
   12826:	e78e      	b.n	12746 <_free_r+0xf2>
   12828:	f240 5254 	movw	r2, #1364	; 0x554
   1282c:	4293      	cmp	r3, r2
   1282e:	d806      	bhi.n	1283e <_free_r+0x1ea>
   12830:	0c8b      	lsrs	r3, r1, #18
   12832:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12836:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1283a:	00c3      	lsls	r3, r0, #3
   1283c:	e783      	b.n	12746 <_free_r+0xf2>
   1283e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12842:	227e      	movs	r2, #126	; 0x7e
   12844:	e77f      	b.n	12746 <_free_r+0xf2>
   12846:	f041 0301 	orr.w	r3, r1, #1
   1284a:	606b      	str	r3, [r5, #4]
   1284c:	f8cc 1000 	str.w	r1, [ip]
   12850:	e74a      	b.n	126e8 <_free_r+0x94>
   12852:	bf00      	nop
   12854:	20003558 	.word	0x20003558
   12858:	20003964 	.word	0x20003964
   1285c:	20004e94 	.word	0x20004e94

00012860 <fiprintf>:
   12860:	b40e      	push	{r1, r2, r3}
   12862:	b510      	push	{r4, lr}
   12864:	b083      	sub	sp, #12
   12866:	ab05      	add	r3, sp, #20
   12868:	4c06      	ldr	r4, [pc, #24]	; (12884 <fiprintf+0x24>)
   1286a:	f853 2b04 	ldr.w	r2, [r3], #4
   1286e:	9301      	str	r3, [sp, #4]
   12870:	4601      	mov	r1, r0
   12872:	6820      	ldr	r0, [r4, #0]
   12874:	f000 f8e4 	bl	12a40 <_vfiprintf_r>
   12878:	b003      	add	sp, #12
   1287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1287e:	b003      	add	sp, #12
   12880:	4770      	bx	lr
   12882:	bf00      	nop
   12884:	20003974 	.word	0x20003974

00012888 <__sread>:
   12888:	b510      	push	{r4, lr}
   1288a:	460c      	mov	r4, r1
   1288c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12890:	f002 fb12 	bl	14eb8 <_read_r>
   12894:	2800      	cmp	r0, #0
   12896:	db03      	blt.n	128a0 <__sread+0x18>
   12898:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1289a:	4403      	add	r3, r0
   1289c:	6523      	str	r3, [r4, #80]	; 0x50
   1289e:	bd10      	pop	{r4, pc}
   128a0:	89a3      	ldrh	r3, [r4, #12]
   128a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   128a6:	81a3      	strh	r3, [r4, #12]
   128a8:	bd10      	pop	{r4, pc}
   128aa:	bf00      	nop

000128ac <__swrite>:
   128ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128b0:	460c      	mov	r4, r1
   128b2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   128b6:	461f      	mov	r7, r3
   128b8:	05cb      	lsls	r3, r1, #23
   128ba:	4605      	mov	r5, r0
   128bc:	4616      	mov	r6, r2
   128be:	d40b      	bmi.n	128d8 <__swrite+0x2c>
   128c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   128c4:	81a1      	strh	r1, [r4, #12]
   128c6:	463b      	mov	r3, r7
   128c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   128cc:	4632      	mov	r2, r6
   128ce:	4628      	mov	r0, r5
   128d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   128d4:	f000 b862 	b.w	1299c <_write_r>
   128d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   128dc:	2302      	movs	r3, #2
   128de:	2200      	movs	r2, #0
   128e0:	f002 fad4 	bl	14e8c <_lseek_r>
   128e4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   128e8:	e7ea      	b.n	128c0 <__swrite+0x14>
   128ea:	bf00      	nop

000128ec <__sseek>:
   128ec:	b510      	push	{r4, lr}
   128ee:	460c      	mov	r4, r1
   128f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   128f4:	f002 faca 	bl	14e8c <_lseek_r>
   128f8:	89a3      	ldrh	r3, [r4, #12]
   128fa:	1c42      	adds	r2, r0, #1
   128fc:	bf0e      	itee	eq
   128fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   12902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   12906:	6520      	strne	r0, [r4, #80]	; 0x50
   12908:	81a3      	strh	r3, [r4, #12]
   1290a:	bd10      	pop	{r4, pc}

0001290c <__sclose>:
   1290c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12910:	f002 b9c0 	b.w	14c94 <_close_r>

00012914 <__ascii_wctomb>:
   12914:	b149      	cbz	r1, 1292a <__ascii_wctomb+0x16>
   12916:	2aff      	cmp	r2, #255	; 0xff
   12918:	d802      	bhi.n	12920 <__ascii_wctomb+0xc>
   1291a:	700a      	strb	r2, [r1, #0]
   1291c:	2001      	movs	r0, #1
   1291e:	4770      	bx	lr
   12920:	238a      	movs	r3, #138	; 0x8a
   12922:	6003      	str	r3, [r0, #0]
   12924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12928:	4770      	bx	lr
   1292a:	4608      	mov	r0, r1
   1292c:	4770      	bx	lr
   1292e:	bf00      	nop

00012930 <_sbrk_r>:
   12930:	b538      	push	{r3, r4, r5, lr}
   12932:	4d07      	ldr	r5, [pc, #28]	; (12950 <_sbrk_r+0x20>)
   12934:	2200      	movs	r2, #0
   12936:	4604      	mov	r4, r0
   12938:	4608      	mov	r0, r1
   1293a:	602a      	str	r2, [r5, #0]
   1293c:	f7fb fae0 	bl	df00 <_sbrk>
   12940:	1c43      	adds	r3, r0, #1
   12942:	d000      	beq.n	12946 <_sbrk_r+0x16>
   12944:	bd38      	pop	{r3, r4, r5, pc}
   12946:	682b      	ldr	r3, [r5, #0]
   12948:	2b00      	cmp	r3, #0
   1294a:	d0fb      	beq.n	12944 <_sbrk_r+0x14>
   1294c:	6023      	str	r3, [r4, #0]
   1294e:	bd38      	pop	{r3, r4, r5, pc}
   12950:	20005098 	.word	0x20005098

00012954 <_fwalk_sglue>:
   12954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12958:	4680      	mov	r8, r0
   1295a:	460f      	mov	r7, r1
   1295c:	4616      	mov	r6, r2
   1295e:	f04f 0900 	mov.w	r9, #0
   12962:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12966:	3d01      	subs	r5, #1
   12968:	d411      	bmi.n	1298e <_fwalk_sglue+0x3a>
   1296a:	89a3      	ldrh	r3, [r4, #12]
   1296c:	2b01      	cmp	r3, #1
   1296e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12972:	d908      	bls.n	12986 <_fwalk_sglue+0x32>
   12974:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12978:	3301      	adds	r3, #1
   1297a:	4621      	mov	r1, r4
   1297c:	d003      	beq.n	12986 <_fwalk_sglue+0x32>
   1297e:	4640      	mov	r0, r8
   12980:	47b8      	blx	r7
   12982:	ea49 0900 	orr.w	r9, r9, r0
   12986:	1c6b      	adds	r3, r5, #1
   12988:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1298c:	d1ed      	bne.n	1296a <_fwalk_sglue+0x16>
   1298e:	6836      	ldr	r6, [r6, #0]
   12990:	2e00      	cmp	r6, #0
   12992:	d1e6      	bne.n	12962 <_fwalk_sglue+0xe>
   12994:	4648      	mov	r0, r9
   12996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1299a:	bf00      	nop

0001299c <_write_r>:
   1299c:	b538      	push	{r3, r4, r5, lr}
   1299e:	460c      	mov	r4, r1
   129a0:	4d08      	ldr	r5, [pc, #32]	; (129c4 <_write_r+0x28>)
   129a2:	4684      	mov	ip, r0
   129a4:	4611      	mov	r1, r2
   129a6:	4620      	mov	r0, r4
   129a8:	461a      	mov	r2, r3
   129aa:	2300      	movs	r3, #0
   129ac:	602b      	str	r3, [r5, #0]
   129ae:	4664      	mov	r4, ip
   129b0:	f7f9 ff86 	bl	c8c0 <_write>
   129b4:	1c43      	adds	r3, r0, #1
   129b6:	d000      	beq.n	129ba <_write_r+0x1e>
   129b8:	bd38      	pop	{r3, r4, r5, pc}
   129ba:	682b      	ldr	r3, [r5, #0]
   129bc:	2b00      	cmp	r3, #0
   129be:	d0fb      	beq.n	129b8 <_write_r+0x1c>
   129c0:	6023      	str	r3, [r4, #0]
   129c2:	bd38      	pop	{r3, r4, r5, pc}
   129c4:	20005098 	.word	0x20005098

000129c8 <__sprint_r.part.0>:
   129c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   129ce:	049c      	lsls	r4, r3, #18
   129d0:	4690      	mov	r8, r2
   129d2:	d52d      	bpl.n	12a30 <__sprint_r.part.0+0x68>
   129d4:	6893      	ldr	r3, [r2, #8]
   129d6:	6812      	ldr	r2, [r2, #0]
   129d8:	b343      	cbz	r3, 12a2c <__sprint_r.part.0+0x64>
   129da:	468b      	mov	fp, r1
   129dc:	4606      	mov	r6, r0
   129de:	f102 0908 	add.w	r9, r2, #8
   129e2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   129e6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   129ea:	d015      	beq.n	12a18 <__sprint_r.part.0+0x50>
   129ec:	3d04      	subs	r5, #4
   129ee:	2400      	movs	r4, #0
   129f0:	e001      	b.n	129f6 <__sprint_r.part.0+0x2e>
   129f2:	42a7      	cmp	r7, r4
   129f4:	d00e      	beq.n	12a14 <__sprint_r.part.0+0x4c>
   129f6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   129fa:	465a      	mov	r2, fp
   129fc:	4630      	mov	r0, r6
   129fe:	f002 fac7 	bl	14f90 <_fputwc_r>
   12a02:	1c43      	adds	r3, r0, #1
   12a04:	f104 0401 	add.w	r4, r4, #1
   12a08:	d1f3      	bne.n	129f2 <__sprint_r.part.0+0x2a>
   12a0a:	2300      	movs	r3, #0
   12a0c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a14:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12a18:	f02a 0a03 	bic.w	sl, sl, #3
   12a1c:	eba3 030a 	sub.w	r3, r3, sl
   12a20:	f8c8 3008 	str.w	r3, [r8, #8]
   12a24:	f109 0908 	add.w	r9, r9, #8
   12a28:	2b00      	cmp	r3, #0
   12a2a:	d1da      	bne.n	129e2 <__sprint_r.part.0+0x1a>
   12a2c:	2000      	movs	r0, #0
   12a2e:	e7ec      	b.n	12a0a <__sprint_r.part.0+0x42>
   12a30:	f002 fae2 	bl	14ff8 <__sfvwrite_r>
   12a34:	2300      	movs	r3, #0
   12a36:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a3e:	bf00      	nop

00012a40 <_vfiprintf_r>:
   12a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a44:	ed2d 8b02 	vpush	{d8}
   12a48:	b0c5      	sub	sp, #276	; 0x114
   12a4a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   12a4e:	4683      	mov	fp, r0
   12a50:	ee08 1a10 	vmov	s16, r1
   12a54:	4616      	mov	r6, r2
   12a56:	2100      	movs	r1, #0
   12a58:	2208      	movs	r2, #8
   12a5a:	4650      	mov	r0, sl
   12a5c:	461c      	mov	r4, r3
   12a5e:	9307      	str	r3, [sp, #28]
   12a60:	f7fe fd24 	bl	114ac <memset>
   12a64:	f1bb 0f00 	cmp.w	fp, #0
   12a68:	d004      	beq.n	12a74 <_vfiprintf_r+0x34>
   12a6a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12a6e:	2b00      	cmp	r3, #0
   12a70:	f000 86a0 	beq.w	137b4 <_vfiprintf_r+0xd74>
   12a74:	ee18 2a10 	vmov	r2, s16
   12a78:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12a7a:	07db      	lsls	r3, r3, #31
   12a7c:	f140 8513 	bpl.w	134a6 <_vfiprintf_r+0xa66>
   12a80:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12a84:	b28a      	uxth	r2, r1
   12a86:	0495      	lsls	r5, r2, #18
   12a88:	d40b      	bmi.n	12aa2 <_vfiprintf_r+0x62>
   12a8a:	ee18 3a10 	vmov	r3, s16
   12a8e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12a92:	8199      	strh	r1, [r3, #12]
   12a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12a96:	b28a      	uxth	r2, r1
   12a98:	ee18 1a10 	vmov	r1, s16
   12a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12aa0:	664b      	str	r3, [r1, #100]	; 0x64
   12aa2:	0710      	lsls	r0, r2, #28
   12aa4:	f140 8105 	bpl.w	12cb2 <_vfiprintf_r+0x272>
   12aa8:	ee18 3a10 	vmov	r3, s16
   12aac:	691b      	ldr	r3, [r3, #16]
   12aae:	2b00      	cmp	r3, #0
   12ab0:	f000 80ff 	beq.w	12cb2 <_vfiprintf_r+0x272>
   12ab4:	f002 031a 	and.w	r3, r2, #26
   12ab8:	2b0a      	cmp	r3, #10
   12aba:	f000 810a 	beq.w	12cd2 <_vfiprintf_r+0x292>
   12abe:	2300      	movs	r3, #0
   12ac0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12ac4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12ac8:	aa1b      	add	r2, sp, #108	; 0x6c
   12aca:	930c      	str	r3, [sp, #48]	; 0x30
   12acc:	9218      	str	r2, [sp, #96]	; 0x60
   12ace:	4691      	mov	r9, r2
   12ad0:	930b      	str	r3, [sp, #44]	; 0x2c
   12ad2:	9305      	str	r3, [sp, #20]
   12ad4:	46b0      	mov	r8, r6
   12ad6:	4644      	mov	r4, r8
   12ad8:	4ba8      	ldr	r3, [pc, #672]	; (12d7c <_vfiprintf_r+0x33c>)
   12ada:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12ade:	f7fe fd6f 	bl	115c0 <__locale_mb_cur_max>
   12ae2:	4622      	mov	r2, r4
   12ae4:	4603      	mov	r3, r0
   12ae6:	a912      	add	r1, sp, #72	; 0x48
   12ae8:	f8cd a000 	str.w	sl, [sp]
   12aec:	4658      	mov	r0, fp
   12aee:	47a8      	blx	r5
   12af0:	2800      	cmp	r0, #0
   12af2:	f000 8145 	beq.w	12d80 <_vfiprintf_r+0x340>
   12af6:	f2c0 8139 	blt.w	12d6c <_vfiprintf_r+0x32c>
   12afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12afc:	2a25      	cmp	r2, #37	; 0x25
   12afe:	4603      	mov	r3, r0
   12b00:	d001      	beq.n	12b06 <_vfiprintf_r+0xc6>
   12b02:	441c      	add	r4, r3
   12b04:	e7e8      	b.n	12ad8 <_vfiprintf_r+0x98>
   12b06:	ebb4 0608 	subs.w	r6, r4, r8
   12b0a:	4605      	mov	r5, r0
   12b0c:	f040 813c 	bne.w	12d88 <_vfiprintf_r+0x348>
   12b10:	2300      	movs	r3, #0
   12b12:	7861      	ldrb	r1, [r4, #1]
   12b14:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12b18:	f104 0801 	add.w	r8, r4, #1
   12b1c:	9306      	str	r3, [sp, #24]
   12b1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12b22:	461e      	mov	r6, r3
   12b24:	242b      	movs	r4, #43	; 0x2b
   12b26:	f108 0801 	add.w	r8, r8, #1
   12b2a:	f1a1 0320 	sub.w	r3, r1, #32
   12b2e:	2b5a      	cmp	r3, #90	; 0x5a
   12b30:	f200 8178 	bhi.w	12e24 <_vfiprintf_r+0x3e4>
   12b34:	e8df f013 	tbh	[pc, r3, lsl #1]
   12b38:	017602b5 	.word	0x017602b5
   12b3c:	02b00176 	.word	0x02b00176
   12b40:	01760176 	.word	0x01760176
   12b44:	006a0176 	.word	0x006a0176
   12b48:	01760176 	.word	0x01760176
   12b4c:	028d027d 	.word	0x028d027d
   12b50:	02880176 	.word	0x02880176
   12b54:	01760297 	.word	0x01760297
   12b58:	005b0292 	.word	0x005b0292
   12b5c:	005b005b 	.word	0x005b005b
   12b60:	005b005b 	.word	0x005b005b
   12b64:	005b005b 	.word	0x005b005b
   12b68:	005b005b 	.word	0x005b005b
   12b6c:	01760176 	.word	0x01760176
   12b70:	01760176 	.word	0x01760176
   12b74:	01760176 	.word	0x01760176
   12b78:	01760176 	.word	0x01760176
   12b7c:	025c0176 	.word	0x025c0176
   12b80:	01760084 	.word	0x01760084
   12b84:	01760176 	.word	0x01760176
   12b88:	01760176 	.word	0x01760176
   12b8c:	01760176 	.word	0x01760176
   12b90:	01760176 	.word	0x01760176
   12b94:	00e80176 	.word	0x00e80176
   12b98:	01760176 	.word	0x01760176
   12b9c:	02330176 	.word	0x02330176
   12ba0:	02da0176 	.word	0x02da0176
   12ba4:	01760176 	.word	0x01760176
   12ba8:	0176058b 	.word	0x0176058b
   12bac:	01760176 	.word	0x01760176
   12bb0:	01760176 	.word	0x01760176
   12bb4:	01760176 	.word	0x01760176
   12bb8:	01760176 	.word	0x01760176
   12bbc:	025c0176 	.word	0x025c0176
   12bc0:	01760086 	.word	0x01760086
   12bc4:	01760176 	.word	0x01760176
   12bc8:	008602cd 	.word	0x008602cd
   12bcc:	0176007f 	.word	0x0176007f
   12bd0:	017602c0 	.word	0x017602c0
   12bd4:	00ea02fd 	.word	0x00ea02fd
   12bd8:	007f02ed 	.word	0x007f02ed
   12bdc:	02330176 	.word	0x02330176
   12be0:	0569007c 	.word	0x0569007c
   12be4:	01760176 	.word	0x01760176
   12be8:	0176056b 	.word	0x0176056b
   12bec:	007c      	.short	0x007c
   12bee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12bf2:	2200      	movs	r2, #0
   12bf4:	f818 1b01 	ldrb.w	r1, [r8], #1
   12bf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12bfc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12c00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12c04:	2b09      	cmp	r3, #9
   12c06:	d9f5      	bls.n	12bf4 <_vfiprintf_r+0x1b4>
   12c08:	9206      	str	r2, [sp, #24]
   12c0a:	e78e      	b.n	12b2a <_vfiprintf_r+0xea>
   12c0c:	4658      	mov	r0, fp
   12c0e:	f000 ffef 	bl	13bf0 <_localeconv_r>
   12c12:	6843      	ldr	r3, [r0, #4]
   12c14:	930d      	str	r3, [sp, #52]	; 0x34
   12c16:	4618      	mov	r0, r3
   12c18:	f7ff fa72 	bl	12100 <strlen>
   12c1c:	900e      	str	r0, [sp, #56]	; 0x38
   12c1e:	4605      	mov	r5, r0
   12c20:	4658      	mov	r0, fp
   12c22:	f000 ffe5 	bl	13bf0 <_localeconv_r>
   12c26:	6883      	ldr	r3, [r0, #8]
   12c28:	930b      	str	r3, [sp, #44]	; 0x2c
   12c2a:	2d00      	cmp	r5, #0
   12c2c:	f040 84d6 	bne.w	135dc <_vfiprintf_r+0xb9c>
   12c30:	f898 1000 	ldrb.w	r1, [r8]
   12c34:	e777      	b.n	12b26 <_vfiprintf_r+0xe6>
   12c36:	f898 1000 	ldrb.w	r1, [r8]
   12c3a:	f046 0620 	orr.w	r6, r6, #32
   12c3e:	e772      	b.n	12b26 <_vfiprintf_r+0xe6>
   12c40:	f046 0610 	orr.w	r6, r6, #16
   12c44:	06b4      	lsls	r4, r6, #26
   12c46:	f140 818e 	bpl.w	12f66 <_vfiprintf_r+0x526>
   12c4a:	9b07      	ldr	r3, [sp, #28]
   12c4c:	3307      	adds	r3, #7
   12c4e:	f023 0307 	bic.w	r3, r3, #7
   12c52:	461a      	mov	r2, r3
   12c54:	6859      	ldr	r1, [r3, #4]
   12c56:	f852 3b08 	ldr.w	r3, [r2], #8
   12c5a:	9207      	str	r2, [sp, #28]
   12c5c:	460a      	mov	r2, r1
   12c5e:	2900      	cmp	r1, #0
   12c60:	f2c0 8470 	blt.w	13544 <_vfiprintf_r+0xb04>
   12c64:	1c79      	adds	r1, r7, #1
   12c66:	f000 85a2 	beq.w	137ae <_vfiprintf_r+0xd6e>
   12c6a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12c6e:	9103      	str	r1, [sp, #12]
   12c70:	ea53 0102 	orrs.w	r1, r3, r2
   12c74:	f000 843f 	beq.w	134f6 <_vfiprintf_r+0xab6>
   12c78:	2b0a      	cmp	r3, #10
   12c7a:	f172 0100 	sbcs.w	r1, r2, #0
   12c7e:	f080 8541 	bcs.w	13704 <_vfiprintf_r+0xcc4>
   12c82:	3330      	adds	r3, #48	; 0x30
   12c84:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12c88:	9e03      	ldr	r6, [sp, #12]
   12c8a:	2301      	movs	r3, #1
   12c8c:	9304      	str	r3, [sp, #16]
   12c8e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12c92:	9b04      	ldr	r3, [sp, #16]
   12c94:	42bb      	cmp	r3, r7
   12c96:	bfb8      	it	lt
   12c98:	463b      	movlt	r3, r7
   12c9a:	9303      	str	r3, [sp, #12]
   12c9c:	2300      	movs	r3, #0
   12c9e:	9308      	str	r3, [sp, #32]
   12ca0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12ca4:	2b00      	cmp	r3, #0
   12ca6:	f000 80cb 	beq.w	12e40 <_vfiprintf_r+0x400>
   12caa:	9b03      	ldr	r3, [sp, #12]
   12cac:	3301      	adds	r3, #1
   12cae:	9303      	str	r3, [sp, #12]
   12cb0:	e0c6      	b.n	12e40 <_vfiprintf_r+0x400>
   12cb2:	ee18 1a10 	vmov	r1, s16
   12cb6:	4658      	mov	r0, fp
   12cb8:	ee18 5a10 	vmov	r5, s16
   12cbc:	f001 f800 	bl	13cc0 <__swsetup_r>
   12cc0:	2800      	cmp	r0, #0
   12cc2:	f040 8652 	bne.w	1396a <_vfiprintf_r+0xf2a>
   12cc6:	89aa      	ldrh	r2, [r5, #12]
   12cc8:	f002 031a 	and.w	r3, r2, #26
   12ccc:	2b0a      	cmp	r3, #10
   12cce:	f47f aef6 	bne.w	12abe <_vfiprintf_r+0x7e>
   12cd2:	ee18 1a10 	vmov	r1, s16
   12cd6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12cda:	2b00      	cmp	r3, #0
   12cdc:	f6ff aeef 	blt.w	12abe <_vfiprintf_r+0x7e>
   12ce0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12ce2:	07db      	lsls	r3, r3, #31
   12ce4:	d402      	bmi.n	12cec <_vfiprintf_r+0x2ac>
   12ce6:	0597      	lsls	r7, r2, #22
   12ce8:	f140 8612 	bpl.w	13910 <_vfiprintf_r+0xed0>
   12cec:	ee18 1a10 	vmov	r1, s16
   12cf0:	4623      	mov	r3, r4
   12cf2:	4632      	mov	r2, r6
   12cf4:	4658      	mov	r0, fp
   12cf6:	f000 fe69 	bl	139cc <__sbprintf>
   12cfa:	9005      	str	r0, [sp, #20]
   12cfc:	9805      	ldr	r0, [sp, #20]
   12cfe:	b045      	add	sp, #276	; 0x114
   12d00:	ecbd 8b02 	vpop	{d8}
   12d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d08:	f046 0610 	orr.w	r6, r6, #16
   12d0c:	f016 0220 	ands.w	r2, r6, #32
   12d10:	f000 8136 	beq.w	12f80 <_vfiprintf_r+0x540>
   12d14:	9b07      	ldr	r3, [sp, #28]
   12d16:	3307      	adds	r3, #7
   12d18:	f023 0307 	bic.w	r3, r3, #7
   12d1c:	4619      	mov	r1, r3
   12d1e:	685a      	ldr	r2, [r3, #4]
   12d20:	f851 3b08 	ldr.w	r3, [r1], #8
   12d24:	9107      	str	r1, [sp, #28]
   12d26:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12d2a:	9103      	str	r1, [sp, #12]
   12d2c:	2100      	movs	r1, #0
   12d2e:	2000      	movs	r0, #0
   12d30:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12d34:	1c78      	adds	r0, r7, #1
   12d36:	f000 8210 	beq.w	1315a <_vfiprintf_r+0x71a>
   12d3a:	9803      	ldr	r0, [sp, #12]
   12d3c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12d40:	ea53 0002 	orrs.w	r0, r3, r2
   12d44:	f040 8208 	bne.w	13158 <_vfiprintf_r+0x718>
   12d48:	2f00      	cmp	r7, #0
   12d4a:	f040 8538 	bne.w	137be <_vfiprintf_r+0xd7e>
   12d4e:	2900      	cmp	r1, #0
   12d50:	f040 83d5 	bne.w	134fe <_vfiprintf_r+0xabe>
   12d54:	9b03      	ldr	r3, [sp, #12]
   12d56:	f013 0301 	ands.w	r3, r3, #1
   12d5a:	9304      	str	r3, [sp, #16]
   12d5c:	f000 8411 	beq.w	13582 <_vfiprintf_r+0xb42>
   12d60:	2330      	movs	r3, #48	; 0x30
   12d62:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12d66:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12d6a:	e792      	b.n	12c92 <_vfiprintf_r+0x252>
   12d6c:	2208      	movs	r2, #8
   12d6e:	2100      	movs	r1, #0
   12d70:	4650      	mov	r0, sl
   12d72:	f7fe fb9b 	bl	114ac <memset>
   12d76:	2301      	movs	r3, #1
   12d78:	441c      	add	r4, r3
   12d7a:	e6ad      	b.n	12ad8 <_vfiprintf_r+0x98>
   12d7c:	200033ec 	.word	0x200033ec
   12d80:	ebb4 0608 	subs.w	r6, r4, r8
   12d84:	4605      	mov	r5, r0
   12d86:	d01b      	beq.n	12dc0 <_vfiprintf_r+0x380>
   12d88:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12d8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12d8c:	3301      	adds	r3, #1
   12d8e:	4432      	add	r2, r6
   12d90:	2b07      	cmp	r3, #7
   12d92:	e9c9 8600 	strd	r8, r6, [r9]
   12d96:	921a      	str	r2, [sp, #104]	; 0x68
   12d98:	9319      	str	r3, [sp, #100]	; 0x64
   12d9a:	dd1c      	ble.n	12dd6 <_vfiprintf_r+0x396>
   12d9c:	2a00      	cmp	r2, #0
   12d9e:	f000 83a6 	beq.w	134ee <_vfiprintf_r+0xaae>
   12da2:	ee18 1a10 	vmov	r1, s16
   12da6:	aa18      	add	r2, sp, #96	; 0x60
   12da8:	4658      	mov	r0, fp
   12daa:	f7ff fe0d 	bl	129c8 <__sprint_r.part.0>
   12dae:	bb20      	cbnz	r0, 12dfa <_vfiprintf_r+0x3ba>
   12db0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12db4:	9b05      	ldr	r3, [sp, #20]
   12db6:	4433      	add	r3, r6
   12db8:	9305      	str	r3, [sp, #20]
   12dba:	2d00      	cmp	r5, #0
   12dbc:	f47f aea8 	bne.w	12b10 <_vfiprintf_r+0xd0>
   12dc0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12dc2:	2b00      	cmp	r3, #0
   12dc4:	f040 85c1 	bne.w	1394a <_vfiprintf_r+0xf0a>
   12dc8:	ee18 3a10 	vmov	r3, s16
   12dcc:	2200      	movs	r2, #0
   12dce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12dd2:	9219      	str	r2, [sp, #100]	; 0x64
   12dd4:	e015      	b.n	12e02 <_vfiprintf_r+0x3c2>
   12dd6:	f109 0908 	add.w	r9, r9, #8
   12dda:	e7eb      	b.n	12db4 <_vfiprintf_r+0x374>
   12ddc:	ee18 1a10 	vmov	r1, s16
   12de0:	aa18      	add	r2, sp, #96	; 0x60
   12de2:	4658      	mov	r0, fp
   12de4:	f7ff fdf0 	bl	129c8 <__sprint_r.part.0>
   12de8:	2800      	cmp	r0, #0
   12dea:	f000 80a6 	beq.w	12f3a <_vfiprintf_r+0x4fa>
   12dee:	9b08      	ldr	r3, [sp, #32]
   12df0:	b11b      	cbz	r3, 12dfa <_vfiprintf_r+0x3ba>
   12df2:	9908      	ldr	r1, [sp, #32]
   12df4:	4658      	mov	r0, fp
   12df6:	f7ff fc2d 	bl	12654 <_free_r>
   12dfa:	ee18 3a10 	vmov	r3, s16
   12dfe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12e02:	ee18 2a10 	vmov	r2, s16
   12e06:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12e08:	f012 0f01 	tst.w	r2, #1
   12e0c:	b29a      	uxth	r2, r3
   12e0e:	f000 80a0 	beq.w	12f52 <_vfiprintf_r+0x512>
   12e12:	0650      	lsls	r0, r2, #25
   12e14:	f100 85b2 	bmi.w	1397c <_vfiprintf_r+0xf3c>
   12e18:	9805      	ldr	r0, [sp, #20]
   12e1a:	b045      	add	sp, #276	; 0x114
   12e1c:	ecbd 8b02 	vpop	{d8}
   12e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e24:	2900      	cmp	r1, #0
   12e26:	d0cb      	beq.n	12dc0 <_vfiprintf_r+0x380>
   12e28:	2300      	movs	r3, #0
   12e2a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12e2e:	2301      	movs	r3, #1
   12e30:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12e34:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12e38:	ac2b      	add	r4, sp, #172	; 0xac
   12e3a:	2300      	movs	r3, #0
   12e3c:	9308      	str	r3, [sp, #32]
   12e3e:	461f      	mov	r7, r3
   12e40:	f016 0302 	ands.w	r3, r6, #2
   12e44:	9309      	str	r3, [sp, #36]	; 0x24
   12e46:	d002      	beq.n	12e4e <_vfiprintf_r+0x40e>
   12e48:	9b03      	ldr	r3, [sp, #12]
   12e4a:	3302      	adds	r3, #2
   12e4c:	9303      	str	r3, [sp, #12]
   12e4e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12e52:	930a      	str	r3, [sp, #40]	; 0x28
   12e54:	d105      	bne.n	12e62 <_vfiprintf_r+0x422>
   12e56:	9b06      	ldr	r3, [sp, #24]
   12e58:	9a03      	ldr	r2, [sp, #12]
   12e5a:	1a9d      	subs	r5, r3, r2
   12e5c:	2d00      	cmp	r5, #0
   12e5e:	f300 827b 	bgt.w	13358 <_vfiprintf_r+0x918>
   12e62:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12e66:	1c41      	adds	r1, r0, #1
   12e68:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12e6c:	b182      	cbz	r2, 12e90 <_vfiprintf_r+0x450>
   12e6e:	2201      	movs	r2, #1
   12e70:	3301      	adds	r3, #1
   12e72:	f8c9 2004 	str.w	r2, [r9, #4]
   12e76:	2907      	cmp	r1, #7
   12e78:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12e7c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12e80:	f8c9 2000 	str.w	r2, [r9]
   12e84:	f300 824a 	bgt.w	1331c <_vfiprintf_r+0x8dc>
   12e88:	4608      	mov	r0, r1
   12e8a:	f109 0908 	add.w	r9, r9, #8
   12e8e:	3101      	adds	r1, #1
   12e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12e92:	b1e2      	cbz	r2, 12ece <_vfiprintf_r+0x48e>
   12e94:	aa11      	add	r2, sp, #68	; 0x44
   12e96:	3302      	adds	r3, #2
   12e98:	f8c9 2000 	str.w	r2, [r9]
   12e9c:	2907      	cmp	r1, #7
   12e9e:	f04f 0202 	mov.w	r2, #2
   12ea2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12ea6:	f8c9 2004 	str.w	r2, [r9, #4]
   12eaa:	f340 8250 	ble.w	1334e <_vfiprintf_r+0x90e>
   12eae:	2b00      	cmp	r3, #0
   12eb0:	f000 8343 	beq.w	1353a <_vfiprintf_r+0xafa>
   12eb4:	ee18 1a10 	vmov	r1, s16
   12eb8:	aa18      	add	r2, sp, #96	; 0x60
   12eba:	4658      	mov	r0, fp
   12ebc:	f7ff fd84 	bl	129c8 <__sprint_r.part.0>
   12ec0:	2800      	cmp	r0, #0
   12ec2:	d194      	bne.n	12dee <_vfiprintf_r+0x3ae>
   12ec4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12ec8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ecc:	1c41      	adds	r1, r0, #1
   12ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12ed0:	2a80      	cmp	r2, #128	; 0x80
   12ed2:	f000 8184 	beq.w	131de <_vfiprintf_r+0x79e>
   12ed6:	9a04      	ldr	r2, [sp, #16]
   12ed8:	1abd      	subs	r5, r7, r2
   12eda:	2d00      	cmp	r5, #0
   12edc:	f300 81d7 	bgt.w	1328e <_vfiprintf_r+0x84e>
   12ee0:	9a04      	ldr	r2, [sp, #16]
   12ee2:	f8c9 4000 	str.w	r4, [r9]
   12ee6:	4413      	add	r3, r2
   12ee8:	2907      	cmp	r1, #7
   12eea:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12eee:	f8c9 2004 	str.w	r2, [r9, #4]
   12ef2:	f340 816e 	ble.w	131d2 <_vfiprintf_r+0x792>
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	f000 8275 	beq.w	133e6 <_vfiprintf_r+0x9a6>
   12efc:	ee18 1a10 	vmov	r1, s16
   12f00:	aa18      	add	r2, sp, #96	; 0x60
   12f02:	4658      	mov	r0, fp
   12f04:	f7ff fd60 	bl	129c8 <__sprint_r.part.0>
   12f08:	2800      	cmp	r0, #0
   12f0a:	f47f af70 	bne.w	12dee <_vfiprintf_r+0x3ae>
   12f0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12f10:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f14:	0775      	lsls	r5, r6, #29
   12f16:	d505      	bpl.n	12f24 <_vfiprintf_r+0x4e4>
   12f18:	9a06      	ldr	r2, [sp, #24]
   12f1a:	9903      	ldr	r1, [sp, #12]
   12f1c:	1a54      	subs	r4, r2, r1
   12f1e:	2c00      	cmp	r4, #0
   12f20:	f300 826b 	bgt.w	133fa <_vfiprintf_r+0x9ba>
   12f24:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12f28:	9803      	ldr	r0, [sp, #12]
   12f2a:	4281      	cmp	r1, r0
   12f2c:	bfac      	ite	ge
   12f2e:	1852      	addge	r2, r2, r1
   12f30:	1812      	addlt	r2, r2, r0
   12f32:	9205      	str	r2, [sp, #20]
   12f34:	2b00      	cmp	r3, #0
   12f36:	f47f af51 	bne.w	12ddc <_vfiprintf_r+0x39c>
   12f3a:	9908      	ldr	r1, [sp, #32]
   12f3c:	2300      	movs	r3, #0
   12f3e:	9319      	str	r3, [sp, #100]	; 0x64
   12f40:	2900      	cmp	r1, #0
   12f42:	f000 8149 	beq.w	131d8 <_vfiprintf_r+0x798>
   12f46:	4658      	mov	r0, fp
   12f48:	f7ff fb84 	bl	12654 <_free_r>
   12f4c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f50:	e5c1      	b.n	12ad6 <_vfiprintf_r+0x96>
   12f52:	059c      	lsls	r4, r3, #22
   12f54:	f53f af5d 	bmi.w	12e12 <_vfiprintf_r+0x3d2>
   12f58:	ee18 4a10 	vmov	r4, s16
   12f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12f5e:	f7fe fb2d 	bl	115bc <__retarget_lock_release_recursive>
   12f62:	89a2      	ldrh	r2, [r4, #12]
   12f64:	e755      	b.n	12e12 <_vfiprintf_r+0x3d2>
   12f66:	06f0      	lsls	r0, r6, #27
   12f68:	9a07      	ldr	r2, [sp, #28]
   12f6a:	f100 831f 	bmi.w	135ac <_vfiprintf_r+0xb6c>
   12f6e:	0671      	lsls	r1, r6, #25
   12f70:	f140 8319 	bpl.w	135a6 <_vfiprintf_r+0xb66>
   12f74:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12f78:	9207      	str	r2, [sp, #28]
   12f7a:	17da      	asrs	r2, r3, #31
   12f7c:	4611      	mov	r1, r2
   12f7e:	e66e      	b.n	12c5e <_vfiprintf_r+0x21e>
   12f80:	f016 0310 	ands.w	r3, r6, #16
   12f84:	9907      	ldr	r1, [sp, #28]
   12f86:	f040 8309 	bne.w	1359c <_vfiprintf_r+0xb5c>
   12f8a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   12f8e:	f000 8301 	beq.w	13594 <_vfiprintf_r+0xb54>
   12f92:	461a      	mov	r2, r3
   12f94:	f851 3b04 	ldr.w	r3, [r1], #4
   12f98:	9107      	str	r1, [sp, #28]
   12f9a:	b29b      	uxth	r3, r3
   12f9c:	e6c3      	b.n	12d26 <_vfiprintf_r+0x2e6>
   12f9e:	9b07      	ldr	r3, [sp, #28]
   12fa0:	461a      	mov	r2, r3
   12fa2:	2300      	movs	r3, #0
   12fa4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12fa8:	4613      	mov	r3, r2
   12faa:	f853 4b04 	ldr.w	r4, [r3], #4
   12fae:	9303      	str	r3, [sp, #12]
   12fb0:	2c00      	cmp	r4, #0
   12fb2:	f000 8412 	beq.w	137da <_vfiprintf_r+0xd9a>
   12fb6:	2953      	cmp	r1, #83	; 0x53
   12fb8:	f000 8365 	beq.w	13686 <_vfiprintf_r+0xc46>
   12fbc:	f016 0510 	ands.w	r5, r6, #16
   12fc0:	f040 8361 	bne.w	13686 <_vfiprintf_r+0xc46>
   12fc4:	1c7b      	adds	r3, r7, #1
   12fc6:	f000 84b3 	beq.w	13930 <_vfiprintf_r+0xef0>
   12fca:	463a      	mov	r2, r7
   12fcc:	4629      	mov	r1, r5
   12fce:	4620      	mov	r0, r4
   12fd0:	f7ff f82e 	bl	12030 <memchr>
   12fd4:	9008      	str	r0, [sp, #32]
   12fd6:	2800      	cmp	r0, #0
   12fd8:	f000 849f 	beq.w	1391a <_vfiprintf_r+0xeda>
   12fdc:	1b03      	subs	r3, r0, r4
   12fde:	9a03      	ldr	r2, [sp, #12]
   12fe0:	9304      	str	r3, [sp, #16]
   12fe2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12fe6:	462f      	mov	r7, r5
   12fe8:	9207      	str	r2, [sp, #28]
   12fea:	9303      	str	r3, [sp, #12]
   12fec:	9508      	str	r5, [sp, #32]
   12fee:	e657      	b.n	12ca0 <_vfiprintf_r+0x260>
   12ff0:	2943      	cmp	r1, #67	; 0x43
   12ff2:	d002      	beq.n	12ffa <_vfiprintf_r+0x5ba>
   12ff4:	06f5      	lsls	r5, r6, #27
   12ff6:	f140 832d 	bpl.w	13654 <_vfiprintf_r+0xc14>
   12ffa:	9d07      	ldr	r5, [sp, #28]
   12ffc:	2208      	movs	r2, #8
   12ffe:	2100      	movs	r1, #0
   13000:	a816      	add	r0, sp, #88	; 0x58
   13002:	ac2b      	add	r4, sp, #172	; 0xac
   13004:	f7fe fa52 	bl	114ac <memset>
   13008:	ab16      	add	r3, sp, #88	; 0x58
   1300a:	f855 2b04 	ldr.w	r2, [r5], #4
   1300e:	4621      	mov	r1, r4
   13010:	4658      	mov	r0, fp
   13012:	f000 fdc7 	bl	13ba4 <_wcrtomb_r>
   13016:	4603      	mov	r3, r0
   13018:	3301      	adds	r3, #1
   1301a:	9004      	str	r0, [sp, #16]
   1301c:	f000 84b3 	beq.w	13986 <_vfiprintf_r+0xf46>
   13020:	9b04      	ldr	r3, [sp, #16]
   13022:	9507      	str	r5, [sp, #28]
   13024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13028:	9303      	str	r3, [sp, #12]
   1302a:	2300      	movs	r3, #0
   1302c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13030:	e703      	b.n	12e3a <_vfiprintf_r+0x3fa>
   13032:	9b07      	ldr	r3, [sp, #28]
   13034:	f853 2b04 	ldr.w	r2, [r3], #4
   13038:	9206      	str	r2, [sp, #24]
   1303a:	2a00      	cmp	r2, #0
   1303c:	f280 829c 	bge.w	13578 <_vfiprintf_r+0xb38>
   13040:	9a06      	ldr	r2, [sp, #24]
   13042:	4252      	negs	r2, r2
   13044:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13048:	f898 1000 	ldrb.w	r1, [r8]
   1304c:	f046 0604 	orr.w	r6, r6, #4
   13050:	e569      	b.n	12b26 <_vfiprintf_r+0xe6>
   13052:	f898 1000 	ldrb.w	r1, [r8]
   13056:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   1305a:	e564      	b.n	12b26 <_vfiprintf_r+0xe6>
   1305c:	f898 1000 	ldrb.w	r1, [r8]
   13060:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   13064:	e55f      	b.n	12b26 <_vfiprintf_r+0xe6>
   13066:	4642      	mov	r2, r8
   13068:	f812 1b01 	ldrb.w	r1, [r2], #1
   1306c:	292a      	cmp	r1, #42	; 0x2a
   1306e:	f000 8496 	beq.w	1399e <_vfiprintf_r+0xf5e>
   13072:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13076:	2b09      	cmp	r3, #9
   13078:	4690      	mov	r8, r2
   1307a:	f04f 0700 	mov.w	r7, #0
   1307e:	f63f ad54 	bhi.w	12b2a <_vfiprintf_r+0xea>
   13082:	f818 1b01 	ldrb.w	r1, [r8], #1
   13086:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   1308a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1308e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   13092:	2b09      	cmp	r3, #9
   13094:	d9f5      	bls.n	13082 <_vfiprintf_r+0x642>
   13096:	e548      	b.n	12b2a <_vfiprintf_r+0xea>
   13098:	f898 1000 	ldrb.w	r1, [r8]
   1309c:	f046 0601 	orr.w	r6, r6, #1
   130a0:	e541      	b.n	12b26 <_vfiprintf_r+0xe6>
   130a2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   130a6:	2b00      	cmp	r3, #0
   130a8:	f47f adc2 	bne.w	12c30 <_vfiprintf_r+0x1f0>
   130ac:	2320      	movs	r3, #32
   130ae:	f898 1000 	ldrb.w	r1, [r8]
   130b2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   130b6:	e536      	b.n	12b26 <_vfiprintf_r+0xe6>
   130b8:	f898 1000 	ldrb.w	r1, [r8]
   130bc:	296c      	cmp	r1, #108	; 0x6c
   130be:	bf03      	ittte	eq
   130c0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   130c4:	f046 0620 	orreq.w	r6, r6, #32
   130c8:	f108 0801 	addeq.w	r8, r8, #1
   130cc:	f046 0610 	orrne.w	r6, r6, #16
   130d0:	e529      	b.n	12b26 <_vfiprintf_r+0xe6>
   130d2:	f898 1000 	ldrb.w	r1, [r8]
   130d6:	2968      	cmp	r1, #104	; 0x68
   130d8:	bf03      	ittte	eq
   130da:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   130de:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   130e2:	f108 0801 	addeq.w	r8, r8, #1
   130e6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   130ea:	e51c      	b.n	12b26 <_vfiprintf_r+0xe6>
   130ec:	f046 0310 	orr.w	r3, r6, #16
   130f0:	9303      	str	r3, [sp, #12]
   130f2:	9b03      	ldr	r3, [sp, #12]
   130f4:	f013 0220 	ands.w	r2, r3, #32
   130f8:	f000 8206 	beq.w	13508 <_vfiprintf_r+0xac8>
   130fc:	9b07      	ldr	r3, [sp, #28]
   130fe:	3307      	adds	r3, #7
   13100:	f023 0307 	bic.w	r3, r3, #7
   13104:	4619      	mov	r1, r3
   13106:	685a      	ldr	r2, [r3, #4]
   13108:	f851 3b08 	ldr.w	r3, [r1], #8
   1310c:	9107      	str	r1, [sp, #28]
   1310e:	2101      	movs	r1, #1
   13110:	e60d      	b.n	12d2e <_vfiprintf_r+0x2ee>
   13112:	9a07      	ldr	r2, [sp, #28]
   13114:	f046 0302 	orr.w	r3, r6, #2
   13118:	9303      	str	r3, [sp, #12]
   1311a:	f852 3b04 	ldr.w	r3, [r2], #4
   1311e:	9207      	str	r2, [sp, #28]
   13120:	f647 0230 	movw	r2, #30768	; 0x7830
   13124:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   13128:	4ab8      	ldr	r2, [pc, #736]	; (1340c <_vfiprintf_r+0x9cc>)
   1312a:	920c      	str	r2, [sp, #48]	; 0x30
   1312c:	2102      	movs	r1, #2
   1312e:	2200      	movs	r2, #0
   13130:	e5fd      	b.n	12d2e <_vfiprintf_r+0x2ee>
   13132:	06b7      	lsls	r7, r6, #26
   13134:	f100 8248 	bmi.w	135c8 <_vfiprintf_r+0xb88>
   13138:	06f5      	lsls	r5, r6, #27
   1313a:	f100 8346 	bmi.w	137ca <_vfiprintf_r+0xd8a>
   1313e:	0674      	lsls	r4, r6, #25
   13140:	f100 83d5 	bmi.w	138ee <_vfiprintf_r+0xeae>
   13144:	05b0      	lsls	r0, r6, #22
   13146:	f140 8340 	bpl.w	137ca <_vfiprintf_r+0xd8a>
   1314a:	9b07      	ldr	r3, [sp, #28]
   1314c:	9905      	ldr	r1, [sp, #20]
   1314e:	f853 2b04 	ldr.w	r2, [r3], #4
   13152:	9307      	str	r3, [sp, #28]
   13154:	7011      	strb	r1, [r2, #0]
   13156:	e4be      	b.n	12ad6 <_vfiprintf_r+0x96>
   13158:	9603      	str	r6, [sp, #12]
   1315a:	2901      	cmp	r1, #1
   1315c:	f43f ad8c 	beq.w	12c78 <_vfiprintf_r+0x238>
   13160:	2902      	cmp	r1, #2
   13162:	ac44      	add	r4, sp, #272	; 0x110
   13164:	d111      	bne.n	1318a <_vfiprintf_r+0x74a>
   13166:	980c      	ldr	r0, [sp, #48]	; 0x30
   13168:	f003 010f 	and.w	r1, r3, #15
   1316c:	091b      	lsrs	r3, r3, #4
   1316e:	5c41      	ldrb	r1, [r0, r1]
   13170:	f804 1d01 	strb.w	r1, [r4, #-1]!
   13174:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   13178:	0912      	lsrs	r2, r2, #4
   1317a:	ea53 0102 	orrs.w	r1, r3, r2
   1317e:	d1f3      	bne.n	13168 <_vfiprintf_r+0x728>
   13180:	9e03      	ldr	r6, [sp, #12]
   13182:	ab44      	add	r3, sp, #272	; 0x110
   13184:	1b1b      	subs	r3, r3, r4
   13186:	9304      	str	r3, [sp, #16]
   13188:	e583      	b.n	12c92 <_vfiprintf_r+0x252>
   1318a:	f003 0107 	and.w	r1, r3, #7
   1318e:	08db      	lsrs	r3, r3, #3
   13190:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   13194:	08d2      	lsrs	r2, r2, #3
   13196:	3130      	adds	r1, #48	; 0x30
   13198:	ea53 0502 	orrs.w	r5, r3, r2
   1319c:	4620      	mov	r0, r4
   1319e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   131a2:	d1f2      	bne.n	1318a <_vfiprintf_r+0x74a>
   131a4:	9e03      	ldr	r6, [sp, #12]
   131a6:	07f3      	lsls	r3, r6, #31
   131a8:	d5eb      	bpl.n	13182 <_vfiprintf_r+0x742>
   131aa:	2930      	cmp	r1, #48	; 0x30
   131ac:	d0e8      	beq.n	13180 <_vfiprintf_r+0x740>
   131ae:	2330      	movs	r3, #48	; 0x30
   131b0:	3802      	subs	r0, #2
   131b2:	f804 3c01 	strb.w	r3, [r4, #-1]
   131b6:	ab44      	add	r3, sp, #272	; 0x110
   131b8:	1a1b      	subs	r3, r3, r0
   131ba:	9e03      	ldr	r6, [sp, #12]
   131bc:	9304      	str	r3, [sp, #16]
   131be:	4604      	mov	r4, r0
   131c0:	e567      	b.n	12c92 <_vfiprintf_r+0x252>
   131c2:	9b04      	ldr	r3, [sp, #16]
   131c4:	941b      	str	r4, [sp, #108]	; 0x6c
   131c6:	2201      	movs	r2, #1
   131c8:	931c      	str	r3, [sp, #112]	; 0x70
   131ca:	931a      	str	r3, [sp, #104]	; 0x68
   131cc:	9219      	str	r2, [sp, #100]	; 0x64
   131ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131d2:	f109 0908 	add.w	r9, r9, #8
   131d6:	e69d      	b.n	12f14 <_vfiprintf_r+0x4d4>
   131d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   131dc:	e47b      	b.n	12ad6 <_vfiprintf_r+0x96>
   131de:	9a06      	ldr	r2, [sp, #24]
   131e0:	9d03      	ldr	r5, [sp, #12]
   131e2:	1b55      	subs	r5, r2, r5
   131e4:	2d00      	cmp	r5, #0
   131e6:	f77f ae76 	ble.w	12ed6 <_vfiprintf_r+0x496>
   131ea:	2d10      	cmp	r5, #16
   131ec:	f340 83bb 	ble.w	13966 <_vfiprintf_r+0xf26>
   131f0:	9409      	str	r4, [sp, #36]	; 0x24
   131f2:	ee18 4a10 	vmov	r4, s16
   131f6:	e007      	b.n	13208 <_vfiprintf_r+0x7c8>
   131f8:	f100 0c02 	add.w	ip, r0, #2
   131fc:	f109 0908 	add.w	r9, r9, #8
   13200:	4610      	mov	r0, r2
   13202:	3d10      	subs	r5, #16
   13204:	2d10      	cmp	r5, #16
   13206:	dd1e      	ble.n	13246 <_vfiprintf_r+0x806>
   13208:	4981      	ldr	r1, [pc, #516]	; (13410 <_vfiprintf_r+0x9d0>)
   1320a:	f8c9 1000 	str.w	r1, [r9]
   1320e:	1c42      	adds	r2, r0, #1
   13210:	3310      	adds	r3, #16
   13212:	2110      	movs	r1, #16
   13214:	2a07      	cmp	r2, #7
   13216:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1321a:	f8c9 1004 	str.w	r1, [r9, #4]
   1321e:	ddeb      	ble.n	131f8 <_vfiprintf_r+0x7b8>
   13220:	aa18      	add	r2, sp, #96	; 0x60
   13222:	2b00      	cmp	r3, #0
   13224:	d074      	beq.n	13310 <_vfiprintf_r+0x8d0>
   13226:	4621      	mov	r1, r4
   13228:	4658      	mov	r0, fp
   1322a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1322e:	f7ff fbcb 	bl	129c8 <__sprint_r.part.0>
   13232:	2800      	cmp	r0, #0
   13234:	f47f addb 	bne.w	12dee <_vfiprintf_r+0x3ae>
   13238:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1323c:	3d10      	subs	r5, #16
   1323e:	2d10      	cmp	r5, #16
   13240:	f100 0c01 	add.w	ip, r0, #1
   13244:	dce0      	bgt.n	13208 <_vfiprintf_r+0x7c8>
   13246:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13248:	4a71      	ldr	r2, [pc, #452]	; (13410 <_vfiprintf_r+0x9d0>)
   1324a:	f8c9 5004 	str.w	r5, [r9, #4]
   1324e:	442b      	add	r3, r5
   13250:	f1bc 0f07 	cmp.w	ip, #7
   13254:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13258:	f8c9 2000 	str.w	r2, [r9]
   1325c:	f340 8194 	ble.w	13588 <_vfiprintf_r+0xb48>
   13260:	2b00      	cmp	r3, #0
   13262:	f000 831f 	beq.w	138a4 <_vfiprintf_r+0xe64>
   13266:	ee18 1a10 	vmov	r1, s16
   1326a:	aa18      	add	r2, sp, #96	; 0x60
   1326c:	4658      	mov	r0, fp
   1326e:	f7ff fbab 	bl	129c8 <__sprint_r.part.0>
   13272:	2800      	cmp	r0, #0
   13274:	f47f adbb 	bne.w	12dee <_vfiprintf_r+0x3ae>
   13278:	9a04      	ldr	r2, [sp, #16]
   1327a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1327e:	1abd      	subs	r5, r7, r2
   13280:	2d00      	cmp	r5, #0
   13282:	f100 0101 	add.w	r1, r0, #1
   13286:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1328a:	f77f ae29 	ble.w	12ee0 <_vfiprintf_r+0x4a0>
   1328e:	2d10      	cmp	r5, #16
   13290:	dd29      	ble.n	132e6 <_vfiprintf_r+0x8a6>
   13292:	9409      	str	r4, [sp, #36]	; 0x24
   13294:	2710      	movs	r7, #16
   13296:	ee18 4a10 	vmov	r4, s16
   1329a:	e007      	b.n	132ac <_vfiprintf_r+0x86c>
   1329c:	f100 0c02 	add.w	ip, r0, #2
   132a0:	f109 0908 	add.w	r9, r9, #8
   132a4:	4610      	mov	r0, r2
   132a6:	3d10      	subs	r5, #16
   132a8:	2d10      	cmp	r5, #16
   132aa:	dd1a      	ble.n	132e2 <_vfiprintf_r+0x8a2>
   132ac:	1c42      	adds	r2, r0, #1
   132ae:	4958      	ldr	r1, [pc, #352]	; (13410 <_vfiprintf_r+0x9d0>)
   132b0:	3310      	adds	r3, #16
   132b2:	2a07      	cmp	r2, #7
   132b4:	e9c9 1700 	strd	r1, r7, [r9]
   132b8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   132bc:	ddee      	ble.n	1329c <_vfiprintf_r+0x85c>
   132be:	aa18      	add	r2, sp, #96	; 0x60
   132c0:	b303      	cbz	r3, 13304 <_vfiprintf_r+0x8c4>
   132c2:	4621      	mov	r1, r4
   132c4:	4658      	mov	r0, fp
   132c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   132ca:	f7ff fb7d 	bl	129c8 <__sprint_r.part.0>
   132ce:	2800      	cmp	r0, #0
   132d0:	f47f ad8d 	bne.w	12dee <_vfiprintf_r+0x3ae>
   132d4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   132d8:	3d10      	subs	r5, #16
   132da:	2d10      	cmp	r5, #16
   132dc:	f100 0c01 	add.w	ip, r0, #1
   132e0:	dce4      	bgt.n	132ac <_vfiprintf_r+0x86c>
   132e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   132e4:	4661      	mov	r1, ip
   132e6:	4a4a      	ldr	r2, [pc, #296]	; (13410 <_vfiprintf_r+0x9d0>)
   132e8:	f8c9 5004 	str.w	r5, [r9, #4]
   132ec:	442b      	add	r3, r5
   132ee:	2907      	cmp	r1, #7
   132f0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   132f4:	f8c9 2000 	str.w	r2, [r9]
   132f8:	f300 80e7 	bgt.w	134ca <_vfiprintf_r+0xa8a>
   132fc:	f109 0908 	add.w	r9, r9, #8
   13300:	3101      	adds	r1, #1
   13302:	e5ed      	b.n	12ee0 <_vfiprintf_r+0x4a0>
   13304:	f04f 0c01 	mov.w	ip, #1
   13308:	4618      	mov	r0, r3
   1330a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1330e:	e7ca      	b.n	132a6 <_vfiprintf_r+0x866>
   13310:	f04f 0c01 	mov.w	ip, #1
   13314:	4618      	mov	r0, r3
   13316:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1331a:	e772      	b.n	13202 <_vfiprintf_r+0x7c2>
   1331c:	2b00      	cmp	r3, #0
   1331e:	f000 8104 	beq.w	1352a <_vfiprintf_r+0xaea>
   13322:	ee18 1a10 	vmov	r1, s16
   13326:	aa18      	add	r2, sp, #96	; 0x60
   13328:	4658      	mov	r0, fp
   1332a:	f7ff fb4d 	bl	129c8 <__sprint_r.part.0>
   1332e:	2800      	cmp	r0, #0
   13330:	f47f ad5d 	bne.w	12dee <_vfiprintf_r+0x3ae>
   13334:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13338:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1333c:	1c41      	adds	r1, r0, #1
   1333e:	e5a7      	b.n	12e90 <_vfiprintf_r+0x450>
   13340:	2302      	movs	r3, #2
   13342:	aa11      	add	r2, sp, #68	; 0x44
   13344:	931c      	str	r3, [sp, #112]	; 0x70
   13346:	921b      	str	r2, [sp, #108]	; 0x6c
   13348:	2101      	movs	r1, #1
   1334a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1334e:	4608      	mov	r0, r1
   13350:	f109 0908 	add.w	r9, r9, #8
   13354:	1c41      	adds	r1, r0, #1
   13356:	e5ba      	b.n	12ece <_vfiprintf_r+0x48e>
   13358:	2d10      	cmp	r5, #16
   1335a:	f340 82e5 	ble.w	13928 <_vfiprintf_r+0xee8>
   1335e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   13362:	940f      	str	r4, [sp, #60]	; 0x3c
   13364:	4608      	mov	r0, r1
   13366:	ee18 4a10 	vmov	r4, s16
   1336a:	e007      	b.n	1337c <_vfiprintf_r+0x93c>
   1336c:	f100 0c02 	add.w	ip, r0, #2
   13370:	f109 0908 	add.w	r9, r9, #8
   13374:	4610      	mov	r0, r2
   13376:	3d10      	subs	r5, #16
   13378:	2d10      	cmp	r5, #16
   1337a:	dd1d      	ble.n	133b8 <_vfiprintf_r+0x978>
   1337c:	4925      	ldr	r1, [pc, #148]	; (13414 <_vfiprintf_r+0x9d4>)
   1337e:	f8c9 1000 	str.w	r1, [r9]
   13382:	1c42      	adds	r2, r0, #1
   13384:	3310      	adds	r3, #16
   13386:	2110      	movs	r1, #16
   13388:	2a07      	cmp	r2, #7
   1338a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1338e:	f8c9 1004 	str.w	r1, [r9, #4]
   13392:	ddeb      	ble.n	1336c <_vfiprintf_r+0x92c>
   13394:	aa18      	add	r2, sp, #96	; 0x60
   13396:	b303      	cbz	r3, 133da <_vfiprintf_r+0x99a>
   13398:	4621      	mov	r1, r4
   1339a:	4658      	mov	r0, fp
   1339c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133a0:	f7ff fb12 	bl	129c8 <__sprint_r.part.0>
   133a4:	2800      	cmp	r0, #0
   133a6:	f47f ad22 	bne.w	12dee <_vfiprintf_r+0x3ae>
   133aa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   133ae:	3d10      	subs	r5, #16
   133b0:	2d10      	cmp	r5, #16
   133b2:	f100 0c01 	add.w	ip, r0, #1
   133b6:	dce1      	bgt.n	1337c <_vfiprintf_r+0x93c>
   133b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   133ba:	4660      	mov	r0, ip
   133bc:	4a15      	ldr	r2, [pc, #84]	; (13414 <_vfiprintf_r+0x9d4>)
   133be:	f8c9 5004 	str.w	r5, [r9, #4]
   133c2:	442b      	add	r3, r5
   133c4:	2807      	cmp	r0, #7
   133c6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   133ca:	f8c9 2000 	str.w	r2, [r9]
   133ce:	f300 80c1 	bgt.w	13554 <_vfiprintf_r+0xb14>
   133d2:	f109 0908 	add.w	r9, r9, #8
   133d6:	1c41      	adds	r1, r0, #1
   133d8:	e546      	b.n	12e68 <_vfiprintf_r+0x428>
   133da:	4618      	mov	r0, r3
   133dc:	f04f 0c01 	mov.w	ip, #1
   133e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133e4:	e7c7      	b.n	13376 <_vfiprintf_r+0x936>
   133e6:	0776      	lsls	r6, r6, #29
   133e8:	9319      	str	r3, [sp, #100]	; 0x64
   133ea:	d553      	bpl.n	13494 <_vfiprintf_r+0xa54>
   133ec:	9a06      	ldr	r2, [sp, #24]
   133ee:	9903      	ldr	r1, [sp, #12]
   133f0:	1a54      	subs	r4, r2, r1
   133f2:	2c00      	cmp	r4, #0
   133f4:	dd4e      	ble.n	13494 <_vfiprintf_r+0xa54>
   133f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133fa:	2c10      	cmp	r4, #16
   133fc:	f340 82b0 	ble.w	13960 <_vfiprintf_r+0xf20>
   13400:	9919      	ldr	r1, [sp, #100]	; 0x64
   13402:	ee18 6a10 	vmov	r6, s16
   13406:	2510      	movs	r5, #16
   13408:	e00d      	b.n	13426 <_vfiprintf_r+0x9e6>
   1340a:	bf00      	nop
   1340c:	200028f0 	.word	0x200028f0
   13410:	200031e4 	.word	0x200031e4
   13414:	2000292c 	.word	0x2000292c
   13418:	1c88      	adds	r0, r1, #2
   1341a:	f109 0908 	add.w	r9, r9, #8
   1341e:	4611      	mov	r1, r2
   13420:	3c10      	subs	r4, #16
   13422:	2c10      	cmp	r4, #16
   13424:	dd1a      	ble.n	1345c <_vfiprintf_r+0xa1c>
   13426:	1c4a      	adds	r2, r1, #1
   13428:	48b3      	ldr	r0, [pc, #716]	; (136f8 <_vfiprintf_r+0xcb8>)
   1342a:	3310      	adds	r3, #16
   1342c:	2a07      	cmp	r2, #7
   1342e:	e9c9 0500 	strd	r0, r5, [r9]
   13432:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13436:	ddef      	ble.n	13418 <_vfiprintf_r+0x9d8>
   13438:	aa18      	add	r2, sp, #96	; 0x60
   1343a:	b333      	cbz	r3, 1348a <_vfiprintf_r+0xa4a>
   1343c:	4631      	mov	r1, r6
   1343e:	4658      	mov	r0, fp
   13440:	f7ff fac2 	bl	129c8 <__sprint_r.part.0>
   13444:	2800      	cmp	r0, #0
   13446:	f47f acd2 	bne.w	12dee <_vfiprintf_r+0x3ae>
   1344a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1344e:	3c10      	subs	r4, #16
   13450:	2c10      	cmp	r4, #16
   13452:	f101 0001 	add.w	r0, r1, #1
   13456:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1345a:	dce4      	bgt.n	13426 <_vfiprintf_r+0x9e6>
   1345c:	4aa6      	ldr	r2, [pc, #664]	; (136f8 <_vfiprintf_r+0xcb8>)
   1345e:	f8c9 4004 	str.w	r4, [r9, #4]
   13462:	4423      	add	r3, r4
   13464:	2807      	cmp	r0, #7
   13466:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1346a:	f8c9 2000 	str.w	r2, [r9]
   1346e:	f77f ad59 	ble.w	12f24 <_vfiprintf_r+0x4e4>
   13472:	b17b      	cbz	r3, 13494 <_vfiprintf_r+0xa54>
   13474:	ee18 1a10 	vmov	r1, s16
   13478:	aa18      	add	r2, sp, #96	; 0x60
   1347a:	4658      	mov	r0, fp
   1347c:	f7ff faa4 	bl	129c8 <__sprint_r.part.0>
   13480:	2800      	cmp	r0, #0
   13482:	f47f acb4 	bne.w	12dee <_vfiprintf_r+0x3ae>
   13486:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13488:	e54c      	b.n	12f24 <_vfiprintf_r+0x4e4>
   1348a:	2001      	movs	r0, #1
   1348c:	4619      	mov	r1, r3
   1348e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13492:	e7c5      	b.n	13420 <_vfiprintf_r+0x9e0>
   13494:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   13498:	9903      	ldr	r1, [sp, #12]
   1349a:	428a      	cmp	r2, r1
   1349c:	bfac      	ite	ge
   1349e:	189b      	addge	r3, r3, r2
   134a0:	185b      	addlt	r3, r3, r1
   134a2:	9305      	str	r3, [sp, #20]
   134a4:	e549      	b.n	12f3a <_vfiprintf_r+0x4fa>
   134a6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   134aa:	058f      	lsls	r7, r1, #22
   134ac:	ee18 3a10 	vmov	r3, s16
   134b0:	b28a      	uxth	r2, r1
   134b2:	f53f aae8 	bmi.w	12a86 <_vfiprintf_r+0x46>
   134b6:	ee18 5a10 	vmov	r5, s16
   134ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
   134bc:	f7fe f87c 	bl	115b8 <__retarget_lock_acquire_recursive>
   134c0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   134c4:	b28a      	uxth	r2, r1
   134c6:	f7ff bade 	b.w	12a86 <_vfiprintf_r+0x46>
   134ca:	2b00      	cmp	r3, #0
   134cc:	f43f ae79 	beq.w	131c2 <_vfiprintf_r+0x782>
   134d0:	ee18 1a10 	vmov	r1, s16
   134d4:	aa18      	add	r2, sp, #96	; 0x60
   134d6:	4658      	mov	r0, fp
   134d8:	f7ff fa76 	bl	129c8 <__sprint_r.part.0>
   134dc:	2800      	cmp	r0, #0
   134de:	f47f ac86 	bne.w	12dee <_vfiprintf_r+0x3ae>
   134e2:	9919      	ldr	r1, [sp, #100]	; 0x64
   134e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   134e6:	3101      	adds	r1, #1
   134e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   134ec:	e4f8      	b.n	12ee0 <_vfiprintf_r+0x4a0>
   134ee:	9219      	str	r2, [sp, #100]	; 0x64
   134f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   134f4:	e45e      	b.n	12db4 <_vfiprintf_r+0x374>
   134f6:	2f00      	cmp	r7, #0
   134f8:	f47f abc3 	bne.w	12c82 <_vfiprintf_r+0x242>
   134fc:	9e03      	ldr	r6, [sp, #12]
   134fe:	2700      	movs	r7, #0
   13500:	9704      	str	r7, [sp, #16]
   13502:	ac44      	add	r4, sp, #272	; 0x110
   13504:	f7ff bbc5 	b.w	12c92 <_vfiprintf_r+0x252>
   13508:	9b03      	ldr	r3, [sp, #12]
   1350a:	f013 0310 	ands.w	r3, r3, #16
   1350e:	d154      	bne.n	135ba <_vfiprintf_r+0xb7a>
   13510:	9a03      	ldr	r2, [sp, #12]
   13512:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13516:	f000 816b 	beq.w	137f0 <_vfiprintf_r+0xdb0>
   1351a:	9907      	ldr	r1, [sp, #28]
   1351c:	461a      	mov	r2, r3
   1351e:	f851 3b04 	ldr.w	r3, [r1], #4
   13522:	9107      	str	r1, [sp, #28]
   13524:	b29b      	uxth	r3, r3
   13526:	2101      	movs	r1, #1
   13528:	e401      	b.n	12d2e <_vfiprintf_r+0x2ee>
   1352a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1352c:	2a00      	cmp	r2, #0
   1352e:	d164      	bne.n	135fa <_vfiprintf_r+0xbba>
   13530:	4618      	mov	r0, r3
   13532:	2101      	movs	r1, #1
   13534:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13538:	e4c9      	b.n	12ece <_vfiprintf_r+0x48e>
   1353a:	2101      	movs	r1, #1
   1353c:	4618      	mov	r0, r3
   1353e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13542:	e4c4      	b.n	12ece <_vfiprintf_r+0x48e>
   13544:	425b      	negs	r3, r3
   13546:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1354a:	9603      	str	r6, [sp, #12]
   1354c:	202d      	movs	r0, #45	; 0x2d
   1354e:	2101      	movs	r1, #1
   13550:	f7ff bbee 	b.w	12d30 <_vfiprintf_r+0x2f0>
   13554:	2b00      	cmp	r3, #0
   13556:	f000 8088 	beq.w	1366a <_vfiprintf_r+0xc2a>
   1355a:	ee18 1a10 	vmov	r1, s16
   1355e:	aa18      	add	r2, sp, #96	; 0x60
   13560:	4658      	mov	r0, fp
   13562:	f7ff fa31 	bl	129c8 <__sprint_r.part.0>
   13566:	2800      	cmp	r0, #0
   13568:	f47f ac41 	bne.w	12dee <_vfiprintf_r+0x3ae>
   1356c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13570:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13574:	1c41      	adds	r1, r0, #1
   13576:	e477      	b.n	12e68 <_vfiprintf_r+0x428>
   13578:	f898 1000 	ldrb.w	r1, [r8]
   1357c:	9307      	str	r3, [sp, #28]
   1357e:	f7ff bad2 	b.w	12b26 <_vfiprintf_r+0xe6>
   13582:	ac44      	add	r4, sp, #272	; 0x110
   13584:	f7ff bb85 	b.w	12c92 <_vfiprintf_r+0x252>
   13588:	f109 0908 	add.w	r9, r9, #8
   1358c:	f10c 0101 	add.w	r1, ip, #1
   13590:	4660      	mov	r0, ip
   13592:	e4a0      	b.n	12ed6 <_vfiprintf_r+0x496>
   13594:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   13598:	f040 8197 	bne.w	138ca <_vfiprintf_r+0xe8a>
   1359c:	f851 3b04 	ldr.w	r3, [r1], #4
   135a0:	9107      	str	r1, [sp, #28]
   135a2:	f7ff bbc0 	b.w	12d26 <_vfiprintf_r+0x2e6>
   135a6:	05b3      	lsls	r3, r6, #22
   135a8:	f100 8188 	bmi.w	138bc <_vfiprintf_r+0xe7c>
   135ac:	f852 3b04 	ldr.w	r3, [r2], #4
   135b0:	9207      	str	r2, [sp, #28]
   135b2:	17da      	asrs	r2, r3, #31
   135b4:	4611      	mov	r1, r2
   135b6:	f7ff bb52 	b.w	12c5e <_vfiprintf_r+0x21e>
   135ba:	9907      	ldr	r1, [sp, #28]
   135bc:	f851 3b04 	ldr.w	r3, [r1], #4
   135c0:	9107      	str	r1, [sp, #28]
   135c2:	2101      	movs	r1, #1
   135c4:	f7ff bbb3 	b.w	12d2e <_vfiprintf_r+0x2ee>
   135c8:	9b07      	ldr	r3, [sp, #28]
   135ca:	9805      	ldr	r0, [sp, #20]
   135cc:	f853 1b04 	ldr.w	r1, [r3], #4
   135d0:	9307      	str	r3, [sp, #28]
   135d2:	17c2      	asrs	r2, r0, #31
   135d4:	e9c1 0200 	strd	r0, r2, [r1]
   135d8:	f7ff ba7d 	b.w	12ad6 <_vfiprintf_r+0x96>
   135dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   135de:	2b00      	cmp	r3, #0
   135e0:	f43f ab26 	beq.w	12c30 <_vfiprintf_r+0x1f0>
   135e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   135e6:	781b      	ldrb	r3, [r3, #0]
   135e8:	2b00      	cmp	r3, #0
   135ea:	f43f ab21 	beq.w	12c30 <_vfiprintf_r+0x1f0>
   135ee:	f898 1000 	ldrb.w	r1, [r8]
   135f2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   135f6:	f7ff ba96 	b.w	12b26 <_vfiprintf_r+0xe6>
   135fa:	2302      	movs	r3, #2
   135fc:	aa11      	add	r2, sp, #68	; 0x44
   135fe:	931c      	str	r3, [sp, #112]	; 0x70
   13600:	921b      	str	r2, [sp, #108]	; 0x6c
   13602:	2001      	movs	r0, #1
   13604:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13608:	e6a2      	b.n	13350 <_vfiprintf_r+0x910>
   1360a:	9603      	str	r6, [sp, #12]
   1360c:	e571      	b.n	130f2 <_vfiprintf_r+0x6b2>
   1360e:	4b3b      	ldr	r3, [pc, #236]	; (136fc <_vfiprintf_r+0xcbc>)
   13610:	930c      	str	r3, [sp, #48]	; 0x30
   13612:	f016 0220 	ands.w	r2, r6, #32
   13616:	d059      	beq.n	136cc <_vfiprintf_r+0xc8c>
   13618:	9b07      	ldr	r3, [sp, #28]
   1361a:	3307      	adds	r3, #7
   1361c:	f023 0307 	bic.w	r3, r3, #7
   13620:	4618      	mov	r0, r3
   13622:	685a      	ldr	r2, [r3, #4]
   13624:	f850 3b08 	ldr.w	r3, [r0], #8
   13628:	9007      	str	r0, [sp, #28]
   1362a:	07f4      	lsls	r4, r6, #31
   1362c:	d509      	bpl.n	13642 <_vfiprintf_r+0xc02>
   1362e:	ea53 0002 	orrs.w	r0, r3, r2
   13632:	d006      	beq.n	13642 <_vfiprintf_r+0xc02>
   13634:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13638:	2130      	movs	r1, #48	; 0x30
   1363a:	f046 0602 	orr.w	r6, r6, #2
   1363e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13642:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13646:	9103      	str	r1, [sp, #12]
   13648:	2102      	movs	r1, #2
   1364a:	f7ff bb70 	b.w	12d2e <_vfiprintf_r+0x2ee>
   1364e:	4b2c      	ldr	r3, [pc, #176]	; (13700 <_vfiprintf_r+0xcc0>)
   13650:	930c      	str	r3, [sp, #48]	; 0x30
   13652:	e7de      	b.n	13612 <_vfiprintf_r+0xbd2>
   13654:	9b07      	ldr	r3, [sp, #28]
   13656:	2101      	movs	r1, #1
   13658:	f853 2b04 	ldr.w	r2, [r3], #4
   1365c:	9103      	str	r1, [sp, #12]
   1365e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   13662:	9307      	str	r3, [sp, #28]
   13664:	9104      	str	r1, [sp, #16]
   13666:	ac2b      	add	r4, sp, #172	; 0xac
   13668:	e4df      	b.n	1302a <_vfiprintf_r+0x5ea>
   1366a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1366e:	2a00      	cmp	r2, #0
   13670:	f040 8132 	bne.w	138d8 <_vfiprintf_r+0xe98>
   13674:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13676:	2a00      	cmp	r2, #0
   13678:	f47f ae62 	bne.w	13340 <_vfiprintf_r+0x900>
   1367c:	4618      	mov	r0, r3
   1367e:	2101      	movs	r1, #1
   13680:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13684:	e427      	b.n	12ed6 <_vfiprintf_r+0x496>
   13686:	2100      	movs	r1, #0
   13688:	2208      	movs	r2, #8
   1368a:	a816      	add	r0, sp, #88	; 0x58
   1368c:	9413      	str	r4, [sp, #76]	; 0x4c
   1368e:	f7fd ff0d 	bl	114ac <memset>
   13692:	1c79      	adds	r1, r7, #1
   13694:	f000 80bc 	beq.w	13810 <_vfiprintf_r+0xdd0>
   13698:	2500      	movs	r5, #0
   1369a:	9407      	str	r4, [sp, #28]
   1369c:	462c      	mov	r4, r5
   1369e:	e00c      	b.n	136ba <_vfiprintf_r+0xc7a>
   136a0:	a92b      	add	r1, sp, #172	; 0xac
   136a2:	4658      	mov	r0, fp
   136a4:	f000 fa7e 	bl	13ba4 <_wcrtomb_r>
   136a8:	1c42      	adds	r2, r0, #1
   136aa:	4420      	add	r0, r4
   136ac:	f000 816b 	beq.w	13986 <_vfiprintf_r+0xf46>
   136b0:	42b8      	cmp	r0, r7
   136b2:	dc08      	bgt.n	136c6 <_vfiprintf_r+0xc86>
   136b4:	f000 8170 	beq.w	13998 <_vfiprintf_r+0xf58>
   136b8:	4604      	mov	r4, r0
   136ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   136bc:	5952      	ldr	r2, [r2, r5]
   136be:	ab16      	add	r3, sp, #88	; 0x58
   136c0:	3504      	adds	r5, #4
   136c2:	2a00      	cmp	r2, #0
   136c4:	d1ec      	bne.n	136a0 <_vfiprintf_r+0xc60>
   136c6:	9404      	str	r4, [sp, #16]
   136c8:	9c07      	ldr	r4, [sp, #28]
   136ca:	e0af      	b.n	1382c <_vfiprintf_r+0xdec>
   136cc:	f016 0310 	ands.w	r3, r6, #16
   136d0:	9807      	ldr	r0, [sp, #28]
   136d2:	d10c      	bne.n	136ee <_vfiprintf_r+0xcae>
   136d4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   136d8:	d005      	beq.n	136e6 <_vfiprintf_r+0xca6>
   136da:	461a      	mov	r2, r3
   136dc:	f850 3b04 	ldr.w	r3, [r0], #4
   136e0:	9007      	str	r0, [sp, #28]
   136e2:	b29b      	uxth	r3, r3
   136e4:	e7a1      	b.n	1362a <_vfiprintf_r+0xbea>
   136e6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   136ea:	f040 80e1 	bne.w	138b0 <_vfiprintf_r+0xe70>
   136ee:	f850 3b04 	ldr.w	r3, [r0], #4
   136f2:	9007      	str	r0, [sp, #28]
   136f4:	e799      	b.n	1362a <_vfiprintf_r+0xbea>
   136f6:	bf00      	nop
   136f8:	2000292c 	.word	0x2000292c
   136fc:	200028f0 	.word	0x200028f0
   13700:	200028dc 	.word	0x200028dc
   13704:	9903      	ldr	r1, [sp, #12]
   13706:	9704      	str	r7, [sp, #16]
   13708:	ac44      	add	r4, sp, #272	; 0x110
   1370a:	469e      	mov	lr, r3
   1370c:	ee08 ba90 	vmov	s17, fp
   13710:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13714:	f04f 0c00 	mov.w	ip, #0
   13718:	4623      	mov	r3, r4
   1371a:	e006      	b.n	1372a <_vfiprintf_r+0xcea>
   1371c:	f1be 0f0a 	cmp.w	lr, #10
   13720:	f172 0200 	sbcs.w	r2, r2, #0
   13724:	d339      	bcc.n	1379a <_vfiprintf_r+0xd5a>
   13726:	46a6      	mov	lr, r4
   13728:	462a      	mov	r2, r5
   1372a:	49a6      	ldr	r1, [pc, #664]	; (139c4 <_vfiprintf_r+0xf84>)
   1372c:	eb1e 0002 	adds.w	r0, lr, r2
   13730:	f140 0000 	adc.w	r0, r0, #0
   13734:	460f      	mov	r7, r1
   13736:	fba1 1400 	umull	r1, r4, r1, r0
   1373a:	f024 0103 	bic.w	r1, r4, #3
   1373e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13742:	1a40      	subs	r0, r0, r1
   13744:	ebbe 0100 	subs.w	r1, lr, r0
   13748:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1374c:	f162 0400 	sbc.w	r4, r2, #0
   13750:	fb05 f501 	mul.w	r5, r5, r1
   13754:	fb07 5504 	mla	r5, r7, r4, r5
   13758:	fba1 4107 	umull	r4, r1, r1, r7
   1375c:	440d      	add	r5, r1
   1375e:	2705      	movs	r7, #5
   13760:	f004 0101 	and.w	r1, r4, #1
   13764:	fba1 1b07 	umull	r1, fp, r1, r7
   13768:	1809      	adds	r1, r1, r0
   1376a:	0864      	lsrs	r4, r4, #1
   1376c:	3130      	adds	r1, #48	; 0x30
   1376e:	f803 1c01 	strb.w	r1, [r3, #-1]
   13772:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   13776:	f10c 0c01 	add.w	ip, ip, #1
   1377a:	3b01      	subs	r3, #1
   1377c:	086d      	lsrs	r5, r5, #1
   1377e:	2e00      	cmp	r6, #0
   13780:	d0cc      	beq.n	1371c <_vfiprintf_r+0xcdc>
   13782:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13784:	7809      	ldrb	r1, [r1, #0]
   13786:	4561      	cmp	r1, ip
   13788:	d1c8      	bne.n	1371c <_vfiprintf_r+0xcdc>
   1378a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1378e:	d0c5      	beq.n	1371c <_vfiprintf_r+0xcdc>
   13790:	f1be 0f0a 	cmp.w	lr, #10
   13794:	f172 0200 	sbcs.w	r2, r2, #0
   13798:	d26c      	bcs.n	13874 <_vfiprintf_r+0xe34>
   1379a:	461c      	mov	r4, r3
   1379c:	ab44      	add	r3, sp, #272	; 0x110
   1379e:	1b1b      	subs	r3, r3, r4
   137a0:	9f04      	ldr	r7, [sp, #16]
   137a2:	9e03      	ldr	r6, [sp, #12]
   137a4:	9304      	str	r3, [sp, #16]
   137a6:	ee18 ba90 	vmov	fp, s17
   137aa:	f7ff ba72 	b.w	12c92 <_vfiprintf_r+0x252>
   137ae:	9603      	str	r6, [sp, #12]
   137b0:	f7ff ba62 	b.w	12c78 <_vfiprintf_r+0x238>
   137b4:	4658      	mov	r0, fp
   137b6:	f7fe fc0d 	bl	11fd4 <__sinit>
   137ba:	f7ff b95b 	b.w	12a74 <_vfiprintf_r+0x34>
   137be:	2901      	cmp	r1, #1
   137c0:	9603      	str	r6, [sp, #12]
   137c2:	f47f accd 	bne.w	13160 <_vfiprintf_r+0x720>
   137c6:	f7ff ba5c 	b.w	12c82 <_vfiprintf_r+0x242>
   137ca:	9b07      	ldr	r3, [sp, #28]
   137cc:	9905      	ldr	r1, [sp, #20]
   137ce:	f853 2b04 	ldr.w	r2, [r3], #4
   137d2:	6011      	str	r1, [r2, #0]
   137d4:	9307      	str	r3, [sp, #28]
   137d6:	f7ff b97e 	b.w	12ad6 <_vfiprintf_r+0x96>
   137da:	2f06      	cmp	r7, #6
   137dc:	463b      	mov	r3, r7
   137de:	9a03      	ldr	r2, [sp, #12]
   137e0:	4c79      	ldr	r4, [pc, #484]	; (139c8 <_vfiprintf_r+0xf88>)
   137e2:	9207      	str	r2, [sp, #28]
   137e4:	bf28      	it	cs
   137e6:	2306      	movcs	r3, #6
   137e8:	9304      	str	r3, [sp, #16]
   137ea:	9303      	str	r3, [sp, #12]
   137ec:	f7ff bb25 	b.w	12e3a <_vfiprintf_r+0x3fa>
   137f0:	9b03      	ldr	r3, [sp, #12]
   137f2:	9907      	ldr	r1, [sp, #28]
   137f4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   137f8:	bf14      	ite	ne
   137fa:	f851 3b04 	ldrne.w	r3, [r1], #4
   137fe:	f851 3b04 	ldreq.w	r3, [r1], #4
   13802:	9107      	str	r1, [sp, #28]
   13804:	bf1c      	itt	ne
   13806:	4602      	movne	r2, r0
   13808:	b2db      	uxtbne	r3, r3
   1380a:	2101      	movs	r1, #1
   1380c:	f7ff ba8f 	b.w	12d2e <_vfiprintf_r+0x2ee>
   13810:	ab16      	add	r3, sp, #88	; 0x58
   13812:	9300      	str	r3, [sp, #0]
   13814:	2300      	movs	r3, #0
   13816:	4619      	mov	r1, r3
   13818:	aa13      	add	r2, sp, #76	; 0x4c
   1381a:	4658      	mov	r0, fp
   1381c:	f000 fb22 	bl	13e64 <_wcsrtombs_r>
   13820:	4603      	mov	r3, r0
   13822:	3301      	adds	r3, #1
   13824:	9004      	str	r0, [sp, #16]
   13826:	f000 80ae 	beq.w	13986 <_vfiprintf_r+0xf46>
   1382a:	9413      	str	r4, [sp, #76]	; 0x4c
   1382c:	9b04      	ldr	r3, [sp, #16]
   1382e:	2b00      	cmp	r3, #0
   13830:	d030      	beq.n	13894 <_vfiprintf_r+0xe54>
   13832:	2b63      	cmp	r3, #99	; 0x63
   13834:	dc63      	bgt.n	138fe <_vfiprintf_r+0xebe>
   13836:	2300      	movs	r3, #0
   13838:	9308      	str	r3, [sp, #32]
   1383a:	ac2b      	add	r4, sp, #172	; 0xac
   1383c:	2208      	movs	r2, #8
   1383e:	2100      	movs	r1, #0
   13840:	a816      	add	r0, sp, #88	; 0x58
   13842:	f7fd fe33 	bl	114ac <memset>
   13846:	9d04      	ldr	r5, [sp, #16]
   13848:	ab16      	add	r3, sp, #88	; 0x58
   1384a:	9300      	str	r3, [sp, #0]
   1384c:	aa13      	add	r2, sp, #76	; 0x4c
   1384e:	462b      	mov	r3, r5
   13850:	4621      	mov	r1, r4
   13852:	4658      	mov	r0, fp
   13854:	f000 fb06 	bl	13e64 <_wcsrtombs_r>
   13858:	4285      	cmp	r5, r0
   1385a:	f040 80ab 	bne.w	139b4 <_vfiprintf_r+0xf74>
   1385e:	9b03      	ldr	r3, [sp, #12]
   13860:	9a04      	ldr	r2, [sp, #16]
   13862:	9307      	str	r3, [sp, #28]
   13864:	2300      	movs	r3, #0
   13866:	54a3      	strb	r3, [r4, r2]
   13868:	461f      	mov	r7, r3
   1386a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1386e:	9303      	str	r3, [sp, #12]
   13870:	f7ff ba16 	b.w	12ca0 <_vfiprintf_r+0x260>
   13874:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13876:	990d      	ldr	r1, [sp, #52]	; 0x34
   13878:	1a9b      	subs	r3, r3, r2
   1387a:	4618      	mov	r0, r3
   1387c:	9308      	str	r3, [sp, #32]
   1387e:	f7fd fa3b 	bl	10cf8 <strncpy>
   13882:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13884:	9b08      	ldr	r3, [sp, #32]
   13886:	784a      	ldrb	r2, [r1, #1]
   13888:	b10a      	cbz	r2, 1388e <_vfiprintf_r+0xe4e>
   1388a:	3101      	adds	r1, #1
   1388c:	910b      	str	r1, [sp, #44]	; 0x2c
   1388e:	f04f 0c00 	mov.w	ip, #0
   13892:	e748      	b.n	13726 <_vfiprintf_r+0xce6>
   13894:	9b03      	ldr	r3, [sp, #12]
   13896:	9307      	str	r3, [sp, #28]
   13898:	9b04      	ldr	r3, [sp, #16]
   1389a:	9303      	str	r3, [sp, #12]
   1389c:	461f      	mov	r7, r3
   1389e:	9308      	str	r3, [sp, #32]
   138a0:	f7ff b9fe 	b.w	12ca0 <_vfiprintf_r+0x260>
   138a4:	2101      	movs	r1, #1
   138a6:	4618      	mov	r0, r3
   138a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   138ac:	f7ff bb13 	b.w	12ed6 <_vfiprintf_r+0x496>
   138b0:	f850 3b04 	ldr.w	r3, [r0], #4
   138b4:	9007      	str	r0, [sp, #28]
   138b6:	4622      	mov	r2, r4
   138b8:	b2db      	uxtb	r3, r3
   138ba:	e6b6      	b.n	1362a <_vfiprintf_r+0xbea>
   138bc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   138c0:	9207      	str	r2, [sp, #28]
   138c2:	17da      	asrs	r2, r3, #31
   138c4:	4611      	mov	r1, r2
   138c6:	f7ff b9ca 	b.w	12c5e <_vfiprintf_r+0x21e>
   138ca:	f851 3b04 	ldr.w	r3, [r1], #4
   138ce:	9107      	str	r1, [sp, #28]
   138d0:	4602      	mov	r2, r0
   138d2:	b2db      	uxtb	r3, r3
   138d4:	f7ff ba27 	b.w	12d26 <_vfiprintf_r+0x2e6>
   138d8:	2301      	movs	r3, #1
   138da:	931c      	str	r3, [sp, #112]	; 0x70
   138dc:	2101      	movs	r1, #1
   138de:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   138e2:	931b      	str	r3, [sp, #108]	; 0x6c
   138e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   138e8:	460b      	mov	r3, r1
   138ea:	f7ff bacd 	b.w	12e88 <_vfiprintf_r+0x448>
   138ee:	9b07      	ldr	r3, [sp, #28]
   138f0:	9905      	ldr	r1, [sp, #20]
   138f2:	f853 2b04 	ldr.w	r2, [r3], #4
   138f6:	9307      	str	r3, [sp, #28]
   138f8:	8011      	strh	r1, [r2, #0]
   138fa:	f7ff b8ec 	b.w	12ad6 <_vfiprintf_r+0x96>
   138fe:	1c59      	adds	r1, r3, #1
   13900:	4658      	mov	r0, fp
   13902:	f7fd fa57 	bl	10db4 <_malloc_r>
   13906:	4604      	mov	r4, r0
   13908:	2800      	cmp	r0, #0
   1390a:	d03c      	beq.n	13986 <_vfiprintf_r+0xf46>
   1390c:	9008      	str	r0, [sp, #32]
   1390e:	e795      	b.n	1383c <_vfiprintf_r+0xdfc>
   13910:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13912:	f7fd fe53 	bl	115bc <__retarget_lock_release_recursive>
   13916:	f7ff b9e9 	b.w	12cec <_vfiprintf_r+0x2ac>
   1391a:	9b03      	ldr	r3, [sp, #12]
   1391c:	9307      	str	r3, [sp, #28]
   1391e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13922:	9f08      	ldr	r7, [sp, #32]
   13924:	f7ff b9bc 	b.w	12ca0 <_vfiprintf_r+0x260>
   13928:	9819      	ldr	r0, [sp, #100]	; 0x64
   1392a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1392c:	3001      	adds	r0, #1
   1392e:	e545      	b.n	133bc <_vfiprintf_r+0x97c>
   13930:	9b03      	ldr	r3, [sp, #12]
   13932:	9307      	str	r3, [sp, #28]
   13934:	4620      	mov	r0, r4
   13936:	f7fe fbe3 	bl	12100 <strlen>
   1393a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1393e:	462f      	mov	r7, r5
   13940:	9004      	str	r0, [sp, #16]
   13942:	9303      	str	r3, [sp, #12]
   13944:	9508      	str	r5, [sp, #32]
   13946:	f7ff b9ab 	b.w	12ca0 <_vfiprintf_r+0x260>
   1394a:	ee18 1a10 	vmov	r1, s16
   1394e:	aa18      	add	r2, sp, #96	; 0x60
   13950:	4658      	mov	r0, fp
   13952:	f7ff f839 	bl	129c8 <__sprint_r.part.0>
   13956:	2800      	cmp	r0, #0
   13958:	f43f aa36 	beq.w	12dc8 <_vfiprintf_r+0x388>
   1395c:	f7ff ba4d 	b.w	12dfa <_vfiprintf_r+0x3ba>
   13960:	9819      	ldr	r0, [sp, #100]	; 0x64
   13962:	3001      	adds	r0, #1
   13964:	e57a      	b.n	1345c <_vfiprintf_r+0xa1c>
   13966:	468c      	mov	ip, r1
   13968:	e46e      	b.n	13248 <_vfiprintf_r+0x808>
   1396a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1396c:	07d9      	lsls	r1, r3, #31
   1396e:	d405      	bmi.n	1397c <_vfiprintf_r+0xf3c>
   13970:	89ab      	ldrh	r3, [r5, #12]
   13972:	059a      	lsls	r2, r3, #22
   13974:	d402      	bmi.n	1397c <_vfiprintf_r+0xf3c>
   13976:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13978:	f7fd fe20 	bl	115bc <__retarget_lock_release_recursive>
   1397c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13980:	9305      	str	r3, [sp, #20]
   13982:	f7ff ba49 	b.w	12e18 <_vfiprintf_r+0x3d8>
   13986:	ee18 2a10 	vmov	r2, s16
   1398a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1398e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13992:	8193      	strh	r3, [r2, #12]
   13994:	f7ff ba35 	b.w	12e02 <_vfiprintf_r+0x3c2>
   13998:	9c07      	ldr	r4, [sp, #28]
   1399a:	9704      	str	r7, [sp, #16]
   1399c:	e746      	b.n	1382c <_vfiprintf_r+0xdec>
   1399e:	9b07      	ldr	r3, [sp, #28]
   139a0:	f898 1001 	ldrb.w	r1, [r8, #1]
   139a4:	f853 7b04 	ldr.w	r7, [r3], #4
   139a8:	9307      	str	r3, [sp, #28]
   139aa:	4690      	mov	r8, r2
   139ac:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   139b0:	f7ff b8b9 	b.w	12b26 <_vfiprintf_r+0xe6>
   139b4:	ee18 2a10 	vmov	r2, s16
   139b8:	8993      	ldrh	r3, [r2, #12]
   139ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139be:	8193      	strh	r3, [r2, #12]
   139c0:	f7ff ba15 	b.w	12dee <_vfiprintf_r+0x3ae>
   139c4:	cccccccd 	.word	0xcccccccd
   139c8:	20002904 	.word	0x20002904

000139cc <__sbprintf>:
   139cc:	b570      	push	{r4, r5, r6, lr}
   139ce:	460c      	mov	r4, r1
   139d0:	8989      	ldrh	r1, [r1, #12]
   139d2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   139d6:	f021 0102 	bic.w	r1, r1, #2
   139da:	f8ad 1014 	strh.w	r1, [sp, #20]
   139de:	6e61      	ldr	r1, [r4, #100]	; 0x64
   139e0:	911b      	str	r1, [sp, #108]	; 0x6c
   139e2:	89e1      	ldrh	r1, [r4, #14]
   139e4:	f8ad 1016 	strh.w	r1, [sp, #22]
   139e8:	69e1      	ldr	r1, [r4, #28]
   139ea:	9109      	str	r1, [sp, #36]	; 0x24
   139ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   139ee:	910b      	str	r1, [sp, #44]	; 0x2c
   139f0:	a91c      	add	r1, sp, #112	; 0x70
   139f2:	9102      	str	r1, [sp, #8]
   139f4:	9106      	str	r1, [sp, #24]
   139f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   139fa:	4606      	mov	r6, r0
   139fc:	9104      	str	r1, [sp, #16]
   139fe:	9107      	str	r1, [sp, #28]
   13a00:	a818      	add	r0, sp, #96	; 0x60
   13a02:	2100      	movs	r1, #0
   13a04:	e9cd 3200 	strd	r3, r2, [sp]
   13a08:	9108      	str	r1, [sp, #32]
   13a0a:	f7fd fdd1 	bl	115b0 <__retarget_lock_init_recursive>
   13a0e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13a12:	a902      	add	r1, sp, #8
   13a14:	4630      	mov	r0, r6
   13a16:	f7ff f813 	bl	12a40 <_vfiprintf_r>
   13a1a:	1e05      	subs	r5, r0, #0
   13a1c:	db07      	blt.n	13a2e <__sbprintf+0x62>
   13a1e:	a902      	add	r1, sp, #8
   13a20:	4630      	mov	r0, r6
   13a22:	f001 f9e1 	bl	14de8 <_fflush_r>
   13a26:	2800      	cmp	r0, #0
   13a28:	bf18      	it	ne
   13a2a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   13a2e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13a32:	065b      	lsls	r3, r3, #25
   13a34:	d503      	bpl.n	13a3e <__sbprintf+0x72>
   13a36:	89a3      	ldrh	r3, [r4, #12]
   13a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13a3c:	81a3      	strh	r3, [r4, #12]
   13a3e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a40:	f7fd fdb8 	bl	115b4 <__retarget_lock_close_recursive>
   13a44:	4628      	mov	r0, r5
   13a46:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   13a4a:	bd70      	pop	{r4, r5, r6, pc}

00013a4c <__register_exitproc>:
   13a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a50:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13ad0 <__register_exitproc+0x84>
   13a54:	4606      	mov	r6, r0
   13a56:	f8da 0000 	ldr.w	r0, [sl]
   13a5a:	4698      	mov	r8, r3
   13a5c:	460f      	mov	r7, r1
   13a5e:	4691      	mov	r9, r2
   13a60:	f7fd fdaa 	bl	115b8 <__retarget_lock_acquire_recursive>
   13a64:	4b18      	ldr	r3, [pc, #96]	; (13ac8 <__register_exitproc+0x7c>)
   13a66:	681c      	ldr	r4, [r3, #0]
   13a68:	b324      	cbz	r4, 13ab4 <__register_exitproc+0x68>
   13a6a:	6865      	ldr	r5, [r4, #4]
   13a6c:	2d1f      	cmp	r5, #31
   13a6e:	dc24      	bgt.n	13aba <__register_exitproc+0x6e>
   13a70:	b95e      	cbnz	r6, 13a8a <__register_exitproc+0x3e>
   13a72:	1c6b      	adds	r3, r5, #1
   13a74:	3502      	adds	r5, #2
   13a76:	f8da 0000 	ldr.w	r0, [sl]
   13a7a:	6063      	str	r3, [r4, #4]
   13a7c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13a80:	f7fd fd9c 	bl	115bc <__retarget_lock_release_recursive>
   13a84:	2000      	movs	r0, #0
   13a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13a8a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   13a8e:	2301      	movs	r3, #1
   13a90:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13a94:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13a98:	40ab      	lsls	r3, r5
   13a9a:	431a      	orrs	r2, r3
   13a9c:	2e02      	cmp	r6, #2
   13a9e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   13aa2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13aa6:	d1e4      	bne.n	13a72 <__register_exitproc+0x26>
   13aa8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   13aac:	431a      	orrs	r2, r3
   13aae:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   13ab2:	e7de      	b.n	13a72 <__register_exitproc+0x26>
   13ab4:	4c05      	ldr	r4, [pc, #20]	; (13acc <__register_exitproc+0x80>)
   13ab6:	601c      	str	r4, [r3, #0]
   13ab8:	e7d7      	b.n	13a6a <__register_exitproc+0x1e>
   13aba:	f8da 0000 	ldr.w	r0, [sl]
   13abe:	f7fd fd7d 	bl	115bc <__retarget_lock_release_recursive>
   13ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ac6:	e7de      	b.n	13a86 <__register_exitproc+0x3a>
   13ac8:	20004cc4 	.word	0x20004cc4
   13acc:	20004cc8 	.word	0x20004cc8
   13ad0:	200033e0 	.word	0x200033e0

00013ad4 <__ascii_mbtowc>:
   13ad4:	b082      	sub	sp, #8
   13ad6:	b149      	cbz	r1, 13aec <__ascii_mbtowc+0x18>
   13ad8:	b15a      	cbz	r2, 13af2 <__ascii_mbtowc+0x1e>
   13ada:	b16b      	cbz	r3, 13af8 <__ascii_mbtowc+0x24>
   13adc:	7813      	ldrb	r3, [r2, #0]
   13ade:	600b      	str	r3, [r1, #0]
   13ae0:	7812      	ldrb	r2, [r2, #0]
   13ae2:	1e10      	subs	r0, r2, #0
   13ae4:	bf18      	it	ne
   13ae6:	2001      	movne	r0, #1
   13ae8:	b002      	add	sp, #8
   13aea:	4770      	bx	lr
   13aec:	a901      	add	r1, sp, #4
   13aee:	2a00      	cmp	r2, #0
   13af0:	d1f3      	bne.n	13ada <__ascii_mbtowc+0x6>
   13af2:	4610      	mov	r0, r2
   13af4:	b002      	add	sp, #8
   13af6:	4770      	bx	lr
   13af8:	f06f 0001 	mvn.w	r0, #1
   13afc:	e7f4      	b.n	13ae8 <__ascii_mbtowc+0x14>
   13afe:	bf00      	nop

00013b00 <fcvtbuf>:
   13b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b04:	460e      	mov	r6, r1
   13b06:	4926      	ldr	r1, [pc, #152]	; (13ba0 <fcvtbuf+0xa0>)
   13b08:	b087      	sub	sp, #28
   13b0a:	680f      	ldr	r7, [r1, #0]
   13b0c:	4604      	mov	r4, r0
   13b0e:	4690      	mov	r8, r2
   13b10:	461d      	mov	r5, r3
   13b12:	b353      	cbz	r3, 13b6a <fcvtbuf+0x6a>
   13b14:	aa05      	add	r2, sp, #20
   13b16:	4633      	mov	r3, r6
   13b18:	9201      	str	r2, [sp, #4]
   13b1a:	2103      	movs	r1, #3
   13b1c:	4622      	mov	r2, r4
   13b1e:	f8cd 8000 	str.w	r8, [sp]
   13b22:	4638      	mov	r0, r7
   13b24:	f000 fa40 	bl	13fa8 <_dtoa_r>
   13b28:	9b05      	ldr	r3, [sp, #20]
   13b2a:	6832      	ldr	r2, [r6, #0]
   13b2c:	4298      	cmp	r0, r3
   13b2e:	4684      	mov	ip, r0
   13b30:	f1c2 0200 	rsb	r2, r2, #0
   13b34:	4629      	mov	r1, r5
   13b36:	d209      	bcs.n	13b4c <fcvtbuf+0x4c>
   13b38:	1a10      	subs	r0, r2, r0
   13b3a:	f81c 3b01 	ldrb.w	r3, [ip], #1
   13b3e:	f801 3b01 	strb.w	r3, [r1], #1
   13b42:	9b05      	ldr	r3, [sp, #20]
   13b44:	4563      	cmp	r3, ip
   13b46:	eb00 020c 	add.w	r2, r0, ip
   13b4a:	d8f6      	bhi.n	13b3a <fcvtbuf+0x3a>
   13b4c:	4294      	cmp	r4, r2
   13b4e:	dd24      	ble.n	13b9a <fcvtbuf+0x9a>
   13b50:	1aa2      	subs	r2, r4, r2
   13b52:	440a      	add	r2, r1
   13b54:	2330      	movs	r3, #48	; 0x30
   13b56:	f801 3b01 	strb.w	r3, [r1], #1
   13b5a:	4291      	cmp	r1, r2
   13b5c:	d1fb      	bne.n	13b56 <fcvtbuf+0x56>
   13b5e:	2300      	movs	r3, #0
   13b60:	7013      	strb	r3, [r2, #0]
   13b62:	4628      	mov	r0, r5
   13b64:	b007      	add	sp, #28
   13b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   13b6c:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13b70:	429a      	cmp	r2, r3
   13b72:	dd01      	ble.n	13b78 <fcvtbuf+0x78>
   13b74:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13b76:	e7cd      	b.n	13b14 <fcvtbuf+0x14>
   13b78:	f100 0924 	add.w	r9, r0, #36	; 0x24
   13b7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   13b7e:	464a      	mov	r2, r9
   13b80:	4638      	mov	r0, r7
   13b82:	ed8d 0b02 	vstr	d0, [sp, #8]
   13b86:	f7fe fb29 	bl	121dc <_realloc_r>
   13b8a:	4605      	mov	r5, r0
   13b8c:	2800      	cmp	r0, #0
   13b8e:	d0e8      	beq.n	13b62 <fcvtbuf+0x62>
   13b90:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13b94:	ed9d 0b02 	vldr	d0, [sp, #8]
   13b98:	e7bc      	b.n	13b14 <fcvtbuf+0x14>
   13b9a:	460a      	mov	r2, r1
   13b9c:	e7df      	b.n	13b5e <fcvtbuf+0x5e>
   13b9e:	bf00      	nop
   13ba0:	20003974 	.word	0x20003974

00013ba4 <_wcrtomb_r>:
   13ba4:	b570      	push	{r4, r5, r6, lr}
   13ba6:	4605      	mov	r5, r0
   13ba8:	b084      	sub	sp, #16
   13baa:	b15b      	cbz	r3, 13bc4 <_wcrtomb_r+0x20>
   13bac:	461c      	mov	r4, r3
   13bae:	b169      	cbz	r1, 13bcc <_wcrtomb_r+0x28>
   13bb0:	4b0e      	ldr	r3, [pc, #56]	; (13bec <_wcrtomb_r+0x48>)
   13bb2:	4628      	mov	r0, r5
   13bb4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13bb8:	4623      	mov	r3, r4
   13bba:	47b0      	blx	r6
   13bbc:	1c43      	adds	r3, r0, #1
   13bbe:	d00f      	beq.n	13be0 <_wcrtomb_r+0x3c>
   13bc0:	b004      	add	sp, #16
   13bc2:	bd70      	pop	{r4, r5, r6, pc}
   13bc4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13bc8:	2900      	cmp	r1, #0
   13bca:	d1f1      	bne.n	13bb0 <_wcrtomb_r+0xc>
   13bcc:	4a07      	ldr	r2, [pc, #28]	; (13bec <_wcrtomb_r+0x48>)
   13bce:	4623      	mov	r3, r4
   13bd0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13bd4:	4628      	mov	r0, r5
   13bd6:	460a      	mov	r2, r1
   13bd8:	a901      	add	r1, sp, #4
   13bda:	47b0      	blx	r6
   13bdc:	1c43      	adds	r3, r0, #1
   13bde:	d1ef      	bne.n	13bc0 <_wcrtomb_r+0x1c>
   13be0:	2200      	movs	r2, #0
   13be2:	238a      	movs	r3, #138	; 0x8a
   13be4:	6022      	str	r2, [r4, #0]
   13be6:	602b      	str	r3, [r5, #0]
   13be8:	b004      	add	sp, #16
   13bea:	bd70      	pop	{r4, r5, r6, pc}
   13bec:	200033ec 	.word	0x200033ec

00013bf0 <_localeconv_r>:
   13bf0:	4800      	ldr	r0, [pc, #0]	; (13bf4 <_localeconv_r+0x4>)
   13bf2:	4770      	bx	lr
   13bf4:	200034dc 	.word	0x200034dc

00013bf8 <_fclose_r>:
   13bf8:	b570      	push	{r4, r5, r6, lr}
   13bfa:	2900      	cmp	r1, #0
   13bfc:	d04b      	beq.n	13c96 <_fclose_r+0x9e>
   13bfe:	4606      	mov	r6, r0
   13c00:	460c      	mov	r4, r1
   13c02:	b110      	cbz	r0, 13c0a <_fclose_r+0x12>
   13c04:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13c06:	2b00      	cmp	r3, #0
   13c08:	d048      	beq.n	13c9c <_fclose_r+0xa4>
   13c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13c0c:	07d8      	lsls	r0, r3, #31
   13c0e:	d534      	bpl.n	13c7a <_fclose_r+0x82>
   13c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c14:	2b00      	cmp	r3, #0
   13c16:	d03e      	beq.n	13c96 <_fclose_r+0x9e>
   13c18:	4621      	mov	r1, r4
   13c1a:	4630      	mov	r0, r6
   13c1c:	f001 f84c 	bl	14cb8 <__sflush_r>
   13c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13c22:	4605      	mov	r5, r0
   13c24:	b133      	cbz	r3, 13c34 <_fclose_r+0x3c>
   13c26:	69e1      	ldr	r1, [r4, #28]
   13c28:	4630      	mov	r0, r6
   13c2a:	4798      	blx	r3
   13c2c:	2800      	cmp	r0, #0
   13c2e:	bfb8      	it	lt
   13c30:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   13c34:	89a3      	ldrh	r3, [r4, #12]
   13c36:	061a      	lsls	r2, r3, #24
   13c38:	d43c      	bmi.n	13cb4 <_fclose_r+0xbc>
   13c3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13c3c:	b141      	cbz	r1, 13c50 <_fclose_r+0x58>
   13c3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13c42:	4299      	cmp	r1, r3
   13c44:	d002      	beq.n	13c4c <_fclose_r+0x54>
   13c46:	4630      	mov	r0, r6
   13c48:	f7fe fd04 	bl	12654 <_free_r>
   13c4c:	2300      	movs	r3, #0
   13c4e:	6323      	str	r3, [r4, #48]	; 0x30
   13c50:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13c52:	b121      	cbz	r1, 13c5e <_fclose_r+0x66>
   13c54:	4630      	mov	r0, r6
   13c56:	f7fe fcfd 	bl	12654 <_free_r>
   13c5a:	2300      	movs	r3, #0
   13c5c:	6463      	str	r3, [r4, #68]	; 0x44
   13c5e:	f7fe f9d7 	bl	12010 <__sfp_lock_acquire>
   13c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13c64:	2200      	movs	r2, #0
   13c66:	07db      	lsls	r3, r3, #31
   13c68:	81a2      	strh	r2, [r4, #12]
   13c6a:	d51f      	bpl.n	13cac <_fclose_r+0xb4>
   13c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13c6e:	f7fd fca1 	bl	115b4 <__retarget_lock_close_recursive>
   13c72:	f7fe f9d3 	bl	1201c <__sfp_lock_release>
   13c76:	4628      	mov	r0, r5
   13c78:	bd70      	pop	{r4, r5, r6, pc}
   13c7a:	89a3      	ldrh	r3, [r4, #12]
   13c7c:	0599      	lsls	r1, r3, #22
   13c7e:	d4cb      	bmi.n	13c18 <_fclose_r+0x20>
   13c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13c82:	f7fd fc99 	bl	115b8 <__retarget_lock_acquire_recursive>
   13c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13c8a:	2b00      	cmp	r3, #0
   13c8c:	d1c4      	bne.n	13c18 <_fclose_r+0x20>
   13c8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   13c90:	f015 0501 	ands.w	r5, r5, #1
   13c94:	d005      	beq.n	13ca2 <_fclose_r+0xaa>
   13c96:	2500      	movs	r5, #0
   13c98:	4628      	mov	r0, r5
   13c9a:	bd70      	pop	{r4, r5, r6, pc}
   13c9c:	f7fe f99a 	bl	11fd4 <__sinit>
   13ca0:	e7b3      	b.n	13c0a <_fclose_r+0x12>
   13ca2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13ca4:	f7fd fc8a 	bl	115bc <__retarget_lock_release_recursive>
   13ca8:	4628      	mov	r0, r5
   13caa:	bd70      	pop	{r4, r5, r6, pc}
   13cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13cae:	f7fd fc85 	bl	115bc <__retarget_lock_release_recursive>
   13cb2:	e7db      	b.n	13c6c <_fclose_r+0x74>
   13cb4:	6921      	ldr	r1, [r4, #16]
   13cb6:	4630      	mov	r0, r6
   13cb8:	f7fe fccc 	bl	12654 <_free_r>
   13cbc:	e7bd      	b.n	13c3a <_fclose_r+0x42>
   13cbe:	bf00      	nop

00013cc0 <__swsetup_r>:
   13cc0:	b538      	push	{r3, r4, r5, lr}
   13cc2:	4b31      	ldr	r3, [pc, #196]	; (13d88 <__swsetup_r+0xc8>)
   13cc4:	681b      	ldr	r3, [r3, #0]
   13cc6:	4605      	mov	r5, r0
   13cc8:	460c      	mov	r4, r1
   13cca:	b113      	cbz	r3, 13cd2 <__swsetup_r+0x12>
   13ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13cce:	2a00      	cmp	r2, #0
   13cd0:	d04e      	beq.n	13d70 <__swsetup_r+0xb0>
   13cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13cd6:	0718      	lsls	r0, r3, #28
   13cd8:	b29a      	uxth	r2, r3
   13cda:	d51c      	bpl.n	13d16 <__swsetup_r+0x56>
   13cdc:	6921      	ldr	r1, [r4, #16]
   13cde:	b329      	cbz	r1, 13d2c <__swsetup_r+0x6c>
   13ce0:	f012 0001 	ands.w	r0, r2, #1
   13ce4:	d007      	beq.n	13cf6 <__swsetup_r+0x36>
   13ce6:	2000      	movs	r0, #0
   13ce8:	60a0      	str	r0, [r4, #8]
   13cea:	6960      	ldr	r0, [r4, #20]
   13cec:	4240      	negs	r0, r0
   13cee:	61a0      	str	r0, [r4, #24]
   13cf0:	b139      	cbz	r1, 13d02 <__swsetup_r+0x42>
   13cf2:	2000      	movs	r0, #0
   13cf4:	bd38      	pop	{r3, r4, r5, pc}
   13cf6:	0795      	lsls	r5, r2, #30
   13cf8:	bf58      	it	pl
   13cfa:	6960      	ldrpl	r0, [r4, #20]
   13cfc:	60a0      	str	r0, [r4, #8]
   13cfe:	2900      	cmp	r1, #0
   13d00:	d1f7      	bne.n	13cf2 <__swsetup_r+0x32>
   13d02:	0612      	lsls	r2, r2, #24
   13d04:	bf58      	it	pl
   13d06:	4608      	movpl	r0, r1
   13d08:	d5f4      	bpl.n	13cf4 <__swsetup_r+0x34>
   13d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d0e:	81a3      	strh	r3, [r4, #12]
   13d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d14:	bd38      	pop	{r3, r4, r5, pc}
   13d16:	06d1      	lsls	r1, r2, #27
   13d18:	d52e      	bpl.n	13d78 <__swsetup_r+0xb8>
   13d1a:	0752      	lsls	r2, r2, #29
   13d1c:	d414      	bmi.n	13d48 <__swsetup_r+0x88>
   13d1e:	6921      	ldr	r1, [r4, #16]
   13d20:	f043 0308 	orr.w	r3, r3, #8
   13d24:	81a3      	strh	r3, [r4, #12]
   13d26:	b29a      	uxth	r2, r3
   13d28:	2900      	cmp	r1, #0
   13d2a:	d1d9      	bne.n	13ce0 <__swsetup_r+0x20>
   13d2c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13d30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13d34:	d0d4      	beq.n	13ce0 <__swsetup_r+0x20>
   13d36:	4621      	mov	r1, r4
   13d38:	4628      	mov	r0, r5
   13d3a:	f000 f827 	bl	13d8c <__smakebuf_r>
   13d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d42:	6921      	ldr	r1, [r4, #16]
   13d44:	b29a      	uxth	r2, r3
   13d46:	e7cb      	b.n	13ce0 <__swsetup_r+0x20>
   13d48:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13d4a:	b151      	cbz	r1, 13d62 <__swsetup_r+0xa2>
   13d4c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13d50:	4291      	cmp	r1, r2
   13d52:	d004      	beq.n	13d5e <__swsetup_r+0x9e>
   13d54:	4628      	mov	r0, r5
   13d56:	f7fe fc7d 	bl	12654 <_free_r>
   13d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d5e:	2200      	movs	r2, #0
   13d60:	6322      	str	r2, [r4, #48]	; 0x30
   13d62:	6921      	ldr	r1, [r4, #16]
   13d64:	2200      	movs	r2, #0
   13d66:	e9c4 1200 	strd	r1, r2, [r4]
   13d6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13d6e:	e7d7      	b.n	13d20 <__swsetup_r+0x60>
   13d70:	4618      	mov	r0, r3
   13d72:	f7fe f92f 	bl	11fd4 <__sinit>
   13d76:	e7ac      	b.n	13cd2 <__swsetup_r+0x12>
   13d78:	2209      	movs	r2, #9
   13d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13d7e:	602a      	str	r2, [r5, #0]
   13d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13d84:	81a3      	strh	r3, [r4, #12]
   13d86:	bd38      	pop	{r3, r4, r5, pc}
   13d88:	20003974 	.word	0x20003974

00013d8c <__smakebuf_r>:
   13d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d90:	898b      	ldrh	r3, [r1, #12]
   13d92:	460c      	mov	r4, r1
   13d94:	0799      	lsls	r1, r3, #30
   13d96:	b096      	sub	sp, #88	; 0x58
   13d98:	d508      	bpl.n	13dac <__smakebuf_r+0x20>
   13d9a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13d9e:	2201      	movs	r2, #1
   13da0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13da4:	6023      	str	r3, [r4, #0]
   13da6:	b016      	add	sp, #88	; 0x58
   13da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13db0:	2900      	cmp	r1, #0
   13db2:	4606      	mov	r6, r0
   13db4:	db25      	blt.n	13e02 <__smakebuf_r+0x76>
   13db6:	466a      	mov	r2, sp
   13db8:	f001 f840 	bl	14e3c <_fstat_r>
   13dbc:	2800      	cmp	r0, #0
   13dbe:	db1f      	blt.n	13e00 <__smakebuf_r+0x74>
   13dc0:	9d01      	ldr	r5, [sp, #4]
   13dc2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13dc6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13dca:	fab5 f585 	clz	r5, r5
   13dce:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13dd2:	096d      	lsrs	r5, r5, #5
   13dd4:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13dd8:	4641      	mov	r1, r8
   13dda:	4630      	mov	r0, r6
   13ddc:	f7fc ffea 	bl	10db4 <_malloc_r>
   13de0:	b1e0      	cbz	r0, 13e1c <__smakebuf_r+0x90>
   13de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13de6:	f8c4 8014 	str.w	r8, [r4, #20]
   13dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13dee:	6020      	str	r0, [r4, #0]
   13df0:	6120      	str	r0, [r4, #16]
   13df2:	81a3      	strh	r3, [r4, #12]
   13df4:	bb35      	cbnz	r5, 13e44 <__smakebuf_r+0xb8>
   13df6:	433b      	orrs	r3, r7
   13df8:	81a3      	strh	r3, [r4, #12]
   13dfa:	b016      	add	sp, #88	; 0x58
   13dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13e00:	89a3      	ldrh	r3, [r4, #12]
   13e02:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13e06:	d019      	beq.n	13e3c <__smakebuf_r+0xb0>
   13e08:	f04f 0840 	mov.w	r8, #64	; 0x40
   13e0c:	2500      	movs	r5, #0
   13e0e:	4641      	mov	r1, r8
   13e10:	4630      	mov	r0, r6
   13e12:	462f      	mov	r7, r5
   13e14:	f7fc ffce 	bl	10db4 <_malloc_r>
   13e18:	2800      	cmp	r0, #0
   13e1a:	d1e2      	bne.n	13de2 <__smakebuf_r+0x56>
   13e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e20:	059a      	lsls	r2, r3, #22
   13e22:	d4c0      	bmi.n	13da6 <__smakebuf_r+0x1a>
   13e24:	f023 0303 	bic.w	r3, r3, #3
   13e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13e2c:	f043 0302 	orr.w	r3, r3, #2
   13e30:	2101      	movs	r1, #1
   13e32:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13e36:	81a3      	strh	r3, [r4, #12]
   13e38:	6022      	str	r2, [r4, #0]
   13e3a:	e7b4      	b.n	13da6 <__smakebuf_r+0x1a>
   13e3c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13e40:	462f      	mov	r7, r5
   13e42:	e7c9      	b.n	13dd8 <__smakebuf_r+0x4c>
   13e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13e48:	4630      	mov	r0, r6
   13e4a:	f001 f80d 	bl	14e68 <_isatty_r>
   13e4e:	b910      	cbnz	r0, 13e56 <__smakebuf_r+0xca>
   13e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e54:	e7cf      	b.n	13df6 <__smakebuf_r+0x6a>
   13e56:	89a3      	ldrh	r3, [r4, #12]
   13e58:	f023 0303 	bic.w	r3, r3, #3
   13e5c:	f043 0301 	orr.w	r3, r3, #1
   13e60:	b21b      	sxth	r3, r3
   13e62:	e7c8      	b.n	13df6 <__smakebuf_r+0x6a>

00013e64 <_wcsrtombs_r>:
   13e64:	b510      	push	{r4, lr}
   13e66:	b082      	sub	sp, #8
   13e68:	9c04      	ldr	r4, [sp, #16]
   13e6a:	e9cd 3400 	strd	r3, r4, [sp]
   13e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e72:	f001 fb17 	bl	154a4 <_wcsnrtombs_r>
   13e76:	b002      	add	sp, #8
   13e78:	bd10      	pop	{r4, pc}
   13e7a:	bf00      	nop

00013e7c <quorem>:
   13e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	6903      	ldr	r3, [r0, #16]
   13e82:	690c      	ldr	r4, [r1, #16]
   13e84:	42a3      	cmp	r3, r4
   13e86:	b083      	sub	sp, #12
   13e88:	f2c0 8087 	blt.w	13f9a <quorem+0x11e>
   13e8c:	3c01      	subs	r4, #1
   13e8e:	f101 0514 	add.w	r5, r1, #20
   13e92:	00a3      	lsls	r3, r4, #2
   13e94:	f100 0814 	add.w	r8, r0, #20
   13e98:	9300      	str	r3, [sp, #0]
   13e9a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13e9e:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13ea2:	3301      	adds	r3, #1
   13ea4:	4681      	mov	r9, r0
   13ea6:	429a      	cmp	r2, r3
   13ea8:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   13eac:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   13eb0:	9001      	str	r0, [sp, #4]
   13eb2:	fbb2 f6f3 	udiv	r6, r2, r3
   13eb6:	d33b      	bcc.n	13f30 <quorem+0xb4>
   13eb8:	f04f 0c00 	mov.w	ip, #0
   13ebc:	46ae      	mov	lr, r5
   13ebe:	4640      	mov	r0, r8
   13ec0:	46e2      	mov	sl, ip
   13ec2:	4663      	mov	r3, ip
   13ec4:	f85e bb04 	ldr.w	fp, [lr], #4
   13ec8:	6802      	ldr	r2, [r0, #0]
   13eca:	fa1f fc8b 	uxth.w	ip, fp
   13ece:	fb06 330c 	mla	r3, r6, ip, r3
   13ed2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13ed6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   13eda:	fb06 cc0b 	mla	ip, r6, fp, ip
   13ede:	b29b      	uxth	r3, r3
   13ee0:	ebaa 0303 	sub.w	r3, sl, r3
   13ee4:	fa1f fa8c 	uxth.w	sl, ip
   13ee8:	fa13 f382 	uxtah	r3, r3, r2
   13eec:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   13ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   13ef4:	b29b      	uxth	r3, r3
   13ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13efa:	4577      	cmp	r7, lr
   13efc:	f840 3b04 	str.w	r3, [r0], #4
   13f00:	ea4f 4a22 	mov.w	sl, r2, asr #16
   13f04:	ea4f 431c 	mov.w	r3, ip, lsr #16
   13f08:	d2dc      	bcs.n	13ec4 <quorem+0x48>
   13f0a:	9b00      	ldr	r3, [sp, #0]
   13f0c:	f858 3003 	ldr.w	r3, [r8, r3]
   13f10:	b973      	cbnz	r3, 13f30 <quorem+0xb4>
   13f12:	9b01      	ldr	r3, [sp, #4]
   13f14:	3b04      	subs	r3, #4
   13f16:	4598      	cmp	r8, r3
   13f18:	d304      	bcc.n	13f24 <quorem+0xa8>
   13f1a:	e007      	b.n	13f2c <quorem+0xb0>
   13f1c:	4598      	cmp	r8, r3
   13f1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   13f22:	d203      	bcs.n	13f2c <quorem+0xb0>
   13f24:	f853 2904 	ldr.w	r2, [r3], #-4
   13f28:	2a00      	cmp	r2, #0
   13f2a:	d0f7      	beq.n	13f1c <quorem+0xa0>
   13f2c:	f8c9 4010 	str.w	r4, [r9, #16]
   13f30:	4648      	mov	r0, r9
   13f32:	f7fd fe3b 	bl	11bac <__mcmp>
   13f36:	2800      	cmp	r0, #0
   13f38:	db2b      	blt.n	13f92 <quorem+0x116>
   13f3a:	3601      	adds	r6, #1
   13f3c:	4641      	mov	r1, r8
   13f3e:	2300      	movs	r3, #0
   13f40:	f855 0b04 	ldr.w	r0, [r5], #4
   13f44:	f8d1 c000 	ldr.w	ip, [r1]
   13f48:	b282      	uxth	r2, r0
   13f4a:	1a9a      	subs	r2, r3, r2
   13f4c:	0c03      	lsrs	r3, r0, #16
   13f4e:	fa12 f28c 	uxtah	r2, r2, ip
   13f52:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   13f56:	eb03 4322 	add.w	r3, r3, r2, asr #16
   13f5a:	b292      	uxth	r2, r2
   13f5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   13f60:	42af      	cmp	r7, r5
   13f62:	f841 2b04 	str.w	r2, [r1], #4
   13f66:	ea4f 4323 	mov.w	r3, r3, asr #16
   13f6a:	d2e9      	bcs.n	13f40 <quorem+0xc4>
   13f6c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13f70:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   13f74:	b96a      	cbnz	r2, 13f92 <quorem+0x116>
   13f76:	3b04      	subs	r3, #4
   13f78:	4598      	cmp	r8, r3
   13f7a:	d304      	bcc.n	13f86 <quorem+0x10a>
   13f7c:	e007      	b.n	13f8e <quorem+0x112>
   13f7e:	4598      	cmp	r8, r3
   13f80:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   13f84:	d203      	bcs.n	13f8e <quorem+0x112>
   13f86:	f853 2904 	ldr.w	r2, [r3], #-4
   13f8a:	2a00      	cmp	r2, #0
   13f8c:	d0f7      	beq.n	13f7e <quorem+0x102>
   13f8e:	f8c9 4010 	str.w	r4, [r9, #16]
   13f92:	4630      	mov	r0, r6
   13f94:	b003      	add	sp, #12
   13f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9a:	2000      	movs	r0, #0
   13f9c:	b003      	add	sp, #12
   13f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fa2:	bf00      	nop
   13fa4:	0000      	movs	r0, r0
	...

00013fa8 <_dtoa_r>:
   13fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fac:	ed2d 8b02 	vpush	{d8}
   13fb0:	b08f      	sub	sp, #60	; 0x3c
   13fb2:	ed8d 0b02 	vstr	d0, [sp, #8]
   13fb6:	9101      	str	r1, [sp, #4]
   13fb8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   13fba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   13fbc:	9305      	str	r3, [sp, #20]
   13fbe:	ec57 6b10 	vmov	r6, r7, d0
   13fc2:	4604      	mov	r4, r0
   13fc4:	4693      	mov	fp, r2
   13fc6:	b141      	cbz	r1, 13fda <_dtoa_r+0x32>
   13fc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   13fca:	604a      	str	r2, [r1, #4]
   13fcc:	2301      	movs	r3, #1
   13fce:	4093      	lsls	r3, r2
   13fd0:	608b      	str	r3, [r1, #8]
   13fd2:	f7fd fb8b 	bl	116ec <_Bfree>
   13fd6:	2300      	movs	r3, #0
   13fd8:	63a3      	str	r3, [r4, #56]	; 0x38
   13fda:	f1b7 0800 	subs.w	r8, r7, #0
   13fde:	bfb4      	ite	lt
   13fe0:	2301      	movlt	r3, #1
   13fe2:	2300      	movge	r3, #0
   13fe4:	602b      	str	r3, [r5, #0]
   13fe6:	4bbe      	ldr	r3, [pc, #760]	; (142e0 <_dtoa_r+0x338>)
   13fe8:	bfbc      	itt	lt
   13fea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   13fee:	f8cd 800c 	strlt.w	r8, [sp, #12]
   13ff2:	ea33 0308 	bics.w	r3, r3, r8
   13ff6:	f000 809f 	beq.w	14138 <_dtoa_r+0x190>
   13ffa:	ed9d 8b02 	vldr	d8, [sp, #8]
   13ffe:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14006:	d111      	bne.n	1402c <_dtoa_r+0x84>
   14008:	9a05      	ldr	r2, [sp, #20]
   1400a:	2301      	movs	r3, #1
   1400c:	6013      	str	r3, [r2, #0]
   1400e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14010:	2b00      	cmp	r3, #0
   14012:	f000 823f 	beq.w	14494 <_dtoa_r+0x4ec>
   14016:	4bb3      	ldr	r3, [pc, #716]	; (142e4 <_dtoa_r+0x33c>)
   14018:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1401a:	6013      	str	r3, [r2, #0]
   1401c:	3b01      	subs	r3, #1
   1401e:	9300      	str	r3, [sp, #0]
   14020:	9800      	ldr	r0, [sp, #0]
   14022:	b00f      	add	sp, #60	; 0x3c
   14024:	ecbd 8b02 	vpop	{d8}
   14028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1402c:	aa0c      	add	r2, sp, #48	; 0x30
   1402e:	a90d      	add	r1, sp, #52	; 0x34
   14030:	4620      	mov	r0, r4
   14032:	eeb0 0b48 	vmov.f64	d0, d8
   14036:	f7fd fe85 	bl	11d44 <__d2b>
   1403a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   1403e:	4605      	mov	r5, r0
   14040:	f040 8092 	bne.w	14168 <_dtoa_r+0x1c0>
   14044:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   14048:	440b      	add	r3, r1
   1404a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   1404e:	2a20      	cmp	r2, #32
   14050:	f340 82fa 	ble.w	14648 <_dtoa_r+0x6a0>
   14054:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   14058:	fa08 f802 	lsl.w	r8, r8, r2
   1405c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   14060:	40d6      	lsrs	r6, r2
   14062:	ea48 0206 	orr.w	r2, r8, r6
   14066:	ee07 2a10 	vmov	s14, r2
   1406a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   1406e:	1e58      	subs	r0, r3, #1
   14070:	ee17 6a90 	vmov	r6, s15
   14074:	ec53 2b17 	vmov	r2, r3, d7
   14078:	f04f 0a01 	mov.w	sl, #1
   1407c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   14080:	ed9f 3b91 	vldr	d3, [pc, #580]	; 142c8 <_dtoa_r+0x320>
   14084:	ed9f 7b92 	vldr	d7, [pc, #584]	; 142d0 <_dtoa_r+0x328>
   14088:	ed9f 5b93 	vldr	d5, [pc, #588]	; 142d8 <_dtoa_r+0x330>
   1408c:	ee06 0a90 	vmov	s13, r0
   14090:	ec43 2b12 	vmov	d2, r2, r3
   14094:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   14098:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   1409c:	ee32 6b46 	vsub.f64	d6, d2, d6
   140a0:	eea6 7b03 	vfma.f64	d7, d6, d3
   140a4:	eea4 7b05 	vfma.f64	d7, d4, d5
   140a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   140ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   140b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140b4:	ee16 7a90 	vmov	r7, s13
   140b8:	d508      	bpl.n	140cc <_dtoa_r+0x124>
   140ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   140be:	eeb4 6b47 	vcmp.f64	d6, d7
   140c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140c6:	bf18      	it	ne
   140c8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   140cc:	2f16      	cmp	r7, #22
   140ce:	f200 8145 	bhi.w	1435c <_dtoa_r+0x3b4>
   140d2:	4b85      	ldr	r3, [pc, #532]	; (142e8 <_dtoa_r+0x340>)
   140d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   140d8:	ed93 7b00 	vldr	d7, [r3]
   140dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
   140e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   140e4:	d557      	bpl.n	14196 <_dtoa_r+0x1ee>
   140e6:	1a09      	subs	r1, r1, r0
   140e8:	2300      	movs	r3, #0
   140ea:	f1b1 0801 	subs.w	r8, r1, #1
   140ee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   140f2:	930a      	str	r3, [sp, #40]	; 0x28
   140f4:	f100 8139 	bmi.w	1436a <_dtoa_r+0x3c2>
   140f8:	2300      	movs	r3, #0
   140fa:	9306      	str	r3, [sp, #24]
   140fc:	2f00      	cmp	r7, #0
   140fe:	da52      	bge.n	141a6 <_dtoa_r+0x1fe>
   14100:	9b06      	ldr	r3, [sp, #24]
   14102:	9704      	str	r7, [sp, #16]
   14104:	1bdb      	subs	r3, r3, r7
   14106:	9306      	str	r3, [sp, #24]
   14108:	427b      	negs	r3, r7
   1410a:	9308      	str	r3, [sp, #32]
   1410c:	9b01      	ldr	r3, [sp, #4]
   1410e:	2b09      	cmp	r3, #9
   14110:	f04f 0700 	mov.w	r7, #0
   14114:	d84e      	bhi.n	141b4 <_dtoa_r+0x20c>
   14116:	2b05      	cmp	r3, #5
   14118:	f340 829d 	ble.w	14656 <_dtoa_r+0x6ae>
   1411c:	3b04      	subs	r3, #4
   1411e:	9301      	str	r3, [sp, #4]
   14120:	2600      	movs	r6, #0
   14122:	9b01      	ldr	r3, [sp, #4]
   14124:	1e9a      	subs	r2, r3, #2
   14126:	2a03      	cmp	r2, #3
   14128:	f200 8125 	bhi.w	14376 <_dtoa_r+0x3ce>
   1412c:	e8df f012 	tbh	[pc, r2, lsl #1]
   14130:	03a703aa 	.word	0x03a703aa
   14134:	037e039d 	.word	0x037e039d
   14138:	9a05      	ldr	r2, [sp, #20]
   1413a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   1413e:	f242 730f 	movw	r3, #9999	; 0x270f
   14142:	ea58 0806 	orrs.w	r8, r8, r6
   14146:	6013      	str	r3, [r2, #0]
   14148:	d11e      	bne.n	14188 <_dtoa_r+0x1e0>
   1414a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1414c:	2b00      	cmp	r3, #0
   1414e:	f000 8591 	beq.w	14c74 <_dtoa_r+0xccc>
   14152:	4b66      	ldr	r3, [pc, #408]	; (142ec <_dtoa_r+0x344>)
   14154:	9300      	str	r3, [sp, #0]
   14156:	3308      	adds	r3, #8
   14158:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1415a:	9800      	ldr	r0, [sp, #0]
   1415c:	6013      	str	r3, [r2, #0]
   1415e:	b00f      	add	sp, #60	; 0x3c
   14160:	ecbd 8b02 	vpop	{d8}
   14164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14168:	ee18 6a90 	vmov	r6, s17
   1416c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   14170:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   14174:	ec53 2b18 	vmov	r2, r3, d8
   14178:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   1417c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1417e:	f04f 0a00 	mov.w	sl, #0
   14182:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14186:	e77b      	b.n	14080 <_dtoa_r+0xd8>
   14188:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1418a:	2b00      	cmp	r3, #0
   1418c:	f040 833b 	bne.w	14806 <_dtoa_r+0x85e>
   14190:	4b57      	ldr	r3, [pc, #348]	; (142f0 <_dtoa_r+0x348>)
   14192:	9300      	str	r3, [sp, #0]
   14194:	e744      	b.n	14020 <_dtoa_r+0x78>
   14196:	1a09      	subs	r1, r1, r0
   14198:	2300      	movs	r3, #0
   1419a:	f1b1 0801 	subs.w	r8, r1, #1
   1419e:	930a      	str	r3, [sp, #40]	; 0x28
   141a0:	f100 80e3 	bmi.w	1436a <_dtoa_r+0x3c2>
   141a4:	9306      	str	r3, [sp, #24]
   141a6:	2300      	movs	r3, #0
   141a8:	9308      	str	r3, [sp, #32]
   141aa:	9b01      	ldr	r3, [sp, #4]
   141ac:	9704      	str	r7, [sp, #16]
   141ae:	2b09      	cmp	r3, #9
   141b0:	44b8      	add	r8, r7
   141b2:	d9b0      	bls.n	14116 <_dtoa_r+0x16e>
   141b4:	2300      	movs	r3, #0
   141b6:	2601      	movs	r6, #1
   141b8:	9301      	str	r3, [sp, #4]
   141ba:	9607      	str	r6, [sp, #28]
   141bc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   141c0:	469b      	mov	fp, r3
   141c2:	2100      	movs	r1, #0
   141c4:	63e1      	str	r1, [r4, #60]	; 0x3c
   141c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   141ca:	4620      	mov	r0, r4
   141cc:	f7fd fa68 	bl	116a0 <_Balloc>
   141d0:	9000      	str	r0, [sp, #0]
   141d2:	2800      	cmp	r0, #0
   141d4:	f000 8540 	beq.w	14c58 <_dtoa_r+0xcb0>
   141d8:	9b00      	ldr	r3, [sp, #0]
   141da:	63a3      	str	r3, [r4, #56]	; 0x38
   141dc:	f1b9 0f0e 	cmp.w	r9, #14
   141e0:	f200 80dc 	bhi.w	1439c <_dtoa_r+0x3f4>
   141e4:	2e00      	cmp	r6, #0
   141e6:	f000 80d9 	beq.w	1439c <_dtoa_r+0x3f4>
   141ea:	9b04      	ldr	r3, [sp, #16]
   141ec:	2b00      	cmp	r3, #0
   141ee:	f340 83de 	ble.w	149ae <_dtoa_r+0xa06>
   141f2:	4a3d      	ldr	r2, [pc, #244]	; (142e8 <_dtoa_r+0x340>)
   141f4:	f003 010f 	and.w	r1, r3, #15
   141f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   141fc:	ed92 7b00 	vldr	d7, [r2]
   14200:	111a      	asrs	r2, r3, #4
   14202:	05db      	lsls	r3, r3, #23
   14204:	f140 8382 	bpl.w	1490c <_dtoa_r+0x964>
   14208:	493a      	ldr	r1, [pc, #232]	; (142f4 <_dtoa_r+0x34c>)
   1420a:	ed91 6b08 	vldr	d6, [r1, #32]
   1420e:	f002 020f 	and.w	r2, r2, #15
   14212:	2003      	movs	r0, #3
   14214:	ee88 5b06 	vdiv.f64	d5, d8, d6
   14218:	b15a      	cbz	r2, 14232 <_dtoa_r+0x28a>
   1421a:	4936      	ldr	r1, [pc, #216]	; (142f4 <_dtoa_r+0x34c>)
   1421c:	07d6      	lsls	r6, r2, #31
   1421e:	d504      	bpl.n	1422a <_dtoa_r+0x282>
   14220:	ed91 6b00 	vldr	d6, [r1]
   14224:	3001      	adds	r0, #1
   14226:	ee27 7b06 	vmul.f64	d7, d7, d6
   1422a:	1052      	asrs	r2, r2, #1
   1422c:	f101 0108 	add.w	r1, r1, #8
   14230:	d1f4      	bne.n	1421c <_dtoa_r+0x274>
   14232:	ee85 6b07 	vdiv.f64	d6, d5, d7
   14236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14238:	b13b      	cbz	r3, 1424a <_dtoa_r+0x2a2>
   1423a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1423e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14246:	f100 84ae 	bmi.w	14ba6 <_dtoa_r+0xbfe>
   1424a:	ee07 0a90 	vmov	s15, r0
   1424e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14252:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14256:	eea5 7b06 	vfma.f64	d7, d5, d6
   1425a:	ee17 2a90 	vmov	r2, s15
   1425e:	ec51 0b17 	vmov	r0, r1, d7
   14262:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   14266:	f1b9 0f00 	cmp.w	r9, #0
   1426a:	f000 8388 	beq.w	1497e <_dtoa_r+0x9d6>
   1426e:	9e04      	ldr	r6, [sp, #16]
   14270:	464a      	mov	r2, r9
   14272:	9b07      	ldr	r3, [sp, #28]
   14274:	2b00      	cmp	r3, #0
   14276:	f000 8447 	beq.w	14b08 <_dtoa_r+0xb60>
   1427a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   1427e:	4b1a      	ldr	r3, [pc, #104]	; (142e8 <_dtoa_r+0x340>)
   14280:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   14284:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14288:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   1428c:	ee36 7b47 	vsub.f64	d7, d6, d7
   14290:	ed1c 6b02 	vldr	d6, [ip, #-8]
   14294:	ee83 5b06 	vdiv.f64	d5, d3, d6
   14298:	ec41 0b16 	vmov	d6, r0, r1
   1429c:	ee14 0a90 	vmov	r0, s9
   142a0:	ee35 5b46 	vsub.f64	d5, d5, d6
   142a4:	9900      	ldr	r1, [sp, #0]
   142a6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   142aa:	3030      	adds	r0, #48	; 0x30
   142ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   142b0:	f801 0b01 	strb.w	r0, [r1], #1
   142b4:	f300 84ac 	bgt.w	14c10 <_dtoa_r+0xc68>
   142b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   142bc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   142c0:	f04f 0c00 	mov.w	ip, #0
   142c4:	e031      	b.n	1432a <_dtoa_r+0x382>
   142c6:	bf00      	nop
   142c8:	636f4361 	.word	0x636f4361
   142cc:	3fd287a7 	.word	0x3fd287a7
   142d0:	8b60c8b3 	.word	0x8b60c8b3
   142d4:	3fc68a28 	.word	0x3fc68a28
   142d8:	509f79fb 	.word	0x509f79fb
   142dc:	3fd34413 	.word	0x3fd34413
   142e0:	7ff00000 	.word	0x7ff00000
   142e4:	20002cad 	.word	0x20002cad
   142e8:	20000b58 	.word	0x20000b58
   142ec:	20002870 	.word	0x20002870
   142f0:	2000287c 	.word	0x2000287c
   142f4:	20000b30 	.word	0x20000b30
   142f8:	f10c 0c01 	add.w	ip, ip, #1
   142fc:	4594      	cmp	ip, r2
   142fe:	da4d      	bge.n	1439c <_dtoa_r+0x3f4>
   14300:	ee27 7b04 	vmul.f64	d7, d7, d4
   14304:	ee25 5b04 	vmul.f64	d5, d5, d4
   14308:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1430c:	ee16 3a90 	vmov	r3, s13
   14310:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   14314:	3330      	adds	r3, #48	; 0x30
   14316:	ee37 7b43 	vsub.f64	d7, d7, d3
   1431a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14322:	f801 3b01 	strb.w	r3, [r1], #1
   14326:	f100 8473 	bmi.w	14c10 <_dtoa_r+0xc68>
   1432a:	ee32 6b47 	vsub.f64	d6, d2, d7
   1432e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   14332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14336:	d5df      	bpl.n	142f8 <_dtoa_r+0x350>
   14338:	9a00      	ldr	r2, [sp, #0]
   1433a:	9604      	str	r6, [sp, #16]
   1433c:	e002      	b.n	14344 <_dtoa_r+0x39c>
   1433e:	428a      	cmp	r2, r1
   14340:	f000 8450 	beq.w	14be4 <_dtoa_r+0xc3c>
   14344:	4689      	mov	r9, r1
   14346:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1434a:	2b39      	cmp	r3, #57	; 0x39
   1434c:	d0f7      	beq.n	1433e <_dtoa_r+0x396>
   1434e:	3301      	adds	r3, #1
   14350:	b2db      	uxtb	r3, r3
   14352:	700b      	strb	r3, [r1, #0]
   14354:	9b04      	ldr	r3, [sp, #16]
   14356:	3301      	adds	r3, #1
   14358:	9304      	str	r3, [sp, #16]
   1435a:	e155      	b.n	14608 <_dtoa_r+0x660>
   1435c:	1a09      	subs	r1, r1, r0
   1435e:	2301      	movs	r3, #1
   14360:	f1b1 0801 	subs.w	r8, r1, #1
   14364:	930a      	str	r3, [sp, #40]	; 0x28
   14366:	f57f aec7 	bpl.w	140f8 <_dtoa_r+0x150>
   1436a:	f1c1 0301 	rsb	r3, r1, #1
   1436e:	9306      	str	r3, [sp, #24]
   14370:	f04f 0800 	mov.w	r8, #0
   14374:	e6c2      	b.n	140fc <_dtoa_r+0x154>
   14376:	2600      	movs	r6, #0
   14378:	63e6      	str	r6, [r4, #60]	; 0x3c
   1437a:	4631      	mov	r1, r6
   1437c:	4620      	mov	r0, r4
   1437e:	f7fd f98f 	bl	116a0 <_Balloc>
   14382:	9000      	str	r0, [sp, #0]
   14384:	2800      	cmp	r0, #0
   14386:	f000 8467 	beq.w	14c58 <_dtoa_r+0xcb0>
   1438a:	9b00      	ldr	r3, [sp, #0]
   1438c:	63a3      	str	r3, [r4, #56]	; 0x38
   1438e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14392:	930b      	str	r3, [sp, #44]	; 0x2c
   14394:	4699      	mov	r9, r3
   14396:	2301      	movs	r3, #1
   14398:	46b3      	mov	fp, r6
   1439a:	9307      	str	r3, [sp, #28]
   1439c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1439e:	2a00      	cmp	r2, #0
   143a0:	db55      	blt.n	1444e <_dtoa_r+0x4a6>
   143a2:	9904      	ldr	r1, [sp, #16]
   143a4:	290e      	cmp	r1, #14
   143a6:	dc52      	bgt.n	1444e <_dtoa_r+0x4a6>
   143a8:	4bb7      	ldr	r3, [pc, #732]	; (14688 <_dtoa_r+0x6e0>)
   143aa:	f1bb 0f00 	cmp.w	fp, #0
   143ae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   143b2:	ed93 6b00 	vldr	d6, [r3]
   143b6:	da15      	bge.n	143e4 <_dtoa_r+0x43c>
   143b8:	f1b9 0f00 	cmp.w	r9, #0
   143bc:	dc12      	bgt.n	143e4 <_dtoa_r+0x43c>
   143be:	f040 82f2 	bne.w	149a6 <_dtoa_r+0x9fe>
   143c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   143c6:	ee26 7b07 	vmul.f64	d7, d6, d7
   143ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
   143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   143d2:	46ca      	mov	sl, r9
   143d4:	464e      	mov	r6, r9
   143d6:	f200 826d 	bhi.w	148b4 <_dtoa_r+0x90c>
   143da:	f8dd 8000 	ldr.w	r8, [sp]
   143de:	ea6f 0b0b 	mvn.w	fp, fp
   143e2:	e270      	b.n	148c6 <_dtoa_r+0x91e>
   143e4:	ee88 7b06 	vdiv.f64	d7, d8, d6
   143e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   143ec:	9900      	ldr	r1, [sp, #0]
   143ee:	ee17 3a10 	vmov	r3, s14
   143f2:	f1b9 0f01 	cmp.w	r9, #1
   143f6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   143fa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   143fe:	f801 3b01 	strb.w	r3, [r1], #1
   14402:	eea5 8b46 	vfms.f64	d8, d5, d6
   14406:	f000 8334 	beq.w	14a72 <_dtoa_r+0xaca>
   1440a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1440e:	2301      	movs	r3, #1
   14410:	e011      	b.n	14436 <_dtoa_r+0x48e>
   14412:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14416:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1441a:	3301      	adds	r3, #1
   1441c:	ee17 2a10 	vmov	r2, s14
   14420:	454b      	cmp	r3, r9
   14422:	f102 0230 	add.w	r2, r2, #48	; 0x30
   14426:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1442a:	f801 2b01 	strb.w	r2, [r1], #1
   1442e:	eea5 8b46 	vfms.f64	d8, d5, d6
   14432:	f000 831e 	beq.w	14a72 <_dtoa_r+0xaca>
   14436:	ee28 8b04 	vmul.f64	d8, d8, d4
   1443a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14442:	d1e6      	bne.n	14412 <_dtoa_r+0x46a>
   14444:	9b04      	ldr	r3, [sp, #16]
   14446:	3301      	adds	r3, #1
   14448:	9304      	str	r3, [sp, #16]
   1444a:	4689      	mov	r9, r1
   1444c:	e0dc      	b.n	14608 <_dtoa_r+0x660>
   1444e:	9b07      	ldr	r3, [sp, #28]
   14450:	b343      	cbz	r3, 144a4 <_dtoa_r+0x4fc>
   14452:	9b01      	ldr	r3, [sp, #4]
   14454:	2b01      	cmp	r3, #1
   14456:	f340 8276 	ble.w	14946 <_dtoa_r+0x99e>
   1445a:	9b08      	ldr	r3, [sp, #32]
   1445c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   14460:	4553      	cmp	r3, sl
   14462:	f280 823f 	bge.w	148e4 <_dtoa_r+0x93c>
   14466:	9b08      	ldr	r3, [sp, #32]
   14468:	f8cd a020 	str.w	sl, [sp, #32]
   1446c:	ebaa 0203 	sub.w	r2, sl, r3
   14470:	4417      	add	r7, r2
   14472:	f04f 0a00 	mov.w	sl, #0
   14476:	f1b9 0f00 	cmp.w	r9, #0
   1447a:	f2c0 8325 	blt.w	14ac8 <_dtoa_r+0xb20>
   1447e:	9b06      	ldr	r3, [sp, #24]
   14480:	9309      	str	r3, [sp, #36]	; 0x24
   14482:	444b      	add	r3, r9
   14484:	44c8      	add	r8, r9
   14486:	9306      	str	r3, [sp, #24]
   14488:	2101      	movs	r1, #1
   1448a:	4620      	mov	r0, r4
   1448c:	f7fd f9da 	bl	11844 <__i2b>
   14490:	4606      	mov	r6, r0
   14492:	e00c      	b.n	144ae <_dtoa_r+0x506>
   14494:	4b7d      	ldr	r3, [pc, #500]	; (1468c <_dtoa_r+0x6e4>)
   14496:	9300      	str	r3, [sp, #0]
   14498:	9800      	ldr	r0, [sp, #0]
   1449a:	b00f      	add	sp, #60	; 0x3c
   1449c:	ecbd 8b02 	vpop	{d8}
   144a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a4:	9b06      	ldr	r3, [sp, #24]
   144a6:	f8dd a020 	ldr.w	sl, [sp, #32]
   144aa:	9e07      	ldr	r6, [sp, #28]
   144ac:	9309      	str	r3, [sp, #36]	; 0x24
   144ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   144b0:	b16b      	cbz	r3, 144ce <_dtoa_r+0x526>
   144b2:	f1b8 0f00 	cmp.w	r8, #0
   144b6:	dd0a      	ble.n	144ce <_dtoa_r+0x526>
   144b8:	4543      	cmp	r3, r8
   144ba:	9906      	ldr	r1, [sp, #24]
   144bc:	461a      	mov	r2, r3
   144be:	bfa8      	it	ge
   144c0:	4642      	movge	r2, r8
   144c2:	1a89      	subs	r1, r1, r2
   144c4:	1a9b      	subs	r3, r3, r2
   144c6:	9106      	str	r1, [sp, #24]
   144c8:	9309      	str	r3, [sp, #36]	; 0x24
   144ca:	eba8 0802 	sub.w	r8, r8, r2
   144ce:	9b08      	ldr	r3, [sp, #32]
   144d0:	b163      	cbz	r3, 144ec <_dtoa_r+0x544>
   144d2:	9b07      	ldr	r3, [sp, #28]
   144d4:	2b00      	cmp	r3, #0
   144d6:	f000 82a7 	beq.w	14a28 <_dtoa_r+0xa80>
   144da:	f1ba 0f00 	cmp.w	sl, #0
   144de:	f300 8204 	bgt.w	148ea <_dtoa_r+0x942>
   144e2:	9b08      	ldr	r3, [sp, #32]
   144e4:	ebb3 020a 	subs.w	r2, r3, sl
   144e8:	f040 82ff 	bne.w	14aea <_dtoa_r+0xb42>
   144ec:	2101      	movs	r1, #1
   144ee:	4620      	mov	r0, r4
   144f0:	f7fd f9a8 	bl	11844 <__i2b>
   144f4:	2f00      	cmp	r7, #0
   144f6:	4682      	mov	sl, r0
   144f8:	f300 80af 	bgt.w	1465a <_dtoa_r+0x6b2>
   144fc:	9b01      	ldr	r3, [sp, #4]
   144fe:	2b01      	cmp	r3, #1
   14500:	f340 8187 	ble.w	14812 <_dtoa_r+0x86a>
   14504:	2300      	movs	r3, #0
   14506:	9308      	str	r3, [sp, #32]
   14508:	2001      	movs	r0, #1
   1450a:	2f00      	cmp	r7, #0
   1450c:	f040 80b1 	bne.w	14672 <_dtoa_r+0x6ca>
   14510:	4440      	add	r0, r8
   14512:	f010 001f 	ands.w	r0, r0, #31
   14516:	f000 817a 	beq.w	1480e <_dtoa_r+0x866>
   1451a:	f1c0 0220 	rsb	r2, r0, #32
   1451e:	2a04      	cmp	r2, #4
   14520:	f300 8088 	bgt.w	14634 <_dtoa_r+0x68c>
   14524:	f040 81f6 	bne.w	14914 <_dtoa_r+0x96c>
   14528:	9b06      	ldr	r3, [sp, #24]
   1452a:	2b00      	cmp	r3, #0
   1452c:	dd05      	ble.n	1453a <_dtoa_r+0x592>
   1452e:	4629      	mov	r1, r5
   14530:	461a      	mov	r2, r3
   14532:	4620      	mov	r0, r4
   14534:	f7fd fac2 	bl	11abc <__lshift>
   14538:	4605      	mov	r5, r0
   1453a:	f1b8 0f00 	cmp.w	r8, #0
   1453e:	dd05      	ble.n	1454c <_dtoa_r+0x5a4>
   14540:	4651      	mov	r1, sl
   14542:	4642      	mov	r2, r8
   14544:	4620      	mov	r0, r4
   14546:	f7fd fab9 	bl	11abc <__lshift>
   1454a:	4682      	mov	sl, r0
   1454c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1454e:	2b00      	cmp	r3, #0
   14550:	f040 813f 	bne.w	147d2 <_dtoa_r+0x82a>
   14554:	f1b9 0f00 	cmp.w	r9, #0
   14558:	f340 8125 	ble.w	147a6 <_dtoa_r+0x7fe>
   1455c:	9b07      	ldr	r3, [sp, #28]
   1455e:	2b00      	cmp	r3, #0
   14560:	f040 80a3 	bne.w	146aa <_dtoa_r+0x702>
   14564:	9b04      	ldr	r3, [sp, #16]
   14566:	3301      	adds	r3, #1
   14568:	9304      	str	r3, [sp, #16]
   1456a:	f8dd 8000 	ldr.w	r8, [sp]
   1456e:	2701      	movs	r7, #1
   14570:	e007      	b.n	14582 <_dtoa_r+0x5da>
   14572:	4629      	mov	r1, r5
   14574:	2300      	movs	r3, #0
   14576:	220a      	movs	r2, #10
   14578:	4620      	mov	r0, r4
   1457a:	f7fd f8c1 	bl	11700 <__multadd>
   1457e:	3701      	adds	r7, #1
   14580:	4605      	mov	r5, r0
   14582:	4651      	mov	r1, sl
   14584:	4628      	mov	r0, r5
   14586:	f7ff fc79 	bl	13e7c <quorem>
   1458a:	45b9      	cmp	r9, r7
   1458c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   14590:	f808 0b01 	strb.w	r0, [r8], #1
   14594:	dced      	bgt.n	14572 <_dtoa_r+0x5ca>
   14596:	f1b9 0f00 	cmp.w	r9, #0
   1459a:	9a00      	ldr	r2, [sp, #0]
   1459c:	bfcc      	ite	gt
   1459e:	46cb      	movgt	fp, r9
   145a0:	f04f 0b01 	movle.w	fp, #1
   145a4:	4603      	mov	r3, r0
   145a6:	4493      	add	fp, r2
   145a8:	2700      	movs	r7, #0
   145aa:	4629      	mov	r1, r5
   145ac:	2201      	movs	r2, #1
   145ae:	4620      	mov	r0, r4
   145b0:	9301      	str	r3, [sp, #4]
   145b2:	f7fd fa83 	bl	11abc <__lshift>
   145b6:	4651      	mov	r1, sl
   145b8:	4605      	mov	r5, r0
   145ba:	f7fd faf7 	bl	11bac <__mcmp>
   145be:	2800      	cmp	r0, #0
   145c0:	f340 81af 	ble.w	14922 <_dtoa_r+0x97a>
   145c4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   145c8:	9a00      	ldr	r2, [sp, #0]
   145ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   145ce:	e004      	b.n	145da <_dtoa_r+0x632>
   145d0:	455a      	cmp	r2, fp
   145d2:	f000 81b1 	beq.w	14938 <_dtoa_r+0x990>
   145d6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   145da:	2b39      	cmp	r3, #57	; 0x39
   145dc:	f10b 0901 	add.w	r9, fp, #1
   145e0:	d0f6      	beq.n	145d0 <_dtoa_r+0x628>
   145e2:	3301      	adds	r3, #1
   145e4:	f88b 3000 	strb.w	r3, [fp]
   145e8:	4651      	mov	r1, sl
   145ea:	4620      	mov	r0, r4
   145ec:	f7fd f87e 	bl	116ec <_Bfree>
   145f0:	b156      	cbz	r6, 14608 <_dtoa_r+0x660>
   145f2:	b12f      	cbz	r7, 14600 <_dtoa_r+0x658>
   145f4:	42b7      	cmp	r7, r6
   145f6:	d003      	beq.n	14600 <_dtoa_r+0x658>
   145f8:	4639      	mov	r1, r7
   145fa:	4620      	mov	r0, r4
   145fc:	f7fd f876 	bl	116ec <_Bfree>
   14600:	4631      	mov	r1, r6
   14602:	4620      	mov	r0, r4
   14604:	f7fd f872 	bl	116ec <_Bfree>
   14608:	4629      	mov	r1, r5
   1460a:	4620      	mov	r0, r4
   1460c:	f7fd f86e 	bl	116ec <_Bfree>
   14610:	2300      	movs	r3, #0
   14612:	f889 3000 	strb.w	r3, [r9]
   14616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1461a:	601a      	str	r2, [r3, #0]
   1461c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1461e:	2b00      	cmp	r3, #0
   14620:	f43f acfe 	beq.w	14020 <_dtoa_r+0x78>
   14624:	9800      	ldr	r0, [sp, #0]
   14626:	f8c3 9000 	str.w	r9, [r3]
   1462a:	b00f      	add	sp, #60	; 0x3c
   1462c:	ecbd 8b02 	vpop	{d8}
   14630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14634:	f1c0 001c 	rsb	r0, r0, #28
   14638:	9b06      	ldr	r3, [sp, #24]
   1463a:	4403      	add	r3, r0
   1463c:	9306      	str	r3, [sp, #24]
   1463e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14640:	4403      	add	r3, r0
   14642:	9309      	str	r3, [sp, #36]	; 0x24
   14644:	4480      	add	r8, r0
   14646:	e76f      	b.n	14528 <_dtoa_r+0x580>
   14648:	f1c2 0220 	rsb	r2, r2, #32
   1464c:	fa06 f202 	lsl.w	r2, r6, r2
   14650:	ee07 2a10 	vmov	s14, r2
   14654:	e509      	b.n	1406a <_dtoa_r+0xc2>
   14656:	2601      	movs	r6, #1
   14658:	e563      	b.n	14122 <_dtoa_r+0x17a>
   1465a:	4601      	mov	r1, r0
   1465c:	463a      	mov	r2, r7
   1465e:	4620      	mov	r0, r4
   14660:	f7fd f9cc 	bl	119fc <__pow5mult>
   14664:	9b01      	ldr	r3, [sp, #4]
   14666:	2b01      	cmp	r3, #1
   14668:	4682      	mov	sl, r0
   1466a:	f340 81c5 	ble.w	149f8 <_dtoa_r+0xa50>
   1466e:	2300      	movs	r3, #0
   14670:	9308      	str	r3, [sp, #32]
   14672:	f8da 2010 	ldr.w	r2, [sl, #16]
   14676:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   1467a:	6910      	ldr	r0, [r2, #16]
   1467c:	f7fd f892 	bl	117a4 <__hi0bits>
   14680:	f1c0 0020 	rsb	r0, r0, #32
   14684:	e744      	b.n	14510 <_dtoa_r+0x568>
   14686:	bf00      	nop
   14688:	20000b58 	.word	0x20000b58
   1468c:	20002cac 	.word	0x20002cac
   14690:	4631      	mov	r1, r6
   14692:	2300      	movs	r3, #0
   14694:	220a      	movs	r2, #10
   14696:	4620      	mov	r0, r4
   14698:	f7fd f832 	bl	11700 <__multadd>
   1469c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1469e:	2b00      	cmp	r3, #0
   146a0:	4606      	mov	r6, r0
   146a2:	f340 82ce 	ble.w	14c42 <_dtoa_r+0xc9a>
   146a6:	9704      	str	r7, [sp, #16]
   146a8:	4699      	mov	r9, r3
   146aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   146ac:	2b00      	cmp	r3, #0
   146ae:	dd05      	ble.n	146bc <_dtoa_r+0x714>
   146b0:	4631      	mov	r1, r6
   146b2:	461a      	mov	r2, r3
   146b4:	4620      	mov	r0, r4
   146b6:	f7fd fa01 	bl	11abc <__lshift>
   146ba:	4606      	mov	r6, r0
   146bc:	9b08      	ldr	r3, [sp, #32]
   146be:	2b00      	cmp	r3, #0
   146c0:	f040 81eb 	bne.w	14a9a <_dtoa_r+0xaf2>
   146c4:	46b0      	mov	r8, r6
   146c6:	9b02      	ldr	r3, [sp, #8]
   146c8:	9f00      	ldr	r7, [sp, #0]
   146ca:	f003 0201 	and.w	r2, r3, #1
   146ce:	1e7b      	subs	r3, r7, #1
   146d0:	444b      	add	r3, r9
   146d2:	9308      	str	r3, [sp, #32]
   146d4:	9b01      	ldr	r3, [sp, #4]
   146d6:	920a      	str	r2, [sp, #40]	; 0x28
   146d8:	4313      	orrs	r3, r2
   146da:	9309      	str	r3, [sp, #36]	; 0x24
   146dc:	4651      	mov	r1, sl
   146de:	4628      	mov	r0, r5
   146e0:	f7ff fbcc 	bl	13e7c <quorem>
   146e4:	4631      	mov	r1, r6
   146e6:	4683      	mov	fp, r0
   146e8:	4628      	mov	r0, r5
   146ea:	f7fd fa5f 	bl	11bac <__mcmp>
   146ee:	4642      	mov	r2, r8
   146f0:	4651      	mov	r1, sl
   146f2:	4681      	mov	r9, r0
   146f4:	4620      	mov	r0, r4
   146f6:	f7fd fa7b 	bl	11bf0 <__mdiff>
   146fa:	68c2      	ldr	r2, [r0, #12]
   146fc:	4601      	mov	r1, r0
   146fe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   14702:	2a00      	cmp	r2, #0
   14704:	d142      	bne.n	1478c <_dtoa_r+0x7e4>
   14706:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1470a:	4628      	mov	r0, r5
   1470c:	f7fd fa4e 	bl	11bac <__mcmp>
   14710:	9906      	ldr	r1, [sp, #24]
   14712:	9002      	str	r0, [sp, #8]
   14714:	4620      	mov	r0, r4
   14716:	f7fc ffe9 	bl	116ec <_Bfree>
   1471a:	9a02      	ldr	r2, [sp, #8]
   1471c:	9b07      	ldr	r3, [sp, #28]
   1471e:	b91a      	cbnz	r2, 14728 <_dtoa_r+0x780>
   14720:	9909      	ldr	r1, [sp, #36]	; 0x24
   14722:	2900      	cmp	r1, #0
   14724:	f000 827e 	beq.w	14c24 <_dtoa_r+0xc7c>
   14728:	f1b9 0f00 	cmp.w	r9, #0
   1472c:	f2c0 8183 	blt.w	14a36 <_dtoa_r+0xa8e>
   14730:	9901      	ldr	r1, [sp, #4]
   14732:	ea49 0901 	orr.w	r9, r9, r1
   14736:	990a      	ldr	r1, [sp, #40]	; 0x28
   14738:	ea51 0909 	orrs.w	r9, r1, r9
   1473c:	f000 817b 	beq.w	14a36 <_dtoa_r+0xa8e>
   14740:	2a00      	cmp	r2, #0
   14742:	f300 81c6 	bgt.w	14ad2 <_dtoa_r+0xb2a>
   14746:	9a08      	ldr	r2, [sp, #32]
   14748:	703b      	strb	r3, [r7, #0]
   1474a:	f107 0901 	add.w	r9, r7, #1
   1474e:	4297      	cmp	r7, r2
   14750:	46cb      	mov	fp, r9
   14752:	f000 81c4 	beq.w	14ade <_dtoa_r+0xb36>
   14756:	4629      	mov	r1, r5
   14758:	2300      	movs	r3, #0
   1475a:	220a      	movs	r2, #10
   1475c:	4620      	mov	r0, r4
   1475e:	f7fc ffcf 	bl	11700 <__multadd>
   14762:	4546      	cmp	r6, r8
   14764:	4605      	mov	r5, r0
   14766:	4631      	mov	r1, r6
   14768:	f04f 0300 	mov.w	r3, #0
   1476c:	f04f 020a 	mov.w	r2, #10
   14770:	4620      	mov	r0, r4
   14772:	d012      	beq.n	1479a <_dtoa_r+0x7f2>
   14774:	f7fc ffc4 	bl	11700 <__multadd>
   14778:	4641      	mov	r1, r8
   1477a:	4606      	mov	r6, r0
   1477c:	2300      	movs	r3, #0
   1477e:	220a      	movs	r2, #10
   14780:	4620      	mov	r0, r4
   14782:	f7fc ffbd 	bl	11700 <__multadd>
   14786:	464f      	mov	r7, r9
   14788:	4680      	mov	r8, r0
   1478a:	e7a7      	b.n	146dc <_dtoa_r+0x734>
   1478c:	4620      	mov	r0, r4
   1478e:	9302      	str	r3, [sp, #8]
   14790:	f7fc ffac 	bl	116ec <_Bfree>
   14794:	9b02      	ldr	r3, [sp, #8]
   14796:	2201      	movs	r2, #1
   14798:	e7c6      	b.n	14728 <_dtoa_r+0x780>
   1479a:	f7fc ffb1 	bl	11700 <__multadd>
   1479e:	464f      	mov	r7, r9
   147a0:	4606      	mov	r6, r0
   147a2:	4680      	mov	r8, r0
   147a4:	e79a      	b.n	146dc <_dtoa_r+0x734>
   147a6:	9b01      	ldr	r3, [sp, #4]
   147a8:	2b02      	cmp	r3, #2
   147aa:	dc71      	bgt.n	14890 <_dtoa_r+0x8e8>
   147ac:	9b07      	ldr	r3, [sp, #28]
   147ae:	2b00      	cmp	r3, #0
   147b0:	f47f af7b 	bne.w	146aa <_dtoa_r+0x702>
   147b4:	9b04      	ldr	r3, [sp, #16]
   147b6:	4651      	mov	r1, sl
   147b8:	3301      	adds	r3, #1
   147ba:	4628      	mov	r0, r5
   147bc:	9304      	str	r3, [sp, #16]
   147be:	f7ff fb5d 	bl	13e7c <quorem>
   147c2:	f8dd b000 	ldr.w	fp, [sp]
   147c6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   147ca:	f80b 3b01 	strb.w	r3, [fp], #1
   147ce:	2700      	movs	r7, #0
   147d0:	e6eb      	b.n	145aa <_dtoa_r+0x602>
   147d2:	4651      	mov	r1, sl
   147d4:	4628      	mov	r0, r5
   147d6:	f7fd f9e9 	bl	11bac <__mcmp>
   147da:	2800      	cmp	r0, #0
   147dc:	f6bf aeba 	bge.w	14554 <_dtoa_r+0x5ac>
   147e0:	4629      	mov	r1, r5
   147e2:	2300      	movs	r3, #0
   147e4:	220a      	movs	r2, #10
   147e6:	4620      	mov	r0, r4
   147e8:	f7fc ff8a 	bl	11700 <__multadd>
   147ec:	9b04      	ldr	r3, [sp, #16]
   147ee:	1e5f      	subs	r7, r3, #1
   147f0:	9b07      	ldr	r3, [sp, #28]
   147f2:	4605      	mov	r5, r0
   147f4:	2b00      	cmp	r3, #0
   147f6:	f47f af4b 	bne.w	14690 <_dtoa_r+0x6e8>
   147fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   147fc:	2b00      	cmp	r3, #0
   147fe:	f340 8218 	ble.w	14c32 <_dtoa_r+0xc8a>
   14802:	4699      	mov	r9, r3
   14804:	e6b1      	b.n	1456a <_dtoa_r+0x5c2>
   14806:	4bbc      	ldr	r3, [pc, #752]	; (14af8 <_dtoa_r+0xb50>)
   14808:	9300      	str	r3, [sp, #0]
   1480a:	3303      	adds	r3, #3
   1480c:	e4a4      	b.n	14158 <_dtoa_r+0x1b0>
   1480e:	201c      	movs	r0, #28
   14810:	e712      	b.n	14638 <_dtoa_r+0x690>
   14812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14816:	2800      	cmp	r0, #0
   14818:	f47f ae74 	bne.w	14504 <_dtoa_r+0x55c>
   1481c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14820:	2a00      	cmp	r2, #0
   14822:	f000 80f4 	beq.w	14a0e <_dtoa_r+0xa66>
   14826:	9b02      	ldr	r3, [sp, #8]
   14828:	9308      	str	r3, [sp, #32]
   1482a:	e66d      	b.n	14508 <_dtoa_r+0x560>
   1482c:	2301      	movs	r3, #1
   1482e:	9307      	str	r3, [sp, #28]
   14830:	9b04      	ldr	r3, [sp, #16]
   14832:	445b      	add	r3, fp
   14834:	f103 0901 	add.w	r9, r3, #1
   14838:	f1b9 0f01 	cmp.w	r9, #1
   1483c:	46cc      	mov	ip, r9
   1483e:	930b      	str	r3, [sp, #44]	; 0x2c
   14840:	bfb8      	it	lt
   14842:	f04f 0c01 	movlt.w	ip, #1
   14846:	2100      	movs	r1, #0
   14848:	f1bc 0f17 	cmp.w	ip, #23
   1484c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1484e:	f77f acbc 	ble.w	141ca <_dtoa_r+0x222>
   14852:	2001      	movs	r0, #1
   14854:	2204      	movs	r2, #4
   14856:	0052      	lsls	r2, r2, #1
   14858:	f102 0314 	add.w	r3, r2, #20
   1485c:	4563      	cmp	r3, ip
   1485e:	4601      	mov	r1, r0
   14860:	f100 0001 	add.w	r0, r0, #1
   14864:	d9f7      	bls.n	14856 <_dtoa_r+0x8ae>
   14866:	63e1      	str	r1, [r4, #60]	; 0x3c
   14868:	e4af      	b.n	141ca <_dtoa_r+0x222>
   1486a:	2301      	movs	r3, #1
   1486c:	9307      	str	r3, [sp, #28]
   1486e:	f1bb 0f00 	cmp.w	fp, #0
   14872:	dd52      	ble.n	1491a <_dtoa_r+0x972>
   14874:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   14878:	46d9      	mov	r9, fp
   1487a:	46dc      	mov	ip, fp
   1487c:	e7e3      	b.n	14846 <_dtoa_r+0x89e>
   1487e:	2300      	movs	r3, #0
   14880:	9307      	str	r3, [sp, #28]
   14882:	e7d5      	b.n	14830 <_dtoa_r+0x888>
   14884:	2300      	movs	r3, #0
   14886:	9307      	str	r3, [sp, #28]
   14888:	e7f1      	b.n	1486e <_dtoa_r+0x8c6>
   1488a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1488e:	9704      	str	r7, [sp, #16]
   14890:	f1b9 0f00 	cmp.w	r9, #0
   14894:	f47f ada1 	bne.w	143da <_dtoa_r+0x432>
   14898:	4651      	mov	r1, sl
   1489a:	464b      	mov	r3, r9
   1489c:	2205      	movs	r2, #5
   1489e:	4620      	mov	r0, r4
   148a0:	f7fc ff2e 	bl	11700 <__multadd>
   148a4:	4601      	mov	r1, r0
   148a6:	4682      	mov	sl, r0
   148a8:	4628      	mov	r0, r5
   148aa:	f7fd f97f 	bl	11bac <__mcmp>
   148ae:	2800      	cmp	r0, #0
   148b0:	f77f ad93 	ble.w	143da <_dtoa_r+0x432>
   148b4:	9b04      	ldr	r3, [sp, #16]
   148b6:	f103 0b01 	add.w	fp, r3, #1
   148ba:	9b00      	ldr	r3, [sp, #0]
   148bc:	2231      	movs	r2, #49	; 0x31
   148be:	4698      	mov	r8, r3
   148c0:	f803 2b01 	strb.w	r2, [r3], #1
   148c4:	9300      	str	r3, [sp, #0]
   148c6:	4651      	mov	r1, sl
   148c8:	4620      	mov	r0, r4
   148ca:	f7fc ff0f 	bl	116ec <_Bfree>
   148ce:	f10b 0301 	add.w	r3, fp, #1
   148d2:	f8dd 9000 	ldr.w	r9, [sp]
   148d6:	9304      	str	r3, [sp, #16]
   148d8:	f8cd 8000 	str.w	r8, [sp]
   148dc:	2e00      	cmp	r6, #0
   148de:	f47f ae8f 	bne.w	14600 <_dtoa_r+0x658>
   148e2:	e691      	b.n	14608 <_dtoa_r+0x660>
   148e4:	eba3 0a0a 	sub.w	sl, r3, sl
   148e8:	e5c5      	b.n	14476 <_dtoa_r+0x4ce>
   148ea:	4631      	mov	r1, r6
   148ec:	4652      	mov	r2, sl
   148ee:	4620      	mov	r0, r4
   148f0:	f7fd f884 	bl	119fc <__pow5mult>
   148f4:	462a      	mov	r2, r5
   148f6:	4601      	mov	r1, r0
   148f8:	4606      	mov	r6, r0
   148fa:	4620      	mov	r0, r4
   148fc:	f7fc ffd0 	bl	118a0 <__multiply>
   14900:	4629      	mov	r1, r5
   14902:	4605      	mov	r5, r0
   14904:	4620      	mov	r0, r4
   14906:	f7fc fef1 	bl	116ec <_Bfree>
   1490a:	e5ea      	b.n	144e2 <_dtoa_r+0x53a>
   1490c:	2002      	movs	r0, #2
   1490e:	eeb0 5b48 	vmov.f64	d5, d8
   14912:	e481      	b.n	14218 <_dtoa_r+0x270>
   14914:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   14918:	e68e      	b.n	14638 <_dtoa_r+0x690>
   1491a:	f04f 0b01 	mov.w	fp, #1
   1491e:	46d9      	mov	r9, fp
   14920:	e44f      	b.n	141c2 <_dtoa_r+0x21a>
   14922:	d103      	bne.n	1492c <_dtoa_r+0x984>
   14924:	9b01      	ldr	r3, [sp, #4]
   14926:	07db      	lsls	r3, r3, #31
   14928:	f53f ae4c 	bmi.w	145c4 <_dtoa_r+0x61c>
   1492c:	46d9      	mov	r9, fp
   1492e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   14932:	2b30      	cmp	r3, #48	; 0x30
   14934:	d0fa      	beq.n	1492c <_dtoa_r+0x984>
   14936:	e657      	b.n	145e8 <_dtoa_r+0x640>
   14938:	9b04      	ldr	r3, [sp, #16]
   1493a:	9a00      	ldr	r2, [sp, #0]
   1493c:	3301      	adds	r3, #1
   1493e:	9304      	str	r3, [sp, #16]
   14940:	2331      	movs	r3, #49	; 0x31
   14942:	7013      	strb	r3, [r2, #0]
   14944:	e650      	b.n	145e8 <_dtoa_r+0x640>
   14946:	f1ba 0f00 	cmp.w	sl, #0
   1494a:	f000 8123 	beq.w	14b94 <_dtoa_r+0xbec>
   1494e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   14952:	9b06      	ldr	r3, [sp, #24]
   14954:	9309      	str	r3, [sp, #36]	; 0x24
   14956:	4413      	add	r3, r2
   14958:	f8dd a020 	ldr.w	sl, [sp, #32]
   1495c:	9306      	str	r3, [sp, #24]
   1495e:	4490      	add	r8, r2
   14960:	e592      	b.n	14488 <_dtoa_r+0x4e0>
   14962:	ee07 0a90 	vmov	s15, r0
   14966:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   1496a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1496e:	eea6 5b07 	vfma.f64	d5, d6, d7
   14972:	ee15 2a90 	vmov	r2, s11
   14976:	ec51 0b15 	vmov	r0, r1, d5
   1497a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1497e:	ec41 0b15 	vmov	d5, r0, r1
   14982:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14986:	ee36 7b47 	vsub.f64	d7, d6, d7
   1498a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14992:	f300 8137 	bgt.w	14c04 <_dtoa_r+0xc5c>
   14996:	eeb1 5b45 	vneg.f64	d5, d5
   1499a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149a2:	f57f acfb 	bpl.w	1439c <_dtoa_r+0x3f4>
   149a6:	f04f 0a00 	mov.w	sl, #0
   149aa:	4656      	mov	r6, sl
   149ac:	e515      	b.n	143da <_dtoa_r+0x432>
   149ae:	f000 80f5 	beq.w	14b9c <_dtoa_r+0xbf4>
   149b2:	9b04      	ldr	r3, [sp, #16]
   149b4:	4951      	ldr	r1, [pc, #324]	; (14afc <_dtoa_r+0xb54>)
   149b6:	425a      	negs	r2, r3
   149b8:	f002 000f 	and.w	r0, r2, #15
   149bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   149c0:	ed91 6b00 	vldr	d6, [r1]
   149c4:	1112      	asrs	r2, r2, #4
   149c6:	ee28 6b06 	vmul.f64	d6, d8, d6
   149ca:	f000 8142 	beq.w	14c52 <_dtoa_r+0xcaa>
   149ce:	eeb0 7b46 	vmov.f64	d7, d6
   149d2:	494b      	ldr	r1, [pc, #300]	; (14b00 <_dtoa_r+0xb58>)
   149d4:	2600      	movs	r6, #0
   149d6:	2002      	movs	r0, #2
   149d8:	07d3      	lsls	r3, r2, #31
   149da:	d505      	bpl.n	149e8 <_dtoa_r+0xa40>
   149dc:	ed91 5b00 	vldr	d5, [r1]
   149e0:	3001      	adds	r0, #1
   149e2:	2601      	movs	r6, #1
   149e4:	ee27 7b05 	vmul.f64	d7, d7, d5
   149e8:	1052      	asrs	r2, r2, #1
   149ea:	f101 0108 	add.w	r1, r1, #8
   149ee:	d1f3      	bne.n	149d8 <_dtoa_r+0xa30>
   149f0:	2e00      	cmp	r6, #0
   149f2:	fe06 6b07 	vseleq.f64	d6, d6, d7
   149f6:	e41e      	b.n	14236 <_dtoa_r+0x28e>
   149f8:	9b02      	ldr	r3, [sp, #8]
   149fa:	2b00      	cmp	r3, #0
   149fc:	f47f ae37 	bne.w	1466e <_dtoa_r+0x6c6>
   14a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14a04:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14a08:	2a00      	cmp	r2, #0
   14a0a:	f040 8137 	bne.w	14c7c <_dtoa_r+0xcd4>
   14a0e:	4a3d      	ldr	r2, [pc, #244]	; (14b04 <_dtoa_r+0xb5c>)
   14a10:	400a      	ands	r2, r1
   14a12:	2a00      	cmp	r2, #0
   14a14:	f000 80fa 	beq.w	14c0c <_dtoa_r+0xc64>
   14a18:	9b06      	ldr	r3, [sp, #24]
   14a1a:	3301      	adds	r3, #1
   14a1c:	9306      	str	r3, [sp, #24]
   14a1e:	2301      	movs	r3, #1
   14a20:	f108 0801 	add.w	r8, r8, #1
   14a24:	9308      	str	r3, [sp, #32]
   14a26:	e56f      	b.n	14508 <_dtoa_r+0x560>
   14a28:	4629      	mov	r1, r5
   14a2a:	9a08      	ldr	r2, [sp, #32]
   14a2c:	4620      	mov	r0, r4
   14a2e:	f7fc ffe5 	bl	119fc <__pow5mult>
   14a32:	4605      	mov	r5, r0
   14a34:	e55a      	b.n	144ec <_dtoa_r+0x544>
   14a36:	2a00      	cmp	r2, #0
   14a38:	dd12      	ble.n	14a60 <_dtoa_r+0xab8>
   14a3a:	4629      	mov	r1, r5
   14a3c:	2201      	movs	r2, #1
   14a3e:	4620      	mov	r0, r4
   14a40:	9301      	str	r3, [sp, #4]
   14a42:	f7fd f83b 	bl	11abc <__lshift>
   14a46:	4651      	mov	r1, sl
   14a48:	4605      	mov	r5, r0
   14a4a:	f7fd f8af 	bl	11bac <__mcmp>
   14a4e:	2800      	cmp	r0, #0
   14a50:	9b01      	ldr	r3, [sp, #4]
   14a52:	f340 80e1 	ble.w	14c18 <_dtoa_r+0xc70>
   14a56:	2b39      	cmp	r3, #57	; 0x39
   14a58:	f000 80ca 	beq.w	14bf0 <_dtoa_r+0xc48>
   14a5c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   14a60:	46b9      	mov	r9, r7
   14a62:	f809 3b01 	strb.w	r3, [r9], #1
   14a66:	9b04      	ldr	r3, [sp, #16]
   14a68:	3301      	adds	r3, #1
   14a6a:	4637      	mov	r7, r6
   14a6c:	9304      	str	r3, [sp, #16]
   14a6e:	4646      	mov	r6, r8
   14a70:	e5ba      	b.n	145e8 <_dtoa_r+0x640>
   14a72:	ee38 8b08 	vadd.f64	d8, d8, d8
   14a76:	eeb4 8bc6 	vcmpe.f64	d8, d6
   14a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a7e:	dc0a      	bgt.n	14a96 <_dtoa_r+0xaee>
   14a80:	eeb4 8b46 	vcmp.f64	d8, d6
   14a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14a88:	f47f acdc 	bne.w	14444 <_dtoa_r+0x49c>
   14a8c:	ee17 3a10 	vmov	r3, s14
   14a90:	07d8      	lsls	r0, r3, #31
   14a92:	f57f acd7 	bpl.w	14444 <_dtoa_r+0x49c>
   14a96:	9a00      	ldr	r2, [sp, #0]
   14a98:	e454      	b.n	14344 <_dtoa_r+0x39c>
   14a9a:	6871      	ldr	r1, [r6, #4]
   14a9c:	4620      	mov	r0, r4
   14a9e:	f7fc fdff 	bl	116a0 <_Balloc>
   14aa2:	4607      	mov	r7, r0
   14aa4:	2800      	cmp	r0, #0
   14aa6:	f000 80de 	beq.w	14c66 <_dtoa_r+0xcbe>
   14aaa:	6933      	ldr	r3, [r6, #16]
   14aac:	3302      	adds	r3, #2
   14aae:	009a      	lsls	r2, r3, #2
   14ab0:	f106 010c 	add.w	r1, r6, #12
   14ab4:	300c      	adds	r0, #12
   14ab6:	f7f8 fc31 	bl	d31c <memcpy>
   14aba:	4639      	mov	r1, r7
   14abc:	2201      	movs	r2, #1
   14abe:	4620      	mov	r0, r4
   14ac0:	f7fc fffc 	bl	11abc <__lshift>
   14ac4:	4680      	mov	r8, r0
   14ac6:	e5fe      	b.n	146c6 <_dtoa_r+0x71e>
   14ac8:	9b06      	ldr	r3, [sp, #24]
   14aca:	eba3 0309 	sub.w	r3, r3, r9
   14ace:	9309      	str	r3, [sp, #36]	; 0x24
   14ad0:	e4da      	b.n	14488 <_dtoa_r+0x4e0>
   14ad2:	2b39      	cmp	r3, #57	; 0x39
   14ad4:	f000 808c 	beq.w	14bf0 <_dtoa_r+0xc48>
   14ad8:	46b9      	mov	r9, r7
   14ada:	3301      	adds	r3, #1
   14adc:	e7c1      	b.n	14a62 <_dtoa_r+0xaba>
   14ade:	9a04      	ldr	r2, [sp, #16]
   14ae0:	3201      	adds	r2, #1
   14ae2:	4637      	mov	r7, r6
   14ae4:	9204      	str	r2, [sp, #16]
   14ae6:	4646      	mov	r6, r8
   14ae8:	e55f      	b.n	145aa <_dtoa_r+0x602>
   14aea:	4629      	mov	r1, r5
   14aec:	4620      	mov	r0, r4
   14aee:	f7fc ff85 	bl	119fc <__pow5mult>
   14af2:	4605      	mov	r5, r0
   14af4:	e4fa      	b.n	144ec <_dtoa_r+0x544>
   14af6:	bf00      	nop
   14af8:	2000287c 	.word	0x2000287c
   14afc:	20000b58 	.word	0x20000b58
   14b00:	20000b30 	.word	0x20000b30
   14b04:	7ff00000 	.word	0x7ff00000
   14b08:	4b5e      	ldr	r3, [pc, #376]	; (14c84 <_dtoa_r+0xcdc>)
   14b0a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   14b0e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14b12:	ed1c 3b02 	vldr	d3, [ip, #-8]
   14b16:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   14b1a:	ee36 7b47 	vsub.f64	d7, d6, d7
   14b1e:	ec41 0b16 	vmov	d6, r0, r1
   14b22:	ee15 1a90 	vmov	r1, s11
   14b26:	ee23 3b06 	vmul.f64	d3, d3, d6
   14b2a:	9800      	ldr	r0, [sp, #0]
   14b2c:	3130      	adds	r1, #48	; 0x30
   14b2e:	2a01      	cmp	r2, #1
   14b30:	f800 1b01 	strb.w	r1, [r0], #1
   14b34:	f000 8083 	beq.w	14c3e <_dtoa_r+0xc96>
   14b38:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14b3c:	9b00      	ldr	r3, [sp, #0]
   14b3e:	1899      	adds	r1, r3, r2
   14b40:	ee27 7b04 	vmul.f64	d7, d7, d4
   14b44:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   14b48:	ee16 3a90 	vmov	r3, s13
   14b4c:	3330      	adds	r3, #48	; 0x30
   14b4e:	f800 3b01 	strb.w	r3, [r0], #1
   14b52:	4281      	cmp	r1, r0
   14b54:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   14b58:	ee37 7b45 	vsub.f64	d7, d7, d5
   14b5c:	d1f0      	bne.n	14b40 <_dtoa_r+0xb98>
   14b5e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14b62:	ee33 5b06 	vadd.f64	d5, d3, d6
   14b66:	eeb4 5bc7 	vcmpe.f64	d5, d7
   14b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14b6e:	f53f abe3 	bmi.w	14338 <_dtoa_r+0x390>
   14b72:	ee36 6b43 	vsub.f64	d6, d6, d3
   14b76:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14b7e:	f77f ac0d 	ble.w	1439c <_dtoa_r+0x3f4>
   14b82:	4689      	mov	r9, r1
   14b84:	3901      	subs	r1, #1
   14b86:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   14b8a:	2b30      	cmp	r3, #48	; 0x30
   14b8c:	d0f9      	beq.n	14b82 <_dtoa_r+0xbda>
   14b8e:	1c73      	adds	r3, r6, #1
   14b90:	9304      	str	r3, [sp, #16]
   14b92:	e539      	b.n	14608 <_dtoa_r+0x660>
   14b94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   14b9a:	e6da      	b.n	14952 <_dtoa_r+0x9aa>
   14b9c:	2002      	movs	r0, #2
   14b9e:	eeb0 6b48 	vmov.f64	d6, d8
   14ba2:	f7ff bb48 	b.w	14236 <_dtoa_r+0x28e>
   14ba6:	f1b9 0f00 	cmp.w	r9, #0
   14baa:	f43f aeda 	beq.w	14962 <_dtoa_r+0x9ba>
   14bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14bb0:	2a00      	cmp	r2, #0
   14bb2:	f77f abf3 	ble.w	1439c <_dtoa_r+0x3f4>
   14bb6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14bba:	ee26 6b04 	vmul.f64	d6, d6, d4
   14bbe:	3001      	adds	r0, #1
   14bc0:	ee07 0a90 	vmov	s15, r0
   14bc4:	9b04      	ldr	r3, [sp, #16]
   14bc6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14bca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14bce:	eea6 7b05 	vfma.f64	d7, d6, d5
   14bd2:	ee17 ca90 	vmov	ip, s15
   14bd6:	ec51 0b17 	vmov	r0, r1, d7
   14bda:	1e5e      	subs	r6, r3, #1
   14bdc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   14be0:	f7ff bb47 	b.w	14272 <_dtoa_r+0x2ca>
   14be4:	9b04      	ldr	r3, [sp, #16]
   14be6:	3301      	adds	r3, #1
   14be8:	9304      	str	r3, [sp, #16]
   14bea:	2331      	movs	r3, #49	; 0x31
   14bec:	f7ff bbb1 	b.w	14352 <_dtoa_r+0x3aa>
   14bf0:	9b04      	ldr	r3, [sp, #16]
   14bf2:	46bb      	mov	fp, r7
   14bf4:	3301      	adds	r3, #1
   14bf6:	9304      	str	r3, [sp, #16]
   14bf8:	2339      	movs	r3, #57	; 0x39
   14bfa:	4637      	mov	r7, r6
   14bfc:	f80b 3b01 	strb.w	r3, [fp], #1
   14c00:	4646      	mov	r6, r8
   14c02:	e4e1      	b.n	145c8 <_dtoa_r+0x620>
   14c04:	f04f 0a00 	mov.w	sl, #0
   14c08:	4656      	mov	r6, sl
   14c0a:	e653      	b.n	148b4 <_dtoa_r+0x90c>
   14c0c:	9208      	str	r2, [sp, #32]
   14c0e:	e47b      	b.n	14508 <_dtoa_r+0x560>
   14c10:	1c73      	adds	r3, r6, #1
   14c12:	9304      	str	r3, [sp, #16]
   14c14:	4689      	mov	r9, r1
   14c16:	e4f7      	b.n	14608 <_dtoa_r+0x660>
   14c18:	f47f af22 	bne.w	14a60 <_dtoa_r+0xab8>
   14c1c:	07da      	lsls	r2, r3, #31
   14c1e:	f57f af1f 	bpl.w	14a60 <_dtoa_r+0xab8>
   14c22:	e718      	b.n	14a56 <_dtoa_r+0xaae>
   14c24:	2b39      	cmp	r3, #57	; 0x39
   14c26:	d0e3      	beq.n	14bf0 <_dtoa_r+0xc48>
   14c28:	f1b9 0f00 	cmp.w	r9, #0
   14c2c:	f73f af16 	bgt.w	14a5c <_dtoa_r+0xab4>
   14c30:	e716      	b.n	14a60 <_dtoa_r+0xab8>
   14c32:	9b01      	ldr	r3, [sp, #4]
   14c34:	2b02      	cmp	r3, #2
   14c36:	f73f ae28 	bgt.w	1488a <_dtoa_r+0x8e2>
   14c3a:	9704      	str	r7, [sp, #16]
   14c3c:	e5ba      	b.n	147b4 <_dtoa_r+0x80c>
   14c3e:	4601      	mov	r1, r0
   14c40:	e78d      	b.n	14b5e <_dtoa_r+0xbb6>
   14c42:	9b01      	ldr	r3, [sp, #4]
   14c44:	2b02      	cmp	r3, #2
   14c46:	f73f ae20 	bgt.w	1488a <_dtoa_r+0x8e2>
   14c4a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   14c4e:	9704      	str	r7, [sp, #16]
   14c50:	e52b      	b.n	146aa <_dtoa_r+0x702>
   14c52:	2002      	movs	r0, #2
   14c54:	f7ff baef 	b.w	14236 <_dtoa_r+0x28e>
   14c58:	4b0b      	ldr	r3, [pc, #44]	; (14c88 <_dtoa_r+0xce0>)
   14c5a:	480c      	ldr	r0, [pc, #48]	; (14c8c <_dtoa_r+0xce4>)
   14c5c:	2200      	movs	r2, #0
   14c5e:	f240 11af 	movw	r1, #431	; 0x1af
   14c62:	f7fc fc03 	bl	1146c <__assert_func>
   14c66:	4b08      	ldr	r3, [pc, #32]	; (14c88 <_dtoa_r+0xce0>)
   14c68:	4808      	ldr	r0, [pc, #32]	; (14c8c <_dtoa_r+0xce4>)
   14c6a:	463a      	mov	r2, r7
   14c6c:	f240 21ef 	movw	r1, #751	; 0x2ef
   14c70:	f7fc fbfc 	bl	1146c <__assert_func>
   14c74:	4b06      	ldr	r3, [pc, #24]	; (14c90 <_dtoa_r+0xce8>)
   14c76:	9300      	str	r3, [sp, #0]
   14c78:	f7ff b9d2 	b.w	14020 <_dtoa_r+0x78>
   14c7c:	9b02      	ldr	r3, [sp, #8]
   14c7e:	9308      	str	r3, [sp, #32]
   14c80:	e4f7      	b.n	14672 <_dtoa_r+0x6ca>
   14c82:	bf00      	nop
   14c84:	20000b58 	.word	0x20000b58
   14c88:	200026d4 	.word	0x200026d4
   14c8c:	20002880 	.word	0x20002880
   14c90:	20002870 	.word	0x20002870

00014c94 <_close_r>:
   14c94:	b538      	push	{r3, r4, r5, lr}
   14c96:	4d07      	ldr	r5, [pc, #28]	; (14cb4 <_close_r+0x20>)
   14c98:	2200      	movs	r2, #0
   14c9a:	4604      	mov	r4, r0
   14c9c:	4608      	mov	r0, r1
   14c9e:	602a      	str	r2, [r5, #0]
   14ca0:	f7f9 f948 	bl	df34 <_close>
   14ca4:	1c43      	adds	r3, r0, #1
   14ca6:	d000      	beq.n	14caa <_close_r+0x16>
   14ca8:	bd38      	pop	{r3, r4, r5, pc}
   14caa:	682b      	ldr	r3, [r5, #0]
   14cac:	2b00      	cmp	r3, #0
   14cae:	d0fb      	beq.n	14ca8 <_close_r+0x14>
   14cb0:	6023      	str	r3, [r4, #0]
   14cb2:	bd38      	pop	{r3, r4, r5, pc}
   14cb4:	20005098 	.word	0x20005098

00014cb8 <__sflush_r>:
   14cb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   14cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14cc0:	460c      	mov	r4, r1
   14cc2:	0711      	lsls	r1, r2, #28
   14cc4:	4680      	mov	r8, r0
   14cc6:	d447      	bmi.n	14d58 <__sflush_r+0xa0>
   14cc8:	6863      	ldr	r3, [r4, #4]
   14cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   14cce:	2b00      	cmp	r3, #0
   14cd0:	81a2      	strh	r2, [r4, #12]
   14cd2:	dd5e      	ble.n	14d92 <__sflush_r+0xda>
   14cd4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14cd6:	2d00      	cmp	r5, #0
   14cd8:	d058      	beq.n	14d8c <__sflush_r+0xd4>
   14cda:	2300      	movs	r3, #0
   14cdc:	f8d8 6000 	ldr.w	r6, [r8]
   14ce0:	f8c8 3000 	str.w	r3, [r8]
   14ce4:	b293      	uxth	r3, r2
   14ce6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   14cea:	d156      	bne.n	14d9a <__sflush_r+0xe2>
   14cec:	2301      	movs	r3, #1
   14cee:	69e1      	ldr	r1, [r4, #28]
   14cf0:	4640      	mov	r0, r8
   14cf2:	47a8      	blx	r5
   14cf4:	1c43      	adds	r3, r0, #1
   14cf6:	d067      	beq.n	14dc8 <__sflush_r+0x110>
   14cf8:	89a3      	ldrh	r3, [r4, #12]
   14cfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14cfc:	075f      	lsls	r7, r3, #29
   14cfe:	d505      	bpl.n	14d0c <__sflush_r+0x54>
   14d00:	6863      	ldr	r3, [r4, #4]
   14d02:	1ac0      	subs	r0, r0, r3
   14d04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14d06:	b10b      	cbz	r3, 14d0c <__sflush_r+0x54>
   14d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14d0a:	1ac0      	subs	r0, r0, r3
   14d0c:	69e1      	ldr	r1, [r4, #28]
   14d0e:	4602      	mov	r2, r0
   14d10:	2300      	movs	r3, #0
   14d12:	4640      	mov	r0, r8
   14d14:	47a8      	blx	r5
   14d16:	1c41      	adds	r1, r0, #1
   14d18:	d141      	bne.n	14d9e <__sflush_r+0xe6>
   14d1a:	f8d8 3000 	ldr.w	r3, [r8]
   14d1e:	2b00      	cmp	r3, #0
   14d20:	d03d      	beq.n	14d9e <__sflush_r+0xe6>
   14d22:	2b1d      	cmp	r3, #29
   14d24:	d001      	beq.n	14d2a <__sflush_r+0x72>
   14d26:	2b16      	cmp	r3, #22
   14d28:	d156      	bne.n	14dd8 <__sflush_r+0x120>
   14d2a:	89a3      	ldrh	r3, [r4, #12]
   14d2c:	6922      	ldr	r2, [r4, #16]
   14d2e:	6022      	str	r2, [r4, #0]
   14d30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14d34:	2100      	movs	r1, #0
   14d36:	6061      	str	r1, [r4, #4]
   14d38:	81a3      	strh	r3, [r4, #12]
   14d3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14d3c:	f8c8 6000 	str.w	r6, [r8]
   14d40:	b321      	cbz	r1, 14d8c <__sflush_r+0xd4>
   14d42:	f104 0340 	add.w	r3, r4, #64	; 0x40
   14d46:	4299      	cmp	r1, r3
   14d48:	d002      	beq.n	14d50 <__sflush_r+0x98>
   14d4a:	4640      	mov	r0, r8
   14d4c:	f7fd fc82 	bl	12654 <_free_r>
   14d50:	2000      	movs	r0, #0
   14d52:	6320      	str	r0, [r4, #48]	; 0x30
   14d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d58:	6926      	ldr	r6, [r4, #16]
   14d5a:	b1be      	cbz	r6, 14d8c <__sflush_r+0xd4>
   14d5c:	b293      	uxth	r3, r2
   14d5e:	6825      	ldr	r5, [r4, #0]
   14d60:	6026      	str	r6, [r4, #0]
   14d62:	079a      	lsls	r2, r3, #30
   14d64:	bf0c      	ite	eq
   14d66:	6963      	ldreq	r3, [r4, #20]
   14d68:	2300      	movne	r3, #0
   14d6a:	1bad      	subs	r5, r5, r6
   14d6c:	60a3      	str	r3, [r4, #8]
   14d6e:	e00b      	b.n	14d88 <__sflush_r+0xd0>
   14d70:	462b      	mov	r3, r5
   14d72:	4632      	mov	r2, r6
   14d74:	69e1      	ldr	r1, [r4, #28]
   14d76:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14d78:	4640      	mov	r0, r8
   14d7a:	47b8      	blx	r7
   14d7c:	f1b0 0c00 	subs.w	ip, r0, #0
   14d80:	eba5 050c 	sub.w	r5, r5, ip
   14d84:	4466      	add	r6, ip
   14d86:	dd17      	ble.n	14db8 <__sflush_r+0x100>
   14d88:	2d00      	cmp	r5, #0
   14d8a:	dcf1      	bgt.n	14d70 <__sflush_r+0xb8>
   14d8c:	2000      	movs	r0, #0
   14d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14d94:	2b00      	cmp	r3, #0
   14d96:	dc9d      	bgt.n	14cd4 <__sflush_r+0x1c>
   14d98:	e7f8      	b.n	14d8c <__sflush_r+0xd4>
   14d9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14d9c:	e7ae      	b.n	14cfc <__sflush_r+0x44>
   14d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14da2:	6922      	ldr	r2, [r4, #16]
   14da4:	6022      	str	r2, [r4, #0]
   14da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14daa:	81a3      	strh	r3, [r4, #12]
   14dac:	2200      	movs	r2, #0
   14dae:	04db      	lsls	r3, r3, #19
   14db0:	6062      	str	r2, [r4, #4]
   14db2:	d5c2      	bpl.n	14d3a <__sflush_r+0x82>
   14db4:	6520      	str	r0, [r4, #80]	; 0x50
   14db6:	e7c0      	b.n	14d3a <__sflush_r+0x82>
   14db8:	89a3      	ldrh	r3, [r4, #12]
   14dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14dc2:	81a3      	strh	r3, [r4, #12]
   14dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14dc8:	f8d8 3000 	ldr.w	r3, [r8]
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d093      	beq.n	14cf8 <__sflush_r+0x40>
   14dd0:	2b1d      	cmp	r3, #29
   14dd2:	d006      	beq.n	14de2 <__sflush_r+0x12a>
   14dd4:	2b16      	cmp	r3, #22
   14dd6:	d004      	beq.n	14de2 <__sflush_r+0x12a>
   14dd8:	89a3      	ldrh	r3, [r4, #12]
   14dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14dde:	81a3      	strh	r3, [r4, #12]
   14de0:	e7d5      	b.n	14d8e <__sflush_r+0xd6>
   14de2:	f8c8 6000 	str.w	r6, [r8]
   14de6:	e7d1      	b.n	14d8c <__sflush_r+0xd4>

00014de8 <_fflush_r>:
   14de8:	b538      	push	{r3, r4, r5, lr}
   14dea:	460c      	mov	r4, r1
   14dec:	4605      	mov	r5, r0
   14dee:	b108      	cbz	r0, 14df4 <_fflush_r+0xc>
   14df0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14df2:	b303      	cbz	r3, 14e36 <_fflush_r+0x4e>
   14df4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14df8:	b188      	cbz	r0, 14e1e <_fflush_r+0x36>
   14dfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14dfc:	07db      	lsls	r3, r3, #31
   14dfe:	d401      	bmi.n	14e04 <_fflush_r+0x1c>
   14e00:	0581      	lsls	r1, r0, #22
   14e02:	d50f      	bpl.n	14e24 <_fflush_r+0x3c>
   14e04:	4628      	mov	r0, r5
   14e06:	4621      	mov	r1, r4
   14e08:	f7ff ff56 	bl	14cb8 <__sflush_r>
   14e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14e0e:	07da      	lsls	r2, r3, #31
   14e10:	4605      	mov	r5, r0
   14e12:	d402      	bmi.n	14e1a <_fflush_r+0x32>
   14e14:	89a3      	ldrh	r3, [r4, #12]
   14e16:	059b      	lsls	r3, r3, #22
   14e18:	d508      	bpl.n	14e2c <_fflush_r+0x44>
   14e1a:	4628      	mov	r0, r5
   14e1c:	bd38      	pop	{r3, r4, r5, pc}
   14e1e:	4605      	mov	r5, r0
   14e20:	4628      	mov	r0, r5
   14e22:	bd38      	pop	{r3, r4, r5, pc}
   14e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14e26:	f7fc fbc7 	bl	115b8 <__retarget_lock_acquire_recursive>
   14e2a:	e7eb      	b.n	14e04 <_fflush_r+0x1c>
   14e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14e2e:	f7fc fbc5 	bl	115bc <__retarget_lock_release_recursive>
   14e32:	4628      	mov	r0, r5
   14e34:	bd38      	pop	{r3, r4, r5, pc}
   14e36:	f7fd f8cd 	bl	11fd4 <__sinit>
   14e3a:	e7db      	b.n	14df4 <_fflush_r+0xc>

00014e3c <_fstat_r>:
   14e3c:	b570      	push	{r4, r5, r6, lr}
   14e3e:	460c      	mov	r4, r1
   14e40:	4d08      	ldr	r5, [pc, #32]	; (14e64 <_fstat_r+0x28>)
   14e42:	4603      	mov	r3, r0
   14e44:	2600      	movs	r6, #0
   14e46:	4620      	mov	r0, r4
   14e48:	4611      	mov	r1, r2
   14e4a:	461c      	mov	r4, r3
   14e4c:	602e      	str	r6, [r5, #0]
   14e4e:	f7f9 f874 	bl	df3a <_fstat>
   14e52:	1c43      	adds	r3, r0, #1
   14e54:	d000      	beq.n	14e58 <_fstat_r+0x1c>
   14e56:	bd70      	pop	{r4, r5, r6, pc}
   14e58:	682b      	ldr	r3, [r5, #0]
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d0fb      	beq.n	14e56 <_fstat_r+0x1a>
   14e5e:	6023      	str	r3, [r4, #0]
   14e60:	bd70      	pop	{r4, r5, r6, pc}
   14e62:	bf00      	nop
   14e64:	20005098 	.word	0x20005098

00014e68 <_isatty_r>:
   14e68:	b538      	push	{r3, r4, r5, lr}
   14e6a:	4d07      	ldr	r5, [pc, #28]	; (14e88 <_isatty_r+0x20>)
   14e6c:	2200      	movs	r2, #0
   14e6e:	4604      	mov	r4, r0
   14e70:	4608      	mov	r0, r1
   14e72:	602a      	str	r2, [r5, #0]
   14e74:	f7f9 f866 	bl	df44 <_isatty>
   14e78:	1c43      	adds	r3, r0, #1
   14e7a:	d000      	beq.n	14e7e <_isatty_r+0x16>
   14e7c:	bd38      	pop	{r3, r4, r5, pc}
   14e7e:	682b      	ldr	r3, [r5, #0]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d0fb      	beq.n	14e7c <_isatty_r+0x14>
   14e84:	6023      	str	r3, [r4, #0]
   14e86:	bd38      	pop	{r3, r4, r5, pc}
   14e88:	20005098 	.word	0x20005098

00014e8c <_lseek_r>:
   14e8c:	b538      	push	{r3, r4, r5, lr}
   14e8e:	460c      	mov	r4, r1
   14e90:	4d08      	ldr	r5, [pc, #32]	; (14eb4 <_lseek_r+0x28>)
   14e92:	4684      	mov	ip, r0
   14e94:	4611      	mov	r1, r2
   14e96:	4620      	mov	r0, r4
   14e98:	461a      	mov	r2, r3
   14e9a:	2300      	movs	r3, #0
   14e9c:	602b      	str	r3, [r5, #0]
   14e9e:	4664      	mov	r4, ip
   14ea0:	f7f9 f852 	bl	df48 <_lseek>
   14ea4:	1c43      	adds	r3, r0, #1
   14ea6:	d000      	beq.n	14eaa <_lseek_r+0x1e>
   14ea8:	bd38      	pop	{r3, r4, r5, pc}
   14eaa:	682b      	ldr	r3, [r5, #0]
   14eac:	2b00      	cmp	r3, #0
   14eae:	d0fb      	beq.n	14ea8 <_lseek_r+0x1c>
   14eb0:	6023      	str	r3, [r4, #0]
   14eb2:	bd38      	pop	{r3, r4, r5, pc}
   14eb4:	20005098 	.word	0x20005098

00014eb8 <_read_r>:
   14eb8:	b538      	push	{r3, r4, r5, lr}
   14eba:	460c      	mov	r4, r1
   14ebc:	4d08      	ldr	r5, [pc, #32]	; (14ee0 <_read_r+0x28>)
   14ebe:	4684      	mov	ip, r0
   14ec0:	4611      	mov	r1, r2
   14ec2:	4620      	mov	r0, r4
   14ec4:	461a      	mov	r2, r3
   14ec6:	2300      	movs	r3, #0
   14ec8:	602b      	str	r3, [r5, #0]
   14eca:	4664      	mov	r4, ip
   14ecc:	f7f9 f830 	bl	df30 <_read>
   14ed0:	1c43      	adds	r3, r0, #1
   14ed2:	d000      	beq.n	14ed6 <_read_r+0x1e>
   14ed4:	bd38      	pop	{r3, r4, r5, pc}
   14ed6:	682b      	ldr	r3, [r5, #0]
   14ed8:	2b00      	cmp	r3, #0
   14eda:	d0fb      	beq.n	14ed4 <_read_r+0x1c>
   14edc:	6023      	str	r3, [r4, #0]
   14ede:	bd38      	pop	{r3, r4, r5, pc}
   14ee0:	20005098 	.word	0x20005098

00014ee4 <__fputwc>:
   14ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14ee8:	b082      	sub	sp, #8
   14eea:	4682      	mov	sl, r0
   14eec:	4688      	mov	r8, r1
   14eee:	4614      	mov	r4, r2
   14ef0:	f7fc fb66 	bl	115c0 <__locale_mb_cur_max>
   14ef4:	2801      	cmp	r0, #1
   14ef6:	d103      	bne.n	14f00 <__fputwc+0x1c>
   14ef8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   14efc:	2bfe      	cmp	r3, #254	; 0xfe
   14efe:	d936      	bls.n	14f6e <__fputwc+0x8a>
   14f00:	f10d 0904 	add.w	r9, sp, #4
   14f04:	4642      	mov	r2, r8
   14f06:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   14f0a:	4649      	mov	r1, r9
   14f0c:	4650      	mov	r0, sl
   14f0e:	f7fe fe49 	bl	13ba4 <_wcrtomb_r>
   14f12:	1c42      	adds	r2, r0, #1
   14f14:	4606      	mov	r6, r0
   14f16:	d032      	beq.n	14f7e <__fputwc+0x9a>
   14f18:	b320      	cbz	r0, 14f64 <__fputwc+0x80>
   14f1a:	f89d c004 	ldrb.w	ip, [sp, #4]
   14f1e:	2500      	movs	r5, #0
   14f20:	e009      	b.n	14f36 <__fputwc+0x52>
   14f22:	6823      	ldr	r3, [r4, #0]
   14f24:	1c5a      	adds	r2, r3, #1
   14f26:	6022      	str	r2, [r4, #0]
   14f28:	f883 c000 	strb.w	ip, [r3]
   14f2c:	3501      	adds	r5, #1
   14f2e:	42b5      	cmp	r5, r6
   14f30:	d218      	bcs.n	14f64 <__fputwc+0x80>
   14f32:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   14f36:	68a3      	ldr	r3, [r4, #8]
   14f38:	3b01      	subs	r3, #1
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	60a3      	str	r3, [r4, #8]
   14f3e:	daf0      	bge.n	14f22 <__fputwc+0x3e>
   14f40:	69a7      	ldr	r7, [r4, #24]
   14f42:	42bb      	cmp	r3, r7
   14f44:	4661      	mov	r1, ip
   14f46:	4622      	mov	r2, r4
   14f48:	4650      	mov	r0, sl
   14f4a:	db02      	blt.n	14f52 <__fputwc+0x6e>
   14f4c:	f1bc 0f0a 	cmp.w	ip, #10
   14f50:	d1e7      	bne.n	14f22 <__fputwc+0x3e>
   14f52:	f000 f9cb 	bl	152ec <__swbuf_r>
   14f56:	1c43      	adds	r3, r0, #1
   14f58:	d1e8      	bne.n	14f2c <__fputwc+0x48>
   14f5a:	4606      	mov	r6, r0
   14f5c:	4630      	mov	r0, r6
   14f5e:	b002      	add	sp, #8
   14f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f64:	4646      	mov	r6, r8
   14f66:	4630      	mov	r0, r6
   14f68:	b002      	add	sp, #8
   14f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f6e:	fa5f fc88 	uxtb.w	ip, r8
   14f72:	f88d c004 	strb.w	ip, [sp, #4]
   14f76:	4606      	mov	r6, r0
   14f78:	f10d 0904 	add.w	r9, sp, #4
   14f7c:	e7cf      	b.n	14f1e <__fputwc+0x3a>
   14f7e:	89a3      	ldrh	r3, [r4, #12]
   14f80:	4630      	mov	r0, r6
   14f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14f86:	81a3      	strh	r3, [r4, #12]
   14f88:	b002      	add	sp, #8
   14f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f8e:	bf00      	nop

00014f90 <_fputwc_r>:
   14f90:	b530      	push	{r4, r5, lr}
   14f92:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14f94:	f013 0f01 	tst.w	r3, #1
   14f98:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14f9c:	4614      	mov	r4, r2
   14f9e:	b083      	sub	sp, #12
   14fa0:	4605      	mov	r5, r0
   14fa2:	b29a      	uxth	r2, r3
   14fa4:	d101      	bne.n	14faa <_fputwc_r+0x1a>
   14fa6:	0598      	lsls	r0, r3, #22
   14fa8:	d51c      	bpl.n	14fe4 <_fputwc_r+0x54>
   14faa:	0490      	lsls	r0, r2, #18
   14fac:	d406      	bmi.n	14fbc <_fputwc_r+0x2c>
   14fae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14fb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   14fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14fb8:	81a3      	strh	r3, [r4, #12]
   14fba:	6662      	str	r2, [r4, #100]	; 0x64
   14fbc:	4622      	mov	r2, r4
   14fbe:	4628      	mov	r0, r5
   14fc0:	f7ff ff90 	bl	14ee4 <__fputwc>
   14fc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14fc6:	07da      	lsls	r2, r3, #31
   14fc8:	4605      	mov	r5, r0
   14fca:	d402      	bmi.n	14fd2 <_fputwc_r+0x42>
   14fcc:	89a3      	ldrh	r3, [r4, #12]
   14fce:	059b      	lsls	r3, r3, #22
   14fd0:	d502      	bpl.n	14fd8 <_fputwc_r+0x48>
   14fd2:	4628      	mov	r0, r5
   14fd4:	b003      	add	sp, #12
   14fd6:	bd30      	pop	{r4, r5, pc}
   14fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14fda:	f7fc faef 	bl	115bc <__retarget_lock_release_recursive>
   14fde:	4628      	mov	r0, r5
   14fe0:	b003      	add	sp, #12
   14fe2:	bd30      	pop	{r4, r5, pc}
   14fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14fe6:	9101      	str	r1, [sp, #4]
   14fe8:	f7fc fae6 	bl	115b8 <__retarget_lock_acquire_recursive>
   14fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ff0:	9901      	ldr	r1, [sp, #4]
   14ff2:	b29a      	uxth	r2, r3
   14ff4:	e7d9      	b.n	14faa <_fputwc_r+0x1a>
   14ff6:	bf00      	nop

00014ff8 <__sfvwrite_r>:
   14ff8:	6893      	ldr	r3, [r2, #8]
   14ffa:	2b00      	cmp	r3, #0
   14ffc:	f000 8085 	beq.w	1510a <__sfvwrite_r+0x112>
   15000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15004:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   15008:	460c      	mov	r4, r1
   1500a:	0719      	lsls	r1, r3, #28
   1500c:	4680      	mov	r8, r0
   1500e:	b083      	sub	sp, #12
   15010:	4617      	mov	r7, r2
   15012:	b298      	uxth	r0, r3
   15014:	d525      	bpl.n	15062 <__sfvwrite_r+0x6a>
   15016:	6923      	ldr	r3, [r4, #16]
   15018:	b31b      	cbz	r3, 15062 <__sfvwrite_r+0x6a>
   1501a:	f010 0302 	ands.w	r3, r0, #2
   1501e:	683d      	ldr	r5, [r7, #0]
   15020:	d02d      	beq.n	1507e <__sfvwrite_r+0x86>
   15022:	f04f 0a00 	mov.w	sl, #0
   15026:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 152e8 <__sfvwrite_r+0x2f0>
   1502a:	4656      	mov	r6, sl
   1502c:	46b9      	mov	r9, r7
   1502e:	455e      	cmp	r6, fp
   15030:	4633      	mov	r3, r6
   15032:	4652      	mov	r2, sl
   15034:	bf28      	it	cs
   15036:	465b      	movcs	r3, fp
   15038:	4640      	mov	r0, r8
   1503a:	2e00      	cmp	r6, #0
   1503c:	d052      	beq.n	150e4 <__sfvwrite_r+0xec>
   1503e:	69e1      	ldr	r1, [r4, #28]
   15040:	6a67      	ldr	r7, [r4, #36]	; 0x24
   15042:	47b8      	blx	r7
   15044:	2800      	cmp	r0, #0
   15046:	dd56      	ble.n	150f6 <__sfvwrite_r+0xfe>
   15048:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1504c:	1a1b      	subs	r3, r3, r0
   1504e:	4482      	add	sl, r0
   15050:	1a36      	subs	r6, r6, r0
   15052:	f8c9 3008 	str.w	r3, [r9, #8]
   15056:	2b00      	cmp	r3, #0
   15058:	d1e9      	bne.n	1502e <__sfvwrite_r+0x36>
   1505a:	2000      	movs	r0, #0
   1505c:	b003      	add	sp, #12
   1505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15062:	4621      	mov	r1, r4
   15064:	4640      	mov	r0, r8
   15066:	f7fe fe2b 	bl	13cc0 <__swsetup_r>
   1506a:	2800      	cmp	r0, #0
   1506c:	f040 8138 	bne.w	152e0 <__sfvwrite_r+0x2e8>
   15070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15074:	683d      	ldr	r5, [r7, #0]
   15076:	b298      	uxth	r0, r3
   15078:	f010 0302 	ands.w	r3, r0, #2
   1507c:	d1d1      	bne.n	15022 <__sfvwrite_r+0x2a>
   1507e:	f010 0901 	ands.w	r9, r0, #1
   15082:	d144      	bne.n	1510e <__sfvwrite_r+0x116>
   15084:	464e      	mov	r6, r9
   15086:	9700      	str	r7, [sp, #0]
   15088:	b346      	cbz	r6, 150dc <__sfvwrite_r+0xe4>
   1508a:	0582      	lsls	r2, r0, #22
   1508c:	f8d4 b008 	ldr.w	fp, [r4, #8]
   15090:	f140 8085 	bpl.w	1519e <__sfvwrite_r+0x1a6>
   15094:	45b3      	cmp	fp, r6
   15096:	465a      	mov	r2, fp
   15098:	f200 80b4 	bhi.w	15204 <__sfvwrite_r+0x20c>
   1509c:	f410 6f90 	tst.w	r0, #1152	; 0x480
   150a0:	f040 80c1 	bne.w	15226 <__sfvwrite_r+0x22e>
   150a4:	6820      	ldr	r0, [r4, #0]
   150a6:	9201      	str	r2, [sp, #4]
   150a8:	4649      	mov	r1, r9
   150aa:	f7fc f963 	bl	11374 <memmove>
   150ae:	68a3      	ldr	r3, [r4, #8]
   150b0:	9a01      	ldr	r2, [sp, #4]
   150b2:	eba3 010b 	sub.w	r1, r3, fp
   150b6:	6823      	ldr	r3, [r4, #0]
   150b8:	60a1      	str	r1, [r4, #8]
   150ba:	4413      	add	r3, r2
   150bc:	46b2      	mov	sl, r6
   150be:	6023      	str	r3, [r4, #0]
   150c0:	2600      	movs	r6, #0
   150c2:	9a00      	ldr	r2, [sp, #0]
   150c4:	6893      	ldr	r3, [r2, #8]
   150c6:	eba3 030a 	sub.w	r3, r3, sl
   150ca:	44d1      	add	r9, sl
   150cc:	6093      	str	r3, [r2, #8]
   150ce:	2b00      	cmp	r3, #0
   150d0:	d0c3      	beq.n	1505a <__sfvwrite_r+0x62>
   150d2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   150d6:	b280      	uxth	r0, r0
   150d8:	2e00      	cmp	r6, #0
   150da:	d1d6      	bne.n	1508a <__sfvwrite_r+0x92>
   150dc:	e9d5 9600 	ldrd	r9, r6, [r5]
   150e0:	3508      	adds	r5, #8
   150e2:	e7d1      	b.n	15088 <__sfvwrite_r+0x90>
   150e4:	e9d5 a600 	ldrd	sl, r6, [r5]
   150e8:	3508      	adds	r5, #8
   150ea:	e7a0      	b.n	1502e <__sfvwrite_r+0x36>
   150ec:	4621      	mov	r1, r4
   150ee:	4640      	mov	r0, r8
   150f0:	f7ff fe7a 	bl	14de8 <_fflush_r>
   150f4:	b388      	cbz	r0, 1515a <__sfvwrite_r+0x162>
   150f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   150fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   150fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15102:	81a3      	strh	r3, [r4, #12]
   15104:	b003      	add	sp, #12
   15106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1510a:	2000      	movs	r0, #0
   1510c:	4770      	bx	lr
   1510e:	461e      	mov	r6, r3
   15110:	46ba      	mov	sl, r7
   15112:	4699      	mov	r9, r3
   15114:	4618      	mov	r0, r3
   15116:	9500      	str	r5, [sp, #0]
   15118:	461f      	mov	r7, r3
   1511a:	b366      	cbz	r6, 15176 <__sfvwrite_r+0x17e>
   1511c:	2800      	cmp	r0, #0
   1511e:	d032      	beq.n	15186 <__sfvwrite_r+0x18e>
   15120:	464a      	mov	r2, r9
   15122:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   15126:	6820      	ldr	r0, [r4, #0]
   15128:	68a5      	ldr	r5, [r4, #8]
   1512a:	42b2      	cmp	r2, r6
   1512c:	bf28      	it	cs
   1512e:	4632      	movcs	r2, r6
   15130:	4288      	cmp	r0, r1
   15132:	d904      	bls.n	1513e <__sfvwrite_r+0x146>
   15134:	eb05 0b03 	add.w	fp, r5, r3
   15138:	455a      	cmp	r2, fp
   1513a:	f300 80a7 	bgt.w	1528c <__sfvwrite_r+0x294>
   1513e:	4293      	cmp	r3, r2
   15140:	dc64      	bgt.n	1520c <__sfvwrite_r+0x214>
   15142:	69e1      	ldr	r1, [r4, #28]
   15144:	6a65      	ldr	r5, [r4, #36]	; 0x24
   15146:	463a      	mov	r2, r7
   15148:	4640      	mov	r0, r8
   1514a:	47a8      	blx	r5
   1514c:	f1b0 0b00 	subs.w	fp, r0, #0
   15150:	ddd1      	ble.n	150f6 <__sfvwrite_r+0xfe>
   15152:	ebb9 090b 	subs.w	r9, r9, fp
   15156:	d0c9      	beq.n	150ec <__sfvwrite_r+0xf4>
   15158:	2001      	movs	r0, #1
   1515a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1515e:	eba3 030b 	sub.w	r3, r3, fp
   15162:	445f      	add	r7, fp
   15164:	eba6 060b 	sub.w	r6, r6, fp
   15168:	f8ca 3008 	str.w	r3, [sl, #8]
   1516c:	2b00      	cmp	r3, #0
   1516e:	f43f af74 	beq.w	1505a <__sfvwrite_r+0x62>
   15172:	2e00      	cmp	r6, #0
   15174:	d1d2      	bne.n	1511c <__sfvwrite_r+0x124>
   15176:	9a00      	ldr	r2, [sp, #0]
   15178:	6856      	ldr	r6, [r2, #4]
   1517a:	4613      	mov	r3, r2
   1517c:	3208      	adds	r2, #8
   1517e:	9200      	str	r2, [sp, #0]
   15180:	2e00      	cmp	r6, #0
   15182:	d0f8      	beq.n	15176 <__sfvwrite_r+0x17e>
   15184:	681f      	ldr	r7, [r3, #0]
   15186:	4632      	mov	r2, r6
   15188:	210a      	movs	r1, #10
   1518a:	4638      	mov	r0, r7
   1518c:	f7fc ff50 	bl	12030 <memchr>
   15190:	2800      	cmp	r0, #0
   15192:	f000 809c 	beq.w	152ce <__sfvwrite_r+0x2d6>
   15196:	3001      	adds	r0, #1
   15198:	eba0 0907 	sub.w	r9, r0, r7
   1519c:	e7c0      	b.n	15120 <__sfvwrite_r+0x128>
   1519e:	6820      	ldr	r0, [r4, #0]
   151a0:	6923      	ldr	r3, [r4, #16]
   151a2:	4298      	cmp	r0, r3
   151a4:	d816      	bhi.n	151d4 <__sfvwrite_r+0x1dc>
   151a6:	6962      	ldr	r2, [r4, #20]
   151a8:	42b2      	cmp	r2, r6
   151aa:	d813      	bhi.n	151d4 <__sfvwrite_r+0x1dc>
   151ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   151b0:	42b3      	cmp	r3, r6
   151b2:	bf28      	it	cs
   151b4:	4633      	movcs	r3, r6
   151b6:	69e1      	ldr	r1, [r4, #28]
   151b8:	fb93 f3f2 	sdiv	r3, r3, r2
   151bc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   151be:	fb02 f303 	mul.w	r3, r2, r3
   151c2:	4640      	mov	r0, r8
   151c4:	464a      	mov	r2, r9
   151c6:	47b8      	blx	r7
   151c8:	f1b0 0a00 	subs.w	sl, r0, #0
   151cc:	dd93      	ble.n	150f6 <__sfvwrite_r+0xfe>
   151ce:	eba6 060a 	sub.w	r6, r6, sl
   151d2:	e776      	b.n	150c2 <__sfvwrite_r+0xca>
   151d4:	45b3      	cmp	fp, r6
   151d6:	46da      	mov	sl, fp
   151d8:	bf28      	it	cs
   151da:	46b2      	movcs	sl, r6
   151dc:	4652      	mov	r2, sl
   151de:	4649      	mov	r1, r9
   151e0:	f7fc f8c8 	bl	11374 <memmove>
   151e4:	68a3      	ldr	r3, [r4, #8]
   151e6:	6822      	ldr	r2, [r4, #0]
   151e8:	eba3 030a 	sub.w	r3, r3, sl
   151ec:	4452      	add	r2, sl
   151ee:	60a3      	str	r3, [r4, #8]
   151f0:	6022      	str	r2, [r4, #0]
   151f2:	2b00      	cmp	r3, #0
   151f4:	d1eb      	bne.n	151ce <__sfvwrite_r+0x1d6>
   151f6:	4621      	mov	r1, r4
   151f8:	4640      	mov	r0, r8
   151fa:	f7ff fdf5 	bl	14de8 <_fflush_r>
   151fe:	2800      	cmp	r0, #0
   15200:	d0e5      	beq.n	151ce <__sfvwrite_r+0x1d6>
   15202:	e778      	b.n	150f6 <__sfvwrite_r+0xfe>
   15204:	6820      	ldr	r0, [r4, #0]
   15206:	46b3      	mov	fp, r6
   15208:	4632      	mov	r2, r6
   1520a:	e74c      	b.n	150a6 <__sfvwrite_r+0xae>
   1520c:	4639      	mov	r1, r7
   1520e:	9201      	str	r2, [sp, #4]
   15210:	f7fc f8b0 	bl	11374 <memmove>
   15214:	9a01      	ldr	r2, [sp, #4]
   15216:	68a3      	ldr	r3, [r4, #8]
   15218:	1a9b      	subs	r3, r3, r2
   1521a:	60a3      	str	r3, [r4, #8]
   1521c:	6823      	ldr	r3, [r4, #0]
   1521e:	4413      	add	r3, r2
   15220:	6023      	str	r3, [r4, #0]
   15222:	4693      	mov	fp, r2
   15224:	e795      	b.n	15152 <__sfvwrite_r+0x15a>
   15226:	6823      	ldr	r3, [r4, #0]
   15228:	6921      	ldr	r1, [r4, #16]
   1522a:	eba3 0b01 	sub.w	fp, r3, r1
   1522e:	6963      	ldr	r3, [r4, #20]
   15230:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   15234:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   15238:	f10b 0301 	add.w	r3, fp, #1
   1523c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   15240:	4433      	add	r3, r6
   15242:	4553      	cmp	r3, sl
   15244:	4652      	mov	r2, sl
   15246:	bf84      	itt	hi
   15248:	469a      	movhi	sl, r3
   1524a:	4652      	movhi	r2, sl
   1524c:	0543      	lsls	r3, r0, #21
   1524e:	d52c      	bpl.n	152aa <__sfvwrite_r+0x2b2>
   15250:	4611      	mov	r1, r2
   15252:	4640      	mov	r0, r8
   15254:	f7fb fdae 	bl	10db4 <_malloc_r>
   15258:	2800      	cmp	r0, #0
   1525a:	d03b      	beq.n	152d4 <__sfvwrite_r+0x2dc>
   1525c:	465a      	mov	r2, fp
   1525e:	6921      	ldr	r1, [r4, #16]
   15260:	9001      	str	r0, [sp, #4]
   15262:	f7f8 f85b 	bl	d31c <memcpy>
   15266:	89a2      	ldrh	r2, [r4, #12]
   15268:	9b01      	ldr	r3, [sp, #4]
   1526a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1526e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   15272:	81a2      	strh	r2, [r4, #12]
   15274:	eb03 000b 	add.w	r0, r3, fp
   15278:	6123      	str	r3, [r4, #16]
   1527a:	ebaa 030b 	sub.w	r3, sl, fp
   1527e:	f8c4 a014 	str.w	sl, [r4, #20]
   15282:	60a3      	str	r3, [r4, #8]
   15284:	6020      	str	r0, [r4, #0]
   15286:	46b3      	mov	fp, r6
   15288:	4632      	mov	r2, r6
   1528a:	e70c      	b.n	150a6 <__sfvwrite_r+0xae>
   1528c:	4639      	mov	r1, r7
   1528e:	465a      	mov	r2, fp
   15290:	f7fc f870 	bl	11374 <memmove>
   15294:	6823      	ldr	r3, [r4, #0]
   15296:	445b      	add	r3, fp
   15298:	6023      	str	r3, [r4, #0]
   1529a:	4621      	mov	r1, r4
   1529c:	4640      	mov	r0, r8
   1529e:	f7ff fda3 	bl	14de8 <_fflush_r>
   152a2:	2800      	cmp	r0, #0
   152a4:	f43f af55 	beq.w	15152 <__sfvwrite_r+0x15a>
   152a8:	e725      	b.n	150f6 <__sfvwrite_r+0xfe>
   152aa:	4640      	mov	r0, r8
   152ac:	f7fc ff96 	bl	121dc <_realloc_r>
   152b0:	4603      	mov	r3, r0
   152b2:	2800      	cmp	r0, #0
   152b4:	d1de      	bne.n	15274 <__sfvwrite_r+0x27c>
   152b6:	6921      	ldr	r1, [r4, #16]
   152b8:	4640      	mov	r0, r8
   152ba:	f7fd f9cb 	bl	12654 <_free_r>
   152be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   152c2:	220c      	movs	r2, #12
   152c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   152c8:	f8c8 2000 	str.w	r2, [r8]
   152cc:	e715      	b.n	150fa <__sfvwrite_r+0x102>
   152ce:	1c72      	adds	r2, r6, #1
   152d0:	4691      	mov	r9, r2
   152d2:	e726      	b.n	15122 <__sfvwrite_r+0x12a>
   152d4:	220c      	movs	r2, #12
   152d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   152da:	f8c8 2000 	str.w	r2, [r8]
   152de:	e70c      	b.n	150fa <__sfvwrite_r+0x102>
   152e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   152e4:	e6ba      	b.n	1505c <__sfvwrite_r+0x64>
   152e6:	bf00      	nop
   152e8:	7ffffc00 	.word	0x7ffffc00

000152ec <__swbuf_r>:
   152ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152ee:	460d      	mov	r5, r1
   152f0:	4614      	mov	r4, r2
   152f2:	4606      	mov	r6, r0
   152f4:	b110      	cbz	r0, 152fc <__swbuf_r+0x10>
   152f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   152f8:	2b00      	cmp	r3, #0
   152fa:	d04c      	beq.n	15396 <__swbuf_r+0xaa>
   152fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15300:	69a3      	ldr	r3, [r4, #24]
   15302:	60a3      	str	r3, [r4, #8]
   15304:	0717      	lsls	r7, r2, #28
   15306:	b290      	uxth	r0, r2
   15308:	d51b      	bpl.n	15342 <__swbuf_r+0x56>
   1530a:	6923      	ldr	r3, [r4, #16]
   1530c:	b1cb      	cbz	r3, 15342 <__swbuf_r+0x56>
   1530e:	b2ed      	uxtb	r5, r5
   15310:	0481      	lsls	r1, r0, #18
   15312:	462f      	mov	r7, r5
   15314:	d522      	bpl.n	1535c <__swbuf_r+0x70>
   15316:	6822      	ldr	r2, [r4, #0]
   15318:	6961      	ldr	r1, [r4, #20]
   1531a:	1ad3      	subs	r3, r2, r3
   1531c:	4299      	cmp	r1, r3
   1531e:	dd29      	ble.n	15374 <__swbuf_r+0x88>
   15320:	3301      	adds	r3, #1
   15322:	68a1      	ldr	r1, [r4, #8]
   15324:	3901      	subs	r1, #1
   15326:	60a1      	str	r1, [r4, #8]
   15328:	1c51      	adds	r1, r2, #1
   1532a:	6021      	str	r1, [r4, #0]
   1532c:	7015      	strb	r5, [r2, #0]
   1532e:	6962      	ldr	r2, [r4, #20]
   15330:	429a      	cmp	r2, r3
   15332:	d027      	beq.n	15384 <__swbuf_r+0x98>
   15334:	89a3      	ldrh	r3, [r4, #12]
   15336:	07db      	lsls	r3, r3, #31
   15338:	d501      	bpl.n	1533e <__swbuf_r+0x52>
   1533a:	2d0a      	cmp	r5, #10
   1533c:	d022      	beq.n	15384 <__swbuf_r+0x98>
   1533e:	4638      	mov	r0, r7
   15340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15342:	4621      	mov	r1, r4
   15344:	4630      	mov	r0, r6
   15346:	f7fe fcbb 	bl	13cc0 <__swsetup_r>
   1534a:	bb08      	cbnz	r0, 15390 <__swbuf_r+0xa4>
   1534c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15350:	6923      	ldr	r3, [r4, #16]
   15352:	b290      	uxth	r0, r2
   15354:	b2ed      	uxtb	r5, r5
   15356:	0481      	lsls	r1, r0, #18
   15358:	462f      	mov	r7, r5
   1535a:	d4dc      	bmi.n	15316 <__swbuf_r+0x2a>
   1535c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   15360:	81a2      	strh	r2, [r4, #12]
   15362:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15364:	6961      	ldr	r1, [r4, #20]
   15366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1536a:	6662      	str	r2, [r4, #100]	; 0x64
   1536c:	6822      	ldr	r2, [r4, #0]
   1536e:	1ad3      	subs	r3, r2, r3
   15370:	4299      	cmp	r1, r3
   15372:	dcd5      	bgt.n	15320 <__swbuf_r+0x34>
   15374:	4621      	mov	r1, r4
   15376:	4630      	mov	r0, r6
   15378:	f7ff fd36 	bl	14de8 <_fflush_r>
   1537c:	b940      	cbnz	r0, 15390 <__swbuf_r+0xa4>
   1537e:	6822      	ldr	r2, [r4, #0]
   15380:	2301      	movs	r3, #1
   15382:	e7ce      	b.n	15322 <__swbuf_r+0x36>
   15384:	4621      	mov	r1, r4
   15386:	4630      	mov	r0, r6
   15388:	f7ff fd2e 	bl	14de8 <_fflush_r>
   1538c:	2800      	cmp	r0, #0
   1538e:	d0d6      	beq.n	1533e <__swbuf_r+0x52>
   15390:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15394:	e7d3      	b.n	1533e <__swbuf_r+0x52>
   15396:	f7fc fe1d 	bl	11fd4 <__sinit>
   1539a:	e7af      	b.n	152fc <__swbuf_r+0x10>

0001539c <_wcsnrtombs_l>:
   1539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a0:	b08b      	sub	sp, #44	; 0x2c
   153a2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   153a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
   153a8:	9103      	str	r1, [sp, #12]
   153aa:	4681      	mov	r9, r0
   153ac:	9205      	str	r2, [sp, #20]
   153ae:	461e      	mov	r6, r3
   153b0:	f1b8 0f00 	cmp.w	r8, #0
   153b4:	d05c      	beq.n	15470 <_wcsnrtombs_l+0xd4>
   153b6:	9b03      	ldr	r3, [sp, #12]
   153b8:	2b00      	cmp	r3, #0
   153ba:	d05e      	beq.n	1547a <_wcsnrtombs_l+0xde>
   153bc:	9b05      	ldr	r3, [sp, #20]
   153be:	681d      	ldr	r5, [r3, #0]
   153c0:	2f00      	cmp	r7, #0
   153c2:	d06a      	beq.n	1549a <_wcsnrtombs_l+0xfe>
   153c4:	1e74      	subs	r4, r6, #1
   153c6:	b34e      	cbz	r6, 1541c <_wcsnrtombs_l+0x80>
   153c8:	9b03      	ldr	r3, [sp, #12]
   153ca:	9304      	str	r3, [sp, #16]
   153cc:	3d04      	subs	r5, #4
   153ce:	2600      	movs	r6, #0
   153d0:	9501      	str	r5, [sp, #4]
   153d2:	e00b      	b.n	153ec <_wcsnrtombs_l+0x50>
   153d4:	9b03      	ldr	r3, [sp, #12]
   153d6:	bb2b      	cbnz	r3, 15424 <_wcsnrtombs_l+0x88>
   153d8:	9b01      	ldr	r3, [sp, #4]
   153da:	681a      	ldr	r2, [r3, #0]
   153dc:	2a00      	cmp	r2, #0
   153de:	d03a      	beq.n	15456 <_wcsnrtombs_l+0xba>
   153e0:	45bc      	cmp	ip, r7
   153e2:	d25c      	bcs.n	1549e <_wcsnrtombs_l+0x102>
   153e4:	3c01      	subs	r4, #1
   153e6:	1c63      	adds	r3, r4, #1
   153e8:	4666      	mov	r6, ip
   153ea:	d017      	beq.n	1541c <_wcsnrtombs_l+0x80>
   153ec:	f8d8 3000 	ldr.w	r3, [r8]
   153f0:	9302      	str	r3, [sp, #8]
   153f2:	9b01      	ldr	r3, [sp, #4]
   153f4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   153f8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   153fc:	9301      	str	r3, [sp, #4]
   153fe:	a907      	add	r1, sp, #28
   15400:	4643      	mov	r3, r8
   15402:	4648      	mov	r0, r9
   15404:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15408:	47a8      	blx	r5
   1540a:	1c42      	adds	r2, r0, #1
   1540c:	d03a      	beq.n	15484 <_wcsnrtombs_l+0xe8>
   1540e:	eb00 0c06 	add.w	ip, r0, r6
   15412:	45bc      	cmp	ip, r7
   15414:	d9de      	bls.n	153d4 <_wcsnrtombs_l+0x38>
   15416:	9b02      	ldr	r3, [sp, #8]
   15418:	e9c8 3b00 	strd	r3, fp, [r8]
   1541c:	4630      	mov	r0, r6
   1541e:	b00b      	add	sp, #44	; 0x2c
   15420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15424:	2800      	cmp	r0, #0
   15426:	dd0e      	ble.n	15446 <_wcsnrtombs_l+0xaa>
   15428:	9b04      	ldr	r3, [sp, #16]
   1542a:	9d01      	ldr	r5, [sp, #4]
   1542c:	4418      	add	r0, r3
   1542e:	1e5a      	subs	r2, r3, #1
   15430:	a907      	add	r1, sp, #28
   15432:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   15436:	f811 3b01 	ldrb.w	r3, [r1], #1
   1543a:	f802 3f01 	strb.w	r3, [r2, #1]!
   1543e:	4572      	cmp	r2, lr
   15440:	d1f9      	bne.n	15436 <_wcsnrtombs_l+0x9a>
   15442:	9501      	str	r5, [sp, #4]
   15444:	9004      	str	r0, [sp, #16]
   15446:	9b05      	ldr	r3, [sp, #20]
   15448:	681a      	ldr	r2, [r3, #0]
   1544a:	3204      	adds	r2, #4
   1544c:	601a      	str	r2, [r3, #0]
   1544e:	9b01      	ldr	r3, [sp, #4]
   15450:	681a      	ldr	r2, [r3, #0]
   15452:	2a00      	cmp	r2, #0
   15454:	d1c4      	bne.n	153e0 <_wcsnrtombs_l+0x44>
   15456:	9b03      	ldr	r3, [sp, #12]
   15458:	b10b      	cbz	r3, 1545e <_wcsnrtombs_l+0xc2>
   1545a:	9b05      	ldr	r3, [sp, #20]
   1545c:	601a      	str	r2, [r3, #0]
   1545e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   15462:	2200      	movs	r2, #0
   15464:	4630      	mov	r0, r6
   15466:	f8c8 2000 	str.w	r2, [r8]
   1546a:	b00b      	add	sp, #44	; 0x2c
   1546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15470:	9b03      	ldr	r3, [sp, #12]
   15472:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   15476:	2b00      	cmp	r3, #0
   15478:	d1a0      	bne.n	153bc <_wcsnrtombs_l+0x20>
   1547a:	9b05      	ldr	r3, [sp, #20]
   1547c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15480:	681d      	ldr	r5, [r3, #0]
   15482:	e79f      	b.n	153c4 <_wcsnrtombs_l+0x28>
   15484:	4606      	mov	r6, r0
   15486:	218a      	movs	r1, #138	; 0x8a
   15488:	2200      	movs	r2, #0
   1548a:	4630      	mov	r0, r6
   1548c:	f8c9 1000 	str.w	r1, [r9]
   15490:	f8c8 2000 	str.w	r2, [r8]
   15494:	b00b      	add	sp, #44	; 0x2c
   15496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1549a:	463e      	mov	r6, r7
   1549c:	e7be      	b.n	1541c <_wcsnrtombs_l+0x80>
   1549e:	4666      	mov	r6, ip
   154a0:	e7bc      	b.n	1541c <_wcsnrtombs_l+0x80>
   154a2:	bf00      	nop

000154a4 <_wcsnrtombs_r>:
   154a4:	b510      	push	{r4, lr}
   154a6:	b084      	sub	sp, #16
   154a8:	4c05      	ldr	r4, [pc, #20]	; (154c0 <_wcsnrtombs_r+0x1c>)
   154aa:	9806      	ldr	r0, [sp, #24]
   154ac:	9000      	str	r0, [sp, #0]
   154ae:	9807      	ldr	r0, [sp, #28]
   154b0:	9001      	str	r0, [sp, #4]
   154b2:	4804      	ldr	r0, [pc, #16]	; (154c4 <_wcsnrtombs_r+0x20>)
   154b4:	6800      	ldr	r0, [r0, #0]
   154b6:	9402      	str	r4, [sp, #8]
   154b8:	f7ff ff70 	bl	1539c <_wcsnrtombs_l>
   154bc:	b004      	add	sp, #16
   154be:	bd10      	pop	{r4, pc}
   154c0:	200033ec 	.word	0x200033ec
   154c4:	20003974 	.word	0x20003974

000154c8 <___reboot_Teensyduino__veneer>:
   154c8:	f85f f000 	ldr.w	pc, [pc]	; 154cc <___reboot_Teensyduino__veneer+0x4>
   154cc:	60001ee5 	.word	0x60001ee5

000154d0 <___init_veneer>:
   154d0:	f85f f000 	ldr.w	pc, [pc]	; 154d4 <___init_veneer+0x4>
   154d4:	60001f39 	.word	0x60001f39

000154d8 <___ZN7TwoWire5beginEv_veneer>:
   154d8:	f85f f000 	ldr.w	pc, [pc]	; 154dc <___ZN7TwoWire5beginEv_veneer+0x4>
   154dc:	600017c9 	.word	0x600017c9

Disassembly of section .fini:

000154e0 <_fini>:
   154e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154e2:	bf00      	nop
