
/home/james/Documents/dRehmFlight/Versions/dRehmFlight_quad/build/dRehmFlight_quad.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <ResetHandler2>:
	__builtin_unreachable();
}

__attribute__((section(".startup"), noinline, noreturn))
static void ResetHandler2(void)
{
60001400:	b580      	push	{r7, lr}
	unsigned int i;
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001402:	f000 fa5d 	bl	600018c0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001406:	4b76      	ldr	r3, [pc, #472]	; (600015e0 <ResetHandler2+0x1e0>)
60001408:	2208      	movs	r2, #8
6000140a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000140e:	4a75      	ldr	r2, [pc, #468]	; (600015e4 <ResetHandler2+0x1e4>)
60001410:	4b75      	ldr	r3, [pc, #468]	; (600015e8 <ResetHandler2+0x1e8>)
60001412:	429a      	cmp	r2, r3
60001414:	d00f      	beq.n	60001436 <ResetHandler2+0x36>
	while (dest < dest_end) {
60001416:	4b75      	ldr	r3, [pc, #468]	; (600015ec <ResetHandler2+0x1ec>)
60001418:	429a      	cmp	r2, r3
6000141a:	d20c      	bcs.n	60001436 <ResetHandler2+0x36>
6000141c:	1e58      	subs	r0, r3, #1
6000141e:	1a80      	subs	r0, r0, r2
60001420:	f020 0003 	bic.w	r0, r0, #3
60001424:	3004      	adds	r0, #4
60001426:	4b70      	ldr	r3, [pc, #448]	; (600015e8 <ResetHandler2+0x1e8>)
60001428:	4418      	add	r0, r3
		*dest++ = *src++;
6000142a:	f853 1b04 	ldr.w	r1, [r3], #4
6000142e:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
60001432:	4283      	cmp	r3, r0
60001434:	d1f9      	bne.n	6000142a <ResetHandler2+0x2a>
	if (dest == src) return;
60001436:	4a6e      	ldr	r2, [pc, #440]	; (600015f0 <ResetHandler2+0x1f0>)
60001438:	4b6e      	ldr	r3, [pc, #440]	; (600015f4 <ResetHandler2+0x1f4>)
6000143a:	429a      	cmp	r2, r3
6000143c:	d010      	beq.n	60001460 <ResetHandler2+0x60>
	while (dest < dest_end) {
6000143e:	4b6e      	ldr	r3, [pc, #440]	; (600015f8 <ResetHandler2+0x1f8>)
60001440:	429a      	cmp	r2, r3
60001442:	d20d      	bcs.n	60001460 <ResetHandler2+0x60>
60001444:	4a6a      	ldr	r2, [pc, #424]	; (600015f0 <ResetHandler2+0x1f0>)
60001446:	486d      	ldr	r0, [pc, #436]	; (600015fc <ResetHandler2+0x1fc>)
60001448:	1a80      	subs	r0, r0, r2
6000144a:	f020 0003 	bic.w	r0, r0, #3
6000144e:	3004      	adds	r0, #4
60001450:	4b68      	ldr	r3, [pc, #416]	; (600015f4 <ResetHandler2+0x1f4>)
60001452:	4418      	add	r0, r3
		*dest++ = *src++;
60001454:	f853 1b04 	ldr.w	r1, [r3], #4
60001458:	f842 1b04 	str.w	r1, [r2], #4
	while (dest < dest_end) {
6000145c:	4283      	cmp	r3, r0
6000145e:	d1f9      	bne.n	60001454 <ResetHandler2+0x54>
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001460:	4a67      	ldr	r2, [pc, #412]	; (60001600 <ResetHandler2+0x200>)
60001462:	4b68      	ldr	r3, [pc, #416]	; (60001604 <ResetHandler2+0x204>)
60001464:	429a      	cmp	r2, r3
60001466:	d20b      	bcs.n	60001480 <ResetHandler2+0x80>
60001468:	4b65      	ldr	r3, [pc, #404]	; (60001600 <ResetHandler2+0x200>)
6000146a:	4a67      	ldr	r2, [pc, #412]	; (60001608 <ResetHandler2+0x208>)
6000146c:	1ad2      	subs	r2, r2, r3
6000146e:	f022 0203 	bic.w	r2, r2, #3
60001472:	3204      	adds	r2, #4
60001474:	441a      	add	r2, r3
		*dest++ = 0;
60001476:	2100      	movs	r1, #0
60001478:	f843 1b04 	str.w	r1, [r3], #4
	while (dest < dest_end) {
6000147c:	4293      	cmp	r3, r2
6000147e:	d1fb      	bne.n	60001478 <ResetHandler2+0x78>
	SCB_CPACR = 0x00F00000;
60001480:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001484:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
60001488:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	2300      	movs	r3, #0
6000148e:	495f      	ldr	r1, [pc, #380]	; (6000160c <ResetHandler2+0x20c>)
60001490:	4a5f      	ldr	r2, [pc, #380]	; (60001610 <ResetHandler2+0x210>)
60001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
60001496:	3301      	adds	r3, #1
60001498:	2bb0      	cmp	r3, #176	; 0xb0
6000149a:	d1fa      	bne.n	60001492 <ResetHandler2+0x92>
6000149c:	4b5d      	ldr	r3, [pc, #372]	; (60001614 <ResetHandler2+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149e:	2180      	movs	r1, #128	; 0x80
600014a0:	4a5d      	ldr	r2, [pc, #372]	; (60001618 <ResetHandler2+0x218>)
600014a2:	f803 1b01 	strb.w	r1, [r3], #1
600014a6:	4293      	cmp	r3, r2
600014a8:	d1fb      	bne.n	600014a2 <ResetHandler2+0xa2>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014aa:	4e58      	ldr	r6, [pc, #352]	; (6000160c <ResetHandler2+0x20c>)
600014ac:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014b0:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b4:	4d4a      	ldr	r5, [pc, #296]	; (600015e0 <ResetHandler2+0x1e0>)
600014b6:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014ba:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014be:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000164c <ResetHandler2+0x24c>
600014c2:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014c6:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ca:	f8df 9184 	ldr.w	r9, [pc, #388]	; 60001650 <ResetHandler2+0x250>
600014ce:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014d6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014da:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	4f4f      	ldr	r7, [pc, #316]	; (6000161c <ResetHandler2+0x21c>)
600014e0:	69fb      	ldr	r3, [r7, #28]
600014e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ea:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f6:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	4b49      	ldr	r3, [pc, #292]	; (60001620 <ResetHandler2+0x220>)
600014fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014fe:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001500:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001502:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001504:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001506:	f000 f9e0 	bl	600018ca <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
6000150a:	4b46      	ldr	r3, [pc, #280]	; (60001624 <ResetHandler2+0x224>)
6000150c:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150e:	4b46      	ldr	r3, [pc, #280]	; (60001628 <ResetHandler2+0x228>)
60001510:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	2363      	movs	r3, #99	; 0x63
60001514:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
60001516:	2600      	movs	r6, #0
60001518:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000151a:	2303      	movs	r3, #3
6000151c:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151e:	4b43      	ldr	r3, [pc, #268]	; (6000162c <ResetHandler2+0x22c>)
60001520:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001524:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
60001528:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000152c:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001530:	4b3f      	ldr	r3, [pc, #252]	; (60001630 <ResetHandler2+0x230>)
60001532:	681a      	ldr	r2, [r3, #0]
60001534:	f042 0201 	orr.w	r2, r2, #1
60001538:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000153a:	685a      	ldr	r2, [r3, #4]
6000153c:	4b3d      	ldr	r3, [pc, #244]	; (60001634 <ResetHandler2+0x234>)
6000153e:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001540:	f000 fb86 	bl	60001c50 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001544:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001548:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154c:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001550:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001554:	4838      	ldr	r0, [pc, #224]	; (60001638 <ResetHandler2+0x238>)
60001556:	f000 fd0f 	bl	60001f78 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000155a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
6000155c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001560:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001562:	4b36      	ldr	r3, [pc, #216]	; (6000163c <ResetHandler2+0x23c>)
60001564:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
60001566:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000156a:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156e:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001572:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001576:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
6000157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
6000157c:	f013 0f01 	tst.w	r3, #1
60001580:	d109      	bne.n	60001596 <ResetHandler2+0x196>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001582:	4b2f      	ldr	r3, [pc, #188]	; (60001640 <ResetHandler2+0x240>)
60001584:	4a2f      	ldr	r2, [pc, #188]	; (60001644 <ResetHandler2+0x244>)
60001586:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001588:	f642 6215 	movw	r2, #11797	; 0x2e15
6000158c:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
6000158e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001590:	f042 0201 	orr.w	r2, r2, #1
60001594:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001596:	4a2a      	ldr	r2, [pc, #168]	; (60001640 <ResetHandler2+0x240>)
60001598:	6893      	ldr	r3, [r2, #8]
6000159a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000159e:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015a0:	f000 fa0c 	bl	600019bc <configure_external_ram>
	analog_init();
600015a4:	f000 f932 	bl	6000180c <analog_init>
	pwm_init();
600015a8:	f000 fcde 	bl	60001f68 <__pwm_init_veneer>
	tempmon_init();
600015ac:	f000 fb80 	bl	60001cb0 <tempmon_init>
	startup_middle_hook();
600015b0:	f000 f987 	bl	600018c2 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015b4:	4a24      	ldr	r2, [pc, #144]	; (60001648 <ResetHandler2+0x248>)
600015b6:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	2b13      	cmp	r3, #19
600015ba:	d9fc      	bls.n	600015b6 <ResetHandler2+0x1b6>
	usb_init();
600015bc:	f000 fc1c 	bl	60001df8 <usb_init>
600015c0:	4a21      	ldr	r2, [pc, #132]	; (60001648 <ResetHandler2+0x248>)
600015c2:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015c8:	d3fb      	bcc.n	600015c2 <ResetHandler2+0x1c2>
	startup_debug_reset();
600015ca:	f000 f97c 	bl	600018c6 <startup_debug_reset>
	startup_late_hook();
600015ce:	f000 f979 	bl	600018c4 <startup_default_late_hook>
	__libc_init_array();
600015d2:	f000 fcbd 	bl	60001f50 <____libc_init_array_veneer>
	main();
600015d6:	f000 fcbf 	bl	60001f58 <__main_veneer>
	while (1) asm("WFI");
600015da:	bf30      	wfi
600015dc:	e7fd      	b.n	600015da <ResetHandler2+0x1da>
600015de:	bf00      	nop
600015e0:	400d8000 	.word	0x400d8000
600015e4:	00000000 	.word	0x00000000
600015e8:	600021a4 	.word	0x600021a4
600015ec:	00015628 	.word	0x00015628
600015f0:	20000000 	.word	0x20000000
600015f4:	600177d0 	.word	0x600177d0
600015f8:	20003ec0 	.word	0x20003ec0
600015fc:	20003ebf 	.word	0x20003ebf
60001600:	20003ec0 	.word	0x20003ec0
60001604:	20005400 	.word	0x20005400
60001608:	200053ff 	.word	0x200053ff
6000160c:	20003c00 	.word	0x20003c00
60001610:	0000decd 	.word	0x0000decd
60001614:	e000e400 	.word	0xe000e400
60001618:	e000e4a0 	.word	0xe000e4a0
6000161c:	400fc000 	.word	0x400fc000
60001620:	400ac000 	.word	0x400ac000
60001624:	0000c0f5 	.word	0x0000c0f5
60001628:	0000c0fd 	.word	0x0000c0fd
6000162c:	20200000 	.word	0x20200000
60001630:	e0001000 	.word	0xe0001000
60001634:	20005384 	.word	0x20005384
60001638:	23c34600 	.word	0x23c34600
6000163c:	40084000 	.word	0x40084000
60001640:	400d4000 	.word	0x400d4000
60001644:	56c00000 	.word	0x56c00000
60001648:	20005388 	.word	0x20005388
6000164c:	2018101b 	.word	0x2018101b
60001650:	13110d0c 	.word	0x13110d0c

60001654 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001654:	4b07      	ldr	r3, [pc, #28]	; (60001674 <ResetHandler+0x20>)
60001656:	4a08      	ldr	r2, [pc, #32]	; (60001678 <ResetHandler+0x24>)
60001658:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000165a:	4a08      	ldr	r2, [pc, #32]	; (6000167c <ResetHandler+0x28>)
6000165c:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165e:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
60001662:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001664:	4b06      	ldr	r3, [pc, #24]	; (60001680 <ResetHandler+0x2c>)
60001666:	469d      	mov	sp, r3
	__asm__ volatile("dsb":::"memory");
60001668:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000166c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001670:	f7ff fec6 	bl	60001400 <ResetHandler2>
60001674:	400ac000 	.word	0x400ac000
60001678:	aaaaaabf 	.word	0xaaaaaabf
6000167c:	00200007 	.word	0x00200007
60001680:	20068000 	.word	0x20068000

60001684 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
60001684:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001686:	4a0f      	ldr	r2, [pc, #60]	; (600016c4 <TwoWire::configSDApin(unsigned char)+0x40>)
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000168e:	7a1b      	ldrb	r3, [r3, #8]
60001690:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001694:	689b      	ldr	r3, [r3, #8]
60001696:	4c0c      	ldr	r4, [pc, #48]	; (600016c8 <TwoWire::configSDApin(unsigned char)+0x44>)
60001698:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000169a:	6943      	ldr	r3, [r0, #20]
6000169c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016a0:	f893 c008 	ldrb.w	ip, [r3, #8]
600016a4:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016a8:	6852      	ldr	r2, [r2, #4]
600016aa:	68db      	ldr	r3, [r3, #12]
600016ac:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ae:	6943      	ldr	r3, [r0, #20]
600016b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016b4:	690b      	ldr	r3, [r1, #16]
600016b6:	b10b      	cbz	r3, 600016bc <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016b8:	694a      	ldr	r2, [r1, #20]
600016ba:	601a      	str	r2, [r3, #0]
	}
}
600016bc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016c0:	4770      	bx	lr
600016c2:	bf00      	nop
600016c4:	200028e4 	.word	0x200028e4
600016c8:	0001f861 	.word	0x0001f861

600016cc <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016cc:	b538      	push	{r3, r4, r5, lr}
600016ce:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016d0:	6943      	ldr	r3, [r0, #20]
600016d2:	7e02      	ldrb	r2, [r0, #24]
600016d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016d8:	7a10      	ldrb	r0, [r2, #8]
600016da:	4288      	cmp	r0, r1
600016dc:	d009      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016de:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016e0:	2aff      	cmp	r2, #255	; 0xff
600016e2:	d006      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016e4:	4291      	cmp	r1, r2
600016e6:	d007      	beq.n	600016f8 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016e8:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
600016ea:	2aff      	cmp	r2, #255	; 0xff
600016ec:	d001      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
600016ee:	428a      	cmp	r2, r1
600016f0:	d000      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x28>
}
600016f2:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016f4:	2501      	movs	r5, #1
600016f6:	e000      	b.n	600016fa <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
600016f8:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016fa:	681a      	ldr	r2, [r3, #0]
600016fc:	6812      	ldr	r2, [r2, #0]
600016fe:	685b      	ldr	r3, [r3, #4]
60001700:	421a      	tst	r2, r3
60001702:	d101      	bne.n	60001708 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001704:	7625      	strb	r5, [r4, #24]
60001706:	e7f4      	b.n	600016f2 <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001708:	4b05      	ldr	r3, [pc, #20]	; (60001720 <TwoWire::setSDA(unsigned char)+0x54>)
6000170a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000170e:	685b      	ldr	r3, [r3, #4]
60001710:	2205      	movs	r2, #5
60001712:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001714:	4629      	mov	r1, r5
60001716:	4620      	mov	r0, r4
60001718:	f7ff ffb4 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
6000171c:	e7f2      	b.n	60001704 <TwoWire::setSDA(unsigned char)+0x38>
6000171e:	bf00      	nop
60001720:	200028e4 	.word	0x200028e4

60001724 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001724:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001726:	4a0f      	ldr	r2, [pc, #60]	; (60001764 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001728:	6943      	ldr	r3, [r0, #20]
6000172a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000172e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
60001732:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001736:	689b      	ldr	r3, [r3, #8]
60001738:	4c0b      	ldr	r4, [pc, #44]	; (60001768 <TwoWire::configSCLpin(unsigned char)+0x44>)
6000173a:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000173c:	6943      	ldr	r3, [r0, #20]
6000173e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
60001742:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001746:	eb02 120c 	add.w	r2, r2, ip, lsl #4
6000174a:	6852      	ldr	r2, [r2, #4]
6000174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000174e:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001750:	6943      	ldr	r3, [r0, #20]
60001752:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001756:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001758:	b10b      	cbz	r3, 6000175e <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000175a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
6000175c:	601a      	str	r2, [r3, #0]
	}
}
6000175e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001762:	4770      	bx	lr
60001764:	200028e4 	.word	0x200028e4
60001768:	0001f861 	.word	0x0001f861

6000176c <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000176c:	b538      	push	{r3, r4, r5, lr}
6000176e:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001770:	6943      	ldr	r3, [r0, #20]
60001772:	7e42      	ldrb	r2, [r0, #25]
60001774:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001778:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
6000177c:	4288      	cmp	r0, r1
6000177e:	d00b      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001780:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001784:	2aff      	cmp	r2, #255	; 0xff
60001786:	d007      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001788:	4291      	cmp	r1, r2
6000178a:	d008      	beq.n	6000179e <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
60001790:	2aff      	cmp	r2, #255	; 0xff
60001792:	d001      	beq.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
60001794:	428a      	cmp	r2, r1
60001796:	d000      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x2e>
}
60001798:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000179a:	2501      	movs	r5, #1
6000179c:	e000      	b.n	600017a0 <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
6000179e:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a0:	681a      	ldr	r2, [r3, #0]
600017a2:	6812      	ldr	r2, [r2, #0]
600017a4:	685b      	ldr	r3, [r3, #4]
600017a6:	421a      	tst	r2, r3
600017a8:	d101      	bne.n	600017ae <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017aa:	7665      	strb	r5, [r4, #25]
600017ac:	e7f4      	b.n	60001798 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	4b05      	ldr	r3, [pc, #20]	; (600017c4 <TwoWire::setSCL(unsigned char)+0x58>)
600017b0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017b4:	685b      	ldr	r3, [r3, #4]
600017b6:	2205      	movs	r2, #5
600017b8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017ba:	4629      	mov	r1, r5
600017bc:	4620      	mov	r0, r4
600017be:	f7ff ffb1 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
600017c2:	e7f2      	b.n	600017aa <TwoWire::setSCL(unsigned char)+0x3e>
600017c4:	200028e4 	.word	0x200028e4

600017c8 <TwoWire::begin()>:
{
600017c8:	b510      	push	{r4, lr}
600017ca:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	4a0d      	ldr	r2, [pc, #52]	; (60001804 <TwoWire::begin()+0x3c>)
600017ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
600017d0:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
600017d8:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017da:	6941      	ldr	r1, [r0, #20]
600017dc:	680a      	ldr	r2, [r1, #0]
600017de:	6813      	ldr	r3, [r2, #0]
600017e0:	6849      	ldr	r1, [r1, #4]
600017e2:	430b      	orrs	r3, r1
600017e4:	6013      	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017e6:	6903      	ldr	r3, [r0, #16]
600017e8:	2202      	movs	r2, #2
600017ea:	611a      	str	r2, [r3, #16]
	setClock(100000);
600017ec:	4906      	ldr	r1, [pc, #24]	; (60001808 <TwoWire::begin()+0x40>)
600017ee:	f000 fbbf 	bl	60001f70 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017f2:	7e21      	ldrb	r1, [r4, #24]
600017f4:	4620      	mov	r0, r4
600017f6:	f7ff ff45 	bl	60001684 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017fa:	7e61      	ldrb	r1, [r4, #25]
600017fc:	4620      	mov	r0, r4
600017fe:	f7ff ff91 	bl	60001724 <TwoWire::configSCLpin(unsigned char)>
}
60001802:	bd10      	pop	{r4, pc}
60001804:	400fc000 	.word	0x400fc000
60001808:	000186a0 	.word	0x000186a0

6000180c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000180c:	4b11      	ldr	r3, [pc, #68]	; (60001854 <analog_init+0x48>)
6000180e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001810:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001814:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001816:	6eda      	ldr	r2, [r3, #108]	; 0x6c
60001818:	f442 7240 	orr.w	r2, r2, #768	; 0x300
6000181c:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000181e:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
60001822:	f240 6237 	movw	r2, #1591	; 0x637
60001826:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001828:	22a0      	movs	r2, #160	; 0xa0
6000182a:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
6000182c:	461a      	mov	r2, r3
6000182e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001830:	f013 0f80 	tst.w	r3, #128	; 0x80
60001834:	d1fb      	bne.n	6000182e <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001836:	4b08      	ldr	r3, [pc, #32]	; (60001858 <analog_init+0x4c>)
60001838:	f240 6237 	movw	r2, #1591	; 0x637
6000183c:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000183e:	22a0      	movs	r2, #160	; 0xa0
60001840:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001842:	461a      	mov	r2, r3
60001844:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001846:	f013 0f80 	tst.w	r3, #128	; 0x80
6000184a:	d1fb      	bne.n	60001844 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
6000184c:	4b03      	ldr	r3, [pc, #12]	; (6000185c <analog_init+0x50>)
6000184e:	2200      	movs	r2, #0
60001850:	701a      	strb	r2, [r3, #0]
}
60001852:	4770      	bx	lr
60001854:	400fc000 	.word	0x400fc000
60001858:	400c8000 	.word	0x400c8000
6000185c:	200053c9 	.word	0x200053c9

60001860 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001860:	4b09      	ldr	r3, [pc, #36]	; (60001888 <flexspi2_command+0x28>)
60001862:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001866:	0400      	lsls	r0, r0, #16
60001868:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
6000186c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001870:	2201      	movs	r2, #1
60001872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001876:	461a      	mov	r2, r3
60001878:	6953      	ldr	r3, [r2, #20]
6000187a:	f013 0f01 	tst.w	r3, #1
6000187e:	d0fb      	beq.n	60001878 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001880:	4b01      	ldr	r3, [pc, #4]	; (60001888 <flexspi2_command+0x28>)
60001882:	2201      	movs	r2, #1
60001884:	615a      	str	r2, [r3, #20]
}
60001886:	4770      	bx	lr
60001888:	402a4000 	.word	0x402a4000

6000188c <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
6000188c:	4b0a      	ldr	r3, [pc, #40]	; (600018b8 <flexspi2_psram_id+0x2c>)
6000188e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001892:	4a0a      	ldr	r2, [pc, #40]	; (600018bc <flexspi2_psram_id+0x30>)
60001894:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001898:	2201      	movs	r2, #1
6000189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000189e:	461a      	mov	r2, r3
600018a0:	6953      	ldr	r3, [r2, #20]
600018a2:	f013 0f01 	tst.w	r3, #1
600018a6:	d0fb      	beq.n	600018a0 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
600018a8:	4b03      	ldr	r3, [pc, #12]	; (600018b8 <flexspi2_psram_id+0x2c>)
600018aa:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600018ae:	2221      	movs	r2, #33	; 0x21
600018b0:	615a      	str	r2, [r3, #20]
}
600018b2:	b280      	uxth	r0, r0
600018b4:	4770      	bx	lr
600018b6:	bf00      	nop
600018b8:	402a4000 	.word	0x402a4000
600018bc:	00030004 	.word	0x00030004

600018c0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018c0:	4770      	bx	lr

600018c2 <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
600018c2:	4770      	bx	lr

600018c4 <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
600018c4:	4770      	bx	lr

600018c6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018c6:	bf00      	nop
600018c8:	4770      	bx	lr

600018ca <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600018ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018ce:	2100      	movs	r1, #0
600018d0:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600018d4:	2210      	movs	r2, #16
600018d6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600018da:	4a28      	ldr	r2, [pc, #160]	; (6000197c <configure_cache+0xb2>)
600018dc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600018e0:	2211      	movs	r2, #17
600018e2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600018e6:	4a26      	ldr	r2, [pc, #152]	; (60001980 <configure_cache+0xb6>)
600018e8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600018ec:	2212      	movs	r2, #18
600018ee:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600018f2:	4a24      	ldr	r2, [pc, #144]	; (60001984 <configure_cache+0xba>)
600018f4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600018f8:	4a23      	ldr	r2, [pc, #140]	; (60001988 <configure_cache+0xbe>)
600018fa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600018fe:	4a23      	ldr	r2, [pc, #140]	; (6000198c <configure_cache+0xc2>)
60001900:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001904:	4a22      	ldr	r2, [pc, #136]	; (60001990 <configure_cache+0xc6>)
60001906:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000190a:	4a22      	ldr	r2, [pc, #136]	; (60001994 <configure_cache+0xca>)
6000190c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001910:	4a21      	ldr	r2, [pc, #132]	; (60001998 <configure_cache+0xce>)
60001912:	f042 0215 	orr.w	r2, r2, #21
60001916:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000191a:	4a20      	ldr	r2, [pc, #128]	; (6000199c <configure_cache+0xd2>)
6000191c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001920:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
60001924:	320d      	adds	r2, #13
60001926:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000192a:	4a1d      	ldr	r2, [pc, #116]	; (600019a0 <configure_cache+0xd6>)
6000192c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001930:	4a1c      	ldr	r2, [pc, #112]	; (600019a4 <configure_cache+0xda>)
60001932:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001936:	4a1c      	ldr	r2, [pc, #112]	; (600019a8 <configure_cache+0xde>)
60001938:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000193c:	4a1b      	ldr	r2, [pc, #108]	; (600019ac <configure_cache+0xe2>)
6000193e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001942:	4a1b      	ldr	r2, [pc, #108]	; (600019b0 <configure_cache+0xe6>)
60001944:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001948:	4a1a      	ldr	r2, [pc, #104]	; (600019b4 <configure_cache+0xea>)
6000194a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000194e:	4a1a      	ldr	r2, [pc, #104]	; (600019b8 <configure_cache+0xee>)
60001950:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001954:	2201      	movs	r2, #1
60001956:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000195a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000195e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001962:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001966:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000196a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000196e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60001972:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001976:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000197a:	4770      	bx	lr
6000197c:	1000003f 	.word	0x1000003f
60001980:	03080025 	.word	0x03080025
60001984:	00100009 	.word	0x00100009
60001988:	00200013 	.word	0x00200013
6000198c:	07020021 	.word	0x07020021
60001990:	20000014 	.word	0x20000014
60001994:	13080025 	.word	0x13080025
60001998:	20005400 	.word	0x20005400
6000199c:	10000009 	.word	0x10000009
600019a0:	130b0027 	.word	0x130b0027
600019a4:	40000017 	.word	0x40000017
600019a8:	13100033 	.word	0x13100033
600019ac:	60000018 	.word	0x60000018
600019b0:	070b002f 	.word	0x070b002f
600019b4:	70000019 	.word	0x70000019
600019b8:	130b002f 	.word	0x130b002f

600019bc <configure_external_ram>:
{
600019bc:	b510      	push	{r4, lr}
600019be:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019c0:	4b8c      	ldr	r3, [pc, #560]	; (60001bf4 <configure_external_ram+0x238>)
600019c2:	4a8d      	ldr	r2, [pc, #564]	; (60001bf8 <configure_external_ram+0x23c>)
600019c4:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019c8:	498c      	ldr	r1, [pc, #560]	; (60001bfc <configure_external_ram+0x240>)
600019ca:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019ce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600019d2:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
600019d6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019da:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
600019de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019e6:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600019ea:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019ee:	2218      	movs	r2, #24
600019f0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600019f2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600019f4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600019f6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600019f8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600019fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600019fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
60001a0a:	2201      	movs	r2, #1
60001a0c:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a10:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a14:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a18:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a1c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a20:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a24:	4b76      	ldr	r3, [pc, #472]	; (60001c00 <configure_external_ram+0x244>)
60001a26:	699a      	ldr	r2, [r3, #24]
60001a28:	4976      	ldr	r1, [pc, #472]	; (60001c04 <configure_external_ram+0x248>)
60001a2a:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a2c:	4a76      	ldr	r2, [pc, #472]	; (60001c08 <configure_external_ram+0x24c>)
60001a2e:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a30:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
60001a36:	f042 020c 	orr.w	r2, r2, #12
60001a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a3e:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
60001a42:	681a      	ldr	r2, [r3, #0]
60001a44:	f042 0202 	orr.w	r2, r2, #2
60001a48:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a4a:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a4c:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
60001a50:	f021 0173 	bic.w	r1, r1, #115	; 0x73
60001a54:	0409      	lsls	r1, r1, #16
60001a56:	0c09      	lsrs	r1, r1, #16
60001a58:	4a6c      	ldr	r2, [pc, #432]	; (60001c0c <configure_external_ram+0x250>)
60001a5a:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a5c:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
60001a62:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a64:	496a      	ldr	r1, [pc, #424]	; (60001c10 <configure_external_ram+0x254>)
60001a66:	6888      	ldr	r0, [r1, #8]
60001a68:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60001a6c:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60001a70:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001a72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a76:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001a78:	68da      	ldr	r2, [r3, #12]
60001a7a:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60001a7e:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a80:	6a1a      	ldr	r2, [r3, #32]
60001a82:	4c64      	ldr	r4, [pc, #400]	; (60001c14 <configure_external_ram+0x258>)
60001a84:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a86:	4864      	ldr	r0, [pc, #400]	; (60001c18 <configure_external_ram+0x25c>)
60001a88:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8a:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a8c:	6a1a      	ldr	r2, [r3, #32]
60001a8e:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a90:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a92:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001a94:	4a61      	ldr	r2, [pc, #388]	; (60001c1c <configure_external_ram+0x260>)
60001a96:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001a9a:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60001a9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001aa2:	f042 0201 	orr.w	r2, r2, #1
60001aa6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001aaa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60001aae:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
60001ab2:	f042 0201 	orr.w	r2, r2, #1
60001ab6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001aba:	2200      	movs	r2, #0
60001abc:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001abe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
60001ac2:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ac4:	4956      	ldr	r1, [pc, #344]	; (60001c20 <configure_external_ram+0x264>)
60001ac6:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ac8:	f240 6205 	movw	r2, #1541	; 0x605
60001acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001ad0:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001ad2:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001ad8:	681a      	ldr	r2, [r3, #0]
60001ada:	f022 0202 	bic.w	r2, r2, #2
60001ade:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ae0:	4a50      	ldr	r2, [pc, #320]	; (60001c24 <configure_external_ram+0x268>)
60001ae2:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ae4:	2202      	movs	r2, #2
60001ae6:	61da      	str	r2, [r3, #28]
60001ae8:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001aec:	2100      	movs	r1, #0
60001aee:	4a4e      	ldr	r2, [pc, #312]	; (60001c28 <configure_external_ram+0x26c>)
60001af0:	f843 1b04 	str.w	r1, [r3], #4
60001af4:	4293      	cmp	r3, r2
60001af6:	d1fb      	bne.n	60001af0 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001af8:	4a4c      	ldr	r2, [pc, #304]	; (60001c2c <configure_external_ram+0x270>)
60001afa:	6813      	ldr	r3, [r2, #0]
60001afc:	f043 0301 	orr.w	r3, r3, #1
60001b00:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b02:	6813      	ldr	r3, [r2, #0]
60001b04:	f013 0f01 	tst.w	r3, #1
60001b08:	d1fb      	bne.n	60001b02 <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	4b48      	ldr	r3, [pc, #288]	; (60001c2c <configure_external_ram+0x270>)
60001b0c:	4a45      	ldr	r2, [pc, #276]	; (60001c24 <configure_external_ram+0x268>)
60001b0e:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	2402      	movs	r4, #2
60001b12:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b14:	f240 62f5 	movw	r2, #1781	; 0x6f5
60001b18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b1c:	f240 4266 	movw	r2, #1126	; 0x466
60001b20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b24:	f240 4299 	movw	r2, #1177	; 0x499
60001b28:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b2c:	4a40      	ldr	r2, [pc, #256]	; (60001c30 <configure_external_ram+0x274>)
60001b2e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b32:	f242 4201 	movw	r2, #9217	; 0x2401
60001b36:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b3a:	f240 4235 	movw	r2, #1077	; 0x435
60001b3e:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b42:	4a3c      	ldr	r2, [pc, #240]	; (60001c34 <configure_external_ram+0x278>)
60001b44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b48:	4a3b      	ldr	r2, [pc, #236]	; (60001c38 <configure_external_ram+0x27c>)
60001b4a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b4e:	4a3b      	ldr	r2, [pc, #236]	; (60001c3c <configure_external_ram+0x280>)
60001b50:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b54:	f242 2201 	movw	r2, #8705	; 0x2201
60001b58:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001b5c:	2100      	movs	r1, #0
60001b5e:	4608      	mov	r0, r1
60001b60:	f7ff fe7e 	bl	60001860 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001b64:	2100      	movs	r1, #0
60001b66:	2001      	movs	r0, #1
60001b68:	f7ff fe7a 	bl	60001860 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001b6c:	2100      	movs	r1, #0
60001b6e:	4620      	mov	r0, r4
60001b70:	f7ff fe76 	bl	60001860 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b74:	2000      	movs	r0, #0
60001b76:	f7ff fe89 	bl	6000188c <flexspi2_psram_id>
60001b7a:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001b7e:	4298      	cmp	r0, r3
60001b80:	d007      	beq.n	60001b92 <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b82:	4b2f      	ldr	r3, [pc, #188]	; (60001c40 <configure_external_ram+0x284>)
60001b84:	2200      	movs	r2, #0
60001b86:	601a      	str	r2, [r3, #0]
60001b88:	605a      	str	r2, [r3, #4]
60001b8a:	609a      	str	r2, [r3, #8]
60001b8c:	60da      	str	r2, [r3, #12]
}
60001b8e:	b002      	add	sp, #8
60001b90:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
60001b92:	2100      	movs	r1, #0
60001b94:	2004      	movs	r0, #4
60001b96:	f7ff fe63 	bl	60001860 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001b9a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001b9e:	2000      	movs	r0, #0
60001ba0:	f7ff fe5e 	bl	60001860 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ba4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001ba8:	2001      	movs	r0, #1
60001baa:	f7ff fe59 	bl	60001860 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001bae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bb2:	4620      	mov	r0, r4
60001bb4:	f7ff fe54 	bl	60001860 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60001bbc:	f7ff fe66 	bl	6000188c <flexspi2_psram_id>
60001bc0:	f645 530d 	movw	r3, #23821	; 0x5d0d
60001bc4:	4298      	cmp	r0, r3
60001bc6:	d00e      	beq.n	60001be6 <configure_external_ram+0x22a>
60001bc8:	2008      	movs	r0, #8
			external_psram_size = 16;
60001bca:	4b1e      	ldr	r3, [pc, #120]	; (60001c44 <configure_external_ram+0x288>)
60001bcc:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60001bce:	491e      	ldr	r1, [pc, #120]	; (60001c48 <configure_external_ram+0x28c>)
60001bd0:	4a1e      	ldr	r2, [pc, #120]	; (60001c4c <configure_external_ram+0x290>)
60001bd2:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd4:	2300      	movs	r3, #0
60001bd6:	9300      	str	r3, [sp, #0]
60001bd8:	2301      	movs	r3, #1
60001bda:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60001bde:	4818      	ldr	r0, [pc, #96]	; (60001c40 <configure_external_ram+0x284>)
60001be0:	f000 f9be 	bl	60001f60 <__sm_set_pool_veneer>
60001be4:	e7d3      	b.n	60001b8e <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
60001be6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60001bea:	2004      	movs	r0, #4
60001bec:	f7ff fe38 	bl	60001860 <flexspi2_command>
			external_psram_size = 16;
60001bf0:	2010      	movs	r0, #16
60001bf2:	e7ea      	b.n	60001bca <configure_external_ram+0x20e>
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	400fc000 	.word	0x400fc000
60001c04:	1ffffcff 	.word	0x1ffffcff
60001c08:	a0000300 	.word	0xa0000300
60001c0c:	ffff0012 	.word	0xffff0012
60001c10:	402a8000 	.word	0x402a8000
60001c14:	7cf0ff00 	.word	0x7cf0ff00
60001c18:	80000040 	.word	0x80000040
60001c1c:	830f00ff 	.word	0x830f00ff
60001c20:	00020063 	.word	0x00020063
60001c24:	5af05af0 	.word	0x5af05af0
60001c28:	402a4300 	.word	0x402a4300
60001c2c:	402a4000 	.word	0x402a4000
60001c30:	3018049f 	.word	0x3018049f
60001c34:	0a1806eb 	.word	0x0a1806eb
60001c38:	26013206 	.word	0x26013206
60001c3c:	0a180638 	.word	0x0a180638
60001c40:	2000509c 	.word	0x2000509c
60001c44:	200053cc 	.word	0x200053cc
60001c48:	70000000 	.word	0x70000000
60001c4c:	70000000 	.word	0x70000000

60001c50 <usb_pll_start>:
{
60001c50:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c52:	4a16      	ldr	r2, [pc, #88]	; (60001cac <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c54:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c5e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	f243 0042 	movw	r0, #12354	; 0x3042
60001c6a:	e002      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c6e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c70:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c72:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c74:	f013 0f02 	tst.w	r3, #2
60001c78:	d1f8      	bne.n	60001c6c <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c7e:	d00c      	beq.n	60001c9a <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c80:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c84:	d00b      	beq.n	60001c9e <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c86:	2b00      	cmp	r3, #0
60001c88:	daf3      	bge.n	60001c72 <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c8e:	d108      	bne.n	60001ca2 <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c90:	f013 0f40 	tst.w	r3, #64	; 0x40
60001c94:	d007      	beq.n	60001ca6 <usb_pll_start+0x56>
}
60001c96:	bcf0      	pop	{r4, r5, r6, r7}
60001c98:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c9a:	6155      	str	r5, [r2, #20]
			continue;
60001c9c:	e7e9      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	6156      	str	r6, [r2, #20]
			continue;
60001ca0:	e7e7      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ca2:	6191      	str	r1, [r2, #24]
			continue;
60001ca4:	e7e5      	b.n	60001c72 <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ca6:	6157      	str	r7, [r2, #20]
			continue;
60001ca8:	e7e3      	b.n	60001c72 <usb_pll_start+0x22>
60001caa:	bf00      	nop
60001cac:	400d8000 	.word	0x400d8000

60001cb0 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cb0:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb2:	4b45      	ldr	r3, [pc, #276]	; (60001dc8 <tempmon_init+0x118>)
60001cb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001cb8:	f022 0201 	bic.w	r2, r2, #1
60001cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc0:	2203      	movs	r2, #3
60001cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc6:	4a41      	ldr	r2, [pc, #260]	; (60001dcc <tempmon_init+0x11c>)
60001cc8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ccc:	b2d1      	uxtb	r1, r2
60001cce:	4c40      	ldr	r4, [pc, #256]	; (60001dd0 <tempmon_init+0x120>)
60001cd0:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cd2:	f3c2 200b 	ubfx	r0, r2, #8, #12
60001cd6:	4d3f      	ldr	r5, [pc, #252]	; (60001dd4 <tempmon_init+0x124>)
60001cd8:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cda:	ee07 1a90 	vmov	s15, r1
60001cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
60001ce2:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
60001ce6:	ee37 6a64 	vsub.f32	s12, s14, s9
60001cea:	493b      	ldr	r1, [pc, #236]	; (60001dd8 <tempmon_init+0x128>)
60001cec:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cf0:	ee07 0a90 	vmov	s15, r0
60001cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf8:	0d12      	lsrs	r2, r2, #20
60001cfa:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d02:	ee77 7ae6 	vsub.f32	s15, s15, s13
60001d06:	4835      	ldr	r0, [pc, #212]	; (60001ddc <tempmon_init+0x12c>)
60001d08:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d10:	eddf 5a33 	vldr	s11, [pc, #204]	; 60001de0 <tempmon_init+0x130>
60001d14:	ee37 7a65 	vsub.f32	s14, s14, s11
60001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
60001d1c:	eec7 7a06 	vdiv.f32	s15, s14, s12
60001d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
60001d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d28:	ee17 ca90 	vmov	ip, s15
60001d2c:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
60001d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	ed95 6a00 	vldr	s12, [r5]
60001d38:	eeb8 6a46 	vcvt.f32.u32	s12, s12
60001d3c:	edd4 7a00 	vldr	s15, [r4]
60001d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
60001d44:	ed90 5a00 	vldr	s10, [r0]
60001d48:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	eddf 6a24 	vldr	s13, [pc, #144]	; 60001de4 <tempmon_init+0x134>
60001d54:	ee77 6ae6 	vsub.f32	s13, s15, s13
60001d58:	ee66 6a85 	vmul.f32	s13, s13, s10
60001d5c:	ee86 7aa5 	vdiv.f32	s14, s13, s11
60001d60:	ee37 7a06 	vadd.f32	s14, s14, s12
60001d64:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	4a1f      	ldr	r2, [pc, #124]	; (60001de8 <tempmon_init+0x138>)
60001d6a:	ee17 0a10 	vmov	r0, s14
60001d6e:	ea02 4200 	and.w	r2, r2, r0, lsl #16
60001d72:	430a      	orrs	r2, r1
60001d74:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d78:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
60001d80:	ee27 7a85 	vmul.f32	s14, s15, s10
60001d84:	eec7 7a25 	vdiv.f32	s15, s14, s11
60001d88:	ee77 7a86 	vadd.f32	s15, s15, s12
60001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60001d90:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d94:	f3c2 020b 	ubfx	r2, r2, #0, #12
60001d98:	430a      	orrs	r2, r1
60001d9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001da2:	f042 0202 	orr.w	r2, r2, #2
60001da6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001daa:	4b10      	ldr	r3, [pc, #64]	; (60001dec <tempmon_init+0x13c>)
60001dac:	2200      	movs	r2, #0
60001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001db2:	4b0f      	ldr	r3, [pc, #60]	; (60001df0 <tempmon_init+0x140>)
60001db4:	4a0f      	ldr	r2, [pc, #60]	; (60001df4 <tempmon_init+0x144>)
60001db6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001dba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dbe:	2201      	movs	r2, #1
60001dc0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dc4:	bc30      	pop	{r4, r5}
60001dc6:	4770      	bx	lr
60001dc8:	400d8100 	.word	0x400d8100
60001dcc:	401f4400 	.word	0x401f4400
60001dd0:	200051ec 	.word	0x200051ec
60001dd4:	200051e8 	.word	0x200051e8
60001dd8:	200051f0 	.word	0x200051f0
60001ddc:	200051f4 	.word	0x200051f4
60001de0:	42aa0000 	.word	0x42aa0000
60001de4:	42b40000 	.word	0x42b40000
60001de8:	0fff0000 	.word	0x0fff0000
60001dec:	e000e400 	.word	0xe000e400
60001df0:	20003c00 	.word	0x20003c00
60001df4:	0000e0ab 	.word	0x0000e0ab

60001df8 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001df8:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001dfa:	4b32      	ldr	r3, [pc, #200]	; (60001ec4 <usb_init+0xcc>)
60001dfc:	f640 7261 	movw	r2, #3937	; 0xf61
60001e00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001e04:	f000 f8bc 	bl	60001f80 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e08:	4a2f      	ldr	r2, [pc, #188]	; (60001ec8 <usb_init+0xd0>)
60001e0a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001e0e:	f043 0303 	orr.w	r3, r3, #3
60001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e16:	4b2d      	ldr	r3, [pc, #180]	; (60001ecc <usb_init+0xd4>)
60001e18:	f240 4204 	movw	r2, #1028	; 0x404
60001e1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e20:	4b2b      	ldr	r3, [pc, #172]	; (60001ed0 <usb_init+0xd8>)
60001e22:	681a      	ldr	r2, [r3, #0]
60001e24:	4b2b      	ldr	r3, [pc, #172]	; (60001ed4 <usb_init+0xdc>)
60001e26:	421a      	tst	r2, r3
60001e28:	d105      	bne.n	60001e36 <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e2a:	4b28      	ldr	r3, [pc, #160]	; (60001ecc <usb_init+0xd4>)
60001e2c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
60001e30:	f013 0f03 	tst.w	r3, #3
60001e34:	d01c      	beq.n	60001e70 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e36:	4b26      	ldr	r3, [pc, #152]	; (60001ed0 <usb_init+0xd8>)
60001e38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e3c:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e3e:	4a23      	ldr	r2, [pc, #140]	; (60001ecc <usb_init+0xd4>)
60001e40:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e44:	f043 0302 	orr.w	r3, r3, #2
60001e48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e4c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e50:	f013 0f02 	tst.w	r3, #2
60001e54:	d1fa      	bne.n	60001e4c <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001e5e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e62:	4b1b      	ldr	r3, [pc, #108]	; (60001ed0 <usb_init+0xd8>)
60001e64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60001e68:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e6a:	2019      	movs	r0, #25
60001e6c:	f000 f86c 	bl	60001f48 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e70:	4b17      	ldr	r3, [pc, #92]	; (60001ed0 <usb_init+0xd8>)
60001e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
60001e76:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60001e78:	2100      	movs	r1, #0
60001e7a:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e7c:	4c13      	ldr	r4, [pc, #76]	; (60001ecc <usb_init+0xd4>)
60001e7e:	230a      	movs	r3, #10
60001e80:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e84:	4d14      	ldr	r5, [pc, #80]	; (60001ed8 <usb_init+0xe0>)
60001e86:	f44f 7220 	mov.w	r2, #640	; 0x280
60001e8a:	4628      	mov	r0, r5
60001e8c:	f000 f87c 	bl	60001f88 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e90:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
60001e94:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
60001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60001e9a:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e9c:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ea0:	f240 1343 	movw	r3, #323	; 0x143
60001ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60001ea8:	4b0c      	ldr	r3, [pc, #48]	; (60001edc <usb_init+0xe4>)
60001eaa:	4a0d      	ldr	r2, [pc, #52]	; (60001ee0 <usb_init+0xe8>)
60001eac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60001eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ebc:	2301      	movs	r3, #1
60001ebe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ec2:	bd38      	pop	{r3, r4, r5, pc}
60001ec4:	400d8000 	.word	0x400d8000
60001ec8:	400fc000 	.word	0x400fc000
60001ecc:	402e0000 	.word	0x402e0000
60001ed0:	400d9000 	.word	0x400d9000
60001ed4:	001e1c00 	.word	0x001e1c00
60001ed8:	20000000 	.word	0x20000000
60001edc:	20003c00 	.word	0x20003c00
60001ee0:	0000e3a5 	.word	0x0000e3a5

60001ee4 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ee4:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ee6:	4b0f      	ldr	r3, [pc, #60]	; (60001f24 <_reboot_Teensyduino_+0x40>)
60001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001eea:	f013 0f02 	tst.w	r3, #2
60001eee:	d100      	bne.n	60001ef2 <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60001ef0:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ef2:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ef4:	4b0c      	ldr	r3, [pc, #48]	; (60001f28 <_reboot_Teensyduino_+0x44>)
60001ef6:	2200      	movs	r2, #0
60001ef8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001efc:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60001f00:	4a0a      	ldr	r2, [pc, #40]	; (60001f2c <_reboot_Teensyduino_+0x48>)
60001f02:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f04:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
60001f08:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
60001f0c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f0e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001f12:	4807      	ldr	r0, [pc, #28]	; (60001f30 <_reboot_Teensyduino_+0x4c>)
60001f14:	4b07      	ldr	r3, [pc, #28]	; (60001f34 <_reboot_Teensyduino_+0x50>)
60001f16:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
60001f1c:	69db      	ldr	r3, [r3, #28]
60001f1e:	689b      	ldr	r3, [r3, #8]
60001f20:	4798      	blx	r3
60001f22:	e7e6      	b.n	60001ef2 <_reboot_Teensyduino_+0xe>
60001f24:	401f4400 	.word	0x401f4400
60001f28:	402e0000 	.word	0x402e0000
60001f2c:	00200003 	.word	0x00200003
60001f30:	20208000 	.word	0x20208000
60001f34:	eb120000 	.word	0xeb120000

60001f38 <_init>:
60001f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f3a:	bf00      	nop
60001f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f3e:	bc08      	pop	{r3}
60001f40:	469e      	mov	lr, r3
60001f42:	4770      	bx	lr
60001f44:	0000      	movs	r0, r0
	...

60001f48 <__delay_veneer>:
60001f48:	f85f f000 	ldr.w	pc, [pc]	; 60001f4c <__delay_veneer+0x4>
60001f4c:	0000d349 	.word	0x0000d349

60001f50 <____libc_init_array_veneer>:
60001f50:	f85f f000 	ldr.w	pc, [pc]	; 60001f54 <____libc_init_array_veneer+0x4>
60001f54:	000116c1 	.word	0x000116c1

60001f58 <__main_veneer>:
60001f58:	f85f f000 	ldr.w	pc, [pc]	; 60001f5c <__main_veneer+0x4>
60001f5c:	0000d461 	.word	0x0000d461

60001f60 <__sm_set_pool_veneer>:
60001f60:	f85f f000 	ldr.w	pc, [pc]	; 60001f64 <__sm_set_pool_veneer+0x4>
60001f64:	0000f2ad 	.word	0x0000f2ad

60001f68 <__pwm_init_veneer>:
60001f68:	f85f f000 	ldr.w	pc, [pc]	; 60001f6c <__pwm_init_veneer+0x4>
60001f6c:	0000de21 	.word	0x0000de21

60001f70 <___ZN7TwoWire8setClockEm_veneer>:
60001f70:	f85f f000 	ldr.w	pc, [pc]	; 60001f74 <___ZN7TwoWire8setClockEm_veneer+0x4>
60001f74:	00004979 	.word	0x00004979

60001f78 <__set_arm_clock_veneer>:
60001f78:	f85f f000 	ldr.w	pc, [pc]	; 60001f7c <__set_arm_clock_veneer+0x4>
60001f7c:	0000d059 	.word	0x0000d059

60001f80 <__usb_init_serialnumber_veneer>:
60001f80:	f85f f000 	ldr.w	pc, [pc]	; 60001f84 <__usb_init_serialnumber_veneer+0x4>
60001f84:	0000e96d 	.word	0x0000e96d

60001f88 <__memset_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <__memset_veneer+0x4>
60001f8c:	00011605 	.word	0x00011605

60001f90 <__frame_dummy_init_array_entry>:
60001f90:	00000045 00003cfd 00004a19 00004f5d     E....<...J..]O..
60001fa0:	0000576d 0000c7ad                       mW......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
#endif
}

uint8_t PWMServo::attached()
{
	if (pin >= NUM_DIGITAL_PINS) return 0;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	return (attachedpins[pin >> 5] & (1 << (pin & 31))) ? 1 : 0;
}
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	volatile uint16_t *xbar = &XBARA1_SEL0 + (output / 2);
	uint16_t val = *xbar;
	if (!(output & 1)) {
		val = (val & 0xFF00) | input;
	} else {
		val = (val & 0x00FF) | (input << 8);
      36:	4770      	bx	lr
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	20003ec0 	.word	0x20003ec0
      3c:	20003ec0 	.word	0x20003ec0
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
    }
  }
  return readStop();
 fail:
  return false;
}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	f3af 8000 	nop.w
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
  return false;
      60:	20005120 	.word	0x20005120
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( target == nullptr) return true;
      64:	6001c400 	.word	0x6001c400

00000068 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <Print::flush()>:
	virtual void flush()				{ }
      6c:	4770      	bx	lr

0000006e <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
      6e:	6900      	ldr	r0, [r0, #16]
      70:	b120      	cbz	r0, 7c <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
      72:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
      74:	6803      	ldr	r3, [r0, #0]
      76:	68db      	ldr	r3, [r3, #12]
      78:	4798      	blx	r3
	}
      7a:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
      7c:	2000      	movs	r0, #0
	}
      7e:	4770      	bx	lr

00000080 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
      80:	6900      	ldr	r0, [r0, #16]
      82:	b120      	cbz	r0, 8e <File::available()+0xe>
	int available() {
      84:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
      86:	6803      	ldr	r3, [r0, #0]
      88:	691b      	ldr	r3, [r3, #16]
      8a:	4798      	blx	r3
	}
      8c:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
      8e:	2000      	movs	r0, #0
	}
      90:	4770      	bx	lr

00000092 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
      92:	6900      	ldr	r0, [r0, #16]
      94:	b120      	cbz	r0, a0 <File::peek()+0xe>
	int peek() {
      96:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
      98:	6803      	ldr	r3, [r0, #0]
      9a:	695b      	ldr	r3, [r3, #20]
      9c:	4798      	blx	r3
	}
      9e:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
      a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      a4:	4770      	bx	lr

000000a6 <File::flush()>:
	void flush() {
		if (f) f->flush();
      a6:	6900      	ldr	r0, [r0, #16]
      a8:	b120      	cbz	r0, b4 <File::flush()+0xe>
	void flush() {
      aa:	b508      	push	{r3, lr}
		if (f) f->flush();
      ac:	6803      	ldr	r3, [r0, #0]
      ae:	699b      	ldr	r3, [r3, #24]
      b0:	4798      	blx	r3
	}
      b2:	bd08      	pop	{r3, pc}
      b4:	4770      	bx	lr

000000b6 <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
      b6:	6900      	ldr	r0, [r0, #16]
      b8:	b168      	cbz	r0, d6 <File::read()+0x20>
	int read() {
      ba:	b500      	push	{lr}
      bc:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
      be:	6803      	ldr	r3, [r0, #0]
      c0:	689b      	ldr	r3, [r3, #8]
      c2:	2201      	movs	r2, #1
      c4:	f10d 0107 	add.w	r1, sp, #7
      c8:	4798      	blx	r3
      ca:	b138      	cbz	r0, dc <File::read()+0x26>
		return b;
      cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
      d0:	b003      	add	sp, #12
      d2:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
      d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
      da:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
      dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
      e0:	e7f6      	b.n	d0 <File::read()+0x1a>

000000e2 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
      e2:	b500      	push	{lr}
      e4:	b083      	sub	sp, #12
      e6:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
      ea:	6900      	ldr	r0, [r0, #16]
      ec:	b140      	cbz	r0, 100 <File::write(unsigned char)+0x1e>
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	68db      	ldr	r3, [r3, #12]
      f2:	2201      	movs	r2, #1
      f4:	f10d 0107 	add.w	r1, sp, #7
      f8:	4798      	blx	r3
	}
      fa:	b003      	add	sp, #12
      fc:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     100:	2000      	movs	r0, #0
     102:	e7fa      	b.n	fa <File::write(unsigned char)+0x18>

00000104 <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     104:	6d03      	ldr	r3, [r0, #80]	; 0x50
     106:	b113      	cbz	r3, 10e <SDFile::position()+0xa>
     108:	6958      	ldr	r0, [r3, #20]
     10a:	2100      	movs	r1, #0
     10c:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     10e:	6d43      	ldr	r3, [r0, #84]	; 0x54
     110:	b113      	cbz	r3, 118 <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     112:	6818      	ldr	r0, [r3, #0]
     114:	6859      	ldr	r1, [r3, #4]
     116:	4770      	bx	lr
     118:	2000      	movs	r0, #0
     11a:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     11c:	4770      	bx	lr

0000011e <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     11e:	6d03      	ldr	r3, [r0, #80]	; 0x50
     120:	b113      	cbz	r3, 128 <SDFile::size()+0xa>
     122:	69d8      	ldr	r0, [r3, #28]
     124:	2100      	movs	r1, #0
     126:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     128:	6d43      	ldr	r3, [r0, #84]	; 0x54
     12a:	b113      	cbz	r3, 132 <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     12c:	6918      	ldr	r0, [r3, #16]
     12e:	6959      	ldr	r1, [r3, #20]
     130:	4770      	bx	lr
     132:	2000      	movs	r0, #0
     134:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     136:	4770      	bx	lr

00000138 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     138:	6d03      	ldr	r3, [r0, #80]	; 0x50
     13a:	b10b      	cbz	r3, 140 <SDFile::isOpen()+0x8>
     13c:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     13e:	4770      	bx	lr
     140:	6d40      	ldr	r0, [r0, #84]	; 0x54
     142:	3800      	subs	r0, #0
     144:	bf18      	it	ne
     146:	2001      	movne	r0, #1
     148:	4770      	bx	lr

0000014a <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     14a:	6c83      	ldr	r3, [r0, #72]	; 0x48
     14c:	b153      	cbz	r3, 164 <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     14e:	781a      	ldrb	r2, [r3, #0]
     150:	f012 0f08 	tst.w	r2, #8
     154:	d020      	beq.n	198 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     156:	69d8      	ldr	r0, [r3, #28]
     158:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     15a:	1ac0      	subs	r0, r0, r3
     15c:	bf48      	it	mi
     15e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     162:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     164:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     166:	b1cb      	cbz	r3, 19c <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     168:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     16c:	f012 0f08 	tst.w	r2, #8
     170:	d016      	beq.n	1a0 <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     172:	b410      	push	{r4}
     174:	691a      	ldr	r2, [r3, #16]
     176:	6959      	ldr	r1, [r3, #20]
     178:	6818      	ldr	r0, [r3, #0]
     17a:	685c      	ldr	r4, [r3, #4]
     17c:	1a13      	subs	r3, r2, r0
     17e:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     182:	4618      	mov	r0, r3
     184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     188:	f172 0200 	sbcs.w	r2, r2, #0
     18c:	d301      	bcc.n	192 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     18e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    return BaseFile::available();
  }
     192:	f85d 4b04 	ldr.w	r4, [sp], #4
     196:	4770      	bx	lr
     198:	2000      	movs	r0, #0
     19a:	4770      	bx	lr
     19c:	2000      	movs	r0, #0
    return BaseFile::available();
     19e:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     1a0:	2300      	movs	r3, #0
     1a2:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     1a4:	4618      	mov	r0, r3
     1a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     1aa:	f172 0200 	sbcs.w	r2, r2, #0
     1ae:	bf28      	it	cs
     1b0:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     1b4:	4770      	bx	lr

000001b6 <SDFile::setModifyTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
			tm.mday, tm.hour, tm.min, tm.sec);
	}
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     1b6:	798a      	ldrb	r2, [r1, #6]
     1b8:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     1bc:	f013 0f80 	tst.w	r3, #128	; 0x80
     1c0:	d120      	bne.n	204 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     1c2:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c4:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     1c6:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     1ca:	794b      	ldrb	r3, [r1, #5]
     1cc:	3301      	adds	r3, #1
     1ce:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     1d0:	790d      	ldrb	r5, [r1, #4]
     1d2:	788e      	ldrb	r6, [r1, #2]
     1d4:	784f      	ldrb	r7, [r1, #1]
     1d6:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     1d8:	6d04      	ldr	r4, [r0, #80]	; 0x50
     1da:	b14c      	cbz	r4, 1f0 <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     1dc:	9103      	str	r1, [sp, #12]
     1de:	9702      	str	r7, [sp, #8]
     1e0:	9601      	str	r6, [sp, #4]
     1e2:	9500      	str	r5, [sp, #0]
     1e4:	2104      	movs	r1, #4
     1e6:	4620      	mov	r0, r4
     1e8:	f008 f968 	bl	84bc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     1ec:	b005      	add	sp, #20
     1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     1f0:	6d40      	ldr	r0, [r0, #84]	; 0x54
     1f2:	b148      	cbz	r0, 208 <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     1f4:	9103      	str	r1, [sp, #12]
     1f6:	9702      	str	r7, [sp, #8]
     1f8:	9601      	str	r6, [sp, #4]
     1fa:	9500      	str	r5, [sp, #0]
     1fc:	2104      	movs	r1, #4
     1fe:	f006 fa82 	bl	6706 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     202:	e7f3      	b.n	1ec <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     204:	2000      	movs	r0, #0
	}
     206:	4770      	bx	lr
           m_xFile ?
     208:	2000      	movs	r0, #0
     20a:	e7ef      	b.n	1ec <SDFile::setModifyTime(DateTimeFields const&)+0x36>

0000020c <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     20c:	b510      	push	{r4, lr}
     20e:	b082      	sub	sp, #8
     210:	4603      	mov	r3, r0
     212:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     214:	6d00      	ldr	r0, [r0, #80]	; 0x50
     216:	b310      	cbz	r0, 25e <SDFile::getModifyTime(DateTimeFields&)+0x52>
     218:	aa01      	add	r2, sp, #4
     21a:	f10d 0106 	add.w	r1, sp, #6
     21e:	f007 ff27 	bl	8070 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     222:	b1d0      	cbz	r0, 25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     224:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     228:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     22c:	ea53 0102 	orrs.w	r1, r3, r2
     230:	d01f      	beq.n	272 <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     232:	f002 011f 	and.w	r1, r2, #31
     236:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     238:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     23a:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     23e:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     240:	0ad2      	lsrs	r2, r2, #11
     242:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     244:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     248:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     24a:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     24e:	3a01      	subs	r2, #1
     250:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     252:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     254:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     258:	71a3      	strb	r3, [r4, #6]
	}
     25a:	b002      	add	sp, #8
     25c:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     25e:	6d58      	ldr	r0, [r3, #84]	; 0x54
     260:	b128      	cbz	r0, 26e <SDFile::getModifyTime(DateTimeFields&)+0x62>
     262:	aa01      	add	r2, sp, #4
     264:	f10d 0106 	add.w	r1, sp, #6
     268:	f005 faf6 	bl	5858 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     26c:	e7d9      	b.n	222 <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     26e:	2000      	movs	r0, #0
     270:	e7f3      	b.n	25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     272:	2000      	movs	r0, #0
     274:	e7f1      	b.n	25a <SDFile::getModifyTime(DateTimeFields&)+0x4e>

00000276 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     276:	b510      	push	{r4, lr}
     278:	b082      	sub	sp, #8
     27a:	4603      	mov	r3, r0
     27c:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     27e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     280:	b310      	cbz	r0, 2c8 <SDFile::getCreateTime(DateTimeFields&)+0x52>
     282:	aa01      	add	r2, sp, #4
     284:	f10d 0106 	add.w	r1, sp, #6
     288:	f007 fee2 	bl	8050 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     28c:	b1d0      	cbz	r0, 2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     28e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     292:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     296:	ea53 0102 	orrs.w	r1, r3, r2
     29a:	d01f      	beq.n	2dc <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     29c:	f002 011f 	and.w	r1, r2, #31
     2a0:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     2a2:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     2a4:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     2a8:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     2aa:	0ad2      	lsrs	r2, r2, #11
     2ac:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     2ae:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     2b2:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     2b4:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     2b8:	3a01      	subs	r2, #1
     2ba:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     2bc:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     2be:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     2c2:	71a3      	strb	r3, [r4, #6]
	}
     2c4:	b002      	add	sp, #8
     2c6:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     2c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
     2ca:	b128      	cbz	r0, 2d8 <SDFile::getCreateTime(DateTimeFields&)+0x62>
     2cc:	aa01      	add	r2, sp, #4
     2ce:	f10d 0106 	add.w	r1, sp, #6
     2d2:	f005 faaf 	bl	5834 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     2d6:	e7d9      	b.n	28c <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     2d8:	2000      	movs	r0, #0
     2da:	e7f3      	b.n	2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     2dc:	2000      	movs	r0, #0
     2de:	e7f1      	b.n	2c4 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

000002e0 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     2e0:	b510      	push	{r4, lr}
     2e2:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     2e4:	6d00      	ldr	r0, [r0, #80]	; 0x50
     2e6:	b120      	cbz	r0, 2f2 <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     2e8:	7803      	ldrb	r3, [r0, #0]
     2ea:	f013 0f70 	tst.w	r3, #112	; 0x70
     2ee:	d10e      	bne.n	30e <SDFile::rewindDirectory()+0x2e>
	}
     2f0:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     2f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
     2f4:	2b00      	cmp	r3, #0
     2f6:	d0fb      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
     2f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     2fc:	f013 0f50 	tst.w	r3, #80	; 0x50
     300:	d0f6      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     302:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     304:	2200      	movs	r2, #0
     306:	2300      	movs	r3, #0
     308:	f005 fc01 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
     30c:	e7f0      	b.n	2f0 <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     30e:	2100      	movs	r1, #0
     310:	f007 fc66 	bl	7be0 <FatFile::seekSet(unsigned long)>
     314:	6d60      	ldr	r0, [r4, #84]	; 0x54
     316:	2800      	cmp	r0, #0
     318:	d0ea      	beq.n	2f0 <SDFile::rewindDirectory()+0x10>
     31a:	e7f3      	b.n	304 <SDFile::rewindDirectory()+0x24>

0000031c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     31c:	b508      	push	{r3, lr}
     31e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     320:	6c80      	ldr	r0, [r0, #72]	; 0x48
     322:	b110      	cbz	r0, 32a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     324:	f007 fc26 	bl	7b74 <FatFile::peek()>
  }
     328:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     32a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     32c:	b110      	cbz	r0, 334 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     32e:	f005 fbd8 	bl	5ae2 <ExFatFile::peek()>
     332:	e7f9      	b.n	328 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     338:	e7f6      	b.n	328 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

0000033a <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     33a:	b500      	push	{lr}
     33c:	b083      	sub	sp, #12
     33e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     340:	6c80      	ldr	r0, [r0, #72]	; 0x48
     342:	b158      	cbz	r0, 35c <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     344:	2201      	movs	r2, #1
     346:	f10d 0107 	add.w	r1, sp, #7
     34a:	f007 fb3e 	bl	79ca <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     34e:	2801      	cmp	r0, #1
     350:	d10f      	bne.n	372 <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     352:	f89d 0007 	ldrb.w	r0, [sp, #7]
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    return BaseFile::read();
  }
     356:	b003      	add	sp, #12
     358:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     35c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     35e:	b128      	cbz	r0, 36c <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     360:	2201      	movs	r2, #1
     362:	f10d 0107 	add.w	r1, sp, #7
     366:	f005 faf1 	bl	594c <ExFatFile::read(void*, unsigned int)>
     36a:	e7f0      	b.n	34e <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     370:	e7f1      	b.n	356 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     376:	e7ee      	b.n	356 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000378 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     378:	b508      	push	{r3, lr}
     37a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     37c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     37e:	b110      	cbz	r0, 386 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     380:	f007 fd7c 	bl	7e7c <FatFile::sync()>
  }
     384:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     386:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     388:	2800      	cmp	r0, #0
     38a:	d0fb      	beq.n	384 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     38c:	f006 f834 	bl	63f8 <ExFatFile::sync()>
     390:	e7f8      	b.n	384 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

00000392 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     392:	b500      	push	{lr}
     394:	b083      	sub	sp, #12
     396:	4603      	mov	r3, r0
     398:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     39c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     39e:	b138      	cbz	r0, 3b0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     3a0:	2201      	movs	r2, #1
     3a2:	f10d 0107 	add.w	r1, sp, #7
     3a6:	f008 f941 	bl	862c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     3aa:	b003      	add	sp, #12
     3ac:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     3b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     3b2:	b128      	cbz	r0, 3c0 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     3b4:	2201      	movs	r2, #1
     3b6:	f10d 0107 	add.w	r1, sp, #7
     3ba:	f006 fad1 	bl	6960 <ExFatFile::write(void const*, unsigned int)>
     3be:	e7f4      	b.n	3aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     3c0:	2000      	movs	r0, #0
    return BaseFile::write(b);
     3c2:	e7f2      	b.n	3aa <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>

000003c4 <SDFile::name()>:
	virtual const char * name() {
     3c4:	b510      	push	{r4, lr}
     3c6:	4604      	mov	r4, r0
		if (!filename) {
     3c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
     3ca:	b10b      	cbz	r3, 3d0 <SDFile::name()+0xc>
	}
     3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
     3ce:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     3d0:	f44f 7080 	mov.w	r0, #256	; 0x100
     3d4:	f010 fd8a 	bl	10eec <malloc>
     3d8:	4601      	mov	r1, r0
     3da:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     3dc:	b180      	cbz	r0, 400 <SDFile::name()+0x3c>
    *name = 0;
     3de:	2300      	movs	r3, #0
     3e0:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     3e2:	6d20      	ldr	r0, [r4, #80]	; 0x50
     3e4:	b120      	cbz	r0, 3f0 <SDFile::name()+0x2c>
     3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
     3ea:	f009 fa35 	bl	9858 <FatFile::getName(char*, unsigned int)>
     3ee:	e7ed      	b.n	3cc <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     3f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
     3f2:	2800      	cmp	r0, #0
     3f4:	d0ea      	beq.n	3cc <SDFile::name()+0x8>
    return getName8(name, size);
     3f6:	f44f 7280 	mov.w	r2, #256	; 0x100
     3fa:	f006 ff51 	bl	72a0 <ExFatFile::getName8(char*, unsigned int)>
     3fe:	e7e5      	b.n	3cc <SDFile::name()+0x8>
				filename = &zeroterm;
     400:	4b01      	ldr	r3, [pc, #4]	; (408 <SDFile::name()+0x44>)
     402:	65a3      	str	r3, [r4, #88]	; 0x58
     404:	e7e2      	b.n	3cc <SDFile::name()+0x8>
     406:	bf00      	nop
     408:	200053c7 	.word	0x200053c7

0000040c <SDFile::close()>:
	virtual void close() {
     40c:	b510      	push	{r4, lr}
     40e:	4604      	mov	r4, r0
		if (filename) {
     410:	6d80      	ldr	r0, [r0, #88]	; 0x58
     412:	b118      	cbz	r0, 41c <SDFile::close()+0x10>
			free(filename);
     414:	f010 fd72 	bl	10efc <free>
			filename = nullptr;
     418:	2300      	movs	r3, #0
     41a:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     41c:	6d23      	ldr	r3, [r4, #80]	; 0x50
     41e:	b123      	cbz	r3, 42a <SDFile::close()+0x1e>
			sdfatfile.close();
     420:	f104 0018 	add.w	r0, r4, #24
     424:	f009 fd32 	bl	9e8c <FsBaseFile::close()>
	}
     428:	bd10      	pop	{r4, pc}
     42a:	6d63      	ldr	r3, [r4, #84]	; 0x54
     42c:	2b00      	cmp	r3, #0
     42e:	d1f7      	bne.n	420 <SDFile::close()+0x14>
     430:	e7fa      	b.n	428 <SDFile::close()+0x1c>

00000432 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     432:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     434:	6d04      	ldr	r4, [r0, #80]	; 0x50
     436:	b194      	cbz	r4, 45e <SDFile::truncate(unsigned long long)+0x2c>
     438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     43c:	4291      	cmp	r1, r2
     43e:	f04f 0100 	mov.w	r1, #0
     442:	4199      	sbcs	r1, r3
     444:	d201      	bcs.n	44a <SDFile::truncate(unsigned long long)+0x18>
     446:	2000      	movs	r0, #0
	}
     448:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     44a:	4611      	mov	r1, r2
     44c:	4620      	mov	r0, r4
     44e:	f007 fbc7 	bl	7be0 <FatFile::seekSet(unsigned long)>
     452:	2800      	cmp	r0, #0
     454:	d0f8      	beq.n	448 <SDFile::truncate(unsigned long long)+0x16>
     456:	4620      	mov	r0, r4
     458:	f008 f8ae 	bl	85b8 <FatFile::truncate()>
     45c:	e7f4      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     45e:	6d44      	ldr	r4, [r0, #84]	; 0x54
     460:	b144      	cbz	r4, 474 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     462:	4620      	mov	r0, r4
     464:	f005 fb53 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
     468:	2800      	cmp	r0, #0
     46a:	d0ed      	beq.n	448 <SDFile::truncate(unsigned long long)+0x16>
     46c:	4620      	mov	r0, r4
     46e:	f006 fa04 	bl	687a <ExFatFile::truncate()>
     472:	e7e9      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>
     474:	2000      	movs	r0, #0
     476:	e7e7      	b.n	448 <SDFile::truncate(unsigned long long)+0x16>

00000478 <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	b094      	sub	sp, #80	; 0x50
     47c:	4605      	mov	r5, r0
	constexpr Print() : write_error(0) {}
     47e:	2200      	movs	r2, #0
     480:	9201      	str	r2, [sp, #4]
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     486:	9302      	str	r3, [sp, #8]
     488:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     48c:	9212      	str	r2, [sp, #72]	; 0x48
     48e:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     490:	4b1f      	ldr	r3, [pc, #124]	; (510 <SDFile::openNextFile(unsigned char)+0x98>)
     492:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     494:	3118      	adds	r1, #24
     496:	a804      	add	r0, sp, #16
     498:	f009 fd46 	bl	9f28 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     49c:	9b12      	ldr	r3, [sp, #72]	; 0x48
     49e:	2b00      	cmp	r3, #0
     4a0:	d02a      	beq.n	4f8 <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     4a2:	205c      	movs	r0, #92	; 0x5c
     4a4:	f00d f87e 	bl	d5a4 <operator new(unsigned int)>
     4a8:	4604      	mov	r4, r0
class FileImpl {
     4aa:	2600      	movs	r6, #0
     4ac:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     4ae:	4b19      	ldr	r3, [pc, #100]	; (514 <SDFile::openNextFile(unsigned char)+0x9c>)
     4b0:	6003      	str	r3, [r0, #0]
class Print
     4b2:	9b01      	ldr	r3, [sp, #4]
     4b4:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     4b6:	4b18      	ldr	r3, [pc, #96]	; (518 <SDFile::openNextFile(unsigned char)+0xa0>)
     4b8:	6083      	str	r3, [r0, #8]
     4ba:	9b02      	ldr	r3, [sp, #8]
     4bc:	6103      	str	r3, [r0, #16]
     4be:	f89d 300c 	ldrb.w	r3, [sp, #12]
     4c2:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     4c4:	a904      	add	r1, sp, #16
     4c6:	3018      	adds	r0, #24
     4c8:	f009 fc9f 	bl	9e0a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     4cc:	4b10      	ldr	r3, [pc, #64]	; (510 <SDFile::openNextFile(unsigned char)+0x98>)
     4ce:	60a3      	str	r3, [r4, #8]
     4d0:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     4d2:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     4d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     4d8:	60ab      	str	r3, [r5, #8]
     4da:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     4dc:	4b0f      	ldr	r3, [pc, #60]	; (51c <SDFile::openNextFile(unsigned char)+0xa4>)
     4de:	602b      	str	r3, [r5, #0]
		f = file;
     4e0:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     4e2:	6863      	ldr	r3, [r4, #4]
     4e4:	3301      	adds	r3, #1
     4e6:	6063      	str	r3, [r4, #4]
     4e8:	4b0d      	ldr	r3, [pc, #52]	; (520 <SDFile::openNextFile(unsigned char)+0xa8>)
     4ea:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     4ec:	a804      	add	r0, sp, #16
     4ee:	f009 fccd 	bl	9e8c <FsBaseFile::close()>
	}
     4f2:	4628      	mov	r0, r5
     4f4:	b014      	add	sp, #80	; 0x50
     4f6:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     4f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     4fa:	2b00      	cmp	r3, #0
     4fc:	d1d1      	bne.n	4a2 <SDFile::openNextFile(unsigned char)+0x2a>
     4fe:	606b      	str	r3, [r5, #4]
     500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     504:	60aa      	str	r2, [r5, #8]
     506:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     508:	4a04      	ldr	r2, [pc, #16]	; (51c <SDFile::openNextFile(unsigned char)+0xa4>)
     50a:	602a      	str	r2, [r5, #0]
     50c:	612b      	str	r3, [r5, #16]
     50e:	e7eb      	b.n	4e8 <SDFile::openNextFile(unsigned char)+0x70>
     510:	200024cc 	.word	0x200024cc
     514:	200024f0 	.word	0x200024f0
     518:	2000254c 	.word	0x2000254c
     51c:	200024a0 	.word	0x200024a0
     520:	200023c0 	.word	0x200023c0

00000524 <SDFile::peek()>:
	virtual int peek() {
     524:	b508      	push	{r3, lr}
     526:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     528:	6d00      	ldr	r0, [r0, #80]	; 0x50
     52a:	b110      	cbz	r0, 532 <SDFile::peek()+0xe>
     52c:	f007 fb22 	bl	7b74 <FatFile::peek()>
	}
     530:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     532:	6d58      	ldr	r0, [r3, #84]	; 0x54
     534:	b110      	cbz	r0, 53c <SDFile::peek()+0x18>
     536:	f005 fad4 	bl	5ae2 <ExFatFile::peek()>
     53a:	e7f9      	b.n	530 <SDFile::peek()+0xc>
     53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     540:	e7f6      	b.n	530 <SDFile::peek()+0xc>

00000542 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     542:	6d03      	ldr	r3, [r0, #80]	; 0x50
     544:	b133      	cbz	r3, 554 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     546:	781b      	ldrb	r3, [r3, #0]
     548:	f013 0f70 	tst.w	r3, #112	; 0x70
     54c:	bf14      	ite	ne
     54e:	2001      	movne	r0, #1
     550:	2000      	moveq	r0, #0
     552:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     554:	6d43      	ldr	r3, [r0, #84]	; 0x54
     556:	b13b      	cbz	r3, 568 <SDFile::isDirectory()+0x26>
     558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     55c:	f013 0f50 	tst.w	r3, #80	; 0x50
     560:	bf14      	ite	ne
     562:	2001      	movne	r0, #1
     564:	2000      	moveq	r0, #0
     566:	4770      	bx	lr
     568:	2000      	movs	r0, #0
	}
     56a:	4770      	bx	lr

0000056c <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     56c:	b508      	push	{r3, lr}
     56e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     570:	6d00      	ldr	r0, [r0, #80]	; 0x50
     572:	b110      	cbz	r0, 57a <SDFile::read(void*, unsigned int)+0xe>
     574:	f007 fa29 	bl	79ca <FatFile::read(void*, unsigned int)>
	}
     578:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     57a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     57c:	b110      	cbz	r0, 584 <SDFile::read(void*, unsigned int)+0x18>
     57e:	f005 f9e5 	bl	594c <ExFatFile::read(void*, unsigned int)>
     582:	e7f9      	b.n	578 <SDFile::read(void*, unsigned int)+0xc>
     584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     588:	e7f6      	b.n	578 <SDFile::read(void*, unsigned int)+0xc>

0000058a <SDFile::flush()>:
	virtual void flush() {
     58a:	b508      	push	{r3, lr}
     58c:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     58e:	6d00      	ldr	r0, [r0, #80]	; 0x50
     590:	b110      	cbz	r0, 598 <SDFile::flush()+0xe>
     592:	f007 fc73 	bl	7e7c <FatFile::sync()>
	}
     596:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     598:	6d58      	ldr	r0, [r3, #84]	; 0x54
     59a:	2800      	cmp	r0, #0
     59c:	d0fb      	beq.n	596 <SDFile::flush()+0xc>
     59e:	f005 ff2b 	bl	63f8 <ExFatFile::sync()>
     5a2:	e7f8      	b.n	596 <SDFile::flush()+0xc>

000005a4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     5a4:	b510      	push	{r4, lr}
     5a6:	4604      	mov	r4, r0
     5a8:	4b0c      	ldr	r3, [pc, #48]	; (5dc <SDFile::~SDFile()+0x38>)
     5aa:	6003      	str	r3, [r0, #0]
		if (filename) {
     5ac:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ae:	b118      	cbz	r0, 5b8 <SDFile::~SDFile()+0x14>
			free(filename);
     5b0:	f010 fca4 	bl	10efc <free>
			filename = nullptr;
     5b4:	2300      	movs	r3, #0
     5b6:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     5b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     5ba:	b15b      	cbz	r3, 5d4 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     5bc:	f104 0018 	add.w	r0, r4, #24
     5c0:	f009 fc64 	bl	9e8c <FsBaseFile::close()>
     5c4:	4b06      	ldr	r3, [pc, #24]	; (5e0 <SDFile::~SDFile()+0x3c>)
     5c6:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     5c8:	f104 0018 	add.w	r0, r4, #24
     5cc:	f009 fc5e 	bl	9e8c <FsBaseFile::close()>
	}
     5d0:	4620      	mov	r0, r4
     5d2:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     5d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     5d6:	2b00      	cmp	r3, #0
     5d8:	d1f0      	bne.n	5bc <SDFile::~SDFile()+0x18>
     5da:	e7f3      	b.n	5c4 <SDFile::~SDFile()+0x20>
     5dc:	200024f0 	.word	0x200024f0
     5e0:	200023c0 	.word	0x200023c0

000005e4 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     5e4:	b510      	push	{r4, lr}
     5e6:	4604      	mov	r4, r0
     5e8:	4b0e      	ldr	r3, [pc, #56]	; (624 <SDFile::~SDFile()+0x40>)
     5ea:	6003      	str	r3, [r0, #0]
		if (filename) {
     5ec:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ee:	b118      	cbz	r0, 5f8 <SDFile::~SDFile()+0x14>
			free(filename);
     5f0:	f010 fc84 	bl	10efc <free>
			filename = nullptr;
     5f4:	2300      	movs	r3, #0
     5f6:	65a3      	str	r3, [r4, #88]	; 0x58
     5f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
     5fa:	b17b      	cbz	r3, 61c <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     5fc:	f104 0018 	add.w	r0, r4, #24
     600:	f009 fc44 	bl	9e8c <FsBaseFile::close()>
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <SDFile::~SDFile()+0x44>)
     606:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     608:	f104 0018 	add.w	r0, r4, #24
     60c:	f009 fc3e 	bl	9e8c <FsBaseFile::close()>
	}
     610:	215c      	movs	r1, #92	; 0x5c
     612:	4620      	mov	r0, r4
     614:	f00c ffca 	bl	d5ac <operator delete(void*, unsigned int)>
     618:	4620      	mov	r0, r4
     61a:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     61c:	6d63      	ldr	r3, [r4, #84]	; 0x54
     61e:	2b00      	cmp	r3, #0
     620:	d1ec      	bne.n	5fc <SDFile::~SDFile()+0x18>
     622:	e7ef      	b.n	604 <SDFile::~SDFile()+0x20>
     624:	200024f0 	.word	0x200024f0
     628:	200023c0 	.word	0x200023c0

0000062c <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     62c:	b508      	push	{r3, lr}
     62e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     630:	6d00      	ldr	r0, [r0, #80]	; 0x50
     632:	b110      	cbz	r0, 63a <SDFile::write(void const*, unsigned int)+0xe>
     634:	f007 fffa 	bl	862c <FatFile::write(void const*, unsigned int)>
	}
     638:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     63a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     63c:	b110      	cbz	r0, 644 <SDFile::write(void const*, unsigned int)+0x18>
     63e:	f006 f98f 	bl	6960 <ExFatFile::write(void const*, unsigned int)>
     642:	e7f9      	b.n	638 <SDFile::write(void const*, unsigned int)+0xc>
     644:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     646:	e7f7      	b.n	638 <SDFile::write(void const*, unsigned int)+0xc>

00000648 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     648:	b508      	push	{r3, lr}
     64a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     64c:	6c80      	ldr	r0, [r0, #72]	; 0x48
     64e:	b110      	cbz	r0, 656 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     650:	f007 ffec 	bl	862c <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     654:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     656:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     658:	b110      	cbz	r0, 660 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     65a:	f006 f981 	bl	6960 <ExFatFile::write(void const*, unsigned int)>
     65e:	e7f9      	b.n	654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     660:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     662:	e7f7      	b.n	654 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000664 <SDFile::setCreateTime(DateTimeFields const&)>:
		if (tm.year < 80 || tm.year > 207) return false;
     664:	798a      	ldrb	r2, [r1, #6]
     666:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     66a:	f013 0f80 	tst.w	r3, #128	; 0x80
     66e:	d120      	bne.n	6b2 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     670:	b5f0      	push	{r4, r5, r6, r7, lr}
     672:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     674:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     678:	794b      	ldrb	r3, [r1, #5]
     67a:	3301      	adds	r3, #1
     67c:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     67e:	790d      	ldrb	r5, [r1, #4]
     680:	788e      	ldrb	r6, [r1, #2]
     682:	784f      	ldrb	r7, [r1, #1]
     684:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     686:	6d04      	ldr	r4, [r0, #80]	; 0x50
     688:	b14c      	cbz	r4, 69e <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     68a:	9103      	str	r1, [sp, #12]
     68c:	9702      	str	r7, [sp, #8]
     68e:	9601      	str	r6, [sp, #4]
     690:	9500      	str	r5, [sp, #0]
     692:	2102      	movs	r1, #2
     694:	4620      	mov	r0, r4
     696:	f007 ff11 	bl	84bc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     69a:	b005      	add	sp, #20
     69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     69e:	6d40      	ldr	r0, [r0, #84]	; 0x54
     6a0:	b148      	cbz	r0, 6b6 <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     6a2:	9103      	str	r1, [sp, #12]
     6a4:	9702      	str	r7, [sp, #8]
     6a6:	9601      	str	r6, [sp, #4]
     6a8:	9500      	str	r5, [sp, #0]
     6aa:	2102      	movs	r1, #2
     6ac:	f006 f82b 	bl	6706 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     6b0:	e7f3      	b.n	69a <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     6b2:	2000      	movs	r0, #0
	}
     6b4:	4770      	bx	lr
           m_xFile ?
     6b6:	2000      	movs	r0, #0
     6b8:	e7ef      	b.n	69a <SDFile::setCreateTime(DateTimeFields const&)+0x36>

000006ba <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     6ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
     6bc:	b153      	cbz	r3, 6d4 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     6be:	781a      	ldrb	r2, [r3, #0]
     6c0:	f012 0f08 	tst.w	r2, #8
     6c4:	d020      	beq.n	708 <SDFile::available()+0x4e>
     6c6:	69d8      	ldr	r0, [r3, #28]
     6c8:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     6ca:	1ac0      	subs	r0, r0, r3
     6cc:	bf48      	it	mi
     6ce:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     6d2:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     6d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
     6d6:	b1cb      	cbz	r3, 70c <SDFile::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     6d8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     6dc:	f012 0f08 	tst.w	r2, #8
     6e0:	d016      	beq.n	710 <SDFile::available()+0x56>
	virtual int available() {
     6e2:	b410      	push	{r4}
     6e4:	691a      	ldr	r2, [r3, #16]
     6e6:	6959      	ldr	r1, [r3, #20]
     6e8:	6818      	ldr	r0, [r3, #0]
     6ea:	685c      	ldr	r4, [r3, #4]
     6ec:	1a13      	subs	r3, r2, r0
     6ee:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     6f2:	4618      	mov	r0, r3
     6f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     6f8:	f172 0200 	sbcs.w	r2, r2, #0
     6fc:	d301      	bcc.n	702 <SDFile::available()+0x48>
     6fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}
     702:	f85d 4b04 	ldr.w	r4, [sp], #4
     706:	4770      	bx	lr
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr
     70c:	2000      	movs	r0, #0
		return sdfatfile.available();
     70e:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     710:	2300      	movs	r3, #0
     712:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     714:	4618      	mov	r0, r3
     716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     71a:	f172 0200 	sbcs.w	r2, r2, #0
     71e:	bf28      	it	cs
     720:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     724:	4770      	bx	lr

00000726 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     726:	b510      	push	{r4, lr}
     728:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     72a:	b12c      	cbz	r4, 738 <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     72c:	2c01      	cmp	r4, #1
     72e:	d019      	beq.n	764 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     730:	2c02      	cmp	r4, #2
     732:	d034      	beq.n	79e <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     734:	2000      	movs	r0, #0
	}
     736:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     738:	6d04      	ldr	r4, [r0, #80]	; 0x50
     73a:	b16c      	cbz	r4, 758 <SDFile::seek(unsigned long long, int)+0x32>
     73c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     740:	4291      	cmp	r1, r2
     742:	f04f 0100 	mov.w	r1, #0
     746:	4199      	sbcs	r1, r3
     748:	d201      	bcs.n	74e <SDFile::seek(unsigned long long, int)+0x28>
     74a:	2000      	movs	r0, #0
     74c:	e7f3      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     74e:	4611      	mov	r1, r2
     750:	4620      	mov	r0, r4
     752:	f007 fa45 	bl	7be0 <FatFile::seekSet(unsigned long)>
     756:	e7ee      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     758:	6d40      	ldr	r0, [r0, #84]	; 0x54
     75a:	2800      	cmp	r0, #0
     75c:	d03c      	beq.n	7d8 <SDFile::seek(unsigned long long, int)+0xb2>
     75e:	f005 f9d6 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
     762:	e7e8      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     764:	6d04      	ldr	r4, [r0, #80]	; 0x50
     766:	b164      	cbz	r4, 782 <SDFile::seek(unsigned long long, int)+0x5c>
     768:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     76a:	1889      	adds	r1, r1, r2
     76c:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     774:	428a      	cmp	r2, r1
     776:	f04f 0200 	mov.w	r2, #0
     77a:	419a      	sbcs	r2, r3
     77c:	d20b      	bcs.n	796 <SDFile::seek(unsigned long long, int)+0x70>
     77e:	2000      	movs	r0, #0
     780:	e7d9      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     782:	6d40      	ldr	r0, [r0, #84]	; 0x54
     784:	b350      	cbz	r0, 7dc <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     786:	6801      	ldr	r1, [r0, #0]
     788:	6844      	ldr	r4, [r0, #4]
     78a:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     78c:	eb43 0304 	adc.w	r3, r3, r4
     790:	f005 f9bd 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
     794:	e7cf      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     796:	4620      	mov	r0, r4
     798:	f007 fa22 	bl	7be0 <FatFile::seekSet(unsigned long)>
     79c:	e7cb      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     79e:	6d04      	ldr	r4, [r0, #80]	; 0x50
     7a0:	b164      	cbz	r4, 7bc <SDFile::seek(unsigned long long, int)+0x96>
     7a2:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     7a4:	1889      	adds	r1, r1, r2
     7a6:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     7ae:	428a      	cmp	r2, r1
     7b0:	f04f 0200 	mov.w	r2, #0
     7b4:	419a      	sbcs	r2, r3
     7b6:	d20b      	bcs.n	7d0 <SDFile::seek(unsigned long long, int)+0xaa>
     7b8:	2000      	movs	r0, #0
     7ba:	e7bc      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     7bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
     7be:	b178      	cbz	r0, 7e0 <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
     7c0:	6901      	ldr	r1, [r0, #16]
     7c2:	6944      	ldr	r4, [r0, #20]
     7c4:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     7c6:	eb43 0304 	adc.w	r3, r3, r4
     7ca:	f005 f9a0 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
     7ce:	e7b2      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     7d0:	4620      	mov	r0, r4
     7d2:	f007 fa05 	bl	7be0 <FatFile::seekSet(unsigned long)>
     7d6:	e7ae      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     7d8:	2000      	movs	r0, #0
     7da:	e7ac      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     7dc:	2000      	movs	r0, #0
     7de:	e7aa      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>
     7e0:	2000      	movs	r0, #0
     7e2:	e7a8      	b.n	736 <SDFile::seek(unsigned long long, int)+0x10>

000007e4 <File::~File()>:
	virtual ~File() {
     7e4:	b510      	push	{r4, lr}
     7e6:	4604      	mov	r4, r0
     7e8:	4b09      	ldr	r3, [pc, #36]	; (810 <File::~File()+0x2c>)
     7ea:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     7ec:	6903      	ldr	r3, [r0, #16]
     7ee:	b163      	cbz	r3, 80a <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
     7f0:	685a      	ldr	r2, [r3, #4]
     7f2:	3a01      	subs	r2, #1
     7f4:	605a      	str	r2, [r3, #4]
     7f6:	b942      	cbnz	r2, 80a <File::~File()+0x26>
			f->close();
     7f8:	6900      	ldr	r0, [r0, #16]
     7fa:	6803      	ldr	r3, [r0, #0]
     7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     7fe:	4798      	blx	r3
			delete f;
     800:	6920      	ldr	r0, [r4, #16]
     802:	b110      	cbz	r0, 80a <File::~File()+0x26>
     804:	6803      	ldr	r3, [r0, #0]
     806:	685b      	ldr	r3, [r3, #4]
     808:	4798      	blx	r3
	}
     80a:	4620      	mov	r0, r4
     80c:	bd10      	pop	{r4, pc}
     80e:	bf00      	nop
     810:	200024a0 	.word	0x200024a0

00000814 <File::~File()>:
	virtual ~File() {
     814:	b510      	push	{r4, lr}
     816:	4604      	mov	r4, r0
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <File::~File()+0x34>)
     81a:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
     81c:	6903      	ldr	r3, [r0, #16]
     81e:	b163      	cbz	r3, 83a <File::~File()+0x26>
		if (--(f->refcount) == 0) {
     820:	685a      	ldr	r2, [r3, #4]
     822:	3a01      	subs	r2, #1
     824:	605a      	str	r2, [r3, #4]
     826:	b942      	cbnz	r2, 83a <File::~File()+0x26>
			f->close();
     828:	6900      	ldr	r0, [r0, #16]
     82a:	6803      	ldr	r3, [r0, #0]
     82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     82e:	4798      	blx	r3
			delete f;
     830:	6920      	ldr	r0, [r4, #16]
     832:	b110      	cbz	r0, 83a <File::~File()+0x26>
     834:	6803      	ldr	r3, [r0, #0]
     836:	685b      	ldr	r3, [r3, #4]
     838:	4798      	blx	r3
	}
     83a:	2114      	movs	r1, #20
     83c:	4620      	mov	r0, r4
     83e:	f00c feb5 	bl	d5ac <operator delete(void*, unsigned int)>
     842:	4620      	mov	r0, r4
     844:	bd10      	pop	{r4, pc}
     846:	bf00      	nop
     848:	200024a0 	.word	0x200024a0

0000084c <controlMixer()>:
   *roll_passthru, pitch_passthru, yaw_passthru - direct unstabilized command passthrough
   *channel_6_pwm - free auxillary channel, can be used to toggle things with an 'if' statement
   */
   
  //Quad mixing - EXAMPLE
  m1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     84c:	4b21      	ldr	r3, [pc, #132]	; (8d4 <controlMixer()+0x88>)
     84e:	edd3 6a00 	vldr	s13, [r3]
     852:	4b21      	ldr	r3, [pc, #132]	; (8d8 <controlMixer()+0x8c>)
     854:	ed93 6a00 	vldr	s12, [r3]
     858:	ee36 7ac6 	vsub.f32	s14, s13, s12
     85c:	4b1f      	ldr	r3, [pc, #124]	; (8dc <controlMixer()+0x90>)
     85e:	edd3 7a00 	vldr	s15, [r3]
     862:	4b1f      	ldr	r3, [pc, #124]	; (8e0 <controlMixer()+0x94>)
     864:	ed93 5a00 	vldr	s10, [r3]
     868:	ee77 5a27 	vadd.f32	s11, s14, s15
     86c:	ee75 5a85 	vadd.f32	s11, s11, s10
     870:	4b1c      	ldr	r3, [pc, #112]	; (8e4 <controlMixer()+0x98>)
     872:	edc3 5a00 	vstr	s11, [r3]
  m2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     876:	ee37 7a67 	vsub.f32	s14, s14, s15
     87a:	ee37 7a45 	vsub.f32	s14, s14, s10
     87e:	4b1a      	ldr	r3, [pc, #104]	; (8e8 <controlMixer()+0x9c>)
     880:	ed83 7a00 	vstr	s14, [r3]
  m3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     884:	ee76 6a86 	vadd.f32	s13, s13, s12
     888:	ee36 6ae7 	vsub.f32	s12, s13, s15
     88c:	ee36 6a05 	vadd.f32	s12, s12, s10
     890:	4b16      	ldr	r3, [pc, #88]	; (8ec <controlMixer()+0xa0>)
     892:	ed83 6a00 	vstr	s12, [r3]
  m4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     896:	ee77 7aa6 	vadd.f32	s15, s15, s13
     89a:	ee77 7ac5 	vsub.f32	s15, s15, s10
     89e:	4b14      	ldr	r3, [pc, #80]	; (8f0 <controlMixer()+0xa4>)
     8a0:	edc3 7a00 	vstr	s15, [r3]
  m5_command_scaled = 0;
     8a4:	2300      	movs	r3, #0
     8a6:	4a13      	ldr	r2, [pc, #76]	; (8f4 <controlMixer()+0xa8>)
     8a8:	6013      	str	r3, [r2, #0]
  m6_command_scaled = 0;
     8aa:	4a13      	ldr	r2, [pc, #76]	; (8f8 <controlMixer()+0xac>)
     8ac:	6013      	str	r3, [r2, #0]

  //0.5 is centered servo, 0.0 is zero throttle if connecting to ESC for conventional PWM, 1.0 is max throttle
  s1_command_scaled = thro_des - pitch_PID + roll_PID + yaw_PID; //Front Left
     8ae:	4a13      	ldr	r2, [pc, #76]	; (8fc <controlMixer()+0xb0>)
     8b0:	edc2 5a00 	vstr	s11, [r2]
  s2_command_scaled = thro_des - pitch_PID - roll_PID - yaw_PID; //Front Right
     8b4:	4a12      	ldr	r2, [pc, #72]	; (900 <controlMixer()+0xb4>)
     8b6:	ed82 7a00 	vstr	s14, [r2]
  s3_command_scaled = thro_des + pitch_PID - roll_PID + yaw_PID; //Back Right
     8ba:	4a12      	ldr	r2, [pc, #72]	; (904 <controlMixer()+0xb8>)
     8bc:	ed82 6a00 	vstr	s12, [r2]
  s4_command_scaled = thro_des + pitch_PID + roll_PID - yaw_PID; //Back Left
     8c0:	4a11      	ldr	r2, [pc, #68]	; (908 <controlMixer()+0xbc>)
     8c2:	edc2 7a00 	vstr	s15, [r2]
  s5_command_scaled = 0;
     8c6:	4a11      	ldr	r2, [pc, #68]	; (90c <controlMixer()+0xc0>)
     8c8:	6013      	str	r3, [r2, #0]
  s6_command_scaled = 0;
     8ca:	4a11      	ldr	r2, [pc, #68]	; (910 <controlMixer()+0xc4>)
     8cc:	6013      	str	r3, [r2, #0]
  s7_command_scaled = 0;
     8ce:	4a11      	ldr	r2, [pc, #68]	; (914 <controlMixer()+0xc8>)
     8d0:	6013      	str	r3, [r2, #0]
}
     8d2:	4770      	bx	lr
     8d4:	20005390 	.word	0x20005390
     8d8:	20005148 	.word	0x20005148
     8dc:	20005174 	.word	0x20005174
     8e0:	200053ac 	.word	0x200053ac
     8e4:	200050e4 	.word	0x200050e4
     8e8:	200050ec 	.word	0x200050ec
     8ec:	200050f4 	.word	0x200050f4
     8f0:	200050fc 	.word	0x200050fc
     8f4:	20005104 	.word	0x20005104
     8f8:	2000510c 	.word	0x2000510c
     8fc:	200051b4 	.word	0x200051b4
     900:	200051bc 	.word	0x200051bc
     904:	200051c4 	.word	0x200051c4
     908:	200051cc 	.word	0x200051cc
     90c:	200051d4 	.word	0x200051d4
     910:	200051dc 	.word	0x200051dc
     914:	200051e4 	.word	0x200051e4

00000918 <IMUinit()>:

void IMUinit() {
     918:	b510      	push	{r4, lr}
  //DESCRIPTION: Initialize IMU
  /*
   * Don't worry about how this works.
   */
  #if defined USE_MPU6050_I2C
    Wire.begin();
     91a:	4c17      	ldr	r4, [pc, #92]	; (978 <IMUinit()+0x60>)
     91c:	4620      	mov	r0, r4
     91e:	f014 fe7b 	bl	15618 <___ZN7TwoWire5beginEv_veneer>
    Wire.setClock(1000000); //Note this is 2.5 times the spec sheet 400 kHz max...
     922:	4916      	ldr	r1, [pc, #88]	; (97c <IMUinit()+0x64>)
     924:	4620      	mov	r0, r4
     926:	f004 f827 	bl	4978 <TwoWire::setClock(unsigned long)>
    
    mpu6050.initialize();
     92a:	4c15      	ldr	r4, [pc, #84]	; (980 <IMUinit()+0x68>)
     92c:	4620      	mov	r0, r4
     92e:	f003 fb77 	bl	4020 <MPU6050::initialize()>
    
    if (mpu6050.testConnection() == false) {
     932:	4620      	mov	r0, r4
     934:	f003 fb9a 	bl	406c <MPU6050::testConnection()>
     938:	b998      	cbnz	r0, 962 <IMUinit()+0x4a>
							  return write((const uint8_t *)str, strlen(str)); }
     93a:	4c12      	ldr	r4, [pc, #72]	; (984 <IMUinit()+0x6c>)
     93c:	6823      	ldr	r3, [r4, #0]
     93e:	685b      	ldr	r3, [r3, #4]
     940:	2223      	movs	r2, #35	; 0x23
     942:	4911      	ldr	r1, [pc, #68]	; (988 <IMUinit()+0x70>)
     944:	4620      	mov	r0, r4
     946:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     948:	4620      	mov	r0, r4
     94a:	f00b ffa4 	bl	c896 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     94e:	6823      	ldr	r3, [r4, #0]
     950:	685b      	ldr	r3, [r3, #4]
     952:	2229      	movs	r2, #41	; 0x29
     954:	490d      	ldr	r1, [pc, #52]	; (98c <IMUinit()+0x74>)
     956:	4620      	mov	r0, r4
     958:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     95a:	4620      	mov	r0, r4
     95c:	f00b ff9b 	bl	c896 <Print::println()>
      Serial.println("MPU6050 initialization unsuccessful");
      Serial.println("Check MPU6050 wiring or try cycling power");
      while(1) {}
     960:	e7fe      	b.n	960 <IMUinit()+0x48>
    }

    //From the reset state all registers should be 0x00, so we should be at
    //max sample rate with digital low pass filter(s) off.  All we need to
    //do is set the desired fullscale ranges
    mpu6050.setFullScaleGyroRange(GYRO_SCALE);
     962:	4c07      	ldr	r4, [pc, #28]	; (980 <IMUinit()+0x68>)
     964:	2100      	movs	r1, #0
     966:	4620      	mov	r0, r4
     968:	f003 faf8 	bl	3f5c <MPU6050::setFullScaleGyroRange(unsigned char)>
    mpu6050.setFullScaleAccelRange(ACCEL_SCALE);
     96c:	2100      	movs	r1, #0
     96e:	4620      	mov	r0, r4
     970:	f003 fb00 	bl	3f74 <MPU6050::setFullScaleAccelRange(unsigned char)>
    mpu9250.setMagCalX(MagErrorX, MagScaleX);
    mpu9250.setMagCalY(MagErrorY, MagScaleY);
    mpu9250.setMagCalZ(MagErrorZ, MagScaleZ);
    mpu9250.setSrd(0); //sets gyro and accel read to 1khz, magnetometer read to 100hz
  #endif
}
     974:	bd10      	pop	{r4, pc}
     976:	bf00      	nop
     978:	20004784 	.word	0x20004784
     97c:	000f4240 	.word	0x000f4240
     980:	20005110 	.word	0x20005110
     984:	20003354 	.word	0x20003354
     988:	20001d2c 	.word	0x20001d2c
     98c:	20001d50 	.word	0x20001d50

00000990 <getIMUdata()>:

void getIMUdata() {
     990:	b500      	push	{lr}
     992:	b089      	sub	sp, #36	; 0x24
   * the constant errors found in calculate_IMU_error() on startup are subtracted from the accelerometer and gyro readings.
   */
  int16_t AcX,AcY,AcZ,GyX,GyY,GyZ,MgX,MgY,MgZ;

  #if defined USE_MPU6050_I2C
    mpu6050.getMotion6(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ);
     994:	ab05      	add	r3, sp, #20
     996:	9302      	str	r3, [sp, #8]
     998:	f10d 0316 	add.w	r3, sp, #22
     99c:	9301      	str	r3, [sp, #4]
     99e:	ab06      	add	r3, sp, #24
     9a0:	9300      	str	r3, [sp, #0]
     9a2:	f10d 031a 	add.w	r3, sp, #26
     9a6:	aa07      	add	r2, sp, #28
     9a8:	f10d 011e 	add.w	r1, sp, #30
     9ac:	48a2      	ldr	r0, [pc, #648]	; (c38 <getIMUdata()+0x2a8>)
     9ae:	f003 faed 	bl	3f8c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>
    mpu9250.getMotion9(&AcX, &AcY, &AcZ, &GyX, &GyY, &GyZ, &MgX, &MgY, &MgZ);
  #endif

 //Accelerometer
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
  AccY = AcY / ACCEL_SCALE_FACTOR;
     9b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
     9b6:	ee03 3a10 	vmov	s6, r3
     9ba:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
     9be:	ed9f 2b9a 	vldr	d2, [pc, #616]	; c28 <getIMUdata()+0x298>
     9c2:	ee23 3b02 	vmul.f64	d3, d3, d2
     9c6:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  AccX = AccX - AccErrorX;
  AccY = AccY - AccErrorY;
     9ca:	4b9c      	ldr	r3, [pc, #624]	; (c3c <getIMUdata()+0x2ac>)
     9cc:	edd3 7a00 	vldr	s15, [r3]
     9d0:	ee33 3a67 	vsub.f32	s6, s6, s15
  AccZ = AcZ / ACCEL_SCALE_FACTOR;
     9d4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
     9d8:	ee06 3a10 	vmov	s12, r3
     9dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
     9e0:	ee26 6b02 	vmul.f64	d6, d6, d2
     9e4:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  AccZ = AccZ - AccErrorZ;
     9e8:	4b95      	ldr	r3, [pc, #596]	; (c40 <getIMUdata()+0x2b0>)
     9ea:	edd3 7a00 	vldr	s15, [r3]
     9ee:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter accelerometer data
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     9f2:	4b94      	ldr	r3, [pc, #592]	; (c44 <getIMUdata()+0x2b4>)
     9f4:	edd3 6a00 	vldr	s13, [r3]
     9f8:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     9fc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     a00:	ee35 4b44 	vsub.f64	d4, d5, d4
  AccX = AcX / ACCEL_SCALE_FACTOR; //G's
     a04:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
     a08:	ee07 3a10 	vmov	s14, r3
     a0c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a10:	ee27 7b02 	vmul.f64	d7, d7, d2
     a14:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  AccX = AccX - AccErrorX;
     a18:	4b8b      	ldr	r3, [pc, #556]	; (c48 <getIMUdata()+0x2b8>)
     a1a:	edd3 7a00 	vldr	s15, [r3]
     a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
  AccX = (1.0 - B_accel)*AccX_prev + B_accel*AccX;
     a22:	ee27 7a26 	vmul.f32	s14, s14, s13
     a26:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     a2a:	4988      	ldr	r1, [pc, #544]	; (c4c <getIMUdata()+0x2bc>)
     a2c:	ed91 2a00 	vldr	s4, [r1]
     a30:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a34:	ee02 7b04 	vmla.f64	d7, d2, d4
     a38:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     a3c:	4b84      	ldr	r3, [pc, #528]	; (c50 <getIMUdata()+0x2c0>)
     a3e:	ed83 7a00 	vstr	s14, [r3]
  AccY = (1.0 - B_accel)*AccY_prev + B_accel*AccY;
     a42:	4a84      	ldr	r2, [pc, #528]	; (c54 <getIMUdata()+0x2c4>)
     a44:	ed92 2a00 	vldr	s4, [r2]
     a48:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a4c:	ee23 3a26 	vmul.f32	s6, s6, s13
     a50:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     a54:	ee02 3b04 	vmla.f64	d3, d2, d4
     a58:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     a5c:	4b7e      	ldr	r3, [pc, #504]	; (c58 <getIMUdata()+0x2c8>)
     a5e:	ed83 3a00 	vstr	s6, [r3]
  AccZ = (1.0 - B_accel)*AccZ_prev + B_accel*AccZ;
     a62:	4b7e      	ldr	r3, [pc, #504]	; (c5c <getIMUdata()+0x2cc>)
     a64:	ed93 2a00 	vldr	s4, [r3]
     a68:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     a6c:	ee26 6a26 	vmul.f32	s12, s12, s13
     a70:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     a74:	ee02 6b04 	vmla.f64	d6, d2, d4
     a78:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     a7c:	4878      	ldr	r0, [pc, #480]	; (c60 <getIMUdata()+0x2d0>)
     a7e:	ed80 6a00 	vstr	s12, [r0]
  AccX_prev = AccX;
     a82:	ed81 7a00 	vstr	s14, [r1]
  AccY_prev = AccY;
     a86:	ed82 3a00 	vstr	s6, [r2]
  AccZ_prev = AccZ;
     a8a:	ed83 6a00 	vstr	s12, [r3]

  //Gyro
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
  GyroY = GyY / GYRO_SCALE_FACTOR;
     a8e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
     a92:	ee07 3a10 	vmov	s14, r3
     a96:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     a9a:	ed9f 2b65 	vldr	d2, [pc, #404]	; c30 <getIMUdata()+0x2a0>
     a9e:	ee87 3b02 	vdiv.f64	d3, d7, d2
     aa2:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
  //Correct the outputs with the calculated error values
  GyroX = GyroX - GyroErrorX;
  GyroY = GyroY - GyroErrorY;
     aa6:	4b6f      	ldr	r3, [pc, #444]	; (c64 <getIMUdata()+0x2d4>)
     aa8:	edd3 7a00 	vldr	s15, [r3]
     aac:	ee33 3a67 	vsub.f32	s6, s6, s15
  GyroZ = GyZ / GYRO_SCALE_FACTOR;
     ab0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
     ab4:	ee07 3a10 	vmov	s14, r3
     ab8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     abc:	ee87 6b02 	vdiv.f64	d6, d7, d2
     ac0:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  GyroZ = GyroZ - GyroErrorZ;
     ac4:	4b68      	ldr	r3, [pc, #416]	; (c68 <getIMUdata()+0x2d8>)
     ac6:	edd3 7a00 	vldr	s15, [r3]
     aca:	ee36 6a67 	vsub.f32	s12, s12, s15
  //LP filter gyro data
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     ace:	4b67      	ldr	r3, [pc, #412]	; (c6c <getIMUdata()+0x2dc>)
     ad0:	edd3 6a00 	vldr	s13, [r3]
     ad4:	eeb7 4ae6 	vcvt.f64.f32	d4, s13
     ad8:	ee35 4b44 	vsub.f64	d4, d5, d4
  GyroX = GyX / GYRO_SCALE_FACTOR; //deg/sec
     adc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
     ae0:	ee01 3a10 	vmov	s2, r3
     ae4:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
     ae8:	ee81 7b02 	vdiv.f64	d7, d1, d2
     aec:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
  GyroX = GyroX - GyroErrorX;
     af0:	4b5f      	ldr	r3, [pc, #380]	; (c70 <getIMUdata()+0x2e0>)
     af2:	edd3 7a00 	vldr	s15, [r3]
     af6:	ee37 7a67 	vsub.f32	s14, s14, s15
  GyroX = (1.0 - B_gyro)*GyroX_prev + B_gyro*GyroX;
     afa:	ee27 7a26 	vmul.f32	s14, s14, s13
     afe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     b02:	495c      	ldr	r1, [pc, #368]	; (c74 <getIMUdata()+0x2e4>)
     b04:	ed91 2a00 	vldr	s4, [r1]
     b08:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b0c:	ee02 7b04 	vmla.f64	d7, d2, d4
     b10:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     b14:	4b58      	ldr	r3, [pc, #352]	; (c78 <getIMUdata()+0x2e8>)
     b16:	ed83 7a00 	vstr	s14, [r3]
  GyroY = (1.0 - B_gyro)*GyroY_prev + B_gyro*GyroY;
     b1a:	4a58      	ldr	r2, [pc, #352]	; (c7c <getIMUdata()+0x2ec>)
     b1c:	ed92 2a00 	vldr	s4, [r2]
     b20:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b24:	ee23 3a26 	vmul.f32	s6, s6, s13
     b28:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     b2c:	ee02 3b04 	vmla.f64	d3, d2, d4
     b30:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
     b34:	4b52      	ldr	r3, [pc, #328]	; (c80 <getIMUdata()+0x2f0>)
     b36:	ed83 3a00 	vstr	s6, [r3]
  GyroZ = (1.0 - B_gyro)*GyroZ_prev + B_gyro*GyroZ;
     b3a:	4b52      	ldr	r3, [pc, #328]	; (c84 <getIMUdata()+0x2f4>)
     b3c:	ed93 2a00 	vldr	s4, [r3]
     b40:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
     b44:	ee26 6a26 	vmul.f32	s12, s12, s13
     b48:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     b4c:	ee02 6b04 	vmla.f64	d6, d2, d4
     b50:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     b54:	484c      	ldr	r0, [pc, #304]	; (c88 <getIMUdata()+0x2f8>)
     b56:	ed80 6a00 	vstr	s12, [r0]
  GyroX_prev = GyroX;
     b5a:	ed81 7a00 	vstr	s14, [r1]
  GyroY_prev = GyroY;
     b5e:	ed82 3a00 	vstr	s6, [r2]
  GyroZ_prev = GyroZ;
     b62:	ed83 6a00 	vstr	s12, [r3]

  //Magnetometer
  MagX = MgX/6.0; //uT
  MagY = MgY/6.0;
     b66:	ed9f 7a49 	vldr	s14, [pc, #292]	; c8c <getIMUdata()+0x2fc>
  MagZ = MgZ/6.0;
  //Correct the outputs with the calculated error values
  MagX = (MagX - MagErrorX)*MagScaleX;
  MagY = (MagY - MagErrorY)*MagScaleY;
     b6a:	4b49      	ldr	r3, [pc, #292]	; (c90 <getIMUdata()+0x300>)
     b6c:	ed93 6a00 	vldr	s12, [r3]
     b70:	ee37 6a46 	vsub.f32	s12, s14, s12
     b74:	4b47      	ldr	r3, [pc, #284]	; (c94 <getIMUdata()+0x304>)
     b76:	edd3 7a00 	vldr	s15, [r3]
     b7a:	ee26 6a27 	vmul.f32	s12, s12, s15
  MagZ = (MagZ - MagErrorZ)*MagScaleZ;
     b7e:	4b46      	ldr	r3, [pc, #280]	; (c98 <getIMUdata()+0x308>)
     b80:	ed93 4a00 	vldr	s8, [r3]
     b84:	ee37 4a44 	vsub.f32	s8, s14, s8
     b88:	4b44      	ldr	r3, [pc, #272]	; (c9c <getIMUdata()+0x30c>)
     b8a:	edd3 7a00 	vldr	s15, [r3]
     b8e:	ee24 4a27 	vmul.f32	s8, s8, s15
  //LP filter magnetometer data
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     b92:	4b43      	ldr	r3, [pc, #268]	; (ca0 <getIMUdata()+0x310>)
     b94:	edd3 4a00 	vldr	s9, [r3]
     b98:	eeb7 3ae4 	vcvt.f64.f32	d3, s9
     b9c:	ee35 5b43 	vsub.f64	d5, d5, d3
  MagX = (MagX - MagErrorX)*MagScaleX;
     ba0:	4b40      	ldr	r3, [pc, #256]	; (ca4 <getIMUdata()+0x314>)
     ba2:	edd3 7a00 	vldr	s15, [r3]
     ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
     baa:	4b3f      	ldr	r3, [pc, #252]	; (ca8 <getIMUdata()+0x318>)
     bac:	edd3 7a00 	vldr	s15, [r3]
     bb0:	ee27 7a27 	vmul.f32	s14, s14, s15
  MagX = (1.0 - B_mag)*MagX_prev + B_mag*MagX;
     bb4:	ee27 7a24 	vmul.f32	s14, s14, s9
     bb8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     bbc:	493b      	ldr	r1, [pc, #236]	; (cac <getIMUdata()+0x31c>)
     bbe:	ed91 3a00 	vldr	s6, [r1]
     bc2:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bc6:	ee03 7b05 	vmla.f64	d7, d3, d5
     bca:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     bce:	4b38      	ldr	r3, [pc, #224]	; (cb0 <getIMUdata()+0x320>)
     bd0:	ed83 7a00 	vstr	s14, [r3]
  MagY = (1.0 - B_mag)*MagY_prev + B_mag*MagY;
     bd4:	4a37      	ldr	r2, [pc, #220]	; (cb4 <getIMUdata()+0x324>)
     bd6:	ed92 3a00 	vldr	s6, [r2]
     bda:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bde:	ee26 6a24 	vmul.f32	s12, s12, s9
     be2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     be6:	ee03 6b05 	vmla.f64	d6, d3, d5
     bea:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
     bee:	4b32      	ldr	r3, [pc, #200]	; (cb8 <getIMUdata()+0x328>)
     bf0:	ed83 6a00 	vstr	s12, [r3]
  MagZ = (1.0 - B_mag)*MagZ_prev + B_mag*MagZ;
     bf4:	4b31      	ldr	r3, [pc, #196]	; (cbc <getIMUdata()+0x32c>)
     bf6:	ed93 3a00 	vldr	s6, [r3]
     bfa:	eeb7 3ac3 	vcvt.f64.f32	d3, s6
     bfe:	ee24 4a24 	vmul.f32	s8, s8, s9
     c02:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     c06:	ee03 4b05 	vmla.f64	d4, d3, d5
     c0a:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     c0e:	482c      	ldr	r0, [pc, #176]	; (cc0 <getIMUdata()+0x330>)
     c10:	ed80 4a00 	vstr	s8, [r0]
  MagX_prev = MagX;
     c14:	ed81 7a00 	vstr	s14, [r1]
  MagY_prev = MagY;
     c18:	ed82 6a00 	vstr	s12, [r2]
  MagZ_prev = MagZ;
     c1c:	ed83 4a00 	vstr	s8, [r3]
}
     c20:	b009      	add	sp, #36	; 0x24
     c22:	f85d fb04 	ldr.w	pc, [sp], #4
     c26:	bf00      	nop
     c28:	00000000 	.word	0x00000000
     c2c:	3f100000 	.word	0x3f100000
     c30:	00000000 	.word	0x00000000
     c34:	40606000 	.word	0x40606000
     c38:	20005110 	.word	0x20005110
     c3c:	20003304 	.word	0x20003304
     c40:	20003308 	.word	0x20003308
     c44:	2000330c 	.word	0x2000330c
     c48:	20003300 	.word	0x20003300
     c4c:	2000408c 	.word	0x2000408c
     c50:	20004088 	.word	0x20004088
     c54:	20004094 	.word	0x20004094
     c58:	20004090 	.word	0x20004090
     c5c:	2000409c 	.word	0x2000409c
     c60:	20004098 	.word	0x20004098
     c64:	20003328 	.word	0x20003328
     c68:	2000332c 	.word	0x2000332c
     c6c:	20003310 	.word	0x20003310
     c70:	20003324 	.word	0x20003324
     c74:	200040c8 	.word	0x200040c8
     c78:	200040c4 	.word	0x200040c4
     c7c:	200040d0 	.word	0x200040d0
     c80:	200040cc 	.word	0x200040cc
     c84:	200040d8 	.word	0x200040d8
     c88:	200040d4 	.word	0x200040d4
     c8c:	00000000 	.word	0x00000000
     c90:	2000411c 	.word	0x2000411c
     c94:	2000334c 	.word	0x2000334c
     c98:	20004120 	.word	0x20004120
     c9c:	20003350 	.word	0x20003350
     ca0:	20003318 	.word	0x20003318
     ca4:	20004118 	.word	0x20004118
     ca8:	20003348 	.word	0x20003348
     cac:	20004128 	.word	0x20004128
     cb0:	20004124 	.word	0x20004124
     cb4:	20004130 	.word	0x20004130
     cb8:	2000412c 	.word	0x2000412c
     cbc:	20004138 	.word	0x20004138
     cc0:	20004134 	.word	0x20004134
     cc4:	00000000 	.word	0x00000000

00000cc8 <setDesStateSerial(int)>:
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
}

void setDesStateSerial(int controlledAxis) {
     cc8:	b538      	push	{r3, r4, r5, lr}
     cca:	ed2d 8b02 	vpush	{d8}
     cce:	4604      	mov	r4, r0
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
     cd0:	f00e f882 	bl	edd8 <usb_serial_available>
			===     					====		=====
			controlledAxis 		int 		The axis about which the user's serial inputs set the desired angle.
																1: roll
																2: pitch
	*/
	if (Serial.available()) {
     cd4:	bb50      	cbnz	r0, d2c <setDesStateSerial(int)+0x64>
		}
	}
	
	float desiredAngle = 0;

	if (useSineWave) {
     cd6:	4b24      	ldr	r3, [pc, #144]	; (d68 <setDesStateSerial(int)+0xa0>)
     cd8:	781b      	ldrb	r3, [r3, #0]
     cda:	b3ab      	cbz	r3, d48 <setDesStateSerial(int)+0x80>
		sineFrequency = static_cast<float>(serialInputValue);
     cdc:	4b23      	ldr	r3, [pc, #140]	; (d6c <setDesStateSerial(int)+0xa4>)
     cde:	ed93 7a00 	vldr	s14, [r3]
     ce2:	4b23      	ldr	r3, [pc, #140]	; (d70 <setDesStateSerial(int)+0xa8>)
     ce4:	ed83 7a00 	vstr	s14, [r3]
		desiredAngle = 10*sin(2*PI*sineFrequency*sineTime);    // Set the output to be a sin wave between -5 and 5 degrees
     ce8:	4d22      	ldr	r5, [pc, #136]	; (d74 <setDesStateSerial(int)+0xac>)
     cea:	ed95 8a00 	vldr	s16, [r5]
     cee:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     cf2:	ed9f 6b1b 	vldr	d6, [pc, #108]	; d60 <setDesStateSerial(int)+0x98>
     cf6:	ee27 7b06 	vmul.f64	d7, d7, d6
     cfa:	eeb7 0ac8 	vcvt.f64.f32	d0, s16
     cfe:	ee27 0b00 	vmul.f64	d0, d7, d0
     d02:	f00e fe29 	bl	f958 <sin>
     d06:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     d0a:	ee20 0b07 	vmul.f64	d0, d0, d7
     d0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		sineTime = sineTime + 1/2000.0f;
     d12:	eddf 7a19 	vldr	s15, [pc, #100]	; d78 <setDesStateSerial(int)+0xb0>
     d16:	ee78 7a27 	vadd.f32	s15, s16, s15
     d1a:	edc5 7a00 	vstr	s15, [r5]
	}
	else {
		desiredAngle = static_cast<float>(serialInputValue);
	}

	switch (controlledAxis) {
     d1e:	2c01      	cmp	r4, #1
     d20:	d016      	beq.n	d50 <setDesStateSerial(int)+0x88>
     d22:	2c02      	cmp	r4, #2
     d24:	d018      	beq.n	d58 <setDesStateSerial(int)+0x90>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     d26:	ecbd 8b02 	vpop	{d8}
     d2a:	bd38      	pop	{r3, r4, r5, pc}
		serialInputValue = Serial.parseFloat();
     d2c:	4813      	ldr	r0, [pc, #76]	; (d7c <setDesStateSerial(int)+0xb4>)
     d2e:	f00b ff51 	bl	cbd4 <Stream::parseFloat()>
     d32:	4b0e      	ldr	r3, [pc, #56]	; (d6c <setDesStateSerial(int)+0xa4>)
     d34:	ed83 0a00 	vstr	s0, [r3]
		while (Serial.available() !=0) {
     d38:	e001      	b.n	d3e <setDesStateSerial(int)+0x76>
	// Reads the next received byte, or returns -1 if nothing has been received
	// from your PC.
        virtual int read() { return usb_serial_getchar(); }
     d3a:	f00e f88b 	bl	ee54 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
     d3e:	f00e f84b 	bl	edd8 <usb_serial_available>
     d42:	2800      	cmp	r0, #0
     d44:	d1f9      	bne.n	d3a <setDesStateSerial(int)+0x72>
     d46:	e7c6      	b.n	cd6 <setDesStateSerial(int)+0xe>
		desiredAngle = static_cast<float>(serialInputValue);
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <setDesStateSerial(int)+0xa4>)
     d4a:	ed93 0a00 	vldr	s0, [r3]
     d4e:	e7e6      	b.n	d1e <setDesStateSerial(int)+0x56>
			roll_des = desiredAngle;
     d50:	4b0b      	ldr	r3, [pc, #44]	; (d80 <setDesStateSerial(int)+0xb8>)
     d52:	ed83 0a00 	vstr	s0, [r3]
			break;
     d56:	e7e6      	b.n	d26 <setDesStateSerial(int)+0x5e>
			pitch_des = desiredAngle;
     d58:	4b0a      	ldr	r3, [pc, #40]	; (d84 <setDesStateSerial(int)+0xbc>)
     d5a:	ed83 0a00 	vstr	s0, [r3]
}
     d5e:	e7e2      	b.n	d26 <setDesStateSerial(int)+0x5e>
     d60:	54442d18 	.word	0x54442d18
     d64:	401921fb 	.word	0x401921fb
     d68:	20003a42 	.word	0x20003a42
     d6c:	20005358 	.word	0x20005358
     d70:	2000537c 	.word	0x2000537c
     d74:	20005380 	.word	0x20005380
     d78:	3a03126f 	.word	0x3a03126f
     d7c:	20003354 	.word	0x20003354
     d80:	20005178 	.word	0x20005178
     d84:	2000514c 	.word	0x2000514c

00000d88 <performSineSweep(int)>:

void performSineSweep(int controlledAxis) {
     d88:	b510      	push	{r4, lr}
     d8a:	ed2d 8b06 	vpush	{d8-d10}
     d8e:	4604      	mov	r4, r0
  //  while (Serial.available() !=0) {
  //      Serial.read();
  //    }
	//}
  //if (sweepFlag){
    desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     d90:	4b2d      	ldr	r3, [pc, #180]	; (e48 <performSineSweep(int)+0xc0>)
     d92:	edd3 aa00 	vldr	s21, [r3]
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <performSineSweep(int)+0xc4>)
     d98:	edd3 8a00 	vldr	s17, [r3]
     d9c:	4b2c      	ldr	r3, [pc, #176]	; (e50 <performSineSweep(int)+0xc8>)
     d9e:	ed93 aa00 	vldr	s20, [r3]
     da2:	4b2c      	ldr	r3, [pc, #176]	; (e54 <performSineSweep(int)+0xcc>)
     da4:	ed93 8a00 	vldr	s16, [r3]
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
     da8:	eeb7 9ac8 	vcvt.f64.f32	d9, s16
     dac:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
     db0:	eeb0 0b49 	vmov.f64	d0, d9
     db4:	f00e fad8 	bl	f368 <pow>
    if (sineTime > sweepTime) {
     db8:	eeb4 aac8 	vcmpe.f32	s20, s16
     dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dc0:	d42f      	bmi.n	e22 <performSineSweep(int)+0x9a>
     dc2:	eeb0 5b40 	vmov.f64	d5, d0
     dc6:	eeb7 7aca 	vcvt.f64.f32	d7, s20
    desiredAngle = amp*sin(PI*(maxFreq - minFreq)/pow(sweepTime, 2)*pow(sineTime, 3) + 2*PI*minFreq*sineTime);
     dca:	ee3a 6ae8 	vsub.f32	s12, s21, s17
     dce:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     dd2:	ed9f 4b19 	vldr	d4, [pc, #100]	; e38 <performSineSweep(int)+0xb0>
     dd6:	ee26 6b04 	vmul.f64	d6, d6, d4
     dda:	ee27 7b07 	vmul.f64	d7, d7, d7
     dde:	ee86 4b07 	vdiv.f64	d4, d6, d7
     de2:	eeb7 7ae8 	vcvt.f64.f32	d7, s17
     de6:	ed9f 6b16 	vldr	d6, [pc, #88]	; e40 <performSineSweep(int)+0xb8>
     dea:	ee27 7b06 	vmul.f64	d7, d7, d6
     dee:	ee27 0b09 	vmul.f64	d0, d7, d9
     df2:	ee04 0b05 	vmla.f64	d0, d4, d5
     df6:	f00e fdaf 	bl	f958 <sin>
     dfa:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
     dfe:	ee20 0b07 	vmul.f64	d0, d0, d7
     e02:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
      desiredAngle = 0;
    }
    sineTime = sineTime + 1/2000.0f;
     e06:	eddf 7a14 	vldr	s15, [pc, #80]	; e58 <performSineSweep(int)+0xd0>
     e0a:	ee38 8a27 	vadd.f32	s16, s16, s15
     e0e:	4b11      	ldr	r3, [pc, #68]	; (e54 <performSineSweep(int)+0xcc>)
     e10:	ed83 8a00 	vstr	s16, [r3]
  //}

	switch (controlledAxis) {
     e14:	2c01      	cmp	r4, #1
     e16:	d007      	beq.n	e28 <performSineSweep(int)+0xa0>
     e18:	2c02      	cmp	r4, #2
     e1a:	d009      	beq.n	e30 <performSineSweep(int)+0xa8>
			pitch_des = desiredAngle;
			break;
		default:
			break;
	}
}
     e1c:	ecbd 8b06 	vpop	{d8-d10}
     e20:	bd10      	pop	{r4, pc}
      desiredAngle = 0;
     e22:	ed9f 0a0e 	vldr	s0, [pc, #56]	; e5c <performSineSweep(int)+0xd4>
     e26:	e7ee      	b.n	e06 <performSineSweep(int)+0x7e>
			roll_des = desiredAngle;
     e28:	4b0d      	ldr	r3, [pc, #52]	; (e60 <performSineSweep(int)+0xd8>)
     e2a:	ed83 0a00 	vstr	s0, [r3]
			break;
     e2e:	e7f5      	b.n	e1c <performSineSweep(int)+0x94>
			pitch_des = desiredAngle;
     e30:	4b0c      	ldr	r3, [pc, #48]	; (e64 <performSineSweep(int)+0xdc>)
     e32:	ed83 0a00 	vstr	s0, [r3]
}
     e36:	e7f1      	b.n	e1c <performSineSweep(int)+0x94>
     e38:	54442d18 	.word	0x54442d18
     e3c:	400921fb 	.word	0x400921fb
     e40:	54442d18 	.word	0x54442d18
     e44:	401921fb 	.word	0x401921fb
     e48:	200039cc 	.word	0x200039cc
     e4c:	20003a18 	.word	0x20003a18
     e50:	20003a24 	.word	0x20003a24
     e54:	20005380 	.word	0x20005380
     e58:	3a03126f 	.word	0x3a03126f
     e5c:	00000000 	.word	0x00000000
     e60:	20005178 	.word	0x20005178
     e64:	2000514c 	.word	0x2000514c

00000e68 <rollStep()>:

void rollStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     e68:	4b0a      	ldr	r3, [pc, #40]	; (e94 <rollStep()+0x2c>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	f240 42e1 	movw	r2, #1249	; 0x4e1
     e70:	4293      	cmp	r3, r2
     e72:	dd0c      	ble.n	e8e <rollStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     e74:	f240 62d6 	movw	r2, #1750	; 0x6d6
     e78:	4293      	cmp	r3, r2
     e7a:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     e7e:	ed9f 7a06 	vldr	s14, [pc, #24]	; e98 <rollStep()+0x30>
     e82:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	roll_des = desiredAngle;
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <rollStep()+0x34>)
     e88:	edc3 7a00 	vstr	s15, [r3]
}
     e8c:	4770      	bx	lr
		desiredAngle = 15.0f;
     e8e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     e92:	e7f8      	b.n	e86 <rollStep()+0x1e>
     e94:	20005054 	.word	0x20005054
     e98:	00000000 	.word	0x00000000
     e9c:	20005178 	.word	0x20005178

00000ea0 <pitchStep()>:
void pitchStep() {
	float desiredAngle;
	if (channel_9_pwm < 1250){
     ea0:	4b0a      	ldr	r3, [pc, #40]	; (ecc <pitchStep()+0x2c>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	f240 42e1 	movw	r2, #1249	; 0x4e1
     ea8:	4293      	cmp	r3, r2
     eaa:	dd0c      	ble.n	ec6 <pitchStep()+0x26>
	}
	else if (channel_9_pwm > 1750) {
		desiredAngle = -15.0f;
	}
	else {
		desiredAngle = 0.0f;
     eac:	f240 62d6 	movw	r2, #1750	; 0x6d6
     eb0:	4293      	cmp	r3, r2
     eb2:	eefa 7a0e 	vmov.f32	s15, #174	; 0xc1700000 -15.0
     eb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; ed0 <pitchStep()+0x30>
     eba:	fe77 7a87 	vselgt.f32	s15, s15, s14
	}
	pitch_des = desiredAngle;
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <pitchStep()+0x34>)
     ec0:	edc3 7a00 	vstr	s15, [r3]
}
     ec4:	4770      	bx	lr
		desiredAngle = 15.0f;
     ec6:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
     eca:	e7f8      	b.n	ebe <pitchStep()+0x1e>
     ecc:	20005054 	.word	0x20005054
     ed0:	00000000 	.word	0x00000000
     ed4:	2000514c 	.word	0x2000514c

00000ed8 <getDesState()>:
   * RC pwm commands and scaling them to be within our limits defined in setup. thro_des stays within 0 to 1 range.
   * roll_des and pitch_des are scaled to be within max roll/pitch amount in either degrees (angle mode) or degrees/sec
   * (rate mode). yaw_des is scaled to be within max yaw in degrees/sec. Also creates roll_passthru, pitch_passthru, and
   * yaw_passthru variables, to be used in commanding motors/servos with direct unstabilized commands in controlMixer().
   */
  thro_des = (channel_1_pwm - 1000.0)/1000.0; //Between 0 and 1
     ed8:	4b99      	ldr	r3, [pc, #612]	; (1140 <getDesState()+0x268>)
     eda:	ed93 7a00 	vldr	s14, [r3]
     ede:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     ee2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 1120 <getDesState()+0x248>
     ee6:	ee37 7b46 	vsub.f64	d7, d7, d6
     eea:	ee87 4b06 	vdiv.f64	d4, d7, d6
     eee:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
  roll_des = (channel_2_pwm - 1500.0)/500.0; //Between -1 and 1
     ef2:	4b94      	ldr	r3, [pc, #592]	; (1144 <getDesState()+0x26c>)
     ef4:	ed93 7a00 	vldr	s14, [r3]
     ef8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     efc:	ed9f 2b8a 	vldr	d2, [pc, #552]	; 1128 <getDesState()+0x250>
     f00:	ee37 7b42 	vsub.f64	d7, d7, d2
     f04:	ed9f 3b8a 	vldr	d3, [pc, #552]	; 1130 <getDesState()+0x258>
     f08:	ee87 5b03 	vdiv.f64	d5, d7, d3
     f0c:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
  pitch_des = (channel_3_pwm - 1500.0)/500.0; //Between -1 and 1
     f10:	4b8d      	ldr	r3, [pc, #564]	; (1148 <getDesState()+0x270>)
     f12:	ed93 7a00 	vldr	s14, [r3]
     f16:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f1a:	ee37 7b42 	vsub.f64	d7, d7, d2
     f1e:	ee87 6b03 	vdiv.f64	d6, d7, d3
     f22:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
  yaw_des = (channel_4_pwm - 1500.0)/500.0; //Between -1 and 1
     f26:	4b89      	ldr	r3, [pc, #548]	; (114c <getDesState()+0x274>)
     f28:	ed93 7a00 	vldr	s14, [r3]
     f2c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
     f30:	ee37 7b42 	vsub.f64	d7, d7, d2
     f34:	ee87 2b03 	vdiv.f64	d2, d7, d3
     f38:	eeb7 2bc2 	vcvt.f32.f64	s4, d2
  roll_passthru = roll_des/2.0; //Between -0.5 and 0.5
     f3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     f40:	ee65 3a27 	vmul.f32	s7, s10, s15
  pitch_passthru = pitch_des/2.0; //Between -0.5 and 0.5
     f44:	ee26 7a27 	vmul.f32	s14, s12, s15
  yaw_passthru = yaw_des/2.0; //Between -0.5 and 0.5
     f48:	ee62 7a27 	vmul.f32	s15, s4, s15
	//beta_des = -pitch_IMU/beta_max; // Between -1 and 1
	alpha_des = roll_des;
	beta_des = pitch_des;

  //Constrain within normalized bounds
  thro_des = constrain(thro_des, 0.0, 1.0); //Between 0 and 1
     f4c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
     f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f54:	d40c      	bmi.n	f70 <getDesState()+0x98>
     f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     f5a:	eeb4 4ae6 	vcmpe.f32	s8, s13
     f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f62:	dd02      	ble.n	f6a <getDesState()+0x92>
     f64:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
     f68:	e004      	b.n	f74 <getDesState()+0x9c>
     f6a:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     f6e:	e001      	b.n	f74 <getDesState()+0x9c>
     f70:	ed9f 4b71 	vldr	d4, [pc, #452]	; 1138 <getDesState()+0x260>
     f74:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     f78:	4b75      	ldr	r3, [pc, #468]	; (1150 <getDesState()+0x278>)
     f7a:	ed83 4a00 	vstr	s8, [r3]
  roll_des = constrain(roll_des, -1.0, 1.0)*maxRoll; //Between -maxRoll and +maxRoll
     f7e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
     f82:	eeb4 5ae6 	vcmpe.f32	s10, s13
     f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f8a:	d40c      	bmi.n	fa6 <getDesState()+0xce>
     f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     f90:	eeb4 5ae6 	vcmpe.f32	s10, s13
     f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f98:	dd02      	ble.n	fa0 <getDesState()+0xc8>
     f9a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     f9e:	e004      	b.n	faa <getDesState()+0xd2>
     fa0:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
     fa4:	e001      	b.n	faa <getDesState()+0xd2>
     fa6:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
     faa:	4b6a      	ldr	r3, [pc, #424]	; (1154 <getDesState()+0x27c>)
     fac:	ed93 4a00 	vldr	s8, [r3]
     fb0:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     fb4:	ee24 4b05 	vmul.f64	d4, d4, d5
     fb8:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
     fbc:	4b66      	ldr	r3, [pc, #408]	; (1158 <getDesState()+0x280>)
     fbe:	ed83 4a00 	vstr	s8, [r3]
  pitch_des = constrain(pitch_des, -1.0, 1.0)*maxPitch; //Between -maxPitch and +maxPitch
     fc2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
     fc6:	eeb4 6ae6 	vcmpe.f32	s12, s13
     fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fce:	d40c      	bmi.n	fea <getDesState()+0x112>
     fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     fd4:	eeb4 6ae6 	vcmpe.f32	s12, s13
     fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fdc:	dd02      	ble.n	fe4 <getDesState()+0x10c>
     fde:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
     fe2:	e004      	b.n	fee <getDesState()+0x116>
     fe4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     fe8:	e001      	b.n	fee <getDesState()+0x116>
     fea:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
     fee:	4b5b      	ldr	r3, [pc, #364]	; (115c <getDesState()+0x284>)
     ff0:	ed93 4a00 	vldr	s8, [r3]
     ff4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
     ff8:	ee24 4b06 	vmul.f64	d4, d4, d6
     ffc:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1000:	4b57      	ldr	r3, [pc, #348]	; (1160 <getDesState()+0x288>)
    1002:	ed83 4a00 	vstr	s8, [r3]
  yaw_des = constrain(yaw_des, -1.0, 1.0)*maxYaw; //Between -maxYaw and +maxYaw
    1006:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    100a:	eeb4 2ae4 	vcmpe.f32	s4, s9
    100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1012:	d40c      	bmi.n	102e <getDesState()+0x156>
    1014:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    1018:	eeb4 2ae4 	vcmpe.f32	s4, s9
    101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1020:	dd02      	ble.n	1028 <getDesState()+0x150>
    1022:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    1026:	e004      	b.n	1032 <getDesState()+0x15a>
    1028:	eeb7 2ac2 	vcvt.f64.f32	d2, s4
    102c:	e001      	b.n	1032 <getDesState()+0x15a>
    102e:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
    1032:	4b4c      	ldr	r3, [pc, #304]	; (1164 <getDesState()+0x28c>)
    1034:	ed93 4a00 	vldr	s8, [r3]
    1038:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    103c:	ee24 4b02 	vmul.f64	d4, d4, d2
    1040:	eeb7 4bc4 	vcvt.f32.f64	s8, d4
    1044:	4b48      	ldr	r3, [pc, #288]	; (1168 <getDesState()+0x290>)
    1046:	ed83 4a00 	vstr	s8, [r3]
	alpha_des = constrain(alpha_des, -1.0, 1.0)*alpha_max;
    104a:	4b48      	ldr	r3, [pc, #288]	; (116c <getDesState()+0x294>)
    104c:	ed93 4a00 	vldr	s8, [r3]
    1050:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
    1054:	ee24 5b05 	vmul.f64	d5, d4, d5
    1058:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    105c:	4b44      	ldr	r3, [pc, #272]	; (1170 <getDesState()+0x298>)
    105e:	ed83 5a00 	vstr	s10, [r3]
	beta_des = constrain(beta_des, -1.0, 1.0)*beta_max;
    1062:	4b44      	ldr	r3, [pc, #272]	; (1174 <getDesState()+0x29c>)
    1064:	ed93 5a00 	vldr	s10, [r3]
    1068:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    106c:	ee25 6b06 	vmul.f64	d6, d5, d6
    1070:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    1074:	4b40      	ldr	r3, [pc, #256]	; (1178 <getDesState()+0x2a0>)
    1076:	ed83 6a00 	vstr	s12, [r3]
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    107a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
    107e:	eef4 3ae6 	vcmpe.f32	s7, s13
    1082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1086:	d409      	bmi.n	109c <getDesState()+0x1c4>
    1088:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    108c:	eef4 3ae6 	vcmpe.f32	s7, s13
    1090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1094:	dc1a      	bgt.n	10cc <getDesState()+0x1f4>
    1096:	eeb7 6ae3 	vcvt.f64.f32	d6, s7
    109a:	e001      	b.n	10a0 <getDesState()+0x1c8>
    109c:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    10a0:	eef7 3bc6 	vcvt.f32.f64	s7, d6
    10a4:	4b35      	ldr	r3, [pc, #212]	; (117c <getDesState()+0x2a4>)
    10a6:	edc3 3a00 	vstr	s7, [r3]
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10aa:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
    10ae:	eeb4 7ae6 	vcmpe.f32	s14, s13
    10b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10b6:	d40c      	bmi.n	10d2 <getDesState()+0x1fa>
    10b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    10bc:	eeb4 7ae6 	vcmpe.f32	s14, s13
    10c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10c4:	dc1d      	bgt.n	1102 <getDesState()+0x22a>
    10c6:	eeb7 6ac7 	vcvt.f64.f32	d6, s14
    10ca:	e004      	b.n	10d6 <getDesState()+0x1fe>
  roll_passthru = constrain(roll_passthru, -0.5, 0.5);
    10cc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    10d0:	e7e6      	b.n	10a0 <getDesState()+0x1c8>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    10d2:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
    10d6:	eeb7 7bc6 	vcvt.f32.f64	s14, d6
    10da:	4b29      	ldr	r3, [pc, #164]	; (1180 <getDesState()+0x2a8>)
    10dc:	ed83 7a00 	vstr	s14, [r3]
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    10e0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
    10e4:	eef4 7ac7 	vcmpe.f32	s15, s14
    10e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ec:	d40c      	bmi.n	1108 <getDesState()+0x230>
    10ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    10f2:	eef4 7ac7 	vcmpe.f32	s15, s14
    10f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10fa:	dc0d      	bgt.n	1118 <getDesState()+0x240>
    10fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1100:	e004      	b.n	110c <getDesState()+0x234>
  pitch_passthru = constrain(pitch_passthru, -0.5, 0.5);
    1102:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1106:	e7e6      	b.n	10d6 <getDesState()+0x1fe>
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1108:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    110c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    1110:	4b1c      	ldr	r3, [pc, #112]	; (1184 <getDesState()+0x2ac>)
    1112:	edc3 7a00 	vstr	s15, [r3]
}
    1116:	4770      	bx	lr
  yaw_passthru = constrain(yaw_passthru, -0.5, 0.5);
    1118:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    111c:	e7f6      	b.n	110c <getDesState()+0x234>
    111e:	bf00      	nop
    1120:	00000000 	.word	0x00000000
    1124:	408f4000 	.word	0x408f4000
    1128:	00000000 	.word	0x00000000
    112c:	40977000 	.word	0x40977000
    1130:	00000000 	.word	0x00000000
    1134:	407f4000 	.word	0x407f4000
	...
    1140:	20005014 	.word	0x20005014
    1144:	20005020 	.word	0x20005020
    1148:	2000502c 	.word	0x2000502c
    114c:	20005038 	.word	0x20005038
    1150:	20005390 	.word	0x20005390
    1154:	200039d4 	.word	0x200039d4
    1158:	20005178 	.word	0x20005178
    115c:	200039d0 	.word	0x200039d0
    1160:	2000514c 	.word	0x2000514c
    1164:	200039d8 	.word	0x200039d8
    1168:	200053b0 	.word	0x200053b0
    116c:	20003960 	.word	0x20003960
    1170:	20004fdc 	.word	0x20004fdc
    1174:	20003968 	.word	0x20003968
    1178:	20004fe8 	.word	0x20004fe8
    117c:	2000517c 	.word	0x2000517c
    1180:	20005150 	.word	0x20005150
    1184:	200053b4 	.word	0x200053b4

00001188 <scaleCommands()>:
  //Update yaw variables
  error_yaw_prev = error_yaw;
  integral_yaw_prev = integral_yaw;
}

void scaleCommands() {
    1188:	b4f0      	push	{r4, r5, r6, r7}
   * mX_command_PWM are updated here which are used to command the motors in commandMotors(). sX_command_PWM are updated 
   * which are used to command the servos.
   */
  //Scaled to 125us - 250us for oneshot125 protocol
  m1_command_PWM = m1_command_scaled*125 + 125;
  m2_command_PWM = m2_command_scaled*125 + 125;
    118a:	4b74      	ldr	r3, [pc, #464]	; (135c <scaleCommands()+0x1d4>)
    118c:	ed93 7a00 	vldr	s14, [r3]
    1190:	eddf 7a73 	vldr	s15, [pc, #460]	; 1360 <scaleCommands()+0x1d8>
    1194:	ee27 7a27 	vmul.f32	s14, s14, s15
    1198:	ee37 7a27 	vadd.f32	s14, s14, s15
    119c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11a0:	ee17 4a10 	vmov	r4, s14
  m3_command_PWM = m3_command_scaled*125 + 125;
    11a4:	4b6f      	ldr	r3, [pc, #444]	; (1364 <scaleCommands()+0x1dc>)
    11a6:	ed93 7a00 	vldr	s14, [r3]
    11aa:	ee27 7a27 	vmul.f32	s14, s14, s15
    11ae:	ee37 7a27 	vadd.f32	s14, s14, s15
    11b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11b6:	ee17 0a10 	vmov	r0, s14
  m4_command_PWM = m4_command_scaled*125 + 125;
    11ba:	4b6b      	ldr	r3, [pc, #428]	; (1368 <scaleCommands()+0x1e0>)
    11bc:	ed93 7a00 	vldr	s14, [r3]
    11c0:	ee27 7a27 	vmul.f32	s14, s14, s15
    11c4:	ee37 7a27 	vadd.f32	s14, s14, s15
    11c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11cc:	ee17 1a10 	vmov	r1, s14
  m5_command_PWM = m5_command_scaled*125 + 125;
    11d0:	4b66      	ldr	r3, [pc, #408]	; (136c <scaleCommands()+0x1e4>)
    11d2:	ed93 7a00 	vldr	s14, [r3]
    11d6:	ee27 7a27 	vmul.f32	s14, s14, s15
    11da:	ee37 7a27 	vadd.f32	s14, s14, s15
    11de:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11e2:	ee17 2a10 	vmov	r2, s14
  m6_command_PWM = m6_command_scaled*125 + 125;
    11e6:	4b62      	ldr	r3, [pc, #392]	; (1370 <scaleCommands()+0x1e8>)
    11e8:	ed93 7a00 	vldr	s14, [r3]
    11ec:	ee27 7a27 	vmul.f32	s14, s14, s15
    11f0:	ee37 7a27 	vadd.f32	s14, s14, s15
    11f4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    11f8:	ee17 3a10 	vmov	r3, s14
  m1_command_PWM = m1_command_scaled*125 + 125;
    11fc:	4d5d      	ldr	r5, [pc, #372]	; (1374 <scaleCommands()+0x1ec>)
    11fe:	ed95 7a00 	vldr	s14, [r5]
    1202:	ee27 7a27 	vmul.f32	s14, s14, s15
    1206:	ee77 7a27 	vadd.f32	s15, s14, s15
    120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    120e:	ee17 5a90 	vmov	r5, s15
  //Constrain commands to motors within oneshot125 bounds
  m1_command_PWM = constrain(m1_command_PWM, 125, 250);
    1212:	2dfa      	cmp	r5, #250	; 0xfa
    1214:	bfa8      	it	ge
    1216:	25fa      	movge	r5, #250	; 0xfa
    1218:	2d7d      	cmp	r5, #125	; 0x7d
    121a:	bfb8      	it	lt
    121c:	257d      	movlt	r5, #125	; 0x7d
    121e:	4e56      	ldr	r6, [pc, #344]	; (1378 <scaleCommands()+0x1f0>)
    1220:	6035      	str	r5, [r6, #0]
  m2_command_PWM = constrain(m2_command_PWM, 125, 250);
    1222:	2cfa      	cmp	r4, #250	; 0xfa
    1224:	bfa8      	it	ge
    1226:	24fa      	movge	r4, #250	; 0xfa
    1228:	2c7d      	cmp	r4, #125	; 0x7d
    122a:	bfb8      	it	lt
    122c:	247d      	movlt	r4, #125	; 0x7d
    122e:	4d53      	ldr	r5, [pc, #332]	; (137c <scaleCommands()+0x1f4>)
    1230:	602c      	str	r4, [r5, #0]
  m3_command_PWM = constrain(m3_command_PWM, 125, 250);
    1232:	28fa      	cmp	r0, #250	; 0xfa
    1234:	bfa8      	it	ge
    1236:	20fa      	movge	r0, #250	; 0xfa
    1238:	287d      	cmp	r0, #125	; 0x7d
    123a:	bfb8      	it	lt
    123c:	207d      	movlt	r0, #125	; 0x7d
    123e:	4c50      	ldr	r4, [pc, #320]	; (1380 <scaleCommands()+0x1f8>)
    1240:	6020      	str	r0, [r4, #0]
  m4_command_PWM = constrain(m4_command_PWM, 125, 250);
    1242:	29fa      	cmp	r1, #250	; 0xfa
    1244:	bfa8      	it	ge
    1246:	21fa      	movge	r1, #250	; 0xfa
    1248:	297d      	cmp	r1, #125	; 0x7d
    124a:	bfb8      	it	lt
    124c:	217d      	movlt	r1, #125	; 0x7d
    124e:	484d      	ldr	r0, [pc, #308]	; (1384 <scaleCommands()+0x1fc>)
    1250:	6001      	str	r1, [r0, #0]
  m5_command_PWM = constrain(m5_command_PWM, 125, 250);
    1252:	2afa      	cmp	r2, #250	; 0xfa
    1254:	bfa8      	it	ge
    1256:	22fa      	movge	r2, #250	; 0xfa
    1258:	2a7d      	cmp	r2, #125	; 0x7d
    125a:	bfb8      	it	lt
    125c:	227d      	movlt	r2, #125	; 0x7d
    125e:	494a      	ldr	r1, [pc, #296]	; (1388 <scaleCommands()+0x200>)
    1260:	600a      	str	r2, [r1, #0]
  m6_command_PWM = constrain(m6_command_PWM, 125, 250);
    1262:	2bfa      	cmp	r3, #250	; 0xfa
    1264:	bfa8      	it	ge
    1266:	23fa      	movge	r3, #250	; 0xfa
    1268:	2b7d      	cmp	r3, #125	; 0x7d
    126a:	bfb8      	it	lt
    126c:	237d      	movlt	r3, #125	; 0x7d
    126e:	4a47      	ldr	r2, [pc, #284]	; (138c <scaleCommands()+0x204>)
    1270:	6013      	str	r3, [r2, #0]

  //Scaled to 0-180 for servo library
  s1_command_PWM = s1_command_scaled*180;
  s2_command_PWM = s2_command_scaled*180;
    1272:	4b47      	ldr	r3, [pc, #284]	; (1390 <scaleCommands()+0x208>)
    1274:	edd3 7a00 	vldr	s15, [r3]
    1278:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1394 <scaleCommands()+0x20c>
    127c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1284:	ee17 5a90 	vmov	r5, s15
  s3_command_PWM = s3_command_scaled*180;
    1288:	4b43      	ldr	r3, [pc, #268]	; (1398 <scaleCommands()+0x210>)
    128a:	edd3 7a00 	vldr	s15, [r3]
    128e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1296:	ee17 4a90 	vmov	r4, s15
  s4_command_PWM = s4_command_scaled*180;
    129a:	4b40      	ldr	r3, [pc, #256]	; (139c <scaleCommands()+0x214>)
    129c:	edd3 7a00 	vldr	s15, [r3]
    12a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    12a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12a8:	ee17 0a90 	vmov	r0, s15
  s5_command_PWM = s5_command_scaled*180;
    12ac:	4b3c      	ldr	r3, [pc, #240]	; (13a0 <scaleCommands()+0x218>)
    12ae:	edd3 7a00 	vldr	s15, [r3]
    12b2:	ee67 7a87 	vmul.f32	s15, s15, s14
    12b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12ba:	ee17 1a90 	vmov	r1, s15
  s6_command_PWM = s6_command_scaled*180;
    12be:	4b39      	ldr	r3, [pc, #228]	; (13a4 <scaleCommands()+0x21c>)
    12c0:	edd3 7a00 	vldr	s15, [r3]
    12c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    12c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12cc:	ee17 2a90 	vmov	r2, s15
  s7_command_PWM = s7_command_scaled*180;
    12d0:	4b35      	ldr	r3, [pc, #212]	; (13a8 <scaleCommands()+0x220>)
    12d2:	edd3 7a00 	vldr	s15, [r3]
    12d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    12da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12de:	ee17 3a90 	vmov	r3, s15
  s1_command_PWM = s1_command_scaled*180;
    12e2:	4e32      	ldr	r6, [pc, #200]	; (13ac <scaleCommands()+0x224>)
    12e4:	edd6 7a00 	vldr	s15, [r6]
    12e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    12ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    12f0:	ee17 6a90 	vmov	r6, s15
  //Constrain commands to servos within servo library bounds
  s1_command_PWM = constrain(s1_command_PWM, 0, 180);
    12f4:	2eb4      	cmp	r6, #180	; 0xb4
    12f6:	bfa8      	it	ge
    12f8:	26b4      	movge	r6, #180	; 0xb4
    12fa:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    12fe:	4f2c      	ldr	r7, [pc, #176]	; (13b0 <scaleCommands()+0x228>)
    1300:	603e      	str	r6, [r7, #0]
  s2_command_PWM = constrain(s2_command_PWM, 0, 180);
    1302:	2db4      	cmp	r5, #180	; 0xb4
    1304:	bfa8      	it	ge
    1306:	25b4      	movge	r5, #180	; 0xb4
    1308:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    130c:	4e29      	ldr	r6, [pc, #164]	; (13b4 <scaleCommands()+0x22c>)
    130e:	6035      	str	r5, [r6, #0]
  s3_command_PWM = constrain(s3_command_PWM, 0, 180);
    1310:	2cb4      	cmp	r4, #180	; 0xb4
    1312:	bfa8      	it	ge
    1314:	24b4      	movge	r4, #180	; 0xb4
    1316:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    131a:	4d27      	ldr	r5, [pc, #156]	; (13b8 <scaleCommands()+0x230>)
    131c:	602c      	str	r4, [r5, #0]
  s4_command_PWM = constrain(s4_command_PWM, 0, 180);
    131e:	28b4      	cmp	r0, #180	; 0xb4
    1320:	bfa8      	it	ge
    1322:	20b4      	movge	r0, #180	; 0xb4
    1324:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    1328:	4c24      	ldr	r4, [pc, #144]	; (13bc <scaleCommands()+0x234>)
    132a:	6020      	str	r0, [r4, #0]
  s5_command_PWM = constrain(s5_command_PWM, 0, 180);
    132c:	29b4      	cmp	r1, #180	; 0xb4
    132e:	bfa8      	it	ge
    1330:	21b4      	movge	r1, #180	; 0xb4
    1332:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    1336:	4822      	ldr	r0, [pc, #136]	; (13c0 <scaleCommands()+0x238>)
    1338:	6001      	str	r1, [r0, #0]
  s6_command_PWM = constrain(s6_command_PWM, 0, 180);
    133a:	2ab4      	cmp	r2, #180	; 0xb4
    133c:	bfa8      	it	ge
    133e:	22b4      	movge	r2, #180	; 0xb4
    1340:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1344:	491f      	ldr	r1, [pc, #124]	; (13c4 <scaleCommands()+0x23c>)
    1346:	600a      	str	r2, [r1, #0]
  s7_command_PWM = constrain(s7_command_PWM, 0, 180);
    1348:	2bb4      	cmp	r3, #180	; 0xb4
    134a:	bfa8      	it	ge
    134c:	23b4      	movge	r3, #180	; 0xb4
    134e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    1352:	4a1d      	ldr	r2, [pc, #116]	; (13c8 <scaleCommands()+0x240>)
    1354:	6013      	str	r3, [r2, #0]

}
    1356:	bcf0      	pop	{r4, r5, r6, r7}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	200050ec 	.word	0x200050ec
    1360:	42fa0000 	.word	0x42fa0000
    1364:	200050f4 	.word	0x200050f4
    1368:	200050fc 	.word	0x200050fc
    136c:	20005104 	.word	0x20005104
    1370:	2000510c 	.word	0x2000510c
    1374:	200050e4 	.word	0x200050e4
    1378:	200050e0 	.word	0x200050e0
    137c:	200050e8 	.word	0x200050e8
    1380:	200050f0 	.word	0x200050f0
    1384:	200050f8 	.word	0x200050f8
    1388:	20005100 	.word	0x20005100
    138c:	20005108 	.word	0x20005108
    1390:	200051bc 	.word	0x200051bc
    1394:	43340000 	.word	0x43340000
    1398:	200051c4 	.word	0x200051c4
    139c:	200051cc 	.word	0x200051cc
    13a0:	200051d4 	.word	0x200051d4
    13a4:	200051dc 	.word	0x200051dc
    13a8:	200051e4 	.word	0x200051e4
    13ac:	200051b4 	.word	0x200051b4
    13b0:	200051b0 	.word	0x200051b0
    13b4:	200051b8 	.word	0x200051b8
    13b8:	200051c0 	.word	0x200051c0
    13bc:	200051c8 	.word	0x200051c8
    13c0:	200051d0 	.word	0x200051d0
    13c4:	200051d8 	.word	0x200051d8
    13c8:	200051e0 	.word	0x200051e0
    13cc:	00000000 	.word	0x00000000

000013d0 <getCommands()>:

void getCommands() {
    13d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  //  channel_4_pwm = getRadioPWM(4);
  //  channel_5_pwm = getRadioPWM(5);
  //  channel_6_pwm = getRadioPWM(6);
    
  #if defined USE_SBUS_RX
    if (sbus.read(&sbusChannels[0], &sbusFailSafe, &sbusLostFrame))
    13d2:	4bc5      	ldr	r3, [pc, #788]	; (16e8 <getCommands()+0x318>)
    13d4:	4ac5      	ldr	r2, [pc, #788]	; (16ec <getCommands()+0x31c>)
    13d6:	49c6      	ldr	r1, [pc, #792]	; (16f0 <getCommands()+0x320>)
    13d8:	48c6      	ldr	r0, [pc, #792]	; (16f4 <getCommands()+0x324>)
    13da:	f002 fefd 	bl	41d8 <SBUS::read(unsigned short*, bool*, bool*)>
    13de:	2800      	cmp	r0, #0
    13e0:	f000 80bb 	beq.w	155a <getCommands()+0x18a>
    {
      //sBus scaling below is for Taranis-Plus and X4R-SB
      float scale = 0.615;  
      float bias  = 895.0; 
      channel_1_pwm_pre = sbusChannels[0] * scale + bias;
    13e4:	4bc2      	ldr	r3, [pc, #776]	; (16f0 <getCommands()+0x320>)
    13e6:	881a      	ldrh	r2, [r3, #0]
    13e8:	ee06 2a90 	vmov	s13, r2
    13ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    13f0:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 16f8 <getCommands()+0x328>
    13f4:	ee66 6a87 	vmul.f32	s13, s13, s14
    13f8:	eddf 7ac0 	vldr	s15, [pc, #768]	; 16fc <getCommands()+0x32c>
    13fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1400:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1404:	4abe      	ldr	r2, [pc, #760]	; (1700 <getCommands()+0x330>)
    1406:	edc2 6a00 	vstr	s13, [r2]
      channel_2_pwm_pre = sbusChannels[1] * scale + bias;
    140a:	885a      	ldrh	r2, [r3, #2]
    140c:	ee06 2a90 	vmov	s13, r2
    1410:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1414:	ee66 6a87 	vmul.f32	s13, s13, s14
    1418:	ee76 6aa7 	vadd.f32	s13, s13, s15
    141c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1420:	4ab8      	ldr	r2, [pc, #736]	; (1704 <getCommands()+0x334>)
    1422:	edc2 6a00 	vstr	s13, [r2]
      channel_3_pwm_pre = sbusChannels[2] * scale + bias;
    1426:	889a      	ldrh	r2, [r3, #4]
    1428:	ee06 2a90 	vmov	s13, r2
    142c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1430:	ee66 6a87 	vmul.f32	s13, s13, s14
    1434:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1438:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    143c:	4ab2      	ldr	r2, [pc, #712]	; (1708 <getCommands()+0x338>)
    143e:	edc2 6a00 	vstr	s13, [r2]
      channel_4_pwm_pre = sbusChannels[3] * scale + bias;
    1442:	88da      	ldrh	r2, [r3, #6]
    1444:	ee06 2a90 	vmov	s13, r2
    1448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    144c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1450:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1454:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1458:	4aac      	ldr	r2, [pc, #688]	; (170c <getCommands()+0x33c>)
    145a:	edc2 6a00 	vstr	s13, [r2]
      channel_5_pwm = sbusChannels[4] * scale + bias;
    145e:	891a      	ldrh	r2, [r3, #8]
    1460:	ee06 2a90 	vmov	s13, r2
    1464:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1468:	ee66 6a87 	vmul.f32	s13, s13, s14
    146c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1470:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1474:	4aa6      	ldr	r2, [pc, #664]	; (1710 <getCommands()+0x340>)
    1476:	edc2 6a00 	vstr	s13, [r2]
      channel_6_pwm = sbusChannels[5] * scale + bias; 
    147a:	895a      	ldrh	r2, [r3, #10]
    147c:	ee06 2a90 	vmov	s13, r2
    1480:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1484:	ee66 6a87 	vmul.f32	s13, s13, s14
    1488:	ee76 6aa7 	vadd.f32	s13, s13, s15
    148c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1490:	4aa0      	ldr	r2, [pc, #640]	; (1714 <getCommands()+0x344>)
    1492:	edc2 6a00 	vstr	s13, [r2]
			channel_7_pwm = sbusChannels[6] * scale + bias;
    1496:	899a      	ldrh	r2, [r3, #12]
    1498:	ee06 2a90 	vmov	s13, r2
    149c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14a0:	ee66 6a87 	vmul.f32	s13, s13, s14
    14a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14a8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14ac:	4a9a      	ldr	r2, [pc, #616]	; (1718 <getCommands()+0x348>)
    14ae:	edc2 6a00 	vstr	s13, [r2]
			channel_8_pwm = sbusChannels[7] * scale + bias;
    14b2:	89da      	ldrh	r2, [r3, #14]
    14b4:	ee06 2a90 	vmov	s13, r2
    14b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14bc:	ee66 6a87 	vmul.f32	s13, s13, s14
    14c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14c4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14c8:	4a94      	ldr	r2, [pc, #592]	; (171c <getCommands()+0x34c>)
    14ca:	edc2 6a00 	vstr	s13, [r2]
			channel_9_pwm = sbusChannels[8] * scale + bias;
    14ce:	8a1a      	ldrh	r2, [r3, #16]
    14d0:	ee06 2a90 	vmov	s13, r2
    14d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14d8:	ee66 6a87 	vmul.f32	s13, s13, s14
    14dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14e0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    14e4:	4a8e      	ldr	r2, [pc, #568]	; (1720 <getCommands()+0x350>)
    14e6:	edc2 6a00 	vstr	s13, [r2]
			channel_10_pwm = sbusChannels[9] * scale + bias;
    14ea:	8a5a      	ldrh	r2, [r3, #18]
    14ec:	ee06 2a90 	vmov	s13, r2
    14f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14f4:	ee66 6a87 	vmul.f32	s13, s13, s14
    14f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    14fc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1500:	4a88      	ldr	r2, [pc, #544]	; (1724 <getCommands()+0x354>)
    1502:	edc2 6a00 	vstr	s13, [r2]
			channel_11_pwm = sbusChannels[10] * scale + bias;
    1506:	8a9a      	ldrh	r2, [r3, #20]
    1508:	ee06 2a90 	vmov	s13, r2
    150c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1510:	ee66 6a87 	vmul.f32	s13, s13, s14
    1514:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1518:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    151c:	4a82      	ldr	r2, [pc, #520]	; (1728 <getCommands()+0x358>)
    151e:	edc2 6a00 	vstr	s13, [r2]
			channel_12_pwm = sbusChannels[11] * scale + bias;
    1522:	8ada      	ldrh	r2, [r3, #22]
    1524:	ee06 2a90 	vmov	s13, r2
    1528:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    152c:	ee66 6a87 	vmul.f32	s13, s13, s14
    1530:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1534:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    1538:	4a7c      	ldr	r2, [pc, #496]	; (172c <getCommands()+0x35c>)
    153a:	edc2 6a00 	vstr	s13, [r2]
			channel_13_pwm = sbusChannels[12] * scale + bias;
    153e:	8b1b      	ldrh	r3, [r3, #24]
    1540:	ee06 3a90 	vmov	s13, r3
    1544:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    1548:	ee26 7a87 	vmul.f32	s14, s13, s14
    154c:	ee77 7a27 	vadd.f32	s15, s14, s15
    1550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1554:	4b76      	ldr	r3, [pc, #472]	; (1730 <getCommands()+0x360>)
    1556:	edc3 7a00 	vstr	s15, [r3]
  //  }
  #endif
  
  //Low-pass the critical commands and update previous values
  float b = 0.7; //Lower=slower, higher=noiser
  channel_1_pwm_pre = (1.0 - b)*channel_1_pwm_prev + b*channel_1_pwm_pre;
    155a:	4b76      	ldr	r3, [pc, #472]	; (1734 <getCommands()+0x364>)
    155c:	681d      	ldr	r5, [r3, #0]
    155e:	4b68      	ldr	r3, [pc, #416]	; (1700 <getCommands()+0x330>)
    1560:	edd3 7a00 	vldr	s15, [r3]
    1564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1568:	eddf 5a73 	vldr	s11, [pc, #460]	; 1738 <getCommands()+0x368>
    156c:	ee27 7a25 	vmul.f32	s14, s14, s11
    1570:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1574:	ee06 5a90 	vmov	s13, r5
    1578:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    157c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 16e0 <getCommands()+0x310>
    1580:	ee04 7b06 	vmla.f64	d7, d4, d6
    1584:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1588:	ee17 0a90 	vmov	r0, s15
    158c:	edc3 7a00 	vstr	s15, [r3]
  channel_2_pwm_pre = (1.0 - b)*channel_2_pwm_prev + b*channel_2_pwm_pre;
    1590:	4b6a      	ldr	r3, [pc, #424]	; (173c <getCommands()+0x36c>)
    1592:	f8d3 c000 	ldr.w	ip, [r3]
    1596:	4b5b      	ldr	r3, [pc, #364]	; (1704 <getCommands()+0x334>)
    1598:	edd3 7a00 	vldr	s15, [r3]
    159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    15a0:	ee27 7a25 	vmul.f32	s14, s14, s11
    15a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    15a8:	ee05 ca10 	vmov	s10, ip
    15ac:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    15b0:	ee04 7b06 	vmla.f64	d7, d4, d6
    15b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    15b8:	ee17 1a90 	vmov	r1, s15
    15bc:	edc3 7a00 	vstr	s15, [r3]
  channel_3_pwm_pre = (1.0 - b)*channel_3_pwm_prev + b*channel_3_pwm_pre;
    15c0:	4b5f      	ldr	r3, [pc, #380]	; (1740 <getCommands()+0x370>)
    15c2:	681f      	ldr	r7, [r3, #0]
    15c4:	4b50      	ldr	r3, [pc, #320]	; (1708 <getCommands()+0x338>)
    15c6:	edd3 7a00 	vldr	s15, [r3]
    15ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    15ce:	ee27 7a25 	vmul.f32	s14, s14, s11
    15d2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    15d6:	ee05 7a10 	vmov	s10, r7
    15da:	eeb8 4bc5 	vcvt.f64.s32	d4, s10
    15de:	ee04 7b06 	vmla.f64	d7, d4, d6
    15e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    15e6:	ee17 2a90 	vmov	r2, s15
    15ea:	edc3 7a00 	vstr	s15, [r3]
  channel_4_pwm_pre = (1.0 - b)*channel_4_pwm_prev + b*channel_4_pwm_pre;
    15ee:	4b55      	ldr	r3, [pc, #340]	; (1744 <getCommands()+0x374>)
    15f0:	681e      	ldr	r6, [r3, #0]
    15f2:	4c46      	ldr	r4, [pc, #280]	; (170c <getCommands()+0x33c>)
    15f4:	edd4 7a00 	vldr	s15, [r4]
    15f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    15fc:	ee27 7a25 	vmul.f32	s14, s14, s11
    1600:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1604:	ee05 6a90 	vmov	s11, r6
    1608:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    160c:	ee05 7b06 	vmla.f64	d7, d5, d6
    1610:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1614:	ee17 3a90 	vmov	r3, s15
    1618:	edc4 7a00 	vstr	s15, [r4]

	// Additional cutoff to deal with occasional spikes in recieved radio commands
	d_ch1 = channel_1_pwm_pre - channel_1_pwm_prev;
    161c:	1b44      	subs	r4, r0, r5
    161e:	f8df e154 	ldr.w	lr, [pc, #340]	; 1774 <getCommands()+0x3a4>
    1622:	f8ce 4000 	str.w	r4, [lr]
	d_ch2 = channel_2_pwm_pre - channel_2_pwm_prev;
    1626:	eba1 010c 	sub.w	r1, r1, ip
    162a:	f8df c134 	ldr.w	ip, [pc, #308]	; 1760 <getCommands()+0x390>
    162e:	f8cc 1000 	str.w	r1, [ip]
	d_ch3 = channel_3_pwm_pre - channel_3_pwm_prev;
    1632:	1bd2      	subs	r2, r2, r7
    1634:	4944      	ldr	r1, [pc, #272]	; (1748 <getCommands()+0x378>)
    1636:	600a      	str	r2, [r1, #0]
	d_ch4 = channel_4_pwm_pre - channel_4_pwm_prev;
    1638:	1b9b      	subs	r3, r3, r6
    163a:	4a44      	ldr	r2, [pc, #272]	; (174c <getCommands()+0x37c>)
    163c:	6013      	str	r3, [r2, #0]
	
	if (abs(d_ch1) > cutoff_val && ch1_CutCounter < 5 && doneWithSetup) {
    163e:	2c00      	cmp	r4, #0
    1640:	bfb8      	it	lt
    1642:	4264      	neglt	r4, r4
    1644:	4b42      	ldr	r3, [pc, #264]	; (1750 <getCommands()+0x380>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	429c      	cmp	r4, r3
    164a:	dd08      	ble.n	165e <getCommands()+0x28e>
    164c:	4b41      	ldr	r3, [pc, #260]	; (1754 <getCommands()+0x384>)
    164e:	681b      	ldr	r3, [r3, #0]
    1650:	2b04      	cmp	r3, #4
    1652:	dc04      	bgt.n	165e <getCommands()+0x28e>
    1654:	4b40      	ldr	r3, [pc, #256]	; (1758 <getCommands()+0x388>)
    1656:	781b      	ldrb	r3, [r3, #0]
    1658:	2b00      	cmp	r3, #0
    165a:	f040 80ad 	bne.w	17b8 <getCommands()+0x3e8>
		channel_1_pwm = channel_1_pwm_prev;
		Serial.println("Radio command spike detected (CH1)");
		ch1_CutCounter++;
	} else {
		channel_1_pwm = channel_1_pwm_pre;
    165e:	4b3f      	ldr	r3, [pc, #252]	; (175c <getCommands()+0x38c>)
    1660:	6018      	str	r0, [r3, #0]
    1662:	2300      	movs	r3, #0
		ch1_CutCounter++;
    1664:	4a3b      	ldr	r2, [pc, #236]	; (1754 <getCommands()+0x384>)
    1666:	6013      	str	r3, [r2, #0]
		ch1_CutCounter = 0;
	}
	if (abs(d_ch2) > cutoff_val && ch2_CutCounter < 5 && doneWithSetup) {
    1668:	4b3d      	ldr	r3, [pc, #244]	; (1760 <getCommands()+0x390>)
    166a:	681b      	ldr	r3, [r3, #0]
    166c:	2b00      	cmp	r3, #0
    166e:	bfb8      	it	lt
    1670:	425b      	neglt	r3, r3
    1672:	4a37      	ldr	r2, [pc, #220]	; (1750 <getCommands()+0x380>)
    1674:	6812      	ldr	r2, [r2, #0]
    1676:	4293      	cmp	r3, r2
    1678:	dd08      	ble.n	168c <getCommands()+0x2bc>
    167a:	4b3a      	ldr	r3, [pc, #232]	; (1764 <getCommands()+0x394>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	2b04      	cmp	r3, #4
    1680:	dc04      	bgt.n	168c <getCommands()+0x2bc>
    1682:	4b35      	ldr	r3, [pc, #212]	; (1758 <getCommands()+0x388>)
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	2b00      	cmp	r3, #0
    1688:	f040 80a6 	bne.w	17d8 <getCommands()+0x408>
		channel_2_pwm = channel_2_pwm_prev;
		Serial.println("Radio command spike detected (CH2)");
		ch2_CutCounter++;
	} else {
		channel_2_pwm = channel_2_pwm_pre;
    168c:	4b1d      	ldr	r3, [pc, #116]	; (1704 <getCommands()+0x334>)
    168e:	681a      	ldr	r2, [r3, #0]
    1690:	4b35      	ldr	r3, [pc, #212]	; (1768 <getCommands()+0x398>)
    1692:	601a      	str	r2, [r3, #0]
    1694:	2300      	movs	r3, #0
		ch2_CutCounter++;
    1696:	4a33      	ldr	r2, [pc, #204]	; (1764 <getCommands()+0x394>)
    1698:	6013      	str	r3, [r2, #0]
		ch2_CutCounter = 0;
	}
	if (abs(d_ch3) > cutoff_val && ch3_CutCounter < 5 && doneWithSetup) {
    169a:	4b2b      	ldr	r3, [pc, #172]	; (1748 <getCommands()+0x378>)
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	2b00      	cmp	r3, #0
    16a0:	bfb8      	it	lt
    16a2:	425b      	neglt	r3, r3
    16a4:	4a2a      	ldr	r2, [pc, #168]	; (1750 <getCommands()+0x380>)
    16a6:	6812      	ldr	r2, [r2, #0]
    16a8:	4293      	cmp	r3, r2
    16aa:	dd08      	ble.n	16be <getCommands()+0x2ee>
    16ac:	4b2f      	ldr	r3, [pc, #188]	; (176c <getCommands()+0x39c>)
    16ae:	681b      	ldr	r3, [r3, #0]
    16b0:	2b04      	cmp	r3, #4
    16b2:	dc04      	bgt.n	16be <getCommands()+0x2ee>
    16b4:	4b28      	ldr	r3, [pc, #160]	; (1758 <getCommands()+0x388>)
    16b6:	781b      	ldrb	r3, [r3, #0]
    16b8:	2b00      	cmp	r3, #0
    16ba:	f040 809f 	bne.w	17fc <getCommands()+0x42c>
		channel_3_pwm = channel_3_pwm_prev;
		Serial.println("Radio command spike detected (CH3)");
		ch3_CutCounter++;
	} else {
		channel_3_pwm = channel_3_pwm_pre;
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <getCommands()+0x338>)
    16c0:	681a      	ldr	r2, [r3, #0]
    16c2:	4b2b      	ldr	r3, [pc, #172]	; (1770 <getCommands()+0x3a0>)
    16c4:	601a      	str	r2, [r3, #0]
    16c6:	2300      	movs	r3, #0
		ch3_CutCounter++;
    16c8:	4a28      	ldr	r2, [pc, #160]	; (176c <getCommands()+0x39c>)
    16ca:	6013      	str	r3, [r2, #0]
		ch3_CutCounter = 0;
	}
	if (abs(d_ch4) > cutoff_val && ch4_CutCounter < 5 && doneWithSetup) {
    16cc:	4b1f      	ldr	r3, [pc, #124]	; (174c <getCommands()+0x37c>)
    16ce:	681b      	ldr	r3, [r3, #0]
    16d0:	2b00      	cmp	r3, #0
    16d2:	bfb8      	it	lt
    16d4:	425b      	neglt	r3, r3
    16d6:	4a1e      	ldr	r2, [pc, #120]	; (1750 <getCommands()+0x380>)
    16d8:	6812      	ldr	r2, [r2, #0]
    16da:	4293      	cmp	r3, r2
    16dc:	dd54      	ble.n	1788 <getCommands()+0x3b8>
    16de:	e04b      	b.n	1778 <getCommands()+0x3a8>
    16e0:	40000000 	.word	0x40000000
    16e4:	3fd33333 	.word	0x3fd33333
    16e8:	200053d2 	.word	0x200053d2
    16ec:	200053d1 	.word	0x200053d1
    16f0:	20005334 	.word	0x20005334
    16f4:	200051f8 	.word	0x200051f8
    16f8:	3f1d70a4 	.word	0x3f1d70a4
    16fc:	445fc000 	.word	0x445fc000
    1700:	20005018 	.word	0x20005018
    1704:	20005024 	.word	0x20005024
    1708:	20005030 	.word	0x20005030
    170c:	2000503c 	.word	0x2000503c
    1710:	20005044 	.word	0x20005044
    1714:	20005048 	.word	0x20005048
    1718:	2000504c 	.word	0x2000504c
    171c:	20005050 	.word	0x20005050
    1720:	20005054 	.word	0x20005054
    1724:	20005004 	.word	0x20005004
    1728:	20005008 	.word	0x20005008
    172c:	2000500c 	.word	0x2000500c
    1730:	20005010 	.word	0x20005010
    1734:	2000501c 	.word	0x2000501c
    1738:	3f333333 	.word	0x3f333333
    173c:	20005028 	.word	0x20005028
    1740:	20005034 	.word	0x20005034
    1744:	20005040 	.word	0x20005040
    1748:	20005070 	.word	0x20005070
    174c:	20005074 	.word	0x20005074
    1750:	200039a0 	.word	0x200039a0
    1754:	20004ff4 	.word	0x20004ff4
    1758:	200053cb 	.word	0x200053cb
    175c:	20005014 	.word	0x20005014
    1760:	2000506c 	.word	0x2000506c
    1764:	20004ff8 	.word	0x20004ff8
    1768:	20005020 	.word	0x20005020
    176c:	20004ffc 	.word	0x20004ffc
    1770:	2000502c 	.word	0x2000502c
    1774:	20005068 	.word	0x20005068
    1778:	4b32      	ldr	r3, [pc, #200]	; (1844 <getCommands()+0x474>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	2b04      	cmp	r3, #4
    177e:	dc03      	bgt.n	1788 <getCommands()+0x3b8>
    1780:	4b31      	ldr	r3, [pc, #196]	; (1848 <getCommands()+0x478>)
    1782:	781b      	ldrb	r3, [r3, #0]
    1784:	2b00      	cmp	r3, #0
    1786:	d14b      	bne.n	1820 <getCommands()+0x450>
		channel_4_pwm = channel_4_pwm_prev;
		Serial.println("Radio command spike detected (CH4)");
		ch4_CutCounter++;
	} else {
		channel_4_pwm = channel_4_pwm_pre;
    1788:	4b30      	ldr	r3, [pc, #192]	; (184c <getCommands()+0x47c>)
    178a:	681a      	ldr	r2, [r3, #0]
    178c:	4b30      	ldr	r3, [pc, #192]	; (1850 <getCommands()+0x480>)
    178e:	601a      	str	r2, [r3, #0]
    1790:	2300      	movs	r3, #0
		ch4_CutCounter++;
    1792:	4a2c      	ldr	r2, [pc, #176]	; (1844 <getCommands()+0x474>)
    1794:	6013      	str	r3, [r2, #0]
		ch4_CutCounter = 0;
	}

	// Update prev values
  channel_1_pwm_prev = channel_1_pwm;
    1796:	4b2f      	ldr	r3, [pc, #188]	; (1854 <getCommands()+0x484>)
    1798:	681a      	ldr	r2, [r3, #0]
    179a:	4b2f      	ldr	r3, [pc, #188]	; (1858 <getCommands()+0x488>)
    179c:	601a      	str	r2, [r3, #0]
  channel_2_pwm_prev = channel_2_pwm;
    179e:	4b2f      	ldr	r3, [pc, #188]	; (185c <getCommands()+0x48c>)
    17a0:	681a      	ldr	r2, [r3, #0]
    17a2:	4b2f      	ldr	r3, [pc, #188]	; (1860 <getCommands()+0x490>)
    17a4:	601a      	str	r2, [r3, #0]
  channel_3_pwm_prev = channel_3_pwm;
    17a6:	4b2f      	ldr	r3, [pc, #188]	; (1864 <getCommands()+0x494>)
    17a8:	681a      	ldr	r2, [r3, #0]
    17aa:	4b2f      	ldr	r3, [pc, #188]	; (1868 <getCommands()+0x498>)
    17ac:	601a      	str	r2, [r3, #0]
  channel_4_pwm_prev = channel_4_pwm;
    17ae:	4b28      	ldr	r3, [pc, #160]	; (1850 <getCommands()+0x480>)
    17b0:	681a      	ldr	r2, [r3, #0]
    17b2:	4b2e      	ldr	r3, [pc, #184]	; (186c <getCommands()+0x49c>)
    17b4:	601a      	str	r2, [r3, #0]

	

}
    17b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		channel_1_pwm = channel_1_pwm_prev;
    17b8:	4b26      	ldr	r3, [pc, #152]	; (1854 <getCommands()+0x484>)
    17ba:	601d      	str	r5, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    17bc:	4c2c      	ldr	r4, [pc, #176]	; (1870 <getCommands()+0x4a0>)
    17be:	6823      	ldr	r3, [r4, #0]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	2222      	movs	r2, #34	; 0x22
    17c4:	492b      	ldr	r1, [pc, #172]	; (1874 <getCommands()+0x4a4>)
    17c6:	4620      	mov	r0, r4
    17c8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    17ca:	4620      	mov	r0, r4
    17cc:	f00b f863 	bl	c896 <Print::println()>
		ch1_CutCounter++;
    17d0:	4b29      	ldr	r3, [pc, #164]	; (1878 <getCommands()+0x4a8>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	3301      	adds	r3, #1
    17d6:	e745      	b.n	1664 <getCommands()+0x294>
		channel_2_pwm = channel_2_pwm_prev;
    17d8:	4b21      	ldr	r3, [pc, #132]	; (1860 <getCommands()+0x490>)
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	4b1f      	ldr	r3, [pc, #124]	; (185c <getCommands()+0x48c>)
    17de:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    17e0:	4c23      	ldr	r4, [pc, #140]	; (1870 <getCommands()+0x4a0>)
    17e2:	6823      	ldr	r3, [r4, #0]
    17e4:	685b      	ldr	r3, [r3, #4]
    17e6:	2222      	movs	r2, #34	; 0x22
    17e8:	4924      	ldr	r1, [pc, #144]	; (187c <getCommands()+0x4ac>)
    17ea:	4620      	mov	r0, r4
    17ec:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    17ee:	4620      	mov	r0, r4
    17f0:	f00b f851 	bl	c896 <Print::println()>
		ch2_CutCounter++;
    17f4:	4b22      	ldr	r3, [pc, #136]	; (1880 <getCommands()+0x4b0>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	3301      	adds	r3, #1
    17fa:	e74c      	b.n	1696 <getCommands()+0x2c6>
		channel_3_pwm = channel_3_pwm_prev;
    17fc:	4b1a      	ldr	r3, [pc, #104]	; (1868 <getCommands()+0x498>)
    17fe:	681a      	ldr	r2, [r3, #0]
    1800:	4b18      	ldr	r3, [pc, #96]	; (1864 <getCommands()+0x494>)
    1802:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1804:	4c1a      	ldr	r4, [pc, #104]	; (1870 <getCommands()+0x4a0>)
    1806:	6823      	ldr	r3, [r4, #0]
    1808:	685b      	ldr	r3, [r3, #4]
    180a:	2222      	movs	r2, #34	; 0x22
    180c:	491d      	ldr	r1, [pc, #116]	; (1884 <getCommands()+0x4b4>)
    180e:	4620      	mov	r0, r4
    1810:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1812:	4620      	mov	r0, r4
    1814:	f00b f83f 	bl	c896 <Print::println()>
		ch3_CutCounter++;
    1818:	4b1b      	ldr	r3, [pc, #108]	; (1888 <getCommands()+0x4b8>)
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	3301      	adds	r3, #1
    181e:	e753      	b.n	16c8 <getCommands()+0x2f8>
		channel_4_pwm = channel_4_pwm_prev;
    1820:	4b12      	ldr	r3, [pc, #72]	; (186c <getCommands()+0x49c>)
    1822:	681a      	ldr	r2, [r3, #0]
    1824:	4b0a      	ldr	r3, [pc, #40]	; (1850 <getCommands()+0x480>)
    1826:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
    1828:	4c11      	ldr	r4, [pc, #68]	; (1870 <getCommands()+0x4a0>)
    182a:	6823      	ldr	r3, [r4, #0]
    182c:	685b      	ldr	r3, [r3, #4]
    182e:	2222      	movs	r2, #34	; 0x22
    1830:	4916      	ldr	r1, [pc, #88]	; (188c <getCommands()+0x4bc>)
    1832:	4620      	mov	r0, r4
    1834:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1836:	4620      	mov	r0, r4
    1838:	f00b f82d 	bl	c896 <Print::println()>
		ch4_CutCounter++;
    183c:	4b01      	ldr	r3, [pc, #4]	; (1844 <getCommands()+0x474>)
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	3301      	adds	r3, #1
    1842:	e7a6      	b.n	1792 <getCommands()+0x3c2>
    1844:	20005000 	.word	0x20005000
    1848:	200053cb 	.word	0x200053cb
    184c:	2000503c 	.word	0x2000503c
    1850:	20005038 	.word	0x20005038
    1854:	20005014 	.word	0x20005014
    1858:	2000501c 	.word	0x2000501c
    185c:	20005020 	.word	0x20005020
    1860:	20005028 	.word	0x20005028
    1864:	2000502c 	.word	0x2000502c
    1868:	20005034 	.word	0x20005034
    186c:	20005040 	.word	0x20005040
    1870:	20003354 	.word	0x20003354
    1874:	20001c80 	.word	0x20001c80
    1878:	20004ff4 	.word	0x20004ff4
    187c:	20001ca4 	.word	0x20001ca4
    1880:	20004ff8 	.word	0x20004ff8
    1884:	20001cc8 	.word	0x20001cc8
    1888:	20004ffc 	.word	0x20004ffc
    188c:	20001cec 	.word	0x20001cec

00001890 <failSafe()>:
  int check2 = 0;
  int check3 = 0;
  int check4 = 0;
  int check5 = 0;
  int check6 = 0;
	failureFlag = 0;
    1890:	4b28      	ldr	r3, [pc, #160]	; (1934 <failSafe()+0xa4>)
    1892:	2200      	movs	r2, #0
    1894:	701a      	strb	r2, [r3, #0]

  //Triggers for failure criteria
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
  if (channel_2_pwm > maxVal || channel_2_pwm < minVal) check2 = 1;
    1896:	4b28      	ldr	r3, [pc, #160]	; (1938 <failSafe()+0xa8>)
    1898:	681a      	ldr	r2, [r3, #0]
    189a:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if (channel_1_pwm > maxVal || channel_1_pwm < minVal) check1 = 1;
    189e:	4b27      	ldr	r3, [pc, #156]	; (193c <failSafe()+0xac>)
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    18a6:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
    18aa:	bf94      	ite	ls
    18ac:	2300      	movls	r3, #0
    18ae:	2301      	movhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;

  //If any failures, set to default failsafe values
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18b0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18b4:	bf88      	it	hi
    18b6:	3301      	addhi	r3, #1
  if (channel_3_pwm > maxVal || channel_3_pwm < minVal) check3 = 1;
    18b8:	4a21      	ldr	r2, [pc, #132]	; (1940 <failSafe()+0xb0>)
    18ba:	6812      	ldr	r2, [r2, #0]
    18bc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18c0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18c4:	bf88      	it	hi
    18c6:	3301      	addhi	r3, #1
  if (channel_4_pwm > maxVal || channel_4_pwm < minVal) check4 = 1;
    18c8:	4a1e      	ldr	r2, [pc, #120]	; (1944 <failSafe()+0xb4>)
    18ca:	6812      	ldr	r2, [r2, #0]
    18cc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18d0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18d4:	bf88      	it	hi
    18d6:	3301      	addhi	r3, #1
  if (channel_5_pwm > maxVal || channel_5_pwm < minVal) check5 = 1;
    18d8:	4a1b      	ldr	r2, [pc, #108]	; (1948 <failSafe()+0xb8>)
    18da:	6812      	ldr	r2, [r2, #0]
    18dc:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18e0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18e4:	bf88      	it	hi
    18e6:	3301      	addhi	r3, #1
  if (channel_6_pwm > maxVal || channel_6_pwm < minVal) check6 = 1;
    18e8:	4a18      	ldr	r2, [pc, #96]	; (194c <failSafe()+0xbc>)
    18ea:	6812      	ldr	r2, [r2, #0]
    18ec:	f5a2 7248 	sub.w	r2, r2, #800	; 0x320
  if ((check1 + check2 + check3 + check4 + check5 + check6) > 0) {
    18f0:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    18f4:	bf88      	it	hi
    18f6:	3301      	addhi	r3, #1
    18f8:	b1d3      	cbz	r3, 1930 <failSafe()+0xa0>
    channel_1_pwm = channel_1_fs;
    18fa:	4b15      	ldr	r3, [pc, #84]	; (1950 <failSafe()+0xc0>)
    18fc:	681a      	ldr	r2, [r3, #0]
    18fe:	4b0f      	ldr	r3, [pc, #60]	; (193c <failSafe()+0xac>)
    1900:	601a      	str	r2, [r3, #0]
    channel_2_pwm = channel_2_fs;
    1902:	4b14      	ldr	r3, [pc, #80]	; (1954 <failSafe()+0xc4>)
    1904:	681a      	ldr	r2, [r3, #0]
    1906:	4b0c      	ldr	r3, [pc, #48]	; (1938 <failSafe()+0xa8>)
    1908:	601a      	str	r2, [r3, #0]
    channel_3_pwm = channel_3_fs;
    190a:	4b13      	ldr	r3, [pc, #76]	; (1958 <failSafe()+0xc8>)
    190c:	681a      	ldr	r2, [r3, #0]
    190e:	4b0c      	ldr	r3, [pc, #48]	; (1940 <failSafe()+0xb0>)
    1910:	601a      	str	r2, [r3, #0]
    channel_4_pwm = channel_4_fs;
    1912:	4b12      	ldr	r3, [pc, #72]	; (195c <failSafe()+0xcc>)
    1914:	681a      	ldr	r2, [r3, #0]
    1916:	4b0b      	ldr	r3, [pc, #44]	; (1944 <failSafe()+0xb4>)
    1918:	601a      	str	r2, [r3, #0]
    channel_5_pwm = channel_5_fs;
    191a:	4b11      	ldr	r3, [pc, #68]	; (1960 <failSafe()+0xd0>)
    191c:	681a      	ldr	r2, [r3, #0]
    191e:	4b0a      	ldr	r3, [pc, #40]	; (1948 <failSafe()+0xb8>)
    1920:	601a      	str	r2, [r3, #0]
    channel_6_pwm = channel_6_fs;
    1922:	4b10      	ldr	r3, [pc, #64]	; (1964 <failSafe()+0xd4>)
    1924:	681a      	ldr	r2, [r3, #0]
    1926:	4b09      	ldr	r3, [pc, #36]	; (194c <failSafe()+0xbc>)
    1928:	601a      	str	r2, [r3, #0]
		failureFlag = 1;
    192a:	4b02      	ldr	r3, [pc, #8]	; (1934 <failSafe()+0xa4>)
    192c:	2201      	movs	r2, #1
    192e:	701a      	strb	r2, [r3, #0]
  }
}
    1930:	4770      	bx	lr
    1932:	bf00      	nop
    1934:	200053cd 	.word	0x200053cd
    1938:	20005020 	.word	0x20005020
    193c:	20005014 	.word	0x20005014
    1940:	2000502c 	.word	0x2000502c
    1944:	20005038 	.word	0x20005038
    1948:	20005044 	.word	0x20005044
    194c:	20005048 	.word	0x20005048
    1950:	2000397c 	.word	0x2000397c
    1954:	20003980 	.word	0x20003980
    1958:	20003984 	.word	0x20003984
    195c:	20003988 	.word	0x20003988
    1960:	2000398c 	.word	0x2000398c
    1964:	20003990 	.word	0x20003990

00001968 <commandMotors()>:

void commandMotors() {
    1968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    196c:	b085      	sub	sp, #20
  int flagM4 = 0;
  int flagM5 = 0;
  int flagM6 = 0;
  
  //Write all motor pins high
  digitalWrite(m1Pin, HIGH);
    196e:	2101      	movs	r1, #1
    1970:	2000      	movs	r0, #0
    1972:	f00b fcff 	bl	d374 <digitalWrite>
  digitalWrite(m2Pin, HIGH);
    1976:	2101      	movs	r1, #1
    1978:	4608      	mov	r0, r1
    197a:	f00b fcfb 	bl	d374 <digitalWrite>
  digitalWrite(m3Pin, HIGH);
    197e:	2101      	movs	r1, #1
    1980:	2002      	movs	r0, #2
    1982:	f00b fcf7 	bl	d374 <digitalWrite>
  digitalWrite(m4Pin, HIGH);
    1986:	2101      	movs	r1, #1
    1988:	2003      	movs	r0, #3
    198a:	f00b fcf3 	bl	d374 <digitalWrite>
  digitalWrite(m5Pin, HIGH);
    198e:	2101      	movs	r1, #1
    1990:	2004      	movs	r0, #4
    1992:	f00b fcef 	bl	d374 <digitalWrite>
  digitalWrite(m6Pin, HIGH);
    1996:	2101      	movs	r1, #1
    1998:	2005      	movs	r0, #5
    199a:	f00b fceb 	bl	d374 <digitalWrite>
  pulseStart = micros();
    199e:	f00b fca9 	bl	d2f4 <micros>
    19a2:	4606      	mov	r6, r0
  int flagM6 = 0;
    19a4:	f04f 0a00 	mov.w	sl, #0
  int flagM5 = 0;
    19a8:	46d3      	mov	fp, sl
  int flagM4 = 0;
    19aa:	f8cd a00c 	str.w	sl, [sp, #12]
  int flagM3 = 0;
    19ae:	f8cd a008 	str.w	sl, [sp, #8]
  int flagM2 = 0;
    19b2:	f8cd a004 	str.w	sl, [sp, #4]
  int flagM1 = 0;
    19b6:	f8cd a000 	str.w	sl, [sp]
  int wentLow = 0;
    19ba:	4655      	mov	r5, sl

  //Write each motor pin low as correct pulse length is reached
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    timer = micros();
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    19bc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1a9c <commandMotors()+0x134>
      digitalWrite(m1Pin, LOW);
      wentLow = wentLow + 1;
      flagM1 = 1;
    }
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    19c0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1aa0 <commandMotors()+0x138>
      digitalWrite(m2Pin, LOW);
      wentLow = wentLow + 1;
      flagM2 = 1;
    }
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    19c4:	4f31      	ldr	r7, [pc, #196]	; (1a8c <commandMotors()+0x124>)
    19c6:	e029      	b.n	1a1c <commandMotors()+0xb4>
      digitalWrite(m1Pin, LOW);
    19c8:	2100      	movs	r1, #0
    19ca:	4608      	mov	r0, r1
    19cc:	f00b fcd2 	bl	d374 <digitalWrite>
      wentLow = wentLow + 1;
    19d0:	3501      	adds	r5, #1
      flagM1 = 1;
    19d2:	2301      	movs	r3, #1
    19d4:	9300      	str	r3, [sp, #0]
    19d6:	e02b      	b.n	1a30 <commandMotors()+0xc8>
      digitalWrite(m2Pin, LOW);
    19d8:	2100      	movs	r1, #0
    19da:	2001      	movs	r0, #1
    19dc:	f00b fcca 	bl	d374 <digitalWrite>
      wentLow = wentLow + 1;
    19e0:	3501      	adds	r5, #1
      flagM2 = 1;
    19e2:	2301      	movs	r3, #1
    19e4:	9301      	str	r3, [sp, #4]
    19e6:	e02a      	b.n	1a3e <commandMotors()+0xd6>
      digitalWrite(m3Pin, LOW);
    19e8:	2100      	movs	r1, #0
    19ea:	2002      	movs	r0, #2
    19ec:	f00b fcc2 	bl	d374 <digitalWrite>
      wentLow = wentLow + 1;
    19f0:	3501      	adds	r5, #1
      flagM3 = 1;
    19f2:	2301      	movs	r3, #1
    19f4:	9302      	str	r3, [sp, #8]
    19f6:	e028      	b.n	1a4a <commandMotors()+0xe2>
    }
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
      digitalWrite(m4Pin, LOW);
    19f8:	2100      	movs	r1, #0
    19fa:	2003      	movs	r0, #3
    19fc:	f00b fcba 	bl	d374 <digitalWrite>
      wentLow = wentLow + 1;
    1a00:	3501      	adds	r5, #1
      flagM4 = 1;
    1a02:	2301      	movs	r3, #1
    1a04:	9303      	str	r3, [sp, #12]
    1a06:	e027      	b.n	1a58 <commandMotors()+0xf0>
    } 
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
      digitalWrite(m5Pin, LOW);
    1a08:	2100      	movs	r1, #0
    1a0a:	2004      	movs	r0, #4
    1a0c:	f00b fcb2 	bl	d374 <digitalWrite>
      wentLow = wentLow + 1;
    1a10:	3501      	adds	r5, #1
      flagM5 = 1;
    1a12:	f04f 0b01 	mov.w	fp, #1
    1a16:	e026      	b.n	1a66 <commandMotors()+0xfe>
  while (wentLow < 6 ) { //Keep going until final (6th) pulse is finished, then done
    1a18:	2d05      	cmp	r5, #5
    1a1a:	dc33      	bgt.n	1a84 <commandMotors()+0x11c>
    timer = micros();
    1a1c:	f00b fc6a 	bl	d2f4 <micros>
    if ((m1_command_PWM <= timer - pulseStart) && (flagM1==0)) {
    1a20:	1b84      	subs	r4, r0, r6
    1a22:	f8d9 3000 	ldr.w	r3, [r9]
    1a26:	429c      	cmp	r4, r3
    1a28:	db02      	blt.n	1a30 <commandMotors()+0xc8>
    1a2a:	9b00      	ldr	r3, [sp, #0]
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	d0cb      	beq.n	19c8 <commandMotors()+0x60>
    if ((m2_command_PWM <= timer - pulseStart) && (flagM2==0)) {
    1a30:	f8d8 3000 	ldr.w	r3, [r8]
    1a34:	429c      	cmp	r4, r3
    1a36:	db02      	blt.n	1a3e <commandMotors()+0xd6>
    1a38:	9b01      	ldr	r3, [sp, #4]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d0cc      	beq.n	19d8 <commandMotors()+0x70>
    if ((m3_command_PWM <= timer - pulseStart) && (flagM3==0)) {
    1a3e:	683b      	ldr	r3, [r7, #0]
    1a40:	429c      	cmp	r4, r3
    1a42:	db02      	blt.n	1a4a <commandMotors()+0xe2>
    1a44:	9b02      	ldr	r3, [sp, #8]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d0ce      	beq.n	19e8 <commandMotors()+0x80>
    if ((m4_command_PWM <= timer - pulseStart) && (flagM4==0)) {
    1a4a:	4b11      	ldr	r3, [pc, #68]	; (1a90 <commandMotors()+0x128>)
    1a4c:	681b      	ldr	r3, [r3, #0]
    1a4e:	429c      	cmp	r4, r3
    1a50:	db02      	blt.n	1a58 <commandMotors()+0xf0>
    1a52:	9b03      	ldr	r3, [sp, #12]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d0cf      	beq.n	19f8 <commandMotors()+0x90>
    if ((m5_command_PWM <= timer - pulseStart) && (flagM5==0)) {
    1a58:	4b0e      	ldr	r3, [pc, #56]	; (1a94 <commandMotors()+0x12c>)
    1a5a:	681b      	ldr	r3, [r3, #0]
    1a5c:	429c      	cmp	r4, r3
    1a5e:	db02      	blt.n	1a66 <commandMotors()+0xfe>
    1a60:	f1bb 0f00 	cmp.w	fp, #0
    1a64:	d0d0      	beq.n	1a08 <commandMotors()+0xa0>
    } 
    if ((m6_command_PWM <= timer - pulseStart) && (flagM6==0)) {
    1a66:	4b0c      	ldr	r3, [pc, #48]	; (1a98 <commandMotors()+0x130>)
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	429c      	cmp	r4, r3
    1a6c:	dbd4      	blt.n	1a18 <commandMotors()+0xb0>
    1a6e:	f1ba 0f00 	cmp.w	sl, #0
    1a72:	d1d1      	bne.n	1a18 <commandMotors()+0xb0>
      digitalWrite(m6Pin, LOW);
    1a74:	2100      	movs	r1, #0
    1a76:	2005      	movs	r0, #5
    1a78:	f00b fc7c 	bl	d374 <digitalWrite>
      wentLow = wentLow + 1;
    1a7c:	3501      	adds	r5, #1
      flagM6 = 1;
    1a7e:	f04f 0a01 	mov.w	sl, #1
    1a82:	e7c9      	b.n	1a18 <commandMotors()+0xb0>
    } 
  }
}
    1a84:	b005      	add	sp, #20
    1a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8a:	bf00      	nop
    1a8c:	200050f0 	.word	0x200050f0
    1a90:	200050f8 	.word	0x200050f8
    1a94:	20005100 	.word	0x20005100
    1a98:	20005108 	.word	0x20005108
    1a9c:	200050e0 	.word	0x200050e0
    1aa0:	200050e8 	.word	0x200050e8

00001aa4 <armMotors()>:

void armMotors() {
    1aa4:	b538      	push	{r3, r4, r5, lr}
    1aa6:	2433      	movs	r4, #51	; 0x33
   *  function is used in the main loop. Ensures motors arm within the void setup() where there are some delays
   *  for other processes that sometimes prevent motors from arming.
   */
  for (int i = 0; i <= 50; i++) {
    commandMotors();
    delay(2);
    1aa8:	2502      	movs	r5, #2
    commandMotors();
    1aaa:	f7ff ff5d 	bl	1968 <commandMotors()>
    delay(2);
    1aae:	4628      	mov	r0, r5
    1ab0:	f00b fc4a 	bl	d348 <delay>
  for (int i = 0; i <= 50; i++) {
    1ab4:	3c01      	subs	r4, #1
    1ab6:	d1f8      	bne.n	1aaa <armMotors()+0x6>
  }
}
    1ab8:	bd38      	pop	{r3, r4, r5, pc}
	...

00001abc <throttleCut()>:
   * Monitors the state of radio command channel_5_pwm and directly sets the mx_command_PWM values to minimum (120 is
   * minimum for oneshot125 protocol, 0 is minimum for standard PWM servo library used) if channel 5 is high. This is the last function 
   * called before commandMotors() is called so that the last thing checked is if the user is giving permission to command
   * the motors to anything other than minimum value. Safety first. 
   */
  if (channel_5_pwm > 1500) {
    1abc:	4b0a      	ldr	r3, [pc, #40]	; (1ae8 <throttleCut()+0x2c>)
    1abe:	681a      	ldr	r2, [r3, #0]
    1ac0:	f240 53dc 	movw	r3, #1500	; 0x5dc
    1ac4:	429a      	cmp	r2, r3
    1ac6:	dd0e      	ble.n	1ae6 <throttleCut()+0x2a>
    // m4_command_PWM = 120;
    // m5_command_PWM = 120;
    // m6_command_PWM = 120;
    
    //Uncomment if using servo PWM variables to control motor ESCs
    s1_command_PWM = 0;
    1ac8:	2300      	movs	r3, #0
    1aca:	4a08      	ldr	r2, [pc, #32]	; (1aec <throttleCut()+0x30>)
    1acc:	6013      	str	r3, [r2, #0]
    s2_command_PWM = 0;
    1ace:	4a08      	ldr	r2, [pc, #32]	; (1af0 <throttleCut()+0x34>)
    1ad0:	6013      	str	r3, [r2, #0]
    s3_command_PWM = 0;
    1ad2:	4a08      	ldr	r2, [pc, #32]	; (1af4 <throttleCut()+0x38>)
    1ad4:	6013      	str	r3, [r2, #0]
    s4_command_PWM = 0;
    1ad6:	4a08      	ldr	r2, [pc, #32]	; (1af8 <throttleCut()+0x3c>)
    1ad8:	6013      	str	r3, [r2, #0]
    s5_command_PWM = 0;
    1ada:	4a08      	ldr	r2, [pc, #32]	; (1afc <throttleCut()+0x40>)
    1adc:	6013      	str	r3, [r2, #0]
    s6_command_PWM = 0;
    1ade:	4a08      	ldr	r2, [pc, #32]	; (1b00 <throttleCut()+0x44>)
    1ae0:	6013      	str	r3, [r2, #0]
    s7_command_PWM = 0;
    1ae2:	4a08      	ldr	r2, [pc, #32]	; (1b04 <throttleCut()+0x48>)
    1ae4:	6013      	str	r3, [r2, #0]
  }
}
    1ae6:	4770      	bx	lr
    1ae8:	20005044 	.word	0x20005044
    1aec:	200051b0 	.word	0x200051b0
    1af0:	200051b8 	.word	0x200051b8
    1af4:	200051c0 	.word	0x200051c0
    1af8:	200051c8 	.word	0x200051c8
    1afc:	200051d0 	.word	0x200051d0
    1b00:	200051d8 	.word	0x200051d8
    1b04:	200051e0 	.word	0x200051e0

00001b08 <loopRate(int)>:
  #endif
  Serial.println("Error: MPU9250 not selected. Cannot calibrate non-existent magnetometer.");
  while(1); //Halt code so it won't enter main loop until this function commented out
}

void loopRate(int freq) {
    1b08:	b510      	push	{r4, lr}
    1b0a:	ed2d 8b02 	vpush	{d8}
    1b0e:	ee06 0a10 	vmov	s12, r0
   * background cause the loop rate to fluctuate. This function basically just waits at the end of every loop iteration until 
   * the correct time has passed since the start of the current loop for the desired loop rate in Hz. 2kHz is a good rate to 
   * be at because the loop nominally will run between 2.8kHz - 4.2kHz. This lets us have a little room to add extra computations
   * and remain above 2kHz, without needing to retune all of our filtering parameters.
   */
  float invFreq = 1.0/freq*1000000.0;
    1b12:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    1b16:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    1b1a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1b1e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 1b68 <loopRate(int)+0x60>
    1b22:	ee27 7b06 	vmul.f64	d7, d7, d6
    1b26:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
  unsigned long checker = micros();
    1b2a:	f00b fbe3 	bl	d2f4 <micros>
  
  //Sit in loop until appropriate time has passed
  while (invFreq > (checker - current_time)) {
    1b2e:	4b10      	ldr	r3, [pc, #64]	; (1b70 <loopRate(int)+0x68>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	1ac0      	subs	r0, r0, r3
    1b34:	ee07 0a90 	vmov	s15, r0
    1b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1b3c:	eeb4 8ae7 	vcmpe.f32	s16, s15
    1b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b44:	dd0d      	ble.n	1b62 <loopRate(int)+0x5a>
    1b46:	4c0a      	ldr	r4, [pc, #40]	; (1b70 <loopRate(int)+0x68>)
    checker = micros();
    1b48:	f00b fbd4 	bl	d2f4 <micros>
  while (invFreq > (checker - current_time)) {
    1b4c:	6823      	ldr	r3, [r4, #0]
    1b4e:	1ac0      	subs	r0, r0, r3
    1b50:	ee07 0a90 	vmov	s15, r0
    1b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1b58:	eef4 7ac8 	vcmpe.f32	s15, s16
    1b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1b60:	d4f2      	bmi.n	1b48 <loopRate(int)+0x40>
  }
}
    1b62:	ecbd 8b02 	vpop	{d8}
    1b66:	bd10      	pop	{r4, pc}
    1b68:	00000000 	.word	0x00000000
    1b6c:	412e8480 	.word	0x412e8480
    1b70:	20005064 	.word	0x20005064

00001b74 <loopBlink()>:
void loopBlink() {
  //DESCRIPTION: Blink LED on board to indicate main loop is running
  /*
   * It looks cool.
   */
  if (current_time - blink_counter > blink_delay) {
    1b74:	4b11      	ldr	r3, [pc, #68]	; (1bbc <loopBlink()+0x48>)
    1b76:	681b      	ldr	r3, [r3, #0]
    1b78:	4a11      	ldr	r2, [pc, #68]	; (1bc0 <loopBlink()+0x4c>)
    1b7a:	6812      	ldr	r2, [r2, #0]
    1b7c:	1a9b      	subs	r3, r3, r2
    1b7e:	4a11      	ldr	r2, [pc, #68]	; (1bc4 <loopBlink()+0x50>)
    1b80:	6812      	ldr	r2, [r2, #0]
    1b82:	4293      	cmp	r3, r2
    1b84:	d800      	bhi.n	1b88 <loopBlink()+0x14>
    1b86:	4770      	bx	lr
void loopBlink() {
    1b88:	b510      	push	{r4, lr}
    blink_counter = micros();
    1b8a:	f00b fbb3 	bl	d2f4 <micros>
    1b8e:	4b0c      	ldr	r3, [pc, #48]	; (1bc0 <loopBlink()+0x4c>)
    1b90:	6018      	str	r0, [r3, #0]
    digitalWrite(13, blinkAlternate); //Pin 13 is built in LED
    1b92:	4c0d      	ldr	r4, [pc, #52]	; (1bc8 <loopBlink()+0x54>)
    1b94:	7821      	ldrb	r1, [r4, #0]
    1b96:	200d      	movs	r0, #13
    1b98:	f00b fbec 	bl	d374 <digitalWrite>
    
    if (blinkAlternate == 1) {
    1b9c:	7823      	ldrb	r3, [r4, #0]
    1b9e:	b12b      	cbz	r3, 1bac <loopBlink()+0x38>
      blinkAlternate = 0;
    1ba0:	2200      	movs	r2, #0
    1ba2:	7022      	strb	r2, [r4, #0]
      blink_delay = 100000;
    1ba4:	4b07      	ldr	r3, [pc, #28]	; (1bc4 <loopBlink()+0x50>)
    1ba6:	4a09      	ldr	r2, [pc, #36]	; (1bcc <loopBlink()+0x58>)
    1ba8:	601a      	str	r2, [r3, #0]
    else if (blinkAlternate == 0) {
      blinkAlternate = 1;
      blink_delay = 2000000;
      }
  }
}
    1baa:	bd10      	pop	{r4, pc}
      blinkAlternate = 1;
    1bac:	4b06      	ldr	r3, [pc, #24]	; (1bc8 <loopBlink()+0x54>)
    1bae:	2201      	movs	r2, #1
    1bb0:	701a      	strb	r2, [r3, #0]
      blink_delay = 2000000;
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <loopBlink()+0x50>)
    1bb4:	4a06      	ldr	r2, [pc, #24]	; (1bd0 <loopBlink()+0x5c>)
    1bb6:	601a      	str	r2, [r3, #0]
}
    1bb8:	e7f7      	b.n	1baa <loopBlink()+0x36>
    1bba:	bf00      	nop
    1bbc:	20005064 	.word	0x20005064
    1bc0:	20004fec 	.word	0x20004fec
    1bc4:	20004ff0 	.word	0x20004ff0
    1bc8:	200053c8 	.word	0x200053c8
    1bcc:	000186a0 	.word	0x000186a0
    1bd0:	001e8480 	.word	0x001e8480

00001bd4 <setupBlink(int, int, int)>:

void setupBlink(int numBlinks,int upTime, int downTime) {
    1bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //DESCRIPTION: Simple function to make LED on board blink as desired
  for (int j = 1; j<= numBlinks; j++) {
    1bd8:	1e06      	subs	r6, r0, #0
    1bda:	dd17      	ble.n	1c0c <setupBlink(int, int, int)+0x38>
    1bdc:	460f      	mov	r7, r1
    1bde:	4690      	mov	r8, r2
    1be0:	2401      	movs	r4, #1
    digitalWrite(13, LOW);
    1be2:	f04f 0a00 	mov.w	sl, #0
    1be6:	250d      	movs	r5, #13
    delay(downTime);
    digitalWrite(13, HIGH);
    1be8:	46a1      	mov	r9, r4
    digitalWrite(13, LOW);
    1bea:	4651      	mov	r1, sl
    1bec:	4628      	mov	r0, r5
    1bee:	f00b fbc1 	bl	d374 <digitalWrite>
    delay(downTime);
    1bf2:	4640      	mov	r0, r8
    1bf4:	f00b fba8 	bl	d348 <delay>
    digitalWrite(13, HIGH);
    1bf8:	4649      	mov	r1, r9
    1bfa:	4628      	mov	r0, r5
    1bfc:	f00b fbba 	bl	d374 <digitalWrite>
    delay(upTime);
    1c00:	4638      	mov	r0, r7
    1c02:	f00b fba1 	bl	d348 <delay>
  for (int j = 1; j<= numBlinks; j++) {
    1c06:	3401      	adds	r4, #1
    1c08:	42a6      	cmp	r6, r4
    1c0a:	daee      	bge.n	1bea <setupBlink(int, int, int)+0x16>
  }
}
    1c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001c10 <getJoyAngle()>:
    Serial.print(F("dt = "));
    Serial.println(dt*1000000.0);
  }
}

void getJoyAngle() {
    1c10:	b510      	push	{r4, lr}
	alphaCounts = analogRead(joyAlphaPin);
    1c12:	2029      	movs	r0, #41	; 0x29
    1c14:	f00b f9d2 	bl	cfbc <analogRead>
    1c18:	4c12      	ldr	r4, [pc, #72]	; (1c64 <getJoyAngle()+0x54>)
    1c1a:	6020      	str	r0, [r4, #0]
	betaCounts = analogRead(joyBetaPin);
    1c1c:	2028      	movs	r0, #40	; 0x28
    1c1e:	f00b f9cd 	bl	cfbc <analogRead>
    1c22:	4b11      	ldr	r3, [pc, #68]	; (1c68 <getJoyAngle()+0x58>)
    1c24:	6018      	str	r0, [r3, #0]
	alpha = alphaCounts*0.06577f - 40.0f;
    1c26:	edd4 7a00 	vldr	s15, [r4]
    1c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1c2e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 1c6c <getJoyAngle()+0x5c>
    1c32:	ee67 7a87 	vmul.f32	s15, s15, s14
    1c36:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 1c70 <getJoyAngle()+0x60>
    1c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1c3e:	4b0d      	ldr	r3, [pc, #52]	; (1c74 <getJoyAngle()+0x64>)
    1c40:	edc3 7a00 	vstr	s15, [r3]
	beta = betaCounts*(-0.05971f) + 36.0f;
    1c44:	ee07 0a90 	vmov	s15, r0
    1c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1c4c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1c78 <getJoyAngle()+0x68>
    1c50:	ee67 7a87 	vmul.f32	s15, s15, s14
    1c54:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1c7c <getJoyAngle()+0x6c>
    1c58:	ee77 7a87 	vadd.f32	s15, s15, s14
    1c5c:	4b08      	ldr	r3, [pc, #32]	; (1c80 <getJoyAngle()+0x70>)
    1c5e:	edc3 7a00 	vstr	s15, [r3]
}
    1c62:	bd10      	pop	{r4, pc}
    1c64:	20004fd8 	.word	0x20004fd8
    1c68:	20004fe4 	.word	0x20004fe4
    1c6c:	3d86b26c 	.word	0x3d86b26c
    1c70:	42200000 	.word	0x42200000
    1c74:	20004fd4 	.word	0x20004fd4
    1c78:	bd749279 	.word	0xbd749279
    1c7c:	42100000 	.word	0x42100000
    1c80:	20004fe0 	.word	0x20004fe0

00001c84 <openIris()>:

void openIris() {
    1c84:	b508      	push	{r3, lr}
	iris.write(60);
    1c86:	213c      	movs	r1, #60	; 0x3c
    1c88:	4803      	ldr	r0, [pc, #12]	; (1c98 <openIris()+0x14>)
    1c8a:	f003 f9dd 	bl	5048 <PWMServo::write(int)>
	servoLoopCounter = 0;
    1c8e:	4b03      	ldr	r3, [pc, #12]	; (1c9c <openIris()+0x18>)
    1c90:	2200      	movs	r2, #0
    1c92:	601a      	str	r2, [r3, #0]
}
    1c94:	bd08      	pop	{r3, pc}
    1c96:	bf00      	nop
    1c98:	200050dc 	.word	0x200050dc
    1c9c:	20005378 	.word	0x20005378

00001ca0 <closeIris()>:

void closeIris() {
    1ca0:	b508      	push	{r3, lr}
	if (servoLoopCounter < 500) {
    1ca2:	4b09      	ldr	r3, [pc, #36]	; (1cc8 <closeIris()+0x28>)
    1ca4:	681b      	ldr	r3, [r3, #0]
    1ca6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1caa:	da08      	bge.n	1cbe <closeIris()+0x1e>
		iris.write(138);
    1cac:	218a      	movs	r1, #138	; 0x8a
    1cae:	4807      	ldr	r0, [pc, #28]	; (1ccc <closeIris()+0x2c>)
    1cb0:	f003 f9ca 	bl	5048 <PWMServo::write(int)>
		servoLoopCounter++;
    1cb4:	4a04      	ldr	r2, [pc, #16]	; (1cc8 <closeIris()+0x28>)
    1cb6:	6813      	ldr	r3, [r2, #0]
    1cb8:	3301      	adds	r3, #1
    1cba:	6013      	str	r3, [r2, #0]
	} else {
		iris.write(135);
	}
}
    1cbc:	bd08      	pop	{r3, pc}
		iris.write(135);
    1cbe:	2187      	movs	r1, #135	; 0x87
    1cc0:	4802      	ldr	r0, [pc, #8]	; (1ccc <closeIris()+0x2c>)
    1cc2:	f003 f9c1 	bl	5048 <PWMServo::write(int)>
}
    1cc6:	e7f9      	b.n	1cbc <closeIris()+0x1c>
    1cc8:	20005378 	.word	0x20005378
    1ccc:	200050dc 	.word	0x200050dc

00001cd0 <getDataString()>:
		//Serial.print("BetaCounts: ");
		//Serial.println(betaCounts);
	}
}

String getDataString() {
    1cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cd4:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    1cd8:	4605      	mov	r5, r0
	String csvDataString;
    1cda:	2100      	movs	r1, #0
    1cdc:	f00b f889 	bl	cdf2 <String::String(char const*)>
	csvDataString = String(roll_IMU)
    1ce0:	2102      	movs	r1, #2
    1ce2:	4bcc      	ldr	r3, [pc, #816]	; (2014 <getDataString()+0x344>)
    1ce4:	ed93 0a00 	vldr	s0, [r3]
    1ce8:	a806      	add	r0, sp, #24
    1cea:	f00b f8eb 	bl	cec4 <String::String(float, unsigned char)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1cee:	a906      	add	r1, sp, #24
    1cf0:	a802      	add	r0, sp, #8
    1cf2:	f00b f8b0 	bl	ce56 <String::String(String const&)>
									+ ","
    1cf6:	4cc8      	ldr	r4, [pc, #800]	; (2018 <getDataString()+0x348>)
    1cf8:	4621      	mov	r1, r4
    1cfa:	a802      	add	r0, sp, #8
    1cfc:	f00b f936 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1d00:	4606      	mov	r6, r0
									+ String(pitch_IMU)
    1d02:	2102      	movs	r1, #2
    1d04:	4bc5      	ldr	r3, [pc, #788]	; (201c <getDataString()+0x34c>)
    1d06:	ed93 0a00 	vldr	s0, [r3]
    1d0a:	a80a      	add	r0, sp, #40	; 0x28
    1d0c:	f00b f8da 	bl	cec4 <String::String(float, unsigned char)>
    1d10:	a90a      	add	r1, sp, #40	; 0x28
    1d12:	4630      	mov	r0, r6
    1d14:	f00b f922 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d18:	4621      	mov	r1, r4
    1d1a:	f00b f927 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1d1e:	4606      	mov	r6, r0
									+ String(yaw_IMU)
    1d20:	2102      	movs	r1, #2
    1d22:	4bbf      	ldr	r3, [pc, #764]	; (2020 <getDataString()+0x350>)
    1d24:	ed93 0a00 	vldr	s0, [r3]
    1d28:	a80e      	add	r0, sp, #56	; 0x38
    1d2a:	f00b f8cb 	bl	cec4 <String::String(float, unsigned char)>
    1d2e:	a90e      	add	r1, sp, #56	; 0x38
    1d30:	4630      	mov	r0, r6
    1d32:	f00b f913 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d36:	4621      	mov	r1, r4
    1d38:	f00b f918 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1d3c:	4606      	mov	r6, r0
									+ String(alpha)
    1d3e:	2102      	movs	r1, #2
    1d40:	4bb8      	ldr	r3, [pc, #736]	; (2024 <getDataString()+0x354>)
    1d42:	ed93 0a00 	vldr	s0, [r3]
    1d46:	a812      	add	r0, sp, #72	; 0x48
    1d48:	f00b f8bc 	bl	cec4 <String::String(float, unsigned char)>
    1d4c:	a912      	add	r1, sp, #72	; 0x48
    1d4e:	4630      	mov	r0, r6
    1d50:	f00b f904 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d54:	4621      	mov	r1, r4
    1d56:	f00b f909 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1d5a:	4606      	mov	r6, r0
									+ String(beta)
    1d5c:	2102      	movs	r1, #2
    1d5e:	4bb2      	ldr	r3, [pc, #712]	; (2028 <getDataString()+0x358>)
    1d60:	ed93 0a00 	vldr	s0, [r3]
    1d64:	a816      	add	r0, sp, #88	; 0x58
    1d66:	f00b f8ad 	bl	cec4 <String::String(float, unsigned char)>
    1d6a:	a916      	add	r1, sp, #88	; 0x58
    1d6c:	4630      	mov	r0, r6
    1d6e:	f00b f8f5 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d72:	4621      	mov	r1, r4
    1d74:	f00b f8fa 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1d78:	4606      	mov	r6, r0
									+ String(roll_des)
    1d7a:	2102      	movs	r1, #2
    1d7c:	4bab      	ldr	r3, [pc, #684]	; (202c <getDataString()+0x35c>)
    1d7e:	ed93 0a00 	vldr	s0, [r3]
    1d82:	a81a      	add	r0, sp, #104	; 0x68
    1d84:	f00b f89e 	bl	cec4 <String::String(float, unsigned char)>
    1d88:	a91a      	add	r1, sp, #104	; 0x68
    1d8a:	4630      	mov	r0, r6
    1d8c:	f00b f8e6 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1d90:	4621      	mov	r1, r4
    1d92:	f00b f8eb 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1d96:	4606      	mov	r6, r0
									+ String(pitch_des)
    1d98:	2102      	movs	r1, #2
    1d9a:	4ba5      	ldr	r3, [pc, #660]	; (2030 <getDataString()+0x360>)
    1d9c:	ed93 0a00 	vldr	s0, [r3]
    1da0:	a81e      	add	r0, sp, #120	; 0x78
    1da2:	f00b f88f 	bl	cec4 <String::String(float, unsigned char)>
    1da6:	a91e      	add	r1, sp, #120	; 0x78
    1da8:	4630      	mov	r0, r6
    1daa:	f00b f8d7 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1dae:	4621      	mov	r1, r4
    1db0:	f00b f8dc 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1db4:	4606      	mov	r6, r0
									+ String(yaw_des)
    1db6:	2102      	movs	r1, #2
    1db8:	4b9e      	ldr	r3, [pc, #632]	; (2034 <getDataString()+0x364>)
    1dba:	ed93 0a00 	vldr	s0, [r3]
    1dbe:	a822      	add	r0, sp, #136	; 0x88
    1dc0:	f00b f880 	bl	cec4 <String::String(float, unsigned char)>
    1dc4:	a922      	add	r1, sp, #136	; 0x88
    1dc6:	4630      	mov	r0, r6
    1dc8:	f00b f8c8 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1dcc:	4621      	mov	r1, r4
    1dce:	f00b f8cd 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1dd2:	4606      	mov	r6, r0
									+ String(thro_des)
    1dd4:	2102      	movs	r1, #2
    1dd6:	4b98      	ldr	r3, [pc, #608]	; (2038 <getDataString()+0x368>)
    1dd8:	ed93 0a00 	vldr	s0, [r3]
    1ddc:	a826      	add	r0, sp, #152	; 0x98
    1dde:	f00b f871 	bl	cec4 <String::String(float, unsigned char)>
    1de2:	a926      	add	r1, sp, #152	; 0x98
    1de4:	4630      	mov	r0, r6
    1de6:	f00b f8b9 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1dea:	4621      	mov	r1, r4
    1dec:	f00b f8be 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1df0:	4606      	mov	r6, r0
									+ String(roll_PID)
    1df2:	2102      	movs	r1, #2
    1df4:	4b91      	ldr	r3, [pc, #580]	; (203c <getDataString()+0x36c>)
    1df6:	ed93 0a00 	vldr	s0, [r3]
    1dfa:	a82a      	add	r0, sp, #168	; 0xa8
    1dfc:	f00b f862 	bl	cec4 <String::String(float, unsigned char)>
    1e00:	a92a      	add	r1, sp, #168	; 0xa8
    1e02:	4630      	mov	r0, r6
    1e04:	f00b f8aa 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e08:	4621      	mov	r1, r4
    1e0a:	f00b f8af 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1e0e:	4606      	mov	r6, r0
									+ String(pitch_PID)
    1e10:	2102      	movs	r1, #2
    1e12:	4b8b      	ldr	r3, [pc, #556]	; (2040 <getDataString()+0x370>)
    1e14:	ed93 0a00 	vldr	s0, [r3]
    1e18:	a82e      	add	r0, sp, #184	; 0xb8
    1e1a:	f00b f853 	bl	cec4 <String::String(float, unsigned char)>
    1e1e:	a92e      	add	r1, sp, #184	; 0xb8
    1e20:	4630      	mov	r0, r6
    1e22:	f00b f89b 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e26:	4621      	mov	r1, r4
    1e28:	f00b f8a0 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1e2c:	4606      	mov	r6, r0
									+ String(yaw_PID)
    1e2e:	2102      	movs	r1, #2
    1e30:	4b84      	ldr	r3, [pc, #528]	; (2044 <getDataString()+0x374>)
    1e32:	ed93 0a00 	vldr	s0, [r3]
    1e36:	a832      	add	r0, sp, #200	; 0xc8
    1e38:	f00b f844 	bl	cec4 <String::String(float, unsigned char)>
    1e3c:	a932      	add	r1, sp, #200	; 0xc8
    1e3e:	4630      	mov	r0, r6
    1e40:	f00b f88c 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e44:	4621      	mov	r1, r4
    1e46:	f00b f891 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1e4a:	4606      	mov	r6, r0
									+ String(channel_1_pwm)
    1e4c:	220a      	movs	r2, #10
    1e4e:	4b7e      	ldr	r3, [pc, #504]	; (2048 <getDataString()+0x378>)
    1e50:	6819      	ldr	r1, [r3, #0]
    1e52:	a836      	add	r0, sp, #216	; 0xd8
    1e54:	f00b f823 	bl	ce9e <String::String(int, unsigned char)>
    1e58:	a936      	add	r1, sp, #216	; 0xd8
    1e5a:	4630      	mov	r0, r6
    1e5c:	f00b f87e 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e60:	4621      	mov	r1, r4
    1e62:	f00b f883 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1e66:	4606      	mov	r6, r0
									+ String(channel_2_pwm)
    1e68:	220a      	movs	r2, #10
    1e6a:	4b78      	ldr	r3, [pc, #480]	; (204c <getDataString()+0x37c>)
    1e6c:	6819      	ldr	r1, [r3, #0]
    1e6e:	a83a      	add	r0, sp, #232	; 0xe8
    1e70:	f00b f815 	bl	ce9e <String::String(int, unsigned char)>
    1e74:	a93a      	add	r1, sp, #232	; 0xe8
    1e76:	4630      	mov	r0, r6
    1e78:	f00b f870 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e7c:	4621      	mov	r1, r4
    1e7e:	f00b f875 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1e82:	4606      	mov	r6, r0
									+ String(channel_3_pwm)
    1e84:	220a      	movs	r2, #10
    1e86:	4b72      	ldr	r3, [pc, #456]	; (2050 <getDataString()+0x380>)
    1e88:	6819      	ldr	r1, [r3, #0]
    1e8a:	a83e      	add	r0, sp, #248	; 0xf8
    1e8c:	f00b f807 	bl	ce9e <String::String(int, unsigned char)>
    1e90:	a93e      	add	r1, sp, #248	; 0xf8
    1e92:	4630      	mov	r0, r6
    1e94:	f00b f862 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1e98:	4621      	mov	r1, r4
    1e9a:	f00b f867 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1e9e:	4606      	mov	r6, r0
									+ String(channel_4_pwm)
    1ea0:	220a      	movs	r2, #10
    1ea2:	4b6c      	ldr	r3, [pc, #432]	; (2054 <getDataString()+0x384>)
    1ea4:	6819      	ldr	r1, [r3, #0]
    1ea6:	a842      	add	r0, sp, #264	; 0x108
    1ea8:	f00a fff9 	bl	ce9e <String::String(int, unsigned char)>
    1eac:	a942      	add	r1, sp, #264	; 0x108
    1eae:	4630      	mov	r0, r6
    1eb0:	f00b f854 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1eb4:	4621      	mov	r1, r4
    1eb6:	f00b f859 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1eba:	4606      	mov	r6, r0
									+ String(channel_5_pwm)
    1ebc:	220a      	movs	r2, #10
    1ebe:	4b66      	ldr	r3, [pc, #408]	; (2058 <getDataString()+0x388>)
    1ec0:	6819      	ldr	r1, [r3, #0]
    1ec2:	a846      	add	r0, sp, #280	; 0x118
    1ec4:	f00a ffeb 	bl	ce9e <String::String(int, unsigned char)>
    1ec8:	a946      	add	r1, sp, #280	; 0x118
    1eca:	4630      	mov	r0, r6
    1ecc:	f00b f846 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1ed0:	4621      	mov	r1, r4
    1ed2:	f00b f84b 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1ed6:	4606      	mov	r6, r0
									+ String(channel_6_pwm)
    1ed8:	220a      	movs	r2, #10
    1eda:	4b60      	ldr	r3, [pc, #384]	; (205c <getDataString()+0x38c>)
    1edc:	6819      	ldr	r1, [r3, #0]
    1ede:	a84a      	add	r0, sp, #296	; 0x128
    1ee0:	f00a ffdd 	bl	ce9e <String::String(int, unsigned char)>
    1ee4:	a94a      	add	r1, sp, #296	; 0x128
    1ee6:	4630      	mov	r0, r6
    1ee8:	f00b f838 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1eec:	4621      	mov	r1, r4
    1eee:	f00b f83d 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1ef2:	4606      	mov	r6, r0
									+ String(channel_7_pwm)
    1ef4:	220a      	movs	r2, #10
    1ef6:	4b5a      	ldr	r3, [pc, #360]	; (2060 <getDataString()+0x390>)
    1ef8:	6819      	ldr	r1, [r3, #0]
    1efa:	a84e      	add	r0, sp, #312	; 0x138
    1efc:	f00a ffcf 	bl	ce9e <String::String(int, unsigned char)>
    1f00:	a94e      	add	r1, sp, #312	; 0x138
    1f02:	4630      	mov	r0, r6
    1f04:	f00b f82a 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f08:	4621      	mov	r1, r4
    1f0a:	f00b f82f 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1f0e:	4606      	mov	r6, r0
									+ String(channel_8_pwm)
    1f10:	220a      	movs	r2, #10
    1f12:	4b54      	ldr	r3, [pc, #336]	; (2064 <getDataString()+0x394>)
    1f14:	6819      	ldr	r1, [r3, #0]
    1f16:	a852      	add	r0, sp, #328	; 0x148
    1f18:	f00a ffc1 	bl	ce9e <String::String(int, unsigned char)>
    1f1c:	a952      	add	r1, sp, #328	; 0x148
    1f1e:	4630      	mov	r0, r6
    1f20:	f00b f81c 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f24:	4621      	mov	r1, r4
    1f26:	f00b f821 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1f2a:	4606      	mov	r6, r0
									+ String(channel_9_pwm)
    1f2c:	220a      	movs	r2, #10
    1f2e:	4b4e      	ldr	r3, [pc, #312]	; (2068 <getDataString()+0x398>)
    1f30:	6819      	ldr	r1, [r3, #0]
    1f32:	a856      	add	r0, sp, #344	; 0x158
    1f34:	f00a ffb3 	bl	ce9e <String::String(int, unsigned char)>
    1f38:	a956      	add	r1, sp, #344	; 0x158
    1f3a:	4630      	mov	r0, r6
    1f3c:	f00b f80e 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f40:	4621      	mov	r1, r4
    1f42:	f00b f813 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1f46:	4606      	mov	r6, r0
									+ String(channel_10_pwm)
    1f48:	220a      	movs	r2, #10
    1f4a:	4b48      	ldr	r3, [pc, #288]	; (206c <getDataString()+0x39c>)
    1f4c:	6819      	ldr	r1, [r3, #0]
    1f4e:	a85a      	add	r0, sp, #360	; 0x168
    1f50:	f00a ffa5 	bl	ce9e <String::String(int, unsigned char)>
    1f54:	a95a      	add	r1, sp, #360	; 0x168
    1f56:	4630      	mov	r0, r6
    1f58:	f00b f800 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f5c:	4621      	mov	r1, r4
    1f5e:	f00b f805 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1f62:	4606      	mov	r6, r0
									+ String(channel_11_pwm)
    1f64:	220a      	movs	r2, #10
    1f66:	4b42      	ldr	r3, [pc, #264]	; (2070 <getDataString()+0x3a0>)
    1f68:	6819      	ldr	r1, [r3, #0]
    1f6a:	a85e      	add	r0, sp, #376	; 0x178
    1f6c:	f00a ff97 	bl	ce9e <String::String(int, unsigned char)>
    1f70:	a95e      	add	r1, sp, #376	; 0x178
    1f72:	4630      	mov	r0, r6
    1f74:	f00a fff2 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f78:	4621      	mov	r1, r4
    1f7a:	f00a fff7 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1f7e:	4606      	mov	r6, r0
									+ String(channel_12_pwm)
    1f80:	220a      	movs	r2, #10
    1f82:	4b3c      	ldr	r3, [pc, #240]	; (2074 <getDataString()+0x3a4>)
    1f84:	6819      	ldr	r1, [r3, #0]
    1f86:	a862      	add	r0, sp, #392	; 0x188
    1f88:	f00a ff89 	bl	ce9e <String::String(int, unsigned char)>
    1f8c:	a962      	add	r1, sp, #392	; 0x188
    1f8e:	4630      	mov	r0, r6
    1f90:	f00a ffe4 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1f94:	4621      	mov	r1, r4
    1f96:	f00a ffe9 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1f9a:	4606      	mov	r6, r0
									+ String(channel_13_pwm)
    1f9c:	220a      	movs	r2, #10
    1f9e:	4b36      	ldr	r3, [pc, #216]	; (2078 <getDataString()+0x3a8>)
    1fa0:	6819      	ldr	r1, [r3, #0]
    1fa2:	a866      	add	r0, sp, #408	; 0x198
    1fa4:	f00a ff7b 	bl	ce9e <String::String(int, unsigned char)>
    1fa8:	a966      	add	r1, sp, #408	; 0x198
    1faa:	4630      	mov	r0, r6
    1fac:	f00a ffd6 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fb0:	4621      	mov	r1, r4
    1fb2:	f00a ffdb 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1fb6:	4606      	mov	r6, r0
									+ String(GyroX)
    1fb8:	2102      	movs	r1, #2
    1fba:	4b30      	ldr	r3, [pc, #192]	; (207c <getDataString()+0x3ac>)
    1fbc:	ed93 0a00 	vldr	s0, [r3]
    1fc0:	a86a      	add	r0, sp, #424	; 0x1a8
    1fc2:	f00a ff7f 	bl	cec4 <String::String(float, unsigned char)>
    1fc6:	a96a      	add	r1, sp, #424	; 0x1a8
    1fc8:	4630      	mov	r0, r6
    1fca:	f00a ffc7 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fce:	4621      	mov	r1, r4
    1fd0:	f00a ffcc 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1fd4:	4606      	mov	r6, r0
									+ String(GyroY)
    1fd6:	2102      	movs	r1, #2
    1fd8:	4b29      	ldr	r3, [pc, #164]	; (2080 <getDataString()+0x3b0>)
    1fda:	ed93 0a00 	vldr	s0, [r3]
    1fde:	a86e      	add	r0, sp, #440	; 0x1b8
    1fe0:	f00a ff70 	bl	cec4 <String::String(float, unsigned char)>
    1fe4:	a96e      	add	r1, sp, #440	; 0x1b8
    1fe6:	4630      	mov	r0, r6
    1fe8:	f00a ffb8 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    1fec:	4621      	mov	r1, r4
    1fee:	f00a ffbd 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    1ff2:	4606      	mov	r6, r0
									+ String(GyroZ)
    1ff4:	2102      	movs	r1, #2
    1ff6:	4b23      	ldr	r3, [pc, #140]	; (2084 <getDataString()+0x3b4>)
    1ff8:	ed93 0a00 	vldr	s0, [r3]
    1ffc:	a872      	add	r0, sp, #456	; 0x1c8
    1ffe:	f00a ff61 	bl	cec4 <String::String(float, unsigned char)>
    2002:	a972      	add	r1, sp, #456	; 0x1c8
    2004:	4630      	mov	r0, r6
    2006:	f00a ffa9 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    200a:	4621      	mov	r1, r4
    200c:	f00a ffae 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2010:	4606      	mov	r6, r0
    2012:	e039      	b.n	2088 <getDataString()+0x3b8>
    2014:	20005170 	.word	0x20005170
    2018:	20001d10 	.word	0x20001d10
    201c:	20005144 	.word	0x20005144
    2020:	200053a8 	.word	0x200053a8
    2024:	20004fd4 	.word	0x20004fd4
    2028:	20004fe0 	.word	0x20004fe0
    202c:	20005178 	.word	0x20005178
    2030:	2000514c 	.word	0x2000514c
    2034:	200053b0 	.word	0x200053b0
    2038:	20005390 	.word	0x20005390
    203c:	20005174 	.word	0x20005174
    2040:	20005148 	.word	0x20005148
    2044:	200053ac 	.word	0x200053ac
    2048:	20005014 	.word	0x20005014
    204c:	20005020 	.word	0x20005020
    2050:	2000502c 	.word	0x2000502c
    2054:	20005038 	.word	0x20005038
    2058:	20005044 	.word	0x20005044
    205c:	20005048 	.word	0x20005048
    2060:	2000504c 	.word	0x2000504c
    2064:	20005050 	.word	0x20005050
    2068:	20005054 	.word	0x20005054
    206c:	20005004 	.word	0x20005004
    2070:	20005008 	.word	0x20005008
    2074:	2000500c 	.word	0x2000500c
    2078:	20005010 	.word	0x20005010
    207c:	200040c4 	.word	0x200040c4
    2080:	200040cc 	.word	0x200040cc
    2084:	200040d4 	.word	0x200040d4
									+ String(AccX)
    2088:	2102      	movs	r1, #2
    208a:	4bcf      	ldr	r3, [pc, #828]	; (23c8 <getDataString()+0x6f8>)
    208c:	ed93 0a00 	vldr	s0, [r3]
    2090:	a876      	add	r0, sp, #472	; 0x1d8
    2092:	f00a ff17 	bl	cec4 <String::String(float, unsigned char)>
    2096:	a976      	add	r1, sp, #472	; 0x1d8
    2098:	4630      	mov	r0, r6
    209a:	f00a ff5f 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    209e:	4621      	mov	r1, r4
    20a0:	f00a ff64 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    20a4:	4606      	mov	r6, r0
									+ String(AccY)
    20a6:	2102      	movs	r1, #2
    20a8:	4bc8      	ldr	r3, [pc, #800]	; (23cc <getDataString()+0x6fc>)
    20aa:	ed93 0a00 	vldr	s0, [r3]
    20ae:	a87a      	add	r0, sp, #488	; 0x1e8
    20b0:	f00a ff08 	bl	cec4 <String::String(float, unsigned char)>
    20b4:	a97a      	add	r1, sp, #488	; 0x1e8
    20b6:	4630      	mov	r0, r6
    20b8:	f00a ff50 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    20bc:	4621      	mov	r1, r4
    20be:	f00a ff55 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    20c2:	4606      	mov	r6, r0
									+ String(AccZ)
    20c4:	2102      	movs	r1, #2
    20c6:	4bc2      	ldr	r3, [pc, #776]	; (23d0 <getDataString()+0x700>)
    20c8:	ed93 0a00 	vldr	s0, [r3]
    20cc:	a87e      	add	r0, sp, #504	; 0x1f8
    20ce:	f00a fef9 	bl	cec4 <String::String(float, unsigned char)>
    20d2:	a97e      	add	r1, sp, #504	; 0x1f8
    20d4:	4630      	mov	r0, r6
    20d6:	f00a ff41 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    20da:	4621      	mov	r1, r4
    20dc:	f00a ff46 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    20e0:	4606      	mov	r6, r0
									+ String(s1_command_scaled)
    20e2:	2102      	movs	r1, #2
    20e4:	4bbb      	ldr	r3, [pc, #748]	; (23d4 <getDataString()+0x704>)
    20e6:	ed93 0a00 	vldr	s0, [r3]
    20ea:	a882      	add	r0, sp, #520	; 0x208
    20ec:	f00a feea 	bl	cec4 <String::String(float, unsigned char)>
    20f0:	a982      	add	r1, sp, #520	; 0x208
    20f2:	4630      	mov	r0, r6
    20f4:	f00a ff32 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    20f8:	4621      	mov	r1, r4
    20fa:	f00a ff37 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    20fe:	4606      	mov	r6, r0
									+ String(s2_command_scaled)
    2100:	2102      	movs	r1, #2
    2102:	4bb5      	ldr	r3, [pc, #724]	; (23d8 <getDataString()+0x708>)
    2104:	ed93 0a00 	vldr	s0, [r3]
    2108:	a886      	add	r0, sp, #536	; 0x218
    210a:	f00a fedb 	bl	cec4 <String::String(float, unsigned char)>
    210e:	a986      	add	r1, sp, #536	; 0x218
    2110:	4630      	mov	r0, r6
    2112:	f00a ff23 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2116:	4621      	mov	r1, r4
    2118:	f00a ff28 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    211c:	4606      	mov	r6, r0
									+ String(s3_command_scaled)
    211e:	2102      	movs	r1, #2
    2120:	4bae      	ldr	r3, [pc, #696]	; (23dc <getDataString()+0x70c>)
    2122:	ed93 0a00 	vldr	s0, [r3]
    2126:	a88a      	add	r0, sp, #552	; 0x228
    2128:	f00a fecc 	bl	cec4 <String::String(float, unsigned char)>
    212c:	a98a      	add	r1, sp, #552	; 0x228
    212e:	4630      	mov	r0, r6
    2130:	f00a ff14 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2134:	4621      	mov	r1, r4
    2136:	f00a ff19 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    213a:	4606      	mov	r6, r0
									+ String(s4_command_scaled)
    213c:	2102      	movs	r1, #2
    213e:	4ba8      	ldr	r3, [pc, #672]	; (23e0 <getDataString()+0x710>)
    2140:	ed93 0a00 	vldr	s0, [r3]
    2144:	a88e      	add	r0, sp, #568	; 0x238
    2146:	f00a febd 	bl	cec4 <String::String(float, unsigned char)>
    214a:	a98e      	add	r1, sp, #568	; 0x238
    214c:	4630      	mov	r0, r6
    214e:	f00a ff05 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2152:	4621      	mov	r1, r4
    2154:	f00a ff0a 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2158:	4606      	mov	r6, r0
									+ String(P_gains(2,2)*P_gainScale(2,2))
    215a:	f8df b294 	ldr.w	fp, [pc, #660]	; 23f0 <getDataString()+0x720>
    215e:	f8df a294 	ldr.w	sl, [pc, #660]	; 23f4 <getDataString()+0x724>
    2162:	ed9b 0a08 	vldr	s0, [fp, #32]
    2166:	edda 7a08 	vldr	s15, [sl, #32]
    216a:	2102      	movs	r1, #2
    216c:	ee20 0a27 	vmul.f32	s0, s0, s15
    2170:	a892      	add	r0, sp, #584	; 0x248
    2172:	f00a fea7 	bl	cec4 <String::String(float, unsigned char)>
    2176:	a992      	add	r1, sp, #584	; 0x248
    2178:	4630      	mov	r0, r6
    217a:	f00a feef 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    217e:	4621      	mov	r1, r4
    2180:	f00a fef4 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2184:	4606      	mov	r6, r0
									+ String(I_gains(2,2)*I_gainScale(2,2))
    2186:	f8df 9270 	ldr.w	r9, [pc, #624]	; 23f8 <getDataString()+0x728>
    218a:	f8df 8270 	ldr.w	r8, [pc, #624]	; 23fc <getDataString()+0x72c>
    218e:	ed99 0a08 	vldr	s0, [r9, #32]
    2192:	edd8 7a08 	vldr	s15, [r8, #32]
    2196:	2102      	movs	r1, #2
    2198:	ee20 0a27 	vmul.f32	s0, s0, s15
    219c:	a896      	add	r0, sp, #600	; 0x258
    219e:	f00a fe91 	bl	cec4 <String::String(float, unsigned char)>
    21a2:	a996      	add	r1, sp, #600	; 0x258
    21a4:	4630      	mov	r0, r6
    21a6:	f00a fed9 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    21aa:	4621      	mov	r1, r4
    21ac:	f00a fede 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    21b0:	9001      	str	r0, [sp, #4]
									+ String(D_gains(2,2)*D_gainScale(2,2))	
    21b2:	4f8c      	ldr	r7, [pc, #560]	; (23e4 <getDataString()+0x714>)
    21b4:	4e8c      	ldr	r6, [pc, #560]	; (23e8 <getDataString()+0x718>)
    21b6:	ed97 0a08 	vldr	s0, [r7, #32]
    21ba:	edd6 7a08 	vldr	s15, [r6, #32]
    21be:	2102      	movs	r1, #2
    21c0:	ee20 0a27 	vmul.f32	s0, s0, s15
    21c4:	ab9a      	add	r3, sp, #616	; 0x268
    21c6:	4618      	mov	r0, r3
    21c8:	f00a fe7c 	bl	cec4 <String::String(float, unsigned char)>
    21cc:	a99a      	add	r1, sp, #616	; 0x268
    21ce:	9801      	ldr	r0, [sp, #4]
    21d0:	f00a fec4 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    21d4:	4621      	mov	r1, r4
    21d6:	f00a fec9 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    21da:	9001      	str	r0, [sp, #4]
									+ String(P_gains(0,0)*P_gainScale(0,0))
    21dc:	ed9b 0a00 	vldr	s0, [fp]
    21e0:	edda 7a00 	vldr	s15, [sl]
    21e4:	2102      	movs	r1, #2
    21e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    21ea:	ab9e      	add	r3, sp, #632	; 0x278
    21ec:	4618      	mov	r0, r3
    21ee:	f00a fe69 	bl	cec4 <String::String(float, unsigned char)>
    21f2:	a99e      	add	r1, sp, #632	; 0x278
    21f4:	9801      	ldr	r0, [sp, #4]
    21f6:	f00a feb1 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    21fa:	4621      	mov	r1, r4
    21fc:	f00a feb6 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2200:	9001      	str	r0, [sp, #4]
									+ String(I_gains(0,0)*I_gainScale(0,0))
    2202:	ed99 0a00 	vldr	s0, [r9]
    2206:	edd8 7a00 	vldr	s15, [r8]
    220a:	2102      	movs	r1, #2
    220c:	ee20 0a27 	vmul.f32	s0, s0, s15
    2210:	aba2      	add	r3, sp, #648	; 0x288
    2212:	4618      	mov	r0, r3
    2214:	f00a fe56 	bl	cec4 <String::String(float, unsigned char)>
    2218:	a9a2      	add	r1, sp, #648	; 0x288
    221a:	9801      	ldr	r0, [sp, #4]
    221c:	f00a fe9e 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2220:	4621      	mov	r1, r4
    2222:	f00a fea3 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2226:	9001      	str	r0, [sp, #4]
									+ String(D_gains(0,0)*D_gainScale(0,0))	
    2228:	ed97 0a00 	vldr	s0, [r7]
    222c:	edd6 7a00 	vldr	s15, [r6]
    2230:	2102      	movs	r1, #2
    2232:	ee20 0a27 	vmul.f32	s0, s0, s15
    2236:	aba6      	add	r3, sp, #664	; 0x298
    2238:	4618      	mov	r0, r3
    223a:	f00a fe43 	bl	cec4 <String::String(float, unsigned char)>
    223e:	a9a6      	add	r1, sp, #664	; 0x298
    2240:	9801      	ldr	r0, [sp, #4]
    2242:	f00a fe8b 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2246:	4621      	mov	r1, r4
    2248:	f00a fe90 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    224c:	9001      	str	r0, [sp, #4]
									+ String(P_gains(1,1)*P_gainScale(1,1))
    224e:	ed9b 0a04 	vldr	s0, [fp, #16]
    2252:	edda 7a04 	vldr	s15, [sl, #16]
    2256:	2102      	movs	r1, #2
    2258:	ee20 0a27 	vmul.f32	s0, s0, s15
    225c:	abaa      	add	r3, sp, #680	; 0x2a8
    225e:	4618      	mov	r0, r3
    2260:	f00a fe30 	bl	cec4 <String::String(float, unsigned char)>
    2264:	a9aa      	add	r1, sp, #680	; 0x2a8
    2266:	9801      	ldr	r0, [sp, #4]
    2268:	f00a fe78 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    226c:	4621      	mov	r1, r4
    226e:	f00a fe7d 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2272:	4682      	mov	sl, r0
									+ String(I_gains(1,1)*I_gainScale(1,1))
    2274:	ed99 0a04 	vldr	s0, [r9, #16]
    2278:	edd8 7a04 	vldr	s15, [r8, #16]
    227c:	2102      	movs	r1, #2
    227e:	ee20 0a27 	vmul.f32	s0, s0, s15
    2282:	a8ae      	add	r0, sp, #696	; 0x2b8
    2284:	f00a fe1e 	bl	cec4 <String::String(float, unsigned char)>
    2288:	a9ae      	add	r1, sp, #696	; 0x2b8
    228a:	4650      	mov	r0, sl
    228c:	f00a fe66 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    2290:	4621      	mov	r1, r4
    2292:	f00a fe6b 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    2296:	4680      	mov	r8, r0
									+ String(D_gains(1,1)*D_gainScale(1,1))
    2298:	ed97 0a04 	vldr	s0, [r7, #16]
    229c:	edd6 7a04 	vldr	s15, [r6, #16]
    22a0:	2102      	movs	r1, #2
    22a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    22a6:	a8b2      	add	r0, sp, #712	; 0x2c8
    22a8:	f00a fe0c 	bl	cec4 <String::String(float, unsigned char)>
    22ac:	a9b2      	add	r1, sp, #712	; 0x2c8
    22ae:	4640      	mov	r0, r8
    22b0:	f00a fe54 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
									+ ","
    22b4:	4621      	mov	r1, r4
    22b6:	f00a fe59 	bl	cf6c <operator+(StringSumHelper const&, char const*)>
    22ba:	4604      	mov	r4, r0
									+ String(failureFlag);	
    22bc:	220a      	movs	r2, #10
    22be:	4b4b      	ldr	r3, [pc, #300]	; (23ec <getDataString()+0x71c>)
    22c0:	7819      	ldrb	r1, [r3, #0]
    22c2:	a8b6      	add	r0, sp, #728	; 0x2d8
    22c4:	f00a fdeb 	bl	ce9e <String::String(int, unsigned char)>
    22c8:	a9b6      	add	r1, sp, #728	; 0x2d8
    22ca:	4620      	mov	r0, r4
    22cc:	f00a fe46 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
    22d0:	4601      	mov	r1, r0
    22d2:	4628      	mov	r0, r5
    22d4:	f00a fdb5 	bl	ce42 <String::operator=(String const&)>
    22d8:	a8b6      	add	r0, sp, #728	; 0x2d8
    22da:	f00a fd41 	bl	cd60 <String::~String()>
									+ String(D_gains(1,1)*D_gainScale(1,1))
    22de:	a8b2      	add	r0, sp, #712	; 0x2c8
    22e0:	f00a fd3e 	bl	cd60 <String::~String()>
									+ String(I_gains(1,1)*I_gainScale(1,1))
    22e4:	a8ae      	add	r0, sp, #696	; 0x2b8
    22e6:	f00a fd3b 	bl	cd60 <String::~String()>
									+ String(P_gains(1,1)*P_gainScale(1,1))
    22ea:	a8aa      	add	r0, sp, #680	; 0x2a8
    22ec:	f00a fd38 	bl	cd60 <String::~String()>
									+ String(D_gains(0,0)*D_gainScale(0,0))	
    22f0:	a8a6      	add	r0, sp, #664	; 0x298
    22f2:	f00a fd35 	bl	cd60 <String::~String()>
									+ String(I_gains(0,0)*I_gainScale(0,0))
    22f6:	a8a2      	add	r0, sp, #648	; 0x288
    22f8:	f00a fd32 	bl	cd60 <String::~String()>
									+ String(P_gains(0,0)*P_gainScale(0,0))
    22fc:	a89e      	add	r0, sp, #632	; 0x278
    22fe:	f00a fd2f 	bl	cd60 <String::~String()>
									+ String(D_gains(2,2)*D_gainScale(2,2))	
    2302:	a89a      	add	r0, sp, #616	; 0x268
    2304:	f00a fd2c 	bl	cd60 <String::~String()>
									+ String(I_gains(2,2)*I_gainScale(2,2))
    2308:	a896      	add	r0, sp, #600	; 0x258
    230a:	f00a fd29 	bl	cd60 <String::~String()>
									+ String(P_gains(2,2)*P_gainScale(2,2))
    230e:	a892      	add	r0, sp, #584	; 0x248
    2310:	f00a fd26 	bl	cd60 <String::~String()>
									+ String(s4_command_scaled)
    2314:	a88e      	add	r0, sp, #568	; 0x238
    2316:	f00a fd23 	bl	cd60 <String::~String()>
									+ String(s3_command_scaled)
    231a:	a88a      	add	r0, sp, #552	; 0x228
    231c:	f00a fd20 	bl	cd60 <String::~String()>
									+ String(s2_command_scaled)
    2320:	a886      	add	r0, sp, #536	; 0x218
    2322:	f00a fd1d 	bl	cd60 <String::~String()>
									+ String(s1_command_scaled)
    2326:	a882      	add	r0, sp, #520	; 0x208
    2328:	f00a fd1a 	bl	cd60 <String::~String()>
									+ String(AccZ)
    232c:	a87e      	add	r0, sp, #504	; 0x1f8
    232e:	f00a fd17 	bl	cd60 <String::~String()>
									+ String(AccY)
    2332:	a87a      	add	r0, sp, #488	; 0x1e8
    2334:	f00a fd14 	bl	cd60 <String::~String()>
									+ String(AccX)
    2338:	a876      	add	r0, sp, #472	; 0x1d8
    233a:	f00a fd11 	bl	cd60 <String::~String()>
									+ String(GyroZ)
    233e:	a872      	add	r0, sp, #456	; 0x1c8
    2340:	f00a fd0e 	bl	cd60 <String::~String()>
									+ String(GyroY)
    2344:	a86e      	add	r0, sp, #440	; 0x1b8
    2346:	f00a fd0b 	bl	cd60 <String::~String()>
									+ String(GyroX)
    234a:	a86a      	add	r0, sp, #424	; 0x1a8
    234c:	f00a fd08 	bl	cd60 <String::~String()>
									+ String(channel_13_pwm)
    2350:	a866      	add	r0, sp, #408	; 0x198
    2352:	f00a fd05 	bl	cd60 <String::~String()>
									+ String(channel_12_pwm)
    2356:	a862      	add	r0, sp, #392	; 0x188
    2358:	f00a fd02 	bl	cd60 <String::~String()>
									+ String(channel_11_pwm)
    235c:	a85e      	add	r0, sp, #376	; 0x178
    235e:	f00a fcff 	bl	cd60 <String::~String()>
									+ String(channel_10_pwm)
    2362:	a85a      	add	r0, sp, #360	; 0x168
    2364:	f00a fcfc 	bl	cd60 <String::~String()>
									+ String(channel_9_pwm)
    2368:	a856      	add	r0, sp, #344	; 0x158
    236a:	f00a fcf9 	bl	cd60 <String::~String()>
									+ String(channel_8_pwm)
    236e:	a852      	add	r0, sp, #328	; 0x148
    2370:	f00a fcf6 	bl	cd60 <String::~String()>
									+ String(channel_7_pwm)
    2374:	a84e      	add	r0, sp, #312	; 0x138
    2376:	f00a fcf3 	bl	cd60 <String::~String()>
									+ String(channel_6_pwm)
    237a:	a84a      	add	r0, sp, #296	; 0x128
    237c:	f00a fcf0 	bl	cd60 <String::~String()>
									+ String(channel_5_pwm)
    2380:	a846      	add	r0, sp, #280	; 0x118
    2382:	f00a fced 	bl	cd60 <String::~String()>
									+ String(channel_4_pwm)
    2386:	a842      	add	r0, sp, #264	; 0x108
    2388:	f00a fcea 	bl	cd60 <String::~String()>
									+ String(channel_3_pwm)
    238c:	a83e      	add	r0, sp, #248	; 0xf8
    238e:	f00a fce7 	bl	cd60 <String::~String()>
									+ String(channel_2_pwm)
    2392:	a83a      	add	r0, sp, #232	; 0xe8
    2394:	f00a fce4 	bl	cd60 <String::~String()>
									+ String(channel_1_pwm)
    2398:	a836      	add	r0, sp, #216	; 0xd8
    239a:	f00a fce1 	bl	cd60 <String::~String()>
									+ String(yaw_PID)
    239e:	a832      	add	r0, sp, #200	; 0xc8
    23a0:	f00a fcde 	bl	cd60 <String::~String()>
									+ String(pitch_PID)
    23a4:	a82e      	add	r0, sp, #184	; 0xb8
    23a6:	f00a fcdb 	bl	cd60 <String::~String()>
									+ String(roll_PID)
    23aa:	a82a      	add	r0, sp, #168	; 0xa8
    23ac:	f00a fcd8 	bl	cd60 <String::~String()>
									+ String(thro_des)
    23b0:	a826      	add	r0, sp, #152	; 0x98
    23b2:	f00a fcd5 	bl	cd60 <String::~String()>
									+ String(yaw_des)
    23b6:	a822      	add	r0, sp, #136	; 0x88
    23b8:	f00a fcd2 	bl	cd60 <String::~String()>
									+ String(pitch_des)
    23bc:	a81e      	add	r0, sp, #120	; 0x78
    23be:	f00a fccf 	bl	cd60 <String::~String()>
									+ String(roll_des)
    23c2:	a81a      	add	r0, sp, #104	; 0x68
    23c4:	e01c      	b.n	2400 <getDataString()+0x730>
    23c6:	bf00      	nop
    23c8:	20004088 	.word	0x20004088
    23cc:	20004090 	.word	0x20004090
    23d0:	20004098 	.word	0x20004098
    23d4:	200051b4 	.word	0x200051b4
    23d8:	200051bc 	.word	0x200051bc
    23dc:	200051c4 	.word	0x200051c4
    23e0:	200051cc 	.word	0x200051cc
    23e4:	20004be8 	.word	0x20004be8
    23e8:	200040a0 	.word	0x200040a0
    23ec:	200053cd 	.word	0x200053cd
    23f0:	20004c30 	.word	0x20004c30
    23f4:	2000413c 	.word	0x2000413c
    23f8:	20004c0c 	.word	0x20004c0c
    23fc:	200040dc 	.word	0x200040dc
    2400:	f00a fcae 	bl	cd60 <String::~String()>
									+ String(beta)
    2404:	a816      	add	r0, sp, #88	; 0x58
    2406:	f00a fcab 	bl	cd60 <String::~String()>
									+ String(alpha)
    240a:	a812      	add	r0, sp, #72	; 0x48
    240c:	f00a fca8 	bl	cd60 <String::~String()>
									+ String(yaw_IMU)
    2410:	a80e      	add	r0, sp, #56	; 0x38
    2412:	f00a fca5 	bl	cd60 <String::~String()>
									+ String(pitch_IMU)
    2416:	a80a      	add	r0, sp, #40	; 0x28
    2418:	f00a fca2 	bl	cd60 <String::~String()>
class StringSumHelper : public String
    241c:	a802      	add	r0, sp, #8
    241e:	f00a fc9f 	bl	cd60 <String::~String()>
	csvDataString = String(roll_IMU)
    2422:	a806      	add	r0, sp, #24
    2424:	f00a fc9c 	bl	cd60 <String::~String()>
	return csvDataString;
}
    2428:	4628      	mov	r0, r5
    242a:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2432:	bf00      	nop

00002434 <displayRoll()>:

void displayRoll() {
	if (current_time - print_counter > 10000) {
    2434:	4b15      	ldr	r3, [pc, #84]	; (248c <displayRoll()+0x58>)
    2436:	681b      	ldr	r3, [r3, #0]
    2438:	4a15      	ldr	r2, [pc, #84]	; (2490 <displayRoll()+0x5c>)
    243a:	6812      	ldr	r2, [r2, #0]
    243c:	1a9b      	subs	r3, r3, r2
    243e:	f242 7210 	movw	r2, #10000	; 0x2710
    2442:	4293      	cmp	r3, r2
    2444:	d800      	bhi.n	2448 <displayRoll()+0x14>
    2446:	4770      	bx	lr
void displayRoll() {
    2448:	b510      	push	{r4, lr}
		print_counter = micros();
    244a:	f00a ff53 	bl	d2f4 <micros>
    244e:	4b10      	ldr	r3, [pc, #64]	; (2490 <displayRoll()+0x5c>)
    2450:	6018      	str	r0, [r3, #0]
		Serial.print(roll_des);
    2452:	4b10      	ldr	r3, [pc, #64]	; (2494 <displayRoll()+0x60>)
    2454:	ed93 0a00 	vldr	s0, [r3]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2458:	4c0f      	ldr	r4, [pc, #60]	; (2498 <displayRoll()+0x64>)
    245a:	2102      	movs	r1, #2
    245c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    2460:	4620      	mov	r0, r4
    2462:	f00a fa79 	bl	c958 <Print::printFloat(double, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    2466:	6823      	ldr	r3, [r4, #0]
    2468:	685b      	ldr	r3, [r3, #4]
    246a:	2201      	movs	r2, #1
    246c:	490b      	ldr	r1, [pc, #44]	; (249c <displayRoll()+0x68>)
    246e:	4620      	mov	r0, r4
    2470:	4798      	blx	r3
		Serial.print(" ");
		Serial.println(roll_IMU);
    2472:	4b0b      	ldr	r3, [pc, #44]	; (24a0 <displayRoll()+0x6c>)
    2474:	ed93 0a00 	vldr	s0, [r3]
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2478:	2102      	movs	r1, #2
    247a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    247e:	4620      	mov	r0, r4
    2480:	f00a fa6a 	bl	c958 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
    2484:	4620      	mov	r0, r4
    2486:	f00a fa06 	bl	c896 <Print::println()>
	}
}
    248a:	bd10      	pop	{r4, pc}
    248c:	20005064 	.word	0x20005064
    2490:	20005158 	.word	0x20005158
    2494:	20005178 	.word	0x20005178
    2498:	20003354 	.word	0x20003354
    249c:	20001d14 	.word	0x20001d14
    24a0:	20005170 	.word	0x20005170

000024a4 <getPScale()>:
	}
}

void getPScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_10_pwm - 1500.0f)/500.0f * 0.8f;
    24a4:	4b0d      	ldr	r3, [pc, #52]	; (24dc <getPScale()+0x38>)
    24a6:	ed93 7a00 	vldr	s14, [r3]
    24aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    24ae:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24e0 <getPScale()+0x3c>
    24b2:	ee37 7a67 	vsub.f32	s14, s14, s15
    24b6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 24e4 <getPScale()+0x40>
    24ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
    24be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24e8 <getPScale()+0x44>
    24c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    24c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    24ca:	ee77 7a87 	vadd.f32	s15, s15, s14
	P_gainScale(0,0) = scaleVal;
    24ce:	4b07      	ldr	r3, [pc, #28]	; (24ec <getPScale()+0x48>)
    24d0:	edc3 7a00 	vstr	s15, [r3]
	P_gainScale(2,2) = scaleVal;
    24d4:	edc3 7a08 	vstr	s15, [r3, #32]
}
    24d8:	4770      	bx	lr
    24da:	bf00      	nop
    24dc:	20005004 	.word	0x20005004
    24e0:	44bb8000 	.word	0x44bb8000
    24e4:	43fa0000 	.word	0x43fa0000
    24e8:	3f4ccccd 	.word	0x3f4ccccd
    24ec:	2000413c 	.word	0x2000413c

000024f0 <getDScale()>:

void getDScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_12_pwm - 1500.0f)/500.0f * 0.8f;
    24f0:	4b0d      	ldr	r3, [pc, #52]	; (2528 <getDScale()+0x38>)
    24f2:	ed93 7a00 	vldr	s14, [r3]
    24f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    24fa:	eddf 7a0c 	vldr	s15, [pc, #48]	; 252c <getDScale()+0x3c>
    24fe:	ee37 7a67 	vsub.f32	s14, s14, s15
    2502:	eddf 6a0b 	vldr	s13, [pc, #44]	; 2530 <getDScale()+0x40>
    2506:	eec7 7a26 	vdiv.f32	s15, s14, s13
    250a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2534 <getDScale()+0x44>
    250e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2516:	ee77 7a87 	vadd.f32	s15, s15, s14
	D_gainScale(0,0) = scaleVal;
    251a:	4b07      	ldr	r3, [pc, #28]	; (2538 <getDScale()+0x48>)
    251c:	edc3 7a00 	vstr	s15, [r3]
	D_gainScale(2,2) = scaleVal;
    2520:	edc3 7a08 	vstr	s15, [r3, #32]

}
    2524:	4770      	bx	lr
    2526:	bf00      	nop
    2528:	2000500c 	.word	0x2000500c
    252c:	44bb8000 	.word	0x44bb8000
    2530:	43fa0000 	.word	0x43fa0000
    2534:	3f4ccccd 	.word	0x3f4ccccd
    2538:	200040a0 	.word	0x200040a0

0000253c <getIScale()>:

void getIScale() {
	float scaleVal;
	scaleVal = 1.0f + (channel_11_pwm - 1500.0f)/500.0f * 0.8f;
    253c:	4b0d      	ldr	r3, [pc, #52]	; (2574 <getIScale()+0x38>)
    253e:	ed93 7a00 	vldr	s14, [r3]
    2542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2546:	eddf 7a0c 	vldr	s15, [pc, #48]	; 2578 <getIScale()+0x3c>
    254a:	ee37 7a67 	vsub.f32	s14, s14, s15
    254e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 257c <getIScale()+0x40>
    2552:	eec7 7a26 	vdiv.f32	s15, s14, s13
    2556:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2580 <getIScale()+0x44>
    255a:	ee67 7a87 	vmul.f32	s15, s15, s14
    255e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    2562:	ee77 7a87 	vadd.f32	s15, s15, s14
	I_gainScale(0,0) = scaleVal;
    2566:	4b07      	ldr	r3, [pc, #28]	; (2584 <getIScale()+0x48>)
    2568:	edc3 7a00 	vstr	s15, [r3]
	I_gainScale(2,2) = scaleVal;
    256c:	edc3 7a08 	vstr	s15, [r3, #32]
}
    2570:	4770      	bx	lr
    2572:	bf00      	nop
    2574:	20005008 	.word	0x20005008
    2578:	44bb8000 	.word	0x44bb8000
    257c:	43fa0000 	.word	0x43fa0000
    2580:	3f4ccccd 	.word	0x3f4ccccd
    2584:	200040dc 	.word	0x200040dc

00002588 <invSqrt(float)>:
  unsigned int i = 0x5F1F1412 - (*(unsigned int*)&x >> 1);
  float tmp = *(float*)&i;
  float y = tmp * (1.69000231f - 0.714158168f * x * tmp * tmp);
  return y;
  */
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    2588:	eeb5 0a40 	vcmp.f32	s0, #0.0
    258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2590:	d406      	bmi.n	25a0 <invSqrt(float)+0x18>
    2592:	eef1 7ac0 	vsqrt.f32	s15, s0
}
    2596:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    259a:	ee80 0a27 	vdiv.f32	s0, s0, s15
    259e:	4770      	bx	lr
float invSqrt(float x) {
    25a0:	b508      	push	{r3, lr}
  return 1.0/sqrtf(x); //Teensy is fast enough to just take the compute penalty lol suck it arduino nano
    25a2:	f00c febd 	bl	f320 <sqrtf>
    25a6:	eef0 7a40 	vmov.f32	s15, s0
}
    25aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    25ae:	ee80 0a27 	vdiv.f32	s0, s0, s15
    25b2:	bd08      	pop	{r3, pc}
    25b4:	0000      	movs	r0, r0
	...

000025b8 <Madgwick6DOF(float, float, float, float, float, float, float)>:
void Madgwick6DOF(float gx, float gy, float gz, float ax, float ay, float az, float invSampleFreq) {
    25b8:	b508      	push	{r3, lr}
    25ba:	ed2d 8b0e 	vpush	{d8-d14}
    25be:	eeb0 ba61 	vmov.f32	s22, s3
    25c2:	eef0 8a42 	vmov.f32	s17, s4
    25c6:	eeb0 ea62 	vmov.f32	s28, s5
    25ca:	eeb0 da43 	vmov.f32	s26, s6
  gx *= 0.0174533f;
    25ce:	eddf 7acc 	vldr	s15, [pc, #816]	; 2900 <Madgwick6DOF(float, float, float, float, float, float, float)+0x348>
    25d2:	ee20 0a27 	vmul.f32	s0, s0, s15
  gy *= 0.0174533f;
    25d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
  gz *= 0.0174533f;
    25da:	ee21 1a27 	vmul.f32	s2, s2, s15
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
    25de:	4bc9      	ldr	r3, [pc, #804]	; (2904 <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    25e0:	ed93 ca00 	vldr	s24, [r3]
    25e4:	4bc8      	ldr	r3, [pc, #800]	; (2908 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    25e6:	edd3 ba00 	vldr	s23, [r3]
    25ea:	4bc8      	ldr	r3, [pc, #800]	; (290c <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    25ec:	edd3 ca00 	vldr	s25, [r3]
    25f0:	ee2c aa40 	vnmul.f32	s20, s24, s0
    25f4:	ee6b 7aa0 	vmul.f32	s15, s23, s1
    25f8:	ee3a aa67 	vsub.f32	s20, s20, s15
    25fc:	ee6c 7a81 	vmul.f32	s15, s25, s2
    2600:	ee3a aa67 	vsub.f32	s20, s20, s15
    2604:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2608:	ee2a aa27 	vmul.f32	s20, s20, s15
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
    260c:	4bc0      	ldr	r3, [pc, #768]	; (2910 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    260e:	edd3 da00 	vldr	s27, [r3]
    2612:	ee6d 9a80 	vmul.f32	s19, s27, s0
    2616:	ee2b 7a81 	vmul.f32	s14, s23, s2
    261a:	ee79 9a87 	vadd.f32	s19, s19, s14
    261e:	ee2c 7aa0 	vmul.f32	s14, s25, s1
    2622:	ee79 9ac7 	vsub.f32	s19, s19, s14
    2626:	ee69 9aa7 	vmul.f32	s19, s19, s15
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
    262a:	ee6d aaa0 	vmul.f32	s21, s27, s1
    262e:	ee2c 7a01 	vmul.f32	s14, s24, s2
    2632:	ee7a aac7 	vsub.f32	s21, s21, s14
    2636:	ee2c 7a80 	vmul.f32	s14, s25, s0
    263a:	ee7a aa87 	vadd.f32	s21, s21, s14
    263e:	ee6a aaa7 	vmul.f32	s21, s21, s15
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
    2642:	ee2d 9a81 	vmul.f32	s18, s27, s2
    2646:	ee6c 0a20 	vmul.f32	s1, s24, s1
    264a:	ee39 9a20 	vadd.f32	s18, s18, s1
    264e:	ee2b 0a80 	vmul.f32	s0, s23, s0
    2652:	ee39 9a40 	vsub.f32	s18, s18, s0
    2656:	ee29 9a27 	vmul.f32	s18, s18, s15
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
    265a:	eeb5 2a40 	vcmp.f32	s4, #0.0
    265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2662:	bf14      	ite	ne
    2664:	2301      	movne	r3, #1
    2666:	2300      	moveq	r3, #0
    2668:	eef5 2a40 	vcmp.f32	s5, #0.0
    266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2670:	bf18      	it	ne
    2672:	f043 0301 	orrne.w	r3, r3, #1
    2676:	b92b      	cbnz	r3, 2684 <Madgwick6DOF(float, float, float, float, float, float, float)+0xcc>
    2678:	eef5 1a40 	vcmp.f32	s3, #0.0
    267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2680:	f000 80b5 	beq.w	27ee <Madgwick6DOF(float, float, float, float, float, float, float)+0x236>
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    2684:	ee6b 7a0b 	vmul.f32	s15, s22, s22
    2688:	ee28 7aa8 	vmul.f32	s14, s17, s17
    268c:	ee77 7a87 	vadd.f32	s15, s15, s14
    2690:	ee2e 0a0e 	vmul.f32	s0, s28, s28
    2694:	ee37 0a80 	vadd.f32	s0, s15, s0
    2698:	f7ff ff76 	bl	2588 <invSqrt(float)>
    ax *= recipNorm;
    269c:	ee2b ba00 	vmul.f32	s22, s22, s0
    ay *= recipNorm;
    26a0:	ee28 6a80 	vmul.f32	s12, s17, s0
    az *= recipNorm;
    26a4:	ee2e 0a00 	vmul.f32	s0, s28, s0
    _2q0 = 2.0f * q0;
    26a8:	ee3d 2aad 	vadd.f32	s4, s27, s27
    _2q1 = 2.0f * q1;
    26ac:	ee7c 4a0c 	vadd.f32	s9, s24, s24
    _2q2 = 2.0f * q2;
    26b0:	ee3b 5aab 	vadd.f32	s10, s23, s23
    _2q3 = 2.0f * q3;
    26b4:	ee3c 3aac 	vadd.f32	s6, s25, s25
    _4q0 = 4.0f * q0;
    26b8:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
    26bc:	ee6d 7aa5 	vmul.f32	s15, s27, s11
    _4q1 = 4.0f * q1;
    26c0:	ee6c 1a25 	vmul.f32	s3, s24, s11
    _4q2 = 4.0f * q2;
    26c4:	ee2b 4aa5 	vmul.f32	s8, s23, s11
    _8q1 = 8.0f * q1;
    26c8:	eef2 3a00 	vmov.f32	s7, #32	; 0x41000000  8.0
    26cc:	ee2c 1a23 	vmul.f32	s2, s24, s7
    _8q2 = 8.0f * q2;
    26d0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    q1q1 = q1 * q1;
    26d4:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    q2q2 = q2 * q2;
    26d8:	ee6b 6aab 	vmul.f32	s13, s23, s23
    q3q3 = q3 * q3;
    26dc:	ee6c 2aac 	vmul.f32	s5, s25, s25
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
    26e0:	ee67 eaa6 	vmul.f32	s29, s15, s13
    26e4:	ee6b 0a05 	vmul.f32	s1, s22, s10
    26e8:	ee7e eaa0 	vadd.f32	s29, s29, s1
    26ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    26f0:	ee7e eaa7 	vadd.f32	s29, s29, s15
    26f4:	ee66 7a24 	vmul.f32	s15, s12, s9
    26f8:	ee7e eae7 	vsub.f32	s29, s29, s15
    q0q0 = q0 * q0;
    26fc:	ee6d 7aad 	vmul.f32	s15, s27, s27
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
    2700:	ee67 7aa5 	vmul.f32	s15, s15, s11
    2704:	ee21 eaa2 	vmul.f32	s28, s3, s5
    2708:	ee6b 0a03 	vmul.f32	s1, s22, s6
    270c:	ee3e ea60 	vsub.f32	s28, s28, s1
    2710:	ee6c 0a27 	vmul.f32	s1, s24, s15
    2714:	ee3e ea20 	vadd.f32	s28, s28, s1
    2718:	ee66 0a02 	vmul.f32	s1, s12, s4
    271c:	ee3e ea60 	vsub.f32	s28, s28, s1
    2720:	ee3e ea61 	vsub.f32	s28, s28, s3
    2724:	ee61 0a07 	vmul.f32	s1, s2, s14
    2728:	ee3e ea20 	vadd.f32	s28, s28, s1
    272c:	ee21 1a26 	vmul.f32	s2, s2, s13
    2730:	ee3e ea01 	vadd.f32	s28, s28, s2
    2734:	ee60 1a21 	vmul.f32	s3, s0, s3
    2738:	ee3e ea21 	vadd.f32	s28, s28, s3
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
    273c:	ee2b 8aa7 	vmul.f32	s16, s23, s15
    2740:	ee2b 2a02 	vmul.f32	s4, s22, s4
    2744:	ee38 8a02 	vadd.f32	s16, s16, s4
    2748:	ee64 2a22 	vmul.f32	s5, s8, s5
    274c:	ee38 8a22 	vadd.f32	s16, s16, s5
    2750:	ee26 3a03 	vmul.f32	s6, s12, s6
    2754:	ee38 8a43 	vsub.f32	s16, s16, s6
    2758:	ee38 8a44 	vsub.f32	s16, s16, s8
    275c:	ee63 7a87 	vmul.f32	s15, s7, s14
    2760:	ee38 8a27 	vadd.f32	s16, s16, s15
    2764:	ee63 3aa6 	vmul.f32	s7, s7, s13
    2768:	ee38 8a23 	vadd.f32	s16, s16, s7
    276c:	ee20 0a04 	vmul.f32	s0, s0, s8
    2770:	ee38 8a00 	vadd.f32	s16, s16, s0
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
    2774:	ee27 7a25 	vmul.f32	s14, s14, s11
    2778:	ee27 7a2c 	vmul.f32	s14, s14, s25
    277c:	ee2b ba24 	vmul.f32	s22, s22, s9
    2780:	ee77 8a4b 	vsub.f32	s17, s14, s22
    2784:	ee66 6aa5 	vmul.f32	s13, s13, s11
    2788:	ee66 6aac 	vmul.f32	s13, s13, s25
    278c:	ee38 7aa6 	vadd.f32	s14, s17, s13
    2790:	ee66 8a05 	vmul.f32	s17, s12, s10
    2794:	ee77 8a68 	vsub.f32	s17, s14, s17
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); //normalise step magnitude
    2798:	ee6e 7aae 	vmul.f32	s15, s29, s29
    279c:	ee2e 7a0e 	vmul.f32	s14, s28, s28
    27a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    27a4:	ee28 7a08 	vmul.f32	s14, s16, s16
    27a8:	ee77 7a87 	vadd.f32	s15, s15, s14
    27ac:	ee28 0aa8 	vmul.f32	s0, s17, s17
    27b0:	ee37 0a80 	vadd.f32	s0, s15, s0
    27b4:	f7ff fee8 	bl	2588 <invSqrt(float)>
    qDot1 -= B_madgwick * s0;
    27b8:	4b56      	ldr	r3, [pc, #344]	; (2914 <Madgwick6DOF(float, float, float, float, float, float, float)+0x35c>)
    27ba:	edd3 7a00 	vldr	s15, [r3]
    s0 *= recipNorm;
    27be:	ee6e ea80 	vmul.f32	s29, s29, s0
    qDot1 -= B_madgwick * s0;
    27c2:	ee6e eaa7 	vmul.f32	s29, s29, s15
    27c6:	ee3a aa6e 	vsub.f32	s20, s20, s29
    s1 *= recipNorm;
    27ca:	ee2e ea00 	vmul.f32	s28, s28, s0
    qDot2 -= B_madgwick * s1;
    27ce:	ee2e ea27 	vmul.f32	s28, s28, s15
    27d2:	ee79 9ace 	vsub.f32	s19, s19, s28
    s2 *= recipNorm;
    27d6:	ee28 8a00 	vmul.f32	s16, s16, s0
    qDot3 -= B_madgwick * s2;
    27da:	ee28 8a27 	vmul.f32	s16, s16, s15
    27de:	ee7a aac8 	vsub.f32	s21, s21, s16
    s3 *= recipNorm;
    27e2:	ee68 8a80 	vmul.f32	s17, s17, s0
    qDot4 -= B_madgwick * s3;
    27e6:	ee68 8aa7 	vmul.f32	s17, s17, s15
    27ea:	ee39 9a68 	vsub.f32	s18, s18, s17
  q0 += qDot1 * invSampleFreq;
    27ee:	ee2a aa0d 	vmul.f32	s20, s20, s26
    27f2:	ee3a aa2d 	vadd.f32	s20, s20, s27
  q1 += qDot2 * invSampleFreq;
    27f6:	ee29 8a8d 	vmul.f32	s16, s19, s26
    27fa:	ee38 8a0c 	vadd.f32	s16, s16, s24
  q2 += qDot3 * invSampleFreq;
    27fe:	ee6a aa8d 	vmul.f32	s21, s21, s26
    2802:	ee7a aaab 	vadd.f32	s21, s21, s23
  q3 += qDot4 * invSampleFreq;
    2806:	ee69 8a0d 	vmul.f32	s17, s18, s26
    280a:	ee78 8aac 	vadd.f32	s17, s17, s25
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    280e:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    2812:	ee28 7a08 	vmul.f32	s14, s16, s16
    2816:	ee77 7a87 	vadd.f32	s15, s15, s14
    281a:	ee2a 7aaa 	vmul.f32	s14, s21, s21
    281e:	ee77 7a87 	vadd.f32	s15, s15, s14
    2822:	ee28 0aa8 	vmul.f32	s0, s17, s17
    2826:	ee37 0a80 	vadd.f32	s0, s15, s0
    282a:	f7ff fead 	bl	2588 <invSqrt(float)>
  q0 *= recipNorm;
    282e:	ee2a aa00 	vmul.f32	s20, s20, s0
    2832:	4b37      	ldr	r3, [pc, #220]	; (2910 <Madgwick6DOF(float, float, float, float, float, float, float)+0x358>)
    2834:	ed83 aa00 	vstr	s20, [r3]
  q1 *= recipNorm;
    2838:	ee28 8a00 	vmul.f32	s16, s16, s0
    283c:	4b31      	ldr	r3, [pc, #196]	; (2904 <Madgwick6DOF(float, float, float, float, float, float, float)+0x34c>)
    283e:	ed83 8a00 	vstr	s16, [r3]
  q2 *= recipNorm;
    2842:	ee6a aa80 	vmul.f32	s21, s21, s0
    2846:	4b30      	ldr	r3, [pc, #192]	; (2908 <Madgwick6DOF(float, float, float, float, float, float, float)+0x350>)
    2848:	edc3 aa00 	vstr	s21, [r3]
  q3 *= recipNorm;
    284c:	ee68 8a80 	vmul.f32	s17, s17, s0
    2850:	4b2e      	ldr	r3, [pc, #184]	; (290c <Madgwick6DOF(float, float, float, float, float, float, float)+0x354>)
    2852:	edc3 8a00 	vstr	s17, [r3]
  roll_IMU = atan2(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*57.29577951; //degrees
    2856:	ee6a baaa 	vmul.f32	s23, s21, s21
    285a:	ee68 0a08 	vmul.f32	s1, s16, s16
    285e:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    2862:	ee7b 0a60 	vsub.f32	s1, s22, s1
    2866:	ee2a 0a08 	vmul.f32	s0, s20, s16
    286a:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  { return __builtin_atan2f(__y, __x); }
    286e:	ee70 0aeb 	vsub.f32	s1, s1, s23
    2872:	ee30 0a27 	vadd.f32	s0, s0, s15
    2876:	f00d f861 	bl	f93c <atan2f>
    287a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    287e:	ed9f 9b1e 	vldr	d9, [pc, #120]	; 28f8 <Madgwick6DOF(float, float, float, float, float, float, float)+0x340>
    2882:	ee20 0b09 	vmul.f64	d0, d0, d9
    2886:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    288a:	4b23      	ldr	r3, [pc, #140]	; (2918 <Madgwick6DOF(float, float, float, float, float, float, float)+0x360>)
    288c:	ed83 0a00 	vstr	s0, [r3]
  pitch_IMU = -asin(-2.0f * (q1*q3 - q0*q2))*57.29577951; //degrees
    2890:	ee68 7a28 	vmul.f32	s15, s16, s17
    2894:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    2898:	ee77 7ac7 	vsub.f32	s15, s15, s14
  { return __builtin_asinf(__x); }
    289c:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
    28a0:	ee27 0a80 	vmul.f32	s0, s15, s0
    28a4:	f00d f81e 	bl	f8e4 <asinf>
    28a8:	eeb1 7a40 	vneg.f32	s14, s0
    28ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    28b0:	ee27 7b09 	vmul.f64	d7, d7, d9
    28b4:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    28b8:	4b18      	ldr	r3, [pc, #96]	; (291c <Madgwick6DOF(float, float, float, float, float, float, float)+0x364>)
    28ba:	ed83 7a00 	vstr	s14, [r3]
  yaw_IMU = -atan2(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*57.29577951; //degrees
    28be:	ee3b ba6b 	vsub.f32	s22, s22, s23
    28c2:	ee68 0aa8 	vmul.f32	s1, s17, s17
    28c6:	ee28 8a2a 	vmul.f32	s16, s16, s21
    28ca:	ee2a 0a28 	vmul.f32	s0, s20, s17
  { return __builtin_atan2f(__y, __x); }
    28ce:	ee7b 0a60 	vsub.f32	s1, s22, s1
    28d2:	ee38 0a00 	vadd.f32	s0, s16, s0
    28d6:	f00d f831 	bl	f93c <atan2f>
    28da:	eeb1 0a40 	vneg.f32	s0, s0
    28de:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    28e2:	ee20 0b09 	vmul.f64	d0, d0, d9
    28e6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    28ea:	4b0d      	ldr	r3, [pc, #52]	; (2920 <Madgwick6DOF(float, float, float, float, float, float, float)+0x368>)
    28ec:	ed83 0a00 	vstr	s0, [r3]
}
    28f0:	ecbd 8b0e 	vpop	{d8-d14}
    28f4:	bd08      	pop	{r3, pc}
    28f6:	bf00      	nop
    28f8:	1a5d2372 	.word	0x1a5d2372
    28fc:	404ca5dc 	.word	0x404ca5dc
    2900:	3c8efa39 	.word	0x3c8efa39
    2904:	2000515c 	.word	0x2000515c
    2908:	20005160 	.word	0x20005160
    290c:	20005164 	.word	0x20005164
    2910:	20003a20 	.word	0x20003a20
    2914:	20003314 	.word	0x20003314
    2918:	20005170 	.word	0x20005170
    291c:	20005144 	.word	0x20005144
    2920:	200053a8 	.word	0x200053a8

00002924 <radioSetup()>:
unsigned long channel_1_raw, channel_2_raw, channel_3_raw, channel_4_raw, channel_5_raw, 
							channel_6_raw, channel_7_raw, channel_8_raw, channel_9_raw;
int ppm_counter = 0;
unsigned long time_ms = 0;

void radioSetup() {
    2924:	b508      	push	{r3, lr}
    attachInterrupt(digitalPinToInterrupt(ch6Pin), getCh6, CHANGE);
    delay(20);

  //SBUS Recevier 
  #elif defined USE_SBUS_RX
    sbus.begin();
    2926:	4802      	ldr	r0, [pc, #8]	; (2930 <radioSetup()+0xc>)
    2928:	f001 fd34 	bl	4394 <SBUS::begin()>
  #elif defined USE_DSM_RX
    Serial3.begin(115000);
  #else
    #error No RX type defined...
  #endif
}
    292c:	bd08      	pop	{r3, pc}
    292e:	bf00      	nop
    2930:	200051f8 	.word	0x200051f8

00002934 <setup>:
void setup() {
    2934:	b5f0      	push	{r4, r5, r6, r7, lr}
    2936:	b0a5      	sub	sp, #148	; 0x94
		uint32_t millis_begin = systick_millis_count;
    2938:	4b7d      	ldr	r3, [pc, #500]	; (2b30 <setup+0x1fc>)
    293a:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    293c:	4c7d      	ldr	r4, [pc, #500]	; (2b34 <setup+0x200>)
    293e:	4f7e      	ldr	r7, [pc, #504]	; (2b38 <setup+0x204>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2940:	461d      	mov	r5, r3
		while (!(*this)) {
    2942:	e004      	b.n	294e <setup+0x1a>
				if (elapsed > 2000) break;
    2944:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2948:	d813      	bhi.n	2972 <setup+0x3e>
			yield();
    294a:	f00c fbf1 	bl	f130 <yield>
		yield();
    294e:	f00c fbef 	bl	f130 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2952:	7823      	ldrb	r3, [r4, #0]
    2954:	2b00      	cmp	r3, #0
    2956:	f000 8203 	beq.w	2d60 <setup+0x42c>
    295a:	783b      	ldrb	r3, [r7, #0]
    295c:	f013 0f01 	tst.w	r3, #1
    2960:	f000 81fe 	beq.w	2d60 <setup+0x42c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2964:	682b      	ldr	r3, [r5, #0]
    2966:	4a75      	ldr	r2, [pc, #468]	; (2b3c <setup+0x208>)
    2968:	6812      	ldr	r2, [r2, #0]
    296a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    296c:	2b0e      	cmp	r3, #14
    296e:	f240 81f7 	bls.w	2d60 <setup+0x42c>
  delay(500);
    2972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2976:	f00a fce7 	bl	d348 <delay>
  pinMode(13, OUTPUT); //Pin 13 LED blinker on board, do not modify 
    297a:	2101      	movs	r1, #1
    297c:	200d      	movs	r0, #13
    297e:	f00a fd31 	bl	d3e4 <pinMode>
  pinMode(m1Pin, OUTPUT);
    2982:	2101      	movs	r1, #1
    2984:	2000      	movs	r0, #0
    2986:	f00a fd2d 	bl	d3e4 <pinMode>
  pinMode(m2Pin, OUTPUT);
    298a:	2101      	movs	r1, #1
    298c:	4608      	mov	r0, r1
    298e:	f00a fd29 	bl	d3e4 <pinMode>
  pinMode(m3Pin, OUTPUT);
    2992:	2101      	movs	r1, #1
    2994:	2002      	movs	r0, #2
    2996:	f00a fd25 	bl	d3e4 <pinMode>
  pinMode(m4Pin, OUTPUT);
    299a:	2101      	movs	r1, #1
    299c:	2003      	movs	r0, #3
    299e:	f00a fd21 	bl	d3e4 <pinMode>
  pinMode(m5Pin, OUTPUT);
    29a2:	2101      	movs	r1, #1
    29a4:	2004      	movs	r0, #4
    29a6:	f00a fd1d 	bl	d3e4 <pinMode>
  pinMode(m6Pin, OUTPUT);
    29aa:	2101      	movs	r1, #1
    29ac:	2005      	movs	r0, #5
    29ae:	f00a fd19 	bl	d3e4 <pinMode>
  servo1.attach(servo1Pin, 1000, 2100); //Pin, min PWM value, max PWM value
    29b2:	f640 0334 	movw	r3, #2100	; 0x834
    29b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29ba:	2106      	movs	r1, #6
    29bc:	4860      	ldr	r0, [pc, #384]	; (2b40 <setup+0x20c>)
    29be:	f002 faf5 	bl	4fac <PWMServo::attach(int, int, int)>
  servo2.attach(servo2Pin, 1000, 2100);
    29c2:	f640 0334 	movw	r3, #2100	; 0x834
    29c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29ca:	2107      	movs	r1, #7
    29cc:	485d      	ldr	r0, [pc, #372]	; (2b44 <setup+0x210>)
    29ce:	f002 faed 	bl	4fac <PWMServo::attach(int, int, int)>
  servo3.attach(servo3Pin, 1000, 2100);
    29d2:	f640 0334 	movw	r3, #2100	; 0x834
    29d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29da:	210a      	movs	r1, #10
    29dc:	485a      	ldr	r0, [pc, #360]	; (2b48 <setup+0x214>)
    29de:	f002 fae5 	bl	4fac <PWMServo::attach(int, int, int)>
  servo4.attach(servo4Pin, 1000, 2100);
    29e2:	f640 0334 	movw	r3, #2100	; 0x834
    29e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29ea:	2109      	movs	r1, #9
    29ec:	4857      	ldr	r0, [pc, #348]	; (2b4c <setup+0x218>)
    29ee:	f002 fadd 	bl	4fac <PWMServo::attach(int, int, int)>
  servo5.attach(servo5Pin, 1000, 2100);
    29f2:	f640 0334 	movw	r3, #2100	; 0x834
    29f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29fa:	2108      	movs	r1, #8
    29fc:	4854      	ldr	r0, [pc, #336]	; (2b50 <setup+0x21c>)
    29fe:	f002 fad5 	bl	4fac <PWMServo::attach(int, int, int)>
  servo6.attach(servo6Pin, 1000, 2100);
    2a02:	f640 0334 	movw	r3, #2100	; 0x834
    2a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a0a:	210b      	movs	r1, #11
    2a0c:	4851      	ldr	r0, [pc, #324]	; (2b54 <setup+0x220>)
    2a0e:	f002 facd 	bl	4fac <PWMServo::attach(int, int, int)>
  servo7.attach(servo7Pin, 1000, 2100);
    2a12:	f640 0334 	movw	r3, #2100	; 0x834
    2a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2a1a:	210c      	movs	r1, #12
    2a1c:	484e      	ldr	r0, [pc, #312]	; (2b58 <setup+0x224>)
    2a1e:	f002 fac5 	bl	4fac <PWMServo::attach(int, int, int)>
#elif defined(__arm__) && defined(TEENSYDUINO)
    static uint32_t attachedpins[]; // 1 bit per digital pin
#endif
  public:
    PWMServo();
    uint8_t attach(int pinArg) { return attach(pinArg, 544, 2400); }
    2a22:	f44f 6316 	mov.w	r3, #2400	; 0x960
    2a26:	f44f 7208 	mov.w	r2, #544	; 0x220
    2a2a:	2118      	movs	r1, #24
    2a2c:	484b      	ldr	r0, [pc, #300]	; (2b5c <setup+0x228>)
    2a2e:	f002 fabd 	bl	4fac <PWMServo::attach(int, int, int)>
  digitalWrite(13, HIGH);
    2a32:	2101      	movs	r1, #1
    2a34:	200d      	movs	r0, #13
    2a36:	f00a fc9d 	bl	d374 <digitalWrite>
  delay(5);
    2a3a:	2005      	movs	r0, #5
    2a3c:	f00a fc84 	bl	d348 <delay>
							  return write((const uint8_t *)str, strlen(str)); }
    2a40:	4847      	ldr	r0, [pc, #284]	; (2b60 <setup+0x22c>)
    2a42:	6803      	ldr	r3, [r0, #0]
    2a44:	685b      	ldr	r3, [r3, #4]
    2a46:	2217      	movs	r2, #23
    2a48:	4946      	ldr	r1, [pc, #280]	; (2b64 <setup+0x230>)
    2a4a:	4798      	blx	r3
  if (SD.begin(chipSelect)) {
    2a4c:	21fe      	movs	r1, #254	; 0xfe
    2a4e:	4846      	ldr	r0, [pc, #280]	; (2b68 <setup+0x234>)
    2a50:	f002 fd46 	bl	54e0 <SDClass::begin(unsigned char)>
    2a54:	2800      	cmp	r0, #0
    2a56:	f000 8175 	beq.w	2d44 <setup+0x410>
    2a5a:	4c41      	ldr	r4, [pc, #260]	; (2b60 <setup+0x22c>)
    2a5c:	6823      	ldr	r3, [r4, #0]
    2a5e:	685b      	ldr	r3, [r3, #4]
    2a60:	2211      	movs	r2, #17
    2a62:	4942      	ldr	r1, [pc, #264]	; (2b6c <setup+0x238>)
    2a64:	4620      	mov	r0, r4
    2a66:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2a68:	4620      	mov	r0, r4
    2a6a:	f009 ff14 	bl	c896 <Print::println()>
		SD_is_present = 1;
    2a6e:	4b40      	ldr	r3, [pc, #256]	; (2b70 <setup+0x23c>)
    2a70:	2201      	movs	r2, #1
    2a72:	701a      	strb	r2, [r3, #0]
	StringSumHelper(const String &s) : String(s) {}
    2a74:	493f      	ldr	r1, [pc, #252]	; (2b74 <setup+0x240>)
    2a76:	a814      	add	r0, sp, #80	; 0x50
    2a78:	f00a f9ed 	bl	ce56 <String::String(String const&)>
		fileName = filePrefix + String(fileIncrement) + fileExtension;
    2a7c:	220a      	movs	r2, #10
    2a7e:	2100      	movs	r1, #0
    2a80:	a818      	add	r0, sp, #96	; 0x60
    2a82:	f00a fa0c 	bl	ce9e <String::String(int, unsigned char)>
    2a86:	a918      	add	r1, sp, #96	; 0x60
    2a88:	a814      	add	r0, sp, #80	; 0x50
    2a8a:	f00a fa67 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
    2a8e:	493a      	ldr	r1, [pc, #232]	; (2b78 <setup+0x244>)
    2a90:	f00a fa64 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
    2a94:	4601      	mov	r1, r0
    2a96:	4839      	ldr	r0, [pc, #228]	; (2b7c <setup+0x248>)
    2a98:	f00a f9d3 	bl	ce42 <String::operator=(String const&)>
    2a9c:	a818      	add	r0, sp, #96	; 0x60
    2a9e:	f00a f95f 	bl	cd60 <String::~String()>
class StringSumHelper : public String
    2aa2:	a814      	add	r0, sp, #80	; 0x50
    2aa4:	f00a f95c 	bl	cd60 <String::~String()>
		int fileIncrement = 0;
    2aa8:	2400      	movs	r4, #0
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2aaa:	4d34      	ldr	r5, [pc, #208]	; (2b7c <setup+0x248>)
    2aac:	4f34      	ldr	r7, [pc, #208]	; (2b80 <setup+0x24c>)
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return m_fVol ? m_fVol->exists(path) :
    2aae:	4e2e      	ldr	r6, [pc, #184]	; (2b68 <setup+0x234>)
		while(SD.exists(fileName.c_str())) {
    2ab0:	e02a      	b.n	2b08 <setup+0x1d4>
           m_xVol ? m_xVol->exists(path) : false;
    2ab2:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
    2ab6:	2900      	cmp	r1, #0
    2ab8:	d064      	beq.n	2b84 <setup+0x250>
  ExFatFile() {}
    2aba:	2300      	movs	r3, #0
    2abc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    2ac0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    2ac4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2ac8:	4668      	mov	r0, sp
    2aca:	f003 faf2 	bl	60b2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2ace:	2800      	cmp	r0, #0
    2ad0:	d058      	beq.n	2b84 <setup+0x250>
			fileIncrement++;
    2ad2:	3401      	adds	r4, #1
	StringSumHelper(const String &s) : String(s) {}
    2ad4:	4927      	ldr	r1, [pc, #156]	; (2b74 <setup+0x240>)
    2ad6:	a81c      	add	r0, sp, #112	; 0x70
    2ad8:	f00a f9bd 	bl	ce56 <String::String(String const&)>
			fileName = filePrefix + String(fileIncrement) + fileExtension;
    2adc:	220a      	movs	r2, #10
    2ade:	4621      	mov	r1, r4
    2ae0:	a820      	add	r0, sp, #128	; 0x80
    2ae2:	f00a f9dc 	bl	ce9e <String::String(int, unsigned char)>
    2ae6:	a920      	add	r1, sp, #128	; 0x80
    2ae8:	a81c      	add	r0, sp, #112	; 0x70
    2aea:	f00a fa37 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
    2aee:	4922      	ldr	r1, [pc, #136]	; (2b78 <setup+0x244>)
    2af0:	f00a fa34 	bl	cf5c <operator+(StringSumHelper const&, String const&)>
    2af4:	4601      	mov	r1, r0
    2af6:	4628      	mov	r0, r5
    2af8:	f00a f9a3 	bl	ce42 <String::operator=(String const&)>
    2afc:	a820      	add	r0, sp, #128	; 0x80
    2afe:	f00a f92f 	bl	cd60 <String::~String()>
class StringSumHelper : public String
    2b02:	a81c      	add	r0, sp, #112	; 0x70
    2b04:	f00a f92c 	bl	cd60 <String::~String()>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    2b08:	682a      	ldr	r2, [r5, #0]
    2b0a:	2a00      	cmp	r2, #0
    2b0c:	bf08      	it	eq
    2b0e:	463a      	moveq	r2, r7
    return m_fVol ? m_fVol->exists(path) :
    2b10:	f8d6 1484 	ldr.w	r1, [r6, #1156]	; 0x484
    2b14:	2900      	cmp	r1, #0
    2b16:	d0cc      	beq.n	2ab2 <setup+0x17e>
  FatFile() {}
    2b18:	2300      	movs	r3, #0
    2b1a:	f88d 3000 	strb.w	r3, [sp]
    2b1e:	f88d 3001 	strb.w	r3, [sp, #1]
    2b22:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    2b26:	4668      	mov	r0, sp
    2b28:	f005 fa67 	bl	7ffa <FatFile::open(FatVolume*, char const*, int)>
    2b2c:	e7cf      	b.n	2ace <setup+0x19a>
    2b2e:	bf00      	nop
    2b30:	20005388 	.word	0x20005388
    2b34:	200053d8 	.word	0x200053d8
    2b38:	200053d7 	.word	0x200053d7
    2b3c:	2000539c 	.word	0x2000539c
    2b40:	2000535c 	.word	0x2000535c
    2b44:	20005360 	.word	0x20005360
    2b48:	20005364 	.word	0x20005364
    2b4c:	20005368 	.word	0x20005368
    2b50:	2000536c 	.word	0x2000536c
    2b54:	20005370 	.word	0x20005370
    2b58:	20005374 	.word	0x20005374
    2b5c:	200050dc 	.word	0x200050dc
    2b60:	20003354 	.word	0x20003354
    2b64:	20002e1c 	.word	0x20002e1c
    2b68:	20004160 	.word	0x20004160
    2b6c:	20002e34 	.word	0x20002e34
    2b70:	200053be 	.word	0x200053be
    2b74:	200050cc 	.word	0x200050cc
    2b78:	200050ac 	.word	0x200050ac
    2b7c:	200050bc 	.word	0x200050bc
    2b80:	200031dc 	.word	0x200031dc
    2b84:	4b7c      	ldr	r3, [pc, #496]	; (2d78 <setup+0x444>)
    2b86:	681a      	ldr	r2, [r3, #0]
    2b88:	2a00      	cmp	r2, #0
    2b8a:	f000 80d4 	beq.w	2d36 <setup+0x402>
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2b8e:	f244 2302 	movw	r3, #16898	; 0x4202
    2b92:	497a      	ldr	r1, [pc, #488]	; (2d7c <setup+0x448>)
    2b94:	4668      	mov	r0, sp
    2b96:	f007 fa6f 	bl	a078 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	f000 80cc 	beq.w	2d3a <setup+0x406>
		if (file) return File(new SDFile(file));
    2ba2:	205c      	movs	r0, #92	; 0x5c
    2ba4:	f00a fcfe 	bl	d5a4 <operator new(unsigned int)>
    2ba8:	4604      	mov	r4, r0
class FileImpl {
    2baa:	2500      	movs	r5, #0
    2bac:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2bae:	4b74      	ldr	r3, [pc, #464]	; (2d80 <setup+0x44c>)
    2bb0:	6003      	str	r3, [r0, #0]
class Print
    2bb2:	9b01      	ldr	r3, [sp, #4]
    2bb4:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    2bb6:	4b73      	ldr	r3, [pc, #460]	; (2d84 <setup+0x450>)
    2bb8:	6083      	str	r3, [r0, #8]
    2bba:	9b02      	ldr	r3, [sp, #8]
    2bbc:	6103      	str	r3, [r0, #16]
    2bbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2bc2:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    2bc4:	a904      	add	r1, sp, #16
    2bc6:	3018      	adds	r0, #24
    2bc8:	f007 f91f 	bl	9e0a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2bcc:	4b6e      	ldr	r3, [pc, #440]	; (2d88 <setup+0x454>)
    2bce:	60a3      	str	r3, [r4, #8]
    2bd0:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    2bd2:	6863      	ldr	r3, [r4, #4]
    2bd4:	3301      	adds	r3, #1
    2bd6:	6063      	str	r3, [r4, #4]
    2bd8:	4b6c      	ldr	r3, [pc, #432]	; (2d8c <setup+0x458>)
    2bda:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    2bdc:	a804      	add	r0, sp, #16
    2bde:	f007 f955 	bl	9e8c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    2be2:	4b6b      	ldr	r3, [pc, #428]	; (2d90 <setup+0x45c>)
    2be4:	691b      	ldr	r3, [r3, #16]
    2be6:	b16b      	cbz	r3, 2c04 <setup+0x2d0>
		if (--(f->refcount) == 0) {
    2be8:	685a      	ldr	r2, [r3, #4]
    2bea:	3a01      	subs	r2, #1
    2bec:	605a      	str	r2, [r3, #4]
    2bee:	b94a      	cbnz	r2, 2c04 <setup+0x2d0>
			f->close();
    2bf0:	4d67      	ldr	r5, [pc, #412]	; (2d90 <setup+0x45c>)
    2bf2:	6928      	ldr	r0, [r5, #16]
    2bf4:	6803      	ldr	r3, [r0, #0]
    2bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2bf8:	4798      	blx	r3
			delete f;
    2bfa:	6928      	ldr	r0, [r5, #16]
    2bfc:	b110      	cbz	r0, 2c04 <setup+0x2d0>
    2bfe:	6803      	ldr	r3, [r0, #0]
    2c00:	685b      	ldr	r3, [r3, #4]
    2c02:	4798      	blx	r3
		f = file.f;
    2c04:	4d62      	ldr	r5, [pc, #392]	; (2d90 <setup+0x45c>)
    2c06:	612c      	str	r4, [r5, #16]
			"roll_imu,pitch_imu,yaw_imu,alpha,beta,roll_des,pitch_des,yaw_des,throttle_des,roll_pid,pitch_pid,yaw_pid,radio_ch1,radio_ch2,radio_ch3,radio_ch4,radio_ch5,radio_ch6,radio_ch7,radio_ch8,radio_ch9,radio_ch10,radio_ch11,radio_ch12,radio_ch13,GyroX,GyroY,GyroZ,AccX,AccY,AccZ,s1_command,s2_command,s3_command,s4_command,kp_roll,ki_roll,kd_roll,kp_pitch,ki_pitch,kd_pitch,kp_yaw,ki_yaw,kd_yaw,failsafeTriggered";
    2c08:	4962      	ldr	r1, [pc, #392]	; (2d94 <setup+0x460>)
    2c0a:	4668      	mov	r0, sp
    2c0c:	f00a f8f1 	bl	cdf2 <String::String(char const*)>
	size_t println(const String &s)			{ return print(s) + println(); }
    2c10:	4669      	mov	r1, sp
    2c12:	4628      	mov	r0, r5
    2c14:	f009 fe1a 	bl	c84c <Print::print(String const&)>
    2c18:	4628      	mov	r0, r5
    2c1a:	f009 fe3c 	bl	c896 <Print::println()>
		if (f) {
    2c1e:	6928      	ldr	r0, [r5, #16]
    2c20:	b198      	cbz	r0, 2c4a <setup+0x316>
			f->close();
    2c22:	6803      	ldr	r3, [r0, #0]
    2c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c26:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    2c28:	692a      	ldr	r2, [r5, #16]
    2c2a:	6853      	ldr	r3, [r2, #4]
    2c2c:	3b01      	subs	r3, #1
    2c2e:	6053      	str	r3, [r2, #4]
    2c30:	b943      	cbnz	r3, 2c44 <setup+0x310>
			f->close();
    2c32:	6928      	ldr	r0, [r5, #16]
    2c34:	6803      	ldr	r3, [r0, #0]
    2c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c38:	4798      	blx	r3
			delete f;
    2c3a:	6928      	ldr	r0, [r5, #16]
    2c3c:	b110      	cbz	r0, 2c44 <setup+0x310>
    2c3e:	6803      	ldr	r3, [r0, #0]
    2c40:	685b      	ldr	r3, [r3, #4]
    2c42:	4798      	blx	r3
		}
		f = nullptr;
    2c44:	4b52      	ldr	r3, [pc, #328]	; (2d90 <setup+0x45c>)
    2c46:	2200      	movs	r2, #0
    2c48:	611a      	str	r2, [r3, #16]
  }
    2c4a:	4668      	mov	r0, sp
    2c4c:	f00a f888 	bl	cd60 <String::~String()>
  radioSetup();
    2c50:	f7ff fe68 	bl	2924 <radioSetup()>
  channel_1_pwm = channel_1_fs;
    2c54:	4b50      	ldr	r3, [pc, #320]	; (2d98 <setup+0x464>)
    2c56:	681a      	ldr	r2, [r3, #0]
    2c58:	4b50      	ldr	r3, [pc, #320]	; (2d9c <setup+0x468>)
    2c5a:	601a      	str	r2, [r3, #0]
  channel_2_pwm = channel_2_fs;
    2c5c:	4b50      	ldr	r3, [pc, #320]	; (2da0 <setup+0x46c>)
    2c5e:	681a      	ldr	r2, [r3, #0]
    2c60:	4b50      	ldr	r3, [pc, #320]	; (2da4 <setup+0x470>)
    2c62:	601a      	str	r2, [r3, #0]
  channel_3_pwm = channel_3_fs;
    2c64:	4b50      	ldr	r3, [pc, #320]	; (2da8 <setup+0x474>)
    2c66:	681a      	ldr	r2, [r3, #0]
    2c68:	4b50      	ldr	r3, [pc, #320]	; (2dac <setup+0x478>)
    2c6a:	601a      	str	r2, [r3, #0]
  channel_4_pwm = channel_4_fs;
    2c6c:	4b50      	ldr	r3, [pc, #320]	; (2db0 <setup+0x47c>)
    2c6e:	681a      	ldr	r2, [r3, #0]
    2c70:	4b50      	ldr	r3, [pc, #320]	; (2db4 <setup+0x480>)
    2c72:	601a      	str	r2, [r3, #0]
  channel_5_pwm = channel_5_fs;
    2c74:	4b50      	ldr	r3, [pc, #320]	; (2db8 <setup+0x484>)
    2c76:	681a      	ldr	r2, [r3, #0]
    2c78:	4b50      	ldr	r3, [pc, #320]	; (2dbc <setup+0x488>)
    2c7a:	601a      	str	r2, [r3, #0]
  channel_6_pwm = channel_6_fs;
    2c7c:	4b50      	ldr	r3, [pc, #320]	; (2dc0 <setup+0x48c>)
    2c7e:	681a      	ldr	r2, [r3, #0]
    2c80:	4b50      	ldr	r3, [pc, #320]	; (2dc4 <setup+0x490>)
    2c82:	601a      	str	r2, [r3, #0]
	channel_7_pwm = channel_7_fs;
    2c84:	4b50      	ldr	r3, [pc, #320]	; (2dc8 <setup+0x494>)
    2c86:	681a      	ldr	r2, [r3, #0]
    2c88:	4b50      	ldr	r3, [pc, #320]	; (2dcc <setup+0x498>)
    2c8a:	601a      	str	r2, [r3, #0]
	channel_8_pwm = channel_8_fs;
    2c8c:	4b50      	ldr	r3, [pc, #320]	; (2dd0 <setup+0x49c>)
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	4b50      	ldr	r3, [pc, #320]	; (2dd4 <setup+0x4a0>)
    2c92:	601a      	str	r2, [r3, #0]
	channel_9_pwm = channel_9_fs;
    2c94:	4b50      	ldr	r3, [pc, #320]	; (2dd8 <setup+0x4a4>)
    2c96:	681a      	ldr	r2, [r3, #0]
    2c98:	4b50      	ldr	r3, [pc, #320]	; (2ddc <setup+0x4a8>)
    2c9a:	601a      	str	r2, [r3, #0]
	channel_10_pwm = channel_10_fs;
    2c9c:	4b50      	ldr	r3, [pc, #320]	; (2de0 <setup+0x4ac>)
    2c9e:	681a      	ldr	r2, [r3, #0]
    2ca0:	4b50      	ldr	r3, [pc, #320]	; (2de4 <setup+0x4b0>)
    2ca2:	601a      	str	r2, [r3, #0]
	channel_11_pwm = channel_11_fs;
    2ca4:	4b50      	ldr	r3, [pc, #320]	; (2de8 <setup+0x4b4>)
    2ca6:	681a      	ldr	r2, [r3, #0]
    2ca8:	4b50      	ldr	r3, [pc, #320]	; (2dec <setup+0x4b8>)
    2caa:	601a      	str	r2, [r3, #0]
	channel_12_pwm = channel_12_fs;
    2cac:	4b50      	ldr	r3, [pc, #320]	; (2df0 <setup+0x4bc>)
    2cae:	681a      	ldr	r2, [r3, #0]
    2cb0:	4b50      	ldr	r3, [pc, #320]	; (2df4 <setup+0x4c0>)
    2cb2:	601a      	str	r2, [r3, #0]
	channel_13_pwm = channel_13_fs;
    2cb4:	4b50      	ldr	r3, [pc, #320]	; (2df8 <setup+0x4c4>)
    2cb6:	681a      	ldr	r2, [r3, #0]
    2cb8:	4b50      	ldr	r3, [pc, #320]	; (2dfc <setup+0x4c8>)
    2cba:	601a      	str	r2, [r3, #0]
  IMUinit();
    2cbc:	f7fd fe2c 	bl	918 <IMUinit()>
  delay(5);
    2cc0:	2005      	movs	r0, #5
    2cc2:	f00a fb41 	bl	d348 <delay>
  servo1.write(0); //Command servo angle from 0-180 degrees (1000 to 2000 PWM)
    2cc6:	2100      	movs	r1, #0
    2cc8:	484d      	ldr	r0, [pc, #308]	; (2e00 <setup+0x4cc>)
    2cca:	f002 f9bd 	bl	5048 <PWMServo::write(int)>
  servo2.write(0); //Set these to 90 for servos if you do not want them to briefly max out on startup
    2cce:	2100      	movs	r1, #0
    2cd0:	484c      	ldr	r0, [pc, #304]	; (2e04 <setup+0x4d0>)
    2cd2:	f002 f9b9 	bl	5048 <PWMServo::write(int)>
  servo3.write(0); //Keep these at 0 if you are using servo outputs for motors
    2cd6:	2100      	movs	r1, #0
    2cd8:	484b      	ldr	r0, [pc, #300]	; (2e08 <setup+0x4d4>)
    2cda:	f002 f9b5 	bl	5048 <PWMServo::write(int)>
  servo4.write(0);
    2cde:	2100      	movs	r1, #0
    2ce0:	484a      	ldr	r0, [pc, #296]	; (2e0c <setup+0x4d8>)
    2ce2:	f002 f9b1 	bl	5048 <PWMServo::write(int)>
  servo5.write(0);
    2ce6:	2100      	movs	r1, #0
    2ce8:	4849      	ldr	r0, [pc, #292]	; (2e10 <setup+0x4dc>)
    2cea:	f002 f9ad 	bl	5048 <PWMServo::write(int)>
  servo6.write(0);
    2cee:	2100      	movs	r1, #0
    2cf0:	4848      	ldr	r0, [pc, #288]	; (2e14 <setup+0x4e0>)
    2cf2:	f002 f9a9 	bl	5048 <PWMServo::write(int)>
  servo7.write(0);
    2cf6:	2100      	movs	r1, #0
    2cf8:	4847      	ldr	r0, [pc, #284]	; (2e18 <setup+0x4e4>)
    2cfa:	f002 f9a5 	bl	5048 <PWMServo::write(int)>
  delay(5);
    2cfe:	2005      	movs	r0, #5
    2d00:	f00a fb22 	bl	d348 <delay>
  m1_command_PWM = 125; //Command OneShot125 ESC from 125 to 250us pulse length
    2d04:	237d      	movs	r3, #125	; 0x7d
    2d06:	4a45      	ldr	r2, [pc, #276]	; (2e1c <setup+0x4e8>)
    2d08:	6013      	str	r3, [r2, #0]
  m2_command_PWM = 125;
    2d0a:	4a45      	ldr	r2, [pc, #276]	; (2e20 <setup+0x4ec>)
    2d0c:	6013      	str	r3, [r2, #0]
  m3_command_PWM = 125;
    2d0e:	4a45      	ldr	r2, [pc, #276]	; (2e24 <setup+0x4f0>)
    2d10:	6013      	str	r3, [r2, #0]
  m4_command_PWM = 125;
    2d12:	4a45      	ldr	r2, [pc, #276]	; (2e28 <setup+0x4f4>)
    2d14:	6013      	str	r3, [r2, #0]
  m5_command_PWM = 125;
    2d16:	4a45      	ldr	r2, [pc, #276]	; (2e2c <setup+0x4f8>)
    2d18:	6013      	str	r3, [r2, #0]
  m6_command_PWM = 125;
    2d1a:	4a45      	ldr	r2, [pc, #276]	; (2e30 <setup+0x4fc>)
    2d1c:	6013      	str	r3, [r2, #0]
  armMotors(); //Loop over commandMotors() until ESCs happily arm
    2d1e:	f7fe fec1 	bl	1aa4 <armMotors()>
  setupBlink(3,160,70); //numBlinks, upTime (ms), downTime (ms)
    2d22:	2246      	movs	r2, #70	; 0x46
    2d24:	21a0      	movs	r1, #160	; 0xa0
    2d26:	2003      	movs	r0, #3
    2d28:	f7fe ff54 	bl	1bd4 <setupBlink(int, int, int)>
	doneWithSetup = 1;
    2d2c:	4b41      	ldr	r3, [pc, #260]	; (2e34 <setup+0x500>)
    2d2e:	2201      	movs	r2, #1
    2d30:	701a      	strb	r2, [r3, #0]
}
    2d32:	b025      	add	sp, #148	; 0x94
    2d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d36:	4a40      	ldr	r2, [pc, #256]	; (2e38 <setup+0x504>)
    2d38:	e729      	b.n	2b8e <setup+0x25a>
  bool isOpen() const {return m_fFile || m_xFile;}
    2d3a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    2d3c:	2c00      	cmp	r4, #0
    2d3e:	f47f af30 	bne.w	2ba2 <setup+0x26e>
    2d42:	e749      	b.n	2bd8 <setup+0x2a4>
							  return write((const uint8_t *)str, strlen(str)); }
    2d44:	4c3d      	ldr	r4, [pc, #244]	; (2e3c <setup+0x508>)
    2d46:	6823      	ldr	r3, [r4, #0]
    2d48:	685b      	ldr	r3, [r3, #4]
    2d4a:	221b      	movs	r2, #27
    2d4c:	493c      	ldr	r1, [pc, #240]	; (2e40 <setup+0x50c>)
    2d4e:	4620      	mov	r0, r4
    2d50:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    2d52:	4620      	mov	r0, r4
    2d54:	f009 fd9f 	bl	c896 <Print::println()>
		SD_is_present = 0;
    2d58:	4b3a      	ldr	r3, [pc, #232]	; (2e44 <setup+0x510>)
    2d5a:	2200      	movs	r2, #0
    2d5c:	701a      	strb	r2, [r3, #0]
    2d5e:	e777      	b.n	2c50 <setup+0x31c>
			uint32_t elapsed = systick_millis_count - millis_begin;
    2d60:	682b      	ldr	r3, [r5, #0]
    2d62:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2d64:	7822      	ldrb	r2, [r4, #0]
    2d66:	2a00      	cmp	r2, #0
    2d68:	f47f adec 	bne.w	2944 <setup+0x10>
				if (elapsed > 750) break;
    2d6c:	f240 22ee 	movw	r2, #750	; 0x2ee
    2d70:	4293      	cmp	r3, r2
    2d72:	f67f adea 	bls.w	294a <setup+0x16>
    2d76:	e5fc      	b.n	2972 <setup+0x3e>
    2d78:	200050bc 	.word	0x200050bc
    2d7c:	20004164 	.word	0x20004164
    2d80:	200024f0 	.word	0x200024f0
    2d84:	2000254c 	.word	0x2000254c
    2d88:	200024cc 	.word	0x200024cc
    2d8c:	200023c0 	.word	0x200023c0
    2d90:	200039a4 	.word	0x200039a4
    2d94:	20002e48 	.word	0x20002e48
    2d98:	2000397c 	.word	0x2000397c
    2d9c:	20005014 	.word	0x20005014
    2da0:	20003980 	.word	0x20003980
    2da4:	20005020 	.word	0x20005020
    2da8:	20003984 	.word	0x20003984
    2dac:	2000502c 	.word	0x2000502c
    2db0:	20003988 	.word	0x20003988
    2db4:	20005038 	.word	0x20005038
    2db8:	2000398c 	.word	0x2000398c
    2dbc:	20005044 	.word	0x20005044
    2dc0:	20003990 	.word	0x20003990
    2dc4:	20005048 	.word	0x20005048
    2dc8:	20003994 	.word	0x20003994
    2dcc:	2000504c 	.word	0x2000504c
    2dd0:	20003998 	.word	0x20003998
    2dd4:	20005050 	.word	0x20005050
    2dd8:	2000399c 	.word	0x2000399c
    2ddc:	20005054 	.word	0x20005054
    2de0:	2000396c 	.word	0x2000396c
    2de4:	20005004 	.word	0x20005004
    2de8:	20003970 	.word	0x20003970
    2dec:	20005008 	.word	0x20005008
    2df0:	20003974 	.word	0x20003974
    2df4:	2000500c 	.word	0x2000500c
    2df8:	20003978 	.word	0x20003978
    2dfc:	20005010 	.word	0x20005010
    2e00:	2000535c 	.word	0x2000535c
    2e04:	20005360 	.word	0x20005360
    2e08:	20005364 	.word	0x20005364
    2e0c:	20005368 	.word	0x20005368
    2e10:	2000536c 	.word	0x2000536c
    2e14:	20005370 	.word	0x20005370
    2e18:	20005374 	.word	0x20005374
    2e1c:	200050e0 	.word	0x200050e0
    2e20:	200050e8 	.word	0x200050e8
    2e24:	200050f0 	.word	0x200050f0
    2e28:	200050f8 	.word	0x200050f8
    2e2c:	20005100 	.word	0x20005100
    2e30:	20005108 	.word	0x20005108
    2e34:	200053cb 	.word	0x200053cb
    2e38:	200031dc 	.word	0x200031dc
    2e3c:	20003354 	.word	0x20003354
    2e40:	20002fe0 	.word	0x20002fe0
    2e44:	200053be 	.word	0x200053be

00002e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>:

    /** \brief Constructs a Matrix or Array and initializes it by elements given by an initializer list of initializer
      * lists \cpp11
      */
    EIGEN_DEVICE_FUNC
    explicit EIGEN_STRONG_INLINE PlainObjectBase(const std::initializer_list<std::initializer_list<Scalar>>& list)
    2e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
    2e4a:	680e      	ldr	r6, [r1, #0]
      size() const noexcept { return _M_len; }
    2e4c:	684b      	ldr	r3, [r1, #4]

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    2e4e:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
      : m_storage()
    {
      _check_template_params();

      size_t list_size = 0;
      if (list.begin() != list.end()) {
    2e52:	42be      	cmp	r6, r7
    2e54:	d02c      	beq.n	2eb0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x68>
      size() const noexcept { return _M_len; }
    2e56:	6872      	ldr	r2, [r6, #4]
      if (ColsAtCompileTime == 1 && list.size() == 1) {
        eigen_assert(list_size == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
        resize(list_size, ColsAtCompileTime);
        std::copy(list.begin()->begin(), list.begin()->end(), m_storage.data());
      } else {
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
    2e58:	2b03      	cmp	r3, #3
    2e5a:	d12b      	bne.n	2eb4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x6c>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
    2e5c:	2a03      	cmp	r2, #3
    2e5e:	d103      	bne.n	2e68 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
        resize(list.size(), list_size);

        Index row_index = 0;
        for (const std::initializer_list<Scalar>& row : list) {
    2e60:	4605      	mov	r5, r0
    2e62:	46b6      	mov	lr, r6
        Index row_index = 0;
    2e64:	2400      	movs	r4, #0
    2e66:	e013      	b.n	2e90 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x48>
        eigen_assert(list_size == static_cast<size_t>(ColsAtCompileTime) || ColsAtCompileTime == Dynamic);
    2e68:	4b16      	ldr	r3, [pc, #88]	; (2ec4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7c>)
    2e6a:	4a17      	ldr	r2, [pc, #92]	; (2ec8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
    2e6c:	f240 2139 	movw	r1, #569	; 0x239
    2e70:	4816      	ldr	r0, [pc, #88]	; (2ecc <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
    2e72:	f00e fba7 	bl	115c4 <__assert_func>
          eigen_assert(list_size == row.size());
    2e76:	4b16      	ldr	r3, [pc, #88]	; (2ed0 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x88>)
    2e78:	4a13      	ldr	r2, [pc, #76]	; (2ec8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
    2e7a:	f240 213e 	movw	r1, #574	; 0x23e
    2e7e:	4813      	ldr	r0, [pc, #76]	; (2ecc <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
    2e80:	f00e fba0 	bl	115c4 <__assert_func>
          Index col_index = 0;
          for (const Scalar& e : row) {
            coeffRef(row_index, col_index) = e;
            ++col_index;
          }
          ++row_index;
    2e84:	3401      	adds	r4, #1
        for (const std::initializer_list<Scalar>& row : list) {
    2e86:	f10e 0e08 	add.w	lr, lr, #8
    2e8a:	3504      	adds	r5, #4
    2e8c:	4577      	cmp	r7, lr
    2e8e:	d018      	beq.n	2ec2 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x7a>
          eigen_assert(list_size == row.size());
    2e90:	f8de 3004 	ldr.w	r3, [lr, #4]
    2e94:	2b03      	cmp	r3, #3
    2e96:	d1ee      	bne.n	2e76 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x2e>
          for (const Scalar& e : row) {
    2e98:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
    2e9c:	f103 0c0c 	add.w	ip, r3, #12
      begin() const noexcept { return _M_array; }
    2ea0:	462a      	mov	r2, r5
            coeffRef(row_index, col_index) = e;
    2ea2:	f853 1b04 	ldr.w	r1, [r3], #4
    2ea6:	f842 1b0c 	str.w	r1, [r2], #12
          for (const Scalar& e : row) {
    2eaa:	4563      	cmp	r3, ip
    2eac:	d1f9      	bne.n	2ea2 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x5a>
    2eae:	e7e9      	b.n	2e84 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x3c>
        eigen_assert(list.size() == static_cast<size_t>(RowsAtCompileTime) || RowsAtCompileTime == Dynamic);
    2eb0:	2b03      	cmp	r3, #3
    2eb2:	d0d9      	beq.n	2e68 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x20>
    2eb4:	4b07      	ldr	r3, [pc, #28]	; (2ed4 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x8c>)
    2eb6:	4a04      	ldr	r2, [pc, #16]	; (2ec8 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x80>)
    2eb8:	f44f 710e 	mov.w	r1, #568	; 0x238
    2ebc:	4803      	ldr	r0, [pc, #12]	; (2ecc <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)+0x84>)
    2ebe:	f00e fb81 	bl	115c4 <__assert_func>
        }
      }
    }
    2ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ec4:	200021f0 	.word	0x200021f0
    2ec8:	200020a4 	.word	0x200020a4
    2ecc:	2000219c 	.word	0x2000219c
    2ed0:	20002244 	.word	0x20002244
    2ed4:	2000204c 	.word	0x2000204c

00002ed8 <__static_initialization_and_destruction_0(int, int)>:
    rising_edge_start_6 = micros();
  }
  else if(trigger == 0) {
    channel_6_raw = micros() - rising_edge_start_6;
  }
}
    2ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2edc:	4299      	cmp	r1, r3
    2ede:	d101      	bne.n	2ee4 <__static_initialization_and_destruction_0(int, int)+0xc>
    2ee0:	2801      	cmp	r0, #1
    2ee2:	d000      	beq.n	2ee6 <__static_initialization_and_destruction_0(int, int)+0xe>
    2ee4:	4770      	bx	lr
    2ee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2eea:	b0e7      	sub	sp, #412	; 0x19c
  MPU6050 mpu6050;
    2eec:	2168      	movs	r1, #104	; 0x68
    2eee:	48aa      	ldr	r0, [pc, #680]	; (3198 <__static_initialization_and_destruction_0(int, int)+0x2c0>)
    2ef0:	f001 f832 	bl	3f58 <MPU6050::MPU6050(unsigned char)>
float Kp_roll_angle = 0.2*Kp_scale*0.95;
    2ef4:	4ba9      	ldr	r3, [pc, #676]	; (319c <__static_initialization_and_destruction_0(int, int)+0x2c4>)
    2ef6:	ed93 7a00 	vldr	s14, [r3]
    2efa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    2efe:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 3170 <__static_initialization_and_destruction_0(int, int)+0x298>
    2f02:	ee27 7b06 	vmul.f64	d7, d7, d6
    2f06:	ed9f 6b9c 	vldr	d6, [pc, #624]	; 3178 <__static_initialization_and_destruction_0(int, int)+0x2a0>
    2f0a:	ee27 6b06 	vmul.f64	d6, d7, d6
    2f0e:	eef7 4bc6 	vcvt.f32.f64	s9, d6
    2f12:	4ba3      	ldr	r3, [pc, #652]	; (31a0 <__static_initialization_and_destruction_0(int, int)+0x2c8>)
    2f14:	edc3 4a00 	vstr	s9, [r3]
float Ki_roll_angle = 0.3*Ki_scale*1.01;
    2f18:	4ba2      	ldr	r3, [pc, #648]	; (31a4 <__static_initialization_and_destruction_0(int, int)+0x2cc>)
    2f1a:	ed93 5a00 	vldr	s10, [r3]
    2f1e:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
    2f22:	ed9f 6b97 	vldr	d6, [pc, #604]	; 3180 <__static_initialization_and_destruction_0(int, int)+0x2a8>
    2f26:	ee25 5b06 	vmul.f64	d5, d5, d6
    2f2a:	f8df 8300 	ldr.w	r8, [pc, #768]	; 322c <__static_initialization_and_destruction_0(int, int)+0x354>
    2f2e:	ed9f 3b96 	vldr	d3, [pc, #600]	; 3188 <__static_initialization_and_destruction_0(int, int)+0x2b0>
    2f32:	ee25 6b03 	vmul.f64	d6, d5, d3
    2f36:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    2f3a:	ed88 6a00 	vstr	s12, [r8]
float Kd_roll_angle = 0.05*Kd_scale*1.01;
    2f3e:	4b9a      	ldr	r3, [pc, #616]	; (31a8 <__static_initialization_and_destruction_0(int, int)+0x2d0>)
    2f40:	ed93 6a00 	vldr	s12, [r3]
    2f44:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    2f48:	ed9f 2b91 	vldr	d2, [pc, #580]	; 3190 <__static_initialization_and_destruction_0(int, int)+0x2b8>
    2f4c:	ee26 6b02 	vmul.f64	d6, d6, d2
    2f50:	4e96      	ldr	r6, [pc, #600]	; (31ac <__static_initialization_and_destruction_0(int, int)+0x2d4>)
    2f52:	ee26 3b03 	vmul.f64	d3, d6, d3
    2f56:	eeb7 3bc3 	vcvt.f32.f64	s6, d3
    2f5a:	ed86 3a00 	vstr	s6, [r6]
float Kp_pitch_angle = 0.2*Kp_scale;
    2f5e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    2f62:	4b93      	ldr	r3, [pc, #588]	; (31b0 <__static_initialization_and_destruction_0(int, int)+0x2d8>)
    2f64:	ed83 7a00 	vstr	s14, [r3]
float Ki_pitch_angle = 0.3*Ki_scale;
    2f68:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 3230 <__static_initialization_and_destruction_0(int, int)+0x358>
    2f6c:	eeb7 5bc5 	vcvt.f32.f64	s10, d5
    2f70:	ed89 5a00 	vstr	s10, [r9]
float Kd_pitch_angle = 0.05*Kd_scale;
    2f74:	4f8f      	ldr	r7, [pc, #572]	; (31b4 <__static_initialization_and_destruction_0(int, int)+0x2dc>)
    2f76:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    2f7a:	ed87 6a00 	vstr	s12, [r7]
												{0, 0, Kp_roll_angle}};
    2f7e:	aa08      	add	r2, sp, #32
    2f80:	ed8d 7a08 	vstr	s14, [sp, #32]
    2f84:	2400      	movs	r4, #0
    2f86:	9409      	str	r4, [sp, #36]	; 0x24
    2f88:	940a      	str	r4, [sp, #40]	; 0x28
    2f8a:	ab02      	add	r3, sp, #8
    2f8c:	9202      	str	r2, [sp, #8]
    2f8e:	2503      	movs	r5, #3
    2f90:	9503      	str	r5, [sp, #12]
    2f92:	aa0b      	add	r2, sp, #44	; 0x2c
    2f94:	940b      	str	r4, [sp, #44]	; 0x2c
    2f96:	4988      	ldr	r1, [pc, #544]	; (31b8 <__static_initialization_and_destruction_0(int, int)+0x2e0>)
    2f98:	6809      	ldr	r1, [r1, #0]
    2f9a:	910c      	str	r1, [sp, #48]	; 0x30
    2f9c:	940d      	str	r4, [sp, #52]	; 0x34
    2f9e:	9204      	str	r2, [sp, #16]
    2fa0:	9505      	str	r5, [sp, #20]
    2fa2:	aa0e      	add	r2, sp, #56	; 0x38
    2fa4:	940e      	str	r4, [sp, #56]	; 0x38
    2fa6:	940f      	str	r4, [sp, #60]	; 0x3c
    2fa8:	edcd 4a10 	vstr	s9, [sp, #64]	; 0x40
    2fac:	9206      	str	r2, [sp, #24]
    2fae:	9507      	str	r5, [sp, #28]
    2fb0:	9300      	str	r3, [sp, #0]
    2fb2:	9501      	str	r5, [sp, #4]
      * and implicit transposition is allowed for compile-time vectors only.
      *
      * \sa Matrix(const Scalar& a0, const Scalar& a1, const Scalar& a2,  const Scalar& a3, const ArgTypes&... args)
      */
    EIGEN_DEVICE_FUNC
    explicit EIGEN_STRONG_INLINE Matrix(const std::initializer_list<std::initializer_list<Scalar>>& list) : Base(list) {}
    2fb4:	4669      	mov	r1, sp
    2fb6:	4881      	ldr	r0, [pc, #516]	; (31bc <__static_initialization_and_destruction_0(int, int)+0x2e4>)
    2fb8:	f7ff ff46 	bl	2e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
												{0, 0, Ki_roll_angle}};
    2fbc:	aa19      	add	r2, sp, #100	; 0x64
    2fbe:	f8d9 3000 	ldr.w	r3, [r9]
    2fc2:	9319      	str	r3, [sp, #100]	; 0x64
    2fc4:	941a      	str	r4, [sp, #104]	; 0x68
    2fc6:	941b      	str	r4, [sp, #108]	; 0x6c
    2fc8:	ab13      	add	r3, sp, #76	; 0x4c
    2fca:	9213      	str	r2, [sp, #76]	; 0x4c
    2fcc:	9514      	str	r5, [sp, #80]	; 0x50
    2fce:	aa1c      	add	r2, sp, #112	; 0x70
    2fd0:	941c      	str	r4, [sp, #112]	; 0x70
    2fd2:	497b      	ldr	r1, [pc, #492]	; (31c0 <__static_initialization_and_destruction_0(int, int)+0x2e8>)
    2fd4:	6809      	ldr	r1, [r1, #0]
    2fd6:	911d      	str	r1, [sp, #116]	; 0x74
    2fd8:	941e      	str	r4, [sp, #120]	; 0x78
    2fda:	9215      	str	r2, [sp, #84]	; 0x54
    2fdc:	9516      	str	r5, [sp, #88]	; 0x58
    2fde:	aa1f      	add	r2, sp, #124	; 0x7c
    2fe0:	941f      	str	r4, [sp, #124]	; 0x7c
    2fe2:	9420      	str	r4, [sp, #128]	; 0x80
    2fe4:	f8d8 1000 	ldr.w	r1, [r8]
    2fe8:	9121      	str	r1, [sp, #132]	; 0x84
    2fea:	9217      	str	r2, [sp, #92]	; 0x5c
    2fec:	9518      	str	r5, [sp, #96]	; 0x60
    2fee:	9311      	str	r3, [sp, #68]	; 0x44
    2ff0:	9512      	str	r5, [sp, #72]	; 0x48
    2ff2:	a911      	add	r1, sp, #68	; 0x44
    2ff4:	4873      	ldr	r0, [pc, #460]	; (31c4 <__static_initialization_and_destruction_0(int, int)+0x2ec>)
    2ff6:	f7ff ff27 	bl	2e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
const Matrix3f D_gains {{-Kd_pitch_angle, 0, 0},
    2ffa:	edd7 7a00 	vldr	s15, [r7]
    2ffe:	eef1 7a67 	vneg.f32	s15, s15
												{0, 0, -Kd_roll_angle}};
    3002:	edcd 7a2a 	vstr	s15, [sp, #168]	; 0xa8
    3006:	942b      	str	r4, [sp, #172]	; 0xac
    3008:	942c      	str	r4, [sp, #176]	; 0xb0
    300a:	ab24      	add	r3, sp, #144	; 0x90
    300c:	aa2a      	add	r2, sp, #168	; 0xa8
    300e:	9224      	str	r2, [sp, #144]	; 0x90
    3010:	9525      	str	r5, [sp, #148]	; 0x94
    3012:	942d      	str	r4, [sp, #180]	; 0xb4
    3014:	4a6c      	ldr	r2, [pc, #432]	; (31c8 <__static_initialization_and_destruction_0(int, int)+0x2f0>)
    3016:	6812      	ldr	r2, [r2, #0]
    3018:	922e      	str	r2, [sp, #184]	; 0xb8
    301a:	942f      	str	r4, [sp, #188]	; 0xbc
    301c:	aa2d      	add	r2, sp, #180	; 0xb4
    301e:	9226      	str	r2, [sp, #152]	; 0x98
    3020:	9527      	str	r5, [sp, #156]	; 0x9c
    3022:	9430      	str	r4, [sp, #192]	; 0xc0
    3024:	9431      	str	r4, [sp, #196]	; 0xc4
    3026:	edd6 7a00 	vldr	s15, [r6]
    302a:	eef1 7a67 	vneg.f32	s15, s15
    302e:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
    3032:	aa30      	add	r2, sp, #192	; 0xc0
    3034:	9228      	str	r2, [sp, #160]	; 0xa0
    3036:	9529      	str	r5, [sp, #164]	; 0xa4
    3038:	9322      	str	r3, [sp, #136]	; 0x88
    303a:	9523      	str	r5, [sp, #140]	; 0x8c
    303c:	a922      	add	r1, sp, #136	; 0x88
    303e:	4863      	ldr	r0, [pc, #396]	; (31cc <__static_initialization_and_destruction_0(int, int)+0x2f4>)
    3040:	f7ff ff02 	bl	2e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
											{0, 0, 1}};
    3044:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    3048:	963b      	str	r6, [sp, #236]	; 0xec
    304a:	943c      	str	r4, [sp, #240]	; 0xf0
    304c:	943d      	str	r4, [sp, #244]	; 0xf4
    304e:	ab3b      	add	r3, sp, #236	; 0xec
    3050:	9335      	str	r3, [sp, #212]	; 0xd4
    3052:	9536      	str	r5, [sp, #216]	; 0xd8
    3054:	943e      	str	r4, [sp, #248]	; 0xf8
    3056:	963f      	str	r6, [sp, #252]	; 0xfc
    3058:	9440      	str	r4, [sp, #256]	; 0x100
    305a:	ab3e      	add	r3, sp, #248	; 0xf8
    305c:	9337      	str	r3, [sp, #220]	; 0xdc
    305e:	9538      	str	r5, [sp, #224]	; 0xe0
    3060:	9441      	str	r4, [sp, #260]	; 0x104
    3062:	9442      	str	r4, [sp, #264]	; 0x108
    3064:	9643      	str	r6, [sp, #268]	; 0x10c
    3066:	ab41      	add	r3, sp, #260	; 0x104
    3068:	9339      	str	r3, [sp, #228]	; 0xe4
    306a:	953a      	str	r5, [sp, #232]	; 0xe8
    306c:	ab35      	add	r3, sp, #212	; 0xd4
    306e:	9333      	str	r3, [sp, #204]	; 0xcc
    3070:	9534      	str	r5, [sp, #208]	; 0xd0
    3072:	a933      	add	r1, sp, #204	; 0xcc
    3074:	4856      	ldr	r0, [pc, #344]	; (31d0 <__static_initialization_and_destruction_0(int, int)+0x2f8>)
    3076:	f7ff fee7 	bl	2e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
											{0, 0, 1}};
    307a:	964c      	str	r6, [sp, #304]	; 0x130
    307c:	944d      	str	r4, [sp, #308]	; 0x134
    307e:	944e      	str	r4, [sp, #312]	; 0x138
    3080:	ab4c      	add	r3, sp, #304	; 0x130
    3082:	9346      	str	r3, [sp, #280]	; 0x118
    3084:	9547      	str	r5, [sp, #284]	; 0x11c
    3086:	944f      	str	r4, [sp, #316]	; 0x13c
    3088:	9650      	str	r6, [sp, #320]	; 0x140
    308a:	9451      	str	r4, [sp, #324]	; 0x144
    308c:	ab4f      	add	r3, sp, #316	; 0x13c
    308e:	9348      	str	r3, [sp, #288]	; 0x120
    3090:	9549      	str	r5, [sp, #292]	; 0x124
    3092:	9452      	str	r4, [sp, #328]	; 0x148
    3094:	9453      	str	r4, [sp, #332]	; 0x14c
    3096:	9654      	str	r6, [sp, #336]	; 0x150
    3098:	ab52      	add	r3, sp, #328	; 0x148
    309a:	934a      	str	r3, [sp, #296]	; 0x128
    309c:	954b      	str	r5, [sp, #300]	; 0x12c
    309e:	ab46      	add	r3, sp, #280	; 0x118
    30a0:	9344      	str	r3, [sp, #272]	; 0x110
    30a2:	9545      	str	r5, [sp, #276]	; 0x114
    30a4:	a944      	add	r1, sp, #272	; 0x110
    30a6:	484b      	ldr	r0, [pc, #300]	; (31d4 <__static_initialization_and_destruction_0(int, int)+0x2fc>)
    30a8:	f7ff fece 	bl	2e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
											{0, 0, 1}};
    30ac:	965d      	str	r6, [sp, #372]	; 0x174
    30ae:	945e      	str	r4, [sp, #376]	; 0x178
    30b0:	945f      	str	r4, [sp, #380]	; 0x17c
    30b2:	ab5d      	add	r3, sp, #372	; 0x174
    30b4:	9357      	str	r3, [sp, #348]	; 0x15c
    30b6:	9558      	str	r5, [sp, #352]	; 0x160
    30b8:	9460      	str	r4, [sp, #384]	; 0x180
    30ba:	9661      	str	r6, [sp, #388]	; 0x184
    30bc:	9462      	str	r4, [sp, #392]	; 0x188
    30be:	ab60      	add	r3, sp, #384	; 0x180
    30c0:	9359      	str	r3, [sp, #356]	; 0x164
    30c2:	955a      	str	r5, [sp, #360]	; 0x168
    30c4:	9463      	str	r4, [sp, #396]	; 0x18c
    30c6:	9464      	str	r4, [sp, #400]	; 0x190
    30c8:	9665      	str	r6, [sp, #404]	; 0x194
    30ca:	ab63      	add	r3, sp, #396	; 0x18c
    30cc:	935b      	str	r3, [sp, #364]	; 0x16c
    30ce:	955c      	str	r5, [sp, #368]	; 0x170
    30d0:	ab57      	add	r3, sp, #348	; 0x15c
    30d2:	9355      	str	r3, [sp, #340]	; 0x154
    30d4:	9556      	str	r5, [sp, #344]	; 0x158
    30d6:	a955      	add	r1, sp, #340	; 0x154
    30d8:	483f      	ldr	r0, [pc, #252]	; (31d8 <__static_initialization_and_destruction_0(int, int)+0x300>)
    30da:	f7ff feb5 	bl	2e48 <Eigen::PlainObjectBase<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::PlainObjectBase(std::initializer_list<std::initializer_list<float> > const&)>
PWMServo iris;
    30de:	483f      	ldr	r0, [pc, #252]	; (31dc <__static_initialization_and_destruction_0(int, int)+0x304>)
    30e0:	f001 ff60 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo1;
    30e4:	483e      	ldr	r0, [pc, #248]	; (31e0 <__static_initialization_and_destruction_0(int, int)+0x308>)
    30e6:	f001 ff5d 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo2;
    30ea:	483e      	ldr	r0, [pc, #248]	; (31e4 <__static_initialization_and_destruction_0(int, int)+0x30c>)
    30ec:	f001 ff5a 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo3;
    30f0:	483d      	ldr	r0, [pc, #244]	; (31e8 <__static_initialization_and_destruction_0(int, int)+0x310>)
    30f2:	f001 ff57 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo4;
    30f6:	483d      	ldr	r0, [pc, #244]	; (31ec <__static_initialization_and_destruction_0(int, int)+0x314>)
    30f8:	f001 ff54 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo5;
    30fc:	483c      	ldr	r0, [pc, #240]	; (31f0 <__static_initialization_and_destruction_0(int, int)+0x318>)
    30fe:	f001 ff51 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo6;
    3102:	483c      	ldr	r0, [pc, #240]	; (31f4 <__static_initialization_and_destruction_0(int, int)+0x31c>)
    3104:	f001 ff4e 	bl	4fa4 <PWMServo::PWMServo()>
PWMServo servo7;
    3108:	483b      	ldr	r0, [pc, #236]	; (31f8 <__static_initialization_and_destruction_0(int, int)+0x320>)
    310a:	f001 ff4b 	bl	4fa4 <PWMServo::PWMServo()>
  SBUS sbus(Serial5);
    310e:	4e3b      	ldr	r6, [pc, #236]	; (31fc <__static_initialization_and_destruction_0(int, int)+0x324>)
    3110:	493b      	ldr	r1, [pc, #236]	; (3200 <__static_initialization_and_destruction_0(int, int)+0x328>)
    3112:	4630      	mov	r0, r6
    3114:	f000 ffb2 	bl	407c <SBUS::SBUS(HardwareSerial&)>
    3118:	4d3a      	ldr	r5, [pc, #232]	; (3204 <__static_initialization_and_destruction_0(int, int)+0x32c>)
    311a:	462a      	mov	r2, r5
    311c:	493a      	ldr	r1, [pc, #232]	; (3208 <__static_initialization_and_destruction_0(int, int)+0x330>)
    311e:	4630      	mov	r0, r6
    3120:	f00d fdfc 	bl	10d1c <__aeabi_atexit>
String filePrefix = "flight_data";
    3124:	4f39      	ldr	r7, [pc, #228]	; (320c <__static_initialization_and_destruction_0(int, int)+0x334>)
    3126:	493a      	ldr	r1, [pc, #232]	; (3210 <__static_initialization_and_destruction_0(int, int)+0x338>)
    3128:	4638      	mov	r0, r7
    312a:	f009 fe62 	bl	cdf2 <String::String(char const*)>
    312e:	4e39      	ldr	r6, [pc, #228]	; (3214 <__static_initialization_and_destruction_0(int, int)+0x33c>)
    3130:	462a      	mov	r2, r5
    3132:	4631      	mov	r1, r6
    3134:	4638      	mov	r0, r7
    3136:	f00d fdf1 	bl	10d1c <__aeabi_atexit>
String fileExtension = ".csv";
    313a:	4f37      	ldr	r7, [pc, #220]	; (3218 <__static_initialization_and_destruction_0(int, int)+0x340>)
    313c:	4937      	ldr	r1, [pc, #220]	; (321c <__static_initialization_and_destruction_0(int, int)+0x344>)
    313e:	4638      	mov	r0, r7
    3140:	f009 fe57 	bl	cdf2 <String::String(char const*)>
    3144:	462a      	mov	r2, r5
    3146:	4631      	mov	r1, r6
    3148:	4638      	mov	r0, r7
    314a:	f00d fde7 	bl	10d1c <__aeabi_atexit>
String fileName;
    314e:	4f34      	ldr	r7, [pc, #208]	; (3220 <__static_initialization_and_destruction_0(int, int)+0x348>)
    3150:	2100      	movs	r1, #0
    3152:	4638      	mov	r0, r7
    3154:	f009 fe4d 	bl	cdf2 <String::String(char const*)>
    3158:	462a      	mov	r2, r5
    315a:	4631      	mov	r1, r6
    315c:	4638      	mov	r0, r7
    315e:	f00d fddd 	bl	10d1c <__aeabi_atexit>
File dataFile;
    3162:	462a      	mov	r2, r5
    3164:	492f      	ldr	r1, [pc, #188]	; (3224 <__static_initialization_and_destruction_0(int, int)+0x34c>)
    3166:	4830      	ldr	r0, [pc, #192]	; (3228 <__static_initialization_and_destruction_0(int, int)+0x350>)
    3168:	f00d fdd8 	bl	10d1c <__aeabi_atexit>
    316c:	e062      	b.n	3234 <__static_initialization_and_destruction_0(int, int)+0x35c>
    316e:	bf00      	nop
    3170:	9999999a 	.word	0x9999999a
    3174:	3fc99999 	.word	0x3fc99999
    3178:	66666666 	.word	0x66666666
    317c:	3fee6666 	.word	0x3fee6666
    3180:	33333333 	.word	0x33333333
    3184:	3fd33333 	.word	0x3fd33333
    3188:	c28f5c29 	.word	0xc28f5c29
    318c:	3ff028f5 	.word	0x3ff028f5
    3190:	9999999a 	.word	0x9999999a
    3194:	3fa99999 	.word	0x3fa99999
    3198:	20005110 	.word	0x20005110
    319c:	20003340 	.word	0x20003340
    31a0:	20004114 	.word	0x20004114
    31a4:	20003338 	.word	0x20003338
    31a8:	20003330 	.word	0x20003330
    31ac:	20004104 	.word	0x20004104
    31b0:	20004110 	.word	0x20004110
    31b4:	20004100 	.word	0x20004100
    31b8:	20003344 	.word	0x20003344
    31bc:	20004c30 	.word	0x20004c30
    31c0:	2000333c 	.word	0x2000333c
    31c4:	20004c0c 	.word	0x20004c0c
    31c8:	20003334 	.word	0x20003334
    31cc:	20004be8 	.word	0x20004be8
    31d0:	2000413c 	.word	0x2000413c
    31d4:	200040dc 	.word	0x200040dc
    31d8:	200040a0 	.word	0x200040a0
    31dc:	200050dc 	.word	0x200050dc
    31e0:	2000535c 	.word	0x2000535c
    31e4:	20005360 	.word	0x20005360
    31e8:	20005364 	.word	0x20005364
    31ec:	20005368 	.word	0x20005368
    31f0:	2000536c 	.word	0x2000536c
    31f4:	20005370 	.word	0x20005370
    31f8:	20005374 	.word	0x20005374
    31fc:	200051f8 	.word	0x200051f8
    3200:	20004724 	.word	0x20004724
    3204:	200033d0 	.word	0x200033d0
    3208:	000040c5 	.word	0x000040c5
    320c:	200050cc 	.word	0x200050cc
    3210:	20001d18 	.word	0x20001d18
    3214:	0000cd61 	.word	0x0000cd61
    3218:	200050ac 	.word	0x200050ac
    321c:	20001d24 	.word	0x20001d24
    3220:	200050bc 	.word	0x200050bc
    3224:	000007e5 	.word	0x000007e5
    3228:	200039a4 	.word	0x200039a4
    322c:	2000410c 	.word	0x2000410c
    3230:	20004108 	.word	0x20004108
    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Matrix(const Scalar& x, const Scalar& y, const Scalar& z)
    {
      Base::_check_template_params();
      EIGEN_STATIC_ASSERT_VECTOR_SPECIFIC_SIZE(Matrix, 3)
      m_storage.data()[0] = x;
    3234:	4b07      	ldr	r3, [pc, #28]	; (3254 <__static_initialization_and_destruction_0(int, int)+0x37c>)
    3236:	601c      	str	r4, [r3, #0]
      m_storage.data()[1] = y;
    3238:	605c      	str	r4, [r3, #4]
      m_storage.data()[2] = z;
    323a:	609c      	str	r4, [r3, #8]
      m_storage.data()[0] = x;
    323c:	4b06      	ldr	r3, [pc, #24]	; (3258 <__static_initialization_and_destruction_0(int, int)+0x380>)
    323e:	601c      	str	r4, [r3, #0]
      m_storage.data()[1] = y;
    3240:	605c      	str	r4, [r3, #4]
      m_storage.data()[2] = z;
    3242:	609c      	str	r4, [r3, #8]
      m_storage.data()[0] = x;
    3244:	4b05      	ldr	r3, [pc, #20]	; (325c <__static_initialization_and_destruction_0(int, int)+0x384>)
    3246:	601c      	str	r4, [r3, #0]
      m_storage.data()[1] = y;
    3248:	605c      	str	r4, [r3, #4]
      m_storage.data()[2] = z;
    324a:	609c      	str	r4, [r3, #8]
    324c:	b067      	add	sp, #412	; 0x19c
    324e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3252:	bf00      	nop
    3254:	20005078 	.word	0x20005078
    3258:	20005058 	.word	0x20005058
    325c:	20005138 	.word	0x20005138

00003260 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>:
    Flags = Base::Flags | EvalBeforeNestingBit
  };

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  explicit product_evaluator(const XprType& xpr)
    : m_result(xpr.rows(), xpr.cols())
    3260:	1d03      	adds	r3, r0, #4

// this helper permits to completely eliminate m_outerStride if it is known at compiletime.
template<typename Scalar,int OuterStride> class plainobjectbase_evaluator_data {
public:
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
    3262:	6003      	str	r3, [r0, #0]
    Index rows() const EIGEN_NOEXCEPT { return m_lhs.rows(); }
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
    Index cols() const EIGEN_NOEXCEPT { return m_rhs.cols(); }

    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const LhsNestedCleaned& lhs() const { return m_lhs; }
    3264:	680a      	ldr	r2, [r1, #0]
    EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
    const RhsNestedCleaned& rhs() const { return m_rhs; }
    3266:	684b      	ldr	r3, [r1, #4]
#else
  scalar_product_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3268:	edd2 7a06 	vldr	s15, [r2, #24]
    326c:	ed93 7a02 	vldr	s14, [r3, #8]
    3270:	ee67 7a87 	vmul.f32	s15, s15, s14
    3274:	ed92 7a03 	vldr	s14, [r2, #12]
    3278:	edd3 6a01 	vldr	s13, [r3, #4]
    327c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3280:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3284:	ed92 7a00 	vldr	s14, [r2]
    3288:	edd3 6a00 	vldr	s13, [r3]
    328c:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3290:	ee77 7a87 	vadd.f32	s15, s15, s14
  *
  */
template<typename DstScalar,typename SrcScalar> struct assign_op {

  EIGEN_EMPTY_STRUCT_CTOR(assign_op)
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void assignCoeff(DstScalar& a, const SrcScalar& b) const { a = b; }
    3294:	edc0 7a01 	vstr	s15, [r0, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3298:	edd2 7a07 	vldr	s15, [r2, #28]
    329c:	ed93 7a02 	vldr	s14, [r3, #8]
    32a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    32a4:	ed92 7a04 	vldr	s14, [r2, #16]
    32a8:	edd3 6a01 	vldr	s13, [r3, #4]
    32ac:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32b0:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32b4:	ed92 7a01 	vldr	s14, [r2, #4]
    32b8:	edd3 6a00 	vldr	s13, [r3]
    32bc:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    32c4:	edc0 7a02 	vstr	s15, [r0, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32c8:	edd2 7a08 	vldr	s15, [r2, #32]
    32cc:	ed93 7a02 	vldr	s14, [r3, #8]
    32d0:	ee67 7a87 	vmul.f32	s15, s15, s14
    32d4:	ed92 7a05 	vldr	s14, [r2, #20]
    32d8:	edd3 6a01 	vldr	s13, [r3, #4]
    32dc:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32e0:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    32e4:	ed92 7a02 	vldr	s14, [r2, #8]
    32e8:	edd3 6a00 	vldr	s13, [r3]
    32ec:	ee27 7a26 	vmul.f32	s14, s14, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    32f0:	ee77 7a87 	vadd.f32	s15, s15, s14
    32f4:	edc0 7a03 	vstr	s15, [r0, #12]
//     const RhsNested rhs(xpr.rhs());
//
//     generic_product_impl<LhsNestedCleaned, RhsNestedCleaned>::evalTo(m_result, lhs, rhs);

    generic_product_impl<Lhs, Rhs, LhsShape, RhsShape, ProductTag>::evalTo(m_result, xpr.lhs(), xpr.rhs());
  }
    32f8:	4770      	bx	lr
	...

000032fc <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)>:
using namespace Eigen;


Vector3f pidOutput(Vector3f refState, Vector3f currState, Matrix3f P_gains, 
									 Matrix3f I_gains, Matrix3f D_gains, float dt, bool lowThrottle,
									 float GyroX, float GyroY, float GyroZ) {
    32fc:	b570      	push	{r4, r5, r6, lr}
    32fe:	ed2d 8b02 	vpush	{d8}
    3302:	b0a8      	sub	sp, #160	; 0xa0
    3304:	4604      	mov	r4, r0
    3306:	f89d 50c0 	ldrb.w	r5, [sp, #192]	; 0xc0

	//----- DECLARATIONS -----//
	static const float i_limit = 25.0f;
	// Declared as static so that the variables remain in memory while the program is running, even
	// outside of this function.
	static Vector3f integralOld(0,0,0);
    330a:	4870      	ldr	r0, [pc, #448]	; (34cc <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d0>)
    330c:	6800      	ldr	r0, [r0, #0]
    330e:	f010 0f01 	tst.w	r0, #1
    3312:	d10b      	bne.n	332c <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x30>
      m_storage.data()[0] = x;
    3314:	486e      	ldr	r0, [pc, #440]	; (34d0 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d4>)
    3316:	f04f 0c00 	mov.w	ip, #0
    331a:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = y;
    331e:	f8c0 c004 	str.w	ip, [r0, #4]
      m_storage.data()[2] = z;
    3322:	f8c0 c008 	str.w	ip, [r0, #8]
    3326:	4869      	ldr	r0, [pc, #420]	; (34cc <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d0>)
    3328:	2601      	movs	r6, #1
    332a:	6006      	str	r6, [r0, #0]
	static Vector3f errorOld(0,0,0);
    332c:	4869      	ldr	r0, [pc, #420]	; (34d4 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d8>)
    332e:	6800      	ldr	r0, [r0, #0]
    3330:	f010 0f01 	tst.w	r0, #1
    3334:	d10b      	bne.n	334e <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x52>
      m_storage.data()[0] = x;
    3336:	4868      	ldr	r0, [pc, #416]	; (34d8 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1dc>)
    3338:	f04f 0c00 	mov.w	ip, #0
    333c:	f8c0 c000 	str.w	ip, [r0]
      m_storage.data()[1] = y;
    3340:	f8c0 c004 	str.w	ip, [r0, #4]
      m_storage.data()[2] = z;
    3344:	f8c0 c008 	str.w	ip, [r0, #8]
    3348:	4862      	ldr	r0, [pc, #392]	; (34d4 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d8>)
    334a:	2601      	movs	r6, #1
    334c:	6006      	str	r6, [r0, #0]
      m_storage.data()[0] = x;
    334e:	2000      	movs	r0, #0
    3350:	9022      	str	r0, [sp, #136]	; 0x88
      m_storage.data()[1] = y;
    3352:	9023      	str	r0, [sp, #140]	; 0x8c
      m_storage.data()[2] = z;
    3354:	9024      	str	r0, [sp, #144]	; 0x90
      m_storage.data()[0] = x;
    3356:	901f      	str	r0, [sp, #124]	; 0x7c
      m_storage.data()[1] = y;
    3358:	9020      	str	r0, [sp, #128]	; 0x80
      m_storage.data()[2] = z;
    335a:	9021      	str	r0, [sp, #132]	; 0x84
      m_storage.data()[0] = x;
    335c:	6020      	str	r0, [r4, #0]
      m_storage.data()[1] = y;
    335e:	6060      	str	r0, [r4, #4]
      m_storage.data()[2] = z;
    3360:	60a0      	str	r0, [r4, #8]
#else
  scalar_difference_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    3362:	edd1 6a00 	vldr	s13, [r1]
    3366:	edd2 7a00 	vldr	s15, [r2]
    336a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    336e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
    3372:	edd1 7a01 	vldr	s15, [r1, #4]
    3376:	ed91 7a02 	vldr	s14, [r1, #8]
    337a:	ed92 6a02 	vldr	s12, [r2, #8]
    337e:	ee37 7a46 	vsub.f32	s14, s14, s12
    3382:	ed8d 7a27 	vstr	s14, [sp, #156]	; 0x9c
	Vector3f derivative(0,0,0);
	Vector3f PIDValues(0,0,0);
	//----- END DECLARATIONS -----//
	
  error    = refState - currState;
	error[1] = refState[1] - GyroZ;
    3386:	ee77 1ae1 	vsub.f32	s3, s15, s3
    338a:	edcd 1a26 	vstr	s3, [sp, #152]	; 0x98

	// Prevent integral buildup with low throttle
	if (!lowThrottle) {
    338e:	b135      	cbz	r5, 339e <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xa2>
      * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
      */

    EIGEN_DEVICE_FUNC
    EIGEN_STRONG_INLINE Scalar&
    operator[](Index index)
    3390:	aa22      	add	r2, sp, #136	; 0x88
    3392:	a925      	add	r1, sp, #148	; 0x94
		integral = integralOld + error*dt;
	}

	// Saturate integral to prevent buildup
	for (int lv1=0; lv1<3; lv1++) {
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    3394:	eebb 6a09 	vmov.f32	s12, #185	; 0xc1c80000 -25.0
    3398:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
    339c:	e01f      	b.n	33de <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xe2>
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    339e:	ee60 7a26 	vmul.f32	s15, s0, s13
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33a2:	4a4b      	ldr	r2, [pc, #300]	; (34d0 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d4>)
    33a4:	ed92 6a00 	vldr	s12, [r2]
    33a8:	ee77 7a86 	vadd.f32	s15, s15, s12
    33ac:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33b0:	ee61 7a80 	vmul.f32	s15, s3, s0
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33b4:	ed92 6a01 	vldr	s12, [r2, #4]
    33b8:	ee77 7a86 	vadd.f32	s15, s15, s12
    33bc:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    33c0:	ee60 7a07 	vmul.f32	s15, s0, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    33c4:	ed92 6a02 	vldr	s12, [r2, #8]
    33c8:	ee77 7a86 	vadd.f32	s15, s15, s12
    33cc:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
    33d0:	e7de      	b.n	3390 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x94>
    33d2:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    33d6:	ed42 7a01 	vstr	s15, [r2, #-4]
	for (int lv1=0; lv1<3; lv1++) {
    33da:	428a      	cmp	r2, r1
    33dc:	d00d      	beq.n	33fa <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xfe>
		integral[lv1] = constrain(integral[lv1], -i_limit, i_limit);
    33de:	ecf2 7a01 	vldmia	r2!, {s15}
    33e2:	eef4 7ac6 	vcmpe.f32	s15, s12
    33e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33ea:	d4f2      	bmi.n	33d2 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xd6>
    33ec:	eef4 7a65 	vcmp.f32	s15, s11
    33f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33f4:	fe75 7aa7 	vselgt.f32	s15, s11, s15
    33f8:	e7ed      	b.n	33d6 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0xda>
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a - b; }
    33fa:	4a37      	ldr	r2, [pc, #220]	; (34d8 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1dc>)
    33fc:	edd2 7a01 	vldr	s15, [r2, #4]
    3400:	ee71 7ae7 	vsub.f32	s15, s3, s15
#else
  scalar_quotient_op() {
    EIGEN_SCALAR_BINARY_OP_PLUGIN
  }
#endif
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a / b; }
    3404:	ee87 6a80 	vdiv.f32	s12, s15, s0
    3408:	ed8d 6a20 	vstr	s12, [sp, #128]	; 0x80
	}

	derivative    = (error - errorOld) / dt;
	derivative[0] = GyroY;
    340c:	ed8d 1a1f 	vstr	s2, [sp, #124]	; 0x7c
	derivative[2] = GyroX;
    3410:	edcd 0a21 	vstr	s1, [sp, #132]	; 0x84
    3414:	492e      	ldr	r1, [pc, #184]	; (34d0 <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1d4>)
    3416:	9822      	ldr	r0, [sp, #136]	; 0x88
    3418:	6008      	str	r0, [r1, #0]
    341a:	9823      	ldr	r0, [sp, #140]	; 0x8c
    341c:	6048      	str	r0, [r1, #4]
    341e:	9824      	ldr	r0, [sp, #144]	; 0x90
    3420:	6088      	str	r0, [r1, #8]
    3422:	edc2 6a00 	vstr	s13, [r2]
    3426:	edc2 1a01 	vstr	s3, [r2, #4]
    342a:	ed82 7a02 	vstr	s14, [r2, #8]

namespace internal {

template<typename Scalar>
struct scalar_constant_op {
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE scalar_constant_op(const scalar_constant_op& other) : m_other(other.m_other) { }
    342e:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 34dc <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)+0x1e0>
    3432:	ed8d 8a03 	vstr	s16, [sp, #12]
  * CwiseBinaryOp types explicitly.
  *
  * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, class CwiseUnaryOp, class CwiseNullaryOp
  */
template<typename BinaryOp, typename LhsType, typename RhsType>
class CwiseBinaryOp :
    3436:	9305      	str	r3, [sp, #20]
    3438:	ab25      	add	r3, sp, #148	; 0x94
    343a:	9306      	str	r3, [sp, #24]
    343c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    343e:	9307      	str	r3, [sp, #28]
    3440:	ab22      	add	r3, sp, #136	; 0x88
    3442:	9308      	str	r3, [sp, #32]
    3444:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    3446:	930a      	str	r3, [sp, #40]	; 0x28
    3448:	ab1f      	add	r3, sp, #124	; 0x7c
    344a:	930b      	str	r3, [sp, #44]	; 0x2c
    344c:	ed8d 8a0f 	vstr	s16, [sp, #60]	; 0x3c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit evaluator(const XprType& xpr) : Base(xpr) {}
    3450:	a905      	add	r1, sp, #20
    3452:	a813      	add	r0, sp, #76	; 0x4c
    3454:	f7ff ff04 	bl	3260 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
    3458:	a907      	add	r1, sp, #28
    345a:	a817      	add	r0, sp, #92	; 0x5c
    345c:	f7ff ff00 	bl	3260 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
    3460:	a90a      	add	r1, sp, #40	; 0x28
    3462:	a81b      	add	r0, sp, #108	; 0x6c
    3464:	f7ff fefc 	bl	3260 <Eigen::internal::product_evaluator<Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0>, 3, Eigen::DenseShape, Eigen::DenseShape, float, float>::product_evaluator(Eigen::Product<Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, 0> const&)>
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index index) const
  {
    return m_d.data[index];
    3468:	9913      	ldr	r1, [sp, #76]	; 0x4c
    346a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    346c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    346e:	edd1 7a00 	vldr	s15, [r1]
    3472:	ed92 7a00 	vldr	s14, [r2]
    3476:	ee77 7a87 	vadd.f32	s15, s15, s14
    347a:	ed93 7a00 	vldr	s14, [r3]
    347e:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3482:	ee67 7a88 	vmul.f32	s15, s15, s16
    3486:	edc4 7a00 	vstr	s15, [r4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    348a:	edd1 7a01 	vldr	s15, [r1, #4]
    348e:	ed92 7a01 	vldr	s14, [r2, #4]
    3492:	ee77 7a87 	vadd.f32	s15, s15, s14
    3496:	ed93 7a01 	vldr	s14, [r3, #4]
    349a:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    349e:	ee67 7a88 	vmul.f32	s15, s15, s16
    34a2:	edc4 7a01 	vstr	s15, [r4, #4]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    34a6:	edd1 7a02 	vldr	s15, [r1, #8]
    34aa:	ed92 7a02 	vldr	s14, [r2, #8]
    34ae:	ee77 7a87 	vadd.f32	s15, s15, s14
    34b2:	ed93 7a02 	vldr	s14, [r3, #8]
    34b6:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    34ba:	ee67 7a88 	vmul.f32	s15, s15, s16
    34be:	edc4 7a02 	vstr	s15, [r4, #8]
	integralOld   = integral;
	errorOld      = error;
	PIDValues     = 0.01f * (P_gains*error + I_gains*integral + D_gains*derivative);
	return PIDValues;
}
    34c2:	4620      	mov	r0, r4
    34c4:	b028      	add	sp, #160	; 0xa0
    34c6:	ecbd 8b02 	vpop	{d8}
    34ca:	bd70      	pop	{r4, r5, r6, pc}
    34cc:	20004b44 	.word	0x20004b44
    34d0:	20004ca8 	.word	0x20004ca8
    34d4:	20004b48 	.word	0x20004b48
    34d8:	20004cb4 	.word	0x20004cb4
    34dc:	3c23d70a 	.word	0x3c23d70a

000034e0 <loop>:
void loop() {
    34e0:	b530      	push	{r4, r5, lr}
    34e2:	b0b9      	sub	sp, #228	; 0xe4
  prev_time = current_time;      
    34e4:	4cda      	ldr	r4, [pc, #872]	; (3850 <loop+0x370>)
    34e6:	4ddb      	ldr	r5, [pc, #876]	; (3854 <loop+0x374>)
    34e8:	682b      	ldr	r3, [r5, #0]
    34ea:	6023      	str	r3, [r4, #0]
  current_time = micros();      
    34ec:	f009 ff02 	bl	d2f4 <micros>
    34f0:	6028      	str	r0, [r5, #0]
  dt = (current_time - prev_time)/1000000.0;
    34f2:	6823      	ldr	r3, [r4, #0]
    34f4:	1ac0      	subs	r0, r0, r3
    34f6:	ee07 0a90 	vmov	s15, r0
    34fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    34fe:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 3848 <loop+0x368>
    3502:	ee87 6b05 	vdiv.f64	d6, d7, d5
    3506:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
    350a:	4bd3      	ldr	r3, [pc, #844]	; (3858 <loop+0x378>)
    350c:	ed83 6a00 	vstr	s12, [r3]
  loopBlink(); //Indicate we are in main loop with short blink every 1.5 seconds
    3510:	f7fe fb30 	bl	1b74 <loopBlink()>
	displayRoll();
    3514:	f7fe ff8e 	bl	2434 <displayRoll()>
	if (channel_6_pwm < 1500) {
    3518:	4bd0      	ldr	r3, [pc, #832]	; (385c <loop+0x37c>)
    351a:	681a      	ldr	r2, [r3, #0]
    351c:	f240 53db 	movw	r3, #1499	; 0x5db
    3520:	429a      	cmp	r2, r3
    3522:	f300 82d6 	bgt.w	3ad2 <loop+0x5f2>
		irisFlag = 0;
    3526:	4bce      	ldr	r3, [pc, #824]	; (3860 <loop+0x380>)
    3528:	2200      	movs	r2, #0
    352a:	701a      	strb	r2, [r3, #0]
		closeIris();
    352c:	f7fe fbb8 	bl	1ca0 <closeIris()>
	if (channel_7_pwm > 1750) {
    3530:	4bcc      	ldr	r3, [pc, #816]	; (3864 <loop+0x384>)
    3532:	681a      	ldr	r2, [r3, #0]
    3534:	f240 63d6 	movw	r3, #1750	; 0x6d6
    3538:	429a      	cmp	r2, r3
    353a:	f340 82d0 	ble.w	3ade <loop+0x5fe>
		conductSineSweep = 1;
    353e:	4bca      	ldr	r3, [pc, #808]	; (3868 <loop+0x388>)
    3540:	2201      	movs	r2, #1
    3542:	701a      	strb	r2, [r3, #0]
	if (SD_is_present && current_time - print_counterSD > 10000) {
    3544:	4bc9      	ldr	r3, [pc, #804]	; (386c <loop+0x38c>)
    3546:	781b      	ldrb	r3, [r3, #0]
    3548:	b14b      	cbz	r3, 355e <loop+0x7e>
    354a:	4bc2      	ldr	r3, [pc, #776]	; (3854 <loop+0x374>)
    354c:	681b      	ldr	r3, [r3, #0]
    354e:	4ac8      	ldr	r2, [pc, #800]	; (3870 <loop+0x390>)
    3550:	6812      	ldr	r2, [r2, #0]
    3552:	1a9b      	subs	r3, r3, r2
    3554:	f242 7210 	movw	r2, #10000	; 0x2710
    3558:	4293      	cmp	r3, r2
    355a:	f200 82c7 	bhi.w	3aec <loop+0x60c>
  getIMUdata(); //Pulls raw gyro, accelerometer, and magnetometer data from IMU and LP filters to remove noise
    355e:	f7fd fa17 	bl	990 <getIMUdata()>
  Madgwick(GyroX, -GyroY, -GyroZ, -AccX, AccY, AccZ, MagY, -MagX, MagZ, dt); //Updates roll_IMU, pitch_IMU, and yaw_IMU angle estimates (degrees)
    3562:	4bc4      	ldr	r3, [pc, #784]	; (3874 <loop+0x394>)
    3564:	edd3 1a00 	vldr	s3, [r3]
    3568:	4bc3      	ldr	r3, [pc, #780]	; (3878 <loop+0x398>)
    356a:	ed93 1a00 	vldr	s2, [r3]
    356e:	4bc3      	ldr	r3, [pc, #780]	; (387c <loop+0x39c>)
    3570:	edd3 0a00 	vldr	s1, [r3]
    Madgwick6DOF(gx, gy, gz, ax, ay, az, invSampleFreq);
    3574:	4bb8      	ldr	r3, [pc, #736]	; (3858 <loop+0x378>)
    3576:	ed93 3a00 	vldr	s6, [r3]
    357a:	4bc1      	ldr	r3, [pc, #772]	; (3880 <loop+0x3a0>)
    357c:	edd3 2a00 	vldr	s5, [r3]
    3580:	4bc0      	ldr	r3, [pc, #768]	; (3884 <loop+0x3a4>)
    3582:	ed93 2a00 	vldr	s4, [r3]
    3586:	eef1 1a61 	vneg.f32	s3, s3
    358a:	eeb1 1a41 	vneg.f32	s2, s2
    358e:	eef1 0a60 	vneg.f32	s1, s1
    3592:	4bbd      	ldr	r3, [pc, #756]	; (3888 <loop+0x3a8>)
    3594:	ed93 0a00 	vldr	s0, [r3]
    3598:	f7ff f80e 	bl	25b8 <Madgwick6DOF(float, float, float, float, float, float, float)>
  getDesState(); //Convert raw commands to normalized values based on saturated control limits
    359c:	f7fd fc9c 	bl	ed8 <getDesState()>
	if (useSerialAngleCommands) {
    35a0:	4bba      	ldr	r3, [pc, #744]	; (388c <loop+0x3ac>)
    35a2:	781b      	ldrb	r3, [r3, #0]
    35a4:	2b00      	cmp	r3, #0
    35a6:	f040 8368 	bne.w	3c7a <loop+0x79a>
	if (conductSineSweep) {
    35aa:	4baf      	ldr	r3, [pc, #700]	; (3868 <loop+0x388>)
    35ac:	781b      	ldrb	r3, [r3, #0]
    35ae:	2b00      	cmp	r3, #0
    35b0:	f040 8368 	bne.w	3c84 <loop+0x7a4>
	if (channel_8_pwm > 1250 && channel_8_pwm < 1750) {
    35b4:	4bb6      	ldr	r3, [pc, #728]	; (3890 <loop+0x3b0>)
    35b6:	681b      	ldr	r3, [r3, #0]
    35b8:	f2a3 43e3 	subw	r3, r3, #1251	; 0x4e3
    35bc:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
    35c0:	f240 8365 	bls.w	3c8e <loop+0x7ae>
	if (channel_8_pwm > 1750) {
    35c4:	4bb2      	ldr	r3, [pc, #712]	; (3890 <loop+0x3b0>)
    35c6:	681a      	ldr	r2, [r3, #0]
    35c8:	f240 63d6 	movw	r3, #1750	; 0x6d6
    35cc:	429a      	cmp	r2, r3
    35ce:	f300 8361 	bgt.w	3c94 <loop+0x7b4>
	getPScale();
    35d2:	f7fe ff67 	bl	24a4 <getPScale()>
	getIScale();
    35d6:	f7fe ffb1 	bl	253c <getIScale()>
	getDScale();
    35da:	f7fe ff89 	bl	24f0 <getDScale()>
	desState[0] = pitch_des; 
    35de:	4aad      	ldr	r2, [pc, #692]	; (3894 <loop+0x3b4>)
    35e0:	4bad      	ldr	r3, [pc, #692]	; (3898 <loop+0x3b8>)
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	6013      	str	r3, [r2, #0]
	desState[1] = yaw_des; 
    35e6:	4bad      	ldr	r3, [pc, #692]	; (389c <loop+0x3bc>)
    35e8:	681b      	ldr	r3, [r3, #0]
    35ea:	6053      	str	r3, [r2, #4]
	desState[2] = roll_des;
    35ec:	4bac      	ldr	r3, [pc, #688]	; (38a0 <loop+0x3c0>)
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	6093      	str	r3, [r2, #8]
	currState[0] = pitch_IMU; 
    35f2:	4bac      	ldr	r3, [pc, #688]	; (38a4 <loop+0x3c4>)
    35f4:	49ac      	ldr	r1, [pc, #688]	; (38a8 <loop+0x3c8>)
    35f6:	6809      	ldr	r1, [r1, #0]
    35f8:	6019      	str	r1, [r3, #0]
	currState[1] = yaw_IMU; 
    35fa:	49ac      	ldr	r1, [pc, #688]	; (38ac <loop+0x3cc>)
    35fc:	6809      	ldr	r1, [r1, #0]
    35fe:	6059      	str	r1, [r3, #4]
	currState[2] = roll_IMU;
    3600:	49ab      	ldr	r1, [pc, #684]	; (38b0 <loop+0x3d0>)
    3602:	6809      	ldr	r1, [r1, #0]
    3604:	6099      	str	r1, [r3, #8]
      : Base(), m_storage(other.m_storage) { }
    3606:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
    360a:	ca07      	ldmia	r2, {r0, r1, r2}
    360c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    3610:	f10d 0ed4 	add.w	lr, sp, #212	; 0xd4
    3614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3618:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  }

  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  CoeffReturnType coeff(Index row, Index col) const
  {
    return m_data[col * colStride() + row * rowStride()];
    361c:	4aa5      	ldr	r2, [pc, #660]	; (38b4 <loop+0x3d4>)
    361e:	edd2 3a00 	vldr	s7, [r2]
    3622:	4ba5      	ldr	r3, [pc, #660]	; (38b8 <loop+0x3d8>)
    3624:	edd3 2a00 	vldr	s5, [r3]
    3628:	ed92 3a03 	vldr	s6, [r2, #12]
    362c:	ed93 2a01 	vldr	s4, [r3, #4]
    3630:	edd2 6a06 	vldr	s13, [r2, #24]
    3634:	ed93 6a02 	vldr	s12, [r3, #8]
    3638:	ee66 7a86 	vmul.f32	s15, s13, s12
    363c:	ee23 7a02 	vmul.f32	s14, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3640:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3644:	ee23 7aa2 	vmul.f32	s14, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3648:	ee77 7a87 	vadd.f32	s15, s15, s14
    364c:	edcd 7a05 	vstr	s15, [sp, #20]
    3650:	edd2 4a01 	vldr	s9, [r2, #4]
    3654:	ed92 4a04 	vldr	s8, [r2, #16]
    3658:	ed92 7a07 	vldr	s14, [r2, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    365c:	ee66 7a07 	vmul.f32	s15, s12, s14
    3660:	ee62 5a04 	vmul.f32	s11, s4, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3664:	ee77 7aa5 	vadd.f32	s15, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3668:	ee62 5aa4 	vmul.f32	s11, s5, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    366c:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3670:	edcd 7a06 	vstr	s15, [sp, #24]
    3674:	edd2 5a02 	vldr	s11, [r2, #8]
    3678:	ed92 5a05 	vldr	s10, [r2, #20]
    367c:	edd2 7a08 	vldr	s15, [r2, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3680:	ee26 6a27 	vmul.f32	s12, s12, s15
    3684:	ee22 2a05 	vmul.f32	s4, s4, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3688:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    368c:	ee62 2aa5 	vmul.f32	s5, s5, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3690:	ee36 6a22 	vadd.f32	s12, s12, s5
    3694:	ed8d 6a07 	vstr	s12, [sp, #28]
    3698:	edd3 2a03 	vldr	s5, [r3, #12]
    369c:	ed93 2a04 	vldr	s4, [r3, #16]
    36a0:	ed93 6a05 	vldr	s12, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36a4:	ee66 1a86 	vmul.f32	s3, s13, s12
    36a8:	ee23 1a02 	vmul.f32	s2, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36ac:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36b0:	ee23 1aa2 	vmul.f32	s2, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36b4:	ee71 1a81 	vadd.f32	s3, s3, s2
    36b8:	edcd 1a08 	vstr	s3, [sp, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36bc:	ee67 1a06 	vmul.f32	s3, s14, s12
    36c0:	ee24 1a02 	vmul.f32	s2, s8, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36c4:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36c8:	ee24 1aa2 	vmul.f32	s2, s9, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36cc:	ee71 1a81 	vadd.f32	s3, s3, s2
    36d0:	edcd 1a09 	vstr	s3, [sp, #36]	; 0x24
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36d4:	ee27 6a86 	vmul.f32	s12, s15, s12
    36d8:	ee25 2a02 	vmul.f32	s4, s10, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36dc:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36e0:	ee65 2aa2 	vmul.f32	s5, s11, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    36e4:	ee36 6a22 	vadd.f32	s12, s12, s5
    36e8:	ed8d 6a0a 	vstr	s12, [sp, #40]	; 0x28
    36ec:	ed93 6a06 	vldr	s12, [r3, #24]
    36f0:	edd3 2a07 	vldr	s5, [r3, #28]
    36f4:	ed93 2a08 	vldr	s4, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    36f8:	ee66 6a82 	vmul.f32	s13, s13, s4
    36fc:	ee23 3a22 	vmul.f32	s6, s6, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3700:	ee76 6a83 	vadd.f32	s13, s13, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3704:	ee63 3a86 	vmul.f32	s7, s7, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3708:	ee76 6aa3 	vadd.f32	s13, s13, s7
    370c:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3710:	ee27 7a02 	vmul.f32	s14, s14, s4
    3714:	ee24 4a22 	vmul.f32	s8, s8, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3718:	ee37 7a04 	vadd.f32	s14, s14, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    371c:	ee64 4a86 	vmul.f32	s9, s9, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3720:	ee37 7a24 	vadd.f32	s14, s14, s9
    3724:	ed8d 7a0c 	vstr	s14, [sp, #48]	; 0x30
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3728:	ee67 7a82 	vmul.f32	s15, s15, s4
    372c:	ee25 5a22 	vmul.f32	s10, s10, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3730:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3734:	ee65 5a86 	vmul.f32	s11, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3738:	ee77 7aa5 	vadd.f32	s15, s15, s11
    373c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
    3740:	4a5e      	ldr	r2, [pc, #376]	; (38bc <loop+0x3dc>)
    3742:	edd2 3a00 	vldr	s7, [r2]
    3746:	4b5e      	ldr	r3, [pc, #376]	; (38c0 <loop+0x3e0>)
    3748:	edd3 2a00 	vldr	s5, [r3]
    374c:	ed92 3a03 	vldr	s6, [r2, #12]
    3750:	ed93 2a01 	vldr	s4, [r3, #4]
    3754:	edd2 6a06 	vldr	s13, [r2, #24]
    3758:	ed93 6a02 	vldr	s12, [r3, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    375c:	ee66 7a86 	vmul.f32	s15, s13, s12
    3760:	ee23 7a02 	vmul.f32	s14, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3764:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3768:	ee23 7aa2 	vmul.f32	s14, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    376c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3770:	edcd 7a0e 	vstr	s15, [sp, #56]	; 0x38
    3774:	edd2 4a01 	vldr	s9, [r2, #4]
    3778:	ed92 4a04 	vldr	s8, [r2, #16]
    377c:	ed92 7a07 	vldr	s14, [r2, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3780:	ee66 7a07 	vmul.f32	s15, s12, s14
    3784:	ee62 5a04 	vmul.f32	s11, s4, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3788:	ee77 7aa5 	vadd.f32	s15, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    378c:	ee62 5aa4 	vmul.f32	s11, s5, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3790:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3794:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
    3798:	edd2 5a02 	vldr	s11, [r2, #8]
    379c:	ed92 5a05 	vldr	s10, [r2, #20]
    37a0:	edd2 7a08 	vldr	s15, [r2, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37a4:	ee26 6a27 	vmul.f32	s12, s12, s15
    37a8:	ee22 2a05 	vmul.f32	s4, s4, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37ac:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37b0:	ee62 2aa5 	vmul.f32	s5, s5, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37b4:	ee36 6a22 	vadd.f32	s12, s12, s5
    37b8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
    37bc:	edd3 2a03 	vldr	s5, [r3, #12]
    37c0:	ed93 2a04 	vldr	s4, [r3, #16]
    37c4:	ed93 6a05 	vldr	s12, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37c8:	ee66 1a86 	vmul.f32	s3, s13, s12
    37cc:	ee23 1a02 	vmul.f32	s2, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37d0:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37d4:	ee23 1aa2 	vmul.f32	s2, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37d8:	ee71 1a81 	vadd.f32	s3, s3, s2
    37dc:	edcd 1a11 	vstr	s3, [sp, #68]	; 0x44
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37e0:	ee67 1a06 	vmul.f32	s3, s14, s12
    37e4:	ee24 1a02 	vmul.f32	s2, s8, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37e8:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37ec:	ee24 1aa2 	vmul.f32	s2, s9, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    37f0:	ee71 1a81 	vadd.f32	s3, s3, s2
    37f4:	edcd 1a12 	vstr	s3, [sp, #72]	; 0x48
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    37f8:	ee27 6a86 	vmul.f32	s12, s15, s12
    37fc:	ee25 2a02 	vmul.f32	s4, s10, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3800:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3804:	ee65 2aa2 	vmul.f32	s5, s11, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3808:	ee36 6a22 	vadd.f32	s12, s12, s5
    380c:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
    3810:	ed93 6a06 	vldr	s12, [r3, #24]
    3814:	edd3 2a07 	vldr	s5, [r3, #28]
    3818:	ed93 2a08 	vldr	s4, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    381c:	ee66 6a82 	vmul.f32	s13, s13, s4
    3820:	ee23 3a22 	vmul.f32	s6, s6, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3824:	ee76 6a83 	vadd.f32	s13, s13, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3828:	ee63 3a86 	vmul.f32	s7, s7, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    382c:	ee76 6aa3 	vadd.f32	s13, s13, s7
    3830:	edcd 6a14 	vstr	s13, [sp, #80]	; 0x50
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3834:	ee27 7a02 	vmul.f32	s14, s14, s4
    3838:	ee24 4a22 	vmul.f32	s8, s8, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    383c:	ee37 7a04 	vadd.f32	s14, s14, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3840:	ee64 4a86 	vmul.f32	s9, s9, s12
    3844:	e03e      	b.n	38c4 <loop+0x3e4>
    3846:	bf00      	nop
    3848:	00000000 	.word	0x00000000
    384c:	412e8480 	.word	0x412e8480
    3850:	20005154 	.word	0x20005154
    3854:	20005064 	.word	0x20005064
    3858:	20005084 	.word	0x20005084
    385c:	20005048 	.word	0x20005048
    3860:	200053ce 	.word	0x200053ce
    3864:	2000504c 	.word	0x2000504c
    3868:	200053ca 	.word	0x200053ca
    386c:	200053be 	.word	0x200053be
    3870:	20003a1c 	.word	0x20003a1c
    3874:	20004088 	.word	0x20004088
    3878:	200040d4 	.word	0x200040d4
    387c:	200040cc 	.word	0x200040cc
    3880:	20004098 	.word	0x20004098
    3884:	20004090 	.word	0x20004090
    3888:	200040c4 	.word	0x200040c4
    388c:	200053db 	.word	0x200053db
    3890:	20005050 	.word	0x20005050
    3894:	20005078 	.word	0x20005078
    3898:	2000514c 	.word	0x2000514c
    389c:	200053b0 	.word	0x200053b0
    38a0:	20005178 	.word	0x20005178
    38a4:	20005058 	.word	0x20005058
    38a8:	20005144 	.word	0x20005144
    38ac:	200053a8 	.word	0x200053a8
    38b0:	20005170 	.word	0x20005170
    38b4:	20004c30 	.word	0x20004c30
    38b8:	2000413c 	.word	0x2000413c
    38bc:	20004c0c 	.word	0x20004c0c
    38c0:	200040dc 	.word	0x200040dc
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    38c4:	ee37 7a24 	vadd.f32	s14, s14, s9
    38c8:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    38cc:	ee67 7a82 	vmul.f32	s15, s15, s4
    38d0:	ee25 5a22 	vmul.f32	s10, s10, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    38d4:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    38d8:	ee65 5a86 	vmul.f32	s11, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    38dc:	ee77 7aa5 	vadd.f32	s15, s15, s11
    38e0:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
    38e4:	4ab5      	ldr	r2, [pc, #724]	; (3bbc <loop+0x6dc>)
    38e6:	edd2 3a00 	vldr	s7, [r2]
    38ea:	4bb5      	ldr	r3, [pc, #724]	; (3bc0 <loop+0x6e0>)
    38ec:	edd3 2a00 	vldr	s5, [r3]
    38f0:	ed92 3a03 	vldr	s6, [r2, #12]
    38f4:	ed93 2a01 	vldr	s4, [r3, #4]
    38f8:	edd2 6a06 	vldr	s13, [r2, #24]
    38fc:	ed93 6a02 	vldr	s12, [r3, #8]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3900:	ee66 7a86 	vmul.f32	s15, s13, s12
    3904:	ee23 7a02 	vmul.f32	s14, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3908:	ee77 7a87 	vadd.f32	s15, s15, s14
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    390c:	ee23 7aa2 	vmul.f32	s14, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3910:	ee77 7a87 	vadd.f32	s15, s15, s14
    3914:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
    3918:	edd2 4a01 	vldr	s9, [r2, #4]
    391c:	ed92 4a04 	vldr	s8, [r2, #16]
    3920:	ed92 7a07 	vldr	s14, [r2, #28]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3924:	ee66 7a07 	vmul.f32	s15, s12, s14
    3928:	ee62 5a04 	vmul.f32	s11, s4, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    392c:	ee77 7aa5 	vadd.f32	s15, s15, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3930:	ee62 5aa4 	vmul.f32	s11, s5, s9
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3934:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3938:	edcd 7a18 	vstr	s15, [sp, #96]	; 0x60
    393c:	edd2 5a02 	vldr	s11, [r2, #8]
    3940:	ed92 5a05 	vldr	s10, [r2, #20]
    3944:	edd2 7a08 	vldr	s15, [r2, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3948:	ee26 6a27 	vmul.f32	s12, s12, s15
    394c:	ee22 2a05 	vmul.f32	s4, s4, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3950:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3954:	ee62 2aa5 	vmul.f32	s5, s5, s11
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3958:	ee36 6a22 	vadd.f32	s12, s12, s5
    395c:	ed8d 6a19 	vstr	s12, [sp, #100]	; 0x64
    3960:	edd3 2a03 	vldr	s5, [r3, #12]
    3964:	ed93 2a04 	vldr	s4, [r3, #16]
    3968:	ed93 6a05 	vldr	s12, [r3, #20]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    396c:	ee66 1a86 	vmul.f32	s3, s13, s12
    3970:	ee23 1a02 	vmul.f32	s2, s6, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3974:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3978:	ee23 1aa2 	vmul.f32	s2, s7, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    397c:	ee71 1a81 	vadd.f32	s3, s3, s2
    3980:	edcd 1a1a 	vstr	s3, [sp, #104]	; 0x68
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3984:	ee67 1a06 	vmul.f32	s3, s14, s12
    3988:	ee24 1a02 	vmul.f32	s2, s8, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    398c:	ee71 1a81 	vadd.f32	s3, s3, s2
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    3990:	ee24 1aa2 	vmul.f32	s2, s9, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3994:	ee71 1a81 	vadd.f32	s3, s3, s2
    3998:	edcd 1a1b 	vstr	s3, [sp, #108]	; 0x6c
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    399c:	ee27 6a86 	vmul.f32	s12, s15, s12
    39a0:	ee25 2a02 	vmul.f32	s4, s10, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39a4:	ee36 6a02 	vadd.f32	s12, s12, s4
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39a8:	ee65 2aa2 	vmul.f32	s5, s11, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39ac:	ee36 6a22 	vadd.f32	s12, s12, s5
    39b0:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
    39b4:	ed93 6a06 	vldr	s12, [r3, #24]
    39b8:	edd3 2a07 	vldr	s5, [r3, #28]
    39bc:	ed93 2a08 	vldr	s4, [r3, #32]
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39c0:	ee66 6a82 	vmul.f32	s13, s13, s4
    39c4:	ee23 3a22 	vmul.f32	s6, s6, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39c8:	ee76 6a83 	vadd.f32	s13, s13, s6
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39cc:	ee63 3a86 	vmul.f32	s7, s7, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
    39d4:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39d8:	ee27 7a02 	vmul.f32	s14, s14, s4
    39dc:	ee24 4a22 	vmul.f32	s8, s8, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39e0:	ee37 7a04 	vadd.f32	s14, s14, s8
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39e4:	ee64 4a86 	vmul.f32	s9, s9, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39e8:	ee37 7a24 	vadd.f32	s14, s14, s9
    39ec:	ed8d 7a1e 	vstr	s14, [sp, #120]	; 0x78
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39f0:	ee67 7a82 	vmul.f32	s15, s15, s4
    39f4:	ee25 5a22 	vmul.f32	s10, s10, s5
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    39f8:	ee77 7a85 	vadd.f32	s15, s15, s10
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a * b; }
    39fc:	ee65 5a86 	vmul.f32	s11, s11, s12
  EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b) const { return a + b; }
    3a00:	ee77 7aa5 	vadd.f32	s15, s15, s11
    3a04:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
	pidOutputVals = pidOutput(desState, currState, (P_gains*P_gainScale), (I_gains*I_gainScale), (D_gains*D_gainScale), dt, channel_1_pwm <
    3a08:	ac2f      	add	r4, sp, #188	; 0xbc
    3a0a:	4b6e      	ldr	r3, [pc, #440]	; (3bc4 <loop+0x6e4>)
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	f240 4223 	movw	r2, #1059	; 0x423
    3a12:	4293      	cmp	r3, r2
    3a14:	bfcc      	ite	gt
    3a16:	2300      	movgt	r3, #0
    3a18:	2301      	movle	r3, #1
    3a1a:	9302      	str	r3, [sp, #8]
    3a1c:	ab17      	add	r3, sp, #92	; 0x5c
    3a1e:	9301      	str	r3, [sp, #4]
    3a20:	ab0e      	add	r3, sp, #56	; 0x38
    3a22:	9300      	str	r3, [sp, #0]
    3a24:	4b68      	ldr	r3, [pc, #416]	; (3bc8 <loop+0x6e8>)
    3a26:	edd3 1a00 	vldr	s3, [r3]
    3a2a:	4b68      	ldr	r3, [pc, #416]	; (3bcc <loop+0x6ec>)
    3a2c:	ed93 1a00 	vldr	s2, [r3]
    3a30:	4b67      	ldr	r3, [pc, #412]	; (3bd0 <loop+0x6f0>)
    3a32:	edd3 0a00 	vldr	s1, [r3]
    3a36:	4b67      	ldr	r3, [pc, #412]	; (3bd4 <loop+0x6f4>)
    3a38:	ed93 0a00 	vldr	s0, [r3]
    3a3c:	ab05      	add	r3, sp, #20
    3a3e:	4672      	mov	r2, lr
    3a40:	4661      	mov	r1, ip
    3a42:	4620      	mov	r0, r4
    3a44:	f7ff fc5a 	bl	32fc <pidOutput(Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, Eigen::Matrix<float, 3, 3, 0, 3, 3>, float, bool, float, float, float)>
      m_storage = std::move(other.m_storage);
    3a48:	4b63      	ldr	r3, [pc, #396]	; (3bd8 <loop+0x6f8>)
    3a4a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    3a4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pitch_PID = pidOutputVals[0];
    3a52:	6819      	ldr	r1, [r3, #0]
    3a54:	4a61      	ldr	r2, [pc, #388]	; (3bdc <loop+0x6fc>)
    3a56:	6011      	str	r1, [r2, #0]
	yaw_PID = pidOutputVals[1];
    3a58:	6859      	ldr	r1, [r3, #4]
    3a5a:	4a61      	ldr	r2, [pc, #388]	; (3be0 <loop+0x700>)
    3a5c:	6011      	str	r1, [r2, #0]
	roll_PID = pidOutputVals[2];
    3a5e:	689a      	ldr	r2, [r3, #8]
    3a60:	4b60      	ldr	r3, [pc, #384]	; (3be4 <loop+0x704>)
    3a62:	601a      	str	r2, [r3, #0]
  controlMixer(); //Mixes PID outputs to scaled actuator commands -- custom mixing assignments done here
    3a64:	f7fc fef2 	bl	84c <controlMixer()>
  scaleCommands(); //Scales motor commands to 125 to 250 range (oneshot125 protocol) and servo PWM commands to 0 to 180 (for servo library)
    3a68:	f7fd fb8e 	bl	1188 <scaleCommands()>
  throttleCut(); //Directly sets motor commands to low based on state of ch5
    3a6c:	f7fe f826 	bl	1abc <throttleCut()>
  commandMotors(); //Sends command pulses to each motor pin using OneShot125 protocol
    3a70:	f7fd ff7a 	bl	1968 <commandMotors()>
  servo1.write(s1_command_PWM); //Writes PWM value to servo object
    3a74:	4b5c      	ldr	r3, [pc, #368]	; (3be8 <loop+0x708>)
    3a76:	6819      	ldr	r1, [r3, #0]
    3a78:	485c      	ldr	r0, [pc, #368]	; (3bec <loop+0x70c>)
    3a7a:	f001 fae5 	bl	5048 <PWMServo::write(int)>
  servo2.write(s2_command_PWM);
    3a7e:	4b5c      	ldr	r3, [pc, #368]	; (3bf0 <loop+0x710>)
    3a80:	6819      	ldr	r1, [r3, #0]
    3a82:	485c      	ldr	r0, [pc, #368]	; (3bf4 <loop+0x714>)
    3a84:	f001 fae0 	bl	5048 <PWMServo::write(int)>
  servo3.write(s3_command_PWM);
    3a88:	4b5b      	ldr	r3, [pc, #364]	; (3bf8 <loop+0x718>)
    3a8a:	6819      	ldr	r1, [r3, #0]
    3a8c:	485b      	ldr	r0, [pc, #364]	; (3bfc <loop+0x71c>)
    3a8e:	f001 fadb 	bl	5048 <PWMServo::write(int)>
  servo4.write(s4_command_PWM);
    3a92:	4b5b      	ldr	r3, [pc, #364]	; (3c00 <loop+0x720>)
    3a94:	6819      	ldr	r1, [r3, #0]
    3a96:	485b      	ldr	r0, [pc, #364]	; (3c04 <loop+0x724>)
    3a98:	f001 fad6 	bl	5048 <PWMServo::write(int)>
  servo5.write(s5_command_PWM);
    3a9c:	4b5a      	ldr	r3, [pc, #360]	; (3c08 <loop+0x728>)
    3a9e:	6819      	ldr	r1, [r3, #0]
    3aa0:	485a      	ldr	r0, [pc, #360]	; (3c0c <loop+0x72c>)
    3aa2:	f001 fad1 	bl	5048 <PWMServo::write(int)>
  servo6.write(s6_command_PWM);
    3aa6:	4b5a      	ldr	r3, [pc, #360]	; (3c10 <loop+0x730>)
    3aa8:	6819      	ldr	r1, [r3, #0]
    3aaa:	485a      	ldr	r0, [pc, #360]	; (3c14 <loop+0x734>)
    3aac:	f001 facc 	bl	5048 <PWMServo::write(int)>
  servo7.write(s7_command_PWM);
    3ab0:	4b59      	ldr	r3, [pc, #356]	; (3c18 <loop+0x738>)
    3ab2:	6819      	ldr	r1, [r3, #0]
    3ab4:	4859      	ldr	r0, [pc, #356]	; (3c1c <loop+0x73c>)
    3ab6:	f001 fac7 	bl	5048 <PWMServo::write(int)>
  getCommands(); //Pulls current available radio commands
    3aba:	f7fd fc89 	bl	13d0 <getCommands()>
  failSafe(); //Prevent failures in event of bad receiver connection, defaults to failsafe values assigned in setup
    3abe:	f7fd fee7 	bl	1890 <failSafe()>
  getJoyAngle();
    3ac2:	f7fe f8a5 	bl	1c10 <getJoyAngle()>
  loopRate(2000); //Do not exceed 2000Hz, all filter parameters tuned to 2000Hz by default
    3ac6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    3aca:	f7fe f81d 	bl	1b08 <loopRate(int)>
}
    3ace:	b039      	add	sp, #228	; 0xe4
    3ad0:	bd30      	pop	{r4, r5, pc}
		irisFlag = 1;
    3ad2:	4b53      	ldr	r3, [pc, #332]	; (3c20 <loop+0x740>)
    3ad4:	2201      	movs	r2, #1
    3ad6:	701a      	strb	r2, [r3, #0]
		openIris();
    3ad8:	f7fe f8d4 	bl	1c84 <openIris()>
    3adc:	e528      	b.n	3530 <loop+0x50>
		conductSineSweep = 0;
    3ade:	4b51      	ldr	r3, [pc, #324]	; (3c24 <loop+0x744>)
    3ae0:	2200      	movs	r2, #0
    3ae2:	701a      	strb	r2, [r3, #0]
		sineTime = 0;
    3ae4:	4b50      	ldr	r3, [pc, #320]	; (3c28 <loop+0x748>)
    3ae6:	2200      	movs	r2, #0
    3ae8:	601a      	str	r2, [r3, #0]
    3aea:	e52b      	b.n	3544 <loop+0x64>
    print_counterSD = micros();
    3aec:	f009 fc02 	bl	d2f4 <micros>
    3af0:	4b4e      	ldr	r3, [pc, #312]	; (3c2c <loop+0x74c>)
    3af2:	6018      	str	r0, [r3, #0]
    String dataString;
    3af4:	2100      	movs	r1, #0
    3af6:	a80e      	add	r0, sp, #56	; 0x38
    3af8:	f009 f97b 	bl	cdf2 <String::String(char const*)>
    dataString = getDataString();
    3afc:	a82b      	add	r0, sp, #172	; 0xac
    3afe:	f7fe f8e7 	bl	1cd0 <getDataString()>
    3b02:	a92b      	add	r1, sp, #172	; 0xac
    3b04:	a80e      	add	r0, sp, #56	; 0x38
    3b06:	f009 f9b1 	bl	ce6c <String::operator=(String&&)>
    3b0a:	a82b      	add	r0, sp, #172	; 0xac
    3b0c:	f009 f928 	bl	cd60 <String::~String()>
    3b10:	4b47      	ldr	r3, [pc, #284]	; (3c30 <loop+0x750>)
    3b12:	681a      	ldr	r2, [r3, #0]
    3b14:	2a00      	cmp	r2, #0
    3b16:	d04f      	beq.n	3bb8 <loop+0x6d8>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    3b18:	f244 2302 	movw	r3, #16898	; 0x4202
    3b1c:	4945      	ldr	r1, [pc, #276]	; (3c34 <loop+0x754>)
    3b1e:	a817      	add	r0, sp, #92	; 0x5c
    3b20:	f006 faaa 	bl	a078 <FsVolume::open(char const*, int)>
    3b24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3b26:	2b00      	cmp	r3, #0
    3b28:	f000 8096 	beq.w	3c58 <loop+0x778>
		if (file) return File(new SDFile(file));
    3b2c:	205c      	movs	r0, #92	; 0x5c
    3b2e:	f009 fd39 	bl	d5a4 <operator new(unsigned int)>
    3b32:	4604      	mov	r4, r0
class FileImpl {
    3b34:	2500      	movs	r5, #0
    3b36:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    3b38:	4b3f      	ldr	r3, [pc, #252]	; (3c38 <loop+0x758>)
    3b3a:	6003      	str	r3, [r0, #0]
class Print
    3b3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3b3e:	60c3      	str	r3, [r0, #12]
    3b40:	4b3e      	ldr	r3, [pc, #248]	; (3c3c <loop+0x75c>)
    3b42:	6083      	str	r3, [r0, #8]
    3b44:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3b46:	6103      	str	r3, [r0, #16]
    3b48:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    3b4c:	7503      	strb	r3, [r0, #20]
    3b4e:	a91b      	add	r1, sp, #108	; 0x6c
    3b50:	3018      	adds	r0, #24
    3b52:	f006 f95a 	bl	9e0a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    3b56:	4b3a      	ldr	r3, [pc, #232]	; (3c40 <loop+0x760>)
    3b58:	60a3      	str	r3, [r4, #8]
    3b5a:	65a5      	str	r5, [r4, #88]	; 0x58
		if (f) f->refcount++;
    3b5c:	6863      	ldr	r3, [r4, #4]
    3b5e:	3301      	adds	r3, #1
    3b60:	6063      	str	r3, [r4, #4]
    3b62:	4b38      	ldr	r3, [pc, #224]	; (3c44 <loop+0x764>)
    3b64:	9317      	str	r3, [sp, #92]	; 0x5c
  ~FsBaseFile() {close();}
    3b66:	a81b      	add	r0, sp, #108	; 0x6c
    3b68:	f006 f990 	bl	9e8c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3b6c:	4b36      	ldr	r3, [pc, #216]	; (3c48 <loop+0x768>)
    3b6e:	691b      	ldr	r3, [r3, #16]
    3b70:	2b00      	cmp	r3, #0
    3b72:	f000 8092 	beq.w	3c9a <loop+0x7ba>
		if (--(f->refcount) == 0) {
    3b76:	685a      	ldr	r2, [r3, #4]
    3b78:	3a01      	subs	r2, #1
    3b7a:	605a      	str	r2, [r3, #4]
    3b7c:	b94a      	cbnz	r2, 3b92 <loop+0x6b2>
			f->close();
    3b7e:	4d32      	ldr	r5, [pc, #200]	; (3c48 <loop+0x768>)
    3b80:	6928      	ldr	r0, [r5, #16]
    3b82:	6803      	ldr	r3, [r0, #0]
    3b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3b86:	4798      	blx	r3
			delete f;
    3b88:	6928      	ldr	r0, [r5, #16]
    3b8a:	b110      	cbz	r0, 3b92 <loop+0x6b2>
    3b8c:	6803      	ldr	r3, [r0, #0]
    3b8e:	685b      	ldr	r3, [r3, #4]
    3b90:	4798      	blx	r3
		f = file.f;
    3b92:	4b2d      	ldr	r3, [pc, #180]	; (3c48 <loop+0x768>)
    3b94:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    3b96:	2c00      	cmp	r4, #0
    3b98:	f040 8081 	bne.w	3c9e <loop+0x7be>
							  return write((const uint8_t *)str, strlen(str)); }
    3b9c:	4c2b      	ldr	r4, [pc, #172]	; (3c4c <loop+0x76c>)
    3b9e:	6823      	ldr	r3, [r4, #0]
    3ba0:	685b      	ldr	r3, [r3, #4]
    3ba2:	2219      	movs	r2, #25
    3ba4:	492a      	ldr	r1, [pc, #168]	; (3c50 <loop+0x770>)
    3ba6:	4620      	mov	r0, r4
    3ba8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    3baa:	4620      	mov	r0, r4
    3bac:	f008 fe73 	bl	c896 <Print::println()>
  }
    3bb0:	a80e      	add	r0, sp, #56	; 0x38
    3bb2:	f009 f8d5 	bl	cd60 <String::~String()>
    3bb6:	e4d2      	b.n	355e <loop+0x7e>
    3bb8:	4a26      	ldr	r2, [pc, #152]	; (3c54 <loop+0x774>)
    3bba:	e7ad      	b.n	3b18 <loop+0x638>
    3bbc:	20004be8 	.word	0x20004be8
    3bc0:	200040a0 	.word	0x200040a0
    3bc4:	20005014 	.word	0x20005014
    3bc8:	200040d4 	.word	0x200040d4
    3bcc:	200040cc 	.word	0x200040cc
    3bd0:	200040c4 	.word	0x200040c4
    3bd4:	20005084 	.word	0x20005084
    3bd8:	20005138 	.word	0x20005138
    3bdc:	20005148 	.word	0x20005148
    3be0:	200053ac 	.word	0x200053ac
    3be4:	20005174 	.word	0x20005174
    3be8:	200051b0 	.word	0x200051b0
    3bec:	2000535c 	.word	0x2000535c
    3bf0:	200051b8 	.word	0x200051b8
    3bf4:	20005360 	.word	0x20005360
    3bf8:	200051c0 	.word	0x200051c0
    3bfc:	20005364 	.word	0x20005364
    3c00:	200051c8 	.word	0x200051c8
    3c04:	20005368 	.word	0x20005368
    3c08:	200051d0 	.word	0x200051d0
    3c0c:	2000536c 	.word	0x2000536c
    3c10:	200051d8 	.word	0x200051d8
    3c14:	20005370 	.word	0x20005370
    3c18:	200051e0 	.word	0x200051e0
    3c1c:	20005374 	.word	0x20005374
    3c20:	200053ce 	.word	0x200053ce
    3c24:	200053ca 	.word	0x200053ca
    3c28:	20005380 	.word	0x20005380
    3c2c:	20003a1c 	.word	0x20003a1c
    3c30:	200050bc 	.word	0x200050bc
    3c34:	20004164 	.word	0x20004164
    3c38:	200024f0 	.word	0x200024f0
    3c3c:	2000254c 	.word	0x2000254c
    3c40:	200024cc 	.word	0x200024cc
    3c44:	200023c0 	.word	0x200023c0
    3c48:	200039a4 	.word	0x200039a4
    3c4c:	20003354 	.word	0x20003354
    3c50:	20002c6c 	.word	0x20002c6c
    3c54:	200031dc 	.word	0x200031dc
  bool isOpen() const {return m_fFile || m_xFile;}
    3c58:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
    3c5a:	2c00      	cmp	r4, #0
    3c5c:	f47f af66 	bne.w	3b2c <loop+0x64c>
    3c60:	4b23      	ldr	r3, [pc, #140]	; (3cf0 <loop+0x810>)
    3c62:	9317      	str	r3, [sp, #92]	; 0x5c
  ~FsBaseFile() {close();}
    3c64:	a81b      	add	r0, sp, #108	; 0x6c
    3c66:	f006 f911 	bl	9e8c <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    3c6a:	4b22      	ldr	r3, [pc, #136]	; (3cf4 <loop+0x814>)
    3c6c:	691b      	ldr	r3, [r3, #16]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d181      	bne.n	3b76 <loop+0x696>
		f = file.f;
    3c72:	4b20      	ldr	r3, [pc, #128]	; (3cf4 <loop+0x814>)
    3c74:	2200      	movs	r2, #0
    3c76:	611a      	str	r2, [r3, #16]
		return (f) ? f->isOpen() : false;
    3c78:	e790      	b.n	3b9c <loop+0x6bc>
		setDesStateSerial(axisToRotate);
    3c7a:	4b1f      	ldr	r3, [pc, #124]	; (3cf8 <loop+0x818>)
    3c7c:	6818      	ldr	r0, [r3, #0]
    3c7e:	f7fd f823 	bl	cc8 <setDesStateSerial(int)>
    3c82:	e492      	b.n	35aa <loop+0xca>
  	performSineSweep(axisToRotate);
    3c84:	4b1c      	ldr	r3, [pc, #112]	; (3cf8 <loop+0x818>)
    3c86:	6818      	ldr	r0, [r3, #0]
    3c88:	f7fd f87e 	bl	d88 <performSineSweep(int)>
    3c8c:	e492      	b.n	35b4 <loop+0xd4>
		rollStep();
    3c8e:	f7fd f8eb 	bl	e68 <rollStep()>
    3c92:	e497      	b.n	35c4 <loop+0xe4>
		pitchStep();
    3c94:	f7fd f904 	bl	ea0 <pitchStep()>
    3c98:	e49b      	b.n	35d2 <loop+0xf2>
		f = file.f;
    3c9a:	4b16      	ldr	r3, [pc, #88]	; (3cf4 <loop+0x814>)
    3c9c:	611c      	str	r4, [r3, #16]
		return (f) ? f->isOpen() : false;
    3c9e:	6823      	ldr	r3, [r4, #0]
    3ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3ca2:	4620      	mov	r0, r4
    3ca4:	4798      	blx	r3
    if (dataFile) {
    3ca6:	2800      	cmp	r0, #0
    3ca8:	f43f af78 	beq.w	3b9c <loop+0x6bc>
	size_t println(const String &s)			{ return print(s) + println(); }
    3cac:	4c11      	ldr	r4, [pc, #68]	; (3cf4 <loop+0x814>)
    3cae:	a90e      	add	r1, sp, #56	; 0x38
    3cb0:	4620      	mov	r0, r4
    3cb2:	f008 fdcb 	bl	c84c <Print::print(String const&)>
    3cb6:	4620      	mov	r0, r4
    3cb8:	f008 fded 	bl	c896 <Print::println()>
		if (f) {
    3cbc:	6920      	ldr	r0, [r4, #16]
    3cbe:	2800      	cmp	r0, #0
    3cc0:	f43f af76 	beq.w	3bb0 <loop+0x6d0>
			f->close();
    3cc4:	6803      	ldr	r3, [r0, #0]
    3cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cc8:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    3cca:	6922      	ldr	r2, [r4, #16]
    3ccc:	6853      	ldr	r3, [r2, #4]
    3cce:	3b01      	subs	r3, #1
    3cd0:	6053      	str	r3, [r2, #4]
    3cd2:	b943      	cbnz	r3, 3ce6 <loop+0x806>
			f->close();
    3cd4:	6920      	ldr	r0, [r4, #16]
    3cd6:	6803      	ldr	r3, [r0, #0]
    3cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3cda:	4798      	blx	r3
			delete f;
    3cdc:	6920      	ldr	r0, [r4, #16]
    3cde:	b110      	cbz	r0, 3ce6 <loop+0x806>
    3ce0:	6803      	ldr	r3, [r0, #0]
    3ce2:	685b      	ldr	r3, [r3, #4]
    3ce4:	4798      	blx	r3
		f = nullptr;
    3ce6:	4b03      	ldr	r3, [pc, #12]	; (3cf4 <loop+0x814>)
    3ce8:	2200      	movs	r2, #0
    3cea:	611a      	str	r2, [r3, #16]
	}
    3cec:	e760      	b.n	3bb0 <loop+0x6d0>
    3cee:	bf00      	nop
    3cf0:	200023c0 	.word	0x200023c0
    3cf4:	200039a4 	.word	0x200039a4
    3cf8:	20003964 	.word	0x20003964

00003cfc <_GLOBAL__sub_I_errorOld_yaw>:
    3cfc:	b508      	push	{r3, lr}
    3cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3d02:	2001      	movs	r0, #1
    3d04:	f7ff f8e8 	bl	2ed8 <__static_initialization_and_destruction_0(int, int)>
    3d08:	bd08      	pop	{r3, pc}
	...

00003d0c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
    3d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d10:	b087      	sub	sp, #28
    3d12:	9002      	str	r0, [sp, #8]
    3d14:	9103      	str	r1, [sp, #12]
    3d16:	461f      	mov	r7, r3
    3d18:	f8bd 6040 	ldrh.w	r6, [sp, #64]	; 0x40
    3d1c:	4b3c      	ldr	r3, [pc, #240]	; (3e10 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    3d1e:	f8d3 9000 	ldr.w	r9, [r3]
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3d22:	9200      	str	r2, [sp, #0]
    3d24:	2a00      	cmp	r2, #0
    3d26:	d061      	beq.n	3dec <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe0>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    3d28:	0043      	lsls	r3, r0, #1
    3d2a:	b2d9      	uxtb	r1, r3
    3d2c:	9101      	str	r1, [sp, #4]
    3d2e:	4613      	mov	r3, r2
    3d30:	2a88      	cmp	r2, #136	; 0x88
    3d32:	bf28      	it	cs
    3d34:	2388      	movcs	r3, #136	; 0x88
    3d36:	9304      	str	r3, [sp, #16]
    3d38:	f04f 0800 	mov.w	r8, #0
    int8_t count = 0;
    3d3c:	4644      	mov	r4, r8
    3d3e:	4d35      	ldr	r5, [pc, #212]	; (3e14 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x108>)
		transmitting = 1;
    3d40:	f04f 0b01 	mov.w	fp, #1
    3d44:	f88d b017 	strb.w	fp, [sp, #23]
    3d48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 3e10 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>
    3d4c:	e022      	b.n	3d94 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x88>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    3d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d52:	e006      	b.n	3d62 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x56>
    3d54:	4299      	cmp	r1, r3
    3d56:	d9fa      	bls.n	3d4e <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x42>
		return rxBuffer[rxBufferIndex++];
    3d58:	3301      	adds	r3, #1
    3d5a:	f885 30a2 	strb.w	r3, [r5, #162]	; 0xa2
    3d5e:	442a      	add	r2, r5
    3d60:	7e93      	ldrb	r3, [r2, #26]
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
    3d62:	553b      	strb	r3, [r7, r4]
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3d64:	3401      	adds	r4, #1
    3d66:	b264      	sxtb	r4, r4
		return rxBufferLength - rxBufferIndex;
    3d68:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3d6c:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3d70:	461a      	mov	r2, r3
    3d72:	4299      	cmp	r1, r3
    3d74:	d007      	beq.n	3d86 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    3d76:	2e00      	cmp	r6, #0
    3d78:	d0ec      	beq.n	3d54 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
    3d7a:	f8da 0000 	ldr.w	r0, [sl]
    3d7e:	eba0 0009 	sub.w	r0, r0, r9
    3d82:	42b0      	cmp	r0, r6
    3d84:	d3e6      	bcc.n	3d54 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x48>
            for (uint8_t k = 0; k < length; k += min((int)length, BUFFER_LENGTH)) {
    3d86:	9b04      	ldr	r3, [sp, #16]
    3d88:	4498      	add	r8, r3
    3d8a:	fa5f f888 	uxtb.w	r8, r8
    3d8e:	9b00      	ldr	r3, [sp, #0]
    3d90:	4543      	cmp	r3, r8
    3d92:	d92c      	bls.n	3dee <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xe2>
		txBuffer[0] = (address << 1);
    3d94:	9b01      	ldr	r3, [sp, #4]
    3d96:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    3d9a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3d9e:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		txBufferLength = 1;
    3da2:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
                Wire.write(regAddr);
    3da6:	9903      	ldr	r1, [sp, #12]
    3da8:	4628      	mov	r0, r5
    3daa:	f000 fb2a 	bl	4402 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    3dae:	4659      	mov	r1, fp
    3db0:	4628      	mov	r0, r5
    3db2:	f000 fc53 	bl	465c <TwoWire::endTransmission(unsigned char)>
		txBuffer[0] = (address << 1);
    3db6:	9b01      	ldr	r3, [sp, #4]
    3db8:	f885 30a5 	strb.w	r3, [r5, #165]	; 0xa5
		transmitting = 1;
    3dbc:	f885 b130 	strb.w	fp, [r5, #304]	; 0x130
		txBufferLength = 1;
    3dc0:	f885 b12f 	strb.w	fp, [r5, #303]	; 0x12f
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
    3dc4:	9b00      	ldr	r3, [sp, #0]
    3dc6:	eba3 0208 	sub.w	r2, r3, r8
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3dca:	2a88      	cmp	r2, #136	; 0x88
    3dcc:	bfa8      	it	ge
    3dce:	2288      	movge	r2, #136	; 0x88
		return requestFrom(address, quantity, (uint8_t)1);
    3dd0:	465b      	mov	r3, fp
    3dd2:	b2d2      	uxtb	r2, r2
    3dd4:	9902      	ldr	r1, [sp, #8]
    3dd6:	4628      	mov	r0, r5
    3dd8:	f000 fcbc 	bl	4754 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return rxBufferLength - rxBufferIndex;
    3ddc:	f895 10a3 	ldrb.w	r1, [r5, #163]	; 0xa3
    3de0:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
    3de4:	461a      	mov	r2, r3
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
    3de6:	4299      	cmp	r1, r3
    3de8:	d1c5      	bne.n	3d76 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x6a>
    3dea:	e7cc      	b.n	3d86 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x7a>
    int8_t count = 0;
    3dec:	2400      	movs	r4, #0
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
    3dee:	b156      	cbz	r6, 3e06 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3df0:	4b07      	ldr	r3, [pc, #28]	; (3e10 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x104>)
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	eba3 0309 	sub.w	r3, r3, r9
    3df8:	42b3      	cmp	r3, r6
    3dfa:	d304      	bcc.n	3e06 <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0xfa>
    3dfc:	9b00      	ldr	r3, [sp, #0]
    3dfe:	429c      	cmp	r4, r3
    3e00:	bfb8      	it	lt
    3e02:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
    3e06:	4620      	mov	r0, r4
    3e08:	b007      	add	sp, #28
    3e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e0e:	bf00      	nop
    3e10:	20005388 	.word	0x20005388
    3e14:	20004784 	.word	0x20004784

00003e18 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
    3e18:	b500      	push	{lr}
    3e1a:	b083      	sub	sp, #12
    return readBytes(devAddr, regAddr, 1, data, timeout);
    3e1c:	9300      	str	r3, [sp, #0]
    3e1e:	4613      	mov	r3, r2
    3e20:	2201      	movs	r2, #1
    3e22:	f7ff ff73 	bl	3d0c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
}
    3e26:	b003      	add	sp, #12
    3e28:	f85d fb04 	ldr.w	pc, [sp], #4

00003e2c <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>:
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
    3e2c:	b530      	push	{r4, r5, lr}
    3e2e:	b083      	sub	sp, #12
    3e30:	4614      	mov	r4, r2
    3e32:	461d      	mov	r5, r3
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
    3e34:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    3e38:	f10d 0207 	add.w	r2, sp, #7
    3e3c:	f7ff ffec 	bl	3e18 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3e40:	b160      	cbz	r0, 3e5c <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)+0x30>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3e42:	1b62      	subs	r2, r4, r5
    3e44:	3201      	adds	r2, #1
    3e46:	2101      	movs	r1, #1
    3e48:	fa01 f305 	lsl.w	r3, r1, r5
    3e4c:	3b01      	subs	r3, #1
    3e4e:	4093      	lsls	r3, r2
        b &= mask;
    3e50:	f89d 1007 	ldrb.w	r1, [sp, #7]
        b >>= (bitStart - length + 1);
    3e54:	400b      	ands	r3, r1
    3e56:	4113      	asrs	r3, r2
    3e58:	9a06      	ldr	r2, [sp, #24]
    3e5a:	7013      	strb	r3, [r2, #0]
}
    3e5c:	b003      	add	sp, #12
    3e5e:	bd30      	pop	{r4, r5, pc}

00003e60 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
    3e60:	b570      	push	{r4, r5, r6, lr}
    3e62:	4615      	mov	r5, r2
    3e64:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    3e66:	4a10      	ldr	r2, [pc, #64]	; (3ea8 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3e68:	0040      	lsls	r0, r0, #1
    3e6a:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		transmitting = 1;
    3e6e:	2301      	movs	r3, #1
    3e70:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
		txBufferLength = 1;
    3e74:	f882 312f 	strb.w	r3, [r2, #303]	; 0x12f
        Wire.beginTransmission(devAddr);
        Wire.send((uint8_t) regAddr); // send address
	#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
        Wire.beginTransmission(devAddr);
        Wire.write((uint8_t) regAddr); // send address
    3e78:	4610      	mov	r0, r2
    3e7a:	f000 fac2 	bl	4402 <TwoWire::write(unsigned char)>
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
    3e7e:	b15d      	cbz	r5, 3e98 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x38>
    3e80:	1e74      	subs	r4, r6, #1
    3e82:	3d01      	subs	r5, #1
    3e84:	fa56 f585 	uxtab	r5, r6, r5
        #endif
        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)
            Wire.send((uint8_t) data[i]);
			#elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100 \
			|| I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_SBWIRE && ARDUINO >= 100)
			Wire.write((uint8_t) data[i]);
    3e88:	4e07      	ldr	r6, [pc, #28]	; (3ea8 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3e8a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    3e8e:	4630      	mov	r0, r6
    3e90:	f000 fab7 	bl	4402 <TwoWire::write(unsigned char)>
    for (uint8_t i = 0; i < length; i++) {
    3e94:	42ac      	cmp	r4, r5
    3e96:	d1f8      	bne.n	3e8a <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x2a>
		return endTransmission(1);
    3e98:	2101      	movs	r1, #1
    3e9a:	4803      	ldr	r0, [pc, #12]	; (3ea8 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)+0x48>)
    3e9c:	f000 fbde 	bl	465c <TwoWire::endTransmission(unsigned char)>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
    3ea0:	fab0 f080 	clz	r0, r0
    3ea4:	0940      	lsrs	r0, r0, #5
    3ea6:	bd70      	pop	{r4, r5, r6, pc}
    3ea8:	20004784 	.word	0x20004784

00003eac <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
    3eac:	b500      	push	{lr}
    3eae:	b083      	sub	sp, #12
    3eb0:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeBytes(devAddr, regAddr, 1, &data);
    3eb4:	f10d 0307 	add.w	r3, sp, #7
    3eb8:	2201      	movs	r2, #1
    3eba:	f7ff ffd1 	bl	3e60 <I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)>
}
    3ebe:	b003      	add	sp, #12
    3ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00003ec4 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    3ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ec6:	b083      	sub	sp, #12
    3ec8:	4604      	mov	r4, r0
    3eca:	460d      	mov	r5, r1
    3ecc:	4616      	mov	r6, r2
    3ece:	461f      	mov	r7, r3
    readByte(devAddr, regAddr, &b);
    3ed0:	4b0c      	ldr	r3, [pc, #48]	; (3f04 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>)
    3ed2:	881b      	ldrh	r3, [r3, #0]
    3ed4:	f10d 0207 	add.w	r2, sp, #7
    3ed8:	f7ff ff9e 	bl	3e18 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3edc:	b15f      	cbz	r7, 3ef6 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x32>
    3ede:	2301      	movs	r3, #1
    3ee0:	40b3      	lsls	r3, r6
    3ee2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3ee6:	431a      	orrs	r2, r3
    3ee8:	b2d2      	uxtb	r2, r2
    return writeByte(devAddr, regAddr, b);
    3eea:	4629      	mov	r1, r5
    3eec:	4620      	mov	r0, r4
    3eee:	f7ff ffdd 	bl	3eac <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
}
    3ef2:	b003      	add	sp, #12
    3ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
    3ef6:	2301      	movs	r3, #1
    3ef8:	40b3      	lsls	r3, r6
    3efa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3efe:	ea22 0203 	bic.w	r2, r2, r3
    3f02:	e7f2      	b.n	3eea <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)+0x26>
    3f04:	20003a3e 	.word	0x20003a3e

00003f08 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
    3f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f0a:	b083      	sub	sp, #12
    3f0c:	4605      	mov	r5, r0
    3f0e:	460e      	mov	r6, r1
    3f10:	4614      	mov	r4, r2
    3f12:	461f      	mov	r7, r3
    if (readByte(devAddr, regAddr, &b) != 0) {
    3f14:	4b0f      	ldr	r3, [pc, #60]	; (3f54 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>)
    3f16:	881b      	ldrh	r3, [r3, #0]
    3f18:	f10d 0207 	add.w	r2, sp, #7
    3f1c:	f7ff ff7c 	bl	3e18 <I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)>
    3f20:	b910      	cbnz	r0, 3f28 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x20>
        return false;
    3f22:	2000      	movs	r0, #0
}
    3f24:	b003      	add	sp, #12
    3f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
    3f28:	1be2      	subs	r2, r4, r7
    3f2a:	3201      	adds	r2, #1
    3f2c:	2101      	movs	r1, #1
    3f2e:	fa01 f307 	lsl.w	r3, r1, r7
    3f32:	3b01      	subs	r3, #1
    3f34:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
    3f36:	f89d 1020 	ldrb.w	r1, [sp, #32]
    3f3a:	4091      	lsls	r1, r2
    3f3c:	b2c9      	uxtb	r1, r1
        b &= ~(mask); // zero all important bits in existing byte
    3f3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3f42:	ea22 0203 	bic.w	r2, r2, r3
        data &= mask; // zero all non-important bits in data
    3f46:	400b      	ands	r3, r1
        return writeByte(devAddr, regAddr, b);
    3f48:	431a      	orrs	r2, r3
    3f4a:	4631      	mov	r1, r6
    3f4c:	4628      	mov	r0, r5
    3f4e:	f7ff ffad 	bl	3eac <I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)>
    3f52:	e7e7      	b.n	3f24 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x1c>
    3f54:	20003a3e 	.word	0x20003a3e

00003f58 <MPU6050::MPU6050(unsigned char)>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(uint8_t address):devAddr(address) {
    3f58:	7001      	strb	r1, [r0, #0]
}
    3f5a:	4770      	bx	lr

00003f5c <MPU6050::setFullScaleGyroRange(unsigned char)>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
    3f5c:	b500      	push	{lr}
    3f5e:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
    3f60:	7800      	ldrb	r0, [r0, #0]
    3f62:	9100      	str	r1, [sp, #0]
    3f64:	2302      	movs	r3, #2
    3f66:	2204      	movs	r2, #4
    3f68:	211b      	movs	r1, #27
    3f6a:	f7ff ffcd 	bl	3f08 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3f6e:	b003      	add	sp, #12
    3f70:	f85d fb04 	ldr.w	pc, [sp], #4

00003f74 <MPU6050::setFullScaleAccelRange(unsigned char)>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
    3f74:	b500      	push	{lr}
    3f76:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
    3f78:	7800      	ldrb	r0, [r0, #0]
    3f7a:	9100      	str	r1, [sp, #0]
    3f7c:	2302      	movs	r3, #2
    3f7e:	2204      	movs	r2, #4
    3f80:	211c      	movs	r1, #28
    3f82:	f7ff ffc1 	bl	3f08 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    3f86:	b003      	add	sp, #12
    3f88:	f85d fb04 	ldr.w	pc, [sp], #4

00003f8c <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)>:
 * @param gz 16-bit signed integer container for gyroscope Z-axis value
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {
    3f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8e:	b083      	sub	sp, #12
    3f90:	4604      	mov	r4, r0
    3f92:	460f      	mov	r7, r1
    3f94:	4616      	mov	r6, r2
    3f96:	461d      	mov	r5, r3
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
    3f98:	4603      	mov	r3, r0
    3f9a:	f813 0b01 	ldrb.w	r0, [r3], #1
    3f9e:	4a15      	ldr	r2, [pc, #84]	; (3ff4 <MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)+0x68>)
    3fa0:	8812      	ldrh	r2, [r2, #0]
    3fa2:	9200      	str	r2, [sp, #0]
    3fa4:	220e      	movs	r2, #14
    3fa6:	213b      	movs	r1, #59	; 0x3b
    3fa8:	f7ff feb0 	bl	3d0c <I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];
    3fac:	7862      	ldrb	r2, [r4, #1]
    3fae:	78a3      	ldrb	r3, [r4, #2]
    3fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fb4:	803b      	strh	r3, [r7, #0]
    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];
    3fb6:	78e2      	ldrb	r2, [r4, #3]
    3fb8:	7923      	ldrb	r3, [r4, #4]
    3fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fbe:	8033      	strh	r3, [r6, #0]
    *az = (((int16_t)buffer[4]) << 8) | buffer[5];
    3fc0:	7962      	ldrb	r2, [r4, #5]
    3fc2:	79a3      	ldrb	r3, [r4, #6]
    3fc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fc8:	802b      	strh	r3, [r5, #0]
    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];
    3fca:	7a62      	ldrb	r2, [r4, #9]
    3fcc:	7aa3      	ldrb	r3, [r4, #10]
    3fce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fd2:	9a08      	ldr	r2, [sp, #32]
    3fd4:	8013      	strh	r3, [r2, #0]
    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];
    3fd6:	7ae2      	ldrb	r2, [r4, #11]
    3fd8:	7b23      	ldrb	r3, [r4, #12]
    3fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3fe0:	8013      	strh	r3, [r2, #0]
    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];
    3fe2:	7b62      	ldrb	r2, [r4, #13]
    3fe4:	7ba3      	ldrb	r3, [r4, #14]
    3fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3fec:	8013      	strh	r3, [r2, #0]
}
    3fee:	b003      	add	sp, #12
    3ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ff2:	bf00      	nop
    3ff4:	20003a3e 	.word	0x20003a3e

00003ff8 <MPU6050::setSleepEnabled(bool)>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    3ff8:	b508      	push	{r3, lr}
    3ffa:	460b      	mov	r3, r1
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
    3ffc:	2206      	movs	r2, #6
    3ffe:	216b      	movs	r1, #107	; 0x6b
    4000:	7800      	ldrb	r0, [r0, #0]
    4002:	f7ff ff5f 	bl	3ec4 <I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)>
}
    4006:	bd08      	pop	{r3, pc}

00004008 <MPU6050::setClockSource(unsigned char)>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
    4008:	b500      	push	{lr}
    400a:	b083      	sub	sp, #12
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
    400c:	7800      	ldrb	r0, [r0, #0]
    400e:	9100      	str	r1, [sp, #0]
    4010:	2303      	movs	r3, #3
    4012:	2202      	movs	r2, #2
    4014:	216b      	movs	r1, #107	; 0x6b
    4016:	f7ff ff77 	bl	3f08 <I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
}
    401a:	b003      	add	sp, #12
    401c:	f85d fb04 	ldr.w	pc, [sp], #4

00004020 <MPU6050::initialize()>:
void MPU6050::initialize() {
    4020:	b510      	push	{r4, lr}
    4022:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    4024:	2101      	movs	r1, #1
    4026:	f7ff ffef 	bl	4008 <MPU6050::setClockSource(unsigned char)>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    402a:	2100      	movs	r1, #0
    402c:	4620      	mov	r0, r4
    402e:	f7ff ff95 	bl	3f5c <MPU6050::setFullScaleGyroRange(unsigned char)>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    4032:	2100      	movs	r1, #0
    4034:	4620      	mov	r0, r4
    4036:	f7ff ff9d 	bl	3f74 <MPU6050::setFullScaleAccelRange(unsigned char)>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
    403a:	2100      	movs	r1, #0
    403c:	4620      	mov	r0, r4
    403e:	f7ff ffdb 	bl	3ff8 <MPU6050::setSleepEnabled(bool)>
}
    4042:	bd10      	pop	{r4, pc}

00004044 <MPU6050::getDeviceID()>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    4044:	b510      	push	{r4, lr}
    4046:	b082      	sub	sp, #8
    4048:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
    404a:	4603      	mov	r3, r0
    404c:	f813 0b01 	ldrb.w	r0, [r3], #1
    4050:	4a05      	ldr	r2, [pc, #20]	; (4068 <MPU6050::getDeviceID()+0x24>)
    4052:	8812      	ldrh	r2, [r2, #0]
    4054:	9201      	str	r2, [sp, #4]
    4056:	9300      	str	r3, [sp, #0]
    4058:	2306      	movs	r3, #6
    405a:	461a      	mov	r2, r3
    405c:	2175      	movs	r1, #117	; 0x75
    405e:	f7ff fee5 	bl	3e2c <I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)>
    return buffer[0];
}
    4062:	7860      	ldrb	r0, [r4, #1]
    4064:	b002      	add	sp, #8
    4066:	bd10      	pop	{r4, pc}
    4068:	20003a3e 	.word	0x20003a3e

0000406c <MPU6050::testConnection()>:
bool MPU6050::testConnection() {
    406c:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
    406e:	f7ff ffe9 	bl	4044 <MPU6050::getDeviceID()>
}
    4072:	2834      	cmp	r0, #52	; 0x34
    4074:	bf14      	ite	ne
    4076:	2000      	movne	r0, #0
    4078:	2001      	moveq	r0, #1
    407a:	bd08      	pop	{r3, pc}

0000407c <SBUS::SBUS(HardwareSerial&)>:
	uint8_t PACKET[25];
	volatile int SENDINDEX;
	void sendByte();
#endif
/* SBUS object, input the serial bus */
SBUS::SBUS(HardwareSerial& bus)
    407c:	b510      	push	{r4, lr}
    407e:	4a10      	ldr	r2, [pc, #64]	; (40c0 <SBUS::SBUS(HardwareSerial&)+0x44>)
    4080:	6002      	str	r2, [r0, #0]
    4082:	f04f 0e0f 	mov.w	lr, #15
    4086:	f880 e004 	strb.w	lr, [r0, #4]
    408a:	f04f 0c00 	mov.w	ip, #0
    408e:	f880 c005 	strb.w	ip, [r0, #5]
    4092:	2204      	movs	r2, #4
    4094:	7182      	strb	r2, [r0, #6]
    4096:	f880 e007 	strb.w	lr, [r0, #7]
    409a:	f641 3458 	movw	r4, #7000	; 0x1b58
    409e:	6084      	str	r4, [r0, #8]
    40a0:	f880 c00d 	strb.w	ip, [r0, #13]
    40a4:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
    40a8:	2208      	movs	r2, #8
    40aa:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    40ae:	22ac      	movs	r2, #172	; 0xac
    40b0:	8542      	strh	r2, [r0, #42]	; 0x2a
    40b2:	f240 7213 	movw	r2, #1811	; 0x713
    40b6:	8582      	strh	r2, [r0, #44]	; 0x2c
{
	_bus = &bus;
    40b8:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
}
    40bc:	bd10      	pop	{r4, pc}
    40be:	bf00      	nop
    40c0:	000186a0 	.word	0x000186a0

000040c4 <SBUS::~SBUS()>:
		}
	}
}

/* destructor, free dynamically allocated memory */
SBUS::~SBUS()
    40c4:	b538      	push	{r3, r4, r5, lr}
    40c6:	4605      	mov	r5, r0
{
	if (_readCoeff) {
    40c8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    40cc:	b183      	cbz	r3, 40f0 <SBUS::~SBUS()+0x2c>
    40ce:	2400      	movs	r4, #0
    40d0:	e004      	b.n	40dc <SBUS::~SBUS()+0x18>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_readCoeff[i]) {
				free(_readCoeff[i]);
    40d2:	f00c ff13 	bl	10efc <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    40d6:	3404      	adds	r4, #4
    40d8:	2c40      	cmp	r4, #64	; 0x40
    40da:	d005      	beq.n	40e8 <SBUS::~SBUS()+0x24>
			if (_readCoeff[i]) {
    40dc:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    40e0:	5918      	ldr	r0, [r3, r4]
    40e2:	2800      	cmp	r0, #0
    40e4:	d1f5      	bne.n	40d2 <SBUS::~SBUS()+0xe>
    40e6:	e7f6      	b.n	40d6 <SBUS::~SBUS()+0x12>
			}
		}
		free(_readCoeff);
    40e8:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    40ec:	f00c ff06 	bl	10efc <free>
	}
	if (_writeCoeff) {
    40f0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    40f4:	b183      	cbz	r3, 4118 <SBUS::~SBUS()+0x54>
    40f6:	2400      	movs	r4, #0
    40f8:	e004      	b.n	4104 <SBUS::~SBUS()+0x40>
		for (uint8_t i = 0; i < _numChannels; i++) {
			if (_writeCoeff[i]) {
				free(_writeCoeff[i]);
    40fa:	f00c feff 	bl	10efc <free>
		for (uint8_t i = 0; i < _numChannels; i++) {
    40fe:	3404      	adds	r4, #4
    4100:	2c40      	cmp	r4, #64	; 0x40
    4102:	d005      	beq.n	4110 <SBUS::~SBUS()+0x4c>
			if (_writeCoeff[i]) {
    4104:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    4108:	5918      	ldr	r0, [r3, r4]
    410a:	2800      	cmp	r0, #0
    410c:	d1f5      	bne.n	40fa <SBUS::~SBUS()+0x36>
    410e:	e7f6      	b.n	40fe <SBUS::~SBUS()+0x3a>
			}
		}
		free(_writeCoeff);
    4110:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    4114:	f00c fef2 	bl	10efc <free>
	}
}
    4118:	4628      	mov	r0, r5
    411a:	bd38      	pop	{r3, r4, r5, pc}

0000411c <SBUS::parse()>:

/* parse the SBUS data */
bool SBUS::parse()
{
    411c:	b570      	push	{r4, r5, r6, lr}
    411e:	4604      	mov	r4, r0
	// reset the parser state if too much time has passed
	static elapsedMicros _sbusTime = 0;
    4120:	4b2b      	ldr	r3, [pc, #172]	; (41d0 <SBUS::parse()+0xb4>)
    4122:	681b      	ldr	r3, [r3, #0]
    4124:	f013 0f01 	tst.w	r3, #1
    4128:	d00c      	beq.n	4144 <SBUS::parse()+0x28>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    412a:	f009 f8e3 	bl	d2f4 <micros>
    412e:	4b29      	ldr	r3, [pc, #164]	; (41d4 <SBUS::parse()+0xb8>)
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	1ac0      	subs	r0, r0, r3
	if (_sbusTime > SBUS_TIMEOUT_US) {_parserState = 0;}
    4134:	68a3      	ldr	r3, [r4, #8]
    4136:	4283      	cmp	r3, r0
    4138:	d201      	bcs.n	413e <SBUS::parse()+0x22>
    413a:	2300      	movs	r3, #0
    413c:	7323      	strb	r3, [r4, #12]
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    413e:	4d25      	ldr	r5, [pc, #148]	; (41d4 <SBUS::parse()+0xb8>)
		_sbusTime = 0;
		_curByte = _bus->read();
		// find the header
		if (_parserState == 0) {
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
					_parserState++;
    4140:	2601      	movs	r6, #1
    4142:	e011      	b.n	4168 <SBUS::parse()+0x4c>
	elapsedMicros(unsigned long val) { us = micros() - val; }
    4144:	f009 f8d6 	bl	d2f4 <micros>
    4148:	4b22      	ldr	r3, [pc, #136]	; (41d4 <SBUS::parse()+0xb8>)
    414a:	6018      	str	r0, [r3, #0]
	static elapsedMicros _sbusTime = 0;
    414c:	4b20      	ldr	r3, [pc, #128]	; (41d0 <SBUS::parse()+0xb4>)
    414e:	2201      	movs	r2, #1
    4150:	601a      	str	r2, [r3, #0]
    4152:	e7ea      	b.n	412a <SBUS::parse()+0xe>
				} else {
					_parserState = 0;
				}
		} else {
			// strip off the data
			if ((_parserState-1) < _payloadSize) {
    4154:	2b18      	cmp	r3, #24
    4156:	d803      	bhi.n	4160 <SBUS::parse()+0x44>
				_payload[_parserState-1] = _curByte;
    4158:	18e2      	adds	r2, r4, r3
    415a:	7390      	strb	r0, [r2, #14]
				_parserState++;
    415c:	3301      	adds	r3, #1
    415e:	7323      	strb	r3, [r4, #12]
			}
			// check the end byte
			if ((_parserState-1) == _payloadSize) {
    4160:	7b23      	ldrb	r3, [r4, #12]
    4162:	2b19      	cmp	r3, #25
    4164:	d022      	beq.n	41ac <SBUS::parse()+0x90>
					_parserState = 0;
					return false;
				}
			}
		}
		_prevByte = _curByte;
    4166:	7360      	strb	r0, [r4, #13]
	while (_bus->available() > 0) {
    4168:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    416c:	6803      	ldr	r3, [r0, #0]
    416e:	691b      	ldr	r3, [r3, #16]
    4170:	4798      	blx	r3
    4172:	2800      	cmp	r0, #0
    4174:	dd29      	ble.n	41ca <SBUS::parse()+0xae>
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    4176:	f009 f8bd 	bl	d2f4 <micros>
    417a:	6028      	str	r0, [r5, #0]
		_curByte = _bus->read();
    417c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    4180:	6803      	ldr	r3, [r0, #0]
    4182:	695b      	ldr	r3, [r3, #20]
    4184:	4798      	blx	r3
    4186:	b2c0      	uxtb	r0, r0
    4188:	73a0      	strb	r0, [r4, #14]
		if (_parserState == 0) {
    418a:	7b23      	ldrb	r3, [r4, #12]
    418c:	2b00      	cmp	r3, #0
    418e:	d1e1      	bne.n	4154 <SBUS::parse()+0x38>
				if ((_curByte == _sbusHeader) && ((_prevByte == _sbusFooter) || ((_prevByte & _sbus2Mask) == _sbus2Footer))) {
    4190:	7923      	ldrb	r3, [r4, #4]
    4192:	4283      	cmp	r3, r0
    4194:	d1e7      	bne.n	4166 <SBUS::parse()+0x4a>
    4196:	7b63      	ldrb	r3, [r4, #13]
    4198:	7962      	ldrb	r2, [r4, #5]
    419a:	429a      	cmp	r2, r3
    419c:	d004      	beq.n	41a8 <SBUS::parse()+0x8c>
    419e:	79e1      	ldrb	r1, [r4, #7]
    41a0:	79a2      	ldrb	r2, [r4, #6]
    41a2:	400b      	ands	r3, r1
    41a4:	429a      	cmp	r2, r3
    41a6:	d1de      	bne.n	4166 <SBUS::parse()+0x4a>
					_parserState++;
    41a8:	7326      	strb	r6, [r4, #12]
    41aa:	e7dc      	b.n	4166 <SBUS::parse()+0x4a>
				if ((_curByte == _sbusFooter) || ((_curByte & _sbus2Mask) == _sbus2Footer)) {
    41ac:	7963      	ldrb	r3, [r4, #5]
    41ae:	4283      	cmp	r3, r0
    41b0:	d007      	beq.n	41c2 <SBUS::parse()+0xa6>
    41b2:	79e2      	ldrb	r2, [r4, #7]
    41b4:	79a3      	ldrb	r3, [r4, #6]
    41b6:	4010      	ands	r0, r2
    41b8:	4283      	cmp	r3, r0
    41ba:	d002      	beq.n	41c2 <SBUS::parse()+0xa6>
					_parserState = 0;
    41bc:	2000      	movs	r0, #0
    41be:	7320      	strb	r0, [r4, #12]
					return false;
    41c0:	e004      	b.n	41cc <SBUS::parse()+0xb0>
					_parserState = 0;
    41c2:	2300      	movs	r3, #0
    41c4:	7323      	strb	r3, [r4, #12]
					return true;
    41c6:	2001      	movs	r0, #1
    41c8:	e000      	b.n	41cc <SBUS::parse()+0xb0>
	}
	// return false if a partial packet
	return false;
    41ca:	2000      	movs	r0, #0
}
    41cc:	bd70      	pop	{r4, r5, r6, pc}
    41ce:	bf00      	nop
    41d0:	20004b4c 	.word	0x20004b4c
    41d4:	20004cc0 	.word	0x20004cc0

000041d8 <SBUS::read(unsigned short*, bool*, bool*)>:
{
    41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41da:	4604      	mov	r4, r0
    41dc:	460d      	mov	r5, r1
    41de:	4616      	mov	r6, r2
    41e0:	461f      	mov	r7, r3
	if (parse()) {
    41e2:	f7ff ff9b 	bl	411c <SBUS::parse()>
    41e6:	4602      	mov	r2, r0
    41e8:	2800      	cmp	r0, #0
    41ea:	f000 80a5 	beq.w	4338 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
		if (channels) {
    41ee:	2d00      	cmp	r5, #0
    41f0:	f000 808e 	beq.w	4310 <SBUS::read(unsigned short*, bool*, bool*)+0x138>
			channels[0]  = (uint16_t) ((_payload[0]    |_payload[1] <<8)                     & 0x07FF);
    41f4:	7c21      	ldrb	r1, [r4, #16]
    41f6:	7be3      	ldrb	r3, [r4, #15]
    41f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    41fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4200:	802b      	strh	r3, [r5, #0]
			channels[1]  = (uint16_t) ((_payload[1]>>3 |_payload[2] <<5)                     & 0x07FF);
    4202:	7c21      	ldrb	r1, [r4, #16]
    4204:	7c63      	ldrb	r3, [r4, #17]
    4206:	015b      	lsls	r3, r3, #5
    4208:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    420c:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4210:	806b      	strh	r3, [r5, #2]
			channels[2]  = (uint16_t) ((_payload[2]>>6 |_payload[3] <<2 |_payload[4]<<10)  	 & 0x07FF);
    4212:	7ca1      	ldrb	r1, [r4, #18]
    4214:	7ce3      	ldrb	r3, [r4, #19]
    4216:	029b      	lsls	r3, r3, #10
    4218:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    421c:	7c61      	ldrb	r1, [r4, #17]
    421e:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    4222:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4226:	80ab      	strh	r3, [r5, #4]
			channels[3]  = (uint16_t) ((_payload[4]>>1 |_payload[5] <<7)                     & 0x07FF);
    4228:	7ce1      	ldrb	r1, [r4, #19]
    422a:	7d23      	ldrb	r3, [r4, #20]
    422c:	01db      	lsls	r3, r3, #7
    422e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    4232:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4236:	80eb      	strh	r3, [r5, #6]
			channels[4]  = (uint16_t) ((_payload[5]>>4 |_payload[6] <<4)                     & 0x07FF);
    4238:	7d21      	ldrb	r1, [r4, #20]
    423a:	7d63      	ldrb	r3, [r4, #21]
    423c:	011b      	lsls	r3, r3, #4
    423e:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    4242:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4246:	812b      	strh	r3, [r5, #8]
			channels[5]  = (uint16_t) ((_payload[6]>>7 |_payload[7] <<1 |_payload[8]<<9)   	 & 0x07FF);
    4248:	7da1      	ldrb	r1, [r4, #22]
    424a:	7de3      	ldrb	r3, [r4, #23]
    424c:	025b      	lsls	r3, r3, #9
    424e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    4252:	7d61      	ldrb	r1, [r4, #21]
    4254:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    4258:	f3c3 030a 	ubfx	r3, r3, #0, #11
    425c:	816b      	strh	r3, [r5, #10]
			channels[6]  = (uint16_t) ((_payload[8]>>2 |_payload[9] <<6)                     & 0x07FF);
    425e:	7de1      	ldrb	r1, [r4, #23]
    4260:	7e23      	ldrb	r3, [r4, #24]
    4262:	019b      	lsls	r3, r3, #6
    4264:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    4268:	f3c3 030a 	ubfx	r3, r3, #0, #11
    426c:	81ab      	strh	r3, [r5, #12]
			channels[7]  = (uint16_t) ((_payload[9]>>5 |_payload[10]<<3)                     & 0x07FF);
    426e:	7e21      	ldrb	r1, [r4, #24]
    4270:	7e63      	ldrb	r3, [r4, #25]
    4272:	00db      	lsls	r3, r3, #3
    4274:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    4278:	81eb      	strh	r3, [r5, #14]
			channels[8]  = (uint16_t) ((_payload[11]   |_payload[12]<<8)                     & 0x07FF);
    427a:	7ee1      	ldrb	r1, [r4, #27]
    427c:	7ea3      	ldrb	r3, [r4, #26]
    427e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4282:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4286:	822b      	strh	r3, [r5, #16]
			channels[9]  = (uint16_t) ((_payload[12]>>3|_payload[13]<<5)                     & 0x07FF);
    4288:	7ee1      	ldrb	r1, [r4, #27]
    428a:	7f23      	ldrb	r3, [r4, #28]
    428c:	015b      	lsls	r3, r3, #5
    428e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
    4292:	f3c3 030a 	ubfx	r3, r3, #0, #11
    4296:	826b      	strh	r3, [r5, #18]
			channels[10] = (uint16_t) ((_payload[13]>>6|_payload[14]<<2 |_payload[15]<<10) 	 & 0x07FF);
    4298:	7f61      	ldrb	r1, [r4, #29]
    429a:	7fa3      	ldrb	r3, [r4, #30]
    429c:	029b      	lsls	r3, r3, #10
    429e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    42a2:	7f21      	ldrb	r1, [r4, #28]
    42a4:	ea43 1391 	orr.w	r3, r3, r1, lsr #6
    42a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42ac:	82ab      	strh	r3, [r5, #20]
			channels[11] = (uint16_t) ((_payload[15]>>1|_payload[16]<<7)                     & 0x07FF);
    42ae:	7fa1      	ldrb	r1, [r4, #30]
    42b0:	7fe3      	ldrb	r3, [r4, #31]
    42b2:	01db      	lsls	r3, r3, #7
    42b4:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    42b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42bc:	82eb      	strh	r3, [r5, #22]
			channels[12] = (uint16_t) ((_payload[16]>>4|_payload[17]<<4)                     & 0x07FF);
    42be:	7fe1      	ldrb	r1, [r4, #31]
    42c0:	f894 3020 	ldrb.w	r3, [r4, #32]
    42c4:	011b      	lsls	r3, r3, #4
    42c6:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
    42ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42ce:	832b      	strh	r3, [r5, #24]
			channels[13] = (uint16_t) ((_payload[17]>>7|_payload[18]<<1 |_payload[19]<<9)  	 & 0x07FF);
    42d0:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    42d4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    42d8:	025b      	lsls	r3, r3, #9
    42da:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    42de:	f894 1020 	ldrb.w	r1, [r4, #32]
    42e2:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    42e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42ea:	836b      	strh	r3, [r5, #26]
			channels[14] = (uint16_t) ((_payload[19]>>2|_payload[20]<<6)                     & 0x07FF);
    42ec:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
    42f0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    42f4:	019b      	lsls	r3, r3, #6
    42f6:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
    42fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
    42fe:	83ab      	strh	r3, [r5, #28]
			channels[15] = (uint16_t) ((_payload[20]>>5|_payload[21]<<3)                     & 0x07FF);
    4300:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    4304:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    4308:	00db      	lsls	r3, r3, #3
    430a:	ea43 1351 	orr.w	r3, r3, r1, lsr #5
    430e:	83eb      	strh	r3, [r5, #30]
		if (lostFrame) {
    4310:	b147      	cbz	r7, 4324 <SBUS::read(unsigned short*, bool*, bool*)+0x14c>
    	if (_payload[22] & _sbusLostFrame) {
    4312:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    4316:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    431a:	4219      	tst	r1, r3
      	*lostFrame = true;
    431c:	bf14      	ite	ne
    431e:	2301      	movne	r3, #1
				*lostFrame = false;
    4320:	2300      	moveq	r3, #0
    4322:	703b      	strb	r3, [r7, #0]
		if (failsafe) {
    4324:	b146      	cbz	r6, 4338 <SBUS::read(unsigned short*, bool*, bool*)+0x160>
    	if (_payload[22] & _sbusFailSafe) {
    4326:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    432a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    432e:	4219      	tst	r1, r3
      		*failsafe = true;
    4330:	bf14      	ite	ne
    4332:	2301      	movne	r3, #1
      		*failsafe = false;
    4334:	2300      	moveq	r3, #0
    4336:	7033      	strb	r3, [r6, #0]
}
    4338:	4610      	mov	r0, r2
    433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000433c <SBUS::scaleBias(unsigned char)>:

/* compute scale factor and bias from end points */
void SBUS::scaleBias(uint8_t channel)
{
	_sbusScale[channel] = 2.0f / ((float)_sbusMax[channel] - (float)_sbusMin[channel]);
    433c:	eb00 0341 	add.w	r3, r0, r1, lsl #1
    4340:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    4342:	ee07 2a10 	vmov	s14, r2
    4346:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    434a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
    434e:	ee07 3a90 	vmov	s15, r3
    4352:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4356:	ee77 7ac7 	vsub.f32	s15, s15, s14
    435a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    435e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    4362:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    4366:	edc0 6a1c 	vstr	s13, [r0, #112]	; 0x70
	_sbusBias[channel] = -1.0f*((float)_sbusMin[channel] + ((float)_sbusMax[channel] - (float)_sbusMin[channel]) / 2.0f) * _sbusScale[channel];
    436a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    436e:	ee67 7a86 	vmul.f32	s15, s15, s12
    4372:	ee77 7a87 	vadd.f32	s15, s15, s14
    4376:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    437a:	edc0 7a2c 	vstr	s15, [r0, #176]	; 0xb0
}
    437e:	4770      	bx	lr

00004380 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>:
{
    4380:	b508      	push	{r3, lr}
	_sbusMin[channel] = min;
    4382:	eb00 0c41 	add.w	ip, r0, r1, lsl #1
    4386:	f8ac 202e 	strh.w	r2, [ip, #46]	; 0x2e
	_sbusMax[channel] = max;
    438a:	f8ac 304e 	strh.w	r3, [ip, #78]	; 0x4e
	scaleBias(channel);
    438e:	f7ff ffd5 	bl	433c <SBUS::scaleBias(unsigned char)>
}
    4392:	bd08      	pop	{r3, pc}

00004394 <SBUS::begin()>:
{
    4394:	b538      	push	{r3, r4, r5, lr}
    4396:	4605      	mov	r5, r0
	_parserState = 0;
    4398:	2400      	movs	r4, #0
    439a:	7304      	strb	r4, [r0, #12]
		setEndPoints(i,_defaultMin,_defaultMax);
    439c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    439e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    43a0:	b2e1      	uxtb	r1, r4
    43a2:	4628      	mov	r0, r5
    43a4:	f7ff ffec 	bl	4380 <SBUS::setEndPoints(unsigned char, unsigned short, unsigned short)>
	for (uint8_t i = 0; i < _numChannels; i++) {
    43a8:	3401      	adds	r4, #1
    43aa:	2c10      	cmp	r4, #16
    43ac:	d1f6      	bne.n	439c <SBUS::begin()+0x8>
		_bus->begin(_sbusBaud,SERIAL_8E2_RXINV_TXINV);
    43ae:	f44f 729b 	mov.w	r2, #310	; 0x136
    43b2:	6829      	ldr	r1, [r5, #0]
    43b4:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    43b8:	f008 f8b2 	bl	c520 <HardwareSerial::begin(unsigned long, unsigned short)>
}
    43bc:	bd38      	pop	{r3, r4, r5, pc}

000043be <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    43be:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    43c2:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    43c6:	1a10      	subs	r0, r2, r0
    43c8:	4770      	bx	lr

000043ca <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
    43ca:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    43ce:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    43d2:	429a      	cmp	r2, r3
    43d4:	d905      	bls.n	43e2 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    43d6:	1c5a      	adds	r2, r3, #1
    43d8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    43dc:	4418      	add	r0, r3
    43de:	7e80      	ldrb	r0, [r0, #26]
    43e0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    43e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    43e6:	4770      	bx	lr

000043e8 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    43e8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    43ec:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    43f0:	429a      	cmp	r2, r3
    43f2:	d902      	bls.n	43fa <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    43f4:	4418      	add	r0, r3
    43f6:	7e80      	ldrb	r0, [r0, #26]
    43f8:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    43fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    43fe:	4770      	bx	lr

00004400 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    4400:	4770      	bx	lr

00004402 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    4402:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    4406:	b17b      	cbz	r3, 4428 <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    4408:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    440c:	2b88      	cmp	r3, #136	; 0x88
    440e:	d903      	bls.n	4418 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    4410:	2301      	movs	r3, #1
    4412:	6043      	str	r3, [r0, #4]
			return 0;
    4414:	2000      	movs	r0, #0
    4416:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    4418:	1c5a      	adds	r2, r3, #1
    441a:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
    441e:	4418      	add	r0, r3
    4420:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    4424:	2001      	movs	r0, #1
    4426:	4770      	bx	lr
	return 0;
    4428:	2000      	movs	r0, #0
}
    442a:	4770      	bx	lr

0000442c <TwoWire::write(unsigned char const*, unsigned int)>:
{
    442c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    442e:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
    4432:	b90b      	cbnz	r3, 4438 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
    4434:	2000      	movs	r0, #0
}
    4436:	bd38      	pop	{r3, r4, r5, pc}
    4438:	4605      	mov	r5, r0
    443a:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    443c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    4440:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    4444:	42a2      	cmp	r2, r4
    4446:	d202      	bcs.n	444e <TwoWire::write(unsigned char const*, unsigned int)+0x22>
    4448:	2001      	movs	r0, #1
    444a:	6068      	str	r0, [r5, #4]
			quantity = avail;
    444c:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    444e:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    4452:	4622      	mov	r2, r4
    4454:	4418      	add	r0, r3
    4456:	f009 f80b 	bl	d470 <memcpy>
		txBufferLength += quantity;
    445a:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
    445e:	4423      	add	r3, r4
    4460:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
    4464:	4620      	mov	r0, r4
    4466:	e7e6      	b.n	4436 <TwoWire::write(unsigned char const*, unsigned int)+0xa>

00004468 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    4468:	b538      	push	{r3, r4, r5, lr}
    446a:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    446c:	2500      	movs	r5, #0
    446e:	6045      	str	r5, [r0, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    4470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4474:	6083      	str	r3, [r0, #8]
    4476:	7305      	strb	r5, [r0, #12]
		: port(myport), hardware(myhardware) {
    4478:	4b15      	ldr	r3, [pc, #84]	; (44d0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    447a:	6003      	str	r3, [r0, #0]
    447c:	6101      	str	r1, [r0, #16]
    447e:	6142      	str	r2, [r0, #20]
    4480:	7605      	strb	r5, [r0, #24]
    4482:	7645      	strb	r5, [r0, #25]
    4484:	2288      	movs	r2, #136	; 0x88
    4486:	4629      	mov	r1, r5
    4488:	301a      	adds	r0, #26
    448a:	f00d f8bb 	bl	11604 <memset>
    448e:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    4492:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    4496:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    449a:	2289      	movs	r2, #137	; 0x89
    449c:	4629      	mov	r1, r5
    449e:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    44a2:	f00d f8af 	bl	11604 <memset>
    44a6:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    44aa:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    44ae:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    44b2:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    44b6:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    44ba:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    44be:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    44c2:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
    44c6:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	}
    44ca:	4620      	mov	r0, r4
    44cc:	bd38      	pop	{r3, r4, r5, pc}
    44ce:	bf00      	nop
    44d0:	200025a0 	.word	0x200025a0

000044d4 <TwoWire::force_clock()>:
{
    44d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44d8:	b083      	sub	sp, #12
    44da:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    44dc:	6943      	ldr	r3, [r0, #20]
    44de:	7e02      	ldrb	r2, [r0, #24]
    44e0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    44e4:	7a11      	ldrb	r1, [r2, #8]
    44e6:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    44e8:	7e42      	ldrb	r2, [r0, #25]
    44ea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    44ee:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    44f2:	4b47      	ldr	r3, [pc, #284]	; (4610 <TwoWire::force_clock()+0x13c>)
    44f4:	ea4f 1e01 	mov.w	lr, r1, lsl #4
    44f8:	eb03 1201 	add.w	r2, r3, r1, lsl #4
    44fc:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    44fe:	ea4f 1108 	mov.w	r1, r8, lsl #4
    4502:	eb03 1508 	add.w	r5, r3, r8, lsl #4
    4506:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4508:	6852      	ldr	r2, [r2, #4]
    450a:	2415      	movs	r4, #21
    450c:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
    450e:	f853 200e 	ldr.w	r2, [r3, lr]
    4512:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4516:	f853 e00e 	ldr.w	lr, [r3, lr]
    451a:	f8de 2004 	ldr.w	r2, [lr, #4]
    451e:	4332      	orrs	r2, r6
    4520:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4524:	686a      	ldr	r2, [r5, #4]
    4526:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    4528:	585a      	ldr	r2, [r3, r1]
    452a:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    452e:	585a      	ldr	r2, [r3, r1]
    4530:	6853      	ldr	r3, [r2, #4]
    4532:	4303      	orrs	r3, r0
    4534:	6053      	str	r3, [r2, #4]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    4536:	4b37      	ldr	r3, [pc, #220]	; (4614 <TwoWire::force_clock()+0x140>)
    4538:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    453a:	4b37      	ldr	r3, [pc, #220]	; (4618 <TwoWire::force_clock()+0x144>)
    453c:	681a      	ldr	r2, [r3, #0]
    453e:	4b37      	ldr	r3, [pc, #220]	; (461c <TwoWire::force_clock()+0x148>)
    4540:	fba3 3202 	umull	r3, r2, r3, r2
    4544:	0c92      	lsrs	r2, r2, #18
    4546:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    454a:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    454c:	4931      	ldr	r1, [pc, #196]	; (4614 <TwoWire::force_clock()+0x140>)
    454e:	684b      	ldr	r3, [r1, #4]
    4550:	1b1b      	subs	r3, r3, r4
    4552:	429a      	cmp	r2, r3
    4554:	d8fb      	bhi.n	454e <TwoWire::force_clock()+0x7a>
    4556:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
    4558:	492d      	ldr	r1, [pc, #180]	; (4610 <TwoWire::force_clock()+0x13c>)
    455a:	9b01      	ldr	r3, [sp, #4]
    455c:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4560:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
    4564:	4b2b      	ldr	r3, [pc, #172]	; (4614 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4566:	4d2c      	ldr	r5, [pc, #176]	; (4618 <TwoWire::force_clock()+0x144>)
    4568:	4c2c      	ldr	r4, [pc, #176]	; (461c <TwoWire::force_clock()+0x148>)
    456a:	e025      	b.n	45b8 <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
    456c:	680f      	ldr	r7, [r1, #0]
    456e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4572:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4576:	f8d5 a000 	ldr.w	sl, [r5]
    457a:	fba4 9a0a 	umull	r9, sl, r4, sl
    457e:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    4582:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4586:	685f      	ldr	r7, [r3, #4]
    4588:	eba7 090b 	sub.w	r9, r7, fp
    458c:	45ca      	cmp	sl, r9
    458e:	d8fa      	bhi.n	4586 <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
    4590:	680f      	ldr	r7, [r1, #0]
    4592:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4596:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    459a:	f8d5 a000 	ldr.w	sl, [r5]
    459e:	fba4 9a0a 	umull	r9, sl, r4, sl
    45a2:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
    45a6:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    45aa:	685f      	ldr	r7, [r3, #4]
    45ac:	eba7 090b 	sub.w	r9, r7, fp
    45b0:	45ca      	cmp	sl, r9
    45b2:	d8fa      	bhi.n	45aa <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
    45b4:	3a01      	subs	r2, #1
    45b6:	d00e      	beq.n	45d6 <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
    45b8:	f8de 7000 	ldr.w	r7, [lr]
    45bc:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    45c0:	ea19 0f06 	tst.w	r9, r6
    45c4:	d0d2      	beq.n	456c <TwoWire::force_clock()+0x98>
    45c6:	680f      	ldr	r7, [r1, #0]
    45c8:	f8d7 9008 	ldr.w	r9, [r7, #8]
    45cc:	ea19 0f00 	tst.w	r9, r0
    45d0:	d0cc      	beq.n	456c <TwoWire::force_clock()+0x98>
			ret = true;
    45d2:	2001      	movs	r0, #1
    45d4:	e000      	b.n	45d8 <TwoWire::force_clock()+0x104>
	bool ret = false;
    45d6:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    45d8:	4b0d      	ldr	r3, [pc, #52]	; (4610 <TwoWire::force_clock()+0x13c>)
    45da:	9a01      	ldr	r2, [sp, #4]
    45dc:	eb03 1702 	add.w	r7, r3, r2, lsl #4
    45e0:	6879      	ldr	r1, [r7, #4]
    45e2:	f8dc 2014 	ldr.w	r2, [ip, #20]
    45e6:	f89c 4018 	ldrb.w	r4, [ip, #24]
    45ea:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    45ee:	68d2      	ldr	r2, [r2, #12]
    45f0:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    45f2:	eb03 1308 	add.w	r3, r3, r8, lsl #4
    45f6:	685a      	ldr	r2, [r3, #4]
    45f8:	f8dc 3014 	ldr.w	r3, [ip, #20]
    45fc:	f89c 1019 	ldrb.w	r1, [ip, #25]
    4600:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    4604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4606:	6013      	str	r3, [r2, #0]
}
    4608:	b003      	add	sp, #12
    460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    460e:	bf00      	nop
    4610:	200028e4 	.word	0x200028e4
    4614:	e0001000 	.word	0xe0001000
    4618:	20003320 	.word	0x20003320
    461c:	431bde83 	.word	0x431bde83

00004620 <TwoWire::wait_idle()>:
{
    4620:	b538      	push	{r3, r4, r5, lr}
    4622:	4605      	mov	r5, r0
	return systick_millis_count;
    4624:	4b0c      	ldr	r3, [pc, #48]	; (4658 <TwoWire::wait_idle()+0x38>)
    4626:	681c      	ldr	r4, [r3, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    4628:	6902      	ldr	r2, [r0, #16]
    462a:	4619      	mov	r1, r3
    462c:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    462e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    4632:	d00a      	beq.n	464a <TwoWire::wait_idle()+0x2a>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    4634:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    4638:	d107      	bne.n	464a <TwoWire::wait_idle()+0x2a>
    463a:	680b      	ldr	r3, [r1, #0]
	operator unsigned long () const { return millis() - ms; }
    463c:	1b1b      	subs	r3, r3, r4
		if (timeout > 16) {
    463e:	2b10      	cmp	r3, #16
    4640:	d9f4      	bls.n	462c <TwoWire::wait_idle()+0xc>
			if (force_clock()) break;
    4642:	4628      	mov	r0, r5
    4644:	f7ff ff46 	bl	44d4 <TwoWire::force_clock()>
    4648:	b120      	cbz	r0, 4654 <TwoWire::wait_idle()+0x34>
	port->MSR = 0x00007F00; // clear all prior flags
    464a:	692b      	ldr	r3, [r5, #16]
    464c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    4650:	615a      	str	r2, [r3, #20]
	return true;
    4652:	2001      	movs	r0, #1
}
    4654:	bd38      	pop	{r3, r4, r5, pc}
    4656:	bf00      	nop
    4658:	20005388 	.word	0x20005388

0000465c <TwoWire::endTransmission(unsigned char)>:
{
    465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    4660:	f890 612f 	ldrb.w	r6, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    4664:	2e00      	cmp	r6, #0
    4666:	d06e      	beq.n	4746 <TwoWire::endTransmission(unsigned char)+0xea>
    4668:	4605      	mov	r5, r0
    466a:	4689      	mov	r9, r1
	if (!wait_idle()) return 4;
    466c:	f7ff ffd8 	bl	4620 <TwoWire::wait_idle()>
    4670:	2800      	cmp	r0, #0
    4672:	d06b      	beq.n	474c <TwoWire::endTransmission(unsigned char)+0xf0>
    4674:	4b36      	ldr	r3, [pc, #216]	; (4750 <TwoWire::endTransmission(unsigned char)+0xf4>)
    4676:	f8d3 8000 	ldr.w	r8, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    467a:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    467c:	f44f 7a00 	mov.w	sl, #512	; 0x200
    4680:	461f      	mov	r7, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    4682:	e040      	b.n	4706 <TwoWire::endTransmission(unsigned char)+0xaa>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4684:	692b      	ldr	r3, [r5, #16]
    4686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    4688:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    468c:	f012 0f04 	tst.w	r2, #4
    4690:	d00b      	beq.n	46aa <TwoWire::endTransmission(unsigned char)+0x4e>
    4692:	e03a      	b.n	470a <TwoWire::endTransmission(unsigned char)+0xae>
				} else if (tx_index < tx_len) {
    4694:	42a6      	cmp	r6, r4
    4696:	d912      	bls.n	46be <TwoWire::endTransmission(unsigned char)+0x62>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4698:	692a      	ldr	r2, [r5, #16]
    469a:	1929      	adds	r1, r5, r4
    469c:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    46a0:	6611      	str	r1, [r2, #96]	; 0x60
    46a2:	3401      	adds	r4, #1
				fifo_used++;
    46a4:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    46a6:	2b03      	cmp	r3, #3
    46a8:	d82f      	bhi.n	470a <TwoWire::endTransmission(unsigned char)+0xae>
				if (tx_index == 0) {
    46aa:	2c00      	cmp	r4, #0
    46ac:	d1f2      	bne.n	4694 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    46ae:	6929      	ldr	r1, [r5, #16]
    46b0:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    46b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    46b8:	660a      	str	r2, [r1, #96]	; 0x60
					tx_index = 1;
    46ba:	2401      	movs	r4, #1
    46bc:	e7f2      	b.n	46a4 <TwoWire::endTransmission(unsigned char)+0x48>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    46be:	f1b9 0f00 	cmp.w	r9, #0
    46c2:	d002      	beq.n	46ca <TwoWire::endTransmission(unsigned char)+0x6e>
    46c4:	692b      	ldr	r3, [r5, #16]
    46c6:	f8c3 a060 	str.w	sl, [r3, #96]	; 0x60
					tx_index++;
    46ca:	3401      	adds	r4, #1
					break;
    46cc:	e01d      	b.n	470a <TwoWire::endTransmission(unsigned char)+0xae>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    46ce:	690b      	ldr	r3, [r1, #16]
    46d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    46d4:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    46d6:	2004      	movs	r0, #4
    46d8:	e036      	b.n	4748 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    46da:	690b      	ldr	r3, [r1, #16]
    46dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    46e0:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    46e2:	692b      	ldr	r3, [r5, #16]
    46e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    46e8:	661a      	str	r2, [r3, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    46ea:	2002      	movs	r0, #2
    46ec:	e02c      	b.n	4748 <TwoWire::endTransmission(unsigned char)+0xec>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    46ee:	690b      	ldr	r3, [r1, #16]
    46f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    46f4:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    46f6:	692b      	ldr	r3, [r5, #16]
    46f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    46fc:	661a      	str	r2, [r3, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    46fe:	2004      	movs	r0, #4
    4700:	e022      	b.n	4748 <TwoWire::endTransmission(unsigned char)+0xec>
		yield();
    4702:	f00a fd15 	bl	f130 <yield>
		if (tx_index <= tx_len) {
    4706:	42b4      	cmp	r4, r6
    4708:	d9bc      	bls.n	4684 <TwoWire::endTransmission(unsigned char)+0x28>
		uint32_t status = port->MSR; // pg 2884 & 2891
    470a:	6929      	ldr	r1, [r5, #16]
    470c:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    470e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    4712:	d1dc      	bne.n	46ce <TwoWire::endTransmission(unsigned char)+0x72>
		if (status & LPI2C_MSR_NDF) {
    4714:	f413 6f80 	tst.w	r3, #1024	; 0x400
    4718:	d1df      	bne.n	46da <TwoWire::endTransmission(unsigned char)+0x7e>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    471a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    471e:	d1e6      	bne.n	46ee <TwoWire::endTransmission(unsigned char)+0x92>
    4720:	683a      	ldr	r2, [r7, #0]
	operator unsigned long () const { return millis() - ms; }
    4722:	eba2 0208 	sub.w	r2, r2, r8
    4726:	2a32      	cmp	r2, #50	; 0x32
    4728:	d8e1      	bhi.n	46ee <TwoWire::endTransmission(unsigned char)+0x92>
		if (tx_index > tx_len) {
    472a:	42b4      	cmp	r4, r6
    472c:	d9e9      	bls.n	4702 <TwoWire::endTransmission(unsigned char)+0xa6>
			uint32_t tx_fifo = port->MFSR & 0x07;
    472e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4730:	f012 0f07 	tst.w	r2, #7
    4734:	d1e5      	bne.n	4702 <TwoWire::endTransmission(unsigned char)+0xa6>
    4736:	f413 7f00 	tst.w	r3, #512	; 0x200
    473a:	d102      	bne.n	4742 <TwoWire::endTransmission(unsigned char)+0xe6>
    473c:	f1b9 0f00 	cmp.w	r9, #0
    4740:	d1df      	bne.n	4702 <TwoWire::endTransmission(unsigned char)+0xa6>
				return 0;
    4742:	2000      	movs	r0, #0
    4744:	e000      	b.n	4748 <TwoWire::endTransmission(unsigned char)+0xec>
	if (!tx_len) return 4; // no address for transmit
    4746:	2004      	movs	r0, #4
}
    4748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!wait_idle()) return 4;
    474c:	2004      	movs	r0, #4
    474e:	e7fb      	b.n	4748 <TwoWire::endTransmission(unsigned char)+0xec>
    4750:	20005388 	.word	0x20005388

00004754 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4758:	4604      	mov	r4, r0
    475a:	460d      	mov	r5, r1
    475c:	4616      	mov	r6, r2
    475e:	4698      	mov	r8, r3
	if (!wait_idle()) return 4;
    4760:	f7ff ff5e 	bl	4620 <TwoWire::wait_idle()>
    4764:	2800      	cmp	r0, #0
    4766:	f000 8090 	beq.w	488a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
	address = (address & 0x7F) << 1;
    476a:	0069      	lsls	r1, r5, #1
	if (length < 1) length = 1;
    476c:	2e01      	cmp	r6, #1
    476e:	bf38      	it	cc
    4770:	2601      	movcc	r6, #1
	rxBufferIndex = 0;
    4772:	2500      	movs	r5, #0
    4774:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
	rxBufferLength = 0;
    4778:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    477c:	4b44      	ldr	r3, [pc, #272]	; (4890 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    477e:	f8d3 9000 	ldr.w	r9, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4782:	b2c9      	uxtb	r1, r1
    4784:	f240 4701 	movw	r7, #1025	; 0x401
    4788:	430f      	orrs	r7, r1
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    478a:	e059      	b.n	4840 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    478c:	6923      	ldr	r3, [r4, #16]
    478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    4790:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    4794:	f013 0f04 	tst.w	r3, #4
    4798:	d154      	bne.n	4844 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
    479a:	462b      	mov	r3, r5
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    479c:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    47a0:	1e70      	subs	r0, r6, #1
    47a2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    47a6:	4429      	add	r1, r5
    47a8:	e010      	b.n	47cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
				} else if (tx_state == 1) {
    47aa:	2b01      	cmp	r3, #1
    47ac:	d006      	beq.n	47bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    47ae:	f1b8 0f00 	cmp.w	r8, #0
    47b2:	d005      	beq.n	47c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
    47b4:	6922      	ldr	r2, [r4, #16]
    47b6:	f8c2 c060 	str.w	ip, [r2, #96]	; 0x60
    47ba:	e001      	b.n	47c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    47bc:	6922      	ldr	r2, [r4, #16]
    47be:	6610      	str	r0, [r2, #96]	; 0x60
				tx_state++;
    47c0:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
    47c2:	1aca      	subs	r2, r1, r3
    47c4:	2a03      	cmp	r2, #3
    47c6:	d806      	bhi.n	47d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
    47c8:	2b02      	cmp	r3, #2
    47ca:	d804      	bhi.n	47d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x82>
				if (tx_state == 0) {
    47cc:	2b00      	cmp	r3, #0
    47ce:	d1ec      	bne.n	47aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x56>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    47d0:	6922      	ldr	r2, [r4, #16]
    47d2:	6617      	str	r7, [r2, #96]	; 0x60
    47d4:	e7f4      	b.n	47c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6c>
				tx_state++;
    47d6:	461d      	mov	r5, r3
    47d8:	e034      	b.n	4844 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf0>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    47da:	f8d4 c010 	ldr.w	ip, [r4, #16]
    47de:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
    47e2:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    47e6:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    47ea:	d02f      	beq.n	484c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
				rxBuffer[rxBufferLength++] = port->MRDR;
    47ec:	f8dc 0070 	ldr.w	r0, [ip, #112]	; 0x70
    47f0:	460b      	mov	r3, r1
    47f2:	3101      	adds	r1, #1
    47f4:	b2c9      	uxtb	r1, r1
    47f6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    47fa:	4423      	add	r3, r4
    47fc:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    47fe:	3a01      	subs	r2, #1
    4800:	d024      	beq.n	484c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
    4802:	2987      	cmp	r1, #135	; 0x87
    4804:	d9f2      	bls.n	47ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x98>
    4806:	e021      	b.n	484c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4808:	690b      	ldr	r3, [r1, #16]
    480a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    480e:	610b      	str	r3, [r1, #16]
			break;
    4810:	e007      	b.n	4822 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4812:	690b      	ldr	r3, [r1, #16]
    4814:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    4818:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    481a:	6923      	ldr	r3, [r4, #16]
    481c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4820:	661a      	str	r2, [r3, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4822:	6923      	ldr	r3, [r4, #16]
    4824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    4826:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
    482a:	d003      	beq.n	4834 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe0>
    482c:	691a      	ldr	r2, [r3, #16]
    482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4832:	611a      	str	r2, [r3, #16]
	return rxBufferLength;
    4834:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
    4838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		yield();
    483c:	f00a fc78 	bl	f130 <yield>
		if (tx_state < 3) {
    4840:	2d02      	cmp	r5, #2
    4842:	d9a3      	bls.n	478c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
		if (rxBufferLength < sizeof(rxBuffer)) {
    4844:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
    4848:	2987      	cmp	r1, #135	; 0x87
    484a:	d9c6      	bls.n	47da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
		uint32_t status = port->MSR; // pg 2884 & 2891
    484c:	6921      	ldr	r1, [r4, #16]
    484e:	694a      	ldr	r2, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    4850:	f412 6f00 	tst.w	r2, #2048	; 0x800
    4854:	d1d8      	bne.n	4808 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4856:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    485a:	d1da      	bne.n	4812 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
    485c:	4b0c      	ldr	r3, [pc, #48]	; (4890 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>)
    485e:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
    4860:	eba3 0309 	sub.w	r3, r3, r9
    4864:	2b32      	cmp	r3, #50	; 0x32
    4866:	d8d4      	bhi.n	4812 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbe>
		if (rxBufferLength >= length && tx_state >= 3) {
    4868:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    486c:	42b3      	cmp	r3, r6
    486e:	d3e5      	bcc.n	483c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4870:	2d02      	cmp	r5, #2
    4872:	d9e3      	bls.n	483c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4874:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4876:	f013 0f07 	tst.w	r3, #7
    487a:	d1df      	bne.n	483c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    487c:	f412 7f00 	tst.w	r2, #512	; 0x200
    4880:	d1cf      	bne.n	4822 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
    4882:	f1b8 0f00 	cmp.w	r8, #0
    4886:	d1d9      	bne.n	483c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe8>
    4888:	e7cb      	b.n	4822 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xce>
	if (!wait_idle()) return 4;
    488a:	2004      	movs	r0, #4
    488c:	e7d4      	b.n	4838 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
    488e:	bf00      	nop
    4890:	20005388 	.word	0x20005388

00004894 <TwoWire::isr()>:
{
    4894:	b538      	push	{r3, r4, r5, lr}
    4896:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    4898:	6903      	ldr	r3, [r0, #16]
    489a:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    489e:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    48a2:	d001      	beq.n	48a8 <TwoWire::isr()+0x14>
    48a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    48a8:	f015 0f02 	tst.w	r5, #2
    48ac:	d012      	beq.n	48d4 <TwoWire::isr()+0x40>
		int rx = port->SRDR;
    48ae:	6923      	ldr	r3, [r4, #16]
    48b0:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    48b4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    48b8:	d008      	beq.n	48cc <TwoWire::isr()+0x38>
			rxBufferIndex = 0;
    48ba:	2300      	movs	r3, #0
    48bc:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    48c0:	1c59      	adds	r1, r3, #1
    48c2:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    48c6:	4423      	add	r3, r4
    48c8:	769a      	strb	r2, [r3, #26]
    48ca:	e003      	b.n	48d4 <TwoWire::isr()+0x40>
		if (rxBufferLength < BUFFER_LENGTH) {
    48cc:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    48d0:	2b87      	cmp	r3, #135	; 0x87
    48d2:	d9f5      	bls.n	48c0 <TwoWire::isr()+0x2c>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    48d4:	f015 0f01 	tst.w	r5, #1
    48d8:	d01b      	beq.n	4912 <TwoWire::isr()+0x7e>
		if (!transmitting) {
    48da:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
    48de:	b94b      	cbnz	r3, 48f4 <TwoWire::isr()+0x60>
			if (user_onRequest != nullptr) {
    48e0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    48e4:	b103      	cbz	r3, 48e8 <TwoWire::isr()+0x54>
				(*user_onRequest)();
    48e6:	4798      	blx	r3
			txBufferIndex = 0;
    48e8:	2300      	movs	r3, #0
    48ea:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    48ee:	2301      	movs	r3, #1
    48f0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    48f4:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
    48f8:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    48fc:	429a      	cmp	r2, r3
    48fe:	d91e      	bls.n	493e <TwoWire::isr()+0xaa>
			port->STDR = txBuffer[txBufferIndex++];
    4900:	1c5a      	adds	r2, r3, #1
    4902:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    4906:	6922      	ldr	r2, [r4, #16]
    4908:	4423      	add	r3, r4
    490a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
    490e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    4912:	f415 7f00 	tst.w	r5, #512	; 0x200
    4916:	d011      	beq.n	493c <TwoWire::isr()+0xa8>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    4918:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    491c:	b118      	cbz	r0, 4926 <TwoWire::isr()+0x92>
    491e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    4922:	b103      	cbz	r3, 4926 <TwoWire::isr()+0x92>
			(*user_onReceive)(rxBufferLength);
    4924:	4798      	blx	r3
		rxBufferIndex = 0;
    4926:	2300      	movs	r3, #0
    4928:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
    492c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
    4930:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
    4934:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
    4938:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    493c:	bd38      	pop	{r3, r4, r5, pc}
			port->STDR = 0;
    493e:	6923      	ldr	r3, [r4, #16]
    4940:	2200      	movs	r2, #0
    4942:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    4946:	e7e4      	b.n	4912 <TwoWire::isr()+0x7e>

00004948 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    4948:	b508      	push	{r3, lr}
    494a:	4802      	ldr	r0, [pc, #8]	; (4954 <lpi2c1_isr()+0xc>)
    494c:	f7ff ffa2 	bl	4894 <TwoWire::isr()>
    4950:	bd08      	pop	{r3, pc}
    4952:	bf00      	nop
    4954:	20004784 	.word	0x20004784

00004958 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    4958:	b508      	push	{r3, lr}
    495a:	4802      	ldr	r0, [pc, #8]	; (4964 <lpi2c3_isr()+0xc>)
    495c:	f7ff ff9a 	bl	4894 <TwoWire::isr()>
    4960:	bd08      	pop	{r3, pc}
    4962:	bf00      	nop
    4964:	200048c4 	.word	0x200048c4

00004968 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    4968:	b508      	push	{r3, lr}
    496a:	4802      	ldr	r0, [pc, #8]	; (4974 <lpi2c4_isr()+0xc>)
    496c:	f7ff ff92 	bl	4894 <TwoWire::isr()>
    4970:	bd08      	pop	{r3, pc}
    4972:	bf00      	nop
    4974:	20004a04 	.word	0x20004a04

00004978 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    4978:	6903      	ldr	r3, [r0, #16]
    497a:	2200      	movs	r2, #0
    497c:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    497e:	4b1d      	ldr	r3, [pc, #116]	; (49f4 <TwoWire::setClock(unsigned long)+0x7c>)
    4980:	4299      	cmp	r1, r3
    4982:	d81a      	bhi.n	49ba <TwoWire::setClock(unsigned long)+0x42>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    4984:	6903      	ldr	r3, [r0, #16]
    4986:	4a1c      	ldr	r2, [pc, #112]	; (49f8 <TwoWire::setClock(unsigned long)+0x80>)
    4988:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    498a:	6903      	ldr	r3, [r0, #16]
    498c:	2201      	movs	r2, #1
    498e:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    4990:	6903      	ldr	r3, [r0, #16]
    4992:	4a1a      	ldr	r2, [pc, #104]	; (49fc <TwoWire::setClock(unsigned long)+0x84>)
    4994:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4996:	6903      	ldr	r3, [r0, #16]
    4998:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
    499c:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    499e:	6903      	ldr	r3, [r0, #16]
    49a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    49a2:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    49a4:	6903      	ldr	r3, [r0, #16]
    49a6:	2200      	movs	r2, #0
    49a8:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    49aa:	6903      	ldr	r3, [r0, #16]
    49ac:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    49b0:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    49b2:	6903      	ldr	r3, [r0, #16]
    49b4:	2201      	movs	r2, #1
    49b6:	611a      	str	r2, [r3, #16]
}
    49b8:	4770      	bx	lr
	} else if (frequency < 1000000) {
    49ba:	4b11      	ldr	r3, [pc, #68]	; (4a00 <TwoWire::setClock(unsigned long)+0x88>)
    49bc:	4299      	cmp	r1, r3
    49be:	d80c      	bhi.n	49da <TwoWire::setClock(unsigned long)+0x62>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    49c0:	6903      	ldr	r3, [r0, #16]
    49c2:	4a10      	ldr	r2, [pc, #64]	; (4a04 <TwoWire::setClock(unsigned long)+0x8c>)
    49c4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    49c6:	6903      	ldr	r3, [r0, #16]
    49c8:	2200      	movs	r2, #0
    49ca:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    49cc:	6903      	ldr	r3, [r0, #16]
    49ce:	4a0e      	ldr	r2, [pc, #56]	; (4a08 <TwoWire::setClock(unsigned long)+0x90>)
    49d0:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    49d2:	6903      	ldr	r3, [r0, #16]
    49d4:	4a0d      	ldr	r2, [pc, #52]	; (4a0c <TwoWire::setClock(unsigned long)+0x94>)
    49d6:	62da      	str	r2, [r3, #44]	; 0x2c
    49d8:	e7e1      	b.n	499e <TwoWire::setClock(unsigned long)+0x26>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    49da:	6903      	ldr	r3, [r0, #16]
    49dc:	4a0c      	ldr	r2, [pc, #48]	; (4a10 <TwoWire::setClock(unsigned long)+0x98>)
    49de:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    49e0:	6903      	ldr	r3, [r0, #16]
    49e2:	2200      	movs	r2, #0
    49e4:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    49e6:	6903      	ldr	r3, [r0, #16]
    49e8:	4a0a      	ldr	r2, [pc, #40]	; (4a14 <TwoWire::setClock(unsigned long)+0x9c>)
    49ea:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    49ec:	6903      	ldr	r3, [r0, #16]
    49ee:	4a07      	ldr	r2, [pc, #28]	; (4a0c <TwoWire::setClock(unsigned long)+0x94>)
    49f0:	62da      	str	r2, [r3, #44]	; 0x2c
    49f2:	e7d4      	b.n	499e <TwoWire::setClock(unsigned long)+0x26>
    49f4:	00061a7f 	.word	0x00061a7f
    49f8:	1928373b 	.word	0x1928373b
    49fc:	05050bb8 	.word	0x05050bb8
    4a00:	000f423f 	.word	0x000f423f
    4a04:	0c121a1c 	.word	0x0c121a1c
    4a08:	02020e10 	.word	0x02020e10
    4a0c:	00057f00 	.word	0x00057f00
    4a10:	0407090a 	.word	0x0407090a
    4a14:	01010960 	.word	0x01010960

00004a18 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    4a18:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    4a1a:	4c09      	ldr	r4, [pc, #36]	; (4a40 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    4a1c:	4622      	mov	r2, r4
    4a1e:	4909      	ldr	r1, [pc, #36]	; (4a44 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    4a20:	4809      	ldr	r0, [pc, #36]	; (4a48 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    4a22:	f7ff fd21 	bl	4468 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    4a26:	f104 0250 	add.w	r2, r4, #80	; 0x50
    4a2a:	4908      	ldr	r1, [pc, #32]	; (4a4c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    4a2c:	4808      	ldr	r0, [pc, #32]	; (4a50 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    4a2e:	f7ff fd1b 	bl	4468 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    4a32:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    4a36:	4907      	ldr	r1, [pc, #28]	; (4a54 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    4a38:	4807      	ldr	r0, [pc, #28]	; (4a58 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    4a3a:	f7ff fd15 	bl	4468 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    4a3e:	bd10      	pop	{r4, pc}
    4a40:	60001fa8 	.word	0x60001fa8
    4a44:	403f0000 	.word	0x403f0000
    4a48:	20004784 	.word	0x20004784
    4a4c:	403f8000 	.word	0x403f8000
    4a50:	200048c4 	.word	0x200048c4
    4a54:	403fc000 	.word	0x403fc000
    4a58:	20004a04 	.word	0x20004a04

00004a5c <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4a5c:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    4a5e:	4b2e      	ldr	r3, [pc, #184]	; (4b18 <_spi_dma_rxISR0()+0xbc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    4a60:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4a62:	7908      	ldrb	r0, [r1, #4]
    4a64:	4a2d      	ldr	r2, [pc, #180]	; (4b1c <_spi_dma_rxISR0()+0xc0>)
    4a66:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4a68:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4a6a:	7900      	ldrb	r0, [r0, #4]
    4a6c:	7710      	strb	r0, [r2, #28]
    4a6e:	7909      	ldrb	r1, [r1, #4]
    4a70:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    4a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a74:	2b00      	cmp	r3, #0
    4a76:	d03a      	beq.n	4aee <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4a7c:	d30b      	bcc.n	4a96 <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    4a7e:	4a28      	ldr	r2, [pc, #160]	; (4b20 <_spi_dma_rxISR0()+0xc4>)
    4a80:	441a      	add	r2, r3
    4a82:	4b25      	ldr	r3, [pc, #148]	; (4b18 <_spi_dma_rxISR0()+0xbc>)
    4a84:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4a88:	7911      	ldrb	r1, [r2, #4]
    4a8a:	4a24      	ldr	r2, [pc, #144]	; (4b1c <_spi_dma_rxISR0()+0xc0>)
    4a8c:	76d1      	strb	r1, [r2, #27]
    4a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a90:	791b      	ldrb	r3, [r3, #4]
    4a92:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4a94:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4a96:	4a20      	ldr	r2, [pc, #128]	; (4b18 <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4a98:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4a9a:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4a9c:	8bd1      	ldrh	r1, [r2, #30]
    4a9e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4aa2:	d114      	bne.n	4ace <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    4aa4:	b29b      	uxth	r3, r3
    4aa6:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4aa8:	8bd3      	ldrh	r3, [r2, #30]
    4aaa:	b29b      	uxth	r3, r3
    4aac:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4aae:	4b1a      	ldr	r3, [pc, #104]	; (4b18 <_spi_dma_rxISR0()+0xbc>)
    4ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4ab4:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4ab6:	8bd9      	ldrh	r1, [r3, #30]
    4ab8:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4abc:	d10f      	bne.n	4ade <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    4abe:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4ac2:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4ac4:	8bda      	ldrh	r2, [r3, #30]
    4ac6:	b292      	uxth	r2, r2
    4ac8:	82da      	strh	r2, [r3, #22]
    4aca:	2200      	movs	r2, #0
    4acc:	e7d9      	b.n	4a82 <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4ace:	8bd1      	ldrh	r1, [r2, #30]
    4ad0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4ad8:	430b      	orrs	r3, r1
    4ada:	83d3      	strh	r3, [r2, #30]
    4adc:	e7e4      	b.n	4aa8 <_spi_dma_rxISR0()+0x4c>
    4ade:	8bd9      	ldrh	r1, [r3, #30]
    4ae0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4ae8:	430a      	orrs	r2, r1
    4aea:	83da      	strh	r2, [r3, #30]
    4aec:	e7ea      	b.n	4ac4 <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4aee:	4a0a      	ldr	r2, [pc, #40]	; (4b18 <_spi_dma_rxISR0()+0xbc>)
    4af0:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4af2:	210f      	movs	r1, #15
    4af4:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4af6:	2100      	movs	r1, #0
    4af8:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4afa:	f240 3001 	movw	r0, #769	; 0x301
    4afe:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4b00:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4b04:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4b06:	2303      	movs	r3, #3
    4b08:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4b0c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4b0e:	6803      	ldr	r3, [r0, #0]
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	460a      	mov	r2, r1
    4b14:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    4b16:	e7bd      	b.n	4a94 <_spi_dma_rxISR0()+0x38>
    4b18:	20004634 	.word	0x20004634
    4b1c:	400e8000 	.word	0x400e8000
    4b20:	ffff8001 	.word	0xffff8001

00004b24 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4b24:	b508      	push	{r3, lr}
	_dmaRX->clearInterrupt();
    4b26:	4b2e      	ldr	r3, [pc, #184]	; (4be0 <_spi_dma_rxISR1()+0xbc>)
		DMA_CINT = channel;
    4b28:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4b2a:	7908      	ldrb	r0, [r1, #4]
    4b2c:	4a2d      	ldr	r2, [pc, #180]	; (4be4 <_spi_dma_rxISR1()+0xc0>)
    4b2e:	77d0      	strb	r0, [r2, #31]
		DMA_CDNE = channel;
    4b30:	6c58      	ldr	r0, [r3, #68]	; 0x44
    4b32:	7900      	ldrb	r0, [r0, #4]
    4b34:	7710      	strb	r0, [r2, #28]
    4b36:	7909      	ldrb	r1, [r1, #4]
    4b38:	7711      	strb	r1, [r2, #28]
	if (_dma_count_remaining) {
    4b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d03a      	beq.n	4bb6 <_spi_dma_rxISR1()+0x92>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    4b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4b44:	d30b      	bcc.n	4b5e <_spi_dma_rxISR1()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    4b46:	4a28      	ldr	r2, [pc, #160]	; (4be8 <_spi_dma_rxISR1()+0xc4>)
    4b48:	441a      	add	r2, r3
    4b4a:	4b25      	ldr	r3, [pc, #148]	; (4be0 <_spi_dma_rxISR1()+0xbc>)
    4b4c:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    4b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4b50:	7911      	ldrb	r1, [r2, #4]
    4b52:	4a24      	ldr	r2, [pc, #144]	; (4be4 <_spi_dma_rxISR1()+0xc0>)
    4b54:	76d1      	strb	r1, [r2, #27]
    4b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b58:	791b      	ldrb	r3, [r3, #4]
    4b5a:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4b5c:	bd08      	pop	{r3, pc}
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    4b5e:	4a20      	ldr	r2, [pc, #128]	; (4be0 <_spi_dma_rxISR1()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4b60:	6c52      	ldr	r2, [r2, #68]	; 0x44
    4b62:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4b64:	8bd1      	ldrh	r1, [r2, #30]
    4b66:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4b6a:	d114      	bne.n	4b96 <_spi_dma_rxISR1()+0x72>
		tcd->BITER = len & 0x7fff;
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    4b70:	8bd3      	ldrh	r3, [r2, #30]
    4b72:	b29b      	uxth	r3, r3
    4b74:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4b76:	4b1a      	ldr	r3, [pc, #104]	; (4be0 <_spi_dma_rxISR1()+0xbc>)
    4b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    4b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4b7c:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    4b7e:	8bd9      	ldrh	r1, [r3, #30]
    4b80:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    4b84:	d10f      	bne.n	4ba6 <_spi_dma_rxISR1()+0x82>
		tcd->BITER = len & 0x7fff;
    4b86:	f3c2 020e 	ubfx	r2, r2, #0, #15
    4b8a:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    4b8c:	8bda      	ldrh	r2, [r3, #30]
    4b8e:	b292      	uxth	r2, r2
    4b90:	82da      	strh	r2, [r3, #22]
    4b92:	2200      	movs	r2, #0
    4b94:	e7d9      	b.n	4b4a <_spi_dma_rxISR1()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    4b96:	8bd1      	ldrh	r1, [r2, #30]
    4b98:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4ba0:	430b      	orrs	r3, r1
    4ba2:	83d3      	strh	r3, [r2, #30]
    4ba4:	e7e4      	b.n	4b70 <_spi_dma_rxISR1()+0x4c>
    4ba6:	8bd9      	ldrh	r1, [r3, #30]
    4ba8:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    4bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
    4bb0:	430a      	orrs	r2, r1
    4bb2:	83da      	strh	r2, [r3, #30]
    4bb4:	e7ea      	b.n	4b8c <_spi_dma_rxISR1()+0x68>
    4bb6:	4a0a      	ldr	r2, [pc, #40]	; (4be0 <_spi_dma_rxISR1()+0xbc>)
    4bb8:	6813      	ldr	r3, [r2, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    4bba:	210f      	movs	r1, #15
    4bbc:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    4bbe:	2100      	movs	r1, #0
    4bc0:	61d9      	str	r1, [r3, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    4bc2:	f240 3001 	movw	r0, #769	; 0x301
    4bc6:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    4bc8:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    4bcc:	6158      	str	r0, [r3, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    4bce:	2303      	movs	r3, #3
    4bd0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    4bd4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4bd6:	6803      	ldr	r3, [r0, #0]
    4bd8:	681b      	ldr	r3, [r3, #0]
    4bda:	460a      	mov	r2, r1
    4bdc:	4798      	blx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    4bde:	e7bd      	b.n	4b5c <_spi_dma_rxISR1()+0x38>
    4be0:	20004684 	.word	0x20004684
    4be4:	400e8000 	.word	0x400e8000
    4be8:	ffff8001 	.word	0xffff8001

00004bec <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    4bec:	6001      	str	r1, [r0, #0]
    4bee:	6042      	str	r2, [r0, #4]
    4bf0:	2300      	movs	r3, #0
    4bf2:	6083      	str	r3, [r0, #8]
    4bf4:	60c3      	str	r3, [r0, #12]
    4bf6:	7403      	strb	r3, [r0, #16]
    4bf8:	7443      	strb	r3, [r0, #17]
    4bfa:	7483      	strb	r3, [r0, #18]
    4bfc:	74c3      	strb	r3, [r0, #19]
    4bfe:	6143      	str	r3, [r0, #20]
    4c00:	6183      	str	r3, [r0, #24]
    4c02:	61c3      	str	r3, [r0, #28]
    4c04:	6203      	str	r3, [r0, #32]
    4c06:	6243      	str	r3, [r0, #36]	; 0x24
    4c08:	6283      	str	r3, [r0, #40]	; 0x28
    4c0a:	62c3      	str	r3, [r0, #44]	; 0x2c
    4c0c:	6303      	str	r3, [r0, #48]	; 0x30
    4c0e:	6343      	str	r3, [r0, #52]	; 0x34
    4c10:	6383      	str	r3, [r0, #56]	; 0x38
    4c12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    4c16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    4c1a:	6403      	str	r3, [r0, #64]	; 0x40
    4c1c:	6443      	str	r3, [r0, #68]	; 0x44
    4c1e:	6483      	str	r3, [r0, #72]	; 0x48
    4c20:	64c3      	str	r3, [r0, #76]	; 0x4c
	}
    4c22:	4770      	bx	lr

00004c24 <SPIClass::begin()>:
{
    4c24:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4c26:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    4c28:	680a      	ldr	r2, [r1, #0]
    4c2a:	6813      	ldr	r3, [r2, #0]
    4c2c:	6849      	ldr	r1, [r1, #4]
    4c2e:	ea23 0301 	bic.w	r3, r3, r1
    4c32:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4c34:	498f      	ldr	r1, [pc, #572]	; (4e74 <SPIClass::begin()+0x250>)
    4c36:	698b      	ldr	r3, [r1, #24]
    4c38:	4a8f      	ldr	r2, [pc, #572]	; (4e78 <SPIClass::begin()+0x254>)
    4c3a:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    4c3c:	4b8f      	ldr	r3, [pc, #572]	; (4e7c <SPIClass::begin()+0x258>)
    4c3e:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    4c40:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    4c42:	4b8f      	ldr	r3, [pc, #572]	; (4e80 <SPIClass::begin()+0x25c>)
    4c44:	6842      	ldr	r2, [r0, #4]
    4c46:	7c01      	ldrb	r1, [r0, #16]
    4c48:	440a      	add	r2, r1
    4c4a:	7c12      	ldrb	r2, [r2, #16]
    4c4c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    4c50:	6891      	ldr	r1, [r2, #8]
    4c52:	22b8      	movs	r2, #184	; 0xb8
    4c54:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    4c56:	6841      	ldr	r1, [r0, #4]
    4c58:	7c44      	ldrb	r4, [r0, #17]
    4c5a:	4421      	add	r1, r4
    4c5c:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4c60:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4c64:	6889      	ldr	r1, [r1, #8]
    4c66:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    4c68:	6841      	ldr	r1, [r0, #4]
    4c6a:	7c84      	ldrb	r4, [r0, #18]
    4c6c:	4421      	add	r1, r4
    4c6e:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    4c72:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4c76:	6889      	ldr	r1, [r1, #8]
    4c78:	600a      	str	r2, [r1, #0]
    4c7a:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    4c7c:	6821      	ldr	r1, [r4, #0]
    4c7e:	680a      	ldr	r2, [r1, #0]
    4c80:	6864      	ldr	r4, [r4, #4]
    4c82:	4322      	orrs	r2, r4
    4c84:	600a      	str	r2, [r1, #0]
    4c86:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    4c88:	7c04      	ldrb	r4, [r0, #16]
    4c8a:	1911      	adds	r1, r2, r4
    4c8c:	7c09      	ldrb	r1, [r1, #16]
    4c8e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4c92:	6849      	ldr	r1, [r1, #4]
    4c94:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    4c98:	6952      	ldr	r2, [r2, #20]
    4c9a:	600a      	str	r2, [r1, #0]
    4c9c:	6844      	ldr	r4, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    4c9e:	7c42      	ldrb	r2, [r0, #17]
    4ca0:	18a1      	adds	r1, r4, r2
    4ca2:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    4ca6:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4caa:	6849      	ldr	r1, [r1, #4]
    4cac:	320a      	adds	r2, #10
    4cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    4cb2:	600a      	str	r2, [r1, #0]
    4cb4:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    4cb6:	7c81      	ldrb	r1, [r0, #18]
    4cb8:	1854      	adds	r4, r2, r1
    4cba:	f894 4038 	ldrb.w	r4, [r4, #56]	; 0x38
    4cbe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4cc2:	685b      	ldr	r3, [r3, #4]
    4cc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4cc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    4cca:	601a      	str	r2, [r3, #0]
    4ccc:	6843      	ldr	r3, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    4cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    4cd0:	7c81      	ldrb	r1, [r0, #18]
    4cd2:	440b      	add	r3, r1
    4cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    4cd8:	6013      	str	r3, [r2, #0]
    4cda:	6843      	ldr	r3, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    4cdc:	6a1a      	ldr	r2, [r3, #32]
    4cde:	7c01      	ldrb	r1, [r0, #16]
    4ce0:	440b      	add	r3, r1
    4ce2:	7f1b      	ldrb	r3, [r3, #28]
    4ce4:	6013      	str	r3, [r2, #0]
    4ce6:	6843      	ldr	r3, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    4ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    4cea:	7c41      	ldrb	r1, [r0, #17]
    4cec:	440b      	add	r3, r1
    4cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    4cf2:	6013      	str	r3, [r2, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4cf4:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    4cf6:	2202      	movs	r2, #2
    4cf8:	611a      	str	r2, [r3, #16]
    4cfa:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    4cfc:	220f      	movs	r2, #15
    4cfe:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    4d00:	7cc3      	ldrb	r3, [r0, #19]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d042      	beq.n	4d8c <SPIClass::begin()+0x168>
			__disable_irq();
    4d06:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4d08:	7cc3      	ldrb	r3, [r0, #19]
    4d0a:	f013 0f01 	tst.w	r3, #1
    4d0e:	d008      	beq.n	4d22 <SPIClass::begin()+0xfe>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    4d10:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d14:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    4d18:	6941      	ldr	r1, [r0, #20]
    4d1a:	400b      	ands	r3, r1
    4d1c:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    4d1e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    4d22:	7cc3      	ldrb	r3, [r0, #19]
    4d24:	f013 0f02 	tst.w	r3, #2
    4d28:	d008      	beq.n	4d3c <SPIClass::begin()+0x118>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    4d2a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d2e:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    4d32:	6981      	ldr	r1, [r0, #24]
    4d34:	400b      	ands	r3, r1
    4d36:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    4d38:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    4d3c:	7cc3      	ldrb	r3, [r0, #19]
    4d3e:	f013 0f04 	tst.w	r3, #4
    4d42:	d008      	beq.n	4d56 <SPIClass::begin()+0x132>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4d44:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d48:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    4d4c:	69c1      	ldr	r1, [r0, #28]
    4d4e:	400b      	ands	r3, r1
    4d50:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    4d52:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    4d56:	7cc3      	ldrb	r3, [r0, #19]
    4d58:	f013 0f08 	tst.w	r3, #8
    4d5c:	d008      	beq.n	4d70 <SPIClass::begin()+0x14c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    4d5e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d62:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    4d66:	6a01      	ldr	r1, [r0, #32]
    4d68:	400b      	ands	r3, r1
    4d6a:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    4d6c:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    4d70:	7cc3      	ldrb	r3, [r0, #19]
    4d72:	f013 0f10 	tst.w	r3, #16
    4d76:	d008      	beq.n	4d8a <SPIClass::begin()+0x166>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    4d78:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4d7c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    4d80:	6a41      	ldr	r1, [r0, #36]	; 0x24
    4d82:	400b      	ands	r3, r1
    4d84:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    4d86:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    4d8a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    4d8c:	6882      	ldr	r2, [r0, #8]
    4d8e:	4b3d      	ldr	r3, [pc, #244]	; (4e84 <SPIClass::begin()+0x260>)
    4d90:	429a      	cmp	r2, r3
    4d92:	d029      	beq.n	4de8 <SPIClass::begin()+0x1c4>
		    _clock = settings.clock();
    4d94:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    4d96:	4b37      	ldr	r3, [pc, #220]	; (4e74 <SPIClass::begin()+0x250>)
    4d98:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    4d9a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    4d9e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    4da2:	3301      	adds	r3, #1
    4da4:	4a38      	ldr	r2, [pc, #224]	; (4e88 <SPIClass::begin()+0x264>)
    4da6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    4daa:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    4dae:	4b37      	ldr	r3, [pc, #220]	; (4e8c <SPIClass::begin()+0x268>)
    4db0:	429a      	cmp	r2, r3
    4db2:	d95d      	bls.n	4e70 <SPIClass::begin()+0x24c>
			d = _clock ? clkhz/_clock : clkhz;
    4db4:	4b36      	ldr	r3, [pc, #216]	; (4e90 <SPIClass::begin()+0x26c>)
    4db6:	fba3 1302 	umull	r1, r3, r3, r2
    4dba:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    4dbc:	fbb2 f2f3 	udiv	r2, r2, r3
    4dc0:	4930      	ldr	r1, [pc, #192]	; (4e84 <SPIClass::begin()+0x260>)
    4dc2:	428a      	cmp	r2, r1
    4dc4:	bf88      	it	hi
    4dc6:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    4dc8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4dcc:	d34c      	bcc.n	4e68 <SPIClass::begin()+0x244>
    4dce:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    4dd2:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    4dd4:	0859      	lsrs	r1, r3, #1
    4dd6:	020a      	lsls	r2, r1, #8
    4dd8:	b292      	uxth	r2, r2
    4dda:	0409      	lsls	r1, r1, #16
    4ddc:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    4de0:	430a      	orrs	r2, r1
    4de2:	b2db      	uxtb	r3, r3
    4de4:	4313      	orrs	r3, r2
    4de6:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4de8:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    4dea:	2200      	movs	r2, #0
    4dec:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4dee:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    4df0:	2203      	movs	r2, #3
    4df2:	625a      	str	r2, [r3, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4df4:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    4df6:	68c2      	ldr	r2, [r0, #12]
    4df8:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4dfa:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    4dfc:	2207      	movs	r2, #7
    4dfe:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4e00:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    4e02:	2201      	movs	r2, #1
    4e04:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    4e06:	7cc3      	ldrb	r3, [r0, #19]
    4e08:	b35b      	cbz	r3, 4e62 <SPIClass::begin()+0x23e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    4e0a:	f013 0f01 	tst.w	r3, #1
    4e0e:	d004      	beq.n	4e1a <SPIClass::begin()+0x1f6>
    4e10:	6a82      	ldr	r2, [r0, #40]	; 0x28
    4e12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    4e1a:	7cc3      	ldrb	r3, [r0, #19]
    4e1c:	f013 0f02 	tst.w	r3, #2
    4e20:	d004      	beq.n	4e2c <SPIClass::begin()+0x208>
    4e22:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4e24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e28:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    4e2c:	7cc3      	ldrb	r3, [r0, #19]
    4e2e:	f013 0f04 	tst.w	r3, #4
    4e32:	d004      	beq.n	4e3e <SPIClass::begin()+0x21a>
    4e34:	6b02      	ldr	r2, [r0, #48]	; 0x30
    4e36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e3a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    4e3e:	7cc3      	ldrb	r3, [r0, #19]
    4e40:	f013 0f08 	tst.w	r3, #8
    4e44:	d004      	beq.n	4e50 <SPIClass::begin()+0x22c>
    4e46:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4e48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e4c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    4e50:	7cc3      	ldrb	r3, [r0, #19]
    4e52:	f013 0f10 	tst.w	r3, #16
    4e56:	d004      	beq.n	4e62 <SPIClass::begin()+0x23e>
    4e58:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4e5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    4e62:	f85d 4b04 	ldr.w	r4, [sp], #4
    4e66:	4770      	bx	lr
			if (d > 2) {
    4e68:	2b02      	cmp	r3, #2
    4e6a:	d8b2      	bhi.n	4dd2 <SPIClass::begin()+0x1ae>
				div =0;
    4e6c:	2300      	movs	r3, #0
    4e6e:	e7b1      	b.n	4dd4 <SPIClass::begin()+0x1b0>
    4e70:	2300      	movs	r3, #0
    4e72:	e7af      	b.n	4dd4 <SPIClass::begin()+0x1b0>
    4e74:	400fc000 	.word	0x400fc000
    4e78:	e3ffffcf 	.word	0xe3ffffcf
    4e7c:	08000010 	.word	0x08000010
    4e80:	200028e4 	.word	0x200028e4
    4e84:	003d0900 	.word	0x003d0900
    4e88:	2000262c 	.word	0x2000262c
    4e8c:	003d08ff 	.word	0x003d08ff
    4e90:	431bde83 	.word	0x431bde83

00004e94 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    4e94:	2b00      	cmp	r3, #0
    4e96:	d03b      	beq.n	4f10 <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    4e98:	b470      	push	{r4, r5, r6}
    4e9a:	460e      	mov	r6, r1
    4e9c:	4611      	mov	r1, r2
    4e9e:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4ea0:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4ea2:	f240 2201 	movw	r2, #513	; 0x201
    4ea6:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    4ea8:	462c      	mov	r4, r5
    4eaa:	e016      	b.n	4eda <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4eac:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    4eb0:	e019      	b.n	4ee6 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    4eb2:	3c01      	subs	r4, #1
    4eb4:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4eb6:	695b      	ldr	r3, [r3, #20]
    4eb8:	f013 0f01 	tst.w	r3, #1
    4ebc:	d10c      	bne.n	4ed8 <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    4ebe:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4ec2:	f012 0f02 	tst.w	r2, #2
    4ec6:	d1f5      	bne.n	4eb4 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4eca:	2900      	cmp	r1, #0
    4ecc:	d0f1      	beq.n	4eb2 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    4ece:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4ed0:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    4ed4:	4611      	mov	r1, r2
    4ed6:	e7ec      	b.n	4eb2 <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    4ed8:	b155      	cbz	r5, 4ef0 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4eda:	2e00      	cmp	r6, #0
    4edc:	d0e6      	beq.n	4eac <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    4ede:	4633      	mov	r3, r6
    4ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
    4ee4:	461e      	mov	r6, r3
    4ee6:	6803      	ldr	r3, [r0, #0]
    4ee8:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    4eea:	3d01      	subs	r5, #1
    4eec:	e7e7      	b.n	4ebe <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    4eee:	3c01      	subs	r4, #1
	while (count_read) {
    4ef0:	b164      	cbz	r4, 4f0c <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    4ef2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    4ef6:	f012 0f02 	tst.w	r2, #2
    4efa:	d1f9      	bne.n	4ef0 <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4efe:	2900      	cmp	r1, #0
    4f00:	d0f5      	beq.n	4eee <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    4f02:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4f04:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    4f08:	4611      	mov	r1, r2
    4f0a:	e7f0      	b.n	4eee <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    4f0c:	bc70      	pop	{r4, r5, r6}
    4f0e:	4770      	bx	lr
    4f10:	4770      	bx	lr

00004f12 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4f12:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4f14:	681a      	ldr	r2, [r3, #0]
    4f16:	6812      	ldr	r2, [r2, #0]
    4f18:	685b      	ldr	r3, [r3, #4]
    4f1a:	421a      	tst	r2, r3
    4f1c:	d100      	bne.n	4f20 <SPIClass::end()+0xe>
    4f1e:	4770      	bx	lr
void SPIClass::end() {
    4f20:	b510      	push	{r4, lr}
    4f22:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4f24:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    4f26:	2200      	movs	r2, #0
    4f28:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4f2a:	6843      	ldr	r3, [r0, #4]
    4f2c:	7c02      	ldrb	r2, [r0, #16]
    4f2e:	4413      	add	r3, r2
    4f30:	2105      	movs	r1, #5
    4f32:	7c18      	ldrb	r0, [r3, #16]
    4f34:	f008 fa56 	bl	d3e4 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4f38:	6863      	ldr	r3, [r4, #4]
    4f3a:	7c62      	ldrb	r2, [r4, #17]
    4f3c:	4413      	add	r3, r2
    4f3e:	2105      	movs	r1, #5
    4f40:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    4f44:	f008 fa4e 	bl	d3e4 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4f48:	6863      	ldr	r3, [r4, #4]
    4f4a:	7ca2      	ldrb	r2, [r4, #18]
    4f4c:	4413      	add	r3, r2
    4f4e:	2105      	movs	r1, #5
    4f50:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    4f54:	f008 fa46 	bl	d3e4 <pinMode>
}
    4f58:	bd10      	pop	{r4, pc}
	...

00004f5c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    4f5c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    4f5e:	4a08      	ldr	r2, [pc, #32]	; (4f80 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    4f60:	4908      	ldr	r1, [pc, #32]	; (4f84 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    4f62:	4809      	ldr	r0, [pc, #36]	; (4f88 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    4f64:	f7ff fe42 	bl	4bec <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    4f68:	4a08      	ldr	r2, [pc, #32]	; (4f8c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    4f6a:	4909      	ldr	r1, [pc, #36]	; (4f90 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    4f6c:	4809      	ldr	r0, [pc, #36]	; (4f94 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    4f6e:	f7ff fe3d 	bl	4bec <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    4f72:	4a09      	ldr	r2, [pc, #36]	; (4f98 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    4f74:	4909      	ldr	r1, [pc, #36]	; (4f9c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    4f76:	480a      	ldr	r0, [pc, #40]	; (4fa0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    4f78:	f7ff fe38 	bl	4bec <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    4f7c:	bd08      	pop	{r3, pc}
    4f7e:	bf00      	nop
    4f80:	20002348 	.word	0x20002348
    4f84:	403a0000 	.word	0x403a0000
    4f88:	20004634 	.word	0x20004634
    4f8c:	200022d8 	.word	0x200022d8
    4f90:	4039c000 	.word	0x4039c000
    4f94:	20004684 	.word	0x20004684
    4f98:	20002268 	.word	0x20002268
    4f9c:	40394000 	.word	0x40394000
    4fa0:	200046d4 	.word	0x200046d4

00004fa4 <PWMServo::PWMServo()>:
PWMServo::PWMServo() : pin(255), angle(NO_ANGLE) {}
    4fa4:	22ff      	movs	r2, #255	; 0xff
    4fa6:	7002      	strb	r2, [r0, #0]
    4fa8:	7042      	strb	r2, [r0, #1]
    4faa:	4770      	bx	lr

00004fac <PWMServo::attach(int, int, int)>:
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    4fac:	2936      	cmp	r1, #54	; 0x36
    4fae:	d840      	bhi.n	5032 <PWMServo::attach(int, int, int)+0x86>
{
    4fb0:	b570      	push	{r4, r5, r6, lr}
    4fb2:	4604      	mov	r4, r0
    4fb4:	4616      	mov	r6, r2
    4fb6:	461d      	mov	r5, r3
	if (!digitalPinHasPWM(pinArg)) return 0;
    4fb8:	290f      	cmp	r1, #15
    4fba:	dd0b      	ble.n	4fd4 <PWMServo::attach(int, int, int)+0x28>
    4fbc:	2912      	cmp	r1, #18
    4fbe:	d009      	beq.n	4fd4 <PWMServo::attach(int, int, int)+0x28>
    4fc0:	f1a1 0213 	sub.w	r2, r1, #19
    4fc4:	2a0a      	cmp	r2, #10
    4fc6:	d829      	bhi.n	501c <PWMServo::attach(int, int, int)+0x70>
    4fc8:	f240 6379 	movw	r3, #1657	; 0x679
    4fcc:	40d3      	lsrs	r3, r2
    4fce:	f013 0f01 	tst.w	r3, #1
    4fd2:	d021      	beq.n	5018 <PWMServo::attach(int, int, int)+0x6c>
	pin = pinArg;
    4fd4:	b2c8      	uxtb	r0, r1
    4fd6:	7020      	strb	r0, [r4, #0]
	analogWriteFrequency(pin, 50);
    4fd8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 503c <PWMServo::attach(int, int, int)+0x90>
    4fdc:	f008 fe7c 	bl	dcd8 <analogWriteFrequency>
	min16 = min >> 4;
    4fe0:	1132      	asrs	r2, r6, #4
    4fe2:	70a2      	strb	r2, [r4, #2]
	max16 = max >> 4;
    4fe4:	112b      	asrs	r3, r5, #4
    4fe6:	70e3      	strb	r3, [r4, #3]
	angle = NO_ANGLE;
    4fe8:	23ff      	movs	r3, #255	; 0xff
    4fea:	7063      	strb	r3, [r4, #1]
	digitalWrite(pin, LOW);
    4fec:	2100      	movs	r1, #0
    4fee:	7820      	ldrb	r0, [r4, #0]
    4ff0:	f008 f9c0 	bl	d374 <digitalWrite>
	pinMode(pin, OUTPUT);
    4ff4:	2101      	movs	r1, #1
    4ff6:	7820      	ldrb	r0, [r4, #0]
    4ff8:	f008 f9f4 	bl	d3e4 <pinMode>
	attachedpins[pin >> 5] |= (1 << (pin & 31));
    4ffc:	7823      	ldrb	r3, [r4, #0]
    4ffe:	0959      	lsrs	r1, r3, #5
    5000:	4a0f      	ldr	r2, [pc, #60]	; (5040 <PWMServo::attach(int, int, int)+0x94>)
    5002:	f003 031f 	and.w	r3, r3, #31
    5006:	2001      	movs	r0, #1
    5008:	fa00 f303 	lsl.w	r3, r0, r3
    500c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    5010:	4323      	orrs	r3, r4
    5012:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    5016:	bd70      	pop	{r4, r5, r6, pc}
	if (!digitalPinHasPWM(pinArg)) return 0;
    5018:	2000      	movs	r0, #0
    501a:	e7fc      	b.n	5016 <PWMServo::attach(int, int, int)+0x6a>
    501c:	f1a1 0221 	sub.w	r2, r1, #33	; 0x21
    5020:	2a15      	cmp	r2, #21
    5022:	d808      	bhi.n	5036 <PWMServo::attach(int, int, int)+0x8a>
    5024:	4b07      	ldr	r3, [pc, #28]	; (5044 <PWMServo::attach(int, int, int)+0x98>)
    5026:	40d3      	lsrs	r3, r2
    5028:	f013 0f01 	tst.w	r3, #1
    502c:	d1d2      	bne.n	4fd4 <PWMServo::attach(int, int, int)+0x28>
    502e:	2000      	movs	r0, #0
    5030:	e7f1      	b.n	5016 <PWMServo::attach(int, int, int)+0x6a>
	if (pinArg < 0 || pinArg >= NUM_DIGITAL_PINS) return 0;
    5032:	2000      	movs	r0, #0
}
    5034:	4770      	bx	lr
	if (!digitalPinHasPWM(pinArg)) return 0;
    5036:	2000      	movs	r0, #0
    5038:	e7ed      	b.n	5016 <PWMServo::attach(int, int, int)+0x6a>
    503a:	bf00      	nop
    503c:	42480000 	.word	0x42480000
    5040:	20004c9c 	.word	0x20004c9c
    5044:	00247e19 	.word	0x00247e19

00005048 <PWMServo::write(int)>:
	if (pin >= NUM_DIGITAL_PINS) return;
    5048:	7803      	ldrb	r3, [r0, #0]
    504a:	2b36      	cmp	r3, #54	; 0x36
    504c:	d900      	bls.n	5050 <PWMServo::write(int)+0x8>
    504e:	4770      	bx	lr
{
    5050:	b570      	push	{r4, r5, r6, lr}
    5052:	4604      	mov	r4, r0
	if (angleArg < 0) angleArg = 0;
    5054:	29b4      	cmp	r1, #180	; 0xb4
    5056:	bfa8      	it	ge
    5058:	21b4      	movge	r1, #180	; 0xb4
    505a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	angle = angleArg;
    505e:	7041      	strb	r1, [r0, #1]
	uint32_t us = (((max16 - min16) * 46603 * angle) >> 11) + (min16 << 12); // us*256
    5060:	7883      	ldrb	r3, [r0, #2]
    5062:	78c2      	ldrb	r2, [r0, #3]
    5064:	1ad2      	subs	r2, r2, r3
    5066:	fb01 f202 	mul.w	r2, r1, r2
    506a:	f24b 610b 	movw	r1, #46603	; 0xb60b
    506e:	fb01 f202 	mul.w	r2, r1, r2
    5072:	031d      	lsls	r5, r3, #12
    5074:	eb05 25e2 	add.w	r5, r5, r2, asr #11
	uint32_t duty = (us * 3355) >> 22;
    5078:	f640 531b 	movw	r3, #3355	; 0xd1b
    507c:	fb03 f505 	mul.w	r5, r3, r5
    5080:	0dad      	lsrs	r5, r5, #22
	noInterrupts();
    5082:	b672      	cpsid	i
static inline uint32_t analogWriteResolution(uint32_t bits) { return analogWriteRes(bits); }
    5084:	200c      	movs	r0, #12
    5086:	f008 feff 	bl	de88 <analogWriteRes>
    508a:	4606      	mov	r6, r0
	analogWrite(pin, duty);
    508c:	4629      	mov	r1, r5
    508e:	7820      	ldrb	r0, [r4, #0]
    5090:	f008 fdca 	bl	dc28 <analogWrite>
    5094:	4630      	mov	r0, r6
    5096:	f008 fef7 	bl	de88 <analogWriteRes>
	interrupts();
    509a:	b662      	cpsie	i
}
    509c:	bd70      	pop	{r4, r5, r6, pc}

0000509e <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    509e:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    50a2:	b1e3      	cbz	r3, 50de <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    50a4:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    50a8:	b163      	cbz	r3, 50c4 <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    50aa:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    50ac:	3801      	subs	r0, #1
    50ae:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    50b0:	7999      	ldrb	r1, [r3, #6]
    50b2:	f44f 7300 	mov.w	r3, #512	; 0x200
    50b6:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    50b8:	b29b      	uxth	r3, r3
    50ba:	fba3 0100 	umull	r0, r1, r3, r0
    50be:	fb03 1102 	mla	r1, r3, r2, r1
    50c2:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    50c4:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    50c8:	b12b      	cbz	r3, 50d6 <SDClass::totalSize()+0x38>
    50ca:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    50ce:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    50d0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    50d4:	e7f1      	b.n	50ba <SDClass::totalSize()+0x1c>
    50d6:	2000      	movs	r0, #0
    50d8:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    50da:	4603      	mov	r3, r0
    50dc:	e7ed      	b.n	50ba <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    50de:	2000      	movs	r0, #0
    50e0:	4601      	mov	r1, r0
	}
    50e2:	4770      	bx	lr

000050e4 <SDClass::~SDClass()>:
class SDClass : public FS
    50e4:	4770      	bx	lr
	...

000050e8 <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    50e8:	b530      	push	{r4, r5, lr}
    50ea:	b083      	sub	sp, #12
    50ec:	4605      	mov	r5, r0
    50ee:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    50f0:	f008 fed8 	bl	dea4 <rtc_get>
	if (now < 315532800) { // before 1980
    50f4:	4b1c      	ldr	r3, [pc, #112]	; (5168 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    50f6:	4298      	cmp	r0, r3
    50f8:	d804      	bhi.n	5104 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    50fa:	2300      	movs	r3, #0
    50fc:	802b      	strh	r3, [r5, #0]
		*time = 0;
    50fe:	8023      	strh	r3, [r4, #0]
}
    5100:	b003      	add	sp, #12
    5102:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    5104:	4669      	mov	r1, sp
    5106:	f007 fd6b 	bl	cbe0 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    510a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    510e:	3301      	adds	r3, #1
    5110:	b2db      	uxtb	r3, r3
    5112:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5116:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    511a:	3a50      	subs	r2, #80	; 0x50
    511c:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    511e:	291f      	cmp	r1, #31
    5120:	bf98      	it	ls
    5122:	2b0c      	cmpls	r3, #12
    5124:	d801      	bhi.n	512a <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    5126:	2a7f      	cmp	r2, #127	; 0x7f
    5128:	d910      	bls.n	514c <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    512a:	2100      	movs	r1, #0
    512c:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    512e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    5132:	f89d 3001 	ldrb.w	r3, [sp, #1]
    5136:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    513a:	2a17      	cmp	r2, #23
    513c:	bf98      	it	ls
    513e:	2b3b      	cmpls	r3, #59	; 0x3b
    5140:	d801      	bhi.n	5146 <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    5142:	293b      	cmp	r1, #59	; 0x3b
    5144:	d908      	bls.n	5158 <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    5146:	2300      	movs	r3, #0
    5148:	8023      	strh	r3, [r4, #0]
}
    514a:	e7d9      	b.n	5100 <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    514c:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    5150:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    5154:	b289      	uxth	r1, r1
    5156:	e7e9      	b.n	512c <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    5158:	015b      	lsls	r3, r3, #5
    515a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    515e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    5162:	b29b      	uxth	r3, r3
    5164:	e7f0      	b.n	5148 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    5166:	bf00      	nop
    5168:	12cea5ff 	.word	0x12cea5ff

0000516c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    516c:	b500      	push	{lr}
    516e:	b08f      	sub	sp, #60	; 0x3c
    5170:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    5172:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    5176:	b161      	cbz	r1, 5192 <SDClass::exists(char const*)+0x26>
    5178:	2300      	movs	r3, #0
    517a:	f88d 3000 	strb.w	r3, [sp]
    517e:	f88d 3001 	strb.w	r3, [sp, #1]
    5182:	f88d 3002 	strb.w	r3, [sp, #2]
    5186:	4668      	mov	r0, sp
    5188:	f002 ff37 	bl	7ffa <FatFile::open(FatVolume*, char const*, int)>
	}
    518c:	b00f      	add	sp, #60	; 0x3c
    518e:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    5192:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    5196:	b151      	cbz	r1, 51ae <SDClass::exists(char const*)+0x42>
    5198:	2300      	movs	r3, #0
    519a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    519e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    51a2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    51a6:	4668      	mov	r0, sp
    51a8:	f000 ff83 	bl	60b2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    51ac:	e7ee      	b.n	518c <SDClass::exists(char const*)+0x20>
    51ae:	2000      	movs	r0, #0
    51b0:	e7ec      	b.n	518c <SDClass::exists(char const*)+0x20>

000051b2 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    51b2:	b500      	push	{lr}
    51b4:	b08f      	sub	sp, #60	; 0x3c
    51b6:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    51b8:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    51bc:	b189      	cbz	r1, 51e2 <SDClass::rmdir(char const*)+0x30>
    51be:	2300      	movs	r3, #0
    51c0:	f88d 3000 	strb.w	r3, [sp]
    51c4:	f88d 3001 	strb.w	r3, [sp, #1]
    51c8:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    51cc:	4668      	mov	r0, sp
    51ce:	f002 ff14 	bl	7ffa <FatFile::open(FatVolume*, char const*, int)>
    51d2:	b910      	cbnz	r0, 51da <SDClass::rmdir(char const*)+0x28>
	}
    51d4:	b00f      	add	sp, #60	; 0x3c
    51d6:	f85d fb04 	ldr.w	pc, [sp], #4
    51da:	4668      	mov	r0, sp
    51dc:	f002 fd52 	bl	7c84 <FatFile::rmdir()>
    51e0:	e7f8      	b.n	51d4 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    51e2:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    51e6:	b179      	cbz	r1, 5208 <SDClass::rmdir(char const*)+0x56>
    51e8:	2300      	movs	r3, #0
    51ea:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    51ee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    51f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    51f6:	4668      	mov	r0, sp
    51f8:	f000 ff5b 	bl	60b2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    51fc:	2800      	cmp	r0, #0
    51fe:	d0e9      	beq.n	51d4 <SDClass::rmdir(char const*)+0x22>
    5200:	4668      	mov	r0, sp
    5202:	f001 f83d 	bl	6280 <ExFatFile::rmdir()>
    5206:	e7e5      	b.n	51d4 <SDClass::rmdir(char const*)+0x22>
    5208:	2000      	movs	r0, #0
    520a:	e7e3      	b.n	51d4 <SDClass::rmdir(char const*)+0x22>

0000520c <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    520c:	b500      	push	{lr}
    520e:	b08f      	sub	sp, #60	; 0x3c
    5210:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    5212:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    5216:	b191      	cbz	r1, 523e <SDClass::remove(char const*)+0x32>
    5218:	2300      	movs	r3, #0
    521a:	f88d 3000 	strb.w	r3, [sp]
    521e:	f88d 3001 	strb.w	r3, [sp, #1]
    5222:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5226:	2301      	movs	r3, #1
    5228:	4668      	mov	r0, sp
    522a:	f002 fee6 	bl	7ffa <FatFile::open(FatVolume*, char const*, int)>
    522e:	b910      	cbnz	r0, 5236 <SDClass::remove(char const*)+0x2a>
	}
    5230:	b00f      	add	sp, #60	; 0x3c
    5232:	f85d fb04 	ldr.w	pc, [sp], #4
    5236:	4668      	mov	r0, sp
    5238:	f003 fec4 	bl	8fc4 <FatFile::remove()>
    523c:	e7f8      	b.n	5230 <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    523e:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    5242:	b181      	cbz	r1, 5266 <SDClass::remove(char const*)+0x5a>
    5244:	2300      	movs	r3, #0
    5246:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    524a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    524e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5252:	2301      	movs	r3, #1
    5254:	4668      	mov	r0, sp
    5256:	f000 ff2c 	bl	60b2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    525a:	2800      	cmp	r0, #0
    525c:	d0e8      	beq.n	5230 <SDClass::remove(char const*)+0x24>
    525e:	4668      	mov	r0, sp
    5260:	f000 ffb6 	bl	61d0 <ExFatFile::remove()>
    5264:	e7e4      	b.n	5230 <SDClass::remove(char const*)+0x24>
    5266:	2000      	movs	r0, #0
    5268:	e7e2      	b.n	5230 <SDClass::remove(char const*)+0x24>

0000526a <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    526a:	b530      	push	{r4, r5, lr}
    526c:	b08f      	sub	sp, #60	; 0x3c
    526e:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    5270:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    5274:	b1b4      	cbz	r4, 52a4 <SDClass::rename(char const*, char const*)+0x3a>
    5276:	2300      	movs	r3, #0
    5278:	f88d 3000 	strb.w	r3, [sp]
    527c:	f88d 3001 	strb.w	r3, [sp, #1]
    5280:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    5284:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5288:	460a      	mov	r2, r1
    528a:	4621      	mov	r1, r4
    528c:	4668      	mov	r0, sp
    528e:	f002 fe4f 	bl	7f30 <FatFile::open(FatFile*, char const*, int)>
    5292:	b908      	cbnz	r0, 5298 <SDClass::rename(char const*, char const*)+0x2e>
	}
    5294:	b00f      	add	sp, #60	; 0x3c
    5296:	bd30      	pop	{r4, r5, pc}
    5298:	462a      	mov	r2, r5
    529a:	4621      	mov	r1, r4
    529c:	4668      	mov	r0, sp
    529e:	f003 f80c 	bl	82ba <FatFile::rename(FatFile*, char const*)>
    52a2:	e7f7      	b.n	5294 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    52a4:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    52a8:	b1ac      	cbz	r4, 52d6 <SDClass::rename(char const*, char const*)+0x6c>
    52aa:	2300      	movs	r3, #0
    52ac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    52b0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    52b4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    52b8:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    52bc:	460a      	mov	r2, r1
    52be:	4621      	mov	r1, r4
    52c0:	4668      	mov	r0, sp
    52c2:	f000 fe83 	bl	5fcc <ExFatFile::open(ExFatFile*, char const*, int)>
    52c6:	2800      	cmp	r0, #0
    52c8:	d0e4      	beq.n	5294 <SDClass::rename(char const*, char const*)+0x2a>
    52ca:	462a      	mov	r2, r5
    52cc:	4621      	mov	r1, r4
    52ce:	4668      	mov	r0, sp
    52d0:	f001 f9bb 	bl	664a <ExFatFile::rename(ExFatFile*, char const*)>
    52d4:	e7de      	b.n	5294 <SDClass::rename(char const*, char const*)+0x2a>
    52d6:	2000      	movs	r0, #0
    52d8:	e7dc      	b.n	5294 <SDClass::rename(char const*, char const*)+0x2a>

000052da <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    52da:	b500      	push	{lr}
    52dc:	b08f      	sub	sp, #60	; 0x3c
    52de:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    52e0:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    52e4:	b179      	cbz	r1, 5306 <SDClass::mkdir(char const*)+0x2c>
    52e6:	2300      	movs	r3, #0
    52e8:	f88d 3000 	strb.w	r3, [sp]
    52ec:	f88d 3001 	strb.w	r3, [sp, #1]
    52f0:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    52f4:	2301      	movs	r3, #1
    52f6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    52fa:	4668      	mov	r0, sp
    52fc:	f002 ff74 	bl	81e8 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    5300:	b00f      	add	sp, #60	; 0x3c
    5302:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5306:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    530a:	b169      	cbz	r1, 5328 <SDClass::mkdir(char const*)+0x4e>
    530c:	2300      	movs	r3, #0
    530e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    5312:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    5316:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    531a:	2301      	movs	r3, #1
    531c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5320:	4668      	mov	r0, sp
    5322:	f001 f91c 	bl	655e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5326:	e7eb      	b.n	5300 <SDClass::mkdir(char const*)+0x26>
    5328:	2000      	movs	r0, #0
    532a:	e7e9      	b.n	5300 <SDClass::mkdir(char const*)+0x26>

0000532c <SDClass::open(char const*, unsigned char)>:
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    532c:	b570      	push	{r4, r5, r6, lr}
    532e:	b094      	sub	sp, #80	; 0x50
    5330:	4605      	mov	r5, r0
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    5332:	2b01      	cmp	r3, #1
    5334:	d036      	beq.n	53a4 <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    5336:	2b02      	cmp	r3, #2
    5338:	f240 2302 	movw	r3, #514	; 0x202
    533c:	bf18      	it	ne
    533e:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    5340:	3104      	adds	r1, #4
    5342:	4668      	mov	r0, sp
    5344:	f004 fe98 	bl	a078 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5348:	9b12      	ldr	r3, [sp, #72]	; 0x48
    534a:	2b00      	cmp	r3, #0
    534c:	d02d      	beq.n	53aa <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    534e:	205c      	movs	r0, #92	; 0x5c
    5350:	f008 f928 	bl	d5a4 <operator new(unsigned int)>
    5354:	4604      	mov	r4, r0
class FileImpl {
    5356:	2600      	movs	r6, #0
    5358:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    535a:	4b1a      	ldr	r3, [pc, #104]	; (53c4 <SDClass::open(char const*, unsigned char)+0x98>)
    535c:	6003      	str	r3, [r0, #0]
class Print
    535e:	9b01      	ldr	r3, [sp, #4]
    5360:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    5362:	4b19      	ldr	r3, [pc, #100]	; (53c8 <SDClass::open(char const*, unsigned char)+0x9c>)
    5364:	6083      	str	r3, [r0, #8]
    5366:	9b02      	ldr	r3, [sp, #8]
    5368:	6103      	str	r3, [r0, #16]
    536a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    536e:	7503      	strb	r3, [r0, #20]
    5370:	a904      	add	r1, sp, #16
    5372:	3018      	adds	r0, #24
    5374:	f004 fd49 	bl	9e0a <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5378:	4b14      	ldr	r3, [pc, #80]	; (53cc <SDClass::open(char const*, unsigned char)+0xa0>)
    537a:	60a3      	str	r3, [r4, #8]
    537c:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    537e:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5384:	60ab      	str	r3, [r5, #8]
    5386:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    5388:	4b11      	ldr	r3, [pc, #68]	; (53d0 <SDClass::open(char const*, unsigned char)+0xa4>)
    538a:	602b      	str	r3, [r5, #0]
		f = file;
    538c:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    538e:	6863      	ldr	r3, [r4, #4]
    5390:	3301      	adds	r3, #1
    5392:	6063      	str	r3, [r4, #4]
    5394:	4b0f      	ldr	r3, [pc, #60]	; (53d4 <SDClass::open(char const*, unsigned char)+0xa8>)
    5396:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    5398:	a804      	add	r0, sp, #16
    539a:	f004 fd77 	bl	9e8c <FsBaseFile::close()>
	}
    539e:	4628      	mov	r0, r5
    53a0:	b014      	add	sp, #80	; 0x50
    53a2:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    53a4:	f244 2302 	movw	r3, #16898	; 0x4202
    53a8:	e7ca      	b.n	5340 <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    53aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    53ac:	2b00      	cmp	r3, #0
    53ae:	d1ce      	bne.n	534e <SDClass::open(char const*, unsigned char)+0x22>
    53b0:	606b      	str	r3, [r5, #4]
    53b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    53b6:	60aa      	str	r2, [r5, #8]
    53b8:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    53ba:	4a05      	ldr	r2, [pc, #20]	; (53d0 <SDClass::open(char const*, unsigned char)+0xa4>)
    53bc:	602a      	str	r2, [r5, #0]
    53be:	612b      	str	r3, [r5, #16]
    53c0:	e7e8      	b.n	5394 <SDClass::open(char const*, unsigned char)+0x68>
    53c2:	bf00      	nop
    53c4:	200024f0 	.word	0x200024f0
    53c8:	2000254c 	.word	0x2000254c
    53cc:	200024cc 	.word	0x200024cc
    53d0:	200024a0 	.word	0x200024a0
    53d4:	200023c0 	.word	0x200023c0

000053d8 <SDClass::usedSize()>:
	uint64_t usedSize() {
    53d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    53da:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    53de:	2b00      	cmp	r3, #0
    53e0:	d04d      	beq.n	547e <SDClass::usedSize()+0xa6>
    53e2:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    53e4:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    53e8:	b1f3      	cbz	r3, 5428 <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    53ea:	69de      	ldr	r6, [r3, #28]
    53ec:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    53ee:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    53f2:	2800      	cmp	r0, #0
    53f4:	d05a      	beq.n	54ac <SDClass::usedSize()+0xd4>
    53f6:	6803      	ldr	r3, [r0, #0]
    53f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    53fa:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    53fc:	4607      	mov	r7, r0
    53fe:	b140      	cbz	r0, 5412 <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5400:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5404:	2800      	cmp	r0, #0
    5406:	d032      	beq.n	546e <SDClass::usedSize()+0x96>
    5408:	6803      	ldr	r3, [r0, #0]
    540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    540c:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    540e:	b1b8      	cbz	r0, 5440 <SDClass::usedSize()+0x68>
    5410:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    5412:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    5416:	2800      	cmp	r0, #0
    5418:	d14b      	bne.n	54b2 <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    541a:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    541e:	b388      	cbz	r0, 5484 <SDClass::usedSize()+0xac>
    5420:	f002 f96b 	bl	76fa <ExFatPartition::freeClusterCount()>
    5424:	4605      	mov	r5, r0
    5426:	e047      	b.n	54b8 <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    5428:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    542c:	2b00      	cmp	r3, #0
    542e:	d055      	beq.n	54dc <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    5430:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5434:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5438:	2800      	cmp	r0, #0
    543a:	d1dc      	bne.n	53f6 <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    543c:	2700      	movs	r7, #0
    543e:	e7ec      	b.n	541a <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    5440:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    5444:	b1a8      	cbz	r0, 5472 <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    5446:	6803      	ldr	r3, [r0, #0]
    5448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    544a:	2101      	movs	r1, #1
    544c:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    544e:	4607      	mov	r7, r0
    5450:	2800      	cmp	r0, #0
    5452:	d1de      	bne.n	5412 <SDClass::usedSize()+0x3a>
      return 0;
    5454:	2500      	movs	r5, #0
    5456:	e031      	b.n	54bc <SDClass::usedSize()+0xe4>
    if (m_card) {
    5458:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    545c:	b158      	cbz	r0, 5476 <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    545e:	6803      	ldr	r3, [r0, #0]
    5460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5462:	2100      	movs	r1, #0
    5464:	4798      	blx	r3
      return 0;
    5466:	2800      	cmp	r0, #0
    5468:	bf08      	it	eq
    546a:	2500      	moveq	r5, #0
    546c:	e026      	b.n	54bc <SDClass::usedSize()+0xe4>
      return 0;
    546e:	2500      	movs	r5, #0
    5470:	e024      	b.n	54bc <SDClass::usedSize()+0xe4>
    5472:	2500      	movs	r5, #0
    5474:	e022      	b.n	54bc <SDClass::usedSize()+0xe4>
      return 0;
    5476:	2500      	movs	r5, #0
    5478:	e020      	b.n	54bc <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    547a:	2300      	movs	r3, #0
    547c:	e029      	b.n	54d2 <SDClass::usedSize()+0xfa>
    547e:	2000      	movs	r0, #0
    5480:	4601      	mov	r1, r0
    5482:	e02a      	b.n	54da <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    5484:	b967      	cbnz	r7, 54a0 <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    5486:	2300      	movs	r3, #0
    5488:	4630      	mov	r0, r6
    548a:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    548c:	e021      	b.n	54d2 <SDClass::usedSize()+0xfa>
    548e:	4630      	mov	r0, r6
    5490:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5492:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    5496:	2b00      	cmp	r3, #0
    5498:	d0ef      	beq.n	547a <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    549a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    549e:	e018      	b.n	54d2 <SDClass::usedSize()+0xfa>
    if (m_card) {
    54a0:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    54a4:	2800      	cmp	r0, #0
    54a6:	d0f2      	beq.n	548e <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    54a8:	2500      	movs	r5, #0
    54aa:	e7d8      	b.n	545e <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    54ac:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    54b0:	2700      	movs	r7, #0
    54b2:	f004 fb9b 	bl	9bec <FatPartition::freeClusterCount()>
    54b6:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    54b8:	2f00      	cmp	r7, #0
    54ba:	d1cd      	bne.n	5458 <SDClass::usedSize()+0x80>
    54bc:	1b70      	subs	r0, r6, r5
    54be:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    54c0:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    54c4:	2b00      	cmp	r3, #0
    54c6:	d0e4      	beq.n	5492 <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    54c8:	7999      	ldrb	r1, [r3, #6]
    54ca:	f44f 7300 	mov.w	r3, #512	; 0x200
    54ce:	408b      	lsls	r3, r1
    54d0:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    54d2:	fba3 0100 	umull	r0, r1, r3, r0
    54d6:	fb03 1102 	mla	r1, r3, r2, r1
	}
    54da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    54dc:	2600      	movs	r6, #0
    54de:	e7a9      	b.n	5434 <SDClass::usedSize()+0x5c>

000054e0 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    54e0:	b530      	push	{r4, r5, lr}
    54e2:	b085      	sub	sp, #20
    54e4:	4604      	mov	r4, r0
    54e6:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    54e8:	4832      	ldr	r0, [pc, #200]	; (55b4 <SDClass::begin(unsigned char)+0xd4>)
    54ea:	f006 fc49 	bl	bd80 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    54ee:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    54f2:	2dfe      	cmp	r5, #254	; 0xfe
    54f4:	d004      	beq.n	5500 <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    54f6:	2d36      	cmp	r5, #54	; 0x36
    54f8:	d930      	bls.n	555c <SDClass::begin(unsigned char)+0x7c>
	return false;
    54fa:	2000      	movs	r0, #0
}
    54fc:	b005      	add	sp, #20
    54fe:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    5500:	23ff      	movs	r3, #255	; 0xff
    5502:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    5506:	2100      	movs	r1, #0
    5508:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    550c:	f204 4594 	addw	r5, r4, #1172	; 0x494
    5510:	4628      	mov	r0, r5
    5512:	f005 ff9d 	bl	b450 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    5516:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    551a:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5520:	4628      	mov	r0, r5
    5522:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5524:	b158      	cbz	r0, 553e <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    5526:	2300      	movs	r3, #0
    5528:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    552c:	232e      	movs	r3, #46	; 0x2e
    552e:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5532:	2103      	movs	r1, #3
    5534:	202e      	movs	r0, #46	; 0x2e
    5536:	f007 ff55 	bl	d3e4 <pinMode>
		return ret;
    553a:	2000      	movs	r0, #0
    553c:	e7de      	b.n	54fc <SDClass::begin(unsigned char)+0x1c>
    553e:	2301      	movs	r3, #1
    5540:	461a      	mov	r2, r3
    5542:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    5546:	1d20      	adds	r0, r4, #4
    5548:	f004 fd20 	bl	9f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    554c:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    5550:	232e      	movs	r3, #46	; 0x2e
    5552:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5556:	2800      	cmp	r0, #0
    5558:	d1d0      	bne.n	54fc <SDClass::begin(unsigned char)+0x1c>
    555a:	e7ea      	b.n	5532 <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    555c:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    5560:	2300      	movs	r3, #0
    5562:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    5566:	4a14      	ldr	r2, [pc, #80]	; (55b8 <SDClass::begin(unsigned char)+0xd8>)
    5568:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    556c:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    5570:	f88d 5004 	strb.w	r5, [sp, #4]
    5574:	f88d 3005 	strb.w	r3, [sp, #5]
    5578:	9202      	str	r2, [sp, #8]
    557a:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    557c:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    5580:	ab04      	add	r3, sp, #16
    5582:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    5586:	4628      	mov	r0, r5
    5588:	f005 f9d4 	bl	a934 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    558c:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    5590:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    5594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5596:	4628      	mov	r0, r5
    5598:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    559a:	b118      	cbz	r0, 55a4 <SDClass::begin(unsigned char)+0xc4>
    559c:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    559e:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    55a2:	e7ab      	b.n	54fc <SDClass::begin(unsigned char)+0x1c>
    55a4:	2301      	movs	r3, #1
    55a6:	461a      	mov	r2, r3
    55a8:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    55ac:	1d20      	adds	r0, r4, #4
    55ae:	f004 fced 	bl	9f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    55b2:	e7f4      	b.n	559e <SDClass::begin(unsigned char)+0xbe>
    55b4:	000050e9 	.word	0x000050e9
    55b8:	017d7840 	.word	0x017d7840

000055bc <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    55bc:	b530      	push	{r4, r5, lr}
    55be:	b085      	sub	sp, #20
    55c0:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    55c2:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    55c6:	2bff      	cmp	r3, #255	; 0xff
    55c8:	d01e      	beq.n	5608 <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    55ca:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    55ce:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    55d2:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    55d6:	f88d 3004 	strb.w	r3, [sp, #4]
    55da:	f88d 0005 	strb.w	r0, [sp, #5]
    55de:	9102      	str	r1, [sp, #8]
    55e0:	9203      	str	r2, [sp, #12]
    55e2:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    55e6:	ab04      	add	r3, sp, #16
    55e8:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    55ec:	4628      	mov	r0, r5
    55ee:	f005 f9a1 	bl	a934 <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    55f2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    55f6:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    55fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    55fc:	4628      	mov	r0, r5
    55fe:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    5600:	b1d8      	cbz	r0, 563a <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    5602:	2000      	movs	r0, #0
  }
    5604:	b005      	add	sp, #20
    5606:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    5608:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    560c:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    5610:	4628      	mov	r0, r5
    5612:	f005 ff1d 	bl	b450 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    5616:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    561a:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    5620:	4628      	mov	r0, r5
    5622:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    5624:	b108      	cbz	r0, 562a <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    5626:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    5628:	e7ec      	b.n	5604 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    562a:	2301      	movs	r3, #1
    562c:	461a      	mov	r2, r3
    562e:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    5632:	4620      	mov	r0, r4
    5634:	f004 fcaa 	bl	9f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5638:	e7e4      	b.n	5604 <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    563a:	2301      	movs	r3, #1
    563c:	461a      	mov	r2, r3
    563e:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    5642:	4620      	mov	r0, r4
    5644:	f004 fca2 	bl	9f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    5648:	e7dc      	b.n	5604 <SdBase<FsVolume, FsFormatter>::restart()+0x48>

0000564a <SDClass::format(int, char, Print&)>:
{
    564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    564e:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    5650:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    5654:	b39c      	cbz	r4, 56be <SDClass::format(int, char, Print&)+0x74>
    5656:	4605      	mov	r5, r0
    5658:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    565a:	6823      	ldr	r3, [r4, #0]
    565c:	69db      	ldr	r3, [r3, #28]
    565e:	4620      	mov	r0, r4
    5660:	4798      	blx	r3
    5662:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    5664:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    5668:	d804      	bhi.n	5674 <SDClass::format(int, char, Print&)+0x2a>
    566a:	2600      	movs	r6, #0
}
    566c:	4630      	mov	r0, r6
    566e:	b00c      	add	sp, #48	; 0x30
    5670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    5674:	f44f 7000 	mov.w	r0, #512	; 0x200
    5678:	f00b fc38 	bl	10eec <malloc>
	if (!buf) return false; // unable to allocate memory
    567c:	4680      	mov	r8, r0
    567e:	b300      	cbz	r0, 56c2 <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    5680:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    5684:	d913      	bls.n	56ae <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    5686:	463b      	mov	r3, r7
    5688:	4602      	mov	r2, r0
    568a:	4621      	mov	r1, r4
    568c:	a801      	add	r0, sp, #4
    568e:	f001 fb23 	bl	6cd8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    5692:	4606      	mov	r6, r0
	free(buf);
    5694:	4640      	mov	r0, r8
    5696:	f00b fc31 	bl	10efc <free>
	if (ret) {
    569a:	2e00      	cmp	r6, #0
    569c:	d0e6      	beq.n	566c <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    569e:	6823      	ldr	r3, [r4, #0]
    56a0:	6a1b      	ldr	r3, [r3, #32]
    56a2:	4620      	mov	r0, r4
    56a4:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    56a6:	1d28      	adds	r0, r5, #4
    56a8:	f7ff ff88 	bl	55bc <SdBase<FsVolume, FsFormatter>::restart()>
    56ac:	e7de      	b.n	566c <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    56ae:	463b      	mov	r3, r7
    56b0:	4602      	mov	r2, r0
    56b2:	4621      	mov	r1, r4
    56b4:	a801      	add	r0, sp, #4
    56b6:	f003 ff7f 	bl	95b8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    56ba:	4606      	mov	r6, r0
    56bc:	e7ea      	b.n	5694 <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    56be:	2600      	movs	r6, #0
    56c0:	e7d4      	b.n	566c <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    56c2:	2600      	movs	r6, #0
    56c4:	e7d2      	b.n	566c <SDClass::format(int, char, Print&)+0x22>
	...

000056c8 <SDClass::mediaPresent()>:
{
    56c8:	b570      	push	{r4, r5, r6, lr}
    56ca:	b084      	sub	sp, #16
    56cc:	4604      	mov	r4, r0
    56ce:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    56d2:	2e00      	cmp	r6, #0
    56d4:	d042      	beq.n	575c <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    56d6:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    56da:	b345      	cbz	r5, 572e <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    56dc:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    56e0:	2bfe      	cmp	r3, #254	; 0xfe
    56e2:	d00a      	beq.n	56fa <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    56e4:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    56e8:	2836      	cmp	r0, #54	; 0x36
    56ea:	d914      	bls.n	5716 <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    56ec:	6833      	ldr	r3, [r6, #0]
    56ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    56f0:	4669      	mov	r1, sp
    56f2:	4630      	mov	r0, r6
    56f4:	4798      	blx	r3
    56f6:	4605      	mov	r5, r0
    56f8:	e031      	b.n	575e <SDClass::mediaPresent()+0x96>
				s = card->status();
    56fa:	6833      	ldr	r3, [r6, #0]
    56fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    56fe:	4630      	mov	r0, r6
    5700:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    5702:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5706:	d0ed      	beq.n	56e4 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    5708:	bb48      	cbnz	r0, 575e <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    570a:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    570e:	2bfe      	cmp	r3, #254	; 0xfe
    5710:	d007      	beq.n	5722 <SDClass::mediaPresent()+0x5a>
				ret = false;
    5712:	2500      	movs	r5, #0
    5714:	e023      	b.n	575e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5716:	f007 fe53 	bl	d3c0 <digitalRead>
    571a:	1e05      	subs	r5, r0, #0
    571c:	bf18      	it	ne
    571e:	2501      	movne	r5, #1
    5720:	e01d      	b.n	575e <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    5722:	2103      	movs	r1, #3
    5724:	202e      	movs	r0, #46	; 0x2e
    5726:	f007 fe5d 	bl	d3e4 <pinMode>
				ret = false;
    572a:	2500      	movs	r5, #0
    572c:	e017      	b.n	575e <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    572e:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    5732:	2bfe      	cmp	r3, #254	; 0xfe
    5734:	d008      	beq.n	5748 <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5736:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    573a:	2836      	cmp	r0, #54	; 0x36
    573c:	d90a      	bls.n	5754 <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    573e:	1d20      	adds	r0, r4, #4
    5740:	f7ff ff3c 	bl	55bc <SdBase<FsVolume, FsFormatter>::restart()>
    5744:	4605      	mov	r5, r0
    5746:	e00a      	b.n	575e <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    5748:	4b07      	ldr	r3, [pc, #28]	; (5768 <SDClass::mediaPresent()+0xa0>)
    574a:	689b      	ldr	r3, [r3, #8]
			if (ret)
    574c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5750:	d1f5      	bne.n	573e <SDClass::mediaPresent()+0x76>
    5752:	e004      	b.n	575e <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    5754:	f007 fe34 	bl	d3c0 <digitalRead>
			if (ret)
    5758:	b108      	cbz	r0, 575e <SDClass::mediaPresent()+0x96>
    575a:	e7f0      	b.n	573e <SDClass::mediaPresent()+0x76>
		ret = false;
    575c:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    575e:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    5762:	4628      	mov	r0, r5
    5764:	b004      	add	sp, #16
    5766:	bd70      	pop	{r4, r5, r6, pc}
    5768:	42008000 	.word	0x42008000

0000576c <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    576c:	b508      	push	{r3, lr}
	SDClass() { }
    576e:	4817      	ldr	r0, [pc, #92]	; (57cc <_GLOBAL__sub_I_SD+0x60>)
    5770:	4b17      	ldr	r3, [pc, #92]	; (57d0 <_GLOBAL__sub_I_SD+0x64>)
    5772:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    5774:	2300      	movs	r3, #0
    5776:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    577a:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    577e:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    5782:	4a14      	ldr	r2, [pc, #80]	; (57d4 <_GLOBAL__sub_I_SD+0x68>)
    5784:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    5788:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    578c:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    5790:	4a11      	ldr	r2, [pc, #68]	; (57d8 <_GLOBAL__sub_I_SD+0x6c>)
    5792:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    5796:	2207      	movs	r2, #7
    5798:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    579c:	2229      	movs	r2, #41	; 0x29
    579e:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    57a2:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    57a6:	4a0d      	ldr	r2, [pc, #52]	; (57dc <_GLOBAL__sub_I_SD+0x70>)
    57a8:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    57ac:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    57b0:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    57b4:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    57b8:	23ff      	movs	r3, #255	; 0xff
    57ba:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    57be:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    57c2:	4a07      	ldr	r2, [pc, #28]	; (57e0 <_GLOBAL__sub_I_SD+0x74>)
    57c4:	4907      	ldr	r1, [pc, #28]	; (57e4 <_GLOBAL__sub_I_SD+0x78>)
    57c6:	f00b faa9 	bl	10d1c <__aeabi_atexit>
}
    57ca:	bd08      	pop	{r3, pc}
    57cc:	20004160 	.word	0x20004160
    57d0:	20002570 	.word	0x20002570
    57d4:	200025c4 	.word	0x200025c4
    57d8:	003d0900 	.word	0x003d0900
    57dc:	20002408 	.word	0x20002408
    57e0:	200033d0 	.word	0x200033d0
    57e4:	000050e5 	.word	0x000050e5

000057e8 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    57e8:	b530      	push	{r4, r5, lr}
    57ea:	b085      	sub	sp, #20
    57ec:	4604      	mov	r4, r0
    57ee:	468c      	mov	ip, r1
    57f0:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    57f2:	ab01      	add	r3, sp, #4
    57f4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    57f8:	c907      	ldmia	r1, {r0, r1, r2}
    57fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    57fe:	ea4f 124c 	mov.w	r2, ip, lsl #5
    5802:	4619      	mov	r1, r3
    5804:	6a20      	ldr	r0, [r4, #32]
    5806:	f001 fef5 	bl	75f4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    580a:	2801      	cmp	r0, #1
    580c:	d106      	bne.n	581c <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    580e:	462a      	mov	r2, r5
    5810:	a901      	add	r1, sp, #4
    5812:	6a20      	ldr	r0, [r4, #32]
    5814:	f001 fe99 	bl	754a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5818:	b005      	add	sp, #20
    581a:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    581c:	2000      	movs	r0, #0
    581e:	e7fb      	b.n	5818 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005820 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5820:	b510      	push	{r4, lr}
    5822:	4604      	mov	r4, r0
  bool rtn = sync();
    5824:	f000 fde8 	bl	63f8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5828:	2300      	movs	r3, #0
    582a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    582e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5832:	bd10      	pop	{r4, pc}

00005834 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5834:	b538      	push	{r3, r4, r5, lr}
    5836:	460d      	mov	r5, r1
    5838:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    583a:	2200      	movs	r2, #0
    583c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5840:	6a00      	ldr	r0, [r0, #32]
    5842:	f001 fe82 	bl	754a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5846:	b128      	cbz	r0, 5854 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5848:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    584a:	802a      	strh	r2, [r5, #0]
    584c:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    584e:	8023      	strh	r3, [r4, #0]
  return true;
    5850:	2001      	movs	r0, #1

 fail:
  return false;
}
    5852:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5854:	2000      	movs	r0, #0
    5856:	e7fc      	b.n	5852 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

00005858 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5858:	b538      	push	{r3, r4, r5, lr}
    585a:	460d      	mov	r5, r1
    585c:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    585e:	2200      	movs	r2, #0
    5860:	f100 0124 	add.w	r1, r0, #36	; 0x24
    5864:	6a00      	ldr	r0, [r0, #32]
    5866:	f001 fe70 	bl	754a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    586a:	b128      	cbz	r0, 5878 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    586c:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    586e:	802a      	strh	r2, [r5, #0]
    5870:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    5872:	8023      	strh	r3, [r4, #0]
  return true;
    5874:	2001      	movs	r0, #1

 fail:
  return false;
}
    5876:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    5878:	2000      	movs	r0, #0
    587a:	e7fc      	b.n	5876 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

0000587c <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    587c:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    587e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5882:	b10b      	cbz	r3, 5888 <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    5884:	2000      	movs	r0, #0
}
    5886:	bd38      	pop	{r3, r4, r5, pc}
    5888:	4604      	mov	r4, r0
    588a:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    588c:	2238      	movs	r2, #56	; 0x38
    588e:	2100      	movs	r1, #0
    5890:	f00b feb8 	bl	11604 <memset>
  m_attributes = FILE_ATTR_ROOT;
    5894:	2340      	movs	r3, #64	; 0x40
    5896:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    589a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    589c:	2001      	movs	r0, #1
    589e:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    58a2:	e7f0      	b.n	5886 <ExFatFile::openRoot(ExFatVolume*)+0xa>

000058a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    58a4:	b570      	push	{r4, r5, r6, lr}
    58a6:	460d      	mov	r5, r1
    58a8:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    58aa:	782a      	ldrb	r2, [r5, #0]
    58ac:	2a20      	cmp	r2, #32
    58ae:	d103      	bne.n	58b8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    58b0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    58b4:	2c20      	cmp	r4, #32
    58b6:	d0fb      	beq.n	58b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    58b8:	600d      	str	r5, [r1, #0]
  fname->end = path;
    58ba:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    58bc:	782c      	ldrb	r4, [r5, #0]
    58be:	b384      	cbz	r4, 5922 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    58c0:	2c2f      	cmp	r4, #47	; 0x2f
    58c2:	d02e      	beq.n	5922 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    58c4:	f105 0e01 	add.w	lr, r5, #1
    58c8:	4e1f      	ldr	r6, [pc, #124]	; (5948 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    58ca:	e017      	b.n	58fc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    58cc:	2c1f      	cmp	r4, #31
    58ce:	d823      	bhi.n	5918 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    58d0:	2000      	movs	r0, #0
    58d2:	e00b      	b.n	58ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    58d4:	2c5c      	cmp	r4, #92	; 0x5c
    58d6:	d035      	beq.n	5944 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    58d8:	d903      	bls.n	58e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    58da:	2c7c      	cmp	r4, #124	; 0x7c
    58dc:	d107      	bne.n	58ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    58de:	2000      	movs	r0, #0
    58e0:	e004      	b.n	58ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    58e2:	3c3e      	subs	r4, #62	; 0x3e
    58e4:	b2e4      	uxtb	r4, r4
    58e6:	2c01      	cmp	r4, #1
    58e8:	d801      	bhi.n	58ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    58ea:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    58ec:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    58ee:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    58f0:	782c      	ldrb	r4, [r5, #0]
    58f2:	f10e 0e01 	add.w	lr, lr, #1
    58f6:	b1a4      	cbz	r4, 5922 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    58f8:	2c2f      	cmp	r4, #47	; 0x2f
    58fa:	d012      	beq.n	5922 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    58fc:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    58fe:	2c3c      	cmp	r4, #60	; 0x3c
    5900:	d8e8      	bhi.n	58d4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    5902:	2c21      	cmp	r4, #33	; 0x21
    5904:	d9e2      	bls.n	58cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    5906:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    590a:	fa5f fc8c 	uxtb.w	ip, ip
    590e:	fa26 fc0c 	lsr.w	ip, r6, ip
    5912:	f01c 0f01 	tst.w	ip, #1
    5916:	d113      	bne.n	5940 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    5918:	2c2e      	cmp	r4, #46	; 0x2e
    591a:	d0e9      	beq.n	58f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    591c:	2c20      	cmp	r4, #32
    591e:	d0e7      	beq.n	58f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5920:	e7e5      	b.n	58ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5922:	782a      	ldrb	r2, [r5, #0]
    5924:	2a2f      	cmp	r2, #47	; 0x2f
    5926:	d001      	beq.n	592c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    5928:	2a20      	cmp	r2, #32
    592a:	d105      	bne.n	5938 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    592c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    5930:	2c20      	cmp	r4, #32
    5932:	d0fb      	beq.n	592c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    5934:	2c2f      	cmp	r4, #47	; 0x2f
    5936:	d0f9      	beq.n	592c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    5938:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    593a:	f001 fd13 	bl	7364 <ExFatFile::hashName(ExName_t*)>
    593e:	e7d5      	b.n	58ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    5940:	2000      	movs	r0, #0
    5942:	e7d3      	b.n	58ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5944:	2000      	movs	r0, #0
    5946:	e7d1      	b.n	58ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5948:	05002101 	.word	0x05002101

0000594c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    594c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5950:	b083      	sub	sp, #12
    5952:	4604      	mov	r4, r0
    5954:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5956:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    595a:	f013 0f01 	tst.w	r3, #1
    595e:	f000 80b3 	beq.w	5ac8 <ExFatFile::read(void*, unsigned int)+0x17c>
    5962:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5964:	f013 0f40 	tst.w	r3, #64	; 0x40
    5968:	d104      	bne.n	5974 <ExFatFile::read(void*, unsigned int)+0x28>
    596a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    596e:	f013 0f08 	tst.w	r3, #8
    5972:	d00d      	beq.n	5990 <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    5974:	6822      	ldr	r2, [r4, #0]
    5976:	6863      	ldr	r3, [r4, #4]
    5978:	6921      	ldr	r1, [r4, #16]
    597a:	6960      	ldr	r0, [r4, #20]
    597c:	9d00      	ldr	r5, [sp, #0]
    597e:	18ad      	adds	r5, r5, r2
    5980:	f143 0300 	adc.w	r3, r3, #0
    5984:	42a9      	cmp	r1, r5
    5986:	eb70 0303 	sbcs.w	r3, r0, r3
    598a:	d201      	bcs.n	5990 <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    598c:	1a8b      	subs	r3, r1, r2
    598e:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    5990:	9b00      	ldr	r3, [sp, #0]
    5992:	2b00      	cmp	r3, #0
    5994:	f000 80a3 	beq.w	5ade <ExFatFile::read(void*, unsigned int)+0x192>
    5998:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    599a:	f104 0318 	add.w	r3, r4, #24
    599e:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    59a0:	f240 1bff 	movw	fp, #511	; 0x1ff
    59a4:	e036      	b.n	5a14 <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    59a6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    59aa:	f013 0f40 	tst.w	r3, #64	; 0x40
    59ae:	d003      	beq.n	59b8 <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    59b0:	69a3      	ldr	r3, [r4, #24]
    59b2:	3301      	adds	r3, #1
    59b4:	61a3      	str	r3, [r4, #24]
    59b6:	e041      	b.n	5a3c <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    59b8:	9a01      	ldr	r2, [sp, #4]
    59ba:	69a1      	ldr	r1, [r4, #24]
    59bc:	f001 fde2 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    59c0:	2800      	cmp	r0, #0
    59c2:	f2c0 8081 	blt.w	5ac8 <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    59c6:	2800      	cmp	r0, #0
    59c8:	d138      	bne.n	5a3c <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    59ca:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    59ce:	f013 0f50 	tst.w	r3, #80	; 0x50
    59d2:	d079      	beq.n	5ac8 <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    59d4:	9b00      	ldr	r3, [sp, #0]
    59d6:	1bd8      	subs	r0, r3, r7
    59d8:	e07e      	b.n	5ad8 <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    59da:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    59de:	42be      	cmp	r6, r7
    59e0:	bf28      	it	cs
    59e2:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    59e4:	2200      	movs	r2, #0
    59e6:	4629      	mov	r1, r5
    59e8:	f508 7004 	add.w	r0, r8, #528	; 0x210
    59ec:	f006 f995 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    59f0:	4601      	mov	r1, r0
    59f2:	2800      	cmp	r0, #0
    59f4:	d068      	beq.n	5ac8 <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    59f6:	4632      	mov	r2, r6
    59f8:	4449      	add	r1, r9
    59fa:	4650      	mov	r0, sl
    59fc:	f007 fd38 	bl	d470 <memcpy>
    dst += n;
    5a00:	44b2      	add	sl, r6
    m_curPosition += n;
    5a02:	6823      	ldr	r3, [r4, #0]
    5a04:	6862      	ldr	r2, [r4, #4]
    5a06:	199b      	adds	r3, r3, r6
    5a08:	f142 0200 	adc.w	r2, r2, #0
    5a0c:	6023      	str	r3, [r4, #0]
    5a0e:	6062      	str	r2, [r4, #4]
  while (toRead) {
    5a10:	1bbf      	subs	r7, r7, r6
    5a12:	d0df      	beq.n	59d4 <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5a14:	6823      	ldr	r3, [r4, #0]
    5a16:	6862      	ldr	r2, [r4, #4]
    5a18:	6a20      	ldr	r0, [r4, #32]
    5a1a:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    5a1e:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5a20:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    5a24:	b956      	cbnz	r6, 5a3c <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    5a26:	4313      	orrs	r3, r2
    5a28:	d1bd      	bne.n	59a6 <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5a2a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5a2e:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5a32:	bf14      	ite	ne
    5a34:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    5a38:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    5a3a:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5a3c:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5a40:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5a44:	0a72      	lsrs	r2, r6, #9
    5a46:	69a5      	ldr	r5, [r4, #24]
    5a48:	3d02      	subs	r5, #2
    5a4a:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    5a4c:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    5a50:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    5a54:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5a56:	f1b9 0f00 	cmp.w	r9, #0
    5a5a:	d1be      	bne.n	59da <ExFatFile::read(void*, unsigned int)+0x8e>
    5a5c:	455f      	cmp	r7, fp
    5a5e:	d9bc      	bls.n	59da <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5a60:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5a64:	428d      	cmp	r5, r1
    5a66:	d0b8      	beq.n	59da <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5a68:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    5a6c:	d20a      	bcs.n	5a84 <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    5a6e:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5a72:	6803      	ldr	r3, [r0, #0]
    5a74:	691b      	ldr	r3, [r3, #16]
    5a76:	4652      	mov	r2, sl
    5a78:	4629      	mov	r1, r5
    5a7a:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5a7c:	b320      	cbz	r0, 5ac8 <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    5a7e:	f44f 7600 	mov.w	r6, #512	; 0x200
    5a82:	e7bd      	b.n	5a00 <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5a84:	f04f 0901 	mov.w	r9, #1
    5a88:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5a8c:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5a90:	0a7b      	lsrs	r3, r7, #9
    5a92:	4599      	cmp	r9, r3
    5a94:	bf28      	it	cs
    5a96:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    5a98:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    5a9c:	428d      	cmp	r5, r1
    5a9e:	d808      	bhi.n	5ab2 <ExFatFile::read(void*, unsigned int)+0x166>
    5aa0:	eb05 0309 	add.w	r3, r5, r9
    5aa4:	4299      	cmp	r1, r3
    5aa6:	d204      	bcs.n	5ab2 <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    5aa8:	f508 7004 	add.w	r0, r8, #528	; 0x210
    5aac:	f006 f90e 	bl	bccc <FsCache::sync()>
    5ab0:	b150      	cbz	r0, 5ac8 <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    5ab2:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    5ab6:	6803      	ldr	r3, [r0, #0]
    5ab8:	f8d3 8014 	ldr.w	r8, [r3, #20]
    5abc:	464b      	mov	r3, r9
    5abe:	4652      	mov	r2, sl
    5ac0:	4629      	mov	r1, r5
    5ac2:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d19b      	bne.n	5a00 <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    5ac8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    5acc:	f043 0302 	orr.w	r3, r3, #2
    5ad0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ad8:	b003      	add	sp, #12
    5ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    5ade:	461f      	mov	r7, r3
    5ae0:	e778      	b.n	59d4 <ExFatFile::read(void*, unsigned int)+0x88>

00005ae2 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ae4:	b083      	sub	sp, #12
    5ae6:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    5ae8:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    5aec:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    5aee:	2201      	movs	r2, #1
    5af0:	f10d 0107 	add.w	r1, sp, #7
    5af4:	f7ff ff2a 	bl	594c <ExFatFile::read(void*, unsigned int)>
    5af8:	2801      	cmp	r0, #1
    5afa:	bf0c      	ite	eq
    5afc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5b00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    5b04:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    5b08:	61a5      	str	r5, [r4, #24]
}
    5b0a:	b003      	add	sp, #12
    5b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005b0e <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5b0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b12:	4604      	mov	r4, r0
    5b14:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5b16:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    5b1a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    5b1e:	2a00      	cmp	r2, #0
    5b20:	d054      	beq.n	5bcc <ExFatFile::seekSet(unsigned long long)+0xbe>
    5b22:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5b24:	6801      	ldr	r1, [r0, #0]
    5b26:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5b2a:	459c      	cmp	ip, r3
    5b2c:	bf08      	it	eq
    5b2e:	42b1      	cmpeq	r1, r6
    5b30:	d05d      	beq.n	5bee <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    5b32:	ea56 0307 	orrs.w	r3, r6, r7
    5b36:	d04e      	beq.n	5bd6 <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    5b38:	f012 0f08 	tst.w	r2, #8
    5b3c:	d004      	beq.n	5b48 <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    5b3e:	6900      	ldr	r0, [r0, #16]
    5b40:	6963      	ldr	r3, [r4, #20]
    5b42:	42b0      	cmp	r0, r6
    5b44:	41bb      	sbcs	r3, r7
    5b46:	d341      	bcc.n	5bcc <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5b48:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5b4c:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    5b50:	3309      	adds	r3, #9
    5b52:	b2db      	uxtb	r3, r3
    5b54:	1e75      	subs	r5, r6, #1
    5b56:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    5b5a:	f1c3 0920 	rsb	r9, r3, #32
    5b5e:	f1a3 0020 	sub.w	r0, r3, #32
    5b62:	40dd      	lsrs	r5, r3
    5b64:	fa0a f909 	lsl.w	r9, sl, r9
    5b68:	ea45 0509 	orr.w	r5, r5, r9
    5b6c:	fa2a f000 	lsr.w	r0, sl, r0
    5b70:	4305      	orrs	r5, r0
  if (isContiguous()) {
    5b72:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5b76:	f010 0f40 	tst.w	r0, #64	; 0x40
    5b7a:	d132      	bne.n	5be2 <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5b7c:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    5b80:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    5b84:	f1c3 0920 	rsb	r9, r3, #32
    5b88:	f1a3 0020 	sub.w	r0, r3, #32
    5b8c:	fa2b f303 	lsr.w	r3, fp, r3
    5b90:	fa0a f909 	lsl.w	r9, sl, r9
    5b94:	ea43 0309 	orr.w	r3, r3, r9
    5b98:	fa2a f000 	lsr.w	r0, sl, r0
    5b9c:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    5b9e:	ea51 0c0c 	orrs.w	ip, r1, ip
    5ba2:	d001      	beq.n	5ba8 <ExFatFile::seekSet(unsigned long long)+0x9a>
    5ba4:	429d      	cmp	r5, r3
    5ba6:	d220      	bcs.n	5bea <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5ba8:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5bac:	bf14      	ite	ne
    5bae:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    5bb2:	69e3      	ldreq	r3, [r4, #28]
    5bb4:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5bb6:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    5bba:	b175      	cbz	r5, 5bda <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5bbc:	464a      	mov	r2, r9
    5bbe:	69a1      	ldr	r1, [r4, #24]
    5bc0:	6a20      	ldr	r0, [r4, #32]
    5bc2:	f001 fcdf 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5bc6:	3d01      	subs	r5, #1
    5bc8:	2800      	cmp	r0, #0
    5bca:	dcf6      	bgt.n	5bba <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    5bcc:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    5bd0:	2000      	movs	r0, #0
}
    5bd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    5bd6:	2300      	movs	r3, #0
    5bd8:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    5bda:	6026      	str	r6, [r4, #0]
    5bdc:	6067      	str	r7, [r4, #4]
  return true;
    5bde:	2001      	movs	r0, #1
    5be0:	e7f7      	b.n	5bd2 <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    5be2:	69e3      	ldr	r3, [r4, #28]
    5be4:	442b      	add	r3, r5
    5be6:	61a3      	str	r3, [r4, #24]
    goto done;
    5be8:	e7f7      	b.n	5bda <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    5bea:	1aed      	subs	r5, r5, r3
    5bec:	e7e3      	b.n	5bb6 <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    5bee:	2001      	movs	r0, #1
    5bf0:	e7ef      	b.n	5bd2 <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

00005bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bf8:	b08f      	sub	sp, #60	; 0x3c
    5bfa:	4607      	mov	r7, r0
    5bfc:	9302      	str	r3, [sp, #8]
    5bfe:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    5c02:	f1bb 0f00 	cmp.w	fp, #0
    5c06:	d10e      	bne.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5c08:	460d      	mov	r5, r1
    5c0a:	4691      	mov	r9, r2
    5c0c:	461a      	mov	r2, r3
    5c0e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5c12:	f013 0f50 	tst.w	r3, #80	; 0x50
    5c16:	d006      	beq.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    5c18:	f002 0303 	and.w	r3, r2, #3
    5c1c:	2b01      	cmp	r3, #1
    5c1e:	d02b      	beq.n	5c78 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    5c20:	2b02      	cmp	r3, #2
    5c22:	d02b      	beq.n	5c7c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    5c24:	b143      	cbz	r3, 5c38 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    5c26:	2600      	movs	r6, #0
    5c28:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    5c2c:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    5c30:	4630      	mov	r0, r6
    5c32:	b00f      	add	sp, #60	; 0x3c
    5c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    5c38:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5c3a:	9a02      	ldr	r2, [sp, #8]
    5c3c:	f002 0208 	and.w	r2, r2, #8
    5c40:	4313      	orrs	r3, r2
    5c42:	9303      	str	r3, [sp, #12]
  if (fname) {
    5c44:	f1b9 0f00 	cmp.w	r9, #0
    5c48:	d01a      	beq.n	5c80 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5c4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5c4e:	f103 080e 	add.w	r8, r3, #14
    5c52:	4bae      	ldr	r3, [pc, #696]	; (5f0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    5c54:	fba3 3808 	umull	r3, r8, r3, r8
    5c58:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    5c5c:	f108 0802 	add.w	r8, r8, #2
    5c60:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    5c64:	2200      	movs	r2, #0
    5c66:	2300      	movs	r3, #0
    5c68:	4628      	mov	r0, r5
    5c6a:	f7ff ff50 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5c6e:	465c      	mov	r4, fp
    5c70:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5c72:	f04f 0a20 	mov.w	sl, #32
    5c76:	e00c      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5c78:	2302      	movs	r3, #2
    5c7a:	e7de      	b.n	5c3a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    5c7c:	2303      	movs	r3, #3
    5c7e:	e7dc      	b.n	5c3a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    5c80:	f04f 0803 	mov.w	r8, #3
    5c84:	e7f3      	b.n	5c6e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    5c86:	461e      	mov	r6, r3
    5c88:	e003      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5c8a:	461e      	mov	r6, r3
    5c8c:	e001      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    5c8e:	b1cb      	cbz	r3, 5cc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    5c90:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    5c92:	4652      	mov	r2, sl
    5c94:	a906      	add	r1, sp, #24
    5c96:	4628      	mov	r0, r5
    5c98:	f7ff fe58 	bl	594c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5c9c:	b1a8      	cbz	r0, 5cca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    5c9e:	2820      	cmp	r0, #32
    5ca0:	d1c1      	bne.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    5ca2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5ca6:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    5caa:	2a00      	cmp	r2, #0
    5cac:	db20      	blt.n	5cf0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    5cae:	b924      	cbnz	r4, 5cba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5cb0:	682a      	ldr	r2, [r5, #0]
    5cb2:	3a20      	subs	r2, #32
    5cb4:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5cb6:	69aa      	ldr	r2, [r5, #24]
    5cb8:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    5cba:	4544      	cmp	r4, r8
    5cbc:	d2e7      	bcs.n	5c8e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    5cbe:	3401      	adds	r4, #1
    5cc0:	b2e4      	uxtb	r4, r4
    5cc2:	e7e4      	b.n	5c8e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    5cc4:	f1b9 0f00 	cmp.w	r9, #0
    5cc8:	d0ad      	beq.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5cca:	9b02      	ldr	r3, [sp, #8]
    5ccc:	f413 7f00 	tst.w	r3, #512	; 0x200
    5cd0:	d0a9      	beq.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5cd2:	9b03      	ldr	r3, [sp, #12]
    5cd4:	f013 0f02 	tst.w	r3, #2
    5cd8:	d0a5      	beq.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5cda:	f1b9 0f00 	cmp.w	r9, #0
    5cde:	d0a2      	beq.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    5ce0:	4544      	cmp	r4, r8
    5ce2:	f080 80cd 	bcs.w	5e80 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    5ce6:	2620      	movs	r6, #32
    5ce8:	f8dd a004 	ldr.w	sl, [sp, #4]
    5cec:	46bb      	mov	fp, r7
    5cee:	e0b2      	b.n	5e56 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    5cf0:	bb3e      	cbnz	r6, 5d42 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    5cf2:	4544      	cmp	r4, r8
    5cf4:	bf38      	it	cc
    5cf6:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    5cf8:	2b85      	cmp	r3, #133	; 0x85
    5cfa:	d1ca      	bne.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    5cfc:	2238      	movs	r2, #56	; 0x38
    5cfe:	2100      	movs	r1, #0
    5d00:	4638      	mov	r0, r7
    5d02:	f00b fc7f 	bl	11604 <memset>
      m_setCount = dirFile->setCount;
    5d06:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5d0a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5d0e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    5d12:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5d16:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    5d1a:	bf08      	it	eq
    5d1c:	f043 0308 	orreq.w	r3, r3, #8
    5d20:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5d24:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    5d26:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    5d28:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    5d2a:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5d2c:	682b      	ldr	r3, [r5, #0]
    5d2e:	3b20      	subs	r3, #32
    5d30:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5d32:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    5d36:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5d3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    5d3e:	2601      	movs	r6, #1
    5d40:	e7a7      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5d42:	2bc0      	cmp	r3, #192	; 0xc0
    5d44:	d003      	beq.n	5d4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5d46:	2bc1      	cmp	r3, #193	; 0xc1
    5d48:	d033      	beq.n	5db2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    5d4a:	2600      	movs	r6, #0
    5d4c:	e7a1      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    5d4e:	9a03      	ldr	r2, [sp, #12]
    5d50:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5d54:	f89d 3019 	ldrb.w	r3, [sp, #25]
    5d58:	f013 0f02 	tst.w	r3, #2
    5d5c:	d003      	beq.n	5d66 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5d5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    5d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    5d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    5d6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    5d6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d70:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5d72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    5d76:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    5d7a:	f1b9 0f00 	cmp.w	r9, #0
    5d7e:	d02e      	beq.n	5dde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    5d80:	f8d9 3000 	ldr.w	r3, [r9]
    5d84:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5d88:	f04f 0300 	mov.w	r3, #0
    5d8c:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    5d90:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5d94:	f8d9 2010 	ldr.w	r2, [r9, #16]
    5d98:	429a      	cmp	r2, r3
    5d9a:	d001      	beq.n	5da0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    5d9c:	2600      	movs	r6, #0
    5d9e:	e778      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    5da0:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    5da4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    5da8:	429e      	cmp	r6, r3
    5daa:	bf14      	ite	ne
    5dac:	2600      	movne	r6, #0
    5dae:	2601      	moveq	r6, #1
    5db0:	e76f      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    5db2:	464a      	mov	r2, r9
    5db4:	a906      	add	r1, sp, #24
    5db6:	4638      	mov	r0, r7
    5db8:	f001 fa4c 	bl	7254 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5dbc:	4603      	mov	r3, r0
    5dbe:	2800      	cmp	r0, #0
    5dc0:	f43f af61 	beq.w	5c86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    5dc4:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    5dc8:	2a00      	cmp	r2, #0
    5dca:	f47f af5e 	bne.w	5c8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    5dce:	f8d9 1008 	ldr.w	r1, [r9, #8]
    5dd2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5dd6:	4291      	cmp	r1, r2
    5dd8:	d001      	beq.n	5dde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    5dda:	461e      	mov	r6, r3
    5ddc:	e759      	b.n	5c92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    5dde:	9b02      	ldr	r3, [sp, #8]
    5de0:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5de4:	f47f af1f 	bne.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5de8:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    5dec:	d105      	bne.n	5dfa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    5dee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5df2:	f013 0f02 	tst.w	r3, #2
    5df6:	f000 80d5 	beq.w	5fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5dfa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    5dfe:	f013 0f11 	tst.w	r3, #17
    5e02:	f47f af10 	bne.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5e06:	9b02      	ldr	r3, [sp, #8]
    5e08:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5e0c:	f000 80cf 	beq.w	5fae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    5e14:	f013 0f02 	tst.w	r3, #2
    5e18:	f43f af05 	beq.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    5e1c:	2200      	movs	r2, #0
    5e1e:	2300      	movs	r3, #0
    5e20:	4638      	mov	r0, r7
    5e22:	f7ff fe74 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
    5e26:	2800      	cmp	r0, #0
    5e28:	f43f aefd 	beq.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5e2c:	4638      	mov	r0, r7
    5e2e:	f000 fd24 	bl	687a <ExFatFile::truncate()>
    if (!truncate(0)) {
    5e32:	4606      	mov	r6, r0
    5e34:	2800      	cmp	r0, #0
    5e36:	f47f aefb 	bne.w	5c30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5e3a:	e6f4      	b.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    5e3c:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    5e3e:	4628      	mov	r0, r5
    5e40:	f000 fb08 	bl	6454 <ExFatFile::addDirCluster()>
    5e44:	b908      	cbnz	r0, 5e4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    5e46:	465f      	mov	r7, fp
    5e48:	e6ed      	b.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    5e4a:	61af      	str	r7, [r5, #24]
      continue;
    5e4c:	e001      	b.n	5e52 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    5e4e:	3401      	adds	r4, #1
    5e50:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    5e52:	4544      	cmp	r4, r8
    5e54:	d211      	bcs.n	5e7a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    5e56:	4632      	mov	r2, r6
    5e58:	a906      	add	r1, sp, #24
    5e5a:	4628      	mov	r0, r5
    5e5c:	f7ff fd76 	bl	594c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5e60:	2800      	cmp	r0, #0
    5e62:	d0eb      	beq.n	5e3c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    5e64:	2820      	cmp	r0, #32
    5e66:	f040 809b 	bne.w	5fa0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    5e6a:	2c00      	cmp	r4, #0
    5e6c:	d1ef      	bne.n	5e4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5e6e:	682b      	ldr	r3, [r5, #0]
    5e70:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    5e74:	69ab      	ldr	r3, [r5, #24]
    5e76:	9300      	str	r3, [sp, #0]
    5e78:	e7e9      	b.n	5e4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    5e7a:	f8cd a004 	str.w	sl, [sp, #4]
    5e7e:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5e80:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    5e84:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    5e88:	2238      	movs	r2, #56	; 0x38
    5e8a:	2100      	movs	r1, #0
    5e8c:	4638      	mov	r0, r7
    5e8e:	f00b fbb9 	bl	11604 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5e92:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    5e94:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    5e96:	2308      	movs	r3, #8
    5e98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    5e9c:	9b00      	ldr	r3, [sp, #0]
    5e9e:	627b      	str	r3, [r7, #36]	; 0x24
    5ea0:	9b01      	ldr	r3, [sp, #4]
    5ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    5ea4:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    5ea8:	f8d9 3000 	ldr.w	r3, [r9]
    5eac:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    5eb0:	2300      	movs	r3, #0
    5eb2:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5eb6:	f1b8 0f00 	cmp.w	r8, #0
    5eba:	d06c      	beq.n	5f96 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5ebc:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    5ebe:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    5ec2:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    5ec6:	f8df b048 	ldr.w	fp, [pc, #72]	; 5f10 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    5eca:	e036      	b.n	5f3a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    5ecc:	2385      	movs	r3, #133	; 0x85
    5ece:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    5ed0:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5ed4:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    5ed8:	f8db 3000 	ldr.w	r3, [fp]
    5edc:	b17b      	cbz	r3, 5efe <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    5ede:	f10d 0213 	add.w	r2, sp, #19
    5ee2:	f10d 0116 	add.w	r1, sp, #22
    5ee6:	a805      	add	r0, sp, #20
    5ee8:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5eea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5eee:	8163      	strh	r3, [r4, #10]
    5ef0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ef4:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    5ef6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5efa:	7523      	strb	r3, [r4, #20]
    5efc:	e019      	b.n	5f32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5efe:	f245 6321 	movw	r3, #22049	; 0x5621
    5f02:	8163      	strh	r3, [r4, #10]
    5f04:	81e3      	strh	r3, [r4, #14]
    5f06:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    5f08:	e013      	b.n	5f32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    5f0a:	bf00      	nop
    5f0c:	88888889 	.word	0x88888889
    5f10:	20004c5c 	.word	0x20004c5c
      dirStream->type = EXFAT_TYPE_STREAM;
    5f14:	23c0      	movs	r3, #192	; 0xc0
    5f16:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5f18:	2301      	movs	r3, #1
    5f1a:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5f1c:	9b03      	ldr	r3, [sp, #12]
    5f1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5f26:	f8d9 3010 	ldr.w	r3, [r9, #16]
    5f2a:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5f2c:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    5f30:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5f32:	3601      	adds	r6, #1
    5f34:	b2f3      	uxtb	r3, r6
    5f36:	4598      	cmp	r8, r3
    5f38:	d92d      	bls.n	5f96 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    5f3a:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5f3c:	2201      	movs	r2, #1
    5f3e:	4629      	mov	r1, r5
    5f40:	4638      	mov	r0, r7
    5f42:	f7ff fc51 	bl	57e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5f46:	4604      	mov	r4, r0
    5f48:	2800      	cmp	r0, #0
    5f4a:	f43f ae6c 	beq.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    5f4e:	f990 3000 	ldrsb.w	r3, [r0]
    5f52:	2b00      	cmp	r3, #0
    5f54:	f6ff ae67 	blt.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    5f58:	2220      	movs	r2, #32
    5f5a:	2100      	movs	r1, #0
    5f5c:	f00b fb52 	bl	11604 <memset>
    if (i == 0) {
    5f60:	2d00      	cmp	r5, #0
    5f62:	d0b3      	beq.n	5ecc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    5f64:	2d01      	cmp	r5, #1
    5f66:	d0d5      	beq.n	5f14 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    5f68:	23c1      	movs	r3, #193	; 0xc1
    5f6a:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    5f6c:	4625      	mov	r5, r4
    5f6e:	341e      	adds	r4, #30
    5f70:	e006      	b.n	5f80 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    5f72:	4648      	mov	r0, r9
    5f74:	f005 ff10 	bl	bd98 <FsName::get16()>
    5f78:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    5f7c:	42ac      	cmp	r4, r5
    5f7e:	d0d8      	beq.n	5f32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    5f80:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d1f4      	bne.n	5f72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5f88:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5f8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    5f90:	429a      	cmp	r2, r3
    5f92:	d1ee      	bne.n	5f72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    5f94:	e7cd      	b.n	5f32 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    5f96:	4638      	mov	r0, r7
    5f98:	f000 fa2e 	bl	63f8 <ExFatFile::sync()>
    5f9c:	4606      	mov	r6, r0
    5f9e:	e647      	b.n	5c30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5fa0:	465f      	mov	r7, fp
    5fa2:	e640      	b.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    5fa4:	9b02      	ldr	r3, [sp, #8]
    5fa6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5faa:	f47f ae3c 	bne.w	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5fae:	9b02      	ldr	r3, [sp, #8]
    5fb0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    5fb4:	f43f ae3c 	beq.w	5c30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5fb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5fbc:	4638      	mov	r0, r7
    5fbe:	f7ff fda6 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
    5fc2:	4606      	mov	r6, r0
    5fc4:	2800      	cmp	r0, #0
    5fc6:	f47f ae33 	bne.w	5c30 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    5fca:	e62c      	b.n	5c26 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

00005fcc <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fd0:	b096      	sub	sp, #88	; 0x58
    5fd2:	9201      	str	r2, [sp, #4]
    5fd4:	461f      	mov	r7, r3
  ExFatFile() {}
    5fd6:	2300      	movs	r3, #0
    5fd8:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    5fdc:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    5fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    5fe4:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5fe8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5fec:	2b00      	cmp	r3, #0
    5fee:	d159      	bne.n	60a4 <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    5ff0:	4604      	mov	r4, r0
    5ff2:	460d      	mov	r5, r1
    5ff4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    5ff8:	f013 0f50 	tst.w	r3, #80	; 0x50
    5ffc:	d057      	beq.n	60ae <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    5ffe:	4613      	mov	r3, r2
    6000:	7812      	ldrb	r2, [r2, #0]
    6002:	2a2f      	cmp	r2, #47	; 0x2f
    6004:	d001      	beq.n	600a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6006:	2600      	movs	r6, #0
    6008:	e02c      	b.n	6064 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    600a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    600e:	2a2f      	cmp	r2, #47	; 0x2f
    6010:	d0fb      	beq.n	600a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    6012:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    6014:	b92a      	cbnz	r2, 6022 <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    6016:	6a29      	ldr	r1, [r5, #32]
    6018:	4620      	mov	r0, r4
    601a:	f7ff fc2f 	bl	587c <ExFatFile::openRoot(ExFatVolume*)>
    601e:	4603      	mov	r3, r0
    6020:	e041      	b.n	60a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6022:	6a29      	ldr	r1, [r5, #32]
    6024:	a808      	add	r0, sp, #32
    6026:	f7ff fc29 	bl	587c <ExFatFile::openRoot(ExFatVolume*)>
    602a:	4603      	mov	r3, r0
    602c:	2800      	cmp	r0, #0
    602e:	d03a      	beq.n	60a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    6030:	ad08      	add	r5, sp, #32
    6032:	e7e8      	b.n	6006 <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    6034:	46ae      	mov	lr, r5
    6036:	f8dc 0000 	ldr.w	r0, [ip]
    603a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    603e:	f8dc 2008 	ldr.w	r2, [ip, #8]
    6042:	f8dc 300c 	ldr.w	r3, [ip, #12]
    6046:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    604a:	f10c 0c10 	add.w	ip, ip, #16
    604e:	4675      	mov	r5, lr
    6050:	45c4      	cmp	ip, r8
    6052:	d1ef      	bne.n	6034 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    6054:	f8dc 0000 	ldr.w	r0, [ip]
    6058:	f8ce 0000 	str.w	r0, [lr]
    close();
    605c:	4620      	mov	r0, r4
    605e:	f7ff fbdf 	bl	5820 <ExFatFile::close()>
    dirFile = &tmpDir;
    6062:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6064:	ab01      	add	r3, sp, #4
    6066:	aa02      	add	r2, sp, #8
    6068:	9901      	ldr	r1, [sp, #4]
    606a:	4620      	mov	r0, r4
    606c:	f7ff fc1a 	bl	58a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6070:	4603      	mov	r3, r0
    6072:	b1c0      	cbz	r0, 60a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    6074:	9b01      	ldr	r3, [sp, #4]
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	b163      	cbz	r3, 6094 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    607a:	4633      	mov	r3, r6
    607c:	aa02      	add	r2, sp, #8
    607e:	4629      	mov	r1, r5
    6080:	4620      	mov	r0, r4
    6082:	f7ff fdb7 	bl	5bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6086:	4603      	mov	r3, r0
    6088:	b168      	cbz	r0, 60a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    608a:	46a4      	mov	ip, r4
    608c:	ad08      	add	r5, sp, #32
    608e:	f104 0830 	add.w	r8, r4, #48	; 0x30
    6092:	e7cf      	b.n	6034 <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    6094:	463b      	mov	r3, r7
    6096:	aa02      	add	r2, sp, #8
    6098:	4629      	mov	r1, r5
    609a:	4620      	mov	r0, r4
    609c:	f7ff fdaa 	bl	5bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60a0:	4603      	mov	r3, r0
    60a2:	e000      	b.n	60a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    60a4:	2300      	movs	r3, #0
}
    60a6:	4618      	mov	r0, r3
    60a8:	b016      	add	sp, #88	; 0x58
    60aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    60ae:	2300      	movs	r3, #0
    60b0:	e7f9      	b.n	60a6 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

000060b2 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    60b2:	b129      	cbz	r1, 60c0 <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    60b4:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    60b6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    60ba:	f7ff ff87 	bl	5fcc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    60be:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    60c0:	2000      	movs	r0, #0
}
    60c2:	4770      	bx	lr

000060c4 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    60c4:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    60c6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    60ca:	b97b      	cbnz	r3, 60ec <ExFatFile::openNext(ExFatFile*, int)+0x28>
    60cc:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    60d0:	f013 0f50 	tst.w	r3, #80	; 0x50
    60d4:	d00c      	beq.n	60f0 <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    60d6:	680b      	ldr	r3, [r1, #0]
    60d8:	f013 0f1f 	tst.w	r3, #31
    60dc:	d001      	beq.n	60e2 <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    60de:	2000      	movs	r0, #0
    60e0:	e005      	b.n	60ee <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    60e2:	4613      	mov	r3, r2
    60e4:	2200      	movs	r2, #0
    60e6:	f7ff fd85 	bl	5bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60ea:	e000      	b.n	60ee <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    60ec:	2000      	movs	r0, #0
}
    60ee:	bd08      	pop	{r3, pc}
  return false;
    60f0:	2000      	movs	r0, #0
    60f2:	e7fc      	b.n	60ee <ExFatFile::openNext(ExFatFile*, int)+0x2a>

000060f4 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    60f4:	b410      	push	{r4}
    60f6:	4684      	mov	ip, r0
    60f8:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    60fa:	f89c 4000 	ldrb.w	r4, [ip]
    60fe:	2c85      	cmp	r4, #133	; 0x85
    6100:	bf14      	ite	ne
    6102:	2400      	movne	r4, #0
    6104:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6106:	2200      	movs	r2, #0
    6108:	e000      	b.n	610c <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    610a:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    610c:	03c3      	lsls	r3, r0, #15
    610e:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    6112:	f81c 1002 	ldrb.w	r1, [ip, r2]
    6116:	fa11 f383 	uxtah	r3, r1, r3
    611a:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    611c:	2a01      	cmp	r2, #1
    611e:	d101      	bne.n	6124 <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    6120:	2c00      	cmp	r4, #0
    6122:	d1f2      	bne.n	610a <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    6124:	3201      	adds	r2, #1
    6126:	2a1f      	cmp	r2, #31
    6128:	d9f0      	bls.n	610c <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
  }
  return checksum;
}
    612a:	f85d 4b04 	ldr.w	r4, [sp], #4
    612e:	4770      	bx	lr

00006130 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6132:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6134:	6a00      	ldr	r0, [r0, #32]
    6136:	69a1      	ldr	r1, [r4, #24]
    6138:	b101      	cbz	r1, 613c <ExFatFile::addCluster()+0xc>
    613a:	3101      	adds	r1, #1
    613c:	2201      	movs	r2, #1
    613e:	f001 f943 	bl	73c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    6142:	4605      	mov	r5, r0
  if (find < 2) {
    6144:	2801      	cmp	r0, #1
    6146:	d93c      	bls.n	61c2 <ExFatFile::addCluster()+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6148:	2301      	movs	r3, #1
    614a:	461a      	mov	r2, r3
    614c:	4601      	mov	r1, r0
    614e:	6a20      	ldr	r0, [r4, #32]
    6150:	f001 f993 	bl	747a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6154:	4607      	mov	r7, r0
    6156:	2800      	cmp	r0, #0
    6158:	d034      	beq.n	61c4 <ExFatFile::addCluster()+0x94>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    615a:	69a3      	ldr	r3, [r4, #24]
    615c:	b1bb      	cbz	r3, 618e <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    615e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    6162:	f012 0f40 	tst.w	r2, #64	; 0x40
    6166:	d01a      	beq.n	619e <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    6168:	3301      	adds	r3, #1
    616a:	42ab      	cmp	r3, r5
    616c:	d015      	beq.n	619a <ExFatFile::addCluster()+0x6a>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    616e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    6172:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6176:	69e1      	ldr	r1, [r4, #28]
    6178:	69a3      	ldr	r3, [r4, #24]
    617a:	428b      	cmp	r3, r1
    617c:	d90f      	bls.n	619e <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    617e:	1c4e      	adds	r6, r1, #1
    6180:	4632      	mov	r2, r6
    6182:	6a20      	ldr	r0, [r4, #32]
    6184:	f001 fa5d 	bl	7642 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6188:	b1f0      	cbz	r0, 61c8 <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    618a:	4631      	mov	r1, r6
    618c:	e7f4      	b.n	6178 <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    618e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6196:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    619a:	61a5      	str	r5, [r4, #24]
  return true;
    619c:	e012      	b.n	61c4 <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    619e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    61a2:	4629      	mov	r1, r5
    61a4:	6a20      	ldr	r0, [r4, #32]
    61a6:	f001 fa4c 	bl	7642 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    61aa:	b178      	cbz	r0, 61cc <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    61ac:	69a1      	ldr	r1, [r4, #24]
    61ae:	2900      	cmp	r1, #0
    61b0:	d0f3      	beq.n	619a <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    61b2:	462a      	mov	r2, r5
    61b4:	6a20      	ldr	r0, [r4, #32]
    61b6:	f001 fa44 	bl	7642 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    61ba:	2800      	cmp	r0, #0
    61bc:	d1ed      	bne.n	619a <ExFatFile::addCluster()+0x6a>

 fail:
  return false;
    61be:	4607      	mov	r7, r0
    61c0:	e000      	b.n	61c4 <ExFatFile::addCluster()+0x94>
    61c2:	2700      	movs	r7, #0
}
    61c4:	4638      	mov	r0, r7
    61c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    61c8:	4607      	mov	r7, r0
    61ca:	e7fb      	b.n	61c4 <ExFatFile::addCluster()+0x94>
    61cc:	4607      	mov	r7, r0
    61ce:	e7f9      	b.n	61c4 <ExFatFile::addCluster()+0x94>

000061d0 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    61d0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    61d4:	f013 0f02 	tst.w	r3, #2
    61d8:	d04e      	beq.n	6278 <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    61da:	b570      	push	{r4, r5, r6, lr}
    61dc:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    61de:	69c1      	ldr	r1, [r0, #28]
    61e0:	b1e9      	cbz	r1, 621e <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    61e2:	f013 0f40 	tst.w	r3, #64	; 0x40
    61e6:	d041      	beq.n	626c <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    61e8:	6a00      	ldr	r0, [r0, #32]
    61ea:	68aa      	ldr	r2, [r5, #8]
    61ec:	68ec      	ldr	r4, [r5, #12]
    61ee:	3a01      	subs	r2, #1
    61f0:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    61f4:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    61f8:	3309      	adds	r3, #9
    61fa:	b2db      	uxtb	r3, r3
    61fc:	f1c3 0c20 	rsb	ip, r3, #32
    6200:	f1a3 0620 	sub.w	r6, r3, #32
    6204:	40da      	lsrs	r2, r3
    6206:	fa04 fc0c 	lsl.w	ip, r4, ip
    620a:	ea42 020c 	orr.w	r2, r2, ip
    620e:	fa24 f606 	lsr.w	r6, r4, r6
    6212:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6214:	2300      	movs	r3, #0
    6216:	3201      	adds	r2, #1
    6218:	f001 f92f 	bl	747a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    621c:	b378      	cbz	r0, 627e <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    621e:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6220:	2601      	movs	r6, #1
    6222:	4632      	mov	r2, r6
    6224:	b2e1      	uxtb	r1, r4
    6226:	4628      	mov	r0, r5
    6228:	f7ff fade 	bl	57e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    622c:	b330      	cbz	r0, 627c <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    622e:	7803      	ldrb	r3, [r0, #0]
    6230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6234:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6236:	3401      	adds	r4, #1
    6238:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    623c:	b2e3      	uxtb	r3, r4
    623e:	429a      	cmp	r2, r3
    6240:	d2ef      	bcs.n	6222 <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    6242:	2300      	movs	r3, #0
    6244:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    6248:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    624c:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    624e:	4620      	mov	r0, r4
    6250:	f005 fd3c 	bl	bccc <FsCache::sync()>
    6254:	b198      	cbz	r0, 627e <ExFatFile::remove()+0xae>
    6256:	f504 7004 	add.w	r0, r4, #528	; 0x210
    625a:	f005 fd37 	bl	bccc <FsCache::sync()>
    625e:	b170      	cbz	r0, 627e <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6260:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    6264:	6803      	ldr	r3, [r0, #0]
    6266:	6a1b      	ldr	r3, [r3, #32]
    6268:	4798      	blx	r3
    626a:	e008      	b.n	627e <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    626c:	6a00      	ldr	r0, [r0, #32]
    626e:	f001 fa08 	bl	7682 <ExFatPartition::freeChain(unsigned long)>
    6272:	2800      	cmp	r0, #0
    6274:	d1d3      	bne.n	621e <ExFatFile::remove()+0x4e>
    6276:	e002      	b.n	627e <ExFatFile::remove()+0xae>

 fail:
  return false;
    6278:	2000      	movs	r0, #0
}
    627a:	4770      	bx	lr
  return false;
    627c:	2000      	movs	r0, #0
}
    627e:	bd70      	pop	{r4, r5, r6, pc}

00006280 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6280:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6284:	f013 0f10 	tst.w	r3, #16
    6288:	d101      	bne.n	628e <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    628a:	2000      	movs	r0, #0
}
    628c:	4770      	bx	lr
bool ExFatFile::rmdir() {
    628e:	b530      	push	{r4, r5, lr}
    6290:	b089      	sub	sp, #36	; 0x24
    6292:	4604      	mov	r4, r0
    seekSet(0);
    6294:	2200      	movs	r2, #0
    6296:	2300      	movs	r3, #0
    6298:	f7ff fc39 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    629c:	2520      	movs	r5, #32
    629e:	462a      	mov	r2, r5
    62a0:	4669      	mov	r1, sp
    62a2:	4620      	mov	r0, r4
    62a4:	f7ff fb52 	bl	594c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    62a8:	b148      	cbz	r0, 62be <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    62aa:	2820      	cmp	r0, #32
    62ac:	d115      	bne.n	62da <ExFatFile::rmdir()+0x5a>
    62ae:	f89d 2000 	ldrb.w	r2, [sp]
    62b2:	f99d 3000 	ldrsb.w	r3, [sp]
    62b6:	2b00      	cmp	r3, #0
    62b8:	db11      	blt.n	62de <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    62ba:	2a00      	cmp	r2, #0
    62bc:	d1ef      	bne.n	629e <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    62be:	2308      	movs	r3, #8
    62c0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    62c4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    62c8:	f043 0302 	orr.w	r3, r3, #2
    62cc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    62d0:	4620      	mov	r0, r4
    62d2:	f7ff ff7d 	bl	61d0 <ExFatFile::remove()>
}
    62d6:	b009      	add	sp, #36	; 0x24
    62d8:	bd30      	pop	{r4, r5, pc}
  return false;
    62da:	2000      	movs	r0, #0
    62dc:	e7fb      	b.n	62d6 <ExFatFile::rmdir()+0x56>
    62de:	2000      	movs	r0, #0
    62e0:	e7f9      	b.n	62d6 <ExFatFile::rmdir()+0x56>
	...

000062e4 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    62e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62e8:	b083      	sub	sp, #12
    62ea:	4604      	mov	r4, r0
    62ec:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    62ee:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    62f0:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    62f2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 63f4 <ExFatFile::syncDir()+0x110>
    62f6:	e02a      	b.n	634e <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    62f8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    62fc:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6300:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6302:	f8d9 3000 	ldr.w	r3, [r9]
    6306:	b183      	cbz	r3, 632a <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6308:	f10d 0203 	add.w	r2, sp, #3
    630c:	f10d 0106 	add.w	r1, sp, #6
    6310:	a801      	add	r0, sp, #4
    6312:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    6314:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6318:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    631a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    631e:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    6320:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6324:	81eb      	strh	r3, [r5, #14]
    6326:	822a      	strh	r2, [r5, #16]
    6328:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    632a:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    632c:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6330:	f043 0301 	orr.w	r3, r3, #1
    6334:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6338:	4639      	mov	r1, r7
    633a:	4628      	mov	r0, r5
    633c:	f7ff feda 	bl	60f4 <exFatDirChecksum(unsigned char const*, unsigned short)>
    6340:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6342:	3601      	adds	r6, #1
    6344:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    6348:	b2f3      	uxtb	r3, r6
    634a:	429a      	cmp	r2, r3
    634c:	d334      	bcc.n	63b8 <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    634e:	4642      	mov	r2, r8
    6350:	b2f1      	uxtb	r1, r6
    6352:	4620      	mov	r0, r4
    6354:	f7ff fa48 	bl	57e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6358:	4605      	mov	r5, r0
    635a:	b130      	cbz	r0, 636a <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    635c:	7803      	ldrb	r3, [r0, #0]
    635e:	2bc0      	cmp	r3, #192	; 0xc0
    6360:	d00d      	beq.n	637e <ExFatFile::syncDir()+0x9a>
    6362:	2bc1      	cmp	r3, #193	; 0xc1
    6364:	d0e8      	beq.n	6338 <ExFatFile::syncDir()+0x54>
    6366:	2b85      	cmp	r3, #133	; 0x85
    6368:	d0c6      	beq.n	62f8 <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    636a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    636e:	f043 0301 	orr.w	r3, r3, #1
    6372:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6376:	2000      	movs	r0, #0
}
    6378:	b003      	add	sp, #12
    637a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    637e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6382:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6386:	7843      	ldrb	r3, [r0, #1]
    6388:	bf14      	ite	ne
    638a:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    638e:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    6392:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6394:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6398:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    639c:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    639e:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    63a0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    63a4:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    63a8:	6a22      	ldr	r2, [r4, #32]
    63aa:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    63ae:	f043 0301 	orr.w	r3, r3, #1
    63b2:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    63b6:	e7bf      	b.n	6338 <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    63b8:	2201      	movs	r2, #1
    63ba:	f104 0124 	add.w	r1, r4, #36	; 0x24
    63be:	6a20      	ldr	r0, [r4, #32]
    63c0:	f001 f8c3 	bl	754a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    63c4:	2800      	cmp	r0, #0
    63c6:	d0d0      	beq.n	636a <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    63c8:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    63ca:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    63cc:	4628      	mov	r0, r5
    63ce:	f005 fc7d 	bl	bccc <FsCache::sync()>
    63d2:	2800      	cmp	r0, #0
    63d4:	d0c9      	beq.n	636a <ExFatFile::syncDir()+0x86>
    63d6:	f505 7004 	add.w	r0, r5, #528	; 0x210
    63da:	f005 fc77 	bl	bccc <FsCache::sync()>
    63de:	2800      	cmp	r0, #0
    63e0:	d0c3      	beq.n	636a <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    63e2:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    63e6:	6803      	ldr	r3, [r0, #0]
    63e8:	6a1b      	ldr	r3, [r3, #32]
    63ea:	4798      	blx	r3
    63ec:	2800      	cmp	r0, #0
    63ee:	d1c3      	bne.n	6378 <ExFatFile::syncDir()+0x94>
    63f0:	e7bb      	b.n	636a <ExFatFile::syncDir()+0x86>
    63f2:	bf00      	nop
    63f4:	20004c5c 	.word	0x20004c5c

000063f8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    63f8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    63fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    63fe:	b33b      	cbz	r3, 6450 <ExFatFile::sync()+0x58>
    6400:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6402:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6406:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    640a:	2a00      	cmp	r2, #0
    640c:	db0c      	blt.n	6428 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    640e:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6410:	4628      	mov	r0, r5
    6412:	f005 fc5b 	bl	bccc <FsCache::sync()>
    6416:	b970      	cbnz	r0, 6436 <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    6418:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    641c:	f043 0301 	orr.w	r3, r3, #1
    6420:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6424:	2000      	movs	r0, #0
    6426:	e014      	b.n	6452 <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    642c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    6430:	f7ff ff58 	bl	62e4 <ExFatFile::syncDir()>
    6434:	e00d      	b.n	6452 <ExFatFile::sync()+0x5a>
    6436:	f505 7004 	add.w	r0, r5, #528	; 0x210
    643a:	f005 fc47 	bl	bccc <FsCache::sync()>
    643e:	2800      	cmp	r0, #0
    6440:	d0ea      	beq.n	6418 <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    6442:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    6446:	6803      	ldr	r3, [r0, #0]
    6448:	6a1b      	ldr	r3, [r3, #32]
    644a:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    644c:	b908      	cbnz	r0, 6452 <ExFatFile::sync()+0x5a>
    644e:	e7e3      	b.n	6418 <ExFatFile::sync()+0x20>
    return true;
    6450:	2001      	movs	r0, #1
}
    6452:	bd38      	pop	{r3, r4, r5, pc}

00006454 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6458:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    645a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    645e:	f013 0f40 	tst.w	r3, #64	; 0x40
    6462:	d10a      	bne.n	647a <ExFatFile::addDirCluster()+0x26>
    6464:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6466:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    6468:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    646c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    646e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    6472:	d306      	bcc.n	6482 <ExFatFile::addDirCluster()+0x2e>
  return false;
    6474:	2000      	movs	r0, #0
}
    6476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    647a:	6a00      	ldr	r0, [r0, #32]
    647c:	f001 f9f4 	bl	7868 <ExFatPartition::rootLength()>
    6480:	e7f1      	b.n	6466 <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    6482:	4628      	mov	r0, r5
    6484:	f7ff fe54 	bl	6130 <ExFatFile::addCluster()>
    6488:	2800      	cmp	r0, #0
    648a:	d0f4      	beq.n	6476 <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    648c:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    648e:	69ae      	ldr	r6, [r5, #24]
    6490:	3e02      	subs	r6, #2
    6492:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6496:	409e      	lsls	r6, r3
    6498:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    649c:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    649e:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    64a0:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    64a2:	f44f 7900 	mov.w	r9, #512	; 0x200
    64a6:	46a0      	mov	r8, r4
    64a8:	463a      	mov	r2, r7
    64aa:	1931      	adds	r1, r6, r4
    64ac:	f500 7004 	add.w	r0, r0, #528	; 0x210
    64b0:	f005 fc33 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    64b4:	b360      	cbz	r0, 6510 <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    64b6:	464a      	mov	r2, r9
    64b8:	4641      	mov	r1, r8
    64ba:	f00b f8a3 	bl	11604 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    64be:	3401      	adds	r4, #1
    64c0:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    64c2:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    64c6:	2301      	movs	r3, #1
    64c8:	4093      	lsls	r3, r2
    64ca:	429c      	cmp	r4, r3
    64cc:	d3ec      	bcc.n	64a8 <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    64ce:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    64d2:	f013 0f40 	tst.w	r3, #64	; 0x40
    64d6:	d117      	bne.n	6508 <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    64d8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    64dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    64e0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    64e4:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    64e8:	68ab      	ldr	r3, [r5, #8]
    64ea:	68ea      	ldr	r2, [r5, #12]
    64ec:	185b      	adds	r3, r3, r1
    64ee:	f142 0200 	adc.w	r2, r2, #0
    64f2:	60ab      	str	r3, [r5, #8]
    64f4:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    64f6:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    64fa:	692b      	ldr	r3, [r5, #16]
    64fc:	696a      	ldr	r2, [r5, #20]
    64fe:	185b      	adds	r3, r3, r1
    6500:	f142 0200 	adc.w	r2, r2, #0
    6504:	612b      	str	r3, [r5, #16]
    6506:	616a      	str	r2, [r5, #20]
  return sync();
    6508:	4628      	mov	r0, r5
    650a:	f7ff ff75 	bl	63f8 <ExFatFile::sync()>
    650e:	e7b2      	b.n	6476 <ExFatFile::addDirCluster()+0x22>
  return false;
    6510:	2000      	movs	r0, #0
    6512:	e7b0      	b.n	6476 <ExFatFile::addDirCluster()+0x22>

00006514 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    6514:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6518:	f013 0f50 	tst.w	r3, #80	; 0x50
    651c:	d101      	bne.n	6522 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    651e:	2000      	movs	r0, #0
}
    6520:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6522:	b510      	push	{r4, lr}
    6524:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6526:	f640 2302 	movw	r3, #2562	; 0xa02
    652a:	f7ff fb63 	bl	5bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    652e:	b900      	cbnz	r0, 6532 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    6530:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    6532:	2310      	movs	r3, #16
    6534:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6538:	4620      	mov	r0, r4
    653a:	f7ff ff8b 	bl	6454 <ExFatFile::addDirCluster()>
    653e:	2800      	cmp	r0, #0
    6540:	d0f6      	beq.n	6530 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    6542:	69a3      	ldr	r3, [r4, #24]
    6544:	61e3      	str	r3, [r4, #28]
    6546:	2200      	movs	r2, #0
    6548:	2300      	movs	r3, #0
    654a:	4620      	mov	r0, r4
    654c:	f7ff fadf 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6550:	23c1      	movs	r3, #193	; 0xc1
    6552:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6556:	4620      	mov	r0, r4
    6558:	f7ff ff4e 	bl	63f8 <ExFatFile::sync()>
    655c:	e7e8      	b.n	6530 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

0000655e <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    655e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6562:	b096      	sub	sp, #88	; 0x58
    6564:	9201      	str	r2, [sp, #4]
    6566:	461e      	mov	r6, r3
    6568:	2300      	movs	r3, #0
    656a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    656e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6572:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    6576:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    657a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    657e:	2b00      	cmp	r3, #0
    6580:	d15a      	bne.n	6638 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    6582:	4604      	mov	r4, r0
    6584:	460d      	mov	r5, r1
    6586:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    658a:	f013 0f50 	tst.w	r3, #80	; 0x50
    658e:	d058      	beq.n	6642 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    6590:	4613      	mov	r3, r2
    6592:	7812      	ldrb	r2, [r2, #0]
    6594:	2a2f      	cmp	r2, #47	; 0x2f
    6596:	d001      	beq.n	659c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6598:	2700      	movs	r7, #0
    659a:	e029      	b.n	65f0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    659c:	3301      	adds	r3, #1
    659e:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    65a0:	781a      	ldrb	r2, [r3, #0]
    65a2:	2a2f      	cmp	r2, #47	; 0x2f
    65a4:	d0fa      	beq.n	659c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    65a6:	6a29      	ldr	r1, [r5, #32]
    65a8:	a802      	add	r0, sp, #8
    65aa:	f7ff f967 	bl	587c <ExFatFile::openRoot(ExFatVolume*)>
    65ae:	4603      	mov	r3, r0
    65b0:	2800      	cmp	r0, #0
    65b2:	d042      	beq.n	663a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    65b4:	ad02      	add	r5, sp, #8
    65b6:	e7ef      	b.n	6598 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    65b8:	46a4      	mov	ip, r4
    65ba:	ad02      	add	r5, sp, #8
    65bc:	f104 0830 	add.w	r8, r4, #48	; 0x30
    65c0:	46ae      	mov	lr, r5
    65c2:	f8dc 0000 	ldr.w	r0, [ip]
    65c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    65ca:	f8dc 2008 	ldr.w	r2, [ip, #8]
    65ce:	f8dc 300c 	ldr.w	r3, [ip, #12]
    65d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    65d6:	f10c 0c10 	add.w	ip, ip, #16
    65da:	4675      	mov	r5, lr
    65dc:	45c4      	cmp	ip, r8
    65de:	d1ef      	bne.n	65c0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    65e0:	f8dc 0000 	ldr.w	r0, [ip]
    65e4:	f8ce 0000 	str.w	r0, [lr]
    close();
    65e8:	4620      	mov	r0, r4
    65ea:	f7ff f919 	bl	5820 <ExFatFile::close()>
    parent = &tmpDir;
    65ee:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    65f0:	ab01      	add	r3, sp, #4
    65f2:	aa10      	add	r2, sp, #64	; 0x40
    65f4:	9901      	ldr	r1, [sp, #4]
    65f6:	4620      	mov	r0, r4
    65f8:	f7ff f954 	bl	58a4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    65fc:	4603      	mov	r3, r0
    65fe:	b1e0      	cbz	r0, 663a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    6600:	9b01      	ldr	r3, [sp, #4]
    6602:	781b      	ldrb	r3, [r3, #0]
    6604:	b18b      	cbz	r3, 662a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6606:	463b      	mov	r3, r7
    6608:	aa10      	add	r2, sp, #64	; 0x40
    660a:	4629      	mov	r1, r5
    660c:	4620      	mov	r0, r4
    660e:	f7ff faf1 	bl	5bf4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6612:	2800      	cmp	r0, #0
    6614:	d1d0      	bne.n	65b8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    6616:	b1b6      	cbz	r6, 6646 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    6618:	aa10      	add	r2, sp, #64	; 0x40
    661a:	4629      	mov	r1, r5
    661c:	4620      	mov	r0, r4
    661e:	f7ff ff79 	bl	6514 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6622:	4603      	mov	r3, r0
    6624:	2800      	cmp	r0, #0
    6626:	d1c7      	bne.n	65b8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    6628:	e007      	b.n	663a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    662a:	aa10      	add	r2, sp, #64	; 0x40
    662c:	4629      	mov	r1, r5
    662e:	4620      	mov	r0, r4
    6630:	f7ff ff70 	bl	6514 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6634:	4603      	mov	r3, r0
    6636:	e000      	b.n	663a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    6638:	2300      	movs	r3, #0
}
    663a:	4618      	mov	r0, r3
    663c:	b016      	add	sp, #88	; 0x58
    663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    6642:	2300      	movs	r3, #0
    6644:	e7f9      	b.n	663a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    6646:	4633      	mov	r3, r6
    6648:	e7f7      	b.n	663a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

0000664a <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    664a:	b570      	push	{r4, r5, r6, lr}
    664c:	b09c      	sub	sp, #112	; 0x70
    664e:	2300      	movs	r3, #0
    6650:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    6654:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    6658:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    665c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    6660:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6664:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    6668:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    666c:	f013 0f18 	tst.w	r3, #24
    6670:	d047      	beq.n	6702 <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    6672:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    6674:	6a00      	ldr	r0, [r0, #32]
    6676:	6a0b      	ldr	r3, [r1, #32]
    6678:	4298      	cmp	r0, r3
    667a:	d002      	beq.n	6682 <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    667c:	2000      	movs	r0, #0
}
    667e:	b01c      	add	sp, #112	; 0x70
    6680:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6682:	f640 2301 	movw	r3, #2561	; 0xa01
    6686:	a80e      	add	r0, sp, #56	; 0x38
    6688:	f7ff fca0 	bl	5fcc <ExFatFile::open(ExFatFile*, char const*, int)>
    668c:	2800      	cmp	r0, #0
    668e:	d0f6      	beq.n	667e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    6690:	46a4      	mov	ip, r4
    6692:	466d      	mov	r5, sp
    6694:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6698:	46ae      	mov	lr, r5
    669a:	f8dc 0000 	ldr.w	r0, [ip]
    669e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    66a2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    66a6:	f8dc 300c 	ldr.w	r3, [ip, #12]
    66aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    66ae:	f10c 0c10 	add.w	ip, ip, #16
    66b2:	4675      	mov	r5, lr
    66b4:	45b4      	cmp	ip, r6
    66b6:	d1ef      	bne.n	6698 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    66b8:	f8dc 0000 	ldr.w	r0, [ip]
    66bc:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    66c0:	f104 0324 	add.w	r3, r4, #36	; 0x24
    66c4:	aa17      	add	r2, sp, #92	; 0x5c
    66c6:	ca07      	ldmia	r2, {r0, r1, r2}
    66c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    66cc:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    66d0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    66d4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    66d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    66dc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    66e0:	4620      	mov	r0, r4
    66e2:	f7ff fe89 	bl	63f8 <ExFatFile::sync()>
    66e6:	2800      	cmp	r0, #0
    66e8:	d0c9      	beq.n	667e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    66ea:	2300      	movs	r3, #0
    66ec:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    66ee:	2302      	movs	r3, #2
    66f0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    66f4:	2308      	movs	r3, #8
    66f6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    66fa:	4668      	mov	r0, sp
    66fc:	f7ff fd68 	bl	61d0 <ExFatFile::remove()>
    6700:	e7bd      	b.n	667e <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    6702:	2000      	movs	r0, #0
    6704:	e7bb      	b.n	667e <ExFatFile::rename(ExFatFile*, char const*)+0x34>

00006706 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    6706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    670a:	b083      	sub	sp, #12
    670c:	9100      	str	r1, [sp, #0]
    670e:	461e      	mov	r6, r3
    6710:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    6714:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    6718:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    671c:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    6720:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6724:	f013 0f08 	tst.w	r3, #8
    6728:	f000 809a 	beq.w	6860 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    672c:	4605      	mov	r5, r0
      || year > 2107
    672e:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    6732:	b294      	uxth	r4, r2
    6734:	2c7f      	cmp	r4, #127	; 0x7f
    6736:	f200 8098 	bhi.w	686a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    673a:	1e73      	subs	r3, r6, #1
    673c:	b2db      	uxtb	r3, r3
    673e:	2b0b      	cmp	r3, #11
    6740:	f200 8095 	bhi.w	686e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    6744:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    6748:	b2db      	uxtb	r3, r3
    674a:	2b1e      	cmp	r3, #30
    674c:	f200 8091 	bhi.w	6872 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    6750:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    6754:	bf98      	it	ls
    6756:	f1ba 0f17 	cmpls.w	sl, #23
    675a:	bf8c      	ite	hi
    675c:	2701      	movhi	r7, #1
    675e:	2700      	movls	r7, #0
    6760:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    6764:	bf88      	it	hi
    6766:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    676a:	b10f      	cbz	r7, 6770 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    676c:	2700      	movs	r7, #0
    676e:	e078      	b.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    6770:	f7ff fe42 	bl	63f8 <ExFatFile::sync()>
    6774:	2800      	cmp	r0, #0
    6776:	d07e      	beq.n	6876 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    6778:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    677c:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    6780:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    6782:	ea4f 0359 	mov.w	r3, r9, lsr #1
    6786:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    678a:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    678e:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    6792:	f019 0901 	ands.w	r9, r9, #1
    6796:	bf18      	it	ne
    6798:	f04f 0964 	movne.w	r9, #100	; 0x64
    679c:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    679e:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    67a0:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    67a2:	9b00      	ldr	r3, [sp, #0]
    67a4:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    67a8:	4652      	mov	r2, sl
    67aa:	b2f1      	uxtb	r1, r6
    67ac:	4628      	mov	r0, r5
    67ae:	f7ff f81b 	bl	57e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    67b2:	4602      	mov	r2, r0
    67b4:	2800      	cmp	r0, #0
    67b6:	d054      	beq.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    67b8:	7803      	ldrb	r3, [r0, #0]
    67ba:	2b85      	cmp	r3, #133	; 0x85
    67bc:	d02b      	beq.n	6816 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    67be:	3340      	adds	r3, #64	; 0x40
    67c0:	b2db      	uxtb	r3, r3
    67c2:	2b01      	cmp	r3, #1
    67c4:	d84d      	bhi.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    67c6:	9901      	ldr	r1, [sp, #4]
    67c8:	4610      	mov	r0, r2
    67ca:	f7ff fc93 	bl	60f4 <exFatDirChecksum(unsigned char const*, unsigned short)>
    67ce:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    67d0:	3601      	adds	r6, #1
    67d2:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    67d6:	b2f3      	uxtb	r3, r6
    67d8:	429a      	cmp	r2, r3
    67da:	d2e5      	bcs.n	67a8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    67dc:	2201      	movs	r2, #1
    67de:	f105 0124 	add.w	r1, r5, #36	; 0x24
    67e2:	6a28      	ldr	r0, [r5, #32]
    67e4:	f000 feb1 	bl	754a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    67e8:	2800      	cmp	r0, #0
    67ea:	d03a      	beq.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    67ec:	9a01      	ldr	r2, [sp, #4]
    67ee:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    67f0:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    67f2:	4620      	mov	r0, r4
    67f4:	f005 fa6a 	bl	bccc <FsCache::sync()>
    67f8:	4607      	mov	r7, r0
    67fa:	b390      	cbz	r0, 6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    67fc:	f504 7004 	add.w	r0, r4, #528	; 0x210
    6800:	f005 fa64 	bl	bccc <FsCache::sync()>
    6804:	4607      	mov	r7, r0
    6806:	b360      	cbz	r0, 6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    6808:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    680c:	6803      	ldr	r3, [r0, #0]
    680e:	6a1b      	ldr	r3, [r3, #32]
    6810:	4798      	blx	r3
    6812:	4607      	mov	r7, r0
    6814:	e025      	b.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6816:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    681a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    681e:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    6820:	6a29      	ldr	r1, [r5, #32]
    6822:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    6826:	f043 0301 	orr.w	r3, r3, #1
    682a:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    682e:	f1b8 0f00 	cmp.w	r8, #0
    6832:	d002      	beq.n	683a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    6834:	f8a0 b010 	strh.w	fp, [r0, #16]
    6838:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    683a:	9b00      	ldr	r3, [sp, #0]
    683c:	f013 0f02 	tst.w	r3, #2
    6840:	d004      	beq.n	684c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    6842:	f882 9014 	strb.w	r9, [r2, #20]
    6846:	f8a2 b008 	strh.w	fp, [r2, #8]
    684a:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    684c:	9b00      	ldr	r3, [sp, #0]
    684e:	f013 0f04 	tst.w	r3, #4
    6852:	d0b8      	beq.n	67c6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    6854:	f882 9015 	strb.w	r9, [r2, #21]
    6858:	f8a2 b00c 	strh.w	fp, [r2, #12]
    685c:	81d4      	strh	r4, [r2, #14]
}
    685e:	e7b2      	b.n	67c6 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    6860:	2700      	movs	r7, #0
}
    6862:	4638      	mov	r0, r7
    6864:	b003      	add	sp, #12
    6866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    686a:	2700      	movs	r7, #0
    686c:	e7f9      	b.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    686e:	2700      	movs	r7, #0
    6870:	e7f7      	b.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6872:	2700      	movs	r7, #0
    6874:	e7f5      	b.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    6876:	4607      	mov	r7, r0
    6878:	e7f3      	b.n	6862 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

0000687a <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    687a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    687e:	f013 0f02 	tst.w	r3, #2
    6882:	d066      	beq.n	6952 <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    6884:	b530      	push	{r4, r5, lr}
    6886:	b083      	sub	sp, #12
    6888:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    688a:	69c5      	ldr	r5, [r0, #28]
    688c:	2d00      	cmp	r5, #0
    688e:	d062      	beq.n	6956 <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    6890:	f013 0f40 	tst.w	r3, #64	; 0x40
    6894:	d03b      	beq.n	690e <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6896:	6a00      	ldr	r0, [r0, #32]
    6898:	68a2      	ldr	r2, [r4, #8]
    689a:	68e1      	ldr	r1, [r4, #12]
    689c:	3a01      	subs	r2, #1
    689e:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    68a2:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    68a6:	3309      	adds	r3, #9
    68a8:	b2db      	uxtb	r3, r3
    68aa:	f1c3 0e20 	rsb	lr, r3, #32
    68ae:	f1a3 0c20 	sub.w	ip, r3, #32
    68b2:	40da      	lsrs	r2, r3
    68b4:	fa01 fe0e 	lsl.w	lr, r1, lr
    68b8:	ea42 020e 	orr.w	r2, r2, lr
    68bc:	fa21 fc0c 	lsr.w	ip, r1, ip
    68c0:	ea42 020c 	orr.w	r2, r2, ip
    68c4:	3201      	adds	r2, #1
    if (m_curCluster) {
    68c6:	69a3      	ldr	r3, [r4, #24]
    68c8:	b1b3      	cbz	r3, 68f8 <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    68ca:	1c59      	adds	r1, r3, #1
    68cc:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    68ce:	3d01      	subs	r5, #1
    68d0:	1aed      	subs	r5, r5, r3
    68d2:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    68d4:	b9a2      	cbnz	r2, 6900 <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    68d6:	e9d4 2300 	ldrd	r2, r3, [r4]
    68da:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    68de:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    68e2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    68e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    68ea:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    68ee:	4620      	mov	r0, r4
    68f0:	f7ff fd82 	bl	63f8 <ExFatFile::sync()>

 fail:
  return false;
}
    68f4:	b003      	add	sp, #12
    68f6:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    68f8:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    68fa:	2300      	movs	r3, #0
    68fc:	61e3      	str	r3, [r4, #28]
    68fe:	e7e9      	b.n	68d4 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6900:	2300      	movs	r3, #0
    6902:	9901      	ldr	r1, [sp, #4]
    6904:	f000 fdb9 	bl	747a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6908:	2800      	cmp	r0, #0
    690a:	d1e4      	bne.n	68d6 <ExFatFile::truncate()+0x5c>
    690c:	e7f2      	b.n	68f4 <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    690e:	6981      	ldr	r1, [r0, #24]
    6910:	b949      	cbnz	r1, 6926 <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    6912:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6914:	2300      	movs	r3, #0
    6916:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    6918:	4629      	mov	r1, r5
    691a:	6a20      	ldr	r0, [r4, #32]
    691c:	f000 feb1 	bl	7682 <ExFatPartition::freeChain(unsigned long)>
    6920:	2800      	cmp	r0, #0
    6922:	d1d8      	bne.n	68d6 <ExFatFile::truncate()+0x5c>
    6924:	e7e6      	b.n	68f4 <ExFatFile::truncate()+0x7a>
      toFree = 0;
    6926:	2300      	movs	r3, #0
    6928:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    692a:	aa01      	add	r2, sp, #4
    692c:	6a00      	ldr	r0, [r0, #32]
    692e:	f000 fe29 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6932:	2800      	cmp	r0, #0
    6934:	db11      	blt.n	695a <ExFatFile::truncate()+0xe0>
      if (fg) {
    6936:	b918      	cbnz	r0, 6940 <ExFatFile::truncate()+0xc6>
    if (toFree) {
    6938:	9d01      	ldr	r5, [sp, #4]
    693a:	2d00      	cmp	r5, #0
    693c:	d0cb      	beq.n	68d6 <ExFatFile::truncate()+0x5c>
    693e:	e7eb      	b.n	6918 <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6944:	69a1      	ldr	r1, [r4, #24]
    6946:	6a20      	ldr	r0, [r4, #32]
    6948:	f000 fe7b 	bl	7642 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    694c:	2800      	cmp	r0, #0
    694e:	d1f3      	bne.n	6938 <ExFatFile::truncate()+0xbe>
    6950:	e7d0      	b.n	68f4 <ExFatFile::truncate()+0x7a>
  return false;
    6952:	2000      	movs	r0, #0
}
    6954:	4770      	bx	lr
      return true;
    6956:	2001      	movs	r0, #1
    6958:	e7cc      	b.n	68f4 <ExFatFile::truncate()+0x7a>
  return false;
    695a:	2000      	movs	r0, #0
    695c:	e7ca      	b.n	68f4 <ExFatFile::truncate()+0x7a>
	...

00006960 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6964:	b083      	sub	sp, #12
    6966:	4604      	mov	r4, r0
    6968:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    696c:	f013 0f02 	tst.w	r3, #2
    6970:	d014      	beq.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
    6972:	4688      	mov	r8, r1
    6974:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6976:	f013 0f08 	tst.w	r3, #8
    697a:	d109      	bne.n	6990 <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    697c:	f1bb 0f00 	cmp.w	fp, #0
    6980:	f000 80ed 	beq.w	6b5e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    6984:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6986:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    698a:	f04f 0901 	mov.w	r9, #1
    698e:	e085      	b.n	6a9c <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    6990:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6994:	f7ff f8bb 	bl	5b0e <ExFatFile::seekSet(unsigned long long)>
    6998:	2800      	cmp	r0, #0
    699a:	d1ef      	bne.n	697c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    699c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    69a0:	f043 0301 	orr.w	r3, r3, #1
    69a4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    69a8:	2000      	movs	r0, #0
}
    69aa:	b003      	add	sp, #12
    69ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    69b0:	4652      	mov	r2, sl
    69b2:	f000 fde7 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    69b6:	2800      	cmp	r0, #0
    69b8:	dbf0      	blt.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    69ba:	b938      	cbnz	r0, 69cc <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    69bc:	4620      	mov	r0, r4
    69be:	f7ff fbb7 	bl	6130 <ExFatFile::addCluster()>
    69c2:	b918      	cbnz	r0, 69cc <ExFatFile::write(void const*, unsigned int)+0x6c>
    69c4:	e7ea      	b.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    69c6:	69e3      	ldr	r3, [r4, #28]
    69c8:	b323      	cbz	r3, 6a14 <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    69ca:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    69cc:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    69ce:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    69d2:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    69d6:	69a1      	ldr	r1, [r4, #24]
    69d8:	3902      	subs	r1, #2
    69da:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    69dc:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    69e0:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    69e4:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    69e6:	b916      	cbnz	r6, 69ee <ExFatFile::write(void const*, unsigned int)+0x8e>
    69e8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    69ec:	d21a      	bcs.n	6a24 <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    69ee:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    69f2:	42bd      	cmp	r5, r7
    69f4:	bf28      	it	cs
    69f6:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    69f8:	bb3e      	cbnz	r6, 6a4a <ExFatFile::write(void const*, unsigned int)+0xea>
    69fa:	6862      	ldr	r2, [r4, #4]
    69fc:	9200      	str	r2, [sp, #0]
    69fe:	6963      	ldr	r3, [r4, #20]
    6a00:	9301      	str	r3, [sp, #4]
    6a02:	6823      	ldr	r3, [r4, #0]
    6a04:	6922      	ldr	r2, [r4, #16]
    6a06:	4293      	cmp	r3, r2
    6a08:	9a00      	ldr	r2, [sp, #0]
    6a0a:	9b01      	ldr	r3, [sp, #4]
    6a0c:	419a      	sbcs	r2, r3
    6a0e:	d375      	bcc.n	6afc <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6a10:	2205      	movs	r2, #5
    6a12:	e01b      	b.n	6a4c <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    6a14:	4620      	mov	r0, r4
    6a16:	f7ff fb8b 	bl	6130 <ExFatFile::addCluster()>
    6a1a:	2800      	cmp	r0, #0
    6a1c:	d0be      	beq.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    6a1e:	69a3      	ldr	r3, [r4, #24]
    6a20:	61e3      	str	r3, [r4, #28]
    6a22:	e7d3      	b.n	69cc <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6a24:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    6a28:	d271      	bcs.n	6b0e <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    6a2a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    6a2e:	4299      	cmp	r1, r3
    6a30:	f000 808d 	beq.w	6b4e <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    6a34:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6a38:	6803      	ldr	r3, [r0, #0]
    6a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a3c:	4642      	mov	r2, r8
    6a3e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6a40:	2800      	cmp	r0, #0
    6a42:	d0ab      	beq.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    6a44:	f44f 7500 	mov.w	r5, #512	; 0x200
    6a48:	e010      	b.n	6a6c <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6a4a:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    6a4c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6a50:	f005 f963 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6a54:	2800      	cmp	r0, #0
    6a56:	d0a1      	beq.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    6a58:	462a      	mov	r2, r5
    6a5a:	4641      	mov	r1, r8
    6a5c:	4430      	add	r0, r6
    6a5e:	f006 fd07 	bl	d470 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6a62:	6a20      	ldr	r0, [r4, #32]
    6a64:	442e      	add	r6, r5
    6a66:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    6a6a:	d049      	beq.n	6b00 <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    6a6c:	6823      	ldr	r3, [r4, #0]
    6a6e:	6862      	ldr	r2, [r4, #4]
    6a70:	18eb      	adds	r3, r5, r3
    6a72:	f142 0200 	adc.w	r2, r2, #0
    6a76:	6023      	str	r3, [r4, #0]
    6a78:	6062      	str	r2, [r4, #4]
    src += n;
    6a7a:	44a8      	add	r8, r5
    toWrite -= n;
    6a7c:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    6a7e:	6920      	ldr	r0, [r4, #16]
    6a80:	6961      	ldr	r1, [r4, #20]
    6a82:	4298      	cmp	r0, r3
    6a84:	4191      	sbcs	r1, r2
    6a86:	d207      	bcs.n	6a98 <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6a88:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    6a8c:	f061 017f 	orn	r1, r1, #127	; 0x7f
    6a90:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6a94:	6123      	str	r3, [r4, #16]
    6a96:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    6a98:	2f00      	cmp	r7, #0
    6a9a:	d060      	beq.n	6b5e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6a9c:	6a20      	ldr	r0, [r4, #32]
    6a9e:	6825      	ldr	r5, [r4, #0]
    6aa0:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    6aa4:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6aa6:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6aaa:	2d00      	cmp	r5, #0
    6aac:	d18e      	bne.n	69cc <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    6aae:	69a1      	ldr	r1, [r4, #24]
    6ab0:	2900      	cmp	r1, #0
    6ab2:	d088      	beq.n	69c6 <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    6ab4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6ab8:	f013 0f40 	tst.w	r3, #64	; 0x40
    6abc:	f43f af78 	beq.w	69b0 <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6ac0:	68a3      	ldr	r3, [r4, #8]
    6ac2:	68e2      	ldr	r2, [r4, #12]
    6ac4:	3b01      	subs	r3, #1
    6ac6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6aca:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    6ace:	3009      	adds	r0, #9
    6ad0:	b2c0      	uxtb	r0, r0
    6ad2:	f1c0 0e20 	rsb	lr, r0, #32
    6ad6:	f1a0 0c20 	sub.w	ip, r0, #32
    6ada:	40c3      	lsrs	r3, r0
    6adc:	fa02 fe0e 	lsl.w	lr, r2, lr
    6ae0:	ea43 030e 	orr.w	r3, r3, lr
    6ae4:	fa22 fc0c 	lsr.w	ip, r2, ip
    6ae8:	ea43 030c 	orr.w	r3, r3, ip
    6aec:	69e2      	ldr	r2, [r4, #28]
    6aee:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    6af0:	4299      	cmp	r1, r3
    6af2:	f4bf af63 	bcs.w	69bc <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    6af6:	3101      	adds	r1, #1
    6af8:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    6afa:	e767      	b.n	69cc <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6afc:	464a      	mov	r2, r9
    6afe:	e7a5      	b.n	6a4c <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    6b00:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6b04:	f005 f8e2 	bl	bccc <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    6b08:	2800      	cmp	r0, #0
    6b0a:	d1af      	bne.n	6a6c <ExFatFile::write(void const*, unsigned int)+0x10c>
    6b0c:	e746      	b.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6b0e:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6b12:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6b16:	0a7a      	lsrs	r2, r7, #9
    6b18:	4293      	cmp	r3, r2
    6b1a:	bf28      	it	cs
    6b1c:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    6b1e:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    6b20:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    6b24:	4291      	cmp	r1, r2
    6b26:	d809      	bhi.n	6b3c <ExFatFile::write(void const*, unsigned int)+0x1dc>
    6b28:	18ce      	adds	r6, r1, r3
    6b2a:	42b2      	cmp	r2, r6
    6b2c:	d206      	bcs.n	6b3c <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    6b2e:	2200      	movs	r2, #0
    6b30:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6b38:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6b3c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    6b40:	6802      	ldr	r2, [r0, #0]
    6b42:	6a96      	ldr	r6, [r2, #40]	; 0x28
    6b44:	4642      	mov	r2, r8
    6b46:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6b48:	2800      	cmp	r0, #0
    6b4a:	d18f      	bne.n	6a6c <ExFatFile::write(void const*, unsigned int)+0x10c>
    6b4c:	e726      	b.n	699c <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    6b4e:	2300      	movs	r3, #0
    6b50:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6b58:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    6b5c:	e76a      	b.n	6a34 <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    6b5e:	6821      	ldr	r1, [r4, #0]
    6b60:	6862      	ldr	r2, [r4, #4]
    6b62:	68a0      	ldr	r0, [r4, #8]
    6b64:	68e3      	ldr	r3, [r4, #12]
    6b66:	4288      	cmp	r0, r1
    6b68:	4193      	sbcs	r3, r2
    6b6a:	d209      	bcs.n	6b80 <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    6b6c:	60a1      	str	r1, [r4, #8]
    6b6e:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6b70:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b78:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6b7c:	4658      	mov	r0, fp
    6b7e:	e714      	b.n	69aa <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    6b80:	4b06      	ldr	r3, [pc, #24]	; (6b9c <ExFatFile::write(void const*, unsigned int)+0x23c>)
    6b82:	681b      	ldr	r3, [r3, #0]
    6b84:	b13b      	cbz	r3, 6b96 <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6b86:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6b8e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    6b92:	4658      	mov	r0, fp
    6b94:	e709      	b.n	69aa <ExFatFile::write(void const*, unsigned int)+0x4a>
    6b96:	4658      	mov	r0, fp
    6b98:	e707      	b.n	69aa <ExFatFile::write(void const*, unsigned int)+0x4a>
    6b9a:	bf00      	nop
    6b9c:	20004c5c 	.word	0x20004c5c

00006ba0 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6ba0:	b161      	cbz	r1, 6bbc <Print::write(char const*)+0x1c>
    6ba2:	b538      	push	{r3, r4, r5, lr}
    6ba4:	4604      	mov	r4, r0
    6ba6:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    6ba8:	4608      	mov	r0, r1
    6baa:	f00b fb49 	bl	12240 <strlen>
    6bae:	4602      	mov	r2, r0
    6bb0:	6823      	ldr	r3, [r4, #0]
    6bb2:	685b      	ldr	r3, [r3, #4]
    6bb4:	4629      	mov	r1, r5
    6bb6:	4620      	mov	r0, r4
    6bb8:	4798      	blx	r3
    6bba:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    6bbc:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    6bbe:	4770      	bx	lr

00006bc0 <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    6bc0:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6bc2:	6883      	ldr	r3, [r0, #8]
    6bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    6bc8:	b173      	cbz	r3, 6be8 <ExFatFormatter::syncUpcase()+0x28>
    6bca:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    6bcc:	2000      	movs	r0, #0
    6bce:	690a      	ldr	r2, [r1, #16]
    6bd0:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    6bd2:	3301      	adds	r3, #1
    6bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6bd8:	d3f9      	bcc.n	6bce <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    6bda:	68c8      	ldr	r0, [r1, #12]
    6bdc:	6803      	ldr	r3, [r0, #0]
    6bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6be0:	690a      	ldr	r2, [r1, #16]
    6be2:	6809      	ldr	r1, [r1, #0]
    6be4:	4798      	blx	r3
}
    6be6:	bd08      	pop	{r3, pc}
    return true;
    6be8:	2001      	movs	r0, #1
    6bea:	e7fc      	b.n	6be6 <ExFatFormatter::syncUpcase()+0x26>

00006bec <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6bec:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    6bee:	6882      	ldr	r2, [r0, #8]
    6bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    6bf4:	6900      	ldr	r0, [r0, #16]
    6bf6:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    6bf8:	6858      	ldr	r0, [r3, #4]
    6bfa:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    6bfe:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    6c00:	6899      	ldr	r1, [r3, #8]
    6c02:	3101      	adds	r1, #1
    6c04:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    6c06:	f240 11ff 	movw	r1, #511	; 0x1ff
    6c0a:	428a      	cmp	r2, r1
    6c0c:	d001      	beq.n	6c12 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    6c0e:	2001      	movs	r0, #1
}
    6c10:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    6c12:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    6c14:	68d8      	ldr	r0, [r3, #12]
    6c16:	6802      	ldr	r2, [r0, #0]
    6c18:	6a54      	ldr	r4, [r2, #36]	; 0x24
    6c1a:	6819      	ldr	r1, [r3, #0]
    6c1c:	1c4a      	adds	r2, r1, #1
    6c1e:	601a      	str	r2, [r3, #0]
    6c20:	691a      	ldr	r2, [r3, #16]
    6c22:	47a0      	blx	r4
}
    6c24:	bd10      	pop	{r4, pc}

00006c26 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    6c26:	b538      	push	{r3, r4, r5, lr}
    6c28:	4605      	mov	r5, r0
    6c2a:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6c2c:	b2c9      	uxtb	r1, r1
    6c2e:	f7ff ffdd 	bl	6bec <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6c32:	b900      	cbnz	r0, 6c36 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    6c34:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    6c36:	0a21      	lsrs	r1, r4, #8
    6c38:	4628      	mov	r0, r5
    6c3a:	f7ff ffd7 	bl	6bec <ExFatFormatter::writeUpcaseByte(unsigned char)>
    6c3e:	e7f9      	b.n	6c34 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

00006c40 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    6c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c44:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    6c46:	2500      	movs	r5, #0
    6c48:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    6c4a:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    6c4c:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6c4e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6c52:	e022      	b.n	6c9a <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    6c54:	1c6c      	adds	r4, r5, #1
    6c56:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6c5a:	d208      	bcs.n	6c6e <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6c5c:	b2a0      	uxth	r0, r4
    6c5e:	f005 f9b9 	bl	bfd4 <toUpcase(unsigned short)>
    6c62:	42a0      	cmp	r0, r4
    6c64:	d103      	bne.n	6c6e <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    6c66:	3401      	adds	r4, #1
    6c68:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    6c6c:	d1f6      	bne.n	6c5c <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    6c6e:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    6c72:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    6c76:	d31d      	bcc.n	6cb4 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    6c78:	4639      	mov	r1, r7
    6c7a:	4630      	mov	r0, r6
    6c7c:	f7ff ffd3 	bl	6c26 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6c80:	4603      	mov	r3, r0
    6c82:	b308      	cbz	r0, 6cc8 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6c84:	fa1f f188 	uxth.w	r1, r8
    6c88:	4630      	mov	r0, r6
    6c8a:	f7ff ffcc 	bl	6c26 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6c8e:	4603      	mov	r3, r0
    6c90:	b1d0      	cbz	r0, 6cc8 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    6c92:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    6c94:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6c98:	d219      	bcs.n	6cce <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    6c9a:	b2a8      	uxth	r0, r5
    6c9c:	f005 f99a 	bl	bfd4 <toUpcase(unsigned short)>
    6ca0:	4601      	mov	r1, r0
    if (uc != ch) {
    6ca2:	42a8      	cmp	r0, r5
    6ca4:	d0d6      	beq.n	6c54 <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    6ca6:	4630      	mov	r0, r6
    6ca8:	f7ff ffbd 	bl	6c26 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6cac:	4603      	mov	r3, r0
    6cae:	b158      	cbz	r0, 6cc8 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    6cb0:	3501      	adds	r5, #1
    6cb2:	e7ef      	b.n	6c94 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    6cb4:	42a5      	cmp	r5, r4
    6cb6:	d2ed      	bcs.n	6c94 <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    6cb8:	b2a9      	uxth	r1, r5
    6cba:	4630      	mov	r0, r6
    6cbc:	f7ff ffb3 	bl	6c26 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    6cc0:	3501      	adds	r5, #1
    6cc2:	4603      	mov	r3, r0
    6cc4:	2800      	cmp	r0, #0
    6cc6:	d1f5      	bne.n	6cb4 <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    6cc8:	4618      	mov	r0, r3
    6cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    6cce:	4630      	mov	r0, r6
    6cd0:	f7ff ff76 	bl	6bc0 <ExFatFormatter::syncUpcase()>
    6cd4:	4603      	mov	r3, r0
    6cd6:	e7f7      	b.n	6cc8 <ExFatFormatter::writeUpcase(unsigned long)+0x88>

00006cd8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    6cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cdc:	b08b      	sub	sp, #44	; 0x2c
    6cde:	9002      	str	r0, [sp, #8]
    6ce0:	460e      	mov	r6, r1
    6ce2:	4614      	mov	r4, r2
    6ce4:	4699      	mov	r9, r3
  m_dev = dev;
    6ce6:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    6ce8:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    6cea:	680b      	ldr	r3, [r1, #0]
    6cec:	69db      	ldr	r3, [r3, #28]
    6cee:	4608      	mov	r0, r1
    6cf0:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    6cf2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    6cf6:	d369      	bcc.n	6dcc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    6cf8:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    6cfa:	2300      	movs	r3, #0
    6cfc:	2201      	movs	r2, #1
    6cfe:	3301      	adds	r3, #1
    6d00:	b2db      	uxtb	r3, r3
    6d02:	0052      	lsls	r2, r2, #1
    6d04:	bf14      	ite	ne
    6d06:	2501      	movne	r5, #1
    6d08:	2500      	moveq	r5, #0
    6d0a:	4297      	cmp	r7, r2
    6d0c:	bf94      	ite	ls
    6d0e:	2500      	movls	r5, #0
    6d10:	f005 0501 	andhi.w	r5, r5, #1
    6d14:	2d00      	cmp	r5, #0
    6d16:	d1f2      	bne.n	6cfe <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6d18:	2b1c      	cmp	r3, #28
    6d1a:	d963      	bls.n	6de4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    6d1c:	f1b3 0b0b 	subs.w	fp, r3, #11
    6d20:	bf48      	it	mi
    6d22:	f10b 0b01 	addmi.w	fp, fp, #1
    6d26:	ea4f 016b 	mov.w	r1, fp, asr #1
    6d2a:	9101      	str	r1, [sp, #4]
    6d2c:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6d30:	2201      	movs	r2, #1
    6d32:	408a      	lsls	r2, r1
    6d34:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6d36:	3301      	adds	r3, #1
    6d38:	105b      	asrs	r3, r3, #1
    6d3a:	f04f 0a01 	mov.w	sl, #1
    6d3e:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    6d42:	ea4f 034a 	mov.w	r3, sl, lsl #1
    6d46:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    6d48:	ea4f 028a 	mov.w	r2, sl, lsl #2
    6d4c:	9205      	str	r2, [sp, #20]
    6d4e:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    6d52:	9901      	ldr	r1, [sp, #4]
    6d54:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    6d58:	9203      	str	r2, [sp, #12]
    6d5a:	fa02 f801 	lsl.w	r8, r2, r1
    6d5e:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6d62:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d66:	2100      	movs	r1, #0
    6d68:	4620      	mov	r0, r4
    6d6a:	f00a fc4b 	bl	11604 <memset>
  mbr->part->beginCHS[0] = 1;
    6d6e:	2301      	movs	r3, #1
    6d70:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    6d74:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    6d78:	2307      	movs	r3, #7
    6d7a:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    6d7e:	23fe      	movs	r3, #254	; 0xfe
    6d80:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    6d84:	23ff      	movs	r3, #255	; 0xff
    6d86:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    6d8a:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    6d8e:	9b00      	ldr	r3, [sp, #0]
    6d90:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    6d94:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    6d98:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6d9c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    6da0:	6833      	ldr	r3, [r6, #0]
    6da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6da4:	4622      	mov	r2, r4
    6da6:	2100      	movs	r1, #0
    6da8:	4630      	mov	r0, r6
    6daa:	4798      	blx	r3
    6dac:	bb70      	cbnz	r0, 6e0c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    6dae:	f1b9 0f00 	cmp.w	r9, #0
    6db2:	d007      	beq.n	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    6db4:	f8d9 3000 	ldr.w	r3, [r9]
    6db8:	685b      	ldr	r3, [r3, #4]
    6dba:	220f      	movs	r2, #15
    6dbc:	49af      	ldr	r1, [pc, #700]	; (707c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    6dbe:	4648      	mov	r0, r9
    6dc0:	4798      	blx	r3
  return false;
    6dc2:	2500      	movs	r5, #0
}
    6dc4:	4628      	mov	r0, r5
    6dc6:	b00b      	add	sp, #44	; 0x2c
    6dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    6dcc:	f1b9 0f00 	cmp.w	r9, #0
    6dd0:	f000 8207 	beq.w	71e2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    6dd4:	f8d9 3000 	ldr.w	r3, [r9]
    6dd8:	685b      	ldr	r3, [r3, #4]
    6dda:	2215      	movs	r2, #21
    6ddc:	49a8      	ldr	r1, [pc, #672]	; (7080 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    6dde:	4648      	mov	r0, r9
    6de0:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    6de2:	e7e7      	b.n	6db4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6de4:	2b1a      	cmp	r3, #26
    6de6:	d809      	bhi.n	6dfc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6de8:	f44f 7380 	mov.w	r3, #256	; 0x100
    6dec:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6dee:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6df2:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    6df6:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    6dfa:	e7a2      	b.n	6d42 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
    6e00:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    6e02:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    6e06:	f8cd b004 	str.w	fp, [sp, #4]
    6e0a:	e794      	b.n	6d36 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6e10:	2100      	movs	r1, #0
    6e12:	4620      	mov	r0, r4
    6e14:	f00a fbf6 	bl	11604 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    6e18:	23eb      	movs	r3, #235	; 0xeb
    6e1a:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    6e1c:	2376      	movs	r3, #118	; 0x76
    6e1e:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    6e20:	2390      	movs	r3, #144	; 0x90
    6e22:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    6e24:	2345      	movs	r3, #69	; 0x45
    6e26:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    6e28:	2358      	movs	r3, #88	; 0x58
    6e2a:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    6e2c:	2346      	movs	r3, #70	; 0x46
    6e2e:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    6e30:	2341      	movs	r3, #65	; 0x41
    6e32:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    6e34:	2354      	movs	r3, #84	; 0x54
    6e36:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    6e38:	2320      	movs	r3, #32
    6e3a:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    6e3c:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    6e3e:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    6e40:	9b00      	ldr	r3, [sp, #0]
    6e42:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    6e44:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e48:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    6e4c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    6e50:	65a3      	str	r3, [r4, #88]	; 0x58
    6e52:	9a03      	ldr	r2, [sp, #12]
    6e54:	65e2      	str	r2, [r4, #92]	; 0x5c
    6e56:	2304      	movs	r3, #4
    6e58:	6623      	str	r3, [r4, #96]	; 0x60
    6e5a:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    6e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
    6e60:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    6e64:	2309      	movs	r3, #9
    6e66:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    6e6a:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    6e6e:	2301      	movs	r3, #1
    6e70:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    6e74:	2380      	movs	r3, #128	; 0x80
    6e76:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6e7a:	f104 0377 	add.w	r3, r4, #119	; 0x77
    6e7e:	9407      	str	r4, [sp, #28]
    6e80:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    6e84:	22f4      	movs	r2, #244	; 0xf4
    6e86:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    6e8a:	428b      	cmp	r3, r1
    6e8c:	d1fb      	bne.n	6e86 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    6e8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6e92:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6e96:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    6e98:	461f      	mov	r7, r3
    6e9a:	e003      	b.n	6ea4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6e9c:	3301      	adds	r3, #1
    6e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6ea2:	d009      	beq.n	6eb8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    6ea4:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    6ea8:	2a01      	cmp	r2, #1
    6eaa:	d9f7      	bls.n	6e9c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    6eac:	2b70      	cmp	r3, #112	; 0x70
    6eae:	d0f5      	beq.n	6e9c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    6eb0:	5ce2      	ldrb	r2, [r4, r3]
    6eb2:	eb02 0777 	add.w	r7, r2, r7, ror #1
    6eb6:	e7f1      	b.n	6e9c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    6eb8:	6833      	ldr	r3, [r6, #0]
    6eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ebc:	4622      	mov	r2, r4
    6ebe:	f8dd 8000 	ldr.w	r8, [sp]
    6ec2:	4641      	mov	r1, r8
    6ec4:	4630      	mov	r0, r6
    6ec6:	4798      	blx	r3
    6ec8:	2800      	cmp	r0, #0
    6eca:	f43f af70 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6ece:	6833      	ldr	r3, [r6, #0]
    6ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6ed2:	4622      	mov	r2, r4
    6ed4:	f8cd 8000 	str.w	r8, [sp]
    6ed8:	4641      	mov	r1, r8
    6eda:	310c      	adds	r1, #12
    6edc:	4630      	mov	r0, r6
    6ede:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6ee0:	2800      	cmp	r0, #0
    6ee2:	f43f af64 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    6ee6:	9900      	ldr	r1, [sp, #0]
    6ee8:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6eec:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ef0:	2100      	movs	r1, #0
    6ef2:	4620      	mov	r0, r4
    6ef4:	f00a fb86 	bl	11604 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6ef8:	f64a 2355 	movw	r3, #43605	; 0xaa55
    6efc:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    6f00:	9900      	ldr	r1, [sp, #0]
    6f02:	f101 0309 	add.w	r3, r1, #9
    6f06:	1e62      	subs	r2, r4, #1
    6f08:	9206      	str	r2, [sp, #24]
    6f0a:	9a07      	ldr	r2, [sp, #28]
    6f0c:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    6f10:	9508      	str	r5, [sp, #32]
    6f12:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    6f14:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    6f16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6f1a:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6f1e:	4543      	cmp	r3, r8
    6f20:	d1f9      	bne.n	6f16 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    6f22:	6833      	ldr	r3, [r6, #0]
    6f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f26:	4622      	mov	r2, r4
    6f28:	4659      	mov	r1, fp
    6f2a:	4630      	mov	r0, r6
    6f2c:	4798      	blx	r3
    6f2e:	2800      	cmp	r0, #0
    6f30:	f000 814f 	beq.w	71d2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6f34:	6833      	ldr	r3, [r6, #0]
    6f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f38:	4622      	mov	r2, r4
    6f3a:	f10b 010c 	add.w	r1, fp, #12
    6f3e:	4630      	mov	r0, r6
    6f40:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6f42:	2800      	cmp	r0, #0
    6f44:	f000 8147 	beq.w	71d6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    6f48:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    6f4c:	42ab      	cmp	r3, r5
    6f4e:	d001      	beq.n	6f54 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    6f50:	469b      	mov	fp, r3
    6f52:	e7df      	b.n	6f14 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    6f54:	9309      	str	r3, [sp, #36]	; 0x24
    6f56:	9d08      	ldr	r5, [sp, #32]
    6f58:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f5c:	2100      	movs	r1, #0
    6f5e:	4620      	mov	r0, r4
    6f60:	f00a fb50 	bl	11604 <memset>
  for (int j = 0; j < 2; j++) {
    6f64:	f10b 0b03 	add.w	fp, fp, #3
    6f68:	9508      	str	r5, [sp, #32]
    6f6a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    6f6c:	9b06      	ldr	r3, [sp, #24]
    6f6e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6f72:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    6f76:	4598      	cmp	r8, r3
    6f78:	d1f9      	bne.n	6f6e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    6f7a:	6833      	ldr	r3, [r6, #0]
    6f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f7e:	4622      	mov	r2, r4
    6f80:	4629      	mov	r1, r5
    6f82:	4630      	mov	r0, r6
    6f84:	4798      	blx	r3
    6f86:	2800      	cmp	r0, #0
    6f88:	f000 8127 	beq.w	71da <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6f8c:	6833      	ldr	r3, [r6, #0]
    6f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f90:	4622      	mov	r2, r4
    6f92:	f105 010c 	add.w	r1, r5, #12
    6f96:	4630      	mov	r0, r6
    6f98:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    6f9a:	2800      	cmp	r0, #0
    6f9c:	f000 811f 	beq.w	71de <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    6fa0:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    6fa2:	458b      	cmp	fp, r1
    6fa4:	d001      	beq.n	6faa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    6fa6:	460d      	mov	r5, r1
    6fa8:	e7e0      	b.n	6f6c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    6faa:	9509      	str	r5, [sp, #36]	; 0x24
    6fac:	9d08      	ldr	r5, [sp, #32]
    6fae:	1f23      	subs	r3, r4, #4
    6fb0:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6fb4:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    6fb8:	429a      	cmp	r2, r3
    6fba:	d1fb      	bne.n	6fb4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    6fbc:	6833      	ldr	r3, [r6, #0]
    6fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fc0:	4622      	mov	r2, r4
    6fc2:	4630      	mov	r0, r6
    6fc4:	4798      	blx	r3
    6fc6:	2800      	cmp	r0, #0
    6fc8:	f43f aef1 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    6fcc:	6833      	ldr	r3, [r6, #0]
    6fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fd0:	4622      	mov	r2, r4
    6fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
    6fd4:	310d      	adds	r1, #13
    6fd6:	4630      	mov	r0, r6
    6fd8:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    6fda:	2800      	cmp	r0, #0
    6fdc:	f43f aee7 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    6fe0:	f1b9 0f00 	cmp.w	r9, #0
    6fe4:	d006      	beq.n	6ff4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    6fe6:	f8d9 3000 	ldr.w	r3, [r9]
    6fea:	685b      	ldr	r3, [r3, #4]
    6fec:	220c      	movs	r2, #12
    6fee:	4925      	ldr	r1, [pc, #148]	; (7084 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    6ff0:	4648      	mov	r0, r9
    6ff2:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    6ff4:	9b00      	ldr	r3, [sp, #0]
    6ff6:	4453      	add	r3, sl
    6ff8:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    6ffa:	9b03      	ldr	r3, [sp, #12]
    6ffc:	ea4f 0883 	mov.w	r8, r3, lsl #2
    7000:	f208 2807 	addw	r8, r8, #519	; 0x207
    7004:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7008:	f44f 7200 	mov.w	r2, #512	; 0x200
    700c:	2100      	movs	r1, #0
    700e:	4620      	mov	r0, r4
    7010:	f00a faf8 	bl	11604 <memset>
  secBuf[0] = 0XF8;
    7014:	4623      	mov	r3, r4
    7016:	22f8      	movs	r2, #248	; 0xf8
    7018:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    701c:	22ff      	movs	r2, #255	; 0xff
    701e:	9907      	ldr	r1, [sp, #28]
    7020:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    7024:	428b      	cmp	r3, r1
    7026:	d1fb      	bne.n	7020 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    7028:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    702c:	2700      	movs	r7, #0
    702e:	e00d      	b.n	704c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    7030:	6833      	ldr	r3, [r6, #0]
    7032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7034:	4622      	mov	r2, r4
    7036:	eb0b 0107 	add.w	r1, fp, r7
    703a:	4630      	mov	r0, r6
    703c:	4798      	blx	r3
    703e:	2800      	cmp	r0, #0
    7040:	f43f aeb5 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    7044:	b19f      	cbz	r7, 706e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    7046:	3701      	adds	r7, #1
    7048:	45ba      	cmp	sl, r7
    704a:	d91f      	bls.n	708c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    704c:	fbb7 f3f8 	udiv	r3, r7, r8
    7050:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    7054:	2b00      	cmp	r3, #0
    7056:	d1eb      	bne.n	7030 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    7058:	f1b9 0f00 	cmp.w	r9, #0
    705c:	d0e8      	beq.n	7030 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    705e:	f8d9 3000 	ldr.w	r3, [r9]
    7062:	685b      	ldr	r3, [r3, #4]
    7064:	2201      	movs	r2, #1
    7066:	4908      	ldr	r1, [pc, #32]	; (7088 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    7068:	4648      	mov	r0, r9
    706a:	4798      	blx	r3
    706c:	e7e0      	b.n	7030 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    706e:	f44f 7200 	mov.w	r2, #512	; 0x200
    7072:	2100      	movs	r1, #0
    7074:	4620      	mov	r0, r4
    7076:	f00a fac5 	bl	11604 <memset>
    707a:	e7e4      	b.n	7046 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    707c:	20002034 	.word	0x20002034
    7080:	20001fd4 	.word	0x20001fd4
    7084:	20001fec 	.word	0x20001fec
    7088:	20002e44 	.word	0x20002e44
  writeMsg(pr, "\r\n");
    708c:	f1b9 0f00 	cmp.w	r9, #0
    7090:	f000 80ad 	beq.w	71ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    7094:	f8d9 3000 	ldr.w	r3, [r9]
    7098:	685b      	ldr	r3, [r3, #4]
    709a:	2202      	movs	r2, #2
    709c:	4969      	ldr	r1, [pc, #420]	; (7244 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    709e:	4648      	mov	r0, r9
    70a0:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    70a2:	9f03      	ldr	r7, [sp, #12]
    70a4:	3707      	adds	r7, #7
    70a6:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    70a8:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    70ac:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    70b0:	9b04      	ldr	r3, [sp, #16]
    70b2:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    70b6:	f4ff ae7d 	bcc.w	6db4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    70ba:	f44f 7200 	mov.w	r2, #512	; 0x200
    70be:	2100      	movs	r1, #0
    70c0:	4620      	mov	r0, r4
    70c2:	f00a fa9f 	bl	11604 <memset>
  secBuf[0] = 0X7;
    70c6:	2307      	movs	r3, #7
    70c8:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    70ca:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    70ce:	d31b      	bcc.n	7108 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    70d0:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    70d4:	46c3      	mov	fp, r8
    70d6:	e005      	b.n	70e4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    70d8:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    70dc:	f108 0801 	add.w	r8, r8, #1
    70e0:	45c2      	cmp	sl, r8
    70e2:	d00d      	beq.n	7100 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    70e4:	6833      	ldr	r3, [r6, #0]
    70e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70e8:	4622      	mov	r2, r4
    70ea:	9905      	ldr	r1, [sp, #20]
    70ec:	4441      	add	r1, r8
    70ee:	4630      	mov	r0, r6
    70f0:	4798      	blx	r3
    70f2:	2800      	cmp	r0, #0
    70f4:	f43f ae5b 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    70f8:	f1b8 0f00 	cmp.w	r8, #0
    70fc:	d1ee      	bne.n	70dc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
    70fe:	e7eb      	b.n	70d8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
    7100:	f1b9 0f00 	cmp.w	r9, #0
    7104:	f000 808b 	beq.w	721e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
    7108:	f8d9 3000 	ldr.w	r3, [r9]
    710c:	685b      	ldr	r3, [r3, #4]
    710e:	2216      	movs	r2, #22
    7110:	494d      	ldr	r1, [pc, #308]	; (7248 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
    7112:	4648      	mov	r0, r9
    7114:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    7116:	9b05      	ldr	r3, [sp, #20]
    7118:	9a04      	ldr	r2, [sp, #16]
    711a:	1899      	adds	r1, r3, r2
    711c:	9802      	ldr	r0, [sp, #8]
    711e:	f7ff fd8f 	bl	6c40 <ExFatFormatter::writeUpcase(unsigned long)>
    7122:	2800      	cmp	r0, #0
    7124:	f43f ae46 	beq.w	6db4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    7128:	f44f 7300 	mov.w	r3, #512	; 0x200
    712c:	9a01      	ldr	r2, [sp, #4]
    712e:	4093      	lsls	r3, r2
    7130:	9a02      	ldr	r2, [sp, #8]
    7132:	6892      	ldr	r2, [r2, #8]
    7134:	429a      	cmp	r2, r3
    7136:	f63f ae3d 	bhi.w	6db4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
    713a:	f1b9 0f00 	cmp.w	r9, #0
    713e:	d003      	beq.n	7148 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
    7140:	4942      	ldr	r1, [pc, #264]	; (724c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
    7142:	4648      	mov	r0, r9
    7144:	f7ff fd2c 	bl	6ba0 <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    7148:	f04f 0a02 	mov.w	sl, #2
    714c:	9b01      	ldr	r3, [sp, #4]
    714e:	fa0a f803 	lsl.w	r8, sl, r3
    7152:	9b05      	ldr	r3, [sp, #20]
    7154:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7156:	f44f 7200 	mov.w	r2, #512	; 0x200
    715a:	2100      	movs	r1, #0
    715c:	4620      	mov	r0, r4
    715e:	f00a fa51 	bl	11604 <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    7162:	2203      	movs	r2, #3
    7164:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
    7166:	2381      	movs	r3, #129	; 0x81
    7168:	f884 3020 	strb.w	r3, [r4, #32]
    716c:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
    7170:	2300      	movs	r3, #0
    7172:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
    7174:	2182      	movs	r1, #130	; 0x82
    7176:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
    717a:	9802      	ldr	r0, [sp, #8]
    717c:	6841      	ldr	r1, [r0, #4]
    717e:	6461      	str	r1, [r4, #68]	; 0x44
    7180:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
    7182:	6882      	ldr	r2, [r0, #8]
    7184:	65a2      	str	r2, [r4, #88]	; 0x58
    7186:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    7188:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
    718a:	f44f 7a00 	mov.w	sl, #512	; 0x200
    718e:	469b      	mov	fp, r3
    7190:	e005      	b.n	719e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
    7192:	4652      	mov	r2, sl
    7194:	4659      	mov	r1, fp
    7196:	4620      	mov	r0, r4
    7198:	f00a fa34 	bl	11604 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    719c:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    719e:	6833      	ldr	r3, [r6, #0]
    71a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71a2:	4622      	mov	r2, r4
    71a4:	eb08 0107 	add.w	r1, r8, r7
    71a8:	4630      	mov	r0, r6
    71aa:	4798      	blx	r3
    71ac:	9000      	str	r0, [sp, #0]
    71ae:	2800      	cmp	r0, #0
    71b0:	f43f adfd 	beq.w	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    71b4:	2f00      	cmp	r7, #0
    71b6:	d0ec      	beq.n	7192 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
    71b8:	3701      	adds	r7, #1
    71ba:	9b04      	ldr	r3, [sp, #16]
    71bc:	42bb      	cmp	r3, r7
    71be:	d1ee      	bne.n	719e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
    71c0:	f1b9 0f00 	cmp.w	r9, #0
    71c4:	d00f      	beq.n	71e6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    71c6:	4922      	ldr	r1, [pc, #136]	; (7250 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
    71c8:	4648      	mov	r0, r9
    71ca:	f7ff fce9 	bl	6ba0 <Print::write(char const*)>
  return true;
    71ce:	9d00      	ldr	r5, [sp, #0]
    71d0:	e5f8      	b.n	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    71d2:	9d08      	ldr	r5, [sp, #32]
    71d4:	e5eb      	b.n	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    71d6:	9d08      	ldr	r5, [sp, #32]
    71d8:	e5e9      	b.n	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    71da:	9d08      	ldr	r5, [sp, #32]
    71dc:	e5e7      	b.n	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    71de:	9d08      	ldr	r5, [sp, #32]
    71e0:	e5e5      	b.n	6dae <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
    71e2:	2500      	movs	r5, #0
    71e4:	e5ee      	b.n	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
    71e6:	9d00      	ldr	r5, [sp, #0]
    71e8:	e5ec      	b.n	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
    71ea:	4605      	mov	r5, r0
    71ec:	e5ea      	b.n	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
    71ee:	9f03      	ldr	r7, [sp, #12]
    71f0:	3707      	adds	r7, #7
    71f2:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    71f4:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    71f8:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    71fc:	9b04      	ldr	r3, [sp, #16]
    71fe:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    7202:	f4ff addf 	bcc.w	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    7206:	f44f 7200 	mov.w	r2, #512	; 0x200
    720a:	2100      	movs	r1, #0
    720c:	4620      	mov	r0, r4
    720e:	f00a f9f9 	bl	11604 <memset>
  secBuf[0] = 0X7;
    7212:	2307      	movs	r3, #7
    7214:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    7216:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    721a:	f4bf af59 	bcs.w	70d0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    721e:	9b05      	ldr	r3, [sp, #20]
    7220:	9a04      	ldr	r2, [sp, #16]
    7222:	1899      	adds	r1, r3, r2
    7224:	9802      	ldr	r0, [sp, #8]
    7226:	f7ff fd0b 	bl	6c40 <ExFatFormatter::writeUpcase(unsigned long)>
    722a:	2800      	cmp	r0, #0
    722c:	d0dd      	beq.n	71ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    722e:	f44f 7300 	mov.w	r3, #512	; 0x200
    7232:	9a01      	ldr	r2, [sp, #4]
    7234:	4093      	lsls	r3, r2
    7236:	9a02      	ldr	r2, [sp, #8]
    7238:	6892      	ldr	r2, [r2, #8]
    723a:	429a      	cmp	r2, r3
    723c:	f67f af7d 	bls.w	713a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
    7240:	e5c0      	b.n	6dc4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    7242:	bf00      	nop
    7244:	20002010 	.word	0x20002010
    7248:	20001ffc 	.word	0x20001ffc
    724c:	20002014 	.word	0x20002014
    7250:	20002024 	.word	0x20002024

00007254 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    7254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7258:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
    725a:	460e      	mov	r6, r1
    725c:	f101 081e 	add.w	r8, r1, #30
    7260:	e00c      	b.n	727c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    7262:	4620      	mov	r0, r4
    7264:	f004 fd98 	bl	bd98 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    7268:	f004 feb4 	bl	bfd4 <toUpcase(unsigned short)>
    726c:	4605      	mov	r5, r0
    726e:	4638      	mov	r0, r7
    7270:	f004 feb0 	bl	bfd4 <toUpcase(unsigned short)>
    7274:	4285      	cmp	r5, r0
    7276:	d111      	bne.n	729c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
    7278:	4546      	cmp	r6, r8
    727a:	d00d      	beq.n	7298 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
    727c:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
    7280:	89a3      	ldrh	r3, [r4, #12]
    7282:	2b00      	cmp	r3, #0
    7284:	d1ed      	bne.n	7262 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
    7286:	6862      	ldr	r2, [r4, #4]
    7288:	68a3      	ldr	r3, [r4, #8]
    728a:	429a      	cmp	r2, r3
    728c:	d1e9      	bne.n	7262 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
    728e:	fab7 f087 	clz	r0, r7
    7292:	0940      	lsrs	r0, r0, #5
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
}
    7294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    7298:	2001      	movs	r0, #1
    729a:	e7fb      	b.n	7294 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
    729c:	2000      	movs	r0, #0
    729e:	e7f9      	b.n	7294 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

000072a0 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    72a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72a4:	b083      	sub	sp, #12
    72a6:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    72a8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    72ac:	2b00      	cmp	r3, #0
    72ae:	d03e      	beq.n	732e <ExFatFile::getName8(char*, unsigned int)+0x8e>
    72b0:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    72b2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    72b6:	2b01      	cmp	r3, #1
    72b8:	d94b      	bls.n	7352 <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
    72ba:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    72bc:	2302      	movs	r3, #2
    72be:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
    72c0:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72c2:	3a01      	subs	r2, #1
    72c4:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    72c6:	f8df b098 	ldr.w	fp, [pc, #152]	; 7360 <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    72ca:	2200      	movs	r2, #0
    72cc:	9901      	ldr	r1, [sp, #4]
    72ce:	4648      	mov	r0, r9
    72d0:	f7fe fa8a 	bl	57e8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    72d4:	b358      	cbz	r0, 732e <ExFatFile::getName8(char*, unsigned int)+0x8e>
    72d6:	7803      	ldrb	r3, [r0, #0]
    72d8:	2bc1      	cmp	r3, #193	; 0xc1
    72da:	d128      	bne.n	732e <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
    72dc:	4605      	mov	r5, r0
    72de:	f100 081e 	add.w	r8, r0, #30
    72e2:	e00f      	b.n	7304 <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
    72e4:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    72e8:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    72ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    72ee:	d31b      	bcc.n	7328 <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
    72f0:	b380      	cbz	r0, 7354 <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72f2:	463a      	mov	r2, r7
    72f4:	4631      	mov	r1, r6
    72f6:	f004 fdca 	bl	be8e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    72fa:	4606      	mov	r6, r0
    72fc:	b1b8      	cbz	r0, 732e <ExFatFile::getName8(char*, unsigned int)+0x8e>
    72fe:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    7300:	45a8      	cmp	r8, r5
    7302:	d01c      	beq.n	733e <ExFatFile::getName8(char*, unsigned int)+0x9e>
    7304:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    7308:	2c00      	cmp	r4, #0
    730a:	d0eb      	beq.n	72e4 <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
    730c:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7310:	b29b      	uxth	r3, r3
    7312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    7316:	d20a      	bcs.n	732e <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7318:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    731c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    7320:	4304      	orrs	r4, r0
    7322:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
    7326:	e7e4      	b.n	72f2 <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
    7328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    732c:	d305      	bcc.n	733a <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
    732e:	2000      	movs	r0, #0
    7330:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
    7334:	b003      	add	sp, #12
    7336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    733a:	4604      	mov	r4, r0
    733c:	e7e0      	b.n	7300 <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    733e:	9b01      	ldr	r3, [sp, #4]
    7340:	3301      	adds	r3, #1
    7342:	b2db      	uxtb	r3, r3
    7344:	461a      	mov	r2, r3
    7346:	9301      	str	r3, [sp, #4]
    7348:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
    734c:	4293      	cmp	r3, r2
    734e:	d2bc      	bcs.n	72ca <ExFatFile::getName8(char*, unsigned int)+0x2a>
    7350:	e000      	b.n	7354 <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
    7352:	460e      	mov	r6, r1
  *str = '\0';
    7354:	2300      	movs	r3, #0
    7356:	7033      	strb	r3, [r6, #0]
  return str - name;
    7358:	eba6 000a 	sub.w	r0, r6, sl
    735c:	e7ea      	b.n	7334 <ExFatFile::getName8(char*, unsigned int)+0x94>
    735e:	bf00      	nop
    7360:	000ffc00 	.word	0x000ffc00

00007364 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    7364:	b570      	push	{r4, r5, r6, lr}
    7366:	460c      	mov	r4, r1
    next = begin;
    7368:	680b      	ldr	r3, [r1, #0]
    736a:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    736c:	2600      	movs	r6, #0
    736e:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    7370:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    7372:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
    7376:	e016      	b.n	73a6 <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
    7378:	4620      	mov	r0, r4
    737a:	f004 fd0d 	bl	bd98 <FsName::get16()>
    if (u == 0XFFFF) {
    737e:	42a8      	cmp	r0, r5
    7380:	d020      	beq.n	73c4 <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
    7382:	f004 fe27 	bl	bfd4 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7386:	03f3      	lsls	r3, r6, #15
    7388:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
    738c:	fa53 f380 	uxtab	r3, r3, r0
    7390:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    7392:	f3c3 034e 	ubfx	r3, r3, #1, #15
    7396:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    739a:	0a00      	lsrs	r0, r0, #8
    739c:	fa10 f383 	uxtah	r3, r0, r3
    73a0:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    73a2:	6920      	ldr	r0, [r4, #16]
    73a4:	3001      	adds	r0, #1
  fname->nameLength = 0;
    73a6:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
    73a8:	89a3      	ldrh	r3, [r4, #12]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d1e4      	bne.n	7378 <ExFatFile::hashName(ExName_t*)+0x14>
    73ae:	6862      	ldr	r2, [r4, #4]
    73b0:	68a3      	ldr	r3, [r4, #8]
    73b2:	429a      	cmp	r2, r3
    73b4:	d1e0      	bne.n	7378 <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
    73b6:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    73b8:	3801      	subs	r0, #1
    73ba:	28fe      	cmp	r0, #254	; 0xfe
    73bc:	bf8c      	ite	hi
    73be:	2000      	movhi	r0, #0
    73c0:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    73c2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    73c4:	2000      	movs	r0, #0
    73c6:	e7fc      	b.n	73c2 <ExFatFile::hashName(ExName_t*)+0x5e>

000073c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    73c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73cc:	b083      	sub	sp, #12
    73ce:	4607      	mov	r7, r0
    73d0:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    73d2:	9101      	str	r1, [sp, #4]
    73d4:	b1e9      	cbz	r1, 7412 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
    73d6:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
    73d8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
    73dc:	42b3      	cmp	r3, r6
    73de:	bf98      	it	ls
    73e0:	2600      	movls	r6, #0
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
    73e2:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    73e6:	f006 0307 	and.w	r3, r6, #7
    73ea:	2401      	movs	r4, #1
    73ec:	409c      	lsls	r4, r3
    73ee:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
    73f0:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
    73f2:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
    73f4:	f04f 0b00 	mov.w	fp, #0
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    73f8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    73fc:	465a      	mov	r2, fp
    73fe:	eb01 3115 	add.w	r1, r1, r5, lsr #12
    7402:	4638      	mov	r0, r7
    7404:	f004 fc89 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7408:	b388      	cbz	r0, 746e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
    740a:	4482      	add	sl, r0
    740c:	f500 7100 	add.w	r1, r0, #512	; 0x200
    7410:	e023      	b.n	745a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    7412:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
    7416:	e7df      	b.n	73d8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    7418:	46a8      	mov	r8, r5
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    741a:	42ae      	cmp	r6, r5
    741c:	d029      	beq.n	7472 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    741e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    7422:	42ab      	cmp	r3, r5
    7424:	d91e      	bls.n	7464 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
    7426:	0064      	lsls	r4, r4, #1
    7428:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    742c:	d010      	beq.n	7450 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
    742e:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
    7430:	4222      	tst	r2, r4
    7432:	d1f1      	bne.n	7418 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
    7434:	eba5 0308 	sub.w	r3, r5, r8
    7438:	454b      	cmp	r3, r9
    743a:	d1ee      	bne.n	741a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
    743c:	9b01      	ldr	r3, [sp, #4]
    743e:	b923      	cbnz	r3, 744a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    7440:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    7444:	bf08      	it	eq
    7446:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    744a:	f108 0002 	add.w	r0, r8, #2
    744e:	e011      	b.n	7474 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
    7450:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    7454:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
    7456:	4551      	cmp	r1, sl
    7458:	d007      	beq.n	746a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
    745a:	2c00      	cmp	r4, #0
    745c:	d0f8      	beq.n	7450 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
    745e:	f89a 2000 	ldrb.w	r2, [sl]
    7462:	e7e4      	b.n	742e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
    7464:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
    7466:	46d8      	mov	r8, fp
    7468:	465d      	mov	r5, fp
    }
    i = 0;
    746a:	46da      	mov	sl, fp
    746c:	e7c4      	b.n	73f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
    746e:	2000      	movs	r0, #0
    7470:	e000      	b.n	7474 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
    7472:	2001      	movs	r0, #1
  }
  return 0;
}
    7474:	b003      	add	sp, #12
    7476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000747a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    747a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    747e:	4615      	mov	r5, r2
    7480:	461e      	mov	r6, r3
  uint32_t sector;
  uint32_t start = cluster - 2;
    7482:	3902      	subs	r1, #2
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7484:	188b      	adds	r3, r1, r2
    7486:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    748a:	4293      	cmp	r3, r2
    748c:	d854      	bhi.n	7538 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
    748e:	4607      	mov	r7, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    7490:	b15e      	cbz	r6, 74aa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    7492:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    7496:	4283      	cmp	r3, r0
    7498:	d90d      	bls.n	74b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    749a:	4288      	cmp	r0, r1
    749c:	d30b      	bcc.n	74b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    749e:	4293      	cmp	r3, r2
    74a0:	bf28      	it	cs
    74a2:	2300      	movcs	r3, #0
    74a4:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    74a8:	e005      	b.n	74b6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    }
  } else {
    if (start < m_bitmapStart) {
    74aa:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    74ae:	428b      	cmp	r3, r1
      m_bitmapStart = start;
    74b0:	bf88      	it	hi
    74b2:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    74b6:	f001 0307 	and.w	r3, r1, #7
    74ba:	2401      	movs	r4, #1
    74bc:	409c      	lsls	r4, r3
    74be:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
    74c0:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
    74c4:	eb03 3811 	add.w	r8, r3, r1, lsr #12
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    74c8:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
    74cc:	f04f 0901 	mov.w	r9, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    74d0:	f04f 0a00 	mov.w	sl, #0
    74d4:	464a      	mov	r2, r9
    74d6:	4641      	mov	r1, r8
    74d8:	4638      	mov	r0, r7
    74da:	f004 fc1e 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    74de:	4684      	mov	ip, r0
    74e0:	b368      	cbz	r0, 753e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
    74e2:	4458      	add	r0, fp
    74e4:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
    74e8:	b1e4      	cbz	r4, 7524 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    74ea:	4603      	mov	r3, r0
    74ec:	7802      	ldrb	r2, [r0, #0]
    74ee:	4222      	tst	r2, r4
    74f0:	bf14      	ite	ne
    74f2:	2101      	movne	r1, #1
    74f4:	2100      	moveq	r1, #0
    74f6:	42b1      	cmp	r1, r6
    74f8:	d025      	beq.n	7546 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
    74fa:	4062      	eors	r2, r4
    74fc:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
    74fe:	3d01      	subs	r5, #1
    7500:	d018      	beq.n	7534 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
    7502:	0064      	lsls	r4, r4, #1
    7504:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7508:	d00c      	beq.n	7524 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
    750a:	7819      	ldrb	r1, [r3, #0]
    750c:	4221      	tst	r1, r4
    750e:	bf14      	ite	ne
    7510:	2201      	movne	r2, #1
    7512:	2200      	moveq	r2, #0
    7514:	42b2      	cmp	r2, r6
    7516:	d014      	beq.n	7542 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
    7518:	4061      	eors	r1, r4
    751a:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
    751c:	3d01      	subs	r5, #1
    751e:	d1f0      	bne.n	7502 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
    7520:	2001      	movs	r0, #1
    7522:	e00a      	b.n	753a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
    7524:	3001      	adds	r0, #1
      mask = 1;
    7526:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
    7528:	4560      	cmp	r0, ip
    752a:	d1dd      	bne.n	74e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    752c:	f108 0801 	add.w	r8, r8, #1
    i = 0;
    7530:	46d3      	mov	fp, sl
    7532:	e7cf      	b.n	74d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
    7534:	2001      	movs	r0, #1
    7536:	e000      	b.n	753a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  }

 fail:
  return false;
    7538:	2000      	movs	r0, #0
}
    753a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    753e:	2000      	movs	r0, #0
    7540:	e7fb      	b.n	753a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    7542:	2000      	movs	r0, #0
    7544:	e7f9      	b.n	753a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    7546:	2000      	movs	r0, #0
    7548:	e7f7      	b.n	753a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

0000754a <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    754a:	b510      	push	{r4, lr}
    754c:	460c      	mov	r4, r1
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    754e:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7552:	6849      	ldr	r1, [r1, #4]
    7554:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
    7556:	6823      	ldr	r3, [r4, #0]
    7558:	3b02      	subs	r3, #2
    755a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    755e:	fa03 f30c 	lsl.w	r3, r3, ip
    7562:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    7566:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
    756a:	4419      	add	r1, r3
    756c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7570:	f004 fbd3 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    7574:	4603      	mov	r3, r0
    7576:	b118      	cbz	r0, 7580 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
    7578:	6862      	ldr	r2, [r4, #4]
    757a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    757e:	4413      	add	r3, r2
}
    7580:	4618      	mov	r0, r3
    7582:	bd10      	pop	{r4, pc}

00007584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7584:	b538      	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    7586:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    758a:	3301      	adds	r3, #1
    758c:	428b      	cmp	r3, r1
    758e:	d202      	bcs.n	7596 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    DBG_FAIL_MACRO;
    return -1;
    7590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    7594:	bd38      	pop	{r3, r4, r5, pc}
    7596:	460c      	mov	r4, r1
    7598:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    759a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    759e:	2200      	movs	r2, #0
    75a0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    75a4:	f500 7004 	add.w	r0, r0, #528	; 0x210
    75a8:	f004 fbb7 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    75ac:	b148      	cbz	r0, 75c2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    75ae:	00a4      	lsls	r4, r4, #2
    75b0:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    75b4:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    75b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    75ba:	d005      	beq.n	75c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
    75bc:	602b      	str	r3, [r5, #0]
  return 1;
    75be:	2001      	movs	r0, #1
    75c0:	e7e8      	b.n	7594 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
    75c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    75c6:	e7e5      	b.n	7594 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
    75c8:	2000      	movs	r0, #0
    75ca:	e7e3      	b.n	7594 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

000075cc <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    75cc:	b530      	push	{r4, r5, lr}
    75ce:	b083      	sub	sp, #12
    75d0:	4605      	mov	r5, r0
    75d2:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
    75d4:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
    75d6:	aa01      	add	r2, sp, #4
    75d8:	9901      	ldr	r1, [sp, #4]
    75da:	4628      	mov	r0, r5
    75dc:	f7ff ffd2 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    75e0:	2800      	cmp	r0, #0
    75e2:	db03      	blt.n	75ec <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
    75e4:	3401      	adds	r4, #1
  } while (status);
    75e6:	2800      	cmp	r0, #0
    75e8:	d1f5      	bne.n	75d6 <ExFatPartition::chainSize(unsigned long)+0xa>
    75ea:	e000      	b.n	75ee <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
    75ec:	2400      	movs	r4, #0
}
    75ee:	4620      	mov	r0, r4
    75f0:	b003      	add	sp, #12
    75f2:	bd30      	pop	{r4, r5, pc}

000075f4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    75f4:	b570      	push	{r4, r5, r6, lr}
    75f6:	4606      	mov	r6, r0
    75f8:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    75fa:	6849      	ldr	r1, [r1, #4]
    75fc:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7600:	400b      	ands	r3, r1
    7602:	4413      	add	r3, r2
  pos->position += offset;
    7604:	4411      	add	r1, r2
    7606:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7608:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    760c:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
    760e:	b2d2      	uxtb	r2, r2
    7610:	40d3      	lsrs	r3, r2
  while (tmp--) {
    7612:	1e5d      	subs	r5, r3, #1
    7614:	b963      	cbnz	r3, 7630 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
    7616:	2001      	movs	r0, #1
    7618:	e012      	b.n	7640 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
    761a:	4622      	mov	r2, r4
    761c:	6821      	ldr	r1, [r4, #0]
    761e:	4630      	mov	r0, r6
    7620:	f7ff ffb0 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    7624:	2801      	cmp	r0, #1
    7626:	d10b      	bne.n	7640 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
    7628:	3d01      	subs	r5, #1
    762a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    762e:	d006      	beq.n	763e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
    7630:	7a23      	ldrb	r3, [r4, #8]
    7632:	2b00      	cmp	r3, #0
    7634:	d0f1      	beq.n	761a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
    7636:	6823      	ldr	r3, [r4, #0]
    7638:	3301      	adds	r3, #1
    763a:	6023      	str	r3, [r4, #0]
    763c:	e7f4      	b.n	7628 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
    763e:	2001      	movs	r0, #1
}
    7640:	bd70      	pop	{r4, r5, r6, pc}

00007642 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7642:	2901      	cmp	r1, #1
    7644:	d919      	bls.n	767a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7646:	b538      	push	{r3, r4, r5, lr}
    7648:	460c      	mov	r4, r1
    764a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    764c:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7650:	3301      	adds	r3, #1
    7652:	428b      	cmp	r3, r1
    7654:	d201      	bcs.n	765a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    7656:	2000      	movs	r0, #0
}
    7658:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    765a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    765e:	2201      	movs	r2, #1
    7660:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7664:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7668:	f004 fb57 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    766c:	b138      	cbz	r0, 767e <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    766e:	00a4      	lsls	r4, r4, #2
    7670:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    7674:	5105      	str	r5, [r0, r4]
  return true;
    7676:	2001      	movs	r0, #1
    7678:	e7ee      	b.n	7658 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    767a:	2000      	movs	r0, #0
}
    767c:	4770      	bx	lr
  return false;
    767e:	2000      	movs	r0, #0
    7680:	e7ea      	b.n	7658 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

00007682 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    7682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7686:	b082      	sub	sp, #8
    7688:	4606      	mov	r6, r0
    768a:	460c      	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    768c:	460f      	mov	r7, r1
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    768e:	f04f 0800 	mov.w	r8, #0
    7692:	e00d      	b.n	76b0 <ExFatPartition::freeChain(unsigned long)+0x2e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    }
    cluster = next;
    7694:	461c      	mov	r4, r3
    7696:	e00b      	b.n	76b0 <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7698:	1c62      	adds	r2, r4, #1
    769a:	4643      	mov	r3, r8
    769c:	1bd2      	subs	r2, r2, r7
    769e:	4639      	mov	r1, r7
    76a0:	4630      	mov	r0, r6
    76a2:	f7ff feea 	bl	747a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    76a6:	4603      	mov	r3, r0
    76a8:	b318      	cbz	r0, 76f2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    76aa:	9f01      	ldr	r7, [sp, #4]
  } while (status);
    76ac:	b30d      	cbz	r5, 76f2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    76ae:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
    76b0:	aa01      	add	r2, sp, #4
    76b2:	4621      	mov	r1, r4
    76b4:	4630      	mov	r0, r6
    76b6:	f7ff ff65 	bl	7584 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    76ba:	1e05      	subs	r5, r0, #0
    76bc:	db18      	blt.n	76f0 <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
    76be:	4642      	mov	r2, r8
    76c0:	4621      	mov	r1, r4
    76c2:	4630      	mov	r0, r6
    76c4:	f7ff ffbd 	bl	7642 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    76c8:	4603      	mov	r3, r0
    76ca:	b190      	cbz	r0, 76f2 <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
    76cc:	2d00      	cmp	r5, #0
    76ce:	d0e3      	beq.n	7698 <ExFatPartition::freeChain(unsigned long)+0x16>
    76d0:	9b01      	ldr	r3, [sp, #4]
    76d2:	1c62      	adds	r2, r4, #1
    76d4:	429a      	cmp	r2, r3
    76d6:	d0dd      	beq.n	7694 <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    76d8:	1c62      	adds	r2, r4, #1
    76da:	4643      	mov	r3, r8
    76dc:	1bd2      	subs	r2, r2, r7
    76de:	4639      	mov	r1, r7
    76e0:	4630      	mov	r0, r6
    76e2:	f7ff feca 	bl	747a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    76e6:	4603      	mov	r3, r0
    76e8:	b118      	cbz	r0, 76f2 <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
    76ea:	9f01      	ldr	r7, [sp, #4]
    76ec:	463c      	mov	r4, r7
    76ee:	e7df      	b.n	76b0 <ExFatPartition::freeChain(unsigned long)+0x2e>

  return true;

 fail:
  return false;
    76f0:	2300      	movs	r3, #0
}
    76f2:	4618      	mov	r0, r3
    76f4:	b002      	add	sp, #8
    76f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000076fa <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    76fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    76fe:	4606      	mov	r6, r0
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
    7700:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
    7704:	2500      	movs	r5, #0
  uint32_t nc = 0;
    7706:	462c      	mov	r4, r5
    7708:	f500 7804 	add.w	r8, r0, #528	; 0x210
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
        usedCount+= 8;
      } else if (cache[i]) {
        for (uint8_t mask = 1; mask ; mask <<=1) {
    770c:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    770e:	f101 0901 	add.w	r9, r1, #1
    7712:	2200      	movs	r2, #0
    7714:	4640      	mov	r0, r8
    7716:	f004 fb00 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    771a:	b308      	cbz	r0, 7760 <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    771c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    7720:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
    7724:	e007      	b.n	7736 <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
    7726:	3508      	adds	r5, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    7728:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    772a:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    772e:	42a0      	cmp	r0, r4
    7730:	d911      	bls.n	7756 <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7732:	4574      	cmp	r4, lr
    7734:	d012      	beq.n	775c <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
    7736:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
    773a:	29ff      	cmp	r1, #255	; 0xff
    773c:	d0f3      	beq.n	7726 <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
    773e:	2900      	cmp	r1, #0
    7740:	d0f2      	beq.n	7728 <ExFatPartition::freeClusterCount()+0x2e>
    7742:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7744:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
    7746:	4219      	tst	r1, r3
            usedCount++;
    7748:	bf18      	it	ne
    774a:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    774c:	005b      	lsls	r3, r3, #1
    774e:	b2db      	uxtb	r3, r3
    7750:	3a01      	subs	r2, #1
    7752:	d1f8      	bne.n	7746 <ExFatPartition::freeClusterCount()+0x4c>
    7754:	e7e8      	b.n	7728 <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
    7756:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    7758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    775c:	4649      	mov	r1, r9
    775e:	e7d6      	b.n	770e <ExFatPartition::freeClusterCount()+0x14>
      return 0;
    7760:	2000      	movs	r0, #0
    7762:	e7f9      	b.n	7758 <ExFatPartition::freeClusterCount()+0x5e>

00007764 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7768:	4604      	mov	r4, r0
    776a:	460b      	mov	r3, r1
    776c:	4616      	mov	r6, r2
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    776e:	2100      	movs	r1, #0
    7770:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
    7774:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
    7778:	6043      	str	r3, [r0, #4]
    m_status = 0;
    777a:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
    777c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7780:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
    7782:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
    7786:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    778a:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    778e:	f500 7704 	add.w	r7, r0, #528	; 0x210
    7792:	460a      	mov	r2, r1
    7794:	4638      	mov	r0, r7
    7796:	f004 fac0 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    779a:	4680      	mov	r8, r0
    779c:	fab0 f080 	clz	r0, r0
    77a0:	0940      	lsrs	r0, r0, #5
    77a2:	2e04      	cmp	r6, #4
    77a4:	bf94      	ite	ls
    77a6:	4605      	movls	r5, r0
    77a8:	f040 0501 	orrhi.w	r5, r0, #1
    77ac:	2d00      	cmp	r5, #0
    77ae:	d154      	bne.n	785a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    77b0:	b1ce      	cbz	r6, 77e6 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    77b2:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    77b4:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    77b8:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
    77bc:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    77c0:	d14c      	bne.n	785c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    77c2:	eb08 1303 	add.w	r3, r8, r3, lsl #4
    77c6:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    77ca:	2b00      	cmp	r3, #0
    77cc:	d046      	beq.n	785c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
    77ce:	eb08 1606 	add.w	r6, r8, r6, lsl #4
    77d2:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
    77d6:	2200      	movs	r2, #0
    77d8:	4631      	mov	r1, r6
    77da:	4638      	mov	r0, r7
    77dc:	f004 fa9d 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCachePrepare(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    77e0:	4680      	mov	r8, r0
    77e2:	b908      	cbnz	r0, 77e8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
    77e4:	e03a      	b.n	785c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
    77e6:	2600      	movs	r6, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    77e8:	2205      	movs	r2, #5
    77ea:	491e      	ldr	r1, [pc, #120]	; (7864 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
    77ec:	f108 0003 	add.w	r0, r8, #3
    77f0:	f009 fae8 	bl	10dc4 <strncmp>
    77f4:	bb90      	cbnz	r0, 785c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    77f6:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
    77fa:	2b09      	cmp	r3, #9
    77fc:	d12e      	bne.n	785c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    77fe:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    7802:	4433      	add	r3, r6
    7804:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    7808:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    780c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7810:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    7814:	4433      	add	r3, r6
    7816:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    781a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    781e:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    7822:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    7826:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    782a:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    782e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7832:	3309      	adds	r3, #9
    7834:	2501      	movs	r5, #1
    7836:	fa05 f303 	lsl.w	r3, r5, r3
    783a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    783e:	3b01      	subs	r3, #1
    7840:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    7844:	2100      	movs	r1, #0
    7846:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    784a:	462a      	mov	r2, r5
    784c:	4620      	mov	r0, r4
    784e:	f7ff fdbb 	bl	73c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7852:	2340      	movs	r3, #64	; 0x40
    7854:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    7858:	e000      	b.n	785c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>

 fail:
  return false;
    785a:	2500      	movs	r5, #0
}
    785c:	4628      	mov	r0, r5
    785e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7862:	bf00      	nop
    7864:	20002044 	.word	0x20002044

00007868 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7868:	b510      	push	{r4, lr}
    786a:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    786c:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    7870:	f7ff feac 	bl	75cc <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7874:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    7878:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    787a:	b2db      	uxtb	r3, r3
}
    787c:	4098      	lsls	r0, r3
    787e:	bd10      	pop	{r4, pc}

00007880 <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    7880:	b538      	push	{r3, r4, r5, lr}
    7882:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    7884:	4602      	mov	r2, r0
    7886:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    788a:	4629      	mov	r1, r5
    788c:	6880      	ldr	r0, [r0, #8]
    788e:	f002 f940 	bl	9b12 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7892:	b140      	cbz	r0, 78a6 <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    7894:	b945      	cbnz	r5, 78a8 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7896:	78a3      	ldrb	r3, [r4, #2]
    7898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    789c:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    789e:	78a3      	ldrb	r3, [r4, #2]
    78a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    78a4:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    78a6:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    78a8:	3501      	adds	r5, #1
    78aa:	6923      	ldr	r3, [r4, #16]
    78ac:	42ab      	cmp	r3, r5
    78ae:	d0f6      	beq.n	789e <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    78b0:	78a3      	ldrb	r3, [r4, #2]
    78b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    78b6:	70a3      	strb	r3, [r4, #2]
    78b8:	e7f1      	b.n	789e <FatFile::addCluster()+0x1e>
	...

000078bc <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    78bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
    78c0:	7803      	ldrb	r3, [r0, #0]
    78c2:	f013 0f20 	tst.w	r3, #32
    78c6:	d133      	bne.n	7930 <FatFile::addDirCluster()+0x74>
    78c8:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    78ca:	6942      	ldr	r2, [r0, #20]
    78cc:	4b1b      	ldr	r3, [pc, #108]	; (793c <FatFile::addDirCluster()+0x80>)
    78ce:	429a      	cmp	r2, r3
    78d0:	d301      	bcc.n	78d6 <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    78d2:	2700      	movs	r7, #0
    78d4:	e02d      	b.n	7932 <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
    78d6:	f7ff ffd3 	bl	7880 <FatFile::addCluster()>
    78da:	4607      	mov	r7, r0
    78dc:	b348      	cbz	r0, 7932 <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
    78de:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    78e0:	692e      	ldr	r6, [r5, #16]
    78e2:	3e02      	subs	r6, #2
    78e4:	7983      	ldrb	r3, [r0, #6]
    78e6:	409e      	lsls	r6, r3
    78e8:	6943      	ldr	r3, [r0, #20]
    78ea:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    78ec:	7903      	ldrb	r3, [r0, #4]
    78ee:	b1b3      	cbz	r3, 791e <FatFile::addDirCluster()+0x62>
    78f0:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
    78f2:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
    78f6:	f44f 7a00 	mov.w	sl, #512	; 0x200
    78fa:	46a1      	mov	r9, r4
    78fc:	4642      	mov	r2, r8
    78fe:	fa56 f184 	uxtab	r1, r6, r4
    7902:	3028      	adds	r0, #40	; 0x28
    7904:	f004 fa09 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    7908:	b1b0      	cbz	r0, 7938 <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
    790a:	4652      	mov	r2, sl
    790c:	4649      	mov	r1, r9
    790e:	f009 fe79 	bl	11604 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7912:	68a8      	ldr	r0, [r5, #8]
    7914:	3401      	adds	r4, #1
    7916:	7902      	ldrb	r2, [r0, #4]
    7918:	b2e3      	uxtb	r3, r4
    791a:	429a      	cmp	r2, r3
    791c:	d8ee      	bhi.n	78fc <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    791e:	7982      	ldrb	r2, [r0, #6]
    7920:	f44f 7300 	mov.w	r3, #512	; 0x200
    7924:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7926:	696a      	ldr	r2, [r5, #20]
    7928:	fa12 f383 	uxtah	r3, r2, r3
    792c:	616b      	str	r3, [r5, #20]
  return true;
    792e:	e000      	b.n	7932 <FatFile::addDirCluster()+0x76>
  return false;
    7930:	2700      	movs	r7, #0
}
    7932:	4638      	mov	r0, r7
    7934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
    7938:	2700      	movs	r7, #0
    793a:	e7fa      	b.n	7932 <FatFile::addDirCluster()+0x76>
    793c:	001ffe00 	.word	0x001ffe00

00007940 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7940:	b510      	push	{r4, lr}
    7942:	4604      	mov	r4, r0
    7944:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
    7946:	6880      	ldr	r0, [r0, #8]
    7948:	69a1      	ldr	r1, [r4, #24]
    794a:	3028      	adds	r0, #40	; 0x28
    794c:	f004 f9e5 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
    7950:	4603      	mov	r3, r0
    7952:	b120      	cbz	r0, 795e <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
    7954:	88a2      	ldrh	r2, [r4, #4]
    7956:	f002 020f 	and.w	r2, r2, #15
    795a:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
    795e:	4618      	mov	r0, r3
    7960:	bd10      	pop	{r4, pc}

00007962 <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    7962:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
    7964:	7803      	ldrb	r3, [r0, #0]
    7966:	b10b      	cbz	r3, 796c <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    7968:	2000      	movs	r0, #0
}
    796a:	bd38      	pop	{r3, r4, r5, pc}
    796c:	4604      	mov	r4, r0
    796e:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
    7970:	2224      	movs	r2, #36	; 0x24
    7972:	2100      	movs	r1, #0
    7974:	f009 fe46 	bl	11604 <memset>
  m_vol = vol;
    7978:	60a5      	str	r5, [r4, #8]
    return m_fatType;
    797a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    797c:	2b10      	cmp	r3, #16
    797e:	d007      	beq.n	7990 <FatFile::openRoot(FatVolume*)+0x2e>
    7980:	2b20      	cmp	r3, #32
    7982:	d007      	beq.n	7994 <FatFile::openRoot(FatVolume*)+0x32>
    7984:	2b0c      	cmp	r3, #12
    7986:	d001      	beq.n	798c <FatFile::openRoot(FatVolume*)+0x2a>
    7988:	2000      	movs	r0, #0
    798a:	e7ee      	b.n	796a <FatFile::openRoot(FatVolume*)+0x8>
    798c:	2320      	movs	r3, #32
    798e:	e002      	b.n	7996 <FatFile::openRoot(FatVolume*)+0x34>
    7990:	2320      	movs	r3, #32
    7992:	e000      	b.n	7996 <FatFile::openRoot(FatVolume*)+0x34>
    7994:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7996:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7998:	2001      	movs	r0, #1
    799a:	70a0      	strb	r0, [r4, #2]
  return true;
    799c:	e7e5      	b.n	796a <FatFile::openRoot(FatVolume*)+0x8>

0000799e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    799e:	b538      	push	{r3, r4, r5, lr}
    79a0:	4604      	mov	r4, r0
    79a2:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
    79a4:	68cb      	ldr	r3, [r1, #12]
    79a6:	b91b      	cbnz	r3, 79b0 <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
    79a8:	6889      	ldr	r1, [r1, #8]
    79aa:	f7ff ffda 	bl	7962 <FatFile::openRoot(FatVolume*)>
}
    79ae:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
    79b0:	2224      	movs	r2, #36	; 0x24
    79b2:	2100      	movs	r1, #0
    79b4:	f009 fe26 	bl	11604 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    79b8:	2310      	movs	r3, #16
    79ba:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    79bc:	2001      	movs	r0, #1
    79be:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    79c0:	68ab      	ldr	r3, [r5, #8]
    79c2:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    79c4:	68eb      	ldr	r3, [r5, #12]
    79c6:	6223      	str	r3, [r4, #32]
  return true;
    79c8:	e7f1      	b.n	79ae <FatFile::openCluster(FatFile*)+0x10>

000079ca <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    79ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79ce:	b083      	sub	sp, #12
    79d0:	4604      	mov	r4, r0
    79d2:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    79d4:	7883      	ldrb	r3, [r0, #2]
    79d6:	f013 0f01 	tst.w	r3, #1
    79da:	f000 80b4 	beq.w	7b46 <FatFile::read(void*, unsigned int)+0x17c>
    79de:	4689      	mov	r9, r1
    79e0:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    79e2:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    79e4:	f013 0f08 	tst.w	r3, #8
    79e8:	d012      	beq.n	7a10 <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    79ea:	69c3      	ldr	r3, [r0, #28]
    79ec:	6942      	ldr	r2, [r0, #20]
    79ee:	1a9b      	subs	r3, r3, r2
    79f0:	460a      	mov	r2, r1
    79f2:	4299      	cmp	r1, r3
    79f4:	bf28      	it	cs
    79f6:	461a      	movcs	r2, r3
    79f8:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    79fa:	9b00      	ldr	r3, [sp, #0]
    79fc:	2b00      	cmp	r3, #0
    79fe:	f000 80b7 	beq.w	7b70 <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
    7a02:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
    7a04:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7a08:	f104 0310 	add.w	r3, r4, #16
    7a0c:	9301      	str	r3, [sp, #4]
    7a0e:	e05b      	b.n	7ac8 <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
    7a10:	f013 0f20 	tst.w	r3, #32
    7a14:	d0f1      	beq.n	79fa <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7a16:	6883      	ldr	r3, [r0, #8]
    7a18:	895a      	ldrh	r2, [r3, #10]
    7a1a:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    7a1c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    7a20:	b29b      	uxth	r3, r3
    7a22:	9a00      	ldr	r2, [sp, #0]
    7a24:	429a      	cmp	r2, r3
    7a26:	bf28      	it	cs
    7a28:	461a      	movcs	r2, r3
    7a2a:	9200      	str	r2, [sp, #0]
    7a2c:	e7e5      	b.n	79fa <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
    7a2e:	f890 a005 	ldrb.w	sl, [r0, #5]
    7a32:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    7a36:	f1b8 0f00 	cmp.w	r8, #0
    7a3a:	d109      	bne.n	7a50 <FatFile::read(void*, unsigned int)+0x86>
    7a3c:	f1ba 0f00 	cmp.w	sl, #0
    7a40:	d106      	bne.n	7a50 <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
    7a42:	b973      	cbnz	r3, 7a62 <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7a44:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
    7a48:	bf14      	ite	ne
    7a4a:	6a03      	ldrne	r3, [r0, #32]
    7a4c:	6a23      	ldreq	r3, [r4, #32]
    7a4e:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7a50:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a52:	6925      	ldr	r5, [r4, #16]
    7a54:	3d02      	subs	r5, #2
    7a56:	799a      	ldrb	r2, [r3, #6]
    7a58:	4095      	lsls	r5, r2
    7a5a:	695b      	ldr	r3, [r3, #20]
    7a5c:	441d      	add	r5, r3
    7a5e:	4455      	add	r5, sl
    7a60:	e03d      	b.n	7ade <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
    7a62:	f012 0f08 	tst.w	r2, #8
    7a66:	d007      	beq.n	7a78 <FatFile::read(void*, unsigned int)+0xae>
    7a68:	78a3      	ldrb	r3, [r4, #2]
    7a6a:	f013 0f40 	tst.w	r3, #64	; 0x40
    7a6e:	d003      	beq.n	7a78 <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
    7a70:	6923      	ldr	r3, [r4, #16]
    7a72:	3301      	adds	r3, #1
    7a74:	6123      	str	r3, [r4, #16]
    7a76:	e7eb      	b.n	7a50 <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7a78:	9a01      	ldr	r2, [sp, #4]
    7a7a:	6921      	ldr	r1, [r4, #16]
    7a7c:	f001 ff27 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7a80:	2800      	cmp	r0, #0
    7a82:	db60      	blt.n	7b46 <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
    7a84:	2800      	cmp	r0, #0
    7a86:	d1e3      	bne.n	7a50 <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
    7a88:	7823      	ldrb	r3, [r4, #0]
    7a8a:	f013 0f70 	tst.w	r3, #112	; 0x70
    7a8e:	d05a      	beq.n	7b46 <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    7a90:	9b00      	ldr	r3, [sp, #0]
    7a92:	1bd8      	subs	r0, r3, r7
    7a94:	e05d      	b.n	7b52 <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
    7a96:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
    7a9a:	42be      	cmp	r6, r7
    7a9c:	bf28      	it	cs
    7a9e:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
    7aa0:	68a0      	ldr	r0, [r4, #8]
    7aa2:	2200      	movs	r2, #0
    7aa4:	4629      	mov	r1, r5
    7aa6:	3028      	adds	r0, #40	; 0x28
    7aa8:	f004 f937 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7aac:	4601      	mov	r1, r0
    7aae:	2800      	cmp	r0, #0
    7ab0:	d049      	beq.n	7b46 <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    7ab2:	4632      	mov	r2, r6
    7ab4:	4441      	add	r1, r8
    7ab6:	4648      	mov	r0, r9
    7ab8:	f005 fcda 	bl	d470 <memcpy>
    dst += n;
    7abc:	44b1      	add	r9, r6
    m_curPosition += n;
    7abe:	6963      	ldr	r3, [r4, #20]
    7ac0:	4433      	add	r3, r6
    7ac2:	6163      	str	r3, [r4, #20]
  while (toRead) {
    7ac4:	1bbf      	subs	r7, r7, r6
    7ac6:	d0e3      	beq.n	7a90 <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7ac8:	6963      	ldr	r3, [r4, #20]
    7aca:	68a0      	ldr	r0, [r4, #8]
    7acc:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7ad0:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
    7ad2:	f012 0f20 	tst.w	r2, #32
    7ad6:	d0aa      	beq.n	7a2e <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
    7ad8:	6a05      	ldr	r5, [r0, #32]
    7ada:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    7ade:	f1b8 0f00 	cmp.w	r8, #0
    7ae2:	d1d8      	bne.n	7a96 <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7ae4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7ae8:	d3d5      	bcc.n	7a96 <FatFile::read(void*, unsigned int)+0xcc>
    7aea:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    7aee:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7af2:	429d      	cmp	r5, r3
    7af4:	d0cf      	beq.n	7a96 <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7af6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    7afa:	d32d      	bcc.n	7b58 <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7afc:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
    7b00:	7822      	ldrb	r2, [r4, #0]
    7b02:	f012 0f20 	tst.w	r2, #32
    7b06:	d106      	bne.n	7b16 <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7b08:	f89b 2004 	ldrb.w	r2, [fp, #4]
    7b0c:	eba2 020a 	sub.w	r2, r2, sl
    7b10:	4590      	cmp	r8, r2
    7b12:	bf28      	it	cs
    7b14:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
    7b16:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    7b1a:	429d      	cmp	r5, r3
    7b1c:	d808      	bhi.n	7b30 <FatFile::read(void*, unsigned int)+0x166>
    7b1e:	eb05 0208 	add.w	r2, r5, r8
    7b22:	4293      	cmp	r3, r2
    7b24:	d204      	bcs.n	7b30 <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    7b26:	f10b 0028 	add.w	r0, fp, #40	; 0x28
    7b2a:	f004 f8cf 	bl	bccc <FsCache::sync()>
    7b2e:	b150      	cbz	r0, 7b46 <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    7b30:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    7b34:	6803      	ldr	r3, [r0, #0]
    7b36:	f8d3 b014 	ldr.w	fp, [r3, #20]
    7b3a:	4643      	mov	r3, r8
    7b3c:	464a      	mov	r2, r9
    7b3e:	4629      	mov	r1, r5
    7b40:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7b42:	2800      	cmp	r0, #0
    7b44:	d1ba      	bne.n	7abc <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
    7b46:	7863      	ldrb	r3, [r4, #1]
    7b48:	f043 0302 	orr.w	r3, r3, #2
    7b4c:	7063      	strb	r3, [r4, #1]
  return -1;
    7b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7b52:	b003      	add	sp, #12
    7b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
    7b58:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
    7b5c:	6803      	ldr	r3, [r0, #0]
    7b5e:	691b      	ldr	r3, [r3, #16]
    7b60:	464a      	mov	r2, r9
    7b62:	4629      	mov	r1, r5
    7b64:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7b66:	2800      	cmp	r0, #0
    7b68:	d0ed      	beq.n	7b46 <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    7b6a:	f44f 7600 	mov.w	r6, #512	; 0x200
    7b6e:	e7a5      	b.n	7abc <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
    7b70:	9f00      	ldr	r7, [sp, #0]
    7b72:	e78d      	b.n	7a90 <FatFile::read(void*, unsigned int)+0xc6>

00007b74 <FatFile::peek()>:
int FatFile::peek() {
    7b74:	b570      	push	{r4, r5, r6, lr}
    7b76:	b082      	sub	sp, #8
    7b78:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    7b7a:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
    7b7c:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
    7b7e:	2201      	movs	r2, #1
    7b80:	f10d 0107 	add.w	r1, sp, #7
    7b84:	f7ff ff21 	bl	79ca <FatFile::read(void*, unsigned int)>
    7b88:	2801      	cmp	r0, #1
    7b8a:	bf0c      	ite	eq
    7b8c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    7b90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    7b94:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
    7b96:	6125      	str	r5, [r4, #16]
}
    7b98:	b002      	add	sp, #8
    7b9a:	bd70      	pop	{r4, r5, r6, pc}

00007b9c <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    7b9c:	b530      	push	{r4, r5, lr}
    7b9e:	b083      	sub	sp, #12
    7ba0:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7ba2:	6943      	ldr	r3, [r0, #20]
    7ba4:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
    7ba8:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
    7bac:	d009      	beq.n	7bc2 <FatFile::readDirCache(bool)+0x26>
    7bae:	2901      	cmp	r1, #1
    7bb0:	d107      	bne.n	7bc2 <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
    7bb2:	3320      	adds	r3, #32
    7bb4:	6143      	str	r3, [r0, #20]
    return m_buffer;
    7bb6:	68a0      	ldr	r0, [r4, #8]
    7bb8:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7bba:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    7bbe:	b003      	add	sp, #12
    7bc0:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    7bc2:	2201      	movs	r2, #1
    7bc4:	f10d 0107 	add.w	r1, sp, #7
    7bc8:	4620      	mov	r0, r4
    7bca:	f7ff fefe 	bl	79ca <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7bce:	b240      	sxtb	r0, r0
    7bd0:	2801      	cmp	r0, #1
    7bd2:	d103      	bne.n	7bdc <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    7bd4:	6963      	ldr	r3, [r4, #20]
    7bd6:	331f      	adds	r3, #31
    7bd8:	6163      	str	r3, [r4, #20]
    7bda:	e7ec      	b.n	7bb6 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    7bdc:	2000      	movs	r0, #0
    7bde:	e7ee      	b.n	7bbe <FatFile::readDirCache(bool)+0x22>

00007be0 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    7be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7be4:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7be6:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
    7be8:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
    7bea:	b36b      	cbz	r3, 7c48 <FatFile::seekSet(unsigned long)+0x68>
    7bec:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    7bee:	6942      	ldr	r2, [r0, #20]
    7bf0:	428a      	cmp	r2, r1
    7bf2:	d045      	beq.n	7c80 <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
    7bf4:	b361      	cbz	r1, 7c50 <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    7bf6:	f013 0f08 	tst.w	r3, #8
    7bfa:	d032      	beq.n	7c62 <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
    7bfc:	69c1      	ldr	r1, [r0, #28]
    7bfe:	42a9      	cmp	r1, r5
    7c00:	d322      	bcc.n	7c48 <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7c02:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    7c06:	f89c 1006 	ldrb.w	r1, [ip, #6]
    7c0a:	3109      	adds	r1, #9
    7c0c:	b2c9      	uxtb	r1, r1
    7c0e:	1e6e      	subs	r6, r5, #1
    7c10:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    7c12:	78a0      	ldrb	r0, [r4, #2]
    7c14:	f010 0f40 	tst.w	r0, #64	; 0x40
    7c18:	d12c      	bne.n	7c74 <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7c1a:	1e50      	subs	r0, r2, #1
    7c1c:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
    7c1e:	b10a      	cbz	r2, 7c24 <FatFile::seekSet(unsigned long)+0x44>
    7c20:	4286      	cmp	r6, r0
    7c22:	d22b      	bcs.n	7c7c <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7c24:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
    7c28:	bf14      	ite	ne
    7c2a:	f8dc 3020 	ldrne.w	r3, [ip, #32]
    7c2e:	6a23      	ldreq	r3, [r4, #32]
    7c30:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7c32:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
    7c36:	b16e      	cbz	r6, 7c54 <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7c38:	4642      	mov	r2, r8
    7c3a:	6921      	ldr	r1, [r4, #16]
    7c3c:	68a0      	ldr	r0, [r4, #8]
    7c3e:	f001 fe46 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
    7c42:	3e01      	subs	r6, #1
    7c44:	2800      	cmp	r0, #0
    7c46:	dcf6      	bgt.n	7c36 <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    7c48:	6127      	str	r7, [r4, #16]
  return false;
    7c4a:	2000      	movs	r0, #0
}
    7c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
    7c50:	2300      	movs	r3, #0
    7c52:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
    7c54:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7c56:	78a3      	ldrb	r3, [r4, #2]
    7c58:	f023 0320 	bic.w	r3, r3, #32
    7c5c:	70a3      	strb	r3, [r4, #2]
  return true;
    7c5e:	2001      	movs	r0, #1
    7c60:	e7f4      	b.n	7c4c <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
    7c62:	f013 0f20 	tst.w	r3, #32
    7c66:	d0cc      	beq.n	7c02 <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
    7c68:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    7c6a:	895b      	ldrh	r3, [r3, #10]
    7c6c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    7c70:	d9f0      	bls.n	7c54 <FatFile::seekSet(unsigned long)+0x74>
    7c72:	e7e9      	b.n	7c48 <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
    7c74:	6a23      	ldr	r3, [r4, #32]
    7c76:	4433      	add	r3, r6
    7c78:	6123      	str	r3, [r4, #16]
    goto done;
    7c7a:	e7eb      	b.n	7c54 <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
    7c7c:	1a36      	subs	r6, r6, r0
    7c7e:	e7d8      	b.n	7c32 <FatFile::seekSet(unsigned long)+0x52>
    return true;
    7c80:	2001      	movs	r0, #1
    7c82:	e7e3      	b.n	7c4c <FatFile::seekSet(unsigned long)+0x6c>

00007c84 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7c84:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7c86:	7803      	ldrb	r3, [r0, #0]
    7c88:	f013 0f10 	tst.w	r3, #16
    7c8c:	d101      	bne.n	7c92 <FatFile::rmdir()+0xe>
  return false;
    7c8e:	2000      	movs	r0, #0
}
    7c90:	bd38      	pop	{r3, r4, r5, pc}
    7c92:	4604      	mov	r4, r0
    seekSet(0);
    7c94:	2100      	movs	r1, #0
    7c96:	f7ff ffa3 	bl	7be0 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    7c9a:	2501      	movs	r5, #1
    7c9c:	4629      	mov	r1, r5
    7c9e:	4620      	mov	r0, r4
    7ca0:	f7ff ff7c 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!dir) {
    7ca4:	4603      	mov	r3, r0
    7ca6:	b168      	cbz	r0, 7cc4 <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
    7ca8:	7800      	ldrb	r0, [r0, #0]
    7caa:	b170      	cbz	r0, 7cca <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7cac:	282e      	cmp	r0, #46	; 0x2e
    7cae:	bf18      	it	ne
    7cb0:	28e5      	cmpne	r0, #229	; 0xe5
    7cb2:	bf0c      	ite	eq
    7cb4:	2001      	moveq	r0, #1
    7cb6:	2000      	movne	r0, #0
    7cb8:	d0f0      	beq.n	7c9c <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
    7cba:	7adb      	ldrb	r3, [r3, #11]
    7cbc:	f013 0f08 	tst.w	r3, #8
    7cc0:	d1ec      	bne.n	7c9c <FatFile::rmdir()+0x18>
    7cc2:	e7e5      	b.n	7c90 <FatFile::rmdir()+0xc>
      if (!getError()) {
    7cc4:	7863      	ldrb	r3, [r4, #1]
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d1e2      	bne.n	7c90 <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
    7cca:	2308      	movs	r3, #8
    7ccc:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7cce:	78a3      	ldrb	r3, [r4, #2]
    7cd0:	f043 0302 	orr.w	r3, r3, #2
    7cd4:	70a3      	strb	r3, [r4, #2]
  return remove();
    7cd6:	4620      	mov	r0, r4
    7cd8:	f001 f974 	bl	8fc4 <FatFile::remove()>
    7cdc:	e7d8      	b.n	7c90 <FatFile::rmdir()+0xc>

00007cde <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ce0:	4604      	mov	r4, r0
    7ce2:	460e      	mov	r6, r1
    7ce4:	4615      	mov	r5, r2
    7ce6:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
    7ce8:	2224      	movs	r2, #36	; 0x24
    7cea:	2100      	movs	r1, #0
    7cec:	f009 fc8a 	bl	11604 <memset>
  m_vol = dirFile->m_vol;
    7cf0:	68b0      	ldr	r0, [r6, #8]
    7cf2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
    7cf4:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
    7cf6:	6a33      	ldr	r3, [r6, #32]
    7cf8:	60e3      	str	r3, [r4, #12]
    7cfa:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
    7cfe:	f005 050f 	and.w	r5, r5, #15
    7d02:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7d06:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    7d08:	f011 0f08 	tst.w	r1, #8
    7d0c:	d113      	bne.n	7d36 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7d0e:	f001 0117 	and.w	r1, r1, #23
    7d12:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    7d14:	7ad3      	ldrb	r3, [r2, #11]
    7d16:	f013 0f18 	tst.w	r3, #24
    7d1a:	d102      	bne.n	7d22 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
    7d1c:	f041 0108 	orr.w	r1, r1, #8
    7d20:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
    7d22:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7d26:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7d28:	f007 0303 	and.w	r3, r7, #3
    7d2c:	2b01      	cmp	r3, #1
    7d2e:	d027      	beq.n	7d80 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
    7d30:	2b02      	cmp	r3, #2
    7d32:	d027      	beq.n	7d84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
    7d34:	b11b      	cbz	r3, 7d3e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
    7d36:	2000      	movs	r0, #0
    7d38:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
    7d3a:	70a0      	strb	r0, [r4, #2]
}
    7d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
    7d3e:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7d42:	d1f8      	bne.n	7d36 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7d44:	f007 0308 	and.w	r3, r7, #8
    7d48:	f043 0301 	orr.w	r3, r3, #1
    7d4c:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    7d4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7d50:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7d52:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7d54:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    7d5a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7d5c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    7d5e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7d60:	f417 4f80 	tst.w	r7, #16384	; 0x4000
    7d64:	d105      	bne.n	7d72 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
    7d66:	2001      	movs	r0, #1
    7d68:	e7e8      	b.n	7d3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7d6a:	f001 ff19 	bl	9ba0 <FatPartition::freeChain(unsigned long)>
    7d6e:	b9f0      	cbnz	r0, 7dae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
    7d70:	e7e1      	b.n	7d36 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7d72:	69e1      	ldr	r1, [r4, #28]
    7d74:	4620      	mov	r0, r4
    7d76:	f7ff ff33 	bl	7be0 <FatFile::seekSet(unsigned long)>
    7d7a:	2800      	cmp	r0, #0
    7d7c:	d1de      	bne.n	7d3c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    7d7e:	e7da      	b.n	7d36 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
    7d80:	2302      	movs	r3, #2
    7d82:	e000      	b.n	7d86 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
    7d84:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
    7d86:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
    7d88:	7821      	ldrb	r1, [r4, #0]
    7d8a:	f011 0f11 	tst.w	r1, #17
    7d8e:	d1d2      	bne.n	7d36 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7d90:	f007 0108 	and.w	r1, r7, #8
    7d94:	430b      	orrs	r3, r1
    7d96:	70a3      	strb	r3, [r4, #2]
    7d98:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
    7d9a:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7d9c:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
    7d9e:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
    7da4:	f417 6f80 	tst.w	r7, #1024	; 0x400
    7da8:	d0d7      	beq.n	7d5a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7daa:	2900      	cmp	r1, #0
    7dac:	d1dd      	bne.n	7d6a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7dae:	78a3      	ldrb	r3, [r4, #2]
    7db0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7db4:	70a3      	strb	r3, [r4, #2]
    7db6:	e7d3      	b.n	7d60 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

00007db8 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dbc:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
    7dbe:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7dc0:	2d00      	cmp	r5, #0
    7dc2:	d14f      	bne.n	7e64 <FatFile::openNext(FatFile*, int)+0xac>
    7dc4:	4606      	mov	r6, r0
    7dc6:	460c      	mov	r4, r1
    7dc8:	4692      	mov	sl, r2
    7dca:	780b      	ldrb	r3, [r1, #0]
    7dcc:	f013 0f70 	tst.w	r3, #112	; 0x70
    7dd0:	d04c      	beq.n	7e6c <FatFile::openNext(FatFile*, int)+0xb4>
    7dd2:	694b      	ldr	r3, [r1, #20]
    7dd4:	f013 0f1f 	tst.w	r3, #31
    7dd8:	d14a      	bne.n	7e70 <FatFile::openNext(FatFile*, int)+0xb8>
    7dda:	46a9      	mov	r9, r5
    7ddc:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
    7dde:	2700      	movs	r7, #0
    7de0:	e000      	b.n	7de4 <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
    7de2:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
    7de4:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
    7de8:	4639      	mov	r1, r7
    7dea:	4620      	mov	r0, r4
    7dec:	f7ff fed6 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!dir) {
    7df0:	4602      	mov	r2, r0
    7df2:	2800      	cmp	r0, #0
    7df4:	d03e      	beq.n	7e74 <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
    7df6:	7803      	ldrb	r3, [r0, #0]
    7df8:	2b00      	cmp	r3, #0
    7dfa:	d03d      	beq.n	7e78 <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7dfc:	2be5      	cmp	r3, #229	; 0xe5
    7dfe:	bf18      	it	ne
    7e00:	2b2e      	cmpne	r3, #46	; 0x2e
    7e02:	bf0c      	ite	eq
    7e04:	2001      	moveq	r0, #1
    7e06:	2000      	movne	r0, #0
    7e08:	d0eb      	beq.n	7de2 <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7e0a:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
    7e0c:	f011 0c08 	ands.w	ip, r1, #8
    7e10:	d003      	beq.n	7e1a <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
    7e12:	290f      	cmp	r1, #15
    7e14:	d01e      	beq.n	7e54 <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
    7e16:	46a9      	mov	r9, r5
    7e18:	e7e4      	b.n	7de4 <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7e1a:	f1b9 0f00 	cmp.w	r9, #0
    7e1e:	d00f      	beq.n	7e40 <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7e20:	1e51      	subs	r1, r2, #1
    7e22:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7e24:	ea4f 13cc 	mov.w	r3, ip, lsl #7
    7e28:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
    7e2c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    7e30:	fa55 f383 	uxtab	r3, r5, r3
    7e34:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
    7e38:	4291      	cmp	r1, r2
    7e3a:	d1f3      	bne.n	7e24 <FatFile::openNext(FatFile*, int)+0x6c>
    7e3c:	45e3      	cmp	fp, ip
    7e3e:	d112      	bne.n	7e66 <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7e40:	f8cd 9000 	str.w	r9, [sp]
    7e44:	4653      	mov	r3, sl
    7e46:	f3c8 124f 	ubfx	r2, r8, #5, #16
    7e4a:	4621      	mov	r1, r4
    7e4c:	4630      	mov	r0, r6
    7e4e:	f7ff ff46 	bl	7cde <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    7e52:	e008      	b.n	7e66 <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7e54:	f013 0f40 	tst.w	r3, #64	; 0x40
    7e58:	d0c4      	beq.n	7de4 <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
    7e5a:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
    7e5e:	f892 b00d 	ldrb.w	fp, [r2, #13]
    7e62:	e7bf      	b.n	7de4 <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
    7e64:	2000      	movs	r0, #0
}
    7e66:	b003      	add	sp, #12
    7e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    7e6c:	2000      	movs	r0, #0
    7e6e:	e7fa      	b.n	7e66 <FatFile::openNext(FatFile*, int)+0xae>
    7e70:	2000      	movs	r0, #0
    7e72:	e7f8      	b.n	7e66 <FatFile::openNext(FatFile*, int)+0xae>
    7e74:	2000      	movs	r0, #0
    7e76:	e7f6      	b.n	7e66 <FatFile::openNext(FatFile*, int)+0xae>
    7e78:	2000      	movs	r0, #0
    7e7a:	e7f4      	b.n	7e66 <FatFile::openNext(FatFile*, int)+0xae>

00007e7c <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7e7c:	7803      	ldrb	r3, [r0, #0]
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d049      	beq.n	7f16 <FatFile::sync()+0x9a>
bool FatFile::sync() {
    7e82:	b530      	push	{r4, r5, lr}
    7e84:	b083      	sub	sp, #12
    7e86:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7e88:	f990 3002 	ldrsb.w	r3, [r0, #2]
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	db0d      	blt.n	7eac <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7e90:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7e92:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7e96:	f003 ff19 	bl	bccc <FsCache::sync()>
    7e9a:	2800      	cmp	r0, #0
    7e9c:	d12e      	bne.n	7efc <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7e9e:	7863      	ldrb	r3, [r4, #1]
    7ea0:	f043 0301 	orr.w	r3, r3, #1
    7ea4:	7063      	strb	r3, [r4, #1]
  return false;
    7ea6:	2000      	movs	r0, #0
}
    7ea8:	b003      	add	sp, #12
    7eaa:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7eac:	2101      	movs	r1, #1
    7eae:	f7ff fd47 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7eb2:	4605      	mov	r5, r0
    7eb4:	2800      	cmp	r0, #0
    7eb6:	d0f2      	beq.n	7e9e <FatFile::sync()+0x22>
    7eb8:	7803      	ldrb	r3, [r0, #0]
    7eba:	2be5      	cmp	r3, #229	; 0xe5
    7ebc:	d0ef      	beq.n	7e9e <FatFile::sync()+0x22>
    if (isFile()) {
    7ebe:	7823      	ldrb	r3, [r4, #0]
    7ec0:	f013 0f08 	tst.w	r3, #8
    7ec4:	d001      	beq.n	7eca <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
    7ec6:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7ec8:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7eca:	6a23      	ldr	r3, [r4, #32]
    7ecc:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7ece:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7ed0:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
    7ed2:	4b12      	ldr	r3, [pc, #72]	; (7f1c <FatFile::sync()+0xa0>)
    7ed4:	681b      	ldr	r3, [r3, #0]
    7ed6:	b163      	cbz	r3, 7ef2 <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
    7ed8:	f10d 0203 	add.w	r2, sp, #3
    7edc:	a901      	add	r1, sp, #4
    7ede:	f10d 0006 	add.w	r0, sp, #6
    7ee2:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    7ee4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7ee8:	832b      	strh	r3, [r5, #24]
    7eea:	826b      	strh	r3, [r5, #18]
    7eec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7ef0:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7ef2:	78a3      	ldrb	r3, [r4, #2]
    7ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7ef8:	70a3      	strb	r3, [r4, #2]
    7efa:	e7c9      	b.n	7e90 <FatFile::sync()+0x14>
    7efc:	f505 700e 	add.w	r0, r5, #568	; 0x238
    7f00:	f003 fee4 	bl	bccc <FsCache::sync()>
    7f04:	2800      	cmp	r0, #0
    7f06:	d0ca      	beq.n	7e9e <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
    7f08:	6828      	ldr	r0, [r5, #0]
    7f0a:	6803      	ldr	r3, [r0, #0]
    7f0c:	6a1b      	ldr	r3, [r3, #32]
    7f0e:	4798      	blx	r3
  if (m_vol->cacheSync()) {
    7f10:	2800      	cmp	r0, #0
    7f12:	d1c9      	bne.n	7ea8 <FatFile::sync()+0x2c>
 fail:
    7f14:	e7c3      	b.n	7e9e <FatFile::sync()+0x22>
    return true;
    7f16:	2001      	movs	r0, #1
}
    7f18:	4770      	bx	lr
    7f1a:	bf00      	nop
    7f1c:	20004c5c 	.word	0x20004c5c

00007f20 <FatFile::close()>:
bool FatFile::close() {
    7f20:	b510      	push	{r4, lr}
    7f22:	4604      	mov	r4, r0
  bool rtn = sync();
    7f24:	f7ff ffaa 	bl	7e7c <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7f28:	2300      	movs	r3, #0
    7f2a:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7f2c:	70a3      	strb	r3, [r4, #2]
}
    7f2e:	bd10      	pop	{r4, pc}

00007f30 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f32:	b095      	sub	sp, #84	; 0x54
    7f34:	9201      	str	r2, [sp, #4]
    7f36:	461f      	mov	r7, r3
  FatFile() {}
    7f38:	2300      	movs	r3, #0
    7f3a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7f3e:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    7f42:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    7f46:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    7f4a:	7803      	ldrb	r3, [r0, #0]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d14e      	bne.n	7fee <FatFile::open(FatFile*, char const*, int)+0xbe>
    7f50:	4604      	mov	r4, r0
    7f52:	460d      	mov	r5, r1
    7f54:	780b      	ldrb	r3, [r1, #0]
    7f56:	f013 0f70 	tst.w	r3, #112	; 0x70
    7f5a:	d04c      	beq.n	7ff6 <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
    7f5c:	4613      	mov	r3, r2
    7f5e:	7812      	ldrb	r2, [r2, #0]
    7f60:	2a2f      	cmp	r2, #47	; 0x2f
    7f62:	d028      	beq.n	7fb6 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7f64:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
    7f66:	ab01      	add	r3, sp, #4
    7f68:	aa02      	add	r2, sp, #8
    7f6a:	9901      	ldr	r1, [sp, #4]
    7f6c:	4620      	mov	r0, r4
    7f6e:	f000 ffbb 	bl	8ee8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7f72:	4603      	mov	r3, r0
    7f74:	2800      	cmp	r0, #0
    7f76:	d03b      	beq.n	7ff0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
    7f78:	9b01      	ldr	r3, [sp, #4]
    7f7a:	781b      	ldrb	r3, [r3, #0]
    7f7c:	b37b      	cbz	r3, 7fde <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7f7e:	4633      	mov	r3, r6
    7f80:	aa02      	add	r2, sp, #8
    7f82:	4629      	mov	r1, r5
    7f84:	4620      	mov	r0, r4
    7f86:	f000 fe2f 	bl	8be8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7f8a:	4603      	mov	r3, r0
    7f8c:	b380      	cbz	r0, 7ff0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
    7f8e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7f92:	46a6      	mov	lr, r4
    7f94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7f98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7f9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7fa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7fa4:	f8de 3000 	ldr.w	r3, [lr]
    7fa8:	f8cc 3000 	str.w	r3, [ip]
    close();
    7fac:	4620      	mov	r0, r4
    7fae:	f7ff ffb7 	bl	7f20 <FatFile::close()>
    dirFile = &tmpDir;
    7fb2:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7fb4:	e7d7      	b.n	7f66 <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
    7fb6:	3301      	adds	r3, #1
    7fb8:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    7fba:	781a      	ldrb	r2, [r3, #0]
    7fbc:	2a2f      	cmp	r2, #47	; 0x2f
    7fbe:	d0fa      	beq.n	7fb6 <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
    7fc0:	b92a      	cbnz	r2, 7fce <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
    7fc2:	68a9      	ldr	r1, [r5, #8]
    7fc4:	4620      	mov	r0, r4
    7fc6:	f7ff fccc 	bl	7962 <FatFile::openRoot(FatVolume*)>
    7fca:	4603      	mov	r3, r0
    7fcc:	e010      	b.n	7ff0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7fce:	68a9      	ldr	r1, [r5, #8]
    7fd0:	a80b      	add	r0, sp, #44	; 0x2c
    7fd2:	f7ff fcc6 	bl	7962 <FatFile::openRoot(FatVolume*)>
    7fd6:	4603      	mov	r3, r0
    7fd8:	b150      	cbz	r0, 7ff0 <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
    7fda:	ad0b      	add	r5, sp, #44	; 0x2c
    7fdc:	e7c2      	b.n	7f64 <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
    7fde:	463b      	mov	r3, r7
    7fe0:	aa02      	add	r2, sp, #8
    7fe2:	4629      	mov	r1, r5
    7fe4:	4620      	mov	r0, r4
    7fe6:	f000 fdff 	bl	8be8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7fea:	4603      	mov	r3, r0
    7fec:	e000      	b.n	7ff0 <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
    7fee:	2300      	movs	r3, #0
}
    7ff0:	4618      	mov	r0, r3
    7ff2:	b015      	add	sp, #84	; 0x54
    7ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    7ff6:	2300      	movs	r3, #0
    7ff8:	e7fa      	b.n	7ff0 <FatFile::open(FatFile*, char const*, int)+0xc0>

00007ffa <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7ffa:	b129      	cbz	r1, 8008 <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
    7ffc:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    7ffe:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    8002:	f7ff ff95 	bl	7f30 <FatFile::open(FatFile*, char const*, int)>
}
    8006:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    8008:	2000      	movs	r0, #0
}
    800a:	4770      	bx	lr

0000800c <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    800c:	b570      	push	{r4, r5, r6, lr}
    800e:	4605      	mov	r5, r0
    8010:	460c      	mov	r4, r1
  if (!sync()) {
    8012:	f7ff ff33 	bl	7e7c <FatFile::sync()>
    8016:	4606      	mov	r6, r0
    8018:	b908      	cbnz	r0, 801e <FatFile::dirEntry(DirFat_t*)+0x12>
}
    801a:	4630      	mov	r0, r6
    801c:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    801e:	2100      	movs	r1, #0
    8020:	4628      	mov	r0, r5
    8022:	f7ff fc8d 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8026:	4603      	mov	r3, r0
    8028:	b180      	cbz	r0, 804c <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
    802a:	6805      	ldr	r5, [r0, #0]
    802c:	6840      	ldr	r0, [r0, #4]
    802e:	6899      	ldr	r1, [r3, #8]
    8030:	68da      	ldr	r2, [r3, #12]
    8032:	6025      	str	r5, [r4, #0]
    8034:	6060      	str	r0, [r4, #4]
    8036:	60a1      	str	r1, [r4, #8]
    8038:	60e2      	str	r2, [r4, #12]
    803a:	691d      	ldr	r5, [r3, #16]
    803c:	6958      	ldr	r0, [r3, #20]
    803e:	6999      	ldr	r1, [r3, #24]
    8040:	69da      	ldr	r2, [r3, #28]
    8042:	6125      	str	r5, [r4, #16]
    8044:	6160      	str	r0, [r4, #20]
    8046:	61a1      	str	r1, [r4, #24]
    8048:	61e2      	str	r2, [r4, #28]
  return true;
    804a:	e7e6      	b.n	801a <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
    804c:	2600      	movs	r6, #0
    804e:	e7e4      	b.n	801a <FatFile::dirEntry(DirFat_t*)+0xe>

00008050 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    8050:	b530      	push	{r4, r5, lr}
    8052:	b089      	sub	sp, #36	; 0x24
    8054:	460d      	mov	r5, r1
    8056:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8058:	4669      	mov	r1, sp
    805a:	f7ff ffd7 	bl	800c <FatFile::dirEntry(DirFat_t*)>
    805e:	b128      	cbz	r0, 806c <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    8060:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    8064:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    8066:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    806a:	8023      	strh	r3, [r4, #0]
}
    806c:	b009      	add	sp, #36	; 0x24
    806e:	bd30      	pop	{r4, r5, pc}

00008070 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    8070:	b530      	push	{r4, r5, lr}
    8072:	b089      	sub	sp, #36	; 0x24
    8074:	460d      	mov	r5, r1
    8076:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8078:	4669      	mov	r1, sp
    807a:	f7ff ffc7 	bl	800c <FatFile::dirEntry(DirFat_t*)>
    807e:	b128      	cbz	r0, 808c <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    8080:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    8084:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    8086:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    808a:	8023      	strh	r3, [r4, #0]
}
    808c:	b009      	add	sp, #36	; 0x24
    808e:	bd30      	pop	{r4, r5, pc}

00008090 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    8090:	780b      	ldrb	r3, [r1, #0]
    8092:	f013 0f70 	tst.w	r3, #112	; 0x70
    8096:	d101      	bne.n	809c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
    8098:	2000      	movs	r0, #0
}
    809a:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    809c:	b5f0      	push	{r4, r5, r6, r7, lr}
    809e:	b089      	sub	sp, #36	; 0x24
    80a0:	4604      	mov	r4, r0
    80a2:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    80a4:	f640 2302 	movw	r3, #2562	; 0xa02
    80a8:	f000 fd9e 	bl	8be8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    80ac:	b908      	cbnz	r0, 80b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
    80ae:	b009      	add	sp, #36	; 0x24
    80b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
    80b2:	2301      	movs	r3, #1
    80b4:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    80b6:	2310      	movs	r3, #16
    80b8:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    80ba:	4620      	mov	r0, r4
    80bc:	f7ff fbfe 	bl	78bc <FatFile::addDirCluster()>
    80c0:	2800      	cmp	r0, #0
    80c2:	d0f4      	beq.n	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
    80c4:	6923      	ldr	r3, [r4, #16]
    80c6:	6223      	str	r3, [r4, #32]
    seekSet(0);
    80c8:	2100      	movs	r1, #0
    80ca:	4620      	mov	r0, r4
    80cc:	f7ff fd88 	bl	7be0 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    80d0:	4620      	mov	r0, r4
    80d2:	f7ff fed3 	bl	7e7c <FatFile::sync()>
    80d6:	2800      	cmp	r0, #0
    80d8:	d0e9      	beq.n	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    80da:	2101      	movs	r1, #1
    80dc:	4620      	mov	r0, r4
    80de:	f7ff fc2f 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    80e2:	4686      	mov	lr, r0
    80e4:	2800      	cmp	r0, #0
    80e6:	d07b      	beq.n	81e0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    80e8:	2310      	movs	r3, #16
    80ea:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    80ec:	46ec      	mov	ip, sp
    80ee:	6800      	ldr	r0, [r0, #0]
    80f0:	f8de 1004 	ldr.w	r1, [lr, #4]
    80f4:	f8de 2008 	ldr.w	r2, [lr, #8]
    80f8:	f8de 300c 	ldr.w	r3, [lr, #12]
    80fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8100:	f8de 0010 	ldr.w	r0, [lr, #16]
    8104:	f8de 1014 	ldr.w	r1, [lr, #20]
    8108:	f8de 2018 	ldr.w	r2, [lr, #24]
    810c:	f8de 301c 	ldr.w	r3, [lr, #28]
    8110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8114:	f8be 6014 	ldrh.w	r6, [lr, #20]
    8118:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
    811c:	232e      	movs	r3, #46	; 0x2e
    811e:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
    8122:	466b      	mov	r3, sp
    8124:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
    8128:	2220      	movs	r2, #32
    812a:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
    812e:	428b      	cmp	r3, r1
    8130:	d1fb      	bne.n	812a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
    8132:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8134:	6a23      	ldr	r3, [r4, #32]
    8136:	3b02      	subs	r3, #2
    8138:	7982      	ldrb	r2, [r0, #6]
    813a:	4093      	lsls	r3, r2
    813c:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    813e:	2201      	movs	r2, #1
    8140:	4419      	add	r1, r3
    8142:	3028      	adds	r0, #40	; 0x28
    8144:	f003 fde9 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8148:	4684      	mov	ip, r0
    814a:	2800      	cmp	r0, #0
    814c:	d04a      	beq.n	81e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
    814e:	f8ad 6014 	strh.w	r6, [sp, #20]
    8152:	f8ad 701a 	strh.w	r7, [sp, #26]
    8156:	46ee      	mov	lr, sp
    8158:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    815c:	f8cc 0000 	str.w	r0, [ip]
    8160:	f8cc 1004 	str.w	r1, [ip, #4]
    8164:	f8cc 2008 	str.w	r2, [ip, #8]
    8168:	f8cc 300c 	str.w	r3, [ip, #12]
    816c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8170:	f8cc 0010 	str.w	r0, [ip, #16]
    8174:	f8cc 1014 	str.w	r1, [ip, #20]
    8178:	f8cc 2018 	str.w	r2, [ip, #24]
    817c:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
    8180:	232e      	movs	r3, #46	; 0x2e
    8182:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8186:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8188:	0c1a      	lsrs	r2, r3, #16
    818a:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    818e:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    8192:	466d      	mov	r5, sp
    8194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8196:	f8cc 0020 	str.w	r0, [ip, #32]
    819a:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    819e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    81a2:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    81a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    81a8:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    81ac:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    81b0:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    81b4:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    81b8:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    81ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    81be:	f003 fd85 	bl	bccc <FsCache::sync()>
    81c2:	2800      	cmp	r0, #0
    81c4:	f43f af73 	beq.w	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    81c8:	f504 700e 	add.w	r0, r4, #568	; 0x238
    81cc:	f003 fd7e 	bl	bccc <FsCache::sync()>
    81d0:	2800      	cmp	r0, #0
    81d2:	f43f af6c 	beq.w	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
    81d6:	6820      	ldr	r0, [r4, #0]
    81d8:	6803      	ldr	r3, [r0, #0]
    81da:	6a1b      	ldr	r3, [r3, #32]
    81dc:	4798      	blx	r3
    81de:	e766      	b.n	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
    81e0:	2000      	movs	r0, #0
    81e2:	e764      	b.n	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    81e4:	2000      	movs	r0, #0
    81e6:	e762      	b.n	80ae <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

000081e8 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    81e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    81ea:	b095      	sub	sp, #84	; 0x54
    81ec:	9201      	str	r2, [sp, #4]
    81ee:	461e      	mov	r6, r3
    81f0:	2300      	movs	r3, #0
    81f2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
    81f6:	f88d 3008 	strb.w	r3, [sp, #8]
    81fa:	f88d 3009 	strb.w	r3, [sp, #9]
    81fe:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
    8202:	7803      	ldrb	r3, [r0, #0]
    8204:	2b00      	cmp	r3, #0
    8206:	d150      	bne.n	82aa <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
    8208:	4604      	mov	r4, r0
    820a:	460d      	mov	r5, r1
    820c:	780b      	ldrb	r3, [r1, #0]
    820e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8212:	d04e      	beq.n	82b2 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
    8214:	4613      	mov	r3, r2
    8216:	7812      	ldrb	r2, [r2, #0]
    8218:	2a2f      	cmp	r2, #47	; 0x2f
    821a:	d001      	beq.n	8220 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
    821c:	2700      	movs	r7, #0
    821e:	e020      	b.n	8262 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
    8220:	3301      	adds	r3, #1
    8222:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    8224:	781a      	ldrb	r2, [r3, #0]
    8226:	2a2f      	cmp	r2, #47	; 0x2f
    8228:	d0fa      	beq.n	8220 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
    822a:	68a9      	ldr	r1, [r5, #8]
    822c:	a802      	add	r0, sp, #8
    822e:	f7ff fb98 	bl	7962 <FatFile::openRoot(FatVolume*)>
    8232:	4602      	mov	r2, r0
    8234:	2800      	cmp	r0, #0
    8236:	d039      	beq.n	82ac <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
    8238:	ad02      	add	r5, sp, #8
    823a:	e7ef      	b.n	821c <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
    823c:	f10d 0c08 	add.w	ip, sp, #8
    8240:	46a6      	mov	lr, r4
    8242:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    824a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    824e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8252:	f8de 3000 	ldr.w	r3, [lr]
    8256:	f8cc 3000 	str.w	r3, [ip]
    close();
    825a:	4620      	mov	r0, r4
    825c:	f7ff fe60 	bl	7f20 <FatFile::close()>
    parent = &tmpDir;
    8260:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    8262:	ab01      	add	r3, sp, #4
    8264:	aa0b      	add	r2, sp, #44	; 0x2c
    8266:	9901      	ldr	r1, [sp, #4]
    8268:	4620      	mov	r0, r4
    826a:	f000 fe3d 	bl	8ee8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    826e:	4602      	mov	r2, r0
    8270:	b1e0      	cbz	r0, 82ac <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
    8272:	9b01      	ldr	r3, [sp, #4]
    8274:	781b      	ldrb	r3, [r3, #0]
    8276:	b18b      	cbz	r3, 829c <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
    8278:	463b      	mov	r3, r7
    827a:	aa0b      	add	r2, sp, #44	; 0x2c
    827c:	4629      	mov	r1, r5
    827e:	4620      	mov	r0, r4
    8280:	f000 fcb2 	bl	8be8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8284:	2800      	cmp	r0, #0
    8286:	d1d9      	bne.n	823c <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
    8288:	b1ae      	cbz	r6, 82b6 <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
    828a:	aa0b      	add	r2, sp, #44	; 0x2c
    828c:	4629      	mov	r1, r5
    828e:	4620      	mov	r0, r4
    8290:	f7ff fefe 	bl	8090 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    8294:	4602      	mov	r2, r0
    8296:	2800      	cmp	r0, #0
    8298:	d1d0      	bne.n	823c <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
    829a:	e007      	b.n	82ac <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
    829c:	aa0b      	add	r2, sp, #44	; 0x2c
    829e:	4629      	mov	r1, r5
    82a0:	4620      	mov	r0, r4
    82a2:	f7ff fef5 	bl	8090 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    82a6:	4602      	mov	r2, r0
    82a8:	e000      	b.n	82ac <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
    82aa:	2200      	movs	r2, #0
}
    82ac:	4610      	mov	r0, r2
    82ae:	b015      	add	sp, #84	; 0x54
    82b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
    82b2:	2200      	movs	r2, #0
    82b4:	e7fa      	b.n	82ac <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    82b6:	4632      	mov	r2, r6
    82b8:	e7f8      	b.n	82ac <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

000082ba <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    82ba:	b570      	push	{r4, r5, r6, lr}
    82bc:	b09a      	sub	sp, #104	; 0x68
    82be:	2300      	movs	r3, #0
    82c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    82c4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    82c8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    82cc:	f88d 3000 	strb.w	r3, [sp]
    82d0:	f88d 3001 	strb.w	r3, [sp, #1]
    82d4:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
    82d8:	7803      	ldrb	r3, [r0, #0]
    82da:	f013 0f18 	tst.w	r3, #24
    82de:	f000 80e3 	beq.w	84a8 <FatFile::rename(FatFile*, char const*)+0x1ee>
    82e2:	4604      	mov	r4, r0
    82e4:	460d      	mov	r5, r1
    82e6:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
    82e8:	6882      	ldr	r2, [r0, #8]
    82ea:	688b      	ldr	r3, [r1, #8]
    82ec:	429a      	cmp	r2, r3
    82ee:	d002      	beq.n	82f6 <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
    82f0:	2000      	movs	r0, #0
}
    82f2:	b01a      	add	sp, #104	; 0x68
    82f4:	bd70      	pop	{r4, r5, r6, pc}
  sync();
    82f6:	f7ff fdc1 	bl	7e7c <FatFile::sync()>
  oldFile = *this;
    82fa:	46ec      	mov	ip, sp
    82fc:	46a6      	mov	lr, r4
    82fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8302:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8306:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    830a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    830e:	f8de 3000 	ldr.w	r3, [lr]
    8312:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    8316:	2100      	movs	r1, #0
    8318:	4620      	mov	r0, r4
    831a:	f7ff fb11 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    831e:	4686      	mov	lr, r0
    8320:	2800      	cmp	r0, #0
    8322:	f000 80c3 	beq.w	84ac <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
    8326:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    832a:	6800      	ldr	r0, [r0, #0]
    832c:	f8de 1004 	ldr.w	r1, [lr, #4]
    8330:	f8de 2008 	ldr.w	r2, [lr, #8]
    8334:	f8de 300c 	ldr.w	r3, [lr, #12]
    8338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    833c:	f8de 0010 	ldr.w	r0, [lr, #16]
    8340:	f8de 1014 	ldr.w	r1, [lr, #20]
    8344:	f8de 2018 	ldr.w	r2, [lr, #24]
    8348:	f8de 301c 	ldr.w	r3, [lr, #28]
    834c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8350:	7823      	ldrb	r3, [r4, #0]
    8352:	f013 0f08 	tst.w	r3, #8
    8356:	d00a      	beq.n	836e <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8358:	f640 2301 	movw	r3, #2561	; 0xa01
    835c:	4632      	mov	r2, r6
    835e:	4629      	mov	r1, r5
    8360:	a809      	add	r0, sp, #36	; 0x24
    8362:	f7ff fde5 	bl	7f30 <FatFile::open(FatFile*, char const*, int)>
    8366:	2800      	cmp	r0, #0
    8368:	d0c3      	beq.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
    836a:	2600      	movs	r6, #0
    836c:	e008      	b.n	8380 <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
    836e:	2300      	movs	r3, #0
    8370:	4632      	mov	r2, r6
    8372:	4629      	mov	r1, r5
    8374:	a809      	add	r0, sp, #36	; 0x24
    8376:	f7ff ff37 	bl	81e8 <FatFile::mkdir(FatFile*, char const*, bool)>
    837a:	2800      	cmp	r0, #0
    837c:	d0b9      	beq.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
    837e:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
    8380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8382:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    8384:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8388:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    838a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    838e:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    8390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8392:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    8394:	2300      	movs	r3, #0
    8396:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
    839a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    839e:	2101      	movs	r1, #1
    83a0:	4620      	mov	r0, r4
    83a2:	f7ff facd 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    83a6:	4603      	mov	r3, r0
    83a8:	2800      	cmp	r0, #0
    83aa:	f000 8081 	beq.w	84b0 <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    83ae:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
    83b2:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
    83b6:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
    83ba:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
    83be:	f8c3 500d 	str.w	r5, [r3, #13]
    83c2:	f8c3 0011 	str.w	r0, [r3, #17]
    83c6:	f8c3 1015 	str.w	r1, [r3, #21]
    83ca:	f8c3 2019 	str.w	r2, [r3, #25]
    83ce:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
    83d2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    83d6:	f8a3 101d 	strh.w	r1, [r3, #29]
    83da:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
    83dc:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
    83e0:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
    83e2:	2e00      	cmp	r6, #0
    83e4:	d03e      	beq.n	8464 <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    83e6:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    83e8:	1eb3      	subs	r3, r6, #2
    83ea:	7982      	ldrb	r2, [r0, #6]
    83ec:	4093      	lsls	r3, r2
    83ee:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    83f0:	2200      	movs	r2, #0
    83f2:	4419      	add	r1, r3
    83f4:	3028      	adds	r0, #40	; 0x28
    83f6:	f003 fc90 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    83fa:	4684      	mov	ip, r0
    83fc:	2800      	cmp	r0, #0
    83fe:	d059      	beq.n	84b4 <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
    8400:	ad12      	add	r5, sp, #72	; 0x48
    8402:	6a00      	ldr	r0, [r0, #32]
    8404:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
    8408:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
    840c:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
    8410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    8412:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
    8416:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
    841a:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
    841e:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    8422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    8424:	4631      	mov	r1, r6
    8426:	68a0      	ldr	r0, [r4, #8]
    8428:	f001 fbba 	bl	9ba0 <FatPartition::freeChain(unsigned long)>
    842c:	2800      	cmp	r0, #0
    842e:	f43f af60 	beq.w	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
    8432:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8434:	6a23      	ldr	r3, [r4, #32]
    8436:	3b02      	subs	r3, #2
    8438:	7982      	ldrb	r2, [r0, #6]
    843a:	4093      	lsls	r3, r2
    843c:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
    843e:	2201      	movs	r2, #1
    8440:	4419      	add	r1, r3
    8442:	3028      	adds	r0, #40	; 0x28
    8444:	f003 fc69 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8448:	4606      	mov	r6, r0
    844a:	2800      	cmp	r0, #0
    844c:	d034      	beq.n	84b8 <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
    844e:	ad12      	add	r5, sp, #72	; 0x48
    8450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8452:	6230      	str	r0, [r6, #32]
    8454:	6271      	str	r1, [r6, #36]	; 0x24
    8456:	62b2      	str	r2, [r6, #40]	; 0x28
    8458:	62f3      	str	r3, [r6, #44]	; 0x2c
    845a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    845c:	6330      	str	r0, [r6, #48]	; 0x30
    845e:	6371      	str	r1, [r6, #52]	; 0x34
    8460:	63b2      	str	r2, [r6, #56]	; 0x38
    8462:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8464:	2300      	movs	r3, #0
    8466:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
    8468:	2302      	movs	r3, #2
    846a:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
    846e:	2308      	movs	r3, #8
    8470:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
    8474:	4668      	mov	r0, sp
    8476:	f000 fda5 	bl	8fc4 <FatFile::remove()>
    847a:	2800      	cmp	r0, #0
    847c:	f43f af39 	beq.w	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
    8480:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8482:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8486:	f003 fc21 	bl	bccc <FsCache::sync()>
    848a:	2800      	cmp	r0, #0
    848c:	f43f af31 	beq.w	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    8490:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8494:	f003 fc1a 	bl	bccc <FsCache::sync()>
    8498:	2800      	cmp	r0, #0
    849a:	f43f af2a 	beq.w	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
    849e:	6820      	ldr	r0, [r4, #0]
    84a0:	6803      	ldr	r3, [r0, #0]
    84a2:	6a1b      	ldr	r3, [r3, #32]
    84a4:	4798      	blx	r3
    84a6:	e724      	b.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
    84a8:	2000      	movs	r0, #0
    84aa:	e722      	b.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    84ac:	2000      	movs	r0, #0
    84ae:	e720      	b.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    84b0:	2000      	movs	r0, #0
    84b2:	e71e      	b.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    84b4:	2000      	movs	r0, #0
    84b6:	e71c      	b.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>
    84b8:	2000      	movs	r0, #0
    84ba:	e71a      	b.n	82f2 <FatFile::rename(FatFile*, char const*)+0x38>

000084bc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    84bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84c0:	b083      	sub	sp, #12
    84c2:	9101      	str	r1, [sp, #4]
    84c4:	461e      	mov	r6, r3
    84c6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    84ca:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    84ce:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    84d2:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    84d6:	7803      	ldrb	r3, [r0, #0]
    84d8:	f013 0f08 	tst.w	r3, #8
    84dc:	d060      	beq.n	85a0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
    84de:	4605      	mov	r5, r0
      || year > 2107
    84e0:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    84e4:	b294      	uxth	r4, r2
    84e6:	2c7f      	cmp	r4, #127	; 0x7f
    84e8:	d85e      	bhi.n	85a8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
    84ea:	1e73      	subs	r3, r6, #1
    84ec:	b2db      	uxtb	r3, r3
    84ee:	2b0b      	cmp	r3, #11
    84f0:	d85c      	bhi.n	85ac <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
    84f2:	1e7b      	subs	r3, r7, #1
    84f4:	b2db      	uxtb	r3, r3
    84f6:	2b1e      	cmp	r3, #30
    84f8:	d85a      	bhi.n	85b0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
    84fa:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
    84fe:	bf98      	it	ls
    8500:	f1b9 0f17 	cmpls.w	r9, #23
    8504:	bf8c      	ite	hi
    8506:	f04f 0b01 	movhi.w	fp, #1
    850a:	f04f 0b00 	movls.w	fp, #0
    850e:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    8512:	bf88      	it	hi
    8514:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
    8518:	f1bb 0f00 	cmp.w	fp, #0
    851c:	d001      	beq.n	8522 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
    851e:	2000      	movs	r0, #0
    8520:	e03f      	b.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
    8522:	f7ff fcab 	bl	7e7c <FatFile::sync()>
    8526:	2800      	cmp	r0, #0
    8528:	d03b      	beq.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    852a:	2101      	movs	r1, #1
    852c:	4628      	mov	r0, r5
    852e:	f7ff fa07 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8532:	4601      	mov	r1, r0
    8534:	2800      	cmp	r0, #0
    8536:	d03d      	beq.n	85b4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    8538:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
    853c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
    8540:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    8542:	ea4f 0258 	mov.w	r2, r8, lsr #1
    8546:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
    854a:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
    854e:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
    8550:	9801      	ldr	r0, [sp, #4]
    8552:	f010 0f01 	tst.w	r0, #1
    8556:	bf18      	it	ne
    8558:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
    855a:	9801      	ldr	r0, [sp, #4]
    855c:	f010 0f02 	tst.w	r0, #2
    8560:	d008      	beq.n	8574 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
    8562:	820b      	strh	r3, [r1, #16]
    8564:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
    8566:	f018 0801 	ands.w	r8, r8, #1
    856a:	bf18      	it	ne
    856c:	f04f 0864 	movne.w	r8, #100	; 0x64
    8570:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
    8574:	9801      	ldr	r0, [sp, #4]
    8576:	f010 0f04 	tst.w	r0, #4
    857a:	d001      	beq.n	8580 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
    857c:	830b      	strh	r3, [r1, #24]
    857e:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
    8580:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8582:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8586:	f003 fba1 	bl	bccc <FsCache::sync()>
    858a:	b150      	cbz	r0, 85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    858c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8590:	f003 fb9c 	bl	bccc <FsCache::sync()>
    8594:	b128      	cbz	r0, 85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
    8596:	6820      	ldr	r0, [r4, #0]
    8598:	6803      	ldr	r3, [r0, #0]
    859a:	6a1b      	ldr	r3, [r3, #32]
    859c:	4798      	blx	r3
    859e:	e000      	b.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
    85a0:	2000      	movs	r0, #0
}
    85a2:	b003      	add	sp, #12
    85a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    85a8:	2000      	movs	r0, #0
    85aa:	e7fa      	b.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    85ac:	2000      	movs	r0, #0
    85ae:	e7f8      	b.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    85b0:	2000      	movs	r0, #0
    85b2:	e7f6      	b.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    85b4:	4658      	mov	r0, fp
    85b6:	e7f4      	b.n	85a2 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

000085b8 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    85b8:	7883      	ldrb	r3, [r0, #2]
    85ba:	f013 0f02 	tst.w	r3, #2
    85be:	d02f      	beq.n	8620 <FatFile::truncate()+0x68>
bool FatFile::truncate() {
    85c0:	b510      	push	{r4, lr}
    85c2:	b082      	sub	sp, #8
    85c4:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    85c6:	6a01      	ldr	r1, [r0, #32]
    85c8:	b361      	cbz	r1, 8624 <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
    85ca:	6903      	ldr	r3, [r0, #16]
    85cc:	b93b      	cbnz	r3, 85de <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    85ce:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
    85d0:	2300      	movs	r3, #0
    85d2:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    85d4:	68a0      	ldr	r0, [r4, #8]
    85d6:	f001 fae3 	bl	9ba0 <FatPartition::freeChain(unsigned long)>
    85da:	b968      	cbnz	r0, 85f8 <FatFile::truncate()+0x40>
    85dc:	e015      	b.n	860a <FatFile::truncate()+0x52>
    toFree = 0;
    85de:	2200      	movs	r2, #0
    85e0:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    85e2:	aa01      	add	r2, sp, #4
    85e4:	4619      	mov	r1, r3
    85e6:	6880      	ldr	r0, [r0, #8]
    85e8:	f001 f971 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    85ec:	2800      	cmp	r0, #0
    85ee:	db1b      	blt.n	8628 <FatFile::truncate()+0x70>
    if (fg) {
    85f0:	b968      	cbnz	r0, 860e <FatFile::truncate()+0x56>
  if (toFree) {
    85f2:	9901      	ldr	r1, [sp, #4]
    85f4:	2900      	cmp	r1, #0
    85f6:	d1ed      	bne.n	85d4 <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    85f8:	6963      	ldr	r3, [r4, #20]
    85fa:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    85fc:	78a3      	ldrb	r3, [r4, #2]
    85fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8602:	70a3      	strb	r3, [r4, #2]
  return sync();
    8604:	4620      	mov	r0, r4
    8606:	f7ff fc39 	bl	7e7c <FatFile::sync()>

 fail:
  return false;
}
    860a:	b002      	add	sp, #8
    860c:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    860e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    8612:	6921      	ldr	r1, [r4, #16]
    8614:	68a0      	ldr	r0, [r4, #8]
    8616:	f001 f9e9 	bl	99ec <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
    861a:	2800      	cmp	r0, #0
    861c:	d1e9      	bne.n	85f2 <FatFile::truncate()+0x3a>
    861e:	e7f4      	b.n	860a <FatFile::truncate()+0x52>
  return false;
    8620:	2000      	movs	r0, #0
}
    8622:	4770      	bx	lr
      return true;
    8624:	2001      	movs	r0, #1
    8626:	e7f0      	b.n	860a <FatFile::truncate()+0x52>
  return false;
    8628:	2000      	movs	r0, #0
    862a:	e7ee      	b.n	860a <FatFile::truncate()+0x52>

0000862c <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    862c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8630:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    8632:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    8634:	f013 0f02 	tst.w	r3, #2
    8638:	d017      	beq.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
    863a:	4688      	mov	r8, r1
    863c:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    863e:	f013 0f08 	tst.w	r3, #8
    8642:	d10d      	bne.n	8660 <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    8644:	6963      	ldr	r3, [r4, #20]
    8646:	43db      	mvns	r3, r3
    8648:	454b      	cmp	r3, r9
    864a:	d30e      	bcc.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    864c:	f1b9 0f00 	cmp.w	r9, #0
    8650:	f000 80ac 	beq.w	87ac <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
    8654:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8656:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    865a:	f04f 0a01 	mov.w	sl, #1
    865e:	e064      	b.n	872a <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
    8660:	69c1      	ldr	r1, [r0, #28]
    8662:	f7ff fabd 	bl	7be0 <FatFile::seekSet(unsigned long)>
    8666:	2800      	cmp	r0, #0
    8668:	d1ec      	bne.n	8644 <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    866a:	7863      	ldrb	r3, [r4, #1]
    866c:	f043 0301 	orr.w	r3, r3, #1
    8670:	7063      	strb	r3, [r4, #1]
  return 0;
    8672:	2000      	movs	r0, #0
}
    8674:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8678:	465a      	mov	r2, fp
    867a:	f001 f928 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    867e:	2800      	cmp	r0, #0
    8680:	dbf3      	blt.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
    8682:	b938      	cbnz	r0, 8694 <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
    8684:	4620      	mov	r0, r4
    8686:	f7ff f8fb 	bl	7880 <FatFile::addCluster()>
    868a:	b918      	cbnz	r0, 8694 <FatFile::write(void const*, unsigned int)+0x68>
    868c:	e7ed      	b.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
    868e:	6a23      	ldr	r3, [r4, #32]
    8690:	b1eb      	cbz	r3, 86ce <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
    8692:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8694:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8696:	6921      	ldr	r1, [r4, #16]
    8698:	3902      	subs	r1, #2
    869a:	7983      	ldrb	r3, [r0, #6]
    869c:	4099      	lsls	r1, r3
    869e:	6943      	ldr	r3, [r0, #20]
    86a0:	4419      	add	r1, r3
                      + sectorOfCluster;
    86a2:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    86a4:	b916      	cbnz	r6, 86ac <FatFile::write(void const*, unsigned int)+0x80>
    86a6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    86aa:	d218      	bcs.n	86de <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
    86ac:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    86b0:	42bd      	cmp	r5, r7
    86b2:	bf28      	it	cs
    86b4:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
    86b6:	bb16      	cbnz	r6, 86fe <FatFile::write(void const*, unsigned int)+0xd2>
    86b8:	6962      	ldr	r2, [r4, #20]
    86ba:	69e3      	ldr	r3, [r4, #28]
    86bc:	429a      	cmp	r2, r3
    86be:	d24b      	bcs.n	8758 <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    86c0:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    86c2:	f013 0f20 	tst.w	r3, #32
    86c6:	bf0c      	ite	eq
    86c8:	2201      	moveq	r2, #1
    86ca:	2205      	movne	r2, #5
    86cc:	e018      	b.n	8700 <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
    86ce:	4620      	mov	r0, r4
    86d0:	f7ff f8d6 	bl	7880 <FatFile::addCluster()>
    86d4:	2800      	cmp	r0, #0
    86d6:	d0c8      	beq.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
    86d8:	6923      	ldr	r3, [r4, #16]
    86da:	6223      	str	r3, [r4, #32]
    86dc:	e7da      	b.n	8694 <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    86de:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    86e2:	d241      	bcs.n	8768 <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
    86e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    86e6:	4299      	cmp	r1, r3
    86e8:	d059      	beq.n	879e <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
    86ea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    86ec:	6803      	ldr	r3, [r0, #0]
    86ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    86f0:	4642      	mov	r2, r8
    86f2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    86f4:	2800      	cmp	r0, #0
    86f6:	d0b8      	beq.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
    86f8:	f44f 7500 	mov.w	r5, #512	; 0x200
    86fc:	e00f      	b.n	871e <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    86fe:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
    8700:	3028      	adds	r0, #40	; 0x28
    8702:	f003 fb0a 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8706:	2800      	cmp	r0, #0
    8708:	d0af      	beq.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
    870a:	462a      	mov	r2, r5
    870c:	4641      	mov	r1, r8
    870e:	4430      	add	r0, r6
    8710:	f004 feae 	bl	d470 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8714:	68a0      	ldr	r0, [r4, #8]
    8716:	442e      	add	r6, r5
    8718:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    871c:	d01e      	beq.n	875c <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
    871e:	6963      	ldr	r3, [r4, #20]
    8720:	442b      	add	r3, r5
    8722:	6163      	str	r3, [r4, #20]
    src += n;
    8724:	44a8      	add	r8, r5
  while (nToWrite) {
    8726:	1b7f      	subs	r7, r7, r5
    8728:	d040      	beq.n	87ac <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    872a:	68a0      	ldr	r0, [r4, #8]
    872c:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
    872e:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    8730:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    8734:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
    8738:	d1ac      	bne.n	8694 <FatFile::write(void const*, unsigned int)+0x68>
    873a:	2e00      	cmp	r6, #0
    873c:	d1aa      	bne.n	8694 <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
    873e:	6921      	ldr	r1, [r4, #16]
    8740:	2900      	cmp	r1, #0
    8742:	d0a4      	beq.n	868e <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
    8744:	78a2      	ldrb	r2, [r4, #2]
    8746:	f012 0f40 	tst.w	r2, #64	; 0x40
    874a:	d095      	beq.n	8678 <FatFile::write(void const*, unsigned int)+0x4c>
    874c:	69e2      	ldr	r2, [r4, #28]
    874e:	4293      	cmp	r3, r2
    8750:	d292      	bcs.n	8678 <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
    8752:	3101      	adds	r1, #1
    8754:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
    8756:	e79d      	b.n	8694 <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8758:	2205      	movs	r2, #5
    875a:	e7d1      	b.n	8700 <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
    875c:	3028      	adds	r0, #40	; 0x28
    875e:	f003 fab5 	bl	bccc <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    8762:	2800      	cmp	r0, #0
    8764:	d1db      	bne.n	871e <FatFile::write(void const*, unsigned int)+0xf2>
    8766:	e780      	b.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8768:	7903      	ldrb	r3, [r0, #4]
    876a:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    876c:	0a7a      	lsrs	r2, r7, #9
    876e:	4293      	cmp	r3, r2
    8770:	bf28      	it	cs
    8772:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
    8774:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    8776:	6b42      	ldr	r2, [r0, #52]	; 0x34
    8778:	4291      	cmp	r1, r2
    877a:	d808      	bhi.n	878e <FatFile::write(void const*, unsigned int)+0x162>
    877c:	18ce      	adds	r6, r1, r3
    877e:	42b2      	cmp	r2, r6
    8780:	d205      	bcs.n	878e <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
    8782:	2200      	movs	r2, #0
    8784:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    878c:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    878e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8790:	6802      	ldr	r2, [r0, #0]
    8792:	6a96      	ldr	r6, [r2, #40]	; 0x28
    8794:	4642      	mov	r2, r8
    8796:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8798:	2800      	cmp	r0, #0
    879a:	d1c0      	bne.n	871e <FatFile::write(void const*, unsigned int)+0xf2>
    879c:	e765      	b.n	866a <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
    879e:	2300      	movs	r3, #0
    87a0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    87a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    87a8:	6343      	str	r3, [r0, #52]	; 0x34
  }
    87aa:	e79e      	b.n	86ea <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
    87ac:	6963      	ldr	r3, [r4, #20]
    87ae:	69e2      	ldr	r2, [r4, #28]
    87b0:	4293      	cmp	r3, r2
    87b2:	d906      	bls.n	87c2 <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
    87b4:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    87b6:	78a3      	ldrb	r3, [r4, #2]
    87b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87bc:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    87be:	4648      	mov	r0, r9
    87c0:	e758      	b.n	8674 <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
    87c2:	4b05      	ldr	r3, [pc, #20]	; (87d8 <FatFile::write(void const*, unsigned int)+0x1ac>)
    87c4:	681b      	ldr	r3, [r3, #0]
    87c6:	b12b      	cbz	r3, 87d4 <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    87c8:	78a3      	ldrb	r3, [r4, #2]
    87ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    87ce:	70a3      	strb	r3, [r4, #2]
  return nbyte;
    87d0:	4648      	mov	r0, r9
    87d2:	e74f      	b.n	8674 <FatFile::write(void const*, unsigned int)+0x48>
    87d4:	4648      	mov	r0, r9
    87d6:	e74d      	b.n	8674 <FatFile::write(void const*, unsigned int)+0x48>
    87d8:	20004c5c 	.word	0x20004c5c

000087dc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    87dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87e0:	b08d      	sub	sp, #52	; 0x34
    87e2:	4680      	mov	r8, r0
    87e4:	9100      	str	r1, [sp, #0]
    87e6:	4614      	mov	r4, r2
    87e8:	461f      	mov	r7, r3
  FatFile dir = *this;
    87ea:	ad03      	add	r5, sp, #12
    87ec:	4606      	mov	r6, r0
    87ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    87f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    87f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    87f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    87f6:	6833      	ldr	r3, [r6, #0]
    87f8:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    87fa:	6823      	ldr	r3, [r4, #0]
    87fc:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    87fe:	2300      	movs	r3, #0
    8800:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8802:	9701      	str	r7, [sp, #4]
    8804:	2f00      	cmp	r7, #0
    8806:	d040      	beq.n	888a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
    8808:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    880c:	9b00      	ldr	r3, [sp, #0]
    880e:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8812:	b289      	uxth	r1, r1
    8814:	0149      	lsls	r1, r1, #5
    8816:	a803      	add	r0, sp, #12
    8818:	f7ff f9e2 	bl	7be0 <FatFile::seekSet(unsigned long)>
    881c:	4682      	mov	sl, r0
    881e:	b340      	cbz	r0, 8872 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
    8820:	2100      	movs	r1, #0
    8822:	a803      	add	r0, sp, #12
    8824:	f7ff f9ba 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8828:	4681      	mov	r9, r0
    882a:	b388      	cbz	r0, 8890 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
    882c:	2600      	movs	r6, #0
    882e:	e00f      	b.n	8850 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    8830:	4620      	mov	r0, r4
    8832:	f003 fab1 	bl	bd98 <FsName::get16()>
    8836:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    8838:	4628      	mov	r0, r5
    883a:	f003 fbcb 	bl	bfd4 <toUpcase(unsigned short)>
    883e:	4605      	mov	r5, r0
    8840:	4638      	mov	r0, r7
    8842:	f003 fbc7 	bl	bfd4 <toUpcase(unsigned short)>
    8846:	4285      	cmp	r5, r0
    8848:	d125      	bne.n	8896 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
    884a:	3601      	adds	r6, #1
    884c:	2e0d      	cmp	r6, #13
    884e:	d014      	beq.n	887a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
    8850:	b2f2      	uxtb	r2, r6
    8852:	4649      	mov	r1, r9
    8854:	4640      	mov	r0, r8
    8856:	f000 ff19 	bl	968c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    885a:	4605      	mov	r5, r0
    return !ls && next == end;
    885c:	89a3      	ldrh	r3, [r4, #12]
    885e:	2b00      	cmp	r3, #0
    8860:	d1e6      	bne.n	8830 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
    8862:	6862      	ldr	r2, [r4, #4]
    8864:	68a3      	ldr	r3, [r4, #8]
    8866:	429a      	cmp	r2, r3
    8868:	d1e2      	bne.n	8830 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
    886a:	fab0 fa80 	clz	sl, r0
    886e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
    8872:	4650      	mov	r0, sl
    8874:	b00d      	add	sp, #52	; 0x34
    8876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    887a:	f10b 0b01 	add.w	fp, fp, #1
    887e:	fa5f fb8b 	uxtb.w	fp, fp
    8882:	9b01      	ldr	r3, [sp, #4]
    8884:	455b      	cmp	r3, fp
    8886:	d2c1      	bcs.n	880c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
    8888:	e7f3      	b.n	8872 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
    888a:	f04f 0a01 	mov.w	sl, #1
    888e:	e7f0      	b.n	8872 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
    8890:	f04f 0a00 	mov.w	sl, #0
    8894:	e7ed      	b.n	8872 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
    8896:	f04f 0a00 	mov.w	sl, #0
    889a:	e7ea      	b.n	8872 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

0000889c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88a0:	b08f      	sub	sp, #60	; 0x3c
    88a2:	9102      	str	r1, [sp, #8]
    88a4:	4617      	mov	r7, r2
    88a6:	461e      	mov	r6, r3
  FatFile dir = *this;
    88a8:	ad05      	add	r5, sp, #20
    88aa:	4604      	mov	r4, r0
    88ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    88ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    88b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    88b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    88b4:	6823      	ldr	r3, [r4, #0]
    88b6:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
    88b8:	f107 0215 	add.w	r2, r7, #21
    88bc:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
    88c0:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    88c4:	ea4f 13ca 	mov.w	r3, sl, lsl #7
    88c8:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
    88cc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    88d0:	fa50 f383 	uxtab	r3, r0, r3
    88d4:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
    88d8:	428a      	cmp	r2, r1
    88da:	d1f3      	bne.n	88c4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
    88dc:	683b      	ldr	r3, [r7, #0]
    88de:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    88e0:	2300      	movs	r3, #0
    88e2:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    88e4:	2e00      	cmp	r6, #0
    88e6:	d064      	beq.n	89b2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
    88e8:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
    88ec:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    88ee:	f8cd a00c 	str.w	sl, [sp, #12]
    88f2:	46b2      	mov	sl, r6
    88f4:	e032      	b.n	895c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    88f6:	4638      	mov	r0, r7
    88f8:	f003 fa4e 	bl	bd98 <FsName::get16()>
  if (i < 5) {
    88fc:	f1b8 0f04 	cmp.w	r8, #4
    8900:	d818      	bhi.n	8934 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
    8902:	b2f3      	uxtb	r3, r6
    8904:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8908:	f8a3 0001 	strh.w	r0, [r3, #1]
    890c:	3601      	adds	r6, #1
    890e:	3501      	adds	r5, #1
    8910:	b2ed      	uxtb	r5, r5
    8912:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
    8916:	89bb      	ldrh	r3, [r7, #12]
    8918:	2b00      	cmp	r3, #0
    891a:	d1ec      	bne.n	88f6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
    891c:	687a      	ldr	r2, [r7, #4]
    891e:	68bb      	ldr	r3, [r7, #8]
    8920:	429a      	cmp	r2, r3
    8922:	d1e8      	bne.n	88f6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
    8924:	1c63      	adds	r3, r4, #1
    8926:	1e20      	subs	r0, r4, #0
    8928:	bf18      	it	ne
    892a:	2001      	movne	r0, #1
    892c:	4240      	negs	r0, r0
    892e:	b280      	uxth	r0, r0
    8930:	b2dc      	uxtb	r4, r3
    8932:	e7e3      	b.n	88fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
    8934:	f1b8 0f0a 	cmp.w	r8, #10
    8938:	d804      	bhi.n	8944 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
    893a:	b2f3      	uxtb	r3, r6
    893c:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    8940:	8098      	strh	r0, [r3, #4]
}
    8942:	e7e3      	b.n	890c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
    8944:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
    8946:	eb09 0343 	add.w	r3, r9, r3, lsl #1
    894a:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
    894c:	2d0c      	cmp	r5, #12
    894e:	d9dd      	bls.n	890c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8950:	f10b 0b01 	add.w	fp, fp, #1
    8954:	fa5f fb8b 	uxtb.w	fp, fp
    8958:	45da      	cmp	sl, fp
    895a:	d32c      	bcc.n	89b6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    895c:	9b02      	ldr	r3, [sp, #8]
    895e:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8962:	b289      	uxth	r1, r1
    8964:	0149      	lsls	r1, r1, #5
    8966:	a805      	add	r0, sp, #20
    8968:	f7ff f93a 	bl	7be0 <FatFile::seekSet(unsigned long)>
    896c:	9001      	str	r0, [sp, #4]
    896e:	b310      	cbz	r0, 89b6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8970:	2100      	movs	r1, #0
    8972:	a805      	add	r0, sp, #20
    8974:	f7ff f912 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    8978:	4681      	mov	r9, r0
    897a:	b300      	cbz	r0, 89be <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
    897c:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
    897e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8982:	f043 0301 	orr.w	r3, r3, #1
    8986:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    898a:	45da      	cmp	sl, fp
    898c:	bf0c      	ite	eq
    898e:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
    8992:	465b      	movne	r3, fp
    8994:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8996:	f04f 030f 	mov.w	r3, #15
    899a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    899c:	f04f 0300 	mov.w	r3, #0
    89a0:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
    89a2:	9b03      	ldr	r3, [sp, #12]
    89a4:	7343      	strb	r3, [r0, #13]
    89a6:	f04f 0300 	mov.w	r3, #0
    89aa:	8343      	strh	r3, [r0, #26]
    89ac:	2501      	movs	r5, #1
    89ae:	2600      	movs	r6, #0
    89b0:	e7af      	b.n	8912 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    89b2:	2301      	movs	r3, #1
    89b4:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
    89b6:	9801      	ldr	r0, [sp, #4]
    89b8:	b00f      	add	sp, #60	; 0x3c
    89ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    89be:	2300      	movs	r3, #0
    89c0:	9301      	str	r3, [sp, #4]
    89c2:	e7f8      	b.n	89b6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

000089c4 <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
    89c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89c8:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
    89ca:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
    89cc:	4602      	mov	r2, r0
    89ce:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    89d2:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
    89d4:	2120      	movs	r1, #32
    89d6:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
    89da:	4282      	cmp	r2, r0
    89dc:	d1fb      	bne.n	89d6 <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    89de:	781a      	ldrb	r2, [r3, #0]
    89e0:	2a2e      	cmp	r2, #46	; 0x2e
    89e2:	bf14      	ite	ne
    89e4:	2501      	movne	r5, #1
    89e6:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    89e8:	d103      	bne.n	89f2 <FatFile::makeSFN(FatLfn_t*)+0x2e>
    89ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    89ee:	2a2e      	cmp	r2, #46	; 0x2e
    89f0:	d0fb      	beq.n	89ea <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    89f2:	1e62      	subs	r2, r4, #1
    89f4:	429a      	cmp	r2, r3
    89f6:	d909      	bls.n	8a0c <FatFile::makeSFN(FatLfn_t*)+0x48>
    89f8:	4611      	mov	r1, r2
    89fa:	461e      	mov	r6, r3
    89fc:	460a      	mov	r2, r1
    89fe:	3901      	subs	r1, #1
    8a00:	7810      	ldrb	r0, [r2, #0]
    8a02:	282e      	cmp	r0, #46	; 0x2e
    8a04:	d002      	beq.n	8a0c <FatFile::makeSFN(FatLfn_t*)+0x48>
    8a06:	460a      	mov	r2, r1
    8a08:	42b1      	cmp	r1, r6
    8a0a:	d1f7      	bne.n	89fc <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
    8a0c:	429c      	cmp	r4, r3
    8a0e:	d908      	bls.n	8a22 <FatFile::makeSFN(FatLfn_t*)+0x5e>
    8a10:	2600      	movs	r6, #0
    8a12:	2707      	movs	r7, #7
    8a14:	46b4      	mov	ip, r6
    8a16:	46b3      	mov	fp, r6
    8a18:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    8a1c:	f04f 0a0a 	mov.w	sl, #10
    8a20:	e061      	b.n	8ae6 <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
    8a22:	2600      	movs	r6, #0
    8a24:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8a26:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8a2a:	2b20      	cmp	r3, #32
    8a2c:	f000 8084 	beq.w	8b38 <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    8a30:	2d00      	cmp	r5, #0
    8a32:	d03b      	beq.n	8aac <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8a34:	ea1b 0f06 	tst.w	fp, r6
    8a38:	bf18      	it	ne
    8a3a:	2602      	movne	r6, #2
    8a3c:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    8a40:	4628      	mov	r0, r5

 fail:
  return false;
}
    8a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8a46:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
    8a4a:	fa5f f888 	uxtb.w	r8, r8
    8a4e:	f1b8 0f05 	cmp.w	r8, #5
    8a52:	d964      	bls.n	8b1e <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
    8a54:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
    8a58:	fa5f f888 	uxtb.w	r8, r8
    8a5c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
    8a60:	d85d      	bhi.n	8b1e <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
    8a62:	45bc      	cmp	ip, r7
    8a64:	d815      	bhi.n	8a92 <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
    8a66:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
    8a6a:	b2c0      	uxtb	r0, r0
    8a6c:	2819      	cmp	r0, #25
    8a6e:	d82a      	bhi.n	8ac6 <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
    8a70:	3920      	subs	r1, #32
    8a72:	b2c9      	uxtb	r1, r1
        lc |= bit;
    8a74:	ea49 0606 	orr.w	r6, r9, r6
    8a78:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
    8a7a:	f10c 0001 	add.w	r0, ip, #1
    8a7e:	b2c0      	uxtb	r0, r0
    8a80:	44f4      	add	ip, lr
    8a82:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
    8a86:	2806      	cmp	r0, #6
    8a88:	d854      	bhi.n	8b34 <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
    8a8a:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
    8a8e:	4684      	mov	ip, r0
    8a90:	e026      	b.n	8ae0 <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
    8a92:	429a      	cmp	r2, r3
    8a94:	bf2c      	ite	cs
    8a96:	2500      	movcs	r5, #0
    8a98:	2501      	movcc	r5, #1
    8a9a:	2f0a      	cmp	r7, #10
    8a9c:	bf08      	it	eq
    8a9e:	f045 0501 	orreq.w	r5, r5, #1
    8aa2:	b175      	cbz	r5, 8ac2 <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
    8aa4:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8aa8:	2b20      	cmp	r3, #32
    8aaa:	d0ca      	beq.n	8a42 <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8aac:	2001      	movs	r0, #1
    8aae:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8ab2:	f89e 3014 	ldrb.w	r3, [lr, #20]
    8ab6:	4473      	add	r3, lr
    8ab8:	227e      	movs	r2, #126	; 0x7e
    8aba:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    8abc:	2231      	movs	r2, #49	; 0x31
    8abe:	75da      	strb	r2, [r3, #23]
    8ac0:	e7bf      	b.n	8a42 <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
    8ac2:	1e53      	subs	r3, r2, #1
        continue;
    8ac4:	e00c      	b.n	8ae0 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
    8ac6:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
    8aca:	b2c0      	uxtb	r0, r0
    8acc:	2819      	cmp	r0, #25
        uc |= bit;
    8ace:	bf98      	it	ls
    8ad0:	ea49 0b0b 	orrls.w	fp, r9, fp
    8ad4:	e7d1      	b.n	8a7a <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
    8ad6:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
    8ad8:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8adc:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8ae0:	3301      	adds	r3, #1
    8ae2:	429c      	cmp	r4, r3
    8ae4:	d99f      	bls.n	8a26 <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
    8ae6:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
    8ae8:	292e      	cmp	r1, #46	; 0x2e
    8aea:	bf08      	it	eq
    8aec:	429a      	cmpeq	r2, r3
    8aee:	bf0c      	ite	eq
    8af0:	2001      	moveq	r0, #1
    8af2:	2000      	movne	r0, #0
    8af4:	d0ef      	beq.n	8ad6 <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8af6:	2922      	cmp	r1, #34	; 0x22
    8af8:	d011      	beq.n	8b1e <FatFile::makeSFN(FatLfn_t*)+0x15a>
    8afa:	297c      	cmp	r1, #124	; 0x7c
    8afc:	d00f      	beq.n	8b1e <FatFile::makeSFN(FatLfn_t*)+0x15a>
    8afe:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
    8b02:	fa5f f888 	uxtb.w	r8, r8
    8b06:	f1b8 0f02 	cmp.w	r8, #2
    8b0a:	d908      	bls.n	8b1e <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8b0c:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
    8b10:	fa5f f888 	uxtb.w	r8, r8
    8b14:	f1b8 0f05 	cmp.w	r8, #5
    8b18:	d895      	bhi.n	8a46 <FatFile::makeSFN(FatLfn_t*)+0x82>
    8b1a:	292d      	cmp	r1, #45	; 0x2d
    8b1c:	d093      	beq.n	8a46 <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
    8b1e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8b22:	2980      	cmp	r1, #128	; 0x80
    8b24:	d004      	beq.n	8b30 <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
    8b26:	45bc      	cmp	ip, r7
    8b28:	d8b3      	bhi.n	8a92 <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
    8b2a:	4605      	mov	r5, r0
        c = '_';
    8b2c:	215f      	movs	r1, #95	; 0x5f
    8b2e:	e7a4      	b.n	8a7a <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
    8b30:	4605      	mov	r5, r0
    8b32:	e7d5      	b.n	8ae0 <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
    8b34:	4684      	mov	ip, r0
    8b36:	e7d3      	b.n	8ae0 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
    8b38:	2000      	movs	r0, #0
    8b3a:	e782      	b.n	8a42 <FatFile::makeSFN(FatLfn_t*)+0x7e>

00008b3c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b40:	b083      	sub	sp, #12
    8b42:	4604      	mov	r4, r0
    8b44:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8b46:	f891 8014 	ldrb.w	r8, [r1, #20]
    8b4a:	2362      	movs	r3, #98	; 0x62
    8b4c:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
    8b4e:	2500      	movs	r5, #0
	return systick_millis_count;
    8b50:	f8df b090 	ldr.w	fp, [pc, #144]	; 8be4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8b54:	f101 0a16 	add.w	sl, r1, #22
    8b58:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
    8b5c:	442b      	add	r3, r5
    8b5e:	b29d      	uxth	r5, r3
    if (pos > 3) {
    8b60:	f1b8 0f03 	cmp.w	r8, #3
    8b64:	bf28      	it	cs
    8b66:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8b6a:	f108 0304 	add.w	r3, r8, #4
    8b6e:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8b70:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8b74:	2a09      	cmp	r2, #9
    8b76:	bf94      	ite	ls
    8b78:	3230      	addls	r2, #48	; 0x30
    8b7a:	3237      	addhi	r2, #55	; 0x37
    8b7c:	18f9      	adds	r1, r7, r3
    8b7e:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
    8b80:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8b82:	3b01      	subs	r3, #1
    8b84:	b2db      	uxtb	r3, r3
    8b86:	4598      	cmp	r8, r3
    8b88:	d1f2      	bne.n	8b70 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
    8b8a:	eb07 0308 	add.w	r3, r7, r8
    8b8e:	227e      	movs	r2, #126	; 0x7e
    8b90:	759a      	strb	r2, [r3, #22]
    seekSet(0);
    8b92:	2100      	movs	r1, #0
    8b94:	4620      	mov	r0, r4
    8b96:	f7ff f823 	bl	7be0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8b9a:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8b9c:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
    8ba0:	4631      	mov	r1, r6
    8ba2:	4620      	mov	r0, r4
    8ba4:	f7fe fffa 	bl	7b9c <FatFile::readDirCache(bool)>
      if (!dir) {
    8ba8:	4601      	mov	r1, r0
    8baa:	b190      	cbz	r0, 8bd2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
    8bac:	7803      	ldrb	r3, [r0, #0]
    8bae:	b1bb      	cbz	r3, 8be0 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8bb0:	7ac3      	ldrb	r3, [r0, #11]
    8bb2:	f013 0f08 	tst.w	r3, #8
    8bb6:	d1f3      	bne.n	8ba0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8bb8:	464a      	mov	r2, r9
    8bba:	4650      	mov	r0, sl
    8bbc:	f008 fc56 	bl	1146c <memcmp>
    8bc0:	2800      	cmp	r0, #0
    8bc2:	d1ed      	bne.n	8ba0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8bc4:	9b01      	ldr	r3, [sp, #4]
    8bc6:	3b01      	subs	r3, #1
    8bc8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    8bcc:	9301      	str	r3, [sp, #4]
    8bce:	d1c3      	bne.n	8b58 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
    8bd0:	e003      	b.n	8bda <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
    8bd2:	7860      	ldrb	r0, [r4, #1]
    8bd4:	fab0 f080 	clz	r0, r0
    8bd8:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    8bda:	b003      	add	sp, #12
    8bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8be0:	2001      	movs	r0, #1
    8be2:	e7fa      	b.n	8bda <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
    8be4:	20005388 	.word	0x20005388

00008be8 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bec:	b08f      	sub	sp, #60	; 0x3c
    8bee:	900a      	str	r0, [sp, #40]	; 0x28
    8bf0:	460e      	mov	r6, r1
    8bf2:	9204      	str	r2, [sp, #16]
    8bf4:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
    8bf6:	780b      	ldrb	r3, [r1, #0]
    8bf8:	f013 0f70 	tst.w	r3, #112	; 0x70
    8bfc:	f000 8158 	beq.w	8eb0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
    8c00:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
    8c02:	f890 8000 	ldrb.w	r8, [r0]
    8c06:	f1b8 0f00 	cmp.w	r8, #0
    8c0a:	f040 8157 	bne.w	8ebc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8c0e:	6913      	ldr	r3, [r2, #16]
    8c10:	330c      	adds	r3, #12
    8c12:	4ab0      	ldr	r2, [pc, #704]	; (8ed4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
    8c14:	fba2 2303 	umull	r2, r3, r2, r3
    8c18:	f3c3 0287 	ubfx	r2, r3, #2, #8
    8c1c:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8c1e:	7d4b      	ldrb	r3, [r1, #21]
    8c20:	f013 0f03 	tst.w	r3, #3
    8c24:	d017      	beq.n	8c56 <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
    8c26:	1c57      	adds	r7, r2, #1
    8c28:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
    8c2a:	68b3      	ldr	r3, [r6, #8]
    8c2c:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
    8c2e:	2100      	movs	r1, #0
    8c30:	4630      	mov	r0, r6
    8c32:	f7fe ffd5 	bl	7be0 <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
    8c36:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
    8c3a:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
    8c3e:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
    8c40:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
    8c44:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
    8c48:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
    8c4c:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8c4e:	9b04      	ldr	r3, [sp, #16]
    8c50:	3316      	adds	r3, #22
    8c52:	9305      	str	r3, [sp, #20]
  }
    8c54:	e087      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8c56:	2701      	movs	r7, #1
    8c58:	e7e7      	b.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
    8c5a:	f8cd 8008 	str.w	r8, [sp, #8]
    8c5e:	e082      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
    8c60:	f8cd 8008 	str.w	r8, [sp, #8]
    8c64:	e07f      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
    8c66:	f8cd 8008 	str.w	r8, [sp, #8]
    8c6a:	e07c      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
    8c6c:	7873      	ldrb	r3, [r6, #1]
    8c6e:	2b00      	cmp	r3, #0
    8c70:	f040 8127 	bne.w	8ec2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8c74:	9b06      	ldr	r3, [sp, #24]
    8c76:	f413 7f00 	tst.w	r3, #512	; 0x200
    8c7a:	f000 8125 	beq.w	8ec8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8c7e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8c82:	3b01      	subs	r3, #1
    8c84:	2b01      	cmp	r3, #1
    8c86:	f200 8122 	bhi.w	8ece <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
    8c8a:	2c00      	cmp	r4, #0
    8c8c:	bf08      	it	eq
    8c8e:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    8c90:	42bc      	cmp	r4, r7
    8c92:	d20b      	bcs.n	8cac <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
    8c94:	2500      	movs	r5, #0
    8c96:	4629      	mov	r1, r5
    8c98:	4630      	mov	r0, r6
    8c9a:	f7fe ff7f 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!dir) {
    8c9e:	2800      	cmp	r0, #0
    8ca0:	f000 80ee 	beq.w	8e80 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    8ca4:	3401      	adds	r4, #1
    8ca6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8ca8:	42a7      	cmp	r7, r4
    8caa:	d1f4      	bne.n	8c96 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
    8cac:	9b08      	ldr	r3, [sp, #32]
    8cae:	b13b      	cbz	r3, 8cc0 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
    8cb0:	9904      	ldr	r1, [sp, #16]
    8cb2:	4630      	mov	r0, r6
    8cb4:	f7ff ff42 	bl	8b3c <FatFile::makeUniqueSfn(FatLfn_t*)>
    8cb8:	4681      	mov	r9, r0
    8cba:	2800      	cmp	r0, #0
    8cbc:	f000 80fa 	beq.w	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
    8cc0:	3f01      	subs	r7, #1
    8cc2:	b2fb      	uxtb	r3, r7
    8cc4:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
    8cc6:	449a      	add	sl, r3
    8cc8:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8ccc:	9f04      	ldr	r7, [sp, #16]
    8cce:	463a      	mov	r2, r7
    8cd0:	4629      	mov	r1, r5
    8cd2:	4630      	mov	r0, r6
    8cd4:	f7ff fde2 	bl	889c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8cd8:	4681      	mov	r9, r0
    8cda:	2800      	cmp	r0, #0
    8cdc:	f000 80ea 	beq.w	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8ce0:	0169      	lsls	r1, r5, #5
    8ce2:	4630      	mov	r0, r6
    8ce4:	f7fe ff7c 	bl	7be0 <FatFile::seekSet(unsigned long)>
    8ce8:	4681      	mov	r9, r0
    8cea:	2800      	cmp	r0, #0
    8cec:	f000 80e2 	beq.w	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8cf0:	2100      	movs	r1, #0
    8cf2:	4630      	mov	r0, r6
    8cf4:	f7fe ff52 	bl	7b9c <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
    8cf8:	4604      	mov	r4, r0
    8cfa:	2800      	cmp	r0, #0
    8cfc:	f000 80f1 	beq.w	8ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    8d00:	2220      	movs	r2, #32
    8d02:	2100      	movs	r1, #0
    8d04:	f008 fc7e 	bl	11604 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8d08:	f8d7 2016 	ldr.w	r2, [r7, #22]
    8d0c:	f8d7 301a 	ldr.w	r3, [r7, #26]
    8d10:	6022      	str	r2, [r4, #0]
    8d12:	6063      	str	r3, [r4, #4]
    8d14:	8bfa      	ldrh	r2, [r7, #30]
    8d16:	f897 3020 	ldrb.w	r3, [r7, #32]
    8d1a:	8122      	strh	r2, [r4, #8]
    8d1c:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8d1e:	7d7b      	ldrb	r3, [r7, #21]
    8d20:	f003 0318 	and.w	r3, r3, #24
    8d24:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    8d26:	4b6c      	ldr	r3, [pc, #432]	; (8ed8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
    8d28:	681b      	ldr	r3, [r3, #0]
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	f000 80ba 	beq.w	8ea4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    8d30:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    8d34:	f10d 0132 	add.w	r1, sp, #50	; 0x32
    8d38:	a80d      	add	r0, sp, #52	; 0x34
    8d3a:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d3c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    8d40:	8223      	strh	r3, [r4, #16]
    8d42:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    8d46:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    8d48:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    8d4c:	7363      	strb	r3, [r4, #13]
    8d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8d50:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8d54:	f043 0301 	orr.w	r3, r3, #1
    8d58:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
    8d5c:	e086      	b.n	8e6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d088      	beq.n	8c74 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
    8d62:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8d66:	6975      	ldr	r5, [r6, #20]
    8d68:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
    8d6c:	4659      	mov	r1, fp
    8d6e:	4630      	mov	r0, r6
    8d70:	f7fe ff14 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!dir) {
    8d74:	2800      	cmp	r0, #0
    8d76:	f43f af79 	beq.w	8c6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8d7a:	7803      	ldrb	r3, [r0, #0]
    8d7c:	2b00      	cmp	r3, #0
    8d7e:	bf18      	it	ne
    8d80:	2be5      	cmpne	r3, #229	; 0xe5
    8d82:	bf0c      	ite	eq
    8d84:	f04f 0901 	moveq.w	r9, #1
    8d88:	f04f 0900 	movne.w	r9, #0
    8d8c:	d107      	bne.n	8d9e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8d8e:	2c00      	cmp	r4, #0
    8d90:	bf08      	it	eq
    8d92:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8d94:	42bc      	cmp	r4, r7
    8d96:	d2e2      	bcs.n	8d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
    8d98:	3401      	adds	r4, #1
    8d9a:	b2e4      	uxtb	r4, r4
    8d9c:	e7df      	b.n	8d5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
    8d9e:	42bc      	cmp	r4, r7
    8da0:	bf38      	it	cc
    8da2:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8da4:	2b2e      	cmp	r3, #46	; 0x2e
    8da6:	f43f af58 	beq.w	8c5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8daa:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
    8dac:	2a0f      	cmp	r2, #15
    8dae:	d014      	beq.n	8dda <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
    8db0:	f012 0208 	ands.w	r2, r2, #8
    8db4:	f47f af57 	bne.w	8c66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
    8db8:	9b02      	ldr	r3, [sp, #8]
    8dba:	2b00      	cmp	r3, #0
    8dbc:	d13b      	bne.n	8e36 <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8dbe:	220b      	movs	r2, #11
    8dc0:	9905      	ldr	r1, [sp, #20]
    8dc2:	f008 fb53 	bl	1146c <memcmp>
    8dc6:	2800      	cmp	r0, #0
    8dc8:	d1cd      	bne.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8dca:	9b04      	ldr	r3, [sp, #16]
    8dcc:	7d5b      	ldrb	r3, [r3, #21]
    8dce:	f013 0301 	ands.w	r3, r3, #1
    8dd2:	d046      	beq.n	8e62 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
    8dd4:	2301      	movs	r3, #1
    8dd6:	9308      	str	r3, [sp, #32]
    8dd8:	e7c5      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
    8dda:	9a02      	ldr	r2, [sp, #8]
    8ddc:	b9ea      	cbnz	r2, 8e1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
    8dde:	f003 021f 	and.w	r2, r3, #31
    8de2:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
    8de4:	9907      	ldr	r1, [sp, #28]
    8de6:	4291      	cmp	r1, r2
    8de8:	d1bd      	bne.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
    8dea:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    8dee:	9302      	str	r3, [sp, #8]
    8df0:	d0b9      	beq.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
    8df2:	7b43      	ldrb	r3, [r0, #13]
    8df4:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
    8df6:	9202      	str	r2, [sp, #8]
      if (order == 1) {
    8df8:	9b03      	ldr	r3, [sp, #12]
    8dfa:	2b01      	cmp	r3, #1
    8dfc:	d1b3      	bne.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8dfe:	1c69      	adds	r1, r5, #1
    8e00:	9d02      	ldr	r5, [sp, #8]
    8e02:	462b      	mov	r3, r5
    8e04:	9a04      	ldr	r2, [sp, #16]
    8e06:	b289      	uxth	r1, r1
    8e08:	4630      	mov	r0, r6
    8e0a:	f7ff fce7 	bl	87dc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8e0e:	462b      	mov	r3, r5
    8e10:	2800      	cmp	r0, #0
    8e12:	bf08      	it	eq
    8e14:	4643      	moveq	r3, r8
    8e16:	9302      	str	r3, [sp, #8]
    8e18:	e7a5      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8e1a:	9a03      	ldr	r2, [sp, #12]
    8e1c:	3a01      	subs	r2, #1
    8e1e:	b2d2      	uxtb	r2, r2
    8e20:	9203      	str	r2, [sp, #12]
    8e22:	4293      	cmp	r3, r2
    8e24:	f47f af1c 	bne.w	8c60 <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
    8e28:	7b43      	ldrb	r3, [r0, #13]
    8e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e2c:	4293      	cmp	r3, r2
    8e2e:	d0e3      	beq.n	8df8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
    8e30:	f8cd 8008 	str.w	r8, [sp, #8]
    8e34:	e797      	b.n	8d66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8e36:	9b03      	ldr	r3, [sp, #12]
    8e38:	2b01      	cmp	r3, #1
    8e3a:	d13b      	bne.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
    8e3c:	1e41      	subs	r1, r0, #1
    8e3e:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8e42:	01d3      	lsls	r3, r2, #7
    8e44:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    8e48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8e4c:	fa52 f383 	uxtab	r3, r2, r3
    8e50:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
    8e52:	4561      	cmp	r1, ip
    8e54:	d1f5      	bne.n	8e42 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
    8e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8e58:	4293      	cmp	r3, r2
    8e5a:	d12b      	bne.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8e5c:	9b02      	ldr	r3, [sp, #8]
    8e5e:	4698      	mov	r8, r3
    8e60:	e000      	b.n	8e64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
    8e62:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8e6a:	d123      	bne.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8e6c:	f8cd 8000 	str.w	r8, [sp]
    8e70:	9b06      	ldr	r3, [sp, #24]
    8e72:	462a      	mov	r2, r5
    8e74:	4631      	mov	r1, r6
    8e76:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e78:	f7fe ff31 	bl	7cde <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8e7c:	4681      	mov	r9, r0
    8e7e:	e019      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
    8e80:	7873      	ldrb	r3, [r6, #1]
    8e82:	bb5b      	cbnz	r3, 8edc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
    8e84:	42a7      	cmp	r7, r4
    8e86:	f67f af11 	bls.w	8cac <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    8e8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
    8e8c:	4630      	mov	r0, r6
    8e8e:	f7fe fd15 	bl	78bc <FatFile::addDirCluster()>
    8e92:	4681      	mov	r9, r0
    8e94:	b170      	cbz	r0, 8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8e96:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8e98:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    8e9c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8e9e:	42a7      	cmp	r7, r4
    8ea0:	d8f4      	bhi.n	8e8c <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
    8ea2:	e703      	b.n	8cac <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8ea4:	f245 6321 	movw	r3, #22049	; 0x5621
    8ea8:	8223      	strh	r3, [r4, #16]
    8eaa:	8323      	strh	r3, [r4, #24]
    8eac:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    8eae:	e74e      	b.n	8d4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
    8eb0:	f04f 0900 	mov.w	r9, #0
}
    8eb4:	4648      	mov	r0, r9
    8eb6:	b00f      	add	sp, #60	; 0x3c
    8eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8ebc:	f04f 0900 	mov.w	r9, #0
    8ec0:	e7f8      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ec2:	f04f 0900 	mov.w	r9, #0
    8ec6:	e7f5      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ec8:	f04f 0900 	mov.w	r9, #0
    8ecc:	e7f2      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ece:	f04f 0900 	mov.w	r9, #0
    8ed2:	e7ef      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ed4:	4ec4ec4f 	.word	0x4ec4ec4f
    8ed8:	20004c5c 	.word	0x20004c5c
    8edc:	f04f 0900 	mov.w	r9, #0
    8ee0:	e7e8      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    8ee2:	f04f 0900 	mov.w	r9, #0
    8ee6:	e7e5      	b.n	8eb4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

00008ee8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eea:	b083      	sub	sp, #12
    8eec:	4608      	mov	r0, r1
    8eee:	4615      	mov	r5, r2
    8ef0:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8ef2:	780b      	ldrb	r3, [r1, #0]
    8ef4:	2b20      	cmp	r3, #32
    8ef6:	d103      	bne.n	8f00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
    8ef8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8efc:	2b20      	cmp	r3, #32
    8efe:	d0fb      	beq.n	8ef8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
    8f00:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8f02:	7803      	ldrb	r3, [r0, #0]
    8f04:	b1d3      	cbz	r3, 8f3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8f06:	2b2f      	cmp	r3, #47	; 0x2f
    8f08:	d018      	beq.n	8f3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
    8f0a:	2400      	movs	r4, #0
    8f0c:	4e2c      	ldr	r6, [pc, #176]	; (8fc0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
    8f0e:	e033      	b.n	8f78 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8f10:	f1bc 0f1f 	cmp.w	ip, #31
    8f14:	d90f      	bls.n	8f36 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8f16:	e04d      	b.n	8fb4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8f18:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
    8f1c:	d00b      	beq.n	8f36 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8f1e:	d903      	bls.n	8f28 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
    8f20:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
    8f24:	d007      	beq.n	8f36 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    8f26:	e020      	b.n	8f6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8f28:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
    8f2c:	fa5f fc8c 	uxtb.w	ip, ip
    8f30:	f1bc 0f01 	cmp.w	ip, #1
    8f34:	d819      	bhi.n	8f6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
    8f36:	2000      	movs	r0, #0
}
    8f38:	b003      	add	sp, #12
    8f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8f3c:	692b      	ldr	r3, [r5, #16]
    8f3e:	3b01      	subs	r3, #1
    8f40:	2bfe      	cmp	r3, #254	; 0xfe
    8f42:	d80f      	bhi.n	8f64 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8f44:	7803      	ldrb	r3, [r0, #0]
    8f46:	2b20      	cmp	r3, #32
    8f48:	d001      	beq.n	8f4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8f4a:	2b2f      	cmp	r3, #47	; 0x2f
    8f4c:	d105      	bne.n	8f5a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8f4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    8f52:	2b20      	cmp	r3, #32
    8f54:	d0fb      	beq.n	8f4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
    8f56:	2b2f      	cmp	r3, #47	; 0x2f
    8f58:	d0f9      	beq.n	8f4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
    8f5a:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
    8f5c:	4628      	mov	r0, r5
    8f5e:	f7ff fd31 	bl	89c4 <FatFile::makeSFN(FatLfn_t*)>
    8f62:	e7e9      	b.n	8f38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
    8f64:	2000      	movs	r0, #0
    8f66:	e7e7      	b.n	8f38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
    8f68:	3402      	adds	r4, #2
      fname->len = len;
    8f6a:	612c      	str	r4, [r5, #16]
      fname->end = path;
    8f6c:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
    8f6e:	7803      	ldrb	r3, [r0, #0]
    8f70:	2b00      	cmp	r3, #0
    8f72:	d0e3      	beq.n	8f3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    8f74:	2b2f      	cmp	r3, #47	; 0x2f
    8f76:	d0e1      	beq.n	8f3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8f78:	aa01      	add	r2, sp, #4
    8f7a:	1d01      	adds	r1, r0, #4
    8f7c:	f002 ffd6 	bl	bf2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8f80:	2800      	cmp	r0, #0
    8f82:	d0d8      	beq.n	8f36 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
    8f84:	9b01      	ldr	r3, [sp, #4]
    8f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8f8a:	d2ed      	bcs.n	8f68 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
    8f8c:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8f8e:	2b7f      	cmp	r3, #127	; 0x7f
    8f90:	d810      	bhi.n	8fb4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
    8f92:	fa5f fc83 	uxtb.w	ip, r3
    8f96:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
    8f9a:	d8bd      	bhi.n	8f18 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
    8f9c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
    8fa0:	d9b6      	bls.n	8f10 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
    8fa2:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
    8fa6:	fa5f fc8c 	uxtb.w	ip, ip
    8faa:	fa26 fc0c 	lsr.w	ip, r6, ip
    8fae:	f01c 0f01 	tst.w	ip, #1
    8fb2:	d1c0      	bne.n	8f36 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
    8fb4:	2b2e      	cmp	r3, #46	; 0x2e
    8fb6:	d0da      	beq.n	8f6e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8fb8:	2b20      	cmp	r3, #32
    8fba:	d0d8      	beq.n	8f6e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
    8fbc:	e7d5      	b.n	8f6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
    8fbe:	bf00      	nop
    8fc0:	05002101 	.word	0x05002101

00008fc4 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fc8:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
    8fca:	2300      	movs	r3, #0
    8fcc:	f88d 3004 	strb.w	r3, [sp, #4]
    8fd0:	f88d 3005 	strb.w	r3, [sp, #5]
    8fd4:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8fd8:	7883      	ldrb	r3, [r0, #2]
    8fda:	f013 0f02 	tst.w	r3, #2
    8fde:	f000 8091 	beq.w	9104 <FatFile::remove()+0x140>
    8fe2:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8fe4:	6a01      	ldr	r1, [r0, #32]
    8fe6:	b129      	cbz	r1, 8ff4 <FatFile::remove()+0x30>
    8fe8:	6880      	ldr	r0, [r0, #8]
    8fea:	f000 fdd9 	bl	9ba0 <FatPartition::freeChain(unsigned long)>
    8fee:	4603      	mov	r3, r0
    8ff0:	2800      	cmp	r0, #0
    8ff2:	d06c      	beq.n	90ce <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8ff4:	2101      	movs	r1, #1
    8ff6:	4628      	mov	r0, r5
    8ff8:	f7fe fca2 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8ffc:	4606      	mov	r6, r0
    8ffe:	2800      	cmp	r0, #0
    9000:	f000 8082 	beq.w	9108 <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
    9004:	1e42      	subs	r2, r0, #1
    9006:	300a      	adds	r0, #10
    uint8_t sum = 0;
    9008:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    900a:	01e3      	lsls	r3, r4, #7
    900c:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    9010:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9014:	fa51 f383 	uxtab	r3, r1, r3
    9018:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    901a:	4290      	cmp	r0, r2
    901c:	d1f5      	bne.n	900a <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    901e:	23e5      	movs	r3, #229	; 0xe5
    9020:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9022:	2300      	movs	r3, #0
    9024:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
    9026:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    9028:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    902a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    902e:	f002 fe4d 	bl	bccc <FsCache::sync()>
    9032:	b908      	cbnz	r0, 9038 <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9034:	2300      	movs	r3, #0
    9036:	e04a      	b.n	90ce <FatFile::remove()+0x10a>
    9038:	f506 700e 	add.w	r0, r6, #568	; 0x238
    903c:	f002 fe46 	bl	bccc <FsCache::sync()>
    9040:	2800      	cmp	r0, #0
    9042:	d0f7      	beq.n	9034 <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
    9044:	6830      	ldr	r0, [r6, #0]
    9046:	6803      	ldr	r3, [r0, #0]
    9048:	6a1b      	ldr	r3, [r3, #32]
    904a:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    904c:	4603      	mov	r3, r0
    904e:	2800      	cmp	r0, #0
    9050:	d03d      	beq.n	90ce <FatFile::remove()+0x10a>
  if (!isLFN()) {
    9052:	78ea      	ldrb	r2, [r5, #3]
    9054:	2a00      	cmp	r2, #0
    9056:	d03a      	beq.n	90ce <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
    9058:	4629      	mov	r1, r5
    905a:	a801      	add	r0, sp, #4
    905c:	f7fe fc9f 	bl	799e <FatFile::openCluster(FatFile*)>
    9060:	4603      	mov	r3, r0
    9062:	2800      	cmp	r0, #0
    9064:	d033      	beq.n	90ce <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9066:	78eb      	ldrb	r3, [r5, #3]
    9068:	2b00      	cmp	r3, #0
    906a:	d04f      	beq.n	910c <FatFile::remove()+0x148>
    906c:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    906e:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
    9070:	f04f 08e5 	mov.w	r8, #229	; 0xe5
    9074:	e021      	b.n	90ba <FatFile::remove()+0xf6>
    9076:	4639      	mov	r1, r7
    9078:	a801      	add	r0, sp, #4
    907a:	f7fe fd8f 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    907e:	2800      	cmp	r0, #0
    9080:	d046      	beq.n	9110 <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9082:	7ac2      	ldrb	r2, [r0, #11]
    9084:	2a0f      	cmp	r2, #15
    9086:	d145      	bne.n	9114 <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
    9088:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    908a:	f002 011f 	and.w	r1, r2, #31
    908e:	428e      	cmp	r6, r1
    9090:	d142      	bne.n	9118 <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
    9092:	7b41      	ldrb	r1, [r0, #13]
    9094:	42a1      	cmp	r1, r4
    9096:	d141      	bne.n	911c <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
    9098:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
    909c:	68a9      	ldr	r1, [r5, #8]
    909e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    90a2:	f043 0301 	orr.w	r3, r3, #1
    90a6:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    90aa:	f012 0f40 	tst.w	r2, #64	; 0x40
    90ae:	d112      	bne.n	90d6 <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    90b0:	3601      	adds	r6, #1
    90b2:	b2f6      	uxtb	r6, r6
    90b4:	78eb      	ldrb	r3, [r5, #3]
    90b6:	42b3      	cmp	r3, r6
    90b8:	d322      	bcc.n	9100 <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    90ba:	88a9      	ldrh	r1, [r5, #4]
    90bc:	1b89      	subs	r1, r1, r6
    90be:	b289      	uxth	r1, r1
    90c0:	0149      	lsls	r1, r1, #5
    90c2:	a801      	add	r0, sp, #4
    90c4:	f7fe fd8c 	bl	7be0 <FatFile::seekSet(unsigned long)>
    90c8:	4603      	mov	r3, r0
    90ca:	2800      	cmp	r0, #0
    90cc:	d1d3      	bne.n	9076 <FatFile::remove()+0xb2>
}
    90ce:	4618      	mov	r0, r3
    90d0:	b00a      	add	sp, #40	; 0x28
    90d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
    90d6:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    90d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    90dc:	f002 fdf6 	bl	bccc <FsCache::sync()>
    90e0:	4603      	mov	r3, r0
    90e2:	2800      	cmp	r0, #0
    90e4:	d0f3      	beq.n	90ce <FatFile::remove()+0x10a>
    90e6:	f504 700e 	add.w	r0, r4, #568	; 0x238
    90ea:	f002 fdef 	bl	bccc <FsCache::sync()>
    90ee:	4603      	mov	r3, r0
    90f0:	2800      	cmp	r0, #0
    90f2:	d0ec      	beq.n	90ce <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
    90f4:	6820      	ldr	r0, [r4, #0]
    90f6:	6803      	ldr	r3, [r0, #0]
    90f8:	6a1b      	ldr	r3, [r3, #32]
    90fa:	4798      	blx	r3
    90fc:	4603      	mov	r3, r0
    90fe:	e7e6      	b.n	90ce <FatFile::remove()+0x10a>
  return false;
    9100:	2300      	movs	r3, #0
 fail:
    9102:	e7e4      	b.n	90ce <FatFile::remove()+0x10a>
  return false;
    9104:	2300      	movs	r3, #0
    9106:	e7e2      	b.n	90ce <FatFile::remove()+0x10a>
    9108:	2300      	movs	r3, #0
    910a:	e7e0      	b.n	90ce <FatFile::remove()+0x10a>
    910c:	2300      	movs	r3, #0
    910e:	e7de      	b.n	90ce <FatFile::remove()+0x10a>
    9110:	2300      	movs	r3, #0
    9112:	e7dc      	b.n	90ce <FatFile::remove()+0x10a>
    9114:	2300      	movs	r3, #0
    9116:	e7da      	b.n	90ce <FatFile::remove()+0x10a>
    9118:	2300      	movs	r3, #0
    911a:	e7d8      	b.n	90ce <FatFile::remove()+0x10a>
    911c:	2300      	movs	r3, #0
    911e:	e7d6      	b.n	90ce <FatFile::remove()+0x10a>

00009120 <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
    9120:	b510      	push	{r4, lr}
    9122:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
    9124:	6848      	ldr	r0, [r1, #4]
    9126:	b130      	cbz	r0, 9136 <initFatDirCallback(unsigned long, void*)+0x16>
    9128:	890b      	ldrh	r3, [r1, #8]
    912a:	3301      	adds	r3, #1
    912c:	b29b      	uxth	r3, r3
    912e:	810b      	strh	r3, [r1, #8]
    9130:	894a      	ldrh	r2, [r1, #10]
    9132:	429a      	cmp	r2, r3
    9134:	d901      	bls.n	913a <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
    9136:	6820      	ldr	r0, [r4, #0]
    9138:	bd10      	pop	{r4, pc}
    913a:	6803      	ldr	r3, [r0, #0]
    913c:	685b      	ldr	r3, [r3, #4]
    913e:	2201      	movs	r2, #1
    9140:	4902      	ldr	r1, [pc, #8]	; (914c <initFatDirCallback(unsigned long, void*)+0x2c>)
    9142:	4798      	blx	r3
    state->count = 0;
    9144:	2300      	movs	r3, #0
    9146:	8123      	strh	r3, [r4, #8]
    9148:	e7f5      	b.n	9136 <initFatDirCallback(unsigned long, void*)+0x16>
    914a:	bf00      	nop
    914c:	20002e44 	.word	0x20002e44

00009150 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
    9150:	b5f0      	push	{r4, r5, r6, r7, lr}
    9152:	b087      	sub	sp, #28
    9154:	4604      	mov	r4, r0
    9156:	460e      	mov	r6, r1
    9158:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    915a:	f44f 7200 	mov.w	r2, #512	; 0x200
    915e:	2100      	movs	r1, #0
    9160:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9162:	f008 fa4f 	bl	11604 <memset>
  writeMsg("Writing FAT ");
    9166:	6a20      	ldr	r0, [r4, #32]
    9168:	b120      	cbz	r0, 9174 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
    916a:	6803      	ldr	r3, [r0, #0]
    916c:	685b      	ldr	r3, [r3, #4]
    916e:	220c      	movs	r2, #12
    9170:	4920      	ldr	r1, [pc, #128]	; (91f4 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
    9172:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
    9174:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9176:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
    9178:	6a23      	ldr	r3, [r4, #32]
    917a:	9304      	str	r3, [sp, #16]
  state.count = 0;
    917c:	2300      	movs	r3, #0
    917e:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
    9182:	096b      	lsrs	r3, r5, #5
    9184:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
    9188:	69e0      	ldr	r0, [r4, #28]
    918a:	68e1      	ldr	r1, [r4, #12]
    918c:	6803      	ldr	r3, [r0, #0]
    918e:	aa03      	add	r2, sp, #12
    9190:	9200      	str	r2, [sp, #0]
    9192:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    9194:	4b18      	ldr	r3, [pc, #96]	; (91f8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
    9196:	1e6a      	subs	r2, r5, #1
    9198:	3101      	adds	r1, #1
    919a:	47b8      	blx	r7
    919c:	4603      	mov	r3, r0
    919e:	b328      	cbz	r0, 91ec <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
    91a0:	6a20      	ldr	r0, [r4, #32]
    91a2:	b120      	cbz	r0, 91ae <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
    91a4:	6803      	ldr	r3, [r0, #0]
    91a6:	685b      	ldr	r3, [r3, #4]
    91a8:	2202      	movs	r2, #2
    91aa:	4914      	ldr	r1, [pc, #80]	; (91fc <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
    91ac:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
    91ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    91b0:	22f8      	movs	r2, #248	; 0xf8
    91b2:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
    91b4:	2e10      	cmp	r6, #16
    91b6:	bf0c      	ite	eq
    91b8:	2004      	moveq	r0, #4
    91ba:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
    91bc:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
    91be:	21ff      	movs	r1, #255	; 0xff
    91c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91c2:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
    91c4:	3301      	adds	r3, #1
    91c6:	4298      	cmp	r0, r3
    91c8:	d1fa      	bne.n	91c0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
    91ca:	69e0      	ldr	r0, [r4, #28]
    91cc:	6803      	ldr	r3, [r0, #0]
    91ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91d2:	68e1      	ldr	r1, [r4, #12]
    91d4:	4798      	blx	r3
    91d6:	4603      	mov	r3, r0
    91d8:	b140      	cbz	r0, 91ec <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
    91da:	69e0      	ldr	r0, [r4, #28]
    91dc:	68e5      	ldr	r5, [r4, #12]
    91de:	68a1      	ldr	r1, [r4, #8]
    91e0:	6803      	ldr	r3, [r0, #0]
    91e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    91e6:	4429      	add	r1, r5
    91e8:	4798      	blx	r3
    91ea:	4603      	mov	r3, r0
}
    91ec:	4618      	mov	r0, r3
    91ee:	b007      	add	sp, #28
    91f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91f2:	bf00      	nop
    91f4:	20001fec 	.word	0x20001fec
    91f8:	00009121 	.word	0x00009121
    91fc:	20002010 	.word	0x20002010

00009200 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
    9200:	b570      	push	{r4, r5, r6, lr}
    9202:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    9204:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    9206:	f44f 7600 	mov.w	r6, #512	; 0x200
    920a:	4632      	mov	r2, r6
    920c:	2100      	movs	r1, #0
    920e:	4620      	mov	r0, r4
    9210:	f008 f9f8 	bl	11604 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    9214:	23eb      	movs	r3, #235	; 0xeb
    9216:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    9218:	2376      	movs	r3, #118	; 0x76
    921a:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    921c:	2390      	movs	r3, #144	; 0x90
    921e:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
    9220:	2320      	movs	r3, #32
    9222:	70e3      	strb	r3, [r4, #3]
    9224:	7123      	strb	r3, [r4, #4]
    9226:	7163      	strb	r3, [r4, #5]
    9228:	71a3      	strb	r3, [r4, #6]
    922a:	71e3      	strb	r3, [r4, #7]
    922c:	7223      	strb	r3, [r4, #8]
    922e:	7263      	strb	r3, [r4, #9]
    9230:	72a3      	strb	r3, [r4, #10]
    9232:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
    9236:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
    923a:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
    923c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    923e:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
    9240:	2302      	movs	r3, #2
    9242:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
    9244:	23f8      	movs	r3, #248	; 0xf8
    9246:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
    9248:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    924a:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
    924c:	69ab      	ldr	r3, [r5, #24]
    924e:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    9250:	f64a 2355 	movw	r3, #43605	; 0xaa55
    9254:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
    9258:	bd70      	pop	{r4, r5, r6, pc}

0000925a <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
    925a:	b538      	push	{r3, r4, r5, lr}
    925c:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
    925e:	f44f 7200 	mov.w	r2, #512	; 0x200
    9262:	2100      	movs	r1, #0
    9264:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9266:	f008 f9cd 	bl	11604 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
    926a:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
    926c:	6922      	ldr	r2, [r4, #16]
    926e:	6821      	ldr	r1, [r4, #0]
    9270:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
    9274:	f002 fdb6 	bl	bde4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
    9278:	6922      	ldr	r2, [r4, #16]
    927a:	69a3      	ldr	r3, [r4, #24]
    927c:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
    927e:	3a01      	subs	r2, #1
    9280:	6821      	ldr	r1, [r4, #0]
    9282:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
    9286:	f002 fdad 	bl	bde4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
    928a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    928e:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
    9292:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
    9294:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
    9298:	69a3      	ldr	r3, [r4, #24]
    929a:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    929e:	f64a 2355 	movw	r3, #43605	; 0xaa55
    92a2:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
    92a6:	69e0      	ldr	r0, [r4, #28]
    92a8:	6803      	ldr	r3, [r0, #0]
    92aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    92ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    92ae:	2100      	movs	r1, #0
    92b0:	4798      	blx	r3
}
    92b2:	bd38      	pop	{r3, r4, r5, pc}

000092b4 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
    92b4:	b570      	push	{r4, r5, r6, lr}
    92b6:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    92b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    92ba:	f44f 7380 	mov.w	r3, #256	; 0x100
    92be:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    92c0:	6946      	ldr	r6, [r0, #20]
    92c2:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
    92c6:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    92ca:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    92ce:	f202 1001 	addw	r0, r2, #257	; 0x101
    92d2:	0a00      	lsrs	r0, r0, #8
    92d4:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    92d6:	0040      	lsls	r0, r0, #1
    92d8:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    92dc:	459c      	cmp	ip, r3
    92de:	d90f      	bls.n	9300 <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    92e0:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
    92e4:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    92e6:	1af2      	subs	r2, r6, r3
    92e8:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
    92ec:	f202 1101 	addw	r1, r2, #257	; 0x101
    92f0:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
    92f2:	0048      	lsls	r0, r1, #1
    92f4:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
    92f8:	4563      	cmp	r3, ip
    92fa:	d3f3      	bcc.n	92e4 <FatFormatter::makeFat16()+0x30>
    92fc:	6063      	str	r3, [r4, #4]
    92fe:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
    9300:	eba3 030c 	sub.w	r3, r3, ip
    9304:	f103 0180 	add.w	r1, r3, #128	; 0x80
    9308:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
    930a:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
    930e:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    9312:	d213      	bcs.n	933c <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
    9314:	2101      	movs	r1, #1
    9316:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    9318:	3381      	adds	r3, #129	; 0x81
    931a:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
    931c:	3021      	adds	r0, #33	; 0x21
    931e:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
    9322:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
    9324:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    9328:	bf34      	ite	cc
    932a:	2304      	movcc	r3, #4
    932c:	2306      	movcs	r3, #6
    932e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    9332:	4620      	mov	r0, r4
    9334:	f7ff ff91 	bl	925a <FatFormatter::writeMbr()>
    9338:	b950      	cbnz	r0, 9350 <FatFormatter::makeFat16()+0x9c>
}
    933a:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
    933c:	6a20      	ldr	r0, [r4, #32]
    933e:	2800      	cmp	r0, #0
    9340:	d040      	beq.n	93c4 <FatFormatter::makeFat16()+0x110>
    9342:	6803      	ldr	r3, [r0, #0]
    9344:	685b      	ldr	r3, [r3, #4]
    9346:	2213      	movs	r2, #19
    9348:	491f      	ldr	r1, [pc, #124]	; (93c8 <FatFormatter::makeFat16()+0x114>)
    934a:	4798      	blx	r3
    return false;
    934c:	2000      	movs	r0, #0
    934e:	e7f4      	b.n	933a <FatFormatter::makeFat16()+0x86>
  initPbs();
    9350:	4620      	mov	r0, r4
    9352:	f7ff ff55 	bl	9200 <FatFormatter::initPbs()>
    9356:	f44f 7300 	mov.w	r3, #512	; 0x200
    935a:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
    935e:	68a3      	ldr	r3, [r4, #8]
    9360:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
    9362:	2380      	movs	r3, #128	; 0x80
    9364:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
    9368:	2329      	movs	r3, #41	; 0x29
    936a:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
    936e:	4b17      	ldr	r3, [pc, #92]	; (93cc <FatFormatter::makeFat16()+0x118>)
    9370:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9374:	f105 032a 	add.w	r3, r5, #42	; 0x2a
    9378:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
    937c:	2220      	movs	r2, #32
    937e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
    9382:	4299      	cmp	r1, r3
    9384:	d1fb      	bne.n	937e <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
    9386:	2346      	movs	r3, #70	; 0x46
    9388:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
    938c:	2341      	movs	r3, #65	; 0x41
    938e:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
    9392:	2354      	movs	r3, #84	; 0x54
    9394:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
    9398:	2331      	movs	r3, #49	; 0x31
    939a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
    939e:	2336      	movs	r3, #54	; 0x36
    93a0:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
    93a4:	69e0      	ldr	r0, [r4, #28]
    93a6:	6803      	ldr	r3, [r0, #0]
    93a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    93aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
    93ac:	6921      	ldr	r1, [r4, #16]
    93ae:	4798      	blx	r3
    93b0:	2800      	cmp	r0, #0
    93b2:	d0c2      	beq.n	933a <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
    93b4:	6862      	ldr	r2, [r4, #4]
    93b6:	68e3      	ldr	r3, [r4, #12]
    93b8:	1ad2      	subs	r2, r2, r3
    93ba:	2110      	movs	r1, #16
    93bc:	4620      	mov	r0, r4
    93be:	f7ff fec7 	bl	9150 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    93c2:	e7ba      	b.n	933a <FatFormatter::makeFat16()+0x86>
    return false;
    93c4:	2000      	movs	r0, #0
    93c6:	e7b8      	b.n	933a <FatFormatter::makeFat16()+0x86>
    93c8:	20001fc0 	.word	0x20001fc0
    93cc:	0012d687 	.word	0x0012d687

000093d0 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
    93d0:	b570      	push	{r4, r5, r6, lr}
    93d2:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
    93d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
    93d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    93da:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    93dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    93e0:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    93e2:	6946      	ldr	r6, [r0, #20]
    93e4:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
    93e8:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
    93ec:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    93f0:	f101 0381 	add.w	r3, r1, #129	; 0x81
    93f4:	09db      	lsrs	r3, r3, #7
    93f6:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
    93f8:	f242 0209 	movw	r2, #8201	; 0x2009
    93fc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
    9400:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    9404:	d931      	bls.n	946a <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    9406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
    940a:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
    940e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    9412:	1ab1      	subs	r1, r6, r2
    9414:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
    9418:	f101 0381 	add.w	r3, r1, #129	; 0x81
    941c:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
    941e:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
    9422:	4282      	cmp	r2, r0
    9424:	d3f3      	bcc.n	940e <FatFormatter::makeFat32()+0x3e>
    9426:	6062      	str	r2, [r4, #4]
    9428:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
    942a:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    942e:	4281      	cmp	r1, r0
    9430:	d91e      	bls.n	9470 <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
    9432:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
    9436:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
    943a:	b29b      	uxth	r3, r3
    943c:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
    943e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    9442:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
    9444:	fb01 220c 	mla	r2, r1, ip, r2
    9448:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    944c:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
    944e:	4b55      	ldr	r3, [pc, #340]	; (95a4 <FatFormatter::makeFat32()+0x1d4>)
    9450:	429a      	cmp	r2, r3
    9452:	bf94      	ite	ls
    9454:	220b      	movls	r2, #11
    9456:	220c      	movhi	r2, #12
    9458:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
    945c:	4620      	mov	r0, r4
    945e:	f7ff fefc 	bl	925a <FatFormatter::writeMbr()>
    9462:	4603      	mov	r3, r0
    9464:	b978      	cbnz	r0, 9486 <FatFormatter::makeFat32()+0xb6>
}
    9466:	4618      	mov	r0, r3
    9468:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
    946a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    946e:	e7dc      	b.n	942a <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
    9470:	6a20      	ldr	r0, [r4, #32]
    9472:	2800      	cmp	r0, #0
    9474:	f000 8093 	beq.w	959e <FatFormatter::makeFat32()+0x1ce>
    9478:	6803      	ldr	r3, [r0, #0]
    947a:	685b      	ldr	r3, [r3, #4]
    947c:	2213      	movs	r2, #19
    947e:	494a      	ldr	r1, [pc, #296]	; (95a8 <FatFormatter::makeFat32()+0x1d8>)
    9480:	4798      	blx	r3
    return false;
    9482:	2300      	movs	r3, #0
    9484:	e7ef      	b.n	9466 <FatFormatter::makeFat32()+0x96>
  initPbs();
    9486:	4620      	mov	r0, r4
    9488:	f7ff feba 	bl	9200 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
    948c:	68a3      	ldr	r3, [r4, #8]
    948e:	626b      	str	r3, [r5, #36]	; 0x24
    9490:	2302      	movs	r3, #2
    9492:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
    9494:	2301      	movs	r3, #1
    9496:	862b      	strh	r3, [r5, #48]	; 0x30
    9498:	2306      	movs	r3, #6
    949a:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
    949c:	2380      	movs	r3, #128	; 0x80
    949e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
    94a2:	2329      	movs	r3, #41	; 0x29
    94a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
    94a8:	4b40      	ldr	r3, [pc, #256]	; (95ac <FatFormatter::makeFat32()+0x1dc>)
    94aa:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    94ae:	f105 0346 	add.w	r3, r5, #70	; 0x46
    94b2:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
    94b6:	2220      	movs	r2, #32
    94b8:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
    94bc:	4299      	cmp	r1, r3
    94be:	d1fb      	bne.n	94b8 <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
    94c0:	2346      	movs	r3, #70	; 0x46
    94c2:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
    94c6:	2341      	movs	r3, #65	; 0x41
    94c8:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
    94cc:	2354      	movs	r3, #84	; 0x54
    94ce:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
    94d2:	2333      	movs	r3, #51	; 0x33
    94d4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
    94d8:	2332      	movs	r3, #50	; 0x32
    94da:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    94de:	69e0      	ldr	r0, [r4, #28]
    94e0:	6803      	ldr	r3, [r0, #0]
    94e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94e6:	6921      	ldr	r1, [r4, #16]
    94e8:	4798      	blx	r3
    94ea:	4603      	mov	r3, r0
    94ec:	2800      	cmp	r0, #0
    94ee:	d0ba      	beq.n	9466 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
    94f0:	69e0      	ldr	r0, [r4, #28]
    94f2:	6921      	ldr	r1, [r4, #16]
    94f4:	6803      	ldr	r3, [r0, #0]
    94f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    94fa:	3106      	adds	r1, #6
    94fc:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
    94fe:	4603      	mov	r3, r0
    9500:	2800      	cmp	r0, #0
    9502:	d0b0      	beq.n	9466 <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
    9504:	f44f 7200 	mov.w	r2, #512	; 0x200
    9508:	2100      	movs	r1, #0
    950a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    950c:	f008 f87a 	bl	11604 <memset>
    9510:	4b27      	ldr	r3, [pc, #156]	; (95b0 <FatFormatter::makeFat32()+0x1e0>)
    9512:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    9516:	69e0      	ldr	r0, [r4, #28]
    9518:	6921      	ldr	r1, [r4, #16]
    951a:	6803      	ldr	r3, [r0, #0]
    951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    951e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9520:	3102      	adds	r1, #2
    9522:	4798      	blx	r3
    9524:	4603      	mov	r3, r0
    9526:	2800      	cmp	r0, #0
    9528:	d09d      	beq.n	9466 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
    952a:	69e0      	ldr	r0, [r4, #28]
    952c:	6921      	ldr	r1, [r4, #16]
    952e:	6803      	ldr	r3, [r0, #0]
    9530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9532:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9534:	3108      	adds	r1, #8
    9536:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
    9538:	4603      	mov	r3, r0
    953a:	2800      	cmp	r0, #0
    953c:	d093      	beq.n	9466 <FatFormatter::makeFat32()+0x96>
    953e:	4b1d      	ldr	r3, [pc, #116]	; (95b4 <FatFormatter::makeFat32()+0x1e4>)
    9540:	602b      	str	r3, [r5, #0]
    9542:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
    9546:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    954a:	3320      	adds	r3, #32
    954c:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    9550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9554:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
    9558:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    955c:	69e0      	ldr	r0, [r4, #28]
    955e:	6921      	ldr	r1, [r4, #16]
    9560:	6803      	ldr	r3, [r0, #0]
    9562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9564:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9566:	3101      	adds	r1, #1
    9568:	4798      	blx	r3
    956a:	4603      	mov	r3, r0
    956c:	2800      	cmp	r0, #0
    956e:	f43f af7a 	beq.w	9466 <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
    9572:	69e0      	ldr	r0, [r4, #28]
    9574:	6921      	ldr	r1, [r4, #16]
    9576:	6803      	ldr	r3, [r0, #0]
    9578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    957a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    957c:	3107      	adds	r1, #7
    957e:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
    9580:	4603      	mov	r3, r0
    9582:	2800      	cmp	r0, #0
    9584:	f43f af6f 	beq.w	9466 <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
    9588:	68a2      	ldr	r2, [r4, #8]
    958a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    958e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    9592:	2120      	movs	r1, #32
    9594:	4620      	mov	r0, r4
    9596:	f7ff fddb 	bl	9150 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    959a:	4603      	mov	r3, r0
    959c:	e763      	b.n	9466 <FatFormatter::makeFat32()+0x96>
    return false;
    959e:	2300      	movs	r3, #0
    95a0:	e761      	b.n	9466 <FatFormatter::makeFat32()+0x96>
    95a2:	bf00      	nop
    95a4:	00fb0400 	.word	0x00fb0400
    95a8:	20001fc0 	.word	0x20001fc0
    95ac:	0012d687 	.word	0x0012d687
    95b0:	aa550000 	.word	0xaa550000
    95b4:	41615252 	.word	0x41615252

000095b8 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    95b8:	b538      	push	{r3, r4, r5, lr}
    95ba:	4604      	mov	r4, r0
    95bc:	4608      	mov	r0, r1
  m_dev = dev;
    95be:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
    95c0:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
    95c2:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
    95c4:	680b      	ldr	r3, [r1, #0]
    95c6:	69db      	ldr	r3, [r3, #28]
    95c8:	4798      	blx	r3
    95ca:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
    95cc:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
    95d0:	0ada      	lsrs	r2, r3, #11
    95d2:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
    95d4:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
    95d8:	d31d      	bcc.n	9616 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
    95da:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
    95de:	d333      	bcc.n	9648 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
    95e0:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
    95e4:	d342      	bcc.n	966c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
    95e6:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
    95ea:	d341      	bcc.n	9670 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
    95ec:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
    95f0:	d340      	bcc.n	9674 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
    95f2:	4a22      	ldr	r2, [pc, #136]	; (967c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
    95f4:	4293      	cmp	r3, r2
    95f6:	d93f      	bls.n	9678 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
    95f8:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
    95fc:	4293      	cmp	r3, r2
    95fe:	d814      	bhi.n	962a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
    9600:	2340      	movs	r3, #64	; 0x40
    9602:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    9606:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    960a:	d320      	bcc.n	964e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
    960c:	4620      	mov	r0, r4
    960e:	f7ff fedf 	bl	93d0 <FatFormatter::makeFat32()>
    9612:	4605      	mov	r5, r0
    9614:	e01f      	b.n	9656 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
    9616:	6a20      	ldr	r0, [r4, #32]
    9618:	b1a0      	cbz	r0, 9644 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
    961a:	6803      	ldr	r3, [r0, #0]
    961c:	685b      	ldr	r3, [r3, #4]
    961e:	2214      	movs	r2, #20
    9620:	4917      	ldr	r1, [pc, #92]	; (9680 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
    9622:	4798      	blx	r3
    return false;
    9624:	2500      	movs	r5, #0
}
    9626:	4628      	mov	r0, r5
    9628:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
    962a:	2380      	movs	r3, #128	; 0x80
    962c:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    9630:	e7ec      	b.n	960c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
    9632:	6a20      	ldr	r0, [r4, #32]
    9634:	2800      	cmp	r0, #0
    9636:	d0f6      	beq.n	9626 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9638:	6803      	ldr	r3, [r0, #0]
    963a:	685b      	ldr	r3, [r3, #4]
    963c:	220f      	movs	r2, #15
    963e:	4911      	ldr	r1, [pc, #68]	; (9684 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
    9640:	4798      	blx	r3
    9642:	e7f0      	b.n	9626 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
    9644:	2500      	movs	r5, #0
    9646:	e7ee      	b.n	9626 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9648:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
    964a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
    964e:	4620      	mov	r0, r4
    9650:	f7ff fe30 	bl	92b4 <FatFormatter::makeFat16()>
    9654:	4605      	mov	r5, r0
  if (rtn) {
    9656:	2d00      	cmp	r5, #0
    9658:	d0eb      	beq.n	9632 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
    965a:	6a20      	ldr	r0, [r4, #32]
    965c:	2800      	cmp	r0, #0
    965e:	d0e2      	beq.n	9626 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    9660:	6803      	ldr	r3, [r0, #0]
    9662:	685b      	ldr	r3, [r3, #4]
    9664:	220d      	movs	r2, #13
    9666:	4908      	ldr	r1, [pc, #32]	; (9688 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
    9668:	4798      	blx	r3
    966a:	e7dc      	b.n	9626 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    966c:	2304      	movs	r3, #4
    966e:	e7ec      	b.n	964a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9670:	2308      	movs	r3, #8
    9672:	e7ea      	b.n	964a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9674:	2310      	movs	r3, #16
    9676:	e7e8      	b.n	964a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    9678:	2320      	movs	r3, #32
    967a:	e7e6      	b.n	964a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
    967c:	002007ff 	.word	0x002007ff
    9680:	20001f88 	.word	0x20001f88
    9684:	20001fb0 	.word	0x20001fb0
    9688:	20001fa0 	.word	0x20001fa0

0000968c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    968c:	2a04      	cmp	r2, #4
    968e:	d804      	bhi.n	969a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9690:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9694:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
    9698:	4770      	bx	lr
  } else if (i < 11) {
    969a:	2a0a      	cmp	r2, #10
    969c:	d803      	bhi.n	96a6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    969e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    96a2:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
    96a4:	4770      	bx	lr
  } else if (i < 13) {
    96a6:	2a0c      	cmp	r2, #12
    96a8:	d803      	bhi.n	96b2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    96aa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    96ae:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
    96b0:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    96b2:	2000      	movs	r0, #0
}
    96b4:	4770      	bx	lr

000096b6 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    96b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96ba:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    96bc:	7804      	ldrb	r4, [r0, #0]
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    96be:	2c00      	cmp	r4, #0
    96c0:	d041      	beq.n	9746 <FatFile::getSFN(char*, unsigned int)+0x90>
    96c2:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    96c4:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    96c8:	d007      	beq.n	96da <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
    96ca:	2a01      	cmp	r2, #1
    96cc:	d93b      	bls.n	9746 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    96ce:	232f      	movs	r3, #47	; 0x2f
    96d0:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
    96d2:	2300      	movs	r3, #0
    96d4:	704b      	strb	r3, [r1, #1]
    return 1;
    96d6:	2001      	movs	r0, #1
    96d8:	e037      	b.n	974a <FatFile::getSFN(char*, unsigned int)+0x94>
  }
  // cache entry
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    96da:	2100      	movs	r1, #0
    96dc:	f7fe f930 	bl	7940 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    96e0:	4686      	mov	lr, r0
    96e2:	b380      	cbz	r0, 9746 <FatFile::getSFN(char*, unsigned int)+0x90>
    DBG_FAIL_MACRO;
    goto fail;
  }
  ptr = dir->name;
    96e4:	4603      	mov	r3, r0
    96e6:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
    96e8:	2108      	movs	r1, #8
  for (uint8_t i = 0; i < 12; i++) {
    if (i == 8) {
      if (*ptr == ' ') {
        break;
      }
      lcBit = FAT_CASE_LC_EXT;
    96ea:	f04f 0810 	mov.w	r8, #16
      c = '.';
    96ee:	272e      	movs	r7, #46	; 0x2e
    96f0:	e012      	b.n	9718 <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
    96f2:	781a      	ldrb	r2, [r3, #0]
    96f4:	2a20      	cmp	r2, #32
    96f6:	d022      	beq.n	973e <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
    96f8:	4641      	mov	r1, r8
      c = '.';
    96fa:	46bc      	mov	ip, r7
    96fc:	e002      	b.n	9704 <FatFile::getSFN(char*, unsigned int)+0x4e>
    } else {
      c = *ptr++;
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
        c += 'a' - 'A';
      }
      if (c == ' ') {
    96fe:	f1bc 0f20 	cmp.w	ip, #32
    9702:	d006      	beq.n	9712 <FatFile::getSFN(char*, unsigned int)+0x5c>
        continue;
      }
    }
    if ((j + 1u) >= size) {
    9704:	46a1      	mov	r9, r4
    9706:	1c62      	adds	r2, r4, #1
    9708:	42b2      	cmp	r2, r6
    970a:	d21c      	bcs.n	9746 <FatFile::getSFN(char*, unsigned int)+0x90>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[j++] = c;
    970c:	b2d4      	uxtb	r4, r2
    970e:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
    9712:	3001      	adds	r0, #1
    9714:	280c      	cmp	r0, #12
    9716:	d012      	beq.n	973e <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
    9718:	b2c2      	uxtb	r2, r0
    971a:	2a08      	cmp	r2, #8
    971c:	d0e9      	beq.n	96f2 <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
    971e:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9722:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
    9726:	b2d2      	uxtb	r2, r2
    9728:	2a19      	cmp	r2, #25
    972a:	d8e8      	bhi.n	96fe <FatFile::getSFN(char*, unsigned int)+0x48>
    972c:	f89e 200c 	ldrb.w	r2, [lr, #12]
    9730:	4211      	tst	r1, r2
    9732:	d0e7      	beq.n	9704 <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
    9734:	f10c 0c20 	add.w	ip, ip, #32
    9738:	fa5f fc8c 	uxtb.w	ip, ip
    973c:	e7e2      	b.n	9704 <FatFile::getSFN(char*, unsigned int)+0x4e>
  }
  name[j] = '\0';
    973e:	4620      	mov	r0, r4
    9740:	2300      	movs	r3, #0
    9742:	552b      	strb	r3, [r5, r4]
  return j;
    9744:	e001      	b.n	974a <FatFile::getSFN(char*, unsigned int)+0x94>

 fail:
  name[0] = '\0';
    9746:	2000      	movs	r0, #0
    9748:	7028      	strb	r0, [r5, #0]
  return 0;
}
    974a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00009750 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    9750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9754:	b08b      	sub	sp, #44	; 0x2c
    9756:	4689      	mov	r9, r1
  FatFile() {}
    9758:	2300      	movs	r3, #0
    975a:	f88d 3004 	strb.w	r3, [sp, #4]
    975e:	f88d 3005 	strb.w	r3, [sp, #5]
    9762:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
    9766:	7803      	ldrb	r3, [r0, #0]
    9768:	2b00      	cmp	r3, #0
    976a:	d05d      	beq.n	9828 <FatFile::getName8(char*, unsigned int)+0xd8>
    976c:	4604      	mov	r4, r0
    976e:	4617      	mov	r7, r2
  if (!isLFN()) {
    9770:	78c3      	ldrb	r3, [r0, #3]
    9772:	b913      	cbnz	r3, 977a <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
    9774:	f7ff ff9f 	bl	96b6 <FatFile::getSFN(char*, unsigned int)>
    9778:	e059      	b.n	982e <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
    977a:	4601      	mov	r1, r0
    977c:	a801      	add	r0, sp, #4
    977e:	f7fe f90e 	bl	799e <FatFile::openCluster(FatFile*)>
    9782:	2800      	cmp	r0, #0
    9784:	d050      	beq.n	9828 <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9786:	78e3      	ldrb	r3, [r4, #3]
    9788:	2b00      	cmp	r3, #0
    978a:	d05d      	beq.n	9848 <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
    978c:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    978e:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
    9792:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9794:	3f01      	subs	r7, #1
    9796:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9798:	88a1      	ldrh	r1, [r4, #4]
    979a:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    979e:	b289      	uxth	r1, r1
    97a0:	0149      	lsls	r1, r1, #5
    97a2:	a801      	add	r0, sp, #4
    97a4:	f7fe fa1c 	bl	7be0 <FatFile::seekSet(unsigned long)>
    97a8:	2800      	cmp	r0, #0
    97aa:	d03d      	beq.n	9828 <FatFile::getName8(char*, unsigned int)+0xd8>
    97ac:	2100      	movs	r1, #0
    97ae:	a801      	add	r0, sp, #4
    97b0:	f7fe f9f4 	bl	7b9c <FatFile::readDirCache(bool)>
    if (!ldir) {
    97b4:	4682      	mov	sl, r0
    97b6:	b3b8      	cbz	r0, 9828 <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    97b8:	7ac3      	ldrb	r3, [r0, #11]
    97ba:	2b0f      	cmp	r3, #15
    97bc:	d134      	bne.n	9828 <FatFile::getName8(char*, unsigned int)+0xd8>
    97be:	7803      	ldrb	r3, [r0, #0]
    97c0:	f003 031f 	and.w	r3, r3, #31
    97c4:	455b      	cmp	r3, fp
    97c6:	d12f      	bne.n	9828 <FatFile::getName8(char*, unsigned int)+0xd8>
    97c8:	f04f 0800 	mov.w	r8, #0
    97cc:	e012      	b.n	97f4 <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
    97ce:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
    97d2:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
    97d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    97d8:	d323      	bcc.n	9822 <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
    97da:	b3b0      	cbz	r0, 984a <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    97dc:	463a      	mov	r2, r7
    97de:	4629      	mov	r1, r5
    97e0:	f002 fb55 	bl	be8e <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    97e4:	4605      	mov	r5, r0
    97e6:	b1f8      	cbz	r0, 9828 <FatFile::getName8(char*, unsigned int)+0xd8>
    97e8:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
    97ea:	f108 0801 	add.w	r8, r8, #1
    97ee:	f1b8 0f0d 	cmp.w	r8, #13
    97f2:	d021      	beq.n	9838 <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
    97f4:	fa5f f288 	uxtb.w	r2, r8
    97f8:	4651      	mov	r1, sl
    97fa:	4620      	mov	r0, r4
    97fc:	f7ff ff46 	bl	968c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    9800:	2e00      	cmp	r6, #0
    9802:	d0e4      	beq.n	97ce <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
    9804:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    9808:	b29b      	uxth	r3, r3
    980a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    980e:	d20b      	bcs.n	9828 <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    9810:	4b10      	ldr	r3, [pc, #64]	; (9854 <FatFile::getName8(char*, unsigned int)+0x104>)
    9812:	ea03 2686 	and.w	r6, r3, r6, lsl #10
    9816:	f3c0 0009 	ubfx	r0, r0, #0, #10
    981a:	4306      	orrs	r6, r0
    981c:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
    9820:	e7dc      	b.n	97dc <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
    9822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9826:	d305      	bcc.n	9834 <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
    9828:	2000      	movs	r0, #0
    982a:	f889 0000 	strb.w	r0, [r9]
}
    982e:	b00b      	add	sp, #44	; 0x2c
    9830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
    9834:	4606      	mov	r6, r0
    9836:	e7d8      	b.n	97ea <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9838:	f10b 0b01 	add.w	fp, fp, #1
    983c:	fa5f fb8b 	uxtb.w	fp, fp
    9840:	78e3      	ldrb	r3, [r4, #3]
    9842:	455b      	cmp	r3, fp
    9844:	d2a8      	bcs.n	9798 <FatFile::getName8(char*, unsigned int)+0x48>
    9846:	e000      	b.n	984a <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
    9848:	464d      	mov	r5, r9
  *str = '\0';
    984a:	2300      	movs	r3, #0
    984c:	702b      	strb	r3, [r5, #0]
  return str - name;
    984e:	eba5 0009 	sub.w	r0, r5, r9
    9852:	e7ec      	b.n	982e <FatFile::getName8(char*, unsigned int)+0xde>
    9854:	000ffc00 	.word	0x000ffc00

00009858 <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
    9858:	b508      	push	{r3, lr}
  return getName8(name, size);
    985a:	f7ff ff79 	bl	9750 <FatFile::getName8(char*, unsigned int)>
}
    985e:	bd08      	pop	{r3, pc}

00009860 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    9860:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    9862:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    9864:	46a4      	mov	ip, r4
    9866:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    986a:	bf28      	it	cs
    986c:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9870:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9874:	4281      	cmp	r1, r0
    9876:	d307      	bcc.n	9888 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    9878:	eba4 040c 	sub.w	r4, r4, ip
    987c:	6014      	str	r4, [r2, #0]
}
    987e:	f85d 4b04 	ldr.w	r4, [sp], #4
    9882:	4770      	bx	lr
  while (p < e) {
    9884:	4288      	cmp	r0, r1
    9886:	d9f7      	bls.n	9878 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
    9888:	f831 3b02 	ldrh.w	r3, [r1], #2
    988c:	2b00      	cmp	r3, #0
    988e:	d1f9      	bne.n	9884 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9890:	6853      	ldr	r3, [r2, #4]
    9892:	3301      	adds	r3, #1
    9894:	6053      	str	r3, [r2, #4]
    9896:	e7f5      	b.n	9884 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

00009898 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9898:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    989a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    989c:	46a4      	mov	ip, r4
    989e:	2c80      	cmp	r4, #128	; 0x80
    98a0:	bf28      	it	cs
    98a2:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    98a6:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    98aa:	4281      	cmp	r1, r0
    98ac:	d307      	bcc.n	98be <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    98ae:	eba4 040c 	sub.w	r4, r4, ip
    98b2:	6014      	str	r4, [r2, #0]
}
    98b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    98b8:	4770      	bx	lr
  while (p < e) {
    98ba:	4288      	cmp	r0, r1
    98bc:	d9f7      	bls.n	98ae <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
    98be:	f851 3b04 	ldr.w	r3, [r1], #4
    98c2:	2b00      	cmp	r3, #0
    98c4:	d1f9      	bne.n	98ba <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    98c6:	6853      	ldr	r3, [r2, #4]
    98c8:	3301      	adds	r3, #1
    98ca:	6053      	str	r3, [r2, #4]
    98cc:	e7f5      	b.n	98ba <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

000098ce <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    98ce:	2901      	cmp	r1, #1
    98d0:	d974      	bls.n	99bc <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    98d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    98d6:	4606      	mov	r6, r0
    98d8:	460c      	mov	r4, r1
    98da:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    98dc:	69c3      	ldr	r3, [r0, #28]
    98de:	428b      	cmp	r3, r1
    98e0:	d36f      	bcc.n	99c2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
    98e2:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    98e4:	2b20      	cmp	r3, #32
    98e6:	d02d      	beq.n	9944 <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
    98e8:	2b10      	cmp	r3, #16
    98ea:	d044      	beq.n	9976 <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    98ec:	2b0c      	cmp	r3, #12
    98ee:	d172      	bne.n	99d6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
    98f0:	f3c1 034e 	ubfx	r3, r1, #1, #15
    98f4:	fa13 f381 	uxtah	r3, r3, r1
    98f8:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    98fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
    98fe:	6982      	ldr	r2, [r0, #24]
    9900:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
    9904:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9908:	7a02      	ldrb	r2, [r0, #8]
    990a:	2a02      	cmp	r2, #2
    990c:	bf14      	ite	ne
    990e:	2200      	movne	r2, #0
    9910:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    9912:	0052      	lsls	r2, r2, #1
    9914:	4641      	mov	r1, r8
    9916:	4648      	mov	r0, r9
    9918:	f002 f9ff 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    991c:	4602      	mov	r2, r0
    991e:	2800      	cmp	r0, #0
    9920:	d05c      	beq.n	99dc <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
    9922:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
    9926:	5cc7      	ldrb	r7, [r0, r3]
    index++;
    9928:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    992a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    992e:	d036      	beq.n	999e <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
    9930:	5cd3      	ldrb	r3, [r2, r3]
    9932:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    9936:	f014 0f01 	tst.w	r4, #1
    993a:	bf14      	ite	ne
    993c:	091b      	lsrne	r3, r3, #4
    993e:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
    9942:	e012      	b.n	996a <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9944:	7a02      	ldrb	r2, [r0, #8]
    9946:	2a02      	cmp	r2, #2
    9948:	bf14      	ite	ne
    994a:	2200      	movne	r2, #0
    994c:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    994e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9950:	0052      	lsls	r2, r2, #1
    9952:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9956:	f500 700e 	add.w	r0, r0, #568	; 0x238
    995a:	f002 f9de 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    995e:	2800      	cmp	r0, #0
    9960:	d033      	beq.n	99ca <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9962:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    9964:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    9968:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    996a:	69f2      	ldr	r2, [r6, #28]
    996c:	4293      	cmp	r3, r2
    996e:	d83b      	bhi.n	99e8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
    9970:	602b      	str	r3, [r5, #0]
  return 1;
    9972:	2001      	movs	r0, #1
    9974:	e027      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9976:	7a02      	ldrb	r2, [r0, #8]
    9978:	2a02      	cmp	r2, #2
    997a:	bf14      	ite	ne
    997c:	2200      	movne	r2, #0
    997e:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9980:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9984:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9986:	0052      	lsls	r2, r2, #1
    9988:	4419      	add	r1, r3
    998a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    998e:	f002 f9c4 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9992:	b1e8      	cbz	r0, 99d0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9994:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    9996:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    999a:	5b03      	ldrh	r3, [r0, r4]
    999c:	e7e5      	b.n	996a <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    999e:	7a32      	ldrb	r2, [r6, #8]
    99a0:	2a02      	cmp	r2, #2
    99a2:	bf14      	ite	ne
    99a4:	2200      	movne	r2, #0
    99a6:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
    99a8:	0052      	lsls	r2, r2, #1
    99aa:	f108 0101 	add.w	r1, r8, #1
    99ae:	4648      	mov	r0, r9
    99b0:	f002 f9b3 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    99b4:	4602      	mov	r2, r0
    99b6:	b1a0      	cbz	r0, 99e2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
    99b8:	2300      	movs	r3, #0
    99ba:	e7b9      	b.n	9930 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
    99bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    99c0:	4770      	bx	lr
  return -1;
    99c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    99c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
    99ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99ce:	e7fa      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99d4:	e7f7      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99da:	e7f4      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99e0:	e7f1      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    99e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    99e6:	e7ee      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
    99e8:	2000      	movs	r0, #0
    99ea:	e7ec      	b.n	99c6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

000099ec <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    99ec:	2901      	cmp	r1, #1
    99ee:	d972      	bls.n	9ad6 <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    99f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    99f4:	4606      	mov	r6, r0
    99f6:	460c      	mov	r4, r1
    99f8:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    99fa:	69c3      	ldr	r3, [r0, #28]
    99fc:	428b      	cmp	r3, r1
    99fe:	d36c      	bcc.n	9ada <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
    9a00:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    9a02:	2b20      	cmp	r3, #32
    9a04:	d02d      	beq.n	9a62 <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
    9a06:	2b10      	cmp	r3, #16
    9a08:	d03e      	beq.n	9a88 <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
    9a0a:	2b0c      	cmp	r3, #12
    9a0c:	d16c      	bne.n	9ae8 <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
    9a0e:	f3c1 034e 	ubfx	r3, r1, #1, #15
    9a12:	fa13 f381 	uxtah	r3, r3, r1
    9a16:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9a18:	f3c3 2346 	ubfx	r3, r3, #9, #7
    9a1c:	6982      	ldr	r2, [r0, #24]
    9a1e:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9a22:	7a03      	ldrb	r3, [r0, #8]
    9a24:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9a26:	f500 790e 	add.w	r9, r0, #568	; 0x238
    9a2a:	bf14      	ite	ne
    9a2c:	2201      	movne	r2, #1
    9a2e:	2203      	moveq	r2, #3
    9a30:	4641      	mov	r1, r8
    9a32:	4648      	mov	r0, r9
    9a34:	f002 f971 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9a38:	4601      	mov	r1, r0
    9a3a:	2800      	cmp	r0, #0
    9a3c:	d056      	beq.n	9aec <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
    9a3e:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
    9a42:	f014 0401 	ands.w	r4, r4, #1
    9a46:	d055      	beq.n	9af4 <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
    9a48:	5cc2      	ldrb	r2, [r0, r3]
    9a4a:	f002 020f 	and.w	r2, r2, #15
    9a4e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
    9a52:	54c2      	strb	r2, [r0, r3]
    index++;
    9a54:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9a5a:	d029      	beq.n	9ab0 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    9a5c:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9a60:	e054      	b.n	9b0c <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9a62:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9a64:	7a03      	ldrb	r3, [r0, #8]
    9a66:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9a68:	bf14      	ite	ne
    9a6a:	2201      	movne	r2, #1
    9a6c:	2203      	moveq	r2, #3
    9a6e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9a72:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9a76:	f002 f950 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9a7a:	b388      	cbz	r0, 9ae0 <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9a7c:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    9a7e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9a82:	5105      	str	r5, [r0, r4]
    return true;
    9a84:	2001      	movs	r0, #1
    9a86:	e029      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9a88:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9a8c:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9a8e:	7a02      	ldrb	r2, [r0, #8]
    9a90:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    9a92:	bf14      	ite	ne
    9a94:	2201      	movne	r2, #1
    9a96:	2203      	moveq	r2, #3
    9a98:	4419      	add	r1, r3
    9a9a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    9a9e:	f002 f93c 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9aa2:	b1f8      	cbz	r0, 9ae4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9aa4:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    9aa6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    9aaa:	5305      	strh	r5, [r0, r4]
    return true;
    9aac:	2001      	movs	r0, #1
    9aae:	e015      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9ab0:	7a33      	ldrb	r3, [r6, #8]
    9ab2:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9ab4:	bf14      	ite	ne
    9ab6:	2201      	movne	r2, #1
    9ab8:	2203      	moveq	r2, #3
    9aba:	f108 0101 	add.w	r1, r8, #1
    9abe:	4648      	mov	r0, r9
    9ac0:	f002 f92b 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9ac4:	4601      	mov	r1, r0
    9ac6:	b198      	cbz	r0, 9af0 <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
    9ac8:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
    9acc:	b90c      	cbnz	r4, 9ad2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
    9ace:	2300      	movs	r3, #0
    9ad0:	e017      	b.n	9b02 <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
    9ad2:	2300      	movs	r3, #0
    9ad4:	e01a      	b.n	9b0c <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
    9ad6:	2000      	movs	r0, #0
}
    9ad8:	4770      	bx	lr
  return false;
    9ada:	2000      	movs	r0, #0
}
    9adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9ae0:	2000      	movs	r0, #0
    9ae2:	e7fb      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9ae4:	2000      	movs	r0, #0
    9ae6:	e7f9      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9ae8:	2000      	movs	r0, #0
    9aea:	e7f7      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9aec:	2000      	movs	r0, #0
    9aee:	e7f5      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    9af0:	2000      	movs	r0, #0
    9af2:	e7f3      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
    9af4:	54c5      	strb	r5, [r0, r3]
    index++;
    9af6:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    9af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9afc:	d0d8      	beq.n	9ab0 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
    9afe:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9b02:	5cc8      	ldrb	r0, [r1, r3]
    9b04:	f020 000f 	bic.w	r0, r0, #15
    9b08:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
    9b0c:	54ca      	strb	r2, [r1, r3]
    return true;
    9b0e:	2001      	movs	r0, #1
    9b10:	e7e4      	b.n	9adc <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

00009b12 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9b16:	b083      	sub	sp, #12
    9b18:	4605      	mov	r5, r0
    9b1a:	460e      	mov	r6, r1
    9b1c:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    9b1e:	68c4      	ldr	r4, [r0, #12]
    9b20:	428c      	cmp	r4, r1
    9b22:	d30c      	bcc.n	9b3e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
    9b24:	2701      	movs	r7, #1
      setStart = true;
    9b26:	f04f 0901 	mov.w	r9, #1
    find++;
    9b2a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    9b2c:	69eb      	ldr	r3, [r5, #28]
    9b2e:	42a3      	cmp	r3, r4
    9b30:	d20b      	bcs.n	9b4a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
    9b32:	b13f      	cbz	r7, 9b44 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
    9b34:	2700      	movs	r7, #0
}
    9b36:	4638      	mov	r0, r7
    9b38:	b003      	add	sp, #12
    9b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
    9b3e:	460c      	mov	r4, r1
    setStart = false;
    9b40:	2700      	movs	r7, #0
    9b42:	e7f0      	b.n	9b26 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
    9b44:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    9b46:	464f      	mov	r7, r9
    9b48:	e7ef      	b.n	9b2a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
    9b4a:	42a6      	cmp	r6, r4
    9b4c:	d0f2      	beq.n	9b34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
    9b4e:	aa01      	add	r2, sp, #4
    9b50:	4621      	mov	r1, r4
    9b52:	4628      	mov	r0, r5
    9b54:	f7ff febb 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9b58:	2800      	cmp	r0, #0
    9b5a:	dbeb      	blt.n	9b34 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
    9b5c:	2800      	cmp	r0, #0
    9b5e:	d0e4      	beq.n	9b2a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    9b60:	9b01      	ldr	r3, [sp, #4]
    9b62:	2b00      	cmp	r3, #0
    9b64:	d1e1      	bne.n	9b2a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    9b66:	b107      	cbz	r7, 9b6a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
    9b68:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
    9b6a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    9b6e:	4621      	mov	r1, r4
    9b70:	4628      	mov	r0, r5
    9b72:	f7ff ff3b 	bl	99ec <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    9b76:	4607      	mov	r7, r0
    9b78:	2800      	cmp	r0, #0
    9b7a:	d0dc      	beq.n	9b36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
    9b7c:	b93e      	cbnz	r6, 9b8e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
    9b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9b80:	2b00      	cmp	r3, #0
    9b82:	db01      	blt.n	9b88 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
    9b84:	3b01      	subs	r3, #1
    9b86:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9b88:	f8c8 4000 	str.w	r4, [r8]
  return true;
    9b8c:	e7d3      	b.n	9b36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
    9b8e:	4622      	mov	r2, r4
    9b90:	4631      	mov	r1, r6
    9b92:	4628      	mov	r0, r5
    9b94:	f7ff ff2a 	bl	99ec <FatPartition::fatPut(unsigned long, unsigned long)>
    9b98:	2800      	cmp	r0, #0
    9b9a:	d1f0      	bne.n	9b7e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
    9b9c:	4607      	mov	r7, r0
    9b9e:	e7ca      	b.n	9b36 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00009ba0 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ba2:	b083      	sub	sp, #12
    9ba4:	4605      	mov	r5, r0
    9ba6:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
    9ba8:	2700      	movs	r7, #0
    9baa:	e001      	b.n	9bb0 <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
    9bac:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
    9bae:	b1ce      	cbz	r6, 9be4 <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
    9bb0:	aa01      	add	r2, sp, #4
    9bb2:	4621      	mov	r1, r4
    9bb4:	4628      	mov	r0, r5
    9bb6:	f7ff fe8a 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    9bba:	1e06      	subs	r6, r0, #0
    9bbc:	db11      	blt.n	9be2 <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
    9bbe:	463a      	mov	r2, r7
    9bc0:	4621      	mov	r1, r4
    9bc2:	4628      	mov	r0, r5
    9bc4:	f7ff ff12 	bl	99ec <FatPartition::fatPut(unsigned long, unsigned long)>
    9bc8:	4602      	mov	r2, r0
    9bca:	b158      	cbz	r0, 9be4 <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
    9bcc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9bce:	2b00      	cmp	r3, #0
    9bd0:	db01      	blt.n	9bd6 <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
    9bd2:	3301      	adds	r3, #1
    9bd4:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    9bd6:	68eb      	ldr	r3, [r5, #12]
    9bd8:	42a3      	cmp	r3, r4
    9bda:	d9e7      	bls.n	9bac <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
    9bdc:	3c01      	subs	r4, #1
    9bde:	60ec      	str	r4, [r5, #12]
    9be0:	e7e4      	b.n	9bac <FatPartition::freeChain(unsigned long)+0xc>
  return false;
    9be2:	2200      	movs	r2, #0
}
    9be4:	4610      	mov	r0, r2
    9be6:	b003      	add	sp, #12
    9be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00009bec <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    9bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bee:	b087      	sub	sp, #28
    9bf0:	4604      	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    9bf2:	6a40      	ldr	r0, [r0, #36]	; 0x24
    9bf4:	2800      	cmp	r0, #0
    9bf6:	da45      	bge.n	9c84 <FatPartition::freeClusterCount()+0x98>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    9bf8:	79e3      	ldrb	r3, [r4, #7]
    9bfa:	2b0c      	cmp	r3, #12
    9bfc:	d11e      	bne.n	9c3c <FatPartition::freeClusterCount()+0x50>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    9bfe:	69e7      	ldr	r7, [r4, #28]
    9c00:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    9c02:	2b02      	cmp	r3, #2
    9c04:	d917      	bls.n	9c36 <FatPartition::freeClusterCount()+0x4a>
    9c06:	2502      	movs	r5, #2
    uint32_t free = 0;
    9c08:	2600      	movs	r6, #0
    9c0a:	e006      	b.n	9c1a <FatPartition::freeClusterCount()+0x2e>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
        DBG_FAIL_MACRO;
        return -1;
    9c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c10:	e038      	b.n	9c84 <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
    9c12:	1c6b      	adds	r3, r5, #1
    9c14:	42af      	cmp	r7, r5
    9c16:	d00f      	beq.n	9c38 <FatPartition::freeClusterCount()+0x4c>
    9c18:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
    9c1a:	aa03      	add	r2, sp, #12
    9c1c:	4629      	mov	r1, r5
    9c1e:	4620      	mov	r0, r4
    9c20:	f7ff fe55 	bl	98ce <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    9c24:	2800      	cmp	r0, #0
    9c26:	dbf1      	blt.n	9c0c <FatPartition::freeClusterCount()+0x20>
      }
      if (fg && c == 0) {
    9c28:	2800      	cmp	r0, #0
    9c2a:	d0f2      	beq.n	9c12 <FatPartition::freeClusterCount()+0x26>
    9c2c:	9b03      	ldr	r3, [sp, #12]
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d1ef      	bne.n	9c12 <FatPartition::freeClusterCount()+0x26>
        free++;
    9c32:	3601      	adds	r6, #1
    9c34:	e7ed      	b.n	9c12 <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
    9c36:	2600      	movs	r6, #0
      }
    }
    return free;
    9c38:	4630      	mov	r0, r6
    9c3a:	e023      	b.n	9c84 <FatPartition::freeClusterCount()+0x98>
  }

  struct FreeClusterCountStruct state;

  state.free_count = 0;
    9c3c:	2300      	movs	r3, #0
    9c3e:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
    9c40:	69e3      	ldr	r3, [r4, #28]
    9c42:	3301      	adds	r3, #1
    9c44:	9304      	str	r3, [sp, #16]
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    9c46:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
    9c48:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    9c4c:	f013 0f01 	tst.w	r3, #1
    9c50:	d11a      	bne.n	9c88 <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
    9c52:	2300      	movs	r3, #0
    9c54:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c5c:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
    9c60:	f504 7212 	add.w	r2, r4, #584	; 0x248
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    9c64:	79e3      	ldrb	r3, [r4, #7]
    9c66:	2b20      	cmp	r3, #32
    9c68:	d017      	beq.n	9c9a <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9c6a:	6820      	ldr	r0, [r4, #0]
    9c6c:	6803      	ldr	r3, [r0, #0]
    9c6e:	a904      	add	r1, sp, #16
    9c70:	9101      	str	r1, [sp, #4]
    9c72:	4913      	ldr	r1, [pc, #76]	; (9cc0 <FatPartition::freeClusterCount()+0xd4>)
    9c74:	9100      	str	r1, [sp, #0]
    9c76:	699e      	ldr	r6, [r3, #24]
    9c78:	462b      	mov	r3, r5
    9c7a:	69a1      	ldr	r1, [r4, #24]
    9c7c:	47b0      	blx	r6
    9c7e:	b1d8      	cbz	r0, 9cb8 <FatPartition::freeClusterCount()+0xcc>
  }

  setFreeClusterCount(state.free_count);
    9c80:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    9c82:	6260      	str	r0, [r4, #36]	; 0x24
  return state.free_count;
}
    9c84:	b007      	add	sp, #28
    9c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
    9c88:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9c8c:	f002 f81e 	bl	bccc <FsCache::sync()>
    9c90:	2800      	cmp	r0, #0
    9c92:	d1de      	bne.n	9c52 <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
    9c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9c98:	e7f4      	b.n	9c84 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9c9a:	6820      	ldr	r0, [r4, #0]
    9c9c:	6803      	ldr	r3, [r0, #0]
    9c9e:	a904      	add	r1, sp, #16
    9ca0:	9101      	str	r1, [sp, #4]
    9ca2:	4908      	ldr	r1, [pc, #32]	; (9cc4 <FatPartition::freeClusterCount()+0xd8>)
    9ca4:	9100      	str	r1, [sp, #0]
    9ca6:	699e      	ldr	r6, [r3, #24]
    9ca8:	462b      	mov	r3, r5
    9caa:	69a1      	ldr	r1, [r4, #24]
    9cac:	47b0      	blx	r6
    9cae:	2800      	cmp	r0, #0
    9cb0:	d1e6      	bne.n	9c80 <FatPartition::freeClusterCount()+0x94>
    9cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cb6:	e7e5      	b.n	9c84 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cbc:	e7e2      	b.n	9c84 <FatPartition::freeClusterCount()+0x98>
    9cbe:	bf00      	nop
    9cc0:	00009861 	.word	0x00009861
    9cc4:	00009899 	.word	0x00009899

00009cc8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9cc8:	b570      	push	{r4, r5, r6, lr}
    9cca:	4604      	mov	r4, r0
//  Serial.printf(" FatPartition::init(%x %u)\n", (uint32_t)dev, part);
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    9ccc:	6001      	str	r1, [r0, #0]
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    9cce:	2300      	movs	r3, #0
    9cd0:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    9cd2:	2001      	movs	r0, #1
    9cd4:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
    9cd6:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
    9cda:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
    9cdc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9ce4:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    9ce6:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    9cea:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9cee:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9cf2:	b1e2      	cbz	r2, 9d2e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
    9cf4:	4616      	mov	r6, r2
    if (part > 4) {
    9cf6:	2a04      	cmp	r2, #4
    9cf8:	d901      	bls.n	9cfe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    9cfa:	2000      	movs	r0, #0
}
    9cfc:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    9cfe:	461a      	mov	r2, r3
    9d00:	4619      	mov	r1, r3
    9d02:	4628      	mov	r0, r5
    9d04:	f002 f809 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    9d08:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    9d0c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9d10:	4433      	add	r3, r6
    9d12:	011e      	lsls	r6, r3, #4
    9d14:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    9d18:	2800      	cmp	r0, #0
    9d1a:	d06a      	beq.n	9df2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
    9d1c:	7919      	ldrb	r1, [r3, #4]
    9d1e:	2900      	cmp	r1, #0
    9d20:	d069      	beq.n	9df6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
    9d22:	5d92      	ldrb	r2, [r2, r6]
    9d24:	f012 0f7f 	tst.w	r2, #127	; 0x7f
    9d28:	d167      	bne.n	9dfa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
    9d2a:	689e      	ldr	r6, [r3, #8]
    9d2c:	e000      	b.n	9d30 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
    9d2e:	2600      	movs	r6, #0
    9d30:	2200      	movs	r2, #0
    9d32:	4631      	mov	r1, r6
    9d34:	4628      	mov	r0, r5
    9d36:	f001 fff0 	bl	bd1a <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    9d3a:	4601      	mov	r1, r0
    9d3c:	2800      	cmp	r0, #0
    9d3e:	d05e      	beq.n	9dfe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
    9d40:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    9d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9d48:	d15b      	bne.n	9e02 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
    9d4a:	7c03      	ldrb	r3, [r0, #16]
    9d4c:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    9d4e:	3b01      	subs	r3, #1
    9d50:	b2db      	uxtb	r3, r3
    9d52:	2b01      	cmp	r3, #1
    9d54:	d857      	bhi.n	9e06 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9d56:	7b40      	ldrb	r0, [r0, #13]
    9d58:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9d5a:	1e43      	subs	r3, r0, #1
    9d5c:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    9d5e:	2300      	movs	r3, #0
    9d60:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9d62:	2801      	cmp	r0, #1
    9d64:	d00d      	beq.n	9d82 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
    9d66:	2200      	movs	r2, #0
    9d68:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
    9d6a:	3201      	adds	r2, #1
    9d6c:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9d6e:	005b      	lsls	r3, r3, #1
    9d70:	b2db      	uxtb	r3, r3
    9d72:	4298      	cmp	r0, r3
    9d74:	d004      	beq.n	9d80 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
    9d76:	2b00      	cmp	r3, #0
    9d78:	d1f7      	bne.n	9d6a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    9d7a:	71a2      	strb	r2, [r4, #6]
  return false;
    9d7c:	2000      	movs	r0, #0
    9d7e:	e7bd      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9d80:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9d82:	8acb      	ldrh	r3, [r1, #22]
    9d84:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9d86:	b90b      	cbnz	r3, 9d8c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
    9d88:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9d8a:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9d8c:	89cb      	ldrh	r3, [r1, #14]
    9d8e:	4433      	add	r3, r6
    9d90:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
    9d92:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9d96:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9d98:	6920      	ldr	r0, [r4, #16]
    9d9a:	7c0d      	ldrb	r5, [r1, #16]
    9d9c:	fb00 3305 	mla	r3, r0, r5, r3
    9da0:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9da2:	0152      	lsls	r2, r2, #5
    9da4:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
    9da8:	eb03 2352 	add.w	r3, r3, r2, lsr #9
    9dac:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
    9dae:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
    9db2:	b902      	cbnz	r2, 9db6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
    9db4:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9db6:	1af3      	subs	r3, r6, r3
    9db8:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9dba:	79a2      	ldrb	r2, [r4, #6]
    9dbc:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
    9dbe:	1c5a      	adds	r2, r3, #1
    9dc0:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9dc6:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9dc8:	f640 72f4 	movw	r2, #4084	; 0xff4
    9dcc:	4293      	cmp	r3, r2
    9dce:	d907      	bls.n	9de0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9dd0:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    9dd4:	4293      	cmp	r3, r2
    9dd6:	d90a      	bls.n	9dee <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
    9dd8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9dda:	6223      	str	r3, [r4, #32]
    9ddc:	2320      	movs	r3, #32
    9dde:	e000      	b.n	9de2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
    9de0:	230c      	movs	r3, #12
    m_fatType = 12;
    9de2:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9de4:	6320      	str	r0, [r4, #48]	; 0x30
    9de6:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
    9dea:	2001      	movs	r0, #1
    9dec:	e786      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9dee:	2310      	movs	r3, #16
    9df0:	e7f7      	b.n	9de2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
    9df2:	2000      	movs	r0, #0
    9df4:	e782      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9df6:	2000      	movs	r0, #0
    9df8:	e780      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9dfa:	2000      	movs	r0, #0
    9dfc:	e77e      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9dfe:	2000      	movs	r0, #0
    9e00:	e77c      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e02:	2000      	movs	r0, #0
    9e04:	e77a      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    9e06:	2000      	movs	r0, #0
    9e08:	e778      	b.n	9cfc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

00009e0a <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
    9e0a:	b538      	push	{r3, r4, r5, lr}
    9e0c:	4604      	mov	r4, r0
    9e0e:	460d      	mov	r5, r1
    9e10:	2300      	movs	r3, #0
    9e12:	6383      	str	r3, [r0, #56]	; 0x38
    9e14:	63c3      	str	r3, [r0, #60]	; 0x3c
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
    9e16:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    9e18:	b1ab      	cbz	r3, 9e46 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
    9e1a:	4601      	mov	r1, r0
    9e1c:	2024      	movs	r0, #36	; 0x24
    9e1e:	f000 f8b3 	bl	9f88 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    9e22:	2300      	movs	r3, #0
    9e24:	7003      	strb	r3, [r0, #0]
    9e26:	7043      	strb	r3, [r0, #1]
    9e28:	7083      	strb	r3, [r0, #2]
    9e2a:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9e2c:	4684      	mov	ip, r0
    9e2e:	6bad      	ldr	r5, [r5, #56]	; 0x38
    9e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9e32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9e38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9e3c:	682b      	ldr	r3, [r5, #0]
    9e3e:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
    9e42:	4620      	mov	r0, r4
    9e44:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
    9e46:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    9e48:	2b00      	cmp	r3, #0
    9e4a:	d0fa      	beq.n	9e42 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
    9e4c:	4601      	mov	r1, r0
    9e4e:	2038      	movs	r0, #56	; 0x38
    9e50:	f000 f89a 	bl	9f88 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    9e54:	2300      	movs	r3, #0
    9e56:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    9e5a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
    9e5e:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    9e62:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    9e64:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9e66:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    9e6a:	f8d3 c000 	ldr.w	ip, [r3]
    9e6e:	685d      	ldr	r5, [r3, #4]
    9e70:	6899      	ldr	r1, [r3, #8]
    9e72:	68da      	ldr	r2, [r3, #12]
    9e74:	f8c0 c000 	str.w	ip, [r0]
    9e78:	6045      	str	r5, [r0, #4]
    9e7a:	6081      	str	r1, [r0, #8]
    9e7c:	60c2      	str	r2, [r0, #12]
    9e7e:	3310      	adds	r3, #16
    9e80:	3010      	adds	r0, #16
    9e82:	4573      	cmp	r3, lr
    9e84:	d1f1      	bne.n	9e6a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
    9e86:	681b      	ldr	r3, [r3, #0]
    9e88:	6003      	str	r3, [r0, #0]
    9e8a:	e7da      	b.n	9e42 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

00009e8c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    9e8c:	b510      	push	{r4, lr}
    9e8e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9e90:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9e92:	b110      	cbz	r0, 9e9a <FsBaseFile::close()+0xe>
    9e94:	f7fe f844 	bl	7f20 <FatFile::close()>
    9e98:	b938      	cbnz	r0, 9eaa <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9e9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9e9c:	b140      	cbz	r0, 9eb0 <FsBaseFile::close()+0x24>
    9e9e:	f7fb fcbf 	bl	5820 <ExFatFile::close()>
    9ea2:	b130      	cbz	r0, 9eb2 <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
    9ea4:	2300      	movs	r3, #0
    9ea6:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9ea8:	e003      	b.n	9eb2 <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
    9eaa:	2300      	movs	r3, #0
    9eac:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9eae:	e000      	b.n	9eb2 <FsBaseFile::close()+0x26>
  }
  return false;
    9eb0:	2000      	movs	r0, #0
}
    9eb2:	bd10      	pop	{r4, pc}

00009eb4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9eb4:	b3a1      	cbz	r1, 9f20 <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9eb8:	4604      	mov	r4, r0
    9eba:	4617      	mov	r7, r2
    9ebc:	461e      	mov	r6, r3
    9ebe:	460d      	mov	r5, r1
    return false;
  }
  close();
    9ec0:	f7ff ffe4 	bl	9e8c <FsBaseFile::close()>
  if (vol->m_fVol) {
    9ec4:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    9ec8:	b18b      	cbz	r3, 9eee <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
    9eca:	4621      	mov	r1, r4
    9ecc:	2024      	movs	r0, #36	; 0x24
    9ece:	f000 f85b 	bl	9f88 <operator new(unsigned int, unsigned long*)>
    9ed2:	2300      	movs	r3, #0
    9ed4:	7003      	strb	r3, [r0, #0]
    9ed6:	7043      	strb	r3, [r0, #1]
    9ed8:	7083      	strb	r3, [r0, #2]
    9eda:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9edc:	4633      	mov	r3, r6
    9ede:	463a      	mov	r2, r7
    9ee0:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9ee4:	f7fe f889 	bl	7ffa <FatFile::open(FatVolume*, char const*, int)>
    9ee8:	b900      	cbnz	r0, 9eec <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
    9eea:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
    9eee:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9ef2:	b1bb      	cbz	r3, 9f24 <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
    9ef4:	4621      	mov	r1, r4
    9ef6:	2038      	movs	r0, #56	; 0x38
    9ef8:	f000 f846 	bl	9f88 <operator new(unsigned int, unsigned long*)>
    9efc:	2200      	movs	r2, #0
    9efe:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9f02:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9f06:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9f0a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9f0c:	4633      	mov	r3, r6
    9f0e:	463a      	mov	r2, r7
    9f10:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    9f14:	f7fc f8cd 	bl	60b2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9f18:	2800      	cmp	r0, #0
    9f1a:	d1e7      	bne.n	9eec <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
    9f1c:	63e0      	str	r0, [r4, #60]	; 0x3c
    9f1e:	e7e5      	b.n	9eec <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
    9f20:	2000      	movs	r0, #0
}
    9f22:	4770      	bx	lr
  return false;
    9f24:	2000      	movs	r0, #0
    9f26:	e7e1      	b.n	9eec <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

00009f28 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9f28:	b570      	push	{r4, r5, r6, lr}
    9f2a:	4605      	mov	r5, r0
    9f2c:	460c      	mov	r4, r1
    9f2e:	4616      	mov	r6, r2
  close();
    9f30:	f7ff ffac 	bl	9e8c <FsBaseFile::close()>
  if (dir->m_fFile) {
    9f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9f36:	b17b      	cbz	r3, 9f58 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
    9f38:	4629      	mov	r1, r5
    9f3a:	2024      	movs	r0, #36	; 0x24
    9f3c:	f000 f824 	bl	9f88 <operator new(unsigned int, unsigned long*)>
    9f40:	2100      	movs	r1, #0
    9f42:	7001      	strb	r1, [r0, #0]
    9f44:	7041      	strb	r1, [r0, #1]
    9f46:	7081      	strb	r1, [r0, #2]
    9f48:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9f4a:	4632      	mov	r2, r6
    9f4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    9f4e:	f7fd ff33 	bl	7db8 <FatFile::openNext(FatFile*, int)>
    9f52:	b900      	cbnz	r0, 9f56 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
    9f54:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9f56:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
    9f58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9f5a:	b19b      	cbz	r3, 9f84 <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
    9f5c:	4629      	mov	r1, r5
    9f5e:	2038      	movs	r0, #56	; 0x38
    9f60:	f000 f812 	bl	9f88 <operator new(unsigned int, unsigned long*)>
    9f64:	2200      	movs	r2, #0
    9f66:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    9f6a:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    9f6e:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
    9f72:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9f74:	4632      	mov	r2, r6
    9f76:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    9f78:	f7fc f8a4 	bl	60c4 <ExFatFile::openNext(ExFatFile*, int)>
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d1ea      	bne.n	9f56 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
    9f80:	63e8      	str	r0, [r5, #60]	; 0x3c
    9f82:	e7e8      	b.n	9f56 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
    9f84:	2000      	movs	r0, #0
    9f86:	e7e6      	b.n	9f56 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

00009f88 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9f88:	4608      	mov	r0, r1
    9f8a:	4770      	bx	lr

00009f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f90:	4604      	mov	r4, r0
    9f92:	4690      	mov	r8, r2
    9f94:	461f      	mov	r7, r3
  m_blockDev = blockDev;
    9f96:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9f9a:	2600      	movs	r6, #0
    9f9c:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9fa0:	4601      	mov	r1, r0
    9fa2:	f44f 6090 	mov.w	r0, #1152	; 0x480
    9fa6:	f7ff ffef 	bl	9f88 <operator new(unsigned int, unsigned long*)>
    9faa:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    9fac:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9fb0:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9fb4:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    9fb8:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    9fbc:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9fc0:	463a      	mov	r2, r7
    9fc2:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9fc6:	f7fd fbcd 	bl	7764 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9fca:	bb00      	cbnz	r0, a00e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9fcc:	2500      	movs	r5, #0
    9fce:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9fd2:	4621      	mov	r1, r4
    9fd4:	f240 406c 	movw	r0, #1132	; 0x46c
    9fd8:	f7ff ffd6 	bl	9f88 <operator new(unsigned int, unsigned long*)>
    9fdc:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    9fde:	71c5      	strb	r5, [r0, #7]
    9fe0:	2302      	movs	r3, #2
    9fe2:	7203      	strb	r3, [r0, #8]
    9fe4:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
    9fe8:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
    9fec:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
    9ff0:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    9ff4:	463a      	mov	r2, r7
    9ff6:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9ffa:	f7ff fe65 	bl	9cc8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9ffe:	b9f8      	cbnz	r0, a040 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    a000:	2000      	movs	r0, #0
    a002:	4b1a      	ldr	r3, [pc, #104]	; (a06c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a004:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
    a006:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    a00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a00e:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    a012:	4630      	mov	r0, r6
    a014:	f7fb fc04 	bl	5820 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    a018:	4629      	mov	r1, r5
    a01a:	4630      	mov	r0, r6
    a01c:	f7fb fc2e 	bl	587c <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    a020:	2800      	cmp	r0, #0
    a022:	d0d3      	beq.n	9fcc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
    a024:	4b12      	ldr	r3, [pc, #72]	; (a070 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    a026:	681b      	ldr	r3, [r3, #0]
    a028:	b13b      	cbz	r3, a03a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
    a02a:	f1b8 0f00 	cmp.w	r8, #0
    a02e:	d119      	bne.n	a064 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
    a030:	4b0e      	ldr	r3, [pc, #56]	; (a06c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	b1b3      	cbz	r3, a064 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
    a036:	2001      	movs	r0, #1
    a038:	e7e7      	b.n	a00a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
    a03a:	4b0d      	ldr	r3, [pc, #52]	; (a070 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
    a03c:	601d      	str	r5, [r3, #0]
    a03e:	e7f4      	b.n	a02a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    a040:	f506 6589 	add.w	r5, r6, #1096	; 0x448
    a044:	4628      	mov	r0, r5
    a046:	f7fd ff6b 	bl	7f20 <FatFile::close()>
    return m_vwd.openRoot(this);
    a04a:	4631      	mov	r1, r6
    a04c:	4628      	mov	r0, r5
    a04e:	f7fd fc88 	bl	7962 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    a052:	2800      	cmp	r0, #0
    a054:	d0d4      	beq.n	a000 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
    a056:	4b07      	ldr	r3, [pc, #28]	; (a074 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    a058:	681b      	ldr	r3, [r3, #0]
    a05a:	2b00      	cmp	r3, #0
    a05c:	d1e5      	bne.n	a02a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
    a05e:	4b05      	ldr	r3, [pc, #20]	; (a074 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
    a060:	601e      	str	r6, [r3, #0]
    a062:	e7e2      	b.n	a02a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
    a064:	4b01      	ldr	r3, [pc, #4]	; (a06c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    a066:	601c      	str	r4, [r3, #0]
  return true;
    a068:	2001      	movs	r0, #1
    a06a:	e7ce      	b.n	a00a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
    a06c:	20004c98 	.word	0x20004c98
    a070:	20004c64 	.word	0x20004c64
    a074:	20004ca4 	.word	0x20004ca4

0000a078 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    a078:	b538      	push	{r3, r4, r5, lr}
    a07a:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
    a07c:	2000      	movs	r0, #0
    a07e:	6060      	str	r0, [r4, #4]
    a080:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    a084:	60a5      	str	r5, [r4, #8]
    a086:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
    a088:	64a0      	str	r0, [r4, #72]	; 0x48
    a08a:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    a08c:	4620      	mov	r0, r4
    a08e:	4d03      	ldr	r5, [pc, #12]	; (a09c <FsVolume::open(char const*, int)+0x24>)
    a090:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    a094:	f7ff ff0e 	bl	9eb4 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    a098:	4620      	mov	r0, r4
    a09a:	bd38      	pop	{r3, r4, r5, pc}
    a09c:	200024cc 	.word	0x200024cc

0000a0a0 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    a0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a0a4:	4770      	bx	lr

0000a0a6 <SharedSpiCard::errorCode() const>:
  }
    a0a6:	7c40      	ldrb	r0, [r0, #17]
    a0a8:	4770      	bx	lr

0000a0aa <SharedSpiCard::errorData() const>:
  }
    a0aa:	7d00      	ldrb	r0, [r0, #20]
    a0ac:	4770      	bx	lr

0000a0ae <SharedSpiCard::type() const>:
  }
    a0ae:	7d40      	ldrb	r0, [r0, #21]
    a0b0:	4770      	bx	lr

0000a0b2 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    a0b2:	2001      	movs	r0, #1
    a0b4:	4770      	bx	lr

0000a0b6 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    a0b6:	7f00      	ldrb	r0, [r0, #28]
    a0b8:	4770      	bx	lr

0000a0ba <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
    a0ba:	b500      	push	{lr}
    a0bc:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a0be:	6803      	ldr	r3, [r0, #0]
    a0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a0c2:	4669      	mov	r1, sp
    a0c4:	4798      	blx	r3
    a0c6:	b3b0      	cbz	r0, a136 <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a0c8:	f89d 3000 	ldrb.w	r3, [sp]
    a0cc:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a0d0:	d003      	beq.n	a0da <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a0d2:	2b40      	cmp	r3, #64	; 0x40
    a0d4:	d020      	beq.n	a118 <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    a0d6:	2000      	movs	r0, #0
    a0d8:	e02e      	b.n	a138 <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a0da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0de:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a0e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a0e6:	0080      	lsls	r0, r0, #2
    a0e8:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    a0ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a0f0:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a0f4:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a0f6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a0fa:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    a0fe:	f89d 200a 	ldrb.w	r2, [sp, #10]
    a102:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a104:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a108:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a10c:	f002 020f 	and.w	r2, r2, #15
    a110:	4413      	add	r3, r2
    a112:	3b07      	subs	r3, #7
    a114:	4098      	lsls	r0, r3
    a116:	e00f      	b.n	a138 <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a118:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a11c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a120:	f89d 0009 	ldrb.w	r0, [sp, #9]
    a124:	3001      	adds	r0, #1
    a126:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a12a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a12e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    a132:	0280      	lsls	r0, r0, #10
    a134:	e000      	b.n	a138 <SharedSpiCard::sectorCount()+0x7e>
    a136:	2000      	movs	r0, #0
}
    a138:	b005      	add	sp, #20
    a13a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a13e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a13e:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
    a140:	6803      	ldr	r3, [r0, #0]
    a142:	695c      	ldr	r4, [r3, #20]
    a144:	2301      	movs	r3, #1
    a146:	47a0      	blx	r4
}
    a148:	bd10      	pop	{r4, pc}

0000a14a <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    a14a:	b538      	push	{r3, r4, r5, lr}
    a14c:	4604      	mov	r4, r0
    a14e:	460d      	mov	r5, r1
  if (!syncDevice()) {
    a150:	6803      	ldr	r3, [r0, #0]
    a152:	6a1b      	ldr	r3, [r3, #32]
    a154:	4798      	blx	r3
    a156:	b100      	cbz	r0, a15a <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    a158:	7725      	strb	r5, [r4, #28]
  return true;
}
    a15a:	bd38      	pop	{r3, r4, r5, pc}

0000a15c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
    a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a15e:	4605      	mov	r5, r0
    a160:	460e      	mov	r6, r1
    a162:	4614      	mov	r4, r2
    a164:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a166:	7cc3      	ldrb	r3, [r0, #19]
    a168:	2b02      	cmp	r3, #2
    a16a:	d021      	beq.n	a1b0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
    a16c:	682b      	ldr	r3, [r5, #0]
    a16e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a170:	4631      	mov	r1, r6
    a172:	4628      	mov	r0, r5
    a174:	4798      	blx	r3
    a176:	4603      	mov	r3, r0
    a178:	b1c0      	cbz	r0, a1ac <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
    a17a:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    a17c:	b167      	cbz	r7, a198 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
    a17e:	2600      	movs	r6, #0
    if (!writeData(src)) {
    a180:	682a      	ldr	r2, [r5, #0]
    a182:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
    a184:	4621      	mov	r1, r4
    a186:	4628      	mov	r0, r5
    a188:	4790      	blx	r2
    a18a:	4603      	mov	r3, r0
    a18c:	b170      	cbz	r0, a1ac <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
    a18e:	3601      	adds	r6, #1
    a190:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a194:	42b7      	cmp	r7, r6
    a196:	d1f3      	bne.n	a180 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
    a198:	69ab      	ldr	r3, [r5, #24]
    a19a:	443b      	add	r3, r7
    a19c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    a19e:	7f2b      	ldrb	r3, [r5, #28]
    a1a0:	b923      	cbnz	r3, a1ac <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
    a1a2:	682b      	ldr	r3, [r5, #0]
    a1a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a1a6:	4628      	mov	r0, r5
    a1a8:	4798      	blx	r3
    a1aa:	4603      	mov	r3, r0

fail:
  return false;
}
    a1ac:	4618      	mov	r0, r3
    a1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a1b0:	6983      	ldr	r3, [r0, #24]
    a1b2:	428b      	cmp	r3, r1
    a1b4:	d1da      	bne.n	a16c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
    a1b6:	e7e1      	b.n	a17c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000a1b8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    a1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a1bc:	4605      	mov	r5, r0
    a1be:	460c      	mov	r4, r1
    a1c0:	4692      	mov	sl, r2
    a1c2:	461f      	mov	r7, r3
    a1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a1c8:	7cc3      	ldrb	r3, [r0, #19]
    a1ca:	2b02      	cmp	r3, #2
    a1cc:	d026      	beq.n	a21c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
    a1ce:	682b      	ldr	r3, [r5, #0]
    a1d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a1d2:	4621      	mov	r1, r4
    a1d4:	4628      	mov	r0, r5
    a1d6:	4798      	blx	r3
    a1d8:	4603      	mov	r3, r0
    a1da:	b1e0      	cbz	r0, a216 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
    a1dc:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    a1de:	f1ba 0f00 	cmp.w	sl, #0
    a1e2:	d00e      	beq.n	a202 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    a1e4:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
    a1e8:	4641      	mov	r1, r8
    a1ea:	4620      	mov	r0, r4
    a1ec:	47b8      	blx	r7
    a1ee:	4601      	mov	r1, r0
    if (!writeData(src)) {
    a1f0:	682b      	ldr	r3, [r5, #0]
    a1f2:	6dde      	ldr	r6, [r3, #92]	; 0x5c
    a1f4:	4628      	mov	r0, r5
    a1f6:	47b0      	blx	r6
    a1f8:	4603      	mov	r3, r0
    a1fa:	b160      	cbz	r0, a216 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
    a1fc:	3401      	adds	r4, #1
    a1fe:	45a1      	cmp	r9, r4
    a200:	d1f2      	bne.n	a1e8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
    a202:	69ab      	ldr	r3, [r5, #24]
    a204:	4453      	add	r3, sl
    a206:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    a208:	7f2b      	ldrb	r3, [r5, #28]
    a20a:	b923      	cbnz	r3, a216 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
    a20c:	682b      	ldr	r3, [r5, #0]
    a20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a210:	4628      	mov	r0, r5
    a212:	4798      	blx	r3
    a214:	4603      	mov	r3, r0

 fail:
  return false;
}
    a216:	4618      	mov	r0, r3
    a218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    a21c:	6983      	ldr	r3, [r0, #24]
    a21e:	428b      	cmp	r3, r1
    a220:	d1d5      	bne.n	a1ce <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
    a222:	e7dc      	b.n	a1de <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

0000a224 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    a224:	4770      	bx	lr

0000a226 <SharedSpiCard::end()>:
  void end() {
    a226:	b508      	push	{r3, lr}
    m_spiDriver.end();
    a228:	3004      	adds	r0, #4
    a22a:	f001 fcfd 	bl	bc28 <SdSpiArduinoDriver::end()>
  }
    a22e:	bd08      	pop	{r3, pc}

0000a230 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    a230:	b510      	push	{r4, lr}
    a232:	4604      	mov	r4, r0
    a234:	2120      	movs	r1, #32
    a236:	f003 f9b9 	bl	d5ac <operator delete(void*, unsigned int)>
    a23a:	4620      	mov	r0, r4
    a23c:	bd10      	pop	{r4, pc}

0000a23e <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    a23e:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
    a240:	7c83      	ldrb	r3, [r0, #18]
    a242:	b103      	cbz	r3, a246 <SharedSpiCard::spiStart()+0x8>
}
    a244:	bd38      	pop	{r3, r4, r5, pc}
    a246:	4604      	mov	r4, r0
    m_spiDriver.activate();
    a248:	1d05      	adds	r5, r0, #4
    a24a:	4628      	mov	r0, r5
    a24c:	f001 fc14 	bl	ba78 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    a250:	2100      	movs	r1, #0
    a252:	7c20      	ldrb	r0, [r4, #16]
    a254:	f001 fc0c 	bl	ba70 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a258:	21ff      	movs	r1, #255	; 0xff
    a25a:	4628      	mov	r0, r5
    a25c:	f001 fd05 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    a260:	2301      	movs	r3, #1
    a262:	74a3      	strb	r3, [r4, #18]
}
    a264:	e7ee      	b.n	a244 <SharedSpiCard::spiStart()+0x6>

0000a266 <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
    a266:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
    a268:	7c83      	ldrb	r3, [r0, #18]
    a26a:	b903      	cbnz	r3, a26e <SharedSpiCard::spiStop()+0x8>
}
    a26c:	bd38      	pop	{r3, r4, r5, pc}
    a26e:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
    a270:	2101      	movs	r1, #1
    a272:	7c00      	ldrb	r0, [r0, #16]
    a274:	f001 fbfc 	bl	ba70 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a278:	1d25      	adds	r5, r4, #4
    a27a:	21ff      	movs	r1, #255	; 0xff
    a27c:	4628      	mov	r0, r5
    a27e:	f001 fcf4 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a282:	4628      	mov	r0, r5
    a284:	f001 fca0 	bl	bbc8 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a288:	2300      	movs	r3, #0
    a28a:	74a3      	strb	r3, [r4, #18]
}
    a28c:	e7ee      	b.n	a26c <SharedSpiCard::spiStop()+0x6>

0000a28e <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    a28e:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
    a290:	7cc3      	ldrb	r3, [r0, #19]
    a292:	2b01      	cmp	r3, #1
    a294:	d018      	beq.n	a2c8 <SharedSpiCard::isBusy()+0x3a>
    a296:	4604      	mov	r4, r0
  if (!spiActive) {
    a298:	7c83      	ldrb	r3, [r0, #18]
    a29a:	b143      	cbz	r3, a2ae <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
    a29c:	3004      	adds	r0, #4
    a29e:	f001 fcc8 	bl	bc32 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a2a2:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a2a6:	bf18      	it	ne
    a2a8:	2501      	movne	r5, #1
}
    a2aa:	4628      	mov	r0, r5
    a2ac:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
    a2ae:	f7ff ffc6 	bl	a23e <SharedSpiCard::spiStart()>
    a2b2:	1d20      	adds	r0, r4, #4
    a2b4:	f001 fcbd 	bl	bc32 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a2b8:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a2bc:	bf18      	it	ne
    a2be:	2501      	movne	r5, #1
    spiStop();
    a2c0:	4620      	mov	r0, r4
    a2c2:	f7ff ffd0 	bl	a266 <SharedSpiCard::spiStop()>
    a2c6:	e7f0      	b.n	a2aa <SharedSpiCard::isBusy()+0x1c>
    return false;
    a2c8:	2500      	movs	r5, #0
    a2ca:	e7ee      	b.n	a2aa <SharedSpiCard::isBusy()+0x1c>

0000a2cc <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    a2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2d0:	4604      	mov	r4, r0
    a2d2:	4688      	mov	r8, r1
    a2d4:	4691      	mov	r9, r2
    a2d6:	4b17      	ldr	r3, [pc, #92]	; (a334 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
    a2d8:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
    a2da:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    a2de:	b2ad      	uxth	r5, r5
    a2e0:	1d06      	adds	r6, r0, #4
    a2e2:	461f      	mov	r7, r3
    a2e4:	4630      	mov	r0, r6
    a2e6:	f001 fca4 	bl	bc32 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    a2ea:	7520      	strb	r0, [r4, #20]
    a2ec:	28ff      	cmp	r0, #255	; 0xff
    a2ee:	d10c      	bne.n	a30a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
    a2f0:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a2f2:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    a2f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a2f8:	d0f4      	beq.n	a2e4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
    a2fa:	231d      	movs	r3, #29
    m_errorCode = code;
    a2fc:	7463      	strb	r3, [r4, #17]
  spiStop();
    a2fe:	4620      	mov	r0, r4
    a300:	f7ff ffb1 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a304:	2000      	movs	r0, #0
}
    a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
    a30a:	28fe      	cmp	r0, #254	; 0xfe
    a30c:	d001      	beq.n	a312 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
    a30e:	2318      	movs	r3, #24
    a310:	e7f4      	b.n	a2fc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
    a312:	464a      	mov	r2, r9
    a314:	4641      	mov	r1, r8
    a316:	4630      	mov	r0, r6
    a318:	f001 fc97 	bl	bc4a <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    a31c:	7520      	strb	r0, [r4, #20]
    a31e:	b108      	cbz	r0, a324 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
    a320:	2325      	movs	r3, #37	; 0x25
    a322:	e7eb      	b.n	a2fc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
    a324:	4630      	mov	r0, r6
    a326:	f001 fc84 	bl	bc32 <SdSpiArduinoDriver::receive()>
    a32a:	4630      	mov	r0, r6
    a32c:	f001 fc81 	bl	bc32 <SdSpiArduinoDriver::receive()>
  return true;
    a330:	2001      	movs	r0, #1
    a332:	e7e8      	b.n	a306 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
    a334:	20005388 	.word	0x20005388

0000a338 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
    a338:	b508      	push	{r3, lr}
  return readData(dst, 512);
    a33a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a33e:	f7ff ffc5 	bl	a2cc <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
    a342:	bd08      	pop	{r3, pc}

0000a344 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    a344:	b570      	push	{r4, r5, r6, lr}
    a346:	4b0a      	ldr	r3, [pc, #40]	; (a370 <SharedSpiCard::waitReady(unsigned short)+0x2c>)
    a348:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
    a34a:	440c      	add	r4, r1
    a34c:	b2a4      	uxth	r4, r4
    a34e:	1d05      	adds	r5, r0, #4
    a350:	461e      	mov	r6, r3
    a352:	4628      	mov	r0, r5
    a354:	f001 fc6d 	bl	bc32 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a358:	28ff      	cmp	r0, #255	; 0xff
    a35a:	d006      	beq.n	a36a <SharedSpiCard::waitReady(unsigned short)+0x26>
    a35c:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a35e:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a360:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a364:	d0f5      	beq.n	a352 <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
    a366:	2000      	movs	r0, #0
    a368:	e000      	b.n	a36c <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
    a36a:	2001      	movs	r0, #1
}
    a36c:	bd70      	pop	{r4, r5, r6, pc}
    a36e:	bf00      	nop
    a370:	20005388 	.word	0x20005388

0000a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a378:	b082      	sub	sp, #8
    a37a:	4605      	mov	r5, r0
    a37c:	460f      	mov	r7, r1
    a37e:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
    a380:	6803      	ldr	r3, [r0, #0]
    a382:	6a1b      	ldr	r3, [r3, #32]
    a384:	4798      	blx	r3
    a386:	2800      	cmp	r0, #0
    a388:	d03b      	beq.n	a402 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
    a38a:	7cab      	ldrb	r3, [r5, #18]
    a38c:	b3ab      	cbz	r3, a3fa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
    a38e:	2f0c      	cmp	r7, #12
    a390:	d00a      	beq.n	a3a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    a392:	f44f 7196 	mov.w	r1, #300	; 0x12c
    a396:	4628      	mov	r0, r5
    a398:	f7ff ffd4 	bl	a344 <SharedSpiCard::waitReady(unsigned short)>
    a39c:	b127      	cbz	r7, a3a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    a39e:	f080 0001 	eor.w	r0, r0, #1
    a3a2:	f010 0fff 	tst.w	r0, #255	; 0xff
    a3a6:	d12e      	bne.n	a406 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
    a3a8:	1d2e      	adds	r6, r5, #4
    a3aa:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    a3ae:	4630      	mov	r0, r6
    a3b0:	f001 fc5b 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    a3b4:	f10d 0804 	add.w	r8, sp, #4
    a3b8:	ac02      	add	r4, sp, #8
    a3ba:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a3be:	4630      	mov	r0, r6
    a3c0:	f001 fc53 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    a3c4:	4544      	cmp	r4, r8
    a3c6:	d1f8      	bne.n	a3ba <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    a3c8:	2f00      	cmp	r7, #0
    a3ca:	bf0c      	ite	eq
    a3cc:	2195      	moveq	r1, #149	; 0x95
    a3ce:	2187      	movne	r1, #135	; 0x87
    a3d0:	4630      	mov	r0, r6
    a3d2:	f001 fc4a 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a3d6:	4630      	mov	r0, r6
    a3d8:	f001 fc2b 	bl	bc32 <SdSpiArduinoDriver::receive()>
    a3dc:	240a      	movs	r4, #10
    a3de:	4630      	mov	r0, r6
    a3e0:	f001 fc27 	bl	bc32 <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
    a3e4:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
    a3e6:	f010 0f80 	tst.w	r0, #128	; 0x80
    a3ea:	d003      	beq.n	a3f4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
    a3ec:	3c01      	subs	r4, #1
    a3ee:	b2a4      	uxth	r4, r4
    a3f0:	2c00      	cmp	r4, #0
    a3f2:	d1f4      	bne.n	a3de <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
    a3f4:	b002      	add	sp, #8
    a3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
    a3fa:	4628      	mov	r0, r5
    a3fc:	f7ff ff1f 	bl	a23e <SharedSpiCard::spiStart()>
    a400:	e7c5      	b.n	a38e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
    a402:	20ff      	movs	r0, #255	; 0xff
    a404:	e7f6      	b.n	a3f4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
    a406:	20ff      	movs	r0, #255	; 0xff
    a408:	e7f4      	b.n	a3f4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

0000a40c <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
    a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a410:	b089      	sub	sp, #36	; 0x24
    a412:	4605      	mov	r5, r0
    a414:	ac01      	add	r4, sp, #4
    a416:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    a41a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a41e:	4617      	mov	r7, r2
  m_spiActive = false;
    a420:	f04f 0800 	mov.w	r8, #0
    a424:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
    a428:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
    a42c:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
    a430:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
    a432:	f001 fb18 	bl	ba66 <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
    a436:	2101      	movs	r1, #1
    a438:	7c28      	ldrb	r0, [r5, #16]
    a43a:	f001 fb19 	bl	ba70 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
    a43e:	4b55      	ldr	r3, [pc, #340]	; (a594 <SharedSpiCard::begin(SdSpiConfig)+0x188>)
    a440:	60ab      	str	r3, [r5, #8]
    a442:	2307      	movs	r3, #7
    a444:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
    a446:	ab05      	add	r3, sp, #20
    a448:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    a44c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
    a450:	1d2e      	adds	r6, r5, #4
    a452:	cb0e      	ldmia	r3, {r1, r2, r3}
    a454:	4630      	mov	r0, r6
    a456:	f001 fba3 	bl	bba0 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
    a45a:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
    a45e:	4628      	mov	r0, r5
    a460:	f7ff feed 	bl	a23e <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
    a464:	2101      	movs	r1, #1
    a466:	7c28      	ldrb	r0, [r5, #16]
    a468:	f001 fb02 	bl	ba70 <sdCsWrite(unsigned char, bool)>
    a46c:	240a      	movs	r4, #10
    m_spiDriver.send(data);
    a46e:	f04f 08ff 	mov.w	r8, #255	; 0xff
    a472:	4641      	mov	r1, r8
    a474:	4630      	mov	r0, r6
    a476:	f001 fbf8 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
    a47a:	1e63      	subs	r3, r4, #1
    a47c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a480:	d1f7      	bne.n	a472 <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
    a482:	2100      	movs	r1, #0
    a484:	7c28      	ldrb	r0, [r5, #16]
    a486:	f001 faf3 	bl	ba70 <sdCsWrite(unsigned char, bool)>
    a48a:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
    a48c:	f04f 0800 	mov.w	r8, #0
    a490:	4642      	mov	r2, r8
    a492:	4641      	mov	r1, r8
    a494:	4628      	mov	r0, r5
    a496:	f7ff ff6d 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a49a:	2801      	cmp	r0, #1
    a49c:	d00c      	beq.n	a4b8 <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
    a49e:	1e63      	subs	r3, r4, #1
    a4a0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a4a4:	d1f4      	bne.n	a490 <SharedSpiCard::begin(SdSpiConfig)+0x84>
    a4a6:	2301      	movs	r3, #1
    m_errorCode = code;
    a4a8:	746b      	strb	r3, [r5, #17]
  spiStop();
    a4aa:	4628      	mov	r0, r5
    a4ac:	f7ff fedb 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a4b0:	2000      	movs	r0, #0
}
    a4b2:	b009      	add	sp, #36	; 0x24
    a4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    a4b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    a4bc:	2108      	movs	r1, #8
    a4be:	4628      	mov	r0, r5
    a4c0:	f7ff ff58 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4c4:	f010 0f04 	tst.w	r0, #4
    a4c8:	d10e      	bne.n	a4e8 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
    a4ca:	2302      	movs	r3, #2
    a4cc:	756b      	strb	r3, [r5, #21]
    a4ce:	2404      	movs	r4, #4
    return m_spiDriver.receive();
    a4d0:	4630      	mov	r0, r6
    a4d2:	f001 fbae 	bl	bc32 <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
    a4d6:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
    a4d8:	1e63      	subs	r3, r4, #1
    a4da:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    a4de:	d1f7      	bne.n	a4d0 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
    a4e0:	28aa      	cmp	r0, #170	; 0xaa
    a4e2:	d003      	beq.n	a4ec <SharedSpiCard::begin(SdSpiConfig)+0xe0>
    a4e4:	2306      	movs	r3, #6
    a4e6:	e7df      	b.n	a4a8 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
    a4e8:	2301      	movs	r3, #1
    a4ea:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    a4ec:	682b      	ldr	r3, [r5, #0]
    a4ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a4f0:	4628      	mov	r0, r5
    a4f2:	4798      	blx	r3
    a4f4:	2802      	cmp	r0, #2
    a4f6:	bf14      	ite	ne
    a4f8:	2400      	movne	r4, #0
    a4fa:	2401      	moveq	r4, #1
    a4fc:	07a4      	lsls	r4, r4, #30
    a4fe:	4b26      	ldr	r3, [pc, #152]	; (a598 <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
    a500:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
    a502:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
    a506:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
    a50a:	f04f 0a00 	mov.w	sl, #0
    a50e:	f04f 0937 	mov.w	r9, #55	; 0x37
    a512:	f8df b084 	ldr.w	fp, [pc, #132]	; a598 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
    a516:	4652      	mov	r2, sl
    a518:	4649      	mov	r1, r9
    a51a:	4628      	mov	r0, r5
    a51c:	f7ff ff2a 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    a520:	4622      	mov	r2, r4
    a522:	2129      	movs	r1, #41	; 0x29
    a524:	4628      	mov	r0, r5
    a526:	f7ff ff25 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    a52a:	b140      	cbz	r0, a53e <SharedSpiCard::begin(SdSpiConfig)+0x132>
    a52c:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
    a530:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
    a534:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    a538:	d0ed      	beq.n	a516 <SharedSpiCard::begin(SdSpiConfig)+0x10a>
    a53a:	2317      	movs	r3, #23
    a53c:	e7b4      	b.n	a4a8 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
    a53e:	682b      	ldr	r3, [r5, #0]
    a540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a542:	4628      	mov	r0, r5
    a544:	4798      	blx	r3
    a546:	2802      	cmp	r0, #2
    a548:	d007      	beq.n	a55a <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
    a54a:	4628      	mov	r0, r5
    a54c:	f7ff fe8b 	bl	a266 <SharedSpiCard::spiStop()>
    a550:	60af      	str	r7, [r5, #8]
    a552:	2307      	movs	r3, #7
    a554:	60eb      	str	r3, [r5, #12]
  return true;
    a556:	2001      	movs	r0, #1
    a558:	e7ab      	b.n	a4b2 <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
    a55a:	2200      	movs	r2, #0
    a55c:	213a      	movs	r1, #58	; 0x3a
    a55e:	4628      	mov	r0, r5
    a560:	f7ff ff08 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a564:	b108      	cbz	r0, a56a <SharedSpiCard::begin(SdSpiConfig)+0x15e>
    a566:	2312      	movs	r3, #18
    a568:	e79e      	b.n	a4a8 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
    a56a:	4630      	mov	r0, r6
    a56c:	f001 fb61 	bl	bc32 <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
    a570:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    a574:	2bc0      	cmp	r3, #192	; 0xc0
    a576:	d009      	beq.n	a58c <SharedSpiCard::begin(SdSpiConfig)+0x180>
    a578:	4630      	mov	r0, r6
    a57a:	f001 fb5a 	bl	bc32 <SdSpiArduinoDriver::receive()>
    a57e:	4630      	mov	r0, r6
    a580:	f001 fb57 	bl	bc32 <SdSpiArduinoDriver::receive()>
    a584:	4630      	mov	r0, r6
    a586:	f001 fb54 	bl	bc32 <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
    a58a:	e7de      	b.n	a54a <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
    a58c:	2303      	movs	r3, #3
    a58e:	756b      	strb	r3, [r5, #21]
  }
    a590:	e7f2      	b.n	a578 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    a592:	bf00      	nop
    a594:	00061a80 	.word	0x00061a80
    a598:	20005388 	.word	0x20005388

0000a59c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a59e:	4606      	mov	r6, r0
    a5a0:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a5a2:	2200      	movs	r2, #0
    a5a4:	213a      	movs	r1, #58	; 0x3a
    a5a6:	f7ff fee5 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a5aa:	b968      	cbnz	r0, a5c8 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a5ac:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a5ae:	1d37      	adds	r7, r6, #4
    a5b0:	4638      	mov	r0, r7
    a5b2:	f001 fb3e 	bl	bc32 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a5b6:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a5ba:	42ac      	cmp	r4, r5
    a5bc:	d1f8      	bne.n	a5b0 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
    a5be:	4630      	mov	r0, r6
    a5c0:	f7ff fe51 	bl	a266 <SharedSpiCard::spiStop()>
  return true;
    a5c4:	2001      	movs	r0, #1
}
    a5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a5c8:	2312      	movs	r3, #18
    a5ca:	7473      	strb	r3, [r6, #17]
  spiStop();
    a5cc:	4630      	mov	r0, r6
    a5ce:	f7ff fe4a 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a5d2:	2000      	movs	r0, #0
    a5d4:	e7f7      	b.n	a5c6 <SharedSpiCard::readOCR(unsigned long*)+0x2a>

0000a5d6 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a5d6:	b538      	push	{r3, r4, r5, lr}
    a5d8:	4604      	mov	r4, r0
    a5da:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    a5dc:	2200      	movs	r2, #0
    a5de:	f7ff fec9 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a5e2:	b138      	cbz	r0, a5f4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
    a5e4:	231b      	movs	r3, #27
    a5e6:	7463      	strb	r3, [r4, #17]
  spiStop();
    a5e8:	4620      	mov	r0, r4
    a5ea:	f7ff fe3c 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a5ee:	2500      	movs	r5, #0
}
    a5f0:	4628      	mov	r0, r5
    a5f2:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
    a5f4:	2210      	movs	r2, #16
    a5f6:	4629      	mov	r1, r5
    a5f8:	4620      	mov	r0, r4
    a5fa:	f7ff fe67 	bl	a2cc <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a5fe:	4605      	mov	r5, r0
    a600:	2800      	cmp	r0, #0
    a602:	d0f1      	beq.n	a5e8 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    a604:	4620      	mov	r0, r4
    a606:	f7ff fe2e 	bl	a266 <SharedSpiCard::spiStop()>
  return true;
    a60a:	e7f1      	b.n	a5f0 <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

0000a60c <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a60c:	b508      	push	{r3, lr}
    a60e:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
    a610:	2109      	movs	r1, #9
    a612:	f7ff ffe0 	bl	a5d6 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a616:	bd08      	pop	{r3, pc}

0000a618 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a618:	b508      	push	{r3, lr}
    a61a:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
    a61c:	210a      	movs	r1, #10
    a61e:	f7ff ffda 	bl	a5d6 <SharedSpiCard::readRegister(unsigned char, void*)>
  }
    a622:	bd08      	pop	{r3, pc}

0000a624 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    a624:	b538      	push	{r3, r4, r5, lr}
    a626:	4604      	mov	r4, r0
    a628:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a62a:	6803      	ldr	r3, [r0, #0]
    a62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a62e:	4798      	blx	r3
    a630:	2803      	cmp	r0, #3
    sector <<= 9;
    a632:	bf18      	it	ne
    a634:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    a636:	462a      	mov	r2, r5
    a638:	2112      	movs	r1, #18
    a63a:	4620      	mov	r0, r4
    a63c:	f7ff fe9a 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a640:	b910      	cbnz	r0, a648 <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
    a642:	2001      	movs	r0, #1
    a644:	74e0      	strb	r0, [r4, #19]
}
    a646:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a648:	230c      	movs	r3, #12
    a64a:	7463      	strb	r3, [r4, #17]
  spiStop();
    a64c:	4620      	mov	r0, r4
    a64e:	f7ff fe0a 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a652:	2000      	movs	r0, #0
    a654:	e7f7      	b.n	a646 <SharedSpiCard::readStart(unsigned long)+0x22>

0000a656 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a656:	b510      	push	{r4, lr}
    a658:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
    a65a:	2200      	movs	r2, #0
    a65c:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a65e:	210c      	movs	r1, #12
    a660:	f7ff fe88 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a664:	b920      	cbnz	r0, a670 <SharedSpiCard::readStop()+0x1a>
  spiStop();
    a666:	4620      	mov	r0, r4
    a668:	f7ff fdfd 	bl	a266 <SharedSpiCard::spiStop()>
  return true;
    a66c:	2001      	movs	r0, #1
}
    a66e:	bd10      	pop	{r4, pc}
    a670:	2309      	movs	r3, #9
    a672:	7463      	strb	r3, [r4, #17]
  spiStop();
    a674:	4620      	mov	r0, r4
    a676:	f7ff fdf6 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a67a:	2000      	movs	r0, #0
    a67c:	e7f7      	b.n	a66e <SharedSpiCard::readStop()+0x18>

0000a67e <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
    a67e:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
    a680:	7cc3      	ldrb	r3, [r0, #19]
    a682:	2b02      	cmp	r3, #2
    a684:	d003      	beq.n	a68e <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
    a686:	2b01      	cmp	r3, #1
    a688:	d005      	beq.n	a696 <SharedSpiCard::syncDevice()+0x18>
  return true;
    a68a:	2001      	movs	r0, #1
}
    a68c:	bd08      	pop	{r3, pc}
    return writeStop();
    a68e:	6803      	ldr	r3, [r0, #0]
    a690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a692:	4798      	blx	r3
    a694:	e7fa      	b.n	a68c <SharedSpiCard::syncDevice()+0xe>
    return readStop();
    a696:	f7ff ffde 	bl	a656 <SharedSpiCard::readStop()>
    a69a:	e7f7      	b.n	a68c <SharedSpiCard::syncDevice()+0xe>

0000a69c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a69e:	4606      	mov	r6, r0
    a6a0:	460d      	mov	r5, r1
    a6a2:	4614      	mov	r4, r2
    a6a4:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a6a6:	7cc3      	ldrb	r3, [r0, #19]
    a6a8:	2b01      	cmp	r3, #1
    a6aa:	d102      	bne.n	a6b2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a6ac:	6983      	ldr	r3, [r0, #24]
    a6ae:	428b      	cmp	r3, r1
    a6b0:	d006      	beq.n	a6c0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
    a6b2:	4629      	mov	r1, r5
    a6b4:	4630      	mov	r0, r6
    a6b6:	f7ff ffb5 	bl	a624 <SharedSpiCard::readStart(unsigned long)>
    a6ba:	4603      	mov	r3, r0
    a6bc:	b190      	cbz	r0, a6e4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
    a6be:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a6c0:	b15f      	cbz	r7, a6da <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
    a6c2:	2500      	movs	r5, #0
    if (!readData(dst)) {
    a6c4:	4621      	mov	r1, r4
    a6c6:	4630      	mov	r0, r6
    a6c8:	f7ff fe36 	bl	a338 <SharedSpiCard::readData(unsigned char*)>
    a6cc:	4603      	mov	r3, r0
    a6ce:	b148      	cbz	r0, a6e4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a6d0:	3501      	adds	r5, #1
    a6d2:	f504 7400 	add.w	r4, r4, #512	; 0x200
    a6d6:	42af      	cmp	r7, r5
    a6d8:	d1f4      	bne.n	a6c4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
    a6da:	69b3      	ldr	r3, [r6, #24]
    a6dc:	443b      	add	r3, r7
    a6de:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a6e0:	7f33      	ldrb	r3, [r6, #28]
    a6e2:	b10b      	cbz	r3, a6e8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
    a6e4:	4618      	mov	r0, r3
    a6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
    a6e8:	4630      	mov	r0, r6
    a6ea:	f7ff ffb4 	bl	a656 <SharedSpiCard::readStop()>
    a6ee:	4603      	mov	r3, r0
    a6f0:	e7f8      	b.n	a6e4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0000a6f2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a6f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6f6:	4606      	mov	r6, r0
    a6f8:	460c      	mov	r4, r1
    a6fa:	4615      	mov	r5, r2
    a6fc:	469a      	mov	sl, r3
    a6fe:	9f08      	ldr	r7, [sp, #32]
    a700:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
    a704:	7cc3      	ldrb	r3, [r0, #19]
    a706:	2b01      	cmp	r3, #1
    a708:	d102      	bne.n	a710 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
    a70a:	6983      	ldr	r3, [r0, #24]
    a70c:	428b      	cmp	r3, r1
    a70e:	d006      	beq.n	a71e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a710:	4621      	mov	r1, r4
    a712:	4630      	mov	r0, r6
    a714:	f7ff ff86 	bl	a624 <SharedSpiCard::readStart(unsigned long)>
    a718:	4603      	mov	r3, r0
    a71a:	b1b8      	cbz	r0, a74c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
    a71c:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a71e:	f1ba 0f00 	cmp.w	sl, #0
    a722:	d00e      	beq.n	a742 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
    a724:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
    a728:	4629      	mov	r1, r5
    a72a:	4630      	mov	r0, r6
    a72c:	f7ff fe04 	bl	a338 <SharedSpiCard::readData(unsigned char*)>
    a730:	4603      	mov	r3, r0
    a732:	b158      	cbz	r0, a74c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
    a734:	4642      	mov	r2, r8
    a736:	4629      	mov	r1, r5
    a738:	4620      	mov	r0, r4
    a73a:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
    a73c:	3401      	adds	r4, #1
    a73e:	45a1      	cmp	r9, r4
    a740:	d1f2      	bne.n	a728 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
    a742:	69b3      	ldr	r3, [r6, #24]
    a744:	4453      	add	r3, sl
    a746:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a748:	7f33      	ldrb	r3, [r6, #28]
    a74a:	b113      	cbz	r3, a752 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
    a74c:	4618      	mov	r0, r3
    a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
    a752:	4630      	mov	r0, r6
    a754:	f7ff ff7f 	bl	a656 <SharedSpiCard::readStop()>
    a758:	4603      	mov	r3, r0
    a75a:	e7f7      	b.n	a74c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

0000a75c <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    a75c:	b538      	push	{r3, r4, r5, lr}
    a75e:	4604      	mov	r4, r0
    a760:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
    a762:	6803      	ldr	r3, [r0, #0]
    a764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a766:	4798      	blx	r3
    a768:	2803      	cmp	r0, #3
    sector <<= 9;
    a76a:	bf18      	it	ne
    a76c:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    a76e:	462a      	mov	r2, r5
    a770:	2119      	movs	r1, #25
    a772:	4620      	mov	r0, r4
    a774:	f7ff fdfe 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a778:	b918      	cbnz	r0, a782 <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
    a77a:	2302      	movs	r3, #2
    a77c:	74e3      	strb	r3, [r4, #19]
  return true;
    a77e:	2001      	movs	r0, #1
}
    a780:	bd38      	pop	{r3, r4, r5, pc}
    a782:	230e      	movs	r3, #14
    a784:	7463      	strb	r3, [r4, #17]
  spiStop();
    a786:	4620      	mov	r0, r4
    a788:	f7ff fd6d 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a78c:	2000      	movs	r0, #0
    a78e:	e7f7      	b.n	a780 <SharedSpiCard::writeStart(unsigned long)+0x24>

0000a790 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a790:	b570      	push	{r4, r5, r6, lr}
    a792:	b084      	sub	sp, #16
    a794:	4604      	mov	r4, r0
    a796:	460d      	mov	r5, r1
    a798:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
    a79a:	6803      	ldr	r3, [r0, #0]
    a79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a79e:	4669      	mov	r1, sp
    a7a0:	4798      	blx	r3
    a7a2:	b1f8      	cbz	r0, a7e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
    a7a4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a7a8:	f013 0f40 	tst.w	r3, #64	; 0x40
    a7ac:	d10d      	bne.n	a7ca <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a7ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a7b2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a7b6:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a7b8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a7bc:	1c72      	adds	r2, r6, #1
    a7be:	432a      	orrs	r2, r5
    a7c0:	4213      	tst	r3, r2
    a7c2:	d002      	beq.n	a7ca <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    a7c4:	2327      	movs	r3, #39	; 0x27
    a7c6:	7463      	strb	r3, [r4, #17]
      goto fail;
    a7c8:	e00c      	b.n	a7e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a7ca:	7d63      	ldrb	r3, [r4, #21]
    a7cc:	2b03      	cmp	r3, #3
    a7ce:	d001      	beq.n	a7d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
    a7d0:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    a7d2:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
    a7d4:	462a      	mov	r2, r5
    a7d6:	2120      	movs	r1, #32
    a7d8:	4620      	mov	r0, r4
    a7da:	f7ff fdcb 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a7de:	b140      	cbz	r0, a7f2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
    a7e0:	2326      	movs	r3, #38	; 0x26
    a7e2:	7463      	strb	r3, [r4, #17]
  spiStop();
    a7e4:	4620      	mov	r0, r4
    a7e6:	f7ff fd3e 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a7ea:	2500      	movs	r5, #0
}
    a7ec:	4628      	mov	r0, r5
    a7ee:	b004      	add	sp, #16
    a7f0:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
    a7f2:	4632      	mov	r2, r6
    a7f4:	2121      	movs	r1, #33	; 0x21
    a7f6:	4620      	mov	r0, r4
    a7f8:	f7ff fdbc 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a7fc:	2800      	cmp	r0, #0
    a7fe:	d1ef      	bne.n	a7e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
    a800:	2200      	movs	r2, #0
    a802:	2126      	movs	r1, #38	; 0x26
    a804:	4620      	mov	r0, r4
    a806:	f7ff fdb5 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a80a:	2800      	cmp	r0, #0
    a80c:	d1e8      	bne.n	a7e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    a80e:	f242 7110 	movw	r1, #10000	; 0x2710
    a812:	4620      	mov	r0, r4
    a814:	f7ff fd96 	bl	a344 <SharedSpiCard::waitReady(unsigned short)>
    a818:	4605      	mov	r5, r0
    a81a:	b910      	cbnz	r0, a822 <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
    a81c:	2328      	movs	r3, #40	; 0x28
    a81e:	7463      	strb	r3, [r4, #17]
    goto fail;
    a820:	e7e0      	b.n	a7e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
    a822:	4620      	mov	r0, r4
    a824:	f7ff fd1f 	bl	a266 <SharedSpiCard::spiStop()>
  return true;
    a828:	e7e0      	b.n	a7ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

0000a82a <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    a82a:	b538      	push	{r3, r4, r5, lr}
    a82c:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a82e:	f44f 7116 	mov.w	r1, #600	; 0x258
    a832:	f7ff fd87 	bl	a344 <SharedSpiCard::waitReady(unsigned short)>
    a836:	4605      	mov	r5, r0
    a838:	b150      	cbz	r0, a850 <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
    a83a:	21fd      	movs	r1, #253	; 0xfd
    a83c:	1d20      	adds	r0, r4, #4
    a83e:	f001 fa14 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    a842:	4620      	mov	r0, r4
    a844:	f7ff fd0f 	bl	a266 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    a848:	2300      	movs	r3, #0
    a84a:	74e3      	strb	r3, [r4, #19]
}
    a84c:	4628      	mov	r0, r5
    a84e:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
    a850:	231e      	movs	r3, #30
    a852:	7463      	strb	r3, [r4, #17]
  spiStop();
    a854:	4620      	mov	r0, r4
    a856:	f7ff fd06 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a85a:	e7f7      	b.n	a84c <SharedSpiCard::writeStop()+0x22>

0000a85c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a85c:	b570      	push	{r4, r5, r6, lr}
    a85e:	4605      	mov	r5, r0
    a860:	4616      	mov	r6, r2
    m_spiDriver.send(data);
    a862:	1d04      	adds	r4, r0, #4
    a864:	4620      	mov	r0, r4
    a866:	f001 fa00 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a86a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a86e:	4631      	mov	r1, r6
    a870:	4620      	mov	r0, r4
    a872:	f001 fa04 	bl	bc7e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a876:	21ff      	movs	r1, #255	; 0xff
    a878:	4620      	mov	r0, r4
    a87a:	f001 f9f6 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    a87e:	21ff      	movs	r1, #255	; 0xff
    a880:	4620      	mov	r0, r4
    a882:	f001 f9f2 	bl	bc6a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a886:	4620      	mov	r0, r4
    a888:	f001 f9d3 	bl	bc32 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    a88c:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a88e:	f000 031f 	and.w	r3, r0, #31
    a892:	2b05      	cmp	r3, #5
    a894:	d101      	bne.n	a89a <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
    a896:	2001      	movs	r0, #1
}
    a898:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
    a89a:	2320      	movs	r3, #32
    a89c:	746b      	strb	r3, [r5, #17]
  spiStop();
    a89e:	4628      	mov	r0, r5
    a8a0:	f7ff fce1 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a8a4:	2000      	movs	r0, #0
    a8a6:	e7f7      	b.n	a898 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

0000a8a8 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a8a8:	b538      	push	{r3, r4, r5, lr}
    a8aa:	4604      	mov	r4, r0
    a8ac:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    a8ae:	f44f 7116 	mov.w	r1, #600	; 0x258
    a8b2:	f7ff fd47 	bl	a344 <SharedSpiCard::waitReady(unsigned short)>
    a8b6:	b930      	cbnz	r0, a8c6 <SharedSpiCard::writeData(unsigned char const*)+0x1e>
    a8b8:	2324      	movs	r3, #36	; 0x24
    a8ba:	7463      	strb	r3, [r4, #17]
  spiStop();
    a8bc:	4620      	mov	r0, r4
    a8be:	f7ff fcd2 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a8c2:	2000      	movs	r0, #0
}
    a8c4:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a8c6:	462a      	mov	r2, r5
    a8c8:	21fc      	movs	r1, #252	; 0xfc
    a8ca:	4620      	mov	r0, r4
    a8cc:	f7ff ffc6 	bl	a85c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a8d0:	2800      	cmp	r0, #0
    a8d2:	d1f7      	bne.n	a8c4 <SharedSpiCard::writeData(unsigned char const*)+0x1c>
    a8d4:	e7f2      	b.n	a8bc <SharedSpiCard::writeData(unsigned char const*)+0x14>

0000a8d6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a8d6:	b570      	push	{r4, r5, r6, lr}
    a8d8:	4604      	mov	r4, r0
    a8da:	460d      	mov	r5, r1
    a8dc:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    a8de:	6803      	ldr	r3, [r0, #0]
    a8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    a8e2:	4798      	blx	r3
    a8e4:	2803      	cmp	r0, #3
    sector <<= 9;
    a8e6:	bf18      	it	ne
    a8e8:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a8ea:	462a      	mov	r2, r5
    a8ec:	2118      	movs	r1, #24
    a8ee:	4620      	mov	r0, r4
    a8f0:	f7ff fd40 	bl	a374 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a8f4:	b138      	cbz	r0, a906 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    a8f6:	230d      	movs	r3, #13
    a8f8:	7463      	strb	r3, [r4, #17]
  spiStop();
    a8fa:	4620      	mov	r0, r4
    a8fc:	f7ff fcb3 	bl	a266 <SharedSpiCard::spiStop()>
  return false;
    a900:	2500      	movs	r5, #0
}
    a902:	4628      	mov	r0, r5
    a904:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a906:	4632      	mov	r2, r6
    a908:	21fe      	movs	r1, #254	; 0xfe
    a90a:	4620      	mov	r0, r4
    a90c:	f7ff ffa6 	bl	a85c <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a910:	4605      	mov	r5, r0
    a912:	2800      	cmp	r0, #0
    a914:	d0f1      	beq.n	a8fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
    a916:	4620      	mov	r0, r4
    a918:	f7ff fca5 	bl	a266 <SharedSpiCard::spiStop()>
  return true;
    a91c:	e7f1      	b.n	a902 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

0000a91e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a91e:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
    a920:	7f03      	ldrb	r3, [r0, #28]
    a922:	b123      	cbz	r3, a92e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
    a924:	6803      	ldr	r3, [r0, #0]
    a926:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    a928:	2301      	movs	r3, #1
    a92a:	47a0      	blx	r4
}
    a92c:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
    a92e:	f7ff ffd2 	bl	a8d6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
    a932:	e7fb      	b.n	a92c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0000a934 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
    a934:	b510      	push	{r4, lr}
    a936:	b084      	sub	sp, #16
    a938:	4604      	mov	r4, r0
    a93a:	f10d 0c04 	add.w	ip, sp, #4
    a93e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
    a942:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
    a946:	f7ff fd61 	bl	a40c <SharedSpiCard::begin(SdSpiConfig)>
    a94a:	b120      	cbz	r0, a956 <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
    a94c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    a950:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
    a954:	7723      	strb	r3, [r4, #28]
}
    a956:	b004      	add	sp, #16
    a958:	bd10      	pop	{r4, pc}

0000a95a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a95a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a95e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    a962:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a966:	b1b3      	cbz	r3, a996 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a968:	4605      	mov	r5, r0
    a96a:	460c      	mov	r4, r1
    a96c:	4616      	mov	r6, r2
    a96e:	461f      	mov	r7, r3
    a970:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
    a972:	682b      	ldr	r3, [r5, #0]
    a974:	691b      	ldr	r3, [r3, #16]
    a976:	4632      	mov	r2, r6
    a978:	4621      	mov	r1, r4
    a97a:	4628      	mov	r0, r5
    a97c:	4798      	blx	r3
    a97e:	4682      	mov	sl, r0
    a980:	b130      	cbz	r0, a990 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
    a982:	464a      	mov	r2, r9
    a984:	4631      	mov	r1, r6
    a986:	4620      	mov	r0, r4
    a988:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a98a:	3401      	adds	r4, #1
    a98c:	42bc      	cmp	r4, r7
    a98e:	d1f0      	bne.n	a972 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
    a990:	4650      	mov	r0, sl
    a992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
    a996:	f04f 0a01 	mov.w	sl, #1
    a99a:	e7f9      	b.n	a990 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

0000a99c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a9a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a9a4:	b1aa      	cbz	r2, a9d2 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
    a9a6:	4605      	mov	r5, r0
    a9a8:	460c      	mov	r4, r1
    a9aa:	461f      	mov	r7, r3
    a9ac:	4690      	mov	r8, r2
    a9ae:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a9b0:	682b      	ldr	r3, [r5, #0]
    a9b2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a9b4:	4649      	mov	r1, r9
    a9b6:	4620      	mov	r0, r4
    a9b8:	47b8      	blx	r7
    a9ba:	4602      	mov	r2, r0
    a9bc:	4621      	mov	r1, r4
    a9be:	4628      	mov	r0, r5
    a9c0:	47b0      	blx	r6
    a9c2:	4603      	mov	r3, r0
    a9c4:	b110      	cbz	r0, a9cc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
    a9c6:	3401      	adds	r4, #1
    a9c8:	4544      	cmp	r4, r8
    a9ca:	d1f1      	bne.n	a9b0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a9cc:	4618      	mov	r0, r3
    a9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a9d2:	2301      	movs	r3, #1
    a9d4:	e7fa      	b.n	a9cc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

0000a9d6 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a9d6:	2000      	movs	r0, #0
    a9d8:	4770      	bx	lr

0000a9da <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a9da:	2000      	movs	r0, #0
    a9dc:	4770      	bx	lr

0000a9de <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a9de:	2000      	movs	r0, #0
    a9e0:	4770      	bx	lr

0000a9e2 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a9e2:	4770      	bx	lr

0000a9e4 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a9e4:	4b07      	ldr	r3, [pc, #28]	; (aa04 <sdIrs()+0x20>)
    a9e6:	2100      	movs	r1, #0
    a9e8:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a9ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
    a9ec:	4a06      	ldr	r2, [pc, #24]	; (aa08 <sdIrs()+0x24>)
    a9ee:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a9f0:	6812      	ldr	r2, [r2, #0]
    a9f2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a9f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a9f6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a9fa:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    a9fc:	4b03      	ldr	r3, [pc, #12]	; (aa0c <sdIrs()+0x28>)
    a9fe:	7019      	strb	r1, [r3, #0]
}
    aa00:	4770      	bx	lr
    aa02:	bf00      	nop
    aa04:	402c0000 	.word	0x402c0000
    aa08:	20004c58 	.word	0x20004c58
    aa0c:	200053c3 	.word	0x200053c3

0000aa10 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa10:	4b06      	ldr	r3, [pc, #24]	; (aa2c <gpioMux(unsigned char)+0x1c>)
    aa12:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aa16:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aa1a:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aa1e:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aa22:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aa26:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
    aa2a:	4770      	bx	lr
    aa2c:	401f8000 	.word	0x401f8000

0000aa30 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    aa30:	4b03      	ldr	r3, [pc, #12]	; (aa40 <isBusyCommandComplete()+0x10>)
    aa32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    aa34:	4803      	ldr	r0, [pc, #12]	; (aa44 <isBusyCommandComplete()+0x14>)
    aa36:	4018      	ands	r0, r3
}
    aa38:	fab0 f080 	clz	r0, r0
    aa3c:	0940      	lsrs	r0, r0, #5
    aa3e:	4770      	bx	lr
    aa40:	402c0000 	.word	0x402c0000
    aa44:	000f0001 	.word	0x000f0001

0000aa48 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    aa48:	4b02      	ldr	r3, [pc, #8]	; (aa54 <isBusyCommandInhibit()+0xc>)
    aa4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    aa4c:	f000 0001 	and.w	r0, r0, #1
    aa50:	4770      	bx	lr
    aa52:	bf00      	nop
    aa54:	402c0000 	.word	0x402c0000

0000aa58 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    aa58:	4b03      	ldr	r3, [pc, #12]	; (aa68 <isBusyDat()+0x10>)
    aa5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa5c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    aa60:	f3c0 6000 	ubfx	r0, r0, #24, #1
    aa64:	4770      	bx	lr
    aa66:	bf00      	nop
    aa68:	402c0000 	.word	0x402c0000

0000aa6c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    aa6c:	4b01      	ldr	r3, [pc, #4]	; (aa74 <isBusyDMA()+0x8>)
    aa6e:	7818      	ldrb	r0, [r3, #0]
}
    aa70:	4770      	bx	lr
    aa72:	bf00      	nop
    aa74:	200053c3 	.word	0x200053c3

0000aa78 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    aa78:	4b03      	ldr	r3, [pc, #12]	; (aa88 <isBusyFifoRead()+0x10>)
    aa7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa7c:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    aa80:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    aa84:	4770      	bx	lr
    aa86:	bf00      	nop
    aa88:	402c0000 	.word	0x402c0000

0000aa8c <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    aa8c:	4b03      	ldr	r3, [pc, #12]	; (aa9c <isBusyFifoWrite()+0x10>)
    aa8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa90:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    aa94:	f3c0 2080 	ubfx	r0, r0, #10, #1
    aa98:	4770      	bx	lr
    aa9a:	bf00      	nop
    aa9c:	402c0000 	.word	0x402c0000

0000aaa0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aaa0:	4b03      	ldr	r3, [pc, #12]	; (aab0 <isBusyTransferComplete()+0x10>)
    aaa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    aaa4:	4803      	ldr	r0, [pc, #12]	; (aab4 <isBusyTransferComplete()+0x14>)
    aaa6:	4018      	ands	r0, r3
}
    aaa8:	fab0 f080 	clz	r0, r0
    aaac:	0940      	lsrs	r0, r0, #5
    aaae:	4770      	bx	lr
    aab0:	402c0000 	.word	0x402c0000
    aab4:	117f0002 	.word	0x117f0002

0000aab8 <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    aab8:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    aaba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    aabe:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aac2:	4b2b      	ldr	r3, [pc, #172]	; (ab70 <setSdclk(unsigned long)+0xb8>)
    aac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aac6:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
    aaca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    aace:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    aad2:	4b28      	ldr	r3, [pc, #160]	; (ab74 <setSdclk(unsigned long)+0xbc>)
    aad4:	fba3 3202 	umull	r3, r2, r3, r2
    aad8:	0892      	lsrs	r2, r2, #2
    aada:	4b27      	ldr	r3, [pc, #156]	; (ab78 <setSdclk(unsigned long)+0xc0>)
    aadc:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aae0:	f3c1 23c2 	ubfx	r3, r1, #11, #3
    aae4:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aae6:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    aaea:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
    aaee:	d239      	bcs.n	ab64 <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
    aaf0:	2201      	movs	r2, #1
    sdclkfs <<= 1;
    aaf2:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    aaf4:	0113      	lsls	r3, r2, #4
    aaf6:	fbbc f3f3 	udiv	r3, ip, r3
    aafa:	4573      	cmp	r3, lr
    aafc:	d901      	bls.n	ab02 <setSdclk(unsigned long)+0x4a>
    aafe:	2aff      	cmp	r2, #255	; 0xff
    ab00:	d9f7      	bls.n	aaf2 <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab02:	fbbc f3f2 	udiv	r3, ip, r2
    ab06:	459e      	cmp	lr, r3
    ab08:	d22e      	bcs.n	ab68 <setSdclk(unsigned long)+0xb0>
    ab0a:	0051      	lsls	r1, r2, #1
    ab0c:	2301      	movs	r3, #1
    dvs++;
    ab0e:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab10:	fbbc f0f1 	udiv	r0, ip, r1
    ab14:	4570      	cmp	r0, lr
    ab16:	bf94      	ite	ls
    ab18:	2000      	movls	r0, #0
    ab1a:	2001      	movhi	r0, #1
    ab1c:	2b0f      	cmp	r3, #15
    ab1e:	bf88      	it	hi
    ab20:	2000      	movhi	r0, #0
    ab22:	460c      	mov	r4, r1
    ab24:	4411      	add	r1, r2
    ab26:	2800      	cmp	r0, #0
    ab28:	d1f1      	bne.n	ab0e <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ab2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ab2e:	fb01 f404 	mul.w	r4, r1, r4
    ab32:	fbbc f4f4 	udiv	r4, ip, r4
    ab36:	4811      	ldr	r0, [pc, #68]	; (ab7c <setSdclk(unsigned long)+0xc4>)
    ab38:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    ab3a:	4811      	ldr	r0, [pc, #68]	; (ab80 <setSdclk(unsigned long)+0xc8>)
    ab3c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
    ab3e:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab40:	011b      	lsls	r3, r3, #4
    ab42:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    ab44:	490f      	ldr	r1, [pc, #60]	; (ab84 <setSdclk(unsigned long)+0xcc>)
    ab46:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab48:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    ab4a:	01d2      	lsls	r2, r2, #7
    ab4c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    ab50:	4313      	orrs	r3, r2
    ab52:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab56:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ab58:	4602      	mov	r2, r0
    ab5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ab5c:	f013 0f08 	tst.w	r3, #8
    ab60:	d0fb      	beq.n	ab5a <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    ab62:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
    ab64:	2201      	movs	r2, #1
    ab66:	e7cc      	b.n	ab02 <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab68:	4614      	mov	r4, r2
    ab6a:	2301      	movs	r3, #1
    ab6c:	e7dd      	b.n	ab2a <setSdclk(unsigned long)+0x72>
    ab6e:	bf00      	nop
    ab70:	400fc000 	.word	0x400fc000
    ab74:	aaaaaaab 	.word	0xaaaaaaab
    ab78:	5e69ec00 	.word	0x5e69ec00
    ab7c:	20004b50 	.word	0x20004b50
    ab80:	402c0000 	.word	0x402c0000
    ab84:	fff0000f 	.word	0xfff0000f

0000ab88 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    ab88:	4b01      	ldr	r3, [pc, #4]	; (ab90 <SdioCard::errorCode() const+0x8>)
    ab8a:	7818      	ldrb	r0, [r3, #0]
    ab8c:	4770      	bx	lr
    ab8e:	bf00      	nop
    ab90:	20003a40 	.word	0x20003a40

0000ab94 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ab94:	4b01      	ldr	r3, [pc, #4]	; (ab9c <SdioCard::errorData() const+0x8>)
    ab96:	6818      	ldr	r0, [r3, #0]
}
    ab98:	4770      	bx	lr
    ab9a:	bf00      	nop
    ab9c:	20004c58 	.word	0x20004c58

0000aba0 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    aba0:	b410      	push	{r4}
    aba2:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    aba4:	4c06      	ldr	r4, [pc, #24]	; (abc0 <SdioCard::readCID(CID*)+0x20>)
    aba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    aba8:	f8cc 0000 	str.w	r0, [ip]
    abac:	f8cc 1004 	str.w	r1, [ip, #4]
    abb0:	f8cc 2008 	str.w	r2, [ip, #8]
    abb4:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    abb8:	2001      	movs	r0, #1
    abba:	f85d 4b04 	ldr.w	r4, [sp], #4
    abbe:	4770      	bx	lr
    abc0:	20004bc0 	.word	0x20004bc0

0000abc4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    abc4:	b410      	push	{r4}
    abc6:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    abc8:	4c06      	ldr	r4, [pc, #24]	; (abe4 <SdioCard::readCSD(csd_t*)+0x20>)
    abca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    abcc:	f8cc 0000 	str.w	r0, [ip]
    abd0:	f8cc 1004 	str.w	r1, [ip, #4]
    abd4:	f8cc 2008 	str.w	r2, [ip, #8]
    abd8:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
    abdc:	2001      	movs	r0, #1
    abde:	f85d 4b04 	ldr.w	r4, [sp], #4
    abe2:	4770      	bx	lr
    abe4:	20004bd0 	.word	0x20004bd0

0000abe8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    abe8:	4b02      	ldr	r3, [pc, #8]	; (abf4 <SdioCard::readOCR(unsigned long*)+0xc>)
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	600b      	str	r3, [r1, #0]
  return true;
}
    abee:	2001      	movs	r0, #1
    abf0:	4770      	bx	lr
    abf2:	bf00      	nop
    abf4:	20004be0 	.word	0x20004be0

0000abf8 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    abf8:	4b17      	ldr	r3, [pc, #92]	; (ac58 <SdioCard::sectorCount()+0x60>)
    abfa:	781b      	ldrb	r3, [r3, #0]
    abfc:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    ac00:	d003      	beq.n	ac0a <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
    ac02:	2b40      	cmp	r3, #64	; 0x40
    ac04:	d01b      	beq.n	ac3e <SdioCard::sectorCount()+0x46>
    return 0;
    ac06:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
    ac08:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ac0a:	4a13      	ldr	r2, [pc, #76]	; (ac58 <SdioCard::sectorCount()+0x60>)
    ac0c:	7993      	ldrb	r3, [r2, #6]
    ac0e:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac12:	79d0      	ldrb	r0, [r2, #7]
    ac14:	0080      	lsls	r0, r0, #2
    ac16:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
    ac1a:	7a13      	ldrb	r3, [r2, #8]
    ac1c:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac20:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ac22:	7a53      	ldrb	r3, [r2, #9]
    ac24:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    ac28:	7a91      	ldrb	r1, [r2, #10]
    ac2a:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac2c:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    ac30:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac32:	f002 020f 	and.w	r2, r2, #15
    ac36:	4413      	add	r3, r2
    ac38:	3b07      	subs	r3, #7
    ac3a:	4098      	lsls	r0, r3
    ac3c:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ac3e:	4b06      	ldr	r3, [pc, #24]	; (ac58 <SdioCard::sectorCount()+0x60>)
    ac40:	79da      	ldrb	r2, [r3, #7]
    ac42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ac46:	7a58      	ldrb	r0, [r3, #9]
    ac48:	3001      	adds	r0, #1
    ac4a:	eb00 4002 	add.w	r0, r0, r2, lsl #16
    ac4e:	7a1b      	ldrb	r3, [r3, #8]
    ac50:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    ac54:	0280      	lsls	r0, r0, #10
    ac56:	4770      	bx	lr
    ac58:	20004bd0 	.word	0x20004bd0

0000ac5c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    ac5c:	4b04      	ldr	r3, [pc, #16]	; (ac70 <SdioCard::type() const+0x14>)
    ac5e:	781b      	ldrb	r3, [r3, #0]
    ac60:	b123      	cbz	r3, ac6c <SdioCard::type() const+0x10>
    ac62:	4b04      	ldr	r3, [pc, #16]	; (ac74 <SdioCard::type() const+0x18>)
    ac64:	7818      	ldrb	r0, [r3, #0]
    ac66:	3002      	adds	r0, #2
    ac68:	b2c0      	uxtb	r0, r0
    ac6a:	4770      	bx	lr
    ac6c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    ac6e:	4770      	bx	lr
    ac70:	200053c0 	.word	0x200053c0
    ac74:	200053c1 	.word	0x200053c1

0000ac78 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    ac78:	4770      	bx	lr
	...

0000ac7c <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac7e:	4604      	mov	r4, r0
  uint32_t m = micros();
    ac80:	f002 fb38 	bl	d2f4 <micros>
    ac84:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac86:	4f05      	ldr	r7, [pc, #20]	; (ac9c <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
    ac88:	47a0      	blx	r4
    ac8a:	4606      	mov	r6, r0
    ac8c:	b120      	cbz	r0, ac98 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac8e:	f002 fb31 	bl	d2f4 <micros>
    ac92:	1b40      	subs	r0, r0, r5
    ac94:	42b8      	cmp	r0, r7
    ac96:	d9f7      	bls.n	ac88 <waitTimeout(bool (*)())+0xc>
}
    ac98:	4630      	mov	r0, r6
    ac9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac9c:	000f4240 	.word	0x000f4240

0000aca0 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    aca0:	b570      	push	{r4, r5, r6, lr}
    aca2:	4604      	mov	r4, r0
    aca4:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    aca6:	4819      	ldr	r0, [pc, #100]	; (ad0c <cardCommand(unsigned long, unsigned long)+0x6c>)
    aca8:	f7ff ffe8 	bl	ac7c <waitTimeout(bool (*)())>
    acac:	bb40      	cbnz	r0, ad00 <cardCommand(unsigned long, unsigned long)+0x60>
    acae:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
    acb0:	4b17      	ldr	r3, [pc, #92]	; (ad10 <cardCommand(unsigned long, unsigned long)+0x70>)
    acb2:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    acb4:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
    acb8:	d007      	beq.n	acca <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    acba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    acbc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    acc0:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    acc2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    acc4:	b2e2      	uxtb	r2, r4
    acc6:	430a      	orrs	r2, r1
    acc8:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    acca:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    acce:	4b10      	ldr	r3, [pc, #64]	; (ad10 <cardCommand(unsigned long, unsigned long)+0x70>)
    acd0:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    acd2:	4810      	ldr	r0, [pc, #64]	; (ad14 <cardCommand(unsigned long, unsigned long)+0x74>)
    acd4:	f7ff ffd2 	bl	ac7c <waitTimeout(bool (*)())>
    acd8:	4601      	mov	r1, r0
    acda:	b990      	cbnz	r0, ad02 <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
    acdc:	4a0c      	ldr	r2, [pc, #48]	; (ad10 <cardCommand(unsigned long, unsigned long)+0x70>)
    acde:	6b10      	ldr	r0, [r2, #48]	; 0x30
    ace0:	4b0d      	ldr	r3, [pc, #52]	; (ad18 <cardCommand(unsigned long, unsigned long)+0x78>)
    ace2:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ace4:	6818      	ldr	r0, [r3, #0]
    ace6:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ace8:	681b      	ldr	r3, [r3, #0]
    acea:	f013 0f01 	tst.w	r3, #1
    acee:	d00a      	beq.n	ad06 <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    acf0:	4b09      	ldr	r3, [pc, #36]	; (ad18 <cardCommand(unsigned long, unsigned long)+0x78>)
    acf2:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    acf4:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    acf8:	bf0c      	ite	eq
    acfa:	2601      	moveq	r6, #1
    acfc:	2600      	movne	r6, #0
    acfe:	e000      	b.n	ad02 <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
    ad00:	2600      	movs	r6, #0
}
    ad02:	4630      	mov	r0, r6
    ad04:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ad06:	460e      	mov	r6, r1
    ad08:	e7fb      	b.n	ad02 <cardCommand(unsigned long, unsigned long)+0x62>
    ad0a:	bf00      	nop
    ad0c:	0000aa49 	.word	0x0000aa49
    ad10:	402c0000 	.word	0x402c0000
    ad14:	0000aa31 	.word	0x0000aa31
    ad18:	20004c58 	.word	0x20004c58

0000ad1c <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
    ad1c:	b510      	push	{r4, lr}
    ad1e:	b084      	sub	sp, #16
    ad20:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
    ad22:	4b19      	ldr	r3, [pc, #100]	; (ad88 <readReg16(unsigned long, void*)+0x6c>)
    ad24:	6819      	ldr	r1, [r3, #0]
    ad26:	f7ff ffbb 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    ad2a:	b350      	cbz	r0, ad82 <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    ad2c:	4b17      	ldr	r3, [pc, #92]	; (ad8c <readReg16(unsigned long, void*)+0x70>)
    ad2e:	691a      	ldr	r2, [r3, #16]
    ad30:	9200      	str	r2, [sp, #0]
    ad32:	695a      	ldr	r2, [r3, #20]
    ad34:	9201      	str	r2, [sp, #4]
    ad36:	699a      	ldr	r2, [r3, #24]
    ad38:	9202      	str	r2, [sp, #8]
    ad3a:	69db      	ldr	r3, [r3, #28]
    ad3c:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    ad3e:	f104 0e0f 	add.w	lr, r4, #15
    ad42:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ad44:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    ad48:	461a      	mov	r2, r3
    ad4a:	2b00      	cmp	r3, #0
    ad4c:	bfb8      	it	lt
    ad4e:	1cda      	addlt	r2, r3, #3
    ad50:	f022 0203 	bic.w	r2, r2, #3
    ad54:	3210      	adds	r2, #16
    ad56:	446a      	add	r2, sp
    ad58:	4259      	negs	r1, r3
    ad5a:	f003 0c03 	and.w	ip, r3, #3
    ad5e:	f001 0103 	and.w	r1, r1, #3
    ad62:	bf58      	it	pl
    ad64:	f1c1 0c00 	rsbpl	ip, r1, #0
    ad68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ad6c:	f852 2c10 	ldr.w	r2, [r2, #-16]
    ad70:	fa22 f20c 	lsr.w	r2, r2, ip
    ad74:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
    ad78:	3301      	adds	r3, #1
    ad7a:	2b0f      	cmp	r3, #15
    ad7c:	d1e2      	bne.n	ad44 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    ad7e:	2300      	movs	r3, #0
    ad80:	73e3      	strb	r3, [r4, #15]
}
    ad82:	b004      	add	sp, #16
    ad84:	bd10      	pop	{r4, pc}
    ad86:	bf00      	nop
    ad88:	20004be4 	.word	0x20004be4
    ad8c:	402c0000 	.word	0x402c0000

0000ad90 <statusCMD13()>:
static uint32_t statusCMD13() {
    ad90:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad92:	4b05      	ldr	r3, [pc, #20]	; (ada8 <statusCMD13()+0x18>)
    ad94:	6819      	ldr	r1, [r3, #0]
    ad96:	4805      	ldr	r0, [pc, #20]	; (adac <statusCMD13()+0x1c>)
    ad98:	f7ff ff82 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    ad9c:	b110      	cbz	r0, ada4 <statusCMD13()+0x14>
    ad9e:	4b04      	ldr	r3, [pc, #16]	; (adb0 <statusCMD13()+0x20>)
    ada0:	6918      	ldr	r0, [r3, #16]
}
    ada2:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ada4:	2000      	movs	r0, #0
    ada6:	e7fc      	b.n	ada2 <statusCMD13()+0x12>
    ada8:	20004be4 	.word	0x20004be4
    adac:	0d1a0000 	.word	0x0d1a0000
    adb0:	402c0000 	.word	0x402c0000

0000adb4 <isBusyCMD13()>:
static bool isBusyCMD13() {
    adb4:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    adb6:	f7ff ffeb 	bl	ad90 <statusCMD13()>
    adba:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
    adbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
    adc2:	bd08      	pop	{r3, pc}

0000adc4 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    adc4:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
    adc6:	7a03      	ldrb	r3, [r0, #8]
    adc8:	f013 0f01 	tst.w	r3, #1
    adcc:	d00b      	beq.n	ade6 <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    adce:	4b0c      	ldr	r3, [pc, #48]	; (ae00 <SdioCard::isBusy()+0x3c>)
    add0:	681b      	ldr	r3, [r3, #0]
    add2:	b10b      	cbz	r3, add8 <SdioCard::isBusy()+0x14>
    add4:	4798      	blx	r3
}
    add6:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    add8:	4b0a      	ldr	r3, [pc, #40]	; (ae04 <SdioCard::isBusy()+0x40>)
    adda:	7818      	ldrb	r0, [r3, #0]
    addc:	2800      	cmp	r0, #0
    adde:	d0fa      	beq.n	add6 <SdioCard::isBusy()+0x12>
    ade0:	f7ff ffe8 	bl	adb4 <isBusyCMD13()>
    ade4:	e7f7      	b.n	add6 <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
    ade6:	4b08      	ldr	r3, [pc, #32]	; (ae08 <SdioCard::isBusy()+0x44>)
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	b933      	cbnz	r3, adfa <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    adec:	4b07      	ldr	r3, [pc, #28]	; (ae0c <SdioCard::isBusy()+0x48>)
    adee:	6a58      	ldr	r0, [r3, #36]	; 0x24
    adf0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    adf4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    adf8:	e7ed      	b.n	add6 <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
    adfa:	f7ff fe51 	bl	aaa0 <isBusyTransferComplete()>
    adfe:	e7ea      	b.n	add6 <SdioCard::isBusy()+0x12>
    ae00:	20004c54 	.word	0x20004c54
    ae04:	200053bf 	.word	0x200053bf
    ae08:	200053c2 	.word	0x200053c2
    ae0c:	402c0000 	.word	0x402c0000

0000ae10 <SdioCard::status()>:
uint32_t SdioCard::status() {
    ae10:	b508      	push	{r3, lr}
  return statusCMD13();
    ae12:	f7ff ffbd 	bl	ad90 <statusCMD13()>
}
    ae16:	bd08      	pop	{r3, pc}

0000ae18 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    ae18:	b538      	push	{r3, r4, r5, lr}
    ae1a:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    ae1c:	4b2a      	ldr	r3, [pc, #168]	; (aec8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    ae1e:	7a9b      	ldrb	r3, [r3, #10]
    ae20:	f013 0f40 	tst.w	r3, #64	; 0x40
    ae24:	d113      	bne.n	ae4e <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    ae26:	4a28      	ldr	r2, [pc, #160]	; (aec8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    ae28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ae2c:	7ad2      	ldrb	r2, [r2, #11]
    ae2e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    ae30:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    ae34:	1c62      	adds	r2, r4, #1
    ae36:	430a      	orrs	r2, r1
    ae38:	4213      	tst	r3, r2
    ae3a:	d008      	beq.n	ae4e <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    ae3c:	4b23      	ldr	r3, [pc, #140]	; (aecc <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae3e:	2227      	movs	r2, #39	; 0x27
    ae40:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae42:	4b23      	ldr	r3, [pc, #140]	; (aed0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ae44:	f240 22e3 	movw	r2, #739	; 0x2e3
    ae48:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    ae4a:	2500      	movs	r5, #0
    ae4c:	e010      	b.n	ae70 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
    ae4e:	4b21      	ldr	r3, [pc, #132]	; (aed4 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    ae50:	781b      	ldrb	r3, [r3, #0]
    ae52:	b90b      	cbnz	r3, ae58 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    ae54:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    ae56:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    ae58:	481f      	ldr	r0, [pc, #124]	; (aed8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    ae5a:	f7ff ff21 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    ae5e:	4605      	mov	r5, r0
    ae60:	b940      	cbnz	r0, ae74 <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
    ae62:	4b1a      	ldr	r3, [pc, #104]	; (aecc <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae64:	220f      	movs	r2, #15
    ae66:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae68:	4b19      	ldr	r3, [pc, #100]	; (aed0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ae6a:	f240 22eb 	movw	r2, #747	; 0x2eb
    ae6e:	601a      	str	r2, [r3, #0]
}
    ae70:	4628      	mov	r0, r5
    ae72:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    ae74:	4621      	mov	r1, r4
    ae76:	4819      	ldr	r0, [pc, #100]	; (aedc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    ae78:	f7ff ff12 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    ae7c:	4605      	mov	r5, r0
    ae7e:	b938      	cbnz	r0, ae90 <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
    ae80:	4b12      	ldr	r3, [pc, #72]	; (aecc <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae82:	2210      	movs	r2, #16
    ae84:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ae86:	4b12      	ldr	r3, [pc, #72]	; (aed0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    ae88:	f240 22ee 	movw	r2, #750	; 0x2ee
    ae8c:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
    ae8e:	e7ef      	b.n	ae70 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    ae90:	2100      	movs	r1, #0
    ae92:	4813      	ldr	r0, [pc, #76]	; (aee0 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
    ae94:	f7ff ff04 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    ae98:	4605      	mov	r5, r0
    ae9a:	b938      	cbnz	r0, aeac <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
    ae9c:	4b0b      	ldr	r3, [pc, #44]	; (aecc <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    ae9e:	2211      	movs	r2, #17
    aea0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aea2:	4b0b      	ldr	r3, [pc, #44]	; (aed0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aea4:	f240 22f1 	movw	r2, #753	; 0x2f1
    aea8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    aeaa:	e7e1      	b.n	ae70 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
    aeac:	480d      	ldr	r0, [pc, #52]	; (aee4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    aeae:	f7ff fee5 	bl	ac7c <waitTimeout(bool (*)())>
    aeb2:	2800      	cmp	r0, #0
    aeb4:	d0dc      	beq.n	ae70 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
    aeb6:	4b05      	ldr	r3, [pc, #20]	; (aecc <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    aeb8:	2228      	movs	r2, #40	; 0x28
    aeba:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    aebc:	4b04      	ldr	r3, [pc, #16]	; (aed0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    aebe:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    aec2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    aec4:	2500      	movs	r5, #0
    aec6:	e7d3      	b.n	ae70 <SdioCard::erase(unsigned long, unsigned long)+0x58>
    aec8:	20004bd0 	.word	0x20004bd0
    aecc:	20003a40 	.word	0x20003a40
    aed0:	20004bbc 	.word	0x20004bbc
    aed4:	200053c1 	.word	0x200053c1
    aed8:	201a0000 	.word	0x201a0000
    aedc:	211a0000 	.word	0x211a0000
    aee0:	261b0000 	.word	0x261b0000
    aee4:	0000adb5 	.word	0x0000adb5

0000aee8 <waitTransferComplete()>:
static bool waitTransferComplete() {
    aee8:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    aeea:	4b10      	ldr	r3, [pc, #64]	; (af2c <waitTransferComplete()+0x44>)
    aeec:	781c      	ldrb	r4, [r3, #0]
    aeee:	b914      	cbnz	r4, aef6 <waitTransferComplete()+0xe>
    return true;
    aef0:	2401      	movs	r4, #1
}
    aef2:	4620      	mov	r0, r4
    aef4:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    aef6:	480e      	ldr	r0, [pc, #56]	; (af30 <waitTransferComplete()+0x48>)
    aef8:	f7ff fec0 	bl	ac7c <waitTimeout(bool (*)())>
  m_transferActive = false;
    aefc:	4b0b      	ldr	r3, [pc, #44]	; (af2c <waitTransferComplete()+0x44>)
    aefe:	2200      	movs	r2, #0
    af00:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
    af02:	4b0c      	ldr	r3, [pc, #48]	; (af34 <waitTransferComplete()+0x4c>)
    af04:	6b19      	ldr	r1, [r3, #48]	; 0x30
    af06:	4a0c      	ldr	r2, [pc, #48]	; (af38 <waitTransferComplete()+0x50>)
    af08:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    af0a:	6812      	ldr	r2, [r2, #0]
    af0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    af0e:	b920      	cbnz	r0, af1a <waitTransferComplete()+0x32>
    af10:	4b09      	ldr	r3, [pc, #36]	; (af38 <waitTransferComplete()+0x50>)
    af12:	681a      	ldr	r2, [r3, #0]
    af14:	4b09      	ldr	r3, [pc, #36]	; (af3c <waitTransferComplete()+0x54>)
    af16:	421a      	tst	r2, r3
    af18:	d0eb      	beq.n	aef2 <waitTransferComplete()+0xa>
  m_errorCode = code;
    af1a:	4b09      	ldr	r3, [pc, #36]	; (af40 <waitTransferComplete()+0x58>)
    af1c:	221f      	movs	r2, #31
    af1e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    af20:	4b08      	ldr	r3, [pc, #32]	; (af44 <waitTransferComplete()+0x5c>)
    af22:	f240 227a 	movw	r2, #634	; 0x27a
    af26:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    af28:	2400      	movs	r4, #0
    af2a:	e7e2      	b.n	aef2 <waitTransferComplete()+0xa>
    af2c:	200053c2 	.word	0x200053c2
    af30:	0000aaa1 	.word	0x0000aaa1
    af34:	402c0000 	.word	0x402c0000
    af38:	20004c58 	.word	0x20004c58
    af3c:	117f0000 	.word	0x117f0000
    af40:	20003a40 	.word	0x20003a40
    af44:	20004bbc 	.word	0x20004bbc

0000af48 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    af48:	b538      	push	{r3, r4, r5, lr}
    af4a:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    af4c:	f7ff ffcc 	bl	aee8 <waitTransferComplete()>
    af50:	4604      	mov	r4, r0
    af52:	b1f0      	cbz	r0, af92 <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    af54:	4b1c      	ldr	r3, [pc, #112]	; (afc8 <SdioCard::writeData(unsigned char const*)+0x80>)
    af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af58:	f413 7f80 	tst.w	r3, #256	; 0x100
    af5c:	d108      	bne.n	af70 <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    af5e:	4b1a      	ldr	r3, [pc, #104]	; (afc8 <SdioCard::writeData(unsigned char const*)+0x80>)
    af60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    af62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    af66:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    af68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    af6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    af6e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    af70:	4a15      	ldr	r2, [pc, #84]	; (afc8 <SdioCard::writeData(unsigned char const*)+0x80>)
    af72:	6a93      	ldr	r3, [r2, #40]	; 0x28
    af74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    af78:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    af7a:	4814      	ldr	r0, [pc, #80]	; (afcc <SdioCard::writeData(unsigned char const*)+0x84>)
    af7c:	f7ff fe7e 	bl	ac7c <waitTimeout(bool (*)())>
    af80:	b148      	cbz	r0, af96 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
    af82:	4b13      	ldr	r3, [pc, #76]	; (afd0 <SdioCard::writeData(unsigned char const*)+0x88>)
    af84:	2221      	movs	r2, #33	; 0x21
    af86:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    af88:	4b12      	ldr	r3, [pc, #72]	; (afd4 <SdioCard::writeData(unsigned char const*)+0x8c>)
    af8a:	f240 32d9 	movw	r2, #985	; 0x3d9
    af8e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    af90:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
    af92:	4620      	mov	r0, r4
    af94:	bd38      	pop	{r3, r4, r5, pc}
    af96:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
    af9a:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    af9e:	480a      	ldr	r0, [pc, #40]	; (afc8 <SdioCard::writeData(unsigned char const*)+0x80>)
    afa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    afa2:	f413 6f80 	tst.w	r3, #1024	; 0x400
    afa6:	d0fb      	beq.n	afa0 <SdioCard::writeData(unsigned char const*)+0x58>
    afa8:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
    afac:	f853 2f04 	ldr.w	r2, [r3, #4]!
    afb0:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    afb2:	4563      	cmp	r3, ip
    afb4:	d1fa      	bne.n	afac <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    afb6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    afba:	458c      	cmp	ip, r1
    afbc:	d1f0      	bne.n	afa0 <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
    afbe:	4b06      	ldr	r3, [pc, #24]	; (afd8 <SdioCard::writeData(unsigned char const*)+0x90>)
    afc0:	2201      	movs	r2, #1
    afc2:	701a      	strb	r2, [r3, #0]
  return true;
    afc4:	e7e5      	b.n	af92 <SdioCard::writeData(unsigned char const*)+0x4a>
    afc6:	bf00      	nop
    afc8:	402c0000 	.word	0x402c0000
    afcc:	0000aa8d 	.word	0x0000aa8d
    afd0:	20003a40 	.word	0x20003a40
    afd4:	20004bbc 	.word	0x20004bbc
    afd8:	200053c2 	.word	0x200053c2

0000afdc <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afde:	4604      	mov	r4, r0
  m_busyFcn = fcn;
    afe0:	4b0a      	ldr	r3, [pc, #40]	; (b00c <yieldTimeout(bool (*)())+0x30>)
    afe2:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
    afe4:	f002 f986 	bl	d2f4 <micros>
    afe8:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    afea:	4f09      	ldr	r7, [pc, #36]	; (b010 <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
    afec:	e001      	b.n	aff2 <yieldTimeout(bool (*)())+0x16>
    yield();
    afee:	f004 f89f 	bl	f130 <yield>
  while (fcn()) {
    aff2:	47a0      	blx	r4
    aff4:	4606      	mov	r6, r0
    aff6:	b120      	cbz	r0, b002 <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aff8:	f002 f97c 	bl	d2f4 <micros>
    affc:	1b40      	subs	r0, r0, r5
    affe:	42b8      	cmp	r0, r7
    b000:	d9f5      	bls.n	afee <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
    b002:	4b02      	ldr	r3, [pc, #8]	; (b00c <yieldTimeout(bool (*)())+0x30>)
    b004:	2200      	movs	r2, #0
    b006:	601a      	str	r2, [r3, #0]
}
    b008:	4630      	mov	r0, r6
    b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b00c:	20004c54 	.word	0x20004c54
    b010:	000f4240 	.word	0x000f4240

0000b014 <waitDmaStatus()>:
static bool waitDmaStatus() {
    b014:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    b016:	4809      	ldr	r0, [pc, #36]	; (b03c <waitDmaStatus()+0x28>)
    b018:	f7ff ffe0 	bl	afdc <yieldTimeout(bool (*)())>
    b01c:	b960      	cbnz	r0, b038 <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b01e:	4b08      	ldr	r3, [pc, #32]	; (b040 <waitDmaStatus()+0x2c>)
    b020:	681b      	ldr	r3, [r3, #0]
    b022:	f013 0f02 	tst.w	r3, #2
    b026:	d008      	beq.n	b03a <waitDmaStatus()+0x26>
    b028:	4b05      	ldr	r3, [pc, #20]	; (b040 <waitDmaStatus()+0x2c>)
    b02a:	681a      	ldr	r2, [r3, #0]
    b02c:	4b05      	ldr	r3, [pc, #20]	; (b044 <waitDmaStatus()+0x30>)
    b02e:	421a      	tst	r2, r3
    b030:	bf0c      	ite	eq
    b032:	2001      	moveq	r0, #1
    b034:	2000      	movne	r0, #0
    b036:	e000      	b.n	b03a <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
    b038:	2000      	movs	r0, #0
}
    b03a:	bd08      	pop	{r3, pc}
    b03c:	0000aa6d 	.word	0x0000aa6d
    b040:	20004c58 	.word	0x20004c58
    b044:	117f0000 	.word	0x117f0000

0000b048 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    b048:	b538      	push	{r3, r4, r5, lr}
    b04a:	4605      	mov	r5, r0
    b04c:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
    b04e:	4819      	ldr	r0, [pc, #100]	; (b0b4 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    b050:	f7ff fe14 	bl	ac7c <waitTimeout(bool (*)())>
    b054:	b140      	cbz	r0, b068 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    b056:	4b18      	ldr	r3, [pc, #96]	; (b0b8 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b058:	220a      	movs	r2, #10
    b05a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b05c:	4b17      	ldr	r3, [pc, #92]	; (b0bc <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b05e:	f44f 72cc 	mov.w	r2, #408	; 0x198
    b062:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b064:	2000      	movs	r0, #0
}
    b066:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    b068:	4b15      	ldr	r3, [pc, #84]	; (b0c0 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    b06a:	2201      	movs	r2, #1
    b06c:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    b06e:	4b15      	ldr	r3, [pc, #84]	; (b0c4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    b070:	2200      	movs	r2, #0
    b072:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    b074:	4b14      	ldr	r3, [pc, #80]	; (b0c8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    b076:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b078:	4a14      	ldr	r2, [pc, #80]	; (b0cc <cardCMD6(unsigned long, unsigned char*)+0x84>)
    b07a:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b07c:	4a14      	ldr	r2, [pc, #80]	; (b0d0 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    b07e:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b080:	4629      	mov	r1, r5
    b082:	4814      	ldr	r0, [pc, #80]	; (b0d4 <cardCMD6(unsigned long, unsigned char*)+0x8c>)
    b084:	f7ff fe0c 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b088:	b938      	cbnz	r0, b09a <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
    b08a:	4b0b      	ldr	r3, [pc, #44]	; (b0b8 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b08c:	2204      	movs	r2, #4
    b08e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b090:	4b0a      	ldr	r3, [pc, #40]	; (b0bc <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b092:	f240 129f 	movw	r2, #415	; 0x19f
    b096:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
    b098:	e7e5      	b.n	b066 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    b09a:	f7ff ffbb 	bl	b014 <waitDmaStatus()>
    b09e:	2800      	cmp	r0, #0
    b0a0:	d1e1      	bne.n	b066 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    b0a2:	4b05      	ldr	r3, [pc, #20]	; (b0b8 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    b0a4:	2225      	movs	r2, #37	; 0x25
    b0a6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0a8:	4b04      	ldr	r3, [pc, #16]	; (b0bc <cardCMD6(unsigned long, unsigned char*)+0x74>)
    b0aa:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    b0ae:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b0b0:	e7d9      	b.n	b066 <cardCMD6(unsigned long, unsigned char*)+0x1e>
    b0b2:	bf00      	nop
    b0b4:	0000adb5 	.word	0x0000adb5
    b0b8:	20003a40 	.word	0x20003a40
    b0bc:	20004bbc 	.word	0x20004bbc
    b0c0:	200053c3 	.word	0x200053c3
    b0c4:	20004c58 	.word	0x20004c58
    b0c8:	402c0000 	.word	0x402c0000
    b0cc:	00010040 	.word	0x00010040
    b0d0:	117f0002 	.word	0x117f0002
    b0d4:	063a0011 	.word	0x063a0011

0000b0d8 <transferStop()>:
static bool transferStop() {
    b0d8:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b0da:	4a19      	ldr	r2, [pc, #100]	; (b140 <transferStop()+0x68>)
    b0dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b0de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b0e2:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b0e4:	2100      	movs	r1, #0
    b0e6:	4817      	ldr	r0, [pc, #92]	; (b144 <transferStop()+0x6c>)
    b0e8:	f7ff fdda 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b0ec:	4604      	mov	r4, r0
    b0ee:	b940      	cbnz	r0, b102 <transferStop()+0x2a>
  m_errorCode = code;
    b0f0:	4b15      	ldr	r3, [pc, #84]	; (b148 <transferStop()+0x70>)
    b0f2:	2209      	movs	r2, #9
    b0f4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b0f6:	4b15      	ldr	r3, [pc, #84]	; (b14c <transferStop()+0x74>)
    b0f8:	f240 223d 	movw	r2, #573	; 0x23d
    b0fc:	601a      	str	r2, [r3, #0]
}
    b0fe:	4620      	mov	r0, r4
    b100:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
    b102:	4813      	ldr	r0, [pc, #76]	; (b150 <transferStop()+0x78>)
    b104:	f7ff ff6a 	bl	afdc <yieldTimeout(bool (*)())>
    b108:	b140      	cbz	r0, b11c <transferStop()+0x44>
  m_errorCode = code;
    b10a:	4b0f      	ldr	r3, [pc, #60]	; (b148 <transferStop()+0x70>)
    b10c:	220a      	movs	r2, #10
    b10e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b110:	4b0e      	ldr	r3, [pc, #56]	; (b14c <transferStop()+0x74>)
    b112:	f44f 7210 	mov.w	r2, #576	; 0x240
    b116:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b118:	2400      	movs	r4, #0
    b11a:	e7f0      	b.n	b0fe <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    b11c:	4b08      	ldr	r3, [pc, #32]	; (b140 <transferStop()+0x68>)
    b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b120:	f013 0f02 	tst.w	r3, #2
    b124:	d0eb      	beq.n	b0fe <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    b126:	4b06      	ldr	r3, [pc, #24]	; (b140 <transferStop()+0x68>)
    b128:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b12a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b12c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b132:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    b136:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    b138:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    b13a:	629a      	str	r2, [r3, #40]	; 0x28
    b13c:	e7df      	b.n	b0fe <transferStop()+0x26>
    b13e:	bf00      	nop
    b140:	402c0000 	.word	0x402c0000
    b144:	0cdb0000 	.word	0x0cdb0000
    b148:	20003a40 	.word	0x20003a40
    b14c:	20004bbc 	.word	0x20004bbc
    b150:	0000aa59 	.word	0x0000aa59

0000b154 <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    b154:	b508      	push	{r3, lr}
  return transferStop();
    b156:	f7ff ffbf 	bl	b0d8 <transferStop()>
}
    b15a:	bd08      	pop	{r3, pc}

0000b15c <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
    b15c:	b510      	push	{r4, lr}
    b15e:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b160:	4813      	ldr	r0, [pc, #76]	; (b1b0 <SdioCard::writeStart(unsigned long)+0x54>)
    b162:	f7ff ff3b 	bl	afdc <yieldTimeout(bool (*)())>
    b166:	b140      	cbz	r0, b17a <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    b168:	4b12      	ldr	r3, [pc, #72]	; (b1b4 <SdioCard::writeStart(unsigned long)+0x58>)
    b16a:	220a      	movs	r2, #10
    b16c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b16e:	4b12      	ldr	r3, [pc, #72]	; (b1b8 <SdioCard::writeStart(unsigned long)+0x5c>)
    b170:	f240 422c 	movw	r2, #1068	; 0x42c
    b174:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b176:	2000      	movs	r0, #0
}
    b178:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b17a:	4b10      	ldr	r3, [pc, #64]	; (b1bc <SdioCard::writeStart(unsigned long)+0x60>)
    b17c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b17e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b182:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b184:	f44f 7200 	mov.w	r2, #512	; 0x200
    b188:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b18a:	4b0d      	ldr	r3, [pc, #52]	; (b1c0 <SdioCard::writeStart(unsigned long)+0x64>)
    b18c:	781b      	ldrb	r3, [r3, #0]
    b18e:	b903      	cbnz	r3, b192 <SdioCard::writeStart(unsigned long)+0x36>
    b190:	0264      	lsls	r4, r4, #9
    b192:	4621      	mov	r1, r4
    b194:	480b      	ldr	r0, [pc, #44]	; (b1c4 <SdioCard::writeStart(unsigned long)+0x68>)
    b196:	f7ff fd83 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b19a:	2800      	cmp	r0, #0
    b19c:	d1ec      	bne.n	b178 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    b19e:	4b05      	ldr	r3, [pc, #20]	; (b1b4 <SdioCard::writeStart(unsigned long)+0x58>)
    b1a0:	220e      	movs	r2, #14
    b1a2:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1a4:	4b04      	ldr	r3, [pc, #16]	; (b1b8 <SdioCard::writeStart(unsigned long)+0x5c>)
    b1a6:	f44f 6287 	mov.w	r2, #1080	; 0x438
    b1aa:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    b1ac:	e7e4      	b.n	b178 <SdioCard::writeStart(unsigned long)+0x1c>
    b1ae:	bf00      	nop
    b1b0:	0000adb5 	.word	0x0000adb5
    b1b4:	20003a40 	.word	0x20003a40
    b1b8:	20004bbc 	.word	0x20004bbc
    b1bc:	402c0000 	.word	0x402c0000
    b1c0:	200053c1 	.word	0x200053c1
    b1c4:	193a0020 	.word	0x193a0020

0000b1c8 <SdioCard::~SdioCard()>:
    b1c8:	b510      	push	{r4, lr}
    b1ca:	4604      	mov	r4, r0
    b1cc:	210c      	movs	r1, #12
    b1ce:	f002 f9ed 	bl	d5ac <operator delete(void*, unsigned int)>
    b1d2:	4620      	mov	r0, r4
    b1d4:	bd10      	pop	{r4, pc}
	...

0000b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1dc:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    b1de:	f012 0203 	ands.w	r2, r2, #3
    b1e2:	bf18      	it	ne
    b1e4:	2201      	movne	r2, #1
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	bf14      	ite	ne
    b1ea:	4615      	movne	r5, r2
    b1ec:	f042 0501 	orreq.w	r5, r2, #1
    b1f0:	b155      	cbz	r5, b208 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
    b1f2:	4b1c      	ldr	r3, [pc, #112]	; (b264 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    b1f4:	2225      	movs	r2, #37	; 0x25
    b1f6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b1f8:	4b1b      	ldr	r3, [pc, #108]	; (b268 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b1fa:	f240 12f5 	movw	r2, #501	; 0x1f5
    b1fe:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b200:	2500      	movs	r5, #0
}
    b202:	4628      	mov	r0, r5
    b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b208:	4607      	mov	r7, r0
    b20a:	460e      	mov	r6, r1
    b20c:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
    b20e:	4817      	ldr	r0, [pc, #92]	; (b26c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    b210:	f7ff fee4 	bl	afdc <yieldTimeout(bool (*)())>
    b214:	b138      	cbz	r0, b226 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
    b216:	4b13      	ldr	r3, [pc, #76]	; (b264 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
    b218:	220a      	movs	r2, #10
    b21a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b21c:	4b12      	ldr	r3, [pc, #72]	; (b268 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    b21e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b222:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b224:	e7ed      	b.n	b202 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
    b226:	4b12      	ldr	r3, [pc, #72]	; (b270 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    b228:	2201      	movs	r2, #1
    b22a:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
    b22c:	4b11      	ldr	r3, [pc, #68]	; (b274 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
    b22e:	2200      	movs	r2, #0
    b230:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
    b232:	4a11      	ldr	r2, [pc, #68]	; (b278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    b234:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b236:	4b11      	ldr	r3, [pc, #68]	; (b27c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
    b238:	ea03 4308 	and.w	r3, r3, r8, lsl #16
    b23c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b240:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b242:	4b0f      	ldr	r3, [pc, #60]	; (b280 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
    b244:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b246:	4b0f      	ldr	r3, [pc, #60]	; (b284 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	b903      	cbnz	r3, b24e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
    b24c:	0276      	lsls	r6, r6, #9
    b24e:	4631      	mov	r1, r6
    b250:	4638      	mov	r0, r7
    b252:	f7ff fd25 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b256:	4605      	mov	r5, r0
    b258:	2800      	cmp	r0, #0
    b25a:	d0d2      	beq.n	b202 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
    b25c:	f7ff feda 	bl	b014 <waitDmaStatus()>
    b260:	4605      	mov	r5, r0
    b262:	e7ce      	b.n	b202 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
    b264:	20003a40 	.word	0x20003a40
    b268:	20004bbc 	.word	0x20004bbc
    b26c:	0000adb5 	.word	0x0000adb5
    b270:	200053c3 	.word	0x200053c3
    b274:	20004c58 	.word	0x20004c58
    b278:	402c0000 	.word	0x402c0000
    b27c:	1fff0000 	.word	0x1fff0000
    b280:	117f0002 	.word	0x117f0002
    b284:	200053c1 	.word	0x200053c1

0000b288 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b28a:	4606      	mov	r6, r0
    b28c:	460c      	mov	r4, r1
    b28e:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b290:	7a02      	ldrb	r2, [r0, #8]
    b292:	f012 0f01 	tst.w	r2, #1
    b296:	d112      	bne.n	b2be <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b298:	b17b      	cbz	r3, b2ba <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    b29a:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
    b29c:	6833      	ldr	r3, [r6, #0]
    b29e:	691b      	ldr	r3, [r3, #16]
    b2a0:	462a      	mov	r2, r5
    b2a2:	4621      	mov	r1, r4
    b2a4:	4630      	mov	r0, r6
    b2a6:	4798      	blx	r3
    b2a8:	4603      	mov	r3, r0
    b2aa:	b120      	cbz	r0, b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b2ac:	3401      	adds	r4, #1
    b2ae:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b2b2:	42a7      	cmp	r7, r4
    b2b4:	d1f2      	bne.n	b29c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
    b2b6:	4618      	mov	r0, r3
    b2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b2ba:	2301      	movs	r3, #1
    b2bc:	e7fb      	b.n	b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
    b2be:	f015 0f03 	tst.w	r5, #3
    b2c2:	d010      	beq.n	b2e6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b2c4:	b1f3      	cbz	r3, b304 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
    b2c6:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
    b2c8:	6833      	ldr	r3, [r6, #0]
    b2ca:	691b      	ldr	r3, [r3, #16]
    b2cc:	462a      	mov	r2, r5
    b2ce:	4621      	mov	r1, r4
    b2d0:	4630      	mov	r0, r6
    b2d2:	4798      	blx	r3
    b2d4:	4603      	mov	r3, r0
    b2d6:	2800      	cmp	r0, #0
    b2d8:	d0ed      	beq.n	b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b2da:	3401      	adds	r4, #1
    b2dc:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b2e0:	42bc      	cmp	r4, r7
    b2e2:	d1f1      	bne.n	b2c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
    b2e4:	e7e7      	b.n	b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b2e6:	462a      	mov	r2, r5
    b2e8:	4807      	ldr	r0, [pc, #28]	; (b308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b2ea:	f7ff ff75 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b2ee:	4603      	mov	r3, r0
    b2f0:	2800      	cmp	r0, #0
    b2f2:	d1e0      	bne.n	b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
    b2f4:	4a05      	ldr	r2, [pc, #20]	; (b30c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b2f6:	210c      	movs	r1, #12
    b2f8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b2fa:	4a05      	ldr	r2, [pc, #20]	; (b310 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
    b2fc:	f240 3182 	movw	r1, #898	; 0x382
    b300:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    b302:	e7d8      	b.n	b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
    b304:	2301      	movs	r3, #1
    b306:	e7d6      	b.n	b2b6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    b308:	123a0037 	.word	0x123a0037
    b30c:	20003a40 	.word	0x20003a40
    b310:	20004bbc 	.word	0x20004bbc

0000b314 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    b314:	b570      	push	{r4, r5, r6, lr}
    b316:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b31a:	460e      	mov	r6, r1
    b31c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b31e:	7a03      	ldrb	r3, [r0, #8]
    b320:	f013 0f01 	tst.w	r3, #1
    b324:	d01c      	beq.n	b360 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    b326:	f012 0f03 	tst.w	r2, #3
    b32a:	d006      	beq.n	b33a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    b32c:	f44f 7200 	mov.w	r2, #512	; 0x200
    b330:	4629      	mov	r1, r5
    b332:	4668      	mov	r0, sp
    b334:	f002 f89c 	bl	d470 <memcpy>
      ptr = aligned;
    b338:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    b33a:	2301      	movs	r3, #1
    b33c:	462a      	mov	r2, r5
    b33e:	4631      	mov	r1, r6
    b340:	481d      	ldr	r0, [pc, #116]	; (b3b8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
    b342:	f7ff ff49 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b346:	4603      	mov	r3, r0
    b348:	b930      	cbnz	r0, b358 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    b34a:	4a1c      	ldr	r2, [pc, #112]	; (b3bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
    b34c:	210d      	movs	r1, #13
    b34e:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b350:	4a1b      	ldr	r2, [pc, #108]	; (b3c0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
    b352:	f240 31f2 	movw	r1, #1010	; 0x3f2
    b356:	6011      	str	r1, [r2, #0]
}
    b358:	4618      	mov	r0, r3
    b35a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b35e:	bd70      	pop	{r4, r5, r6, pc}
    b360:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b362:	f7ff fdc1 	bl	aee8 <waitTransferComplete()>
    b366:	4603      	mov	r3, r0
    b368:	2800      	cmp	r0, #0
    b36a:	d0f5      	beq.n	b358 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b36c:	7a63      	ldrb	r3, [r4, #9]
    b36e:	2b02      	cmp	r3, #2
    b370:	d01d      	beq.n	b3ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
    b372:	6823      	ldr	r3, [r4, #0]
    b374:	6a1b      	ldr	r3, [r3, #32]
    b376:	4620      	mov	r0, r4
    b378:	4798      	blx	r3
    b37a:	4603      	mov	r3, r0
    b37c:	2800      	cmp	r0, #0
    b37e:	d0eb      	beq.n	b358 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    b380:	6823      	ldr	r3, [r4, #0]
    b382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b384:	4631      	mov	r1, r6
    b386:	4620      	mov	r0, r4
    b388:	4798      	blx	r3
    b38a:	4603      	mov	r3, r0
    b38c:	2800      	cmp	r0, #0
    b38e:	d0e3      	beq.n	b358 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
    b390:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    b392:	2302      	movs	r3, #2
    b394:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
    b396:	6823      	ldr	r3, [r4, #0]
    b398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    b39a:	4629      	mov	r1, r5
    b39c:	4620      	mov	r0, r4
    b39e:	4798      	blx	r3
    b3a0:	4603      	mov	r3, r0
    b3a2:	2800      	cmp	r0, #0
    b3a4:	d0d8      	beq.n	b358 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    b3a6:	6862      	ldr	r2, [r4, #4]
    b3a8:	3201      	adds	r2, #1
    b3aa:	6062      	str	r2, [r4, #4]
    b3ac:	e7d4      	b.n	b358 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    b3ae:	6863      	ldr	r3, [r4, #4]
    b3b0:	42b3      	cmp	r3, r6
    b3b2:	d1de      	bne.n	b372 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    b3b4:	e7ef      	b.n	b396 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
    b3b6:	bf00      	nop
    b3b8:	183a0001 	.word	0x183a0001
    b3bc:	20003a40 	.word	0x20003a40
    b3c0:	20004bbc 	.word	0x20004bbc

0000b3c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3c6:	4606      	mov	r6, r0
    b3c8:	460c      	mov	r4, r1
    b3ca:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b3cc:	7a02      	ldrb	r2, [r0, #8]
    b3ce:	f012 0f01 	tst.w	r2, #1
    b3d2:	d112      	bne.n	b3fa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
    b3d4:	b17b      	cbz	r3, b3f6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    b3d6:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
    b3d8:	6833      	ldr	r3, [r6, #0]
    b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b3dc:	462a      	mov	r2, r5
    b3de:	4621      	mov	r1, r4
    b3e0:	4630      	mov	r0, r6
    b3e2:	4798      	blx	r3
    b3e4:	4603      	mov	r3, r0
    b3e6:	b120      	cbz	r0, b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
    b3e8:	3401      	adds	r4, #1
    b3ea:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b3ee:	42a7      	cmp	r7, r4
    b3f0:	d1f2      	bne.n	b3d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
    b3f2:	4618      	mov	r0, r3
    b3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b3f6:	2301      	movs	r3, #1
    b3f8:	e7fb      	b.n	b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
    b3fa:	f015 0f03 	tst.w	r5, #3
    b3fe:	d010      	beq.n	b422 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b400:	b1f3      	cbz	r3, b440 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
    b402:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
    b404:	6833      	ldr	r3, [r6, #0]
    b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b408:	462a      	mov	r2, r5
    b40a:	4621      	mov	r1, r4
    b40c:	4630      	mov	r0, r6
    b40e:	4798      	blx	r3
    b410:	4603      	mov	r3, r0
    b412:	2800      	cmp	r0, #0
    b414:	d0ed      	beq.n	b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b416:	3401      	adds	r4, #1
    b418:	f505 7500 	add.w	r5, r5, #512	; 0x200
    b41c:	42bc      	cmp	r4, r7
    b41e:	d1f1      	bne.n	b404 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    b420:	e7e7      	b.n	b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b422:	462a      	mov	r2, r5
    b424:	4807      	ldr	r0, [pc, #28]	; (b444 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b426:	f7ff fed7 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b42a:	4603      	mov	r3, r0
    b42c:	2800      	cmp	r0, #0
    b42e:	d1e0      	bne.n	b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
    b430:	4a05      	ldr	r2, [pc, #20]	; (b448 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b432:	210e      	movs	r1, #14
    b434:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b436:	4a05      	ldr	r2, [pc, #20]	; (b44c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
    b438:	f240 411e 	movw	r1, #1054	; 0x41e
    b43c:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    b43e:	e7d8      	b.n	b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
    b440:	2301      	movs	r3, #1
    b442:	e7d6      	b.n	b3f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    b444:	193a0027 	.word	0x193a0027
    b448:	20003a40 	.word	0x20003a40
    b44c:	20004bbc 	.word	0x20004bbc

0000b450 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b454:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
    b456:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b458:	2300      	movs	r3, #0
    b45a:	7243      	strb	r3, [r0, #9]
  m_initDone = false;
    b45c:	4aae      	ldr	r2, [pc, #696]	; (b718 <SdioCard::begin(SdioConfig)+0x2c8>)
    b45e:	7013      	strb	r3, [r2, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    b460:	4aae      	ldr	r2, [pc, #696]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b462:	7013      	strb	r3, [r2, #0]
  m_highCapacity = false;
    b464:	4aae      	ldr	r2, [pc, #696]	; (b720 <SdioCard::begin(SdioConfig)+0x2d0>)
    b466:	7013      	strb	r3, [r2, #0]
  m_version2 = false;
    b468:	4aae      	ldr	r2, [pc, #696]	; (b724 <SdioCard::begin(SdioConfig)+0x2d4>)
    b46a:	7013      	strb	r3, [r2, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b46c:	4bae      	ldr	r3, [pc, #696]	; (b728 <SdioCard::begin(SdioConfig)+0x2d8>)
    b46e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b476:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    b47a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b47e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
    b482:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b486:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b48a:	f042 0218 	orr.w	r2, r2, #24
    b48e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b492:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    b496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b49a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b49e:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
    b4a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b4a6:	f042 020c 	orr.w	r2, r2, #12
    b4aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b4ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b4b0:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b4b4:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b4b6:	69da      	ldr	r2, [r3, #28]
    b4b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b4bc:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b4c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b4c4:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    b4c6:	2005      	movs	r0, #5
    b4c8:	f7ff faa2 	bl	aa10 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    b4cc:	4b97      	ldr	r3, [pc, #604]	; (b72c <SdioCard::begin(SdioConfig)+0x2dc>)
    b4ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b4d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b4d4:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b4d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    b4d8:	4a95      	ldr	r2, [pc, #596]	; (b730 <SdioCard::begin(SdioConfig)+0x2e0>)
    b4da:	430a      	orrs	r2, r1
    b4dc:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b4de:	461a      	mov	r2, r3
    b4e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b4e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    b4e6:	d1fb      	bne.n	b4e0 <SdioCard::begin(SdioConfig)+0x90>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b4e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b4ec:	f7ff fae4 	bl	aab8 <setSdclk(unsigned long)>
    gpioMux(0);
    b4f0:	2000      	movs	r0, #0
    b4f2:	f7ff fa8d 	bl	aa10 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b4f6:	4b8f      	ldr	r3, [pc, #572]	; (b734 <SdioCard::begin(SdioConfig)+0x2e4>)
    b4f8:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b4fc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b500:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b504:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b508:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b50c:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b510:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b514:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b518:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
    b51c:	4a86      	ldr	r2, [pc, #536]	; (b738 <SdioCard::begin(SdioConfig)+0x2e8>)
    b51e:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b520:	4a86      	ldr	r2, [pc, #536]	; (b73c <SdioCard::begin(SdioConfig)+0x2ec>)
    b522:	4987      	ldr	r1, [pc, #540]	; (b740 <SdioCard::begin(SdioConfig)+0x2f0>)
    b524:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b528:	4a86      	ldr	r2, [pc, #536]	; (b744 <SdioCard::begin(SdioConfig)+0x2f4>)
    b52a:	2160      	movs	r1, #96	; 0x60
    b52c:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b530:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b534:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b538:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b53e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    b542:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b544:	461a      	mov	r2, r3
    b546:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b548:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    b54c:	d1fb      	bne.n	b546 <SdioCard::begin(SdioConfig)+0xf6>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b54e:	2100      	movs	r1, #0
    b550:	4608      	mov	r0, r1
    b552:	f7ff fba5 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b556:	4604      	mov	r4, r0
    b558:	b950      	cbnz	r0, b570 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    b55a:	4b70      	ldr	r3, [pc, #448]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b55c:	2201      	movs	r2, #1
    b55e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b560:	4b79      	ldr	r3, [pc, #484]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b562:	f240 228e 	movw	r2, #654	; 0x28e
    b566:	601a      	str	r2, [r3, #0]
}
    b568:	4620      	mov	r0, r4
    b56a:	b010      	add	sp, #64	; 0x40
    b56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b570:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b572:	4e76      	ldr	r6, [pc, #472]	; (b74c <SdioCard::begin(SdioConfig)+0x2fc>)
    b574:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
    b578:	4629      	mov	r1, r5
    b57a:	4630      	mov	r0, r6
    b57c:	f7ff fb90 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b580:	b980      	cbnz	r0, b5a4 <SdioCard::begin(SdioConfig)+0x154>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b582:	3c01      	subs	r4, #1
    b584:	d1f8      	bne.n	b578 <SdioCard::begin(SdioConfig)+0x128>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b586:	4b67      	ldr	r3, [pc, #412]	; (b724 <SdioCard::begin(SdioConfig)+0x2d4>)
    b588:	781b      	ldrb	r3, [r3, #0]
    b58a:	2b00      	cmp	r3, #0
    b58c:	4d70      	ldr	r5, [pc, #448]	; (b750 <SdioCard::begin(SdioConfig)+0x300>)
    b58e:	bf08      	it	eq
    b590:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
    b594:	f001 feae 	bl	d2f4 <micros>
    b598:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b59a:	4e6e      	ldr	r6, [pc, #440]	; (b754 <SdioCard::begin(SdioConfig)+0x304>)
    b59c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; b788 <SdioCard::begin(SdioConfig)+0x338>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b5a0:	4f6d      	ldr	r7, [pc, #436]	; (b758 <SdioCard::begin(SdioConfig)+0x308>)
    b5a2:	e020      	b.n	b5e6 <SdioCard::begin(SdioConfig)+0x196>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b5a4:	4b61      	ldr	r3, [pc, #388]	; (b72c <SdioCard::begin(SdioConfig)+0x2dc>)
    b5a6:	691b      	ldr	r3, [r3, #16]
    b5a8:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b5ac:	d008      	beq.n	b5c0 <SdioCard::begin(SdioConfig)+0x170>
  m_errorCode = code;
    b5ae:	4b5b      	ldr	r3, [pc, #364]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b5b0:	2206      	movs	r2, #6
    b5b2:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b5b4:	4b64      	ldr	r3, [pc, #400]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b5b6:	f44f 7225 	mov.w	r2, #660	; 0x294
    b5ba:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b5bc:	2400      	movs	r4, #0
    b5be:	e7d3      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
      m_version2 = true;
    b5c0:	4b58      	ldr	r3, [pc, #352]	; (b724 <SdioCard::begin(SdioConfig)+0x2d4>)
    b5c2:	2201      	movs	r2, #1
    b5c4:	701a      	strb	r2, [r3, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b5c6:	4d62      	ldr	r5, [pc, #392]	; (b750 <SdioCard::begin(SdioConfig)+0x300>)
    b5c8:	e7e4      	b.n	b594 <SdioCard::begin(SdioConfig)+0x144>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5ca:	4629      	mov	r1, r5
    b5cc:	4640      	mov	r0, r8
    b5ce:	f7ff fb67 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b5d2:	b170      	cbz	r0, b5f2 <SdioCard::begin(SdioConfig)+0x1a2>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b5d4:	f001 fe8e 	bl	d2f4 <micros>
    b5d8:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b5da:	42b8      	cmp	r0, r7
    b5dc:	d809      	bhi.n	b5f2 <SdioCard::begin(SdioConfig)+0x1a2>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b5de:	4b53      	ldr	r3, [pc, #332]	; (b72c <SdioCard::begin(SdioConfig)+0x2dc>)
    b5e0:	691b      	ldr	r3, [r3, #16]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	db0e      	blt.n	b604 <SdioCard::begin(SdioConfig)+0x1b4>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b5e6:	2100      	movs	r1, #0
    b5e8:	4630      	mov	r0, r6
    b5ea:	f7ff fb59 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b5ee:	2800      	cmp	r0, #0
    b5f0:	d1eb      	bne.n	b5ca <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    b5f2:	4b4a      	ldr	r3, [pc, #296]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b5f4:	2217      	movs	r2, #23
    b5f6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b5f8:	4b53      	ldr	r3, [pc, #332]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b5fa:	f240 229f 	movw	r2, #671	; 0x29f
    b5fe:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
    b600:	2400      	movs	r4, #0
    b602:	e7b1      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  m_ocr = SDHC_CMDRSP0;
    b604:	4b49      	ldr	r3, [pc, #292]	; (b72c <SdioCard::begin(SdioConfig)+0x2dc>)
    b606:	6919      	ldr	r1, [r3, #16]
    b608:	4a54      	ldr	r2, [pc, #336]	; (b75c <SdioCard::begin(SdioConfig)+0x30c>)
    b60a:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b60c:	691b      	ldr	r3, [r3, #16]
    b60e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b612:	d002      	beq.n	b61a <SdioCard::begin(SdioConfig)+0x1ca>
    m_highCapacity = true;
    b614:	4b42      	ldr	r3, [pc, #264]	; (b720 <SdioCard::begin(SdioConfig)+0x2d0>)
    b616:	2201      	movs	r2, #1
    b618:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b61a:	2100      	movs	r1, #0
    b61c:	4850      	ldr	r0, [pc, #320]	; (b760 <SdioCard::begin(SdioConfig)+0x310>)
    b61e:	f7ff fb3f 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b622:	4604      	mov	r4, r0
    b624:	b938      	cbnz	r0, b636 <SdioCard::begin(SdioConfig)+0x1e6>
  m_errorCode = code;
    b626:	4b3d      	ldr	r3, [pc, #244]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b628:	2202      	movs	r2, #2
    b62a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b62c:	4b46      	ldr	r3, [pc, #280]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b62e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    b632:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b634:	e798      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b636:	2100      	movs	r1, #0
    b638:	484a      	ldr	r0, [pc, #296]	; (b764 <SdioCard::begin(SdioConfig)+0x314>)
    b63a:	f7ff fb31 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b63e:	4604      	mov	r4, r0
    b640:	b938      	cbnz	r0, b652 <SdioCard::begin(SdioConfig)+0x202>
  m_errorCode = code;
    b642:	4b36      	ldr	r3, [pc, #216]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b644:	2203      	movs	r2, #3
    b646:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b648:	4b3f      	ldr	r3, [pc, #252]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b64a:	f240 22ab 	movw	r2, #683	; 0x2ab
    b64e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b650:	e78a      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b652:	4b36      	ldr	r3, [pc, #216]	; (b72c <SdioCard::begin(SdioConfig)+0x2dc>)
    b654:	691a      	ldr	r2, [r3, #16]
    b656:	4b44      	ldr	r3, [pc, #272]	; (b768 <SdioCard::begin(SdioConfig)+0x318>)
    b658:	4013      	ands	r3, r2
    b65a:	4a44      	ldr	r2, [pc, #272]	; (b76c <SdioCard::begin(SdioConfig)+0x31c>)
    b65c:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b65e:	4944      	ldr	r1, [pc, #272]	; (b770 <SdioCard::begin(SdioConfig)+0x320>)
    b660:	4844      	ldr	r0, [pc, #272]	; (b774 <SdioCard::begin(SdioConfig)+0x324>)
    b662:	f7ff fb5b 	bl	ad1c <readReg16(unsigned long, void*)>
    b666:	4604      	mov	r4, r0
    b668:	b938      	cbnz	r0, b67a <SdioCard::begin(SdioConfig)+0x22a>
  m_errorCode = code;
    b66a:	4b2c      	ldr	r3, [pc, #176]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b66c:	2207      	movs	r2, #7
    b66e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b670:	4b35      	ldr	r3, [pc, #212]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b672:	f44f 722c 	mov.w	r2, #688	; 0x2b0
    b676:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b678:	e776      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b67a:	493f      	ldr	r1, [pc, #252]	; (b778 <SdioCard::begin(SdioConfig)+0x328>)
    b67c:	483f      	ldr	r0, [pc, #252]	; (b77c <SdioCard::begin(SdioConfig)+0x32c>)
    b67e:	f7ff fb4d 	bl	ad1c <readReg16(unsigned long, void*)>
    b682:	4604      	mov	r4, r0
    b684:	b938      	cbnz	r0, b696 <SdioCard::begin(SdioConfig)+0x246>
  m_errorCode = code;
    b686:	4b25      	ldr	r3, [pc, #148]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b688:	2208      	movs	r2, #8
    b68a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b68c:	4b2e      	ldr	r3, [pc, #184]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b68e:	f240 22b3 	movw	r2, #691	; 0x2b3
    b692:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b694:	e768      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b696:	4b35      	ldr	r3, [pc, #212]	; (b76c <SdioCard::begin(SdioConfig)+0x31c>)
    b698:	6819      	ldr	r1, [r3, #0]
    b69a:	4839      	ldr	r0, [pc, #228]	; (b780 <SdioCard::begin(SdioConfig)+0x330>)
    b69c:	f7ff fb00 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b6a0:	4604      	mov	r4, r0
    b6a2:	b938      	cbnz	r0, b6b4 <SdioCard::begin(SdioConfig)+0x264>
  m_errorCode = code;
    b6a4:	4b1d      	ldr	r3, [pc, #116]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b6a6:	2205      	movs	r2, #5
    b6a8:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b6aa:	4b27      	ldr	r3, [pc, #156]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b6ac:	f240 22b6 	movw	r2, #694	; 0x2b6
    b6b0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b6b2:	e759      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b6b4:	4b2d      	ldr	r3, [pc, #180]	; (b76c <SdioCard::begin(SdioConfig)+0x31c>)
    b6b6:	6819      	ldr	r1, [r3, #0]
    b6b8:	4826      	ldr	r0, [pc, #152]	; (b754 <SdioCard::begin(SdioConfig)+0x304>)
    b6ba:	f7ff faf1 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b6be:	b940      	cbnz	r0, b6d2 <SdioCard::begin(SdioConfig)+0x282>
  m_errorCode = code;
    b6c0:	4b16      	ldr	r3, [pc, #88]	; (b71c <SdioCard::begin(SdioConfig)+0x2cc>)
    b6c2:	2214      	movs	r2, #20
    b6c4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b6c6:	4b20      	ldr	r3, [pc, #128]	; (b748 <SdioCard::begin(SdioConfig)+0x2f8>)
    b6c8:	f240 22ba 	movw	r2, #698	; 0x2ba
    b6cc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b6ce:	2400      	movs	r4, #0
    b6d0:	e74a      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b6d2:	2102      	movs	r1, #2
    b6d4:	482b      	ldr	r0, [pc, #172]	; (b784 <SdioCard::begin(SdioConfig)+0x334>)
    b6d6:	f7ff fae3 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    b6da:	4604      	mov	r4, r0
    b6dc:	2800      	cmp	r0, #0
    b6de:	d0ef      	beq.n	b6c0 <SdioCard::begin(SdioConfig)+0x270>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b6e0:	4b12      	ldr	r3, [pc, #72]	; (b72c <SdioCard::begin(SdioConfig)+0x2dc>)
    b6e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6e4:	f022 0206 	bic.w	r2, r2, #6
    b6e8:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b6ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6ec:	f042 0202 	orr.w	r2, r2, #2
    b6f0:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b6f2:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
    b6f6:	645a      	str	r2, [r3, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b6f8:	4669      	mov	r1, sp
    b6fa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    b6fe:	f7ff fca3 	bl	b048 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b702:	2800      	cmp	r0, #0
    b704:	d053      	beq.n	b7ae <SdioCard::begin(SdioConfig)+0x35e>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b706:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b70a:	f013 0f02 	tst.w	r3, #2
    b70e:	d13d      	bne.n	b78c <SdioCard::begin(SdioConfig)+0x33c>
    kHzSdClk = 25000;
    b710:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b714:	e04d      	b.n	b7b2 <SdioCard::begin(SdioConfig)+0x362>
    b716:	bf00      	nop
    b718:	200053bf 	.word	0x200053bf
    b71c:	20003a40 	.word	0x20003a40
    b720:	200053c1 	.word	0x200053c1
    b724:	200053c0 	.word	0x200053c0
    b728:	400d8000 	.word	0x400d8000
    b72c:	402c0000 	.word	0x402c0000
    b730:	01008000 	.word	0x01008000
    b734:	401f8000 	.word	0x401f8000
    b738:	117f000b 	.word	0x117f000b
    b73c:	20003c00 	.word	0x20003c00
    b740:	0000a9e5 	.word	0x0000a9e5
    b744:	e000e400 	.word	0xe000e400
    b748:	20004bbc 	.word	0x20004bbc
    b74c:	081a0000 	.word	0x081a0000
    b750:	40300000 	.word	0x40300000
    b754:	371a0000 	.word	0x371a0000
    b758:	000f4240 	.word	0x000f4240
    b75c:	20004be0 	.word	0x20004be0
    b760:	02090000 	.word	0x02090000
    b764:	031a0000 	.word	0x031a0000
    b768:	ffff0000 	.word	0xffff0000
    b76c:	20004be4 	.word	0x20004be4
    b770:	20004bd0 	.word	0x20004bd0
    b774:	09090000 	.word	0x09090000
    b778:	20004bc0 	.word	0x20004bc0
    b77c:	0a090000 	.word	0x0a090000
    b780:	071b0000 	.word	0x071b0000
    b784:	061a0000 	.word	0x061a0000
    b788:	29020000 	.word	0x29020000
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b78c:	4669      	mov	r1, sp
    b78e:	4819      	ldr	r0, [pc, #100]	; (b7f4 <SdioCard::begin(SdioConfig)+0x3a4>)
    b790:	f7ff fc5a 	bl	b048 <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    b794:	b358      	cbz	r0, b7ee <SdioCard::begin(SdioConfig)+0x39e>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    b796:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b79a:	f003 030f 	and.w	r3, r3, #15
    kHzSdClk = 25000;
    b79e:	f24c 3550 	movw	r5, #50000	; 0xc350
    b7a2:	f246 12a8 	movw	r2, #25000	; 0x61a8
    b7a6:	2b01      	cmp	r3, #1
    b7a8:	bf18      	it	ne
    b7aa:	4615      	movne	r5, r2
    b7ac:	e001      	b.n	b7b2 <SdioCard::begin(SdioConfig)+0x362>
    b7ae:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
    b7b2:	2005      	movs	r0, #5
    b7b4:	f7ff f92c 	bl	aa10 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    b7b8:	4628      	mov	r0, r5
    b7ba:	f7ff f97d 	bl	aab8 <setSdclk(unsigned long)>
    gpioMux(0);
    b7be:	2000      	movs	r0, #0
    b7c0:	f7ff f926 	bl	aa10 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b7c4:	4b0c      	ldr	r3, [pc, #48]	; (b7f8 <SdioCard::begin(SdioConfig)+0x3a8>)
    b7c6:	f247 02b8 	movw	r2, #28856	; 0x70b8
    b7ca:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b7ce:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b7d2:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b7d6:	f241 01b8 	movw	r1, #4280	; 0x10b8
    b7da:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b7de:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b7e2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
    b7e6:	4b05      	ldr	r3, [pc, #20]	; (b7fc <SdioCard::begin(SdioConfig)+0x3ac>)
    b7e8:	2201      	movs	r2, #1
    b7ea:	701a      	strb	r2, [r3, #0]
  return true;
    b7ec:	e6bc      	b.n	b568 <SdioCard::begin(SdioConfig)+0x118>
    kHzSdClk = 25000;
    b7ee:	f246 15a8 	movw	r5, #25000	; 0x61a8
    b7f2:	e7de      	b.n	b7b2 <SdioCard::begin(SdioConfig)+0x362>
    b7f4:	80fffff1 	.word	0x80fffff1
    b7f8:	401f8000 	.word	0x401f8000
    b7fc:	200053bf 	.word	0x200053bf

0000b800 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    b800:	b538      	push	{r3, r4, r5, lr}
    b802:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b804:	4b2b      	ldr	r3, [pc, #172]	; (b8b4 <SdioCard::readData(unsigned char*)+0xb4>)
    b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b808:	f413 7f00 	tst.w	r3, #512	; 0x200
    b80c:	d10e      	bne.n	b82c <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b80e:	4b29      	ldr	r3, [pc, #164]	; (b8b4 <SdioCard::readData(unsigned char*)+0xb4>)
    b810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b812:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b816:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b818:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b81a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b81c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b820:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b824:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b828:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b82a:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    b82c:	4822      	ldr	r0, [pc, #136]	; (b8b8 <SdioCard::readData(unsigned char*)+0xb8>)
    b82e:	f7ff fa25 	bl	ac7c <waitTimeout(bool (*)())>
    b832:	4605      	mov	r5, r0
    b834:	b148      	cbz	r0, b84a <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
    b836:	4b21      	ldr	r3, [pc, #132]	; (b8bc <SdioCard::readData(unsigned char*)+0xbc>)
    b838:	221a      	movs	r2, #26
    b83a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b83c:	4b20      	ldr	r3, [pc, #128]	; (b8c0 <SdioCard::readData(unsigned char*)+0xc0>)
    b83e:	f240 3237 	movw	r2, #823	; 0x337
    b842:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b844:	2500      	movs	r5, #0
}
    b846:	4628      	mov	r0, r5
    b848:	bd38      	pop	{r3, r4, r5, pc}
    b84a:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
    b84e:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b852:	4818      	ldr	r0, [pc, #96]	; (b8b4 <SdioCard::readData(unsigned char*)+0xb4>)
    b854:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b856:	f413 6f00 	tst.w	r3, #2048	; 0x800
    b85a:	d0fb      	beq.n	b854 <SdioCard::readData(unsigned char*)+0x54>
    b85c:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b860:	6a02      	ldr	r2, [r0, #32]
    b862:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b866:	4563      	cmp	r3, ip
    b868:	d1fa      	bne.n	b860 <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b86a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b86e:	458c      	cmp	ip, r1
    b870:	d1f0      	bne.n	b854 <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
    b872:	4814      	ldr	r0, [pc, #80]	; (b8c4 <SdioCard::readData(unsigned char*)+0xc4>)
    b874:	f7ff fa02 	bl	ac7c <waitTimeout(bool (*)())>
    b878:	4601      	mov	r1, r0
    b87a:	b138      	cbz	r0, b88c <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
    b87c:	4b0f      	ldr	r3, [pc, #60]	; (b8bc <SdioCard::readData(unsigned char*)+0xbc>)
    b87e:	221d      	movs	r2, #29
    b880:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b882:	4b0f      	ldr	r3, [pc, #60]	; (b8c0 <SdioCard::readData(unsigned char*)+0xc0>)
    b884:	f240 3242 	movw	r2, #834	; 0x342
    b888:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b88a:	e7dc      	b.n	b846 <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
    b88c:	4a09      	ldr	r2, [pc, #36]	; (b8b4 <SdioCard::readData(unsigned char*)+0xb4>)
    b88e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    b890:	4b0d      	ldr	r3, [pc, #52]	; (b8c8 <SdioCard::readData(unsigned char*)+0xc8>)
    b892:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b894:	6818      	ldr	r0, [r3, #0]
    b896:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b898:	681b      	ldr	r3, [r3, #0]
    b89a:	f013 0f02 	tst.w	r3, #2
    b89e:	d007      	beq.n	b8b0 <SdioCard::readData(unsigned char*)+0xb0>
    b8a0:	4b09      	ldr	r3, [pc, #36]	; (b8c8 <SdioCard::readData(unsigned char*)+0xc8>)
    b8a2:	681a      	ldr	r2, [r3, #0]
    b8a4:	4b09      	ldr	r3, [pc, #36]	; (b8cc <SdioCard::readData(unsigned char*)+0xcc>)
    b8a6:	421a      	tst	r2, r3
    b8a8:	bf0c      	ite	eq
    b8aa:	2501      	moveq	r5, #1
    b8ac:	2500      	movne	r5, #0
    b8ae:	e7ca      	b.n	b846 <SdioCard::readData(unsigned char*)+0x46>
    b8b0:	460d      	mov	r5, r1
    b8b2:	e7c8      	b.n	b846 <SdioCard::readData(unsigned char*)+0x46>
    b8b4:	402c0000 	.word	0x402c0000
    b8b8:	0000aa79 	.word	0x0000aa79
    b8bc:	20003a40 	.word	0x20003a40
    b8c0:	20004bbc 	.word	0x20004bbc
    b8c4:	0000aaa1 	.word	0x0000aaa1
    b8c8:	20004c58 	.word	0x20004c58
    b8cc:	117f0000 	.word	0x117f0000

0000b8d0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b8d0:	b510      	push	{r4, lr}
    b8d2:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    b8d4:	4813      	ldr	r0, [pc, #76]	; (b924 <SdioCard::readStart(unsigned long)+0x54>)
    b8d6:	f7ff fb81 	bl	afdc <yieldTimeout(bool (*)())>
    b8da:	b140      	cbz	r0, b8ee <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    b8dc:	4b12      	ldr	r3, [pc, #72]	; (b928 <SdioCard::readStart(unsigned long)+0x58>)
    b8de:	220a      	movs	r2, #10
    b8e0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b8e2:	4b12      	ldr	r3, [pc, #72]	; (b92c <SdioCard::readStart(unsigned long)+0x5c>)
    b8e4:	f240 3292 	movw	r2, #914	; 0x392
    b8e8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b8ea:	2000      	movs	r0, #0
}
    b8ec:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b8ee:	4b10      	ldr	r3, [pc, #64]	; (b930 <SdioCard::readStart(unsigned long)+0x60>)
    b8f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b8f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b8f6:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b8f8:	f44f 7200 	mov.w	r2, #512	; 0x200
    b8fc:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b8fe:	4b0d      	ldr	r3, [pc, #52]	; (b934 <SdioCard::readStart(unsigned long)+0x64>)
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	b903      	cbnz	r3, b906 <SdioCard::readStart(unsigned long)+0x36>
    b904:	0264      	lsls	r4, r4, #9
    b906:	4621      	mov	r1, r4
    b908:	480b      	ldr	r0, [pc, #44]	; (b938 <SdioCard::readStart(unsigned long)+0x68>)
    b90a:	f7ff f9c9 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    b90e:	2800      	cmp	r0, #0
    b910:	d1ec      	bne.n	b8ec <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    b912:	4b05      	ldr	r3, [pc, #20]	; (b928 <SdioCard::readStart(unsigned long)+0x58>)
    b914:	220c      	movs	r2, #12
    b916:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b918:	4b04      	ldr	r3, [pc, #16]	; (b92c <SdioCard::readStart(unsigned long)+0x5c>)
    b91a:	f240 329e 	movw	r2, #926	; 0x39e
    b91e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    b920:	e7e4      	b.n	b8ec <SdioCard::readStart(unsigned long)+0x1c>
    b922:	bf00      	nop
    b924:	0000adb5 	.word	0x0000adb5
    b928:	20003a40 	.word	0x20003a40
    b92c:	20004bbc 	.word	0x20004bbc
    b930:	402c0000 	.word	0x402c0000
    b934:	200053c1 	.word	0x200053c1
    b938:	123a0030 	.word	0x123a0030

0000b93c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b93c:	b570      	push	{r4, r5, r6, lr}
    b93e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b942:	460e      	mov	r6, r1
    b944:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b946:	7a03      	ldrb	r3, [r0, #8]
    b948:	f013 0f01 	tst.w	r3, #1
    b94c:	d013      	beq.n	b976 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b94e:	f012 0f03 	tst.w	r2, #3
    b952:	d135      	bne.n	b9c0 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b954:	2301      	movs	r3, #1
    b956:	4822      	ldr	r0, [pc, #136]	; (b9e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b958:	f7ff fc3e 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b95c:	2800      	cmp	r0, #0
    b95e:	d13c      	bne.n	b9da <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
    b960:	4b20      	ldr	r3, [pc, #128]	; (b9e4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
    b962:	220b      	movs	r2, #11
    b964:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b966:	4b20      	ldr	r3, [pc, #128]	; (b9e8 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
    b968:	f240 3255 	movw	r2, #853	; 0x355
    b96c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
    b96e:	2000      	movs	r0, #0
}
    b970:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b974:	bd70      	pop	{r4, r5, r6, pc}
    b976:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
    b978:	f7ff fab6 	bl	aee8 <waitTransferComplete()>
    b97c:	2800      	cmp	r0, #0
    b97e:	d0f7      	beq.n	b970 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b980:	7a63      	ldrb	r3, [r4, #9]
    b982:	2b01      	cmp	r3, #1
    b984:	d018      	beq.n	b9b8 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
    b986:	6823      	ldr	r3, [r4, #0]
    b988:	6a1b      	ldr	r3, [r3, #32]
    b98a:	4620      	mov	r0, r4
    b98c:	4798      	blx	r3
    b98e:	2800      	cmp	r0, #0
    b990:	d0ee      	beq.n	b970 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
    b992:	4631      	mov	r1, r6
    b994:	4620      	mov	r0, r4
    b996:	f7ff ff9b 	bl	b8d0 <SdioCard::readStart(unsigned long)>
    b99a:	2800      	cmp	r0, #0
    b99c:	d0e8      	beq.n	b970 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
    b99e:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    b9a0:	2301      	movs	r3, #1
    b9a2:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b9a4:	4629      	mov	r1, r5
    b9a6:	4620      	mov	r0, r4
    b9a8:	f7ff ff2a 	bl	b800 <SdioCard::readData(unsigned char*)>
    b9ac:	2800      	cmp	r0, #0
    b9ae:	d0df      	beq.n	b970 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
    b9b0:	6863      	ldr	r3, [r4, #4]
    b9b2:	3301      	adds	r3, #1
    b9b4:	6063      	str	r3, [r4, #4]
    b9b6:	e7db      	b.n	b970 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b9b8:	6863      	ldr	r3, [r4, #4]
    b9ba:	42b3      	cmp	r3, r6
    b9bc:	d1e3      	bne.n	b986 <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
    b9be:	e7f1      	b.n	b9a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b9c0:	2301      	movs	r3, #1
    b9c2:	466a      	mov	r2, sp
    b9c4:	4806      	ldr	r0, [pc, #24]	; (b9e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    b9c6:	f7ff fc07 	bl	b1d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b9ca:	2800      	cmp	r0, #0
    b9cc:	d0c8      	beq.n	b960 <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
    b9ce:	f44f 7200 	mov.w	r2, #512	; 0x200
    b9d2:	4669      	mov	r1, sp
    b9d4:	4628      	mov	r0, r5
    b9d6:	f001 fd4b 	bl	d470 <memcpy>
  return true;
    b9da:	2001      	movs	r0, #1
    b9dc:	e7c8      	b.n	b970 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    b9de:	bf00      	nop
    b9e0:	113a0011 	.word	0x113a0011
    b9e4:	20003a40 	.word	0x20003a40
    b9e8:	20004bbc 	.word	0x20004bbc

0000b9ec <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b9ec:	b510      	push	{r4, lr}
    b9ee:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
    b9f0:	2100      	movs	r1, #0
    b9f2:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b9f4:	4a10      	ldr	r2, [pc, #64]	; (ba38 <SdioCard::stopTransmission(bool)+0x4c>)
    b9f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b9f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b9fc:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b9fe:	480f      	ldr	r0, [pc, #60]	; (ba3c <SdioCard::stopTransmission(bool)+0x50>)
    ba00:	f7ff f94e 	bl	aca0 <cardCommand(unsigned long, unsigned long)>
    ba04:	b938      	cbnz	r0, ba16 <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
    ba06:	4b0e      	ldr	r3, [pc, #56]	; (ba40 <SdioCard::stopTransmission(bool)+0x54>)
    ba08:	2209      	movs	r2, #9
    ba0a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ba0c:	4b0d      	ldr	r3, [pc, #52]	; (ba44 <SdioCard::stopTransmission(bool)+0x58>)
    ba0e:	f44f 726d 	mov.w	r2, #948	; 0x3b4
    ba12:	601a      	str	r2, [r3, #0]
}
    ba14:	bd10      	pop	{r4, pc}
  if (blocking) {
    ba16:	2c00      	cmp	r4, #0
    ba18:	d0fc      	beq.n	ba14 <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
    ba1a:	480b      	ldr	r0, [pc, #44]	; (ba48 <SdioCard::stopTransmission(bool)+0x5c>)
    ba1c:	f7ff fade 	bl	afdc <yieldTimeout(bool (*)())>
    ba20:	b140      	cbz	r0, ba34 <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
    ba22:	4b07      	ldr	r3, [pc, #28]	; (ba40 <SdioCard::stopTransmission(bool)+0x54>)
    ba24:	220a      	movs	r2, #10
    ba26:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    ba28:	4b06      	ldr	r3, [pc, #24]	; (ba44 <SdioCard::stopTransmission(bool)+0x58>)
    ba2a:	f44f 726e 	mov.w	r2, #952	; 0x3b8
    ba2e:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    ba30:	2000      	movs	r0, #0
    ba32:	e7ef      	b.n	ba14 <SdioCard::stopTransmission(bool)+0x28>
  return true;
    ba34:	4620      	mov	r0, r4
    ba36:	e7ed      	b.n	ba14 <SdioCard::stopTransmission(bool)+0x28>
    ba38:	402c0000 	.word	0x402c0000
    ba3c:	0cdb0000 	.word	0x0cdb0000
    ba40:	20003a40 	.word	0x20003a40
    ba44:	20004bbc 	.word	0x20004bbc
    ba48:	0000aa59 	.word	0x0000aa59

0000ba4c <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    ba4c:	b510      	push	{r4, lr}
    ba4e:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
    ba50:	f7ff fa4a 	bl	aee8 <waitTransferComplete()>
    ba54:	b108      	cbz	r0, ba5a <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
    ba56:	7a63      	ldrb	r3, [r4, #9]
    ba58:	b903      	cbnz	r3, ba5c <SdioCard::syncDevice()+0x10>
}
    ba5a:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
    ba5c:	2101      	movs	r1, #1
    ba5e:	4620      	mov	r0, r4
    ba60:	f7ff ffc4 	bl	b9ec <SdioCard::stopTransmission(bool)>
    ba64:	e7f9      	b.n	ba5a <SdioCard::syncDevice()+0xe>

0000ba66 <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
    ba66:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
    ba68:	2101      	movs	r1, #1
    ba6a:	f001 fcbb 	bl	d3e4 <pinMode>
}
    ba6e:	bd08      	pop	{r3, pc}

0000ba70 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
    ba70:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
    ba72:	f001 fc7f 	bl	d374 <digitalWrite>
}
    ba76:	bd08      	pop	{r3, pc}

0000ba78 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    ba78:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
    ba7a:	6803      	ldr	r3, [r0, #0]
    ba7c:	6842      	ldr	r2, [r0, #4]
    ba7e:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
    ba80:	7cd9      	ldrb	r1, [r3, #19]
    ba82:	2900      	cmp	r1, #0
    ba84:	d042      	beq.n	bb0c <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
    ba86:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ba88:	7cd9      	ldrb	r1, [r3, #19]
    ba8a:	f011 0f01 	tst.w	r1, #1
    ba8e:	d008      	beq.n	baa2 <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ba90:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ba94:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
    ba98:	695d      	ldr	r5, [r3, #20]
    ba9a:	4029      	ands	r1, r5
    ba9c:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    ba9e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    baa2:	7cd9      	ldrb	r1, [r3, #19]
    baa4:	f011 0f02 	tst.w	r1, #2
    baa8:	d008      	beq.n	babc <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    baaa:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    baae:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
    bab2:	699d      	ldr	r5, [r3, #24]
    bab4:	4029      	ands	r1, r5
    bab6:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    bab8:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    babc:	7cd9      	ldrb	r1, [r3, #19]
    babe:	f011 0f04 	tst.w	r1, #4
    bac2:	d008      	beq.n	bad6 <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    bac4:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bac8:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    bacc:	69dd      	ldr	r5, [r3, #28]
    bace:	4029      	ands	r1, r5
    bad0:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    bad2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    bad6:	7cd9      	ldrb	r1, [r3, #19]
    bad8:	f011 0f08 	tst.w	r1, #8
    badc:	d008      	beq.n	baf0 <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    bade:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bae2:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
    bae6:	6a1d      	ldr	r5, [r3, #32]
    bae8:	4029      	ands	r1, r5
    baea:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    baec:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    baf0:	7cd9      	ldrb	r1, [r3, #19]
    baf2:	f011 0f10 	tst.w	r1, #16
    baf6:	d008      	beq.n	bb0a <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    baf8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bafc:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    bb00:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bb02:	4029      	ands	r1, r5
    bb04:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    bb06:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
    bb0a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    bb0c:	6899      	ldr	r1, [r3, #8]
    bb0e:	428a      	cmp	r2, r1
    bb10:	d025      	beq.n	bb5e <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
    bb12:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
    bb14:	4920      	ldr	r1, [pc, #128]	; (bb98 <SdSpiArduinoDriver::activate()+0x120>)
    bb16:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    bb18:	f3c1 1501 	ubfx	r5, r1, #4, #2
    bb1c:	481f      	ldr	r0, [pc, #124]	; (bb9c <SdSpiArduinoDriver::activate()+0x124>)
    bb1e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    bb22:	f3c1 6182 	ubfx	r1, r1, #26, #3
    bb26:	3101      	adds	r1, #1
    bb28:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
    bb2c:	b37a      	cbz	r2, bb8e <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
    bb2e:	4282      	cmp	r2, r0
    bb30:	d82b      	bhi.n	bb8a <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
    bb32:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
    bb36:	fbb0 f0f1 	udiv	r0, r0, r1
    bb3a:	4282      	cmp	r2, r0
    bb3c:	d31f      	bcc.n	bb7e <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
    bb3e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    bb42:	d31e      	bcc.n	bb82 <SdSpiArduinoDriver::activate()+0x10a>
    bb44:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
    bb48:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bb4a:	0850      	lsrs	r0, r2, #1
    bb4c:	0201      	lsls	r1, r0, #8
    bb4e:	b289      	uxth	r1, r1
    bb50:	0400      	lsls	r0, r0, #16
    bb52:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
    bb56:	4301      	orrs	r1, r0
    bb58:	b2d2      	uxtb	r2, r2
    bb5a:	430a      	orrs	r2, r1
    bb5c:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb5e:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
    bb60:	2100      	movs	r1, #0
    bb62:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb64:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bb66:	2103      	movs	r1, #3
    bb68:	6251      	str	r1, [r2, #36]	; 0x24
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb6a:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
    bb6c:	68d9      	ldr	r1, [r3, #12]
    bb6e:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb70:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
    bb72:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bb74:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
    bb76:	2201      	movs	r2, #1
    bb78:	611a      	str	r2, [r3, #16]
}
    bb7a:	bc30      	pop	{r4, r5}
    bb7c:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
    bb7e:	4608      	mov	r0, r1
    bb80:	e007      	b.n	bb92 <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
    bb82:	2902      	cmp	r1, #2
    bb84:	d8e0      	bhi.n	bb48 <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
    bb86:	2200      	movs	r2, #0
    bb88:	e7df      	b.n	bb4a <SdSpiArduinoDriver::activate()+0xd2>
    bb8a:	2200      	movs	r2, #0
    bb8c:	e7dd      	b.n	bb4a <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
    bb8e:	428d      	cmp	r5, r1
    bb90:	d3db      	bcc.n	bb4a <SdSpiArduinoDriver::activate()+0xd2>
    bb92:	1c41      	adds	r1, r0, #1
    bb94:	e7d3      	b.n	bb3e <SdSpiArduinoDriver::activate()+0xc6>
    bb96:	bf00      	nop
    bb98:	400fc000 	.word	0x400fc000
    bb9c:	2000262c 	.word	0x2000262c

0000bba0 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
    bba0:	b500      	push	{lr}
    bba2:	b085      	sub	sp, #20
    bba4:	4684      	mov	ip, r0
    bba6:	a804      	add	r0, sp, #16
    bba8:	e900 000e 	stmdb	r0, {r1, r2, r3}
    bbac:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
    bbae:	b133      	cbz	r3, bbbe <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
    bbb0:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
    bbb4:	f7f9 f836 	bl	4c24 <SPIClass::begin()>
}
    bbb8:	b005      	add	sp, #20
    bbba:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
    bbbe:	4801      	ldr	r0, [pc, #4]	; (bbc4 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
    bbc0:	e7f6      	b.n	bbb0 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
    bbc2:	bf00      	nop
    bbc4:	20004634 	.word	0x20004634

0000bbc8 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    bbc8:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    bbca:	7cda      	ldrb	r2, [r3, #19]
    bbcc:	b35a      	cbz	r2, bc26 <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    bbce:	f012 0f01 	tst.w	r2, #1
    bbd2:	d004      	beq.n	bbde <SdSpiArduinoDriver::deactivate()+0x16>
    bbd4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    bbd6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bbda:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    bbde:	7cda      	ldrb	r2, [r3, #19]
    bbe0:	f012 0f02 	tst.w	r2, #2
    bbe4:	d004      	beq.n	bbf0 <SdSpiArduinoDriver::deactivate()+0x28>
    bbe6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    bbe8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bbec:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bbf0:	7cda      	ldrb	r2, [r3, #19]
    bbf2:	f012 0f04 	tst.w	r2, #4
    bbf6:	d004      	beq.n	bc02 <SdSpiArduinoDriver::deactivate()+0x3a>
    bbf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    bbfa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bbfe:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bc02:	7cda      	ldrb	r2, [r3, #19]
    bc04:	f012 0f08 	tst.w	r2, #8
    bc08:	d004      	beq.n	bc14 <SdSpiArduinoDriver::deactivate()+0x4c>
    bc0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    bc0c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc10:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bc14:	7cda      	ldrb	r2, [r3, #19]
    bc16:	f012 0f10 	tst.w	r2, #16
    bc1a:	d004      	beq.n	bc26 <SdSpiArduinoDriver::deactivate()+0x5e>
    bc1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bc1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bc22:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bc26:	4770      	bx	lr

0000bc28 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
    bc28:	b508      	push	{r3, lr}
  m_spi->end();
    bc2a:	6800      	ldr	r0, [r0, #0]
    bc2c:	f7f9 f971 	bl	4f12 <SPIClass::end()>
}
    bc30:	bd08      	pop	{r3, pc}

0000bc32 <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    bc32:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc34:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bc36:	21ff      	movs	r1, #255	; 0xff
    bc38:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc3a:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bc3c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bc3e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bc42:	d0fb      	beq.n	bc3c <SdSpiArduinoDriver::receive()+0xa>
    bc44:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
    bc46:	b2c0      	uxtb	r0, r0
    bc48:	4770      	bx	lr

0000bc4a <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bc4a:	b570      	push	{r4, r5, r6, lr}
    bc4c:	4605      	mov	r5, r0
    bc4e:	460c      	mov	r4, r1
    bc50:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bc52:	21ff      	movs	r1, #255	; 0xff
    bc54:	4620      	mov	r0, r4
    bc56:	f005 fcd5 	bl	11604 <memset>
		transfer(buf, buf, count);
    bc5a:	4633      	mov	r3, r6
    bc5c:	4622      	mov	r2, r4
    bc5e:	4621      	mov	r1, r4
    bc60:	6828      	ldr	r0, [r5, #0]
    bc62:	f7f9 f917 	bl	4e94 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bc66:	2000      	movs	r0, #0
    bc68:	bd70      	pop	{r4, r5, r6, pc}

0000bc6a <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    bc6a:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc6c:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bc6e:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc70:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bc72:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bc74:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bc78:	d0fb      	beq.n	bc72 <SdSpiArduinoDriver::send(unsigned char)+0x8>
    bc7a:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
    bc7c:	4770      	bx	lr

0000bc7e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bc7e:	b530      	push	{r4, r5, lr}
    bc80:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bc84:	4604      	mov	r4, r0
    bc86:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bc88:	1e53      	subs	r3, r2, #1
    bc8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bc8e:	d313      	bcc.n	bcb8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bc90:	b17a      	cbz	r2, bcb2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
    bc92:	3901      	subs	r1, #1
    bc94:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
    bc98:	6823      	ldr	r3, [r4, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc9a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bc9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    bca0:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bca2:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bca4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bca6:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bcaa:	d0fb      	beq.n	bca4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
    bcac:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
    bcae:	4561      	cmp	r1, ip
    bcb0:	d1f2      	bne.n	bc98 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
    bcb2:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bcb6:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    bcb8:	4668      	mov	r0, sp
    bcba:	f001 fbd9 	bl	d470 <memcpy>
		transfer(buf, buf, count);
    bcbe:	462b      	mov	r3, r5
    bcc0:	466a      	mov	r2, sp
    bcc2:	4669      	mov	r1, sp
    bcc4:	6820      	ldr	r0, [r4, #0]
    bcc6:	f7f9 f8e5 	bl	4e94 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
    bcca:	e7f2      	b.n	bcb2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

0000bccc <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    bccc:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    bcce:	7803      	ldrb	r3, [r0, #0]
    bcd0:	f013 0f01 	tst.w	r3, #1
    bcd4:	d01c      	beq.n	bd10 <FsCache::sync()+0x44>
    bcd6:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    bcd8:	6840      	ldr	r0, [r0, #4]
    bcda:	f104 0610 	add.w	r6, r4, #16
    bcde:	6803      	ldr	r3, [r0, #0]
    bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bce2:	4632      	mov	r2, r6
    bce4:	68e1      	ldr	r1, [r4, #12]
    bce6:	4798      	blx	r3
    bce8:	4605      	mov	r5, r0
    bcea:	b190      	cbz	r0, bd12 <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    bcec:	7823      	ldrb	r3, [r4, #0]
    bcee:	f013 0f02 	tst.w	r3, #2
    bcf2:	d008      	beq.n	bd06 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bcf4:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    bcf6:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bcf8:	6803      	ldr	r3, [r0, #0]
    bcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bcfc:	4632      	mov	r2, r6
    bcfe:	68e6      	ldr	r6, [r4, #12]
    bd00:	4431      	add	r1, r6
    bd02:	4798      	blx	r3
    bd04:	b138      	cbz	r0, bd16 <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    bd06:	7823      	ldrb	r3, [r4, #0]
    bd08:	f023 0301 	bic.w	r3, r3, #1
    bd0c:	7023      	strb	r3, [r4, #0]
    bd0e:	e000      	b.n	bd12 <FsCache::sync()+0x46>
  }
  return true;
    bd10:	2501      	movs	r5, #1

 fail:
  return false;
}
    bd12:	4628      	mov	r0, r5
    bd14:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    bd16:	4605      	mov	r5, r0
    bd18:	e7fb      	b.n	bd12 <FsCache::sync()+0x46>

0000bd1a <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    bd1a:	b570      	push	{r4, r5, r6, lr}
    bd1c:	4604      	mov	r4, r0
  if (!m_blockDev) {
    bd1e:	6840      	ldr	r0, [r0, #4]
    bd20:	b158      	cbz	r0, bd3a <FsCache::prepare(unsigned long, unsigned char)+0x20>
    bd22:	460e      	mov	r6, r1
    bd24:	4615      	mov	r5, r2
  if (m_sector != sector) {
    bd26:	68e3      	ldr	r3, [r4, #12]
    bd28:	428b      	cmp	r3, r1
    bd2a:	d107      	bne.n	bd3c <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
    bd2c:	f005 0503 	and.w	r5, r5, #3
    bd30:	7823      	ldrb	r3, [r4, #0]
    bd32:	432b      	orrs	r3, r5
    bd34:	4620      	mov	r0, r4
    bd36:	f800 3b10 	strb.w	r3, [r0], #16
}
    bd3a:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
    bd3c:	4620      	mov	r0, r4
    bd3e:	f7ff ffc5 	bl	bccc <FsCache::sync()>
    bd42:	b170      	cbz	r0, bd62 <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
    bd44:	f015 0f04 	tst.w	r5, #4
    bd48:	d107      	bne.n	bd5a <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    bd4a:	6860      	ldr	r0, [r4, #4]
    bd4c:	6803      	ldr	r3, [r0, #0]
    bd4e:	691b      	ldr	r3, [r3, #16]
    bd50:	f104 0210 	add.w	r2, r4, #16
    bd54:	4631      	mov	r1, r6
    bd56:	4798      	blx	r3
    bd58:	b128      	cbz	r0, bd66 <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
    bd5a:	2300      	movs	r3, #0
    bd5c:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
    bd5e:	60e6      	str	r6, [r4, #12]
    bd60:	e7e4      	b.n	bd2c <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
    bd62:	2000      	movs	r0, #0
    bd64:	e7e9      	b.n	bd3a <FsCache::prepare(unsigned long, unsigned char)+0x20>
    bd66:	2000      	movs	r0, #0
    bd68:	e7e7      	b.n	bd3a <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

0000bd6c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
 */
#include "SysCall.h"
#include "FsDateTime.h"
#include "FmtNumber.h"

static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
    bd6c:	b508      	push	{r3, lr}
  *ms10 = 0;
    bd6e:	2300      	movs	r3, #0
    bd70:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
    bd72:	4b02      	ldr	r3, [pc, #8]	; (bd7c <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
    bd74:	681b      	ldr	r3, [r3, #0]
    bd76:	4798      	blx	r3
}
    bd78:	bd08      	pop	{r3, pc}
    bd7a:	bf00      	nop
    bd7c:	20004c60 	.word	0x20004c60

0000bd80 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
  void (*callback2)(uint16_t* date, uint16_t* time) = nullptr;
  void clearCallback() {
    callback = nullptr;
  }
  void setCallback(void (*dateTime)(uint16_t* date, uint16_t* time)) {
    callback = dateTimeMs10;
    bd80:	4b02      	ldr	r3, [pc, #8]	; (bd8c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
    bd82:	4a03      	ldr	r2, [pc, #12]	; (bd90 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    bd84:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
    bd86:	4b03      	ldr	r3, [pc, #12]	; (bd94 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    bd88:	6018      	str	r0, [r3, #0]
  }
    bd8a:	4770      	bx	lr
    bd8c:	20004c5c 	.word	0x20004c5c
    bd90:	0000bd6d 	.word	0x0000bd6d
    bd94:	20004c60 	.word	0x20004c60

0000bd98 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    bd98:	b510      	push	{r4, lr}
    bd9a:	b082      	sub	sp, #8
    bd9c:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    bd9e:	8980      	ldrh	r0, [r0, #12]
    bda0:	b118      	cbz	r0, bdaa <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    bda2:	2300      	movs	r3, #0
    bda4:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    bda6:	b002      	add	sp, #8
    bda8:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    bdaa:	6863      	ldr	r3, [r4, #4]
    bdac:	68a1      	ldr	r1, [r4, #8]
    bdae:	428b      	cmp	r3, r1
    bdb0:	d2f9      	bcs.n	bda6 <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    bdb2:	aa01      	add	r2, sp, #4
    bdb4:	4618      	mov	r0, r3
    bdb6:	f000 f8b9 	bl	bf2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    bdba:	b130      	cbz	r0, bdca <FsName::get16()+0x32>
    next = ptr;
    bdbc:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    bdbe:	9801      	ldr	r0, [sp, #4]
    bdc0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bdc4:	d204      	bcs.n	bdd0 <FsName::get16()+0x38>
      rtn = cp;
    bdc6:	b280      	uxth	r0, r0
    bdc8:	e7ed      	b.n	bda6 <FsName::get16()+0xe>
  return 0XFFFF;
    bdca:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bdce:	e7ea      	b.n	bda6 <FsName::get16()+0xe>
    bdd0:	f3c0 0309 	ubfx	r3, r0, #0, #10
    bdd4:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
    bdd8:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    bdda:	0a80      	lsrs	r0, r0, #10
    bddc:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    bde0:	b280      	uxth	r0, r0
    bde2:	e7e0      	b.n	bda6 <FsName::get16()+0xe>

0000bde4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
    bde4:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bde6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    bdea:	d82e      	bhi.n	be4a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
    bdec:	2910      	cmp	r1, #16
    bdee:	d81f      	bhi.n	be30 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    bdf0:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
    bdf4:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
    bdf6:	fb0e f101 	mul.w	r1, lr, r1
    bdfa:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
    bdfe:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
    be02:	d23f      	bcs.n	be84 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
    be04:	fb01 231c 	mls	r3, r1, ip, r2
    be08:	fbb3 f3fe 	udiv	r3, r3, lr
    be0c:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
    be0e:	fbb2 f1fe 	udiv	r1, r2, lr
    be12:	fb0e 2211 	mls	r2, lr, r1, r2
    be16:	3201      	adds	r2, #1
    be18:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
    be1a:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
    be1c:	ea4f 039c 	mov.w	r3, ip, lsr #2
    be20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
    be24:	431a      	orrs	r2, r3
    be26:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
    be28:	f880 c002 	strb.w	ip, [r0, #2]
}
    be2c:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
    be30:	2920      	cmp	r1, #32
    be32:	d803      	bhi.n	be3c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be34:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
    be38:	2104      	movs	r1, #4
    be3a:	e7dc      	b.n	bdf6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be3c:	f04f 0e20 	mov.w	lr, #32
    be40:	2980      	cmp	r1, #128	; 0x80
    be42:	bf8c      	ite	hi
    be44:	2110      	movhi	r1, #16
    be46:	2108      	movls	r1, #8
    be48:	e7d5      	b.n	bdf6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
    be4a:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
    be4e:	d90d      	bls.n	be6c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
    be50:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
    be54:	d90e      	bls.n	be74 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
    be56:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
    be5a:	d90f      	bls.n	be7c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be5c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    be60:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
    be64:	bf94      	ite	ls
    be66:	2180      	movls	r1, #128	; 0x80
    be68:	21ff      	movhi	r1, #255	; 0xff
    be6a:	e7c4      	b.n	bdf6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    be6c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
    be70:	2110      	movs	r1, #16
    be72:	e7c0      	b.n	bdf6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be74:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
    be78:	2120      	movs	r1, #32
    be7a:	e7bc      	b.n	bdf6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
    be7c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
    be80:	2140      	movs	r1, #64	; 0x40
    be82:	e7b8      	b.n	bdf6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
    be84:	223f      	movs	r2, #63	; 0x3f
    h = 254;
    be86:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
    be88:	f240 3cff 	movw	ip, #1023	; 0x3ff
    be8c:	e7c5      	b.n	be1a <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

0000be8e <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    be8e:	4603      	mov	r3, r0
    size_t n = end - str;
    be90:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
    be92:	287f      	cmp	r0, #127	; 0x7f
    be94:	d805      	bhi.n	bea2 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    be96:	2a00      	cmp	r2, #0
    be98:	d040      	beq.n	bf1c <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
    be9a:	4608      	mov	r0, r1
    be9c:	f800 3b01 	strb.w	r3, [r0], #1
    bea0:	4770      	bx	lr
    } else if (cp < 0X800) {
    bea2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    bea6:	d20d      	bcs.n	bec4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    bea8:	2a01      	cmp	r2, #1
    beaa:	d939      	bls.n	bf20 <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    beac:	0982      	lsrs	r2, r0, #6
    beae:	f062 023f 	orn	r2, r2, #63	; 0x3f
    beb2:	4608      	mov	r0, r1
    beb4:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    beb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bec0:	704b      	strb	r3, [r1, #1]
    bec2:	4770      	bx	lr
    } else if (cp < 0X10000) {
    bec4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bec8:	d211      	bcs.n	beee <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    beca:	2a02      	cmp	r2, #2
    becc:	d92a      	bls.n	bf24 <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bece:	0b02      	lsrs	r2, r0, #12
    bed0:	f062 021f 	orn	r2, r2, #31
    bed4:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bed6:	f3c0 1285 	ubfx	r2, r0, #6, #6
    beda:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bede:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bee0:	1cc8      	adds	r0, r1, #3
    bee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    beea:	708b      	strb	r3, [r1, #2]
    beec:	4770      	bx	lr
       if (n < 4) goto fail;
    beee:	2a03      	cmp	r2, #3
    bef0:	d91a      	bls.n	bf28 <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    bef2:	0c82      	lsrs	r2, r0, #18
    bef4:	f062 020f 	orn	r2, r2, #15
    bef8:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    befa:	f3c0 3205 	ubfx	r2, r0, #12, #6
    befe:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bf02:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bf04:	f3c0 1285 	ubfx	r2, r0, #6, #6
    bf08:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bf0c:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bf0e:	1d08      	adds	r0, r1, #4
    bf10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bf14:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bf18:	70cb      	strb	r3, [r1, #3]
    bf1a:	4770      	bx	lr
    return nullptr;
    bf1c:	2000      	movs	r0, #0
    bf1e:	4770      	bx	lr
    bf20:	2000      	movs	r0, #0
    bf22:	4770      	bx	lr
    bf24:	2000      	movs	r0, #0
    bf26:	4770      	bx	lr
    bf28:	2000      	movs	r0, #0
  }
    bf2a:	4770      	bx	lr

0000bf2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    bf2c:	4288      	cmp	r0, r1
    bf2e:	d242      	bcs.n	bfb6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    bf30:	b510      	push	{r4, lr}
    bf32:	4603      	mov	r3, r0
    uint8_t ch = str[0];
    bf34:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
    bf36:	f990 0000 	ldrsb.w	r0, [r0]
    bf3a:	2800      	cmp	r0, #0
    bf3c:	da10      	bge.n	bf60 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
    bf3e:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    bf42:	28c0      	cmp	r0, #192	; 0xc0
    bf44:	d00f      	beq.n	bf66 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
    bf46:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    bf4a:	28e0      	cmp	r0, #224	; 0xe0
    bf4c:	d02e      	beq.n	bfac <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
    bf4e:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    bf52:	28f0      	cmp	r0, #240	; 0xf0
    bf54:	d131      	bne.n	bfba <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
    bf56:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    bf5a:	f04f 0c04 	mov.w	ip, #4
    bf5e:	e006      	b.n	bf6e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
    bf60:	6014      	str	r4, [r2, #0]
      return str + 1;
    bf62:	1c58      	adds	r0, r3, #1
  }
    bf64:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
    bf66:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    bf6a:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
    bf6e:	eb03 000c 	add.w	r0, r3, ip
    bf72:	4288      	cmp	r0, r1
    bf74:	d823      	bhi.n	bfbe <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
    bf76:	1c59      	adds	r1, r3, #1
    bf78:	4684      	mov	ip, r0
      ch = str[i];
    bf7a:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
    bf7e:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
    bf82:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    bf86:	d11c      	bne.n	bfc2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
    bf88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bf8c:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
    bf90:	4561      	cmp	r1, ip
    bf92:	d1f2      	bne.n	bf7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
    bf94:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    bf98:	4b0d      	ldr	r3, [pc, #52]	; (bfd0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
    bf9a:	4299      	cmp	r1, r3
    bf9c:	d813      	bhi.n	bfc6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    bf9e:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    bfa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bfa6:	d310      	bcc.n	bfca <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
    bfa8:	6014      	str	r4, [r2, #0]
    return str + n;
    bfaa:	e7db      	b.n	bf64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
    bfac:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    bfb0:	f04f 0c03 	mov.w	ip, #3
    bfb4:	e7db      	b.n	bf6e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
    bfb6:	2000      	movs	r0, #0
  }
    bfb8:	4770      	bx	lr
      return nullptr;
    bfba:	2000      	movs	r0, #0
    bfbc:	e7d2      	b.n	bf64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bfbe:	2000      	movs	r0, #0
    bfc0:	e7d0      	b.n	bf64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
    bfc2:	2000      	movs	r0, #0
    bfc4:	e7ce      	b.n	bf64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
    bfc6:	2000      	movs	r0, #0
    bfc8:	e7cc      	b.n	bf64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bfca:	2000      	movs	r0, #0
    bfcc:	e7ca      	b.n	bf64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    bfce:	bf00      	nop
    bfd0:	0010ff7f 	.word	0x0010ff7f

0000bfd4 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    bfd4:	287e      	cmp	r0, #126	; 0x7e
    bfd6:	d80c      	bhi.n	bff2 <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    bfd8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    bfdc:	b29b      	uxth	r3, r3
    bfde:	2b19      	cmp	r3, #25
    bfe0:	bf8c      	ite	hi
    bfe2:	2300      	movhi	r3, #0
    bfe4:	2301      	movls	r3, #1
    bfe6:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    bfea:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    bfec:	4770      	bx	lr
    mid = left + (right - left)/2;
    bfee:	469c      	mov	ip, r3
    bff0:	e004      	b.n	bffc <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
    bff2:	b430      	push	{r4, r5}
  size_t right = size;
    bff4:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    bff8:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    bffa:	4c27      	ldr	r4, [pc, #156]	; (c098 <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
    bffc:	ebac 0302 	sub.w	r3, ip, r2
    c000:	2b01      	cmp	r3, #1
    c002:	d907      	bls.n	c014 <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
    c004:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    c008:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
    c00c:	4281      	cmp	r1, r0
    c00e:	d8ee      	bhi.n	bfee <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
    c010:	461a      	mov	r2, r3
    c012:	e7f3      	b.n	bffc <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
    c014:	b292      	uxth	r2, r2
    c016:	4b20      	ldr	r3, [pc, #128]	; (c098 <toUpcase(unsigned short)+0xc4>)
    c018:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c01c:	4298      	cmp	r0, r3
    c01e:	d31d      	bcc.n	c05c <toUpcase(unsigned short)+0x88>
    c020:	1ac1      	subs	r1, r0, r3
    c022:	4c1d      	ldr	r4, [pc, #116]	; (c098 <toUpcase(unsigned short)+0xc4>)
    c024:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    c028:	78e4      	ldrb	r4, [r4, #3]
    c02a:	42a1      	cmp	r1, r4
    c02c:	da19      	bge.n	c062 <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
    c02e:	491a      	ldr	r1, [pc, #104]	; (c098 <toUpcase(unsigned short)+0xc4>)
    c030:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    c034:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
    c038:	2a01      	cmp	r2, #1
    c03a:	d004      	beq.n	c046 <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
    c03c:	b14a      	cbz	r2, c052 <toUpcase(unsigned short)+0x7e>
    c03e:	b293      	uxth	r3, r2
    c040:	4403      	add	r3, r0
    c042:	b298      	uxth	r0, r3
    c044:	e021      	b.n	c08a <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
    c046:	1ac3      	subs	r3, r0, r3
    c048:	f003 0301 	and.w	r3, r3, #1
    c04c:	1ac3      	subs	r3, r0, r3
    c04e:	b298      	uxth	r0, r3
    c050:	e01b      	b.n	c08a <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
    c052:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    c056:	e7f3      	b.n	c040 <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
    c058:	461c      	mov	r4, r3
    c05a:	e005      	b.n	c068 <toUpcase(unsigned short)+0x94>
    c05c:	244b      	movs	r4, #75	; 0x4b
    c05e:	2200      	movs	r2, #0
    c060:	e001      	b.n	c066 <toUpcase(unsigned short)+0x92>
    c062:	244b      	movs	r4, #75	; 0x4b
    c064:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
    c066:	4d0d      	ldr	r5, [pc, #52]	; (c09c <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
    c068:	1aa3      	subs	r3, r4, r2
    c06a:	2b01      	cmp	r3, #1
    c06c:	d907      	bls.n	c07e <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
    c06e:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
    c072:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
    c076:	4281      	cmp	r1, r0
    c078:	d8ee      	bhi.n	c058 <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
    c07a:	461a      	mov	r2, r3
    c07c:	e7f4      	b.n	c068 <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
    c07e:	b292      	uxth	r2, r2
    c080:	4b06      	ldr	r3, [pc, #24]	; (c09c <toUpcase(unsigned short)+0xc8>)
    c082:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
    c086:	4283      	cmp	r3, r0
    c088:	d001      	beq.n	c08e <toUpcase(unsigned short)+0xba>
}
    c08a:	bc30      	pop	{r4, r5}
    c08c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    c08e:	4b03      	ldr	r3, [pc, #12]	; (c09c <toUpcase(unsigned short)+0xc8>)
    c090:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c094:	8858      	ldrh	r0, [r3, #2]
    c096:	e7f8      	b.n	c08a <toUpcase(unsigned short)+0xb6>
    c098:	20001ea8 	.word	0x20001ea8
    c09c:	20001d7c 	.word	0x20001d7c

0000c0a0 <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0a0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c0a4:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c0a6:	4b11      	ldr	r3, [pc, #68]	; (c0ec <EventResponder::runFromInterrupt()+0x4c>)
    c0a8:	6818      	ldr	r0, [r3, #0]
		if (first) {
    c0aa:	b1d0      	cbz	r0, c0e2 <EventResponder::runFromInterrupt()+0x42>
{
    c0ac:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
    c0ae:	461d      	mov	r5, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c0b0:	4e0f      	ldr	r6, [pc, #60]	; (c0f0 <EventResponder::runFromInterrupt()+0x50>)
    c0b2:	2400      	movs	r4, #0
    c0b4:	e009      	b.n	c0ca <EventResponder::runFromInterrupt()+0x2a>
    c0b6:	6034      	str	r4, [r6, #0]
    c0b8:	e00c      	b.n	c0d4 <EventResponder::runFromInterrupt()+0x34>
			}
			enableInterrupts(irq);
			first->_triggered = false;
    c0ba:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c0bc:	6883      	ldr	r3, [r0, #8]
    c0be:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0c0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c0c4:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    c0c6:	6828      	ldr	r0, [r5, #0]
		if (first) {
    c0c8:	b140      	cbz	r0, c0dc <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
    c0ca:	6943      	ldr	r3, [r0, #20]
    c0cc:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	d0f1      	beq.n	c0b6 <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
    c0d2:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c0d4:	2a00      	cmp	r2, #0
    c0d6:	d1f0      	bne.n	c0ba <EventResponder::runFromInterrupt()+0x1a>
    c0d8:	b662      	cpsie	i
    c0da:	e7ee      	b.n	c0ba <EventResponder::runFromInterrupt()+0x1a>
    c0dc:	b902      	cbnz	r2, c0e0 <EventResponder::runFromInterrupt()+0x40>
    c0de:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    c0e0:	bd70      	pop	{r4, r5, r6, pc}
    c0e2:	b90a      	cbnz	r2, c0e8 <EventResponder::runFromInterrupt()+0x48>
    c0e4:	b662      	cpsie	i
			break;
    c0e6:	4770      	bx	lr
    c0e8:	4770      	bx	lr
    c0ea:	bf00      	nop
    c0ec:	20004c70 	.word	0x20004c70
    c0f0:	20004c6c 	.word	0x20004c6c

0000c0f4 <pendablesrvreq_isr>:
{
    c0f4:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    c0f6:	f7ff ffd3 	bl	c0a0 <EventResponder::runFromInterrupt()>
}
    c0fa:	bd08      	pop	{r3, pc}

0000c0fc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c0fc:	4b04      	ldr	r3, [pc, #16]	; (c110 <systick_isr+0x14>)
    c0fe:	685a      	ldr	r2, [r3, #4]
    c100:	4b04      	ldr	r3, [pc, #16]	; (c114 <systick_isr+0x18>)
    c102:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
    c104:	4a04      	ldr	r2, [pc, #16]	; (c118 <systick_isr+0x1c>)
    c106:	6813      	ldr	r3, [r2, #0]
    c108:	3301      	adds	r3, #1
    c10a:	6013      	str	r3, [r2, #0]
}
    c10c:	4770      	bx	lr
    c10e:	bf00      	nop
    c110:	e0001000 	.word	0xe0001000
    c114:	20005384 	.word	0x20005384
    c118:	20005388 	.word	0x20005388

0000c11c <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    c11c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    c120:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    c122:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
    c126:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c128:	4293      	cmp	r3, r2
    c12a:	d202      	bcs.n	c132 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    c12c:	3a01      	subs	r2, #1
    c12e:	1ad0      	subs	r0, r2, r3
}
    c130:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    c132:	6b41      	ldr	r1, [r0, #52]	; 0x34
    c134:	3901      	subs	r1, #1
    c136:	440a      	add	r2, r1
    c138:	1ad0      	subs	r0, r2, r3
    c13a:	4770      	bx	lr

0000c13c <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    c13c:	b672      	cpsid	i
	head = rx_buffer_head_;
    c13e:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
    c142:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    c144:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c148:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    c14a:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    c14c:	bf3c      	itt	cc
    c14e:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    c150:	1852      	addcc	r2, r2, r1
    c152:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    c154:	6902      	ldr	r2, [r0, #16]
    c156:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    c158:	f3c0 6002 	ubfx	r0, r0, #24, #3
    c15c:	4418      	add	r0, r3
	__enable_irq();
    c15e:	b662      	cpsie	i
	return avail;
}
    c160:	4770      	bx	lr

0000c162 <HardwareSerial::peek()>:
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
}

int HardwareSerial::peek(void)
{
    c162:	4602      	mov	r2, r0
	uint32_t head, tail;

	head = rx_buffer_head_;
    c164:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c168:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    c16a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c16e:	b29b      	uxth	r3, r3
	if (head == tail) {
    c170:	4299      	cmp	r1, r3
    c172:	d00b      	beq.n	c18c <HardwareSerial::peek()+0x2a>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c174:	3301      	adds	r3, #1
    c176:	6b91      	ldr	r1, [r2, #56]	; 0x38
    c178:	4299      	cmp	r1, r3
    c17a:	bf98      	it	ls
    c17c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    c17e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    c180:	4299      	cmp	r1, r3
    c182:	d921      	bls.n	c1c8 <HardwareSerial::peek()+0x66>
		return rx_buffer_[tail];
    c184:	6a12      	ldr	r2, [r2, #32]
    c186:	5cd0      	ldrb	r0, [r2, r3]
    c188:	b2c0      	uxtb	r0, r0
    c18a:	4770      	bx	lr
		__disable_irq();
    c18c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    c18e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c192:	b289      	uxth	r1, r1
		if (head == tail) {
    c194:	428b      	cmp	r3, r1
    c196:	d001      	beq.n	c19c <HardwareSerial::peek()+0x3a>
		__enable_irq();
    c198:	b662      	cpsie	i
    c19a:	e7eb      	b.n	c174 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    c19c:	6903      	ldr	r3, [r0, #16]
    c19e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    c1a0:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    c1a4:	d00c      	beq.n	c1c0 <HardwareSerial::peek()+0x5e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c1a6:	69db      	ldr	r3, [r3, #28]
    c1a8:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_head_ = 1;
    c1ac:	2101      	movs	r1, #1
    c1ae:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
				rx_buffer_tail_ = 0; 
    c1b2:	2100      	movs	r1, #0
    c1b4:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    c1b8:	6a12      	ldr	r2, [r2, #32]
    c1ba:	b2db      	uxtb	r3, r3
    c1bc:	7053      	strb	r3, [r2, #1]
    c1be:	e001      	b.n	c1c4 <HardwareSerial::peek()+0x62>
			int c = -1;	// assume nothing to return
    c1c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    c1c4:	b662      	cpsie	i
			return c;
    c1c6:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    c1c8:	1a5b      	subs	r3, r3, r1
    c1ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
    c1cc:	5cd0      	ldrb	r0, [r2, r3]
    c1ce:	b2c0      	uxtb	r0, r0
	}
}
    c1d0:	4770      	bx	lr

0000c1d2 <HardwareSerial::read()>:

int HardwareSerial::read(void)
{
    c1d2:	4602      	mov	r2, r0
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    c1d4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c1d8:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    c1da:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
    c1de:	b29b      	uxth	r3, r3
	if (head == tail) {
    c1e0:	4299      	cmp	r1, r3
    c1e2:	d01b      	beq.n	c21c <HardwareSerial::read()+0x4a>
{
    c1e4:	b430      	push	{r4, r5}
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    c1e6:	3301      	adds	r3, #1
    c1e8:	6b94      	ldr	r4, [r2, #56]	; 0x38
    c1ea:	429c      	cmp	r4, r3
    c1ec:	bf98      	it	ls
    c1ee:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    c1f0:	6b10      	ldr	r0, [r2, #48]	; 0x30
    c1f2:	4298      	cmp	r0, r3
    c1f4:	d927      	bls.n	c246 <HardwareSerial::read()+0x74>
		c = rx_buffer_[tail];
    c1f6:	6a10      	ldr	r0, [r2, #32]
    c1f8:	5cc0      	ldrb	r0, [r0, r3]
    c1fa:	b2c0      	uxtb	r0, r0
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    c1fc:	b29d      	uxth	r5, r3
    c1fe:	f8a2 504c 	strh.w	r5, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    c202:	6d95      	ldr	r5, [r2, #88]	; 0x58
    c204:	b145      	cbz	r5, c218 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    c206:	4299      	cmp	r1, r3
    c208:	d322      	bcc.n	c250 <HardwareSerial::read()+0x7e>
    c20a:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    c20c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    c20e:	4299      	cmp	r1, r3
    c210:	d302      	bcc.n	c218 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    c212:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    c214:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    c218:	bc30      	pop	{r4, r5}
    c21a:	4770      	bx	lr
		__disable_irq();
    c21c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    c21e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    c222:	b289      	uxth	r1, r1
		if (head == tail) {
    c224:	428b      	cmp	r3, r1
    c226:	d001      	beq.n	c22c <HardwareSerial::read()+0x5a>
		__enable_irq();
    c228:	b662      	cpsie	i
    c22a:	e7db      	b.n	c1e4 <HardwareSerial::read()+0x12>
			if (port->WATER & 0x7000000) {
    c22c:	6903      	ldr	r3, [r0, #16]
    c22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c230:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    c234:	d003      	beq.n	c23e <HardwareSerial::read()+0x6c>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c236:	69d8      	ldr	r0, [r3, #28]
    c238:	f3c0 0009 	ubfx	r0, r0, #0, #10
    c23c:	e001      	b.n	c242 <HardwareSerial::read()+0x70>
			c = -1;	// assume nothing to return
    c23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			__enable_irq();
    c242:	b662      	cpsie	i
}	
    c244:	4770      	bx	lr
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    c246:	1a18      	subs	r0, r3, r0
    c248:	6a55      	ldr	r5, [r2, #36]	; 0x24
    c24a:	5c28      	ldrb	r0, [r5, r0]
    c24c:	b2c0      	uxtb	r0, r0
    c24e:	e7d5      	b.n	c1fc <HardwareSerial::read()+0x2a>
		else avail = rx_buffer_total_size_ + head - tail;
    c250:	440c      	add	r4, r1
    c252:	1ae3      	subs	r3, r4, r3
    c254:	e7da      	b.n	c20c <HardwareSerial::read()+0x3a>

0000c256 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
    c256:	b510      	push	{r4, lr}
    c258:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    c25a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    c25e:	b12b      	cbz	r3, c26c <HardwareSerial::flush()+0x16>
    c260:	f002 ff66 	bl	f130 <yield>
    c264:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    c268:	2b00      	cmp	r3, #0
    c26a:	d1f9      	bne.n	c260 <HardwareSerial::flush()+0xa>
}
    c26c:	bd10      	pop	{r4, pc}
	...

0000c270 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    c270:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    c274:	b99b      	cbnz	r3, c29e <nvic_execution_priority()+0x2e>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c276:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    c27a:	b998      	cbnz	r0, c2a4 <nvic_execution_priority()+0x34>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c27c:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    c280:	b123      	cbz	r3, c28c <nvic_execution_priority()+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    c282:	2b0f      	cmp	r3, #15
    c284:	d904      	bls.n	c290 <nvic_execution_priority()+0x20>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    c286:	4a08      	ldr	r2, [pc, #32]	; (c2a8 <nvic_execution_priority()+0x38>)
    c288:	5cd0      	ldrb	r0, [r2, r3]
    c28a:	e001      	b.n	c290 <nvic_execution_priority()+0x20>
	uint32_t priority=256;
    c28c:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    c290:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    c294:	b13b      	cbz	r3, c2a6 <nvic_execution_priority()+0x36>
    c296:	4298      	cmp	r0, r3
    c298:	bf28      	it	cs
    c29a:	4618      	movcs	r0, r3
	return priority;
    c29c:	4770      	bx	lr
	if (faultmask) return -1;
    c29e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c2a2:	4770      	bx	lr
	if (primask) return 0;
    c2a4:	2000      	movs	r0, #0
}
    c2a6:	4770      	bx	lr
    c2a8:	e000e3f0 	.word	0xe000e3f0

0000c2ac <HardwareSerial::write9bit(unsigned long)>:
	// use the 9 bit version (maybe 10 bit) do do the work. 
	return write9bit(c);
}

size_t HardwareSerial::write9bit(uint32_t c)
{
    c2ac:	b570      	push	{r4, r5, r6, lr}
    c2ae:	4604      	mov	r4, r0
    c2b0:	460e      	mov	r6, r1
	uint32_t head, n;
	//digitalWrite(3, HIGH);
	//digitalWrite(5, HIGH);
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c2b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c2b4:	b113      	cbz	r3, c2bc <HardwareSerial::write9bit(unsigned long)+0x10>
    c2b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c2b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    c2bc:	7ea3      	ldrb	r3, [r4, #26]
    c2be:	b133      	cbz	r3, c2ce <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    c2c0:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    c2c2:	6922      	ldr	r2, [r4, #16]
    c2c4:	6993      	ldr	r3, [r2, #24]
    c2c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c2ca:	6193      	str	r3, [r2, #24]
		__enable_irq();
    c2cc:	b662      	cpsie	i
		//digitalWriteFast(2, HIGH);
	}

	head = tx_buffer_head_;
    c2ce:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
    c2d2:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    c2d4:	3501      	adds	r5, #1
    c2d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c2d8:	42ab      	cmp	r3, r5
    c2da:	bf98      	it	ls
    c2dc:	2500      	movls	r5, #0
	while (tx_buffer_tail_ == head) {
    c2de:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c2e2:	b29b      	uxth	r3, r3
    c2e4:	429d      	cmp	r5, r3
    c2e6:	d01f      	beq.n	c328 <HardwareSerial::write9bit(unsigned long)+0x7c>
			yield(); // wait
		} 
	}
	//digitalWrite(5, LOW);
	//Serial.printf("WR %x %d %d %d %x %x\n", c, head, tx_buffer_size_,  tx_buffer_total_size_, (uint32_t)tx_buffer_, (uint32_t)tx_buffer_storage_);
	if (head < tx_buffer_size_) {
    c2e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c2ea:	42ab      	cmp	r3, r5
    c2ec:	d93e      	bls.n	c36c <HardwareSerial::write9bit(unsigned long)+0xc0>
		tx_buffer_[head] = c;
    c2ee:	69e3      	ldr	r3, [r4, #28]
    c2f0:	b2f6      	uxtb	r6, r6
    c2f2:	555e      	strb	r6, [r3, r5]
	} else {
		tx_buffer_storage_[head - tx_buffer_size_] = c;
	}
	__disable_irq();
    c2f4:	b672      	cpsid	i
	transmitting_ = 1;
    c2f6:	2001      	movs	r0, #1
    c2f8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    c2fc:	b2ad      	uxth	r5, r5
    c2fe:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    c302:	6922      	ldr	r2, [r4, #16]
    c304:	6993      	ldr	r3, [r2, #24]
    c306:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    c30a:	6193      	str	r3, [r2, #24]
	__enable_irq();
    c30c:	b662      	cpsie	i
	//digitalWrite(3, LOW);
	return 1;
}
    c30e:	bd70      	pop	{r4, r5, r6, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    c310:	1a59      	subs	r1, r3, r1
    c312:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c314:	5c41      	ldrb	r1, [r0, r1]
    c316:	b2c9      	uxtb	r1, r1
    c318:	e020      	b.n	c35c <HardwareSerial::write9bit(unsigned long)+0xb0>
		} else if (priority >= 256) 
    c31a:	28ff      	cmp	r0, #255	; 0xff
    c31c:	dc23      	bgt.n	c366 <HardwareSerial::write9bit(unsigned long)+0xba>
	while (tx_buffer_tail_ == head) {
    c31e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c322:	b29b      	uxth	r3, r3
    c324:	42ab      	cmp	r3, r5
    c326:	d1df      	bne.n	c2e8 <HardwareSerial::write9bit(unsigned long)+0x3c>
		int priority = nvic_execution_priority();
    c328:	f7ff ffa2 	bl	c270 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    c32c:	6963      	ldr	r3, [r4, #20]
    c32e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    c332:	4283      	cmp	r3, r0
    c334:	dbf1      	blt.n	c31a <HardwareSerial::write9bit(unsigned long)+0x6e>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    c336:	6922      	ldr	r2, [r4, #16]
    c338:	6953      	ldr	r3, [r2, #20]
    c33a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c33e:	d0ee      	beq.n	c31e <HardwareSerial::write9bit(unsigned long)+0x72>
				uint32_t tail = tx_buffer_tail_;
    c340:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    c344:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    c346:	3301      	adds	r3, #1
    c348:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c34a:	4299      	cmp	r1, r3
    c34c:	bf98      	it	ls
    c34e:	2300      	movls	r3, #0
				if (tail < tx_buffer_size_) {
    c350:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    c352:	4299      	cmp	r1, r3
    c354:	d9dc      	bls.n	c310 <HardwareSerial::write9bit(unsigned long)+0x64>
					n = tx_buffer_[tail];
    c356:	69e1      	ldr	r1, [r4, #28]
    c358:	5cc9      	ldrb	r1, [r1, r3]
    c35a:	b2c9      	uxtb	r1, r1
				port->DATA  = n;
    c35c:	61d1      	str	r1, [r2, #28]
				tx_buffer_tail_ = tail;
    c35e:	b29b      	uxth	r3, r3
    c360:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    c364:	e7db      	b.n	c31e <HardwareSerial::write9bit(unsigned long)+0x72>
			yield(); // wait
    c366:	f002 fee3 	bl	f130 <yield>
    c36a:	e7d8      	b.n	c31e <HardwareSerial::write9bit(unsigned long)+0x72>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    c36c:	1aeb      	subs	r3, r5, r3
    c36e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c370:	b2f6      	uxtb	r6, r6
    c372:	54d6      	strb	r6, [r2, r3]
    c374:	e7be      	b.n	c2f4 <HardwareSerial::write9bit(unsigned long)+0x48>

0000c376 <HardwareSerial::write(unsigned char)>:
{
    c376:	b508      	push	{r3, lr}
	return write9bit(c);
    c378:	f7ff ff98 	bl	c2ac <HardwareSerial::write9bit(unsigned long)>
}
    c37c:	bd08      	pop	{r3, pc}

0000c37e <HardwareSerial::IRQHandler()>:

void HardwareSerial::IRQHandler() 
{
    c37e:	b530      	push	{r4, r5, lr}
	uint32_t head, tail, n;
	uint32_t ctrl;

	// See if we have stuff to read in.
	// Todo - Check idle. 
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    c380:	6903      	ldr	r3, [r0, #16]
    c382:	695a      	ldr	r2, [r3, #20]
    c384:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
    c388:	d047      	beq.n	c41a <HardwareSerial::IRQHandler()+0x9c>
		// See how many bytes or pending. 
		//digitalWrite(5, HIGH);
		uint8_t avail = (port->WATER >> 24) & 0x7;
    c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c38c:	f3c3 6c02 	ubfx	ip, r3, #24, #3
		if (avail) {
    c390:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    c394:	d038      	beq.n	c408 <HardwareSerial::IRQHandler()+0x8a>
			uint32_t newhead;
			head = rx_buffer_head_;
    c396:	f8b0 e04a 	ldrh.w	lr, [r0, #74]	; 0x4a
    c39a:	fa1f fe8e 	uxth.w	lr, lr
			tail = rx_buffer_tail_;
    c39e:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    c3a2:	b2a4      	uxth	r4, r4
    c3a4:	e009      	b.n	c3ba <HardwareSerial::IRQHandler()+0x3c>
				if (newhead != rx_buffer_tail_) {
					head = newhead;
					if (newhead < rx_buffer_size_) {
						rx_buffer_[head] = n;
					} else {
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    c3a6:	1a59      	subs	r1, r3, r1
    c3a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c3aa:	b2d2      	uxtb	r2, r2
    c3ac:	546a      	strb	r2, [r5, r1]
					head = newhead;
    c3ae:	469e      	mov	lr, r3
					}
				}
			} while (--avail > 0) ;
    c3b0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c3b4:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    c3b8:	d016      	beq.n	c3e8 <HardwareSerial::IRQHandler()+0x6a>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c3ba:	6903      	ldr	r3, [r0, #16]
    c3bc:	69da      	ldr	r2, [r3, #28]
				newhead = head + 1;
    c3be:	f10e 0301 	add.w	r3, lr, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    c3c2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    c3c4:	4299      	cmp	r1, r3
    c3c6:	bf98      	it	ls
    c3c8:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    c3ca:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    c3ce:	b289      	uxth	r1, r1
    c3d0:	4299      	cmp	r1, r3
    c3d2:	d0ed      	beq.n	c3b0 <HardwareSerial::IRQHandler()+0x32>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    c3d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
					if (newhead < rx_buffer_size_) {
    c3d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c3da:	4299      	cmp	r1, r3
    c3dc:	d9e3      	bls.n	c3a6 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_[head] = n;
    c3de:	6a01      	ldr	r1, [r0, #32]
    c3e0:	b2d2      	uxtb	r2, r2
    c3e2:	54ca      	strb	r2, [r1, r3]
					head = newhead;
    c3e4:	469e      	mov	lr, r3
    c3e6:	e7e3      	b.n	c3b0 <HardwareSerial::IRQHandler()+0x32>
			rx_buffer_head_ = head;
    c3e8:	fa1f f38e 	uxth.w	r3, lr
    c3ec:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    c3f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    c3f2:	b14b      	cbz	r3, c408 <HardwareSerial::IRQHandler()+0x8a>
				uint32_t avail;
				if (head >= tail) avail = head - tail;
    c3f4:	45a6      	cmp	lr, r4
    c3f6:	d320      	bcc.n	c43a <HardwareSerial::IRQHandler()+0xbc>
    c3f8:	ebae 0e04 	sub.w	lr, lr, r4
				else avail = rx_buffer_total_size_ + head - tail;
				if (avail >= rts_high_watermark_) rts_deassert();
    c3fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    c3fe:	4572      	cmp	r2, lr
    c400:	d802      	bhi.n	c408 <HardwareSerial::IRQHandler()+0x8a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    c402:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    c404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			}
		}

		// If it was an idle status clear the idle
		if (port->STAT & LPUART_STAT_IDLE) {
    c408:	6903      	ldr	r3, [r0, #16]
    c40a:	695a      	ldr	r2, [r3, #20]
    c40c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    c410:	d003      	beq.n	c41a <HardwareSerial::IRQHandler()+0x9c>
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    c412:	695a      	ldr	r2, [r3, #20]
    c414:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c418:	615a      	str	r2, [r3, #20]
		//digitalWrite(5, LOW);

	}

	// See if we are transmitting and room in buffer. 
	ctrl = port->CTRL;
    c41a:	6903      	ldr	r3, [r0, #16]
    c41c:	699d      	ldr	r5, [r3, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    c41e:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    c422:	d02c      	beq.n	c47e <HardwareSerial::IRQHandler()+0x100>
    c424:	695b      	ldr	r3, [r3, #20]
    c426:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    c42a:	d028      	beq.n	c47e <HardwareSerial::IRQHandler()+0x100>
	{
		//digitalWrite(3, HIGH);

		head = tx_buffer_head_;
    c42c:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
    c430:	b2a4      	uxth	r4, r4
		tail = tx_buffer_tail_;
    c432:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    c436:	b29b      	uxth	r3, r3
    c438:	e00e      	b.n	c458 <HardwareSerial::IRQHandler()+0xda>
				else avail = rx_buffer_total_size_ + head - tail;
    c43a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    c43c:	1b12      	subs	r2, r2, r4
    c43e:	4496      	add	lr, r2
    c440:	e7dc      	b.n	c3fc <HardwareSerial::IRQHandler()+0x7e>
			if (head == tail) break;
			if (++tail >= tx_buffer_total_size_) tail = 0;
			if (tail < tx_buffer_size_) {
				n = tx_buffer_[tail];
			} else {
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    c442:	1a9a      	subs	r2, r3, r2
    c444:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c446:	5c8a      	ldrb	r2, [r1, r2]
    c448:	b2d2      	uxtb	r2, r2
			}
			port->DATA = n;
    c44a:	6901      	ldr	r1, [r0, #16]
    c44c:	61ca      	str	r2, [r1, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    c44e:	6902      	ldr	r2, [r0, #16]
    c450:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c452:	f412 6f80 	tst.w	r2, #1024	; 0x400
    c456:	d10d      	bne.n	c474 <HardwareSerial::IRQHandler()+0xf6>
			if (head == tail) break;
    c458:	42a3      	cmp	r3, r4
    c45a:	d02f      	beq.n	c4bc <HardwareSerial::IRQHandler()+0x13e>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    c45c:	3301      	adds	r3, #1
    c45e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    c460:	429a      	cmp	r2, r3
    c462:	bf98      	it	ls
    c464:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    c466:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    c468:	429a      	cmp	r2, r3
    c46a:	d9ea      	bls.n	c442 <HardwareSerial::IRQHandler()+0xc4>
				n = tx_buffer_[tail];
    c46c:	69c2      	ldr	r2, [r0, #28]
    c46e:	5cd2      	ldrb	r2, [r2, r3]
    c470:	b2d2      	uxtb	r2, r2
    c472:	e7ea      	b.n	c44a <HardwareSerial::IRQHandler()+0xcc>
		tx_buffer_tail_ = tail;
    c474:	b29a      	uxth	r2, r3
    c476:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
		if (head == tail) {
    c47a:	42a3      	cmp	r3, r4
    c47c:	d020      	beq.n	c4c0 <HardwareSerial::IRQHandler()+0x142>
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		}
		//digitalWrite(3, LOW);
	}

	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    c47e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
    c482:	d01a      	beq.n	c4ba <HardwareSerial::IRQHandler()+0x13c>
    c484:	6903      	ldr	r3, [r0, #16]
    c486:	695b      	ldr	r3, [r3, #20]
    c488:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    c48c:	d015      	beq.n	c4ba <HardwareSerial::IRQHandler()+0x13c>
	{
		transmitting_ = 0;
    c48e:	2300      	movs	r3, #0
    c490:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    c494:	6d03      	ldr	r3, [r0, #80]	; 0x50
    c496:	b113      	cbz	r3, c49e <HardwareSerial::IRQHandler()+0x120>
    c498:	6d42      	ldr	r2, [r0, #84]	; 0x54
    c49a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    c49e:	7e83      	ldrb	r3, [r0, #26]
    c4a0:	b133      	cbz	r3, c4b0 <HardwareSerial::IRQHandler()+0x132>
			__disable_irq();
    c4a2:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    c4a4:	6902      	ldr	r2, [r0, #16]
    c4a6:	6993      	ldr	r3, [r2, #24]
    c4a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    c4ac:	6193      	str	r3, [r2, #24]
			__enable_irq();
    c4ae:	b662      	cpsie	i
			//digitalWriteFast(2, LOW);
		}

		port->CTRL &= ~LPUART_CTRL_TCIE;
    c4b0:	6902      	ldr	r2, [r0, #16]
    c4b2:	6993      	ldr	r3, [r2, #24]
    c4b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    c4b8:	6193      	str	r3, [r2, #24]
	}
	//digitalWrite(4, LOW);
}
    c4ba:	bd30      	pop	{r4, r5, pc}
		tx_buffer_tail_ = tail;
    c4bc:	f8a0 4048 	strh.w	r4, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    c4c0:	6902      	ldr	r2, [r0, #16]
    c4c2:	6993      	ldr	r3, [r2, #24]
    c4c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    c4c8:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    c4ca:	6902      	ldr	r2, [r0, #16]
    c4cc:	6993      	ldr	r3, [r2, #24]
    c4ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    c4d2:	6193      	str	r3, [r2, #24]
    c4d4:	e7d3      	b.n	c47e <HardwareSerial::IRQHandler()+0x100>
	...

0000c4d8 <HardwareSerial::addToSerialEventsList()>:


void HardwareSerial::addToSerialEventsList() {
    c4d8:	b410      	push	{r4}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4da:	4b0e      	ldr	r3, [pc, #56]	; (c514 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c4dc:	781c      	ldrb	r4, [r3, #0]
    c4de:	b15c      	cbz	r4, c4f8 <HardwareSerial::addToSerialEventsList()+0x20>
    c4e0:	490d      	ldr	r1, [pc, #52]	; (c518 <HardwareSerial::addToSerialEventsList()+0x40>)
    c4e2:	1f0b      	subs	r3, r1, #4
    c4e4:	1e62      	subs	r2, r4, #1
    c4e6:	b2d2      	uxtb	r2, r2
    c4e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c4ec:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c4f0:	4282      	cmp	r2, r0
    c4f2:	d00c      	beq.n	c50e <HardwareSerial::addToSerialEventsList()+0x36>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4f4:	428b      	cmp	r3, r1
    c4f6:	d1f9      	bne.n	c4ec <HardwareSerial::addToSerialEventsList()+0x14>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c4f8:	1c62      	adds	r2, r4, #1
    c4fa:	4b06      	ldr	r3, [pc, #24]	; (c514 <HardwareSerial::addToSerialEventsList()+0x3c>)
    c4fc:	701a      	strb	r2, [r3, #0]
    c4fe:	4b06      	ldr	r3, [pc, #24]	; (c518 <HardwareSerial::addToSerialEventsList()+0x40>)
    c500:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c504:	4a05      	ldr	r2, [pc, #20]	; (c51c <HardwareSerial::addToSerialEventsList()+0x44>)
    c506:	7813      	ldrb	r3, [r2, #0]
    c508:	f043 0302 	orr.w	r3, r3, #2
    c50c:	7013      	strb	r3, [r2, #0]
}
    c50e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c512:	4770      	bx	lr
    c514:	200053c5 	.word	0x200053c5
    c518:	20004c78 	.word	0x20004c78
    c51c:	20003a43 	.word	0x20003a43

0000c520 <HardwareSerial::begin(unsigned long, unsigned short)>:
{
    c520:	b570      	push	{r4, r5, r6, lr}
    c522:	ee07 1a90 	vmov	s15, r1
    c526:	4614      	mov	r4, r2
	float base = (float)UART_CLOCK / (float)baud;
    c528:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c52c:	ed9f 7a93 	vldr	s14, [pc, #588]	; c77c <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>
    c530:	ee87 5a27 	vdiv.f32	s10, s14, s15
	for (int osr=4; osr <= 32; osr++) {
    c534:	2104      	movs	r1, #4
	int bestosr = 4;
    c536:	468e      	mov	lr, r1
	int bestdiv = 1;
    c538:	2201      	movs	r2, #1
	float besterr = 1e20;
    c53a:	ed9f 6a91 	vldr	s12, [pc, #580]	; c780 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>
		int divint = (int)(div + 0.5f);
    c53e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c542:	f641 7cff 	movw	ip, #8191	; 0x1fff
    c546:	e002      	b.n	c54e <HardwareSerial::begin(unsigned long, unsigned short)+0x2e>
	for (int osr=4; osr <= 32; osr++) {
    c548:	3101      	adds	r1, #1
    c54a:	2921      	cmp	r1, #33	; 0x21
    c54c:	d02a      	beq.n	c5a4 <HardwareSerial::begin(unsigned long, unsigned short)+0x84>
		float div = base / (float)osr;
    c54e:	ee07 1a90 	vmov	s15, r1
    c552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c556:	ee85 7a27 	vdiv.f32	s14, s10, s15
		int divint = (int)(div + 0.5f);
    c55a:	ee77 7a25 	vadd.f32	s15, s14, s11
    c55e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c562:	ee17 3a90 	vmov	r3, s15
    c566:	4563      	cmp	r3, ip
    c568:	bfa8      	it	ge
    c56a:	4663      	movge	r3, ip
    c56c:	2b01      	cmp	r3, #1
    c56e:	bfb8      	it	lt
    c570:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    c572:	ee07 3a90 	vmov	s15, r3
    c576:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    c57a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    c57e:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    c582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c58a:	bf48      	it	mi
    c58c:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    c590:	eef4 7ac6 	vcmpe.f32	s15, s12
    c594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c598:	d8d6      	bhi.n	c548 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
    c59a:	468e      	mov	lr, r1
			bestdiv = divint;
    c59c:	461a      	mov	r2, r3
			besterr = err;
    c59e:	eeb0 6a67 	vmov.f32	s12, s15
    c5a2:	e7d1      	b.n	c548 <HardwareSerial::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    c5a4:	2300      	movs	r3, #0
    c5a6:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    c5aa:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
	tx_buffer_head_ = 0;
    c5ae:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    c5b2:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    c5b6:	6b85      	ldr	r5, [r0, #56]	; 0x38
    c5b8:	6941      	ldr	r1, [r0, #20]
    c5ba:	f8b1 605c 	ldrh.w	r6, [r1, #92]	; 0x5c
    c5be:	1bae      	subs	r6, r5, r6
    c5c0:	63c6      	str	r6, [r0, #60]	; 0x3c
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    c5c2:	f8b1 605e 	ldrh.w	r6, [r1, #94]	; 0x5e
    c5c6:	1bad      	subs	r5, r5, r6
    c5c8:	6405      	str	r5, [r0, #64]	; 0x40
	transmitting_ = 0;
    c5ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	hardware->ccm_register |= hardware->ccm_value;
    c5ce:	690d      	ldr	r5, [r1, #16]
    c5d0:	682b      	ldr	r3, [r5, #0]
    c5d2:	6949      	ldr	r1, [r1, #20]
    c5d4:	430b      	orrs	r3, r1
    c5d6:	602b      	str	r3, [r5, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    c5d8:	f404 7300 	and.w	r3, r4, #512	; 0x200
    c5dc:	2b00      	cmp	r3, #0
    c5de:	bf14      	ite	ne
    c5e0:	2301      	movne	r3, #1
    c5e2:	2300      	moveq	r3, #0
    c5e4:	7683      	strb	r3, [r0, #26]
	if (!half_duplex_mode_)  {
    c5e6:	f040 80aa 	bne.w	c73e <HardwareSerial::begin(unsigned long, unsigned short)+0x21e>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c5ea:	4966      	ldr	r1, [pc, #408]	; (c784 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c5ec:	6943      	ldr	r3, [r0, #20]
    c5ee:	7e05      	ldrb	r5, [r0, #24]
    c5f0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c5f4:	7e1b      	ldrb	r3, [r3, #24]
    c5f6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c5fa:	689b      	ldr	r3, [r3, #8]
    c5fc:	4d62      	ldr	r5, [pc, #392]	; (c788 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    c5fe:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    c600:	6943      	ldr	r3, [r0, #20]
    c602:	7e05      	ldrb	r5, [r0, #24]
    c604:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c608:	7e1d      	ldrb	r5, [r3, #24]
    c60a:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c60e:	6849      	ldr	r1, [r1, #4]
    c610:	69db      	ldr	r3, [r3, #28]
    c612:	600b      	str	r3, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    c614:	7e01      	ldrb	r1, [r0, #24]
    c616:	6943      	ldr	r3, [r0, #20]
    c618:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c61c:	6a19      	ldr	r1, [r3, #32]
    c61e:	b109      	cbz	r1, c624 <HardwareSerial::begin(unsigned long, unsigned short)+0x104>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c622:	600b      	str	r3, [r1, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    c624:	4957      	ldr	r1, [pc, #348]	; (c784 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c626:	6943      	ldr	r3, [r0, #20]
    c628:	7e45      	ldrb	r5, [r0, #25]
    c62a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c62e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c632:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c636:	689b      	ldr	r3, [r3, #8]
    c638:	25d9      	movs	r5, #217	; 0xd9
    c63a:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c63c:	6943      	ldr	r3, [r0, #20]
    c63e:	7e45      	ldrb	r5, [r0, #25]
    c640:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c644:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c648:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c64c:	6849      	ldr	r1, [r1, #4]
    c64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c650:	600b      	str	r3, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    c652:	7e41      	ldrb	r1, [r0, #25]
    c654:	6943      	ldr	r3, [r0, #20]
    c656:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    c65a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    c65c:	b109      	cbz	r1, c662 <HardwareSerial::begin(unsigned long, unsigned short)+0x142>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    c65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c660:	600b      	str	r3, [r1, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c662:	6901      	ldr	r1, [r0, #16]
    c664:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
    c668:	061b      	lsls	r3, r3, #24
    c66a:	f003 5cf8 	and.w	ip, r3, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    c66e:	f1be 0f08 	cmp.w	lr, #8
    c672:	bfcc      	ite	gt
    c674:	f04f 0e00 	movgt.w	lr, #0
    c678:	f04f 0e01 	movle.w	lr, #1
    c67c:	ea42 434e 	orr.w	r3, r2, lr, lsl #17
    c680:	ea4c 0303 	orr.w	r3, ip, r3
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    c684:	610b      	str	r3, [r1, #16]
	port->PINCFG = 0;
    c686:	6903      	ldr	r3, [r0, #16]
    c688:	2200      	movs	r2, #0
    c68a:	60da      	str	r2, [r3, #12]
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    c68c:	6943      	ldr	r3, [r0, #20]
    c68e:	6859      	ldr	r1, [r3, #4]
    c690:	785b      	ldrb	r3, [r3, #1]
    c692:	3310      	adds	r3, #16
    c694:	4a3d      	ldr	r2, [pc, #244]	; (c78c <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    c696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    c69a:	6943      	ldr	r3, [r0, #20]
    c69c:	785a      	ldrb	r2, [r3, #1]
    c69e:	f893 105a 	ldrb.w	r1, [r3, #90]	; 0x5a
    c6a2:	4b3b      	ldr	r3, [pc, #236]	; (c790 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    c6a4:	54d1      	strb	r1, [r2, r3]
	NVIC_ENABLE_IRQ(hardware->irq);
    c6a6:	6943      	ldr	r3, [r0, #20]
    c6a8:	785a      	ldrb	r2, [r3, #1]
    c6aa:	4b3a      	ldr	r3, [pc, #232]	; (c794 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
    c6ac:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c6b0:	009b      	lsls	r3, r3, #2
    c6b2:	f002 021f 	and.w	r2, r2, #31
    c6b6:	2101      	movs	r1, #1
    c6b8:	fa01 f202 	lsl.w	r2, r1, r2
    c6bc:	601a      	str	r2, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    c6be:	6903      	ldr	r3, [r0, #16]
    c6c0:	f04f 1202 	mov.w	r2, #131074	; 0x20002
    c6c4:	62da      	str	r2, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    c6c6:	6902      	ldr	r2, [r0, #16]
    c6c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c6ca:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    c6ce:	6293      	str	r3, [r2, #40]	; 0x28
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c6d0:	f004 0203 	and.w	r2, r4, #3
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c6d4:	f014 0f04 	tst.w	r4, #4
    c6d8:	d14a      	bne.n	c770 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    c6da:	f442 1370 	orr.w	r3, r2, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    c6de:	f004 020f 	and.w	r2, r4, #15
    c6e2:	2a04      	cmp	r2, #4
    c6e4:	bf08      	it	eq
    c6e6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    c6ea:	f014 0f20 	tst.w	r4, #32
    c6ee:	bf18      	it	ne
    c6f0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    c6f4:	7e82      	ldrb	r2, [r0, #26]
    c6f6:	b10a      	cbz	r2, c6fc <HardwareSerial::begin(unsigned long, unsigned short)+0x1dc>
    c6f8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
	port->CTRL = ctrl;
    c6fc:	6902      	ldr	r2, [r0, #16]
    c6fe:	6193      	str	r3, [r2, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    c700:	f014 0f08 	tst.w	r4, #8
    c704:	d004      	beq.n	c710 <HardwareSerial::begin(unsigned long, unsigned short)+0x1f0>
    c706:	6902      	ldr	r2, [r0, #16]
    c708:	6913      	ldr	r3, [r2, #16]
    c70a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c70e:	6113      	str	r3, [r2, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    c710:	6902      	ldr	r2, [r0, #16]
    c712:	6953      	ldr	r3, [r2, #20]
    c714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    c718:	f014 0f10 	tst.w	r4, #16
    c71c:	bf18      	it	ne
    c71e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    c722:	6153      	str	r3, [r2, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    c724:	f414 7f80 	tst.w	r4, #256	; 0x100
    c728:	d004      	beq.n	c734 <HardwareSerial::begin(unsigned long, unsigned short)+0x214>
    c72a:	6902      	ldr	r2, [r0, #16]
    c72c:	6913      	ldr	r3, [r2, #16]
    c72e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c732:	6113      	str	r3, [r2, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c734:	6943      	ldr	r3, [r0, #20]
    c736:	68db      	ldr	r3, [r3, #12]
    c738:	781b      	ldrb	r3, [r3, #0]
    c73a:	b1e3      	cbz	r3, c776 <HardwareSerial::begin(unsigned long, unsigned short)+0x256>
};
    c73c:	bd70      	pop	{r4, r5, r6, pc}
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    c73e:	4911      	ldr	r1, [pc, #68]	; (c784 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    c740:	6943      	ldr	r3, [r0, #20]
    c742:	7e45      	ldrb	r5, [r0, #25]
    c744:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c748:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    c74c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c750:	689b      	ldr	r3, [r3, #8]
    c752:	f24f 05d9 	movw	r5, #61657	; 0xf0d9
    c756:	601d      	str	r5, [r3, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    c758:	6943      	ldr	r3, [r0, #20]
    c75a:	7e45      	ldrb	r5, [r0, #25]
    c75c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    c760:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
    c764:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    c768:	6849      	ldr	r1, [r1, #4]
    c76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c76c:	600b      	str	r3, [r1, #0]
    c76e:	e770      	b.n	c652 <HardwareSerial::begin(unsigned long, unsigned short)+0x132>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    c770:	4b09      	ldr	r3, [pc, #36]	; (c798 <HardwareSerial::begin(unsigned long, unsigned short)+0x278>)
    c772:	4313      	orrs	r3, r2
    c774:	e7b3      	b.n	c6de <HardwareSerial::begin(unsigned long, unsigned short)+0x1be>
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    c776:	f7ff feaf 	bl	c4d8 <HardwareSerial::addToSerialEventsList()>
};
    c77a:	e7df      	b.n	c73c <HardwareSerial::begin(unsigned long, unsigned short)+0x21c>
    c77c:	4bb71b00 	.word	0x4bb71b00
    c780:	60ad78ec 	.word	0x60ad78ec
    c784:	200028e4 	.word	0x200028e4
    c788:	0001f038 	.word	0x0001f038
    c78c:	20003c00 	.word	0x20003c00
    c790:	e000e400 	.word	0xe000e400
    c794:	38003840 	.word	0x38003840
    c798:	003c0010 	.word	0x003c0010

0000c79c <IRQHandler_Serial5>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
    c79c:	b508      	push	{r3, lr}
	Serial5.IRQHandler();
    c79e:	4802      	ldr	r0, [pc, #8]	; (c7a8 <IRQHandler_Serial5+0xc>)
    c7a0:	f7ff fded 	bl	c37e <HardwareSerial::IRQHandler()>
}
    c7a4:	bd08      	pop	{r3, pc}
    c7a6:	bf00      	nop
    c7a8:	20004724 	.word	0x20004724

0000c7ac <_GLOBAL__sub_I_IRQHandler_Serial5>:
    c7ac:	4b16      	ldr	r3, [pc, #88]	; (c808 <_GLOBAL__sub_I_IRQHandler_Serial5+0x5c>)
    c7ae:	2200      	movs	r2, #0
    c7b0:	605a      	str	r2, [r3, #4]
    c7b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c7b6:	6099      	str	r1, [r3, #8]
    c7b8:	731a      	strb	r2, [r3, #12]
	constexpr HardwareSerial(IMXRT_LPUART_t *myport, const hardware_t *myhardware, 
		volatile BUFTYPE *_tx_buffer, size_t _tx_buffer_size, 
		volatile BUFTYPE *_rx_buffer, size_t _rx_buffer_size) :
		port(myport), hardware(myhardware),
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7ba:	4914      	ldr	r1, [pc, #80]	; (c80c <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    c7bc:	6019      	str	r1, [r3, #0]
		port(myport), hardware(myhardware),
    c7be:	4914      	ldr	r1, [pc, #80]	; (c810 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    c7c0:	6119      	str	r1, [r3, #16]
    c7c2:	4914      	ldr	r1, [pc, #80]	; (c814 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    c7c4:	6159      	str	r1, [r3, #20]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7c6:	761a      	strb	r2, [r3, #24]
    c7c8:	765a      	strb	r2, [r3, #25]
    c7ca:	769a      	strb	r2, [r3, #26]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c7cc:	4912      	ldr	r1, [pc, #72]	; (c818 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
    c7ce:	61d9      	str	r1, [r3, #28]
    c7d0:	4912      	ldr	r1, [pc, #72]	; (c81c <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
    c7d2:	6219      	str	r1, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7d4:	625a      	str	r2, [r3, #36]	; 0x24
    c7d6:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    c7d8:	2028      	movs	r0, #40	; 0x28
    c7da:	62d8      	str	r0, [r3, #44]	; 0x2c
    c7dc:	2140      	movs	r1, #64	; 0x40
    c7de:	6319      	str	r1, [r3, #48]	; 0x30
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    c7e0:	6358      	str	r0, [r3, #52]	; 0x34
    c7e2:	6399      	str	r1, [r3, #56]	; 0x38
    c7e4:	63da      	str	r2, [r3, #60]	; 0x3c
    c7e6:	641a      	str	r2, [r3, #64]	; 0x40
    c7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    c7ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    c7f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    c7f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    c7f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    c7fc:	651a      	str	r2, [r3, #80]	; 0x50
    c7fe:	655a      	str	r2, [r3, #84]	; 0x54
    c800:	659a      	str	r2, [r3, #88]	; 0x58
    c802:	65da      	str	r2, [r3, #92]	; 0x5c
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    c804:	4770      	bx	lr
    c806:	bf00      	nop
    c808:	20004724 	.word	0x20004724
    c80c:	200023e4 	.word	0x200023e4
    c810:	401a0000 	.word	0x401a0000
    c814:	20003364 	.word	0x20003364
    c818:	20004b94 	.word	0x20004b94
    c81c:	20004b54 	.word	0x20004b54

0000c820 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
    c822:	b179      	cbz	r1, c844 <Print::write(unsigned char const*, unsigned int)+0x24>
    c824:	4606      	mov	r6, r0
    c826:	460c      	mov	r4, r1
	size_t count = 0;
	while (size--) count += write(*buffer++);
    c828:	b172      	cbz	r2, c848 <Print::write(unsigned char const*, unsigned int)+0x28>
    c82a:	188f      	adds	r7, r1, r2
	size_t count = 0;
    c82c:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
    c82e:	6833      	ldr	r3, [r6, #0]
    c830:	681b      	ldr	r3, [r3, #0]
    c832:	f814 1b01 	ldrb.w	r1, [r4], #1
    c836:	4630      	mov	r0, r6
    c838:	4798      	blx	r3
    c83a:	4405      	add	r5, r0
    c83c:	42a7      	cmp	r7, r4
    c83e:	d1f6      	bne.n	c82e <Print::write(unsigned char const*, unsigned int)+0xe>
	return count;
}
    c840:	4628      	mov	r0, r5
    c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
    c844:	2500      	movs	r5, #0
    c846:	e7fb      	b.n	c840 <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
    c848:	4615      	mov	r5, r2
    c84a:	e7f9      	b.n	c840 <Print::write(unsigned char const*, unsigned int)+0x20>

0000c84c <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    c84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c850:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
    c852:	688c      	ldr	r4, [r1, #8]
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    c854:	b1ec      	cbz	r4, c892 <Print::print(String const&)+0x46>
    c856:	4606      	mov	r6, r0
    c858:	4688      	mov	r8, r1
	unsigned int index = 0;
    c85a:	2500      	movs	r5, #0
	size_t count = 0;
    c85c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    c85e:	f04f 0921 	mov.w	r9, #33	; 0x21
    c862:	462b      	mov	r3, r5
    c864:	464a      	mov	r2, r9
    c866:	a901      	add	r1, sp, #4
    c868:	4640      	mov	r0, r8
    c86a:	f000 fb8d 	bl	cf88 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    c86e:	4622      	mov	r2, r4
    c870:	2c20      	cmp	r4, #32
    c872:	bf28      	it	cs
    c874:	2220      	movcs	r2, #32
		index += nbytes;
    c876:	4415      	add	r5, r2
		len -= nbytes;
    c878:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    c87a:	6833      	ldr	r3, [r6, #0]
    c87c:	685b      	ldr	r3, [r3, #4]
    c87e:	a901      	add	r1, sp, #4
    c880:	4630      	mov	r0, r6
    c882:	4798      	blx	r3
    c884:	4407      	add	r7, r0
	while (len > 0) {
    c886:	2c00      	cmp	r4, #0
    c888:	d1eb      	bne.n	c862 <Print::print(String const&)+0x16>
	}
	return count;
}
    c88a:	4638      	mov	r0, r7
    c88c:	b00b      	add	sp, #44	; 0x2c
    c88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
    c892:	4627      	mov	r7, r4
	return count;
    c894:	e7f9      	b.n	c88a <Print::print(String const&)+0x3e>

0000c896 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    c896:	b500      	push	{lr}
    c898:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c89a:	f640 230d 	movw	r3, #2573	; 0xa0d
    c89e:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c8a2:	6803      	ldr	r3, [r0, #0]
    c8a4:	685b      	ldr	r3, [r3, #4]
    c8a6:	2202      	movs	r2, #2
    c8a8:	a901      	add	r1, sp, #4
    c8aa:	4798      	blx	r3
}
    c8ac:	b003      	add	sp, #12
    c8ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000c8b4 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    c8b4:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c8b6:	4b04      	ldr	r3, [pc, #16]	; (c8c8 <_write+0x14>)
    c8b8:	2802      	cmp	r0, #2
    c8ba:	bf88      	it	hi
    c8bc:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c8be:	6818      	ldr	r0, [r3, #0]
    c8c0:	6844      	ldr	r4, [r0, #4]
    c8c2:	4618      	mov	r0, r3
    c8c4:	47a0      	blx	r4
}
    c8c6:	bd10      	pop	{r4, pc}
    c8c8:	20003354 	.word	0x20003354

0000c8cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    c8cc:	b530      	push	{r4, r5, lr}
    c8ce:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    c8d0:	b92a      	cbnz	r2, c8de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
    c8d2:	6803      	ldr	r3, [r0, #0]
    c8d4:	681b      	ldr	r3, [r3, #0]
    c8d6:	b2c9      	uxtb	r1, r1
    c8d8:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    c8da:	b00b      	add	sp, #44	; 0x2c
    c8dc:	bd30      	pop	{r4, r5, pc}
    c8de:	4696      	mov	lr, r2
		base = 10;
    c8e0:	2a01      	cmp	r2, #1
    c8e2:	bf14      	ite	ne
    c8e4:	4696      	movne	lr, r2
    c8e6:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
    c8ea:	b9b9      	cbnz	r1, c91c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
    c8ec:	2230      	movs	r2, #48	; 0x30
    c8ee:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c8f2:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
    c8f6:	b14b      	cbz	r3, c90c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
    c8f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c8fc:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
    c900:	f10c 0328 	add.w	r3, ip, #40	; 0x28
    c904:	446b      	add	r3, sp
    c906:	222d      	movs	r2, #45	; 0x2d
    c908:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
    c90c:	6803      	ldr	r3, [r0, #0]
    c90e:	685b      	ldr	r3, [r3, #4]
    c910:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
    c914:	a901      	add	r1, sp, #4
    c916:	4461      	add	r1, ip
    c918:	4798      	blx	r3
    c91a:	e7de      	b.n	c8da <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
    c91c:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
    c920:	4674      	mov	r4, lr
    c922:	e004      	b.n	c92e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
    c924:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c928:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
    c92c:	4611      	mov	r1, r2
			digit = n % base;
    c92e:	fbb1 f2fe 	udiv	r2, r1, lr
    c932:	fb0e 1212 	mls	r2, lr, r2, r1
    c936:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c938:	2a09      	cmp	r2, #9
    c93a:	bf94      	ite	ls
    c93c:	3230      	addls	r2, #48	; 0x30
    c93e:	3237      	addhi	r2, #55	; 0x37
    c940:	b2d2      	uxtb	r2, r2
    c942:	f10c 0528 	add.w	r5, ip, #40	; 0x28
    c946:	446d      	add	r5, sp
    c948:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    c94c:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
    c950:	428c      	cmp	r4, r1
    c952:	d9e7      	bls.n	c924 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
    c954:	e7cf      	b.n	c8f6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>
	...

0000c958 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    c958:	b570      	push	{r4, r5, r6, lr}
    c95a:	ed2d 8b02 	vpush	{d8}
    c95e:	b086      	sub	sp, #24
    c960:	4605      	mov	r5, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c962:	eeb4 0b40 	vcmp.f64	d0, d0
    c966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c96a:	d666      	bvs.n	ca3a <Print::printFloat(double, unsigned char)+0xe2>
    c96c:	460c      	mov	r4, r1
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c96e:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c972:	ed9f 6b4b 	vldr	d6, [pc, #300]	; caa0 <Print::printFloat(double, unsigned char)+0x148>
    c976:	eeb4 7b46 	vcmp.f64	d7, d6
    c97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c97e:	dc63      	bgt.n	ca48 <Print::printFloat(double, unsigned char)+0xf0>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c980:	ed9f 7b49 	vldr	d7, [pc, #292]	; caa8 <Print::printFloat(double, unsigned char)+0x150>
    c984:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c98c:	dc67      	bgt.n	ca5e <Print::printFloat(double, unsigned char)+0x106>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c98e:	ed9f 7b48 	vldr	d7, [pc, #288]	; cab0 <Print::printFloat(double, unsigned char)+0x158>
    c992:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c99a:	d467      	bmi.n	ca6c <Print::printFloat(double, unsigned char)+0x114>
	
	// Handle negative numbers
	if (number < 0.0) {
    c99c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    c9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c9a4:	d469      	bmi.n	ca7a <Print::printFloat(double, unsigned char)+0x122>
	uint8_t sign=0;
    c9a6:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    c9a8:	2c00      	cmp	r4, #0
    c9aa:	d06a      	beq.n	ca82 <Print::printFloat(double, unsigned char)+0x12a>
    c9ac:	f04f 0c00 	mov.w	ip, #0
	double rounding = 0.5;
    c9b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
		rounding *= 0.1;
    c9b4:	ed9f 6b40 	vldr	d6, [pc, #256]	; cab8 <Print::printFloat(double, unsigned char)+0x160>
    c9b8:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    c9bc:	f10c 0c01 	add.w	ip, ip, #1
    c9c0:	fa5f f28c 	uxtb.w	r2, ip
    c9c4:	4294      	cmp	r4, r2
    c9c6:	d8f7      	bhi.n	c9b8 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    c9c8:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    c9cc:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    c9d0:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    c9d4:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    c9d8:	220a      	movs	r2, #10
    c9da:	ee17 1a90 	vmov	r1, s15
    c9de:	4628      	mov	r0, r5
    c9e0:	f7ff ff74 	bl	c8cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    c9e4:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    c9e6:	232e      	movs	r3, #46	; 0x2e
    c9e8:	f88d 3008 	strb.w	r3, [sp, #8]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
    c9ec:	2c0f      	cmp	r4, #15
    c9ee:	bf28      	it	cs
    c9f0:	240f      	movcs	r4, #15

		while (digits-- > 0) {
    c9f2:	aa02      	add	r2, sp, #8
    c9f4:	1e60      	subs	r0, r4, #1
    c9f6:	f10d 0309 	add.w	r3, sp, #9
    c9fa:	fa53 f080 	uxtab	r0, r3, r0
			remainder *= 10.0;
    c9fe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    ca02:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    ca06:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    ca0a:	edcd 7a01 	vstr	s15, [sp, #4]
    ca0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
    ca12:	f103 0130 	add.w	r1, r3, #48	; 0x30
    ca16:	f802 1f01 	strb.w	r1, [r2, #1]!
			remainder -= n; 
    ca1a:	ee07 3a90 	vmov	s15, r3
    ca1e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
    ca22:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    ca26:	4282      	cmp	r2, r0
    ca28:	d1eb      	bne.n	ca02 <Print::printFloat(double, unsigned char)+0xaa>
			buf[count++] = '0' + n;
    ca2a:	3401      	adds	r4, #1
		}
		count += write(buf, count);
    ca2c:	682b      	ldr	r3, [r5, #0]
    ca2e:	685b      	ldr	r3, [r3, #4]
    ca30:	b2e2      	uxtb	r2, r4
    ca32:	a902      	add	r1, sp, #8
    ca34:	4628      	mov	r0, r5
    ca36:	4798      	blx	r3
    ca38:	e00c      	b.n	ca54 <Print::printFloat(double, unsigned char)+0xfc>
							  return write((const uint8_t *)str, strlen(str)); }
    ca3a:	6803      	ldr	r3, [r0, #0]
    ca3c:	685b      	ldr	r3, [r3, #4]
    ca3e:	2203      	movs	r2, #3
    ca40:	491f      	ldr	r1, [pc, #124]	; (cac0 <Print::printFloat(double, unsigned char)+0x168>)
    ca42:	4798      	blx	r3
    ca44:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    ca46:	e005      	b.n	ca54 <Print::printFloat(double, unsigned char)+0xfc>
    ca48:	6803      	ldr	r3, [r0, #0]
    ca4a:	685b      	ldr	r3, [r3, #4]
    ca4c:	2203      	movs	r2, #3
    ca4e:	491d      	ldr	r1, [pc, #116]	; (cac4 <Print::printFloat(double, unsigned char)+0x16c>)
    ca50:	4798      	blx	r3
    ca52:	4606      	mov	r6, r0
	}
	return count;
}
    ca54:	4630      	mov	r0, r6
    ca56:	b006      	add	sp, #24
    ca58:	ecbd 8b02 	vpop	{d8}
    ca5c:	bd70      	pop	{r4, r5, r6, pc}
    ca5e:	6803      	ldr	r3, [r0, #0]
    ca60:	685b      	ldr	r3, [r3, #4]
    ca62:	2203      	movs	r2, #3
    ca64:	4918      	ldr	r1, [pc, #96]	; (cac8 <Print::printFloat(double, unsigned char)+0x170>)
    ca66:	4798      	blx	r3
    ca68:	4606      	mov	r6, r0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    ca6a:	e7f3      	b.n	ca54 <Print::printFloat(double, unsigned char)+0xfc>
    ca6c:	6803      	ldr	r3, [r0, #0]
    ca6e:	685b      	ldr	r3, [r3, #4]
    ca70:	2203      	movs	r2, #3
    ca72:	4915      	ldr	r1, [pc, #84]	; (cac8 <Print::printFloat(double, unsigned char)+0x170>)
    ca74:	4798      	blx	r3
    ca76:	4606      	mov	r6, r0
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    ca78:	e7ec      	b.n	ca54 <Print::printFloat(double, unsigned char)+0xfc>
		number = -number;
    ca7a:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    ca7e:	2301      	movs	r3, #1
    ca80:	e792      	b.n	c9a8 <Print::printFloat(double, unsigned char)+0x50>
	number += rounding;
    ca82:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    ca86:	ee30 0b07 	vadd.f64	d0, d0, d7
	count += printNumber(int_part, 10, sign);
    ca8a:	220a      	movs	r2, #10
    ca8c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    ca90:	ee17 1a90 	vmov	r1, s15
    ca94:	4628      	mov	r0, r5
    ca96:	f7ff ff19 	bl	c8cc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    ca9a:	4606      	mov	r6, r0
	if (digits > 0) {
    ca9c:	e7da      	b.n	ca54 <Print::printFloat(double, unsigned char)+0xfc>
    ca9e:	bf00      	nop
    caa0:	ffffffff 	.word	0xffffffff
    caa4:	7fefffff 	.word	0x7fefffff
    caa8:	e0000000 	.word	0xe0000000
    caac:	41efffff 	.word	0x41efffff
    cab0:	e0000000 	.word	0xe0000000
    cab4:	c1efffff 	.word	0xc1efffff
    cab8:	9999999a 	.word	0x9999999a
    cabc:	3fb99999 	.word	0x3fb99999
    cac0:	2000225c 	.word	0x2000225c
    cac4:	20002260 	.word	0x20002260
    cac8:	20002264 	.word	0x20002264

0000cacc <Stream::timedPeek()>:
{
    cacc:	b570      	push	{r4, r5, r6, lr}
    cace:	4604      	mov	r4, r0
    cad0:	4b09      	ldr	r3, [pc, #36]	; (caf8 <Stream::timedPeek()+0x2c>)
    cad2:	681e      	ldr	r6, [r3, #0]
    cad4:	461d      	mov	r5, r3
    c = peek();
    cad6:	6823      	ldr	r3, [r4, #0]
    cad8:	699b      	ldr	r3, [r3, #24]
    cada:	4620      	mov	r0, r4
    cadc:	4798      	blx	r3
    if (c >= 0) return c;
    cade:	2800      	cmp	r0, #0
    cae0:	da08      	bge.n	caf4 <Stream::timedPeek()+0x28>
    yield();
    cae2:	f002 fb25 	bl	f130 <yield>
    cae6:	682b      	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    cae8:	1b9b      	subs	r3, r3, r6
    caea:	68a2      	ldr	r2, [r4, #8]
    caec:	4293      	cmp	r3, r2
    caee:	d3f2      	bcc.n	cad6 <Stream::timedPeek()+0xa>
  return -1;     // -1 indicates timeout
    caf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    caf4:	bd70      	pop	{r4, r5, r6, pc}
    caf6:	bf00      	nop
    caf8:	20005388 	.word	0x20005388

0000cafc <Stream::peekNextDigit()>:
{
    cafc:	b510      	push	{r4, lr}
    cafe:	4604      	mov	r4, r0
    cb00:	e003      	b.n	cb0a <Stream::peekNextDigit()+0xe>
    read();  // discard non-numeric
    cb02:	6823      	ldr	r3, [r4, #0]
    cb04:	695b      	ldr	r3, [r3, #20]
    cb06:	4620      	mov	r0, r4
    cb08:	4798      	blx	r3
    c = timedPeek();
    cb0a:	4620      	mov	r0, r4
    cb0c:	f7ff ffde 	bl	cacc <Stream::timedPeek()>
    if (c == '-') return c;
    cb10:	282d      	cmp	r0, #45	; 0x2d
    cb12:	d005      	beq.n	cb20 <Stream::peekNextDigit()+0x24>
    cb14:	2800      	cmp	r0, #0
    cb16:	db03      	blt.n	cb20 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    cb18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    cb1c:	2b09      	cmp	r3, #9
    cb1e:	d8f0      	bhi.n	cb02 <Stream::peekNextDigit()+0x6>
}
    cb20:	bd10      	pop	{r4, pc}
	...

0000cb24 <Stream::parseFloat(char)>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    cb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cb28:	ed2d 8b02 	vpush	{d8}
    cb2c:	4604      	mov	r4, r0
    cb2e:	460d      	mov	r5, r1
  boolean isFraction = false;
  long value = 0;
  int c;
  float fraction = 1.0;

  c = peekNextDigit();
    cb30:	f7ff ffe4 	bl	cafc <Stream::peekNextDigit()>
    // ignore non numeric leading characters
  if(c < 0)
    cb34:	2800      	cmp	r0, #0
    cb36:	db45      	blt.n	cbc4 <Stream::parseFloat(char)+0xa0>
  float fraction = 1.0;
    cb38:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
  long value = 0;
    cb3c:	f04f 0900 	mov.w	r9, #0
  boolean isFraction = false;
    cb40:	464f      	mov	r7, r9
  boolean isNegative = false;
    cb42:	46c8      	mov	r8, r9

  do{
    if(c == skipChar)
      ; // ignore
    else if(c == '-')
      isNegative = true;
    cb44:	2601      	movs	r6, #1
    else if (c == '.')
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
      value = value * 10 + c - '0';
      if(isFraction)
         fraction *= 0.1f;
    cb46:	eddf 8a21 	vldr	s17, [pc, #132]	; cbcc <Stream::parseFloat(char)+0xa8>
    cb4a:	e00f      	b.n	cb6c <Stream::parseFloat(char)+0x48>
      isNegative = true;
    cb4c:	46b0      	mov	r8, r6
    }
    read();  // consume the character we got with peek
    cb4e:	6823      	ldr	r3, [r4, #0]
    cb50:	695b      	ldr	r3, [r3, #20]
    cb52:	4620      	mov	r0, r4
    cb54:	4798      	blx	r3
    c = timedPeek();
    cb56:	4620      	mov	r0, r4
    cb58:	f7ff ffb8 	bl	cacc <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );
    cb5c:	4285      	cmp	r5, r0
    cb5e:	bf18      	it	ne
    cb60:	282e      	cmpne	r0, #46	; 0x2e
    cb62:	d003      	beq.n	cb6c <Stream::parseFloat(char)+0x48>
    cb64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    cb68:	2b09      	cmp	r3, #9
    cb6a:	d816      	bhi.n	cb9a <Stream::parseFloat(char)+0x76>
    if(c == skipChar)
    cb6c:	4285      	cmp	r5, r0
    cb6e:	d0ee      	beq.n	cb4e <Stream::parseFloat(char)+0x2a>
    else if(c == '-')
    cb70:	282d      	cmp	r0, #45	; 0x2d
    cb72:	d0eb      	beq.n	cb4c <Stream::parseFloat(char)+0x28>
    else if (c == '.')
    cb74:	282e      	cmp	r0, #46	; 0x2e
    cb76:	d00e      	beq.n	cb96 <Stream::parseFloat(char)+0x72>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    cb78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    cb7c:	2b09      	cmp	r3, #9
    cb7e:	d8e6      	bhi.n	cb4e <Stream::parseFloat(char)+0x2a>
      value = value * 10 + c - '0';
    cb80:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    cb84:	eb00 0049 	add.w	r0, r0, r9, lsl #1
    cb88:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
      if(isFraction)
    cb8c:	2f00      	cmp	r7, #0
    cb8e:	d0de      	beq.n	cb4e <Stream::parseFloat(char)+0x2a>
         fraction *= 0.1f;
    cb90:	ee28 8a28 	vmul.f32	s16, s16, s17
    cb94:	e7db      	b.n	cb4e <Stream::parseFloat(char)+0x2a>
      isFraction = true;
    cb96:	4637      	mov	r7, r6
    cb98:	e7d9      	b.n	cb4e <Stream::parseFloat(char)+0x2a>

  if(isNegative)
    cb9a:	f1b8 0f00 	cmp.w	r8, #0
    cb9e:	d001      	beq.n	cba4 <Stream::parseFloat(char)+0x80>
    value = -value;
    cba0:	f1c9 0900 	rsb	r9, r9, #0
  if(isFraction)
    cba4:	b14f      	cbz	r7, cbba <Stream::parseFloat(char)+0x96>
    return value * fraction;
    cba6:	ee07 9a90 	vmov	s15, r9
    cbaa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    cbae:	ee20 0a08 	vmul.f32	s0, s0, s16
  else
    return value;
}
    cbb2:	ecbd 8b02 	vpop	{d8}
    cbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return value;
    cbba:	ee07 9a90 	vmov	s15, r9
    cbbe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    cbc2:	e7f6      	b.n	cbb2 <Stream::parseFloat(char)+0x8e>
    return 0; // zero returned if timeout
    cbc4:	ed9f 0a02 	vldr	s0, [pc, #8]	; cbd0 <Stream::parseFloat(char)+0xac>
    cbc8:	e7f3      	b.n	cbb2 <Stream::parseFloat(char)+0x8e>
    cbca:	bf00      	nop
    cbcc:	3dcccccd 	.word	0x3dcccccd
    cbd0:	00000000 	.word	0x00000000

0000cbd4 <Stream::parseFloat()>:
{
    cbd4:	b508      	push	{r3, lr}
  return parseFloat(NO_SKIP_CHAR);
    cbd6:	2101      	movs	r1, #1
    cbd8:	f7ff ffa4 	bl	cb24 <Stream::parseFloat(char)>
}
    cbdc:	bd08      	pop	{r3, pc}
	...

0000cbe0 <breakTime(unsigned long, DateTimeFields&)>:
#define SECS_PER_HOUR 3600
#define SECS_PER_DAY  86400


void breakTime(uint32_t time, DateTimeFields &tm)
{
    cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;

  tm.sec = time % 60;
    cbe4:	4b59      	ldr	r3, [pc, #356]	; (cd4c <breakTime(unsigned long, DateTimeFields&)+0x16c>)
    cbe6:	fba3 4200 	umull	r4, r2, r3, r0
    cbea:	0952      	lsrs	r2, r2, #5
    cbec:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
    cbf0:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    cbf4:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.min = time % 60;
    cbf6:	fba3 0302 	umull	r0, r3, r3, r2
    cbfa:	095b      	lsrs	r3, r3, #5
    cbfc:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
    cc00:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
    cc04:	704a      	strb	r2, [r1, #1]
  time /= 60; // now it is hours
  tm.hour = time % 24;
    cc06:	4a52      	ldr	r2, [pc, #328]	; (cd50 <breakTime(unsigned long, DateTimeFields&)+0x170>)
    cc08:	fba2 2e03 	umull	r2, lr, r2, r3
    cc0c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    cc10:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
    cc14:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
    cc18:	708b      	strb	r3, [r1, #2]
  time /= 24; // now it is days
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
    cc1a:	f10e 0204 	add.w	r2, lr, #4
    cc1e:	4b4d      	ldr	r3, [pc, #308]	; (cd54 <breakTime(unsigned long, DateTimeFields&)+0x174>)
    cc20:	fba3 0302 	umull	r0, r3, r3, r2
    cc24:	1ad0      	subs	r0, r2, r3
    cc26:	eb03 0350 	add.w	r3, r3, r0, lsr #1
    cc2a:	089b      	lsrs	r3, r3, #2
    cc2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    cc30:	1ad2      	subs	r2, r2, r3
    cc32:	70ca      	strb	r2, [r1, #3]

  year = 0;
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cc34:	2000      	movs	r0, #0
  days = 0;
    cc36:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    cc38:	f240 176d 	movw	r7, #365	; 0x16d
    cc3c:	4e46      	ldr	r6, [pc, #280]	; (cd58 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cc3e:	f04f 0864 	mov.w	r8, #100	; 0x64
    cc42:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
    cc46:	f44f 79c8 	mov.w	r9, #400	; 0x190
    cc4a:	e004      	b.n	cc56 <breakTime(unsigned long, DateTimeFields&)+0x76>
    cc4c:	463c      	mov	r4, r7
    cc4e:	4422      	add	r2, r4
    cc50:	3001      	adds	r0, #1
    cc52:	4596      	cmp	lr, r2
    cc54:	d319      	bcc.n	cc8a <breakTime(unsigned long, DateTimeFields&)+0xaa>
    cc56:	fa5f fc80 	uxtb.w	ip, r0
    cc5a:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
    cc5e:	f013 0503 	ands.w	r5, r3, #3
    cc62:	d1f3      	bne.n	cc4c <breakTime(unsigned long, DateTimeFields&)+0x6c>
    cc64:	fb86 b403 	smull	fp, r4, r6, r3
    cc68:	1164      	asrs	r4, r4, #5
    cc6a:	fb08 3414 	mls	r4, r8, r4, r3
    cc6e:	b954      	cbnz	r4, cc86 <breakTime(unsigned long, DateTimeFields&)+0xa6>
    cc70:	fb86 b403 	smull	fp, r4, r6, r3
    cc74:	11e4      	asrs	r4, r4, #7
    cc76:	fb09 3414 	mls	r4, r9, r4, r3
    cc7a:	2c00      	cmp	r4, #0
    cc7c:	bf14      	ite	ne
    cc7e:	463c      	movne	r4, r7
    cc80:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    cc84:	e7e3      	b.n	cc4e <breakTime(unsigned long, DateTimeFields&)+0x6e>
    cc86:	4654      	mov	r4, sl
    cc88:	e7e1      	b.n	cc4e <breakTime(unsigned long, DateTimeFields&)+0x6e>
    year++;
  }
  tm.year = year + 70; // year is offset from 1970
    cc8a:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
    cc8e:	f881 c006 	strb.w	ip, [r1, #6]

  days -= LEAP_YEAR(year) ? 366 : 365;
    cc92:	b9b5      	cbnz	r5, ccc2 <breakTime(unsigned long, DateTimeFields&)+0xe2>
    cc94:	4830      	ldr	r0, [pc, #192]	; (cd58 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cc96:	fb80 4003 	smull	r4, r0, r0, r3
    cc9a:	1140      	asrs	r0, r0, #5
    cc9c:	2464      	movs	r4, #100	; 0x64
    cc9e:	fb04 3010 	mls	r0, r4, r0, r3
    cca2:	bb50      	cbnz	r0, ccfa <breakTime(unsigned long, DateTimeFields&)+0x11a>
    cca4:	482c      	ldr	r0, [pc, #176]	; (cd58 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    cca6:	fb80 4003 	smull	r4, r0, r0, r3
    ccaa:	11c0      	asrs	r0, r0, #7
    ccac:	f44f 74c8 	mov.w	r4, #400	; 0x190
    ccb0:	fb04 3010 	mls	r0, r4, r0, r3
    ccb4:	2800      	cmp	r0, #0
    ccb6:	f240 106d 	movw	r0, #365	; 0x16d
    ccba:	bf08      	it	eq
    ccbc:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    ccc0:	e001      	b.n	ccc6 <breakTime(unsigned long, DateTimeFields&)+0xe6>
    ccc2:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
    ccc6:	ebae 0e02 	sub.w	lr, lr, r2
    ccca:	eb00 020e 	add.w	r2, r0, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    ccce:	4f22      	ldr	r7, [pc, #136]	; (cd58 <breakTime(unsigned long, DateTimeFields&)+0x178>)
    ccd0:	fb87 0703 	smull	r0, r7, r7, r3
    ccd4:	ea4f 1e67 	mov.w	lr, r7, asr #5
    ccd8:	2064      	movs	r0, #100	; 0x64
    ccda:	fb00 3e1e 	mls	lr, r0, lr, r3
    ccde:	11ff      	asrs	r7, r7, #7
    cce0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    cce4:	fb00 3717 	mls	r7, r0, r7, r3
    cce8:	2301      	movs	r3, #1
    ccea:	2000      	movs	r0, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    ccec:	f8df c06c 	ldr.w	ip, [pc, #108]	; cd5c <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
    ccf0:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
    ccf4:	f04f 091d 	mov.w	r9, #29
    ccf8:	e014      	b.n	cd24 <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
    ccfa:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    ccfe:	e7e2      	b.n	ccc6 <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
    cd00:	b94d      	cbnz	r5, cd16 <breakTime(unsigned long, DateTimeFields&)+0x136>
    cd02:	f1be 0f00 	cmp.w	lr, #0
    cd06:	d11c      	bne.n	cd42 <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
    cd08:	2f00      	cmp	r7, #0
    cd0a:	bf14      	ite	ne
    cd0c:	241c      	movne	r4, #28
    cd0e:	241d      	moveq	r4, #29
    cd10:	e002      	b.n	cd18 <breakTime(unsigned long, DateTimeFields&)+0x138>
    cd12:	4633      	mov	r3, r6
    cd14:	e010      	b.n	cd38 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
    cd16:	4644      	mov	r4, r8
    }

    if (time >= monthLength) {
    cd18:	4294      	cmp	r4, r2
    cd1a:	d814      	bhi.n	cd46 <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
    cd1c:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    cd1e:	3001      	adds	r0, #1
    cd20:	3301      	adds	r3, #1
    cd22:	b2db      	uxtb	r3, r3
    cd24:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
    cd26:	2e01      	cmp	r6, #1
    cd28:	d0ea      	beq.n	cd00 <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
    cd2a:	f810 400c 	ldrb.w	r4, [r0, ip]
    cd2e:	4294      	cmp	r4, r2
    cd30:	d8ef      	bhi.n	cd12 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
    cd32:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
    cd34:	2b0b      	cmp	r3, #11
    cd36:	d9f2      	bls.n	cd1e <breakTime(unsigned long, DateTimeFields&)+0x13e>
    } else {
        break;
    }
  }
  tm.mon = month;  // jan is month 0
    cd38:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
    cd3a:	3201      	adds	r2, #1
    cd3c:	710a      	strb	r2, [r1, #4]
}
    cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
    cd42:	464c      	mov	r4, r9
    cd44:	e7e8      	b.n	cd18 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
    cd46:	4633      	mov	r3, r6
    cd48:	e7f6      	b.n	cd38 <breakTime(unsigned long, DateTimeFields&)+0x158>
    cd4a:	bf00      	nop
    cd4c:	88888889 	.word	0x88888889
    cd50:	aaaaaaab 	.word	0xaaaaaaab
    cd54:	24924925 	.word	0x24924925
    cd58:	51eb851f 	.word	0x51eb851f
    cd5c:	20001f7c 	.word	0x20001f7c

0000cd60 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    cd60:	b510      	push	{r4, lr}
    cd62:	4604      	mov	r4, r0
{
	free(buffer);
    cd64:	6800      	ldr	r0, [r0, #0]
    cd66:	f004 f8c9 	bl	10efc <free>
}
    cd6a:	4620      	mov	r0, r4
    cd6c:	bd10      	pop	{r4, pc}

0000cd6e <String::changeBuffer(unsigned int)>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    cd6e:	b538      	push	{r3, r4, r5, lr}
    cd70:	4604      	mov	r4, r0
    cd72:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    cd74:	3101      	adds	r1, #1
    cd76:	6800      	ldr	r0, [r0, #0]
    cd78:	f005 f936 	bl	11fe8 <realloc>
	if (newbuffer) {
    cd7c:	b118      	cbz	r0, cd86 <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
    cd7e:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    cd80:	6065      	str	r5, [r4, #4]
		return 1;
    cd82:	2001      	movs	r0, #1
	}
	return 0;
}
    cd84:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
    cd86:	2000      	movs	r0, #0
    cd88:	e7fc      	b.n	cd84 <String::changeBuffer(unsigned int)+0x16>

0000cd8a <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
    cd8a:	6843      	ldr	r3, [r0, #4]
    cd8c:	428b      	cmp	r3, r1
    cd8e:	d301      	bcc.n	cd94 <String::reserve(unsigned int)+0xa>
    cd90:	2001      	movs	r0, #1
}
    cd92:	4770      	bx	lr
{
    cd94:	b510      	push	{r4, lr}
    cd96:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
    cd98:	f7ff ffe9 	bl	cd6e <String::changeBuffer(unsigned int)>
    cd9c:	b900      	cbnz	r0, cda0 <String::reserve(unsigned int)+0x16>
}
    cd9e:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
    cda0:	68a3      	ldr	r3, [r4, #8]
    cda2:	b923      	cbnz	r3, cdae <String::reserve(unsigned int)+0x24>
    cda4:	6823      	ldr	r3, [r4, #0]
    cda6:	2200      	movs	r2, #0
    cda8:	701a      	strb	r2, [r3, #0]
		return 1;
    cdaa:	2001      	movs	r0, #1
    cdac:	e7f7      	b.n	cd9e <String::reserve(unsigned int)+0x14>
    cdae:	2001      	movs	r0, #1
    cdb0:	e7f5      	b.n	cd9e <String::reserve(unsigned int)+0x14>

0000cdb2 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    cdb2:	b570      	push	{r4, r5, r6, lr}
    cdb4:	4604      	mov	r4, r0
	if (length == 0) {
    cdb6:	b932      	cbnz	r2, cdc6 <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
    cdb8:	6803      	ldr	r3, [r0, #0]
    cdba:	b103      	cbz	r3, cdbe <String::copy(char const*, unsigned int)+0xc>
    cdbc:	701a      	strb	r2, [r3, #0]
		len = 0;
    cdbe:	2300      	movs	r3, #0
    cdc0:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    cdc2:	4620      	mov	r0, r4
    cdc4:	bd70      	pop	{r4, r5, r6, pc}
    cdc6:	460d      	mov	r5, r1
    cdc8:	4616      	mov	r6, r2
	if (!reserve(length)) {
    cdca:	4611      	mov	r1, r2
    cdcc:	f7ff ffdd 	bl	cd8a <String::reserve(unsigned int)>
    cdd0:	b948      	cbnz	r0, cde6 <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
    cdd2:	6820      	ldr	r0, [r4, #0]
    cdd4:	b118      	cbz	r0, cdde <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    cdd6:	f004 f891 	bl	10efc <free>
			buffer = NULL;
    cdda:	2300      	movs	r3, #0
    cddc:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
    cdde:	2300      	movs	r3, #0
    cde0:	6063      	str	r3, [r4, #4]
    cde2:	60a3      	str	r3, [r4, #8]
		return *this;
    cde4:	e7ed      	b.n	cdc2 <String::copy(char const*, unsigned int)+0x10>
	len = length;
    cde6:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    cde8:	4629      	mov	r1, r5
    cdea:	6820      	ldr	r0, [r4, #0]
    cdec:	f004 fc9a 	bl	11724 <strcpy>
	return *this;
    cdf0:	e7e7      	b.n	cdc2 <String::copy(char const*, unsigned int)+0x10>

0000cdf2 <String::String(char const*)>:
String::String(const char *cstr)
    cdf2:	b538      	push	{r3, r4, r5, lr}
    cdf4:	4604      	mov	r4, r0
	buffer = NULL;
    cdf6:	2300      	movs	r3, #0
    cdf8:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cdfa:	6043      	str	r3, [r0, #4]
	len = 0;
    cdfc:	6083      	str	r3, [r0, #8]
	flags = 0;
    cdfe:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    ce00:	b141      	cbz	r1, ce14 <String::String(char const*)+0x22>
    ce02:	460d      	mov	r5, r1
    ce04:	4608      	mov	r0, r1
    ce06:	f005 fa1b 	bl	12240 <strlen>
    ce0a:	4602      	mov	r2, r0
    ce0c:	4629      	mov	r1, r5
    ce0e:	4620      	mov	r0, r4
    ce10:	f7ff ffcf 	bl	cdb2 <String::copy(char const*, unsigned int)>
}
    ce14:	4620      	mov	r0, r4
    ce16:	bd38      	pop	{r3, r4, r5, pc}

0000ce18 <String::move(String&)>:

void String::move(String &rhs)
{
	if (&rhs == this) return;
    ce18:	4281      	cmp	r1, r0
    ce1a:	d011      	beq.n	ce40 <String::move(String&)+0x28>
{
    ce1c:	b538      	push	{r3, r4, r5, lr}
    ce1e:	4605      	mov	r5, r0
    ce20:	460c      	mov	r4, r1
	if (buffer) free(buffer);
    ce22:	6800      	ldr	r0, [r0, #0]
    ce24:	b108      	cbz	r0, ce2a <String::move(String&)+0x12>
    ce26:	f004 f869 	bl	10efc <free>
	buffer = rhs.buffer;
    ce2a:	6823      	ldr	r3, [r4, #0]
    ce2c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
    ce2e:	6863      	ldr	r3, [r4, #4]
    ce30:	606b      	str	r3, [r5, #4]
	len = rhs.len;
    ce32:	68a3      	ldr	r3, [r4, #8]
    ce34:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
    ce36:	2300      	movs	r3, #0
    ce38:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    ce3a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    ce3c:	60a3      	str	r3, [r4, #8]
}
    ce3e:	bd38      	pop	{r3, r4, r5, pc}
    ce40:	4770      	bx	lr

0000ce42 <String::operator=(String const&)>:

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    ce42:	4288      	cmp	r0, r1
    ce44:	d005      	beq.n	ce52 <String::operator=(String const&)+0x10>
{
    ce46:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
    ce48:	688a      	ldr	r2, [r1, #8]
    ce4a:	6809      	ldr	r1, [r1, #0]
    ce4c:	f7ff ffb1 	bl	cdb2 <String::copy(char const*, unsigned int)>
}
    ce50:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
    ce52:	4608      	mov	r0, r1
}
    ce54:	4770      	bx	lr

0000ce56 <String::String(String const&)>:
String::String(const String &value)
    ce56:	b510      	push	{r4, lr}
    ce58:	4604      	mov	r4, r0
	buffer = NULL;
    ce5a:	2300      	movs	r3, #0
    ce5c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    ce5e:	6043      	str	r3, [r0, #4]
	len = 0;
    ce60:	6083      	str	r3, [r0, #8]
	flags = 0;
    ce62:	7303      	strb	r3, [r0, #12]
	*this = value;
    ce64:	f7ff ffed 	bl	ce42 <String::operator=(String const&)>
}
    ce68:	4620      	mov	r0, r4
    ce6a:	bd10      	pop	{r4, pc}

0000ce6c <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    ce6c:	b510      	push	{r4, lr}
    ce6e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
    ce70:	4288      	cmp	r0, r1
    ce72:	d001      	beq.n	ce78 <String::operator=(String&&)+0xc>
    ce74:	f7ff ffd0 	bl	ce18 <String::move(String&)>
	return *this;
}
    ce78:	4620      	mov	r0, r4
    ce7a:	bd10      	pop	{r4, pc}

0000ce7c <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    ce7c:	b538      	push	{r3, r4, r5, lr}
    ce7e:	4604      	mov	r4, r0
	if (cstr) {
    ce80:	b151      	cbz	r1, ce98 <String::operator=(char const*)+0x1c>
    ce82:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
    ce84:	4608      	mov	r0, r1
    ce86:	f005 f9db 	bl	12240 <strlen>
    ce8a:	4602      	mov	r2, r0
    ce8c:	4629      	mov	r1, r5
    ce8e:	4620      	mov	r0, r4
    ce90:	f7ff ff8f 	bl	cdb2 <String::copy(char const*, unsigned int)>
	} else {
		len = 0;
	}
	return *this;
}
    ce94:	4620      	mov	r0, r4
    ce96:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
    ce98:	2300      	movs	r3, #0
    ce9a:	6083      	str	r3, [r0, #8]
    ce9c:	e7fa      	b.n	ce94 <String::operator=(char const*)+0x18>

0000ce9e <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    ce9e:	b510      	push	{r4, lr}
    cea0:	b08a      	sub	sp, #40	; 0x28
    cea2:	4604      	mov	r4, r0
    cea4:	4608      	mov	r0, r1
	buffer = NULL;
    cea6:	2300      	movs	r3, #0
    cea8:	6023      	str	r3, [r4, #0]
	capacity = 0;
    ceaa:	6063      	str	r3, [r4, #4]
	len = 0;
    ceac:	60a3      	str	r3, [r4, #8]
	flags = 0;
    ceae:	7323      	strb	r3, [r4, #12]
	itoa(value, buf, base);
    ceb0:	a901      	add	r1, sp, #4
    ceb2:	f003 ffff 	bl	10eb4 <itoa>
	*this = buf;
    ceb6:	a901      	add	r1, sp, #4
    ceb8:	4620      	mov	r0, r4
    ceba:	f7ff ffdf 	bl	ce7c <String::operator=(char const*)>
}
    cebe:	4620      	mov	r0, r4
    cec0:	b00a      	add	sp, #40	; 0x28
    cec2:	bd10      	pop	{r4, pc}

0000cec4 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    cec4:	b510      	push	{r4, lr}
    cec6:	b08a      	sub	sp, #40	; 0x28
    cec8:	4604      	mov	r4, r0
	buffer = NULL;
    ceca:	2300      	movs	r3, #0
    cecc:	6003      	str	r3, [r0, #0]
	capacity = 0;
    cece:	6043      	str	r3, [r0, #4]
	len = 0;
    ced0:	6083      	str	r3, [r0, #8]
	flags = 0;
    ced2:	7303      	strb	r3, [r0, #12]
	*this = dtostrf(num, digits + 2, digits, buf);
    ced4:	466a      	mov	r2, sp
    ced6:	1c88      	adds	r0, r1, #2
    ced8:	f000 fb9e 	bl	d618 <dtostrf>
    cedc:	4601      	mov	r1, r0
    cede:	4620      	mov	r0, r4
    cee0:	f7ff ffcc 	bl	ce7c <String::operator=(char const*)>
}
    cee4:	4620      	mov	r0, r4
    cee6:	b00a      	add	sp, #40	; 0x28
    cee8:	bd10      	pop	{r4, pc}

0000ceea <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    ceea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ceee:	4604      	mov	r4, r0
    cef0:	460d      	mov	r5, r1
    cef2:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
    cef4:	6881      	ldr	r1, [r0, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    cef6:	6803      	ldr	r3, [r0, #0]
    cef8:	42ab      	cmp	r3, r5
    cefa:	d806      	bhi.n	cf0a <String::append(char const*, unsigned int)+0x20>
    cefc:	185a      	adds	r2, r3, r1
    cefe:	4295      	cmp	r5, r2
    cf00:	d209      	bcs.n	cf16 <String::append(char const*, unsigned int)+0x2c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    cf02:	1aef      	subs	r7, r5, r3
		self = true;
    cf04:	f04f 0901 	mov.w	r9, #1
    cf08:	e001      	b.n	cf0e <String::append(char const*, unsigned int)+0x24>
	bool self = false;
    cf0a:	f04f 0900 	mov.w	r9, #0
	}
	if (length == 0 || !reserve(newlen)) return *this;
    cf0e:	b92e      	cbnz	r6, cf1c <String::append(char const*, unsigned int)+0x32>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    cf10:	4620      	mov	r0, r4
    cf12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    cf16:	f04f 0900 	mov.w	r9, #0
    cf1a:	e7f8      	b.n	cf0e <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
    cf1c:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
    cf20:	4641      	mov	r1, r8
    cf22:	4620      	mov	r0, r4
    cf24:	f7ff ff31 	bl	cd8a <String::reserve(unsigned int)>
    cf28:	2800      	cmp	r0, #0
    cf2a:	d0f1      	beq.n	cf10 <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
    cf2c:	f1b9 0f00 	cmp.w	r9, #0
    cf30:	d00d      	beq.n	cf4e <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
    cf32:	6823      	ldr	r3, [r4, #0]
    cf34:	68a0      	ldr	r0, [r4, #8]
    cf36:	4632      	mov	r2, r6
    cf38:	19d9      	adds	r1, r3, r7
    cf3a:	4418      	add	r0, r3
    cf3c:	f000 fa98 	bl	d470 <memcpy>
		buffer[newlen] = 0;
    cf40:	6823      	ldr	r3, [r4, #0]
    cf42:	2200      	movs	r2, #0
    cf44:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
    cf48:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
    cf4c:	e7e0      	b.n	cf10 <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
    cf4e:	6820      	ldr	r0, [r4, #0]
    cf50:	68a3      	ldr	r3, [r4, #8]
    cf52:	4629      	mov	r1, r5
    cf54:	4418      	add	r0, r3
    cf56:	f004 fbe5 	bl	11724 <strcpy>
    cf5a:	e7f5      	b.n	cf48 <String::append(char const*, unsigned int)+0x5e>

0000cf5c <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    cf5c:	b510      	push	{r4, lr}
    cf5e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    cf60:	688a      	ldr	r2, [r1, #8]
    cf62:	6809      	ldr	r1, [r1, #0]
    cf64:	f7ff ffc1 	bl	ceea <String::append(char const*, unsigned int)>
	return a;
}
    cf68:	4620      	mov	r0, r4
    cf6a:	bd10      	pop	{r4, pc}

0000cf6c <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    cf6c:	b538      	push	{r3, r4, r5, lr}
    cf6e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    cf70:	b141      	cbz	r1, cf84 <operator+(StringSumHelper const&, char const*)+0x18>
    cf72:	460d      	mov	r5, r1
    cf74:	4608      	mov	r0, r1
    cf76:	f005 f963 	bl	12240 <strlen>
    cf7a:	4602      	mov	r2, r0
    cf7c:	4629      	mov	r1, r5
    cf7e:	4620      	mov	r0, r4
    cf80:	f7ff ffb3 	bl	ceea <String::append(char const*, unsigned int)>
	return a;
}
    cf84:	4620      	mov	r0, r4
    cf86:	bd38      	pop	{r3, r4, r5, pc}

0000cf88 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    cf88:	b1b2      	cbz	r2, cfb8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
    cf8a:	b538      	push	{r3, r4, r5, lr}
    cf8c:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    cf8e:	b124      	cbz	r4, cf9a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    cf90:	6885      	ldr	r5, [r0, #8]
    cf92:	429d      	cmp	r5, r3
    cf94:	d802      	bhi.n	cf9c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    cf96:	2300      	movs	r3, #0
    cf98:	7023      	strb	r3, [r4, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    cf9a:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    cf9c:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    cf9e:	1e51      	subs	r1, r2, #1
    cfa0:	428d      	cmp	r5, r1
    cfa2:	bf28      	it	cs
    cfa4:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
    cfa6:	6801      	ldr	r1, [r0, #0]
    cfa8:	462a      	mov	r2, r5
    cfaa:	4419      	add	r1, r3
    cfac:	4620      	mov	r0, r4
    cfae:	f003 ff4f 	bl	10e50 <strncpy>
	buf[n] = 0;
    cfb2:	2300      	movs	r3, #0
    cfb4:	5563      	strb	r3, [r4, r5]
    cfb6:	e7f0      	b.n	cf9a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
    cfb8:	4770      	bx	lr
	...

0000cfbc <analogRead>:
	if (pin > sizeof(pin_to_channel)) return 0;
    cfbc:	282a      	cmp	r0, #42	; 0x2a
    cfbe:	d83e      	bhi.n	d03e <analogRead+0x82>
{
    cfc0:	b570      	push	{r4, r5, r6, lr}
    cfc2:	4604      	mov	r4, r0
	if (calibrating) wait_for_cal();
    cfc4:	4b20      	ldr	r3, [pc, #128]	; (d048 <analogRead+0x8c>)
    cfc6:	781b      	ldrb	r3, [r3, #0]
    cfc8:	b9b3      	cbnz	r3, cff8 <analogRead+0x3c>
	uint8_t ch = pin_to_channel[pin];
    cfca:	4b20      	ldr	r3, [pc, #128]	; (d04c <analogRead+0x90>)
    cfcc:	5d1b      	ldrb	r3, [r3, r4]
	if (ch == 255) return 0;
    cfce:	2bff      	cmp	r3, #255	; 0xff
    cfd0:	d037      	beq.n	d042 <analogRead+0x86>
	if(!(ch & 0x80)) {
    cfd2:	f013 0f80 	tst.w	r3, #128	; 0x80
    cfd6:	d120      	bne.n	d01a <analogRead+0x5e>
		ADC1_HC0 = ch;
    cfd8:	4a1d      	ldr	r2, [pc, #116]	; (d050 <analogRead+0x94>)
    cfda:	6013      	str	r3, [r2, #0]
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    cfdc:	6a13      	ldr	r3, [r2, #32]
    cfde:	f013 0f01 	tst.w	r3, #1
    cfe2:	d106      	bne.n	cff2 <analogRead+0x36>
    cfe4:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    cfe6:	f002 f8a3 	bl	f130 <yield>
		while (!(ADC1_HS & ADC_HS_COCO0)) {
    cfea:	6a23      	ldr	r3, [r4, #32]
    cfec:	f013 0f01 	tst.w	r3, #1
    cff0:	d0f9      	beq.n	cfe6 <analogRead+0x2a>
		return ADC1_R0;
    cff2:	4b17      	ldr	r3, [pc, #92]	; (d050 <analogRead+0x94>)
    cff4:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    cff6:	bd70      	pop	{r4, r5, r6, pc}
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    cff8:	4d15      	ldr	r5, [pc, #84]	; (d050 <analogRead+0x94>)
    cffa:	4e16      	ldr	r6, [pc, #88]	; (d054 <analogRead+0x98>)
    cffc:	e001      	b.n	d002 <analogRead+0x46>
		yield();
    cffe:	f002 f897 	bl	f130 <yield>
	while ((ADC1_GC & ADC_GC_CAL) || (ADC2_GC & ADC_GC_CAL)) {
    d002:	6cab      	ldr	r3, [r5, #72]	; 0x48
    d004:	f013 0f80 	tst.w	r3, #128	; 0x80
    d008:	d1f9      	bne.n	cffe <analogRead+0x42>
    d00a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
    d00c:	f013 0f80 	tst.w	r3, #128	; 0x80
    d010:	d1f5      	bne.n	cffe <analogRead+0x42>
	calibrating = 0;
    d012:	4b0d      	ldr	r3, [pc, #52]	; (d048 <analogRead+0x8c>)
    d014:	2200      	movs	r2, #0
    d016:	701a      	strb	r2, [r3, #0]
}
    d018:	e7d7      	b.n	cfca <analogRead+0xe>
		ADC2_HC0 = ch & 0x7f;
    d01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d01e:	4a0d      	ldr	r2, [pc, #52]	; (d054 <analogRead+0x98>)
    d020:	6013      	str	r3, [r2, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    d022:	6a13      	ldr	r3, [r2, #32]
    d024:	f013 0f01 	tst.w	r3, #1
    d028:	d106      	bne.n	d038 <analogRead+0x7c>
    d02a:	4614      	mov	r4, r2
			yield(); // TODO: what happens if yield-called code uses analogRead()
    d02c:	f002 f880 	bl	f130 <yield>
		while (!(ADC2_HS & ADC_HS_COCO0)) {
    d030:	6a23      	ldr	r3, [r4, #32]
    d032:	f013 0f01 	tst.w	r3, #1
    d036:	d0f9      	beq.n	d02c <analogRead+0x70>
		return ADC2_R0;
    d038:	4b06      	ldr	r3, [pc, #24]	; (d054 <analogRead+0x98>)
    d03a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    d03c:	e7db      	b.n	cff6 <analogRead+0x3a>
	if (pin > sizeof(pin_to_channel)) return 0;
    d03e:	2000      	movs	r0, #0
}
    d040:	4770      	bx	lr
	if (ch == 255) return 0;
    d042:	2000      	movs	r0, #0
    d044:	e7d7      	b.n	cff6 <analogRead+0x3a>
    d046:	bf00      	nop
    d048:	200053c9 	.word	0x200053c9
    d04c:	20002d14 	.word	0x20002d14
    d050:	400c4000 	.word	0x400c4000
    d054:	400c8000 	.word	0x400c8000

0000d058 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    d058:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    d05a:	4b8e      	ldr	r3, [pc, #568]	; (d294 <set_arm_clock+0x23c>)
    d05c:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    d05e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    d060:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
    d064:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    d066:	4b8c      	ldr	r3, [pc, #560]	; (d298 <set_arm_clock+0x240>)
    d068:	4298      	cmp	r0, r3
    d06a:	d915      	bls.n	d098 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    d06c:	4b8b      	ldr	r3, [pc, #556]	; (d29c <set_arm_clock+0x244>)
    d06e:	4298      	cmp	r0, r3
    d070:	d96d      	bls.n	d14e <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    d072:	4b8b      	ldr	r3, [pc, #556]	; (d2a0 <set_arm_clock+0x248>)
    d074:	4403      	add	r3, r0
    d076:	0a1b      	lsrs	r3, r3, #8
    d078:	498a      	ldr	r1, [pc, #552]	; (d2a4 <set_arm_clock+0x24c>)
    d07a:	fba1 1303 	umull	r1, r3, r1, r3
    d07e:	09db      	lsrs	r3, r3, #7
    d080:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d084:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    d088:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
    d08c:	f240 6127 	movw	r1, #1575	; 0x627
    d090:	428b      	cmp	r3, r1
    d092:	bf28      	it	cs
    d094:	460b      	movcs	r3, r1
    d096:	e007      	b.n	d0a8 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
    d098:	4e83      	ldr	r6, [pc, #524]	; (d2a8 <set_arm_clock+0x250>)
    d09a:	f240 437e 	movw	r3, #1150	; 0x47e
    d09e:	f240 31b6 	movw	r1, #950	; 0x3b6
    d0a2:	42b0      	cmp	r0, r6
    d0a4:	bf98      	it	ls
    d0a6:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    d0a8:	4e7a      	ldr	r6, [pc, #488]	; (d294 <set_arm_clock+0x23c>)
    d0aa:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    d0ae:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    d0b2:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    d0b6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    d0ba:	497c      	ldr	r1, [pc, #496]	; (d2ac <set_arm_clock+0x254>)
    d0bc:	fba1 1303 	umull	r1, r3, r1, r3
    d0c0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
    d0c4:	f004 011f 	and.w	r1, r4, #31
    d0c8:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    d0cc:	d209      	bcs.n	d0e2 <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d0ce:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d0d2:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    d0d6:	4b76      	ldr	r3, [pc, #472]	; (d2b0 <set_arm_clock+0x258>)
    d0d8:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d0da:	4619      	mov	r1, r3
    d0dc:	680b      	ldr	r3, [r1, #0]
    d0de:	2b00      	cmp	r3, #0
    d0e0:	dafc      	bge.n	d0dc <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    d0e2:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
    d0e6:	d12a      	bne.n	d13e <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    d0e8:	4972      	ldr	r1, [pc, #456]	; (d2b4 <set_arm_clock+0x25c>)
    d0ea:	690e      	ldr	r6, [r1, #16]
    d0ec:	4972      	ldr	r1, [pc, #456]	; (d2b8 <set_arm_clock+0x260>)
    d0ee:	43b1      	bics	r1, r6
    d0f0:	d030      	beq.n	d154 <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    d0f2:	4619      	mov	r1, r3
			sel = 1;
    d0f4:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    d0f6:	06ce      	lsls	r6, r1, #27
    d0f8:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
    d0fc:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
    d100:	d004      	beq.n	d10c <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    d102:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    d106:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
    d108:	4962      	ldr	r1, [pc, #392]	; (d294 <set_arm_clock+0x23c>)
    d10a:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    d10c:	0319      	lsls	r1, r3, #12
    d10e:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
    d112:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    d116:	d009      	beq.n	d12c <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    d118:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    d11c:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
    d11e:	4b5d      	ldr	r3, [pc, #372]	; (d294 <set_arm_clock+0x23c>)
    d120:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    d122:	461a      	mov	r2, r3
    d124:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d126:	f013 0f08 	tst.w	r3, #8
    d12a:	d1fb      	bne.n	d124 <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    d12c:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    d130:	4b58      	ldr	r3, [pc, #352]	; (d294 <set_arm_clock+0x23c>)
    d132:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d134:	461a      	mov	r2, r3
    d136:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d138:	f013 0f20 	tst.w	r3, #32
    d13c:	d1fb      	bne.n	d136 <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    d13e:	4b5f      	ldr	r3, [pc, #380]	; (d2bc <set_arm_clock+0x264>)
    d140:	4298      	cmp	r0, r3
    d142:	d817      	bhi.n	d174 <set_arm_clock+0x11c>
    d144:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    d146:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    d148:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
    d14a:	4e5c      	ldr	r6, [pc, #368]	; (d2bc <set_arm_clock+0x264>)
    d14c:	e00e      	b.n	d16c <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
    d14e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    d152:	e7a9      	b.n	d0a8 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
    d154:	2103      	movs	r1, #3
    d156:	e7ce      	b.n	d0f6 <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    d158:	2904      	cmp	r1, #4
    d15a:	d80e      	bhi.n	d17a <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
    d15c:	3101      	adds	r1, #1
				div_arm = 1;
    d15e:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d160:	fb01 f302 	mul.w	r3, r1, r2
    d164:	fb00 f303 	mul.w	r3, r0, r3
    d168:	42b3      	cmp	r3, r6
    d16a:	d806      	bhi.n	d17a <set_arm_clock+0x122>
		if (div_arm < 8) {
    d16c:	2a07      	cmp	r2, #7
    d16e:	d8f3      	bhi.n	d158 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
    d170:	3201      	adds	r2, #1
    d172:	e7f5      	b.n	d160 <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
    d174:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
    d176:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
    d178:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d17a:	4851      	ldr	r0, [pc, #324]	; (d2c0 <set_arm_clock+0x268>)
    d17c:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
    d17e:	4b51      	ldr	r3, [pc, #324]	; (d2c4 <set_arm_clock+0x26c>)
    d180:	4298      	cmp	r0, r3
    d182:	f200 8083 	bhi.w	d28c <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d186:	4b50      	ldr	r3, [pc, #320]	; (d2c8 <set_arm_clock+0x270>)
    d188:	fba3 0300 	umull	r0, r3, r3, r0
    d18c:	0d1b      	lsrs	r3, r3, #20
    d18e:	2b36      	cmp	r3, #54	; 0x36
    d190:	bf38      	it	cc
    d192:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    d194:	484d      	ldr	r0, [pc, #308]	; (d2cc <set_arm_clock+0x274>)
    d196:	fb03 f000 	mul.w	r0, r3, r0
    d19a:	fbb0 f0f2 	udiv	r0, r0, r2
    d19e:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d1a2:	4e44      	ldr	r6, [pc, #272]	; (d2b4 <set_arm_clock+0x25c>)
    d1a4:	6836      	ldr	r6, [r6, #0]
    d1a6:	4f4a      	ldr	r7, [pc, #296]	; (d2d0 <set_arm_clock+0x278>)
    d1a8:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d1aa:	4e4a      	ldr	r6, [pc, #296]	; (d2d4 <set_arm_clock+0x27c>)
    d1ac:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    d1ae:	42b7      	cmp	r7, r6
    d1b0:	d009      	beq.n	d1c6 <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    d1b2:	4e40      	ldr	r6, [pc, #256]	; (d2b4 <set_arm_clock+0x25c>)
    d1b4:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    d1b8:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    d1ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    d1be:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    d1c0:	6833      	ldr	r3, [r6, #0]
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	dafc      	bge.n	d1c0 <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    d1c6:	4b33      	ldr	r3, [pc, #204]	; (d294 <set_arm_clock+0x23c>)
    d1c8:	691b      	ldr	r3, [r3, #16]
    d1ca:	3a01      	subs	r2, #1
    d1cc:	f003 0307 	and.w	r3, r3, #7
    d1d0:	4293      	cmp	r3, r2
    d1d2:	d008      	beq.n	d1e6 <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    d1d4:	f002 0207 	and.w	r2, r2, #7
    d1d8:	4b2e      	ldr	r3, [pc, #184]	; (d294 <set_arm_clock+0x23c>)
    d1da:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    d1dc:	461a      	mov	r2, r3
    d1de:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d1e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    d1e4:	d1fb      	bne.n	d1de <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d1e6:	3901      	subs	r1, #1
    d1e8:	028b      	lsls	r3, r1, #10
    d1ea:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
    d1ee:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    d1f2:	d00b      	beq.n	d20c <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    d1f4:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    d1f8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
    d1fc:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
    d1fe:	4b25      	ldr	r3, [pc, #148]	; (d294 <set_arm_clock+0x23c>)
    d200:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    d202:	461a      	mov	r2, r3
    d204:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d206:	f013 0f02 	tst.w	r3, #2
    d20a:	d1fb      	bne.n	d204 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d20c:	4932      	ldr	r1, [pc, #200]	; (d2d8 <set_arm_clock+0x280>)
    d20e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    d210:	4a32      	ldr	r2, [pc, #200]	; (d2dc <set_arm_clock+0x284>)
    d212:	4291      	cmp	r1, r2
    d214:	d83c      	bhi.n	d290 <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d216:	09c9      	lsrs	r1, r1, #7
    d218:	4b31      	ldr	r3, [pc, #196]	; (d2e0 <set_arm_clock+0x288>)
    d21a:	fba3 3101 	umull	r3, r1, r3, r1
    d21e:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    d220:	1e4b      	subs	r3, r1, #1
    d222:	021a      	lsls	r2, r3, #8
    d224:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
    d228:	f413 7f40 	tst.w	r3, #768	; 0x300
    d22c:	d006      	beq.n	d23c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    d22e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d232:	f402 7240 	and.w	r2, r2, #768	; 0x300
    d236:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    d238:	4b16      	ldr	r3, [pc, #88]	; (d294 <set_arm_clock+0x23c>)
    d23a:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    d23c:	4a15      	ldr	r2, [pc, #84]	; (d294 <set_arm_clock+0x23c>)
    d23e:	6953      	ldr	r3, [r2, #20]
    d240:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    d244:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d246:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d248:	f013 0f20 	tst.w	r3, #32
    d24c:	d1fb      	bne.n	d246 <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
    d24e:	4b25      	ldr	r3, [pc, #148]	; (d2e4 <set_arm_clock+0x28c>)
    d250:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    d252:	fbb0 f1f1 	udiv	r1, r0, r1
    d256:	4b24      	ldr	r3, [pc, #144]	; (d2e8 <set_arm_clock+0x290>)
    d258:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d25a:	4b24      	ldr	r3, [pc, #144]	; (d2ec <set_arm_clock+0x294>)
    d25c:	fba3 2300 	umull	r2, r3, r3, r0
    d260:	0c9b      	lsrs	r3, r3, #18
    d262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d266:	fbb2 f3f3 	udiv	r3, r2, r3
    d26a:	4a21      	ldr	r2, [pc, #132]	; (d2f0 <set_arm_clock+0x298>)
    d26c:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d26e:	f004 031f 	and.w	r3, r4, #31
    d272:	459c      	cmp	ip, r3
    d274:	d208      	bcs.n	d288 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d276:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d27a:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
    d27e:	4a0c      	ldr	r2, [pc, #48]	; (d2b0 <set_arm_clock+0x258>)
    d280:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d282:	6813      	ldr	r3, [r2, #0]
    d284:	2b00      	cmp	r3, #0
    d286:	dafc      	bge.n	d282 <set_arm_clock+0x22a>
	}

	return frequency;
}
    d288:	bcf0      	pop	{r4, r5, r6, r7}
    d28a:	4770      	bx	lr
	if (mult > 108) mult = 108;
    d28c:	236c      	movs	r3, #108	; 0x6c
    d28e:	e781      	b.n	d194 <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
    d290:	2104      	movs	r1, #4
    d292:	e7c5      	b.n	d220 <set_arm_clock+0x1c8>
    d294:	400fc000 	.word	0x400fc000
    d298:	1f78a400 	.word	0x1f78a400
    d29c:	23c34600 	.word	0x23c34600
    d2a0:	dc3cba00 	.word	0xdc3cba00
    d2a4:	004cb223 	.word	0x004cb223
    d2a8:	016e3600 	.word	0x016e3600
    d2ac:	51eb851f 	.word	0x51eb851f
    d2b0:	40080000 	.word	0x40080000
    d2b4:	400d8000 	.word	0x400d8000
    d2b8:	80003040 	.word	0x80003040
    d2bc:	269fb1ff 	.word	0x269fb1ff
    d2c0:	005b8d80 	.word	0x005b8d80
    d2c4:	4df67eff 	.word	0x4df67eff
    d2c8:	165e9f81 	.word	0x165e9f81
    d2cc:	00b71b00 	.word	0x00b71b00
    d2d0:	8001307f 	.word	0x8001307f
    d2d4:	80002000 	.word	0x80002000
    d2d8:	08f0d17f 	.word	0x08f0d17f
    d2dc:	2cb4177f 	.word	0x2cb4177f
    d2e0:	00e5109f 	.word	0x00e5109f
    d2e4:	20003320 	.word	0x20003320
    d2e8:	2000331c 	.word	0x2000331c
    d2ec:	431bde83 	.word	0x431bde83
    d2f0:	20005354 	.word	0x20005354

0000d2f4 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    d2f4:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d2f6:	4b0f      	ldr	r3, [pc, #60]	; (d334 <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d2f8:	4d0f      	ldr	r5, [pc, #60]	; (d338 <micros+0x44>)
		scc = systick_cycle_count;
    d2fa:	4c10      	ldr	r4, [pc, #64]	; (d33c <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d2fc:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d300:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    d304:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    d306:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d308:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    d30c:	2a00      	cmp	r2, #0
    d30e:	d1f7      	bne.n	d300 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d310:	4b0b      	ldr	r3, [pc, #44]	; (d340 <micros+0x4c>)
    d312:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d314:	4a0b      	ldr	r2, [pc, #44]	; (d344 <micros+0x50>)
    d316:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
    d318:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d31a:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    d31e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d322:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
    d326:	429a      	cmp	r2, r3
    d328:	bf94      	ite	ls
    d32a:	1880      	addls	r0, r0, r2
    d32c:	18c0      	addhi	r0, r0, r3
    d32e:	bc30      	pop	{r4, r5}
    d330:	4770      	bx	lr
    d332:	bf00      	nop
    d334:	2000538c 	.word	0x2000538c
    d338:	20005388 	.word	0x20005388
    d33c:	20005384 	.word	0x20005384
    d340:	e0001000 	.word	0xe0001000
    d344:	20005354 	.word	0x20005354

0000d348 <delay>:
	if (msec == 0) return;
    d348:	b900      	cbnz	r0, d34c <delay+0x4>
    d34a:	4770      	bx	lr
{
    d34c:	b538      	push	{r3, r4, r5, lr}
    d34e:	4605      	mov	r5, r0
	start = micros();
    d350:	f7ff ffd0 	bl	d2f4 <micros>
    d354:	4604      	mov	r4, r0
    d356:	e001      	b.n	d35c <delay+0x14>
		yield();
    d358:	f001 feea 	bl	f130 <yield>
		while ((micros() - start) >= 1000) {
    d35c:	f7ff ffca 	bl	d2f4 <micros>
    d360:	1b00      	subs	r0, r0, r4
    d362:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    d366:	d3f7      	bcc.n	d358 <delay+0x10>
			if (--msec == 0) return;
    d368:	3d01      	subs	r5, #1
    d36a:	d002      	beq.n	d372 <delay+0x2a>
			start += 1000;
    d36c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    d370:	e7f4      	b.n	d35c <delay+0x14>
}
    d372:	bd38      	pop	{r3, r4, r5, pc}

0000d374 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d374:	2836      	cmp	r0, #54	; 0x36
    d376:	d81b      	bhi.n	d3b0 <digitalWrite+0x3c>
{
    d378:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d37a:	4b0e      	ldr	r3, [pc, #56]	; (d3b4 <digitalWrite+0x40>)
    d37c:	0102      	lsls	r2, r0, #4
    d37e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d382:	589b      	ldr	r3, [r3, r2]
    d384:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
    d386:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
    d388:	4214      	tst	r4, r2
    d38a:	d008      	beq.n	d39e <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
    d38c:	b121      	cbz	r1, d398 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
    d38e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d392:	f85d 4b04 	ldr.w	r4, [sp], #4
    d396:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
    d398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    d39c:	e7f9      	b.n	d392 <digitalWrite+0x1e>
		if (val) {
    d39e:	b119      	cbz	r1, d3a8 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d3a0:	6883      	ldr	r3, [r0, #8]
    d3a2:	4a05      	ldr	r2, [pc, #20]	; (d3b8 <digitalWrite+0x44>)
    d3a4:	601a      	str	r2, [r3, #0]
    d3a6:	e7f4      	b.n	d392 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d3a8:	6883      	ldr	r3, [r0, #8]
    d3aa:	4a04      	ldr	r2, [pc, #16]	; (d3bc <digitalWrite+0x48>)
    d3ac:	601a      	str	r2, [r3, #0]
    d3ae:	e7f0      	b.n	d392 <digitalWrite+0x1e>
    d3b0:	4770      	bx	lr
    d3b2:	bf00      	nop
    d3b4:	200028e4 	.word	0x200028e4
    d3b8:	0001f038 	.word	0x0001f038
    d3bc:	00013038 	.word	0x00013038

0000d3c0 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    d3c0:	2836      	cmp	r0, #54	; 0x36
    d3c2:	d80b      	bhi.n	d3dc <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    d3c4:	4b06      	ldr	r3, [pc, #24]	; (d3e0 <digitalRead+0x20>)
    d3c6:	0102      	lsls	r2, r0, #4
    d3c8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    d3cc:	589b      	ldr	r3, [r3, r2]
    d3ce:	689a      	ldr	r2, [r3, #8]
    d3d0:	68c3      	ldr	r3, [r0, #12]
    d3d2:	421a      	tst	r2, r3
    d3d4:	bf14      	ite	ne
    d3d6:	2001      	movne	r0, #1
    d3d8:	2000      	moveq	r0, #0
    d3da:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    d3dc:	2000      	movs	r0, #0
}
    d3de:	4770      	bx	lr
    d3e0:	200028e4 	.word	0x200028e4

0000d3e4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d3e4:	2836      	cmp	r0, #54	; 0x36
    d3e6:	d832      	bhi.n	d44e <pinMode+0x6a>
{
    d3e8:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
    d3ea:	4b19      	ldr	r3, [pc, #100]	; (d450 <pinMode+0x6c>)
    d3ec:	0102      	lsls	r2, r0, #4
    d3ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d3f2:	2901      	cmp	r1, #1
    d3f4:	d00c      	beq.n	d410 <pinMode+0x2c>
    d3f6:	2904      	cmp	r1, #4
    d3f8:	d00a      	beq.n	d410 <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d3fa:	589a      	ldr	r2, [r3, r2]
    d3fc:	6853      	ldr	r3, [r2, #4]
    d3fe:	68c4      	ldr	r4, [r0, #12]
    d400:	ea23 0304 	bic.w	r3, r3, r4
    d404:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
    d406:	b9a9      	cbnz	r1, d434 <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d408:	6883      	ldr	r3, [r0, #8]
    d40a:	2238      	movs	r2, #56	; 0x38
    d40c:	601a      	str	r2, [r3, #0]
    d40e:	e00b      	b.n	d428 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d410:	589a      	ldr	r2, [r3, r2]
    d412:	6853      	ldr	r3, [r2, #4]
    d414:	68c4      	ldr	r4, [r0, #12]
    d416:	4323      	orrs	r3, r4
    d418:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
    d41a:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d41c:	6883      	ldr	r3, [r0, #8]
    d41e:	bf0c      	ite	eq
    d420:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d422:	f640 0238 	movwne	r2, #2104	; 0x838
    d426:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    d428:	6843      	ldr	r3, [r0, #4]
    d42a:	2215      	movs	r2, #21
    d42c:	601a      	str	r2, [r3, #0]
}
    d42e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d432:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    d434:	2902      	cmp	r1, #2
    d436:	d006      	beq.n	d446 <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
    d438:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d43a:	6883      	ldr	r3, [r0, #8]
    d43c:	bf0c      	ite	eq
    d43e:	4a05      	ldreq	r2, [pc, #20]	; (d454 <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d440:	4a05      	ldrne	r2, [pc, #20]	; (d458 <pinMode+0x74>)
    d442:	601a      	str	r2, [r3, #0]
    d444:	e7f0      	b.n	d428 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d446:	6883      	ldr	r3, [r0, #8]
    d448:	4a04      	ldr	r2, [pc, #16]	; (d45c <pinMode+0x78>)
    d44a:	601a      	str	r2, [r3, #0]
    d44c:	e7ec      	b.n	d428 <pinMode+0x44>
    d44e:	4770      	bx	lr
    d450:	200028e4 	.word	0x200028e4
    d454:	00013038 	.word	0x00013038
    d458:	00010038 	.word	0x00010038
    d45c:	0001f038 	.word	0x0001f038

0000d460 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    d460:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    d462:	f7f5 fa67 	bl	2934 <setup>
	while (1) {
		loop();
    d466:	f7f6 f83b 	bl	34e0 <loop>
		yield();
    d46a:	f001 fe61 	bl	f130 <yield>
	while (1) {
    d46e:	e7fa      	b.n	d466 <main+0x6>

0000d470 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d470:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d472:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d476:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d47a:	d16d      	bne.n	d558 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d47c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d47e:	d341      	bcc.n	d504 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d480:	f851 3b04 	ldr.w	r3, [r1], #4
    d484:	f840 3b04 	str.w	r3, [r0], #4
    d488:	f851 3b04 	ldr.w	r3, [r1], #4
    d48c:	f840 3b04 	str.w	r3, [r0], #4
    d490:	f851 3b04 	ldr.w	r3, [r1], #4
    d494:	f840 3b04 	str.w	r3, [r0], #4
    d498:	f851 3b04 	ldr.w	r3, [r1], #4
    d49c:	f840 3b04 	str.w	r3, [r0], #4
    d4a0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4a4:	f840 3b04 	str.w	r3, [r0], #4
    d4a8:	f851 3b04 	ldr.w	r3, [r1], #4
    d4ac:	f840 3b04 	str.w	r3, [r0], #4
    d4b0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4b4:	f840 3b04 	str.w	r3, [r0], #4
    d4b8:	f851 3b04 	ldr.w	r3, [r1], #4
    d4bc:	f840 3b04 	str.w	r3, [r0], #4
    d4c0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4c4:	f840 3b04 	str.w	r3, [r0], #4
    d4c8:	f851 3b04 	ldr.w	r3, [r1], #4
    d4cc:	f840 3b04 	str.w	r3, [r0], #4
    d4d0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4d4:	f840 3b04 	str.w	r3, [r0], #4
    d4d8:	f851 3b04 	ldr.w	r3, [r1], #4
    d4dc:	f840 3b04 	str.w	r3, [r0], #4
    d4e0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4e4:	f840 3b04 	str.w	r3, [r0], #4
    d4e8:	f851 3b04 	ldr.w	r3, [r1], #4
    d4ec:	f840 3b04 	str.w	r3, [r0], #4
    d4f0:	f851 3b04 	ldr.w	r3, [r1], #4
    d4f4:	f840 3b04 	str.w	r3, [r0], #4
    d4f8:	f851 3b04 	ldr.w	r3, [r1], #4
    d4fc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d500:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d502:	d2bd      	bcs.n	d480 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d504:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d506:	d311      	bcc.n	d52c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d508:	f851 3b04 	ldr.w	r3, [r1], #4
    d50c:	f840 3b04 	str.w	r3, [r0], #4
    d510:	f851 3b04 	ldr.w	r3, [r1], #4
    d514:	f840 3b04 	str.w	r3, [r0], #4
    d518:	f851 3b04 	ldr.w	r3, [r1], #4
    d51c:	f840 3b04 	str.w	r3, [r0], #4
    d520:	f851 3b04 	ldr.w	r3, [r1], #4
    d524:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d528:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d52a:	d2ed      	bcs.n	d508 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d52c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d52e:	d305      	bcc.n	d53c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d530:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d534:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d538:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d53a:	d2f9      	bcs.n	d530 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d53c:	3204      	adds	r2, #4
	beq	.Ldone
    d53e:	d008      	beq.n	d552 <memcpy+0xe2>

	lsls	r2, r2, #31
    d540:	07d2      	lsls	r2, r2, #31
	itt ne
    d542:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d544:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d548:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d54c:	d301      	bcc.n	d552 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d54e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d550:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d552:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d554:	4770      	bx	lr
    d556:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d558:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d55a:	d313      	bcc.n	d584 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d55c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d55e:	d08d      	beq.n	d47c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d560:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d564:	d08a      	beq.n	d47c <memcpy+0xc>

	rsb	r3, #4
    d566:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d56a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d56c:	07db      	lsls	r3, r3, #31
	itt ne
    d56e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d570:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d574:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d578:	d380      	bcc.n	d47c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d57a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d57e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d582:	e77b      	b.n	d47c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d584:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d586:	d3d9      	bcc.n	d53c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d588:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d58a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d58e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d592:	d2f9      	bcs.n	d588 <memcpy+0x118>

	ldrb	r3, [r1]
    d594:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d596:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d598:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d59a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d59c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d59e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d5a0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d5a2:	4770      	bx	lr

0000d5a4 <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
    d5a4:	b508      	push	{r3, lr}
	return malloc(size);
    d5a6:	f003 fca1 	bl	10eec <malloc>
}
    d5aa:	bd08      	pop	{r3, pc}

0000d5ac <operator delete(void*, unsigned int)>:
{
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
    d5ac:	b508      	push	{r3, lr}
	free(ptr);
    d5ae:	f003 fca5 	bl	10efc <free>
}
    d5b2:	bd08      	pop	{r3, pc}

0000d5b4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d5b4:	b530      	push	{r4, r5, lr}
    d5b6:	4684      	mov	ip, r0
    d5b8:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
    d5ba:	3901      	subs	r1, #1
{
    d5bc:	460d      	mov	r5, r1
	int i=0, j;
    d5be:	f04f 0e00 	mov.w	lr, #0
    d5c2:	e002      	b.n	d5ca <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d5c4:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
    d5c8:	469c      	mov	ip, r3
		digit = val % radix;
    d5ca:	fbbc f3f2 	udiv	r3, ip, r2
    d5ce:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d5d2:	2b09      	cmp	r3, #9
    d5d4:	bf94      	ite	ls
    d5d6:	3330      	addls	r3, #48	; 0x30
    d5d8:	3337      	addhi	r3, #55	; 0x37
    d5da:	b2db      	uxtb	r3, r3
    d5dc:	4674      	mov	r4, lr
    d5de:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
    d5e2:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
    d5e6:	4562      	cmp	r2, ip
    d5e8:	d9ec      	bls.n	d5c4 <ultoa+0x10>
	}
	buf[i + 1] = 0;
    d5ea:	1c63      	adds	r3, r4, #1
    d5ec:	eb00 0c03 	add.w	ip, r0, r3
    d5f0:	2200      	movs	r2, #0
    d5f2:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
    d5f4:	4596      	cmp	lr, r2
    d5f6:	dd0e      	ble.n	d616 <ultoa+0x62>
		t = buf[j];
    d5f8:	460a      	mov	r2, r1
    d5fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
    d5fe:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    d602:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
    d604:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
    d608:	3202      	adds	r2, #2
    d60a:	1a12      	subs	r2, r2, r0
    d60c:	1a43      	subs	r3, r0, r1
    d60e:	3b01      	subs	r3, #1
    d610:	4423      	add	r3, r4
    d612:	429a      	cmp	r2, r3
    d614:	dbf0      	blt.n	d5f8 <ultoa+0x44>
	}
	return buf;
}
    d616:	bd30      	pop	{r4, r5, pc}

0000d618 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d61c:	ed2d 8b02 	vpush	{d8}
    d620:	b084      	sub	sp, #16
    d622:	eeb0 8a40 	vmov.f32	s16, s0
    d626:	4605      	mov	r5, r0
    d628:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    d62a:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
    d62e:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
    d632:	eeb4 0a40 	vcmp.f32	s0, s0
    d636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d63a:	d62c      	bvs.n	d696 <dtostrf+0x7e>
    d63c:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d63e:	eef0 7ac0 	vabs.f32	s15, s0
    d642:	ed9f 7ab0 	vldr	s14, [pc, #704]	; d904 <dtostrf+0x2ec>
    d646:	eef4 7a47 	vcmp.f32	s15, s14
    d64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d64e:	dd52      	ble.n	d6f6 <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
    d650:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d658:	bf4c      	ite	mi
    d65a:	2304      	movmi	r3, #4
    d65c:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d65e:	4293      	cmp	r3, r2
    d660:	f280 817c 	bge.w	d95c <dtostrf+0x344>
    d664:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d666:	2800      	cmp	r0, #0
    d668:	f280 817b 	bge.w	d962 <dtostrf+0x34a>
			while (awidth) {
    d66c:	2a00      	cmp	r2, #0
    d66e:	f000 813b 	beq.w	d8e8 <dtostrf+0x2d0>
    d672:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d674:	2220      	movs	r2, #32
    d676:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d67a:	42a3      	cmp	r3, r4
    d67c:	d1fb      	bne.n	d676 <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d67e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d686:	f140 8127 	bpl.w	d8d8 <dtostrf+0x2c0>
    d68a:	2200      	movs	r2, #0
    d68c:	461c      	mov	r4, r3
    d68e:	232d      	movs	r3, #45	; 0x2d
    d690:	f804 3b01 	strb.w	r3, [r4], #1
    d694:	e16b      	b.n	d96e <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
    d696:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d69e:	bf4c      	ite	mi
    d6a0:	2304      	movmi	r3, #4
    d6a2:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d6a4:	4293      	cmp	r3, r2
    d6a6:	f280 8133 	bge.w	d910 <dtostrf+0x2f8>
    d6aa:	1ad2      	subs	r2, r2, r3
		if (width<0) {
    d6ac:	2800      	cmp	r0, #0
    d6ae:	f280 8132 	bge.w	d916 <dtostrf+0x2fe>
			while (awidth) {
    d6b2:	2a00      	cmp	r2, #0
    d6b4:	f000 810c 	beq.w	d8d0 <dtostrf+0x2b8>
    d6b8:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
    d6ba:	2220      	movs	r2, #32
    d6bc:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
    d6c0:	429c      	cmp	r4, r3
    d6c2:	d1fb      	bne.n	d6bc <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d6c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d6c8:	ee18 2a10 	vmov	r2, s16
    d6cc:	2a00      	cmp	r2, #0
    d6ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d6d2:	fe67 7a87 	vselge.f32	s15, s15, s14
    d6d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d6de:	f140 80f0 	bpl.w	d8c2 <dtostrf+0x2aa>
    d6e2:	2200      	movs	r2, #0
    d6e4:	461c      	mov	r4, r3
    d6e6:	232d      	movs	r3, #45	; 0x2d
    d6e8:	f804 3b01 	strb.w	r3, [r4], #1
    d6ec:	e122      	b.n	d934 <dtostrf+0x31c>
    d6ee:	4623      	mov	r3, r4
    d6f0:	e7f8      	b.n	d6e4 <dtostrf+0xcc>
    d6f2:	4623      	mov	r3, r4
    d6f4:	e7ca      	b.n	d68c <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    d6f6:	468a      	mov	sl, r1
    d6f8:	aa02      	add	r2, sp, #8
    d6fa:	a903      	add	r1, sp, #12
    d6fc:	4640      	mov	r0, r8
    d6fe:	f003 ffd9 	bl	116b4 <fcvtf>
    d702:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    d704:	9b03      	ldr	r3, [sp, #12]
    d706:	ea58 0203 	orrs.w	r2, r8, r3
    d70a:	d131      	bne.n	d770 <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    d70c:	7802      	ldrb	r2, [r0, #0]
    d70e:	487e      	ldr	r0, [pc, #504]	; (d908 <dtostrf+0x2f0>)
    d710:	4f7e      	ldr	r7, [pc, #504]	; (d90c <dtostrf+0x2f4>)
    d712:	2a34      	cmp	r2, #52	; 0x34
    d714:	bf98      	it	ls
    d716:	4607      	movls	r7, r0
		decpt++;
    d718:	2301      	movs	r3, #1
    d71a:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
    d71c:	461e      	mov	r6, r3
    d71e:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    d720:	f1b8 0e00 	subs.w	lr, r8, #0
    d724:	bf18      	it	ne
    d726:	f04f 0e01 	movne.w	lr, #1
    d72a:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
    d72e:	d036      	beq.n	d79e <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    d730:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
    d734:	4443      	add	r3, r8
    d736:	4283      	cmp	r3, r0
    d738:	d26d      	bcs.n	d816 <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    d73a:	f1b8 0f00 	cmp.w	r8, #0
    d73e:	dd06      	ble.n	d74e <dtostrf+0x136>
				val *= 10.0f;
    d740:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    d744:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    d748:	f1ba 0a01 	subs.w	sl, sl, #1
    d74c:	d1fa      	bne.n	d744 <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    d74e:	aa02      	add	r2, sp, #8
    d750:	a901      	add	r1, sp, #4
    d752:	4650      	mov	r0, sl
    d754:	eeb0 0a48 	vmov.f32	s0, s16
    d758:	f003 ffac 	bl	116b4 <fcvtf>
    d75c:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d75e:	9903      	ldr	r1, [sp, #12]
    d760:	9b01      	ldr	r3, [sp, #4]
    d762:	1a5a      	subs	r2, r3, r1
    d764:	f108 0301 	add.w	r3, r8, #1
    d768:	429a      	cmp	r2, r3
    d76a:	d051      	beq.n	d810 <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
    d76c:	46ce      	mov	lr, r9
    d76e:	e016      	b.n	d79e <dtostrf+0x186>
	if (-decpt  > (int)precision) {
    d770:	425b      	negs	r3, r3
    d772:	4598      	cmp	r8, r3
    d774:	da03      	bge.n	d77e <dtostrf+0x166>
		decpt = -precision;
    d776:	f1c8 0300 	rsb	r3, r8, #0
    d77a:	9303      	str	r3, [sp, #12]
		s = "0";
    d77c:	4f62      	ldr	r7, [pc, #392]	; (d908 <dtostrf+0x2f0>)
	reqd = strlen(s);
    d77e:	4638      	mov	r0, r7
    d780:	f004 fd5e 	bl	12240 <strlen>
    d784:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
    d786:	9b03      	ldr	r3, [sp, #12]
    d788:	4283      	cmp	r3, r0
    d78a:	bfb8      	it	lt
    d78c:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
    d78e:	2b00      	cmp	r3, #0
    d790:	d1c6      	bne.n	d720 <dtostrf+0x108>
    d792:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
    d794:	f1b8 0e00 	subs.w	lr, r8, #0
    d798:	bf18      	it	ne
    d79a:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    d79e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    d7a2:	f1b8 0f00 	cmp.w	r8, #0
    d7a6:	f000 80a3 	beq.w	d8f0 <dtostrf+0x2d8>
    d7aa:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
    d7ac:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d7ae:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d7b2:	f1b9 0f00 	cmp.w	r9, #0
    d7b6:	dd30      	ble.n	d81a <dtostrf+0x202>
		e += pad;
    d7b8:	464b      	mov	r3, r9
    d7ba:	444a      	add	r2, r9
	p = buf;
    d7bc:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
    d7be:	f04f 0c20 	mov.w	ip, #32
    d7c2:	f800 cb01 	strb.w	ip, [r0], #1
    d7c6:	1a21      	subs	r1, r4, r0
    d7c8:	4419      	add	r1, r3
    d7ca:	2900      	cmp	r1, #0
    d7cc:	dcf9      	bgt.n	d7c2 <dtostrf+0x1aa>
    d7ce:	f1b9 0f00 	cmp.w	r9, #0
    d7d2:	bfd8      	it	le
    d7d4:	2301      	movle	r3, #1
    d7d6:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    d7d8:	f1b8 0f00 	cmp.w	r8, #0
    d7dc:	d002      	beq.n	d7e4 <dtostrf+0x1cc>
    d7de:	212d      	movs	r1, #45	; 0x2d
    d7e0:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
    d7e4:	9803      	ldr	r0, [sp, #12]
    d7e6:	b910      	cbnz	r0, d7ee <dtostrf+0x1d6>
    d7e8:	f1be 0f00 	cmp.w	lr, #0
    d7ec:	d117      	bne.n	d81e <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    d7ee:	2800      	cmp	r0, #0
    d7f0:	da02      	bge.n	d7f8 <dtostrf+0x1e0>
    d7f2:	f1be 0f00 	cmp.w	lr, #0
    d7f6:	d11a      	bne.n	d82e <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    d7f8:	4293      	cmp	r3, r2
    d7fa:	d24d      	bcs.n	d898 <dtostrf+0x280>
		*p++ = *s++;
    d7fc:	4638      	mov	r0, r7
    d7fe:	469c      	mov	ip, r3
    d800:	f810 1b01 	ldrb.w	r1, [r0], #1
    d804:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d808:	4594      	cmp	ip, r2
    d80a:	d03f      	beq.n	d88c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d80c:	272e      	movs	r7, #46	; 0x2e
    d80e:	e034      	b.n	d87a <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    d810:	3101      	adds	r1, #1
    d812:	9103      	str	r1, [sp, #12]
    d814:	e7aa      	b.n	d76c <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
    d816:	46ce      	mov	lr, r9
    d818:	e7c1      	b.n	d79e <dtostrf+0x186>
	p = buf;
    d81a:	4623      	mov	r3, r4
    d81c:	e7df      	b.n	d7de <dtostrf+0x1c6>
		*p++ = '0';
    d81e:	4619      	mov	r1, r3
    d820:	2030      	movs	r0, #48	; 0x30
    d822:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
    d826:	202e      	movs	r0, #46	; 0x2e
    d828:	7058      	strb	r0, [r3, #1]
    d82a:	460b      	mov	r3, r1
    d82c:	e7e4      	b.n	d7f8 <dtostrf+0x1e0>
		*p++ = '0';
    d82e:	469e      	mov	lr, r3
    d830:	2130      	movs	r1, #48	; 0x30
    d832:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
    d836:	212e      	movs	r1, #46	; 0x2e
    d838:	7059      	strb	r1, [r3, #1]
    d83a:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
    d83c:	4601      	mov	r1, r0
			*p++ = '0';
    d83e:	f04f 0c30 	mov.w	ip, #48	; 0x30
    d842:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
    d846:	3101      	adds	r1, #1
    d848:	d4fb      	bmi.n	d842 <dtostrf+0x22a>
			*p++ = '0';
    d84a:	4243      	negs	r3, r0
    d84c:	2800      	cmp	r0, #0
    d84e:	bfa8      	it	ge
    d850:	2301      	movge	r3, #1
    d852:	4473      	add	r3, lr
    d854:	9103      	str	r1, [sp, #12]
    d856:	ea6f 0000 	mvn.w	r0, r0
    d85a:	bfa8      	it	ge
    d85c:	2000      	movge	r0, #0
    d85e:	2130      	movs	r1, #48	; 0x30
    d860:	f80e 1000 	strb.w	r1, [lr, r0]
    d864:	e7c8      	b.n	d7f8 <dtostrf+0x1e0>
    d866:	4663      	mov	r3, ip
	while (p < e) {
    d868:	4293      	cmp	r3, r2
    d86a:	d20e      	bcs.n	d88a <dtostrf+0x272>
		*p++ = *s++;
    d86c:	469c      	mov	ip, r3
    d86e:	f810 1b01 	ldrb.w	r1, [r0], #1
    d872:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
    d876:	4594      	cmp	ip, r2
    d878:	d008      	beq.n	d88c <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
    d87a:	9903      	ldr	r1, [sp, #12]
    d87c:	3901      	subs	r1, #1
    d87e:	9103      	str	r1, [sp, #12]
    d880:	2900      	cmp	r1, #0
    d882:	d1f0      	bne.n	d866 <dtostrf+0x24e>
    d884:	705f      	strb	r7, [r3, #1]
    d886:	3302      	adds	r3, #2
    d888:	e7ee      	b.n	d868 <dtostrf+0x250>
    d88a:	461a      	mov	r2, r3
	}
	if (width < 0) {
    d88c:	2d00      	cmp	r5, #0
    d88e:	db05      	blt.n	d89c <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    d890:	2300      	movs	r3, #0
    d892:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    d894:	4620      	mov	r0, r4
    d896:	e07e      	b.n	d996 <dtostrf+0x37e>
	while (p < e) {
    d898:	461a      	mov	r2, r3
    d89a:	e7f7      	b.n	d88c <dtostrf+0x274>
		pad = (reqd + width) * -1;
    d89c:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
    d89e:	43f0      	mvns	r0, r6
    d8a0:	2e00      	cmp	r6, #0
    d8a2:	daf5      	bge.n	d890 <dtostrf+0x278>
    d8a4:	4611      	mov	r1, r2
    d8a6:	2520      	movs	r5, #32
    d8a8:	f801 5b01 	strb.w	r5, [r1], #1
    d8ac:	f1c1 0301 	rsb	r3, r1, #1
    d8b0:	4403      	add	r3, r0
    d8b2:	4413      	add	r3, r2
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	dcf7      	bgt.n	d8a8 <dtostrf+0x290>
    d8b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    d8bc:	3001      	adds	r0, #1
    d8be:	4402      	add	r2, r0
    d8c0:	e7e6      	b.n	d890 <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d8c2:	224e      	movs	r2, #78	; 0x4e
    d8c4:	701a      	strb	r2, [r3, #0]
    d8c6:	2141      	movs	r1, #65	; 0x41
    d8c8:	7059      	strb	r1, [r3, #1]
    d8ca:	1cd8      	adds	r0, r3, #3
    d8cc:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d8ce:	e042      	b.n	d956 <dtostrf+0x33e>
			while (awidth) {
    d8d0:	4623      	mov	r3, r4
    d8d2:	e6f7      	b.n	d6c4 <dtostrf+0xac>
		if (width<0) {
    d8d4:	4623      	mov	r3, r4
    d8d6:	e6f5      	b.n	d6c4 <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d8d8:	2249      	movs	r2, #73	; 0x49
    d8da:	701a      	strb	r2, [r3, #0]
    d8dc:	224e      	movs	r2, #78	; 0x4e
    d8de:	705a      	strb	r2, [r3, #1]
    d8e0:	1cd8      	adds	r0, r3, #3
    d8e2:	2246      	movs	r2, #70	; 0x46
    d8e4:	709a      	strb	r2, [r3, #2]
		while (awidth) {
    d8e6:	e054      	b.n	d992 <dtostrf+0x37a>
			while (awidth) {
    d8e8:	4623      	mov	r3, r4
    d8ea:	e6c8      	b.n	d67e <dtostrf+0x66>
		if (width<0) {
    d8ec:	4623      	mov	r3, r4
    d8ee:	e6c6      	b.n	d67e <dtostrf+0x66>
	e = p + reqd;
    d8f0:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
    d8f2:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
    d8f6:	f1b9 0f00 	cmp.w	r9, #0
    d8fa:	f73f af5d 	bgt.w	d7b8 <dtostrf+0x1a0>
	p = buf;
    d8fe:	4623      	mov	r3, r4
    d900:	e770      	b.n	d7e4 <dtostrf+0x1cc>
    d902:	bf00      	nop
    d904:	7f7fffff 	.word	0x7f7fffff
    d908:	20002c54 	.word	0x20002c54
    d90c:	20002c58 	.word	0x20002c58
		if (width<0) {
    d910:	2800      	cmp	r0, #0
    d912:	dbdf      	blt.n	d8d4 <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d914:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    d916:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d91a:	ee18 3a10 	vmov	r3, s16
    d91e:	2b00      	cmp	r3, #0
    d920:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    d924:	fe67 7a87 	vselge.f32	s15, s15, s14
    d928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    d92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d930:	f53f aedd 	bmi.w	d6ee <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d934:	234e      	movs	r3, #78	; 0x4e
    d936:	7023      	strb	r3, [r4, #0]
    d938:	2141      	movs	r1, #65	; 0x41
    d93a:	7061      	strb	r1, [r4, #1]
    d93c:	1ce0      	adds	r0, r4, #3
    d93e:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d940:	b14a      	cbz	r2, d956 <dtostrf+0x33e>
    d942:	4615      	mov	r5, r2
    d944:	3203      	adds	r2, #3
    d946:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    d948:	4602      	mov	r2, r0
			*buf++ = ' ';
    d94a:	2120      	movs	r1, #32
    d94c:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
    d950:	4293      	cmp	r3, r2
    d952:	d1fb      	bne.n	d94c <dtostrf+0x334>
			*buf++ = ' ';
    d954:	4428      	add	r0, r5
		*buf = 0;
    d956:	2300      	movs	r3, #0
    d958:	7003      	strb	r3, [r0, #0]
		return buf;
    d95a:	e01c      	b.n	d996 <dtostrf+0x37e>
		if (width<0) {
    d95c:	2800      	cmp	r0, #0
    d95e:	dbc5      	blt.n	d8ec <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d960:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
    d962:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d96a:	f53f aec2 	bmi.w	d6f2 <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d96e:	2349      	movs	r3, #73	; 0x49
    d970:	7023      	strb	r3, [r4, #0]
    d972:	234e      	movs	r3, #78	; 0x4e
    d974:	7063      	strb	r3, [r4, #1]
    d976:	1ce0      	adds	r0, r4, #3
    d978:	2346      	movs	r3, #70	; 0x46
    d97a:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
    d97c:	b14a      	cbz	r2, d992 <dtostrf+0x37a>
    d97e:	4615      	mov	r5, r2
    d980:	3203      	adds	r2, #3
    d982:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d984:	4603      	mov	r3, r0
			*buf++ = ' ';
    d986:	2120      	movs	r1, #32
    d988:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
    d98c:	429a      	cmp	r2, r3
    d98e:	d1fb      	bne.n	d988 <dtostrf+0x370>
			*buf++ = ' ';
    d990:	4428      	add	r0, r5
		*buf = 0;
    d992:	2300      	movs	r3, #0
    d994:	7003      	strb	r3, [r0, #0]
}
    d996:	b004      	add	sp, #16
    d998:	ecbd 8b02 	vpop	{d8}
    d99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d9a0 <flexpwmWrite>:
{
    d9a0:	b570      	push	{r4, r5, r6, lr}
	uint16_t mask = 1 << submodule;
    d9a2:	f04f 0c01 	mov.w	ip, #1
    d9a6:	fa0c fc01 	lsl.w	ip, ip, r1
    d9aa:	fa1f f58c 	uxth.w	r5, ip
	uint32_t modulo = p->SM[submodule].VAL1;
    d9ae:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    d9b2:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    d9b6:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    d9ba:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t cval = ((uint32_t)val * (modulo + 1)) >> analog_write_res;
    d9be:	fb0e 3303 	mla	r3, lr, r3, r3
    d9c2:	4c27      	ldr	r4, [pc, #156]	; (da60 <flexpwmWrite+0xc0>)
    d9c4:	7824      	ldrb	r4, [r4, #0]
    d9c6:	40e3      	lsrs	r3, r4
    d9c8:	4573      	cmp	r3, lr
    d9ca:	bf28      	it	cs
    d9cc:	4673      	movcs	r3, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    d9ce:	f8b0 4188 	ldrh.w	r4, [r0, #392]	; 0x188
    d9d2:	b2a4      	uxth	r4, r4
    d9d4:	012e      	lsls	r6, r5, #4
    d9d6:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
    d9da:	4334      	orrs	r4, r6
    d9dc:	f8a0 4188 	strh.w	r4, [r0, #392]	; 0x188
	switch (channel) {
    d9e0:	2a01      	cmp	r2, #1
    d9e2:	d01f      	beq.n	da24 <flexpwmWrite+0x84>
    d9e4:	2a02      	cmp	r2, #2
    d9e6:	d02d      	beq.n	da44 <flexpwmWrite+0xa4>
    d9e8:	b14a      	cbz	r2, d9fe <flexpwmWrite+0x5e>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    d9ea:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    d9ee:	b29b      	uxth	r3, r3
    d9f0:	f00c 0c0f 	and.w	ip, ip, #15
    d9f4:	ea43 0c0c 	orr.w	ip, r3, ip
    d9f8:	f8a0 c188 	strh.w	ip, [r0, #392]	; 0x188
}
    d9fc:	bd70      	pop	{r4, r5, r6, pc}
		p->SM[submodule].VAL0 = modulo - cval;
    d9fe:	ebae 0e03 	sub.w	lr, lr, r3
    da02:	fa1f fe8e 	uxth.w	lr, lr
    da06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    da0a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    da0e:	f8a1 e00a 	strh.w	lr, [r1, #10]
		p->OUTEN |= FLEXPWM_OUTEN_PWMX_EN(mask);
    da12:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    da16:	b29b      	uxth	r3, r3
    da18:	f00c 020f 	and.w	r2, ip, #15
    da1c:	4313      	orrs	r3, r2
    da1e:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    da22:	e7e2      	b.n	d9ea <flexpwmWrite+0x4a>
		p->SM[submodule].VAL3 = cval;
    da24:	b29b      	uxth	r3, r3
    da26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    da2a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    da2e:	82cb      	strh	r3, [r1, #22]
		p->OUTEN |= FLEXPWM_OUTEN_PWMA_EN(mask);
    da30:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    da34:	b29b      	uxth	r3, r3
    da36:	022d      	lsls	r5, r5, #8
    da38:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    da3c:	432b      	orrs	r3, r5
    da3e:	f8a0 3180 	strh.w	r3, [r0, #384]	; 0x180
		break;
    da42:	e7d2      	b.n	d9ea <flexpwmWrite+0x4a>
		p->SM[submodule].VAL5 = cval;
    da44:	b29b      	uxth	r3, r3
    da46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    da4a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    da4e:	83cb      	strh	r3, [r1, #30]
		p->OUTEN |= FLEXPWM_OUTEN_PWMB_EN(mask);
    da50:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    da54:	b29b      	uxth	r3, r3
    da56:	431e      	orrs	r6, r3
    da58:	f8a0 6180 	strh.w	r6, [r0, #384]	; 0x180
    da5c:	e7c5      	b.n	d9ea <flexpwmWrite+0x4a>
    da5e:	bf00      	nop
    da60:	20003a41 	.word	0x20003a41

0000da64 <flexpwmFrequency>:
{
    da64:	b530      	push	{r4, r5, lr}
	uint16_t mask = 1 << submodule;
    da66:	f04f 0c01 	mov.w	ip, #1
    da6a:	fa0c fc01 	lsl.w	ip, ip, r1
    da6e:	fa1f f58c 	uxth.w	r5, ip
	uint32_t olddiv = p->SM[submodule].VAL1;
    da72:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    da76:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    da7a:	89dc      	ldrh	r4, [r3, #14]
    da7c:	b2a4      	uxth	r4, r4
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    da7e:	4b32      	ldr	r3, [pc, #200]	; (db48 <flexpwmFrequency+0xe4>)
    da80:	ed93 7a00 	vldr	s14, [r3]
    da84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    da88:	eec7 7a00 	vdiv.f32	s15, s14, s0
    da8c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    da90:	ee77 7a87 	vadd.f32	s15, s15, s14
    da94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    da98:	ee17 2a90 	vmov	r2, s15
	while (newdiv > 65535 && prescale < 7) {
    da9c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    daa0:	d350      	bcc.n	db44 <flexpwmFrequency+0xe0>
	uint32_t prescale = 0;
    daa2:	2300      	movs	r3, #0
	while (newdiv > 65535 && prescale < 7) {
    daa4:	f64f 7eff 	movw	lr, #65535	; 0xffff
		newdiv = newdiv >> 1;
    daa8:	0852      	lsrs	r2, r2, #1
		prescale = prescale + 1;
    daaa:	3301      	adds	r3, #1
	while (newdiv > 65535 && prescale < 7) {
    daac:	4572      	cmp	r2, lr
    daae:	d901      	bls.n	dab4 <flexpwmFrequency+0x50>
    dab0:	2b06      	cmp	r3, #6
    dab2:	d9f9      	bls.n	daa8 <flexpwmFrequency+0x44>
	if (newdiv > 65535) {
    dab4:	2a02      	cmp	r2, #2
    dab6:	bf38      	it	cc
    dab8:	2202      	movcc	r2, #2
    daba:	f64f 7eff 	movw	lr, #65535	; 0xffff
    dabe:	4572      	cmp	r2, lr
    dac0:	bf28      	it	cs
    dac2:	4672      	movcs	r2, lr
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
    dac4:	f8b0 e188 	ldrh.w	lr, [r0, #392]	; 0x188
    dac8:	fa1f fe8e 	uxth.w	lr, lr
    dacc:	012d      	lsls	r5, r5, #4
    dace:	b2ed      	uxtb	r5, r5
    dad0:	ea4e 0e05 	orr.w	lr, lr, r5
    dad4:	f8a0 e188 	strh.w	lr, [r0, #392]	; 0x188
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
    dad8:	011b      	lsls	r3, r3, #4
    dada:	b2db      	uxtb	r3, r3
    dadc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    dae0:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    dae4:	eb00 1e4e 	add.w	lr, r0, lr, lsl #5
    dae8:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->SM[submodule].VAL1 = newdiv - 1;
    daec:	1e53      	subs	r3, r2, #1
    daee:	b29b      	uxth	r3, r3
    daf0:	f8ae 300e 	strh.w	r3, [lr, #14]
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
    daf4:	f8be 300a 	ldrh.w	r3, [lr, #10]
    daf8:	b29b      	uxth	r3, r3
    dafa:	fb02 f303 	mul.w	r3, r2, r3
    dafe:	fbb3 f3f4 	udiv	r3, r3, r4
    db02:	b29b      	uxth	r3, r3
    db04:	f8ae 300a 	strh.w	r3, [lr, #10]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
    db08:	f8be 3016 	ldrh.w	r3, [lr, #22]
    db0c:	b29b      	uxth	r3, r3
    db0e:	fb02 f303 	mul.w	r3, r2, r3
    db12:	fbb3 f3f4 	udiv	r3, r3, r4
    db16:	b29b      	uxth	r3, r3
    db18:	f8ae 3016 	strh.w	r3, [lr, #22]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
    db1c:	f8be 301e 	ldrh.w	r3, [lr, #30]
    db20:	b29b      	uxth	r3, r3
    db22:	fb02 f303 	mul.w	r3, r2, r3
    db26:	fbb3 f3f4 	udiv	r3, r3, r4
    db2a:	b29b      	uxth	r3, r3
    db2c:	f8ae 301e 	strh.w	r3, [lr, #30]
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
    db30:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    db34:	b29b      	uxth	r3, r3
    db36:	f00c 0c0f 	and.w	ip, ip, #15
    db3a:	ea43 030c 	orr.w	r3, r3, ip
    db3e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    db42:	bd30      	pop	{r4, r5, pc}
	uint32_t prescale = 0;
    db44:	2300      	movs	r3, #0
    db46:	e7b5      	b.n	dab4 <flexpwmFrequency+0x50>
    db48:	2000331c 	.word	0x2000331c

0000db4c <quadtimerWrite>:
{
    db4c:	b510      	push	{r4, lr}
	uint32_t modulo = 65537 - p->CH[submodule].LOAD + p->CH[submodule].CMPLD1;
    db4e:	eb00 1e41 	add.w	lr, r0, r1, lsl #5
    db52:	f8be c006 	ldrh.w	ip, [lr, #6]
    db56:	fa1f fc8c 	uxth.w	ip, ip
    db5a:	f8be 3010 	ldrh.w	r3, [lr, #16]
    db5e:	f1cc 1c01 	rsb	ip, ip, #65537	; 0x10001
    db62:	fa1c f383 	uxtah	r3, ip, r3
	uint32_t high = ((uint32_t)val * (modulo - 1)) >> analog_write_res;
    db66:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
    db6a:	fb0c f202 	mul.w	r2, ip, r2
    db6e:	4c08      	ldr	r4, [pc, #32]	; (db90 <quadtimerWrite+0x44>)
    db70:	7824      	ldrb	r4, [r4, #0]
    db72:	40e2      	lsrs	r2, r4
	if (high >= modulo - 1) high = modulo - 2;
    db74:	4594      	cmp	ip, r2
    db76:	bf98      	it	ls
    db78:	1e9a      	subls	r2, r3, #2
	uint32_t low = modulo - high; // low must 2 or higher
    db7a:	1a9b      	subs	r3, r3, r2
	p->CH[submodule].LOAD = 65537 - low;
    db7c:	f1c3 0301 	rsb	r3, r3, #1
    db80:	b29b      	uxth	r3, r3
    db82:	f8ae 3006 	strh.w	r3, [lr, #6]
	p->CH[submodule].CMPLD1 = high;
    db86:	b292      	uxth	r2, r2
    db88:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    db8c:	8202      	strh	r2, [r0, #16]
}
    db8e:	bd10      	pop	{r4, pc}
    db90:	20003a41 	.word	0x20003a41

0000db94 <quadtimerFrequency>:
{
    db94:	b500      	push	{lr}
	uint32_t newdiv = (uint32_t)((float)F_BUS_ACTUAL / frequency + 0.5f);
    db96:	4b23      	ldr	r3, [pc, #140]	; (dc24 <quadtimerFrequency+0x90>)
    db98:	ed93 7a00 	vldr	s14, [r3]
    db9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    dba0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    dba4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    dba8:	ee77 7a87 	vadd.f32	s15, s15, s14
    dbac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    dbb0:	ee17 3a90 	vmov	r3, s15
	while (newdiv > 65534 && prescale < 7) {
    dbb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
    dbb8:	4293      	cmp	r3, r2
    dbba:	d930      	bls.n	dc1e <quadtimerFrequency+0x8a>
	uint32_t prescale = 0;
    dbbc:	2200      	movs	r2, #0
	while (newdiv > 65534 && prescale < 7) {
    dbbe:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
		newdiv = newdiv >> 1; 
    dbc2:	085b      	lsrs	r3, r3, #1
		prescale = prescale + 1;
    dbc4:	3201      	adds	r2, #1
	while (newdiv > 65534 && prescale < 7) {
    dbc6:	4563      	cmp	r3, ip
    dbc8:	d901      	bls.n	dbce <quadtimerFrequency+0x3a>
    dbca:	2a06      	cmp	r2, #6
    dbcc:	d9f9      	bls.n	dbc2 <quadtimerFrequency+0x2e>
	if (newdiv > 65534) {
    dbce:	2b02      	cmp	r3, #2
    dbd0:	bf38      	it	cc
    dbd2:	2302      	movcc	r3, #2
    dbd4:	f64f 7cfe 	movw	ip, #65534	; 0xfffe
    dbd8:	4563      	cmp	r3, ip
    dbda:	bf28      	it	cs
    dbdc:	4663      	movcs	r3, ip
	uint32_t oldhigh = p->CH[submodule].CMPLD1;
    dbde:	eb00 1141 	add.w	r1, r0, r1, lsl #5
    dbe2:	f8b1 e010 	ldrh.w	lr, [r1, #16]
    dbe6:	fa1f fe8e 	uxth.w	lr, lr
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    dbea:	88c8      	ldrh	r0, [r1, #6]
    dbec:	b280      	uxth	r0, r0
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    dbee:	fb0e fc03 	mul.w	ip, lr, r3
	uint32_t oldlow = 65537 - p->CH[submodule].LOAD;
    dbf2:	f1c0 1001 	rsb	r0, r0, #65537	; 0x10001
	uint32_t high = (oldhigh * newdiv) / (oldhigh + oldlow);
    dbf6:	4470      	add	r0, lr
    dbf8:	fbbc f0f0 	udiv	r0, ip, r0
	uint32_t low = newdiv - high;
    dbfc:	1a1b      	subs	r3, r3, r0
	p->CH[submodule].LOAD = 65537 - low;
    dbfe:	f1c3 0301 	rsb	r3, r3, #1
    dc02:	b29b      	uxth	r3, r3
    dc04:	80cb      	strh	r3, [r1, #6]
	p->CH[submodule].CMPLD1 = high;
    dc06:	b280      	uxth	r0, r0
    dc08:	8208      	strh	r0, [r1, #16]
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    dc0a:	3208      	adds	r2, #8
    dc0c:	0252      	lsls	r2, r2, #9
    dc0e:	f402 52f0 	and.w	r2, r2, #7680	; 0x1e00
		TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
    dc12:	f242 0326 	movw	r3, #8230	; 0x2026
    dc16:	4313      	orrs	r3, r2
	p->CH[submodule].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8 + prescale) |
    dc18:	818b      	strh	r3, [r1, #12]
}
    dc1a:	f85d fb04 	ldr.w	pc, [sp], #4
	uint32_t prescale = 0;
    dc1e:	2200      	movs	r2, #0
    dc20:	e7d5      	b.n	dbce <quadtimerFrequency+0x3a>
    dc22:	bf00      	nop
    dc24:	2000331c 	.word	0x2000331c

0000dc28 <analogWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    dc28:	2836      	cmp	r0, #54	; 0x36
    dc2a:	d83f      	bhi.n	dcac <analogWrite+0x84>
{
    dc2c:	b538      	push	{r3, r4, r5, lr}
    dc2e:	4604      	mov	r4, r0
	info = pwm_pin_info + pin;
    dc30:	4b1f      	ldr	r3, [pc, #124]	; (dcb0 <analogWrite+0x88>)
    dc32:	eb03 0580 	add.w	r5, r3, r0, lsl #2
	if (info->type == 1) {
    dc36:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    dc3a:	2b01      	cmp	r3, #1
    dc3c:	d014      	beq.n	dc68 <analogWrite+0x40>
	} else if (info->type == 2) {
    dc3e:	2b02      	cmp	r3, #2
    dc40:	d12b      	bne.n	dc9a <analogWrite+0x72>
		switch ((info->module >> 4) & 3) {
    dc42:	f895 c001 	ldrb.w	ip, [r5, #1]
    dc46:	f3cc 1301 	ubfx	r3, ip, #4, #2
    dc4a:	2b01      	cmp	r3, #1
    dc4c:	d02a      	beq.n	dca4 <analogWrite+0x7c>
    dc4e:	2b02      	cmp	r3, #2
    dc50:	d02a      	beq.n	dca8 <analogWrite+0x80>
		  case 0: qtimer = &IMXRT_TMR1; break;
    dc52:	4818      	ldr	r0, [pc, #96]	; (dcb4 <analogWrite+0x8c>)
    dc54:	4a18      	ldr	r2, [pc, #96]	; (dcb8 <analogWrite+0x90>)
    dc56:	2b00      	cmp	r3, #0
    dc58:	bf08      	it	eq
    dc5a:	4610      	moveq	r0, r2
		quadtimerWrite(qtimer, info->module & 0x03, val);
    dc5c:	b28a      	uxth	r2, r1
    dc5e:	f00c 0103 	and.w	r1, ip, #3
    dc62:	f7ff ff73 	bl	db4c <quadtimerWrite>
    dc66:	e012      	b.n	dc8e <analogWrite+0x66>
		switch ((info->module >> 4) & 3) {
    dc68:	f895 c001 	ldrb.w	ip, [r5, #1]
    dc6c:	f3cc 1301 	ubfx	r3, ip, #4, #2
    dc70:	2b01      	cmp	r3, #1
    dc72:	d013      	beq.n	dc9c <analogWrite+0x74>
    dc74:	2b02      	cmp	r3, #2
    dc76:	d013      	beq.n	dca0 <analogWrite+0x78>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    dc78:	4810      	ldr	r0, [pc, #64]	; (dcbc <analogWrite+0x94>)
    dc7a:	4a11      	ldr	r2, [pc, #68]	; (dcc0 <analogWrite+0x98>)
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	bf08      	it	eq
    dc80:	4610      	moveq	r0, r2
		flexpwmWrite(flexpwm, info->module & 0x03, info->channel, val);
    dc82:	b28b      	uxth	r3, r1
    dc84:	78aa      	ldrb	r2, [r5, #2]
    dc86:	f00c 0103 	and.w	r1, ip, #3
    dc8a:	f7ff fe89 	bl	d9a0 <flexpwmWrite>
	*(portConfigRegister(pin)) = info->muxval;
    dc8e:	4b0d      	ldr	r3, [pc, #52]	; (dcc4 <analogWrite+0x9c>)
    dc90:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    dc94:	685b      	ldr	r3, [r3, #4]
    dc96:	78ea      	ldrb	r2, [r5, #3]
    dc98:	601a      	str	r2, [r3, #0]
}
    dc9a:	bd38      	pop	{r3, r4, r5, pc}
		switch ((info->module >> 4) & 3) {
    dc9c:	480a      	ldr	r0, [pc, #40]	; (dcc8 <analogWrite+0xa0>)
    dc9e:	e7f0      	b.n	dc82 <analogWrite+0x5a>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    dca0:	480a      	ldr	r0, [pc, #40]	; (dccc <analogWrite+0xa4>)
    dca2:	e7ee      	b.n	dc82 <analogWrite+0x5a>
		switch ((info->module >> 4) & 3) {
    dca4:	480a      	ldr	r0, [pc, #40]	; (dcd0 <analogWrite+0xa8>)
    dca6:	e7d9      	b.n	dc5c <analogWrite+0x34>
		  case 2: qtimer = &IMXRT_TMR3; break;
    dca8:	480a      	ldr	r0, [pc, #40]	; (dcd4 <analogWrite+0xac>)
    dcaa:	e7d7      	b.n	dc5c <analogWrite+0x34>
    dcac:	4770      	bx	lr
    dcae:	bf00      	nop
    dcb0:	20002d40 	.word	0x20002d40
    dcb4:	401e8000 	.word	0x401e8000
    dcb8:	401dc000 	.word	0x401dc000
    dcbc:	403e8000 	.word	0x403e8000
    dcc0:	403dc000 	.word	0x403dc000
    dcc4:	200028e4 	.word	0x200028e4
    dcc8:	403e0000 	.word	0x403e0000
    dccc:	403e4000 	.word	0x403e4000
    dcd0:	401e0000 	.word	0x401e0000
    dcd4:	401e4000 	.word	0x401e4000

0000dcd8 <analogWriteFrequency>:
	if (pin >= CORE_NUM_DIGITAL) return;
    dcd8:	2836      	cmp	r0, #54	; 0x36
    dcda:	d835      	bhi.n	dd48 <analogWriteFrequency+0x70>
{
    dcdc:	b510      	push	{r4, lr}
	info = pwm_pin_info + pin;
    dcde:	4b1b      	ldr	r3, [pc, #108]	; (dd4c <analogWriteFrequency+0x74>)
    dce0:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	if (info->type == 1) {
    dce4:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    dce8:	2b01      	cmp	r3, #1
    dcea:	d002      	beq.n	dcf2 <analogWriteFrequency+0x1a>
	} else if (info->type == 2) {
    dcec:	2b02      	cmp	r3, #2
    dcee:	d016      	beq.n	dd1e <analogWriteFrequency+0x46>
}
    dcf0:	bd10      	pop	{r4, pc}
		switch ((info->module >> 4) & 3) {
    dcf2:	7851      	ldrb	r1, [r2, #1]
    dcf4:	f3c1 1301 	ubfx	r3, r1, #4, #2
    dcf8:	2b01      	cmp	r3, #1
    dcfa:	d00c      	beq.n	dd16 <analogWriteFrequency+0x3e>
    dcfc:	2b02      	cmp	r3, #2
    dcfe:	d00c      	beq.n	dd1a <analogWriteFrequency+0x42>
		  case 0: flexpwm = &IMXRT_FLEXPWM1; break;
    dd00:	4813      	ldr	r0, [pc, #76]	; (dd50 <analogWriteFrequency+0x78>)
    dd02:	4c14      	ldr	r4, [pc, #80]	; (dd54 <analogWriteFrequency+0x7c>)
    dd04:	2b00      	cmp	r3, #0
    dd06:	bf08      	it	eq
    dd08:	4620      	moveq	r0, r4
		flexpwmFrequency(flexpwm, info->module & 0x03, info->channel, frequency);
    dd0a:	7892      	ldrb	r2, [r2, #2]
    dd0c:	f001 0103 	and.w	r1, r1, #3
    dd10:	f7ff fea8 	bl	da64 <flexpwmFrequency>
    dd14:	e7ec      	b.n	dcf0 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    dd16:	4810      	ldr	r0, [pc, #64]	; (dd58 <analogWriteFrequency+0x80>)
    dd18:	e7f7      	b.n	dd0a <analogWriteFrequency+0x32>
		  case 2: flexpwm = &IMXRT_FLEXPWM3; break;
    dd1a:	4810      	ldr	r0, [pc, #64]	; (dd5c <analogWriteFrequency+0x84>)
    dd1c:	e7f5      	b.n	dd0a <analogWriteFrequency+0x32>
		switch ((info->module >> 4) & 3) {
    dd1e:	7851      	ldrb	r1, [r2, #1]
    dd20:	f3c1 1301 	ubfx	r3, r1, #4, #2
    dd24:	2b01      	cmp	r3, #1
    dd26:	d00b      	beq.n	dd40 <analogWriteFrequency+0x68>
    dd28:	2b02      	cmp	r3, #2
    dd2a:	d00b      	beq.n	dd44 <analogWriteFrequency+0x6c>
		  case 0: qtimer = &IMXRT_TMR1; break;
    dd2c:	480c      	ldr	r0, [pc, #48]	; (dd60 <analogWriteFrequency+0x88>)
    dd2e:	4a0d      	ldr	r2, [pc, #52]	; (dd64 <analogWriteFrequency+0x8c>)
    dd30:	2b00      	cmp	r3, #0
    dd32:	bf08      	it	eq
    dd34:	4610      	moveq	r0, r2
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
    dd36:	f001 0103 	and.w	r1, r1, #3
    dd3a:	f7ff ff2b 	bl	db94 <quadtimerFrequency>
    dd3e:	e7d7      	b.n	dcf0 <analogWriteFrequency+0x18>
		switch ((info->module >> 4) & 3) {
    dd40:	4809      	ldr	r0, [pc, #36]	; (dd68 <analogWriteFrequency+0x90>)
    dd42:	e7f8      	b.n	dd36 <analogWriteFrequency+0x5e>
		  case 2: qtimer = &IMXRT_TMR3; break;
    dd44:	4809      	ldr	r0, [pc, #36]	; (dd6c <analogWriteFrequency+0x94>)
    dd46:	e7f6      	b.n	dd36 <analogWriteFrequency+0x5e>
    dd48:	4770      	bx	lr
    dd4a:	bf00      	nop
    dd4c:	20002d40 	.word	0x20002d40
    dd50:	403e8000 	.word	0x403e8000
    dd54:	403dc000 	.word	0x403dc000
    dd58:	403e0000 	.word	0x403e0000
    dd5c:	403e4000 	.word	0x403e4000
    dd60:	401e8000 	.word	0x401e8000
    dd64:	401dc000 	.word	0x401dc000
    dd68:	401e0000 	.word	0x401e0000
    dd6c:	401e4000 	.word	0x401e4000

0000dd70 <flexpwm_init>:
{
    dd70:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    dd72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    dd76:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    dd7a:	230f      	movs	r3, #15
    dd7c:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    dd80:	2100      	movs	r1, #0
    dd82:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    dd86:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    dd8a:	b29b      	uxth	r3, r3
    dd8c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    dd90:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dd94:	f44f 4460 	mov.w	r4, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    dd98:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
    dd9c:	460a      	mov	r2, r1
		p->SM[i].VAL1 = 33464;
    dd9e:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    dda2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    dda6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    ddaa:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ddac:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    ddb0:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ddb2:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ddb4:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    ddb6:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ddb8:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    ddbc:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    ddbe:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    ddc0:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    ddc2:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    ddc4:	3101      	adds	r1, #1
    ddc6:	2904      	cmp	r1, #4
    ddc8:	d1eb      	bne.n	dda2 <flexpwm_init+0x32>
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ddca:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    ddce:	b29b      	uxth	r3, r3
    ddd0:	f043 030f 	orr.w	r3, r3, #15
    ddd4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ddd8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    dddc:	b29b      	uxth	r3, r3
    ddde:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    dde2:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    dde6:	bd10      	pop	{r4, pc}

0000dde8 <quadtimer_init>:
{
    dde8:	b570      	push	{r4, r5, r6, lr}
	for (i=0; i < 4; i++) {
    ddea:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ddec:	4611      	mov	r1, r2
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ddee:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ddf0:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ddf4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ddf8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ddfc:	ea4f 1c42 	mov.w	ip, r2, lsl #5
    de00:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    de04:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    de06:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    de08:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    de0a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    de0c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    de0e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    de12:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    de14:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    de18:	3201      	adds	r2, #1
    de1a:	2a04      	cmp	r2, #4
    de1c:	d1ee      	bne.n	ddfc <quadtimer_init+0x14>
}
    de1e:	bd70      	pop	{r4, r5, r6, pc}

0000de20 <pwm_init>:
{
    de20:	b508      	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    de22:	4b10      	ldr	r3, [pc, #64]	; (de64 <pwm_init+0x44>)
    de24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    de26:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
    de2a:	679a      	str	r2, [r3, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    de2c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    de30:	4a0d      	ldr	r2, [pc, #52]	; (de68 <pwm_init+0x48>)
    de32:	430a      	orrs	r2, r1
    de34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    de38:	480c      	ldr	r0, [pc, #48]	; (de6c <pwm_init+0x4c>)
    de3a:	f7ff ff99 	bl	dd70 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    de3e:	480c      	ldr	r0, [pc, #48]	; (de70 <pwm_init+0x50>)
    de40:	f7ff ff96 	bl	dd70 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    de44:	480b      	ldr	r0, [pc, #44]	; (de74 <pwm_init+0x54>)
    de46:	f7ff ff93 	bl	dd70 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    de4a:	480b      	ldr	r0, [pc, #44]	; (de78 <pwm_init+0x58>)
    de4c:	f7ff ff90 	bl	dd70 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    de50:	480a      	ldr	r0, [pc, #40]	; (de7c <pwm_init+0x5c>)
    de52:	f7ff ffc9 	bl	dde8 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    de56:	480a      	ldr	r0, [pc, #40]	; (de80 <pwm_init+0x60>)
    de58:	f7ff ffc6 	bl	dde8 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    de5c:	4809      	ldr	r0, [pc, #36]	; (de84 <pwm_init+0x64>)
    de5e:	f7ff ffc3 	bl	dde8 <quadtimer_init>
}
    de62:	bd08      	pop	{r3, pc}
    de64:	400fc000 	.word	0x400fc000
    de68:	fc030000 	.word	0xfc030000
    de6c:	403dc000 	.word	0x403dc000
    de70:	403e0000 	.word	0x403e0000
    de74:	403e4000 	.word	0x403e4000
    de78:	403e8000 	.word	0x403e8000
    de7c:	401dc000 	.word	0x401dc000
    de80:	401e0000 	.word	0x401e0000
    de84:	401e4000 	.word	0x401e4000

0000de88 <analogWriteRes>:
	xbar[output] = input;
#endif
}

uint32_t analogWriteRes(uint32_t bits)
{
    de88:	4603      	mov	r3, r0
	if (bits < 1) {
		bits = 1;
	} else if (bits > 16) {
		bits = 16;
	}
	prior = analog_write_res;
    de8a:	4a05      	ldr	r2, [pc, #20]	; (dea0 <analogWriteRes+0x18>)
    de8c:	7810      	ldrb	r0, [r2, #0]
	analog_write_res = bits;
    de8e:	2b10      	cmp	r3, #16
    de90:	bf28      	it	cs
    de92:	2310      	movcs	r3, #16
    de94:	2b01      	cmp	r3, #1
    de96:	bf38      	it	cc
    de98:	2301      	movcc	r3, #1
    de9a:	7013      	strb	r3, [r2, #0]
	return prior;
}
    de9c:	4770      	bx	lr
    de9e:	bf00      	nop
    dea0:	20003a41 	.word	0x20003a41

0000dea4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    dea4:	4b07      	ldr	r3, [pc, #28]	; (dec4 <rtc_get+0x20>)
    dea6:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    dea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    deaa:	4a06      	ldr	r2, [pc, #24]	; (dec4 <rtc_get+0x20>)
    deac:	4684      	mov	ip, r0
    deae:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    deb0:	4619      	mov	r1, r3
    deb2:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    deb4:	4299      	cmp	r1, r3
    deb6:	d1f9      	bne.n	deac <rtc_get+0x8>
    deb8:	4584      	cmp	ip, r0
    deba:	d1f7      	bne.n	deac <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    debc:	0bdb      	lsrs	r3, r3, #15
}
    debe:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    dec2:	4770      	bx	lr
    dec4:	400d4000 	.word	0x400d4000

0000dec8 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    dec8:	4770      	bx	lr
	...

0000decc <unused_interrupt_vector>:
	__disable_irq();
    decc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    dece:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    ded2:	4c52      	ldr	r4, [pc, #328]	; (e01c <unused_interrupt_vector+0x150>)
    ded4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    ded8:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    dedc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dee0:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
    dee4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    dee8:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    deec:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    def0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
    def4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    def8:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    defc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    df00:	6993      	ldr	r3, [r2, #24]
    df02:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    df06:	69d3      	ldr	r3, [r2, #28]
    df08:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    df0c:	f000 f8d2 	bl	e0b4 <tempmonGetTemp>
    df10:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    df14:	f7ff ffc6 	bl	dea4 <rtc_get>
    df18:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    df1c:	230b      	movs	r3, #11
    df1e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
    df22:	483f      	ldr	r0, [pc, #252]	; (e020 <unused_interrupt_vector+0x154>)
	crc = 0xFFFFFFFF;
    df24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    df28:	493e      	ldr	r1, [pc, #248]	; (e024 <unused_interrupt_vector+0x158>)
	while (p < end) {
    df2a:	4d3f      	ldr	r5, [pc, #252]	; (e028 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    df2c:	6803      	ldr	r3, [r0, #0]
    df2e:	3004      	adds	r0, #4
    df30:	405a      	eors	r2, r3
    df32:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    df34:	f002 0301 	and.w	r3, r2, #1
    df38:	fb01 f303 	mul.w	r3, r1, r3
    df3c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    df40:	3c01      	subs	r4, #1
    df42:	d1f7      	bne.n	df34 <unused_interrupt_vector+0x68>
	while (p < end) {
    df44:	42a8      	cmp	r0, r5
    df46:	d1f1      	bne.n	df2c <unused_interrupt_vector+0x60>
	info->crc = crc;
    df48:	4b34      	ldr	r3, [pc, #208]	; (e01c <unused_interrupt_vector+0x150>)
    df4a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    df4e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    df52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    df56:	4a32      	ldr	r2, [pc, #200]	; (e020 <unused_interrupt_vector+0x154>)
    df58:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
    df5c:	3220      	adds	r2, #32
    df5e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    df62:	f3bf 8f4f 	dsb	sy
	asm("isb");
    df66:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    df6a:	4a30      	ldr	r2, [pc, #192]	; (e02c <unused_interrupt_vector+0x160>)
    df6c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    df6e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    df72:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    df74:	4b2e      	ldr	r3, [pc, #184]	; (e030 <unused_interrupt_vector+0x164>)
    df76:	2102      	movs	r1, #2
    df78:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    df7a:	69d3      	ldr	r3, [r2, #28]
    df7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    df80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    df84:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    df86:	4b2b      	ldr	r3, [pc, #172]	; (e034 <unused_interrupt_vector+0x168>)
    df88:	681a      	ldr	r2, [r3, #0]
    df8a:	4b2b      	ldr	r3, [pc, #172]	; (e038 <unused_interrupt_vector+0x16c>)
    df8c:	429a      	cmp	r2, r3
    df8e:	d81b      	bhi.n	dfc8 <unused_interrupt_vector+0xfc>
	PIT_MCR = 0;
    df90:	4b27      	ldr	r3, [pc, #156]	; (e030 <unused_interrupt_vector+0x164>)
    df92:	2200      	movs	r2, #0
    df94:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
    df96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    df9a:	4a28      	ldr	r2, [pc, #160]	; (e03c <unused_interrupt_vector+0x170>)
    df9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    dfa0:	2201      	movs	r2, #1
    dfa2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    dfa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dfaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dfae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    dfb2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    dfb6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    dfba:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    dfbe:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    dfc2:	4d1b      	ldr	r5, [pc, #108]	; (e030 <unused_interrupt_vector+0x164>)
			PIT_TFLG0 = 1;
    dfc4:	2601      	movs	r6, #1
    dfc6:	e005      	b.n	dfd4 <unused_interrupt_vector+0x108>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dfc8:	4618      	mov	r0, r3
    dfca:	f7ff f845 	bl	d058 <set_arm_clock>
    dfce:	e7df      	b.n	df90 <unused_interrupt_vector+0xc4>
		usb_isr();
    dfd0:	f000 f9e8 	bl	e3a4 <usb_isr>
		if (PIT_TFLG0) {
    dfd4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    dfd8:	2b00      	cmp	r3, #0
    dfda:	d0f9      	beq.n	dfd0 <unused_interrupt_vector+0x104>
			PIT_TFLG0 = 1;
    dfdc:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    dfe0:	3401      	adds	r4, #1
    dfe2:	2c4f      	cmp	r4, #79	; 0x4f
    dfe4:	d9f4      	bls.n	dfd0 <unused_interrupt_vector+0x104>
	USB1_USBCMD = USB_USBCMD_RST;
    dfe6:	4b16      	ldr	r3, [pc, #88]	; (e040 <unused_interrupt_vector+0x174>)
    dfe8:	2202      	movs	r2, #2
    dfea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    dfee:	4b15      	ldr	r3, [pc, #84]	; (e044 <unused_interrupt_vector+0x178>)
    dff0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    dff4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    dff6:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
    dffa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    dffe:	b93b      	cbnz	r3, e010 <unused_interrupt_vector+0x144>
	SRC_GPR5 = 0x0BAD00F1;
    e000:	4811      	ldr	r0, [pc, #68]	; (e048 <unused_interrupt_vector+0x17c>)
    e002:	4912      	ldr	r1, [pc, #72]	; (e04c <unused_interrupt_vector+0x180>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e004:	4a0a      	ldr	r2, [pc, #40]	; (e030 <unused_interrupt_vector+0x164>)
	SRC_GPR5 = 0x0BAD00F1;
    e006:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e008:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    e00c:	2b00      	cmp	r3, #0
    e00e:	d0fa      	beq.n	e006 <unused_interrupt_vector+0x13a>
	SCB_AIRCR = 0x05FA0004;
    e010:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e014:	4a0e      	ldr	r2, [pc, #56]	; (e050 <unused_interrupt_vector+0x184>)
    e016:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    e01a:	e7fe      	b.n	e01a <unused_interrupt_vector+0x14e>
    e01c:	2027ff00 	.word	0x2027ff00
    e020:	2027ff80 	.word	0x2027ff80
    e024:	edb88320 	.word	0xedb88320
    e028:	2027ffa8 	.word	0x2027ffa8
    e02c:	400fc000 	.word	0x400fc000
    e030:	40084000 	.word	0x40084000
    e034:	20003320 	.word	0x20003320
    e038:	0bcd3d80 	.word	0x0bcd3d80
    e03c:	00249f00 	.word	0x00249f00
    e040:	402e0000 	.word	0x402e0000
    e044:	400d9000 	.word	0x400d9000
    e048:	400f8000 	.word	0x400f8000
    e04c:	0bad00f1 	.word	0x0bad00f1
    e050:	05fa0004 	.word	0x05fa0004

0000e054 <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
    e054:	b508      	push	{r3, lr}
    e056:	4603      	mov	r3, r0
        char *prev = __brkval;
    e058:	4a08      	ldr	r2, [pc, #32]	; (e07c <_sbrk+0x28>)
    e05a:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
    e05c:	b133      	cbz	r3, e06c <_sbrk+0x18>
    e05e:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
    e060:	4402      	add	r2, r0
    e062:	4b07      	ldr	r3, [pc, #28]	; (e080 <_sbrk+0x2c>)
    e064:	429a      	cmp	r2, r3
    e066:	d802      	bhi.n	e06e <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    e068:	4b04      	ldr	r3, [pc, #16]	; (e07c <_sbrk+0x28>)
    e06a:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
    e06c:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
    e06e:	f002 ff37 	bl	10ee0 <__errno>
    e072:	230c      	movs	r3, #12
    e074:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
    e076:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e07a:	e7f7      	b.n	e06c <_sbrk+0x18>
    e07c:	200033cc 	.word	0x200033cc
    e080:	20280000 	.word	0x20280000

0000e084 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    e084:	2000      	movs	r0, #0
    e086:	4770      	bx	lr

0000e088 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    e088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e08c:	4770      	bx	lr

0000e08e <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    e08e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e092:	604b      	str	r3, [r1, #4]
	return 0;
}
    e094:	2000      	movs	r0, #0
    e096:	4770      	bx	lr

0000e098 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    e098:	2001      	movs	r0, #1
    e09a:	4770      	bx	lr

0000e09c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    e09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e0a0:	4770      	bx	lr

0000e0a2 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
    e0a2:	bf30      	wfi
    e0a4:	e7fd      	b.n	e0a2 <__cxa_pure_virtual>

0000e0a6 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    e0a6:	bf30      	wfi
    e0a8:	e7fd      	b.n	e0a6 <abort>

0000e0aa <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
    e0aa:	b508      	push	{r3, lr}
  unused_interrupt_vector();
    e0ac:	f7ff ff0e 	bl	decc <unused_interrupt_vector>
}
    e0b0:	bd08      	pop	{r3, pc}
	...

0000e0b4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    e0b4:	4a13      	ldr	r2, [pc, #76]	; (e104 <tempmonGetTemp+0x50>)
    e0b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    e0ba:	f013 0f04 	tst.w	r3, #4
    e0be:	d0fa      	beq.n	e0b6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e0c0:	4b10      	ldr	r3, [pc, #64]	; (e104 <tempmonGetTemp+0x50>)
    e0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e0c6:	4a10      	ldr	r2, [pc, #64]	; (e108 <tempmonGetTemp+0x54>)
    e0c8:	ed92 7a00 	vldr	s14, [r2]
    e0cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    e0d0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    e0d4:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    e0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    e0dc:	4b0b      	ldr	r3, [pc, #44]	; (e10c <tempmonGetTemp+0x58>)
    e0de:	edd3 6a00 	vldr	s13, [r3]
    e0e2:	eef8 6a66 	vcvt.f32.u32	s13, s13
    e0e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    e0ea:	4b09      	ldr	r3, [pc, #36]	; (e110 <tempmonGetTemp+0x5c>)
    e0ec:	edd3 6a00 	vldr	s13, [r3]
    e0f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    e0f4:	4b07      	ldr	r3, [pc, #28]	; (e114 <tempmonGetTemp+0x60>)
    e0f6:	edd3 6a00 	vldr	s13, [r3]
    e0fa:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    e0fe:	ee37 0a40 	vsub.f32	s0, s14, s0
    e102:	4770      	bx	lr
    e104:	400d8100 	.word	0x400d8100
    e108:	200051ec 	.word	0x200051ec
    e10c:	200051e8 	.word	0x200051e8
    e110:	200051f0 	.word	0x200051f0
    e114:	200051f4 	.word	0x200051f4

0000e118 <endpoint0_transmit>:
	if (len > 0) {
    e118:	468c      	mov	ip, r1
    e11a:	b319      	cbz	r1, e164 <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
    e11c:	4b23      	ldr	r3, [pc, #140]	; (e1ac <endpoint0_transmit+0x94>)
    e11e:	2101      	movs	r1, #1
    e120:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e122:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    e126:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    e12a:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e12c:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e12e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    e132:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e134:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    e138:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e13a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    e13e:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e140:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e144:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e146:	491a      	ldr	r1, [pc, #104]	; (e1b0 <endpoint0_transmit+0x98>)
    e148:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
    e14a:	2300      	movs	r3, #0
    e14c:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    e14e:	4919      	ldr	r1, [pc, #100]	; (e1b4 <endpoint0_transmit+0x9c>)
    e150:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e158:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e15c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e160:	2b00      	cmp	r3, #0
    e162:	d1fb      	bne.n	e15c <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
    e164:	4b14      	ldr	r3, [pc, #80]	; (e1b8 <endpoint0_transmit+0xa0>)
    e166:	2101      	movs	r1, #1
    e168:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e16a:	2a00      	cmp	r2, #0
    e16c:	f248 0180 	movw	r1, #32896	; 0x8080
    e170:	bf08      	it	eq
    e172:	2180      	moveq	r1, #128	; 0x80
    e174:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    e176:	2000      	movs	r0, #0
    e178:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    e17a:	490d      	ldr	r1, [pc, #52]	; (e1b0 <endpoint0_transmit+0x98>)
    e17c:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
    e17e:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e180:	4b0c      	ldr	r3, [pc, #48]	; (e1b4 <endpoint0_transmit+0x9c>)
    e182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    e186:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    e18a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    e18e:	f041 0101 	orr.w	r1, r1, #1
    e192:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e196:	1a12      	subs	r2, r2, r0
    e198:	bf18      	it	ne
    e19a:	2201      	movne	r2, #1
    e19c:	4b07      	ldr	r3, [pc, #28]	; (e1bc <endpoint0_transmit+0xa4>)
    e19e:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e1a0:	4a04      	ldr	r2, [pc, #16]	; (e1b4 <endpoint0_transmit+0x9c>)
    e1a2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	d1fb      	bne.n	e1a2 <endpoint0_transmit+0x8a>
}
    e1aa:	4770      	bx	lr
    e1ac:	20003ee0 	.word	0x20003ee0
    e1b0:	20000000 	.word	0x20000000
    e1b4:	402e0000 	.word	0x402e0000
    e1b8:	20003ec0 	.word	0x20003ec0
    e1bc:	20005090 	.word	0x20005090

0000e1c0 <endpoint0_receive>:
	if (len > 0) {
    e1c0:	468c      	mov	ip, r1
    e1c2:	b319      	cbz	r1, e20c <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
    e1c4:	4b24      	ldr	r3, [pc, #144]	; (e258 <endpoint0_receive+0x98>)
    e1c6:	2101      	movs	r1, #1
    e1c8:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e1ca:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    e1ce:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
    e1d2:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e1d4:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e1d6:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
    e1da:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e1dc:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
    e1e0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e1e2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
    e1e6:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e1e8:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e1ec:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    e1ee:	491b      	ldr	r1, [pc, #108]	; (e25c <endpoint0_receive+0x9c>)
    e1f0:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
    e1f2:	2300      	movs	r3, #0
    e1f4:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
    e1f6:	491a      	ldr	r1, [pc, #104]	; (e260 <endpoint0_receive+0xa0>)
    e1f8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e1fc:	f043 0301 	orr.w	r3, r3, #1
    e200:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e204:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    e208:	2b00      	cmp	r3, #0
    e20a:	d1fb      	bne.n	e204 <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
    e20c:	4b15      	ldr	r3, [pc, #84]	; (e264 <endpoint0_receive+0xa4>)
    e20e:	2101      	movs	r1, #1
    e210:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e212:	2a00      	cmp	r2, #0
    e214:	f248 0180 	movw	r1, #32896	; 0x8080
    e218:	bf08      	it	eq
    e21a:	2180      	moveq	r1, #128	; 0x80
    e21c:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    e21e:	2000      	movs	r0, #0
    e220:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e222:	490e      	ldr	r1, [pc, #56]	; (e25c <endpoint0_receive+0x9c>)
    e224:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
    e226:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e228:	4b0d      	ldr	r3, [pc, #52]	; (e260 <endpoint0_receive+0xa0>)
    e22a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    e22e:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e232:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    e236:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    e23a:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e23e:	1a12      	subs	r2, r2, r0
    e240:	bf18      	it	ne
    e242:	2201      	movne	r2, #1
    e244:	0412      	lsls	r2, r2, #16
    e246:	4b08      	ldr	r3, [pc, #32]	; (e268 <endpoint0_receive+0xa8>)
    e248:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    e24a:	4a05      	ldr	r2, [pc, #20]	; (e260 <endpoint0_receive+0xa0>)
    e24c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e250:	2b00      	cmp	r3, #0
    e252:	d1fb      	bne.n	e24c <endpoint0_receive+0x8c>
}
    e254:	4770      	bx	lr
    e256:	bf00      	nop
    e258:	20003ee0 	.word	0x20003ee0
    e25c:	20000000 	.word	0x20000000
    e260:	402e0000 	.word	0x402e0000
    e264:	20003ec0 	.word	0x20003ec0
    e268:	20005090 	.word	0x20005090

0000e26c <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    e26c:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    e26e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e270:	b11b      	cbz	r3, e27a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    e272:	6853      	ldr	r3, [r2, #4]
    e274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    e278:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    e27a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    e27c:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
    e27e:	b33b      	cbz	r3, e2d0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
    e280:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    e282:	4b1a      	ldr	r3, [pc, #104]	; (e2ec <schedule_transfer+0x80>)
    e284:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
    e288:	420b      	tst	r3, r1
    e28a:	d12b      	bne.n	e2e4 <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    e28c:	4b18      	ldr	r3, [pc, #96]	; (e2f0 <schedule_transfer+0x84>)
    e28e:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e290:	4b16      	ldr	r3, [pc, #88]	; (e2ec <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e292:	4e17      	ldr	r6, [pc, #92]	; (e2f0 <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    e294:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e298:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    e29c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    e2a0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    e2a4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    e2a8:	f414 4f80 	tst.w	r4, #16384	; 0x4000
    e2ac:	d104      	bne.n	e2b8 <schedule_transfer+0x4c>
    e2ae:	6874      	ldr	r4, [r6, #4]
    e2b0:	1be4      	subs	r4, r4, r7
    e2b2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    e2b6:	d3ed      	bcc.n	e294 <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    e2b8:	4229      	tst	r1, r5
    e2ba:	d113      	bne.n	e2e4 <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    e2bc:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
    e2be:	2300      	movs	r3, #0
    e2c0:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    e2c2:	4c0a      	ldr	r4, [pc, #40]	; (e2ec <schedule_transfer+0x80>)
    e2c4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e2c8:	430b      	orrs	r3, r1
    e2ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
    e2ce:	e009      	b.n	e2e4 <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    e2d0:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    e2d2:	2300      	movs	r3, #0
    e2d4:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    e2d6:	4c05      	ldr	r4, [pc, #20]	; (e2ec <schedule_transfer+0x80>)
    e2d8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e2dc:	430b      	orrs	r3, r1
    e2de:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e2e2:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    e2e4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e2e6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e2e8:	bcf0      	pop	{r4, r5, r6, r7}
    e2ea:	4770      	bx	lr
    e2ec:	402e0000 	.word	0x402e0000
    e2f0:	e0001000 	.word	0xe0001000

0000e2f4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e2f4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    e2f6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    e2f8:	b1b5      	cbz	r5, e328 <run_callbacks+0x34>
    e2fa:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
    e2fc:	462b      	mov	r3, r5
	uint32_t count = 0;
    e2fe:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
    e300:	685a      	ldr	r2, [r3, #4]
    e302:	f012 0f80 	tst.w	r2, #128	; 0x80
    e306:	d107      	bne.n	e318 <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    e308:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
    e30a:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
    e30c:	2b01      	cmp	r3, #1
    e30e:	d1f7      	bne.n	e300 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    e310:	2300      	movs	r3, #0
    e312:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    e314:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    e316:	e000      	b.n	e31a <run_callbacks+0x26>
			ep->first_transfer = t;
    e318:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
    e31a:	b12c      	cbz	r4, e328 <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
    e31c:	4628      	mov	r0, r5
    e31e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    e320:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e322:	4798      	blx	r3
	while (count) {
    e324:	3c01      	subs	r4, #1
    e326:	d1f9      	bne.n	e31c <run_callbacks+0x28>
		first = next;
		count--;
	}
}
    e328:	bd70      	pop	{r4, r5, r6, pc}

0000e32a <usb_endpoint_config>:
{
    e32a:	b570      	push	{r4, r5, r6, lr}
    e32c:	4604      	mov	r4, r0
    e32e:	460e      	mov	r6, r1
    e330:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    e332:	223c      	movs	r2, #60	; 0x3c
    e334:	2100      	movs	r1, #0
    e336:	3004      	adds	r0, #4
    e338:	f003 f964 	bl	11604 <memset>
	qh->config = config;
    e33c:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    e33e:	2301      	movs	r3, #1
    e340:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
    e342:	63a5      	str	r5, [r4, #56]	; 0x38
}
    e344:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e348 <usb_start_sof_interrupts>:
	__disable_irq();
    e348:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    e34a:	4a0a      	ldr	r2, [pc, #40]	; (e374 <usb_start_sof_interrupts+0x2c>)
    e34c:	2301      	movs	r3, #1
    e34e:	4083      	lsls	r3, r0
    e350:	7810      	ldrb	r0, [r2, #0]
    e352:	4318      	orrs	r0, r3
    e354:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    e356:	4b08      	ldr	r3, [pc, #32]	; (e378 <usb_start_sof_interrupts+0x30>)
    e358:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e35c:	f013 0f80 	tst.w	r3, #128	; 0x80
    e360:	d106      	bne.n	e370 <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e362:	4a05      	ldr	r2, [pc, #20]	; (e378 <usb_start_sof_interrupts+0x30>)
    e364:	2180      	movs	r1, #128	; 0x80
    e366:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e36a:	430b      	orrs	r3, r1
    e36c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    e370:	b662      	cpsie	i
}
    e372:	4770      	bx	lr
    e374:	200053d3 	.word	0x200053d3
    e378:	402e0000 	.word	0x402e0000

0000e37c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    e37c:	2301      	movs	r3, #1
    e37e:	4083      	lsls	r3, r0
    e380:	4a06      	ldr	r2, [pc, #24]	; (e39c <usb_stop_sof_interrupts+0x20>)
    e382:	7810      	ldrb	r0, [r2, #0]
    e384:	ea20 0003 	bic.w	r0, r0, r3
    e388:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    e38a:	b930      	cbnz	r0, e39a <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e38c:	4a04      	ldr	r2, [pc, #16]	; (e3a0 <usb_stop_sof_interrupts+0x24>)
    e38e:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    e392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e396:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    e39a:	4770      	bx	lr
    e39c:	200053d3 	.word	0x200053d3
    e3a0:	402e0000 	.word	0x402e0000

0000e3a4 <usb_isr>:
{
    e3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    e3a8:	4bb5      	ldr	r3, [pc, #724]	; (e680 <usb_isr+0x2dc>)
    e3aa:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
    e3ae:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e3b2:	f017 0f01 	tst.w	r7, #1
    e3b6:	f000 81c9 	beq.w	e74c <usb_isr+0x3a8>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e3ba:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
    e3be:	2b00      	cmp	r3, #0
    e3c0:	f000 8192 	beq.w	e6e8 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e3c4:	4cae      	ldr	r4, [pc, #696]	; (e680 <usb_isr+0x2dc>)
				s.word1 = endpoint_queue_head[0].setup0;
    e3c6:	4eaf      	ldr	r6, [pc, #700]	; (e684 <usb_isr+0x2e0>)
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e3c8:	f106 0b80 	add.w	fp, r6, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e3cc:	f8df a2ec 	ldr.w	sl, [pc, #748]	; e6bc <usb_isr+0x318>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e3d0:	f8df 92ec 	ldr.w	r9, [pc, #748]	; e6c0 <usb_isr+0x31c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e3d4:	f8df 82ec 	ldr.w	r8, [pc, #748]	; e6c4 <usb_isr+0x320>
    e3d8:	e01b      	b.n	e412 <usb_isr+0x6e>
	switch (setup.wRequestAndType) {
    e3da:	2b80      	cmp	r3, #128	; 0x80
    e3dc:	d110      	bne.n	e400 <usb_isr+0x5c>
		reply_buffer[0] = 0;
    e3de:	48aa      	ldr	r0, [pc, #680]	; (e688 <usb_isr+0x2e4>)
    e3e0:	2200      	movs	r2, #0
    e3e2:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
    e3e4:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    e3e6:	2102      	movs	r1, #2
    e3e8:	f7ff fe96 	bl	e118 <endpoint0_transmit>
		return;
    e3ec:	e00c      	b.n	e408 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e3ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    e3f2:	f000 8089 	beq.w	e508 <usb_isr+0x164>
    e3f6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    e3fa:	b29b      	uxth	r3, r3
    e3fc:	2b01      	cmp	r3, #1
    e3fe:	d967      	bls.n	e4d0 <usb_isr+0x12c>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e400:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e404:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e408:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e40c:	2b00      	cmp	r3, #0
    e40e:	f000 816b 	beq.w	e6e8 <usb_isr+0x344>
			USB1_ENDPTSETUPSTAT = setupstatus;
    e412:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    e416:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
    e418:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e41a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e41e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e422:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e426:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e42a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    e42e:	d0f4      	beq.n	e41a <usb_isr+0x76>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e430:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e438:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e43c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e440:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e444:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    e448:	f013 1f01 	tst.w	r3, #65537	; 0x10001
    e44c:	d1fa      	bne.n	e444 <usb_isr+0xa0>
			endpoint0_notify_mask = 0;
    e44e:	4b8f      	ldr	r3, [pc, #572]	; (e68c <usb_isr+0x2e8>)
    e450:	2100      	movs	r1, #0
    e452:	6019      	str	r1, [r3, #0]
	setup.bothwords = setupdata;
    e454:	4610      	mov	r0, r2
	switch (setup.wRequestAndType) {
    e456:	b2ab      	uxth	r3, r5
    e458:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    e45c:	d07e      	beq.n	e55c <usb_isr+0x1b8>
    e45e:	d820      	bhi.n	e4a2 <usb_isr+0xfe>
    e460:	f240 3102 	movw	r1, #770	; 0x302
    e464:	428b      	cmp	r3, r1
    e466:	f000 80a1 	beq.w	e5ac <usb_isr+0x208>
    e46a:	d8c0      	bhi.n	e3ee <usb_isr+0x4a>
    e46c:	2b82      	cmp	r3, #130	; 0x82
    e46e:	d07e      	beq.n	e56e <usb_isr+0x1ca>
    e470:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    e474:	d1b1      	bne.n	e3da <usb_isr+0x36>
		endpoint = setup.wIndex & 0x7F;
    e476:	b293      	uxth	r3, r2
    e478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e47c:	2a07      	cmp	r2, #7
    e47e:	d8bf      	bhi.n	e400 <usb_isr+0x5c>
		if (dir) {
    e480:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e484:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e488:	bf14      	ite	ne
    e48a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e48e:	f023 0301 	biceq.w	r3, r3, #1
    e492:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e496:	2200      	movs	r2, #0
    e498:	4611      	mov	r1, r2
    e49a:	4610      	mov	r0, r2
    e49c:	f7ff fe90 	bl	e1c0 <endpoint0_receive>
		return;
    e4a0:	e7b2      	b.n	e408 <usb_isr+0x64>
	switch (setup.wRequestAndType) {
    e4a2:	f242 2121 	movw	r1, #8737	; 0x2221
    e4a6:	428b      	cmp	r3, r1
    e4a8:	f000 810e 	beq.w	e6c8 <usb_isr+0x324>
    e4ac:	d919      	bls.n	e4e2 <usb_isr+0x13e>
    e4ae:	f242 3121 	movw	r1, #8993	; 0x2321
    e4b2:	428b      	cmp	r3, r1
    e4b4:	f000 8112 	beq.w	e6dc <usb_isr+0x338>
    e4b8:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    e4bc:	428b      	cmp	r3, r1
    e4be:	d19f      	bne.n	e400 <usb_isr+0x5c>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    e4c0:	b293      	uxth	r3, r2
    e4c2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    e4c6:	d19b      	bne.n	e400 <usb_isr+0x5c>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    e4c8:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    e4cc:	f363 000f 	bfi	r0, r3, #0, #16
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e4d0:	4b6f      	ldr	r3, [pc, #444]	; (e690 <usb_isr+0x2ec>)
    e4d2:	6859      	ldr	r1, [r3, #4]
    e4d4:	2900      	cmp	r1, #0
    e4d6:	d093      	beq.n	e400 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e4d8:	fa1f fe80 	uxth.w	lr, r0
    e4dc:	f3c5 450f 	ubfx	r5, r5, #16, #16
    e4e0:	e0a7      	b.n	e632 <usb_isr+0x28e>
	switch (setup.wRequestAndType) {
    e4e2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    e4e6:	d01b      	beq.n	e520 <usb_isr+0x17c>
    e4e8:	f242 0121 	movw	r1, #8225	; 0x2021
    e4ec:	428b      	cmp	r3, r1
    e4ee:	d187      	bne.n	e400 <usb_isr+0x5c>
		if (setup.wLength != 7) break;
    e4f0:	0c13      	lsrs	r3, r2, #16
    e4f2:	2b07      	cmp	r3, #7
    e4f4:	d184      	bne.n	e400 <usb_isr+0x5c>
		endpoint0_setupdata.bothwords = setupdata;
    e4f6:	4b67      	ldr	r3, [pc, #412]	; (e694 <usb_isr+0x2f0>)
    e4f8:	601d      	str	r5, [r3, #0]
    e4fa:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
    e4fc:	2201      	movs	r2, #1
    e4fe:	2107      	movs	r1, #7
    e500:	4865      	ldr	r0, [pc, #404]	; (e698 <usb_isr+0x2f4>)
    e502:	f7ff fe5d 	bl	e1c0 <endpoint0_receive>
		return;
    e506:	e77f      	b.n	e408 <usb_isr+0x64>
		endpoint0_receive(NULL, 0, 0);
    e508:	2200      	movs	r2, #0
    e50a:	4611      	mov	r1, r2
    e50c:	4610      	mov	r0, r2
    e50e:	f7ff fe57 	bl	e1c0 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    e512:	0c2b      	lsrs	r3, r5, #16
    e514:	065b      	lsls	r3, r3, #25
    e516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e51a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    e51e:	e773      	b.n	e408 <usb_isr+0x64>
		usb_configuration = setup.wValue;
    e520:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e524:	4b5d      	ldr	r3, [pc, #372]	; (e69c <usb_isr+0x2f8>)
    e526:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e528:	4b5d      	ldr	r3, [pc, #372]	; (e6a0 <usb_isr+0x2fc>)
    e52a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e52e:	4b5d      	ldr	r3, [pc, #372]	; (e6a4 <usb_isr+0x300>)
    e530:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e534:	4b5c      	ldr	r3, [pc, #368]	; (e6a8 <usb_isr+0x304>)
    e536:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    e53a:	f000 fb45 	bl	ebc8 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    e53e:	2280      	movs	r2, #128	; 0x80
    e540:	2100      	movs	r1, #0
    e542:	4658      	mov	r0, fp
    e544:	f003 f85e 	bl	11604 <memset>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    e548:	f8c6 a0a0 	str.w	sl, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    e54c:	f8c6 90e0 	str.w	r9, [r6, #224]	; 0xe0
		endpoint0_receive(NULL, 0, 0);
    e550:	2200      	movs	r2, #0
    e552:	4611      	mov	r1, r2
    e554:	4610      	mov	r0, r2
    e556:	f7ff fe33 	bl	e1c0 <endpoint0_receive>
		return;
    e55a:	e755      	b.n	e408 <usb_isr+0x64>
		reply_buffer[0] = usb_configuration;
    e55c:	4b4f      	ldr	r3, [pc, #316]	; (e69c <usb_isr+0x2f8>)
    e55e:	781b      	ldrb	r3, [r3, #0]
    e560:	4849      	ldr	r0, [pc, #292]	; (e688 <usb_isr+0x2e4>)
    e562:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e564:	2200      	movs	r2, #0
    e566:	2101      	movs	r1, #1
    e568:	f7ff fdd6 	bl	e118 <endpoint0_transmit>
		return;
    e56c:	e74c      	b.n	e408 <usb_isr+0x64>
		endpoint = setup.wIndex & 0x7F;
    e56e:	b293      	uxth	r3, r2
    e570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e574:	2a07      	cmp	r2, #7
    e576:	f63f af43 	bhi.w	e400 <usb_isr+0x5c>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e57a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    e57e:	4a42      	ldr	r2, [pc, #264]	; (e688 <usb_isr+0x2e4>)
    e580:	2100      	movs	r1, #0
    e582:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    e584:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e586:	f013 0f80 	tst.w	r3, #128	; 0x80
    e58a:	d00b      	beq.n	e5a4 <usb_isr+0x200>
    e58c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    e590:	d002      	beq.n	e598 <usb_isr+0x1f4>
			reply_buffer[0] = 1;
    e592:	4b3d      	ldr	r3, [pc, #244]	; (e688 <usb_isr+0x2e4>)
    e594:	2201      	movs	r2, #1
    e596:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e598:	2200      	movs	r2, #0
    e59a:	2102      	movs	r1, #2
    e59c:	483a      	ldr	r0, [pc, #232]	; (e688 <usb_isr+0x2e4>)
    e59e:	f7ff fdbb 	bl	e118 <endpoint0_transmit>
		return;
    e5a2:	e731      	b.n	e408 <usb_isr+0x64>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e5a4:	f010 0f01 	tst.w	r0, #1
    e5a8:	d0f6      	beq.n	e598 <usb_isr+0x1f4>
    e5aa:	e7f2      	b.n	e592 <usb_isr+0x1ee>
		endpoint = setup.wIndex & 0x7F;
    e5ac:	b293      	uxth	r3, r2
    e5ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
    e5b2:	2a07      	cmp	r2, #7
    e5b4:	f63f af24 	bhi.w	e400 <usb_isr+0x5c>
		if (dir) {
    e5b8:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e5bc:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    e5c0:	bf14      	ite	ne
    e5c2:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e5c6:	f043 0301 	orreq.w	r3, r3, #1
    e5ca:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
    e5ce:	2200      	movs	r2, #0
    e5d0:	4611      	mov	r1, r2
    e5d2:	4610      	mov	r0, r2
    e5d4:	f7ff fdf4 	bl	e1c0 <endpoint0_receive>
		return;
    e5d8:	e716      	b.n	e408 <usb_isr+0x64>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e5da:	4b34      	ldr	r3, [pc, #208]	; (e6ac <usb_isr+0x308>)
    e5dc:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e5de:	462a      	mov	r2, r5
    e5e0:	4933      	ldr	r1, [pc, #204]	; (e6b0 <usb_isr+0x30c>)
    e5e2:	4b34      	ldr	r3, [pc, #208]	; (e6b4 <usb_isr+0x310>)
    e5e4:	2800      	cmp	r0, #0
    e5e6:	bf18      	it	ne
    e5e8:	4619      	movne	r1, r3
    e5ea:	4833      	ldr	r0, [pc, #204]	; (e6b8 <usb_isr+0x314>)
    e5ec:	f7fe ff40 	bl	d470 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e5f0:	4a31      	ldr	r2, [pc, #196]	; (e6b8 <usb_isr+0x314>)
    e5f2:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e5f6:	442a      	add	r2, r5
	asm("dsb");
    e5f8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e5fc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e600:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e604:	3320      	adds	r3, #32
	} while (location < end_addr);
    e606:	429a      	cmp	r2, r3
    e608:	d8fa      	bhi.n	e600 <usb_isr+0x25c>
	asm("dsb");
    e60a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e60e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e612:	2200      	movs	r2, #0
    e614:	4629      	mov	r1, r5
    e616:	4828      	ldr	r0, [pc, #160]	; (e6b8 <usb_isr+0x314>)
    e618:	f7ff fd7e 	bl	e118 <endpoint0_transmit>
				return;
    e61c:	e6f4      	b.n	e408 <usb_isr+0x64>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e61e:	462a      	mov	r2, r5
    e620:	4825      	ldr	r0, [pc, #148]	; (e6b8 <usb_isr+0x314>)
    e622:	f7fe ff25 	bl	d470 <memcpy>
    e626:	e7e3      	b.n	e5f0 <usb_isr+0x24c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e628:	330c      	adds	r3, #12
    e62a:	6859      	ldr	r1, [r3, #4]
    e62c:	2900      	cmp	r1, #0
    e62e:	f43f aee7 	beq.w	e400 <usb_isr+0x5c>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e632:	4628      	mov	r0, r5
    e634:	f8b3 c000 	ldrh.w	ip, [r3]
    e638:	45ac      	cmp	ip, r5
    e63a:	d1f5      	bne.n	e628 <usb_isr+0x284>
    e63c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
    e640:	45f4      	cmp	ip, lr
    e642:	d1f1      	bne.n	e628 <usb_isr+0x284>
				if ((setup.wValue >> 8) == 3) {
    e644:	0a2d      	lsrs	r5, r5, #8
    e646:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
    e648:	bf0c      	ite	eq
    e64a:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
    e64c:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e64e:	0c15      	lsrs	r5, r2, #16
    e650:	429d      	cmp	r5, r3
    e652:	bf28      	it	cs
    e654:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
    e656:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    e65a:	d0be      	beq.n	e5da <usb_isr+0x236>
				} else if (setup.wValue == 0x700) {
    e65c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    e660:	d1dd      	bne.n	e61e <usb_isr+0x27a>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e662:	4b12      	ldr	r3, [pc, #72]	; (e6ac <usb_isr+0x308>)
    e664:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    e666:	462a      	mov	r2, r5
    e668:	4912      	ldr	r1, [pc, #72]	; (e6b4 <usb_isr+0x310>)
    e66a:	4b11      	ldr	r3, [pc, #68]	; (e6b0 <usb_isr+0x30c>)
    e66c:	2800      	cmp	r0, #0
    e66e:	bf18      	it	ne
    e670:	4619      	movne	r1, r3
    e672:	4811      	ldr	r0, [pc, #68]	; (e6b8 <usb_isr+0x314>)
    e674:	f7fe fefc 	bl	d470 <memcpy>
					usb_descriptor_buffer[1] = 7;
    e678:	2307      	movs	r3, #7
    e67a:	4a0f      	ldr	r2, [pc, #60]	; (e6b8 <usb_isr+0x314>)
    e67c:	7053      	strb	r3, [r2, #1]
    e67e:	e7b7      	b.n	e5f0 <usb_isr+0x24c>
    e680:	402e0000 	.word	0x402e0000
    e684:	20000000 	.word	0x20000000
    e688:	20005168 	.word	0x20005168
    e68c:	20005090 	.word	0x20005090
    e690:	20003148 	.word	0x20003148
    e694:	20004080 	.word	0x20004080
    e698:	20005088 	.word	0x20005088
    e69c:	200053d8 	.word	0x200053d8
    e6a0:	00cc0002 	.word	0x00cc0002
    e6a4:	000200c8 	.word	0x000200c8
    e6a8:	00c80002 	.word	0x00c80002
    e6ac:	200053d9 	.word	0x200053d9
    e6b0:	600020d0 	.word	0x600020d0
    e6b4:	60002134 	.word	0x60002134
    e6b8:	20200000 	.word	0x20200000
    e6bc:	b8c6cf5d 	.word	0xb8c6cf5d
    e6c0:	74d59319 	.word	0x74d59319
    e6c4:	402e01c0 	.word	0x402e01c0
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e6c8:	b292      	uxth	r2, r2
    e6ca:	b93a      	cbnz	r2, e6dc <usb_isr+0x338>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e6cc:	4b57      	ldr	r3, [pc, #348]	; (e82c <usb_isr+0x488>)
    e6ce:	681a      	ldr	r2, [r3, #0]
    e6d0:	4b57      	ldr	r3, [pc, #348]	; (e830 <usb_isr+0x48c>)
    e6d2:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e6d4:	f3c5 4507 	ubfx	r5, r5, #16, #8
    e6d8:	4b56      	ldr	r3, [pc, #344]	; (e834 <usb_isr+0x490>)
    e6da:	701d      	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    e6dc:	2200      	movs	r2, #0
    e6de:	4611      	mov	r1, r2
    e6e0:	4610      	mov	r0, r2
    e6e2:	f7ff fd6d 	bl	e1c0 <endpoint0_receive>
		return;
    e6e6:	e68f      	b.n	e408 <usb_isr+0x64>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e6e8:	4b53      	ldr	r3, [pc, #332]	; (e838 <usb_isr+0x494>)
    e6ea:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
    e6ee:	b36c      	cbz	r4, e74c <usb_isr+0x3a8>
			USB1_ENDPTCOMPLETE = completestatus;
    e6f0:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e6f4:	4b51      	ldr	r3, [pc, #324]	; (e83c <usb_isr+0x498>)
    e6f6:	681b      	ldr	r3, [r3, #0]
    e6f8:	421c      	tst	r4, r3
    e6fa:	d172      	bne.n	e7e2 <usb_isr+0x43e>
			completestatus &= endpointN_notify_mask;
    e6fc:	4b50      	ldr	r3, [pc, #320]	; (e840 <usb_isr+0x49c>)
    e6fe:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
    e700:	401c      	ands	r4, r3
    e702:	d023      	beq.n	e74c <usb_isr+0x3a8>
				while (tx) {
    e704:	0c26      	lsrs	r6, r4, #16
    e706:	d010      	beq.n	e72a <usb_isr+0x386>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e708:	f8df 9154 	ldr.w	r9, [pc, #340]	; e860 <usb_isr+0x4bc>
					tx &= ~(1<<p);
    e70c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
    e710:	fa96 f5a6 	rbit	r5, r6
    e714:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e718:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
    e71c:	3040      	adds	r0, #64	; 0x40
    e71e:	f7ff fde9 	bl	e2f4 <run_callbacks>
					tx &= ~(1<<p);
    e722:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
    e726:	43ae      	bics	r6, r5
    e728:	d1f2      	bne.n	e710 <usb_isr+0x36c>
				uint32_t rx = completestatus & 0xffff;
    e72a:	b2a4      	uxth	r4, r4
				while(rx) {
    e72c:	b174      	cbz	r4, e74c <usb_isr+0x3a8>
					run_callbacks(endpoint_queue_head + p * 2);
    e72e:	f8df 8130 	ldr.w	r8, [pc, #304]	; e860 <usb_isr+0x4bc>
					rx &= ~(1<<p);
    e732:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
    e734:	fa94 f5a4 	rbit	r5, r4
    e738:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    e73c:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
    e740:	f7ff fdd8 	bl	e2f4 <run_callbacks>
					rx &= ~(1<<p);
    e744:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
    e748:	43ac      	bics	r4, r5
    e74a:	d1f3      	bne.n	e734 <usb_isr+0x390>
	if (status & USB_USBSTS_URI) { // page 3164
    e74c:	f017 0f40 	tst.w	r7, #64	; 0x40
    e750:	d019      	beq.n	e786 <usb_isr+0x3e2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e752:	4b39      	ldr	r3, [pc, #228]	; (e838 <usb_isr+0x494>)
    e754:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e758:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e75c:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e760:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e764:	461a      	mov	r2, r3
    e766:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e76a:	2b00      	cmp	r3, #0
    e76c:	d1fb      	bne.n	e766 <usb_isr+0x3c2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e76e:	4b32      	ldr	r3, [pc, #200]	; (e838 <usb_isr+0x494>)
    e770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e774:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e778:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e77c:	f000 fa22 	bl	ebc4 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e780:	4b2f      	ldr	r3, [pc, #188]	; (e840 <usb_isr+0x49c>)
    e782:	2200      	movs	r2, #0
    e784:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e786:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
    e78a:	d003      	beq.n	e794 <usb_isr+0x3f0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e78c:	4b2d      	ldr	r3, [pc, #180]	; (e844 <usb_isr+0x4a0>)
    e78e:	681b      	ldr	r3, [r3, #0]
    e790:	b103      	cbz	r3, e794 <usb_isr+0x3f0>
    e792:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e794:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
    e798:	d003      	beq.n	e7a2 <usb_isr+0x3fe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e79a:	4b2b      	ldr	r3, [pc, #172]	; (e848 <usb_isr+0x4a4>)
    e79c:	681b      	ldr	r3, [r3, #0]
    e79e:	b103      	cbz	r3, e7a2 <usb_isr+0x3fe>
    e7a0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e7a2:	f017 0f04 	tst.w	r7, #4
    e7a6:	d009      	beq.n	e7bc <usb_isr+0x418>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e7a8:	4b23      	ldr	r3, [pc, #140]	; (e838 <usb_isr+0x494>)
    e7aa:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e7ae:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
    e7b2:	4b26      	ldr	r3, [pc, #152]	; (e84c <usb_isr+0x4a8>)
    e7b4:	bf14      	ite	ne
    e7b6:	2201      	movne	r2, #1
			usb_high_speed = 0;
    e7b8:	2200      	moveq	r2, #0
    e7ba:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e7bc:	4b1e      	ldr	r3, [pc, #120]	; (e838 <usb_isr+0x494>)
    e7be:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e7c2:	f013 0f80 	tst.w	r3, #128	; 0x80
    e7c6:	d00a      	beq.n	e7de <usb_isr+0x43a>
    e7c8:	f017 0f80 	tst.w	r7, #128	; 0x80
    e7cc:	d007      	beq.n	e7de <usb_isr+0x43a>
		if (usb_reboot_timer) {
    e7ce:	4b20      	ldr	r3, [pc, #128]	; (e850 <usb_isr+0x4ac>)
    e7d0:	781b      	ldrb	r3, [r3, #0]
    e7d2:	b123      	cbz	r3, e7de <usb_isr+0x43a>
			if (--usb_reboot_timer == 0) {
    e7d4:	3b01      	subs	r3, #1
    e7d6:	b2db      	uxtb	r3, r3
    e7d8:	4a1d      	ldr	r2, [pc, #116]	; (e850 <usb_isr+0x4ac>)
    e7da:	7013      	strb	r3, [r2, #0]
    e7dc:	b30b      	cbz	r3, e822 <usb_isr+0x47e>
}
    e7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				endpoint0_notify_mask = 0;
    e7e2:	4b16      	ldr	r3, [pc, #88]	; (e83c <usb_isr+0x498>)
    e7e4:	2200      	movs	r2, #0
    e7e6:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    e7e8:	4b1a      	ldr	r3, [pc, #104]	; (e854 <usb_isr+0x4b0>)
    e7ea:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e7ec:	8819      	ldrh	r1, [r3, #0]
    e7ee:	f242 0321 	movw	r3, #8225	; 0x2021
    e7f2:	4299      	cmp	r1, r3
    e7f4:	d182      	bne.n	e6fc <usb_isr+0x358>
    e7f6:	b292      	uxth	r2, r2
    e7f8:	2a00      	cmp	r2, #0
    e7fa:	f47f af7f 	bne.w	e6fc <usb_isr+0x358>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e7fe:	4b16      	ldr	r3, [pc, #88]	; (e858 <usb_isr+0x4b4>)
    e800:	4a16      	ldr	r2, [pc, #88]	; (e85c <usb_isr+0x4b8>)
    e802:	e892 0003 	ldmia.w	r2, {r0, r1}
    e806:	6018      	str	r0, [r3, #0]
    e808:	8099      	strh	r1, [r3, #4]
    e80a:	0c09      	lsrs	r1, r1, #16
    e80c:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e80e:	2886      	cmp	r0, #134	; 0x86
    e810:	f47f af74 	bne.w	e6fc <usb_isr+0x358>
			usb_start_sof_interrupts(NUM_INTERFACE);
    e814:	2003      	movs	r0, #3
    e816:	f7ff fd97 	bl	e348 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e81a:	4b0d      	ldr	r3, [pc, #52]	; (e850 <usb_isr+0x4ac>)
    e81c:	2250      	movs	r2, #80	; 0x50
    e81e:	701a      	strb	r2, [r3, #0]
    e820:	e76c      	b.n	e6fc <usb_isr+0x358>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e822:	2003      	movs	r0, #3
    e824:	f7ff fdaa 	bl	e37c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e828:	f006 feee 	bl	15608 <___reboot_Teensyduino__veneer>
    e82c:	20005388 	.word	0x20005388
    e830:	2000539c 	.word	0x2000539c
    e834:	200053d7 	.word	0x200053d7
    e838:	402e0000 	.word	0x402e0000
    e83c:	20005090 	.word	0x20005090
    e840:	20005094 	.word	0x20005094
    e844:	200053a0 	.word	0x200053a0
    e848:	200053a4 	.word	0x200053a4
    e84c:	200053d9 	.word	0x200053d9
    e850:	200053da 	.word	0x200053da
    e854:	20004080 	.word	0x20004080
    e858:	20005394 	.word	0x20005394
    e85c:	20005088 	.word	0x20005088
    e860:	20000000 	.word	0x20000000

0000e864 <usb_config_rx>:
{
    e864:	b538      	push	{r3, r4, r5, lr}
    e866:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e868:	1e83      	subs	r3, r0, #2
    e86a:	2b02      	cmp	r3, #2
    e86c:	d900      	bls.n	e870 <usb_config_rx+0xc>
}
    e86e:	bd38      	pop	{r3, r4, r5, pc}
    e870:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e872:	fab2 fc82 	clz	ip, r2
    e876:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e87a:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e87c:	462a      	mov	r2, r5
    e87e:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e882:	4807      	ldr	r0, [pc, #28]	; (e8a0 <usb_config_rx+0x3c>)
    e884:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e888:	f7ff fd4f 	bl	e32a <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    e88c:	2d00      	cmp	r5, #0
    e88e:	d0ee      	beq.n	e86e <usb_config_rx+0xa>
    e890:	4a04      	ldr	r2, [pc, #16]	; (e8a4 <usb_config_rx+0x40>)
    e892:	2301      	movs	r3, #1
    e894:	40a3      	lsls	r3, r4
    e896:	6811      	ldr	r1, [r2, #0]
    e898:	430b      	orrs	r3, r1
    e89a:	6013      	str	r3, [r2, #0]
    e89c:	e7e7      	b.n	e86e <usb_config_rx+0xa>
    e89e:	bf00      	nop
    e8a0:	20000000 	.word	0x20000000
    e8a4:	20005094 	.word	0x20005094

0000e8a8 <usb_config_tx>:
{
    e8a8:	b538      	push	{r3, r4, r5, lr}
    e8aa:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e8ac:	3802      	subs	r0, #2
    e8ae:	2802      	cmp	r0, #2
    e8b0:	d900      	bls.n	e8b4 <usb_config_tx+0xc>
}
    e8b2:	bd38      	pop	{r3, r4, r5, pc}
    e8b4:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e8b6:	fab2 fc82 	clz	ip, r2
    e8ba:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e8be:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e8c0:	4809      	ldr	r0, [pc, #36]	; (e8e8 <usb_config_tx+0x40>)
    e8c2:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
    e8c6:	461a      	mov	r2, r3
    e8c8:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
    e8cc:	3040      	adds	r0, #64	; 0x40
    e8ce:	f7ff fd2c 	bl	e32a <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e8d2:	2d00      	cmp	r5, #0
    e8d4:	d0ed      	beq.n	e8b2 <usb_config_tx+0xa>
    e8d6:	4a05      	ldr	r2, [pc, #20]	; (e8ec <usb_config_tx+0x44>)
    e8d8:	3410      	adds	r4, #16
    e8da:	2301      	movs	r3, #1
    e8dc:	40a3      	lsls	r3, r4
    e8de:	6811      	ldr	r1, [r2, #0]
    e8e0:	430b      	orrs	r3, r1
    e8e2:	6013      	str	r3, [r2, #0]
    e8e4:	e7e5      	b.n	e8b2 <usb_config_tx+0xa>
    e8e6:	bf00      	nop
    e8e8:	20000000 	.word	0x20000000
    e8ec:	20005094 	.word	0x20005094

0000e8f0 <usb_prepare_transfer>:
{
    e8f0:	b410      	push	{r4}
	transfer->next = 1;
    e8f2:	2401      	movs	r4, #1
    e8f4:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
    e8f6:	0412      	lsls	r2, r2, #16
    e8f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e8fc:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
    e8fe:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
    e900:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    e904:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    e906:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
    e90a:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
    e90c:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
    e910:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
    e912:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    e916:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
    e918:	61c3      	str	r3, [r0, #28]
}
    e91a:	f85d 4b04 	ldr.w	r4, [sp], #4
    e91e:	4770      	bx	lr

0000e920 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    e920:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e922:	1e83      	subs	r3, r0, #2
    e924:	2b02      	cmp	r3, #2
    e926:	d900      	bls.n	e92a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e928:	bd08      	pop	{r3, pc}
    e92a:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
    e92c:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e930:	4b04      	ldr	r3, [pc, #16]	; (e944 <usb_transmit+0x24>)
    e932:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e936:	2301      	movs	r3, #1
    e938:	fa03 f101 	lsl.w	r1, r3, r1
    e93c:	3040      	adds	r0, #64	; 0x40
    e93e:	f7ff fc95 	bl	e26c <schedule_transfer>
    e942:	e7f1      	b.n	e928 <usb_transmit+0x8>
    e944:	20000000 	.word	0x20000000

0000e948 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    e948:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e94a:	1e83      	subs	r3, r0, #2
    e94c:	2b02      	cmp	r3, #2
    e94e:	d900      	bls.n	e952 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e950:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
    e952:	460a      	mov	r2, r1
    e954:	2101      	movs	r1, #1
    e956:	4081      	lsls	r1, r0
    e958:	4b02      	ldr	r3, [pc, #8]	; (e964 <usb_receive+0x1c>)
    e95a:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e95e:	f7ff fc85 	bl	e26c <schedule_transfer>
    e962:	e7f5      	b.n	e950 <usb_receive+0x8>
    e964:	20000000 	.word	0x20000000

0000e968 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    e968:	6840      	ldr	r0, [r0, #4]
#endif
}
    e96a:	4770      	bx	lr

0000e96c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    e96c:	b500      	push	{lr}
    e96e:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e970:	4b10      	ldr	r3, [pc, #64]	; (e9b4 <usb_init_serialnumber+0x48>)
    e972:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
    e976:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e97a:	4b0f      	ldr	r3, [pc, #60]	; (e9b8 <usb_init_serialnumber+0x4c>)
    e97c:	4298      	cmp	r0, r3
    e97e:	d202      	bcs.n	e986 <usb_init_serialnumber+0x1a>
    e980:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e984:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e986:	220a      	movs	r2, #10
    e988:	a901      	add	r1, sp, #4
    e98a:	f7fe fe13 	bl	d5b4 <ultoa>
	for (i=0; i<10; i++) {
    e98e:	a901      	add	r1, sp, #4
    e990:	480a      	ldr	r0, [pc, #40]	; (e9bc <usb_init_serialnumber+0x50>)
    e992:	2300      	movs	r3, #0
		char c = buf[i];
    e994:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
    e998:	b122      	cbz	r2, e9a4 <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
    e99a:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e99e:	3301      	adds	r3, #1
    e9a0:	2b0a      	cmp	r3, #10
    e9a2:	d1f7      	bne.n	e994 <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e9a4:	3301      	adds	r3, #1
    e9a6:	005b      	lsls	r3, r3, #1
    e9a8:	4a04      	ldr	r2, [pc, #16]	; (e9bc <usb_init_serialnumber+0x50>)
    e9aa:	7013      	strb	r3, [r2, #0]
}
    e9ac:	b005      	add	sp, #20
    e9ae:	f85d fb04 	ldr.w	pc, [sp], #4
    e9b2:	bf00      	nop
    e9b4:	401f4400 	.word	0x401f4400
    e9b8:	00989680 	.word	0x00989680
    e9bc:	20003a28 	.word	0x20003a28

0000e9c0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e9c0:	b508      	push	{r3, lr}
    e9c2:	f000 fa15 	bl	edf0 <usb_serial_flush_input>
    e9c6:	bd08      	pop	{r3, pc}

0000e9c8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    e9c8:	b508      	push	{r3, lr}
    e9ca:	f000 f9e1 	bl	ed90 <usb_serial_peekchar>
    e9ce:	bd08      	pop	{r3, pc}

0000e9d0 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    e9d0:	b508      	push	{r3, lr}
    e9d2:	f000 fa3f 	bl	ee54 <usb_serial_getchar>
    e9d6:	bd08      	pop	{r3, pc}

0000e9d8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e9d8:	b508      	push	{r3, lr}
    e9da:	f000 f9fd 	bl	edd8 <usb_serial_available>
    e9de:	bd08      	pop	{r3, pc}

0000e9e0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e9e0:	b508      	push	{r3, lr}
    e9e2:	f000 fb55 	bl	f090 <usb_serial_flush_output>
    e9e6:	bd08      	pop	{r3, pc}

0000e9e8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e9e8:	b508      	push	{r3, lr}
    e9ea:	f000 fb2b 	bl	f044 <usb_serial_write_buffer_free>
    e9ee:	bd08      	pop	{r3, pc}

0000e9f0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e9f0:	b508      	push	{r3, lr}
    e9f2:	4608      	mov	r0, r1
    e9f4:	4611      	mov	r1, r2
    e9f6:	f000 fa3d 	bl	ee74 <usb_serial_write>
    e9fa:	bd08      	pop	{r3, pc}

0000e9fc <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    e9fc:	b508      	push	{r3, lr}
    e9fe:	4608      	mov	r0, r1
    ea00:	f000 fb14 	bl	f02c <usb_serial_putchar>
    ea04:	bd08      	pop	{r3, pc}
	...

0000ea08 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    ea08:	4b20      	ldr	r3, [pc, #128]	; (ea8c <usb_serial_flush_callback+0x84>)
    ea0a:	781b      	ldrb	r3, [r3, #0]
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	d13b      	bne.n	ea88 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
    ea10:	4b1f      	ldr	r3, [pc, #124]	; (ea90 <usb_serial_flush_callback+0x88>)
    ea12:	781b      	ldrb	r3, [r3, #0]
    ea14:	2b00      	cmp	r3, #0
    ea16:	d037      	beq.n	ea88 <usb_serial_flush_callback+0x80>
{
    ea18:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    ea1a:	4b1e      	ldr	r3, [pc, #120]	; (ea94 <usb_serial_flush_callback+0x8c>)
    ea1c:	881d      	ldrh	r5, [r3, #0]
    ea1e:	b905      	cbnz	r5, ea22 <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
    ea20:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    ea22:	4a1d      	ldr	r2, [pc, #116]	; (ea98 <usb_serial_flush_callback+0x90>)
    ea24:	7811      	ldrb	r1, [r2, #0]
    ea26:	4e1d      	ldr	r6, [pc, #116]	; (ea9c <usb_serial_flush_callback+0x94>)
    ea28:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ea2c:	4c1c      	ldr	r4, [pc, #112]	; (eaa0 <usb_serial_flush_callback+0x98>)
    ea2e:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    ea32:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ea36:	2300      	movs	r3, #0
    ea38:	462a      	mov	r2, r5
    ea3a:	4621      	mov	r1, r4
    ea3c:	4630      	mov	r0, r6
    ea3e:	f7ff ff57 	bl	e8f0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ea42:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    ea44:	1962      	adds	r2, r4, r5
	asm("dsb");
    ea46:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ea4a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ea4e:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    ea52:	3320      	adds	r3, #32
	} while (location < end_addr);
    ea54:	429a      	cmp	r2, r3
    ea56:	d8fa      	bhi.n	ea4e <usb_serial_flush_callback+0x46>
	asm("dsb");
    ea58:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ea5c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ea60:	4631      	mov	r1, r6
    ea62:	2004      	movs	r0, #4
    ea64:	f7ff ff5c 	bl	e920 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ea68:	4b0b      	ldr	r3, [pc, #44]	; (ea98 <usb_serial_flush_callback+0x90>)
    ea6a:	781b      	ldrb	r3, [r3, #0]
    ea6c:	3301      	adds	r3, #1
    ea6e:	b2db      	uxtb	r3, r3
    ea70:	2b03      	cmp	r3, #3
    ea72:	d805      	bhi.n	ea80 <usb_serial_flush_callback+0x78>
    ea74:	4a08      	ldr	r2, [pc, #32]	; (ea98 <usb_serial_flush_callback+0x90>)
    ea76:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    ea78:	4b06      	ldr	r3, [pc, #24]	; (ea94 <usb_serial_flush_callback+0x8c>)
    ea7a:	2200      	movs	r2, #0
    ea7c:	801a      	strh	r2, [r3, #0]
    ea7e:	e7cf      	b.n	ea20 <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ea80:	4b05      	ldr	r3, [pc, #20]	; (ea98 <usb_serial_flush_callback+0x90>)
    ea82:	2200      	movs	r2, #0
    ea84:	701a      	strb	r2, [r3, #0]
    ea86:	e7f7      	b.n	ea78 <usb_serial_flush_callback+0x70>
    ea88:	4770      	bx	lr
    ea8a:	bf00      	nop
    ea8c:	200053d6 	.word	0x200053d6
    ea90:	200053d8 	.word	0x200053d8
    ea94:	200053ba 	.word	0x200053ba
    ea98:	200053d5 	.word	0x200053d5
    ea9c:	20004000 	.word	0x20004000
    eaa0:	20201080 	.word	0x20201080

0000eaa4 <rx_queue_transfer>:
{
    eaa4:	b570      	push	{r4, r5, r6, lr}
    eaa6:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    eaa8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    eaac:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    eab0:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    eab4:	4c13      	ldr	r4, [pc, #76]	; (eb04 <rx_queue_transfer+0x60>)
    eab6:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    eaba:	4d13      	ldr	r5, [pc, #76]	; (eb08 <rx_queue_transfer+0x64>)
    eabc:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    eac0:	4e12      	ldr	r6, [pc, #72]	; (eb0c <rx_queue_transfer+0x68>)
    eac2:	8832      	ldrh	r2, [r6, #0]
    eac4:	4621      	mov	r1, r4
    eac6:	4628      	mov	r0, r5
    eac8:	f7ff ff12 	bl	e8f0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    eacc:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
    eace:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    ead0:	4422      	add	r2, r4
	asm("dsb");
    ead2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ead6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    eada:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
    eade:	3320      	adds	r3, #32
	} while (location < end_addr);
    eae0:	429a      	cmp	r2, r3
    eae2:	d8fa      	bhi.n	eada <rx_queue_transfer+0x36>
	asm("dsb");
    eae4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eae8:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    eaec:	4629      	mov	r1, r5
    eaee:	2003      	movs	r0, #3
    eaf0:	f7ff ff2a 	bl	e948 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    eaf4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    eaf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    eafc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    eb00:	bd70      	pop	{r4, r5, r6, pc}
    eb02:	bf00      	nop
    eb04:	20200080 	.word	0x20200080
    eb08:	20003f00 	.word	0x20003f00
    eb0c:	200053b8 	.word	0x200053b8

0000eb10 <rx_event>:
{
    eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    eb12:	6843      	ldr	r3, [r0, #4]
    eb14:	4a23      	ldr	r2, [pc, #140]	; (eba4 <rx_event+0x94>)
    eb16:	8814      	ldrh	r4, [r2, #0]
    eb18:	f3c3 430e 	ubfx	r3, r3, #16, #15
    eb1c:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
    eb1e:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
    eb20:	2c00      	cmp	r4, #0
    eb22:	dd3a      	ble.n	eb9a <rx_event+0x8a>
		uint32_t head = rx_head;
    eb24:	4b20      	ldr	r3, [pc, #128]	; (eba8 <rx_event+0x98>)
    eb26:	781b      	ldrb	r3, [r3, #0]
    eb28:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
    eb2a:	4a20      	ldr	r2, [pc, #128]	; (ebac <rx_event+0x9c>)
    eb2c:	7812      	ldrb	r2, [r2, #0]
    eb2e:	b2d2      	uxtb	r2, r2
    eb30:	4293      	cmp	r3, r2
    eb32:	d008      	beq.n	eb46 <rx_event+0x36>
			uint32_t ii = rx_list[head];
    eb34:	4a1e      	ldr	r2, [pc, #120]	; (ebb0 <rx_event+0xa0>)
    eb36:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
    eb38:	4a1e      	ldr	r2, [pc, #120]	; (ebb4 <rx_event+0xa4>)
    eb3a:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    eb3e:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
    eb42:	4294      	cmp	r4, r2
    eb44:	d914      	bls.n	eb70 <rx_event+0x60>
		rx_count[i] = len;
    eb46:	4a1b      	ldr	r2, [pc, #108]	; (ebb4 <rx_event+0xa4>)
    eb48:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
    eb4c:	4a1a      	ldr	r2, [pc, #104]	; (ebb8 <rx_event+0xa8>)
    eb4e:	2100      	movs	r1, #0
    eb50:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    eb54:	3301      	adds	r3, #1
    eb56:	2b09      	cmp	r3, #9
    eb58:	bf28      	it	cs
    eb5a:	460b      	movcs	r3, r1
		rx_list[head] = i;
    eb5c:	4a14      	ldr	r2, [pc, #80]	; (ebb0 <rx_event+0xa0>)
    eb5e:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
    eb60:	b2db      	uxtb	r3, r3
    eb62:	4a11      	ldr	r2, [pc, #68]	; (eba8 <rx_event+0x98>)
    eb64:	7013      	strb	r3, [r2, #0]
		rx_available += len;
    eb66:	4b15      	ldr	r3, [pc, #84]	; (ebbc <rx_event+0xac>)
    eb68:	681a      	ldr	r2, [r3, #0]
    eb6a:	4414      	add	r4, r2
    eb6c:	601c      	str	r4, [r3, #0]
}
    eb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    eb70:	eb06 2047 	add.w	r0, r6, r7, lsl #9
    eb74:	4b12      	ldr	r3, [pc, #72]	; (ebc0 <rx_event+0xb0>)
    eb76:	4622      	mov	r2, r4
    eb78:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    eb7c:	4418      	add	r0, r3
    eb7e:	f7fe fc77 	bl	d470 <memcpy>
				rx_count[ii] = count + len;
    eb82:	4426      	add	r6, r4
    eb84:	4b0b      	ldr	r3, [pc, #44]	; (ebb4 <rx_event+0xa4>)
    eb86:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
    eb8a:	4a0c      	ldr	r2, [pc, #48]	; (ebbc <rx_event+0xac>)
    eb8c:	6813      	ldr	r3, [r2, #0]
    eb8e:	4423      	add	r3, r4
    eb90:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    eb92:	4628      	mov	r0, r5
    eb94:	f7ff ff86 	bl	eaa4 <rx_queue_transfer>
				return;
    eb98:	e7e9      	b.n	eb6e <rx_event+0x5e>
		rx_queue_transfer(i);
    eb9a:	4628      	mov	r0, r5
    eb9c:	f7ff ff82 	bl	eaa4 <rx_queue_transfer>
    eba0:	e7e5      	b.n	eb6e <rx_event+0x5e>
    eba2:	bf00      	nop
    eba4:	200053b8 	.word	0x200053b8
    eba8:	200053cf 	.word	0x200053cf
    ebac:	200053d0 	.word	0x200053d0
    ebb0:	200051a4 	.word	0x200051a4
    ebb4:	20005184 	.word	0x20005184
    ebb8:	20005194 	.word	0x20005194
    ebbc:	20005180 	.word	0x20005180
    ebc0:	20200080 	.word	0x20200080

0000ebc4 <usb_serial_reset>:
}
    ebc4:	4770      	bx	lr
	...

0000ebc8 <usb_serial_configure>:
{
    ebc8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    ebca:	4b2a      	ldr	r3, [pc, #168]	; (ec74 <usb_serial_configure+0xac>)
    ebcc:	781b      	ldrb	r3, [r3, #0]
    ebce:	f013 0fff 	tst.w	r3, #255	; 0xff
    ebd2:	bf0c      	ite	eq
    ebd4:	2340      	moveq	r3, #64	; 0x40
    ebd6:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    ebda:	4d27      	ldr	r5, [pc, #156]	; (ec78 <usb_serial_configure+0xb0>)
    ebdc:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    ebde:	4e27      	ldr	r6, [pc, #156]	; (ec7c <usb_serial_configure+0xb4>)
    ebe0:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ebe2:	2280      	movs	r2, #128	; 0x80
    ebe4:	2100      	movs	r1, #0
    ebe6:	4826      	ldr	r0, [pc, #152]	; (ec80 <usb_serial_configure+0xb8>)
    ebe8:	f002 fd0c 	bl	11604 <memset>
	tx_head = 0;
    ebec:	2400      	movs	r4, #0
    ebee:	4b25      	ldr	r3, [pc, #148]	; (ec84 <usb_serial_configure+0xbc>)
    ebf0:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
    ebf2:	4b25      	ldr	r3, [pc, #148]	; (ec88 <usb_serial_configure+0xc0>)
    ebf4:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    ebf6:	f44f 7280 	mov.w	r2, #256	; 0x100
    ebfa:	4621      	mov	r1, r4
    ebfc:	4823      	ldr	r0, [pc, #140]	; (ec8c <usb_serial_configure+0xc4>)
    ebfe:	f002 fd01 	bl	11604 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    ec02:	4b23      	ldr	r3, [pc, #140]	; (ec90 <usb_serial_configure+0xc8>)
    ec04:	601c      	str	r4, [r3, #0]
    ec06:	605c      	str	r4, [r3, #4]
    ec08:	609c      	str	r4, [r3, #8]
    ec0a:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
    ec0c:	4b21      	ldr	r3, [pc, #132]	; (ec94 <usb_serial_configure+0xcc>)
    ec0e:	601c      	str	r4, [r3, #0]
    ec10:	605c      	str	r4, [r3, #4]
    ec12:	609c      	str	r4, [r3, #8]
    ec14:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
    ec16:	4b20      	ldr	r3, [pc, #128]	; (ec98 <usb_serial_configure+0xd0>)
    ec18:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
    ec1a:	4b20      	ldr	r3, [pc, #128]	; (ec9c <usb_serial_configure+0xd4>)
    ec1c:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
    ec1e:	4b20      	ldr	r3, [pc, #128]	; (eca0 <usb_serial_configure+0xd8>)
    ec20:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    ec22:	4623      	mov	r3, r4
    ec24:	4622      	mov	r2, r4
    ec26:	2110      	movs	r1, #16
    ec28:	2002      	movs	r0, #2
    ec2a:	f7ff fe3d 	bl	e8a8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    ec2e:	4b1d      	ldr	r3, [pc, #116]	; (eca4 <usb_serial_configure+0xdc>)
    ec30:	4622      	mov	r2, r4
    ec32:	8831      	ldrh	r1, [r6, #0]
    ec34:	2003      	movs	r0, #3
    ec36:	f7ff fe15 	bl	e864 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    ec3a:	4623      	mov	r3, r4
    ec3c:	2201      	movs	r2, #1
    ec3e:	8829      	ldrh	r1, [r5, #0]
    ec40:	2004      	movs	r0, #4
    ec42:	f7ff fe31 	bl	e8a8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ec46:	4620      	mov	r0, r4
    ec48:	f7ff ff2c 	bl	eaa4 <rx_queue_transfer>
    ec4c:	3401      	adds	r4, #1
    ec4e:	2c08      	cmp	r4, #8
    ec50:	d1f9      	bne.n	ec46 <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
    ec52:	4b15      	ldr	r3, [pc, #84]	; (eca8 <usb_serial_configure+0xe0>)
    ec54:	4a15      	ldr	r2, [pc, #84]	; (ecac <usb_serial_configure+0xe4>)
    ec56:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    ec58:	4b15      	ldr	r3, [pc, #84]	; (ecb0 <usb_serial_configure+0xe8>)
    ec5a:	2200      	movs	r2, #0
    ec5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    ec60:	224a      	movs	r2, #74	; 0x4a
    ec62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    ec66:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    ec6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    ec6e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    ec72:	bd70      	pop	{r4, r5, r6, pc}
    ec74:	200053d9 	.word	0x200053d9
    ec78:	200053bc 	.word	0x200053bc
    ec7c:	200053b8 	.word	0x200053b8
    ec80:	20004000 	.word	0x20004000
    ec84:	200053d5 	.word	0x200053d5
    ec88:	200053ba 	.word	0x200053ba
    ec8c:	20003f00 	.word	0x20003f00
    ec90:	20005184 	.word	0x20005184
    ec94:	20005194 	.word	0x20005194
    ec98:	200053cf 	.word	0x200053cf
    ec9c:	200053d0 	.word	0x200053d0
    eca0:	20005180 	.word	0x20005180
    eca4:	0000eb11 	.word	0x0000eb11
    eca8:	200053a0 	.word	0x200053a0
    ecac:	0000ea09 	.word	0x0000ea09
    ecb0:	402e0000 	.word	0x402e0000

0000ecb4 <usb_serial_read>:
{
    ecb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ecb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ecbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ecc0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
    ecc4:	4b2b      	ldr	r3, [pc, #172]	; (ed74 <usb_serial_read+0xc0>)
    ecc6:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
    ecc8:	468a      	mov	sl, r1
    ecca:	2900      	cmp	r1, #0
    eccc:	d045      	beq.n	ed5a <usb_serial_read+0xa6>
    ecce:	4681      	mov	r9, r0
    ecd0:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    ecd2:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
    ecd4:	f8df b0b4 	ldr.w	fp, [pc, #180]	; ed8c <usb_serial_read+0xd8>
    ecd8:	e015      	b.n	ed06 <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ecda:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    ecde:	462a      	mov	r2, r5
    ece0:	4b25      	ldr	r3, [pc, #148]	; (ed78 <usb_serial_read+0xc4>)
    ece2:	4419      	add	r1, r3
    ece4:	4648      	mov	r0, r9
    ece6:	f7fe fbc3 	bl	d470 <memcpy>
			p += avail;
    ecea:	44a9      	add	r9, r5
			rx_available -= avail;
    ecec:	4a23      	ldr	r2, [pc, #140]	; (ed7c <usb_serial_read+0xc8>)
    ecee:	6813      	ldr	r3, [r2, #0]
    ecf0:	1b5b      	subs	r3, r3, r5
    ecf2:	6013      	str	r3, [r2, #0]
			count += avail;
    ecf4:	442f      	add	r7, r5
			rx_tail = tail;
    ecf6:	b2e3      	uxtb	r3, r4
    ecf8:	4a1e      	ldr	r2, [pc, #120]	; (ed74 <usb_serial_read+0xc0>)
    ecfa:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    ecfc:	4630      	mov	r0, r6
    ecfe:	f7ff fed1 	bl	eaa4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    ed02:	45ba      	cmp	sl, r7
    ed04:	d934      	bls.n	ed70 <usb_serial_read+0xbc>
    ed06:	f89b 3000 	ldrb.w	r3, [fp]
    ed0a:	b2db      	uxtb	r3, r3
    ed0c:	42a3      	cmp	r3, r4
    ed0e:	d02d      	beq.n	ed6c <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
    ed10:	3401      	adds	r4, #1
    ed12:	2c09      	cmp	r4, #9
    ed14:	bf28      	it	cs
    ed16:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ed18:	4b19      	ldr	r3, [pc, #100]	; (ed80 <usb_serial_read+0xcc>)
    ed1a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
    ed1c:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
    ed20:	4b18      	ldr	r3, [pc, #96]	; (ed84 <usb_serial_read+0xd0>)
    ed22:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
    ed26:	4b18      	ldr	r3, [pc, #96]	; (ed88 <usb_serial_read+0xd4>)
    ed28:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    ed2c:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
    ed2e:	45a8      	cmp	r8, r5
    ed30:	d2d3      	bcs.n	ecda <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ed32:	eb01 2146 	add.w	r1, r1, r6, lsl #9
    ed36:	4642      	mov	r2, r8
    ed38:	4b0f      	ldr	r3, [pc, #60]	; (ed78 <usb_serial_read+0xc4>)
    ed3a:	4419      	add	r1, r3
    ed3c:	4648      	mov	r0, r9
    ed3e:	f7fe fb97 	bl	d470 <memcpy>
			rx_available -= len;
    ed42:	4a0e      	ldr	r2, [pc, #56]	; (ed7c <usb_serial_read+0xc8>)
    ed44:	6813      	ldr	r3, [r2, #0]
    ed46:	eba3 030a 	sub.w	r3, r3, sl
    ed4a:	443b      	add	r3, r7
    ed4c:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
    ed4e:	4b0d      	ldr	r3, [pc, #52]	; (ed84 <usb_serial_read+0xd0>)
    ed50:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    ed54:	4490      	add	r8, r2
    ed56:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ed5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ed5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ed62:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    ed66:	4650      	mov	r0, sl
    ed68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed6c:	46ba      	mov	sl, r7
    ed6e:	e7f4      	b.n	ed5a <usb_serial_read+0xa6>
			count += avail;
    ed70:	46ba      	mov	sl, r7
    ed72:	e7f2      	b.n	ed5a <usb_serial_read+0xa6>
    ed74:	200053d0 	.word	0x200053d0
    ed78:	20200080 	.word	0x20200080
    ed7c:	20005180 	.word	0x20005180
    ed80:	200051a4 	.word	0x200051a4
    ed84:	20005194 	.word	0x20005194
    ed88:	20005184 	.word	0x20005184
    ed8c:	200053cf 	.word	0x200053cf

0000ed90 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    ed90:	4b0c      	ldr	r3, [pc, #48]	; (edc4 <usb_serial_peekchar+0x34>)
    ed92:	781b      	ldrb	r3, [r3, #0]
    ed94:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    ed96:	4a0c      	ldr	r2, [pc, #48]	; (edc8 <usb_serial_peekchar+0x38>)
    ed98:	7812      	ldrb	r2, [r2, #0]
    ed9a:	b2d2      	uxtb	r2, r2
    ed9c:	4293      	cmp	r3, r2
    ed9e:	d00d      	beq.n	edbc <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
    eda0:	3301      	adds	r3, #1
    eda2:	2b09      	cmp	r3, #9
    eda4:	bf28      	it	cs
    eda6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    eda8:	4a08      	ldr	r2, [pc, #32]	; (edcc <usb_serial_peekchar+0x3c>)
    edaa:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    edac:	4b08      	ldr	r3, [pc, #32]	; (edd0 <usb_serial_peekchar+0x40>)
    edae:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    edb2:	4b08      	ldr	r3, [pc, #32]	; (edd4 <usb_serial_peekchar+0x44>)
    edb4:	eb03 2342 	add.w	r3, r3, r2, lsl #9
    edb8:	5c58      	ldrb	r0, [r3, r1]
    edba:	4770      	bx	lr
	if (tail == rx_head) return -1;
    edbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    edc0:	4770      	bx	lr
    edc2:	bf00      	nop
    edc4:	200053d0 	.word	0x200053d0
    edc8:	200053cf 	.word	0x200053cf
    edcc:	200051a4 	.word	0x200051a4
    edd0:	20005194 	.word	0x20005194
    edd4:	20200080 	.word	0x20200080

0000edd8 <usb_serial_available>:
{
    edd8:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    edda:	4b04      	ldr	r3, [pc, #16]	; (edec <usb_serial_available+0x14>)
    eddc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    edde:	b10c      	cbz	r4, ede4 <usb_serial_available+0xc>
}
    ede0:	4620      	mov	r0, r4
    ede2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    ede4:	f000 f9a4 	bl	f130 <yield>
    ede8:	e7fa      	b.n	ede0 <usb_serial_available+0x8>
    edea:	bf00      	nop
    edec:	20005180 	.word	0x20005180

0000edf0 <usb_serial_flush_input>:
{
    edf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
    edf2:	4b12      	ldr	r3, [pc, #72]	; (ee3c <usb_serial_flush_input+0x4c>)
    edf4:	781c      	ldrb	r4, [r3, #0]
    edf6:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    edf8:	4b11      	ldr	r3, [pc, #68]	; (ee40 <usb_serial_flush_input+0x50>)
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	b2db      	uxtb	r3, r3
    edfe:	429c      	cmp	r4, r3
    ee00:	d01a      	beq.n	ee38 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
    ee02:	4f10      	ldr	r7, [pc, #64]	; (ee44 <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
    ee04:	4d10      	ldr	r5, [pc, #64]	; (ee48 <usb_serial_flush_input+0x58>)
    ee06:	4e11      	ldr	r6, [pc, #68]	; (ee4c <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
    ee08:	3401      	adds	r4, #1
    ee0a:	2c09      	cmp	r4, #9
    ee0c:	bf28      	it	cs
    ee0e:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ee10:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
    ee12:	682b      	ldr	r3, [r5, #0]
    ee14:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
    ee18:	490d      	ldr	r1, [pc, #52]	; (ee50 <usb_serial_flush_input+0x60>)
    ee1a:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
    ee1e:	1a52      	subs	r2, r2, r1
    ee20:	1a9b      	subs	r3, r3, r2
    ee22:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
    ee24:	f7ff fe3e 	bl	eaa4 <rx_queue_transfer>
		rx_tail = tail;
    ee28:	b2e2      	uxtb	r2, r4
    ee2a:	4b04      	ldr	r3, [pc, #16]	; (ee3c <usb_serial_flush_input+0x4c>)
    ee2c:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
    ee2e:	4b04      	ldr	r3, [pc, #16]	; (ee40 <usb_serial_flush_input+0x50>)
    ee30:	781b      	ldrb	r3, [r3, #0]
    ee32:	b2db      	uxtb	r3, r3
    ee34:	42a3      	cmp	r3, r4
    ee36:	d1e7      	bne.n	ee08 <usb_serial_flush_input+0x18>
}
    ee38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee3a:	bf00      	nop
    ee3c:	200053d0 	.word	0x200053d0
    ee40:	200053cf 	.word	0x200053cf
    ee44:	200051a4 	.word	0x200051a4
    ee48:	20005180 	.word	0x20005180
    ee4c:	20005184 	.word	0x20005184
    ee50:	20005194 	.word	0x20005194

0000ee54 <usb_serial_getchar>:
{
    ee54:	b500      	push	{lr}
    ee56:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    ee58:	2101      	movs	r1, #1
    ee5a:	f10d 0007 	add.w	r0, sp, #7
    ee5e:	f7ff ff29 	bl	ecb4 <usb_serial_read>
    ee62:	b120      	cbz	r0, ee6e <usb_serial_getchar+0x1a>
    ee64:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    ee68:	b003      	add	sp, #12
    ee6a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    ee6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ee72:	e7f9      	b.n	ee68 <usb_serial_getchar+0x14>

0000ee74 <usb_serial_write>:
{
    ee74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee78:	b085      	sub	sp, #20
    ee7a:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
    ee7c:	4b62      	ldr	r3, [pc, #392]	; (f008 <usb_serial_write+0x194>)
    ee7e:	781b      	ldrb	r3, [r3, #0]
    ee80:	2b00      	cmp	r3, #0
    ee82:	f000 80bd 	beq.w	f000 <usb_serial_write+0x18c>
    ee86:	468b      	mov	fp, r1
	while (size > 0) {
    ee88:	2900      	cmp	r1, #0
    ee8a:	d047      	beq.n	ef1c <usb_serial_write+0xa8>
	uint32_t sent=0;
    ee8c:	2300      	movs	r3, #0
    ee8e:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
    ee90:	4c5e      	ldr	r4, [pc, #376]	; (f00c <usb_serial_write+0x198>)
    ee92:	2601      	movs	r6, #1
    ee94:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
    ee98:	f8df 818c 	ldr.w	r8, [pc, #396]	; f028 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
    ee9c:	f8df a184 	ldr.w	sl, [pc, #388]	; f024 <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
    eea0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    eea4:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    eea6:	4b5a      	ldr	r3, [pc, #360]	; (f010 <usb_serial_write+0x19c>)
    eea8:	f893 9000 	ldrb.w	r9, [r3]
    eeac:	4b59      	ldr	r3, [pc, #356]	; (f014 <usb_serial_write+0x1a0>)
    eeae:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
    eeb2:	4b59      	ldr	r3, [pc, #356]	; (f018 <usb_serial_write+0x1a4>)
    eeb4:	881b      	ldrh	r3, [r3, #0]
    eeb6:	b94b      	cbnz	r3, eecc <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
    eeb8:	2700      	movs	r7, #0
		int waiting=0;
    eeba:	463d      	mov	r5, r7
    eebc:	e043      	b.n	ef46 <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
    eebe:	4b56      	ldr	r3, [pc, #344]	; (f018 <usb_serial_write+0x1a4>)
    eec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    eec4:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
    eec6:	2300      	movs	r3, #0
    eec8:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    eecc:	4b50      	ldr	r3, [pc, #320]	; (f010 <usb_serial_write+0x19c>)
    eece:	781b      	ldrb	r3, [r3, #0]
    eed0:	02df      	lsls	r7, r3, #11
    eed2:	4a51      	ldr	r2, [pc, #324]	; (f018 <usb_serial_write+0x1a4>)
    eed4:	8815      	ldrh	r5, [r2, #0]
    eed6:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
    eeda:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
    eede:	4b4f      	ldr	r3, [pc, #316]	; (f01c <usb_serial_write+0x1a8>)
    eee0:	4418      	add	r0, r3
		if (size >= tx_available) {
    eee2:	455d      	cmp	r5, fp
    eee4:	d947      	bls.n	ef76 <usb_serial_write+0x102>
			memcpy(txdata, data, size);
    eee6:	465a      	mov	r2, fp
    eee8:	9903      	ldr	r1, [sp, #12]
    eeea:	f7fe fac1 	bl	d470 <memcpy>
			tx_available -= size;
    eeee:	eba5 050b 	sub.w	r5, r5, fp
    eef2:	4b49      	ldr	r3, [pc, #292]	; (f018 <usb_serial_write+0x1a4>)
    eef4:	801d      	strh	r5, [r3, #0]
			sent += size;
    eef6:	9b01      	ldr	r3, [sp, #4]
    eef8:	445b      	add	r3, fp
    eefa:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    eefc:	4b48      	ldr	r3, [pc, #288]	; (f020 <usb_serial_write+0x1ac>)
    eefe:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    ef02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
    ef06:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
    ef0a:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    ef0e:	2300      	movs	r3, #0
    ef10:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    ef12:	f1bb 0f00 	cmp.w	fp, #0
    ef16:	d1c3      	bne.n	eea0 <usb_serial_write+0x2c>
    ef18:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
    ef1c:	4658      	mov	r0, fp
    ef1e:	e070      	b.n	f002 <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
    ef20:	f89a 3000 	ldrb.w	r3, [sl]
    ef24:	b9f3      	cbnz	r3, ef64 <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    ef26:	f8d8 3000 	ldr.w	r3, [r8]
    ef2a:	1bdb      	subs	r3, r3, r7
    ef2c:	2b78      	cmp	r3, #120	; 0x78
    ef2e:	d81b      	bhi.n	ef68 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
    ef30:	4b35      	ldr	r3, [pc, #212]	; (f008 <usb_serial_write+0x194>)
    ef32:	781b      	ldrb	r3, [r3, #0]
    ef34:	b1eb      	cbz	r3, ef72 <usb_serial_write+0xfe>
			yield();
    ef36:	f000 f8fb 	bl	f130 <yield>
			tx_noautoflush = 1;
    ef3a:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
    ef3c:	4635      	mov	r5, r6
    ef3e:	4b36      	ldr	r3, [pc, #216]	; (f018 <usb_serial_write+0x1a4>)
    ef40:	881b      	ldrh	r3, [r3, #0]
    ef42:	2b00      	cmp	r3, #0
    ef44:	d1c2      	bne.n	eecc <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
    ef46:	4648      	mov	r0, r9
    ef48:	f7ff fd0e 	bl	e968 <usb_transfer_status>
			if (!(status & 0x80)) {
    ef4c:	f010 0f80 	tst.w	r0, #128	; 0x80
    ef50:	d0b5      	beq.n	eebe <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
    ef52:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
    ef56:	2300      	movs	r3, #0
    ef58:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
    ef5a:	2d00      	cmp	r5, #0
    ef5c:	d1e0      	bne.n	ef20 <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
    ef5e:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
    ef62:	e7dd      	b.n	ef20 <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
    ef64:	9801      	ldr	r0, [sp, #4]
    ef66:	e04c      	b.n	f002 <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
    ef68:	4b2e      	ldr	r3, [pc, #184]	; (f024 <usb_serial_write+0x1b0>)
    ef6a:	2201      	movs	r2, #1
    ef6c:	701a      	strb	r2, [r3, #0]
				return sent;
    ef6e:	9801      	ldr	r0, [sp, #4]
    ef70:	e047      	b.n	f002 <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
    ef72:	9801      	ldr	r0, [sp, #4]
    ef74:	e045      	b.n	f002 <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
    ef76:	462a      	mov	r2, r5
    ef78:	9903      	ldr	r1, [sp, #12]
    ef7a:	f7fe fa79 	bl	d470 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ef7e:	4d27      	ldr	r5, [pc, #156]	; (f01c <usb_serial_write+0x1a8>)
    ef80:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ef82:	2300      	movs	r3, #0
    ef84:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ef88:	4629      	mov	r1, r5
    ef8a:	4648      	mov	r0, r9
    ef8c:	f7ff fcb0 	bl	e8f0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ef90:	462b      	mov	r3, r5
	asm("dsb");
    ef92:	f3bf 8f4f 	dsb	sy
    ef96:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    ef9a:	f505 6100 	add.w	r1, r5, #2048	; 0x800
    ef9e:	428a      	cmp	r2, r1
    efa0:	bf8c      	ite	hi
    efa2:	2201      	movhi	r2, #1
    efa4:	2240      	movls	r2, #64	; 0x40
    efa6:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    efaa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    efae:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    efb2:	3320      	adds	r3, #32
	} while (location < end_addr);
    efb4:	429d      	cmp	r5, r3
    efb6:	d1fa      	bne.n	efae <usb_serial_write+0x13a>
	asm("dsb");
    efb8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    efbc:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    efc0:	4649      	mov	r1, r9
    efc2:	2004      	movs	r0, #4
    efc4:	f7ff fcac 	bl	e920 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    efc8:	4b11      	ldr	r3, [pc, #68]	; (f010 <usb_serial_write+0x19c>)
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	3301      	adds	r3, #1
    efce:	b2db      	uxtb	r3, r3
    efd0:	2b03      	cmp	r3, #3
    efd2:	d811      	bhi.n	eff8 <usb_serial_write+0x184>
    efd4:	4a0e      	ldr	r2, [pc, #56]	; (f010 <usb_serial_write+0x19c>)
    efd6:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    efd8:	4a0f      	ldr	r2, [pc, #60]	; (f018 <usb_serial_write+0x1a4>)
    efda:	8813      	ldrh	r3, [r2, #0]
    efdc:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
    efe0:	9901      	ldr	r1, [sp, #4]
    efe2:	4419      	add	r1, r3
    efe4:	9101      	str	r1, [sp, #4]
			data += tx_available;
    efe6:	9903      	ldr	r1, [sp, #12]
    efe8:	4419      	add	r1, r3
    efea:	9103      	str	r1, [sp, #12]
			tx_available = 0;
    efec:	2300      	movs	r3, #0
    efee:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
    eff0:	4a0b      	ldr	r2, [pc, #44]	; (f020 <usb_serial_write+0x1ac>)
    eff2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
    eff6:	e788      	b.n	ef0a <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eff8:	4b05      	ldr	r3, [pc, #20]	; (f010 <usb_serial_write+0x19c>)
    effa:	2200      	movs	r2, #0
    effc:	701a      	strb	r2, [r3, #0]
    effe:	e7eb      	b.n	efd8 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
    f000:	2000      	movs	r0, #0
}
    f002:	b005      	add	sp, #20
    f004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f008:	200053d8 	.word	0x200053d8
    f00c:	200053d6 	.word	0x200053d6
    f010:	200053d5 	.word	0x200053d5
    f014:	20004000 	.word	0x20004000
    f018:	200053ba 	.word	0x200053ba
    f01c:	20201080 	.word	0x20201080
    f020:	402e0000 	.word	0x402e0000
    f024:	200053d4 	.word	0x200053d4
    f028:	20005388 	.word	0x20005388

0000f02c <usb_serial_putchar>:
{
    f02c:	b500      	push	{lr}
    f02e:	b083      	sub	sp, #12
    f030:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    f034:	2101      	movs	r1, #1
    f036:	f10d 0007 	add.w	r0, sp, #7
    f03a:	f7ff ff1b 	bl	ee74 <usb_serial_write>
}
    f03e:	b003      	add	sp, #12
    f040:	f85d fb04 	ldr.w	pc, [sp], #4

0000f044 <usb_serial_write_buffer_free>:
{
    f044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
    f046:	4b0f      	ldr	r3, [pc, #60]	; (f084 <usb_serial_write_buffer_free+0x40>)
    f048:	2201      	movs	r2, #1
    f04a:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
    f04c:	4d0e      	ldr	r5, [pc, #56]	; (f088 <usb_serial_write_buffer_free+0x44>)
    f04e:	2400      	movs	r4, #0
	uint32_t sum = 0;
    f050:	4627      	mov	r7, r4
		if (i == tx_head) continue;
    f052:	4e0e      	ldr	r6, [pc, #56]	; (f08c <usb_serial_write_buffer_free+0x48>)
    f054:	e003      	b.n	f05e <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
    f056:	3401      	adds	r4, #1
    f058:	3520      	adds	r5, #32
    f05a:	2c04      	cmp	r4, #4
    f05c:	d00b      	beq.n	f076 <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
    f05e:	7833      	ldrb	r3, [r6, #0]
    f060:	42a3      	cmp	r3, r4
    f062:	d0f8      	beq.n	f056 <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    f064:	4628      	mov	r0, r5
    f066:	f7ff fc7f 	bl	e968 <usb_transfer_status>
    f06a:	f010 0f80 	tst.w	r0, #128	; 0x80
    f06e:	bf08      	it	eq
    f070:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
    f074:	e7ef      	b.n	f056 <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
    f076:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f07a:	4b02      	ldr	r3, [pc, #8]	; (f084 <usb_serial_write_buffer_free+0x40>)
    f07c:	2200      	movs	r2, #0
    f07e:	701a      	strb	r2, [r3, #0]
}
    f080:	4638      	mov	r0, r7
    f082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f084:	200053d6 	.word	0x200053d6
    f088:	20004000 	.word	0x20004000
    f08c:	200053d5 	.word	0x200053d5

0000f090 <usb_serial_flush_output>:
	if (!usb_configuration) return;
    f090:	4b21      	ldr	r3, [pc, #132]	; (f118 <usb_serial_flush_output+0x88>)
    f092:	781b      	ldrb	r3, [r3, #0]
    f094:	2b00      	cmp	r3, #0
    f096:	d03e      	beq.n	f116 <usb_serial_flush_output+0x86>
{
    f098:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
    f09a:	4b20      	ldr	r3, [pc, #128]	; (f11c <usb_serial_flush_output+0x8c>)
    f09c:	881d      	ldrh	r5, [r3, #0]
    f09e:	b905      	cbnz	r5, f0a2 <usb_serial_flush_output+0x12>
}
    f0a0:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
    f0a2:	4a1f      	ldr	r2, [pc, #124]	; (f120 <usb_serial_flush_output+0x90>)
    f0a4:	2101      	movs	r1, #1
    f0a6:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    f0a8:	4a1e      	ldr	r2, [pc, #120]	; (f124 <usb_serial_flush_output+0x94>)
    f0aa:	7811      	ldrb	r1, [r2, #0]
    f0ac:	4e1e      	ldr	r6, [pc, #120]	; (f128 <usb_serial_flush_output+0x98>)
    f0ae:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f0b2:	4c1e      	ldr	r4, [pc, #120]	; (f12c <usb_serial_flush_output+0x9c>)
    f0b4:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
    f0b8:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f0bc:	2300      	movs	r3, #0
    f0be:	462a      	mov	r2, r5
    f0c0:	4621      	mov	r1, r4
    f0c2:	4630      	mov	r0, r6
    f0c4:	f7ff fc14 	bl	e8f0 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f0c8:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
    f0ca:	1962      	adds	r2, r4, r5
	asm("dsb");
    f0cc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f0d0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    f0d4:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
    f0d8:	3320      	adds	r3, #32
	} while (location < end_addr);
    f0da:	429a      	cmp	r2, r3
    f0dc:	d8fa      	bhi.n	f0d4 <usb_serial_flush_output+0x44>
	asm("dsb");
    f0de:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f0e2:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f0e6:	4631      	mov	r1, r6
    f0e8:	2004      	movs	r0, #4
    f0ea:	f7ff fc19 	bl	e920 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f0ee:	4b0d      	ldr	r3, [pc, #52]	; (f124 <usb_serial_flush_output+0x94>)
    f0f0:	781b      	ldrb	r3, [r3, #0]
    f0f2:	3301      	adds	r3, #1
    f0f4:	b2db      	uxtb	r3, r3
    f0f6:	2b03      	cmp	r3, #3
    f0f8:	d809      	bhi.n	f10e <usb_serial_flush_output+0x7e>
    f0fa:	4a0a      	ldr	r2, [pc, #40]	; (f124 <usb_serial_flush_output+0x94>)
    f0fc:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    f0fe:	2300      	movs	r3, #0
    f100:	4a06      	ldr	r2, [pc, #24]	; (f11c <usb_serial_flush_output+0x8c>)
    f102:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
    f104:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f108:	4a05      	ldr	r2, [pc, #20]	; (f120 <usb_serial_flush_output+0x90>)
    f10a:	7013      	strb	r3, [r2, #0]
    f10c:	e7c8      	b.n	f0a0 <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f10e:	4b05      	ldr	r3, [pc, #20]	; (f124 <usb_serial_flush_output+0x94>)
    f110:	2200      	movs	r2, #0
    f112:	701a      	strb	r2, [r3, #0]
    f114:	e7f3      	b.n	f0fe <usb_serial_flush_output+0x6e>
    f116:	4770      	bx	lr
    f118:	200053d8 	.word	0x200053d8
    f11c:	200053ba 	.word	0x200053ba
    f120:	200053d6 	.word	0x200053d6
    f124:	200053d5 	.word	0x200053d5
    f128:	20004000 	.word	0x20004000
    f12c:	20201080 	.word	0x20201080

0000f130 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    f130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    f132:	4b39      	ldr	r3, [pc, #228]	; (f218 <yield+0xe8>)
    f134:	781b      	ldrb	r3, [r3, #0]
    f136:	b1ab      	cbz	r3, f164 <yield+0x34>
	if (running) return; // TODO: does this need to be atomic?
    f138:	4a38      	ldr	r2, [pc, #224]	; (f21c <yield+0xec>)
    f13a:	7812      	ldrb	r2, [r2, #0]
    f13c:	b992      	cbnz	r2, f164 <yield+0x34>
	running = 1;
    f13e:	4a37      	ldr	r2, [pc, #220]	; (f21c <yield+0xec>)
    f140:	2101      	movs	r1, #1
    f142:	7011      	strb	r1, [r2, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    f144:	f013 0f01 	tst.w	r3, #1
    f148:	d10d      	bne.n	f166 <yield+0x36>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    f14a:	4b33      	ldr	r3, [pc, #204]	; (f218 <yield+0xe8>)
    f14c:	781b      	ldrb	r3, [r3, #0]
    f14e:	f013 0f02 	tst.w	r3, #2
    f152:	d118      	bne.n	f186 <yield+0x56>

	running = 0;
    f154:	4b31      	ldr	r3, [pc, #196]	; (f21c <yield+0xec>)
    f156:	2200      	movs	r2, #0
    f158:	701a      	strb	r2, [r3, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    f15a:	4b2f      	ldr	r3, [pc, #188]	; (f218 <yield+0xe8>)
    f15c:	781b      	ldrb	r3, [r3, #0]
    f15e:	f013 0f04 	tst.w	r3, #4
    f162:	d12a      	bne.n	f1ba <yield+0x8a>
	
};
    f164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        virtual int available() { return usb_serial_available(); }
    f166:	f7ff fe37 	bl	edd8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    f16a:	b948      	cbnz	r0, f180 <yield+0x50>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    f16c:	4b2c      	ldr	r3, [pc, #176]	; (f220 <yield+0xf0>)
    f16e:	781b      	ldrb	r3, [r3, #0]
    f170:	2b00      	cmp	r3, #0
    f172:	d0ea      	beq.n	f14a <yield+0x1a>
    f174:	4a28      	ldr	r2, [pc, #160]	; (f218 <yield+0xe8>)
    f176:	7813      	ldrb	r3, [r2, #0]
    f178:	f023 0301 	bic.w	r3, r3, #1
    f17c:	7013      	strb	r3, [r2, #0]
    f17e:	e7e4      	b.n	f14a <yield+0x1a>
		if (Serial.available()) serialEvent();
    f180:	f000 f85a 	bl	f238 <serialEvent()>
    f184:	e7f2      	b.n	f16c <yield+0x3c>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f186:	4b27      	ldr	r3, [pc, #156]	; (f224 <yield+0xf4>)
    f188:	781b      	ldrb	r3, [r3, #0]
    f18a:	2b00      	cmp	r3, #0
    f18c:	d0e2      	beq.n	f154 <yield+0x24>
    f18e:	2400      	movs	r4, #0
			s_serials_with_serial_events[i]->doYieldCode();
    f190:	4f25      	ldr	r7, [pc, #148]	; (f228 <yield+0xf8>)
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f192:	4e24      	ldr	r6, [pc, #144]	; (f224 <yield+0xf4>)
    f194:	e004      	b.n	f1a0 <yield+0x70>
    f196:	3401      	adds	r4, #1
    f198:	7832      	ldrb	r2, [r6, #0]
    f19a:	b2e3      	uxtb	r3, r4
    f19c:	429a      	cmp	r2, r3
    f19e:	d9d9      	bls.n	f154 <yield+0x24>
			s_serials_with_serial_events[i]->doYieldCode();
    f1a0:	b2e3      	uxtb	r3, r4
    f1a2:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    f1a6:	682b      	ldr	r3, [r5, #0]
    f1a8:	691b      	ldr	r3, [r3, #16]
    f1aa:	4628      	mov	r0, r5
    f1ac:	4798      	blx	r3
    f1ae:	2800      	cmp	r0, #0
    f1b0:	d0f1      	beq.n	f196 <yield+0x66>
    f1b2:	696b      	ldr	r3, [r5, #20]
    f1b4:	689b      	ldr	r3, [r3, #8]
    f1b6:	4798      	blx	r3
    f1b8:	e7ed      	b.n	f196 <yield+0x66>
		if (!firstYield) return;  
    f1ba:	4b1c      	ldr	r3, [pc, #112]	; (f22c <yield+0xfc>)
    f1bc:	681b      	ldr	r3, [r3, #0]
    f1be:	2b00      	cmp	r3, #0
    f1c0:	d0d0      	beq.n	f164 <yield+0x34>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f1c2:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d1cc      	bne.n	f164 <yield+0x34>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f1ca:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    f1ce:	b672      	cpsid	i
		EventResponder *first = firstYield;
    f1d0:	4b16      	ldr	r3, [pc, #88]	; (f22c <yield+0xfc>)
    f1d2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f1d4:	b1a0      	cbz	r0, f200 <yield+0xd0>
		if (runningFromYield) {
    f1d6:	4b16      	ldr	r3, [pc, #88]	; (f230 <yield+0x100>)
    f1d8:	781b      	ldrb	r3, [r3, #0]
    f1da:	b9ab      	cbnz	r3, f208 <yield+0xd8>
		runningFromYield = true;
    f1dc:	4b14      	ldr	r3, [pc, #80]	; (f230 <yield+0x100>)
    f1de:	2101      	movs	r1, #1
    f1e0:	7019      	strb	r1, [r3, #0]
		firstYield = first->_next;
    f1e2:	6943      	ldr	r3, [r0, #20]
    f1e4:	4911      	ldr	r1, [pc, #68]	; (f22c <yield+0xfc>)
    f1e6:	600b      	str	r3, [r1, #0]
		if (firstYield) {
    f1e8:	b193      	cbz	r3, f210 <yield+0xe0>
			firstYield->_prev = nullptr;
    f1ea:	2100      	movs	r1, #0
    f1ec:	6199      	str	r1, [r3, #24]
		if (doit) __enable_irq();
    f1ee:	b902      	cbnz	r2, f1f2 <yield+0xc2>
    f1f0:	b662      	cpsie	i
		first->_triggered = false;
    f1f2:	2400      	movs	r4, #0
    f1f4:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    f1f6:	6883      	ldr	r3, [r0, #8]
    f1f8:	4798      	blx	r3
		runningFromYield = false;
    f1fa:	4b0d      	ldr	r3, [pc, #52]	; (f230 <yield+0x100>)
    f1fc:	701c      	strb	r4, [r3, #0]
    f1fe:	e7b1      	b.n	f164 <yield+0x34>
		if (doit) __enable_irq();
    f200:	2a00      	cmp	r2, #0
    f202:	d1af      	bne.n	f164 <yield+0x34>
    f204:	b662      	cpsie	i
    f206:	e7ad      	b.n	f164 <yield+0x34>
    f208:	2a00      	cmp	r2, #0
    f20a:	d1ab      	bne.n	f164 <yield+0x34>
    f20c:	b662      	cpsie	i
    f20e:	e7a9      	b.n	f164 <yield+0x34>
			lastYield = nullptr;
    f210:	4b08      	ldr	r3, [pc, #32]	; (f234 <yield+0x104>)
    f212:	2100      	movs	r1, #0
    f214:	6019      	str	r1, [r3, #0]
    f216:	e7ea      	b.n	f1ee <yield+0xbe>
    f218:	20003a43 	.word	0x20003a43
    f21c:	200053c6 	.word	0x200053c6
    f220:	6000209a 	.word	0x6000209a
    f224:	200053c5 	.word	0x200053c5
    f228:	20004c78 	.word	0x20004c78
    f22c:	20004c68 	.word	0x20004c68
    f230:	200053c4 	.word	0x200053c4
    f234:	20004c74 	.word	0x20004c74

0000f238 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    f238:	4770      	bx	lr
	...

0000f23c <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    f23c:	6803      	ldr	r3, [r0, #0]
    f23e:	b16b      	cbz	r3, f25c <smalloc_verify_pool+0x20>
    f240:	6842      	ldr	r2, [r0, #4]
    f242:	b16a      	cbz	r2, f260 <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
    f244:	4b07      	ldr	r3, [pc, #28]	; (f264 <smalloc_verify_pool+0x28>)
    f246:	fba3 1302 	umull	r1, r3, r3, r2
    f24a:	08db      	lsrs	r3, r3, #3
    f24c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f250:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    f254:	bf0c      	ite	eq
    f256:	2001      	moveq	r0, #1
    f258:	2000      	movne	r0, #0
    f25a:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    f25c:	2000      	movs	r0, #0
    f25e:	4770      	bx	lr
    f260:	2000      	movs	r0, #0
	return 1;
}
    f262:	4770      	bx	lr
    f264:	aaaaaaab 	.word	0xaaaaaaab

0000f268 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    f268:	b538      	push	{r3, r4, r5, lr}
    f26a:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    f26c:	f7ff ffe6 	bl	f23c <smalloc_verify_pool>
    f270:	b9b8      	cbnz	r0, f2a2 <sm_align_pool+0x3a>
    f272:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
    f274:	6862      	ldr	r2, [r4, #4]
    f276:	4b0c      	ldr	r3, [pc, #48]	; (f2a8 <sm_align_pool+0x40>)
    f278:	fba3 1302 	umull	r1, r3, r3, r2
    f27c:	08db      	lsrs	r3, r3, #3
    f27e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    f282:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    f286:	d001      	beq.n	f28c <sm_align_pool+0x24>
    f288:	1ad2      	subs	r2, r2, r3
    f28a:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    f28c:	6863      	ldr	r3, [r4, #4]
    f28e:	2bf0      	cmp	r3, #240	; 0xf0
    f290:	d902      	bls.n	f298 <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
    f292:	2501      	movs	r5, #1
}
    f294:	4628      	mov	r0, r5
    f296:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
    f298:	f001 fe22 	bl	10ee0 <__errno>
    f29c:	231c      	movs	r3, #28
    f29e:	6003      	str	r3, [r0, #0]
		return 0;
    f2a0:	e7f8      	b.n	f294 <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
    f2a2:	2501      	movs	r5, #1
    f2a4:	e7f6      	b.n	f294 <sm_align_pool+0x2c>
    f2a6:	bf00      	nop
    f2a8:	aaaaaaab 	.word	0xaaaaaaab

0000f2ac <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    f2ac:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    f2ae:	b190      	cbz	r0, f2d6 <sm_set_pool+0x2a>
    f2b0:	461d      	mov	r5, r3
    f2b2:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    f2b4:	b101      	cbz	r1, f2b8 <sm_set_pool+0xc>
    f2b6:	b9fa      	cbnz	r2, f2f8 <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
    f2b8:	4620      	mov	r0, r4
    f2ba:	f7ff ffbf 	bl	f23c <smalloc_verify_pool>
    f2be:	4606      	mov	r6, r0
    f2c0:	b1a8      	cbz	r0, f2ee <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f2c2:	68a3      	ldr	r3, [r4, #8]
    f2c4:	b96b      	cbnz	r3, f2e2 <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
    f2c6:	2300      	movs	r3, #0
    f2c8:	6023      	str	r3, [r4, #0]
    f2ca:	6063      	str	r3, [r4, #4]
    f2cc:	60a3      	str	r3, [r4, #8]
    f2ce:	60e3      	str	r3, [r4, #12]
			return 1;
    f2d0:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    f2d2:	4630      	mov	r0, r6
    f2d4:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    f2d6:	f001 fe03 	bl	10ee0 <__errno>
    f2da:	2316      	movs	r3, #22
    f2dc:	6003      	str	r3, [r0, #0]
		return 0;
    f2de:	2600      	movs	r6, #0
    f2e0:	e7f7      	b.n	f2d2 <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f2e2:	6862      	ldr	r2, [r4, #4]
    f2e4:	2100      	movs	r1, #0
    f2e6:	6820      	ldr	r0, [r4, #0]
    f2e8:	f002 f98c 	bl	11604 <memset>
    f2ec:	e7eb      	b.n	f2c6 <sm_set_pool+0x1a>
		errno = EINVAL;
    f2ee:	f001 fdf7 	bl	10ee0 <__errno>
    f2f2:	2316      	movs	r3, #22
    f2f4:	6003      	str	r3, [r0, #0]
		return 0;
    f2f6:	e7ec      	b.n	f2d2 <sm_set_pool+0x26>
	spool->pool = new_pool;
    f2f8:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
    f2fa:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
    f2fc:	9b04      	ldr	r3, [sp, #16]
    f2fe:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    f300:	f7ff ffb2 	bl	f268 <sm_align_pool>
    f304:	4606      	mov	r6, r0
    f306:	2800      	cmp	r0, #0
    f308:	d0e3      	beq.n	f2d2 <sm_set_pool+0x26>
	if (do_zero) {
    f30a:	b90d      	cbnz	r5, f310 <sm_set_pool+0x64>
	return 1;
    f30c:	2601      	movs	r6, #1
    f30e:	e7e0      	b.n	f2d2 <sm_set_pool+0x26>
		spool->do_zero = do_zero;
    f310:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    f312:	6862      	ldr	r2, [r4, #4]
    f314:	2100      	movs	r1, #0
    f316:	6820      	ldr	r0, [r4, #0]
    f318:	f002 f974 	bl	11604 <memset>
	return 1;
    f31c:	2601      	movs	r6, #1
    f31e:	e7d8      	b.n	f2d2 <sm_set_pool+0x26>

0000f320 <sqrtf>:
    f320:	b508      	push	{r3, lr}
    f322:	ed2d 8b02 	vpush	{d8}
    f326:	eeb0 8a40 	vmov.f32	s16, s0
    f32a:	f000 fb11 	bl	f950 <__ieee754_sqrtf>
    f32e:	eeb4 8a48 	vcmp.f32	s16, s16
    f332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f336:	d606      	bvs.n	f346 <sqrtf+0x26>
    f338:	eddf 8a09 	vldr	s17, [pc, #36]	; f360 <sqrtf+0x40>
    f33c:	eeb4 8ae8 	vcmpe.f32	s16, s17
    f340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f344:	d402      	bmi.n	f34c <sqrtf+0x2c>
    f346:	ecbd 8b02 	vpop	{d8}
    f34a:	bd08      	pop	{r3, pc}
    f34c:	f001 fdc8 	bl	10ee0 <__errno>
    f350:	ee88 0aa8 	vdiv.f32	s0, s17, s17
    f354:	ecbd 8b02 	vpop	{d8}
    f358:	2321      	movs	r3, #33	; 0x21
    f35a:	6003      	str	r3, [r0, #0]
    f35c:	bd08      	pop	{r3, pc}
    f35e:	bf00      	nop
	...

0000f368 <pow>:
    f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f36c:	ec5b ab10 	vmov	sl, fp, d0
    f370:	ed2d 8b0a 	vpush	{d8-d12}
    f374:	ea4f 5c1b 	mov.w	ip, fp, lsr #20
    f378:	ee11 ea90 	vmov	lr, s3
    f37c:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
    f380:	f240 70fd 	movw	r0, #2045	; 0x7fd
    f384:	4286      	cmp	r6, r0
    f386:	ee10 1a10 	vmov	r1, s0
    f38a:	ee11 3a10 	vmov	r3, s2
    f38e:	b089      	sub	sp, #36	; 0x24
    f390:	465a      	mov	r2, fp
    f392:	4665      	mov	r5, ip
    f394:	ea4f 541e 	mov.w	r4, lr, lsr #20
    f398:	f200 80c6 	bhi.w	f528 <pow+0x1c0>
    f39c:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f3a0:	f2a6 36be 	subw	r6, r6, #958	; 0x3be
    f3a4:	2e7f      	cmp	r6, #127	; 0x7f
    f3a6:	bf98      	it	ls
    f3a8:	2000      	movls	r0, #0
    f3aa:	f200 80bd 	bhi.w	f528 <pow+0x1c0>
    f3ae:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
    f3b2:	4ce1      	ldr	r4, [pc, #900]	; (f738 <pow+0x3d0>)
    f3b4:	4be1      	ldr	r3, [pc, #900]	; (f73c <pow+0x3d4>)
    f3b6:	4414      	add	r4, r2
    f3b8:	f3c4 3546 	ubfx	r5, r4, #13, #7
    f3bc:	eb03 1645 	add.w	r6, r3, r5, lsl #5
    f3c0:	ed93 6b00 	vldr	d6, [r3]
    f3c4:	ed93 7b02 	vldr	d7, [r3, #8]
    f3c8:	ed96 8b12 	vldr	d8, [r6, #72]	; 0x48
    f3cc:	ed96 9b18 	vldr	d9, [r6, #96]	; 0x60
    f3d0:	ed96 2b16 	vldr	d2, [r6, #88]	; 0x58
    f3d4:	0d26      	lsrs	r6, r4, #20
    f3d6:	1524      	asrs	r4, r4, #20
    f3d8:	ee05 4a90 	vmov	s11, r4
    f3dc:	0536      	lsls	r6, r6, #20
    f3de:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
    f3e2:	eeb8 5be5 	vcvt.f64.s32	d5, s11
    f3e6:	1b95      	subs	r5, r2, r6
    f3e8:	eea5 2b06 	vfma.f64	d2, d5, d6
    f3ec:	eea5 9b07 	vfma.f64	d9, d5, d7
    f3f0:	ed93 ab04 	vldr	d10, [r3, #16]
    f3f4:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
    f3f8:	ed93 bb08 	vldr	d11, [r3, #32]
    f3fc:	ed93 7b06 	vldr	d7, [r3, #24]
    f400:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
    f404:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
    f408:	1e0c      	subs	r4, r1, #0
    f40a:	ec45 4b1c 	vmov	d12, r4, r5
    f40e:	eeac 0b08 	vfma.f64	d0, d12, d8
    f412:	eea0 3b05 	vfma.f64	d3, d0, d5
    f416:	eea0 6b04 	vfma.f64	d6, d0, d4
    f41a:	ee20 5b0a 	vmul.f64	d5, d0, d10
    f41e:	ee30 4b02 	vadd.f64	d4, d0, d2
    f422:	ee20 8b05 	vmul.f64	d8, d0, d5
    f426:	eea0 7b0b 	vfma.f64	d7, d0, d11
    f42a:	eea8 6b03 	vfma.f64	d6, d8, d3
    f42e:	ee32 2b44 	vsub.f64	d2, d2, d4
    f432:	eea8 7b06 	vfma.f64	d7, d8, d6
    f436:	ee32 2b00 	vadd.f64	d2, d2, d0
    f43a:	eeb0 3b48 	vmov.f64	d3, d8
    f43e:	ee39 2b02 	vadd.f64	d2, d9, d2
    f442:	ee95 3b00 	vfnms.f64	d3, d5, d0
    f446:	ee34 5b08 	vadd.f64	d5, d4, d8
    f44a:	ee20 0b08 	vmul.f64	d0, d0, d8
    f44e:	ee34 4b45 	vsub.f64	d4, d4, d5
    f452:	ee32 6b03 	vadd.f64	d6, d2, d3
    f456:	ee34 4b08 	vadd.f64	d4, d4, d8
    f45a:	ee36 6b04 	vadd.f64	d6, d6, d4
    f45e:	eea0 6b07 	vfma.f64	d6, d0, d7
    f462:	ee35 4b06 	vadd.f64	d4, d5, d6
    f466:	ee21 8b04 	vmul.f64	d8, d1, d4
    f46a:	ee18 2a90 	vmov	r2, s17
    f46e:	eeb0 7b48 	vmov.f64	d7, d8
    f472:	f3c2 550a 	ubfx	r5, r2, #20, #11
    f476:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
    f47a:	18eb      	adds	r3, r5, r3
    f47c:	2b3e      	cmp	r3, #62	; 0x3e
    f47e:	ee91 7b04 	vfnms.f64	d7, d1, d4
    f482:	ee35 5b44 	vsub.f64	d5, d5, d4
    f486:	ee35 5b06 	vadd.f64	d5, d5, d6
    f48a:	eea1 7b05 	vfma.f64	d7, d1, d5
    f48e:	f200 8093 	bhi.w	f5b8 <pow+0x250>
    f492:	4bab      	ldr	r3, [pc, #684]	; (f740 <pow+0x3d8>)
    f494:	ed93 4b02 	vldr	d4, [r3, #8]
    f498:	ed93 5b00 	vldr	d5, [r3]
    f49c:	eeb0 1b44 	vmov.f64	d1, d4
    f4a0:	ed93 2b04 	vldr	d2, [r3, #16]
    f4a4:	eea8 1b05 	vfma.f64	d1, d8, d5
    f4a8:	ed93 6b06 	vldr	d6, [r3, #24]
    f4ac:	ee11 1a10 	vmov	r1, s2
    f4b0:	ee31 1b44 	vsub.f64	d1, d1, d4
    f4b4:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    f4b8:	ed93 4b0e 	vldr	d4, [r3, #56]	; 0x38
    f4bc:	eea1 8b02 	vfma.f64	d8, d1, d2
    f4c0:	eea1 8b06 	vfma.f64	d8, d1, d6
    f4c4:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
    f4c8:	ee37 7b08 	vadd.f64	d7, d7, d8
    f4cc:	ee27 2b07 	vmul.f64	d2, d7, d7
    f4d0:	1892      	adds	r2, r2, r2
    f4d2:	f102 040f 	add.w	r4, r2, #15
    f4d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f4da:	eea7 6b04 	vfma.f64	d6, d7, d4
    f4de:	ed92 4b1c 	vldr	d4, [r2, #112]	; 0x70
    f4e2:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    f4e6:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
    f4ea:	ed93 5b08 	vldr	d5, [r3, #32]
    f4ee:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
    f4f2:	6857      	ldr	r7, [r2, #4]
    f4f4:	eea7 5b03 	vfma.f64	d5, d7, d3
    f4f8:	1840      	adds	r0, r0, r1
    f4fa:	2400      	movs	r4, #0
    f4fc:	ee22 3b02 	vmul.f64	d3, d2, d2
    f500:	ee37 7b04 	vadd.f64	d7, d7, d4
    f504:	19a2      	adds	r2, r4, r6
    f506:	eea2 7b05 	vfma.f64	d7, d2, d5
    f50a:	eb07 3340 	add.w	r3, r7, r0, lsl #13
    f50e:	eea3 7b06 	vfma.f64	d7, d3, d6
    f512:	2d00      	cmp	r5, #0
    f514:	d05f      	beq.n	f5d6 <pow+0x26e>
    f516:	ec43 2b10 	vmov	d0, r2, r3
    f51a:	eea7 0b00 	vfma.f64	d0, d7, d0
    f51e:	b009      	add	sp, #36	; 0x24
    f520:	ecbd 8b0a 	vpop	{d8-d12}
    f524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f528:	18d8      	adds	r0, r3, r3
    f52a:	eb4e 090e 	adc.w	r9, lr, lr
    f52e:	1e46      	subs	r6, r0, #1
    f530:	4637      	mov	r7, r6
    f532:	f06f 0801 	mvn.w	r8, #1
    f536:	f149 36ff 	adc.w	r6, r9, #4294967295	; 0xffffffff
    f53a:	45b8      	cmp	r8, r7
    f53c:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f540:	eb77 0606 	sbcs.w	r6, r7, r6
    f544:	f0c0 8120 	bcc.w	f788 <pow+0x420>
    f548:	1848      	adds	r0, r1, r1
    f54a:	eb42 0902 	adc.w	r9, r2, r2
    f54e:	1e46      	subs	r6, r0, #1
    f550:	4637      	mov	r7, r6
    f552:	f169 0600 	sbc.w	r6, r9, #0
    f556:	45b8      	cmp	r8, r7
    f558:	f46f 1700 	mvn.w	r7, #2097152	; 0x200000
    f55c:	eb77 0606 	sbcs.w	r6, r7, r6
    f560:	f0c0 8139 	bcc.w	f7d6 <pow+0x46e>
    f564:	2a00      	cmp	r2, #0
    f566:	db6a      	blt.n	f63e <pow+0x2d6>
    f568:	2000      	movs	r0, #0
    f56a:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f56e:	f2a6 33be 	subw	r3, r6, #958	; 0x3be
    f572:	2b7f      	cmp	r3, #127	; 0x7f
    f574:	f240 77ff 	movw	r7, #2047	; 0x7ff
    f578:	d94f      	bls.n	f61a <pow+0x2b2>
    f57a:	4b72      	ldr	r3, [pc, #456]	; (f744 <pow+0x3dc>)
    f57c:	2000      	movs	r0, #0
    f57e:	429a      	cmp	r2, r3
    f580:	bf08      	it	eq
    f582:	4281      	cmpeq	r1, r0
    f584:	f000 80fd 	beq.w	f782 <pow+0x41a>
    f588:	f240 35bd 	movw	r5, #957	; 0x3bd
    f58c:	42ae      	cmp	r6, r5
    f58e:	f240 8091 	bls.w	f6b4 <pow+0x34c>
    f592:	2901      	cmp	r1, #1
    f594:	eb72 0303 	sbcs.w	r3, r2, r3
    f598:	bf34      	ite	cc
    f59a:	2301      	movcc	r3, #1
    f59c:	2300      	movcs	r3, #0
    f59e:	42bc      	cmp	r4, r7
    f5a0:	bf8c      	ite	hi
    f5a2:	2400      	movhi	r4, #0
    f5a4:	2401      	movls	r4, #1
    f5a6:	42a3      	cmp	r3, r4
    f5a8:	d10e      	bne.n	f5c8 <pow+0x260>
    f5aa:	b009      	add	sp, #36	; 0x24
    f5ac:	ecbd 8b0a 	vpop	{d8-d12}
    f5b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5b4:	f000 ba30 	b.w	fa18 <__math_uflow>
    f5b8:	2b00      	cmp	r3, #0
    f5ba:	f2c0 80ce 	blt.w	f75a <pow+0x3f2>
    f5be:	f5b5 6f81 	cmp.w	r5, #1032	; 0x408
    f5c2:	d975      	bls.n	f6b0 <pow+0x348>
    f5c4:	2a00      	cmp	r2, #0
    f5c6:	dbf0      	blt.n	f5aa <pow+0x242>
    f5c8:	b009      	add	sp, #36	; 0x24
    f5ca:	ecbd 8b0a 	vpop	{d8-d12}
    f5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5d2:	f000 ba29 	b.w	fa28 <__math_oflow>
    f5d6:	42a1      	cmp	r1, r4
    f5d8:	f280 8113 	bge.w	f802 <pow+0x49a>
    f5dc:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    f5e0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    f5e4:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    f5e8:	4610      	mov	r0, r2
    f5ea:	ec41 0b15 	vmov	d5, r0, r1
    f5ee:	ee27 7b05 	vmul.f64	d7, d7, d5
    f5f2:	ee35 6b07 	vadd.f64	d6, d5, d7
    f5f6:	eeb0 4bc6 	vabs.f64	d4, d6
    f5fa:	eeb4 4bc3 	vcmpe.f64	d4, d3
    f5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f602:	d461      	bmi.n	f6c8 <pow+0x360>
    f604:	ed9f 0b48 	vldr	d0, [pc, #288]	; f728 <pow+0x3c0>
    f608:	ee26 0b00 	vmul.f64	d0, d6, d0
    f60c:	b009      	add	sp, #36	; 0x24
    f60e:	ecbd 8b0a 	vpop	{d8-d12}
    f612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f616:	f000 ba37 	b.w	fa88 <__math_check_uflow>
    f61a:	2d00      	cmp	r5, #0
    f61c:	f47f aec7 	bne.w	f3ae <pow+0x46>
    f620:	ed9f 7b43 	vldr	d7, [pc, #268]	; f730 <pow+0x3c8>
    f624:	ec4b ab16 	vmov	d6, sl, fp
    f628:	ee26 7b07 	vmul.f64	d7, d6, d7
    f62c:	ec53 2b17 	vmov	r2, r3, d7
    f630:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    f634:	ee17 1a10 	vmov	r1, s14
    f638:	f1a2 7250 	sub.w	r2, r2, #54525952	; 0x3400000
    f63c:	e6b7      	b.n	f3ae <pow+0x46>
    f63e:	f3c4 060a 	ubfx	r6, r4, #0, #11
    f642:	f240 30fe 	movw	r0, #1022	; 0x3fe
    f646:	4286      	cmp	r6, r0
    f648:	dd7e      	ble.n	f748 <pow+0x3e0>
    f64a:	f240 4033 	movw	r0, #1075	; 0x433
    f64e:	4286      	cmp	r6, r0
    f650:	f300 80fa 	bgt.w	f848 <pow+0x4e0>
    f654:	1b80      	subs	r0, r0, r6
    f656:	f1a0 0520 	sub.w	r5, r0, #32
    f65a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f65e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    f662:	4087      	lsls	r7, r0
    f664:	fa09 f905 	lsl.w	r9, r9, r5
    f668:	f1c0 0820 	rsb	r8, r0, #32
    f66c:	9501      	str	r5, [sp, #4]
    f66e:	ea47 0509 	orr.w	r5, r7, r9
    f672:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    f676:	fa27 f908 	lsr.w	r9, r7, r8
    f67a:	ea45 0509 	orr.w	r5, r5, r9
    f67e:	4087      	lsls	r7, r0
    f680:	ea23 0707 	bic.w	r7, r3, r7
    f684:	ea2e 0505 	bic.w	r5, lr, r5
    f688:	433d      	orrs	r5, r7
    f68a:	d15d      	bne.n	f748 <pow+0x3e0>
    f68c:	9d01      	ldr	r5, [sp, #4]
    f68e:	40c3      	lsrs	r3, r0
    f690:	fa0e f808 	lsl.w	r8, lr, r8
    f694:	ea43 0308 	orr.w	r3, r3, r8
    f698:	fa2e fe05 	lsr.w	lr, lr, r5
    f69c:	ea43 030e 	orr.w	r3, r3, lr
    f6a0:	f003 0301 	and.w	r3, r3, #1
    f6a4:	0498      	lsls	r0, r3, #18
    f6a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    f6aa:	f3cc 050a 	ubfx	r5, ip, #0, #11
    f6ae:	e75e      	b.n	f56e <pow+0x206>
    f6b0:	2500      	movs	r5, #0
    f6b2:	e6ee      	b.n	f492 <pow+0x12a>
    f6b4:	4288      	cmp	r0, r1
    f6b6:	4193      	sbcs	r3, r2
    f6b8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f6bc:	bf34      	ite	cc
    f6be:	ee31 0b00 	vaddcc.f64	d0, d1, d0
    f6c2:	ee30 0b41 	vsubcs.f64	d0, d0, d1
    f6c6:	e72a      	b.n	f51e <pow+0x1b6>
    f6c8:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    f6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f6d0:	ee35 5b46 	vsub.f64	d5, d5, d6
    f6d4:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
    f6d8:	ee35 5b07 	vadd.f64	d5, d5, d7
    f6dc:	bf58      	it	pl
    f6de:	eeb0 4b43 	vmovpl.f64	d4, d3
    f6e2:	ee36 3b04 	vadd.f64	d3, d6, d4
    f6e6:	ee34 7b43 	vsub.f64	d7, d4, d3
    f6ea:	ee37 7b06 	vadd.f64	d7, d7, d6
    f6ee:	ee37 7b05 	vadd.f64	d7, d7, d5
    f6f2:	ee37 7b03 	vadd.f64	d7, d7, d3
    f6f6:	ee37 6b44 	vsub.f64	d6, d7, d4
    f6fa:	eeb5 6b40 	vcmp.f64	d6, #0.0
    f6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f702:	d104      	bne.n	f70e <pow+0x3a6>
    f704:	462a      	mov	r2, r5
    f706:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
    f70a:	ec43 2b16 	vmov	d6, r2, r3
    f70e:	ed9f 5b06 	vldr	d5, [pc, #24]	; f728 <pow+0x3c0>
    f712:	ed8d 5b04 	vstr	d5, [sp, #16]
    f716:	ed9d 7b04 	vldr	d7, [sp, #16]
    f71a:	ee27 7b05 	vmul.f64	d7, d7, d5
    f71e:	ed8d 7b06 	vstr	d7, [sp, #24]
    f722:	e76f      	b.n	f604 <pow+0x29c>
    f724:	f3af 8000 	nop.w
    f728:	00000000 	.word	0x00000000
    f72c:	00100000 	.word	0x00100000
    f730:	00000000 	.word	0x00000000
    f734:	43300000 	.word	0x43300000
    f738:	c0196aab 	.word	0xc0196aab
    f73c:	20000c20 	.word	0x20000c20
    f740:	200002c0 	.word	0x200002c0
    f744:	3ff00000 	.word	0x3ff00000
    f748:	ec4b ab10 	vmov	d0, sl, fp
    f74c:	b009      	add	sp, #36	; 0x24
    f74e:	ecbd 8b0a 	vpop	{d8-d12}
    f752:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f756:	f000 b987 	b.w	fa68 <__math_invalid>
    f75a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f75e:	ee38 0b00 	vadd.f64	d0, d8, d0
    f762:	2800      	cmp	r0, #0
    f764:	f43f aedb 	beq.w	f51e <pow+0x1b6>
    f768:	eeb1 0b40 	vneg.f64	d0, d0
    f76c:	e6d7      	b.n	f51e <pow+0x1b6>
    f76e:	1849      	adds	r1, r1, r1
    f770:	4b59      	ldr	r3, [pc, #356]	; (f8d8 <pow+0x570>)
    f772:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
    f776:	f04f 0000 	mov.w	r0, #0
    f77a:	4152      	adcs	r2, r2
    f77c:	4288      	cmp	r0, r1
    f77e:	4193      	sbcs	r3, r2
    f780:	d35d      	bcc.n	f83e <pow+0x4d6>
    f782:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    f786:	e6ca      	b.n	f51e <pow+0x1b6>
    f788:	ea50 0409 	orrs.w	r4, r0, r9
    f78c:	d0ef      	beq.n	f76e <pow+0x406>
    f78e:	4c53      	ldr	r4, [pc, #332]	; (f8dc <pow+0x574>)
    f790:	2500      	movs	r5, #0
    f792:	42a2      	cmp	r2, r4
    f794:	bf08      	it	eq
    f796:	42a9      	cmpeq	r1, r5
    f798:	d047      	beq.n	f82a <pow+0x4c2>
    f79a:	1849      	adds	r1, r1, r1
    f79c:	4b50      	ldr	r3, [pc, #320]	; (f8e0 <pow+0x578>)
    f79e:	4152      	adcs	r2, r2
    f7a0:	428d      	cmp	r5, r1
    f7a2:	eb73 0402 	sbcs.w	r4, r3, r2
    f7a6:	d34a      	bcc.n	f83e <pow+0x4d6>
    f7a8:	4599      	cmp	r9, r3
    f7aa:	bf08      	it	eq
    f7ac:	42a8      	cmpeq	r0, r5
    f7ae:	d146      	bne.n	f83e <pow+0x4d6>
    f7b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    f7b4:	429a      	cmp	r2, r3
    f7b6:	bf08      	it	eq
    f7b8:	42a9      	cmpeq	r1, r5
    f7ba:	d0e2      	beq.n	f782 <pow+0x41a>
    f7bc:	429a      	cmp	r2, r3
    f7be:	ea6f 0e0e 	mvn.w	lr, lr
    f7c2:	bf34      	ite	cc
    f7c4:	2200      	movcc	r2, #0
    f7c6:	2201      	movcs	r2, #1
    f7c8:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    f7cc:	4572      	cmp	r2, lr
    f7ce:	d077      	beq.n	f8c0 <pow+0x558>
    f7d0:	ed9f 0b3d 	vldr	d0, [pc, #244]	; f8c8 <pow+0x560>
    f7d4:	e6a3      	b.n	f51e <pow+0x1b6>
    f7d6:	ec4b ab17 	vmov	d7, sl, fp
    f7da:	2a00      	cmp	r2, #0
    f7dc:	ee27 0b07 	vmul.f64	d0, d7, d7
    f7e0:	db34      	blt.n	f84c <pow+0x4e4>
    f7e2:	2200      	movs	r2, #0
    f7e4:	ea50 0909 	orrs.w	r9, r0, r9
    f7e8:	d15d      	bne.n	f8a6 <pow+0x53e>
    f7ea:	f1be 0f00 	cmp.w	lr, #0
    f7ee:	f6bf ae96 	bge.w	f51e <pow+0x1b6>
    f7f2:	4610      	mov	r0, r2
    f7f4:	b009      	add	sp, #36	; 0x24
    f7f6:	ecbd 8b0a 	vpop	{d8-d12}
    f7fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7fe:	f000 b91b 	b.w	fa38 <__math_divzero>
    f802:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    f806:	ed9f 6b32 	vldr	d6, [pc, #200]	; f8d0 <pow+0x568>
    f80a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
    f80e:	4610      	mov	r0, r2
    f810:	ec41 0b10 	vmov	d0, r0, r1
    f814:	eea7 0b00 	vfma.f64	d0, d7, d0
    f818:	ee20 0b06 	vmul.f64	d0, d0, d6
    f81c:	b009      	add	sp, #36	; 0x24
    f81e:	ecbd 8b0a 	vpop	{d8-d12}
    f822:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f826:	f000 b93b 	b.w	faa0 <__math_check_oflow>
    f82a:	18db      	adds	r3, r3, r3
    f82c:	4a2a      	ldr	r2, [pc, #168]	; (f8d8 <pow+0x570>)
    f82e:	f48e 2e00 	eor.w	lr, lr, #524288	; 0x80000
    f832:	eb4e 0e0e 	adc.w	lr, lr, lr
    f836:	429d      	cmp	r5, r3
    f838:	eb72 020e 	sbcs.w	r2, r2, lr
    f83c:	d2a1      	bcs.n	f782 <pow+0x41a>
    f83e:	ec4b ab17 	vmov	d7, sl, fp
    f842:	ee37 0b01 	vadd.f64	d0, d7, d1
    f846:	e66a      	b.n	f51e <pow+0x1b6>
    f848:	2000      	movs	r0, #0
    f84a:	e72c      	b.n	f6a6 <pow+0x33e>
    f84c:	f3c4 020a 	ubfx	r2, r4, #0, #11
    f850:	f2a2 31ff 	subw	r1, r2, #1023	; 0x3ff
    f854:	2934      	cmp	r1, #52	; 0x34
    f856:	d8c4      	bhi.n	f7e2 <pow+0x47a>
    f858:	f5c2 6286 	rsb	r2, r2, #1072	; 0x430
    f85c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f860:	f1a2 051d 	sub.w	r5, r2, #29
    f864:	3203      	adds	r2, #3
    f866:	fa01 f705 	lsl.w	r7, r1, r5
    f86a:	fa01 f402 	lsl.w	r4, r1, r2
    f86e:	f1c2 0620 	rsb	r6, r2, #32
    f872:	433c      	orrs	r4, r7
    f874:	fa21 f706 	lsr.w	r7, r1, r6
    f878:	433c      	orrs	r4, r7
    f87a:	4091      	lsls	r1, r2
    f87c:	ea23 0101 	bic.w	r1, r3, r1
    f880:	ea2e 0404 	bic.w	r4, lr, r4
    f884:	4321      	orrs	r1, r4
    f886:	d1ac      	bne.n	f7e2 <pow+0x47a>
    f888:	fa23 f202 	lsr.w	r2, r3, r2
    f88c:	fa0e f606 	lsl.w	r6, lr, r6
    f890:	4332      	orrs	r2, r6
    f892:	fa2e f505 	lsr.w	r5, lr, r5
    f896:	432a      	orrs	r2, r5
    f898:	f012 0201 	ands.w	r2, r2, #1
    f89c:	d0a2      	beq.n	f7e4 <pow+0x47c>
    f89e:	eeb1 0b40 	vneg.f64	d0, d0
    f8a2:	2201      	movs	r2, #1
    f8a4:	e79e      	b.n	f7e4 <pow+0x47c>
    f8a6:	f1be 0f00 	cmp.w	lr, #0
    f8aa:	f6bf ae38 	bge.w	f51e <pow+0x1b6>
    f8ae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    f8b2:	ee86 7b00 	vdiv.f64	d7, d6, d0
    f8b6:	ed8d 7b02 	vstr	d7, [sp, #8]
    f8ba:	ed9d 0b02 	vldr	d0, [sp, #8]
    f8be:	e62e      	b.n	f51e <pow+0x1b6>
    f8c0:	ee21 0b01 	vmul.f64	d0, d1, d1
    f8c4:	e62b      	b.n	f51e <pow+0x1b6>
    f8c6:	bf00      	nop
	...
    f8d4:	7f000000 	.word	0x7f000000
    f8d8:	fff00000 	.word	0xfff00000
    f8dc:	3ff00000 	.word	0x3ff00000
    f8e0:	ffe00000 	.word	0xffe00000

0000f8e4 <asinf>:
    f8e4:	b508      	push	{r3, lr}
    f8e6:	ed2d 8b02 	vpush	{d8}
    f8ea:	eeb0 8a40 	vmov.f32	s16, s0
    f8ee:	f000 f9e3 	bl	fcb8 <__ieee754_asinf>
    f8f2:	eeb4 8a48 	vcmp.f32	s16, s16
    f8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f8fa:	eef0 8a40 	vmov.f32	s17, s0
    f8fe:	d60a      	bvs.n	f916 <asinf+0x32>
    f900:	eeb0 0a48 	vmov.f32	s0, s16
    f904:	f000 f81c 	bl	f940 <fabsf>
    f908:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f90c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    f910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f914:	dc04      	bgt.n	f920 <asinf+0x3c>
    f916:	eeb0 0a68 	vmov.f32	s0, s17
    f91a:	ecbd 8b02 	vpop	{d8}
    f91e:	bd08      	pop	{r3, pc}
    f920:	f001 fade 	bl	10ee0 <__errno>
    f924:	ecbd 8b02 	vpop	{d8}
    f928:	4603      	mov	r3, r0
    f92a:	2221      	movs	r2, #33	; 0x21
    f92c:	601a      	str	r2, [r3, #0]
    f92e:	4802      	ldr	r0, [pc, #8]	; (f938 <asinf+0x54>)
    f930:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f934:	f000 b8c8 	b.w	fac8 <nanf>
    f938:	20001f9c 	.word	0x20001f9c

0000f93c <atan2f>:
    f93c:	f000 bac2 	b.w	fec4 <__ieee754_atan2f>

0000f940 <fabsf>:
    f940:	ee10 3a10 	vmov	r3, s0
    f944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f948:	ee00 3a10 	vmov	s0, r3
    f94c:	4770      	bx	lr
    f94e:	bf00      	nop

0000f950 <__ieee754_sqrtf>:
    f950:	eeb1 0ac0 	vsqrt.f32	s0, s0
    f954:	4770      	bx	lr
    f956:	bf00      	nop

0000f958 <sin>:
    f958:	eeb0 7b40 	vmov.f64	d7, d0
    f95c:	ee17 3a90 	vmov	r3, s15
    f960:	4a1b      	ldr	r2, [pc, #108]	; (f9d0 <sin+0x78>)
    f962:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    f966:	4293      	cmp	r3, r2
    f968:	dd1c      	ble.n	f9a4 <sin+0x4c>
    f96a:	4a1a      	ldr	r2, [pc, #104]	; (f9d4 <sin+0x7c>)
    f96c:	4293      	cmp	r3, r2
    f96e:	dd02      	ble.n	f976 <sin+0x1e>
    f970:	ee30 0b40 	vsub.f64	d0, d0, d0
    f974:	4770      	bx	lr
    f976:	b500      	push	{lr}
    f978:	b085      	sub	sp, #20
    f97a:	4668      	mov	r0, sp
    f97c:	f000 fc20 	bl	101c0 <__ieee754_rem_pio2>
    f980:	f000 0003 	and.w	r0, r0, #3
    f984:	2801      	cmp	r0, #1
    f986:	ed9d 1b02 	vldr	d1, [sp, #8]
    f98a:	ed9d 0b00 	vldr	d0, [sp]
    f98e:	d00e      	beq.n	f9ae <sin+0x56>
    f990:	2802      	cmp	r0, #2
    f992:	d013      	beq.n	f9bc <sin+0x64>
    f994:	b170      	cbz	r0, f9b4 <sin+0x5c>
    f996:	f000 f89f 	bl	fad8 <__kernel_cos>
    f99a:	eeb1 0b40 	vneg.f64	d0, d0
    f99e:	b005      	add	sp, #20
    f9a0:	f85d fb04 	ldr.w	pc, [sp], #4
    f9a4:	ed9f 1b08 	vldr	d1, [pc, #32]	; f9c8 <sin+0x70>
    f9a8:	2000      	movs	r0, #0
    f9aa:	f000 b92d 	b.w	fc08 <__kernel_sin>
    f9ae:	f000 f893 	bl	fad8 <__kernel_cos>
    f9b2:	e7f4      	b.n	f99e <sin+0x46>
    f9b4:	2001      	movs	r0, #1
    f9b6:	f000 f927 	bl	fc08 <__kernel_sin>
    f9ba:	e7f0      	b.n	f99e <sin+0x46>
    f9bc:	2001      	movs	r0, #1
    f9be:	f000 f923 	bl	fc08 <__kernel_sin>
    f9c2:	eeb1 0b40 	vneg.f64	d0, d0
    f9c6:	e7ea      	b.n	f99e <sin+0x46>
	...
    f9d0:	3fe921fb 	.word	0x3fe921fb
    f9d4:	7fefffff 	.word	0x7fefffff

0000f9d8 <with_errno>:
    f9d8:	b510      	push	{r4, lr}
    f9da:	b082      	sub	sp, #8
    f9dc:	ed8d 0b00 	vstr	d0, [sp]
    f9e0:	4604      	mov	r4, r0
    f9e2:	f001 fa7d 	bl	10ee0 <__errno>
    f9e6:	ed9d 0b00 	vldr	d0, [sp]
    f9ea:	6004      	str	r4, [r0, #0]
    f9ec:	b002      	add	sp, #8
    f9ee:	bd10      	pop	{r4, pc}

0000f9f0 <xflow>:
    f9f0:	b082      	sub	sp, #8
    f9f2:	b158      	cbz	r0, fa0c <xflow+0x1c>
    f9f4:	eeb1 7b40 	vneg.f64	d7, d0
    f9f8:	ed8d 7b00 	vstr	d7, [sp]
    f9fc:	ed9d 7b00 	vldr	d7, [sp]
    fa00:	2022      	movs	r0, #34	; 0x22
    fa02:	ee20 0b07 	vmul.f64	d0, d0, d7
    fa06:	b002      	add	sp, #8
    fa08:	f7ff bfe6 	b.w	f9d8 <with_errno>
    fa0c:	eeb0 7b40 	vmov.f64	d7, d0
    fa10:	e7f2      	b.n	f9f8 <xflow+0x8>
    fa12:	bf00      	nop
    fa14:	0000      	movs	r0, r0
	...

0000fa18 <__math_uflow>:
    fa18:	ed9f 0b01 	vldr	d0, [pc, #4]	; fa20 <__math_uflow+0x8>
    fa1c:	f7ff bfe8 	b.w	f9f0 <xflow>
    fa20:	00000000 	.word	0x00000000
    fa24:	10000000 	.word	0x10000000

0000fa28 <__math_oflow>:
    fa28:	ed9f 0b01 	vldr	d0, [pc, #4]	; fa30 <__math_oflow+0x8>
    fa2c:	f7ff bfe0 	b.w	f9f0 <xflow>
    fa30:	00000000 	.word	0x00000000
    fa34:	70000000 	.word	0x70000000

0000fa38 <__math_divzero>:
    fa38:	b082      	sub	sp, #8
    fa3a:	2800      	cmp	r0, #0
    fa3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fa40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    fa44:	fe06 7b07 	vseleq.f64	d7, d6, d7
    fa48:	ed8d 7b00 	vstr	d7, [sp]
    fa4c:	ed9d 0b00 	vldr	d0, [sp]
    fa50:	ed9f 7b03 	vldr	d7, [pc, #12]	; fa60 <__math_divzero+0x28>
    fa54:	2022      	movs	r0, #34	; 0x22
    fa56:	ee80 0b07 	vdiv.f64	d0, d0, d7
    fa5a:	b002      	add	sp, #8
    fa5c:	f7ff bfbc 	b.w	f9d8 <with_errno>
	...

0000fa68 <__math_invalid>:
    fa68:	eeb4 0b40 	vcmp.f64	d0, d0
    fa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fa70:	ee30 7b40 	vsub.f64	d7, d0, d0
    fa74:	ee87 6b07 	vdiv.f64	d6, d7, d7
    fa78:	eeb0 0b46 	vmov.f64	d0, d6
    fa7c:	d602      	bvs.n	fa84 <__math_invalid+0x1c>
    fa7e:	2021      	movs	r0, #33	; 0x21
    fa80:	f7ff bfaa 	b.w	f9d8 <with_errno>
    fa84:	4770      	bx	lr
    fa86:	bf00      	nop

0000fa88 <__math_check_uflow>:
    fa88:	eeb5 0b40 	vcmp.f64	d0, #0.0
    fa8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fa90:	d000      	beq.n	fa94 <__math_check_uflow+0xc>
    fa92:	4770      	bx	lr
    fa94:	2022      	movs	r0, #34	; 0x22
    fa96:	f7ff bf9f 	b.w	f9d8 <with_errno>
    fa9a:	bf00      	nop
    fa9c:	0000      	movs	r0, r0
	...

0000faa0 <__math_check_oflow>:
    faa0:	ed9f 6b07 	vldr	d6, [pc, #28]	; fac0 <__math_check_oflow+0x20>
    faa4:	eeb0 7bc0 	vabs.f64	d7, d0
    faa8:	eeb4 7b46 	vcmp.f64	d7, d6
    faac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fab0:	dc00      	bgt.n	fab4 <__math_check_oflow+0x14>
    fab2:	4770      	bx	lr
    fab4:	2022      	movs	r0, #34	; 0x22
    fab6:	f7ff bf8f 	b.w	f9d8 <with_errno>
    faba:	bf00      	nop
    fabc:	f3af 8000 	nop.w
    fac0:	ffffffff 	.word	0xffffffff
    fac4:	7fefffff 	.word	0x7fefffff

0000fac8 <nanf>:
    fac8:	ed9f 0a01 	vldr	s0, [pc, #4]	; fad0 <nanf+0x8>
    facc:	4770      	bx	lr
    face:	bf00      	nop
    fad0:	7fc00000 	.word	0x7fc00000
    fad4:	00000000 	.word	0x00000000

0000fad8 <__kernel_cos>:
    fad8:	ee10 3a90 	vmov	r3, s1
    fadc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fae0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    fae4:	ed2d 8b02 	vpush	{d8}
    fae8:	da2e      	bge.n	fb48 <__kernel_cos+0x70>
    faea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    faee:	ee17 3a90 	vmov	r3, s15
    faf2:	2b00      	cmp	r3, #0
    faf4:	d065      	beq.n	fbc2 <__kernel_cos+0xea>
    faf6:	ee20 4b00 	vmul.f64	d4, d0, d0
    fafa:	ed9f 8b35 	vldr	d8, [pc, #212]	; fbd0 <__kernel_cos+0xf8>
    fafe:	ed9f 2b36 	vldr	d2, [pc, #216]	; fbd8 <__kernel_cos+0x100>
    fb02:	ed9f 3b37 	vldr	d3, [pc, #220]	; fbe0 <__kernel_cos+0x108>
    fb06:	eea4 2b08 	vfma.f64	d2, d4, d8
    fb0a:	ed9f 5b37 	vldr	d5, [pc, #220]	; fbe8 <__kernel_cos+0x110>
    fb0e:	eea4 3b02 	vfma.f64	d3, d4, d2
    fb12:	ed9f 6b37 	vldr	d6, [pc, #220]	; fbf0 <__kernel_cos+0x118>
    fb16:	eea4 5b03 	vfma.f64	d5, d4, d3
    fb1a:	ed9f 7b37 	vldr	d7, [pc, #220]	; fbf8 <__kernel_cos+0x120>
    fb1e:	eea4 6b05 	vfma.f64	d6, d4, d5
    fb22:	eea4 7b06 	vfma.f64	d7, d4, d6
    fb26:	ee24 7b07 	vmul.f64	d7, d4, d7
    fb2a:	ee21 1b40 	vnmul.f64	d1, d1, d0
    fb2e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    fb32:	eea4 1b07 	vfma.f64	d1, d4, d7
    fb36:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fb3a:	ee94 1b06 	vfnms.f64	d1, d4, d6
    fb3e:	ecbd 8b02 	vpop	{d8}
    fb42:	ee30 0b41 	vsub.f64	d0, d0, d1
    fb46:	4770      	bx	lr
    fb48:	ed9f 8b21 	vldr	d8, [pc, #132]	; fbd0 <__kernel_cos+0xf8>
    fb4c:	ee20 4b00 	vmul.f64	d4, d0, d0
    fb50:	ed9f 2b21 	vldr	d2, [pc, #132]	; fbd8 <__kernel_cos+0x100>
    fb54:	ed9f 3b22 	vldr	d3, [pc, #136]	; fbe0 <__kernel_cos+0x108>
    fb58:	eea4 2b08 	vfma.f64	d2, d4, d8
    fb5c:	ed9f 5b22 	vldr	d5, [pc, #136]	; fbe8 <__kernel_cos+0x110>
    fb60:	eea2 3b04 	vfma.f64	d3, d2, d4
    fb64:	ed9f 6b22 	vldr	d6, [pc, #136]	; fbf0 <__kernel_cos+0x118>
    fb68:	eea3 5b04 	vfma.f64	d5, d3, d4
    fb6c:	ed9f 7b22 	vldr	d7, [pc, #136]	; fbf8 <__kernel_cos+0x120>
    fb70:	eea5 6b04 	vfma.f64	d6, d5, d4
    fb74:	4a22      	ldr	r2, [pc, #136]	; (fc00 <__kernel_cos+0x128>)
    fb76:	eea6 7b04 	vfma.f64	d7, d6, d4
    fb7a:	4293      	cmp	r3, r2
    fb7c:	ee27 7b04 	vmul.f64	d7, d7, d4
    fb80:	ddd3      	ble.n	fb2a <__kernel_cos+0x52>
    fb82:	4a20      	ldr	r2, [pc, #128]	; (fc04 <__kernel_cos+0x12c>)
    fb84:	4293      	cmp	r3, r2
    fb86:	dc17      	bgt.n	fbb8 <__kernel_cos+0xe0>
    fb88:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    fb8c:	2000      	movs	r0, #0
    fb8e:	f5a3 1100 	sub.w	r1, r3, #2097152	; 0x200000
    fb92:	ec41 0b15 	vmov	d5, r0, r1
    fb96:	ee36 6b45 	vsub.f64	d6, d6, d5
    fb9a:	ee21 1b40 	vnmul.f64	d1, d1, d0
    fb9e:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fba2:	eea4 1b07 	vfma.f64	d1, d4, d7
    fba6:	ee94 5b03 	vfnms.f64	d5, d4, d3
    fbaa:	ecbd 8b02 	vpop	{d8}
    fbae:	ee35 0b41 	vsub.f64	d0, d5, d1
    fbb2:	ee36 0b40 	vsub.f64	d0, d6, d0
    fbb6:	4770      	bx	lr
    fbb8:	eeb6 6b07 	vmov.f64	d6, #103	; 0x3f380000  0.7187500
    fbbc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
    fbc0:	e7eb      	b.n	fb9a <__kernel_cos+0xc2>
    fbc2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
    fbc6:	ecbd 8b02 	vpop	{d8}
    fbca:	4770      	bx	lr
    fbcc:	f3af 8000 	nop.w
    fbd0:	be8838d4 	.word	0xbe8838d4
    fbd4:	bda8fae9 	.word	0xbda8fae9
    fbd8:	bdb4b1c4 	.word	0xbdb4b1c4
    fbdc:	3e21ee9e 	.word	0x3e21ee9e
    fbe0:	809c52ad 	.word	0x809c52ad
    fbe4:	be927e4f 	.word	0xbe927e4f
    fbe8:	19cb1590 	.word	0x19cb1590
    fbec:	3efa01a0 	.word	0x3efa01a0
    fbf0:	16c15177 	.word	0x16c15177
    fbf4:	bf56c16c 	.word	0xbf56c16c
    fbf8:	5555554c 	.word	0x5555554c
    fbfc:	3fa55555 	.word	0x3fa55555
    fc00:	3fd33332 	.word	0x3fd33332
    fc04:	3fe90000 	.word	0x3fe90000

0000fc08 <__kernel_sin>:
    fc08:	ee10 3a90 	vmov	r3, s1
    fc0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fc10:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    fc14:	da04      	bge.n	fc20 <__kernel_sin+0x18>
    fc16:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    fc1a:	ee17 3a90 	vmov	r3, s15
    fc1e:	b35b      	cbz	r3, fc78 <__kernel_sin+0x70>
    fc20:	ee20 7b00 	vmul.f64	d7, d0, d0
    fc24:	ed9f 2b16 	vldr	d2, [pc, #88]	; fc80 <__kernel_sin+0x78>
    fc28:	ed9f 3b17 	vldr	d3, [pc, #92]	; fc88 <__kernel_sin+0x80>
    fc2c:	ed9f 4b18 	vldr	d4, [pc, #96]	; fc90 <__kernel_sin+0x88>
    fc30:	eea7 3b02 	vfma.f64	d3, d7, d2
    fc34:	ed9f 5b18 	vldr	d5, [pc, #96]	; fc98 <__kernel_sin+0x90>
    fc38:	eea3 4b07 	vfma.f64	d4, d3, d7
    fc3c:	ed9f 6b18 	vldr	d6, [pc, #96]	; fca0 <__kernel_sin+0x98>
    fc40:	eea4 5b07 	vfma.f64	d5, d4, d7
    fc44:	eea5 6b07 	vfma.f64	d6, d5, d7
    fc48:	ee20 5b07 	vmul.f64	d5, d0, d7
    fc4c:	b930      	cbnz	r0, fc5c <__kernel_sin+0x54>
    fc4e:	ed9f 4b16 	vldr	d4, [pc, #88]	; fca8 <__kernel_sin+0xa0>
    fc52:	eea7 4b06 	vfma.f64	d4, d7, d6
    fc56:	eea4 0b05 	vfma.f64	d0, d4, d5
    fc5a:	4770      	bx	lr
    fc5c:	ed9f 4b14 	vldr	d4, [pc, #80]	; fcb0 <__kernel_sin+0xa8>
    fc60:	ee26 6b45 	vnmul.f64	d6, d6, d5
    fc64:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    fc68:	eea1 6b03 	vfma.f64	d6, d1, d3
    fc6c:	ee96 1b07 	vfnms.f64	d1, d6, d7
    fc70:	eea5 1b04 	vfma.f64	d1, d5, d4
    fc74:	ee30 0b41 	vsub.f64	d0, d0, d1
    fc78:	4770      	bx	lr
    fc7a:	bf00      	nop
    fc7c:	f3af 8000 	nop.w
    fc80:	5acfd57c 	.word	0x5acfd57c
    fc84:	3de5d93a 	.word	0x3de5d93a
    fc88:	8a2b9ceb 	.word	0x8a2b9ceb
    fc8c:	be5ae5e6 	.word	0xbe5ae5e6
    fc90:	57b1fe7d 	.word	0x57b1fe7d
    fc94:	3ec71de3 	.word	0x3ec71de3
    fc98:	19c161d5 	.word	0x19c161d5
    fc9c:	bf2a01a0 	.word	0xbf2a01a0
    fca0:	1110f8a6 	.word	0x1110f8a6
    fca4:	3f811111 	.word	0x3f811111
    fca8:	55555549 	.word	0x55555549
    fcac:	bfc55555 	.word	0xbfc55555
    fcb0:	55555549 	.word	0x55555549
    fcb4:	3fc55555 	.word	0x3fc55555

0000fcb8 <__ieee754_asinf>:
    fcb8:	b538      	push	{r3, r4, r5, lr}
    fcba:	ee10 5a10 	vmov	r5, s0
    fcbe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
    fcc2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
    fcc6:	ed2d 8b04 	vpush	{d8-d9}
    fcca:	f000 8085 	beq.w	fdd8 <__ieee754_asinf+0x120>
    fcce:	dc7a      	bgt.n	fdc6 <__ieee754_asinf+0x10e>
    fcd0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    fcd4:	da0f      	bge.n	fcf6 <__ieee754_asinf+0x3e>
    fcd6:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
    fcda:	f280 809c 	bge.w	fe16 <__ieee754_asinf+0x15e>
    fcde:	eddf 7a69 	vldr	s15, [pc, #420]	; fe84 <__ieee754_asinf+0x1cc>
    fce2:	ee70 7a27 	vadd.f32	s15, s0, s15
    fce6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    fcea:	eef4 7ac7 	vcmpe.f32	s15, s14
    fcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fcf2:	f300 808d 	bgt.w	fe10 <__ieee754_asinf+0x158>
    fcf6:	f7ff fe23 	bl	f940 <fabsf>
    fcfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fcfe:	ee37 0ac0 	vsub.f32	s0, s15, s0
    fd02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    fd06:	ee20 8a07 	vmul.f32	s16, s0, s14
    fd0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; fe88 <__ieee754_asinf+0x1d0>
    fd0e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; fe8c <__ieee754_asinf+0x1d4>
    fd12:	ed9f 6a5f 	vldr	s12, [pc, #380]	; fe90 <__ieee754_asinf+0x1d8>
    fd16:	ed9f 5a5f 	vldr	s10, [pc, #380]	; fe94 <__ieee754_asinf+0x1dc>
    fd1a:	eddf 5a5f 	vldr	s11, [pc, #380]	; fe98 <__ieee754_asinf+0x1e0>
    fd1e:	eddf 8a5f 	vldr	s17, [pc, #380]	; fe9c <__ieee754_asinf+0x1e4>
    fd22:	eee8 6a07 	vfma.f32	s13, s16, s14
    fd26:	ed9f 7a5e 	vldr	s14, [pc, #376]	; fea0 <__ieee754_asinf+0x1e8>
    fd2a:	eea8 7a06 	vfma.f32	s14, s16, s12
    fd2e:	ed9f 6a5d 	vldr	s12, [pc, #372]	; fea4 <__ieee754_asinf+0x1ec>
    fd32:	eea6 5a88 	vfma.f32	s10, s13, s16
    fd36:	eea7 6a08 	vfma.f32	s12, s14, s16
    fd3a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; fea8 <__ieee754_asinf+0x1f0>
    fd3e:	eddf 6a5b 	vldr	s13, [pc, #364]	; feac <__ieee754_asinf+0x1f4>
    fd42:	eee5 5a08 	vfma.f32	s11, s10, s16
    fd46:	eea6 7a08 	vfma.f32	s14, s12, s16
    fd4a:	eee5 6a88 	vfma.f32	s13, s11, s16
    fd4e:	eee7 7a08 	vfma.f32	s15, s14, s16
    fd52:	eee6 8a88 	vfma.f32	s17, s13, s16
    fd56:	eeb0 0a48 	vmov.f32	s0, s16
    fd5a:	eeb0 9a67 	vmov.f32	s18, s15
    fd5e:	f7ff fdf7 	bl	f950 <__ieee754_sqrtf>
    fd62:	4b53      	ldr	r3, [pc, #332]	; (feb0 <__ieee754_asinf+0x1f8>)
    fd64:	429c      	cmp	r4, r3
    fd66:	ee68 8a88 	vmul.f32	s17, s17, s16
    fd6a:	dc42      	bgt.n	fdf2 <__ieee754_asinf+0x13a>
    fd6c:	ee10 3a10 	vmov	r3, s0
    fd70:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    fd74:	f023 030f 	bic.w	r3, r3, #15
    fd78:	ee06 3a90 	vmov	s13, r3
    fd7c:	eea6 8ae6 	vfms.f32	s16, s13, s13
    fd80:	ee30 7a26 	vadd.f32	s14, s0, s13
    fd84:	ee88 5a89 	vdiv.f32	s10, s17, s18
    fd88:	eec8 4a07 	vdiv.f32	s9, s16, s14
    fd8c:	eddf 7a49 	vldr	s15, [pc, #292]	; feb4 <__ieee754_asinf+0x1fc>
    fd90:	ed9f 7a49 	vldr	s14, [pc, #292]	; feb8 <__ieee754_asinf+0x200>
    fd94:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
    fd98:	eee4 7ac6 	vfms.f32	s15, s9, s12
    fd9c:	ee30 0a00 	vadd.f32	s0, s0, s0
    fda0:	eef0 5a47 	vmov.f32	s11, s14
    fda4:	eee6 5ac6 	vfms.f32	s11, s13, s12
    fda8:	eed0 7a05 	vfnms.f32	s15, s0, s10
    fdac:	ee77 7ae5 	vsub.f32	s15, s15, s11
    fdb0:	ee37 7a67 	vsub.f32	s14, s14, s15
    fdb4:	2d00      	cmp	r5, #0
    fdb6:	dc0a      	bgt.n	fdce <__ieee754_asinf+0x116>
    fdb8:	ecbd 8b04 	vpop	{d8-d9}
    fdbc:	eeb1 7a47 	vneg.f32	s14, s14
    fdc0:	eeb0 0a47 	vmov.f32	s0, s14
    fdc4:	bd38      	pop	{r3, r4, r5, pc}
    fdc6:	ee70 7a40 	vsub.f32	s15, s0, s0
    fdca:	ee87 7aa7 	vdiv.f32	s14, s15, s15
    fdce:	ecbd 8b04 	vpop	{d8-d9}
    fdd2:	eeb0 0a47 	vmov.f32	s0, s14
    fdd6:	bd38      	pop	{r3, r4, r5, pc}
    fdd8:	ed9f 7a36 	vldr	s14, [pc, #216]	; feb4 <__ieee754_asinf+0x1fc>
    fddc:	eddf 7a37 	vldr	s15, [pc, #220]	; febc <__ieee754_asinf+0x204>
    fde0:	ee20 7a07 	vmul.f32	s14, s0, s14
    fde4:	ecbd 8b04 	vpop	{d8-d9}
    fde8:	eea0 7a27 	vfma.f32	s14, s0, s15
    fdec:	eeb0 0a47 	vmov.f32	s0, s14
    fdf0:	bd38      	pop	{r3, r4, r5, pc}
    fdf2:	ee88 6a89 	vdiv.f32	s12, s17, s18
    fdf6:	eddf 7a32 	vldr	s15, [pc, #200]	; fec0 <__ieee754_asinf+0x208>
    fdfa:	ed9f 7a30 	vldr	s14, [pc, #192]	; febc <__ieee754_asinf+0x204>
    fdfe:	eea0 0a06 	vfma.f32	s0, s0, s12
    fe02:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    fe06:	eee0 7a26 	vfma.f32	s15, s0, s13
    fe0a:	ee37 7a67 	vsub.f32	s14, s14, s15
    fe0e:	e7d1      	b.n	fdb4 <__ieee754_asinf+0xfc>
    fe10:	eeb0 7a40 	vmov.f32	s14, s0
    fe14:	e7db      	b.n	fdce <__ieee754_asinf+0x116>
    fe16:	ee60 7a00 	vmul.f32	s15, s0, s0
    fe1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; fe8c <__ieee754_asinf+0x1d4>
    fe1e:	eddf 6a1a 	vldr	s13, [pc, #104]	; fe88 <__ieee754_asinf+0x1d0>
    fe22:	ed9f 6a1c 	vldr	s12, [pc, #112]	; fe94 <__ieee754_asinf+0x1dc>
    fe26:	eddf 5a1a 	vldr	s11, [pc, #104]	; fe90 <__ieee754_asinf+0x1d8>
    fe2a:	ed9f 5a1b 	vldr	s10, [pc, #108]	; fe98 <__ieee754_asinf+0x1e0>
    fe2e:	eee7 6a87 	vfma.f32	s13, s15, s14
    fe32:	ecbd 8b04 	vpop	{d8-d9}
    fe36:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fe3a:	ed9f 7a19 	vldr	s14, [pc, #100]	; fea0 <__ieee754_asinf+0x1e8>
    fe3e:	eddf 6a19 	vldr	s13, [pc, #100]	; fea4 <__ieee754_asinf+0x1ec>
    fe42:	eea7 7aa5 	vfma.f32	s14, s15, s11
    fe46:	eea6 5a27 	vfma.f32	s10, s12, s15
    fe4a:	eee7 6a27 	vfma.f32	s13, s14, s15
    fe4e:	eddf 5a17 	vldr	s11, [pc, #92]	; feac <__ieee754_asinf+0x1f4>
    fe52:	ed9f 6a15 	vldr	s12, [pc, #84]	; fea8 <__ieee754_asinf+0x1f0>
    fe56:	ed9f 7a11 	vldr	s14, [pc, #68]	; fe9c <__ieee754_asinf+0x1e4>
    fe5a:	eee5 5a27 	vfma.f32	s11, s10, s15
    fe5e:	eea6 6aa7 	vfma.f32	s12, s13, s15
    fe62:	eea5 7aa7 	vfma.f32	s14, s11, s15
    fe66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    fe6a:	eee6 6a27 	vfma.f32	s13, s12, s15
    fe6e:	ee67 7a27 	vmul.f32	s15, s14, s15
    fe72:	eeb0 7a40 	vmov.f32	s14, s0
    fe76:	ee87 6aa6 	vdiv.f32	s12, s15, s13
    fe7a:	eea0 7a06 	vfma.f32	s14, s0, s12
    fe7e:	eeb0 0a47 	vmov.f32	s0, s14
    fe82:	bd38      	pop	{r3, r4, r5, pc}
    fe84:	7149f2ca 	.word	0x7149f2ca
    fe88:	3a4f7f04 	.word	0x3a4f7f04
    fe8c:	3811ef08 	.word	0x3811ef08
    fe90:	3d9dc62e 	.word	0x3d9dc62e
    fe94:	bd241146 	.word	0xbd241146
    fe98:	3e4e0aa8 	.word	0x3e4e0aa8
    fe9c:	3e2aaaab 	.word	0x3e2aaaab
    fea0:	bf303361 	.word	0xbf303361
    fea4:	4001572d 	.word	0x4001572d
    fea8:	c019d139 	.word	0xc019d139
    feac:	bea6b090 	.word	0xbea6b090
    feb0:	3f799999 	.word	0x3f799999
    feb4:	b33bbd2e 	.word	0xb33bbd2e
    feb8:	3f490fdb 	.word	0x3f490fdb
    febc:	3fc90fdb 	.word	0x3fc90fdb
    fec0:	333bbd2e 	.word	0x333bbd2e

0000fec4 <__ieee754_atan2f>:
    fec4:	b510      	push	{r4, lr}
    fec6:	b082      	sub	sp, #8
    fec8:	edcd 0a01 	vstr	s1, [sp, #4]
    fecc:	9b01      	ldr	r3, [sp, #4]
    fece:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    fed2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    fed6:	eef0 7a40 	vmov.f32	s15, s0
    feda:	dc30      	bgt.n	ff3e <__ieee754_atan2f+0x7a>
    fedc:	ee10 0a10 	vmov	r0, s0
    fee0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    fee4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    fee8:	dc29      	bgt.n	ff3e <__ieee754_atan2f+0x7a>
    feea:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
    feee:	d040      	beq.n	ff72 <__ieee754_atan2f+0xae>
    fef0:	179c      	asrs	r4, r3, #30
    fef2:	f004 0402 	and.w	r4, r4, #2
    fef6:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    fefa:	b331      	cbz	r1, ff4a <__ieee754_atan2f+0x86>
    fefc:	b372      	cbz	r2, ff5c <__ieee754_atan2f+0x98>
    fefe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    ff02:	d03e      	beq.n	ff82 <__ieee754_atan2f+0xbe>
    ff04:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    ff08:	d028      	beq.n	ff5c <__ieee754_atan2f+0x98>
    ff0a:	1a89      	subs	r1, r1, r2
    ff0c:	f1b1 5ff4 	cmp.w	r1, #511705088	; 0x1e800000
    ff10:	ea4f 52e1 	mov.w	r2, r1, asr #23
    ff14:	da32      	bge.n	ff7c <__ieee754_atan2f+0xb8>
    ff16:	2b00      	cmp	r3, #0
    ff18:	da40      	bge.n	ff9c <__ieee754_atan2f+0xd8>
    ff1a:	323c      	adds	r2, #60	; 0x3c
    ff1c:	da3e      	bge.n	ff9c <__ieee754_atan2f+0xd8>
    ff1e:	ed9f 0a33 	vldr	s0, [pc, #204]	; ffec <__ieee754_atan2f+0x128>
    ff22:	2c01      	cmp	r4, #1
    ff24:	d04c      	beq.n	ffc0 <__ieee754_atan2f+0xfc>
    ff26:	2c02      	cmp	r4, #2
    ff28:	d041      	beq.n	ffae <__ieee754_atan2f+0xea>
    ff2a:	b164      	cbz	r4, ff46 <__ieee754_atan2f+0x82>
    ff2c:	ed9f 7a30 	vldr	s14, [pc, #192]	; fff0 <__ieee754_atan2f+0x12c>
    ff30:	eddf 7a30 	vldr	s15, [pc, #192]	; fff4 <__ieee754_atan2f+0x130>
    ff34:	ee30 0a07 	vadd.f32	s0, s0, s14
    ff38:	ee30 0a67 	vsub.f32	s0, s0, s15
    ff3c:	e003      	b.n	ff46 <__ieee754_atan2f+0x82>
    ff3e:	ed9d 7a01 	vldr	s14, [sp, #4]
    ff42:	ee37 0a27 	vadd.f32	s0, s14, s15
    ff46:	b002      	add	sp, #8
    ff48:	bd10      	pop	{r4, pc}
    ff4a:	2c02      	cmp	r4, #2
    ff4c:	d00e      	beq.n	ff6c <__ieee754_atan2f+0xa8>
    ff4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; fff8 <__ieee754_atan2f+0x134>
    ff52:	2c03      	cmp	r4, #3
    ff54:	fe07 0a00 	vseleq.f32	s0, s14, s0
    ff58:	b002      	add	sp, #8
    ff5a:	bd10      	pop	{r4, pc}
    ff5c:	ed9f 0a27 	vldr	s0, [pc, #156]	; fffc <__ieee754_atan2f+0x138>
    ff60:	eddf 7a27 	vldr	s15, [pc, #156]	; 10000 <__ieee754_atan2f+0x13c>
    ff64:	2800      	cmp	r0, #0
    ff66:	fe20 0a27 	vselge.f32	s0, s0, s15
    ff6a:	e7ec      	b.n	ff46 <__ieee754_atan2f+0x82>
    ff6c:	ed9f 0a21 	vldr	s0, [pc, #132]	; fff4 <__ieee754_atan2f+0x130>
    ff70:	e7e9      	b.n	ff46 <__ieee754_atan2f+0x82>
    ff72:	b002      	add	sp, #8
    ff74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff78:	f000 b84a 	b.w	10010 <atanf>
    ff7c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; fffc <__ieee754_atan2f+0x138>
    ff80:	e7cf      	b.n	ff22 <__ieee754_atan2f+0x5e>
    ff82:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    ff86:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    ff8a:	d020      	beq.n	ffce <__ieee754_atan2f+0x10a>
    ff8c:	2c02      	cmp	r4, #2
    ff8e:	d826      	bhi.n	ffde <__ieee754_atan2f+0x11a>
    ff90:	4b1c      	ldr	r3, [pc, #112]	; (10004 <__ieee754_atan2f+0x140>)
    ff92:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ff96:	ed93 0a00 	vldr	s0, [r3]
    ff9a:	e7d4      	b.n	ff46 <__ieee754_atan2f+0x82>
    ff9c:	ed9d 7a01 	vldr	s14, [sp, #4]
    ffa0:	ee87 0a87 	vdiv.f32	s0, s15, s14
    ffa4:	f7ff fccc 	bl	f940 <fabsf>
    ffa8:	f000 f832 	bl	10010 <atanf>
    ffac:	e7b9      	b.n	ff22 <__ieee754_atan2f+0x5e>
    ffae:	ed9f 7a10 	vldr	s14, [pc, #64]	; fff0 <__ieee754_atan2f+0x12c>
    ffb2:	eddf 7a10 	vldr	s15, [pc, #64]	; fff4 <__ieee754_atan2f+0x130>
    ffb6:	ee30 0a07 	vadd.f32	s0, s0, s14
    ffba:	ee37 0ac0 	vsub.f32	s0, s15, s0
    ffbe:	e7c2      	b.n	ff46 <__ieee754_atan2f+0x82>
    ffc0:	ee10 3a10 	vmov	r3, s0
    ffc4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    ffc8:	ee00 3a10 	vmov	s0, r3
    ffcc:	e7bb      	b.n	ff46 <__ieee754_atan2f+0x82>
    ffce:	2c02      	cmp	r4, #2
    ffd0:	d808      	bhi.n	ffe4 <__ieee754_atan2f+0x120>
    ffd2:	4b0d      	ldr	r3, [pc, #52]	; (10008 <__ieee754_atan2f+0x144>)
    ffd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ffd8:	ed93 0a00 	vldr	s0, [r3]
    ffdc:	e7b3      	b.n	ff46 <__ieee754_atan2f+0x82>
    ffde:	ed9f 0a03 	vldr	s0, [pc, #12]	; ffec <__ieee754_atan2f+0x128>
    ffe2:	e7b0      	b.n	ff46 <__ieee754_atan2f+0x82>
    ffe4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1000c <__ieee754_atan2f+0x148>
    ffe8:	e7ad      	b.n	ff46 <__ieee754_atan2f+0x82>
    ffea:	bf00      	nop
    ffec:	00000000 	.word	0x00000000
    fff0:	33bbbd2e 	.word	0x33bbbd2e
    fff4:	40490fdb 	.word	0x40490fdb
    fff8:	c0490fdb 	.word	0xc0490fdb
    fffc:	3fc90fdb 	.word	0x3fc90fdb
   10000:	bfc90fdb 	.word	0xbfc90fdb
   10004:	20001c74 	.word	0x20001c74
   10008:	20001c68 	.word	0x20001c68
   1000c:	3f490fdb 	.word	0x3f490fdb

00010010 <atanf>:
   10010:	b538      	push	{r3, r4, r5, lr}
   10012:	ee10 5a10 	vmov	r5, s0
   10016:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
   1001a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
   1001e:	eef0 7a40 	vmov.f32	s15, s0
   10022:	db0a      	blt.n	1003a <atanf+0x2a>
   10024:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
   10028:	dc58      	bgt.n	100dc <atanf+0xcc>
   1002a:	eddf 7a51 	vldr	s15, [pc, #324]	; 10170 <atanf+0x160>
   1002e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 10174 <atanf+0x164>
   10032:	2d00      	cmp	r5, #0
   10034:	fe37 0a87 	vselgt.f32	s0, s15, s14
   10038:	bd38      	pop	{r3, r4, r5, pc}
   1003a:	4b4f      	ldr	r3, [pc, #316]	; (10178 <atanf+0x168>)
   1003c:	429c      	cmp	r4, r3
   1003e:	dc5c      	bgt.n	100fa <atanf+0xea>
   10040:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
   10044:	db4d      	blt.n	100e2 <atanf+0xd2>
   10046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1004a:	ee27 6aa7 	vmul.f32	s12, s15, s15
   1004e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1017c <atanf+0x16c>
   10052:	eddf 5a4b 	vldr	s11, [pc, #300]	; 10180 <atanf+0x170>
   10056:	eddf 4a4b 	vldr	s9, [pc, #300]	; 10184 <atanf+0x174>
   1005a:	ed9f 5a4b 	vldr	s10, [pc, #300]	; 10188 <atanf+0x178>
   1005e:	ed9f 4a4b 	vldr	s8, [pc, #300]	; 1018c <atanf+0x17c>
   10062:	ee26 7a06 	vmul.f32	s14, s12, s12
   10066:	1c5a      	adds	r2, r3, #1
   10068:	eee7 5a26 	vfma.f32	s11, s14, s13
   1006c:	eddf 6a48 	vldr	s13, [pc, #288]	; 10190 <atanf+0x180>
   10070:	eea5 5a87 	vfma.f32	s10, s11, s14
   10074:	eee7 6a24 	vfma.f32	s13, s14, s9
   10078:	eddf 5a46 	vldr	s11, [pc, #280]	; 10194 <atanf+0x184>
   1007c:	eddf 4a46 	vldr	s9, [pc, #280]	; 10198 <atanf+0x188>
   10080:	eee6 5a87 	vfma.f32	s11, s13, s14
   10084:	eea5 4a07 	vfma.f32	s8, s10, s14
   10088:	ed9f 5a44 	vldr	s10, [pc, #272]	; 1019c <atanf+0x18c>
   1008c:	eddf 6a44 	vldr	s13, [pc, #272]	; 101a0 <atanf+0x190>
   10090:	eea5 5a87 	vfma.f32	s10, s11, s14
   10094:	eee4 4a07 	vfma.f32	s9, s8, s14
   10098:	eddf 5a42 	vldr	s11, [pc, #264]	; 101a4 <atanf+0x194>
   1009c:	eee4 6a87 	vfma.f32	s13, s9, s14
   100a0:	eee5 5a07 	vfma.f32	s11, s10, s14
   100a4:	ee66 6a86 	vmul.f32	s13, s13, s12
   100a8:	ee65 5a87 	vmul.f32	s11, s11, s14
   100ac:	d03a      	beq.n	10124 <atanf+0x114>
   100ae:	4a3e      	ldr	r2, [pc, #248]	; (101a8 <atanf+0x198>)
   100b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   100b4:	ee76 6aa5 	vadd.f32	s13, s13, s11
   100b8:	ed92 7a00 	vldr	s14, [r2]
   100bc:	4a3b      	ldr	r2, [pc, #236]	; (101ac <atanf+0x19c>)
   100be:	ee96 7aa7 	vfnms.f32	s14, s13, s15
   100c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   100c6:	2d00      	cmp	r5, #0
   100c8:	edd3 6a00 	vldr	s13, [r3]
   100cc:	ee77 7a67 	vsub.f32	s15, s14, s15
   100d0:	ee36 0ae7 	vsub.f32	s0, s13, s15
   100d4:	dab0      	bge.n	10038 <atanf+0x28>
   100d6:	eeb1 0a40 	vneg.f32	s0, s0
   100da:	bd38      	pop	{r3, r4, r5, pc}
   100dc:	ee30 0a00 	vadd.f32	s0, s0, s0
   100e0:	bd38      	pop	{r3, r4, r5, pc}
   100e2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 101b0 <atanf+0x1a0>
   100e6:	ee30 7a07 	vadd.f32	s14, s0, s14
   100ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   100ee:	eeb4 7ae6 	vcmpe.f32	s14, s13
   100f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   100f6:	dda6      	ble.n	10046 <atanf+0x36>
   100f8:	bd38      	pop	{r3, r4, r5, pc}
   100fa:	f7ff fc21 	bl	f940 <fabsf>
   100fe:	4b2d      	ldr	r3, [pc, #180]	; (101b4 <atanf+0x1a4>)
   10100:	429c      	cmp	r4, r3
   10102:	dc16      	bgt.n	10132 <atanf+0x122>
   10104:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
   10108:	429c      	cmp	r4, r3
   1010a:	dc27      	bgt.n	1015c <atanf+0x14c>
   1010c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   10110:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   10114:	eea0 7a27 	vfma.f32	s14, s0, s15
   10118:	2300      	movs	r3, #0
   1011a:	ee30 0a27 	vadd.f32	s0, s0, s15
   1011e:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10122:	e792      	b.n	1004a <atanf+0x3a>
   10124:	ee76 6aa5 	vadd.f32	s13, s13, s11
   10128:	eee6 7ae7 	vfms.f32	s15, s13, s15
   1012c:	eeb0 0a67 	vmov.f32	s0, s15
   10130:	bd38      	pop	{r3, r4, r5, pc}
   10132:	4b21      	ldr	r3, [pc, #132]	; (101b8 <atanf+0x1a8>)
   10134:	429c      	cmp	r4, r3
   10136:	dc0b      	bgt.n	10150 <atanf+0x140>
   10138:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   1013c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   10140:	eea0 7a27 	vfma.f32	s14, s0, s15
   10144:	2302      	movs	r3, #2
   10146:	ee30 0a67 	vsub.f32	s0, s0, s15
   1014a:	eec0 7a07 	vdiv.f32	s15, s0, s14
   1014e:	e77c      	b.n	1004a <atanf+0x3a>
   10150:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   10154:	eec7 7a00 	vdiv.f32	s15, s14, s0
   10158:	2303      	movs	r3, #3
   1015a:	e776      	b.n	1004a <atanf+0x3a>
   1015c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   10160:	ee30 7a67 	vsub.f32	s14, s0, s15
   10164:	ee30 0a27 	vadd.f32	s0, s0, s15
   10168:	2301      	movs	r3, #1
   1016a:	eec7 7a00 	vdiv.f32	s15, s14, s0
   1016e:	e76c      	b.n	1004a <atanf+0x3a>
   10170:	3fc90fdb 	.word	0x3fc90fdb
   10174:	bfc90fdb 	.word	0xbfc90fdb
   10178:	3edfffff 	.word	0x3edfffff
   1017c:	3c8569d7 	.word	0x3c8569d7
   10180:	3d4bda59 	.word	0x3d4bda59
   10184:	bd15a221 	.word	0xbd15a221
   10188:	3d886b35 	.word	0x3d886b35
   1018c:	3dba2e6e 	.word	0x3dba2e6e
   10190:	bd6ef16b 	.word	0xbd6ef16b
   10194:	bd9d8795 	.word	0xbd9d8795
   10198:	3e124925 	.word	0x3e124925
   1019c:	bde38e38 	.word	0xbde38e38
   101a0:	3eaaaaab 	.word	0x3eaaaaab
   101a4:	be4ccccd 	.word	0xbe4ccccd
   101a8:	200028c4 	.word	0x200028c4
   101ac:	200028b4 	.word	0x200028b4
   101b0:	7149f2ca 	.word	0x7149f2ca
   101b4:	3f97ffff 	.word	0x3f97ffff
   101b8:	401bffff 	.word	0x401bffff
   101bc:	00000000 	.word	0x00000000

000101c0 <__ieee754_rem_pio2>:
   101c0:	b570      	push	{r4, r5, r6, lr}
   101c2:	ec53 2b10 	vmov	r2, r3, d0
   101c6:	499c      	ldr	r1, [pc, #624]	; (10438 <__ieee754_rem_pio2+0x278>)
   101c8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   101cc:	428d      	cmp	r5, r1
   101ce:	b088      	sub	sp, #32
   101d0:	4604      	mov	r4, r0
   101d2:	dd6a      	ble.n	102aa <__ieee754_rem_pio2+0xea>
   101d4:	4999      	ldr	r1, [pc, #612]	; (1043c <__ieee754_rem_pio2+0x27c>)
   101d6:	428d      	cmp	r5, r1
   101d8:	461e      	mov	r6, r3
   101da:	dc1b      	bgt.n	10214 <__ieee754_rem_pio2+0x54>
   101dc:	2b00      	cmp	r3, #0
   101de:	ed9f 7b86 	vldr	d7, [pc, #536]	; 103f8 <__ieee754_rem_pio2+0x238>
   101e2:	f340 80eb 	ble.w	103bc <__ieee754_rem_pio2+0x1fc>
   101e6:	ee30 7b47 	vsub.f64	d7, d0, d7
   101ea:	f5a1 211b 	sub.w	r1, r1, #634880	; 0x9b000
   101ee:	f5a1 61f0 	sub.w	r1, r1, #1920	; 0x780
   101f2:	428d      	cmp	r5, r1
   101f4:	d06a      	beq.n	102cc <__ieee754_rem_pio2+0x10c>
   101f6:	ed9f 6b82 	vldr	d6, [pc, #520]	; 10400 <__ieee754_rem_pio2+0x240>
   101fa:	2001      	movs	r0, #1
   101fc:	ee37 5b46 	vsub.f64	d5, d7, d6
   10200:	ee37 7b45 	vsub.f64	d7, d7, d5
   10204:	ed84 5b00 	vstr	d5, [r4]
   10208:	ee37 7b46 	vsub.f64	d7, d7, d6
   1020c:	ed84 7b02 	vstr	d7, [r4, #8]
   10210:	b008      	add	sp, #32
   10212:	bd70      	pop	{r4, r5, r6, pc}
   10214:	498a      	ldr	r1, [pc, #552]	; (10440 <__ieee754_rem_pio2+0x280>)
   10216:	428d      	cmp	r5, r1
   10218:	dd60      	ble.n	102dc <__ieee754_rem_pio2+0x11c>
   1021a:	498a      	ldr	r1, [pc, #552]	; (10444 <__ieee754_rem_pio2+0x284>)
   1021c:	428d      	cmp	r5, r1
   1021e:	dc4d      	bgt.n	102bc <__ieee754_rem_pio2+0xfc>
   10220:	152a      	asrs	r2, r5, #20
   10222:	ee10 0a10 	vmov	r0, s0
   10226:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
   1022a:	eba5 5102 	sub.w	r1, r5, r2, lsl #20
   1022e:	ec41 0b17 	vmov	d7, r0, r1
   10232:	ed9f 5b75 	vldr	d5, [pc, #468]	; 10408 <__ieee754_rem_pio2+0x248>
   10236:	eebd 6bc7 	vcvt.s32.f64	s12, d7
   1023a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
   1023e:	ee37 7b46 	vsub.f64	d7, d7, d6
   10242:	ee27 7b05 	vmul.f64	d7, d7, d5
   10246:	eefd 4bc7 	vcvt.s32.f64	s9, d7
   1024a:	ed8d 6b02 	vstr	d6, [sp, #8]
   1024e:	eeb8 6be4 	vcvt.f64.s32	d6, s9
   10252:	ee37 7b46 	vsub.f64	d7, d7, d6
   10256:	ee27 7b05 	vmul.f64	d7, d7, d5
   1025a:	eeb5 7b40 	vcmp.f64	d7, #0.0
   1025e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10262:	ed8d 6b04 	vstr	d6, [sp, #16]
   10266:	ed8d 7b06 	vstr	d7, [sp, #24]
   1026a:	f040 8096 	bne.w	1039a <__ieee754_rem_pio2+0x1da>
   1026e:	ee14 3a90 	vmov	r3, s9
   10272:	2b00      	cmp	r3, #0
   10274:	bf0c      	ite	eq
   10276:	2301      	moveq	r3, #1
   10278:	2302      	movne	r3, #2
   1027a:	4973      	ldr	r1, [pc, #460]	; (10448 <__ieee754_rem_pio2+0x288>)
   1027c:	9101      	str	r1, [sp, #4]
   1027e:	2102      	movs	r1, #2
   10280:	9100      	str	r1, [sp, #0]
   10282:	a802      	add	r0, sp, #8
   10284:	4621      	mov	r1, r4
   10286:	f000 f8e7 	bl	10458 <__kernel_rem_pio2>
   1028a:	2e00      	cmp	r6, #0
   1028c:	dac0      	bge.n	10210 <__ieee754_rem_pio2+0x50>
   1028e:	ed94 6b00 	vldr	d6, [r4]
   10292:	ed94 7b02 	vldr	d7, [r4, #8]
   10296:	eeb1 6b46 	vneg.f64	d6, d6
   1029a:	eeb1 7b47 	vneg.f64	d7, d7
   1029e:	ed84 6b00 	vstr	d6, [r4]
   102a2:	ed84 7b02 	vstr	d7, [r4, #8]
   102a6:	4240      	negs	r0, r0
   102a8:	e7b2      	b.n	10210 <__ieee754_rem_pio2+0x50>
   102aa:	2000      	movs	r0, #0
   102ac:	2100      	movs	r1, #0
   102ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
   102b2:	2000      	movs	r0, #0
   102b4:	ed84 0b00 	vstr	d0, [r4]
   102b8:	b008      	add	sp, #32
   102ba:	bd70      	pop	{r4, r5, r6, pc}
   102bc:	ee30 7b40 	vsub.f64	d7, d0, d0
   102c0:	2000      	movs	r0, #0
   102c2:	ed84 7b02 	vstr	d7, [r4, #8]
   102c6:	ed84 7b00 	vstr	d7, [r4]
   102ca:	e7a1      	b.n	10210 <__ieee754_rem_pio2+0x50>
   102cc:	ed9f 5b50 	vldr	d5, [pc, #320]	; 10410 <__ieee754_rem_pio2+0x250>
   102d0:	ed9f 6b51 	vldr	d6, [pc, #324]	; 10418 <__ieee754_rem_pio2+0x258>
   102d4:	ee37 7b45 	vsub.f64	d7, d7, d5
   102d8:	2001      	movs	r0, #1
   102da:	e78f      	b.n	101fc <__ieee754_rem_pio2+0x3c>
   102dc:	f000 fc04 	bl	10ae8 <fabs>
   102e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   102e4:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 10420 <__ieee754_rem_pio2+0x260>
   102e8:	eea0 7b05 	vfma.f64	d7, d0, d5
   102ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
   102f0:	ed9f 3b41 	vldr	d3, [pc, #260]	; 103f8 <__ieee754_rem_pio2+0x238>
   102f4:	ee17 0a90 	vmov	r0, s15
   102f8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 10400 <__ieee754_rem_pio2+0x240>
   102fc:	281f      	cmp	r0, #31
   102fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   10302:	eeb1 4b45 	vneg.f64	d4, d5
   10306:	eea5 0b43 	vfms.f64	d0, d5, d3
   1030a:	ee25 7b06 	vmul.f64	d7, d5, d6
   1030e:	dc1c      	bgt.n	1034a <__ieee754_rem_pio2+0x18a>
   10310:	4b4e      	ldr	r3, [pc, #312]	; (1044c <__ieee754_rem_pio2+0x28c>)
   10312:	1e42      	subs	r2, r0, #1
   10314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   10318:	42ab      	cmp	r3, r5
   1031a:	d016      	beq.n	1034a <__ieee754_rem_pio2+0x18a>
   1031c:	ee30 6b47 	vsub.f64	d6, d0, d7
   10320:	ed84 6b00 	vstr	d6, [r4]
   10324:	ee30 0b46 	vsub.f64	d0, d0, d6
   10328:	ee30 0b47 	vsub.f64	d0, d0, d7
   1032c:	2e00      	cmp	r6, #0
   1032e:	ed84 0b02 	vstr	d0, [r4, #8]
   10332:	f6bf af6d 	bge.w	10210 <__ieee754_rem_pio2+0x50>
   10336:	eeb1 6b46 	vneg.f64	d6, d6
   1033a:	eeb1 0b40 	vneg.f64	d0, d0
   1033e:	ed84 6b00 	vstr	d6, [r4]
   10342:	ed84 0b02 	vstr	d0, [r4, #8]
   10346:	4240      	negs	r0, r0
   10348:	e762      	b.n	10210 <__ieee754_rem_pio2+0x50>
   1034a:	ee30 6b47 	vsub.f64	d6, d0, d7
   1034e:	ee16 3a90 	vmov	r3, s13
   10352:	f3c3 530a 	ubfx	r3, r3, #20, #11
   10356:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
   1035a:	2b10      	cmp	r3, #16
   1035c:	ea4f 5225 	mov.w	r2, r5, asr #20
   10360:	ddde      	ble.n	10320 <__ieee754_rem_pio2+0x160>
   10362:	eeb0 3b40 	vmov.f64	d3, d0
   10366:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 10410 <__ieee754_rem_pio2+0x250>
   1036a:	ed9f 2b2b 	vldr	d2, [pc, #172]	; 10418 <__ieee754_rem_pio2+0x258>
   1036e:	eea4 3b06 	vfma.f64	d3, d4, d6
   10372:	ee30 7b43 	vsub.f64	d7, d0, d3
   10376:	eea4 7b06 	vfma.f64	d7, d4, d6
   1037a:	ee95 7b02 	vfnms.f64	d7, d5, d2
   1037e:	ee33 6b47 	vsub.f64	d6, d3, d7
   10382:	ee16 3a90 	vmov	r3, s13
   10386:	f3c3 530a 	ubfx	r3, r3, #20, #11
   1038a:	1ad2      	subs	r2, r2, r3
   1038c:	2a31      	cmp	r2, #49	; 0x31
   1038e:	dc06      	bgt.n	1039e <__ieee754_rem_pio2+0x1de>
   10390:	eeb0 0b43 	vmov.f64	d0, d3
   10394:	ed84 6b00 	vstr	d6, [r4]
   10398:	e7c4      	b.n	10324 <__ieee754_rem_pio2+0x164>
   1039a:	2303      	movs	r3, #3
   1039c:	e76d      	b.n	1027a <__ieee754_rem_pio2+0xba>
   1039e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 10428 <__ieee754_rem_pio2+0x268>
   103a2:	eeb0 0b43 	vmov.f64	d0, d3
   103a6:	ed9f 2b22 	vldr	d2, [pc, #136]	; 10430 <__ieee754_rem_pio2+0x270>
   103aa:	eea4 0b06 	vfma.f64	d0, d4, d6
   103ae:	ee33 7b40 	vsub.f64	d7, d3, d0
   103b2:	eea4 7b06 	vfma.f64	d7, d4, d6
   103b6:	ee95 7b02 	vfnms.f64	d7, d5, d2
   103ba:	e7af      	b.n	1031c <__ieee754_rem_pio2+0x15c>
   103bc:	4924      	ldr	r1, [pc, #144]	; (10450 <__ieee754_rem_pio2+0x290>)
   103be:	ee30 7b07 	vadd.f64	d7, d0, d7
   103c2:	428d      	cmp	r5, r1
   103c4:	d00e      	beq.n	103e4 <__ieee754_rem_pio2+0x224>
   103c6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 10400 <__ieee754_rem_pio2+0x240>
   103ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   103ce:	ee37 5b06 	vadd.f64	d5, d7, d6
   103d2:	ee37 7b45 	vsub.f64	d7, d7, d5
   103d6:	ed84 5b00 	vstr	d5, [r4]
   103da:	ee37 7b06 	vadd.f64	d7, d7, d6
   103de:	ed84 7b02 	vstr	d7, [r4, #8]
   103e2:	e715      	b.n	10210 <__ieee754_rem_pio2+0x50>
   103e4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 10410 <__ieee754_rem_pio2+0x250>
   103e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 10418 <__ieee754_rem_pio2+0x258>
   103ec:	ee37 7b05 	vadd.f64	d7, d7, d5
   103f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   103f4:	e7eb      	b.n	103ce <__ieee754_rem_pio2+0x20e>
   103f6:	bf00      	nop
   103f8:	54400000 	.word	0x54400000
   103fc:	3ff921fb 	.word	0x3ff921fb
   10400:	1a626331 	.word	0x1a626331
   10404:	3dd0b461 	.word	0x3dd0b461
   10408:	00000000 	.word	0x00000000
   1040c:	41700000 	.word	0x41700000
   10410:	1a600000 	.word	0x1a600000
   10414:	3dd0b461 	.word	0x3dd0b461
   10418:	2e037073 	.word	0x2e037073
   1041c:	3ba3198a 	.word	0x3ba3198a
   10420:	6dc9c883 	.word	0x6dc9c883
   10424:	3fe45f30 	.word	0x3fe45f30
   10428:	2e000000 	.word	0x2e000000
   1042c:	3ba3198a 	.word	0x3ba3198a
   10430:	252049c1 	.word	0x252049c1
   10434:	397b839a 	.word	0x397b839a
   10438:	3fe921fb 	.word	0x3fe921fb
   1043c:	4002d97b 	.word	0x4002d97b
   10440:	413921fb 	.word	0x413921fb
   10444:	7fefffff 	.word	0x7fefffff
   10448:	20003040 	.word	0x20003040
   1044c:	20002c88 	.word	0x20002c88
   10450:	3ff921fb 	.word	0x3ff921fb
   10454:	00000000 	.word	0x00000000

00010458 <__kernel_rem_pio2>:
   10458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1045c:	ed2d 8b08 	vpush	{d8-d11}
   10460:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   10464:	461c      	mov	r4, r3
   10466:	9304      	str	r3, [sp, #16]
   10468:	9107      	str	r1, [sp, #28]
   1046a:	4bab      	ldr	r3, [pc, #684]	; (10718 <__kernel_rem_pio2+0x2c0>)
   1046c:	99a6      	ldr	r1, [sp, #664]	; 0x298
   1046e:	f112 0f14 	cmn.w	r2, #20
   10472:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   10476:	4682      	mov	sl, r0
   10478:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1047c:	f2c0 8299 	blt.w	109b2 <__kernel_rem_pio2+0x55a>
   10480:	49a6      	ldr	r1, [pc, #664]	; (1071c <__kernel_rem_pio2+0x2c4>)
   10482:	1ed3      	subs	r3, r2, #3
   10484:	fb81 0103 	smull	r0, r1, r1, r3
   10488:	17db      	asrs	r3, r3, #31
   1048a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1048e:	9303      	str	r3, [sp, #12]
   10490:	3301      	adds	r3, #1
   10492:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   10496:	00db      	lsls	r3, r3, #3
   10498:	18d3      	adds	r3, r2, r3
   1049a:	9306      	str	r3, [sp, #24]
   1049c:	9b03      	ldr	r3, [sp, #12]
   1049e:	eb15 0108 	adds.w	r1, r5, r8
   104a2:	eba3 0308 	sub.w	r3, r3, r8
   104a6:	d41a      	bmi.n	104de <__kernel_rem_pio2+0x86>
   104a8:	3101      	adds	r1, #1
   104aa:	ed9f 6b95 	vldr	d6, [pc, #596]	; 10700 <__kernel_rem_pio2+0x2a8>
   104ae:	98a7      	ldr	r0, [sp, #668]	; 0x29c
   104b0:	4419      	add	r1, r3
   104b2:	aa1c      	add	r2, sp, #112	; 0x70
   104b4:	e00a      	b.n	104cc <__kernel_rem_pio2+0x74>
   104b6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   104ba:	ee07 4a90 	vmov	s15, r4
   104be:	3301      	adds	r3, #1
   104c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   104c4:	428b      	cmp	r3, r1
   104c6:	eca2 7b02 	vstmia	r2!, {d7}
   104ca:	d008      	beq.n	104de <__kernel_rem_pio2+0x86>
   104cc:	2b00      	cmp	r3, #0
   104ce:	daf2      	bge.n	104b6 <__kernel_rem_pio2+0x5e>
   104d0:	eeb0 7b46 	vmov.f64	d7, d6
   104d4:	3301      	adds	r3, #1
   104d6:	428b      	cmp	r3, r1
   104d8:	eca2 7b02 	vstmia	r2!, {d7}
   104dc:	d1f6      	bne.n	104cc <__kernel_rem_pio2+0x74>
   104de:	2d00      	cmp	r5, #0
   104e0:	f2c0 82c9 	blt.w	10a76 <__kernel_rem_pio2+0x61e>
   104e4:	9b04      	ldr	r3, [sp, #16]
   104e6:	aa1c      	add	r2, sp, #112	; 0x70
   104e8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   104ec:	ae6c      	add	r6, sp, #432	; 0x1b0
   104ee:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   104f2:	4640      	mov	r0, r8
   104f4:	18ef      	adds	r7, r5, r3
   104f6:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
   104fa:	f1b8 0f00 	cmp.w	r8, #0
   104fe:	ed9f 7b80 	vldr	d7, [pc, #512]	; 10700 <__kernel_rem_pio2+0x2a8>
   10502:	db09      	blt.n	10518 <__kernel_rem_pio2+0xc0>
   10504:	4622      	mov	r2, r4
   10506:	4653      	mov	r3, sl
   10508:	ecb3 5b02 	vldmia	r3!, {d5}
   1050c:	ed32 6b02 	vldmdb	r2!, {d6}
   10510:	428b      	cmp	r3, r1
   10512:	eea5 7b06 	vfma.f64	d7, d5, d6
   10516:	d1f7      	bne.n	10508 <__kernel_rem_pio2+0xb0>
   10518:	3001      	adds	r0, #1
   1051a:	42b8      	cmp	r0, r7
   1051c:	eca6 7b02 	vstmia	r6!, {d7}
   10520:	f104 0408 	add.w	r4, r4, #8
   10524:	d1e9      	bne.n	104fa <__kernel_rem_pio2+0xa2>
   10526:	af08      	add	r7, sp, #32
   10528:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   1052c:	ed9f 9b76 	vldr	d9, [pc, #472]	; 10708 <__kernel_rem_pio2+0x2b0>
   10530:	ed9f 8b77 	vldr	d8, [pc, #476]	; 10710 <__kernel_rem_pio2+0x2b8>
   10534:	3b04      	subs	r3, #4
   10536:	f8dd b018 	ldr.w	fp, [sp, #24]
   1053a:	9305      	str	r3, [sp, #20]
   1053c:	eb0a 040c 	add.w	r4, sl, ip
   10540:	eb07 0985 	add.w	r9, r7, r5, lsl #2
   10544:	ae6c      	add	r6, sp, #432	; 0x1b0
   10546:	4629      	mov	r1, r5
   10548:	9501      	str	r5, [sp, #4]
   1054a:	ab94      	add	r3, sp, #592	; 0x250
   1054c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10550:	2900      	cmp	r1, #0
   10552:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   10556:	dd16      	ble.n	10586 <__kernel_rem_pio2+0x12e>
   10558:	eb06 03c1 	add.w	r3, r6, r1, lsl #3
   1055c:	463a      	mov	r2, r7
   1055e:	ee20 7b09 	vmul.f64	d7, d0, d9
   10562:	ed33 5b02 	vldmdb	r3!, {d5}
   10566:	eeb0 6b40 	vmov.f64	d6, d0
   1056a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1056e:	42b3      	cmp	r3, r6
   10570:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   10574:	eea7 6b48 	vfms.f64	d6, d7, d8
   10578:	eebd 6bc6 	vcvt.s32.f64	s12, d6
   1057c:	ee37 0b05 	vadd.f64	d0, d7, d5
   10580:	eca2 6a01 	vstmia	r2!, {s12}
   10584:	d1eb      	bne.n	1055e <__kernel_rem_pio2+0x106>
   10586:	4658      	mov	r0, fp
   10588:	9102      	str	r1, [sp, #8]
   1058a:	f000 fb41 	bl	10c10 <scalbn>
   1058e:	eeb0 ab40 	vmov.f64	d10, d0
   10592:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
   10596:	ee2a 0b00 	vmul.f64	d0, d10, d0
   1059a:	f000 fab1 	bl	10b00 <floor>
   1059e:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
   105a2:	eea0 ab47 	vfms.f64	d10, d0, d7
   105a6:	eebd bbca 	vcvt.s32.f64	s22, d10
   105aa:	f1bb 0f00 	cmp.w	fp, #0
   105ae:	eeb8 7bcb 	vcvt.f64.s32	d7, s22
   105b2:	9902      	ldr	r1, [sp, #8]
   105b4:	ee3a ab47 	vsub.f64	d10, d10, d7
   105b8:	dd74      	ble.n	106a4 <__kernel_rem_pio2+0x24c>
   105ba:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   105be:	f1cb 0318 	rsb	r3, fp, #24
   105c2:	f857 202e 	ldr.w	r2, [r7, lr, lsl #2]
   105c6:	fa42 fc03 	asr.w	ip, r2, r3
   105ca:	fa0c f303 	lsl.w	r3, ip, r3
   105ce:	1ad2      	subs	r2, r2, r3
   105d0:	f1cb 0017 	rsb	r0, fp, #23
   105d4:	ee1b 3a10 	vmov	r3, s22
   105d8:	fa42 f500 	asr.w	r5, r2, r0
   105dc:	4463      	add	r3, ip
   105de:	2d00      	cmp	r5, #0
   105e0:	f847 202e 	str.w	r2, [r7, lr, lsl #2]
   105e4:	ee0b 3a10 	vmov	s22, r3
   105e8:	dc64      	bgt.n	106b4 <__kernel_rem_pio2+0x25c>
   105ea:	eeb5 ab40 	vcmp.f64	d10, #0.0
   105ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   105f2:	f040 80c4 	bne.w	1077e <__kernel_rem_pio2+0x326>
   105f6:	9b01      	ldr	r3, [sp, #4]
   105f8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   105fc:	4573      	cmp	r3, lr
   105fe:	dc0d      	bgt.n	1061c <__kernel_rem_pio2+0x1c4>
   10600:	ea4f 0c81 	mov.w	ip, r1, lsl #2
   10604:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   10608:	2000      	movs	r0, #0
   1060a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1060e:	454b      	cmp	r3, r9
   10610:	ea40 0002 	orr.w	r0, r0, r2
   10614:	d1f9      	bne.n	1060a <__kernel_rem_pio2+0x1b2>
   10616:	2800      	cmp	r0, #0
   10618:	f040 80f2 	bne.w	10800 <__kernel_rem_pio2+0x3a8>
   1061c:	9b01      	ldr	r3, [sp, #4]
   1061e:	3b01      	subs	r3, #1
   10620:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   10624:	2b00      	cmp	r3, #0
   10626:	f040 80e6 	bne.w	107f6 <__kernel_rem_pio2+0x39e>
   1062a:	9b05      	ldr	r3, [sp, #20]
   1062c:	2501      	movs	r5, #1
   1062e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   10632:	3501      	adds	r5, #1
   10634:	2a00      	cmp	r2, #0
   10636:	d0fa      	beq.n	1062e <__kernel_rem_pio2+0x1d6>
   10638:	f101 0e01 	add.w	lr, r1, #1
   1063c:	440d      	add	r5, r1
   1063e:	4670      	mov	r0, lr
   10640:	9b04      	ldr	r3, [sp, #16]
   10642:	4419      	add	r1, r3
   10644:	9b03      	ldr	r3, [sp, #12]
   10646:	eb03 0c0e 	add.w	ip, r3, lr
   1064a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1064e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
   10650:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10654:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   10658:	ab1c      	add	r3, sp, #112	; 0x70
   1065a:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
   1065e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   10662:	ed9c 7a01 	vldr	s14, [ip, #4]
   10666:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1066a:	f1b8 0f00 	cmp.w	r8, #0
   1066e:	ed81 7b00 	vstr	d7, [r1]
   10672:	f10c 0c04 	add.w	ip, ip, #4
   10676:	460a      	mov	r2, r1
   10678:	ed9f 6b21 	vldr	d6, [pc, #132]	; 10700 <__kernel_rem_pio2+0x2a8>
   1067c:	f101 0108 	add.w	r1, r1, #8
   10680:	db09      	blt.n	10696 <__kernel_rem_pio2+0x23e>
   10682:	4653      	mov	r3, sl
   10684:	e001      	b.n	1068a <__kernel_rem_pio2+0x232>
   10686:	ed32 7b02 	vldmdb	r2!, {d7}
   1068a:	ecb3 5b02 	vldmia	r3!, {d5}
   1068e:	42a3      	cmp	r3, r4
   10690:	eea5 6b07 	vfma.f64	d6, d5, d7
   10694:	d1f7      	bne.n	10686 <__kernel_rem_pio2+0x22e>
   10696:	3001      	adds	r0, #1
   10698:	42a8      	cmp	r0, r5
   1069a:	ecae 6b02 	vstmia	lr!, {d6}
   1069e:	dde0      	ble.n	10662 <__kernel_rem_pio2+0x20a>
   106a0:	4629      	mov	r1, r5
   106a2:	e752      	b.n	1054a <__kernel_rem_pio2+0xf2>
   106a4:	f040 809d 	bne.w	107e2 <__kernel_rem_pio2+0x38a>
   106a8:	1e4b      	subs	r3, r1, #1
   106aa:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
   106ae:	15ed      	asrs	r5, r5, #23
   106b0:	2d00      	cmp	r5, #0
   106b2:	dd9a      	ble.n	105ea <__kernel_rem_pio2+0x192>
   106b4:	ee1b 3a10 	vmov	r3, s22
   106b8:	2900      	cmp	r1, #0
   106ba:	f103 0301 	add.w	r3, r3, #1
   106be:	ee0b 3a10 	vmov	s22, r3
   106c2:	f340 818c 	ble.w	109de <__kernel_rem_pio2+0x586>
   106c6:	683a      	ldr	r2, [r7, #0]
   106c8:	2a00      	cmp	r2, #0
   106ca:	f040 8082 	bne.w	107d2 <__kernel_rem_pio2+0x37a>
   106ce:	2901      	cmp	r1, #1
   106d0:	d02d      	beq.n	1072e <__kernel_rem_pio2+0x2d6>
   106d2:	463b      	mov	r3, r7
   106d4:	2001      	movs	r0, #1
   106d6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   106da:	2a00      	cmp	r2, #0
   106dc:	d07c      	beq.n	107d8 <__kernel_rem_pio2+0x380>
   106de:	1c43      	adds	r3, r0, #1
   106e0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
   106e4:	4299      	cmp	r1, r3
   106e6:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
   106ea:	dd1f      	ble.n	1072c <__kernel_rem_pio2+0x2d4>
   106ec:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
   106f0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   106f4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   106f8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   106fc:	e011      	b.n	10722 <__kernel_rem_pio2+0x2ca>
   106fe:	bf00      	nop
	...
   1070c:	3e700000 	.word	0x3e700000
   10710:	00000000 	.word	0x00000000
   10714:	41700000 	.word	0x41700000
   10718:	20002c5c 	.word	0x20002c5c
   1071c:	2aaaaaab 	.word	0x2aaaaaab
   10720:	681a      	ldr	r2, [r3, #0]
   10722:	1a82      	subs	r2, r0, r2
   10724:	f843 2b04 	str.w	r2, [r3], #4
   10728:	4563      	cmp	r3, ip
   1072a:	d1f9      	bne.n	10720 <__kernel_rem_pio2+0x2c8>
   1072c:	2201      	movs	r2, #1
   1072e:	f1bb 0f00 	cmp.w	fp, #0
   10732:	dd0d      	ble.n	10750 <__kernel_rem_pio2+0x2f8>
   10734:	f1bb 0f01 	cmp.w	fp, #1
   10738:	f000 8133 	beq.w	109a2 <__kernel_rem_pio2+0x54a>
   1073c:	f1bb 0f02 	cmp.w	fp, #2
   10740:	d106      	bne.n	10750 <__kernel_rem_pio2+0x2f8>
   10742:	1e48      	subs	r0, r1, #1
   10744:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   10748:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1074c:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   10750:	2d02      	cmp	r5, #2
   10752:	f47f af4a 	bne.w	105ea <__kernel_rem_pio2+0x192>
   10756:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1075a:	ee30 ab4a 	vsub.f64	d10, d0, d10
   1075e:	2a00      	cmp	r2, #0
   10760:	f43f af43 	beq.w	105ea <__kernel_rem_pio2+0x192>
   10764:	4658      	mov	r0, fp
   10766:	9102      	str	r1, [sp, #8]
   10768:	f000 fa52 	bl	10c10 <scalbn>
   1076c:	ee3a ab40 	vsub.f64	d10, d10, d0
   10770:	eeb5 ab40 	vcmp.f64	d10, #0.0
   10774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10778:	9902      	ldr	r1, [sp, #8]
   1077a:	f43f af3c 	beq.w	105f6 <__kernel_rem_pio2+0x19e>
   1077e:	9c06      	ldr	r4, [sp, #24]
   10780:	eeb0 0b4a 	vmov.f64	d0, d10
   10784:	4260      	negs	r0, r4
   10786:	46a8      	mov	r8, r5
   10788:	468b      	mov	fp, r1
   1078a:	9d01      	ldr	r5, [sp, #4]
   1078c:	f000 fa40 	bl	10c10 <scalbn>
   10790:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 10a98 <__kernel_rem_pio2+0x640>
   10794:	eeb4 0bc6 	vcmpe.f64	d0, d6
   10798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1079c:	f2c0 8147 	blt.w	10a2e <__kernel_rem_pio2+0x5d6>
   107a0:	ed9f 7bbf 	vldr	d7, [pc, #764]	; 10aa0 <__kernel_rem_pio2+0x648>
   107a4:	ee20 7b07 	vmul.f64	d7, d0, d7
   107a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   107ac:	f10b 0201 	add.w	r2, fp, #1
   107b0:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   107b4:	eea5 0b46 	vfms.f64	d0, d5, d6
   107b8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   107bc:	3418      	adds	r4, #24
   107be:	ee10 3a10 	vmov	r3, s0
   107c2:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   107c6:	ee17 3a10 	vmov	r3, s14
   107ca:	9406      	str	r4, [sp, #24]
   107cc:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
   107d0:	e02a      	b.n	10828 <__kernel_rem_pio2+0x3d0>
   107d2:	2301      	movs	r3, #1
   107d4:	2000      	movs	r0, #0
   107d6:	e783      	b.n	106e0 <__kernel_rem_pio2+0x288>
   107d8:	3001      	adds	r0, #1
   107da:	4288      	cmp	r0, r1
   107dc:	f47f af7b 	bne.w	106d6 <__kernel_rem_pio2+0x27e>
   107e0:	e7a5      	b.n	1072e <__kernel_rem_pio2+0x2d6>
   107e2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   107e6:	eeb4 abc7 	vcmpe.f64	d10, d7
   107ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   107ee:	f280 80e5 	bge.w	109bc <__kernel_rem_pio2+0x564>
   107f2:	2500      	movs	r5, #0
   107f4:	e6f9      	b.n	105ea <__kernel_rem_pio2+0x192>
   107f6:	f101 0e01 	add.w	lr, r1, #1
   107fa:	4670      	mov	r0, lr
   107fc:	4675      	mov	r5, lr
   107fe:	e71f      	b.n	10640 <__kernel_rem_pio2+0x1e8>
   10800:	9b06      	ldr	r3, [sp, #24]
   10802:	f1a3 0118 	sub.w	r1, r3, #24
   10806:	f857 302e 	ldr.w	r3, [r7, lr, lsl #2]
   1080a:	9106      	str	r1, [sp, #24]
   1080c:	46a8      	mov	r8, r5
   1080e:	4672      	mov	r2, lr
   10810:	9d01      	ldr	r5, [sp, #4]
   10812:	b94b      	cbnz	r3, 10828 <__kernel_rem_pio2+0x3d0>
   10814:	f1ac 0304 	sub.w	r3, ip, #4
   10818:	443b      	add	r3, r7
   1081a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
   1081e:	3a01      	subs	r2, #1
   10820:	3918      	subs	r1, #24
   10822:	2800      	cmp	r0, #0
   10824:	d0f9      	beq.n	1081a <__kernel_rem_pio2+0x3c2>
   10826:	9106      	str	r1, [sp, #24]
   10828:	9806      	ldr	r0, [sp, #24]
   1082a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   1082e:	9201      	str	r2, [sp, #4]
   10830:	f000 f9ee 	bl	10c10 <scalbn>
   10834:	9a01      	ldr	r2, [sp, #4]
   10836:	2a00      	cmp	r2, #0
   10838:	f2c0 8121 	blt.w	10a7e <__kernel_rem_pio2+0x626>
   1083c:	ed9f 6b98 	vldr	d6, [pc, #608]	; 10aa0 <__kernel_rem_pio2+0x648>
   10840:	f102 0c01 	add.w	ip, r2, #1
   10844:	a96c      	add	r1, sp, #432	; 0x1b0
   10846:	eb07 038c 	add.w	r3, r7, ip, lsl #2
   1084a:	ea4f 0ecc 	mov.w	lr, ip, lsl #3
   1084e:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
   10852:	ed33 7a01 	vldmdb	r3!, {s14}
   10856:	42bb      	cmp	r3, r7
   10858:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
   1085c:	ee27 7b00 	vmul.f64	d7, d7, d0
   10860:	ee20 0b06 	vmul.f64	d0, d0, d6
   10864:	ed21 7b02 	vstmdb	r1!, {d7}
   10868:	d1f3      	bne.n	10852 <__kernel_rem_pio2+0x3fa>
   1086a:	ed9f 4b8f 	vldr	d4, [pc, #572]	; 10aa8 <__kernel_rem_pio2+0x650>
   1086e:	f1ae 0308 	sub.w	r3, lr, #8
   10872:	a96c      	add	r1, sp, #432	; 0x1b0
   10874:	18ce      	adds	r6, r1, r3
   10876:	2400      	movs	r4, #0
   10878:	af44      	add	r7, sp, #272	; 0x110
   1087a:	2d00      	cmp	r5, #0
   1087c:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 10ab0 <__kernel_rem_pio2+0x658>
   10880:	db10      	blt.n	108a4 <__kernel_rem_pio2+0x44c>
   10882:	eeb0 6b44 	vmov.f64	d6, d4
   10886:	488c      	ldr	r0, [pc, #560]	; (10ab8 <__kernel_rem_pio2+0x660>)
   10888:	4631      	mov	r1, r6
   1088a:	2300      	movs	r3, #0
   1088c:	e003      	b.n	10896 <__kernel_rem_pio2+0x43e>
   1088e:	429c      	cmp	r4, r3
   10890:	db08      	blt.n	108a4 <__kernel_rem_pio2+0x44c>
   10892:	ecb0 6b02 	vldmia	r0!, {d6}
   10896:	ecb1 5b02 	vldmia	r1!, {d5}
   1089a:	3301      	adds	r3, #1
   1089c:	429d      	cmp	r5, r3
   1089e:	eea5 7b06 	vfma.f64	d7, d5, d6
   108a2:	daf4      	bge.n	1088e <__kernel_rem_pio2+0x436>
   108a4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   108a8:	4294      	cmp	r4, r2
   108aa:	ed83 7b00 	vstr	d7, [r3]
   108ae:	ea4f 01c4 	mov.w	r1, r4, lsl #3
   108b2:	f104 0301 	add.w	r3, r4, #1
   108b6:	f1a6 0608 	sub.w	r6, r6, #8
   108ba:	d001      	beq.n	108c0 <__kernel_rem_pio2+0x468>
   108bc:	461c      	mov	r4, r3
   108be:	e7dc      	b.n	1087a <__kernel_rem_pio2+0x422>
   108c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   108c2:	2b02      	cmp	r3, #2
   108c4:	dc1d      	bgt.n	10902 <__kernel_rem_pio2+0x4aa>
   108c6:	2b00      	cmp	r3, #0
   108c8:	f300 808b 	bgt.w	109e2 <__kernel_rem_pio2+0x58a>
   108cc:	d10f      	bne.n	108ee <__kernel_rem_pio2+0x496>
   108ce:	ed9f 7b78 	vldr	d7, [pc, #480]	; 10ab0 <__kernel_rem_pio2+0x658>
   108d2:	44be      	add	lr, r7
   108d4:	ed3e 6b02 	vldmdb	lr!, {d6}
   108d8:	4577      	cmp	r7, lr
   108da:	ee37 7b06 	vadd.f64	d7, d7, d6
   108de:	d1f9      	bne.n	108d4 <__kernel_rem_pio2+0x47c>
   108e0:	4643      	mov	r3, r8
   108e2:	b10b      	cbz	r3, 108e8 <__kernel_rem_pio2+0x490>
   108e4:	eeb1 7b47 	vneg.f64	d7, d7
   108e8:	9b07      	ldr	r3, [sp, #28]
   108ea:	ed83 7b00 	vstr	d7, [r3]
   108ee:	ee1b 3a10 	vmov	r3, s22
   108f2:	f003 0007 	and.w	r0, r3, #7
   108f6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   108fa:	ecbd 8b08 	vpop	{d8-d11}
   108fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10902:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10904:	2b03      	cmp	r3, #3
   10906:	d1f2      	bne.n	108ee <__kernel_rem_pio2+0x496>
   10908:	2a00      	cmp	r2, #0
   1090a:	f000 80e3 	beq.w	10ad4 <__kernel_rem_pio2+0x67c>
   1090e:	f102 5300 	add.w	r3, r2, #536870912	; 0x20000000
   10912:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   10916:	ed30 6b02 	vldmdb	r0!, {d6}
   1091a:	eeb0 5b47 	vmov.f64	d5, d7
   1091e:	4287      	cmp	r7, r0
   10920:	ee37 7b06 	vadd.f64	d7, d7, d6
   10924:	ee36 6b47 	vsub.f64	d6, d6, d7
   10928:	ed80 7b00 	vstr	d7, [r0]
   1092c:	ee36 6b05 	vadd.f64	d6, d6, d5
   10930:	ed80 6b02 	vstr	d6, [r0, #8]
   10934:	d1ef      	bne.n	10916 <__kernel_rem_pio2+0x4be>
   10936:	2a01      	cmp	r2, #1
   10938:	f340 80cc 	ble.w	10ad4 <__kernel_rem_pio2+0x67c>
   1093c:	4439      	add	r1, r7
   1093e:	ed91 6b00 	vldr	d6, [r1]
   10942:	00da      	lsls	r2, r3, #3
   10944:	a946      	add	r1, sp, #280	; 0x118
   10946:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1094a:	ed33 7b02 	vldmdb	r3!, {d7}
   1094e:	eeb0 5b46 	vmov.f64	d5, d6
   10952:	4299      	cmp	r1, r3
   10954:	ee36 6b07 	vadd.f64	d6, d6, d7
   10958:	ee37 7b46 	vsub.f64	d7, d7, d6
   1095c:	ed83 6b00 	vstr	d6, [r3]
   10960:	ee37 7b05 	vadd.f64	d7, d7, d5
   10964:	ed83 7b02 	vstr	d7, [r3, #8]
   10968:	d1ef      	bne.n	1094a <__kernel_rem_pio2+0x4f2>
   1096a:	ed9f 7b51 	vldr	d7, [pc, #324]	; 10ab0 <__kernel_rem_pio2+0x658>
   1096e:	f102 0308 	add.w	r3, r2, #8
   10972:	443b      	add	r3, r7
   10974:	f107 0210 	add.w	r2, r7, #16
   10978:	ed33 6b02 	vldmdb	r3!, {d6}
   1097c:	429a      	cmp	r2, r3
   1097e:	ee37 7b06 	vadd.f64	d7, d7, d6
   10982:	d1f9      	bne.n	10978 <__kernel_rem_pio2+0x520>
   10984:	4643      	mov	r3, r8
   10986:	2b00      	cmp	r3, #0
   10988:	d159      	bne.n	10a3e <__kernel_rem_pio2+0x5e6>
   1098a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1098e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   10992:	9c07      	ldr	r4, [sp, #28]
   10994:	ed84 7b04 	vstr	d7, [r4, #16]
   10998:	e9c4 0100 	strd	r0, r1, [r4]
   1099c:	e9c4 2302 	strd	r2, r3, [r4, #8]
   109a0:	e7a5      	b.n	108ee <__kernel_rem_pio2+0x496>
   109a2:	1e48      	subs	r0, r1, #1
   109a4:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   109a8:	f3c3 0316 	ubfx	r3, r3, #0, #23
   109ac:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
   109b0:	e6ce      	b.n	10750 <__kernel_rem_pio2+0x2f8>
   109b2:	2100      	movs	r1, #0
   109b4:	f06f 0317 	mvn.w	r3, #23
   109b8:	9103      	str	r1, [sp, #12]
   109ba:	e56d      	b.n	10498 <__kernel_rem_pio2+0x40>
   109bc:	ee1b 3a10 	vmov	r3, s22
   109c0:	2900      	cmp	r1, #0
   109c2:	f103 0301 	add.w	r3, r3, #1
   109c6:	ee0b 3a10 	vmov	s22, r3
   109ca:	bfc8      	it	gt
   109cc:	2502      	movgt	r5, #2
   109ce:	f73f ae7a 	bgt.w	106c6 <__kernel_rem_pio2+0x26e>
   109d2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   109d6:	ee37 ab4a 	vsub.f64	d10, d7, d10
   109da:	2502      	movs	r5, #2
   109dc:	e605      	b.n	105ea <__kernel_rem_pio2+0x192>
   109de:	2200      	movs	r2, #0
   109e0:	e6a5      	b.n	1072e <__kernel_rem_pio2+0x2d6>
   109e2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 10ab0 <__kernel_rem_pio2+0x658>
   109e6:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   109ea:	ed3c 6b02 	vldmdb	ip!, {d6}
   109ee:	4567      	cmp	r7, ip
   109f0:	ee37 7b06 	vadd.f64	d7, d7, d6
   109f4:	d1f9      	bne.n	109ea <__kernel_rem_pio2+0x592>
   109f6:	4643      	mov	r3, r8
   109f8:	ed97 6b00 	vldr	d6, [r7]
   109fc:	bb8b      	cbnz	r3, 10a62 <__kernel_rem_pio2+0x60a>
   109fe:	9b07      	ldr	r3, [sp, #28]
   10a00:	2a00      	cmp	r2, #0
   10a02:	ed83 7b00 	vstr	d7, [r3]
   10a06:	ee36 7b47 	vsub.f64	d7, d6, d7
   10a0a:	dd0c      	ble.n	10a26 <__kernel_rem_pio2+0x5ce>
   10a0c:	a946      	add	r1, sp, #280	; 0x118
   10a0e:	2301      	movs	r3, #1
   10a10:	ecb1 6b02 	vldmia	r1!, {d6}
   10a14:	3301      	adds	r3, #1
   10a16:	429a      	cmp	r2, r3
   10a18:	ee37 7b06 	vadd.f64	d7, d7, d6
   10a1c:	daf8      	bge.n	10a10 <__kernel_rem_pio2+0x5b8>
   10a1e:	4643      	mov	r3, r8
   10a20:	b10b      	cbz	r3, 10a26 <__kernel_rem_pio2+0x5ce>
   10a22:	eeb1 7b47 	vneg.f64	d7, d7
   10a26:	9b07      	ldr	r3, [sp, #28]
   10a28:	ed83 7b02 	vstr	d7, [r3, #8]
   10a2c:	e75f      	b.n	108ee <__kernel_rem_pio2+0x496>
   10a2e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
   10a32:	465a      	mov	r2, fp
   10a34:	ee10 3a10 	vmov	r3, s0
   10a38:	f847 302b 	str.w	r3, [r7, fp, lsl #2]
   10a3c:	e6f4      	b.n	10828 <__kernel_rem_pio2+0x3d0>
   10a3e:	ed97 5b00 	vldr	d5, [r7]
   10a42:	eeb1 7b47 	vneg.f64	d7, d7
   10a46:	ed97 6b02 	vldr	d6, [r7, #8]
   10a4a:	eeb1 5b45 	vneg.f64	d5, d5
   10a4e:	9b07      	ldr	r3, [sp, #28]
   10a50:	eeb1 6b46 	vneg.f64	d6, d6
   10a54:	ed83 5b00 	vstr	d5, [r3]
   10a58:	ed83 6b02 	vstr	d6, [r3, #8]
   10a5c:	ed83 7b04 	vstr	d7, [r3, #16]
   10a60:	e745      	b.n	108ee <__kernel_rem_pio2+0x496>
   10a62:	9b07      	ldr	r3, [sp, #28]
   10a64:	eeb1 5b47 	vneg.f64	d5, d7
   10a68:	2a00      	cmp	r2, #0
   10a6a:	ed83 5b00 	vstr	d5, [r3]
   10a6e:	ee36 7b47 	vsub.f64	d7, d6, d7
   10a72:	dccb      	bgt.n	10a0c <__kernel_rem_pio2+0x5b4>
   10a74:	e7d5      	b.n	10a22 <__kernel_rem_pio2+0x5ca>
   10a76:	9b04      	ldr	r3, [sp, #16]
   10a78:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
   10a7c:	e553      	b.n	10526 <__kernel_rem_pio2+0xce>
   10a7e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10a80:	2b02      	cmp	r3, #2
   10a82:	dc1b      	bgt.n	10abc <__kernel_rem_pio2+0x664>
   10a84:	2b00      	cmp	r3, #0
   10a86:	dc21      	bgt.n	10acc <__kernel_rem_pio2+0x674>
   10a88:	f47f af31 	bne.w	108ee <__kernel_rem_pio2+0x496>
   10a8c:	ed9f 7b08 	vldr	d7, [pc, #32]	; 10ab0 <__kernel_rem_pio2+0x658>
   10a90:	e726      	b.n	108e0 <__kernel_rem_pio2+0x488>
   10a92:	bf00      	nop
   10a94:	f3af 8000 	nop.w
   10a98:	00000000 	.word	0x00000000
   10a9c:	41700000 	.word	0x41700000
   10aa0:	00000000 	.word	0x00000000
   10aa4:	3e700000 	.word	0x3e700000
   10aa8:	40000000 	.word	0x40000000
   10aac:	3ff921fb 	.word	0x3ff921fb
	...
   10ab8:	20000288 	.word	0x20000288
   10abc:	9ba6      	ldr	r3, [sp, #664]	; 0x298
   10abe:	2b03      	cmp	r3, #3
   10ac0:	f47f af15 	bne.w	108ee <__kernel_rem_pio2+0x496>
   10ac4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 10ae0 <__kernel_rem_pio2+0x688>
   10ac8:	af44      	add	r7, sp, #272	; 0x110
   10aca:	e75b      	b.n	10984 <__kernel_rem_pio2+0x52c>
   10acc:	ed9f 7b04 	vldr	d7, [pc, #16]	; 10ae0 <__kernel_rem_pio2+0x688>
   10ad0:	af44      	add	r7, sp, #272	; 0x110
   10ad2:	e790      	b.n	109f6 <__kernel_rem_pio2+0x59e>
   10ad4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 10ae0 <__kernel_rem_pio2+0x688>
   10ad8:	e754      	b.n	10984 <__kernel_rem_pio2+0x52c>
   10ada:	bf00      	nop
   10adc:	f3af 8000 	nop.w
	...

00010ae8 <fabs>:
   10ae8:	ec51 0b10 	vmov	r0, r1, d0
   10aec:	ee10 2a10 	vmov	r2, s0
   10af0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10af4:	ec43 2b10 	vmov	d0, r2, r3
   10af8:	4770      	bx	lr
   10afa:	bf00      	nop
   10afc:	0000      	movs	r0, r0
	...

00010b00 <floor>:
   10b00:	b510      	push	{r4, lr}
   10b02:	b082      	sub	sp, #8
   10b04:	ed8d 0b00 	vstr	d0, [sp]
   10b08:	9901      	ldr	r1, [sp, #4]
   10b0a:	9800      	ldr	r0, [sp, #0]
   10b0c:	f3c1 520a 	ubfx	r2, r1, #20, #11
   10b10:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
   10b14:	2b13      	cmp	r3, #19
   10b16:	4684      	mov	ip, r0
   10b18:	dc31      	bgt.n	10b7e <floor+0x7e>
   10b1a:	2b00      	cmp	r3, #0
   10b1c:	db21      	blt.n	10b62 <floor+0x62>
   10b1e:	4a3a      	ldr	r2, [pc, #232]	; (10c08 <floor+0x108>)
   10b20:	411a      	asrs	r2, r3
   10b22:	ea01 0402 	and.w	r4, r1, r2
   10b26:	4304      	orrs	r4, r0
   10b28:	468e      	mov	lr, r1
   10b2a:	d02d      	beq.n	10b88 <floor+0x88>
   10b2c:	ed9f 7b34 	vldr	d7, [pc, #208]	; 10c00 <floor+0x100>
   10b30:	ed9d 6b00 	vldr	d6, [sp]
   10b34:	ee36 7b07 	vadd.f64	d7, d6, d7
   10b38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b40:	dd09      	ble.n	10b56 <floor+0x56>
   10b42:	2900      	cmp	r1, #0
   10b44:	da04      	bge.n	10b50 <floor+0x50>
   10b46:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   10b4a:	fa41 f303 	asr.w	r3, r1, r3
   10b4e:	449e      	add	lr, r3
   10b50:	ea2e 0102 	bic.w	r1, lr, r2
   10b54:	2000      	movs	r0, #0
   10b56:	460b      	mov	r3, r1
   10b58:	4602      	mov	r2, r0
   10b5a:	ec43 2b10 	vmov	d0, r2, r3
   10b5e:	b002      	add	sp, #8
   10b60:	bd10      	pop	{r4, pc}
   10b62:	ed9f 7b27 	vldr	d7, [pc, #156]	; 10c00 <floor+0x100>
   10b66:	ee30 7b07 	vadd.f64	d7, d0, d7
   10b6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b72:	ddf0      	ble.n	10b56 <floor+0x56>
   10b74:	2900      	cmp	r1, #0
   10b76:	db28      	blt.n	10bca <floor+0xca>
   10b78:	2000      	movs	r0, #0
   10b7a:	4601      	mov	r1, r0
   10b7c:	e7eb      	b.n	10b56 <floor+0x56>
   10b7e:	2b33      	cmp	r3, #51	; 0x33
   10b80:	dd06      	ble.n	10b90 <floor+0x90>
   10b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10b86:	d01b      	beq.n	10bc0 <floor+0xc0>
   10b88:	ed9d 0b00 	vldr	d0, [sp]
   10b8c:	b002      	add	sp, #8
   10b8e:	bd10      	pop	{r4, pc}
   10b90:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
   10b94:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   10b98:	fa2e f202 	lsr.w	r2, lr, r2
   10b9c:	4210      	tst	r0, r2
   10b9e:	d0f3      	beq.n	10b88 <floor+0x88>
   10ba0:	ed9f 7b17 	vldr	d7, [pc, #92]	; 10c00 <floor+0x100>
   10ba4:	ed9d 6b00 	vldr	d6, [sp]
   10ba8:	ee36 7b07 	vadd.f64	d7, d6, d7
   10bac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10bb4:	ddcf      	ble.n	10b56 <floor+0x56>
   10bb6:	2900      	cmp	r1, #0
   10bb8:	db13      	blt.n	10be2 <floor+0xe2>
   10bba:	ea2c 0002 	bic.w	r0, ip, r2
   10bbe:	e7ca      	b.n	10b56 <floor+0x56>
   10bc0:	ed9d 7b00 	vldr	d7, [sp]
   10bc4:	ee37 0b07 	vadd.f64	d0, d7, d7
   10bc8:	e7e0      	b.n	10b8c <floor+0x8c>
   10bca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10bce:	4301      	orrs	r1, r0
   10bd0:	4b0e      	ldr	r3, [pc, #56]	; (10c0c <floor+0x10c>)
   10bd2:	2900      	cmp	r1, #0
   10bd4:	f04f 0000 	mov.w	r0, #0
   10bd8:	bf0c      	ite	eq
   10bda:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
   10bde:	4619      	movne	r1, r3
   10be0:	e7b9      	b.n	10b56 <floor+0x56>
   10be2:	2b14      	cmp	r3, #20
   10be4:	d009      	beq.n	10bfa <floor+0xfa>
   10be6:	2401      	movs	r4, #1
   10be8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   10bec:	fa04 f303 	lsl.w	r3, r4, r3
   10bf0:	449c      	add	ip, r3
   10bf2:	4560      	cmp	r0, ip
   10bf4:	bf88      	it	hi
   10bf6:	1909      	addhi	r1, r1, r4
   10bf8:	e7df      	b.n	10bba <floor+0xba>
   10bfa:	3101      	adds	r1, #1
   10bfc:	e7dd      	b.n	10bba <floor+0xba>
   10bfe:	bf00      	nop
   10c00:	8800759c 	.word	0x8800759c
   10c04:	7e37e43c 	.word	0x7e37e43c
   10c08:	000fffff 	.word	0x000fffff
   10c0c:	bff00000 	.word	0xbff00000

00010c10 <scalbn>:
   10c10:	ec53 2b10 	vmov	r2, r3, d0
   10c14:	b410      	push	{r4}
   10c16:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10c1a:	4619      	mov	r1, r3
   10c1c:	bb74      	cbnz	r4, 10c7c <scalbn+0x6c>
   10c1e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   10c22:	4311      	orrs	r1, r2
   10c24:	d027      	beq.n	10c76 <scalbn+0x66>
   10c26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 10ce8 <scalbn+0xd8>
   10c2a:	493b      	ldr	r1, [pc, #236]	; (10d18 <scalbn+0x108>)
   10c2c:	ee20 7b07 	vmul.f64	d7, d0, d7
   10c30:	4288      	cmp	r0, r1
   10c32:	ec53 2b17 	vmov	r2, r3, d7
   10c36:	db43      	blt.n	10cc0 <scalbn+0xb0>
   10c38:	f3c3 540a 	ubfx	r4, r3, #20, #11
   10c3c:	4619      	mov	r1, r3
   10c3e:	3c36      	subs	r4, #54	; 0x36
   10c40:	f24c 3c50 	movw	ip, #50000	; 0xc350
   10c44:	4560      	cmp	r0, ip
   10c46:	dc22      	bgt.n	10c8e <scalbn+0x7e>
   10c48:	4420      	add	r0, r4
   10c4a:	f240 74fe 	movw	r4, #2046	; 0x7fe
   10c4e:	42a0      	cmp	r0, r4
   10c50:	dc1d      	bgt.n	10c8e <scalbn+0x7e>
   10c52:	2800      	cmp	r0, #0
   10c54:	dc29      	bgt.n	10caa <scalbn+0x9a>
   10c56:	f110 0f35 	cmn.w	r0, #53	; 0x35
   10c5a:	db38      	blt.n	10cce <scalbn+0xbe>
   10c5c:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10c60:	3036      	adds	r0, #54	; 0x36
   10c62:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10c66:	ed9f 7b22 	vldr	d7, [pc, #136]	; 10cf0 <scalbn+0xe0>
   10c6a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10c6e:	ec43 2b10 	vmov	d0, r2, r3
   10c72:	ee20 0b07 	vmul.f64	d0, d0, d7
   10c76:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c7a:	4770      	bx	lr
   10c7c:	f240 7cff 	movw	ip, #2047	; 0x7ff
   10c80:	4564      	cmp	r4, ip
   10c82:	d1dd      	bne.n	10c40 <scalbn+0x30>
   10c84:	ee30 0b00 	vadd.f64	d0, d0, d0
   10c88:	f85d 4b04 	ldr.w	r4, [sp], #4
   10c8c:	4770      	bx	lr
   10c8e:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 10cf8 <scalbn+0xe8>
   10c92:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 10d00 <scalbn+0xf0>
   10c96:	eeb0 0b47 	vmov.f64	d0, d7
   10c9a:	2b00      	cmp	r3, #0
   10c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   10ca0:	fe27 7b05 	vselge.f64	d7, d7, d5
   10ca4:	ee27 0b00 	vmul.f64	d0, d7, d0
   10ca8:	4770      	bx	lr
   10caa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
   10cae:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
   10cb2:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
   10cb6:	ec43 2b10 	vmov	d0, r2, r3
   10cba:	f85d 4b04 	ldr.w	r4, [sp], #4
   10cbe:	4770      	bx	lr
   10cc0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 10d08 <scalbn+0xf8>
   10cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   10cc8:	ee27 0b00 	vmul.f64	d0, d7, d0
   10ccc:	4770      	bx	lr
   10cce:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 10d08 <scalbn+0xf8>
   10cd2:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 10d10 <scalbn+0x100>
   10cd6:	eeb0 0b47 	vmov.f64	d0, d7
   10cda:	2b00      	cmp	r3, #0
   10cdc:	fe27 7b05 	vselge.f64	d7, d7, d5
   10ce0:	ee27 0b00 	vmul.f64	d0, d7, d0
   10ce4:	e7c7      	b.n	10c76 <scalbn+0x66>
   10ce6:	bf00      	nop
   10ce8:	00000000 	.word	0x00000000
   10cec:	43500000 	.word	0x43500000
   10cf0:	00000000 	.word	0x00000000
   10cf4:	3c900000 	.word	0x3c900000
   10cf8:	8800759c 	.word	0x8800759c
   10cfc:	7e37e43c 	.word	0x7e37e43c
   10d00:	8800759c 	.word	0x8800759c
   10d04:	fe37e43c 	.word	0xfe37e43c
   10d08:	c2f8f359 	.word	0xc2f8f359
   10d0c:	01a56e1f 	.word	0x01a56e1f
   10d10:	c2f8f359 	.word	0xc2f8f359
   10d14:	81a56e1f 	.word	0x81a56e1f
   10d18:	ffff3cb0 	.word	0xffff3cb0

00010d1c <__aeabi_atexit>:
   10d1c:	4603      	mov	r3, r0
   10d1e:	4608      	mov	r0, r1
   10d20:	4619      	mov	r1, r3
   10d22:	f000 bcc1 	b.w	116a8 <__cxa_atexit>
   10d26:	bf00      	nop

00010d28 <__utoa>:
   10d28:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d2a:	4f25      	ldr	r7, [pc, #148]	; (10dc0 <__utoa+0x98>)
   10d2c:	f1a2 0e02 	sub.w	lr, r2, #2
   10d30:	4616      	mov	r6, r2
   10d32:	4605      	mov	r5, r0
   10d34:	460c      	mov	r4, r1
   10d36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10d38:	b08b      	sub	sp, #44	; 0x2c
   10d3a:	46ec      	mov	ip, sp
   10d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10d40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10d42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10d46:	e897 0003 	ldmia.w	r7, {r0, r1}
   10d4a:	f84c 0b04 	str.w	r0, [ip], #4
   10d4e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   10d52:	f88c 1000 	strb.w	r1, [ip]
   10d56:	d82e      	bhi.n	10db6 <__utoa+0x8e>
   10d58:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   10d5c:	4670      	mov	r0, lr
   10d5e:	f04f 0c00 	mov.w	ip, #0
   10d62:	fbb5 f2f6 	udiv	r2, r5, r6
   10d66:	fb06 5312 	mls	r3, r6, r2, r5
   10d6a:	3328      	adds	r3, #40	; 0x28
   10d6c:	446b      	add	r3, sp
   10d6e:	4661      	mov	r1, ip
   10d70:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   10d74:	f800 cf01 	strb.w	ip, [r0, #1]!
   10d78:	462b      	mov	r3, r5
   10d7a:	429e      	cmp	r6, r3
   10d7c:	f101 0c01 	add.w	ip, r1, #1
   10d80:	4615      	mov	r5, r2
   10d82:	d9ee      	bls.n	10d62 <__utoa+0x3a>
   10d84:	2300      	movs	r3, #0
   10d86:	f804 300c 	strb.w	r3, [r4, ip]
   10d8a:	b189      	cbz	r1, 10db0 <__utoa+0x88>
   10d8c:	44a4      	add	ip, r4
   10d8e:	4672      	mov	r2, lr
   10d90:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10d94:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   10d98:	f88e 5000 	strb.w	r5, [lr]
   10d9c:	eba4 030e 	sub.w	r3, r4, lr
   10da0:	3202      	adds	r2, #2
   10da2:	3b01      	subs	r3, #1
   10da4:	1b12      	subs	r2, r2, r4
   10da6:	440b      	add	r3, r1
   10da8:	429a      	cmp	r2, r3
   10daa:	f88c 0000 	strb.w	r0, [ip]
   10dae:	dbee      	blt.n	10d8e <__utoa+0x66>
   10db0:	4620      	mov	r0, r4
   10db2:	b00b      	add	sp, #44	; 0x2c
   10db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10db6:	2300      	movs	r3, #0
   10db8:	4618      	mov	r0, r3
   10dba:	7023      	strb	r3, [r4, #0]
   10dbc:	b00b      	add	sp, #44	; 0x2c
   10dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dc0:	200026ec 	.word	0x200026ec

00010dc4 <strncmp>:
   10dc4:	2a00      	cmp	r2, #0
   10dc6:	d03e      	beq.n	10e46 <strncmp+0x82>
   10dc8:	ea40 0301 	orr.w	r3, r0, r1
   10dcc:	079b      	lsls	r3, r3, #30
   10dce:	b530      	push	{r4, r5, lr}
   10dd0:	4684      	mov	ip, r0
   10dd2:	d12f      	bne.n	10e34 <strncmp+0x70>
   10dd4:	2a03      	cmp	r2, #3
   10dd6:	d92d      	bls.n	10e34 <strncmp+0x70>
   10dd8:	460b      	mov	r3, r1
   10dda:	e008      	b.n	10dee <strncmp+0x2a>
   10ddc:	3a04      	subs	r2, #4
   10dde:	4684      	mov	ip, r0
   10de0:	4619      	mov	r1, r3
   10de2:	d025      	beq.n	10e30 <strncmp+0x6c>
   10de4:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   10de8:	d122      	bne.n	10e30 <strncmp+0x6c>
   10dea:	2a03      	cmp	r2, #3
   10dec:	d922      	bls.n	10e34 <strncmp+0x70>
   10dee:	6804      	ldr	r4, [r0, #0]
   10df0:	4619      	mov	r1, r3
   10df2:	f853 5b04 	ldr.w	r5, [r3], #4
   10df6:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   10dfa:	42ac      	cmp	r4, r5
   10dfc:	4684      	mov	ip, r0
   10dfe:	ea2e 0e04 	bic.w	lr, lr, r4
   10e02:	f100 0004 	add.w	r0, r0, #4
   10e06:	d0e9      	beq.n	10ddc <strncmp+0x18>
   10e08:	f89c 0000 	ldrb.w	r0, [ip]
   10e0c:	780c      	ldrb	r4, [r1, #0]
   10e0e:	42a0      	cmp	r0, r4
   10e10:	d11b      	bne.n	10e4a <strncmp+0x86>
   10e12:	46e6      	mov	lr, ip
   10e14:	b168      	cbz	r0, 10e32 <strncmp+0x6e>
   10e16:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10e1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   10e1e:	eba2 030e 	sub.w	r3, r2, lr
   10e22:	42a0      	cmp	r0, r4
   10e24:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10e28:	d10f      	bne.n	10e4a <strncmp+0x86>
   10e2a:	eb1c 0303 	adds.w	r3, ip, r3
   10e2e:	d1f1      	bne.n	10e14 <strncmp+0x50>
   10e30:	2000      	movs	r0, #0
   10e32:	bd30      	pop	{r4, r5, pc}
   10e34:	f89c 0000 	ldrb.w	r0, [ip]
   10e38:	780c      	ldrb	r4, [r1, #0]
   10e3a:	4284      	cmp	r4, r0
   10e3c:	d105      	bne.n	10e4a <strncmp+0x86>
   10e3e:	2a01      	cmp	r2, #1
   10e40:	d0f6      	beq.n	10e30 <strncmp+0x6c>
   10e42:	46e6      	mov	lr, ip
   10e44:	e7e6      	b.n	10e14 <strncmp+0x50>
   10e46:	4610      	mov	r0, r2
   10e48:	4770      	bx	lr
   10e4a:	1b00      	subs	r0, r0, r4
   10e4c:	bd30      	pop	{r4, r5, pc}
   10e4e:	bf00      	nop

00010e50 <strncpy>:
   10e50:	ea40 0301 	orr.w	r3, r0, r1
   10e54:	079b      	lsls	r3, r3, #30
   10e56:	b530      	push	{r4, r5, lr}
   10e58:	d101      	bne.n	10e5e <strncpy+0xe>
   10e5a:	2a03      	cmp	r2, #3
   10e5c:	d80f      	bhi.n	10e7e <strncpy+0x2e>
   10e5e:	4684      	mov	ip, r0
   10e60:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   10e64:	e007      	b.n	10e76 <strncpy+0x26>
   10e66:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   10e6a:	f803 1b01 	strb.w	r1, [r3], #1
   10e6e:	1e54      	subs	r4, r2, #1
   10e70:	b1c1      	cbz	r1, 10ea4 <strncpy+0x54>
   10e72:	469c      	mov	ip, r3
   10e74:	4622      	mov	r2, r4
   10e76:	4663      	mov	r3, ip
   10e78:	2a00      	cmp	r2, #0
   10e7a:	d1f4      	bne.n	10e66 <strncpy+0x16>
   10e7c:	bd30      	pop	{r4, r5, pc}
   10e7e:	460b      	mov	r3, r1
   10e80:	4684      	mov	ip, r0
   10e82:	4619      	mov	r1, r3
   10e84:	f853 5b04 	ldr.w	r5, [r3], #4
   10e88:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10e8c:	ea24 0405 	bic.w	r4, r4, r5
   10e90:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10e94:	d1e4      	bne.n	10e60 <strncpy+0x10>
   10e96:	3a04      	subs	r2, #4
   10e98:	2a03      	cmp	r2, #3
   10e9a:	f84c 5b04 	str.w	r5, [ip], #4
   10e9e:	4619      	mov	r1, r3
   10ea0:	d8ef      	bhi.n	10e82 <strncpy+0x32>
   10ea2:	e7dd      	b.n	10e60 <strncpy+0x10>
   10ea4:	4494      	add	ip, r2
   10ea6:	2c00      	cmp	r4, #0
   10ea8:	d0e8      	beq.n	10e7c <strncpy+0x2c>
   10eaa:	f803 1b01 	strb.w	r1, [r3], #1
   10eae:	4563      	cmp	r3, ip
   10eb0:	d1fb      	bne.n	10eaa <strncpy+0x5a>
   10eb2:	bd30      	pop	{r4, r5, pc}

00010eb4 <itoa>:
   10eb4:	1e93      	subs	r3, r2, #2
   10eb6:	2b22      	cmp	r3, #34	; 0x22
   10eb8:	b510      	push	{r4, lr}
   10eba:	460c      	mov	r4, r1
   10ebc:	d80c      	bhi.n	10ed8 <itoa+0x24>
   10ebe:	2a0a      	cmp	r2, #10
   10ec0:	d003      	beq.n	10eca <itoa+0x16>
   10ec2:	f7ff ff31 	bl	10d28 <__utoa>
   10ec6:	4620      	mov	r0, r4
   10ec8:	bd10      	pop	{r4, pc}
   10eca:	2800      	cmp	r0, #0
   10ecc:	daf9      	bge.n	10ec2 <itoa+0xe>
   10ece:	232d      	movs	r3, #45	; 0x2d
   10ed0:	f801 3b01 	strb.w	r3, [r1], #1
   10ed4:	4240      	negs	r0, r0
   10ed6:	e7f4      	b.n	10ec2 <itoa+0xe>
   10ed8:	2300      	movs	r3, #0
   10eda:	700b      	strb	r3, [r1, #0]
   10edc:	4618      	mov	r0, r3
   10ede:	bd10      	pop	{r4, pc}

00010ee0 <__errno>:
   10ee0:	4b01      	ldr	r3, [pc, #4]	; (10ee8 <__errno+0x8>)
   10ee2:	6818      	ldr	r0, [r3, #0]
   10ee4:	4770      	bx	lr
   10ee6:	bf00      	nop
   10ee8:	2000395c 	.word	0x2000395c

00010eec <malloc>:
   10eec:	4b02      	ldr	r3, [pc, #8]	; (10ef8 <malloc+0xc>)
   10eee:	4601      	mov	r1, r0
   10ef0:	6818      	ldr	r0, [r3, #0]
   10ef2:	f000 b80b 	b.w	10f0c <_malloc_r>
   10ef6:	bf00      	nop
   10ef8:	2000395c 	.word	0x2000395c

00010efc <free>:
   10efc:	4b02      	ldr	r3, [pc, #8]	; (10f08 <free+0xc>)
   10efe:	4601      	mov	r1, r0
   10f00:	6818      	ldr	r0, [r3, #0]
   10f02:	f001 bc47 	b.w	12794 <_free_r>
   10f06:	bf00      	nop
   10f08:	2000395c 	.word	0x2000395c

00010f0c <_malloc_r>:
   10f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f10:	f101 060b 	add.w	r6, r1, #11
   10f14:	2e16      	cmp	r6, #22
   10f16:	b083      	sub	sp, #12
   10f18:	4604      	mov	r4, r0
   10f1a:	d824      	bhi.n	10f66 <_malloc_r+0x5a>
   10f1c:	2910      	cmp	r1, #16
   10f1e:	f200 80ba 	bhi.w	11096 <_malloc_r+0x18a>
   10f22:	f000 fc5d 	bl	117e0 <__malloc_lock>
   10f26:	2610      	movs	r6, #16
   10f28:	2218      	movs	r2, #24
   10f2a:	2002      	movs	r0, #2
   10f2c:	4fb5      	ldr	r7, [pc, #724]	; (11204 <_malloc_r+0x2f8>)
   10f2e:	443a      	add	r2, r7
   10f30:	f1a2 0108 	sub.w	r1, r2, #8
   10f34:	6853      	ldr	r3, [r2, #4]
   10f36:	428b      	cmp	r3, r1
   10f38:	f000 80ba 	beq.w	110b0 <_malloc_r+0x1a4>
   10f3c:	685a      	ldr	r2, [r3, #4]
   10f3e:	68d9      	ldr	r1, [r3, #12]
   10f40:	f022 0203 	bic.w	r2, r2, #3
   10f44:	441a      	add	r2, r3
   10f46:	689d      	ldr	r5, [r3, #8]
   10f48:	60e9      	str	r1, [r5, #12]
   10f4a:	608d      	str	r5, [r1, #8]
   10f4c:	6851      	ldr	r1, [r2, #4]
   10f4e:	f041 0101 	orr.w	r1, r1, #1
   10f52:	4620      	mov	r0, r4
   10f54:	6051      	str	r1, [r2, #4]
   10f56:	f103 0508 	add.w	r5, r3, #8
   10f5a:	f000 fc47 	bl	117ec <__malloc_unlock>
   10f5e:	4628      	mov	r0, r5
   10f60:	b003      	add	sp, #12
   10f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f66:	f036 0607 	bics.w	r6, r6, #7
   10f6a:	f100 8094 	bmi.w	11096 <_malloc_r+0x18a>
   10f6e:	42b1      	cmp	r1, r6
   10f70:	f200 8091 	bhi.w	11096 <_malloc_r+0x18a>
   10f74:	f000 fc34 	bl	117e0 <__malloc_lock>
   10f78:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   10f7c:	f0c0 819a 	bcc.w	112b4 <_malloc_r+0x3a8>
   10f80:	0a73      	lsrs	r3, r6, #9
   10f82:	f000 808f 	beq.w	110a4 <_malloc_r+0x198>
   10f86:	2b04      	cmp	r3, #4
   10f88:	f200 816f 	bhi.w	1126a <_malloc_r+0x35e>
   10f8c:	09b3      	lsrs	r3, r6, #6
   10f8e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   10f92:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   10f96:	00c3      	lsls	r3, r0, #3
   10f98:	4f9a      	ldr	r7, [pc, #616]	; (11204 <_malloc_r+0x2f8>)
   10f9a:	443b      	add	r3, r7
   10f9c:	f1a3 0508 	sub.w	r5, r3, #8
   10fa0:	685b      	ldr	r3, [r3, #4]
   10fa2:	429d      	cmp	r5, r3
   10fa4:	d106      	bne.n	10fb4 <_malloc_r+0xa8>
   10fa6:	e00c      	b.n	10fc2 <_malloc_r+0xb6>
   10fa8:	2900      	cmp	r1, #0
   10faa:	f280 8127 	bge.w	111fc <_malloc_r+0x2f0>
   10fae:	68db      	ldr	r3, [r3, #12]
   10fb0:	429d      	cmp	r5, r3
   10fb2:	d006      	beq.n	10fc2 <_malloc_r+0xb6>
   10fb4:	685a      	ldr	r2, [r3, #4]
   10fb6:	f022 0203 	bic.w	r2, r2, #3
   10fba:	1b91      	subs	r1, r2, r6
   10fbc:	290f      	cmp	r1, #15
   10fbe:	ddf3      	ble.n	10fa8 <_malloc_r+0x9c>
   10fc0:	4660      	mov	r0, ip
   10fc2:	693d      	ldr	r5, [r7, #16]
   10fc4:	f8df c250 	ldr.w	ip, [pc, #592]	; 11218 <_malloc_r+0x30c>
   10fc8:	4565      	cmp	r5, ip
   10fca:	d07c      	beq.n	110c6 <_malloc_r+0x1ba>
   10fcc:	686a      	ldr	r2, [r5, #4]
   10fce:	f022 0203 	bic.w	r2, r2, #3
   10fd2:	1b93      	subs	r3, r2, r6
   10fd4:	2b0f      	cmp	r3, #15
   10fd6:	f300 817b 	bgt.w	112d0 <_malloc_r+0x3c4>
   10fda:	2b00      	cmp	r3, #0
   10fdc:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10fe0:	f280 816c 	bge.w	112bc <_malloc_r+0x3b0>
   10fe4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   10fe8:	f080 811a 	bcs.w	11220 <_malloc_r+0x314>
   10fec:	08d3      	lsrs	r3, r2, #3
   10fee:	6879      	ldr	r1, [r7, #4]
   10ff0:	3301      	adds	r3, #1
   10ff2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   10ff6:	2201      	movs	r2, #1
   10ff8:	fa02 f20e 	lsl.w	r2, r2, lr
   10ffc:	430a      	orrs	r2, r1
   10ffe:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   11002:	f8c5 e008 	str.w	lr, [r5, #8]
   11006:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1100a:	3908      	subs	r1, #8
   1100c:	60e9      	str	r1, [r5, #12]
   1100e:	607a      	str	r2, [r7, #4]
   11010:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   11014:	f8ce 500c 	str.w	r5, [lr, #12]
   11018:	1083      	asrs	r3, r0, #2
   1101a:	2101      	movs	r1, #1
   1101c:	4099      	lsls	r1, r3
   1101e:	4291      	cmp	r1, r2
   11020:	d857      	bhi.n	110d2 <_malloc_r+0x1c6>
   11022:	4211      	tst	r1, r2
   11024:	d106      	bne.n	11034 <_malloc_r+0x128>
   11026:	f020 0003 	bic.w	r0, r0, #3
   1102a:	0049      	lsls	r1, r1, #1
   1102c:	4211      	tst	r1, r2
   1102e:	f100 0004 	add.w	r0, r0, #4
   11032:	d0fa      	beq.n	1102a <_malloc_r+0x11e>
   11034:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   11038:	464d      	mov	r5, r9
   1103a:	4686      	mov	lr, r0
   1103c:	f8d5 800c 	ldr.w	r8, [r5, #12]
   11040:	4545      	cmp	r5, r8
   11042:	d108      	bne.n	11056 <_malloc_r+0x14a>
   11044:	e11d      	b.n	11282 <_malloc_r+0x376>
   11046:	2b00      	cmp	r3, #0
   11048:	f280 8124 	bge.w	11294 <_malloc_r+0x388>
   1104c:	f8d8 800c 	ldr.w	r8, [r8, #12]
   11050:	4545      	cmp	r5, r8
   11052:	f000 8116 	beq.w	11282 <_malloc_r+0x376>
   11056:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1105a:	f022 0203 	bic.w	r2, r2, #3
   1105e:	1b93      	subs	r3, r2, r6
   11060:	2b0f      	cmp	r3, #15
   11062:	ddf0      	ble.n	11046 <_malloc_r+0x13a>
   11064:	4620      	mov	r0, r4
   11066:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   1106a:	eb08 0106 	add.w	r1, r8, r6
   1106e:	f046 0601 	orr.w	r6, r6, #1
   11072:	f8c8 6004 	str.w	r6, [r8, #4]
   11076:	60ec      	str	r4, [r5, #12]
   11078:	60a5      	str	r5, [r4, #8]
   1107a:	f043 0401 	orr.w	r4, r3, #1
   1107e:	e9c7 1104 	strd	r1, r1, [r7, #16]
   11082:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   11086:	604c      	str	r4, [r1, #4]
   11088:	f848 3002 	str.w	r3, [r8, r2]
   1108c:	f000 fbae 	bl	117ec <__malloc_unlock>
   11090:	f108 0508 	add.w	r5, r8, #8
   11094:	e002      	b.n	1109c <_malloc_r+0x190>
   11096:	230c      	movs	r3, #12
   11098:	6023      	str	r3, [r4, #0]
   1109a:	2500      	movs	r5, #0
   1109c:	4628      	mov	r0, r5
   1109e:	b003      	add	sp, #12
   110a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110a4:	f44f 7300 	mov.w	r3, #512	; 0x200
   110a8:	2040      	movs	r0, #64	; 0x40
   110aa:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   110ae:	e773      	b.n	10f98 <_malloc_r+0x8c>
   110b0:	68d3      	ldr	r3, [r2, #12]
   110b2:	429a      	cmp	r2, r3
   110b4:	bf08      	it	eq
   110b6:	3002      	addeq	r0, #2
   110b8:	f47f af40 	bne.w	10f3c <_malloc_r+0x30>
   110bc:	693d      	ldr	r5, [r7, #16]
   110be:	f8df c158 	ldr.w	ip, [pc, #344]	; 11218 <_malloc_r+0x30c>
   110c2:	4565      	cmp	r5, ip
   110c4:	d182      	bne.n	10fcc <_malloc_r+0xc0>
   110c6:	687a      	ldr	r2, [r7, #4]
   110c8:	1083      	asrs	r3, r0, #2
   110ca:	2101      	movs	r1, #1
   110cc:	4099      	lsls	r1, r3
   110ce:	4291      	cmp	r1, r2
   110d0:	d9a7      	bls.n	11022 <_malloc_r+0x116>
   110d2:	68bd      	ldr	r5, [r7, #8]
   110d4:	686b      	ldr	r3, [r5, #4]
   110d6:	f023 0903 	bic.w	r9, r3, #3
   110da:	454e      	cmp	r6, r9
   110dc:	d803      	bhi.n	110e6 <_malloc_r+0x1da>
   110de:	eba9 0306 	sub.w	r3, r9, r6
   110e2:	2b0f      	cmp	r3, #15
   110e4:	dc7a      	bgt.n	111dc <_malloc_r+0x2d0>
   110e6:	f8df b134 	ldr.w	fp, [pc, #308]	; 1121c <_malloc_r+0x310>
   110ea:	4b47      	ldr	r3, [pc, #284]	; (11208 <_malloc_r+0x2fc>)
   110ec:	f8db 2000 	ldr.w	r2, [fp]
   110f0:	681b      	ldr	r3, [r3, #0]
   110f2:	3201      	adds	r2, #1
   110f4:	4433      	add	r3, r6
   110f6:	eb05 0a09 	add.w	sl, r5, r9
   110fa:	f000 8133 	beq.w	11364 <_malloc_r+0x458>
   110fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   11102:	330f      	adds	r3, #15
   11104:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   11108:	f028 080f 	bic.w	r8, r8, #15
   1110c:	4641      	mov	r1, r8
   1110e:	4620      	mov	r0, r4
   11110:	f001 fcae 	bl	12a70 <_sbrk_r>
   11114:	1c41      	adds	r1, r0, #1
   11116:	4602      	mov	r2, r0
   11118:	f000 80f3 	beq.w	11302 <_malloc_r+0x3f6>
   1111c:	4582      	cmp	sl, r0
   1111e:	f200 80ee 	bhi.w	112fe <_malloc_r+0x3f2>
   11122:	4b3a      	ldr	r3, [pc, #232]	; (1120c <_malloc_r+0x300>)
   11124:	6819      	ldr	r1, [r3, #0]
   11126:	4441      	add	r1, r8
   11128:	6019      	str	r1, [r3, #0]
   1112a:	4608      	mov	r0, r1
   1112c:	f000 814e 	beq.w	113cc <_malloc_r+0x4c0>
   11130:	f8db 1000 	ldr.w	r1, [fp]
   11134:	9301      	str	r3, [sp, #4]
   11136:	3101      	adds	r1, #1
   11138:	bf1b      	ittet	ne
   1113a:	eba2 010a 	subne.w	r1, r2, sl
   1113e:	1809      	addne	r1, r1, r0
   11140:	f8cb 2000 	streq.w	r2, [fp]
   11144:	6019      	strne	r1, [r3, #0]
   11146:	f012 0b07 	ands.w	fp, r2, #7
   1114a:	f000 8117 	beq.w	1137c <_malloc_r+0x470>
   1114e:	f1cb 0108 	rsb	r1, fp, #8
   11152:	440a      	add	r2, r1
   11154:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   11158:	4490      	add	r8, r2
   1115a:	3108      	adds	r1, #8
   1115c:	eba1 0108 	sub.w	r1, r1, r8
   11160:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   11164:	4651      	mov	r1, sl
   11166:	4620      	mov	r0, r4
   11168:	9200      	str	r2, [sp, #0]
   1116a:	f001 fc81 	bl	12a70 <_sbrk_r>
   1116e:	1c42      	adds	r2, r0, #1
   11170:	e9dd 2300 	ldrd	r2, r3, [sp]
   11174:	f000 814f 	beq.w	11416 <_malloc_r+0x50a>
   11178:	1a80      	subs	r0, r0, r2
   1117a:	eb00 080a 	add.w	r8, r0, sl
   1117e:	6819      	ldr	r1, [r3, #0]
   11180:	60ba      	str	r2, [r7, #8]
   11182:	f048 0001 	orr.w	r0, r8, #1
   11186:	4451      	add	r1, sl
   11188:	42bd      	cmp	r5, r7
   1118a:	6050      	str	r0, [r2, #4]
   1118c:	6019      	str	r1, [r3, #0]
   1118e:	f000 8129 	beq.w	113e4 <_malloc_r+0x4d8>
   11192:	f1b9 0f0f 	cmp.w	r9, #15
   11196:	f240 8127 	bls.w	113e8 <_malloc_r+0x4dc>
   1119a:	6868      	ldr	r0, [r5, #4]
   1119c:	f1a9 0c0c 	sub.w	ip, r9, #12
   111a0:	f02c 0c07 	bic.w	ip, ip, #7
   111a4:	f000 0001 	and.w	r0, r0, #1
   111a8:	ea40 000c 	orr.w	r0, r0, ip
   111ac:	6068      	str	r0, [r5, #4]
   111ae:	f04f 0e05 	mov.w	lr, #5
   111b2:	eb05 000c 	add.w	r0, r5, ip
   111b6:	f1bc 0f0f 	cmp.w	ip, #15
   111ba:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   111be:	f200 8132 	bhi.w	11426 <_malloc_r+0x51a>
   111c2:	6850      	ldr	r0, [r2, #4]
   111c4:	4615      	mov	r5, r2
   111c6:	4b12      	ldr	r3, [pc, #72]	; (11210 <_malloc_r+0x304>)
   111c8:	681a      	ldr	r2, [r3, #0]
   111ca:	428a      	cmp	r2, r1
   111cc:	bf38      	it	cc
   111ce:	6019      	strcc	r1, [r3, #0]
   111d0:	4b10      	ldr	r3, [pc, #64]	; (11214 <_malloc_r+0x308>)
   111d2:	681a      	ldr	r2, [r3, #0]
   111d4:	428a      	cmp	r2, r1
   111d6:	bf38      	it	cc
   111d8:	6019      	strcc	r1, [r3, #0]
   111da:	e094      	b.n	11306 <_malloc_r+0x3fa>
   111dc:	19aa      	adds	r2, r5, r6
   111de:	f043 0301 	orr.w	r3, r3, #1
   111e2:	f046 0601 	orr.w	r6, r6, #1
   111e6:	606e      	str	r6, [r5, #4]
   111e8:	4620      	mov	r0, r4
   111ea:	60ba      	str	r2, [r7, #8]
   111ec:	6053      	str	r3, [r2, #4]
   111ee:	f000 fafd 	bl	117ec <__malloc_unlock>
   111f2:	3508      	adds	r5, #8
   111f4:	4628      	mov	r0, r5
   111f6:	b003      	add	sp, #12
   111f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111fc:	68d9      	ldr	r1, [r3, #12]
   111fe:	441a      	add	r2, r3
   11200:	e6a1      	b.n	10f46 <_malloc_r+0x3a>
   11202:	bf00      	nop
   11204:	20003540 	.word	0x20003540
   11208:	20004e94 	.word	0x20004e94
   1120c:	20004e64 	.word	0x20004e64
   11210:	20004e8c 	.word	0x20004e8c
   11214:	20004e90 	.word	0x20004e90
   11218:	20003548 	.word	0x20003548
   1121c:	20003948 	.word	0x20003948
   11220:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   11224:	ea4f 2352 	mov.w	r3, r2, lsr #9
   11228:	d363      	bcc.n	112f2 <_malloc_r+0x3e6>
   1122a:	2b14      	cmp	r3, #20
   1122c:	f200 80b7 	bhi.w	1139e <_malloc_r+0x492>
   11230:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   11234:	00c9      	lsls	r1, r1, #3
   11236:	335b      	adds	r3, #91	; 0x5b
   11238:	eb07 0e01 	add.w	lr, r7, r1
   1123c:	5879      	ldr	r1, [r7, r1]
   1123e:	f1ae 0e08 	sub.w	lr, lr, #8
   11242:	458e      	cmp	lr, r1
   11244:	f000 8091 	beq.w	1136a <_malloc_r+0x45e>
   11248:	684b      	ldr	r3, [r1, #4]
   1124a:	f023 0303 	bic.w	r3, r3, #3
   1124e:	4293      	cmp	r3, r2
   11250:	d902      	bls.n	11258 <_malloc_r+0x34c>
   11252:	6889      	ldr	r1, [r1, #8]
   11254:	458e      	cmp	lr, r1
   11256:	d1f7      	bne.n	11248 <_malloc_r+0x33c>
   11258:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   1125c:	687a      	ldr	r2, [r7, #4]
   1125e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   11262:	f8ce 5008 	str.w	r5, [lr, #8]
   11266:	60cd      	str	r5, [r1, #12]
   11268:	e6d6      	b.n	11018 <_malloc_r+0x10c>
   1126a:	2b14      	cmp	r3, #20
   1126c:	d959      	bls.n	11322 <_malloc_r+0x416>
   1126e:	2b54      	cmp	r3, #84	; 0x54
   11270:	f200 809d 	bhi.w	113ae <_malloc_r+0x4a2>
   11274:	0b33      	lsrs	r3, r6, #12
   11276:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1127a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   1127e:	00c3      	lsls	r3, r0, #3
   11280:	e68a      	b.n	10f98 <_malloc_r+0x8c>
   11282:	f10e 0e01 	add.w	lr, lr, #1
   11286:	f01e 0f03 	tst.w	lr, #3
   1128a:	f105 0508 	add.w	r5, r5, #8
   1128e:	f47f aed5 	bne.w	1103c <_malloc_r+0x130>
   11292:	e051      	b.n	11338 <_malloc_r+0x42c>
   11294:	4442      	add	r2, r8
   11296:	4645      	mov	r5, r8
   11298:	6853      	ldr	r3, [r2, #4]
   1129a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1129e:	f043 0301 	orr.w	r3, r3, #1
   112a2:	6053      	str	r3, [r2, #4]
   112a4:	f855 3f08 	ldr.w	r3, [r5, #8]!
   112a8:	4620      	mov	r0, r4
   112aa:	60d9      	str	r1, [r3, #12]
   112ac:	608b      	str	r3, [r1, #8]
   112ae:	f000 fa9d 	bl	117ec <__malloc_unlock>
   112b2:	e6f3      	b.n	1109c <_malloc_r+0x190>
   112b4:	08f0      	lsrs	r0, r6, #3
   112b6:	f106 0208 	add.w	r2, r6, #8
   112ba:	e637      	b.n	10f2c <_malloc_r+0x20>
   112bc:	442a      	add	r2, r5
   112be:	4620      	mov	r0, r4
   112c0:	6853      	ldr	r3, [r2, #4]
   112c2:	f043 0301 	orr.w	r3, r3, #1
   112c6:	6053      	str	r3, [r2, #4]
   112c8:	3508      	adds	r5, #8
   112ca:	f000 fa8f 	bl	117ec <__malloc_unlock>
   112ce:	e6e5      	b.n	1109c <_malloc_r+0x190>
   112d0:	19a9      	adds	r1, r5, r6
   112d2:	4620      	mov	r0, r4
   112d4:	f046 0601 	orr.w	r6, r6, #1
   112d8:	f043 0401 	orr.w	r4, r3, #1
   112dc:	606e      	str	r6, [r5, #4]
   112de:	e9c7 1104 	strd	r1, r1, [r7, #16]
   112e2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   112e6:	604c      	str	r4, [r1, #4]
   112e8:	50ab      	str	r3, [r5, r2]
   112ea:	f000 fa7f 	bl	117ec <__malloc_unlock>
   112ee:	3508      	adds	r5, #8
   112f0:	e6d4      	b.n	1109c <_malloc_r+0x190>
   112f2:	0993      	lsrs	r3, r2, #6
   112f4:	f103 0139 	add.w	r1, r3, #57	; 0x39
   112f8:	00c9      	lsls	r1, r1, #3
   112fa:	3338      	adds	r3, #56	; 0x38
   112fc:	e79c      	b.n	11238 <_malloc_r+0x32c>
   112fe:	42bd      	cmp	r5, r7
   11300:	d05f      	beq.n	113c2 <_malloc_r+0x4b6>
   11302:	68bd      	ldr	r5, [r7, #8]
   11304:	6868      	ldr	r0, [r5, #4]
   11306:	f020 0803 	bic.w	r8, r0, #3
   1130a:	4546      	cmp	r6, r8
   1130c:	eba8 0306 	sub.w	r3, r8, r6
   11310:	d802      	bhi.n	11318 <_malloc_r+0x40c>
   11312:	2b0f      	cmp	r3, #15
   11314:	f73f af62 	bgt.w	111dc <_malloc_r+0x2d0>
   11318:	4620      	mov	r0, r4
   1131a:	f000 fa67 	bl	117ec <__malloc_unlock>
   1131e:	2500      	movs	r5, #0
   11320:	e6bc      	b.n	1109c <_malloc_r+0x190>
   11322:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   11326:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   1132a:	00c3      	lsls	r3, r0, #3
   1132c:	e634      	b.n	10f98 <_malloc_r+0x8c>
   1132e:	f859 3908 	ldr.w	r3, [r9], #-8
   11332:	454b      	cmp	r3, r9
   11334:	f040 8096 	bne.w	11464 <_malloc_r+0x558>
   11338:	f010 0f03 	tst.w	r0, #3
   1133c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   11340:	d1f5      	bne.n	1132e <_malloc_r+0x422>
   11342:	687b      	ldr	r3, [r7, #4]
   11344:	ea23 0301 	bic.w	r3, r3, r1
   11348:	607b      	str	r3, [r7, #4]
   1134a:	0049      	lsls	r1, r1, #1
   1134c:	4299      	cmp	r1, r3
   1134e:	f63f aec0 	bhi.w	110d2 <_malloc_r+0x1c6>
   11352:	b919      	cbnz	r1, 1135c <_malloc_r+0x450>
   11354:	e6bd      	b.n	110d2 <_malloc_r+0x1c6>
   11356:	0049      	lsls	r1, r1, #1
   11358:	f10e 0e04 	add.w	lr, lr, #4
   1135c:	4219      	tst	r1, r3
   1135e:	d0fa      	beq.n	11356 <_malloc_r+0x44a>
   11360:	4670      	mov	r0, lr
   11362:	e667      	b.n	11034 <_malloc_r+0x128>
   11364:	f103 0810 	add.w	r8, r3, #16
   11368:	e6d0      	b.n	1110c <_malloc_r+0x200>
   1136a:	109a      	asrs	r2, r3, #2
   1136c:	f04f 0801 	mov.w	r8, #1
   11370:	687b      	ldr	r3, [r7, #4]
   11372:	fa08 f202 	lsl.w	r2, r8, r2
   11376:	431a      	orrs	r2, r3
   11378:	607a      	str	r2, [r7, #4]
   1137a:	e770      	b.n	1125e <_malloc_r+0x352>
   1137c:	eb02 0108 	add.w	r1, r2, r8
   11380:	4249      	negs	r1, r1
   11382:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   11386:	4651      	mov	r1, sl
   11388:	4620      	mov	r0, r4
   1138a:	9200      	str	r2, [sp, #0]
   1138c:	f001 fb70 	bl	12a70 <_sbrk_r>
   11390:	1c43      	adds	r3, r0, #1
   11392:	e9dd 2300 	ldrd	r2, r3, [sp]
   11396:	f47f aeef 	bne.w	11178 <_malloc_r+0x26c>
   1139a:	46da      	mov	sl, fp
   1139c:	e6ef      	b.n	1117e <_malloc_r+0x272>
   1139e:	2b54      	cmp	r3, #84	; 0x54
   113a0:	d825      	bhi.n	113ee <_malloc_r+0x4e2>
   113a2:	0b13      	lsrs	r3, r2, #12
   113a4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   113a8:	00c9      	lsls	r1, r1, #3
   113aa:	336e      	adds	r3, #110	; 0x6e
   113ac:	e744      	b.n	11238 <_malloc_r+0x32c>
   113ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   113b2:	d825      	bhi.n	11400 <_malloc_r+0x4f4>
   113b4:	0bf3      	lsrs	r3, r6, #15
   113b6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   113ba:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   113be:	00c3      	lsls	r3, r0, #3
   113c0:	e5ea      	b.n	10f98 <_malloc_r+0x8c>
   113c2:	4b29      	ldr	r3, [pc, #164]	; (11468 <_malloc_r+0x55c>)
   113c4:	6818      	ldr	r0, [r3, #0]
   113c6:	4440      	add	r0, r8
   113c8:	6018      	str	r0, [r3, #0]
   113ca:	e6b1      	b.n	11130 <_malloc_r+0x224>
   113cc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   113d0:	f1bc 0f00 	cmp.w	ip, #0
   113d4:	f47f aeac 	bne.w	11130 <_malloc_r+0x224>
   113d8:	68bd      	ldr	r5, [r7, #8]
   113da:	44c8      	add	r8, r9
   113dc:	f048 0001 	orr.w	r0, r8, #1
   113e0:	6068      	str	r0, [r5, #4]
   113e2:	e6f0      	b.n	111c6 <_malloc_r+0x2ba>
   113e4:	4615      	mov	r5, r2
   113e6:	e6ee      	b.n	111c6 <_malloc_r+0x2ba>
   113e8:	2301      	movs	r3, #1
   113ea:	6053      	str	r3, [r2, #4]
   113ec:	e794      	b.n	11318 <_malloc_r+0x40c>
   113ee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   113f2:	d823      	bhi.n	1143c <_malloc_r+0x530>
   113f4:	0bd3      	lsrs	r3, r2, #15
   113f6:	f103 0178 	add.w	r1, r3, #120	; 0x78
   113fa:	00c9      	lsls	r1, r1, #3
   113fc:	3377      	adds	r3, #119	; 0x77
   113fe:	e71b      	b.n	11238 <_malloc_r+0x32c>
   11400:	f240 5254 	movw	r2, #1364	; 0x554
   11404:	4293      	cmp	r3, r2
   11406:	d823      	bhi.n	11450 <_malloc_r+0x544>
   11408:	0cb3      	lsrs	r3, r6, #18
   1140a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   1140e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   11412:	00c3      	lsls	r3, r0, #3
   11414:	e5c0      	b.n	10f98 <_malloc_r+0x8c>
   11416:	f1ab 0b08 	sub.w	fp, fp, #8
   1141a:	44d8      	add	r8, fp
   1141c:	eba8 0802 	sub.w	r8, r8, r2
   11420:	f04f 0a00 	mov.w	sl, #0
   11424:	e6ab      	b.n	1117e <_malloc_r+0x272>
   11426:	f105 0108 	add.w	r1, r5, #8
   1142a:	4620      	mov	r0, r4
   1142c:	9300      	str	r3, [sp, #0]
   1142e:	f001 f9b1 	bl	12794 <_free_r>
   11432:	68bd      	ldr	r5, [r7, #8]
   11434:	9b00      	ldr	r3, [sp, #0]
   11436:	6868      	ldr	r0, [r5, #4]
   11438:	6819      	ldr	r1, [r3, #0]
   1143a:	e6c4      	b.n	111c6 <_malloc_r+0x2ba>
   1143c:	f240 5154 	movw	r1, #1364	; 0x554
   11440:	428b      	cmp	r3, r1
   11442:	d80b      	bhi.n	1145c <_malloc_r+0x550>
   11444:	0c93      	lsrs	r3, r2, #18
   11446:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   1144a:	00c9      	lsls	r1, r1, #3
   1144c:	337c      	adds	r3, #124	; 0x7c
   1144e:	e6f3      	b.n	11238 <_malloc_r+0x32c>
   11450:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   11454:	207f      	movs	r0, #127	; 0x7f
   11456:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   1145a:	e59d      	b.n	10f98 <_malloc_r+0x8c>
   1145c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   11460:	237e      	movs	r3, #126	; 0x7e
   11462:	e6e9      	b.n	11238 <_malloc_r+0x32c>
   11464:	687b      	ldr	r3, [r7, #4]
   11466:	e770      	b.n	1134a <_malloc_r+0x43e>
   11468:	20004e64 	.word	0x20004e64

0001146c <memcmp>:
   1146c:	2a03      	cmp	r2, #3
   1146e:	b570      	push	{r4, r5, r6, lr}
   11470:	d914      	bls.n	1149c <memcmp+0x30>
   11472:	ea40 0301 	orr.w	r3, r0, r1
   11476:	079b      	lsls	r3, r3, #30
   11478:	d122      	bne.n	114c0 <memcmp+0x54>
   1147a:	4604      	mov	r4, r0
   1147c:	460b      	mov	r3, r1
   1147e:	4619      	mov	r1, r3
   11480:	4620      	mov	r0, r4
   11482:	680e      	ldr	r6, [r1, #0]
   11484:	6805      	ldr	r5, [r0, #0]
   11486:	42b5      	cmp	r5, r6
   11488:	f104 0404 	add.w	r4, r4, #4
   1148c:	f103 0304 	add.w	r3, r3, #4
   11490:	d116      	bne.n	114c0 <memcmp+0x54>
   11492:	3a04      	subs	r2, #4
   11494:	2a03      	cmp	r2, #3
   11496:	4620      	mov	r0, r4
   11498:	4619      	mov	r1, r3
   1149a:	d8f0      	bhi.n	1147e <memcmp+0x12>
   1149c:	1e54      	subs	r4, r2, #1
   1149e:	b19a      	cbz	r2, 114c8 <memcmp+0x5c>
   114a0:	1e42      	subs	r2, r0, #1
   114a2:	3901      	subs	r1, #1
   114a4:	e001      	b.n	114aa <memcmp+0x3e>
   114a6:	18c3      	adds	r3, r0, r3
   114a8:	d00c      	beq.n	114c4 <memcmp+0x58>
   114aa:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   114ae:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   114b2:	45e6      	cmp	lr, ip
   114b4:	eba4 0302 	sub.w	r3, r4, r2
   114b8:	d0f5      	beq.n	114a6 <memcmp+0x3a>
   114ba:	ebae 000c 	sub.w	r0, lr, ip
   114be:	bd70      	pop	{r4, r5, r6, pc}
   114c0:	1e54      	subs	r4, r2, #1
   114c2:	e7ed      	b.n	114a0 <memcmp+0x34>
   114c4:	4618      	mov	r0, r3
   114c6:	bd70      	pop	{r4, r5, r6, pc}
   114c8:	4610      	mov	r0, r2
   114ca:	bd70      	pop	{r4, r5, r6, pc}

000114cc <memmove>:
   114cc:	4288      	cmp	r0, r1
   114ce:	d90d      	bls.n	114ec <memmove+0x20>
   114d0:	188b      	adds	r3, r1, r2
   114d2:	4283      	cmp	r3, r0
   114d4:	d90a      	bls.n	114ec <memmove+0x20>
   114d6:	eb00 0c02 	add.w	ip, r0, r2
   114da:	b1ba      	cbz	r2, 1150c <memmove+0x40>
   114dc:	4662      	mov	r2, ip
   114de:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   114e2:	f802 cd01 	strb.w	ip, [r2, #-1]!
   114e6:	4299      	cmp	r1, r3
   114e8:	d1f9      	bne.n	114de <memmove+0x12>
   114ea:	4770      	bx	lr
   114ec:	2a0f      	cmp	r2, #15
   114ee:	d80e      	bhi.n	1150e <memmove+0x42>
   114f0:	4603      	mov	r3, r0
   114f2:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   114f6:	b14a      	cbz	r2, 1150c <memmove+0x40>
   114f8:	f10c 0c01 	add.w	ip, ip, #1
   114fc:	3b01      	subs	r3, #1
   114fe:	448c      	add	ip, r1
   11500:	f811 2b01 	ldrb.w	r2, [r1], #1
   11504:	f803 2f01 	strb.w	r2, [r3, #1]!
   11508:	4561      	cmp	r1, ip
   1150a:	d1f9      	bne.n	11500 <memmove+0x34>
   1150c:	4770      	bx	lr
   1150e:	ea40 0301 	orr.w	r3, r0, r1
   11512:	079b      	lsls	r3, r3, #30
   11514:	d150      	bne.n	115b8 <memmove+0xec>
   11516:	f1a2 0310 	sub.w	r3, r2, #16
   1151a:	b570      	push	{r4, r5, r6, lr}
   1151c:	f101 0c20 	add.w	ip, r1, #32
   11520:	f023 050f 	bic.w	r5, r3, #15
   11524:	f101 0e10 	add.w	lr, r1, #16
   11528:	f100 0410 	add.w	r4, r0, #16
   1152c:	44ac      	add	ip, r5
   1152e:	091b      	lsrs	r3, r3, #4
   11530:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   11534:	f844 5c10 	str.w	r5, [r4, #-16]
   11538:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   1153c:	f844 5c0c 	str.w	r5, [r4, #-12]
   11540:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   11544:	f844 5c08 	str.w	r5, [r4, #-8]
   11548:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   1154c:	f844 5c04 	str.w	r5, [r4, #-4]
   11550:	f10e 0e10 	add.w	lr, lr, #16
   11554:	45e6      	cmp	lr, ip
   11556:	f104 0410 	add.w	r4, r4, #16
   1155a:	d1e9      	bne.n	11530 <memmove+0x64>
   1155c:	3301      	adds	r3, #1
   1155e:	f012 0f0c 	tst.w	r2, #12
   11562:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   11566:	f002 040f 	and.w	r4, r2, #15
   1156a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   1156e:	d027      	beq.n	115c0 <memmove+0xf4>
   11570:	3c04      	subs	r4, #4
   11572:	f024 0603 	bic.w	r6, r4, #3
   11576:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1157a:	441e      	add	r6, r3
   1157c:	1f1c      	subs	r4, r3, #4
   1157e:	468e      	mov	lr, r1
   11580:	f85e 5b04 	ldr.w	r5, [lr], #4
   11584:	f844 5f04 	str.w	r5, [r4, #4]!
   11588:	42b4      	cmp	r4, r6
   1158a:	d1f9      	bne.n	11580 <memmove+0xb4>
   1158c:	f10c 0401 	add.w	r4, ip, #1
   11590:	f002 0203 	and.w	r2, r2, #3
   11594:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   11598:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1159c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   115a0:	b14a      	cbz	r2, 115b6 <memmove+0xea>
   115a2:	f10c 0c01 	add.w	ip, ip, #1
   115a6:	3b01      	subs	r3, #1
   115a8:	448c      	add	ip, r1
   115aa:	f811 2b01 	ldrb.w	r2, [r1], #1
   115ae:	f803 2f01 	strb.w	r2, [r3, #1]!
   115b2:	4561      	cmp	r1, ip
   115b4:	d1f9      	bne.n	115aa <memmove+0xde>
   115b6:	bd70      	pop	{r4, r5, r6, pc}
   115b8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   115bc:	4603      	mov	r3, r0
   115be:	e79b      	b.n	114f8 <memmove+0x2c>
   115c0:	4622      	mov	r2, r4
   115c2:	e7eb      	b.n	1159c <memmove+0xd0>

000115c4 <__assert_func>:
   115c4:	b500      	push	{lr}
   115c6:	4c0b      	ldr	r4, [pc, #44]	; (115f4 <__assert_func+0x30>)
   115c8:	6825      	ldr	r5, [r4, #0]
   115ca:	4614      	mov	r4, r2
   115cc:	68ee      	ldr	r6, [r5, #12]
   115ce:	461a      	mov	r2, r3
   115d0:	b085      	sub	sp, #20
   115d2:	4603      	mov	r3, r0
   115d4:	460d      	mov	r5, r1
   115d6:	b14c      	cbz	r4, 115ec <__assert_func+0x28>
   115d8:	4907      	ldr	r1, [pc, #28]	; (115f8 <__assert_func+0x34>)
   115da:	9500      	str	r5, [sp, #0]
   115dc:	e9cd 1401 	strd	r1, r4, [sp, #4]
   115e0:	4630      	mov	r0, r6
   115e2:	4906      	ldr	r1, [pc, #24]	; (115fc <__assert_func+0x38>)
   115e4:	f001 f9dc 	bl	129a0 <fiprintf>
   115e8:	f7fc fd5d 	bl	e0a6 <abort>
   115ec:	4904      	ldr	r1, [pc, #16]	; (11600 <__assert_func+0x3c>)
   115ee:	460c      	mov	r4, r1
   115f0:	e7f3      	b.n	115da <__assert_func+0x16>
   115f2:	bf00      	nop
   115f4:	2000395c 	.word	0x2000395c
   115f8:	2000263c 	.word	0x2000263c
   115fc:	2000264c 	.word	0x2000264c
   11600:	20001f9c 	.word	0x20001f9c

00011604 <memset>:
   11604:	0783      	lsls	r3, r0, #30
   11606:	b530      	push	{r4, r5, lr}
   11608:	d048      	beq.n	1169c <memset+0x98>
   1160a:	1e54      	subs	r4, r2, #1
   1160c:	2a00      	cmp	r2, #0
   1160e:	d03f      	beq.n	11690 <memset+0x8c>
   11610:	b2ca      	uxtb	r2, r1
   11612:	4603      	mov	r3, r0
   11614:	e001      	b.n	1161a <memset+0x16>
   11616:	3c01      	subs	r4, #1
   11618:	d33a      	bcc.n	11690 <memset+0x8c>
   1161a:	f803 2b01 	strb.w	r2, [r3], #1
   1161e:	079d      	lsls	r5, r3, #30
   11620:	d1f9      	bne.n	11616 <memset+0x12>
   11622:	2c03      	cmp	r4, #3
   11624:	d92d      	bls.n	11682 <memset+0x7e>
   11626:	b2cd      	uxtb	r5, r1
   11628:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1162c:	2c0f      	cmp	r4, #15
   1162e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11632:	d936      	bls.n	116a2 <memset+0x9e>
   11634:	f1a4 0210 	sub.w	r2, r4, #16
   11638:	f022 0c0f 	bic.w	ip, r2, #15
   1163c:	f103 0e20 	add.w	lr, r3, #32
   11640:	44e6      	add	lr, ip
   11642:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   11646:	f103 0210 	add.w	r2, r3, #16
   1164a:	e942 5504 	strd	r5, r5, [r2, #-16]
   1164e:	e942 5502 	strd	r5, r5, [r2, #-8]
   11652:	3210      	adds	r2, #16
   11654:	4572      	cmp	r2, lr
   11656:	d1f8      	bne.n	1164a <memset+0x46>
   11658:	f10c 0201 	add.w	r2, ip, #1
   1165c:	f014 0f0c 	tst.w	r4, #12
   11660:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   11664:	f004 0c0f 	and.w	ip, r4, #15
   11668:	d013      	beq.n	11692 <memset+0x8e>
   1166a:	f1ac 0304 	sub.w	r3, ip, #4
   1166e:	f023 0303 	bic.w	r3, r3, #3
   11672:	3304      	adds	r3, #4
   11674:	4413      	add	r3, r2
   11676:	f842 5b04 	str.w	r5, [r2], #4
   1167a:	4293      	cmp	r3, r2
   1167c:	d1fb      	bne.n	11676 <memset+0x72>
   1167e:	f00c 0403 	and.w	r4, ip, #3
   11682:	b12c      	cbz	r4, 11690 <memset+0x8c>
   11684:	b2c9      	uxtb	r1, r1
   11686:	441c      	add	r4, r3
   11688:	f803 1b01 	strb.w	r1, [r3], #1
   1168c:	429c      	cmp	r4, r3
   1168e:	d1fb      	bne.n	11688 <memset+0x84>
   11690:	bd30      	pop	{r4, r5, pc}
   11692:	4664      	mov	r4, ip
   11694:	4613      	mov	r3, r2
   11696:	2c00      	cmp	r4, #0
   11698:	d1f4      	bne.n	11684 <memset+0x80>
   1169a:	e7f9      	b.n	11690 <memset+0x8c>
   1169c:	4603      	mov	r3, r0
   1169e:	4614      	mov	r4, r2
   116a0:	e7bf      	b.n	11622 <memset+0x1e>
   116a2:	461a      	mov	r2, r3
   116a4:	46a4      	mov	ip, r4
   116a6:	e7e0      	b.n	1166a <memset+0x66>

000116a8 <__cxa_atexit>:
   116a8:	4613      	mov	r3, r2
   116aa:	460a      	mov	r2, r1
   116ac:	4601      	mov	r1, r0
   116ae:	2002      	movs	r0, #2
   116b0:	f002 ba6c 	b.w	13b8c <__register_exitproc>

000116b4 <fcvtf>:
   116b4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   116b8:	2300      	movs	r3, #0
   116ba:	f002 bac1 	b.w	13c40 <fcvtbuf>
   116be:	bf00      	nop

000116c0 <__libc_init_array>:
   116c0:	b570      	push	{r4, r5, r6, lr}
   116c2:	4e0d      	ldr	r6, [pc, #52]	; (116f8 <__libc_init_array+0x38>)
   116c4:	4d0d      	ldr	r5, [pc, #52]	; (116fc <__libc_init_array+0x3c>)
   116c6:	1b76      	subs	r6, r6, r5
   116c8:	10b6      	asrs	r6, r6, #2
   116ca:	d006      	beq.n	116da <__libc_init_array+0x1a>
   116cc:	2400      	movs	r4, #0
   116ce:	f855 3b04 	ldr.w	r3, [r5], #4
   116d2:	3401      	adds	r4, #1
   116d4:	4798      	blx	r3
   116d6:	42a6      	cmp	r6, r4
   116d8:	d1f9      	bne.n	116ce <__libc_init_array+0xe>
   116da:	4e09      	ldr	r6, [pc, #36]	; (11700 <__libc_init_array+0x40>)
   116dc:	4d09      	ldr	r5, [pc, #36]	; (11704 <__libc_init_array+0x44>)
   116de:	1b76      	subs	r6, r6, r5
   116e0:	f003 ff96 	bl	15610 <___init_veneer>
   116e4:	10b6      	asrs	r6, r6, #2
   116e6:	d006      	beq.n	116f6 <__libc_init_array+0x36>
   116e8:	2400      	movs	r4, #0
   116ea:	f855 3b04 	ldr.w	r3, [r5], #4
   116ee:	3401      	adds	r4, #1
   116f0:	4798      	blx	r3
   116f2:	42a6      	cmp	r6, r4
   116f4:	d1f9      	bne.n	116ea <__libc_init_array+0x2a>
   116f6:	bd70      	pop	{r4, r5, r6, pc}
   116f8:	60001f90 	.word	0x60001f90
   116fc:	60001f90 	.word	0x60001f90
   11700:	60001fa8 	.word	0x60001fa8
   11704:	60001f90 	.word	0x60001f90

00011708 <__retarget_lock_init_recursive>:
   11708:	4770      	bx	lr
   1170a:	bf00      	nop

0001170c <__retarget_lock_close_recursive>:
   1170c:	4770      	bx	lr
   1170e:	bf00      	nop

00011710 <__retarget_lock_acquire_recursive>:
   11710:	4770      	bx	lr
   11712:	bf00      	nop

00011714 <__retarget_lock_release_recursive>:
   11714:	4770      	bx	lr
   11716:	bf00      	nop

00011718 <__locale_mb_cur_max>:
   11718:	4b01      	ldr	r3, [pc, #4]	; (11720 <__locale_mb_cur_max+0x8>)
   1171a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   1171e:	4770      	bx	lr
   11720:	200033d4 	.word	0x200033d4

00011724 <strcpy>:
   11724:	ea80 0201 	eor.w	r2, r0, r1
   11728:	4684      	mov	ip, r0
   1172a:	f012 0f03 	tst.w	r2, #3
   1172e:	d14f      	bne.n	117d0 <strcpy+0xac>
   11730:	f011 0f03 	tst.w	r1, #3
   11734:	d132      	bne.n	1179c <strcpy+0x78>
   11736:	f84d 4d04 	str.w	r4, [sp, #-4]!
   1173a:	f011 0f04 	tst.w	r1, #4
   1173e:	f851 3b04 	ldr.w	r3, [r1], #4
   11742:	d00b      	beq.n	1175c <strcpy+0x38>
   11744:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11748:	439a      	bics	r2, r3
   1174a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1174e:	bf04      	itt	eq
   11750:	f84c 3b04 	streq.w	r3, [ip], #4
   11754:	f851 3b04 	ldreq.w	r3, [r1], #4
   11758:	d116      	bne.n	11788 <strcpy+0x64>
   1175a:	bf00      	nop
   1175c:	f851 4b04 	ldr.w	r4, [r1], #4
   11760:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11764:	439a      	bics	r2, r3
   11766:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1176a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   1176e:	d10b      	bne.n	11788 <strcpy+0x64>
   11770:	f84c 3b04 	str.w	r3, [ip], #4
   11774:	43a2      	bics	r2, r4
   11776:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   1177a:	bf04      	itt	eq
   1177c:	f851 3b04 	ldreq.w	r3, [r1], #4
   11780:	f84c 4b04 	streq.w	r4, [ip], #4
   11784:	d0ea      	beq.n	1175c <strcpy+0x38>
   11786:	4623      	mov	r3, r4
   11788:	f80c 3b01 	strb.w	r3, [ip], #1
   1178c:	f013 0fff 	tst.w	r3, #255	; 0xff
   11790:	ea4f 2333 	mov.w	r3, r3, ror #8
   11794:	d1f8      	bne.n	11788 <strcpy+0x64>
   11796:	f85d 4b04 	ldr.w	r4, [sp], #4
   1179a:	4770      	bx	lr
   1179c:	f011 0f01 	tst.w	r1, #1
   117a0:	d006      	beq.n	117b0 <strcpy+0x8c>
   117a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   117a6:	f80c 2b01 	strb.w	r2, [ip], #1
   117aa:	2a00      	cmp	r2, #0
   117ac:	bf08      	it	eq
   117ae:	4770      	bxeq	lr
   117b0:	f011 0f02 	tst.w	r1, #2
   117b4:	d0bf      	beq.n	11736 <strcpy+0x12>
   117b6:	f831 2b02 	ldrh.w	r2, [r1], #2
   117ba:	f012 0fff 	tst.w	r2, #255	; 0xff
   117be:	bf16      	itet	ne
   117c0:	f82c 2b02 	strhne.w	r2, [ip], #2
   117c4:	f88c 2000 	strbeq.w	r2, [ip]
   117c8:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   117cc:	d1b3      	bne.n	11736 <strcpy+0x12>
   117ce:	4770      	bx	lr
   117d0:	f811 2b01 	ldrb.w	r2, [r1], #1
   117d4:	f80c 2b01 	strb.w	r2, [ip], #1
   117d8:	2a00      	cmp	r2, #0
   117da:	d1f9      	bne.n	117d0 <strcpy+0xac>
   117dc:	4770      	bx	lr
   117de:	bf00      	nop

000117e0 <__malloc_lock>:
   117e0:	4801      	ldr	r0, [pc, #4]	; (117e8 <__malloc_lock+0x8>)
   117e2:	f7ff bf95 	b.w	11710 <__retarget_lock_acquire_recursive>
   117e6:	bf00      	nop
   117e8:	20004e5c 	.word	0x20004e5c

000117ec <__malloc_unlock>:
   117ec:	4801      	ldr	r0, [pc, #4]	; (117f4 <__malloc_unlock+0x8>)
   117ee:	f7ff bf91 	b.w	11714 <__retarget_lock_release_recursive>
   117f2:	bf00      	nop
   117f4:	20004e5c 	.word	0x20004e5c

000117f8 <_Balloc>:
   117f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   117fa:	b570      	push	{r4, r5, r6, lr}
   117fc:	4605      	mov	r5, r0
   117fe:	460c      	mov	r4, r1
   11800:	b14b      	cbz	r3, 11816 <_Balloc+0x1e>
   11802:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11806:	b180      	cbz	r0, 1182a <_Balloc+0x32>
   11808:	6802      	ldr	r2, [r0, #0]
   1180a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1180e:	2300      	movs	r3, #0
   11810:	e9c0 3303 	strd	r3, r3, [r0, #12]
   11814:	bd70      	pop	{r4, r5, r6, pc}
   11816:	2221      	movs	r2, #33	; 0x21
   11818:	2104      	movs	r1, #4
   1181a:	f000 fba9 	bl	11f70 <_calloc_r>
   1181e:	4603      	mov	r3, r0
   11820:	6468      	str	r0, [r5, #68]	; 0x44
   11822:	2800      	cmp	r0, #0
   11824:	d1ed      	bne.n	11802 <_Balloc+0xa>
   11826:	2000      	movs	r0, #0
   11828:	bd70      	pop	{r4, r5, r6, pc}
   1182a:	2101      	movs	r1, #1
   1182c:	fa01 f604 	lsl.w	r6, r1, r4
   11830:	1d72      	adds	r2, r6, #5
   11832:	0092      	lsls	r2, r2, #2
   11834:	4628      	mov	r0, r5
   11836:	f000 fb9b 	bl	11f70 <_calloc_r>
   1183a:	2800      	cmp	r0, #0
   1183c:	d0f3      	beq.n	11826 <_Balloc+0x2e>
   1183e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   11842:	e7e4      	b.n	1180e <_Balloc+0x16>

00011844 <_Bfree>:
   11844:	b131      	cbz	r1, 11854 <_Bfree+0x10>
   11846:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11848:	684a      	ldr	r2, [r1, #4]
   1184a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1184e:	6008      	str	r0, [r1, #0]
   11850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   11854:	4770      	bx	lr
   11856:	bf00      	nop

00011858 <__multadd>:
   11858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1185c:	690e      	ldr	r6, [r1, #16]
   1185e:	4680      	mov	r8, r0
   11860:	460f      	mov	r7, r1
   11862:	461d      	mov	r5, r3
   11864:	f101 0e14 	add.w	lr, r1, #20
   11868:	2000      	movs	r0, #0
   1186a:	f8de 1000 	ldr.w	r1, [lr]
   1186e:	b28c      	uxth	r4, r1
   11870:	fb02 5304 	mla	r3, r2, r4, r5
   11874:	0c09      	lsrs	r1, r1, #16
   11876:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1187a:	fb02 cc01 	mla	ip, r2, r1, ip
   1187e:	3001      	adds	r0, #1
   11880:	b29c      	uxth	r4, r3
   11882:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   11886:	4286      	cmp	r6, r0
   11888:	f84e 4b04 	str.w	r4, [lr], #4
   1188c:	ea4f 451c 	mov.w	r5, ip, lsr #16
   11890:	dceb      	bgt.n	1186a <__multadd+0x12>
   11892:	b13d      	cbz	r5, 118a4 <__multadd+0x4c>
   11894:	68bb      	ldr	r3, [r7, #8]
   11896:	42b3      	cmp	r3, r6
   11898:	dd07      	ble.n	118aa <__multadd+0x52>
   1189a:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   1189e:	3601      	adds	r6, #1
   118a0:	615d      	str	r5, [r3, #20]
   118a2:	613e      	str	r6, [r7, #16]
   118a4:	4638      	mov	r0, r7
   118a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   118aa:	6879      	ldr	r1, [r7, #4]
   118ac:	4640      	mov	r0, r8
   118ae:	3101      	adds	r1, #1
   118b0:	f7ff ffa2 	bl	117f8 <_Balloc>
   118b4:	4604      	mov	r4, r0
   118b6:	b1b0      	cbz	r0, 118e6 <__multadd+0x8e>
   118b8:	693a      	ldr	r2, [r7, #16]
   118ba:	3202      	adds	r2, #2
   118bc:	f107 010c 	add.w	r1, r7, #12
   118c0:	0092      	lsls	r2, r2, #2
   118c2:	300c      	adds	r0, #12
   118c4:	f7fb fdd4 	bl	d470 <memcpy>
   118c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   118cc:	687a      	ldr	r2, [r7, #4]
   118ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   118d2:	6039      	str	r1, [r7, #0]
   118d4:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   118d8:	4627      	mov	r7, r4
   118da:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   118de:	3601      	adds	r6, #1
   118e0:	615d      	str	r5, [r3, #20]
   118e2:	613e      	str	r6, [r7, #16]
   118e4:	e7de      	b.n	118a4 <__multadd+0x4c>
   118e6:	4b03      	ldr	r3, [pc, #12]	; (118f4 <__multadd+0x9c>)
   118e8:	4803      	ldr	r0, [pc, #12]	; (118f8 <__multadd+0xa0>)
   118ea:	4622      	mov	r2, r4
   118ec:	21ba      	movs	r1, #186	; 0xba
   118ee:	f7ff fe69 	bl	115c4 <__assert_func>
   118f2:	bf00      	nop
   118f4:	2000267c 	.word	0x2000267c
   118f8:	20002690 	.word	0x20002690

000118fc <__hi0bits>:
   118fc:	0c03      	lsrs	r3, r0, #16
   118fe:	041b      	lsls	r3, r3, #16
   11900:	b9d3      	cbnz	r3, 11938 <__hi0bits+0x3c>
   11902:	0400      	lsls	r0, r0, #16
   11904:	2310      	movs	r3, #16
   11906:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   1190a:	bf04      	itt	eq
   1190c:	0200      	lsleq	r0, r0, #8
   1190e:	3308      	addeq	r3, #8
   11910:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   11914:	bf04      	itt	eq
   11916:	0100      	lsleq	r0, r0, #4
   11918:	3304      	addeq	r3, #4
   1191a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   1191e:	bf04      	itt	eq
   11920:	0080      	lsleq	r0, r0, #2
   11922:	3302      	addeq	r3, #2
   11924:	2800      	cmp	r0, #0
   11926:	db05      	blt.n	11934 <__hi0bits+0x38>
   11928:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   1192c:	f103 0301 	add.w	r3, r3, #1
   11930:	bf08      	it	eq
   11932:	2320      	moveq	r3, #32
   11934:	4618      	mov	r0, r3
   11936:	4770      	bx	lr
   11938:	2300      	movs	r3, #0
   1193a:	e7e4      	b.n	11906 <__hi0bits+0xa>

0001193c <__lo0bits>:
   1193c:	6803      	ldr	r3, [r0, #0]
   1193e:	f013 0207 	ands.w	r2, r3, #7
   11942:	d008      	beq.n	11956 <__lo0bits+0x1a>
   11944:	07d9      	lsls	r1, r3, #31
   11946:	d41f      	bmi.n	11988 <__lo0bits+0x4c>
   11948:	079a      	lsls	r2, r3, #30
   1194a:	d522      	bpl.n	11992 <__lo0bits+0x56>
   1194c:	085b      	lsrs	r3, r3, #1
   1194e:	6003      	str	r3, [r0, #0]
   11950:	2201      	movs	r2, #1
   11952:	4610      	mov	r0, r2
   11954:	4770      	bx	lr
   11956:	b299      	uxth	r1, r3
   11958:	b909      	cbnz	r1, 1195e <__lo0bits+0x22>
   1195a:	0c1b      	lsrs	r3, r3, #16
   1195c:	2210      	movs	r2, #16
   1195e:	b2d9      	uxtb	r1, r3
   11960:	b909      	cbnz	r1, 11966 <__lo0bits+0x2a>
   11962:	3208      	adds	r2, #8
   11964:	0a1b      	lsrs	r3, r3, #8
   11966:	0719      	lsls	r1, r3, #28
   11968:	bf04      	itt	eq
   1196a:	091b      	lsreq	r3, r3, #4
   1196c:	3204      	addeq	r2, #4
   1196e:	0799      	lsls	r1, r3, #30
   11970:	bf04      	itt	eq
   11972:	089b      	lsreq	r3, r3, #2
   11974:	3202      	addeq	r2, #2
   11976:	07d9      	lsls	r1, r3, #31
   11978:	d403      	bmi.n	11982 <__lo0bits+0x46>
   1197a:	085b      	lsrs	r3, r3, #1
   1197c:	f102 0201 	add.w	r2, r2, #1
   11980:	d005      	beq.n	1198e <__lo0bits+0x52>
   11982:	6003      	str	r3, [r0, #0]
   11984:	4610      	mov	r0, r2
   11986:	4770      	bx	lr
   11988:	2200      	movs	r2, #0
   1198a:	4610      	mov	r0, r2
   1198c:	4770      	bx	lr
   1198e:	2220      	movs	r2, #32
   11990:	e7df      	b.n	11952 <__lo0bits+0x16>
   11992:	089b      	lsrs	r3, r3, #2
   11994:	2202      	movs	r2, #2
   11996:	6003      	str	r3, [r0, #0]
   11998:	4610      	mov	r0, r2
   1199a:	4770      	bx	lr

0001199c <__i2b>:
   1199c:	b538      	push	{r3, r4, r5, lr}
   1199e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   119a0:	4604      	mov	r4, r0
   119a2:	460d      	mov	r5, r1
   119a4:	b14b      	cbz	r3, 119ba <__i2b+0x1e>
   119a6:	6858      	ldr	r0, [r3, #4]
   119a8:	b1b0      	cbz	r0, 119d8 <__i2b+0x3c>
   119aa:	6802      	ldr	r2, [r0, #0]
   119ac:	605a      	str	r2, [r3, #4]
   119ae:	2200      	movs	r2, #0
   119b0:	2301      	movs	r3, #1
   119b2:	e9c0 3504 	strd	r3, r5, [r0, #16]
   119b6:	60c2      	str	r2, [r0, #12]
   119b8:	bd38      	pop	{r3, r4, r5, pc}
   119ba:	2221      	movs	r2, #33	; 0x21
   119bc:	2104      	movs	r1, #4
   119be:	f000 fad7 	bl	11f70 <_calloc_r>
   119c2:	4603      	mov	r3, r0
   119c4:	6460      	str	r0, [r4, #68]	; 0x44
   119c6:	2800      	cmp	r0, #0
   119c8:	d1ed      	bne.n	119a6 <__i2b+0xa>
   119ca:	4b09      	ldr	r3, [pc, #36]	; (119f0 <__i2b+0x54>)
   119cc:	4809      	ldr	r0, [pc, #36]	; (119f4 <__i2b+0x58>)
   119ce:	2200      	movs	r2, #0
   119d0:	f240 1145 	movw	r1, #325	; 0x145
   119d4:	f7ff fdf6 	bl	115c4 <__assert_func>
   119d8:	221c      	movs	r2, #28
   119da:	2101      	movs	r1, #1
   119dc:	4620      	mov	r0, r4
   119de:	f000 fac7 	bl	11f70 <_calloc_r>
   119e2:	2800      	cmp	r0, #0
   119e4:	d0f1      	beq.n	119ca <__i2b+0x2e>
   119e6:	2201      	movs	r2, #1
   119e8:	2302      	movs	r3, #2
   119ea:	e9c0 2301 	strd	r2, r3, [r0, #4]
   119ee:	e7de      	b.n	119ae <__i2b+0x12>
   119f0:	2000267c 	.word	0x2000267c
   119f4:	20002690 	.word	0x20002690

000119f8 <__multiply>:
   119f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119fc:	690e      	ldr	r6, [r1, #16]
   119fe:	6915      	ldr	r5, [r2, #16]
   11a00:	42ae      	cmp	r6, r5
   11a02:	b085      	sub	sp, #20
   11a04:	4688      	mov	r8, r1
   11a06:	4614      	mov	r4, r2
   11a08:	db05      	blt.n	11a16 <__multiply+0x1e>
   11a0a:	462a      	mov	r2, r5
   11a0c:	4623      	mov	r3, r4
   11a0e:	4635      	mov	r5, r6
   11a10:	460c      	mov	r4, r1
   11a12:	4616      	mov	r6, r2
   11a14:	4698      	mov	r8, r3
   11a16:	68a3      	ldr	r3, [r4, #8]
   11a18:	6861      	ldr	r1, [r4, #4]
   11a1a:	19af      	adds	r7, r5, r6
   11a1c:	42bb      	cmp	r3, r7
   11a1e:	bfb8      	it	lt
   11a20:	3101      	addlt	r1, #1
   11a22:	f7ff fee9 	bl	117f8 <_Balloc>
   11a26:	9001      	str	r0, [sp, #4]
   11a28:	2800      	cmp	r0, #0
   11a2a:	f000 8087 	beq.w	11b3c <__multiply+0x144>
   11a2e:	9b01      	ldr	r3, [sp, #4]
   11a30:	f103 0914 	add.w	r9, r3, #20
   11a34:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   11a38:	45d1      	cmp	r9, sl
   11a3a:	d205      	bcs.n	11a48 <__multiply+0x50>
   11a3c:	464b      	mov	r3, r9
   11a3e:	2200      	movs	r2, #0
   11a40:	f843 2b04 	str.w	r2, [r3], #4
   11a44:	459a      	cmp	sl, r3
   11a46:	d8fb      	bhi.n	11a40 <__multiply+0x48>
   11a48:	f108 0814 	add.w	r8, r8, #20
   11a4c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   11a50:	f104 0314 	add.w	r3, r4, #20
   11a54:	45d8      	cmp	r8, fp
   11a56:	461a      	mov	r2, r3
   11a58:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   11a5c:	d25f      	bcs.n	11b1e <__multiply+0x126>
   11a5e:	1b2b      	subs	r3, r5, r4
   11a60:	3b15      	subs	r3, #21
   11a62:	f023 0303 	bic.w	r3, r3, #3
   11a66:	3304      	adds	r3, #4
   11a68:	3415      	adds	r4, #21
   11a6a:	42a5      	cmp	r5, r4
   11a6c:	bf38      	it	cc
   11a6e:	2304      	movcc	r3, #4
   11a70:	e9cd a702 	strd	sl, r7, [sp, #8]
   11a74:	46ac      	mov	ip, r5
   11a76:	461f      	mov	r7, r3
   11a78:	4692      	mov	sl, r2
   11a7a:	e005      	b.n	11a88 <__multiply+0x90>
   11a7c:	0c09      	lsrs	r1, r1, #16
   11a7e:	d129      	bne.n	11ad4 <__multiply+0xdc>
   11a80:	45c3      	cmp	fp, r8
   11a82:	f109 0904 	add.w	r9, r9, #4
   11a86:	d948      	bls.n	11b1a <__multiply+0x122>
   11a88:	f858 1b04 	ldr.w	r1, [r8], #4
   11a8c:	b28d      	uxth	r5, r1
   11a8e:	2d00      	cmp	r5, #0
   11a90:	d0f4      	beq.n	11a7c <__multiply+0x84>
   11a92:	4656      	mov	r6, sl
   11a94:	464c      	mov	r4, r9
   11a96:	2300      	movs	r3, #0
   11a98:	f856 1b04 	ldr.w	r1, [r6], #4
   11a9c:	6822      	ldr	r2, [r4, #0]
   11a9e:	fa1f fe81 	uxth.w	lr, r1
   11aa2:	b290      	uxth	r0, r2
   11aa4:	0c09      	lsrs	r1, r1, #16
   11aa6:	fb05 000e 	mla	r0, r5, lr, r0
   11aaa:	0c12      	lsrs	r2, r2, #16
   11aac:	4403      	add	r3, r0
   11aae:	fb05 2201 	mla	r2, r5, r1, r2
   11ab2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11ab6:	b29b      	uxth	r3, r3
   11ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   11abc:	45b4      	cmp	ip, r6
   11abe:	f844 3b04 	str.w	r3, [r4], #4
   11ac2:	ea4f 4312 	mov.w	r3, r2, lsr #16
   11ac6:	d8e7      	bhi.n	11a98 <__multiply+0xa0>
   11ac8:	f849 3007 	str.w	r3, [r9, r7]
   11acc:	f858 1c04 	ldr.w	r1, [r8, #-4]
   11ad0:	0c09      	lsrs	r1, r1, #16
   11ad2:	d0d5      	beq.n	11a80 <__multiply+0x88>
   11ad4:	f8d9 3000 	ldr.w	r3, [r9]
   11ad8:	4650      	mov	r0, sl
   11ada:	461a      	mov	r2, r3
   11adc:	464c      	mov	r4, r9
   11ade:	2600      	movs	r6, #0
   11ae0:	8805      	ldrh	r5, [r0, #0]
   11ae2:	0c12      	lsrs	r2, r2, #16
   11ae4:	fb01 2205 	mla	r2, r1, r5, r2
   11ae8:	4416      	add	r6, r2
   11aea:	b29b      	uxth	r3, r3
   11aec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   11af0:	f844 3b04 	str.w	r3, [r4], #4
   11af4:	f850 5b04 	ldr.w	r5, [r0], #4
   11af8:	6822      	ldr	r2, [r4, #0]
   11afa:	0c2d      	lsrs	r5, r5, #16
   11afc:	b293      	uxth	r3, r2
   11afe:	fb01 3305 	mla	r3, r1, r5, r3
   11b02:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   11b06:	4584      	cmp	ip, r0
   11b08:	ea4f 4613 	mov.w	r6, r3, lsr #16
   11b0c:	d8e8      	bhi.n	11ae0 <__multiply+0xe8>
   11b0e:	45c3      	cmp	fp, r8
   11b10:	f849 3007 	str.w	r3, [r9, r7]
   11b14:	f109 0904 	add.w	r9, r9, #4
   11b18:	d8b6      	bhi.n	11a88 <__multiply+0x90>
   11b1a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   11b1e:	2f00      	cmp	r7, #0
   11b20:	dc02      	bgt.n	11b28 <__multiply+0x130>
   11b22:	e005      	b.n	11b30 <__multiply+0x138>
   11b24:	3f01      	subs	r7, #1
   11b26:	d003      	beq.n	11b30 <__multiply+0x138>
   11b28:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   11b2c:	2b00      	cmp	r3, #0
   11b2e:	d0f9      	beq.n	11b24 <__multiply+0x12c>
   11b30:	9b01      	ldr	r3, [sp, #4]
   11b32:	4618      	mov	r0, r3
   11b34:	611f      	str	r7, [r3, #16]
   11b36:	b005      	add	sp, #20
   11b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b3c:	4b03      	ldr	r3, [pc, #12]	; (11b4c <__multiply+0x154>)
   11b3e:	4804      	ldr	r0, [pc, #16]	; (11b50 <__multiply+0x158>)
   11b40:	9a01      	ldr	r2, [sp, #4]
   11b42:	f44f 71b1 	mov.w	r1, #354	; 0x162
   11b46:	f7ff fd3d 	bl	115c4 <__assert_func>
   11b4a:	bf00      	nop
   11b4c:	2000267c 	.word	0x2000267c
   11b50:	20002690 	.word	0x20002690

00011b54 <__pow5mult>:
   11b54:	f012 0303 	ands.w	r3, r2, #3
   11b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b5c:	4614      	mov	r4, r2
   11b5e:	4606      	mov	r6, r0
   11b60:	d132      	bne.n	11bc8 <__pow5mult+0x74>
   11b62:	460d      	mov	r5, r1
   11b64:	10a4      	asrs	r4, r4, #2
   11b66:	d020      	beq.n	11baa <__pow5mult+0x56>
   11b68:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   11b6c:	f1b8 0f00 	cmp.w	r8, #0
   11b70:	d033      	beq.n	11bda <__pow5mult+0x86>
   11b72:	07e3      	lsls	r3, r4, #31
   11b74:	f04f 0700 	mov.w	r7, #0
   11b78:	d407      	bmi.n	11b8a <__pow5mult+0x36>
   11b7a:	1064      	asrs	r4, r4, #1
   11b7c:	d015      	beq.n	11baa <__pow5mult+0x56>
   11b7e:	f8d8 0000 	ldr.w	r0, [r8]
   11b82:	b1a8      	cbz	r0, 11bb0 <__pow5mult+0x5c>
   11b84:	4680      	mov	r8, r0
   11b86:	07e3      	lsls	r3, r4, #31
   11b88:	d5f7      	bpl.n	11b7a <__pow5mult+0x26>
   11b8a:	4642      	mov	r2, r8
   11b8c:	4629      	mov	r1, r5
   11b8e:	4630      	mov	r0, r6
   11b90:	f7ff ff32 	bl	119f8 <__multiply>
   11b94:	b1b5      	cbz	r5, 11bc4 <__pow5mult+0x70>
   11b96:	6869      	ldr	r1, [r5, #4]
   11b98:	6c73      	ldr	r3, [r6, #68]	; 0x44
   11b9a:	1064      	asrs	r4, r4, #1
   11b9c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   11ba0:	602a      	str	r2, [r5, #0]
   11ba2:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   11ba6:	4605      	mov	r5, r0
   11ba8:	d1e9      	bne.n	11b7e <__pow5mult+0x2a>
   11baa:	4628      	mov	r0, r5
   11bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bb0:	4642      	mov	r2, r8
   11bb2:	4641      	mov	r1, r8
   11bb4:	4630      	mov	r0, r6
   11bb6:	f7ff ff1f 	bl	119f8 <__multiply>
   11bba:	f8c8 0000 	str.w	r0, [r8]
   11bbe:	6007      	str	r7, [r0, #0]
   11bc0:	4680      	mov	r8, r0
   11bc2:	e7e0      	b.n	11b86 <__pow5mult+0x32>
   11bc4:	4605      	mov	r5, r0
   11bc6:	e7d8      	b.n	11b7a <__pow5mult+0x26>
   11bc8:	3b01      	subs	r3, #1
   11bca:	4a0f      	ldr	r2, [pc, #60]	; (11c08 <__pow5mult+0xb4>)
   11bcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11bd0:	2300      	movs	r3, #0
   11bd2:	f7ff fe41 	bl	11858 <__multadd>
   11bd6:	4605      	mov	r5, r0
   11bd8:	e7c4      	b.n	11b64 <__pow5mult+0x10>
   11bda:	2101      	movs	r1, #1
   11bdc:	4630      	mov	r0, r6
   11bde:	f7ff fe0b 	bl	117f8 <_Balloc>
   11be2:	4680      	mov	r8, r0
   11be4:	b140      	cbz	r0, 11bf8 <__pow5mult+0xa4>
   11be6:	2301      	movs	r3, #1
   11be8:	f240 2271 	movw	r2, #625	; 0x271
   11bec:	e9c0 3204 	strd	r3, r2, [r0, #16]
   11bf0:	2300      	movs	r3, #0
   11bf2:	6430      	str	r0, [r6, #64]	; 0x40
   11bf4:	6003      	str	r3, [r0, #0]
   11bf6:	e7bc      	b.n	11b72 <__pow5mult+0x1e>
   11bf8:	4b04      	ldr	r3, [pc, #16]	; (11c0c <__pow5mult+0xb8>)
   11bfa:	4805      	ldr	r0, [pc, #20]	; (11c10 <__pow5mult+0xbc>)
   11bfc:	4642      	mov	r2, r8
   11bfe:	f240 1145 	movw	r1, #325	; 0x145
   11c02:	f7ff fcdf 	bl	115c4 <__assert_func>
   11c06:	bf00      	nop
   11c08:	20002d08 	.word	0x20002d08
   11c0c:	2000267c 	.word	0x2000267c
   11c10:	20002690 	.word	0x20002690

00011c14 <__lshift>:
   11c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11c18:	460d      	mov	r5, r1
   11c1a:	4614      	mov	r4, r2
   11c1c:	692f      	ldr	r7, [r5, #16]
   11c1e:	68ab      	ldr	r3, [r5, #8]
   11c20:	6849      	ldr	r1, [r1, #4]
   11c22:	eb07 1762 	add.w	r7, r7, r2, asr #5
   11c26:	1c7e      	adds	r6, r7, #1
   11c28:	429e      	cmp	r6, r3
   11c2a:	4680      	mov	r8, r0
   11c2c:	ea4f 1962 	mov.w	r9, r2, asr #5
   11c30:	dd04      	ble.n	11c3c <__lshift+0x28>
   11c32:	005b      	lsls	r3, r3, #1
   11c34:	429e      	cmp	r6, r3
   11c36:	f101 0101 	add.w	r1, r1, #1
   11c3a:	dcfa      	bgt.n	11c32 <__lshift+0x1e>
   11c3c:	4640      	mov	r0, r8
   11c3e:	f7ff fddb 	bl	117f8 <_Balloc>
   11c42:	4684      	mov	ip, r0
   11c44:	2800      	cmp	r0, #0
   11c46:	d052      	beq.n	11cee <__lshift+0xda>
   11c48:	f1b9 0f00 	cmp.w	r9, #0
   11c4c:	f100 0214 	add.w	r2, r0, #20
   11c50:	dd0e      	ble.n	11c70 <__lshift+0x5c>
   11c52:	f109 0105 	add.w	r1, r9, #5
   11c56:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   11c5a:	4613      	mov	r3, r2
   11c5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   11c60:	2000      	movs	r0, #0
   11c62:	f843 0b04 	str.w	r0, [r3], #4
   11c66:	428b      	cmp	r3, r1
   11c68:	d1fb      	bne.n	11c62 <__lshift+0x4e>
   11c6a:	f1ae 0314 	sub.w	r3, lr, #20
   11c6e:	441a      	add	r2, r3
   11c70:	6929      	ldr	r1, [r5, #16]
   11c72:	f105 0314 	add.w	r3, r5, #20
   11c76:	f014 0e1f 	ands.w	lr, r4, #31
   11c7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11c7e:	d02e      	beq.n	11cde <__lshift+0xca>
   11c80:	f1ce 0920 	rsb	r9, lr, #32
   11c84:	4610      	mov	r0, r2
   11c86:	f04f 0a00 	mov.w	sl, #0
   11c8a:	681c      	ldr	r4, [r3, #0]
   11c8c:	fa04 f40e 	lsl.w	r4, r4, lr
   11c90:	ea44 040a 	orr.w	r4, r4, sl
   11c94:	f840 4b04 	str.w	r4, [r0], #4
   11c98:	f853 4b04 	ldr.w	r4, [r3], #4
   11c9c:	4299      	cmp	r1, r3
   11c9e:	fa24 fa09 	lsr.w	sl, r4, r9
   11ca2:	d8f2      	bhi.n	11c8a <__lshift+0x76>
   11ca4:	1b4b      	subs	r3, r1, r5
   11ca6:	3b15      	subs	r3, #21
   11ca8:	f023 0303 	bic.w	r3, r3, #3
   11cac:	3304      	adds	r3, #4
   11cae:	f105 0015 	add.w	r0, r5, #21
   11cb2:	4281      	cmp	r1, r0
   11cb4:	bf38      	it	cc
   11cb6:	2304      	movcc	r3, #4
   11cb8:	f1ba 0f00 	cmp.w	sl, #0
   11cbc:	bf18      	it	ne
   11cbe:	4637      	movne	r7, r6
   11cc0:	f842 a003 	str.w	sl, [r2, r3]
   11cc4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   11cc8:	686a      	ldr	r2, [r5, #4]
   11cca:	f8cc 7010 	str.w	r7, [ip, #16]
   11cce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   11cd2:	6029      	str	r1, [r5, #0]
   11cd4:	4660      	mov	r0, ip
   11cd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   11cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11cde:	3a04      	subs	r2, #4
   11ce0:	f853 0b04 	ldr.w	r0, [r3], #4
   11ce4:	f842 0f04 	str.w	r0, [r2, #4]!
   11ce8:	4299      	cmp	r1, r3
   11cea:	d8f9      	bhi.n	11ce0 <__lshift+0xcc>
   11cec:	e7ea      	b.n	11cc4 <__lshift+0xb0>
   11cee:	4b03      	ldr	r3, [pc, #12]	; (11cfc <__lshift+0xe8>)
   11cf0:	4803      	ldr	r0, [pc, #12]	; (11d00 <__lshift+0xec>)
   11cf2:	4662      	mov	r2, ip
   11cf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   11cf8:	f7ff fc64 	bl	115c4 <__assert_func>
   11cfc:	2000267c 	.word	0x2000267c
   11d00:	20002690 	.word	0x20002690

00011d04 <__mcmp>:
   11d04:	690b      	ldr	r3, [r1, #16]
   11d06:	4684      	mov	ip, r0
   11d08:	6900      	ldr	r0, [r0, #16]
   11d0a:	1ac0      	subs	r0, r0, r3
   11d0c:	d116      	bne.n	11d3c <__mcmp+0x38>
   11d0e:	f10c 0c14 	add.w	ip, ip, #20
   11d12:	3114      	adds	r1, #20
   11d14:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   11d18:	b410      	push	{r4}
   11d1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   11d1e:	e001      	b.n	11d24 <__mcmp+0x20>
   11d20:	4594      	cmp	ip, r2
   11d22:	d208      	bcs.n	11d36 <__mcmp+0x32>
   11d24:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11d28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11d2c:	428c      	cmp	r4, r1
   11d2e:	d0f7      	beq.n	11d20 <__mcmp+0x1c>
   11d30:	d205      	bcs.n	11d3e <__mcmp+0x3a>
   11d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11d36:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d3a:	4770      	bx	lr
   11d3c:	4770      	bx	lr
   11d3e:	2001      	movs	r0, #1
   11d40:	f85d 4b04 	ldr.w	r4, [sp], #4
   11d44:	4770      	bx	lr
   11d46:	bf00      	nop

00011d48 <__mdiff>:
   11d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d4c:	690f      	ldr	r7, [r1, #16]
   11d4e:	6913      	ldr	r3, [r2, #16]
   11d50:	1aff      	subs	r7, r7, r3
   11d52:	2f00      	cmp	r7, #0
   11d54:	460e      	mov	r6, r1
   11d56:	4690      	mov	r8, r2
   11d58:	d17f      	bne.n	11e5a <__mdiff+0x112>
   11d5a:	f101 0514 	add.w	r5, r1, #20
   11d5e:	3214      	adds	r2, #20
   11d60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   11d64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   11d68:	e001      	b.n	11d6e <__mdiff+0x26>
   11d6a:	429d      	cmp	r5, r3
   11d6c:	d278      	bcs.n	11e60 <__mdiff+0x118>
   11d6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   11d72:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   11d76:	42a1      	cmp	r1, r4
   11d78:	d0f7      	beq.n	11d6a <__mdiff+0x22>
   11d7a:	d369      	bcc.n	11e50 <__mdiff+0x108>
   11d7c:	6871      	ldr	r1, [r6, #4]
   11d7e:	f7ff fd3b 	bl	117f8 <_Balloc>
   11d82:	4681      	mov	r9, r0
   11d84:	2800      	cmp	r0, #0
   11d86:	d077      	beq.n	11e78 <__mdiff+0x130>
   11d88:	6935      	ldr	r5, [r6, #16]
   11d8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   11d8e:	60c7      	str	r7, [r0, #12]
   11d90:	f108 0e14 	add.w	lr, r8, #20
   11d94:	f106 0014 	add.w	r0, r6, #20
   11d98:	f109 0a14 	add.w	sl, r9, #20
   11d9c:	f106 0110 	add.w	r1, r6, #16
   11da0:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   11da4:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   11da8:	4656      	mov	r6, sl
   11daa:	f04f 0c00 	mov.w	ip, #0
   11dae:	f85e 4b04 	ldr.w	r4, [lr], #4
   11db2:	f851 bf04 	ldr.w	fp, [r1, #4]!
   11db6:	b2a3      	uxth	r3, r4
   11db8:	fa1c fc8b 	uxtah	ip, ip, fp
   11dbc:	ebac 0303 	sub.w	r3, ip, r3
   11dc0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   11dc4:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   11dc8:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   11dcc:	b29b      	uxth	r3, r3
   11dce:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   11dd2:	4572      	cmp	r2, lr
   11dd4:	f846 3b04 	str.w	r3, [r6], #4
   11dd8:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   11ddc:	d8e7      	bhi.n	11dae <__mdiff+0x66>
   11dde:	eba2 0108 	sub.w	r1, r2, r8
   11de2:	3915      	subs	r1, #21
   11de4:	f108 0815 	add.w	r8, r8, #21
   11de8:	4542      	cmp	r2, r8
   11dea:	f021 0403 	bic.w	r4, r1, #3
   11dee:	f104 0404 	add.w	r4, r4, #4
   11df2:	bf38      	it	cc
   11df4:	2404      	movcc	r4, #4
   11df6:	4420      	add	r0, r4
   11df8:	f021 0203 	bic.w	r2, r1, #3
   11dfc:	bf38      	it	cc
   11dfe:	2200      	movcc	r2, #0
   11e00:	4287      	cmp	r7, r0
   11e02:	4452      	add	r2, sl
   11e04:	4454      	add	r4, sl
   11e06:	d918      	bls.n	11e3a <__mdiff+0xf2>
   11e08:	4626      	mov	r6, r4
   11e0a:	4601      	mov	r1, r0
   11e0c:	f851 3b04 	ldr.w	r3, [r1], #4
   11e10:	fa1c fc83 	uxtah	ip, ip, r3
   11e14:	ea4f 422c 	mov.w	r2, ip, asr #16
   11e18:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   11e1c:	fa1f fc8c 	uxth.w	ip, ip
   11e20:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   11e24:	428f      	cmp	r7, r1
   11e26:	f846 3b04 	str.w	r3, [r6], #4
   11e2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   11e2e:	d8ed      	bhi.n	11e0c <__mdiff+0xc4>
   11e30:	3f01      	subs	r7, #1
   11e32:	1a3f      	subs	r7, r7, r0
   11e34:	f027 0703 	bic.w	r7, r7, #3
   11e38:	19e2      	adds	r2, r4, r7
   11e3a:	b923      	cbnz	r3, 11e46 <__mdiff+0xfe>
   11e3c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   11e40:	3d01      	subs	r5, #1
   11e42:	2b00      	cmp	r3, #0
   11e44:	d0fa      	beq.n	11e3c <__mdiff+0xf4>
   11e46:	f8c9 5010 	str.w	r5, [r9, #16]
   11e4a:	4648      	mov	r0, r9
   11e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e50:	4633      	mov	r3, r6
   11e52:	2701      	movs	r7, #1
   11e54:	4646      	mov	r6, r8
   11e56:	4698      	mov	r8, r3
   11e58:	e790      	b.n	11d7c <__mdiff+0x34>
   11e5a:	dbf9      	blt.n	11e50 <__mdiff+0x108>
   11e5c:	2700      	movs	r7, #0
   11e5e:	e78d      	b.n	11d7c <__mdiff+0x34>
   11e60:	2100      	movs	r1, #0
   11e62:	f7ff fcc9 	bl	117f8 <_Balloc>
   11e66:	4681      	mov	r9, r0
   11e68:	b168      	cbz	r0, 11e86 <__mdiff+0x13e>
   11e6a:	2201      	movs	r2, #1
   11e6c:	2300      	movs	r3, #0
   11e6e:	e9c9 2304 	strd	r2, r3, [r9, #16]
   11e72:	4648      	mov	r0, r9
   11e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e78:	4b06      	ldr	r3, [pc, #24]	; (11e94 <__mdiff+0x14c>)
   11e7a:	4807      	ldr	r0, [pc, #28]	; (11e98 <__mdiff+0x150>)
   11e7c:	464a      	mov	r2, r9
   11e7e:	f240 2145 	movw	r1, #581	; 0x245
   11e82:	f7ff fb9f 	bl	115c4 <__assert_func>
   11e86:	4b03      	ldr	r3, [pc, #12]	; (11e94 <__mdiff+0x14c>)
   11e88:	4803      	ldr	r0, [pc, #12]	; (11e98 <__mdiff+0x150>)
   11e8a:	464a      	mov	r2, r9
   11e8c:	f240 2137 	movw	r1, #567	; 0x237
   11e90:	f7ff fb98 	bl	115c4 <__assert_func>
   11e94:	2000267c 	.word	0x2000267c
   11e98:	20002690 	.word	0x20002690

00011e9c <__d2b>:
   11e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11ea0:	4688      	mov	r8, r1
   11ea2:	b083      	sub	sp, #12
   11ea4:	2101      	movs	r1, #1
   11ea6:	ec57 6b10 	vmov	r6, r7, d0
   11eaa:	4615      	mov	r5, r2
   11eac:	f7ff fca4 	bl	117f8 <_Balloc>
   11eb0:	4604      	mov	r4, r0
   11eb2:	2800      	cmp	r0, #0
   11eb4:	d051      	beq.n	11f5a <__d2b+0xbe>
   11eb6:	f3c7 590a 	ubfx	r9, r7, #20, #11
   11eba:	f3c7 0313 	ubfx	r3, r7, #0, #20
   11ebe:	f1b9 0f00 	cmp.w	r9, #0
   11ec2:	d001      	beq.n	11ec8 <__d2b+0x2c>
   11ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   11ec8:	2e00      	cmp	r6, #0
   11eca:	9301      	str	r3, [sp, #4]
   11ecc:	d118      	bne.n	11f00 <__d2b+0x64>
   11ece:	a801      	add	r0, sp, #4
   11ed0:	f7ff fd34 	bl	1193c <__lo0bits>
   11ed4:	9a01      	ldr	r2, [sp, #4]
   11ed6:	6162      	str	r2, [r4, #20]
   11ed8:	2201      	movs	r2, #1
   11eda:	f100 0320 	add.w	r3, r0, #32
   11ede:	6122      	str	r2, [r4, #16]
   11ee0:	f1b9 0f00 	cmp.w	r9, #0
   11ee4:	d025      	beq.n	11f32 <__d2b+0x96>
   11ee6:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   11eea:	eb09 0203 	add.w	r2, r9, r3
   11eee:	4620      	mov	r0, r4
   11ef0:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   11ef4:	f8c8 2000 	str.w	r2, [r8]
   11ef8:	602b      	str	r3, [r5, #0]
   11efa:	b003      	add	sp, #12
   11efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f00:	4668      	mov	r0, sp
   11f02:	9600      	str	r6, [sp, #0]
   11f04:	f7ff fd1a 	bl	1193c <__lo0bits>
   11f08:	4603      	mov	r3, r0
   11f0a:	b310      	cbz	r0, 11f52 <__d2b+0xb6>
   11f0c:	e9dd 0200 	ldrd	r0, r2, [sp]
   11f10:	f1c3 0120 	rsb	r1, r3, #32
   11f14:	fa02 f101 	lsl.w	r1, r2, r1
   11f18:	4301      	orrs	r1, r0
   11f1a:	40da      	lsrs	r2, r3
   11f1c:	6161      	str	r1, [r4, #20]
   11f1e:	9201      	str	r2, [sp, #4]
   11f20:	2a00      	cmp	r2, #0
   11f22:	61a2      	str	r2, [r4, #24]
   11f24:	bf14      	ite	ne
   11f26:	2202      	movne	r2, #2
   11f28:	2201      	moveq	r2, #1
   11f2a:	6122      	str	r2, [r4, #16]
   11f2c:	f1b9 0f00 	cmp.w	r9, #0
   11f30:	d1d9      	bne.n	11ee6 <__d2b+0x4a>
   11f32:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   11f36:	f8c8 3000 	str.w	r3, [r8]
   11f3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   11f3e:	6918      	ldr	r0, [r3, #16]
   11f40:	f7ff fcdc 	bl	118fc <__hi0bits>
   11f44:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   11f48:	4620      	mov	r0, r4
   11f4a:	602b      	str	r3, [r5, #0]
   11f4c:	b003      	add	sp, #12
   11f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f52:	9a00      	ldr	r2, [sp, #0]
   11f54:	6162      	str	r2, [r4, #20]
   11f56:	9a01      	ldr	r2, [sp, #4]
   11f58:	e7e2      	b.n	11f20 <__d2b+0x84>
   11f5a:	4b03      	ldr	r3, [pc, #12]	; (11f68 <__d2b+0xcc>)
   11f5c:	4803      	ldr	r0, [pc, #12]	; (11f6c <__d2b+0xd0>)
   11f5e:	4622      	mov	r2, r4
   11f60:	f240 310f 	movw	r1, #783	; 0x30f
   11f64:	f7ff fb2e 	bl	115c4 <__assert_func>
   11f68:	2000267c 	.word	0x2000267c
   11f6c:	20002690 	.word	0x20002690

00011f70 <_calloc_r>:
   11f70:	b538      	push	{r3, r4, r5, lr}
   11f72:	fba1 1402 	umull	r1, r4, r1, r2
   11f76:	bb8c      	cbnz	r4, 11fdc <_calloc_r+0x6c>
   11f78:	f7fe ffc8 	bl	10f0c <_malloc_r>
   11f7c:	4605      	mov	r5, r0
   11f7e:	b1e0      	cbz	r0, 11fba <_calloc_r+0x4a>
   11f80:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11f84:	f022 0203 	bic.w	r2, r2, #3
   11f88:	3a04      	subs	r2, #4
   11f8a:	2a24      	cmp	r2, #36	; 0x24
   11f8c:	d817      	bhi.n	11fbe <_calloc_r+0x4e>
   11f8e:	2a13      	cmp	r2, #19
   11f90:	d91a      	bls.n	11fc8 <_calloc_r+0x58>
   11f92:	2a1b      	cmp	r2, #27
   11f94:	e9c0 4400 	strd	r4, r4, [r0]
   11f98:	d91d      	bls.n	11fd6 <_calloc_r+0x66>
   11f9a:	2a24      	cmp	r2, #36	; 0x24
   11f9c:	bf14      	ite	ne
   11f9e:	f100 0210 	addne.w	r2, r0, #16
   11fa2:	f100 0218 	addeq.w	r2, r0, #24
   11fa6:	f04f 0300 	mov.w	r3, #0
   11faa:	e9c0 4402 	strd	r4, r4, [r0, #8]
   11fae:	bf04      	itt	eq
   11fb0:	6104      	streq	r4, [r0, #16]
   11fb2:	6144      	streq	r4, [r0, #20]
   11fb4:	e9c2 3300 	strd	r3, r3, [r2]
   11fb8:	6093      	str	r3, [r2, #8]
   11fba:	4628      	mov	r0, r5
   11fbc:	bd38      	pop	{r3, r4, r5, pc}
   11fbe:	4621      	mov	r1, r4
   11fc0:	f7ff fb20 	bl	11604 <memset>
   11fc4:	4628      	mov	r0, r5
   11fc6:	bd38      	pop	{r3, r4, r5, pc}
   11fc8:	4602      	mov	r2, r0
   11fca:	2300      	movs	r3, #0
   11fcc:	e9c2 3300 	strd	r3, r3, [r2]
   11fd0:	6093      	str	r3, [r2, #8]
   11fd2:	4628      	mov	r0, r5
   11fd4:	bd38      	pop	{r3, r4, r5, pc}
   11fd6:	f100 0208 	add.w	r2, r0, #8
   11fda:	e7f6      	b.n	11fca <_calloc_r+0x5a>
   11fdc:	f7fe ff80 	bl	10ee0 <__errno>
   11fe0:	230c      	movs	r3, #12
   11fe2:	2500      	movs	r5, #0
   11fe4:	6003      	str	r3, [r0, #0]
   11fe6:	e7e8      	b.n	11fba <_calloc_r+0x4a>

00011fe8 <realloc>:
   11fe8:	b410      	push	{r4}
   11fea:	4c04      	ldr	r4, [pc, #16]	; (11ffc <realloc+0x14>)
   11fec:	4603      	mov	r3, r0
   11fee:	460a      	mov	r2, r1
   11ff0:	6820      	ldr	r0, [r4, #0]
   11ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
   11ff6:	4619      	mov	r1, r3
   11ff8:	f000 b990 	b.w	1231c <_realloc_r>
   11ffc:	2000395c 	.word	0x2000395c

00012000 <stdio_exit_handler>:
   12000:	4a02      	ldr	r2, [pc, #8]	; (1200c <stdio_exit_handler+0xc>)
   12002:	4903      	ldr	r1, [pc, #12]	; (12010 <stdio_exit_handler+0x10>)
   12004:	4803      	ldr	r0, [pc, #12]	; (12014 <stdio_exit_handler+0x14>)
   12006:	f000 bd45 	b.w	12a94 <_fwalk_sglue>
   1200a:	bf00      	nop
   1200c:	20003950 	.word	0x20003950
   12010:	00013d39 	.word	0x00013d39
   12014:	200031e0 	.word	0x200031e0

00012018 <cleanup_stdio>:
   12018:	4b0c      	ldr	r3, [pc, #48]	; (1204c <cleanup_stdio+0x34>)
   1201a:	6841      	ldr	r1, [r0, #4]
   1201c:	4299      	cmp	r1, r3
   1201e:	b510      	push	{r4, lr}
   12020:	4604      	mov	r4, r0
   12022:	d001      	beq.n	12028 <cleanup_stdio+0x10>
   12024:	f001 fe88 	bl	13d38 <_fclose_r>
   12028:	68a1      	ldr	r1, [r4, #8]
   1202a:	4b09      	ldr	r3, [pc, #36]	; (12050 <cleanup_stdio+0x38>)
   1202c:	4299      	cmp	r1, r3
   1202e:	d002      	beq.n	12036 <cleanup_stdio+0x1e>
   12030:	4620      	mov	r0, r4
   12032:	f001 fe81 	bl	13d38 <_fclose_r>
   12036:	68e1      	ldr	r1, [r4, #12]
   12038:	4b06      	ldr	r3, [pc, #24]	; (12054 <cleanup_stdio+0x3c>)
   1203a:	4299      	cmp	r1, r3
   1203c:	d004      	beq.n	12048 <cleanup_stdio+0x30>
   1203e:	4620      	mov	r0, r4
   12040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12044:	f001 be78 	b.w	13d38 <_fclose_r>
   12048:	bd10      	pop	{r4, pc}
   1204a:	bf00      	nop
   1204c:	20004e98 	.word	0x20004e98
   12050:	20004f00 	.word	0x20004f00
   12054:	20004f68 	.word	0x20004f68

00012058 <global_stdio_init.part.0>:
   12058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1205c:	4c2a      	ldr	r4, [pc, #168]	; (12108 <global_stdio_init.part.0+0xb0>)
   1205e:	4b2b      	ldr	r3, [pc, #172]	; (1210c <global_stdio_init.part.0+0xb4>)
   12060:	482b      	ldr	r0, [pc, #172]	; (12110 <global_stdio_init.part.0+0xb8>)
   12062:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 12124 <global_stdio_init.part.0+0xcc>
   12066:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 12128 <global_stdio_init.part.0+0xd0>
   1206a:	4f2a      	ldr	r7, [pc, #168]	; (12114 <global_stdio_init.part.0+0xbc>)
   1206c:	6018      	str	r0, [r3, #0]
   1206e:	2500      	movs	r5, #0
   12070:	2304      	movs	r3, #4
   12072:	2208      	movs	r2, #8
   12074:	4629      	mov	r1, r5
   12076:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1207a:	4e27      	ldr	r6, [pc, #156]	; (12118 <global_stdio_init.part.0+0xc0>)
   1207c:	6665      	str	r5, [r4, #100]	; 0x64
   1207e:	e9c4 5302 	strd	r5, r3, [r4, #8]
   12082:	e9c4 5500 	strd	r5, r5, [r4]
   12086:	e9c4 5504 	strd	r5, r5, [r4, #16]
   1208a:	61a5      	str	r5, [r4, #24]
   1208c:	f7ff faba 	bl	11604 <memset>
   12090:	4b22      	ldr	r3, [pc, #136]	; (1211c <global_stdio_init.part.0+0xc4>)
   12092:	6763      	str	r3, [r4, #116]	; 0x74
   12094:	2208      	movs	r2, #8
   12096:	4629      	mov	r1, r5
   12098:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   1209c:	e9c4 4907 	strd	r4, r9, [r4, #28]
   120a0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   120a4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   120a8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   120ac:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   120b0:	6725      	str	r5, [r4, #112]	; 0x70
   120b2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   120b6:	62e6      	str	r6, [r4, #44]	; 0x2c
   120b8:	f7ff faa4 	bl	11604 <memset>
   120bc:	4b18      	ldr	r3, [pc, #96]	; (12120 <global_stdio_init.part.0+0xc8>)
   120be:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   120c2:	4629      	mov	r1, r5
   120c4:	f104 0368 	add.w	r3, r4, #104	; 0x68
   120c8:	2208      	movs	r2, #8
   120ca:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   120ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   120d2:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   120d6:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   120da:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   120de:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   120e2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   120e6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   120ea:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   120ee:	f7ff fa89 	bl	11604 <memset>
   120f2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   120f6:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   120fa:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   120fe:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   12102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12106:	bf00      	nop
   12108:	20004e98 	.word	0x20004e98
   1210c:	20004fd0 	.word	0x20004fd0
   12110:	00012001 	.word	0x00012001
   12114:	00012a2d 	.word	0x00012a2d
   12118:	00012a4d 	.word	0x00012a4d
   1211c:	00010009 	.word	0x00010009
   12120:	00020012 	.word	0x00020012
   12124:	000129c9 	.word	0x000129c9
   12128:	000129ed 	.word	0x000129ed

0001212c <__sinit>:
   1212c:	b510      	push	{r4, lr}
   1212e:	4604      	mov	r4, r0
   12130:	480a      	ldr	r0, [pc, #40]	; (1215c <__sinit+0x30>)
   12132:	f7ff faed 	bl	11710 <__retarget_lock_acquire_recursive>
   12136:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12138:	b923      	cbnz	r3, 12144 <__sinit+0x18>
   1213a:	4b09      	ldr	r3, [pc, #36]	; (12160 <__sinit+0x34>)
   1213c:	4a09      	ldr	r2, [pc, #36]	; (12164 <__sinit+0x38>)
   1213e:	681b      	ldr	r3, [r3, #0]
   12140:	6362      	str	r2, [r4, #52]	; 0x34
   12142:	b123      	cbz	r3, 1214e <__sinit+0x22>
   12144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12148:	4804      	ldr	r0, [pc, #16]	; (1215c <__sinit+0x30>)
   1214a:	f7ff bae3 	b.w	11714 <__retarget_lock_release_recursive>
   1214e:	f7ff ff83 	bl	12058 <global_stdio_init.part.0>
   12152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12156:	4801      	ldr	r0, [pc, #4]	; (1215c <__sinit+0x30>)
   12158:	f7ff badc 	b.w	11714 <__retarget_lock_release_recursive>
   1215c:	20004e60 	.word	0x20004e60
   12160:	20004fd0 	.word	0x20004fd0
   12164:	00012019 	.word	0x00012019

00012168 <__sfp_lock_acquire>:
   12168:	4801      	ldr	r0, [pc, #4]	; (12170 <__sfp_lock_acquire+0x8>)
   1216a:	f7ff bad1 	b.w	11710 <__retarget_lock_acquire_recursive>
   1216e:	bf00      	nop
   12170:	20004e60 	.word	0x20004e60

00012174 <__sfp_lock_release>:
   12174:	4801      	ldr	r0, [pc, #4]	; (1217c <__sfp_lock_release+0x8>)
   12176:	f7ff bacd 	b.w	11714 <__retarget_lock_release_recursive>
   1217a:	bf00      	nop
   1217c:	20004e60 	.word	0x20004e60

00012180 <memchr>:
   12180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12184:	2a10      	cmp	r2, #16
   12186:	db2b      	blt.n	121e0 <memchr+0x60>
   12188:	f010 0f07 	tst.w	r0, #7
   1218c:	d008      	beq.n	121a0 <memchr+0x20>
   1218e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12192:	3a01      	subs	r2, #1
   12194:	428b      	cmp	r3, r1
   12196:	d02d      	beq.n	121f4 <memchr+0x74>
   12198:	f010 0f07 	tst.w	r0, #7
   1219c:	b342      	cbz	r2, 121f0 <memchr+0x70>
   1219e:	d1f6      	bne.n	1218e <memchr+0xe>
   121a0:	b4f0      	push	{r4, r5, r6, r7}
   121a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   121a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   121aa:	f022 0407 	bic.w	r4, r2, #7
   121ae:	f07f 0700 	mvns.w	r7, #0
   121b2:	2300      	movs	r3, #0
   121b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   121b8:	3c08      	subs	r4, #8
   121ba:	ea85 0501 	eor.w	r5, r5, r1
   121be:	ea86 0601 	eor.w	r6, r6, r1
   121c2:	fa85 f547 	uadd8	r5, r5, r7
   121c6:	faa3 f587 	sel	r5, r3, r7
   121ca:	fa86 f647 	uadd8	r6, r6, r7
   121ce:	faa5 f687 	sel	r6, r5, r7
   121d2:	b98e      	cbnz	r6, 121f8 <memchr+0x78>
   121d4:	d1ee      	bne.n	121b4 <memchr+0x34>
   121d6:	bcf0      	pop	{r4, r5, r6, r7}
   121d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   121dc:	f002 0207 	and.w	r2, r2, #7
   121e0:	b132      	cbz	r2, 121f0 <memchr+0x70>
   121e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   121e6:	3a01      	subs	r2, #1
   121e8:	ea83 0301 	eor.w	r3, r3, r1
   121ec:	b113      	cbz	r3, 121f4 <memchr+0x74>
   121ee:	d1f8      	bne.n	121e2 <memchr+0x62>
   121f0:	2000      	movs	r0, #0
   121f2:	4770      	bx	lr
   121f4:	3801      	subs	r0, #1
   121f6:	4770      	bx	lr
   121f8:	2d00      	cmp	r5, #0
   121fa:	bf06      	itte	eq
   121fc:	4635      	moveq	r5, r6
   121fe:	3803      	subeq	r0, #3
   12200:	3807      	subne	r0, #7
   12202:	f015 0f01 	tst.w	r5, #1
   12206:	d107      	bne.n	12218 <memchr+0x98>
   12208:	3001      	adds	r0, #1
   1220a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1220e:	bf02      	ittt	eq
   12210:	3001      	addeq	r0, #1
   12212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12216:	3001      	addeq	r0, #1
   12218:	bcf0      	pop	{r4, r5, r6, r7}
   1221a:	3801      	subs	r0, #1
   1221c:	4770      	bx	lr
   1221e:	bf00      	nop
	...

00012240 <strlen>:
   12240:	f890 f000 	pld	[r0]
   12244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12248:	f020 0107 	bic.w	r1, r0, #7
   1224c:	f06f 0c00 	mvn.w	ip, #0
   12250:	f010 0407 	ands.w	r4, r0, #7
   12254:	f891 f020 	pld	[r1, #32]
   12258:	f040 8049 	bne.w	122ee <strlen+0xae>
   1225c:	f04f 0400 	mov.w	r4, #0
   12260:	f06f 0007 	mvn.w	r0, #7
   12264:	e9d1 2300 	ldrd	r2, r3, [r1]
   12268:	f891 f040 	pld	[r1, #64]	; 0x40
   1226c:	f100 0008 	add.w	r0, r0, #8
   12270:	fa82 f24c 	uadd8	r2, r2, ip
   12274:	faa4 f28c 	sel	r2, r4, ip
   12278:	fa83 f34c 	uadd8	r3, r3, ip
   1227c:	faa2 f38c 	sel	r3, r2, ip
   12280:	bb4b      	cbnz	r3, 122d6 <strlen+0x96>
   12282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12286:	fa82 f24c 	uadd8	r2, r2, ip
   1228a:	f100 0008 	add.w	r0, r0, #8
   1228e:	faa4 f28c 	sel	r2, r4, ip
   12292:	fa83 f34c 	uadd8	r3, r3, ip
   12296:	faa2 f38c 	sel	r3, r2, ip
   1229a:	b9e3      	cbnz	r3, 122d6 <strlen+0x96>
   1229c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   122a0:	fa82 f24c 	uadd8	r2, r2, ip
   122a4:	f100 0008 	add.w	r0, r0, #8
   122a8:	faa4 f28c 	sel	r2, r4, ip
   122ac:	fa83 f34c 	uadd8	r3, r3, ip
   122b0:	faa2 f38c 	sel	r3, r2, ip
   122b4:	b97b      	cbnz	r3, 122d6 <strlen+0x96>
   122b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   122ba:	f101 0120 	add.w	r1, r1, #32
   122be:	fa82 f24c 	uadd8	r2, r2, ip
   122c2:	f100 0008 	add.w	r0, r0, #8
   122c6:	faa4 f28c 	sel	r2, r4, ip
   122ca:	fa83 f34c 	uadd8	r3, r3, ip
   122ce:	faa2 f38c 	sel	r3, r2, ip
   122d2:	2b00      	cmp	r3, #0
   122d4:	d0c6      	beq.n	12264 <strlen+0x24>
   122d6:	2a00      	cmp	r2, #0
   122d8:	bf04      	itt	eq
   122da:	3004      	addeq	r0, #4
   122dc:	461a      	moveq	r2, r3
   122de:	ba12      	rev	r2, r2
   122e0:	fab2 f282 	clz	r2, r2
   122e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   122e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   122ec:	4770      	bx	lr
   122ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   122f2:	f004 0503 	and.w	r5, r4, #3
   122f6:	f1c4 0000 	rsb	r0, r4, #0
   122fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   122fe:	f014 0f04 	tst.w	r4, #4
   12302:	f891 f040 	pld	[r1, #64]	; 0x40
   12306:	fa0c f505 	lsl.w	r5, ip, r5
   1230a:	ea62 0205 	orn	r2, r2, r5
   1230e:	bf1c      	itt	ne
   12310:	ea63 0305 	ornne	r3, r3, r5
   12314:	4662      	movne	r2, ip
   12316:	f04f 0400 	mov.w	r4, #0
   1231a:	e7a9      	b.n	12270 <strlen+0x30>

0001231c <_realloc_r>:
   1231c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12320:	4617      	mov	r7, r2
   12322:	2900      	cmp	r1, #0
   12324:	f000 8098 	beq.w	12458 <_realloc_r+0x13c>
   12328:	460c      	mov	r4, r1
   1232a:	f107 050b 	add.w	r5, r7, #11
   1232e:	4680      	mov	r8, r0
   12330:	f7ff fa56 	bl	117e0 <__malloc_lock>
   12334:	2d16      	cmp	r5, #22
   12336:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1233a:	d85b      	bhi.n	123f4 <_realloc_r+0xd8>
   1233c:	2510      	movs	r5, #16
   1233e:	462a      	mov	r2, r5
   12340:	42af      	cmp	r7, r5
   12342:	d85c      	bhi.n	123fe <_realloc_r+0xe2>
   12344:	f021 0603 	bic.w	r6, r1, #3
   12348:	4296      	cmp	r6, r2
   1234a:	f1a4 0908 	sub.w	r9, r4, #8
   1234e:	da62      	bge.n	12416 <_realloc_r+0xfa>
   12350:	4bbc      	ldr	r3, [pc, #752]	; (12644 <_realloc_r+0x328>)
   12352:	f8d3 c008 	ldr.w	ip, [r3, #8]
   12356:	eb09 0006 	add.w	r0, r9, r6
   1235a:	4584      	cmp	ip, r0
   1235c:	f000 8097 	beq.w	1248e <_realloc_r+0x172>
   12360:	f8d0 c004 	ldr.w	ip, [r0, #4]
   12364:	f02c 0301 	bic.w	r3, ip, #1
   12368:	4403      	add	r3, r0
   1236a:	685b      	ldr	r3, [r3, #4]
   1236c:	07db      	lsls	r3, r3, #31
   1236e:	d468      	bmi.n	12442 <_realloc_r+0x126>
   12370:	f02c 0c03 	bic.w	ip, ip, #3
   12374:	eb06 030c 	add.w	r3, r6, ip
   12378:	4293      	cmp	r3, r2
   1237a:	da47      	bge.n	1240c <_realloc_r+0xf0>
   1237c:	07cb      	lsls	r3, r1, #31
   1237e:	d410      	bmi.n	123a2 <_realloc_r+0x86>
   12380:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12384:	eba9 0a03 	sub.w	sl, r9, r3
   12388:	f8da 3004 	ldr.w	r3, [sl, #4]
   1238c:	f023 0103 	bic.w	r1, r3, #3
   12390:	448c      	add	ip, r1
   12392:	44b4      	add	ip, r6
   12394:	4594      	cmp	ip, r2
   12396:	f280 8111 	bge.w	125bc <_realloc_r+0x2a0>
   1239a:	1873      	adds	r3, r6, r1
   1239c:	4293      	cmp	r3, r2
   1239e:	f280 80e8 	bge.w	12572 <_realloc_r+0x256>
   123a2:	4639      	mov	r1, r7
   123a4:	4640      	mov	r0, r8
   123a6:	f7fe fdb1 	bl	10f0c <_malloc_r>
   123aa:	4607      	mov	r7, r0
   123ac:	b1e0      	cbz	r0, 123e8 <_realloc_r+0xcc>
   123ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   123b2:	f023 0301 	bic.w	r3, r3, #1
   123b6:	444b      	add	r3, r9
   123b8:	f1a0 0208 	sub.w	r2, r0, #8
   123bc:	4293      	cmp	r3, r2
   123be:	f000 80d2 	beq.w	12566 <_realloc_r+0x24a>
   123c2:	1f32      	subs	r2, r6, #4
   123c4:	2a24      	cmp	r2, #36	; 0x24
   123c6:	f200 80f5 	bhi.w	125b4 <_realloc_r+0x298>
   123ca:	2a13      	cmp	r2, #19
   123cc:	f200 80ac 	bhi.w	12528 <_realloc_r+0x20c>
   123d0:	4603      	mov	r3, r0
   123d2:	4622      	mov	r2, r4
   123d4:	6811      	ldr	r1, [r2, #0]
   123d6:	6019      	str	r1, [r3, #0]
   123d8:	6851      	ldr	r1, [r2, #4]
   123da:	6059      	str	r1, [r3, #4]
   123dc:	6892      	ldr	r2, [r2, #8]
   123de:	609a      	str	r2, [r3, #8]
   123e0:	4621      	mov	r1, r4
   123e2:	4640      	mov	r0, r8
   123e4:	f000 f9d6 	bl	12794 <_free_r>
   123e8:	4640      	mov	r0, r8
   123ea:	f7ff f9ff 	bl	117ec <__malloc_unlock>
   123ee:	4638      	mov	r0, r7
   123f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f4:	f025 0507 	bic.w	r5, r5, #7
   123f8:	2d00      	cmp	r5, #0
   123fa:	462a      	mov	r2, r5
   123fc:	daa0      	bge.n	12340 <_realloc_r+0x24>
   123fe:	230c      	movs	r3, #12
   12400:	f8c8 3000 	str.w	r3, [r8]
   12404:	2700      	movs	r7, #0
   12406:	4638      	mov	r0, r7
   12408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1240c:	461e      	mov	r6, r3
   1240e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   12412:	60d3      	str	r3, [r2, #12]
   12414:	609a      	str	r2, [r3, #8]
   12416:	1b73      	subs	r3, r6, r5
   12418:	2b0f      	cmp	r3, #15
   1241a:	d822      	bhi.n	12462 <_realloc_r+0x146>
   1241c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12420:	f003 0301 	and.w	r3, r3, #1
   12424:	4333      	orrs	r3, r6
   12426:	444e      	add	r6, r9
   12428:	f8c9 3004 	str.w	r3, [r9, #4]
   1242c:	6873      	ldr	r3, [r6, #4]
   1242e:	f043 0301 	orr.w	r3, r3, #1
   12432:	6073      	str	r3, [r6, #4]
   12434:	4640      	mov	r0, r8
   12436:	4627      	mov	r7, r4
   12438:	f7ff f9d8 	bl	117ec <__malloc_unlock>
   1243c:	4638      	mov	r0, r7
   1243e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12442:	07c9      	lsls	r1, r1, #31
   12444:	d4ad      	bmi.n	123a2 <_realloc_r+0x86>
   12446:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1244a:	eba9 0a03 	sub.w	sl, r9, r3
   1244e:	f8da 1004 	ldr.w	r1, [sl, #4]
   12452:	f021 0103 	bic.w	r1, r1, #3
   12456:	e7a0      	b.n	1239a <_realloc_r+0x7e>
   12458:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1245c:	4611      	mov	r1, r2
   1245e:	f7fe bd55 	b.w	10f0c <_malloc_r>
   12462:	f8d9 2004 	ldr.w	r2, [r9, #4]
   12466:	eb09 0105 	add.w	r1, r9, r5
   1246a:	f002 0201 	and.w	r2, r2, #1
   1246e:	444e      	add	r6, r9
   12470:	f043 0301 	orr.w	r3, r3, #1
   12474:	432a      	orrs	r2, r5
   12476:	f8c9 2004 	str.w	r2, [r9, #4]
   1247a:	604b      	str	r3, [r1, #4]
   1247c:	6873      	ldr	r3, [r6, #4]
   1247e:	f043 0301 	orr.w	r3, r3, #1
   12482:	3108      	adds	r1, #8
   12484:	6073      	str	r3, [r6, #4]
   12486:	4640      	mov	r0, r8
   12488:	f000 f984 	bl	12794 <_free_r>
   1248c:	e7d2      	b.n	12434 <_realloc_r+0x118>
   1248e:	f8dc 0004 	ldr.w	r0, [ip, #4]
   12492:	f020 0b03 	bic.w	fp, r0, #3
   12496:	eb06 0c0b 	add.w	ip, r6, fp
   1249a:	f105 0010 	add.w	r0, r5, #16
   1249e:	4584      	cmp	ip, r0
   124a0:	da4d      	bge.n	1253e <_realloc_r+0x222>
   124a2:	07c9      	lsls	r1, r1, #31
   124a4:	f53f af7d 	bmi.w	123a2 <_realloc_r+0x86>
   124a8:	f854 1c08 	ldr.w	r1, [r4, #-8]
   124ac:	eba9 0a01 	sub.w	sl, r9, r1
   124b0:	f8da 1004 	ldr.w	r1, [sl, #4]
   124b4:	f021 0103 	bic.w	r1, r1, #3
   124b8:	448b      	add	fp, r1
   124ba:	44b3      	add	fp, r6
   124bc:	4558      	cmp	r0, fp
   124be:	f73f af6c 	bgt.w	1239a <_realloc_r+0x7e>
   124c2:	4657      	mov	r7, sl
   124c4:	f8da 100c 	ldr.w	r1, [sl, #12]
   124c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
   124cc:	1f32      	subs	r2, r6, #4
   124ce:	2a24      	cmp	r2, #36	; 0x24
   124d0:	60c1      	str	r1, [r0, #12]
   124d2:	6088      	str	r0, [r1, #8]
   124d4:	f200 80db 	bhi.w	1268e <_realloc_r+0x372>
   124d8:	2a13      	cmp	r2, #19
   124da:	f240 80d6 	bls.w	1268a <_realloc_r+0x36e>
   124de:	6821      	ldr	r1, [r4, #0]
   124e0:	f8ca 1008 	str.w	r1, [sl, #8]
   124e4:	6861      	ldr	r1, [r4, #4]
   124e6:	f8ca 100c 	str.w	r1, [sl, #12]
   124ea:	2a1b      	cmp	r2, #27
   124ec:	f200 80df 	bhi.w	126ae <_realloc_r+0x392>
   124f0:	3408      	adds	r4, #8
   124f2:	f10a 0210 	add.w	r2, sl, #16
   124f6:	6821      	ldr	r1, [r4, #0]
   124f8:	6011      	str	r1, [r2, #0]
   124fa:	6861      	ldr	r1, [r4, #4]
   124fc:	6051      	str	r1, [r2, #4]
   124fe:	68a1      	ldr	r1, [r4, #8]
   12500:	6091      	str	r1, [r2, #8]
   12502:	eb0a 0105 	add.w	r1, sl, r5
   12506:	ebab 0205 	sub.w	r2, fp, r5
   1250a:	f042 0201 	orr.w	r2, r2, #1
   1250e:	6099      	str	r1, [r3, #8]
   12510:	604a      	str	r2, [r1, #4]
   12512:	f8da 3004 	ldr.w	r3, [sl, #4]
   12516:	f003 0301 	and.w	r3, r3, #1
   1251a:	432b      	orrs	r3, r5
   1251c:	4640      	mov	r0, r8
   1251e:	f8ca 3004 	str.w	r3, [sl, #4]
   12522:	f7ff f963 	bl	117ec <__malloc_unlock>
   12526:	e76e      	b.n	12406 <_realloc_r+0xea>
   12528:	6823      	ldr	r3, [r4, #0]
   1252a:	6003      	str	r3, [r0, #0]
   1252c:	6863      	ldr	r3, [r4, #4]
   1252e:	6043      	str	r3, [r0, #4]
   12530:	2a1b      	cmp	r2, #27
   12532:	d868      	bhi.n	12606 <_realloc_r+0x2ea>
   12534:	f104 0208 	add.w	r2, r4, #8
   12538:	f100 0308 	add.w	r3, r0, #8
   1253c:	e74a      	b.n	123d4 <_realloc_r+0xb8>
   1253e:	eb09 0205 	add.w	r2, r9, r5
   12542:	609a      	str	r2, [r3, #8]
   12544:	ebac 0305 	sub.w	r3, ip, r5
   12548:	f043 0301 	orr.w	r3, r3, #1
   1254c:	6053      	str	r3, [r2, #4]
   1254e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   12552:	f003 0301 	and.w	r3, r3, #1
   12556:	432b      	orrs	r3, r5
   12558:	4640      	mov	r0, r8
   1255a:	f844 3c04 	str.w	r3, [r4, #-4]
   1255e:	f7ff f945 	bl	117ec <__malloc_unlock>
   12562:	4627      	mov	r7, r4
   12564:	e74f      	b.n	12406 <_realloc_r+0xea>
   12566:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1256a:	f023 0303 	bic.w	r3, r3, #3
   1256e:	441e      	add	r6, r3
   12570:	e751      	b.n	12416 <_realloc_r+0xfa>
   12572:	4657      	mov	r7, sl
   12574:	f8da 100c 	ldr.w	r1, [sl, #12]
   12578:	f857 0f08 	ldr.w	r0, [r7, #8]!
   1257c:	1f32      	subs	r2, r6, #4
   1257e:	2a24      	cmp	r2, #36	; 0x24
   12580:	60c1      	str	r1, [r0, #12]
   12582:	6088      	str	r0, [r1, #8]
   12584:	d84c      	bhi.n	12620 <_realloc_r+0x304>
   12586:	2a13      	cmp	r2, #19
   12588:	d948      	bls.n	1261c <_realloc_r+0x300>
   1258a:	6821      	ldr	r1, [r4, #0]
   1258c:	f8ca 1008 	str.w	r1, [sl, #8]
   12590:	6861      	ldr	r1, [r4, #4]
   12592:	f8ca 100c 	str.w	r1, [sl, #12]
   12596:	2a1b      	cmp	r2, #27
   12598:	d856      	bhi.n	12648 <_realloc_r+0x32c>
   1259a:	3408      	adds	r4, #8
   1259c:	f10a 0210 	add.w	r2, sl, #16
   125a0:	461e      	mov	r6, r3
   125a2:	6823      	ldr	r3, [r4, #0]
   125a4:	6013      	str	r3, [r2, #0]
   125a6:	6863      	ldr	r3, [r4, #4]
   125a8:	6053      	str	r3, [r2, #4]
   125aa:	68a3      	ldr	r3, [r4, #8]
   125ac:	6093      	str	r3, [r2, #8]
   125ae:	46d1      	mov	r9, sl
   125b0:	463c      	mov	r4, r7
   125b2:	e730      	b.n	12416 <_realloc_r+0xfa>
   125b4:	4621      	mov	r1, r4
   125b6:	f7fe ff89 	bl	114cc <memmove>
   125ba:	e711      	b.n	123e0 <_realloc_r+0xc4>
   125bc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   125c0:	4657      	mov	r7, sl
   125c2:	60cb      	str	r3, [r1, #12]
   125c4:	6099      	str	r1, [r3, #8]
   125c6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   125ca:	f8da 300c 	ldr.w	r3, [sl, #12]
   125ce:	60cb      	str	r3, [r1, #12]
   125d0:	1f32      	subs	r2, r6, #4
   125d2:	2a24      	cmp	r2, #36	; 0x24
   125d4:	6099      	str	r1, [r3, #8]
   125d6:	d82d      	bhi.n	12634 <_realloc_r+0x318>
   125d8:	2a13      	cmp	r2, #19
   125da:	d929      	bls.n	12630 <_realloc_r+0x314>
   125dc:	6823      	ldr	r3, [r4, #0]
   125de:	f8ca 3008 	str.w	r3, [sl, #8]
   125e2:	6863      	ldr	r3, [r4, #4]
   125e4:	f8ca 300c 	str.w	r3, [sl, #12]
   125e8:	2a1b      	cmp	r2, #27
   125ea:	d842      	bhi.n	12672 <_realloc_r+0x356>
   125ec:	3408      	adds	r4, #8
   125ee:	f10a 0310 	add.w	r3, sl, #16
   125f2:	6822      	ldr	r2, [r4, #0]
   125f4:	601a      	str	r2, [r3, #0]
   125f6:	6862      	ldr	r2, [r4, #4]
   125f8:	605a      	str	r2, [r3, #4]
   125fa:	68a2      	ldr	r2, [r4, #8]
   125fc:	609a      	str	r2, [r3, #8]
   125fe:	4666      	mov	r6, ip
   12600:	46d1      	mov	r9, sl
   12602:	463c      	mov	r4, r7
   12604:	e707      	b.n	12416 <_realloc_r+0xfa>
   12606:	68a3      	ldr	r3, [r4, #8]
   12608:	6083      	str	r3, [r0, #8]
   1260a:	68e3      	ldr	r3, [r4, #12]
   1260c:	60c3      	str	r3, [r0, #12]
   1260e:	2a24      	cmp	r2, #36	; 0x24
   12610:	d026      	beq.n	12660 <_realloc_r+0x344>
   12612:	f104 0210 	add.w	r2, r4, #16
   12616:	f100 0310 	add.w	r3, r0, #16
   1261a:	e6db      	b.n	123d4 <_realloc_r+0xb8>
   1261c:	463a      	mov	r2, r7
   1261e:	e7bf      	b.n	125a0 <_realloc_r+0x284>
   12620:	4621      	mov	r1, r4
   12622:	4638      	mov	r0, r7
   12624:	461e      	mov	r6, r3
   12626:	46d1      	mov	r9, sl
   12628:	f7fe ff50 	bl	114cc <memmove>
   1262c:	463c      	mov	r4, r7
   1262e:	e6f2      	b.n	12416 <_realloc_r+0xfa>
   12630:	463b      	mov	r3, r7
   12632:	e7de      	b.n	125f2 <_realloc_r+0x2d6>
   12634:	4621      	mov	r1, r4
   12636:	4638      	mov	r0, r7
   12638:	4666      	mov	r6, ip
   1263a:	46d1      	mov	r9, sl
   1263c:	f7fe ff46 	bl	114cc <memmove>
   12640:	463c      	mov	r4, r7
   12642:	e6e8      	b.n	12416 <_realloc_r+0xfa>
   12644:	20003540 	.word	0x20003540
   12648:	68a1      	ldr	r1, [r4, #8]
   1264a:	f8ca 1010 	str.w	r1, [sl, #16]
   1264e:	68e1      	ldr	r1, [r4, #12]
   12650:	f8ca 1014 	str.w	r1, [sl, #20]
   12654:	2a24      	cmp	r2, #36	; 0x24
   12656:	d020      	beq.n	1269a <_realloc_r+0x37e>
   12658:	3410      	adds	r4, #16
   1265a:	f10a 0218 	add.w	r2, sl, #24
   1265e:	e79f      	b.n	125a0 <_realloc_r+0x284>
   12660:	6923      	ldr	r3, [r4, #16]
   12662:	6103      	str	r3, [r0, #16]
   12664:	6961      	ldr	r1, [r4, #20]
   12666:	6141      	str	r1, [r0, #20]
   12668:	f104 0218 	add.w	r2, r4, #24
   1266c:	f100 0318 	add.w	r3, r0, #24
   12670:	e6b0      	b.n	123d4 <_realloc_r+0xb8>
   12672:	68a3      	ldr	r3, [r4, #8]
   12674:	f8ca 3010 	str.w	r3, [sl, #16]
   12678:	68e3      	ldr	r3, [r4, #12]
   1267a:	f8ca 3014 	str.w	r3, [sl, #20]
   1267e:	2a24      	cmp	r2, #36	; 0x24
   12680:	d021      	beq.n	126c6 <_realloc_r+0x3aa>
   12682:	3410      	adds	r4, #16
   12684:	f10a 0318 	add.w	r3, sl, #24
   12688:	e7b3      	b.n	125f2 <_realloc_r+0x2d6>
   1268a:	463a      	mov	r2, r7
   1268c:	e733      	b.n	124f6 <_realloc_r+0x1da>
   1268e:	4621      	mov	r1, r4
   12690:	4638      	mov	r0, r7
   12692:	f7fe ff1b 	bl	114cc <memmove>
   12696:	4b16      	ldr	r3, [pc, #88]	; (126f0 <_realloc_r+0x3d4>)
   12698:	e733      	b.n	12502 <_realloc_r+0x1e6>
   1269a:	6922      	ldr	r2, [r4, #16]
   1269c:	f8ca 2018 	str.w	r2, [sl, #24]
   126a0:	6962      	ldr	r2, [r4, #20]
   126a2:	f8ca 201c 	str.w	r2, [sl, #28]
   126a6:	3418      	adds	r4, #24
   126a8:	f10a 0220 	add.w	r2, sl, #32
   126ac:	e778      	b.n	125a0 <_realloc_r+0x284>
   126ae:	68a1      	ldr	r1, [r4, #8]
   126b0:	f8ca 1010 	str.w	r1, [sl, #16]
   126b4:	68e1      	ldr	r1, [r4, #12]
   126b6:	f8ca 1014 	str.w	r1, [sl, #20]
   126ba:	2a24      	cmp	r2, #36	; 0x24
   126bc:	d00d      	beq.n	126da <_realloc_r+0x3be>
   126be:	3410      	adds	r4, #16
   126c0:	f10a 0218 	add.w	r2, sl, #24
   126c4:	e717      	b.n	124f6 <_realloc_r+0x1da>
   126c6:	6923      	ldr	r3, [r4, #16]
   126c8:	f8ca 3018 	str.w	r3, [sl, #24]
   126cc:	6963      	ldr	r3, [r4, #20]
   126ce:	f8ca 301c 	str.w	r3, [sl, #28]
   126d2:	3418      	adds	r4, #24
   126d4:	f10a 0320 	add.w	r3, sl, #32
   126d8:	e78b      	b.n	125f2 <_realloc_r+0x2d6>
   126da:	6922      	ldr	r2, [r4, #16]
   126dc:	f8ca 2018 	str.w	r2, [sl, #24]
   126e0:	6962      	ldr	r2, [r4, #20]
   126e2:	f8ca 201c 	str.w	r2, [sl, #28]
   126e6:	3418      	adds	r4, #24
   126e8:	f10a 0220 	add.w	r2, sl, #32
   126ec:	e703      	b.n	124f6 <_realloc_r+0x1da>
   126ee:	bf00      	nop
   126f0:	20003540 	.word	0x20003540

000126f4 <_malloc_trim_r>:
   126f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126f6:	4f24      	ldr	r7, [pc, #144]	; (12788 <_malloc_trim_r+0x94>)
   126f8:	460c      	mov	r4, r1
   126fa:	4606      	mov	r6, r0
   126fc:	f7ff f870 	bl	117e0 <__malloc_lock>
   12700:	68bb      	ldr	r3, [r7, #8]
   12702:	685d      	ldr	r5, [r3, #4]
   12704:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12708:	310f      	adds	r1, #15
   1270a:	f025 0503 	bic.w	r5, r5, #3
   1270e:	194b      	adds	r3, r1, r5
   12710:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12714:	f023 030f 	bic.w	r3, r3, #15
   12718:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1271c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12720:	db07      	blt.n	12732 <_malloc_trim_r+0x3e>
   12722:	2100      	movs	r1, #0
   12724:	4630      	mov	r0, r6
   12726:	f000 f9a3 	bl	12a70 <_sbrk_r>
   1272a:	68bb      	ldr	r3, [r7, #8]
   1272c:	442b      	add	r3, r5
   1272e:	4298      	cmp	r0, r3
   12730:	d004      	beq.n	1273c <_malloc_trim_r+0x48>
   12732:	4630      	mov	r0, r6
   12734:	f7ff f85a 	bl	117ec <__malloc_unlock>
   12738:	2000      	movs	r0, #0
   1273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1273c:	4261      	negs	r1, r4
   1273e:	4630      	mov	r0, r6
   12740:	f000 f996 	bl	12a70 <_sbrk_r>
   12744:	3001      	adds	r0, #1
   12746:	d00d      	beq.n	12764 <_malloc_trim_r+0x70>
   12748:	4a10      	ldr	r2, [pc, #64]	; (1278c <_malloc_trim_r+0x98>)
   1274a:	68bb      	ldr	r3, [r7, #8]
   1274c:	1b2d      	subs	r5, r5, r4
   1274e:	f045 0501 	orr.w	r5, r5, #1
   12752:	605d      	str	r5, [r3, #4]
   12754:	6813      	ldr	r3, [r2, #0]
   12756:	4630      	mov	r0, r6
   12758:	1b1b      	subs	r3, r3, r4
   1275a:	6013      	str	r3, [r2, #0]
   1275c:	f7ff f846 	bl	117ec <__malloc_unlock>
   12760:	2001      	movs	r0, #1
   12762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12764:	2100      	movs	r1, #0
   12766:	4630      	mov	r0, r6
   12768:	f000 f982 	bl	12a70 <_sbrk_r>
   1276c:	68ba      	ldr	r2, [r7, #8]
   1276e:	1a83      	subs	r3, r0, r2
   12770:	2b0f      	cmp	r3, #15
   12772:	ddde      	ble.n	12732 <_malloc_trim_r+0x3e>
   12774:	f043 0301 	orr.w	r3, r3, #1
   12778:	6053      	str	r3, [r2, #4]
   1277a:	4b05      	ldr	r3, [pc, #20]	; (12790 <_malloc_trim_r+0x9c>)
   1277c:	4903      	ldr	r1, [pc, #12]	; (1278c <_malloc_trim_r+0x98>)
   1277e:	681b      	ldr	r3, [r3, #0]
   12780:	1ac0      	subs	r0, r0, r3
   12782:	6008      	str	r0, [r1, #0]
   12784:	e7d5      	b.n	12732 <_malloc_trim_r+0x3e>
   12786:	bf00      	nop
   12788:	20003540 	.word	0x20003540
   1278c:	20004e64 	.word	0x20004e64
   12790:	20003948 	.word	0x20003948

00012794 <_free_r>:
   12794:	2900      	cmp	r1, #0
   12796:	d061      	beq.n	1285c <_free_r+0xc8>
   12798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1279a:	460c      	mov	r4, r1
   1279c:	4606      	mov	r6, r0
   1279e:	f7ff f81f 	bl	117e0 <__malloc_lock>
   127a2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   127a6:	4f7b      	ldr	r7, [pc, #492]	; (12994 <_free_r+0x200>)
   127a8:	f1a4 0508 	sub.w	r5, r4, #8
   127ac:	f022 0101 	bic.w	r1, r2, #1
   127b0:	eb05 0c01 	add.w	ip, r5, r1
   127b4:	68b8      	ldr	r0, [r7, #8]
   127b6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   127ba:	4560      	cmp	r0, ip
   127bc:	f023 0303 	bic.w	r3, r3, #3
   127c0:	f000 808b 	beq.w	128da <_free_r+0x146>
   127c4:	07d2      	lsls	r2, r2, #31
   127c6:	f8cc 3004 	str.w	r3, [ip, #4]
   127ca:	d432      	bmi.n	12832 <_free_r+0x9e>
   127cc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   127d0:	1aad      	subs	r5, r5, r2
   127d2:	4411      	add	r1, r2
   127d4:	68aa      	ldr	r2, [r5, #8]
   127d6:	f107 0008 	add.w	r0, r7, #8
   127da:	4282      	cmp	r2, r0
   127dc:	d06a      	beq.n	128b4 <_free_r+0x120>
   127de:	eb0c 0403 	add.w	r4, ip, r3
   127e2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   127e6:	68ec      	ldr	r4, [r5, #12]
   127e8:	60d4      	str	r4, [r2, #12]
   127ea:	f01e 0f01 	tst.w	lr, #1
   127ee:	60a2      	str	r2, [r4, #8]
   127f0:	f000 8097 	beq.w	12922 <_free_r+0x18e>
   127f4:	f041 0301 	orr.w	r3, r1, #1
   127f8:	606b      	str	r3, [r5, #4]
   127fa:	f8cc 1000 	str.w	r1, [ip]
   127fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12802:	d235      	bcs.n	12870 <_free_r+0xdc>
   12804:	6878      	ldr	r0, [r7, #4]
   12806:	08cb      	lsrs	r3, r1, #3
   12808:	2201      	movs	r2, #1
   1280a:	0949      	lsrs	r1, r1, #5
   1280c:	3301      	adds	r3, #1
   1280e:	408a      	lsls	r2, r1
   12810:	4302      	orrs	r2, r0
   12812:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12816:	607a      	str	r2, [r7, #4]
   12818:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1281c:	3a08      	subs	r2, #8
   1281e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   12822:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   12826:	60cd      	str	r5, [r1, #12]
   12828:	4630      	mov	r0, r6
   1282a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1282e:	f7fe bfdd 	b.w	117ec <__malloc_unlock>
   12832:	eb0c 0203 	add.w	r2, ip, r3
   12836:	6852      	ldr	r2, [r2, #4]
   12838:	07d0      	lsls	r0, r2, #31
   1283a:	d410      	bmi.n	1285e <_free_r+0xca>
   1283c:	4419      	add	r1, r3
   1283e:	f107 0008 	add.w	r0, r7, #8
   12842:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12846:	4283      	cmp	r3, r0
   12848:	d073      	beq.n	12932 <_free_r+0x19e>
   1284a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1284e:	60da      	str	r2, [r3, #12]
   12850:	6093      	str	r3, [r2, #8]
   12852:	f041 0301 	orr.w	r3, r1, #1
   12856:	606b      	str	r3, [r5, #4]
   12858:	5069      	str	r1, [r5, r1]
   1285a:	e7d0      	b.n	127fe <_free_r+0x6a>
   1285c:	4770      	bx	lr
   1285e:	f041 0301 	orr.w	r3, r1, #1
   12862:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12866:	f844 3c04 	str.w	r3, [r4, #-4]
   1286a:	f8cc 1000 	str.w	r1, [ip]
   1286e:	d3c9      	bcc.n	12804 <_free_r+0x70>
   12870:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12874:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12878:	d248      	bcs.n	1290c <_free_r+0x178>
   1287a:	098b      	lsrs	r3, r1, #6
   1287c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12880:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12884:	00c3      	lsls	r3, r0, #3
   12886:	18f8      	adds	r0, r7, r3
   12888:	58fb      	ldr	r3, [r7, r3]
   1288a:	3808      	subs	r0, #8
   1288c:	4298      	cmp	r0, r3
   1288e:	d059      	beq.n	12944 <_free_r+0x1b0>
   12890:	685a      	ldr	r2, [r3, #4]
   12892:	f022 0203 	bic.w	r2, r2, #3
   12896:	428a      	cmp	r2, r1
   12898:	d902      	bls.n	128a0 <_free_r+0x10c>
   1289a:	689b      	ldr	r3, [r3, #8]
   1289c:	4298      	cmp	r0, r3
   1289e:	d1f7      	bne.n	12890 <_free_r+0xfc>
   128a0:	68d8      	ldr	r0, [r3, #12]
   128a2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   128a6:	6085      	str	r5, [r0, #8]
   128a8:	60dd      	str	r5, [r3, #12]
   128aa:	4630      	mov	r0, r6
   128ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   128b0:	f7fe bf9c 	b.w	117ec <__malloc_unlock>
   128b4:	eb0c 0203 	add.w	r2, ip, r3
   128b8:	6852      	ldr	r2, [r2, #4]
   128ba:	07d2      	lsls	r2, r2, #31
   128bc:	d463      	bmi.n	12986 <_free_r+0x1f2>
   128be:	440b      	add	r3, r1
   128c0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   128c4:	60ca      	str	r2, [r1, #12]
   128c6:	6091      	str	r1, [r2, #8]
   128c8:	f043 0201 	orr.w	r2, r3, #1
   128cc:	606a      	str	r2, [r5, #4]
   128ce:	4630      	mov	r0, r6
   128d0:	50eb      	str	r3, [r5, r3]
   128d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   128d6:	f7fe bf89 	b.w	117ec <__malloc_unlock>
   128da:	440b      	add	r3, r1
   128dc:	07d1      	lsls	r1, r2, #31
   128de:	d407      	bmi.n	128f0 <_free_r+0x15c>
   128e0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   128e4:	1aad      	subs	r5, r5, r2
   128e6:	4413      	add	r3, r2
   128e8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   128ec:	60ca      	str	r2, [r1, #12]
   128ee:	6091      	str	r1, [r2, #8]
   128f0:	f043 0201 	orr.w	r2, r3, #1
   128f4:	606a      	str	r2, [r5, #4]
   128f6:	4a28      	ldr	r2, [pc, #160]	; (12998 <_free_r+0x204>)
   128f8:	60bd      	str	r5, [r7, #8]
   128fa:	6812      	ldr	r2, [r2, #0]
   128fc:	429a      	cmp	r2, r3
   128fe:	d893      	bhi.n	12828 <_free_r+0x94>
   12900:	4b26      	ldr	r3, [pc, #152]	; (1299c <_free_r+0x208>)
   12902:	4630      	mov	r0, r6
   12904:	6819      	ldr	r1, [r3, #0]
   12906:	f7ff fef5 	bl	126f4 <_malloc_trim_r>
   1290a:	e78d      	b.n	12828 <_free_r+0x94>
   1290c:	2b14      	cmp	r3, #20
   1290e:	d90a      	bls.n	12926 <_free_r+0x192>
   12910:	2b54      	cmp	r3, #84	; 0x54
   12912:	d81f      	bhi.n	12954 <_free_r+0x1c0>
   12914:	0b0b      	lsrs	r3, r1, #12
   12916:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1291a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1291e:	00c3      	lsls	r3, r0, #3
   12920:	e7b1      	b.n	12886 <_free_r+0xf2>
   12922:	4419      	add	r1, r3
   12924:	e78d      	b.n	12842 <_free_r+0xae>
   12926:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1292a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   1292e:	00c3      	lsls	r3, r0, #3
   12930:	e7a9      	b.n	12886 <_free_r+0xf2>
   12932:	f041 0301 	orr.w	r3, r1, #1
   12936:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1293a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1293e:	606b      	str	r3, [r5, #4]
   12940:	5069      	str	r1, [r5, r1]
   12942:	e771      	b.n	12828 <_free_r+0x94>
   12944:	6879      	ldr	r1, [r7, #4]
   12946:	1092      	asrs	r2, r2, #2
   12948:	2401      	movs	r4, #1
   1294a:	fa04 f202 	lsl.w	r2, r4, r2
   1294e:	430a      	orrs	r2, r1
   12950:	607a      	str	r2, [r7, #4]
   12952:	e7a6      	b.n	128a2 <_free_r+0x10e>
   12954:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12958:	d806      	bhi.n	12968 <_free_r+0x1d4>
   1295a:	0bcb      	lsrs	r3, r1, #15
   1295c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12960:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12964:	00c3      	lsls	r3, r0, #3
   12966:	e78e      	b.n	12886 <_free_r+0xf2>
   12968:	f240 5254 	movw	r2, #1364	; 0x554
   1296c:	4293      	cmp	r3, r2
   1296e:	d806      	bhi.n	1297e <_free_r+0x1ea>
   12970:	0c8b      	lsrs	r3, r1, #18
   12972:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12976:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1297a:	00c3      	lsls	r3, r0, #3
   1297c:	e783      	b.n	12886 <_free_r+0xf2>
   1297e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12982:	227e      	movs	r2, #126	; 0x7e
   12984:	e77f      	b.n	12886 <_free_r+0xf2>
   12986:	f041 0301 	orr.w	r3, r1, #1
   1298a:	606b      	str	r3, [r5, #4]
   1298c:	f8cc 1000 	str.w	r1, [ip]
   12990:	e74a      	b.n	12828 <_free_r+0x94>
   12992:	bf00      	nop
   12994:	20003540 	.word	0x20003540
   12998:	2000394c 	.word	0x2000394c
   1299c:	20004e94 	.word	0x20004e94

000129a0 <fiprintf>:
   129a0:	b40e      	push	{r1, r2, r3}
   129a2:	b510      	push	{r4, lr}
   129a4:	b083      	sub	sp, #12
   129a6:	ab05      	add	r3, sp, #20
   129a8:	4c06      	ldr	r4, [pc, #24]	; (129c4 <fiprintf+0x24>)
   129aa:	f853 2b04 	ldr.w	r2, [r3], #4
   129ae:	9301      	str	r3, [sp, #4]
   129b0:	4601      	mov	r1, r0
   129b2:	6820      	ldr	r0, [r4, #0]
   129b4:	f000 f8e4 	bl	12b80 <_vfiprintf_r>
   129b8:	b003      	add	sp, #12
   129ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   129be:	b003      	add	sp, #12
   129c0:	4770      	bx	lr
   129c2:	bf00      	nop
   129c4:	2000395c 	.word	0x2000395c

000129c8 <__sread>:
   129c8:	b510      	push	{r4, lr}
   129ca:	460c      	mov	r4, r1
   129cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   129d0:	f002 fb12 	bl	14ff8 <_read_r>
   129d4:	2800      	cmp	r0, #0
   129d6:	db03      	blt.n	129e0 <__sread+0x18>
   129d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   129da:	4403      	add	r3, r0
   129dc:	6523      	str	r3, [r4, #80]	; 0x50
   129de:	bd10      	pop	{r4, pc}
   129e0:	89a3      	ldrh	r3, [r4, #12]
   129e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   129e6:	81a3      	strh	r3, [r4, #12]
   129e8:	bd10      	pop	{r4, pc}
   129ea:	bf00      	nop

000129ec <__swrite>:
   129ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129f0:	460c      	mov	r4, r1
   129f2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   129f6:	461f      	mov	r7, r3
   129f8:	05cb      	lsls	r3, r1, #23
   129fa:	4605      	mov	r5, r0
   129fc:	4616      	mov	r6, r2
   129fe:	d40b      	bmi.n	12a18 <__swrite+0x2c>
   12a00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   12a04:	81a1      	strh	r1, [r4, #12]
   12a06:	463b      	mov	r3, r7
   12a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12a0c:	4632      	mov	r2, r6
   12a0e:	4628      	mov	r0, r5
   12a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12a14:	f000 b862 	b.w	12adc <_write_r>
   12a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12a1c:	2302      	movs	r3, #2
   12a1e:	2200      	movs	r2, #0
   12a20:	f002 fad4 	bl	14fcc <_lseek_r>
   12a24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   12a28:	e7ea      	b.n	12a00 <__swrite+0x14>
   12a2a:	bf00      	nop

00012a2c <__sseek>:
   12a2c:	b510      	push	{r4, lr}
   12a2e:	460c      	mov	r4, r1
   12a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12a34:	f002 faca 	bl	14fcc <_lseek_r>
   12a38:	89a3      	ldrh	r3, [r4, #12]
   12a3a:	1c42      	adds	r2, r0, #1
   12a3c:	bf0e      	itee	eq
   12a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   12a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   12a46:	6520      	strne	r0, [r4, #80]	; 0x50
   12a48:	81a3      	strh	r3, [r4, #12]
   12a4a:	bd10      	pop	{r4, pc}

00012a4c <__sclose>:
   12a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12a50:	f002 b9c0 	b.w	14dd4 <_close_r>

00012a54 <__ascii_wctomb>:
   12a54:	b149      	cbz	r1, 12a6a <__ascii_wctomb+0x16>
   12a56:	2aff      	cmp	r2, #255	; 0xff
   12a58:	d802      	bhi.n	12a60 <__ascii_wctomb+0xc>
   12a5a:	700a      	strb	r2, [r1, #0]
   12a5c:	2001      	movs	r0, #1
   12a5e:	4770      	bx	lr
   12a60:	238a      	movs	r3, #138	; 0x8a
   12a62:	6003      	str	r3, [r0, #0]
   12a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12a68:	4770      	bx	lr
   12a6a:	4608      	mov	r0, r1
   12a6c:	4770      	bx	lr
   12a6e:	bf00      	nop

00012a70 <_sbrk_r>:
   12a70:	b538      	push	{r3, r4, r5, lr}
   12a72:	4d07      	ldr	r5, [pc, #28]	; (12a90 <_sbrk_r+0x20>)
   12a74:	2200      	movs	r2, #0
   12a76:	4604      	mov	r4, r0
   12a78:	4608      	mov	r0, r1
   12a7a:	602a      	str	r2, [r5, #0]
   12a7c:	f7fb faea 	bl	e054 <_sbrk>
   12a80:	1c43      	adds	r3, r0, #1
   12a82:	d000      	beq.n	12a86 <_sbrk_r+0x16>
   12a84:	bd38      	pop	{r3, r4, r5, pc}
   12a86:	682b      	ldr	r3, [r5, #0]
   12a88:	2b00      	cmp	r3, #0
   12a8a:	d0fb      	beq.n	12a84 <_sbrk_r+0x14>
   12a8c:	6023      	str	r3, [r4, #0]
   12a8e:	bd38      	pop	{r3, r4, r5, pc}
   12a90:	20005098 	.word	0x20005098

00012a94 <_fwalk_sglue>:
   12a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12a98:	4680      	mov	r8, r0
   12a9a:	460f      	mov	r7, r1
   12a9c:	4616      	mov	r6, r2
   12a9e:	f04f 0900 	mov.w	r9, #0
   12aa2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12aa6:	3d01      	subs	r5, #1
   12aa8:	d411      	bmi.n	12ace <_fwalk_sglue+0x3a>
   12aaa:	89a3      	ldrh	r3, [r4, #12]
   12aac:	2b01      	cmp	r3, #1
   12aae:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   12ab2:	d908      	bls.n	12ac6 <_fwalk_sglue+0x32>
   12ab4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12ab8:	3301      	adds	r3, #1
   12aba:	4621      	mov	r1, r4
   12abc:	d003      	beq.n	12ac6 <_fwalk_sglue+0x32>
   12abe:	4640      	mov	r0, r8
   12ac0:	47b8      	blx	r7
   12ac2:	ea49 0900 	orr.w	r9, r9, r0
   12ac6:	1c6b      	adds	r3, r5, #1
   12ac8:	f104 0468 	add.w	r4, r4, #104	; 0x68
   12acc:	d1ed      	bne.n	12aaa <_fwalk_sglue+0x16>
   12ace:	6836      	ldr	r6, [r6, #0]
   12ad0:	2e00      	cmp	r6, #0
   12ad2:	d1e6      	bne.n	12aa2 <_fwalk_sglue+0xe>
   12ad4:	4648      	mov	r0, r9
   12ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12ada:	bf00      	nop

00012adc <_write_r>:
   12adc:	b538      	push	{r3, r4, r5, lr}
   12ade:	460c      	mov	r4, r1
   12ae0:	4d08      	ldr	r5, [pc, #32]	; (12b04 <_write_r+0x28>)
   12ae2:	4684      	mov	ip, r0
   12ae4:	4611      	mov	r1, r2
   12ae6:	4620      	mov	r0, r4
   12ae8:	461a      	mov	r2, r3
   12aea:	2300      	movs	r3, #0
   12aec:	602b      	str	r3, [r5, #0]
   12aee:	4664      	mov	r4, ip
   12af0:	f7f9 fee0 	bl	c8b4 <_write>
   12af4:	1c43      	adds	r3, r0, #1
   12af6:	d000      	beq.n	12afa <_write_r+0x1e>
   12af8:	bd38      	pop	{r3, r4, r5, pc}
   12afa:	682b      	ldr	r3, [r5, #0]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d0fb      	beq.n	12af8 <_write_r+0x1c>
   12b00:	6023      	str	r3, [r4, #0]
   12b02:	bd38      	pop	{r3, r4, r5, pc}
   12b04:	20005098 	.word	0x20005098

00012b08 <__sprint_r.part.0>:
   12b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12b0e:	049c      	lsls	r4, r3, #18
   12b10:	4690      	mov	r8, r2
   12b12:	d52d      	bpl.n	12b70 <__sprint_r.part.0+0x68>
   12b14:	6893      	ldr	r3, [r2, #8]
   12b16:	6812      	ldr	r2, [r2, #0]
   12b18:	b343      	cbz	r3, 12b6c <__sprint_r.part.0+0x64>
   12b1a:	468b      	mov	fp, r1
   12b1c:	4606      	mov	r6, r0
   12b1e:	f102 0908 	add.w	r9, r2, #8
   12b22:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   12b26:	ea5f 079a 	movs.w	r7, sl, lsr #2
   12b2a:	d015      	beq.n	12b58 <__sprint_r.part.0+0x50>
   12b2c:	3d04      	subs	r5, #4
   12b2e:	2400      	movs	r4, #0
   12b30:	e001      	b.n	12b36 <__sprint_r.part.0+0x2e>
   12b32:	42a7      	cmp	r7, r4
   12b34:	d00e      	beq.n	12b54 <__sprint_r.part.0+0x4c>
   12b36:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12b3a:	465a      	mov	r2, fp
   12b3c:	4630      	mov	r0, r6
   12b3e:	f002 fac7 	bl	150d0 <_fputwc_r>
   12b42:	1c43      	adds	r3, r0, #1
   12b44:	f104 0401 	add.w	r4, r4, #1
   12b48:	d1f3      	bne.n	12b32 <__sprint_r.part.0+0x2a>
   12b4a:	2300      	movs	r3, #0
   12b4c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b54:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12b58:	f02a 0a03 	bic.w	sl, sl, #3
   12b5c:	eba3 030a 	sub.w	r3, r3, sl
   12b60:	f8c8 3008 	str.w	r3, [r8, #8]
   12b64:	f109 0908 	add.w	r9, r9, #8
   12b68:	2b00      	cmp	r3, #0
   12b6a:	d1da      	bne.n	12b22 <__sprint_r.part.0+0x1a>
   12b6c:	2000      	movs	r0, #0
   12b6e:	e7ec      	b.n	12b4a <__sprint_r.part.0+0x42>
   12b70:	f002 fae2 	bl	15138 <__sfvwrite_r>
   12b74:	2300      	movs	r3, #0
   12b76:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b7e:	bf00      	nop

00012b80 <_vfiprintf_r>:
   12b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	ed2d 8b02 	vpush	{d8}
   12b88:	b0c5      	sub	sp, #276	; 0x114
   12b8a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   12b8e:	4683      	mov	fp, r0
   12b90:	ee08 1a10 	vmov	s16, r1
   12b94:	4616      	mov	r6, r2
   12b96:	2100      	movs	r1, #0
   12b98:	2208      	movs	r2, #8
   12b9a:	4650      	mov	r0, sl
   12b9c:	461c      	mov	r4, r3
   12b9e:	9307      	str	r3, [sp, #28]
   12ba0:	f7fe fd30 	bl	11604 <memset>
   12ba4:	f1bb 0f00 	cmp.w	fp, #0
   12ba8:	d004      	beq.n	12bb4 <_vfiprintf_r+0x34>
   12baa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12bae:	2b00      	cmp	r3, #0
   12bb0:	f000 86a0 	beq.w	138f4 <_vfiprintf_r+0xd74>
   12bb4:	ee18 2a10 	vmov	r2, s16
   12bb8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12bba:	07db      	lsls	r3, r3, #31
   12bbc:	f140 8513 	bpl.w	135e6 <_vfiprintf_r+0xa66>
   12bc0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12bc4:	b28a      	uxth	r2, r1
   12bc6:	0495      	lsls	r5, r2, #18
   12bc8:	d40b      	bmi.n	12be2 <_vfiprintf_r+0x62>
   12bca:	ee18 3a10 	vmov	r3, s16
   12bce:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12bd2:	8199      	strh	r1, [r3, #12]
   12bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12bd6:	b28a      	uxth	r2, r1
   12bd8:	ee18 1a10 	vmov	r1, s16
   12bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12be0:	664b      	str	r3, [r1, #100]	; 0x64
   12be2:	0710      	lsls	r0, r2, #28
   12be4:	f140 8105 	bpl.w	12df2 <_vfiprintf_r+0x272>
   12be8:	ee18 3a10 	vmov	r3, s16
   12bec:	691b      	ldr	r3, [r3, #16]
   12bee:	2b00      	cmp	r3, #0
   12bf0:	f000 80ff 	beq.w	12df2 <_vfiprintf_r+0x272>
   12bf4:	f002 031a 	and.w	r3, r2, #26
   12bf8:	2b0a      	cmp	r3, #10
   12bfa:	f000 810a 	beq.w	12e12 <_vfiprintf_r+0x292>
   12bfe:	2300      	movs	r3, #0
   12c00:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   12c04:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12c08:	aa1b      	add	r2, sp, #108	; 0x6c
   12c0a:	930c      	str	r3, [sp, #48]	; 0x30
   12c0c:	9218      	str	r2, [sp, #96]	; 0x60
   12c0e:	4691      	mov	r9, r2
   12c10:	930b      	str	r3, [sp, #44]	; 0x2c
   12c12:	9305      	str	r3, [sp, #20]
   12c14:	46b0      	mov	r8, r6
   12c16:	4644      	mov	r4, r8
   12c18:	4ba8      	ldr	r3, [pc, #672]	; (12ebc <_vfiprintf_r+0x33c>)
   12c1a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12c1e:	f7fe fd7b 	bl	11718 <__locale_mb_cur_max>
   12c22:	4622      	mov	r2, r4
   12c24:	4603      	mov	r3, r0
   12c26:	a912      	add	r1, sp, #72	; 0x48
   12c28:	f8cd a000 	str.w	sl, [sp]
   12c2c:	4658      	mov	r0, fp
   12c2e:	47a8      	blx	r5
   12c30:	2800      	cmp	r0, #0
   12c32:	f000 8145 	beq.w	12ec0 <_vfiprintf_r+0x340>
   12c36:	f2c0 8139 	blt.w	12eac <_vfiprintf_r+0x32c>
   12c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12c3c:	2a25      	cmp	r2, #37	; 0x25
   12c3e:	4603      	mov	r3, r0
   12c40:	d001      	beq.n	12c46 <_vfiprintf_r+0xc6>
   12c42:	441c      	add	r4, r3
   12c44:	e7e8      	b.n	12c18 <_vfiprintf_r+0x98>
   12c46:	ebb4 0608 	subs.w	r6, r4, r8
   12c4a:	4605      	mov	r5, r0
   12c4c:	f040 813c 	bne.w	12ec8 <_vfiprintf_r+0x348>
   12c50:	2300      	movs	r3, #0
   12c52:	7861      	ldrb	r1, [r4, #1]
   12c54:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12c58:	f104 0801 	add.w	r8, r4, #1
   12c5c:	9306      	str	r3, [sp, #24]
   12c5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   12c62:	461e      	mov	r6, r3
   12c64:	242b      	movs	r4, #43	; 0x2b
   12c66:	f108 0801 	add.w	r8, r8, #1
   12c6a:	f1a1 0320 	sub.w	r3, r1, #32
   12c6e:	2b5a      	cmp	r3, #90	; 0x5a
   12c70:	f200 8178 	bhi.w	12f64 <_vfiprintf_r+0x3e4>
   12c74:	e8df f013 	tbh	[pc, r3, lsl #1]
   12c78:	017602b5 	.word	0x017602b5
   12c7c:	02b00176 	.word	0x02b00176
   12c80:	01760176 	.word	0x01760176
   12c84:	006a0176 	.word	0x006a0176
   12c88:	01760176 	.word	0x01760176
   12c8c:	028d027d 	.word	0x028d027d
   12c90:	02880176 	.word	0x02880176
   12c94:	01760297 	.word	0x01760297
   12c98:	005b0292 	.word	0x005b0292
   12c9c:	005b005b 	.word	0x005b005b
   12ca0:	005b005b 	.word	0x005b005b
   12ca4:	005b005b 	.word	0x005b005b
   12ca8:	005b005b 	.word	0x005b005b
   12cac:	01760176 	.word	0x01760176
   12cb0:	01760176 	.word	0x01760176
   12cb4:	01760176 	.word	0x01760176
   12cb8:	01760176 	.word	0x01760176
   12cbc:	025c0176 	.word	0x025c0176
   12cc0:	01760084 	.word	0x01760084
   12cc4:	01760176 	.word	0x01760176
   12cc8:	01760176 	.word	0x01760176
   12ccc:	01760176 	.word	0x01760176
   12cd0:	01760176 	.word	0x01760176
   12cd4:	00e80176 	.word	0x00e80176
   12cd8:	01760176 	.word	0x01760176
   12cdc:	02330176 	.word	0x02330176
   12ce0:	02da0176 	.word	0x02da0176
   12ce4:	01760176 	.word	0x01760176
   12ce8:	0176058b 	.word	0x0176058b
   12cec:	01760176 	.word	0x01760176
   12cf0:	01760176 	.word	0x01760176
   12cf4:	01760176 	.word	0x01760176
   12cf8:	01760176 	.word	0x01760176
   12cfc:	025c0176 	.word	0x025c0176
   12d00:	01760086 	.word	0x01760086
   12d04:	01760176 	.word	0x01760176
   12d08:	008602cd 	.word	0x008602cd
   12d0c:	0176007f 	.word	0x0176007f
   12d10:	017602c0 	.word	0x017602c0
   12d14:	00ea02fd 	.word	0x00ea02fd
   12d18:	007f02ed 	.word	0x007f02ed
   12d1c:	02330176 	.word	0x02330176
   12d20:	0569007c 	.word	0x0569007c
   12d24:	01760176 	.word	0x01760176
   12d28:	0176056b 	.word	0x0176056b
   12d2c:	007c      	.short	0x007c
   12d2e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12d32:	2200      	movs	r2, #0
   12d34:	f818 1b01 	ldrb.w	r1, [r8], #1
   12d38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12d3c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   12d40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12d44:	2b09      	cmp	r3, #9
   12d46:	d9f5      	bls.n	12d34 <_vfiprintf_r+0x1b4>
   12d48:	9206      	str	r2, [sp, #24]
   12d4a:	e78e      	b.n	12c6a <_vfiprintf_r+0xea>
   12d4c:	4658      	mov	r0, fp
   12d4e:	f000 ffef 	bl	13d30 <_localeconv_r>
   12d52:	6843      	ldr	r3, [r0, #4]
   12d54:	930d      	str	r3, [sp, #52]	; 0x34
   12d56:	4618      	mov	r0, r3
   12d58:	f7ff fa72 	bl	12240 <strlen>
   12d5c:	900e      	str	r0, [sp, #56]	; 0x38
   12d5e:	4605      	mov	r5, r0
   12d60:	4658      	mov	r0, fp
   12d62:	f000 ffe5 	bl	13d30 <_localeconv_r>
   12d66:	6883      	ldr	r3, [r0, #8]
   12d68:	930b      	str	r3, [sp, #44]	; 0x2c
   12d6a:	2d00      	cmp	r5, #0
   12d6c:	f040 84d6 	bne.w	1371c <_vfiprintf_r+0xb9c>
   12d70:	f898 1000 	ldrb.w	r1, [r8]
   12d74:	e777      	b.n	12c66 <_vfiprintf_r+0xe6>
   12d76:	f898 1000 	ldrb.w	r1, [r8]
   12d7a:	f046 0620 	orr.w	r6, r6, #32
   12d7e:	e772      	b.n	12c66 <_vfiprintf_r+0xe6>
   12d80:	f046 0610 	orr.w	r6, r6, #16
   12d84:	06b4      	lsls	r4, r6, #26
   12d86:	f140 818e 	bpl.w	130a6 <_vfiprintf_r+0x526>
   12d8a:	9b07      	ldr	r3, [sp, #28]
   12d8c:	3307      	adds	r3, #7
   12d8e:	f023 0307 	bic.w	r3, r3, #7
   12d92:	461a      	mov	r2, r3
   12d94:	6859      	ldr	r1, [r3, #4]
   12d96:	f852 3b08 	ldr.w	r3, [r2], #8
   12d9a:	9207      	str	r2, [sp, #28]
   12d9c:	460a      	mov	r2, r1
   12d9e:	2900      	cmp	r1, #0
   12da0:	f2c0 8470 	blt.w	13684 <_vfiprintf_r+0xb04>
   12da4:	1c79      	adds	r1, r7, #1
   12da6:	f000 85a2 	beq.w	138ee <_vfiprintf_r+0xd6e>
   12daa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12dae:	9103      	str	r1, [sp, #12]
   12db0:	ea53 0102 	orrs.w	r1, r3, r2
   12db4:	f000 843f 	beq.w	13636 <_vfiprintf_r+0xab6>
   12db8:	2b0a      	cmp	r3, #10
   12dba:	f172 0100 	sbcs.w	r1, r2, #0
   12dbe:	f080 8541 	bcs.w	13844 <_vfiprintf_r+0xcc4>
   12dc2:	3330      	adds	r3, #48	; 0x30
   12dc4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12dc8:	9e03      	ldr	r6, [sp, #12]
   12dca:	2301      	movs	r3, #1
   12dcc:	9304      	str	r3, [sp, #16]
   12dce:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12dd2:	9b04      	ldr	r3, [sp, #16]
   12dd4:	42bb      	cmp	r3, r7
   12dd6:	bfb8      	it	lt
   12dd8:	463b      	movlt	r3, r7
   12dda:	9303      	str	r3, [sp, #12]
   12ddc:	2300      	movs	r3, #0
   12dde:	9308      	str	r3, [sp, #32]
   12de0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12de4:	2b00      	cmp	r3, #0
   12de6:	f000 80cb 	beq.w	12f80 <_vfiprintf_r+0x400>
   12dea:	9b03      	ldr	r3, [sp, #12]
   12dec:	3301      	adds	r3, #1
   12dee:	9303      	str	r3, [sp, #12]
   12df0:	e0c6      	b.n	12f80 <_vfiprintf_r+0x400>
   12df2:	ee18 1a10 	vmov	r1, s16
   12df6:	4658      	mov	r0, fp
   12df8:	ee18 5a10 	vmov	r5, s16
   12dfc:	f001 f800 	bl	13e00 <__swsetup_r>
   12e00:	2800      	cmp	r0, #0
   12e02:	f040 8652 	bne.w	13aaa <_vfiprintf_r+0xf2a>
   12e06:	89aa      	ldrh	r2, [r5, #12]
   12e08:	f002 031a 	and.w	r3, r2, #26
   12e0c:	2b0a      	cmp	r3, #10
   12e0e:	f47f aef6 	bne.w	12bfe <_vfiprintf_r+0x7e>
   12e12:	ee18 1a10 	vmov	r1, s16
   12e16:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   12e1a:	2b00      	cmp	r3, #0
   12e1c:	f6ff aeef 	blt.w	12bfe <_vfiprintf_r+0x7e>
   12e20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12e22:	07db      	lsls	r3, r3, #31
   12e24:	d402      	bmi.n	12e2c <_vfiprintf_r+0x2ac>
   12e26:	0597      	lsls	r7, r2, #22
   12e28:	f140 8612 	bpl.w	13a50 <_vfiprintf_r+0xed0>
   12e2c:	ee18 1a10 	vmov	r1, s16
   12e30:	4623      	mov	r3, r4
   12e32:	4632      	mov	r2, r6
   12e34:	4658      	mov	r0, fp
   12e36:	f000 fe69 	bl	13b0c <__sbprintf>
   12e3a:	9005      	str	r0, [sp, #20]
   12e3c:	9805      	ldr	r0, [sp, #20]
   12e3e:	b045      	add	sp, #276	; 0x114
   12e40:	ecbd 8b02 	vpop	{d8}
   12e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e48:	f046 0610 	orr.w	r6, r6, #16
   12e4c:	f016 0220 	ands.w	r2, r6, #32
   12e50:	f000 8136 	beq.w	130c0 <_vfiprintf_r+0x540>
   12e54:	9b07      	ldr	r3, [sp, #28]
   12e56:	3307      	adds	r3, #7
   12e58:	f023 0307 	bic.w	r3, r3, #7
   12e5c:	4619      	mov	r1, r3
   12e5e:	685a      	ldr	r2, [r3, #4]
   12e60:	f851 3b08 	ldr.w	r3, [r1], #8
   12e64:	9107      	str	r1, [sp, #28]
   12e66:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12e6a:	9103      	str	r1, [sp, #12]
   12e6c:	2100      	movs	r1, #0
   12e6e:	2000      	movs	r0, #0
   12e70:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12e74:	1c78      	adds	r0, r7, #1
   12e76:	f000 8210 	beq.w	1329a <_vfiprintf_r+0x71a>
   12e7a:	9803      	ldr	r0, [sp, #12]
   12e7c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   12e80:	ea53 0002 	orrs.w	r0, r3, r2
   12e84:	f040 8208 	bne.w	13298 <_vfiprintf_r+0x718>
   12e88:	2f00      	cmp	r7, #0
   12e8a:	f040 8538 	bne.w	138fe <_vfiprintf_r+0xd7e>
   12e8e:	2900      	cmp	r1, #0
   12e90:	f040 83d5 	bne.w	1363e <_vfiprintf_r+0xabe>
   12e94:	9b03      	ldr	r3, [sp, #12]
   12e96:	f013 0301 	ands.w	r3, r3, #1
   12e9a:	9304      	str	r3, [sp, #16]
   12e9c:	f000 8411 	beq.w	136c2 <_vfiprintf_r+0xb42>
   12ea0:	2330      	movs	r3, #48	; 0x30
   12ea2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12ea6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12eaa:	e792      	b.n	12dd2 <_vfiprintf_r+0x252>
   12eac:	2208      	movs	r2, #8
   12eae:	2100      	movs	r1, #0
   12eb0:	4650      	mov	r0, sl
   12eb2:	f7fe fba7 	bl	11604 <memset>
   12eb6:	2301      	movs	r3, #1
   12eb8:	441c      	add	r4, r3
   12eba:	e6ad      	b.n	12c18 <_vfiprintf_r+0x98>
   12ebc:	200033d4 	.word	0x200033d4
   12ec0:	ebb4 0608 	subs.w	r6, r4, r8
   12ec4:	4605      	mov	r5, r0
   12ec6:	d01b      	beq.n	12f00 <_vfiprintf_r+0x380>
   12ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   12eca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   12ecc:	3301      	adds	r3, #1
   12ece:	4432      	add	r2, r6
   12ed0:	2b07      	cmp	r3, #7
   12ed2:	e9c9 8600 	strd	r8, r6, [r9]
   12ed6:	921a      	str	r2, [sp, #104]	; 0x68
   12ed8:	9319      	str	r3, [sp, #100]	; 0x64
   12eda:	dd1c      	ble.n	12f16 <_vfiprintf_r+0x396>
   12edc:	2a00      	cmp	r2, #0
   12ede:	f000 83a6 	beq.w	1362e <_vfiprintf_r+0xaae>
   12ee2:	ee18 1a10 	vmov	r1, s16
   12ee6:	aa18      	add	r2, sp, #96	; 0x60
   12ee8:	4658      	mov	r0, fp
   12eea:	f7ff fe0d 	bl	12b08 <__sprint_r.part.0>
   12eee:	bb20      	cbnz	r0, 12f3a <_vfiprintf_r+0x3ba>
   12ef0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ef4:	9b05      	ldr	r3, [sp, #20]
   12ef6:	4433      	add	r3, r6
   12ef8:	9305      	str	r3, [sp, #20]
   12efa:	2d00      	cmp	r5, #0
   12efc:	f47f aea8 	bne.w	12c50 <_vfiprintf_r+0xd0>
   12f00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12f02:	2b00      	cmp	r3, #0
   12f04:	f040 85c1 	bne.w	13a8a <_vfiprintf_r+0xf0a>
   12f08:	ee18 3a10 	vmov	r3, s16
   12f0c:	2200      	movs	r2, #0
   12f0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12f12:	9219      	str	r2, [sp, #100]	; 0x64
   12f14:	e015      	b.n	12f42 <_vfiprintf_r+0x3c2>
   12f16:	f109 0908 	add.w	r9, r9, #8
   12f1a:	e7eb      	b.n	12ef4 <_vfiprintf_r+0x374>
   12f1c:	ee18 1a10 	vmov	r1, s16
   12f20:	aa18      	add	r2, sp, #96	; 0x60
   12f22:	4658      	mov	r0, fp
   12f24:	f7ff fdf0 	bl	12b08 <__sprint_r.part.0>
   12f28:	2800      	cmp	r0, #0
   12f2a:	f000 80a6 	beq.w	1307a <_vfiprintf_r+0x4fa>
   12f2e:	9b08      	ldr	r3, [sp, #32]
   12f30:	b11b      	cbz	r3, 12f3a <_vfiprintf_r+0x3ba>
   12f32:	9908      	ldr	r1, [sp, #32]
   12f34:	4658      	mov	r0, fp
   12f36:	f7ff fc2d 	bl	12794 <_free_r>
   12f3a:	ee18 3a10 	vmov	r3, s16
   12f3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12f42:	ee18 2a10 	vmov	r2, s16
   12f46:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12f48:	f012 0f01 	tst.w	r2, #1
   12f4c:	b29a      	uxth	r2, r3
   12f4e:	f000 80a0 	beq.w	13092 <_vfiprintf_r+0x512>
   12f52:	0650      	lsls	r0, r2, #25
   12f54:	f100 85b2 	bmi.w	13abc <_vfiprintf_r+0xf3c>
   12f58:	9805      	ldr	r0, [sp, #20]
   12f5a:	b045      	add	sp, #276	; 0x114
   12f5c:	ecbd 8b02 	vpop	{d8}
   12f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f64:	2900      	cmp	r1, #0
   12f66:	d0cb      	beq.n	12f00 <_vfiprintf_r+0x380>
   12f68:	2300      	movs	r3, #0
   12f6a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12f6e:	2301      	movs	r3, #1
   12f70:	e9cd 3303 	strd	r3, r3, [sp, #12]
   12f74:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12f78:	ac2b      	add	r4, sp, #172	; 0xac
   12f7a:	2300      	movs	r3, #0
   12f7c:	9308      	str	r3, [sp, #32]
   12f7e:	461f      	mov	r7, r3
   12f80:	f016 0302 	ands.w	r3, r6, #2
   12f84:	9309      	str	r3, [sp, #36]	; 0x24
   12f86:	d002      	beq.n	12f8e <_vfiprintf_r+0x40e>
   12f88:	9b03      	ldr	r3, [sp, #12]
   12f8a:	3302      	adds	r3, #2
   12f8c:	9303      	str	r3, [sp, #12]
   12f8e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12f92:	930a      	str	r3, [sp, #40]	; 0x28
   12f94:	d105      	bne.n	12fa2 <_vfiprintf_r+0x422>
   12f96:	9b06      	ldr	r3, [sp, #24]
   12f98:	9a03      	ldr	r2, [sp, #12]
   12f9a:	1a9d      	subs	r5, r3, r2
   12f9c:	2d00      	cmp	r5, #0
   12f9e:	f300 827b 	bgt.w	13498 <_vfiprintf_r+0x918>
   12fa2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12fa6:	1c41      	adds	r1, r0, #1
   12fa8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12fac:	b182      	cbz	r2, 12fd0 <_vfiprintf_r+0x450>
   12fae:	2201      	movs	r2, #1
   12fb0:	3301      	adds	r3, #1
   12fb2:	f8c9 2004 	str.w	r2, [r9, #4]
   12fb6:	2907      	cmp	r1, #7
   12fb8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12fbc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12fc0:	f8c9 2000 	str.w	r2, [r9]
   12fc4:	f300 824a 	bgt.w	1345c <_vfiprintf_r+0x8dc>
   12fc8:	4608      	mov	r0, r1
   12fca:	f109 0908 	add.w	r9, r9, #8
   12fce:	3101      	adds	r1, #1
   12fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12fd2:	b1e2      	cbz	r2, 1300e <_vfiprintf_r+0x48e>
   12fd4:	aa11      	add	r2, sp, #68	; 0x44
   12fd6:	3302      	adds	r3, #2
   12fd8:	f8c9 2000 	str.w	r2, [r9]
   12fdc:	2907      	cmp	r1, #7
   12fde:	f04f 0202 	mov.w	r2, #2
   12fe2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12fe6:	f8c9 2004 	str.w	r2, [r9, #4]
   12fea:	f340 8250 	ble.w	1348e <_vfiprintf_r+0x90e>
   12fee:	2b00      	cmp	r3, #0
   12ff0:	f000 8343 	beq.w	1367a <_vfiprintf_r+0xafa>
   12ff4:	ee18 1a10 	vmov	r1, s16
   12ff8:	aa18      	add	r2, sp, #96	; 0x60
   12ffa:	4658      	mov	r0, fp
   12ffc:	f7ff fd84 	bl	12b08 <__sprint_r.part.0>
   13000:	2800      	cmp	r0, #0
   13002:	d194      	bne.n	12f2e <_vfiprintf_r+0x3ae>
   13004:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13008:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1300c:	1c41      	adds	r1, r0, #1
   1300e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13010:	2a80      	cmp	r2, #128	; 0x80
   13012:	f000 8184 	beq.w	1331e <_vfiprintf_r+0x79e>
   13016:	9a04      	ldr	r2, [sp, #16]
   13018:	1abd      	subs	r5, r7, r2
   1301a:	2d00      	cmp	r5, #0
   1301c:	f300 81d7 	bgt.w	133ce <_vfiprintf_r+0x84e>
   13020:	9a04      	ldr	r2, [sp, #16]
   13022:	f8c9 4000 	str.w	r4, [r9]
   13026:	4413      	add	r3, r2
   13028:	2907      	cmp	r1, #7
   1302a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1302e:	f8c9 2004 	str.w	r2, [r9, #4]
   13032:	f340 816e 	ble.w	13312 <_vfiprintf_r+0x792>
   13036:	2b00      	cmp	r3, #0
   13038:	f000 8275 	beq.w	13526 <_vfiprintf_r+0x9a6>
   1303c:	ee18 1a10 	vmov	r1, s16
   13040:	aa18      	add	r2, sp, #96	; 0x60
   13042:	4658      	mov	r0, fp
   13044:	f7ff fd60 	bl	12b08 <__sprint_r.part.0>
   13048:	2800      	cmp	r0, #0
   1304a:	f47f af70 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   1304e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13050:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13054:	0775      	lsls	r5, r6, #29
   13056:	d505      	bpl.n	13064 <_vfiprintf_r+0x4e4>
   13058:	9a06      	ldr	r2, [sp, #24]
   1305a:	9903      	ldr	r1, [sp, #12]
   1305c:	1a54      	subs	r4, r2, r1
   1305e:	2c00      	cmp	r4, #0
   13060:	f300 826b 	bgt.w	1353a <_vfiprintf_r+0x9ba>
   13064:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   13068:	9803      	ldr	r0, [sp, #12]
   1306a:	4281      	cmp	r1, r0
   1306c:	bfac      	ite	ge
   1306e:	1852      	addge	r2, r2, r1
   13070:	1812      	addlt	r2, r2, r0
   13072:	9205      	str	r2, [sp, #20]
   13074:	2b00      	cmp	r3, #0
   13076:	f47f af51 	bne.w	12f1c <_vfiprintf_r+0x39c>
   1307a:	9908      	ldr	r1, [sp, #32]
   1307c:	2300      	movs	r3, #0
   1307e:	9319      	str	r3, [sp, #100]	; 0x64
   13080:	2900      	cmp	r1, #0
   13082:	f000 8149 	beq.w	13318 <_vfiprintf_r+0x798>
   13086:	4658      	mov	r0, fp
   13088:	f7ff fb84 	bl	12794 <_free_r>
   1308c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13090:	e5c1      	b.n	12c16 <_vfiprintf_r+0x96>
   13092:	059c      	lsls	r4, r3, #22
   13094:	f53f af5d 	bmi.w	12f52 <_vfiprintf_r+0x3d2>
   13098:	ee18 4a10 	vmov	r4, s16
   1309c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1309e:	f7fe fb39 	bl	11714 <__retarget_lock_release_recursive>
   130a2:	89a2      	ldrh	r2, [r4, #12]
   130a4:	e755      	b.n	12f52 <_vfiprintf_r+0x3d2>
   130a6:	06f0      	lsls	r0, r6, #27
   130a8:	9a07      	ldr	r2, [sp, #28]
   130aa:	f100 831f 	bmi.w	136ec <_vfiprintf_r+0xb6c>
   130ae:	0671      	lsls	r1, r6, #25
   130b0:	f140 8319 	bpl.w	136e6 <_vfiprintf_r+0xb66>
   130b4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   130b8:	9207      	str	r2, [sp, #28]
   130ba:	17da      	asrs	r2, r3, #31
   130bc:	4611      	mov	r1, r2
   130be:	e66e      	b.n	12d9e <_vfiprintf_r+0x21e>
   130c0:	f016 0310 	ands.w	r3, r6, #16
   130c4:	9907      	ldr	r1, [sp, #28]
   130c6:	f040 8309 	bne.w	136dc <_vfiprintf_r+0xb5c>
   130ca:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   130ce:	f000 8301 	beq.w	136d4 <_vfiprintf_r+0xb54>
   130d2:	461a      	mov	r2, r3
   130d4:	f851 3b04 	ldr.w	r3, [r1], #4
   130d8:	9107      	str	r1, [sp, #28]
   130da:	b29b      	uxth	r3, r3
   130dc:	e6c3      	b.n	12e66 <_vfiprintf_r+0x2e6>
   130de:	9b07      	ldr	r3, [sp, #28]
   130e0:	461a      	mov	r2, r3
   130e2:	2300      	movs	r3, #0
   130e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   130e8:	4613      	mov	r3, r2
   130ea:	f853 4b04 	ldr.w	r4, [r3], #4
   130ee:	9303      	str	r3, [sp, #12]
   130f0:	2c00      	cmp	r4, #0
   130f2:	f000 8412 	beq.w	1391a <_vfiprintf_r+0xd9a>
   130f6:	2953      	cmp	r1, #83	; 0x53
   130f8:	f000 8365 	beq.w	137c6 <_vfiprintf_r+0xc46>
   130fc:	f016 0510 	ands.w	r5, r6, #16
   13100:	f040 8361 	bne.w	137c6 <_vfiprintf_r+0xc46>
   13104:	1c7b      	adds	r3, r7, #1
   13106:	f000 84b3 	beq.w	13a70 <_vfiprintf_r+0xef0>
   1310a:	463a      	mov	r2, r7
   1310c:	4629      	mov	r1, r5
   1310e:	4620      	mov	r0, r4
   13110:	f7ff f836 	bl	12180 <memchr>
   13114:	9008      	str	r0, [sp, #32]
   13116:	2800      	cmp	r0, #0
   13118:	f000 849f 	beq.w	13a5a <_vfiprintf_r+0xeda>
   1311c:	1b03      	subs	r3, r0, r4
   1311e:	9a03      	ldr	r2, [sp, #12]
   13120:	9304      	str	r3, [sp, #16]
   13122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13126:	462f      	mov	r7, r5
   13128:	9207      	str	r2, [sp, #28]
   1312a:	9303      	str	r3, [sp, #12]
   1312c:	9508      	str	r5, [sp, #32]
   1312e:	e657      	b.n	12de0 <_vfiprintf_r+0x260>
   13130:	2943      	cmp	r1, #67	; 0x43
   13132:	d002      	beq.n	1313a <_vfiprintf_r+0x5ba>
   13134:	06f5      	lsls	r5, r6, #27
   13136:	f140 832d 	bpl.w	13794 <_vfiprintf_r+0xc14>
   1313a:	9d07      	ldr	r5, [sp, #28]
   1313c:	2208      	movs	r2, #8
   1313e:	2100      	movs	r1, #0
   13140:	a816      	add	r0, sp, #88	; 0x58
   13142:	ac2b      	add	r4, sp, #172	; 0xac
   13144:	f7fe fa5e 	bl	11604 <memset>
   13148:	ab16      	add	r3, sp, #88	; 0x58
   1314a:	f855 2b04 	ldr.w	r2, [r5], #4
   1314e:	4621      	mov	r1, r4
   13150:	4658      	mov	r0, fp
   13152:	f000 fdc7 	bl	13ce4 <_wcrtomb_r>
   13156:	4603      	mov	r3, r0
   13158:	3301      	adds	r3, #1
   1315a:	9004      	str	r0, [sp, #16]
   1315c:	f000 84b3 	beq.w	13ac6 <_vfiprintf_r+0xf46>
   13160:	9b04      	ldr	r3, [sp, #16]
   13162:	9507      	str	r5, [sp, #28]
   13164:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13168:	9303      	str	r3, [sp, #12]
   1316a:	2300      	movs	r3, #0
   1316c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   13170:	e703      	b.n	12f7a <_vfiprintf_r+0x3fa>
   13172:	9b07      	ldr	r3, [sp, #28]
   13174:	f853 2b04 	ldr.w	r2, [r3], #4
   13178:	9206      	str	r2, [sp, #24]
   1317a:	2a00      	cmp	r2, #0
   1317c:	f280 829c 	bge.w	136b8 <_vfiprintf_r+0xb38>
   13180:	9a06      	ldr	r2, [sp, #24]
   13182:	4252      	negs	r2, r2
   13184:	e9cd 2306 	strd	r2, r3, [sp, #24]
   13188:	f898 1000 	ldrb.w	r1, [r8]
   1318c:	f046 0604 	orr.w	r6, r6, #4
   13190:	e569      	b.n	12c66 <_vfiprintf_r+0xe6>
   13192:	f898 1000 	ldrb.w	r1, [r8]
   13196:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   1319a:	e564      	b.n	12c66 <_vfiprintf_r+0xe6>
   1319c:	f898 1000 	ldrb.w	r1, [r8]
   131a0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   131a4:	e55f      	b.n	12c66 <_vfiprintf_r+0xe6>
   131a6:	4642      	mov	r2, r8
   131a8:	f812 1b01 	ldrb.w	r1, [r2], #1
   131ac:	292a      	cmp	r1, #42	; 0x2a
   131ae:	f000 8496 	beq.w	13ade <_vfiprintf_r+0xf5e>
   131b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   131b6:	2b09      	cmp	r3, #9
   131b8:	4690      	mov	r8, r2
   131ba:	f04f 0700 	mov.w	r7, #0
   131be:	f63f ad54 	bhi.w	12c6a <_vfiprintf_r+0xea>
   131c2:	f818 1b01 	ldrb.w	r1, [r8], #1
   131c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   131ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   131ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   131d2:	2b09      	cmp	r3, #9
   131d4:	d9f5      	bls.n	131c2 <_vfiprintf_r+0x642>
   131d6:	e548      	b.n	12c6a <_vfiprintf_r+0xea>
   131d8:	f898 1000 	ldrb.w	r1, [r8]
   131dc:	f046 0601 	orr.w	r6, r6, #1
   131e0:	e541      	b.n	12c66 <_vfiprintf_r+0xe6>
   131e2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   131e6:	2b00      	cmp	r3, #0
   131e8:	f47f adc2 	bne.w	12d70 <_vfiprintf_r+0x1f0>
   131ec:	2320      	movs	r3, #32
   131ee:	f898 1000 	ldrb.w	r1, [r8]
   131f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   131f6:	e536      	b.n	12c66 <_vfiprintf_r+0xe6>
   131f8:	f898 1000 	ldrb.w	r1, [r8]
   131fc:	296c      	cmp	r1, #108	; 0x6c
   131fe:	bf03      	ittte	eq
   13200:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   13204:	f046 0620 	orreq.w	r6, r6, #32
   13208:	f108 0801 	addeq.w	r8, r8, #1
   1320c:	f046 0610 	orrne.w	r6, r6, #16
   13210:	e529      	b.n	12c66 <_vfiprintf_r+0xe6>
   13212:	f898 1000 	ldrb.w	r1, [r8]
   13216:	2968      	cmp	r1, #104	; 0x68
   13218:	bf03      	ittte	eq
   1321a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1321e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   13222:	f108 0801 	addeq.w	r8, r8, #1
   13226:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1322a:	e51c      	b.n	12c66 <_vfiprintf_r+0xe6>
   1322c:	f046 0310 	orr.w	r3, r6, #16
   13230:	9303      	str	r3, [sp, #12]
   13232:	9b03      	ldr	r3, [sp, #12]
   13234:	f013 0220 	ands.w	r2, r3, #32
   13238:	f000 8206 	beq.w	13648 <_vfiprintf_r+0xac8>
   1323c:	9b07      	ldr	r3, [sp, #28]
   1323e:	3307      	adds	r3, #7
   13240:	f023 0307 	bic.w	r3, r3, #7
   13244:	4619      	mov	r1, r3
   13246:	685a      	ldr	r2, [r3, #4]
   13248:	f851 3b08 	ldr.w	r3, [r1], #8
   1324c:	9107      	str	r1, [sp, #28]
   1324e:	2101      	movs	r1, #1
   13250:	e60d      	b.n	12e6e <_vfiprintf_r+0x2ee>
   13252:	9a07      	ldr	r2, [sp, #28]
   13254:	f046 0302 	orr.w	r3, r6, #2
   13258:	9303      	str	r3, [sp, #12]
   1325a:	f852 3b04 	ldr.w	r3, [r2], #4
   1325e:	9207      	str	r2, [sp, #28]
   13260:	f647 0230 	movw	r2, #30768	; 0x7830
   13264:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   13268:	4ab8      	ldr	r2, [pc, #736]	; (1354c <_vfiprintf_r+0x9cc>)
   1326a:	920c      	str	r2, [sp, #48]	; 0x30
   1326c:	2102      	movs	r1, #2
   1326e:	2200      	movs	r2, #0
   13270:	e5fd      	b.n	12e6e <_vfiprintf_r+0x2ee>
   13272:	06b7      	lsls	r7, r6, #26
   13274:	f100 8248 	bmi.w	13708 <_vfiprintf_r+0xb88>
   13278:	06f5      	lsls	r5, r6, #27
   1327a:	f100 8346 	bmi.w	1390a <_vfiprintf_r+0xd8a>
   1327e:	0674      	lsls	r4, r6, #25
   13280:	f100 83d5 	bmi.w	13a2e <_vfiprintf_r+0xeae>
   13284:	05b0      	lsls	r0, r6, #22
   13286:	f140 8340 	bpl.w	1390a <_vfiprintf_r+0xd8a>
   1328a:	9b07      	ldr	r3, [sp, #28]
   1328c:	9905      	ldr	r1, [sp, #20]
   1328e:	f853 2b04 	ldr.w	r2, [r3], #4
   13292:	9307      	str	r3, [sp, #28]
   13294:	7011      	strb	r1, [r2, #0]
   13296:	e4be      	b.n	12c16 <_vfiprintf_r+0x96>
   13298:	9603      	str	r6, [sp, #12]
   1329a:	2901      	cmp	r1, #1
   1329c:	f43f ad8c 	beq.w	12db8 <_vfiprintf_r+0x238>
   132a0:	2902      	cmp	r1, #2
   132a2:	ac44      	add	r4, sp, #272	; 0x110
   132a4:	d111      	bne.n	132ca <_vfiprintf_r+0x74a>
   132a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   132a8:	f003 010f 	and.w	r1, r3, #15
   132ac:	091b      	lsrs	r3, r3, #4
   132ae:	5c41      	ldrb	r1, [r0, r1]
   132b0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   132b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   132b8:	0912      	lsrs	r2, r2, #4
   132ba:	ea53 0102 	orrs.w	r1, r3, r2
   132be:	d1f3      	bne.n	132a8 <_vfiprintf_r+0x728>
   132c0:	9e03      	ldr	r6, [sp, #12]
   132c2:	ab44      	add	r3, sp, #272	; 0x110
   132c4:	1b1b      	subs	r3, r3, r4
   132c6:	9304      	str	r3, [sp, #16]
   132c8:	e583      	b.n	12dd2 <_vfiprintf_r+0x252>
   132ca:	f003 0107 	and.w	r1, r3, #7
   132ce:	08db      	lsrs	r3, r3, #3
   132d0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   132d4:	08d2      	lsrs	r2, r2, #3
   132d6:	3130      	adds	r1, #48	; 0x30
   132d8:	ea53 0502 	orrs.w	r5, r3, r2
   132dc:	4620      	mov	r0, r4
   132de:	f804 1d01 	strb.w	r1, [r4, #-1]!
   132e2:	d1f2      	bne.n	132ca <_vfiprintf_r+0x74a>
   132e4:	9e03      	ldr	r6, [sp, #12]
   132e6:	07f3      	lsls	r3, r6, #31
   132e8:	d5eb      	bpl.n	132c2 <_vfiprintf_r+0x742>
   132ea:	2930      	cmp	r1, #48	; 0x30
   132ec:	d0e8      	beq.n	132c0 <_vfiprintf_r+0x740>
   132ee:	2330      	movs	r3, #48	; 0x30
   132f0:	3802      	subs	r0, #2
   132f2:	f804 3c01 	strb.w	r3, [r4, #-1]
   132f6:	ab44      	add	r3, sp, #272	; 0x110
   132f8:	1a1b      	subs	r3, r3, r0
   132fa:	9e03      	ldr	r6, [sp, #12]
   132fc:	9304      	str	r3, [sp, #16]
   132fe:	4604      	mov	r4, r0
   13300:	e567      	b.n	12dd2 <_vfiprintf_r+0x252>
   13302:	9b04      	ldr	r3, [sp, #16]
   13304:	941b      	str	r4, [sp, #108]	; 0x6c
   13306:	2201      	movs	r2, #1
   13308:	931c      	str	r3, [sp, #112]	; 0x70
   1330a:	931a      	str	r3, [sp, #104]	; 0x68
   1330c:	9219      	str	r2, [sp, #100]	; 0x64
   1330e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13312:	f109 0908 	add.w	r9, r9, #8
   13316:	e69d      	b.n	13054 <_vfiprintf_r+0x4d4>
   13318:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1331c:	e47b      	b.n	12c16 <_vfiprintf_r+0x96>
   1331e:	9a06      	ldr	r2, [sp, #24]
   13320:	9d03      	ldr	r5, [sp, #12]
   13322:	1b55      	subs	r5, r2, r5
   13324:	2d00      	cmp	r5, #0
   13326:	f77f ae76 	ble.w	13016 <_vfiprintf_r+0x496>
   1332a:	2d10      	cmp	r5, #16
   1332c:	f340 83bb 	ble.w	13aa6 <_vfiprintf_r+0xf26>
   13330:	9409      	str	r4, [sp, #36]	; 0x24
   13332:	ee18 4a10 	vmov	r4, s16
   13336:	e007      	b.n	13348 <_vfiprintf_r+0x7c8>
   13338:	f100 0c02 	add.w	ip, r0, #2
   1333c:	f109 0908 	add.w	r9, r9, #8
   13340:	4610      	mov	r0, r2
   13342:	3d10      	subs	r5, #16
   13344:	2d10      	cmp	r5, #16
   13346:	dd1e      	ble.n	13386 <_vfiprintf_r+0x806>
   13348:	4981      	ldr	r1, [pc, #516]	; (13550 <_vfiprintf_r+0x9d0>)
   1334a:	f8c9 1000 	str.w	r1, [r9]
   1334e:	1c42      	adds	r2, r0, #1
   13350:	3310      	adds	r3, #16
   13352:	2110      	movs	r1, #16
   13354:	2a07      	cmp	r2, #7
   13356:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1335a:	f8c9 1004 	str.w	r1, [r9, #4]
   1335e:	ddeb      	ble.n	13338 <_vfiprintf_r+0x7b8>
   13360:	aa18      	add	r2, sp, #96	; 0x60
   13362:	2b00      	cmp	r3, #0
   13364:	d074      	beq.n	13450 <_vfiprintf_r+0x8d0>
   13366:	4621      	mov	r1, r4
   13368:	4658      	mov	r0, fp
   1336a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1336e:	f7ff fbcb 	bl	12b08 <__sprint_r.part.0>
   13372:	2800      	cmp	r0, #0
   13374:	f47f addb 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   13378:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1337c:	3d10      	subs	r5, #16
   1337e:	2d10      	cmp	r5, #16
   13380:	f100 0c01 	add.w	ip, r0, #1
   13384:	dce0      	bgt.n	13348 <_vfiprintf_r+0x7c8>
   13386:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13388:	4a71      	ldr	r2, [pc, #452]	; (13550 <_vfiprintf_r+0x9d0>)
   1338a:	f8c9 5004 	str.w	r5, [r9, #4]
   1338e:	442b      	add	r3, r5
   13390:	f1bc 0f07 	cmp.w	ip, #7
   13394:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   13398:	f8c9 2000 	str.w	r2, [r9]
   1339c:	f340 8194 	ble.w	136c8 <_vfiprintf_r+0xb48>
   133a0:	2b00      	cmp	r3, #0
   133a2:	f000 831f 	beq.w	139e4 <_vfiprintf_r+0xe64>
   133a6:	ee18 1a10 	vmov	r1, s16
   133aa:	aa18      	add	r2, sp, #96	; 0x60
   133ac:	4658      	mov	r0, fp
   133ae:	f7ff fbab 	bl	12b08 <__sprint_r.part.0>
   133b2:	2800      	cmp	r0, #0
   133b4:	f47f adbb 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   133b8:	9a04      	ldr	r2, [sp, #16]
   133ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   133be:	1abd      	subs	r5, r7, r2
   133c0:	2d00      	cmp	r5, #0
   133c2:	f100 0101 	add.w	r1, r0, #1
   133c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   133ca:	f77f ae29 	ble.w	13020 <_vfiprintf_r+0x4a0>
   133ce:	2d10      	cmp	r5, #16
   133d0:	dd29      	ble.n	13426 <_vfiprintf_r+0x8a6>
   133d2:	9409      	str	r4, [sp, #36]	; 0x24
   133d4:	2710      	movs	r7, #16
   133d6:	ee18 4a10 	vmov	r4, s16
   133da:	e007      	b.n	133ec <_vfiprintf_r+0x86c>
   133dc:	f100 0c02 	add.w	ip, r0, #2
   133e0:	f109 0908 	add.w	r9, r9, #8
   133e4:	4610      	mov	r0, r2
   133e6:	3d10      	subs	r5, #16
   133e8:	2d10      	cmp	r5, #16
   133ea:	dd1a      	ble.n	13422 <_vfiprintf_r+0x8a2>
   133ec:	1c42      	adds	r2, r0, #1
   133ee:	4958      	ldr	r1, [pc, #352]	; (13550 <_vfiprintf_r+0x9d0>)
   133f0:	3310      	adds	r3, #16
   133f2:	2a07      	cmp	r2, #7
   133f4:	e9c9 1700 	strd	r1, r7, [r9]
   133f8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   133fc:	ddee      	ble.n	133dc <_vfiprintf_r+0x85c>
   133fe:	aa18      	add	r2, sp, #96	; 0x60
   13400:	b303      	cbz	r3, 13444 <_vfiprintf_r+0x8c4>
   13402:	4621      	mov	r1, r4
   13404:	4658      	mov	r0, fp
   13406:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1340a:	f7ff fb7d 	bl	12b08 <__sprint_r.part.0>
   1340e:	2800      	cmp	r0, #0
   13410:	f47f ad8d 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   13414:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13418:	3d10      	subs	r5, #16
   1341a:	2d10      	cmp	r5, #16
   1341c:	f100 0c01 	add.w	ip, r0, #1
   13420:	dce4      	bgt.n	133ec <_vfiprintf_r+0x86c>
   13422:	9c09      	ldr	r4, [sp, #36]	; 0x24
   13424:	4661      	mov	r1, ip
   13426:	4a4a      	ldr	r2, [pc, #296]	; (13550 <_vfiprintf_r+0x9d0>)
   13428:	f8c9 5004 	str.w	r5, [r9, #4]
   1342c:	442b      	add	r3, r5
   1342e:	2907      	cmp	r1, #7
   13430:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   13434:	f8c9 2000 	str.w	r2, [r9]
   13438:	f300 80e7 	bgt.w	1360a <_vfiprintf_r+0xa8a>
   1343c:	f109 0908 	add.w	r9, r9, #8
   13440:	3101      	adds	r1, #1
   13442:	e5ed      	b.n	13020 <_vfiprintf_r+0x4a0>
   13444:	f04f 0c01 	mov.w	ip, #1
   13448:	4618      	mov	r0, r3
   1344a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1344e:	e7ca      	b.n	133e6 <_vfiprintf_r+0x866>
   13450:	f04f 0c01 	mov.w	ip, #1
   13454:	4618      	mov	r0, r3
   13456:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1345a:	e772      	b.n	13342 <_vfiprintf_r+0x7c2>
   1345c:	2b00      	cmp	r3, #0
   1345e:	f000 8104 	beq.w	1366a <_vfiprintf_r+0xaea>
   13462:	ee18 1a10 	vmov	r1, s16
   13466:	aa18      	add	r2, sp, #96	; 0x60
   13468:	4658      	mov	r0, fp
   1346a:	f7ff fb4d 	bl	12b08 <__sprint_r.part.0>
   1346e:	2800      	cmp	r0, #0
   13470:	f47f ad5d 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   13474:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   13478:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1347c:	1c41      	adds	r1, r0, #1
   1347e:	e5a7      	b.n	12fd0 <_vfiprintf_r+0x450>
   13480:	2302      	movs	r3, #2
   13482:	aa11      	add	r2, sp, #68	; 0x44
   13484:	931c      	str	r3, [sp, #112]	; 0x70
   13486:	921b      	str	r2, [sp, #108]	; 0x6c
   13488:	2101      	movs	r1, #1
   1348a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1348e:	4608      	mov	r0, r1
   13490:	f109 0908 	add.w	r9, r9, #8
   13494:	1c41      	adds	r1, r0, #1
   13496:	e5ba      	b.n	1300e <_vfiprintf_r+0x48e>
   13498:	2d10      	cmp	r5, #16
   1349a:	f340 82e5 	ble.w	13a68 <_vfiprintf_r+0xee8>
   1349e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   134a2:	940f      	str	r4, [sp, #60]	; 0x3c
   134a4:	4608      	mov	r0, r1
   134a6:	ee18 4a10 	vmov	r4, s16
   134aa:	e007      	b.n	134bc <_vfiprintf_r+0x93c>
   134ac:	f100 0c02 	add.w	ip, r0, #2
   134b0:	f109 0908 	add.w	r9, r9, #8
   134b4:	4610      	mov	r0, r2
   134b6:	3d10      	subs	r5, #16
   134b8:	2d10      	cmp	r5, #16
   134ba:	dd1d      	ble.n	134f8 <_vfiprintf_r+0x978>
   134bc:	4925      	ldr	r1, [pc, #148]	; (13554 <_vfiprintf_r+0x9d4>)
   134be:	f8c9 1000 	str.w	r1, [r9]
   134c2:	1c42      	adds	r2, r0, #1
   134c4:	3310      	adds	r3, #16
   134c6:	2110      	movs	r1, #16
   134c8:	2a07      	cmp	r2, #7
   134ca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   134ce:	f8c9 1004 	str.w	r1, [r9, #4]
   134d2:	ddeb      	ble.n	134ac <_vfiprintf_r+0x92c>
   134d4:	aa18      	add	r2, sp, #96	; 0x60
   134d6:	b303      	cbz	r3, 1351a <_vfiprintf_r+0x99a>
   134d8:	4621      	mov	r1, r4
   134da:	4658      	mov	r0, fp
   134dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   134e0:	f7ff fb12 	bl	12b08 <__sprint_r.part.0>
   134e4:	2800      	cmp	r0, #0
   134e6:	f47f ad22 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   134ea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   134ee:	3d10      	subs	r5, #16
   134f0:	2d10      	cmp	r5, #16
   134f2:	f100 0c01 	add.w	ip, r0, #1
   134f6:	dce1      	bgt.n	134bc <_vfiprintf_r+0x93c>
   134f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   134fa:	4660      	mov	r0, ip
   134fc:	4a15      	ldr	r2, [pc, #84]	; (13554 <_vfiprintf_r+0x9d4>)
   134fe:	f8c9 5004 	str.w	r5, [r9, #4]
   13502:	442b      	add	r3, r5
   13504:	2807      	cmp	r0, #7
   13506:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1350a:	f8c9 2000 	str.w	r2, [r9]
   1350e:	f300 80c1 	bgt.w	13694 <_vfiprintf_r+0xb14>
   13512:	f109 0908 	add.w	r9, r9, #8
   13516:	1c41      	adds	r1, r0, #1
   13518:	e546      	b.n	12fa8 <_vfiprintf_r+0x428>
   1351a:	4618      	mov	r0, r3
   1351c:	f04f 0c01 	mov.w	ip, #1
   13520:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13524:	e7c7      	b.n	134b6 <_vfiprintf_r+0x936>
   13526:	0776      	lsls	r6, r6, #29
   13528:	9319      	str	r3, [sp, #100]	; 0x64
   1352a:	d553      	bpl.n	135d4 <_vfiprintf_r+0xa54>
   1352c:	9a06      	ldr	r2, [sp, #24]
   1352e:	9903      	ldr	r1, [sp, #12]
   13530:	1a54      	subs	r4, r2, r1
   13532:	2c00      	cmp	r4, #0
   13534:	dd4e      	ble.n	135d4 <_vfiprintf_r+0xa54>
   13536:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1353a:	2c10      	cmp	r4, #16
   1353c:	f340 82b0 	ble.w	13aa0 <_vfiprintf_r+0xf20>
   13540:	9919      	ldr	r1, [sp, #100]	; 0x64
   13542:	ee18 6a10 	vmov	r6, s16
   13546:	2510      	movs	r5, #16
   13548:	e00d      	b.n	13566 <_vfiprintf_r+0x9e6>
   1354a:	bf00      	nop
   1354c:	20002898 	.word	0x20002898
   13550:	200031cc 	.word	0x200031cc
   13554:	200028d4 	.word	0x200028d4
   13558:	1c88      	adds	r0, r1, #2
   1355a:	f109 0908 	add.w	r9, r9, #8
   1355e:	4611      	mov	r1, r2
   13560:	3c10      	subs	r4, #16
   13562:	2c10      	cmp	r4, #16
   13564:	dd1a      	ble.n	1359c <_vfiprintf_r+0xa1c>
   13566:	1c4a      	adds	r2, r1, #1
   13568:	48b3      	ldr	r0, [pc, #716]	; (13838 <_vfiprintf_r+0xcb8>)
   1356a:	3310      	adds	r3, #16
   1356c:	2a07      	cmp	r2, #7
   1356e:	e9c9 0500 	strd	r0, r5, [r9]
   13572:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   13576:	ddef      	ble.n	13558 <_vfiprintf_r+0x9d8>
   13578:	aa18      	add	r2, sp, #96	; 0x60
   1357a:	b333      	cbz	r3, 135ca <_vfiprintf_r+0xa4a>
   1357c:	4631      	mov	r1, r6
   1357e:	4658      	mov	r0, fp
   13580:	f7ff fac2 	bl	12b08 <__sprint_r.part.0>
   13584:	2800      	cmp	r0, #0
   13586:	f47f acd2 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   1358a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1358e:	3c10      	subs	r4, #16
   13590:	2c10      	cmp	r4, #16
   13592:	f101 0001 	add.w	r0, r1, #1
   13596:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1359a:	dce4      	bgt.n	13566 <_vfiprintf_r+0x9e6>
   1359c:	4aa6      	ldr	r2, [pc, #664]	; (13838 <_vfiprintf_r+0xcb8>)
   1359e:	f8c9 4004 	str.w	r4, [r9, #4]
   135a2:	4423      	add	r3, r4
   135a4:	2807      	cmp	r0, #7
   135a6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   135aa:	f8c9 2000 	str.w	r2, [r9]
   135ae:	f77f ad59 	ble.w	13064 <_vfiprintf_r+0x4e4>
   135b2:	b17b      	cbz	r3, 135d4 <_vfiprintf_r+0xa54>
   135b4:	ee18 1a10 	vmov	r1, s16
   135b8:	aa18      	add	r2, sp, #96	; 0x60
   135ba:	4658      	mov	r0, fp
   135bc:	f7ff faa4 	bl	12b08 <__sprint_r.part.0>
   135c0:	2800      	cmp	r0, #0
   135c2:	f47f acb4 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   135c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   135c8:	e54c      	b.n	13064 <_vfiprintf_r+0x4e4>
   135ca:	2001      	movs	r0, #1
   135cc:	4619      	mov	r1, r3
   135ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   135d2:	e7c5      	b.n	13560 <_vfiprintf_r+0x9e0>
   135d4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   135d8:	9903      	ldr	r1, [sp, #12]
   135da:	428a      	cmp	r2, r1
   135dc:	bfac      	ite	ge
   135de:	189b      	addge	r3, r3, r2
   135e0:	185b      	addlt	r3, r3, r1
   135e2:	9305      	str	r3, [sp, #20]
   135e4:	e549      	b.n	1307a <_vfiprintf_r+0x4fa>
   135e6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   135ea:	058f      	lsls	r7, r1, #22
   135ec:	ee18 3a10 	vmov	r3, s16
   135f0:	b28a      	uxth	r2, r1
   135f2:	f53f aae8 	bmi.w	12bc6 <_vfiprintf_r+0x46>
   135f6:	ee18 5a10 	vmov	r5, s16
   135fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   135fc:	f7fe f888 	bl	11710 <__retarget_lock_acquire_recursive>
   13600:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   13604:	b28a      	uxth	r2, r1
   13606:	f7ff bade 	b.w	12bc6 <_vfiprintf_r+0x46>
   1360a:	2b00      	cmp	r3, #0
   1360c:	f43f ae79 	beq.w	13302 <_vfiprintf_r+0x782>
   13610:	ee18 1a10 	vmov	r1, s16
   13614:	aa18      	add	r2, sp, #96	; 0x60
   13616:	4658      	mov	r0, fp
   13618:	f7ff fa76 	bl	12b08 <__sprint_r.part.0>
   1361c:	2800      	cmp	r0, #0
   1361e:	f47f ac86 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   13622:	9919      	ldr	r1, [sp, #100]	; 0x64
   13624:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13626:	3101      	adds	r1, #1
   13628:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1362c:	e4f8      	b.n	13020 <_vfiprintf_r+0x4a0>
   1362e:	9219      	str	r2, [sp, #100]	; 0x64
   13630:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13634:	e45e      	b.n	12ef4 <_vfiprintf_r+0x374>
   13636:	2f00      	cmp	r7, #0
   13638:	f47f abc3 	bne.w	12dc2 <_vfiprintf_r+0x242>
   1363c:	9e03      	ldr	r6, [sp, #12]
   1363e:	2700      	movs	r7, #0
   13640:	9704      	str	r7, [sp, #16]
   13642:	ac44      	add	r4, sp, #272	; 0x110
   13644:	f7ff bbc5 	b.w	12dd2 <_vfiprintf_r+0x252>
   13648:	9b03      	ldr	r3, [sp, #12]
   1364a:	f013 0310 	ands.w	r3, r3, #16
   1364e:	d154      	bne.n	136fa <_vfiprintf_r+0xb7a>
   13650:	9a03      	ldr	r2, [sp, #12]
   13652:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   13656:	f000 816b 	beq.w	13930 <_vfiprintf_r+0xdb0>
   1365a:	9907      	ldr	r1, [sp, #28]
   1365c:	461a      	mov	r2, r3
   1365e:	f851 3b04 	ldr.w	r3, [r1], #4
   13662:	9107      	str	r1, [sp, #28]
   13664:	b29b      	uxth	r3, r3
   13666:	2101      	movs	r1, #1
   13668:	e401      	b.n	12e6e <_vfiprintf_r+0x2ee>
   1366a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1366c:	2a00      	cmp	r2, #0
   1366e:	d164      	bne.n	1373a <_vfiprintf_r+0xbba>
   13670:	4618      	mov	r0, r3
   13672:	2101      	movs	r1, #1
   13674:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13678:	e4c9      	b.n	1300e <_vfiprintf_r+0x48e>
   1367a:	2101      	movs	r1, #1
   1367c:	4618      	mov	r0, r3
   1367e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13682:	e4c4      	b.n	1300e <_vfiprintf_r+0x48e>
   13684:	425b      	negs	r3, r3
   13686:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1368a:	9603      	str	r6, [sp, #12]
   1368c:	202d      	movs	r0, #45	; 0x2d
   1368e:	2101      	movs	r1, #1
   13690:	f7ff bbee 	b.w	12e70 <_vfiprintf_r+0x2f0>
   13694:	2b00      	cmp	r3, #0
   13696:	f000 8088 	beq.w	137aa <_vfiprintf_r+0xc2a>
   1369a:	ee18 1a10 	vmov	r1, s16
   1369e:	aa18      	add	r2, sp, #96	; 0x60
   136a0:	4658      	mov	r0, fp
   136a2:	f7ff fa31 	bl	12b08 <__sprint_r.part.0>
   136a6:	2800      	cmp	r0, #0
   136a8:	f47f ac41 	bne.w	12f2e <_vfiprintf_r+0x3ae>
   136ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   136b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   136b4:	1c41      	adds	r1, r0, #1
   136b6:	e477      	b.n	12fa8 <_vfiprintf_r+0x428>
   136b8:	f898 1000 	ldrb.w	r1, [r8]
   136bc:	9307      	str	r3, [sp, #28]
   136be:	f7ff bad2 	b.w	12c66 <_vfiprintf_r+0xe6>
   136c2:	ac44      	add	r4, sp, #272	; 0x110
   136c4:	f7ff bb85 	b.w	12dd2 <_vfiprintf_r+0x252>
   136c8:	f109 0908 	add.w	r9, r9, #8
   136cc:	f10c 0101 	add.w	r1, ip, #1
   136d0:	4660      	mov	r0, ip
   136d2:	e4a0      	b.n	13016 <_vfiprintf_r+0x496>
   136d4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   136d8:	f040 8197 	bne.w	13a0a <_vfiprintf_r+0xe8a>
   136dc:	f851 3b04 	ldr.w	r3, [r1], #4
   136e0:	9107      	str	r1, [sp, #28]
   136e2:	f7ff bbc0 	b.w	12e66 <_vfiprintf_r+0x2e6>
   136e6:	05b3      	lsls	r3, r6, #22
   136e8:	f100 8188 	bmi.w	139fc <_vfiprintf_r+0xe7c>
   136ec:	f852 3b04 	ldr.w	r3, [r2], #4
   136f0:	9207      	str	r2, [sp, #28]
   136f2:	17da      	asrs	r2, r3, #31
   136f4:	4611      	mov	r1, r2
   136f6:	f7ff bb52 	b.w	12d9e <_vfiprintf_r+0x21e>
   136fa:	9907      	ldr	r1, [sp, #28]
   136fc:	f851 3b04 	ldr.w	r3, [r1], #4
   13700:	9107      	str	r1, [sp, #28]
   13702:	2101      	movs	r1, #1
   13704:	f7ff bbb3 	b.w	12e6e <_vfiprintf_r+0x2ee>
   13708:	9b07      	ldr	r3, [sp, #28]
   1370a:	9805      	ldr	r0, [sp, #20]
   1370c:	f853 1b04 	ldr.w	r1, [r3], #4
   13710:	9307      	str	r3, [sp, #28]
   13712:	17c2      	asrs	r2, r0, #31
   13714:	e9c1 0200 	strd	r0, r2, [r1]
   13718:	f7ff ba7d 	b.w	12c16 <_vfiprintf_r+0x96>
   1371c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1371e:	2b00      	cmp	r3, #0
   13720:	f43f ab26 	beq.w	12d70 <_vfiprintf_r+0x1f0>
   13724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13726:	781b      	ldrb	r3, [r3, #0]
   13728:	2b00      	cmp	r3, #0
   1372a:	f43f ab21 	beq.w	12d70 <_vfiprintf_r+0x1f0>
   1372e:	f898 1000 	ldrb.w	r1, [r8]
   13732:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   13736:	f7ff ba96 	b.w	12c66 <_vfiprintf_r+0xe6>
   1373a:	2302      	movs	r3, #2
   1373c:	aa11      	add	r2, sp, #68	; 0x44
   1373e:	931c      	str	r3, [sp, #112]	; 0x70
   13740:	921b      	str	r2, [sp, #108]	; 0x6c
   13742:	2001      	movs	r0, #1
   13744:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13748:	e6a2      	b.n	13490 <_vfiprintf_r+0x910>
   1374a:	9603      	str	r6, [sp, #12]
   1374c:	e571      	b.n	13232 <_vfiprintf_r+0x6b2>
   1374e:	4b3b      	ldr	r3, [pc, #236]	; (1383c <_vfiprintf_r+0xcbc>)
   13750:	930c      	str	r3, [sp, #48]	; 0x30
   13752:	f016 0220 	ands.w	r2, r6, #32
   13756:	d059      	beq.n	1380c <_vfiprintf_r+0xc8c>
   13758:	9b07      	ldr	r3, [sp, #28]
   1375a:	3307      	adds	r3, #7
   1375c:	f023 0307 	bic.w	r3, r3, #7
   13760:	4618      	mov	r0, r3
   13762:	685a      	ldr	r2, [r3, #4]
   13764:	f850 3b08 	ldr.w	r3, [r0], #8
   13768:	9007      	str	r0, [sp, #28]
   1376a:	07f4      	lsls	r4, r6, #31
   1376c:	d509      	bpl.n	13782 <_vfiprintf_r+0xc02>
   1376e:	ea53 0002 	orrs.w	r0, r3, r2
   13772:	d006      	beq.n	13782 <_vfiprintf_r+0xc02>
   13774:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   13778:	2130      	movs	r1, #48	; 0x30
   1377a:	f046 0602 	orr.w	r6, r6, #2
   1377e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   13782:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   13786:	9103      	str	r1, [sp, #12]
   13788:	2102      	movs	r1, #2
   1378a:	f7ff bb70 	b.w	12e6e <_vfiprintf_r+0x2ee>
   1378e:	4b2c      	ldr	r3, [pc, #176]	; (13840 <_vfiprintf_r+0xcc0>)
   13790:	930c      	str	r3, [sp, #48]	; 0x30
   13792:	e7de      	b.n	13752 <_vfiprintf_r+0xbd2>
   13794:	9b07      	ldr	r3, [sp, #28]
   13796:	2101      	movs	r1, #1
   13798:	f853 2b04 	ldr.w	r2, [r3], #4
   1379c:	9103      	str	r1, [sp, #12]
   1379e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   137a2:	9307      	str	r3, [sp, #28]
   137a4:	9104      	str	r1, [sp, #16]
   137a6:	ac2b      	add	r4, sp, #172	; 0xac
   137a8:	e4df      	b.n	1316a <_vfiprintf_r+0x5ea>
   137aa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   137ae:	2a00      	cmp	r2, #0
   137b0:	f040 8132 	bne.w	13a18 <_vfiprintf_r+0xe98>
   137b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   137b6:	2a00      	cmp	r2, #0
   137b8:	f47f ae62 	bne.w	13480 <_vfiprintf_r+0x900>
   137bc:	4618      	mov	r0, r3
   137be:	2101      	movs	r1, #1
   137c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   137c4:	e427      	b.n	13016 <_vfiprintf_r+0x496>
   137c6:	2100      	movs	r1, #0
   137c8:	2208      	movs	r2, #8
   137ca:	a816      	add	r0, sp, #88	; 0x58
   137cc:	9413      	str	r4, [sp, #76]	; 0x4c
   137ce:	f7fd ff19 	bl	11604 <memset>
   137d2:	1c79      	adds	r1, r7, #1
   137d4:	f000 80bc 	beq.w	13950 <_vfiprintf_r+0xdd0>
   137d8:	2500      	movs	r5, #0
   137da:	9407      	str	r4, [sp, #28]
   137dc:	462c      	mov	r4, r5
   137de:	e00c      	b.n	137fa <_vfiprintf_r+0xc7a>
   137e0:	a92b      	add	r1, sp, #172	; 0xac
   137e2:	4658      	mov	r0, fp
   137e4:	f000 fa7e 	bl	13ce4 <_wcrtomb_r>
   137e8:	1c42      	adds	r2, r0, #1
   137ea:	4420      	add	r0, r4
   137ec:	f000 816b 	beq.w	13ac6 <_vfiprintf_r+0xf46>
   137f0:	42b8      	cmp	r0, r7
   137f2:	dc08      	bgt.n	13806 <_vfiprintf_r+0xc86>
   137f4:	f000 8170 	beq.w	13ad8 <_vfiprintf_r+0xf58>
   137f8:	4604      	mov	r4, r0
   137fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   137fc:	5952      	ldr	r2, [r2, r5]
   137fe:	ab16      	add	r3, sp, #88	; 0x58
   13800:	3504      	adds	r5, #4
   13802:	2a00      	cmp	r2, #0
   13804:	d1ec      	bne.n	137e0 <_vfiprintf_r+0xc60>
   13806:	9404      	str	r4, [sp, #16]
   13808:	9c07      	ldr	r4, [sp, #28]
   1380a:	e0af      	b.n	1396c <_vfiprintf_r+0xdec>
   1380c:	f016 0310 	ands.w	r3, r6, #16
   13810:	9807      	ldr	r0, [sp, #28]
   13812:	d10c      	bne.n	1382e <_vfiprintf_r+0xcae>
   13814:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   13818:	d005      	beq.n	13826 <_vfiprintf_r+0xca6>
   1381a:	461a      	mov	r2, r3
   1381c:	f850 3b04 	ldr.w	r3, [r0], #4
   13820:	9007      	str	r0, [sp, #28]
   13822:	b29b      	uxth	r3, r3
   13824:	e7a1      	b.n	1376a <_vfiprintf_r+0xbea>
   13826:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1382a:	f040 80e1 	bne.w	139f0 <_vfiprintf_r+0xe70>
   1382e:	f850 3b04 	ldr.w	r3, [r0], #4
   13832:	9007      	str	r0, [sp, #28]
   13834:	e799      	b.n	1376a <_vfiprintf_r+0xbea>
   13836:	bf00      	nop
   13838:	200028d4 	.word	0x200028d4
   1383c:	20002898 	.word	0x20002898
   13840:	20002884 	.word	0x20002884
   13844:	9903      	ldr	r1, [sp, #12]
   13846:	9704      	str	r7, [sp, #16]
   13848:	ac44      	add	r4, sp, #272	; 0x110
   1384a:	469e      	mov	lr, r3
   1384c:	ee08 ba90 	vmov	s17, fp
   13850:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   13854:	f04f 0c00 	mov.w	ip, #0
   13858:	4623      	mov	r3, r4
   1385a:	e006      	b.n	1386a <_vfiprintf_r+0xcea>
   1385c:	f1be 0f0a 	cmp.w	lr, #10
   13860:	f172 0200 	sbcs.w	r2, r2, #0
   13864:	d339      	bcc.n	138da <_vfiprintf_r+0xd5a>
   13866:	46a6      	mov	lr, r4
   13868:	462a      	mov	r2, r5
   1386a:	49a6      	ldr	r1, [pc, #664]	; (13b04 <_vfiprintf_r+0xf84>)
   1386c:	eb1e 0002 	adds.w	r0, lr, r2
   13870:	f140 0000 	adc.w	r0, r0, #0
   13874:	460f      	mov	r7, r1
   13876:	fba1 1400 	umull	r1, r4, r1, r0
   1387a:	f024 0103 	bic.w	r1, r4, #3
   1387e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   13882:	1a40      	subs	r0, r0, r1
   13884:	ebbe 0100 	subs.w	r1, lr, r0
   13888:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1388c:	f162 0400 	sbc.w	r4, r2, #0
   13890:	fb05 f501 	mul.w	r5, r5, r1
   13894:	fb07 5504 	mla	r5, r7, r4, r5
   13898:	fba1 4107 	umull	r4, r1, r1, r7
   1389c:	440d      	add	r5, r1
   1389e:	2705      	movs	r7, #5
   138a0:	f004 0101 	and.w	r1, r4, #1
   138a4:	fba1 1b07 	umull	r1, fp, r1, r7
   138a8:	1809      	adds	r1, r1, r0
   138aa:	0864      	lsrs	r4, r4, #1
   138ac:	3130      	adds	r1, #48	; 0x30
   138ae:	f803 1c01 	strb.w	r1, [r3, #-1]
   138b2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   138b6:	f10c 0c01 	add.w	ip, ip, #1
   138ba:	3b01      	subs	r3, #1
   138bc:	086d      	lsrs	r5, r5, #1
   138be:	2e00      	cmp	r6, #0
   138c0:	d0cc      	beq.n	1385c <_vfiprintf_r+0xcdc>
   138c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   138c4:	7809      	ldrb	r1, [r1, #0]
   138c6:	4561      	cmp	r1, ip
   138c8:	d1c8      	bne.n	1385c <_vfiprintf_r+0xcdc>
   138ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   138ce:	d0c5      	beq.n	1385c <_vfiprintf_r+0xcdc>
   138d0:	f1be 0f0a 	cmp.w	lr, #10
   138d4:	f172 0200 	sbcs.w	r2, r2, #0
   138d8:	d26c      	bcs.n	139b4 <_vfiprintf_r+0xe34>
   138da:	461c      	mov	r4, r3
   138dc:	ab44      	add	r3, sp, #272	; 0x110
   138de:	1b1b      	subs	r3, r3, r4
   138e0:	9f04      	ldr	r7, [sp, #16]
   138e2:	9e03      	ldr	r6, [sp, #12]
   138e4:	9304      	str	r3, [sp, #16]
   138e6:	ee18 ba90 	vmov	fp, s17
   138ea:	f7ff ba72 	b.w	12dd2 <_vfiprintf_r+0x252>
   138ee:	9603      	str	r6, [sp, #12]
   138f0:	f7ff ba62 	b.w	12db8 <_vfiprintf_r+0x238>
   138f4:	4658      	mov	r0, fp
   138f6:	f7fe fc19 	bl	1212c <__sinit>
   138fa:	f7ff b95b 	b.w	12bb4 <_vfiprintf_r+0x34>
   138fe:	2901      	cmp	r1, #1
   13900:	9603      	str	r6, [sp, #12]
   13902:	f47f accd 	bne.w	132a0 <_vfiprintf_r+0x720>
   13906:	f7ff ba5c 	b.w	12dc2 <_vfiprintf_r+0x242>
   1390a:	9b07      	ldr	r3, [sp, #28]
   1390c:	9905      	ldr	r1, [sp, #20]
   1390e:	f853 2b04 	ldr.w	r2, [r3], #4
   13912:	6011      	str	r1, [r2, #0]
   13914:	9307      	str	r3, [sp, #28]
   13916:	f7ff b97e 	b.w	12c16 <_vfiprintf_r+0x96>
   1391a:	2f06      	cmp	r7, #6
   1391c:	463b      	mov	r3, r7
   1391e:	9a03      	ldr	r2, [sp, #12]
   13920:	4c79      	ldr	r4, [pc, #484]	; (13b08 <_vfiprintf_r+0xf88>)
   13922:	9207      	str	r2, [sp, #28]
   13924:	bf28      	it	cs
   13926:	2306      	movcs	r3, #6
   13928:	9304      	str	r3, [sp, #16]
   1392a:	9303      	str	r3, [sp, #12]
   1392c:	f7ff bb25 	b.w	12f7a <_vfiprintf_r+0x3fa>
   13930:	9b03      	ldr	r3, [sp, #12]
   13932:	9907      	ldr	r1, [sp, #28]
   13934:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   13938:	bf14      	ite	ne
   1393a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1393e:	f851 3b04 	ldreq.w	r3, [r1], #4
   13942:	9107      	str	r1, [sp, #28]
   13944:	bf1c      	itt	ne
   13946:	4602      	movne	r2, r0
   13948:	b2db      	uxtbne	r3, r3
   1394a:	2101      	movs	r1, #1
   1394c:	f7ff ba8f 	b.w	12e6e <_vfiprintf_r+0x2ee>
   13950:	ab16      	add	r3, sp, #88	; 0x58
   13952:	9300      	str	r3, [sp, #0]
   13954:	2300      	movs	r3, #0
   13956:	4619      	mov	r1, r3
   13958:	aa13      	add	r2, sp, #76	; 0x4c
   1395a:	4658      	mov	r0, fp
   1395c:	f000 fb22 	bl	13fa4 <_wcsrtombs_r>
   13960:	4603      	mov	r3, r0
   13962:	3301      	adds	r3, #1
   13964:	9004      	str	r0, [sp, #16]
   13966:	f000 80ae 	beq.w	13ac6 <_vfiprintf_r+0xf46>
   1396a:	9413      	str	r4, [sp, #76]	; 0x4c
   1396c:	9b04      	ldr	r3, [sp, #16]
   1396e:	2b00      	cmp	r3, #0
   13970:	d030      	beq.n	139d4 <_vfiprintf_r+0xe54>
   13972:	2b63      	cmp	r3, #99	; 0x63
   13974:	dc63      	bgt.n	13a3e <_vfiprintf_r+0xebe>
   13976:	2300      	movs	r3, #0
   13978:	9308      	str	r3, [sp, #32]
   1397a:	ac2b      	add	r4, sp, #172	; 0xac
   1397c:	2208      	movs	r2, #8
   1397e:	2100      	movs	r1, #0
   13980:	a816      	add	r0, sp, #88	; 0x58
   13982:	f7fd fe3f 	bl	11604 <memset>
   13986:	9d04      	ldr	r5, [sp, #16]
   13988:	ab16      	add	r3, sp, #88	; 0x58
   1398a:	9300      	str	r3, [sp, #0]
   1398c:	aa13      	add	r2, sp, #76	; 0x4c
   1398e:	462b      	mov	r3, r5
   13990:	4621      	mov	r1, r4
   13992:	4658      	mov	r0, fp
   13994:	f000 fb06 	bl	13fa4 <_wcsrtombs_r>
   13998:	4285      	cmp	r5, r0
   1399a:	f040 80ab 	bne.w	13af4 <_vfiprintf_r+0xf74>
   1399e:	9b03      	ldr	r3, [sp, #12]
   139a0:	9a04      	ldr	r2, [sp, #16]
   139a2:	9307      	str	r3, [sp, #28]
   139a4:	2300      	movs	r3, #0
   139a6:	54a3      	strb	r3, [r4, r2]
   139a8:	461f      	mov	r7, r3
   139aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   139ae:	9303      	str	r3, [sp, #12]
   139b0:	f7ff ba16 	b.w	12de0 <_vfiprintf_r+0x260>
   139b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   139b6:	990d      	ldr	r1, [sp, #52]	; 0x34
   139b8:	1a9b      	subs	r3, r3, r2
   139ba:	4618      	mov	r0, r3
   139bc:	9308      	str	r3, [sp, #32]
   139be:	f7fd fa47 	bl	10e50 <strncpy>
   139c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   139c4:	9b08      	ldr	r3, [sp, #32]
   139c6:	784a      	ldrb	r2, [r1, #1]
   139c8:	b10a      	cbz	r2, 139ce <_vfiprintf_r+0xe4e>
   139ca:	3101      	adds	r1, #1
   139cc:	910b      	str	r1, [sp, #44]	; 0x2c
   139ce:	f04f 0c00 	mov.w	ip, #0
   139d2:	e748      	b.n	13866 <_vfiprintf_r+0xce6>
   139d4:	9b03      	ldr	r3, [sp, #12]
   139d6:	9307      	str	r3, [sp, #28]
   139d8:	9b04      	ldr	r3, [sp, #16]
   139da:	9303      	str	r3, [sp, #12]
   139dc:	461f      	mov	r7, r3
   139de:	9308      	str	r3, [sp, #32]
   139e0:	f7ff b9fe 	b.w	12de0 <_vfiprintf_r+0x260>
   139e4:	2101      	movs	r1, #1
   139e6:	4618      	mov	r0, r3
   139e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   139ec:	f7ff bb13 	b.w	13016 <_vfiprintf_r+0x496>
   139f0:	f850 3b04 	ldr.w	r3, [r0], #4
   139f4:	9007      	str	r0, [sp, #28]
   139f6:	4622      	mov	r2, r4
   139f8:	b2db      	uxtb	r3, r3
   139fa:	e6b6      	b.n	1376a <_vfiprintf_r+0xbea>
   139fc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   13a00:	9207      	str	r2, [sp, #28]
   13a02:	17da      	asrs	r2, r3, #31
   13a04:	4611      	mov	r1, r2
   13a06:	f7ff b9ca 	b.w	12d9e <_vfiprintf_r+0x21e>
   13a0a:	f851 3b04 	ldr.w	r3, [r1], #4
   13a0e:	9107      	str	r1, [sp, #28]
   13a10:	4602      	mov	r2, r0
   13a12:	b2db      	uxtb	r3, r3
   13a14:	f7ff ba27 	b.w	12e66 <_vfiprintf_r+0x2e6>
   13a18:	2301      	movs	r3, #1
   13a1a:	931c      	str	r3, [sp, #112]	; 0x70
   13a1c:	2101      	movs	r1, #1
   13a1e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   13a22:	931b      	str	r3, [sp, #108]	; 0x6c
   13a24:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   13a28:	460b      	mov	r3, r1
   13a2a:	f7ff bacd 	b.w	12fc8 <_vfiprintf_r+0x448>
   13a2e:	9b07      	ldr	r3, [sp, #28]
   13a30:	9905      	ldr	r1, [sp, #20]
   13a32:	f853 2b04 	ldr.w	r2, [r3], #4
   13a36:	9307      	str	r3, [sp, #28]
   13a38:	8011      	strh	r1, [r2, #0]
   13a3a:	f7ff b8ec 	b.w	12c16 <_vfiprintf_r+0x96>
   13a3e:	1c59      	adds	r1, r3, #1
   13a40:	4658      	mov	r0, fp
   13a42:	f7fd fa63 	bl	10f0c <_malloc_r>
   13a46:	4604      	mov	r4, r0
   13a48:	2800      	cmp	r0, #0
   13a4a:	d03c      	beq.n	13ac6 <_vfiprintf_r+0xf46>
   13a4c:	9008      	str	r0, [sp, #32]
   13a4e:	e795      	b.n	1397c <_vfiprintf_r+0xdfc>
   13a50:	6d88      	ldr	r0, [r1, #88]	; 0x58
   13a52:	f7fd fe5f 	bl	11714 <__retarget_lock_release_recursive>
   13a56:	f7ff b9e9 	b.w	12e2c <_vfiprintf_r+0x2ac>
   13a5a:	9b03      	ldr	r3, [sp, #12]
   13a5c:	9307      	str	r3, [sp, #28]
   13a5e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   13a62:	9f08      	ldr	r7, [sp, #32]
   13a64:	f7ff b9bc 	b.w	12de0 <_vfiprintf_r+0x260>
   13a68:	9819      	ldr	r0, [sp, #100]	; 0x64
   13a6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   13a6c:	3001      	adds	r0, #1
   13a6e:	e545      	b.n	134fc <_vfiprintf_r+0x97c>
   13a70:	9b03      	ldr	r3, [sp, #12]
   13a72:	9307      	str	r3, [sp, #28]
   13a74:	4620      	mov	r0, r4
   13a76:	f7fe fbe3 	bl	12240 <strlen>
   13a7a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   13a7e:	462f      	mov	r7, r5
   13a80:	9004      	str	r0, [sp, #16]
   13a82:	9303      	str	r3, [sp, #12]
   13a84:	9508      	str	r5, [sp, #32]
   13a86:	f7ff b9ab 	b.w	12de0 <_vfiprintf_r+0x260>
   13a8a:	ee18 1a10 	vmov	r1, s16
   13a8e:	aa18      	add	r2, sp, #96	; 0x60
   13a90:	4658      	mov	r0, fp
   13a92:	f7ff f839 	bl	12b08 <__sprint_r.part.0>
   13a96:	2800      	cmp	r0, #0
   13a98:	f43f aa36 	beq.w	12f08 <_vfiprintf_r+0x388>
   13a9c:	f7ff ba4d 	b.w	12f3a <_vfiprintf_r+0x3ba>
   13aa0:	9819      	ldr	r0, [sp, #100]	; 0x64
   13aa2:	3001      	adds	r0, #1
   13aa4:	e57a      	b.n	1359c <_vfiprintf_r+0xa1c>
   13aa6:	468c      	mov	ip, r1
   13aa8:	e46e      	b.n	13388 <_vfiprintf_r+0x808>
   13aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   13aac:	07d9      	lsls	r1, r3, #31
   13aae:	d405      	bmi.n	13abc <_vfiprintf_r+0xf3c>
   13ab0:	89ab      	ldrh	r3, [r5, #12]
   13ab2:	059a      	lsls	r2, r3, #22
   13ab4:	d402      	bmi.n	13abc <_vfiprintf_r+0xf3c>
   13ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   13ab8:	f7fd fe2c 	bl	11714 <__retarget_lock_release_recursive>
   13abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ac0:	9305      	str	r3, [sp, #20]
   13ac2:	f7ff ba49 	b.w	12f58 <_vfiprintf_r+0x3d8>
   13ac6:	ee18 2a10 	vmov	r2, s16
   13aca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13ad2:	8193      	strh	r3, [r2, #12]
   13ad4:	f7ff ba35 	b.w	12f42 <_vfiprintf_r+0x3c2>
   13ad8:	9c07      	ldr	r4, [sp, #28]
   13ada:	9704      	str	r7, [sp, #16]
   13adc:	e746      	b.n	1396c <_vfiprintf_r+0xdec>
   13ade:	9b07      	ldr	r3, [sp, #28]
   13ae0:	f898 1001 	ldrb.w	r1, [r8, #1]
   13ae4:	f853 7b04 	ldr.w	r7, [r3], #4
   13ae8:	9307      	str	r3, [sp, #28]
   13aea:	4690      	mov	r8, r2
   13aec:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13af0:	f7ff b8b9 	b.w	12c66 <_vfiprintf_r+0xe6>
   13af4:	ee18 2a10 	vmov	r2, s16
   13af8:	8993      	ldrh	r3, [r2, #12]
   13afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13afe:	8193      	strh	r3, [r2, #12]
   13b00:	f7ff ba15 	b.w	12f2e <_vfiprintf_r+0x3ae>
   13b04:	cccccccd 	.word	0xcccccccd
   13b08:	200028ac 	.word	0x200028ac

00013b0c <__sbprintf>:
   13b0c:	b570      	push	{r4, r5, r6, lr}
   13b0e:	460c      	mov	r4, r1
   13b10:	8989      	ldrh	r1, [r1, #12]
   13b12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   13b16:	f021 0102 	bic.w	r1, r1, #2
   13b1a:	f8ad 1014 	strh.w	r1, [sp, #20]
   13b1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13b20:	911b      	str	r1, [sp, #108]	; 0x6c
   13b22:	89e1      	ldrh	r1, [r4, #14]
   13b24:	f8ad 1016 	strh.w	r1, [sp, #22]
   13b28:	69e1      	ldr	r1, [r4, #28]
   13b2a:	9109      	str	r1, [sp, #36]	; 0x24
   13b2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13b2e:	910b      	str	r1, [sp, #44]	; 0x2c
   13b30:	a91c      	add	r1, sp, #112	; 0x70
   13b32:	9102      	str	r1, [sp, #8]
   13b34:	9106      	str	r1, [sp, #24]
   13b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13b3a:	4606      	mov	r6, r0
   13b3c:	9104      	str	r1, [sp, #16]
   13b3e:	9107      	str	r1, [sp, #28]
   13b40:	a818      	add	r0, sp, #96	; 0x60
   13b42:	2100      	movs	r1, #0
   13b44:	e9cd 3200 	strd	r3, r2, [sp]
   13b48:	9108      	str	r1, [sp, #32]
   13b4a:	f7fd fddd 	bl	11708 <__retarget_lock_init_recursive>
   13b4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   13b52:	a902      	add	r1, sp, #8
   13b54:	4630      	mov	r0, r6
   13b56:	f7ff f813 	bl	12b80 <_vfiprintf_r>
   13b5a:	1e05      	subs	r5, r0, #0
   13b5c:	db07      	blt.n	13b6e <__sbprintf+0x62>
   13b5e:	a902      	add	r1, sp, #8
   13b60:	4630      	mov	r0, r6
   13b62:	f001 f9e1 	bl	14f28 <_fflush_r>
   13b66:	2800      	cmp	r0, #0
   13b68:	bf18      	it	ne
   13b6a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   13b6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   13b72:	065b      	lsls	r3, r3, #25
   13b74:	d503      	bpl.n	13b7e <__sbprintf+0x72>
   13b76:	89a3      	ldrh	r3, [r4, #12]
   13b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13b7c:	81a3      	strh	r3, [r4, #12]
   13b7e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13b80:	f7fd fdc4 	bl	1170c <__retarget_lock_close_recursive>
   13b84:	4628      	mov	r0, r5
   13b86:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   13b8a:	bd70      	pop	{r4, r5, r6, pc}

00013b8c <__register_exitproc>:
   13b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b90:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13c10 <__register_exitproc+0x84>
   13b94:	4606      	mov	r6, r0
   13b96:	f8da 0000 	ldr.w	r0, [sl]
   13b9a:	4698      	mov	r8, r3
   13b9c:	460f      	mov	r7, r1
   13b9e:	4691      	mov	r9, r2
   13ba0:	f7fd fdb6 	bl	11710 <__retarget_lock_acquire_recursive>
   13ba4:	4b18      	ldr	r3, [pc, #96]	; (13c08 <__register_exitproc+0x7c>)
   13ba6:	681c      	ldr	r4, [r3, #0]
   13ba8:	b324      	cbz	r4, 13bf4 <__register_exitproc+0x68>
   13baa:	6865      	ldr	r5, [r4, #4]
   13bac:	2d1f      	cmp	r5, #31
   13bae:	dc24      	bgt.n	13bfa <__register_exitproc+0x6e>
   13bb0:	b95e      	cbnz	r6, 13bca <__register_exitproc+0x3e>
   13bb2:	1c6b      	adds	r3, r5, #1
   13bb4:	3502      	adds	r5, #2
   13bb6:	f8da 0000 	ldr.w	r0, [sl]
   13bba:	6063      	str	r3, [r4, #4]
   13bbc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   13bc0:	f7fd fda8 	bl	11714 <__retarget_lock_release_recursive>
   13bc4:	2000      	movs	r0, #0
   13bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bca:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   13bce:	2301      	movs	r3, #1
   13bd0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   13bd4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   13bd8:	40ab      	lsls	r3, r5
   13bda:	431a      	orrs	r2, r3
   13bdc:	2e02      	cmp	r6, #2
   13bde:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   13be2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   13be6:	d1e4      	bne.n	13bb2 <__register_exitproc+0x26>
   13be8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   13bec:	431a      	orrs	r2, r3
   13bee:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   13bf2:	e7de      	b.n	13bb2 <__register_exitproc+0x26>
   13bf4:	4c05      	ldr	r4, [pc, #20]	; (13c0c <__register_exitproc+0x80>)
   13bf6:	601c      	str	r4, [r3, #0]
   13bf8:	e7d7      	b.n	13baa <__register_exitproc+0x1e>
   13bfa:	f8da 0000 	ldr.w	r0, [sl]
   13bfe:	f7fd fd89 	bl	11714 <__retarget_lock_release_recursive>
   13c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13c06:	e7de      	b.n	13bc6 <__register_exitproc+0x3a>
   13c08:	20004cc4 	.word	0x20004cc4
   13c0c:	20004cc8 	.word	0x20004cc8
   13c10:	200033c8 	.word	0x200033c8

00013c14 <__ascii_mbtowc>:
   13c14:	b082      	sub	sp, #8
   13c16:	b149      	cbz	r1, 13c2c <__ascii_mbtowc+0x18>
   13c18:	b15a      	cbz	r2, 13c32 <__ascii_mbtowc+0x1e>
   13c1a:	b16b      	cbz	r3, 13c38 <__ascii_mbtowc+0x24>
   13c1c:	7813      	ldrb	r3, [r2, #0]
   13c1e:	600b      	str	r3, [r1, #0]
   13c20:	7812      	ldrb	r2, [r2, #0]
   13c22:	1e10      	subs	r0, r2, #0
   13c24:	bf18      	it	ne
   13c26:	2001      	movne	r0, #1
   13c28:	b002      	add	sp, #8
   13c2a:	4770      	bx	lr
   13c2c:	a901      	add	r1, sp, #4
   13c2e:	2a00      	cmp	r2, #0
   13c30:	d1f3      	bne.n	13c1a <__ascii_mbtowc+0x6>
   13c32:	4610      	mov	r0, r2
   13c34:	b002      	add	sp, #8
   13c36:	4770      	bx	lr
   13c38:	f06f 0001 	mvn.w	r0, #1
   13c3c:	e7f4      	b.n	13c28 <__ascii_mbtowc+0x14>
   13c3e:	bf00      	nop

00013c40 <fcvtbuf>:
   13c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c44:	460e      	mov	r6, r1
   13c46:	4926      	ldr	r1, [pc, #152]	; (13ce0 <fcvtbuf+0xa0>)
   13c48:	b087      	sub	sp, #28
   13c4a:	680f      	ldr	r7, [r1, #0]
   13c4c:	4604      	mov	r4, r0
   13c4e:	4690      	mov	r8, r2
   13c50:	461d      	mov	r5, r3
   13c52:	b353      	cbz	r3, 13caa <fcvtbuf+0x6a>
   13c54:	aa05      	add	r2, sp, #20
   13c56:	4633      	mov	r3, r6
   13c58:	9201      	str	r2, [sp, #4]
   13c5a:	2103      	movs	r1, #3
   13c5c:	4622      	mov	r2, r4
   13c5e:	f8cd 8000 	str.w	r8, [sp]
   13c62:	4638      	mov	r0, r7
   13c64:	f000 fa40 	bl	140e8 <_dtoa_r>
   13c68:	9b05      	ldr	r3, [sp, #20]
   13c6a:	6832      	ldr	r2, [r6, #0]
   13c6c:	4298      	cmp	r0, r3
   13c6e:	4684      	mov	ip, r0
   13c70:	f1c2 0200 	rsb	r2, r2, #0
   13c74:	4629      	mov	r1, r5
   13c76:	d209      	bcs.n	13c8c <fcvtbuf+0x4c>
   13c78:	1a10      	subs	r0, r2, r0
   13c7a:	f81c 3b01 	ldrb.w	r3, [ip], #1
   13c7e:	f801 3b01 	strb.w	r3, [r1], #1
   13c82:	9b05      	ldr	r3, [sp, #20]
   13c84:	4563      	cmp	r3, ip
   13c86:	eb00 020c 	add.w	r2, r0, ip
   13c8a:	d8f6      	bhi.n	13c7a <fcvtbuf+0x3a>
   13c8c:	4294      	cmp	r4, r2
   13c8e:	dd24      	ble.n	13cda <fcvtbuf+0x9a>
   13c90:	1aa2      	subs	r2, r4, r2
   13c92:	440a      	add	r2, r1
   13c94:	2330      	movs	r3, #48	; 0x30
   13c96:	f801 3b01 	strb.w	r3, [r1], #1
   13c9a:	4291      	cmp	r1, r2
   13c9c:	d1fb      	bne.n	13c96 <fcvtbuf+0x56>
   13c9e:	2300      	movs	r3, #0
   13ca0:	7013      	strb	r3, [r2, #0]
   13ca2:	4628      	mov	r0, r5
   13ca4:	b007      	add	sp, #28
   13ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
   13cac:	f100 0323 	add.w	r3, r0, #35	; 0x23
   13cb0:	429a      	cmp	r2, r3
   13cb2:	dd01      	ble.n	13cb8 <fcvtbuf+0x78>
   13cb4:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   13cb6:	e7cd      	b.n	13c54 <fcvtbuf+0x14>
   13cb8:	f100 0924 	add.w	r9, r0, #36	; 0x24
   13cbc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   13cbe:	464a      	mov	r2, r9
   13cc0:	4638      	mov	r0, r7
   13cc2:	ed8d 0b02 	vstr	d0, [sp, #8]
   13cc6:	f7fe fb29 	bl	1231c <_realloc_r>
   13cca:	4605      	mov	r5, r0
   13ccc:	2800      	cmp	r0, #0
   13cce:	d0e8      	beq.n	13ca2 <fcvtbuf+0x62>
   13cd0:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   13cd4:	ed9d 0b02 	vldr	d0, [sp, #8]
   13cd8:	e7bc      	b.n	13c54 <fcvtbuf+0x14>
   13cda:	460a      	mov	r2, r1
   13cdc:	e7df      	b.n	13c9e <fcvtbuf+0x5e>
   13cde:	bf00      	nop
   13ce0:	2000395c 	.word	0x2000395c

00013ce4 <_wcrtomb_r>:
   13ce4:	b570      	push	{r4, r5, r6, lr}
   13ce6:	4605      	mov	r5, r0
   13ce8:	b084      	sub	sp, #16
   13cea:	b15b      	cbz	r3, 13d04 <_wcrtomb_r+0x20>
   13cec:	461c      	mov	r4, r3
   13cee:	b169      	cbz	r1, 13d0c <_wcrtomb_r+0x28>
   13cf0:	4b0e      	ldr	r3, [pc, #56]	; (13d2c <_wcrtomb_r+0x48>)
   13cf2:	4628      	mov	r0, r5
   13cf4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   13cf8:	4623      	mov	r3, r4
   13cfa:	47b0      	blx	r6
   13cfc:	1c43      	adds	r3, r0, #1
   13cfe:	d00f      	beq.n	13d20 <_wcrtomb_r+0x3c>
   13d00:	b004      	add	sp, #16
   13d02:	bd70      	pop	{r4, r5, r6, pc}
   13d04:	f500 7482 	add.w	r4, r0, #260	; 0x104
   13d08:	2900      	cmp	r1, #0
   13d0a:	d1f1      	bne.n	13cf0 <_wcrtomb_r+0xc>
   13d0c:	4a07      	ldr	r2, [pc, #28]	; (13d2c <_wcrtomb_r+0x48>)
   13d0e:	4623      	mov	r3, r4
   13d10:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   13d14:	4628      	mov	r0, r5
   13d16:	460a      	mov	r2, r1
   13d18:	a901      	add	r1, sp, #4
   13d1a:	47b0      	blx	r6
   13d1c:	1c43      	adds	r3, r0, #1
   13d1e:	d1ef      	bne.n	13d00 <_wcrtomb_r+0x1c>
   13d20:	2200      	movs	r2, #0
   13d22:	238a      	movs	r3, #138	; 0x8a
   13d24:	6022      	str	r2, [r4, #0]
   13d26:	602b      	str	r3, [r5, #0]
   13d28:	b004      	add	sp, #16
   13d2a:	bd70      	pop	{r4, r5, r6, pc}
   13d2c:	200033d4 	.word	0x200033d4

00013d30 <_localeconv_r>:
   13d30:	4800      	ldr	r0, [pc, #0]	; (13d34 <_localeconv_r+0x4>)
   13d32:	4770      	bx	lr
   13d34:	200034c4 	.word	0x200034c4

00013d38 <_fclose_r>:
   13d38:	b570      	push	{r4, r5, r6, lr}
   13d3a:	2900      	cmp	r1, #0
   13d3c:	d04b      	beq.n	13dd6 <_fclose_r+0x9e>
   13d3e:	4606      	mov	r6, r0
   13d40:	460c      	mov	r4, r1
   13d42:	b110      	cbz	r0, 13d4a <_fclose_r+0x12>
   13d44:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13d46:	2b00      	cmp	r3, #0
   13d48:	d048      	beq.n	13ddc <_fclose_r+0xa4>
   13d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13d4c:	07d8      	lsls	r0, r3, #31
   13d4e:	d534      	bpl.n	13dba <_fclose_r+0x82>
   13d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13d54:	2b00      	cmp	r3, #0
   13d56:	d03e      	beq.n	13dd6 <_fclose_r+0x9e>
   13d58:	4621      	mov	r1, r4
   13d5a:	4630      	mov	r0, r6
   13d5c:	f001 f84c 	bl	14df8 <__sflush_r>
   13d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13d62:	4605      	mov	r5, r0
   13d64:	b133      	cbz	r3, 13d74 <_fclose_r+0x3c>
   13d66:	69e1      	ldr	r1, [r4, #28]
   13d68:	4630      	mov	r0, r6
   13d6a:	4798      	blx	r3
   13d6c:	2800      	cmp	r0, #0
   13d6e:	bfb8      	it	lt
   13d70:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   13d74:	89a3      	ldrh	r3, [r4, #12]
   13d76:	061a      	lsls	r2, r3, #24
   13d78:	d43c      	bmi.n	13df4 <_fclose_r+0xbc>
   13d7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13d7c:	b141      	cbz	r1, 13d90 <_fclose_r+0x58>
   13d7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   13d82:	4299      	cmp	r1, r3
   13d84:	d002      	beq.n	13d8c <_fclose_r+0x54>
   13d86:	4630      	mov	r0, r6
   13d88:	f7fe fd04 	bl	12794 <_free_r>
   13d8c:	2300      	movs	r3, #0
   13d8e:	6323      	str	r3, [r4, #48]	; 0x30
   13d90:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13d92:	b121      	cbz	r1, 13d9e <_fclose_r+0x66>
   13d94:	4630      	mov	r0, r6
   13d96:	f7fe fcfd 	bl	12794 <_free_r>
   13d9a:	2300      	movs	r3, #0
   13d9c:	6463      	str	r3, [r4, #68]	; 0x44
   13d9e:	f7fe f9e3 	bl	12168 <__sfp_lock_acquire>
   13da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13da4:	2200      	movs	r2, #0
   13da6:	07db      	lsls	r3, r3, #31
   13da8:	81a2      	strh	r2, [r4, #12]
   13daa:	d51f      	bpl.n	13dec <_fclose_r+0xb4>
   13dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13dae:	f7fd fcad 	bl	1170c <__retarget_lock_close_recursive>
   13db2:	f7fe f9df 	bl	12174 <__sfp_lock_release>
   13db6:	4628      	mov	r0, r5
   13db8:	bd70      	pop	{r4, r5, r6, pc}
   13dba:	89a3      	ldrh	r3, [r4, #12]
   13dbc:	0599      	lsls	r1, r3, #22
   13dbe:	d4cb      	bmi.n	13d58 <_fclose_r+0x20>
   13dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13dc2:	f7fd fca5 	bl	11710 <__retarget_lock_acquire_recursive>
   13dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13dca:	2b00      	cmp	r3, #0
   13dcc:	d1c4      	bne.n	13d58 <_fclose_r+0x20>
   13dce:	6e65      	ldr	r5, [r4, #100]	; 0x64
   13dd0:	f015 0501 	ands.w	r5, r5, #1
   13dd4:	d005      	beq.n	13de2 <_fclose_r+0xaa>
   13dd6:	2500      	movs	r5, #0
   13dd8:	4628      	mov	r0, r5
   13dda:	bd70      	pop	{r4, r5, r6, pc}
   13ddc:	f7fe f9a6 	bl	1212c <__sinit>
   13de0:	e7b3      	b.n	13d4a <_fclose_r+0x12>
   13de2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13de4:	f7fd fc96 	bl	11714 <__retarget_lock_release_recursive>
   13de8:	4628      	mov	r0, r5
   13dea:	bd70      	pop	{r4, r5, r6, pc}
   13dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13dee:	f7fd fc91 	bl	11714 <__retarget_lock_release_recursive>
   13df2:	e7db      	b.n	13dac <_fclose_r+0x74>
   13df4:	6921      	ldr	r1, [r4, #16]
   13df6:	4630      	mov	r0, r6
   13df8:	f7fe fccc 	bl	12794 <_free_r>
   13dfc:	e7bd      	b.n	13d7a <_fclose_r+0x42>
   13dfe:	bf00      	nop

00013e00 <__swsetup_r>:
   13e00:	b538      	push	{r3, r4, r5, lr}
   13e02:	4b31      	ldr	r3, [pc, #196]	; (13ec8 <__swsetup_r+0xc8>)
   13e04:	681b      	ldr	r3, [r3, #0]
   13e06:	4605      	mov	r5, r0
   13e08:	460c      	mov	r4, r1
   13e0a:	b113      	cbz	r3, 13e12 <__swsetup_r+0x12>
   13e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13e0e:	2a00      	cmp	r2, #0
   13e10:	d04e      	beq.n	13eb0 <__swsetup_r+0xb0>
   13e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e16:	0718      	lsls	r0, r3, #28
   13e18:	b29a      	uxth	r2, r3
   13e1a:	d51c      	bpl.n	13e56 <__swsetup_r+0x56>
   13e1c:	6921      	ldr	r1, [r4, #16]
   13e1e:	b329      	cbz	r1, 13e6c <__swsetup_r+0x6c>
   13e20:	f012 0001 	ands.w	r0, r2, #1
   13e24:	d007      	beq.n	13e36 <__swsetup_r+0x36>
   13e26:	2000      	movs	r0, #0
   13e28:	60a0      	str	r0, [r4, #8]
   13e2a:	6960      	ldr	r0, [r4, #20]
   13e2c:	4240      	negs	r0, r0
   13e2e:	61a0      	str	r0, [r4, #24]
   13e30:	b139      	cbz	r1, 13e42 <__swsetup_r+0x42>
   13e32:	2000      	movs	r0, #0
   13e34:	bd38      	pop	{r3, r4, r5, pc}
   13e36:	0795      	lsls	r5, r2, #30
   13e38:	bf58      	it	pl
   13e3a:	6960      	ldrpl	r0, [r4, #20]
   13e3c:	60a0      	str	r0, [r4, #8]
   13e3e:	2900      	cmp	r1, #0
   13e40:	d1f7      	bne.n	13e32 <__swsetup_r+0x32>
   13e42:	0612      	lsls	r2, r2, #24
   13e44:	bf58      	it	pl
   13e46:	4608      	movpl	r0, r1
   13e48:	d5f4      	bpl.n	13e34 <__swsetup_r+0x34>
   13e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e4e:	81a3      	strh	r3, [r4, #12]
   13e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13e54:	bd38      	pop	{r3, r4, r5, pc}
   13e56:	06d1      	lsls	r1, r2, #27
   13e58:	d52e      	bpl.n	13eb8 <__swsetup_r+0xb8>
   13e5a:	0752      	lsls	r2, r2, #29
   13e5c:	d414      	bmi.n	13e88 <__swsetup_r+0x88>
   13e5e:	6921      	ldr	r1, [r4, #16]
   13e60:	f043 0308 	orr.w	r3, r3, #8
   13e64:	81a3      	strh	r3, [r4, #12]
   13e66:	b29a      	uxth	r2, r3
   13e68:	2900      	cmp	r1, #0
   13e6a:	d1d9      	bne.n	13e20 <__swsetup_r+0x20>
   13e6c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13e70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13e74:	d0d4      	beq.n	13e20 <__swsetup_r+0x20>
   13e76:	4621      	mov	r1, r4
   13e78:	4628      	mov	r0, r5
   13e7a:	f000 f827 	bl	13ecc <__smakebuf_r>
   13e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e82:	6921      	ldr	r1, [r4, #16]
   13e84:	b29a      	uxth	r2, r3
   13e86:	e7cb      	b.n	13e20 <__swsetup_r+0x20>
   13e88:	6b21      	ldr	r1, [r4, #48]	; 0x30
   13e8a:	b151      	cbz	r1, 13ea2 <__swsetup_r+0xa2>
   13e8c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13e90:	4291      	cmp	r1, r2
   13e92:	d004      	beq.n	13e9e <__swsetup_r+0x9e>
   13e94:	4628      	mov	r0, r5
   13e96:	f7fe fc7d 	bl	12794 <_free_r>
   13e9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13e9e:	2200      	movs	r2, #0
   13ea0:	6322      	str	r2, [r4, #48]	; 0x30
   13ea2:	6921      	ldr	r1, [r4, #16]
   13ea4:	2200      	movs	r2, #0
   13ea6:	e9c4 1200 	strd	r1, r2, [r4]
   13eaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13eae:	e7d7      	b.n	13e60 <__swsetup_r+0x60>
   13eb0:	4618      	mov	r0, r3
   13eb2:	f7fe f93b 	bl	1212c <__sinit>
   13eb6:	e7ac      	b.n	13e12 <__swsetup_r+0x12>
   13eb8:	2209      	movs	r2, #9
   13eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13ebe:	602a      	str	r2, [r5, #0]
   13ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13ec4:	81a3      	strh	r3, [r4, #12]
   13ec6:	bd38      	pop	{r3, r4, r5, pc}
   13ec8:	2000395c 	.word	0x2000395c

00013ecc <__smakebuf_r>:
   13ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ed0:	898b      	ldrh	r3, [r1, #12]
   13ed2:	460c      	mov	r4, r1
   13ed4:	0799      	lsls	r1, r3, #30
   13ed6:	b096      	sub	sp, #88	; 0x58
   13ed8:	d508      	bpl.n	13eec <__smakebuf_r+0x20>
   13eda:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13ede:	2201      	movs	r2, #1
   13ee0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13ee4:	6023      	str	r3, [r4, #0]
   13ee6:	b016      	add	sp, #88	; 0x58
   13ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13ef0:	2900      	cmp	r1, #0
   13ef2:	4606      	mov	r6, r0
   13ef4:	db25      	blt.n	13f42 <__smakebuf_r+0x76>
   13ef6:	466a      	mov	r2, sp
   13ef8:	f001 f840 	bl	14f7c <_fstat_r>
   13efc:	2800      	cmp	r0, #0
   13efe:	db1f      	blt.n	13f40 <__smakebuf_r+0x74>
   13f00:	9d01      	ldr	r5, [sp, #4]
   13f02:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   13f06:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   13f0a:	fab5 f585 	clz	r5, r5
   13f0e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13f12:	096d      	lsrs	r5, r5, #5
   13f14:	f44f 6700 	mov.w	r7, #2048	; 0x800
   13f18:	4641      	mov	r1, r8
   13f1a:	4630      	mov	r0, r6
   13f1c:	f7fc fff6 	bl	10f0c <_malloc_r>
   13f20:	b1e0      	cbz	r0, 13f5c <__smakebuf_r+0x90>
   13f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f26:	f8c4 8014 	str.w	r8, [r4, #20]
   13f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13f2e:	6020      	str	r0, [r4, #0]
   13f30:	6120      	str	r0, [r4, #16]
   13f32:	81a3      	strh	r3, [r4, #12]
   13f34:	bb35      	cbnz	r5, 13f84 <__smakebuf_r+0xb8>
   13f36:	433b      	orrs	r3, r7
   13f38:	81a3      	strh	r3, [r4, #12]
   13f3a:	b016      	add	sp, #88	; 0x58
   13f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f40:	89a3      	ldrh	r3, [r4, #12]
   13f42:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   13f46:	d019      	beq.n	13f7c <__smakebuf_r+0xb0>
   13f48:	f04f 0840 	mov.w	r8, #64	; 0x40
   13f4c:	2500      	movs	r5, #0
   13f4e:	4641      	mov	r1, r8
   13f50:	4630      	mov	r0, r6
   13f52:	462f      	mov	r7, r5
   13f54:	f7fc ffda 	bl	10f0c <_malloc_r>
   13f58:	2800      	cmp	r0, #0
   13f5a:	d1e2      	bne.n	13f22 <__smakebuf_r+0x56>
   13f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f60:	059a      	lsls	r2, r3, #22
   13f62:	d4c0      	bmi.n	13ee6 <__smakebuf_r+0x1a>
   13f64:	f023 0303 	bic.w	r3, r3, #3
   13f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13f6c:	f043 0302 	orr.w	r3, r3, #2
   13f70:	2101      	movs	r1, #1
   13f72:	e9c4 2104 	strd	r2, r1, [r4, #16]
   13f76:	81a3      	strh	r3, [r4, #12]
   13f78:	6022      	str	r2, [r4, #0]
   13f7a:	e7b4      	b.n	13ee6 <__smakebuf_r+0x1a>
   13f7c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13f80:	462f      	mov	r7, r5
   13f82:	e7c9      	b.n	13f18 <__smakebuf_r+0x4c>
   13f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13f88:	4630      	mov	r0, r6
   13f8a:	f001 f80d 	bl	14fa8 <_isatty_r>
   13f8e:	b910      	cbnz	r0, 13f96 <__smakebuf_r+0xca>
   13f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13f94:	e7cf      	b.n	13f36 <__smakebuf_r+0x6a>
   13f96:	89a3      	ldrh	r3, [r4, #12]
   13f98:	f023 0303 	bic.w	r3, r3, #3
   13f9c:	f043 0301 	orr.w	r3, r3, #1
   13fa0:	b21b      	sxth	r3, r3
   13fa2:	e7c8      	b.n	13f36 <__smakebuf_r+0x6a>

00013fa4 <_wcsrtombs_r>:
   13fa4:	b510      	push	{r4, lr}
   13fa6:	b082      	sub	sp, #8
   13fa8:	9c04      	ldr	r4, [sp, #16]
   13faa:	e9cd 3400 	strd	r3, r4, [sp]
   13fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13fb2:	f001 fb17 	bl	155e4 <_wcsnrtombs_r>
   13fb6:	b002      	add	sp, #8
   13fb8:	bd10      	pop	{r4, pc}
   13fba:	bf00      	nop

00013fbc <quorem>:
   13fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc0:	6903      	ldr	r3, [r0, #16]
   13fc2:	690c      	ldr	r4, [r1, #16]
   13fc4:	42a3      	cmp	r3, r4
   13fc6:	b083      	sub	sp, #12
   13fc8:	f2c0 8087 	blt.w	140da <quorem+0x11e>
   13fcc:	3c01      	subs	r4, #1
   13fce:	f101 0514 	add.w	r5, r1, #20
   13fd2:	00a3      	lsls	r3, r4, #2
   13fd4:	f100 0814 	add.w	r8, r0, #20
   13fd8:	9300      	str	r3, [sp, #0]
   13fda:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   13fde:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   13fe2:	3301      	adds	r3, #1
   13fe4:	4681      	mov	r9, r0
   13fe6:	429a      	cmp	r2, r3
   13fe8:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   13fec:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   13ff0:	9001      	str	r0, [sp, #4]
   13ff2:	fbb2 f6f3 	udiv	r6, r2, r3
   13ff6:	d33b      	bcc.n	14070 <quorem+0xb4>
   13ff8:	f04f 0c00 	mov.w	ip, #0
   13ffc:	46ae      	mov	lr, r5
   13ffe:	4640      	mov	r0, r8
   14000:	46e2      	mov	sl, ip
   14002:	4663      	mov	r3, ip
   14004:	f85e bb04 	ldr.w	fp, [lr], #4
   14008:	6802      	ldr	r2, [r0, #0]
   1400a:	fa1f fc8b 	uxth.w	ip, fp
   1400e:	fb06 330c 	mla	r3, r6, ip, r3
   14012:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   14016:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   1401a:	fb06 cc0b 	mla	ip, r6, fp, ip
   1401e:	b29b      	uxth	r3, r3
   14020:	ebaa 0303 	sub.w	r3, sl, r3
   14024:	fa1f fa8c 	uxth.w	sl, ip
   14028:	fa13 f382 	uxtah	r3, r3, r2
   1402c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   14030:	eb02 4223 	add.w	r2, r2, r3, asr #16
   14034:	b29b      	uxth	r3, r3
   14036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1403a:	4577      	cmp	r7, lr
   1403c:	f840 3b04 	str.w	r3, [r0], #4
   14040:	ea4f 4a22 	mov.w	sl, r2, asr #16
   14044:	ea4f 431c 	mov.w	r3, ip, lsr #16
   14048:	d2dc      	bcs.n	14004 <quorem+0x48>
   1404a:	9b00      	ldr	r3, [sp, #0]
   1404c:	f858 3003 	ldr.w	r3, [r8, r3]
   14050:	b973      	cbnz	r3, 14070 <quorem+0xb4>
   14052:	9b01      	ldr	r3, [sp, #4]
   14054:	3b04      	subs	r3, #4
   14056:	4598      	cmp	r8, r3
   14058:	d304      	bcc.n	14064 <quorem+0xa8>
   1405a:	e007      	b.n	1406c <quorem+0xb0>
   1405c:	4598      	cmp	r8, r3
   1405e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   14062:	d203      	bcs.n	1406c <quorem+0xb0>
   14064:	f853 2904 	ldr.w	r2, [r3], #-4
   14068:	2a00      	cmp	r2, #0
   1406a:	d0f7      	beq.n	1405c <quorem+0xa0>
   1406c:	f8c9 4010 	str.w	r4, [r9, #16]
   14070:	4648      	mov	r0, r9
   14072:	f7fd fe47 	bl	11d04 <__mcmp>
   14076:	2800      	cmp	r0, #0
   14078:	db2b      	blt.n	140d2 <quorem+0x116>
   1407a:	3601      	adds	r6, #1
   1407c:	4641      	mov	r1, r8
   1407e:	2300      	movs	r3, #0
   14080:	f855 0b04 	ldr.w	r0, [r5], #4
   14084:	f8d1 c000 	ldr.w	ip, [r1]
   14088:	b282      	uxth	r2, r0
   1408a:	1a9a      	subs	r2, r3, r2
   1408c:	0c03      	lsrs	r3, r0, #16
   1408e:	fa12 f28c 	uxtah	r2, r2, ip
   14092:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   14096:	eb03 4322 	add.w	r3, r3, r2, asr #16
   1409a:	b292      	uxth	r2, r2
   1409c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   140a0:	42af      	cmp	r7, r5
   140a2:	f841 2b04 	str.w	r2, [r1], #4
   140a6:	ea4f 4323 	mov.w	r3, r3, asr #16
   140aa:	d2e9      	bcs.n	14080 <quorem+0xc4>
   140ac:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   140b0:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   140b4:	b96a      	cbnz	r2, 140d2 <quorem+0x116>
   140b6:	3b04      	subs	r3, #4
   140b8:	4598      	cmp	r8, r3
   140ba:	d304      	bcc.n	140c6 <quorem+0x10a>
   140bc:	e007      	b.n	140ce <quorem+0x112>
   140be:	4598      	cmp	r8, r3
   140c0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   140c4:	d203      	bcs.n	140ce <quorem+0x112>
   140c6:	f853 2904 	ldr.w	r2, [r3], #-4
   140ca:	2a00      	cmp	r2, #0
   140cc:	d0f7      	beq.n	140be <quorem+0x102>
   140ce:	f8c9 4010 	str.w	r4, [r9, #16]
   140d2:	4630      	mov	r0, r6
   140d4:	b003      	add	sp, #12
   140d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140da:	2000      	movs	r0, #0
   140dc:	b003      	add	sp, #12
   140de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e2:	bf00      	nop
   140e4:	0000      	movs	r0, r0
	...

000140e8 <_dtoa_r>:
   140e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ec:	ed2d 8b02 	vpush	{d8}
   140f0:	b08f      	sub	sp, #60	; 0x3c
   140f2:	ed8d 0b02 	vstr	d0, [sp, #8]
   140f6:	9101      	str	r1, [sp, #4]
   140f8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   140fa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   140fc:	9305      	str	r3, [sp, #20]
   140fe:	ec57 6b10 	vmov	r6, r7, d0
   14102:	4604      	mov	r4, r0
   14104:	4693      	mov	fp, r2
   14106:	b141      	cbz	r1, 1411a <_dtoa_r+0x32>
   14108:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   1410a:	604a      	str	r2, [r1, #4]
   1410c:	2301      	movs	r3, #1
   1410e:	4093      	lsls	r3, r2
   14110:	608b      	str	r3, [r1, #8]
   14112:	f7fd fb97 	bl	11844 <_Bfree>
   14116:	2300      	movs	r3, #0
   14118:	63a3      	str	r3, [r4, #56]	; 0x38
   1411a:	f1b7 0800 	subs.w	r8, r7, #0
   1411e:	bfb4      	ite	lt
   14120:	2301      	movlt	r3, #1
   14122:	2300      	movge	r3, #0
   14124:	602b      	str	r3, [r5, #0]
   14126:	4bbe      	ldr	r3, [pc, #760]	; (14420 <_dtoa_r+0x338>)
   14128:	bfbc      	itt	lt
   1412a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   1412e:	f8cd 800c 	strlt.w	r8, [sp, #12]
   14132:	ea33 0308 	bics.w	r3, r3, r8
   14136:	f000 809f 	beq.w	14278 <_dtoa_r+0x190>
   1413a:	ed9d 8b02 	vldr	d8, [sp, #8]
   1413e:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14146:	d111      	bne.n	1416c <_dtoa_r+0x84>
   14148:	9a05      	ldr	r2, [sp, #20]
   1414a:	2301      	movs	r3, #1
   1414c:	6013      	str	r3, [r2, #0]
   1414e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14150:	2b00      	cmp	r3, #0
   14152:	f000 823f 	beq.w	145d4 <_dtoa_r+0x4ec>
   14156:	4bb3      	ldr	r3, [pc, #716]	; (14424 <_dtoa_r+0x33c>)
   14158:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1415a:	6013      	str	r3, [r2, #0]
   1415c:	3b01      	subs	r3, #1
   1415e:	9300      	str	r3, [sp, #0]
   14160:	9800      	ldr	r0, [sp, #0]
   14162:	b00f      	add	sp, #60	; 0x3c
   14164:	ecbd 8b02 	vpop	{d8}
   14168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1416c:	aa0c      	add	r2, sp, #48	; 0x30
   1416e:	a90d      	add	r1, sp, #52	; 0x34
   14170:	4620      	mov	r0, r4
   14172:	eeb0 0b48 	vmov.f64	d0, d8
   14176:	f7fd fe91 	bl	11e9c <__d2b>
   1417a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   1417e:	4605      	mov	r5, r0
   14180:	f040 8092 	bne.w	142a8 <_dtoa_r+0x1c0>
   14184:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   14188:	440b      	add	r3, r1
   1418a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   1418e:	2a20      	cmp	r2, #32
   14190:	f340 82fa 	ble.w	14788 <_dtoa_r+0x6a0>
   14194:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   14198:	fa08 f802 	lsl.w	r8, r8, r2
   1419c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   141a0:	40d6      	lsrs	r6, r2
   141a2:	ea48 0206 	orr.w	r2, r8, r6
   141a6:	ee07 2a10 	vmov	s14, r2
   141aa:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   141ae:	1e58      	subs	r0, r3, #1
   141b0:	ee17 6a90 	vmov	r6, s15
   141b4:	ec53 2b17 	vmov	r2, r3, d7
   141b8:	f04f 0a01 	mov.w	sl, #1
   141bc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   141c0:	ed9f 3b91 	vldr	d3, [pc, #580]	; 14408 <_dtoa_r+0x320>
   141c4:	ed9f 7b92 	vldr	d7, [pc, #584]	; 14410 <_dtoa_r+0x328>
   141c8:	ed9f 5b93 	vldr	d5, [pc, #588]	; 14418 <_dtoa_r+0x330>
   141cc:	ee06 0a90 	vmov	s13, r0
   141d0:	ec43 2b12 	vmov	d2, r2, r3
   141d4:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   141d8:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   141dc:	ee32 6b46 	vsub.f64	d6, d2, d6
   141e0:	eea6 7b03 	vfma.f64	d7, d6, d3
   141e4:	eea4 7b05 	vfma.f64	d7, d4, d5
   141e8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   141ec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   141f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   141f4:	ee16 7a90 	vmov	r7, s13
   141f8:	d508      	bpl.n	1420c <_dtoa_r+0x124>
   141fa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   141fe:	eeb4 6b47 	vcmp.f64	d6, d7
   14202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14206:	bf18      	it	ne
   14208:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   1420c:	2f16      	cmp	r7, #22
   1420e:	f200 8145 	bhi.w	1449c <_dtoa_r+0x3b4>
   14212:	4b85      	ldr	r3, [pc, #532]	; (14428 <_dtoa_r+0x340>)
   14214:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   14218:	ed93 7b00 	vldr	d7, [r3]
   1421c:	eeb4 8bc7 	vcmpe.f64	d8, d7
   14220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14224:	d557      	bpl.n	142d6 <_dtoa_r+0x1ee>
   14226:	1a09      	subs	r1, r1, r0
   14228:	2300      	movs	r3, #0
   1422a:	f1b1 0801 	subs.w	r8, r1, #1
   1422e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   14232:	930a      	str	r3, [sp, #40]	; 0x28
   14234:	f100 8139 	bmi.w	144aa <_dtoa_r+0x3c2>
   14238:	2300      	movs	r3, #0
   1423a:	9306      	str	r3, [sp, #24]
   1423c:	2f00      	cmp	r7, #0
   1423e:	da52      	bge.n	142e6 <_dtoa_r+0x1fe>
   14240:	9b06      	ldr	r3, [sp, #24]
   14242:	9704      	str	r7, [sp, #16]
   14244:	1bdb      	subs	r3, r3, r7
   14246:	9306      	str	r3, [sp, #24]
   14248:	427b      	negs	r3, r7
   1424a:	9308      	str	r3, [sp, #32]
   1424c:	9b01      	ldr	r3, [sp, #4]
   1424e:	2b09      	cmp	r3, #9
   14250:	f04f 0700 	mov.w	r7, #0
   14254:	d84e      	bhi.n	142f4 <_dtoa_r+0x20c>
   14256:	2b05      	cmp	r3, #5
   14258:	f340 829d 	ble.w	14796 <_dtoa_r+0x6ae>
   1425c:	3b04      	subs	r3, #4
   1425e:	9301      	str	r3, [sp, #4]
   14260:	2600      	movs	r6, #0
   14262:	9b01      	ldr	r3, [sp, #4]
   14264:	1e9a      	subs	r2, r3, #2
   14266:	2a03      	cmp	r2, #3
   14268:	f200 8125 	bhi.w	144b6 <_dtoa_r+0x3ce>
   1426c:	e8df f012 	tbh	[pc, r2, lsl #1]
   14270:	03a703aa 	.word	0x03a703aa
   14274:	037e039d 	.word	0x037e039d
   14278:	9a05      	ldr	r2, [sp, #20]
   1427a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   1427e:	f242 730f 	movw	r3, #9999	; 0x270f
   14282:	ea58 0806 	orrs.w	r8, r8, r6
   14286:	6013      	str	r3, [r2, #0]
   14288:	d11e      	bne.n	142c8 <_dtoa_r+0x1e0>
   1428a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1428c:	2b00      	cmp	r3, #0
   1428e:	f000 8591 	beq.w	14db4 <_dtoa_r+0xccc>
   14292:	4b66      	ldr	r3, [pc, #408]	; (1442c <_dtoa_r+0x344>)
   14294:	9300      	str	r3, [sp, #0]
   14296:	3308      	adds	r3, #8
   14298:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1429a:	9800      	ldr	r0, [sp, #0]
   1429c:	6013      	str	r3, [r2, #0]
   1429e:	b00f      	add	sp, #60	; 0x3c
   142a0:	ecbd 8b02 	vpop	{d8}
   142a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a8:	ee18 6a90 	vmov	r6, s17
   142ac:	f3c6 0613 	ubfx	r6, r6, #0, #20
   142b0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   142b4:	ec53 2b18 	vmov	r2, r3, d8
   142b8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   142bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   142be:	f04f 0a00 	mov.w	sl, #0
   142c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   142c6:	e77b      	b.n	141c0 <_dtoa_r+0xd8>
   142c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   142ca:	2b00      	cmp	r3, #0
   142cc:	f040 833b 	bne.w	14946 <_dtoa_r+0x85e>
   142d0:	4b57      	ldr	r3, [pc, #348]	; (14430 <_dtoa_r+0x348>)
   142d2:	9300      	str	r3, [sp, #0]
   142d4:	e744      	b.n	14160 <_dtoa_r+0x78>
   142d6:	1a09      	subs	r1, r1, r0
   142d8:	2300      	movs	r3, #0
   142da:	f1b1 0801 	subs.w	r8, r1, #1
   142de:	930a      	str	r3, [sp, #40]	; 0x28
   142e0:	f100 80e3 	bmi.w	144aa <_dtoa_r+0x3c2>
   142e4:	9306      	str	r3, [sp, #24]
   142e6:	2300      	movs	r3, #0
   142e8:	9308      	str	r3, [sp, #32]
   142ea:	9b01      	ldr	r3, [sp, #4]
   142ec:	9704      	str	r7, [sp, #16]
   142ee:	2b09      	cmp	r3, #9
   142f0:	44b8      	add	r8, r7
   142f2:	d9b0      	bls.n	14256 <_dtoa_r+0x16e>
   142f4:	2300      	movs	r3, #0
   142f6:	2601      	movs	r6, #1
   142f8:	9301      	str	r3, [sp, #4]
   142fa:	9607      	str	r6, [sp, #28]
   142fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   14300:	469b      	mov	fp, r3
   14302:	2100      	movs	r1, #0
   14304:	63e1      	str	r1, [r4, #60]	; 0x3c
   14306:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1430a:	4620      	mov	r0, r4
   1430c:	f7fd fa74 	bl	117f8 <_Balloc>
   14310:	9000      	str	r0, [sp, #0]
   14312:	2800      	cmp	r0, #0
   14314:	f000 8540 	beq.w	14d98 <_dtoa_r+0xcb0>
   14318:	9b00      	ldr	r3, [sp, #0]
   1431a:	63a3      	str	r3, [r4, #56]	; 0x38
   1431c:	f1b9 0f0e 	cmp.w	r9, #14
   14320:	f200 80dc 	bhi.w	144dc <_dtoa_r+0x3f4>
   14324:	2e00      	cmp	r6, #0
   14326:	f000 80d9 	beq.w	144dc <_dtoa_r+0x3f4>
   1432a:	9b04      	ldr	r3, [sp, #16]
   1432c:	2b00      	cmp	r3, #0
   1432e:	f340 83de 	ble.w	14aee <_dtoa_r+0xa06>
   14332:	4a3d      	ldr	r2, [pc, #244]	; (14428 <_dtoa_r+0x340>)
   14334:	f003 010f 	and.w	r1, r3, #15
   14338:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1433c:	ed92 7b00 	vldr	d7, [r2]
   14340:	111a      	asrs	r2, r3, #4
   14342:	05db      	lsls	r3, r3, #23
   14344:	f140 8382 	bpl.w	14a4c <_dtoa_r+0x964>
   14348:	493a      	ldr	r1, [pc, #232]	; (14434 <_dtoa_r+0x34c>)
   1434a:	ed91 6b08 	vldr	d6, [r1, #32]
   1434e:	f002 020f 	and.w	r2, r2, #15
   14352:	2003      	movs	r0, #3
   14354:	ee88 5b06 	vdiv.f64	d5, d8, d6
   14358:	b15a      	cbz	r2, 14372 <_dtoa_r+0x28a>
   1435a:	4936      	ldr	r1, [pc, #216]	; (14434 <_dtoa_r+0x34c>)
   1435c:	07d6      	lsls	r6, r2, #31
   1435e:	d504      	bpl.n	1436a <_dtoa_r+0x282>
   14360:	ed91 6b00 	vldr	d6, [r1]
   14364:	3001      	adds	r0, #1
   14366:	ee27 7b06 	vmul.f64	d7, d7, d6
   1436a:	1052      	asrs	r2, r2, #1
   1436c:	f101 0108 	add.w	r1, r1, #8
   14370:	d1f4      	bne.n	1435c <_dtoa_r+0x274>
   14372:	ee85 6b07 	vdiv.f64	d6, d5, d7
   14376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14378:	b13b      	cbz	r3, 1438a <_dtoa_r+0x2a2>
   1437a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   1437e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14386:	f100 84ae 	bmi.w	14ce6 <_dtoa_r+0xbfe>
   1438a:	ee07 0a90 	vmov	s15, r0
   1438e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14392:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14396:	eea5 7b06 	vfma.f64	d7, d5, d6
   1439a:	ee17 2a90 	vmov	r2, s15
   1439e:	ec51 0b17 	vmov	r0, r1, d7
   143a2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   143a6:	f1b9 0f00 	cmp.w	r9, #0
   143aa:	f000 8388 	beq.w	14abe <_dtoa_r+0x9d6>
   143ae:	9e04      	ldr	r6, [sp, #16]
   143b0:	464a      	mov	r2, r9
   143b2:	9b07      	ldr	r3, [sp, #28]
   143b4:	2b00      	cmp	r3, #0
   143b6:	f000 8447 	beq.w	14c48 <_dtoa_r+0xb60>
   143ba:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   143be:	4b1a      	ldr	r3, [pc, #104]	; (14428 <_dtoa_r+0x340>)
   143c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   143c4:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   143c8:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   143cc:	ee36 7b47 	vsub.f64	d7, d6, d7
   143d0:	ed1c 6b02 	vldr	d6, [ip, #-8]
   143d4:	ee83 5b06 	vdiv.f64	d5, d3, d6
   143d8:	ec41 0b16 	vmov	d6, r0, r1
   143dc:	ee14 0a90 	vmov	r0, s9
   143e0:	ee35 5b46 	vsub.f64	d5, d5, d6
   143e4:	9900      	ldr	r1, [sp, #0]
   143e6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   143ea:	3030      	adds	r0, #48	; 0x30
   143ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   143f0:	f801 0b01 	strb.w	r0, [r1], #1
   143f4:	f300 84ac 	bgt.w	14d50 <_dtoa_r+0xc68>
   143f8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   143fc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14400:	f04f 0c00 	mov.w	ip, #0
   14404:	e031      	b.n	1446a <_dtoa_r+0x382>
   14406:	bf00      	nop
   14408:	636f4361 	.word	0x636f4361
   1440c:	3fd287a7 	.word	0x3fd287a7
   14410:	8b60c8b3 	.word	0x8b60c8b3
   14414:	3fc68a28 	.word	0x3fc68a28
   14418:	509f79fb 	.word	0x509f79fb
   1441c:	3fd34413 	.word	0x3fd34413
   14420:	7ff00000 	.word	0x7ff00000
   14424:	20002c55 	.word	0x20002c55
   14428:	20000b58 	.word	0x20000b58
   1442c:	20002818 	.word	0x20002818
   14430:	20002824 	.word	0x20002824
   14434:	20000b30 	.word	0x20000b30
   14438:	f10c 0c01 	add.w	ip, ip, #1
   1443c:	4594      	cmp	ip, r2
   1443e:	da4d      	bge.n	144dc <_dtoa_r+0x3f4>
   14440:	ee27 7b04 	vmul.f64	d7, d7, d4
   14444:	ee25 5b04 	vmul.f64	d5, d5, d4
   14448:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1444c:	ee16 3a90 	vmov	r3, s13
   14450:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   14454:	3330      	adds	r3, #48	; 0x30
   14456:	ee37 7b43 	vsub.f64	d7, d7, d3
   1445a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14462:	f801 3b01 	strb.w	r3, [r1], #1
   14466:	f100 8473 	bmi.w	14d50 <_dtoa_r+0xc68>
   1446a:	ee32 6b47 	vsub.f64	d6, d2, d7
   1446e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   14472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14476:	d5df      	bpl.n	14438 <_dtoa_r+0x350>
   14478:	9a00      	ldr	r2, [sp, #0]
   1447a:	9604      	str	r6, [sp, #16]
   1447c:	e002      	b.n	14484 <_dtoa_r+0x39c>
   1447e:	428a      	cmp	r2, r1
   14480:	f000 8450 	beq.w	14d24 <_dtoa_r+0xc3c>
   14484:	4689      	mov	r9, r1
   14486:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1448a:	2b39      	cmp	r3, #57	; 0x39
   1448c:	d0f7      	beq.n	1447e <_dtoa_r+0x396>
   1448e:	3301      	adds	r3, #1
   14490:	b2db      	uxtb	r3, r3
   14492:	700b      	strb	r3, [r1, #0]
   14494:	9b04      	ldr	r3, [sp, #16]
   14496:	3301      	adds	r3, #1
   14498:	9304      	str	r3, [sp, #16]
   1449a:	e155      	b.n	14748 <_dtoa_r+0x660>
   1449c:	1a09      	subs	r1, r1, r0
   1449e:	2301      	movs	r3, #1
   144a0:	f1b1 0801 	subs.w	r8, r1, #1
   144a4:	930a      	str	r3, [sp, #40]	; 0x28
   144a6:	f57f aec7 	bpl.w	14238 <_dtoa_r+0x150>
   144aa:	f1c1 0301 	rsb	r3, r1, #1
   144ae:	9306      	str	r3, [sp, #24]
   144b0:	f04f 0800 	mov.w	r8, #0
   144b4:	e6c2      	b.n	1423c <_dtoa_r+0x154>
   144b6:	2600      	movs	r6, #0
   144b8:	63e6      	str	r6, [r4, #60]	; 0x3c
   144ba:	4631      	mov	r1, r6
   144bc:	4620      	mov	r0, r4
   144be:	f7fd f99b 	bl	117f8 <_Balloc>
   144c2:	9000      	str	r0, [sp, #0]
   144c4:	2800      	cmp	r0, #0
   144c6:	f000 8467 	beq.w	14d98 <_dtoa_r+0xcb0>
   144ca:	9b00      	ldr	r3, [sp, #0]
   144cc:	63a3      	str	r3, [r4, #56]	; 0x38
   144ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144d2:	930b      	str	r3, [sp, #44]	; 0x2c
   144d4:	4699      	mov	r9, r3
   144d6:	2301      	movs	r3, #1
   144d8:	46b3      	mov	fp, r6
   144da:	9307      	str	r3, [sp, #28]
   144dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   144de:	2a00      	cmp	r2, #0
   144e0:	db55      	blt.n	1458e <_dtoa_r+0x4a6>
   144e2:	9904      	ldr	r1, [sp, #16]
   144e4:	290e      	cmp	r1, #14
   144e6:	dc52      	bgt.n	1458e <_dtoa_r+0x4a6>
   144e8:	4bb7      	ldr	r3, [pc, #732]	; (147c8 <_dtoa_r+0x6e0>)
   144ea:	f1bb 0f00 	cmp.w	fp, #0
   144ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   144f2:	ed93 6b00 	vldr	d6, [r3]
   144f6:	da15      	bge.n	14524 <_dtoa_r+0x43c>
   144f8:	f1b9 0f00 	cmp.w	r9, #0
   144fc:	dc12      	bgt.n	14524 <_dtoa_r+0x43c>
   144fe:	f040 82f2 	bne.w	14ae6 <_dtoa_r+0x9fe>
   14502:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14506:	ee26 7b07 	vmul.f64	d7, d6, d7
   1450a:	eeb4 8bc7 	vcmpe.f64	d8, d7
   1450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14512:	46ca      	mov	sl, r9
   14514:	464e      	mov	r6, r9
   14516:	f200 826d 	bhi.w	149f4 <_dtoa_r+0x90c>
   1451a:	f8dd 8000 	ldr.w	r8, [sp]
   1451e:	ea6f 0b0b 	mvn.w	fp, fp
   14522:	e270      	b.n	14a06 <_dtoa_r+0x91e>
   14524:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14528:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1452c:	9900      	ldr	r1, [sp, #0]
   1452e:	ee17 3a10 	vmov	r3, s14
   14532:	f1b9 0f01 	cmp.w	r9, #1
   14536:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1453a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1453e:	f801 3b01 	strb.w	r3, [r1], #1
   14542:	eea5 8b46 	vfms.f64	d8, d5, d6
   14546:	f000 8334 	beq.w	14bb2 <_dtoa_r+0xaca>
   1454a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1454e:	2301      	movs	r3, #1
   14550:	e011      	b.n	14576 <_dtoa_r+0x48e>
   14552:	ee88 7b06 	vdiv.f64	d7, d8, d6
   14556:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1455a:	3301      	adds	r3, #1
   1455c:	ee17 2a10 	vmov	r2, s14
   14560:	454b      	cmp	r3, r9
   14562:	f102 0230 	add.w	r2, r2, #48	; 0x30
   14566:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1456a:	f801 2b01 	strb.w	r2, [r1], #1
   1456e:	eea5 8b46 	vfms.f64	d8, d5, d6
   14572:	f000 831e 	beq.w	14bb2 <_dtoa_r+0xaca>
   14576:	ee28 8b04 	vmul.f64	d8, d8, d4
   1457a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14582:	d1e6      	bne.n	14552 <_dtoa_r+0x46a>
   14584:	9b04      	ldr	r3, [sp, #16]
   14586:	3301      	adds	r3, #1
   14588:	9304      	str	r3, [sp, #16]
   1458a:	4689      	mov	r9, r1
   1458c:	e0dc      	b.n	14748 <_dtoa_r+0x660>
   1458e:	9b07      	ldr	r3, [sp, #28]
   14590:	b343      	cbz	r3, 145e4 <_dtoa_r+0x4fc>
   14592:	9b01      	ldr	r3, [sp, #4]
   14594:	2b01      	cmp	r3, #1
   14596:	f340 8276 	ble.w	14a86 <_dtoa_r+0x99e>
   1459a:	9b08      	ldr	r3, [sp, #32]
   1459c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   145a0:	4553      	cmp	r3, sl
   145a2:	f280 823f 	bge.w	14a24 <_dtoa_r+0x93c>
   145a6:	9b08      	ldr	r3, [sp, #32]
   145a8:	f8cd a020 	str.w	sl, [sp, #32]
   145ac:	ebaa 0203 	sub.w	r2, sl, r3
   145b0:	4417      	add	r7, r2
   145b2:	f04f 0a00 	mov.w	sl, #0
   145b6:	f1b9 0f00 	cmp.w	r9, #0
   145ba:	f2c0 8325 	blt.w	14c08 <_dtoa_r+0xb20>
   145be:	9b06      	ldr	r3, [sp, #24]
   145c0:	9309      	str	r3, [sp, #36]	; 0x24
   145c2:	444b      	add	r3, r9
   145c4:	44c8      	add	r8, r9
   145c6:	9306      	str	r3, [sp, #24]
   145c8:	2101      	movs	r1, #1
   145ca:	4620      	mov	r0, r4
   145cc:	f7fd f9e6 	bl	1199c <__i2b>
   145d0:	4606      	mov	r6, r0
   145d2:	e00c      	b.n	145ee <_dtoa_r+0x506>
   145d4:	4b7d      	ldr	r3, [pc, #500]	; (147cc <_dtoa_r+0x6e4>)
   145d6:	9300      	str	r3, [sp, #0]
   145d8:	9800      	ldr	r0, [sp, #0]
   145da:	b00f      	add	sp, #60	; 0x3c
   145dc:	ecbd 8b02 	vpop	{d8}
   145e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e4:	9b06      	ldr	r3, [sp, #24]
   145e6:	f8dd a020 	ldr.w	sl, [sp, #32]
   145ea:	9e07      	ldr	r6, [sp, #28]
   145ec:	9309      	str	r3, [sp, #36]	; 0x24
   145ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   145f0:	b16b      	cbz	r3, 1460e <_dtoa_r+0x526>
   145f2:	f1b8 0f00 	cmp.w	r8, #0
   145f6:	dd0a      	ble.n	1460e <_dtoa_r+0x526>
   145f8:	4543      	cmp	r3, r8
   145fa:	9906      	ldr	r1, [sp, #24]
   145fc:	461a      	mov	r2, r3
   145fe:	bfa8      	it	ge
   14600:	4642      	movge	r2, r8
   14602:	1a89      	subs	r1, r1, r2
   14604:	1a9b      	subs	r3, r3, r2
   14606:	9106      	str	r1, [sp, #24]
   14608:	9309      	str	r3, [sp, #36]	; 0x24
   1460a:	eba8 0802 	sub.w	r8, r8, r2
   1460e:	9b08      	ldr	r3, [sp, #32]
   14610:	b163      	cbz	r3, 1462c <_dtoa_r+0x544>
   14612:	9b07      	ldr	r3, [sp, #28]
   14614:	2b00      	cmp	r3, #0
   14616:	f000 82a7 	beq.w	14b68 <_dtoa_r+0xa80>
   1461a:	f1ba 0f00 	cmp.w	sl, #0
   1461e:	f300 8204 	bgt.w	14a2a <_dtoa_r+0x942>
   14622:	9b08      	ldr	r3, [sp, #32]
   14624:	ebb3 020a 	subs.w	r2, r3, sl
   14628:	f040 82ff 	bne.w	14c2a <_dtoa_r+0xb42>
   1462c:	2101      	movs	r1, #1
   1462e:	4620      	mov	r0, r4
   14630:	f7fd f9b4 	bl	1199c <__i2b>
   14634:	2f00      	cmp	r7, #0
   14636:	4682      	mov	sl, r0
   14638:	f300 80af 	bgt.w	1479a <_dtoa_r+0x6b2>
   1463c:	9b01      	ldr	r3, [sp, #4]
   1463e:	2b01      	cmp	r3, #1
   14640:	f340 8187 	ble.w	14952 <_dtoa_r+0x86a>
   14644:	2300      	movs	r3, #0
   14646:	9308      	str	r3, [sp, #32]
   14648:	2001      	movs	r0, #1
   1464a:	2f00      	cmp	r7, #0
   1464c:	f040 80b1 	bne.w	147b2 <_dtoa_r+0x6ca>
   14650:	4440      	add	r0, r8
   14652:	f010 001f 	ands.w	r0, r0, #31
   14656:	f000 817a 	beq.w	1494e <_dtoa_r+0x866>
   1465a:	f1c0 0220 	rsb	r2, r0, #32
   1465e:	2a04      	cmp	r2, #4
   14660:	f300 8088 	bgt.w	14774 <_dtoa_r+0x68c>
   14664:	f040 81f6 	bne.w	14a54 <_dtoa_r+0x96c>
   14668:	9b06      	ldr	r3, [sp, #24]
   1466a:	2b00      	cmp	r3, #0
   1466c:	dd05      	ble.n	1467a <_dtoa_r+0x592>
   1466e:	4629      	mov	r1, r5
   14670:	461a      	mov	r2, r3
   14672:	4620      	mov	r0, r4
   14674:	f7fd face 	bl	11c14 <__lshift>
   14678:	4605      	mov	r5, r0
   1467a:	f1b8 0f00 	cmp.w	r8, #0
   1467e:	dd05      	ble.n	1468c <_dtoa_r+0x5a4>
   14680:	4651      	mov	r1, sl
   14682:	4642      	mov	r2, r8
   14684:	4620      	mov	r0, r4
   14686:	f7fd fac5 	bl	11c14 <__lshift>
   1468a:	4682      	mov	sl, r0
   1468c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1468e:	2b00      	cmp	r3, #0
   14690:	f040 813f 	bne.w	14912 <_dtoa_r+0x82a>
   14694:	f1b9 0f00 	cmp.w	r9, #0
   14698:	f340 8125 	ble.w	148e6 <_dtoa_r+0x7fe>
   1469c:	9b07      	ldr	r3, [sp, #28]
   1469e:	2b00      	cmp	r3, #0
   146a0:	f040 80a3 	bne.w	147ea <_dtoa_r+0x702>
   146a4:	9b04      	ldr	r3, [sp, #16]
   146a6:	3301      	adds	r3, #1
   146a8:	9304      	str	r3, [sp, #16]
   146aa:	f8dd 8000 	ldr.w	r8, [sp]
   146ae:	2701      	movs	r7, #1
   146b0:	e007      	b.n	146c2 <_dtoa_r+0x5da>
   146b2:	4629      	mov	r1, r5
   146b4:	2300      	movs	r3, #0
   146b6:	220a      	movs	r2, #10
   146b8:	4620      	mov	r0, r4
   146ba:	f7fd f8cd 	bl	11858 <__multadd>
   146be:	3701      	adds	r7, #1
   146c0:	4605      	mov	r5, r0
   146c2:	4651      	mov	r1, sl
   146c4:	4628      	mov	r0, r5
   146c6:	f7ff fc79 	bl	13fbc <quorem>
   146ca:	45b9      	cmp	r9, r7
   146cc:	f100 0030 	add.w	r0, r0, #48	; 0x30
   146d0:	f808 0b01 	strb.w	r0, [r8], #1
   146d4:	dced      	bgt.n	146b2 <_dtoa_r+0x5ca>
   146d6:	f1b9 0f00 	cmp.w	r9, #0
   146da:	9a00      	ldr	r2, [sp, #0]
   146dc:	bfcc      	ite	gt
   146de:	46cb      	movgt	fp, r9
   146e0:	f04f 0b01 	movle.w	fp, #1
   146e4:	4603      	mov	r3, r0
   146e6:	4493      	add	fp, r2
   146e8:	2700      	movs	r7, #0
   146ea:	4629      	mov	r1, r5
   146ec:	2201      	movs	r2, #1
   146ee:	4620      	mov	r0, r4
   146f0:	9301      	str	r3, [sp, #4]
   146f2:	f7fd fa8f 	bl	11c14 <__lshift>
   146f6:	4651      	mov	r1, sl
   146f8:	4605      	mov	r5, r0
   146fa:	f7fd fb03 	bl	11d04 <__mcmp>
   146fe:	2800      	cmp	r0, #0
   14700:	f340 81af 	ble.w	14a62 <_dtoa_r+0x97a>
   14704:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   14708:	9a00      	ldr	r2, [sp, #0]
   1470a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1470e:	e004      	b.n	1471a <_dtoa_r+0x632>
   14710:	455a      	cmp	r2, fp
   14712:	f000 81b1 	beq.w	14a78 <_dtoa_r+0x990>
   14716:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1471a:	2b39      	cmp	r3, #57	; 0x39
   1471c:	f10b 0901 	add.w	r9, fp, #1
   14720:	d0f6      	beq.n	14710 <_dtoa_r+0x628>
   14722:	3301      	adds	r3, #1
   14724:	f88b 3000 	strb.w	r3, [fp]
   14728:	4651      	mov	r1, sl
   1472a:	4620      	mov	r0, r4
   1472c:	f7fd f88a 	bl	11844 <_Bfree>
   14730:	b156      	cbz	r6, 14748 <_dtoa_r+0x660>
   14732:	b12f      	cbz	r7, 14740 <_dtoa_r+0x658>
   14734:	42b7      	cmp	r7, r6
   14736:	d003      	beq.n	14740 <_dtoa_r+0x658>
   14738:	4639      	mov	r1, r7
   1473a:	4620      	mov	r0, r4
   1473c:	f7fd f882 	bl	11844 <_Bfree>
   14740:	4631      	mov	r1, r6
   14742:	4620      	mov	r0, r4
   14744:	f7fd f87e 	bl	11844 <_Bfree>
   14748:	4629      	mov	r1, r5
   1474a:	4620      	mov	r0, r4
   1474c:	f7fd f87a 	bl	11844 <_Bfree>
   14750:	2300      	movs	r3, #0
   14752:	f889 3000 	strb.w	r3, [r9]
   14756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1475a:	601a      	str	r2, [r3, #0]
   1475c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1475e:	2b00      	cmp	r3, #0
   14760:	f43f acfe 	beq.w	14160 <_dtoa_r+0x78>
   14764:	9800      	ldr	r0, [sp, #0]
   14766:	f8c3 9000 	str.w	r9, [r3]
   1476a:	b00f      	add	sp, #60	; 0x3c
   1476c:	ecbd 8b02 	vpop	{d8}
   14770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14774:	f1c0 001c 	rsb	r0, r0, #28
   14778:	9b06      	ldr	r3, [sp, #24]
   1477a:	4403      	add	r3, r0
   1477c:	9306      	str	r3, [sp, #24]
   1477e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14780:	4403      	add	r3, r0
   14782:	9309      	str	r3, [sp, #36]	; 0x24
   14784:	4480      	add	r8, r0
   14786:	e76f      	b.n	14668 <_dtoa_r+0x580>
   14788:	f1c2 0220 	rsb	r2, r2, #32
   1478c:	fa06 f202 	lsl.w	r2, r6, r2
   14790:	ee07 2a10 	vmov	s14, r2
   14794:	e509      	b.n	141aa <_dtoa_r+0xc2>
   14796:	2601      	movs	r6, #1
   14798:	e563      	b.n	14262 <_dtoa_r+0x17a>
   1479a:	4601      	mov	r1, r0
   1479c:	463a      	mov	r2, r7
   1479e:	4620      	mov	r0, r4
   147a0:	f7fd f9d8 	bl	11b54 <__pow5mult>
   147a4:	9b01      	ldr	r3, [sp, #4]
   147a6:	2b01      	cmp	r3, #1
   147a8:	4682      	mov	sl, r0
   147aa:	f340 81c5 	ble.w	14b38 <_dtoa_r+0xa50>
   147ae:	2300      	movs	r3, #0
   147b0:	9308      	str	r3, [sp, #32]
   147b2:	f8da 2010 	ldr.w	r2, [sl, #16]
   147b6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   147ba:	6910      	ldr	r0, [r2, #16]
   147bc:	f7fd f89e 	bl	118fc <__hi0bits>
   147c0:	f1c0 0020 	rsb	r0, r0, #32
   147c4:	e744      	b.n	14650 <_dtoa_r+0x568>
   147c6:	bf00      	nop
   147c8:	20000b58 	.word	0x20000b58
   147cc:	20002c54 	.word	0x20002c54
   147d0:	4631      	mov	r1, r6
   147d2:	2300      	movs	r3, #0
   147d4:	220a      	movs	r2, #10
   147d6:	4620      	mov	r0, r4
   147d8:	f7fd f83e 	bl	11858 <__multadd>
   147dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   147de:	2b00      	cmp	r3, #0
   147e0:	4606      	mov	r6, r0
   147e2:	f340 82ce 	ble.w	14d82 <_dtoa_r+0xc9a>
   147e6:	9704      	str	r7, [sp, #16]
   147e8:	4699      	mov	r9, r3
   147ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   147ec:	2b00      	cmp	r3, #0
   147ee:	dd05      	ble.n	147fc <_dtoa_r+0x714>
   147f0:	4631      	mov	r1, r6
   147f2:	461a      	mov	r2, r3
   147f4:	4620      	mov	r0, r4
   147f6:	f7fd fa0d 	bl	11c14 <__lshift>
   147fa:	4606      	mov	r6, r0
   147fc:	9b08      	ldr	r3, [sp, #32]
   147fe:	2b00      	cmp	r3, #0
   14800:	f040 81eb 	bne.w	14bda <_dtoa_r+0xaf2>
   14804:	46b0      	mov	r8, r6
   14806:	9b02      	ldr	r3, [sp, #8]
   14808:	9f00      	ldr	r7, [sp, #0]
   1480a:	f003 0201 	and.w	r2, r3, #1
   1480e:	1e7b      	subs	r3, r7, #1
   14810:	444b      	add	r3, r9
   14812:	9308      	str	r3, [sp, #32]
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	920a      	str	r2, [sp, #40]	; 0x28
   14818:	4313      	orrs	r3, r2
   1481a:	9309      	str	r3, [sp, #36]	; 0x24
   1481c:	4651      	mov	r1, sl
   1481e:	4628      	mov	r0, r5
   14820:	f7ff fbcc 	bl	13fbc <quorem>
   14824:	4631      	mov	r1, r6
   14826:	4683      	mov	fp, r0
   14828:	4628      	mov	r0, r5
   1482a:	f7fd fa6b 	bl	11d04 <__mcmp>
   1482e:	4642      	mov	r2, r8
   14830:	4651      	mov	r1, sl
   14832:	4681      	mov	r9, r0
   14834:	4620      	mov	r0, r4
   14836:	f7fd fa87 	bl	11d48 <__mdiff>
   1483a:	68c2      	ldr	r2, [r0, #12]
   1483c:	4601      	mov	r1, r0
   1483e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   14842:	2a00      	cmp	r2, #0
   14844:	d142      	bne.n	148cc <_dtoa_r+0x7e4>
   14846:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1484a:	4628      	mov	r0, r5
   1484c:	f7fd fa5a 	bl	11d04 <__mcmp>
   14850:	9906      	ldr	r1, [sp, #24]
   14852:	9002      	str	r0, [sp, #8]
   14854:	4620      	mov	r0, r4
   14856:	f7fc fff5 	bl	11844 <_Bfree>
   1485a:	9a02      	ldr	r2, [sp, #8]
   1485c:	9b07      	ldr	r3, [sp, #28]
   1485e:	b91a      	cbnz	r2, 14868 <_dtoa_r+0x780>
   14860:	9909      	ldr	r1, [sp, #36]	; 0x24
   14862:	2900      	cmp	r1, #0
   14864:	f000 827e 	beq.w	14d64 <_dtoa_r+0xc7c>
   14868:	f1b9 0f00 	cmp.w	r9, #0
   1486c:	f2c0 8183 	blt.w	14b76 <_dtoa_r+0xa8e>
   14870:	9901      	ldr	r1, [sp, #4]
   14872:	ea49 0901 	orr.w	r9, r9, r1
   14876:	990a      	ldr	r1, [sp, #40]	; 0x28
   14878:	ea51 0909 	orrs.w	r9, r1, r9
   1487c:	f000 817b 	beq.w	14b76 <_dtoa_r+0xa8e>
   14880:	2a00      	cmp	r2, #0
   14882:	f300 81c6 	bgt.w	14c12 <_dtoa_r+0xb2a>
   14886:	9a08      	ldr	r2, [sp, #32]
   14888:	703b      	strb	r3, [r7, #0]
   1488a:	f107 0901 	add.w	r9, r7, #1
   1488e:	4297      	cmp	r7, r2
   14890:	46cb      	mov	fp, r9
   14892:	f000 81c4 	beq.w	14c1e <_dtoa_r+0xb36>
   14896:	4629      	mov	r1, r5
   14898:	2300      	movs	r3, #0
   1489a:	220a      	movs	r2, #10
   1489c:	4620      	mov	r0, r4
   1489e:	f7fc ffdb 	bl	11858 <__multadd>
   148a2:	4546      	cmp	r6, r8
   148a4:	4605      	mov	r5, r0
   148a6:	4631      	mov	r1, r6
   148a8:	f04f 0300 	mov.w	r3, #0
   148ac:	f04f 020a 	mov.w	r2, #10
   148b0:	4620      	mov	r0, r4
   148b2:	d012      	beq.n	148da <_dtoa_r+0x7f2>
   148b4:	f7fc ffd0 	bl	11858 <__multadd>
   148b8:	4641      	mov	r1, r8
   148ba:	4606      	mov	r6, r0
   148bc:	2300      	movs	r3, #0
   148be:	220a      	movs	r2, #10
   148c0:	4620      	mov	r0, r4
   148c2:	f7fc ffc9 	bl	11858 <__multadd>
   148c6:	464f      	mov	r7, r9
   148c8:	4680      	mov	r8, r0
   148ca:	e7a7      	b.n	1481c <_dtoa_r+0x734>
   148cc:	4620      	mov	r0, r4
   148ce:	9302      	str	r3, [sp, #8]
   148d0:	f7fc ffb8 	bl	11844 <_Bfree>
   148d4:	9b02      	ldr	r3, [sp, #8]
   148d6:	2201      	movs	r2, #1
   148d8:	e7c6      	b.n	14868 <_dtoa_r+0x780>
   148da:	f7fc ffbd 	bl	11858 <__multadd>
   148de:	464f      	mov	r7, r9
   148e0:	4606      	mov	r6, r0
   148e2:	4680      	mov	r8, r0
   148e4:	e79a      	b.n	1481c <_dtoa_r+0x734>
   148e6:	9b01      	ldr	r3, [sp, #4]
   148e8:	2b02      	cmp	r3, #2
   148ea:	dc71      	bgt.n	149d0 <_dtoa_r+0x8e8>
   148ec:	9b07      	ldr	r3, [sp, #28]
   148ee:	2b00      	cmp	r3, #0
   148f0:	f47f af7b 	bne.w	147ea <_dtoa_r+0x702>
   148f4:	9b04      	ldr	r3, [sp, #16]
   148f6:	4651      	mov	r1, sl
   148f8:	3301      	adds	r3, #1
   148fa:	4628      	mov	r0, r5
   148fc:	9304      	str	r3, [sp, #16]
   148fe:	f7ff fb5d 	bl	13fbc <quorem>
   14902:	f8dd b000 	ldr.w	fp, [sp]
   14906:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1490a:	f80b 3b01 	strb.w	r3, [fp], #1
   1490e:	2700      	movs	r7, #0
   14910:	e6eb      	b.n	146ea <_dtoa_r+0x602>
   14912:	4651      	mov	r1, sl
   14914:	4628      	mov	r0, r5
   14916:	f7fd f9f5 	bl	11d04 <__mcmp>
   1491a:	2800      	cmp	r0, #0
   1491c:	f6bf aeba 	bge.w	14694 <_dtoa_r+0x5ac>
   14920:	4629      	mov	r1, r5
   14922:	2300      	movs	r3, #0
   14924:	220a      	movs	r2, #10
   14926:	4620      	mov	r0, r4
   14928:	f7fc ff96 	bl	11858 <__multadd>
   1492c:	9b04      	ldr	r3, [sp, #16]
   1492e:	1e5f      	subs	r7, r3, #1
   14930:	9b07      	ldr	r3, [sp, #28]
   14932:	4605      	mov	r5, r0
   14934:	2b00      	cmp	r3, #0
   14936:	f47f af4b 	bne.w	147d0 <_dtoa_r+0x6e8>
   1493a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1493c:	2b00      	cmp	r3, #0
   1493e:	f340 8218 	ble.w	14d72 <_dtoa_r+0xc8a>
   14942:	4699      	mov	r9, r3
   14944:	e6b1      	b.n	146aa <_dtoa_r+0x5c2>
   14946:	4bbc      	ldr	r3, [pc, #752]	; (14c38 <_dtoa_r+0xb50>)
   14948:	9300      	str	r3, [sp, #0]
   1494a:	3303      	adds	r3, #3
   1494c:	e4a4      	b.n	14298 <_dtoa_r+0x1b0>
   1494e:	201c      	movs	r0, #28
   14950:	e712      	b.n	14778 <_dtoa_r+0x690>
   14952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14956:	2800      	cmp	r0, #0
   14958:	f47f ae74 	bne.w	14644 <_dtoa_r+0x55c>
   1495c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14960:	2a00      	cmp	r2, #0
   14962:	f000 80f4 	beq.w	14b4e <_dtoa_r+0xa66>
   14966:	9b02      	ldr	r3, [sp, #8]
   14968:	9308      	str	r3, [sp, #32]
   1496a:	e66d      	b.n	14648 <_dtoa_r+0x560>
   1496c:	2301      	movs	r3, #1
   1496e:	9307      	str	r3, [sp, #28]
   14970:	9b04      	ldr	r3, [sp, #16]
   14972:	445b      	add	r3, fp
   14974:	f103 0901 	add.w	r9, r3, #1
   14978:	f1b9 0f01 	cmp.w	r9, #1
   1497c:	46cc      	mov	ip, r9
   1497e:	930b      	str	r3, [sp, #44]	; 0x2c
   14980:	bfb8      	it	lt
   14982:	f04f 0c01 	movlt.w	ip, #1
   14986:	2100      	movs	r1, #0
   14988:	f1bc 0f17 	cmp.w	ip, #23
   1498c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1498e:	f77f acbc 	ble.w	1430a <_dtoa_r+0x222>
   14992:	2001      	movs	r0, #1
   14994:	2204      	movs	r2, #4
   14996:	0052      	lsls	r2, r2, #1
   14998:	f102 0314 	add.w	r3, r2, #20
   1499c:	4563      	cmp	r3, ip
   1499e:	4601      	mov	r1, r0
   149a0:	f100 0001 	add.w	r0, r0, #1
   149a4:	d9f7      	bls.n	14996 <_dtoa_r+0x8ae>
   149a6:	63e1      	str	r1, [r4, #60]	; 0x3c
   149a8:	e4af      	b.n	1430a <_dtoa_r+0x222>
   149aa:	2301      	movs	r3, #1
   149ac:	9307      	str	r3, [sp, #28]
   149ae:	f1bb 0f00 	cmp.w	fp, #0
   149b2:	dd52      	ble.n	14a5a <_dtoa_r+0x972>
   149b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   149b8:	46d9      	mov	r9, fp
   149ba:	46dc      	mov	ip, fp
   149bc:	e7e3      	b.n	14986 <_dtoa_r+0x89e>
   149be:	2300      	movs	r3, #0
   149c0:	9307      	str	r3, [sp, #28]
   149c2:	e7d5      	b.n	14970 <_dtoa_r+0x888>
   149c4:	2300      	movs	r3, #0
   149c6:	9307      	str	r3, [sp, #28]
   149c8:	e7f1      	b.n	149ae <_dtoa_r+0x8c6>
   149ca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   149ce:	9704      	str	r7, [sp, #16]
   149d0:	f1b9 0f00 	cmp.w	r9, #0
   149d4:	f47f ada1 	bne.w	1451a <_dtoa_r+0x432>
   149d8:	4651      	mov	r1, sl
   149da:	464b      	mov	r3, r9
   149dc:	2205      	movs	r2, #5
   149de:	4620      	mov	r0, r4
   149e0:	f7fc ff3a 	bl	11858 <__multadd>
   149e4:	4601      	mov	r1, r0
   149e6:	4682      	mov	sl, r0
   149e8:	4628      	mov	r0, r5
   149ea:	f7fd f98b 	bl	11d04 <__mcmp>
   149ee:	2800      	cmp	r0, #0
   149f0:	f77f ad93 	ble.w	1451a <_dtoa_r+0x432>
   149f4:	9b04      	ldr	r3, [sp, #16]
   149f6:	f103 0b01 	add.w	fp, r3, #1
   149fa:	9b00      	ldr	r3, [sp, #0]
   149fc:	2231      	movs	r2, #49	; 0x31
   149fe:	4698      	mov	r8, r3
   14a00:	f803 2b01 	strb.w	r2, [r3], #1
   14a04:	9300      	str	r3, [sp, #0]
   14a06:	4651      	mov	r1, sl
   14a08:	4620      	mov	r0, r4
   14a0a:	f7fc ff1b 	bl	11844 <_Bfree>
   14a0e:	f10b 0301 	add.w	r3, fp, #1
   14a12:	f8dd 9000 	ldr.w	r9, [sp]
   14a16:	9304      	str	r3, [sp, #16]
   14a18:	f8cd 8000 	str.w	r8, [sp]
   14a1c:	2e00      	cmp	r6, #0
   14a1e:	f47f ae8f 	bne.w	14740 <_dtoa_r+0x658>
   14a22:	e691      	b.n	14748 <_dtoa_r+0x660>
   14a24:	eba3 0a0a 	sub.w	sl, r3, sl
   14a28:	e5c5      	b.n	145b6 <_dtoa_r+0x4ce>
   14a2a:	4631      	mov	r1, r6
   14a2c:	4652      	mov	r2, sl
   14a2e:	4620      	mov	r0, r4
   14a30:	f7fd f890 	bl	11b54 <__pow5mult>
   14a34:	462a      	mov	r2, r5
   14a36:	4601      	mov	r1, r0
   14a38:	4606      	mov	r6, r0
   14a3a:	4620      	mov	r0, r4
   14a3c:	f7fc ffdc 	bl	119f8 <__multiply>
   14a40:	4629      	mov	r1, r5
   14a42:	4605      	mov	r5, r0
   14a44:	4620      	mov	r0, r4
   14a46:	f7fc fefd 	bl	11844 <_Bfree>
   14a4a:	e5ea      	b.n	14622 <_dtoa_r+0x53a>
   14a4c:	2002      	movs	r0, #2
   14a4e:	eeb0 5b48 	vmov.f64	d5, d8
   14a52:	e481      	b.n	14358 <_dtoa_r+0x270>
   14a54:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   14a58:	e68e      	b.n	14778 <_dtoa_r+0x690>
   14a5a:	f04f 0b01 	mov.w	fp, #1
   14a5e:	46d9      	mov	r9, fp
   14a60:	e44f      	b.n	14302 <_dtoa_r+0x21a>
   14a62:	d103      	bne.n	14a6c <_dtoa_r+0x984>
   14a64:	9b01      	ldr	r3, [sp, #4]
   14a66:	07db      	lsls	r3, r3, #31
   14a68:	f53f ae4c 	bmi.w	14704 <_dtoa_r+0x61c>
   14a6c:	46d9      	mov	r9, fp
   14a6e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   14a72:	2b30      	cmp	r3, #48	; 0x30
   14a74:	d0fa      	beq.n	14a6c <_dtoa_r+0x984>
   14a76:	e657      	b.n	14728 <_dtoa_r+0x640>
   14a78:	9b04      	ldr	r3, [sp, #16]
   14a7a:	9a00      	ldr	r2, [sp, #0]
   14a7c:	3301      	adds	r3, #1
   14a7e:	9304      	str	r3, [sp, #16]
   14a80:	2331      	movs	r3, #49	; 0x31
   14a82:	7013      	strb	r3, [r2, #0]
   14a84:	e650      	b.n	14728 <_dtoa_r+0x640>
   14a86:	f1ba 0f00 	cmp.w	sl, #0
   14a8a:	f000 8123 	beq.w	14cd4 <_dtoa_r+0xbec>
   14a8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   14a92:	9b06      	ldr	r3, [sp, #24]
   14a94:	9309      	str	r3, [sp, #36]	; 0x24
   14a96:	4413      	add	r3, r2
   14a98:	f8dd a020 	ldr.w	sl, [sp, #32]
   14a9c:	9306      	str	r3, [sp, #24]
   14a9e:	4490      	add	r8, r2
   14aa0:	e592      	b.n	145c8 <_dtoa_r+0x4e0>
   14aa2:	ee07 0a90 	vmov	s15, r0
   14aa6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   14aaa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   14aae:	eea6 5b07 	vfma.f64	d5, d6, d7
   14ab2:	ee15 2a90 	vmov	r2, s11
   14ab6:	ec51 0b15 	vmov	r0, r1, d5
   14aba:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   14abe:	ec41 0b15 	vmov	d5, r0, r1
   14ac2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   14ac6:	ee36 7b47 	vsub.f64	d7, d6, d7
   14aca:	eeb4 7bc5 	vcmpe.f64	d7, d5
   14ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14ad2:	f300 8137 	bgt.w	14d44 <_dtoa_r+0xc5c>
   14ad6:	eeb1 5b45 	vneg.f64	d5, d5
   14ada:	eeb4 7bc5 	vcmpe.f64	d7, d5
   14ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14ae2:	f57f acfb 	bpl.w	144dc <_dtoa_r+0x3f4>
   14ae6:	f04f 0a00 	mov.w	sl, #0
   14aea:	4656      	mov	r6, sl
   14aec:	e515      	b.n	1451a <_dtoa_r+0x432>
   14aee:	f000 80f5 	beq.w	14cdc <_dtoa_r+0xbf4>
   14af2:	9b04      	ldr	r3, [sp, #16]
   14af4:	4951      	ldr	r1, [pc, #324]	; (14c3c <_dtoa_r+0xb54>)
   14af6:	425a      	negs	r2, r3
   14af8:	f002 000f 	and.w	r0, r2, #15
   14afc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   14b00:	ed91 6b00 	vldr	d6, [r1]
   14b04:	1112      	asrs	r2, r2, #4
   14b06:	ee28 6b06 	vmul.f64	d6, d8, d6
   14b0a:	f000 8142 	beq.w	14d92 <_dtoa_r+0xcaa>
   14b0e:	eeb0 7b46 	vmov.f64	d7, d6
   14b12:	494b      	ldr	r1, [pc, #300]	; (14c40 <_dtoa_r+0xb58>)
   14b14:	2600      	movs	r6, #0
   14b16:	2002      	movs	r0, #2
   14b18:	07d3      	lsls	r3, r2, #31
   14b1a:	d505      	bpl.n	14b28 <_dtoa_r+0xa40>
   14b1c:	ed91 5b00 	vldr	d5, [r1]
   14b20:	3001      	adds	r0, #1
   14b22:	2601      	movs	r6, #1
   14b24:	ee27 7b05 	vmul.f64	d7, d7, d5
   14b28:	1052      	asrs	r2, r2, #1
   14b2a:	f101 0108 	add.w	r1, r1, #8
   14b2e:	d1f3      	bne.n	14b18 <_dtoa_r+0xa30>
   14b30:	2e00      	cmp	r6, #0
   14b32:	fe06 6b07 	vseleq.f64	d6, d6, d7
   14b36:	e41e      	b.n	14376 <_dtoa_r+0x28e>
   14b38:	9b02      	ldr	r3, [sp, #8]
   14b3a:	2b00      	cmp	r3, #0
   14b3c:	f47f ae37 	bne.w	147ae <_dtoa_r+0x6c6>
   14b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   14b44:	f3c1 0213 	ubfx	r2, r1, #0, #20
   14b48:	2a00      	cmp	r2, #0
   14b4a:	f040 8137 	bne.w	14dbc <_dtoa_r+0xcd4>
   14b4e:	4a3d      	ldr	r2, [pc, #244]	; (14c44 <_dtoa_r+0xb5c>)
   14b50:	400a      	ands	r2, r1
   14b52:	2a00      	cmp	r2, #0
   14b54:	f000 80fa 	beq.w	14d4c <_dtoa_r+0xc64>
   14b58:	9b06      	ldr	r3, [sp, #24]
   14b5a:	3301      	adds	r3, #1
   14b5c:	9306      	str	r3, [sp, #24]
   14b5e:	2301      	movs	r3, #1
   14b60:	f108 0801 	add.w	r8, r8, #1
   14b64:	9308      	str	r3, [sp, #32]
   14b66:	e56f      	b.n	14648 <_dtoa_r+0x560>
   14b68:	4629      	mov	r1, r5
   14b6a:	9a08      	ldr	r2, [sp, #32]
   14b6c:	4620      	mov	r0, r4
   14b6e:	f7fc fff1 	bl	11b54 <__pow5mult>
   14b72:	4605      	mov	r5, r0
   14b74:	e55a      	b.n	1462c <_dtoa_r+0x544>
   14b76:	2a00      	cmp	r2, #0
   14b78:	dd12      	ble.n	14ba0 <_dtoa_r+0xab8>
   14b7a:	4629      	mov	r1, r5
   14b7c:	2201      	movs	r2, #1
   14b7e:	4620      	mov	r0, r4
   14b80:	9301      	str	r3, [sp, #4]
   14b82:	f7fd f847 	bl	11c14 <__lshift>
   14b86:	4651      	mov	r1, sl
   14b88:	4605      	mov	r5, r0
   14b8a:	f7fd f8bb 	bl	11d04 <__mcmp>
   14b8e:	2800      	cmp	r0, #0
   14b90:	9b01      	ldr	r3, [sp, #4]
   14b92:	f340 80e1 	ble.w	14d58 <_dtoa_r+0xc70>
   14b96:	2b39      	cmp	r3, #57	; 0x39
   14b98:	f000 80ca 	beq.w	14d30 <_dtoa_r+0xc48>
   14b9c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   14ba0:	46b9      	mov	r9, r7
   14ba2:	f809 3b01 	strb.w	r3, [r9], #1
   14ba6:	9b04      	ldr	r3, [sp, #16]
   14ba8:	3301      	adds	r3, #1
   14baa:	4637      	mov	r7, r6
   14bac:	9304      	str	r3, [sp, #16]
   14bae:	4646      	mov	r6, r8
   14bb0:	e5ba      	b.n	14728 <_dtoa_r+0x640>
   14bb2:	ee38 8b08 	vadd.f64	d8, d8, d8
   14bb6:	eeb4 8bc6 	vcmpe.f64	d8, d6
   14bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14bbe:	dc0a      	bgt.n	14bd6 <_dtoa_r+0xaee>
   14bc0:	eeb4 8b46 	vcmp.f64	d8, d6
   14bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14bc8:	f47f acdc 	bne.w	14584 <_dtoa_r+0x49c>
   14bcc:	ee17 3a10 	vmov	r3, s14
   14bd0:	07d8      	lsls	r0, r3, #31
   14bd2:	f57f acd7 	bpl.w	14584 <_dtoa_r+0x49c>
   14bd6:	9a00      	ldr	r2, [sp, #0]
   14bd8:	e454      	b.n	14484 <_dtoa_r+0x39c>
   14bda:	6871      	ldr	r1, [r6, #4]
   14bdc:	4620      	mov	r0, r4
   14bde:	f7fc fe0b 	bl	117f8 <_Balloc>
   14be2:	4607      	mov	r7, r0
   14be4:	2800      	cmp	r0, #0
   14be6:	f000 80de 	beq.w	14da6 <_dtoa_r+0xcbe>
   14bea:	6933      	ldr	r3, [r6, #16]
   14bec:	3302      	adds	r3, #2
   14bee:	009a      	lsls	r2, r3, #2
   14bf0:	f106 010c 	add.w	r1, r6, #12
   14bf4:	300c      	adds	r0, #12
   14bf6:	f7f8 fc3b 	bl	d470 <memcpy>
   14bfa:	4639      	mov	r1, r7
   14bfc:	2201      	movs	r2, #1
   14bfe:	4620      	mov	r0, r4
   14c00:	f7fd f808 	bl	11c14 <__lshift>
   14c04:	4680      	mov	r8, r0
   14c06:	e5fe      	b.n	14806 <_dtoa_r+0x71e>
   14c08:	9b06      	ldr	r3, [sp, #24]
   14c0a:	eba3 0309 	sub.w	r3, r3, r9
   14c0e:	9309      	str	r3, [sp, #36]	; 0x24
   14c10:	e4da      	b.n	145c8 <_dtoa_r+0x4e0>
   14c12:	2b39      	cmp	r3, #57	; 0x39
   14c14:	f000 808c 	beq.w	14d30 <_dtoa_r+0xc48>
   14c18:	46b9      	mov	r9, r7
   14c1a:	3301      	adds	r3, #1
   14c1c:	e7c1      	b.n	14ba2 <_dtoa_r+0xaba>
   14c1e:	9a04      	ldr	r2, [sp, #16]
   14c20:	3201      	adds	r2, #1
   14c22:	4637      	mov	r7, r6
   14c24:	9204      	str	r2, [sp, #16]
   14c26:	4646      	mov	r6, r8
   14c28:	e55f      	b.n	146ea <_dtoa_r+0x602>
   14c2a:	4629      	mov	r1, r5
   14c2c:	4620      	mov	r0, r4
   14c2e:	f7fc ff91 	bl	11b54 <__pow5mult>
   14c32:	4605      	mov	r5, r0
   14c34:	e4fa      	b.n	1462c <_dtoa_r+0x544>
   14c36:	bf00      	nop
   14c38:	20002824 	.word	0x20002824
   14c3c:	20000b58 	.word	0x20000b58
   14c40:	20000b30 	.word	0x20000b30
   14c44:	7ff00000 	.word	0x7ff00000
   14c48:	4b5e      	ldr	r3, [pc, #376]	; (14dc4 <_dtoa_r+0xcdc>)
   14c4a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   14c4e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   14c52:	ed1c 3b02 	vldr	d3, [ip, #-8]
   14c56:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   14c5a:	ee36 7b47 	vsub.f64	d7, d6, d7
   14c5e:	ec41 0b16 	vmov	d6, r0, r1
   14c62:	ee15 1a90 	vmov	r1, s11
   14c66:	ee23 3b06 	vmul.f64	d3, d3, d6
   14c6a:	9800      	ldr	r0, [sp, #0]
   14c6c:	3130      	adds	r1, #48	; 0x30
   14c6e:	2a01      	cmp	r2, #1
   14c70:	f800 1b01 	strb.w	r1, [r0], #1
   14c74:	f000 8083 	beq.w	14d7e <_dtoa_r+0xc96>
   14c78:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14c7c:	9b00      	ldr	r3, [sp, #0]
   14c7e:	1899      	adds	r1, r3, r2
   14c80:	ee27 7b04 	vmul.f64	d7, d7, d4
   14c84:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   14c88:	ee16 3a90 	vmov	r3, s13
   14c8c:	3330      	adds	r3, #48	; 0x30
   14c8e:	f800 3b01 	strb.w	r3, [r0], #1
   14c92:	4281      	cmp	r1, r0
   14c94:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   14c98:	ee37 7b45 	vsub.f64	d7, d7, d5
   14c9c:	d1f0      	bne.n	14c80 <_dtoa_r+0xb98>
   14c9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14ca2:	ee33 5b06 	vadd.f64	d5, d3, d6
   14ca6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   14caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14cae:	f53f abe3 	bmi.w	14478 <_dtoa_r+0x390>
   14cb2:	ee36 6b43 	vsub.f64	d6, d6, d3
   14cb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   14cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14cbe:	f77f ac0d 	ble.w	144dc <_dtoa_r+0x3f4>
   14cc2:	4689      	mov	r9, r1
   14cc4:	3901      	subs	r1, #1
   14cc6:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   14cca:	2b30      	cmp	r3, #48	; 0x30
   14ccc:	d0f9      	beq.n	14cc2 <_dtoa_r+0xbda>
   14cce:	1c73      	adds	r3, r6, #1
   14cd0:	9304      	str	r3, [sp, #16]
   14cd2:	e539      	b.n	14748 <_dtoa_r+0x660>
   14cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14cd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   14cda:	e6da      	b.n	14a92 <_dtoa_r+0x9aa>
   14cdc:	2002      	movs	r0, #2
   14cde:	eeb0 6b48 	vmov.f64	d6, d8
   14ce2:	f7ff bb48 	b.w	14376 <_dtoa_r+0x28e>
   14ce6:	f1b9 0f00 	cmp.w	r9, #0
   14cea:	f43f aeda 	beq.w	14aa2 <_dtoa_r+0x9ba>
   14cee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14cf0:	2a00      	cmp	r2, #0
   14cf2:	f77f abf3 	ble.w	144dc <_dtoa_r+0x3f4>
   14cf6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   14cfa:	ee26 6b04 	vmul.f64	d6, d6, d4
   14cfe:	3001      	adds	r0, #1
   14d00:	ee07 0a90 	vmov	s15, r0
   14d04:	9b04      	ldr	r3, [sp, #16]
   14d06:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   14d0a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   14d0e:	eea6 7b05 	vfma.f64	d7, d6, d5
   14d12:	ee17 ca90 	vmov	ip, s15
   14d16:	ec51 0b17 	vmov	r0, r1, d7
   14d1a:	1e5e      	subs	r6, r3, #1
   14d1c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   14d20:	f7ff bb47 	b.w	143b2 <_dtoa_r+0x2ca>
   14d24:	9b04      	ldr	r3, [sp, #16]
   14d26:	3301      	adds	r3, #1
   14d28:	9304      	str	r3, [sp, #16]
   14d2a:	2331      	movs	r3, #49	; 0x31
   14d2c:	f7ff bbb1 	b.w	14492 <_dtoa_r+0x3aa>
   14d30:	9b04      	ldr	r3, [sp, #16]
   14d32:	46bb      	mov	fp, r7
   14d34:	3301      	adds	r3, #1
   14d36:	9304      	str	r3, [sp, #16]
   14d38:	2339      	movs	r3, #57	; 0x39
   14d3a:	4637      	mov	r7, r6
   14d3c:	f80b 3b01 	strb.w	r3, [fp], #1
   14d40:	4646      	mov	r6, r8
   14d42:	e4e1      	b.n	14708 <_dtoa_r+0x620>
   14d44:	f04f 0a00 	mov.w	sl, #0
   14d48:	4656      	mov	r6, sl
   14d4a:	e653      	b.n	149f4 <_dtoa_r+0x90c>
   14d4c:	9208      	str	r2, [sp, #32]
   14d4e:	e47b      	b.n	14648 <_dtoa_r+0x560>
   14d50:	1c73      	adds	r3, r6, #1
   14d52:	9304      	str	r3, [sp, #16]
   14d54:	4689      	mov	r9, r1
   14d56:	e4f7      	b.n	14748 <_dtoa_r+0x660>
   14d58:	f47f af22 	bne.w	14ba0 <_dtoa_r+0xab8>
   14d5c:	07da      	lsls	r2, r3, #31
   14d5e:	f57f af1f 	bpl.w	14ba0 <_dtoa_r+0xab8>
   14d62:	e718      	b.n	14b96 <_dtoa_r+0xaae>
   14d64:	2b39      	cmp	r3, #57	; 0x39
   14d66:	d0e3      	beq.n	14d30 <_dtoa_r+0xc48>
   14d68:	f1b9 0f00 	cmp.w	r9, #0
   14d6c:	f73f af16 	bgt.w	14b9c <_dtoa_r+0xab4>
   14d70:	e716      	b.n	14ba0 <_dtoa_r+0xab8>
   14d72:	9b01      	ldr	r3, [sp, #4]
   14d74:	2b02      	cmp	r3, #2
   14d76:	f73f ae28 	bgt.w	149ca <_dtoa_r+0x8e2>
   14d7a:	9704      	str	r7, [sp, #16]
   14d7c:	e5ba      	b.n	148f4 <_dtoa_r+0x80c>
   14d7e:	4601      	mov	r1, r0
   14d80:	e78d      	b.n	14c9e <_dtoa_r+0xbb6>
   14d82:	9b01      	ldr	r3, [sp, #4]
   14d84:	2b02      	cmp	r3, #2
   14d86:	f73f ae20 	bgt.w	149ca <_dtoa_r+0x8e2>
   14d8a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   14d8e:	9704      	str	r7, [sp, #16]
   14d90:	e52b      	b.n	147ea <_dtoa_r+0x702>
   14d92:	2002      	movs	r0, #2
   14d94:	f7ff baef 	b.w	14376 <_dtoa_r+0x28e>
   14d98:	4b0b      	ldr	r3, [pc, #44]	; (14dc8 <_dtoa_r+0xce0>)
   14d9a:	480c      	ldr	r0, [pc, #48]	; (14dcc <_dtoa_r+0xce4>)
   14d9c:	2200      	movs	r2, #0
   14d9e:	f240 11af 	movw	r1, #431	; 0x1af
   14da2:	f7fc fc0f 	bl	115c4 <__assert_func>
   14da6:	4b08      	ldr	r3, [pc, #32]	; (14dc8 <_dtoa_r+0xce0>)
   14da8:	4808      	ldr	r0, [pc, #32]	; (14dcc <_dtoa_r+0xce4>)
   14daa:	463a      	mov	r2, r7
   14dac:	f240 21ef 	movw	r1, #751	; 0x2ef
   14db0:	f7fc fc08 	bl	115c4 <__assert_func>
   14db4:	4b06      	ldr	r3, [pc, #24]	; (14dd0 <_dtoa_r+0xce8>)
   14db6:	9300      	str	r3, [sp, #0]
   14db8:	f7ff b9d2 	b.w	14160 <_dtoa_r+0x78>
   14dbc:	9b02      	ldr	r3, [sp, #8]
   14dbe:	9308      	str	r3, [sp, #32]
   14dc0:	e4f7      	b.n	147b2 <_dtoa_r+0x6ca>
   14dc2:	bf00      	nop
   14dc4:	20000b58 	.word	0x20000b58
   14dc8:	2000267c 	.word	0x2000267c
   14dcc:	20002828 	.word	0x20002828
   14dd0:	20002818 	.word	0x20002818

00014dd4 <_close_r>:
   14dd4:	b538      	push	{r3, r4, r5, lr}
   14dd6:	4d07      	ldr	r5, [pc, #28]	; (14df4 <_close_r+0x20>)
   14dd8:	2200      	movs	r2, #0
   14dda:	4604      	mov	r4, r0
   14ddc:	4608      	mov	r0, r1
   14dde:	602a      	str	r2, [r5, #0]
   14de0:	f7f9 f952 	bl	e088 <_close>
   14de4:	1c43      	adds	r3, r0, #1
   14de6:	d000      	beq.n	14dea <_close_r+0x16>
   14de8:	bd38      	pop	{r3, r4, r5, pc}
   14dea:	682b      	ldr	r3, [r5, #0]
   14dec:	2b00      	cmp	r3, #0
   14dee:	d0fb      	beq.n	14de8 <_close_r+0x14>
   14df0:	6023      	str	r3, [r4, #0]
   14df2:	bd38      	pop	{r3, r4, r5, pc}
   14df4:	20005098 	.word	0x20005098

00014df8 <__sflush_r>:
   14df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   14dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e00:	460c      	mov	r4, r1
   14e02:	0711      	lsls	r1, r2, #28
   14e04:	4680      	mov	r8, r0
   14e06:	d447      	bmi.n	14e98 <__sflush_r+0xa0>
   14e08:	6863      	ldr	r3, [r4, #4]
   14e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   14e0e:	2b00      	cmp	r3, #0
   14e10:	81a2      	strh	r2, [r4, #12]
   14e12:	dd5e      	ble.n	14ed2 <__sflush_r+0xda>
   14e14:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14e16:	2d00      	cmp	r5, #0
   14e18:	d058      	beq.n	14ecc <__sflush_r+0xd4>
   14e1a:	2300      	movs	r3, #0
   14e1c:	f8d8 6000 	ldr.w	r6, [r8]
   14e20:	f8c8 3000 	str.w	r3, [r8]
   14e24:	b293      	uxth	r3, r2
   14e26:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   14e2a:	d156      	bne.n	14eda <__sflush_r+0xe2>
   14e2c:	2301      	movs	r3, #1
   14e2e:	69e1      	ldr	r1, [r4, #28]
   14e30:	4640      	mov	r0, r8
   14e32:	47a8      	blx	r5
   14e34:	1c43      	adds	r3, r0, #1
   14e36:	d067      	beq.n	14f08 <__sflush_r+0x110>
   14e38:	89a3      	ldrh	r3, [r4, #12]
   14e3a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   14e3c:	075f      	lsls	r7, r3, #29
   14e3e:	d505      	bpl.n	14e4c <__sflush_r+0x54>
   14e40:	6863      	ldr	r3, [r4, #4]
   14e42:	1ac0      	subs	r0, r0, r3
   14e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14e46:	b10b      	cbz	r3, 14e4c <__sflush_r+0x54>
   14e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14e4a:	1ac0      	subs	r0, r0, r3
   14e4c:	69e1      	ldr	r1, [r4, #28]
   14e4e:	4602      	mov	r2, r0
   14e50:	2300      	movs	r3, #0
   14e52:	4640      	mov	r0, r8
   14e54:	47a8      	blx	r5
   14e56:	1c41      	adds	r1, r0, #1
   14e58:	d141      	bne.n	14ede <__sflush_r+0xe6>
   14e5a:	f8d8 3000 	ldr.w	r3, [r8]
   14e5e:	2b00      	cmp	r3, #0
   14e60:	d03d      	beq.n	14ede <__sflush_r+0xe6>
   14e62:	2b1d      	cmp	r3, #29
   14e64:	d001      	beq.n	14e6a <__sflush_r+0x72>
   14e66:	2b16      	cmp	r3, #22
   14e68:	d156      	bne.n	14f18 <__sflush_r+0x120>
   14e6a:	89a3      	ldrh	r3, [r4, #12]
   14e6c:	6922      	ldr	r2, [r4, #16]
   14e6e:	6022      	str	r2, [r4, #0]
   14e70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14e74:	2100      	movs	r1, #0
   14e76:	6061      	str	r1, [r4, #4]
   14e78:	81a3      	strh	r3, [r4, #12]
   14e7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14e7c:	f8c8 6000 	str.w	r6, [r8]
   14e80:	b321      	cbz	r1, 14ecc <__sflush_r+0xd4>
   14e82:	f104 0340 	add.w	r3, r4, #64	; 0x40
   14e86:	4299      	cmp	r1, r3
   14e88:	d002      	beq.n	14e90 <__sflush_r+0x98>
   14e8a:	4640      	mov	r0, r8
   14e8c:	f7fd fc82 	bl	12794 <_free_r>
   14e90:	2000      	movs	r0, #0
   14e92:	6320      	str	r0, [r4, #48]	; 0x30
   14e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e98:	6926      	ldr	r6, [r4, #16]
   14e9a:	b1be      	cbz	r6, 14ecc <__sflush_r+0xd4>
   14e9c:	b293      	uxth	r3, r2
   14e9e:	6825      	ldr	r5, [r4, #0]
   14ea0:	6026      	str	r6, [r4, #0]
   14ea2:	079a      	lsls	r2, r3, #30
   14ea4:	bf0c      	ite	eq
   14ea6:	6963      	ldreq	r3, [r4, #20]
   14ea8:	2300      	movne	r3, #0
   14eaa:	1bad      	subs	r5, r5, r6
   14eac:	60a3      	str	r3, [r4, #8]
   14eae:	e00b      	b.n	14ec8 <__sflush_r+0xd0>
   14eb0:	462b      	mov	r3, r5
   14eb2:	4632      	mov	r2, r6
   14eb4:	69e1      	ldr	r1, [r4, #28]
   14eb6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   14eb8:	4640      	mov	r0, r8
   14eba:	47b8      	blx	r7
   14ebc:	f1b0 0c00 	subs.w	ip, r0, #0
   14ec0:	eba5 050c 	sub.w	r5, r5, ip
   14ec4:	4466      	add	r6, ip
   14ec6:	dd17      	ble.n	14ef8 <__sflush_r+0x100>
   14ec8:	2d00      	cmp	r5, #0
   14eca:	dcf1      	bgt.n	14eb0 <__sflush_r+0xb8>
   14ecc:	2000      	movs	r0, #0
   14ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ed2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14ed4:	2b00      	cmp	r3, #0
   14ed6:	dc9d      	bgt.n	14e14 <__sflush_r+0x1c>
   14ed8:	e7f8      	b.n	14ecc <__sflush_r+0xd4>
   14eda:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14edc:	e7ae      	b.n	14e3c <__sflush_r+0x44>
   14ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   14ee2:	6922      	ldr	r2, [r4, #16]
   14ee4:	6022      	str	r2, [r4, #0]
   14ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   14eea:	81a3      	strh	r3, [r4, #12]
   14eec:	2200      	movs	r2, #0
   14eee:	04db      	lsls	r3, r3, #19
   14ef0:	6062      	str	r2, [r4, #4]
   14ef2:	d5c2      	bpl.n	14e7a <__sflush_r+0x82>
   14ef4:	6520      	str	r0, [r4, #80]	; 0x50
   14ef6:	e7c0      	b.n	14e7a <__sflush_r+0x82>
   14ef8:	89a3      	ldrh	r3, [r4, #12]
   14efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14f02:	81a3      	strh	r3, [r4, #12]
   14f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f08:	f8d8 3000 	ldr.w	r3, [r8]
   14f0c:	2b00      	cmp	r3, #0
   14f0e:	d093      	beq.n	14e38 <__sflush_r+0x40>
   14f10:	2b1d      	cmp	r3, #29
   14f12:	d006      	beq.n	14f22 <__sflush_r+0x12a>
   14f14:	2b16      	cmp	r3, #22
   14f16:	d004      	beq.n	14f22 <__sflush_r+0x12a>
   14f18:	89a3      	ldrh	r3, [r4, #12]
   14f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14f1e:	81a3      	strh	r3, [r4, #12]
   14f20:	e7d5      	b.n	14ece <__sflush_r+0xd6>
   14f22:	f8c8 6000 	str.w	r6, [r8]
   14f26:	e7d1      	b.n	14ecc <__sflush_r+0xd4>

00014f28 <_fflush_r>:
   14f28:	b538      	push	{r3, r4, r5, lr}
   14f2a:	460c      	mov	r4, r1
   14f2c:	4605      	mov	r5, r0
   14f2e:	b108      	cbz	r0, 14f34 <_fflush_r+0xc>
   14f30:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14f32:	b303      	cbz	r3, 14f76 <_fflush_r+0x4e>
   14f34:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   14f38:	b188      	cbz	r0, 14f5e <_fflush_r+0x36>
   14f3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14f3c:	07db      	lsls	r3, r3, #31
   14f3e:	d401      	bmi.n	14f44 <_fflush_r+0x1c>
   14f40:	0581      	lsls	r1, r0, #22
   14f42:	d50f      	bpl.n	14f64 <_fflush_r+0x3c>
   14f44:	4628      	mov	r0, r5
   14f46:	4621      	mov	r1, r4
   14f48:	f7ff ff56 	bl	14df8 <__sflush_r>
   14f4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14f4e:	07da      	lsls	r2, r3, #31
   14f50:	4605      	mov	r5, r0
   14f52:	d402      	bmi.n	14f5a <_fflush_r+0x32>
   14f54:	89a3      	ldrh	r3, [r4, #12]
   14f56:	059b      	lsls	r3, r3, #22
   14f58:	d508      	bpl.n	14f6c <_fflush_r+0x44>
   14f5a:	4628      	mov	r0, r5
   14f5c:	bd38      	pop	{r3, r4, r5, pc}
   14f5e:	4605      	mov	r5, r0
   14f60:	4628      	mov	r0, r5
   14f62:	bd38      	pop	{r3, r4, r5, pc}
   14f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14f66:	f7fc fbd3 	bl	11710 <__retarget_lock_acquire_recursive>
   14f6a:	e7eb      	b.n	14f44 <_fflush_r+0x1c>
   14f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14f6e:	f7fc fbd1 	bl	11714 <__retarget_lock_release_recursive>
   14f72:	4628      	mov	r0, r5
   14f74:	bd38      	pop	{r3, r4, r5, pc}
   14f76:	f7fd f8d9 	bl	1212c <__sinit>
   14f7a:	e7db      	b.n	14f34 <_fflush_r+0xc>

00014f7c <_fstat_r>:
   14f7c:	b570      	push	{r4, r5, r6, lr}
   14f7e:	460c      	mov	r4, r1
   14f80:	4d08      	ldr	r5, [pc, #32]	; (14fa4 <_fstat_r+0x28>)
   14f82:	4603      	mov	r3, r0
   14f84:	2600      	movs	r6, #0
   14f86:	4620      	mov	r0, r4
   14f88:	4611      	mov	r1, r2
   14f8a:	461c      	mov	r4, r3
   14f8c:	602e      	str	r6, [r5, #0]
   14f8e:	f7f9 f87e 	bl	e08e <_fstat>
   14f92:	1c43      	adds	r3, r0, #1
   14f94:	d000      	beq.n	14f98 <_fstat_r+0x1c>
   14f96:	bd70      	pop	{r4, r5, r6, pc}
   14f98:	682b      	ldr	r3, [r5, #0]
   14f9a:	2b00      	cmp	r3, #0
   14f9c:	d0fb      	beq.n	14f96 <_fstat_r+0x1a>
   14f9e:	6023      	str	r3, [r4, #0]
   14fa0:	bd70      	pop	{r4, r5, r6, pc}
   14fa2:	bf00      	nop
   14fa4:	20005098 	.word	0x20005098

00014fa8 <_isatty_r>:
   14fa8:	b538      	push	{r3, r4, r5, lr}
   14faa:	4d07      	ldr	r5, [pc, #28]	; (14fc8 <_isatty_r+0x20>)
   14fac:	2200      	movs	r2, #0
   14fae:	4604      	mov	r4, r0
   14fb0:	4608      	mov	r0, r1
   14fb2:	602a      	str	r2, [r5, #0]
   14fb4:	f7f9 f870 	bl	e098 <_isatty>
   14fb8:	1c43      	adds	r3, r0, #1
   14fba:	d000      	beq.n	14fbe <_isatty_r+0x16>
   14fbc:	bd38      	pop	{r3, r4, r5, pc}
   14fbe:	682b      	ldr	r3, [r5, #0]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	d0fb      	beq.n	14fbc <_isatty_r+0x14>
   14fc4:	6023      	str	r3, [r4, #0]
   14fc6:	bd38      	pop	{r3, r4, r5, pc}
   14fc8:	20005098 	.word	0x20005098

00014fcc <_lseek_r>:
   14fcc:	b538      	push	{r3, r4, r5, lr}
   14fce:	460c      	mov	r4, r1
   14fd0:	4d08      	ldr	r5, [pc, #32]	; (14ff4 <_lseek_r+0x28>)
   14fd2:	4684      	mov	ip, r0
   14fd4:	4611      	mov	r1, r2
   14fd6:	4620      	mov	r0, r4
   14fd8:	461a      	mov	r2, r3
   14fda:	2300      	movs	r3, #0
   14fdc:	602b      	str	r3, [r5, #0]
   14fde:	4664      	mov	r4, ip
   14fe0:	f7f9 f85c 	bl	e09c <_lseek>
   14fe4:	1c43      	adds	r3, r0, #1
   14fe6:	d000      	beq.n	14fea <_lseek_r+0x1e>
   14fe8:	bd38      	pop	{r3, r4, r5, pc}
   14fea:	682b      	ldr	r3, [r5, #0]
   14fec:	2b00      	cmp	r3, #0
   14fee:	d0fb      	beq.n	14fe8 <_lseek_r+0x1c>
   14ff0:	6023      	str	r3, [r4, #0]
   14ff2:	bd38      	pop	{r3, r4, r5, pc}
   14ff4:	20005098 	.word	0x20005098

00014ff8 <_read_r>:
   14ff8:	b538      	push	{r3, r4, r5, lr}
   14ffa:	460c      	mov	r4, r1
   14ffc:	4d08      	ldr	r5, [pc, #32]	; (15020 <_read_r+0x28>)
   14ffe:	4684      	mov	ip, r0
   15000:	4611      	mov	r1, r2
   15002:	4620      	mov	r0, r4
   15004:	461a      	mov	r2, r3
   15006:	2300      	movs	r3, #0
   15008:	602b      	str	r3, [r5, #0]
   1500a:	4664      	mov	r4, ip
   1500c:	f7f9 f83a 	bl	e084 <_read>
   15010:	1c43      	adds	r3, r0, #1
   15012:	d000      	beq.n	15016 <_read_r+0x1e>
   15014:	bd38      	pop	{r3, r4, r5, pc}
   15016:	682b      	ldr	r3, [r5, #0]
   15018:	2b00      	cmp	r3, #0
   1501a:	d0fb      	beq.n	15014 <_read_r+0x1c>
   1501c:	6023      	str	r3, [r4, #0]
   1501e:	bd38      	pop	{r3, r4, r5, pc}
   15020:	20005098 	.word	0x20005098

00015024 <__fputwc>:
   15024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15028:	b082      	sub	sp, #8
   1502a:	4682      	mov	sl, r0
   1502c:	4688      	mov	r8, r1
   1502e:	4614      	mov	r4, r2
   15030:	f7fc fb72 	bl	11718 <__locale_mb_cur_max>
   15034:	2801      	cmp	r0, #1
   15036:	d103      	bne.n	15040 <__fputwc+0x1c>
   15038:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1503c:	2bfe      	cmp	r3, #254	; 0xfe
   1503e:	d936      	bls.n	150ae <__fputwc+0x8a>
   15040:	f10d 0904 	add.w	r9, sp, #4
   15044:	4642      	mov	r2, r8
   15046:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1504a:	4649      	mov	r1, r9
   1504c:	4650      	mov	r0, sl
   1504e:	f7fe fe49 	bl	13ce4 <_wcrtomb_r>
   15052:	1c42      	adds	r2, r0, #1
   15054:	4606      	mov	r6, r0
   15056:	d032      	beq.n	150be <__fputwc+0x9a>
   15058:	b320      	cbz	r0, 150a4 <__fputwc+0x80>
   1505a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1505e:	2500      	movs	r5, #0
   15060:	e009      	b.n	15076 <__fputwc+0x52>
   15062:	6823      	ldr	r3, [r4, #0]
   15064:	1c5a      	adds	r2, r3, #1
   15066:	6022      	str	r2, [r4, #0]
   15068:	f883 c000 	strb.w	ip, [r3]
   1506c:	3501      	adds	r5, #1
   1506e:	42b5      	cmp	r5, r6
   15070:	d218      	bcs.n	150a4 <__fputwc+0x80>
   15072:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   15076:	68a3      	ldr	r3, [r4, #8]
   15078:	3b01      	subs	r3, #1
   1507a:	2b00      	cmp	r3, #0
   1507c:	60a3      	str	r3, [r4, #8]
   1507e:	daf0      	bge.n	15062 <__fputwc+0x3e>
   15080:	69a7      	ldr	r7, [r4, #24]
   15082:	42bb      	cmp	r3, r7
   15084:	4661      	mov	r1, ip
   15086:	4622      	mov	r2, r4
   15088:	4650      	mov	r0, sl
   1508a:	db02      	blt.n	15092 <__fputwc+0x6e>
   1508c:	f1bc 0f0a 	cmp.w	ip, #10
   15090:	d1e7      	bne.n	15062 <__fputwc+0x3e>
   15092:	f000 f9cb 	bl	1542c <__swbuf_r>
   15096:	1c43      	adds	r3, r0, #1
   15098:	d1e8      	bne.n	1506c <__fputwc+0x48>
   1509a:	4606      	mov	r6, r0
   1509c:	4630      	mov	r0, r6
   1509e:	b002      	add	sp, #8
   150a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150a4:	4646      	mov	r6, r8
   150a6:	4630      	mov	r0, r6
   150a8:	b002      	add	sp, #8
   150aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150ae:	fa5f fc88 	uxtb.w	ip, r8
   150b2:	f88d c004 	strb.w	ip, [sp, #4]
   150b6:	4606      	mov	r6, r0
   150b8:	f10d 0904 	add.w	r9, sp, #4
   150bc:	e7cf      	b.n	1505e <__fputwc+0x3a>
   150be:	89a3      	ldrh	r3, [r4, #12]
   150c0:	4630      	mov	r0, r6
   150c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   150c6:	81a3      	strh	r3, [r4, #12]
   150c8:	b002      	add	sp, #8
   150ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   150ce:	bf00      	nop

000150d0 <_fputwc_r>:
   150d0:	b530      	push	{r4, r5, lr}
   150d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   150d4:	f013 0f01 	tst.w	r3, #1
   150d8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   150dc:	4614      	mov	r4, r2
   150de:	b083      	sub	sp, #12
   150e0:	4605      	mov	r5, r0
   150e2:	b29a      	uxth	r2, r3
   150e4:	d101      	bne.n	150ea <_fputwc_r+0x1a>
   150e6:	0598      	lsls	r0, r3, #22
   150e8:	d51c      	bpl.n	15124 <_fputwc_r+0x54>
   150ea:	0490      	lsls	r0, r2, #18
   150ec:	d406      	bmi.n	150fc <_fputwc_r+0x2c>
   150ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   150f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   150f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   150f8:	81a3      	strh	r3, [r4, #12]
   150fa:	6662      	str	r2, [r4, #100]	; 0x64
   150fc:	4622      	mov	r2, r4
   150fe:	4628      	mov	r0, r5
   15100:	f7ff ff90 	bl	15024 <__fputwc>
   15104:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15106:	07da      	lsls	r2, r3, #31
   15108:	4605      	mov	r5, r0
   1510a:	d402      	bmi.n	15112 <_fputwc_r+0x42>
   1510c:	89a3      	ldrh	r3, [r4, #12]
   1510e:	059b      	lsls	r3, r3, #22
   15110:	d502      	bpl.n	15118 <_fputwc_r+0x48>
   15112:	4628      	mov	r0, r5
   15114:	b003      	add	sp, #12
   15116:	bd30      	pop	{r4, r5, pc}
   15118:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1511a:	f7fc fafb 	bl	11714 <__retarget_lock_release_recursive>
   1511e:	4628      	mov	r0, r5
   15120:	b003      	add	sp, #12
   15122:	bd30      	pop	{r4, r5, pc}
   15124:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15126:	9101      	str	r1, [sp, #4]
   15128:	f7fc faf2 	bl	11710 <__retarget_lock_acquire_recursive>
   1512c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15130:	9901      	ldr	r1, [sp, #4]
   15132:	b29a      	uxth	r2, r3
   15134:	e7d9      	b.n	150ea <_fputwc_r+0x1a>
   15136:	bf00      	nop

00015138 <__sfvwrite_r>:
   15138:	6893      	ldr	r3, [r2, #8]
   1513a:	2b00      	cmp	r3, #0
   1513c:	f000 8085 	beq.w	1524a <__sfvwrite_r+0x112>
   15140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15144:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   15148:	460c      	mov	r4, r1
   1514a:	0719      	lsls	r1, r3, #28
   1514c:	4680      	mov	r8, r0
   1514e:	b083      	sub	sp, #12
   15150:	4617      	mov	r7, r2
   15152:	b298      	uxth	r0, r3
   15154:	d525      	bpl.n	151a2 <__sfvwrite_r+0x6a>
   15156:	6923      	ldr	r3, [r4, #16]
   15158:	b31b      	cbz	r3, 151a2 <__sfvwrite_r+0x6a>
   1515a:	f010 0302 	ands.w	r3, r0, #2
   1515e:	683d      	ldr	r5, [r7, #0]
   15160:	d02d      	beq.n	151be <__sfvwrite_r+0x86>
   15162:	f04f 0a00 	mov.w	sl, #0
   15166:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 15428 <__sfvwrite_r+0x2f0>
   1516a:	4656      	mov	r6, sl
   1516c:	46b9      	mov	r9, r7
   1516e:	455e      	cmp	r6, fp
   15170:	4633      	mov	r3, r6
   15172:	4652      	mov	r2, sl
   15174:	bf28      	it	cs
   15176:	465b      	movcs	r3, fp
   15178:	4640      	mov	r0, r8
   1517a:	2e00      	cmp	r6, #0
   1517c:	d052      	beq.n	15224 <__sfvwrite_r+0xec>
   1517e:	69e1      	ldr	r1, [r4, #28]
   15180:	6a67      	ldr	r7, [r4, #36]	; 0x24
   15182:	47b8      	blx	r7
   15184:	2800      	cmp	r0, #0
   15186:	dd56      	ble.n	15236 <__sfvwrite_r+0xfe>
   15188:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1518c:	1a1b      	subs	r3, r3, r0
   1518e:	4482      	add	sl, r0
   15190:	1a36      	subs	r6, r6, r0
   15192:	f8c9 3008 	str.w	r3, [r9, #8]
   15196:	2b00      	cmp	r3, #0
   15198:	d1e9      	bne.n	1516e <__sfvwrite_r+0x36>
   1519a:	2000      	movs	r0, #0
   1519c:	b003      	add	sp, #12
   1519e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a2:	4621      	mov	r1, r4
   151a4:	4640      	mov	r0, r8
   151a6:	f7fe fe2b 	bl	13e00 <__swsetup_r>
   151aa:	2800      	cmp	r0, #0
   151ac:	f040 8138 	bne.w	15420 <__sfvwrite_r+0x2e8>
   151b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   151b4:	683d      	ldr	r5, [r7, #0]
   151b6:	b298      	uxth	r0, r3
   151b8:	f010 0302 	ands.w	r3, r0, #2
   151bc:	d1d1      	bne.n	15162 <__sfvwrite_r+0x2a>
   151be:	f010 0901 	ands.w	r9, r0, #1
   151c2:	d144      	bne.n	1524e <__sfvwrite_r+0x116>
   151c4:	464e      	mov	r6, r9
   151c6:	9700      	str	r7, [sp, #0]
   151c8:	b346      	cbz	r6, 1521c <__sfvwrite_r+0xe4>
   151ca:	0582      	lsls	r2, r0, #22
   151cc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   151d0:	f140 8085 	bpl.w	152de <__sfvwrite_r+0x1a6>
   151d4:	45b3      	cmp	fp, r6
   151d6:	465a      	mov	r2, fp
   151d8:	f200 80b4 	bhi.w	15344 <__sfvwrite_r+0x20c>
   151dc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   151e0:	f040 80c1 	bne.w	15366 <__sfvwrite_r+0x22e>
   151e4:	6820      	ldr	r0, [r4, #0]
   151e6:	9201      	str	r2, [sp, #4]
   151e8:	4649      	mov	r1, r9
   151ea:	f7fc f96f 	bl	114cc <memmove>
   151ee:	68a3      	ldr	r3, [r4, #8]
   151f0:	9a01      	ldr	r2, [sp, #4]
   151f2:	eba3 010b 	sub.w	r1, r3, fp
   151f6:	6823      	ldr	r3, [r4, #0]
   151f8:	60a1      	str	r1, [r4, #8]
   151fa:	4413      	add	r3, r2
   151fc:	46b2      	mov	sl, r6
   151fe:	6023      	str	r3, [r4, #0]
   15200:	2600      	movs	r6, #0
   15202:	9a00      	ldr	r2, [sp, #0]
   15204:	6893      	ldr	r3, [r2, #8]
   15206:	eba3 030a 	sub.w	r3, r3, sl
   1520a:	44d1      	add	r9, sl
   1520c:	6093      	str	r3, [r2, #8]
   1520e:	2b00      	cmp	r3, #0
   15210:	d0c3      	beq.n	1519a <__sfvwrite_r+0x62>
   15212:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   15216:	b280      	uxth	r0, r0
   15218:	2e00      	cmp	r6, #0
   1521a:	d1d6      	bne.n	151ca <__sfvwrite_r+0x92>
   1521c:	e9d5 9600 	ldrd	r9, r6, [r5]
   15220:	3508      	adds	r5, #8
   15222:	e7d1      	b.n	151c8 <__sfvwrite_r+0x90>
   15224:	e9d5 a600 	ldrd	sl, r6, [r5]
   15228:	3508      	adds	r5, #8
   1522a:	e7a0      	b.n	1516e <__sfvwrite_r+0x36>
   1522c:	4621      	mov	r1, r4
   1522e:	4640      	mov	r0, r8
   15230:	f7ff fe7a 	bl	14f28 <_fflush_r>
   15234:	b388      	cbz	r0, 1529a <__sfvwrite_r+0x162>
   15236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1523a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1523e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15242:	81a3      	strh	r3, [r4, #12]
   15244:	b003      	add	sp, #12
   15246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1524a:	2000      	movs	r0, #0
   1524c:	4770      	bx	lr
   1524e:	461e      	mov	r6, r3
   15250:	46ba      	mov	sl, r7
   15252:	4699      	mov	r9, r3
   15254:	4618      	mov	r0, r3
   15256:	9500      	str	r5, [sp, #0]
   15258:	461f      	mov	r7, r3
   1525a:	b366      	cbz	r6, 152b6 <__sfvwrite_r+0x17e>
   1525c:	2800      	cmp	r0, #0
   1525e:	d032      	beq.n	152c6 <__sfvwrite_r+0x18e>
   15260:	464a      	mov	r2, r9
   15262:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   15266:	6820      	ldr	r0, [r4, #0]
   15268:	68a5      	ldr	r5, [r4, #8]
   1526a:	42b2      	cmp	r2, r6
   1526c:	bf28      	it	cs
   1526e:	4632      	movcs	r2, r6
   15270:	4288      	cmp	r0, r1
   15272:	d904      	bls.n	1527e <__sfvwrite_r+0x146>
   15274:	eb05 0b03 	add.w	fp, r5, r3
   15278:	455a      	cmp	r2, fp
   1527a:	f300 80a7 	bgt.w	153cc <__sfvwrite_r+0x294>
   1527e:	4293      	cmp	r3, r2
   15280:	dc64      	bgt.n	1534c <__sfvwrite_r+0x214>
   15282:	69e1      	ldr	r1, [r4, #28]
   15284:	6a65      	ldr	r5, [r4, #36]	; 0x24
   15286:	463a      	mov	r2, r7
   15288:	4640      	mov	r0, r8
   1528a:	47a8      	blx	r5
   1528c:	f1b0 0b00 	subs.w	fp, r0, #0
   15290:	ddd1      	ble.n	15236 <__sfvwrite_r+0xfe>
   15292:	ebb9 090b 	subs.w	r9, r9, fp
   15296:	d0c9      	beq.n	1522c <__sfvwrite_r+0xf4>
   15298:	2001      	movs	r0, #1
   1529a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1529e:	eba3 030b 	sub.w	r3, r3, fp
   152a2:	445f      	add	r7, fp
   152a4:	eba6 060b 	sub.w	r6, r6, fp
   152a8:	f8ca 3008 	str.w	r3, [sl, #8]
   152ac:	2b00      	cmp	r3, #0
   152ae:	f43f af74 	beq.w	1519a <__sfvwrite_r+0x62>
   152b2:	2e00      	cmp	r6, #0
   152b4:	d1d2      	bne.n	1525c <__sfvwrite_r+0x124>
   152b6:	9a00      	ldr	r2, [sp, #0]
   152b8:	6856      	ldr	r6, [r2, #4]
   152ba:	4613      	mov	r3, r2
   152bc:	3208      	adds	r2, #8
   152be:	9200      	str	r2, [sp, #0]
   152c0:	2e00      	cmp	r6, #0
   152c2:	d0f8      	beq.n	152b6 <__sfvwrite_r+0x17e>
   152c4:	681f      	ldr	r7, [r3, #0]
   152c6:	4632      	mov	r2, r6
   152c8:	210a      	movs	r1, #10
   152ca:	4638      	mov	r0, r7
   152cc:	f7fc ff58 	bl	12180 <memchr>
   152d0:	2800      	cmp	r0, #0
   152d2:	f000 809c 	beq.w	1540e <__sfvwrite_r+0x2d6>
   152d6:	3001      	adds	r0, #1
   152d8:	eba0 0907 	sub.w	r9, r0, r7
   152dc:	e7c0      	b.n	15260 <__sfvwrite_r+0x128>
   152de:	6820      	ldr	r0, [r4, #0]
   152e0:	6923      	ldr	r3, [r4, #16]
   152e2:	4298      	cmp	r0, r3
   152e4:	d816      	bhi.n	15314 <__sfvwrite_r+0x1dc>
   152e6:	6962      	ldr	r2, [r4, #20]
   152e8:	42b2      	cmp	r2, r6
   152ea:	d813      	bhi.n	15314 <__sfvwrite_r+0x1dc>
   152ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   152f0:	42b3      	cmp	r3, r6
   152f2:	bf28      	it	cs
   152f4:	4633      	movcs	r3, r6
   152f6:	69e1      	ldr	r1, [r4, #28]
   152f8:	fb93 f3f2 	sdiv	r3, r3, r2
   152fc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   152fe:	fb02 f303 	mul.w	r3, r2, r3
   15302:	4640      	mov	r0, r8
   15304:	464a      	mov	r2, r9
   15306:	47b8      	blx	r7
   15308:	f1b0 0a00 	subs.w	sl, r0, #0
   1530c:	dd93      	ble.n	15236 <__sfvwrite_r+0xfe>
   1530e:	eba6 060a 	sub.w	r6, r6, sl
   15312:	e776      	b.n	15202 <__sfvwrite_r+0xca>
   15314:	45b3      	cmp	fp, r6
   15316:	46da      	mov	sl, fp
   15318:	bf28      	it	cs
   1531a:	46b2      	movcs	sl, r6
   1531c:	4652      	mov	r2, sl
   1531e:	4649      	mov	r1, r9
   15320:	f7fc f8d4 	bl	114cc <memmove>
   15324:	68a3      	ldr	r3, [r4, #8]
   15326:	6822      	ldr	r2, [r4, #0]
   15328:	eba3 030a 	sub.w	r3, r3, sl
   1532c:	4452      	add	r2, sl
   1532e:	60a3      	str	r3, [r4, #8]
   15330:	6022      	str	r2, [r4, #0]
   15332:	2b00      	cmp	r3, #0
   15334:	d1eb      	bne.n	1530e <__sfvwrite_r+0x1d6>
   15336:	4621      	mov	r1, r4
   15338:	4640      	mov	r0, r8
   1533a:	f7ff fdf5 	bl	14f28 <_fflush_r>
   1533e:	2800      	cmp	r0, #0
   15340:	d0e5      	beq.n	1530e <__sfvwrite_r+0x1d6>
   15342:	e778      	b.n	15236 <__sfvwrite_r+0xfe>
   15344:	6820      	ldr	r0, [r4, #0]
   15346:	46b3      	mov	fp, r6
   15348:	4632      	mov	r2, r6
   1534a:	e74c      	b.n	151e6 <__sfvwrite_r+0xae>
   1534c:	4639      	mov	r1, r7
   1534e:	9201      	str	r2, [sp, #4]
   15350:	f7fc f8bc 	bl	114cc <memmove>
   15354:	9a01      	ldr	r2, [sp, #4]
   15356:	68a3      	ldr	r3, [r4, #8]
   15358:	1a9b      	subs	r3, r3, r2
   1535a:	60a3      	str	r3, [r4, #8]
   1535c:	6823      	ldr	r3, [r4, #0]
   1535e:	4413      	add	r3, r2
   15360:	6023      	str	r3, [r4, #0]
   15362:	4693      	mov	fp, r2
   15364:	e795      	b.n	15292 <__sfvwrite_r+0x15a>
   15366:	6823      	ldr	r3, [r4, #0]
   15368:	6921      	ldr	r1, [r4, #16]
   1536a:	eba3 0b01 	sub.w	fp, r3, r1
   1536e:	6963      	ldr	r3, [r4, #20]
   15370:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   15374:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   15378:	f10b 0301 	add.w	r3, fp, #1
   1537c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   15380:	4433      	add	r3, r6
   15382:	4553      	cmp	r3, sl
   15384:	4652      	mov	r2, sl
   15386:	bf84      	itt	hi
   15388:	469a      	movhi	sl, r3
   1538a:	4652      	movhi	r2, sl
   1538c:	0543      	lsls	r3, r0, #21
   1538e:	d52c      	bpl.n	153ea <__sfvwrite_r+0x2b2>
   15390:	4611      	mov	r1, r2
   15392:	4640      	mov	r0, r8
   15394:	f7fb fdba 	bl	10f0c <_malloc_r>
   15398:	2800      	cmp	r0, #0
   1539a:	d03b      	beq.n	15414 <__sfvwrite_r+0x2dc>
   1539c:	465a      	mov	r2, fp
   1539e:	6921      	ldr	r1, [r4, #16]
   153a0:	9001      	str	r0, [sp, #4]
   153a2:	f7f8 f865 	bl	d470 <memcpy>
   153a6:	89a2      	ldrh	r2, [r4, #12]
   153a8:	9b01      	ldr	r3, [sp, #4]
   153aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   153ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   153b2:	81a2      	strh	r2, [r4, #12]
   153b4:	eb03 000b 	add.w	r0, r3, fp
   153b8:	6123      	str	r3, [r4, #16]
   153ba:	ebaa 030b 	sub.w	r3, sl, fp
   153be:	f8c4 a014 	str.w	sl, [r4, #20]
   153c2:	60a3      	str	r3, [r4, #8]
   153c4:	6020      	str	r0, [r4, #0]
   153c6:	46b3      	mov	fp, r6
   153c8:	4632      	mov	r2, r6
   153ca:	e70c      	b.n	151e6 <__sfvwrite_r+0xae>
   153cc:	4639      	mov	r1, r7
   153ce:	465a      	mov	r2, fp
   153d0:	f7fc f87c 	bl	114cc <memmove>
   153d4:	6823      	ldr	r3, [r4, #0]
   153d6:	445b      	add	r3, fp
   153d8:	6023      	str	r3, [r4, #0]
   153da:	4621      	mov	r1, r4
   153dc:	4640      	mov	r0, r8
   153de:	f7ff fda3 	bl	14f28 <_fflush_r>
   153e2:	2800      	cmp	r0, #0
   153e4:	f43f af55 	beq.w	15292 <__sfvwrite_r+0x15a>
   153e8:	e725      	b.n	15236 <__sfvwrite_r+0xfe>
   153ea:	4640      	mov	r0, r8
   153ec:	f7fc ff96 	bl	1231c <_realloc_r>
   153f0:	4603      	mov	r3, r0
   153f2:	2800      	cmp	r0, #0
   153f4:	d1de      	bne.n	153b4 <__sfvwrite_r+0x27c>
   153f6:	6921      	ldr	r1, [r4, #16]
   153f8:	4640      	mov	r0, r8
   153fa:	f7fd f9cb 	bl	12794 <_free_r>
   153fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15402:	220c      	movs	r2, #12
   15404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15408:	f8c8 2000 	str.w	r2, [r8]
   1540c:	e715      	b.n	1523a <__sfvwrite_r+0x102>
   1540e:	1c72      	adds	r2, r6, #1
   15410:	4691      	mov	r9, r2
   15412:	e726      	b.n	15262 <__sfvwrite_r+0x12a>
   15414:	220c      	movs	r2, #12
   15416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1541a:	f8c8 2000 	str.w	r2, [r8]
   1541e:	e70c      	b.n	1523a <__sfvwrite_r+0x102>
   15420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15424:	e6ba      	b.n	1519c <__sfvwrite_r+0x64>
   15426:	bf00      	nop
   15428:	7ffffc00 	.word	0x7ffffc00

0001542c <__swbuf_r>:
   1542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1542e:	460d      	mov	r5, r1
   15430:	4614      	mov	r4, r2
   15432:	4606      	mov	r6, r0
   15434:	b110      	cbz	r0, 1543c <__swbuf_r+0x10>
   15436:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15438:	2b00      	cmp	r3, #0
   1543a:	d04c      	beq.n	154d6 <__swbuf_r+0xaa>
   1543c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15440:	69a3      	ldr	r3, [r4, #24]
   15442:	60a3      	str	r3, [r4, #8]
   15444:	0717      	lsls	r7, r2, #28
   15446:	b290      	uxth	r0, r2
   15448:	d51b      	bpl.n	15482 <__swbuf_r+0x56>
   1544a:	6923      	ldr	r3, [r4, #16]
   1544c:	b1cb      	cbz	r3, 15482 <__swbuf_r+0x56>
   1544e:	b2ed      	uxtb	r5, r5
   15450:	0481      	lsls	r1, r0, #18
   15452:	462f      	mov	r7, r5
   15454:	d522      	bpl.n	1549c <__swbuf_r+0x70>
   15456:	6822      	ldr	r2, [r4, #0]
   15458:	6961      	ldr	r1, [r4, #20]
   1545a:	1ad3      	subs	r3, r2, r3
   1545c:	4299      	cmp	r1, r3
   1545e:	dd29      	ble.n	154b4 <__swbuf_r+0x88>
   15460:	3301      	adds	r3, #1
   15462:	68a1      	ldr	r1, [r4, #8]
   15464:	3901      	subs	r1, #1
   15466:	60a1      	str	r1, [r4, #8]
   15468:	1c51      	adds	r1, r2, #1
   1546a:	6021      	str	r1, [r4, #0]
   1546c:	7015      	strb	r5, [r2, #0]
   1546e:	6962      	ldr	r2, [r4, #20]
   15470:	429a      	cmp	r2, r3
   15472:	d027      	beq.n	154c4 <__swbuf_r+0x98>
   15474:	89a3      	ldrh	r3, [r4, #12]
   15476:	07db      	lsls	r3, r3, #31
   15478:	d501      	bpl.n	1547e <__swbuf_r+0x52>
   1547a:	2d0a      	cmp	r5, #10
   1547c:	d022      	beq.n	154c4 <__swbuf_r+0x98>
   1547e:	4638      	mov	r0, r7
   15480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15482:	4621      	mov	r1, r4
   15484:	4630      	mov	r0, r6
   15486:	f7fe fcbb 	bl	13e00 <__swsetup_r>
   1548a:	bb08      	cbnz	r0, 154d0 <__swbuf_r+0xa4>
   1548c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   15490:	6923      	ldr	r3, [r4, #16]
   15492:	b290      	uxth	r0, r2
   15494:	b2ed      	uxtb	r5, r5
   15496:	0481      	lsls	r1, r0, #18
   15498:	462f      	mov	r7, r5
   1549a:	d4dc      	bmi.n	15456 <__swbuf_r+0x2a>
   1549c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   154a0:	81a2      	strh	r2, [r4, #12]
   154a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   154a4:	6961      	ldr	r1, [r4, #20]
   154a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   154aa:	6662      	str	r2, [r4, #100]	; 0x64
   154ac:	6822      	ldr	r2, [r4, #0]
   154ae:	1ad3      	subs	r3, r2, r3
   154b0:	4299      	cmp	r1, r3
   154b2:	dcd5      	bgt.n	15460 <__swbuf_r+0x34>
   154b4:	4621      	mov	r1, r4
   154b6:	4630      	mov	r0, r6
   154b8:	f7ff fd36 	bl	14f28 <_fflush_r>
   154bc:	b940      	cbnz	r0, 154d0 <__swbuf_r+0xa4>
   154be:	6822      	ldr	r2, [r4, #0]
   154c0:	2301      	movs	r3, #1
   154c2:	e7ce      	b.n	15462 <__swbuf_r+0x36>
   154c4:	4621      	mov	r1, r4
   154c6:	4630      	mov	r0, r6
   154c8:	f7ff fd2e 	bl	14f28 <_fflush_r>
   154cc:	2800      	cmp	r0, #0
   154ce:	d0d6      	beq.n	1547e <__swbuf_r+0x52>
   154d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   154d4:	e7d3      	b.n	1547e <__swbuf_r+0x52>
   154d6:	f7fc fe29 	bl	1212c <__sinit>
   154da:	e7af      	b.n	1543c <__swbuf_r+0x10>

000154dc <_wcsnrtombs_l>:
   154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e0:	b08b      	sub	sp, #44	; 0x2c
   154e2:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   154e6:	9f14      	ldr	r7, [sp, #80]	; 0x50
   154e8:	9103      	str	r1, [sp, #12]
   154ea:	4681      	mov	r9, r0
   154ec:	9205      	str	r2, [sp, #20]
   154ee:	461e      	mov	r6, r3
   154f0:	f1b8 0f00 	cmp.w	r8, #0
   154f4:	d05c      	beq.n	155b0 <_wcsnrtombs_l+0xd4>
   154f6:	9b03      	ldr	r3, [sp, #12]
   154f8:	2b00      	cmp	r3, #0
   154fa:	d05e      	beq.n	155ba <_wcsnrtombs_l+0xde>
   154fc:	9b05      	ldr	r3, [sp, #20]
   154fe:	681d      	ldr	r5, [r3, #0]
   15500:	2f00      	cmp	r7, #0
   15502:	d06a      	beq.n	155da <_wcsnrtombs_l+0xfe>
   15504:	1e74      	subs	r4, r6, #1
   15506:	b34e      	cbz	r6, 1555c <_wcsnrtombs_l+0x80>
   15508:	9b03      	ldr	r3, [sp, #12]
   1550a:	9304      	str	r3, [sp, #16]
   1550c:	3d04      	subs	r5, #4
   1550e:	2600      	movs	r6, #0
   15510:	9501      	str	r5, [sp, #4]
   15512:	e00b      	b.n	1552c <_wcsnrtombs_l+0x50>
   15514:	9b03      	ldr	r3, [sp, #12]
   15516:	bb2b      	cbnz	r3, 15564 <_wcsnrtombs_l+0x88>
   15518:	9b01      	ldr	r3, [sp, #4]
   1551a:	681a      	ldr	r2, [r3, #0]
   1551c:	2a00      	cmp	r2, #0
   1551e:	d03a      	beq.n	15596 <_wcsnrtombs_l+0xba>
   15520:	45bc      	cmp	ip, r7
   15522:	d25c      	bcs.n	155de <_wcsnrtombs_l+0x102>
   15524:	3c01      	subs	r4, #1
   15526:	1c63      	adds	r3, r4, #1
   15528:	4666      	mov	r6, ip
   1552a:	d017      	beq.n	1555c <_wcsnrtombs_l+0x80>
   1552c:	f8d8 3000 	ldr.w	r3, [r8]
   15530:	9302      	str	r3, [sp, #8]
   15532:	9b01      	ldr	r3, [sp, #4]
   15534:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   15538:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1553c:	9301      	str	r3, [sp, #4]
   1553e:	a907      	add	r1, sp, #28
   15540:	4643      	mov	r3, r8
   15542:	4648      	mov	r0, r9
   15544:	f8d8 b004 	ldr.w	fp, [r8, #4]
   15548:	47a8      	blx	r5
   1554a:	1c42      	adds	r2, r0, #1
   1554c:	d03a      	beq.n	155c4 <_wcsnrtombs_l+0xe8>
   1554e:	eb00 0c06 	add.w	ip, r0, r6
   15552:	45bc      	cmp	ip, r7
   15554:	d9de      	bls.n	15514 <_wcsnrtombs_l+0x38>
   15556:	9b02      	ldr	r3, [sp, #8]
   15558:	e9c8 3b00 	strd	r3, fp, [r8]
   1555c:	4630      	mov	r0, r6
   1555e:	b00b      	add	sp, #44	; 0x2c
   15560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15564:	2800      	cmp	r0, #0
   15566:	dd0e      	ble.n	15586 <_wcsnrtombs_l+0xaa>
   15568:	9b04      	ldr	r3, [sp, #16]
   1556a:	9d01      	ldr	r5, [sp, #4]
   1556c:	4418      	add	r0, r3
   1556e:	1e5a      	subs	r2, r3, #1
   15570:	a907      	add	r1, sp, #28
   15572:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   15576:	f811 3b01 	ldrb.w	r3, [r1], #1
   1557a:	f802 3f01 	strb.w	r3, [r2, #1]!
   1557e:	4572      	cmp	r2, lr
   15580:	d1f9      	bne.n	15576 <_wcsnrtombs_l+0x9a>
   15582:	9501      	str	r5, [sp, #4]
   15584:	9004      	str	r0, [sp, #16]
   15586:	9b05      	ldr	r3, [sp, #20]
   15588:	681a      	ldr	r2, [r3, #0]
   1558a:	3204      	adds	r2, #4
   1558c:	601a      	str	r2, [r3, #0]
   1558e:	9b01      	ldr	r3, [sp, #4]
   15590:	681a      	ldr	r2, [r3, #0]
   15592:	2a00      	cmp	r2, #0
   15594:	d1c4      	bne.n	15520 <_wcsnrtombs_l+0x44>
   15596:	9b03      	ldr	r3, [sp, #12]
   15598:	b10b      	cbz	r3, 1559e <_wcsnrtombs_l+0xc2>
   1559a:	9b05      	ldr	r3, [sp, #20]
   1559c:	601a      	str	r2, [r3, #0]
   1559e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   155a2:	2200      	movs	r2, #0
   155a4:	4630      	mov	r0, r6
   155a6:	f8c8 2000 	str.w	r2, [r8]
   155aa:	b00b      	add	sp, #44	; 0x2c
   155ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155b0:	9b03      	ldr	r3, [sp, #12]
   155b2:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   155b6:	2b00      	cmp	r3, #0
   155b8:	d1a0      	bne.n	154fc <_wcsnrtombs_l+0x20>
   155ba:	9b05      	ldr	r3, [sp, #20]
   155bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   155c0:	681d      	ldr	r5, [r3, #0]
   155c2:	e79f      	b.n	15504 <_wcsnrtombs_l+0x28>
   155c4:	4606      	mov	r6, r0
   155c6:	218a      	movs	r1, #138	; 0x8a
   155c8:	2200      	movs	r2, #0
   155ca:	4630      	mov	r0, r6
   155cc:	f8c9 1000 	str.w	r1, [r9]
   155d0:	f8c8 2000 	str.w	r2, [r8]
   155d4:	b00b      	add	sp, #44	; 0x2c
   155d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155da:	463e      	mov	r6, r7
   155dc:	e7be      	b.n	1555c <_wcsnrtombs_l+0x80>
   155de:	4666      	mov	r6, ip
   155e0:	e7bc      	b.n	1555c <_wcsnrtombs_l+0x80>
   155e2:	bf00      	nop

000155e4 <_wcsnrtombs_r>:
   155e4:	b510      	push	{r4, lr}
   155e6:	b084      	sub	sp, #16
   155e8:	4c05      	ldr	r4, [pc, #20]	; (15600 <_wcsnrtombs_r+0x1c>)
   155ea:	9806      	ldr	r0, [sp, #24]
   155ec:	9000      	str	r0, [sp, #0]
   155ee:	9807      	ldr	r0, [sp, #28]
   155f0:	9001      	str	r0, [sp, #4]
   155f2:	4804      	ldr	r0, [pc, #16]	; (15604 <_wcsnrtombs_r+0x20>)
   155f4:	6800      	ldr	r0, [r0, #0]
   155f6:	9402      	str	r4, [sp, #8]
   155f8:	f7ff ff70 	bl	154dc <_wcsnrtombs_l>
   155fc:	b004      	add	sp, #16
   155fe:	bd10      	pop	{r4, pc}
   15600:	200033d4 	.word	0x200033d4
   15604:	2000395c 	.word	0x2000395c

00015608 <___reboot_Teensyduino__veneer>:
   15608:	f85f f000 	ldr.w	pc, [pc]	; 1560c <___reboot_Teensyduino__veneer+0x4>
   1560c:	60001ee5 	.word	0x60001ee5

00015610 <___init_veneer>:
   15610:	f85f f000 	ldr.w	pc, [pc]	; 15614 <___init_veneer+0x4>
   15614:	60001f39 	.word	0x60001f39

00015618 <___ZN7TwoWire5beginEv_veneer>:
   15618:	f85f f000 	ldr.w	pc, [pc]	; 1561c <___ZN7TwoWire5beginEv_veneer+0x4>
   1561c:	600017c9 	.word	0x600017c9

Disassembly of section .fini:

00015620 <_fini>:
   15620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15622:	bf00      	nop
